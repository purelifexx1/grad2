
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001adac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  0801af40  0801af40  0002af40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b6f0  0801b6f0  00030b80  2**0
                  CONTENTS
  4 .ARM          00000008  0801b6f0  0801b6f0  0002b6f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b6f8  0801b6f8  00030b80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b6f8  0801b6f8  0002b6f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b6fc  0801b6fc  0002b6fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b80  20000000  0801b700  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006bc0  20000b80  0801c280  00030b80  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007740  0801c280  00037740  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030b80  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030b01  00000000  00000000  00030bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000643a  00000000  00000000  000616b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001db0  00000000  00000000  00067af0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b78  00000000  00000000  000698a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029dfe  00000000  00000000  0006b418  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f8d7  00000000  00000000  00095216  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ddcfc  00000000  00000000  000b4aed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001927e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b98  00000000  00000000  00192864  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000b80 	.word	0x20000b80
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801af24 	.word	0x0801af24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000b84 	.word	0x20000b84
 80001cc:	0801af24 	.word	0x0801af24

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <packetRead>:
												"OKAY"};

Position_DataType position_type;
SCARA_Gcode_Cor_TypeDef		Gcode_Cor[125];
uint16_t point_counter = 0;
Robot_CommandTypedef 	packetRead	(uint8_t *message, int32_t length, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b08d      	sub	sp, #52	; 0x34
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	603b      	str	r3, [r7, #0]
	Transfer_Protocol protocol_id = message[0];
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    duty_cmd->id_command = message[1];
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	609a      	str	r2, [r3, #8]
	int32_t temp_pointer = 2;
 8000faa:	2302      	movs	r3, #2
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch(protocol_id) 
 8000fae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d004      	beq.n	8000fc0 <packetRead+0x38>
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	f000 813d 	beq.w	8001236 <packetRead+0x2ae>
 8000fbc:	f000 bc6a 	b.w	8001894 <packetRead+0x90c>
    {
        // reserved for Gcode file transfer
        case FILE_TRANSMISION:
        {
        	temp_pointer = 1;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	62fb      	str	r3, [r7, #44]	; 0x2c

        	do {
        		Gcode_Packet_Command_TypeDef move_type 	 = message[temp_pointer] & 0x0f;
 8000fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	4413      	add	r3, r2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	f003 030f 	and.w	r3, r3, #15
 8000fd0:	74bb      	strb	r3, [r7, #18]
				switch (move_type){
 8000fd2:	7cbb      	ldrb	r3, [r7, #18]
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	f200 8127 	bhi.w	8001228 <packetRead+0x2a0>
 8000fda:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <packetRead+0x58>)
 8000fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe0:	08000ff1 	.word	0x08000ff1
 8000fe4:	08001061 	.word	0x08001061
 8000fe8:	08001121 	.word	0x08001121
 8000fec:	08001121 	.word	0x08001121
				case FIRST_PACKET:{
					temp_pointer++;
 8000ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
					down_z_height = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 8000ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fa90 	bl	8000524 <__aeabi_i2d>
 8001004:	a3b2      	add	r3, pc, #712	; (adr r3, 80012d0 <packetRead+0x348>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff faf5 	bl	80005f8 <__aeabi_dmul>
 800100e:	4603      	mov	r3, r0
 8001010:	460c      	mov	r4, r1
 8001012:	4ab1      	ldr	r2, [pc, #708]	; (80012d8 <packetRead+0x350>)
 8001014:	e9c2 3400 	strd	r3, r4, [r2]
 8001018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800101a:	3304      	adds	r3, #4
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
					up_z_height   = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 800101e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fa7c 	bl	8000524 <__aeabi_i2d>
 800102c:	a3a8      	add	r3, pc, #672	; (adr r3, 80012d0 <packetRead+0x348>)
 800102e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001032:	f7ff fae1 	bl	80005f8 <__aeabi_dmul>
 8001036:	4603      	mov	r3, r0
 8001038:	460c      	mov	r4, r1
 800103a:	4aa8      	ldr	r2, [pc, #672]	; (80012dc <packetRead+0x354>)
 800103c:	e9c2 3400 	strd	r3, r4, [r2]
 8001040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001042:	3304      	adds	r3, #4
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
					total_num_of_point = B2I(temp_pointer);						 temp_pointer+=4;
 8001046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4aa4      	ldr	r2, [pc, #656]	; (80012e0 <packetRead+0x358>)
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001054:	3304      	adds	r3, #4
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter = 0;
 8001058:	4ba2      	ldr	r3, [pc, #648]	; (80012e4 <packetRead+0x35c>)
 800105a:	2200      	movs	r2, #0
 800105c:	801a      	strh	r2, [r3, #0]
				}
				break;
 800105e:	e0e3      	b.n	8001228 <packetRead+0x2a0>
				case LINEAR_TYPE:{
					Gcode_Cor[point_counter].type_define[0] = move_type;
 8001060:	4ba0      	ldr	r3, [pc, #640]	; (80012e4 <packetRead+0x35c>)
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	4aa0      	ldr	r2, [pc, #640]	; (80012e8 <packetRead+0x360>)
 8001068:	460b      	mov	r3, r1
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	440b      	add	r3, r1
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	4413      	add	r3, r2
 8001072:	3314      	adds	r3, #20
 8001074:	7cba      	ldrb	r2, [r7, #18]
 8001076:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].type_define[1]	= message[temp_pointer++] >> 4 & 0x0f;
 8001078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107a:	1c5a      	adds	r2, r3, #1
 800107c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800107e:	461a      	mov	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	091b      	lsrs	r3, r3, #4
 8001088:	b2db      	uxtb	r3, r3
 800108a:	4a96      	ldr	r2, [pc, #600]	; (80012e4 <packetRead+0x35c>)
 800108c:	8812      	ldrh	r2, [r2, #0]
 800108e:	4611      	mov	r1, r2
 8001090:	f003 030f 	and.w	r3, r3, #15
 8001094:	b2d8      	uxtb	r0, r3
 8001096:	4a94      	ldr	r2, [pc, #592]	; (80012e8 <packetRead+0x360>)
 8001098:	460b      	mov	r3, r1
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	440b      	add	r3, r1
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	4413      	add	r3, r2
 80010a2:	3315      	adds	r3, #21
 80010a4:	4602      	mov	r2, r0
 80010a6:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 80010a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	4413      	add	r3, r2
 80010ae:	4a8d      	ldr	r2, [pc, #564]	; (80012e4 <packetRead+0x35c>)
 80010b0:	8812      	ldrh	r2, [r2, #0]
 80010b2:	4610      	mov	r0, r2
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	498c      	ldr	r1, [pc, #560]	; (80012e8 <packetRead+0x360>)
 80010b8:	4603      	mov	r3, r0
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4403      	add	r3, r0
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	440b      	add	r3, r1
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c6:	3304      	adds	r3, #4
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 80010ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a84      	ldr	r2, [pc, #528]	; (80012e4 <packetRead+0x35c>)
 80010d2:	8812      	ldrh	r2, [r2, #0]
 80010d4:	4610      	mov	r0, r2
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4983      	ldr	r1, [pc, #524]	; (80012e8 <packetRead+0x360>)
 80010da:	4603      	mov	r3, r0
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4403      	add	r3, r0
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	440b      	add	r3, r1
 80010e4:	3304      	adds	r3, #4
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ea:	3304      	adds	r3, #4
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 80010ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a7b      	ldr	r2, [pc, #492]	; (80012e4 <packetRead+0x35c>)
 80010f6:	8812      	ldrh	r2, [r2, #0]
 80010f8:	4610      	mov	r0, r2
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	497a      	ldr	r1, [pc, #488]	; (80012e8 <packetRead+0x360>)
 80010fe:	4603      	mov	r3, r0
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4403      	add	r3, r0
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	440b      	add	r3, r1
 8001108:	3308      	adds	r3, #8
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110e:	3304      	adds	r3, #4
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter++;
 8001112:	4b74      	ldr	r3, [pc, #464]	; (80012e4 <packetRead+0x35c>)
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	b29a      	uxth	r2, r3
 800111a:	4b72      	ldr	r3, [pc, #456]	; (80012e4 <packetRead+0x35c>)
 800111c:	801a      	strh	r2, [r3, #0]
				}
				break;
 800111e:	e083      	b.n	8001228 <packetRead+0x2a0>
				case ARC_CW_TYPE:
				case ARC_AW_TYPE:{
					Gcode_Cor[point_counter].type_define[0] = move_type;
 8001120:	4b70      	ldr	r3, [pc, #448]	; (80012e4 <packetRead+0x35c>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	4619      	mov	r1, r3
 8001126:	4a70      	ldr	r2, [pc, #448]	; (80012e8 <packetRead+0x360>)
 8001128:	460b      	mov	r3, r1
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	440b      	add	r3, r1
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	4413      	add	r3, r2
 8001132:	3314      	adds	r3, #20
 8001134:	7cba      	ldrb	r2, [r7, #18]
 8001136:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].type_define[1]	= message[temp_pointer++] >> 4 & 0x0f;
 8001138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113a:	1c5a      	adds	r2, r3, #1
 800113c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	091b      	lsrs	r3, r3, #4
 8001148:	b2db      	uxtb	r3, r3
 800114a:	4a66      	ldr	r2, [pc, #408]	; (80012e4 <packetRead+0x35c>)
 800114c:	8812      	ldrh	r2, [r2, #0]
 800114e:	4611      	mov	r1, r2
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	b2d8      	uxtb	r0, r3
 8001156:	4a64      	ldr	r2, [pc, #400]	; (80012e8 <packetRead+0x360>)
 8001158:	460b      	mov	r3, r1
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	440b      	add	r3, r1
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4413      	add	r3, r2
 8001162:	3315      	adds	r3, #21
 8001164:	4602      	mov	r2, r0
 8001166:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 8001168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	4413      	add	r3, r2
 800116e:	4a5d      	ldr	r2, [pc, #372]	; (80012e4 <packetRead+0x35c>)
 8001170:	8812      	ldrh	r2, [r2, #0]
 8001172:	4610      	mov	r0, r2
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	495c      	ldr	r1, [pc, #368]	; (80012e8 <packetRead+0x360>)
 8001178:	4603      	mov	r3, r0
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4403      	add	r3, r0
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	440b      	add	r3, r1
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001186:	3304      	adds	r3, #4
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 800118a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	4a54      	ldr	r2, [pc, #336]	; (80012e4 <packetRead+0x35c>)
 8001192:	8812      	ldrh	r2, [r2, #0]
 8001194:	4610      	mov	r0, r2
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4953      	ldr	r1, [pc, #332]	; (80012e8 <packetRead+0x360>)
 800119a:	4603      	mov	r3, r0
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	4403      	add	r3, r0
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	440b      	add	r3, r1
 80011a4:	3304      	adds	r3, #4
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011aa:	3304      	adds	r3, #4
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 80011ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	4413      	add	r3, r2
 80011b4:	4a4b      	ldr	r2, [pc, #300]	; (80012e4 <packetRead+0x35c>)
 80011b6:	8812      	ldrh	r2, [r2, #0]
 80011b8:	4610      	mov	r0, r2
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	494a      	ldr	r1, [pc, #296]	; (80012e8 <packetRead+0x360>)
 80011be:	4603      	mov	r3, r0
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4403      	add	r3, r0
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	440b      	add	r3, r1
 80011c8:	3308      	adds	r3, #8
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ce:	3304      	adds	r3, #4
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].I = B2I(temp_pointer);	temp_pointer+=4;
 80011d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a42      	ldr	r2, [pc, #264]	; (80012e4 <packetRead+0x35c>)
 80011da:	8812      	ldrh	r2, [r2, #0]
 80011dc:	4610      	mov	r0, r2
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4941      	ldr	r1, [pc, #260]	; (80012e8 <packetRead+0x360>)
 80011e2:	4603      	mov	r3, r0
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4403      	add	r3, r0
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	440b      	add	r3, r1
 80011ec:	330c      	adds	r3, #12
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f2:	3304      	adds	r3, #4
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].J = B2I(temp_pointer);	temp_pointer+=4;
 80011f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	4a39      	ldr	r2, [pc, #228]	; (80012e4 <packetRead+0x35c>)
 80011fe:	8812      	ldrh	r2, [r2, #0]
 8001200:	4610      	mov	r0, r2
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4938      	ldr	r1, [pc, #224]	; (80012e8 <packetRead+0x360>)
 8001206:	4603      	mov	r3, r0
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4403      	add	r3, r0
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	440b      	add	r3, r1
 8001210:	3310      	adds	r3, #16
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001216:	3304      	adds	r3, #4
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter++;
 800121a:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <packetRead+0x35c>)
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	b29a      	uxth	r2, r3
 8001222:	4b30      	ldr	r3, [pc, #192]	; (80012e4 <packetRead+0x35c>)
 8001224:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001226:	bf00      	nop
				}
        	}while(temp_pointer < length);
 8001228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	429a      	cmp	r2, r3
 800122e:	f6ff aec9 	blt.w	8000fc4 <packetRead+0x3c>
        	return CMD_GCODE;
 8001232:	231a      	movs	r3, #26
 8001234:	e32f      	b.n	8001896 <packetRead+0x90e>
        break;

        // command control from pc
        case COMMAND_TRANSMISION:
        {
        	Robot_CommandTypedef command_id = message[1];
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	785b      	ldrb	r3, [r3, #1]
 800123a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            switch(command_id)
 800123e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001242:	2b19      	cmp	r3, #25
 8001244:	f200 8324 	bhi.w	8001890 <packetRead+0x908>
 8001248:	a201      	add	r2, pc, #4	; (adr r2, 8001250 <packetRead+0x2c8>)
 800124a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124e:	bf00      	nop
 8001250:	080012b9 	.word	0x080012b9
 8001254:	080012f1 	.word	0x080012f1
 8001258:	08001307 	.word	0x08001307
 800125c:	080013cb 	.word	0x080013cb
 8001260:	080015a1 	.word	0x080015a1
 8001264:	080015a5 	.word	0x080015a5
 8001268:	080015a9 	.word	0x080015a9
 800126c:	080015ad 	.word	0x080015ad
 8001270:	08001891 	.word	0x08001891
 8001274:	080015cd 	.word	0x080015cd
 8001278:	08001609 	.word	0x08001609
 800127c:	08001675 	.word	0x08001675
 8001280:	08001743 	.word	0x08001743
 8001284:	08001891 	.word	0x08001891
 8001288:	08001891 	.word	0x08001891
 800128c:	08001891 	.word	0x08001891
 8001290:	08001891 	.word	0x08001891
 8001294:	08001891 	.word	0x08001891
 8001298:	08001891 	.word	0x08001891
 800129c:	08001891 	.word	0x08001891
 80012a0:	080016e1 	.word	0x080016e1
 80012a4:	0800170b 	.word	0x0800170b
 80012a8:	08001891 	.word	0x08001891
 80012ac:	08001891 	.word	0x08001891
 80012b0:	0800177d 	.word	0x0800177d
 80012b4:	0800185d 	.word	0x0800185d
            {
                // Stop now
                case CMD_STOPNOW:
                {
                    duty_cmd->robot_mode = SCARA_MODE_STOP;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2200      	movs	r2, #0
 80012bc:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	2201      	movs	r2, #1
 80012c2:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
                    return CMD_STOPNOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e2e3      	b.n	8001896 <packetRead+0x90e>
 80012ce:	bf00      	nop
 80012d0:	a0000000 	.word	0xa0000000
 80012d4:	3eb0c6f7 	.word	0x3eb0c6f7
 80012d8:	20004d68 	.word	0x20004d68
 80012dc:	20004d60 	.word	0x20004d60
 80012e0:	20004d70 	.word	0x20004d70
 80012e4:	20000b9c 	.word	0x20000b9c
 80012e8:	20004d74 	.word	0x20004d74
 80012ec:	358637bd 	.word	0x358637bd
                break;

                // Scan limit
                case CMD_SCAN_LIMIT:
                {
                    duty_cmd->robot_mode = SCARA_MODE_SCAN;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	2201      	movs	r2, #1
 80012f4:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	2201      	movs	r2, #1
 80012fa:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
                    return CMD_SCAN_LIMIT;
 8001302:	2301      	movs	r3, #1
 8001304:	e2c7      	b.n	8001896 <packetRead+0x90e>
                break;

                // Move home
                case CMD_MOVE_HOME:
                {
                    if (length == 10){ // 2 int32_t number + 2 define byte
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	2b0a      	cmp	r3, #10
 800130a:	d15c      	bne.n	80013c6 <packetRead+0x43e>
                        // memcpy(&duty_cmd->v_factor, &message[temp_pointer+=8], 8);
						// memcpy(&duty_cmd->a_factor, &message[temp_pointer], 8); 
						temp_pointer = -2;
 800130c:	f06f 0301 	mvn.w	r3, #1
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->v_factor = (*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001314:	3304      	adds	r3, #4
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	4413      	add	r3, r2
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	ee07 3a90 	vmov	s15, r3
 8001324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001328:	ed1f 7a10 	vldr	s14, [pc, #-64]	; 80012ec <packetRead+0x364>
 800132c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001330:	ee17 0a90 	vmov	r0, s15
 8001334:	f7ff f908 	bl	8000548 <__aeabi_f2d>
 8001338:	4603      	mov	r3, r0
 800133a:	460c      	mov	r4, r1
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
						duty_cmd->a_factor = (*(int32_t*)(&message[temp_pointer]))*COR_INVERSE_SCALE;
 8001342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001344:	68fa      	ldr	r2, [r7, #12]
 8001346:	4413      	add	r3, r2
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	ee07 3a90 	vmov	s15, r3
 800134e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001352:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 80012ec <packetRead+0x364>
 8001356:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135a:	ee17 0a90 	vmov	r0, s15
 800135e:	f7ff f8f3 	bl	8000548 <__aeabi_f2d>
 8001362:	4603      	mov	r3, r0
 8001364:	460c      	mov	r4, r1
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0
                    }else{
                        return CMD_ERROR;
                    }
                    duty_cmd->target_point.x = 250;
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	f04f 0300 	mov.w	r3, #0
 8001372:	4ca1      	ldr	r4, [pc, #644]	; (80015f8 <packetRead+0x670>)
 8001374:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
                    duty_cmd->target_point.y = -200;
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	f04f 0300 	mov.w	r3, #0
 800137e:	4c9f      	ldr	r4, [pc, #636]	; (80015fc <packetRead+0x674>)
 8001380:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
                    duty_cmd->target_point.z = 120;
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	f04f 0300 	mov.w	r3, #0
 800138a:	4c9d      	ldr	r4, [pc, #628]	; (8001600 <packetRead+0x678>)
 800138c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
                    duty_cmd->target_point.roll = 0;
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	f04f 0300 	mov.w	r3, #0
 8001396:	f04f 0400 	mov.w	r4, #0
 800139a:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

                    duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	2200      	movs	r2, #0
 80013a2:	745a      	strb	r2, [r3, #17]
                    duty_cmd->space_type = DUTY_SPACE_JOINT;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	2201      	movs	r2, #1
 80013a8:	735a      	strb	r2, [r3, #13]
                    duty_cmd->joint_type = DUTY_JOINT_4DOF;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	2201      	movs	r2, #1
 80013ae:	73da      	strb	r2, [r3, #15]
                    duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	2202      	movs	r2, #2
 80013b4:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	2201      	movs	r2, #1
 80013ba:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
                    return CMD_MOVE_HOME;
 80013c2:	2302      	movs	r3, #2
 80013c4:	e267      	b.n	8001896 <packetRead+0x90e>
                        return CMD_ERROR;
 80013c6:	2316      	movs	r3, #22
 80013c8:	e265      	b.n	8001896 <packetRead+0x90e>
                break;

                // Move line
                case CMD_MOVE_LINE:
                {
                    if (length == 29){ // 6 int32_t number + 3 byte number + 2 define byte
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	2b1d      	cmp	r3, #29
 80013ce:	f040 80e5 	bne.w	800159c <packetRead+0x614>
						//scaraSetScanFlag();
						uint8_t mode_init;
						temp_pointer = -2;
 80013d2:	f06f 0301 	mvn.w	r3, #1
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c

						duty_cmd->target_point.x = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 80013d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013da:	3304      	adds	r3, #4
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	4413      	add	r3, r2
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff f89c 	bl	8000524 <__aeabi_i2d>
 80013ec:	a380      	add	r3, pc, #512	; (adr r3, 80015f0 <packetRead+0x668>)
 80013ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f2:	f7ff f901 	bl	80005f8 <__aeabi_dmul>
 80013f6:	4603      	mov	r3, r0
 80013f8:	460c      	mov	r4, r1
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
						duty_cmd->target_point.y = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001402:	3304      	adds	r3, #4
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	4413      	add	r3, r2
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f888 	bl	8000524 <__aeabi_i2d>
 8001414:	a376      	add	r3, pc, #472	; (adr r3, 80015f0 <packetRead+0x668>)
 8001416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141a:	f7ff f8ed 	bl	80005f8 <__aeabi_dmul>
 800141e:	4603      	mov	r3, r0
 8001420:	460c      	mov	r4, r1
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
						duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800142a:	3304      	adds	r3, #4
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800142e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	4413      	add	r3, r2
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f874 	bl	8000524 <__aeabi_i2d>
 800143c:	a36c      	add	r3, pc, #432	; (adr r3, 80015f0 <packetRead+0x668>)
 800143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001442:	f7ff f8d9 	bl	80005f8 <__aeabi_dmul>
 8001446:	4603      	mov	r3, r0
 8001448:	460c      	mov	r4, r1
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
						duty_cmd->target_point.roll = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001452:	3304      	adds	r3, #4
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	4413      	add	r3, r2
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f860 	bl	8000524 <__aeabi_i2d>
 8001464:	a362      	add	r3, pc, #392	; (adr r3, 80015f0 <packetRead+0x668>)
 8001466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146a:	f7ff f8c5 	bl	80005f8 <__aeabi_dmul>
 800146e:	4603      	mov	r3, r0
 8001470:	460c      	mov	r4, r1
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
						duty_cmd->v_factor = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800147a:	3304      	adds	r3, #4
 800147c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800147e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	4413      	add	r3, r2
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f84c 	bl	8000524 <__aeabi_i2d>
 800148c:	a358      	add	r3, pc, #352	; (adr r3, 80015f0 <packetRead+0x668>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	f7ff f8b1 	bl	80005f8 <__aeabi_dmul>
 8001496:	4603      	mov	r3, r0
 8001498:	460c      	mov	r4, r1
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
						mode_init = message[temp_pointer+=4];
 80014a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a2:	3304      	adds	r3, #4
 80014a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	4413      	add	r3, r2
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	74fb      	strb	r3, [r7, #19]

						if(mode_init == DUTY_MODE_INIT_QVA){
 80014b0:	7cfb      	ldrb	r3, [r7, #19]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d117      	bne.n	80014e6 <packetRead+0x55e>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	2200      	movs	r2, #0
 80014ba:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 80014bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014be:	3301      	adds	r3, #1
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c4:	68fa      	ldr	r2, [r7, #12]
 80014c6:	4413      	add	r3, r2
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff f82a 	bl	8000524 <__aeabi_i2d>
 80014d0:	a347      	add	r3, pc, #284	; (adr r3, 80015f0 <packetRead+0x668>)
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	f7ff f88f 	bl	80005f8 <__aeabi_dmul>
 80014da:	4603      	mov	r3, r0
 80014dc:	460c      	mov	r4, r1
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0
 80014e4:	e037      	b.n	8001556 <packetRead+0x5ce>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 80014e6:	7cfb      	ldrb	r3, [r7, #19]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d117      	bne.n	800151c <packetRead+0x594>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	2201      	movs	r2, #1
 80014f0:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 80014f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f4:	3301      	adds	r3, #1
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	4413      	add	r3, r2
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f80f 	bl	8000524 <__aeabi_i2d>
 8001506:	a33a      	add	r3, pc, #232	; (adr r3, 80015f0 <packetRead+0x668>)
 8001508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150c:	f7ff f874 	bl	80005f8 <__aeabi_dmul>
 8001510:	4603      	mov	r3, r0
 8001512:	460c      	mov	r4, r1
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800151a:	e01c      	b.n	8001556 <packetRead+0x5ce>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 800151c:	7cfb      	ldrb	r3, [r7, #19]
 800151e:	2b03      	cmp	r3, #3
 8001520:	d117      	bne.n	8001552 <packetRead+0x5ca>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	2203      	movs	r2, #3
 8001526:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 8001528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152a:	3301      	adds	r3, #1
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800152e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7fe fff4 	bl	8000524 <__aeabi_i2d>
 800153c:	a32c      	add	r3, pc, #176	; (adr r3, 80015f0 <packetRead+0x668>)
 800153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001542:	f7ff f859 	bl	80005f8 <__aeabi_dmul>
 8001546:	4603      	mov	r3, r0
 8001548:	460c      	mov	r4, r1
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001550:	e001      	b.n	8001556 <packetRead+0x5ce>
						}else{
							return CMD_ERROR;
 8001552:	2316      	movs	r3, #22
 8001554:	e19f      	b.n	8001896 <packetRead+0x90e>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 8001556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001558:	3304      	adds	r3, #4
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	4413      	add	r3, r2
 8001562:	781a      	ldrb	r2, [r3, #0]
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 8001568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156a:	3301      	adds	r3, #1
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800156e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	4413      	add	r3, r2
 8001574:	781a      	ldrb	r2, [r3, #0]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	741a      	strb	r2, [r3, #16]
						duty_cmd->path_type = DUTY_PATH_LINE;
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	2200      	movs	r2, #0
 800157e:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	2200      	movs	r2, #0
 8001584:	735a      	strb	r2, [r3, #13]
					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	2202      	movs	r2, #2
 800158a:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	2201      	movs	r2, #1
 8001590:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
					return CMD_MOVE_LINE;
 8001598:	2303      	movs	r3, #3
 800159a:	e17c      	b.n	8001896 <packetRead+0x90e>
						return CMD_ERROR;
 800159c:	2316      	movs	r3, #22
 800159e:	e17a      	b.n	8001896 <packetRead+0x90e>
				break;

				// Move circle
				case CMD_MOVE_CIRCLE:
				{
					return CMD_MOVE_CIRCLE;
 80015a0:	2304      	movs	r3, #4
 80015a2:	e178      	b.n	8001896 <packetRead+0x90e>
				break;

				// Move joint
				case CMD_MOVE_JOINT:
				{
					return CMD_MOVE_JOINT;
 80015a4:	2305      	movs	r3, #5
 80015a6:	e176      	b.n	8001896 <packetRead+0x90e>
				break;

				// Rotate Single
				case CMD_ROTATE_SINGLE:
				{
					return CMD_ROTATE_SINGLE;
 80015a8:	2306      	movs	r3, #6
 80015aa:	e174      	b.n	8001896 <packetRead+0x90e>
				break;

				// Set output
				case CMD_OUTPUT:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d10a      	bne.n	80015c8 <packetRead+0x640>
						temp_pointer = 2;
 80015b2:	2302      	movs	r3, #2
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->sub_para_int = message[temp_pointer];
 80015b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	4413      	add	r3, r2
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	615a      	str	r2, [r3, #20]
						return CMD_OUTPUT;
 80015c4:	2307      	movs	r3, #7
 80015c6:	e166      	b.n	8001896 <packetRead+0x90e>
					}else{
						return CMD_ERROR;
 80015c8:	2316      	movs	r3, #22
 80015ca:	e164      	b.n	8001896 <packetRead+0x90e>
				break;

				// Read position
				case CMD_READ_POSITION:
				{
					if(length == 3){ // 1 byte categorize read type + 2 byte define
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d109      	bne.n	80015e6 <packetRead+0x65e>
						temp_pointer = 2;
 80015d2:	2302      	movs	r3, #2
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
						position_type = message[temp_pointer];
 80015d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	4413      	add	r3, r2
 80015dc:	781a      	ldrb	r2, [r3, #0]
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <packetRead+0x67c>)
 80015e0:	701a      	strb	r2, [r3, #0]
						return CMD_READ_POSITION;
 80015e2:	2309      	movs	r3, #9
 80015e4:	e157      	b.n	8001896 <packetRead+0x90e>
					}else{
						return CMD_ERROR;
 80015e6:	2316      	movs	r3, #22
 80015e8:	e155      	b.n	8001896 <packetRead+0x90e>
 80015ea:	bf00      	nop
 80015ec:	f3af 8000 	nop.w
 80015f0:	a0000000 	.word	0xa0000000
 80015f4:	3eb0c6f7 	.word	0x3eb0c6f7
 80015f8:	406f4000 	.word	0x406f4000
 80015fc:	c0690000 	.word	0xc0690000
 8001600:	405e0000 	.word	0x405e0000
 8001604:	2000592c 	.word	0x2000592c
				break;			

				// Setting
				case CMD_SETTING:
				{
					if (length == 4){ // 2 byte configure + 2 byte define
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2b04      	cmp	r3, #4
 800160c:	d130      	bne.n	8001670 <packetRead+0x6e8>
						uint8_t mode_traject;
						uint8_t mode_coordinate;
						temp_pointer = 2;
 800160e:	2302      	movs	r3, #2
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
						mode_coordinate = message[temp_pointer++];
 8001612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001614:	1c5a      	adds	r2, r3, #1
 8001616:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001618:	461a      	mov	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4413      	add	r3, r2
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	757b      	strb	r3, [r7, #21]
						mode_traject = message[temp_pointer];
 8001622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	4413      	add	r3, r2
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	753b      	strb	r3, [r7, #20]

						if (mode_coordinate == DUTY_COORDINATES_ABS) {
 800162c:	7d7b      	ldrb	r3, [r7, #21]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d103      	bne.n	800163a <packetRead+0x6b2>
							duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	2200      	movs	r2, #0
 8001636:	731a      	strb	r2, [r3, #12]
 8001638:	e008      	b.n	800164c <packetRead+0x6c4>
						} else if (mode_coordinate == DUTY_COORDINATES_REL) {
 800163a:	7d7b      	ldrb	r3, [r7, #21]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d103      	bne.n	8001648 <packetRead+0x6c0>
							duty_cmd->coordinate_type = DUTY_COORDINATES_REL;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	2201      	movs	r2, #1
 8001644:	731a      	strb	r2, [r3, #12]
 8001646:	e001      	b.n	800164c <packetRead+0x6c4>
						} else {
							return CMD_ERROR;
 8001648:	2316      	movs	r3, #22
 800164a:	e124      	b.n	8001896 <packetRead+0x90e>
						}

						if (mode_traject == DUTY_TRAJECTORY_LSPB) {
 800164c:	7d3b      	ldrb	r3, [r7, #20]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d103      	bne.n	800165a <packetRead+0x6d2>
							duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	2200      	movs	r2, #0
 8001656:	741a      	strb	r2, [r3, #16]
 8001658:	e008      	b.n	800166c <packetRead+0x6e4>
						} else if (mode_traject == DUTY_TRAJECTORY_SCURVE) {
 800165a:	7d3b      	ldrb	r3, [r7, #20]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d103      	bne.n	8001668 <packetRead+0x6e0>
							duty_cmd->trajec_type = DUTY_TRAJECTORY_SCURVE;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	2201      	movs	r2, #1
 8001664:	741a      	strb	r2, [r3, #16]
 8001666:	e001      	b.n	800166c <packetRead+0x6e4>
						} else {
							return CMD_ERROR;
 8001668:	2316      	movs	r3, #22
 800166a:	e114      	b.n	8001896 <packetRead+0x90e>
						}
						return CMD_SETTING;
 800166c:	230a      	movs	r3, #10
 800166e:	e112      	b.n	8001896 <packetRead+0x90e>
					}else{
						return CMD_ERROR;
 8001670:	2316      	movs	r3, #22
 8001672:	e110      	b.n	8001896 <packetRead+0x90e>
				break;

				// Change method
				case CMD_METHOD_CHANGE:
				{
					if(length == 3){ // 1 byte configure + 2 byte define
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	2b03      	cmp	r3, #3
 8001678:	d130      	bne.n	80016dc <packetRead+0x754>
						uint8_t method;
						temp_pointer = 2;
 800167a:	2302      	movs	r3, #2
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
						method = message[temp_pointer];
 800167e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	4413      	add	r3, r2
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	75bb      	strb	r3, [r7, #22]
						if (SCARA_METHOD_MANUAL == method) {
 8001688:	7dbb      	ldrb	r3, [r7, #22]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d103      	bne.n	8001696 <packetRead+0x70e>
							duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	2200      	movs	r2, #0
 8001692:	705a      	strb	r2, [r3, #1]
 8001694:	e01d      	b.n	80016d2 <packetRead+0x74a>
						} else if (SCARA_METHOD_SEMI_AUTO == method) {
 8001696:	7dbb      	ldrb	r3, [r7, #22]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d103      	bne.n	80016a4 <packetRead+0x71c>
							duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	2201      	movs	r2, #1
 80016a0:	705a      	strb	r2, [r3, #1]
 80016a2:	e016      	b.n	80016d2 <packetRead+0x74a>
						} else if (SCARA_METHOD_GCODE == method) {
 80016a4:	7dbb      	ldrb	r3, [r7, #22]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d103      	bne.n	80016b2 <packetRead+0x72a>
							duty_cmd->robot_method = SCARA_METHOD_GCODE;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	2202      	movs	r2, #2
 80016ae:	705a      	strb	r2, [r3, #1]
 80016b0:	e00f      	b.n	80016d2 <packetRead+0x74a>
						}else if(SCARA_METHOD_TEST == method){
 80016b2:	7dbb      	ldrb	r3, [r7, #22]
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	d103      	bne.n	80016c0 <packetRead+0x738>
							duty_cmd->robot_method = SCARA_METHOD_TEST;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	2203      	movs	r2, #3
 80016bc:	705a      	strb	r2, [r3, #1]
 80016be:	e008      	b.n	80016d2 <packetRead+0x74a>
						}else if(SCARA_METHOD_PICK_AND_PLACE == method){
 80016c0:	7dbb      	ldrb	r3, [r7, #22]
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	d103      	bne.n	80016ce <packetRead+0x746>
							duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	2204      	movs	r2, #4
 80016ca:	705a      	strb	r2, [r3, #1]
 80016cc:	e001      	b.n	80016d2 <packetRead+0x74a>
						}else {
							return CMD_ERROR;
 80016ce:	2316      	movs	r3, #22
 80016d0:	e0e1      	b.n	8001896 <packetRead+0x90e>
						}
						duty_cmd->change_method = TRUE;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	2201      	movs	r2, #1
 80016d6:	701a      	strb	r2, [r3, #0]
						return CMD_METHOD_CHANGE;
 80016d8:	230b      	movs	r3, #11
 80016da:	e0dc      	b.n	8001896 <packetRead+0x90e>
					}else{
						return CMD_ERROR;
 80016dc:	2316      	movs	r3, #22
 80016de:	e0da      	b.n	8001896 <packetRead+0x90e>
				break;

				// Set manual key
				case CMD_KEYBOARD:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d10f      	bne.n	8001706 <packetRead+0x77e>
						int temp_pointer = 2;
 80016e6:	2302      	movs	r3, #2
 80016e8:	61fb      	str	r3, [r7, #28]
						duty_cmd->keyboard = (SCARA_KeyTypeDef)message[temp_pointer];
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	4413      	add	r3, r2
 80016f0:	781a      	ldrb	r2, [r3, #0]
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	70da      	strb	r2, [r3, #3]
						duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	2200      	movs	r2, #0
 80016fa:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
						return CMD_KEYBOARD;
 8001702:	2314      	movs	r3, #20
 8001704:	e0c7      	b.n	8001896 <packetRead+0x90e>
					}else{
						return CMD_ERROR;
 8001706:	2316      	movs	r3, #22
 8001708:	e0c5      	b.n	8001896 <packetRead+0x90e>
				break;

				// Set manual key speed
				case CMD_KEY_SPEED:
				{
					if(length == 3){ // 1 byte key value + 2 byte define
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	2b03      	cmp	r3, #3
 800170e:	d116      	bne.n	800173e <packetRead+0x7b6>
						int temp_pointer = 2;
 8001710:	2302      	movs	r3, #2
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
						int32_t speed = (int32_t)message[temp_pointer];
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	4413      	add	r3, r2
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	623b      	str	r3, [r7, #32]
						// check limit
						if ((speed < SHIFT_SPEED_MIN) || (speed > SHIFT_SPEED_MAX)) {
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	2b00      	cmp	r3, #0
 8001722:	dd02      	ble.n	800172a <packetRead+0x7a2>
 8001724:	6a3b      	ldr	r3, [r7, #32]
 8001726:	2b0e      	cmp	r3, #14
 8001728:	dd01      	ble.n	800172e <packetRead+0x7a6>
							return CMD_ERROR;
 800172a:	2316      	movs	r3, #22
 800172c:	e0b3      	b.n	8001896 <packetRead+0x90e>
						}
						duty_cmd->key_speed = speed;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	6a3a      	ldr	r2, [r7, #32]
 8001732:	605a      	str	r2, [r3, #4]
						current_key_speed1 = speed;
 8001734:	4a5c      	ldr	r2, [pc, #368]	; (80018a8 <packetRead+0x920>)
 8001736:	6a3b      	ldr	r3, [r7, #32]
 8001738:	6013      	str	r3, [r2, #0]
						return CMD_KEY_SPEED;
 800173a:	2315      	movs	r3, #21
 800173c:	e0ab      	b.n	8001896 <packetRead+0x90e>
					}else{
						return CMD_ERROR;
 800173e:	2316      	movs	r3, #22
 8001740:	e0a9      	b.n	8001896 <packetRead+0x90e>
				break;

				// Set test mode
				case CMD_MOTOR_TEST:
				{
					if(length == 3){ // 1byte key mode + 2 byte define
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	2b03      	cmp	r3, #3
 8001746:	d117      	bne.n	8001778 <packetRead+0x7f0>
						int temp_pointer = 2;
 8001748:	2302      	movs	r3, #2
 800174a:	61bb      	str	r3, [r7, #24]
						uint8_t test_key = message[temp_pointer];
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	4413      	add	r3, r2
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	75fb      	strb	r3, [r7, #23]
						if(test_key < 0 || test_key > 8){
 8001756:	7dfb      	ldrb	r3, [r7, #23]
 8001758:	2b08      	cmp	r3, #8
 800175a:	d901      	bls.n	8001760 <packetRead+0x7d8>
							return CMD_ERROR;
 800175c:	2316      	movs	r3, #22
 800175e:	e09a      	b.n	8001896 <packetRead+0x90e>
						}
						duty_cmd->test_key = test_key;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	7dfa      	ldrb	r2, [r7, #23]
 8001764:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
						duty_cmd->robot_method = SCARA_METHOD_TEST;	
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	2203      	movs	r2, #3
 800176c:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
						return CMD_MOTOR_TEST;
 8001774:	230c      	movs	r3, #12
 8001776:	e08e      	b.n	8001896 <packetRead+0x90e>
					}else{
						return CMD_ERROR;
 8001778:	2316      	movs	r3, #22
 800177a:	e08c      	b.n	8001896 <packetRead+0x90e>
				}
				break;

				case CMD_OBJECT_DETECTED:
				{
					if (length == 15){ // 3 int32_t number + 1 byte object type + 2 define byte
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2b0f      	cmp	r3, #15
 8001780:	d16a      	bne.n	8001858 <packetRead+0x8d0>
						temp_pointer = -2;
 8001782:	f06f 0301 	mvn.w	r3, #1
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->target_point.x = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178a:	3304      	adds	r3, #4
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800178e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fec4 	bl	8000524 <__aeabi_i2d>
 800179c:	a340      	add	r3, pc, #256	; (adr r3, 80018a0 <packetRead+0x918>)
 800179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a2:	f7fe ff29 	bl	80005f8 <__aeabi_dmul>
 80017a6:	4603      	mov	r3, r0
 80017a8:	460c      	mov	r4, r1
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
						duty_cmd->target_point.y = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 80017b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b2:	3304      	adds	r3, #4
 80017b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	4413      	add	r3, r2
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe feb0 	bl	8000524 <__aeabi_i2d>
 80017c4:	a336      	add	r3, pc, #216	; (adr r3, 80018a0 <packetRead+0x918>)
 80017c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ca:	f7fe ff15 	bl	80005f8 <__aeabi_dmul>
 80017ce:	4603      	mov	r3, r0
 80017d0:	460c      	mov	r4, r1
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
						//duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
						duty_cmd->target_point.roll = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 80017d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017da:	3304      	adds	r3, #4
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	4413      	add	r3, r2
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe fe9c 	bl	8000524 <__aeabi_i2d>
 80017ec:	a32c      	add	r3, pc, #176	; (adr r3, 80018a0 <packetRead+0x918>)
 80017ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f2:	f7fe ff01 	bl	80005f8 <__aeabi_dmul>
 80017f6:	4603      	mov	r3, r0
 80017f8:	460c      	mov	r4, r1
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
						duty_cmd->target_point.object_type = message[temp_pointer+=4];
 8001800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001802:	3304      	adds	r3, #4
 8001804:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	4413      	add	r3, r2
 800180c:	781a      	ldrb	r2, [r3, #0]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
						duty_cmd->target_point.t = (double)(TIM2->CNT);
 8001814:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fe72 	bl	8000504 <__aeabi_ui2d>
 8001820:	4603      	mov	r3, r0
 8001822:	460c      	mov	r4, r1
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
						duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	2201      	movs	r2, #1
 800182e:	745a      	strb	r2, [r3, #17]
						duty_cmd->path_type = DUTY_PATH_LINE;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	2200      	movs	r2, #0
 8001834:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	2200      	movs	r2, #0
 800183a:	735a      	strb	r2, [r3, #13]
						duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	2200      	movs	r2, #0
 8001840:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	2200      	movs	r2, #0
 8001846:	741a      	strb	r2, [r3, #16]
					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	2204      	movs	r2, #4
 800184c:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
					return CMD_OBJECT_DETECTED;
 8001854:	2318      	movs	r3, #24
 8001856:	e01e      	b.n	8001896 <packetRead+0x90e>
						return CMD_ERROR;
 8001858:	2316      	movs	r3, #22
 800185a:	e01c      	b.n	8001896 <packetRead+0x90e>
				}
				break;

				case CMD_SETUP_CONVEYOR_SPEED:
				{
					if (length == 6) { // 1 int32_t number + 2 define byte
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2b06      	cmp	r3, #6
 8001860:	d114      	bne.n	800188c <packetRead+0x904>
						temp_pointer = 2;
 8001862:	2302      	movs	r3, #2
 8001864:	62fb      	str	r3, [r7, #44]	; 0x2c
						conveyor_speed = (double)(*(int32_t*)(&message[temp_pointer]))*COR_INVERSE_SCALE;
 8001866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	4413      	add	r3, r2
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fe58 	bl	8000524 <__aeabi_i2d>
 8001874:	a30a      	add	r3, pc, #40	; (adr r3, 80018a0 <packetRead+0x918>)
 8001876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187a:	f7fe febd 	bl	80005f8 <__aeabi_dmul>
 800187e:	4603      	mov	r3, r0
 8001880:	460c      	mov	r4, r1
 8001882:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <packetRead+0x924>)
 8001884:	e9c2 3400 	strd	r3, r4, [r2]
						return CMD_SETUP_CONVEYOR_SPEED;
 8001888:	2319      	movs	r3, #25
 800188a:	e004      	b.n	8001896 <packetRead+0x90e>
					}else{
						return CMD_ERROR;
 800188c:	2316      	movs	r3, #22
 800188e:	e002      	b.n	8001896 <packetRead+0x90e>
				break;

				//Unknow command id
				default:
				{
					return CMD_ERROR;
 8001890:	2316      	movs	r3, #22
 8001892:	e000      	b.n	8001896 <packetRead+0x90e>
        break;

        //unknow protocol id
        default:
        {
            return PROTOCOL_ERROR;
 8001894:	2317      	movs	r3, #23
        }
    }
}
 8001896:	4618      	mov	r0, r3
 8001898:	3734      	adds	r7, #52	; 0x34
 800189a:	46bd      	mov	sp, r7
 800189c:	bd90      	pop	{r4, r7, pc}
 800189e:	bf00      	nop
 80018a0:	a0000000 	.word	0xa0000000
 80018a4:	3eb0c6f7 	.word	0x3eb0c6f7
 80018a8:	20000000 	.word	0x20000000
 80018ac:	20000ba0 	.word	0x20000ba0

080018b0 <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail, int32_t *detail_length) {
 80018b0:	b082      	sub	sp, #8
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b0e2      	sub	sp, #392	; 0x188
 80018b6:	af2e      	add	r7, sp, #184	; 0xb8
 80018b8:	4601      	mov	r1, r0
 80018ba:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 80018be:	e880 000c 	stmia.w	r0, {r2, r3}
 80018c2:	460b      	mov	r3, r1
 80018c4:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	2b1a      	cmp	r3, #26
 80018ca:	f200 81a6 	bhi.w	8001c1a <commandReply+0x36a>
 80018ce:	a201      	add	r2, pc, #4	; (adr r2, 80018d4 <commandReply+0x24>)
 80018d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d4:	08001941 	.word	0x08001941
 80018d8:	08001941 	.word	0x08001941
 80018dc:	08001941 	.word	0x08001941
 80018e0:	08001941 	.word	0x08001941
 80018e4:	08001941 	.word	0x08001941
 80018e8:	08001941 	.word	0x08001941
 80018ec:	08001941 	.word	0x08001941
 80018f0:	08001949 	.word	0x08001949
 80018f4:	080019c3 	.word	0x080019c3
 80018f8:	080019f7 	.word	0x080019f7
 80018fc:	08001a8d 	.word	0x08001a8d
 8001900:	08001b69 	.word	0x08001b69
 8001904:	08001941 	.word	0x08001941
 8001908:	08001c3d 	.word	0x08001c3d
 800190c:	08001c3d 	.word	0x08001c3d
 8001910:	08001c3d 	.word	0x08001c3d
 8001914:	08001c3d 	.word	0x08001c3d
 8001918:	08001c3d 	.word	0x08001c3d
 800191c:	08001c3d 	.word	0x08001c3d
 8001920:	08001ba9 	.word	0x08001ba9
 8001924:	08001bb1 	.word	0x08001bb1
 8001928:	08001bb9 	.word	0x08001bb9
 800192c:	08001bf9 	.word	0x08001bf9
 8001930:	08001c1b 	.word	0x08001c1b
 8001934:	08001941 	.word	0x08001941
 8001938:	08001b61 	.word	0x08001b61
 800193c:	08001b71 	.word	0x08001b71
	case CMD_MOTOR_TEST:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_OBJECT_DETECTED:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 8001940:	2309      	movs	r3, #9
 8001942:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001946:	e17a      	b.n	8001c3e <commandReply+0x38e>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.sub_para_int) {
 8001948:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800194c:	2b01      	cmp	r3, #1
 800194e:	d110      	bne.n	8001972 <commandReply+0xc2>
				scaraSetOutput(1);
 8001950:	2001      	movs	r0, #1
 8001952:	f008 fce9 	bl	800a328 <scaraSetOutput>
				// strcpy( (char *)detail, "Output ON");
				// detail_length += 9;
				detail[(*detail_length)++] = OUTPUT_ON;
 8001956:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	1c59      	adds	r1, r3, #1
 800195e:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001962:	6011      	str	r1, [r2, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800196a:	4413      	add	r3, r2
 800196c:	220d      	movs	r2, #13
 800196e:	701a      	strb	r2, [r3, #0]
 8001970:	e023      	b.n	80019ba <commandReply+0x10a>
			} else if (0 == duty_cmd.sub_para_int) {
 8001972:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001976:	2b00      	cmp	r3, #0
 8001978:	d110      	bne.n	800199c <commandReply+0xec>
				scaraSetOutput(0);
 800197a:	2000      	movs	r0, #0
 800197c:	f008 fcd4 	bl	800a328 <scaraSetOutput>
				detail[(*detail_length)++] = OUTPUT_OFF;
 8001980:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	1c59      	adds	r1, r3, #1
 8001988:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800198c:	6011      	str	r1, [r2, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001994:	4413      	add	r3, r2
 8001996:	220e      	movs	r2, #14
 8001998:	701a      	strb	r2, [r3, #0]
 800199a:	e00e      	b.n	80019ba <commandReply+0x10a>
			} else {
				// strcpy( (char *)detail, "Wrong Value");
				// detail_length += 11;
				detail[(*detail_length)++] = WRONG_OUTPUT_VALUE ;
 800199c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	1c59      	adds	r1, r3, #1
 80019a4:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80019a8:	6011      	str	r1, [r2, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80019b0:	4413      	add	r3, r2
 80019b2:	220f      	movs	r2, #15
 80019b4:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 80019b6:	2307      	movs	r3, #7
 80019b8:	e143      	b.n	8001c42 <commandReply+0x392>
			}
			ret = RPD_OK;
 80019ba:	2308      	movs	r3, #8
 80019bc:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 80019c0:	e13d      	b.n	8001c3e <commandReply+0x38e>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 80019c2:	f008 fd13 	bl	800a3ec <scaraGetMode>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			current_state	 = scaraGetDutyState();
 80019cc:	f008 fd26 	bl	800a41c <scaraGetDutyState>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 80019d6:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d107      	bne.n	80019ee <commandReply+0x13e>
 80019de:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d103      	bne.n	80019ee <commandReply+0x13e>
				ret = RPD_IDLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 80019ec:	e127      	b.n	8001c3e <commandReply+0x38e>
				ret = RPD_BUSY;
 80019ee:	2301      	movs	r3, #1
 80019f0:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80019f4:	e123      	b.n	8001c3e <commandReply+0x38e>
	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			if(position_type == REAL_POSITION_DATA || position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 80019f6:	4b96      	ldr	r3, [pc, #600]	; (8001c50 <commandReply+0x3a0>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <commandReply+0x156>
 80019fe:	4b94      	ldr	r3, [pc, #592]	; (8001c50 <commandReply+0x3a0>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d113      	bne.n	8001a2e <commandReply+0x17e>
				lowlayer_readTruePosition(&position);
 8001a06:	f107 0308 	add.w	r3, r7, #8
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f002 ff24 	bl	8004858 <lowlayer_readTruePosition>
				kinematicForward(&position);
 8001a10:	f107 0308 	add.w	r3, r7, #8
 8001a14:	4618      	mov	r0, r3
 8001a16:	f001 fffb 	bl	8003a10 <kinematicForward>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 8001a1a:	4b8d      	ldr	r3, [pc, #564]	; (8001c50 <commandReply+0x3a0>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d11e      	bne.n	8001a60 <commandReply+0x1b0>
					scaraUpdatePosition(&position);
 8001a22:	f107 0308 	add.w	r3, r7, #8
 8001a26:	4618      	mov	r0, r3
 8001a28:	f008 fcd0 	bl	800a3cc <scaraUpdatePosition>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 8001a2c:	e018      	b.n	8001a60 <commandReply+0x1b0>
				}
			}else if(position_type == ESTIMATE_POSITION_DATA){
 8001a2e:	4b88      	ldr	r3, [pc, #544]	; (8001c50 <commandReply+0x3a0>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d105      	bne.n	8001a42 <commandReply+0x192>
				scaraGetPosition(&position);
 8001a36:	f107 0308 	add.w	r3, r7, #8
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f008 fcb6 	bl	800a3ac <scaraGetPosition>
 8001a40:	e00e      	b.n	8001a60 <commandReply+0x1b0>
			}else{
				detail[(*detail_length)++] = WRONG_READ_POSITION_TYPE;
 8001a42:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	1c59      	adds	r1, r3, #1
 8001a4a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001a4e:	6011      	str	r1, [r2, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001a56:	4413      	add	r3, r2
 8001a58:	2210      	movs	r2, #16
 8001a5a:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 8001a5c:	2307      	movs	r3, #7
 8001a5e:	e0f0      	b.n	8001c42 <commandReply+0x392>
			}
			*detail_length = scaraPosition_packaging(detail, position);
 8001a60:	4668      	mov	r0, sp
 8001a62:	f107 0310 	add.w	r3, r7, #16
 8001a66:	22b8      	movs	r2, #184	; 0xb8
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f013 fff7 	bl	8015a5c <memcpy>
 8001a6e:	f107 0308 	add.w	r3, r7, #8
 8001a72:	cb0c      	ldmia	r3, {r2, r3}
 8001a74:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 8001a78:	f008 fd06 	bl	800a488 <scaraPosition_packaging>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001a82:	601a      	str	r2, [r3, #0]
			ret =  RPD_POSITION;
 8001a84:	2302      	movs	r3, #2
 8001a86:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 8001a8a:	e0d8      	b.n	8001c3e <commandReply+0x38e>
	case CMD_SETTING:
		if ( DUTY_COORDINATES_ABS == duty_cmd.coordinate_type) {
 8001a8c:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d10d      	bne.n	8001ab0 <commandReply+0x200>
			// strcpy( (char *)detail, "ABSOLUTE.");
			// detail_length += 9;
			detail[(*detail_length)++] = ABSOLUTE;
 8001a94:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	1c59      	adds	r1, r3, #1
 8001a9c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001aa0:	6011      	str	r1, [r2, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001aa8:	4413      	add	r3, r2
 8001aaa:	2211      	movs	r2, #17
 8001aac:	701a      	strb	r2, [r3, #0]
 8001aae:	e020      	b.n	8001af2 <commandReply+0x242>
		} else if ( DUTY_COORDINATES_REL == duty_cmd.coordinate_type) {
 8001ab0:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d10d      	bne.n	8001ad4 <commandReply+0x224>
			detail[(*detail_length)++] = RELATIVE;
 8001ab8:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	1c59      	adds	r1, r3, #1
 8001ac0:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001ac4:	6011      	str	r1, [r2, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001acc:	4413      	add	r3, r2
 8001ace:	2212      	movs	r2, #18
 8001ad0:	701a      	strb	r2, [r3, #0]
 8001ad2:	e00e      	b.n	8001af2 <commandReply+0x242>
		} else {
			detail[(*detail_length)++] = WRONG_COORDINATE;
 8001ad4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	1c59      	adds	r1, r3, #1
 8001adc:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001ae0:	6011      	str	r1, [r2, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001ae8:	4413      	add	r3, r2
 8001aea:	220c      	movs	r2, #12
 8001aec:	701a      	strb	r2, [r3, #0]
			return RPD_ERROR;
 8001aee:	2307      	movs	r3, #7
 8001af0:	e0a7      	b.n	8001c42 <commandReply+0x392>
		}

		if ( DUTY_TRAJECTORY_LSPB == duty_cmd.trajec_type) {
 8001af2:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10d      	bne.n	8001b16 <commandReply+0x266>
			detail[(*detail_length)++] = LSPB;
 8001afa:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	1c59      	adds	r1, r3, #1
 8001b02:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001b06:	6011      	str	r1, [r2, #0]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001b0e:	4413      	add	r3, r2
 8001b10:	2213      	movs	r2, #19
 8001b12:	701a      	strb	r2, [r3, #0]
 8001b14:	e020      	b.n	8001b58 <commandReply+0x2a8>
		} else if ( DUTY_TRAJECTORY_SCURVE == duty_cmd.trajec_type) {
 8001b16:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d10d      	bne.n	8001b3a <commandReply+0x28a>
			detail[(*detail_length)++] = S_CURVE;
 8001b1e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	1c59      	adds	r1, r3, #1
 8001b26:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001b2a:	6011      	str	r1, [r2, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001b32:	4413      	add	r3, r2
 8001b34:	2214      	movs	r2, #20
 8001b36:	701a      	strb	r2, [r3, #0]
 8001b38:	e00e      	b.n	8001b58 <commandReply+0x2a8>
		} else {
			detail[(*detail_length)++] = WRONG_TRAJECTORY_TYPE;
 8001b3a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	1c59      	adds	r1, r3, #1
 8001b42:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001b46:	6011      	str	r1, [r2, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001b4e:	4413      	add	r3, r2
 8001b50:	2205      	movs	r2, #5
 8001b52:	701a      	strb	r2, [r3, #0]
			return RPD_ERROR;
 8001b54:	2307      	movs	r3, #7
 8001b56:	e074      	b.n	8001c42 <commandReply+0x392>
		}		
		ret = RPD_OK;
 8001b58:	2308      	movs	r3, #8
 8001b5a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001b5e:	e06e      	b.n	8001c3e <commandReply+0x38e>
	case CMD_SETUP_CONVEYOR_SPEED:
		ret = RPD_OK;
 8001b60:	2308      	movs	r3, #8
 8001b62:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001b66:	e06a      	b.n	8001c3e <commandReply+0x38e>
	case CMD_METHOD_CHANGE:
		ret = RPD_DUTY;
 8001b68:	2309      	movs	r3, #9
 8001b6a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001b6e:	e066      	b.n	8001c3e <commandReply+0x38e>
	case CMD_GCODE:{
		if(point_counter == total_num_of_point){
 8001b70:	4b38      	ldr	r3, [pc, #224]	; (8001c54 <commandReply+0x3a4>)
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <commandReply+0x3a8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d110      	bne.n	8001ba0 <commandReply+0x2f0>
			detail[(*detail_length)++] = GCODE_TRANSFER_FINISH;
 8001b7e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	1c59      	adds	r1, r3, #1
 8001b86:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001b8a:	6011      	str	r1, [r2, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001b92:	4413      	add	r3, r2
 8001b94:	221e      	movs	r2, #30
 8001b96:	701a      	strb	r2, [r3, #0]
			ret = RPD_OK;
 8001b98:	2308      	movs	r3, #8
 8001b9a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}else{
			ret = RPD_TRANSFER;
		}
	}
	break;
 8001b9e:	e04e      	b.n	8001c3e <commandReply+0x38e>
			ret = RPD_TRANSFER;
 8001ba0:	230a      	movs	r3, #10
 8001ba2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	break;
 8001ba6:	e04a      	b.n	8001c3e <commandReply+0x38e>
	case CMD_JOB_PUSH_OUTPUT:
		break;
	case CMD_JOB_TEST:
		break;
	case CMD_JOB_RUN:
		ret = RPD_DUTY;
 8001ba8:	2309      	movs	r3, #9
 8001baa:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001bae:	e046      	b.n	8001c3e <commandReply+0x38e>
	case CMD_KEYBOARD:
		ret = RPD_DUTY;
 8001bb0:	2309      	movs	r3, #9
 8001bb2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001bb6:	e042      	b.n	8001c3e <commandReply+0x38e>
	case CMD_KEY_SPEED:
		// sprintf((char*) detail, "MANUAL SPEED = %d", duty_cmd.key_speed);
		detail[(*detail_length)++] = MANUAL_SPEED;
 8001bb8:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	1c59      	adds	r1, r3, #1
 8001bc0:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001bc4:	6011      	str	r1, [r2, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001bcc:	4413      	add	r3, r2
 8001bce:	2216      	movs	r2, #22
 8001bd0:	701a      	strb	r2, [r3, #0]
		detail[(*detail_length)++] = (uint8_t)(duty_cmd.key_speed);
 8001bd2:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001bd6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	1c59      	adds	r1, r3, #1
 8001bde:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001be2:	6011      	str	r1, [r2, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001bea:	4413      	add	r3, r2
 8001bec:	b2c2      	uxtb	r2, r0
 8001bee:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8001bf0:	2308      	movs	r3, #8
 8001bf2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001bf6:	e022      	b.n	8001c3e <commandReply+0x38e>
	case CMD_ERROR:
		// strcpy( (char *)detail, "Check parameters");
		detail[(*detail_length)++] = CHECK_PARAMETER;
 8001bf8:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	1c59      	adds	r1, r3, #1
 8001c00:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001c04:	6011      	str	r1, [r2, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001c0c:	4413      	add	r3, r2
 8001c0e:	2215      	movs	r2, #21
 8001c10:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 8001c12:	2307      	movs	r3, #7
 8001c14:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001c18:	e011      	b.n	8001c3e <commandReply+0x38e>
	default:
		// strcpy( (char *)detail, "Unknown command");
		detail[(*detail_length)++] = UNKNOW_COMMAND;
 8001c1a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	1c59      	adds	r1, r3, #1
 8001c22:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001c26:	6011      	str	r1, [r2, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001c2e:	4413      	add	r3, r2
 8001c30:	2217      	movs	r2, #23
 8001c32:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 8001c34:	2307      	movs	r3, #7
 8001c36:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 8001c3a:	e000      	b.n	8001c3e <commandReply+0x38e>
		break;
 8001c3c:	bf00      	nop
	}
	return ret;
 8001c3e:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	37d0      	adds	r7, #208	; 0xd0
 8001c46:	46bd      	mov	sp, r7
 8001c48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c4c:	b002      	add	sp, #8
 8001c4e:	4770      	bx	lr
 8001c50:	2000592c 	.word	0x2000592c
 8001c54:	20000b9c 	.word	0x20000b9c
 8001c58:	20004d70 	.word	0x20004d70

08001c5c <commandRespond1>:

int32_t				commandRespond1	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										int32_t detail_length,
										char *respond) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	4603      	mov	r3, r0
 8001c6a:	73fb      	strb	r3, [r7, #15]
	int32_t out_length = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
	respond[out_length++] = 0x28;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	617a      	str	r2, [r7, #20]
 8001c76:	461a      	mov	r2, r3
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	2228      	movs	r2, #40	; 0x28
 8001c7e:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = RESPONSE_TRANSMISION;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	617a      	str	r2, [r7, #20]
 8001c86:	461a      	mov	r2, r3
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = rpd;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	1c5a      	adds	r2, r3, #1
 8001c94:	617a      	str	r2, [r7, #20]
 8001c96:	461a      	mov	r2, r3
 8001c98:	6a3b      	ldr	r3, [r7, #32]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	7bfa      	ldrb	r2, [r7, #15]
 8001c9e:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = id_command;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	617a      	str	r2, [r7, #20]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	6a3b      	ldr	r3, [r7, #32]
 8001caa:	4413      	add	r3, r2
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	701a      	strb	r2, [r3, #0]
	if(detail_length != 0){
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00c      	beq.n	8001cd2 <commandRespond1+0x76>
		memcpy(&respond[out_length], detail, detail_length);
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	6a3a      	ldr	r2, [r7, #32]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f013 feca 	bl	8015a5c <memcpy>
		out_length += detail_length;
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	4413      	add	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	e007      	b.n	8001ce2 <commandRespond1+0x86>
	}else{
		respond[out_length++] = NONE;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	617a      	str	r2, [r7, #20]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	6a3b      	ldr	r3, [r7, #32]
 8001cdc:	4413      	add	r3, r2
 8001cde:	2224      	movs	r2, #36	; 0x24
 8001ce0:	701a      	strb	r2, [r3, #0]
	}
	respond[out_length++] = 0x29;
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	617a      	str	r2, [r7, #20]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	4413      	add	r3, r2
 8001cee:	2229      	movs	r2, #41	; 0x29
 8001cf0:	701a      	strb	r2, [r3, #0]

	return out_length;
 8001cf2:	697b      	ldr	r3, [r7, #20]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b096      	sub	sp, #88	; 0x58
 8001d00:	af02      	add	r7, sp, #8
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "%d, %s \r\n", line, message);
 8001d08:	887a      	ldrh	r2, [r7, #2]
 8001d0a:	f107 0008 	add.w	r0, r7, #8
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	4613      	mov	r3, r2
 8001d14:	4a17      	ldr	r2, [pc, #92]	; (8001d74 <LOG_REPORT+0x78>)
 8001d16:	213f      	movs	r1, #63	; 0x3f
 8001d18:	f014 fdc8 	bl	80168ac <sniprintf>
 8001d1c:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 8001d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d24:	d101      	bne.n	8001d2a <LOG_REPORT+0x2e>
		return FALSE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e01f      	b.n	8001d6a <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 8001d2a:	f107 0308 	add.w	r3, r7, #8
 8001d2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d30:	4619      	mov	r1, r3
 8001d32:	4811      	ldr	r0, [pc, #68]	; (8001d78 <LOG_REPORT+0x7c>)
 8001d34:	f002 fab1 	bl	800429a <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 8001d38:	4810      	ldr	r0, [pc, #64]	; (8001d7c <LOG_REPORT+0x80>)
 8001d3a:	f009 fe71 	bl	800ba20 <HAL_DMA_GetState>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d101      	bne.n	8001d48 <LOG_REPORT+0x4c>
		return TRUE;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e010      	b.n	8001d6a <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 8001d48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d4c:	490c      	ldr	r1, [pc, #48]	; (8001d80 <LOG_REPORT+0x84>)
 8001d4e:	480a      	ldr	r0, [pc, #40]	; (8001d78 <LOG_REPORT+0x7c>)
 8001d50:	f002 facb 	bl	80042ea <ringBuff_PopArray>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 8001d5a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4907      	ldr	r1, [pc, #28]	; (8001d80 <LOG_REPORT+0x84>)
 8001d62:	4808      	ldr	r0, [pc, #32]	; (8001d84 <LOG_REPORT+0x88>)
 8001d64:	f00c fbdc 	bl	800e520 <HAL_UART_Transmit_DMA>
	return TRUE;
 8001d68:	2301      	movs	r3, #1
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3750      	adds	r7, #80	; 0x50
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	0801af40 	.word	0x0801af40
 8001d78:	20000410 	.word	0x20000410
 8001d7c:	200069f8 	.word	0x200069f8
 8001d80:	20005930 	.word	0x20005930
 8001d84:	200069b8 	.word	0x200069b8

08001d88 <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_length, uint8_t*data_packet) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]

	int32_t data_length = in_length - 2;
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	3b02      	subs	r3, #2
 8001d98:	617b      	str	r3, [r7, #20]
	//check packet length
	if(message_buff[1] == data_length && backup_available == 0){
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	461a      	mov	r2, r3
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d119      	bne.n	8001ddc <unPackPayload+0x54>
 8001da8:	4b2e      	ldr	r3, [pc, #184]	; (8001e64 <unPackPayload+0xdc>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d115      	bne.n	8001ddc <unPackPayload+0x54>
		// check minimum lenght
		if (in_length < MIN_MESSAGE_LENGHT) {
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	dc02      	bgt.n	8001dbc <unPackPayload+0x34>
			return -1;
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dba:	e04f      	b.n	8001e5c <unPackPayload+0xd4>
		}

		// check start char
		if(message_buff[0] != START_CHAR){
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b28      	cmp	r3, #40	; 0x28
 8001dc2:	d002      	beq.n	8001dca <unPackPayload+0x42>
			return -1;
 8001dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc8:	e048      	b.n	8001e5c <unPackPayload+0xd4>
		}
		memcpy(data_packet, &message_buff[2], data_length - RECEIVE_END_LENGTH);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	1c99      	adds	r1, r3, #2
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	3b02      	subs	r3, #2
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f013 fe41 	bl	8015a5c <memcpy>
 8001dda:	e03d      	b.n	8001e58 <unPackPayload+0xd0>
	}else if(message_buff[1] != data_length && backup_available == 0){
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	3301      	adds	r3, #1
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d01b      	beq.n	8001e22 <unPackPayload+0x9a>
 8001dea:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <unPackPayload+0xdc>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d117      	bne.n	8001e22 <unPackPayload+0x9a>
		backup_available = 1;
 8001df2:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <unPackPayload+0xdc>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]
		// check start char
		if(message_buff[0] != START_CHAR){
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b28      	cmp	r3, #40	; 0x28
 8001dfe:	d002      	beq.n	8001e06 <unPackPayload+0x7e>
			return -1;
 8001e00:	f04f 33ff 	mov.w	r3, #4294967295
 8001e04:	e02a      	b.n	8001e5c <unPackPayload+0xd4>
		}
		memcpy(data_packet, &message_buff[2], data_length);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	3302      	adds	r3, #2
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f013 fe24 	bl	8015a5c <memcpy>
		backup_length = data_length;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <unPackPayload+0xe0>)
 8001e1a:	701a      	strb	r2, [r3, #0]
		return - 1;
 8001e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e20:	e01c      	b.n	8001e5c <unPackPayload+0xd4>
	}else if(backup_available == 1){
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <unPackPayload+0xdc>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d113      	bne.n	8001e52 <unPackPayload+0xca>
		backup_available = 0;
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <unPackPayload+0xdc>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	701a      	strb	r2, [r3, #0]
		memcpy(&data_packet[backup_length], message_buff, in_length);
 8001e30:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <unPackPayload+0xe0>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	68f9      	ldr	r1, [r7, #12]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f013 fe0c 	bl	8015a5c <memcpy>
		data_length = backup_length + in_length;
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <unPackPayload+0xe0>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	e002      	b.n	8001e58 <unPackPayload+0xd0>
	}else{
		return - 1;
 8001e52:	f04f 33ff 	mov.w	r3, #4294967295
 8001e56:	e001      	b.n	8001e5c <unPackPayload+0xd4>
	}


	return data_length - RECEIVE_END_LENGTH;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	3b02      	subs	r3, #2
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20005a30 	.word	0x20005a30
 8001e68:	20005a31 	.word	0x20005a31

08001e6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <MX_DMA_Init+0x3c>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ea8 <MX_DMA_Init+0x3c>)
 8001e7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e80:	6313      	str	r3, [r2, #48]	; 0x30
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <MX_DMA_Init+0x3c>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2105      	movs	r1, #5
 8001e92:	200f      	movs	r0, #15
 8001e94:	f009 fae8 	bl	800b468 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001e98:	200f      	movs	r0, #15
 8001e9a:	f009 fb01 	bl	800b4a0 <HAL_NVIC_EnableIRQ>

}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800

08001eac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4a07      	ldr	r2, [pc, #28]	; (8001ed8 <vApplicationGetIdleTaskMemory+0x2c>)
 8001ebc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	4a06      	ldr	r2, [pc, #24]	; (8001edc <vApplicationGetIdleTaskMemory+0x30>)
 8001ec2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eca:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	20000ba8 	.word	0x20000ba8
 8001edc:	20000bfc 	.word	0x20000bfc

08001ee0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001ee0:	b5b0      	push	{r4, r5, r7, lr}
 8001ee2:	b094      	sub	sp, #80	; 0x50
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	64bb      	str	r3, [r7, #72]	; 0x48
 8001eea:	2300      	movs	r3, #0
 8001eec:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 8001eee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f010 faf0 	bl	80124d8 <osMutexCreate>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <MX_FREERTOS_Init+0x90>)
 8001efc:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 8001efe:	2301      	movs	r3, #1
 8001f00:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f02:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f08:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f0c:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 8001f0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f010 fbf7 	bl	8012708 <osMailCreate>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <MX_FREERTOS_Init+0x94>)
 8001f1e:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2048);
 8001f20:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <MX_FREERTOS_Init+0x98>)
 8001f22:	f107 041c 	add.w	r4, r7, #28
 8001f26:	461d      	mov	r5, r3
 8001f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001f34:	f107 031c 	add.w	r3, r7, #28
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f010 f9e0 	bl	8012300 <osThreadCreate>
 8001f40:	4602      	mov	r2, r0
 8001f42:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <MX_FREERTOS_Init+0x9c>)
 8001f44:	601a      	str	r2, [r3, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <MX_FREERTOS_Init+0xa0>)
 8001f48:	463c      	mov	r4, r7
 8001f4a:	461d      	mov	r5, r3
 8001f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 8001f58:	463b      	mov	r3, r7
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f010 f9cf 	bl	8012300 <osThreadCreate>
 8001f62:	4602      	mov	r2, r0
 8001f64:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <MX_FREERTOS_Init+0xa4>)
 8001f66:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001f68:	bf00      	nop
 8001f6a:	3750      	adds	r7, #80	; 0x50
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f70:	20005a38 	.word	0x20005a38
 8001f74:	20005a3c 	.word	0x20005a3c
 8001f78:	0801af5c 	.word	0x0801af5c
 8001f7c:	20005a34 	.word	0x20005a34
 8001f80:	0801af88 	.word	0x0801af88
 8001f84:	20005a40 	.word	0x20005a40

08001f88 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8a:	f6ad 3d0c 	subw	sp, sp, #2828	; 0xb0c
 8001f8e:	af6c      	add	r7, sp, #432	; 0x1b0
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001f96:	f012 ffd9 	bl	8014f4c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	2110      	movs	r1, #16
 8001f9e:	48da      	ldr	r0, [pc, #872]	; (8002308 <StartDefaultTask+0x380>)
 8001fa0:	f009 ffc4 	bl	800bf2c <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f887 3957 	strb.w	r3, [r7, #2391]	; 0x957
  int32_t					current_key_speed;
  double						run_time;

  SCARA_Pick_And_Place_Package Object[8];
  SCARA_Pick_And_Place_State  operation_state;
  uint8_t object_tail_pointer = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f887 3936 	strb.w	r3, [r7, #2358]	; 0x936
  uint8_t object_head_pointer = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f887 3935 	strb.w	r3, [r7, #2357]	; 0x935
  double state_time = 0;
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	f04f 0400 	mov.w	r4, #0
 8001fbe:	f607 1228 	addw	r2, r7, #2344	; 0x928
 8001fc2:	e9c2 3400 	strd	r3, r4, [r2]
  int run_point = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
  const SCARA_Slot_TypeDef SLot_Cordinate[NUM_OF_OBJECT] = {
 8001fcc:	f107 0318 	add.w	r3, r7, #24
 8001fd0:	4ace      	ldr	r2, [pc, #824]	; (800230c <StartDefaultTask+0x384>)
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	2390      	movs	r3, #144	; 0x90
 8001fd8:	461a      	mov	r2, r3
 8001fda:	f013 fd3f 	bl	8015a5c <memcpy>
  		{203.859f, -101.616f, 0.0f} ,
		{203.859f, -101.616f, 0.0f} ,
		{203.859f, -101.616f, 0.0f}
  };

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 8001fde:	21e7      	movs	r1, #231	; 0xe7
 8001fe0:	48cb      	ldr	r0, [pc, #812]	; (8002310 <StartDefaultTask+0x388>)
 8001fe2:	f7ff fe8b 	bl	8001cfc <LOG_REPORT>

  // Init value
  current_method = scaraGetMethod();
 8001fe6:	f008 fa0d 	bl	800a404 <scaraGetMethod>
 8001fea:	4603      	mov	r3, r0
 8001fec:	f887 394f 	strb.w	r3, [r7, #2383]	; 0x94f
  current_mode	 = scaraGetMode();
 8001ff0:	f008 f9fc 	bl	800a3ec <scaraGetMode>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	f887 394e 	strb.w	r3, [r7, #2382]	; 0x94e
  current_duty_state	 = scaraGetDutyState();
 8001ffa:	f008 fa0f 	bl	800a41c <scaraGetDutyState>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f887 394d 	strb.w	r3, [r7, #2381]	; 0x94d

  // Start up robot
  scaraStartup();
 8002004:	f003 f940 	bl	8005288 <scaraStartup>
  osDelay(10);
 8002008:	200a      	movs	r0, #10
 800200a:	f010 f9c5 	bl	8012398 <osDelay>
//   positionNext.Theta2 = PI/3;
//   positionNext.D3 = 10;
//   positionNext.Theta4 = 0;
//   positionNext.t = 0;

  positionNext.Theta1 = -1.48267f;
 800200e:	4ac1      	ldr	r2, [pc, #772]	; (8002314 <StartDefaultTask+0x38c>)
 8002010:	a4b5      	add	r4, pc, #724	; (adr r4, 80022e8 <StartDefaultTask+0x360>)
 8002012:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002016:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
  positionNext.Theta2 = 2.35575f;
 800201a:	4abe      	ldr	r2, [pc, #760]	; (8002314 <StartDefaultTask+0x38c>)
 800201c:	a4b4      	add	r4, pc, #720	; (adr r4, 80022f0 <StartDefaultTask+0x368>)
 800201e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002022:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
  positionNext.D3 = 0.034999;
 8002026:	4abb      	ldr	r2, [pc, #748]	; (8002314 <StartDefaultTask+0x38c>)
 8002028:	a4b3      	add	r4, pc, #716	; (adr r4, 80022f8 <StartDefaultTask+0x370>)
 800202a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800202e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
  positionNext.Theta4 = 2.96586;
 8002032:	4ab8      	ldr	r2, [pc, #736]	; (8002314 <StartDefaultTask+0x38c>)
 8002034:	a4b2      	add	r4, pc, #712	; (adr r4, 8002300 <StartDefaultTask+0x378>)
 8002036:	e9d4 3400 	ldrd	r3, r4, [r4]
 800203a:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
  positionNext.t = 0;
 800203e:	4ab5      	ldr	r2, [pc, #724]	; (8002314 <StartDefaultTask+0x38c>)
 8002040:	f04f 0300 	mov.w	r3, #0
 8002044:	f04f 0400 	mov.w	r4, #0
 8002048:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

  kinematicForward(&positionNext);
 800204c:	48b1      	ldr	r0, [pc, #708]	; (8002314 <StartDefaultTask+0x38c>)
 800204e:	f001 fcdf 	bl	8003a10 <kinematicForward>
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 8002052:	48b1      	ldr	r0, [pc, #708]	; (8002318 <StartDefaultTask+0x390>)
 8002054:	f00b fe41 	bl	800dcda <HAL_TIM_Base_Start_IT>

  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 8002058:	463b      	mov	r3, r7
 800205a:	f04f 32ff 	mov.w	r2, #4294967295
 800205e:	2101      	movs	r1, #1
 8002060:	4618      	mov	r0, r3
 8002062:	f010 f9ed 	bl	8012440 <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 8002066:	2300      	movs	r3, #0
 8002068:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
	  respond_packed_lenght = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
	  infor_lenght			= 0;
 8002072:	2300      	movs	r3, #0
 8002074:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
	  infor_packed_lenght	= 0;
 8002078:	2300      	movs	r3, #0
 800207a:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
	  task_usb_lenght		= 0;
 800207e:	2300      	movs	r3, #0
 8002080:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
	  usb_lenght			= 0;
 8002084:	2300      	movs	r3, #0
 8002086:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
	  total_respond_length  = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
	  detail_ptr 			= 0;
 8002090:	2300      	movs	r3, #0
 8002092:	f8c7 3904 	str.w	r3, [r7, #2308]	; 0x904
	  // Update new position
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8002096:	4aa1      	ldr	r2, [pc, #644]	; (800231c <StartDefaultTask+0x394>)
 8002098:	4ba1      	ldr	r3, [pc, #644]	; (8002320 <StartDefaultTask+0x398>)
 800209a:	4610      	mov	r0, r2
 800209c:	4619      	mov	r1, r3
 800209e:	23c0      	movs	r3, #192	; 0xc0
 80020a0:	461a      	mov	r2, r3
 80020a2:	f013 fcdb 	bl	8015a5c <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 80020a6:	4a9e      	ldr	r2, [pc, #632]	; (8002320 <StartDefaultTask+0x398>)
 80020a8:	4b9a      	ldr	r3, [pc, #616]	; (8002314 <StartDefaultTask+0x38c>)
 80020aa:	4610      	mov	r0, r2
 80020ac:	4619      	mov	r1, r3
 80020ae:	23c0      	movs	r3, #192	; 0xc0
 80020b0:	461a      	mov	r2, r3
 80020b2:	f013 fcd3 	bl	8015a5c <memcpy>
//		  positionTrue.q = positionCurrent.q;
//	  }
//#endif
	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 80020b6:	4b9b      	ldr	r3, [pc, #620]	; (8002324 <StartDefaultTask+0x39c>)
 80020b8:	6819      	ldr	r1, [r3, #0]
 80020ba:	f607 03e4 	addw	r3, r7, #2276	; 0x8e4
 80020be:	2200      	movs	r2, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f010 fbcd 	bl	8012860 <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 80020c6:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 80020ca:	2b20      	cmp	r3, #32
 80020cc:	d116      	bne.n	80020fc <StartDefaultTask+0x174>
		   dataMail = ret_mail.value.p;
 80020ce:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 80020d2:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 80020d6:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80020da:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80020de:	f8d7 1900 	ldr.w	r1, [r7, #2304]	; 0x900
 80020e2:	4618      	mov	r0, r3
 80020e4:	f013 fcba 	bl	8015a5c <memcpy>
		   isNewDuty = TRUE;
 80020e8:	2301      	movs	r3, #1
 80020ea:	f887 3957 	strb.w	r3, [r7, #2391]	; 0x957
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 80020ee:	4b8d      	ldr	r3, [pc, #564]	; (8002324 <StartDefaultTask+0x39c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f8d7 1900 	ldr.w	r1, [r7, #2304]	; 0x900
 80020f6:	4618      	mov	r0, r3
 80020f8:	f010 fc26 	bl	8012948 <osMailFree>
	  }
	  if(isNewDuty) {
 80020fc:	f897 3957 	ldrb.w	r3, [r7, #2391]	; 0x957
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 8325 	beq.w	8002750 <StartDefaultTask+0x7c8>
		  //memset(respond, 0, 40);
		  // Check change method
		  if (duty_cmd.change_method == TRUE) {
 8002106:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b01      	cmp	r3, #1
 800210e:	f040 80cd 	bne.w	80022ac <StartDefaultTask+0x324>
			  //free(Object);
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 8002112:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8002116:	785b      	ldrb	r3, [r3, #1]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d11f      	bne.n	800215c <StartDefaultTask+0x1d4>
				  // Need add check condition idle in each method
				  current_method = SCARA_METHOD_MANUAL;
 800211c:	2300      	movs	r3, #0
 800211e:	f887 394f 	strb.w	r3, [r7, #2383]	; 0x94f
				//   respond_lenght = commandRespond(RPD_OK,
				// 								duty_cmd.id_command,
				// 								"Changed MANUAL Method",
				// 								(char *)respond);
				detail_array[0] = MANUAL_METHOD;
 8002122:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 8002126:	2218      	movs	r2, #24
 8002128:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800212a:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800212e:	6899      	ldr	r1, [r3, #8]
 8002130:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8002134:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8002138:	4413      	add	r3, r2
 800213a:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2301      	movs	r3, #1
 8002142:	2008      	movs	r0, #8
 8002144:	f7ff fd8a 	bl	8001c5c <commandRespond1>
 8002148:	f8c7 091c 	str.w	r0, [r7, #2332]	; 0x91c
				total_respond_length += respond_lenght;
 800214c:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 8002150:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8002154:	4413      	add	r3, r2
 8002156:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
 800215a:	e2f6      	b.n	800274a <StartDefaultTask+0x7c2>
			  } else if (SCARA_METHOD_SEMI_AUTO == duty_cmd.robot_method) {
 800215c:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8002160:	785b      	ldrb	r3, [r3, #1]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d11f      	bne.n	80021a6 <StartDefaultTask+0x21e>
				  current_method = SCARA_METHOD_SEMI_AUTO;
 8002166:	2301      	movs	r3, #1
 8002168:	f887 394f 	strb.w	r3, [r7, #2383]	; 0x94f
				//   respond_lenght = commandRespond(RPD_OK,
				// 								duty_cmd.id_command,
				// 								"Changed SEMI AUTO Method",
				// 								(char *)respond);
				detail_array[0] = SEMI_AUTO_METHOD;
 800216c:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 8002170:	2219      	movs	r2, #25
 8002172:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002174:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8002178:	6899      	ldr	r1, [r3, #8]
 800217a:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 800217e:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8002182:	4413      	add	r3, r2
 8002184:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	2301      	movs	r3, #1
 800218c:	2008      	movs	r0, #8
 800218e:	f7ff fd65 	bl	8001c5c <commandRespond1>
 8002192:	f8c7 091c 	str.w	r0, [r7, #2332]	; 0x91c
				total_respond_length += respond_lenght;
 8002196:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 800219a:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 800219e:	4413      	add	r3, r2
 80021a0:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
 80021a4:	e2d1      	b.n	800274a <StartDefaultTask+0x7c2>
			  } else if (SCARA_METHOD_GCODE == duty_cmd.robot_method) {
 80021a6:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80021aa:	785b      	ldrb	r3, [r3, #1]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d11f      	bne.n	80021f0 <StartDefaultTask+0x268>
				  current_method = SCARA_METHOD_GCODE;
 80021b0:	2302      	movs	r3, #2
 80021b2:	f887 394f 	strb.w	r3, [r7, #2383]	; 0x94f
				//   respond_lenght = commandRespond(RPD_OK,
				// 								duty_cmd.id_command,
				// 								"Changed AUTO Method",
				// 								(char *)respond);
				detail_array[0] = AUTO_METHOD;
 80021b6:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 80021ba:	221a      	movs	r2, #26
 80021bc:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80021be:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80021c2:	6899      	ldr	r1, [r3, #8]
 80021c4:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 80021c8:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 80021cc:	4413      	add	r3, r2
 80021ce:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	2301      	movs	r3, #1
 80021d6:	2008      	movs	r0, #8
 80021d8:	f7ff fd40 	bl	8001c5c <commandRespond1>
 80021dc:	f8c7 091c 	str.w	r0, [r7, #2332]	; 0x91c
				total_respond_length += respond_lenght;
 80021e0:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 80021e4:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80021e8:	4413      	add	r3, r2
 80021ea:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
 80021ee:	e2ac      	b.n	800274a <StartDefaultTask+0x7c2>
			  }else if(SCARA_METHOD_TEST == duty_cmd.robot_method){
 80021f0:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80021f4:	785b      	ldrb	r3, [r3, #1]
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d12f      	bne.n	800225a <StartDefaultTask+0x2d2>
				  test_value[0] = 0;
 80021fa:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 80021fe:	2200      	movs	r2, #0
 8002200:	701a      	strb	r2, [r3, #0]
				  test_value[1] = 0;
 8002202:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 8002206:	2200      	movs	r2, #0
 8002208:	705a      	strb	r2, [r3, #1]
				  test_value[2] = 0;
 800220a:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 800220e:	2200      	movs	r2, #0
 8002210:	709a      	strb	r2, [r3, #2]
				  test_value[3] = 0;
 8002212:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 8002216:	2200      	movs	r2, #0
 8002218:	70da      	strb	r2, [r3, #3]
				  current_method = SCARA_METHOD_TEST;
 800221a:	2303      	movs	r3, #3
 800221c:	f887 394f 	strb.w	r3, [r7, #2383]	; 0x94f
				  detail_array[0] = TEST_METHOD;
 8002220:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 8002224:	221b      	movs	r2, #27
 8002226:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002228:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800222c:	6899      	ldr	r1, [r3, #8]
 800222e:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8002232:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8002236:	4413      	add	r3, r2
 8002238:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2301      	movs	r3, #1
 8002240:	2008      	movs	r0, #8
 8002242:	f7ff fd0b 	bl	8001c5c <commandRespond1>
 8002246:	f8c7 091c 	str.w	r0, [r7, #2332]	; 0x91c
				  total_respond_length += respond_lenght;
 800224a:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 800224e:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8002252:	4413      	add	r3, r2
 8002254:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
 8002258:	e277      	b.n	800274a <StartDefaultTask+0x7c2>
			  }else if(SCARA_METHOD_PICK_AND_PLACE == duty_cmd.robot_method){
 800225a:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800225e:	785b      	ldrb	r3, [r3, #1]
 8002260:	2b04      	cmp	r3, #4
 8002262:	f040 8272 	bne.w	800274a <StartDefaultTask+0x7c2>
				  current_method = SCARA_METHOD_PICK_AND_PLACE;
 8002266:	2304      	movs	r3, #4
 8002268:	f887 394f 	strb.w	r3, [r7, #2383]	; 0x94f
				  current_duty_state = SCARA_DUTY_STATE_INIT;
 800226c:	2301      	movs	r3, #1
 800226e:	f887 394d 	strb.w	r3, [r7, #2381]	; 0x94d
				  detail_array[0] = PICK_AND_PLACE_METHOD;
 8002272:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 8002276:	221c      	movs	r2, #28
 8002278:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800227a:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800227e:	6899      	ldr	r1, [r3, #8]
 8002280:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8002284:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8002288:	4413      	add	r3, r2
 800228a:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	2301      	movs	r3, #1
 8002292:	2008      	movs	r0, #8
 8002294:	f7ff fce2 	bl	8001c5c <commandRespond1>
 8002298:	f8c7 091c 	str.w	r0, [r7, #2332]	; 0x91c
				  total_respond_length += respond_lenght;
 800229c:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 80022a0:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80022a4:	4413      	add	r3, r2
 80022a6:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
 80022aa:	e24e      	b.n	800274a <StartDefaultTask+0x7c2>
			  }
		  } else {
			  	  // Check current method & cmd method
			  	  if (current_method == duty_cmd.robot_method) {
 80022ac:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80022b0:	785b      	ldrb	r3, [r3, #1]
 80022b2:	f897 294f 	ldrb.w	r2, [r7, #2383]	; 0x94f
 80022b6:	429a      	cmp	r2, r3
 80022b8:	f040 821b 	bne.w	80026f2 <StartDefaultTask+0x76a>
				  	  switch( duty_cmd.robot_method) {
 80022bc:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80022c0:	785b      	ldrb	r3, [r3, #1]
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	f200 820f 	bhi.w	80026e6 <StartDefaultTask+0x75e>
 80022c8:	a201      	add	r2, pc, #4	; (adr r2, 80022d0 <StartDefaultTask+0x348>)
 80022ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ce:	bf00      	nop
 80022d0:	08002329 	.word	0x08002329
 80022d4:	0800237f 	.word	0x0800237f
 80022d8:	0800272d 	.word	0x0800272d
 80022dc:	08002537 	.word	0x08002537
 80022e0:	0800264d 	.word	0x0800264d
 80022e4:	f3af 8000 	nop.w
 80022e8:	20000000 	.word	0x20000000
 80022ec:	bff7b904 	.word	0xbff7b904
 80022f0:	80000000 	.word	0x80000000
 80022f4:	4002d893 	.word	0x4002d893
 80022f8:	90c91080 	.word	0x90c91080
 80022fc:	3fa1eb63 	.word	0x3fa1eb63
 8002300:	cec41dd2 	.word	0xcec41dd2
 8002304:	4007ba14 	.word	0x4007ba14
 8002308:	40020400 	.word	0x40020400
 800230c:	0801b088 	.word	0x0801b088
 8002310:	0801afa4 	.word	0x0801afa4
 8002314:	20006838 	.word	0x20006838
 8002318:	20006978 	.word	0x20006978
 800231c:	20006538 	.word	0x20006538
 8002320:	200066b8 	.word	0x200066b8
 8002324:	20005a3c 	.word	0x20005a3c
				  	  case SCARA_METHOD_MANUAL:
				  	  {
				  		  if (current_key_state == SCARA_KEY_STATE_READY) {
 8002328:	f897 394b 	ldrb.w	r3, [r7, #2379]	; 0x94b
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10d      	bne.n	800234c <StartDefaultTask+0x3c4>
				  			  current_key = duty_cmd.keyboard;
 8002330:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8002334:	78db      	ldrb	r3, [r3, #3]
 8002336:	f887 394a 	strb.w	r3, [r7, #2378]	; 0x94a
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Init new path
 800233a:	2301      	movs	r3, #1
 800233c:	f887 394b 	strb.w	r3, [r7, #2379]	; 0x94b
				  			  current_key_speed = duty_cmd.key_speed;
 8002340:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f8c7 3944 	str.w	r3, [r7, #2372]	; 0x944
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
									  && current_key_speed == duty_cmd.key_speed) {
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
				  		  }
				  	  }
				  	  break;
 800234a:	e1fd      	b.n	8002748 <StartDefaultTask+0x7c0>
				  		  } else if (current_key == duty_cmd.keyboard
 800234c:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8002350:	78db      	ldrb	r3, [r3, #3]
 8002352:	f897 294a 	ldrb.w	r2, [r7, #2378]	; 0x94a
 8002356:	429a      	cmp	r2, r3
 8002358:	f040 81f6 	bne.w	8002748 <StartDefaultTask+0x7c0>
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
 800235c:	f897 394b 	ldrb.w	r3, [r7, #2379]	; 0x94b
 8002360:	2b02      	cmp	r3, #2
 8002362:	f040 81f1 	bne.w	8002748 <StartDefaultTask+0x7c0>
									  && current_key_speed == duty_cmd.key_speed) {
 8002366:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f8d7 2944 	ldr.w	r2, [r7, #2372]	; 0x944
 8002370:	429a      	cmp	r2, r3
 8002372:	f040 81e9 	bne.w	8002748 <StartDefaultTask+0x7c0>
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
 8002376:	2301      	movs	r3, #1
 8002378:	f887 394b 	strb.w	r3, [r7, #2379]	; 0x94b
				  	  break;
 800237c:	e1e4      	b.n	8002748 <StartDefaultTask+0x7c0>
				  	  case SCARA_METHOD_SEMI_AUTO:
				  	  {
						  switch( duty_cmd.robot_mode) {
 800237e:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8002382:	789b      	ldrb	r3, [r3, #2]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d029      	beq.n	80023dc <StartDefaultTask+0x454>
 8002388:	2b02      	cmp	r3, #2
 800238a:	d074      	beq.n	8002476 <StartDefaultTask+0x4ee>
 800238c:	2b00      	cmp	r3, #0
 800238e:	f040 80cb 	bne.w	8002528 <StartDefaultTask+0x5a0>
						  case SCARA_MODE_STOP:
							  {
								  current_mode	 = SCARA_MODE_STOP;
 8002392:	2300      	movs	r3, #0
 8002394:	f887 394e 	strb.w	r3, [r7, #2382]	; 0x94e
								//   respond_lenght = commandRespond(RPD_OK,
								// 								  duty_cmd.id_command,
								// 								  "Stop Now",
								// 								  (char *)respond);
								detail_array[0] = STOP_NOW;
 8002398:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800239c:	221f      	movs	r2, #31
 800239e:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80023a0:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80023a4:	6899      	ldr	r1, [r3, #8]
 80023a6:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 80023aa:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 80023ae:	4413      	add	r3, r2
 80023b0:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	2301      	movs	r3, #1
 80023b8:	2008      	movs	r0, #8
 80023ba:	f7ff fc4f 	bl	8001c5c <commandRespond1>
 80023be:	f8c7 091c 	str.w	r0, [r7, #2332]	; 0x91c
								total_respond_length += respond_lenght;
 80023c2:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 80023c6:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80023ca:	4413      	add	r3, r2
 80023cc:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
								  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 80023d0:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80023d4:	48d6      	ldr	r0, [pc, #856]	; (8002730 <StartDefaultTask+0x7a8>)
 80023d6:	f7ff fc91 	bl	8001cfc <LOG_REPORT>
							  }
							  break;
 80023da:	e0ab      	b.n	8002534 <StartDefaultTask+0x5ac>

						  case SCARA_MODE_SCAN:
							  {
								  if (SCARA_MODE_DUTY == current_mode
 80023dc:	f897 394e 	ldrb.w	r3, [r7, #2382]	; 0x94e
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d126      	bne.n	8002432 <StartDefaultTask+0x4aa>
									  && SCARA_DUTY_STATE_READY == current_duty_state) {
 80023e4:	f897 394d 	ldrb.w	r3, [r7, #2381]	; 0x94d
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d122      	bne.n	8002432 <StartDefaultTask+0x4aa>
									  current_mode = SCARA_MODE_SCAN;
 80023ec:	2301      	movs	r3, #1
 80023ee:	f887 394e 	strb.w	r3, [r7, #2382]	; 0x94e
									  current_scan_state = SCARA_SCAN_STATE_INIT;
 80023f2:	2300      	movs	r3, #0
 80023f4:	f887 394c 	strb.w	r3, [r7, #2380]	; 0x94c
									//   respond_lenght = commandRespond(RPD_OK,
									// 								  duty_cmd.id_command,
									// 								  "Start Scan",
									// 								  (char *)respond);
									detail_array[0] = START_SCAN;
 80023f8:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 80023fc:	2220      	movs	r2, #32
 80023fe:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002400:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8002404:	6899      	ldr	r1, [r3, #8]
 8002406:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 800240a:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 800240e:	4413      	add	r3, r2
 8002410:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	2301      	movs	r3, #1
 8002418:	2008      	movs	r0, #8
 800241a:	f7ff fc1f 	bl	8001c5c <commandRespond1>
 800241e:	f8c7 091c 	str.w	r0, [r7, #2332]	; 0x91c
									total_respond_length += respond_lenght;
 8002422:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 8002426:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 800242a:	4413      	add	r3, r2
 800242c:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
									total_respond_length += respond_lenght;
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
								  }
							  }
							  break;
 8002430:	e080      	b.n	8002534 <StartDefaultTask+0x5ac>
									detail_array[0] = BUSY;
 8002432:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 8002436:	2221      	movs	r2, #33	; 0x21
 8002438:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800243a:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800243e:	6899      	ldr	r1, [r3, #8]
 8002440:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8002444:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8002448:	4413      	add	r3, r2
 800244a:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	2301      	movs	r3, #1
 8002452:	2007      	movs	r0, #7
 8002454:	f7ff fc02 	bl	8001c5c <commandRespond1>
 8002458:	f8c7 091c 	str.w	r0, [r7, #2332]	; 0x91c
									total_respond_length += respond_lenght;
 800245c:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 8002460:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8002464:	4413      	add	r3, r2
 8002466:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 800246a:	f240 118d 	movw	r1, #397	; 0x18d
 800246e:	48b1      	ldr	r0, [pc, #708]	; (8002734 <StartDefaultTask+0x7ac>)
 8002470:	f7ff fc44 	bl	8001cfc <LOG_REPORT>
							  break;
 8002474:	e05e      	b.n	8002534 <StartDefaultTask+0x5ac>

						  case SCARA_MODE_DUTY:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002476:	f897 394e 	ldrb.w	r3, [r7, #2382]	; 0x94e
 800247a:	2b02      	cmp	r3, #2
 800247c:	d131      	bne.n	80024e2 <StartDefaultTask+0x55a>
 800247e:	f897 394d 	ldrb.w	r3, [r7, #2381]	; 0x94d
 8002482:	2b00      	cmp	r3, #0
 8002484:	d12d      	bne.n	80024e2 <StartDefaultTask+0x55a>
									  //scaraSetScanFlag();
//									  if(duty_cmd.modeInit_type == DUTY_MODE_INIT_LINEAR){
//										  current_method = SCARA_METHOD_AUTO;
//									  }
									  if (scaraIsScanLimit()) {
 8002486:	f007 ffd5 	bl	800a434 <scaraIsScanLimit>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d006      	beq.n	800249e <StartDefaultTask+0x516>
										  current_mode	 = SCARA_MODE_DUTY;
 8002490:	2302      	movs	r3, #2
 8002492:	f887 394e 	strb.w	r3, [r7, #2382]	; 0x94e
										  current_duty_state	 = SCARA_DUTY_STATE_INIT;
 8002496:	2301      	movs	r3, #1
 8002498:	f887 394d 	strb.w	r3, [r7, #2381]	; 0x94d
									  if (scaraIsScanLimit()) {
 800249c:	e043      	b.n	8002526 <StartDefaultTask+0x59e>
									  } else {
										//   respond_lenght = commandRespond(RPD_ERROR,
										// 								  duty_cmd.id_command,
										// 								  "Has Not Scan Yet.",
										// 								  (char *)respond);
										detail_array[0] = NOT_SCAN;
 800249e:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 80024a2:	2222      	movs	r2, #34	; 0x22
 80024a4:	701a      	strb	r2, [r3, #0]
										respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80024a6:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80024aa:	6899      	ldr	r1, [r3, #8]
 80024ac:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 80024b0:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 80024b4:	4413      	add	r3, r2
 80024b6:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	2301      	movs	r3, #1
 80024be:	2007      	movs	r0, #7
 80024c0:	f7ff fbcc 	bl	8001c5c <commandRespond1>
 80024c4:	f8c7 091c 	str.w	r0, [r7, #2332]	; 0x91c
										total_respond_length += respond_lenght;
 80024c8:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 80024cc:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80024d0:	4413      	add	r3, r2
 80024d2:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
										  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 80024d6:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80024da:	4897      	ldr	r0, [pc, #604]	; (8002738 <StartDefaultTask+0x7b0>)
 80024dc:	f7ff fc0e 	bl	8001cfc <LOG_REPORT>
									  if (scaraIsScanLimit()) {
 80024e0:	e021      	b.n	8002526 <StartDefaultTask+0x59e>
								  } else {
									//   respond_lenght	= commandRespond(RPD_ERROR,
									// 									  duty_cmd.id_command,
									// 									  "Busy.",
									// 									  (char *)respond);
									detail_array[0] = BUSY;
 80024e2:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 80024e6:	2221      	movs	r2, #33	; 0x21
 80024e8:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80024ea:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80024ee:	6899      	ldr	r1, [r3, #8]
 80024f0:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 80024f4:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 80024f8:	4413      	add	r3, r2
 80024fa:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	2301      	movs	r3, #1
 8002502:	2007      	movs	r0, #7
 8002504:	f7ff fbaa 	bl	8001c5c <commandRespond1>
 8002508:	f8c7 091c 	str.w	r0, [r7, #2332]	; 0x91c
									total_respond_length += respond_lenght;
 800250c:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 8002510:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8002514:	4413      	add	r3, r2
 8002516:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
									  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 800251a:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800251e:	4887      	ldr	r0, [pc, #540]	; (800273c <StartDefaultTask+0x7b4>)
 8002520:	f7ff fbec 	bl	8001cfc <LOG_REPORT>
								  }
							  }
							  break;
 8002524:	e006      	b.n	8002534 <StartDefaultTask+0x5ac>
 8002526:	e005      	b.n	8002534 <StartDefaultTask+0x5ac>
						  default:
							  {
								  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 8002528:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800252c:	4884      	ldr	r0, [pc, #528]	; (8002740 <StartDefaultTask+0x7b8>)
 800252e:	f7ff fbe5 	bl	8001cfc <LOG_REPORT>
							  }
						  }
					  }
					  break;
 8002532:	e10a      	b.n	800274a <StartDefaultTask+0x7c2>
 8002534:	e109      	b.n	800274a <StartDefaultTask+0x7c2>
					  case SCARA_METHOD_TEST:
					  {
						  test_value[0] = 0;
 8002536:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
						  test_value[1] = 0;
 800253e:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 8002542:	2200      	movs	r2, #0
 8002544:	705a      	strb	r2, [r3, #1]
						  test_value[2] = 0;
 8002546:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 800254a:	2200      	movs	r2, #0
 800254c:	709a      	strb	r2, [r3, #2]
						  test_value[3] = 0;
 800254e:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 8002552:	2200      	movs	r2, #0
 8002554:	70da      	strb	r2, [r3, #3]
						  switch (duty_cmd.test_key)
 8002556:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800255a:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 800255e:	2b07      	cmp	r3, #7
 8002560:	d872      	bhi.n	8002648 <StartDefaultTask+0x6c0>
 8002562:	a201      	add	r2, pc, #4	; (adr r2, 8002568 <StartDefaultTask+0x5e0>)
 8002564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002568:	08002589 	.word	0x08002589
 800256c:	080025a1 	.word	0x080025a1
 8002570:	080025b9 	.word	0x080025b9
 8002574:	080025d1 	.word	0x080025d1
 8002578:	080025e9 	.word	0x080025e9
 800257c:	08002601 	.word	0x08002601
 8002580:	08002619 	.word	0x08002619
 8002584:	08002631 	.word	0x08002631
						  {
						  case SCARA_TEST_MOTOR1_POS:
							 test_value[duty_cmd.test_key/2] = 5;
 8002588:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800258c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002590:	085b      	lsrs	r3, r3, #1
 8002592:	b2db      	uxtb	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 800259a:	2105      	movs	r1, #5
 800259c:	5499      	strb	r1, [r3, r2]
						  break;
 800259e:	e054      	b.n	800264a <StartDefaultTask+0x6c2>
						  case SCARA_TEST_MOTOR1_NEG:
							 test_value[duty_cmd.test_key/2] = -5;
 80025a0:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80025a4:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80025a8:	085b      	lsrs	r3, r3, #1
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 80025b2:	21fb      	movs	r1, #251	; 0xfb
 80025b4:	5499      	strb	r1, [r3, r2]
						  break;
 80025b6:	e048      	b.n	800264a <StartDefaultTask+0x6c2>
						  case SCARA_TEST_MOTOR2_POS:
							 test_value[duty_cmd.test_key/2] = 5;
 80025b8:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80025bc:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80025c0:	085b      	lsrs	r3, r3, #1
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 80025ca:	2105      	movs	r1, #5
 80025cc:	5499      	strb	r1, [r3, r2]
						  break;
 80025ce:	e03c      	b.n	800264a <StartDefaultTask+0x6c2>
						  case SCARA_TEST_MOTOR2_NEG:
							 test_value[duty_cmd.test_key/2] = -5;
 80025d0:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80025d4:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80025d8:	085b      	lsrs	r3, r3, #1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	461a      	mov	r2, r3
 80025de:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 80025e2:	21fb      	movs	r1, #251	; 0xfb
 80025e4:	5499      	strb	r1, [r3, r2]
						  break;
 80025e6:	e030      	b.n	800264a <StartDefaultTask+0x6c2>
						  case SCARA_TEST_MOTOR3_POS:
							 test_value[duty_cmd.test_key/2] = 5;
 80025e8:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80025ec:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80025f0:	085b      	lsrs	r3, r3, #1
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 80025fa:	2105      	movs	r1, #5
 80025fc:	5499      	strb	r1, [r3, r2]
						  break;
 80025fe:	e024      	b.n	800264a <StartDefaultTask+0x6c2>
						  case SCARA_TEST_MOTOR3_NEG:
							 test_value[duty_cmd.test_key/2] = -5;
 8002600:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8002604:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002608:	085b      	lsrs	r3, r3, #1
 800260a:	b2db      	uxtb	r3, r3
 800260c:	461a      	mov	r2, r3
 800260e:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 8002612:	21fb      	movs	r1, #251	; 0xfb
 8002614:	5499      	strb	r1, [r3, r2]
						  break;
 8002616:	e018      	b.n	800264a <StartDefaultTask+0x6c2>
						  case SCARA_TEST_MOTOR4_POS:
							 test_value[duty_cmd.test_key/2] = 10;
 8002618:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800261c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002620:	085b      	lsrs	r3, r3, #1
 8002622:	b2db      	uxtb	r3, r3
 8002624:	461a      	mov	r2, r3
 8002626:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 800262a:	210a      	movs	r1, #10
 800262c:	5499      	strb	r1, [r3, r2]
						  break;
 800262e:	e00c      	b.n	800264a <StartDefaultTask+0x6c2>
						  case SCARA_TEST_MOTOR4_NEG:
							 test_value[duty_cmd.test_key/2] = -10;
 8002630:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8002634:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002638:	085b      	lsrs	r3, r3, #1
 800263a:	b2db      	uxtb	r3, r3
 800263c:	461a      	mov	r2, r3
 800263e:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 8002642:	21f6      	movs	r1, #246	; 0xf6
 8002644:	5499      	strb	r1, [r3, r2]
						  break;						  
 8002646:	e000      	b.n	800264a <StartDefaultTask+0x6c2>
						  default:
							  break;
 8002648:	bf00      	nop
						  }
					  }
					  break;
 800264a:	e07e      	b.n	800274a <StartDefaultTask+0x7c2>
				  	  {

				  	  }
				  	  break;
				  	  case SCARA_METHOD_PICK_AND_PLACE:{
				  		  memcpy(&Object[object_head_pointer].object_position, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 800264c:	f897 3935 	ldrb.w	r3, [r7, #2357]	; 0x935
 8002650:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002654:	21c8      	movs	r1, #200	; 0xc8
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	18d0      	adds	r0, r2, r3
 800265c:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8002660:	3328      	adds	r3, #40	; 0x28
 8002662:	22c0      	movs	r2, #192	; 0xc0
 8002664:	4619      	mov	r1, r3
 8002666:	f013 f9f9 	bl	8015a5c <memcpy>
				  		  Object[object_head_pointer].timer_value = (uint16_t)duty_cmd.target_point.t;
 800266a:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800266e:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8002672:	f897 5935 	ldrb.w	r5, [r7, #2357]	; 0x935
 8002676:	4618      	mov	r0, r3
 8002678:	4621      	mov	r1, r4
 800267a:	f7fe fa95 	bl	8000ba8 <__aeabi_d2uiz>
 800267e:	4603      	mov	r3, r0
 8002680:	b299      	uxth	r1, r3
 8002682:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002686:	23c8      	movs	r3, #200	; 0xc8
 8002688:	fb03 f305 	mul.w	r3, r3, r5
 800268c:	4413      	add	r3, r2
 800268e:	33c0      	adds	r3, #192	; 0xc0
 8002690:	460a      	mov	r2, r1
 8002692:	801a      	strh	r2, [r3, #0]
				  		  object_head_pointer = (object_head_pointer+1)%8;
 8002694:	f897 3935 	ldrb.w	r3, [r7, #2357]	; 0x935
 8002698:	3301      	adds	r3, #1
 800269a:	425a      	negs	r2, r3
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	f002 0207 	and.w	r2, r2, #7
 80026a4:	bf58      	it	pl
 80026a6:	4253      	negpl	r3, r2
 80026a8:	f887 3935 	strb.w	r3, [r7, #2357]	; 0x935
				  		  detail_array[0] = OBJECT_DETECTED;
 80026ac:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 80026b0:	221d      	movs	r2, #29
 80026b2:	701a      	strb	r2, [r3, #0]
						  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80026b4:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80026b8:	6899      	ldr	r1, [r3, #8]
 80026ba:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 80026be:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 80026c2:	4413      	add	r3, r2
 80026c4:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	2301      	movs	r3, #1
 80026cc:	2008      	movs	r0, #8
 80026ce:	f7ff fac5 	bl	8001c5c <commandRespond1>
 80026d2:	f8c7 091c 	str.w	r0, [r7, #2332]	; 0x91c
						  total_respond_length += respond_lenght;
 80026d6:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 80026da:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80026de:	4413      	add	r3, r2
 80026e0:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
				  	  }
				  	  break;
 80026e4:	e031      	b.n	800274a <StartDefaultTask+0x7c2>
				  	  default:
				  	  {
				  		  LOG_REPORT("CMD Error Method !!!", __LINE__);
 80026e6:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 80026ea:	4816      	ldr	r0, [pc, #88]	; (8002744 <StartDefaultTask+0x7bc>)
 80026ec:	f7ff fb06 	bl	8001cfc <LOG_REPORT>
 80026f0:	e02b      	b.n	800274a <StartDefaultTask+0x7c2>
			  	  } else {
					//   respond_lenght = commandRespond(RPD_ERROR,
					// 								duty_cmd.id_command,
					// 								"METHOD isn't correct",
					// 								(char *)respond);
					detail_array[0] = INCORRECT_METHOD;
 80026f2:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 80026f6:	2223      	movs	r2, #35	; 0x23
 80026f8:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80026fa:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80026fe:	6899      	ldr	r1, [r3, #8]
 8002700:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8002704:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8002708:	4413      	add	r3, r2
 800270a:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	2301      	movs	r3, #1
 8002712:	2007      	movs	r0, #7
 8002714:	f7ff faa2 	bl	8001c5c <commandRespond1>
 8002718:	f8c7 091c 	str.w	r0, [r7, #2332]	; 0x91c
					total_respond_length += respond_lenght;
 800271c:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 8002720:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8002724:	4413      	add	r3, r2
 8002726:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
 800272a:	e00e      	b.n	800274a <StartDefaultTask+0x7c2>
				  	  break;
 800272c:	bf00      	nop
 800272e:	e00c      	b.n	800274a <StartDefaultTask+0x7c2>
 8002730:	0801afc4 	.word	0x0801afc4
 8002734:	0801afd4 	.word	0x0801afd4
 8002738:	0801afe4 	.word	0x0801afe4
 800273c:	0801aff8 	.word	0x0801aff8
 8002740:	0801b008 	.word	0x0801b008
 8002744:	0801b01c 	.word	0x0801b01c
				  	  break;
 8002748:	bf00      	nop
			  	  }

			  }
		  isNewDuty = FALSE;
 800274a:	2300      	movs	r3, #0
 800274c:	f887 3957 	strb.w	r3, [r7, #2391]	; 0x957
	  }

	  /* 3--- Execute Phase ---*/
	  switch(current_method) {
 8002750:	f897 394f 	ldrb.w	r3, [r7, #2383]	; 0x94f
 8002754:	2b04      	cmp	r3, #4
 8002756:	f200 86a7 	bhi.w	80034a8 <StartDefaultTask+0x1520>
 800275a:	a201      	add	r2, pc, #4	; (adr r2, 8002760 <StartDefaultTask+0x7d8>)
 800275c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002760:	08002775 	.word	0x08002775
 8002764:	08002923 	.word	0x08002923
 8002768:	08002d0b 	.word	0x08002d0b
 800276c:	08002ec1 	.word	0x08002ec1
 8002770:	08002ee7 	.word	0x08002ee7
	  case SCARA_METHOD_MANUAL:
	  {
		  switch( current_key_state) {
 8002774:	f897 394b 	ldrb.w	r3, [r7, #2379]	; 0x94b
 8002778:	2b03      	cmp	r3, #3
 800277a:	f200 8692 	bhi.w	80034a2 <StartDefaultTask+0x151a>
 800277e:	a201      	add	r2, pc, #4	; (adr r2, 8002784 <StartDefaultTask+0x7fc>)
 8002780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002784:	0800291d 	.word	0x0800291d
 8002788:	08002795 	.word	0x08002795
 800278c:	08002803 	.word	0x08002803
 8002790:	080028df 	.word	0x080028df
		  case SCARA_KEY_STATE_READY:
			  /* Wait for application keyboard , do nothing*/
		  break;
		  case SCARA_KEY_STATE_INIT:
		  {
			  if (scaraKeyInit1(current_key, current_key_speed1) == SCARA_STATUS_OK) {
 8002794:	4bd6      	ldr	r3, [pc, #856]	; (8002af0 <StartDefaultTask+0xb68>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	f897 394a 	ldrb.w	r3, [r7, #2378]	; 0x94a
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f007 ff62 	bl	800a668 <scaraKeyInit1>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d127      	bne.n	80027fa <StartDefaultTask+0x872>
				  run_time = 0;
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	f04f 0400 	mov.w	r4, #0
 80027b2:	f607 1238 	addw	r2, r7, #2360	; 0x938
 80027b6:	e9c2 3400 	strd	r3, r4, [r2]
				  current_key_state = SCARA_KEY_STATE_FLOW;
 80027ba:	2302      	movs	r3, #2
 80027bc:	f887 394b 	strb.w	r3, [r7, #2379]	; 0x94b
// #endif
// 				  infor_lenght 		= commandRespond(RPD_START,
// 													  0,
// 													  (char *)position,
// 													  (char *)infor);
					detail_array[0] = NONE;
 80027c0:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 80027c4:	2224      	movs	r2, #36	; 0x24
 80027c6:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80027c8:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80027cc:	6899      	ldr	r1, [r3, #8]
 80027ce:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 80027d2:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 80027d6:	4413      	add	r3, r2
 80027d8:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	2301      	movs	r3, #1
 80027e0:	2003      	movs	r0, #3
 80027e2:	f7ff fa3b 	bl	8001c5c <commandRespond1>
 80027e6:	f8c7 091c 	str.w	r0, [r7, #2332]	; 0x91c
					total_respond_length += respond_lenght;
 80027ea:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 80027ee:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80027f2:	4413      	add	r3, r2
 80027f4:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
			  } else {
				  current_key_state = SCARA_KEY_STATE_READY;
			  }
		  }
		  break;
 80027f8:	e091      	b.n	800291e <StartDefaultTask+0x996>
				  current_key_state = SCARA_KEY_STATE_READY;
 80027fa:	2300      	movs	r3, #0
 80027fc:	f887 394b 	strb.w	r3, [r7, #2379]	; 0x94b
		  break;
 8002800:	e08d      	b.n	800291e <StartDefaultTask+0x996>
		  case SCARA_KEY_STATE_FLOW:
		  {
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 8002802:	a3b9      	add	r3, pc, #740	; (adr r3, 8002ae8 <StartDefaultTask+0xb60>)
 8002804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002808:	f607 1138 	addw	r1, r7, #2360	; 0x938
 800280c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002810:	f7fd fd3c 	bl	800028c <__adddf3>
 8002814:	4603      	mov	r3, r0
 8002816:	460c      	mov	r4, r1
 8002818:	f607 1238 	addw	r2, r7, #2360	; 0x938
 800281c:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8002820:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8002824:	ed93 0b00 	vldr	d0, [r3]
 8002828:	f007 fe10 	bl	800a44c <scaraIsFinish>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <StartDefaultTask+0x8b2>
				  current_key_state = SCARA_KEY_STATE_FINISH;// Key Done
 8002832:	2303      	movs	r3, #3
 8002834:	f887 394b 	strb.w	r3, [r7, #2379]	; 0x94b
					total_respond_length += respond_lenght;
					  LOG_REPORT("STOP KEY", __LINE__);
				  }
			  }
		  }
		  break;
 8002838:	e071      	b.n	800291e <StartDefaultTask+0x996>
				  status = scaraFlowDuty(run_time, &positionNext, positionCurrent);
 800283a:	4cae      	ldr	r4, [pc, #696]	; (8002af4 <StartDefaultTask+0xb6c>)
 800283c:	4668      	mov	r0, sp
 800283e:	f104 0308 	add.w	r3, r4, #8
 8002842:	22b8      	movs	r2, #184	; 0xb8
 8002844:	4619      	mov	r1, r3
 8002846:	f013 f909 	bl	8015a5c <memcpy>
 800284a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800284e:	48aa      	ldr	r0, [pc, #680]	; (8002af8 <StartDefaultTask+0xb70>)
 8002850:	f607 1138 	addw	r1, r7, #2360	; 0x938
 8002854:	ed91 0b00 	vldr	d0, [r1]
 8002858:	f005 fcf4 	bl	8008244 <scaraFlowDuty>
 800285c:	4603      	mov	r3, r0
 800285e:	f887 38f3 	strb.w	r3, [r7, #2291]	; 0x8f3
				  if ( SCARA_STATUS_OK == status) {
 8002862:	f897 38f3 	ldrb.w	r3, [r7, #2291]	; 0x8f3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d113      	bne.n	8002892 <StartDefaultTask+0x90a>
					  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 800286a:	4ca2      	ldr	r4, [pc, #648]	; (8002af4 <StartDefaultTask+0xb6c>)
 800286c:	4aa2      	ldr	r2, [pc, #648]	; (8002af8 <StartDefaultTask+0xb70>)
 800286e:	ab2c      	add	r3, sp, #176	; 0xb0
 8002870:	4611      	mov	r1, r2
 8002872:	22c0      	movs	r2, #192	; 0xc0
 8002874:	4618      	mov	r0, r3
 8002876:	f013 f8f1 	bl	8015a5c <memcpy>
 800287a:	4668      	mov	r0, sp
 800287c:	f104 0310 	add.w	r3, r4, #16
 8002880:	22b0      	movs	r2, #176	; 0xb0
 8002882:	4619      	mov	r1, r3
 8002884:	f013 f8ea 	bl	8015a5c <memcpy>
 8002888:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800288c:	f002 f974 	bl	8004b78 <lowlayer_computeAndWritePulse>
		  break;
 8002890:	e045      	b.n	800291e <StartDefaultTask+0x996>
					  current_key_state = SCARA_KEY_STATE_FINISH;
 8002892:	2303      	movs	r3, #3
 8002894:	f887 394b 	strb.w	r3, [r7, #2379]	; 0x94b
					detail_array[0] = status;
 8002898:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800289c:	f897 28f3 	ldrb.w	r2, [r7, #2291]	; 0x8f3
 80028a0:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80028a2:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80028a6:	6899      	ldr	r1, [r3, #8]
 80028a8:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 80028ac:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 80028b0:	4413      	add	r3, r2
 80028b2:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	2301      	movs	r3, #1
 80028ba:	2006      	movs	r0, #6
 80028bc:	f7ff f9ce 	bl	8001c5c <commandRespond1>
 80028c0:	f8c7 091c 	str.w	r0, [r7, #2332]	; 0x91c
					total_respond_length += respond_lenght;
 80028c4:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 80028c8:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80028cc:	4413      	add	r3, r2
 80028ce:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
					  LOG_REPORT("STOP KEY", __LINE__);
 80028d2:	f240 2143 	movw	r1, #579	; 0x243
 80028d6:	4889      	ldr	r0, [pc, #548]	; (8002afc <StartDefaultTask+0xb74>)
 80028d8:	f7ff fa10 	bl	8001cfc <LOG_REPORT>
		  break;
 80028dc:	e01f      	b.n	800291e <StartDefaultTask+0x996>
		  case SCARA_KEY_STATE_FINISH:
		  {
			  lowlayer_readTruePosition(&positionNext);
 80028de:	4886      	ldr	r0, [pc, #536]	; (8002af8 <StartDefaultTask+0xb70>)
 80028e0:	f001 ffba 	bl	8004858 <lowlayer_readTruePosition>
			  kinematicForward(&positionNext);
 80028e4:	4884      	ldr	r0, [pc, #528]	; (8002af8 <StartDefaultTask+0xb70>)
 80028e6:	f001 f893 	bl	8003a10 <kinematicForward>
			  current_key_state = SCARA_KEY_STATE_READY;
 80028ea:	2300      	movs	r3, #0
 80028ec:	f887 394b 	strb.w	r3, [r7, #2379]	; 0x94b
			  positionNext.t = 0;
 80028f0:	4a81      	ldr	r2, [pc, #516]	; (8002af8 <StartDefaultTask+0xb70>)
 80028f2:	f04f 0300 	mov.w	r3, #0
 80028f6:	f04f 0400 	mov.w	r4, #0
 80028fa:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
			  positionNext.total_time = 0;
 80028fe:	4a7e      	ldr	r2, [pc, #504]	; (8002af8 <StartDefaultTask+0xb70>)
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	f04f 0400 	mov.w	r4, #0
 8002908:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
			  positionNext.q = 0;
 800290c:	4a7a      	ldr	r2, [pc, #488]	; (8002af8 <StartDefaultTask+0xb70>)
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	f04f 0400 	mov.w	r4, #0
 8002916:	e9c2 3400 	strd	r3, r4, [r2]
		  }
		  break;
 800291a:	e000      	b.n	800291e <StartDefaultTask+0x996>
		  break;
 800291c:	bf00      	nop
		  }
	  }
	  break;
 800291e:	f000 bdc0 	b.w	80034a2 <StartDefaultTask+0x151a>

	  case SCARA_METHOD_SEMI_AUTO:
	  {
		  switch( current_mode) {
 8002922:	f897 394e 	ldrb.w	r3, [r7, #2382]	; 0x94e
 8002926:	2b01      	cmp	r3, #1
 8002928:	d00b      	beq.n	8002942 <StartDefaultTask+0x9ba>
 800292a:	2b02      	cmp	r3, #2
 800292c:	d066      	beq.n	80029fc <StartDefaultTask+0xa74>
 800292e:	2b00      	cmp	r3, #0
 8002930:	f040 81e4 	bne.w	8002cfc <StartDefaultTask+0xd74>
		  case SCARA_MODE_STOP:
			  {
				  current_mode 	= SCARA_MODE_DUTY;
 8002934:	2302      	movs	r3, #2
 8002936:	f887 394e 	strb.w	r3, [r7, #2382]	; 0x94e
				  current_duty_state = SCARA_DUTY_STATE_READY;
 800293a:	2300      	movs	r3, #0
 800293c:	f887 394d 	strb.w	r3, [r7, #2381]	; 0x94d
			  }
			  break;
 8002940:	e1e2      	b.n	8002d08 <StartDefaultTask+0xd80>

		  case SCARA_MODE_SCAN:
			  {
				  switch (current_scan_state) {
 8002942:	f897 394c 	ldrb.w	r3, [r7, #2380]	; 0x94c
 8002946:	2b03      	cmp	r3, #3
 8002948:	d84e      	bhi.n	80029e8 <StartDefaultTask+0xa60>
 800294a:	a201      	add	r2, pc, #4	; (adr r2, 8002950 <StartDefaultTask+0x9c8>)
 800294c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002950:	08002961 	.word	0x08002961
 8002954:	0800296d 	.word	0x0800296d
 8002958:	0800297f 	.word	0x0800297f
 800295c:	08002993 	.word	0x08002993
				  case SCARA_SCAN_STATE_INIT:
					  {
						  lowlayer_scanReset();
 8002960:	f001 fd70 	bl	8004444 <lowlayer_scanReset>
						  current_scan_state = SCARA_SCAN_STATE_HARD;
 8002964:	2301      	movs	r3, #1
 8002966:	f887 394c 	strb.w	r3, [r7, #2380]	; 0x94c
					  }
					  break;
 800296a:	e046      	b.n	80029fa <StartDefaultTask+0xa72>
				  case SCARA_SCAN_STATE_HARD:
					  {
						  if(lowlayer_scanFlow()) {
 800296c:	f001 fd9c 	bl	80044a8 <lowlayer_scanFlow>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d03e      	beq.n	80029f4 <StartDefaultTask+0xa6c>
							  current_scan_state = SCARA_SCAN_STATE_SOFT;
 8002976:	2302      	movs	r3, #2
 8002978:	f887 394c 	strb.w	r3, [r7, #2380]	; 0x94c
						  }
					  }
					  break;
 800297c:	e03a      	b.n	80029f4 <StartDefaultTask+0xa6c>
				  case SCARA_SCAN_STATE_SOFT:
					  {
						  if(lowlayer_goToSoftLimit(&positionNext)) {
 800297e:	485e      	ldr	r0, [pc, #376]	; (8002af8 <StartDefaultTask+0xb70>)
 8002980:	f001 feee 	bl	8004760 <lowlayer_goToSoftLimit>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d036      	beq.n	80029f8 <StartDefaultTask+0xa70>
							  current_scan_state = SCARA_SCAN_STATE_FINISH;
 800298a:	2303      	movs	r3, #3
 800298c:	f887 394c 	strb.w	r3, [r7, #2380]	; 0x94c
							}
					  }
					  break;
 8002990:	e032      	b.n	80029f8 <StartDefaultTask+0xa70>
				  case SCARA_SCAN_STATE_FINISH:
					  {
						  //lowlayer_readSetPosition(&positionNext);
						  lowlayer_readTruePosition(&positionNext);
 8002992:	4859      	ldr	r0, [pc, #356]	; (8002af8 <StartDefaultTask+0xb70>)
 8002994:	f001 ff60 	bl	8004858 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 8002998:	4857      	ldr	r0, [pc, #348]	; (8002af8 <StartDefaultTask+0xb70>)
 800299a:	f001 f839 	bl	8003a10 <kinematicForward>
						  current_mode 	= SCARA_MODE_DUTY;
 800299e:	2302      	movs	r3, #2
 80029a0:	f887 394e 	strb.w	r3, [r7, #2382]	; 0x94e
						  current_duty_state = SCARA_DUTY_STATE_READY;
 80029a4:	2300      	movs	r3, #0
 80029a6:	f887 394d 	strb.w	r3, [r7, #2381]	; 0x94d
						  scaraSetScanFlag();
 80029aa:	f007 fcb1 	bl	800a310 <scaraSetScanFlag>
						//   scaraPosition2String((char *)position, positionNext);
						//   infor_lenght 		= commandRespond(RPD_DONE,
						// 									 0,
						// 									(char *)position,
						// 									(char *)infor);
						detail_array[0] = NONE;
 80029ae:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 80029b2:	2224      	movs	r2, #36	; 0x24
 80029b4:	701a      	strb	r2, [r3, #0]
						respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80029b6:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80029ba:	6899      	ldr	r1, [r3, #8]
 80029bc:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 80029c0:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 80029c4:	4413      	add	r3, r2
 80029c6:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	2301      	movs	r3, #1
 80029ce:	2005      	movs	r0, #5
 80029d0:	f7ff f944 	bl	8001c5c <commandRespond1>
 80029d4:	f8c7 091c 	str.w	r0, [r7, #2332]	; 0x91c
						total_respond_length += respond_lenght;
 80029d8:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 80029dc:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80029e0:	4413      	add	r3, r2
 80029e2:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
					  }
					  break;
 80029e6:	e008      	b.n	80029fa <StartDefaultTask+0xa72>
				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 80029e8:	f44f 7123 	mov.w	r1, #652	; 0x28c
 80029ec:	4844      	ldr	r0, [pc, #272]	; (8002b00 <StartDefaultTask+0xb78>)
 80029ee:	f7ff f985 	bl	8001cfc <LOG_REPORT>
						  while(1);
 80029f2:	e7fe      	b.n	80029f2 <StartDefaultTask+0xa6a>
					  break;
 80029f4:	bf00      	nop
 80029f6:	e187      	b.n	8002d08 <StartDefaultTask+0xd80>
					  break;
 80029f8:	bf00      	nop
					  }
				  }

			  }
			  break;
 80029fa:	e185      	b.n	8002d08 <StartDefaultTask+0xd80>

		  case SCARA_MODE_DUTY:
			  {
				  switch (current_duty_state) {
 80029fc:	f897 394d 	ldrb.w	r3, [r7, #2381]	; 0x94d
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	f200 8174 	bhi.w	8002cee <StartDefaultTask+0xd66>
 8002a06:	a201      	add	r2, pc, #4	; (adr r2, 8002a0c <StartDefaultTask+0xa84>)
 8002a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0c:	08002a1d 	.word	0x08002a1d
 8002a10:	08002a21 	.word	0x08002a21
 8002a14:	08002b9d 	.word	0x08002b9d
 8002a18:	08002c79 	.word	0x08002c79
				  case SCARA_DUTY_STATE_READY:
					  {
						  // Do nothing();
						  __NOP();
 8002a1c:	bf00      	nop

					  }
				  break;
 8002a1e:	e16c      	b.n	8002cfa <StartDefaultTask+0xd72>

				  case SCARA_DUTY_STATE_INIT:
					  {

						  SCARA_StatusTypeDef status1, status2;
						  status1 = scaraInitDuty(duty_cmd);
 8002a20:	f507 64e4 	add.w	r4, r7, #1824	; 0x720
 8002a24:	4668      	mov	r0, sp
 8002a26:	f104 0310 	add.w	r3, r4, #16
 8002a2a:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8002a2e:	4619      	mov	r1, r3
 8002a30:	f013 f814 	bl	8015a5c <memcpy>
 8002a34:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a38:	f002 fc32 	bl	80052a0 <scaraInitDuty>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f887 38f5 	strb.w	r3, [r7, #2293]	; 0x8f5
						  if ( SCARA_STATUS_OK == status1) {
 8002a42:	f897 38f5 	ldrb.w	r3, [r7, #2293]	; 0x8f5
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f040 8082 	bne.w	8002b50 <StartDefaultTask+0xbc8>
							  status2 = scaraTestDuty();
 8002a4c:	f007 fbe4 	bl	800a218 <scaraTestDuty>
 8002a50:	4603      	mov	r3, r0
 8002a52:	f887 38f4 	strb.w	r3, [r7, #2292]	; 0x8f4
							  if (SCARA_STATUS_OK == status2) {
 8002a56:	f897 38f4 	ldrb.w	r3, [r7, #2292]	; 0x8f4
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d152      	bne.n	8002b04 <StartDefaultTask+0xb7c>
							  current_duty_state = SCARA_DUTY_STATE_FLOW;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	f887 394d 	strb.w	r3, [r7, #2381]	; 0x94d
							  //current_duty_state = SCARA_DUTY_STATE_FINISH;
							  run_time			= 0;
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	f04f 0400 	mov.w	r4, #0
 8002a6c:	f607 1238 	addw	r2, r7, #2360	; 0x938
 8002a70:	e9c2 3400 	strd	r3, r4, [r2]
							  // Respond
							  detail_array[0] = status1;
 8002a74:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 8002a78:	f897 28f5 	ldrb.w	r2, [r7, #2293]	; 0x8f5
 8002a7c:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002a7e:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8002a82:	6899      	ldr	r1, [r3, #8]
 8002a84:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8002a88:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	2301      	movs	r3, #1
 8002a96:	2008      	movs	r0, #8
 8002a98:	f7ff f8e0 	bl	8001c5c <commandRespond1>
 8002a9c:	f8c7 091c 	str.w	r0, [r7, #2332]	; 0x91c
							  total_respond_length += respond_lenght;
 8002aa0:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 8002aa4:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
							  detail_array[0] = NONE;
 8002aae:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 8002ab2:	2224      	movs	r2, #36	; 0x24
 8002ab4:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002ab6:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8002aba:	6899      	ldr	r1, [r3, #8]
 8002abc:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8002ac0:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	2301      	movs	r3, #1
 8002ace:	2003      	movs	r0, #3
 8002ad0:	f7ff f8c4 	bl	8001c5c <commandRespond1>
 8002ad4:	f8c7 091c 	str.w	r0, [r7, #2332]	; 0x91c
							  total_respond_length += respond_lenght;
 8002ad8:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 8002adc:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
							total_respond_length += respond_lenght;
							  LOG_REPORT("INIT FAIL", __LINE__);
						  }
					  }
				  break;
 8002ae6:	e108      	b.n	8002cfa <StartDefaultTask+0xd72>
 8002ae8:	40000000 	.word	0x40000000
 8002aec:	3f847ae1 	.word	0x3f847ae1
 8002af0:	20000000 	.word	0x20000000
 8002af4:	200066b8 	.word	0x200066b8
 8002af8:	20006838 	.word	0x20006838
 8002afc:	0801b034 	.word	0x0801b034
 8002b00:	0801b040 	.word	0x0801b040
								  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002b04:	2300      	movs	r3, #0
 8002b06:	f887 394d 	strb.w	r3, [r7, #2381]	; 0x94d
								  LOG_REPORT("TEST FAIL", __LINE__);
 8002b0a:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8002b0e:	48b0      	ldr	r0, [pc, #704]	; (8002dd0 <StartDefaultTask+0xe48>)
 8002b10:	f7ff f8f4 	bl	8001cfc <LOG_REPORT>
								detail_array[0] = status2;
 8002b14:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 8002b18:	f897 28f4 	ldrb.w	r2, [r7, #2292]	; 0x8f4
 8002b1c:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002b1e:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8002b22:	6899      	ldr	r1, [r3, #8]
 8002b24:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8002b28:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	2301      	movs	r3, #1
 8002b36:	2007      	movs	r0, #7
 8002b38:	f7ff f890 	bl	8001c5c <commandRespond1>
 8002b3c:	f8c7 091c 	str.w	r0, [r7, #2332]	; 0x91c
								total_respond_length += respond_lenght;
 8002b40:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 8002b44:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8002b48:	4413      	add	r3, r2
 8002b4a:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
				  break;
 8002b4e:	e0d4      	b.n	8002cfa <StartDefaultTask+0xd72>
							  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f887 394d 	strb.w	r3, [r7, #2381]	; 0x94d
							detail_array[0] = status1;
 8002b56:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 8002b5a:	f897 28f5 	ldrb.w	r2, [r7, #2293]	; 0x8f5
 8002b5e:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002b60:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8002b64:	6899      	ldr	r1, [r3, #8]
 8002b66:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8002b6a:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8002b6e:	4413      	add	r3, r2
 8002b70:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	2301      	movs	r3, #1
 8002b78:	2007      	movs	r0, #7
 8002b7a:	f7ff f86f 	bl	8001c5c <commandRespond1>
 8002b7e:	f8c7 091c 	str.w	r0, [r7, #2332]	; 0x91c
							total_respond_length += respond_lenght;
 8002b82:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 8002b86:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
							  LOG_REPORT("INIT FAIL", __LINE__);
 8002b90:	f240 21c3 	movw	r1, #707	; 0x2c3
 8002b94:	488f      	ldr	r0, [pc, #572]	; (8002dd4 <StartDefaultTask+0xe4c>)
 8002b96:	f7ff f8b1 	bl	8001cfc <LOG_REPORT>
				  break;
 8002b9a:	e0ae      	b.n	8002cfa <StartDefaultTask+0xd72>

				  case SCARA_DUTY_STATE_FLOW:
					  {
						  SCARA_StatusTypeDef status;
						  // Increase run time
						  run_time += T_SAMPLING;
 8002b9c:	a388      	add	r3, pc, #544	; (adr r3, 8002dc0 <StartDefaultTask+0xe38>)
 8002b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba2:	f607 1138 	addw	r1, r7, #2360	; 0x938
 8002ba6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002baa:	f7fd fb6f 	bl	800028c <__adddf3>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	460c      	mov	r4, r1
 8002bb2:	f607 1238 	addw	r2, r7, #2360	; 0x938
 8002bb6:	e9c2 3400 	strd	r3, r4, [r2]
						  // Check Time Out
						  if (scaraIsFinish(run_time)) {
 8002bba:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8002bbe:	ed93 0b00 	vldr	d0, [r3]
 8002bc2:	f007 fc43 	bl	800a44c <scaraIsFinish>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <StartDefaultTask+0xc4c>
							  current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 8002bcc:	2303      	movs	r3, #3
 8002bce:	f887 394d 	strb.w	r3, [r7, #2381]	; 0x94d
								total_respond_length += respond_lenght;
								  LOG_REPORT("STOP DUTY", __LINE__);
							  }
						  }
					  }
				  break;
 8002bd2:	e092      	b.n	8002cfa <StartDefaultTask+0xd72>
							  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8002bd4:	4c80      	ldr	r4, [pc, #512]	; (8002dd8 <StartDefaultTask+0xe50>)
 8002bd6:	4668      	mov	r0, sp
 8002bd8:	f104 0308 	add.w	r3, r4, #8
 8002bdc:	22b8      	movs	r2, #184	; 0xb8
 8002bde:	4619      	mov	r1, r3
 8002be0:	f012 ff3c 	bl	8015a5c <memcpy>
 8002be4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002be8:	487c      	ldr	r0, [pc, #496]	; (8002ddc <StartDefaultTask+0xe54>)
 8002bea:	f607 1138 	addw	r1, r7, #2360	; 0x938
 8002bee:	ed91 0b00 	vldr	d0, [r1]
 8002bf2:	f005 fb27 	bl	8008244 <scaraFlowDuty>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	f887 38f6 	strb.w	r3, [r7, #2294]	; 0x8f6
							  if ( SCARA_STATUS_OK == status) {
 8002bfc:	f897 38f6 	ldrb.w	r3, [r7, #2294]	; 0x8f6
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d113      	bne.n	8002c2c <StartDefaultTask+0xca4>
								  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8002c04:	4c74      	ldr	r4, [pc, #464]	; (8002dd8 <StartDefaultTask+0xe50>)
 8002c06:	4a75      	ldr	r2, [pc, #468]	; (8002ddc <StartDefaultTask+0xe54>)
 8002c08:	ab2c      	add	r3, sp, #176	; 0xb0
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	22c0      	movs	r2, #192	; 0xc0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f012 ff24 	bl	8015a5c <memcpy>
 8002c14:	4668      	mov	r0, sp
 8002c16:	f104 0310 	add.w	r3, r4, #16
 8002c1a:	22b0      	movs	r2, #176	; 0xb0
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	f012 ff1d 	bl	8015a5c <memcpy>
 8002c22:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c26:	f001 ffa7 	bl	8004b78 <lowlayer_computeAndWritePulse>
				  break;
 8002c2a:	e066      	b.n	8002cfa <StartDefaultTask+0xd72>
								  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	f887 394d 	strb.w	r3, [r7, #2381]	; 0x94d
								detail_array[0] = status;
 8002c32:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 8002c36:	f897 28f6 	ldrb.w	r2, [r7, #2294]	; 0x8f6
 8002c3a:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002c3c:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8002c40:	6899      	ldr	r1, [r3, #8]
 8002c42:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8002c46:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	2301      	movs	r3, #1
 8002c54:	2006      	movs	r0, #6
 8002c56:	f7ff f801 	bl	8001c5c <commandRespond1>
 8002c5a:	f8c7 091c 	str.w	r0, [r7, #2332]	; 0x91c
								total_respond_length += respond_lenght;
 8002c5e:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 8002c62:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8002c66:	4413      	add	r3, r2
 8002c68:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
								  LOG_REPORT("STOP DUTY", __LINE__);
 8002c6c:	f240 21db 	movw	r1, #731	; 0x2db
 8002c70:	485b      	ldr	r0, [pc, #364]	; (8002de0 <StartDefaultTask+0xe58>)
 8002c72:	f7ff f843 	bl	8001cfc <LOG_REPORT>
				  break;
 8002c76:	e040      	b.n	8002cfa <StartDefaultTask+0xd72>

				  case SCARA_DUTY_STATE_FINISH:
					  {
						  lowlayer_readTruePosition(&positionNext);
 8002c78:	4858      	ldr	r0, [pc, #352]	; (8002ddc <StartDefaultTask+0xe54>)
 8002c7a:	f001 fded 	bl	8004858 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 8002c7e:	4857      	ldr	r0, [pc, #348]	; (8002ddc <StartDefaultTask+0xe54>)
 8002c80:	f000 fec6 	bl	8003a10 <kinematicForward>
						  current_duty_state = SCARA_DUTY_STATE_READY;
 8002c84:	2300      	movs	r3, #0
 8002c86:	f887 394d 	strb.w	r3, [r7, #2381]	; 0x94d
						  positionNext.t = 0;
 8002c8a:	4a54      	ldr	r2, [pc, #336]	; (8002ddc <StartDefaultTask+0xe54>)
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	f04f 0400 	mov.w	r4, #0
 8002c94:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
						  positionNext.total_time = 0;
 8002c98:	4a50      	ldr	r2, [pc, #320]	; (8002ddc <StartDefaultTask+0xe54>)
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	f04f 0400 	mov.w	r4, #0
 8002ca2:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
						  positionNext.q = 0;
 8002ca6:	4a4d      	ldr	r2, [pc, #308]	; (8002ddc <StartDefaultTask+0xe54>)
 8002ca8:	f04f 0300 	mov.w	r3, #0
 8002cac:	f04f 0400 	mov.w	r4, #0
 8002cb0:	e9c2 3400 	strd	r3, r4, [r2]
						  // Done Inform

					detail_array[0] = NONE;
 8002cb4:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 8002cb8:	2224      	movs	r2, #36	; 0x24
 8002cba:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002cbc:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8002cc0:	6899      	ldr	r1, [r3, #8]
 8002cc2:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8002cc6:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8002cca:	4413      	add	r3, r2
 8002ccc:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	2005      	movs	r0, #5
 8002cd6:	f7fe ffc1 	bl	8001c5c <commandRespond1>
 8002cda:	f8c7 091c 	str.w	r0, [r7, #2332]	; 0x91c
					total_respond_length += respond_lenght;
 8002cde:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 8002ce2:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
					  }
				  break;
 8002cec:	e005      	b.n	8002cfa <StartDefaultTask+0xd72>

				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8002cee:	f240 21f3 	movw	r1, #755	; 0x2f3
 8002cf2:	483c      	ldr	r0, [pc, #240]	; (8002de4 <StartDefaultTask+0xe5c>)
 8002cf4:	f7ff f802 	bl	8001cfc <LOG_REPORT>
						  while(1);
 8002cf8:	e7fe      	b.n	8002cf8 <StartDefaultTask+0xd70>
					  }
				  }

			  }
			  break;
 8002cfa:	e005      	b.n	8002d08 <StartDefaultTask+0xd80>

		  default:
			  {
				  LOG_REPORT("ERROR MODE !!!", __LINE__);
 8002cfc:	f240 21fd 	movw	r1, #765	; 0x2fd
 8002d00:	4839      	ldr	r0, [pc, #228]	; (8002de8 <StartDefaultTask+0xe60>)
 8002d02:	f7fe fffb 	bl	8001cfc <LOG_REPORT>
				  while(1);
 8002d06:	e7fe      	b.n	8002d06 <StartDefaultTask+0xd7e>
			  }
		  }
	  }
	  break;
 8002d08:	e3ce      	b.n	80034a8 <StartDefaultTask+0x1520>

	  case SCARA_METHOD_GCODE:
	  {
		  switch (current_duty_state)
 8002d0a:	f897 394d 	ldrb.w	r3, [r7, #2381]	; 0x94d
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	f200 80d4 	bhi.w	8002ebc <StartDefaultTask+0xf34>
 8002d14:	a201      	add	r2, pc, #4	; (adr r2, 8002d1c <StartDefaultTask+0xd94>)
 8002d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1a:	bf00      	nop
 8002d1c:	08002d2d 	.word	0x08002d2d
 8002d20:	08002d35 	.word	0x08002d35
 8002d24:	08002ebd 	.word	0x08002ebd
 8002d28:	08002ebd 	.word	0x08002ebd
		  {
		  case SCARA_DUTY_STATE_READY:{
			  run_point = 1;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
		  }
		  break;
 8002d32:	e0c4      	b.n	8002ebe <StartDefaultTask+0xf36>
		  case SCARA_DUTY_STATE_INIT:{
			  duty_cmd.target_point.x = (double)Gcode_Cor[run_point].X * COR_INVERSE_SCALE;
 8002d34:	492d      	ldr	r1, [pc, #180]	; (8002dec <StartDefaultTask+0xe64>)
 8002d36:	f8d7 2924 	ldr.w	r2, [r7, #2340]	; 0x924
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	4413      	add	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	440b      	add	r3, r1
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd fbec 	bl	8000524 <__aeabi_i2d>
 8002d4c:	a31e      	add	r3, pc, #120	; (adr r3, 8002dc8 <StartDefaultTask+0xe40>)
 8002d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d52:	f7fd fc51 	bl	80005f8 <__aeabi_dmul>
 8002d56:	4603      	mov	r3, r0
 8002d58:	460c      	mov	r4, r1
 8002d5a:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8002d5e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			  duty_cmd.target_point.y = (double)Gcode_Cor[run_point].Y * COR_INVERSE_SCALE;
 8002d62:	4922      	ldr	r1, [pc, #136]	; (8002dec <StartDefaultTask+0xe64>)
 8002d64:	f8d7 2924 	ldr.w	r2, [r7, #2340]	; 0x924
 8002d68:	4613      	mov	r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	4413      	add	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	440b      	add	r3, r1
 8002d72:	3304      	adds	r3, #4
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fd fbd4 	bl	8000524 <__aeabi_i2d>
 8002d7c:	a312      	add	r3, pc, #72	; (adr r3, 8002dc8 <StartDefaultTask+0xe40>)
 8002d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d82:	f7fd fc39 	bl	80005f8 <__aeabi_dmul>
 8002d86:	4603      	mov	r3, r0
 8002d88:	460c      	mov	r4, r1
 8002d8a:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8002d8e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			  if(Gcode_Cor[run_point].type_define[1] == UP_Z){
 8002d92:	4916      	ldr	r1, [pc, #88]	; (8002dec <StartDefaultTask+0xe64>)
 8002d94:	f8d7 2924 	ldr.w	r2, [r7, #2340]	; 0x924
 8002d98:	4613      	mov	r3, r2
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	4413      	add	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	440b      	add	r3, r1
 8002da2:	3315      	adds	r3, #21
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d124      	bne.n	8002df4 <StartDefaultTask+0xe6c>
				  duty_cmd.target_point.z = up_z_height;
 8002daa:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <StartDefaultTask+0xe68>)
 8002dac:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002db0:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8002db4:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
 8002db8:	e023      	b.n	8002e02 <StartDefaultTask+0xe7a>
 8002dba:	bf00      	nop
 8002dbc:	f3af 8000 	nop.w
 8002dc0:	40000000 	.word	0x40000000
 8002dc4:	3f847ae1 	.word	0x3f847ae1
 8002dc8:	a0000000 	.word	0xa0000000
 8002dcc:	3eb0c6f7 	.word	0x3eb0c6f7
 8002dd0:	0801b050 	.word	0x0801b050
 8002dd4:	0801b05c 	.word	0x0801b05c
 8002dd8:	200066b8 	.word	0x200066b8
 8002ddc:	20006838 	.word	0x20006838
 8002de0:	0801b068 	.word	0x0801b068
 8002de4:	0801b040 	.word	0x0801b040
 8002de8:	0801b074 	.word	0x0801b074
 8002dec:	20004d74 	.word	0x20004d74
 8002df0:	20004d60 	.word	0x20004d60
			  }else{
				  duty_cmd.target_point.z = down_z_height;
 8002df4:	4bbe      	ldr	r3, [pc, #760]	; (80030f0 <StartDefaultTask+0x1168>)
 8002df6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002dfa:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8002dfe:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			  }
			  duty_cmd.target_point.roll = 0;
 8002e02:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	f04f 0400 	mov.w	r4, #0
 8002e0e:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			  duty_cmd.v_factor = (double)Gcode_Cor[run_point].F * COR_INVERSE_SCALE / V_MOVE_MAX;
 8002e12:	49b8      	ldr	r1, [pc, #736]	; (80030f4 <StartDefaultTask+0x116c>)
 8002e14:	f8d7 2924 	ldr.w	r2, [r7, #2340]	; 0x924
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	440b      	add	r3, r1
 8002e22:	3308      	adds	r3, #8
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fd fb7c 	bl	8000524 <__aeabi_i2d>
 8002e2c:	a3a6      	add	r3, pc, #664	; (adr r3, 80030c8 <StartDefaultTask+0x1140>)
 8002e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e32:	f7fd fbe1 	bl	80005f8 <__aeabi_dmul>
 8002e36:	4603      	mov	r3, r0
 8002e38:	460c      	mov	r4, r1
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	4bad      	ldr	r3, [pc, #692]	; (80030f8 <StartDefaultTask+0x1170>)
 8002e44:	f7fd fd02 	bl	800084c <__aeabi_ddiv>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	460c      	mov	r4, r1
 8002e4c:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8002e50:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			  duty_cmd.trajec_type = DUTY_TRAJECTORY_LINEAR;
 8002e54:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8002e58:	2202      	movs	r2, #2
 8002e5a:	741a      	strb	r2, [r3, #16]
			  duty_cmd.coordinate_type = DUTY_COORDINATES_ABS;
 8002e5c:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8002e60:	2200      	movs	r2, #0
 8002e62:	731a      	strb	r2, [r3, #12]
			  if(Gcode_Cor[run_point].type_define[0] == LINEAR_TYPE){
 8002e64:	49a3      	ldr	r1, [pc, #652]	; (80030f4 <StartDefaultTask+0x116c>)
 8002e66:	f8d7 2924 	ldr.w	r2, [r7, #2340]	; 0x924
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	4413      	add	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	440b      	add	r3, r1
 8002e74:	3314      	adds	r3, #20
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d104      	bne.n	8002e86 <StartDefaultTask+0xefe>
				  duty_cmd.path_type = DUTY_PATH_LINE;
 8002e7c:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8002e80:	2200      	movs	r2, #0
 8002e82:	739a      	strb	r2, [r3, #14]
 8002e84:	e011      	b.n	8002eaa <StartDefaultTask+0xf22>
			  }else if(Gcode_Cor[run_point].type_define[0] == ARC_AW_TYPE){
 8002e86:	499b      	ldr	r1, [pc, #620]	; (80030f4 <StartDefaultTask+0x116c>)
 8002e88:	f8d7 2924 	ldr.w	r2, [r7, #2340]	; 0x924
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	4413      	add	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	440b      	add	r3, r1
 8002e96:	3314      	adds	r3, #20
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d005      	beq.n	8002eaa <StartDefaultTask+0xf22>

			  }else if(Gcode_Cor[run_point].type_define[0] == ARC_CW_TYPE){
 8002e9e:	f8d7 2924 	ldr.w	r2, [r7, #2340]	; 0x924
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	4413      	add	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3

			  }
			  duty_cmd.path_type = DUTY_PATH_LINE;
 8002eaa:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8002eae:	2200      	movs	r2, #0
 8002eb0:	739a      	strb	r2, [r3, #14]
			  duty_cmd.space_type = DUTY_SPACE_TASK;
 8002eb2:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	735a      	strb	r2, [r3, #13]

		  }
		  break;
 8002eba:	e000      	b.n	8002ebe <StartDefaultTask+0xf36>

		  }
		  break;
		  
		  default:
			  break;
 8002ebc:	bf00      	nop
		  }
	  }

	  break;
 8002ebe:	e2f3      	b.n	80034a8 <StartDefaultTask+0x1520>
	  case SCARA_METHOD_TEST:
	  {
		  lowlayer_writePulse(test_value[0], test_value[1], test_value[2], test_value[3]);
 8002ec0:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 8002ec4:	f993 0000 	ldrsb.w	r0, [r3]
 8002ec8:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 8002ecc:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8002ed0:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 8002ed4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8002ed8:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 8002edc:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002ee0:	f001 ffee 	bl	8004ec0 <lowlayer_writePulse>
	  }
	  break;
 8002ee4:	e2e0      	b.n	80034a8 <StartDefaultTask+0x1520>


	  case SCARA_METHOD_PICK_AND_PLACE:
	  {
		  switch(current_duty_state) {
 8002ee6:	f897 394d 	ldrb.w	r3, [r7, #2381]	; 0x94d
 8002eea:	3b01      	subs	r3, #1
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	f200 82da 	bhi.w	80034a6 <StartDefaultTask+0x151e>
 8002ef2:	a201      	add	r2, pc, #4	; (adr r2, 8002ef8 <StartDefaultTask+0xf70>)
 8002ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef8:	08002f09 	.word	0x08002f09
 8002efc:	080033b1 	.word	0x080033b1
 8002f00:	08003497 	.word	0x08003497
 8002f04:	08002f41 	.word	0x08002f41
		  case SCARA_DUTY_STATE_INIT:{
			  //Object = calloc(8, sizeof(SCARA_Pick_And_Place_Package));
			  HAL_TIM_Base_Start(&htim2);
 8002f08:	487c      	ldr	r0, [pc, #496]	; (80030fc <StartDefaultTask+0x1174>)
 8002f0a:	f00a fec2 	bl	800dc92 <HAL_TIM_Base_Start>
			  object_tail_pointer = 0;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f887 3936 	strb.w	r3, [r7, #2358]	; 0x936
			  object_head_pointer = 0;
 8002f14:	2300      	movs	r3, #0
 8002f16:	f887 3935 	strb.w	r3, [r7, #2357]	; 0x935
			  operation_state = SCARA_MOVE_TO_TARGET;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f887 3937 	strb.w	r3, [r7, #2359]	; 0x937
			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8002f20:	2304      	movs	r3, #4
 8002f22:	f887 394d 	strb.w	r3, [r7, #2381]	; 0x94d
			  duty_cmd.robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8002f26:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8002f2a:	2204      	movs	r2, #4
 8002f2c:	705a      	strb	r2, [r3, #1]
			  duty_cmd.path_type = DUTY_PATH_LINE;
 8002f2e:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8002f32:	2200      	movs	r2, #0
 8002f34:	739a      	strb	r2, [r3, #14]
			  duty_cmd.space_type = DUTY_SPACE_TASK;
 8002f36:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	735a      	strb	r2, [r3, #13]
		  }
		  break;
 8002f3e:	e2af      	b.n	80034a0 <StartDefaultTask+0x1518>

		  case SCARA_DUTY_STATE_OPERATION:{
			  if(object_tail_pointer != object_head_pointer){
 8002f40:	f897 2936 	ldrb.w	r2, [r7, #2358]	; 0x936
 8002f44:	f897 3935 	ldrb.w	r3, [r7, #2357]	; 0x935
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	f000 82a6 	beq.w	800349a <StartDefaultTask+0x1512>
				  switch(operation_state){
 8002f4e:	f897 3937 	ldrb.w	r3, [r7, #2359]	; 0x937
 8002f52:	2b07      	cmp	r3, #7
 8002f54:	f200 818d 	bhi.w	8003272 <StartDefaultTask+0x12ea>
 8002f58:	a201      	add	r2, pc, #4	; (adr r2, 8002f60 <StartDefaultTask+0xfd8>)
 8002f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5e:	bf00      	nop
 8002f60:	08002f81 	.word	0x08002f81
 8002f64:	08003051 	.word	0x08003051
 8002f68:	0800307f 	.word	0x0800307f
 8002f6c:	08003095 	.word	0x08003095
 8002f70:	08003115 	.word	0x08003115
 8002f74:	08003201 	.word	0x08003201
 8002f78:	0800322f 	.word	0x0800322f
 8002f7c:	08003245 	.word	0x08003245
					  case SCARA_MOVE_TO_TARGET:{
						  double wait_time = TIMER_SCALE*((uint16_t)(TIM2->CNT - Object[object_tail_pointer].timer_value)) + MOVE_TIME + PUT_DOWN_TIME_ON_OBJECT;
 8002f80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	f897 3936 	ldrb.w	r3, [r7, #2358]	; 0x936
 8002f8c:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002f90:	20c8      	movs	r0, #200	; 0xc8
 8002f92:	fb00 f303 	mul.w	r3, r0, r3
 8002f96:	440b      	add	r3, r1
 8002f98:	33c0      	adds	r3, #192	; 0xc0
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	ee07 3a90 	vmov	s15, r3
 8002fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fa8:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8003100 <StartDefaultTask+0x1178>
 8002fac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fb0:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8003104 <StartDefaultTask+0x117c>
 8002fb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fb8:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003108 <StartDefaultTask+0x1180>
 8002fbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fc0:	ee17 0a90 	vmov	r0, s15
 8002fc4:	f7fd fac0 	bl	8000548 <__aeabi_f2d>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	460c      	mov	r4, r1
 8002fcc:	f607 02f8 	addw	r2, r7, #2296	; 0x8f8
 8002fd0:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.y -= wait_time*conveyor_speed;
 8002fd4:	f897 3936 	ldrb.w	r3, [r7, #2358]	; 0x936
 8002fd8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002fdc:	21c8      	movs	r1, #200	; 0xc8
 8002fde:	fb01 f303 	mul.w	r3, r1, r3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3350      	adds	r3, #80	; 0x50
 8002fe6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002fea:	4b48      	ldr	r3, [pc, #288]	; (800310c <StartDefaultTask+0x1184>)
 8002fec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ff0:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8002ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff8:	f7fd fafe 	bl	80005f8 <__aeabi_dmul>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	f897 6936 	ldrb.w	r6, [r7, #2358]	; 0x936
 8003004:	4620      	mov	r0, r4
 8003006:	4629      	mov	r1, r5
 8003008:	f7fd f93e 	bl	8000288 <__aeabi_dsub>
 800300c:	4603      	mov	r3, r0
 800300e:	460c      	mov	r4, r1
 8003010:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003014:	22c8      	movs	r2, #200	; 0xc8
 8003016:	fb02 f206 	mul.w	r2, r2, r6
 800301a:	440a      	add	r2, r1
 800301c:	3250      	adds	r2, #80	; 0x50
 800301e:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003022:	f897 3936 	ldrb.w	r3, [r7, #2358]	; 0x936
 8003026:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800302a:	21c8      	movs	r1, #200	; 0xc8
 800302c:	fb01 f303 	mul.w	r3, r1, r3
 8003030:	4413      	add	r3, r2
 8003032:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8003036:	a426      	add	r4, pc, #152	; (adr r4, 80030d0 <StartDefaultTask+0x1148>)
 8003038:	e9d4 3400 	ldrd	r3, r4, [r4]
 800303c:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = MOVE_TIME;
 8003040:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003044:	4c32      	ldr	r4, [pc, #200]	; (8003110 <StartDefaultTask+0x1188>)
 8003046:	f607 1228 	addw	r2, r7, #2344	; 0x928
 800304a:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 800304e:	e110      	b.n	8003272 <StartDefaultTask+0x12ea>

					  case SCARA_MOVE_DOWN_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_OBJECT;
 8003050:	f897 3936 	ldrb.w	r3, [r7, #2358]	; 0x936
 8003054:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003058:	21c8      	movs	r1, #200	; 0xc8
 800305a:	fb01 f303 	mul.w	r3, r1, r3
 800305e:	4413      	add	r3, r2
 8003060:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8003064:	a41c      	add	r4, pc, #112	; (adr r4, 80030d8 <StartDefaultTask+0x1150>)
 8003066:	e9d4 3400 	ldrd	r3, r4, [r4]
 800306a:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = PUT_DOWN_TIME_ON_OBJECT;
 800306e:	a41c      	add	r4, pc, #112	; (adr r4, 80030e0 <StartDefaultTask+0x1158>)
 8003070:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003074:	f607 1228 	addw	r2, r7, #2344	; 0x928
 8003078:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 800307c:	e0f9      	b.n	8003272 <StartDefaultTask+0x12ea>
					  case SCARA_ATTACH:{
						  state_time = ATTACH_TIME;
 800307e:	a41a      	add	r4, pc, #104	; (adr r4, 80030e8 <StartDefaultTask+0x1160>)
 8003080:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003084:	f607 1228 	addw	r2, r7, #2344	; 0x928
 8003088:	e9c2 3400 	strd	r3, r4, [r2]
						  scaraSetOutput(1);
 800308c:	2001      	movs	r0, #1
 800308e:	f007 f94b 	bl	800a328 <scaraSetOutput>
					  }
					  break;
 8003092:	e0ee      	b.n	8003272 <StartDefaultTask+0x12ea>
					  case SCARA_MOVE_UP_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003094:	f897 3936 	ldrb.w	r3, [r7, #2358]	; 0x936
 8003098:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800309c:	21c8      	movs	r1, #200	; 0xc8
 800309e:	fb01 f303 	mul.w	r3, r1, r3
 80030a2:	4413      	add	r3, r2
 80030a4:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80030a8:	a409      	add	r4, pc, #36	; (adr r4, 80030d0 <StartDefaultTask+0x1148>)
 80030aa:	e9d4 3400 	ldrd	r3, r4, [r4]
 80030ae:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = PICK_UP_TIME_ON_OBJECT;
 80030b2:	a40b      	add	r4, pc, #44	; (adr r4, 80030e0 <StartDefaultTask+0x1158>)
 80030b4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80030b8:	f607 1228 	addw	r2, r7, #2344	; 0x928
 80030bc:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 80030c0:	e0d7      	b.n	8003272 <StartDefaultTask+0x12ea>
 80030c2:	bf00      	nop
 80030c4:	f3af 8000 	nop.w
 80030c8:	a0000000 	.word	0xa0000000
 80030cc:	3eb0c6f7 	.word	0x3eb0c6f7
 80030d0:	00000000 	.word	0x00000000
 80030d4:	40606000 	.word	0x40606000
 80030d8:	00000000 	.word	0x00000000
 80030dc:	405fa000 	.word	0x405fa000
 80030e0:	40000000 	.word	0x40000000
 80030e4:	3fe33333 	.word	0x3fe33333
 80030e8:	40000000 	.word	0x40000000
 80030ec:	3f847ae1 	.word	0x3f847ae1
 80030f0:	20004d68 	.word	0x20004d68
 80030f4:	20004d74 	.word	0x20004d74
 80030f8:	40877000 	.word	0x40877000
 80030fc:	20006938 	.word	0x20006938
 8003100:	399c09bf 	.word	0x399c09bf
 8003104:	3f99999a 	.word	0x3f99999a
 8003108:	3f19999a 	.word	0x3f19999a
 800310c:	20000ba0 	.word	0x20000ba0
 8003110:	3ff33333 	.word	0x3ff33333
					  case SCARA_MOVE_TO_SLOT :{

						  Object[object_tail_pointer].object_position.x = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].posx;
 8003114:	f897 3936 	ldrb.w	r3, [r7, #2358]	; 0x936
 8003118:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800311c:	21c8      	movs	r1, #200	; 0xc8
 800311e:	fb01 f303 	mul.w	r3, r1, r3
 8003122:	4413      	add	r3, r2
 8003124:	33b8      	adds	r3, #184	; 0xb8
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f897 2936 	ldrb.w	r2, [r7, #2358]	; 0x936
 800312e:	f107 0118 	add.w	r1, r7, #24
 8003132:	4603      	mov	r3, r0
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	4403      	add	r3, r0
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	440b      	add	r3, r1
 800313c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003140:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003144:	20c8      	movs	r0, #200	; 0xc8
 8003146:	fb00 f202 	mul.w	r2, r0, r2
 800314a:	440a      	add	r2, r1
 800314c:	3248      	adds	r2, #72	; 0x48
 800314e:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.y = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].posy;
 8003152:	f897 3936 	ldrb.w	r3, [r7, #2358]	; 0x936
 8003156:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800315a:	21c8      	movs	r1, #200	; 0xc8
 800315c:	fb01 f303 	mul.w	r3, r1, r3
 8003160:	4413      	add	r3, r2
 8003162:	33b8      	adds	r3, #184	; 0xb8
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f897 2936 	ldrb.w	r2, [r7, #2358]	; 0x936
 800316c:	f107 0118 	add.w	r1, r7, #24
 8003170:	4603      	mov	r3, r0
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4403      	add	r3, r0
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	440b      	add	r3, r1
 800317a:	3308      	adds	r3, #8
 800317c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003180:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003184:	20c8      	movs	r0, #200	; 0xc8
 8003186:	fb00 f202 	mul.w	r2, r0, r2
 800318a:	440a      	add	r2, r1
 800318c:	3250      	adds	r2, #80	; 0x50
 800318e:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.roll = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].roll;
 8003192:	f897 3936 	ldrb.w	r3, [r7, #2358]	; 0x936
 8003196:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800319a:	21c8      	movs	r1, #200	; 0xc8
 800319c:	fb01 f303 	mul.w	r3, r1, r3
 80031a0:	4413      	add	r3, r2
 80031a2:	33b8      	adds	r3, #184	; 0xb8
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f897 2936 	ldrb.w	r2, [r7, #2358]	; 0x936
 80031ac:	f107 0118 	add.w	r1, r7, #24
 80031b0:	4603      	mov	r3, r0
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	4403      	add	r3, r0
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	440b      	add	r3, r1
 80031ba:	3310      	adds	r3, #16
 80031bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80031c0:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80031c4:	20c8      	movs	r0, #200	; 0xc8
 80031c6:	fb00 f202 	mul.w	r2, r0, r2
 80031ca:	440a      	add	r2, r1
 80031cc:	3260      	adds	r2, #96	; 0x60
 80031ce:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 80031d2:	f897 3936 	ldrb.w	r3, [r7, #2358]	; 0x936
 80031d6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80031da:	21c8      	movs	r1, #200	; 0xc8
 80031dc:	fb01 f303 	mul.w	r3, r1, r3
 80031e0:	4413      	add	r3, r2
 80031e2:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80031e6:	a4c8      	add	r4, pc, #800	; (adr r4, 8003508 <StartDefaultTask+0x1580>)
 80031e8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80031ec:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = MOVE_TIME;
 80031f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031f4:	4cc6      	ldr	r4, [pc, #792]	; (8003510 <StartDefaultTask+0x1588>)
 80031f6:	f607 1228 	addw	r2, r7, #2344	; 0x928
 80031fa:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 80031fe:	e038      	b.n	8003272 <StartDefaultTask+0x12ea>
					  case SCARA_MOVE_DOWN_ON_SLOT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_SLOT;
 8003200:	f897 3936 	ldrb.w	r3, [r7, #2358]	; 0x936
 8003204:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003208:	21c8      	movs	r1, #200	; 0xc8
 800320a:	fb01 f303 	mul.w	r3, r1, r3
 800320e:	4413      	add	r3, r2
 8003210:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8003214:	a4b6      	add	r4, pc, #728	; (adr r4, 80034f0 <StartDefaultTask+0x1568>)
 8003216:	e9d4 3400 	ldrd	r3, r4, [r4]
 800321a:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = PUT_DOWN_TIME_ON_SLOT;
 800321e:	a4b6      	add	r4, pc, #728	; (adr r4, 80034f8 <StartDefaultTask+0x1570>)
 8003220:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003224:	f607 1228 	addw	r2, r7, #2344	; 0x928
 8003228:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 800322c:	e021      	b.n	8003272 <StartDefaultTask+0x12ea>
					  case SCARA_RELEASE:{
						  state_time = DETACH_TIME;
 800322e:	a4b4      	add	r4, pc, #720	; (adr r4, 8003500 <StartDefaultTask+0x1578>)
 8003230:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003234:	f607 1228 	addw	r2, r7, #2344	; 0x928
 8003238:	e9c2 3400 	strd	r3, r4, [r2]
						  scaraSetOutput(0);
 800323c:	2000      	movs	r0, #0
 800323e:	f007 f873 	bl	800a328 <scaraSetOutput>
					  }
					  break;
 8003242:	e016      	b.n	8003272 <StartDefaultTask+0x12ea>
					  case SCARA_MOVE_UP_ON_SLOT:{
						  state_time = PICK_UP_TIME_ON_SLOT;
 8003244:	a4ac      	add	r4, pc, #688	; (adr r4, 80034f8 <StartDefaultTask+0x1570>)
 8003246:	e9d4 3400 	ldrd	r3, r4, [r4]
 800324a:	f607 1228 	addw	r2, r7, #2344	; 0x928
 800324e:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003252:	f897 3936 	ldrb.w	r3, [r7, #2358]	; 0x936
 8003256:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800325a:	21c8      	movs	r1, #200	; 0xc8
 800325c:	fb01 f303 	mul.w	r3, r1, r3
 8003260:	4413      	add	r3, r2
 8003262:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8003266:	a4a8      	add	r4, pc, #672	; (adr r4, 8003508 <StartDefaultTask+0x1580>)
 8003268:	e9d4 3400 	ldrd	r3, r4, [r4]
 800326c:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8003270:	bf00      	nop
				  }
				  memcpy(&duty_cmd.target_point, &Object[object_tail_pointer].object_position, sizeof(SCARA_PositionTypeDef));
 8003272:	f897 3936 	ldrb.w	r3, [r7, #2358]	; 0x936
 8003276:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800327a:	21c8      	movs	r1, #200	; 0xc8
 800327c:	fb01 f303 	mul.w	r3, r1, r3
 8003280:	18d1      	adds	r1, r2, r3
 8003282:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8003286:	3328      	adds	r3, #40	; 0x28
 8003288:	22c0      	movs	r2, #192	; 0xc0
 800328a:	4618      	mov	r0, r3
 800328c:	f012 fbe6 	bl	8015a5c <memcpy>
				  duty_cmd.time_total = state_time;
 8003290:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8003294:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8003298:	e9d3 3400 	ldrd	r3, r4, [r3]
 800329c:	e9c2 3408 	strd	r3, r4, [r2, #32]
				  SCARA_StatusTypeDef status1;
				  duty_cmd.v_factor = 0;
 80032a0:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	f04f 0400 	mov.w	r4, #0
 80032ac:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
				  if(operation_state == SCARA_ATTACH || operation_state == SCARA_RELEASE){
 80032b0:	f897 3937 	ldrb.w	r3, [r7, #2359]	; 0x937
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d003      	beq.n	80032c0 <StartDefaultTask+0x1338>
 80032b8:	f897 3937 	ldrb.w	r3, [r7, #2359]	; 0x937
 80032bc:	2b06      	cmp	r3, #6
 80032be:	d103      	bne.n	80032c8 <StartDefaultTask+0x1340>
					  status1 = SCARA_STATUS_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	f887 3923 	strb.w	r3, [r7, #2339]	; 0x923
 80032c6:	e031      	b.n	800332c <StartDefaultTask+0x13a4>
				  }else{
					  if(operation_state == SCARA_MOVE_DOWN_ON_OBJECT || operation_state == SCARA_MOVE_DOWN_ON_SLOT || operation_state == SCARA_MOVE_UP_ON_OBJECT || operation_state == SCARA_MOVE_UP_ON_SLOT){
 80032c8:	f897 3937 	ldrb.w	r3, [r7, #2359]	; 0x937
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d00b      	beq.n	80032e8 <StartDefaultTask+0x1360>
 80032d0:	f897 3937 	ldrb.w	r3, [r7, #2359]	; 0x937
 80032d4:	2b05      	cmp	r3, #5
 80032d6:	d007      	beq.n	80032e8 <StartDefaultTask+0x1360>
 80032d8:	f897 3937 	ldrb.w	r3, [r7, #2359]	; 0x937
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d003      	beq.n	80032e8 <StartDefaultTask+0x1360>
 80032e0:	f897 3937 	ldrb.w	r3, [r7, #2359]	; 0x937
 80032e4:	2b07      	cmp	r3, #7
 80032e6:	d108      	bne.n	80032fa <StartDefaultTask+0x1372>
						  duty_cmd.trajec_type = DUTY_TRAJECTORY_LINEAR;
 80032e8:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80032ec:	2202      	movs	r2, #2
 80032ee:	741a      	strb	r2, [r3, #16]
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QT;
 80032f0:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80032f4:	2203      	movs	r2, #3
 80032f6:	745a      	strb	r2, [r3, #17]
 80032f8:	e007      	b.n	800330a <StartDefaultTask+0x1382>
					  }else{
						  duty_cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 80032fa:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80032fe:	2200      	movs	r2, #0
 8003300:	741a      	strb	r2, [r3, #16]
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 8003302:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8003306:	2201      	movs	r2, #1
 8003308:	745a      	strb	r2, [r3, #17]
					  }
					  status1 = scaraInitDuty(duty_cmd);
 800330a:	f507 64e4 	add.w	r4, r7, #1824	; 0x720
 800330e:	4668      	mov	r0, sp
 8003310:	f104 0310 	add.w	r3, r4, #16
 8003314:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8003318:	4619      	mov	r1, r3
 800331a:	f012 fb9f 	bl	8015a5c <memcpy>
 800331e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003322:	f001 ffbd 	bl	80052a0 <scaraInitDuty>
 8003326:	4603      	mov	r3, r0
 8003328:	f887 3923 	strb.w	r3, [r7, #2339]	; 0x923
				  }
				  if ( SCARA_STATUS_OK == status1) {
 800332c:	f897 3923 	ldrb.w	r3, [r7, #2339]	; 0x923
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10b      	bne.n	800334c <StartDefaultTask+0x13c4>
				  	current_duty_state = SCARA_DUTY_STATE_FLOW;
 8003334:	2302      	movs	r3, #2
 8003336:	f887 394d 	strb.w	r3, [r7, #2381]	; 0x94d
				  	run_time = 0;
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	f04f 0400 	mov.w	r4, #0
 8003342:	f607 1238 	addw	r2, r7, #2360	; 0x938
 8003346:	e9c2 3400 	strd	r3, r4, [r2]
 800334a:	e031      	b.n	80033b0 <StartDefaultTask+0x1428>
				  } else {
					object_tail_pointer = (object_tail_pointer+1)%8;
 800334c:	f897 3936 	ldrb.w	r3, [r7, #2358]	; 0x936
 8003350:	3301      	adds	r3, #1
 8003352:	425a      	negs	r2, r3
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	f002 0207 	and.w	r2, r2, #7
 800335c:	bf58      	it	pl
 800335e:	4253      	negpl	r3, r2
 8003360:	f887 3936 	strb.w	r3, [r7, #2358]	; 0x936
					operation_state = SCARA_MOVE_TO_TARGET;
 8003364:	2300      	movs	r3, #0
 8003366:	f887 3937 	strb.w	r3, [r7, #2359]	; 0x937
					detail_array[0] = status1;
 800336a:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800336e:	f897 2923 	ldrb.w	r2, [r7, #2339]	; 0x923
 8003372:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003374:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8003378:	6899      	ldr	r1, [r3, #8]
 800337a:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 800337e:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8003382:	4413      	add	r3, r2
 8003384:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	2301      	movs	r3, #1
 800338c:	2007      	movs	r0, #7
 800338e:	f7fe fc65 	bl	8001c5c <commandRespond1>
 8003392:	f8c7 091c 	str.w	r0, [r7, #2332]	; 0x91c
					total_respond_length += respond_lenght;
 8003396:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 800339a:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 800339e:	4413      	add	r3, r2
 80033a0:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
					LOG_REPORT("INIT FAIL", __LINE__);
 80033a4:	f44f 7166 	mov.w	r1, #920	; 0x398
 80033a8:	485a      	ldr	r0, [pc, #360]	; (8003514 <StartDefaultTask+0x158c>)
 80033aa:	f7fe fca7 	bl	8001cfc <LOG_REPORT>
					break;
 80033ae:	e077      	b.n	80034a0 <StartDefaultTask+0x1518>


		  case SCARA_DUTY_STATE_FLOW:{
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 80033b0:	a353      	add	r3, pc, #332	; (adr r3, 8003500 <StartDefaultTask+0x1578>)
 80033b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b6:	f607 1138 	addw	r1, r7, #2360	; 0x938
 80033ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033be:	f7fc ff65 	bl	800028c <__adddf3>
 80033c2:	4603      	mov	r3, r0
 80033c4:	460c      	mov	r4, r1
 80033c6:	f607 1238 	addw	r2, r7, #2360	; 0x938
 80033ca:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 80033ce:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80033d2:	ed93 0b00 	vldr	d0, [r3]
 80033d6:	f007 f839 	bl	800a44c <scaraIsFinish>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d022      	beq.n	8003426 <StartDefaultTask+0x149e>
				current_duty_state = SCARA_DUTY_STATE_OPERATION;
 80033e0:	2304      	movs	r3, #4
 80033e2:	f887 394d 	strb.w	r3, [r7, #2381]	; 0x94d
				if(operation_state == SCARA_MOVE_UP_ON_SLOT){
 80033e6:	f897 3937 	ldrb.w	r3, [r7, #2359]	; 0x937
 80033ea:	2b07      	cmp	r3, #7
 80033ec:	d10f      	bne.n	800340e <StartDefaultTask+0x1486>
					operation_state = SCARA_MOVE_TO_TARGET;
 80033ee:	2300      	movs	r3, #0
 80033f0:	f887 3937 	strb.w	r3, [r7, #2359]	; 0x937
					object_tail_pointer = (object_tail_pointer+1)%8;
 80033f4:	f897 3936 	ldrb.w	r3, [r7, #2358]	; 0x936
 80033f8:	3301      	adds	r3, #1
 80033fa:	425a      	negs	r2, r3
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	f002 0207 	and.w	r2, r2, #7
 8003404:	bf58      	it	pl
 8003406:	4253      	negpl	r3, r2
 8003408:	f887 3936 	strb.w	r3, [r7, #2358]	; 0x936
 800340c:	e004      	b.n	8003418 <StartDefaultTask+0x1490>
				}else{
					operation_state += 1; //next state
 800340e:	f897 3937 	ldrb.w	r3, [r7, #2359]	; 0x937
 8003412:	3301      	adds	r3, #1
 8003414:	f887 3937 	strb.w	r3, [r7, #2359]	; 0x937
				}
				lowlayer_readTruePosition(&positionNext);
 8003418:	483f      	ldr	r0, [pc, #252]	; (8003518 <StartDefaultTask+0x1590>)
 800341a:	f001 fa1d 	bl	8004858 <lowlayer_readTruePosition>
				kinematicForward(&positionNext);
 800341e:	483e      	ldr	r0, [pc, #248]	; (8003518 <StartDefaultTask+0x1590>)
 8003420:	f000 faf6 	bl	8003a10 <kinematicForward>
				  }else{
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
				  }
			  }
		  }
		  break;
 8003424:	e03b      	b.n	800349e <StartDefaultTask+0x1516>
			  } else if(operation_state != SCARA_ATTACH && operation_state != SCARA_RELEASE){
 8003426:	f897 3937 	ldrb.w	r3, [r7, #2359]	; 0x937
 800342a:	2b02      	cmp	r3, #2
 800342c:	d037      	beq.n	800349e <StartDefaultTask+0x1516>
 800342e:	f897 3937 	ldrb.w	r3, [r7, #2359]	; 0x937
 8003432:	2b06      	cmp	r3, #6
 8003434:	d033      	beq.n	800349e <StartDefaultTask+0x1516>
				status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8003436:	4c39      	ldr	r4, [pc, #228]	; (800351c <StartDefaultTask+0x1594>)
 8003438:	4668      	mov	r0, sp
 800343a:	f104 0308 	add.w	r3, r4, #8
 800343e:	22b8      	movs	r2, #184	; 0xb8
 8003440:	4619      	mov	r1, r3
 8003442:	f012 fb0b 	bl	8015a5c <memcpy>
 8003446:	e894 000c 	ldmia.w	r4, {r2, r3}
 800344a:	4833      	ldr	r0, [pc, #204]	; (8003518 <StartDefaultTask+0x1590>)
 800344c:	f607 1138 	addw	r1, r7, #2360	; 0x938
 8003450:	ed91 0b00 	vldr	d0, [r1]
 8003454:	f004 fef6 	bl	8008244 <scaraFlowDuty>
 8003458:	4603      	mov	r3, r0
 800345a:	f887 38f7 	strb.w	r3, [r7, #2295]	; 0x8f7
				if ( SCARA_STATUS_OK == status) {
 800345e:	f897 38f7 	ldrb.w	r3, [r7, #2295]	; 0x8f7
 8003462:	2b00      	cmp	r3, #0
 8003464:	d113      	bne.n	800348e <StartDefaultTask+0x1506>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003466:	4c2d      	ldr	r4, [pc, #180]	; (800351c <StartDefaultTask+0x1594>)
 8003468:	4a2b      	ldr	r2, [pc, #172]	; (8003518 <StartDefaultTask+0x1590>)
 800346a:	ab2c      	add	r3, sp, #176	; 0xb0
 800346c:	4611      	mov	r1, r2
 800346e:	22c0      	movs	r2, #192	; 0xc0
 8003470:	4618      	mov	r0, r3
 8003472:	f012 faf3 	bl	8015a5c <memcpy>
 8003476:	4668      	mov	r0, sp
 8003478:	f104 0310 	add.w	r3, r4, #16
 800347c:	22b0      	movs	r2, #176	; 0xb0
 800347e:	4619      	mov	r1, r3
 8003480:	f012 faec 	bl	8015a5c <memcpy>
 8003484:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003488:	f001 fb76 	bl	8004b78 <lowlayer_computeAndWritePulse>
		  break;
 800348c:	e007      	b.n	800349e <StartDefaultTask+0x1516>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 800348e:	2303      	movs	r3, #3
 8003490:	f887 394d 	strb.w	r3, [r7, #2381]	; 0x94d
		  break;
 8003494:	e003      	b.n	800349e <StartDefaultTask+0x1516>

		  case SCARA_DUTY_STATE_FINISH:
			  //error
			  //free(Object);
		  break;
 8003496:	bf00      	nop
 8003498:	e005      	b.n	80034a6 <StartDefaultTask+0x151e>
				  break;
 800349a:	bf00      	nop
 800349c:	e003      	b.n	80034a6 <StartDefaultTask+0x151e>
		  break;
 800349e:	bf00      	nop
		  }
	  }
	  break;
 80034a0:	e001      	b.n	80034a6 <StartDefaultTask+0x151e>
	  break;
 80034a2:	bf00      	nop
 80034a4:	e000      	b.n	80034a8 <StartDefaultTask+0x1520>
	  break;
 80034a6:	bf00      	nop
	//   // Send through USB
	//   if (usb_lenght > 0) {
	// 	  CDC_Transmit_FS(usb_buff, (uint16_t)usb_lenght);
	//   }

	if(total_respond_length > 0){
 80034a8:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	dd08      	ble.n	80034c2 <StartDefaultTask+0x153a>
		CDC_Transmit_FS(respond, total_respond_length);
 80034b0:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	f207 63f4 	addw	r3, r7, #1780	; 0x6f4
 80034ba:	4611      	mov	r1, r2
 80034bc:	4618      	mov	r0, r3
 80034be:	f011 fe51 	bl	8015164 <CDC_Transmit_FS>
	}

	  /* 5--- Update ---*/
	  scaraSetMethod(current_method);
 80034c2:	f897 394f 	ldrb.w	r3, [r7, #2383]	; 0x94f
 80034c6:	4618      	mov	r0, r3
 80034c8:	f006 ff60 	bl	800a38c <scaraSetMethod>
	  scaraSetMode(current_mode);
 80034cc:	f897 394e 	ldrb.w	r3, [r7, #2382]	; 0x94e
 80034d0:	4618      	mov	r0, r3
 80034d2:	f006 ff4b 	bl	800a36c <scaraSetMode>
	  scaraSetDutyState(current_duty_state);
 80034d6:	f897 394d 	ldrb.w	r3, [r7, #2381]	; 0x94d
 80034da:	4618      	mov	r0, r3
 80034dc:	f006 ff36 	bl	800a34c <scaraSetDutyState>

    osDelay(1);
 80034e0:	2001      	movs	r0, #1
 80034e2:	f00e ff59 	bl	8012398 <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 80034e6:	f7fe bdb7 	b.w	8002058 <StartDefaultTask+0xd0>
 80034ea:	bf00      	nop
 80034ec:	f3af 8000 	nop.w
 80034f0:	00000000 	.word	0x00000000
 80034f4:	405fa000 	.word	0x405fa000
 80034f8:	40000000 	.word	0x40000000
 80034fc:	3fe33333 	.word	0x3fe33333
 8003500:	40000000 	.word	0x40000000
 8003504:	3f847ae1 	.word	0x3f847ae1
 8003508:	00000000 	.word	0x00000000
 800350c:	40606000 	.word	0x40606000
 8003510:	3ff33333 	.word	0x3ff33333
 8003514:	0801b05c 	.word	0x0801b05c
 8003518:	20006838 	.word	0x20006838
 800351c:	200066b8 	.word	0x200066b8

08003520 <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 8003520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003522:	f2ad 5dd4 	subw	sp, sp, #1492	; 0x5d4
 8003526:	af70      	add	r7, sp, #448	; 0x1c0
 8003528:	1d3b      	adds	r3, r7, #4
 800352a:	6018      	str	r0, [r3, #0]
	int32_t				respond_lenght;
	//int32_t				message_lenght;
	int32_t 			detail_length;

	// Default value
	duty_cmd.key_speed = 1;
 800352c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003530:	2201      	movs	r2, #1
 8003532:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 8003534:	4964      	ldr	r1, [pc, #400]	; (80036c8 <Start_USB_RX_Task+0x1a8>)
 8003536:	4865      	ldr	r0, [pc, #404]	; (80036cc <Start_USB_RX_Task+0x1ac>)
 8003538:	f000 fef8 	bl	800432c <ringBuff_DistanceOf>
 800353c:	f8c7 0408 	str.w	r0, [r7, #1032]	; 0x408
		  if (distance != -1) {
 8003540:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003548:	d0f4      	beq.n	8003534 <Start_USB_RX_Task+0x14>
 800354a:	466b      	mov	r3, sp
 800354c:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 800354e:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8003552:	1c58      	adds	r0, r3, #1
 8003554:	1e43      	subs	r3, r0, #1
 8003556:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 800355a:	4603      	mov	r3, r0
 800355c:	4619      	mov	r1, r3
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	f04f 0400 	mov.w	r4, #0
 800356a:	00d4      	lsls	r4, r2, #3
 800356c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003570:	00cb      	lsls	r3, r1, #3
 8003572:	4603      	mov	r3, r0
 8003574:	4619      	mov	r1, r3
 8003576:	f04f 0200 	mov.w	r2, #0
 800357a:	f04f 0300 	mov.w	r3, #0
 800357e:	f04f 0400 	mov.w	r4, #0
 8003582:	00d4      	lsls	r4, r2, #3
 8003584:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003588:	00cb      	lsls	r3, r1, #3
 800358a:	4603      	mov	r3, r0
 800358c:	3307      	adds	r3, #7
 800358e:	08db      	lsrs	r3, r3, #3
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	ebad 0d03 	sub.w	sp, sp, r3
 8003596:	ab70      	add	r3, sp, #448	; 0x1c0
 8003598:	3300      	adds	r3, #0
 800359a:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 800359e:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 80035a2:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80035a6:	3301      	adds	r3, #1
 80035a8:	461a      	mov	r2, r3
 80035aa:	4848      	ldr	r0, [pc, #288]	; (80036cc <Start_USB_RX_Task+0x1ac>)
 80035ac:	f000 fe9d 	bl	80042ea <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1, data_packet);
 80035b0:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
 80035b4:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80035b8:	3301      	adds	r3, #1
 80035ba:	f107 020c 	add.w	r2, r7, #12
 80035be:	4619      	mov	r1, r3
 80035c0:	f7fe fbe2 	bl	8001d88 <unPackPayload>
 80035c4:	f8c7 03fc 	str.w	r0, [r7, #1020]	; 0x3fc

			  if( -1 == ret) {
 80035c8:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 80035cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d0:	d077      	beq.n	80036c2 <Start_USB_RX_Task+0x1a2>
				  //LOG_REPORT("UNPACK FAIL", __LINE__);
			  } else {
				  //LOG_REPORT((char*) temp, __LINE__);
				  cmd_type = packetRead(data_packet, ret, &id_command, &duty_cmd);
 80035d2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80035d6:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 80035da:	f107 000c 	add.w	r0, r7, #12
 80035de:	f8d7 13fc 	ldr.w	r1, [r7, #1020]	; 0x3fc
 80035e2:	f7fd fcd1 	bl	8000f88 <packetRead>
 80035e6:	4603      	mov	r3, r0
 80035e8:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb
				  memset(detail, 0, sizeof(detail));
 80035ec:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80035f0:	2287      	movs	r2, #135	; 0x87
 80035f2:	2100      	movs	r1, #0
 80035f4:	4618      	mov	r0, r3
 80035f6:	f012 fa55 	bl	8015aa4 <memset>
				  detail_length = 0;
 80035fa:	f107 0308 	add.w	r3, r7, #8
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
				  rpd_type = commandReply(cmd_type, duty_cmd, detail, &detail_length);
 8003602:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8003606:	f897 53fb 	ldrb.w	r5, [r7, #1019]	; 0x3fb
 800360a:	f107 0308 	add.w	r3, r7, #8
 800360e:	936f      	str	r3, [sp, #444]	; 0x1bc
 8003610:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003614:	936e      	str	r3, [sp, #440]	; 0x1b8
 8003616:	4668      	mov	r0, sp
 8003618:	f104 0308 	add.w	r3, r4, #8
 800361c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8003620:	4619      	mov	r1, r3
 8003622:	f012 fa1b 	bl	8015a5c <memcpy>
 8003626:	e894 000c 	ldmia.w	r4, {r2, r3}
 800362a:	4628      	mov	r0, r5
 800362c:	f7fe f940 	bl	80018b0 <commandReply>
 8003630:	4603      	mov	r3, r0
 8003632:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
				  //LOG_REPORT("tail", usb_rx_ringbuff.tail);
				  if ( RPD_DUTY == rpd_type) {
 8003636:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 800363a:	2b09      	cmp	r3, #9
 800363c:	d123      	bne.n	8003686 <Start_USB_RX_Task+0x166>
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 800363e:	2300      	movs	r3, #0
 8003640:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
					  // Wait allocate
					  while (dataMail == NULL) {
 8003644:	e008      	b.n	8003658 <Start_USB_RX_Task+0x138>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 8003646:	4b22      	ldr	r3, [pc, #136]	; (80036d0 <Start_USB_RX_Task+0x1b0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f04f 31ff 	mov.w	r1, #4294967295
 800364e:	4618      	mov	r0, r3
 8003650:	f00f f8b2 	bl	80127b8 <osMailAlloc>
 8003654:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
					  while (dataMail == NULL) {
 8003658:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f2      	beq.n	8003646 <Start_USB_RX_Task+0x126>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 8003660:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003664:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8003668:	4619      	mov	r1, r3
 800366a:	f8d7 040c 	ldr.w	r0, [r7, #1036]	; 0x40c
 800366e:	f012 f9f5 	bl	8015a5c <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 8003672:	4b17      	ldr	r3, [pc, #92]	; (80036d0 <Start_USB_RX_Task+0x1b0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 800367a:	4618      	mov	r0, r3
 800367c:	f00f f8b2 	bl	80127e4 <osMailPut>
 8003680:	f8c7 03f0 	str.w	r0, [r7, #1008]	; 0x3f0
 8003684:	e01d      	b.n	80036c2 <Start_USB_RX_Task+0x1a2>
						  //LOG_REPORT("DUTY SEND", __LINE__);
					  }

				//   }else if( RPD_POSITION == rpd_type) { 
				// 	  CDC_Transmit_FS(detail, 84);
				  }else if(rpd_type == RPD_TRANSFER){
 8003686:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 800368a:	2b0a      	cmp	r3, #10
 800368c:	d019      	beq.n	80036c2 <Start_USB_RX_Task+0x1a2>

				  }else {
					//   memset(respond, 0, sizeof(respond));
					//   memset(message, 0, sizeof(message));
					  respond_lenght	= commandRespond1(rpd_type, cmd_type,
 800368e:	f897 13fb 	ldrb.w	r1, [r7, #1019]	; 0x3fb
 8003692:	f107 0308 	add.w	r3, r7, #8
 8003696:	681c      	ldr	r4, [r3, #0]
 8003698:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800369c:	f897 03fa 	ldrb.w	r0, [r7, #1018]	; 0x3fa
 80036a0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	4623      	mov	r3, r4
 80036a8:	f7fe fad8 	bl	8001c5c <commandRespond1>
 80036ac:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
							  	  	  	  (char *)detail, detail_length,
										  (char *)respond);
					  //message_lenght	= packPayload(respond, message, respond_lenght);
					  CDC_Transmit_FS(respond, respond_lenght);
 80036b0:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80036ba:	4611      	mov	r1, r2
 80036bc:	4618      	mov	r0, r3
 80036be:	f011 fd51 	bl	8015164 <CDC_Transmit_FS>
 80036c2:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 80036c4:	e736      	b.n	8003534 <Start_USB_RX_Task+0x14>
 80036c6:	bf00      	nop
 80036c8:	0801b118 	.word	0x0801b118
 80036cc:	20000004 	.word	0x20000004
 80036d0:	20005a3c 	.word	0x20005a3c

080036d4 <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	b292      	uxth	r2, r2
 80036e4:	801a      	strh	r2, [r3, #0]
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	b29b      	uxth	r3, r3
}
 8003700:	4618      	mov	r0, r3
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8003712:	1d3b      	adds	r3, r7, #4
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	60da      	str	r2, [r3, #12]
 800371e:	611a      	str	r2, [r3, #16]
 8003720:	615a      	str	r2, [r3, #20]
 8003722:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8003724:	4b27      	ldr	r3, [pc, #156]	; (80037c4 <MX_FSMC_Init+0xb8>)
 8003726:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800372a:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800372c:	4b25      	ldr	r3, [pc, #148]	; (80037c4 <MX_FSMC_Init+0xb8>)
 800372e:	4a26      	ldr	r2, [pc, #152]	; (80037c8 <MX_FSMC_Init+0xbc>)
 8003730:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8003732:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <MX_FSMC_Init+0xb8>)
 8003734:	2200      	movs	r2, #0
 8003736:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8003738:	4b22      	ldr	r3, [pc, #136]	; (80037c4 <MX_FSMC_Init+0xb8>)
 800373a:	2202      	movs	r2, #2
 800373c:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 800373e:	4b21      	ldr	r3, [pc, #132]	; (80037c4 <MX_FSMC_Init+0xb8>)
 8003740:	2208      	movs	r2, #8
 8003742:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003744:	4b1f      	ldr	r3, [pc, #124]	; (80037c4 <MX_FSMC_Init+0xb8>)
 8003746:	2210      	movs	r2, #16
 8003748:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800374a:	4b1e      	ldr	r3, [pc, #120]	; (80037c4 <MX_FSMC_Init+0xb8>)
 800374c:	2200      	movs	r2, #0
 800374e:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003750:	4b1c      	ldr	r3, [pc, #112]	; (80037c4 <MX_FSMC_Init+0xb8>)
 8003752:	2200      	movs	r2, #0
 8003754:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8003756:	4b1b      	ldr	r3, [pc, #108]	; (80037c4 <MX_FSMC_Init+0xb8>)
 8003758:	2200      	movs	r2, #0
 800375a:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800375c:	4b19      	ldr	r3, [pc, #100]	; (80037c4 <MX_FSMC_Init+0xb8>)
 800375e:	2200      	movs	r2, #0
 8003760:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8003762:	4b18      	ldr	r3, [pc, #96]	; (80037c4 <MX_FSMC_Init+0xb8>)
 8003764:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003768:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800376a:	4b16      	ldr	r3, [pc, #88]	; (80037c4 <MX_FSMC_Init+0xb8>)
 800376c:	2200      	movs	r2, #0
 800376e:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8003770:	4b14      	ldr	r3, [pc, #80]	; (80037c4 <MX_FSMC_Init+0xb8>)
 8003772:	2200      	movs	r2, #0
 8003774:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003776:	4b13      	ldr	r3, [pc, #76]	; (80037c4 <MX_FSMC_Init+0xb8>)
 8003778:	2200      	movs	r2, #0
 800377a:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800377c:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <MX_FSMC_Init+0xb8>)
 800377e:	2200      	movs	r2, #0
 8003780:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8003782:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <MX_FSMC_Init+0xb8>)
 8003784:	2200      	movs	r2, #0
 8003786:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8003788:	230f      	movs	r3, #15
 800378a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800378c:	230f      	movs	r3, #15
 800378e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8003790:	23ff      	movs	r3, #255	; 0xff
 8003792:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8003794:	230f      	movs	r3, #15
 8003796:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003798:	2310      	movs	r3, #16
 800379a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800379c:	2311      	movs	r3, #17
 800379e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80037a0:	2300      	movs	r3, #0
 80037a2:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 80037a4:	1d3b      	adds	r3, r7, #4
 80037a6:	2200      	movs	r2, #0
 80037a8:	4619      	mov	r1, r3
 80037aa:	4806      	ldr	r0, [pc, #24]	; (80037c4 <MX_FSMC_Init+0xb8>)
 80037ac:	f008 fbd8 	bl	800bf60 <HAL_NOR_Init>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 80037b6:	f000 fcf9 	bl	80041ac <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80037ba:	bf00      	nop
 80037bc:	3720      	adds	r7, #32
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20005a44 	.word	0x20005a44
 80037c8:	a0000104 	.word	0xa0000104

080037cc <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d2:	1d3b      	adds	r3, r7, #4
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	605a      	str	r2, [r3, #4]
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	60da      	str	r2, [r3, #12]
 80037de:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80037e0:	4b24      	ldr	r3, [pc, #144]	; (8003874 <HAL_FSMC_MspInit+0xa8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d140      	bne.n	800386a <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 80037e8:	4b22      	ldr	r3, [pc, #136]	; (8003874 <HAL_FSMC_MspInit+0xa8>)
 80037ea:	2201      	movs	r2, #1
 80037ec:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	603b      	str	r3, [r7, #0]
 80037f2:	4b21      	ldr	r3, [pc, #132]	; (8003878 <HAL_FSMC_MspInit+0xac>)
 80037f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f6:	4a20      	ldr	r2, [pc, #128]	; (8003878 <HAL_FSMC_MspInit+0xac>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	6393      	str	r3, [r2, #56]	; 0x38
 80037fe:	4b1e      	ldr	r3, [pc, #120]	; (8003878 <HAL_FSMC_MspInit+0xac>)
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800380a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800380e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003810:	2302      	movs	r3, #2
 8003812:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003814:	2300      	movs	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003818:	2303      	movs	r3, #3
 800381a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800381c:	230c      	movs	r3, #12
 800381e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003820:	1d3b      	adds	r3, r7, #4
 8003822:	4619      	mov	r1, r3
 8003824:	4815      	ldr	r0, [pc, #84]	; (800387c <HAL_FSMC_MspInit+0xb0>)
 8003826:	f008 f9e7 	bl	800bbf8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800382a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800382e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003830:	2302      	movs	r3, #2
 8003832:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003834:	2300      	movs	r3, #0
 8003836:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003838:	2303      	movs	r3, #3
 800383a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800383c:	230c      	movs	r3, #12
 800383e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003840:	1d3b      	adds	r3, r7, #4
 8003842:	4619      	mov	r1, r3
 8003844:	480e      	ldr	r0, [pc, #56]	; (8003880 <HAL_FSMC_MspInit+0xb4>)
 8003846:	f008 f9d7 	bl	800bbf8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800384a:	2380      	movs	r3, #128	; 0x80
 800384c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384e:	2302      	movs	r3, #2
 8003850:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003852:	2300      	movs	r3, #0
 8003854:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003856:	2303      	movs	r3, #3
 8003858:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800385a:	230c      	movs	r3, #12
 800385c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800385e:	1d3b      	adds	r3, r7, #4
 8003860:	4619      	mov	r1, r3
 8003862:	4808      	ldr	r0, [pc, #32]	; (8003884 <HAL_FSMC_MspInit+0xb8>)
 8003864:	f008 f9c8 	bl	800bbf8 <HAL_GPIO_Init>
 8003868:	e000      	b.n	800386c <HAL_FSMC_MspInit+0xa0>
    return;
 800386a:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	20000ffc 	.word	0x20000ffc
 8003878:	40023800 	.word	0x40023800
 800387c:	40021000 	.word	0x40021000
 8003880:	40020c00 	.word	0x40020c00
 8003884:	40020400 	.word	0x40020400

08003888 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 8003890:	f7ff ff9c 	bl	80037cc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8003894:	bf00      	nop
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08a      	sub	sp, #40	; 0x28
 80038a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a2:	f107 0314 	add.w	r3, r7, #20
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	605a      	str	r2, [r3, #4]
 80038ac:	609a      	str	r2, [r3, #8]
 80038ae:	60da      	str	r2, [r3, #12]
 80038b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038b2:	2300      	movs	r3, #0
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	4b51      	ldr	r3, [pc, #324]	; (80039fc <MX_GPIO_Init+0x160>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	4a50      	ldr	r2, [pc, #320]	; (80039fc <MX_GPIO_Init+0x160>)
 80038bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c0:	6313      	str	r3, [r2, #48]	; 0x30
 80038c2:	4b4e      	ldr	r3, [pc, #312]	; (80039fc <MX_GPIO_Init+0x160>)
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ca:	613b      	str	r3, [r7, #16]
 80038cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ce:	2300      	movs	r3, #0
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	4b4a      	ldr	r3, [pc, #296]	; (80039fc <MX_GPIO_Init+0x160>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	4a49      	ldr	r2, [pc, #292]	; (80039fc <MX_GPIO_Init+0x160>)
 80038d8:	f043 0301 	orr.w	r3, r3, #1
 80038dc:	6313      	str	r3, [r2, #48]	; 0x30
 80038de:	4b47      	ldr	r3, [pc, #284]	; (80039fc <MX_GPIO_Init+0x160>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80038ea:	2300      	movs	r3, #0
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	4b43      	ldr	r3, [pc, #268]	; (80039fc <MX_GPIO_Init+0x160>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	4a42      	ldr	r2, [pc, #264]	; (80039fc <MX_GPIO_Init+0x160>)
 80038f4:	f043 0310 	orr.w	r3, r3, #16
 80038f8:	6313      	str	r3, [r2, #48]	; 0x30
 80038fa:	4b40      	ldr	r3, [pc, #256]	; (80039fc <MX_GPIO_Init+0x160>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	f003 0310 	and.w	r3, r3, #16
 8003902:	60bb      	str	r3, [r7, #8]
 8003904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003906:	2300      	movs	r3, #0
 8003908:	607b      	str	r3, [r7, #4]
 800390a:	4b3c      	ldr	r3, [pc, #240]	; (80039fc <MX_GPIO_Init+0x160>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	4a3b      	ldr	r2, [pc, #236]	; (80039fc <MX_GPIO_Init+0x160>)
 8003910:	f043 0302 	orr.w	r3, r3, #2
 8003914:	6313      	str	r3, [r2, #48]	; 0x30
 8003916:	4b39      	ldr	r3, [pc, #228]	; (80039fc <MX_GPIO_Init+0x160>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	607b      	str	r3, [r7, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003922:	2300      	movs	r3, #0
 8003924:	603b      	str	r3, [r7, #0]
 8003926:	4b35      	ldr	r3, [pc, #212]	; (80039fc <MX_GPIO_Init+0x160>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	4a34      	ldr	r2, [pc, #208]	; (80039fc <MX_GPIO_Init+0x160>)
 800392c:	f043 0308 	orr.w	r3, r3, #8
 8003930:	6313      	str	r3, [r2, #48]	; 0x30
 8003932:	4b32      	ldr	r3, [pc, #200]	; (80039fc <MX_GPIO_Init+0x160>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 800393e:	2200      	movs	r2, #0
 8003940:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 8003944:	482e      	ldr	r0, [pc, #184]	; (8003a00 <MX_GPIO_Init+0x164>)
 8003946:	f008 faf1 	bl	800bf2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|CAPTURE_ENABLE_Pin|STOP_Pin, GPIO_PIN_RESET);
 800394a:	2200      	movs	r2, #0
 800394c:	f641 0148 	movw	r1, #6216	; 0x1848
 8003950:	482c      	ldr	r0, [pc, #176]	; (8003a04 <MX_GPIO_Init+0x168>)
 8003952:	f008 faeb 	bl	800bf2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8003956:	2200      	movs	r2, #0
 8003958:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800395c:	482a      	ldr	r0, [pc, #168]	; (8003a08 <MX_GPIO_Init+0x16c>)
 800395e:	f008 fae5 	bl	800bf2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 8003962:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 8003966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003968:	2301      	movs	r3, #1
 800396a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396c:	2300      	movs	r3, #0
 800396e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003970:	2300      	movs	r3, #0
 8003972:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003974:	f107 0314 	add.w	r3, r7, #20
 8003978:	4619      	mov	r1, r3
 800397a:	4821      	ldr	r0, [pc, #132]	; (8003a00 <MX_GPIO_Init+0x164>)
 800397c:	f008 f93c 	bl	800bbf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|CAPTURE_ENABLE_Pin|STOP_Pin;
 8003980:	f640 0348 	movw	r3, #2120	; 0x848
 8003984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003986:	2301      	movs	r3, #1
 8003988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800398e:	2300      	movs	r3, #0
 8003990:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003992:	f107 0314 	add.w	r3, r7, #20
 8003996:	4619      	mov	r1, r3
 8003998:	481a      	ldr	r0, [pc, #104]	; (8003a04 <MX_GPIO_Init+0x168>)
 800399a:	f008 f92d 	bl	800bbf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_WRITE_Pin;
 800399e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039a4:	2301      	movs	r3, #1
 80039a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ac:	2303      	movs	r3, #3
 80039ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_WRITE_GPIO_Port, &GPIO_InitStruct);
 80039b0:	f107 0314 	add.w	r3, r7, #20
 80039b4:	4619      	mov	r1, r3
 80039b6:	4813      	ldr	r0, [pc, #76]	; (8003a04 <MX_GPIO_Init+0x168>)
 80039b8:	f008 f91e 	bl	800bbf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CPLD_LIMIT_Pin|CPLD_BUSY_Pin;
 80039bc:	f242 0304 	movw	r3, #8196	; 0x2004
 80039c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039c2:	2300      	movs	r3, #0
 80039c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039c6:	2301      	movs	r3, #1
 80039c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039ca:	f107 0314 	add.w	r3, r7, #20
 80039ce:	4619      	mov	r1, r3
 80039d0:	480c      	ldr	r0, [pc, #48]	; (8003a04 <MX_GPIO_Init+0x168>)
 80039d2:	f008 f911 	bl	800bbf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin;
 80039d6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80039da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039dc:	2301      	movs	r3, #1
 80039de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e0:	2300      	movs	r3, #0
 80039e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e4:	2300      	movs	r3, #0
 80039e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e8:	f107 0314 	add.w	r3, r7, #20
 80039ec:	4619      	mov	r1, r3
 80039ee:	4806      	ldr	r0, [pc, #24]	; (8003a08 <MX_GPIO_Init+0x16c>)
 80039f0:	f008 f902 	bl	800bbf8 <HAL_GPIO_Init>

}
 80039f4:	bf00      	nop
 80039f6:	3728      	adds	r7, #40	; 0x28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40023800 	.word	0x40023800
 8003a00:	40020400 	.word	0x40020400
 8003a04:	40020c00 	.word	0x40020c00
 8003a08:	40020000 	.word	0x40020000
 8003a0c:	00000000 	.word	0x00000000

08003a10 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 8003a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a12:	b08b      	sub	sp, #44	; 0x2c
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8003a1e:	eeb0 0a47 	vmov.f32	s0, s14
 8003a22:	eef0 0a67 	vmov.f32	s1, s15
 8003a26:	f015 fe07 	bl	8019638 <cos>
 8003a2a:	ec51 0b10 	vmov	r0, r1, d0
 8003a2e:	a38e      	add	r3, pc, #568	; (adr r3, 8003c68 <kinematicForward+0x258>)
 8003a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a34:	f7fc fde0 	bl	80005f8 <__aeabi_dmul>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	460c      	mov	r4, r1
 8003a3c:	461d      	mov	r5, r3
 8003a3e:	4626      	mov	r6, r4
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4623      	mov	r3, r4
 8003a50:	f7fc fc1c 	bl	800028c <__adddf3>
 8003a54:	4603      	mov	r3, r0
 8003a56:	460c      	mov	r4, r1
 8003a58:	ec44 3b17 	vmov	d7, r3, r4
 8003a5c:	eeb0 0a47 	vmov.f32	s0, s14
 8003a60:	eef0 0a67 	vmov.f32	s1, s15
 8003a64:	f015 fde8 	bl	8019638 <cos>
 8003a68:	ec51 0b10 	vmov	r0, r1, d0
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	4b83      	ldr	r3, [pc, #524]	; (8003c80 <kinematicForward+0x270>)
 8003a72:	f7fc fdc1 	bl	80005f8 <__aeabi_dmul>
 8003a76:	4603      	mov	r3, r0
 8003a78:	460c      	mov	r4, r1
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	4623      	mov	r3, r4
 8003a7e:	4628      	mov	r0, r5
 8003a80:	4631      	mov	r1, r6
 8003a82:	f7fc fc03 	bl	800028c <__adddf3>
 8003a86:	4603      	mov	r3, r0
 8003a88:	460c      	mov	r4, r1
 8003a8a:	461d      	mov	r5, r3
 8003a8c:	4626      	mov	r6, r4
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	4623      	mov	r3, r4
 8003a9e:	f7fc fbf5 	bl	800028c <__adddf3>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	460c      	mov	r4, r1
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	4621      	mov	r1, r4
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4623      	mov	r3, r4
 8003ab4:	f7fc fbe8 	bl	8000288 <__aeabi_dsub>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	460c      	mov	r4, r1
 8003abc:	ec44 3b17 	vmov	d7, r3, r4
 8003ac0:	eeb0 0a47 	vmov.f32	s0, s14
 8003ac4:	eef0 0a67 	vmov.f32	s1, s15
 8003ac8:	f015 fdb6 	bl	8019638 <cos>
 8003acc:	ec51 0b10 	vmov	r0, r1, d0
 8003ad0:	a363      	add	r3, pc, #396	; (adr r3, 8003c60 <kinematicForward+0x250>)
 8003ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad6:	f7fc fd8f 	bl	80005f8 <__aeabi_dmul>
 8003ada:	4603      	mov	r3, r0
 8003adc:	460c      	mov	r4, r1
	x =   a1*cos(pnt->Theta1)
 8003ade:	461a      	mov	r2, r3
 8003ae0:	4623      	mov	r3, r4
 8003ae2:	4628      	mov	r0, r5
 8003ae4:	4631      	mov	r1, r6
 8003ae6:	f7fc fbd1 	bl	800028c <__adddf3>
 8003aea:	4603      	mov	r3, r0
 8003aec:	460c      	mov	r4, r1
 8003aee:	e9c7 3408 	strd	r3, r4, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8003af8:	eeb0 0a47 	vmov.f32	s0, s14
 8003afc:	eef0 0a67 	vmov.f32	s1, s15
 8003b00:	f015 fe2a 	bl	8019758 <sin>
 8003b04:	ec51 0b10 	vmov	r0, r1, d0
 8003b08:	a357      	add	r3, pc, #348	; (adr r3, 8003c68 <kinematicForward+0x258>)
 8003b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0e:	f7fc fd73 	bl	80005f8 <__aeabi_dmul>
 8003b12:	4603      	mov	r3, r0
 8003b14:	460c      	mov	r4, r1
 8003b16:	461d      	mov	r5, r3
 8003b18:	4626      	mov	r6, r4
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8003b26:	461a      	mov	r2, r3
 8003b28:	4623      	mov	r3, r4
 8003b2a:	f7fc fbaf 	bl	800028c <__adddf3>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	460c      	mov	r4, r1
 8003b32:	ec44 3b17 	vmov	d7, r3, r4
 8003b36:	eeb0 0a47 	vmov.f32	s0, s14
 8003b3a:	eef0 0a67 	vmov.f32	s1, s15
 8003b3e:	f015 fe0b 	bl	8019758 <sin>
 8003b42:	ec51 0b10 	vmov	r0, r1, d0
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	4b4d      	ldr	r3, [pc, #308]	; (8003c80 <kinematicForward+0x270>)
 8003b4c:	f7fc fd54 	bl	80005f8 <__aeabi_dmul>
 8003b50:	4603      	mov	r3, r0
 8003b52:	460c      	mov	r4, r1
 8003b54:	461a      	mov	r2, r3
 8003b56:	4623      	mov	r3, r4
 8003b58:	4628      	mov	r0, r5
 8003b5a:	4631      	mov	r1, r6
 8003b5c:	f7fc fb96 	bl	800028c <__adddf3>
 8003b60:	4603      	mov	r3, r0
 8003b62:	460c      	mov	r4, r1
 8003b64:	461d      	mov	r5, r3
 8003b66:	4626      	mov	r6, r4
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8003b74:	461a      	mov	r2, r3
 8003b76:	4623      	mov	r3, r4
 8003b78:	f7fc fb88 	bl	800028c <__adddf3>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	460c      	mov	r4, r1
 8003b80:	4618      	mov	r0, r3
 8003b82:	4621      	mov	r1, r4
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	4623      	mov	r3, r4
 8003b8e:	f7fc fb7b 	bl	8000288 <__aeabi_dsub>
 8003b92:	4603      	mov	r3, r0
 8003b94:	460c      	mov	r4, r1
 8003b96:	ec44 3b17 	vmov	d7, r3, r4
 8003b9a:	eeb0 0a47 	vmov.f32	s0, s14
 8003b9e:	eef0 0a67 	vmov.f32	s1, s15
 8003ba2:	f015 fdd9 	bl	8019758 <sin>
 8003ba6:	ec51 0b10 	vmov	r0, r1, d0
 8003baa:	a32d      	add	r3, pc, #180	; (adr r3, 8003c60 <kinematicForward+0x250>)
 8003bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb0:	f7fc fd22 	bl	80005f8 <__aeabi_dmul>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	460c      	mov	r4, r1
	y =   a1*sin(pnt->Theta1)
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4623      	mov	r3, r4
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	4631      	mov	r1, r6
 8003bc0:	f7fc fb64 	bl	800028c <__adddf3>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	460c      	mov	r4, r1
 8003bc8:	e9c7 3406 	strd	r3, r4, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	4623      	mov	r3, r4
 8003bd6:	a126      	add	r1, pc, #152	; (adr r1, 8003c70 <kinematicForward+0x260>)
 8003bd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bdc:	f7fc fb54 	bl	8000288 <__aeabi_dsub>
 8003be0:	4603      	mov	r3, r0
 8003be2:	460c      	mov	r4, r1
 8003be4:	4618      	mov	r0, r3
 8003be6:	4621      	mov	r1, r4
 8003be8:	a323      	add	r3, pc, #140	; (adr r3, 8003c78 <kinematicForward+0x268>)
 8003bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bee:	f7fc fb4b 	bl	8000288 <__aeabi_dsub>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	460c      	mov	r4, r1
 8003bf6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8003c06:	461a      	mov	r2, r3
 8003c08:	4623      	mov	r3, r4
 8003c0a:	f7fc fb3f 	bl	800028c <__adddf3>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	460c      	mov	r4, r1
 8003c12:	4618      	mov	r0, r3
 8003c14:	4621      	mov	r1, r4
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	4623      	mov	r3, r4
 8003c20:	f7fc fb32 	bl	8000288 <__aeabi_dsub>
 8003c24:	4603      	mov	r3, r0
 8003c26:	460c      	mov	r4, r1
 8003c28:	e9c7 3402 	strd	r3, r4, [r7, #8]

	pnt->x = x;
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003c32:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	pnt->y = y;
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003c3c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	pnt->z = z;
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003c46:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	pnt->roll = roll;
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003c50:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	return TRUE;
 8003c54:	2301      	movs	r3, #1
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	372c      	adds	r7, #44	; 0x2c
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	80000000 	.word	0x80000000
 8003c64:	40402e14 	.word	0x40402e14
 8003c68:	00000000 	.word	0x00000000
 8003c6c:	4068a000 	.word	0x4068a000
 8003c70:	00000000 	.word	0x00000000
 8003c74:	406a6000 	.word	0x406a6000
 8003c78:	e0000000 	.word	0xe0000000
 8003c7c:	40536b22 	.word	0x40536b22
 8003c80:	40640000 	.word	0x40640000
 8003c84:	00000000 	.word	0x00000000

08003c88 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 8003c88:	b082      	sub	sp, #8
 8003c8a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c8e:	b0a0      	sub	sp, #128	; 0x80
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8003c98:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8003ca2:	a1f2      	add	r1, pc, #968	; (adr r1, 800406c <kinematicInverse+0x3e4>)
 8003ca4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ca8:	f7fc faee 	bl	8000288 <__aeabi_dsub>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	; 0x48
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8003cc0:	eeb0 0a47 	vmov.f32	s0, s14
 8003cc4:	eef0 0a67 	vmov.f32	s1, s15
 8003cc8:	f015 fcb6 	bl	8019638 <cos>
 8003ccc:	ec51 0b10 	vmov	r0, r1, d0
 8003cd0:	a3e8      	add	r3, pc, #928	; (adr r3, 8004074 <kinematicInverse+0x3ec>)
 8003cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd6:	f7fc fc8f 	bl	80005f8 <__aeabi_dmul>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4650      	mov	r0, sl
 8003ce0:	4659      	mov	r1, fp
 8003ce2:	f7fc fad1 	bl	8000288 <__aeabi_dsub>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8003cfa:	eeb0 0a47 	vmov.f32	s0, s14
 8003cfe:	eef0 0a67 	vmov.f32	s1, s15
 8003d02:	f015 fd29 	bl	8019758 <sin>
 8003d06:	ec51 0b10 	vmov	r0, r1, d0
 8003d0a:	a3da      	add	r3, pc, #872	; (adr r3, 8004074 <kinematicInverse+0x3ec>)
 8003d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d10:	f7fc fc72 	bl	80005f8 <__aeabi_dmul>
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4650      	mov	r0, sl
 8003d1a:	4659      	mov	r1, fp
 8003d1c:	f7fc fab4 	bl	8000288 <__aeabi_dsub>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 8003d28:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003d2c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003d30:	f7fc fc62 	bl	80005f8 <__aeabi_dmul>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4692      	mov	sl, r2
 8003d3a:	469b      	mov	fp, r3
 8003d3c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d40:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003d44:	f7fc fc58 	bl	80005f8 <__aeabi_dmul>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4650      	mov	r0, sl
 8003d4e:	4659      	mov	r1, fp
 8003d50:	f7fc fa9c 	bl	800028c <__adddf3>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4610      	mov	r0, r2
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	a3c7      	add	r3, pc, #796	; (adr r3, 800407c <kinematicInverse+0x3f4>)
 8003d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d62:	f7fc fa91 	bl	8000288 <__aeabi_dsub>
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	f04f 0200 	mov.w	r2, #0
 8003d72:	4bbb      	ldr	r3, [pc, #748]	; (8004060 <kinematicInverse+0x3d8>)
 8003d74:	f7fc fa88 	bl	8000288 <__aeabi_dsub>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	4619      	mov	r1, r3
 8003d80:	a3b3      	add	r3, pc, #716	; (adr r3, 8004050 <kinematicInverse+0x3c8>)
 8003d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d86:	f7fc fd61 	bl	800084c <__aeabi_ddiv>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 8003d92:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d96:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003d9a:	f7fc fc2d 	bl	80005f8 <__aeabi_dmul>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	f04f 0000 	mov.w	r0, #0
 8003da6:	49af      	ldr	r1, [pc, #700]	; (8004064 <kinematicInverse+0x3dc>)
 8003da8:	f7fc fa6e 	bl	8000288 <__aeabi_dsub>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003dc0:	f7fc fe8c 	bl	8000adc <__aeabi_dcmplt>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <kinematicInverse+0x146>
		return FALSE;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	e136      	b.n	800403c <kinematicInverse+0x3b4>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 8003dce:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8003dd2:	f015 fd4b 	bl	801986c <sqrt>
 8003dd6:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 8003dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ddc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003de0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003de4:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 8003de6:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8003dea:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8003dee:	f015 fd3b 	bl	8019868 <atan2>
 8003df2:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 8003df6:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8003dfa:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8003dfe:	f015 fd33 	bl	8019868 <atan2>
 8003e02:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 8003e06:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8003e0a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003e0e:	f7fc fa3b 	bl	8000288 <__aeabi_dsub>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	4614      	mov	r4, r2
 8003e18:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003e1c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8003e20:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e24:	f7fc fa30 	bl	8000288 <__aeabi_dsub>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4690      	mov	r8, r2
 8003e2e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003e32:	4642      	mov	r2, r8
 8003e34:	464b      	mov	r3, r9
 8003e36:	4620      	mov	r0, r4
 8003e38:	4629      	mov	r1, r5
 8003e3a:	f7fc fe59 	bl	8000af0 <__aeabi_dcmple>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 8003e44:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003e48:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 8003e4c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003e50:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8003e54:	e007      	b.n	8003e66 <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 8003e56:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8003e5a:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 8003e5e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003e62:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	4b7f      	ldr	r3, [pc, #508]	; (8004068 <kinematicInverse+0x3e0>)
 8003e6c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003e70:	f7fc fbc2 	bl	80005f8 <__aeabi_dmul>
 8003e74:	4603      	mov	r3, r0
 8003e76:	460c      	mov	r4, r1
 8003e78:	4618      	mov	r0, r3
 8003e7a:	4621      	mov	r1, r4
 8003e7c:	a376      	add	r3, pc, #472	; (adr r3, 8004058 <kinematicInverse+0x3d0>)
 8003e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e82:	f7fc fa03 	bl	800028c <__adddf3>
 8003e86:	4603      	mov	r3, r0
 8003e88:	460c      	mov	r4, r1
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	4621      	mov	r1, r4
 8003e8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e92:	f7fc fbb1 	bl	80005f8 <__aeabi_dmul>
 8003e96:	4603      	mov	r3, r0
 8003e98:	460c      	mov	r4, r1
 8003e9a:	4625      	mov	r5, r4
 8003e9c:	461c      	mov	r4, r3
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	4b71      	ldr	r3, [pc, #452]	; (8004068 <kinematicInverse+0x3e0>)
 8003ea4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003ea8:	f7fc fba6 	bl	80005f8 <__aeabi_dmul>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003eb8:	f7fc fb9e 	bl	80005f8 <__aeabi_dmul>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4620      	mov	r0, r4
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	f7fc f9e0 	bl	8000288 <__aeabi_dsub>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	460c      	mov	r4, r1
 8003ecc:	4625      	mov	r5, r4
 8003ece:	461c      	mov	r4, r3
 8003ed0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003ed4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003ed8:	f7fc fb8e 	bl	80005f8 <__aeabi_dmul>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4690      	mov	r8, r2
 8003ee2:	4699      	mov	r9, r3
 8003ee4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ee8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003eec:	f7fc fb84 	bl	80005f8 <__aeabi_dmul>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4640      	mov	r0, r8
 8003ef6:	4649      	mov	r1, r9
 8003ef8:	f7fc f9c8 	bl	800028c <__adddf3>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4620      	mov	r0, r4
 8003f02:	4629      	mov	r1, r5
 8003f04:	f7fc fca2 	bl	800084c <__aeabi_ddiv>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	460c      	mov	r4, r1
 8003f0c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	4b54      	ldr	r3, [pc, #336]	; (8004068 <kinematicInverse+0x3e0>)
 8003f16:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003f1a:	f7fc fb6d 	bl	80005f8 <__aeabi_dmul>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	460c      	mov	r4, r1
 8003f22:	4618      	mov	r0, r3
 8003f24:	4621      	mov	r1, r4
 8003f26:	a34c      	add	r3, pc, #304	; (adr r3, 8004058 <kinematicInverse+0x3d0>)
 8003f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2c:	f7fc f9ae 	bl	800028c <__adddf3>
 8003f30:	4603      	mov	r3, r0
 8003f32:	460c      	mov	r4, r1
 8003f34:	4618      	mov	r0, r3
 8003f36:	4621      	mov	r1, r4
 8003f38:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003f3c:	f7fc fb5c 	bl	80005f8 <__aeabi_dmul>
 8003f40:	4603      	mov	r3, r0
 8003f42:	460c      	mov	r4, r1
 8003f44:	4625      	mov	r5, r4
 8003f46:	461c      	mov	r4, r3
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	4b46      	ldr	r3, [pc, #280]	; (8004068 <kinematicInverse+0x3e0>)
 8003f4e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003f52:	f7fc fb51 	bl	80005f8 <__aeabi_dmul>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f62:	f7fc fb49 	bl	80005f8 <__aeabi_dmul>
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	f7fc f98d 	bl	800028c <__adddf3>
 8003f72:	4603      	mov	r3, r0
 8003f74:	460c      	mov	r4, r1
 8003f76:	4625      	mov	r5, r4
 8003f78:	461c      	mov	r4, r3
 8003f7a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003f7e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003f82:	f7fc fb39 	bl	80005f8 <__aeabi_dmul>
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	4690      	mov	r8, r2
 8003f8c:	4699      	mov	r9, r3
 8003f8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f92:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003f96:	f7fc fb2f 	bl	80005f8 <__aeabi_dmul>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4640      	mov	r0, r8
 8003fa0:	4649      	mov	r1, r9
 8003fa2:	f7fc f973 	bl	800028c <__adddf3>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4620      	mov	r0, r4
 8003fac:	4629      	mov	r1, r5
 8003fae:	f7fc fc4d 	bl	800084c <__aeabi_ddiv>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	460c      	mov	r4, r1
 8003fb6:	e9c7 3406 	strd	r3, r4, [r7, #24]
	theta1 = atan2(s1,c1);
 8003fba:	ed97 1b06 	vldr	d1, [r7, #24]
 8003fbe:	ed97 0b08 	vldr	d0, [r7, #32]
 8003fc2:	f015 fc51 	bl	8019868 <atan2>
 8003fc6:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 8003fca:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003fce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003fd2:	f7fc f95b 	bl	800028c <__adddf3>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	460c      	mov	r4, r1
 8003fda:	4618      	mov	r0, r3
 8003fdc:	4621      	mov	r1, r4
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	4623      	mov	r3, r4
 8003fe8:	f7fc f94e 	bl	8000288 <__aeabi_dsub>
 8003fec:	4603      	mov	r3, r0
 8003fee:	460c      	mov	r4, r1
 8003ff0:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 8003ff4:	ed97 3b02 	vldr	d3, [r7, #8]
 8003ff8:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 8003ffc:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 8004000:	ed97 0b04 	vldr	d0, [r7, #16]
 8004004:	f005 ffe8 	bl	8009fd8 <scaraCheckWorkSpace4>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <kinematicInverse+0x38a>
		return FALSE; // Over workspace !!!
 800400e:	2300      	movs	r3, #0
 8004010:	e014      	b.n	800403c <kinematicInverse+0x3b4>
	}
	pnt->Theta1 = theta1;
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004018:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	pnt->Theta2 = theta2;
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8004022:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	pnt->D3		= d3;
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800402c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	pnt->Theta4 = theta4;
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004036:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	return TRUE; // All is well
 800403a:	2301      	movs	r3, #1
}
 800403c:	4618      	mov	r0, r3
 800403e:	3780      	adds	r7, #128	; 0x80
 8004040:	46bd      	mov	sp, r7
 8004042:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004046:	b002      	add	sp, #8
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	f3af 8000 	nop.w
 8004050:	00000000 	.word	0x00000000
 8004054:	40eec800 	.word	0x40eec800
 8004058:	00000000 	.word	0x00000000
 800405c:	4068a000 	.word	0x4068a000
 8004060:	40d90000 	.word	0x40d90000
 8004064:	3ff00000 	.word	0x3ff00000
 8004068:	40640000 	.word	0x40640000
 800406c:	80000000 	.word	0x80000000
 8004070:	4060aa6e 	.word	0x4060aa6e
 8004074:	80000000 	.word	0x80000000
 8004078:	40402e14 	.word	0x40402e14
 800407c:	00000000 	.word	0x00000000
 8004080:	40e2f320 	.word	0x40e2f320

08004084 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004088:	f007 f8d2 	bl	800b230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800408c:	f000 f812 	bl	80040b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004090:	f7ff fc04 	bl	800389c <MX_GPIO_Init>
  MX_DMA_Init();
 8004094:	f7fd feea 	bl	8001e6c <MX_DMA_Init>
  MX_UART4_Init();
 8004098:	f006 ffcc 	bl	800b034 <MX_UART4_Init>
  MX_FSMC_Init();
 800409c:	f7ff fb36 	bl	800370c <MX_FSMC_Init>
  MX_TIM7_Init();
 80040a0:	f006 ff56 	bl	800af50 <MX_TIM7_Init>
  MX_TIM2_Init();
 80040a4:	f006 ff06 	bl	800aeb4 <MX_TIM2_Init>
  //lowlayer_writePulse(0, 0, 0, 0);
  //HAL_Delay(10);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80040a8:	f7fd ff1a 	bl	8001ee0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80040ac:	f00e f921 	bl	80122f2 <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 80040b0:	e7fe      	b.n	80040b0 <main+0x2c>
	...

080040b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b094      	sub	sp, #80	; 0x50
 80040b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040ba:	f107 0320 	add.w	r3, r7, #32
 80040be:	2230      	movs	r2, #48	; 0x30
 80040c0:	2100      	movs	r1, #0
 80040c2:	4618      	mov	r0, r3
 80040c4:	f011 fcee 	bl	8015aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040c8:	f107 030c 	add.w	r3, r7, #12
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	605a      	str	r2, [r3, #4]
 80040d2:	609a      	str	r2, [r3, #8]
 80040d4:	60da      	str	r2, [r3, #12]
 80040d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80040d8:	2300      	movs	r3, #0
 80040da:	60bb      	str	r3, [r7, #8]
 80040dc:	4b28      	ldr	r3, [pc, #160]	; (8004180 <SystemClock_Config+0xcc>)
 80040de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e0:	4a27      	ldr	r2, [pc, #156]	; (8004180 <SystemClock_Config+0xcc>)
 80040e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e6:	6413      	str	r3, [r2, #64]	; 0x40
 80040e8:	4b25      	ldr	r3, [pc, #148]	; (8004180 <SystemClock_Config+0xcc>)
 80040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f0:	60bb      	str	r3, [r7, #8]
 80040f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80040f4:	2300      	movs	r3, #0
 80040f6:	607b      	str	r3, [r7, #4]
 80040f8:	4b22      	ldr	r3, [pc, #136]	; (8004184 <SystemClock_Config+0xd0>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a21      	ldr	r2, [pc, #132]	; (8004184 <SystemClock_Config+0xd0>)
 80040fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004102:	6013      	str	r3, [r2, #0]
 8004104:	4b1f      	ldr	r3, [pc, #124]	; (8004184 <SystemClock_Config+0xd0>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800410c:	607b      	str	r3, [r7, #4]
 800410e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004110:	2301      	movs	r3, #1
 8004112:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004114:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800411a:	2302      	movs	r3, #2
 800411c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800411e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004122:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004124:	2308      	movs	r3, #8
 8004126:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004128:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800412c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800412e:	2302      	movs	r3, #2
 8004130:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004132:	2307      	movs	r3, #7
 8004134:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004136:	f107 0320 	add.w	r3, r7, #32
 800413a:	4618      	mov	r0, r3
 800413c:	f009 f8ea 	bl	800d314 <HAL_RCC_OscConfig>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8004146:	f000 f831 	bl	80041ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800414a:	230f      	movs	r3, #15
 800414c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800414e:	2302      	movs	r3, #2
 8004150:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004152:	2300      	movs	r3, #0
 8004154:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004156:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800415a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800415c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004160:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004162:	f107 030c 	add.w	r3, r7, #12
 8004166:	2105      	movs	r1, #5
 8004168:	4618      	mov	r0, r3
 800416a:	f009 fb43 	bl	800d7f4 <HAL_RCC_ClockConfig>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004174:	f000 f81a 	bl	80041ac <Error_Handler>
  }
}
 8004178:	bf00      	nop
 800417a:	3750      	adds	r7, #80	; 0x50
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40023800 	.word	0x40023800
 8004184:	40007000 	.word	0x40007000

08004188 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a04      	ldr	r2, [pc, #16]	; (80041a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d101      	bne.n	800419e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800419a:	f007 f86b 	bl	800b274 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800419e:	bf00      	nop
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40001000 	.word	0x40001000

080041ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80041b0:	bf00      	nop
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	460b      	mov	r3, r1
 80041c4:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <ringBuff_PushChar+0x1a>
		return FALSE;
 80041d0:	2300      	movs	r3, #0
 80041d2:	e024      	b.n	800421e <ringBuff_PushChar+0x64>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	78f9      	ldrb	r1, [r7, #3]
 80041de:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80041e6:	3301      	adds	r3, #1
 80041e8:	425a      	negs	r2, r3
 80041ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041ee:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80041f2:	bf58      	it	pl
 80041f4:	4253      	negpl	r3, r2
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
			if (ringbuff->head == ringbuff->tail) {
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004208:	429a      	cmp	r2, r3
 800420a:	d103      	bne.n	8004214 <ringBuff_PushChar+0x5a>
				ringbuff->isFull_Flag = TRUE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			}
			ringbuff->isEmpty_Flag = FALSE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			return TRUE;
 800421c:	2301      	movs	r3, #1
	}
}
 800421e:	4618      	mov	r0, r3
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <ringBuff_PopChar+0x18>
		return FALSE;
 800423e:	2300      	movs	r3, #0
 8004240:	e025      	b.n	800428e <ringBuff_PopChar+0x64>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	5cd2      	ldrb	r2, [r2, r3]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004256:	3301      	adds	r3, #1
 8004258:	425a      	negs	r2, r3
 800425a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800425e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004262:	bf58      	it	pl
 8004264:	4253      	negpl	r3, r2
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			if (ringbuff->head == ringbuff->tail) {
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004278:	429a      	cmp	r2, r3
 800427a:	d103      	bne.n	8004284 <ringBuff_PopChar+0x5a>
				ringbuff->isEmpty_Flag = TRUE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			}
			ringbuff->isFull_Flag = FALSE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			return TRUE;
 800428c:	2301      	movs	r3, #1
	}
}
 800428e:	4618      	mov	r0, r3
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 800429a:	b580      	push	{r7, lr}
 800429c:	b086      	sub	sp, #24
 800429e:	af00      	add	r7, sp, #0
 80042a0:	60f8      	str	r0, [r7, #12]
 80042a2:	60b9      	str	r1, [r7, #8]
 80042a4:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 80042a6:	2300      	movs	r3, #0
 80042a8:	82fb      	strh	r3, [r7, #22]
 80042aa:	e011      	b.n	80042d0 <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 80042ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	4413      	add	r3, r2
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	4619      	mov	r1, r3
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f7ff ff7e 	bl	80041ba <ringBuff_PushChar>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00b      	beq.n	80042dc <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 80042c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	3301      	adds	r3, #1
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	82fb      	strh	r3, [r7, #22]
 80042d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	dce8      	bgt.n	80042ac <ringBuff_PushArray+0x12>
 80042da:	e000      	b.n	80042de <ringBuff_PushArray+0x44>
			break;
 80042dc:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 80042de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b086      	sub	sp, #24
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 80042f6:	2300      	movs	r3, #0
 80042f8:	617b      	str	r3, [r7, #20]
 80042fa:	e00c      	b.n	8004316 <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	4413      	add	r3, r2
 8004302:	4619      	mov	r1, r3
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f7ff ff90 	bl	800422a <ringBuff_PopChar>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d007      	beq.n	8004320 <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	3301      	adds	r3, #1
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	429a      	cmp	r2, r3
 800431c:	dbee      	blt.n	80042fc <ringBuff_PopArray+0x12>
 800431e:	e000      	b.n	8004322 <ringBuff_PopArray+0x38>
			break;
 8004320:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 8004322:	697b      	ldr	r3, [r7, #20]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, const char* cmp_char) {
 800432c:	b580      	push	{r7, lr}
 800432e:	b088      	sub	sp, #32
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
	int32_t index = ringbuff->tail;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800433c:	61fb      	str	r3, [r7, #28]
	int32_t distance = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	61bb      	str	r3, [r7, #24]
	int32_t sync_state = 0;
 8004342:	2300      	movs	r3, #0
 8004344:	617b      	str	r3, [r7, #20]
	int32_t head_ptr = ringbuff->head;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800434c:	60fb      	str	r3, [r7, #12]
	int32_t number_of_state = strlen(cmp_char);
 800434e:	6838      	ldr	r0, [r7, #0]
 8004350:	f7fb ff3e 	bl	80001d0 <strlen>
 8004354:	4603      	mov	r3, r0
 8004356:	60bb      	str	r3, [r7, #8]
	if (ringbuff->isFull_Flag) {
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 800435e:	2b00      	cmp	r3, #0
 8004360:	d066      	beq.n	8004430 <ringBuff_DistanceOf+0x104>
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8004362:	2300      	movs	r3, #0
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	e030      	b.n	80043ca <ringBuff_DistanceOf+0x9e>
	            if(ringbuff->Array[index] == cmp_char[sync_state]){
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	4413      	add	r3, r2
 800436e:	781a      	ldrb	r2, [r3, #0]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	6839      	ldr	r1, [r7, #0]
 8004374:	440b      	add	r3, r1
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d103      	bne.n	8004384 <ringBuff_DistanceOf+0x58>
	                sync_state++;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	3301      	adds	r3, #1
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	e00c      	b.n	800439e <ringBuff_DistanceOf+0x72>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	4413      	add	r3, r2
 800438a:	781a      	ldrb	r2, [r3, #0]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	d102      	bne.n	800439a <ringBuff_DistanceOf+0x6e>
	                sync_state = 1;
 8004394:	2301      	movs	r3, #1
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	e001      	b.n	800439e <ringBuff_DistanceOf+0x72>
	            }else{
	                sync_state = 0;
 800439a:	2300      	movs	r3, #0
 800439c:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d101      	bne.n	80043aa <ringBuff_DistanceOf+0x7e>
	                return distance;
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	e048      	b.n	800443c <ringBuff_DistanceOf+0x110>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	3301      	adds	r3, #1
 80043ae:	61bb      	str	r3, [r7, #24]
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	3301      	adds	r3, #1
 80043b4:	613b      	str	r3, [r7, #16]
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	3301      	adds	r3, #1
 80043ba:	425a      	negs	r2, r3
 80043bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043c0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80043c4:	bf58      	it	pl
 80043c6:	4253      	negpl	r3, r2
 80043c8:	61fb      	str	r3, [r7, #28]
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d0:	dbca      	blt.n	8004368 <ringBuff_DistanceOf+0x3c>
 80043d2:	e031      	b.n	8004438 <ringBuff_DistanceOf+0x10c>
	        }
	} else {
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
	        if(ringbuff->Array[index] == cmp_char[sync_state]){
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	4413      	add	r3, r2
 80043da:	781a      	ldrb	r2, [r3, #0]
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	6839      	ldr	r1, [r7, #0]
 80043e0:	440b      	add	r3, r1
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d103      	bne.n	80043f0 <ringBuff_DistanceOf+0xc4>
	                //LOG_REPORT("dis1", ringbuff->.tail);
	                sync_state++;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	3301      	adds	r3, #1
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	e00c      	b.n	800440a <ringBuff_DistanceOf+0xde>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	4413      	add	r3, r2
 80043f6:	781a      	ldrb	r2, [r3, #0]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d102      	bne.n	8004406 <ringBuff_DistanceOf+0xda>
	                sync_state = 1;
 8004400:	2301      	movs	r3, #1
 8004402:	617b      	str	r3, [r7, #20]
 8004404:	e001      	b.n	800440a <ringBuff_DistanceOf+0xde>
	            }else{
	                sync_state = 0;
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	429a      	cmp	r2, r3
 8004410:	d101      	bne.n	8004416 <ringBuff_DistanceOf+0xea>
	                //LOG_REPORT("dis", distance);
	                return distance;
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	e012      	b.n	800443c <ringBuff_DistanceOf+0x110>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	3301      	adds	r3, #1
 800441a:	61bb      	str	r3, [r7, #24]
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	3301      	adds	r3, #1
 8004420:	425a      	negs	r2, r3
 8004422:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004426:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800442a:	bf58      	it	pl
 800442c:	4253      	negpl	r3, r2
 800442e:	61fb      	str	r3, [r7, #28]
 8004430:	69fa      	ldr	r2, [r7, #28]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	429a      	cmp	r2, r3
 8004436:	d1cd      	bne.n	80043d4 <ringBuff_DistanceOf+0xa8>
	        }
	    //LOG_REPORT("hai", 2);
	}

	return -1;
 8004438:	f04f 33ff 	mov.w	r3, #4294967295
}
 800443c:	4618      	mov	r0, r3
 800443e:	3720      	adds	r7, #32
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {3, 5, 5, 10};

void	lowlayer_scanReset(void) {
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
	lowlayer_resetEncoder();
 8004448:	f000 fdfe 	bl	8005048 <lowlayer_resetEncoder>
	pulse_accumulate[0] = 0;
 800444c:	4b10      	ldr	r3, [pc, #64]	; (8004490 <lowlayer_scanReset+0x4c>)
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]
	pulse_accumulate[1] = 0;
 8004452:	4b0f      	ldr	r3, [pc, #60]	; (8004490 <lowlayer_scanReset+0x4c>)
 8004454:	2200      	movs	r2, #0
 8004456:	605a      	str	r2, [r3, #4]
	pulse_accumulate[2] = 0;
 8004458:	4b0d      	ldr	r3, [pc, #52]	; (8004490 <lowlayer_scanReset+0x4c>)
 800445a:	2200      	movs	r2, #0
 800445c:	609a      	str	r2, [r3, #8]
	pulse_accumulate[3] = 0;
 800445e:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <lowlayer_scanReset+0x4c>)
 8004460:	2200      	movs	r2, #0
 8004462:	60da      	str	r2, [r3, #12]

	position_encoder[0] = 0;
 8004464:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <lowlayer_scanReset+0x50>)
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]
	position_encoder[1] = 0;
 800446a:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <lowlayer_scanReset+0x50>)
 800446c:	2200      	movs	r2, #0
 800446e:	605a      	str	r2, [r3, #4]
	position_encoder[2] = 0;
 8004470:	4b08      	ldr	r3, [pc, #32]	; (8004494 <lowlayer_scanReset+0x50>)
 8004472:	2200      	movs	r2, #0
 8004474:	609a      	str	r2, [r3, #8]

	scan_flag = 0;
 8004476:	4b08      	ldr	r3, [pc, #32]	; (8004498 <lowlayer_scanReset+0x54>)
 8004478:	2200      	movs	r2, #0
 800447a:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 800447c:	4b07      	ldr	r3, [pc, #28]	; (800449c <lowlayer_scanReset+0x58>)
 800447e:	2200      	movs	r2, #0
 8004480:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 8004482:	2200      	movs	r2, #0
 8004484:	2108      	movs	r1, #8
 8004486:	4806      	ldr	r0, [pc, #24]	; (80044a0 <lowlayer_scanReset+0x5c>)
 8004488:	f007 fd50 	bl	800bf2c <HAL_GPIO_WritePin>
}
 800448c:	bf00      	nop
 800448e:	bd80      	pop	{r7, pc}
 8004490:	20005a90 	.word	0x20005a90
 8004494:	20005aa4 	.word	0x20005aa4
 8004498:	20005aa0 	.word	0x20005aa0
 800449c:	20005ac0 	.word	0x20005ac0
 80044a0:	40020c00 	.word	0x40020c00
 80044a4:	00000000 	.word	0x00000000

080044a8 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 80044a8:	b590      	push	{r4, r7, lr}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 80044ae:	2300      	movs	r3, #0
 80044b0:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 80044b2:	f000 fe87 	bl	80051c4 <lowlayer_updateLimit>
	if (state_scan < 4) {
 80044b6:	4b98      	ldr	r3, [pc, #608]	; (8004718 <lowlayer_scanFlow+0x270>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b03      	cmp	r3, #3
 80044bc:	d837      	bhi.n	800452e <lowlayer_scanFlow+0x86>
		if (limit_switch[3 - state_scan] == 0) {
 80044be:	4b96      	ldr	r3, [pc, #600]	; (8004718 <lowlayer_scanFlow+0x270>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	f1c3 0303 	rsb	r3, r3, #3
 80044c6:	4a95      	ldr	r2, [pc, #596]	; (800471c <lowlayer_scanFlow+0x274>)
 80044c8:	5cd3      	ldrb	r3, [r2, r3]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d121      	bne.n	8004512 <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 80044ce:	4b92      	ldr	r3, [pc, #584]	; (8004718 <lowlayer_scanFlow+0x270>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	f1c3 0203 	rsb	r2, r3, #3
 80044d6:	4b90      	ldr	r3, [pc, #576]	; (8004718 <lowlayer_scanFlow+0x270>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	f1c3 0303 	rsb	r3, r3, #3
 80044de:	4990      	ldr	r1, [pc, #576]	; (8004720 <lowlayer_scanFlow+0x278>)
 80044e0:	568a      	ldrsb	r2, [r1, r2]
 80044e2:	f107 0108 	add.w	r1, r7, #8
 80044e6:	440b      	add	r3, r1
 80044e8:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 80044ec:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	425b      	negs	r3, r3
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	b258      	sxtb	r0, r3
 80044f8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80044fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	425b      	negs	r3, r3
 8004504:	b2db      	uxtb	r3, r3
 8004506:	b25a      	sxtb	r2, r3
 8004508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450c:	f000 fcd8 	bl	8004ec0 <lowlayer_writePulse>
 8004510:	e00b      	b.n	800452a <lowlayer_scanFlow+0x82>
		} else {
			state_scan++;
 8004512:	4b81      	ldr	r3, [pc, #516]	; (8004718 <lowlayer_scanFlow+0x270>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	3301      	adds	r3, #1
 8004518:	b2da      	uxtb	r2, r3
 800451a:	4b7f      	ldr	r3, [pc, #508]	; (8004718 <lowlayer_scanFlow+0x270>)
 800451c:	701a      	strb	r2, [r3, #0]
			lowlayer_writePulse(0, 0, 0, 0);
 800451e:	2300      	movs	r3, #0
 8004520:	2200      	movs	r2, #0
 8004522:	2100      	movs	r1, #0
 8004524:	2000      	movs	r0, #0
 8004526:	f000 fccb 	bl	8004ec0 <lowlayer_writePulse>
		}

		return FALSE;
 800452a:	2300      	movs	r3, #0
 800452c:	e0d8      	b.n	80046e0 <lowlayer_scanFlow+0x238>
	} else {
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 800452e:	2201      	movs	r2, #1
 8004530:	2108      	movs	r1, #8
 8004532:	487c      	ldr	r0, [pc, #496]	; (8004724 <lowlayer_scanFlow+0x27c>)
 8004534:	f007 fcfa 	bl	800bf2c <HAL_GPIO_WritePin>
		lowlayer_updateCapture();
 8004538:	f000 fe28 	bl	800518c <lowlayer_updateCapture>
		lowlayer_writePulse(0, 0, 0, 0);
 800453c:	2300      	movs	r3, #0
 800453e:	2200      	movs	r2, #0
 8004540:	2100      	movs	r1, #0
 8004542:	2000      	movs	r0, #0
 8004544:	f000 fcbc 	bl	8004ec0 <lowlayer_writePulse>
		scan_flag = 1;
 8004548:	4b77      	ldr	r3, [pc, #476]	; (8004728 <lowlayer_scanFlow+0x280>)
 800454a:	2201      	movs	r2, #1
 800454c:	701a      	strb	r2, [r3, #0]
		// Update offset
		offset_encoder[0] 	= position_capture[0];
 800454e:	4b77      	ldr	r3, [pc, #476]	; (800472c <lowlayer_scanFlow+0x284>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a77      	ldr	r2, [pc, #476]	; (8004730 <lowlayer_scanFlow+0x288>)
 8004554:	6013      	str	r3, [r2, #0]
		offset_encoder[1] 	= position_capture[1];
 8004556:	4b75      	ldr	r3, [pc, #468]	; (800472c <lowlayer_scanFlow+0x284>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	4a75      	ldr	r2, [pc, #468]	; (8004730 <lowlayer_scanFlow+0x288>)
 800455c:	6053      	str	r3, [r2, #4]
		offset_encoder[2] 	= position_capture[2];
 800455e:	4b73      	ldr	r3, [pc, #460]	; (800472c <lowlayer_scanFlow+0x284>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	4a73      	ldr	r2, [pc, #460]	; (8004730 <lowlayer_scanFlow+0x288>)
 8004564:	6093      	str	r3, [r2, #8]
		offset_stepper		= pulse_accumulate[3];
 8004566:	4b73      	ldr	r3, [pc, #460]	; (8004734 <lowlayer_scanFlow+0x28c>)
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	4a73      	ldr	r2, [pc, #460]	; (8004738 <lowlayer_scanFlow+0x290>)
 800456c:	6013      	str	r3, [r2, #0]
		// LOG offset
		LOG_REPORT("offset encoder 0", offset_encoder[0]);
 800456e:	4b70      	ldr	r3, [pc, #448]	; (8004730 <lowlayer_scanFlow+0x288>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	b29b      	uxth	r3, r3
 8004574:	4619      	mov	r1, r3
 8004576:	4871      	ldr	r0, [pc, #452]	; (800473c <lowlayer_scanFlow+0x294>)
 8004578:	f7fd fbc0 	bl	8001cfc <LOG_REPORT>
		LOG_REPORT("offset encoder 1", offset_encoder[1]);
 800457c:	4b6c      	ldr	r3, [pc, #432]	; (8004730 <lowlayer_scanFlow+0x288>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	b29b      	uxth	r3, r3
 8004582:	4619      	mov	r1, r3
 8004584:	486e      	ldr	r0, [pc, #440]	; (8004740 <lowlayer_scanFlow+0x298>)
 8004586:	f7fd fbb9 	bl	8001cfc <LOG_REPORT>
		LOG_REPORT("offset encoder 2", offset_encoder[2]);
 800458a:	4b69      	ldr	r3, [pc, #420]	; (8004730 <lowlayer_scanFlow+0x288>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	b29b      	uxth	r3, r3
 8004590:	4619      	mov	r1, r3
 8004592:	486c      	ldr	r0, [pc, #432]	; (8004744 <lowlayer_scanFlow+0x29c>)
 8004594:	f7fd fbb2 	bl	8001cfc <LOG_REPORT>
		LOG_REPORT("offset stepper", offset_stepper);
 8004598:	4b67      	ldr	r3, [pc, #412]	; (8004738 <lowlayer_scanFlow+0x290>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	b29b      	uxth	r3, r3
 800459e:	4619      	mov	r1, r3
 80045a0:	4869      	ldr	r0, [pc, #420]	; (8004748 <lowlayer_scanFlow+0x2a0>)
 80045a2:	f7fd fbab 	bl	8001cfc <LOG_REPORT>

		offset_setpoint[0]	= HARD_LIM0_NEG
				- DIR_ENCODER_0*offset_encoder[0]*2.0*PI/ENCODER_J0;
 80045a6:	4b62      	ldr	r3, [pc, #392]	; (8004730 <lowlayer_scanFlow+0x288>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	ee07 3a90 	vmov	s15, r3
 80045ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045b2:	ee17 0a90 	vmov	r0, s15
 80045b6:	f7fb ffc7 	bl	8000548 <__aeabi_f2d>
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	f7fb fe65 	bl	800028c <__adddf3>
 80045c2:	4603      	mov	r3, r0
 80045c4:	460c      	mov	r4, r1
 80045c6:	4618      	mov	r0, r3
 80045c8:	4621      	mov	r1, r4
 80045ca:	a347      	add	r3, pc, #284	; (adr r3, 80046e8 <lowlayer_scanFlow+0x240>)
 80045cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d0:	f7fc f812 	bl	80005f8 <__aeabi_dmul>
 80045d4:	4603      	mov	r3, r0
 80045d6:	460c      	mov	r4, r1
 80045d8:	4618      	mov	r0, r3
 80045da:	4621      	mov	r1, r4
 80045dc:	a344      	add	r3, pc, #272	; (adr r3, 80046f0 <lowlayer_scanFlow+0x248>)
 80045de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e2:	f7fc f933 	bl	800084c <__aeabi_ddiv>
 80045e6:	4603      	mov	r3, r0
 80045e8:	460c      	mov	r4, r1
 80045ea:	461a      	mov	r2, r3
 80045ec:	4623      	mov	r3, r4
 80045ee:	a142      	add	r1, pc, #264	; (adr r1, 80046f8 <lowlayer_scanFlow+0x250>)
 80045f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045f4:	f7fb fe48 	bl	8000288 <__aeabi_dsub>
 80045f8:	4603      	mov	r3, r0
 80045fa:	460c      	mov	r4, r1
		offset_setpoint[0]	= HARD_LIM0_NEG
 80045fc:	4a53      	ldr	r2, [pc, #332]	; (800474c <lowlayer_scanFlow+0x2a4>)
 80045fe:	e9c2 3400 	strd	r3, r4, [r2]
		offset_setpoint[1]	= HARD_LIM1_POS
				- DIR_ENCODER_1*offset_encoder[1]*2.0*PI/ENCODER_J1;
 8004602:	4b4b      	ldr	r3, [pc, #300]	; (8004730 <lowlayer_scanFlow+0x288>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	ee07 3a90 	vmov	s15, r3
 800460a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800460e:	ee17 0a90 	vmov	r0, s15
 8004612:	f7fb ff99 	bl	8000548 <__aeabi_f2d>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	f7fb fe37 	bl	800028c <__adddf3>
 800461e:	4603      	mov	r3, r0
 8004620:	460c      	mov	r4, r1
 8004622:	4618      	mov	r0, r3
 8004624:	4621      	mov	r1, r4
 8004626:	a330      	add	r3, pc, #192	; (adr r3, 80046e8 <lowlayer_scanFlow+0x240>)
 8004628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462c:	f7fb ffe4 	bl	80005f8 <__aeabi_dmul>
 8004630:	4603      	mov	r3, r0
 8004632:	460c      	mov	r4, r1
 8004634:	4618      	mov	r0, r3
 8004636:	4621      	mov	r1, r4
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	4b44      	ldr	r3, [pc, #272]	; (8004750 <lowlayer_scanFlow+0x2a8>)
 800463e:	f7fc f905 	bl	800084c <__aeabi_ddiv>
 8004642:	4603      	mov	r3, r0
 8004644:	460c      	mov	r4, r1
 8004646:	461a      	mov	r2, r3
 8004648:	4623      	mov	r3, r4
 800464a:	a12d      	add	r1, pc, #180	; (adr r1, 8004700 <lowlayer_scanFlow+0x258>)
 800464c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004650:	f7fb fe1a 	bl	8000288 <__aeabi_dsub>
 8004654:	4603      	mov	r3, r0
 8004656:	460c      	mov	r4, r1
		offset_setpoint[1]	= HARD_LIM1_POS
 8004658:	4a3c      	ldr	r2, [pc, #240]	; (800474c <lowlayer_scanFlow+0x2a4>)
 800465a:	e9c2 3402 	strd	r3, r4, [r2, #8]
		offset_setpoint[2]	= HARD_LIM2_NEG
				- DIR_ENCODER_2*offset_encoder[2]/ENCODER_J2;
 800465e:	4b34      	ldr	r3, [pc, #208]	; (8004730 <lowlayer_scanFlow+0x288>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	ee07 3a90 	vmov	s15, r3
 8004666:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800466a:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8004754 <lowlayer_scanFlow+0x2ac>
 800466e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004672:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004758 <lowlayer_scanFlow+0x2b0>
 8004676:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800467a:	ee17 0a90 	vmov	r0, s15
 800467e:	f7fb ff63 	bl	8000548 <__aeabi_f2d>
 8004682:	4603      	mov	r3, r0
 8004684:	460c      	mov	r4, r1
		offset_setpoint[2]	= HARD_LIM2_NEG
 8004686:	4a31      	ldr	r2, [pc, #196]	; (800474c <lowlayer_scanFlow+0x2a4>)
 8004688:	e9c2 3404 	strd	r3, r4, [r2, #16]
		offset_setpoint[3]  = HARD_LIM3_POS
				- offset_stepper*2.0*PI/GEAR_J3;
 800468c:	4b2a      	ldr	r3, [pc, #168]	; (8004738 <lowlayer_scanFlow+0x290>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4618      	mov	r0, r3
 8004692:	f7fb ff47 	bl	8000524 <__aeabi_i2d>
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	f7fb fdf7 	bl	800028c <__adddf3>
 800469e:	4603      	mov	r3, r0
 80046a0:	460c      	mov	r4, r1
 80046a2:	4618      	mov	r0, r3
 80046a4:	4621      	mov	r1, r4
 80046a6:	a310      	add	r3, pc, #64	; (adr r3, 80046e8 <lowlayer_scanFlow+0x240>)
 80046a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ac:	f7fb ffa4 	bl	80005f8 <__aeabi_dmul>
 80046b0:	4603      	mov	r3, r0
 80046b2:	460c      	mov	r4, r1
 80046b4:	4618      	mov	r0, r3
 80046b6:	4621      	mov	r1, r4
 80046b8:	a313      	add	r3, pc, #76	; (adr r3, 8004708 <lowlayer_scanFlow+0x260>)
 80046ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046be:	f7fc f8c5 	bl	800084c <__aeabi_ddiv>
 80046c2:	4603      	mov	r3, r0
 80046c4:	460c      	mov	r4, r1
 80046c6:	461a      	mov	r2, r3
 80046c8:	4623      	mov	r3, r4
 80046ca:	a111      	add	r1, pc, #68	; (adr r1, 8004710 <lowlayer_scanFlow+0x268>)
 80046cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046d0:	f7fb fdda 	bl	8000288 <__aeabi_dsub>
 80046d4:	4603      	mov	r3, r0
 80046d6:	460c      	mov	r4, r1
		offset_setpoint[3]  = HARD_LIM3_POS
 80046d8:	4a1c      	ldr	r2, [pc, #112]	; (800474c <lowlayer_scanFlow+0x2a4>)
 80046da:	e9c2 3406 	strd	r3, r4, [r2, #24]

		return TRUE;
 80046de:	2301      	movs	r3, #1
	}
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd90      	pop	{r4, r7, pc}
 80046e8:	60000000 	.word	0x60000000
 80046ec:	400921fb 	.word	0x400921fb
 80046f0:	00000000 	.word	0x00000000
 80046f4:	40f38800 	.word	0x40f38800
 80046f8:	40000000 	.word	0x40000000
 80046fc:	bff9f17a 	.word	0xbff9f17a
 8004700:	80000000 	.word	0x80000000
 8004704:	40039716 	.word	0x40039716
 8004708:	a0000000 	.word	0xa0000000
 800470c:	40d3bca1 	.word	0x40d3bca1
 8004710:	a0000000 	.word	0xa0000000
 8004714:	4008330d 	.word	0x4008330d
 8004718:	20005ac0 	.word	0x20005ac0
 800471c:	20005ab0 	.word	0x20005ab0
 8004720:	0801b1f4 	.word	0x0801b1f4
 8004724:	40020c00 	.word	0x40020c00
 8004728:	20005aa0 	.word	0x20005aa0
 800472c:	20005ab4 	.word	0x20005ab4
 8004730:	20005ae8 	.word	0x20005ae8
 8004734:	20005a90 	.word	0x20005a90
 8004738:	20005ac4 	.word	0x20005ac4
 800473c:	0801b11c 	.word	0x0801b11c
 8004740:	0801b130 	.word	0x0801b130
 8004744:	0801b144 	.word	0x0801b144
 8004748:	0801b158 	.word	0x0801b158
 800474c:	20005ac8 	.word	0x20005ac8
 8004750:	40ff4000 	.word	0x40ff4000
 8004754:	4426aaab 	.word	0x4426aaab
 8004758:	400f1aa0 	.word	0x400f1aa0
 800475c:	00000000 	.word	0x00000000

08004760 <lowlayer_goToSoftLimit>:

uint8_t	lowlayer_goToSoftLimit(SCARA_PositionTypeDef *setpoint) {
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
	int8_t pulse[4] = {0, 0, 0 ,0};
 8004768:	2300      	movs	r3, #0
 800476a:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0;
 800476c:	2300      	movs	r3, #0
 800476e:	73fb      	strb	r3, [r7, #15]
	lowlayer_readSetPosition(setpoint);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f94d 	bl	8004a10 <lowlayer_readSetPosition>
	if (setpoint->Theta1 < LIM_MIN_J0) {
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800477c:	a330      	add	r3, pc, #192	; (adr r3, 8004840 <lowlayer_goToSoftLimit+0xe0>)
 800477e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004782:	f7fc f9ab 	bl	8000adc <__aeabi_dcmplt>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d004      	beq.n	8004796 <lowlayer_goToSoftLimit+0x36>
		pulse[0] = pulse_scan[0];
 800478c:	2303      	movs	r3, #3
 800478e:	723b      	strb	r3, [r7, #8]
		check++;
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	3301      	adds	r3, #1
 8004794:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta2 > LIM_MAX_J1) {
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800479c:	a32a      	add	r3, pc, #168	; (adr r3, 8004848 <lowlayer_goToSoftLimit+0xe8>)
 800479e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a2:	f7fc f9b9 	bl	8000b18 <__aeabi_dcmpgt>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d004      	beq.n	80047b6 <lowlayer_goToSoftLimit+0x56>
		pulse[1] = pulse_scan[1];
 80047ac:	2305      	movs	r3, #5
 80047ae:	727b      	strb	r3, [r7, #9]
		check++;
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
 80047b2:	3301      	adds	r3, #1
 80047b4:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->D3 < LIM_MIN_J2) {
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	f7fc f98a 	bl	8000adc <__aeabi_dcmplt>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d004      	beq.n	80047d8 <lowlayer_goToSoftLimit+0x78>
		pulse[2] = pulse_scan[2];
 80047ce:	2305      	movs	r3, #5
 80047d0:	72bb      	strb	r3, [r7, #10]
		check++;
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
 80047d4:	3301      	adds	r3, #1
 80047d6:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta4 > LIM_MAX_J3) {
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 80047de:	a31c      	add	r3, pc, #112	; (adr r3, 8004850 <lowlayer_goToSoftLimit+0xf0>)
 80047e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e4:	f7fc f998 	bl	8000b18 <__aeabi_dcmpgt>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d004      	beq.n	80047f8 <lowlayer_goToSoftLimit+0x98>
		pulse[3] = pulse_scan[3];
 80047ee:	230a      	movs	r3, #10
 80047f0:	72fb      	strb	r3, [r7, #11]
		check++;
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
 80047f4:	3301      	adds	r3, #1
 80047f6:	73fb      	strb	r3, [r7, #15]
	}

	if (check > 0) {
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d013      	beq.n	8004826 <lowlayer_goToSoftLimit+0xc6>
		lowlayer_writePulse(pulse[0], -pulse[1], pulse[2], -pulse[3]);
 80047fe:	f997 0008 	ldrsb.w	r0, [r7, #8]
 8004802:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8004806:	b2db      	uxtb	r3, r3
 8004808:	425b      	negs	r3, r3
 800480a:	b2db      	uxtb	r3, r3
 800480c:	b259      	sxtb	r1, r3
 800480e:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8004812:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004816:	b2db      	uxtb	r3, r3
 8004818:	425b      	negs	r3, r3
 800481a:	b2db      	uxtb	r3, r3
 800481c:	b25b      	sxtb	r3, r3
 800481e:	f000 fb4f 	bl	8004ec0 <lowlayer_writePulse>
		return FALSE;
 8004822:	2300      	movs	r3, #0
 8004824:	e006      	b.n	8004834 <lowlayer_goToSoftLimit+0xd4>
	} else {
		lowlayer_writePulse(0, 0, 0, 0);
 8004826:	2300      	movs	r3, #0
 8004828:	2200      	movs	r2, #0
 800482a:	2100      	movs	r1, #0
 800482c:	2000      	movs	r0, #0
 800482e:	f000 fb47 	bl	8004ec0 <lowlayer_writePulse>
		return TRUE;
 8004832:	2301      	movs	r3, #1
	}
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	f3af 8000 	nop.w
 8004840:	daaaaaab 	.word	0xdaaaaaab
 8004844:	bff7bc89 	.word	0xbff7bc89
 8004848:	88000000 	.word	0x88000000
 800484c:	4002d97c 	.word	0x4002d97c
 8004850:	daaaaaab 	.word	0xdaaaaaab
 8004854:	4007bc89 	.word	0x4007bc89

08004858 <lowlayer_readTruePosition>:

void	lowlayer_readTruePosition(SCARA_PositionTypeDef *true) {
 8004858:	b590      	push	{r4, r7, lr}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
	lowlayer_updateEncoder();
 8004860:	f000 fc78 	bl	8005154 <lowlayer_updateEncoder>
	true->Theta1 = HARD_LIM0_NEG
			+ DIR_ENCODER_0*(position_encoder[0] - offset_encoder[0])*2.0*PI/ENCODER_J0; // Servo Motor
 8004864:	4b62      	ldr	r3, [pc, #392]	; (80049f0 <lowlayer_readTruePosition+0x198>)
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	4b62      	ldr	r3, [pc, #392]	; (80049f4 <lowlayer_readTruePosition+0x19c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	ee07 3a90 	vmov	s15, r3
 8004872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004876:	ee17 0a90 	vmov	r0, s15
 800487a:	f7fb fe65 	bl	8000548 <__aeabi_f2d>
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	f7fb fd03 	bl	800028c <__adddf3>
 8004886:	4603      	mov	r3, r0
 8004888:	460c      	mov	r4, r1
 800488a:	4618      	mov	r0, r3
 800488c:	4621      	mov	r1, r4
 800488e:	a34c      	add	r3, pc, #304	; (adr r3, 80049c0 <lowlayer_readTruePosition+0x168>)
 8004890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004894:	f7fb feb0 	bl	80005f8 <__aeabi_dmul>
 8004898:	4603      	mov	r3, r0
 800489a:	460c      	mov	r4, r1
 800489c:	4618      	mov	r0, r3
 800489e:	4621      	mov	r1, r4
 80048a0:	a349      	add	r3, pc, #292	; (adr r3, 80049c8 <lowlayer_readTruePosition+0x170>)
 80048a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a6:	f7fb ffd1 	bl	800084c <__aeabi_ddiv>
 80048aa:	4603      	mov	r3, r0
 80048ac:	460c      	mov	r4, r1
 80048ae:	4618      	mov	r0, r3
 80048b0:	4621      	mov	r1, r4
 80048b2:	a347      	add	r3, pc, #284	; (adr r3, 80049d0 <lowlayer_readTruePosition+0x178>)
 80048b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b8:	f7fb fce6 	bl	8000288 <__aeabi_dsub>
 80048bc:	4603      	mov	r3, r0
 80048be:	460c      	mov	r4, r1
	true->Theta1 = HARD_LIM0_NEG
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	true->Theta2 = HARD_LIM1_POS
			+ DIR_ENCODER_1*(position_encoder[1] - offset_encoder[1])*2.0*PI/ENCODER_J1; // Servo Motor
 80048c6:	4b4a      	ldr	r3, [pc, #296]	; (80049f0 <lowlayer_readTruePosition+0x198>)
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	4b4a      	ldr	r3, [pc, #296]	; (80049f4 <lowlayer_readTruePosition+0x19c>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	ee07 3a90 	vmov	s15, r3
 80048d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048d8:	ee17 0a90 	vmov	r0, s15
 80048dc:	f7fb fe34 	bl	8000548 <__aeabi_f2d>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	f7fb fcd2 	bl	800028c <__adddf3>
 80048e8:	4603      	mov	r3, r0
 80048ea:	460c      	mov	r4, r1
 80048ec:	4618      	mov	r0, r3
 80048ee:	4621      	mov	r1, r4
 80048f0:	a333      	add	r3, pc, #204	; (adr r3, 80049c0 <lowlayer_readTruePosition+0x168>)
 80048f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f6:	f7fb fe7f 	bl	80005f8 <__aeabi_dmul>
 80048fa:	4603      	mov	r3, r0
 80048fc:	460c      	mov	r4, r1
 80048fe:	4618      	mov	r0, r3
 8004900:	4621      	mov	r1, r4
 8004902:	f04f 0200 	mov.w	r2, #0
 8004906:	4b3c      	ldr	r3, [pc, #240]	; (80049f8 <lowlayer_readTruePosition+0x1a0>)
 8004908:	f7fb ffa0 	bl	800084c <__aeabi_ddiv>
 800490c:	4603      	mov	r3, r0
 800490e:	460c      	mov	r4, r1
 8004910:	4618      	mov	r0, r3
 8004912:	4621      	mov	r1, r4
 8004914:	a330      	add	r3, pc, #192	; (adr r3, 80049d8 <lowlayer_readTruePosition+0x180>)
 8004916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491a:	f7fb fcb7 	bl	800028c <__adddf3>
 800491e:	4603      	mov	r3, r0
 8004920:	460c      	mov	r4, r1
	true->Theta2 = HARD_LIM1_POS
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	true->D3	 = HARD_LIM2_NEG
			+ DIR_ENCODER_2*(position_encoder[2] - offset_encoder[2])/ENCODER_J2; // Servo Motor
 8004928:	4b31      	ldr	r3, [pc, #196]	; (80049f0 <lowlayer_readTruePosition+0x198>)
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	4b31      	ldr	r3, [pc, #196]	; (80049f4 <lowlayer_readTruePosition+0x19c>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	ee07 3a90 	vmov	s15, r3
 8004936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800493a:	eeb1 7a67 	vneg.f32	s14, s15
 800493e:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80049fc <lowlayer_readTruePosition+0x1a4>
 8004942:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004946:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8004a00 <lowlayer_readTruePosition+0x1a8>
 800494a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800494e:	ee17 0a90 	vmov	r0, s15
 8004952:	f7fb fdf9 	bl	8000548 <__aeabi_f2d>
 8004956:	4603      	mov	r3, r0
 8004958:	460c      	mov	r4, r1
	true->D3	 = HARD_LIM2_NEG
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	true->Theta4 = HARD_LIM3_POS
			+ (pulse_accumulate[3] - offset_stepper)*2.0*PI/GEAR_J3; // Stepper Motor
 8004960:	4b28      	ldr	r3, [pc, #160]	; (8004a04 <lowlayer_readTruePosition+0x1ac>)
 8004962:	68da      	ldr	r2, [r3, #12]
 8004964:	4b28      	ldr	r3, [pc, #160]	; (8004a08 <lowlayer_readTruePosition+0x1b0>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	4618      	mov	r0, r3
 800496c:	f7fb fdda 	bl	8000524 <__aeabi_i2d>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	f7fb fc8a 	bl	800028c <__adddf3>
 8004978:	4603      	mov	r3, r0
 800497a:	460c      	mov	r4, r1
 800497c:	4618      	mov	r0, r3
 800497e:	4621      	mov	r1, r4
 8004980:	a30f      	add	r3, pc, #60	; (adr r3, 80049c0 <lowlayer_readTruePosition+0x168>)
 8004982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004986:	f7fb fe37 	bl	80005f8 <__aeabi_dmul>
 800498a:	4603      	mov	r3, r0
 800498c:	460c      	mov	r4, r1
 800498e:	4618      	mov	r0, r3
 8004990:	4621      	mov	r1, r4
 8004992:	a313      	add	r3, pc, #76	; (adr r3, 80049e0 <lowlayer_readTruePosition+0x188>)
 8004994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004998:	f7fb ff58 	bl	800084c <__aeabi_ddiv>
 800499c:	4603      	mov	r3, r0
 800499e:	460c      	mov	r4, r1
 80049a0:	4618      	mov	r0, r3
 80049a2:	4621      	mov	r1, r4
 80049a4:	a310      	add	r3, pc, #64	; (adr r3, 80049e8 <lowlayer_readTruePosition+0x190>)
 80049a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049aa:	f7fb fc6f 	bl	800028c <__adddf3>
 80049ae:	4603      	mov	r3, r0
 80049b0:	460c      	mov	r4, r1
	true->Theta4 = HARD_LIM3_POS
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd90      	pop	{r4, r7, pc}
 80049c0:	60000000 	.word	0x60000000
 80049c4:	400921fb 	.word	0x400921fb
 80049c8:	00000000 	.word	0x00000000
 80049cc:	40f38800 	.word	0x40f38800
 80049d0:	40000000 	.word	0x40000000
 80049d4:	3ff9f17a 	.word	0x3ff9f17a
 80049d8:	80000000 	.word	0x80000000
 80049dc:	40039716 	.word	0x40039716
 80049e0:	a0000000 	.word	0xa0000000
 80049e4:	40d3bca1 	.word	0x40d3bca1
 80049e8:	a0000000 	.word	0xa0000000
 80049ec:	4008330d 	.word	0x4008330d
 80049f0:	20005aa4 	.word	0x20005aa4
 80049f4:	20005ae8 	.word	0x20005ae8
 80049f8:	40ff4000 	.word	0x40ff4000
 80049fc:	4426aaab 	.word	0x4426aaab
 8004a00:	400f1aa0 	.word	0x400f1aa0
 8004a04:	20005a90 	.word	0x20005a90
 8004a08:	20005ac4 	.word	0x20005ac4
 8004a0c:	00000000 	.word	0x00000000

08004a10 <lowlayer_readSetPosition>:

void	lowlayer_readSetPosition(SCARA_PositionTypeDef *setpoint) {
 8004a10:	b5b0      	push	{r4, r5, r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
	setpoint->Theta1 = offset_setpoint[0] + pulse_accumulate[0]*2.0*PI/GEAR_J0;
 8004a18:	4b53      	ldr	r3, [pc, #332]	; (8004b68 <lowlayer_readSetPosition+0x158>)
 8004a1a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004a1e:	4b53      	ldr	r3, [pc, #332]	; (8004b6c <lowlayer_readSetPosition+0x15c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fb fd7e 	bl	8000524 <__aeabi_i2d>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	f7fb fc2e 	bl	800028c <__adddf3>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	4610      	mov	r0, r2
 8004a36:	4619      	mov	r1, r3
 8004a38:	a345      	add	r3, pc, #276	; (adr r3, 8004b50 <lowlayer_readSetPosition+0x140>)
 8004a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3e:	f7fb fddb 	bl	80005f8 <__aeabi_dmul>
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	4610      	mov	r0, r2
 8004a48:	4619      	mov	r1, r3
 8004a4a:	a343      	add	r3, pc, #268	; (adr r3, 8004b58 <lowlayer_readSetPosition+0x148>)
 8004a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a50:	f7fb fefc 	bl	800084c <__aeabi_ddiv>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4620      	mov	r0, r4
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	f7fb fc16 	bl	800028c <__adddf3>
 8004a60:	4603      	mov	r3, r0
 8004a62:	460c      	mov	r4, r1
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	setpoint->Theta2 = offset_setpoint[1] + pulse_accumulate[1]*2.0*PI/GEAR_J1;
 8004a6a:	4b3f      	ldr	r3, [pc, #252]	; (8004b68 <lowlayer_readSetPosition+0x158>)
 8004a6c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004a70:	4b3e      	ldr	r3, [pc, #248]	; (8004b6c <lowlayer_readSetPosition+0x15c>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fb fd55 	bl	8000524 <__aeabi_i2d>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	f7fb fc05 	bl	800028c <__adddf3>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4610      	mov	r0, r2
 8004a88:	4619      	mov	r1, r3
 8004a8a:	a331      	add	r3, pc, #196	; (adr r3, 8004b50 <lowlayer_readSetPosition+0x140>)
 8004a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a90:	f7fb fdb2 	bl	80005f8 <__aeabi_dmul>
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	4610      	mov	r0, r2
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	4b33      	ldr	r3, [pc, #204]	; (8004b70 <lowlayer_readSetPosition+0x160>)
 8004aa2:	f7fb fed3 	bl	800084c <__aeabi_ddiv>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	4620      	mov	r0, r4
 8004aac:	4629      	mov	r1, r5
 8004aae:	f7fb fbed 	bl	800028c <__adddf3>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	460c      	mov	r4, r1
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	setpoint->D3	 = offset_setpoint[2] + pulse_accumulate[2]/GEAR_J2;
 8004abc:	4b2a      	ldr	r3, [pc, #168]	; (8004b68 <lowlayer_readSetPosition+0x158>)
 8004abe:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004ac2:	4b2a      	ldr	r3, [pc, #168]	; (8004b6c <lowlayer_readSetPosition+0x15c>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ace:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8004b74 <lowlayer_readSetPosition+0x164>
 8004ad2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004ad6:	ee16 0a90 	vmov	r0, s13
 8004ada:	f7fb fd35 	bl	8000548 <__aeabi_f2d>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	4629      	mov	r1, r5
 8004ae6:	f7fb fbd1 	bl	800028c <__adddf3>
 8004aea:	4603      	mov	r3, r0
 8004aec:	460c      	mov	r4, r1
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	setpoint->Theta4 = offset_setpoint[3] + pulse_accumulate[3]*2.0*PI/GEAR_J3;
 8004af4:	4b1c      	ldr	r3, [pc, #112]	; (8004b68 <lowlayer_readSetPosition+0x158>)
 8004af6:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004afa:	4b1c      	ldr	r3, [pc, #112]	; (8004b6c <lowlayer_readSetPosition+0x15c>)
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fb fd10 	bl	8000524 <__aeabi_i2d>
 8004b04:	4602      	mov	r2, r0
 8004b06:	460b      	mov	r3, r1
 8004b08:	f7fb fbc0 	bl	800028c <__adddf3>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4610      	mov	r0, r2
 8004b12:	4619      	mov	r1, r3
 8004b14:	a30e      	add	r3, pc, #56	; (adr r3, 8004b50 <lowlayer_readSetPosition+0x140>)
 8004b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1a:	f7fb fd6d 	bl	80005f8 <__aeabi_dmul>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	4610      	mov	r0, r2
 8004b24:	4619      	mov	r1, r3
 8004b26:	a30e      	add	r3, pc, #56	; (adr r3, 8004b60 <lowlayer_readSetPosition+0x150>)
 8004b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2c:	f7fb fe8e 	bl	800084c <__aeabi_ddiv>
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	4620      	mov	r0, r4
 8004b36:	4629      	mov	r1, r5
 8004b38:	f7fb fba8 	bl	800028c <__adddf3>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	460c      	mov	r4, r1
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 8004b46:	bf00      	nop
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	60000000 	.word	0x60000000
 8004b54:	400921fb 	.word	0x400921fb
 8004b58:	00000000 	.word	0x00000000
 8004b5c:	40d38800 	.word	0x40d38800
 8004b60:	a0000000 	.word	0xa0000000
 8004b64:	40d3bca1 	.word	0x40d3bca1
 8004b68:	20005ac8 	.word	0x20005ac8
 8004b6c:	20005a90 	.word	0x20005a90
 8004b70:	40df4000 	.word	0x40df4000
 8004b74:	42c80000 	.word	0x42c80000

08004b78 <lowlayer_computeAndWritePulse>:

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 8004b78:	b084      	sub	sp, #16
 8004b7a:	b590      	push	{r4, r7, lr}
 8004b7c:	b093      	sub	sp, #76	; 0x4c
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8004b84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 8004b88:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8004b8c:	a3c4      	add	r3, pc, #784	; (adr r3, 8004ea0 <lowlayer_computeAndWritePulse+0x328>)
 8004b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b92:	f7fb fb7b 	bl	800028c <__adddf3>
 8004b96:	4603      	mov	r3, r0
 8004b98:	460c      	mov	r4, r1
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	4621      	mov	r1, r4
 8004b9e:	a3c2      	add	r3, pc, #776	; (adr r3, 8004ea8 <lowlayer_computeAndWritePulse+0x330>)
 8004ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba4:	f7fb fd28 	bl	80005f8 <__aeabi_dmul>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	460c      	mov	r4, r1
 8004bac:	4618      	mov	r0, r3
 8004bae:	4621      	mov	r1, r4
 8004bb0:	a3b5      	add	r3, pc, #724	; (adr r3, 8004e88 <lowlayer_computeAndWritePulse+0x310>)
 8004bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb6:	f7fb fe49 	bl	800084c <__aeabi_ddiv>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	460c      	mov	r4, r1
 8004bbe:	ec44 3b17 	vmov	d7, r3, r4
 8004bc2:	eeb0 0a47 	vmov.f32	s0, s14
 8004bc6:	eef0 0a67 	vmov.f32	s1, s15
 8004bca:	f014 fd79 	bl	80196c0 <round>
 8004bce:	ec54 3b10 	vmov	r3, r4, d0
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	4621      	mov	r1, r4
 8004bd6:	f7fb ffe7 	bl	8000ba8 <__aeabi_d2uiz>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 8004bde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004be2:	a3b3      	add	r3, pc, #716	; (adr r3, 8004eb0 <lowlayer_computeAndWritePulse+0x338>)
 8004be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be8:	f7fb fb50 	bl	800028c <__adddf3>
 8004bec:	4603      	mov	r3, r0
 8004bee:	460c      	mov	r4, r1
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	4621      	mov	r1, r4
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	4baf      	ldr	r3, [pc, #700]	; (8004eb8 <lowlayer_computeAndWritePulse+0x340>)
 8004bfa:	f7fb fcfd 	bl	80005f8 <__aeabi_dmul>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	460c      	mov	r4, r1
 8004c02:	4618      	mov	r0, r3
 8004c04:	4621      	mov	r1, r4
 8004c06:	a3a0      	add	r3, pc, #640	; (adr r3, 8004e88 <lowlayer_computeAndWritePulse+0x310>)
 8004c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0c:	f7fb fe1e 	bl	800084c <__aeabi_ddiv>
 8004c10:	4603      	mov	r3, r0
 8004c12:	460c      	mov	r4, r1
 8004c14:	ec44 3b17 	vmov	d7, r3, r4
 8004c18:	eeb0 0a47 	vmov.f32	s0, s14
 8004c1c:	eef0 0a67 	vmov.f32	s1, s15
 8004c20:	f014 fd4e 	bl	80196c0 <round>
 8004c24:	ec54 3b10 	vmov	r3, r4, d0
 8004c28:	4618      	mov	r0, r3
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	f7fb ffbc 	bl	8000ba8 <__aeabi_d2uiz>
 8004c30:	4603      	mov	r3, r0
 8004c32:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 8004c34:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	4b9f      	ldr	r3, [pc, #636]	; (8004ebc <lowlayer_computeAndWritePulse+0x344>)
 8004c3e:	f7fb fcdb 	bl	80005f8 <__aeabi_dmul>
 8004c42:	4603      	mov	r3, r0
 8004c44:	460c      	mov	r4, r1
 8004c46:	ec44 3b17 	vmov	d7, r3, r4
 8004c4a:	eeb0 0a47 	vmov.f32	s0, s14
 8004c4e:	eef0 0a67 	vmov.f32	s1, s15
 8004c52:	f014 fd35 	bl	80196c0 <round>
 8004c56:	ec54 3b10 	vmov	r3, r4, d0
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	f7fb ffa3 	bl	8000ba8 <__aeabi_d2uiz>
 8004c62:	4603      	mov	r3, r0
 8004c64:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 8004c66:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004c6a:	a389      	add	r3, pc, #548	; (adr r3, 8004e90 <lowlayer_computeAndWritePulse+0x318>)
 8004c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c70:	f7fb fb0c 	bl	800028c <__adddf3>
 8004c74:	4603      	mov	r3, r0
 8004c76:	460c      	mov	r4, r1
 8004c78:	4618      	mov	r0, r3
 8004c7a:	4621      	mov	r1, r4
 8004c7c:	a386      	add	r3, pc, #536	; (adr r3, 8004e98 <lowlayer_computeAndWritePulse+0x320>)
 8004c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c82:	f7fb fcb9 	bl	80005f8 <__aeabi_dmul>
 8004c86:	4603      	mov	r3, r0
 8004c88:	460c      	mov	r4, r1
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	4621      	mov	r1, r4
 8004c8e:	a37e      	add	r3, pc, #504	; (adr r3, 8004e88 <lowlayer_computeAndWritePulse+0x310>)
 8004c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c94:	f7fb fdda 	bl	800084c <__aeabi_ddiv>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	460c      	mov	r4, r1
 8004c9c:	ec44 3b17 	vmov	d7, r3, r4
 8004ca0:	eeb0 0a47 	vmov.f32	s0, s14
 8004ca4:	eef0 0a67 	vmov.f32	s1, s15
 8004ca8:	f014 fd0a 	bl	80196c0 <round>
 8004cac:	ec54 3b10 	vmov	r3, r4, d0
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	4621      	mov	r1, r4
 8004cb4:	f7fb ff78 	bl	8000ba8 <__aeabi_d2uiz>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 8004cbc:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8004cc0:	a377      	add	r3, pc, #476	; (adr r3, 8004ea0 <lowlayer_computeAndWritePulse+0x328>)
 8004cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc6:	f7fb fae1 	bl	800028c <__adddf3>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	460c      	mov	r4, r1
 8004cce:	4618      	mov	r0, r3
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	a375      	add	r3, pc, #468	; (adr r3, 8004ea8 <lowlayer_computeAndWritePulse+0x330>)
 8004cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd8:	f7fb fc8e 	bl	80005f8 <__aeabi_dmul>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	460c      	mov	r4, r1
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	a368      	add	r3, pc, #416	; (adr r3, 8004e88 <lowlayer_computeAndWritePulse+0x310>)
 8004ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cea:	f7fb fdaf 	bl	800084c <__aeabi_ddiv>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	460c      	mov	r4, r1
 8004cf2:	ec44 3b17 	vmov	d7, r3, r4
 8004cf6:	eeb0 0a47 	vmov.f32	s0, s14
 8004cfa:	eef0 0a67 	vmov.f32	s1, s15
 8004cfe:	f014 fcdf 	bl	80196c0 <round>
 8004d02:	ec54 3b10 	vmov	r3, r4, d0
 8004d06:	4618      	mov	r0, r3
 8004d08:	4621      	mov	r1, r4
 8004d0a:	f7fb ff4d 	bl	8000ba8 <__aeabi_d2uiz>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 8004d12:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004d16:	a366      	add	r3, pc, #408	; (adr r3, 8004eb0 <lowlayer_computeAndWritePulse+0x338>)
 8004d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1c:	f7fb fab6 	bl	800028c <__adddf3>
 8004d20:	4603      	mov	r3, r0
 8004d22:	460c      	mov	r4, r1
 8004d24:	4618      	mov	r0, r3
 8004d26:	4621      	mov	r1, r4
 8004d28:	f04f 0200 	mov.w	r2, #0
 8004d2c:	4b62      	ldr	r3, [pc, #392]	; (8004eb8 <lowlayer_computeAndWritePulse+0x340>)
 8004d2e:	f7fb fc63 	bl	80005f8 <__aeabi_dmul>
 8004d32:	4603      	mov	r3, r0
 8004d34:	460c      	mov	r4, r1
 8004d36:	4618      	mov	r0, r3
 8004d38:	4621      	mov	r1, r4
 8004d3a:	a353      	add	r3, pc, #332	; (adr r3, 8004e88 <lowlayer_computeAndWritePulse+0x310>)
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	f7fb fd84 	bl	800084c <__aeabi_ddiv>
 8004d44:	4603      	mov	r3, r0
 8004d46:	460c      	mov	r4, r1
 8004d48:	ec44 3b17 	vmov	d7, r3, r4
 8004d4c:	eeb0 0a47 	vmov.f32	s0, s14
 8004d50:	eef0 0a67 	vmov.f32	s1, s15
 8004d54:	f014 fcb4 	bl	80196c0 <round>
 8004d58:	ec54 3b10 	vmov	r3, r4, d0
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	4621      	mov	r1, r4
 8004d60:	f7fb ff22 	bl	8000ba8 <__aeabi_d2uiz>
 8004d64:	4603      	mov	r3, r0
 8004d66:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 8004d68:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	4b52      	ldr	r3, [pc, #328]	; (8004ebc <lowlayer_computeAndWritePulse+0x344>)
 8004d72:	f7fb fc41 	bl	80005f8 <__aeabi_dmul>
 8004d76:	4603      	mov	r3, r0
 8004d78:	460c      	mov	r4, r1
 8004d7a:	ec44 3b17 	vmov	d7, r3, r4
 8004d7e:	eeb0 0a47 	vmov.f32	s0, s14
 8004d82:	eef0 0a67 	vmov.f32	s1, s15
 8004d86:	f014 fc9b 	bl	80196c0 <round>
 8004d8a:	ec54 3b10 	vmov	r3, r4, d0
 8004d8e:	4618      	mov	r0, r3
 8004d90:	4621      	mov	r1, r4
 8004d92:	f7fb ff09 	bl	8000ba8 <__aeabi_d2uiz>
 8004d96:	4603      	mov	r3, r0
 8004d98:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 8004d9a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004d9e:	a33c      	add	r3, pc, #240	; (adr r3, 8004e90 <lowlayer_computeAndWritePulse+0x318>)
 8004da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da4:	f7fb fa72 	bl	800028c <__adddf3>
 8004da8:	4603      	mov	r3, r0
 8004daa:	460c      	mov	r4, r1
 8004dac:	4618      	mov	r0, r3
 8004dae:	4621      	mov	r1, r4
 8004db0:	a339      	add	r3, pc, #228	; (adr r3, 8004e98 <lowlayer_computeAndWritePulse+0x320>)
 8004db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db6:	f7fb fc1f 	bl	80005f8 <__aeabi_dmul>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	460c      	mov	r4, r1
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	a331      	add	r3, pc, #196	; (adr r3, 8004e88 <lowlayer_computeAndWritePulse+0x310>)
 8004dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc8:	f7fb fd40 	bl	800084c <__aeabi_ddiv>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	460c      	mov	r4, r1
 8004dd0:	ec44 3b17 	vmov	d7, r3, r4
 8004dd4:	eeb0 0a47 	vmov.f32	s0, s14
 8004dd8:	eef0 0a67 	vmov.f32	s1, s15
 8004ddc:	f014 fc70 	bl	80196c0 <round>
 8004de0:	ec54 3b10 	vmov	r3, r4, d0
 8004de4:	4618      	mov	r0, r3
 8004de6:	4621      	mov	r1, r4
 8004de8:	f7fb fede 	bl	8000ba8 <__aeabi_d2uiz>
 8004dec:	4603      	mov	r3, r0
 8004dee:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 8004df0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	f04f 0400 	mov.w	r4, #0
 8004dfa:	e9c7 3408 	strd	r3, r4, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 8004dfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	f04f 0400 	mov.w	r4, #0
 8004e08:	e9c7 3406 	strd	r3, r4, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 8004e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	f04f 0400 	mov.w	r4, #0
 8004e16:	e9c7 3404 	strd	r3, r4, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 8004e1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	f04f 0400 	mov.w	r4, #0
 8004e24:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (abs(delta_var0) > 127
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	bfb8      	it	lt
 8004e2e:	425b      	neglt	r3, r3
 8004e30:	2b7f      	cmp	r3, #127	; 0x7f
 8004e32:	dc11      	bgt.n	8004e58 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var1) > 127
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	bfb8      	it	lt
 8004e3a:	425b      	neglt	r3, r3
 8004e3c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e3e:	dc0b      	bgt.n	8004e58 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var2) > 127
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	bfb8      	it	lt
 8004e46:	425b      	neglt	r3, r3
 8004e48:	2b7f      	cmp	r3, #127	; 0x7f
 8004e4a:	dc05      	bgt.n	8004e58 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var3) > 127) {
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	bfb8      	it	lt
 8004e52:	425b      	neglt	r3, r3
 8004e54:	2b7f      	cmp	r3, #127	; 0x7f
 8004e56:	dd01      	ble.n	8004e5c <lowlayer_computeAndWritePulse+0x2e4>
		return FALSE;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	e00c      	b.n	8004e76 <lowlayer_computeAndWritePulse+0x2fe>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 8004e5c:	f997 0020 	ldrsb.w	r0, [r7, #32]
 8004e60:	f997 1018 	ldrsb.w	r1, [r7, #24]
 8004e64:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8004e68:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8004e6c:	f000 f828 	bl	8004ec0 <lowlayer_writePulse>
 8004e70:	4603      	mov	r3, r0
 8004e72:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 8004e74:	79fb      	ldrb	r3, [r7, #7]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	374c      	adds	r7, #76	; 0x4c
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004e80:	b004      	add	sp, #16
 8004e82:	4770      	bx	lr
 8004e84:	f3af 8000 	nop.w
 8004e88:	60000000 	.word	0x60000000
 8004e8c:	401921fb 	.word	0x401921fb
 8004e90:	daaaaaab 	.word	0xdaaaaaab
 8004e94:	4007bc89 	.word	0x4007bc89
 8004e98:	a0000000 	.word	0xa0000000
 8004e9c:	40d3bca1 	.word	0x40d3bca1
 8004ea0:	daaaaaab 	.word	0xdaaaaaab
 8004ea4:	3ff7bc89 	.word	0x3ff7bc89
 8004ea8:	00000000 	.word	0x00000000
 8004eac:	40d38800 	.word	0x40d38800
 8004eb0:	88000000 	.word	0x88000000
 8004eb4:	4002d97c 	.word	0x4002d97c
 8004eb8:	40df4000 	.word	0x40df4000
 8004ebc:	40590000 	.word	0x40590000

08004ec0 <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 8004ec0:	b590      	push	{r4, r7, lr}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	4604      	mov	r4, r0
 8004ec8:	4608      	mov	r0, r1
 8004eca:	4611      	mov	r1, r2
 8004ecc:	461a      	mov	r2, r3
 8004ece:	4623      	mov	r3, r4
 8004ed0:	71fb      	strb	r3, [r7, #7]
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	71bb      	strb	r3, [r7, #6]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	717b      	strb	r3, [r7, #5]
 8004eda:	4613      	mov	r3, r2
 8004edc:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 8004ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	da06      	bge.n	8004ef4 <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 8004ee6:	79fb      	ldrb	r3, [r7, #7]
 8004ee8:	425b      	negs	r3, r3
 8004eea:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 8004eec:	79fb      	ldrb	r3, [r7, #7]
 8004eee:	425b      	negs	r3, r3
 8004ef0:	75fb      	strb	r3, [r7, #23]
 8004ef2:	e006      	b.n	8004f02 <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 8004ef4:	79fb      	ldrb	r3, [r7, #7]
 8004ef6:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 8004ef8:	79fb      	ldrb	r3, [r7, #7]
 8004efa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004efe:	b25b      	sxtb	r3, r3
 8004f00:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 8004f02:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	da06      	bge.n	8004f18 <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 8004f0a:	79bb      	ldrb	r3, [r7, #6]
 8004f0c:	425b      	negs	r3, r3
 8004f0e:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 8004f10:	79bb      	ldrb	r3, [r7, #6]
 8004f12:	425b      	negs	r3, r3
 8004f14:	75bb      	strb	r3, [r7, #22]
 8004f16:	e006      	b.n	8004f26 <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 8004f18:	79bb      	ldrb	r3, [r7, #6]
 8004f1a:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 8004f1c:	79bb      	ldrb	r3, [r7, #6]
 8004f1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f22:	b25b      	sxtb	r3, r3
 8004f24:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 8004f26:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	da0b      	bge.n	8004f46 <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 8004f2e:	797b      	ldrb	r3, [r7, #5]
 8004f30:	425b      	negs	r3, r3
 8004f32:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 8004f34:	797b      	ldrb	r3, [r7, #5]
 8004f36:	425b      	negs	r3, r3
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	b25b      	sxtb	r3, r3
 8004f3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f40:	b25b      	sxtb	r3, r3
 8004f42:	757b      	strb	r3, [r7, #21]
 8004f44:	e003      	b.n	8004f4e <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 8004f46:	797b      	ldrb	r3, [r7, #5]
 8004f48:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 8004f4a:	797b      	ldrb	r3, [r7, #5]
 8004f4c:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 8004f4e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	da06      	bge.n	8004f64 <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 8004f56:	793b      	ldrb	r3, [r7, #4]
 8004f58:	425b      	negs	r3, r3
 8004f5a:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 8004f5c:	793b      	ldrb	r3, [r7, #4]
 8004f5e:	425b      	negs	r3, r3
 8004f60:	753b      	strb	r3, [r7, #20]
 8004f62:	e006      	b.n	8004f72 <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 8004f64:	793b      	ldrb	r3, [r7, #4]
 8004f66:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 8004f68:	793b      	ldrb	r3, [r7, #4]
 8004f6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f6e:	b25b      	sxtb	r3, r3
 8004f70:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 8004f72:	7cfb      	ldrb	r3, [r7, #19]
 8004f74:	2b4b      	cmp	r3, #75	; 0x4b
 8004f76:	d808      	bhi.n	8004f8a <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 8004f78:	7cbb      	ldrb	r3, [r7, #18]
 8004f7a:	2b78      	cmp	r3, #120	; 0x78
 8004f7c:	d805      	bhi.n	8004f8a <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 8004f7e:	7c7b      	ldrb	r3, [r7, #17]
 8004f80:	2b7d      	cmp	r3, #125	; 0x7d
 8004f82:	d802      	bhi.n	8004f8a <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 8004f84:	7c3b      	ldrb	r3, [r7, #16]
 8004f86:	2b65      	cmp	r3, #101	; 0x65
 8004f88:	d901      	bls.n	8004f8e <lowlayer_writePulse+0xce>
		return FALSE;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	e04b      	b.n	8005026 <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f94:	4826      	ldr	r0, [pc, #152]	; (8005030 <lowlayer_writePulse+0x170>)
 8004f96:	f006 ffc9 	bl	800bf2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004fa0:	4824      	ldr	r0, [pc, #144]	; (8005034 <lowlayer_writePulse+0x174>)
 8004fa2:	f006 ffc3 	bl	800bf2c <HAL_GPIO_WritePin>
	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 8004fa6:	7dfb      	ldrb	r3, [r7, #23]
 8004fa8:	4619      	mov	r1, r3
 8004faa:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8004fae:	f7fe fb91 	bl	80036d4 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 8004fb2:	7dbb      	ldrb	r3, [r7, #22]
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4820      	ldr	r0, [pc, #128]	; (8005038 <lowlayer_writePulse+0x178>)
 8004fb8:	f7fe fb8c 	bl	80036d4 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 8004fbc:	7d7b      	ldrb	r3, [r7, #21]
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	481e      	ldr	r0, [pc, #120]	; (800503c <lowlayer_writePulse+0x17c>)
 8004fc2:	f7fe fb87 	bl	80036d4 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 8004fc6:	7d3b      	ldrb	r3, [r7, #20]
 8004fc8:	4619      	mov	r1, r3
 8004fca:	481d      	ldr	r0, [pc, #116]	; (8005040 <lowlayer_writePulse+0x180>)
 8004fcc:	f7fe fb82 	bl	80036d4 <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 8004fd0:	2364      	movs	r3, #100	; 0x64
 8004fd2:	73fb      	strb	r3, [r7, #15]
	
	 while (delay--);
 8004fd4:	bf00      	nop
 8004fd6:	7bfb      	ldrb	r3, [r7, #15]
 8004fd8:	1e5a      	subs	r2, r3, #1
 8004fda:	73fa      	strb	r2, [r7, #15]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1fa      	bne.n	8004fd6 <lowlayer_writePulse+0x116>

//	int16_t wow = HAL_GPIO_ReadPin(CPLD_BUSY_GPIO_Port, CPLD_BUSY_Pin);
//	LOG_REPORT(" Busy: ", wow);
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004fe6:	4813      	ldr	r0, [pc, #76]	; (8005034 <lowlayer_writePulse+0x174>)
 8004fe8:	f006 ffa0 	bl	800bf2c <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 8004fec:	4b15      	ldr	r3, [pc, #84]	; (8005044 <lowlayer_writePulse+0x184>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	4a13      	ldr	r2, [pc, #76]	; (8005044 <lowlayer_writePulse+0x184>)
 8004ff8:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 8004ffa:	4b12      	ldr	r3, [pc, #72]	; (8005044 <lowlayer_writePulse+0x184>)
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005002:	4413      	add	r3, r2
 8005004:	4a0f      	ldr	r2, [pc, #60]	; (8005044 <lowlayer_writePulse+0x184>)
 8005006:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 8005008:	4b0e      	ldr	r3, [pc, #56]	; (8005044 <lowlayer_writePulse+0x184>)
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005010:	4413      	add	r3, r2
 8005012:	4a0c      	ldr	r2, [pc, #48]	; (8005044 <lowlayer_writePulse+0x184>)
 8005014:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 8005016:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <lowlayer_writePulse+0x184>)
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800501e:	4413      	add	r3, r2
 8005020:	4a08      	ldr	r2, [pc, #32]	; (8005044 <lowlayer_writePulse+0x184>)
 8005022:	60d3      	str	r3, [r2, #12]

	return TRUE;
 8005024:	2301      	movs	r3, #1
}
 8005026:	4618      	mov	r0, r3
 8005028:	371c      	adds	r7, #28
 800502a:	46bd      	mov	sp, r7
 800502c:	bd90      	pop	{r4, r7, pc}
 800502e:	bf00      	nop
 8005030:	40020000 	.word	0x40020000
 8005034:	40020c00 	.word	0x40020c00
 8005038:	60000002 	.word	0x60000002
 800503c:	60000004 	.word	0x60000004
 8005040:	60000006 	.word	0x60000006
 8005044:	20005a90 	.word	0x20005a90

08005048 <lowlayer_resetEncoder>:

void	lowlayer_resetEncoder(void) {
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
	// Trigger
	uint8_t delay = 100;
 800504e:	2364      	movs	r3, #100	; 0x64
 8005050:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
 8005052:	2201      	movs	r2, #1
 8005054:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005058:	4809      	ldr	r0, [pc, #36]	; (8005080 <lowlayer_resetEncoder+0x38>)
 800505a:	f006 ff67 	bl	800bf2c <HAL_GPIO_WritePin>
	while (delay--);
 800505e:	bf00      	nop
 8005060:	79fb      	ldrb	r3, [r7, #7]
 8005062:	1e5a      	subs	r2, r3, #1
 8005064:	71fa      	strb	r2, [r7, #7]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1fa      	bne.n	8005060 <lowlayer_resetEncoder+0x18>
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
 800506a:	2200      	movs	r2, #0
 800506c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005070:	4803      	ldr	r0, [pc, #12]	; (8005080 <lowlayer_resetEncoder+0x38>)
 8005072:	f006 ff5b 	bl	800bf2c <HAL_GPIO_WritePin>
}
 8005076:	bf00      	nop
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	40020c00 	.word	0x40020c00

08005084 <lowlayer_readLimitSwitch>:

uint8_t lowlayer_readLimitSwitch(void) {
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 800508a:	4805      	ldr	r0, [pc, #20]	; (80050a0 <lowlayer_readLimitSwitch+0x1c>)
 800508c:	f7fe fb31 	bl	80036f2 <FSMC_Read>
 8005090:	4603      	mov	r3, r0
 8005092:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 8005094:	88fb      	ldrh	r3, [r7, #6]
 8005096:	b2db      	uxtb	r3, r3
}
 8005098:	4618      	mov	r0, r3
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	60000020 	.word	0x60000020

080050a4 <lowlayer_readEncoder>:

int32_t lowlayer_readEncoder(uint8_t encoder_num) {
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	4603      	mov	r3, r0
 80050ac:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (encoder_num <= 2) {
 80050ae:	79fb      	ldrb	r3, [r7, #7]
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d81c      	bhi.n	80050ee <lowlayer_readEncoder+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4);
 80050b4:	79fb      	ldrb	r3, [r7, #7]
 80050b6:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80050ba:	3310      	adds	r3, #16
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fe fb17 	bl	80036f2 <FSMC_Read>
 80050c4:	4603      	mov	r3, r0
 80050c6:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4 + 2);
 80050c8:	79fb      	ldrb	r3, [r7, #7]
 80050ca:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80050ce:	3310      	adds	r3, #16
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	3302      	adds	r3, #2
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7fe fb0c 	bl	80036f2 <FSMC_Read>
 80050da:	4603      	mov	r3, r0
 80050dc:	813b      	strh	r3, [r7, #8]
		data = high_word;
 80050de:	893b      	ldrh	r3, [r7, #8]
 80050e0:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	041a      	lsls	r2, r3, #16
 80050e6:	897b      	ldrh	r3, [r7, #10]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	e001      	b.n	80050f2 <lowlayer_readEncoder+0x4e>
	} else {
		data = 0;
 80050ee:	2300      	movs	r3, #0
 80050f0:	60fb      	str	r3, [r7, #12]
	}
	return data;
 80050f2:	68fb      	ldr	r3, [r7, #12]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <lowlayer_readCapture>:

int32_t lowlayer_readCapture(uint8_t capture_num) {
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	4603      	mov	r3, r0
 8005104:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 8005106:	79fb      	ldrb	r3, [r7, #7]
 8005108:	2b02      	cmp	r3, #2
 800510a:	d81c      	bhi.n	8005146 <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 800510c:	79fb      	ldrb	r3, [r7, #7]
 800510e:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8005112:	3318      	adds	r3, #24
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4618      	mov	r0, r3
 8005118:	f7fe faeb 	bl	80036f2 <FSMC_Read>
 800511c:	4603      	mov	r3, r0
 800511e:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 8005120:	79fb      	ldrb	r3, [r7, #7]
 8005122:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8005126:	3318      	adds	r3, #24
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	3302      	adds	r3, #2
 800512c:	4618      	mov	r0, r3
 800512e:	f7fe fae0 	bl	80036f2 <FSMC_Read>
 8005132:	4603      	mov	r3, r0
 8005134:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8005136:	893b      	ldrh	r3, [r7, #8]
 8005138:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	041a      	lsls	r2, r3, #16
 800513e:	897b      	ldrh	r3, [r7, #10]
 8005140:	4313      	orrs	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]
 8005144:	e001      	b.n	800514a <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
	}
	return data;
 800514a:	68fb      	ldr	r3, [r7, #12]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <lowlayer_updateEncoder>:

void	lowlayer_updateEncoder(void) {
 8005154:	b590      	push	{r4, r7, lr}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 800515a:	2300      	movs	r3, #0
 800515c:	71fb      	strb	r3, [r7, #7]
 800515e:	e00b      	b.n	8005178 <lowlayer_updateEncoder+0x24>
		position_encoder[i] = lowlayer_readEncoder(i);
 8005160:	79fc      	ldrb	r4, [r7, #7]
 8005162:	79fb      	ldrb	r3, [r7, #7]
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff ff9d 	bl	80050a4 <lowlayer_readEncoder>
 800516a:	4602      	mov	r2, r0
 800516c:	4b06      	ldr	r3, [pc, #24]	; (8005188 <lowlayer_updateEncoder+0x34>)
 800516e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8005172:	79fb      	ldrb	r3, [r7, #7]
 8005174:	3301      	adds	r3, #1
 8005176:	71fb      	strb	r3, [r7, #7]
 8005178:	79fb      	ldrb	r3, [r7, #7]
 800517a:	2b02      	cmp	r3, #2
 800517c:	d9f0      	bls.n	8005160 <lowlayer_updateEncoder+0xc>
	}
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	bd90      	pop	{r4, r7, pc}
 8005186:	bf00      	nop
 8005188:	20005aa4 	.word	0x20005aa4

0800518c <lowlayer_updateCapture>:

void	lowlayer_updateCapture(void) {
 800518c:	b590      	push	{r4, r7, lr}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8005192:	2300      	movs	r3, #0
 8005194:	71fb      	strb	r3, [r7, #7]
 8005196:	e00b      	b.n	80051b0 <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 8005198:	79fc      	ldrb	r4, [r7, #7]
 800519a:	79fb      	ldrb	r3, [r7, #7]
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff ffad 	bl	80050fc <lowlayer_readCapture>
 80051a2:	4602      	mov	r2, r0
 80051a4:	4b06      	ldr	r3, [pc, #24]	; (80051c0 <lowlayer_updateCapture+0x34>)
 80051a6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 80051aa:	79fb      	ldrb	r3, [r7, #7]
 80051ac:	3301      	adds	r3, #1
 80051ae:	71fb      	strb	r3, [r7, #7]
 80051b0:	79fb      	ldrb	r3, [r7, #7]
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d9f0      	bls.n	8005198 <lowlayer_updateCapture+0xc>
	}
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd90      	pop	{r4, r7, pc}
 80051be:	bf00      	nop
 80051c0:	20005ab4 	.word	0x20005ab4

080051c4 <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 80051ca:	f7ff ff5b 	bl	8005084 <lowlayer_readLimitSwitch>
 80051ce:	4603      	mov	r3, r0
 80051d0:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 80051d2:	2300      	movs	r3, #0
 80051d4:	71fb      	strb	r3, [r7, #7]
 80051d6:	e00d      	b.n	80051f4 <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 80051d8:	79ba      	ldrb	r2, [r7, #6]
 80051da:	79fb      	ldrb	r3, [r7, #7]
 80051dc:	fa42 f303 	asr.w	r3, r2, r3
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	79fb      	ldrb	r3, [r7, #7]
 80051e4:	f002 0201 	and.w	r2, r2, #1
 80051e8:	b2d1      	uxtb	r1, r2
 80051ea:	4a06      	ldr	r2, [pc, #24]	; (8005204 <lowlayer_updateLimit+0x40>)
 80051ec:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 80051ee:	79fb      	ldrb	r3, [r7, #7]
 80051f0:	3301      	adds	r3, #1
 80051f2:	71fb      	strb	r3, [r7, #7]
 80051f4:	79fb      	ldrb	r3, [r7, #7]
 80051f6:	2b03      	cmp	r3, #3
 80051f8:	d9ee      	bls.n	80051d8 <lowlayer_updateLimit+0x14>
	}
}
 80051fa:	bf00      	nop
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	20005ab0 	.word	0x20005ab0

08005208 <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	4603      	mov	r3, r0
 8005210:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 8005212:	79fb      	ldrb	r3, [r7, #7]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d006      	beq.n	8005226 <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 8005218:	2201      	movs	r2, #1
 800521a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800521e:	4807      	ldr	r0, [pc, #28]	; (800523c <lowlayer_setOutput+0x34>)
 8005220:	f006 fe84 	bl	800bf2c <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 8005224:	e005      	b.n	8005232 <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 8005226:	2200      	movs	r2, #0
 8005228:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800522c:	4803      	ldr	r0, [pc, #12]	; (800523c <lowlayer_setOutput+0x34>)
 800522e:	f006 fe7d 	bl	800bf2c <HAL_GPIO_WritePin>
}
 8005232:	bf00      	nop
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	40020400 	.word	0x40020400

08005240 <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 8005244:	2201      	movs	r2, #1
 8005246:	2140      	movs	r1, #64	; 0x40
 8005248:	4802      	ldr	r0, [pc, #8]	; (8005254 <lowlayer_CPLD_Init+0x14>)
 800524a:	f006 fe6f 	bl	800bf2c <HAL_GPIO_WritePin>
}
 800524e:	bf00      	nop
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40020c00 	.word	0x40020c00

08005258 <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 800525c:	2201      	movs	r2, #1
 800525e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005262:	4808      	ldr	r0, [pc, #32]	; (8005284 <lowlayer_stepMotorInit+0x2c>)
 8005264:	f006 fe62 	bl	800bf2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 8005268:	2201      	movs	r2, #1
 800526a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800526e:	4805      	ldr	r0, [pc, #20]	; (8005284 <lowlayer_stepMotorInit+0x2c>)
 8005270:	f006 fe5c 	bl	800bf2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 8005274:	2201      	movs	r2, #1
 8005276:	f44f 7180 	mov.w	r1, #256	; 0x100
 800527a:	4802      	ldr	r0, [pc, #8]	; (8005284 <lowlayer_stepMotorInit+0x2c>)
 800527c:	f006 fe56 	bl	800bf2c <HAL_GPIO_WritePin>
}
 8005280:	bf00      	nop
 8005282:	bd80      	pop	{r7, pc}
 8005284:	40020000 	.word	0x40020000

08005288 <scaraStartup>:
//											 "Over Velocity",
//											 "Over Accelerate",
//											 "Wrong Joint Num",
//											 "Wrong Coordinate"
//											};
void				scaraStartup(void) {
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	scaraSetScanFlag();
#endif
	lowlayer_CPLD_Init();
 800528c:	f7ff ffd8 	bl	8005240 <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 8005290:	f7ff ffe2 	bl	8005258 <lowlayer_stepMotorInit>
	lowlayer_resetEncoder();
 8005294:	f7ff fed8 	bl	8005048 <lowlayer_resetEncoder>
	//lowlayer_writePulse(0, 0, 0, 0);
}
 8005298:	bf00      	nop
 800529a:	bd80      	pop	{r7, pc}
 800529c:	0000      	movs	r0, r0
	...

080052a0 <scaraInitDuty>:
	return SCARA_STATUS_OK;
	
}

/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 80052a0:	b084      	sub	sp, #16
 80052a2:	b5b0      	push	{r4, r5, r7, lr}
 80052a4:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 80052a8:	af90      	add	r7, sp, #576	; 0x240
 80052aa:	f507 7ce8 	add.w	ip, r7, #464	; 0x1d0
 80052ae:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if(DUTY_SPACE_TASK == command.space_type) {
 80052b2:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f040 83b7 	bne.w	8005a2a <scaraInitDuty+0x78a>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 80052bc:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 80052c0:	a3b3      	add	r3, pc, #716	; (adr r3, 8005590 <scaraInitDuty+0x2f0>)
 80052c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c6:	f7fb f997 	bl	80005f8 <__aeabi_dmul>
 80052ca:	4602      	mov	r2, r0
 80052cc:	460b      	mov	r3, r1
 80052ce:	4610      	mov	r0, r2
 80052d0:	4619      	mov	r1, r3
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	4bb0      	ldr	r3, [pc, #704]	; (8005598 <scaraInitDuty+0x2f8>)
 80052d8:	f7fb fab8 	bl	800084c <__aeabi_ddiv>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80052e4:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d130      	bne.n	800534e <scaraInitDuty+0xae>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 80052ec:	4bab      	ldr	r3, [pc, #684]	; (800559c <scaraInitDuty+0x2fc>)
 80052ee:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80052f2:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 80052f6:	f7fa ffc9 	bl	800028c <__adddf3>
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	4639      	mov	r1, r7
 8005300:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= positionCurrent.y + command.target_point.y;
 8005304:	4ba5      	ldr	r3, [pc, #660]	; (800559c <scaraInitDuty+0x2fc>)
 8005306:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800530a:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 800530e:	f7fa ffbd 	bl	800028c <__adddf3>
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	4639      	mov	r1, r7
 8005318:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= positionCurrent.z + command.target_point.z;
 800531c:	4b9f      	ldr	r3, [pc, #636]	; (800559c <scaraInitDuty+0x2fc>)
 800531e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8005322:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8005326:	f7fa ffb1 	bl	800028c <__adddf3>
 800532a:	4602      	mov	r2, r0
 800532c:	460b      	mov	r3, r1
 800532e:	4639      	mov	r1, r7
 8005330:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8005334:	4b99      	ldr	r3, [pc, #612]	; (800559c <scaraInitDuty+0x2fc>)
 8005336:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800533a:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 800533e:	f7fa ffa5 	bl	800028c <__adddf3>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	4639      	mov	r1, r7
 8005348:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 800534c:	e01b      	b.n	8005386 <scaraInitDuty+0xe6>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 800534e:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005352:	2b00      	cmp	r3, #0
 8005354:	d114      	bne.n	8005380 <scaraInitDuty+0xe0>
			target_point.x 		= command.target_point.x;
 8005356:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 800535a:	4639      	mov	r1, r7
 800535c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= command.target_point.y;
 8005360:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8005364:	4639      	mov	r1, r7
 8005366:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= command.target_point.z;
 800536a:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 800536e:	4639      	mov	r1, r7
 8005370:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= command.target_point.roll;
 8005374:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8005378:	4639      	mov	r1, r7
 800537a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 800537e:	e002      	b.n	8005386 <scaraInitDuty+0xe6>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8005380:	230c      	movs	r3, #12
 8005382:	f001 bb02 	b.w	800698a <scaraInitDuty+0x16ea>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 8005386:	463b      	mov	r3, r7
 8005388:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800538c:	4b83      	ldr	r3, [pc, #524]	; (800559c <scaraInitDuty+0x2fc>)
 800538e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8005392:	f7fa ff79 	bl	8000288 <__aeabi_dsub>
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
 800539a:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
		dir_angle = 1;
 800539e:	2301      	movs	r3, #1
 80053a0:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
		if ( angle_s < 0) {
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	f04f 0300 	mov.w	r3, #0
 80053ac:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 80053b0:	f7fb fb94 	bl	8000adc <__aeabi_dcmplt>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d002      	beq.n	80053c0 <scaraInitDuty+0x120>
			dir_angle = -1;
 80053ba:	23ff      	movs	r3, #255	; 0xff
 80053bc:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
		}
		if ( fabs(angle_s) > PI) {
 80053c0:	f8d7 41a8 	ldr.w	r4, [r7, #424]	; 0x1a8
 80053c4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80053c8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80053cc:	a370      	add	r3, pc, #448	; (adr r3, 8005590 <scaraInitDuty+0x2f0>)
 80053ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d2:	4620      	mov	r0, r4
 80053d4:	4629      	mov	r1, r5
 80053d6:	f7fb fb9f 	bl	8000b18 <__aeabi_dcmpgt>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d021      	beq.n	8005424 <scaraInitDuty+0x184>
			dir_angle = -dir_angle;
 80053e0:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80053e4:	425b      	negs	r3, r3
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
			angle_s = (2*PI - fabsf(angle_s))*dir_angle;
 80053ec:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 80053f0:	f7fb fbfa 	bl	8000be8 <__aeabi_d2f>
 80053f4:	ee07 0a90 	vmov	s15, r0
 80053f8:	eef0 7ae7 	vabs.f32	s15, s15
 80053fc:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80055a0 <scaraInitDuty+0x300>
 8005400:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005404:	f997 31a7 	ldrsb.w	r3, [r7, #423]	; 0x1a7
 8005408:	ee07 3a90 	vmov	s15, r3
 800540c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005414:	ee17 0a90 	vmov	r0, s15
 8005418:	f7fb f896 	bl	8000548 <__aeabi_f2d>
 800541c:	4603      	mov	r3, r0
 800541e:	460c      	mov	r4, r1
 8005420:	e9c7 346a 	strd	r3, r4, [r7, #424]	; 0x1a8
		}


		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 8005424:	4b5f      	ldr	r3, [pc, #380]	; (80055a4 <scaraInitDuty+0x304>)
 8005426:	2200      	movs	r2, #0
 8005428:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 800542a:	4b5c      	ldr	r3, [pc, #368]	; (800559c <scaraInitDuty+0x2fc>)
 800542c:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8005430:	4a5c      	ldr	r2, [pc, #368]	; (80055a4 <scaraInitDuty+0x304>)
 8005432:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8005436:	e9c2 3400 	strd	r3, r4, [r2]
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 800543a:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 800543e:	2b00      	cmp	r3, #0
 8005440:	d11f      	bne.n	8005482 <scaraInitDuty+0x1e2>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 8005442:	4b58      	ldr	r3, [pc, #352]	; (80055a4 <scaraInitDuty+0x304>)
 8005444:	2200      	movs	r2, #0
 8005446:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 8005448:	4c54      	ldr	r4, [pc, #336]	; (800559c <scaraInitDuty+0x2fc>)
 800544a:	463b      	mov	r3, r7
 800544c:	a82e      	add	r0, sp, #184	; 0xb8
 800544e:	4619      	mov	r1, r3
 8005450:	23c0      	movs	r3, #192	; 0xc0
 8005452:	461a      	mov	r2, r3
 8005454:	f010 fb02 	bl	8015a5c <memcpy>
 8005458:	4668      	mov	r0, sp
 800545a:	f104 0308 	add.w	r3, r4, #8
 800545e:	22b8      	movs	r2, #184	; 0xb8
 8005460:	4619      	mov	r1, r3
 8005462:	f010 fafb 	bl	8015a5c <memcpy>
 8005466:	e894 000c 	ldmia.w	r4, {r2, r3}
 800546a:	484f      	ldr	r0, [pc, #316]	; (80055a8 <scaraInitDuty+0x308>)
 800546c:	f001 faa0 	bl	80069b0 <scaraInitLine>
 8005470:	4603      	mov	r3, r0
 8005472:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
			total_s = myDUTY.task.path.line.total_s;
 8005476:	4b4b      	ldr	r3, [pc, #300]	; (80055a4 <scaraInitDuty+0x304>)
 8005478:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 800547c:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
 8005480:	e07d      	b.n	800557e <scaraInitDuty+0x2de>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 8005482:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 8005486:	2b01      	cmp	r3, #1
 8005488:	d176      	bne.n	8005578 <scaraInitDuty+0x2d8>
			SCARA_PositionTypeDef	center_point;
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 800548a:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 800548e:	2b01      	cmp	r3, #1
 8005490:	d12d      	bne.n	80054ee <scaraInitDuty+0x24e>
				center_point.x 		= positionCurrent.x + command.sub_point.x;
 8005492:	4b42      	ldr	r3, [pc, #264]	; (800559c <scaraInitDuty+0x2fc>)
 8005494:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005498:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 800549c:	461a      	mov	r2, r3
 800549e:	4623      	mov	r3, r4
 80054a0:	f7fa fef4 	bl	800028c <__adddf3>
 80054a4:	4603      	mov	r3, r0
 80054a6:	460c      	mov	r4, r1
 80054a8:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80054ac:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
				center_point.y 		= positionCurrent.y + command.sub_point.y;
 80054b0:	4b3a      	ldr	r3, [pc, #232]	; (800559c <scaraInitDuty+0x2fc>)
 80054b2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80054b6:	e9d7 34c2 	ldrd	r3, r4, [r7, #776]	; 0x308
 80054ba:	461a      	mov	r2, r3
 80054bc:	4623      	mov	r3, r4
 80054be:	f7fa fee5 	bl	800028c <__adddf3>
 80054c2:	4603      	mov	r3, r0
 80054c4:	460c      	mov	r4, r1
 80054c6:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80054ca:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
				center_point.z 		= positionCurrent.z + command.sub_point.z;
 80054ce:	4b33      	ldr	r3, [pc, #204]	; (800559c <scaraInitDuty+0x2fc>)
 80054d0:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80054d4:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 80054d8:	461a      	mov	r2, r3
 80054da:	4623      	mov	r3, r4
 80054dc:	f7fa fed6 	bl	800028c <__adddf3>
 80054e0:	4603      	mov	r3, r0
 80054e2:	460c      	mov	r4, r1
 80054e4:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80054e8:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
 80054ec:	e019      	b.n	8005522 <scaraInitDuty+0x282>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80054ee:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d112      	bne.n	800551c <scaraInitDuty+0x27c>
				center_point.x 		= command.target_point.x;
 80054f6:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 80054fa:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80054fe:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
				center_point.y 		= command.target_point.y;
 8005502:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8005506:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800550a:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
				center_point.z 		= command.target_point.z;
 800550e:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8005512:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8005516:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
 800551a:	e002      	b.n	8005522 <scaraInitDuty+0x282>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 800551c:	230c      	movs	r3, #12
			return SCARA_STATUS_ERROR_COORDINATE;
 800551e:	f001 ba34 	b.w	800698a <scaraInitDuty+0x16ea>
			}

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 8005522:	4b20      	ldr	r3, [pc, #128]	; (80055a4 <scaraInitDuty+0x304>)
 8005524:	2201      	movs	r2, #1
 8005526:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 8005528:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800552c:	4c1b      	ldr	r4, [pc, #108]	; (800559c <scaraInitDuty+0x2fc>)
 800552e:	938e      	str	r3, [sp, #568]	; 0x238
 8005530:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005534:	a85e      	add	r0, sp, #376	; 0x178
 8005536:	4619      	mov	r1, r3
 8005538:	23c0      	movs	r3, #192	; 0xc0
 800553a:	461a      	mov	r2, r3
 800553c:	f010 fa8e 	bl	8015a5c <memcpy>
 8005540:	463b      	mov	r3, r7
 8005542:	a82e      	add	r0, sp, #184	; 0xb8
 8005544:	4619      	mov	r1, r3
 8005546:	23c0      	movs	r3, #192	; 0xc0
 8005548:	461a      	mov	r2, r3
 800554a:	f010 fa87 	bl	8015a5c <memcpy>
 800554e:	4668      	mov	r0, sp
 8005550:	f104 0308 	add.w	r3, r4, #8
 8005554:	22b8      	movs	r2, #184	; 0xb8
 8005556:	4619      	mov	r1, r3
 8005558:	f010 fa80 	bl	8015a5c <memcpy>
 800555c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8005560:	4812      	ldr	r0, [pc, #72]	; (80055ac <scaraInitDuty+0x30c>)
 8005562:	f001 fae9 	bl	8006b38 <scaraInitCircle>
 8005566:	4603      	mov	r3, r0
 8005568:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
										positionCurrent,
										target_point,
										center_point,
										command.sub_para_int );
			total_s = myDUTY.task.path.circle.total_s;
 800556c:	4b0d      	ldr	r3, [pc, #52]	; (80055a4 <scaraInitDuty+0x304>)
 800556e:	e9d3 343a 	ldrd	r3, r4, [r3, #232]	; 0xe8
 8005572:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
 8005576:	e002      	b.n	800557e <scaraInitDuty+0x2de>

		} else {
			return SCARA_STATUS_ERROR_TASK;
 8005578:	2303      	movs	r3, #3
 800557a:	f001 ba06 	b.w	800698a <scaraInitDuty+0x16ea>
		}

		if ( SCARA_STATUS_OK != status) {
 800557e:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 8005582:	2b00      	cmp	r3, #0
 8005584:	d014      	beq.n	80055b0 <scaraInitDuty+0x310>
			return status;
 8005586:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 800558a:	f001 b9fe 	b.w	800698a <scaraInitDuty+0x16ea>
 800558e:	bf00      	nop
 8005590:	60000000 	.word	0x60000000
 8005594:	400921fb 	.word	0x400921fb
 8005598:	40668000 	.word	0x40668000
 800559c:	200066b8 	.word	0x200066b8
 80055a0:	40c90fdb 	.word	0x40c90fdb
 80055a4:	20005af8 	.word	0x20005af8
 80055a8:	20005b08 	.word	0x20005b08
 80055ac:	20005b78 	.word	0x20005b78
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 80055b0:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f040 80ed 	bne.w	8005794 <scaraInitDuty+0x4f4>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80055ba:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d155      	bne.n	800566e <scaraInitDuty+0x3ce>
//				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
//				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
//						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
//				myDUTY.time_total = command.time_total;

				myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
 80055c2:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80055c6:	4a9b      	ldr	r2, [pc, #620]	; (8005834 <scaraInitDuty+0x594>)
 80055c8:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 80055cc:	4b99      	ldr	r3, [pc, #612]	; (8005834 <scaraInitDuty+0x594>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB1(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 80055d4:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80055d8:	ed97 6b7c 	vldr	d6, [r7, #496]	; 0x1f0
 80055dc:	eeb0 2a46 	vmov.f32	s4, s12
 80055e0:	eef0 2a66 	vmov.f32	s5, s13
 80055e4:	eeb0 1a47 	vmov.f32	s2, s14
 80055e8:	eef0 1a67 	vmov.f32	s3, s15
 80055ec:	2201      	movs	r2, #1
 80055ee:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 80055f2:	2104      	movs	r1, #4
 80055f4:	4890      	ldr	r0, [pc, #576]	; (8005838 <scaraInitDuty+0x598>)
 80055f6:	f001 fc63 	bl	8006ec0 <scaraInitLSPB1>
 80055fa:	4603      	mov	r3, r0
 80055fc:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);

				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8005600:	4a8c      	ldr	r2, [pc, #560]	; (8005834 <scaraInitDuty+0x594>)
 8005602:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8005606:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
 800560a:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 800560e:	4a89      	ldr	r2, [pc, #548]	; (8005834 <scaraInitDuty+0x594>)
 8005610:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005614:	e9c2 3400 	strd	r3, r4, [r2]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8005618:	4b86      	ldr	r3, [pc, #536]	; (8005834 <scaraInitDuty+0x594>)
 800561a:	2202      	movs	r2, #2
 800561c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total);
 8005620:	f997 31a7 	ldrsb.w	r3, [r7, #423]	; 0x1a7
 8005624:	4618      	mov	r0, r3
 8005626:	f7fa ff7d 	bl	8000524 <__aeabi_i2d>
 800562a:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 800562e:	f7fa ffe3 	bl	80005f8 <__aeabi_dmul>
 8005632:	4603      	mov	r3, r0
 8005634:	460c      	mov	r4, r1
 8005636:	ec44 3b16 	vmov	d6, r3, r4
 800563a:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 800563e:	eeb0 1a47 	vmov.f32	s2, s14
 8005642:	eef0 1a67 	vmov.f32	s3, s15
 8005646:	2203      	movs	r2, #3
 8005648:	eeb0 0a46 	vmov.f32	s0, s12
 800564c:	eef0 0a66 	vmov.f32	s1, s13
 8005650:	2105      	movs	r1, #5
 8005652:	487a      	ldr	r0, [pc, #488]	; (800583c <scaraInitDuty+0x59c>)
 8005654:	f001 fbe8 	bl	8006e28 <scaraInitLinear>
 8005658:	4603      	mov	r3, r0
 800565a:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
				myDUTY.time_total = command.time_total;
 800565e:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005662:	4a74      	ldr	r2, [pc, #464]	; (8005834 <scaraInitDuty+0x594>)
 8005664:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005668:	e9c2 3400 	strd	r3, r4, [r2]
 800566c:	e1cc      	b.n	8005a08 <scaraInitDuty+0x768>
			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 800566e:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005672:	2b00      	cmp	r3, #0
 8005674:	f040 808b 	bne.w	800578e <scaraInitDuty+0x4ee>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005678:	4b6e      	ldr	r3, [pc, #440]	; (8005834 <scaraInitDuty+0x594>)
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8005680:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005684:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005688:	eeb0 2a46 	vmov.f32	s4, s12
 800568c:	eef0 2a66 	vmov.f32	s5, s13
 8005690:	eeb0 1a47 	vmov.f32	s2, s14
 8005694:	eef0 1a67 	vmov.f32	s3, s15
 8005698:	2200      	movs	r2, #0
 800569a:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 800569e:	2104      	movs	r1, #4
 80056a0:	4865      	ldr	r0, [pc, #404]	; (8005838 <scaraInitDuty+0x598>)
 80056a2:	f001 fe69 	bl	8007378 <scaraInitLSPB>
 80056a6:	4603      	mov	r3, r0
 80056a8:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 80056ac:	4b61      	ldr	r3, [pc, #388]	; (8005834 <scaraInitDuty+0x594>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 80056b4:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80056b8:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80056bc:	eeb0 2a46 	vmov.f32	s4, s12
 80056c0:	eef0 2a66 	vmov.f32	s5, s13
 80056c4:	eeb0 1a47 	vmov.f32	s2, s14
 80056c8:	eef0 1a67 	vmov.f32	s3, s15
 80056cc:	2200      	movs	r2, #0
 80056ce:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 80056d2:	2105      	movs	r1, #5
 80056d4:	485a      	ldr	r0, [pc, #360]	; (8005840 <scaraInitDuty+0x5a0>)
 80056d6:	f001 fe4f 	bl	8007378 <scaraInitLSPB>
 80056da:	4603      	mov	r3, r0
 80056dc:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// Synchronous time end
				if(myDUTY.task.trajectory_3d.lspb.Tf > myDUTY.task.trajectory_roll.lspb.Tf) {
 80056e0:	4b54      	ldr	r3, [pc, #336]	; (8005834 <scaraInitDuty+0x594>)
 80056e2:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 80056e6:	4b53      	ldr	r3, [pc, #332]	; (8005834 <scaraInitDuty+0x594>)
 80056e8:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 80056ec:	461a      	mov	r2, r3
 80056ee:	4623      	mov	r3, r4
 80056f0:	f7fb fa12 	bl	8000b18 <__aeabi_dcmpgt>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d024      	beq.n	8005744 <scaraInitDuty+0x4a4>
					myDUTY.task.trajectory_roll.lspb.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
 80056fa:	4b4e      	ldr	r3, [pc, #312]	; (8005834 <scaraInitDuty+0x594>)
 80056fc:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8005700:	4a4c      	ldr	r2, [pc, #304]	; (8005834 <scaraInitDuty+0x594>)
 8005702:	e9c2 34ba 	strd	r3, r4, [r2, #744]	; 0x2e8
					status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8005706:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 800570a:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 800570e:	eeb0 2a46 	vmov.f32	s4, s12
 8005712:	eef0 2a66 	vmov.f32	s5, s13
 8005716:	eeb0 1a47 	vmov.f32	s2, s14
 800571a:	eef0 1a67 	vmov.f32	s3, s15
 800571e:	2201      	movs	r2, #1
 8005720:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 8005724:	2105      	movs	r1, #5
 8005726:	4846      	ldr	r0, [pc, #280]	; (8005840 <scaraInitDuty+0x5a0>)
 8005728:	f001 fe26 	bl	8007378 <scaraInitLSPB>
 800572c:	4603      	mov	r3, r0
 800572e:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8005732:	4b40      	ldr	r3, [pc, #256]	; (8005834 <scaraInitDuty+0x594>)
 8005734:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8005738:	4a3e      	ldr	r2, [pc, #248]	; (8005834 <scaraInitDuty+0x594>)
 800573a:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 800573e:	e9c2 3400 	strd	r3, r4, [r2]
 8005742:	e161      	b.n	8005a08 <scaraInitDuty+0x768>
				} else {
					myDUTY.task.trajectory_3d.lspb.Tf = myDUTY.task.trajectory_roll.lspb.Tf;
 8005744:	4b3b      	ldr	r3, [pc, #236]	; (8005834 <scaraInitDuty+0x594>)
 8005746:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 800574a:	4a3a      	ldr	r2, [pc, #232]	; (8005834 <scaraInitDuty+0x594>)
 800574c:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
					status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8005750:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005754:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005758:	eeb0 2a46 	vmov.f32	s4, s12
 800575c:	eef0 2a66 	vmov.f32	s5, s13
 8005760:	eeb0 1a47 	vmov.f32	s2, s14
 8005764:	eef0 1a67 	vmov.f32	s3, s15
 8005768:	2201      	movs	r2, #1
 800576a:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 800576e:	2104      	movs	r1, #4
 8005770:	4831      	ldr	r0, [pc, #196]	; (8005838 <scaraInitDuty+0x598>)
 8005772:	f001 fe01 	bl	8007378 <scaraInitLSPB>
 8005776:	4603      	mov	r3, r0
 8005778:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.lspb.Tf;
 800577c:	4b2d      	ldr	r3, [pc, #180]	; (8005834 <scaraInitDuty+0x594>)
 800577e:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8005782:	4a2c      	ldr	r2, [pc, #176]	; (8005834 <scaraInitDuty+0x594>)
 8005784:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005788:	e9c2 3400 	strd	r3, r4, [r2]
 800578c:	e13c      	b.n	8005a08 <scaraInitDuty+0x768>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 800578e:	2308      	movs	r3, #8
 8005790:	f001 b8fb 	b.w	800698a <scaraInitDuty+0x16ea>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 8005794:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8005798:	2b01      	cmp	r3, #1
 800579a:	f040 80ea 	bne.w	8005972 <scaraInitDuty+0x6d2>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800579e:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d152      	bne.n	800584c <scaraInitDuty+0x5ac>
				myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
 80057a6:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80057aa:	4a22      	ldr	r2, [pc, #136]	; (8005834 <scaraInitDuty+0x594>)
 80057ac:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80057b0:	4b20      	ldr	r3, [pc, #128]	; (8005834 <scaraInitDuty+0x594>)
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 80057b8:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80057bc:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80057c0:	eeb0 2a46 	vmov.f32	s4, s12
 80057c4:	eef0 2a66 	vmov.f32	s5, s13
 80057c8:	eeb0 1a47 	vmov.f32	s2, s14
 80057cc:	eef0 1a67 	vmov.f32	s3, s15
 80057d0:	2201      	movs	r2, #1
 80057d2:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 80057d6:	2104      	movs	r1, #4
 80057d8:	481a      	ldr	r0, [pc, #104]	; (8005844 <scaraInitDuty+0x5a4>)
 80057da:	f002 f9ad 	bl	8007b38 <scaraInitScurve>
 80057de:	4603      	mov	r3, r0
 80057e0:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
						 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				myDUTY.task.trajectory_roll.scurve.Tf = command.time_total;
 80057e4:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80057e8:	4a12      	ldr	r2, [pc, #72]	; (8005834 <scaraInitDuty+0x594>)
 80057ea:	e9c2 34de 	strd	r3, r4, [r2, #888]	; 0x378
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80057ee:	4b11      	ldr	r3, [pc, #68]	; (8005834 <scaraInitDuty+0x594>)
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 80057f6:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80057fa:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80057fe:	eeb0 2a46 	vmov.f32	s4, s12
 8005802:	eef0 2a66 	vmov.f32	s5, s13
 8005806:	eeb0 1a47 	vmov.f32	s2, s14
 800580a:	eef0 1a67 	vmov.f32	s3, s15
 800580e:	2201      	movs	r2, #1
 8005810:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 8005814:	2105      	movs	r1, #5
 8005816:	480c      	ldr	r0, [pc, #48]	; (8005848 <scaraInitDuty+0x5a8>)
 8005818:	f002 f98e 	bl	8007b38 <scaraInitScurve>
 800581c:	4603      	mov	r3, r0
 800581e:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				myDUTY.time_total = command.time_total;
 8005822:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005826:	4a03      	ldr	r2, [pc, #12]	; (8005834 <scaraInitDuty+0x594>)
 8005828:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 800582c:	e9c2 3400 	strd	r3, r4, [r2]
 8005830:	e0ea      	b.n	8005a08 <scaraInitDuty+0x768>
 8005832:	bf00      	nop
 8005834:	20005af8 	.word	0x20005af8
 8005838:	20005c10 	.word	0x20005c10
 800583c:	20005ee0 	.word	0x20005ee0
 8005840:	20005d90 	.word	0x20005d90
 8005844:	20005c90 	.word	0x20005c90
 8005848:	20005e10 	.word	0x20005e10

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 800584c:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005850:	2b00      	cmp	r3, #0
 8005852:	f040 808b 	bne.w	800596c <scaraInitDuty+0x6cc>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005856:	4bc0      	ldr	r3, [pc, #768]	; (8005b58 <scaraInitDuty+0x8b8>)
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 800585e:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005862:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005866:	eeb0 2a46 	vmov.f32	s4, s12
 800586a:	eef0 2a66 	vmov.f32	s5, s13
 800586e:	eeb0 1a47 	vmov.f32	s2, s14
 8005872:	eef0 1a67 	vmov.f32	s3, s15
 8005876:	2200      	movs	r2, #0
 8005878:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 800587c:	2104      	movs	r1, #4
 800587e:	48b7      	ldr	r0, [pc, #732]	; (8005b5c <scaraInitDuty+0x8bc>)
 8005880:	f002 f95a 	bl	8007b38 <scaraInitScurve>
 8005884:	4603      	mov	r3, r0
 8005886:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800588a:	4bb3      	ldr	r3, [pc, #716]	; (8005b58 <scaraInitDuty+0x8b8>)
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8005892:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005896:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 800589a:	eeb0 2a46 	vmov.f32	s4, s12
 800589e:	eef0 2a66 	vmov.f32	s5, s13
 80058a2:	eeb0 1a47 	vmov.f32	s2, s14
 80058a6:	eef0 1a67 	vmov.f32	s3, s15
 80058aa:	2200      	movs	r2, #0
 80058ac:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 80058b0:	2105      	movs	r1, #5
 80058b2:	48ab      	ldr	r0, [pc, #684]	; (8005b60 <scaraInitDuty+0x8c0>)
 80058b4:	f002 f940 	bl	8007b38 <scaraInitScurve>
 80058b8:	4603      	mov	r3, r0
 80058ba:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// synchronous time end
				if(myDUTY.task.trajectory_3d.scurve.Tf > myDUTY.task.trajectory_roll.scurve.Tf) {
 80058be:	4ba6      	ldr	r3, [pc, #664]	; (8005b58 <scaraInitDuty+0x8b8>)
 80058c0:	e9d3 017e 	ldrd	r0, r1, [r3, #504]	; 0x1f8
 80058c4:	4ba4      	ldr	r3, [pc, #656]	; (8005b58 <scaraInitDuty+0x8b8>)
 80058c6:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 80058ca:	461a      	mov	r2, r3
 80058cc:	4623      	mov	r3, r4
 80058ce:	f7fb f923 	bl	8000b18 <__aeabi_dcmpgt>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d024      	beq.n	8005922 <scaraInitDuty+0x682>
					myDUTY.task.trajectory_roll.scurve.Tf = myDUTY.task.trajectory_3d.scurve.Tf;
 80058d8:	4b9f      	ldr	r3, [pc, #636]	; (8005b58 <scaraInitDuty+0x8b8>)
 80058da:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 80058de:	4a9e      	ldr	r2, [pc, #632]	; (8005b58 <scaraInitDuty+0x8b8>)
 80058e0:	e9c2 34de 	strd	r3, r4, [r2, #888]	; 0x378
					status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 80058e4:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80058e8:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80058ec:	eeb0 2a46 	vmov.f32	s4, s12
 80058f0:	eef0 2a66 	vmov.f32	s5, s13
 80058f4:	eeb0 1a47 	vmov.f32	s2, s14
 80058f8:	eef0 1a67 	vmov.f32	s3, s15
 80058fc:	2201      	movs	r2, #1
 80058fe:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 8005902:	2105      	movs	r1, #5
 8005904:	4896      	ldr	r0, [pc, #600]	; (8005b60 <scaraInitDuty+0x8c0>)
 8005906:	f002 f917 	bl	8007b38 <scaraInitScurve>
 800590a:	4603      	mov	r3, r0
 800590c:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8005910:	4b91      	ldr	r3, [pc, #580]	; (8005b58 <scaraInitDuty+0x8b8>)
 8005912:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8005916:	4a90      	ldr	r2, [pc, #576]	; (8005b58 <scaraInitDuty+0x8b8>)
 8005918:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 800591c:	e9c2 3400 	strd	r3, r4, [r2]
 8005920:	e072      	b.n	8005a08 <scaraInitDuty+0x768>
				} else {
					myDUTY.task.trajectory_3d.scurve.Tf = myDUTY.task.trajectory_roll.scurve.Tf;
 8005922:	4b8d      	ldr	r3, [pc, #564]	; (8005b58 <scaraInitDuty+0x8b8>)
 8005924:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 8005928:	4a8b      	ldr	r2, [pc, #556]	; (8005b58 <scaraInitDuty+0x8b8>)
 800592a:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
					status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 800592e:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005932:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005936:	eeb0 2a46 	vmov.f32	s4, s12
 800593a:	eef0 2a66 	vmov.f32	s5, s13
 800593e:	eeb0 1a47 	vmov.f32	s2, s14
 8005942:	eef0 1a67 	vmov.f32	s3, s15
 8005946:	2201      	movs	r2, #1
 8005948:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 800594c:	2104      	movs	r1, #4
 800594e:	4883      	ldr	r0, [pc, #524]	; (8005b5c <scaraInitDuty+0x8bc>)
 8005950:	f002 f8f2 	bl	8007b38 <scaraInitScurve>
 8005954:	4603      	mov	r3, r0
 8005956:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.scurve.Tf;
 800595a:	4b7f      	ldr	r3, [pc, #508]	; (8005b58 <scaraInitDuty+0x8b8>)
 800595c:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 8005960:	4a7d      	ldr	r2, [pc, #500]	; (8005b58 <scaraInitDuty+0x8b8>)
 8005962:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005966:	e9c2 3400 	strd	r3, r4, [r2]
 800596a:	e04d      	b.n	8005a08 <scaraInitDuty+0x768>
				}
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 800596c:	2308      	movs	r3, #8
 800596e:	f001 b80c 	b.w	800698a <scaraInitDuty+0x16ea>
			}
		}else if(DUTY_TRAJECTORY_LINEAR == command.trajec_type){
 8005972:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8005976:	2b02      	cmp	r3, #2
 8005978:	d143      	bne.n	8005a02 <scaraInitDuty+0x762>
			myDUTY.time_total = command.time_total;
 800597a:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 800597e:	4a76      	ldr	r2, [pc, #472]	; (8005b58 <scaraInitDuty+0x8b8>)
 8005980:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005984:	e9c2 3400 	strd	r3, r4, [r2]
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8005988:	4a73      	ldr	r2, [pc, #460]	; (8005b58 <scaraInitDuty+0x8b8>)
 800598a:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 800598e:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8005992:	4b71      	ldr	r3, [pc, #452]	; (8005b58 <scaraInitDuty+0x8b8>)
 8005994:	2202      	movs	r2, #2
 8005996:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 800599a:	4b6f      	ldr	r3, [pc, #444]	; (8005b58 <scaraInitDuty+0x8b8>)
 800599c:	2202      	movs	r2, #2
 800599e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, total_s, DUTY_MODE_INIT_QT, command.time_total);
 80059a2:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 80059a6:	eeb0 1a47 	vmov.f32	s2, s14
 80059aa:	eef0 1a67 	vmov.f32	s3, s15
 80059ae:	2203      	movs	r2, #3
 80059b0:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 80059b4:	2104      	movs	r1, #4
 80059b6:	486b      	ldr	r0, [pc, #428]	; (8005b64 <scaraInitDuty+0x8c4>)
 80059b8:	f001 fa36 	bl	8006e28 <scaraInitLinear>
 80059bc:	4603      	mov	r3, r0
 80059be:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total);
 80059c2:	f997 31a7 	ldrsb.w	r3, [r7, #423]	; 0x1a7
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fa fdac 	bl	8000524 <__aeabi_i2d>
 80059cc:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 80059d0:	f7fa fe12 	bl	80005f8 <__aeabi_dmul>
 80059d4:	4603      	mov	r3, r0
 80059d6:	460c      	mov	r4, r1
 80059d8:	ec44 3b16 	vmov	d6, r3, r4
 80059dc:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 80059e0:	eeb0 1a47 	vmov.f32	s2, s14
 80059e4:	eef0 1a67 	vmov.f32	s3, s15
 80059e8:	2203      	movs	r2, #3
 80059ea:	eeb0 0a46 	vmov.f32	s0, s12
 80059ee:	eef0 0a66 	vmov.f32	s1, s13
 80059f2:	2105      	movs	r1, #5
 80059f4:	485c      	ldr	r0, [pc, #368]	; (8005b68 <scaraInitDuty+0x8c8>)
 80059f6:	f001 fa17 	bl	8006e28 <scaraInitLinear>
 80059fa:	4603      	mov	r3, r0
 80059fc:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
 8005a00:	e002      	b.n	8005a08 <scaraInitDuty+0x768>
		}else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8005a02:	2305      	movs	r3, #5
 8005a04:	f000 bfc1 	b.w	800698a <scaraInitDuty+0x16ea>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 8005a08:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <scaraInitDuty+0x778>
			return status1;
 8005a10:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 8005a14:	f000 bfb9 	b.w	800698a <scaraInitDuty+0x16ea>
		}
		if ( SCARA_STATUS_OK != status2) {
 8005a18:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 8786 	beq.w	800692e <scaraInitDuty+0x168e>
			return status2;
 8005a22:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 8005a26:	f000 bfb0 	b.w	800698a <scaraInitDuty+0x16ea>
		}


	
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 8005a2a:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	f040 877b 	bne.w	800692a <scaraInitDuty+0x168a>
		/*----------- Space Joint ------------*/
		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 8005a34:	4b48      	ldr	r3, [pc, #288]	; (8005b58 <scaraInitDuty+0x8b8>)
 8005a36:	2201      	movs	r2, #1
 8005a38:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 8005a3a:	4b4c      	ldr	r3, [pc, #304]	; (8005b6c <scaraInitDuty+0x8cc>)
 8005a3c:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8005a40:	4a45      	ldr	r2, [pc, #276]	; (8005b58 <scaraInitDuty+0x8b8>)
 8005a42:	f602 2218 	addw	r2, r2, #2584	; 0xa18
 8005a46:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 8005a4a:	4b48      	ldr	r3, [pc, #288]	; (8005b6c <scaraInitDuty+0x8cc>)
 8005a4c:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8005a50:	4a41      	ldr	r2, [pc, #260]	; (8005b58 <scaraInitDuty+0x8b8>)
 8005a52:	f502 6222 	add.w	r2, r2, #2592	; 0xa20
 8005a56:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 8005a5a:	4b44      	ldr	r3, [pc, #272]	; (8005b6c <scaraInitDuty+0x8cc>)
 8005a5c:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8005a60:	4a3d      	ldr	r2, [pc, #244]	; (8005b58 <scaraInitDuty+0x8b8>)
 8005a62:	f602 2228 	addw	r2, r2, #2600	; 0xa28
 8005a66:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 8005a6a:	4b40      	ldr	r3, [pc, #256]	; (8005b6c <scaraInitDuty+0x8cc>)
 8005a6c:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8005a70:	4a39      	ldr	r2, [pc, #228]	; (8005b58 <scaraInitDuty+0x8b8>)
 8005a72:	f502 6223 	add.w	r2, r2, #2608	; 0xa30
 8005a76:	e9c2 3400 	strd	r3, r4, [r2]

		//-----Joint Single
		if ( DUTY_JOINT_SINGLE == command.joint_type) {
 8005a7a:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f040 83e5 	bne.w	800624e <scaraInitDuty+0xfae>
			// Trajectory 1 profile
			double s, abs_position;
			switch(command.sub_para_int) {
 8005a84:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005a88:	2b03      	cmp	r3, #3
 8005a8a:	f200 8156 	bhi.w	8005d3a <scaraInitDuty+0xa9a>
 8005a8e:	a201      	add	r2, pc, #4	; (adr r2, 8005a94 <scaraInitDuty+0x7f4>)
 8005a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a94:	08005aa5 	.word	0x08005aa5
 8005a98:	08005b75 	.word	0x08005b75
 8005a9c:	08005c1b 	.word	0x08005c1b
 8005aa0:	08005c97 	.word	0x08005c97
			case 0:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8005aa4:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005aa8:	a329      	add	r3, pc, #164	; (adr r3, 8005b50 <scaraInitDuty+0x8b0>)
 8005aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aae:	f7fa fda3 	bl	80005f8 <__aeabi_dmul>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	460c      	mov	r4, r1
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	4621      	mov	r1, r4
 8005aba:	f04f 0200 	mov.w	r2, #0
 8005abe:	4b2c      	ldr	r3, [pc, #176]	; (8005b70 <scaraInitDuty+0x8d0>)
 8005ac0:	f7fa fec4 	bl	800084c <__aeabi_ddiv>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	460c      	mov	r4, r1
 8005ac8:	e9c7 347a 	strd	r3, r4, [r7, #488]	; 0x1e8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005acc:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d113      	bne.n	8005afc <scaraInitDuty+0x85c>
					abs_position = myDUTY.joint.theta1_start + command.sub_para_double;
 8005ad4:	4b20      	ldr	r3, [pc, #128]	; (8005b58 <scaraInitDuty+0x8b8>)
 8005ad6:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8005ada:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ade:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	4623      	mov	r3, r4
 8005ae6:	f7fa fbd1 	bl	800028c <__adddf3>
 8005aea:	4603      	mov	r3, r0
 8005aec:	460c      	mov	r4, r1
 8005aee:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8005af2:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005af6:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005afa:	e01a      	b.n	8005b32 <scaraInitDuty+0x892>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005afc:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d113      	bne.n	8005b2c <scaraInitDuty+0x88c>
					abs_position = command.sub_para_double;
 8005b04:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005b08:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.theta1_start;
 8005b0c:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005b10:	4b11      	ldr	r3, [pc, #68]	; (8005b58 <scaraInitDuty+0x8b8>)
 8005b12:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8005b16:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	4623      	mov	r3, r4
 8005b1e:	f7fa fbb3 	bl	8000288 <__aeabi_dsub>
 8005b22:	4603      	mov	r3, r0
 8005b24:	460c      	mov	r4, r1
 8005b26:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005b2a:	e002      	b.n	8005b32 <scaraInitDuty+0x892>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005b2c:	230c      	movs	r3, #12
 8005b2e:	f000 bf2c 	b.w	800698a <scaraInitDuty+0x16ea>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J0, abs_position)) {
 8005b32:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8005b36:	2000      	movs	r0, #0
 8005b38:	f004 fad6 	bl	800a0e8 <scaraCheckWorkSpace1>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 80fe 	beq.w	8005d40 <scaraInitDuty+0xaa0>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005b44:	2307      	movs	r3, #7
 8005b46:	f000 bf20 	b.w	800698a <scaraInitDuty+0x16ea>
 8005b4a:	bf00      	nop
 8005b4c:	f3af 8000 	nop.w
 8005b50:	60000000 	.word	0x60000000
 8005b54:	400921fb 	.word	0x400921fb
 8005b58:	20005af8 	.word	0x20005af8
 8005b5c:	20005c90 	.word	0x20005c90
 8005b60:	20005e10 	.word	0x20005e10
 8005b64:	20005d60 	.word	0x20005d60
 8005b68:	20005ee0 	.word	0x20005ee0
 8005b6c:	200066b8 	.word	0x200066b8
 8005b70:	40668000 	.word	0x40668000
				}
				break;
			case 1:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8005b74:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005b78:	a39f      	add	r3, pc, #636	; (adr r3, 8005df8 <scaraInitDuty+0xb58>)
 8005b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7e:	f7fa fd3b 	bl	80005f8 <__aeabi_dmul>
 8005b82:	4603      	mov	r3, r0
 8005b84:	460c      	mov	r4, r1
 8005b86:	4618      	mov	r0, r3
 8005b88:	4621      	mov	r1, r4
 8005b8a:	f04f 0200 	mov.w	r2, #0
 8005b8e:	4b9c      	ldr	r3, [pc, #624]	; (8005e00 <scaraInitDuty+0xb60>)
 8005b90:	f7fa fe5c 	bl	800084c <__aeabi_ddiv>
 8005b94:	4603      	mov	r3, r0
 8005b96:	460c      	mov	r4, r1
 8005b98:	e9c7 347a 	strd	r3, r4, [r7, #488]	; 0x1e8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005b9c:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d113      	bne.n	8005bcc <scaraInitDuty+0x92c>
					abs_position = myDUTY.joint.theta2_start + command.sub_para_double;
 8005ba4:	4b97      	ldr	r3, [pc, #604]	; (8005e04 <scaraInitDuty+0xb64>)
 8005ba6:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8005baa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005bae:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	4623      	mov	r3, r4
 8005bb6:	f7fa fb69 	bl	800028c <__adddf3>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	460c      	mov	r4, r1
 8005bbe:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8005bc2:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005bc6:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005bca:	e01a      	b.n	8005c02 <scaraInitDuty+0x962>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005bcc:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d113      	bne.n	8005bfc <scaraInitDuty+0x95c>
					abs_position = command.sub_para_double;
 8005bd4:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005bd8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.theta2_start;
 8005bdc:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005be0:	4b88      	ldr	r3, [pc, #544]	; (8005e04 <scaraInitDuty+0xb64>)
 8005be2:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8005be6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005bea:	461a      	mov	r2, r3
 8005bec:	4623      	mov	r3, r4
 8005bee:	f7fa fb4b 	bl	8000288 <__aeabi_dsub>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	460c      	mov	r4, r1
 8005bf6:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005bfa:	e002      	b.n	8005c02 <scaraInitDuty+0x962>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005bfc:	230c      	movs	r3, #12
 8005bfe:	f000 bec4 	b.w	800698a <scaraInitDuty+0x16ea>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J1, abs_position)) {
 8005c02:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8005c06:	2001      	movs	r0, #1
 8005c08:	f004 fa6e 	bl	800a0e8 <scaraCheckWorkSpace1>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f000 8098 	beq.w	8005d44 <scaraInitDuty+0xaa4>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005c14:	2307      	movs	r3, #7
 8005c16:	f000 beb8 	b.w	800698a <scaraInitDuty+0x16ea>
				}
				break;
			case 2:
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005c1a:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d113      	bne.n	8005c4a <scaraInitDuty+0x9aa>
					abs_position = myDUTY.joint.d3_start + command.sub_para_double;
 8005c22:	4b78      	ldr	r3, [pc, #480]	; (8005e04 <scaraInitDuty+0xb64>)
 8005c24:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8005c28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c2c:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005c30:	461a      	mov	r2, r3
 8005c32:	4623      	mov	r3, r4
 8005c34:	f7fa fb2a 	bl	800028c <__adddf3>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8005c40:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005c44:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005c48:	e01a      	b.n	8005c80 <scaraInitDuty+0x9e0>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005c4a:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d113      	bne.n	8005c7a <scaraInitDuty+0x9da>
					abs_position = command.sub_para_double;
 8005c52:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005c56:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.d3_start;
 8005c5a:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005c5e:	4b69      	ldr	r3, [pc, #420]	; (8005e04 <scaraInitDuty+0xb64>)
 8005c60:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8005c64:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4623      	mov	r3, r4
 8005c6c:	f7fa fb0c 	bl	8000288 <__aeabi_dsub>
 8005c70:	4603      	mov	r3, r0
 8005c72:	460c      	mov	r4, r1
 8005c74:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005c78:	e002      	b.n	8005c80 <scaraInitDuty+0x9e0>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005c7a:	230c      	movs	r3, #12
 8005c7c:	f000 be85 	b.w	800698a <scaraInitDuty+0x16ea>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J2, abs_position)) {
 8005c80:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8005c84:	2002      	movs	r0, #2
 8005c86:	f004 fa2f 	bl	800a0e8 <scaraCheckWorkSpace1>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d05b      	beq.n	8005d48 <scaraInitDuty+0xaa8>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005c90:	2307      	movs	r3, #7
 8005c92:	f000 be7a 	b.w	800698a <scaraInitDuty+0x16ea>
				}
				break;
			case 3:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8005c96:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005c9a:	a357      	add	r3, pc, #348	; (adr r3, 8005df8 <scaraInitDuty+0xb58>)
 8005c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca0:	f7fa fcaa 	bl	80005f8 <__aeabi_dmul>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	4618      	mov	r0, r3
 8005caa:	4621      	mov	r1, r4
 8005cac:	f04f 0200 	mov.w	r2, #0
 8005cb0:	4b53      	ldr	r3, [pc, #332]	; (8005e00 <scaraInitDuty+0xb60>)
 8005cb2:	f7fa fdcb 	bl	800084c <__aeabi_ddiv>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	460c      	mov	r4, r1
 8005cba:	e9c7 347a 	strd	r3, r4, [r7, #488]	; 0x1e8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005cbe:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d113      	bne.n	8005cee <scaraInitDuty+0xa4e>
					abs_position = myDUTY.joint.theta4_start + command.sub_para_double;
 8005cc6:	4b4f      	ldr	r3, [pc, #316]	; (8005e04 <scaraInitDuty+0xb64>)
 8005cc8:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8005ccc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cd0:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	4623      	mov	r3, r4
 8005cd8:	f7fa fad8 	bl	800028c <__adddf3>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	460c      	mov	r4, r1
 8005ce0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8005ce4:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005ce8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005cec:	e01a      	b.n	8005d24 <scaraInitDuty+0xa84>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005cee:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d113      	bne.n	8005d1e <scaraInitDuty+0xa7e>
					abs_position = command.sub_para_double;
 8005cf6:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005cfa:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.theta4_start;
 8005cfe:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005d02:	4b40      	ldr	r3, [pc, #256]	; (8005e04 <scaraInitDuty+0xb64>)
 8005d04:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8005d08:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	4623      	mov	r3, r4
 8005d10:	f7fa faba 	bl	8000288 <__aeabi_dsub>
 8005d14:	4603      	mov	r3, r0
 8005d16:	460c      	mov	r4, r1
 8005d18:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005d1c:	e002      	b.n	8005d24 <scaraInitDuty+0xa84>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005d1e:	230c      	movs	r3, #12
 8005d20:	f000 be33 	b.w	800698a <scaraInitDuty+0x16ea>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J3, abs_position)) {
 8005d24:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8005d28:	2003      	movs	r0, #3
 8005d2a:	f004 f9dd 	bl	800a0e8 <scaraCheckWorkSpace1>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00b      	beq.n	8005d4c <scaraInitDuty+0xaac>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005d34:	2307      	movs	r3, #7
 8005d36:	f000 be28 	b.w	800698a <scaraInitDuty+0x16ea>
				}
				break;
			default:
				return SCARA_STATUS_ERROR_JOINT_NUM;
 8005d3a:	230b      	movs	r3, #11
 8005d3c:	f000 be25 	b.w	800698a <scaraInitDuty+0x16ea>
				break;
 8005d40:	bf00      	nop
 8005d42:	e004      	b.n	8005d4e <scaraInitDuty+0xaae>
				break;
 8005d44:	bf00      	nop
 8005d46:	e002      	b.n	8005d4e <scaraInitDuty+0xaae>
				break;
 8005d48:	bf00      	nop
 8005d4a:	e000      	b.n	8005d4e <scaraInitDuty+0xaae>
				break;
 8005d4c:	bf00      	nop
			}

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8005d4e:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f040 8135 	bne.w	8005fc2 <scaraInitDuty+0xd22>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005d58:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	f040 80a4 	bne.w	8005eaa <scaraInitDuty+0xc0a>
					for ( uint8_t i = 0; i < 4; i++) {
 8005d62:	2300      	movs	r3, #0
 8005d64:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8005d68:	e099      	b.n	8005e9e <scaraInitDuty+0xbfe>
						if ( i == command.sub_para_int) {
 8005d6a:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8005d6e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d14a      	bne.n	8005e0c <scaraInitDuty+0xb6c>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005d76:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8005d7a:	4922      	ldr	r1, [pc, #136]	; (8005e04 <scaraInitDuty+0xb64>)
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	4413      	add	r3, r2
 8005d82:	01db      	lsls	r3, r3, #7
 8005d84:	440b      	add	r3, r1
 8005d86:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8005d8e:	f897 018f 	ldrb.w	r0, [r7, #399]	; 0x18f
 8005d92:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8005d96:	4c1b      	ldr	r4, [pc, #108]	; (8005e04 <scaraInitDuty+0xb64>)
 8005d98:	4603      	mov	r3, r0
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	4403      	add	r3, r0
 8005d9e:	01db      	lsls	r3, r3, #7
 8005da0:	4423      	add	r3, r4
 8005da2:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8005da6:	e9c3 1200 	strd	r1, r2, [r3]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005daa:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8005dae:	4613      	mov	r3, r2
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	4413      	add	r3, r2
 8005db4:	01db      	lsls	r3, r3, #7
 8005db6:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005dba:	4a12      	ldr	r2, [pc, #72]	; (8005e04 <scaraInitDuty+0xb64>)
 8005dbc:	1898      	adds	r0, r3, r2
 8005dbe:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8005dc2:	4a11      	ldr	r2, [pc, #68]	; (8005e08 <scaraInitDuty+0xb68>)
 8005dc4:	5cd3      	ldrb	r3, [r2, r3]
 8005dc6:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005dca:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005dce:	eeb0 2a46 	vmov.f32	s4, s12
 8005dd2:	eef0 2a66 	vmov.f32	s5, s13
 8005dd6:	eeb0 1a47 	vmov.f32	s2, s14
 8005dda:	eef0 1a67 	vmov.f32	s3, s15
 8005dde:	2201      	movs	r2, #1
 8005de0:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8005de4:	4619      	mov	r1, r3
 8005de6:	f001 fac7 	bl	8007378 <scaraInitLSPB>
 8005dea:	4603      	mov	r3, r0
 8005dec:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
 8005df0:	e049      	b.n	8005e86 <scaraInitDuty+0xbe6>
 8005df2:	bf00      	nop
 8005df4:	f3af 8000 	nop.w
 8005df8:	60000000 	.word	0x60000000
 8005dfc:	400921fb 	.word	0x400921fb
 8005e00:	40668000 	.word	0x40668000
 8005e04:	20005af8 	.word	0x20005af8
 8005e08:	20000824 	.word	0x20000824
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005e0c:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8005e10:	49c3      	ldr	r1, [pc, #780]	; (8006120 <scaraInitDuty+0xe80>)
 8005e12:	4613      	mov	r3, r2
 8005e14:	005b      	lsls	r3, r3, #1
 8005e16:	4413      	add	r3, r2
 8005e18:	01db      	lsls	r3, r3, #7
 8005e1a:	440b      	add	r3, r1
 8005e1c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005e20:	2200      	movs	r2, #0
 8005e22:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8005e24:	f897 018f 	ldrb.w	r0, [r7, #399]	; 0x18f
 8005e28:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8005e2c:	4cbc      	ldr	r4, [pc, #752]	; (8006120 <scaraInitDuty+0xe80>)
 8005e2e:	4603      	mov	r3, r0
 8005e30:	005b      	lsls	r3, r3, #1
 8005e32:	4403      	add	r3, r0
 8005e34:	01db      	lsls	r3, r3, #7
 8005e36:	4423      	add	r3, r4
 8005e38:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8005e3c:	e9c3 1200 	strd	r1, r2, [r3]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005e40:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8005e44:	4613      	mov	r3, r2
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	4413      	add	r3, r2
 8005e4a:	01db      	lsls	r3, r3, #7
 8005e4c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005e50:	4ab3      	ldr	r2, [pc, #716]	; (8006120 <scaraInitDuty+0xe80>)
 8005e52:	1898      	adds	r0, r3, r2
 8005e54:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8005e58:	4ab2      	ldr	r2, [pc, #712]	; (8006124 <scaraInitDuty+0xe84>)
 8005e5a:	5cd3      	ldrb	r3, [r2, r3]
 8005e5c:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005e60:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005e64:	eeb0 2a46 	vmov.f32	s4, s12
 8005e68:	eef0 2a66 	vmov.f32	s5, s13
 8005e6c:	eeb0 1a47 	vmov.f32	s2, s14
 8005e70:	eef0 1a67 	vmov.f32	s3, s15
 8005e74:	2201      	movs	r2, #1
 8005e76:	ed9f 0ba8 	vldr	d0, [pc, #672]	; 8006118 <scaraInitDuty+0xe78>
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	f001 fa7c 	bl	8007378 <scaraInitLSPB>
 8005e80:	4603      	mov	r3, r0
 8005e82:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						}
						myDUTY.time_total = command.time_total;
 8005e86:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005e8a:	4aa5      	ldr	r2, [pc, #660]	; (8006120 <scaraInitDuty+0xe80>)
 8005e8c:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005e90:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005e94:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8005e98:	3301      	adds	r3, #1
 8005e9a:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8005e9e:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8005ea2:	2b03      	cmp	r3, #3
 8005ea4:	f67f af61 	bls.w	8005d6a <scaraInitDuty+0xaca>
 8005ea8:	e1c2      	b.n	8006230 <scaraInitDuty+0xf90>
					}
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005eaa:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f040 8084 	bne.w	8005fbc <scaraInitDuty+0xd1c>
					for ( uint8_t i = 0; i < 4; i++) {
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
 8005eba:	e07a      	b.n	8005fb2 <scaraInitDuty+0xd12>
						if ( i == command.sub_para_int) {
 8005ebc:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005ec0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d140      	bne.n	8005f4a <scaraInitDuty+0xcaa>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005ec8:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005ecc:	4994      	ldr	r1, [pc, #592]	; (8006120 <scaraInitDuty+0xe80>)
 8005ece:	4613      	mov	r3, r2
 8005ed0:	005b      	lsls	r3, r3, #1
 8005ed2:	4413      	add	r3, r2
 8005ed4:	01db      	lsls	r3, r3, #7
 8005ed6:	440b      	add	r3, r1
 8005ed8:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005edc:	2200      	movs	r2, #0
 8005ede:	701a      	strb	r2, [r3, #0]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005ee0:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	4413      	add	r3, r2
 8005eea:	01db      	lsls	r3, r3, #7
 8005eec:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005ef0:	4a8b      	ldr	r2, [pc, #556]	; (8006120 <scaraInitDuty+0xe80>)
 8005ef2:	1898      	adds	r0, r3, r2
 8005ef4:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8005ef8:	4a8a      	ldr	r2, [pc, #552]	; (8006124 <scaraInitDuty+0xe84>)
 8005efa:	5cd3      	ldrb	r3, [r2, r3]
 8005efc:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005f00:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005f04:	eeb0 2a46 	vmov.f32	s4, s12
 8005f08:	eef0 2a66 	vmov.f32	s5, s13
 8005f0c:	eeb0 1a47 	vmov.f32	s2, s14
 8005f10:	eef0 1a67 	vmov.f32	s3, s15
 8005f14:	2200      	movs	r2, #0
 8005f16:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	f001 fa2c 	bl	8007378 <scaraInitLSPB>
 8005f20:	4603      	mov	r3, r0
 8005f22:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8005f26:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005f2a:	497d      	ldr	r1, [pc, #500]	; (8006120 <scaraInitDuty+0xe80>)
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	005b      	lsls	r3, r3, #1
 8005f30:	4413      	add	r3, r2
 8005f32:	01db      	lsls	r3, r3, #7
 8005f34:	440b      	add	r3, r1
 8005f36:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8005f3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f3e:	4a78      	ldr	r2, [pc, #480]	; (8006120 <scaraInitDuty+0xe80>)
 8005f40:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005f44:	e9c2 3400 	strd	r3, r4, [r2]
 8005f48:	e02e      	b.n	8005fa8 <scaraInitDuty+0xd08>
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005f4a:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005f4e:	4974      	ldr	r1, [pc, #464]	; (8006120 <scaraInitDuty+0xe80>)
 8005f50:	4613      	mov	r3, r2
 8005f52:	005b      	lsls	r3, r3, #1
 8005f54:	4413      	add	r3, r2
 8005f56:	01db      	lsls	r3, r3, #7
 8005f58:	440b      	add	r3, r1
 8005f5a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005f5e:	2200      	movs	r2, #0
 8005f60:	701a      	strb	r2, [r3, #0]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005f62:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005f66:	4613      	mov	r3, r2
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	4413      	add	r3, r2
 8005f6c:	01db      	lsls	r3, r3, #7
 8005f6e:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005f72:	4a6b      	ldr	r2, [pc, #428]	; (8006120 <scaraInitDuty+0xe80>)
 8005f74:	1898      	adds	r0, r3, r2
 8005f76:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8005f7a:	4a6a      	ldr	r2, [pc, #424]	; (8006124 <scaraInitDuty+0xe84>)
 8005f7c:	5cd3      	ldrb	r3, [r2, r3]
 8005f7e:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005f82:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005f86:	eeb0 2a46 	vmov.f32	s4, s12
 8005f8a:	eef0 2a66 	vmov.f32	s5, s13
 8005f8e:	eeb0 1a47 	vmov.f32	s2, s14
 8005f92:	eef0 1a67 	vmov.f32	s3, s15
 8005f96:	2200      	movs	r2, #0
 8005f98:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 8006118 <scaraInitDuty+0xe78>
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	f001 f9eb 	bl	8007378 <scaraInitLSPB>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
					for ( uint8_t i = 0; i < 4; i++) {
 8005fa8:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8005fac:	3301      	adds	r3, #1
 8005fae:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
 8005fb2:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	d980      	bls.n	8005ebc <scaraInitDuty+0xc1c>
 8005fba:	e139      	b.n	8006230 <scaraInitDuty+0xf90>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
						}
					}
				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8005fbc:	2308      	movs	r3, #8
 8005fbe:	f000 bce4 	b.w	800698a <scaraInitDuty+0x16ea>
				}
			// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8005fc2:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	f040 8130 	bne.w	800622c <scaraInitDuty+0xf8c>
					// Mode Init Time
					if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005fcc:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	f040 8097 	bne.w	8006104 <scaraInitDuty+0xe64>
						for ( uint8_t i = 0; i < 4; i++) {
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	f887 318d 	strb.w	r3, [r7, #397]	; 0x18d
 8005fdc:	e08c      	b.n	80060f8 <scaraInitDuty+0xe58>
							if ( i == command.sub_para_int) {
 8005fde:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8005fe2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d13d      	bne.n	8006066 <scaraInitDuty+0xdc6>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005fea:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8005fee:	494c      	ldr	r1, [pc, #304]	; (8006120 <scaraInitDuty+0xe80>)
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	005b      	lsls	r3, r3, #1
 8005ff4:	4413      	add	r3, r2
 8005ff6:	01db      	lsls	r3, r3, #7
 8005ff8:	440b      	add	r3, r1
 8005ffa:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005ffe:	2201      	movs	r2, #1
 8006000:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8006002:	f897 018d 	ldrb.w	r0, [r7, #397]	; 0x18d
 8006006:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 800600a:	4c45      	ldr	r4, [pc, #276]	; (8006120 <scaraInitDuty+0xe80>)
 800600c:	4603      	mov	r3, r0
 800600e:	005b      	lsls	r3, r3, #1
 8006010:	4403      	add	r3, r0
 8006012:	01db      	lsls	r3, r3, #7
 8006014:	4423      	add	r3, r4
 8006016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800601a:	e9c3 1200 	strd	r1, r2, [r3]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 800601e:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8006022:	4613      	mov	r3, r2
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	4413      	add	r3, r2
 8006028:	01db      	lsls	r3, r3, #7
 800602a:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800602e:	4a3c      	ldr	r2, [pc, #240]	; (8006120 <scaraInitDuty+0xe80>)
 8006030:	1898      	adds	r0, r3, r2
 8006032:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 8006036:	4a3b      	ldr	r2, [pc, #236]	; (8006124 <scaraInitDuty+0xe84>)
 8006038:	5cd3      	ldrb	r3, [r2, r3]
 800603a:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 800603e:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006042:	eeb0 2a46 	vmov.f32	s4, s12
 8006046:	eef0 2a66 	vmov.f32	s5, s13
 800604a:	eeb0 1a47 	vmov.f32	s2, s14
 800604e:	eef0 1a67 	vmov.f32	s3, s15
 8006052:	2201      	movs	r2, #1
 8006054:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8006058:	4619      	mov	r1, r3
 800605a:	f001 fd6d 	bl	8007b38 <scaraInitScurve>
 800605e:	4603      	mov	r3, r0
 8006060:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
 8006064:	e03c      	b.n	80060e0 <scaraInitDuty+0xe40>
											joint_taget[i],
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006066:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 800606a:	492d      	ldr	r1, [pc, #180]	; (8006120 <scaraInitDuty+0xe80>)
 800606c:	4613      	mov	r3, r2
 800606e:	005b      	lsls	r3, r3, #1
 8006070:	4413      	add	r3, r2
 8006072:	01db      	lsls	r3, r3, #7
 8006074:	440b      	add	r3, r1
 8006076:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800607a:	2201      	movs	r2, #1
 800607c:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 800607e:	f897 018d 	ldrb.w	r0, [r7, #397]	; 0x18d
 8006082:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8006086:	4c26      	ldr	r4, [pc, #152]	; (8006120 <scaraInitDuty+0xe80>)
 8006088:	4603      	mov	r3, r0
 800608a:	005b      	lsls	r3, r3, #1
 800608c:	4403      	add	r3, r0
 800608e:	01db      	lsls	r3, r3, #7
 8006090:	4423      	add	r3, r4
 8006092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006096:	e9c3 1200 	strd	r1, r2, [r3]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 800609a:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 800609e:	4613      	mov	r3, r2
 80060a0:	005b      	lsls	r3, r3, #1
 80060a2:	4413      	add	r3, r2
 80060a4:	01db      	lsls	r3, r3, #7
 80060a6:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80060aa:	4a1d      	ldr	r2, [pc, #116]	; (8006120 <scaraInitDuty+0xe80>)
 80060ac:	1898      	adds	r0, r3, r2
 80060ae:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 80060b2:	4a1c      	ldr	r2, [pc, #112]	; (8006124 <scaraInitDuty+0xe84>)
 80060b4:	5cd3      	ldrb	r3, [r2, r3]
 80060b6:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80060ba:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80060be:	eeb0 2a46 	vmov.f32	s4, s12
 80060c2:	eef0 2a66 	vmov.f32	s5, s13
 80060c6:	eeb0 1a47 	vmov.f32	s2, s14
 80060ca:	eef0 1a67 	vmov.f32	s3, s15
 80060ce:	2201      	movs	r2, #1
 80060d0:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8006118 <scaraInitDuty+0xe78>
 80060d4:	4619      	mov	r1, r3
 80060d6:	f001 fd2f 	bl	8007b38 <scaraInitScurve>
 80060da:	4603      	mov	r3, r0
 80060dc:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
											joint_taget[i],
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							}
							myDUTY.time_total = command.time_total;
 80060e0:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80060e4:	4a0e      	ldr	r2, [pc, #56]	; (8006120 <scaraInitDuty+0xe80>)
 80060e6:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80060ea:	e9c2 3400 	strd	r3, r4, [r2]
						for ( uint8_t i = 0; i < 4; i++) {
 80060ee:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 80060f2:	3301      	adds	r3, #1
 80060f4:	f887 318d 	strb.w	r3, [r7, #397]	; 0x18d
 80060f8:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 80060fc:	2b03      	cmp	r3, #3
 80060fe:	f67f af6e 	bls.w	8005fde <scaraInitDuty+0xd3e>
 8006102:	e095      	b.n	8006230 <scaraInitDuty+0xf90>
						}
					// Mode Init Acc
					} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006104:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006108:	2b00      	cmp	r3, #0
 800610a:	f040 808d 	bne.w	8006228 <scaraInitDuty+0xf88>
						for ( uint8_t i = 0; i < 4; i++) {
 800610e:	2300      	movs	r3, #0
 8006110:	f887 318c 	strb.w	r3, [r7, #396]	; 0x18c
 8006114:	e083      	b.n	800621e <scaraInitDuty+0xf7e>
 8006116:	bf00      	nop
	...
 8006120:	20005af8 	.word	0x20005af8
 8006124:	20000824 	.word	0x20000824
							if ( i == command.sub_para_int) {
 8006128:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 800612c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006130:	429a      	cmp	r2, r3
 8006132:	d140      	bne.n	80061b6 <scaraInitDuty+0xf16>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006134:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006138:	49b7      	ldr	r1, [pc, #732]	; (8006418 <scaraInitDuty+0x1178>)
 800613a:	4613      	mov	r3, r2
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	4413      	add	r3, r2
 8006140:	01db      	lsls	r3, r3, #7
 8006142:	440b      	add	r3, r1
 8006144:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006148:	2201      	movs	r2, #1
 800614a:	701a      	strb	r2, [r3, #0]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 800614c:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006150:	4613      	mov	r3, r2
 8006152:	005b      	lsls	r3, r3, #1
 8006154:	4413      	add	r3, r2
 8006156:	01db      	lsls	r3, r3, #7
 8006158:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800615c:	4aae      	ldr	r2, [pc, #696]	; (8006418 <scaraInitDuty+0x1178>)
 800615e:	1898      	adds	r0, r3, r2
 8006160:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 8006164:	4aad      	ldr	r2, [pc, #692]	; (800641c <scaraInitDuty+0x117c>)
 8006166:	5cd3      	ldrb	r3, [r2, r3]
 8006168:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 800616c:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006170:	eeb0 2a46 	vmov.f32	s4, s12
 8006174:	eef0 2a66 	vmov.f32	s5, s13
 8006178:	eeb0 1a47 	vmov.f32	s2, s14
 800617c:	eef0 1a67 	vmov.f32	s3, s15
 8006180:	2200      	movs	r2, #0
 8006182:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8006186:	4619      	mov	r1, r3
 8006188:	f001 fcd6 	bl	8007b38 <scaraInitScurve>
 800618c:	4603      	mov	r3, r0
 800618e:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
											joint_taget[i],
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
								myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8006192:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006196:	49a0      	ldr	r1, [pc, #640]	; (8006418 <scaraInitDuty+0x1178>)
 8006198:	4613      	mov	r3, r2
 800619a:	005b      	lsls	r3, r3, #1
 800619c:	4413      	add	r3, r2
 800619e:	01db      	lsls	r3, r3, #7
 80061a0:	440b      	add	r3, r1
 80061a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80061aa:	4a9b      	ldr	r2, [pc, #620]	; (8006418 <scaraInitDuty+0x1178>)
 80061ac:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80061b0:	e9c2 3400 	strd	r3, r4, [r2]
 80061b4:	e02e      	b.n	8006214 <scaraInitDuty+0xf74>
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80061b6:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 80061ba:	4997      	ldr	r1, [pc, #604]	; (8006418 <scaraInitDuty+0x1178>)
 80061bc:	4613      	mov	r3, r2
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	4413      	add	r3, r2
 80061c2:	01db      	lsls	r3, r3, #7
 80061c4:	440b      	add	r3, r1
 80061c6:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80061ca:	2201      	movs	r2, #1
 80061cc:	701a      	strb	r2, [r3, #0]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 80061ce:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 80061d2:	4613      	mov	r3, r2
 80061d4:	005b      	lsls	r3, r3, #1
 80061d6:	4413      	add	r3, r2
 80061d8:	01db      	lsls	r3, r3, #7
 80061da:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80061de:	4a8e      	ldr	r2, [pc, #568]	; (8006418 <scaraInitDuty+0x1178>)
 80061e0:	1898      	adds	r0, r3, r2
 80061e2:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 80061e6:	4a8d      	ldr	r2, [pc, #564]	; (800641c <scaraInitDuty+0x117c>)
 80061e8:	5cd3      	ldrb	r3, [r2, r3]
 80061ea:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80061ee:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80061f2:	eeb0 2a46 	vmov.f32	s4, s12
 80061f6:	eef0 2a66 	vmov.f32	s5, s13
 80061fa:	eeb0 1a47 	vmov.f32	s2, s14
 80061fe:	eef0 1a67 	vmov.f32	s3, s15
 8006202:	2200      	movs	r2, #0
 8006204:	ed9f 0b80 	vldr	d0, [pc, #512]	; 8006408 <scaraInitDuty+0x1168>
 8006208:	4619      	mov	r1, r3
 800620a:	f001 fc95 	bl	8007b38 <scaraInitScurve>
 800620e:	4603      	mov	r3, r0
 8006210:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						for ( uint8_t i = 0; i < 4; i++) {
 8006214:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 8006218:	3301      	adds	r3, #1
 800621a:	f887 318c 	strb.w	r3, [r7, #396]	; 0x18c
 800621e:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 8006222:	2b03      	cmp	r3, #3
 8006224:	d980      	bls.n	8006128 <scaraInitDuty+0xe88>
 8006226:	e003      	b.n	8006230 <scaraInitDuty+0xf90>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							}
						}

					} else {
						return SCARA_STATUS_ERROR_MODE_INIT;
 8006228:	2308      	movs	r3, #8
 800622a:	e3ae      	b.n	800698a <scaraInitDuty+0x16ea>
					}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 800622c:	2305      	movs	r3, #5
 800622e:	e3ac      	b.n	800698a <scaraInitDuty+0x16ea>
			}
		// Check Init Status
			if ( SCARA_STATUS_OK != status1) {
 8006230:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 8006234:	2b00      	cmp	r3, #0
 8006236:	d002      	beq.n	800623e <scaraInitDuty+0xf9e>
				return status1;
 8006238:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 800623c:	e3a5      	b.n	800698a <scaraInitDuty+0x16ea>
			}
			if ( SCARA_STATUS_OK != status2) {
 800623e:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 8373 	beq.w	800692e <scaraInitDuty+0x168e>
				return status2;
 8006248:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 800624c:	e39d      	b.n	800698a <scaraInitDuty+0x16ea>
			}

		//----Joint Quadra
		} else if 	( DUTY_JOINT_4DOF == command.joint_type) {
 800624e:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 8006252:	2b01      	cmp	r3, #1
 8006254:	f040 8367 	bne.w	8006926 <scaraInitDuty+0x1686>
			SCARA_PositionTypeDef	target_point;
			// Change Degree --> Radian
			command.target_point.roll = command.target_point.roll*PI/180.0;
 8006258:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 800625c:	a36c      	add	r3, pc, #432	; (adr r3, 8006410 <scaraInitDuty+0x1170>)
 800625e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006262:	f7fa f9c9 	bl	80005f8 <__aeabi_dmul>
 8006266:	4603      	mov	r3, r0
 8006268:	460c      	mov	r4, r1
 800626a:	4618      	mov	r0, r3
 800626c:	4621      	mov	r1, r4
 800626e:	f04f 0200 	mov.w	r2, #0
 8006272:	4b6b      	ldr	r3, [pc, #428]	; (8006420 <scaraInitDuty+0x1180>)
 8006274:	f7fa faea 	bl	800084c <__aeabi_ddiv>
 8006278:	4603      	mov	r3, r0
 800627a:	460c      	mov	r4, r1
 800627c:	e9c7 3496 	strd	r3, r4, [r7, #600]	; 0x258
			// Coordinate
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8006280:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006284:	2b01      	cmp	r3, #1
 8006286:	d13c      	bne.n	8006302 <scaraInitDuty+0x1062>
				target_point.x 		= positionCurrent.x + command.target_point.x;
 8006288:	4b66      	ldr	r3, [pc, #408]	; (8006424 <scaraInitDuty+0x1184>)
 800628a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800628e:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8006292:	461a      	mov	r2, r3
 8006294:	4623      	mov	r3, r4
 8006296:	f7f9 fff9 	bl	800028c <__adddf3>
 800629a:	4603      	mov	r3, r0
 800629c:	460c      	mov	r4, r1
 800629e:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80062a2:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
				target_point.y 		= positionCurrent.y + command.target_point.y;
 80062a6:	4b5f      	ldr	r3, [pc, #380]	; (8006424 <scaraInitDuty+0x1184>)
 80062a8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80062ac:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 80062b0:	461a      	mov	r2, r3
 80062b2:	4623      	mov	r3, r4
 80062b4:	f7f9 ffea 	bl	800028c <__adddf3>
 80062b8:	4603      	mov	r3, r0
 80062ba:	460c      	mov	r4, r1
 80062bc:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80062c0:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
				target_point.z 		= positionCurrent.z + command.target_point.z;
 80062c4:	4b57      	ldr	r3, [pc, #348]	; (8006424 <scaraInitDuty+0x1184>)
 80062c6:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80062ca:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 80062ce:	461a      	mov	r2, r3
 80062d0:	4623      	mov	r3, r4
 80062d2:	f7f9 ffdb 	bl	800028c <__adddf3>
 80062d6:	4603      	mov	r3, r0
 80062d8:	460c      	mov	r4, r1
 80062da:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80062de:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
				target_point.roll	= positionCurrent.roll + command.target_point.roll;
 80062e2:	4b50      	ldr	r3, [pc, #320]	; (8006424 <scaraInitDuty+0x1184>)
 80062e4:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80062e8:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 80062ec:	461a      	mov	r2, r3
 80062ee:	4623      	mov	r3, r4
 80062f0:	f7f9 ffcc 	bl	800028c <__adddf3>
 80062f4:	4603      	mov	r3, r0
 80062f6:	460c      	mov	r4, r1
 80062f8:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80062fc:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
 8006300:	e01e      	b.n	8006340 <scaraInitDuty+0x10a0>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8006302:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006306:	2b00      	cmp	r3, #0
 8006308:	d118      	bne.n	800633c <scaraInitDuty+0x109c>
				target_point.x 		= command.target_point.x;
 800630a:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 800630e:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006312:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
				target_point.y 		= command.target_point.y;
 8006316:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 800631a:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800631e:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
				target_point.z 		= command.target_point.z;
 8006322:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8006326:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800632a:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
				target_point.roll	= command.target_point.roll;
 800632e:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 8006332:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006336:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
 800633a:	e001      	b.n	8006340 <scaraInitDuty+0x10a0>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 800633c:	230c      	movs	r3, #12
 800633e:	e324      	b.n	800698a <scaraInitDuty+0x16ea>
			}

			if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 8006340:	4c38      	ldr	r4, [pc, #224]	; (8006424 <scaraInitDuty+0x1184>)
 8006342:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 8006346:	4668      	mov	r0, sp
 8006348:	f104 0308 	add.w	r3, r4, #8
 800634c:	22b8      	movs	r2, #184	; 0xb8
 800634e:	4619      	mov	r1, r3
 8006350:	f00f fb84 	bl	8015a5c <memcpy>
 8006354:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006358:	4628      	mov	r0, r5
 800635a:	f7fd fc95 	bl	8003c88 <kinematicInverse>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <scaraInitDuty+0x10c8>
				return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 8006364:	2307      	movs	r3, #7
 8006366:	e310      	b.n	800698a <scaraInitDuty+0x16ea>
			}
			// Trajectory 4 profile
			double q[4];
			q[0] = target_point.Theta1 - positionCurrent.Theta1;
 8006368:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800636c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8006370:	4b2c      	ldr	r3, [pc, #176]	; (8006424 <scaraInitDuty+0x1184>)
 8006372:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8006376:	461a      	mov	r2, r3
 8006378:	4623      	mov	r3, r4
 800637a:	f7f9 ff85 	bl	8000288 <__aeabi_dsub>
 800637e:	4603      	mov	r3, r0
 8006380:	460c      	mov	r4, r1
 8006382:	463a      	mov	r2, r7
 8006384:	e9c2 3400 	strd	r3, r4, [r2]
			q[1] = target_point.Theta2 - positionCurrent.Theta2;
 8006388:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800638c:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8006390:	4b24      	ldr	r3, [pc, #144]	; (8006424 <scaraInitDuty+0x1184>)
 8006392:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8006396:	461a      	mov	r2, r3
 8006398:	4623      	mov	r3, r4
 800639a:	f7f9 ff75 	bl	8000288 <__aeabi_dsub>
 800639e:	4603      	mov	r3, r0
 80063a0:	460c      	mov	r4, r1
 80063a2:	463a      	mov	r2, r7
 80063a4:	e9c2 3402 	strd	r3, r4, [r2, #8]
			q[2] = target_point.D3 	   - positionCurrent.D3;
 80063a8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80063ac:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80063b0:	4b1c      	ldr	r3, [pc, #112]	; (8006424 <scaraInitDuty+0x1184>)
 80063b2:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 80063b6:	461a      	mov	r2, r3
 80063b8:	4623      	mov	r3, r4
 80063ba:	f7f9 ff65 	bl	8000288 <__aeabi_dsub>
 80063be:	4603      	mov	r3, r0
 80063c0:	460c      	mov	r4, r1
 80063c2:	463a      	mov	r2, r7
 80063c4:	e9c2 3404 	strd	r3, r4, [r2, #16]
			q[3] = target_point.Theta4 - positionCurrent.Theta4;
 80063c8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80063cc:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 80063d0:	4b14      	ldr	r3, [pc, #80]	; (8006424 <scaraInitDuty+0x1184>)
 80063d2:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 80063d6:	461a      	mov	r2, r3
 80063d8:	4623      	mov	r3, r4
 80063da:	f7f9 ff55 	bl	8000288 <__aeabi_dsub>
 80063de:	4603      	mov	r3, r0
 80063e0:	460c      	mov	r4, r1
 80063e2:	463a      	mov	r2, r7
 80063e4:	e9c2 3406 	strd	r3, r4, [r2, #24]

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 80063e8:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f040 8151 	bne.w	8006694 <scaraInitDuty+0x13f4>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80063f2:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d16c      	bne.n	80064d4 <scaraInitDuty+0x1234>
					for ( uint8_t i = 0; i < 4; i++) {
 80063fa:	2300      	movs	r3, #0
 80063fc:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
 8006400:	e05c      	b.n	80064bc <scaraInitDuty+0x121c>
 8006402:	bf00      	nop
 8006404:	f3af 8000 	nop.w
	...
 8006410:	60000000 	.word	0x60000000
 8006414:	400921fb 	.word	0x400921fb
 8006418:	20005af8 	.word	0x20005af8
 800641c:	20000824 	.word	0x20000824
 8006420:	40668000 	.word	0x40668000
 8006424:	200066b8 	.word	0x200066b8
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006428:	f897 218b 	ldrb.w	r2, [r7, #395]	; 0x18b
 800642c:	49cf      	ldr	r1, [pc, #828]	; (800676c <scaraInitDuty+0x14cc>)
 800642e:	4613      	mov	r3, r2
 8006430:	005b      	lsls	r3, r3, #1
 8006432:	4413      	add	r3, r2
 8006434:	01db      	lsls	r3, r3, #7
 8006436:	440b      	add	r3, r1
 8006438:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800643c:	2200      	movs	r2, #0
 800643e:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8006440:	f897 018b 	ldrb.w	r0, [r7, #395]	; 0x18b
 8006444:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8006448:	4cc8      	ldr	r4, [pc, #800]	; (800676c <scaraInitDuty+0x14cc>)
 800644a:	4603      	mov	r3, r0
 800644c:	005b      	lsls	r3, r3, #1
 800644e:	4403      	add	r3, r0
 8006450:	01db      	lsls	r3, r3, #7
 8006452:	4423      	add	r3, r4
 8006454:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8006458:	e9c3 1200 	strd	r1, r2, [r3]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 800645c:	f897 218b 	ldrb.w	r2, [r7, #395]	; 0x18b
 8006460:	4613      	mov	r3, r2
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	4413      	add	r3, r2
 8006466:	01db      	lsls	r3, r3, #7
 8006468:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800646c:	4abf      	ldr	r2, [pc, #764]	; (800676c <scaraInitDuty+0x14cc>)
 800646e:	1898      	adds	r0, r3, r2
 8006470:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 8006474:	4abe      	ldr	r2, [pc, #760]	; (8006770 <scaraInitDuty+0x14d0>)
 8006476:	5cd1      	ldrb	r1, [r2, r3]
 8006478:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 800647c:	463a      	mov	r2, r7
 800647e:	00db      	lsls	r3, r3, #3
 8006480:	4413      	add	r3, r2
 8006482:	ed93 7b00 	vldr	d7, [r3]
 8006486:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 800648a:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 800648e:	eeb0 2a45 	vmov.f32	s4, s10
 8006492:	eef0 2a65 	vmov.f32	s5, s11
 8006496:	eeb0 1a46 	vmov.f32	s2, s12
 800649a:	eef0 1a66 	vmov.f32	s3, s13
 800649e:	2201      	movs	r2, #1
 80064a0:	eeb0 0a47 	vmov.f32	s0, s14
 80064a4:	eef0 0a67 	vmov.f32	s1, s15
 80064a8:	f000 ff66 	bl	8007378 <scaraInitLSPB>
 80064ac:	4603      	mov	r3, r0
 80064ae:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 80064b2:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 80064b6:	3301      	adds	r3, #1
 80064b8:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
 80064bc:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 80064c0:	2b03      	cmp	r3, #3
 80064c2:	d9b1      	bls.n	8006428 <scaraInitDuty+0x1188>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 80064c4:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80064c8:	4aa8      	ldr	r2, [pc, #672]	; (800676c <scaraInitDuty+0x14cc>)
 80064ca:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80064ce:	e9c2 3400 	strd	r3, r4, [r2]
 80064d2:	e22c      	b.n	800692e <scaraInitDuty+0x168e>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80064d4:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f040 80d9 	bne.w	8006690 <scaraInitDuty+0x13f0>
					for ( uint8_t i = 0; i < 4; i++) {
 80064de:	2300      	movs	r3, #0
 80064e0:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
 80064e4:	e03b      	b.n	800655e <scaraInitDuty+0x12be>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80064e6:	f897 218a 	ldrb.w	r2, [r7, #394]	; 0x18a
 80064ea:	49a0      	ldr	r1, [pc, #640]	; (800676c <scaraInitDuty+0x14cc>)
 80064ec:	4613      	mov	r3, r2
 80064ee:	005b      	lsls	r3, r3, #1
 80064f0:	4413      	add	r3, r2
 80064f2:	01db      	lsls	r3, r3, #7
 80064f4:	440b      	add	r3, r1
 80064f6:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80064fa:	2200      	movs	r2, #0
 80064fc:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80064fe:	f897 218a 	ldrb.w	r2, [r7, #394]	; 0x18a
 8006502:	4613      	mov	r3, r2
 8006504:	005b      	lsls	r3, r3, #1
 8006506:	4413      	add	r3, r2
 8006508:	01db      	lsls	r3, r3, #7
 800650a:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800650e:	4a97      	ldr	r2, [pc, #604]	; (800676c <scaraInitDuty+0x14cc>)
 8006510:	1898      	adds	r0, r3, r2
 8006512:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 8006516:	4a96      	ldr	r2, [pc, #600]	; (8006770 <scaraInitDuty+0x14d0>)
 8006518:	5cd1      	ldrb	r1, [r2, r3]
 800651a:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 800651e:	463a      	mov	r2, r7
 8006520:	00db      	lsls	r3, r3, #3
 8006522:	4413      	add	r3, r2
 8006524:	ed93 7b00 	vldr	d7, [r3]
 8006528:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 800652c:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8006530:	eeb0 2a45 	vmov.f32	s4, s10
 8006534:	eef0 2a65 	vmov.f32	s5, s11
 8006538:	eeb0 1a46 	vmov.f32	s2, s12
 800653c:	eef0 1a66 	vmov.f32	s3, s13
 8006540:	2200      	movs	r2, #0
 8006542:	eeb0 0a47 	vmov.f32	s0, s14
 8006546:	eef0 0a67 	vmov.f32	s1, s15
 800654a:	f000 ff15 	bl	8007378 <scaraInitLSPB>
 800654e:	4603      	mov	r3, r0
 8006550:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 8006554:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 8006558:	3301      	adds	r3, #1
 800655a:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
 800655e:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 8006562:	2b03      	cmp	r3, #3
 8006564:	d9bf      	bls.n	80064e6 <scaraInitDuty+0x1246>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 8006566:	4b81      	ldr	r3, [pc, #516]	; (800676c <scaraInitDuty+0x14cc>)
 8006568:	f603 2238 	addw	r2, r3, #2616	; 0xa38
 800656c:	f04f 0300 	mov.w	r3, #0
 8006570:	f04f 0400 	mov.w	r4, #0
 8006574:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8006578:	2300      	movs	r3, #0
 800657a:	f887 3189 	strb.w	r3, [r7, #393]	; 0x189
 800657e:	e02d      	b.n	80065dc <scaraInitDuty+0x133c>
						if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 8006580:	f897 2189 	ldrb.w	r2, [r7, #393]	; 0x189
 8006584:	4979      	ldr	r1, [pc, #484]	; (800676c <scaraInitDuty+0x14cc>)
 8006586:	4613      	mov	r3, r2
 8006588:	005b      	lsls	r3, r3, #1
 800658a:	4413      	add	r3, r2
 800658c:	01db      	lsls	r3, r3, #7
 800658e:	440b      	add	r3, r1
 8006590:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8006594:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006598:	4b74      	ldr	r3, [pc, #464]	; (800676c <scaraInitDuty+0x14cc>)
 800659a:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800659e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80065a2:	461a      	mov	r2, r3
 80065a4:	4623      	mov	r3, r4
 80065a6:	f7fa fab7 	bl	8000b18 <__aeabi_dcmpgt>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d010      	beq.n	80065d2 <scaraInitDuty+0x1332>
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 80065b0:	f897 2189 	ldrb.w	r2, [r7, #393]	; 0x189
 80065b4:	496d      	ldr	r1, [pc, #436]	; (800676c <scaraInitDuty+0x14cc>)
 80065b6:	4613      	mov	r3, r2
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	4413      	add	r3, r2
 80065bc:	01db      	lsls	r3, r3, #7
 80065be:	440b      	add	r3, r1
 80065c0:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80065c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80065c8:	4a68      	ldr	r2, [pc, #416]	; (800676c <scaraInitDuty+0x14cc>)
 80065ca:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80065ce:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 80065d2:	f897 3189 	ldrb.w	r3, [r7, #393]	; 0x189
 80065d6:	3301      	adds	r3, #1
 80065d8:	f887 3189 	strb.w	r3, [r7, #393]	; 0x189
 80065dc:	f897 3189 	ldrb.w	r3, [r7, #393]	; 0x189
 80065e0:	2b03      	cmp	r3, #3
 80065e2:	d9cd      	bls.n	8006580 <scaraInitDuty+0x12e0>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 80065e4:	2300      	movs	r3, #0
 80065e6:	f887 3188 	strb.w	r3, [r7, #392]	; 0x188
 80065ea:	e04c      	b.n	8006686 <scaraInitDuty+0x13e6>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80065ec:	f897 2188 	ldrb.w	r2, [r7, #392]	; 0x188
 80065f0:	495e      	ldr	r1, [pc, #376]	; (800676c <scaraInitDuty+0x14cc>)
 80065f2:	4613      	mov	r3, r2
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	4413      	add	r3, r2
 80065f8:	01db      	lsls	r3, r3, #7
 80065fa:	440b      	add	r3, r1
 80065fc:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006600:	2200      	movs	r2, #0
 8006602:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 8006604:	f897 0188 	ldrb.w	r0, [r7, #392]	; 0x188
 8006608:	4b58      	ldr	r3, [pc, #352]	; (800676c <scaraInitDuty+0x14cc>)
 800660a:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800660e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8006612:	4c56      	ldr	r4, [pc, #344]	; (800676c <scaraInitDuty+0x14cc>)
 8006614:	4603      	mov	r3, r0
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	4403      	add	r3, r0
 800661a:	01db      	lsls	r3, r3, #7
 800661c:	4423      	add	r3, r4
 800661e:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8006622:	e9c3 1200 	strd	r1, r2, [r3]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8006626:	f897 2188 	ldrb.w	r2, [r7, #392]	; 0x188
 800662a:	4613      	mov	r3, r2
 800662c:	005b      	lsls	r3, r3, #1
 800662e:	4413      	add	r3, r2
 8006630:	01db      	lsls	r3, r3, #7
 8006632:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006636:	4a4d      	ldr	r2, [pc, #308]	; (800676c <scaraInitDuty+0x14cc>)
 8006638:	1898      	adds	r0, r3, r2
 800663a:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 800663e:	4a4c      	ldr	r2, [pc, #304]	; (8006770 <scaraInitDuty+0x14d0>)
 8006640:	5cd1      	ldrb	r1, [r2, r3]
 8006642:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 8006646:	463a      	mov	r2, r7
 8006648:	00db      	lsls	r3, r3, #3
 800664a:	4413      	add	r3, r2
 800664c:	ed93 7b00 	vldr	d7, [r3]
 8006650:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8006654:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8006658:	eeb0 2a45 	vmov.f32	s4, s10
 800665c:	eef0 2a65 	vmov.f32	s5, s11
 8006660:	eeb0 1a46 	vmov.f32	s2, s12
 8006664:	eef0 1a66 	vmov.f32	s3, s13
 8006668:	2201      	movs	r2, #1
 800666a:	eeb0 0a47 	vmov.f32	s0, s14
 800666e:	eef0 0a67 	vmov.f32	s1, s15
 8006672:	f000 fe81 	bl	8007378 <scaraInitLSPB>
 8006676:	4603      	mov	r3, r0
 8006678:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 800667c:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 8006680:	3301      	adds	r3, #1
 8006682:	f887 3188 	strb.w	r3, [r7, #392]	; 0x188
 8006686:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 800668a:	2b03      	cmp	r3, #3
 800668c:	d9ae      	bls.n	80065ec <scaraInitDuty+0x134c>
 800668e:	e14e      	b.n	800692e <scaraInitDuty+0x168e>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8006690:	2308      	movs	r3, #8
 8006692:	e17a      	b.n	800698a <scaraInitDuty+0x16ea>
				}
				// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8006694:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006698:	2b01      	cmp	r3, #1
 800669a:	f040 8142 	bne.w	8006922 <scaraInitDuty+0x1682>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800669e:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d159      	bne.n	800675a <scaraInitDuty+0x14ba>
					for ( uint8_t i = 0; i < 4; i++) {
 80066a6:	2300      	movs	r3, #0
 80066a8:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 80066ac:	e049      	b.n	8006742 <scaraInitDuty+0x14a2>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80066ae:	f897 2187 	ldrb.w	r2, [r7, #391]	; 0x187
 80066b2:	492e      	ldr	r1, [pc, #184]	; (800676c <scaraInitDuty+0x14cc>)
 80066b4:	4613      	mov	r3, r2
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	4413      	add	r3, r2
 80066ba:	01db      	lsls	r3, r3, #7
 80066bc:	440b      	add	r3, r1
 80066be:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80066c2:	2201      	movs	r2, #1
 80066c4:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 80066c6:	f897 0187 	ldrb.w	r0, [r7, #391]	; 0x187
 80066ca:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 80066ce:	4c27      	ldr	r4, [pc, #156]	; (800676c <scaraInitDuty+0x14cc>)
 80066d0:	4603      	mov	r3, r0
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	4403      	add	r3, r0
 80066d6:	01db      	lsls	r3, r3, #7
 80066d8:	4423      	add	r3, r4
 80066da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066de:	e9c3 1200 	strd	r1, r2, [r3]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80066e2:	f897 2187 	ldrb.w	r2, [r7, #391]	; 0x187
 80066e6:	4613      	mov	r3, r2
 80066e8:	005b      	lsls	r3, r3, #1
 80066ea:	4413      	add	r3, r2
 80066ec:	01db      	lsls	r3, r3, #7
 80066ee:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80066f2:	4a1e      	ldr	r2, [pc, #120]	; (800676c <scaraInitDuty+0x14cc>)
 80066f4:	1898      	adds	r0, r3, r2
 80066f6:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 80066fa:	4a1d      	ldr	r2, [pc, #116]	; (8006770 <scaraInitDuty+0x14d0>)
 80066fc:	5cd1      	ldrb	r1, [r2, r3]
 80066fe:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8006702:	463a      	mov	r2, r7
 8006704:	00db      	lsls	r3, r3, #3
 8006706:	4413      	add	r3, r2
 8006708:	ed93 7b00 	vldr	d7, [r3]
 800670c:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8006710:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8006714:	eeb0 2a45 	vmov.f32	s4, s10
 8006718:	eef0 2a65 	vmov.f32	s5, s11
 800671c:	eeb0 1a46 	vmov.f32	s2, s12
 8006720:	eef0 1a66 	vmov.f32	s3, s13
 8006724:	2201      	movs	r2, #1
 8006726:	eeb0 0a47 	vmov.f32	s0, s14
 800672a:	eef0 0a67 	vmov.f32	s1, s15
 800672e:	f001 fa03 	bl	8007b38 <scaraInitScurve>
 8006732:	4603      	mov	r3, r0
 8006734:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 8006738:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800673c:	3301      	adds	r3, #1
 800673e:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8006742:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8006746:	2b03      	cmp	r3, #3
 8006748:	d9b1      	bls.n	80066ae <scaraInitDuty+0x140e>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 800674a:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 800674e:	4a07      	ldr	r2, [pc, #28]	; (800676c <scaraInitDuty+0x14cc>)
 8006750:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006754:	e9c2 3400 	strd	r3, r4, [r2]
 8006758:	e0e9      	b.n	800692e <scaraInitDuty+0x168e>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 800675a:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800675e:	2b00      	cmp	r3, #0
 8006760:	f040 80dd 	bne.w	800691e <scaraInitDuty+0x167e>
					for ( uint8_t i = 0; i < 4; i++) {
 8006764:	2300      	movs	r3, #0
 8006766:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 800676a:	e03f      	b.n	80067ec <scaraInitDuty+0x154c>
 800676c:	20005af8 	.word	0x20005af8
 8006770:	20000824 	.word	0x20000824
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006774:	f897 2186 	ldrb.w	r2, [r7, #390]	; 0x186
 8006778:	4988      	ldr	r1, [pc, #544]	; (800699c <scaraInitDuty+0x16fc>)
 800677a:	4613      	mov	r3, r2
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	4413      	add	r3, r2
 8006780:	01db      	lsls	r3, r3, #7
 8006782:	440b      	add	r3, r1
 8006784:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006788:	2201      	movs	r2, #1
 800678a:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 800678c:	f897 2186 	ldrb.w	r2, [r7, #390]	; 0x186
 8006790:	4613      	mov	r3, r2
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	4413      	add	r3, r2
 8006796:	01db      	lsls	r3, r3, #7
 8006798:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800679c:	4a7f      	ldr	r2, [pc, #508]	; (800699c <scaraInitDuty+0x16fc>)
 800679e:	1898      	adds	r0, r3, r2
 80067a0:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 80067a4:	4a7e      	ldr	r2, [pc, #504]	; (80069a0 <scaraInitDuty+0x1700>)
 80067a6:	5cd1      	ldrb	r1, [r2, r3]
 80067a8:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 80067ac:	463a      	mov	r2, r7
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	4413      	add	r3, r2
 80067b2:	ed93 7b00 	vldr	d7, [r3]
 80067b6:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80067ba:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80067be:	eeb0 2a45 	vmov.f32	s4, s10
 80067c2:	eef0 2a65 	vmov.f32	s5, s11
 80067c6:	eeb0 1a46 	vmov.f32	s2, s12
 80067ca:	eef0 1a66 	vmov.f32	s3, s13
 80067ce:	2200      	movs	r2, #0
 80067d0:	eeb0 0a47 	vmov.f32	s0, s14
 80067d4:	eef0 0a67 	vmov.f32	s1, s15
 80067d8:	f001 f9ae 	bl	8007b38 <scaraInitScurve>
 80067dc:	4603      	mov	r3, r0
 80067de:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 80067e2:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 80067e6:	3301      	adds	r3, #1
 80067e8:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 80067ec:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 80067f0:	2b03      	cmp	r3, #3
 80067f2:	d9bf      	bls.n	8006774 <scaraInitDuty+0x14d4>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 80067f4:	4b69      	ldr	r3, [pc, #420]	; (800699c <scaraInitDuty+0x16fc>)
 80067f6:	f603 2238 	addw	r2, r3, #2616	; 0xa38
 80067fa:	f04f 0300 	mov.w	r3, #0
 80067fe:	f04f 0400 	mov.w	r4, #0
 8006802:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8006806:	2300      	movs	r3, #0
 8006808:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 800680c:	e02d      	b.n	800686a <scaraInitDuty+0x15ca>
						if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 800680e:	f897 2185 	ldrb.w	r2, [r7, #389]	; 0x185
 8006812:	4962      	ldr	r1, [pc, #392]	; (800699c <scaraInitDuty+0x16fc>)
 8006814:	4613      	mov	r3, r2
 8006816:	005b      	lsls	r3, r3, #1
 8006818:	4413      	add	r3, r2
 800681a:	01db      	lsls	r3, r3, #7
 800681c:	440b      	add	r3, r1
 800681e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006822:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006826:	4b5d      	ldr	r3, [pc, #372]	; (800699c <scaraInitDuty+0x16fc>)
 8006828:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800682c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006830:	461a      	mov	r2, r3
 8006832:	4623      	mov	r3, r4
 8006834:	f7fa f970 	bl	8000b18 <__aeabi_dcmpgt>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d010      	beq.n	8006860 <scaraInitDuty+0x15c0>
							myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 800683e:	f897 2185 	ldrb.w	r2, [r7, #389]	; 0x185
 8006842:	4956      	ldr	r1, [pc, #344]	; (800699c <scaraInitDuty+0x16fc>)
 8006844:	4613      	mov	r3, r2
 8006846:	005b      	lsls	r3, r3, #1
 8006848:	4413      	add	r3, r2
 800684a:	01db      	lsls	r3, r3, #7
 800684c:	440b      	add	r3, r1
 800684e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006852:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006856:	4a51      	ldr	r2, [pc, #324]	; (800699c <scaraInitDuty+0x16fc>)
 8006858:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 800685c:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8006860:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 8006864:	3301      	adds	r3, #1
 8006866:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 800686a:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800686e:	2b03      	cmp	r3, #3
 8006870:	d9cd      	bls.n	800680e <scaraInitDuty+0x156e>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 8006872:	2300      	movs	r3, #0
 8006874:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8006878:	e04c      	b.n	8006914 <scaraInitDuty+0x1674>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800687a:	f897 2184 	ldrb.w	r2, [r7, #388]	; 0x184
 800687e:	4947      	ldr	r1, [pc, #284]	; (800699c <scaraInitDuty+0x16fc>)
 8006880:	4613      	mov	r3, r2
 8006882:	005b      	lsls	r3, r3, #1
 8006884:	4413      	add	r3, r2
 8006886:	01db      	lsls	r3, r3, #7
 8006888:	440b      	add	r3, r1
 800688a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800688e:	2201      	movs	r2, #1
 8006890:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 8006892:	f897 0184 	ldrb.w	r0, [r7, #388]	; 0x184
 8006896:	4b41      	ldr	r3, [pc, #260]	; (800699c <scaraInitDuty+0x16fc>)
 8006898:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800689c:	e9d3 1200 	ldrd	r1, r2, [r3]
 80068a0:	4c3e      	ldr	r4, [pc, #248]	; (800699c <scaraInitDuty+0x16fc>)
 80068a2:	4603      	mov	r3, r0
 80068a4:	005b      	lsls	r3, r3, #1
 80068a6:	4403      	add	r3, r0
 80068a8:	01db      	lsls	r3, r3, #7
 80068aa:	4423      	add	r3, r4
 80068ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b0:	e9c3 1200 	strd	r1, r2, [r3]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80068b4:	f897 2184 	ldrb.w	r2, [r7, #388]	; 0x184
 80068b8:	4613      	mov	r3, r2
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	4413      	add	r3, r2
 80068be:	01db      	lsls	r3, r3, #7
 80068c0:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80068c4:	4a35      	ldr	r2, [pc, #212]	; (800699c <scaraInitDuty+0x16fc>)
 80068c6:	1898      	adds	r0, r3, r2
 80068c8:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 80068cc:	4a34      	ldr	r2, [pc, #208]	; (80069a0 <scaraInitDuty+0x1700>)
 80068ce:	5cd1      	ldrb	r1, [r2, r3]
 80068d0:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 80068d4:	463a      	mov	r2, r7
 80068d6:	00db      	lsls	r3, r3, #3
 80068d8:	4413      	add	r3, r2
 80068da:	ed93 7b00 	vldr	d7, [r3]
 80068de:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80068e2:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80068e6:	eeb0 2a45 	vmov.f32	s4, s10
 80068ea:	eef0 2a65 	vmov.f32	s5, s11
 80068ee:	eeb0 1a46 	vmov.f32	s2, s12
 80068f2:	eef0 1a66 	vmov.f32	s3, s13
 80068f6:	2201      	movs	r2, #1
 80068f8:	eeb0 0a47 	vmov.f32	s0, s14
 80068fc:	eef0 0a67 	vmov.f32	s1, s15
 8006900:	f001 f91a 	bl	8007b38 <scaraInitScurve>
 8006904:	4603      	mov	r3, r0
 8006906:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 800690a:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800690e:	3301      	adds	r3, #1
 8006910:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8006914:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8006918:	2b03      	cmp	r3, #3
 800691a:	d9ae      	bls.n	800687a <scaraInitDuty+0x15da>
 800691c:	e007      	b.n	800692e <scaraInitDuty+0x168e>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 800691e:	2308      	movs	r3, #8
 8006920:	e033      	b.n	800698a <scaraInitDuty+0x16ea>
				}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8006922:	2305      	movs	r3, #5
 8006924:	e031      	b.n	800698a <scaraInitDuty+0x16ea>
			}

		} else {
			return SCARA_STATUS_ERROR_JOINT;
 8006926:	2304      	movs	r3, #4
 8006928:	e02f      	b.n	800698a <scaraInitDuty+0x16ea>
		}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 800692a:	2302      	movs	r3, #2
 800692c:	e02d      	b.n	800698a <scaraInitDuty+0x16ea>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 800692e:	4a1d      	ldr	r2, [pc, #116]	; (80069a4 <scaraInitDuty+0x1704>)
 8006930:	f04f 0300 	mov.w	r3, #0
 8006934:	f04f 0400 	mov.w	r4, #0
 8006938:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionCurrent.total_time = myDUTY.time_total;
 800693c:	4b17      	ldr	r3, [pc, #92]	; (800699c <scaraInitDuty+0x16fc>)
 800693e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006942:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006946:	4a17      	ldr	r2, [pc, #92]	; (80069a4 <scaraInitDuty+0x1704>)
 8006948:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionNext.t = 0;
 800694c:	4a16      	ldr	r2, [pc, #88]	; (80069a8 <scaraInitDuty+0x1708>)
 800694e:	f04f 0300 	mov.w	r3, #0
 8006952:	f04f 0400 	mov.w	r4, #0
 8006956:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionNext.total_time = myDUTY.time_total;
 800695a:	4b10      	ldr	r3, [pc, #64]	; (800699c <scaraInitDuty+0x16fc>)
 800695c:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006960:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006964:	4a10      	ldr	r2, [pc, #64]	; (80069a8 <scaraInitDuty+0x1708>)
 8006966:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionTrue.t = 0;
 800696a:	4a10      	ldr	r2, [pc, #64]	; (80069ac <scaraInitDuty+0x170c>)
 800696c:	f04f 0300 	mov.w	r3, #0
 8006970:	f04f 0400 	mov.w	r4, #0
 8006974:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionTrue.total_time = myDUTY.time_total;
 8006978:	4b08      	ldr	r3, [pc, #32]	; (800699c <scaraInitDuty+0x16fc>)
 800697a:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800697e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006982:	4a0a      	ldr	r2, [pc, #40]	; (80069ac <scaraInitDuty+0x170c>)
 8006984:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

	return SCARA_STATUS_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 8006990:	46bd      	mov	sp, r7
 8006992:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8006996:	b004      	add	sp, #16
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	20005af8 	.word	0x20005af8
 80069a0:	20000824 	.word	0x20000824
 80069a4:	200066b8 	.word	0x200066b8
 80069a8:	20006838 	.word	0x20006838
 80069ac:	20006778 	.word	0x20006778

080069b0 <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 80069b0:	b082      	sub	sp, #8
 80069b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069b4:	b0b1      	sub	sp, #196	; 0xc4
 80069b6:	af2e      	add	r7, sp, #184	; 0xb8
 80069b8:	6078      	str	r0, [r7, #4]
 80069ba:	f107 0120 	add.w	r1, r7, #32
 80069be:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 80069c2:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 80069c6:	4668      	mov	r0, sp
 80069c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069cc:	22b8      	movs	r2, #184	; 0xb8
 80069ce:	4619      	mov	r1, r3
 80069d0:	f00f f844 	bl	8015a5c <memcpy>
 80069d4:	f107 0320 	add.w	r3, r7, #32
 80069d8:	cb0c      	ldmia	r3, {r2, r3}
 80069da:	4620      	mov	r0, r4
 80069dc:	f7fd f954 	bl	8003c88 <kinematicInverse>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80069e6:	2307      	movs	r3, #7
 80069e8:	e09e      	b.n	8006b28 <scaraInitLine+0x178>
	}
	// Init line params
	line->x1 = end.x;
 80069ea:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	e9c2 3402 	strd	r3, r4, [r2, #8]
	line->y1 = end.y;
 80069f4:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	e9c2 3406 	strd	r3, r4, [r2, #24]
	line->z1 = end.z;
 80069fe:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	line->x0 = start.x;
 8006a08:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	e9c2 3400 	strd	r3, r4, [r2]
	line->y0 = start.y;
 8006a12:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	e9c2 3404 	strd	r3, r4, [r2, #16]
	line->z0 = start.z;
 8006a1c:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	e9c2 3408 	strd	r3, r4, [r2, #32]
	line->denta_x = end.x  -  start.x;
 8006a26:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8006a2a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8006a2e:	461a      	mov	r2, r3
 8006a30:	4623      	mov	r3, r4
 8006a32:	f7f9 fc29 	bl	8000288 <__aeabi_dsub>
 8006a36:	4603      	mov	r3, r0
 8006a38:	460c      	mov	r4, r1
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 8006a40:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8006a44:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8006a48:	461a      	mov	r2, r3
 8006a4a:	4623      	mov	r3, r4
 8006a4c:	f7f9 fc1c 	bl	8000288 <__aeabi_dsub>
 8006a50:	4603      	mov	r3, r0
 8006a52:	460c      	mov	r4, r1
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 8006a5a:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8006a5e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8006a62:	461a      	mov	r2, r3
 8006a64:	4623      	mov	r3, r4
 8006a66:	f7f9 fc0f 	bl	8000288 <__aeabi_dsub>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	460c      	mov	r4, r1
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8006a80:	461a      	mov	r2, r3
 8006a82:	4623      	mov	r3, r4
 8006a84:	f7f9 fdb8 	bl	80005f8 <__aeabi_dmul>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	460c      	mov	r4, r1
 8006a8c:	461d      	mov	r5, r3
 8006a8e:	4626      	mov	r6, r4
			       +(line->denta_y)*(line->denta_y)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	4623      	mov	r3, r4
 8006aa0:	f7f9 fdaa 	bl	80005f8 <__aeabi_dmul>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	460c      	mov	r4, r1
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	4623      	mov	r3, r4
 8006aac:	4628      	mov	r0, r5
 8006aae:	4631      	mov	r1, r6
 8006ab0:	f7f9 fbec 	bl	800028c <__adddf3>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	460c      	mov	r4, r1
 8006ab8:	461d      	mov	r5, r3
 8006aba:	4626      	mov	r6, r4
				   +(line->denta_z)*(line->denta_z));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8006ac8:	461a      	mov	r2, r3
 8006aca:	4623      	mov	r3, r4
 8006acc:	f7f9 fd94 	bl	80005f8 <__aeabi_dmul>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	460c      	mov	r4, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	4623      	mov	r3, r4
 8006ad8:	4628      	mov	r0, r5
 8006ada:	4631      	mov	r1, r6
 8006adc:	f7f9 fbd6 	bl	800028c <__adddf3>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	460c      	mov	r4, r1
 8006ae4:	ec44 3b17 	vmov	d7, r3, r4
 8006ae8:	eeb0 0a47 	vmov.f32	s0, s14
 8006aec:	eef0 0a67 	vmov.f32	s1, s15
 8006af0:	f012 febc 	bl	801986c <sqrt>
 8006af4:	eeb0 7a40 	vmov.f32	s14, s0
 8006af8:	eef0 7a60 	vmov.f32	s15, s1
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	line->y_current = line->y0;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	line->z_current = line->z0;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	return SCARA_STATUS_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006b32:	b002      	add	sp, #8
 8006b34:	4770      	bx	lr
	...

08006b38 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 8006b38:	b082      	sub	sp, #8
 8006b3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b3e:	b0c3      	sub	sp, #268	; 0x10c
 8006b40:	af2e      	add	r7, sp, #184	; 0xb8
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8006b48:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 8006b4c:	f507 7698 	add.w	r6, r7, #304	; 0x130
 8006b50:	4668      	mov	r0, sp
 8006b52:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006b56:	22b8      	movs	r2, #184	; 0xb8
 8006b58:	4619      	mov	r1, r3
 8006b5a:	f00e ff7f 	bl	8015a5c <memcpy>
 8006b5e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006b62:	cb0c      	ldmia	r3, {r2, r3}
 8006b64:	4630      	mov	r0, r6
 8006b66:	f7fd f88f 	bl	8003c88 <kinematicInverse>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8006b70:	2307      	movs	r3, #7
 8006b72:	e146      	b.n	8006e02 <scaraInitCircle+0x2ca>
	}

	if( 1 != dir && -1 != dir) {
 8006b74:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d006      	beq.n	8006b8a <scaraInitCircle+0x52>
 8006b7c:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8006b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b84:	d001      	beq.n	8006b8a <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
 8006b86:	2306      	movs	r3, #6
 8006b88:	e13b      	b.n	8006e02 <scaraInitCircle+0x2ca>
	}

	double v_x_start, v_y_start, v_x_stop, v_y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	v_x_start = start.x - center.x;
 8006b8a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006b8e:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8006b92:	f7f9 fb79 	bl	8000288 <__aeabi_dsub>
 8006b96:	4602      	mov	r2, r0
 8006b98:	460b      	mov	r3, r1
 8006b9a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	v_y_start = start.y - center.y;
 8006b9e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006ba2:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006ba6:	f7f9 fb6f 	bl	8000288 <__aeabi_dsub>
 8006baa:	4602      	mov	r2, r0
 8006bac:	460b      	mov	r3, r1
 8006bae:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	v_x_stop  = end.x  - center.x;
 8006bb2:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006bb6:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8006bba:	f7f9 fb65 	bl	8000288 <__aeabi_dsub>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	v_y_stop  = end.y  - center.y;
 8006bc6:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8006bca:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006bce:	f7f9 fb5b 	bl	8000288 <__aeabi_dsub>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	r1 = sqrt(v_x_start*v_x_start + v_y_start*v_y_start);
 8006bda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006bde:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006be2:	f7f9 fd09 	bl	80005f8 <__aeabi_dmul>
 8006be6:	4602      	mov	r2, r0
 8006be8:	460b      	mov	r3, r1
 8006bea:	4690      	mov	r8, r2
 8006bec:	4699      	mov	r9, r3
 8006bee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006bf2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006bf6:	f7f9 fcff 	bl	80005f8 <__aeabi_dmul>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	4640      	mov	r0, r8
 8006c00:	4649      	mov	r1, r9
 8006c02:	f7f9 fb43 	bl	800028c <__adddf3>
 8006c06:	4602      	mov	r2, r0
 8006c08:	460b      	mov	r3, r1
 8006c0a:	ec43 2b17 	vmov	d7, r2, r3
 8006c0e:	eeb0 0a47 	vmov.f32	s0, s14
 8006c12:	eef0 0a67 	vmov.f32	s1, s15
 8006c16:	f012 fe29 	bl	801986c <sqrt>
 8006c1a:	ed87 0b08 	vstr	d0, [r7, #32]
	r2 = sqrt(v_x_stop*v_x_stop + v_y_stop*v_y_stop);
 8006c1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006c22:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006c26:	f7f9 fce7 	bl	80005f8 <__aeabi_dmul>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4690      	mov	r8, r2
 8006c30:	4699      	mov	r9, r3
 8006c32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006c3a:	f7f9 fcdd 	bl	80005f8 <__aeabi_dmul>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	4640      	mov	r0, r8
 8006c44:	4649      	mov	r1, r9
 8006c46:	f7f9 fb21 	bl	800028c <__adddf3>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	ec43 2b17 	vmov	d7, r2, r3
 8006c52:	eeb0 0a47 	vmov.f32	s0, s14
 8006c56:	eef0 0a67 	vmov.f32	s1, s15
 8006c5a:	f012 fe07 	bl	801986c <sqrt>
 8006c5e:	ed87 0b06 	vstr	d0, [r7, #24]

	if( 1.0 < fabs(r1 - r2)) {
 8006c62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c66:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006c6a:	f7f9 fb0d 	bl	8000288 <__aeabi_dsub>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	4614      	mov	r4, r2
 8006c74:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8006c78:	f04f 0200 	mov.w	r2, #0
 8006c7c:	4b68      	ldr	r3, [pc, #416]	; (8006e20 <scaraInitCircle+0x2e8>)
 8006c7e:	4620      	mov	r0, r4
 8006c80:	4629      	mov	r1, r5
 8006c82:	f7f9 ff49 	bl	8000b18 <__aeabi_dcmpgt>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d001      	beq.n	8006c90 <scaraInitCircle+0x158>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 8006c8c:	2306      	movs	r3, #6
 8006c8e:	e0b8      	b.n	8006e02 <scaraInitCircle+0x2ca>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 8006c90:	a35f      	add	r3, pc, #380	; (adr r3, 8006e10 <scaraInitCircle+0x2d8>)
 8006c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c96:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006c9a:	f7f9 ff1f 	bl	8000adc <__aeabi_dcmplt>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d109      	bne.n	8006cb8 <scaraInitCircle+0x180>
 8006ca4:	a35a      	add	r3, pc, #360	; (adr r3, 8006e10 <scaraInitCircle+0x2d8>)
 8006ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006caa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006cae:	f7f9 ff15 	bl	8000adc <__aeabi_dcmplt>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <scaraInitCircle+0x184>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 8006cb8:	2306      	movs	r3, #6
 8006cba:	e0a2      	b.n	8006e02 <scaraInitCircle+0x2ca>
	}

	angle_start = atan2(v_y_start, v_x_start);
 8006cbc:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 8006cc0:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8006cc4:	f012 fdd0 	bl	8019868 <atan2>
 8006cc8:	ed87 0b04 	vstr	d0, [r7, #16]
	angle_stop  = atan2(v_y_stop, v_x_stop);
 8006ccc:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8006cd0:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8006cd4:	f012 fdc8 	bl	8019868 <atan2>
 8006cd8:	ed87 0b02 	vstr	d0, [r7, #8]
	delta_angle = angle_stop - angle_start;
 8006cdc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006ce0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ce4:	f7f9 fad0 	bl	8000288 <__aeabi_dsub>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	460c      	mov	r4, r1
 8006cec:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

	if ( 0 > delta_angle) {
 8006cf0:	f04f 0200 	mov.w	r2, #0
 8006cf4:	f04f 0300 	mov.w	r3, #0
 8006cf8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006cfc:	f7f9 feee 	bl	8000adc <__aeabi_dcmplt>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00a      	beq.n	8006d1c <scaraInitCircle+0x1e4>
		delta_angle += 2*PI;
 8006d06:	a344      	add	r3, pc, #272	; (adr r3, 8006e18 <scaraInitCircle+0x2e0>)
 8006d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006d10:	f7f9 fabc 	bl	800028c <__adddf3>
 8006d14:	4603      	mov	r3, r0
 8006d16:	460c      	mov	r4, r1
 8006d18:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	} // atan2 range : -PI --> PI

	if ( 0 > dir) {
 8006d1c:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	da0a      	bge.n	8006d3a <scaraInitCircle+0x202>
		delta_angle = 2*PI - delta_angle;
 8006d24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d28:	a13b      	add	r1, pc, #236	; (adr r1, 8006e18 <scaraInitCircle+0x2e0>)
 8006d2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d2e:	f7f9 faab 	bl	8000288 <__aeabi_dsub>
 8006d32:	4603      	mov	r3, r0
 8006d34:	460c      	mov	r4, r1
 8006d36:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	}
	// Init circle params
	circle->dir = dir;
 8006d3a:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8006d3e:	b25a      	sxtb	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8006d4a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	circle->angle_start = angle_start;
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006d54:	e9c2 3404 	strd	r3, r4, [r2, #16]
	circle->angle_stop  = angle_stop;
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006d5e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	circle->total_angle = delta_angle;
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8006d68:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 8006d6c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d70:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006d74:	f7f9 fc40 	bl	80005f8 <__aeabi_dmul>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	460c      	mov	r4, r1
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	circle->x0 = start.x;
 8006d82:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	e9c2 3408 	strd	r3, r4, [r2, #32]
	circle->y0 = start.y;
 8006d8c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	circle->x1 = end.x;
 8006d96:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	circle->y1 = end.y;
 8006da0:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	circle->xi = center.x;
 8006daa:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	circle->yi = center.y;
 8006db4:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	circle->z0 = start.z;
 8006dbe:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	circle->z1 = start.z;
 8006dc8:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	circle->zi = start.z;
 8006dd2:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	circle->x_current = circle->x0;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->y0;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->z0;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3754      	adds	r7, #84	; 0x54
 8006e06:	46bd      	mov	sp, r7
 8006e08:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e0c:	b002      	add	sp, #8
 8006e0e:	4770      	bx	lr
 8006e10:	9999999a 	.word	0x9999999a
 8006e14:	3fb99999 	.word	0x3fb99999
 8006e18:	60000000 	.word	0x60000000
 8006e1c:	401921fb 	.word	0x401921fb
 8006e20:	3ff00000 	.word	0x3ff00000
 8006e24:	00000000 	.word	0x00000000

08006e28 <scaraInitLinear>:

SCARA_StatusTypeDef scaraInitLinear(Trajectory_Linear_TypeDef *linear, Trajectory_TargetTypeDef target, double total_s,
									ModeInitTypeDef modeinit, double time)
{
 8006e28:	b590      	push	{r4, r7, lr}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6178      	str	r0, [r7, #20]
 8006e30:	460b      	mov	r3, r1
 8006e32:	ed87 0b02 	vstr	d0, [r7, #8]
 8006e36:	ed87 1b00 	vstr	d1, [r7]
 8006e3a:	74fb      	strb	r3, [r7, #19]
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	74bb      	strb	r3, [r7, #18]

	if(target == TRAJECTORY_3D){
 8006e40:	7cfb      	ldrb	r3, [r7, #19]
 8006e42:	2b04      	cmp	r3, #4
 8006e44:	d004      	beq.n	8006e50 <scaraInitLinear+0x28>

	}else if(target == TRAJECTORY_ROLL){
 8006e46:	7cfb      	ldrb	r3, [r7, #19]
 8006e48:	2b05      	cmp	r3, #5
 8006e4a:	d001      	beq.n	8006e50 <scaraInitLinear+0x28>

	}else{
		return SCARA_STATUS_ERROR_PARA;
 8006e4c:	2306      	movs	r3, #6
 8006e4e:	e02e      	b.n	8006eae <scaraInitLinear+0x86>
	}

	if(modeinit == DUTY_MODE_INIT_QT){
 8006e50:	7cbb      	ldrb	r3, [r7, #18]
 8006e52:	2b03      	cmp	r3, #3
 8006e54:	d125      	bne.n	8006ea2 <scaraInitLinear+0x7a>
		linear->constant_v = total_s / time;
 8006e56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e5e:	f7f9 fcf5 	bl	800084c <__aeabi_ddiv>
 8006e62:	4603      	mov	r3, r0
 8006e64:	460c      	mov	r4, r1
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	e9c2 3402 	strd	r3, r4, [r2, #8]
		linear->number_of_sample = ceilf(time / T_SAMPLING); // ceiling
 8006e6c:	a312      	add	r3, pc, #72	; (adr r3, 8006eb8 <scaraInitLinear+0x90>)
 8006e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e76:	f7f9 fce9 	bl	800084c <__aeabi_ddiv>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	460c      	mov	r4, r1
 8006e7e:	4618      	mov	r0, r3
 8006e80:	4621      	mov	r1, r4
 8006e82:	f7f9 feb1 	bl	8000be8 <__aeabi_d2f>
 8006e86:	4603      	mov	r3, r0
 8006e88:	ee00 3a10 	vmov	s0, r3
 8006e8c:	f012 fcac 	bl	80197e8 <ceilf>
 8006e90:	eef0 7a40 	vmov.f32	s15, s0
 8006e94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e98:	ee17 2a90 	vmov	r2, s15
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	621a      	str	r2, [r3, #32]
 8006ea0:	e004      	b.n	8006eac <scaraInitLinear+0x84>
	}else if(modeinit == DUTY_MODE_INIT_QV){
 8006ea2:	7cbb      	ldrb	r3, [r7, #18]
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d001      	beq.n	8006eac <scaraInitLinear+0x84>

	}else{
		return SCARA_STATUS_ERROR_PARA;
 8006ea8:	2306      	movs	r3, #6
 8006eaa:	e000      	b.n	8006eae <scaraInitLinear+0x86>
	}

	return SCARA_STATUS_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	371c      	adds	r7, #28
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd90      	pop	{r4, r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	40000000 	.word	0x40000000
 8006ebc:	3f847ae1 	.word	0x3f847ae1

08006ec0 <scaraInitLSPB1>:
SCARA_StatusTypeDef	scaraInitLSPB1		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double additional_factor){
 8006ec0:	b5b0      	push	{r4, r5, r7, lr}
 8006ec2:	b096      	sub	sp, #88	; 0x58
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	61f8      	str	r0, [r7, #28]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	ed87 0b04 	vstr	d0, [r7, #16]
 8006ece:	ed87 1b02 	vstr	d1, [r7, #8]
 8006ed2:	ed87 2b00 	vstr	d2, [r7]
 8006ed6:	76fb      	strb	r3, [r7, #27]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	int8_t dir;
	if(target == TRAJECTORY_3D){
 8006edc:	7efb      	ldrb	r3, [r7, #27]
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	d12c      	bne.n	8006f3c <scaraInitLSPB1+0x7c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8006ee2:	7ebb      	ldrb	r3, [r7, #26]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d10f      	bne.n	8006f08 <scaraInitLSPB1+0x48>
			v_design = V_MOVE_MAX*v_factor;
 8006ee8:	f04f 0200 	mov.w	r2, #0
 8006eec:	4b74      	ldr	r3, [pc, #464]	; (80070c0 <scaraInitLSPB1+0x200>)
 8006eee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ef2:	f7f9 fb81 	bl	80005f8 <__aeabi_dmul>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	460c      	mov	r4, r1
 8006efa:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 8006efe:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006f02:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8006f06:	e01b      	b.n	8006f40 <scaraInitLSPB1+0x80>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 8006f08:	7ebb      	ldrb	r3, [r7, #26]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d118      	bne.n	8006f40 <scaraInitLSPB1+0x80>
			a_design = A_MOVE_MAX*additional_factor;
 8006f0e:	f04f 0200 	mov.w	r2, #0
 8006f12:	4b6c      	ldr	r3, [pc, #432]	; (80070c4 <scaraInitLSPB1+0x204>)
 8006f14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f18:	f7f9 fb6e 	bl	80005f8 <__aeabi_dmul>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	460c      	mov	r4, r1
 8006f20:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			v_design = V_MOVE_MAX*v_factor;
 8006f24:	f04f 0200 	mov.w	r2, #0
 8006f28:	4b65      	ldr	r3, [pc, #404]	; (80070c0 <scaraInitLSPB1+0x200>)
 8006f2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f2e:	f7f9 fb63 	bl	80005f8 <__aeabi_dmul>
 8006f32:	4603      	mov	r3, r0
 8006f34:	460c      	mov	r4, r1
 8006f36:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8006f3a:	e001      	b.n	8006f40 <scaraInitLSPB1+0x80>
		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8006f3c:	2306      	movs	r3, #6
 8006f3e:	e20b      	b.n	8007358 <scaraInitLSPB1+0x498>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 8006f40:	7ebb      	ldrb	r3, [r7, #26]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	f040 80c6 	bne.w	80070d4 <scaraInitLSPB1+0x214>
		//check if time valid or not
		if(tf < 0.1 && v_design > 7.5){
 8006f48:	a357      	add	r3, pc, #348	; (adr r3, 80070a8 <scaraInitLSPB1+0x1e8>)
 8006f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006f52:	f7f9 fdc3 	bl	8000adc <__aeabi_dcmplt>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d01d      	beq.n	8006f98 <scaraInitLSPB1+0xd8>
 8006f5c:	f04f 0200 	mov.w	r2, #0
 8006f60:	4b59      	ldr	r3, [pc, #356]	; (80070c8 <scaraInitLSPB1+0x208>)
 8006f62:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006f66:	f7f9 fdd7 	bl	8000b18 <__aeabi_dcmpgt>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d013      	beq.n	8006f98 <scaraInitLSPB1+0xd8>
			tf = 1.5*total_s/v_design;
 8006f70:	f04f 0200 	mov.w	r2, #0
 8006f74:	4b55      	ldr	r3, [pc, #340]	; (80070cc <scaraInitLSPB1+0x20c>)
 8006f76:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006f7a:	f7f9 fb3d 	bl	80005f8 <__aeabi_dmul>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	460c      	mov	r4, r1
 8006f82:	4618      	mov	r0, r3
 8006f84:	4621      	mov	r1, r4
 8006f86:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006f8a:	f7f9 fc5f 	bl	800084c <__aeabi_ddiv>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	460c      	mov	r4, r1
 8006f92:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8006f96:	e060      	b.n	800705a <scaraInitLSPB1+0x19a>
		}else if(v_design < 0.0001 && tf > 0.15){ //check if velocity valid or not
 8006f98:	a345      	add	r3, pc, #276	; (adr r3, 80070b0 <scaraInitLSPB1+0x1f0>)
 8006f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006fa2:	f7f9 fd9b 	bl	8000adc <__aeabi_dcmplt>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d01d      	beq.n	8006fe8 <scaraInitLSPB1+0x128>
 8006fac:	a342      	add	r3, pc, #264	; (adr r3, 80070b8 <scaraInitLSPB1+0x1f8>)
 8006fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006fb6:	f7f9 fdaf 	bl	8000b18 <__aeabi_dcmpgt>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d013      	beq.n	8006fe8 <scaraInitLSPB1+0x128>
			v_design = 1.5*total_s/tf;
 8006fc0:	f04f 0200 	mov.w	r2, #0
 8006fc4:	4b41      	ldr	r3, [pc, #260]	; (80070cc <scaraInitLSPB1+0x20c>)
 8006fc6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006fca:	f7f9 fb15 	bl	80005f8 <__aeabi_dmul>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	460c      	mov	r4, r1
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	4621      	mov	r1, r4
 8006fd6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006fda:	f7f9 fc37 	bl	800084c <__aeabi_ddiv>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	460c      	mov	r4, r1
 8006fe2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8006fe6:	e038      	b.n	800705a <scaraInitLSPB1+0x19a>
		}else{
			v_lim = total_s/tf;
 8006fe8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006fec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006ff0:	f7f9 fc2c 	bl	800084c <__aeabi_ddiv>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	460c      	mov	r4, r1
 8006ff8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			if(v_design < 1.2*v_lim){
 8006ffc:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8007000:	4b33      	ldr	r3, [pc, #204]	; (80070d0 <scaraInitLSPB1+0x210>)
 8007002:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007006:	f7f9 faf7 	bl	80005f8 <__aeabi_dmul>
 800700a:	4603      	mov	r3, r0
 800700c:	460c      	mov	r4, r1
 800700e:	461a      	mov	r2, r3
 8007010:	4623      	mov	r3, r4
 8007012:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007016:	f7f9 fd61 	bl	8000adc <__aeabi_dcmplt>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d001      	beq.n	8007024 <scaraInitLSPB1+0x164>
				return SCARA_STATUS_ERROR_OVER_VELOC;
 8007020:	2309      	movs	r3, #9
 8007022:	e199      	b.n	8007358 <scaraInitLSPB1+0x498>
			}else if(v_design > 2*v_lim){
 8007024:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007028:	4602      	mov	r2, r0
 800702a:	460b      	mov	r3, r1
 800702c:	f7f9 f92e 	bl	800028c <__adddf3>
 8007030:	4603      	mov	r3, r0
 8007032:	460c      	mov	r4, r1
 8007034:	461a      	mov	r2, r3
 8007036:	4623      	mov	r3, r4
 8007038:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800703c:	f7f9 fd6c 	bl	8000b18 <__aeabi_dcmpgt>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d009      	beq.n	800705a <scaraInitLSPB1+0x19a>
				v_design = 2*v_lim;
 8007046:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800704a:	4602      	mov	r2, r0
 800704c:	460b      	mov	r3, r1
 800704e:	f7f9 f91d 	bl	800028c <__adddf3>
 8007052:	4603      	mov	r3, r0
 8007054:	460c      	mov	r4, r1
 8007056:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			}else{

			}
		}
		ta = tf - total_s/v_design;
 800705a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800705e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007062:	f7f9 fbf3 	bl	800084c <__aeabi_ddiv>
 8007066:	4603      	mov	r3, r0
 8007068:	460c      	mov	r4, r1
 800706a:	461a      	mov	r2, r3
 800706c:	4623      	mov	r3, r4
 800706e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007072:	f7f9 f909 	bl	8000288 <__aeabi_dsub>
 8007076:	4603      	mov	r3, r0
 8007078:	460c      	mov	r4, r1
 800707a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		a_design = v_design/ta;
 800707e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007082:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007086:	f7f9 fbe1 	bl	800084c <__aeabi_ddiv>
 800708a:	4603      	mov	r3, r0
 800708c:	460c      	mov	r4, r1
 800708e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		td = tf - ta;
 8007092:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007096:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800709a:	f7f9 f8f5 	bl	8000288 <__aeabi_dsub>
 800709e:	4603      	mov	r3, r0
 80070a0:	460c      	mov	r4, r1
 80070a2:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 80070a6:	e0ef      	b.n	8007288 <scaraInitLSPB1+0x3c8>
 80070a8:	9999999a 	.word	0x9999999a
 80070ac:	3fb99999 	.word	0x3fb99999
 80070b0:	eb1c432d 	.word	0xeb1c432d
 80070b4:	3f1a36e2 	.word	0x3f1a36e2
 80070b8:	33333333 	.word	0x33333333
 80070bc:	3fc33333 	.word	0x3fc33333
 80070c0:	40877000 	.word	0x40877000
 80070c4:	407f4000 	.word	0x407f4000
 80070c8:	401e0000 	.word	0x401e0000
 80070cc:	3ff80000 	.word	0x3ff80000
 80070d0:	3ff33333 	.word	0x3ff33333

	}else if(modeinit == DUTY_MODE_INIT_QVA){
 80070d4:	7ebb      	ldrb	r3, [r7, #26]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f040 80d6 	bne.w	8007288 <scaraInitLSPB1+0x3c8>
		//check qva condition
		if(total_s*a_design < v_design*v_design){ //condition for ta smaller than td
 80070dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80070e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80070e4:	f7f9 fa88 	bl	80005f8 <__aeabi_dmul>
 80070e8:	4603      	mov	r3, r0
 80070ea:	460c      	mov	r4, r1
 80070ec:	4625      	mov	r5, r4
 80070ee:	461c      	mov	r4, r3
 80070f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80070f4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80070f8:	f7f9 fa7e 	bl	80005f8 <__aeabi_dmul>
 80070fc:	4602      	mov	r2, r0
 80070fe:	460b      	mov	r3, r1
 8007100:	4620      	mov	r0, r4
 8007102:	4629      	mov	r1, r5
 8007104:	f7f9 fcea 	bl	8000adc <__aeabi_dcmplt>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	f000 8088 	beq.w	8007220 <scaraInitLSPB1+0x360>
			if(total_s/v_design < 0.8){ //td too small
 8007110:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007114:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007118:	f7f9 fb98 	bl	800084c <__aeabi_ddiv>
 800711c:	4603      	mov	r3, r0
 800711e:	460c      	mov	r4, r1
 8007120:	4618      	mov	r0, r3
 8007122:	4621      	mov	r1, r4
 8007124:	a392      	add	r3, pc, #584	; (adr r3, 8007370 <scaraInitLSPB1+0x4b0>)
 8007126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712a:	f7f9 fcd7 	bl	8000adc <__aeabi_dcmplt>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00a      	beq.n	800714a <scaraInitLSPB1+0x28a>
				//recalculate v_design
				v_design = 0.8*total_s;
 8007134:	a38e      	add	r3, pc, #568	; (adr r3, 8007370 <scaraInitLSPB1+0x4b0>)
 8007136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800713e:	f7f9 fa5b 	bl	80005f8 <__aeabi_dmul>
 8007142:	4603      	mov	r3, r0
 8007144:	460c      	mov	r4, r1
 8007146:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			}
			if(v_design/a_design < 0.5){ //ta is too small
 800714a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800714e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007152:	f7f9 fb7b 	bl	800084c <__aeabi_ddiv>
 8007156:	4603      	mov	r3, r0
 8007158:	460c      	mov	r4, r1
 800715a:	4618      	mov	r0, r3
 800715c:	4621      	mov	r1, r4
 800715e:	f04f 0200 	mov.w	r2, #0
 8007162:	4b81      	ldr	r3, [pc, #516]	; (8007368 <scaraInitLSPB1+0x4a8>)
 8007164:	f7f9 fcba 	bl	8000adc <__aeabi_dcmplt>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00a      	beq.n	8007184 <scaraInitLSPB1+0x2c4>
				//recalculate a_design
				a_design = v_design/0.5;
 800716e:	f04f 0200 	mov.w	r2, #0
 8007172:	4b7d      	ldr	r3, [pc, #500]	; (8007368 <scaraInitLSPB1+0x4a8>)
 8007174:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007178:	f7f9 fb68 	bl	800084c <__aeabi_ddiv>
 800717c:	4603      	mov	r3, r0
 800717e:	460c      	mov	r4, r1
 8007180:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			}
			ta = v_design/a_design;
 8007184:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007188:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800718c:	f7f9 fb5e 	bl	800084c <__aeabi_ddiv>
 8007190:	4603      	mov	r3, r0
 8007192:	460c      	mov	r4, r1
 8007194:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
			td = total_s/v_design;
 8007198:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800719c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80071a0:	f7f9 fb54 	bl	800084c <__aeabi_ddiv>
 80071a4:	4603      	mov	r3, r0
 80071a6:	460c      	mov	r4, r1
 80071a8:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			tf = ta + td;
 80071ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80071b0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80071b4:	f7f9 f86a 	bl	800028c <__adddf3>
 80071b8:	4603      	mov	r3, r0
 80071ba:	460c      	mov	r4, r1
 80071bc:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			if(v_design/a_design < 1){ //ta is too small
 80071c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80071c4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80071c8:	f7f9 fb40 	bl	800084c <__aeabi_ddiv>
 80071cc:	4603      	mov	r3, r0
 80071ce:	460c      	mov	r4, r1
 80071d0:	4618      	mov	r0, r3
 80071d2:	4621      	mov	r1, r4
 80071d4:	f04f 0200 	mov.w	r2, #0
 80071d8:	4b64      	ldr	r3, [pc, #400]	; (800736c <scaraInitLSPB1+0x4ac>)
 80071da:	f7f9 fc7f 	bl	8000adc <__aeabi_dcmplt>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d051      	beq.n	8007288 <scaraInitLSPB1+0x3c8>
				//recalculate a_design
				a_design = v_design;
 80071e4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80071e8:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
				ta = 1;
 80071ec:	f04f 0300 	mov.w	r3, #0
 80071f0:	4c5e      	ldr	r4, [pc, #376]	; (800736c <scaraInitLSPB1+0x4ac>)
 80071f2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
				td = total_s/v_design;
 80071f6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80071fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80071fe:	f7f9 fb25 	bl	800084c <__aeabi_ddiv>
 8007202:	4603      	mov	r3, r0
 8007204:	460c      	mov	r4, r1
 8007206:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
				tf = ta + td;
 800720a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800720e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007212:	f7f9 f83b 	bl	800028c <__adddf3>
 8007216:	4603      	mov	r3, r0
 8007218:	460c      	mov	r4, r1
 800721a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 800721e:	e033      	b.n	8007288 <scaraInitLSPB1+0x3c8>
			}

		}else{
			tf = 2*total_s/v_design;
 8007220:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007224:	4602      	mov	r2, r0
 8007226:	460b      	mov	r3, r1
 8007228:	f7f9 f830 	bl	800028c <__adddf3>
 800722c:	4603      	mov	r3, r0
 800722e:	460c      	mov	r4, r1
 8007230:	4618      	mov	r0, r3
 8007232:	4621      	mov	r1, r4
 8007234:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007238:	f7f9 fb08 	bl	800084c <__aeabi_ddiv>
 800723c:	4603      	mov	r3, r0
 800723e:	460c      	mov	r4, r1
 8007240:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			ta = tf/2;
 8007244:	f04f 0200 	mov.w	r2, #0
 8007248:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800724c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007250:	f7f9 fafc 	bl	800084c <__aeabi_ddiv>
 8007254:	4603      	mov	r3, r0
 8007256:	460c      	mov	r4, r1
 8007258:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
			td = tf/2;
 800725c:	f04f 0200 	mov.w	r2, #0
 8007260:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007264:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007268:	f7f9 faf0 	bl	800084c <__aeabi_ddiv>
 800726c:	4603      	mov	r3, r0
 800726e:	460c      	mov	r4, r1
 8007270:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			a_design = v_design/ta;
 8007274:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007278:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800727c:	f7f9 fae6 	bl	800084c <__aeabi_ddiv>
 8007280:	4603      	mov	r3, r0
 8007282:	460c      	mov	r4, r1
 8007284:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		}
	}
	no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8007288:	a335      	add	r3, pc, #212	; (adr r3, 8007360 <scaraInitLSPB1+0x4a0>)
 800728a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007292:	f7f9 fadb 	bl	800084c <__aeabi_ddiv>
 8007296:	4603      	mov	r3, r0
 8007298:	460c      	mov	r4, r1
 800729a:	4618      	mov	r0, r3
 800729c:	4621      	mov	r1, r4
 800729e:	f7f9 fca3 	bl	8000be8 <__aeabi_d2f>
 80072a2:	4603      	mov	r3, r0
 80072a4:	ee00 3a10 	vmov	s0, r3
 80072a8:	f012 fa9e 	bl	80197e8 <ceilf>
 80072ac:	eef0 7a40 	vmov.f32	s15, s0
 80072b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072b4:	ee17 3a90 	vmov	r3, s15
 80072b8:	627b      	str	r3, [r7, #36]	; 0x24
	 // Init lspb params
	 lspb->dir= dir;
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80072c0:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = 0;
 80072c2:	69fa      	ldr	r2, [r7, #28]
 80072c4:	f04f 0300 	mov.w	r3, #0
 80072c8:	f04f 0400 	mov.w	r4, #0
 80072cc:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = total_s;
 80072d0:	69fa      	ldr	r2, [r7, #28]
 80072d2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80072d6:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 80072da:	69fa      	ldr	r2, [r7, #28]
 80072dc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80072e0:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 80072e4:	69fa      	ldr	r2, [r7, #28]
 80072e6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80072ea:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 80072ee:	69fa      	ldr	r2, [r7, #28]
 80072f0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80072f4:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 80072f8:	69fa      	ldr	r2, [r7, #28]
 80072fa:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80072fe:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 8007302:	69fa      	ldr	r2, [r7, #28]
 8007304:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8007308:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_design;
 800730c:	69fa      	ldr	r2, [r7, #28]
 800730e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8007312:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = 0;
 8007316:	69fa      	ldr	r2, [r7, #28]
 8007318:	f04f 0300 	mov.w	r3, #0
 800731c:	f04f 0400 	mov.w	r4, #0
 8007320:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = 0;
 8007324:	69fa      	ldr	r2, [r7, #28]
 8007326:	f04f 0300 	mov.w	r3, #0
 800732a:	f04f 0400 	mov.w	r4, #0
 800732e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007336:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8007344:	461a      	mov	r2, r3
 8007346:	4623      	mov	r3, r4
 8007348:	f7f8 ff9e 	bl	8000288 <__aeabi_dsub>
 800734c:	4603      	mov	r3, r0
 800734e:	460c      	mov	r4, r1
 8007350:	69fa      	ldr	r2, [r7, #28]
 8007352:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3758      	adds	r7, #88	; 0x58
 800735c:	46bd      	mov	sp, r7
 800735e:	bdb0      	pop	{r4, r5, r7, pc}
 8007360:	40000000 	.word	0x40000000
 8007364:	3f847ae1 	.word	0x3f847ae1
 8007368:	3fe00000 	.word	0x3fe00000
 800736c:	3ff00000 	.word	0x3ff00000
 8007370:	9999999a 	.word	0x9999999a
 8007374:	3fe99999 	.word	0x3fe99999

08007378 <scaraInitLSPB>:
SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8007378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800737c:	b0ad      	sub	sp, #180	; 0xb4
 800737e:	af00      	add	r7, sp, #0
 8007380:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007382:	460b      	mov	r3, r1
 8007384:	ed87 0b08 	vstr	d0, [r7, #32]
 8007388:	ed87 1b06 	vstr	d1, [r7, #24]
 800738c:	ed87 2b04 	vstr	d2, [r7, #16]
 8007390:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007394:	4613      	mov	r3, r2
 8007396:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 800739a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800739e:	2b04      	cmp	r3, #4
 80073a0:	d118      	bne.n	80073d4 <scaraInitLSPB+0x5c>
		 v_design = V_DESIGN_3D*v_factor;
 80073a2:	f20f 7368 	addw	r3, pc, #1896	; 0x768
 80073a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80073ae:	f7f9 f923 	bl	80005f8 <__aeabi_dmul>
 80073b2:	4603      	mov	r3, r0
 80073b4:	460c      	mov	r4, r1
 80073b6:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_3D*a_factor;
 80073ba:	f20f 7350 	addw	r3, pc, #1872	; 0x750
 80073be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80073c6:	f7f9 f917 	bl	80005f8 <__aeabi_dmul>
 80073ca:	4603      	mov	r3, r0
 80073cc:	460c      	mov	r4, r1
 80073ce:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80073d2:	e092      	b.n	80074fa <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_ROLL == target) {
 80073d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073d8:	2b05      	cmp	r3, #5
 80073da:	d118      	bne.n	800740e <scaraInitLSPB+0x96>
		 v_design = V_DESIGN_ROLL*v_factor;
 80073dc:	f20f 7334 	addw	r3, pc, #1844	; 0x734
 80073e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80073e8:	f7f9 f906 	bl	80005f8 <__aeabi_dmul>
 80073ec:	4603      	mov	r3, r0
 80073ee:	460c      	mov	r4, r1
 80073f0:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_ROLL*a_factor;
 80073f4:	f20f 731c 	addw	r3, pc, #1820	; 0x71c
 80073f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007400:	f7f9 f8fa 	bl	80005f8 <__aeabi_dmul>
 8007404:	4603      	mov	r3, r0
 8007406:	460c      	mov	r4, r1
 8007408:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800740c:	e075      	b.n	80074fa <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J0 == target) {
 800740e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007412:	2b00      	cmp	r3, #0
 8007414:	d118      	bne.n	8007448 <scaraInitLSPB+0xd0>
		 v_design = V_DESIGN_J0*v_factor;
 8007416:	f20f 63fc 	addw	r3, pc, #1788	; 0x6fc
 800741a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007422:	f7f9 f8e9 	bl	80005f8 <__aeabi_dmul>
 8007426:	4603      	mov	r3, r0
 8007428:	460c      	mov	r4, r1
 800742a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J0*a_factor;
 800742e:	f20f 63e4 	addw	r3, pc, #1764	; 0x6e4
 8007432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007436:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800743a:	f7f9 f8dd 	bl	80005f8 <__aeabi_dmul>
 800743e:	4603      	mov	r3, r0
 8007440:	460c      	mov	r4, r1
 8007442:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8007446:	e058      	b.n	80074fa <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J1 == target) {
 8007448:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800744c:	2b01      	cmp	r3, #1
 800744e:	d118      	bne.n	8007482 <scaraInitLSPB+0x10a>
		 v_design = V_DESIGN_J1*v_factor;
 8007450:	f20f 63c0 	addw	r3, pc, #1728	; 0x6c0
 8007454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007458:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800745c:	f7f9 f8cc 	bl	80005f8 <__aeabi_dmul>
 8007460:	4603      	mov	r3, r0
 8007462:	460c      	mov	r4, r1
 8007464:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J1*a_factor;
 8007468:	f20f 63a8 	addw	r3, pc, #1704	; 0x6a8
 800746c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007470:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007474:	f7f9 f8c0 	bl	80005f8 <__aeabi_dmul>
 8007478:	4603      	mov	r3, r0
 800747a:	460c      	mov	r4, r1
 800747c:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8007480:	e03b      	b.n	80074fa <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J2 == target) {
 8007482:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007486:	2b02      	cmp	r3, #2
 8007488:	d118      	bne.n	80074bc <scaraInitLSPB+0x144>
		 v_design = V_DESIGN_J2*v_factor;
 800748a:	f20f 6380 	addw	r3, pc, #1664	; 0x680
 800748e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007492:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007496:	f7f9 f8af 	bl	80005f8 <__aeabi_dmul>
 800749a:	4603      	mov	r3, r0
 800749c:	460c      	mov	r4, r1
 800749e:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J2*a_factor;
 80074a2:	f20f 6368 	addw	r3, pc, #1640	; 0x668
 80074a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80074ae:	f7f9 f8a3 	bl	80005f8 <__aeabi_dmul>
 80074b2:	4603      	mov	r3, r0
 80074b4:	460c      	mov	r4, r1
 80074b6:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80074ba:	e01e      	b.n	80074fa <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J3 == target) {
 80074bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074c0:	2b03      	cmp	r3, #3
 80074c2:	d118      	bne.n	80074f6 <scaraInitLSPB+0x17e>
		 v_design = V_DESIGN_J3*v_factor;
 80074c4:	f20f 6354 	addw	r3, pc, #1620	; 0x654
 80074c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80074d0:	f7f9 f892 	bl	80005f8 <__aeabi_dmul>
 80074d4:	4603      	mov	r3, r0
 80074d6:	460c      	mov	r4, r1
 80074d8:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J3*a_factor;
 80074dc:	f20f 633c 	addw	r3, pc, #1596	; 0x63c
 80074e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80074e8:	f7f9 f886 	bl	80005f8 <__aeabi_dmul>
 80074ec:	4603      	mov	r3, r0
 80074ee:	460c      	mov	r4, r1
 80074f0:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80074f4:	e001      	b.n	80074fa <scaraInitLSPB+0x182>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 80074f6:	2306      	movs	r3, #6
 80074f8:	e2fa      	b.n	8007af0 <scaraInitLSPB+0x778>
	 }

	 q0 = 0;
 80074fa:	f04f 0300 	mov.w	r3, #0
 80074fe:	f04f 0400 	mov.w	r4, #0
 8007502:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	 q1 = total_s;
 8007506:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800750a:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	 v0 = 0;
 800750e:	f04f 0300 	mov.w	r3, #0
 8007512:	f04f 0400 	mov.w	r4, #0
 8007516:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 v1 = 0;
 800751a:	f04f 0300 	mov.w	r3, #0
 800751e:	f04f 0400 	mov.w	r4, #0
 8007522:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

	 if ( q0 <= q1) {
 8007526:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800752a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800752e:	f7f9 fadf 	bl	8000af0 <__aeabi_dcmple>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d003      	beq.n	8007540 <scaraInitLSPB+0x1c8>
		 dir = 1;
 8007538:	2301      	movs	r3, #1
 800753a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800753e:	e00c      	b.n	800755a <scaraInitLSPB+0x1e2>
	 } else {
		 dir = -1;
 8007540:	23ff      	movs	r3, #255	; 0xff
 8007542:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		 q1 = -q1;
 8007546:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800754a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800754e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007552:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007556:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 800755a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800755e:	2b01      	cmp	r3, #1
 8007560:	f040 809e 	bne.w	80076a0 <scaraInitLSPB+0x328>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 8007564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007566:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 800756a:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 // Avoid division by 0
		 if (tf > 0.001) {
 800756e:	f20f 53b4 	addw	r3, pc, #1460	; 0x5b4
 8007572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007576:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800757a:	f7f9 facd 	bl	8000b18 <__aeabi_dcmpgt>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	f000 8081 	beq.w	8007688 <scaraInitLSPB+0x310>
			 v_lower 	= (q1 - q0) / tf;
 8007586:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800758a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800758e:	f7f8 fe7b 	bl	8000288 <__aeabi_dsub>
 8007592:	4603      	mov	r3, r0
 8007594:	460c      	mov	r4, r1
 8007596:	4618      	mov	r0, r3
 8007598:	4621      	mov	r1, r4
 800759a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800759e:	f7f9 f955 	bl	800084c <__aeabi_ddiv>
 80075a2:	4603      	mov	r3, r0
 80075a4:	460c      	mov	r4, r1
 80075a6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			 v_upper 	= 2*(q1 - q0) / tf;
 80075aa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80075ae:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80075b2:	f7f8 fe69 	bl	8000288 <__aeabi_dsub>
 80075b6:	4603      	mov	r3, r0
 80075b8:	460c      	mov	r4, r1
 80075ba:	4618      	mov	r0, r3
 80075bc:	4621      	mov	r1, r4
 80075be:	4602      	mov	r2, r0
 80075c0:	460b      	mov	r3, r1
 80075c2:	f7f8 fe63 	bl	800028c <__adddf3>
 80075c6:	4603      	mov	r3, r0
 80075c8:	460c      	mov	r4, r1
 80075ca:	4618      	mov	r0, r3
 80075cc:	4621      	mov	r1, r4
 80075ce:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80075d2:	f7f9 f93b 	bl	800084c <__aeabi_ddiv>
 80075d6:	4603      	mov	r3, r0
 80075d8:	460c      	mov	r4, r1
 80075da:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

			 if ( v_design < v_lower) {
 80075de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80075e2:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80075e6:	f7f9 fa79 	bl	8000adc <__aeabi_dcmplt>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <scaraInitLSPB+0x27c>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 80075f0:	2309      	movs	r3, #9
 80075f2:	e27d      	b.n	8007af0 <scaraInitLSPB+0x778>
			 } else {
				 if ( v_upper <= v_design) {
 80075f4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80075f8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80075fc:	f7f9 fa78 	bl	8000af0 <__aeabi_dcmple>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <scaraInitLSPB+0x296>
					 v_design = v_upper;
 8007606:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800760a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 800760e:	f20f 531c 	addw	r3, pc, #1308	; 0x51c
 8007612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007616:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800761a:	f7f9 fa7d 	bl	8000b18 <__aeabi_dcmpgt>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d01a      	beq.n	800765a <scaraInitLSPB+0x2e2>
					 tc_upper	= tf - (q1 - q0)/v_design;
 8007624:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007628:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800762c:	f7f8 fe2c 	bl	8000288 <__aeabi_dsub>
 8007630:	4603      	mov	r3, r0
 8007632:	460c      	mov	r4, r1
 8007634:	4618      	mov	r0, r3
 8007636:	4621      	mov	r1, r4
 8007638:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800763c:	f7f9 f906 	bl	800084c <__aeabi_ddiv>
 8007640:	4603      	mov	r3, r0
 8007642:	460c      	mov	r4, r1
 8007644:	461a      	mov	r2, r3
 8007646:	4623      	mov	r3, r4
 8007648:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800764c:	f7f8 fe1c 	bl	8000288 <__aeabi_dsub>
 8007650:	4603      	mov	r3, r0
 8007652:	460c      	mov	r4, r1
 8007654:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
 8007658:	e00b      	b.n	8007672 <scaraInitLSPB+0x2fa>
				 } else {
					 tc_upper = tf / 2;
 800765a:	f04f 0200 	mov.w	r2, #0
 800765e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007662:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007666:	f7f9 f8f1 	bl	800084c <__aeabi_ddiv>
 800766a:	4603      	mov	r3, r0
 800766c:	460c      	mov	r4, r1
 800766e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				 }
				 a_upper	= v_design/tc_upper;
 8007672:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007676:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800767a:	f7f9 f8e7 	bl	800084c <__aeabi_ddiv>
 800767e:	4603      	mov	r3, r0
 8007680:	460c      	mov	r4, r1
 8007682:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 8007686:	e00b      	b.n	80076a0 <scaraInitLSPB+0x328>
				//  } else {
				// 	 a_design = a_upper;
				//  }
			 }
		 } else {
			 v_design = 0;
 8007688:	f04f 0300 	mov.w	r3, #0
 800768c:	f04f 0400 	mov.w	r4, #0
 8007690:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
			 a_design = 0;
 8007694:	f04f 0300 	mov.w	r3, #0
 8007698:	f04f 0400 	mov.w	r4, #0
 800769c:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 80076a0:	f20f 4388 	addw	r3, pc, #1160	; 0x488
 80076a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a8:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80076ac:	f7f9 fa34 	bl	8000b18 <__aeabi_dcmpgt>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f000 819c 	beq.w	80079f0 <scaraInitLSPB+0x678>
 80076b8:	f20f 4370 	addw	r3, pc, #1136	; 0x470
 80076bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80076c4:	f7f9 fa28 	bl	8000b18 <__aeabi_dcmpgt>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f000 8190 	beq.w	80079f0 <scaraInitLSPB+0x678>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80076d0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80076d4:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80076d8:	f7f8 fdd6 	bl	8000288 <__aeabi_dsub>
 80076dc:	4603      	mov	r3, r0
 80076de:	460c      	mov	r4, r1
 80076e0:	461d      	mov	r5, r3
 80076e2:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 80076e6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80076ea:	4628      	mov	r0, r5
 80076ec:	4631      	mov	r1, r6
 80076ee:	f7f8 ff83 	bl	80005f8 <__aeabi_dmul>
 80076f2:	4603      	mov	r3, r0
 80076f4:	460c      	mov	r4, r1
 80076f6:	e9c7 3402 	strd	r3, r4, [r7, #8]
 80076fa:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80076fe:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007702:	f7f8 ff79 	bl	80005f8 <__aeabi_dmul>
 8007706:	4603      	mov	r3, r0
 8007708:	460c      	mov	r4, r1
 800770a:	e9c7 3400 	strd	r3, r4, [r7]
 800770e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007712:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007716:	f7f8 ff6f 	bl	80005f8 <__aeabi_dmul>
 800771a:	4603      	mov	r3, r0
 800771c:	460c      	mov	r4, r1
 800771e:	461d      	mov	r5, r3
 8007720:	4626      	mov	r6, r4
 8007722:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007726:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800772a:	f7f8 ff65 	bl	80005f8 <__aeabi_dmul>
 800772e:	4603      	mov	r3, r0
 8007730:	460c      	mov	r4, r1
 8007732:	461a      	mov	r2, r3
 8007734:	4623      	mov	r3, r4
 8007736:	4628      	mov	r0, r5
 8007738:	4631      	mov	r1, r6
 800773a:	f7f8 fda7 	bl	800028c <__adddf3>
 800773e:	4603      	mov	r3, r0
 8007740:	460c      	mov	r4, r1
 8007742:	4618      	mov	r0, r3
 8007744:	4621      	mov	r1, r4
 8007746:	f04f 0200 	mov.w	r2, #0
 800774a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800774e:	f7f9 f87d 	bl	800084c <__aeabi_ddiv>
 8007752:	4603      	mov	r3, r0
 8007754:	460c      	mov	r4, r1
 8007756:	461a      	mov	r2, r3
 8007758:	4623      	mov	r3, r4
 800775a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800775e:	f7f8 fd93 	bl	8000288 <__aeabi_dsub>
 8007762:	4603      	mov	r3, r0
 8007764:	460c      	mov	r4, r1
 8007766:	461a      	mov	r2, r3
 8007768:	4623      	mov	r3, r4
 800776a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800776e:	f7f9 f9bf 	bl	8000af0 <__aeabi_dcmple>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d075      	beq.n	8007864 <scaraInitLSPB+0x4ec>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 8007778:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800777c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007780:	f7f8 fd82 	bl	8000288 <__aeabi_dsub>
 8007784:	4603      	mov	r3, r0
 8007786:	460c      	mov	r4, r1
 8007788:	469a      	mov	sl, r3
 800778a:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 800778e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8007792:	4650      	mov	r0, sl
 8007794:	4659      	mov	r1, fp
 8007796:	f7f8 ff2f 	bl	80005f8 <__aeabi_dmul>
 800779a:	4603      	mov	r3, r0
 800779c:	460c      	mov	r4, r1
 800779e:	4625      	mov	r5, r4
 80077a0:	461c      	mov	r4, r3
 80077a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80077a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80077aa:	f7f8 ff25 	bl	80005f8 <__aeabi_dmul>
 80077ae:	4602      	mov	r2, r0
 80077b0:	460b      	mov	r3, r1
 80077b2:	4690      	mov	r8, r2
 80077b4:	4699      	mov	r9, r3
 80077b6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80077ba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80077be:	f7f8 ff1b 	bl	80005f8 <__aeabi_dmul>
 80077c2:	4602      	mov	r2, r0
 80077c4:	460b      	mov	r3, r1
 80077c6:	4640      	mov	r0, r8
 80077c8:	4649      	mov	r1, r9
 80077ca:	f7f8 fd5f 	bl	800028c <__adddf3>
 80077ce:	4602      	mov	r2, r0
 80077d0:	460b      	mov	r3, r1
 80077d2:	4610      	mov	r0, r2
 80077d4:	4619      	mov	r1, r3
 80077d6:	f04f 0200 	mov.w	r2, #0
 80077da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80077de:	f7f9 f835 	bl	800084c <__aeabi_ddiv>
 80077e2:	4602      	mov	r2, r0
 80077e4:	460b      	mov	r3, r1
 80077e6:	4620      	mov	r0, r4
 80077e8:	4629      	mov	r1, r5
 80077ea:	f7f8 fd4f 	bl	800028c <__adddf3>
 80077ee:	4603      	mov	r3, r0
 80077f0:	460c      	mov	r4, r1
 80077f2:	ec44 3b17 	vmov	d7, r3, r4
 80077f6:	eeb0 0a47 	vmov.f32	s0, s14
 80077fa:	eef0 0a67 	vmov.f32	s1, s15
 80077fe:	f012 f835 	bl	801986c <sqrt>
 8007802:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 8007806:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800780a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800780e:	f7f8 fd3b 	bl	8000288 <__aeabi_dsub>
 8007812:	4603      	mov	r3, r0
 8007814:	460c      	mov	r4, r1
 8007816:	4618      	mov	r0, r3
 8007818:	4621      	mov	r1, r4
 800781a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800781e:	f7f9 f815 	bl	800084c <__aeabi_ddiv>
 8007822:	4603      	mov	r3, r0
 8007824:	460c      	mov	r4, r1
 8007826:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 800782a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800782e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007832:	f7f8 fd29 	bl	8000288 <__aeabi_dsub>
 8007836:	4603      	mov	r3, r0
 8007838:	460c      	mov	r4, r1
 800783a:	4618      	mov	r0, r3
 800783c:	4621      	mov	r1, r4
 800783e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8007842:	f7f9 f803 	bl	800084c <__aeabi_ddiv>
 8007846:	4603      	mov	r3, r0
 8007848:	460c      	mov	r4, r1
 800784a:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= ta + td;
 800784e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007852:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8007856:	f7f8 fd19 	bl	800028c <__adddf3>
 800785a:	4603      	mov	r3, r0
 800785c:	460c      	mov	r4, r1
 800785e:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8007862:	e0e3      	b.n	8007a2c <scaraInitLSPB+0x6b4>
		 } else {
			 v_lim	= v_design;
 8007864:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8007868:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 800786c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007870:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007874:	f7f8 fd08 	bl	8000288 <__aeabi_dsub>
 8007878:	4603      	mov	r3, r0
 800787a:	460c      	mov	r4, r1
 800787c:	4618      	mov	r0, r3
 800787e:	4621      	mov	r1, r4
 8007880:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8007884:	f7f8 ffe2 	bl	800084c <__aeabi_ddiv>
 8007888:	4603      	mov	r3, r0
 800788a:	460c      	mov	r4, r1
 800788c:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8007890:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007894:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007898:	f7f8 fcf6 	bl	8000288 <__aeabi_dsub>
 800789c:	4603      	mov	r3, r0
 800789e:	460c      	mov	r4, r1
 80078a0:	4618      	mov	r0, r3
 80078a2:	4621      	mov	r1, r4
 80078a4:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80078a8:	f7f8 ffd0 	bl	800084c <__aeabi_ddiv>
 80078ac:	4603      	mov	r3, r0
 80078ae:	460c      	mov	r4, r1
 80078b0:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 80078b4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80078b8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80078bc:	f7f8 fce4 	bl	8000288 <__aeabi_dsub>
 80078c0:	4603      	mov	r3, r0
 80078c2:	460c      	mov	r4, r1
 80078c4:	4698      	mov	r8, r3
 80078c6:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 80078ca:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80078ce:	4640      	mov	r0, r8
 80078d0:	4649      	mov	r1, r9
 80078d2:	f7f8 ffbb 	bl	800084c <__aeabi_ddiv>
 80078d6:	4603      	mov	r3, r0
 80078d8:	460c      	mov	r4, r1
 80078da:	4625      	mov	r5, r4
 80078dc:	461c      	mov	r4, r3
 80078de:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80078e2:	4602      	mov	r2, r0
 80078e4:	460b      	mov	r3, r1
 80078e6:	f7f8 fcd1 	bl	800028c <__adddf3>
 80078ea:	4602      	mov	r2, r0
 80078ec:	460b      	mov	r3, r1
 80078ee:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80078f2:	f7f8 ffab 	bl	800084c <__aeabi_ddiv>
 80078f6:	4602      	mov	r2, r0
 80078f8:	460b      	mov	r3, r1
 80078fa:	4690      	mov	r8, r2
 80078fc:	4699      	mov	r9, r3
 80078fe:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8007902:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007906:	f7f8 ffa1 	bl	800084c <__aeabi_ddiv>
 800790a:	4602      	mov	r2, r0
 800790c:	460b      	mov	r3, r1
 800790e:	f04f 0000 	mov.w	r0, #0
 8007912:	497d      	ldr	r1, [pc, #500]	; (8007b08 <scaraInitLSPB+0x790>)
 8007914:	f7f8 fcb8 	bl	8000288 <__aeabi_dsub>
 8007918:	4602      	mov	r2, r0
 800791a:	460b      	mov	r3, r1
 800791c:	4640      	mov	r0, r8
 800791e:	4649      	mov	r1, r9
 8007920:	f7f8 fe6a 	bl	80005f8 <__aeabi_dmul>
 8007924:	4602      	mov	r2, r0
 8007926:	460b      	mov	r3, r1
 8007928:	4690      	mov	r8, r2
 800792a:	4699      	mov	r9, r3
 800792c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8007930:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007934:	f7f8 ff8a 	bl	800084c <__aeabi_ddiv>
 8007938:	4602      	mov	r2, r0
 800793a:	460b      	mov	r3, r1
 800793c:	f04f 0000 	mov.w	r0, #0
 8007940:	4971      	ldr	r1, [pc, #452]	; (8007b08 <scaraInitLSPB+0x790>)
 8007942:	f7f8 fca1 	bl	8000288 <__aeabi_dsub>
 8007946:	4602      	mov	r2, r0
 8007948:	460b      	mov	r3, r1
 800794a:	4640      	mov	r0, r8
 800794c:	4649      	mov	r1, r9
 800794e:	f7f8 fe53 	bl	80005f8 <__aeabi_dmul>
 8007952:	4602      	mov	r2, r0
 8007954:	460b      	mov	r3, r1
 8007956:	4620      	mov	r0, r4
 8007958:	4629      	mov	r1, r5
 800795a:	f7f8 fc97 	bl	800028c <__adddf3>
 800795e:	4603      	mov	r3, r0
 8007960:	460c      	mov	r4, r1
 8007962:	4625      	mov	r5, r4
 8007964:	461c      	mov	r4, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 8007966:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800796a:	4602      	mov	r2, r0
 800796c:	460b      	mov	r3, r1
 800796e:	f7f8 fc8d 	bl	800028c <__adddf3>
 8007972:	4602      	mov	r2, r0
 8007974:	460b      	mov	r3, r1
 8007976:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800797a:	f7f8 ff67 	bl	800084c <__aeabi_ddiv>
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	4690      	mov	r8, r2
 8007984:	4699      	mov	r9, r3
 8007986:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800798a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800798e:	f7f8 ff5d 	bl	800084c <__aeabi_ddiv>
 8007992:	4602      	mov	r2, r0
 8007994:	460b      	mov	r3, r1
 8007996:	f04f 0000 	mov.w	r0, #0
 800799a:	495b      	ldr	r1, [pc, #364]	; (8007b08 <scaraInitLSPB+0x790>)
 800799c:	f7f8 fc74 	bl	8000288 <__aeabi_dsub>
 80079a0:	4602      	mov	r2, r0
 80079a2:	460b      	mov	r3, r1
 80079a4:	4640      	mov	r0, r8
 80079a6:	4649      	mov	r1, r9
 80079a8:	f7f8 fe26 	bl	80005f8 <__aeabi_dmul>
 80079ac:	4602      	mov	r2, r0
 80079ae:	460b      	mov	r3, r1
 80079b0:	4690      	mov	r8, r2
 80079b2:	4699      	mov	r9, r3
 80079b4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80079b8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80079bc:	f7f8 ff46 	bl	800084c <__aeabi_ddiv>
 80079c0:	4602      	mov	r2, r0
 80079c2:	460b      	mov	r3, r1
 80079c4:	f04f 0000 	mov.w	r0, #0
 80079c8:	494f      	ldr	r1, [pc, #316]	; (8007b08 <scaraInitLSPB+0x790>)
 80079ca:	f7f8 fc5d 	bl	8000288 <__aeabi_dsub>
 80079ce:	4602      	mov	r2, r0
 80079d0:	460b      	mov	r3, r1
 80079d2:	4640      	mov	r0, r8
 80079d4:	4649      	mov	r1, r9
 80079d6:	f7f8 fe0f 	bl	80005f8 <__aeabi_dmul>
 80079da:	4602      	mov	r2, r0
 80079dc:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 80079de:	4620      	mov	r0, r4
 80079e0:	4629      	mov	r1, r5
 80079e2:	f7f8 fc53 	bl	800028c <__adddf3>
 80079e6:	4603      	mov	r3, r0
 80079e8:	460c      	mov	r4, r1
 80079ea:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80079ee:	e01d      	b.n	8007a2c <scaraInitLSPB+0x6b4>
		 }
	 } else {
		 v_lim	= 0;
 80079f0:	f04f 0300 	mov.w	r3, #0
 80079f4:	f04f 0400 	mov.w	r4, #0
 80079f8:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 ta = tf/2;
 80079fc:	f04f 0200 	mov.w	r2, #0
 8007a00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a04:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007a08:	f7f8 ff20 	bl	800084c <__aeabi_ddiv>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	460c      	mov	r4, r1
 8007a10:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
		 td = tf/2;
 8007a14:	f04f 0200 	mov.w	r2, #0
 8007a18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a1c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007a20:	f7f8 ff14 	bl	800084c <__aeabi_ddiv>
 8007a24:	4603      	mov	r3, r0
 8007a26:	460c      	mov	r4, r1
 8007a28:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8007a2c:	a334      	add	r3, pc, #208	; (adr r3, 8007b00 <scaraInitLSPB+0x788>)
 8007a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a32:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007a36:	f7f8 ff09 	bl	800084c <__aeabi_ddiv>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	460c      	mov	r4, r1
 8007a3e:	4618      	mov	r0, r3
 8007a40:	4621      	mov	r1, r4
 8007a42:	f7f9 f8d1 	bl	8000be8 <__aeabi_d2f>
 8007a46:	4603      	mov	r3, r0
 8007a48:	ee00 3a10 	vmov	s0, r3
 8007a4c:	f011 fecc 	bl	80197e8 <ceilf>
 8007a50:	eef0 7a40 	vmov.f32	s15, s0
 8007a54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a58:	ee17 3a90 	vmov	r3, s15
 8007a5c:	637b      	str	r3, [r7, #52]	; 0x34
	 // Init lspb params
	 lspb->dir= dir;
 8007a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a60:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8007a64:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 8007a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a68:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8007a6c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = q1;
 8007a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a72:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8007a76:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 8007a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a7c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8007a80:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 8007a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a86:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8007a8a:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 8007a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a90:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8007a94:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 8007a98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a9a:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8007a9e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 8007aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aa4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8007aa8:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_lim;
 8007aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aae:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8007ab2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = v0;
 8007ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ab8:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8007abc:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = v1;
 8007ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ac2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8007ac6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 8007aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007acc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ace:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 8007ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad8:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8007adc:	461a      	mov	r2, r3
 8007ade:	4623      	mov	r3, r4
 8007ae0:	f7f8 fbd2 	bl	8000288 <__aeabi_dsub>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	460c      	mov	r4, r1
 8007ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aea:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	37b4      	adds	r7, #180	; 0xb4
 8007af4:	46bd      	mov	sp, r7
 8007af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007afa:	bf00      	nop
 8007afc:	f3af 8000 	nop.w
 8007b00:	40000000 	.word	0x40000000
 8007b04:	3f847ae1 	.word	0x3f847ae1
 8007b08:	3ff00000 	.word	0x3ff00000
 8007b0c:	00000000 	.word	0x00000000
 8007b10:	405c2000 	.word	0x405c2000
 8007b14:	14000000 	.word	0x14000000
 8007b18:	4000f6f0 	.word	0x4000f6f0
 8007b1c:	6b259425 	.word	0x6b259425
 8007b20:	40069b91 	.word	0x40069b91
 8007b24:	d2f1a9fc 	.word	0xd2f1a9fc
 8007b28:	3f50624d 	.word	0x3f50624d
 8007b2c:	9abcaf48 	.word	0x9abcaf48
 8007b30:	3e7ad7f2 	.word	0x3e7ad7f2
 8007b34:	00000000 	.word	0x00000000

08007b38 <scaraInitScurve>:
SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8007b38:	b5b0      	push	{r4, r5, r7, lr}
 8007b3a:	b0ba      	sub	sp, #232	; 0xe8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	61f8      	str	r0, [r7, #28]
 8007b40:	460b      	mov	r3, r1
 8007b42:	ed87 0b04 	vstr	d0, [r7, #16]
 8007b46:	ed87 1b02 	vstr	d1, [r7, #8]
 8007b4a:	ed87 2b00 	vstr	d2, [r7]
 8007b4e:	76fb      	strb	r3, [r7, #27]
 8007b50:	4613      	mov	r3, r2
 8007b52:	76bb      	strb	r3, [r7, #26]
	 double v_design, a_design, q0, q1, v0, v1, v_lim, j_max, tm, tc, tf, dir;
	 double v_1, s_1, v_2, s_2, v_3, s_3, v_4, s_4;
	 uint32_t	 no_sample;
	 uint8_t	 no_phases;

	 if ( TRAJECTORY_3D == target) {
 8007b54:	7efb      	ldrb	r3, [r7, #27]
 8007b56:	2b04      	cmp	r3, #4
 8007b58:	d118      	bne.n	8007b8c <scaraInitScurve+0x54>
		 v_design = V_DESIGN_3D*v_factor;
 8007b5a:	f20f 4320 	addw	r3, pc, #1056	; 0x420
 8007b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b66:	f7f8 fd47 	bl	80005f8 <__aeabi_dmul>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_3D*a_factor;
 8007b72:	f20f 4308 	addw	r3, pc, #1032	; 0x408
 8007b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b7e:	f7f8 fd3b 	bl	80005f8 <__aeabi_dmul>
 8007b82:	4603      	mov	r3, r0
 8007b84:	460c      	mov	r4, r1
 8007b86:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007b8a:	e083      	b.n	8007c94 <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_ROLL == target) {
 8007b8c:	7efb      	ldrb	r3, [r7, #27]
 8007b8e:	2b05      	cmp	r3, #5
 8007b90:	d116      	bne.n	8007bc0 <scaraInitScurve+0x88>
		 v_design = V_DESIGN_ROLL*v_factor;
 8007b92:	a3fc      	add	r3, pc, #1008	; (adr r3, 8007f84 <scaraInitScurve+0x44c>)
 8007b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b9c:	f7f8 fd2c 	bl	80005f8 <__aeabi_dmul>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	460c      	mov	r4, r1
 8007ba4:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_ROLL*a_factor;
 8007ba8:	a3f6      	add	r3, pc, #984	; (adr r3, 8007f84 <scaraInitScurve+0x44c>)
 8007baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bb2:	f7f8 fd21 	bl	80005f8 <__aeabi_dmul>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	460c      	mov	r4, r1
 8007bba:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007bbe:	e069      	b.n	8007c94 <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J0 == target) {
 8007bc0:	7efb      	ldrb	r3, [r7, #27]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d116      	bne.n	8007bf4 <scaraInitScurve+0xbc>
		 v_design = V_DESIGN_J0*v_factor;
 8007bc6:	a3ef      	add	r3, pc, #956	; (adr r3, 8007f84 <scaraInitScurve+0x44c>)
 8007bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bcc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007bd0:	f7f8 fd12 	bl	80005f8 <__aeabi_dmul>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	460c      	mov	r4, r1
 8007bd8:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J0*a_factor;
 8007bdc:	a3e9      	add	r3, pc, #932	; (adr r3, 8007f84 <scaraInitScurve+0x44c>)
 8007bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007be6:	f7f8 fd07 	bl	80005f8 <__aeabi_dmul>
 8007bea:	4603      	mov	r3, r0
 8007bec:	460c      	mov	r4, r1
 8007bee:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007bf2:	e04f      	b.n	8007c94 <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J1 == target) {
 8007bf4:	7efb      	ldrb	r3, [r7, #27]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d116      	bne.n	8007c28 <scaraInitScurve+0xf0>
		 v_design = V_DESIGN_J1*v_factor;
 8007bfa:	a3e2      	add	r3, pc, #904	; (adr r3, 8007f84 <scaraInitScurve+0x44c>)
 8007bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c04:	f7f8 fcf8 	bl	80005f8 <__aeabi_dmul>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	460c      	mov	r4, r1
 8007c0c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J1*a_factor;
 8007c10:	a3dc      	add	r3, pc, #880	; (adr r3, 8007f84 <scaraInitScurve+0x44c>)
 8007c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c1a:	f7f8 fced 	bl	80005f8 <__aeabi_dmul>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	460c      	mov	r4, r1
 8007c22:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007c26:	e035      	b.n	8007c94 <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J2 == target) {
 8007c28:	7efb      	ldrb	r3, [r7, #27]
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d116      	bne.n	8007c5c <scaraInitScurve+0x124>
		 v_design = V_DESIGN_J2*v_factor;
 8007c2e:	a3d3      	add	r3, pc, #844	; (adr r3, 8007f7c <scaraInitScurve+0x444>)
 8007c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c38:	f7f8 fcde 	bl	80005f8 <__aeabi_dmul>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	460c      	mov	r4, r1
 8007c40:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J2*a_factor;
 8007c44:	a3cd      	add	r3, pc, #820	; (adr r3, 8007f7c <scaraInitScurve+0x444>)
 8007c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c4e:	f7f8 fcd3 	bl	80005f8 <__aeabi_dmul>
 8007c52:	4603      	mov	r3, r0
 8007c54:	460c      	mov	r4, r1
 8007c56:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007c5a:	e01b      	b.n	8007c94 <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J3 == target) {
 8007c5c:	7efb      	ldrb	r3, [r7, #27]
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	d116      	bne.n	8007c90 <scaraInitScurve+0x158>
		 v_design = V_DESIGN_J3*v_factor;
 8007c62:	a3ca      	add	r3, pc, #808	; (adr r3, 8007f8c <scaraInitScurve+0x454>)
 8007c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c6c:	f7f8 fcc4 	bl	80005f8 <__aeabi_dmul>
 8007c70:	4603      	mov	r3, r0
 8007c72:	460c      	mov	r4, r1
 8007c74:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J3*a_factor;
 8007c78:	a3c4      	add	r3, pc, #784	; (adr r3, 8007f8c <scaraInitScurve+0x454>)
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c82:	f7f8 fcb9 	bl	80005f8 <__aeabi_dmul>
 8007c86:	4603      	mov	r3, r0
 8007c88:	460c      	mov	r4, r1
 8007c8a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007c8e:	e001      	b.n	8007c94 <scaraInitScurve+0x15c>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8007c90:	2306      	movs	r3, #6
 8007c92:	e2c8      	b.n	8008226 <scaraInitScurve+0x6ee>
	 }

	 v0 = 0;
 8007c94:	f04f 0300 	mov.w	r3, #0
 8007c98:	f04f 0400 	mov.w	r4, #0
 8007c9c:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
	 v1 = 0;
 8007ca0:	f04f 0300 	mov.w	r3, #0
 8007ca4:	f04f 0400 	mov.w	r4, #0
 8007ca8:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 q0 = 0;
 8007cac:	f04f 0300 	mov.w	r3, #0
 8007cb0:	f04f 0400 	mov.w	r4, #0
 8007cb4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	 q1 = total_s;
 8007cb8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007cbc:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0

	 if ( total_s < 0) {
 8007cc0:	f04f 0200 	mov.w	r2, #0
 8007cc4:	f04f 0300 	mov.w	r3, #0
 8007cc8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007ccc:	f7f8 ff06 	bl	8000adc <__aeabi_dcmplt>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d015      	beq.n	8007d02 <scaraInitScurve+0x1ca>
		 dir = -1;
 8007cd6:	f04f 0300 	mov.w	r3, #0
 8007cda:	4ca5      	ldr	r4, [pc, #660]	; (8007f70 <scaraInitScurve+0x438>)
 8007cdc:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 q1 = -q1;
 8007ce0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007ce4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ce8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007cf0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		 total_s = -total_s;
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	613b      	str	r3, [r7, #16]
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007cfe:	617b      	str	r3, [r7, #20]
 8007d00:	e004      	b.n	8007d0c <scaraInitScurve+0x1d4>
	 } else {
		 dir = 1;
 8007d02:	f04f 0300 	mov.w	r3, #0
 8007d06:	4c9b      	ldr	r4, [pc, #620]	; (8007f74 <scaraInitScurve+0x43c>)
 8007d08:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
	 }


	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8007d0c:	7ebb      	ldrb	r3, [r7, #26]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	f040 8082 	bne.w	8007e18 <scaraInitScurve+0x2e0>
		 double t_upper, v_upper, a_upper;
		 tf = scurve->Tf;
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8007d1a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 // Avoid division by 0
		 if (tf > 0.001) {
 8007d1e:	a390      	add	r3, pc, #576	; (adr r3, 8007f60 <scaraInitScurve+0x428>)
 8007d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d24:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007d28:	f7f8 fef6 	bl	8000b18 <__aeabi_dcmpgt>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d066      	beq.n	8007e00 <scaraInitScurve+0x2c8>
			 // Assume 4 phase
			 t_upper = tf / 4;
 8007d32:	f04f 0200 	mov.w	r2, #0
 8007d36:	4b90      	ldr	r3, [pc, #576]	; (8007f78 <scaraInitScurve+0x440>)
 8007d38:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007d3c:	f7f8 fd86 	bl	800084c <__aeabi_ddiv>
 8007d40:	4603      	mov	r3, r0
 8007d42:	460c      	mov	r4, r1
 8007d44:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			 v_upper = total_s / (2*t_upper);
 8007d48:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	460b      	mov	r3, r1
 8007d50:	f7f8 fa9c 	bl	800028c <__adddf3>
 8007d54:	4603      	mov	r3, r0
 8007d56:	460c      	mov	r4, r1
 8007d58:	461a      	mov	r2, r3
 8007d5a:	4623      	mov	r3, r4
 8007d5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007d60:	f7f8 fd74 	bl	800084c <__aeabi_ddiv>
 8007d64:	4603      	mov	r3, r0
 8007d66:	460c      	mov	r4, r1
 8007d68:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			 // Check 4 phase --> 5 phase
			 if ( v_upper > v_design) {
 8007d6c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8007d70:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007d74:	f7f8 fed0 	bl	8000b18 <__aeabi_dcmpgt>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d022      	beq.n	8007dc4 <scaraInitScurve+0x28c>
				 t_upper = tf/2 - total_s/(2*v_design);
 8007d7e:	f04f 0200 	mov.w	r2, #0
 8007d82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d86:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007d8a:	f7f8 fd5f 	bl	800084c <__aeabi_ddiv>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	460c      	mov	r4, r1
 8007d92:	4625      	mov	r5, r4
 8007d94:	461c      	mov	r4, r3
 8007d96:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	f7f8 fa75 	bl	800028c <__adddf3>
 8007da2:	4602      	mov	r2, r0
 8007da4:	460b      	mov	r3, r1
 8007da6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007daa:	f7f8 fd4f 	bl	800084c <__aeabi_ddiv>
 8007dae:	4602      	mov	r2, r0
 8007db0:	460b      	mov	r3, r1
 8007db2:	4620      	mov	r0, r4
 8007db4:	4629      	mov	r1, r5
 8007db6:	f7f8 fa67 	bl	8000288 <__aeabi_dsub>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	460c      	mov	r4, r1
 8007dbe:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8007dc2:	e003      	b.n	8007dcc <scaraInitScurve+0x294>
			 } else {
				 v_design = v_upper;
 8007dc4:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8007dc8:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 }
			 a_upper  = v_design / t_upper;
 8007dcc:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8007dd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007dd4:	f7f8 fd3a 	bl	800084c <__aeabi_ddiv>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	460c      	mov	r4, r1
 8007ddc:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
			 if ( a_upper > a_design) {
 8007de0:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007de4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007de8:	f7f8 fe96 	bl	8000b18 <__aeabi_dcmpgt>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d001      	beq.n	8007df6 <scaraInitScurve+0x2be>
				 return SCARA_STATUS_ERROR_OVER_ACCEL;
 8007df2:	230a      	movs	r3, #10
 8007df4:	e217      	b.n	8008226 <scaraInitScurve+0x6ee>
			 } else {
				 a_design = a_upper;
 8007df6:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8007dfa:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007dfe:	e00b      	b.n	8007e18 <scaraInitScurve+0x2e0>
			 }
		 } else {
			 v_design = 0;
 8007e00:	f04f 0300 	mov.w	r3, #0
 8007e04:	f04f 0400 	mov.w	r4, #0
 8007e08:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 a_design = 0;
 8007e0c:	f04f 0300 	mov.w	r3, #0
 8007e10:	f04f 0400 	mov.w	r4, #0
 8007e14:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
		 }
	 }
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8007e18:	a353      	add	r3, pc, #332	; (adr r3, 8007f68 <scaraInitScurve+0x430>)
 8007e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007e22:	f7f8 fe79 	bl	8000b18 <__aeabi_dcmpgt>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 80b3 	beq.w	8007f94 <scaraInitScurve+0x45c>
 8007e2e:	a34e      	add	r3, pc, #312	; (adr r3, 8007f68 <scaraInitScurve+0x430>)
 8007e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007e38:	f7f8 fe6e 	bl	8000b18 <__aeabi_dcmpgt>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 80a8 	beq.w	8007f94 <scaraInitScurve+0x45c>
		 no_phases = 5;
 8007e44:	2305      	movs	r3, #5
 8007e46:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = v_design/a_design;
 8007e4a:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007e4e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007e52:	f7f8 fcfb 	bl	800084c <__aeabi_ddiv>
 8007e56:	4603      	mov	r3, r0
 8007e58:	460c      	mov	r4, r1
 8007e5a:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 tc = total_s/v_design - 2*tm;
 8007e5e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8007e62:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007e66:	f7f8 fcf1 	bl	800084c <__aeabi_ddiv>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	460c      	mov	r4, r1
 8007e6e:	4625      	mov	r5, r4
 8007e70:	461c      	mov	r4, r3
 8007e72:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007e76:	4602      	mov	r2, r0
 8007e78:	460b      	mov	r3, r1
 8007e7a:	f7f8 fa07 	bl	800028c <__adddf3>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	460b      	mov	r3, r1
 8007e82:	4620      	mov	r0, r4
 8007e84:	4629      	mov	r1, r5
 8007e86:	f7f8 f9ff 	bl	8000288 <__aeabi_dsub>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	460c      	mov	r4, r1
 8007e8e:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 // Check condition 5 phase ---> 4 phase
		 if (tc < 0.0) {
 8007e92:	f04f 0200 	mov.w	r2, #0
 8007e96:	f04f 0300 	mov.w	r3, #0
 8007e9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007e9e:	f7f8 fe1d 	bl	8000adc <__aeabi_dcmplt>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d022      	beq.n	8007eee <scaraInitScurve+0x3b6>
			 tc = 0;
 8007ea8:	f04f 0300 	mov.w	r3, #0
 8007eac:	f04f 0400 	mov.w	r4, #0
 8007eb0:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
			 no_phases = 4;
 8007eb4:	2304      	movs	r3, #4
 8007eb6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			 tm = sqrt(total_s/(2*a_design));
 8007eba:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	f7f8 f9e3 	bl	800028c <__adddf3>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	460c      	mov	r4, r1
 8007eca:	461a      	mov	r2, r3
 8007ecc:	4623      	mov	r3, r4
 8007ece:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007ed2:	f7f8 fcbb 	bl	800084c <__aeabi_ddiv>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	460c      	mov	r4, r1
 8007eda:	ec44 3b17 	vmov	d7, r3, r4
 8007ede:	eeb0 0a47 	vmov.f32	s0, s14
 8007ee2:	eef0 0a67 	vmov.f32	s1, s15
 8007ee6:	f011 fcc1 	bl	801986c <sqrt>
 8007eea:	ed87 0b2e 	vstr	d0, [r7, #184]	; 0xb8
		 }
		 if (tm < 0.001) {
 8007eee:	a31c      	add	r3, pc, #112	; (adr r3, 8007f60 <scaraInitScurve+0x428>)
 8007ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007ef8:	f7f8 fdf0 	bl	8000adc <__aeabi_dcmplt>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d006      	beq.n	8007f10 <scaraInitScurve+0x3d8>
			 j_max = 0;
 8007f02:	f04f 0300 	mov.w	r3, #0
 8007f06:	f04f 0400 	mov.w	r4, #0
 8007f0a:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
 8007f0e:	e009      	b.n	8007f24 <scaraInitScurve+0x3ec>
		 } else {
			 j_max = a_design/tm;
 8007f10:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007f14:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007f18:	f7f8 fc98 	bl	800084c <__aeabi_ddiv>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	460c      	mov	r4, r1
 8007f20:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 }
		 v_lim = a_design*tm;
 8007f24:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007f28:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007f2c:	f7f8 fb64 	bl	80005f8 <__aeabi_dmul>
 8007f30:	4603      	mov	r3, r0
 8007f32:	460c      	mov	r4, r1
 8007f34:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
		 tf    = 4*tm + tc;
 8007f38:	f04f 0200 	mov.w	r2, #0
 8007f3c:	4b0e      	ldr	r3, [pc, #56]	; (8007f78 <scaraInitScurve+0x440>)
 8007f3e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007f42:	f7f8 fb59 	bl	80005f8 <__aeabi_dmul>
 8007f46:	4603      	mov	r3, r0
 8007f48:	460c      	mov	r4, r1
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	4623      	mov	r3, r4
 8007f4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007f52:	f7f8 f99b 	bl	800028c <__adddf3>
 8007f56:	4603      	mov	r3, r0
 8007f58:	460c      	mov	r4, r1
 8007f5a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 8007f5e:	e039      	b.n	8007fd4 <scaraInitScurve+0x49c>
 8007f60:	d2f1a9fc 	.word	0xd2f1a9fc
 8007f64:	3f50624d 	.word	0x3f50624d
 8007f68:	9abcaf48 	.word	0x9abcaf48
 8007f6c:	3e7ad7f2 	.word	0x3e7ad7f2
 8007f70:	bff00000 	.word	0xbff00000
 8007f74:	3ff00000 	.word	0x3ff00000
 8007f78:	40100000 	.word	0x40100000
 8007f7c:	00000000 	.word	0x00000000
 8007f80:	405c2000 	.word	0x405c2000
 8007f84:	14000000 	.word	0x14000000
 8007f88:	4000f6f0 	.word	0x4000f6f0
 8007f8c:	6b259425 	.word	0x6b259425
 8007f90:	40069b91 	.word	0x40069b91
	 } else {
		 j_max = 0;
 8007f94:	f04f 0300 	mov.w	r3, #0
 8007f98:	f04f 0400 	mov.w	r4, #0
 8007f9c:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 tc = 0;
 8007fa0:	f04f 0300 	mov.w	r3, #0
 8007fa4:	f04f 0400 	mov.w	r4, #0
 8007fa8:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 no_phases = 4;
 8007fac:	2304      	movs	r3, #4
 8007fae:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = tf / 4;
 8007fb2:	f04f 0200 	mov.w	r2, #0
 8007fb6:	4ba0      	ldr	r3, [pc, #640]	; (8008238 <scaraInitScurve+0x700>)
 8007fb8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007fbc:	f7f8 fc46 	bl	800084c <__aeabi_ddiv>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	460c      	mov	r4, r1
 8007fc4:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 v_lim = 0;
 8007fc8:	f04f 0300 	mov.w	r3, #0
 8007fcc:	f04f 0400 	mov.w	r4, #0
 8007fd0:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	 }

	 no_sample = ceil(tf / T_SAMPLING);
 8007fd4:	a396      	add	r3, pc, #600	; (adr r3, 8008230 <scaraInitScurve+0x6f8>)
 8007fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fda:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007fde:	f7f8 fc35 	bl	800084c <__aeabi_ddiv>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	460c      	mov	r4, r1
 8007fe6:	ec44 3b17 	vmov	d7, r3, r4
 8007fea:	eeb0 0a47 	vmov.f32	s0, s14
 8007fee:	eef0 0a67 	vmov.f32	s1, s15
 8007ff2:	f011 faa1 	bl	8019538 <ceil>
 8007ff6:	ec54 3b10 	vmov	r3, r4, d0
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	4621      	mov	r1, r4
 8007ffe:	f7f8 fdd3 	bl	8000ba8 <__aeabi_d2uiz>
 8008002:	4603      	mov	r3, r0
 8008004:	667b      	str	r3, [r7, #100]	; 0x64
	 v_1 = 0.5*j_max*tm*tm;
 8008006:	f04f 0200 	mov.w	r2, #0
 800800a:	4b8c      	ldr	r3, [pc, #560]	; (800823c <scaraInitScurve+0x704>)
 800800c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8008010:	f7f8 faf2 	bl	80005f8 <__aeabi_dmul>
 8008014:	4603      	mov	r3, r0
 8008016:	460c      	mov	r4, r1
 8008018:	4618      	mov	r0, r3
 800801a:	4621      	mov	r1, r4
 800801c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8008020:	f7f8 faea 	bl	80005f8 <__aeabi_dmul>
 8008024:	4603      	mov	r3, r0
 8008026:	460c      	mov	r4, r1
 8008028:	461a      	mov	r2, r3
 800802a:	4623      	mov	r3, r4
 800802c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008030:	f7f8 fae2 	bl	80005f8 <__aeabi_dmul>
 8008034:	4603      	mov	r3, r0
 8008036:	460c      	mov	r4, r1
 8008038:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 s_1 = j_max*tm*tm*tm/6;
 800803c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8008040:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8008044:	f7f8 fad8 	bl	80005f8 <__aeabi_dmul>
 8008048:	4603      	mov	r3, r0
 800804a:	460c      	mov	r4, r1
 800804c:	4618      	mov	r0, r3
 800804e:	4621      	mov	r1, r4
 8008050:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8008054:	f7f8 fad0 	bl	80005f8 <__aeabi_dmul>
 8008058:	4603      	mov	r3, r0
 800805a:	460c      	mov	r4, r1
 800805c:	4618      	mov	r0, r3
 800805e:	4621      	mov	r1, r4
 8008060:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8008064:	f7f8 fac8 	bl	80005f8 <__aeabi_dmul>
 8008068:	4603      	mov	r3, r0
 800806a:	460c      	mov	r4, r1
 800806c:	4618      	mov	r0, r3
 800806e:	4621      	mov	r1, r4
 8008070:	f04f 0200 	mov.w	r2, #0
 8008074:	4b72      	ldr	r3, [pc, #456]	; (8008240 <scaraInitScurve+0x708>)
 8008076:	f7f8 fbe9 	bl	800084c <__aeabi_ddiv>
 800807a:	4603      	mov	r3, r0
 800807c:	460c      	mov	r4, r1
 800807e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	 v_2 = j_max*tm*tm;
 8008082:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8008086:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800808a:	f7f8 fab5 	bl	80005f8 <__aeabi_dmul>
 800808e:	4603      	mov	r3, r0
 8008090:	460c      	mov	r4, r1
 8008092:	461a      	mov	r2, r3
 8008094:	4623      	mov	r3, r4
 8008096:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800809a:	f7f8 faad 	bl	80005f8 <__aeabi_dmul>
 800809e:	4603      	mov	r3, r0
 80080a0:	460c      	mov	r4, r1
 80080a2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	 s_2 = v_2*tm;
 80080a6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80080aa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80080ae:	f7f8 faa3 	bl	80005f8 <__aeabi_dmul>
 80080b2:	4603      	mov	r3, r0
 80080b4:	460c      	mov	r4, r1
 80080b6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	 v_3 = v_2;
 80080ba:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80080be:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	 s_3 = s_2 + v_2*tc;
 80080c2:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80080c6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80080ca:	f7f8 fa95 	bl	80005f8 <__aeabi_dmul>
 80080ce:	4603      	mov	r3, r0
 80080d0:	460c      	mov	r4, r1
 80080d2:	461a      	mov	r2, r3
 80080d4:	4623      	mov	r3, r4
 80080d6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80080da:	f7f8 f8d7 	bl	800028c <__adddf3>
 80080de:	4603      	mov	r3, r0
 80080e0:	460c      	mov	r4, r1
 80080e2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	 v_4 = v_1;
 80080e6:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80080ea:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	 s_4 = s_3 + s_2 - s_1;
 80080ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80080f2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80080f6:	f7f8 f8c9 	bl	800028c <__adddf3>
 80080fa:	4603      	mov	r3, r0
 80080fc:	460c      	mov	r4, r1
 80080fe:	4618      	mov	r0, r3
 8008100:	4621      	mov	r1, r4
 8008102:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008106:	f7f8 f8bf 	bl	8000288 <__aeabi_dsub>
 800810a:	4603      	mov	r3, r0
 800810c:	460c      	mov	r4, r1
 800810e:	e9c7 3408 	strd	r3, r4, [r7, #32]

	 scurve->Tc = tc;
 8008112:	69fa      	ldr	r2, [r7, #28]
 8008114:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8008118:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	 scurve->Tf = tf;
 800811c:	69fa      	ldr	r2, [r7, #28]
 800811e:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8008122:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	 scurve->Tm = tm;
 8008126:	69fa      	ldr	r2, [r7, #28]
 8008128:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800812c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 scurve->a_design = a_design;
 8008130:	69fa      	ldr	r2, [r7, #28]
 8008132:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8008136:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 scurve->v_design = v_design;
 800813a:	69fa      	ldr	r2, [r7, #28]
 800813c:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8008140:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 scurve->v_lim = v_lim;
 8008144:	69fa      	ldr	r2, [r7, #28]
 8008146:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800814a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 scurve->v0 = v0;
 800814e:	69fa      	ldr	r2, [r7, #28]
 8008150:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8008154:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 scurve->v1 = v1;
 8008158:	69fa      	ldr	r2, [r7, #28]
 800815a:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800815e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 scurve->j_max = j_max;
 8008162:	69fa      	ldr	r2, [r7, #28]
 8008164:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8008168:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 scurve->s0   = q0;
 800816c:	69fa      	ldr	r2, [r7, #28]
 800816e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8008172:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 scurve->s1   = q1;
 8008176:	69fa      	ldr	r2, [r7, #28]
 8008178:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800817c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 scurve->num_of_phase = no_phases;
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8008186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	 scurve->num_of_sampling = no_sample;
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800818e:	669a      	str	r2, [r3, #104]	; 0x68
	 scurve->total_s = total_s;
 8008190:	69fa      	ldr	r2, [r7, #28]
 8008192:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008196:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	 scurve->dir = dir;
 800819a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800819e:	f7f8 fcdb 	bl	8000b58 <__aeabi_d2iz>
 80081a2:	4603      	mov	r3, r0
 80081a4:	b25a      	sxtb	r2, r3
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	701a      	strb	r2, [r3, #0]

	 scurve->a_current = 0;
 80081aa:	69fa      	ldr	r2, [r7, #28]
 80081ac:	f04f 0300 	mov.w	r3, #0
 80081b0:	f04f 0400 	mov.w	r4, #0
 80081b4:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	 scurve->v_current = 0;
 80081b8:	69fa      	ldr	r2, [r7, #28]
 80081ba:	f04f 0300 	mov.w	r3, #0
 80081be:	f04f 0400 	mov.w	r4, #0
 80081c2:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	 scurve->s_current = 0;
 80081c6:	69fa      	ldr	r2, [r7, #28]
 80081c8:	f04f 0300 	mov.w	r3, #0
 80081cc:	f04f 0400 	mov.w	r4, #0
 80081d0:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	 scurve->v_1 = v_1;
 80081d4:	69fa      	ldr	r2, [r7, #28]
 80081d6:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80081da:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	 scurve->v_2 = v_2;
 80081de:	69fa      	ldr	r2, [r7, #28]
 80081e0:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80081e4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	 scurve->v_3 = v_3;
 80081e8:	69fa      	ldr	r2, [r7, #28]
 80081ea:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80081ee:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	 scurve->v_4 = v_4;
 80081f2:	69fa      	ldr	r2, [r7, #28]
 80081f4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80081f8:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
	 scurve->s_1 = s_1;
 80081fc:	69fa      	ldr	r2, [r7, #28]
 80081fe:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8008202:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	 scurve->s_2 = s_2;
 8008206:	69fa      	ldr	r2, [r7, #28]
 8008208:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800820c:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	 scurve->s_3 = s_3;
 8008210:	69fa      	ldr	r2, [r7, #28]
 8008212:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8008216:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	 scurve->s_4 = s_4;
 800821a:	69fa      	ldr	r2, [r7, #28]
 800821c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008220:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

	 return SCARA_STATUS_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	37e8      	adds	r7, #232	; 0xe8
 800822a:	46bd      	mov	sp, r7
 800822c:	bdb0      	pop	{r4, r5, r7, pc}
 800822e:	bf00      	nop
 8008230:	40000000 	.word	0x40000000
 8008234:	3f847ae1 	.word	0x3f847ae1
 8008238:	40100000 	.word	0x40100000
 800823c:	3fe00000 	.word	0x3fe00000
 8008240:	40180000 	.word	0x40180000

08008244 <scaraFlowDuty>:
}

/* Compute new x, y , z, theta1, theta2 , d3, theta4 corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 8008244:	b082      	sub	sp, #8
 8008246:	b5b0      	push	{r4, r5, r7, lr}
 8008248:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800824c:	af2e      	add	r7, sp, #184	; 0xb8
 800824e:	f107 0108 	add.w	r1, r7, #8
 8008252:	ed81 0b00 	vstr	d0, [r1]
 8008256:	1d39      	adds	r1, r7, #4
 8008258:	6008      	str	r0, [r1, #0]
 800825a:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 800825e:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 8008262:	f107 0210 	add.w	r2, r7, #16
 8008266:	f107 0308 	add.w	r3, r7, #8
 800826a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800826e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 8008272:	4ba9      	ldr	r3, [pc, #676]	; (8008518 <scaraFlowDuty+0x2d4>)
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	f040 815a 	bne.w	8008530 <scaraFlowDuty+0x2ec>
		double s, angle, x, y, z, v, v_angle;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 800827c:	4ba6      	ldr	r3, [pc, #664]	; (8008518 <scaraFlowDuty+0x2d4>)
 800827e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8008282:	2b00      	cmp	r3, #0
 8008284:	d12b      	bne.n	80082de <scaraFlowDuty+0x9a>
//			s = myDUTY.task.trajectory_3d.lspb.s_current;
//			v = myDUTY.task.trajectory_3d.lspb.v_current;
//			angle = myDUTY.task.trajectory_roll.lspb.s_current;
//			v_angle = myDUTY.task.trajectory_roll.lspb.v_current;
//			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
			status1 = scaraFlowLSPB1(&(myDUTY.task.trajectory_3d.lspb), time);
 8008286:	f107 0308 	add.w	r3, r7, #8
 800828a:	ed93 0b00 	vldr	d0, [r3]
 800828e:	48a3      	ldr	r0, [pc, #652]	; (800851c <scaraFlowDuty+0x2d8>)
 8008290:	f000 fc72 	bl	8008b78 <scaraFlowLSPB1>
 8008294:	4603      	mov	r3, r0
 8008296:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 800829a:	4b9f      	ldr	r3, [pc, #636]	; (8008518 <scaraFlowDuty+0x2d4>)
 800829c:	e9d3 3462 	ldrd	r3, r4, [r3, #392]	; 0x188
 80082a0:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 80082a4:	4b9c      	ldr	r3, [pc, #624]	; (8008518 <scaraFlowDuty+0x2d4>)
 80082a6:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
 80082aa:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 80082ae:	4b9a      	ldr	r3, [pc, #616]	; (8008518 <scaraFlowDuty+0x2d4>)
 80082b0:	e9d3 34fc 	ldrd	r3, r4, [r3, #1008]	; 0x3f0
 80082b4:	f107 0108 	add.w	r1, r7, #8
 80082b8:	461a      	mov	r2, r3
 80082ba:	4623      	mov	r3, r4
 80082bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082c0:	f7f8 f99a 	bl	80005f8 <__aeabi_dmul>
 80082c4:	4603      	mov	r3, r0
 80082c6:	460c      	mov	r4, r1
 80082c8:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 80082cc:	4b92      	ldr	r3, [pc, #584]	; (8008518 <scaraFlowDuty+0x2d4>)
 80082ce:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 80082d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			status2 = SCARA_STATUS_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 80082dc:	e063      	b.n	80083a6 <scaraFlowDuty+0x162>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 80082de:	4b8e      	ldr	r3, [pc, #568]	; (8008518 <scaraFlowDuty+0x2d4>)
 80082e0:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d12d      	bne.n	8008344 <scaraFlowDuty+0x100>
			status1 = scaraFLowScurve(&(myDUTY.task.trajectory_3d.scurve), time);
 80082e8:	f107 0308 	add.w	r3, r7, #8
 80082ec:	ed93 0b00 	vldr	d0, [r3]
 80082f0:	488b      	ldr	r0, [pc, #556]	; (8008520 <scaraFlowDuty+0x2dc>)
 80082f2:	f000 ff8b 	bl	800920c <scaraFLowScurve>
 80082f6:	4603      	mov	r3, r0
 80082f8:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFLowScurve(&(myDUTY.task.trajectory_roll.scurve), time);
 80082fc:	f107 0308 	add.w	r3, r7, #8
 8008300:	ed93 0b00 	vldr	d0, [r3]
 8008304:	4887      	ldr	r0, [pc, #540]	; (8008524 <scaraFlowDuty+0x2e0>)
 8008306:	f000 ff81 	bl	800920c <scaraFLowScurve>
 800830a:	4603      	mov	r3, r0
 800830c:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 8008310:	4b81      	ldr	r3, [pc, #516]	; (8008518 <scaraFlowDuty+0x2d4>)
 8008312:	e9d3 3498 	ldrd	r3, r4, [r3, #608]	; 0x260
 8008316:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			v = myDUTY.task.trajectory_3d.scurve.v_current;
 800831a:	4b7f      	ldr	r3, [pc, #508]	; (8008518 <scaraFlowDuty+0x2d4>)
 800831c:	e9d3 3496 	ldrd	r3, r4, [r3, #600]	; 0x258
 8008320:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			angle = myDUTY.task.trajectory_roll.scurve.s_current;
 8008324:	4b7c      	ldr	r3, [pc, #496]	; (8008518 <scaraFlowDuty+0x2d4>)
 8008326:	e9d3 34f8 	ldrd	r3, r4, [r3, #992]	; 0x3e0
 800832a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			v_angle = myDUTY.task.trajectory_roll.scurve.v_current;
 800832e:	4b7a      	ldr	r3, [pc, #488]	; (8008518 <scaraFlowDuty+0x2d4>)
 8008330:	e9d3 34f6 	ldrd	r3, r4, [r3, #984]	; 0x3d8
 8008334:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			dir_roll = myDUTY.task.trajectory_roll.scurve.dir;
 8008338:	4b77      	ldr	r3, [pc, #476]	; (8008518 <scaraFlowDuty+0x2d4>)
 800833a:	f893 3318 	ldrb.w	r3, [r3, #792]	; 0x318
 800833e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8008342:	e030      	b.n	80083a6 <scaraFlowDuty+0x162>
		}else if( DUTY_TRAJECTORY_LINEAR == myDUTY.task.trajectory_3d.trajectory_type){
 8008344:	4b74      	ldr	r3, [pc, #464]	; (8008518 <scaraFlowDuty+0x2d4>)
 8008346:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800834a:	2b02      	cmp	r3, #2
 800834c:	d129      	bne.n	80083a2 <scaraFlowDuty+0x15e>
			s = time*myDUTY.task.trajectory_3d.linear.constant_v;
 800834e:	4b72      	ldr	r3, [pc, #456]	; (8008518 <scaraFlowDuty+0x2d4>)
 8008350:	e9d3 349c 	ldrd	r3, r4, [r3, #624]	; 0x270
 8008354:	f107 0108 	add.w	r1, r7, #8
 8008358:	461a      	mov	r2, r3
 800835a:	4623      	mov	r3, r4
 800835c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008360:	f7f8 f94a 	bl	80005f8 <__aeabi_dmul>
 8008364:	4603      	mov	r3, r0
 8008366:	460c      	mov	r4, r1
 8008368:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 800836c:	4b6a      	ldr	r3, [pc, #424]	; (8008518 <scaraFlowDuty+0x2d4>)
 800836e:	e9d3 34fc 	ldrd	r3, r4, [r3, #1008]	; 0x3f0
 8008372:	f107 0108 	add.w	r1, r7, #8
 8008376:	461a      	mov	r2, r3
 8008378:	4623      	mov	r3, r4
 800837a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800837e:	f7f8 f93b 	bl	80005f8 <__aeabi_dmul>
 8008382:	4603      	mov	r3, r0
 8008384:	460c      	mov	r4, r1
 8008386:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 800838a:	4b63      	ldr	r3, [pc, #396]	; (8008518 <scaraFlowDuty+0x2d4>)
 800838c:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8008390:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			status1 = SCARA_STATUS_OK;
 8008394:	2300      	movs	r3, #0
 8008396:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 80083a0:	e001      	b.n	80083a6 <scaraFlowDuty+0x162>
		}else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 80083a2:	2305      	movs	r3, #5
 80083a4:	e2cd      	b.n	8008942 <scaraFlowDuty+0x6fe>
		}

		if ( SCARA_STATUS_OK != status1) {
 80083a6:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d002      	beq.n	80083b4 <scaraFlowDuty+0x170>
			return status1;
 80083ae:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 80083b2:	e2c6      	b.n	8008942 <scaraFlowDuty+0x6fe>
		}
		if ( SCARA_STATUS_OK != status2) {
 80083b4:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d002      	beq.n	80083c2 <scaraFlowDuty+0x17e>
			return status2;
 80083bc:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 80083c0:	e2bf      	b.n	8008942 <scaraFlowDuty+0x6fe>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 80083c2:	4b55      	ldr	r3, [pc, #340]	; (8008518 <scaraFlowDuty+0x2d4>)
 80083c4:	7a1b      	ldrb	r3, [r3, #8]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d117      	bne.n	80083fa <scaraFlowDuty+0x1b6>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 80083ca:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 80083ce:	4856      	ldr	r0, [pc, #344]	; (8008528 <scaraFlowDuty+0x2e4>)
 80083d0:	f000 fac2 	bl	8008958 <scaraFlowLine>
 80083d4:	4603      	mov	r3, r0
 80083d6:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.line.x_current;
 80083da:	4b4f      	ldr	r3, [pc, #316]	; (8008518 <scaraFlowDuty+0x2d4>)
 80083dc:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 80083e0:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			y = myDUTY.task.path.line.y_current;
 80083e4:	4b4c      	ldr	r3, [pc, #304]	; (8008518 <scaraFlowDuty+0x2d4>)
 80083e6:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80083ea:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			z = myDUTY.task.path.line.z_current;
 80083ee:	4b4a      	ldr	r3, [pc, #296]	; (8008518 <scaraFlowDuty+0x2d4>)
 80083f0:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 80083f4:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 80083f8:	e01d      	b.n	8008436 <scaraFlowDuty+0x1f2>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 80083fa:	4b47      	ldr	r3, [pc, #284]	; (8008518 <scaraFlowDuty+0x2d4>)
 80083fc:	7a1b      	ldrb	r3, [r3, #8]
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d117      	bne.n	8008432 <scaraFlowDuty+0x1ee>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 8008402:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 8008406:	4849      	ldr	r0, [pc, #292]	; (800852c <scaraFlowDuty+0x2e8>)
 8008408:	f000 fb2e 	bl	8008a68 <scaraFlowCircle>
 800840c:	4603      	mov	r3, r0
 800840e:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.circle.x_current;
 8008412:	4b41      	ldr	r3, [pc, #260]	; (8008518 <scaraFlowDuty+0x2d4>)
 8008414:	e9d3 343e 	ldrd	r3, r4, [r3, #248]	; 0xf8
 8008418:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			y = myDUTY.task.path.circle.y_current;
 800841c:	4b3e      	ldr	r3, [pc, #248]	; (8008518 <scaraFlowDuty+0x2d4>)
 800841e:	e9d3 3440 	ldrd	r3, r4, [r3, #256]	; 0x100
 8008422:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			z = myDUTY.task.path.circle.z_current;
 8008426:	4b3c      	ldr	r3, [pc, #240]	; (8008518 <scaraFlowDuty+0x2d4>)
 8008428:	e9d3 3442 	ldrd	r3, r4, [r3, #264]	; 0x108
 800842c:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 8008430:	e001      	b.n	8008436 <scaraFlowDuty+0x1f2>
		} else {
			return SCARA_STATUS_ERROR_TASK;
 8008432:	2303      	movs	r3, #3
 8008434:	e285      	b.n	8008942 <scaraFlowDuty+0x6fe>
		}

		positionCompute.x 		= x;
 8008436:	f107 0210 	add.w	r2, r7, #16
 800843a:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800843e:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
		positionCompute.y		= y;
 8008442:	f107 0210 	add.w	r2, r7, #16
 8008446:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800844a:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		positionCompute.z 		= z;
 800844e:	f107 0210 	add.w	r2, r7, #16
 8008452:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8008456:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 800845a:	4b2f      	ldr	r3, [pc, #188]	; (8008518 <scaraFlowDuty+0x2d4>)
 800845c:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8008460:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008464:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8008468:	4618      	mov	r0, r3
 800846a:	f7f8 f85b 	bl	8000524 <__aeabi_i2d>
 800846e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8008472:	f7f8 f8c1 	bl	80005f8 <__aeabi_dmul>
 8008476:	4602      	mov	r2, r0
 8008478:	460b      	mov	r3, r1
 800847a:	4620      	mov	r0, r4
 800847c:	4629      	mov	r1, r5
 800847e:	f7f7 ff05 	bl	800028c <__adddf3>
 8008482:	4603      	mov	r3, r0
 8008484:	460c      	mov	r4, r1
 8008486:	f107 0210 	add.w	r2, r7, #16
 800848a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

		positionCompute.q		= s;
 800848e:	f107 0210 	add.w	r2, r7, #16
 8008492:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8008496:	e9c2 3400 	strd	r3, r4, [r2]
		positionCompute.q_roll  = angle;
 800849a:	f107 0210 	add.w	r2, r7, #16
 800849e:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 80084a2:	e9c2 3402 	strd	r3, r4, [r2, #8]

		positionCompute.v_3d    = v;
 80084a6:	f107 0210 	add.w	r2, r7, #16
 80084aa:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 80084ae:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 80084b2:	f107 0210 	add.w	r2, r7, #16
 80084b6:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80084ba:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 80084be:	4b16      	ldr	r3, [pc, #88]	; (8008518 <scaraFlowDuty+0x2d4>)
 80084c0:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80084c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80084c8:	f107 0210 	add.w	r2, r7, #16
 80084cc:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 80084d0:	f107 0210 	add.w	r2, r7, #16
 80084d4:	f107 0308 	add.w	r3, r7, #8
 80084d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80084dc:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 80084e0:	f107 0410 	add.w	r4, r7, #16
 80084e4:	4668      	mov	r0, sp
 80084e6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80084ea:	22b8      	movs	r2, #184	; 0xb8
 80084ec:	4619      	mov	r1, r3
 80084ee:	f00d fab5 	bl	8015a5c <memcpy>
 80084f2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80084f6:	cb0c      	ldmia	r3, {r2, r3}
 80084f8:	4620      	mov	r0, r4
 80084fa:	f7fb fbc5 	bl	8003c88 <kinematicInverse>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d101      	bne.n	8008508 <scaraFlowDuty+0x2c4>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008504:	2307      	movs	r3, #7
 8008506:	e21c      	b.n	8008942 <scaraFlowDuty+0x6fe>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8008508:	f107 0110 	add.w	r1, r7, #16
 800850c:	1d3b      	adds	r3, r7, #4
 800850e:	22c0      	movs	r2, #192	; 0xc0
 8008510:	6818      	ldr	r0, [r3, #0]
 8008512:	f00d faa3 	bl	8015a5c <memcpy>
 8008516:	e213      	b.n	8008940 <scaraFlowDuty+0x6fc>
 8008518:	20005af8 	.word	0x20005af8
 800851c:	20005c10 	.word	0x20005c10
 8008520:	20005c90 	.word	0x20005c90
 8008524:	20005e10 	.word	0x20005e10
 8008528:	20005b08 	.word	0x20005b08
 800852c:	20005b78 	.word	0x20005b78
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 8008530:	4b8b      	ldr	r3, [pc, #556]	; (8008760 <scaraFlowDuty+0x51c>)
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	2b01      	cmp	r3, #1
 8008536:	f040 8201 	bne.w	800893c <scaraFlowDuty+0x6f8>
		double s0, s1, s2, s3;
		double v0, v1, v2, v3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 800853a:	4b89      	ldr	r3, [pc, #548]	; (8008760 <scaraFlowDuty+0x51c>)
 800853c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008540:	2b00      	cmp	r3, #0
 8008542:	d174      	bne.n	800862e <scaraFlowDuty+0x3ea>
			status1 = scaraFlowLSPB(&(myDUTY.joint.trajectory[0].lspb), time);
 8008544:	f107 0308 	add.w	r3, r7, #8
 8008548:	ed93 0b00 	vldr	d0, [r3]
 800854c:	4885      	ldr	r0, [pc, #532]	; (8008764 <scaraFlowDuty+0x520>)
 800854e:	f000 fcb1 	bl	8008eb4 <scaraFlowLSPB>
 8008552:	4603      	mov	r3, r0
 8008554:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFlowLSPB(&(myDUTY.joint.trajectory[1].lspb), time);
 8008558:	f107 0308 	add.w	r3, r7, #8
 800855c:	ed93 0b00 	vldr	d0, [r3]
 8008560:	4881      	ldr	r0, [pc, #516]	; (8008768 <scaraFlowDuty+0x524>)
 8008562:	f000 fca7 	bl	8008eb4 <scaraFlowLSPB>
 8008566:	4603      	mov	r3, r0
 8008568:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFlowLSPB(&(myDUTY.joint.trajectory[2].lspb), time);
 800856c:	f107 0308 	add.w	r3, r7, #8
 8008570:	ed93 0b00 	vldr	d0, [r3]
 8008574:	487d      	ldr	r0, [pc, #500]	; (800876c <scaraFlowDuty+0x528>)
 8008576:	f000 fc9d 	bl	8008eb4 <scaraFlowLSPB>
 800857a:	4603      	mov	r3, r0
 800857c:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFlowLSPB(&(myDUTY.joint.trajectory[3].lspb), time);
 8008580:	f107 0308 	add.w	r3, r7, #8
 8008584:	ed93 0b00 	vldr	d0, [r3]
 8008588:	4879      	ldr	r0, [pc, #484]	; (8008770 <scaraFlowDuty+0x52c>)
 800858a:	f000 fc93 	bl	8008eb4 <scaraFlowLSPB>
 800858e:	4603      	mov	r3, r0
 8008590:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 8008594:	4b72      	ldr	r3, [pc, #456]	; (8008760 <scaraFlowDuty+0x51c>)
 8008596:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800859a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 800859e:	4b70      	ldr	r3, [pc, #448]	; (8008760 <scaraFlowDuty+0x51c>)
 80085a0:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 80085a4:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 80085a8:	4b6d      	ldr	r3, [pc, #436]	; (8008760 <scaraFlowDuty+0x51c>)
 80085aa:	f893 3720 	ldrb.w	r3, [r3, #1824]	; 0x720
 80085ae:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 80085b2:	4b6b      	ldr	r3, [pc, #428]	; (8008760 <scaraFlowDuty+0x51c>)
 80085b4:	f893 38a0 	ldrb.w	r3, [r3, #2208]	; 0x8a0
 80085b8:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 80085bc:	4b68      	ldr	r3, [pc, #416]	; (8008760 <scaraFlowDuty+0x51c>)
 80085be:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80085c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80085c6:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 80085ca:	4b65      	ldr	r3, [pc, #404]	; (8008760 <scaraFlowDuty+0x51c>)
 80085cc:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 80085d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80085d4:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 80085d8:	4b61      	ldr	r3, [pc, #388]	; (8008760 <scaraFlowDuty+0x51c>)
 80085da:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 80085de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80085e2:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 80085e6:	4b5e      	ldr	r3, [pc, #376]	; (8008760 <scaraFlowDuty+0x51c>)
 80085e8:	f603 1318 	addw	r3, r3, #2328	; 0x918
 80085ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80085f0:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 80085f4:	4b5a      	ldr	r3, [pc, #360]	; (8008760 <scaraFlowDuty+0x51c>)
 80085f6:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80085fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80085fe:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 8008602:	4b57      	ldr	r3, [pc, #348]	; (8008760 <scaraFlowDuty+0x51c>)
 8008604:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8008608:	e9d3 3400 	ldrd	r3, r4, [r3]
 800860c:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 8008610:	4b53      	ldr	r3, [pc, #332]	; (8008760 <scaraFlowDuty+0x51c>)
 8008612:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8008616:	e9d3 3400 	ldrd	r3, r4, [r3]
 800861a:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 800861e:	4b50      	ldr	r3, [pc, #320]	; (8008760 <scaraFlowDuty+0x51c>)
 8008620:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8008624:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008628:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 800862c:	e07b      	b.n	8008726 <scaraFlowDuty+0x4e2>

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 800862e:	4b4c      	ldr	r3, [pc, #304]	; (8008760 <scaraFlowDuty+0x51c>)
 8008630:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008634:	2b01      	cmp	r3, #1
 8008636:	d174      	bne.n	8008722 <scaraFlowDuty+0x4de>
			status1 = scaraFLowScurve(&(myDUTY.joint.trajectory[0].scurve), time);
 8008638:	f107 0308 	add.w	r3, r7, #8
 800863c:	ed93 0b00 	vldr	d0, [r3]
 8008640:	484c      	ldr	r0, [pc, #304]	; (8008774 <scaraFlowDuty+0x530>)
 8008642:	f000 fde3 	bl	800920c <scaraFLowScurve>
 8008646:	4603      	mov	r3, r0
 8008648:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFLowScurve(&(myDUTY.joint.trajectory[1].scurve), time);
 800864c:	f107 0308 	add.w	r3, r7, #8
 8008650:	ed93 0b00 	vldr	d0, [r3]
 8008654:	4848      	ldr	r0, [pc, #288]	; (8008778 <scaraFlowDuty+0x534>)
 8008656:	f000 fdd9 	bl	800920c <scaraFLowScurve>
 800865a:	4603      	mov	r3, r0
 800865c:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFLowScurve(&(myDUTY.joint.trajectory[2].scurve), time);
 8008660:	f107 0308 	add.w	r3, r7, #8
 8008664:	ed93 0b00 	vldr	d0, [r3]
 8008668:	4844      	ldr	r0, [pc, #272]	; (800877c <scaraFlowDuty+0x538>)
 800866a:	f000 fdcf 	bl	800920c <scaraFLowScurve>
 800866e:	4603      	mov	r3, r0
 8008670:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFLowScurve(&(myDUTY.joint.trajectory[3].scurve), time);
 8008674:	f107 0308 	add.w	r3, r7, #8
 8008678:	ed93 0b00 	vldr	d0, [r3]
 800867c:	4840      	ldr	r0, [pc, #256]	; (8008780 <scaraFlowDuty+0x53c>)
 800867e:	f000 fdc5 	bl	800920c <scaraFLowScurve>
 8008682:	4603      	mov	r3, r0
 8008684:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 8008688:	4b35      	ldr	r3, [pc, #212]	; (8008760 <scaraFlowDuty+0x51c>)
 800868a:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 800868e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 8008692:	4b33      	ldr	r3, [pc, #204]	; (8008760 <scaraFlowDuty+0x51c>)
 8008694:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 8008698:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 800869c:	4b30      	ldr	r3, [pc, #192]	; (8008760 <scaraFlowDuty+0x51c>)
 800869e:	f893 37a0 	ldrb.w	r3, [r3, #1952]	; 0x7a0
 80086a2:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 80086a6:	4b2e      	ldr	r3, [pc, #184]	; (8008760 <scaraFlowDuty+0x51c>)
 80086a8:	f893 3920 	ldrb.w	r3, [r3, #2336]	; 0x920
 80086ac:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 80086b0:	4b2b      	ldr	r3, [pc, #172]	; (8008760 <scaraFlowDuty+0x51c>)
 80086b2:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 80086b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086ba:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 80086be:	4b28      	ldr	r3, [pc, #160]	; (8008760 <scaraFlowDuty+0x51c>)
 80086c0:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 80086c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086c8:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 80086cc:	4b24      	ldr	r3, [pc, #144]	; (8008760 <scaraFlowDuty+0x51c>)
 80086ce:	f603 0368 	addw	r3, r3, #2152	; 0x868
 80086d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086d6:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 80086da:	4b21      	ldr	r3, [pc, #132]	; (8008760 <scaraFlowDuty+0x51c>)
 80086dc:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 80086e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086e4:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8

			v0 = myDUTY.joint.trajectory[0].scurve.v_current;
 80086e8:	4b1d      	ldr	r3, [pc, #116]	; (8008760 <scaraFlowDuty+0x51c>)
 80086ea:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 80086ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086f2:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
			v1 = myDUTY.joint.trajectory[1].scurve.v_current;
 80086f6:	4b1a      	ldr	r3, [pc, #104]	; (8008760 <scaraFlowDuty+0x51c>)
 80086f8:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 80086fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008700:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
			v2 = myDUTY.joint.trajectory[2].scurve.v_current;
 8008704:	4b16      	ldr	r3, [pc, #88]	; (8008760 <scaraFlowDuty+0x51c>)
 8008706:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 800870a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800870e:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			v3 = myDUTY.joint.trajectory[3].scurve.v_current;
 8008712:	4b13      	ldr	r3, [pc, #76]	; (8008760 <scaraFlowDuty+0x51c>)
 8008714:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8008718:	e9d3 3400 	ldrd	r3, r4, [r3]
 800871c:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8008720:	e001      	b.n	8008726 <scaraFlowDuty+0x4e2>

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8008722:	2305      	movs	r3, #5
 8008724:	e10d      	b.n	8008942 <scaraFlowDuty+0x6fe>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 8008726:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 800872a:	2b00      	cmp	r3, #0
 800872c:	d002      	beq.n	8008734 <scaraFlowDuty+0x4f0>
			return status1;
 800872e:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8008732:	e106      	b.n	8008942 <scaraFlowDuty+0x6fe>
		}
		if ( SCARA_STATUS_OK != status2) {
 8008734:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <scaraFlowDuty+0x4fe>
			return status2;
 800873c:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008740:	e0ff      	b.n	8008942 <scaraFlowDuty+0x6fe>
		}
		if ( SCARA_STATUS_OK != status3) {
 8008742:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8008746:	2b00      	cmp	r3, #0
 8008748:	d002      	beq.n	8008750 <scaraFlowDuty+0x50c>
			return status3;
 800874a:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 800874e:	e0f8      	b.n	8008942 <scaraFlowDuty+0x6fe>
		}
		if ( SCARA_STATUS_OK != status4) {
 8008750:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 8008754:	2b00      	cmp	r3, #0
 8008756:	d015      	beq.n	8008784 <scaraFlowDuty+0x540>
			return status4;
 8008758:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800875c:	e0f1      	b.n	8008942 <scaraFlowDuty+0x6fe>
 800875e:	bf00      	nop
 8008760:	20005af8 	.word	0x20005af8
 8008764:	20005f18 	.word	0x20005f18
 8008768:	20006098 	.word	0x20006098
 800876c:	20006218 	.word	0x20006218
 8008770:	20006398 	.word	0x20006398
 8008774:	20005f98 	.word	0x20005f98
 8008778:	20006118 	.word	0x20006118
 800877c:	20006298 	.word	0x20006298
 8008780:	20006418 	.word	0x20006418
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 8008784:	4b73      	ldr	r3, [pc, #460]	; (8008954 <scaraFlowDuty+0x710>)
 8008786:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 800878a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800878e:	f997 30d7 	ldrsb.w	r3, [r7, #215]	; 0xd7
 8008792:	4618      	mov	r0, r3
 8008794:	f7f7 fec6 	bl	8000524 <__aeabi_i2d>
 8008798:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800879c:	f7f7 ff2c 	bl	80005f8 <__aeabi_dmul>
 80087a0:	4602      	mov	r2, r0
 80087a2:	460b      	mov	r3, r1
 80087a4:	4620      	mov	r0, r4
 80087a6:	4629      	mov	r1, r5
 80087a8:	f7f7 fd70 	bl	800028c <__adddf3>
 80087ac:	4603      	mov	r3, r0
 80087ae:	460c      	mov	r4, r1
 80087b0:	f107 0210 	add.w	r2, r7, #16
 80087b4:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 80087b8:	4b66      	ldr	r3, [pc, #408]	; (8008954 <scaraFlowDuty+0x710>)
 80087ba:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 80087be:	e9d3 4500 	ldrd	r4, r5, [r3]
 80087c2:	f997 30d6 	ldrsb.w	r3, [r7, #214]	; 0xd6
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7f7 feac 	bl	8000524 <__aeabi_i2d>
 80087cc:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80087d0:	f7f7 ff12 	bl	80005f8 <__aeabi_dmul>
 80087d4:	4602      	mov	r2, r0
 80087d6:	460b      	mov	r3, r1
 80087d8:	4620      	mov	r0, r4
 80087da:	4629      	mov	r1, r5
 80087dc:	f7f7 fd56 	bl	800028c <__adddf3>
 80087e0:	4603      	mov	r3, r0
 80087e2:	460c      	mov	r4, r1
 80087e4:	f107 0210 	add.w	r2, r7, #16
 80087e8:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 80087ec:	4b59      	ldr	r3, [pc, #356]	; (8008954 <scaraFlowDuty+0x710>)
 80087ee:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 80087f2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80087f6:	f997 30d5 	ldrsb.w	r3, [r7, #213]	; 0xd5
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7f7 fe92 	bl	8000524 <__aeabi_i2d>
 8008800:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8008804:	f7f7 fef8 	bl	80005f8 <__aeabi_dmul>
 8008808:	4602      	mov	r2, r0
 800880a:	460b      	mov	r3, r1
 800880c:	4620      	mov	r0, r4
 800880e:	4629      	mov	r1, r5
 8008810:	f7f7 fd3c 	bl	800028c <__adddf3>
 8008814:	4603      	mov	r3, r0
 8008816:	460c      	mov	r4, r1
 8008818:	f107 0210 	add.w	r2, r7, #16
 800881c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 8008820:	4b4c      	ldr	r3, [pc, #304]	; (8008954 <scaraFlowDuty+0x710>)
 8008822:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8008826:	e9d3 4500 	ldrd	r4, r5, [r3]
 800882a:	f997 30d4 	ldrsb.w	r3, [r7, #212]	; 0xd4
 800882e:	4618      	mov	r0, r3
 8008830:	f7f7 fe78 	bl	8000524 <__aeabi_i2d>
 8008834:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8008838:	f7f7 fede 	bl	80005f8 <__aeabi_dmul>
 800883c:	4602      	mov	r2, r0
 800883e:	460b      	mov	r3, r1
 8008840:	4620      	mov	r0, r4
 8008842:	4629      	mov	r1, r5
 8008844:	f7f7 fd22 	bl	800028c <__adddf3>
 8008848:	4603      	mov	r3, r0
 800884a:	460c      	mov	r4, r1
 800884c:	f107 0210 	add.w	r2, r7, #16
 8008850:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 8008854:	f107 0210 	add.w	r2, r7, #16
 8008858:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800885c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 8008860:	f107 0210 	add.w	r2, r7, #16
 8008864:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8008868:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 800886c:	f107 0210 	add.w	r2, r7, #16
 8008870:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8008874:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 8008878:	f107 0210 	add.w	r2, r7, #16
 800887c:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8008880:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 8008884:	f107 0210 	add.w	r2, r7, #16
 8008888:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800888c:	e9c2 3404 	strd	r3, r4, [r2, #16]
		positionCompute.q_theta2 = s1;
 8008890:	f107 0210 	add.w	r2, r7, #16
 8008894:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8008898:	e9c2 3406 	strd	r3, r4, [r2, #24]
		positionCompute.q_d3	 = s2;
 800889c:	f107 0210 	add.w	r2, r7, #16
 80088a0:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80088a4:	e9c2 3408 	strd	r3, r4, [r2, #32]
		positionCompute.q_theta4 = s3;
 80088a8:	f107 0210 	add.w	r2, r7, #16
 80088ac:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 80088b0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 80088b4:	4b27      	ldr	r3, [pc, #156]	; (8008954 <scaraFlowDuty+0x710>)
 80088b6:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80088ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80088be:	f107 0210 	add.w	r2, r7, #16
 80088c2:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 80088c6:	f107 0210 	add.w	r2, r7, #16
 80088ca:	f107 0308 	add.w	r3, r7, #8
 80088ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80088d2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 80088d6:	f107 0310 	add.w	r3, r7, #16
 80088da:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80088de:	f107 0310 	add.w	r3, r7, #16
 80088e2:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 80088e6:	f107 0310 	add.w	r3, r7, #16
 80088ea:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 80088ee:	f107 0310 	add.w	r3, r7, #16
 80088f2:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 80088f6:	eeb0 3a44 	vmov.f32	s6, s8
 80088fa:	eef0 3a64 	vmov.f32	s7, s9
 80088fe:	eeb0 2a45 	vmov.f32	s4, s10
 8008902:	eef0 2a65 	vmov.f32	s5, s11
 8008906:	eeb0 1a46 	vmov.f32	s2, s12
 800890a:	eef0 1a66 	vmov.f32	s3, s13
 800890e:	eeb0 0a47 	vmov.f32	s0, s14
 8008912:	eef0 0a67 	vmov.f32	s1, s15
 8008916:	f001 fb5f 	bl	8009fd8 <scaraCheckWorkSpace4>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d001      	beq.n	8008924 <scaraFlowDuty+0x6e0>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008920:	2307      	movs	r3, #7
 8008922:	e00e      	b.n	8008942 <scaraFlowDuty+0x6fe>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8008924:	f107 0110 	add.w	r1, r7, #16
 8008928:	1d3b      	adds	r3, r7, #4
 800892a:	22c0      	movs	r2, #192	; 0xc0
 800892c:	6818      	ldr	r0, [r3, #0]
 800892e:	f00d f895 	bl	8015a5c <memcpy>
		}
		kinematicForward(pos_Next);
 8008932:	1d3b      	adds	r3, r7, #4
 8008934:	6818      	ldr	r0, [r3, #0]
 8008936:	f7fb f86b 	bl	8003a10 <kinematicForward>
 800893a:	e001      	b.n	8008940 <scaraFlowDuty+0x6fc>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 800893c:	2302      	movs	r3, #2
 800893e:	e000      	b.n	8008942 <scaraFlowDuty+0x6fe>
	}

	return SCARA_STATUS_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8008948:	46bd      	mov	sp, r7
 800894a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800894e:	b002      	add	sp, #8
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	20005af8 	.word	0x20005af8

08008958 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 8008958:	b5b0      	push	{r4, r5, r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800896a:	a33d      	add	r3, pc, #244	; (adr r3, 8008a60 <scaraFlowLine+0x108>)
 800896c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008970:	f7f8 f8d2 	bl	8000b18 <__aeabi_dcmpgt>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d05a      	beq.n	8008a30 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008986:	e9d7 2300 	ldrd	r2, r3, [r7]
 800898a:	f7f7 fe35 	bl	80005f8 <__aeabi_dmul>
 800898e:	4602      	mov	r2, r0
 8008990:	460b      	mov	r3, r1
 8008992:	4610      	mov	r0, r2
 8008994:	4619      	mov	r1, r3
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800899c:	f7f7 ff56 	bl	800084c <__aeabi_ddiv>
 80089a0:	4602      	mov	r2, r0
 80089a2:	460b      	mov	r3, r1
 80089a4:	4620      	mov	r0, r4
 80089a6:	4629      	mov	r1, r5
 80089a8:	f7f7 fc70 	bl	800028c <__adddf3>
 80089ac:	4603      	mov	r3, r0
 80089ae:	460c      	mov	r4, r1
 80089b0:	68fa      	ldr	r2, [r7, #12]
 80089b2:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80089c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089c6:	f7f7 fe17 	bl	80005f8 <__aeabi_dmul>
 80089ca:	4602      	mov	r2, r0
 80089cc:	460b      	mov	r3, r1
 80089ce:	4610      	mov	r0, r2
 80089d0:	4619      	mov	r1, r3
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80089d8:	f7f7 ff38 	bl	800084c <__aeabi_ddiv>
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4620      	mov	r0, r4
 80089e2:	4629      	mov	r1, r5
 80089e4:	f7f7 fc52 	bl	800028c <__adddf3>
 80089e8:	4603      	mov	r3, r0
 80089ea:	460c      	mov	r4, r1
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80089fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a02:	f7f7 fdf9 	bl	80005f8 <__aeabi_dmul>
 8008a06:	4602      	mov	r2, r0
 8008a08:	460b      	mov	r3, r1
 8008a0a:	4610      	mov	r0, r2
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008a14:	f7f7 ff1a 	bl	800084c <__aeabi_ddiv>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	4629      	mov	r1, r5
 8008a20:	f7f7 fc34 	bl	800028c <__adddf3>
 8008a24:	4603      	mov	r3, r0
 8008a26:	460c      	mov	r4, r1
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
 8008a2e:	e011      	b.n	8008a54 <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current = line->y1;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current = line->z1;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8008a4e:	68fa      	ldr	r2, [r7, #12]
 8008a50:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	47ae147b 	.word	0x47ae147b
 8008a64:	3f847ae1 	.word	0x3f847ae1

08008a68 <scaraFlowCircle>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 8008a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a6c:	b086      	sub	sp, #24
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	60f8      	str	r0, [r7, #12]
 8008a72:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	4623      	mov	r3, r4
 8008a80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a84:	f7f7 fee2 	bl	800084c <__aeabi_ddiv>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	460c      	mov	r4, r1
 8008a8c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f993 3000 	ldrsb.w	r3, [r3]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7f7 fd3b 	bl	8000524 <__aeabi_i2d>
 8008aae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008ab2:	f7f7 fda1 	bl	80005f8 <__aeabi_dmul>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	460b      	mov	r3, r1
 8008aba:	4650      	mov	r0, sl
 8008abc:	4659      	mov	r1, fp
 8008abe:	f7f7 fbe5 	bl	800028c <__adddf3>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	ec43 2b17 	vmov	d7, r2, r3
 8008aca:	eeb0 0a47 	vmov.f32	s0, s14
 8008ace:	eef0 0a67 	vmov.f32	s1, s15
 8008ad2:	f010 fdb1 	bl	8019638 <cos>
 8008ad6:	ec53 2b10 	vmov	r2, r3, d0
 8008ada:	4640      	mov	r0, r8
 8008adc:	4649      	mov	r1, r9
 8008ade:	f7f7 fd8b 	bl	80005f8 <__aeabi_dmul>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	4629      	mov	r1, r5
 8008aea:	f7f7 fbcf 	bl	800028c <__adddf3>
 8008aee:	4603      	mov	r3, r0
 8008af0:	460c      	mov	r4, r1
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f993 3000 	ldrsb.w	r3, [r3]
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7f7 fd07 	bl	8000524 <__aeabi_i2d>
 8008b16:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008b1a:	f7f7 fd6d 	bl	80005f8 <__aeabi_dmul>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	460b      	mov	r3, r1
 8008b22:	4650      	mov	r0, sl
 8008b24:	4659      	mov	r1, fp
 8008b26:	f7f7 fbb1 	bl	800028c <__adddf3>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	ec43 2b17 	vmov	d7, r2, r3
 8008b32:	eeb0 0a47 	vmov.f32	s0, s14
 8008b36:	eef0 0a67 	vmov.f32	s1, s15
 8008b3a:	f010 fe0d 	bl	8019758 <sin>
 8008b3e:	ec53 2b10 	vmov	r2, r3, d0
 8008b42:	4640      	mov	r0, r8
 8008b44:	4649      	mov	r1, r9
 8008b46:	f7f7 fd57 	bl	80005f8 <__aeabi_dmul>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	4620      	mov	r0, r4
 8008b50:	4629      	mov	r1, r5
 8008b52:	f7f7 fb9b 	bl	800028c <__adddf3>
 8008b56:	4603      	mov	r3, r0
 8008b58:	460c      	mov	r4, r1
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3718      	adds	r7, #24
 8008b72:	46bd      	mov	sp, r7
 8008b74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008b78 <scaraFlowLSPB1>:
SCARA_StatusTypeDef	scaraFlowLSPB1	(Trajectory_LSPB_TypeDef *lspb, double time){
 8008b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b7c:	b08b      	sub	sp, #44	; 0x2c
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	60f8      	str	r0, [r7, #12]
 8008b82:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008b8c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008b96:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8008ba0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8008ba4:	f04f 0200 	mov.w	r2, #0
 8008ba8:	f04f 0300 	mov.w	r3, #0
 8008bac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bb0:	f7f7 ffa8 	bl	8000b04 <__aeabi_dcmpge>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d05b      	beq.n	8008c72 <scaraFlowLSPB1+0xfa>
 8008bba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008bbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bc2:	f7f7 ff95 	bl	8000af0 <__aeabi_dcmple>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d052      	beq.n	8008c72 <scaraFlowLSPB1+0xfa>
		lspb->a_current		=	lspb->a_design;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008be4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008be8:	f7f7 fd06 	bl	80005f8 <__aeabi_dmul>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	4629      	mov	r1, r5
 8008bf4:	f7f7 fb4a 	bl	800028c <__adddf3>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	460c      	mov	r4, r1
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008c0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c12:	f7f7 fcf1 	bl	80005f8 <__aeabi_dmul>
 8008c16:	4602      	mov	r2, r0
 8008c18:	460b      	mov	r3, r1
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	f7f7 fb35 	bl	800028c <__adddf3>
 8008c22:	4603      	mov	r3, r0
 8008c24:	460c      	mov	r4, r1
 8008c26:	4625      	mov	r5, r4
 8008c28:	461c      	mov	r4, r3
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008c30:	f04f 0200 	mov.w	r2, #0
 8008c34:	4b9e      	ldr	r3, [pc, #632]	; (8008eb0 <scaraFlowLSPB1+0x338>)
 8008c36:	f7f7 fcdf 	bl	80005f8 <__aeabi_dmul>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	4610      	mov	r0, r2
 8008c40:	4619      	mov	r1, r3
 8008c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c46:	f7f7 fcd7 	bl	80005f8 <__aeabi_dmul>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	4610      	mov	r0, r2
 8008c50:	4619      	mov	r1, r3
 8008c52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c56:	f7f7 fccf 	bl	80005f8 <__aeabi_dmul>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	4620      	mov	r0, r4
 8008c60:	4629      	mov	r1, r5
 8008c62:	f7f7 fb13 	bl	800028c <__adddf3>
 8008c66:	4603      	mov	r3, r0
 8008c68:	460c      	mov	r4, r1
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8008c70:	e117      	b.n	8008ea2 <scaraFlowLSPB1+0x32a>
	// Constant velocity
	} else if (ta <= time && time <= td) {
 8008c72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c76:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008c7a:	f7f7 ff39 	bl	8000af0 <__aeabi_dcmple>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d056      	beq.n	8008d32 <scaraFlowLSPB1+0x1ba>
 8008c84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c8c:	f7f7 ff30 	bl	8000af0 <__aeabi_dcmple>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d04d      	beq.n	8008d32 <scaraFlowLSPB1+0x1ba>
		lspb->a_current		=	0;
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	f04f 0300 	mov.w	r3, #0
 8008c9c:	f04f 0400 	mov.w	r4, #0
 8008ca0:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta*0.5 + lspb->v_design*(time - ta*0.5);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008cbc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008cc0:	f7f7 fc9a 	bl	80005f8 <__aeabi_dmul>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	4610      	mov	r0, r2
 8008cca:	4619      	mov	r1, r3
 8008ccc:	f04f 0200 	mov.w	r2, #0
 8008cd0:	4b77      	ldr	r3, [pc, #476]	; (8008eb0 <scaraFlowLSPB1+0x338>)
 8008cd2:	f7f7 fc91 	bl	80005f8 <__aeabi_dmul>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	460b      	mov	r3, r1
 8008cda:	4620      	mov	r0, r4
 8008cdc:	4629      	mov	r1, r5
 8008cde:	f7f7 fad5 	bl	800028c <__adddf3>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	460c      	mov	r4, r1
 8008ce6:	4698      	mov	r8, r3
 8008ce8:	46a1      	mov	r9, r4
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8008cf0:	f04f 0200 	mov.w	r2, #0
 8008cf4:	4b6e      	ldr	r3, [pc, #440]	; (8008eb0 <scaraFlowLSPB1+0x338>)
 8008cf6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008cfa:	f7f7 fc7d 	bl	80005f8 <__aeabi_dmul>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	460b      	mov	r3, r1
 8008d02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d06:	f7f7 fabf 	bl	8000288 <__aeabi_dsub>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	4620      	mov	r0, r4
 8008d10:	4629      	mov	r1, r5
 8008d12:	f7f7 fc71 	bl	80005f8 <__aeabi_dmul>
 8008d16:	4603      	mov	r3, r0
 8008d18:	460c      	mov	r4, r1
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	4623      	mov	r3, r4
 8008d1e:	4640      	mov	r0, r8
 8008d20:	4649      	mov	r1, r9
 8008d22:	f7f7 fab3 	bl	800028c <__adddf3>
 8008d26:	4603      	mov	r3, r0
 8008d28:	460c      	mov	r4, r1
 8008d2a:	68fa      	ldr	r2, [r7, #12]
 8008d2c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8008d30:	e0b7      	b.n	8008ea2 <scaraFlowLSPB1+0x32a>
	// Decelerate
	} else if (td <= time && time <= tf) {
 8008d32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d36:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008d3a:	f7f7 fed9 	bl	8000af0 <__aeabi_dcmple>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f000 809a 	beq.w	8008e7a <scaraFlowLSPB1+0x302>
 8008d46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d4e:	f7f7 fecf 	bl	8000af0 <__aeabi_dcmple>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f000 8090 	beq.w	8008e7a <scaraFlowLSPB1+0x302>
		lspb->a_current		=	-lspb->a_design;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008d60:	4614      	mov	r4, r2
 8008d62:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v_design + lspb->a_design*(td - time);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 8008d78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d7c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008d80:	f7f7 fa82 	bl	8000288 <__aeabi_dsub>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	4640      	mov	r0, r8
 8008d8a:	4649      	mov	r1, r9
 8008d8c:	f7f7 fc34 	bl	80005f8 <__aeabi_dmul>
 8008d90:	4602      	mov	r2, r0
 8008d92:	460b      	mov	r3, r1
 8008d94:	4620      	mov	r0, r4
 8008d96:	4629      	mov	r1, r5
 8008d98:	f7f7 fa78 	bl	800028c <__adddf3>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	460c      	mov	r4, r1
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8008db2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008db6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008dba:	f7f7 fa65 	bl	8000288 <__aeabi_dsub>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	4640      	mov	r0, r8
 8008dc4:	4649      	mov	r1, r9
 8008dc6:	f7f7 fc17 	bl	80005f8 <__aeabi_dmul>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	460b      	mov	r3, r1
 8008dce:	4620      	mov	r0, r4
 8008dd0:	4629      	mov	r1, r5
 8008dd2:	f7f7 fa59 	bl	8000288 <__aeabi_dsub>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	460c      	mov	r4, r1
 8008dda:	461d      	mov	r5, r3
 8008ddc:	4626      	mov	r6, r4
								- (lspb->v_lim - lspb->v0)*(tf - time)*(tf - time)/(2*ta);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8008dea:	461a      	mov	r2, r3
 8008dec:	4623      	mov	r3, r4
 8008dee:	f7f7 fa4b 	bl	8000288 <__aeabi_dsub>
 8008df2:	4603      	mov	r3, r0
 8008df4:	460c      	mov	r4, r1
 8008df6:	4698      	mov	r8, r3
 8008df8:	46a1      	mov	r9, r4
 8008dfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dfe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008e02:	f7f7 fa41 	bl	8000288 <__aeabi_dsub>
 8008e06:	4603      	mov	r3, r0
 8008e08:	460c      	mov	r4, r1
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	4623      	mov	r3, r4
 8008e0e:	4640      	mov	r0, r8
 8008e10:	4649      	mov	r1, r9
 8008e12:	f7f7 fbf1 	bl	80005f8 <__aeabi_dmul>
 8008e16:	4603      	mov	r3, r0
 8008e18:	460c      	mov	r4, r1
 8008e1a:	4698      	mov	r8, r3
 8008e1c:	46a1      	mov	r9, r4
 8008e1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e22:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008e26:	f7f7 fa2f 	bl	8000288 <__aeabi_dsub>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	460c      	mov	r4, r1
 8008e2e:	461a      	mov	r2, r3
 8008e30:	4623      	mov	r3, r4
 8008e32:	4640      	mov	r0, r8
 8008e34:	4649      	mov	r1, r9
 8008e36:	f7f7 fbdf 	bl	80005f8 <__aeabi_dmul>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	460c      	mov	r4, r1
 8008e3e:	4698      	mov	r8, r3
 8008e40:	46a1      	mov	r9, r4
 8008e42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008e46:	4602      	mov	r2, r0
 8008e48:	460b      	mov	r3, r1
 8008e4a:	f7f7 fa1f 	bl	800028c <__adddf3>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	460c      	mov	r4, r1
 8008e52:	461a      	mov	r2, r3
 8008e54:	4623      	mov	r3, r4
 8008e56:	4640      	mov	r0, r8
 8008e58:	4649      	mov	r1, r9
 8008e5a:	f7f7 fcf7 	bl	800084c <__aeabi_ddiv>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	460c      	mov	r4, r1
 8008e62:	461a      	mov	r2, r3
 8008e64:	4623      	mov	r3, r4
 8008e66:	4628      	mov	r0, r5
 8008e68:	4631      	mov	r1, r6
 8008e6a:	f7f7 fa0d 	bl	8000288 <__aeabi_dsub>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	460c      	mov	r4, r1
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8008e78:	e013      	b.n	8008ea2 <scaraFlowLSPB1+0x32a>
	} else {
		lspb->a_current 	=	0;
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	f04f 0300 	mov.w	r3, #0
 8008e80:	f04f 0400 	mov.w	r4, #0
 8008e84:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	0;
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	f04f 0300 	mov.w	r3, #0
 8008e8e:	f04f 0400 	mov.w	r4, #0
 8008e92:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 8008ea2:	2300      	movs	r3, #0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	372c      	adds	r7, #44	; 0x2c
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008eae:	bf00      	nop
 8008eb0:	3fe00000 	.word	0x3fe00000

08008eb4 <scaraFlowLSPB>:
/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFlowLSPB		(Trajectory_LSPB_TypeDef *lspb, double time) {
 8008eb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008eb8:	b08b      	sub	sp, #44	; 0x2c
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	60f8      	str	r0, [r7, #12]
 8008ebe:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008ec8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008ed2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8008edc:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8008ee0:	f04f 0200 	mov.w	r2, #0
 8008ee4:	f04f 0300 	mov.w	r3, #0
 8008ee8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008eec:	f7f7 fe0a 	bl	8000b04 <__aeabi_dcmpge>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d05b      	beq.n	8008fae <scaraFlowLSPB+0xfa>
 8008ef6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008efa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008efe:	f7f7 fdf7 	bl	8000af0 <__aeabi_dcmple>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d052      	beq.n	8008fae <scaraFlowLSPB+0xfa>
		lspb->a_current		=	lspb->a_design;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f24:	f7f7 fb68 	bl	80005f8 <__aeabi_dmul>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	4629      	mov	r1, r5
 8008f30:	f7f7 f9ac 	bl	800028c <__adddf3>
 8008f34:	4603      	mov	r3, r0
 8008f36:	460c      	mov	r4, r1
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008f4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f4e:	f7f7 fb53 	bl	80005f8 <__aeabi_dmul>
 8008f52:	4602      	mov	r2, r0
 8008f54:	460b      	mov	r3, r1
 8008f56:	4620      	mov	r0, r4
 8008f58:	4629      	mov	r1, r5
 8008f5a:	f7f7 f997 	bl	800028c <__adddf3>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	460c      	mov	r4, r1
 8008f62:	4625      	mov	r5, r4
 8008f64:	461c      	mov	r4, r3
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008f6c:	f04f 0200 	mov.w	r2, #0
 8008f70:	4ba5      	ldr	r3, [pc, #660]	; (8009208 <scaraFlowLSPB+0x354>)
 8008f72:	f7f7 fb41 	bl	80005f8 <__aeabi_dmul>
 8008f76:	4602      	mov	r2, r0
 8008f78:	460b      	mov	r3, r1
 8008f7a:	4610      	mov	r0, r2
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f82:	f7f7 fb39 	bl	80005f8 <__aeabi_dmul>
 8008f86:	4602      	mov	r2, r0
 8008f88:	460b      	mov	r3, r1
 8008f8a:	4610      	mov	r0, r2
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f92:	f7f7 fb31 	bl	80005f8 <__aeabi_dmul>
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	4629      	mov	r1, r5
 8008f9e:	f7f7 f975 	bl	800028c <__adddf3>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	460c      	mov	r4, r1
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8008fac:	e125      	b.n	80091fa <scaraFlowLSPB+0x346>
	// Constant velocity
	} else if (ta <= time && time <= (tf - td)) {
 8008fae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fb2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008fb6:	f7f7 fd9b 	bl	8000af0 <__aeabi_dcmple>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d05e      	beq.n	800907e <scaraFlowLSPB+0x1ca>
 8008fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008fc4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008fc8:	f7f7 f95e 	bl	8000288 <__aeabi_dsub>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	460b      	mov	r3, r1
 8008fd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fd4:	f7f7 fd8c 	bl	8000af0 <__aeabi_dcmple>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d04f      	beq.n	800907e <scaraFlowLSPB+0x1ca>
		lspb->a_current		=	0;
 8008fde:	68fa      	ldr	r2, [r7, #12]
 8008fe0:	f04f 0300 	mov.w	r3, #0
 8008fe4:	f04f 0400 	mov.w	r4, #0
 8008fe8:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8008ff2:	68fa      	ldr	r2, [r7, #12]
 8008ff4:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta/2 + lspb->v_lim*(time - ta/2);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8009004:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009008:	f7f7 faf6 	bl	80005f8 <__aeabi_dmul>
 800900c:	4602      	mov	r2, r0
 800900e:	460b      	mov	r3, r1
 8009010:	4610      	mov	r0, r2
 8009012:	4619      	mov	r1, r3
 8009014:	f04f 0200 	mov.w	r2, #0
 8009018:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800901c:	f7f7 fc16 	bl	800084c <__aeabi_ddiv>
 8009020:	4602      	mov	r2, r0
 8009022:	460b      	mov	r3, r1
 8009024:	4620      	mov	r0, r4
 8009026:	4629      	mov	r1, r5
 8009028:	f7f7 f930 	bl	800028c <__adddf3>
 800902c:	4603      	mov	r3, r0
 800902e:	460c      	mov	r4, r1
 8009030:	4698      	mov	r8, r3
 8009032:	46a1      	mov	r9, r4
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800903a:	f04f 0200 	mov.w	r2, #0
 800903e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009042:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009046:	f7f7 fc01 	bl	800084c <__aeabi_ddiv>
 800904a:	4602      	mov	r2, r0
 800904c:	460b      	mov	r3, r1
 800904e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009052:	f7f7 f919 	bl	8000288 <__aeabi_dsub>
 8009056:	4602      	mov	r2, r0
 8009058:	460b      	mov	r3, r1
 800905a:	4620      	mov	r0, r4
 800905c:	4629      	mov	r1, r5
 800905e:	f7f7 facb 	bl	80005f8 <__aeabi_dmul>
 8009062:	4603      	mov	r3, r0
 8009064:	460c      	mov	r4, r1
 8009066:	461a      	mov	r2, r3
 8009068:	4623      	mov	r3, r4
 800906a:	4640      	mov	r0, r8
 800906c:	4649      	mov	r1, r9
 800906e:	f7f7 f90d 	bl	800028c <__adddf3>
 8009072:	4603      	mov	r3, r0
 8009074:	460c      	mov	r4, r1
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 800907c:	e0bd      	b.n	80091fa <scaraFlowLSPB+0x346>
	// Decelerate
	} else if ((tf - td) <= time && time <= tf) {
 800907e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009082:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009086:	f7f7 f8ff 	bl	8000288 <__aeabi_dsub>
 800908a:	4602      	mov	r2, r0
 800908c:	460b      	mov	r3, r1
 800908e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009092:	f7f7 fd37 	bl	8000b04 <__aeabi_dcmpge>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	f000 809a 	beq.w	80091d2 <scaraFlowLSPB+0x31e>
 800909e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80090a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090a6:	f7f7 fd23 	bl	8000af0 <__aeabi_dcmple>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f000 8090 	beq.w	80091d2 <scaraFlowLSPB+0x31e>
		lspb->a_current		=	-lspb->a_design;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80090b8:	4614      	mov	r4, r2
 80090ba:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v1 + lspb->a_design*(tf - time);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 80090d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80090d8:	f7f7 f8d6 	bl	8000288 <__aeabi_dsub>
 80090dc:	4602      	mov	r2, r0
 80090de:	460b      	mov	r3, r1
 80090e0:	4640      	mov	r0, r8
 80090e2:	4649      	mov	r1, r9
 80090e4:	f7f7 fa88 	bl	80005f8 <__aeabi_dmul>
 80090e8:	4602      	mov	r2, r0
 80090ea:	460b      	mov	r3, r1
 80090ec:	4620      	mov	r0, r4
 80090ee:	4629      	mov	r1, r5
 80090f0:	f7f7 f8cc 	bl	800028c <__adddf3>
 80090f4:	4603      	mov	r3, r0
 80090f6:	460c      	mov	r4, r1
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 800910a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800910e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009112:	f7f7 f8b9 	bl	8000288 <__aeabi_dsub>
 8009116:	4602      	mov	r2, r0
 8009118:	460b      	mov	r3, r1
 800911a:	4640      	mov	r0, r8
 800911c:	4649      	mov	r1, r9
 800911e:	f7f7 fa6b 	bl	80005f8 <__aeabi_dmul>
 8009122:	4602      	mov	r2, r0
 8009124:	460b      	mov	r3, r1
 8009126:	4620      	mov	r0, r4
 8009128:	4629      	mov	r1, r5
 800912a:	f7f7 f8ad 	bl	8000288 <__aeabi_dsub>
 800912e:	4603      	mov	r3, r0
 8009130:	460c      	mov	r4, r1
 8009132:	461d      	mov	r5, r3
 8009134:	4626      	mov	r6, r4
								- (lspb->v_lim - lspb->v1)*(tf - time)*(tf - time)/(2*td);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8009142:	461a      	mov	r2, r3
 8009144:	4623      	mov	r3, r4
 8009146:	f7f7 f89f 	bl	8000288 <__aeabi_dsub>
 800914a:	4603      	mov	r3, r0
 800914c:	460c      	mov	r4, r1
 800914e:	4698      	mov	r8, r3
 8009150:	46a1      	mov	r9, r4
 8009152:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009156:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800915a:	f7f7 f895 	bl	8000288 <__aeabi_dsub>
 800915e:	4603      	mov	r3, r0
 8009160:	460c      	mov	r4, r1
 8009162:	461a      	mov	r2, r3
 8009164:	4623      	mov	r3, r4
 8009166:	4640      	mov	r0, r8
 8009168:	4649      	mov	r1, r9
 800916a:	f7f7 fa45 	bl	80005f8 <__aeabi_dmul>
 800916e:	4603      	mov	r3, r0
 8009170:	460c      	mov	r4, r1
 8009172:	4698      	mov	r8, r3
 8009174:	46a1      	mov	r9, r4
 8009176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800917a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800917e:	f7f7 f883 	bl	8000288 <__aeabi_dsub>
 8009182:	4603      	mov	r3, r0
 8009184:	460c      	mov	r4, r1
 8009186:	461a      	mov	r2, r3
 8009188:	4623      	mov	r3, r4
 800918a:	4640      	mov	r0, r8
 800918c:	4649      	mov	r1, r9
 800918e:	f7f7 fa33 	bl	80005f8 <__aeabi_dmul>
 8009192:	4603      	mov	r3, r0
 8009194:	460c      	mov	r4, r1
 8009196:	4698      	mov	r8, r3
 8009198:	46a1      	mov	r9, r4
 800919a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800919e:	4602      	mov	r2, r0
 80091a0:	460b      	mov	r3, r1
 80091a2:	f7f7 f873 	bl	800028c <__adddf3>
 80091a6:	4603      	mov	r3, r0
 80091a8:	460c      	mov	r4, r1
 80091aa:	461a      	mov	r2, r3
 80091ac:	4623      	mov	r3, r4
 80091ae:	4640      	mov	r0, r8
 80091b0:	4649      	mov	r1, r9
 80091b2:	f7f7 fb4b 	bl	800084c <__aeabi_ddiv>
 80091b6:	4603      	mov	r3, r0
 80091b8:	460c      	mov	r4, r1
 80091ba:	461a      	mov	r2, r3
 80091bc:	4623      	mov	r3, r4
 80091be:	4628      	mov	r0, r5
 80091c0:	4631      	mov	r1, r6
 80091c2:	f7f7 f861 	bl	8000288 <__aeabi_dsub>
 80091c6:	4603      	mov	r3, r0
 80091c8:	460c      	mov	r4, r1
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 80091d0:	e013      	b.n	80091fa <scaraFlowLSPB+0x346>
	} else {
		lspb->a_current 	=	0;
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	f04f 0300 	mov.w	r3, #0
 80091d8:	f04f 0400 	mov.w	r4, #0
 80091dc:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	0;
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	f04f 0300 	mov.w	r3, #0
 80091e6:	f04f 0400 	mov.w	r4, #0
 80091ea:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	372c      	adds	r7, #44	; 0x2c
 8009200:	46bd      	mov	sp, r7
 8009202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009206:	bf00      	nop
 8009208:	3fe00000 	.word	0x3fe00000

0800920c <scaraFLowScurve>:


/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFLowScurve		(Trajectory_Scurve_TypeDef *scurve, double time) {
 800920c:	b5b0      	push	{r4, r5, r7, lr}
 800920e:	b092      	sub	sp, #72	; 0x48
 8009210:	af00      	add	r7, sp, #0
 8009212:	6278      	str	r0, [r7, #36]	; 0x24
 8009214:	ed87 0b06 	vstr	d0, [r7, #24]
	double j_max, tm, tc, t;

	j_max = scurve->j_max;
 8009218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800921e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	tm	  = scurve->Tm;
 8009222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009224:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8009228:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	tc	  = scurve->Tc;
 800922c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8009232:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	 // SCURVE 4 PHASE: tc = 0;
	 if ( 4 == scurve->num_of_phase) {
 8009236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009238:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800923c:	2b04      	cmp	r3, #4
 800923e:	f040 8321 	bne.w	8009884 <scaraFLowScurve+0x678>
		 // Phase 1
		 if ( (0.0f <= time) && ( time < tm)) {
 8009242:	f04f 0200 	mov.w	r2, #0
 8009246:	f04f 0300 	mov.w	r3, #0
 800924a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800924e:	f7f7 fc59 	bl	8000b04 <__aeabi_dcmpge>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d059      	beq.n	800930c <scaraFLowScurve+0x100>
 8009258:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800925c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009260:	f7f7 fc3c 	bl	8000adc <__aeabi_dcmplt>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d050      	beq.n	800930c <scaraFLowScurve+0x100>
			 t = time;
 800926a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800926e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 8009272:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009276:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800927a:	f7f7 f9bd 	bl	80005f8 <__aeabi_dmul>
 800927e:	4603      	mov	r3, r0
 8009280:	460c      	mov	r4, r1
 8009282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009284:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 8009288:	f04f 0200 	mov.w	r2, #0
 800928c:	4b93      	ldr	r3, [pc, #588]	; (80094dc <scaraFLowScurve+0x2d0>)
 800928e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009292:	f7f7 f9b1 	bl	80005f8 <__aeabi_dmul>
 8009296:	4603      	mov	r3, r0
 8009298:	460c      	mov	r4, r1
 800929a:	4618      	mov	r0, r3
 800929c:	4621      	mov	r1, r4
 800929e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80092a2:	f7f7 f9a9 	bl	80005f8 <__aeabi_dmul>
 80092a6:	4603      	mov	r3, r0
 80092a8:	460c      	mov	r4, r1
 80092aa:	4618      	mov	r0, r3
 80092ac:	4621      	mov	r1, r4
 80092ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80092b2:	f7f7 f9a1 	bl	80005f8 <__aeabi_dmul>
 80092b6:	4603      	mov	r3, r0
 80092b8:	460c      	mov	r4, r1
 80092ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092bc:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 80092c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80092c4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80092c8:	f7f7 f996 	bl	80005f8 <__aeabi_dmul>
 80092cc:	4603      	mov	r3, r0
 80092ce:	460c      	mov	r4, r1
 80092d0:	4618      	mov	r0, r3
 80092d2:	4621      	mov	r1, r4
 80092d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80092d8:	f7f7 f98e 	bl	80005f8 <__aeabi_dmul>
 80092dc:	4603      	mov	r3, r0
 80092de:	460c      	mov	r4, r1
 80092e0:	4618      	mov	r0, r3
 80092e2:	4621      	mov	r1, r4
 80092e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80092e8:	f7f7 f986 	bl	80005f8 <__aeabi_dmul>
 80092ec:	4603      	mov	r3, r0
 80092ee:	460c      	mov	r4, r1
 80092f0:	4618      	mov	r0, r3
 80092f2:	4621      	mov	r1, r4
 80092f4:	f04f 0200 	mov.w	r2, #0
 80092f8:	4b79      	ldr	r3, [pc, #484]	; (80094e0 <scaraFLowScurve+0x2d4>)
 80092fa:	f7f7 faa7 	bl	800084c <__aeabi_ddiv>
 80092fe:	4603      	mov	r3, r0
 8009300:	460c      	mov	r4, r1
 8009302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009304:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009308:	f000 be56 	b.w	8009fb8 <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 800930c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009310:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009314:	f7f7 fbec 	bl	8000af0 <__aeabi_dcmple>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	f000 80e2 	beq.w	80094e4 <scaraFLowScurve+0x2d8>
 8009320:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009324:	4602      	mov	r2, r0
 8009326:	460b      	mov	r3, r1
 8009328:	f7f6 ffb0 	bl	800028c <__adddf3>
 800932c:	4603      	mov	r3, r0
 800932e:	460c      	mov	r4, r1
 8009330:	461a      	mov	r2, r3
 8009332:	4623      	mov	r3, r4
 8009334:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009338:	f7f7 fbd0 	bl	8000adc <__aeabi_dcmplt>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	f000 80d0 	beq.w	80094e4 <scaraFLowScurve+0x2d8>
			 t = time - tm;
 8009344:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009348:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800934c:	f7f6 ff9c 	bl	8000288 <__aeabi_dsub>
 8009350:	4603      	mov	r3, r0
 8009352:	460c      	mov	r4, r1
 8009354:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 8009358:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800935c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009360:	f7f7 f94a 	bl	80005f8 <__aeabi_dmul>
 8009364:	4603      	mov	r3, r0
 8009366:	460c      	mov	r4, r1
 8009368:	4625      	mov	r5, r4
 800936a:	461c      	mov	r4, r3
 800936c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009370:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009374:	f7f7 f940 	bl	80005f8 <__aeabi_dmul>
 8009378:	4602      	mov	r2, r0
 800937a:	460b      	mov	r3, r1
 800937c:	4620      	mov	r0, r4
 800937e:	4629      	mov	r1, r5
 8009380:	f7f6 ff82 	bl	8000288 <__aeabi_dsub>
 8009384:	4603      	mov	r3, r0
 8009386:	460c      	mov	r4, r1
 8009388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800938a:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 800938e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009390:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 8009394:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009398:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800939c:	f7f7 f92c 	bl	80005f8 <__aeabi_dmul>
 80093a0:	4602      	mov	r2, r0
 80093a2:	460b      	mov	r3, r1
 80093a4:	4610      	mov	r0, r2
 80093a6:	4619      	mov	r1, r3
 80093a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093ac:	f7f7 f924 	bl	80005f8 <__aeabi_dmul>
 80093b0:	4602      	mov	r2, r0
 80093b2:	460b      	mov	r3, r1
 80093b4:	4620      	mov	r0, r4
 80093b6:	4629      	mov	r1, r5
 80093b8:	f7f6 ff68 	bl	800028c <__adddf3>
 80093bc:	4603      	mov	r3, r0
 80093be:	460c      	mov	r4, r1
 80093c0:	4625      	mov	r5, r4
 80093c2:	461c      	mov	r4, r3
 80093c4:	f04f 0200 	mov.w	r2, #0
 80093c8:	4b44      	ldr	r3, [pc, #272]	; (80094dc <scaraFLowScurve+0x2d0>)
 80093ca:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80093ce:	f7f7 f913 	bl	80005f8 <__aeabi_dmul>
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	4610      	mov	r0, r2
 80093d8:	4619      	mov	r1, r3
 80093da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093de:	f7f7 f90b 	bl	80005f8 <__aeabi_dmul>
 80093e2:	4602      	mov	r2, r0
 80093e4:	460b      	mov	r3, r1
 80093e6:	4610      	mov	r0, r2
 80093e8:	4619      	mov	r1, r3
 80093ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093ee:	f7f7 f903 	bl	80005f8 <__aeabi_dmul>
 80093f2:	4602      	mov	r2, r0
 80093f4:	460b      	mov	r3, r1
 80093f6:	4620      	mov	r0, r4
 80093f8:	4629      	mov	r1, r5
 80093fa:	f7f6 ff45 	bl	8000288 <__aeabi_dsub>
 80093fe:	4603      	mov	r3, r0
 8009400:	460c      	mov	r4, r1
 8009402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009404:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8009408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940a:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 800940e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009410:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8009414:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009418:	f7f7 f8ee 	bl	80005f8 <__aeabi_dmul>
 800941c:	4602      	mov	r2, r0
 800941e:	460b      	mov	r3, r1
 8009420:	4620      	mov	r0, r4
 8009422:	4629      	mov	r1, r5
 8009424:	f7f6 ff32 	bl	800028c <__adddf3>
 8009428:	4603      	mov	r3, r0
 800942a:	460c      	mov	r4, r1
 800942c:	4625      	mov	r5, r4
 800942e:	461c      	mov	r4, r3
 8009430:	f04f 0200 	mov.w	r2, #0
 8009434:	4b29      	ldr	r3, [pc, #164]	; (80094dc <scaraFLowScurve+0x2d0>)
 8009436:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800943a:	f7f7 f8dd 	bl	80005f8 <__aeabi_dmul>
 800943e:	4602      	mov	r2, r0
 8009440:	460b      	mov	r3, r1
 8009442:	4610      	mov	r0, r2
 8009444:	4619      	mov	r1, r3
 8009446:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800944a:	f7f7 f8d5 	bl	80005f8 <__aeabi_dmul>
 800944e:	4602      	mov	r2, r0
 8009450:	460b      	mov	r3, r1
 8009452:	4610      	mov	r0, r2
 8009454:	4619      	mov	r1, r3
 8009456:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800945a:	f7f7 f8cd 	bl	80005f8 <__aeabi_dmul>
 800945e:	4602      	mov	r2, r0
 8009460:	460b      	mov	r3, r1
 8009462:	4610      	mov	r0, r2
 8009464:	4619      	mov	r1, r3
 8009466:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800946a:	f7f7 f8c5 	bl	80005f8 <__aeabi_dmul>
 800946e:	4602      	mov	r2, r0
 8009470:	460b      	mov	r3, r1
 8009472:	4620      	mov	r0, r4
 8009474:	4629      	mov	r1, r5
 8009476:	f7f6 ff09 	bl	800028c <__adddf3>
 800947a:	4603      	mov	r3, r0
 800947c:	460c      	mov	r4, r1
 800947e:	4625      	mov	r5, r4
 8009480:	461c      	mov	r4, r3
 8009482:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009486:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800948a:	f7f7 f8b5 	bl	80005f8 <__aeabi_dmul>
 800948e:	4602      	mov	r2, r0
 8009490:	460b      	mov	r3, r1
 8009492:	4610      	mov	r0, r2
 8009494:	4619      	mov	r1, r3
 8009496:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800949a:	f7f7 f8ad 	bl	80005f8 <__aeabi_dmul>
 800949e:	4602      	mov	r2, r0
 80094a0:	460b      	mov	r3, r1
 80094a2:	4610      	mov	r0, r2
 80094a4:	4619      	mov	r1, r3
 80094a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094aa:	f7f7 f8a5 	bl	80005f8 <__aeabi_dmul>
 80094ae:	4602      	mov	r2, r0
 80094b0:	460b      	mov	r3, r1
 80094b2:	4610      	mov	r0, r2
 80094b4:	4619      	mov	r1, r3
 80094b6:	f04f 0200 	mov.w	r2, #0
 80094ba:	4b09      	ldr	r3, [pc, #36]	; (80094e0 <scaraFLowScurve+0x2d4>)
 80094bc:	f7f7 f9c6 	bl	800084c <__aeabi_ddiv>
 80094c0:	4602      	mov	r2, r0
 80094c2:	460b      	mov	r3, r1
 80094c4:	4620      	mov	r0, r4
 80094c6:	4629      	mov	r1, r5
 80094c8:	f7f6 fede 	bl	8000288 <__aeabi_dsub>
 80094cc:	4603      	mov	r3, r0
 80094ce:	460c      	mov	r4, r1
 80094d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094d2:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80094d6:	f000 bd6f 	b.w	8009fb8 <scaraFLowScurve+0xdac>
 80094da:	bf00      	nop
 80094dc:	3fe00000 	.word	0x3fe00000
 80094e0:	40180000 	.word	0x40180000
		 // Phase 3: does not exist
		 // Phase 4
		 } else if ( ((2*tm) <= time) && ( time < (3*tm)) ) {
 80094e4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80094e8:	4602      	mov	r2, r0
 80094ea:	460b      	mov	r3, r1
 80094ec:	f7f6 fece 	bl	800028c <__adddf3>
 80094f0:	4603      	mov	r3, r0
 80094f2:	460c      	mov	r4, r1
 80094f4:	461a      	mov	r2, r3
 80094f6:	4623      	mov	r3, r4
 80094f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80094fc:	f7f7 fb02 	bl	8000b04 <__aeabi_dcmpge>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	f000 80a2 	beq.w	800964c <scaraFLowScurve+0x440>
 8009508:	f04f 0200 	mov.w	r2, #0
 800950c:	4b4c      	ldr	r3, [pc, #304]	; (8009640 <scaraFLowScurve+0x434>)
 800950e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009512:	f7f7 f871 	bl	80005f8 <__aeabi_dmul>
 8009516:	4603      	mov	r3, r0
 8009518:	460c      	mov	r4, r1
 800951a:	461a      	mov	r2, r3
 800951c:	4623      	mov	r3, r4
 800951e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009522:	f7f7 fadb 	bl	8000adc <__aeabi_dcmplt>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	f000 808f 	beq.w	800964c <scaraFLowScurve+0x440>
			 t = time - 2*tm;
 800952e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009532:	4602      	mov	r2, r0
 8009534:	460b      	mov	r3, r1
 8009536:	f7f6 fea9 	bl	800028c <__adddf3>
 800953a:	4603      	mov	r3, r0
 800953c:	460c      	mov	r4, r1
 800953e:	461a      	mov	r2, r3
 8009540:	4623      	mov	r3, r4
 8009542:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009546:	f7f6 fe9f 	bl	8000288 <__aeabi_dsub>
 800954a:	4603      	mov	r3, r0
 800954c:	460c      	mov	r4, r1
 800954e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 8009552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009554:	613b      	str	r3, [r7, #16]
 8009556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009558:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800955c:	617b      	str	r3, [r7, #20]
 800955e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009562:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009566:	f7f7 f847 	bl	80005f8 <__aeabi_dmul>
 800956a:	4603      	mov	r3, r0
 800956c:	460c      	mov	r4, r1
 800956e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009570:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2 - 0.5*j_max*t*t;
 8009574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009576:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 800957a:	f04f 0200 	mov.w	r2, #0
 800957e:	4b31      	ldr	r3, [pc, #196]	; (8009644 <scaraFLowScurve+0x438>)
 8009580:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009584:	f7f7 f838 	bl	80005f8 <__aeabi_dmul>
 8009588:	4602      	mov	r2, r0
 800958a:	460b      	mov	r3, r1
 800958c:	4610      	mov	r0, r2
 800958e:	4619      	mov	r1, r3
 8009590:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009594:	f7f7 f830 	bl	80005f8 <__aeabi_dmul>
 8009598:	4602      	mov	r2, r0
 800959a:	460b      	mov	r3, r1
 800959c:	4610      	mov	r0, r2
 800959e:	4619      	mov	r1, r3
 80095a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80095a4:	f7f7 f828 	bl	80005f8 <__aeabi_dmul>
 80095a8:	4602      	mov	r2, r0
 80095aa:	460b      	mov	r3, r1
 80095ac:	4620      	mov	r0, r4
 80095ae:	4629      	mov	r1, r5
 80095b0:	f7f6 fe6a 	bl	8000288 <__aeabi_dsub>
 80095b4:	4603      	mov	r3, r0
 80095b6:	460c      	mov	r4, r1
 80095b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095ba:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t - j_max*t*t*t/6;
 80095be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c0:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 80095c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c6:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 80095ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80095ce:	f7f7 f813 	bl	80005f8 <__aeabi_dmul>
 80095d2:	4602      	mov	r2, r0
 80095d4:	460b      	mov	r3, r1
 80095d6:	4620      	mov	r0, r4
 80095d8:	4629      	mov	r1, r5
 80095da:	f7f6 fe57 	bl	800028c <__adddf3>
 80095de:	4603      	mov	r3, r0
 80095e0:	460c      	mov	r4, r1
 80095e2:	4625      	mov	r5, r4
 80095e4:	461c      	mov	r4, r3
 80095e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80095ea:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80095ee:	f7f7 f803 	bl	80005f8 <__aeabi_dmul>
 80095f2:	4602      	mov	r2, r0
 80095f4:	460b      	mov	r3, r1
 80095f6:	4610      	mov	r0, r2
 80095f8:	4619      	mov	r1, r3
 80095fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80095fe:	f7f6 fffb 	bl	80005f8 <__aeabi_dmul>
 8009602:	4602      	mov	r2, r0
 8009604:	460b      	mov	r3, r1
 8009606:	4610      	mov	r0, r2
 8009608:	4619      	mov	r1, r3
 800960a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800960e:	f7f6 fff3 	bl	80005f8 <__aeabi_dmul>
 8009612:	4602      	mov	r2, r0
 8009614:	460b      	mov	r3, r1
 8009616:	4610      	mov	r0, r2
 8009618:	4619      	mov	r1, r3
 800961a:	f04f 0200 	mov.w	r2, #0
 800961e:	4b0a      	ldr	r3, [pc, #40]	; (8009648 <scaraFLowScurve+0x43c>)
 8009620:	f7f7 f914 	bl	800084c <__aeabi_ddiv>
 8009624:	4602      	mov	r2, r0
 8009626:	460b      	mov	r3, r1
 8009628:	4620      	mov	r0, r4
 800962a:	4629      	mov	r1, r5
 800962c:	f7f6 fe2c 	bl	8000288 <__aeabi_dsub>
 8009630:	4603      	mov	r3, r0
 8009632:	460c      	mov	r4, r1
 8009634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009636:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800963a:	f000 bcbd 	b.w	8009fb8 <scaraFLowScurve+0xdac>
 800963e:	bf00      	nop
 8009640:	40080000 	.word	0x40080000
 8009644:	3fe00000 	.word	0x3fe00000
 8009648:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm) <= time) && ( time < (4*tm)) ) {
 800964c:	f04f 0200 	mov.w	r2, #0
 8009650:	4b88      	ldr	r3, [pc, #544]	; (8009874 <scaraFLowScurve+0x668>)
 8009652:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009656:	f7f6 ffcf 	bl	80005f8 <__aeabi_dmul>
 800965a:	4603      	mov	r3, r0
 800965c:	460c      	mov	r4, r1
 800965e:	461a      	mov	r2, r3
 8009660:	4623      	mov	r3, r4
 8009662:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009666:	f7f7 fa4d 	bl	8000b04 <__aeabi_dcmpge>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	f000 80ec 	beq.w	800984a <scaraFLowScurve+0x63e>
 8009672:	f04f 0200 	mov.w	r2, #0
 8009676:	4b80      	ldr	r3, [pc, #512]	; (8009878 <scaraFLowScurve+0x66c>)
 8009678:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800967c:	f7f6 ffbc 	bl	80005f8 <__aeabi_dmul>
 8009680:	4603      	mov	r3, r0
 8009682:	460c      	mov	r4, r1
 8009684:	461a      	mov	r2, r3
 8009686:	4623      	mov	r3, r4
 8009688:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800968c:	f7f7 fa26 	bl	8000adc <__aeabi_dcmplt>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	f000 80d9 	beq.w	800984a <scaraFLowScurve+0x63e>
			 t = time - 3*tm;
 8009698:	f04f 0200 	mov.w	r2, #0
 800969c:	4b75      	ldr	r3, [pc, #468]	; (8009874 <scaraFLowScurve+0x668>)
 800969e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80096a2:	f7f6 ffa9 	bl	80005f8 <__aeabi_dmul>
 80096a6:	4603      	mov	r3, r0
 80096a8:	460c      	mov	r4, r1
 80096aa:	461a      	mov	r2, r3
 80096ac:	4623      	mov	r3, r4
 80096ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80096b2:	f7f6 fde9 	bl	8000288 <__aeabi_dsub>
 80096b6:	4603      	mov	r3, r0
 80096b8:	460c      	mov	r4, r1
 80096ba:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 80096be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096c0:	60bb      	str	r3, [r7, #8]
 80096c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80096c8:	60fb      	str	r3, [r7, #12]
 80096ca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80096ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80096d2:	f7f6 ff91 	bl	80005f8 <__aeabi_dmul>
 80096d6:	4603      	mov	r3, r0
 80096d8:	460c      	mov	r4, r1
 80096da:	4625      	mov	r5, r4
 80096dc:	461c      	mov	r4, r3
 80096de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80096e2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80096e6:	f7f6 ff87 	bl	80005f8 <__aeabi_dmul>
 80096ea:	4602      	mov	r2, r0
 80096ec:	460b      	mov	r3, r1
 80096ee:	4620      	mov	r0, r4
 80096f0:	4629      	mov	r1, r5
 80096f2:	f7f6 fdcb 	bl	800028c <__adddf3>
 80096f6:	4603      	mov	r3, r0
 80096f8:	460c      	mov	r4, r1
 80096fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096fc:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 8009700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009702:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 8009706:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800970a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800970e:	f7f6 ff73 	bl	80005f8 <__aeabi_dmul>
 8009712:	4602      	mov	r2, r0
 8009714:	460b      	mov	r3, r1
 8009716:	4610      	mov	r0, r2
 8009718:	4619      	mov	r1, r3
 800971a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800971e:	f7f6 ff6b 	bl	80005f8 <__aeabi_dmul>
 8009722:	4602      	mov	r2, r0
 8009724:	460b      	mov	r3, r1
 8009726:	4620      	mov	r0, r4
 8009728:	4629      	mov	r1, r5
 800972a:	f7f6 fdad 	bl	8000288 <__aeabi_dsub>
 800972e:	4603      	mov	r3, r0
 8009730:	460c      	mov	r4, r1
 8009732:	4625      	mov	r5, r4
 8009734:	461c      	mov	r4, r3
 8009736:	f04f 0200 	mov.w	r2, #0
 800973a:	4b50      	ldr	r3, [pc, #320]	; (800987c <scaraFLowScurve+0x670>)
 800973c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009740:	f7f6 ff5a 	bl	80005f8 <__aeabi_dmul>
 8009744:	4602      	mov	r2, r0
 8009746:	460b      	mov	r3, r1
 8009748:	4610      	mov	r0, r2
 800974a:	4619      	mov	r1, r3
 800974c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009750:	f7f6 ff52 	bl	80005f8 <__aeabi_dmul>
 8009754:	4602      	mov	r2, r0
 8009756:	460b      	mov	r3, r1
 8009758:	4610      	mov	r0, r2
 800975a:	4619      	mov	r1, r3
 800975c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009760:	f7f6 ff4a 	bl	80005f8 <__aeabi_dmul>
 8009764:	4602      	mov	r2, r0
 8009766:	460b      	mov	r3, r1
 8009768:	4620      	mov	r0, r4
 800976a:	4629      	mov	r1, r5
 800976c:	f7f6 fd8e 	bl	800028c <__adddf3>
 8009770:	4603      	mov	r3, r0
 8009772:	460c      	mov	r4, r1
 8009774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009776:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 800977a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977c:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8009780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009782:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8009786:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800978a:	f7f6 ff35 	bl	80005f8 <__aeabi_dmul>
 800978e:	4602      	mov	r2, r0
 8009790:	460b      	mov	r3, r1
 8009792:	4620      	mov	r0, r4
 8009794:	4629      	mov	r1, r5
 8009796:	f7f6 fd79 	bl	800028c <__adddf3>
 800979a:	4603      	mov	r3, r0
 800979c:	460c      	mov	r4, r1
 800979e:	4625      	mov	r5, r4
 80097a0:	461c      	mov	r4, r3
									- 0.5*j_max*tm*t*t
 80097a2:	f04f 0200 	mov.w	r2, #0
 80097a6:	4b35      	ldr	r3, [pc, #212]	; (800987c <scaraFLowScurve+0x670>)
 80097a8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80097ac:	f7f6 ff24 	bl	80005f8 <__aeabi_dmul>
 80097b0:	4602      	mov	r2, r0
 80097b2:	460b      	mov	r3, r1
 80097b4:	4610      	mov	r0, r2
 80097b6:	4619      	mov	r1, r3
 80097b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80097bc:	f7f6 ff1c 	bl	80005f8 <__aeabi_dmul>
 80097c0:	4602      	mov	r2, r0
 80097c2:	460b      	mov	r3, r1
 80097c4:	4610      	mov	r0, r2
 80097c6:	4619      	mov	r1, r3
 80097c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097cc:	f7f6 ff14 	bl	80005f8 <__aeabi_dmul>
 80097d0:	4602      	mov	r2, r0
 80097d2:	460b      	mov	r3, r1
 80097d4:	4610      	mov	r0, r2
 80097d6:	4619      	mov	r1, r3
 80097d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097dc:	f7f6 ff0c 	bl	80005f8 <__aeabi_dmul>
 80097e0:	4602      	mov	r2, r0
 80097e2:	460b      	mov	r3, r1
 80097e4:	4620      	mov	r0, r4
 80097e6:	4629      	mov	r1, r5
 80097e8:	f7f6 fd4e 	bl	8000288 <__aeabi_dsub>
 80097ec:	4603      	mov	r3, r0
 80097ee:	460c      	mov	r4, r1
 80097f0:	4625      	mov	r5, r4
 80097f2:	461c      	mov	r4, r3
									+ j_max*t*t*t/6;
 80097f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097f8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80097fc:	f7f6 fefc 	bl	80005f8 <__aeabi_dmul>
 8009800:	4602      	mov	r2, r0
 8009802:	460b      	mov	r3, r1
 8009804:	4610      	mov	r0, r2
 8009806:	4619      	mov	r1, r3
 8009808:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800980c:	f7f6 fef4 	bl	80005f8 <__aeabi_dmul>
 8009810:	4602      	mov	r2, r0
 8009812:	460b      	mov	r3, r1
 8009814:	4610      	mov	r0, r2
 8009816:	4619      	mov	r1, r3
 8009818:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800981c:	f7f6 feec 	bl	80005f8 <__aeabi_dmul>
 8009820:	4602      	mov	r2, r0
 8009822:	460b      	mov	r3, r1
 8009824:	4610      	mov	r0, r2
 8009826:	4619      	mov	r1, r3
 8009828:	f04f 0200 	mov.w	r2, #0
 800982c:	4b14      	ldr	r3, [pc, #80]	; (8009880 <scaraFLowScurve+0x674>)
 800982e:	f7f7 f80d 	bl	800084c <__aeabi_ddiv>
 8009832:	4602      	mov	r2, r0
 8009834:	460b      	mov	r3, r1
 8009836:	4620      	mov	r0, r4
 8009838:	4629      	mov	r1, r5
 800983a:	f7f6 fd27 	bl	800028c <__adddf3>
 800983e:	4603      	mov	r3, r0
 8009840:	460c      	mov	r4, r1
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 8009842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009844:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009848:	e3b6      	b.n	8009fb8 <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 800984a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800984c:	f04f 0300 	mov.w	r3, #0
 8009850:	f04f 0400 	mov.w	r4, #0
 8009854:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 8009858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800985a:	f04f 0300 	mov.w	r3, #0
 800985e:	f04f 0400 	mov.w	r4, #0
 8009862:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 8009866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009868:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800986c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800986e:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009872:	e3a1      	b.n	8009fb8 <scaraFLowScurve+0xdac>
 8009874:	40080000 	.word	0x40080000
 8009878:	40100000 	.word	0x40100000
 800987c:	3fe00000 	.word	0x3fe00000
 8009880:	40180000 	.word	0x40180000
		 }

	 // SCURVE 5 PHASE: tc > 0
	 } else if ( 5 == scurve->num_of_phase) {
 8009884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009886:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800988a:	2b05      	cmp	r3, #5
 800988c:	f040 8392 	bne.w	8009fb4 <scaraFLowScurve+0xda8>
		 // Phase 1
		 if ( (0 <= time) && ( time < tm)) {
 8009890:	f04f 0200 	mov.w	r2, #0
 8009894:	f04f 0300 	mov.w	r3, #0
 8009898:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800989c:	f7f7 f932 	bl	8000b04 <__aeabi_dcmpge>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d058      	beq.n	8009958 <scaraFLowScurve+0x74c>
 80098a6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80098aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80098ae:	f7f7 f915 	bl	8000adc <__aeabi_dcmplt>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d04f      	beq.n	8009958 <scaraFLowScurve+0x74c>
			 t = time;
 80098b8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80098bc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 80098c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098c4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80098c8:	f7f6 fe96 	bl	80005f8 <__aeabi_dmul>
 80098cc:	4603      	mov	r3, r0
 80098ce:	460c      	mov	r4, r1
 80098d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098d2:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 80098d6:	f04f 0200 	mov.w	r2, #0
 80098da:	4b91      	ldr	r3, [pc, #580]	; (8009b20 <scaraFLowScurve+0x914>)
 80098dc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80098e0:	f7f6 fe8a 	bl	80005f8 <__aeabi_dmul>
 80098e4:	4603      	mov	r3, r0
 80098e6:	460c      	mov	r4, r1
 80098e8:	4618      	mov	r0, r3
 80098ea:	4621      	mov	r1, r4
 80098ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098f0:	f7f6 fe82 	bl	80005f8 <__aeabi_dmul>
 80098f4:	4603      	mov	r3, r0
 80098f6:	460c      	mov	r4, r1
 80098f8:	4618      	mov	r0, r3
 80098fa:	4621      	mov	r1, r4
 80098fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009900:	f7f6 fe7a 	bl	80005f8 <__aeabi_dmul>
 8009904:	4603      	mov	r3, r0
 8009906:	460c      	mov	r4, r1
 8009908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800990a:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 800990e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009912:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009916:	f7f6 fe6f 	bl	80005f8 <__aeabi_dmul>
 800991a:	4603      	mov	r3, r0
 800991c:	460c      	mov	r4, r1
 800991e:	4618      	mov	r0, r3
 8009920:	4621      	mov	r1, r4
 8009922:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009926:	f7f6 fe67 	bl	80005f8 <__aeabi_dmul>
 800992a:	4603      	mov	r3, r0
 800992c:	460c      	mov	r4, r1
 800992e:	4618      	mov	r0, r3
 8009930:	4621      	mov	r1, r4
 8009932:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009936:	f7f6 fe5f 	bl	80005f8 <__aeabi_dmul>
 800993a:	4603      	mov	r3, r0
 800993c:	460c      	mov	r4, r1
 800993e:	4618      	mov	r0, r3
 8009940:	4621      	mov	r1, r4
 8009942:	f04f 0200 	mov.w	r2, #0
 8009946:	4b77      	ldr	r3, [pc, #476]	; (8009b24 <scaraFLowScurve+0x918>)
 8009948:	f7f6 ff80 	bl	800084c <__aeabi_ddiv>
 800994c:	4603      	mov	r3, r0
 800994e:	460c      	mov	r4, r1
 8009950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009952:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009956:	e32f      	b.n	8009fb8 <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 8009958:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800995c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009960:	f7f7 f8c6 	bl	8000af0 <__aeabi_dcmple>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	f000 80de 	beq.w	8009b28 <scaraFLowScurve+0x91c>
 800996c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009970:	4602      	mov	r2, r0
 8009972:	460b      	mov	r3, r1
 8009974:	f7f6 fc8a 	bl	800028c <__adddf3>
 8009978:	4602      	mov	r2, r0
 800997a:	460b      	mov	r3, r1
 800997c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009980:	f7f7 f8ac 	bl	8000adc <__aeabi_dcmplt>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	f000 80ce 	beq.w	8009b28 <scaraFLowScurve+0x91c>
			 t = time - tm;
 800998c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009990:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009994:	f7f6 fc78 	bl	8000288 <__aeabi_dsub>
 8009998:	4603      	mov	r3, r0
 800999a:	460c      	mov	r4, r1
 800999c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 80099a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80099a4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80099a8:	f7f6 fe26 	bl	80005f8 <__aeabi_dmul>
 80099ac:	4603      	mov	r3, r0
 80099ae:	460c      	mov	r4, r1
 80099b0:	4625      	mov	r5, r4
 80099b2:	461c      	mov	r4, r3
 80099b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80099b8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80099bc:	f7f6 fe1c 	bl	80005f8 <__aeabi_dmul>
 80099c0:	4602      	mov	r2, r0
 80099c2:	460b      	mov	r3, r1
 80099c4:	4620      	mov	r0, r4
 80099c6:	4629      	mov	r1, r5
 80099c8:	f7f6 fc5e 	bl	8000288 <__aeabi_dsub>
 80099cc:	4603      	mov	r3, r0
 80099ce:	460c      	mov	r4, r1
 80099d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099d2:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 80099d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d8:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 80099dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80099e0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80099e4:	f7f6 fe08 	bl	80005f8 <__aeabi_dmul>
 80099e8:	4602      	mov	r2, r0
 80099ea:	460b      	mov	r3, r1
 80099ec:	4610      	mov	r0, r2
 80099ee:	4619      	mov	r1, r3
 80099f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80099f4:	f7f6 fe00 	bl	80005f8 <__aeabi_dmul>
 80099f8:	4602      	mov	r2, r0
 80099fa:	460b      	mov	r3, r1
 80099fc:	4620      	mov	r0, r4
 80099fe:	4629      	mov	r1, r5
 8009a00:	f7f6 fc44 	bl	800028c <__adddf3>
 8009a04:	4603      	mov	r3, r0
 8009a06:	460c      	mov	r4, r1
 8009a08:	4625      	mov	r5, r4
 8009a0a:	461c      	mov	r4, r3
 8009a0c:	f04f 0200 	mov.w	r2, #0
 8009a10:	4b43      	ldr	r3, [pc, #268]	; (8009b20 <scaraFLowScurve+0x914>)
 8009a12:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009a16:	f7f6 fdef 	bl	80005f8 <__aeabi_dmul>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	4610      	mov	r0, r2
 8009a20:	4619      	mov	r1, r3
 8009a22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a26:	f7f6 fde7 	bl	80005f8 <__aeabi_dmul>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	4610      	mov	r0, r2
 8009a30:	4619      	mov	r1, r3
 8009a32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a36:	f7f6 fddf 	bl	80005f8 <__aeabi_dmul>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	4620      	mov	r0, r4
 8009a40:	4629      	mov	r1, r5
 8009a42:	f7f6 fc21 	bl	8000288 <__aeabi_dsub>
 8009a46:	4603      	mov	r3, r0
 8009a48:	460c      	mov	r4, r1
 8009a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a4c:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8009a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a52:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 8009a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a58:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8009a5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a60:	f7f6 fdca 	bl	80005f8 <__aeabi_dmul>
 8009a64:	4602      	mov	r2, r0
 8009a66:	460b      	mov	r3, r1
 8009a68:	4620      	mov	r0, r4
 8009a6a:	4629      	mov	r1, r5
 8009a6c:	f7f6 fc0e 	bl	800028c <__adddf3>
 8009a70:	4603      	mov	r3, r0
 8009a72:	460c      	mov	r4, r1
 8009a74:	4625      	mov	r5, r4
 8009a76:	461c      	mov	r4, r3
 8009a78:	f04f 0200 	mov.w	r2, #0
 8009a7c:	4b28      	ldr	r3, [pc, #160]	; (8009b20 <scaraFLowScurve+0x914>)
 8009a7e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009a82:	f7f6 fdb9 	bl	80005f8 <__aeabi_dmul>
 8009a86:	4602      	mov	r2, r0
 8009a88:	460b      	mov	r3, r1
 8009a8a:	4610      	mov	r0, r2
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009a92:	f7f6 fdb1 	bl	80005f8 <__aeabi_dmul>
 8009a96:	4602      	mov	r2, r0
 8009a98:	460b      	mov	r3, r1
 8009a9a:	4610      	mov	r0, r2
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009aa2:	f7f6 fda9 	bl	80005f8 <__aeabi_dmul>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	4610      	mov	r0, r2
 8009aac:	4619      	mov	r1, r3
 8009aae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ab2:	f7f6 fda1 	bl	80005f8 <__aeabi_dmul>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	460b      	mov	r3, r1
 8009aba:	4620      	mov	r0, r4
 8009abc:	4629      	mov	r1, r5
 8009abe:	f7f6 fbe5 	bl	800028c <__adddf3>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	460c      	mov	r4, r1
 8009ac6:	4625      	mov	r5, r4
 8009ac8:	461c      	mov	r4, r3
 8009aca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ace:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009ad2:	f7f6 fd91 	bl	80005f8 <__aeabi_dmul>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	460b      	mov	r3, r1
 8009ada:	4610      	mov	r0, r2
 8009adc:	4619      	mov	r1, r3
 8009ade:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ae2:	f7f6 fd89 	bl	80005f8 <__aeabi_dmul>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	460b      	mov	r3, r1
 8009aea:	4610      	mov	r0, r2
 8009aec:	4619      	mov	r1, r3
 8009aee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009af2:	f7f6 fd81 	bl	80005f8 <__aeabi_dmul>
 8009af6:	4602      	mov	r2, r0
 8009af8:	460b      	mov	r3, r1
 8009afa:	4610      	mov	r0, r2
 8009afc:	4619      	mov	r1, r3
 8009afe:	f04f 0200 	mov.w	r2, #0
 8009b02:	4b08      	ldr	r3, [pc, #32]	; (8009b24 <scaraFLowScurve+0x918>)
 8009b04:	f7f6 fea2 	bl	800084c <__aeabi_ddiv>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	4629      	mov	r1, r5
 8009b10:	f7f6 fbba 	bl	8000288 <__aeabi_dsub>
 8009b14:	4603      	mov	r3, r0
 8009b16:	460c      	mov	r4, r1
 8009b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b1a:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009b1e:	e24b      	b.n	8009fb8 <scaraFLowScurve+0xdac>
 8009b20:	3fe00000 	.word	0x3fe00000
 8009b24:	40180000 	.word	0x40180000
		 // Phase 3
		 } else if ( ((2*tm) <= time) && ( time < (2*tm + tc)) ) {
 8009b28:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	460b      	mov	r3, r1
 8009b30:	f7f6 fbac 	bl	800028c <__adddf3>
 8009b34:	4602      	mov	r2, r0
 8009b36:	460b      	mov	r3, r1
 8009b38:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009b3c:	f7f6 ffe2 	bl	8000b04 <__aeabi_dcmpge>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d04b      	beq.n	8009bde <scaraFLowScurve+0x9d2>
 8009b46:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	f7f6 fb9d 	bl	800028c <__adddf3>
 8009b52:	4602      	mov	r2, r0
 8009b54:	460b      	mov	r3, r1
 8009b56:	4610      	mov	r0, r2
 8009b58:	4619      	mov	r1, r3
 8009b5a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009b5e:	f7f6 fb95 	bl	800028c <__adddf3>
 8009b62:	4602      	mov	r2, r0
 8009b64:	460b      	mov	r3, r1
 8009b66:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009b6a:	f7f6 ffb7 	bl	8000adc <__aeabi_dcmplt>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d034      	beq.n	8009bde <scaraFLowScurve+0x9d2>
			 t = time - 2*tm;
 8009b74:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009b78:	4602      	mov	r2, r0
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	f7f6 fb86 	bl	800028c <__adddf3>
 8009b80:	4603      	mov	r3, r0
 8009b82:	460c      	mov	r4, r1
 8009b84:	461a      	mov	r2, r3
 8009b86:	4623      	mov	r3, r4
 8009b88:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009b8c:	f7f6 fb7c 	bl	8000288 <__aeabi_dsub>
 8009b90:	4603      	mov	r3, r0
 8009b92:	460c      	mov	r4, r1
 8009b94:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	0;
 8009b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b9a:	f04f 0300 	mov.w	r3, #0
 8009b9e:	f04f 0400 	mov.w	r4, #0
 8009ba2:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2;
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba8:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8009bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bae:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t;
 8009bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb4:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8009bbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009bc2:	f7f6 fd19 	bl	80005f8 <__aeabi_dmul>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	460b      	mov	r3, r1
 8009bca:	4620      	mov	r0, r4
 8009bcc:	4629      	mov	r1, r5
 8009bce:	f7f6 fb5d 	bl	800028c <__adddf3>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	460c      	mov	r4, r1
 8009bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bd8:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009bdc:	e1ec      	b.n	8009fb8 <scaraFLowScurve+0xdac>
		 // Phase 4
		 } else if ( ((2*tm + tc) <= time) && ( time < (3*tm + tc)) ) {
 8009bde:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009be2:	4602      	mov	r2, r0
 8009be4:	460b      	mov	r3, r1
 8009be6:	f7f6 fb51 	bl	800028c <__adddf3>
 8009bea:	4602      	mov	r2, r0
 8009bec:	460b      	mov	r3, r1
 8009bee:	4610      	mov	r0, r2
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009bf6:	f7f6 fb49 	bl	800028c <__adddf3>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009c02:	f7f6 ff7f 	bl	8000b04 <__aeabi_dcmpge>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	f000 80af 	beq.w	8009d6c <scaraFLowScurve+0xb60>
 8009c0e:	f04f 0200 	mov.w	r2, #0
 8009c12:	4b53      	ldr	r3, [pc, #332]	; (8009d60 <scaraFLowScurve+0xb54>)
 8009c14:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009c18:	f7f6 fcee 	bl	80005f8 <__aeabi_dmul>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	460b      	mov	r3, r1
 8009c20:	4610      	mov	r0, r2
 8009c22:	4619      	mov	r1, r3
 8009c24:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009c28:	f7f6 fb30 	bl	800028c <__adddf3>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	460b      	mov	r3, r1
 8009c30:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009c34:	f7f6 ff52 	bl	8000adc <__aeabi_dcmplt>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f000 8096 	beq.w	8009d6c <scaraFLowScurve+0xb60>
			 t = time - (2*tm + tc);
 8009c40:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009c44:	4602      	mov	r2, r0
 8009c46:	460b      	mov	r3, r1
 8009c48:	f7f6 fb20 	bl	800028c <__adddf3>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	460c      	mov	r4, r1
 8009c50:	4618      	mov	r0, r3
 8009c52:	4621      	mov	r1, r4
 8009c54:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009c58:	f7f6 fb18 	bl	800028c <__adddf3>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	460c      	mov	r4, r1
 8009c60:	461a      	mov	r2, r3
 8009c62:	4623      	mov	r3, r4
 8009c64:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009c68:	f7f6 fb0e 	bl	8000288 <__aeabi_dsub>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	460c      	mov	r4, r1
 8009c70:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 8009c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c76:	603b      	str	r3, [r7, #0]
 8009c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c7a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009c7e:	607b      	str	r3, [r7, #4]
 8009c80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c88:	f7f6 fcb6 	bl	80005f8 <__aeabi_dmul>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	460c      	mov	r4, r1
 8009c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c92:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_3 - 0.5*j_max*t*t;
 8009c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c98:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 8009c9c:	f04f 0200 	mov.w	r2, #0
 8009ca0:	4b30      	ldr	r3, [pc, #192]	; (8009d64 <scaraFLowScurve+0xb58>)
 8009ca2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009ca6:	f7f6 fca7 	bl	80005f8 <__aeabi_dmul>
 8009caa:	4602      	mov	r2, r0
 8009cac:	460b      	mov	r3, r1
 8009cae:	4610      	mov	r0, r2
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009cb6:	f7f6 fc9f 	bl	80005f8 <__aeabi_dmul>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	4610      	mov	r0, r2
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009cc6:	f7f6 fc97 	bl	80005f8 <__aeabi_dmul>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	460b      	mov	r3, r1
 8009cce:	4620      	mov	r0, r4
 8009cd0:	4629      	mov	r1, r5
 8009cd2:	f7f6 fad9 	bl	8000288 <__aeabi_dsub>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	460c      	mov	r4, r1
 8009cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cdc:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_3 + scurve->v_3*t - j_max*t*t*t/6;
 8009ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce2:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
 8009ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce8:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8009cec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009cf0:	f7f6 fc82 	bl	80005f8 <__aeabi_dmul>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	4629      	mov	r1, r5
 8009cfc:	f7f6 fac6 	bl	800028c <__adddf3>
 8009d00:	4603      	mov	r3, r0
 8009d02:	460c      	mov	r4, r1
 8009d04:	4625      	mov	r5, r4
 8009d06:	461c      	mov	r4, r3
 8009d08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d0c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009d10:	f7f6 fc72 	bl	80005f8 <__aeabi_dmul>
 8009d14:	4602      	mov	r2, r0
 8009d16:	460b      	mov	r3, r1
 8009d18:	4610      	mov	r0, r2
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d20:	f7f6 fc6a 	bl	80005f8 <__aeabi_dmul>
 8009d24:	4602      	mov	r2, r0
 8009d26:	460b      	mov	r3, r1
 8009d28:	4610      	mov	r0, r2
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d30:	f7f6 fc62 	bl	80005f8 <__aeabi_dmul>
 8009d34:	4602      	mov	r2, r0
 8009d36:	460b      	mov	r3, r1
 8009d38:	4610      	mov	r0, r2
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	f04f 0200 	mov.w	r2, #0
 8009d40:	4b09      	ldr	r3, [pc, #36]	; (8009d68 <scaraFLowScurve+0xb5c>)
 8009d42:	f7f6 fd83 	bl	800084c <__aeabi_ddiv>
 8009d46:	4602      	mov	r2, r0
 8009d48:	460b      	mov	r3, r1
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	4629      	mov	r1, r5
 8009d4e:	f7f6 fa9b 	bl	8000288 <__aeabi_dsub>
 8009d52:	4603      	mov	r3, r0
 8009d54:	460c      	mov	r4, r1
 8009d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d58:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009d5c:	e12c      	b.n	8009fb8 <scaraFLowScurve+0xdac>
 8009d5e:	bf00      	nop
 8009d60:	40080000 	.word	0x40080000
 8009d64:	3fe00000 	.word	0x3fe00000
 8009d68:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm + tc) <= time) && ( time < (4*tm + tc)) ) {
 8009d6c:	f04f 0200 	mov.w	r2, #0
 8009d70:	4b94      	ldr	r3, [pc, #592]	; (8009fc4 <scaraFLowScurve+0xdb8>)
 8009d72:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009d76:	f7f6 fc3f 	bl	80005f8 <__aeabi_dmul>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	4610      	mov	r0, r2
 8009d80:	4619      	mov	r1, r3
 8009d82:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009d86:	f7f6 fa81 	bl	800028c <__adddf3>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009d92:	f7f6 feb7 	bl	8000b04 <__aeabi_dcmpge>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	f000 80f6 	beq.w	8009f8a <scaraFLowScurve+0xd7e>
 8009d9e:	f04f 0200 	mov.w	r2, #0
 8009da2:	4b89      	ldr	r3, [pc, #548]	; (8009fc8 <scaraFLowScurve+0xdbc>)
 8009da4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009da8:	f7f6 fc26 	bl	80005f8 <__aeabi_dmul>
 8009dac:	4602      	mov	r2, r0
 8009dae:	460b      	mov	r3, r1
 8009db0:	4610      	mov	r0, r2
 8009db2:	4619      	mov	r1, r3
 8009db4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009db8:	f7f6 fa68 	bl	800028c <__adddf3>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009dc4:	f7f6 fe8a 	bl	8000adc <__aeabi_dcmplt>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f000 80dd 	beq.w	8009f8a <scaraFLowScurve+0xd7e>
			 t = time - (3*tm + tc);
 8009dd0:	f04f 0200 	mov.w	r2, #0
 8009dd4:	4b7b      	ldr	r3, [pc, #492]	; (8009fc4 <scaraFLowScurve+0xdb8>)
 8009dd6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009dda:	f7f6 fc0d 	bl	80005f8 <__aeabi_dmul>
 8009dde:	4602      	mov	r2, r0
 8009de0:	460b      	mov	r3, r1
 8009de2:	4610      	mov	r0, r2
 8009de4:	4619      	mov	r1, r3
 8009de6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009dea:	f7f6 fa4f 	bl	800028c <__adddf3>
 8009dee:	4602      	mov	r2, r0
 8009df0:	460b      	mov	r3, r1
 8009df2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009df6:	f7f6 fa47 	bl	8000288 <__aeabi_dsub>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 8009e02:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8009e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e06:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8009e0a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009e0e:	4620      	mov	r0, r4
 8009e10:	4629      	mov	r1, r5
 8009e12:	f7f6 fbf1 	bl	80005f8 <__aeabi_dmul>
 8009e16:	4603      	mov	r3, r0
 8009e18:	460c      	mov	r4, r1
 8009e1a:	4625      	mov	r5, r4
 8009e1c:	461c      	mov	r4, r3
 8009e1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e22:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009e26:	f7f6 fbe7 	bl	80005f8 <__aeabi_dmul>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	4620      	mov	r0, r4
 8009e30:	4629      	mov	r1, r5
 8009e32:	f7f6 fa2b 	bl	800028c <__adddf3>
 8009e36:	4603      	mov	r3, r0
 8009e38:	460c      	mov	r4, r1
 8009e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e3c:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 8009e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e42:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 8009e46:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009e4a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009e4e:	f7f6 fbd3 	bl	80005f8 <__aeabi_dmul>
 8009e52:	4602      	mov	r2, r0
 8009e54:	460b      	mov	r3, r1
 8009e56:	4610      	mov	r0, r2
 8009e58:	4619      	mov	r1, r3
 8009e5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e5e:	f7f6 fbcb 	bl	80005f8 <__aeabi_dmul>
 8009e62:	4602      	mov	r2, r0
 8009e64:	460b      	mov	r3, r1
 8009e66:	4620      	mov	r0, r4
 8009e68:	4629      	mov	r1, r5
 8009e6a:	f7f6 fa0d 	bl	8000288 <__aeabi_dsub>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	460c      	mov	r4, r1
 8009e72:	4625      	mov	r5, r4
 8009e74:	461c      	mov	r4, r3
 8009e76:	f04f 0200 	mov.w	r2, #0
 8009e7a:	4b54      	ldr	r3, [pc, #336]	; (8009fcc <scaraFLowScurve+0xdc0>)
 8009e7c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009e80:	f7f6 fbba 	bl	80005f8 <__aeabi_dmul>
 8009e84:	4602      	mov	r2, r0
 8009e86:	460b      	mov	r3, r1
 8009e88:	4610      	mov	r0, r2
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e90:	f7f6 fbb2 	bl	80005f8 <__aeabi_dmul>
 8009e94:	4602      	mov	r2, r0
 8009e96:	460b      	mov	r3, r1
 8009e98:	4610      	mov	r0, r2
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ea0:	f7f6 fbaa 	bl	80005f8 <__aeabi_dmul>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	4629      	mov	r1, r5
 8009eac:	f7f6 f9ee 	bl	800028c <__adddf3>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	460c      	mov	r4, r1
 8009eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eb6:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t - 0.5*j_max*tm*t*t + j_max*t*t*t/6;
 8009eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebc:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec2:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8009ec6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009eca:	f7f6 fb95 	bl	80005f8 <__aeabi_dmul>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	4629      	mov	r1, r5
 8009ed6:	f7f6 f9d9 	bl	800028c <__adddf3>
 8009eda:	4603      	mov	r3, r0
 8009edc:	460c      	mov	r4, r1
 8009ede:	4625      	mov	r5, r4
 8009ee0:	461c      	mov	r4, r3
 8009ee2:	f04f 0200 	mov.w	r2, #0
 8009ee6:	4b39      	ldr	r3, [pc, #228]	; (8009fcc <scaraFLowScurve+0xdc0>)
 8009ee8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009eec:	f7f6 fb84 	bl	80005f8 <__aeabi_dmul>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	4610      	mov	r0, r2
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009efc:	f7f6 fb7c 	bl	80005f8 <__aeabi_dmul>
 8009f00:	4602      	mov	r2, r0
 8009f02:	460b      	mov	r3, r1
 8009f04:	4610      	mov	r0, r2
 8009f06:	4619      	mov	r1, r3
 8009f08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f0c:	f7f6 fb74 	bl	80005f8 <__aeabi_dmul>
 8009f10:	4602      	mov	r2, r0
 8009f12:	460b      	mov	r3, r1
 8009f14:	4610      	mov	r0, r2
 8009f16:	4619      	mov	r1, r3
 8009f18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f1c:	f7f6 fb6c 	bl	80005f8 <__aeabi_dmul>
 8009f20:	4602      	mov	r2, r0
 8009f22:	460b      	mov	r3, r1
 8009f24:	4620      	mov	r0, r4
 8009f26:	4629      	mov	r1, r5
 8009f28:	f7f6 f9ae 	bl	8000288 <__aeabi_dsub>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	460c      	mov	r4, r1
 8009f30:	4625      	mov	r5, r4
 8009f32:	461c      	mov	r4, r3
 8009f34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f38:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009f3c:	f7f6 fb5c 	bl	80005f8 <__aeabi_dmul>
 8009f40:	4602      	mov	r2, r0
 8009f42:	460b      	mov	r3, r1
 8009f44:	4610      	mov	r0, r2
 8009f46:	4619      	mov	r1, r3
 8009f48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f4c:	f7f6 fb54 	bl	80005f8 <__aeabi_dmul>
 8009f50:	4602      	mov	r2, r0
 8009f52:	460b      	mov	r3, r1
 8009f54:	4610      	mov	r0, r2
 8009f56:	4619      	mov	r1, r3
 8009f58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f5c:	f7f6 fb4c 	bl	80005f8 <__aeabi_dmul>
 8009f60:	4602      	mov	r2, r0
 8009f62:	460b      	mov	r3, r1
 8009f64:	4610      	mov	r0, r2
 8009f66:	4619      	mov	r1, r3
 8009f68:	f04f 0200 	mov.w	r2, #0
 8009f6c:	4b18      	ldr	r3, [pc, #96]	; (8009fd0 <scaraFLowScurve+0xdc4>)
 8009f6e:	f7f6 fc6d 	bl	800084c <__aeabi_ddiv>
 8009f72:	4602      	mov	r2, r0
 8009f74:	460b      	mov	r3, r1
 8009f76:	4620      	mov	r0, r4
 8009f78:	4629      	mov	r1, r5
 8009f7a:	f7f6 f987 	bl	800028c <__adddf3>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	460c      	mov	r4, r1
 8009f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f84:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009f88:	e016      	b.n	8009fb8 <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 8009f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f8c:	f04f 0300 	mov.w	r3, #0
 8009f90:	f04f 0400 	mov.w	r4, #0
 8009f94:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 8009f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f9a:	f04f 0300 	mov.w	r3, #0
 8009f9e:	f04f 0400 	mov.w	r4, #0
 8009fa2:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 8009fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa8:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8009fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fae:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009fb2:	e001      	b.n	8009fb8 <scaraFLowScurve+0xdac>
		 }

	 } else {
		 return SCARA_STATUS_ERROR;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	e000      	b.n	8009fba <scaraFLowScurve+0xdae>
	 }

	 return SCARA_STATUS_OK;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3748      	adds	r7, #72	; 0x48
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	40080000 	.word	0x40080000
 8009fc8:	40100000 	.word	0x40100000
 8009fcc:	3fe00000 	.word	0x3fe00000
 8009fd0:	40180000 	.word	0x40180000
 8009fd4:	00000000 	.word	0x00000000

08009fd8 <scaraCheckWorkSpace4>:

/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b088      	sub	sp, #32
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	ed87 0b06 	vstr	d0, [r7, #24]
 8009fe2:	ed87 1b04 	vstr	d1, [r7, #16]
 8009fe6:	ed87 2b02 	vstr	d2, [r7, #8]
 8009fea:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0-0.1 || theta1 > LIM_MAX_J0+0.1) {
 8009fee:	a335      	add	r3, pc, #212	; (adr r3, 800a0c4 <scaraCheckWorkSpace4+0xec>)
 8009ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009ff8:	f7f6 fd70 	bl	8000adc <__aeabi_dcmplt>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d109      	bne.n	800a016 <scaraCheckWorkSpace4+0x3e>
 800a002:	a332      	add	r3, pc, #200	; (adr r3, 800a0cc <scaraCheckWorkSpace4+0xf4>)
 800a004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a008:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a00c:	f7f6 fd84 	bl	8000b18 <__aeabi_dcmpgt>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d001      	beq.n	800a01a <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a016:	2307      	movs	r3, #7
 800a018:	e043      	b.n	800a0a2 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1-0.1 || theta2 > LIM_MAX_J1+0.1) {
 800a01a:	a32e      	add	r3, pc, #184	; (adr r3, 800a0d4 <scaraCheckWorkSpace4+0xfc>)
 800a01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a020:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a024:	f7f6 fd5a 	bl	8000adc <__aeabi_dcmplt>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d109      	bne.n	800a042 <scaraCheckWorkSpace4+0x6a>
 800a02e:	a32b      	add	r3, pc, #172	; (adr r3, 800a0dc <scaraCheckWorkSpace4+0x104>)
 800a030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a034:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a038:	f7f6 fd6e 	bl	8000b18 <__aeabi_dcmpgt>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d001      	beq.n	800a046 <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a042:	2307      	movs	r3, #7
 800a044:	e02d      	b.n	800a0a2 <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 800a046:	f04f 0200 	mov.w	r2, #0
 800a04a:	f04f 0300 	mov.w	r3, #0
 800a04e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a052:	f7f6 fd43 	bl	8000adc <__aeabi_dcmplt>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d109      	bne.n	800a070 <scaraCheckWorkSpace4+0x98>
 800a05c:	f04f 0200 	mov.w	r2, #0
 800a060:	4b17      	ldr	r3, [pc, #92]	; (800a0c0 <scaraCheckWorkSpace4+0xe8>)
 800a062:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a066:	f7f6 fd57 	bl	8000b18 <__aeabi_dcmpgt>
 800a06a:	4603      	mov	r3, r0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d001      	beq.n	800a074 <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a070:	2307      	movs	r3, #7
 800a072:	e016      	b.n	800a0a2 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3-0.1 || theta4 > LIM_MAX_J3+0.1) {
 800a074:	a30e      	add	r3, pc, #56	; (adr r3, 800a0b0 <scaraCheckWorkSpace4+0xd8>)
 800a076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a07e:	f7f6 fd2d 	bl	8000adc <__aeabi_dcmplt>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d109      	bne.n	800a09c <scaraCheckWorkSpace4+0xc4>
 800a088:	a30b      	add	r3, pc, #44	; (adr r3, 800a0b8 <scaraCheckWorkSpace4+0xe0>)
 800a08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a092:	f7f6 fd41 	bl	8000b18 <__aeabi_dcmpgt>
 800a096:	4603      	mov	r3, r0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d001      	beq.n	800a0a0 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a09c:	2307      	movs	r3, #7
 800a09e:	e000      	b.n	800a0a2 <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 800a0a0:	2300      	movs	r3, #0
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3720      	adds	r7, #32
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	f3af 8000 	nop.w
 800a0b0:	a7777778 	.word	0xa7777778
 800a0b4:	c0088956 	.word	0xc0088956
 800a0b8:	a7777778 	.word	0xa7777778
 800a0bc:	40088956 	.word	0x40088956
 800a0c0:	40590000 	.word	0x40590000
 800a0c4:	74444445 	.word	0x74444445
 800a0c8:	bff95623 	.word	0xbff95623
 800a0cc:	74444445 	.word	0x74444445
 800a0d0:	3ff95623 	.word	0x3ff95623
 800a0d4:	54cccccd 	.word	0x54cccccd
 800a0d8:	c003a649 	.word	0xc003a649
 800a0dc:	54cccccd 	.word	0x54cccccd
 800a0e0:	4003a649 	.word	0x4003a649
 800a0e4:	00000000 	.word	0x00000000

0800a0e8 <scaraCheckWorkSpace1>:

/* Check limit 1 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace1 (Trajectory_TargetTypeDef target, double value) {
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	ed87 0b00 	vstr	d0, [r7]
 800a0f4:	73fb      	strb	r3, [r7, #15]
	if ( TRAJECTORY_J0 == target) {
 800a0f6:	7bfb      	ldrb	r3, [r7, #15]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d117      	bne.n	800a12c <scaraCheckWorkSpace1+0x44>
		if ( (LIM_MIN_J0 <= value) && ( value <= LIM_MAX_J0)) {
 800a0fc:	a33d      	add	r3, pc, #244	; (adr r3, 800a1f4 <scaraCheckWorkSpace1+0x10c>)
 800a0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a102:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a106:	f7f6 fcfd 	bl	8000b04 <__aeabi_dcmpge>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d00b      	beq.n	800a128 <scaraCheckWorkSpace1+0x40>
 800a110:	a33a      	add	r3, pc, #232	; (adr r3, 800a1fc <scaraCheckWorkSpace1+0x114>)
 800a112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a116:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a11a:	f7f6 fce9 	bl	8000af0 <__aeabi_dcmple>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d001      	beq.n	800a128 <scaraCheckWorkSpace1+0x40>
			return SCARA_STATUS_OK;
 800a124:	2300      	movs	r3, #0
 800a126:	e054      	b.n	800a1d2 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a128:	2307      	movs	r3, #7
 800a12a:	e052      	b.n	800a1d2 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J1 == target) {
 800a12c:	7bfb      	ldrb	r3, [r7, #15]
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d117      	bne.n	800a162 <scaraCheckWorkSpace1+0x7a>
		if ( (LIM_MIN_J1 <= value) && ( value <= LIM_MAX_J1)) {
 800a132:	a334      	add	r3, pc, #208	; (adr r3, 800a204 <scaraCheckWorkSpace1+0x11c>)
 800a134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a138:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a13c:	f7f6 fce2 	bl	8000b04 <__aeabi_dcmpge>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d00b      	beq.n	800a15e <scaraCheckWorkSpace1+0x76>
 800a146:	a331      	add	r3, pc, #196	; (adr r3, 800a20c <scaraCheckWorkSpace1+0x124>)
 800a148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a150:	f7f6 fcce 	bl	8000af0 <__aeabi_dcmple>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d001      	beq.n	800a15e <scaraCheckWorkSpace1+0x76>
			return SCARA_STATUS_OK;
 800a15a:	2300      	movs	r3, #0
 800a15c:	e039      	b.n	800a1d2 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a15e:	2307      	movs	r3, #7
 800a160:	e037      	b.n	800a1d2 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J2 == target) {
 800a162:	7bfb      	ldrb	r3, [r7, #15]
 800a164:	2b02      	cmp	r3, #2
 800a166:	d118      	bne.n	800a19a <scaraCheckWorkSpace1+0xb2>
		if ( (LIM_MIN_J2 <= value) && ( value <= LIM_MAX_J2)) {
 800a168:	f04f 0200 	mov.w	r2, #0
 800a16c:	f04f 0300 	mov.w	r3, #0
 800a170:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a174:	f7f6 fcc6 	bl	8000b04 <__aeabi_dcmpge>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00b      	beq.n	800a196 <scaraCheckWorkSpace1+0xae>
 800a17e:	f04f 0200 	mov.w	r2, #0
 800a182:	4b1b      	ldr	r3, [pc, #108]	; (800a1f0 <scaraCheckWorkSpace1+0x108>)
 800a184:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a188:	f7f6 fcb2 	bl	8000af0 <__aeabi_dcmple>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d001      	beq.n	800a196 <scaraCheckWorkSpace1+0xae>
			return SCARA_STATUS_OK;
 800a192:	2300      	movs	r3, #0
 800a194:	e01d      	b.n	800a1d2 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a196:	2307      	movs	r3, #7
 800a198:	e01b      	b.n	800a1d2 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J3 == target) {
 800a19a:	7bfb      	ldrb	r3, [r7, #15]
 800a19c:	2b03      	cmp	r3, #3
 800a19e:	d117      	bne.n	800a1d0 <scaraCheckWorkSpace1+0xe8>
		if ( (LIM_MIN_J3 <= value) && ( value <= LIM_MAX_J3)) {
 800a1a0:	a30f      	add	r3, pc, #60	; (adr r3, 800a1e0 <scaraCheckWorkSpace1+0xf8>)
 800a1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a1aa:	f7f6 fcab 	bl	8000b04 <__aeabi_dcmpge>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d00b      	beq.n	800a1cc <scaraCheckWorkSpace1+0xe4>
 800a1b4:	a30c      	add	r3, pc, #48	; (adr r3, 800a1e8 <scaraCheckWorkSpace1+0x100>)
 800a1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a1be:	f7f6 fc97 	bl	8000af0 <__aeabi_dcmple>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d001      	beq.n	800a1cc <scaraCheckWorkSpace1+0xe4>
			return SCARA_STATUS_OK;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	e002      	b.n	800a1d2 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a1cc:	2307      	movs	r3, #7
 800a1ce:	e000      	b.n	800a1d2 <scaraCheckWorkSpace1+0xea>
		}
	} else {
		return SCARA_STATUS_ERROR;
 800a1d0:	2301      	movs	r3, #1
	}
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	f3af 8000 	nop.w
 800a1e0:	daaaaaab 	.word	0xdaaaaaab
 800a1e4:	c007bc89 	.word	0xc007bc89
 800a1e8:	daaaaaab 	.word	0xdaaaaaab
 800a1ec:	4007bc89 	.word	0x4007bc89
 800a1f0:	40590000 	.word	0x40590000
 800a1f4:	daaaaaab 	.word	0xdaaaaaab
 800a1f8:	bff7bc89 	.word	0xbff7bc89
 800a1fc:	daaaaaab 	.word	0xdaaaaaab
 800a200:	3ff7bc89 	.word	0x3ff7bc89
 800a204:	88000000 	.word	0x88000000
 800a208:	c002d97c 	.word	0xc002d97c
 800a20c:	88000000 	.word	0x88000000
 800a210:	4002d97c 	.word	0x4002d97c
 800a214:	00000000 	.word	0x00000000

0800a218 <scaraTestDuty>:
	}
	return SCARA_STATUS_OK;
}

/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 800a218:	b5b0      	push	{r4, r5, r7, lr}
 800a21a:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800a21e:	af2e      	add	r7, sp, #184	; 0xb8
	int32_t sample_count;
	double run_time = 0;
 800a220:	f04f 0300 	mov.w	r3, #0
 800a224:	f04f 0400 	mov.w	r4, #0
 800a228:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a22c:	463b      	mov	r3, r7
 800a22e:	4a36      	ldr	r2, [pc, #216]	; (800a308 <scaraTestDuty+0xf0>)
 800a230:	4618      	mov	r0, r3
 800a232:	4611      	mov	r1, r2
 800a234:	23c0      	movs	r3, #192	; 0xc0
 800a236:	461a      	mov	r2, r3
 800a238:	f00b fc10 	bl	8015a5c <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 800a23c:	4b33      	ldr	r3, [pc, #204]	; (800a30c <scaraTestDuty+0xf4>)
 800a23e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a242:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a246:	a32e      	add	r3, pc, #184	; (adr r3, 800a300 <scaraTestDuty+0xe8>)
 800a248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24c:	f7f6 fafe 	bl	800084c <__aeabi_ddiv>
 800a250:	4603      	mov	r3, r0
 800a252:	460c      	mov	r4, r1
 800a254:	ec44 3b17 	vmov	d7, r3, r4
 800a258:	eeb0 0a47 	vmov.f32	s0, s14
 800a25c:	eef0 0a67 	vmov.f32	s1, s15
 800a260:	f00f f96a 	bl	8019538 <ceil>
 800a264:	ec54 3b10 	vmov	r3, r4, d0
 800a268:	4618      	mov	r0, r3
 800a26a:	4621      	mov	r1, r4
 800a26c:	f7f6 fc74 	bl	8000b58 <__aeabi_d2iz>
 800a270:	4603      	mov	r3, r0
 800a272:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	for (int32_t i = 1; i < sample_count; i++) {
 800a276:	2301      	movs	r3, #1
 800a278:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a27c:	e032      	b.n	800a2e4 <scaraTestDuty+0xcc>
		run_time += T_SAMPLING;
 800a27e:	a320      	add	r3, pc, #128	; (adr r3, 800a300 <scaraTestDuty+0xe8>)
 800a280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a284:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800a288:	f7f6 f800 	bl	800028c <__adddf3>
 800a28c:	4603      	mov	r3, r0
 800a28e:	460c      	mov	r4, r1
 800a290:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 800a294:	463c      	mov	r4, r7
 800a296:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 800a29a:	4668      	mov	r0, sp
 800a29c:	f104 0308 	add.w	r3, r4, #8
 800a2a0:	22b8      	movs	r2, #184	; 0xb8
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	f00b fbda 	bl	8015a5c <memcpy>
 800a2a8:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 800a2b2:	f7fd ffc7 	bl	8008244 <scaraFlowDuty>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
		if (status != SCARA_STATUS_OK) {
 800a2bc:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d002      	beq.n	800a2ca <scaraTestDuty+0xb2>
			return status;
 800a2c4:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a2c8:	e013      	b.n	800a2f2 <scaraTestDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 800a2ca:	463a      	mov	r2, r7
 800a2cc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800a2d0:	4611      	mov	r1, r2
 800a2d2:	22c0      	movs	r2, #192	; 0xc0
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f00b fbc1 	bl	8015a5c <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 800a2da:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a2de:	3301      	adds	r3, #1
 800a2e0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a2e4:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a2e8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	dbc6      	blt.n	800a27e <scaraTestDuty+0x66>
	}
	return SCARA_STATUS_OK;
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bdb0      	pop	{r4, r5, r7, pc}
 800a2fc:	f3af 8000 	nop.w
 800a300:	40000000 	.word	0x40000000
 800a304:	3f847ae1 	.word	0x3f847ae1
 800a308:	200066b8 	.word	0x200066b8
 800a30c:	20005af8 	.word	0x20005af8

0800a310 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 800a310:	b480      	push	{r7}
 800a312:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 800a314:	4b03      	ldr	r3, [pc, #12]	; (800a324 <scaraSetScanFlag+0x14>)
 800a316:	2201      	movs	r2, #1
 800a318:	70da      	strb	r2, [r3, #3]
}
 800a31a:	bf00      	nop
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr
 800a324:	2000081c 	.word	0x2000081c

0800a328 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	4603      	mov	r3, r0
 800a330:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 800a332:	4a05      	ldr	r2, [pc, #20]	; (800a348 <scaraSetOutput+0x20>)
 800a334:	79fb      	ldrb	r3, [r7, #7]
 800a336:	7113      	strb	r3, [r2, #4]
	lowlayer_setOutput(level);
 800a338:	79fb      	ldrb	r3, [r7, #7]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7fa ff64 	bl	8005208 <lowlayer_setOutput>
}
 800a340:	bf00      	nop
 800a342:	3708      	adds	r7, #8
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}
 800a348:	2000081c 	.word	0x2000081c

0800a34c <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 800a34c:	b480      	push	{r7}
 800a34e:	b083      	sub	sp, #12
 800a350:	af00      	add	r7, sp, #0
 800a352:	4603      	mov	r3, r0
 800a354:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 800a356:	4a04      	ldr	r2, [pc, #16]	; (800a368 <scaraSetDutyState+0x1c>)
 800a358:	79fb      	ldrb	r3, [r7, #7]
 800a35a:	7093      	strb	r3, [r2, #2]
}
 800a35c:	bf00      	nop
 800a35e:	370c      	adds	r7, #12
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr
 800a368:	2000081c 	.word	0x2000081c

0800a36c <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	4603      	mov	r3, r0
 800a374:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 800a376:	4a04      	ldr	r2, [pc, #16]	; (800a388 <scaraSetMode+0x1c>)
 800a378:	79fb      	ldrb	r3, [r7, #7]
 800a37a:	7053      	strb	r3, [r2, #1]
}
 800a37c:	bf00      	nop
 800a37e:	370c      	adds	r7, #12
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr
 800a388:	2000081c 	.word	0x2000081c

0800a38c <scaraSetMethod>:

void				scaraSetMethod(SCARA_MethodTypeDef method) {
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	4603      	mov	r3, r0
 800a394:	71fb      	strb	r3, [r7, #7]
	mySCARA.method = method;
 800a396:	4a04      	ldr	r2, [pc, #16]	; (800a3a8 <scaraSetMethod+0x1c>)
 800a398:	79fb      	ldrb	r3, [r7, #7]
 800a39a:	7013      	strb	r3, [r2, #0]
}
 800a39c:	bf00      	nop
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr
 800a3a8:	2000081c 	.word	0x2000081c

0800a3ac <scaraGetPosition>:


void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a3b4:	22c0      	movs	r2, #192	; 0xc0
 800a3b6:	4904      	ldr	r1, [pc, #16]	; (800a3c8 <scaraGetPosition+0x1c>)
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f00b fb4f 	bl	8015a5c <memcpy>
}
 800a3be:	bf00      	nop
 800a3c0:	3708      	adds	r7, #8
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	200066b8 	.word	0x200066b8

0800a3cc <scaraUpdatePosition>:

void				scaraUpdatePosition (SCARA_PositionTypeDef *pos) {
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b082      	sub	sp, #8
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
	memcpy(&positionNext, pos, sizeof(SCARA_PositionTypeDef));
 800a3d4:	22c0      	movs	r2, #192	; 0xc0
 800a3d6:	6879      	ldr	r1, [r7, #4]
 800a3d8:	4803      	ldr	r0, [pc, #12]	; (800a3e8 <scaraUpdatePosition+0x1c>)
 800a3da:	f00b fb3f 	bl	8015a5c <memcpy>
}
 800a3de:	bf00      	nop
 800a3e0:	3708      	adds	r7, #8
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	20006838 	.word	0x20006838

0800a3ec <scaraGetMode>:


SCARA_ModeTypeDef	scaraGetMode(void) {
 800a3ec:	b480      	push	{r7}
 800a3ee:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 800a3f0:	4b03      	ldr	r3, [pc, #12]	; (800a400 <scaraGetMode+0x14>)
 800a3f2:	785b      	ldrb	r3, [r3, #1]
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	2000081c 	.word	0x2000081c

0800a404 <scaraGetMethod>:

SCARA_MethodTypeDef	scaraGetMethod(void) {
 800a404:	b480      	push	{r7}
 800a406:	af00      	add	r7, sp, #0
	return mySCARA.method;
 800a408:	4b03      	ldr	r3, [pc, #12]	; (800a418 <scaraGetMethod+0x14>)
 800a40a:	781b      	ldrb	r3, [r3, #0]
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	2000081c 	.word	0x2000081c

0800a41c <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 800a41c:	b480      	push	{r7}
 800a41e:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 800a420:	4b03      	ldr	r3, [pc, #12]	; (800a430 <scaraGetDutyState+0x14>)
 800a422:	789b      	ldrb	r3, [r3, #2]
}
 800a424:	4618      	mov	r0, r3
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr
 800a42e:	bf00      	nop
 800a430:	2000081c 	.word	0x2000081c

0800a434 <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 800a434:	b480      	push	{r7}
 800a436:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 800a438:	4b03      	ldr	r3, [pc, #12]	; (800a448 <scaraIsScanLimit+0x14>)
 800a43a:	78db      	ldrb	r3, [r3, #3]
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr
 800a446:	bf00      	nop
 800a448:	2000081c 	.word	0x2000081c

0800a44c <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 800a44c:	b590      	push	{r4, r7, lr}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total  < run_time) {
 800a456:	4b0a      	ldr	r3, [pc, #40]	; (800a480 <scaraIsFinish+0x34>)
 800a458:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a45c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a460:	461a      	mov	r2, r3
 800a462:	4623      	mov	r3, r4
 800a464:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a468:	f7f6 fb56 	bl	8000b18 <__aeabi_dcmpgt>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d001      	beq.n	800a476 <scaraIsFinish+0x2a>
		return TRUE;
 800a472:	2301      	movs	r3, #1
 800a474:	e000      	b.n	800a478 <scaraIsFinish+0x2c>
	} else {
		return FALSE;
 800a476:	2300      	movs	r3, #0
	}
}
 800a478:	4618      	mov	r0, r3
 800a47a:	370c      	adds	r7, #12
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd90      	pop	{r4, r7, pc}
 800a480:	20005af8 	.word	0x20005af8
 800a484:	00000000 	.word	0x00000000

0800a488 <scaraPosition_packaging>:
						time);
	return lenght_buff;
}

int32_t scaraPosition_packaging(uint8_t *data_packet, SCARA_PositionTypeDef position)
{
 800a488:	b082      	sub	sp, #8
 800a48a:	b590      	push	{r4, r7, lr}
 800a48c:	b085      	sub	sp, #20
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
 800a492:	f107 0120 	add.w	r1, r7, #32
 800a496:	e881 000c 	stmia.w	r1, {r2, r3}
	int32_t cur_ptr = -4;
 800a49a:	f06f 0303 	mvn.w	r3, #3
 800a49e:	60fb      	str	r3, [r7, #12]
	Append_Coordinate_Value((int32_t)(position.x*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a4a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a4a4:	a35c      	add	r3, pc, #368	; (adr r3, 800a618 <scaraPosition_packaging+0x190>)
 800a4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4aa:	f7f6 f8a5 	bl	80005f8 <__aeabi_dmul>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	460c      	mov	r4, r1
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	4621      	mov	r1, r4
 800a4b6:	f7f6 fb4f 	bl	8000b58 <__aeabi_d2iz>
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	3304      	adds	r3, #4
 800a4be:	60fb      	str	r3, [r7, #12]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	f000 f8aa 	bl	800a620 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.y*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a4cc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800a4d0:	a351      	add	r3, pc, #324	; (adr r3, 800a618 <scaraPosition_packaging+0x190>)
 800a4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d6:	f7f6 f88f 	bl	80005f8 <__aeabi_dmul>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	460c      	mov	r4, r1
 800a4de:	4618      	mov	r0, r3
 800a4e0:	4621      	mov	r1, r4
 800a4e2:	f7f6 fb39 	bl	8000b58 <__aeabi_d2iz>
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	3304      	adds	r3, #4
 800a4ea:	60fb      	str	r3, [r7, #12]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	f000 f894 	bl	800a620 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.z*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a4f8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800a4fc:	a346      	add	r3, pc, #280	; (adr r3, 800a618 <scaraPosition_packaging+0x190>)
 800a4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a502:	f7f6 f879 	bl	80005f8 <__aeabi_dmul>
 800a506:	4603      	mov	r3, r0
 800a508:	460c      	mov	r4, r1
 800a50a:	4618      	mov	r0, r3
 800a50c:	4621      	mov	r1, r4
 800a50e:	f7f6 fb23 	bl	8000b58 <__aeabi_d2iz>
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	3304      	adds	r3, #4
 800a516:	60fb      	str	r3, [r7, #12]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	4413      	add	r3, r2
 800a51e:	4619      	mov	r1, r3
 800a520:	f000 f87e 	bl	800a620 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.roll*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a524:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a528:	a33b      	add	r3, pc, #236	; (adr r3, 800a618 <scaraPosition_packaging+0x190>)
 800a52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52e:	f7f6 f863 	bl	80005f8 <__aeabi_dmul>
 800a532:	4603      	mov	r3, r0
 800a534:	460c      	mov	r4, r1
 800a536:	4618      	mov	r0, r3
 800a538:	4621      	mov	r1, r4
 800a53a:	f7f6 fb0d 	bl	8000b58 <__aeabi_d2iz>
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	3304      	adds	r3, #4
 800a542:	60fb      	str	r3, [r7, #12]
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	4413      	add	r3, r2
 800a54a:	4619      	mov	r1, r3
 800a54c:	f000 f868 	bl	800a620 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta1*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a550:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800a554:	a330      	add	r3, pc, #192	; (adr r3, 800a618 <scaraPosition_packaging+0x190>)
 800a556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55a:	f7f6 f84d 	bl	80005f8 <__aeabi_dmul>
 800a55e:	4603      	mov	r3, r0
 800a560:	460c      	mov	r4, r1
 800a562:	4618      	mov	r0, r3
 800a564:	4621      	mov	r1, r4
 800a566:	f7f6 faf7 	bl	8000b58 <__aeabi_d2iz>
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	3304      	adds	r3, #4
 800a56e:	60fb      	str	r3, [r7, #12]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	4413      	add	r3, r2
 800a576:	4619      	mov	r1, r3
 800a578:	f000 f852 	bl	800a620 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta2*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a57c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800a580:	a325      	add	r3, pc, #148	; (adr r3, 800a618 <scaraPosition_packaging+0x190>)
 800a582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a586:	f7f6 f837 	bl	80005f8 <__aeabi_dmul>
 800a58a:	4603      	mov	r3, r0
 800a58c:	460c      	mov	r4, r1
 800a58e:	4618      	mov	r0, r3
 800a590:	4621      	mov	r1, r4
 800a592:	f7f6 fae1 	bl	8000b58 <__aeabi_d2iz>
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	3304      	adds	r3, #4
 800a59a:	60fb      	str	r3, [r7, #12]
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	f000 f83c 	bl	800a620 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.D3*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a5a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a5ac:	a31a      	add	r3, pc, #104	; (adr r3, 800a618 <scaraPosition_packaging+0x190>)
 800a5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b2:	f7f6 f821 	bl	80005f8 <__aeabi_dmul>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	460c      	mov	r4, r1
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	4621      	mov	r1, r4
 800a5be:	f7f6 facb 	bl	8000b58 <__aeabi_d2iz>
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	3304      	adds	r3, #4
 800a5c6:	60fb      	str	r3, [r7, #12]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	f000 f826 	bl	800a620 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta4*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a5d4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800a5d8:	a30f      	add	r3, pc, #60	; (adr r3, 800a618 <scaraPosition_packaging+0x190>)
 800a5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5de:	f7f6 f80b 	bl	80005f8 <__aeabi_dmul>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	460c      	mov	r4, r1
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	4621      	mov	r1, r4
 800a5ea:	f7f6 fab5 	bl	8000b58 <__aeabi_d2iz>
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	3304      	adds	r3, #4
 800a5f2:	60fb      	str	r3, [r7, #12]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	f000 f810 	bl	800a620 <Append_Coordinate_Value>
	return cur_ptr + 4;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	3304      	adds	r3, #4
}
 800a604:	4618      	mov	r0, r3
 800a606:	3714      	adds	r7, #20
 800a608:	46bd      	mov	sp, r7
 800a60a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a60e:	b002      	add	sp, #8
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop
 800a614:	f3af 8000 	nop.w
 800a618:	00000000 	.word	0x00000000
 800a61c:	412e8480 	.word	0x412e8480

0800a620 <Append_Coordinate_Value>:

void Append_Coordinate_Value(int32_t append_value, uint8_t* append_position)
{
 800a620:	b480      	push	{r7}
 800a622:	b083      	sub	sp, #12
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
	append_position[0] = (uint8_t)(append_value & 0xff);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	b2da      	uxtb	r2, r3
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	701a      	strb	r2, [r3, #0]
	append_position[1] = (uint8_t)(append_value >> 8 & 0xff);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	121a      	asrs	r2, r3, #8
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	3301      	adds	r3, #1
 800a63a:	b2d2      	uxtb	r2, r2
 800a63c:	701a      	strb	r2, [r3, #0]
	append_position[2] = (uint8_t)(append_value >> 16 & 0xff);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	141a      	asrs	r2, r3, #16
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	3302      	adds	r3, #2
 800a646:	b2d2      	uxtb	r2, r2
 800a648:	701a      	strb	r2, [r3, #0]
	append_position[3] = (uint8_t)(append_value >> 24 & 0xff);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	161a      	asrs	r2, r3, #24
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	3303      	adds	r3, #3
 800a652:	b2d2      	uxtb	r2, r2
 800a654:	701a      	strb	r2, [r3, #0]
}
 800a656:	bf00      	nop
 800a658:	370c      	adds	r7, #12
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr
 800a662:	0000      	movs	r0, r0
 800a664:	0000      	movs	r0, r0
	...

0800a668 <scaraKeyInit1>:
SCARA_StatusTypeDef  scaraKeyInit1(SCARA_KeyTypeDef key, int32_t speed)
{
 800a668:	b590      	push	{r4, r7, lr}
 800a66a:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
 800a66e:	af6c      	add	r7, sp, #432	; 0x1b0
 800a670:	4602      	mov	r2, r0
 800a672:	463b      	mov	r3, r7
 800a674:	6019      	str	r1, [r3, #0]
 800a676:	1dfb      	adds	r3, r7, #7
 800a678:	701a      	strb	r2, [r3, #0]
	DUTY_Command_TypeDef cmd;
	SCARA_StatusTypeDef status;
	cmd.coordinate_type = DUTY_COORDINATES_REL;
 800a67a:	f107 0308 	add.w	r3, r7, #8
 800a67e:	2201      	movs	r2, #1
 800a680:	731a      	strb	r2, [r3, #12]
	cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 800a682:	f107 0308 	add.w	r3, r7, #8
 800a686:	2200      	movs	r2, #0
 800a688:	741a      	strb	r2, [r3, #16]
	cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 800a68a:	f107 0308 	add.w	r3, r7, #8
 800a68e:	2201      	movs	r2, #1
 800a690:	745a      	strb	r2, [r3, #17]
	double v_current = 0;
 800a692:	f04f 0300 	mov.w	r3, #0
 800a696:	f04f 0400 	mov.w	r4, #0
 800a69a:	e9c7 3474 	strd	r3, r4, [r7, #464]	; 0x1d0
	Trajectory_LSPB_TypeDef *lspb;
	if(speed < SHIFT_SPEED_MIN || speed > SHIFT_SPEED_MAX){
 800a69e:	463b      	mov	r3, r7
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	dd03      	ble.n	800a6ae <scaraKeyInit1+0x46>
 800a6a6:	463b      	mov	r3, r7
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2b0e      	cmp	r3, #14
 800a6ac:	dd01      	ble.n	800a6b2 <scaraKeyInit1+0x4a>
		return SCARA_STATUS_ERROR_PARA;
 800a6ae:	2306      	movs	r3, #6
 800a6b0:	e2c0      	b.n	800ac34 <scaraKeyInit1+0x5cc>
	}
	switch(key){
 800a6b2:	1dfb      	adds	r3, r7, #7
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	2b07      	cmp	r3, #7
 800a6b8:	f200 8298 	bhi.w	800abec <scaraKeyInit1+0x584>
 800a6bc:	a201      	add	r2, pc, #4	; (adr r2, 800a6c4 <scaraKeyInit1+0x5c>)
 800a6be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c2:	bf00      	nop
 800a6c4:	0800a6e5 	.word	0x0800a6e5
 800a6c8:	0800a787 	.word	0x0800a787
 800a6cc:	0800a82d 	.word	0x0800a82d
 800a6d0:	0800a8cb 	.word	0x0800a8cb
 800a6d4:	0800a96d 	.word	0x0800a96d
 800a6d8:	0800aa0b 	.word	0x0800aa0b
 800a6dc:	0800aaad 	.word	0x0800aaad
 800a6e0:	0800ab4b 	.word	0x0800ab4b
		case SCARA_KEY_X_INC:{
			cmd.v_factor = 0;
 800a6e4:	f107 0208 	add.w	r2, r7, #8
 800a6e8:	f04f 0300 	mov.w	r3, #0
 800a6ec:	f04f 0400 	mov.w	r4, #0
 800a6f0:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a6f4:	f107 0308 	add.w	r3, r7, #8
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a6fc:	f107 0308 	add.w	r3, r7, #8
 800a700:	2200      	movs	r2, #0
 800a702:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= speed*SHIFT_KEY_S;
 800a704:	463b      	mov	r3, r7
 800a706:	681a      	ldr	r2, [r3, #0]
 800a708:	4613      	mov	r3, r2
 800a70a:	009b      	lsls	r3, r3, #2
 800a70c:	4413      	add	r3, r2
 800a70e:	4618      	mov	r0, r3
 800a710:	f7f5 ff08 	bl	8000524 <__aeabi_i2d>
 800a714:	4603      	mov	r3, r0
 800a716:	460c      	mov	r4, r1
 800a718:	f107 0208 	add.w	r2, r7, #8
 800a71c:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800a720:	f107 0208 	add.w	r2, r7, #8
 800a724:	f04f 0300 	mov.w	r3, #0
 800a728:	f04f 0400 	mov.w	r4, #0
 800a72c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800a730:	f107 0208 	add.w	r2, r7, #8
 800a734:	f04f 0300 	mov.w	r3, #0
 800a738:	f04f 0400 	mov.w	r4, #0
 800a73c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800a740:	f107 0208 	add.w	r2, r7, #8
 800a744:	f04f 0300 	mov.w	r3, #0
 800a748:	f04f 0400 	mov.w	r4, #0
 800a74c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a750:	463b      	mov	r3, r7
 800a752:	6818      	ldr	r0, [r3, #0]
 800a754:	f7f5 fee6 	bl	8000524 <__aeabi_i2d>
 800a758:	f20f 43e4 	addw	r3, pc, #1252	; 0x4e4
 800a75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a760:	f7f5 ff4a 	bl	80005f8 <__aeabi_dmul>
 800a764:	4603      	mov	r3, r0
 800a766:	460c      	mov	r4, r1
 800a768:	4618      	mov	r0, r3
 800a76a:	4621      	mov	r1, r4
 800a76c:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 800a770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a774:	f7f5 fd8a 	bl	800028c <__adddf3>
 800a778:	4603      	mov	r3, r0
 800a77a:	460c      	mov	r4, r1
 800a77c:	f107 0208 	add.w	r2, r7, #8
 800a780:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800a784:	e232      	b.n	800abec <scaraKeyInit1+0x584>
		case SCARA_KEY_X_DEC:{
			cmd.v_factor = 0;
 800a786:	f107 0208 	add.w	r2, r7, #8
 800a78a:	f04f 0300 	mov.w	r3, #0
 800a78e:	f04f 0400 	mov.w	r4, #0
 800a792:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a796:	f107 0308 	add.w	r3, r7, #8
 800a79a:	2200      	movs	r2, #0
 800a79c:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a79e:	f107 0308 	add.w	r3, r7, #8
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= -speed*SHIFT_KEY_S;
 800a7a6:	463b      	mov	r3, r7
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	079b      	lsls	r3, r3, #30
 800a7ae:	1a9b      	subs	r3, r3, r2
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	1a9b      	subs	r3, r3, r2
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7f5 feb5 	bl	8000524 <__aeabi_i2d>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	460c      	mov	r4, r1
 800a7be:	f107 0208 	add.w	r2, r7, #8
 800a7c2:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800a7c6:	f107 0208 	add.w	r2, r7, #8
 800a7ca:	f04f 0300 	mov.w	r3, #0
 800a7ce:	f04f 0400 	mov.w	r4, #0
 800a7d2:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800a7d6:	f107 0208 	add.w	r2, r7, #8
 800a7da:	f04f 0300 	mov.w	r3, #0
 800a7de:	f04f 0400 	mov.w	r4, #0
 800a7e2:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800a7e6:	f107 0208 	add.w	r2, r7, #8
 800a7ea:	f04f 0300 	mov.w	r3, #0
 800a7ee:	f04f 0400 	mov.w	r4, #0
 800a7f2:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a7f6:	463b      	mov	r3, r7
 800a7f8:	6818      	ldr	r0, [r3, #0]
 800a7fa:	f7f5 fe93 	bl	8000524 <__aeabi_i2d>
 800a7fe:	f20f 4340 	addw	r3, pc, #1088	; 0x440
 800a802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a806:	f7f5 fef7 	bl	80005f8 <__aeabi_dmul>
 800a80a:	4603      	mov	r3, r0
 800a80c:	460c      	mov	r4, r1
 800a80e:	4618      	mov	r0, r3
 800a810:	4621      	mov	r1, r4
 800a812:	f20f 4334 	addw	r3, pc, #1076	; 0x434
 800a816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81a:	f7f5 fd37 	bl	800028c <__adddf3>
 800a81e:	4603      	mov	r3, r0
 800a820:	460c      	mov	r4, r1
 800a822:	f107 0208 	add.w	r2, r7, #8
 800a826:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800a82a:	e1df      	b.n	800abec <scaraKeyInit1+0x584>
		case SCARA_KEY_Y_INC:{
			cmd.v_factor = 0;
 800a82c:	f107 0208 	add.w	r2, r7, #8
 800a830:	f04f 0300 	mov.w	r3, #0
 800a834:	f04f 0400 	mov.w	r4, #0
 800a838:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a83c:	f107 0308 	add.w	r3, r7, #8
 800a840:	2200      	movs	r2, #0
 800a842:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a844:	f107 0308 	add.w	r3, r7, #8
 800a848:	2200      	movs	r2, #0
 800a84a:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800a84c:	f107 0208 	add.w	r2, r7, #8
 800a850:	f04f 0300 	mov.w	r3, #0
 800a854:	f04f 0400 	mov.w	r4, #0
 800a858:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= speed*SHIFT_KEY_S;
 800a85c:	463b      	mov	r3, r7
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	4613      	mov	r3, r2
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	4413      	add	r3, r2
 800a866:	4618      	mov	r0, r3
 800a868:	f7f5 fe5c 	bl	8000524 <__aeabi_i2d>
 800a86c:	4603      	mov	r3, r0
 800a86e:	460c      	mov	r4, r1
 800a870:	f107 0208 	add.w	r2, r7, #8
 800a874:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800a878:	f107 0208 	add.w	r2, r7, #8
 800a87c:	f04f 0300 	mov.w	r3, #0
 800a880:	f04f 0400 	mov.w	r4, #0
 800a884:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800a888:	f107 0208 	add.w	r2, r7, #8
 800a88c:	f04f 0300 	mov.w	r3, #0
 800a890:	f04f 0400 	mov.w	r4, #0
 800a894:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a898:	463b      	mov	r3, r7
 800a89a:	6818      	ldr	r0, [r3, #0]
 800a89c:	f7f5 fe42 	bl	8000524 <__aeabi_i2d>
 800a8a0:	a3e7      	add	r3, pc, #924	; (adr r3, 800ac40 <scaraKeyInit1+0x5d8>)
 800a8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a6:	f7f5 fea7 	bl	80005f8 <__aeabi_dmul>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	460c      	mov	r4, r1
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	4621      	mov	r1, r4
 800a8b2:	a3e5      	add	r3, pc, #916	; (adr r3, 800ac48 <scaraKeyInit1+0x5e0>)
 800a8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b8:	f7f5 fce8 	bl	800028c <__adddf3>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	460c      	mov	r4, r1
 800a8c0:	f107 0208 	add.w	r2, r7, #8
 800a8c4:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800a8c8:	e190      	b.n	800abec <scaraKeyInit1+0x584>

		case SCARA_KEY_Y_DEC:{
			cmd.v_factor = 0;
 800a8ca:	f107 0208 	add.w	r2, r7, #8
 800a8ce:	f04f 0300 	mov.w	r3, #0
 800a8d2:	f04f 0400 	mov.w	r4, #0
 800a8d6:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a8da:	f107 0308 	add.w	r3, r7, #8
 800a8de:	2200      	movs	r2, #0
 800a8e0:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a8e2:	f107 0308 	add.w	r3, r7, #8
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800a8ea:	f107 0208 	add.w	r2, r7, #8
 800a8ee:	f04f 0300 	mov.w	r3, #0
 800a8f2:	f04f 0400 	mov.w	r4, #0
 800a8f6:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= -speed*SHIFT_KEY_S;
 800a8fa:	463b      	mov	r3, r7
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	4613      	mov	r3, r2
 800a900:	079b      	lsls	r3, r3, #30
 800a902:	1a9b      	subs	r3, r3, r2
 800a904:	009b      	lsls	r3, r3, #2
 800a906:	1a9b      	subs	r3, r3, r2
 800a908:	4618      	mov	r0, r3
 800a90a:	f7f5 fe0b 	bl	8000524 <__aeabi_i2d>
 800a90e:	4603      	mov	r3, r0
 800a910:	460c      	mov	r4, r1
 800a912:	f107 0208 	add.w	r2, r7, #8
 800a916:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800a91a:	f107 0208 	add.w	r2, r7, #8
 800a91e:	f04f 0300 	mov.w	r3, #0
 800a922:	f04f 0400 	mov.w	r4, #0
 800a926:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800a92a:	f107 0208 	add.w	r2, r7, #8
 800a92e:	f04f 0300 	mov.w	r3, #0
 800a932:	f04f 0400 	mov.w	r4, #0
 800a936:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a93a:	463b      	mov	r3, r7
 800a93c:	6818      	ldr	r0, [r3, #0]
 800a93e:	f7f5 fdf1 	bl	8000524 <__aeabi_i2d>
 800a942:	a3bf      	add	r3, pc, #764	; (adr r3, 800ac40 <scaraKeyInit1+0x5d8>)
 800a944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a948:	f7f5 fe56 	bl	80005f8 <__aeabi_dmul>
 800a94c:	4603      	mov	r3, r0
 800a94e:	460c      	mov	r4, r1
 800a950:	4618      	mov	r0, r3
 800a952:	4621      	mov	r1, r4
 800a954:	a3bc      	add	r3, pc, #752	; (adr r3, 800ac48 <scaraKeyInit1+0x5e0>)
 800a956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95a:	f7f5 fc97 	bl	800028c <__adddf3>
 800a95e:	4603      	mov	r3, r0
 800a960:	460c      	mov	r4, r1
 800a962:	f107 0208 	add.w	r2, r7, #8
 800a966:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800a96a:	e13f      	b.n	800abec <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_INC:{
			cmd.v_factor = 0;
 800a96c:	f107 0208 	add.w	r2, r7, #8
 800a970:	f04f 0300 	mov.w	r3, #0
 800a974:	f04f 0400 	mov.w	r4, #0
 800a978:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a97c:	f107 0308 	add.w	r3, r7, #8
 800a980:	2200      	movs	r2, #0
 800a982:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a984:	f107 0308 	add.w	r3, r7, #8
 800a988:	2200      	movs	r2, #0
 800a98a:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800a98c:	f107 0208 	add.w	r2, r7, #8
 800a990:	f04f 0300 	mov.w	r3, #0
 800a994:	f04f 0400 	mov.w	r4, #0
 800a998:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800a99c:	f107 0208 	add.w	r2, r7, #8
 800a9a0:	f04f 0300 	mov.w	r3, #0
 800a9a4:	f04f 0400 	mov.w	r4, #0
 800a9a8:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= speed*SHIFT_KEY_S;
 800a9ac:	463b      	mov	r3, r7
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	009b      	lsls	r3, r3, #2
 800a9b4:	4413      	add	r3, r2
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f7f5 fdb4 	bl	8000524 <__aeabi_i2d>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	460c      	mov	r4, r1
 800a9c0:	f107 0208 	add.w	r2, r7, #8
 800a9c4:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800a9c8:	f107 0208 	add.w	r2, r7, #8
 800a9cc:	f04f 0300 	mov.w	r3, #0
 800a9d0:	f04f 0400 	mov.w	r4, #0
 800a9d4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a9d8:	463b      	mov	r3, r7
 800a9da:	6818      	ldr	r0, [r3, #0]
 800a9dc:	f7f5 fda2 	bl	8000524 <__aeabi_i2d>
 800a9e0:	a397      	add	r3, pc, #604	; (adr r3, 800ac40 <scaraKeyInit1+0x5d8>)
 800a9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e6:	f7f5 fe07 	bl	80005f8 <__aeabi_dmul>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	460c      	mov	r4, r1
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	4621      	mov	r1, r4
 800a9f2:	a395      	add	r3, pc, #596	; (adr r3, 800ac48 <scaraKeyInit1+0x5e0>)
 800a9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f8:	f7f5 fc48 	bl	800028c <__adddf3>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	460c      	mov	r4, r1
 800aa00:	f107 0208 	add.w	r2, r7, #8
 800aa04:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800aa08:	e0f0      	b.n	800abec <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_DEC:{
			cmd.v_factor = 0;
 800aa0a:	f107 0208 	add.w	r2, r7, #8
 800aa0e:	f04f 0300 	mov.w	r3, #0
 800aa12:	f04f 0400 	mov.w	r4, #0
 800aa16:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800aa1a:	f107 0308 	add.w	r3, r7, #8
 800aa1e:	2200      	movs	r2, #0
 800aa20:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800aa22:	f107 0308 	add.w	r3, r7, #8
 800aa26:	2200      	movs	r2, #0
 800aa28:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800aa2a:	f107 0208 	add.w	r2, r7, #8
 800aa2e:	f04f 0300 	mov.w	r3, #0
 800aa32:	f04f 0400 	mov.w	r4, #0
 800aa36:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800aa3a:	f107 0208 	add.w	r2, r7, #8
 800aa3e:	f04f 0300 	mov.w	r3, #0
 800aa42:	f04f 0400 	mov.w	r4, #0
 800aa46:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= -speed*SHIFT_KEY_S;
 800aa4a:	463b      	mov	r3, r7
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	4613      	mov	r3, r2
 800aa50:	079b      	lsls	r3, r3, #30
 800aa52:	1a9b      	subs	r3, r3, r2
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	1a9b      	subs	r3, r3, r2
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7f5 fd63 	bl	8000524 <__aeabi_i2d>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	460c      	mov	r4, r1
 800aa62:	f107 0208 	add.w	r2, r7, #8
 800aa66:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800aa6a:	f107 0208 	add.w	r2, r7, #8
 800aa6e:	f04f 0300 	mov.w	r3, #0
 800aa72:	f04f 0400 	mov.w	r4, #0
 800aa76:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800aa7a:	463b      	mov	r3, r7
 800aa7c:	6818      	ldr	r0, [r3, #0]
 800aa7e:	f7f5 fd51 	bl	8000524 <__aeabi_i2d>
 800aa82:	a36f      	add	r3, pc, #444	; (adr r3, 800ac40 <scaraKeyInit1+0x5d8>)
 800aa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa88:	f7f5 fdb6 	bl	80005f8 <__aeabi_dmul>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	460c      	mov	r4, r1
 800aa90:	4618      	mov	r0, r3
 800aa92:	4621      	mov	r1, r4
 800aa94:	a36c      	add	r3, pc, #432	; (adr r3, 800ac48 <scaraKeyInit1+0x5e0>)
 800aa96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9a:	f7f5 fbf7 	bl	800028c <__adddf3>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	460c      	mov	r4, r1
 800aaa2:	f107 0208 	add.w	r2, r7, #8
 800aaa6:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800aaaa:	e09f      	b.n	800abec <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_INC:{
			cmd.v_factor = 0;
 800aaac:	f107 0208 	add.w	r2, r7, #8
 800aab0:	f04f 0300 	mov.w	r3, #0
 800aab4:	f04f 0400 	mov.w	r4, #0
 800aab8:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800aabc:	f107 0308 	add.w	r3, r7, #8
 800aac0:	2200      	movs	r2, #0
 800aac2:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800aac4:	f107 0308 	add.w	r3, r7, #8
 800aac8:	2200      	movs	r2, #0
 800aaca:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800aacc:	f107 0208 	add.w	r2, r7, #8
 800aad0:	f04f 0300 	mov.w	r3, #0
 800aad4:	f04f 0400 	mov.w	r4, #0
 800aad8:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800aadc:	f107 0208 	add.w	r2, r7, #8
 800aae0:	f04f 0300 	mov.w	r3, #0
 800aae4:	f04f 0400 	mov.w	r4, #0
 800aae8:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800aaec:	f107 0208 	add.w	r2, r7, #8
 800aaf0:	f04f 0300 	mov.w	r3, #0
 800aaf4:	f04f 0400 	mov.w	r4, #0
 800aaf8:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= speed*SHIFT_KEY_S;
 800aafc:	463b      	mov	r3, r7
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	4613      	mov	r3, r2
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	4413      	add	r3, r2
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7f5 fd0c 	bl	8000524 <__aeabi_i2d>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	460c      	mov	r4, r1
 800ab10:	f107 0208 	add.w	r2, r7, #8
 800ab14:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ab18:	463b      	mov	r3, r7
 800ab1a:	6818      	ldr	r0, [r3, #0]
 800ab1c:	f7f5 fd02 	bl	8000524 <__aeabi_i2d>
 800ab20:	a347      	add	r3, pc, #284	; (adr r3, 800ac40 <scaraKeyInit1+0x5d8>)
 800ab22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab26:	f7f5 fd67 	bl	80005f8 <__aeabi_dmul>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	460c      	mov	r4, r1
 800ab2e:	4618      	mov	r0, r3
 800ab30:	4621      	mov	r1, r4
 800ab32:	a345      	add	r3, pc, #276	; (adr r3, 800ac48 <scaraKeyInit1+0x5e0>)
 800ab34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab38:	f7f5 fba8 	bl	800028c <__adddf3>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	460c      	mov	r4, r1
 800ab40:	f107 0208 	add.w	r2, r7, #8
 800ab44:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800ab48:	e050      	b.n	800abec <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_DEC:{
			cmd.v_factor = 0;
 800ab4a:	f107 0208 	add.w	r2, r7, #8
 800ab4e:	f04f 0300 	mov.w	r3, #0
 800ab52:	f04f 0400 	mov.w	r4, #0
 800ab56:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ab5a:	f107 0308 	add.w	r3, r7, #8
 800ab5e:	2200      	movs	r2, #0
 800ab60:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ab62:	f107 0308 	add.w	r3, r7, #8
 800ab66:	2200      	movs	r2, #0
 800ab68:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ab6a:	f107 0208 	add.w	r2, r7, #8
 800ab6e:	f04f 0300 	mov.w	r3, #0
 800ab72:	f04f 0400 	mov.w	r4, #0
 800ab76:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ab7a:	f107 0208 	add.w	r2, r7, #8
 800ab7e:	f04f 0300 	mov.w	r3, #0
 800ab82:	f04f 0400 	mov.w	r4, #0
 800ab86:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ab8a:	f107 0208 	add.w	r2, r7, #8
 800ab8e:	f04f 0300 	mov.w	r3, #0
 800ab92:	f04f 0400 	mov.w	r4, #0
 800ab96:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= -speed*SHIFT_KEY_S;
 800ab9a:	463b      	mov	r3, r7
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	4613      	mov	r3, r2
 800aba0:	079b      	lsls	r3, r3, #30
 800aba2:	1a9b      	subs	r3, r3, r2
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	1a9b      	subs	r3, r3, r2
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7f5 fcbb 	bl	8000524 <__aeabi_i2d>
 800abae:	4603      	mov	r3, r0
 800abb0:	460c      	mov	r4, r1
 800abb2:	f107 0208 	add.w	r2, r7, #8
 800abb6:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800abba:	463b      	mov	r3, r7
 800abbc:	6818      	ldr	r0, [r3, #0]
 800abbe:	f7f5 fcb1 	bl	8000524 <__aeabi_i2d>
 800abc2:	a31f      	add	r3, pc, #124	; (adr r3, 800ac40 <scaraKeyInit1+0x5d8>)
 800abc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc8:	f7f5 fd16 	bl	80005f8 <__aeabi_dmul>
 800abcc:	4603      	mov	r3, r0
 800abce:	460c      	mov	r4, r1
 800abd0:	4618      	mov	r0, r3
 800abd2:	4621      	mov	r1, r4
 800abd4:	a31c      	add	r3, pc, #112	; (adr r3, 800ac48 <scaraKeyInit1+0x5e0>)
 800abd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abda:	f7f5 fb57 	bl	800028c <__adddf3>
 800abde:	4603      	mov	r3, r0
 800abe0:	460c      	mov	r4, r1
 800abe2:	f107 0208 	add.w	r2, r7, #8
 800abe6:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800abea:	bf00      	nop
	}

	status = scaraInitDuty(cmd);
 800abec:	f107 0408 	add.w	r4, r7, #8
 800abf0:	4668      	mov	r0, sp
 800abf2:	f104 0310 	add.w	r3, r4, #16
 800abf6:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800abfa:	4619      	mov	r1, r3
 800abfc:	f00a ff2e 	bl	8015a5c <memcpy>
 800ac00:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ac04:	f7fa fb4c 	bl	80052a0 <scaraInitDuty>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
	if (status == SCARA_STATUS_OK) {
 800ac0e:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d10b      	bne.n	800ac2e <scaraKeyInit1+0x5c6>
		status = scaraTestDuty();
 800ac16:	f7ff faff 	bl	800a218 <scaraTestDuty>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		if (status != SCARA_STATUS_OK) {
 800ac20:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d005      	beq.n	800ac34 <scaraKeyInit1+0x5cc>
			return status;
 800ac28:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800ac2c:	e002      	b.n	800ac34 <scaraKeyInit1+0x5cc>
		// tinh lai run time so vs v hien tai
//		*(runtime) = (v_current - lspb->v0)/(lspb->a_design);
//		scaraFlowDuty(*runtime, &positionKeyInit, positionCurrent);
//		return status;
	} else {
		return status;
 800ac2e:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800ac32:	e7ff      	b.n	800ac34 <scaraKeyInit1+0x5cc>
	}
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	f507 77ee 	add.w	r7, r7, #476	; 0x1dc
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd90      	pop	{r4, r7, pc}
 800ac3e:	bf00      	nop
 800ac40:	9999999a 	.word	0x9999999a
 800ac44:	3fa99999 	.word	0x3fa99999
 800ac48:	9999999a 	.word	0x9999999a
 800ac4c:	3fe99999 	.word	0x3fe99999

0800ac50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ac56:	2300      	movs	r3, #0
 800ac58:	607b      	str	r3, [r7, #4]
 800ac5a:	4b12      	ldr	r3, [pc, #72]	; (800aca4 <HAL_MspInit+0x54>)
 800ac5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac5e:	4a11      	ldr	r2, [pc, #68]	; (800aca4 <HAL_MspInit+0x54>)
 800ac60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ac64:	6453      	str	r3, [r2, #68]	; 0x44
 800ac66:	4b0f      	ldr	r3, [pc, #60]	; (800aca4 <HAL_MspInit+0x54>)
 800ac68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac6e:	607b      	str	r3, [r7, #4]
 800ac70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ac72:	2300      	movs	r3, #0
 800ac74:	603b      	str	r3, [r7, #0]
 800ac76:	4b0b      	ldr	r3, [pc, #44]	; (800aca4 <HAL_MspInit+0x54>)
 800ac78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac7a:	4a0a      	ldr	r2, [pc, #40]	; (800aca4 <HAL_MspInit+0x54>)
 800ac7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac80:	6413      	str	r3, [r2, #64]	; 0x40
 800ac82:	4b08      	ldr	r3, [pc, #32]	; (800aca4 <HAL_MspInit+0x54>)
 800ac84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac8a:	603b      	str	r3, [r7, #0]
 800ac8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800ac8e:	2200      	movs	r2, #0
 800ac90:	210f      	movs	r1, #15
 800ac92:	f06f 0001 	mvn.w	r0, #1
 800ac96:	f000 fbe7 	bl	800b468 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ac9a:	bf00      	nop
 800ac9c:	3708      	adds	r7, #8
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	40023800 	.word	0x40023800

0800aca8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b08c      	sub	sp, #48	; 0x30
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800acb0:	2300      	movs	r3, #0
 800acb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800acb4:	2300      	movs	r3, #0
 800acb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800acb8:	2200      	movs	r2, #0
 800acba:	6879      	ldr	r1, [r7, #4]
 800acbc:	2036      	movs	r0, #54	; 0x36
 800acbe:	f000 fbd3 	bl	800b468 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800acc2:	2036      	movs	r0, #54	; 0x36
 800acc4:	f000 fbec 	bl	800b4a0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800acc8:	2300      	movs	r3, #0
 800acca:	60fb      	str	r3, [r7, #12]
 800accc:	4b1f      	ldr	r3, [pc, #124]	; (800ad4c <HAL_InitTick+0xa4>)
 800acce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd0:	4a1e      	ldr	r2, [pc, #120]	; (800ad4c <HAL_InitTick+0xa4>)
 800acd2:	f043 0310 	orr.w	r3, r3, #16
 800acd6:	6413      	str	r3, [r2, #64]	; 0x40
 800acd8:	4b1c      	ldr	r3, [pc, #112]	; (800ad4c <HAL_InitTick+0xa4>)
 800acda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acdc:	f003 0310 	and.w	r3, r3, #16
 800ace0:	60fb      	str	r3, [r7, #12]
 800ace2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800ace4:	f107 0210 	add.w	r2, r7, #16
 800ace8:	f107 0314 	add.w	r3, r7, #20
 800acec:	4611      	mov	r1, r2
 800acee:	4618      	mov	r0, r3
 800acf0:	f002 ff72 	bl	800dbd8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800acf4:	f002 ff48 	bl	800db88 <HAL_RCC_GetPCLK1Freq>
 800acf8:	4603      	mov	r3, r0
 800acfa:	005b      	lsls	r3, r3, #1
 800acfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800acfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad00:	4a13      	ldr	r2, [pc, #76]	; (800ad50 <HAL_InitTick+0xa8>)
 800ad02:	fba2 2303 	umull	r2, r3, r2, r3
 800ad06:	0c9b      	lsrs	r3, r3, #18
 800ad08:	3b01      	subs	r3, #1
 800ad0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800ad0c:	4b11      	ldr	r3, [pc, #68]	; (800ad54 <HAL_InitTick+0xac>)
 800ad0e:	4a12      	ldr	r2, [pc, #72]	; (800ad58 <HAL_InitTick+0xb0>)
 800ad10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800ad12:	4b10      	ldr	r3, [pc, #64]	; (800ad54 <HAL_InitTick+0xac>)
 800ad14:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ad18:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800ad1a:	4a0e      	ldr	r2, [pc, #56]	; (800ad54 <HAL_InitTick+0xac>)
 800ad1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800ad20:	4b0c      	ldr	r3, [pc, #48]	; (800ad54 <HAL_InitTick+0xac>)
 800ad22:	2200      	movs	r2, #0
 800ad24:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ad26:	4b0b      	ldr	r3, [pc, #44]	; (800ad54 <HAL_InitTick+0xac>)
 800ad28:	2200      	movs	r2, #0
 800ad2a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800ad2c:	4809      	ldr	r0, [pc, #36]	; (800ad54 <HAL_InitTick+0xac>)
 800ad2e:	f002 ff85 	bl	800dc3c <HAL_TIM_Base_Init>
 800ad32:	4603      	mov	r3, r0
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d104      	bne.n	800ad42 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800ad38:	4806      	ldr	r0, [pc, #24]	; (800ad54 <HAL_InitTick+0xac>)
 800ad3a:	f002 ffce 	bl	800dcda <HAL_TIM_Base_Start_IT>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	e000      	b.n	800ad44 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800ad42:	2301      	movs	r3, #1
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3730      	adds	r7, #48	; 0x30
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	40023800 	.word	0x40023800
 800ad50:	431bde83 	.word	0x431bde83
 800ad54:	200068f8 	.word	0x200068f8
 800ad58:	40001000 	.word	0x40001000

0800ad5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ad60:	bf00      	nop
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr
	...

0800ad6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 800ad70:	2162      	movs	r1, #98	; 0x62
 800ad72:	4802      	ldr	r0, [pc, #8]	; (800ad7c <HardFault_Handler+0x10>)
 800ad74:	f7f6 ffc2 	bl	8001cfc <LOG_REPORT>
 800ad78:	e7fa      	b.n	800ad70 <HardFault_Handler+0x4>
 800ad7a:	bf00      	nop
 800ad7c:	0801b168 	.word	0x0801b168

0800ad80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 800ad84:	2172      	movs	r1, #114	; 0x72
 800ad86:	4802      	ldr	r0, [pc, #8]	; (800ad90 <MemManage_Handler+0x10>)
 800ad88:	f7f6 ffb8 	bl	8001cfc <LOG_REPORT>
 800ad8c:	e7fa      	b.n	800ad84 <MemManage_Handler+0x4>
 800ad8e:	bf00      	nop
 800ad90:	0801b180 	.word	0x0801b180

0800ad94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 800ad98:	2182      	movs	r1, #130	; 0x82
 800ad9a:	4802      	ldr	r0, [pc, #8]	; (800ada4 <BusFault_Handler+0x10>)
 800ad9c:	f7f6 ffae 	bl	8001cfc <LOG_REPORT>
 800ada0:	e7fa      	b.n	800ad98 <BusFault_Handler+0x4>
 800ada2:	bf00      	nop
 800ada4:	0801b194 	.word	0x0801b194

0800ada8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ada8:	b480      	push	{r7}
 800adaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800adac:	e7fe      	b.n	800adac <UsageFault_Handler+0x4>

0800adae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800adae:	b480      	push	{r7}
 800adb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800adb2:	bf00      	nop
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800adc0:	4802      	ldr	r0, [pc, #8]	; (800adcc <DMA1_Stream4_IRQHandler+0x10>)
 800adc2:	f000 fca3 	bl	800b70c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800adc6:	bf00      	nop
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	200069f8 	.word	0x200069f8

0800add0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800add4:	4802      	ldr	r0, [pc, #8]	; (800ade0 <UART4_IRQHandler+0x10>)
 800add6:	f003 fc0f 	bl	800e5f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800adda:	bf00      	nop
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	200069b8 	.word	0x200069b8

0800ade4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800ade8:	4802      	ldr	r0, [pc, #8]	; (800adf4 <TIM6_DAC_IRQHandler+0x10>)
 800adea:	f002 ff9a 	bl	800dd22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800adee:	bf00      	nop
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	200068f8 	.word	0x200068f8

0800adf8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 800adfc:	4b05      	ldr	r3, [pc, #20]	; (800ae14 <TIM7_IRQHandler+0x1c>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	2101      	movs	r1, #1
 800ae02:	4618      	mov	r0, r3
 800ae04:	f007 fadc 	bl	80123c0 <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800ae08:	4803      	ldr	r0, [pc, #12]	; (800ae18 <TIM7_IRQHandler+0x20>)
 800ae0a:	f002 ff8a 	bl	800dd22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 800ae0e:	bf00      	nop
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	20005a34 	.word	0x20005a34
 800ae18:	20006978 	.word	0x20006978

0800ae1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800ae20:	4802      	ldr	r0, [pc, #8]	; (800ae2c <OTG_FS_IRQHandler+0x10>)
 800ae22:	f001 fa43 	bl	800c2ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800ae26:	bf00      	nop
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	20007334 	.word	0x20007334

0800ae30 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800ae38:	4b11      	ldr	r3, [pc, #68]	; (800ae80 <_sbrk+0x50>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d102      	bne.n	800ae46 <_sbrk+0x16>
		heap_end = &end;
 800ae40:	4b0f      	ldr	r3, [pc, #60]	; (800ae80 <_sbrk+0x50>)
 800ae42:	4a10      	ldr	r2, [pc, #64]	; (800ae84 <_sbrk+0x54>)
 800ae44:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800ae46:	4b0e      	ldr	r3, [pc, #56]	; (800ae80 <_sbrk+0x50>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800ae4c:	4b0c      	ldr	r3, [pc, #48]	; (800ae80 <_sbrk+0x50>)
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	4413      	add	r3, r2
 800ae54:	466a      	mov	r2, sp
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d907      	bls.n	800ae6a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800ae5a:	f00a fdc5 	bl	80159e8 <__errno>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	230c      	movs	r3, #12
 800ae62:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800ae64:	f04f 33ff 	mov.w	r3, #4294967295
 800ae68:	e006      	b.n	800ae78 <_sbrk+0x48>
	}

	heap_end += incr;
 800ae6a:	4b05      	ldr	r3, [pc, #20]	; (800ae80 <_sbrk+0x50>)
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4413      	add	r3, r2
 800ae72:	4a03      	ldr	r2, [pc, #12]	; (800ae80 <_sbrk+0x50>)
 800ae74:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800ae76:	68fb      	ldr	r3, [r7, #12]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3710      	adds	r7, #16
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	20001000 	.word	0x20001000
 800ae84:	20007740 	.word	0x20007740

0800ae88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ae8c:	4b08      	ldr	r3, [pc, #32]	; (800aeb0 <SystemInit+0x28>)
 800ae8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae92:	4a07      	ldr	r2, [pc, #28]	; (800aeb0 <SystemInit+0x28>)
 800ae94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ae9c:	4b04      	ldr	r3, [pc, #16]	; (800aeb0 <SystemInit+0x28>)
 800ae9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800aea2:	609a      	str	r2, [r3, #8]
#endif
}
 800aea4:	bf00      	nop
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	e000ed00 	.word	0xe000ed00

0800aeb4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b086      	sub	sp, #24
 800aeb8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800aeba:	f107 0308 	add.w	r3, r7, #8
 800aebe:	2200      	movs	r2, #0
 800aec0:	601a      	str	r2, [r3, #0]
 800aec2:	605a      	str	r2, [r3, #4]
 800aec4:	609a      	str	r2, [r3, #8]
 800aec6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aec8:	463b      	mov	r3, r7
 800aeca:	2200      	movs	r2, #0
 800aecc:	601a      	str	r2, [r3, #0]
 800aece:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800aed0:	4b1e      	ldr	r3, [pc, #120]	; (800af4c <MX_TIM2_Init+0x98>)
 800aed2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800aed6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25000;
 800aed8:	4b1c      	ldr	r3, [pc, #112]	; (800af4c <MX_TIM2_Init+0x98>)
 800aeda:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800aede:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aee0:	4b1a      	ldr	r3, [pc, #104]	; (800af4c <MX_TIM2_Init+0x98>)
 800aee2:	2200      	movs	r2, #0
 800aee4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 800aee6:	4b19      	ldr	r3, [pc, #100]	; (800af4c <MX_TIM2_Init+0x98>)
 800aee8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aeec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aeee:	4b17      	ldr	r3, [pc, #92]	; (800af4c <MX_TIM2_Init+0x98>)
 800aef0:	2200      	movs	r2, #0
 800aef2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aef4:	4b15      	ldr	r3, [pc, #84]	; (800af4c <MX_TIM2_Init+0x98>)
 800aef6:	2200      	movs	r2, #0
 800aef8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800aefa:	4814      	ldr	r0, [pc, #80]	; (800af4c <MX_TIM2_Init+0x98>)
 800aefc:	f002 fe9e 	bl	800dc3c <HAL_TIM_Base_Init>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	d001      	beq.n	800af0a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800af06:	f7f9 f951 	bl	80041ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800af0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800af10:	f107 0308 	add.w	r3, r7, #8
 800af14:	4619      	mov	r1, r3
 800af16:	480d      	ldr	r0, [pc, #52]	; (800af4c <MX_TIM2_Init+0x98>)
 800af18:	f003 f80b 	bl	800df32 <HAL_TIM_ConfigClockSource>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d001      	beq.n	800af26 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800af22:	f7f9 f943 	bl	80041ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800af26:	2300      	movs	r3, #0
 800af28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800af2a:	2300      	movs	r3, #0
 800af2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800af2e:	463b      	mov	r3, r7
 800af30:	4619      	mov	r1, r3
 800af32:	4806      	ldr	r0, [pc, #24]	; (800af4c <MX_TIM2_Init+0x98>)
 800af34:	f003 fa16 	bl	800e364 <HAL_TIMEx_MasterConfigSynchronization>
 800af38:	4603      	mov	r3, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d001      	beq.n	800af42 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800af3e:	f7f9 f935 	bl	80041ac <Error_Handler>
  }

}
 800af42:	bf00      	nop
 800af44:	3718      	adds	r7, #24
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	20006938 	.word	0x20006938

0800af50 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800af56:	463b      	mov	r3, r7
 800af58:	2200      	movs	r2, #0
 800af5a:	601a      	str	r2, [r3, #0]
 800af5c:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800af5e:	4b15      	ldr	r3, [pc, #84]	; (800afb4 <MX_TIM7_Init+0x64>)
 800af60:	4a15      	ldr	r2, [pc, #84]	; (800afb8 <MX_TIM7_Init+0x68>)
 800af62:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800af64:	4b13      	ldr	r3, [pc, #76]	; (800afb4 <MX_TIM7_Init+0x64>)
 800af66:	2253      	movs	r2, #83	; 0x53
 800af68:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800af6a:	4b12      	ldr	r3, [pc, #72]	; (800afb4 <MX_TIM7_Init+0x64>)
 800af6c:	2200      	movs	r2, #0
 800af6e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800af70:	4b10      	ldr	r3, [pc, #64]	; (800afb4 <MX_TIM7_Init+0x64>)
 800af72:	f242 720f 	movw	r2, #9999	; 0x270f
 800af76:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800af78:	4b0e      	ldr	r3, [pc, #56]	; (800afb4 <MX_TIM7_Init+0x64>)
 800af7a:	2200      	movs	r2, #0
 800af7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800af7e:	480d      	ldr	r0, [pc, #52]	; (800afb4 <MX_TIM7_Init+0x64>)
 800af80:	f002 fe5c 	bl	800dc3c <HAL_TIM_Base_Init>
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	d001      	beq.n	800af8e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800af8a:	f7f9 f90f 	bl	80041ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800af8e:	2300      	movs	r3, #0
 800af90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800af92:	2300      	movs	r3, #0
 800af94:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800af96:	463b      	mov	r3, r7
 800af98:	4619      	mov	r1, r3
 800af9a:	4806      	ldr	r0, [pc, #24]	; (800afb4 <MX_TIM7_Init+0x64>)
 800af9c:	f003 f9e2 	bl	800e364 <HAL_TIMEx_MasterConfigSynchronization>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d001      	beq.n	800afaa <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800afa6:	f7f9 f901 	bl	80041ac <Error_Handler>
  }

}
 800afaa:	bf00      	nop
 800afac:	3708      	adds	r7, #8
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	20006978 	.word	0x20006978
 800afb8:	40001400 	.word	0x40001400

0800afbc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b084      	sub	sp, #16
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afcc:	d10e      	bne.n	800afec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800afce:	2300      	movs	r3, #0
 800afd0:	60fb      	str	r3, [r7, #12]
 800afd2:	4b16      	ldr	r3, [pc, #88]	; (800b02c <HAL_TIM_Base_MspInit+0x70>)
 800afd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afd6:	4a15      	ldr	r2, [pc, #84]	; (800b02c <HAL_TIM_Base_MspInit+0x70>)
 800afd8:	f043 0301 	orr.w	r3, r3, #1
 800afdc:	6413      	str	r3, [r2, #64]	; 0x40
 800afde:	4b13      	ldr	r3, [pc, #76]	; (800b02c <HAL_TIM_Base_MspInit+0x70>)
 800afe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afe2:	f003 0301 	and.w	r3, r3, #1
 800afe6:	60fb      	str	r3, [r7, #12]
 800afe8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800afea:	e01a      	b.n	800b022 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a0f      	ldr	r2, [pc, #60]	; (800b030 <HAL_TIM_Base_MspInit+0x74>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d115      	bne.n	800b022 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800aff6:	2300      	movs	r3, #0
 800aff8:	60bb      	str	r3, [r7, #8]
 800affa:	4b0c      	ldr	r3, [pc, #48]	; (800b02c <HAL_TIM_Base_MspInit+0x70>)
 800affc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800affe:	4a0b      	ldr	r2, [pc, #44]	; (800b02c <HAL_TIM_Base_MspInit+0x70>)
 800b000:	f043 0320 	orr.w	r3, r3, #32
 800b004:	6413      	str	r3, [r2, #64]	; 0x40
 800b006:	4b09      	ldr	r3, [pc, #36]	; (800b02c <HAL_TIM_Base_MspInit+0x70>)
 800b008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b00a:	f003 0320 	and.w	r3, r3, #32
 800b00e:	60bb      	str	r3, [r7, #8]
 800b010:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800b012:	2200      	movs	r2, #0
 800b014:	2105      	movs	r1, #5
 800b016:	2037      	movs	r0, #55	; 0x37
 800b018:	f000 fa26 	bl	800b468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800b01c:	2037      	movs	r0, #55	; 0x37
 800b01e:	f000 fa3f 	bl	800b4a0 <HAL_NVIC_EnableIRQ>
}
 800b022:	bf00      	nop
 800b024:	3710      	adds	r7, #16
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	40023800 	.word	0x40023800
 800b030:	40001400 	.word	0x40001400

0800b034 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800b038:	4b11      	ldr	r3, [pc, #68]	; (800b080 <MX_UART4_Init+0x4c>)
 800b03a:	4a12      	ldr	r2, [pc, #72]	; (800b084 <MX_UART4_Init+0x50>)
 800b03c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b03e:	4b10      	ldr	r3, [pc, #64]	; (800b080 <MX_UART4_Init+0x4c>)
 800b040:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b044:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800b046:	4b0e      	ldr	r3, [pc, #56]	; (800b080 <MX_UART4_Init+0x4c>)
 800b048:	2200      	movs	r2, #0
 800b04a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b04c:	4b0c      	ldr	r3, [pc, #48]	; (800b080 <MX_UART4_Init+0x4c>)
 800b04e:	2200      	movs	r2, #0
 800b050:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b052:	4b0b      	ldr	r3, [pc, #44]	; (800b080 <MX_UART4_Init+0x4c>)
 800b054:	2200      	movs	r2, #0
 800b056:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b058:	4b09      	ldr	r3, [pc, #36]	; (800b080 <MX_UART4_Init+0x4c>)
 800b05a:	220c      	movs	r2, #12
 800b05c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b05e:	4b08      	ldr	r3, [pc, #32]	; (800b080 <MX_UART4_Init+0x4c>)
 800b060:	2200      	movs	r2, #0
 800b062:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b064:	4b06      	ldr	r3, [pc, #24]	; (800b080 <MX_UART4_Init+0x4c>)
 800b066:	2200      	movs	r2, #0
 800b068:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b06a:	4805      	ldr	r0, [pc, #20]	; (800b080 <MX_UART4_Init+0x4c>)
 800b06c:	f003 fa0a 	bl	800e484 <HAL_UART_Init>
 800b070:	4603      	mov	r3, r0
 800b072:	2b00      	cmp	r3, #0
 800b074:	d001      	beq.n	800b07a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800b076:	f7f9 f899 	bl	80041ac <Error_Handler>
  }

}
 800b07a:	bf00      	nop
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	200069b8 	.word	0x200069b8
 800b084:	40004c00 	.word	0x40004c00

0800b088 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b08a      	sub	sp, #40	; 0x28
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b090:	f107 0314 	add.w	r3, r7, #20
 800b094:	2200      	movs	r2, #0
 800b096:	601a      	str	r2, [r3, #0]
 800b098:	605a      	str	r2, [r3, #4]
 800b09a:	609a      	str	r2, [r3, #8]
 800b09c:	60da      	str	r2, [r3, #12]
 800b09e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a34      	ldr	r2, [pc, #208]	; (800b178 <HAL_UART_MspInit+0xf0>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d161      	bne.n	800b16e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	613b      	str	r3, [r7, #16]
 800b0ae:	4b33      	ldr	r3, [pc, #204]	; (800b17c <HAL_UART_MspInit+0xf4>)
 800b0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b2:	4a32      	ldr	r2, [pc, #200]	; (800b17c <HAL_UART_MspInit+0xf4>)
 800b0b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b0b8:	6413      	str	r3, [r2, #64]	; 0x40
 800b0ba:	4b30      	ldr	r3, [pc, #192]	; (800b17c <HAL_UART_MspInit+0xf4>)
 800b0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b0c2:	613b      	str	r3, [r7, #16]
 800b0c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	60fb      	str	r3, [r7, #12]
 800b0ca:	4b2c      	ldr	r3, [pc, #176]	; (800b17c <HAL_UART_MspInit+0xf4>)
 800b0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ce:	4a2b      	ldr	r2, [pc, #172]	; (800b17c <HAL_UART_MspInit+0xf4>)
 800b0d0:	f043 0301 	orr.w	r3, r3, #1
 800b0d4:	6313      	str	r3, [r2, #48]	; 0x30
 800b0d6:	4b29      	ldr	r3, [pc, #164]	; (800b17c <HAL_UART_MspInit+0xf4>)
 800b0d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0da:	f003 0301 	and.w	r3, r3, #1
 800b0de:	60fb      	str	r3, [r7, #12]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b0e2:	2303      	movs	r3, #3
 800b0e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0e6:	2302      	movs	r3, #2
 800b0e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0ee:	2303      	movs	r3, #3
 800b0f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800b0f2:	2308      	movs	r3, #8
 800b0f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b0f6:	f107 0314 	add.w	r3, r7, #20
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	4820      	ldr	r0, [pc, #128]	; (800b180 <HAL_UART_MspInit+0xf8>)
 800b0fe:	f000 fd7b 	bl	800bbf8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800b102:	4b20      	ldr	r3, [pc, #128]	; (800b184 <HAL_UART_MspInit+0xfc>)
 800b104:	4a20      	ldr	r2, [pc, #128]	; (800b188 <HAL_UART_MspInit+0x100>)
 800b106:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800b108:	4b1e      	ldr	r3, [pc, #120]	; (800b184 <HAL_UART_MspInit+0xfc>)
 800b10a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b10e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b110:	4b1c      	ldr	r3, [pc, #112]	; (800b184 <HAL_UART_MspInit+0xfc>)
 800b112:	2240      	movs	r2, #64	; 0x40
 800b114:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b116:	4b1b      	ldr	r3, [pc, #108]	; (800b184 <HAL_UART_MspInit+0xfc>)
 800b118:	2200      	movs	r2, #0
 800b11a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b11c:	4b19      	ldr	r3, [pc, #100]	; (800b184 <HAL_UART_MspInit+0xfc>)
 800b11e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b122:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b124:	4b17      	ldr	r3, [pc, #92]	; (800b184 <HAL_UART_MspInit+0xfc>)
 800b126:	2200      	movs	r2, #0
 800b128:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b12a:	4b16      	ldr	r3, [pc, #88]	; (800b184 <HAL_UART_MspInit+0xfc>)
 800b12c:	2200      	movs	r2, #0
 800b12e:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800b130:	4b14      	ldr	r3, [pc, #80]	; (800b184 <HAL_UART_MspInit+0xfc>)
 800b132:	2200      	movs	r2, #0
 800b134:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b136:	4b13      	ldr	r3, [pc, #76]	; (800b184 <HAL_UART_MspInit+0xfc>)
 800b138:	2200      	movs	r2, #0
 800b13a:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b13c:	4b11      	ldr	r3, [pc, #68]	; (800b184 <HAL_UART_MspInit+0xfc>)
 800b13e:	2200      	movs	r2, #0
 800b140:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800b142:	4810      	ldr	r0, [pc, #64]	; (800b184 <HAL_UART_MspInit+0xfc>)
 800b144:	f000 f9ba 	bl	800b4bc <HAL_DMA_Init>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d001      	beq.n	800b152 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800b14e:	f7f9 f82d 	bl	80041ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	4a0b      	ldr	r2, [pc, #44]	; (800b184 <HAL_UART_MspInit+0xfc>)
 800b156:	631a      	str	r2, [r3, #48]	; 0x30
 800b158:	4a0a      	ldr	r2, [pc, #40]	; (800b184 <HAL_UART_MspInit+0xfc>)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800b15e:	2200      	movs	r2, #0
 800b160:	2105      	movs	r1, #5
 800b162:	2034      	movs	r0, #52	; 0x34
 800b164:	f000 f980 	bl	800b468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800b168:	2034      	movs	r0, #52	; 0x34
 800b16a:	f000 f999 	bl	800b4a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800b16e:	bf00      	nop
 800b170:	3728      	adds	r7, #40	; 0x28
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}
 800b176:	bf00      	nop
 800b178:	40004c00 	.word	0x40004c00
 800b17c:	40023800 	.word	0x40023800
 800b180:	40020000 	.word	0x40020000
 800b184:	200069f8 	.word	0x200069f8
 800b188:	40026070 	.word	0x40026070

0800b18c <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4a0c      	ldr	r2, [pc, #48]	; (800b1cc <HAL_UART_TxCpltCallback+0x40>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d112      	bne.n	800b1c4 <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800b19e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b1a2:	490b      	ldr	r1, [pc, #44]	; (800b1d0 <HAL_UART_TxCpltCallback+0x44>)
 800b1a4:	480b      	ldr	r0, [pc, #44]	; (800b1d4 <HAL_UART_TxCpltCallback+0x48>)
 800b1a6:	f7f9 f8a0 	bl	80042ea <ringBuff_PopArray>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 800b1ae:	89fb      	ldrh	r3, [r7, #14]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d006      	beq.n	800b1c2 <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800b1b4:	89fb      	ldrh	r3, [r7, #14]
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	4905      	ldr	r1, [pc, #20]	; (800b1d0 <HAL_UART_TxCpltCallback+0x44>)
 800b1ba:	4807      	ldr	r0, [pc, #28]	; (800b1d8 <HAL_UART_TxCpltCallback+0x4c>)
 800b1bc:	f003 f9b0 	bl	800e520 <HAL_UART_Transmit_DMA>
 800b1c0:	e000      	b.n	800b1c4 <HAL_UART_TxCpltCallback+0x38>
			return;
 800b1c2:	bf00      	nop
	}
}
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	40004c00 	.word	0x40004c00
 800b1d0:	20005930 	.word	0x20005930
 800b1d4:	20000410 	.word	0x20000410
 800b1d8:	200069b8 	.word	0x200069b8

0800b1dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b1dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b214 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b1e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b1e2:	e003      	b.n	800b1ec <LoopCopyDataInit>

0800b1e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b1e4:	4b0c      	ldr	r3, [pc, #48]	; (800b218 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b1e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b1e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b1ea:	3104      	adds	r1, #4

0800b1ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b1ec:	480b      	ldr	r0, [pc, #44]	; (800b21c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b1ee:	4b0c      	ldr	r3, [pc, #48]	; (800b220 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b1f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b1f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b1f4:	d3f6      	bcc.n	800b1e4 <CopyDataInit>
  ldr  r2, =_sbss
 800b1f6:	4a0b      	ldr	r2, [pc, #44]	; (800b224 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b1f8:	e002      	b.n	800b200 <LoopFillZerobss>

0800b1fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b1fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b1fc:	f842 3b04 	str.w	r3, [r2], #4

0800b200 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b200:	4b09      	ldr	r3, [pc, #36]	; (800b228 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b202:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b204:	d3f9      	bcc.n	800b1fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b206:	f7ff fe3f 	bl	800ae88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b20a:	f00a fbf3 	bl	80159f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b20e:	f7f8 ff39 	bl	8004084 <main>
  bx  lr    
 800b212:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b214:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b218:	0801b700 	.word	0x0801b700
  ldr  r0, =_sdata
 800b21c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b220:	20000b80 	.word	0x20000b80
  ldr  r2, =_sbss
 800b224:	20000b80 	.word	0x20000b80
  ldr  r3, = _ebss
 800b228:	20007740 	.word	0x20007740

0800b22c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b22c:	e7fe      	b.n	800b22c <ADC_IRQHandler>
	...

0800b230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b234:	4b0e      	ldr	r3, [pc, #56]	; (800b270 <HAL_Init+0x40>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a0d      	ldr	r2, [pc, #52]	; (800b270 <HAL_Init+0x40>)
 800b23a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b23e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b240:	4b0b      	ldr	r3, [pc, #44]	; (800b270 <HAL_Init+0x40>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4a0a      	ldr	r2, [pc, #40]	; (800b270 <HAL_Init+0x40>)
 800b246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b24a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b24c:	4b08      	ldr	r3, [pc, #32]	; (800b270 <HAL_Init+0x40>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a07      	ldr	r2, [pc, #28]	; (800b270 <HAL_Init+0x40>)
 800b252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b256:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b258:	2003      	movs	r0, #3
 800b25a:	f000 f8fa 	bl	800b452 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b25e:	2000      	movs	r0, #0
 800b260:	f7ff fd22 	bl	800aca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b264:	f7ff fcf4 	bl	800ac50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b268:	2300      	movs	r3, #0
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	40023c00 	.word	0x40023c00

0800b274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b274:	b480      	push	{r7}
 800b276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b278:	4b06      	ldr	r3, [pc, #24]	; (800b294 <HAL_IncTick+0x20>)
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	461a      	mov	r2, r3
 800b27e:	4b06      	ldr	r3, [pc, #24]	; (800b298 <HAL_IncTick+0x24>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4413      	add	r3, r2
 800b284:	4a04      	ldr	r2, [pc, #16]	; (800b298 <HAL_IncTick+0x24>)
 800b286:	6013      	str	r3, [r2, #0]
}
 800b288:	bf00      	nop
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr
 800b292:	bf00      	nop
 800b294:	20000830 	.word	0x20000830
 800b298:	20006a58 	.word	0x20006a58

0800b29c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b29c:	b480      	push	{r7}
 800b29e:	af00      	add	r7, sp, #0
  return uwTick;
 800b2a0:	4b03      	ldr	r3, [pc, #12]	; (800b2b0 <HAL_GetTick+0x14>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	20006a58 	.word	0x20006a58

0800b2b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b2bc:	f7ff ffee 	bl	800b29c <HAL_GetTick>
 800b2c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2cc:	d005      	beq.n	800b2da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b2ce:	4b09      	ldr	r3, [pc, #36]	; (800b2f4 <HAL_Delay+0x40>)
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	4413      	add	r3, r2
 800b2d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b2da:	bf00      	nop
 800b2dc:	f7ff ffde 	bl	800b29c <HAL_GetTick>
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	1ad3      	subs	r3, r2, r3
 800b2e6:	68fa      	ldr	r2, [r7, #12]
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d8f7      	bhi.n	800b2dc <HAL_Delay+0x28>
  {
  }
}
 800b2ec:	bf00      	nop
 800b2ee:	3710      	adds	r7, #16
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	20000830 	.word	0x20000830

0800b2f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f003 0307 	and.w	r3, r3, #7
 800b306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b308:	4b0c      	ldr	r3, [pc, #48]	; (800b33c <__NVIC_SetPriorityGrouping+0x44>)
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b30e:	68ba      	ldr	r2, [r7, #8]
 800b310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b314:	4013      	ands	r3, r2
 800b316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b320:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b32a:	4a04      	ldr	r2, [pc, #16]	; (800b33c <__NVIC_SetPriorityGrouping+0x44>)
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	60d3      	str	r3, [r2, #12]
}
 800b330:	bf00      	nop
 800b332:	3714      	adds	r7, #20
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr
 800b33c:	e000ed00 	.word	0xe000ed00

0800b340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b340:	b480      	push	{r7}
 800b342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b344:	4b04      	ldr	r3, [pc, #16]	; (800b358 <__NVIC_GetPriorityGrouping+0x18>)
 800b346:	68db      	ldr	r3, [r3, #12]
 800b348:	0a1b      	lsrs	r3, r3, #8
 800b34a:	f003 0307 	and.w	r3, r3, #7
}
 800b34e:	4618      	mov	r0, r3
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr
 800b358:	e000ed00 	.word	0xe000ed00

0800b35c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	4603      	mov	r3, r0
 800b364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	db0b      	blt.n	800b386 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b36e:	79fb      	ldrb	r3, [r7, #7]
 800b370:	f003 021f 	and.w	r2, r3, #31
 800b374:	4907      	ldr	r1, [pc, #28]	; (800b394 <__NVIC_EnableIRQ+0x38>)
 800b376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b37a:	095b      	lsrs	r3, r3, #5
 800b37c:	2001      	movs	r0, #1
 800b37e:	fa00 f202 	lsl.w	r2, r0, r2
 800b382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b386:	bf00      	nop
 800b388:	370c      	adds	r7, #12
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr
 800b392:	bf00      	nop
 800b394:	e000e100 	.word	0xe000e100

0800b398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b398:	b480      	push	{r7}
 800b39a:	b083      	sub	sp, #12
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	4603      	mov	r3, r0
 800b3a0:	6039      	str	r1, [r7, #0]
 800b3a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b3a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	db0a      	blt.n	800b3c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	b2da      	uxtb	r2, r3
 800b3b0:	490c      	ldr	r1, [pc, #48]	; (800b3e4 <__NVIC_SetPriority+0x4c>)
 800b3b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3b6:	0112      	lsls	r2, r2, #4
 800b3b8:	b2d2      	uxtb	r2, r2
 800b3ba:	440b      	add	r3, r1
 800b3bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b3c0:	e00a      	b.n	800b3d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	b2da      	uxtb	r2, r3
 800b3c6:	4908      	ldr	r1, [pc, #32]	; (800b3e8 <__NVIC_SetPriority+0x50>)
 800b3c8:	79fb      	ldrb	r3, [r7, #7]
 800b3ca:	f003 030f 	and.w	r3, r3, #15
 800b3ce:	3b04      	subs	r3, #4
 800b3d0:	0112      	lsls	r2, r2, #4
 800b3d2:	b2d2      	uxtb	r2, r2
 800b3d4:	440b      	add	r3, r1
 800b3d6:	761a      	strb	r2, [r3, #24]
}
 800b3d8:	bf00      	nop
 800b3da:	370c      	adds	r7, #12
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr
 800b3e4:	e000e100 	.word	0xe000e100
 800b3e8:	e000ed00 	.word	0xe000ed00

0800b3ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b089      	sub	sp, #36	; 0x24
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	60b9      	str	r1, [r7, #8]
 800b3f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f003 0307 	and.w	r3, r3, #7
 800b3fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b400:	69fb      	ldr	r3, [r7, #28]
 800b402:	f1c3 0307 	rsb	r3, r3, #7
 800b406:	2b04      	cmp	r3, #4
 800b408:	bf28      	it	cs
 800b40a:	2304      	movcs	r3, #4
 800b40c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b40e:	69fb      	ldr	r3, [r7, #28]
 800b410:	3304      	adds	r3, #4
 800b412:	2b06      	cmp	r3, #6
 800b414:	d902      	bls.n	800b41c <NVIC_EncodePriority+0x30>
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	3b03      	subs	r3, #3
 800b41a:	e000      	b.n	800b41e <NVIC_EncodePriority+0x32>
 800b41c:	2300      	movs	r3, #0
 800b41e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b420:	f04f 32ff 	mov.w	r2, #4294967295
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	fa02 f303 	lsl.w	r3, r2, r3
 800b42a:	43da      	mvns	r2, r3
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	401a      	ands	r2, r3
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b434:	f04f 31ff 	mov.w	r1, #4294967295
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	fa01 f303 	lsl.w	r3, r1, r3
 800b43e:	43d9      	mvns	r1, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b444:	4313      	orrs	r3, r2
         );
}
 800b446:	4618      	mov	r0, r3
 800b448:	3724      	adds	r7, #36	; 0x24
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr

0800b452 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b452:	b580      	push	{r7, lr}
 800b454:	b082      	sub	sp, #8
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f7ff ff4c 	bl	800b2f8 <__NVIC_SetPriorityGrouping>
}
 800b460:	bf00      	nop
 800b462:	3708      	adds	r7, #8
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b468:	b580      	push	{r7, lr}
 800b46a:	b086      	sub	sp, #24
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	4603      	mov	r3, r0
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
 800b474:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b476:	2300      	movs	r3, #0
 800b478:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b47a:	f7ff ff61 	bl	800b340 <__NVIC_GetPriorityGrouping>
 800b47e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	68b9      	ldr	r1, [r7, #8]
 800b484:	6978      	ldr	r0, [r7, #20]
 800b486:	f7ff ffb1 	bl	800b3ec <NVIC_EncodePriority>
 800b48a:	4602      	mov	r2, r0
 800b48c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b490:	4611      	mov	r1, r2
 800b492:	4618      	mov	r0, r3
 800b494:	f7ff ff80 	bl	800b398 <__NVIC_SetPriority>
}
 800b498:	bf00      	nop
 800b49a:	3718      	adds	r7, #24
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b4aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7ff ff54 	bl	800b35c <__NVIC_EnableIRQ>
}
 800b4b4:	bf00      	nop
 800b4b6:	3708      	adds	r7, #8
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b086      	sub	sp, #24
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b4c8:	f7ff fee8 	bl	800b29c <HAL_GetTick>
 800b4cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d101      	bne.n	800b4d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e099      	b.n	800b60c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2202      	movs	r2, #2
 800b4e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	681a      	ldr	r2, [r3, #0]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f022 0201 	bic.w	r2, r2, #1
 800b4f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b4f8:	e00f      	b.n	800b51a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b4fa:	f7ff fecf 	bl	800b29c <HAL_GetTick>
 800b4fe:	4602      	mov	r2, r0
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	1ad3      	subs	r3, r2, r3
 800b504:	2b05      	cmp	r3, #5
 800b506:	d908      	bls.n	800b51a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2220      	movs	r2, #32
 800b50c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2203      	movs	r2, #3
 800b512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b516:	2303      	movs	r3, #3
 800b518:	e078      	b.n	800b60c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f003 0301 	and.w	r3, r3, #1
 800b524:	2b00      	cmp	r3, #0
 800b526:	d1e8      	bne.n	800b4fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b530:	697a      	ldr	r2, [r7, #20]
 800b532:	4b38      	ldr	r3, [pc, #224]	; (800b614 <HAL_DMA_Init+0x158>)
 800b534:	4013      	ands	r3, r2
 800b536:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	685a      	ldr	r2, [r3, #4]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b546:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	691b      	ldr	r3, [r3, #16]
 800b54c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b552:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	699b      	ldr	r3, [r3, #24]
 800b558:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b55e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6a1b      	ldr	r3, [r3, #32]
 800b564:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b566:	697a      	ldr	r2, [r7, #20]
 800b568:	4313      	orrs	r3, r2
 800b56a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b570:	2b04      	cmp	r3, #4
 800b572:	d107      	bne.n	800b584 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b57c:	4313      	orrs	r3, r2
 800b57e:	697a      	ldr	r2, [r7, #20]
 800b580:	4313      	orrs	r3, r2
 800b582:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	697a      	ldr	r2, [r7, #20]
 800b58a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	695b      	ldr	r3, [r3, #20]
 800b592:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	f023 0307 	bic.w	r3, r3, #7
 800b59a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a0:	697a      	ldr	r2, [r7, #20]
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5aa:	2b04      	cmp	r3, #4
 800b5ac:	d117      	bne.n	800b5de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5b2:	697a      	ldr	r2, [r7, #20]
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d00e      	beq.n	800b5de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 fa9f 	bl	800bb04 <DMA_CheckFifoParam>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d008      	beq.n	800b5de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2240      	movs	r2, #64	; 0x40
 800b5d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e016      	b.n	800b60c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	697a      	ldr	r2, [r7, #20]
 800b5e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 fa56 	bl	800ba98 <DMA_CalcBaseAndBitshift>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5f4:	223f      	movs	r2, #63	; 0x3f
 800b5f6:	409a      	lsls	r2, r3
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2200      	movs	r2, #0
 800b600:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2201      	movs	r2, #1
 800b606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b60a:	2300      	movs	r3, #0
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3718      	adds	r7, #24
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	f010803f 	.word	0xf010803f

0800b618 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b086      	sub	sp, #24
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	607a      	str	r2, [r7, #4]
 800b624:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b626:	2300      	movs	r3, #0
 800b628:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b62e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b636:	2b01      	cmp	r3, #1
 800b638:	d101      	bne.n	800b63e <HAL_DMA_Start_IT+0x26>
 800b63a:	2302      	movs	r3, #2
 800b63c:	e040      	b.n	800b6c0 <HAL_DMA_Start_IT+0xa8>
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2201      	movs	r2, #1
 800b642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d12f      	bne.n	800b6b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2202      	movs	r2, #2
 800b656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2200      	movs	r2, #0
 800b65e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	68b9      	ldr	r1, [r7, #8]
 800b666:	68f8      	ldr	r0, [r7, #12]
 800b668:	f000 f9e8 	bl	800ba3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b670:	223f      	movs	r2, #63	; 0x3f
 800b672:	409a      	lsls	r2, r3
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f042 0216 	orr.w	r2, r2, #22
 800b686:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d007      	beq.n	800b6a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f042 0208 	orr.w	r2, r2, #8
 800b69e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f042 0201 	orr.w	r2, r2, #1
 800b6ae:	601a      	str	r2, [r3, #0]
 800b6b0:	e005      	b.n	800b6be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b6ba:	2302      	movs	r3, #2
 800b6bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b6be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3718      	adds	r7, #24
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b083      	sub	sp, #12
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	2b02      	cmp	r3, #2
 800b6da:	d004      	beq.n	800b6e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2280      	movs	r2, #128	; 0x80
 800b6e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	e00c      	b.n	800b700 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2205      	movs	r2, #5
 800b6ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f022 0201 	bic.w	r2, r2, #1
 800b6fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b6fe:	2300      	movs	r3, #0
}
 800b700:	4618      	mov	r0, r3
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b086      	sub	sp, #24
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b714:	2300      	movs	r3, #0
 800b716:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b718:	4b92      	ldr	r3, [pc, #584]	; (800b964 <HAL_DMA_IRQHandler+0x258>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4a92      	ldr	r2, [pc, #584]	; (800b968 <HAL_DMA_IRQHandler+0x25c>)
 800b71e:	fba2 2303 	umull	r2, r3, r2, r3
 800b722:	0a9b      	lsrs	r3, r3, #10
 800b724:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b72a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b736:	2208      	movs	r2, #8
 800b738:	409a      	lsls	r2, r3
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	4013      	ands	r3, r2
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d01a      	beq.n	800b778 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f003 0304 	and.w	r3, r3, #4
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d013      	beq.n	800b778 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f022 0204 	bic.w	r2, r2, #4
 800b75e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b764:	2208      	movs	r2, #8
 800b766:	409a      	lsls	r2, r3
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b770:	f043 0201 	orr.w	r2, r3, #1
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b77c:	2201      	movs	r2, #1
 800b77e:	409a      	lsls	r2, r3
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	4013      	ands	r3, r2
 800b784:	2b00      	cmp	r3, #0
 800b786:	d012      	beq.n	800b7ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	695b      	ldr	r3, [r3, #20]
 800b78e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b792:	2b00      	cmp	r3, #0
 800b794:	d00b      	beq.n	800b7ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b79a:	2201      	movs	r2, #1
 800b79c:	409a      	lsls	r2, r3
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7a6:	f043 0202 	orr.w	r2, r3, #2
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7b2:	2204      	movs	r2, #4
 800b7b4:	409a      	lsls	r2, r3
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	4013      	ands	r3, r2
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d012      	beq.n	800b7e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f003 0302 	and.w	r3, r3, #2
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d00b      	beq.n	800b7e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7d0:	2204      	movs	r2, #4
 800b7d2:	409a      	lsls	r2, r3
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7dc:	f043 0204 	orr.w	r2, r3, #4
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7e8:	2210      	movs	r2, #16
 800b7ea:	409a      	lsls	r2, r3
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	4013      	ands	r3, r2
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d043      	beq.n	800b87c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f003 0308 	and.w	r3, r3, #8
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d03c      	beq.n	800b87c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b806:	2210      	movs	r2, #16
 800b808:	409a      	lsls	r2, r3
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d018      	beq.n	800b84e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b826:	2b00      	cmp	r3, #0
 800b828:	d108      	bne.n	800b83c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d024      	beq.n	800b87c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	4798      	blx	r3
 800b83a:	e01f      	b.n	800b87c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b840:	2b00      	cmp	r3, #0
 800b842:	d01b      	beq.n	800b87c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	4798      	blx	r3
 800b84c:	e016      	b.n	800b87c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d107      	bne.n	800b86c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	681a      	ldr	r2, [r3, #0]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f022 0208 	bic.w	r2, r2, #8
 800b86a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b870:	2b00      	cmp	r3, #0
 800b872:	d003      	beq.n	800b87c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b880:	2220      	movs	r2, #32
 800b882:	409a      	lsls	r2, r3
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	4013      	ands	r3, r2
 800b888:	2b00      	cmp	r3, #0
 800b88a:	f000 808e 	beq.w	800b9aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f003 0310 	and.w	r3, r3, #16
 800b898:	2b00      	cmp	r3, #0
 800b89a:	f000 8086 	beq.w	800b9aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8a2:	2220      	movs	r2, #32
 800b8a4:	409a      	lsls	r2, r3
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b8b0:	b2db      	uxtb	r3, r3
 800b8b2:	2b05      	cmp	r3, #5
 800b8b4:	d136      	bne.n	800b924 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f022 0216 	bic.w	r2, r2, #22
 800b8c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	695a      	ldr	r2, [r3, #20]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b8d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d103      	bne.n	800b8e6 <HAL_DMA_IRQHandler+0x1da>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d007      	beq.n	800b8f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f022 0208 	bic.w	r2, r2, #8
 800b8f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8fa:	223f      	movs	r2, #63	; 0x3f
 800b8fc:	409a      	lsls	r2, r3
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2201      	movs	r2, #1
 800b90e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b916:	2b00      	cmp	r3, #0
 800b918:	d07d      	beq.n	800ba16 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	4798      	blx	r3
        }
        return;
 800b922:	e078      	b.n	800ba16 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d01c      	beq.n	800b96c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d108      	bne.n	800b952 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b944:	2b00      	cmp	r3, #0
 800b946:	d030      	beq.n	800b9aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	4798      	blx	r3
 800b950:	e02b      	b.n	800b9aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b956:	2b00      	cmp	r3, #0
 800b958:	d027      	beq.n	800b9aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	4798      	blx	r3
 800b962:	e022      	b.n	800b9aa <HAL_DMA_IRQHandler+0x29e>
 800b964:	20000828 	.word	0x20000828
 800b968:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b976:	2b00      	cmp	r3, #0
 800b978:	d10f      	bne.n	800b99a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	681a      	ldr	r2, [r3, #0]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f022 0210 	bic.w	r2, r2, #16
 800b988:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2200      	movs	r2, #0
 800b98e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2201      	movs	r2, #1
 800b996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d003      	beq.n	800b9aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d032      	beq.n	800ba18 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9b6:	f003 0301 	and.w	r3, r3, #1
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d022      	beq.n	800ba04 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2205      	movs	r2, #5
 800b9c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f022 0201 	bic.w	r2, r2, #1
 800b9d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	3301      	adds	r3, #1
 800b9da:	60bb      	str	r3, [r7, #8]
 800b9dc:	697a      	ldr	r2, [r7, #20]
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d307      	bcc.n	800b9f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f003 0301 	and.w	r3, r3, #1
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d1f2      	bne.n	800b9d6 <HAL_DMA_IRQHandler+0x2ca>
 800b9f0:	e000      	b.n	800b9f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800b9f2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d005      	beq.n	800ba18 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	4798      	blx	r3
 800ba14:	e000      	b.n	800ba18 <HAL_DMA_IRQHandler+0x30c>
        return;
 800ba16:	bf00      	nop
    }
  }
}
 800ba18:	3718      	adds	r7, #24
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop

0800ba20 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b083      	sub	sp, #12
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ba2e:	b2db      	uxtb	r3, r3
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	370c      	adds	r7, #12
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr

0800ba3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b085      	sub	sp, #20
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	60b9      	str	r1, [r7, #8]
 800ba46:	607a      	str	r2, [r7, #4]
 800ba48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	681a      	ldr	r2, [r3, #0]
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ba58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	683a      	ldr	r2, [r7, #0]
 800ba60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	689b      	ldr	r3, [r3, #8]
 800ba66:	2b40      	cmp	r3, #64	; 0x40
 800ba68:	d108      	bne.n	800ba7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	68ba      	ldr	r2, [r7, #8]
 800ba78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800ba7a:	e007      	b.n	800ba8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	68ba      	ldr	r2, [r7, #8]
 800ba82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	687a      	ldr	r2, [r7, #4]
 800ba8a:	60da      	str	r2, [r3, #12]
}
 800ba8c:	bf00      	nop
 800ba8e:	3714      	adds	r7, #20
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b085      	sub	sp, #20
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	3b10      	subs	r3, #16
 800baa8:	4a14      	ldr	r2, [pc, #80]	; (800bafc <DMA_CalcBaseAndBitshift+0x64>)
 800baaa:	fba2 2303 	umull	r2, r3, r2, r3
 800baae:	091b      	lsrs	r3, r3, #4
 800bab0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800bab2:	4a13      	ldr	r2, [pc, #76]	; (800bb00 <DMA_CalcBaseAndBitshift+0x68>)
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	4413      	add	r3, r2
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	461a      	mov	r2, r3
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2b03      	cmp	r3, #3
 800bac4:	d909      	bls.n	800bada <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bace:	f023 0303 	bic.w	r3, r3, #3
 800bad2:	1d1a      	adds	r2, r3, #4
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	659a      	str	r2, [r3, #88]	; 0x58
 800bad8:	e007      	b.n	800baea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bae2:	f023 0303 	bic.w	r3, r3, #3
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3714      	adds	r7, #20
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr
 800bafa:	bf00      	nop
 800bafc:	aaaaaaab 	.word	0xaaaaaaab
 800bb00:	0801b210 	.word	0x0801b210

0800bb04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b085      	sub	sp, #20
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	699b      	ldr	r3, [r3, #24]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d11f      	bne.n	800bb5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	2b03      	cmp	r3, #3
 800bb22:	d855      	bhi.n	800bbd0 <DMA_CheckFifoParam+0xcc>
 800bb24:	a201      	add	r2, pc, #4	; (adr r2, 800bb2c <DMA_CheckFifoParam+0x28>)
 800bb26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb2a:	bf00      	nop
 800bb2c:	0800bb3d 	.word	0x0800bb3d
 800bb30:	0800bb4f 	.word	0x0800bb4f
 800bb34:	0800bb3d 	.word	0x0800bb3d
 800bb38:	0800bbd1 	.word	0x0800bbd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d045      	beq.n	800bbd4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800bb48:	2301      	movs	r3, #1
 800bb4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bb4c:	e042      	b.n	800bbd4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bb56:	d13f      	bne.n	800bbd8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bb5c:	e03c      	b.n	800bbd8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	699b      	ldr	r3, [r3, #24]
 800bb62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb66:	d121      	bne.n	800bbac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	2b03      	cmp	r3, #3
 800bb6c:	d836      	bhi.n	800bbdc <DMA_CheckFifoParam+0xd8>
 800bb6e:	a201      	add	r2, pc, #4	; (adr r2, 800bb74 <DMA_CheckFifoParam+0x70>)
 800bb70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb74:	0800bb85 	.word	0x0800bb85
 800bb78:	0800bb8b 	.word	0x0800bb8b
 800bb7c:	0800bb85 	.word	0x0800bb85
 800bb80:	0800bb9d 	.word	0x0800bb9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800bb84:	2301      	movs	r3, #1
 800bb86:	73fb      	strb	r3, [r7, #15]
      break;
 800bb88:	e02f      	b.n	800bbea <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d024      	beq.n	800bbe0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800bb96:	2301      	movs	r3, #1
 800bb98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bb9a:	e021      	b.n	800bbe0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bba4:	d11e      	bne.n	800bbe4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800bba6:	2301      	movs	r3, #1
 800bba8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800bbaa:	e01b      	b.n	800bbe4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	2b02      	cmp	r3, #2
 800bbb0:	d902      	bls.n	800bbb8 <DMA_CheckFifoParam+0xb4>
 800bbb2:	2b03      	cmp	r3, #3
 800bbb4:	d003      	beq.n	800bbbe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800bbb6:	e018      	b.n	800bbea <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800bbb8:	2301      	movs	r3, #1
 800bbba:	73fb      	strb	r3, [r7, #15]
      break;
 800bbbc:	e015      	b.n	800bbea <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d00e      	beq.n	800bbe8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	73fb      	strb	r3, [r7, #15]
      break;
 800bbce:	e00b      	b.n	800bbe8 <DMA_CheckFifoParam+0xe4>
      break;
 800bbd0:	bf00      	nop
 800bbd2:	e00a      	b.n	800bbea <DMA_CheckFifoParam+0xe6>
      break;
 800bbd4:	bf00      	nop
 800bbd6:	e008      	b.n	800bbea <DMA_CheckFifoParam+0xe6>
      break;
 800bbd8:	bf00      	nop
 800bbda:	e006      	b.n	800bbea <DMA_CheckFifoParam+0xe6>
      break;
 800bbdc:	bf00      	nop
 800bbde:	e004      	b.n	800bbea <DMA_CheckFifoParam+0xe6>
      break;
 800bbe0:	bf00      	nop
 800bbe2:	e002      	b.n	800bbea <DMA_CheckFifoParam+0xe6>
      break;   
 800bbe4:	bf00      	nop
 800bbe6:	e000      	b.n	800bbea <DMA_CheckFifoParam+0xe6>
      break;
 800bbe8:	bf00      	nop
    }
  } 
  
  return status; 
 800bbea:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3714      	adds	r7, #20
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b089      	sub	sp, #36	; 0x24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800bc02:	2300      	movs	r3, #0
 800bc04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800bc06:	2300      	movs	r3, #0
 800bc08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bc0e:	2300      	movs	r3, #0
 800bc10:	61fb      	str	r3, [r7, #28]
 800bc12:	e16b      	b.n	800beec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800bc14:	2201      	movs	r2, #1
 800bc16:	69fb      	ldr	r3, [r7, #28]
 800bc18:	fa02 f303 	lsl.w	r3, r2, r3
 800bc1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	697a      	ldr	r2, [r7, #20]
 800bc24:	4013      	ands	r3, r2
 800bc26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bc28:	693a      	ldr	r2, [r7, #16]
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	f040 815a 	bne.w	800bee6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	2b01      	cmp	r3, #1
 800bc38:	d00b      	beq.n	800bc52 <HAL_GPIO_Init+0x5a>
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	2b02      	cmp	r3, #2
 800bc40:	d007      	beq.n	800bc52 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bc46:	2b11      	cmp	r3, #17
 800bc48:	d003      	beq.n	800bc52 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	2b12      	cmp	r3, #18
 800bc50:	d130      	bne.n	800bcb4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	689b      	ldr	r3, [r3, #8]
 800bc56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	005b      	lsls	r3, r3, #1
 800bc5c:	2203      	movs	r2, #3
 800bc5e:	fa02 f303 	lsl.w	r3, r2, r3
 800bc62:	43db      	mvns	r3, r3
 800bc64:	69ba      	ldr	r2, [r7, #24]
 800bc66:	4013      	ands	r3, r2
 800bc68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	68da      	ldr	r2, [r3, #12]
 800bc6e:	69fb      	ldr	r3, [r7, #28]
 800bc70:	005b      	lsls	r3, r3, #1
 800bc72:	fa02 f303 	lsl.w	r3, r2, r3
 800bc76:	69ba      	ldr	r2, [r7, #24]
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	69ba      	ldr	r2, [r7, #24]
 800bc80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bc88:	2201      	movs	r2, #1
 800bc8a:	69fb      	ldr	r3, [r7, #28]
 800bc8c:	fa02 f303 	lsl.w	r3, r2, r3
 800bc90:	43db      	mvns	r3, r3
 800bc92:	69ba      	ldr	r2, [r7, #24]
 800bc94:	4013      	ands	r3, r2
 800bc96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	091b      	lsrs	r3, r3, #4
 800bc9e:	f003 0201 	and.w	r2, r3, #1
 800bca2:	69fb      	ldr	r3, [r7, #28]
 800bca4:	fa02 f303 	lsl.w	r3, r2, r3
 800bca8:	69ba      	ldr	r2, [r7, #24]
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	69ba      	ldr	r2, [r7, #24]
 800bcb2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	68db      	ldr	r3, [r3, #12]
 800bcb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800bcba:	69fb      	ldr	r3, [r7, #28]
 800bcbc:	005b      	lsls	r3, r3, #1
 800bcbe:	2203      	movs	r2, #3
 800bcc0:	fa02 f303 	lsl.w	r3, r2, r3
 800bcc4:	43db      	mvns	r3, r3
 800bcc6:	69ba      	ldr	r2, [r7, #24]
 800bcc8:	4013      	ands	r3, r2
 800bcca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	689a      	ldr	r2, [r3, #8]
 800bcd0:	69fb      	ldr	r3, [r7, #28]
 800bcd2:	005b      	lsls	r3, r3, #1
 800bcd4:	fa02 f303 	lsl.w	r3, r2, r3
 800bcd8:	69ba      	ldr	r2, [r7, #24]
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	69ba      	ldr	r2, [r7, #24]
 800bce2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	2b02      	cmp	r3, #2
 800bcea:	d003      	beq.n	800bcf4 <HAL_GPIO_Init+0xfc>
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	2b12      	cmp	r3, #18
 800bcf2:	d123      	bne.n	800bd3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bcf4:	69fb      	ldr	r3, [r7, #28]
 800bcf6:	08da      	lsrs	r2, r3, #3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	3208      	adds	r2, #8
 800bcfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800bd02:	69fb      	ldr	r3, [r7, #28]
 800bd04:	f003 0307 	and.w	r3, r3, #7
 800bd08:	009b      	lsls	r3, r3, #2
 800bd0a:	220f      	movs	r2, #15
 800bd0c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd10:	43db      	mvns	r3, r3
 800bd12:	69ba      	ldr	r2, [r7, #24]
 800bd14:	4013      	ands	r3, r2
 800bd16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	691a      	ldr	r2, [r3, #16]
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	f003 0307 	and.w	r3, r3, #7
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	fa02 f303 	lsl.w	r3, r2, r3
 800bd28:	69ba      	ldr	r2, [r7, #24]
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800bd2e:	69fb      	ldr	r3, [r7, #28]
 800bd30:	08da      	lsrs	r2, r3, #3
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	3208      	adds	r2, #8
 800bd36:	69b9      	ldr	r1, [r7, #24]
 800bd38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	005b      	lsls	r3, r3, #1
 800bd46:	2203      	movs	r2, #3
 800bd48:	fa02 f303 	lsl.w	r3, r2, r3
 800bd4c:	43db      	mvns	r3, r3
 800bd4e:	69ba      	ldr	r2, [r7, #24]
 800bd50:	4013      	ands	r3, r2
 800bd52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	f003 0203 	and.w	r2, r3, #3
 800bd5c:	69fb      	ldr	r3, [r7, #28]
 800bd5e:	005b      	lsls	r3, r3, #1
 800bd60:	fa02 f303 	lsl.w	r3, r2, r3
 800bd64:	69ba      	ldr	r2, [r7, #24]
 800bd66:	4313      	orrs	r3, r2
 800bd68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	69ba      	ldr	r2, [r7, #24]
 800bd6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	f000 80b4 	beq.w	800bee6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bd7e:	2300      	movs	r3, #0
 800bd80:	60fb      	str	r3, [r7, #12]
 800bd82:	4b5f      	ldr	r3, [pc, #380]	; (800bf00 <HAL_GPIO_Init+0x308>)
 800bd84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd86:	4a5e      	ldr	r2, [pc, #376]	; (800bf00 <HAL_GPIO_Init+0x308>)
 800bd88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bd8c:	6453      	str	r3, [r2, #68]	; 0x44
 800bd8e:	4b5c      	ldr	r3, [pc, #368]	; (800bf00 <HAL_GPIO_Init+0x308>)
 800bd90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd96:	60fb      	str	r3, [r7, #12]
 800bd98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bd9a:	4a5a      	ldr	r2, [pc, #360]	; (800bf04 <HAL_GPIO_Init+0x30c>)
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	089b      	lsrs	r3, r3, #2
 800bda0:	3302      	adds	r3, #2
 800bda2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bda6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800bda8:	69fb      	ldr	r3, [r7, #28]
 800bdaa:	f003 0303 	and.w	r3, r3, #3
 800bdae:	009b      	lsls	r3, r3, #2
 800bdb0:	220f      	movs	r2, #15
 800bdb2:	fa02 f303 	lsl.w	r3, r2, r3
 800bdb6:	43db      	mvns	r3, r3
 800bdb8:	69ba      	ldr	r2, [r7, #24]
 800bdba:	4013      	ands	r3, r2
 800bdbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	4a51      	ldr	r2, [pc, #324]	; (800bf08 <HAL_GPIO_Init+0x310>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d02b      	beq.n	800be1e <HAL_GPIO_Init+0x226>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	4a50      	ldr	r2, [pc, #320]	; (800bf0c <HAL_GPIO_Init+0x314>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d025      	beq.n	800be1a <HAL_GPIO_Init+0x222>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	4a4f      	ldr	r2, [pc, #316]	; (800bf10 <HAL_GPIO_Init+0x318>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d01f      	beq.n	800be16 <HAL_GPIO_Init+0x21e>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	4a4e      	ldr	r2, [pc, #312]	; (800bf14 <HAL_GPIO_Init+0x31c>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d019      	beq.n	800be12 <HAL_GPIO_Init+0x21a>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	4a4d      	ldr	r2, [pc, #308]	; (800bf18 <HAL_GPIO_Init+0x320>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d013      	beq.n	800be0e <HAL_GPIO_Init+0x216>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	4a4c      	ldr	r2, [pc, #304]	; (800bf1c <HAL_GPIO_Init+0x324>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d00d      	beq.n	800be0a <HAL_GPIO_Init+0x212>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	4a4b      	ldr	r2, [pc, #300]	; (800bf20 <HAL_GPIO_Init+0x328>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d007      	beq.n	800be06 <HAL_GPIO_Init+0x20e>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	4a4a      	ldr	r2, [pc, #296]	; (800bf24 <HAL_GPIO_Init+0x32c>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d101      	bne.n	800be02 <HAL_GPIO_Init+0x20a>
 800bdfe:	2307      	movs	r3, #7
 800be00:	e00e      	b.n	800be20 <HAL_GPIO_Init+0x228>
 800be02:	2308      	movs	r3, #8
 800be04:	e00c      	b.n	800be20 <HAL_GPIO_Init+0x228>
 800be06:	2306      	movs	r3, #6
 800be08:	e00a      	b.n	800be20 <HAL_GPIO_Init+0x228>
 800be0a:	2305      	movs	r3, #5
 800be0c:	e008      	b.n	800be20 <HAL_GPIO_Init+0x228>
 800be0e:	2304      	movs	r3, #4
 800be10:	e006      	b.n	800be20 <HAL_GPIO_Init+0x228>
 800be12:	2303      	movs	r3, #3
 800be14:	e004      	b.n	800be20 <HAL_GPIO_Init+0x228>
 800be16:	2302      	movs	r3, #2
 800be18:	e002      	b.n	800be20 <HAL_GPIO_Init+0x228>
 800be1a:	2301      	movs	r3, #1
 800be1c:	e000      	b.n	800be20 <HAL_GPIO_Init+0x228>
 800be1e:	2300      	movs	r3, #0
 800be20:	69fa      	ldr	r2, [r7, #28]
 800be22:	f002 0203 	and.w	r2, r2, #3
 800be26:	0092      	lsls	r2, r2, #2
 800be28:	4093      	lsls	r3, r2
 800be2a:	69ba      	ldr	r2, [r7, #24]
 800be2c:	4313      	orrs	r3, r2
 800be2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800be30:	4934      	ldr	r1, [pc, #208]	; (800bf04 <HAL_GPIO_Init+0x30c>)
 800be32:	69fb      	ldr	r3, [r7, #28]
 800be34:	089b      	lsrs	r3, r3, #2
 800be36:	3302      	adds	r3, #2
 800be38:	69ba      	ldr	r2, [r7, #24]
 800be3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800be3e:	4b3a      	ldr	r3, [pc, #232]	; (800bf28 <HAL_GPIO_Init+0x330>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	43db      	mvns	r3, r3
 800be48:	69ba      	ldr	r2, [r7, #24]
 800be4a:	4013      	ands	r3, r2
 800be4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	685b      	ldr	r3, [r3, #4]
 800be52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be56:	2b00      	cmp	r3, #0
 800be58:	d003      	beq.n	800be62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800be5a:	69ba      	ldr	r2, [r7, #24]
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	4313      	orrs	r3, r2
 800be60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800be62:	4a31      	ldr	r2, [pc, #196]	; (800bf28 <HAL_GPIO_Init+0x330>)
 800be64:	69bb      	ldr	r3, [r7, #24]
 800be66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800be68:	4b2f      	ldr	r3, [pc, #188]	; (800bf28 <HAL_GPIO_Init+0x330>)
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	43db      	mvns	r3, r3
 800be72:	69ba      	ldr	r2, [r7, #24]
 800be74:	4013      	ands	r3, r2
 800be76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be80:	2b00      	cmp	r3, #0
 800be82:	d003      	beq.n	800be8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800be84:	69ba      	ldr	r2, [r7, #24]
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	4313      	orrs	r3, r2
 800be8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800be8c:	4a26      	ldr	r2, [pc, #152]	; (800bf28 <HAL_GPIO_Init+0x330>)
 800be8e:	69bb      	ldr	r3, [r7, #24]
 800be90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800be92:	4b25      	ldr	r3, [pc, #148]	; (800bf28 <HAL_GPIO_Init+0x330>)
 800be94:	689b      	ldr	r3, [r3, #8]
 800be96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	43db      	mvns	r3, r3
 800be9c:	69ba      	ldr	r2, [r7, #24]
 800be9e:	4013      	ands	r3, r2
 800bea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d003      	beq.n	800beb6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800beae:	69ba      	ldr	r2, [r7, #24]
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	4313      	orrs	r3, r2
 800beb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800beb6:	4a1c      	ldr	r2, [pc, #112]	; (800bf28 <HAL_GPIO_Init+0x330>)
 800beb8:	69bb      	ldr	r3, [r7, #24]
 800beba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800bebc:	4b1a      	ldr	r3, [pc, #104]	; (800bf28 <HAL_GPIO_Init+0x330>)
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	43db      	mvns	r3, r3
 800bec6:	69ba      	ldr	r2, [r7, #24]
 800bec8:	4013      	ands	r3, r2
 800beca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d003      	beq.n	800bee0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800bed8:	69ba      	ldr	r2, [r7, #24]
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	4313      	orrs	r3, r2
 800bede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800bee0:	4a11      	ldr	r2, [pc, #68]	; (800bf28 <HAL_GPIO_Init+0x330>)
 800bee2:	69bb      	ldr	r3, [r7, #24]
 800bee4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bee6:	69fb      	ldr	r3, [r7, #28]
 800bee8:	3301      	adds	r3, #1
 800beea:	61fb      	str	r3, [r7, #28]
 800beec:	69fb      	ldr	r3, [r7, #28]
 800beee:	2b0f      	cmp	r3, #15
 800bef0:	f67f ae90 	bls.w	800bc14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800bef4:	bf00      	nop
 800bef6:	3724      	adds	r7, #36	; 0x24
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr
 800bf00:	40023800 	.word	0x40023800
 800bf04:	40013800 	.word	0x40013800
 800bf08:	40020000 	.word	0x40020000
 800bf0c:	40020400 	.word	0x40020400
 800bf10:	40020800 	.word	0x40020800
 800bf14:	40020c00 	.word	0x40020c00
 800bf18:	40021000 	.word	0x40021000
 800bf1c:	40021400 	.word	0x40021400
 800bf20:	40021800 	.word	0x40021800
 800bf24:	40021c00 	.word	0x40021c00
 800bf28:	40013c00 	.word	0x40013c00

0800bf2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b083      	sub	sp, #12
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	460b      	mov	r3, r1
 800bf36:	807b      	strh	r3, [r7, #2]
 800bf38:	4613      	mov	r3, r2
 800bf3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800bf3c:	787b      	ldrb	r3, [r7, #1]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d003      	beq.n	800bf4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bf42:	887a      	ldrh	r2, [r7, #2]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800bf48:	e003      	b.n	800bf52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800bf4a:	887b      	ldrh	r3, [r7, #2]
 800bf4c:	041a      	lsls	r2, r3, #16
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	619a      	str	r2, [r3, #24]
}
 800bf52:	bf00      	nop
 800bf54:	370c      	adds	r7, #12
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr
	...

0800bf60 <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d101      	bne.n	800bf76 <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800bf72:	2301      	movs	r3, #1
 800bf74:	e043      	b.n	800bffe <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d106      	bne.n	800bf90 <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2200      	movs	r2, #0
 800bf86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800bf8a:	68f8      	ldr	r0, [r7, #12]
 800bf8c:	f7f7 fc7c 	bl	8003888 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	3308      	adds	r3, #8
 800bf98:	4619      	mov	r1, r3
 800bf9a:	4610      	mov	r0, r2
 800bf9c:	f003 f97e 	bl	800f29c <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	6818      	ldr	r0, [r3, #0]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	689b      	ldr	r3, [r3, #8]
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	68b9      	ldr	r1, [r7, #8]
 800bfac:	f003 f9c8 	bl	800f340 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	6858      	ldr	r0, [r3, #4]
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	689a      	ldr	r2, [r3, #8]
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfbc:	6879      	ldr	r1, [r7, #4]
 800bfbe:	f003 f9fd 	bl	800f3bc <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	68fa      	ldr	r2, [r7, #12]
 800bfc8:	6892      	ldr	r2, [r2, #8]
 800bfca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	68fa      	ldr	r2, [r7, #12]
 800bfd4:	6892      	ldr	r2, [r2, #8]
 800bfd6:	f041 0101 	orr.w	r1, r1, #1
 800bfda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	695b      	ldr	r3, [r3, #20]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d103      	bne.n	800bfee <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800bfe6:	4b08      	ldr	r3, [pc, #32]	; (800c008 <HAL_NOR_Init+0xa8>)
 800bfe8:	2200      	movs	r2, #0
 800bfea:	601a      	str	r2, [r3, #0]
 800bfec:	e002      	b.n	800bff4 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800bfee:	4b06      	ldr	r3, [pc, #24]	; (800c008 <HAL_NOR_Init+0xa8>)
 800bff0:	2201      	movs	r2, #1
 800bff2:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2201      	movs	r2, #1
 800bff8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 800bffc:	2300      	movs	r3, #0
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3710      	adds	r7, #16
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	20001004 	.word	0x20001004

0800c00c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c00c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c00e:	b08f      	sub	sp, #60	; 0x3c
 800c010:	af0a      	add	r7, sp, #40	; 0x28
 800c012:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d101      	bne.n	800c01e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c01a:	2301      	movs	r3, #1
 800c01c:	e10f      	b.n	800c23e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d106      	bne.n	800c03e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2200      	movs	r2, #0
 800c034:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f009 f9d9 	bl	80153f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2203      	movs	r2, #3
 800c042:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c04a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d102      	bne.n	800c058 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2200      	movs	r2, #0
 800c056:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	4618      	mov	r0, r3
 800c05e:	f003 fb02 	bl	800f666 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	603b      	str	r3, [r7, #0]
 800c068:	687e      	ldr	r6, [r7, #4]
 800c06a:	466d      	mov	r5, sp
 800c06c:	f106 0410 	add.w	r4, r6, #16
 800c070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c074:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c076:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c078:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c07c:	e885 0003 	stmia.w	r5, {r0, r1}
 800c080:	1d33      	adds	r3, r6, #4
 800c082:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c084:	6838      	ldr	r0, [r7, #0]
 800c086:	f003 f9d9 	bl	800f43c <USB_CoreInit>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d005      	beq.n	800c09c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2202      	movs	r2, #2
 800c094:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c098:	2301      	movs	r3, #1
 800c09a:	e0d0      	b.n	800c23e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	2100      	movs	r1, #0
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f003 faf0 	bl	800f688 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	73fb      	strb	r3, [r7, #15]
 800c0ac:	e04a      	b.n	800c144 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c0ae:	7bfa      	ldrb	r2, [r7, #15]
 800c0b0:	6879      	ldr	r1, [r7, #4]
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	00db      	lsls	r3, r3, #3
 800c0b6:	1a9b      	subs	r3, r3, r2
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	440b      	add	r3, r1
 800c0bc:	333d      	adds	r3, #61	; 0x3d
 800c0be:	2201      	movs	r2, #1
 800c0c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c0c2:	7bfa      	ldrb	r2, [r7, #15]
 800c0c4:	6879      	ldr	r1, [r7, #4]
 800c0c6:	4613      	mov	r3, r2
 800c0c8:	00db      	lsls	r3, r3, #3
 800c0ca:	1a9b      	subs	r3, r3, r2
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	440b      	add	r3, r1
 800c0d0:	333c      	adds	r3, #60	; 0x3c
 800c0d2:	7bfa      	ldrb	r2, [r7, #15]
 800c0d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c0d6:	7bfa      	ldrb	r2, [r7, #15]
 800c0d8:	7bfb      	ldrb	r3, [r7, #15]
 800c0da:	b298      	uxth	r0, r3
 800c0dc:	6879      	ldr	r1, [r7, #4]
 800c0de:	4613      	mov	r3, r2
 800c0e0:	00db      	lsls	r3, r3, #3
 800c0e2:	1a9b      	subs	r3, r3, r2
 800c0e4:	009b      	lsls	r3, r3, #2
 800c0e6:	440b      	add	r3, r1
 800c0e8:	3342      	adds	r3, #66	; 0x42
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c0ee:	7bfa      	ldrb	r2, [r7, #15]
 800c0f0:	6879      	ldr	r1, [r7, #4]
 800c0f2:	4613      	mov	r3, r2
 800c0f4:	00db      	lsls	r3, r3, #3
 800c0f6:	1a9b      	subs	r3, r3, r2
 800c0f8:	009b      	lsls	r3, r3, #2
 800c0fa:	440b      	add	r3, r1
 800c0fc:	333f      	adds	r3, #63	; 0x3f
 800c0fe:	2200      	movs	r2, #0
 800c100:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c102:	7bfa      	ldrb	r2, [r7, #15]
 800c104:	6879      	ldr	r1, [r7, #4]
 800c106:	4613      	mov	r3, r2
 800c108:	00db      	lsls	r3, r3, #3
 800c10a:	1a9b      	subs	r3, r3, r2
 800c10c:	009b      	lsls	r3, r3, #2
 800c10e:	440b      	add	r3, r1
 800c110:	3344      	adds	r3, #68	; 0x44
 800c112:	2200      	movs	r2, #0
 800c114:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c116:	7bfa      	ldrb	r2, [r7, #15]
 800c118:	6879      	ldr	r1, [r7, #4]
 800c11a:	4613      	mov	r3, r2
 800c11c:	00db      	lsls	r3, r3, #3
 800c11e:	1a9b      	subs	r3, r3, r2
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	440b      	add	r3, r1
 800c124:	3348      	adds	r3, #72	; 0x48
 800c126:	2200      	movs	r2, #0
 800c128:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c12a:	7bfa      	ldrb	r2, [r7, #15]
 800c12c:	6879      	ldr	r1, [r7, #4]
 800c12e:	4613      	mov	r3, r2
 800c130:	00db      	lsls	r3, r3, #3
 800c132:	1a9b      	subs	r3, r3, r2
 800c134:	009b      	lsls	r3, r3, #2
 800c136:	440b      	add	r3, r1
 800c138:	3350      	adds	r3, #80	; 0x50
 800c13a:	2200      	movs	r2, #0
 800c13c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c13e:	7bfb      	ldrb	r3, [r7, #15]
 800c140:	3301      	adds	r3, #1
 800c142:	73fb      	strb	r3, [r7, #15]
 800c144:	7bfa      	ldrb	r2, [r7, #15]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d3af      	bcc.n	800c0ae <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c14e:	2300      	movs	r3, #0
 800c150:	73fb      	strb	r3, [r7, #15]
 800c152:	e044      	b.n	800c1de <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c154:	7bfa      	ldrb	r2, [r7, #15]
 800c156:	6879      	ldr	r1, [r7, #4]
 800c158:	4613      	mov	r3, r2
 800c15a:	00db      	lsls	r3, r3, #3
 800c15c:	1a9b      	subs	r3, r3, r2
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	440b      	add	r3, r1
 800c162:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800c166:	2200      	movs	r2, #0
 800c168:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c16a:	7bfa      	ldrb	r2, [r7, #15]
 800c16c:	6879      	ldr	r1, [r7, #4]
 800c16e:	4613      	mov	r3, r2
 800c170:	00db      	lsls	r3, r3, #3
 800c172:	1a9b      	subs	r3, r3, r2
 800c174:	009b      	lsls	r3, r3, #2
 800c176:	440b      	add	r3, r1
 800c178:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c17c:	7bfa      	ldrb	r2, [r7, #15]
 800c17e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c180:	7bfa      	ldrb	r2, [r7, #15]
 800c182:	6879      	ldr	r1, [r7, #4]
 800c184:	4613      	mov	r3, r2
 800c186:	00db      	lsls	r3, r3, #3
 800c188:	1a9b      	subs	r3, r3, r2
 800c18a:	009b      	lsls	r3, r3, #2
 800c18c:	440b      	add	r3, r1
 800c18e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c192:	2200      	movs	r2, #0
 800c194:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c196:	7bfa      	ldrb	r2, [r7, #15]
 800c198:	6879      	ldr	r1, [r7, #4]
 800c19a:	4613      	mov	r3, r2
 800c19c:	00db      	lsls	r3, r3, #3
 800c19e:	1a9b      	subs	r3, r3, r2
 800c1a0:	009b      	lsls	r3, r3, #2
 800c1a2:	440b      	add	r3, r1
 800c1a4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c1ac:	7bfa      	ldrb	r2, [r7, #15]
 800c1ae:	6879      	ldr	r1, [r7, #4]
 800c1b0:	4613      	mov	r3, r2
 800c1b2:	00db      	lsls	r3, r3, #3
 800c1b4:	1a9b      	subs	r3, r3, r2
 800c1b6:	009b      	lsls	r3, r3, #2
 800c1b8:	440b      	add	r3, r1
 800c1ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c1be:	2200      	movs	r2, #0
 800c1c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c1c2:	7bfa      	ldrb	r2, [r7, #15]
 800c1c4:	6879      	ldr	r1, [r7, #4]
 800c1c6:	4613      	mov	r3, r2
 800c1c8:	00db      	lsls	r3, r3, #3
 800c1ca:	1a9b      	subs	r3, r3, r2
 800c1cc:	009b      	lsls	r3, r3, #2
 800c1ce:	440b      	add	r3, r1
 800c1d0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c1d8:	7bfb      	ldrb	r3, [r7, #15]
 800c1da:	3301      	adds	r3, #1
 800c1dc:	73fb      	strb	r3, [r7, #15]
 800c1de:	7bfa      	ldrb	r2, [r7, #15]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d3b5      	bcc.n	800c154 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	603b      	str	r3, [r7, #0]
 800c1ee:	687e      	ldr	r6, [r7, #4]
 800c1f0:	466d      	mov	r5, sp
 800c1f2:	f106 0410 	add.w	r4, r6, #16
 800c1f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c1f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c1fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c1fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c1fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c202:	e885 0003 	stmia.w	r5, {r0, r1}
 800c206:	1d33      	adds	r3, r6, #4
 800c208:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c20a:	6838      	ldr	r0, [r7, #0]
 800c20c:	f003 fa66 	bl	800f6dc <USB_DevInit>
 800c210:	4603      	mov	r3, r0
 800c212:	2b00      	cmp	r3, #0
 800c214:	d005      	beq.n	800c222 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2202      	movs	r2, #2
 800c21a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c21e:	2301      	movs	r3, #1
 800c220:	e00d      	b.n	800c23e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2200      	movs	r2, #0
 800c226:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2201      	movs	r2, #1
 800c22e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	4618      	mov	r0, r3
 800c238:	f004 faae 	bl	8010798 <USB_DevDisconnect>

  return HAL_OK;
 800c23c:	2300      	movs	r3, #0
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3714      	adds	r7, #20
 800c242:	46bd      	mov	sp, r7
 800c244:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c246 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c246:	b580      	push	{r7, lr}
 800c248:	b084      	sub	sp, #16
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c25a:	2b01      	cmp	r3, #1
 800c25c:	d101      	bne.n	800c262 <HAL_PCD_Start+0x1c>
 800c25e:	2302      	movs	r3, #2
 800c260:	e020      	b.n	800c2a4 <HAL_PCD_Start+0x5e>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2201      	movs	r2, #1
 800c266:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d109      	bne.n	800c286 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c276:	2b01      	cmp	r3, #1
 800c278:	d005      	beq.n	800c286 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c27e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	4618      	mov	r0, r3
 800c28c:	f003 f9da 	bl	800f644 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4618      	mov	r0, r3
 800c296:	f004 fa5e 	bl	8010756 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2200      	movs	r2, #0
 800c29e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c2a2:	2300      	movs	r3, #0
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3710      	adds	r7, #16
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c2ac:	b590      	push	{r4, r7, lr}
 800c2ae:	b08d      	sub	sp, #52	; 0x34
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2ba:	6a3b      	ldr	r3, [r7, #32]
 800c2bc:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f004 fb1c 	bl	8010900 <USB_GetMode>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	f040 839d 	bne.w	800ca0a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f004 fa80 	bl	80107da <USB_ReadInterrupts>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	f000 8393 	beq.w	800ca08 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f004 fa77 	bl	80107da <USB_ReadInterrupts>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	f003 0302 	and.w	r3, r3, #2
 800c2f2:	2b02      	cmp	r3, #2
 800c2f4:	d107      	bne.n	800c306 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	695a      	ldr	r2, [r3, #20]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f002 0202 	and.w	r2, r2, #2
 800c304:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4618      	mov	r0, r3
 800c30c:	f004 fa65 	bl	80107da <USB_ReadInterrupts>
 800c310:	4603      	mov	r3, r0
 800c312:	f003 0310 	and.w	r3, r3, #16
 800c316:	2b10      	cmp	r3, #16
 800c318:	d161      	bne.n	800c3de <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	699a      	ldr	r2, [r3, #24]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f022 0210 	bic.w	r2, r2, #16
 800c328:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800c32a:	6a3b      	ldr	r3, [r7, #32]
 800c32c:	6a1b      	ldr	r3, [r3, #32]
 800c32e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800c330:	69bb      	ldr	r3, [r7, #24]
 800c332:	f003 020f 	and.w	r2, r3, #15
 800c336:	4613      	mov	r3, r2
 800c338:	00db      	lsls	r3, r3, #3
 800c33a:	1a9b      	subs	r3, r3, r2
 800c33c:	009b      	lsls	r3, r3, #2
 800c33e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	4413      	add	r3, r2
 800c346:	3304      	adds	r3, #4
 800c348:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c34a:	69bb      	ldr	r3, [r7, #24]
 800c34c:	0c5b      	lsrs	r3, r3, #17
 800c34e:	f003 030f 	and.w	r3, r3, #15
 800c352:	2b02      	cmp	r3, #2
 800c354:	d124      	bne.n	800c3a0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c356:	69ba      	ldr	r2, [r7, #24]
 800c358:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800c35c:	4013      	ands	r3, r2
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d035      	beq.n	800c3ce <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c366:	69bb      	ldr	r3, [r7, #24]
 800c368:	091b      	lsrs	r3, r3, #4
 800c36a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c36c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c370:	b29b      	uxth	r3, r3
 800c372:	461a      	mov	r2, r3
 800c374:	6a38      	ldr	r0, [r7, #32]
 800c376:	f004 f8cb 	bl	8010510 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	68da      	ldr	r2, [r3, #12]
 800c37e:	69bb      	ldr	r3, [r7, #24]
 800c380:	091b      	lsrs	r3, r3, #4
 800c382:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c386:	441a      	add	r2, r3
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	699a      	ldr	r2, [r3, #24]
 800c390:	69bb      	ldr	r3, [r7, #24]
 800c392:	091b      	lsrs	r3, r3, #4
 800c394:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c398:	441a      	add	r2, r3
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	619a      	str	r2, [r3, #24]
 800c39e:	e016      	b.n	800c3ce <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800c3a0:	69bb      	ldr	r3, [r7, #24]
 800c3a2:	0c5b      	lsrs	r3, r3, #17
 800c3a4:	f003 030f 	and.w	r3, r3, #15
 800c3a8:	2b06      	cmp	r3, #6
 800c3aa:	d110      	bne.n	800c3ce <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c3b2:	2208      	movs	r2, #8
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	6a38      	ldr	r0, [r7, #32]
 800c3b8:	f004 f8aa 	bl	8010510 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	699a      	ldr	r2, [r3, #24]
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	091b      	lsrs	r3, r3, #4
 800c3c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c3c8:	441a      	add	r2, r3
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	699a      	ldr	r2, [r3, #24]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f042 0210 	orr.w	r2, r2, #16
 800c3dc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f004 f9f9 	bl	80107da <USB_ReadInterrupts>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c3ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c3f2:	d16e      	bne.n	800c4d2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f004 f9ff 	bl	8010800 <USB_ReadDevAllOutEpInterrupt>
 800c402:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800c404:	e062      	b.n	800c4cc <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c408:	f003 0301 	and.w	r3, r3, #1
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d057      	beq.n	800c4c0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c416:	b2d2      	uxtb	r2, r2
 800c418:	4611      	mov	r1, r2
 800c41a:	4618      	mov	r0, r3
 800c41c:	f004 fa24 	bl	8010868 <USB_ReadDevOutEPInterrupt>
 800c420:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	f003 0301 	and.w	r3, r3, #1
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d00c      	beq.n	800c446 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42e:	015a      	lsls	r2, r3, #5
 800c430:	69fb      	ldr	r3, [r7, #28]
 800c432:	4413      	add	r3, r2
 800c434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c438:	461a      	mov	r2, r3
 800c43a:	2301      	movs	r3, #1
 800c43c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c43e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f000 fdb1 	bl	800cfa8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	f003 0308 	and.w	r3, r3, #8
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d00c      	beq.n	800c46a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c452:	015a      	lsls	r2, r3, #5
 800c454:	69fb      	ldr	r3, [r7, #28]
 800c456:	4413      	add	r3, r2
 800c458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c45c:	461a      	mov	r2, r3
 800c45e:	2308      	movs	r3, #8
 800c460:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c462:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f000 feab 	bl	800d1c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	f003 0310 	and.w	r3, r3, #16
 800c470:	2b00      	cmp	r3, #0
 800c472:	d008      	beq.n	800c486 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c476:	015a      	lsls	r2, r3, #5
 800c478:	69fb      	ldr	r3, [r7, #28]
 800c47a:	4413      	add	r3, r2
 800c47c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c480:	461a      	mov	r2, r3
 800c482:	2310      	movs	r3, #16
 800c484:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	f003 0320 	and.w	r3, r3, #32
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d008      	beq.n	800c4a2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c492:	015a      	lsls	r2, r3, #5
 800c494:	69fb      	ldr	r3, [r7, #28]
 800c496:	4413      	add	r3, r2
 800c498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c49c:	461a      	mov	r2, r3
 800c49e:	2320      	movs	r3, #32
 800c4a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d009      	beq.n	800c4c0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ae:	015a      	lsls	r2, r3, #5
 800c4b0:	69fb      	ldr	r3, [r7, #28]
 800c4b2:	4413      	add	r3, r2
 800c4b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4b8:	461a      	mov	r2, r3
 800c4ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c4be:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c8:	085b      	lsrs	r3, r3, #1
 800c4ca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d199      	bne.n	800c406 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f004 f97f 	bl	80107da <USB_ReadInterrupts>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c4e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c4e6:	f040 80c0 	bne.w	800c66a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f004 f9a0 	bl	8010834 <USB_ReadDevAllInEpInterrupt>
 800c4f4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800c4fa:	e0b2      	b.n	800c662 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4fe:	f003 0301 	and.w	r3, r3, #1
 800c502:	2b00      	cmp	r3, #0
 800c504:	f000 80a7 	beq.w	800c656 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c50e:	b2d2      	uxtb	r2, r2
 800c510:	4611      	mov	r1, r2
 800c512:	4618      	mov	r0, r3
 800c514:	f004 f9c6 	bl	80108a4 <USB_ReadDevInEPInterrupt>
 800c518:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	f003 0301 	and.w	r3, r3, #1
 800c520:	2b00      	cmp	r3, #0
 800c522:	d057      	beq.n	800c5d4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c526:	f003 030f 	and.w	r3, r3, #15
 800c52a:	2201      	movs	r2, #1
 800c52c:	fa02 f303 	lsl.w	r3, r2, r3
 800c530:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c532:	69fb      	ldr	r3, [r7, #28]
 800c534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	43db      	mvns	r3, r3
 800c53e:	69f9      	ldr	r1, [r7, #28]
 800c540:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c544:	4013      	ands	r3, r2
 800c546:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c54a:	015a      	lsls	r2, r3, #5
 800c54c:	69fb      	ldr	r3, [r7, #28]
 800c54e:	4413      	add	r3, r2
 800c550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c554:	461a      	mov	r2, r3
 800c556:	2301      	movs	r3, #1
 800c558:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	691b      	ldr	r3, [r3, #16]
 800c55e:	2b01      	cmp	r3, #1
 800c560:	d132      	bne.n	800c5c8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c562:	6879      	ldr	r1, [r7, #4]
 800c564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c566:	4613      	mov	r3, r2
 800c568:	00db      	lsls	r3, r3, #3
 800c56a:	1a9b      	subs	r3, r3, r2
 800c56c:	009b      	lsls	r3, r3, #2
 800c56e:	440b      	add	r3, r1
 800c570:	3348      	adds	r3, #72	; 0x48
 800c572:	6819      	ldr	r1, [r3, #0]
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c578:	4613      	mov	r3, r2
 800c57a:	00db      	lsls	r3, r3, #3
 800c57c:	1a9b      	subs	r3, r3, r2
 800c57e:	009b      	lsls	r3, r3, #2
 800c580:	4403      	add	r3, r0
 800c582:	3344      	adds	r3, #68	; 0x44
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4419      	add	r1, r3
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c58c:	4613      	mov	r3, r2
 800c58e:	00db      	lsls	r3, r3, #3
 800c590:	1a9b      	subs	r3, r3, r2
 800c592:	009b      	lsls	r3, r3, #2
 800c594:	4403      	add	r3, r0
 800c596:	3348      	adds	r3, #72	; 0x48
 800c598:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d113      	bne.n	800c5c8 <HAL_PCD_IRQHandler+0x31c>
 800c5a0:	6879      	ldr	r1, [r7, #4]
 800c5a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5a4:	4613      	mov	r3, r2
 800c5a6:	00db      	lsls	r3, r3, #3
 800c5a8:	1a9b      	subs	r3, r3, r2
 800c5aa:	009b      	lsls	r3, r3, #2
 800c5ac:	440b      	add	r3, r1
 800c5ae:	3350      	adds	r3, #80	; 0x50
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d108      	bne.n	800c5c8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6818      	ldr	r0, [r3, #0]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	2101      	movs	r1, #1
 800c5c4:	f004 f9ce 	bl	8010964 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f008 ff8f 	bl	80154f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	f003 0308 	and.w	r3, r3, #8
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d008      	beq.n	800c5f0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e0:	015a      	lsls	r2, r3, #5
 800c5e2:	69fb      	ldr	r3, [r7, #28]
 800c5e4:	4413      	add	r3, r2
 800c5e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	2308      	movs	r3, #8
 800c5ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	f003 0310 	and.w	r3, r3, #16
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d008      	beq.n	800c60c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5fc:	015a      	lsls	r2, r3, #5
 800c5fe:	69fb      	ldr	r3, [r7, #28]
 800c600:	4413      	add	r3, r2
 800c602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c606:	461a      	mov	r2, r3
 800c608:	2310      	movs	r3, #16
 800c60a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c612:	2b00      	cmp	r3, #0
 800c614:	d008      	beq.n	800c628 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c618:	015a      	lsls	r2, r3, #5
 800c61a:	69fb      	ldr	r3, [r7, #28]
 800c61c:	4413      	add	r3, r2
 800c61e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c622:	461a      	mov	r2, r3
 800c624:	2340      	movs	r3, #64	; 0x40
 800c626:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	f003 0302 	and.w	r3, r3, #2
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d008      	beq.n	800c644 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c634:	015a      	lsls	r2, r3, #5
 800c636:	69fb      	ldr	r3, [r7, #28]
 800c638:	4413      	add	r3, r2
 800c63a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c63e:	461a      	mov	r2, r3
 800c640:	2302      	movs	r3, #2
 800c642:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d003      	beq.n	800c656 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c64e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 fc1b 	bl	800ce8c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c658:	3301      	adds	r3, #1
 800c65a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65e:	085b      	lsrs	r3, r3, #1
 800c660:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c664:	2b00      	cmp	r3, #0
 800c666:	f47f af49 	bne.w	800c4fc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	4618      	mov	r0, r3
 800c670:	f004 f8b3 	bl	80107da <USB_ReadInterrupts>
 800c674:	4603      	mov	r3, r0
 800c676:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c67a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c67e:	d122      	bne.n	800c6c6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c680:	69fb      	ldr	r3, [r7, #28]
 800c682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c686:	685b      	ldr	r3, [r3, #4]
 800c688:	69fa      	ldr	r2, [r7, #28]
 800c68a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c68e:	f023 0301 	bic.w	r3, r3, #1
 800c692:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800c69a:	2b01      	cmp	r3, #1
 800c69c:	d108      	bne.n	800c6b0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c6a6:	2100      	movs	r1, #0
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f000 fe27 	bl	800d2fc <HAL_PCDEx_LPM_Callback>
 800c6ae:	e002      	b.n	800c6b6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f008 ff95 	bl	80155e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	695a      	ldr	r2, [r3, #20]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800c6c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f004 f885 	bl	80107da <USB_ReadInterrupts>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c6d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c6da:	d112      	bne.n	800c702 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c6dc:	69fb      	ldr	r3, [r7, #28]
 800c6de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6e2:	689b      	ldr	r3, [r3, #8]
 800c6e4:	f003 0301 	and.w	r3, r3, #1
 800c6e8:	2b01      	cmp	r3, #1
 800c6ea:	d102      	bne.n	800c6f2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f008 ff51 	bl	8015594 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	695a      	ldr	r2, [r3, #20]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800c700:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	4618      	mov	r0, r3
 800c708:	f004 f867 	bl	80107da <USB_ReadInterrupts>
 800c70c:	4603      	mov	r3, r0
 800c70e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c716:	f040 80c7 	bne.w	800c8a8 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c71a:	69fb      	ldr	r3, [r7, #28]
 800c71c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	69fa      	ldr	r2, [r7, #28]
 800c724:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c728:	f023 0301 	bic.w	r3, r3, #1
 800c72c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	2110      	movs	r1, #16
 800c734:	4618      	mov	r0, r3
 800c736:	f003 f935 	bl	800f9a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c73a:	2300      	movs	r3, #0
 800c73c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c73e:	e056      	b.n	800c7ee <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c742:	015a      	lsls	r2, r3, #5
 800c744:	69fb      	ldr	r3, [r7, #28]
 800c746:	4413      	add	r3, r2
 800c748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c74c:	461a      	mov	r2, r3
 800c74e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c752:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c756:	015a      	lsls	r2, r3, #5
 800c758:	69fb      	ldr	r3, [r7, #28]
 800c75a:	4413      	add	r3, r2
 800c75c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c764:	0151      	lsls	r1, r2, #5
 800c766:	69fa      	ldr	r2, [r7, #28]
 800c768:	440a      	add	r2, r1
 800c76a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c76e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c772:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c776:	015a      	lsls	r2, r3, #5
 800c778:	69fb      	ldr	r3, [r7, #28]
 800c77a:	4413      	add	r3, r2
 800c77c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c784:	0151      	lsls	r1, r2, #5
 800c786:	69fa      	ldr	r2, [r7, #28]
 800c788:	440a      	add	r2, r1
 800c78a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c78e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c792:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c796:	015a      	lsls	r2, r3, #5
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	4413      	add	r3, r2
 800c79c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c7a6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7aa:	015a      	lsls	r2, r3, #5
 800c7ac:	69fb      	ldr	r3, [r7, #28]
 800c7ae:	4413      	add	r3, r2
 800c7b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7b8:	0151      	lsls	r1, r2, #5
 800c7ba:	69fa      	ldr	r2, [r7, #28]
 800c7bc:	440a      	add	r2, r1
 800c7be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c7c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ca:	015a      	lsls	r2, r3, #5
 800c7cc:	69fb      	ldr	r3, [r7, #28]
 800c7ce:	4413      	add	r3, r2
 800c7d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7d8:	0151      	lsls	r1, r2, #5
 800c7da:	69fa      	ldr	r2, [r7, #28]
 800c7dc:	440a      	add	r2, r1
 800c7de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c7e6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d3a3      	bcc.n	800c740 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c7f8:	69fb      	ldr	r3, [r7, #28]
 800c7fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7fe:	69db      	ldr	r3, [r3, #28]
 800c800:	69fa      	ldr	r2, [r7, #28]
 800c802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c806:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800c80a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c810:	2b00      	cmp	r3, #0
 800c812:	d016      	beq.n	800c842 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c814:	69fb      	ldr	r3, [r7, #28]
 800c816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c81a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c81e:	69fa      	ldr	r2, [r7, #28]
 800c820:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c824:	f043 030b 	orr.w	r3, r3, #11
 800c828:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c82c:	69fb      	ldr	r3, [r7, #28]
 800c82e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c834:	69fa      	ldr	r2, [r7, #28]
 800c836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c83a:	f043 030b 	orr.w	r3, r3, #11
 800c83e:	6453      	str	r3, [r2, #68]	; 0x44
 800c840:	e015      	b.n	800c86e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c842:	69fb      	ldr	r3, [r7, #28]
 800c844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c848:	695b      	ldr	r3, [r3, #20]
 800c84a:	69fa      	ldr	r2, [r7, #28]
 800c84c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c850:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c854:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800c858:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c85a:	69fb      	ldr	r3, [r7, #28]
 800c85c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c860:	691b      	ldr	r3, [r3, #16]
 800c862:	69fa      	ldr	r2, [r7, #28]
 800c864:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c868:	f043 030b 	orr.w	r3, r3, #11
 800c86c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c86e:	69fb      	ldr	r3, [r7, #28]
 800c870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	69fa      	ldr	r2, [r7, #28]
 800c878:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c87c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c880:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6818      	ldr	r0, [r3, #0]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	691b      	ldr	r3, [r3, #16]
 800c88a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c892:	461a      	mov	r2, r3
 800c894:	f004 f866 	bl	8010964 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	695a      	ldr	r2, [r3, #20]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800c8a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f003 ff94 	bl	80107da <USB_ReadInterrupts>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c8b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c8bc:	d124      	bne.n	800c908 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f004 f82a 	bl	801091c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f003 f8ca 	bl	800fa66 <USB_GetDevSpeed>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681c      	ldr	r4, [r3, #0]
 800c8de:	f001 f947 	bl	800db70 <HAL_RCC_GetHCLKFreq>
 800c8e2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c8e8:	b2db      	uxtb	r3, r3
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	f002 fe07 	bl	800f500 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f008 fe25 	bl	8015542 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	695a      	ldr	r2, [r3, #20]
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800c906:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4618      	mov	r0, r3
 800c90e:	f003 ff64 	bl	80107da <USB_ReadInterrupts>
 800c912:	4603      	mov	r3, r0
 800c914:	f003 0308 	and.w	r3, r3, #8
 800c918:	2b08      	cmp	r3, #8
 800c91a:	d10a      	bne.n	800c932 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f008 fe02 	bl	8015526 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	695a      	ldr	r2, [r3, #20]
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f002 0208 	and.w	r2, r2, #8
 800c930:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	4618      	mov	r0, r3
 800c938:	f003 ff4f 	bl	80107da <USB_ReadInterrupts>
 800c93c:	4603      	mov	r3, r0
 800c93e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c942:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c946:	d10f      	bne.n	800c968 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800c948:	2300      	movs	r3, #0
 800c94a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800c94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94e:	b2db      	uxtb	r3, r3
 800c950:	4619      	mov	r1, r3
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f008 fe64 	bl	8015620 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	695a      	ldr	r2, [r3, #20]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800c966:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	4618      	mov	r0, r3
 800c96e:	f003 ff34 	bl	80107da <USB_ReadInterrupts>
 800c972:	4603      	mov	r3, r0
 800c974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c978:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c97c:	d10f      	bne.n	800c99e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800c97e:	2300      	movs	r3, #0
 800c980:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800c982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c984:	b2db      	uxtb	r3, r3
 800c986:	4619      	mov	r1, r3
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f008 fe37 	bl	80155fc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	695a      	ldr	r2, [r3, #20]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800c99c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f003 ff19 	bl	80107da <USB_ReadInterrupts>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c9ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9b2:	d10a      	bne.n	800c9ca <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f008 fe45 	bl	8015644 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	695a      	ldr	r2, [r3, #20]
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800c9c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f003 ff03 	bl	80107da <USB_ReadInterrupts>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	f003 0304 	and.w	r3, r3, #4
 800c9da:	2b04      	cmp	r3, #4
 800c9dc:	d115      	bne.n	800ca0a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800c9e6:	69bb      	ldr	r3, [r7, #24]
 800c9e8:	f003 0304 	and.w	r3, r3, #4
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d002      	beq.n	800c9f6 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f008 fe35 	bl	8015660 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	6859      	ldr	r1, [r3, #4]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	69ba      	ldr	r2, [r7, #24]
 800ca02:	430a      	orrs	r2, r1
 800ca04:	605a      	str	r2, [r3, #4]
 800ca06:	e000      	b.n	800ca0a <HAL_PCD_IRQHandler+0x75e>
      return;
 800ca08:	bf00      	nop
    }
  }
}
 800ca0a:	3734      	adds	r7, #52	; 0x34
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd90      	pop	{r4, r7, pc}

0800ca10 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	460b      	mov	r3, r1
 800ca1a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ca22:	2b01      	cmp	r3, #1
 800ca24:	d101      	bne.n	800ca2a <HAL_PCD_SetAddress+0x1a>
 800ca26:	2302      	movs	r3, #2
 800ca28:	e013      	b.n	800ca52 <HAL_PCD_SetAddress+0x42>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	78fa      	ldrb	r2, [r7, #3]
 800ca36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	78fa      	ldrb	r2, [r7, #3]
 800ca40:	4611      	mov	r1, r2
 800ca42:	4618      	mov	r0, r3
 800ca44:	f003 fe61 	bl	801070a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ca50:	2300      	movs	r3, #0
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3708      	adds	r7, #8
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}

0800ca5a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800ca5a:	b580      	push	{r7, lr}
 800ca5c:	b084      	sub	sp, #16
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	6078      	str	r0, [r7, #4]
 800ca62:	4608      	mov	r0, r1
 800ca64:	4611      	mov	r1, r2
 800ca66:	461a      	mov	r2, r3
 800ca68:	4603      	mov	r3, r0
 800ca6a:	70fb      	strb	r3, [r7, #3]
 800ca6c:	460b      	mov	r3, r1
 800ca6e:	803b      	strh	r3, [r7, #0]
 800ca70:	4613      	mov	r3, r2
 800ca72:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800ca74:	2300      	movs	r3, #0
 800ca76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ca78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	da0f      	bge.n	800caa0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ca80:	78fb      	ldrb	r3, [r7, #3]
 800ca82:	f003 020f 	and.w	r2, r3, #15
 800ca86:	4613      	mov	r3, r2
 800ca88:	00db      	lsls	r3, r3, #3
 800ca8a:	1a9b      	subs	r3, r3, r2
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	3338      	adds	r3, #56	; 0x38
 800ca90:	687a      	ldr	r2, [r7, #4]
 800ca92:	4413      	add	r3, r2
 800ca94:	3304      	adds	r3, #4
 800ca96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	705a      	strb	r2, [r3, #1]
 800ca9e:	e00f      	b.n	800cac0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800caa0:	78fb      	ldrb	r3, [r7, #3]
 800caa2:	f003 020f 	and.w	r2, r3, #15
 800caa6:	4613      	mov	r3, r2
 800caa8:	00db      	lsls	r3, r3, #3
 800caaa:	1a9b      	subs	r3, r3, r2
 800caac:	009b      	lsls	r3, r3, #2
 800caae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	4413      	add	r3, r2
 800cab6:	3304      	adds	r3, #4
 800cab8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2200      	movs	r2, #0
 800cabe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800cac0:	78fb      	ldrb	r3, [r7, #3]
 800cac2:	f003 030f 	and.w	r3, r3, #15
 800cac6:	b2da      	uxtb	r2, r3
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800cacc:	883a      	ldrh	r2, [r7, #0]
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	78ba      	ldrb	r2, [r7, #2]
 800cad6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	785b      	ldrb	r3, [r3, #1]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d004      	beq.n	800caea <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	b29a      	uxth	r2, r3
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800caea:	78bb      	ldrb	r3, [r7, #2]
 800caec:	2b02      	cmp	r3, #2
 800caee:	d102      	bne.n	800caf6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2200      	movs	r2, #0
 800caf4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d101      	bne.n	800cb04 <HAL_PCD_EP_Open+0xaa>
 800cb00:	2302      	movs	r3, #2
 800cb02:	e00e      	b.n	800cb22 <HAL_PCD_EP_Open+0xc8>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2201      	movs	r2, #1
 800cb08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	68f9      	ldr	r1, [r7, #12]
 800cb12:	4618      	mov	r0, r3
 800cb14:	f002 ffcc 	bl	800fab0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800cb20:	7afb      	ldrb	r3, [r7, #11]
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3710      	adds	r7, #16
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}

0800cb2a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cb2a:	b580      	push	{r7, lr}
 800cb2c:	b084      	sub	sp, #16
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
 800cb32:	460b      	mov	r3, r1
 800cb34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cb36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	da0f      	bge.n	800cb5e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cb3e:	78fb      	ldrb	r3, [r7, #3]
 800cb40:	f003 020f 	and.w	r2, r3, #15
 800cb44:	4613      	mov	r3, r2
 800cb46:	00db      	lsls	r3, r3, #3
 800cb48:	1a9b      	subs	r3, r3, r2
 800cb4a:	009b      	lsls	r3, r3, #2
 800cb4c:	3338      	adds	r3, #56	; 0x38
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	4413      	add	r3, r2
 800cb52:	3304      	adds	r3, #4
 800cb54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2201      	movs	r2, #1
 800cb5a:	705a      	strb	r2, [r3, #1]
 800cb5c:	e00f      	b.n	800cb7e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cb5e:	78fb      	ldrb	r3, [r7, #3]
 800cb60:	f003 020f 	and.w	r2, r3, #15
 800cb64:	4613      	mov	r3, r2
 800cb66:	00db      	lsls	r3, r3, #3
 800cb68:	1a9b      	subs	r3, r3, r2
 800cb6a:	009b      	lsls	r3, r3, #2
 800cb6c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cb70:	687a      	ldr	r2, [r7, #4]
 800cb72:	4413      	add	r3, r2
 800cb74:	3304      	adds	r3, #4
 800cb76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800cb7e:	78fb      	ldrb	r3, [r7, #3]
 800cb80:	f003 030f 	and.w	r3, r3, #15
 800cb84:	b2da      	uxtb	r2, r3
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d101      	bne.n	800cb98 <HAL_PCD_EP_Close+0x6e>
 800cb94:	2302      	movs	r3, #2
 800cb96:	e00e      	b.n	800cbb6 <HAL_PCD_EP_Close+0x8c>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	68f9      	ldr	r1, [r7, #12]
 800cba6:	4618      	mov	r0, r3
 800cba8:	f003 f80a 	bl	800fbc0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800cbb4:	2300      	movs	r3, #0
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3710      	adds	r7, #16
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}

0800cbbe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cbbe:	b580      	push	{r7, lr}
 800cbc0:	b086      	sub	sp, #24
 800cbc2:	af00      	add	r7, sp, #0
 800cbc4:	60f8      	str	r0, [r7, #12]
 800cbc6:	607a      	str	r2, [r7, #4]
 800cbc8:	603b      	str	r3, [r7, #0]
 800cbca:	460b      	mov	r3, r1
 800cbcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cbce:	7afb      	ldrb	r3, [r7, #11]
 800cbd0:	f003 020f 	and.w	r2, r3, #15
 800cbd4:	4613      	mov	r3, r2
 800cbd6:	00db      	lsls	r3, r3, #3
 800cbd8:	1a9b      	subs	r3, r3, r2
 800cbda:	009b      	lsls	r3, r3, #2
 800cbdc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cbe0:	68fa      	ldr	r2, [r7, #12]
 800cbe2:	4413      	add	r3, r2
 800cbe4:	3304      	adds	r3, #4
 800cbe6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800cbee:	697b      	ldr	r3, [r7, #20]
 800cbf0:	683a      	ldr	r2, [r7, #0]
 800cbf2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cc00:	7afb      	ldrb	r3, [r7, #11]
 800cc02:	f003 030f 	and.w	r3, r3, #15
 800cc06:	b2da      	uxtb	r2, r3
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	691b      	ldr	r3, [r3, #16]
 800cc10:	2b01      	cmp	r3, #1
 800cc12:	d102      	bne.n	800cc1a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800cc14:	687a      	ldr	r2, [r7, #4]
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cc1a:	7afb      	ldrb	r3, [r7, #11]
 800cc1c:	f003 030f 	and.w	r3, r3, #15
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d109      	bne.n	800cc38 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	6818      	ldr	r0, [r3, #0]
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	691b      	ldr	r3, [r3, #16]
 800cc2c:	b2db      	uxtb	r3, r3
 800cc2e:	461a      	mov	r2, r3
 800cc30:	6979      	ldr	r1, [r7, #20]
 800cc32:	f003 fae5 	bl	8010200 <USB_EP0StartXfer>
 800cc36:	e008      	b.n	800cc4a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	6818      	ldr	r0, [r3, #0]
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	691b      	ldr	r3, [r3, #16]
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	461a      	mov	r2, r3
 800cc44:	6979      	ldr	r1, [r7, #20]
 800cc46:	f003 f897 	bl	800fd78 <USB_EPStartXfer>
  }

  return HAL_OK;
 800cc4a:	2300      	movs	r3, #0
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3718      	adds	r7, #24
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cc54:	b480      	push	{r7}
 800cc56:	b083      	sub	sp, #12
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	460b      	mov	r3, r1
 800cc5e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800cc60:	78fb      	ldrb	r3, [r7, #3]
 800cc62:	f003 020f 	and.w	r2, r3, #15
 800cc66:	6879      	ldr	r1, [r7, #4]
 800cc68:	4613      	mov	r3, r2
 800cc6a:	00db      	lsls	r3, r3, #3
 800cc6c:	1a9b      	subs	r3, r3, r2
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	440b      	add	r3, r1
 800cc72:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800cc76:	681b      	ldr	r3, [r3, #0]
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	370c      	adds	r7, #12
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc82:	4770      	bx	lr

0800cc84 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b086      	sub	sp, #24
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	60f8      	str	r0, [r7, #12]
 800cc8c:	607a      	str	r2, [r7, #4]
 800cc8e:	603b      	str	r3, [r7, #0]
 800cc90:	460b      	mov	r3, r1
 800cc92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cc94:	7afb      	ldrb	r3, [r7, #11]
 800cc96:	f003 020f 	and.w	r2, r3, #15
 800cc9a:	4613      	mov	r3, r2
 800cc9c:	00db      	lsls	r3, r3, #3
 800cc9e:	1a9b      	subs	r3, r3, r2
 800cca0:	009b      	lsls	r3, r3, #2
 800cca2:	3338      	adds	r3, #56	; 0x38
 800cca4:	68fa      	ldr	r2, [r7, #12]
 800cca6:	4413      	add	r3, r2
 800cca8:	3304      	adds	r3, #4
 800ccaa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	687a      	ldr	r2, [r7, #4]
 800ccb0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	683a      	ldr	r2, [r7, #0]
 800ccb6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	2201      	movs	r2, #1
 800ccc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ccc4:	7afb      	ldrb	r3, [r7, #11]
 800ccc6:	f003 030f 	and.w	r3, r3, #15
 800ccca:	b2da      	uxtb	r2, r3
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	691b      	ldr	r3, [r3, #16]
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	d102      	bne.n	800ccde <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ccd8:	687a      	ldr	r2, [r7, #4]
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ccde:	7afb      	ldrb	r3, [r7, #11]
 800cce0:	f003 030f 	and.w	r3, r3, #15
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d109      	bne.n	800ccfc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	6818      	ldr	r0, [r3, #0]
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	691b      	ldr	r3, [r3, #16]
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	461a      	mov	r2, r3
 800ccf4:	6979      	ldr	r1, [r7, #20]
 800ccf6:	f003 fa83 	bl	8010200 <USB_EP0StartXfer>
 800ccfa:	e008      	b.n	800cd0e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	6818      	ldr	r0, [r3, #0]
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	691b      	ldr	r3, [r3, #16]
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	461a      	mov	r2, r3
 800cd08:	6979      	ldr	r1, [r7, #20]
 800cd0a:	f003 f835 	bl	800fd78 <USB_EPStartXfer>
  }

  return HAL_OK;
 800cd0e:	2300      	movs	r3, #0
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3718      	adds	r7, #24
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}

0800cd18 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b084      	sub	sp, #16
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	460b      	mov	r3, r1
 800cd22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800cd24:	78fb      	ldrb	r3, [r7, #3]
 800cd26:	f003 020f 	and.w	r2, r3, #15
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	d901      	bls.n	800cd36 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800cd32:	2301      	movs	r3, #1
 800cd34:	e050      	b.n	800cdd8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cd36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	da0f      	bge.n	800cd5e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cd3e:	78fb      	ldrb	r3, [r7, #3]
 800cd40:	f003 020f 	and.w	r2, r3, #15
 800cd44:	4613      	mov	r3, r2
 800cd46:	00db      	lsls	r3, r3, #3
 800cd48:	1a9b      	subs	r3, r3, r2
 800cd4a:	009b      	lsls	r3, r3, #2
 800cd4c:	3338      	adds	r3, #56	; 0x38
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	4413      	add	r3, r2
 800cd52:	3304      	adds	r3, #4
 800cd54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	2201      	movs	r2, #1
 800cd5a:	705a      	strb	r2, [r3, #1]
 800cd5c:	e00d      	b.n	800cd7a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800cd5e:	78fa      	ldrb	r2, [r7, #3]
 800cd60:	4613      	mov	r3, r2
 800cd62:	00db      	lsls	r3, r3, #3
 800cd64:	1a9b      	subs	r3, r3, r2
 800cd66:	009b      	lsls	r3, r3, #2
 800cd68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cd6c:	687a      	ldr	r2, [r7, #4]
 800cd6e:	4413      	add	r3, r2
 800cd70:	3304      	adds	r3, #4
 800cd72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	2200      	movs	r2, #0
 800cd78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	2201      	movs	r2, #1
 800cd7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cd80:	78fb      	ldrb	r3, [r7, #3]
 800cd82:	f003 030f 	and.w	r3, r3, #15
 800cd86:	b2da      	uxtb	r2, r3
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cd92:	2b01      	cmp	r3, #1
 800cd94:	d101      	bne.n	800cd9a <HAL_PCD_EP_SetStall+0x82>
 800cd96:	2302      	movs	r3, #2
 800cd98:	e01e      	b.n	800cdd8 <HAL_PCD_EP_SetStall+0xc0>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	68f9      	ldr	r1, [r7, #12]
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f003 fbda 	bl	8010562 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cdae:	78fb      	ldrb	r3, [r7, #3]
 800cdb0:	f003 030f 	and.w	r3, r3, #15
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d10a      	bne.n	800cdce <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6818      	ldr	r0, [r3, #0]
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	691b      	ldr	r3, [r3, #16]
 800cdc0:	b2d9      	uxtb	r1, r3
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cdc8:	461a      	mov	r2, r3
 800cdca:	f003 fdcb 	bl	8010964 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cdd6:	2300      	movs	r3, #0
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3710      	adds	r7, #16
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b084      	sub	sp, #16
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	460b      	mov	r3, r1
 800cdea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800cdec:	78fb      	ldrb	r3, [r7, #3]
 800cdee:	f003 020f 	and.w	r2, r3, #15
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	685b      	ldr	r3, [r3, #4]
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d901      	bls.n	800cdfe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	e042      	b.n	800ce84 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cdfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	da0f      	bge.n	800ce26 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ce06:	78fb      	ldrb	r3, [r7, #3]
 800ce08:	f003 020f 	and.w	r2, r3, #15
 800ce0c:	4613      	mov	r3, r2
 800ce0e:	00db      	lsls	r3, r3, #3
 800ce10:	1a9b      	subs	r3, r3, r2
 800ce12:	009b      	lsls	r3, r3, #2
 800ce14:	3338      	adds	r3, #56	; 0x38
 800ce16:	687a      	ldr	r2, [r7, #4]
 800ce18:	4413      	add	r3, r2
 800ce1a:	3304      	adds	r3, #4
 800ce1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	2201      	movs	r2, #1
 800ce22:	705a      	strb	r2, [r3, #1]
 800ce24:	e00f      	b.n	800ce46 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ce26:	78fb      	ldrb	r3, [r7, #3]
 800ce28:	f003 020f 	and.w	r2, r3, #15
 800ce2c:	4613      	mov	r3, r2
 800ce2e:	00db      	lsls	r3, r3, #3
 800ce30:	1a9b      	subs	r3, r3, r2
 800ce32:	009b      	lsls	r3, r3, #2
 800ce34:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ce38:	687a      	ldr	r2, [r7, #4]
 800ce3a:	4413      	add	r3, r2
 800ce3c:	3304      	adds	r3, #4
 800ce3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2200      	movs	r2, #0
 800ce44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ce4c:	78fb      	ldrb	r3, [r7, #3]
 800ce4e:	f003 030f 	and.w	r3, r3, #15
 800ce52:	b2da      	uxtb	r2, r3
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ce5e:	2b01      	cmp	r3, #1
 800ce60:	d101      	bne.n	800ce66 <HAL_PCD_EP_ClrStall+0x86>
 800ce62:	2302      	movs	r3, #2
 800ce64:	e00e      	b.n	800ce84 <HAL_PCD_EP_ClrStall+0xa4>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2201      	movs	r2, #1
 800ce6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	68f9      	ldr	r1, [r7, #12]
 800ce74:	4618      	mov	r0, r3
 800ce76:	f003 fbe2 	bl	801063e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ce82:	2300      	movs	r3, #0
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3710      	adds	r7, #16
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}

0800ce8c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b08a      	sub	sp, #40	; 0x28
 800ce90:	af02      	add	r7, sp, #8
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800cea0:	683a      	ldr	r2, [r7, #0]
 800cea2:	4613      	mov	r3, r2
 800cea4:	00db      	lsls	r3, r3, #3
 800cea6:	1a9b      	subs	r3, r3, r2
 800cea8:	009b      	lsls	r3, r3, #2
 800ceaa:	3338      	adds	r3, #56	; 0x38
 800ceac:	687a      	ldr	r2, [r7, #4]
 800ceae:	4413      	add	r3, r2
 800ceb0:	3304      	adds	r3, #4
 800ceb2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	699a      	ldr	r2, [r3, #24]
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	695b      	ldr	r3, [r3, #20]
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d901      	bls.n	800cec4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800cec0:	2301      	movs	r3, #1
 800cec2:	e06c      	b.n	800cf9e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	695a      	ldr	r2, [r3, #20]
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	699b      	ldr	r3, [r3, #24]
 800cecc:	1ad3      	subs	r3, r2, r3
 800cece:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	689b      	ldr	r3, [r3, #8]
 800ced4:	69fa      	ldr	r2, [r7, #28]
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d902      	bls.n	800cee0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	689b      	ldr	r3, [r3, #8]
 800cede:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800cee0:	69fb      	ldr	r3, [r7, #28]
 800cee2:	3303      	adds	r3, #3
 800cee4:	089b      	lsrs	r3, r3, #2
 800cee6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cee8:	e02b      	b.n	800cf42 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	695a      	ldr	r2, [r3, #20]
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	699b      	ldr	r3, [r3, #24]
 800cef2:	1ad3      	subs	r3, r2, r3
 800cef4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	689b      	ldr	r3, [r3, #8]
 800cefa:	69fa      	ldr	r2, [r7, #28]
 800cefc:	429a      	cmp	r2, r3
 800cefe:	d902      	bls.n	800cf06 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	689b      	ldr	r3, [r3, #8]
 800cf04:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800cf06:	69fb      	ldr	r3, [r7, #28]
 800cf08:	3303      	adds	r3, #3
 800cf0a:	089b      	lsrs	r3, r3, #2
 800cf0c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	68d9      	ldr	r1, [r3, #12]
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	b2da      	uxtb	r2, r3
 800cf16:	69fb      	ldr	r3, [r7, #28]
 800cf18:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cf1e:	b2db      	uxtb	r3, r3
 800cf20:	9300      	str	r3, [sp, #0]
 800cf22:	4603      	mov	r3, r0
 800cf24:	6978      	ldr	r0, [r7, #20]
 800cf26:	f003 fabe 	bl	80104a6 <USB_WritePacket>

    ep->xfer_buff  += len;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	68da      	ldr	r2, [r3, #12]
 800cf2e:	69fb      	ldr	r3, [r7, #28]
 800cf30:	441a      	add	r2, r3
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	699a      	ldr	r2, [r3, #24]
 800cf3a:	69fb      	ldr	r3, [r7, #28]
 800cf3c:	441a      	add	r2, r3
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	015a      	lsls	r2, r3, #5
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	4413      	add	r3, r2
 800cf4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf4e:	699b      	ldr	r3, [r3, #24]
 800cf50:	b29b      	uxth	r3, r3
 800cf52:	69ba      	ldr	r2, [r7, #24]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d809      	bhi.n	800cf6c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	699a      	ldr	r2, [r3, #24]
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d203      	bcs.n	800cf6c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	695b      	ldr	r3, [r3, #20]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d1be      	bne.n	800ceea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	695a      	ldr	r2, [r3, #20]
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	699b      	ldr	r3, [r3, #24]
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d811      	bhi.n	800cf9c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	f003 030f 	and.w	r3, r3, #15
 800cf7e:	2201      	movs	r2, #1
 800cf80:	fa02 f303 	lsl.w	r3, r2, r3
 800cf84:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	43db      	mvns	r3, r3
 800cf92:	6939      	ldr	r1, [r7, #16]
 800cf94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf98:	4013      	ands	r3, r2
 800cf9a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800cf9c:	2300      	movs	r3, #0
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3720      	adds	r7, #32
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
	...

0800cfa8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b086      	sub	sp, #24
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
 800cfb0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	333c      	adds	r3, #60	; 0x3c
 800cfc0:	3304      	adds	r3, #4
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	015a      	lsls	r2, r3, #5
 800cfca:	693b      	ldr	r3, [r7, #16]
 800cfcc:	4413      	add	r3, r2
 800cfce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfd2:	689b      	ldr	r3, [r3, #8]
 800cfd4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	691b      	ldr	r3, [r3, #16]
 800cfda:	2b01      	cmp	r3, #1
 800cfdc:	f040 80a0 	bne.w	800d120 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	f003 0308 	and.w	r3, r3, #8
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d015      	beq.n	800d016 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	4a72      	ldr	r2, [pc, #456]	; (800d1b8 <PCD_EP_OutXfrComplete_int+0x210>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	f240 80dd 	bls.w	800d1ae <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	f000 80d7 	beq.w	800d1ae <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	015a      	lsls	r2, r3, #5
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	4413      	add	r3, r2
 800d008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d00c:	461a      	mov	r2, r3
 800d00e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d012:	6093      	str	r3, [r2, #8]
 800d014:	e0cb      	b.n	800d1ae <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	f003 0320 	and.w	r3, r3, #32
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d009      	beq.n	800d034 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	015a      	lsls	r2, r3, #5
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	4413      	add	r3, r2
 800d028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d02c:	461a      	mov	r2, r3
 800d02e:	2320      	movs	r3, #32
 800d030:	6093      	str	r3, [r2, #8]
 800d032:	e0bc      	b.n	800d1ae <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	f040 80b7 	bne.w	800d1ae <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	4a5d      	ldr	r2, [pc, #372]	; (800d1b8 <PCD_EP_OutXfrComplete_int+0x210>)
 800d044:	4293      	cmp	r3, r2
 800d046:	d90f      	bls.n	800d068 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d00a      	beq.n	800d068 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	015a      	lsls	r2, r3, #5
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	4413      	add	r3, r2
 800d05a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d05e:	461a      	mov	r2, r3
 800d060:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d064:	6093      	str	r3, [r2, #8]
 800d066:	e0a2      	b.n	800d1ae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800d068:	6879      	ldr	r1, [r7, #4]
 800d06a:	683a      	ldr	r2, [r7, #0]
 800d06c:	4613      	mov	r3, r2
 800d06e:	00db      	lsls	r3, r3, #3
 800d070:	1a9b      	subs	r3, r3, r2
 800d072:	009b      	lsls	r3, r3, #2
 800d074:	440b      	add	r3, r1
 800d076:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d07a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	0159      	lsls	r1, r3, #5
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	440b      	add	r3, r1
 800d084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d088:	691b      	ldr	r3, [r3, #16]
 800d08a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800d08e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	683a      	ldr	r2, [r7, #0]
 800d094:	4613      	mov	r3, r2
 800d096:	00db      	lsls	r3, r3, #3
 800d098:	1a9b      	subs	r3, r3, r2
 800d09a:	009b      	lsls	r3, r3, #2
 800d09c:	4403      	add	r3, r0
 800d09e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d0a2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800d0a4:	6879      	ldr	r1, [r7, #4]
 800d0a6:	683a      	ldr	r2, [r7, #0]
 800d0a8:	4613      	mov	r3, r2
 800d0aa:	00db      	lsls	r3, r3, #3
 800d0ac:	1a9b      	subs	r3, r3, r2
 800d0ae:	009b      	lsls	r3, r3, #2
 800d0b0:	440b      	add	r3, r1
 800d0b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d0b6:	6819      	ldr	r1, [r3, #0]
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	683a      	ldr	r2, [r7, #0]
 800d0bc:	4613      	mov	r3, r2
 800d0be:	00db      	lsls	r3, r3, #3
 800d0c0:	1a9b      	subs	r3, r3, r2
 800d0c2:	009b      	lsls	r3, r3, #2
 800d0c4:	4403      	add	r3, r0
 800d0c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4419      	add	r1, r3
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	683a      	ldr	r2, [r7, #0]
 800d0d2:	4613      	mov	r3, r2
 800d0d4:	00db      	lsls	r3, r3, #3
 800d0d6:	1a9b      	subs	r3, r3, r2
 800d0d8:	009b      	lsls	r3, r3, #2
 800d0da:	4403      	add	r3, r0
 800d0dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d0e0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d114      	bne.n	800d112 <PCD_EP_OutXfrComplete_int+0x16a>
 800d0e8:	6879      	ldr	r1, [r7, #4]
 800d0ea:	683a      	ldr	r2, [r7, #0]
 800d0ec:	4613      	mov	r3, r2
 800d0ee:	00db      	lsls	r3, r3, #3
 800d0f0:	1a9b      	subs	r3, r3, r2
 800d0f2:	009b      	lsls	r3, r3, #2
 800d0f4:	440b      	add	r3, r1
 800d0f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d108      	bne.n	800d112 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6818      	ldr	r0, [r3, #0]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d10a:	461a      	mov	r2, r3
 800d10c:	2101      	movs	r1, #1
 800d10e:	f003 fc29 	bl	8010964 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	b2db      	uxtb	r3, r3
 800d116:	4619      	mov	r1, r3
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f008 f9cf 	bl	80154bc <HAL_PCD_DataOutStageCallback>
 800d11e:	e046      	b.n	800d1ae <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	4a26      	ldr	r2, [pc, #152]	; (800d1bc <PCD_EP_OutXfrComplete_int+0x214>)
 800d124:	4293      	cmp	r3, r2
 800d126:	d124      	bne.n	800d172 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d00a      	beq.n	800d148 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	015a      	lsls	r2, r3, #5
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	4413      	add	r3, r2
 800d13a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d13e:	461a      	mov	r2, r3
 800d140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d144:	6093      	str	r3, [r2, #8]
 800d146:	e032      	b.n	800d1ae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	f003 0320 	and.w	r3, r3, #32
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d008      	beq.n	800d164 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	015a      	lsls	r2, r3, #5
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	4413      	add	r3, r2
 800d15a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d15e:	461a      	mov	r2, r3
 800d160:	2320      	movs	r3, #32
 800d162:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	b2db      	uxtb	r3, r3
 800d168:	4619      	mov	r1, r3
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f008 f9a6 	bl	80154bc <HAL_PCD_DataOutStageCallback>
 800d170:	e01d      	b.n	800d1ae <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d114      	bne.n	800d1a2 <PCD_EP_OutXfrComplete_int+0x1fa>
 800d178:	6879      	ldr	r1, [r7, #4]
 800d17a:	683a      	ldr	r2, [r7, #0]
 800d17c:	4613      	mov	r3, r2
 800d17e:	00db      	lsls	r3, r3, #3
 800d180:	1a9b      	subs	r3, r3, r2
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	440b      	add	r3, r1
 800d186:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d108      	bne.n	800d1a2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6818      	ldr	r0, [r3, #0]
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d19a:	461a      	mov	r2, r3
 800d19c:	2100      	movs	r1, #0
 800d19e:	f003 fbe1 	bl	8010964 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	4619      	mov	r1, r3
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f008 f987 	bl	80154bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d1ae:	2300      	movs	r3, #0
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3718      	adds	r7, #24
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}
 800d1b8:	4f54300a 	.word	0x4f54300a
 800d1bc:	4f54310a 	.word	0x4f54310a

0800d1c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b086      	sub	sp, #24
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	333c      	adds	r3, #60	; 0x3c
 800d1d8:	3304      	adds	r3, #4
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	015a      	lsls	r2, r3, #5
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	4413      	add	r3, r2
 800d1e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1ea:	689b      	ldr	r3, [r3, #8]
 800d1ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	4a15      	ldr	r2, [pc, #84]	; (800d248 <PCD_EP_OutSetupPacket_int+0x88>)
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d90e      	bls.n	800d214 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d009      	beq.n	800d214 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	015a      	lsls	r2, r3, #5
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	4413      	add	r3, r2
 800d208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d20c:	461a      	mov	r2, r3
 800d20e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d212:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f008 f93f 	bl	8015498 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	4a0a      	ldr	r2, [pc, #40]	; (800d248 <PCD_EP_OutSetupPacket_int+0x88>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d90c      	bls.n	800d23c <PCD_EP_OutSetupPacket_int+0x7c>
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	691b      	ldr	r3, [r3, #16]
 800d226:	2b01      	cmp	r3, #1
 800d228:	d108      	bne.n	800d23c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6818      	ldr	r0, [r3, #0]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d234:	461a      	mov	r2, r3
 800d236:	2101      	movs	r1, #1
 800d238:	f003 fb94 	bl	8010964 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d23c:	2300      	movs	r3, #0
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3718      	adds	r7, #24
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
 800d246:	bf00      	nop
 800d248:	4f54300a 	.word	0x4f54300a

0800d24c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b085      	sub	sp, #20
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
 800d254:	460b      	mov	r3, r1
 800d256:	70fb      	strb	r3, [r7, #3]
 800d258:	4613      	mov	r3, r2
 800d25a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d262:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d264:	78fb      	ldrb	r3, [r7, #3]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d107      	bne.n	800d27a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d26a:	883b      	ldrh	r3, [r7, #0]
 800d26c:	0419      	lsls	r1, r3, #16
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	68ba      	ldr	r2, [r7, #8]
 800d274:	430a      	orrs	r2, r1
 800d276:	629a      	str	r2, [r3, #40]	; 0x28
 800d278:	e028      	b.n	800d2cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d280:	0c1b      	lsrs	r3, r3, #16
 800d282:	68ba      	ldr	r2, [r7, #8]
 800d284:	4413      	add	r3, r2
 800d286:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d288:	2300      	movs	r3, #0
 800d28a:	73fb      	strb	r3, [r7, #15]
 800d28c:	e00d      	b.n	800d2aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681a      	ldr	r2, [r3, #0]
 800d292:	7bfb      	ldrb	r3, [r7, #15]
 800d294:	3340      	adds	r3, #64	; 0x40
 800d296:	009b      	lsls	r3, r3, #2
 800d298:	4413      	add	r3, r2
 800d29a:	685b      	ldr	r3, [r3, #4]
 800d29c:	0c1b      	lsrs	r3, r3, #16
 800d29e:	68ba      	ldr	r2, [r7, #8]
 800d2a0:	4413      	add	r3, r2
 800d2a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d2a4:	7bfb      	ldrb	r3, [r7, #15]
 800d2a6:	3301      	adds	r3, #1
 800d2a8:	73fb      	strb	r3, [r7, #15]
 800d2aa:	7bfa      	ldrb	r2, [r7, #15]
 800d2ac:	78fb      	ldrb	r3, [r7, #3]
 800d2ae:	3b01      	subs	r3, #1
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d3ec      	bcc.n	800d28e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d2b4:	883b      	ldrh	r3, [r7, #0]
 800d2b6:	0418      	lsls	r0, r3, #16
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6819      	ldr	r1, [r3, #0]
 800d2bc:	78fb      	ldrb	r3, [r7, #3]
 800d2be:	3b01      	subs	r3, #1
 800d2c0:	68ba      	ldr	r2, [r7, #8]
 800d2c2:	4302      	orrs	r2, r0
 800d2c4:	3340      	adds	r3, #64	; 0x40
 800d2c6:	009b      	lsls	r3, r3, #2
 800d2c8:	440b      	add	r3, r1
 800d2ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d2cc:	2300      	movs	r3, #0
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	3714      	adds	r7, #20
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d8:	4770      	bx	lr

0800d2da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d2da:	b480      	push	{r7}
 800d2dc:	b083      	sub	sp, #12
 800d2de:	af00      	add	r7, sp, #0
 800d2e0:	6078      	str	r0, [r7, #4]
 800d2e2:	460b      	mov	r3, r1
 800d2e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	887a      	ldrh	r2, [r7, #2]
 800d2ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800d2ee:	2300      	movs	r3, #0
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	370c      	adds	r7, #12
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr

0800d2fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b083      	sub	sp, #12
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	460b      	mov	r3, r1
 800d306:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d308:	bf00      	nop
 800d30a:	370c      	adds	r7, #12
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr

0800d314 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b086      	sub	sp, #24
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d101      	bne.n	800d326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d322:	2301      	movs	r3, #1
 800d324:	e25b      	b.n	800d7de <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f003 0301 	and.w	r3, r3, #1
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d075      	beq.n	800d41e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d332:	4ba3      	ldr	r3, [pc, #652]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d334:	689b      	ldr	r3, [r3, #8]
 800d336:	f003 030c 	and.w	r3, r3, #12
 800d33a:	2b04      	cmp	r3, #4
 800d33c:	d00c      	beq.n	800d358 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d33e:	4ba0      	ldr	r3, [pc, #640]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d340:	689b      	ldr	r3, [r3, #8]
 800d342:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d346:	2b08      	cmp	r3, #8
 800d348:	d112      	bne.n	800d370 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d34a:	4b9d      	ldr	r3, [pc, #628]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d34c:	685b      	ldr	r3, [r3, #4]
 800d34e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d352:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d356:	d10b      	bne.n	800d370 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d358:	4b99      	ldr	r3, [pc, #612]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d360:	2b00      	cmp	r3, #0
 800d362:	d05b      	beq.n	800d41c <HAL_RCC_OscConfig+0x108>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	685b      	ldr	r3, [r3, #4]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d157      	bne.n	800d41c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d36c:	2301      	movs	r3, #1
 800d36e:	e236      	b.n	800d7de <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	685b      	ldr	r3, [r3, #4]
 800d374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d378:	d106      	bne.n	800d388 <HAL_RCC_OscConfig+0x74>
 800d37a:	4b91      	ldr	r3, [pc, #580]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4a90      	ldr	r2, [pc, #576]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d384:	6013      	str	r3, [r2, #0]
 800d386:	e01d      	b.n	800d3c4 <HAL_RCC_OscConfig+0xb0>
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	685b      	ldr	r3, [r3, #4]
 800d38c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d390:	d10c      	bne.n	800d3ac <HAL_RCC_OscConfig+0x98>
 800d392:	4b8b      	ldr	r3, [pc, #556]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	4a8a      	ldr	r2, [pc, #552]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d39c:	6013      	str	r3, [r2, #0]
 800d39e:	4b88      	ldr	r3, [pc, #544]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	4a87      	ldr	r2, [pc, #540]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d3a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d3a8:	6013      	str	r3, [r2, #0]
 800d3aa:	e00b      	b.n	800d3c4 <HAL_RCC_OscConfig+0xb0>
 800d3ac:	4b84      	ldr	r3, [pc, #528]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	4a83      	ldr	r2, [pc, #524]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d3b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d3b6:	6013      	str	r3, [r2, #0]
 800d3b8:	4b81      	ldr	r3, [pc, #516]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	4a80      	ldr	r2, [pc, #512]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d3be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d3c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d013      	beq.n	800d3f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d3cc:	f7fd ff66 	bl	800b29c <HAL_GetTick>
 800d3d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d3d2:	e008      	b.n	800d3e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d3d4:	f7fd ff62 	bl	800b29c <HAL_GetTick>
 800d3d8:	4602      	mov	r2, r0
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	1ad3      	subs	r3, r2, r3
 800d3de:	2b64      	cmp	r3, #100	; 0x64
 800d3e0:	d901      	bls.n	800d3e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d3e2:	2303      	movs	r3, #3
 800d3e4:	e1fb      	b.n	800d7de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d3e6:	4b76      	ldr	r3, [pc, #472]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d0f0      	beq.n	800d3d4 <HAL_RCC_OscConfig+0xc0>
 800d3f2:	e014      	b.n	800d41e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d3f4:	f7fd ff52 	bl	800b29c <HAL_GetTick>
 800d3f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d3fa:	e008      	b.n	800d40e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d3fc:	f7fd ff4e 	bl	800b29c <HAL_GetTick>
 800d400:	4602      	mov	r2, r0
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	1ad3      	subs	r3, r2, r3
 800d406:	2b64      	cmp	r3, #100	; 0x64
 800d408:	d901      	bls.n	800d40e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d40a:	2303      	movs	r3, #3
 800d40c:	e1e7      	b.n	800d7de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d40e:	4b6c      	ldr	r3, [pc, #432]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d416:	2b00      	cmp	r3, #0
 800d418:	d1f0      	bne.n	800d3fc <HAL_RCC_OscConfig+0xe8>
 800d41a:	e000      	b.n	800d41e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d41c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f003 0302 	and.w	r3, r3, #2
 800d426:	2b00      	cmp	r3, #0
 800d428:	d063      	beq.n	800d4f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d42a:	4b65      	ldr	r3, [pc, #404]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d42c:	689b      	ldr	r3, [r3, #8]
 800d42e:	f003 030c 	and.w	r3, r3, #12
 800d432:	2b00      	cmp	r3, #0
 800d434:	d00b      	beq.n	800d44e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d436:	4b62      	ldr	r3, [pc, #392]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d438:	689b      	ldr	r3, [r3, #8]
 800d43a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d43e:	2b08      	cmp	r3, #8
 800d440:	d11c      	bne.n	800d47c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d442:	4b5f      	ldr	r3, [pc, #380]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d444:	685b      	ldr	r3, [r3, #4]
 800d446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d116      	bne.n	800d47c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d44e:	4b5c      	ldr	r3, [pc, #368]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f003 0302 	and.w	r3, r3, #2
 800d456:	2b00      	cmp	r3, #0
 800d458:	d005      	beq.n	800d466 <HAL_RCC_OscConfig+0x152>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	68db      	ldr	r3, [r3, #12]
 800d45e:	2b01      	cmp	r3, #1
 800d460:	d001      	beq.n	800d466 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d462:	2301      	movs	r3, #1
 800d464:	e1bb      	b.n	800d7de <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d466:	4b56      	ldr	r3, [pc, #344]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	691b      	ldr	r3, [r3, #16]
 800d472:	00db      	lsls	r3, r3, #3
 800d474:	4952      	ldr	r1, [pc, #328]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d476:	4313      	orrs	r3, r2
 800d478:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d47a:	e03a      	b.n	800d4f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	68db      	ldr	r3, [r3, #12]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d020      	beq.n	800d4c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d484:	4b4f      	ldr	r3, [pc, #316]	; (800d5c4 <HAL_RCC_OscConfig+0x2b0>)
 800d486:	2201      	movs	r2, #1
 800d488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d48a:	f7fd ff07 	bl	800b29c <HAL_GetTick>
 800d48e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d490:	e008      	b.n	800d4a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d492:	f7fd ff03 	bl	800b29c <HAL_GetTick>
 800d496:	4602      	mov	r2, r0
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	1ad3      	subs	r3, r2, r3
 800d49c:	2b02      	cmp	r3, #2
 800d49e:	d901      	bls.n	800d4a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d4a0:	2303      	movs	r3, #3
 800d4a2:	e19c      	b.n	800d7de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d4a4:	4b46      	ldr	r3, [pc, #280]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f003 0302 	and.w	r3, r3, #2
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d0f0      	beq.n	800d492 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d4b0:	4b43      	ldr	r3, [pc, #268]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	691b      	ldr	r3, [r3, #16]
 800d4bc:	00db      	lsls	r3, r3, #3
 800d4be:	4940      	ldr	r1, [pc, #256]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d4c0:	4313      	orrs	r3, r2
 800d4c2:	600b      	str	r3, [r1, #0]
 800d4c4:	e015      	b.n	800d4f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d4c6:	4b3f      	ldr	r3, [pc, #252]	; (800d5c4 <HAL_RCC_OscConfig+0x2b0>)
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4cc:	f7fd fee6 	bl	800b29c <HAL_GetTick>
 800d4d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d4d2:	e008      	b.n	800d4e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d4d4:	f7fd fee2 	bl	800b29c <HAL_GetTick>
 800d4d8:	4602      	mov	r2, r0
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	1ad3      	subs	r3, r2, r3
 800d4de:	2b02      	cmp	r3, #2
 800d4e0:	d901      	bls.n	800d4e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d4e2:	2303      	movs	r3, #3
 800d4e4:	e17b      	b.n	800d7de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d4e6:	4b36      	ldr	r3, [pc, #216]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f003 0302 	and.w	r3, r3, #2
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d1f0      	bne.n	800d4d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	f003 0308 	and.w	r3, r3, #8
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d030      	beq.n	800d560 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	695b      	ldr	r3, [r3, #20]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d016      	beq.n	800d534 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d506:	4b30      	ldr	r3, [pc, #192]	; (800d5c8 <HAL_RCC_OscConfig+0x2b4>)
 800d508:	2201      	movs	r2, #1
 800d50a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d50c:	f7fd fec6 	bl	800b29c <HAL_GetTick>
 800d510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d512:	e008      	b.n	800d526 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d514:	f7fd fec2 	bl	800b29c <HAL_GetTick>
 800d518:	4602      	mov	r2, r0
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	1ad3      	subs	r3, r2, r3
 800d51e:	2b02      	cmp	r3, #2
 800d520:	d901      	bls.n	800d526 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d522:	2303      	movs	r3, #3
 800d524:	e15b      	b.n	800d7de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d526:	4b26      	ldr	r3, [pc, #152]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d52a:	f003 0302 	and.w	r3, r3, #2
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d0f0      	beq.n	800d514 <HAL_RCC_OscConfig+0x200>
 800d532:	e015      	b.n	800d560 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d534:	4b24      	ldr	r3, [pc, #144]	; (800d5c8 <HAL_RCC_OscConfig+0x2b4>)
 800d536:	2200      	movs	r2, #0
 800d538:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d53a:	f7fd feaf 	bl	800b29c <HAL_GetTick>
 800d53e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d540:	e008      	b.n	800d554 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d542:	f7fd feab 	bl	800b29c <HAL_GetTick>
 800d546:	4602      	mov	r2, r0
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	1ad3      	subs	r3, r2, r3
 800d54c:	2b02      	cmp	r3, #2
 800d54e:	d901      	bls.n	800d554 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d550:	2303      	movs	r3, #3
 800d552:	e144      	b.n	800d7de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d554:	4b1a      	ldr	r3, [pc, #104]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d558:	f003 0302 	and.w	r3, r3, #2
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d1f0      	bne.n	800d542 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f003 0304 	and.w	r3, r3, #4
 800d568:	2b00      	cmp	r3, #0
 800d56a:	f000 80a0 	beq.w	800d6ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d56e:	2300      	movs	r3, #0
 800d570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d572:	4b13      	ldr	r3, [pc, #76]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d10f      	bne.n	800d59e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d57e:	2300      	movs	r3, #0
 800d580:	60bb      	str	r3, [r7, #8]
 800d582:	4b0f      	ldr	r3, [pc, #60]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d586:	4a0e      	ldr	r2, [pc, #56]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d58c:	6413      	str	r3, [r2, #64]	; 0x40
 800d58e:	4b0c      	ldr	r3, [pc, #48]	; (800d5c0 <HAL_RCC_OscConfig+0x2ac>)
 800d590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d596:	60bb      	str	r3, [r7, #8]
 800d598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d59a:	2301      	movs	r3, #1
 800d59c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d59e:	4b0b      	ldr	r3, [pc, #44]	; (800d5cc <HAL_RCC_OscConfig+0x2b8>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d121      	bne.n	800d5ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d5aa:	4b08      	ldr	r3, [pc, #32]	; (800d5cc <HAL_RCC_OscConfig+0x2b8>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	4a07      	ldr	r2, [pc, #28]	; (800d5cc <HAL_RCC_OscConfig+0x2b8>)
 800d5b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d5b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d5b6:	f7fd fe71 	bl	800b29c <HAL_GetTick>
 800d5ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d5bc:	e011      	b.n	800d5e2 <HAL_RCC_OscConfig+0x2ce>
 800d5be:	bf00      	nop
 800d5c0:	40023800 	.word	0x40023800
 800d5c4:	42470000 	.word	0x42470000
 800d5c8:	42470e80 	.word	0x42470e80
 800d5cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d5d0:	f7fd fe64 	bl	800b29c <HAL_GetTick>
 800d5d4:	4602      	mov	r2, r0
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	1ad3      	subs	r3, r2, r3
 800d5da:	2b02      	cmp	r3, #2
 800d5dc:	d901      	bls.n	800d5e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800d5de:	2303      	movs	r3, #3
 800d5e0:	e0fd      	b.n	800d7de <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d5e2:	4b81      	ldr	r3, [pc, #516]	; (800d7e8 <HAL_RCC_OscConfig+0x4d4>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d0f0      	beq.n	800d5d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	689b      	ldr	r3, [r3, #8]
 800d5f2:	2b01      	cmp	r3, #1
 800d5f4:	d106      	bne.n	800d604 <HAL_RCC_OscConfig+0x2f0>
 800d5f6:	4b7d      	ldr	r3, [pc, #500]	; (800d7ec <HAL_RCC_OscConfig+0x4d8>)
 800d5f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5fa:	4a7c      	ldr	r2, [pc, #496]	; (800d7ec <HAL_RCC_OscConfig+0x4d8>)
 800d5fc:	f043 0301 	orr.w	r3, r3, #1
 800d600:	6713      	str	r3, [r2, #112]	; 0x70
 800d602:	e01c      	b.n	800d63e <HAL_RCC_OscConfig+0x32a>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	689b      	ldr	r3, [r3, #8]
 800d608:	2b05      	cmp	r3, #5
 800d60a:	d10c      	bne.n	800d626 <HAL_RCC_OscConfig+0x312>
 800d60c:	4b77      	ldr	r3, [pc, #476]	; (800d7ec <HAL_RCC_OscConfig+0x4d8>)
 800d60e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d610:	4a76      	ldr	r2, [pc, #472]	; (800d7ec <HAL_RCC_OscConfig+0x4d8>)
 800d612:	f043 0304 	orr.w	r3, r3, #4
 800d616:	6713      	str	r3, [r2, #112]	; 0x70
 800d618:	4b74      	ldr	r3, [pc, #464]	; (800d7ec <HAL_RCC_OscConfig+0x4d8>)
 800d61a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d61c:	4a73      	ldr	r2, [pc, #460]	; (800d7ec <HAL_RCC_OscConfig+0x4d8>)
 800d61e:	f043 0301 	orr.w	r3, r3, #1
 800d622:	6713      	str	r3, [r2, #112]	; 0x70
 800d624:	e00b      	b.n	800d63e <HAL_RCC_OscConfig+0x32a>
 800d626:	4b71      	ldr	r3, [pc, #452]	; (800d7ec <HAL_RCC_OscConfig+0x4d8>)
 800d628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d62a:	4a70      	ldr	r2, [pc, #448]	; (800d7ec <HAL_RCC_OscConfig+0x4d8>)
 800d62c:	f023 0301 	bic.w	r3, r3, #1
 800d630:	6713      	str	r3, [r2, #112]	; 0x70
 800d632:	4b6e      	ldr	r3, [pc, #440]	; (800d7ec <HAL_RCC_OscConfig+0x4d8>)
 800d634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d636:	4a6d      	ldr	r2, [pc, #436]	; (800d7ec <HAL_RCC_OscConfig+0x4d8>)
 800d638:	f023 0304 	bic.w	r3, r3, #4
 800d63c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	689b      	ldr	r3, [r3, #8]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d015      	beq.n	800d672 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d646:	f7fd fe29 	bl	800b29c <HAL_GetTick>
 800d64a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d64c:	e00a      	b.n	800d664 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d64e:	f7fd fe25 	bl	800b29c <HAL_GetTick>
 800d652:	4602      	mov	r2, r0
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	1ad3      	subs	r3, r2, r3
 800d658:	f241 3288 	movw	r2, #5000	; 0x1388
 800d65c:	4293      	cmp	r3, r2
 800d65e:	d901      	bls.n	800d664 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800d660:	2303      	movs	r3, #3
 800d662:	e0bc      	b.n	800d7de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d664:	4b61      	ldr	r3, [pc, #388]	; (800d7ec <HAL_RCC_OscConfig+0x4d8>)
 800d666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d668:	f003 0302 	and.w	r3, r3, #2
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d0ee      	beq.n	800d64e <HAL_RCC_OscConfig+0x33a>
 800d670:	e014      	b.n	800d69c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d672:	f7fd fe13 	bl	800b29c <HAL_GetTick>
 800d676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d678:	e00a      	b.n	800d690 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d67a:	f7fd fe0f 	bl	800b29c <HAL_GetTick>
 800d67e:	4602      	mov	r2, r0
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	1ad3      	subs	r3, r2, r3
 800d684:	f241 3288 	movw	r2, #5000	; 0x1388
 800d688:	4293      	cmp	r3, r2
 800d68a:	d901      	bls.n	800d690 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800d68c:	2303      	movs	r3, #3
 800d68e:	e0a6      	b.n	800d7de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d690:	4b56      	ldr	r3, [pc, #344]	; (800d7ec <HAL_RCC_OscConfig+0x4d8>)
 800d692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d694:	f003 0302 	and.w	r3, r3, #2
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d1ee      	bne.n	800d67a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d69c:	7dfb      	ldrb	r3, [r7, #23]
 800d69e:	2b01      	cmp	r3, #1
 800d6a0:	d105      	bne.n	800d6ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d6a2:	4b52      	ldr	r3, [pc, #328]	; (800d7ec <HAL_RCC_OscConfig+0x4d8>)
 800d6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6a6:	4a51      	ldr	r2, [pc, #324]	; (800d7ec <HAL_RCC_OscConfig+0x4d8>)
 800d6a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d6ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	699b      	ldr	r3, [r3, #24]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	f000 8092 	beq.w	800d7dc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d6b8:	4b4c      	ldr	r3, [pc, #304]	; (800d7ec <HAL_RCC_OscConfig+0x4d8>)
 800d6ba:	689b      	ldr	r3, [r3, #8]
 800d6bc:	f003 030c 	and.w	r3, r3, #12
 800d6c0:	2b08      	cmp	r3, #8
 800d6c2:	d05c      	beq.n	800d77e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	699b      	ldr	r3, [r3, #24]
 800d6c8:	2b02      	cmp	r3, #2
 800d6ca:	d141      	bne.n	800d750 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d6cc:	4b48      	ldr	r3, [pc, #288]	; (800d7f0 <HAL_RCC_OscConfig+0x4dc>)
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d6d2:	f7fd fde3 	bl	800b29c <HAL_GetTick>
 800d6d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d6d8:	e008      	b.n	800d6ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d6da:	f7fd fddf 	bl	800b29c <HAL_GetTick>
 800d6de:	4602      	mov	r2, r0
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	1ad3      	subs	r3, r2, r3
 800d6e4:	2b02      	cmp	r3, #2
 800d6e6:	d901      	bls.n	800d6ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800d6e8:	2303      	movs	r3, #3
 800d6ea:	e078      	b.n	800d7de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d6ec:	4b3f      	ldr	r3, [pc, #252]	; (800d7ec <HAL_RCC_OscConfig+0x4d8>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d1f0      	bne.n	800d6da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	69da      	ldr	r2, [r3, #28]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6a1b      	ldr	r3, [r3, #32]
 800d700:	431a      	orrs	r2, r3
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d706:	019b      	lsls	r3, r3, #6
 800d708:	431a      	orrs	r2, r3
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d70e:	085b      	lsrs	r3, r3, #1
 800d710:	3b01      	subs	r3, #1
 800d712:	041b      	lsls	r3, r3, #16
 800d714:	431a      	orrs	r2, r3
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d71a:	061b      	lsls	r3, r3, #24
 800d71c:	4933      	ldr	r1, [pc, #204]	; (800d7ec <HAL_RCC_OscConfig+0x4d8>)
 800d71e:	4313      	orrs	r3, r2
 800d720:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d722:	4b33      	ldr	r3, [pc, #204]	; (800d7f0 <HAL_RCC_OscConfig+0x4dc>)
 800d724:	2201      	movs	r2, #1
 800d726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d728:	f7fd fdb8 	bl	800b29c <HAL_GetTick>
 800d72c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d72e:	e008      	b.n	800d742 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d730:	f7fd fdb4 	bl	800b29c <HAL_GetTick>
 800d734:	4602      	mov	r2, r0
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	1ad3      	subs	r3, r2, r3
 800d73a:	2b02      	cmp	r3, #2
 800d73c:	d901      	bls.n	800d742 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800d73e:	2303      	movs	r3, #3
 800d740:	e04d      	b.n	800d7de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d742:	4b2a      	ldr	r3, [pc, #168]	; (800d7ec <HAL_RCC_OscConfig+0x4d8>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d0f0      	beq.n	800d730 <HAL_RCC_OscConfig+0x41c>
 800d74e:	e045      	b.n	800d7dc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d750:	4b27      	ldr	r3, [pc, #156]	; (800d7f0 <HAL_RCC_OscConfig+0x4dc>)
 800d752:	2200      	movs	r2, #0
 800d754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d756:	f7fd fda1 	bl	800b29c <HAL_GetTick>
 800d75a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d75c:	e008      	b.n	800d770 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d75e:	f7fd fd9d 	bl	800b29c <HAL_GetTick>
 800d762:	4602      	mov	r2, r0
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	1ad3      	subs	r3, r2, r3
 800d768:	2b02      	cmp	r3, #2
 800d76a:	d901      	bls.n	800d770 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800d76c:	2303      	movs	r3, #3
 800d76e:	e036      	b.n	800d7de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d770:	4b1e      	ldr	r3, [pc, #120]	; (800d7ec <HAL_RCC_OscConfig+0x4d8>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d1f0      	bne.n	800d75e <HAL_RCC_OscConfig+0x44a>
 800d77c:	e02e      	b.n	800d7dc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	699b      	ldr	r3, [r3, #24]
 800d782:	2b01      	cmp	r3, #1
 800d784:	d101      	bne.n	800d78a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800d786:	2301      	movs	r3, #1
 800d788:	e029      	b.n	800d7de <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d78a:	4b18      	ldr	r3, [pc, #96]	; (800d7ec <HAL_RCC_OscConfig+0x4d8>)
 800d78c:	685b      	ldr	r3, [r3, #4]
 800d78e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	69db      	ldr	r3, [r3, #28]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d11c      	bne.n	800d7d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	d115      	bne.n	800d7d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d7ac:	68fa      	ldr	r2, [r7, #12]
 800d7ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d7b2:	4013      	ands	r3, r2
 800d7b4:	687a      	ldr	r2, [r7, #4]
 800d7b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d10d      	bne.n	800d7d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d106      	bne.n	800d7d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	d001      	beq.n	800d7dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800d7d8:	2301      	movs	r3, #1
 800d7da:	e000      	b.n	800d7de <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800d7dc:	2300      	movs	r3, #0
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	3718      	adds	r7, #24
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}
 800d7e6:	bf00      	nop
 800d7e8:	40007000 	.word	0x40007000
 800d7ec:	40023800 	.word	0x40023800
 800d7f0:	42470060 	.word	0x42470060

0800d7f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b084      	sub	sp, #16
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d101      	bne.n	800d808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d804:	2301      	movs	r3, #1
 800d806:	e0cc      	b.n	800d9a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d808:	4b68      	ldr	r3, [pc, #416]	; (800d9ac <HAL_RCC_ClockConfig+0x1b8>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f003 030f 	and.w	r3, r3, #15
 800d810:	683a      	ldr	r2, [r7, #0]
 800d812:	429a      	cmp	r2, r3
 800d814:	d90c      	bls.n	800d830 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d816:	4b65      	ldr	r3, [pc, #404]	; (800d9ac <HAL_RCC_ClockConfig+0x1b8>)
 800d818:	683a      	ldr	r2, [r7, #0]
 800d81a:	b2d2      	uxtb	r2, r2
 800d81c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d81e:	4b63      	ldr	r3, [pc, #396]	; (800d9ac <HAL_RCC_ClockConfig+0x1b8>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	f003 030f 	and.w	r3, r3, #15
 800d826:	683a      	ldr	r2, [r7, #0]
 800d828:	429a      	cmp	r2, r3
 800d82a:	d001      	beq.n	800d830 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d82c:	2301      	movs	r3, #1
 800d82e:	e0b8      	b.n	800d9a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	f003 0302 	and.w	r3, r3, #2
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d020      	beq.n	800d87e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f003 0304 	and.w	r3, r3, #4
 800d844:	2b00      	cmp	r3, #0
 800d846:	d005      	beq.n	800d854 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d848:	4b59      	ldr	r3, [pc, #356]	; (800d9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d84a:	689b      	ldr	r3, [r3, #8]
 800d84c:	4a58      	ldr	r2, [pc, #352]	; (800d9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d84e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d852:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f003 0308 	and.w	r3, r3, #8
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d005      	beq.n	800d86c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d860:	4b53      	ldr	r3, [pc, #332]	; (800d9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d862:	689b      	ldr	r3, [r3, #8]
 800d864:	4a52      	ldr	r2, [pc, #328]	; (800d9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d866:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d86a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d86c:	4b50      	ldr	r3, [pc, #320]	; (800d9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d86e:	689b      	ldr	r3, [r3, #8]
 800d870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	689b      	ldr	r3, [r3, #8]
 800d878:	494d      	ldr	r1, [pc, #308]	; (800d9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d87a:	4313      	orrs	r3, r2
 800d87c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	f003 0301 	and.w	r3, r3, #1
 800d886:	2b00      	cmp	r3, #0
 800d888:	d044      	beq.n	800d914 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	2b01      	cmp	r3, #1
 800d890:	d107      	bne.n	800d8a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d892:	4b47      	ldr	r3, [pc, #284]	; (800d9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d119      	bne.n	800d8d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d89e:	2301      	movs	r3, #1
 800d8a0:	e07f      	b.n	800d9a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	2b02      	cmp	r3, #2
 800d8a8:	d003      	beq.n	800d8b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d8ae:	2b03      	cmp	r3, #3
 800d8b0:	d107      	bne.n	800d8c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d8b2:	4b3f      	ldr	r3, [pc, #252]	; (800d9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d109      	bne.n	800d8d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d8be:	2301      	movs	r3, #1
 800d8c0:	e06f      	b.n	800d9a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d8c2:	4b3b      	ldr	r3, [pc, #236]	; (800d9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f003 0302 	and.w	r3, r3, #2
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d101      	bne.n	800d8d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	e067      	b.n	800d9a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d8d2:	4b37      	ldr	r3, [pc, #220]	; (800d9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d8d4:	689b      	ldr	r3, [r3, #8]
 800d8d6:	f023 0203 	bic.w	r2, r3, #3
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	685b      	ldr	r3, [r3, #4]
 800d8de:	4934      	ldr	r1, [pc, #208]	; (800d9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d8e0:	4313      	orrs	r3, r2
 800d8e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d8e4:	f7fd fcda 	bl	800b29c <HAL_GetTick>
 800d8e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d8ea:	e00a      	b.n	800d902 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d8ec:	f7fd fcd6 	bl	800b29c <HAL_GetTick>
 800d8f0:	4602      	mov	r2, r0
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	1ad3      	subs	r3, r2, r3
 800d8f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8fa:	4293      	cmp	r3, r2
 800d8fc:	d901      	bls.n	800d902 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d8fe:	2303      	movs	r3, #3
 800d900:	e04f      	b.n	800d9a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d902:	4b2b      	ldr	r3, [pc, #172]	; (800d9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d904:	689b      	ldr	r3, [r3, #8]
 800d906:	f003 020c 	and.w	r2, r3, #12
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	685b      	ldr	r3, [r3, #4]
 800d90e:	009b      	lsls	r3, r3, #2
 800d910:	429a      	cmp	r2, r3
 800d912:	d1eb      	bne.n	800d8ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d914:	4b25      	ldr	r3, [pc, #148]	; (800d9ac <HAL_RCC_ClockConfig+0x1b8>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f003 030f 	and.w	r3, r3, #15
 800d91c:	683a      	ldr	r2, [r7, #0]
 800d91e:	429a      	cmp	r2, r3
 800d920:	d20c      	bcs.n	800d93c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d922:	4b22      	ldr	r3, [pc, #136]	; (800d9ac <HAL_RCC_ClockConfig+0x1b8>)
 800d924:	683a      	ldr	r2, [r7, #0]
 800d926:	b2d2      	uxtb	r2, r2
 800d928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d92a:	4b20      	ldr	r3, [pc, #128]	; (800d9ac <HAL_RCC_ClockConfig+0x1b8>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f003 030f 	and.w	r3, r3, #15
 800d932:	683a      	ldr	r2, [r7, #0]
 800d934:	429a      	cmp	r2, r3
 800d936:	d001      	beq.n	800d93c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d938:	2301      	movs	r3, #1
 800d93a:	e032      	b.n	800d9a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	f003 0304 	and.w	r3, r3, #4
 800d944:	2b00      	cmp	r3, #0
 800d946:	d008      	beq.n	800d95a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d948:	4b19      	ldr	r3, [pc, #100]	; (800d9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d94a:	689b      	ldr	r3, [r3, #8]
 800d94c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	68db      	ldr	r3, [r3, #12]
 800d954:	4916      	ldr	r1, [pc, #88]	; (800d9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d956:	4313      	orrs	r3, r2
 800d958:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f003 0308 	and.w	r3, r3, #8
 800d962:	2b00      	cmp	r3, #0
 800d964:	d009      	beq.n	800d97a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d966:	4b12      	ldr	r3, [pc, #72]	; (800d9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d968:	689b      	ldr	r3, [r3, #8]
 800d96a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	691b      	ldr	r3, [r3, #16]
 800d972:	00db      	lsls	r3, r3, #3
 800d974:	490e      	ldr	r1, [pc, #56]	; (800d9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d976:	4313      	orrs	r3, r2
 800d978:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d97a:	f000 f821 	bl	800d9c0 <HAL_RCC_GetSysClockFreq>
 800d97e:	4601      	mov	r1, r0
 800d980:	4b0b      	ldr	r3, [pc, #44]	; (800d9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d982:	689b      	ldr	r3, [r3, #8]
 800d984:	091b      	lsrs	r3, r3, #4
 800d986:	f003 030f 	and.w	r3, r3, #15
 800d98a:	4a0a      	ldr	r2, [pc, #40]	; (800d9b4 <HAL_RCC_ClockConfig+0x1c0>)
 800d98c:	5cd3      	ldrb	r3, [r2, r3]
 800d98e:	fa21 f303 	lsr.w	r3, r1, r3
 800d992:	4a09      	ldr	r2, [pc, #36]	; (800d9b8 <HAL_RCC_ClockConfig+0x1c4>)
 800d994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800d996:	4b09      	ldr	r3, [pc, #36]	; (800d9bc <HAL_RCC_ClockConfig+0x1c8>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	4618      	mov	r0, r3
 800d99c:	f7fd f984 	bl	800aca8 <HAL_InitTick>

  return HAL_OK;
 800d9a0:	2300      	movs	r3, #0
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3710      	adds	r7, #16
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}
 800d9aa:	bf00      	nop
 800d9ac:	40023c00 	.word	0x40023c00
 800d9b0:	40023800 	.word	0x40023800
 800d9b4:	0801b1f8 	.word	0x0801b1f8
 800d9b8:	20000828 	.word	0x20000828
 800d9bc:	2000082c 	.word	0x2000082c

0800d9c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9c2:	b085      	sub	sp, #20
 800d9c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	607b      	str	r3, [r7, #4]
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	60fb      	str	r3, [r7, #12]
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d9d6:	4b63      	ldr	r3, [pc, #396]	; (800db64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d9d8:	689b      	ldr	r3, [r3, #8]
 800d9da:	f003 030c 	and.w	r3, r3, #12
 800d9de:	2b04      	cmp	r3, #4
 800d9e0:	d007      	beq.n	800d9f2 <HAL_RCC_GetSysClockFreq+0x32>
 800d9e2:	2b08      	cmp	r3, #8
 800d9e4:	d008      	beq.n	800d9f8 <HAL_RCC_GetSysClockFreq+0x38>
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	f040 80b4 	bne.w	800db54 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d9ec:	4b5e      	ldr	r3, [pc, #376]	; (800db68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800d9ee:	60bb      	str	r3, [r7, #8]
       break;
 800d9f0:	e0b3      	b.n	800db5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d9f2:	4b5e      	ldr	r3, [pc, #376]	; (800db6c <HAL_RCC_GetSysClockFreq+0x1ac>)
 800d9f4:	60bb      	str	r3, [r7, #8]
      break;
 800d9f6:	e0b0      	b.n	800db5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d9f8:	4b5a      	ldr	r3, [pc, #360]	; (800db64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d9fa:	685b      	ldr	r3, [r3, #4]
 800d9fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da00:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800da02:	4b58      	ldr	r3, [pc, #352]	; (800db64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800da04:	685b      	ldr	r3, [r3, #4]
 800da06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d04a      	beq.n	800daa4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800da0e:	4b55      	ldr	r3, [pc, #340]	; (800db64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	099b      	lsrs	r3, r3, #6
 800da14:	f04f 0400 	mov.w	r4, #0
 800da18:	f240 11ff 	movw	r1, #511	; 0x1ff
 800da1c:	f04f 0200 	mov.w	r2, #0
 800da20:	ea03 0501 	and.w	r5, r3, r1
 800da24:	ea04 0602 	and.w	r6, r4, r2
 800da28:	4629      	mov	r1, r5
 800da2a:	4632      	mov	r2, r6
 800da2c:	f04f 0300 	mov.w	r3, #0
 800da30:	f04f 0400 	mov.w	r4, #0
 800da34:	0154      	lsls	r4, r2, #5
 800da36:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800da3a:	014b      	lsls	r3, r1, #5
 800da3c:	4619      	mov	r1, r3
 800da3e:	4622      	mov	r2, r4
 800da40:	1b49      	subs	r1, r1, r5
 800da42:	eb62 0206 	sbc.w	r2, r2, r6
 800da46:	f04f 0300 	mov.w	r3, #0
 800da4a:	f04f 0400 	mov.w	r4, #0
 800da4e:	0194      	lsls	r4, r2, #6
 800da50:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800da54:	018b      	lsls	r3, r1, #6
 800da56:	1a5b      	subs	r3, r3, r1
 800da58:	eb64 0402 	sbc.w	r4, r4, r2
 800da5c:	f04f 0100 	mov.w	r1, #0
 800da60:	f04f 0200 	mov.w	r2, #0
 800da64:	00e2      	lsls	r2, r4, #3
 800da66:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800da6a:	00d9      	lsls	r1, r3, #3
 800da6c:	460b      	mov	r3, r1
 800da6e:	4614      	mov	r4, r2
 800da70:	195b      	adds	r3, r3, r5
 800da72:	eb44 0406 	adc.w	r4, r4, r6
 800da76:	f04f 0100 	mov.w	r1, #0
 800da7a:	f04f 0200 	mov.w	r2, #0
 800da7e:	0262      	lsls	r2, r4, #9
 800da80:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800da84:	0259      	lsls	r1, r3, #9
 800da86:	460b      	mov	r3, r1
 800da88:	4614      	mov	r4, r2
 800da8a:	4618      	mov	r0, r3
 800da8c:	4621      	mov	r1, r4
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f04f 0400 	mov.w	r4, #0
 800da94:	461a      	mov	r2, r3
 800da96:	4623      	mov	r3, r4
 800da98:	f7f3 f8f6 	bl	8000c88 <__aeabi_uldivmod>
 800da9c:	4603      	mov	r3, r0
 800da9e:	460c      	mov	r4, r1
 800daa0:	60fb      	str	r3, [r7, #12]
 800daa2:	e049      	b.n	800db38 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800daa4:	4b2f      	ldr	r3, [pc, #188]	; (800db64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800daa6:	685b      	ldr	r3, [r3, #4]
 800daa8:	099b      	lsrs	r3, r3, #6
 800daaa:	f04f 0400 	mov.w	r4, #0
 800daae:	f240 11ff 	movw	r1, #511	; 0x1ff
 800dab2:	f04f 0200 	mov.w	r2, #0
 800dab6:	ea03 0501 	and.w	r5, r3, r1
 800daba:	ea04 0602 	and.w	r6, r4, r2
 800dabe:	4629      	mov	r1, r5
 800dac0:	4632      	mov	r2, r6
 800dac2:	f04f 0300 	mov.w	r3, #0
 800dac6:	f04f 0400 	mov.w	r4, #0
 800daca:	0154      	lsls	r4, r2, #5
 800dacc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800dad0:	014b      	lsls	r3, r1, #5
 800dad2:	4619      	mov	r1, r3
 800dad4:	4622      	mov	r2, r4
 800dad6:	1b49      	subs	r1, r1, r5
 800dad8:	eb62 0206 	sbc.w	r2, r2, r6
 800dadc:	f04f 0300 	mov.w	r3, #0
 800dae0:	f04f 0400 	mov.w	r4, #0
 800dae4:	0194      	lsls	r4, r2, #6
 800dae6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800daea:	018b      	lsls	r3, r1, #6
 800daec:	1a5b      	subs	r3, r3, r1
 800daee:	eb64 0402 	sbc.w	r4, r4, r2
 800daf2:	f04f 0100 	mov.w	r1, #0
 800daf6:	f04f 0200 	mov.w	r2, #0
 800dafa:	00e2      	lsls	r2, r4, #3
 800dafc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800db00:	00d9      	lsls	r1, r3, #3
 800db02:	460b      	mov	r3, r1
 800db04:	4614      	mov	r4, r2
 800db06:	195b      	adds	r3, r3, r5
 800db08:	eb44 0406 	adc.w	r4, r4, r6
 800db0c:	f04f 0100 	mov.w	r1, #0
 800db10:	f04f 0200 	mov.w	r2, #0
 800db14:	02a2      	lsls	r2, r4, #10
 800db16:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800db1a:	0299      	lsls	r1, r3, #10
 800db1c:	460b      	mov	r3, r1
 800db1e:	4614      	mov	r4, r2
 800db20:	4618      	mov	r0, r3
 800db22:	4621      	mov	r1, r4
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f04f 0400 	mov.w	r4, #0
 800db2a:	461a      	mov	r2, r3
 800db2c:	4623      	mov	r3, r4
 800db2e:	f7f3 f8ab 	bl	8000c88 <__aeabi_uldivmod>
 800db32:	4603      	mov	r3, r0
 800db34:	460c      	mov	r4, r1
 800db36:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800db38:	4b0a      	ldr	r3, [pc, #40]	; (800db64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800db3a:	685b      	ldr	r3, [r3, #4]
 800db3c:	0c1b      	lsrs	r3, r3, #16
 800db3e:	f003 0303 	and.w	r3, r3, #3
 800db42:	3301      	adds	r3, #1
 800db44:	005b      	lsls	r3, r3, #1
 800db46:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800db48:	68fa      	ldr	r2, [r7, #12]
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800db50:	60bb      	str	r3, [r7, #8]
      break;
 800db52:	e002      	b.n	800db5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800db54:	4b04      	ldr	r3, [pc, #16]	; (800db68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800db56:	60bb      	str	r3, [r7, #8]
      break;
 800db58:	bf00      	nop
    }
  }
  return sysclockfreq;
 800db5a:	68bb      	ldr	r3, [r7, #8]
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3714      	adds	r7, #20
 800db60:	46bd      	mov	sp, r7
 800db62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db64:	40023800 	.word	0x40023800
 800db68:	00f42400 	.word	0x00f42400
 800db6c:	007a1200 	.word	0x007a1200

0800db70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800db70:	b480      	push	{r7}
 800db72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800db74:	4b03      	ldr	r3, [pc, #12]	; (800db84 <HAL_RCC_GetHCLKFreq+0x14>)
 800db76:	681b      	ldr	r3, [r3, #0]
}
 800db78:	4618      	mov	r0, r3
 800db7a:	46bd      	mov	sp, r7
 800db7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db80:	4770      	bx	lr
 800db82:	bf00      	nop
 800db84:	20000828 	.word	0x20000828

0800db88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800db8c:	f7ff fff0 	bl	800db70 <HAL_RCC_GetHCLKFreq>
 800db90:	4601      	mov	r1, r0
 800db92:	4b05      	ldr	r3, [pc, #20]	; (800dba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800db94:	689b      	ldr	r3, [r3, #8]
 800db96:	0a9b      	lsrs	r3, r3, #10
 800db98:	f003 0307 	and.w	r3, r3, #7
 800db9c:	4a03      	ldr	r2, [pc, #12]	; (800dbac <HAL_RCC_GetPCLK1Freq+0x24>)
 800db9e:	5cd3      	ldrb	r3, [r2, r3]
 800dba0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	40023800 	.word	0x40023800
 800dbac:	0801b208 	.word	0x0801b208

0800dbb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800dbb4:	f7ff ffdc 	bl	800db70 <HAL_RCC_GetHCLKFreq>
 800dbb8:	4601      	mov	r1, r0
 800dbba:	4b05      	ldr	r3, [pc, #20]	; (800dbd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800dbbc:	689b      	ldr	r3, [r3, #8]
 800dbbe:	0b5b      	lsrs	r3, r3, #13
 800dbc0:	f003 0307 	and.w	r3, r3, #7
 800dbc4:	4a03      	ldr	r2, [pc, #12]	; (800dbd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800dbc6:	5cd3      	ldrb	r3, [r2, r3]
 800dbc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	40023800 	.word	0x40023800
 800dbd4:	0801b208 	.word	0x0801b208

0800dbd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800dbd8:	b480      	push	{r7}
 800dbda:	b083      	sub	sp, #12
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	220f      	movs	r2, #15
 800dbe6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800dbe8:	4b12      	ldr	r3, [pc, #72]	; (800dc34 <HAL_RCC_GetClockConfig+0x5c>)
 800dbea:	689b      	ldr	r3, [r3, #8]
 800dbec:	f003 0203 	and.w	r2, r3, #3
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800dbf4:	4b0f      	ldr	r3, [pc, #60]	; (800dc34 <HAL_RCC_GetClockConfig+0x5c>)
 800dbf6:	689b      	ldr	r3, [r3, #8]
 800dbf8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800dc00:	4b0c      	ldr	r3, [pc, #48]	; (800dc34 <HAL_RCC_GetClockConfig+0x5c>)
 800dc02:	689b      	ldr	r3, [r3, #8]
 800dc04:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800dc0c:	4b09      	ldr	r3, [pc, #36]	; (800dc34 <HAL_RCC_GetClockConfig+0x5c>)
 800dc0e:	689b      	ldr	r3, [r3, #8]
 800dc10:	08db      	lsrs	r3, r3, #3
 800dc12:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800dc1a:	4b07      	ldr	r3, [pc, #28]	; (800dc38 <HAL_RCC_GetClockConfig+0x60>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f003 020f 	and.w	r2, r3, #15
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	601a      	str	r2, [r3, #0]
}
 800dc26:	bf00      	nop
 800dc28:	370c      	adds	r7, #12
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc30:	4770      	bx	lr
 800dc32:	bf00      	nop
 800dc34:	40023800 	.word	0x40023800
 800dc38:	40023c00 	.word	0x40023c00

0800dc3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d101      	bne.n	800dc4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	e01d      	b.n	800dc8a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc54:	b2db      	uxtb	r3, r3
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d106      	bne.n	800dc68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f7fd f9aa 	bl	800afbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2202      	movs	r2, #2
 800dc6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681a      	ldr	r2, [r3, #0]
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	3304      	adds	r3, #4
 800dc78:	4619      	mov	r1, r3
 800dc7a:	4610      	mov	r0, r2
 800dc7c:	f000 fa38 	bl	800e0f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2201      	movs	r2, #1
 800dc84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dc88:	2300      	movs	r3, #0
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3708      	adds	r7, #8
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}

0800dc92 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800dc92:	b480      	push	{r7}
 800dc94:	b085      	sub	sp, #20
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2202      	movs	r2, #2
 800dc9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	689b      	ldr	r3, [r3, #8]
 800dca8:	f003 0307 	and.w	r3, r3, #7
 800dcac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	2b06      	cmp	r3, #6
 800dcb2:	d007      	beq.n	800dcc4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	681a      	ldr	r2, [r3, #0]
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	f042 0201 	orr.w	r2, r2, #1
 800dcc2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800dccc:	2300      	movs	r3, #0
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3714      	adds	r7, #20
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd8:	4770      	bx	lr

0800dcda <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dcda:	b480      	push	{r7}
 800dcdc:	b085      	sub	sp, #20
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	68da      	ldr	r2, [r3, #12]
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	f042 0201 	orr.w	r2, r2, #1
 800dcf0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	689b      	ldr	r3, [r3, #8]
 800dcf8:	f003 0307 	and.w	r3, r3, #7
 800dcfc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	2b06      	cmp	r3, #6
 800dd02:	d007      	beq.n	800dd14 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	f042 0201 	orr.w	r2, r2, #1
 800dd12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dd14:	2300      	movs	r3, #0
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3714      	adds	r7, #20
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd20:	4770      	bx	lr

0800dd22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b082      	sub	sp, #8
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	691b      	ldr	r3, [r3, #16]
 800dd30:	f003 0302 	and.w	r3, r3, #2
 800dd34:	2b02      	cmp	r3, #2
 800dd36:	d122      	bne.n	800dd7e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	68db      	ldr	r3, [r3, #12]
 800dd3e:	f003 0302 	and.w	r3, r3, #2
 800dd42:	2b02      	cmp	r3, #2
 800dd44:	d11b      	bne.n	800dd7e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f06f 0202 	mvn.w	r2, #2
 800dd4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2201      	movs	r2, #1
 800dd54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	699b      	ldr	r3, [r3, #24]
 800dd5c:	f003 0303 	and.w	r3, r3, #3
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d003      	beq.n	800dd6c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	f000 f9a5 	bl	800e0b4 <HAL_TIM_IC_CaptureCallback>
 800dd6a:	e005      	b.n	800dd78 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f000 f997 	bl	800e0a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f000 f9a8 	bl	800e0c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	691b      	ldr	r3, [r3, #16]
 800dd84:	f003 0304 	and.w	r3, r3, #4
 800dd88:	2b04      	cmp	r3, #4
 800dd8a:	d122      	bne.n	800ddd2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	68db      	ldr	r3, [r3, #12]
 800dd92:	f003 0304 	and.w	r3, r3, #4
 800dd96:	2b04      	cmp	r3, #4
 800dd98:	d11b      	bne.n	800ddd2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	f06f 0204 	mvn.w	r2, #4
 800dda2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2202      	movs	r2, #2
 800dda8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	699b      	ldr	r3, [r3, #24]
 800ddb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d003      	beq.n	800ddc0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f000 f97b 	bl	800e0b4 <HAL_TIM_IC_CaptureCallback>
 800ddbe:	e005      	b.n	800ddcc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f000 f96d 	bl	800e0a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f000 f97e 	bl	800e0c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	691b      	ldr	r3, [r3, #16]
 800ddd8:	f003 0308 	and.w	r3, r3, #8
 800dddc:	2b08      	cmp	r3, #8
 800ddde:	d122      	bne.n	800de26 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	68db      	ldr	r3, [r3, #12]
 800dde6:	f003 0308 	and.w	r3, r3, #8
 800ddea:	2b08      	cmp	r3, #8
 800ddec:	d11b      	bne.n	800de26 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	f06f 0208 	mvn.w	r2, #8
 800ddf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2204      	movs	r2, #4
 800ddfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	69db      	ldr	r3, [r3, #28]
 800de04:	f003 0303 	and.w	r3, r3, #3
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d003      	beq.n	800de14 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f000 f951 	bl	800e0b4 <HAL_TIM_IC_CaptureCallback>
 800de12:	e005      	b.n	800de20 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f000 f943 	bl	800e0a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f000 f954 	bl	800e0c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2200      	movs	r2, #0
 800de24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	691b      	ldr	r3, [r3, #16]
 800de2c:	f003 0310 	and.w	r3, r3, #16
 800de30:	2b10      	cmp	r3, #16
 800de32:	d122      	bne.n	800de7a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	68db      	ldr	r3, [r3, #12]
 800de3a:	f003 0310 	and.w	r3, r3, #16
 800de3e:	2b10      	cmp	r3, #16
 800de40:	d11b      	bne.n	800de7a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	f06f 0210 	mvn.w	r2, #16
 800de4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2208      	movs	r2, #8
 800de50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	69db      	ldr	r3, [r3, #28]
 800de58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d003      	beq.n	800de68 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f000 f927 	bl	800e0b4 <HAL_TIM_IC_CaptureCallback>
 800de66:	e005      	b.n	800de74 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f000 f919 	bl	800e0a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f000 f92a 	bl	800e0c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2200      	movs	r2, #0
 800de78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	691b      	ldr	r3, [r3, #16]
 800de80:	f003 0301 	and.w	r3, r3, #1
 800de84:	2b01      	cmp	r3, #1
 800de86:	d10e      	bne.n	800dea6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	68db      	ldr	r3, [r3, #12]
 800de8e:	f003 0301 	and.w	r3, r3, #1
 800de92:	2b01      	cmp	r3, #1
 800de94:	d107      	bne.n	800dea6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	f06f 0201 	mvn.w	r2, #1
 800de9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f7f6 f971 	bl	8004188 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	691b      	ldr	r3, [r3, #16]
 800deac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800deb0:	2b80      	cmp	r3, #128	; 0x80
 800deb2:	d10e      	bne.n	800ded2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	68db      	ldr	r3, [r3, #12]
 800deba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800debe:	2b80      	cmp	r3, #128	; 0x80
 800dec0:	d107      	bne.n	800ded2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800deca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f000 facf 	bl	800e470 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	691b      	ldr	r3, [r3, #16]
 800ded8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dedc:	2b40      	cmp	r3, #64	; 0x40
 800dede:	d10e      	bne.n	800defe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	68db      	ldr	r3, [r3, #12]
 800dee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800deea:	2b40      	cmp	r3, #64	; 0x40
 800deec:	d107      	bne.n	800defe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800def6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f000 f8ef 	bl	800e0dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	691b      	ldr	r3, [r3, #16]
 800df04:	f003 0320 	and.w	r3, r3, #32
 800df08:	2b20      	cmp	r3, #32
 800df0a:	d10e      	bne.n	800df2a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	68db      	ldr	r3, [r3, #12]
 800df12:	f003 0320 	and.w	r3, r3, #32
 800df16:	2b20      	cmp	r3, #32
 800df18:	d107      	bne.n	800df2a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f06f 0220 	mvn.w	r2, #32
 800df22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f000 fa99 	bl	800e45c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800df2a:	bf00      	nop
 800df2c:	3708      	adds	r7, #8
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}

0800df32 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800df32:	b580      	push	{r7, lr}
 800df34:	b084      	sub	sp, #16
 800df36:	af00      	add	r7, sp, #0
 800df38:	6078      	str	r0, [r7, #4]
 800df3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df42:	2b01      	cmp	r3, #1
 800df44:	d101      	bne.n	800df4a <HAL_TIM_ConfigClockSource+0x18>
 800df46:	2302      	movs	r3, #2
 800df48:	e0a6      	b.n	800e098 <HAL_TIM_ConfigClockSource+0x166>
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	2201      	movs	r2, #1
 800df4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2202      	movs	r2, #2
 800df56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	689b      	ldr	r3, [r3, #8]
 800df60:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800df68:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800df70:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	68fa      	ldr	r2, [r7, #12]
 800df78:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	2b40      	cmp	r3, #64	; 0x40
 800df80:	d067      	beq.n	800e052 <HAL_TIM_ConfigClockSource+0x120>
 800df82:	2b40      	cmp	r3, #64	; 0x40
 800df84:	d80b      	bhi.n	800df9e <HAL_TIM_ConfigClockSource+0x6c>
 800df86:	2b10      	cmp	r3, #16
 800df88:	d073      	beq.n	800e072 <HAL_TIM_ConfigClockSource+0x140>
 800df8a:	2b10      	cmp	r3, #16
 800df8c:	d802      	bhi.n	800df94 <HAL_TIM_ConfigClockSource+0x62>
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d06f      	beq.n	800e072 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800df92:	e078      	b.n	800e086 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800df94:	2b20      	cmp	r3, #32
 800df96:	d06c      	beq.n	800e072 <HAL_TIM_ConfigClockSource+0x140>
 800df98:	2b30      	cmp	r3, #48	; 0x30
 800df9a:	d06a      	beq.n	800e072 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800df9c:	e073      	b.n	800e086 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800df9e:	2b70      	cmp	r3, #112	; 0x70
 800dfa0:	d00d      	beq.n	800dfbe <HAL_TIM_ConfigClockSource+0x8c>
 800dfa2:	2b70      	cmp	r3, #112	; 0x70
 800dfa4:	d804      	bhi.n	800dfb0 <HAL_TIM_ConfigClockSource+0x7e>
 800dfa6:	2b50      	cmp	r3, #80	; 0x50
 800dfa8:	d033      	beq.n	800e012 <HAL_TIM_ConfigClockSource+0xe0>
 800dfaa:	2b60      	cmp	r3, #96	; 0x60
 800dfac:	d041      	beq.n	800e032 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800dfae:	e06a      	b.n	800e086 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800dfb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dfb4:	d066      	beq.n	800e084 <HAL_TIM_ConfigClockSource+0x152>
 800dfb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dfba:	d017      	beq.n	800dfec <HAL_TIM_ConfigClockSource+0xba>
      break;
 800dfbc:	e063      	b.n	800e086 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6818      	ldr	r0, [r3, #0]
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	6899      	ldr	r1, [r3, #8]
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	685a      	ldr	r2, [r3, #4]
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	68db      	ldr	r3, [r3, #12]
 800dfce:	f000 f9a9 	bl	800e324 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	689b      	ldr	r3, [r3, #8]
 800dfd8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800dfe0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	68fa      	ldr	r2, [r7, #12]
 800dfe8:	609a      	str	r2, [r3, #8]
      break;
 800dfea:	e04c      	b.n	800e086 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6818      	ldr	r0, [r3, #0]
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	6899      	ldr	r1, [r3, #8]
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	685a      	ldr	r2, [r3, #4]
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	68db      	ldr	r3, [r3, #12]
 800dffc:	f000 f992 	bl	800e324 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	689a      	ldr	r2, [r3, #8]
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e00e:	609a      	str	r2, [r3, #8]
      break;
 800e010:	e039      	b.n	800e086 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6818      	ldr	r0, [r3, #0]
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	6859      	ldr	r1, [r3, #4]
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	68db      	ldr	r3, [r3, #12]
 800e01e:	461a      	mov	r2, r3
 800e020:	f000 f906 	bl	800e230 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	2150      	movs	r1, #80	; 0x50
 800e02a:	4618      	mov	r0, r3
 800e02c:	f000 f95f 	bl	800e2ee <TIM_ITRx_SetConfig>
      break;
 800e030:	e029      	b.n	800e086 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6818      	ldr	r0, [r3, #0]
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	6859      	ldr	r1, [r3, #4]
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	68db      	ldr	r3, [r3, #12]
 800e03e:	461a      	mov	r2, r3
 800e040:	f000 f925 	bl	800e28e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	2160      	movs	r1, #96	; 0x60
 800e04a:	4618      	mov	r0, r3
 800e04c:	f000 f94f 	bl	800e2ee <TIM_ITRx_SetConfig>
      break;
 800e050:	e019      	b.n	800e086 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6818      	ldr	r0, [r3, #0]
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	6859      	ldr	r1, [r3, #4]
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	68db      	ldr	r3, [r3, #12]
 800e05e:	461a      	mov	r2, r3
 800e060:	f000 f8e6 	bl	800e230 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	2140      	movs	r1, #64	; 0x40
 800e06a:	4618      	mov	r0, r3
 800e06c:	f000 f93f 	bl	800e2ee <TIM_ITRx_SetConfig>
      break;
 800e070:	e009      	b.n	800e086 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681a      	ldr	r2, [r3, #0]
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	4619      	mov	r1, r3
 800e07c:	4610      	mov	r0, r2
 800e07e:	f000 f936 	bl	800e2ee <TIM_ITRx_SetConfig>
      break;
 800e082:	e000      	b.n	800e086 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800e084:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2201      	movs	r2, #1
 800e08a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2200      	movs	r2, #0
 800e092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e096:	2300      	movs	r3, #0
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3710      	adds	r7, #16
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	b083      	sub	sp, #12
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e0a8:	bf00      	nop
 800e0aa:	370c      	adds	r7, #12
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr

0800e0b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b083      	sub	sp, #12
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e0bc:	bf00      	nop
 800e0be:	370c      	adds	r7, #12
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c6:	4770      	bx	lr

0800e0c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e0c8:	b480      	push	{r7}
 800e0ca:	b083      	sub	sp, #12
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e0d0:	bf00      	nop
 800e0d2:	370c      	adds	r7, #12
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0da:	4770      	bx	lr

0800e0dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e0dc:	b480      	push	{r7}
 800e0de:	b083      	sub	sp, #12
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e0e4:	bf00      	nop
 800e0e6:	370c      	adds	r7, #12
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ee:	4770      	bx	lr

0800e0f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e0f0:	b480      	push	{r7}
 800e0f2:	b085      	sub	sp, #20
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
 800e0f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	4a40      	ldr	r2, [pc, #256]	; (800e204 <TIM_Base_SetConfig+0x114>)
 800e104:	4293      	cmp	r3, r2
 800e106:	d013      	beq.n	800e130 <TIM_Base_SetConfig+0x40>
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e10e:	d00f      	beq.n	800e130 <TIM_Base_SetConfig+0x40>
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	4a3d      	ldr	r2, [pc, #244]	; (800e208 <TIM_Base_SetConfig+0x118>)
 800e114:	4293      	cmp	r3, r2
 800e116:	d00b      	beq.n	800e130 <TIM_Base_SetConfig+0x40>
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	4a3c      	ldr	r2, [pc, #240]	; (800e20c <TIM_Base_SetConfig+0x11c>)
 800e11c:	4293      	cmp	r3, r2
 800e11e:	d007      	beq.n	800e130 <TIM_Base_SetConfig+0x40>
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	4a3b      	ldr	r2, [pc, #236]	; (800e210 <TIM_Base_SetConfig+0x120>)
 800e124:	4293      	cmp	r3, r2
 800e126:	d003      	beq.n	800e130 <TIM_Base_SetConfig+0x40>
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	4a3a      	ldr	r2, [pc, #232]	; (800e214 <TIM_Base_SetConfig+0x124>)
 800e12c:	4293      	cmp	r3, r2
 800e12e:	d108      	bne.n	800e142 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	685b      	ldr	r3, [r3, #4]
 800e13c:	68fa      	ldr	r2, [r7, #12]
 800e13e:	4313      	orrs	r3, r2
 800e140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	4a2f      	ldr	r2, [pc, #188]	; (800e204 <TIM_Base_SetConfig+0x114>)
 800e146:	4293      	cmp	r3, r2
 800e148:	d02b      	beq.n	800e1a2 <TIM_Base_SetConfig+0xb2>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e150:	d027      	beq.n	800e1a2 <TIM_Base_SetConfig+0xb2>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	4a2c      	ldr	r2, [pc, #176]	; (800e208 <TIM_Base_SetConfig+0x118>)
 800e156:	4293      	cmp	r3, r2
 800e158:	d023      	beq.n	800e1a2 <TIM_Base_SetConfig+0xb2>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	4a2b      	ldr	r2, [pc, #172]	; (800e20c <TIM_Base_SetConfig+0x11c>)
 800e15e:	4293      	cmp	r3, r2
 800e160:	d01f      	beq.n	800e1a2 <TIM_Base_SetConfig+0xb2>
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	4a2a      	ldr	r2, [pc, #168]	; (800e210 <TIM_Base_SetConfig+0x120>)
 800e166:	4293      	cmp	r3, r2
 800e168:	d01b      	beq.n	800e1a2 <TIM_Base_SetConfig+0xb2>
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	4a29      	ldr	r2, [pc, #164]	; (800e214 <TIM_Base_SetConfig+0x124>)
 800e16e:	4293      	cmp	r3, r2
 800e170:	d017      	beq.n	800e1a2 <TIM_Base_SetConfig+0xb2>
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	4a28      	ldr	r2, [pc, #160]	; (800e218 <TIM_Base_SetConfig+0x128>)
 800e176:	4293      	cmp	r3, r2
 800e178:	d013      	beq.n	800e1a2 <TIM_Base_SetConfig+0xb2>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	4a27      	ldr	r2, [pc, #156]	; (800e21c <TIM_Base_SetConfig+0x12c>)
 800e17e:	4293      	cmp	r3, r2
 800e180:	d00f      	beq.n	800e1a2 <TIM_Base_SetConfig+0xb2>
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	4a26      	ldr	r2, [pc, #152]	; (800e220 <TIM_Base_SetConfig+0x130>)
 800e186:	4293      	cmp	r3, r2
 800e188:	d00b      	beq.n	800e1a2 <TIM_Base_SetConfig+0xb2>
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	4a25      	ldr	r2, [pc, #148]	; (800e224 <TIM_Base_SetConfig+0x134>)
 800e18e:	4293      	cmp	r3, r2
 800e190:	d007      	beq.n	800e1a2 <TIM_Base_SetConfig+0xb2>
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	4a24      	ldr	r2, [pc, #144]	; (800e228 <TIM_Base_SetConfig+0x138>)
 800e196:	4293      	cmp	r3, r2
 800e198:	d003      	beq.n	800e1a2 <TIM_Base_SetConfig+0xb2>
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	4a23      	ldr	r2, [pc, #140]	; (800e22c <TIM_Base_SetConfig+0x13c>)
 800e19e:	4293      	cmp	r3, r2
 800e1a0:	d108      	bne.n	800e1b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e1a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	68db      	ldr	r3, [r3, #12]
 800e1ae:	68fa      	ldr	r2, [r7, #12]
 800e1b0:	4313      	orrs	r3, r2
 800e1b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	695b      	ldr	r3, [r3, #20]
 800e1be:	4313      	orrs	r3, r2
 800e1c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	68fa      	ldr	r2, [r7, #12]
 800e1c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	689a      	ldr	r2, [r3, #8]
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	681a      	ldr	r2, [r3, #0]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	4a0a      	ldr	r2, [pc, #40]	; (800e204 <TIM_Base_SetConfig+0x114>)
 800e1dc:	4293      	cmp	r3, r2
 800e1de:	d003      	beq.n	800e1e8 <TIM_Base_SetConfig+0xf8>
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	4a0c      	ldr	r2, [pc, #48]	; (800e214 <TIM_Base_SetConfig+0x124>)
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	d103      	bne.n	800e1f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	691a      	ldr	r2, [r3, #16]
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2201      	movs	r2, #1
 800e1f4:	615a      	str	r2, [r3, #20]
}
 800e1f6:	bf00      	nop
 800e1f8:	3714      	adds	r7, #20
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e200:	4770      	bx	lr
 800e202:	bf00      	nop
 800e204:	40010000 	.word	0x40010000
 800e208:	40000400 	.word	0x40000400
 800e20c:	40000800 	.word	0x40000800
 800e210:	40000c00 	.word	0x40000c00
 800e214:	40010400 	.word	0x40010400
 800e218:	40014000 	.word	0x40014000
 800e21c:	40014400 	.word	0x40014400
 800e220:	40014800 	.word	0x40014800
 800e224:	40001800 	.word	0x40001800
 800e228:	40001c00 	.word	0x40001c00
 800e22c:	40002000 	.word	0x40002000

0800e230 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e230:	b480      	push	{r7}
 800e232:	b087      	sub	sp, #28
 800e234:	af00      	add	r7, sp, #0
 800e236:	60f8      	str	r0, [r7, #12]
 800e238:	60b9      	str	r1, [r7, #8]
 800e23a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	6a1b      	ldr	r3, [r3, #32]
 800e240:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	6a1b      	ldr	r3, [r3, #32]
 800e246:	f023 0201 	bic.w	r2, r3, #1
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	699b      	ldr	r3, [r3, #24]
 800e252:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e254:	693b      	ldr	r3, [r7, #16]
 800e256:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e25a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	011b      	lsls	r3, r3, #4
 800e260:	693a      	ldr	r2, [r7, #16]
 800e262:	4313      	orrs	r3, r2
 800e264:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	f023 030a 	bic.w	r3, r3, #10
 800e26c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e26e:	697a      	ldr	r2, [r7, #20]
 800e270:	68bb      	ldr	r3, [r7, #8]
 800e272:	4313      	orrs	r3, r2
 800e274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	693a      	ldr	r2, [r7, #16]
 800e27a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	697a      	ldr	r2, [r7, #20]
 800e280:	621a      	str	r2, [r3, #32]
}
 800e282:	bf00      	nop
 800e284:	371c      	adds	r7, #28
 800e286:	46bd      	mov	sp, r7
 800e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28c:	4770      	bx	lr

0800e28e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e28e:	b480      	push	{r7}
 800e290:	b087      	sub	sp, #28
 800e292:	af00      	add	r7, sp, #0
 800e294:	60f8      	str	r0, [r7, #12]
 800e296:	60b9      	str	r1, [r7, #8]
 800e298:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	6a1b      	ldr	r3, [r3, #32]
 800e29e:	f023 0210 	bic.w	r2, r3, #16
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	699b      	ldr	r3, [r3, #24]
 800e2aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	6a1b      	ldr	r3, [r3, #32]
 800e2b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e2b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	031b      	lsls	r3, r3, #12
 800e2be:	697a      	ldr	r2, [r7, #20]
 800e2c0:	4313      	orrs	r3, r2
 800e2c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e2ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	011b      	lsls	r3, r3, #4
 800e2d0:	693a      	ldr	r2, [r7, #16]
 800e2d2:	4313      	orrs	r3, r2
 800e2d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	697a      	ldr	r2, [r7, #20]
 800e2da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	693a      	ldr	r2, [r7, #16]
 800e2e0:	621a      	str	r2, [r3, #32]
}
 800e2e2:	bf00      	nop
 800e2e4:	371c      	adds	r7, #28
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ec:	4770      	bx	lr

0800e2ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e2ee:	b480      	push	{r7}
 800e2f0:	b085      	sub	sp, #20
 800e2f2:	af00      	add	r7, sp, #0
 800e2f4:	6078      	str	r0, [r7, #4]
 800e2f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	689b      	ldr	r3, [r3, #8]
 800e2fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e304:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e306:	683a      	ldr	r2, [r7, #0]
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	4313      	orrs	r3, r2
 800e30c:	f043 0307 	orr.w	r3, r3, #7
 800e310:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	68fa      	ldr	r2, [r7, #12]
 800e316:	609a      	str	r2, [r3, #8]
}
 800e318:	bf00      	nop
 800e31a:	3714      	adds	r7, #20
 800e31c:	46bd      	mov	sp, r7
 800e31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e322:	4770      	bx	lr

0800e324 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e324:	b480      	push	{r7}
 800e326:	b087      	sub	sp, #28
 800e328:	af00      	add	r7, sp, #0
 800e32a:	60f8      	str	r0, [r7, #12]
 800e32c:	60b9      	str	r1, [r7, #8]
 800e32e:	607a      	str	r2, [r7, #4]
 800e330:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	689b      	ldr	r3, [r3, #8]
 800e336:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e33e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	021a      	lsls	r2, r3, #8
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	431a      	orrs	r2, r3
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	4313      	orrs	r3, r2
 800e34c:	697a      	ldr	r2, [r7, #20]
 800e34e:	4313      	orrs	r3, r2
 800e350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	697a      	ldr	r2, [r7, #20]
 800e356:	609a      	str	r2, [r3, #8]
}
 800e358:	bf00      	nop
 800e35a:	371c      	adds	r7, #28
 800e35c:	46bd      	mov	sp, r7
 800e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e362:	4770      	bx	lr

0800e364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e364:	b480      	push	{r7}
 800e366:	b085      	sub	sp, #20
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e374:	2b01      	cmp	r3, #1
 800e376:	d101      	bne.n	800e37c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e378:	2302      	movs	r3, #2
 800e37a:	e05a      	b.n	800e432 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2201      	movs	r2, #1
 800e380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2202      	movs	r2, #2
 800e388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	685b      	ldr	r3, [r3, #4]
 800e392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	689b      	ldr	r3, [r3, #8]
 800e39a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e3a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	68fa      	ldr	r2, [r7, #12]
 800e3aa:	4313      	orrs	r3, r2
 800e3ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	68fa      	ldr	r2, [r7, #12]
 800e3b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	4a21      	ldr	r2, [pc, #132]	; (800e440 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e3bc:	4293      	cmp	r3, r2
 800e3be:	d022      	beq.n	800e406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e3c8:	d01d      	beq.n	800e406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	4a1d      	ldr	r2, [pc, #116]	; (800e444 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e3d0:	4293      	cmp	r3, r2
 800e3d2:	d018      	beq.n	800e406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	4a1b      	ldr	r2, [pc, #108]	; (800e448 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e3da:	4293      	cmp	r3, r2
 800e3dc:	d013      	beq.n	800e406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	4a1a      	ldr	r2, [pc, #104]	; (800e44c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e3e4:	4293      	cmp	r3, r2
 800e3e6:	d00e      	beq.n	800e406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	4a18      	ldr	r2, [pc, #96]	; (800e450 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e3ee:	4293      	cmp	r3, r2
 800e3f0:	d009      	beq.n	800e406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	4a17      	ldr	r2, [pc, #92]	; (800e454 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e3f8:	4293      	cmp	r3, r2
 800e3fa:	d004      	beq.n	800e406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	4a15      	ldr	r2, [pc, #84]	; (800e458 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e402:	4293      	cmp	r3, r2
 800e404:	d10c      	bne.n	800e420 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e40c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	685b      	ldr	r3, [r3, #4]
 800e412:	68ba      	ldr	r2, [r7, #8]
 800e414:	4313      	orrs	r3, r2
 800e416:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	68ba      	ldr	r2, [r7, #8]
 800e41e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2201      	movs	r2, #1
 800e424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2200      	movs	r2, #0
 800e42c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e430:	2300      	movs	r3, #0
}
 800e432:	4618      	mov	r0, r3
 800e434:	3714      	adds	r7, #20
 800e436:	46bd      	mov	sp, r7
 800e438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43c:	4770      	bx	lr
 800e43e:	bf00      	nop
 800e440:	40010000 	.word	0x40010000
 800e444:	40000400 	.word	0x40000400
 800e448:	40000800 	.word	0x40000800
 800e44c:	40000c00 	.word	0x40000c00
 800e450:	40010400 	.word	0x40010400
 800e454:	40014000 	.word	0x40014000
 800e458:	40001800 	.word	0x40001800

0800e45c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e45c:	b480      	push	{r7}
 800e45e:	b083      	sub	sp, #12
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e464:	bf00      	nop
 800e466:	370c      	adds	r7, #12
 800e468:	46bd      	mov	sp, r7
 800e46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46e:	4770      	bx	lr

0800e470 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e470:	b480      	push	{r7}
 800e472:	b083      	sub	sp, #12
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e478:	bf00      	nop
 800e47a:	370c      	adds	r7, #12
 800e47c:	46bd      	mov	sp, r7
 800e47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e482:	4770      	bx	lr

0800e484 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b082      	sub	sp, #8
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d101      	bne.n	800e496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e492:	2301      	movs	r3, #1
 800e494:	e03f      	b.n	800e516 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e49c:	b2db      	uxtb	r3, r3
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d106      	bne.n	800e4b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f7fc fdec 	bl	800b088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2224      	movs	r2, #36	; 0x24
 800e4b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	68da      	ldr	r2, [r3, #12]
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e4c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f000 fb6b 	bl	800eba4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	691a      	ldr	r2, [r3, #16]
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e4dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	695a      	ldr	r2, [r3, #20]
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e4ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	68da      	ldr	r2, [r3, #12]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e4fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2200      	movs	r2, #0
 800e502:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2220      	movs	r2, #32
 800e508:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2220      	movs	r2, #32
 800e510:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800e514:	2300      	movs	r3, #0
}
 800e516:	4618      	mov	r0, r3
 800e518:	3708      	adds	r7, #8
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
	...

0800e520 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b086      	sub	sp, #24
 800e524:	af00      	add	r7, sp, #0
 800e526:	60f8      	str	r0, [r7, #12]
 800e528:	60b9      	str	r1, [r7, #8]
 800e52a:	4613      	mov	r3, r2
 800e52c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e534:	b2db      	uxtb	r3, r3
 800e536:	2b20      	cmp	r3, #32
 800e538:	d153      	bne.n	800e5e2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d002      	beq.n	800e546 <HAL_UART_Transmit_DMA+0x26>
 800e540:	88fb      	ldrh	r3, [r7, #6]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d101      	bne.n	800e54a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800e546:	2301      	movs	r3, #1
 800e548:	e04c      	b.n	800e5e4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e550:	2b01      	cmp	r3, #1
 800e552:	d101      	bne.n	800e558 <HAL_UART_Transmit_DMA+0x38>
 800e554:	2302      	movs	r3, #2
 800e556:	e045      	b.n	800e5e4 <HAL_UART_Transmit_DMA+0xc4>
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	2201      	movs	r2, #1
 800e55c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800e560:	68ba      	ldr	r2, [r7, #8]
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	88fa      	ldrh	r2, [r7, #6]
 800e56a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	88fa      	ldrh	r2, [r7, #6]
 800e570:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2200      	movs	r2, #0
 800e576:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	2221      	movs	r2, #33	; 0x21
 800e57c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e584:	4a19      	ldr	r2, [pc, #100]	; (800e5ec <HAL_UART_Transmit_DMA+0xcc>)
 800e586:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e58c:	4a18      	ldr	r2, [pc, #96]	; (800e5f0 <HAL_UART_Transmit_DMA+0xd0>)
 800e58e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e594:	4a17      	ldr	r2, [pc, #92]	; (800e5f4 <HAL_UART_Transmit_DMA+0xd4>)
 800e596:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e59c:	2200      	movs	r2, #0
 800e59e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800e5a0:	f107 0308 	add.w	r3, r7, #8
 800e5a4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e5aa:	697b      	ldr	r3, [r7, #20]
 800e5ac:	6819      	ldr	r1, [r3, #0]
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	3304      	adds	r3, #4
 800e5b4:	461a      	mov	r2, r3
 800e5b6:	88fb      	ldrh	r3, [r7, #6]
 800e5b8:	f7fd f82e 	bl	800b618 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e5c4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	695a      	ldr	r2, [r3, #20]
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e5dc:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	e000      	b.n	800e5e4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800e5e2:	2302      	movs	r3, #2
  }
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3718      	adds	r7, #24
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}
 800e5ec:	0800e835 	.word	0x0800e835
 800e5f0:	0800e887 	.word	0x0800e887
 800e5f4:	0800e8a3 	.word	0x0800e8a3

0800e5f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b088      	sub	sp, #32
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	68db      	ldr	r3, [r3, #12]
 800e60e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	695b      	ldr	r3, [r3, #20]
 800e616:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800e618:	2300      	movs	r3, #0
 800e61a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800e61c:	2300      	movs	r3, #0
 800e61e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e620:	69fb      	ldr	r3, [r7, #28]
 800e622:	f003 030f 	and.w	r3, r3, #15
 800e626:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d10d      	bne.n	800e64a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e62e:	69fb      	ldr	r3, [r7, #28]
 800e630:	f003 0320 	and.w	r3, r3, #32
 800e634:	2b00      	cmp	r3, #0
 800e636:	d008      	beq.n	800e64a <HAL_UART_IRQHandler+0x52>
 800e638:	69bb      	ldr	r3, [r7, #24]
 800e63a:	f003 0320 	and.w	r3, r3, #32
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d003      	beq.n	800e64a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f000 fa2d 	bl	800eaa2 <UART_Receive_IT>
      return;
 800e648:	e0d1      	b.n	800e7ee <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e64a:	693b      	ldr	r3, [r7, #16]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	f000 80b0 	beq.w	800e7b2 <HAL_UART_IRQHandler+0x1ba>
 800e652:	697b      	ldr	r3, [r7, #20]
 800e654:	f003 0301 	and.w	r3, r3, #1
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d105      	bne.n	800e668 <HAL_UART_IRQHandler+0x70>
 800e65c:	69bb      	ldr	r3, [r7, #24]
 800e65e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e662:	2b00      	cmp	r3, #0
 800e664:	f000 80a5 	beq.w	800e7b2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e668:	69fb      	ldr	r3, [r7, #28]
 800e66a:	f003 0301 	and.w	r3, r3, #1
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d00a      	beq.n	800e688 <HAL_UART_IRQHandler+0x90>
 800e672:	69bb      	ldr	r3, [r7, #24]
 800e674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d005      	beq.n	800e688 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e680:	f043 0201 	orr.w	r2, r3, #1
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e688:	69fb      	ldr	r3, [r7, #28]
 800e68a:	f003 0304 	and.w	r3, r3, #4
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d00a      	beq.n	800e6a8 <HAL_UART_IRQHandler+0xb0>
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	f003 0301 	and.w	r3, r3, #1
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d005      	beq.n	800e6a8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6a0:	f043 0202 	orr.w	r2, r3, #2
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e6a8:	69fb      	ldr	r3, [r7, #28]
 800e6aa:	f003 0302 	and.w	r3, r3, #2
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d00a      	beq.n	800e6c8 <HAL_UART_IRQHandler+0xd0>
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	f003 0301 	and.w	r3, r3, #1
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d005      	beq.n	800e6c8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6c0:	f043 0204 	orr.w	r2, r3, #4
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800e6c8:	69fb      	ldr	r3, [r7, #28]
 800e6ca:	f003 0308 	and.w	r3, r3, #8
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d00f      	beq.n	800e6f2 <HAL_UART_IRQHandler+0xfa>
 800e6d2:	69bb      	ldr	r3, [r7, #24]
 800e6d4:	f003 0320 	and.w	r3, r3, #32
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d104      	bne.n	800e6e6 <HAL_UART_IRQHandler+0xee>
 800e6dc:	697b      	ldr	r3, [r7, #20]
 800e6de:	f003 0301 	and.w	r3, r3, #1
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d005      	beq.n	800e6f2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6ea:	f043 0208 	orr.w	r2, r3, #8
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d078      	beq.n	800e7ec <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e6fa:	69fb      	ldr	r3, [r7, #28]
 800e6fc:	f003 0320 	and.w	r3, r3, #32
 800e700:	2b00      	cmp	r3, #0
 800e702:	d007      	beq.n	800e714 <HAL_UART_IRQHandler+0x11c>
 800e704:	69bb      	ldr	r3, [r7, #24]
 800e706:	f003 0320 	and.w	r3, r3, #32
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d002      	beq.n	800e714 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f000 f9c7 	bl	800eaa2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	695b      	ldr	r3, [r3, #20]
 800e71a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e71e:	2b40      	cmp	r3, #64	; 0x40
 800e720:	bf0c      	ite	eq
 800e722:	2301      	moveq	r3, #1
 800e724:	2300      	movne	r3, #0
 800e726:	b2db      	uxtb	r3, r3
 800e728:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e72e:	f003 0308 	and.w	r3, r3, #8
 800e732:	2b00      	cmp	r3, #0
 800e734:	d102      	bne.n	800e73c <HAL_UART_IRQHandler+0x144>
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d031      	beq.n	800e7a0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f000 f910 	bl	800e962 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	695b      	ldr	r3, [r3, #20]
 800e748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e74c:	2b40      	cmp	r3, #64	; 0x40
 800e74e:	d123      	bne.n	800e798 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	695a      	ldr	r2, [r3, #20]
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e75e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e764:	2b00      	cmp	r3, #0
 800e766:	d013      	beq.n	800e790 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e76c:	4a21      	ldr	r2, [pc, #132]	; (800e7f4 <HAL_UART_IRQHandler+0x1fc>)
 800e76e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e774:	4618      	mov	r0, r3
 800e776:	f7fc ffa7 	bl	800b6c8 <HAL_DMA_Abort_IT>
 800e77a:	4603      	mov	r3, r0
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d016      	beq.n	800e7ae <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e786:	687a      	ldr	r2, [r7, #4]
 800e788:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e78a:	4610      	mov	r0, r2
 800e78c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e78e:	e00e      	b.n	800e7ae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f000 f845 	bl	800e820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e796:	e00a      	b.n	800e7ae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f000 f841 	bl	800e820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e79e:	e006      	b.n	800e7ae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f000 f83d 	bl	800e820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800e7ac:	e01e      	b.n	800e7ec <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7ae:	bf00      	nop
    return;
 800e7b0:	e01c      	b.n	800e7ec <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e7b2:	69fb      	ldr	r3, [r7, #28]
 800e7b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d008      	beq.n	800e7ce <HAL_UART_IRQHandler+0x1d6>
 800e7bc:	69bb      	ldr	r3, [r7, #24]
 800e7be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d003      	beq.n	800e7ce <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f000 f8fd 	bl	800e9c6 <UART_Transmit_IT>
    return;
 800e7cc:	e00f      	b.n	800e7ee <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e7ce:	69fb      	ldr	r3, [r7, #28]
 800e7d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d00a      	beq.n	800e7ee <HAL_UART_IRQHandler+0x1f6>
 800e7d8:	69bb      	ldr	r3, [r7, #24]
 800e7da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d005      	beq.n	800e7ee <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f000 f945 	bl	800ea72 <UART_EndTransmit_IT>
    return;
 800e7e8:	bf00      	nop
 800e7ea:	e000      	b.n	800e7ee <HAL_UART_IRQHandler+0x1f6>
    return;
 800e7ec:	bf00      	nop
  }
}
 800e7ee:	3720      	adds	r7, #32
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	0800e99f 	.word	0x0800e99f

0800e7f8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b083      	sub	sp, #12
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800e800:	bf00      	nop
 800e802:	370c      	adds	r7, #12
 800e804:	46bd      	mov	sp, r7
 800e806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80a:	4770      	bx	lr

0800e80c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e80c:	b480      	push	{r7}
 800e80e:	b083      	sub	sp, #12
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800e814:	bf00      	nop
 800e816:	370c      	adds	r7, #12
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr

0800e820 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e820:	b480      	push	{r7}
 800e822:	b083      	sub	sp, #12
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e828:	bf00      	nop
 800e82a:	370c      	adds	r7, #12
 800e82c:	46bd      	mov	sp, r7
 800e82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e832:	4770      	bx	lr

0800e834 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b084      	sub	sp, #16
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e840:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d113      	bne.n	800e878 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	2200      	movs	r2, #0
 800e854:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	695a      	ldr	r2, [r3, #20]
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e864:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	68da      	ldr	r2, [r3, #12]
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e874:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e876:	e002      	b.n	800e87e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800e878:	68f8      	ldr	r0, [r7, #12]
 800e87a:	f7fc fc87 	bl	800b18c <HAL_UART_TxCpltCallback>
}
 800e87e:	bf00      	nop
 800e880:	3710      	adds	r7, #16
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}

0800e886 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e886:	b580      	push	{r7, lr}
 800e888:	b084      	sub	sp, #16
 800e88a:	af00      	add	r7, sp, #0
 800e88c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e892:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e894:	68f8      	ldr	r0, [r7, #12]
 800e896:	f7ff ffaf 	bl	800e7f8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e89a:	bf00      	nop
 800e89c:	3710      	adds	r7, #16
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}

0800e8a2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e8a2:	b580      	push	{r7, lr}
 800e8a4:	b084      	sub	sp, #16
 800e8a6:	af00      	add	r7, sp, #0
 800e8a8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8b2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	695b      	ldr	r3, [r3, #20]
 800e8ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8be:	2b80      	cmp	r3, #128	; 0x80
 800e8c0:	bf0c      	ite	eq
 800e8c2:	2301      	moveq	r3, #1
 800e8c4:	2300      	movne	r3, #0
 800e8c6:	b2db      	uxtb	r3, r3
 800e8c8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e8d0:	b2db      	uxtb	r3, r3
 800e8d2:	2b21      	cmp	r3, #33	; 0x21
 800e8d4:	d108      	bne.n	800e8e8 <UART_DMAError+0x46>
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d005      	beq.n	800e8e8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	2200      	movs	r2, #0
 800e8e0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800e8e2:	68b8      	ldr	r0, [r7, #8]
 800e8e4:	f000 f827 	bl	800e936 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	695b      	ldr	r3, [r3, #20]
 800e8ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8f2:	2b40      	cmp	r3, #64	; 0x40
 800e8f4:	bf0c      	ite	eq
 800e8f6:	2301      	moveq	r3, #1
 800e8f8:	2300      	movne	r3, #0
 800e8fa:	b2db      	uxtb	r3, r3
 800e8fc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e904:	b2db      	uxtb	r3, r3
 800e906:	2b22      	cmp	r3, #34	; 0x22
 800e908:	d108      	bne.n	800e91c <UART_DMAError+0x7a>
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d005      	beq.n	800e91c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	2200      	movs	r2, #0
 800e914:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800e916:	68b8      	ldr	r0, [r7, #8]
 800e918:	f000 f823 	bl	800e962 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e920:	f043 0210 	orr.w	r2, r3, #16
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e928:	68b8      	ldr	r0, [r7, #8]
 800e92a:	f7ff ff79 	bl	800e820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e92e:	bf00      	nop
 800e930:	3710      	adds	r7, #16
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}

0800e936 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e936:	b480      	push	{r7}
 800e938:	b083      	sub	sp, #12
 800e93a:	af00      	add	r7, sp, #0
 800e93c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	68da      	ldr	r2, [r3, #12]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e94c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2220      	movs	r2, #32
 800e952:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800e956:	bf00      	nop
 800e958:	370c      	adds	r7, #12
 800e95a:	46bd      	mov	sp, r7
 800e95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e960:	4770      	bx	lr

0800e962 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e962:	b480      	push	{r7}
 800e964:	b083      	sub	sp, #12
 800e966:	af00      	add	r7, sp, #0
 800e968:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	68da      	ldr	r2, [r3, #12]
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e978:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	695a      	ldr	r2, [r3, #20]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	f022 0201 	bic.w	r2, r2, #1
 800e988:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2220      	movs	r2, #32
 800e98e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800e992:	bf00      	nop
 800e994:	370c      	adds	r7, #12
 800e996:	46bd      	mov	sp, r7
 800e998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99c:	4770      	bx	lr

0800e99e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e99e:	b580      	push	{r7, lr}
 800e9a0:	b084      	sub	sp, #16
 800e9a2:	af00      	add	r7, sp, #0
 800e9a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e9b8:	68f8      	ldr	r0, [r7, #12]
 800e9ba:	f7ff ff31 	bl	800e820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e9be:	bf00      	nop
 800e9c0:	3710      	adds	r7, #16
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}

0800e9c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e9c6:	b480      	push	{r7}
 800e9c8:	b085      	sub	sp, #20
 800e9ca:	af00      	add	r7, sp, #0
 800e9cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e9d4:	b2db      	uxtb	r3, r3
 800e9d6:	2b21      	cmp	r3, #33	; 0x21
 800e9d8:	d144      	bne.n	800ea64 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	689b      	ldr	r3, [r3, #8]
 800e9de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e9e2:	d11a      	bne.n	800ea1a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6a1b      	ldr	r3, [r3, #32]
 800e9e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	881b      	ldrh	r3, [r3, #0]
 800e9ee:	461a      	mov	r2, r3
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e9f8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	691b      	ldr	r3, [r3, #16]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d105      	bne.n	800ea0e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6a1b      	ldr	r3, [r3, #32]
 800ea06:	1c9a      	adds	r2, r3, #2
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	621a      	str	r2, [r3, #32]
 800ea0c:	e00e      	b.n	800ea2c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6a1b      	ldr	r3, [r3, #32]
 800ea12:	1c5a      	adds	r2, r3, #1
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	621a      	str	r2, [r3, #32]
 800ea18:	e008      	b.n	800ea2c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6a1b      	ldr	r3, [r3, #32]
 800ea1e:	1c59      	adds	r1, r3, #1
 800ea20:	687a      	ldr	r2, [r7, #4]
 800ea22:	6211      	str	r1, [r2, #32]
 800ea24:	781a      	ldrb	r2, [r3, #0]
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ea30:	b29b      	uxth	r3, r3
 800ea32:	3b01      	subs	r3, #1
 800ea34:	b29b      	uxth	r3, r3
 800ea36:	687a      	ldr	r2, [r7, #4]
 800ea38:	4619      	mov	r1, r3
 800ea3a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d10f      	bne.n	800ea60 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	68da      	ldr	r2, [r3, #12]
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ea4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	68da      	ldr	r2, [r3, #12]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ea60:	2300      	movs	r3, #0
 800ea62:	e000      	b.n	800ea66 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ea64:	2302      	movs	r3, #2
  }
}
 800ea66:	4618      	mov	r0, r3
 800ea68:	3714      	adds	r7, #20
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea70:	4770      	bx	lr

0800ea72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ea72:	b580      	push	{r7, lr}
 800ea74:	b082      	sub	sp, #8
 800ea76:	af00      	add	r7, sp, #0
 800ea78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	68da      	ldr	r2, [r3, #12]
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2220      	movs	r2, #32
 800ea8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f7fc fb7a 	bl	800b18c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ea98:	2300      	movs	r3, #0
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3708      	adds	r7, #8
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}

0800eaa2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800eaa2:	b580      	push	{r7, lr}
 800eaa4:	b084      	sub	sp, #16
 800eaa6:	af00      	add	r7, sp, #0
 800eaa8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800eab0:	b2db      	uxtb	r3, r3
 800eab2:	2b22      	cmp	r3, #34	; 0x22
 800eab4:	d171      	bne.n	800eb9a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	689b      	ldr	r3, [r3, #8]
 800eaba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eabe:	d123      	bne.n	800eb08 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eac4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	691b      	ldr	r3, [r3, #16]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d10e      	bne.n	800eaec <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	685b      	ldr	r3, [r3, #4]
 800ead4:	b29b      	uxth	r3, r3
 800ead6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eada:	b29a      	uxth	r2, r3
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eae4:	1c9a      	adds	r2, r3, #2
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	629a      	str	r2, [r3, #40]	; 0x28
 800eaea:	e029      	b.n	800eb40 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	685b      	ldr	r3, [r3, #4]
 800eaf2:	b29b      	uxth	r3, r3
 800eaf4:	b2db      	uxtb	r3, r3
 800eaf6:	b29a      	uxth	r2, r3
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb00:	1c5a      	adds	r2, r3, #1
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	629a      	str	r2, [r3, #40]	; 0x28
 800eb06:	e01b      	b.n	800eb40 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	691b      	ldr	r3, [r3, #16]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d10a      	bne.n	800eb26 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	6858      	ldr	r0, [r3, #4]
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb1a:	1c59      	adds	r1, r3, #1
 800eb1c:	687a      	ldr	r2, [r7, #4]
 800eb1e:	6291      	str	r1, [r2, #40]	; 0x28
 800eb20:	b2c2      	uxtb	r2, r0
 800eb22:	701a      	strb	r2, [r3, #0]
 800eb24:	e00c      	b.n	800eb40 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	685b      	ldr	r3, [r3, #4]
 800eb2c:	b2da      	uxtb	r2, r3
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb32:	1c58      	adds	r0, r3, #1
 800eb34:	6879      	ldr	r1, [r7, #4]
 800eb36:	6288      	str	r0, [r1, #40]	; 0x28
 800eb38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800eb3c:	b2d2      	uxtb	r2, r2
 800eb3e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800eb44:	b29b      	uxth	r3, r3
 800eb46:	3b01      	subs	r3, #1
 800eb48:	b29b      	uxth	r3, r3
 800eb4a:	687a      	ldr	r2, [r7, #4]
 800eb4c:	4619      	mov	r1, r3
 800eb4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d120      	bne.n	800eb96 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	68da      	ldr	r2, [r3, #12]
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	f022 0220 	bic.w	r2, r2, #32
 800eb62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	68da      	ldr	r2, [r3, #12]
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800eb72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	695a      	ldr	r2, [r3, #20]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	f022 0201 	bic.w	r2, r2, #1
 800eb82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2220      	movs	r2, #32
 800eb88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f7ff fe3d 	bl	800e80c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800eb92:	2300      	movs	r3, #0
 800eb94:	e002      	b.n	800eb9c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800eb96:	2300      	movs	r3, #0
 800eb98:	e000      	b.n	800eb9c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800eb9a:	2302      	movs	r3, #2
  }
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3710      	adds	r7, #16
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}

0800eba4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eba8:	b085      	sub	sp, #20
 800ebaa:	af00      	add	r7, sp, #0
 800ebac:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	691b      	ldr	r3, [r3, #16]
 800ebb4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	68da      	ldr	r2, [r3, #12]
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	430a      	orrs	r2, r1
 800ebc2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	689a      	ldr	r2, [r3, #8]
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	691b      	ldr	r3, [r3, #16]
 800ebcc:	431a      	orrs	r2, r3
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	695b      	ldr	r3, [r3, #20]
 800ebd2:	431a      	orrs	r2, r3
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	69db      	ldr	r3, [r3, #28]
 800ebd8:	4313      	orrs	r3, r2
 800ebda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	68db      	ldr	r3, [r3, #12]
 800ebe2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ebe6:	f023 030c 	bic.w	r3, r3, #12
 800ebea:	687a      	ldr	r2, [r7, #4]
 800ebec:	6812      	ldr	r2, [r2, #0]
 800ebee:	68f9      	ldr	r1, [r7, #12]
 800ebf0:	430b      	orrs	r3, r1
 800ebf2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	695b      	ldr	r3, [r3, #20]
 800ebfa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	699a      	ldr	r2, [r3, #24]
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	430a      	orrs	r2, r1
 800ec08:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	69db      	ldr	r3, [r3, #28]
 800ec0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec12:	f040 818b 	bne.w	800ef2c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	4ac1      	ldr	r2, [pc, #772]	; (800ef20 <UART_SetConfig+0x37c>)
 800ec1c:	4293      	cmp	r3, r2
 800ec1e:	d005      	beq.n	800ec2c <UART_SetConfig+0x88>
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	4abf      	ldr	r2, [pc, #764]	; (800ef24 <UART_SetConfig+0x380>)
 800ec26:	4293      	cmp	r3, r2
 800ec28:	f040 80bd 	bne.w	800eda6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ec2c:	f7fe ffc0 	bl	800dbb0 <HAL_RCC_GetPCLK2Freq>
 800ec30:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	461d      	mov	r5, r3
 800ec36:	f04f 0600 	mov.w	r6, #0
 800ec3a:	46a8      	mov	r8, r5
 800ec3c:	46b1      	mov	r9, r6
 800ec3e:	eb18 0308 	adds.w	r3, r8, r8
 800ec42:	eb49 0409 	adc.w	r4, r9, r9
 800ec46:	4698      	mov	r8, r3
 800ec48:	46a1      	mov	r9, r4
 800ec4a:	eb18 0805 	adds.w	r8, r8, r5
 800ec4e:	eb49 0906 	adc.w	r9, r9, r6
 800ec52:	f04f 0100 	mov.w	r1, #0
 800ec56:	f04f 0200 	mov.w	r2, #0
 800ec5a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ec5e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ec62:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ec66:	4688      	mov	r8, r1
 800ec68:	4691      	mov	r9, r2
 800ec6a:	eb18 0005 	adds.w	r0, r8, r5
 800ec6e:	eb49 0106 	adc.w	r1, r9, r6
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	685b      	ldr	r3, [r3, #4]
 800ec76:	461d      	mov	r5, r3
 800ec78:	f04f 0600 	mov.w	r6, #0
 800ec7c:	196b      	adds	r3, r5, r5
 800ec7e:	eb46 0406 	adc.w	r4, r6, r6
 800ec82:	461a      	mov	r2, r3
 800ec84:	4623      	mov	r3, r4
 800ec86:	f7f1 ffff 	bl	8000c88 <__aeabi_uldivmod>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	460c      	mov	r4, r1
 800ec8e:	461a      	mov	r2, r3
 800ec90:	4ba5      	ldr	r3, [pc, #660]	; (800ef28 <UART_SetConfig+0x384>)
 800ec92:	fba3 2302 	umull	r2, r3, r3, r2
 800ec96:	095b      	lsrs	r3, r3, #5
 800ec98:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	461d      	mov	r5, r3
 800eca0:	f04f 0600 	mov.w	r6, #0
 800eca4:	46a9      	mov	r9, r5
 800eca6:	46b2      	mov	sl, r6
 800eca8:	eb19 0309 	adds.w	r3, r9, r9
 800ecac:	eb4a 040a 	adc.w	r4, sl, sl
 800ecb0:	4699      	mov	r9, r3
 800ecb2:	46a2      	mov	sl, r4
 800ecb4:	eb19 0905 	adds.w	r9, r9, r5
 800ecb8:	eb4a 0a06 	adc.w	sl, sl, r6
 800ecbc:	f04f 0100 	mov.w	r1, #0
 800ecc0:	f04f 0200 	mov.w	r2, #0
 800ecc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ecc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800eccc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ecd0:	4689      	mov	r9, r1
 800ecd2:	4692      	mov	sl, r2
 800ecd4:	eb19 0005 	adds.w	r0, r9, r5
 800ecd8:	eb4a 0106 	adc.w	r1, sl, r6
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	685b      	ldr	r3, [r3, #4]
 800ece0:	461d      	mov	r5, r3
 800ece2:	f04f 0600 	mov.w	r6, #0
 800ece6:	196b      	adds	r3, r5, r5
 800ece8:	eb46 0406 	adc.w	r4, r6, r6
 800ecec:	461a      	mov	r2, r3
 800ecee:	4623      	mov	r3, r4
 800ecf0:	f7f1 ffca 	bl	8000c88 <__aeabi_uldivmod>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	460c      	mov	r4, r1
 800ecf8:	461a      	mov	r2, r3
 800ecfa:	4b8b      	ldr	r3, [pc, #556]	; (800ef28 <UART_SetConfig+0x384>)
 800ecfc:	fba3 1302 	umull	r1, r3, r3, r2
 800ed00:	095b      	lsrs	r3, r3, #5
 800ed02:	2164      	movs	r1, #100	; 0x64
 800ed04:	fb01 f303 	mul.w	r3, r1, r3
 800ed08:	1ad3      	subs	r3, r2, r3
 800ed0a:	00db      	lsls	r3, r3, #3
 800ed0c:	3332      	adds	r3, #50	; 0x32
 800ed0e:	4a86      	ldr	r2, [pc, #536]	; (800ef28 <UART_SetConfig+0x384>)
 800ed10:	fba2 2303 	umull	r2, r3, r2, r3
 800ed14:	095b      	lsrs	r3, r3, #5
 800ed16:	005b      	lsls	r3, r3, #1
 800ed18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ed1c:	4498      	add	r8, r3
 800ed1e:	68bb      	ldr	r3, [r7, #8]
 800ed20:	461d      	mov	r5, r3
 800ed22:	f04f 0600 	mov.w	r6, #0
 800ed26:	46a9      	mov	r9, r5
 800ed28:	46b2      	mov	sl, r6
 800ed2a:	eb19 0309 	adds.w	r3, r9, r9
 800ed2e:	eb4a 040a 	adc.w	r4, sl, sl
 800ed32:	4699      	mov	r9, r3
 800ed34:	46a2      	mov	sl, r4
 800ed36:	eb19 0905 	adds.w	r9, r9, r5
 800ed3a:	eb4a 0a06 	adc.w	sl, sl, r6
 800ed3e:	f04f 0100 	mov.w	r1, #0
 800ed42:	f04f 0200 	mov.w	r2, #0
 800ed46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ed4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ed4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ed52:	4689      	mov	r9, r1
 800ed54:	4692      	mov	sl, r2
 800ed56:	eb19 0005 	adds.w	r0, r9, r5
 800ed5a:	eb4a 0106 	adc.w	r1, sl, r6
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	685b      	ldr	r3, [r3, #4]
 800ed62:	461d      	mov	r5, r3
 800ed64:	f04f 0600 	mov.w	r6, #0
 800ed68:	196b      	adds	r3, r5, r5
 800ed6a:	eb46 0406 	adc.w	r4, r6, r6
 800ed6e:	461a      	mov	r2, r3
 800ed70:	4623      	mov	r3, r4
 800ed72:	f7f1 ff89 	bl	8000c88 <__aeabi_uldivmod>
 800ed76:	4603      	mov	r3, r0
 800ed78:	460c      	mov	r4, r1
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	4b6a      	ldr	r3, [pc, #424]	; (800ef28 <UART_SetConfig+0x384>)
 800ed7e:	fba3 1302 	umull	r1, r3, r3, r2
 800ed82:	095b      	lsrs	r3, r3, #5
 800ed84:	2164      	movs	r1, #100	; 0x64
 800ed86:	fb01 f303 	mul.w	r3, r1, r3
 800ed8a:	1ad3      	subs	r3, r2, r3
 800ed8c:	00db      	lsls	r3, r3, #3
 800ed8e:	3332      	adds	r3, #50	; 0x32
 800ed90:	4a65      	ldr	r2, [pc, #404]	; (800ef28 <UART_SetConfig+0x384>)
 800ed92:	fba2 2303 	umull	r2, r3, r2, r3
 800ed96:	095b      	lsrs	r3, r3, #5
 800ed98:	f003 0207 	and.w	r2, r3, #7
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	4442      	add	r2, r8
 800eda2:	609a      	str	r2, [r3, #8]
 800eda4:	e26f      	b.n	800f286 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800eda6:	f7fe feef 	bl	800db88 <HAL_RCC_GetPCLK1Freq>
 800edaa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	461d      	mov	r5, r3
 800edb0:	f04f 0600 	mov.w	r6, #0
 800edb4:	46a8      	mov	r8, r5
 800edb6:	46b1      	mov	r9, r6
 800edb8:	eb18 0308 	adds.w	r3, r8, r8
 800edbc:	eb49 0409 	adc.w	r4, r9, r9
 800edc0:	4698      	mov	r8, r3
 800edc2:	46a1      	mov	r9, r4
 800edc4:	eb18 0805 	adds.w	r8, r8, r5
 800edc8:	eb49 0906 	adc.w	r9, r9, r6
 800edcc:	f04f 0100 	mov.w	r1, #0
 800edd0:	f04f 0200 	mov.w	r2, #0
 800edd4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800edd8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800eddc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ede0:	4688      	mov	r8, r1
 800ede2:	4691      	mov	r9, r2
 800ede4:	eb18 0005 	adds.w	r0, r8, r5
 800ede8:	eb49 0106 	adc.w	r1, r9, r6
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	461d      	mov	r5, r3
 800edf2:	f04f 0600 	mov.w	r6, #0
 800edf6:	196b      	adds	r3, r5, r5
 800edf8:	eb46 0406 	adc.w	r4, r6, r6
 800edfc:	461a      	mov	r2, r3
 800edfe:	4623      	mov	r3, r4
 800ee00:	f7f1 ff42 	bl	8000c88 <__aeabi_uldivmod>
 800ee04:	4603      	mov	r3, r0
 800ee06:	460c      	mov	r4, r1
 800ee08:	461a      	mov	r2, r3
 800ee0a:	4b47      	ldr	r3, [pc, #284]	; (800ef28 <UART_SetConfig+0x384>)
 800ee0c:	fba3 2302 	umull	r2, r3, r3, r2
 800ee10:	095b      	lsrs	r3, r3, #5
 800ee12:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ee16:	68bb      	ldr	r3, [r7, #8]
 800ee18:	461d      	mov	r5, r3
 800ee1a:	f04f 0600 	mov.w	r6, #0
 800ee1e:	46a9      	mov	r9, r5
 800ee20:	46b2      	mov	sl, r6
 800ee22:	eb19 0309 	adds.w	r3, r9, r9
 800ee26:	eb4a 040a 	adc.w	r4, sl, sl
 800ee2a:	4699      	mov	r9, r3
 800ee2c:	46a2      	mov	sl, r4
 800ee2e:	eb19 0905 	adds.w	r9, r9, r5
 800ee32:	eb4a 0a06 	adc.w	sl, sl, r6
 800ee36:	f04f 0100 	mov.w	r1, #0
 800ee3a:	f04f 0200 	mov.w	r2, #0
 800ee3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ee42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ee46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ee4a:	4689      	mov	r9, r1
 800ee4c:	4692      	mov	sl, r2
 800ee4e:	eb19 0005 	adds.w	r0, r9, r5
 800ee52:	eb4a 0106 	adc.w	r1, sl, r6
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	685b      	ldr	r3, [r3, #4]
 800ee5a:	461d      	mov	r5, r3
 800ee5c:	f04f 0600 	mov.w	r6, #0
 800ee60:	196b      	adds	r3, r5, r5
 800ee62:	eb46 0406 	adc.w	r4, r6, r6
 800ee66:	461a      	mov	r2, r3
 800ee68:	4623      	mov	r3, r4
 800ee6a:	f7f1 ff0d 	bl	8000c88 <__aeabi_uldivmod>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	460c      	mov	r4, r1
 800ee72:	461a      	mov	r2, r3
 800ee74:	4b2c      	ldr	r3, [pc, #176]	; (800ef28 <UART_SetConfig+0x384>)
 800ee76:	fba3 1302 	umull	r1, r3, r3, r2
 800ee7a:	095b      	lsrs	r3, r3, #5
 800ee7c:	2164      	movs	r1, #100	; 0x64
 800ee7e:	fb01 f303 	mul.w	r3, r1, r3
 800ee82:	1ad3      	subs	r3, r2, r3
 800ee84:	00db      	lsls	r3, r3, #3
 800ee86:	3332      	adds	r3, #50	; 0x32
 800ee88:	4a27      	ldr	r2, [pc, #156]	; (800ef28 <UART_SetConfig+0x384>)
 800ee8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ee8e:	095b      	lsrs	r3, r3, #5
 800ee90:	005b      	lsls	r3, r3, #1
 800ee92:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ee96:	4498      	add	r8, r3
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	461d      	mov	r5, r3
 800ee9c:	f04f 0600 	mov.w	r6, #0
 800eea0:	46a9      	mov	r9, r5
 800eea2:	46b2      	mov	sl, r6
 800eea4:	eb19 0309 	adds.w	r3, r9, r9
 800eea8:	eb4a 040a 	adc.w	r4, sl, sl
 800eeac:	4699      	mov	r9, r3
 800eeae:	46a2      	mov	sl, r4
 800eeb0:	eb19 0905 	adds.w	r9, r9, r5
 800eeb4:	eb4a 0a06 	adc.w	sl, sl, r6
 800eeb8:	f04f 0100 	mov.w	r1, #0
 800eebc:	f04f 0200 	mov.w	r2, #0
 800eec0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eec4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800eec8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800eecc:	4689      	mov	r9, r1
 800eece:	4692      	mov	sl, r2
 800eed0:	eb19 0005 	adds.w	r0, r9, r5
 800eed4:	eb4a 0106 	adc.w	r1, sl, r6
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	685b      	ldr	r3, [r3, #4]
 800eedc:	461d      	mov	r5, r3
 800eede:	f04f 0600 	mov.w	r6, #0
 800eee2:	196b      	adds	r3, r5, r5
 800eee4:	eb46 0406 	adc.w	r4, r6, r6
 800eee8:	461a      	mov	r2, r3
 800eeea:	4623      	mov	r3, r4
 800eeec:	f7f1 fecc 	bl	8000c88 <__aeabi_uldivmod>
 800eef0:	4603      	mov	r3, r0
 800eef2:	460c      	mov	r4, r1
 800eef4:	461a      	mov	r2, r3
 800eef6:	4b0c      	ldr	r3, [pc, #48]	; (800ef28 <UART_SetConfig+0x384>)
 800eef8:	fba3 1302 	umull	r1, r3, r3, r2
 800eefc:	095b      	lsrs	r3, r3, #5
 800eefe:	2164      	movs	r1, #100	; 0x64
 800ef00:	fb01 f303 	mul.w	r3, r1, r3
 800ef04:	1ad3      	subs	r3, r2, r3
 800ef06:	00db      	lsls	r3, r3, #3
 800ef08:	3332      	adds	r3, #50	; 0x32
 800ef0a:	4a07      	ldr	r2, [pc, #28]	; (800ef28 <UART_SetConfig+0x384>)
 800ef0c:	fba2 2303 	umull	r2, r3, r2, r3
 800ef10:	095b      	lsrs	r3, r3, #5
 800ef12:	f003 0207 	and.w	r2, r3, #7
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	4442      	add	r2, r8
 800ef1c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800ef1e:	e1b2      	b.n	800f286 <UART_SetConfig+0x6e2>
 800ef20:	40011000 	.word	0x40011000
 800ef24:	40011400 	.word	0x40011400
 800ef28:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	4ad7      	ldr	r2, [pc, #860]	; (800f290 <UART_SetConfig+0x6ec>)
 800ef32:	4293      	cmp	r3, r2
 800ef34:	d005      	beq.n	800ef42 <UART_SetConfig+0x39e>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	4ad6      	ldr	r2, [pc, #856]	; (800f294 <UART_SetConfig+0x6f0>)
 800ef3c:	4293      	cmp	r3, r2
 800ef3e:	f040 80d1 	bne.w	800f0e4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800ef42:	f7fe fe35 	bl	800dbb0 <HAL_RCC_GetPCLK2Freq>
 800ef46:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	469a      	mov	sl, r3
 800ef4c:	f04f 0b00 	mov.w	fp, #0
 800ef50:	46d0      	mov	r8, sl
 800ef52:	46d9      	mov	r9, fp
 800ef54:	eb18 0308 	adds.w	r3, r8, r8
 800ef58:	eb49 0409 	adc.w	r4, r9, r9
 800ef5c:	4698      	mov	r8, r3
 800ef5e:	46a1      	mov	r9, r4
 800ef60:	eb18 080a 	adds.w	r8, r8, sl
 800ef64:	eb49 090b 	adc.w	r9, r9, fp
 800ef68:	f04f 0100 	mov.w	r1, #0
 800ef6c:	f04f 0200 	mov.w	r2, #0
 800ef70:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ef74:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ef78:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ef7c:	4688      	mov	r8, r1
 800ef7e:	4691      	mov	r9, r2
 800ef80:	eb1a 0508 	adds.w	r5, sl, r8
 800ef84:	eb4b 0609 	adc.w	r6, fp, r9
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	685b      	ldr	r3, [r3, #4]
 800ef8c:	4619      	mov	r1, r3
 800ef8e:	f04f 0200 	mov.w	r2, #0
 800ef92:	f04f 0300 	mov.w	r3, #0
 800ef96:	f04f 0400 	mov.w	r4, #0
 800ef9a:	0094      	lsls	r4, r2, #2
 800ef9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800efa0:	008b      	lsls	r3, r1, #2
 800efa2:	461a      	mov	r2, r3
 800efa4:	4623      	mov	r3, r4
 800efa6:	4628      	mov	r0, r5
 800efa8:	4631      	mov	r1, r6
 800efaa:	f7f1 fe6d 	bl	8000c88 <__aeabi_uldivmod>
 800efae:	4603      	mov	r3, r0
 800efb0:	460c      	mov	r4, r1
 800efb2:	461a      	mov	r2, r3
 800efb4:	4bb8      	ldr	r3, [pc, #736]	; (800f298 <UART_SetConfig+0x6f4>)
 800efb6:	fba3 2302 	umull	r2, r3, r3, r2
 800efba:	095b      	lsrs	r3, r3, #5
 800efbc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	469b      	mov	fp, r3
 800efc4:	f04f 0c00 	mov.w	ip, #0
 800efc8:	46d9      	mov	r9, fp
 800efca:	46e2      	mov	sl, ip
 800efcc:	eb19 0309 	adds.w	r3, r9, r9
 800efd0:	eb4a 040a 	adc.w	r4, sl, sl
 800efd4:	4699      	mov	r9, r3
 800efd6:	46a2      	mov	sl, r4
 800efd8:	eb19 090b 	adds.w	r9, r9, fp
 800efdc:	eb4a 0a0c 	adc.w	sl, sl, ip
 800efe0:	f04f 0100 	mov.w	r1, #0
 800efe4:	f04f 0200 	mov.w	r2, #0
 800efe8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800efec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800eff0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800eff4:	4689      	mov	r9, r1
 800eff6:	4692      	mov	sl, r2
 800eff8:	eb1b 0509 	adds.w	r5, fp, r9
 800effc:	eb4c 060a 	adc.w	r6, ip, sl
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	685b      	ldr	r3, [r3, #4]
 800f004:	4619      	mov	r1, r3
 800f006:	f04f 0200 	mov.w	r2, #0
 800f00a:	f04f 0300 	mov.w	r3, #0
 800f00e:	f04f 0400 	mov.w	r4, #0
 800f012:	0094      	lsls	r4, r2, #2
 800f014:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f018:	008b      	lsls	r3, r1, #2
 800f01a:	461a      	mov	r2, r3
 800f01c:	4623      	mov	r3, r4
 800f01e:	4628      	mov	r0, r5
 800f020:	4631      	mov	r1, r6
 800f022:	f7f1 fe31 	bl	8000c88 <__aeabi_uldivmod>
 800f026:	4603      	mov	r3, r0
 800f028:	460c      	mov	r4, r1
 800f02a:	461a      	mov	r2, r3
 800f02c:	4b9a      	ldr	r3, [pc, #616]	; (800f298 <UART_SetConfig+0x6f4>)
 800f02e:	fba3 1302 	umull	r1, r3, r3, r2
 800f032:	095b      	lsrs	r3, r3, #5
 800f034:	2164      	movs	r1, #100	; 0x64
 800f036:	fb01 f303 	mul.w	r3, r1, r3
 800f03a:	1ad3      	subs	r3, r2, r3
 800f03c:	011b      	lsls	r3, r3, #4
 800f03e:	3332      	adds	r3, #50	; 0x32
 800f040:	4a95      	ldr	r2, [pc, #596]	; (800f298 <UART_SetConfig+0x6f4>)
 800f042:	fba2 2303 	umull	r2, r3, r2, r3
 800f046:	095b      	lsrs	r3, r3, #5
 800f048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f04c:	4498      	add	r8, r3
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	469b      	mov	fp, r3
 800f052:	f04f 0c00 	mov.w	ip, #0
 800f056:	46d9      	mov	r9, fp
 800f058:	46e2      	mov	sl, ip
 800f05a:	eb19 0309 	adds.w	r3, r9, r9
 800f05e:	eb4a 040a 	adc.w	r4, sl, sl
 800f062:	4699      	mov	r9, r3
 800f064:	46a2      	mov	sl, r4
 800f066:	eb19 090b 	adds.w	r9, r9, fp
 800f06a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f06e:	f04f 0100 	mov.w	r1, #0
 800f072:	f04f 0200 	mov.w	r2, #0
 800f076:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f07a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f07e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f082:	4689      	mov	r9, r1
 800f084:	4692      	mov	sl, r2
 800f086:	eb1b 0509 	adds.w	r5, fp, r9
 800f08a:	eb4c 060a 	adc.w	r6, ip, sl
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	685b      	ldr	r3, [r3, #4]
 800f092:	4619      	mov	r1, r3
 800f094:	f04f 0200 	mov.w	r2, #0
 800f098:	f04f 0300 	mov.w	r3, #0
 800f09c:	f04f 0400 	mov.w	r4, #0
 800f0a0:	0094      	lsls	r4, r2, #2
 800f0a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f0a6:	008b      	lsls	r3, r1, #2
 800f0a8:	461a      	mov	r2, r3
 800f0aa:	4623      	mov	r3, r4
 800f0ac:	4628      	mov	r0, r5
 800f0ae:	4631      	mov	r1, r6
 800f0b0:	f7f1 fdea 	bl	8000c88 <__aeabi_uldivmod>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	460c      	mov	r4, r1
 800f0b8:	461a      	mov	r2, r3
 800f0ba:	4b77      	ldr	r3, [pc, #476]	; (800f298 <UART_SetConfig+0x6f4>)
 800f0bc:	fba3 1302 	umull	r1, r3, r3, r2
 800f0c0:	095b      	lsrs	r3, r3, #5
 800f0c2:	2164      	movs	r1, #100	; 0x64
 800f0c4:	fb01 f303 	mul.w	r3, r1, r3
 800f0c8:	1ad3      	subs	r3, r2, r3
 800f0ca:	011b      	lsls	r3, r3, #4
 800f0cc:	3332      	adds	r3, #50	; 0x32
 800f0ce:	4a72      	ldr	r2, [pc, #456]	; (800f298 <UART_SetConfig+0x6f4>)
 800f0d0:	fba2 2303 	umull	r2, r3, r2, r3
 800f0d4:	095b      	lsrs	r3, r3, #5
 800f0d6:	f003 020f 	and.w	r2, r3, #15
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	4442      	add	r2, r8
 800f0e0:	609a      	str	r2, [r3, #8]
 800f0e2:	e0d0      	b.n	800f286 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800f0e4:	f7fe fd50 	bl	800db88 <HAL_RCC_GetPCLK1Freq>
 800f0e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	469a      	mov	sl, r3
 800f0ee:	f04f 0b00 	mov.w	fp, #0
 800f0f2:	46d0      	mov	r8, sl
 800f0f4:	46d9      	mov	r9, fp
 800f0f6:	eb18 0308 	adds.w	r3, r8, r8
 800f0fa:	eb49 0409 	adc.w	r4, r9, r9
 800f0fe:	4698      	mov	r8, r3
 800f100:	46a1      	mov	r9, r4
 800f102:	eb18 080a 	adds.w	r8, r8, sl
 800f106:	eb49 090b 	adc.w	r9, r9, fp
 800f10a:	f04f 0100 	mov.w	r1, #0
 800f10e:	f04f 0200 	mov.w	r2, #0
 800f112:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f116:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f11a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f11e:	4688      	mov	r8, r1
 800f120:	4691      	mov	r9, r2
 800f122:	eb1a 0508 	adds.w	r5, sl, r8
 800f126:	eb4b 0609 	adc.w	r6, fp, r9
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	685b      	ldr	r3, [r3, #4]
 800f12e:	4619      	mov	r1, r3
 800f130:	f04f 0200 	mov.w	r2, #0
 800f134:	f04f 0300 	mov.w	r3, #0
 800f138:	f04f 0400 	mov.w	r4, #0
 800f13c:	0094      	lsls	r4, r2, #2
 800f13e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f142:	008b      	lsls	r3, r1, #2
 800f144:	461a      	mov	r2, r3
 800f146:	4623      	mov	r3, r4
 800f148:	4628      	mov	r0, r5
 800f14a:	4631      	mov	r1, r6
 800f14c:	f7f1 fd9c 	bl	8000c88 <__aeabi_uldivmod>
 800f150:	4603      	mov	r3, r0
 800f152:	460c      	mov	r4, r1
 800f154:	461a      	mov	r2, r3
 800f156:	4b50      	ldr	r3, [pc, #320]	; (800f298 <UART_SetConfig+0x6f4>)
 800f158:	fba3 2302 	umull	r2, r3, r3, r2
 800f15c:	095b      	lsrs	r3, r3, #5
 800f15e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	469b      	mov	fp, r3
 800f166:	f04f 0c00 	mov.w	ip, #0
 800f16a:	46d9      	mov	r9, fp
 800f16c:	46e2      	mov	sl, ip
 800f16e:	eb19 0309 	adds.w	r3, r9, r9
 800f172:	eb4a 040a 	adc.w	r4, sl, sl
 800f176:	4699      	mov	r9, r3
 800f178:	46a2      	mov	sl, r4
 800f17a:	eb19 090b 	adds.w	r9, r9, fp
 800f17e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f182:	f04f 0100 	mov.w	r1, #0
 800f186:	f04f 0200 	mov.w	r2, #0
 800f18a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f18e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f192:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f196:	4689      	mov	r9, r1
 800f198:	4692      	mov	sl, r2
 800f19a:	eb1b 0509 	adds.w	r5, fp, r9
 800f19e:	eb4c 060a 	adc.w	r6, ip, sl
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	685b      	ldr	r3, [r3, #4]
 800f1a6:	4619      	mov	r1, r3
 800f1a8:	f04f 0200 	mov.w	r2, #0
 800f1ac:	f04f 0300 	mov.w	r3, #0
 800f1b0:	f04f 0400 	mov.w	r4, #0
 800f1b4:	0094      	lsls	r4, r2, #2
 800f1b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f1ba:	008b      	lsls	r3, r1, #2
 800f1bc:	461a      	mov	r2, r3
 800f1be:	4623      	mov	r3, r4
 800f1c0:	4628      	mov	r0, r5
 800f1c2:	4631      	mov	r1, r6
 800f1c4:	f7f1 fd60 	bl	8000c88 <__aeabi_uldivmod>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	460c      	mov	r4, r1
 800f1cc:	461a      	mov	r2, r3
 800f1ce:	4b32      	ldr	r3, [pc, #200]	; (800f298 <UART_SetConfig+0x6f4>)
 800f1d0:	fba3 1302 	umull	r1, r3, r3, r2
 800f1d4:	095b      	lsrs	r3, r3, #5
 800f1d6:	2164      	movs	r1, #100	; 0x64
 800f1d8:	fb01 f303 	mul.w	r3, r1, r3
 800f1dc:	1ad3      	subs	r3, r2, r3
 800f1de:	011b      	lsls	r3, r3, #4
 800f1e0:	3332      	adds	r3, #50	; 0x32
 800f1e2:	4a2d      	ldr	r2, [pc, #180]	; (800f298 <UART_SetConfig+0x6f4>)
 800f1e4:	fba2 2303 	umull	r2, r3, r2, r3
 800f1e8:	095b      	lsrs	r3, r3, #5
 800f1ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f1ee:	4498      	add	r8, r3
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	469b      	mov	fp, r3
 800f1f4:	f04f 0c00 	mov.w	ip, #0
 800f1f8:	46d9      	mov	r9, fp
 800f1fa:	46e2      	mov	sl, ip
 800f1fc:	eb19 0309 	adds.w	r3, r9, r9
 800f200:	eb4a 040a 	adc.w	r4, sl, sl
 800f204:	4699      	mov	r9, r3
 800f206:	46a2      	mov	sl, r4
 800f208:	eb19 090b 	adds.w	r9, r9, fp
 800f20c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f210:	f04f 0100 	mov.w	r1, #0
 800f214:	f04f 0200 	mov.w	r2, #0
 800f218:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f21c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f220:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f224:	4689      	mov	r9, r1
 800f226:	4692      	mov	sl, r2
 800f228:	eb1b 0509 	adds.w	r5, fp, r9
 800f22c:	eb4c 060a 	adc.w	r6, ip, sl
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	685b      	ldr	r3, [r3, #4]
 800f234:	4619      	mov	r1, r3
 800f236:	f04f 0200 	mov.w	r2, #0
 800f23a:	f04f 0300 	mov.w	r3, #0
 800f23e:	f04f 0400 	mov.w	r4, #0
 800f242:	0094      	lsls	r4, r2, #2
 800f244:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f248:	008b      	lsls	r3, r1, #2
 800f24a:	461a      	mov	r2, r3
 800f24c:	4623      	mov	r3, r4
 800f24e:	4628      	mov	r0, r5
 800f250:	4631      	mov	r1, r6
 800f252:	f7f1 fd19 	bl	8000c88 <__aeabi_uldivmod>
 800f256:	4603      	mov	r3, r0
 800f258:	460c      	mov	r4, r1
 800f25a:	461a      	mov	r2, r3
 800f25c:	4b0e      	ldr	r3, [pc, #56]	; (800f298 <UART_SetConfig+0x6f4>)
 800f25e:	fba3 1302 	umull	r1, r3, r3, r2
 800f262:	095b      	lsrs	r3, r3, #5
 800f264:	2164      	movs	r1, #100	; 0x64
 800f266:	fb01 f303 	mul.w	r3, r1, r3
 800f26a:	1ad3      	subs	r3, r2, r3
 800f26c:	011b      	lsls	r3, r3, #4
 800f26e:	3332      	adds	r3, #50	; 0x32
 800f270:	4a09      	ldr	r2, [pc, #36]	; (800f298 <UART_SetConfig+0x6f4>)
 800f272:	fba2 2303 	umull	r2, r3, r2, r3
 800f276:	095b      	lsrs	r3, r3, #5
 800f278:	f003 020f 	and.w	r2, r3, #15
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	4442      	add	r2, r8
 800f282:	609a      	str	r2, [r3, #8]
}
 800f284:	e7ff      	b.n	800f286 <UART_SetConfig+0x6e2>
 800f286:	bf00      	nop
 800f288:	3714      	adds	r7, #20
 800f28a:	46bd      	mov	sp, r7
 800f28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f290:	40011000 	.word	0x40011000
 800f294:	40011400 	.word	0x40011400
 800f298:	51eb851f 	.word	0x51eb851f

0800f29c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800f29c:	b480      	push	{r7}
 800f29e:	b085      	sub	sp, #20
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
 800f2a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	681a      	ldr	r2, [r3, #0]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2b4:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800f2b6:	68fa      	ldr	r2, [r7, #12]
 800f2b8:	4b20      	ldr	r3, [pc, #128]	; (800f33c <FSMC_NORSRAM_Init+0xa0>)
 800f2ba:	4013      	ands	r3, r2
 800f2bc:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f2c6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800f2cc:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800f2d2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800f2d8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800f2de:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800f2e4:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800f2ea:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800f2f0:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800f2f6:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800f2fc:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800f302:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800f308:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f30a:	68fa      	ldr	r2, [r7, #12]
 800f30c:	4313      	orrs	r3, r2
 800f30e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	689b      	ldr	r3, [r3, #8]
 800f314:	2b08      	cmp	r3, #8
 800f316:	d103      	bne.n	800f320 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f31e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	681a      	ldr	r2, [r3, #0]
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	68f9      	ldr	r1, [r7, #12]
 800f328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f32c:	2300      	movs	r3, #0
}
 800f32e:	4618      	mov	r0, r3
 800f330:	3714      	adds	r7, #20
 800f332:	46bd      	mov	sp, r7
 800f334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f338:	4770      	bx	lr
 800f33a:	bf00      	nop
 800f33c:	fff00080 	.word	0xfff00080

0800f340 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f340:	b480      	push	{r7}
 800f342:	b087      	sub	sp, #28
 800f344:	af00      	add	r7, sp, #0
 800f346:	60f8      	str	r0, [r7, #12]
 800f348:	60b9      	str	r1, [r7, #8]
 800f34a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800f34c:	2300      	movs	r3, #0
 800f34e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	1c5a      	adds	r2, r3, #1
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f35a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800f362:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	685b      	ldr	r3, [r3, #4]
 800f36c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f36e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	689b      	ldr	r3, [r3, #8]
 800f374:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f376:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	68db      	ldr	r3, [r3, #12]
 800f37c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800f37e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	691b      	ldr	r3, [r3, #16]
 800f384:	3b01      	subs	r3, #1
 800f386:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f388:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800f38a:	68bb      	ldr	r3, [r7, #8]
 800f38c:	695b      	ldr	r3, [r3, #20]
 800f38e:	3b02      	subs	r3, #2
 800f390:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f392:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f398:	4313      	orrs	r3, r2
 800f39a:	697a      	ldr	r2, [r7, #20]
 800f39c:	4313      	orrs	r3, r2
 800f39e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	1c5a      	adds	r2, r3, #1
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	6979      	ldr	r1, [r7, #20]
 800f3a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f3ac:	2300      	movs	r3, #0
}
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	371c      	adds	r7, #28
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b8:	4770      	bx	lr
	...

0800f3bc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800f3bc:	b480      	push	{r7}
 800f3be:	b087      	sub	sp, #28
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	60f8      	str	r0, [r7, #12]
 800f3c4:	60b9      	str	r1, [r7, #8]
 800f3c6:	607a      	str	r2, [r7, #4]
 800f3c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f3d4:	d122      	bne.n	800f41c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	687a      	ldr	r2, [r7, #4]
 800f3da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3de:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800f3e0:	697a      	ldr	r2, [r7, #20]
 800f3e2:	4b15      	ldr	r3, [pc, #84]	; (800f438 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800f3e4:	4013      	ands	r3, r2
 800f3e6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f3e8:	68bb      	ldr	r3, [r7, #8]
 800f3ea:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f3ec:	68bb      	ldr	r3, [r7, #8]
 800f3ee:	685b      	ldr	r3, [r3, #4]
 800f3f0:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f3f2:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	689b      	ldr	r3, [r3, #8]
 800f3f8:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f3fa:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f3fc:	68bb      	ldr	r3, [r7, #8]
 800f3fe:	68db      	ldr	r3, [r3, #12]
 800f400:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800f402:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800f404:	68bb      	ldr	r3, [r7, #8]
 800f406:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f408:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f40a:	697a      	ldr	r2, [r7, #20]
 800f40c:	4313      	orrs	r3, r2
 800f40e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	687a      	ldr	r2, [r7, #4]
 800f414:	6979      	ldr	r1, [r7, #20]
 800f416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f41a:	e005      	b.n	800f428 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	687a      	ldr	r2, [r7, #4]
 800f420:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800f428:	2300      	movs	r3, #0
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	371c      	adds	r7, #28
 800f42e:	46bd      	mov	sp, r7
 800f430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f434:	4770      	bx	lr
 800f436:	bf00      	nop
 800f438:	cff00000 	.word	0xcff00000

0800f43c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f43c:	b084      	sub	sp, #16
 800f43e:	b580      	push	{r7, lr}
 800f440:	b084      	sub	sp, #16
 800f442:	af00      	add	r7, sp, #0
 800f444:	6078      	str	r0, [r7, #4]
 800f446:	f107 001c 	add.w	r0, r7, #28
 800f44a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f450:	2b01      	cmp	r3, #1
 800f452:	d122      	bne.n	800f49a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f458:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	68db      	ldr	r3, [r3, #12]
 800f464:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800f468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f46c:	687a      	ldr	r2, [r7, #4]
 800f46e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	68db      	ldr	r3, [r3, #12]
 800f474:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f47c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f47e:	2b01      	cmp	r3, #1
 800f480:	d105      	bne.n	800f48e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	68db      	ldr	r3, [r3, #12]
 800f486:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800f48e:	6878      	ldr	r0, [r7, #4]
 800f490:	f001 fac6 	bl	8010a20 <USB_CoreReset>
 800f494:	4603      	mov	r3, r0
 800f496:	73fb      	strb	r3, [r7, #15]
 800f498:	e01a      	b.n	800f4d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	68db      	ldr	r3, [r3, #12]
 800f49e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f001 faba 	bl	8010a20 <USB_CoreReset>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f4b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d106      	bne.n	800f4c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	639a      	str	r2, [r3, #56]	; 0x38
 800f4c2:	e005      	b.n	800f4d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d2:	2b01      	cmp	r3, #1
 800f4d4:	d10b      	bne.n	800f4ee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	689b      	ldr	r3, [r3, #8]
 800f4da:	f043 0206 	orr.w	r2, r3, #6
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	689b      	ldr	r3, [r3, #8]
 800f4e6:	f043 0220 	orr.w	r2, r3, #32
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f4ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3710      	adds	r7, #16
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f4fa:	b004      	add	sp, #16
 800f4fc:	4770      	bx	lr
	...

0800f500 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f500:	b480      	push	{r7}
 800f502:	b087      	sub	sp, #28
 800f504:	af00      	add	r7, sp, #0
 800f506:	60f8      	str	r0, [r7, #12]
 800f508:	60b9      	str	r1, [r7, #8]
 800f50a:	4613      	mov	r3, r2
 800f50c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f50e:	79fb      	ldrb	r3, [r7, #7]
 800f510:	2b02      	cmp	r3, #2
 800f512:	d165      	bne.n	800f5e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	4a41      	ldr	r2, [pc, #260]	; (800f61c <USB_SetTurnaroundTime+0x11c>)
 800f518:	4293      	cmp	r3, r2
 800f51a:	d906      	bls.n	800f52a <USB_SetTurnaroundTime+0x2a>
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	4a40      	ldr	r2, [pc, #256]	; (800f620 <USB_SetTurnaroundTime+0x120>)
 800f520:	4293      	cmp	r3, r2
 800f522:	d802      	bhi.n	800f52a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f524:	230f      	movs	r3, #15
 800f526:	617b      	str	r3, [r7, #20]
 800f528:	e062      	b.n	800f5f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	4a3c      	ldr	r2, [pc, #240]	; (800f620 <USB_SetTurnaroundTime+0x120>)
 800f52e:	4293      	cmp	r3, r2
 800f530:	d906      	bls.n	800f540 <USB_SetTurnaroundTime+0x40>
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	4a3b      	ldr	r2, [pc, #236]	; (800f624 <USB_SetTurnaroundTime+0x124>)
 800f536:	4293      	cmp	r3, r2
 800f538:	d802      	bhi.n	800f540 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f53a:	230e      	movs	r3, #14
 800f53c:	617b      	str	r3, [r7, #20]
 800f53e:	e057      	b.n	800f5f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	4a38      	ldr	r2, [pc, #224]	; (800f624 <USB_SetTurnaroundTime+0x124>)
 800f544:	4293      	cmp	r3, r2
 800f546:	d906      	bls.n	800f556 <USB_SetTurnaroundTime+0x56>
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	4a37      	ldr	r2, [pc, #220]	; (800f628 <USB_SetTurnaroundTime+0x128>)
 800f54c:	4293      	cmp	r3, r2
 800f54e:	d802      	bhi.n	800f556 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f550:	230d      	movs	r3, #13
 800f552:	617b      	str	r3, [r7, #20]
 800f554:	e04c      	b.n	800f5f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	4a33      	ldr	r2, [pc, #204]	; (800f628 <USB_SetTurnaroundTime+0x128>)
 800f55a:	4293      	cmp	r3, r2
 800f55c:	d906      	bls.n	800f56c <USB_SetTurnaroundTime+0x6c>
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	4a32      	ldr	r2, [pc, #200]	; (800f62c <USB_SetTurnaroundTime+0x12c>)
 800f562:	4293      	cmp	r3, r2
 800f564:	d802      	bhi.n	800f56c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f566:	230c      	movs	r3, #12
 800f568:	617b      	str	r3, [r7, #20]
 800f56a:	e041      	b.n	800f5f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	4a2f      	ldr	r2, [pc, #188]	; (800f62c <USB_SetTurnaroundTime+0x12c>)
 800f570:	4293      	cmp	r3, r2
 800f572:	d906      	bls.n	800f582 <USB_SetTurnaroundTime+0x82>
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	4a2e      	ldr	r2, [pc, #184]	; (800f630 <USB_SetTurnaroundTime+0x130>)
 800f578:	4293      	cmp	r3, r2
 800f57a:	d802      	bhi.n	800f582 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f57c:	230b      	movs	r3, #11
 800f57e:	617b      	str	r3, [r7, #20]
 800f580:	e036      	b.n	800f5f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	4a2a      	ldr	r2, [pc, #168]	; (800f630 <USB_SetTurnaroundTime+0x130>)
 800f586:	4293      	cmp	r3, r2
 800f588:	d906      	bls.n	800f598 <USB_SetTurnaroundTime+0x98>
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	4a29      	ldr	r2, [pc, #164]	; (800f634 <USB_SetTurnaroundTime+0x134>)
 800f58e:	4293      	cmp	r3, r2
 800f590:	d802      	bhi.n	800f598 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f592:	230a      	movs	r3, #10
 800f594:	617b      	str	r3, [r7, #20]
 800f596:	e02b      	b.n	800f5f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f598:	68bb      	ldr	r3, [r7, #8]
 800f59a:	4a26      	ldr	r2, [pc, #152]	; (800f634 <USB_SetTurnaroundTime+0x134>)
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d906      	bls.n	800f5ae <USB_SetTurnaroundTime+0xae>
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	4a25      	ldr	r2, [pc, #148]	; (800f638 <USB_SetTurnaroundTime+0x138>)
 800f5a4:	4293      	cmp	r3, r2
 800f5a6:	d802      	bhi.n	800f5ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f5a8:	2309      	movs	r3, #9
 800f5aa:	617b      	str	r3, [r7, #20]
 800f5ac:	e020      	b.n	800f5f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	4a21      	ldr	r2, [pc, #132]	; (800f638 <USB_SetTurnaroundTime+0x138>)
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	d906      	bls.n	800f5c4 <USB_SetTurnaroundTime+0xc4>
 800f5b6:	68bb      	ldr	r3, [r7, #8]
 800f5b8:	4a20      	ldr	r2, [pc, #128]	; (800f63c <USB_SetTurnaroundTime+0x13c>)
 800f5ba:	4293      	cmp	r3, r2
 800f5bc:	d802      	bhi.n	800f5c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f5be:	2308      	movs	r3, #8
 800f5c0:	617b      	str	r3, [r7, #20]
 800f5c2:	e015      	b.n	800f5f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f5c4:	68bb      	ldr	r3, [r7, #8]
 800f5c6:	4a1d      	ldr	r2, [pc, #116]	; (800f63c <USB_SetTurnaroundTime+0x13c>)
 800f5c8:	4293      	cmp	r3, r2
 800f5ca:	d906      	bls.n	800f5da <USB_SetTurnaroundTime+0xda>
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	4a1c      	ldr	r2, [pc, #112]	; (800f640 <USB_SetTurnaroundTime+0x140>)
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d802      	bhi.n	800f5da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f5d4:	2307      	movs	r3, #7
 800f5d6:	617b      	str	r3, [r7, #20]
 800f5d8:	e00a      	b.n	800f5f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f5da:	2306      	movs	r3, #6
 800f5dc:	617b      	str	r3, [r7, #20]
 800f5de:	e007      	b.n	800f5f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f5e0:	79fb      	ldrb	r3, [r7, #7]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d102      	bne.n	800f5ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f5e6:	2309      	movs	r3, #9
 800f5e8:	617b      	str	r3, [r7, #20]
 800f5ea:	e001      	b.n	800f5f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f5ec:	2309      	movs	r3, #9
 800f5ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	68db      	ldr	r3, [r3, #12]
 800f5f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	68da      	ldr	r2, [r3, #12]
 800f600:	697b      	ldr	r3, [r7, #20]
 800f602:	029b      	lsls	r3, r3, #10
 800f604:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f608:	431a      	orrs	r2, r3
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f60e:	2300      	movs	r3, #0
}
 800f610:	4618      	mov	r0, r3
 800f612:	371c      	adds	r7, #28
 800f614:	46bd      	mov	sp, r7
 800f616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61a:	4770      	bx	lr
 800f61c:	00d8acbf 	.word	0x00d8acbf
 800f620:	00e4e1bf 	.word	0x00e4e1bf
 800f624:	00f423ff 	.word	0x00f423ff
 800f628:	0106737f 	.word	0x0106737f
 800f62c:	011a499f 	.word	0x011a499f
 800f630:	01312cff 	.word	0x01312cff
 800f634:	014ca43f 	.word	0x014ca43f
 800f638:	016e35ff 	.word	0x016e35ff
 800f63c:	01a6ab1f 	.word	0x01a6ab1f
 800f640:	01e847ff 	.word	0x01e847ff

0800f644 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f644:	b480      	push	{r7}
 800f646:	b083      	sub	sp, #12
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	689b      	ldr	r3, [r3, #8]
 800f650:	f043 0201 	orr.w	r2, r3, #1
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f658:	2300      	movs	r3, #0
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	370c      	adds	r7, #12
 800f65e:	46bd      	mov	sp, r7
 800f660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f664:	4770      	bx	lr

0800f666 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f666:	b480      	push	{r7}
 800f668:	b083      	sub	sp, #12
 800f66a:	af00      	add	r7, sp, #0
 800f66c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	689b      	ldr	r3, [r3, #8]
 800f672:	f023 0201 	bic.w	r2, r3, #1
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f67a:	2300      	movs	r3, #0
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	370c      	adds	r7, #12
 800f680:	46bd      	mov	sp, r7
 800f682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f686:	4770      	bx	lr

0800f688 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b082      	sub	sp, #8
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	460b      	mov	r3, r1
 800f692:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	68db      	ldr	r3, [r3, #12]
 800f698:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f6a0:	78fb      	ldrb	r3, [r7, #3]
 800f6a2:	2b01      	cmp	r3, #1
 800f6a4:	d106      	bne.n	800f6b4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	68db      	ldr	r3, [r3, #12]
 800f6aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	60da      	str	r2, [r3, #12]
 800f6b2:	e00b      	b.n	800f6cc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800f6b4:	78fb      	ldrb	r3, [r7, #3]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d106      	bne.n	800f6c8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	68db      	ldr	r3, [r3, #12]
 800f6be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	60da      	str	r2, [r3, #12]
 800f6c6:	e001      	b.n	800f6cc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800f6c8:	2301      	movs	r3, #1
 800f6ca:	e003      	b.n	800f6d4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800f6cc:	2032      	movs	r0, #50	; 0x32
 800f6ce:	f7fb fdf1 	bl	800b2b4 <HAL_Delay>

  return HAL_OK;
 800f6d2:	2300      	movs	r3, #0
}
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	3708      	adds	r7, #8
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	bd80      	pop	{r7, pc}

0800f6dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f6dc:	b084      	sub	sp, #16
 800f6de:	b580      	push	{r7, lr}
 800f6e0:	b086      	sub	sp, #24
 800f6e2:	af00      	add	r7, sp, #0
 800f6e4:	6078      	str	r0, [r7, #4]
 800f6e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f6ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	613b      	str	r3, [r7, #16]
 800f6fa:	e009      	b.n	800f710 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f6fc:	687a      	ldr	r2, [r7, #4]
 800f6fe:	693b      	ldr	r3, [r7, #16]
 800f700:	3340      	adds	r3, #64	; 0x40
 800f702:	009b      	lsls	r3, r3, #2
 800f704:	4413      	add	r3, r2
 800f706:	2200      	movs	r2, #0
 800f708:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f70a:	693b      	ldr	r3, [r7, #16]
 800f70c:	3301      	adds	r3, #1
 800f70e:	613b      	str	r3, [r7, #16]
 800f710:	693b      	ldr	r3, [r7, #16]
 800f712:	2b0e      	cmp	r3, #14
 800f714:	d9f2      	bls.n	800f6fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d11c      	bne.n	800f756 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f722:	685b      	ldr	r3, [r3, #4]
 800f724:	68fa      	ldr	r2, [r7, #12]
 800f726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f72a:	f043 0302 	orr.w	r3, r3, #2
 800f72e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f734:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f740:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f74c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	639a      	str	r2, [r3, #56]	; 0x38
 800f754:	e00b      	b.n	800f76e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f75a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f766:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f774:	461a      	mov	r2, r3
 800f776:	2300      	movs	r3, #0
 800f778:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f780:	4619      	mov	r1, r3
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f788:	461a      	mov	r2, r3
 800f78a:	680b      	ldr	r3, [r1, #0]
 800f78c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f790:	2b01      	cmp	r3, #1
 800f792:	d10c      	bne.n	800f7ae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f796:	2b00      	cmp	r3, #0
 800f798:	d104      	bne.n	800f7a4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f79a:	2100      	movs	r1, #0
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f000 f949 	bl	800fa34 <USB_SetDevSpeed>
 800f7a2:	e008      	b.n	800f7b6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f7a4:	2101      	movs	r1, #1
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f000 f944 	bl	800fa34 <USB_SetDevSpeed>
 800f7ac:	e003      	b.n	800f7b6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f7ae:	2103      	movs	r1, #3
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f000 f93f 	bl	800fa34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f7b6:	2110      	movs	r1, #16
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f000 f8f3 	bl	800f9a4 <USB_FlushTxFifo>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d001      	beq.n	800f7c8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800f7c4:	2301      	movs	r3, #1
 800f7c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f000 f911 	bl	800f9f0 <USB_FlushRxFifo>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d001      	beq.n	800f7d8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800f7d4:	2301      	movs	r3, #1
 800f7d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7de:	461a      	mov	r2, r3
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7ea:	461a      	mov	r2, r3
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7f6:	461a      	mov	r2, r3
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	613b      	str	r3, [r7, #16]
 800f800:	e043      	b.n	800f88a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f802:	693b      	ldr	r3, [r7, #16]
 800f804:	015a      	lsls	r2, r3, #5
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	4413      	add	r3, r2
 800f80a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f814:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f818:	d118      	bne.n	800f84c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800f81a:	693b      	ldr	r3, [r7, #16]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d10a      	bne.n	800f836 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f820:	693b      	ldr	r3, [r7, #16]
 800f822:	015a      	lsls	r2, r3, #5
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	4413      	add	r3, r2
 800f828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f82c:	461a      	mov	r2, r3
 800f82e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f832:	6013      	str	r3, [r2, #0]
 800f834:	e013      	b.n	800f85e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f836:	693b      	ldr	r3, [r7, #16]
 800f838:	015a      	lsls	r2, r3, #5
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	4413      	add	r3, r2
 800f83e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f842:	461a      	mov	r2, r3
 800f844:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f848:	6013      	str	r3, [r2, #0]
 800f84a:	e008      	b.n	800f85e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f84c:	693b      	ldr	r3, [r7, #16]
 800f84e:	015a      	lsls	r2, r3, #5
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	4413      	add	r3, r2
 800f854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f858:	461a      	mov	r2, r3
 800f85a:	2300      	movs	r3, #0
 800f85c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f85e:	693b      	ldr	r3, [r7, #16]
 800f860:	015a      	lsls	r2, r3, #5
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	4413      	add	r3, r2
 800f866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f86a:	461a      	mov	r2, r3
 800f86c:	2300      	movs	r3, #0
 800f86e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f870:	693b      	ldr	r3, [r7, #16]
 800f872:	015a      	lsls	r2, r3, #5
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	4413      	add	r3, r2
 800f878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f87c:	461a      	mov	r2, r3
 800f87e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f882:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f884:	693b      	ldr	r3, [r7, #16]
 800f886:	3301      	adds	r3, #1
 800f888:	613b      	str	r3, [r7, #16]
 800f88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88c:	693a      	ldr	r2, [r7, #16]
 800f88e:	429a      	cmp	r2, r3
 800f890:	d3b7      	bcc.n	800f802 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f892:	2300      	movs	r3, #0
 800f894:	613b      	str	r3, [r7, #16]
 800f896:	e043      	b.n	800f920 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f898:	693b      	ldr	r3, [r7, #16]
 800f89a:	015a      	lsls	r2, r3, #5
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	4413      	add	r3, r2
 800f8a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f8aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f8ae:	d118      	bne.n	800f8e2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800f8b0:	693b      	ldr	r3, [r7, #16]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d10a      	bne.n	800f8cc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f8b6:	693b      	ldr	r3, [r7, #16]
 800f8b8:	015a      	lsls	r2, r3, #5
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	4413      	add	r3, r2
 800f8be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f8c8:	6013      	str	r3, [r2, #0]
 800f8ca:	e013      	b.n	800f8f4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f8cc:	693b      	ldr	r3, [r7, #16]
 800f8ce:	015a      	lsls	r2, r3, #5
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	4413      	add	r3, r2
 800f8d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8d8:	461a      	mov	r2, r3
 800f8da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f8de:	6013      	str	r3, [r2, #0]
 800f8e0:	e008      	b.n	800f8f4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f8e2:	693b      	ldr	r3, [r7, #16]
 800f8e4:	015a      	lsls	r2, r3, #5
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	4413      	add	r3, r2
 800f8ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8ee:	461a      	mov	r2, r3
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f8f4:	693b      	ldr	r3, [r7, #16]
 800f8f6:	015a      	lsls	r2, r3, #5
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	4413      	add	r3, r2
 800f8fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f900:	461a      	mov	r2, r3
 800f902:	2300      	movs	r3, #0
 800f904:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	015a      	lsls	r2, r3, #5
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	4413      	add	r3, r2
 800f90e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f912:	461a      	mov	r2, r3
 800f914:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f918:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f91a:	693b      	ldr	r3, [r7, #16]
 800f91c:	3301      	adds	r3, #1
 800f91e:	613b      	str	r3, [r7, #16]
 800f920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f922:	693a      	ldr	r2, [r7, #16]
 800f924:	429a      	cmp	r2, r3
 800f926:	d3b7      	bcc.n	800f898 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f92e:	691b      	ldr	r3, [r3, #16]
 800f930:	68fa      	ldr	r2, [r7, #12]
 800f932:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f936:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f93a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	2200      	movs	r2, #0
 800f940:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f948:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d105      	bne.n	800f95c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	699b      	ldr	r3, [r3, #24]
 800f954:	f043 0210 	orr.w	r2, r3, #16
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	699a      	ldr	r2, [r3, #24]
 800f960:	4b0f      	ldr	r3, [pc, #60]	; (800f9a0 <USB_DevInit+0x2c4>)
 800f962:	4313      	orrs	r3, r2
 800f964:	687a      	ldr	r2, [r7, #4]
 800f966:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d005      	beq.n	800f97a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	699b      	ldr	r3, [r3, #24]
 800f972:	f043 0208 	orr.w	r2, r3, #8
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f97a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f97c:	2b01      	cmp	r3, #1
 800f97e:	d107      	bne.n	800f990 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	699b      	ldr	r3, [r3, #24]
 800f984:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f988:	f043 0304 	orr.w	r3, r3, #4
 800f98c:	687a      	ldr	r2, [r7, #4]
 800f98e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f990:	7dfb      	ldrb	r3, [r7, #23]
}
 800f992:	4618      	mov	r0, r3
 800f994:	3718      	adds	r7, #24
 800f996:	46bd      	mov	sp, r7
 800f998:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f99c:	b004      	add	sp, #16
 800f99e:	4770      	bx	lr
 800f9a0:	803c3800 	.word	0x803c3800

0800f9a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f9a4:	b480      	push	{r7}
 800f9a6:	b085      	sub	sp, #20
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
 800f9ac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	019b      	lsls	r3, r3, #6
 800f9b6:	f043 0220 	orr.w	r2, r3, #32
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	3301      	adds	r3, #1
 800f9c2:	60fb      	str	r3, [r7, #12]
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	4a09      	ldr	r2, [pc, #36]	; (800f9ec <USB_FlushTxFifo+0x48>)
 800f9c8:	4293      	cmp	r3, r2
 800f9ca:	d901      	bls.n	800f9d0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800f9cc:	2303      	movs	r3, #3
 800f9ce:	e006      	b.n	800f9de <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	691b      	ldr	r3, [r3, #16]
 800f9d4:	f003 0320 	and.w	r3, r3, #32
 800f9d8:	2b20      	cmp	r3, #32
 800f9da:	d0f0      	beq.n	800f9be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f9dc:	2300      	movs	r3, #0
}
 800f9de:	4618      	mov	r0, r3
 800f9e0:	3714      	adds	r7, #20
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e8:	4770      	bx	lr
 800f9ea:	bf00      	nop
 800f9ec:	00030d40 	.word	0x00030d40

0800f9f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f9f0:	b480      	push	{r7}
 800f9f2:	b085      	sub	sp, #20
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2210      	movs	r2, #16
 800fa00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	3301      	adds	r3, #1
 800fa06:	60fb      	str	r3, [r7, #12]
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	4a09      	ldr	r2, [pc, #36]	; (800fa30 <USB_FlushRxFifo+0x40>)
 800fa0c:	4293      	cmp	r3, r2
 800fa0e:	d901      	bls.n	800fa14 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800fa10:	2303      	movs	r3, #3
 800fa12:	e006      	b.n	800fa22 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	691b      	ldr	r3, [r3, #16]
 800fa18:	f003 0310 	and.w	r3, r3, #16
 800fa1c:	2b10      	cmp	r3, #16
 800fa1e:	d0f0      	beq.n	800fa02 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800fa20:	2300      	movs	r3, #0
}
 800fa22:	4618      	mov	r0, r3
 800fa24:	3714      	adds	r7, #20
 800fa26:	46bd      	mov	sp, r7
 800fa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2c:	4770      	bx	lr
 800fa2e:	bf00      	nop
 800fa30:	00030d40 	.word	0x00030d40

0800fa34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fa34:	b480      	push	{r7}
 800fa36:	b085      	sub	sp, #20
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
 800fa3c:	460b      	mov	r3, r1
 800fa3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa4a:	681a      	ldr	r2, [r3, #0]
 800fa4c:	78fb      	ldrb	r3, [r7, #3]
 800fa4e:	68f9      	ldr	r1, [r7, #12]
 800fa50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fa54:	4313      	orrs	r3, r2
 800fa56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fa58:	2300      	movs	r3, #0
}
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	3714      	adds	r7, #20
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa64:	4770      	bx	lr

0800fa66 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800fa66:	b480      	push	{r7}
 800fa68:	b087      	sub	sp, #28
 800fa6a:	af00      	add	r7, sp, #0
 800fa6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fa72:	693b      	ldr	r3, [r7, #16]
 800fa74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa78:	689b      	ldr	r3, [r3, #8]
 800fa7a:	f003 0306 	and.w	r3, r3, #6
 800fa7e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d102      	bne.n	800fa8c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fa86:	2300      	movs	r3, #0
 800fa88:	75fb      	strb	r3, [r7, #23]
 800fa8a:	e00a      	b.n	800faa2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	2b02      	cmp	r3, #2
 800fa90:	d002      	beq.n	800fa98 <USB_GetDevSpeed+0x32>
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	2b06      	cmp	r3, #6
 800fa96:	d102      	bne.n	800fa9e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fa98:	2302      	movs	r3, #2
 800fa9a:	75fb      	strb	r3, [r7, #23]
 800fa9c:	e001      	b.n	800faa2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fa9e:	230f      	movs	r3, #15
 800faa0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800faa2:	7dfb      	ldrb	r3, [r7, #23]
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	371c      	adds	r7, #28
 800faa8:	46bd      	mov	sp, r7
 800faaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faae:	4770      	bx	lr

0800fab0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fab0:	b480      	push	{r7}
 800fab2:	b085      	sub	sp, #20
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
 800fab8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fabe:	683b      	ldr	r3, [r7, #0]
 800fac0:	781b      	ldrb	r3, [r3, #0]
 800fac2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fac4:	683b      	ldr	r3, [r7, #0]
 800fac6:	785b      	ldrb	r3, [r3, #1]
 800fac8:	2b01      	cmp	r3, #1
 800faca:	d13a      	bne.n	800fb42 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fad2:	69da      	ldr	r2, [r3, #28]
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	781b      	ldrb	r3, [r3, #0]
 800fad8:	f003 030f 	and.w	r3, r3, #15
 800fadc:	2101      	movs	r1, #1
 800fade:	fa01 f303 	lsl.w	r3, r1, r3
 800fae2:	b29b      	uxth	r3, r3
 800fae4:	68f9      	ldr	r1, [r7, #12]
 800fae6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800faea:	4313      	orrs	r3, r2
 800faec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800faee:	68bb      	ldr	r3, [r7, #8]
 800faf0:	015a      	lsls	r2, r3, #5
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	4413      	add	r3, r2
 800faf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d155      	bne.n	800fbb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	015a      	lsls	r2, r3, #5
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	4413      	add	r3, r2
 800fb0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb10:	681a      	ldr	r2, [r3, #0]
 800fb12:	683b      	ldr	r3, [r7, #0]
 800fb14:	689b      	ldr	r3, [r3, #8]
 800fb16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	78db      	ldrb	r3, [r3, #3]
 800fb1e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fb20:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fb22:	68bb      	ldr	r3, [r7, #8]
 800fb24:	059b      	lsls	r3, r3, #22
 800fb26:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fb28:	4313      	orrs	r3, r2
 800fb2a:	68ba      	ldr	r2, [r7, #8]
 800fb2c:	0151      	lsls	r1, r2, #5
 800fb2e:	68fa      	ldr	r2, [r7, #12]
 800fb30:	440a      	add	r2, r1
 800fb32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fb3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fb3e:	6013      	str	r3, [r2, #0]
 800fb40:	e036      	b.n	800fbb0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb48:	69da      	ldr	r2, [r3, #28]
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	781b      	ldrb	r3, [r3, #0]
 800fb4e:	f003 030f 	and.w	r3, r3, #15
 800fb52:	2101      	movs	r1, #1
 800fb54:	fa01 f303 	lsl.w	r3, r1, r3
 800fb58:	041b      	lsls	r3, r3, #16
 800fb5a:	68f9      	ldr	r1, [r7, #12]
 800fb5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fb60:	4313      	orrs	r3, r2
 800fb62:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	015a      	lsls	r2, r3, #5
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	4413      	add	r3, r2
 800fb6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d11a      	bne.n	800fbb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fb7a:	68bb      	ldr	r3, [r7, #8]
 800fb7c:	015a      	lsls	r2, r3, #5
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	4413      	add	r3, r2
 800fb82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb86:	681a      	ldr	r2, [r3, #0]
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	689b      	ldr	r3, [r3, #8]
 800fb8c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	78db      	ldrb	r3, [r3, #3]
 800fb94:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fb96:	430b      	orrs	r3, r1
 800fb98:	4313      	orrs	r3, r2
 800fb9a:	68ba      	ldr	r2, [r7, #8]
 800fb9c:	0151      	lsls	r1, r2, #5
 800fb9e:	68fa      	ldr	r2, [r7, #12]
 800fba0:	440a      	add	r2, r1
 800fba2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fbaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fbae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800fbb0:	2300      	movs	r3, #0
}
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	3714      	adds	r7, #20
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbc:	4770      	bx	lr
	...

0800fbc0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fbc0:	b480      	push	{r7}
 800fbc2:	b085      	sub	sp, #20
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	781b      	ldrb	r3, [r3, #0]
 800fbd2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	785b      	ldrb	r3, [r3, #1]
 800fbd8:	2b01      	cmp	r3, #1
 800fbda:	d161      	bne.n	800fca0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	015a      	lsls	r2, r3, #5
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	4413      	add	r3, r2
 800fbe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fbee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fbf2:	d11f      	bne.n	800fc34 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	015a      	lsls	r2, r3, #5
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	4413      	add	r3, r2
 800fbfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	68ba      	ldr	r2, [r7, #8]
 800fc04:	0151      	lsls	r1, r2, #5
 800fc06:	68fa      	ldr	r2, [r7, #12]
 800fc08:	440a      	add	r2, r1
 800fc0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fc12:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	015a      	lsls	r2, r3, #5
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	4413      	add	r3, r2
 800fc1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	68ba      	ldr	r2, [r7, #8]
 800fc24:	0151      	lsls	r1, r2, #5
 800fc26:	68fa      	ldr	r2, [r7, #12]
 800fc28:	440a      	add	r2, r1
 800fc2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fc32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	781b      	ldrb	r3, [r3, #0]
 800fc40:	f003 030f 	and.w	r3, r3, #15
 800fc44:	2101      	movs	r1, #1
 800fc46:	fa01 f303 	lsl.w	r3, r1, r3
 800fc4a:	b29b      	uxth	r3, r3
 800fc4c:	43db      	mvns	r3, r3
 800fc4e:	68f9      	ldr	r1, [r7, #12]
 800fc50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fc54:	4013      	ands	r3, r2
 800fc56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc5e:	69da      	ldr	r2, [r3, #28]
 800fc60:	683b      	ldr	r3, [r7, #0]
 800fc62:	781b      	ldrb	r3, [r3, #0]
 800fc64:	f003 030f 	and.w	r3, r3, #15
 800fc68:	2101      	movs	r1, #1
 800fc6a:	fa01 f303 	lsl.w	r3, r1, r3
 800fc6e:	b29b      	uxth	r3, r3
 800fc70:	43db      	mvns	r3, r3
 800fc72:	68f9      	ldr	r1, [r7, #12]
 800fc74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fc78:	4013      	ands	r3, r2
 800fc7a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800fc7c:	68bb      	ldr	r3, [r7, #8]
 800fc7e:	015a      	lsls	r2, r3, #5
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	4413      	add	r3, r2
 800fc84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc88:	681a      	ldr	r2, [r3, #0]
 800fc8a:	68bb      	ldr	r3, [r7, #8]
 800fc8c:	0159      	lsls	r1, r3, #5
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	440b      	add	r3, r1
 800fc92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc96:	4619      	mov	r1, r3
 800fc98:	4b35      	ldr	r3, [pc, #212]	; (800fd70 <USB_DeactivateEndpoint+0x1b0>)
 800fc9a:	4013      	ands	r3, r2
 800fc9c:	600b      	str	r3, [r1, #0]
 800fc9e:	e060      	b.n	800fd62 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	015a      	lsls	r2, r3, #5
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	4413      	add	r3, r2
 800fca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fcb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fcb6:	d11f      	bne.n	800fcf8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	015a      	lsls	r2, r3, #5
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	4413      	add	r3, r2
 800fcc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	68ba      	ldr	r2, [r7, #8]
 800fcc8:	0151      	lsls	r1, r2, #5
 800fcca:	68fa      	ldr	r2, [r7, #12]
 800fccc:	440a      	add	r2, r1
 800fcce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fcd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fcd6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	015a      	lsls	r2, r3, #5
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	4413      	add	r3, r2
 800fce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	68ba      	ldr	r2, [r7, #8]
 800fce8:	0151      	lsls	r1, r2, #5
 800fcea:	68fa      	ldr	r2, [r7, #12]
 800fcec:	440a      	add	r2, r1
 800fcee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fcf2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fcf6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	781b      	ldrb	r3, [r3, #0]
 800fd04:	f003 030f 	and.w	r3, r3, #15
 800fd08:	2101      	movs	r1, #1
 800fd0a:	fa01 f303 	lsl.w	r3, r1, r3
 800fd0e:	041b      	lsls	r3, r3, #16
 800fd10:	43db      	mvns	r3, r3
 800fd12:	68f9      	ldr	r1, [r7, #12]
 800fd14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd18:	4013      	ands	r3, r2
 800fd1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd22:	69da      	ldr	r2, [r3, #28]
 800fd24:	683b      	ldr	r3, [r7, #0]
 800fd26:	781b      	ldrb	r3, [r3, #0]
 800fd28:	f003 030f 	and.w	r3, r3, #15
 800fd2c:	2101      	movs	r1, #1
 800fd2e:	fa01 f303 	lsl.w	r3, r1, r3
 800fd32:	041b      	lsls	r3, r3, #16
 800fd34:	43db      	mvns	r3, r3
 800fd36:	68f9      	ldr	r1, [r7, #12]
 800fd38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd3c:	4013      	ands	r3, r2
 800fd3e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800fd40:	68bb      	ldr	r3, [r7, #8]
 800fd42:	015a      	lsls	r2, r3, #5
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	4413      	add	r3, r2
 800fd48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd4c:	681a      	ldr	r2, [r3, #0]
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	0159      	lsls	r1, r3, #5
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	440b      	add	r3, r1
 800fd56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd5a:	4619      	mov	r1, r3
 800fd5c:	4b05      	ldr	r3, [pc, #20]	; (800fd74 <USB_DeactivateEndpoint+0x1b4>)
 800fd5e:	4013      	ands	r3, r2
 800fd60:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800fd62:	2300      	movs	r3, #0
}
 800fd64:	4618      	mov	r0, r3
 800fd66:	3714      	adds	r7, #20
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6e:	4770      	bx	lr
 800fd70:	ec337800 	.word	0xec337800
 800fd74:	eff37800 	.word	0xeff37800

0800fd78 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b08a      	sub	sp, #40	; 0x28
 800fd7c:	af02      	add	r7, sp, #8
 800fd7e:	60f8      	str	r0, [r7, #12]
 800fd80:	60b9      	str	r1, [r7, #8]
 800fd82:	4613      	mov	r3, r2
 800fd84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	781b      	ldrb	r3, [r3, #0]
 800fd8e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	785b      	ldrb	r3, [r3, #1]
 800fd94:	2b01      	cmp	r3, #1
 800fd96:	f040 815c 	bne.w	8010052 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	695b      	ldr	r3, [r3, #20]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d132      	bne.n	800fe08 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fda2:	69bb      	ldr	r3, [r7, #24]
 800fda4:	015a      	lsls	r2, r3, #5
 800fda6:	69fb      	ldr	r3, [r7, #28]
 800fda8:	4413      	add	r3, r2
 800fdaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdae:	691b      	ldr	r3, [r3, #16]
 800fdb0:	69ba      	ldr	r2, [r7, #24]
 800fdb2:	0151      	lsls	r1, r2, #5
 800fdb4:	69fa      	ldr	r2, [r7, #28]
 800fdb6:	440a      	add	r2, r1
 800fdb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fdbc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fdc0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fdc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fdc6:	69bb      	ldr	r3, [r7, #24]
 800fdc8:	015a      	lsls	r2, r3, #5
 800fdca:	69fb      	ldr	r3, [r7, #28]
 800fdcc:	4413      	add	r3, r2
 800fdce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdd2:	691b      	ldr	r3, [r3, #16]
 800fdd4:	69ba      	ldr	r2, [r7, #24]
 800fdd6:	0151      	lsls	r1, r2, #5
 800fdd8:	69fa      	ldr	r2, [r7, #28]
 800fdda:	440a      	add	r2, r1
 800fddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fde0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fde4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fde6:	69bb      	ldr	r3, [r7, #24]
 800fde8:	015a      	lsls	r2, r3, #5
 800fdea:	69fb      	ldr	r3, [r7, #28]
 800fdec:	4413      	add	r3, r2
 800fdee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdf2:	691b      	ldr	r3, [r3, #16]
 800fdf4:	69ba      	ldr	r2, [r7, #24]
 800fdf6:	0151      	lsls	r1, r2, #5
 800fdf8:	69fa      	ldr	r2, [r7, #28]
 800fdfa:	440a      	add	r2, r1
 800fdfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe00:	0cdb      	lsrs	r3, r3, #19
 800fe02:	04db      	lsls	r3, r3, #19
 800fe04:	6113      	str	r3, [r2, #16]
 800fe06:	e074      	b.n	800fef2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fe08:	69bb      	ldr	r3, [r7, #24]
 800fe0a:	015a      	lsls	r2, r3, #5
 800fe0c:	69fb      	ldr	r3, [r7, #28]
 800fe0e:	4413      	add	r3, r2
 800fe10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe14:	691b      	ldr	r3, [r3, #16]
 800fe16:	69ba      	ldr	r2, [r7, #24]
 800fe18:	0151      	lsls	r1, r2, #5
 800fe1a:	69fa      	ldr	r2, [r7, #28]
 800fe1c:	440a      	add	r2, r1
 800fe1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe22:	0cdb      	lsrs	r3, r3, #19
 800fe24:	04db      	lsls	r3, r3, #19
 800fe26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fe28:	69bb      	ldr	r3, [r7, #24]
 800fe2a:	015a      	lsls	r2, r3, #5
 800fe2c:	69fb      	ldr	r3, [r7, #28]
 800fe2e:	4413      	add	r3, r2
 800fe30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe34:	691b      	ldr	r3, [r3, #16]
 800fe36:	69ba      	ldr	r2, [r7, #24]
 800fe38:	0151      	lsls	r1, r2, #5
 800fe3a:	69fa      	ldr	r2, [r7, #28]
 800fe3c:	440a      	add	r2, r1
 800fe3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fe46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fe4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800fe4c:	69bb      	ldr	r3, [r7, #24]
 800fe4e:	015a      	lsls	r2, r3, #5
 800fe50:	69fb      	ldr	r3, [r7, #28]
 800fe52:	4413      	add	r3, r2
 800fe54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe58:	691a      	ldr	r2, [r3, #16]
 800fe5a:	68bb      	ldr	r3, [r7, #8]
 800fe5c:	6959      	ldr	r1, [r3, #20]
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	689b      	ldr	r3, [r3, #8]
 800fe62:	440b      	add	r3, r1
 800fe64:	1e59      	subs	r1, r3, #1
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	689b      	ldr	r3, [r3, #8]
 800fe6a:	fbb1 f3f3 	udiv	r3, r1, r3
 800fe6e:	04d9      	lsls	r1, r3, #19
 800fe70:	4b9d      	ldr	r3, [pc, #628]	; (80100e8 <USB_EPStartXfer+0x370>)
 800fe72:	400b      	ands	r3, r1
 800fe74:	69b9      	ldr	r1, [r7, #24]
 800fe76:	0148      	lsls	r0, r1, #5
 800fe78:	69f9      	ldr	r1, [r7, #28]
 800fe7a:	4401      	add	r1, r0
 800fe7c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fe80:	4313      	orrs	r3, r2
 800fe82:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fe84:	69bb      	ldr	r3, [r7, #24]
 800fe86:	015a      	lsls	r2, r3, #5
 800fe88:	69fb      	ldr	r3, [r7, #28]
 800fe8a:	4413      	add	r3, r2
 800fe8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe90:	691a      	ldr	r2, [r3, #16]
 800fe92:	68bb      	ldr	r3, [r7, #8]
 800fe94:	695b      	ldr	r3, [r3, #20]
 800fe96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fe9a:	69b9      	ldr	r1, [r7, #24]
 800fe9c:	0148      	lsls	r0, r1, #5
 800fe9e:	69f9      	ldr	r1, [r7, #28]
 800fea0:	4401      	add	r1, r0
 800fea2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fea6:	4313      	orrs	r3, r2
 800fea8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800feaa:	68bb      	ldr	r3, [r7, #8]
 800feac:	78db      	ldrb	r3, [r3, #3]
 800feae:	2b01      	cmp	r3, #1
 800feb0:	d11f      	bne.n	800fef2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800feb2:	69bb      	ldr	r3, [r7, #24]
 800feb4:	015a      	lsls	r2, r3, #5
 800feb6:	69fb      	ldr	r3, [r7, #28]
 800feb8:	4413      	add	r3, r2
 800feba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800febe:	691b      	ldr	r3, [r3, #16]
 800fec0:	69ba      	ldr	r2, [r7, #24]
 800fec2:	0151      	lsls	r1, r2, #5
 800fec4:	69fa      	ldr	r2, [r7, #28]
 800fec6:	440a      	add	r2, r1
 800fec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fecc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800fed0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800fed2:	69bb      	ldr	r3, [r7, #24]
 800fed4:	015a      	lsls	r2, r3, #5
 800fed6:	69fb      	ldr	r3, [r7, #28]
 800fed8:	4413      	add	r3, r2
 800feda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fede:	691b      	ldr	r3, [r3, #16]
 800fee0:	69ba      	ldr	r2, [r7, #24]
 800fee2:	0151      	lsls	r1, r2, #5
 800fee4:	69fa      	ldr	r2, [r7, #28]
 800fee6:	440a      	add	r2, r1
 800fee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800feec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fef0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800fef2:	79fb      	ldrb	r3, [r7, #7]
 800fef4:	2b01      	cmp	r3, #1
 800fef6:	d14b      	bne.n	800ff90 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	691b      	ldr	r3, [r3, #16]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d009      	beq.n	800ff14 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ff00:	69bb      	ldr	r3, [r7, #24]
 800ff02:	015a      	lsls	r2, r3, #5
 800ff04:	69fb      	ldr	r3, [r7, #28]
 800ff06:	4413      	add	r3, r2
 800ff08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff0c:	461a      	mov	r2, r3
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	691b      	ldr	r3, [r3, #16]
 800ff12:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	78db      	ldrb	r3, [r3, #3]
 800ff18:	2b01      	cmp	r3, #1
 800ff1a:	d128      	bne.n	800ff6e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ff1c:	69fb      	ldr	r3, [r7, #28]
 800ff1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff22:	689b      	ldr	r3, [r3, #8]
 800ff24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d110      	bne.n	800ff4e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ff2c:	69bb      	ldr	r3, [r7, #24]
 800ff2e:	015a      	lsls	r2, r3, #5
 800ff30:	69fb      	ldr	r3, [r7, #28]
 800ff32:	4413      	add	r3, r2
 800ff34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	69ba      	ldr	r2, [r7, #24]
 800ff3c:	0151      	lsls	r1, r2, #5
 800ff3e:	69fa      	ldr	r2, [r7, #28]
 800ff40:	440a      	add	r2, r1
 800ff42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ff4a:	6013      	str	r3, [r2, #0]
 800ff4c:	e00f      	b.n	800ff6e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ff4e:	69bb      	ldr	r3, [r7, #24]
 800ff50:	015a      	lsls	r2, r3, #5
 800ff52:	69fb      	ldr	r3, [r7, #28]
 800ff54:	4413      	add	r3, r2
 800ff56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	69ba      	ldr	r2, [r7, #24]
 800ff5e:	0151      	lsls	r1, r2, #5
 800ff60:	69fa      	ldr	r2, [r7, #28]
 800ff62:	440a      	add	r2, r1
 800ff64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ff6c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ff6e:	69bb      	ldr	r3, [r7, #24]
 800ff70:	015a      	lsls	r2, r3, #5
 800ff72:	69fb      	ldr	r3, [r7, #28]
 800ff74:	4413      	add	r3, r2
 800ff76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	69ba      	ldr	r2, [r7, #24]
 800ff7e:	0151      	lsls	r1, r2, #5
 800ff80:	69fa      	ldr	r2, [r7, #28]
 800ff82:	440a      	add	r2, r1
 800ff84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ff8c:	6013      	str	r3, [r2, #0]
 800ff8e:	e12f      	b.n	80101f0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ff90:	69bb      	ldr	r3, [r7, #24]
 800ff92:	015a      	lsls	r2, r3, #5
 800ff94:	69fb      	ldr	r3, [r7, #28]
 800ff96:	4413      	add	r3, r2
 800ff98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	69ba      	ldr	r2, [r7, #24]
 800ffa0:	0151      	lsls	r1, r2, #5
 800ffa2:	69fa      	ldr	r2, [r7, #28]
 800ffa4:	440a      	add	r2, r1
 800ffa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffaa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ffae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	78db      	ldrb	r3, [r3, #3]
 800ffb4:	2b01      	cmp	r3, #1
 800ffb6:	d015      	beq.n	800ffe4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ffb8:	68bb      	ldr	r3, [r7, #8]
 800ffba:	695b      	ldr	r3, [r3, #20]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	f000 8117 	beq.w	80101f0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ffc2:	69fb      	ldr	r3, [r7, #28]
 800ffc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	f003 030f 	and.w	r3, r3, #15
 800ffd2:	2101      	movs	r1, #1
 800ffd4:	fa01 f303 	lsl.w	r3, r1, r3
 800ffd8:	69f9      	ldr	r1, [r7, #28]
 800ffda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ffde:	4313      	orrs	r3, r2
 800ffe0:	634b      	str	r3, [r1, #52]	; 0x34
 800ffe2:	e105      	b.n	80101f0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ffe4:	69fb      	ldr	r3, [r7, #28]
 800ffe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffea:	689b      	ldr	r3, [r3, #8]
 800ffec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d110      	bne.n	8010016 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fff4:	69bb      	ldr	r3, [r7, #24]
 800fff6:	015a      	lsls	r2, r3, #5
 800fff8:	69fb      	ldr	r3, [r7, #28]
 800fffa:	4413      	add	r3, r2
 800fffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	69ba      	ldr	r2, [r7, #24]
 8010004:	0151      	lsls	r1, r2, #5
 8010006:	69fa      	ldr	r2, [r7, #28]
 8010008:	440a      	add	r2, r1
 801000a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801000e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010012:	6013      	str	r3, [r2, #0]
 8010014:	e00f      	b.n	8010036 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010016:	69bb      	ldr	r3, [r7, #24]
 8010018:	015a      	lsls	r2, r3, #5
 801001a:	69fb      	ldr	r3, [r7, #28]
 801001c:	4413      	add	r3, r2
 801001e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	69ba      	ldr	r2, [r7, #24]
 8010026:	0151      	lsls	r1, r2, #5
 8010028:	69fa      	ldr	r2, [r7, #28]
 801002a:	440a      	add	r2, r1
 801002c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010034:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010036:	68bb      	ldr	r3, [r7, #8]
 8010038:	68d9      	ldr	r1, [r3, #12]
 801003a:	68bb      	ldr	r3, [r7, #8]
 801003c:	781a      	ldrb	r2, [r3, #0]
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	695b      	ldr	r3, [r3, #20]
 8010042:	b298      	uxth	r0, r3
 8010044:	79fb      	ldrb	r3, [r7, #7]
 8010046:	9300      	str	r3, [sp, #0]
 8010048:	4603      	mov	r3, r0
 801004a:	68f8      	ldr	r0, [r7, #12]
 801004c:	f000 fa2b 	bl	80104a6 <USB_WritePacket>
 8010050:	e0ce      	b.n	80101f0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010052:	69bb      	ldr	r3, [r7, #24]
 8010054:	015a      	lsls	r2, r3, #5
 8010056:	69fb      	ldr	r3, [r7, #28]
 8010058:	4413      	add	r3, r2
 801005a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801005e:	691b      	ldr	r3, [r3, #16]
 8010060:	69ba      	ldr	r2, [r7, #24]
 8010062:	0151      	lsls	r1, r2, #5
 8010064:	69fa      	ldr	r2, [r7, #28]
 8010066:	440a      	add	r2, r1
 8010068:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801006c:	0cdb      	lsrs	r3, r3, #19
 801006e:	04db      	lsls	r3, r3, #19
 8010070:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010072:	69bb      	ldr	r3, [r7, #24]
 8010074:	015a      	lsls	r2, r3, #5
 8010076:	69fb      	ldr	r3, [r7, #28]
 8010078:	4413      	add	r3, r2
 801007a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801007e:	691b      	ldr	r3, [r3, #16]
 8010080:	69ba      	ldr	r2, [r7, #24]
 8010082:	0151      	lsls	r1, r2, #5
 8010084:	69fa      	ldr	r2, [r7, #28]
 8010086:	440a      	add	r2, r1
 8010088:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801008c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010090:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010094:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	695b      	ldr	r3, [r3, #20]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d126      	bne.n	80100ec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801009e:	69bb      	ldr	r3, [r7, #24]
 80100a0:	015a      	lsls	r2, r3, #5
 80100a2:	69fb      	ldr	r3, [r7, #28]
 80100a4:	4413      	add	r3, r2
 80100a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100aa:	691a      	ldr	r2, [r3, #16]
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	689b      	ldr	r3, [r3, #8]
 80100b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80100b4:	69b9      	ldr	r1, [r7, #24]
 80100b6:	0148      	lsls	r0, r1, #5
 80100b8:	69f9      	ldr	r1, [r7, #28]
 80100ba:	4401      	add	r1, r0
 80100bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80100c0:	4313      	orrs	r3, r2
 80100c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80100c4:	69bb      	ldr	r3, [r7, #24]
 80100c6:	015a      	lsls	r2, r3, #5
 80100c8:	69fb      	ldr	r3, [r7, #28]
 80100ca:	4413      	add	r3, r2
 80100cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100d0:	691b      	ldr	r3, [r3, #16]
 80100d2:	69ba      	ldr	r2, [r7, #24]
 80100d4:	0151      	lsls	r1, r2, #5
 80100d6:	69fa      	ldr	r2, [r7, #28]
 80100d8:	440a      	add	r2, r1
 80100da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80100de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80100e2:	6113      	str	r3, [r2, #16]
 80100e4:	e036      	b.n	8010154 <USB_EPStartXfer+0x3dc>
 80100e6:	bf00      	nop
 80100e8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	695a      	ldr	r2, [r3, #20]
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	689b      	ldr	r3, [r3, #8]
 80100f4:	4413      	add	r3, r2
 80100f6:	1e5a      	subs	r2, r3, #1
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	689b      	ldr	r3, [r3, #8]
 80100fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8010100:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010102:	69bb      	ldr	r3, [r7, #24]
 8010104:	015a      	lsls	r2, r3, #5
 8010106:	69fb      	ldr	r3, [r7, #28]
 8010108:	4413      	add	r3, r2
 801010a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801010e:	691a      	ldr	r2, [r3, #16]
 8010110:	8afb      	ldrh	r3, [r7, #22]
 8010112:	04d9      	lsls	r1, r3, #19
 8010114:	4b39      	ldr	r3, [pc, #228]	; (80101fc <USB_EPStartXfer+0x484>)
 8010116:	400b      	ands	r3, r1
 8010118:	69b9      	ldr	r1, [r7, #24]
 801011a:	0148      	lsls	r0, r1, #5
 801011c:	69f9      	ldr	r1, [r7, #28]
 801011e:	4401      	add	r1, r0
 8010120:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010124:	4313      	orrs	r3, r2
 8010126:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8010128:	69bb      	ldr	r3, [r7, #24]
 801012a:	015a      	lsls	r2, r3, #5
 801012c:	69fb      	ldr	r3, [r7, #28]
 801012e:	4413      	add	r3, r2
 8010130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010134:	691a      	ldr	r2, [r3, #16]
 8010136:	68bb      	ldr	r3, [r7, #8]
 8010138:	689b      	ldr	r3, [r3, #8]
 801013a:	8af9      	ldrh	r1, [r7, #22]
 801013c:	fb01 f303 	mul.w	r3, r1, r3
 8010140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010144:	69b9      	ldr	r1, [r7, #24]
 8010146:	0148      	lsls	r0, r1, #5
 8010148:	69f9      	ldr	r1, [r7, #28]
 801014a:	4401      	add	r1, r0
 801014c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010150:	4313      	orrs	r3, r2
 8010152:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010154:	79fb      	ldrb	r3, [r7, #7]
 8010156:	2b01      	cmp	r3, #1
 8010158:	d10d      	bne.n	8010176 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	68db      	ldr	r3, [r3, #12]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d009      	beq.n	8010176 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010162:	68bb      	ldr	r3, [r7, #8]
 8010164:	68d9      	ldr	r1, [r3, #12]
 8010166:	69bb      	ldr	r3, [r7, #24]
 8010168:	015a      	lsls	r2, r3, #5
 801016a:	69fb      	ldr	r3, [r7, #28]
 801016c:	4413      	add	r3, r2
 801016e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010172:	460a      	mov	r2, r1
 8010174:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8010176:	68bb      	ldr	r3, [r7, #8]
 8010178:	78db      	ldrb	r3, [r3, #3]
 801017a:	2b01      	cmp	r3, #1
 801017c:	d128      	bne.n	80101d0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801017e:	69fb      	ldr	r3, [r7, #28]
 8010180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010184:	689b      	ldr	r3, [r3, #8]
 8010186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801018a:	2b00      	cmp	r3, #0
 801018c:	d110      	bne.n	80101b0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801018e:	69bb      	ldr	r3, [r7, #24]
 8010190:	015a      	lsls	r2, r3, #5
 8010192:	69fb      	ldr	r3, [r7, #28]
 8010194:	4413      	add	r3, r2
 8010196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	69ba      	ldr	r2, [r7, #24]
 801019e:	0151      	lsls	r1, r2, #5
 80101a0:	69fa      	ldr	r2, [r7, #28]
 80101a2:	440a      	add	r2, r1
 80101a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80101a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80101ac:	6013      	str	r3, [r2, #0]
 80101ae:	e00f      	b.n	80101d0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80101b0:	69bb      	ldr	r3, [r7, #24]
 80101b2:	015a      	lsls	r2, r3, #5
 80101b4:	69fb      	ldr	r3, [r7, #28]
 80101b6:	4413      	add	r3, r2
 80101b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	69ba      	ldr	r2, [r7, #24]
 80101c0:	0151      	lsls	r1, r2, #5
 80101c2:	69fa      	ldr	r2, [r7, #28]
 80101c4:	440a      	add	r2, r1
 80101c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80101ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80101ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80101d0:	69bb      	ldr	r3, [r7, #24]
 80101d2:	015a      	lsls	r2, r3, #5
 80101d4:	69fb      	ldr	r3, [r7, #28]
 80101d6:	4413      	add	r3, r2
 80101d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	69ba      	ldr	r2, [r7, #24]
 80101e0:	0151      	lsls	r1, r2, #5
 80101e2:	69fa      	ldr	r2, [r7, #28]
 80101e4:	440a      	add	r2, r1
 80101e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80101ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80101ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80101f0:	2300      	movs	r3, #0
}
 80101f2:	4618      	mov	r0, r3
 80101f4:	3720      	adds	r7, #32
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}
 80101fa:	bf00      	nop
 80101fc:	1ff80000 	.word	0x1ff80000

08010200 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010200:	b480      	push	{r7}
 8010202:	b087      	sub	sp, #28
 8010204:	af00      	add	r7, sp, #0
 8010206:	60f8      	str	r0, [r7, #12]
 8010208:	60b9      	str	r1, [r7, #8]
 801020a:	4613      	mov	r3, r2
 801020c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8010212:	68bb      	ldr	r3, [r7, #8]
 8010214:	781b      	ldrb	r3, [r3, #0]
 8010216:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	785b      	ldrb	r3, [r3, #1]
 801021c:	2b01      	cmp	r3, #1
 801021e:	f040 80cd 	bne.w	80103bc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010222:	68bb      	ldr	r3, [r7, #8]
 8010224:	695b      	ldr	r3, [r3, #20]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d132      	bne.n	8010290 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801022a:	693b      	ldr	r3, [r7, #16]
 801022c:	015a      	lsls	r2, r3, #5
 801022e:	697b      	ldr	r3, [r7, #20]
 8010230:	4413      	add	r3, r2
 8010232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010236:	691b      	ldr	r3, [r3, #16]
 8010238:	693a      	ldr	r2, [r7, #16]
 801023a:	0151      	lsls	r1, r2, #5
 801023c:	697a      	ldr	r2, [r7, #20]
 801023e:	440a      	add	r2, r1
 8010240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010244:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010248:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801024c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801024e:	693b      	ldr	r3, [r7, #16]
 8010250:	015a      	lsls	r2, r3, #5
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	4413      	add	r3, r2
 8010256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801025a:	691b      	ldr	r3, [r3, #16]
 801025c:	693a      	ldr	r2, [r7, #16]
 801025e:	0151      	lsls	r1, r2, #5
 8010260:	697a      	ldr	r2, [r7, #20]
 8010262:	440a      	add	r2, r1
 8010264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010268:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801026c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801026e:	693b      	ldr	r3, [r7, #16]
 8010270:	015a      	lsls	r2, r3, #5
 8010272:	697b      	ldr	r3, [r7, #20]
 8010274:	4413      	add	r3, r2
 8010276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801027a:	691b      	ldr	r3, [r3, #16]
 801027c:	693a      	ldr	r2, [r7, #16]
 801027e:	0151      	lsls	r1, r2, #5
 8010280:	697a      	ldr	r2, [r7, #20]
 8010282:	440a      	add	r2, r1
 8010284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010288:	0cdb      	lsrs	r3, r3, #19
 801028a:	04db      	lsls	r3, r3, #19
 801028c:	6113      	str	r3, [r2, #16]
 801028e:	e04e      	b.n	801032e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010290:	693b      	ldr	r3, [r7, #16]
 8010292:	015a      	lsls	r2, r3, #5
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	4413      	add	r3, r2
 8010298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801029c:	691b      	ldr	r3, [r3, #16]
 801029e:	693a      	ldr	r2, [r7, #16]
 80102a0:	0151      	lsls	r1, r2, #5
 80102a2:	697a      	ldr	r2, [r7, #20]
 80102a4:	440a      	add	r2, r1
 80102a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102aa:	0cdb      	lsrs	r3, r3, #19
 80102ac:	04db      	lsls	r3, r3, #19
 80102ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80102b0:	693b      	ldr	r3, [r7, #16]
 80102b2:	015a      	lsls	r2, r3, #5
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	4413      	add	r3, r2
 80102b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102bc:	691b      	ldr	r3, [r3, #16]
 80102be:	693a      	ldr	r2, [r7, #16]
 80102c0:	0151      	lsls	r1, r2, #5
 80102c2:	697a      	ldr	r2, [r7, #20]
 80102c4:	440a      	add	r2, r1
 80102c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80102ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80102d2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80102d4:	68bb      	ldr	r3, [r7, #8]
 80102d6:	695a      	ldr	r2, [r3, #20]
 80102d8:	68bb      	ldr	r3, [r7, #8]
 80102da:	689b      	ldr	r3, [r3, #8]
 80102dc:	429a      	cmp	r2, r3
 80102de:	d903      	bls.n	80102e8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80102e0:	68bb      	ldr	r3, [r7, #8]
 80102e2:	689a      	ldr	r2, [r3, #8]
 80102e4:	68bb      	ldr	r3, [r7, #8]
 80102e6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80102e8:	693b      	ldr	r3, [r7, #16]
 80102ea:	015a      	lsls	r2, r3, #5
 80102ec:	697b      	ldr	r3, [r7, #20]
 80102ee:	4413      	add	r3, r2
 80102f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102f4:	691b      	ldr	r3, [r3, #16]
 80102f6:	693a      	ldr	r2, [r7, #16]
 80102f8:	0151      	lsls	r1, r2, #5
 80102fa:	697a      	ldr	r2, [r7, #20]
 80102fc:	440a      	add	r2, r1
 80102fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010302:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010306:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010308:	693b      	ldr	r3, [r7, #16]
 801030a:	015a      	lsls	r2, r3, #5
 801030c:	697b      	ldr	r3, [r7, #20]
 801030e:	4413      	add	r3, r2
 8010310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010314:	691a      	ldr	r2, [r3, #16]
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	695b      	ldr	r3, [r3, #20]
 801031a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801031e:	6939      	ldr	r1, [r7, #16]
 8010320:	0148      	lsls	r0, r1, #5
 8010322:	6979      	ldr	r1, [r7, #20]
 8010324:	4401      	add	r1, r0
 8010326:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801032a:	4313      	orrs	r3, r2
 801032c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801032e:	79fb      	ldrb	r3, [r7, #7]
 8010330:	2b01      	cmp	r3, #1
 8010332:	d11e      	bne.n	8010372 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	691b      	ldr	r3, [r3, #16]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d009      	beq.n	8010350 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801033c:	693b      	ldr	r3, [r7, #16]
 801033e:	015a      	lsls	r2, r3, #5
 8010340:	697b      	ldr	r3, [r7, #20]
 8010342:	4413      	add	r3, r2
 8010344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010348:	461a      	mov	r2, r3
 801034a:	68bb      	ldr	r3, [r7, #8]
 801034c:	691b      	ldr	r3, [r3, #16]
 801034e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010350:	693b      	ldr	r3, [r7, #16]
 8010352:	015a      	lsls	r2, r3, #5
 8010354:	697b      	ldr	r3, [r7, #20]
 8010356:	4413      	add	r3, r2
 8010358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	693a      	ldr	r2, [r7, #16]
 8010360:	0151      	lsls	r1, r2, #5
 8010362:	697a      	ldr	r2, [r7, #20]
 8010364:	440a      	add	r2, r1
 8010366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801036a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801036e:	6013      	str	r3, [r2, #0]
 8010370:	e092      	b.n	8010498 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	015a      	lsls	r2, r3, #5
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	4413      	add	r3, r2
 801037a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	693a      	ldr	r2, [r7, #16]
 8010382:	0151      	lsls	r1, r2, #5
 8010384:	697a      	ldr	r2, [r7, #20]
 8010386:	440a      	add	r2, r1
 8010388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801038c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010390:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8010392:	68bb      	ldr	r3, [r7, #8]
 8010394:	695b      	ldr	r3, [r3, #20]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d07e      	beq.n	8010498 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801039a:	697b      	ldr	r3, [r7, #20]
 801039c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80103a2:	68bb      	ldr	r3, [r7, #8]
 80103a4:	781b      	ldrb	r3, [r3, #0]
 80103a6:	f003 030f 	and.w	r3, r3, #15
 80103aa:	2101      	movs	r1, #1
 80103ac:	fa01 f303 	lsl.w	r3, r1, r3
 80103b0:	6979      	ldr	r1, [r7, #20]
 80103b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80103b6:	4313      	orrs	r3, r2
 80103b8:	634b      	str	r3, [r1, #52]	; 0x34
 80103ba:	e06d      	b.n	8010498 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80103bc:	693b      	ldr	r3, [r7, #16]
 80103be:	015a      	lsls	r2, r3, #5
 80103c0:	697b      	ldr	r3, [r7, #20]
 80103c2:	4413      	add	r3, r2
 80103c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103c8:	691b      	ldr	r3, [r3, #16]
 80103ca:	693a      	ldr	r2, [r7, #16]
 80103cc:	0151      	lsls	r1, r2, #5
 80103ce:	697a      	ldr	r2, [r7, #20]
 80103d0:	440a      	add	r2, r1
 80103d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103d6:	0cdb      	lsrs	r3, r3, #19
 80103d8:	04db      	lsls	r3, r3, #19
 80103da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80103dc:	693b      	ldr	r3, [r7, #16]
 80103de:	015a      	lsls	r2, r3, #5
 80103e0:	697b      	ldr	r3, [r7, #20]
 80103e2:	4413      	add	r3, r2
 80103e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103e8:	691b      	ldr	r3, [r3, #16]
 80103ea:	693a      	ldr	r2, [r7, #16]
 80103ec:	0151      	lsls	r1, r2, #5
 80103ee:	697a      	ldr	r2, [r7, #20]
 80103f0:	440a      	add	r2, r1
 80103f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80103fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80103fe:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010400:	68bb      	ldr	r3, [r7, #8]
 8010402:	695b      	ldr	r3, [r3, #20]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d003      	beq.n	8010410 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	689a      	ldr	r2, [r3, #8]
 801040c:	68bb      	ldr	r3, [r7, #8]
 801040e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010410:	693b      	ldr	r3, [r7, #16]
 8010412:	015a      	lsls	r2, r3, #5
 8010414:	697b      	ldr	r3, [r7, #20]
 8010416:	4413      	add	r3, r2
 8010418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801041c:	691b      	ldr	r3, [r3, #16]
 801041e:	693a      	ldr	r2, [r7, #16]
 8010420:	0151      	lsls	r1, r2, #5
 8010422:	697a      	ldr	r2, [r7, #20]
 8010424:	440a      	add	r2, r1
 8010426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801042a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801042e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	015a      	lsls	r2, r3, #5
 8010434:	697b      	ldr	r3, [r7, #20]
 8010436:	4413      	add	r3, r2
 8010438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801043c:	691a      	ldr	r2, [r3, #16]
 801043e:	68bb      	ldr	r3, [r7, #8]
 8010440:	689b      	ldr	r3, [r3, #8]
 8010442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010446:	6939      	ldr	r1, [r7, #16]
 8010448:	0148      	lsls	r0, r1, #5
 801044a:	6979      	ldr	r1, [r7, #20]
 801044c:	4401      	add	r1, r0
 801044e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010452:	4313      	orrs	r3, r2
 8010454:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8010456:	79fb      	ldrb	r3, [r7, #7]
 8010458:	2b01      	cmp	r3, #1
 801045a:	d10d      	bne.n	8010478 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	68db      	ldr	r3, [r3, #12]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d009      	beq.n	8010478 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	68d9      	ldr	r1, [r3, #12]
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	015a      	lsls	r2, r3, #5
 801046c:	697b      	ldr	r3, [r7, #20]
 801046e:	4413      	add	r3, r2
 8010470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010474:	460a      	mov	r2, r1
 8010476:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010478:	693b      	ldr	r3, [r7, #16]
 801047a:	015a      	lsls	r2, r3, #5
 801047c:	697b      	ldr	r3, [r7, #20]
 801047e:	4413      	add	r3, r2
 8010480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	693a      	ldr	r2, [r7, #16]
 8010488:	0151      	lsls	r1, r2, #5
 801048a:	697a      	ldr	r2, [r7, #20]
 801048c:	440a      	add	r2, r1
 801048e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010492:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010496:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010498:	2300      	movs	r3, #0
}
 801049a:	4618      	mov	r0, r3
 801049c:	371c      	adds	r7, #28
 801049e:	46bd      	mov	sp, r7
 80104a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a4:	4770      	bx	lr

080104a6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80104a6:	b480      	push	{r7}
 80104a8:	b089      	sub	sp, #36	; 0x24
 80104aa:	af00      	add	r7, sp, #0
 80104ac:	60f8      	str	r0, [r7, #12]
 80104ae:	60b9      	str	r1, [r7, #8]
 80104b0:	4611      	mov	r1, r2
 80104b2:	461a      	mov	r2, r3
 80104b4:	460b      	mov	r3, r1
 80104b6:	71fb      	strb	r3, [r7, #7]
 80104b8:	4613      	mov	r3, r2
 80104ba:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80104c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d11a      	bne.n	8010502 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80104cc:	88bb      	ldrh	r3, [r7, #4]
 80104ce:	3303      	adds	r3, #3
 80104d0:	089b      	lsrs	r3, r3, #2
 80104d2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80104d4:	2300      	movs	r3, #0
 80104d6:	61bb      	str	r3, [r7, #24]
 80104d8:	e00f      	b.n	80104fa <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80104da:	79fb      	ldrb	r3, [r7, #7]
 80104dc:	031a      	lsls	r2, r3, #12
 80104de:	697b      	ldr	r3, [r7, #20]
 80104e0:	4413      	add	r3, r2
 80104e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104e6:	461a      	mov	r2, r3
 80104e8:	69fb      	ldr	r3, [r7, #28]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	6013      	str	r3, [r2, #0]
      pSrc++;
 80104ee:	69fb      	ldr	r3, [r7, #28]
 80104f0:	3304      	adds	r3, #4
 80104f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80104f4:	69bb      	ldr	r3, [r7, #24]
 80104f6:	3301      	adds	r3, #1
 80104f8:	61bb      	str	r3, [r7, #24]
 80104fa:	69ba      	ldr	r2, [r7, #24]
 80104fc:	693b      	ldr	r3, [r7, #16]
 80104fe:	429a      	cmp	r2, r3
 8010500:	d3eb      	bcc.n	80104da <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010502:	2300      	movs	r3, #0
}
 8010504:	4618      	mov	r0, r3
 8010506:	3724      	adds	r7, #36	; 0x24
 8010508:	46bd      	mov	sp, r7
 801050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050e:	4770      	bx	lr

08010510 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010510:	b480      	push	{r7}
 8010512:	b089      	sub	sp, #36	; 0x24
 8010514:	af00      	add	r7, sp, #0
 8010516:	60f8      	str	r0, [r7, #12]
 8010518:	60b9      	str	r1, [r7, #8]
 801051a:	4613      	mov	r3, r2
 801051c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8010522:	68bb      	ldr	r3, [r7, #8]
 8010524:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8010526:	88fb      	ldrh	r3, [r7, #6]
 8010528:	3303      	adds	r3, #3
 801052a:	089b      	lsrs	r3, r3, #2
 801052c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 801052e:	2300      	movs	r3, #0
 8010530:	61bb      	str	r3, [r7, #24]
 8010532:	e00b      	b.n	801054c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010534:	697b      	ldr	r3, [r7, #20]
 8010536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801053a:	681a      	ldr	r2, [r3, #0]
 801053c:	69fb      	ldr	r3, [r7, #28]
 801053e:	601a      	str	r2, [r3, #0]
    pDest++;
 8010540:	69fb      	ldr	r3, [r7, #28]
 8010542:	3304      	adds	r3, #4
 8010544:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8010546:	69bb      	ldr	r3, [r7, #24]
 8010548:	3301      	adds	r3, #1
 801054a:	61bb      	str	r3, [r7, #24]
 801054c:	69ba      	ldr	r2, [r7, #24]
 801054e:	693b      	ldr	r3, [r7, #16]
 8010550:	429a      	cmp	r2, r3
 8010552:	d3ef      	bcc.n	8010534 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8010554:	69fb      	ldr	r3, [r7, #28]
}
 8010556:	4618      	mov	r0, r3
 8010558:	3724      	adds	r7, #36	; 0x24
 801055a:	46bd      	mov	sp, r7
 801055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010560:	4770      	bx	lr

08010562 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010562:	b480      	push	{r7}
 8010564:	b085      	sub	sp, #20
 8010566:	af00      	add	r7, sp, #0
 8010568:	6078      	str	r0, [r7, #4]
 801056a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	781b      	ldrb	r3, [r3, #0]
 8010574:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	785b      	ldrb	r3, [r3, #1]
 801057a:	2b01      	cmp	r3, #1
 801057c:	d12c      	bne.n	80105d8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801057e:	68bb      	ldr	r3, [r7, #8]
 8010580:	015a      	lsls	r2, r3, #5
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	4413      	add	r3, r2
 8010586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	2b00      	cmp	r3, #0
 801058e:	db12      	blt.n	80105b6 <USB_EPSetStall+0x54>
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d00f      	beq.n	80105b6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010596:	68bb      	ldr	r3, [r7, #8]
 8010598:	015a      	lsls	r2, r3, #5
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	4413      	add	r3, r2
 801059e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	68ba      	ldr	r2, [r7, #8]
 80105a6:	0151      	lsls	r1, r2, #5
 80105a8:	68fa      	ldr	r2, [r7, #12]
 80105aa:	440a      	add	r2, r1
 80105ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80105b4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80105b6:	68bb      	ldr	r3, [r7, #8]
 80105b8:	015a      	lsls	r2, r3, #5
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	4413      	add	r3, r2
 80105be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	68ba      	ldr	r2, [r7, #8]
 80105c6:	0151      	lsls	r1, r2, #5
 80105c8:	68fa      	ldr	r2, [r7, #12]
 80105ca:	440a      	add	r2, r1
 80105cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80105d4:	6013      	str	r3, [r2, #0]
 80105d6:	e02b      	b.n	8010630 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80105d8:	68bb      	ldr	r3, [r7, #8]
 80105da:	015a      	lsls	r2, r3, #5
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	4413      	add	r3, r2
 80105e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	db12      	blt.n	8010610 <USB_EPSetStall+0xae>
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d00f      	beq.n	8010610 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80105f0:	68bb      	ldr	r3, [r7, #8]
 80105f2:	015a      	lsls	r2, r3, #5
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	4413      	add	r3, r2
 80105f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	68ba      	ldr	r2, [r7, #8]
 8010600:	0151      	lsls	r1, r2, #5
 8010602:	68fa      	ldr	r2, [r7, #12]
 8010604:	440a      	add	r2, r1
 8010606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801060a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801060e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010610:	68bb      	ldr	r3, [r7, #8]
 8010612:	015a      	lsls	r2, r3, #5
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	4413      	add	r3, r2
 8010618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	68ba      	ldr	r2, [r7, #8]
 8010620:	0151      	lsls	r1, r2, #5
 8010622:	68fa      	ldr	r2, [r7, #12]
 8010624:	440a      	add	r2, r1
 8010626:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801062a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801062e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010630:	2300      	movs	r3, #0
}
 8010632:	4618      	mov	r0, r3
 8010634:	3714      	adds	r7, #20
 8010636:	46bd      	mov	sp, r7
 8010638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063c:	4770      	bx	lr

0801063e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801063e:	b480      	push	{r7}
 8010640:	b085      	sub	sp, #20
 8010642:	af00      	add	r7, sp, #0
 8010644:	6078      	str	r0, [r7, #4]
 8010646:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	781b      	ldrb	r3, [r3, #0]
 8010650:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	785b      	ldrb	r3, [r3, #1]
 8010656:	2b01      	cmp	r3, #1
 8010658:	d128      	bne.n	80106ac <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	015a      	lsls	r2, r3, #5
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	4413      	add	r3, r2
 8010662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	68ba      	ldr	r2, [r7, #8]
 801066a:	0151      	lsls	r1, r2, #5
 801066c:	68fa      	ldr	r2, [r7, #12]
 801066e:	440a      	add	r2, r1
 8010670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010674:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010678:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	78db      	ldrb	r3, [r3, #3]
 801067e:	2b03      	cmp	r3, #3
 8010680:	d003      	beq.n	801068a <USB_EPClearStall+0x4c>
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	78db      	ldrb	r3, [r3, #3]
 8010686:	2b02      	cmp	r3, #2
 8010688:	d138      	bne.n	80106fc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801068a:	68bb      	ldr	r3, [r7, #8]
 801068c:	015a      	lsls	r2, r3, #5
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	4413      	add	r3, r2
 8010692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	68ba      	ldr	r2, [r7, #8]
 801069a:	0151      	lsls	r1, r2, #5
 801069c:	68fa      	ldr	r2, [r7, #12]
 801069e:	440a      	add	r2, r1
 80106a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80106a8:	6013      	str	r3, [r2, #0]
 80106aa:	e027      	b.n	80106fc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80106ac:	68bb      	ldr	r3, [r7, #8]
 80106ae:	015a      	lsls	r2, r3, #5
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	4413      	add	r3, r2
 80106b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	68ba      	ldr	r2, [r7, #8]
 80106bc:	0151      	lsls	r1, r2, #5
 80106be:	68fa      	ldr	r2, [r7, #12]
 80106c0:	440a      	add	r2, r1
 80106c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80106ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	78db      	ldrb	r3, [r3, #3]
 80106d0:	2b03      	cmp	r3, #3
 80106d2:	d003      	beq.n	80106dc <USB_EPClearStall+0x9e>
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	78db      	ldrb	r3, [r3, #3]
 80106d8:	2b02      	cmp	r3, #2
 80106da:	d10f      	bne.n	80106fc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80106dc:	68bb      	ldr	r3, [r7, #8]
 80106de:	015a      	lsls	r2, r3, #5
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	4413      	add	r3, r2
 80106e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	68ba      	ldr	r2, [r7, #8]
 80106ec:	0151      	lsls	r1, r2, #5
 80106ee:	68fa      	ldr	r2, [r7, #12]
 80106f0:	440a      	add	r2, r1
 80106f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80106fa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80106fc:	2300      	movs	r3, #0
}
 80106fe:	4618      	mov	r0, r3
 8010700:	3714      	adds	r7, #20
 8010702:	46bd      	mov	sp, r7
 8010704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010708:	4770      	bx	lr

0801070a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801070a:	b480      	push	{r7}
 801070c:	b085      	sub	sp, #20
 801070e:	af00      	add	r7, sp, #0
 8010710:	6078      	str	r0, [r7, #4]
 8010712:	460b      	mov	r3, r1
 8010714:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	68fa      	ldr	r2, [r7, #12]
 8010724:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010728:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801072c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010734:	681a      	ldr	r2, [r3, #0]
 8010736:	78fb      	ldrb	r3, [r7, #3]
 8010738:	011b      	lsls	r3, r3, #4
 801073a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801073e:	68f9      	ldr	r1, [r7, #12]
 8010740:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010744:	4313      	orrs	r3, r2
 8010746:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010748:	2300      	movs	r3, #0
}
 801074a:	4618      	mov	r0, r3
 801074c:	3714      	adds	r7, #20
 801074e:	46bd      	mov	sp, r7
 8010750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010754:	4770      	bx	lr

08010756 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010756:	b480      	push	{r7}
 8010758:	b085      	sub	sp, #20
 801075a:	af00      	add	r7, sp, #0
 801075c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	68fa      	ldr	r2, [r7, #12]
 801076c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010770:	f023 0303 	bic.w	r3, r3, #3
 8010774:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801077c:	685b      	ldr	r3, [r3, #4]
 801077e:	68fa      	ldr	r2, [r7, #12]
 8010780:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010784:	f023 0302 	bic.w	r3, r3, #2
 8010788:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801078a:	2300      	movs	r3, #0
}
 801078c:	4618      	mov	r0, r3
 801078e:	3714      	adds	r7, #20
 8010790:	46bd      	mov	sp, r7
 8010792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010796:	4770      	bx	lr

08010798 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010798:	b480      	push	{r7}
 801079a:	b085      	sub	sp, #20
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	68fa      	ldr	r2, [r7, #12]
 80107ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80107b2:	f023 0303 	bic.w	r3, r3, #3
 80107b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80107be:	685b      	ldr	r3, [r3, #4]
 80107c0:	68fa      	ldr	r2, [r7, #12]
 80107c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80107c6:	f043 0302 	orr.w	r3, r3, #2
 80107ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80107cc:	2300      	movs	r3, #0
}
 80107ce:	4618      	mov	r0, r3
 80107d0:	3714      	adds	r7, #20
 80107d2:	46bd      	mov	sp, r7
 80107d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d8:	4770      	bx	lr

080107da <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80107da:	b480      	push	{r7}
 80107dc:	b085      	sub	sp, #20
 80107de:	af00      	add	r7, sp, #0
 80107e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	695b      	ldr	r3, [r3, #20]
 80107e6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	699b      	ldr	r3, [r3, #24]
 80107ec:	68fa      	ldr	r2, [r7, #12]
 80107ee:	4013      	ands	r3, r2
 80107f0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80107f2:	68fb      	ldr	r3, [r7, #12]
}
 80107f4:	4618      	mov	r0, r3
 80107f6:	3714      	adds	r7, #20
 80107f8:	46bd      	mov	sp, r7
 80107fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fe:	4770      	bx	lr

08010800 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010800:	b480      	push	{r7}
 8010802:	b085      	sub	sp, #20
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010812:	699b      	ldr	r3, [r3, #24]
 8010814:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801081c:	69db      	ldr	r3, [r3, #28]
 801081e:	68ba      	ldr	r2, [r7, #8]
 8010820:	4013      	ands	r3, r2
 8010822:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	0c1b      	lsrs	r3, r3, #16
}
 8010828:	4618      	mov	r0, r3
 801082a:	3714      	adds	r7, #20
 801082c:	46bd      	mov	sp, r7
 801082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010832:	4770      	bx	lr

08010834 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010834:	b480      	push	{r7}
 8010836:	b085      	sub	sp, #20
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010846:	699b      	ldr	r3, [r3, #24]
 8010848:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010850:	69db      	ldr	r3, [r3, #28]
 8010852:	68ba      	ldr	r2, [r7, #8]
 8010854:	4013      	ands	r3, r2
 8010856:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010858:	68bb      	ldr	r3, [r7, #8]
 801085a:	b29b      	uxth	r3, r3
}
 801085c:	4618      	mov	r0, r3
 801085e:	3714      	adds	r7, #20
 8010860:	46bd      	mov	sp, r7
 8010862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010866:	4770      	bx	lr

08010868 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010868:	b480      	push	{r7}
 801086a:	b085      	sub	sp, #20
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
 8010870:	460b      	mov	r3, r1
 8010872:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010878:	78fb      	ldrb	r3, [r7, #3]
 801087a:	015a      	lsls	r2, r3, #5
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	4413      	add	r3, r2
 8010880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010884:	689b      	ldr	r3, [r3, #8]
 8010886:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801088e:	695b      	ldr	r3, [r3, #20]
 8010890:	68ba      	ldr	r2, [r7, #8]
 8010892:	4013      	ands	r3, r2
 8010894:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010896:	68bb      	ldr	r3, [r7, #8]
}
 8010898:	4618      	mov	r0, r3
 801089a:	3714      	adds	r7, #20
 801089c:	46bd      	mov	sp, r7
 801089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a2:	4770      	bx	lr

080108a4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80108a4:	b480      	push	{r7}
 80108a6:	b087      	sub	sp, #28
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	460b      	mov	r3, r1
 80108ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80108b4:	697b      	ldr	r3, [r7, #20]
 80108b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80108ba:	691b      	ldr	r3, [r3, #16]
 80108bc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80108be:	697b      	ldr	r3, [r7, #20]
 80108c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80108c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108c6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80108c8:	78fb      	ldrb	r3, [r7, #3]
 80108ca:	f003 030f 	and.w	r3, r3, #15
 80108ce:	68fa      	ldr	r2, [r7, #12]
 80108d0:	fa22 f303 	lsr.w	r3, r2, r3
 80108d4:	01db      	lsls	r3, r3, #7
 80108d6:	b2db      	uxtb	r3, r3
 80108d8:	693a      	ldr	r2, [r7, #16]
 80108da:	4313      	orrs	r3, r2
 80108dc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80108de:	78fb      	ldrb	r3, [r7, #3]
 80108e0:	015a      	lsls	r2, r3, #5
 80108e2:	697b      	ldr	r3, [r7, #20]
 80108e4:	4413      	add	r3, r2
 80108e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108ea:	689b      	ldr	r3, [r3, #8]
 80108ec:	693a      	ldr	r2, [r7, #16]
 80108ee:	4013      	ands	r3, r2
 80108f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80108f2:	68bb      	ldr	r3, [r7, #8]
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	371c      	adds	r7, #28
 80108f8:	46bd      	mov	sp, r7
 80108fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fe:	4770      	bx	lr

08010900 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010900:	b480      	push	{r7}
 8010902:	b083      	sub	sp, #12
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	695b      	ldr	r3, [r3, #20]
 801090c:	f003 0301 	and.w	r3, r3, #1
}
 8010910:	4618      	mov	r0, r3
 8010912:	370c      	adds	r7, #12
 8010914:	46bd      	mov	sp, r7
 8010916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091a:	4770      	bx	lr

0801091c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801091c:	b480      	push	{r7}
 801091e:	b085      	sub	sp, #20
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	68fa      	ldr	r2, [r7, #12]
 8010932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010936:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801093a:	f023 0307 	bic.w	r3, r3, #7
 801093e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010946:	685b      	ldr	r3, [r3, #4]
 8010948:	68fa      	ldr	r2, [r7, #12]
 801094a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801094e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010952:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010954:	2300      	movs	r3, #0
}
 8010956:	4618      	mov	r0, r3
 8010958:	3714      	adds	r7, #20
 801095a:	46bd      	mov	sp, r7
 801095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010960:	4770      	bx	lr
	...

08010964 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010964:	b480      	push	{r7}
 8010966:	b087      	sub	sp, #28
 8010968:	af00      	add	r7, sp, #0
 801096a:	60f8      	str	r0, [r7, #12]
 801096c:	460b      	mov	r3, r1
 801096e:	607a      	str	r2, [r7, #4]
 8010970:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	333c      	adds	r3, #60	; 0x3c
 801097a:	3304      	adds	r3, #4
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010980:	693b      	ldr	r3, [r7, #16]
 8010982:	4a26      	ldr	r2, [pc, #152]	; (8010a1c <USB_EP0_OutStart+0xb8>)
 8010984:	4293      	cmp	r3, r2
 8010986:	d90a      	bls.n	801099e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010988:	697b      	ldr	r3, [r7, #20]
 801098a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010994:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010998:	d101      	bne.n	801099e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801099a:	2300      	movs	r3, #0
 801099c:	e037      	b.n	8010a0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801099e:	697b      	ldr	r3, [r7, #20]
 80109a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109a4:	461a      	mov	r2, r3
 80109a6:	2300      	movs	r3, #0
 80109a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80109aa:	697b      	ldr	r3, [r7, #20]
 80109ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109b0:	691b      	ldr	r3, [r3, #16]
 80109b2:	697a      	ldr	r2, [r7, #20]
 80109b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80109b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80109bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80109be:	697b      	ldr	r3, [r7, #20]
 80109c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109c4:	691b      	ldr	r3, [r3, #16]
 80109c6:	697a      	ldr	r2, [r7, #20]
 80109c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80109cc:	f043 0318 	orr.w	r3, r3, #24
 80109d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80109d2:	697b      	ldr	r3, [r7, #20]
 80109d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109d8:	691b      	ldr	r3, [r3, #16]
 80109da:	697a      	ldr	r2, [r7, #20]
 80109dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80109e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80109e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80109e6:	7afb      	ldrb	r3, [r7, #11]
 80109e8:	2b01      	cmp	r3, #1
 80109ea:	d10f      	bne.n	8010a0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80109ec:	697b      	ldr	r3, [r7, #20]
 80109ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109f2:	461a      	mov	r2, r3
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80109f8:	697b      	ldr	r3, [r7, #20]
 80109fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	697a      	ldr	r2, [r7, #20]
 8010a02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a06:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010a0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010a0c:	2300      	movs	r3, #0
}
 8010a0e:	4618      	mov	r0, r3
 8010a10:	371c      	adds	r7, #28
 8010a12:	46bd      	mov	sp, r7
 8010a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a18:	4770      	bx	lr
 8010a1a:	bf00      	nop
 8010a1c:	4f54300a 	.word	0x4f54300a

08010a20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010a20:	b480      	push	{r7}
 8010a22:	b085      	sub	sp, #20
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8010a28:	2300      	movs	r3, #0
 8010a2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	3301      	adds	r3, #1
 8010a30:	60fb      	str	r3, [r7, #12]
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	4a13      	ldr	r2, [pc, #76]	; (8010a84 <USB_CoreReset+0x64>)
 8010a36:	4293      	cmp	r3, r2
 8010a38:	d901      	bls.n	8010a3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010a3a:	2303      	movs	r3, #3
 8010a3c:	e01b      	b.n	8010a76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	691b      	ldr	r3, [r3, #16]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	daf2      	bge.n	8010a2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010a46:	2300      	movs	r3, #0
 8010a48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	691b      	ldr	r3, [r3, #16]
 8010a4e:	f043 0201 	orr.w	r2, r3, #1
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	3301      	adds	r3, #1
 8010a5a:	60fb      	str	r3, [r7, #12]
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	4a09      	ldr	r2, [pc, #36]	; (8010a84 <USB_CoreReset+0x64>)
 8010a60:	4293      	cmp	r3, r2
 8010a62:	d901      	bls.n	8010a68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010a64:	2303      	movs	r3, #3
 8010a66:	e006      	b.n	8010a76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	691b      	ldr	r3, [r3, #16]
 8010a6c:	f003 0301 	and.w	r3, r3, #1
 8010a70:	2b01      	cmp	r3, #1
 8010a72:	d0f0      	beq.n	8010a56 <USB_CoreReset+0x36>

  return HAL_OK;
 8010a74:	2300      	movs	r3, #0
}
 8010a76:	4618      	mov	r0, r3
 8010a78:	3714      	adds	r7, #20
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a80:	4770      	bx	lr
 8010a82:	bf00      	nop
 8010a84:	00030d40 	.word	0x00030d40

08010a88 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b084      	sub	sp, #16
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
 8010a90:	460b      	mov	r3, r1
 8010a92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010a94:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010a98:	f004 ffd0 	bl	8015a3c <malloc>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d105      	bne.n	8010ab2 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8010aae:	2302      	movs	r3, #2
 8010ab0:	e066      	b.n	8010b80 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	68fa      	ldr	r2, [r7, #12]
 8010ab6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	7c1b      	ldrb	r3, [r3, #16]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d119      	bne.n	8010af6 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010ac2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010ac6:	2202      	movs	r2, #2
 8010ac8:	2181      	movs	r1, #129	; 0x81
 8010aca:	6878      	ldr	r0, [r7, #4]
 8010acc:	f004 fe3d 	bl	801574a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2201      	movs	r2, #1
 8010ad4:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010ad6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010ada:	2202      	movs	r2, #2
 8010adc:	2101      	movs	r1, #1
 8010ade:	6878      	ldr	r0, [r7, #4]
 8010ae0:	f004 fe33 	bl	801574a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	2201      	movs	r2, #1
 8010ae8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2210      	movs	r2, #16
 8010af0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8010af4:	e016      	b.n	8010b24 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010af6:	2340      	movs	r3, #64	; 0x40
 8010af8:	2202      	movs	r2, #2
 8010afa:	2181      	movs	r1, #129	; 0x81
 8010afc:	6878      	ldr	r0, [r7, #4]
 8010afe:	f004 fe24 	bl	801574a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	2201      	movs	r2, #1
 8010b06:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010b08:	2340      	movs	r3, #64	; 0x40
 8010b0a:	2202      	movs	r2, #2
 8010b0c:	2101      	movs	r1, #1
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	f004 fe1b 	bl	801574a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	2201      	movs	r2, #1
 8010b18:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2210      	movs	r2, #16
 8010b20:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010b24:	2308      	movs	r3, #8
 8010b26:	2203      	movs	r2, #3
 8010b28:	2182      	movs	r1, #130	; 0x82
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	f004 fe0d 	bl	801574a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2201      	movs	r2, #1
 8010b34:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	2200      	movs	r2, #0
 8010b46:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	7c1b      	ldrb	r3, [r3, #16]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d109      	bne.n	8010b6e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010b60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010b64:	2101      	movs	r1, #1
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f004 fede 	bl	8015928 <USBD_LL_PrepareReceive>
 8010b6c:	e007      	b.n	8010b7e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010b74:	2340      	movs	r3, #64	; 0x40
 8010b76:	2101      	movs	r1, #1
 8010b78:	6878      	ldr	r0, [r7, #4]
 8010b7a:	f004 fed5 	bl	8015928 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010b7e:	2300      	movs	r3, #0
}
 8010b80:	4618      	mov	r0, r3
 8010b82:	3710      	adds	r7, #16
 8010b84:	46bd      	mov	sp, r7
 8010b86:	bd80      	pop	{r7, pc}

08010b88 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b084      	sub	sp, #16
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
 8010b90:	460b      	mov	r3, r1
 8010b92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8010b94:	2300      	movs	r3, #0
 8010b96:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8010b98:	2181      	movs	r1, #129	; 0x81
 8010b9a:	6878      	ldr	r0, [r7, #4]
 8010b9c:	f004 fdfb 	bl	8015796 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8010ba6:	2101      	movs	r1, #1
 8010ba8:	6878      	ldr	r0, [r7, #4]
 8010baa:	f004 fdf4 	bl	8015796 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8010bb6:	2182      	movs	r1, #130	; 0x82
 8010bb8:	6878      	ldr	r0, [r7, #4]
 8010bba:	f004 fdec 	bl	8015796 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	2200      	movs	r2, #0
 8010bca:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d00e      	beq.n	8010bf6 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010bde:	685b      	ldr	r3, [r3, #4]
 8010be0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010be8:	4618      	mov	r0, r3
 8010bea:	f004 ff2f 	bl	8015a4c <free>
    pdev->pClassData = NULL;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8010bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	3710      	adds	r7, #16
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd80      	pop	{r7, pc}

08010c00 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b086      	sub	sp, #24
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
 8010c08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010c10:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8010c12:	2300      	movs	r3, #0
 8010c14:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8010c16:	2300      	movs	r3, #0
 8010c18:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010c1e:	683b      	ldr	r3, [r7, #0]
 8010c20:	781b      	ldrb	r3, [r3, #0]
 8010c22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d03a      	beq.n	8010ca0 <USBD_CDC_Setup+0xa0>
 8010c2a:	2b20      	cmp	r3, #32
 8010c2c:	f040 8097 	bne.w	8010d5e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8010c30:	683b      	ldr	r3, [r7, #0]
 8010c32:	88db      	ldrh	r3, [r3, #6]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d029      	beq.n	8010c8c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	781b      	ldrb	r3, [r3, #0]
 8010c3c:	b25b      	sxtb	r3, r3
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	da11      	bge.n	8010c66 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010c48:	689b      	ldr	r3, [r3, #8]
 8010c4a:	683a      	ldr	r2, [r7, #0]
 8010c4c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8010c4e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010c50:	683a      	ldr	r2, [r7, #0]
 8010c52:	88d2      	ldrh	r2, [r2, #6]
 8010c54:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010c56:	6939      	ldr	r1, [r7, #16]
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	88db      	ldrh	r3, [r3, #6]
 8010c5c:	461a      	mov	r2, r3
 8010c5e:	6878      	ldr	r0, [r7, #4]
 8010c60:	f001 fa9d 	bl	801219e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8010c64:	e082      	b.n	8010d6c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	785a      	ldrb	r2, [r3, #1]
 8010c6a:	693b      	ldr	r3, [r7, #16]
 8010c6c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	88db      	ldrh	r3, [r3, #6]
 8010c74:	b2da      	uxtb	r2, r3
 8010c76:	693b      	ldr	r3, [r7, #16]
 8010c78:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010c7c:	6939      	ldr	r1, [r7, #16]
 8010c7e:	683b      	ldr	r3, [r7, #0]
 8010c80:	88db      	ldrh	r3, [r3, #6]
 8010c82:	461a      	mov	r2, r3
 8010c84:	6878      	ldr	r0, [r7, #4]
 8010c86:	f001 fab6 	bl	80121f6 <USBD_CtlPrepareRx>
    break;
 8010c8a:	e06f      	b.n	8010d6c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010c92:	689b      	ldr	r3, [r3, #8]
 8010c94:	683a      	ldr	r2, [r7, #0]
 8010c96:	7850      	ldrb	r0, [r2, #1]
 8010c98:	2200      	movs	r2, #0
 8010c9a:	6839      	ldr	r1, [r7, #0]
 8010c9c:	4798      	blx	r3
    break;
 8010c9e:	e065      	b.n	8010d6c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8010ca0:	683b      	ldr	r3, [r7, #0]
 8010ca2:	785b      	ldrb	r3, [r3, #1]
 8010ca4:	2b0b      	cmp	r3, #11
 8010ca6:	d84f      	bhi.n	8010d48 <USBD_CDC_Setup+0x148>
 8010ca8:	a201      	add	r2, pc, #4	; (adr r2, 8010cb0 <USBD_CDC_Setup+0xb0>)
 8010caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cae:	bf00      	nop
 8010cb0:	08010ce1 	.word	0x08010ce1
 8010cb4:	08010d57 	.word	0x08010d57
 8010cb8:	08010d49 	.word	0x08010d49
 8010cbc:	08010d49 	.word	0x08010d49
 8010cc0:	08010d49 	.word	0x08010d49
 8010cc4:	08010d49 	.word	0x08010d49
 8010cc8:	08010d49 	.word	0x08010d49
 8010ccc:	08010d49 	.word	0x08010d49
 8010cd0:	08010d49 	.word	0x08010d49
 8010cd4:	08010d49 	.word	0x08010d49
 8010cd8:	08010d09 	.word	0x08010d09
 8010cdc:	08010d31 	.word	0x08010d31
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ce6:	2b03      	cmp	r3, #3
 8010ce8:	d107      	bne.n	8010cfa <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010cea:	f107 030c 	add.w	r3, r7, #12
 8010cee:	2202      	movs	r2, #2
 8010cf0:	4619      	mov	r1, r3
 8010cf2:	6878      	ldr	r0, [r7, #4]
 8010cf4:	f001 fa53 	bl	801219e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010cf8:	e030      	b.n	8010d5c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8010cfa:	6839      	ldr	r1, [r7, #0]
 8010cfc:	6878      	ldr	r0, [r7, #4]
 8010cfe:	f001 f9dd 	bl	80120bc <USBD_CtlError>
        ret = USBD_FAIL;
 8010d02:	2303      	movs	r3, #3
 8010d04:	75fb      	strb	r3, [r7, #23]
      break;
 8010d06:	e029      	b.n	8010d5c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d0e:	2b03      	cmp	r3, #3
 8010d10:	d107      	bne.n	8010d22 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010d12:	f107 030f 	add.w	r3, r7, #15
 8010d16:	2201      	movs	r2, #1
 8010d18:	4619      	mov	r1, r3
 8010d1a:	6878      	ldr	r0, [r7, #4]
 8010d1c:	f001 fa3f 	bl	801219e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010d20:	e01c      	b.n	8010d5c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8010d22:	6839      	ldr	r1, [r7, #0]
 8010d24:	6878      	ldr	r0, [r7, #4]
 8010d26:	f001 f9c9 	bl	80120bc <USBD_CtlError>
        ret = USBD_FAIL;
 8010d2a:	2303      	movs	r3, #3
 8010d2c:	75fb      	strb	r3, [r7, #23]
      break;
 8010d2e:	e015      	b.n	8010d5c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d36:	2b03      	cmp	r3, #3
 8010d38:	d00f      	beq.n	8010d5a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8010d3a:	6839      	ldr	r1, [r7, #0]
 8010d3c:	6878      	ldr	r0, [r7, #4]
 8010d3e:	f001 f9bd 	bl	80120bc <USBD_CtlError>
        ret = USBD_FAIL;
 8010d42:	2303      	movs	r3, #3
 8010d44:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8010d46:	e008      	b.n	8010d5a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8010d48:	6839      	ldr	r1, [r7, #0]
 8010d4a:	6878      	ldr	r0, [r7, #4]
 8010d4c:	f001 f9b6 	bl	80120bc <USBD_CtlError>
      ret = USBD_FAIL;
 8010d50:	2303      	movs	r3, #3
 8010d52:	75fb      	strb	r3, [r7, #23]
      break;
 8010d54:	e002      	b.n	8010d5c <USBD_CDC_Setup+0x15c>
      break;
 8010d56:	bf00      	nop
 8010d58:	e008      	b.n	8010d6c <USBD_CDC_Setup+0x16c>
      break;
 8010d5a:	bf00      	nop
    }
    break;
 8010d5c:	e006      	b.n	8010d6c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8010d5e:	6839      	ldr	r1, [r7, #0]
 8010d60:	6878      	ldr	r0, [r7, #4]
 8010d62:	f001 f9ab 	bl	80120bc <USBD_CtlError>
    ret = USBD_FAIL;
 8010d66:	2303      	movs	r3, #3
 8010d68:	75fb      	strb	r3, [r7, #23]
    break;
 8010d6a:	bf00      	nop
  }

  return (uint8_t)ret;
 8010d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d6e:	4618      	mov	r0, r3
 8010d70:	3718      	adds	r7, #24
 8010d72:	46bd      	mov	sp, r7
 8010d74:	bd80      	pop	{r7, pc}
 8010d76:	bf00      	nop

08010d78 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b084      	sub	sp, #16
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
 8010d80:	460b      	mov	r3, r1
 8010d82:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010d8a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d101      	bne.n	8010d9a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010d96:	2303      	movs	r3, #3
 8010d98:	e049      	b.n	8010e2e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010da0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010da2:	78fa      	ldrb	r2, [r7, #3]
 8010da4:	6879      	ldr	r1, [r7, #4]
 8010da6:	4613      	mov	r3, r2
 8010da8:	009b      	lsls	r3, r3, #2
 8010daa:	4413      	add	r3, r2
 8010dac:	009b      	lsls	r3, r3, #2
 8010dae:	440b      	add	r3, r1
 8010db0:	3318      	adds	r3, #24
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d029      	beq.n	8010e0c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010db8:	78fa      	ldrb	r2, [r7, #3]
 8010dba:	6879      	ldr	r1, [r7, #4]
 8010dbc:	4613      	mov	r3, r2
 8010dbe:	009b      	lsls	r3, r3, #2
 8010dc0:	4413      	add	r3, r2
 8010dc2:	009b      	lsls	r3, r3, #2
 8010dc4:	440b      	add	r3, r1
 8010dc6:	3318      	adds	r3, #24
 8010dc8:	681a      	ldr	r2, [r3, #0]
 8010dca:	78f9      	ldrb	r1, [r7, #3]
 8010dcc:	68f8      	ldr	r0, [r7, #12]
 8010dce:	460b      	mov	r3, r1
 8010dd0:	00db      	lsls	r3, r3, #3
 8010dd2:	1a5b      	subs	r3, r3, r1
 8010dd4:	009b      	lsls	r3, r3, #2
 8010dd6:	4403      	add	r3, r0
 8010dd8:	3344      	adds	r3, #68	; 0x44
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	fbb2 f1f3 	udiv	r1, r2, r3
 8010de0:	fb03 f301 	mul.w	r3, r3, r1
 8010de4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d110      	bne.n	8010e0c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8010dea:	78fa      	ldrb	r2, [r7, #3]
 8010dec:	6879      	ldr	r1, [r7, #4]
 8010dee:	4613      	mov	r3, r2
 8010df0:	009b      	lsls	r3, r3, #2
 8010df2:	4413      	add	r3, r2
 8010df4:	009b      	lsls	r3, r3, #2
 8010df6:	440b      	add	r3, r1
 8010df8:	3318      	adds	r3, #24
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010dfe:	78f9      	ldrb	r1, [r7, #3]
 8010e00:	2300      	movs	r3, #0
 8010e02:	2200      	movs	r2, #0
 8010e04:	6878      	ldr	r0, [r7, #4]
 8010e06:	f004 fd6e 	bl	80158e6 <USBD_LL_Transmit>
 8010e0a:	e00f      	b.n	8010e2c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010e0c:	68bb      	ldr	r3, [r7, #8]
 8010e0e:	2200      	movs	r2, #0
 8010e10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010e1a:	691b      	ldr	r3, [r3, #16]
 8010e1c:	68ba      	ldr	r2, [r7, #8]
 8010e1e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010e22:	68ba      	ldr	r2, [r7, #8]
 8010e24:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010e28:	78fa      	ldrb	r2, [r7, #3]
 8010e2a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8010e2c:	2300      	movs	r3, #0
}
 8010e2e:	4618      	mov	r0, r3
 8010e30:	3710      	adds	r7, #16
 8010e32:	46bd      	mov	sp, r7
 8010e34:	bd80      	pop	{r7, pc}

08010e36 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010e36:	b580      	push	{r7, lr}
 8010e38:	b084      	sub	sp, #16
 8010e3a:	af00      	add	r7, sp, #0
 8010e3c:	6078      	str	r0, [r7, #4]
 8010e3e:	460b      	mov	r3, r1
 8010e40:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e48:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d101      	bne.n	8010e58 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010e54:	2303      	movs	r3, #3
 8010e56:	e015      	b.n	8010e84 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010e58:	78fb      	ldrb	r3, [r7, #3]
 8010e5a:	4619      	mov	r1, r3
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f004 fd84 	bl	801596a <USBD_LL_GetRxDataSize>
 8010e62:	4602      	mov	r2, r0
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010e70:	68db      	ldr	r3, [r3, #12]
 8010e72:	68fa      	ldr	r2, [r7, #12]
 8010e74:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010e78:	68fa      	ldr	r2, [r7, #12]
 8010e7a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010e7e:	4611      	mov	r1, r2
 8010e80:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010e82:	2300      	movs	r3, #0
}
 8010e84:	4618      	mov	r0, r3
 8010e86:	3710      	adds	r7, #16
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	bd80      	pop	{r7, pc}

08010e8c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b084      	sub	sp, #16
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e9a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d015      	beq.n	8010ed2 <USBD_CDC_EP0_RxReady+0x46>
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010eac:	2bff      	cmp	r3, #255	; 0xff
 8010eae:	d010      	beq.n	8010ed2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010eb6:	689b      	ldr	r3, [r3, #8]
 8010eb8:	68fa      	ldr	r2, [r7, #12]
 8010eba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8010ebe:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8010ec0:	68fa      	ldr	r2, [r7, #12]
 8010ec2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010ec6:	b292      	uxth	r2, r2
 8010ec8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	22ff      	movs	r2, #255	; 0xff
 8010ece:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8010ed2:	2300      	movs	r3, #0
}
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	3710      	adds	r7, #16
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd80      	pop	{r7, pc}

08010edc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010edc:	b480      	push	{r7}
 8010ede:	b083      	sub	sp, #12
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	2243      	movs	r2, #67	; 0x43
 8010ee8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8010eea:	4b03      	ldr	r3, [pc, #12]	; (8010ef8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8010eec:	4618      	mov	r0, r3
 8010eee:	370c      	adds	r7, #12
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef6:	4770      	bx	lr
 8010ef8:	200008bc 	.word	0x200008bc

08010efc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010efc:	b480      	push	{r7}
 8010efe:	b083      	sub	sp, #12
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	2243      	movs	r2, #67	; 0x43
 8010f08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8010f0a:	4b03      	ldr	r3, [pc, #12]	; (8010f18 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	370c      	adds	r7, #12
 8010f10:	46bd      	mov	sp, r7
 8010f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f16:	4770      	bx	lr
 8010f18:	20000878 	.word	0x20000878

08010f1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010f1c:	b480      	push	{r7}
 8010f1e:	b083      	sub	sp, #12
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2243      	movs	r2, #67	; 0x43
 8010f28:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8010f2a:	4b03      	ldr	r3, [pc, #12]	; (8010f38 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	370c      	adds	r7, #12
 8010f30:	46bd      	mov	sp, r7
 8010f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f36:	4770      	bx	lr
 8010f38:	20000900 	.word	0x20000900

08010f3c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010f3c:	b480      	push	{r7}
 8010f3e:	b083      	sub	sp, #12
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	220a      	movs	r2, #10
 8010f48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010f4a:	4b03      	ldr	r3, [pc, #12]	; (8010f58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	370c      	adds	r7, #12
 8010f50:	46bd      	mov	sp, r7
 8010f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f56:	4770      	bx	lr
 8010f58:	20000834 	.word	0x20000834

08010f5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010f5c:	b480      	push	{r7}
 8010f5e:	b083      	sub	sp, #12
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
 8010f64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010f66:	683b      	ldr	r3, [r7, #0]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d101      	bne.n	8010f70 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010f6c:	2303      	movs	r3, #3
 8010f6e:	e004      	b.n	8010f7a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	683a      	ldr	r2, [r7, #0]
 8010f74:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8010f78:	2300      	movs	r3, #0
}
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	370c      	adds	r7, #12
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f84:	4770      	bx	lr

08010f86 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010f86:	b480      	push	{r7}
 8010f88:	b087      	sub	sp, #28
 8010f8a:	af00      	add	r7, sp, #0
 8010f8c:	60f8      	str	r0, [r7, #12]
 8010f8e:	60b9      	str	r1, [r7, #8]
 8010f90:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f98:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8010f9a:	697b      	ldr	r3, [r7, #20]
 8010f9c:	68ba      	ldr	r2, [r7, #8]
 8010f9e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010fa2:	697b      	ldr	r3, [r7, #20]
 8010fa4:	687a      	ldr	r2, [r7, #4]
 8010fa6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8010faa:	2300      	movs	r3, #0
}
 8010fac:	4618      	mov	r0, r3
 8010fae:	371c      	adds	r7, #28
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb6:	4770      	bx	lr

08010fb8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010fb8:	b480      	push	{r7}
 8010fba:	b085      	sub	sp, #20
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
 8010fc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010fc8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	683a      	ldr	r2, [r7, #0]
 8010fce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8010fd2:	2300      	movs	r3, #0
}
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	3714      	adds	r7, #20
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fde:	4770      	bx	lr

08010fe0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b084      	sub	sp, #16
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010fee:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8010ff0:	2301      	movs	r3, #1
 8010ff2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d101      	bne.n	8011002 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010ffe:	2303      	movs	r3, #3
 8011000:	e01a      	b.n	8011038 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8011002:	68bb      	ldr	r3, [r7, #8]
 8011004:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011008:	2b00      	cmp	r3, #0
 801100a:	d114      	bne.n	8011036 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801100c:	68bb      	ldr	r3, [r7, #8]
 801100e:	2201      	movs	r2, #1
 8011010:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8011014:	68bb      	ldr	r3, [r7, #8]
 8011016:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 801101e:	68bb      	ldr	r3, [r7, #8]
 8011020:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011024:	68bb      	ldr	r3, [r7, #8]
 8011026:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801102a:	2181      	movs	r1, #129	; 0x81
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f004 fc5a 	bl	80158e6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8011032:	2300      	movs	r3, #0
 8011034:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011036:	7bfb      	ldrb	r3, [r7, #15]
}
 8011038:	4618      	mov	r0, r3
 801103a:	3710      	adds	r7, #16
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}

08011040 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b084      	sub	sp, #16
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801104e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011056:	2b00      	cmp	r3, #0
 8011058:	d101      	bne.n	801105e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801105a:	2303      	movs	r3, #3
 801105c:	e016      	b.n	801108c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	7c1b      	ldrb	r3, [r3, #16]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d109      	bne.n	801107a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801106c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011070:	2101      	movs	r1, #1
 8011072:	6878      	ldr	r0, [r7, #4]
 8011074:	f004 fc58 	bl	8015928 <USBD_LL_PrepareReceive>
 8011078:	e007      	b.n	801108a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011080:	2340      	movs	r3, #64	; 0x40
 8011082:	2101      	movs	r1, #1
 8011084:	6878      	ldr	r0, [r7, #4]
 8011086:	f004 fc4f 	bl	8015928 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801108a:	2300      	movs	r3, #0
}
 801108c:	4618      	mov	r0, r3
 801108e:	3710      	adds	r7, #16
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}

08011094 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b086      	sub	sp, #24
 8011098:	af00      	add	r7, sp, #0
 801109a:	60f8      	str	r0, [r7, #12]
 801109c:	60b9      	str	r1, [r7, #8]
 801109e:	4613      	mov	r3, r2
 80110a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d101      	bne.n	80110ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80110a8:	2303      	movs	r3, #3
 80110aa:	e025      	b.n	80110f8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d003      	beq.n	80110be <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	2200      	movs	r2, #0
 80110ba:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d003      	beq.n	80110d0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	2200      	movs	r2, #0
 80110cc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80110d0:	68bb      	ldr	r3, [r7, #8]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d003      	beq.n	80110de <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	68ba      	ldr	r2, [r7, #8]
 80110da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	2201      	movs	r2, #1
 80110e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	79fa      	ldrb	r2, [r7, #7]
 80110ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80110ec:	68f8      	ldr	r0, [r7, #12]
 80110ee:	f004 fac5 	bl	801567c <USBD_LL_Init>
 80110f2:	4603      	mov	r3, r0
 80110f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80110f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80110f8:	4618      	mov	r0, r3
 80110fa:	3718      	adds	r7, #24
 80110fc:	46bd      	mov	sp, r7
 80110fe:	bd80      	pop	{r7, pc}

08011100 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b084      	sub	sp, #16
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
 8011108:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801110a:	2300      	movs	r3, #0
 801110c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801110e:	683b      	ldr	r3, [r7, #0]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d101      	bne.n	8011118 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011114:	2303      	movs	r3, #3
 8011116:	e010      	b.n	801113a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	683a      	ldr	r2, [r7, #0]
 801111c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011128:	f107 020e 	add.w	r2, r7, #14
 801112c:	4610      	mov	r0, r2
 801112e:	4798      	blx	r3
 8011130:	4602      	mov	r2, r0
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8011138:	2300      	movs	r3, #0
}
 801113a:	4618      	mov	r0, r3
 801113c:	3710      	adds	r7, #16
 801113e:	46bd      	mov	sp, r7
 8011140:	bd80      	pop	{r7, pc}

08011142 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011142:	b580      	push	{r7, lr}
 8011144:	b082      	sub	sp, #8
 8011146:	af00      	add	r7, sp, #0
 8011148:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801114a:	6878      	ldr	r0, [r7, #4]
 801114c:	f004 fae2 	bl	8015714 <USBD_LL_Start>
 8011150:	4603      	mov	r3, r0
}
 8011152:	4618      	mov	r0, r3
 8011154:	3708      	adds	r7, #8
 8011156:	46bd      	mov	sp, r7
 8011158:	bd80      	pop	{r7, pc}

0801115a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801115a:	b480      	push	{r7}
 801115c:	b083      	sub	sp, #12
 801115e:	af00      	add	r7, sp, #0
 8011160:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011162:	2300      	movs	r3, #0
}
 8011164:	4618      	mov	r0, r3
 8011166:	370c      	adds	r7, #12
 8011168:	46bd      	mov	sp, r7
 801116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116e:	4770      	bx	lr

08011170 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011170:	b580      	push	{r7, lr}
 8011172:	b084      	sub	sp, #16
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
 8011178:	460b      	mov	r3, r1
 801117a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801117c:	2303      	movs	r3, #3
 801117e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011186:	2b00      	cmp	r3, #0
 8011188:	d009      	beq.n	801119e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	78fa      	ldrb	r2, [r7, #3]
 8011194:	4611      	mov	r1, r2
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	4798      	blx	r3
 801119a:	4603      	mov	r3, r0
 801119c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801119e:	7bfb      	ldrb	r3, [r7, #15]
}
 80111a0:	4618      	mov	r0, r3
 80111a2:	3710      	adds	r7, #16
 80111a4:	46bd      	mov	sp, r7
 80111a6:	bd80      	pop	{r7, pc}

080111a8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b082      	sub	sp, #8
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
 80111b0:	460b      	mov	r3, r1
 80111b2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d007      	beq.n	80111ce <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80111c4:	685b      	ldr	r3, [r3, #4]
 80111c6:	78fa      	ldrb	r2, [r7, #3]
 80111c8:	4611      	mov	r1, r2
 80111ca:	6878      	ldr	r0, [r7, #4]
 80111cc:	4798      	blx	r3
  }

  return USBD_OK;
 80111ce:	2300      	movs	r3, #0
}
 80111d0:	4618      	mov	r0, r3
 80111d2:	3708      	adds	r7, #8
 80111d4:	46bd      	mov	sp, r7
 80111d6:	bd80      	pop	{r7, pc}

080111d8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b084      	sub	sp, #16
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
 80111e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80111e8:	6839      	ldr	r1, [r7, #0]
 80111ea:	4618      	mov	r0, r3
 80111ec:	f000 ff2c 	bl	8012048 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	2201      	movs	r2, #1
 80111f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80111fe:	461a      	mov	r2, r3
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801120c:	f003 031f 	and.w	r3, r3, #31
 8011210:	2b01      	cmp	r3, #1
 8011212:	d00e      	beq.n	8011232 <USBD_LL_SetupStage+0x5a>
 8011214:	2b01      	cmp	r3, #1
 8011216:	d302      	bcc.n	801121e <USBD_LL_SetupStage+0x46>
 8011218:	2b02      	cmp	r3, #2
 801121a:	d014      	beq.n	8011246 <USBD_LL_SetupStage+0x6e>
 801121c:	e01d      	b.n	801125a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011224:	4619      	mov	r1, r3
 8011226:	6878      	ldr	r0, [r7, #4]
 8011228:	f000 fa18 	bl	801165c <USBD_StdDevReq>
 801122c:	4603      	mov	r3, r0
 801122e:	73fb      	strb	r3, [r7, #15]
      break;
 8011230:	e020      	b.n	8011274 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011238:	4619      	mov	r1, r3
 801123a:	6878      	ldr	r0, [r7, #4]
 801123c:	f000 fa7c 	bl	8011738 <USBD_StdItfReq>
 8011240:	4603      	mov	r3, r0
 8011242:	73fb      	strb	r3, [r7, #15]
      break;
 8011244:	e016      	b.n	8011274 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801124c:	4619      	mov	r1, r3
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	f000 fab8 	bl	80117c4 <USBD_StdEPReq>
 8011254:	4603      	mov	r3, r0
 8011256:	73fb      	strb	r3, [r7, #15]
      break;
 8011258:	e00c      	b.n	8011274 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011260:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011264:	b2db      	uxtb	r3, r3
 8011266:	4619      	mov	r1, r3
 8011268:	6878      	ldr	r0, [r7, #4]
 801126a:	f004 fab3 	bl	80157d4 <USBD_LL_StallEP>
 801126e:	4603      	mov	r3, r0
 8011270:	73fb      	strb	r3, [r7, #15]
      break;
 8011272:	bf00      	nop
  }

  return ret;
 8011274:	7bfb      	ldrb	r3, [r7, #15]
}
 8011276:	4618      	mov	r0, r3
 8011278:	3710      	adds	r7, #16
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}

0801127e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801127e:	b580      	push	{r7, lr}
 8011280:	b086      	sub	sp, #24
 8011282:	af00      	add	r7, sp, #0
 8011284:	60f8      	str	r0, [r7, #12]
 8011286:	460b      	mov	r3, r1
 8011288:	607a      	str	r2, [r7, #4]
 801128a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801128c:	7afb      	ldrb	r3, [r7, #11]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d137      	bne.n	8011302 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011298:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80112a0:	2b03      	cmp	r3, #3
 80112a2:	d14a      	bne.n	801133a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80112a4:	693b      	ldr	r3, [r7, #16]
 80112a6:	689a      	ldr	r2, [r3, #8]
 80112a8:	693b      	ldr	r3, [r7, #16]
 80112aa:	68db      	ldr	r3, [r3, #12]
 80112ac:	429a      	cmp	r2, r3
 80112ae:	d913      	bls.n	80112d8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80112b0:	693b      	ldr	r3, [r7, #16]
 80112b2:	689a      	ldr	r2, [r3, #8]
 80112b4:	693b      	ldr	r3, [r7, #16]
 80112b6:	68db      	ldr	r3, [r3, #12]
 80112b8:	1ad2      	subs	r2, r2, r3
 80112ba:	693b      	ldr	r3, [r7, #16]
 80112bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80112be:	693b      	ldr	r3, [r7, #16]
 80112c0:	68da      	ldr	r2, [r3, #12]
 80112c2:	693b      	ldr	r3, [r7, #16]
 80112c4:	689b      	ldr	r3, [r3, #8]
 80112c6:	4293      	cmp	r3, r2
 80112c8:	bf28      	it	cs
 80112ca:	4613      	movcs	r3, r2
 80112cc:	461a      	mov	r2, r3
 80112ce:	6879      	ldr	r1, [r7, #4]
 80112d0:	68f8      	ldr	r0, [r7, #12]
 80112d2:	f000 ffad 	bl	8012230 <USBD_CtlContinueRx>
 80112d6:	e030      	b.n	801133a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112de:	691b      	ldr	r3, [r3, #16]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d00a      	beq.n	80112fa <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80112ea:	2b03      	cmp	r3, #3
 80112ec:	d105      	bne.n	80112fa <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112f4:	691b      	ldr	r3, [r3, #16]
 80112f6:	68f8      	ldr	r0, [r7, #12]
 80112f8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80112fa:	68f8      	ldr	r0, [r7, #12]
 80112fc:	f000 ffa9 	bl	8012252 <USBD_CtlSendStatus>
 8011300:	e01b      	b.n	801133a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011308:	699b      	ldr	r3, [r3, #24]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d013      	beq.n	8011336 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8011314:	2b03      	cmp	r3, #3
 8011316:	d10e      	bne.n	8011336 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801131e:	699b      	ldr	r3, [r3, #24]
 8011320:	7afa      	ldrb	r2, [r7, #11]
 8011322:	4611      	mov	r1, r2
 8011324:	68f8      	ldr	r0, [r7, #12]
 8011326:	4798      	blx	r3
 8011328:	4603      	mov	r3, r0
 801132a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 801132c:	7dfb      	ldrb	r3, [r7, #23]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d003      	beq.n	801133a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8011332:	7dfb      	ldrb	r3, [r7, #23]
 8011334:	e002      	b.n	801133c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011336:	2303      	movs	r3, #3
 8011338:	e000      	b.n	801133c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 801133a:	2300      	movs	r3, #0
}
 801133c:	4618      	mov	r0, r3
 801133e:	3718      	adds	r7, #24
 8011340:	46bd      	mov	sp, r7
 8011342:	bd80      	pop	{r7, pc}

08011344 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b086      	sub	sp, #24
 8011348:	af00      	add	r7, sp, #0
 801134a:	60f8      	str	r0, [r7, #12]
 801134c:	460b      	mov	r3, r1
 801134e:	607a      	str	r2, [r7, #4]
 8011350:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011352:	7afb      	ldrb	r3, [r7, #11]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d16a      	bne.n	801142e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	3314      	adds	r3, #20
 801135c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011364:	2b02      	cmp	r3, #2
 8011366:	d155      	bne.n	8011414 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8011368:	693b      	ldr	r3, [r7, #16]
 801136a:	689a      	ldr	r2, [r3, #8]
 801136c:	693b      	ldr	r3, [r7, #16]
 801136e:	68db      	ldr	r3, [r3, #12]
 8011370:	429a      	cmp	r2, r3
 8011372:	d914      	bls.n	801139e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011374:	693b      	ldr	r3, [r7, #16]
 8011376:	689a      	ldr	r2, [r3, #8]
 8011378:	693b      	ldr	r3, [r7, #16]
 801137a:	68db      	ldr	r3, [r3, #12]
 801137c:	1ad2      	subs	r2, r2, r3
 801137e:	693b      	ldr	r3, [r7, #16]
 8011380:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011382:	693b      	ldr	r3, [r7, #16]
 8011384:	689b      	ldr	r3, [r3, #8]
 8011386:	461a      	mov	r2, r3
 8011388:	6879      	ldr	r1, [r7, #4]
 801138a:	68f8      	ldr	r0, [r7, #12]
 801138c:	f000 ff22 	bl	80121d4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011390:	2300      	movs	r3, #0
 8011392:	2200      	movs	r2, #0
 8011394:	2100      	movs	r1, #0
 8011396:	68f8      	ldr	r0, [r7, #12]
 8011398:	f004 fac6 	bl	8015928 <USBD_LL_PrepareReceive>
 801139c:	e03a      	b.n	8011414 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801139e:	693b      	ldr	r3, [r7, #16]
 80113a0:	68da      	ldr	r2, [r3, #12]
 80113a2:	693b      	ldr	r3, [r7, #16]
 80113a4:	689b      	ldr	r3, [r3, #8]
 80113a6:	429a      	cmp	r2, r3
 80113a8:	d11c      	bne.n	80113e4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80113aa:	693b      	ldr	r3, [r7, #16]
 80113ac:	685a      	ldr	r2, [r3, #4]
 80113ae:	693b      	ldr	r3, [r7, #16]
 80113b0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80113b2:	429a      	cmp	r2, r3
 80113b4:	d316      	bcc.n	80113e4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80113b6:	693b      	ldr	r3, [r7, #16]
 80113b8:	685a      	ldr	r2, [r3, #4]
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80113c0:	429a      	cmp	r2, r3
 80113c2:	d20f      	bcs.n	80113e4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80113c4:	2200      	movs	r2, #0
 80113c6:	2100      	movs	r1, #0
 80113c8:	68f8      	ldr	r0, [r7, #12]
 80113ca:	f000 ff03 	bl	80121d4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	2200      	movs	r2, #0
 80113d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80113d6:	2300      	movs	r3, #0
 80113d8:	2200      	movs	r2, #0
 80113da:	2100      	movs	r1, #0
 80113dc:	68f8      	ldr	r0, [r7, #12]
 80113de:	f004 faa3 	bl	8015928 <USBD_LL_PrepareReceive>
 80113e2:	e017      	b.n	8011414 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113ea:	68db      	ldr	r3, [r3, #12]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d00a      	beq.n	8011406 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80113f6:	2b03      	cmp	r3, #3
 80113f8:	d105      	bne.n	8011406 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011400:	68db      	ldr	r3, [r3, #12]
 8011402:	68f8      	ldr	r0, [r7, #12]
 8011404:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011406:	2180      	movs	r1, #128	; 0x80
 8011408:	68f8      	ldr	r0, [r7, #12]
 801140a:	f004 f9e3 	bl	80157d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801140e:	68f8      	ldr	r0, [r7, #12]
 8011410:	f000 ff32 	bl	8012278 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801141a:	2b01      	cmp	r3, #1
 801141c:	d123      	bne.n	8011466 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801141e:	68f8      	ldr	r0, [r7, #12]
 8011420:	f7ff fe9b 	bl	801115a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	2200      	movs	r2, #0
 8011428:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801142c:	e01b      	b.n	8011466 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011434:	695b      	ldr	r3, [r3, #20]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d013      	beq.n	8011462 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8011440:	2b03      	cmp	r3, #3
 8011442:	d10e      	bne.n	8011462 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801144a:	695b      	ldr	r3, [r3, #20]
 801144c:	7afa      	ldrb	r2, [r7, #11]
 801144e:	4611      	mov	r1, r2
 8011450:	68f8      	ldr	r0, [r7, #12]
 8011452:	4798      	blx	r3
 8011454:	4603      	mov	r3, r0
 8011456:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011458:	7dfb      	ldrb	r3, [r7, #23]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d003      	beq.n	8011466 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 801145e:	7dfb      	ldrb	r3, [r7, #23]
 8011460:	e002      	b.n	8011468 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011462:	2303      	movs	r3, #3
 8011464:	e000      	b.n	8011468 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8011466:	2300      	movs	r3, #0
}
 8011468:	4618      	mov	r0, r3
 801146a:	3718      	adds	r7, #24
 801146c:	46bd      	mov	sp, r7
 801146e:	bd80      	pop	{r7, pc}

08011470 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b082      	sub	sp, #8
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	2201      	movs	r2, #1
 801147c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	2200      	movs	r2, #0
 8011484:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	2200      	movs	r2, #0
 801148c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	2200      	movs	r2, #0
 8011492:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801149c:	2b00      	cmp	r3, #0
 801149e:	d009      	beq.n	80114b4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114a6:	685b      	ldr	r3, [r3, #4]
 80114a8:	687a      	ldr	r2, [r7, #4]
 80114aa:	6852      	ldr	r2, [r2, #4]
 80114ac:	b2d2      	uxtb	r2, r2
 80114ae:	4611      	mov	r1, r2
 80114b0:	6878      	ldr	r0, [r7, #4]
 80114b2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80114b4:	2340      	movs	r3, #64	; 0x40
 80114b6:	2200      	movs	r2, #0
 80114b8:	2100      	movs	r1, #0
 80114ba:	6878      	ldr	r0, [r7, #4]
 80114bc:	f004 f945 	bl	801574a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2201      	movs	r2, #1
 80114c4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	2240      	movs	r2, #64	; 0x40
 80114cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80114d0:	2340      	movs	r3, #64	; 0x40
 80114d2:	2200      	movs	r2, #0
 80114d4:	2180      	movs	r1, #128	; 0x80
 80114d6:	6878      	ldr	r0, [r7, #4]
 80114d8:	f004 f937 	bl	801574a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	2201      	movs	r2, #1
 80114e0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	2240      	movs	r2, #64	; 0x40
 80114e6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80114e8:	2300      	movs	r3, #0
}
 80114ea:	4618      	mov	r0, r3
 80114ec:	3708      	adds	r7, #8
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bd80      	pop	{r7, pc}

080114f2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80114f2:	b480      	push	{r7}
 80114f4:	b083      	sub	sp, #12
 80114f6:	af00      	add	r7, sp, #0
 80114f8:	6078      	str	r0, [r7, #4]
 80114fa:	460b      	mov	r3, r1
 80114fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	78fa      	ldrb	r2, [r7, #3]
 8011502:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011504:	2300      	movs	r3, #0
}
 8011506:	4618      	mov	r0, r3
 8011508:	370c      	adds	r7, #12
 801150a:	46bd      	mov	sp, r7
 801150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011510:	4770      	bx	lr

08011512 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011512:	b480      	push	{r7}
 8011514:	b083      	sub	sp, #12
 8011516:	af00      	add	r7, sp, #0
 8011518:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	2204      	movs	r2, #4
 801152a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801152e:	2300      	movs	r3, #0
}
 8011530:	4618      	mov	r0, r3
 8011532:	370c      	adds	r7, #12
 8011534:	46bd      	mov	sp, r7
 8011536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153a:	4770      	bx	lr

0801153c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801153c:	b480      	push	{r7}
 801153e:	b083      	sub	sp, #12
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801154a:	2b04      	cmp	r3, #4
 801154c:	d105      	bne.n	801155a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801155a:	2300      	movs	r3, #0
}
 801155c:	4618      	mov	r0, r3
 801155e:	370c      	adds	r7, #12
 8011560:	46bd      	mov	sp, r7
 8011562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011566:	4770      	bx	lr

08011568 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b082      	sub	sp, #8
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011576:	2b03      	cmp	r3, #3
 8011578:	d10b      	bne.n	8011592 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011580:	69db      	ldr	r3, [r3, #28]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d005      	beq.n	8011592 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801158c:	69db      	ldr	r3, [r3, #28]
 801158e:	6878      	ldr	r0, [r7, #4]
 8011590:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011592:	2300      	movs	r3, #0
}
 8011594:	4618      	mov	r0, r3
 8011596:	3708      	adds	r7, #8
 8011598:	46bd      	mov	sp, r7
 801159a:	bd80      	pop	{r7, pc}

0801159c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801159c:	b480      	push	{r7}
 801159e:	b083      	sub	sp, #12
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
 80115a4:	460b      	mov	r3, r1
 80115a6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80115a8:	2300      	movs	r3, #0
}
 80115aa:	4618      	mov	r0, r3
 80115ac:	370c      	adds	r7, #12
 80115ae:	46bd      	mov	sp, r7
 80115b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b4:	4770      	bx	lr

080115b6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80115b6:	b480      	push	{r7}
 80115b8:	b083      	sub	sp, #12
 80115ba:	af00      	add	r7, sp, #0
 80115bc:	6078      	str	r0, [r7, #4]
 80115be:	460b      	mov	r3, r1
 80115c0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80115c2:	2300      	movs	r3, #0
}
 80115c4:	4618      	mov	r0, r3
 80115c6:	370c      	adds	r7, #12
 80115c8:	46bd      	mov	sp, r7
 80115ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ce:	4770      	bx	lr

080115d0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80115d0:	b480      	push	{r7}
 80115d2:	b083      	sub	sp, #12
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80115d8:	2300      	movs	r3, #0
}
 80115da:	4618      	mov	r0, r3
 80115dc:	370c      	adds	r7, #12
 80115de:	46bd      	mov	sp, r7
 80115e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e4:	4770      	bx	lr

080115e6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80115e6:	b580      	push	{r7, lr}
 80115e8:	b082      	sub	sp, #8
 80115ea:	af00      	add	r7, sp, #0
 80115ec:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	2201      	movs	r2, #1
 80115f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d009      	beq.n	8011614 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011606:	685b      	ldr	r3, [r3, #4]
 8011608:	687a      	ldr	r2, [r7, #4]
 801160a:	6852      	ldr	r2, [r2, #4]
 801160c:	b2d2      	uxtb	r2, r2
 801160e:	4611      	mov	r1, r2
 8011610:	6878      	ldr	r0, [r7, #4]
 8011612:	4798      	blx	r3
  }

  return USBD_OK;
 8011614:	2300      	movs	r3, #0
}
 8011616:	4618      	mov	r0, r3
 8011618:	3708      	adds	r7, #8
 801161a:	46bd      	mov	sp, r7
 801161c:	bd80      	pop	{r7, pc}

0801161e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801161e:	b480      	push	{r7}
 8011620:	b087      	sub	sp, #28
 8011622:	af00      	add	r7, sp, #0
 8011624:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801162a:	697b      	ldr	r3, [r7, #20]
 801162c:	781b      	ldrb	r3, [r3, #0]
 801162e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011630:	697b      	ldr	r3, [r7, #20]
 8011632:	3301      	adds	r3, #1
 8011634:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011636:	697b      	ldr	r3, [r7, #20]
 8011638:	781b      	ldrb	r3, [r3, #0]
 801163a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801163c:	8a3b      	ldrh	r3, [r7, #16]
 801163e:	021b      	lsls	r3, r3, #8
 8011640:	b21a      	sxth	r2, r3
 8011642:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011646:	4313      	orrs	r3, r2
 8011648:	b21b      	sxth	r3, r3
 801164a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801164c:	89fb      	ldrh	r3, [r7, #14]
}
 801164e:	4618      	mov	r0, r3
 8011650:	371c      	adds	r7, #28
 8011652:	46bd      	mov	sp, r7
 8011654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011658:	4770      	bx	lr
	...

0801165c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801165c:	b580      	push	{r7, lr}
 801165e:	b084      	sub	sp, #16
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
 8011664:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011666:	2300      	movs	r3, #0
 8011668:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	781b      	ldrb	r3, [r3, #0]
 801166e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011672:	2b20      	cmp	r3, #32
 8011674:	d004      	beq.n	8011680 <USBD_StdDevReq+0x24>
 8011676:	2b40      	cmp	r3, #64	; 0x40
 8011678:	d002      	beq.n	8011680 <USBD_StdDevReq+0x24>
 801167a:	2b00      	cmp	r3, #0
 801167c:	d00a      	beq.n	8011694 <USBD_StdDevReq+0x38>
 801167e:	e050      	b.n	8011722 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011686:	689b      	ldr	r3, [r3, #8]
 8011688:	6839      	ldr	r1, [r7, #0]
 801168a:	6878      	ldr	r0, [r7, #4]
 801168c:	4798      	blx	r3
 801168e:	4603      	mov	r3, r0
 8011690:	73fb      	strb	r3, [r7, #15]
    break;
 8011692:	e04b      	b.n	801172c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011694:	683b      	ldr	r3, [r7, #0]
 8011696:	785b      	ldrb	r3, [r3, #1]
 8011698:	2b09      	cmp	r3, #9
 801169a:	d83c      	bhi.n	8011716 <USBD_StdDevReq+0xba>
 801169c:	a201      	add	r2, pc, #4	; (adr r2, 80116a4 <USBD_StdDevReq+0x48>)
 801169e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116a2:	bf00      	nop
 80116a4:	080116f9 	.word	0x080116f9
 80116a8:	0801170d 	.word	0x0801170d
 80116ac:	08011717 	.word	0x08011717
 80116b0:	08011703 	.word	0x08011703
 80116b4:	08011717 	.word	0x08011717
 80116b8:	080116d7 	.word	0x080116d7
 80116bc:	080116cd 	.word	0x080116cd
 80116c0:	08011717 	.word	0x08011717
 80116c4:	080116ef 	.word	0x080116ef
 80116c8:	080116e1 	.word	0x080116e1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80116cc:	6839      	ldr	r1, [r7, #0]
 80116ce:	6878      	ldr	r0, [r7, #4]
 80116d0:	f000 f9ce 	bl	8011a70 <USBD_GetDescriptor>
      break;
 80116d4:	e024      	b.n	8011720 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80116d6:	6839      	ldr	r1, [r7, #0]
 80116d8:	6878      	ldr	r0, [r7, #4]
 80116da:	f000 fb33 	bl	8011d44 <USBD_SetAddress>
      break;
 80116de:	e01f      	b.n	8011720 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80116e0:	6839      	ldr	r1, [r7, #0]
 80116e2:	6878      	ldr	r0, [r7, #4]
 80116e4:	f000 fb70 	bl	8011dc8 <USBD_SetConfig>
 80116e8:	4603      	mov	r3, r0
 80116ea:	73fb      	strb	r3, [r7, #15]
      break;
 80116ec:	e018      	b.n	8011720 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80116ee:	6839      	ldr	r1, [r7, #0]
 80116f0:	6878      	ldr	r0, [r7, #4]
 80116f2:	f000 fc0d 	bl	8011f10 <USBD_GetConfig>
      break;
 80116f6:	e013      	b.n	8011720 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80116f8:	6839      	ldr	r1, [r7, #0]
 80116fa:	6878      	ldr	r0, [r7, #4]
 80116fc:	f000 fc3c 	bl	8011f78 <USBD_GetStatus>
      break;
 8011700:	e00e      	b.n	8011720 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8011702:	6839      	ldr	r1, [r7, #0]
 8011704:	6878      	ldr	r0, [r7, #4]
 8011706:	f000 fc6a 	bl	8011fde <USBD_SetFeature>
      break;
 801170a:	e009      	b.n	8011720 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 801170c:	6839      	ldr	r1, [r7, #0]
 801170e:	6878      	ldr	r0, [r7, #4]
 8011710:	f000 fc79 	bl	8012006 <USBD_ClrFeature>
      break;
 8011714:	e004      	b.n	8011720 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8011716:	6839      	ldr	r1, [r7, #0]
 8011718:	6878      	ldr	r0, [r7, #4]
 801171a:	f000 fccf 	bl	80120bc <USBD_CtlError>
      break;
 801171e:	bf00      	nop
    }
    break;
 8011720:	e004      	b.n	801172c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8011722:	6839      	ldr	r1, [r7, #0]
 8011724:	6878      	ldr	r0, [r7, #4]
 8011726:	f000 fcc9 	bl	80120bc <USBD_CtlError>
    break;
 801172a:	bf00      	nop
  }

  return ret;
 801172c:	7bfb      	ldrb	r3, [r7, #15]
}
 801172e:	4618      	mov	r0, r3
 8011730:	3710      	adds	r7, #16
 8011732:	46bd      	mov	sp, r7
 8011734:	bd80      	pop	{r7, pc}
 8011736:	bf00      	nop

08011738 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b084      	sub	sp, #16
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
 8011740:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011742:	2300      	movs	r3, #0
 8011744:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011746:	683b      	ldr	r3, [r7, #0]
 8011748:	781b      	ldrb	r3, [r3, #0]
 801174a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801174e:	2b20      	cmp	r3, #32
 8011750:	d003      	beq.n	801175a <USBD_StdItfReq+0x22>
 8011752:	2b40      	cmp	r3, #64	; 0x40
 8011754:	d001      	beq.n	801175a <USBD_StdItfReq+0x22>
 8011756:	2b00      	cmp	r3, #0
 8011758:	d12a      	bne.n	80117b0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011760:	3b01      	subs	r3, #1
 8011762:	2b02      	cmp	r3, #2
 8011764:	d81d      	bhi.n	80117a2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011766:	683b      	ldr	r3, [r7, #0]
 8011768:	889b      	ldrh	r3, [r3, #4]
 801176a:	b2db      	uxtb	r3, r3
 801176c:	2b01      	cmp	r3, #1
 801176e:	d813      	bhi.n	8011798 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011776:	689b      	ldr	r3, [r3, #8]
 8011778:	6839      	ldr	r1, [r7, #0]
 801177a:	6878      	ldr	r0, [r7, #4]
 801177c:	4798      	blx	r3
 801177e:	4603      	mov	r3, r0
 8011780:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8011782:	683b      	ldr	r3, [r7, #0]
 8011784:	88db      	ldrh	r3, [r3, #6]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d110      	bne.n	80117ac <USBD_StdItfReq+0x74>
 801178a:	7bfb      	ldrb	r3, [r7, #15]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d10d      	bne.n	80117ac <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8011790:	6878      	ldr	r0, [r7, #4]
 8011792:	f000 fd5e 	bl	8012252 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8011796:	e009      	b.n	80117ac <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8011798:	6839      	ldr	r1, [r7, #0]
 801179a:	6878      	ldr	r0, [r7, #4]
 801179c:	f000 fc8e 	bl	80120bc <USBD_CtlError>
      break;
 80117a0:	e004      	b.n	80117ac <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80117a2:	6839      	ldr	r1, [r7, #0]
 80117a4:	6878      	ldr	r0, [r7, #4]
 80117a6:	f000 fc89 	bl	80120bc <USBD_CtlError>
      break;
 80117aa:	e000      	b.n	80117ae <USBD_StdItfReq+0x76>
      break;
 80117ac:	bf00      	nop
    }
    break;
 80117ae:	e004      	b.n	80117ba <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80117b0:	6839      	ldr	r1, [r7, #0]
 80117b2:	6878      	ldr	r0, [r7, #4]
 80117b4:	f000 fc82 	bl	80120bc <USBD_CtlError>
    break;
 80117b8:	bf00      	nop
  }

  return ret;
 80117ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80117bc:	4618      	mov	r0, r3
 80117be:	3710      	adds	r7, #16
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}

080117c4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b084      	sub	sp, #16
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
 80117cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80117ce:	2300      	movs	r3, #0
 80117d0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80117d2:	683b      	ldr	r3, [r7, #0]
 80117d4:	889b      	ldrh	r3, [r3, #4]
 80117d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80117d8:	683b      	ldr	r3, [r7, #0]
 80117da:	781b      	ldrb	r3, [r3, #0]
 80117dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80117e0:	2b20      	cmp	r3, #32
 80117e2:	d004      	beq.n	80117ee <USBD_StdEPReq+0x2a>
 80117e4:	2b40      	cmp	r3, #64	; 0x40
 80117e6:	d002      	beq.n	80117ee <USBD_StdEPReq+0x2a>
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d00a      	beq.n	8011802 <USBD_StdEPReq+0x3e>
 80117ec:	e135      	b.n	8011a5a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117f4:	689b      	ldr	r3, [r3, #8]
 80117f6:	6839      	ldr	r1, [r7, #0]
 80117f8:	6878      	ldr	r0, [r7, #4]
 80117fa:	4798      	blx	r3
 80117fc:	4603      	mov	r3, r0
 80117fe:	73fb      	strb	r3, [r7, #15]
    break;
 8011800:	e130      	b.n	8011a64 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	785b      	ldrb	r3, [r3, #1]
 8011806:	2b01      	cmp	r3, #1
 8011808:	d03e      	beq.n	8011888 <USBD_StdEPReq+0xc4>
 801180a:	2b03      	cmp	r3, #3
 801180c:	d002      	beq.n	8011814 <USBD_StdEPReq+0x50>
 801180e:	2b00      	cmp	r3, #0
 8011810:	d077      	beq.n	8011902 <USBD_StdEPReq+0x13e>
 8011812:	e11c      	b.n	8011a4e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801181a:	2b02      	cmp	r3, #2
 801181c:	d002      	beq.n	8011824 <USBD_StdEPReq+0x60>
 801181e:	2b03      	cmp	r3, #3
 8011820:	d015      	beq.n	801184e <USBD_StdEPReq+0x8a>
 8011822:	e02b      	b.n	801187c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011824:	7bbb      	ldrb	r3, [r7, #14]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d00c      	beq.n	8011844 <USBD_StdEPReq+0x80>
 801182a:	7bbb      	ldrb	r3, [r7, #14]
 801182c:	2b80      	cmp	r3, #128	; 0x80
 801182e:	d009      	beq.n	8011844 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011830:	7bbb      	ldrb	r3, [r7, #14]
 8011832:	4619      	mov	r1, r3
 8011834:	6878      	ldr	r0, [r7, #4]
 8011836:	f003 ffcd 	bl	80157d4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801183a:	2180      	movs	r1, #128	; 0x80
 801183c:	6878      	ldr	r0, [r7, #4]
 801183e:	f003 ffc9 	bl	80157d4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011842:	e020      	b.n	8011886 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8011844:	6839      	ldr	r1, [r7, #0]
 8011846:	6878      	ldr	r0, [r7, #4]
 8011848:	f000 fc38 	bl	80120bc <USBD_CtlError>
        break;
 801184c:	e01b      	b.n	8011886 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	885b      	ldrh	r3, [r3, #2]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d10e      	bne.n	8011874 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011856:	7bbb      	ldrb	r3, [r7, #14]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d00b      	beq.n	8011874 <USBD_StdEPReq+0xb0>
 801185c:	7bbb      	ldrb	r3, [r7, #14]
 801185e:	2b80      	cmp	r3, #128	; 0x80
 8011860:	d008      	beq.n	8011874 <USBD_StdEPReq+0xb0>
 8011862:	683b      	ldr	r3, [r7, #0]
 8011864:	88db      	ldrh	r3, [r3, #6]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d104      	bne.n	8011874 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 801186a:	7bbb      	ldrb	r3, [r7, #14]
 801186c:	4619      	mov	r1, r3
 801186e:	6878      	ldr	r0, [r7, #4]
 8011870:	f003 ffb0 	bl	80157d4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8011874:	6878      	ldr	r0, [r7, #4]
 8011876:	f000 fcec 	bl	8012252 <USBD_CtlSendStatus>

        break;
 801187a:	e004      	b.n	8011886 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 801187c:	6839      	ldr	r1, [r7, #0]
 801187e:	6878      	ldr	r0, [r7, #4]
 8011880:	f000 fc1c 	bl	80120bc <USBD_CtlError>
        break;
 8011884:	bf00      	nop
      }
      break;
 8011886:	e0e7      	b.n	8011a58 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801188e:	2b02      	cmp	r3, #2
 8011890:	d002      	beq.n	8011898 <USBD_StdEPReq+0xd4>
 8011892:	2b03      	cmp	r3, #3
 8011894:	d015      	beq.n	80118c2 <USBD_StdEPReq+0xfe>
 8011896:	e02d      	b.n	80118f4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011898:	7bbb      	ldrb	r3, [r7, #14]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d00c      	beq.n	80118b8 <USBD_StdEPReq+0xf4>
 801189e:	7bbb      	ldrb	r3, [r7, #14]
 80118a0:	2b80      	cmp	r3, #128	; 0x80
 80118a2:	d009      	beq.n	80118b8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80118a4:	7bbb      	ldrb	r3, [r7, #14]
 80118a6:	4619      	mov	r1, r3
 80118a8:	6878      	ldr	r0, [r7, #4]
 80118aa:	f003 ff93 	bl	80157d4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80118ae:	2180      	movs	r1, #128	; 0x80
 80118b0:	6878      	ldr	r0, [r7, #4]
 80118b2:	f003 ff8f 	bl	80157d4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80118b6:	e023      	b.n	8011900 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80118b8:	6839      	ldr	r1, [r7, #0]
 80118ba:	6878      	ldr	r0, [r7, #4]
 80118bc:	f000 fbfe 	bl	80120bc <USBD_CtlError>
        break;
 80118c0:	e01e      	b.n	8011900 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80118c2:	683b      	ldr	r3, [r7, #0]
 80118c4:	885b      	ldrh	r3, [r3, #2]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d119      	bne.n	80118fe <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80118ca:	7bbb      	ldrb	r3, [r7, #14]
 80118cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d004      	beq.n	80118de <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80118d4:	7bbb      	ldrb	r3, [r7, #14]
 80118d6:	4619      	mov	r1, r3
 80118d8:	6878      	ldr	r0, [r7, #4]
 80118da:	f003 ff9a 	bl	8015812 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80118de:	6878      	ldr	r0, [r7, #4]
 80118e0:	f000 fcb7 	bl	8012252 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118ea:	689b      	ldr	r3, [r3, #8]
 80118ec:	6839      	ldr	r1, [r7, #0]
 80118ee:	6878      	ldr	r0, [r7, #4]
 80118f0:	4798      	blx	r3
        }
        break;
 80118f2:	e004      	b.n	80118fe <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80118f4:	6839      	ldr	r1, [r7, #0]
 80118f6:	6878      	ldr	r0, [r7, #4]
 80118f8:	f000 fbe0 	bl	80120bc <USBD_CtlError>
        break;
 80118fc:	e000      	b.n	8011900 <USBD_StdEPReq+0x13c>
        break;
 80118fe:	bf00      	nop
      }
      break;
 8011900:	e0aa      	b.n	8011a58 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011908:	2b02      	cmp	r3, #2
 801190a:	d002      	beq.n	8011912 <USBD_StdEPReq+0x14e>
 801190c:	2b03      	cmp	r3, #3
 801190e:	d032      	beq.n	8011976 <USBD_StdEPReq+0x1b2>
 8011910:	e097      	b.n	8011a42 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011912:	7bbb      	ldrb	r3, [r7, #14]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d007      	beq.n	8011928 <USBD_StdEPReq+0x164>
 8011918:	7bbb      	ldrb	r3, [r7, #14]
 801191a:	2b80      	cmp	r3, #128	; 0x80
 801191c:	d004      	beq.n	8011928 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 801191e:	6839      	ldr	r1, [r7, #0]
 8011920:	6878      	ldr	r0, [r7, #4]
 8011922:	f000 fbcb 	bl	80120bc <USBD_CtlError>
          break;
 8011926:	e091      	b.n	8011a4c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801192c:	2b00      	cmp	r3, #0
 801192e:	da0b      	bge.n	8011948 <USBD_StdEPReq+0x184>
 8011930:	7bbb      	ldrb	r3, [r7, #14]
 8011932:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011936:	4613      	mov	r3, r2
 8011938:	009b      	lsls	r3, r3, #2
 801193a:	4413      	add	r3, r2
 801193c:	009b      	lsls	r3, r3, #2
 801193e:	3310      	adds	r3, #16
 8011940:	687a      	ldr	r2, [r7, #4]
 8011942:	4413      	add	r3, r2
 8011944:	3304      	adds	r3, #4
 8011946:	e00b      	b.n	8011960 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011948:	7bbb      	ldrb	r3, [r7, #14]
 801194a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801194e:	4613      	mov	r3, r2
 8011950:	009b      	lsls	r3, r3, #2
 8011952:	4413      	add	r3, r2
 8011954:	009b      	lsls	r3, r3, #2
 8011956:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801195a:	687a      	ldr	r2, [r7, #4]
 801195c:	4413      	add	r3, r2
 801195e:	3304      	adds	r3, #4
 8011960:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8011962:	68bb      	ldr	r3, [r7, #8]
 8011964:	2200      	movs	r2, #0
 8011966:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011968:	68bb      	ldr	r3, [r7, #8]
 801196a:	2202      	movs	r2, #2
 801196c:	4619      	mov	r1, r3
 801196e:	6878      	ldr	r0, [r7, #4]
 8011970:	f000 fc15 	bl	801219e <USBD_CtlSendData>
        break;
 8011974:	e06a      	b.n	8011a4c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8011976:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801197a:	2b00      	cmp	r3, #0
 801197c:	da11      	bge.n	80119a2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801197e:	7bbb      	ldrb	r3, [r7, #14]
 8011980:	f003 020f 	and.w	r2, r3, #15
 8011984:	6879      	ldr	r1, [r7, #4]
 8011986:	4613      	mov	r3, r2
 8011988:	009b      	lsls	r3, r3, #2
 801198a:	4413      	add	r3, r2
 801198c:	009b      	lsls	r3, r3, #2
 801198e:	440b      	add	r3, r1
 8011990:	3324      	adds	r3, #36	; 0x24
 8011992:	881b      	ldrh	r3, [r3, #0]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d117      	bne.n	80119c8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8011998:	6839      	ldr	r1, [r7, #0]
 801199a:	6878      	ldr	r0, [r7, #4]
 801199c:	f000 fb8e 	bl	80120bc <USBD_CtlError>
            break;
 80119a0:	e054      	b.n	8011a4c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80119a2:	7bbb      	ldrb	r3, [r7, #14]
 80119a4:	f003 020f 	and.w	r2, r3, #15
 80119a8:	6879      	ldr	r1, [r7, #4]
 80119aa:	4613      	mov	r3, r2
 80119ac:	009b      	lsls	r3, r3, #2
 80119ae:	4413      	add	r3, r2
 80119b0:	009b      	lsls	r3, r3, #2
 80119b2:	440b      	add	r3, r1
 80119b4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80119b8:	881b      	ldrh	r3, [r3, #0]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d104      	bne.n	80119c8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80119be:	6839      	ldr	r1, [r7, #0]
 80119c0:	6878      	ldr	r0, [r7, #4]
 80119c2:	f000 fb7b 	bl	80120bc <USBD_CtlError>
            break;
 80119c6:	e041      	b.n	8011a4c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80119c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	da0b      	bge.n	80119e8 <USBD_StdEPReq+0x224>
 80119d0:	7bbb      	ldrb	r3, [r7, #14]
 80119d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80119d6:	4613      	mov	r3, r2
 80119d8:	009b      	lsls	r3, r3, #2
 80119da:	4413      	add	r3, r2
 80119dc:	009b      	lsls	r3, r3, #2
 80119de:	3310      	adds	r3, #16
 80119e0:	687a      	ldr	r2, [r7, #4]
 80119e2:	4413      	add	r3, r2
 80119e4:	3304      	adds	r3, #4
 80119e6:	e00b      	b.n	8011a00 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80119e8:	7bbb      	ldrb	r3, [r7, #14]
 80119ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80119ee:	4613      	mov	r3, r2
 80119f0:	009b      	lsls	r3, r3, #2
 80119f2:	4413      	add	r3, r2
 80119f4:	009b      	lsls	r3, r3, #2
 80119f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80119fa:	687a      	ldr	r2, [r7, #4]
 80119fc:	4413      	add	r3, r2
 80119fe:	3304      	adds	r3, #4
 8011a00:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011a02:	7bbb      	ldrb	r3, [r7, #14]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d002      	beq.n	8011a0e <USBD_StdEPReq+0x24a>
 8011a08:	7bbb      	ldrb	r3, [r7, #14]
 8011a0a:	2b80      	cmp	r3, #128	; 0x80
 8011a0c:	d103      	bne.n	8011a16 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8011a0e:	68bb      	ldr	r3, [r7, #8]
 8011a10:	2200      	movs	r2, #0
 8011a12:	601a      	str	r2, [r3, #0]
 8011a14:	e00e      	b.n	8011a34 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011a16:	7bbb      	ldrb	r3, [r7, #14]
 8011a18:	4619      	mov	r1, r3
 8011a1a:	6878      	ldr	r0, [r7, #4]
 8011a1c:	f003 ff18 	bl	8015850 <USBD_LL_IsStallEP>
 8011a20:	4603      	mov	r3, r0
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d003      	beq.n	8011a2e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8011a26:	68bb      	ldr	r3, [r7, #8]
 8011a28:	2201      	movs	r2, #1
 8011a2a:	601a      	str	r2, [r3, #0]
 8011a2c:	e002      	b.n	8011a34 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8011a2e:	68bb      	ldr	r3, [r7, #8]
 8011a30:	2200      	movs	r2, #0
 8011a32:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011a34:	68bb      	ldr	r3, [r7, #8]
 8011a36:	2202      	movs	r2, #2
 8011a38:	4619      	mov	r1, r3
 8011a3a:	6878      	ldr	r0, [r7, #4]
 8011a3c:	f000 fbaf 	bl	801219e <USBD_CtlSendData>
          break;
 8011a40:	e004      	b.n	8011a4c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8011a42:	6839      	ldr	r1, [r7, #0]
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	f000 fb39 	bl	80120bc <USBD_CtlError>
        break;
 8011a4a:	bf00      	nop
      }
      break;
 8011a4c:	e004      	b.n	8011a58 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8011a4e:	6839      	ldr	r1, [r7, #0]
 8011a50:	6878      	ldr	r0, [r7, #4]
 8011a52:	f000 fb33 	bl	80120bc <USBD_CtlError>
      break;
 8011a56:	bf00      	nop
    }
    break;
 8011a58:	e004      	b.n	8011a64 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8011a5a:	6839      	ldr	r1, [r7, #0]
 8011a5c:	6878      	ldr	r0, [r7, #4]
 8011a5e:	f000 fb2d 	bl	80120bc <USBD_CtlError>
    break;
 8011a62:	bf00      	nop
  }

  return ret;
 8011a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a66:	4618      	mov	r0, r3
 8011a68:	3710      	adds	r7, #16
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	bd80      	pop	{r7, pc}
	...

08011a70 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b084      	sub	sp, #16
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
 8011a78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011a7e:	2300      	movs	r3, #0
 8011a80:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011a82:	2300      	movs	r3, #0
 8011a84:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	885b      	ldrh	r3, [r3, #2]
 8011a8a:	0a1b      	lsrs	r3, r3, #8
 8011a8c:	b29b      	uxth	r3, r3
 8011a8e:	3b01      	subs	r3, #1
 8011a90:	2b06      	cmp	r3, #6
 8011a92:	f200 8128 	bhi.w	8011ce6 <USBD_GetDescriptor+0x276>
 8011a96:	a201      	add	r2, pc, #4	; (adr r2, 8011a9c <USBD_GetDescriptor+0x2c>)
 8011a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a9c:	08011ab9 	.word	0x08011ab9
 8011aa0:	08011ad1 	.word	0x08011ad1
 8011aa4:	08011b11 	.word	0x08011b11
 8011aa8:	08011ce7 	.word	0x08011ce7
 8011aac:	08011ce7 	.word	0x08011ce7
 8011ab0:	08011c87 	.word	0x08011c87
 8011ab4:	08011cb3 	.word	0x08011cb3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	687a      	ldr	r2, [r7, #4]
 8011ac2:	7c12      	ldrb	r2, [r2, #16]
 8011ac4:	f107 0108 	add.w	r1, r7, #8
 8011ac8:	4610      	mov	r0, r2
 8011aca:	4798      	blx	r3
 8011acc:	60f8      	str	r0, [r7, #12]
    break;
 8011ace:	e112      	b.n	8011cf6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	7c1b      	ldrb	r3, [r3, #16]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d10d      	bne.n	8011af4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ae0:	f107 0208 	add.w	r2, r7, #8
 8011ae4:	4610      	mov	r0, r2
 8011ae6:	4798      	blx	r3
 8011ae8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	3301      	adds	r3, #1
 8011aee:	2202      	movs	r2, #2
 8011af0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8011af2:	e100      	b.n	8011cf6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011afc:	f107 0208 	add.w	r2, r7, #8
 8011b00:	4610      	mov	r0, r2
 8011b02:	4798      	blx	r3
 8011b04:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	3301      	adds	r3, #1
 8011b0a:	2202      	movs	r2, #2
 8011b0c:	701a      	strb	r2, [r3, #0]
    break;
 8011b0e:	e0f2      	b.n	8011cf6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8011b10:	683b      	ldr	r3, [r7, #0]
 8011b12:	885b      	ldrh	r3, [r3, #2]
 8011b14:	b2db      	uxtb	r3, r3
 8011b16:	2b05      	cmp	r3, #5
 8011b18:	f200 80ac 	bhi.w	8011c74 <USBD_GetDescriptor+0x204>
 8011b1c:	a201      	add	r2, pc, #4	; (adr r2, 8011b24 <USBD_GetDescriptor+0xb4>)
 8011b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b22:	bf00      	nop
 8011b24:	08011b3d 	.word	0x08011b3d
 8011b28:	08011b71 	.word	0x08011b71
 8011b2c:	08011ba5 	.word	0x08011ba5
 8011b30:	08011bd9 	.word	0x08011bd9
 8011b34:	08011c0d 	.word	0x08011c0d
 8011b38:	08011c41 	.word	0x08011c41
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b42:	685b      	ldr	r3, [r3, #4]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d00b      	beq.n	8011b60 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b4e:	685b      	ldr	r3, [r3, #4]
 8011b50:	687a      	ldr	r2, [r7, #4]
 8011b52:	7c12      	ldrb	r2, [r2, #16]
 8011b54:	f107 0108 	add.w	r1, r7, #8
 8011b58:	4610      	mov	r0, r2
 8011b5a:	4798      	blx	r3
 8011b5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011b5e:	e091      	b.n	8011c84 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011b60:	6839      	ldr	r1, [r7, #0]
 8011b62:	6878      	ldr	r0, [r7, #4]
 8011b64:	f000 faaa 	bl	80120bc <USBD_CtlError>
        err++;
 8011b68:	7afb      	ldrb	r3, [r7, #11]
 8011b6a:	3301      	adds	r3, #1
 8011b6c:	72fb      	strb	r3, [r7, #11]
      break;
 8011b6e:	e089      	b.n	8011c84 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b76:	689b      	ldr	r3, [r3, #8]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d00b      	beq.n	8011b94 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b82:	689b      	ldr	r3, [r3, #8]
 8011b84:	687a      	ldr	r2, [r7, #4]
 8011b86:	7c12      	ldrb	r2, [r2, #16]
 8011b88:	f107 0108 	add.w	r1, r7, #8
 8011b8c:	4610      	mov	r0, r2
 8011b8e:	4798      	blx	r3
 8011b90:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011b92:	e077      	b.n	8011c84 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011b94:	6839      	ldr	r1, [r7, #0]
 8011b96:	6878      	ldr	r0, [r7, #4]
 8011b98:	f000 fa90 	bl	80120bc <USBD_CtlError>
        err++;
 8011b9c:	7afb      	ldrb	r3, [r7, #11]
 8011b9e:	3301      	adds	r3, #1
 8011ba0:	72fb      	strb	r3, [r7, #11]
      break;
 8011ba2:	e06f      	b.n	8011c84 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011baa:	68db      	ldr	r3, [r3, #12]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d00b      	beq.n	8011bc8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011bb6:	68db      	ldr	r3, [r3, #12]
 8011bb8:	687a      	ldr	r2, [r7, #4]
 8011bba:	7c12      	ldrb	r2, [r2, #16]
 8011bbc:	f107 0108 	add.w	r1, r7, #8
 8011bc0:	4610      	mov	r0, r2
 8011bc2:	4798      	blx	r3
 8011bc4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011bc6:	e05d      	b.n	8011c84 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011bc8:	6839      	ldr	r1, [r7, #0]
 8011bca:	6878      	ldr	r0, [r7, #4]
 8011bcc:	f000 fa76 	bl	80120bc <USBD_CtlError>
        err++;
 8011bd0:	7afb      	ldrb	r3, [r7, #11]
 8011bd2:	3301      	adds	r3, #1
 8011bd4:	72fb      	strb	r3, [r7, #11]
      break;
 8011bd6:	e055      	b.n	8011c84 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011bde:	691b      	ldr	r3, [r3, #16]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d00b      	beq.n	8011bfc <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011bea:	691b      	ldr	r3, [r3, #16]
 8011bec:	687a      	ldr	r2, [r7, #4]
 8011bee:	7c12      	ldrb	r2, [r2, #16]
 8011bf0:	f107 0108 	add.w	r1, r7, #8
 8011bf4:	4610      	mov	r0, r2
 8011bf6:	4798      	blx	r3
 8011bf8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011bfa:	e043      	b.n	8011c84 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011bfc:	6839      	ldr	r1, [r7, #0]
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	f000 fa5c 	bl	80120bc <USBD_CtlError>
        err++;
 8011c04:	7afb      	ldrb	r3, [r7, #11]
 8011c06:	3301      	adds	r3, #1
 8011c08:	72fb      	strb	r3, [r7, #11]
      break;
 8011c0a:	e03b      	b.n	8011c84 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c12:	695b      	ldr	r3, [r3, #20]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d00b      	beq.n	8011c30 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c1e:	695b      	ldr	r3, [r3, #20]
 8011c20:	687a      	ldr	r2, [r7, #4]
 8011c22:	7c12      	ldrb	r2, [r2, #16]
 8011c24:	f107 0108 	add.w	r1, r7, #8
 8011c28:	4610      	mov	r0, r2
 8011c2a:	4798      	blx	r3
 8011c2c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011c2e:	e029      	b.n	8011c84 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011c30:	6839      	ldr	r1, [r7, #0]
 8011c32:	6878      	ldr	r0, [r7, #4]
 8011c34:	f000 fa42 	bl	80120bc <USBD_CtlError>
        err++;
 8011c38:	7afb      	ldrb	r3, [r7, #11]
 8011c3a:	3301      	adds	r3, #1
 8011c3c:	72fb      	strb	r3, [r7, #11]
      break;
 8011c3e:	e021      	b.n	8011c84 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c46:	699b      	ldr	r3, [r3, #24]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d00b      	beq.n	8011c64 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c52:	699b      	ldr	r3, [r3, #24]
 8011c54:	687a      	ldr	r2, [r7, #4]
 8011c56:	7c12      	ldrb	r2, [r2, #16]
 8011c58:	f107 0108 	add.w	r1, r7, #8
 8011c5c:	4610      	mov	r0, r2
 8011c5e:	4798      	blx	r3
 8011c60:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011c62:	e00f      	b.n	8011c84 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011c64:	6839      	ldr	r1, [r7, #0]
 8011c66:	6878      	ldr	r0, [r7, #4]
 8011c68:	f000 fa28 	bl	80120bc <USBD_CtlError>
        err++;
 8011c6c:	7afb      	ldrb	r3, [r7, #11]
 8011c6e:	3301      	adds	r3, #1
 8011c70:	72fb      	strb	r3, [r7, #11]
      break;
 8011c72:	e007      	b.n	8011c84 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8011c74:	6839      	ldr	r1, [r7, #0]
 8011c76:	6878      	ldr	r0, [r7, #4]
 8011c78:	f000 fa20 	bl	80120bc <USBD_CtlError>
      err++;
 8011c7c:	7afb      	ldrb	r3, [r7, #11]
 8011c7e:	3301      	adds	r3, #1
 8011c80:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8011c82:	bf00      	nop
    }
    break;
 8011c84:	e037      	b.n	8011cf6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	7c1b      	ldrb	r3, [r3, #16]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d109      	bne.n	8011ca2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c96:	f107 0208 	add.w	r2, r7, #8
 8011c9a:	4610      	mov	r0, r2
 8011c9c:	4798      	blx	r3
 8011c9e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011ca0:	e029      	b.n	8011cf6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8011ca2:	6839      	ldr	r1, [r7, #0]
 8011ca4:	6878      	ldr	r0, [r7, #4]
 8011ca6:	f000 fa09 	bl	80120bc <USBD_CtlError>
      err++;
 8011caa:	7afb      	ldrb	r3, [r7, #11]
 8011cac:	3301      	adds	r3, #1
 8011cae:	72fb      	strb	r3, [r7, #11]
    break;
 8011cb0:	e021      	b.n	8011cf6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	7c1b      	ldrb	r3, [r3, #16]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d10d      	bne.n	8011cd6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cc2:	f107 0208 	add.w	r2, r7, #8
 8011cc6:	4610      	mov	r0, r2
 8011cc8:	4798      	blx	r3
 8011cca:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	3301      	adds	r3, #1
 8011cd0:	2207      	movs	r2, #7
 8011cd2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011cd4:	e00f      	b.n	8011cf6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8011cd6:	6839      	ldr	r1, [r7, #0]
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f000 f9ef 	bl	80120bc <USBD_CtlError>
      err++;
 8011cde:	7afb      	ldrb	r3, [r7, #11]
 8011ce0:	3301      	adds	r3, #1
 8011ce2:	72fb      	strb	r3, [r7, #11]
    break;
 8011ce4:	e007      	b.n	8011cf6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8011ce6:	6839      	ldr	r1, [r7, #0]
 8011ce8:	6878      	ldr	r0, [r7, #4]
 8011cea:	f000 f9e7 	bl	80120bc <USBD_CtlError>
    err++;
 8011cee:	7afb      	ldrb	r3, [r7, #11]
 8011cf0:	3301      	adds	r3, #1
 8011cf2:	72fb      	strb	r3, [r7, #11]
    break;
 8011cf4:	bf00      	nop
  }

  if (err != 0U)
 8011cf6:	7afb      	ldrb	r3, [r7, #11]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d11e      	bne.n	8011d3a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8011cfc:	683b      	ldr	r3, [r7, #0]
 8011cfe:	88db      	ldrh	r3, [r3, #6]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d016      	beq.n	8011d32 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8011d04:	893b      	ldrh	r3, [r7, #8]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d00e      	beq.n	8011d28 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8011d0a:	683b      	ldr	r3, [r7, #0]
 8011d0c:	88da      	ldrh	r2, [r3, #6]
 8011d0e:	893b      	ldrh	r3, [r7, #8]
 8011d10:	4293      	cmp	r3, r2
 8011d12:	bf28      	it	cs
 8011d14:	4613      	movcs	r3, r2
 8011d16:	b29b      	uxth	r3, r3
 8011d18:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8011d1a:	893b      	ldrh	r3, [r7, #8]
 8011d1c:	461a      	mov	r2, r3
 8011d1e:	68f9      	ldr	r1, [r7, #12]
 8011d20:	6878      	ldr	r0, [r7, #4]
 8011d22:	f000 fa3c 	bl	801219e <USBD_CtlSendData>
 8011d26:	e009      	b.n	8011d3c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8011d28:	6839      	ldr	r1, [r7, #0]
 8011d2a:	6878      	ldr	r0, [r7, #4]
 8011d2c:	f000 f9c6 	bl	80120bc <USBD_CtlError>
 8011d30:	e004      	b.n	8011d3c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8011d32:	6878      	ldr	r0, [r7, #4]
 8011d34:	f000 fa8d 	bl	8012252 <USBD_CtlSendStatus>
 8011d38:	e000      	b.n	8011d3c <USBD_GetDescriptor+0x2cc>
    return;
 8011d3a:	bf00      	nop
    }
  }
}
 8011d3c:	3710      	adds	r7, #16
 8011d3e:	46bd      	mov	sp, r7
 8011d40:	bd80      	pop	{r7, pc}
 8011d42:	bf00      	nop

08011d44 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b084      	sub	sp, #16
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
 8011d4c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011d4e:	683b      	ldr	r3, [r7, #0]
 8011d50:	889b      	ldrh	r3, [r3, #4]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d130      	bne.n	8011db8 <USBD_SetAddress+0x74>
 8011d56:	683b      	ldr	r3, [r7, #0]
 8011d58:	88db      	ldrh	r3, [r3, #6]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d12c      	bne.n	8011db8 <USBD_SetAddress+0x74>
 8011d5e:	683b      	ldr	r3, [r7, #0]
 8011d60:	885b      	ldrh	r3, [r3, #2]
 8011d62:	2b7f      	cmp	r3, #127	; 0x7f
 8011d64:	d828      	bhi.n	8011db8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	885b      	ldrh	r3, [r3, #2]
 8011d6a:	b2db      	uxtb	r3, r3
 8011d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d70:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d78:	2b03      	cmp	r3, #3
 8011d7a:	d104      	bne.n	8011d86 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8011d7c:	6839      	ldr	r1, [r7, #0]
 8011d7e:	6878      	ldr	r0, [r7, #4]
 8011d80:	f000 f99c 	bl	80120bc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d84:	e01c      	b.n	8011dc0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	7bfa      	ldrb	r2, [r7, #15]
 8011d8a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011d8e:	7bfb      	ldrb	r3, [r7, #15]
 8011d90:	4619      	mov	r1, r3
 8011d92:	6878      	ldr	r0, [r7, #4]
 8011d94:	f003 fd88 	bl	80158a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011d98:	6878      	ldr	r0, [r7, #4]
 8011d9a:	f000 fa5a 	bl	8012252 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011d9e:	7bfb      	ldrb	r3, [r7, #15]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d004      	beq.n	8011dae <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2202      	movs	r2, #2
 8011da8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011dac:	e008      	b.n	8011dc0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	2201      	movs	r2, #1
 8011db2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011db6:	e003      	b.n	8011dc0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011db8:	6839      	ldr	r1, [r7, #0]
 8011dba:	6878      	ldr	r0, [r7, #4]
 8011dbc:	f000 f97e 	bl	80120bc <USBD_CtlError>
  }
}
 8011dc0:	bf00      	nop
 8011dc2:	3710      	adds	r7, #16
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bd80      	pop	{r7, pc}

08011dc8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b084      	sub	sp, #16
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
 8011dd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011dd6:	683b      	ldr	r3, [r7, #0]
 8011dd8:	885b      	ldrh	r3, [r3, #2]
 8011dda:	b2da      	uxtb	r2, r3
 8011ddc:	4b4b      	ldr	r3, [pc, #300]	; (8011f0c <USBD_SetConfig+0x144>)
 8011dde:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011de0:	4b4a      	ldr	r3, [pc, #296]	; (8011f0c <USBD_SetConfig+0x144>)
 8011de2:	781b      	ldrb	r3, [r3, #0]
 8011de4:	2b01      	cmp	r3, #1
 8011de6:	d905      	bls.n	8011df4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011de8:	6839      	ldr	r1, [r7, #0]
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	f000 f966 	bl	80120bc <USBD_CtlError>
    return USBD_FAIL;
 8011df0:	2303      	movs	r3, #3
 8011df2:	e087      	b.n	8011f04 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011dfa:	2b02      	cmp	r3, #2
 8011dfc:	d002      	beq.n	8011e04 <USBD_SetConfig+0x3c>
 8011dfe:	2b03      	cmp	r3, #3
 8011e00:	d025      	beq.n	8011e4e <USBD_SetConfig+0x86>
 8011e02:	e071      	b.n	8011ee8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8011e04:	4b41      	ldr	r3, [pc, #260]	; (8011f0c <USBD_SetConfig+0x144>)
 8011e06:	781b      	ldrb	r3, [r3, #0]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d01c      	beq.n	8011e46 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8011e0c:	4b3f      	ldr	r3, [pc, #252]	; (8011f0c <USBD_SetConfig+0x144>)
 8011e0e:	781b      	ldrb	r3, [r3, #0]
 8011e10:	461a      	mov	r2, r3
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8011e16:	4b3d      	ldr	r3, [pc, #244]	; (8011f0c <USBD_SetConfig+0x144>)
 8011e18:	781b      	ldrb	r3, [r3, #0]
 8011e1a:	4619      	mov	r1, r3
 8011e1c:	6878      	ldr	r0, [r7, #4]
 8011e1e:	f7ff f9a7 	bl	8011170 <USBD_SetClassConfig>
 8011e22:	4603      	mov	r3, r0
 8011e24:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8011e26:	7bfb      	ldrb	r3, [r7, #15]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d004      	beq.n	8011e36 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8011e2c:	6839      	ldr	r1, [r7, #0]
 8011e2e:	6878      	ldr	r0, [r7, #4]
 8011e30:	f000 f944 	bl	80120bc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8011e34:	e065      	b.n	8011f02 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8011e36:	6878      	ldr	r0, [r7, #4]
 8011e38:	f000 fa0b 	bl	8012252 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	2203      	movs	r2, #3
 8011e40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8011e44:	e05d      	b.n	8011f02 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8011e46:	6878      	ldr	r0, [r7, #4]
 8011e48:	f000 fa03 	bl	8012252 <USBD_CtlSendStatus>
    break;
 8011e4c:	e059      	b.n	8011f02 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8011e4e:	4b2f      	ldr	r3, [pc, #188]	; (8011f0c <USBD_SetConfig+0x144>)
 8011e50:	781b      	ldrb	r3, [r3, #0]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d112      	bne.n	8011e7c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	2202      	movs	r2, #2
 8011e5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8011e5e:	4b2b      	ldr	r3, [pc, #172]	; (8011f0c <USBD_SetConfig+0x144>)
 8011e60:	781b      	ldrb	r3, [r3, #0]
 8011e62:	461a      	mov	r2, r3
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011e68:	4b28      	ldr	r3, [pc, #160]	; (8011f0c <USBD_SetConfig+0x144>)
 8011e6a:	781b      	ldrb	r3, [r3, #0]
 8011e6c:	4619      	mov	r1, r3
 8011e6e:	6878      	ldr	r0, [r7, #4]
 8011e70:	f7ff f99a 	bl	80111a8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8011e74:	6878      	ldr	r0, [r7, #4]
 8011e76:	f000 f9ec 	bl	8012252 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8011e7a:	e042      	b.n	8011f02 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8011e7c:	4b23      	ldr	r3, [pc, #140]	; (8011f0c <USBD_SetConfig+0x144>)
 8011e7e:	781b      	ldrb	r3, [r3, #0]
 8011e80:	461a      	mov	r2, r3
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	685b      	ldr	r3, [r3, #4]
 8011e86:	429a      	cmp	r2, r3
 8011e88:	d02a      	beq.n	8011ee0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	685b      	ldr	r3, [r3, #4]
 8011e8e:	b2db      	uxtb	r3, r3
 8011e90:	4619      	mov	r1, r3
 8011e92:	6878      	ldr	r0, [r7, #4]
 8011e94:	f7ff f988 	bl	80111a8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8011e98:	4b1c      	ldr	r3, [pc, #112]	; (8011f0c <USBD_SetConfig+0x144>)
 8011e9a:	781b      	ldrb	r3, [r3, #0]
 8011e9c:	461a      	mov	r2, r3
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8011ea2:	4b1a      	ldr	r3, [pc, #104]	; (8011f0c <USBD_SetConfig+0x144>)
 8011ea4:	781b      	ldrb	r3, [r3, #0]
 8011ea6:	4619      	mov	r1, r3
 8011ea8:	6878      	ldr	r0, [r7, #4]
 8011eaa:	f7ff f961 	bl	8011170 <USBD_SetClassConfig>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8011eb2:	7bfb      	ldrb	r3, [r7, #15]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d00f      	beq.n	8011ed8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8011eb8:	6839      	ldr	r1, [r7, #0]
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	f000 f8fe 	bl	80120bc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	685b      	ldr	r3, [r3, #4]
 8011ec4:	b2db      	uxtb	r3, r3
 8011ec6:	4619      	mov	r1, r3
 8011ec8:	6878      	ldr	r0, [r7, #4]
 8011eca:	f7ff f96d 	bl	80111a8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	2202      	movs	r2, #2
 8011ed2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8011ed6:	e014      	b.n	8011f02 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8011ed8:	6878      	ldr	r0, [r7, #4]
 8011eda:	f000 f9ba 	bl	8012252 <USBD_CtlSendStatus>
    break;
 8011ede:	e010      	b.n	8011f02 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f000 f9b6 	bl	8012252 <USBD_CtlSendStatus>
    break;
 8011ee6:	e00c      	b.n	8011f02 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8011ee8:	6839      	ldr	r1, [r7, #0]
 8011eea:	6878      	ldr	r0, [r7, #4]
 8011eec:	f000 f8e6 	bl	80120bc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011ef0:	4b06      	ldr	r3, [pc, #24]	; (8011f0c <USBD_SetConfig+0x144>)
 8011ef2:	781b      	ldrb	r3, [r3, #0]
 8011ef4:	4619      	mov	r1, r3
 8011ef6:	6878      	ldr	r0, [r7, #4]
 8011ef8:	f7ff f956 	bl	80111a8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8011efc:	2303      	movs	r3, #3
 8011efe:	73fb      	strb	r3, [r7, #15]
    break;
 8011f00:	bf00      	nop
  }

  return ret;
 8011f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f04:	4618      	mov	r0, r3
 8011f06:	3710      	adds	r7, #16
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	bd80      	pop	{r7, pc}
 8011f0c:	20001008 	.word	0x20001008

08011f10 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b082      	sub	sp, #8
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
 8011f18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	88db      	ldrh	r3, [r3, #6]
 8011f1e:	2b01      	cmp	r3, #1
 8011f20:	d004      	beq.n	8011f2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011f22:	6839      	ldr	r1, [r7, #0]
 8011f24:	6878      	ldr	r0, [r7, #4]
 8011f26:	f000 f8c9 	bl	80120bc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8011f2a:	e021      	b.n	8011f70 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f32:	2b01      	cmp	r3, #1
 8011f34:	db17      	blt.n	8011f66 <USBD_GetConfig+0x56>
 8011f36:	2b02      	cmp	r3, #2
 8011f38:	dd02      	ble.n	8011f40 <USBD_GetConfig+0x30>
 8011f3a:	2b03      	cmp	r3, #3
 8011f3c:	d00b      	beq.n	8011f56 <USBD_GetConfig+0x46>
 8011f3e:	e012      	b.n	8011f66 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	2200      	movs	r2, #0
 8011f44:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	3308      	adds	r3, #8
 8011f4a:	2201      	movs	r2, #1
 8011f4c:	4619      	mov	r1, r3
 8011f4e:	6878      	ldr	r0, [r7, #4]
 8011f50:	f000 f925 	bl	801219e <USBD_CtlSendData>
      break;
 8011f54:	e00c      	b.n	8011f70 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	3304      	adds	r3, #4
 8011f5a:	2201      	movs	r2, #1
 8011f5c:	4619      	mov	r1, r3
 8011f5e:	6878      	ldr	r0, [r7, #4]
 8011f60:	f000 f91d 	bl	801219e <USBD_CtlSendData>
      break;
 8011f64:	e004      	b.n	8011f70 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8011f66:	6839      	ldr	r1, [r7, #0]
 8011f68:	6878      	ldr	r0, [r7, #4]
 8011f6a:	f000 f8a7 	bl	80120bc <USBD_CtlError>
      break;
 8011f6e:	bf00      	nop
}
 8011f70:	bf00      	nop
 8011f72:	3708      	adds	r7, #8
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bd80      	pop	{r7, pc}

08011f78 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b082      	sub	sp, #8
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
 8011f80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f88:	3b01      	subs	r3, #1
 8011f8a:	2b02      	cmp	r3, #2
 8011f8c:	d81e      	bhi.n	8011fcc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8011f8e:	683b      	ldr	r3, [r7, #0]
 8011f90:	88db      	ldrh	r3, [r3, #6]
 8011f92:	2b02      	cmp	r3, #2
 8011f94:	d004      	beq.n	8011fa0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8011f96:	6839      	ldr	r1, [r7, #0]
 8011f98:	6878      	ldr	r0, [r7, #4]
 8011f9a:	f000 f88f 	bl	80120bc <USBD_CtlError>
      break;
 8011f9e:	e01a      	b.n	8011fd6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	2201      	movs	r2, #1
 8011fa4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d005      	beq.n	8011fbc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	68db      	ldr	r3, [r3, #12]
 8011fb4:	f043 0202 	orr.w	r2, r3, #2
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	330c      	adds	r3, #12
 8011fc0:	2202      	movs	r2, #2
 8011fc2:	4619      	mov	r1, r3
 8011fc4:	6878      	ldr	r0, [r7, #4]
 8011fc6:	f000 f8ea 	bl	801219e <USBD_CtlSendData>
    break;
 8011fca:	e004      	b.n	8011fd6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8011fcc:	6839      	ldr	r1, [r7, #0]
 8011fce:	6878      	ldr	r0, [r7, #4]
 8011fd0:	f000 f874 	bl	80120bc <USBD_CtlError>
    break;
 8011fd4:	bf00      	nop
  }
}
 8011fd6:	bf00      	nop
 8011fd8:	3708      	adds	r7, #8
 8011fda:	46bd      	mov	sp, r7
 8011fdc:	bd80      	pop	{r7, pc}

08011fde <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011fde:	b580      	push	{r7, lr}
 8011fe0:	b082      	sub	sp, #8
 8011fe2:	af00      	add	r7, sp, #0
 8011fe4:	6078      	str	r0, [r7, #4]
 8011fe6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	885b      	ldrh	r3, [r3, #2]
 8011fec:	2b01      	cmp	r3, #1
 8011fee:	d106      	bne.n	8011ffe <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	2201      	movs	r2, #1
 8011ff4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011ff8:	6878      	ldr	r0, [r7, #4]
 8011ffa:	f000 f92a 	bl	8012252 <USBD_CtlSendStatus>
  }
}
 8011ffe:	bf00      	nop
 8012000:	3708      	adds	r7, #8
 8012002:	46bd      	mov	sp, r7
 8012004:	bd80      	pop	{r7, pc}

08012006 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012006:	b580      	push	{r7, lr}
 8012008:	b082      	sub	sp, #8
 801200a:	af00      	add	r7, sp, #0
 801200c:	6078      	str	r0, [r7, #4]
 801200e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012016:	3b01      	subs	r3, #1
 8012018:	2b02      	cmp	r3, #2
 801201a:	d80b      	bhi.n	8012034 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801201c:	683b      	ldr	r3, [r7, #0]
 801201e:	885b      	ldrh	r3, [r3, #2]
 8012020:	2b01      	cmp	r3, #1
 8012022:	d10c      	bne.n	801203e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	2200      	movs	r2, #0
 8012028:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801202c:	6878      	ldr	r0, [r7, #4]
 801202e:	f000 f910 	bl	8012252 <USBD_CtlSendStatus>
      }
      break;
 8012032:	e004      	b.n	801203e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8012034:	6839      	ldr	r1, [r7, #0]
 8012036:	6878      	ldr	r0, [r7, #4]
 8012038:	f000 f840 	bl	80120bc <USBD_CtlError>
      break;
 801203c:	e000      	b.n	8012040 <USBD_ClrFeature+0x3a>
      break;
 801203e:	bf00      	nop
  }
}
 8012040:	bf00      	nop
 8012042:	3708      	adds	r7, #8
 8012044:	46bd      	mov	sp, r7
 8012046:	bd80      	pop	{r7, pc}

08012048 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b084      	sub	sp, #16
 801204c:	af00      	add	r7, sp, #0
 801204e:	6078      	str	r0, [r7, #4]
 8012050:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	781a      	ldrb	r2, [r3, #0]
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	3301      	adds	r3, #1
 8012062:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	781a      	ldrb	r2, [r3, #0]
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	3301      	adds	r3, #1
 8012070:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012072:	68f8      	ldr	r0, [r7, #12]
 8012074:	f7ff fad3 	bl	801161e <SWAPBYTE>
 8012078:	4603      	mov	r3, r0
 801207a:	461a      	mov	r2, r3
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	3301      	adds	r3, #1
 8012084:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	3301      	adds	r3, #1
 801208a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801208c:	68f8      	ldr	r0, [r7, #12]
 801208e:	f7ff fac6 	bl	801161e <SWAPBYTE>
 8012092:	4603      	mov	r3, r0
 8012094:	461a      	mov	r2, r3
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	3301      	adds	r3, #1
 801209e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	3301      	adds	r3, #1
 80120a4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80120a6:	68f8      	ldr	r0, [r7, #12]
 80120a8:	f7ff fab9 	bl	801161e <SWAPBYTE>
 80120ac:	4603      	mov	r3, r0
 80120ae:	461a      	mov	r2, r3
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	80da      	strh	r2, [r3, #6]
}
 80120b4:	bf00      	nop
 80120b6:	3710      	adds	r7, #16
 80120b8:	46bd      	mov	sp, r7
 80120ba:	bd80      	pop	{r7, pc}

080120bc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b082      	sub	sp, #8
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
 80120c4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80120c6:	2180      	movs	r1, #128	; 0x80
 80120c8:	6878      	ldr	r0, [r7, #4]
 80120ca:	f003 fb83 	bl	80157d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80120ce:	2100      	movs	r1, #0
 80120d0:	6878      	ldr	r0, [r7, #4]
 80120d2:	f003 fb7f 	bl	80157d4 <USBD_LL_StallEP>
}
 80120d6:	bf00      	nop
 80120d8:	3708      	adds	r7, #8
 80120da:	46bd      	mov	sp, r7
 80120dc:	bd80      	pop	{r7, pc}

080120de <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80120de:	b580      	push	{r7, lr}
 80120e0:	b086      	sub	sp, #24
 80120e2:	af00      	add	r7, sp, #0
 80120e4:	60f8      	str	r0, [r7, #12]
 80120e6:	60b9      	str	r1, [r7, #8]
 80120e8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80120ea:	2300      	movs	r3, #0
 80120ec:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d036      	beq.n	8012162 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80120f8:	6938      	ldr	r0, [r7, #16]
 80120fa:	f000 f836 	bl	801216a <USBD_GetLen>
 80120fe:	4603      	mov	r3, r0
 8012100:	3301      	adds	r3, #1
 8012102:	b29b      	uxth	r3, r3
 8012104:	005b      	lsls	r3, r3, #1
 8012106:	b29a      	uxth	r2, r3
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801210c:	7dfb      	ldrb	r3, [r7, #23]
 801210e:	68ba      	ldr	r2, [r7, #8]
 8012110:	4413      	add	r3, r2
 8012112:	687a      	ldr	r2, [r7, #4]
 8012114:	7812      	ldrb	r2, [r2, #0]
 8012116:	701a      	strb	r2, [r3, #0]
  idx++;
 8012118:	7dfb      	ldrb	r3, [r7, #23]
 801211a:	3301      	adds	r3, #1
 801211c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801211e:	7dfb      	ldrb	r3, [r7, #23]
 8012120:	68ba      	ldr	r2, [r7, #8]
 8012122:	4413      	add	r3, r2
 8012124:	2203      	movs	r2, #3
 8012126:	701a      	strb	r2, [r3, #0]
  idx++;
 8012128:	7dfb      	ldrb	r3, [r7, #23]
 801212a:	3301      	adds	r3, #1
 801212c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801212e:	e013      	b.n	8012158 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012130:	7dfb      	ldrb	r3, [r7, #23]
 8012132:	68ba      	ldr	r2, [r7, #8]
 8012134:	4413      	add	r3, r2
 8012136:	693a      	ldr	r2, [r7, #16]
 8012138:	7812      	ldrb	r2, [r2, #0]
 801213a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801213c:	693b      	ldr	r3, [r7, #16]
 801213e:	3301      	adds	r3, #1
 8012140:	613b      	str	r3, [r7, #16]
    idx++;
 8012142:	7dfb      	ldrb	r3, [r7, #23]
 8012144:	3301      	adds	r3, #1
 8012146:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012148:	7dfb      	ldrb	r3, [r7, #23]
 801214a:	68ba      	ldr	r2, [r7, #8]
 801214c:	4413      	add	r3, r2
 801214e:	2200      	movs	r2, #0
 8012150:	701a      	strb	r2, [r3, #0]
    idx++;
 8012152:	7dfb      	ldrb	r3, [r7, #23]
 8012154:	3301      	adds	r3, #1
 8012156:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012158:	693b      	ldr	r3, [r7, #16]
 801215a:	781b      	ldrb	r3, [r3, #0]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d1e7      	bne.n	8012130 <USBD_GetString+0x52>
 8012160:	e000      	b.n	8012164 <USBD_GetString+0x86>
    return;
 8012162:	bf00      	nop
  }
}
 8012164:	3718      	adds	r7, #24
 8012166:	46bd      	mov	sp, r7
 8012168:	bd80      	pop	{r7, pc}

0801216a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801216a:	b480      	push	{r7}
 801216c:	b085      	sub	sp, #20
 801216e:	af00      	add	r7, sp, #0
 8012170:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012172:	2300      	movs	r3, #0
 8012174:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801217a:	e005      	b.n	8012188 <USBD_GetLen+0x1e>
  {
    len++;
 801217c:	7bfb      	ldrb	r3, [r7, #15]
 801217e:	3301      	adds	r3, #1
 8012180:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012182:	68bb      	ldr	r3, [r7, #8]
 8012184:	3301      	adds	r3, #1
 8012186:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012188:	68bb      	ldr	r3, [r7, #8]
 801218a:	781b      	ldrb	r3, [r3, #0]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d1f5      	bne.n	801217c <USBD_GetLen+0x12>
  }

  return len;
 8012190:	7bfb      	ldrb	r3, [r7, #15]
}
 8012192:	4618      	mov	r0, r3
 8012194:	3714      	adds	r7, #20
 8012196:	46bd      	mov	sp, r7
 8012198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219c:	4770      	bx	lr

0801219e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801219e:	b580      	push	{r7, lr}
 80121a0:	b084      	sub	sp, #16
 80121a2:	af00      	add	r7, sp, #0
 80121a4:	60f8      	str	r0, [r7, #12]
 80121a6:	60b9      	str	r1, [r7, #8]
 80121a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	2202      	movs	r2, #2
 80121ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	687a      	ldr	r2, [r7, #4]
 80121b6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	687a      	ldr	r2, [r7, #4]
 80121bc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	68ba      	ldr	r2, [r7, #8]
 80121c2:	2100      	movs	r1, #0
 80121c4:	68f8      	ldr	r0, [r7, #12]
 80121c6:	f003 fb8e 	bl	80158e6 <USBD_LL_Transmit>

  return USBD_OK;
 80121ca:	2300      	movs	r3, #0
}
 80121cc:	4618      	mov	r0, r3
 80121ce:	3710      	adds	r7, #16
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bd80      	pop	{r7, pc}

080121d4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b084      	sub	sp, #16
 80121d8:	af00      	add	r7, sp, #0
 80121da:	60f8      	str	r0, [r7, #12]
 80121dc:	60b9      	str	r1, [r7, #8]
 80121de:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	68ba      	ldr	r2, [r7, #8]
 80121e4:	2100      	movs	r1, #0
 80121e6:	68f8      	ldr	r0, [r7, #12]
 80121e8:	f003 fb7d 	bl	80158e6 <USBD_LL_Transmit>

  return USBD_OK;
 80121ec:	2300      	movs	r3, #0
}
 80121ee:	4618      	mov	r0, r3
 80121f0:	3710      	adds	r7, #16
 80121f2:	46bd      	mov	sp, r7
 80121f4:	bd80      	pop	{r7, pc}

080121f6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80121f6:	b580      	push	{r7, lr}
 80121f8:	b084      	sub	sp, #16
 80121fa:	af00      	add	r7, sp, #0
 80121fc:	60f8      	str	r0, [r7, #12]
 80121fe:	60b9      	str	r1, [r7, #8]
 8012200:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	2203      	movs	r2, #3
 8012206:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	687a      	ldr	r2, [r7, #4]
 801220e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	687a      	ldr	r2, [r7, #4]
 8012216:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	68ba      	ldr	r2, [r7, #8]
 801221e:	2100      	movs	r1, #0
 8012220:	68f8      	ldr	r0, [r7, #12]
 8012222:	f003 fb81 	bl	8015928 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012226:	2300      	movs	r3, #0
}
 8012228:	4618      	mov	r0, r3
 801222a:	3710      	adds	r7, #16
 801222c:	46bd      	mov	sp, r7
 801222e:	bd80      	pop	{r7, pc}

08012230 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012230:	b580      	push	{r7, lr}
 8012232:	b084      	sub	sp, #16
 8012234:	af00      	add	r7, sp, #0
 8012236:	60f8      	str	r0, [r7, #12]
 8012238:	60b9      	str	r1, [r7, #8]
 801223a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	68ba      	ldr	r2, [r7, #8]
 8012240:	2100      	movs	r1, #0
 8012242:	68f8      	ldr	r0, [r7, #12]
 8012244:	f003 fb70 	bl	8015928 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012248:	2300      	movs	r3, #0
}
 801224a:	4618      	mov	r0, r3
 801224c:	3710      	adds	r7, #16
 801224e:	46bd      	mov	sp, r7
 8012250:	bd80      	pop	{r7, pc}

08012252 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012252:	b580      	push	{r7, lr}
 8012254:	b082      	sub	sp, #8
 8012256:	af00      	add	r7, sp, #0
 8012258:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	2204      	movs	r2, #4
 801225e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012262:	2300      	movs	r3, #0
 8012264:	2200      	movs	r2, #0
 8012266:	2100      	movs	r1, #0
 8012268:	6878      	ldr	r0, [r7, #4]
 801226a:	f003 fb3c 	bl	80158e6 <USBD_LL_Transmit>

  return USBD_OK;
 801226e:	2300      	movs	r3, #0
}
 8012270:	4618      	mov	r0, r3
 8012272:	3708      	adds	r7, #8
 8012274:	46bd      	mov	sp, r7
 8012276:	bd80      	pop	{r7, pc}

08012278 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b082      	sub	sp, #8
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	2205      	movs	r2, #5
 8012284:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012288:	2300      	movs	r3, #0
 801228a:	2200      	movs	r2, #0
 801228c:	2100      	movs	r1, #0
 801228e:	6878      	ldr	r0, [r7, #4]
 8012290:	f003 fb4a 	bl	8015928 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012294:	2300      	movs	r3, #0
}
 8012296:	4618      	mov	r0, r3
 8012298:	3708      	adds	r7, #8
 801229a:	46bd      	mov	sp, r7
 801229c:	bd80      	pop	{r7, pc}

0801229e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801229e:	b480      	push	{r7}
 80122a0:	b085      	sub	sp, #20
 80122a2:	af00      	add	r7, sp, #0
 80122a4:	4603      	mov	r3, r0
 80122a6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80122a8:	2300      	movs	r3, #0
 80122aa:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80122ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80122b0:	2b84      	cmp	r3, #132	; 0x84
 80122b2:	d005      	beq.n	80122c0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80122b4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	4413      	add	r3, r2
 80122bc:	3303      	adds	r3, #3
 80122be:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80122c0:	68fb      	ldr	r3, [r7, #12]
}
 80122c2:	4618      	mov	r0, r3
 80122c4:	3714      	adds	r7, #20
 80122c6:	46bd      	mov	sp, r7
 80122c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122cc:	4770      	bx	lr

080122ce <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80122ce:	b480      	push	{r7}
 80122d0:	b083      	sub	sp, #12
 80122d2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80122d4:	f3ef 8305 	mrs	r3, IPSR
 80122d8:	607b      	str	r3, [r7, #4]
  return(result);
 80122da:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80122dc:	2b00      	cmp	r3, #0
 80122de:	bf14      	ite	ne
 80122e0:	2301      	movne	r3, #1
 80122e2:	2300      	moveq	r3, #0
 80122e4:	b2db      	uxtb	r3, r3
}
 80122e6:	4618      	mov	r0, r3
 80122e8:	370c      	adds	r7, #12
 80122ea:	46bd      	mov	sp, r7
 80122ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f0:	4770      	bx	lr

080122f2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80122f2:	b580      	push	{r7, lr}
 80122f4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80122f6:	f001 fb31 	bl	801395c <vTaskStartScheduler>
  
  return osOK;
 80122fa:	2300      	movs	r3, #0
}
 80122fc:	4618      	mov	r0, r3
 80122fe:	bd80      	pop	{r7, pc}

08012300 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012302:	b089      	sub	sp, #36	; 0x24
 8012304:	af04      	add	r7, sp, #16
 8012306:	6078      	str	r0, [r7, #4]
 8012308:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	695b      	ldr	r3, [r3, #20]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d020      	beq.n	8012354 <osThreadCreate+0x54>
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	699b      	ldr	r3, [r3, #24]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d01c      	beq.n	8012354 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	685c      	ldr	r4, [r3, #4]
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	681d      	ldr	r5, [r3, #0]
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	691e      	ldr	r6, [r3, #16]
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801232c:	4618      	mov	r0, r3
 801232e:	f7ff ffb6 	bl	801229e <makeFreeRtosPriority>
 8012332:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	695b      	ldr	r3, [r3, #20]
 8012338:	687a      	ldr	r2, [r7, #4]
 801233a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801233c:	9202      	str	r2, [sp, #8]
 801233e:	9301      	str	r3, [sp, #4]
 8012340:	9100      	str	r1, [sp, #0]
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	4632      	mov	r2, r6
 8012346:	4629      	mov	r1, r5
 8012348:	4620      	mov	r0, r4
 801234a:	f001 f944 	bl	80135d6 <xTaskCreateStatic>
 801234e:	4603      	mov	r3, r0
 8012350:	60fb      	str	r3, [r7, #12]
 8012352:	e01c      	b.n	801238e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	685c      	ldr	r4, [r3, #4]
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012360:	b29e      	uxth	r6, r3
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012368:	4618      	mov	r0, r3
 801236a:	f7ff ff98 	bl	801229e <makeFreeRtosPriority>
 801236e:	4602      	mov	r2, r0
 8012370:	f107 030c 	add.w	r3, r7, #12
 8012374:	9301      	str	r3, [sp, #4]
 8012376:	9200      	str	r2, [sp, #0]
 8012378:	683b      	ldr	r3, [r7, #0]
 801237a:	4632      	mov	r2, r6
 801237c:	4629      	mov	r1, r5
 801237e:	4620      	mov	r0, r4
 8012380:	f001 f983 	bl	801368a <xTaskCreate>
 8012384:	4603      	mov	r3, r0
 8012386:	2b01      	cmp	r3, #1
 8012388:	d001      	beq.n	801238e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801238a:	2300      	movs	r3, #0
 801238c:	e000      	b.n	8012390 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801238e:	68fb      	ldr	r3, [r7, #12]
}
 8012390:	4618      	mov	r0, r3
 8012392:	3714      	adds	r7, #20
 8012394:	46bd      	mov	sp, r7
 8012396:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012398 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012398:	b580      	push	{r7, lr}
 801239a:	b084      	sub	sp, #16
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d001      	beq.n	80123ae <osDelay+0x16>
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	e000      	b.n	80123b0 <osDelay+0x18>
 80123ae:	2301      	movs	r3, #1
 80123b0:	4618      	mov	r0, r3
 80123b2:	f001 fa9f 	bl	80138f4 <vTaskDelay>
  
  return osOK;
 80123b6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80123b8:	4618      	mov	r0, r3
 80123ba:	3710      	adds	r7, #16
 80123bc:	46bd      	mov	sp, r7
 80123be:	bd80      	pop	{r7, pc}

080123c0 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b086      	sub	sp, #24
 80123c4:	af02      	add	r7, sp, #8
 80123c6:	6078      	str	r0, [r7, #4]
 80123c8:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80123ca:	2300      	movs	r3, #0
 80123cc:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80123ce:	2300      	movs	r3, #0
 80123d0:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80123d2:	f7ff ff7c 	bl	80122ce <inHandlerMode>
 80123d6:	4603      	mov	r3, r0
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d01c      	beq.n	8012416 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80123dc:	6839      	ldr	r1, [r7, #0]
 80123de:	f107 0208 	add.w	r2, r7, #8
 80123e2:	f107 030c 	add.w	r3, r7, #12
 80123e6:	9300      	str	r3, [sp, #0]
 80123e8:	4613      	mov	r3, r2
 80123ea:	2201      	movs	r2, #1
 80123ec:	6878      	ldr	r0, [r7, #4]
 80123ee:	f002 f857 	bl	80144a0 <xTaskGenericNotifyFromISR>
 80123f2:	4603      	mov	r3, r0
 80123f4:	2b01      	cmp	r3, #1
 80123f6:	d002      	beq.n	80123fe <osSignalSet+0x3e>
      return 0x80000000;
 80123f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80123fc:	e019      	b.n	8012432 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d015      	beq.n	8012430 <osSignalSet+0x70>
 8012404:	4b0d      	ldr	r3, [pc, #52]	; (801243c <osSignalSet+0x7c>)
 8012406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801240a:	601a      	str	r2, [r3, #0]
 801240c:	f3bf 8f4f 	dsb	sy
 8012410:	f3bf 8f6f 	isb	sy
 8012414:	e00c      	b.n	8012430 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8012416:	6839      	ldr	r1, [r7, #0]
 8012418:	f107 0308 	add.w	r3, r7, #8
 801241c:	2201      	movs	r2, #1
 801241e:	6878      	ldr	r0, [r7, #4]
 8012420:	f001 ff8c 	bl	801433c <xTaskGenericNotify>
 8012424:	4603      	mov	r3, r0
 8012426:	2b01      	cmp	r3, #1
 8012428:	d002      	beq.n	8012430 <osSignalSet+0x70>
    return 0x80000000;
 801242a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801242e:	e000      	b.n	8012432 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8012430:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8012432:	4618      	mov	r0, r3
 8012434:	3710      	adds	r7, #16
 8012436:	46bd      	mov	sp, r7
 8012438:	bd80      	pop	{r7, pc}
 801243a:	bf00      	nop
 801243c:	e000ed04 	.word	0xe000ed04

08012440 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8012440:	b590      	push	{r4, r7, lr}
 8012442:	b089      	sub	sp, #36	; 0x24
 8012444:	af00      	add	r7, sp, #0
 8012446:	60f8      	str	r0, [r7, #12]
 8012448:	60b9      	str	r1, [r7, #8]
 801244a:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 801244c:	2300      	movs	r3, #0
 801244e:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8012450:	2300      	movs	r3, #0
 8012452:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	f1b3 3fff 	cmp.w	r3, #4294967295
 801245a:	d103      	bne.n	8012464 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 801245c:	f04f 33ff 	mov.w	r3, #4294967295
 8012460:	61fb      	str	r3, [r7, #28]
 8012462:	e009      	b.n	8012478 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d006      	beq.n	8012478 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 801246e:	69fb      	ldr	r3, [r7, #28]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d101      	bne.n	8012478 <osSignalWait+0x38>
      ticks = 1;
 8012474:	2301      	movs	r3, #1
 8012476:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8012478:	f7ff ff29 	bl	80122ce <inHandlerMode>
 801247c:	4603      	mov	r3, r0
 801247e:	2b00      	cmp	r3, #0
 8012480:	d002      	beq.n	8012488 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8012482:	2382      	movs	r3, #130	; 0x82
 8012484:	613b      	str	r3, [r7, #16]
 8012486:	e01b      	b.n	80124c0 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8012488:	68b9      	ldr	r1, [r7, #8]
 801248a:	f107 0310 	add.w	r3, r7, #16
 801248e:	1d1a      	adds	r2, r3, #4
 8012490:	69fb      	ldr	r3, [r7, #28]
 8012492:	2000      	movs	r0, #0
 8012494:	f001 fef8 	bl	8014288 <xTaskNotifyWait>
 8012498:	4603      	mov	r3, r0
 801249a:	2b01      	cmp	r3, #1
 801249c:	d008      	beq.n	80124b0 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 801249e:	69fb      	ldr	r3, [r7, #28]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d102      	bne.n	80124aa <osSignalWait+0x6a>
 80124a4:	2300      	movs	r3, #0
 80124a6:	613b      	str	r3, [r7, #16]
 80124a8:	e00a      	b.n	80124c0 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80124aa:	2340      	movs	r3, #64	; 0x40
 80124ac:	613b      	str	r3, [r7, #16]
 80124ae:	e007      	b.n	80124c0 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80124b0:	697b      	ldr	r3, [r7, #20]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	da02      	bge.n	80124bc <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80124b6:	2386      	movs	r3, #134	; 0x86
 80124b8:	613b      	str	r3, [r7, #16]
 80124ba:	e001      	b.n	80124c0 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80124bc:	2308      	movs	r3, #8
 80124be:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	461c      	mov	r4, r3
 80124c4:	f107 0310 	add.w	r3, r7, #16
 80124c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80124cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80124d0:	68f8      	ldr	r0, [r7, #12]
 80124d2:	3724      	adds	r7, #36	; 0x24
 80124d4:	46bd      	mov	sp, r7
 80124d6:	bd90      	pop	{r4, r7, pc}

080124d8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b082      	sub	sp, #8
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	685b      	ldr	r3, [r3, #4]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d007      	beq.n	80124f8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	685b      	ldr	r3, [r3, #4]
 80124ec:	4619      	mov	r1, r3
 80124ee:	2001      	movs	r0, #1
 80124f0:	f000 fc5f 	bl	8012db2 <xQueueCreateMutexStatic>
 80124f4:	4603      	mov	r3, r0
 80124f6:	e003      	b.n	8012500 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80124f8:	2001      	movs	r0, #1
 80124fa:	f000 fc42 	bl	8012d82 <xQueueCreateMutex>
 80124fe:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8012500:	4618      	mov	r0, r3
 8012502:	3708      	adds	r7, #8
 8012504:	46bd      	mov	sp, r7
 8012506:	bd80      	pop	{r7, pc}

08012508 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b086      	sub	sp, #24
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	685b      	ldr	r3, [r3, #4]
 8012514:	3303      	adds	r3, #3
 8012516:	f023 0303 	bic.w	r3, r3, #3
 801251a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 801251c:	2014      	movs	r0, #20
 801251e:	f002 fb3f 	bl	8014ba0 <pvPortMalloc>
 8012522:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8012524:	697b      	ldr	r3, [r7, #20]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d046      	beq.n	80125b8 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	681a      	ldr	r2, [r3, #0]
 801252e:	697b      	ldr	r3, [r7, #20]
 8012530:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8012532:	68fa      	ldr	r2, [r7, #12]
 8012534:	697b      	ldr	r3, [r7, #20]
 8012536:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8012538:	697b      	ldr	r3, [r7, #20]
 801253a:	2200      	movs	r2, #0
 801253c:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	4618      	mov	r0, r3
 8012544:	f002 fb2c 	bl	8014ba0 <pvPortMalloc>
 8012548:	4602      	mov	r2, r0
 801254a:	697b      	ldr	r3, [r7, #20]
 801254c:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 801254e:	697b      	ldr	r3, [r7, #20]
 8012550:	685b      	ldr	r3, [r3, #4]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d02b      	beq.n	80125ae <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	68fa      	ldr	r2, [r7, #12]
 801255c:	fb02 f303 	mul.w	r3, r2, r3
 8012560:	4618      	mov	r0, r3
 8012562:	f002 fb1d 	bl	8014ba0 <pvPortMalloc>
 8012566:	4602      	mov	r2, r0
 8012568:	697b      	ldr	r3, [r7, #20]
 801256a:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 801256c:	697b      	ldr	r3, [r7, #20]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d011      	beq.n	8012598 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8012574:	2300      	movs	r3, #0
 8012576:	613b      	str	r3, [r7, #16]
 8012578:	e008      	b.n	801258c <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 801257a:	697b      	ldr	r3, [r7, #20]
 801257c:	685a      	ldr	r2, [r3, #4]
 801257e:	693b      	ldr	r3, [r7, #16]
 8012580:	4413      	add	r3, r2
 8012582:	2200      	movs	r2, #0
 8012584:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8012586:	693b      	ldr	r3, [r7, #16]
 8012588:	3301      	adds	r3, #1
 801258a:	613b      	str	r3, [r7, #16]
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	693a      	ldr	r2, [r7, #16]
 8012592:	429a      	cmp	r2, r3
 8012594:	d3f1      	bcc.n	801257a <osPoolCreate+0x72>
 8012596:	e00f      	b.n	80125b8 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8012598:	697b      	ldr	r3, [r7, #20]
 801259a:	685b      	ldr	r3, [r3, #4]
 801259c:	4618      	mov	r0, r3
 801259e:	f002 fbc1 	bl	8014d24 <vPortFree>
        vPortFree(thePool);
 80125a2:	6978      	ldr	r0, [r7, #20]
 80125a4:	f002 fbbe 	bl	8014d24 <vPortFree>
        thePool = NULL;
 80125a8:	2300      	movs	r3, #0
 80125aa:	617b      	str	r3, [r7, #20]
 80125ac:	e004      	b.n	80125b8 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80125ae:	6978      	ldr	r0, [r7, #20]
 80125b0:	f002 fbb8 	bl	8014d24 <vPortFree>
      thePool = NULL;
 80125b4:	2300      	movs	r3, #0
 80125b6:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 80125b8:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 80125ba:	4618      	mov	r0, r3
 80125bc:	3718      	adds	r7, #24
 80125be:	46bd      	mov	sp, r7
 80125c0:	bd80      	pop	{r7, pc}

080125c2 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 80125c2:	b580      	push	{r7, lr}
 80125c4:	b08a      	sub	sp, #40	; 0x28
 80125c6:	af00      	add	r7, sp, #0
 80125c8:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 80125ca:	2300      	movs	r3, #0
 80125cc:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 80125ce:	2300      	movs	r3, #0
 80125d0:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 80125d2:	f7ff fe7c 	bl	80122ce <inHandlerMode>
 80125d6:	4603      	mov	r3, r0
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d00e      	beq.n	80125fa <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80125dc:	f3ef 8211 	mrs	r2, BASEPRI
 80125e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125e4:	f383 8811 	msr	BASEPRI, r3
 80125e8:	f3bf 8f6f 	isb	sy
 80125ec:	f3bf 8f4f 	dsb	sy
 80125f0:	617a      	str	r2, [r7, #20]
 80125f2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80125f4:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80125f6:	627b      	str	r3, [r7, #36]	; 0x24
 80125f8:	e001      	b.n	80125fe <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 80125fa:	f002 f9b7 	bl	801496c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 80125fe:	2300      	movs	r3, #0
 8012600:	61fb      	str	r3, [r7, #28]
 8012602:	e029      	b.n	8012658 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	691a      	ldr	r2, [r3, #16]
 8012608:	69fb      	ldr	r3, [r7, #28]
 801260a:	4413      	add	r3, r2
 801260c:	687a      	ldr	r2, [r7, #4]
 801260e:	6892      	ldr	r2, [r2, #8]
 8012610:	fbb3 f1f2 	udiv	r1, r3, r2
 8012614:	fb02 f201 	mul.w	r2, r2, r1
 8012618:	1a9b      	subs	r3, r3, r2
 801261a:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	685a      	ldr	r2, [r3, #4]
 8012620:	69bb      	ldr	r3, [r7, #24]
 8012622:	4413      	add	r3, r2
 8012624:	781b      	ldrb	r3, [r3, #0]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d113      	bne.n	8012652 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	685a      	ldr	r2, [r3, #4]
 801262e:	69bb      	ldr	r3, [r7, #24]
 8012630:	4413      	add	r3, r2
 8012632:	2201      	movs	r2, #1
 8012634:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	4619      	mov	r1, r3
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	68db      	ldr	r3, [r3, #12]
 8012640:	69ba      	ldr	r2, [r7, #24]
 8012642:	fb02 f303 	mul.w	r3, r2, r3
 8012646:	440b      	add	r3, r1
 8012648:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	69ba      	ldr	r2, [r7, #24]
 801264e:	611a      	str	r2, [r3, #16]
      break;
 8012650:	e007      	b.n	8012662 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8012652:	69fb      	ldr	r3, [r7, #28]
 8012654:	3301      	adds	r3, #1
 8012656:	61fb      	str	r3, [r7, #28]
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	689b      	ldr	r3, [r3, #8]
 801265c:	69fa      	ldr	r2, [r7, #28]
 801265e:	429a      	cmp	r2, r3
 8012660:	d3d0      	bcc.n	8012604 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8012662:	f7ff fe34 	bl	80122ce <inHandlerMode>
 8012666:	4603      	mov	r3, r0
 8012668:	2b00      	cmp	r3, #0
 801266a:	d005      	beq.n	8012678 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 801266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801266e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	f383 8811 	msr	BASEPRI, r3
 8012676:	e001      	b.n	801267c <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8012678:	f002 f9a6 	bl	80149c8 <vPortExitCritical>
  }
  
  return p;
 801267c:	6a3b      	ldr	r3, [r7, #32]
}
 801267e:	4618      	mov	r0, r3
 8012680:	3728      	adds	r7, #40	; 0x28
 8012682:	46bd      	mov	sp, r7
 8012684:	bd80      	pop	{r7, pc}

08012686 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8012686:	b480      	push	{r7}
 8012688:	b085      	sub	sp, #20
 801268a:	af00      	add	r7, sp, #0
 801268c:	6078      	str	r0, [r7, #4]
 801268e:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d101      	bne.n	801269a <osPoolFree+0x14>
    return osErrorParameter;
 8012696:	2380      	movs	r3, #128	; 0x80
 8012698:	e030      	b.n	80126fc <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 801269a:	683b      	ldr	r3, [r7, #0]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d101      	bne.n	80126a4 <osPoolFree+0x1e>
    return osErrorParameter;
 80126a0:	2380      	movs	r3, #128	; 0x80
 80126a2:	e02b      	b.n	80126fc <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	683a      	ldr	r2, [r7, #0]
 80126aa:	429a      	cmp	r2, r3
 80126ac:	d201      	bcs.n	80126b2 <osPoolFree+0x2c>
    return osErrorParameter;
 80126ae:	2380      	movs	r3, #128	; 0x80
 80126b0:	e024      	b.n	80126fc <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80126b2:	683b      	ldr	r3, [r7, #0]
 80126b4:	687a      	ldr	r2, [r7, #4]
 80126b6:	6812      	ldr	r2, [r2, #0]
 80126b8:	1a9b      	subs	r3, r3, r2
 80126ba:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	68da      	ldr	r2, [r3, #12]
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80126c6:	fb02 f201 	mul.w	r2, r2, r1
 80126ca:	1a9b      	subs	r3, r3, r2
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d001      	beq.n	80126d4 <osPoolFree+0x4e>
    return osErrorParameter;
 80126d0:	2380      	movs	r3, #128	; 0x80
 80126d2:	e013      	b.n	80126fc <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	68db      	ldr	r3, [r3, #12]
 80126d8:	68fa      	ldr	r2, [r7, #12]
 80126da:	fbb2 f3f3 	udiv	r3, r2, r3
 80126de:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	689b      	ldr	r3, [r3, #8]
 80126e4:	68fa      	ldr	r2, [r7, #12]
 80126e6:	429a      	cmp	r2, r3
 80126e8:	d301      	bcc.n	80126ee <osPoolFree+0x68>
    return osErrorParameter;
 80126ea:	2380      	movs	r3, #128	; 0x80
 80126ec:	e006      	b.n	80126fc <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	685a      	ldr	r2, [r3, #4]
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	4413      	add	r3, r2
 80126f6:	2200      	movs	r2, #0
 80126f8:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 80126fa:	2300      	movs	r3, #0
}
 80126fc:	4618      	mov	r0, r3
 80126fe:	3714      	adds	r7, #20
 8012700:	46bd      	mov	sp, r7
 8012702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012706:	4770      	bx	lr

08012708 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8012708:	b590      	push	{r4, r7, lr}
 801270a:	b087      	sub	sp, #28
 801270c:	af00      	add	r7, sp, #0
 801270e:	6078      	str	r0, [r7, #4]
 8012710:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	60fb      	str	r3, [r7, #12]
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	685b      	ldr	r3, [r3, #4]
 801271c:	613b      	str	r3, [r7, #16]
 801271e:	2300      	movs	r3, #0
 8012720:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	689c      	ldr	r4, [r3, #8]
 8012726:	200c      	movs	r0, #12
 8012728:	f002 fa3a 	bl	8014ba0 <pvPortMalloc>
 801272c:	4603      	mov	r3, r0
 801272e:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	689b      	ldr	r3, [r3, #8]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d101      	bne.n	801273e <osMailCreate+0x36>
    return NULL;
 801273a:	2300      	movs	r3, #0
 801273c:	e038      	b.n	80127b0 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	689b      	ldr	r3, [r3, #8]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	687a      	ldr	r2, [r7, #4]
 8012746:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	6818      	ldr	r0, [r3, #0]
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	689b      	ldr	r3, [r3, #8]
 8012750:	681c      	ldr	r4, [r3, #0]
 8012752:	2200      	movs	r2, #0
 8012754:	2104      	movs	r1, #4
 8012756:	f000 fa9c 	bl	8012c92 <xQueueGenericCreate>
 801275a:	4603      	mov	r3, r0
 801275c:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	689b      	ldr	r3, [r3, #8]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	685b      	ldr	r3, [r3, #4]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d107      	bne.n	801277a <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	689b      	ldr	r3, [r3, #8]
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	4618      	mov	r0, r3
 8012772:	f002 fad7 	bl	8014d24 <vPortFree>
    return NULL;
 8012776:	2300      	movs	r3, #0
 8012778:	e01a      	b.n	80127b0 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	689b      	ldr	r3, [r3, #8]
 801277e:	681c      	ldr	r4, [r3, #0]
 8012780:	f107 030c 	add.w	r3, r7, #12
 8012784:	4618      	mov	r0, r3
 8012786:	f7ff febf 	bl	8012508 <osPoolCreate>
 801278a:	4603      	mov	r3, r0
 801278c:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	689b      	ldr	r3, [r3, #8]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	689b      	ldr	r3, [r3, #8]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d107      	bne.n	80127aa <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	689b      	ldr	r3, [r3, #8]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	4618      	mov	r0, r3
 80127a2:	f002 fabf 	bl	8014d24 <vPortFree>
    return NULL;
 80127a6:	2300      	movs	r3, #0
 80127a8:	e002      	b.n	80127b0 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	689b      	ldr	r3, [r3, #8]
 80127ae:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 80127b0:	4618      	mov	r0, r3
 80127b2:	371c      	adds	r7, #28
 80127b4:	46bd      	mov	sp, r7
 80127b6:	bd90      	pop	{r4, r7, pc}

080127b8 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b084      	sub	sp, #16
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
 80127c0:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d101      	bne.n	80127cc <osMailAlloc+0x14>
    return NULL;
 80127c8:	2300      	movs	r3, #0
 80127ca:	e006      	b.n	80127da <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	689b      	ldr	r3, [r3, #8]
 80127d0:	4618      	mov	r0, r3
 80127d2:	f7ff fef6 	bl	80125c2 <osPoolAlloc>
 80127d6:	60f8      	str	r0, [r7, #12]
  
  return p;
 80127d8:	68fb      	ldr	r3, [r7, #12]
}
 80127da:	4618      	mov	r0, r3
 80127dc:	3710      	adds	r7, #16
 80127de:	46bd      	mov	sp, r7
 80127e0:	bd80      	pop	{r7, pc}
	...

080127e4 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b084      	sub	sp, #16
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
 80127ec:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d101      	bne.n	80127f8 <osMailPut+0x14>
    return osErrorParameter;
 80127f4:	2380      	movs	r3, #128	; 0x80
 80127f6:	e02c      	b.n	8012852 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 80127f8:	2300      	movs	r3, #0
 80127fa:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 80127fc:	f7ff fd67 	bl	80122ce <inHandlerMode>
 8012800:	4603      	mov	r3, r0
 8012802:	2b00      	cmp	r3, #0
 8012804:	d018      	beq.n	8012838 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	6858      	ldr	r0, [r3, #4]
 801280a:	f107 020c 	add.w	r2, r7, #12
 801280e:	4639      	mov	r1, r7
 8012810:	2300      	movs	r3, #0
 8012812:	f000 fbe3 	bl	8012fdc <xQueueGenericSendFromISR>
 8012816:	4603      	mov	r3, r0
 8012818:	2b01      	cmp	r3, #1
 801281a:	d001      	beq.n	8012820 <osMailPut+0x3c>
      return osErrorOS;
 801281c:	23ff      	movs	r3, #255	; 0xff
 801281e:	e018      	b.n	8012852 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d014      	beq.n	8012850 <osMailPut+0x6c>
 8012826:	4b0d      	ldr	r3, [pc, #52]	; (801285c <osMailPut+0x78>)
 8012828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801282c:	601a      	str	r2, [r3, #0]
 801282e:	f3bf 8f4f 	dsb	sy
 8012832:	f3bf 8f6f 	isb	sy
 8012836:	e00b      	b.n	8012850 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	6858      	ldr	r0, [r3, #4]
 801283c:	4639      	mov	r1, r7
 801283e:	2300      	movs	r3, #0
 8012840:	2200      	movs	r2, #0
 8012842:	f000 fad1 	bl	8012de8 <xQueueGenericSend>
 8012846:	4603      	mov	r3, r0
 8012848:	2b01      	cmp	r3, #1
 801284a:	d001      	beq.n	8012850 <osMailPut+0x6c>
      return osErrorOS;
 801284c:	23ff      	movs	r3, #255	; 0xff
 801284e:	e000      	b.n	8012852 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8012850:	2300      	movs	r3, #0
}
 8012852:	4618      	mov	r0, r3
 8012854:	3710      	adds	r7, #16
 8012856:	46bd      	mov	sp, r7
 8012858:	bd80      	pop	{r7, pc}
 801285a:	bf00      	nop
 801285c:	e000ed04 	.word	0xe000ed04

08012860 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8012860:	b590      	push	{r4, r7, lr}
 8012862:	b08b      	sub	sp, #44	; 0x2c
 8012864:	af00      	add	r7, sp, #0
 8012866:	60f8      	str	r0, [r7, #12]
 8012868:	60b9      	str	r1, [r7, #8]
 801286a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 801286c:	68bb      	ldr	r3, [r7, #8]
 801286e:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8012870:	68bb      	ldr	r3, [r7, #8]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d10a      	bne.n	801288c <osMailGet+0x2c>
    event.status = osErrorParameter;
 8012876:	2380      	movs	r3, #128	; 0x80
 8012878:	617b      	str	r3, [r7, #20]
    return event;
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	461c      	mov	r4, r3
 801287e:	f107 0314 	add.w	r3, r7, #20
 8012882:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012886:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801288a:	e056      	b.n	801293a <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 801288c:	2300      	movs	r3, #0
 801288e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012890:	2300      	movs	r3, #0
 8012892:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	f1b3 3fff 	cmp.w	r3, #4294967295
 801289a:	d103      	bne.n	80128a4 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 801289c:	f04f 33ff 	mov.w	r3, #4294967295
 80128a0:	627b      	str	r3, [r7, #36]	; 0x24
 80128a2:	e009      	b.n	80128b8 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d006      	beq.n	80128b8 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80128ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d101      	bne.n	80128b8 <osMailGet+0x58>
      ticks = 1;
 80128b4:	2301      	movs	r3, #1
 80128b6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80128b8:	f7ff fd09 	bl	80122ce <inHandlerMode>
 80128bc:	4603      	mov	r3, r0
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d01d      	beq.n	80128fe <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 80128c2:	68bb      	ldr	r3, [r7, #8]
 80128c4:	6858      	ldr	r0, [r3, #4]
 80128c6:	f107 0220 	add.w	r2, r7, #32
 80128ca:	f107 0314 	add.w	r3, r7, #20
 80128ce:	3304      	adds	r3, #4
 80128d0:	4619      	mov	r1, r3
 80128d2:	f000 fcf3 	bl	80132bc <xQueueReceiveFromISR>
 80128d6:	4603      	mov	r3, r0
 80128d8:	2b01      	cmp	r3, #1
 80128da:	d102      	bne.n	80128e2 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 80128dc:	2320      	movs	r3, #32
 80128de:	617b      	str	r3, [r7, #20]
 80128e0:	e001      	b.n	80128e6 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 80128e2:	2300      	movs	r3, #0
 80128e4:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80128e6:	6a3b      	ldr	r3, [r7, #32]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d01e      	beq.n	801292a <osMailGet+0xca>
 80128ec:	4b15      	ldr	r3, [pc, #84]	; (8012944 <osMailGet+0xe4>)
 80128ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128f2:	601a      	str	r2, [r3, #0]
 80128f4:	f3bf 8f4f 	dsb	sy
 80128f8:	f3bf 8f6f 	isb	sy
 80128fc:	e015      	b.n	801292a <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 80128fe:	68bb      	ldr	r3, [r7, #8]
 8012900:	6858      	ldr	r0, [r3, #4]
 8012902:	f107 0314 	add.w	r3, r7, #20
 8012906:	3304      	adds	r3, #4
 8012908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801290a:	4619      	mov	r1, r3
 801290c:	f000 fbfa 	bl	8013104 <xQueueReceive>
 8012910:	4603      	mov	r3, r0
 8012912:	2b01      	cmp	r3, #1
 8012914:	d102      	bne.n	801291c <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8012916:	2320      	movs	r3, #32
 8012918:	617b      	str	r3, [r7, #20]
 801291a:	e006      	b.n	801292a <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 801291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801291e:	2b00      	cmp	r3, #0
 8012920:	d101      	bne.n	8012926 <osMailGet+0xc6>
 8012922:	2300      	movs	r3, #0
 8012924:	e000      	b.n	8012928 <osMailGet+0xc8>
 8012926:	2340      	movs	r3, #64	; 0x40
 8012928:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	461c      	mov	r4, r3
 801292e:	f107 0314 	add.w	r3, r7, #20
 8012932:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012936:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801293a:	68f8      	ldr	r0, [r7, #12]
 801293c:	372c      	adds	r7, #44	; 0x2c
 801293e:	46bd      	mov	sp, r7
 8012940:	bd90      	pop	{r4, r7, pc}
 8012942:	bf00      	nop
 8012944:	e000ed04 	.word	0xe000ed04

08012948 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b082      	sub	sp, #8
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
 8012950:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d101      	bne.n	801295c <osMailFree+0x14>
    return osErrorParameter;
 8012958:	2380      	movs	r3, #128	; 0x80
 801295a:	e006      	b.n	801296a <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	689b      	ldr	r3, [r3, #8]
 8012960:	6839      	ldr	r1, [r7, #0]
 8012962:	4618      	mov	r0, r3
 8012964:	f7ff fe8f 	bl	8012686 <osPoolFree>
 8012968:	4603      	mov	r3, r0
}
 801296a:	4618      	mov	r0, r3
 801296c:	3708      	adds	r7, #8
 801296e:	46bd      	mov	sp, r7
 8012970:	bd80      	pop	{r7, pc}

08012972 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012972:	b480      	push	{r7}
 8012974:	b083      	sub	sp, #12
 8012976:	af00      	add	r7, sp, #0
 8012978:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	f103 0208 	add.w	r2, r3, #8
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	f04f 32ff 	mov.w	r2, #4294967295
 801298a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	f103 0208 	add.w	r2, r3, #8
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	f103 0208 	add.w	r2, r3, #8
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	2200      	movs	r2, #0
 80129a4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80129a6:	bf00      	nop
 80129a8:	370c      	adds	r7, #12
 80129aa:	46bd      	mov	sp, r7
 80129ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b0:	4770      	bx	lr

080129b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80129b2:	b480      	push	{r7}
 80129b4:	b083      	sub	sp, #12
 80129b6:	af00      	add	r7, sp, #0
 80129b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	2200      	movs	r2, #0
 80129be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80129c0:	bf00      	nop
 80129c2:	370c      	adds	r7, #12
 80129c4:	46bd      	mov	sp, r7
 80129c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ca:	4770      	bx	lr

080129cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80129cc:	b480      	push	{r7}
 80129ce:	b085      	sub	sp, #20
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
 80129d4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	685b      	ldr	r3, [r3, #4]
 80129da:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80129dc:	683b      	ldr	r3, [r7, #0]
 80129de:	68fa      	ldr	r2, [r7, #12]
 80129e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	689a      	ldr	r2, [r3, #8]
 80129e6:	683b      	ldr	r3, [r7, #0]
 80129e8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	689b      	ldr	r3, [r3, #8]
 80129ee:	683a      	ldr	r2, [r7, #0]
 80129f0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	683a      	ldr	r2, [r7, #0]
 80129f6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80129f8:	683b      	ldr	r3, [r7, #0]
 80129fa:	687a      	ldr	r2, [r7, #4]
 80129fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	1c5a      	adds	r2, r3, #1
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	601a      	str	r2, [r3, #0]
}
 8012a08:	bf00      	nop
 8012a0a:	3714      	adds	r7, #20
 8012a0c:	46bd      	mov	sp, r7
 8012a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a12:	4770      	bx	lr

08012a14 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012a14:	b480      	push	{r7}
 8012a16:	b085      	sub	sp, #20
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
 8012a1c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012a1e:	683b      	ldr	r3, [r7, #0]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012a24:	68bb      	ldr	r3, [r7, #8]
 8012a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a2a:	d103      	bne.n	8012a34 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	691b      	ldr	r3, [r3, #16]
 8012a30:	60fb      	str	r3, [r7, #12]
 8012a32:	e00c      	b.n	8012a4e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	3308      	adds	r3, #8
 8012a38:	60fb      	str	r3, [r7, #12]
 8012a3a:	e002      	b.n	8012a42 <vListInsert+0x2e>
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	685b      	ldr	r3, [r3, #4]
 8012a40:	60fb      	str	r3, [r7, #12]
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	685b      	ldr	r3, [r3, #4]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	68ba      	ldr	r2, [r7, #8]
 8012a4a:	429a      	cmp	r2, r3
 8012a4c:	d2f6      	bcs.n	8012a3c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	685a      	ldr	r2, [r3, #4]
 8012a52:	683b      	ldr	r3, [r7, #0]
 8012a54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012a56:	683b      	ldr	r3, [r7, #0]
 8012a58:	685b      	ldr	r3, [r3, #4]
 8012a5a:	683a      	ldr	r2, [r7, #0]
 8012a5c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012a5e:	683b      	ldr	r3, [r7, #0]
 8012a60:	68fa      	ldr	r2, [r7, #12]
 8012a62:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	683a      	ldr	r2, [r7, #0]
 8012a68:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012a6a:	683b      	ldr	r3, [r7, #0]
 8012a6c:	687a      	ldr	r2, [r7, #4]
 8012a6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	1c5a      	adds	r2, r3, #1
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	601a      	str	r2, [r3, #0]
}
 8012a7a:	bf00      	nop
 8012a7c:	3714      	adds	r7, #20
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a84:	4770      	bx	lr

08012a86 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012a86:	b480      	push	{r7}
 8012a88:	b085      	sub	sp, #20
 8012a8a:	af00      	add	r7, sp, #0
 8012a8c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	691b      	ldr	r3, [r3, #16]
 8012a92:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	685b      	ldr	r3, [r3, #4]
 8012a98:	687a      	ldr	r2, [r7, #4]
 8012a9a:	6892      	ldr	r2, [r2, #8]
 8012a9c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	689b      	ldr	r3, [r3, #8]
 8012aa2:	687a      	ldr	r2, [r7, #4]
 8012aa4:	6852      	ldr	r2, [r2, #4]
 8012aa6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	685b      	ldr	r3, [r3, #4]
 8012aac:	687a      	ldr	r2, [r7, #4]
 8012aae:	429a      	cmp	r2, r3
 8012ab0:	d103      	bne.n	8012aba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	689a      	ldr	r2, [r3, #8]
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	2200      	movs	r2, #0
 8012abe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	1e5a      	subs	r2, r3, #1
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	681b      	ldr	r3, [r3, #0]
}
 8012ace:	4618      	mov	r0, r3
 8012ad0:	3714      	adds	r7, #20
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad8:	4770      	bx	lr
	...

08012adc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b084      	sub	sp, #16
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
 8012ae4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d109      	bne.n	8012b04 <xQueueGenericReset+0x28>
	__asm volatile
 8012af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012af4:	f383 8811 	msr	BASEPRI, r3
 8012af8:	f3bf 8f6f 	isb	sy
 8012afc:	f3bf 8f4f 	dsb	sy
 8012b00:	60bb      	str	r3, [r7, #8]
 8012b02:	e7fe      	b.n	8012b02 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8012b04:	f001 ff32 	bl	801496c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	681a      	ldr	r2, [r3, #0]
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b10:	68f9      	ldr	r1, [r7, #12]
 8012b12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012b14:	fb01 f303 	mul.w	r3, r1, r3
 8012b18:	441a      	add	r2, r3
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	2200      	movs	r2, #0
 8012b22:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	681a      	ldr	r2, [r3, #0]
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	681a      	ldr	r2, [r3, #0]
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b34:	3b01      	subs	r3, #1
 8012b36:	68f9      	ldr	r1, [r7, #12]
 8012b38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012b3a:	fb01 f303 	mul.w	r3, r1, r3
 8012b3e:	441a      	add	r2, r3
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	22ff      	movs	r2, #255	; 0xff
 8012b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	22ff      	movs	r2, #255	; 0xff
 8012b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012b54:	683b      	ldr	r3, [r7, #0]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d114      	bne.n	8012b84 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	691b      	ldr	r3, [r3, #16]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d01a      	beq.n	8012b98 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	3310      	adds	r3, #16
 8012b66:	4618      	mov	r0, r3
 8012b68:	f001 f936 	bl	8013dd8 <xTaskRemoveFromEventList>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d012      	beq.n	8012b98 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012b72:	4b0d      	ldr	r3, [pc, #52]	; (8012ba8 <xQueueGenericReset+0xcc>)
 8012b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b78:	601a      	str	r2, [r3, #0]
 8012b7a:	f3bf 8f4f 	dsb	sy
 8012b7e:	f3bf 8f6f 	isb	sy
 8012b82:	e009      	b.n	8012b98 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	3310      	adds	r3, #16
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f7ff fef2 	bl	8012972 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	3324      	adds	r3, #36	; 0x24
 8012b92:	4618      	mov	r0, r3
 8012b94:	f7ff feed 	bl	8012972 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012b98:	f001 ff16 	bl	80149c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012b9c:	2301      	movs	r3, #1
}
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	3710      	adds	r7, #16
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	bd80      	pop	{r7, pc}
 8012ba6:	bf00      	nop
 8012ba8:	e000ed04 	.word	0xe000ed04

08012bac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b08e      	sub	sp, #56	; 0x38
 8012bb0:	af02      	add	r7, sp, #8
 8012bb2:	60f8      	str	r0, [r7, #12]
 8012bb4:	60b9      	str	r1, [r7, #8]
 8012bb6:	607a      	str	r2, [r7, #4]
 8012bb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d109      	bne.n	8012bd4 <xQueueGenericCreateStatic+0x28>
 8012bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bc4:	f383 8811 	msr	BASEPRI, r3
 8012bc8:	f3bf 8f6f 	isb	sy
 8012bcc:	f3bf 8f4f 	dsb	sy
 8012bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8012bd2:	e7fe      	b.n	8012bd2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012bd4:	683b      	ldr	r3, [r7, #0]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d109      	bne.n	8012bee <xQueueGenericCreateStatic+0x42>
 8012bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bde:	f383 8811 	msr	BASEPRI, r3
 8012be2:	f3bf 8f6f 	isb	sy
 8012be6:	f3bf 8f4f 	dsb	sy
 8012bea:	627b      	str	r3, [r7, #36]	; 0x24
 8012bec:	e7fe      	b.n	8012bec <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d002      	beq.n	8012bfa <xQueueGenericCreateStatic+0x4e>
 8012bf4:	68bb      	ldr	r3, [r7, #8]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d001      	beq.n	8012bfe <xQueueGenericCreateStatic+0x52>
 8012bfa:	2301      	movs	r3, #1
 8012bfc:	e000      	b.n	8012c00 <xQueueGenericCreateStatic+0x54>
 8012bfe:	2300      	movs	r3, #0
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d109      	bne.n	8012c18 <xQueueGenericCreateStatic+0x6c>
 8012c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c08:	f383 8811 	msr	BASEPRI, r3
 8012c0c:	f3bf 8f6f 	isb	sy
 8012c10:	f3bf 8f4f 	dsb	sy
 8012c14:	623b      	str	r3, [r7, #32]
 8012c16:	e7fe      	b.n	8012c16 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d102      	bne.n	8012c24 <xQueueGenericCreateStatic+0x78>
 8012c1e:	68bb      	ldr	r3, [r7, #8]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d101      	bne.n	8012c28 <xQueueGenericCreateStatic+0x7c>
 8012c24:	2301      	movs	r3, #1
 8012c26:	e000      	b.n	8012c2a <xQueueGenericCreateStatic+0x7e>
 8012c28:	2300      	movs	r3, #0
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d109      	bne.n	8012c42 <xQueueGenericCreateStatic+0x96>
 8012c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c32:	f383 8811 	msr	BASEPRI, r3
 8012c36:	f3bf 8f6f 	isb	sy
 8012c3a:	f3bf 8f4f 	dsb	sy
 8012c3e:	61fb      	str	r3, [r7, #28]
 8012c40:	e7fe      	b.n	8012c40 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012c42:	2348      	movs	r3, #72	; 0x48
 8012c44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012c46:	697b      	ldr	r3, [r7, #20]
 8012c48:	2b48      	cmp	r3, #72	; 0x48
 8012c4a:	d009      	beq.n	8012c60 <xQueueGenericCreateStatic+0xb4>
 8012c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c50:	f383 8811 	msr	BASEPRI, r3
 8012c54:	f3bf 8f6f 	isb	sy
 8012c58:	f3bf 8f4f 	dsb	sy
 8012c5c:	61bb      	str	r3, [r7, #24]
 8012c5e:	e7fe      	b.n	8012c5e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012c60:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012c62:	683b      	ldr	r3, [r7, #0]
 8012c64:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d00d      	beq.n	8012c88 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c6e:	2201      	movs	r2, #1
 8012c70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012c74:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c7a:	9300      	str	r3, [sp, #0]
 8012c7c:	4613      	mov	r3, r2
 8012c7e:	687a      	ldr	r2, [r7, #4]
 8012c80:	68b9      	ldr	r1, [r7, #8]
 8012c82:	68f8      	ldr	r0, [r7, #12]
 8012c84:	f000 f844 	bl	8012d10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	3730      	adds	r7, #48	; 0x30
 8012c8e:	46bd      	mov	sp, r7
 8012c90:	bd80      	pop	{r7, pc}

08012c92 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012c92:	b580      	push	{r7, lr}
 8012c94:	b08a      	sub	sp, #40	; 0x28
 8012c96:	af02      	add	r7, sp, #8
 8012c98:	60f8      	str	r0, [r7, #12]
 8012c9a:	60b9      	str	r1, [r7, #8]
 8012c9c:	4613      	mov	r3, r2
 8012c9e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d109      	bne.n	8012cba <xQueueGenericCreate+0x28>
 8012ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012caa:	f383 8811 	msr	BASEPRI, r3
 8012cae:	f3bf 8f6f 	isb	sy
 8012cb2:	f3bf 8f4f 	dsb	sy
 8012cb6:	613b      	str	r3, [r7, #16]
 8012cb8:	e7fe      	b.n	8012cb8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012cba:	68bb      	ldr	r3, [r7, #8]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d102      	bne.n	8012cc6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	61fb      	str	r3, [r7, #28]
 8012cc4:	e004      	b.n	8012cd0 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	68ba      	ldr	r2, [r7, #8]
 8012cca:	fb02 f303 	mul.w	r3, r2, r3
 8012cce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012cd0:	69fb      	ldr	r3, [r7, #28]
 8012cd2:	3348      	adds	r3, #72	; 0x48
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f001 ff63 	bl	8014ba0 <pvPortMalloc>
 8012cda:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012cdc:	69bb      	ldr	r3, [r7, #24]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d011      	beq.n	8012d06 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012ce2:	69bb      	ldr	r3, [r7, #24]
 8012ce4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012ce6:	697b      	ldr	r3, [r7, #20]
 8012ce8:	3348      	adds	r3, #72	; 0x48
 8012cea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012cec:	69bb      	ldr	r3, [r7, #24]
 8012cee:	2200      	movs	r2, #0
 8012cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012cf4:	79fa      	ldrb	r2, [r7, #7]
 8012cf6:	69bb      	ldr	r3, [r7, #24]
 8012cf8:	9300      	str	r3, [sp, #0]
 8012cfa:	4613      	mov	r3, r2
 8012cfc:	697a      	ldr	r2, [r7, #20]
 8012cfe:	68b9      	ldr	r1, [r7, #8]
 8012d00:	68f8      	ldr	r0, [r7, #12]
 8012d02:	f000 f805 	bl	8012d10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012d06:	69bb      	ldr	r3, [r7, #24]
	}
 8012d08:	4618      	mov	r0, r3
 8012d0a:	3720      	adds	r7, #32
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	bd80      	pop	{r7, pc}

08012d10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b084      	sub	sp, #16
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	60f8      	str	r0, [r7, #12]
 8012d18:	60b9      	str	r1, [r7, #8]
 8012d1a:	607a      	str	r2, [r7, #4]
 8012d1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012d1e:	68bb      	ldr	r3, [r7, #8]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d103      	bne.n	8012d2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012d24:	69bb      	ldr	r3, [r7, #24]
 8012d26:	69ba      	ldr	r2, [r7, #24]
 8012d28:	601a      	str	r2, [r3, #0]
 8012d2a:	e002      	b.n	8012d32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012d2c:	69bb      	ldr	r3, [r7, #24]
 8012d2e:	687a      	ldr	r2, [r7, #4]
 8012d30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012d32:	69bb      	ldr	r3, [r7, #24]
 8012d34:	68fa      	ldr	r2, [r7, #12]
 8012d36:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012d38:	69bb      	ldr	r3, [r7, #24]
 8012d3a:	68ba      	ldr	r2, [r7, #8]
 8012d3c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012d3e:	2101      	movs	r1, #1
 8012d40:	69b8      	ldr	r0, [r7, #24]
 8012d42:	f7ff fecb 	bl	8012adc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012d46:	bf00      	nop
 8012d48:	3710      	adds	r7, #16
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	bd80      	pop	{r7, pc}

08012d4e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8012d4e:	b580      	push	{r7, lr}
 8012d50:	b082      	sub	sp, #8
 8012d52:	af00      	add	r7, sp, #0
 8012d54:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d00e      	beq.n	8012d7a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	2200      	movs	r2, #0
 8012d60:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	2200      	movs	r2, #0
 8012d66:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8012d6e:	2300      	movs	r3, #0
 8012d70:	2200      	movs	r2, #0
 8012d72:	2100      	movs	r1, #0
 8012d74:	6878      	ldr	r0, [r7, #4]
 8012d76:	f000 f837 	bl	8012de8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8012d7a:	bf00      	nop
 8012d7c:	3708      	adds	r7, #8
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	bd80      	pop	{r7, pc}

08012d82 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8012d82:	b580      	push	{r7, lr}
 8012d84:	b086      	sub	sp, #24
 8012d86:	af00      	add	r7, sp, #0
 8012d88:	4603      	mov	r3, r0
 8012d8a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012d8c:	2301      	movs	r3, #1
 8012d8e:	617b      	str	r3, [r7, #20]
 8012d90:	2300      	movs	r3, #0
 8012d92:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012d94:	79fb      	ldrb	r3, [r7, #7]
 8012d96:	461a      	mov	r2, r3
 8012d98:	6939      	ldr	r1, [r7, #16]
 8012d9a:	6978      	ldr	r0, [r7, #20]
 8012d9c:	f7ff ff79 	bl	8012c92 <xQueueGenericCreate>
 8012da0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012da2:	68f8      	ldr	r0, [r7, #12]
 8012da4:	f7ff ffd3 	bl	8012d4e <prvInitialiseMutex>

		return xNewQueue;
 8012da8:	68fb      	ldr	r3, [r7, #12]
	}
 8012daa:	4618      	mov	r0, r3
 8012dac:	3718      	adds	r7, #24
 8012dae:	46bd      	mov	sp, r7
 8012db0:	bd80      	pop	{r7, pc}

08012db2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8012db2:	b580      	push	{r7, lr}
 8012db4:	b088      	sub	sp, #32
 8012db6:	af02      	add	r7, sp, #8
 8012db8:	4603      	mov	r3, r0
 8012dba:	6039      	str	r1, [r7, #0]
 8012dbc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012dbe:	2301      	movs	r3, #1
 8012dc0:	617b      	str	r3, [r7, #20]
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8012dc6:	79fb      	ldrb	r3, [r7, #7]
 8012dc8:	9300      	str	r3, [sp, #0]
 8012dca:	683b      	ldr	r3, [r7, #0]
 8012dcc:	2200      	movs	r2, #0
 8012dce:	6939      	ldr	r1, [r7, #16]
 8012dd0:	6978      	ldr	r0, [r7, #20]
 8012dd2:	f7ff feeb 	bl	8012bac <xQueueGenericCreateStatic>
 8012dd6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012dd8:	68f8      	ldr	r0, [r7, #12]
 8012dda:	f7ff ffb8 	bl	8012d4e <prvInitialiseMutex>

		return xNewQueue;
 8012dde:	68fb      	ldr	r3, [r7, #12]
	}
 8012de0:	4618      	mov	r0, r3
 8012de2:	3718      	adds	r7, #24
 8012de4:	46bd      	mov	sp, r7
 8012de6:	bd80      	pop	{r7, pc}

08012de8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012de8:	b580      	push	{r7, lr}
 8012dea:	b08e      	sub	sp, #56	; 0x38
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	60f8      	str	r0, [r7, #12]
 8012df0:	60b9      	str	r1, [r7, #8]
 8012df2:	607a      	str	r2, [r7, #4]
 8012df4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012df6:	2300      	movs	r3, #0
 8012df8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d109      	bne.n	8012e18 <xQueueGenericSend+0x30>
 8012e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e08:	f383 8811 	msr	BASEPRI, r3
 8012e0c:	f3bf 8f6f 	isb	sy
 8012e10:	f3bf 8f4f 	dsb	sy
 8012e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8012e16:	e7fe      	b.n	8012e16 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012e18:	68bb      	ldr	r3, [r7, #8]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d103      	bne.n	8012e26 <xQueueGenericSend+0x3e>
 8012e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d101      	bne.n	8012e2a <xQueueGenericSend+0x42>
 8012e26:	2301      	movs	r3, #1
 8012e28:	e000      	b.n	8012e2c <xQueueGenericSend+0x44>
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d109      	bne.n	8012e44 <xQueueGenericSend+0x5c>
 8012e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e34:	f383 8811 	msr	BASEPRI, r3
 8012e38:	f3bf 8f6f 	isb	sy
 8012e3c:	f3bf 8f4f 	dsb	sy
 8012e40:	627b      	str	r3, [r7, #36]	; 0x24
 8012e42:	e7fe      	b.n	8012e42 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012e44:	683b      	ldr	r3, [r7, #0]
 8012e46:	2b02      	cmp	r3, #2
 8012e48:	d103      	bne.n	8012e52 <xQueueGenericSend+0x6a>
 8012e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e4e:	2b01      	cmp	r3, #1
 8012e50:	d101      	bne.n	8012e56 <xQueueGenericSend+0x6e>
 8012e52:	2301      	movs	r3, #1
 8012e54:	e000      	b.n	8012e58 <xQueueGenericSend+0x70>
 8012e56:	2300      	movs	r3, #0
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d109      	bne.n	8012e70 <xQueueGenericSend+0x88>
 8012e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e60:	f383 8811 	msr	BASEPRI, r3
 8012e64:	f3bf 8f6f 	isb	sy
 8012e68:	f3bf 8f4f 	dsb	sy
 8012e6c:	623b      	str	r3, [r7, #32]
 8012e6e:	e7fe      	b.n	8012e6e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012e70:	f001 f968 	bl	8014144 <xTaskGetSchedulerState>
 8012e74:	4603      	mov	r3, r0
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d102      	bne.n	8012e80 <xQueueGenericSend+0x98>
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d101      	bne.n	8012e84 <xQueueGenericSend+0x9c>
 8012e80:	2301      	movs	r3, #1
 8012e82:	e000      	b.n	8012e86 <xQueueGenericSend+0x9e>
 8012e84:	2300      	movs	r3, #0
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d109      	bne.n	8012e9e <xQueueGenericSend+0xb6>
 8012e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e8e:	f383 8811 	msr	BASEPRI, r3
 8012e92:	f3bf 8f6f 	isb	sy
 8012e96:	f3bf 8f4f 	dsb	sy
 8012e9a:	61fb      	str	r3, [r7, #28]
 8012e9c:	e7fe      	b.n	8012e9c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012e9e:	f001 fd65 	bl	801496c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ea4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012eaa:	429a      	cmp	r2, r3
 8012eac:	d302      	bcc.n	8012eb4 <xQueueGenericSend+0xcc>
 8012eae:	683b      	ldr	r3, [r7, #0]
 8012eb0:	2b02      	cmp	r3, #2
 8012eb2:	d129      	bne.n	8012f08 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012eb4:	683a      	ldr	r2, [r7, #0]
 8012eb6:	68b9      	ldr	r1, [r7, #8]
 8012eb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012eba:	f000 fa7c 	bl	80133b6 <prvCopyDataToQueue>
 8012ebe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d010      	beq.n	8012eea <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eca:	3324      	adds	r3, #36	; 0x24
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f000 ff83 	bl	8013dd8 <xTaskRemoveFromEventList>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d013      	beq.n	8012f00 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012ed8:	4b3f      	ldr	r3, [pc, #252]	; (8012fd8 <xQueueGenericSend+0x1f0>)
 8012eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ede:	601a      	str	r2, [r3, #0]
 8012ee0:	f3bf 8f4f 	dsb	sy
 8012ee4:	f3bf 8f6f 	isb	sy
 8012ee8:	e00a      	b.n	8012f00 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d007      	beq.n	8012f00 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012ef0:	4b39      	ldr	r3, [pc, #228]	; (8012fd8 <xQueueGenericSend+0x1f0>)
 8012ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ef6:	601a      	str	r2, [r3, #0]
 8012ef8:	f3bf 8f4f 	dsb	sy
 8012efc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012f00:	f001 fd62 	bl	80149c8 <vPortExitCritical>
				return pdPASS;
 8012f04:	2301      	movs	r3, #1
 8012f06:	e063      	b.n	8012fd0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d103      	bne.n	8012f16 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012f0e:	f001 fd5b 	bl	80149c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012f12:	2300      	movs	r3, #0
 8012f14:	e05c      	b.n	8012fd0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d106      	bne.n	8012f2a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012f1c:	f107 0314 	add.w	r3, r7, #20
 8012f20:	4618      	mov	r0, r3
 8012f22:	f000 ffbb 	bl	8013e9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012f26:	2301      	movs	r3, #1
 8012f28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012f2a:	f001 fd4d 	bl	80149c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012f2e:	f000 fd73 	bl	8013a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012f32:	f001 fd1b 	bl	801496c <vPortEnterCritical>
 8012f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012f3c:	b25b      	sxtb	r3, r3
 8012f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f42:	d103      	bne.n	8012f4c <xQueueGenericSend+0x164>
 8012f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f46:	2200      	movs	r2, #0
 8012f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012f52:	b25b      	sxtb	r3, r3
 8012f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f58:	d103      	bne.n	8012f62 <xQueueGenericSend+0x17a>
 8012f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012f62:	f001 fd31 	bl	80149c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012f66:	1d3a      	adds	r2, r7, #4
 8012f68:	f107 0314 	add.w	r3, r7, #20
 8012f6c:	4611      	mov	r1, r2
 8012f6e:	4618      	mov	r0, r3
 8012f70:	f000 ffaa 	bl	8013ec8 <xTaskCheckForTimeOut>
 8012f74:	4603      	mov	r3, r0
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d124      	bne.n	8012fc4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012f7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012f7c:	f000 fb13 	bl	80135a6 <prvIsQueueFull>
 8012f80:	4603      	mov	r3, r0
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d018      	beq.n	8012fb8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f88:	3310      	adds	r3, #16
 8012f8a:	687a      	ldr	r2, [r7, #4]
 8012f8c:	4611      	mov	r1, r2
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f000 fefe 	bl	8013d90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012f96:	f000 fa9e 	bl	80134d6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012f9a:	f000 fd4b 	bl	8013a34 <xTaskResumeAll>
 8012f9e:	4603      	mov	r3, r0
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	f47f af7c 	bne.w	8012e9e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8012fa6:	4b0c      	ldr	r3, [pc, #48]	; (8012fd8 <xQueueGenericSend+0x1f0>)
 8012fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012fac:	601a      	str	r2, [r3, #0]
 8012fae:	f3bf 8f4f 	dsb	sy
 8012fb2:	f3bf 8f6f 	isb	sy
 8012fb6:	e772      	b.n	8012e9e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012fb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012fba:	f000 fa8c 	bl	80134d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012fbe:	f000 fd39 	bl	8013a34 <xTaskResumeAll>
 8012fc2:	e76c      	b.n	8012e9e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012fc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012fc6:	f000 fa86 	bl	80134d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012fca:	f000 fd33 	bl	8013a34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012fce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	3738      	adds	r7, #56	; 0x38
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd80      	pop	{r7, pc}
 8012fd8:	e000ed04 	.word	0xe000ed04

08012fdc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b08e      	sub	sp, #56	; 0x38
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	60f8      	str	r0, [r7, #12]
 8012fe4:	60b9      	str	r1, [r7, #8]
 8012fe6:	607a      	str	r2, [r7, #4]
 8012fe8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d109      	bne.n	8013008 <xQueueGenericSendFromISR+0x2c>
 8012ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ff8:	f383 8811 	msr	BASEPRI, r3
 8012ffc:	f3bf 8f6f 	isb	sy
 8013000:	f3bf 8f4f 	dsb	sy
 8013004:	627b      	str	r3, [r7, #36]	; 0x24
 8013006:	e7fe      	b.n	8013006 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013008:	68bb      	ldr	r3, [r7, #8]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d103      	bne.n	8013016 <xQueueGenericSendFromISR+0x3a>
 801300e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013012:	2b00      	cmp	r3, #0
 8013014:	d101      	bne.n	801301a <xQueueGenericSendFromISR+0x3e>
 8013016:	2301      	movs	r3, #1
 8013018:	e000      	b.n	801301c <xQueueGenericSendFromISR+0x40>
 801301a:	2300      	movs	r3, #0
 801301c:	2b00      	cmp	r3, #0
 801301e:	d109      	bne.n	8013034 <xQueueGenericSendFromISR+0x58>
 8013020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013024:	f383 8811 	msr	BASEPRI, r3
 8013028:	f3bf 8f6f 	isb	sy
 801302c:	f3bf 8f4f 	dsb	sy
 8013030:	623b      	str	r3, [r7, #32]
 8013032:	e7fe      	b.n	8013032 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013034:	683b      	ldr	r3, [r7, #0]
 8013036:	2b02      	cmp	r3, #2
 8013038:	d103      	bne.n	8013042 <xQueueGenericSendFromISR+0x66>
 801303a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801303c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801303e:	2b01      	cmp	r3, #1
 8013040:	d101      	bne.n	8013046 <xQueueGenericSendFromISR+0x6a>
 8013042:	2301      	movs	r3, #1
 8013044:	e000      	b.n	8013048 <xQueueGenericSendFromISR+0x6c>
 8013046:	2300      	movs	r3, #0
 8013048:	2b00      	cmp	r3, #0
 801304a:	d109      	bne.n	8013060 <xQueueGenericSendFromISR+0x84>
 801304c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013050:	f383 8811 	msr	BASEPRI, r3
 8013054:	f3bf 8f6f 	isb	sy
 8013058:	f3bf 8f4f 	dsb	sy
 801305c:	61fb      	str	r3, [r7, #28]
 801305e:	e7fe      	b.n	801305e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013060:	f001 fd60 	bl	8014b24 <vPortValidateInterruptPriority>
	__asm volatile
 8013064:	f3ef 8211 	mrs	r2, BASEPRI
 8013068:	f04f 0350 	mov.w	r3, #80	; 0x50
 801306c:	f383 8811 	msr	BASEPRI, r3
 8013070:	f3bf 8f6f 	isb	sy
 8013074:	f3bf 8f4f 	dsb	sy
 8013078:	61ba      	str	r2, [r7, #24]
 801307a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801307c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801307e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013088:	429a      	cmp	r2, r3
 801308a:	d302      	bcc.n	8013092 <xQueueGenericSendFromISR+0xb6>
 801308c:	683b      	ldr	r3, [r7, #0]
 801308e:	2b02      	cmp	r3, #2
 8013090:	d12c      	bne.n	80130ec <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013094:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013098:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801309c:	683a      	ldr	r2, [r7, #0]
 801309e:	68b9      	ldr	r1, [r7, #8]
 80130a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130a2:	f000 f988 	bl	80133b6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80130a6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80130aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130ae:	d112      	bne.n	80130d6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80130b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d016      	beq.n	80130e6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80130b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130ba:	3324      	adds	r3, #36	; 0x24
 80130bc:	4618      	mov	r0, r3
 80130be:	f000 fe8b 	bl	8013dd8 <xTaskRemoveFromEventList>
 80130c2:	4603      	mov	r3, r0
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d00e      	beq.n	80130e6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d00b      	beq.n	80130e6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	2201      	movs	r2, #1
 80130d2:	601a      	str	r2, [r3, #0]
 80130d4:	e007      	b.n	80130e6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80130d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80130da:	3301      	adds	r3, #1
 80130dc:	b2db      	uxtb	r3, r3
 80130de:	b25a      	sxtb	r2, r3
 80130e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80130e6:	2301      	movs	r3, #1
 80130e8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80130ea:	e001      	b.n	80130f0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80130ec:	2300      	movs	r3, #0
 80130ee:	637b      	str	r3, [r7, #52]	; 0x34
 80130f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130f2:	613b      	str	r3, [r7, #16]
	__asm volatile
 80130f4:	693b      	ldr	r3, [r7, #16]
 80130f6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80130fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80130fc:	4618      	mov	r0, r3
 80130fe:	3738      	adds	r7, #56	; 0x38
 8013100:	46bd      	mov	sp, r7
 8013102:	bd80      	pop	{r7, pc}

08013104 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b08c      	sub	sp, #48	; 0x30
 8013108:	af00      	add	r7, sp, #0
 801310a:	60f8      	str	r0, [r7, #12]
 801310c:	60b9      	str	r1, [r7, #8]
 801310e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013110:	2300      	movs	r3, #0
 8013112:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801311a:	2b00      	cmp	r3, #0
 801311c:	d109      	bne.n	8013132 <xQueueReceive+0x2e>
	__asm volatile
 801311e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013122:	f383 8811 	msr	BASEPRI, r3
 8013126:	f3bf 8f6f 	isb	sy
 801312a:	f3bf 8f4f 	dsb	sy
 801312e:	623b      	str	r3, [r7, #32]
 8013130:	e7fe      	b.n	8013130 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013132:	68bb      	ldr	r3, [r7, #8]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d103      	bne.n	8013140 <xQueueReceive+0x3c>
 8013138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801313c:	2b00      	cmp	r3, #0
 801313e:	d101      	bne.n	8013144 <xQueueReceive+0x40>
 8013140:	2301      	movs	r3, #1
 8013142:	e000      	b.n	8013146 <xQueueReceive+0x42>
 8013144:	2300      	movs	r3, #0
 8013146:	2b00      	cmp	r3, #0
 8013148:	d109      	bne.n	801315e <xQueueReceive+0x5a>
 801314a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801314e:	f383 8811 	msr	BASEPRI, r3
 8013152:	f3bf 8f6f 	isb	sy
 8013156:	f3bf 8f4f 	dsb	sy
 801315a:	61fb      	str	r3, [r7, #28]
 801315c:	e7fe      	b.n	801315c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801315e:	f000 fff1 	bl	8014144 <xTaskGetSchedulerState>
 8013162:	4603      	mov	r3, r0
 8013164:	2b00      	cmp	r3, #0
 8013166:	d102      	bne.n	801316e <xQueueReceive+0x6a>
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d101      	bne.n	8013172 <xQueueReceive+0x6e>
 801316e:	2301      	movs	r3, #1
 8013170:	e000      	b.n	8013174 <xQueueReceive+0x70>
 8013172:	2300      	movs	r3, #0
 8013174:	2b00      	cmp	r3, #0
 8013176:	d109      	bne.n	801318c <xQueueReceive+0x88>
 8013178:	f04f 0350 	mov.w	r3, #80	; 0x50
 801317c:	f383 8811 	msr	BASEPRI, r3
 8013180:	f3bf 8f6f 	isb	sy
 8013184:	f3bf 8f4f 	dsb	sy
 8013188:	61bb      	str	r3, [r7, #24]
 801318a:	e7fe      	b.n	801318a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801318c:	f001 fbee 	bl	801496c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013194:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013198:	2b00      	cmp	r3, #0
 801319a:	d01f      	beq.n	80131dc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801319c:	68b9      	ldr	r1, [r7, #8]
 801319e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80131a0:	f000 f973 	bl	801348a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80131a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131a6:	1e5a      	subs	r2, r3, #1
 80131a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131aa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80131ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131ae:	691b      	ldr	r3, [r3, #16]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d00f      	beq.n	80131d4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80131b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131b6:	3310      	adds	r3, #16
 80131b8:	4618      	mov	r0, r3
 80131ba:	f000 fe0d 	bl	8013dd8 <xTaskRemoveFromEventList>
 80131be:	4603      	mov	r3, r0
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d007      	beq.n	80131d4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80131c4:	4b3c      	ldr	r3, [pc, #240]	; (80132b8 <xQueueReceive+0x1b4>)
 80131c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131ca:	601a      	str	r2, [r3, #0]
 80131cc:	f3bf 8f4f 	dsb	sy
 80131d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80131d4:	f001 fbf8 	bl	80149c8 <vPortExitCritical>
				return pdPASS;
 80131d8:	2301      	movs	r3, #1
 80131da:	e069      	b.n	80132b0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d103      	bne.n	80131ea <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80131e2:	f001 fbf1 	bl	80149c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80131e6:	2300      	movs	r3, #0
 80131e8:	e062      	b.n	80132b0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80131ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d106      	bne.n	80131fe <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80131f0:	f107 0310 	add.w	r3, r7, #16
 80131f4:	4618      	mov	r0, r3
 80131f6:	f000 fe51 	bl	8013e9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80131fa:	2301      	movs	r3, #1
 80131fc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80131fe:	f001 fbe3 	bl	80149c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013202:	f000 fc09 	bl	8013a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013206:	f001 fbb1 	bl	801496c <vPortEnterCritical>
 801320a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801320c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013210:	b25b      	sxtb	r3, r3
 8013212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013216:	d103      	bne.n	8013220 <xQueueReceive+0x11c>
 8013218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801321a:	2200      	movs	r2, #0
 801321c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013222:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013226:	b25b      	sxtb	r3, r3
 8013228:	f1b3 3fff 	cmp.w	r3, #4294967295
 801322c:	d103      	bne.n	8013236 <xQueueReceive+0x132>
 801322e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013230:	2200      	movs	r2, #0
 8013232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013236:	f001 fbc7 	bl	80149c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801323a:	1d3a      	adds	r2, r7, #4
 801323c:	f107 0310 	add.w	r3, r7, #16
 8013240:	4611      	mov	r1, r2
 8013242:	4618      	mov	r0, r3
 8013244:	f000 fe40 	bl	8013ec8 <xTaskCheckForTimeOut>
 8013248:	4603      	mov	r3, r0
 801324a:	2b00      	cmp	r3, #0
 801324c:	d123      	bne.n	8013296 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801324e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013250:	f000 f993 	bl	801357a <prvIsQueueEmpty>
 8013254:	4603      	mov	r3, r0
 8013256:	2b00      	cmp	r3, #0
 8013258:	d017      	beq.n	801328a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801325c:	3324      	adds	r3, #36	; 0x24
 801325e:	687a      	ldr	r2, [r7, #4]
 8013260:	4611      	mov	r1, r2
 8013262:	4618      	mov	r0, r3
 8013264:	f000 fd94 	bl	8013d90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801326a:	f000 f934 	bl	80134d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801326e:	f000 fbe1 	bl	8013a34 <xTaskResumeAll>
 8013272:	4603      	mov	r3, r0
 8013274:	2b00      	cmp	r3, #0
 8013276:	d189      	bne.n	801318c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8013278:	4b0f      	ldr	r3, [pc, #60]	; (80132b8 <xQueueReceive+0x1b4>)
 801327a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801327e:	601a      	str	r2, [r3, #0]
 8013280:	f3bf 8f4f 	dsb	sy
 8013284:	f3bf 8f6f 	isb	sy
 8013288:	e780      	b.n	801318c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801328a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801328c:	f000 f923 	bl	80134d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013290:	f000 fbd0 	bl	8013a34 <xTaskResumeAll>
 8013294:	e77a      	b.n	801318c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013296:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013298:	f000 f91d 	bl	80134d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801329c:	f000 fbca 	bl	8013a34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80132a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80132a2:	f000 f96a 	bl	801357a <prvIsQueueEmpty>
 80132a6:	4603      	mov	r3, r0
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	f43f af6f 	beq.w	801318c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80132ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80132b0:	4618      	mov	r0, r3
 80132b2:	3730      	adds	r7, #48	; 0x30
 80132b4:	46bd      	mov	sp, r7
 80132b6:	bd80      	pop	{r7, pc}
 80132b8:	e000ed04 	.word	0xe000ed04

080132bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80132bc:	b580      	push	{r7, lr}
 80132be:	b08e      	sub	sp, #56	; 0x38
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	60f8      	str	r0, [r7, #12]
 80132c4:	60b9      	str	r1, [r7, #8]
 80132c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80132cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d109      	bne.n	80132e6 <xQueueReceiveFromISR+0x2a>
 80132d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132d6:	f383 8811 	msr	BASEPRI, r3
 80132da:	f3bf 8f6f 	isb	sy
 80132de:	f3bf 8f4f 	dsb	sy
 80132e2:	623b      	str	r3, [r7, #32]
 80132e4:	e7fe      	b.n	80132e4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80132e6:	68bb      	ldr	r3, [r7, #8]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d103      	bne.n	80132f4 <xQueueReceiveFromISR+0x38>
 80132ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d101      	bne.n	80132f8 <xQueueReceiveFromISR+0x3c>
 80132f4:	2301      	movs	r3, #1
 80132f6:	e000      	b.n	80132fa <xQueueReceiveFromISR+0x3e>
 80132f8:	2300      	movs	r3, #0
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d109      	bne.n	8013312 <xQueueReceiveFromISR+0x56>
 80132fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013302:	f383 8811 	msr	BASEPRI, r3
 8013306:	f3bf 8f6f 	isb	sy
 801330a:	f3bf 8f4f 	dsb	sy
 801330e:	61fb      	str	r3, [r7, #28]
 8013310:	e7fe      	b.n	8013310 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013312:	f001 fc07 	bl	8014b24 <vPortValidateInterruptPriority>
	__asm volatile
 8013316:	f3ef 8211 	mrs	r2, BASEPRI
 801331a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801331e:	f383 8811 	msr	BASEPRI, r3
 8013322:	f3bf 8f6f 	isb	sy
 8013326:	f3bf 8f4f 	dsb	sy
 801332a:	61ba      	str	r2, [r7, #24]
 801332c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801332e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013330:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013336:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801333a:	2b00      	cmp	r3, #0
 801333c:	d02f      	beq.n	801339e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801333e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013340:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013348:	68b9      	ldr	r1, [r7, #8]
 801334a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801334c:	f000 f89d 	bl	801348a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013352:	1e5a      	subs	r2, r3, #1
 8013354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013356:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013358:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801335c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013360:	d112      	bne.n	8013388 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013364:	691b      	ldr	r3, [r3, #16]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d016      	beq.n	8013398 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801336a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801336c:	3310      	adds	r3, #16
 801336e:	4618      	mov	r0, r3
 8013370:	f000 fd32 	bl	8013dd8 <xTaskRemoveFromEventList>
 8013374:	4603      	mov	r3, r0
 8013376:	2b00      	cmp	r3, #0
 8013378:	d00e      	beq.n	8013398 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d00b      	beq.n	8013398 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	2201      	movs	r2, #1
 8013384:	601a      	str	r2, [r3, #0]
 8013386:	e007      	b.n	8013398 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801338c:	3301      	adds	r3, #1
 801338e:	b2db      	uxtb	r3, r3
 8013390:	b25a      	sxtb	r2, r3
 8013392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013398:	2301      	movs	r3, #1
 801339a:	637b      	str	r3, [r7, #52]	; 0x34
 801339c:	e001      	b.n	80133a2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 801339e:	2300      	movs	r3, #0
 80133a0:	637b      	str	r3, [r7, #52]	; 0x34
 80133a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80133a6:	693b      	ldr	r3, [r7, #16]
 80133a8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80133ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80133ae:	4618      	mov	r0, r3
 80133b0:	3738      	adds	r7, #56	; 0x38
 80133b2:	46bd      	mov	sp, r7
 80133b4:	bd80      	pop	{r7, pc}

080133b6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80133b6:	b580      	push	{r7, lr}
 80133b8:	b086      	sub	sp, #24
 80133ba:	af00      	add	r7, sp, #0
 80133bc:	60f8      	str	r0, [r7, #12]
 80133be:	60b9      	str	r1, [r7, #8]
 80133c0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80133c2:	2300      	movs	r3, #0
 80133c4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133ca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d10d      	bne.n	80133f0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d14d      	bne.n	8013478 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	689b      	ldr	r3, [r3, #8]
 80133e0:	4618      	mov	r0, r3
 80133e2:	f000 fecd 	bl	8014180 <xTaskPriorityDisinherit>
 80133e6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	2200      	movs	r2, #0
 80133ec:	609a      	str	r2, [r3, #8]
 80133ee:	e043      	b.n	8013478 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d119      	bne.n	801342a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	6858      	ldr	r0, [r3, #4]
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133fe:	461a      	mov	r2, r3
 8013400:	68b9      	ldr	r1, [r7, #8]
 8013402:	f002 fb2b 	bl	8015a5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	685a      	ldr	r2, [r3, #4]
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801340e:	441a      	add	r2, r3
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	685a      	ldr	r2, [r3, #4]
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	689b      	ldr	r3, [r3, #8]
 801341c:	429a      	cmp	r2, r3
 801341e:	d32b      	bcc.n	8013478 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	681a      	ldr	r2, [r3, #0]
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	605a      	str	r2, [r3, #4]
 8013428:	e026      	b.n	8013478 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	68d8      	ldr	r0, [r3, #12]
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013432:	461a      	mov	r2, r3
 8013434:	68b9      	ldr	r1, [r7, #8]
 8013436:	f002 fb11 	bl	8015a5c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	68da      	ldr	r2, [r3, #12]
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013442:	425b      	negs	r3, r3
 8013444:	441a      	add	r2, r3
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	68da      	ldr	r2, [r3, #12]
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	429a      	cmp	r2, r3
 8013454:	d207      	bcs.n	8013466 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	689a      	ldr	r2, [r3, #8]
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801345e:	425b      	negs	r3, r3
 8013460:	441a      	add	r2, r3
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	2b02      	cmp	r3, #2
 801346a:	d105      	bne.n	8013478 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801346c:	693b      	ldr	r3, [r7, #16]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d002      	beq.n	8013478 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013472:	693b      	ldr	r3, [r7, #16]
 8013474:	3b01      	subs	r3, #1
 8013476:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013478:	693b      	ldr	r3, [r7, #16]
 801347a:	1c5a      	adds	r2, r3, #1
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013480:	697b      	ldr	r3, [r7, #20]
}
 8013482:	4618      	mov	r0, r3
 8013484:	3718      	adds	r7, #24
 8013486:	46bd      	mov	sp, r7
 8013488:	bd80      	pop	{r7, pc}

0801348a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801348a:	b580      	push	{r7, lr}
 801348c:	b082      	sub	sp, #8
 801348e:	af00      	add	r7, sp, #0
 8013490:	6078      	str	r0, [r7, #4]
 8013492:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013498:	2b00      	cmp	r3, #0
 801349a:	d018      	beq.n	80134ce <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	68da      	ldr	r2, [r3, #12]
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134a4:	441a      	add	r2, r3
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	68da      	ldr	r2, [r3, #12]
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	689b      	ldr	r3, [r3, #8]
 80134b2:	429a      	cmp	r2, r3
 80134b4:	d303      	bcc.n	80134be <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	681a      	ldr	r2, [r3, #0]
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	68d9      	ldr	r1, [r3, #12]
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134c6:	461a      	mov	r2, r3
 80134c8:	6838      	ldr	r0, [r7, #0]
 80134ca:	f002 fac7 	bl	8015a5c <memcpy>
	}
}
 80134ce:	bf00      	nop
 80134d0:	3708      	adds	r7, #8
 80134d2:	46bd      	mov	sp, r7
 80134d4:	bd80      	pop	{r7, pc}

080134d6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80134d6:	b580      	push	{r7, lr}
 80134d8:	b084      	sub	sp, #16
 80134da:	af00      	add	r7, sp, #0
 80134dc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80134de:	f001 fa45 	bl	801496c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80134e8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80134ea:	e011      	b.n	8013510 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d012      	beq.n	801351a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	3324      	adds	r3, #36	; 0x24
 80134f8:	4618      	mov	r0, r3
 80134fa:	f000 fc6d 	bl	8013dd8 <xTaskRemoveFromEventList>
 80134fe:	4603      	mov	r3, r0
 8013500:	2b00      	cmp	r3, #0
 8013502:	d001      	beq.n	8013508 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013504:	f000 fd40 	bl	8013f88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013508:	7bfb      	ldrb	r3, [r7, #15]
 801350a:	3b01      	subs	r3, #1
 801350c:	b2db      	uxtb	r3, r3
 801350e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013510:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013514:	2b00      	cmp	r3, #0
 8013516:	dce9      	bgt.n	80134ec <prvUnlockQueue+0x16>
 8013518:	e000      	b.n	801351c <prvUnlockQueue+0x46>
					break;
 801351a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	22ff      	movs	r2, #255	; 0xff
 8013520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013524:	f001 fa50 	bl	80149c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013528:	f001 fa20 	bl	801496c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013532:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013534:	e011      	b.n	801355a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	691b      	ldr	r3, [r3, #16]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d012      	beq.n	8013564 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	3310      	adds	r3, #16
 8013542:	4618      	mov	r0, r3
 8013544:	f000 fc48 	bl	8013dd8 <xTaskRemoveFromEventList>
 8013548:	4603      	mov	r3, r0
 801354a:	2b00      	cmp	r3, #0
 801354c:	d001      	beq.n	8013552 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801354e:	f000 fd1b 	bl	8013f88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013552:	7bbb      	ldrb	r3, [r7, #14]
 8013554:	3b01      	subs	r3, #1
 8013556:	b2db      	uxtb	r3, r3
 8013558:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801355a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801355e:	2b00      	cmp	r3, #0
 8013560:	dce9      	bgt.n	8013536 <prvUnlockQueue+0x60>
 8013562:	e000      	b.n	8013566 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013564:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	22ff      	movs	r2, #255	; 0xff
 801356a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801356e:	f001 fa2b 	bl	80149c8 <vPortExitCritical>
}
 8013572:	bf00      	nop
 8013574:	3710      	adds	r7, #16
 8013576:	46bd      	mov	sp, r7
 8013578:	bd80      	pop	{r7, pc}

0801357a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801357a:	b580      	push	{r7, lr}
 801357c:	b084      	sub	sp, #16
 801357e:	af00      	add	r7, sp, #0
 8013580:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013582:	f001 f9f3 	bl	801496c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801358a:	2b00      	cmp	r3, #0
 801358c:	d102      	bne.n	8013594 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801358e:	2301      	movs	r3, #1
 8013590:	60fb      	str	r3, [r7, #12]
 8013592:	e001      	b.n	8013598 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013594:	2300      	movs	r3, #0
 8013596:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013598:	f001 fa16 	bl	80149c8 <vPortExitCritical>

	return xReturn;
 801359c:	68fb      	ldr	r3, [r7, #12]
}
 801359e:	4618      	mov	r0, r3
 80135a0:	3710      	adds	r7, #16
 80135a2:	46bd      	mov	sp, r7
 80135a4:	bd80      	pop	{r7, pc}

080135a6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80135a6:	b580      	push	{r7, lr}
 80135a8:	b084      	sub	sp, #16
 80135aa:	af00      	add	r7, sp, #0
 80135ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80135ae:	f001 f9dd 	bl	801496c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80135ba:	429a      	cmp	r2, r3
 80135bc:	d102      	bne.n	80135c4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80135be:	2301      	movs	r3, #1
 80135c0:	60fb      	str	r3, [r7, #12]
 80135c2:	e001      	b.n	80135c8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80135c4:	2300      	movs	r3, #0
 80135c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80135c8:	f001 f9fe 	bl	80149c8 <vPortExitCritical>

	return xReturn;
 80135cc:	68fb      	ldr	r3, [r7, #12]
}
 80135ce:	4618      	mov	r0, r3
 80135d0:	3710      	adds	r7, #16
 80135d2:	46bd      	mov	sp, r7
 80135d4:	bd80      	pop	{r7, pc}

080135d6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80135d6:	b580      	push	{r7, lr}
 80135d8:	b08e      	sub	sp, #56	; 0x38
 80135da:	af04      	add	r7, sp, #16
 80135dc:	60f8      	str	r0, [r7, #12]
 80135de:	60b9      	str	r1, [r7, #8]
 80135e0:	607a      	str	r2, [r7, #4]
 80135e2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80135e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d109      	bne.n	80135fe <xTaskCreateStatic+0x28>
	__asm volatile
 80135ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135ee:	f383 8811 	msr	BASEPRI, r3
 80135f2:	f3bf 8f6f 	isb	sy
 80135f6:	f3bf 8f4f 	dsb	sy
 80135fa:	623b      	str	r3, [r7, #32]
 80135fc:	e7fe      	b.n	80135fc <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80135fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013600:	2b00      	cmp	r3, #0
 8013602:	d109      	bne.n	8013618 <xTaskCreateStatic+0x42>
 8013604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013608:	f383 8811 	msr	BASEPRI, r3
 801360c:	f3bf 8f6f 	isb	sy
 8013610:	f3bf 8f4f 	dsb	sy
 8013614:	61fb      	str	r3, [r7, #28]
 8013616:	e7fe      	b.n	8013616 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013618:	2354      	movs	r3, #84	; 0x54
 801361a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801361c:	693b      	ldr	r3, [r7, #16]
 801361e:	2b54      	cmp	r3, #84	; 0x54
 8013620:	d009      	beq.n	8013636 <xTaskCreateStatic+0x60>
 8013622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013626:	f383 8811 	msr	BASEPRI, r3
 801362a:	f3bf 8f6f 	isb	sy
 801362e:	f3bf 8f4f 	dsb	sy
 8013632:	61bb      	str	r3, [r7, #24]
 8013634:	e7fe      	b.n	8013634 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013636:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801363a:	2b00      	cmp	r3, #0
 801363c:	d01e      	beq.n	801367c <xTaskCreateStatic+0xa6>
 801363e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013640:	2b00      	cmp	r3, #0
 8013642:	d01b      	beq.n	801367c <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013646:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801364a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801364c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013650:	2202      	movs	r2, #2
 8013652:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013656:	2300      	movs	r3, #0
 8013658:	9303      	str	r3, [sp, #12]
 801365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801365c:	9302      	str	r3, [sp, #8]
 801365e:	f107 0314 	add.w	r3, r7, #20
 8013662:	9301      	str	r3, [sp, #4]
 8013664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013666:	9300      	str	r3, [sp, #0]
 8013668:	683b      	ldr	r3, [r7, #0]
 801366a:	687a      	ldr	r2, [r7, #4]
 801366c:	68b9      	ldr	r1, [r7, #8]
 801366e:	68f8      	ldr	r0, [r7, #12]
 8013670:	f000 f850 	bl	8013714 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013674:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013676:	f000 f8d3 	bl	8013820 <prvAddNewTaskToReadyList>
 801367a:	e001      	b.n	8013680 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 801367c:	2300      	movs	r3, #0
 801367e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013680:	697b      	ldr	r3, [r7, #20]
	}
 8013682:	4618      	mov	r0, r3
 8013684:	3728      	adds	r7, #40	; 0x28
 8013686:	46bd      	mov	sp, r7
 8013688:	bd80      	pop	{r7, pc}

0801368a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801368a:	b580      	push	{r7, lr}
 801368c:	b08c      	sub	sp, #48	; 0x30
 801368e:	af04      	add	r7, sp, #16
 8013690:	60f8      	str	r0, [r7, #12]
 8013692:	60b9      	str	r1, [r7, #8]
 8013694:	603b      	str	r3, [r7, #0]
 8013696:	4613      	mov	r3, r2
 8013698:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801369a:	88fb      	ldrh	r3, [r7, #6]
 801369c:	009b      	lsls	r3, r3, #2
 801369e:	4618      	mov	r0, r3
 80136a0:	f001 fa7e 	bl	8014ba0 <pvPortMalloc>
 80136a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80136a6:	697b      	ldr	r3, [r7, #20]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d00e      	beq.n	80136ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80136ac:	2054      	movs	r0, #84	; 0x54
 80136ae:	f001 fa77 	bl	8014ba0 <pvPortMalloc>
 80136b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80136b4:	69fb      	ldr	r3, [r7, #28]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d003      	beq.n	80136c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80136ba:	69fb      	ldr	r3, [r7, #28]
 80136bc:	697a      	ldr	r2, [r7, #20]
 80136be:	631a      	str	r2, [r3, #48]	; 0x30
 80136c0:	e005      	b.n	80136ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80136c2:	6978      	ldr	r0, [r7, #20]
 80136c4:	f001 fb2e 	bl	8014d24 <vPortFree>
 80136c8:	e001      	b.n	80136ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80136ca:	2300      	movs	r3, #0
 80136cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80136ce:	69fb      	ldr	r3, [r7, #28]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d017      	beq.n	8013704 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80136d4:	69fb      	ldr	r3, [r7, #28]
 80136d6:	2200      	movs	r2, #0
 80136d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80136dc:	88fa      	ldrh	r2, [r7, #6]
 80136de:	2300      	movs	r3, #0
 80136e0:	9303      	str	r3, [sp, #12]
 80136e2:	69fb      	ldr	r3, [r7, #28]
 80136e4:	9302      	str	r3, [sp, #8]
 80136e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136e8:	9301      	str	r3, [sp, #4]
 80136ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ec:	9300      	str	r3, [sp, #0]
 80136ee:	683b      	ldr	r3, [r7, #0]
 80136f0:	68b9      	ldr	r1, [r7, #8]
 80136f2:	68f8      	ldr	r0, [r7, #12]
 80136f4:	f000 f80e 	bl	8013714 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80136f8:	69f8      	ldr	r0, [r7, #28]
 80136fa:	f000 f891 	bl	8013820 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80136fe:	2301      	movs	r3, #1
 8013700:	61bb      	str	r3, [r7, #24]
 8013702:	e002      	b.n	801370a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013704:	f04f 33ff 	mov.w	r3, #4294967295
 8013708:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801370a:	69bb      	ldr	r3, [r7, #24]
	}
 801370c:	4618      	mov	r0, r3
 801370e:	3720      	adds	r7, #32
 8013710:	46bd      	mov	sp, r7
 8013712:	bd80      	pop	{r7, pc}

08013714 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b088      	sub	sp, #32
 8013718:	af00      	add	r7, sp, #0
 801371a:	60f8      	str	r0, [r7, #12]
 801371c:	60b9      	str	r1, [r7, #8]
 801371e:	607a      	str	r2, [r7, #4]
 8013720:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801372c:	3b01      	subs	r3, #1
 801372e:	009b      	lsls	r3, r3, #2
 8013730:	4413      	add	r3, r2
 8013732:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013734:	69bb      	ldr	r3, [r7, #24]
 8013736:	f023 0307 	bic.w	r3, r3, #7
 801373a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801373c:	69bb      	ldr	r3, [r7, #24]
 801373e:	f003 0307 	and.w	r3, r3, #7
 8013742:	2b00      	cmp	r3, #0
 8013744:	d009      	beq.n	801375a <prvInitialiseNewTask+0x46>
 8013746:	f04f 0350 	mov.w	r3, #80	; 0x50
 801374a:	f383 8811 	msr	BASEPRI, r3
 801374e:	f3bf 8f6f 	isb	sy
 8013752:	f3bf 8f4f 	dsb	sy
 8013756:	617b      	str	r3, [r7, #20]
 8013758:	e7fe      	b.n	8013758 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801375a:	68bb      	ldr	r3, [r7, #8]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d01f      	beq.n	80137a0 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013760:	2300      	movs	r3, #0
 8013762:	61fb      	str	r3, [r7, #28]
 8013764:	e012      	b.n	801378c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013766:	68ba      	ldr	r2, [r7, #8]
 8013768:	69fb      	ldr	r3, [r7, #28]
 801376a:	4413      	add	r3, r2
 801376c:	7819      	ldrb	r1, [r3, #0]
 801376e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013770:	69fb      	ldr	r3, [r7, #28]
 8013772:	4413      	add	r3, r2
 8013774:	3334      	adds	r3, #52	; 0x34
 8013776:	460a      	mov	r2, r1
 8013778:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801377a:	68ba      	ldr	r2, [r7, #8]
 801377c:	69fb      	ldr	r3, [r7, #28]
 801377e:	4413      	add	r3, r2
 8013780:	781b      	ldrb	r3, [r3, #0]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d006      	beq.n	8013794 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013786:	69fb      	ldr	r3, [r7, #28]
 8013788:	3301      	adds	r3, #1
 801378a:	61fb      	str	r3, [r7, #28]
 801378c:	69fb      	ldr	r3, [r7, #28]
 801378e:	2b0f      	cmp	r3, #15
 8013790:	d9e9      	bls.n	8013766 <prvInitialiseNewTask+0x52>
 8013792:	e000      	b.n	8013796 <prvInitialiseNewTask+0x82>
			{
				break;
 8013794:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013798:	2200      	movs	r2, #0
 801379a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801379e:	e003      	b.n	80137a8 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80137a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137a2:	2200      	movs	r2, #0
 80137a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80137a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137aa:	2b06      	cmp	r3, #6
 80137ac:	d901      	bls.n	80137b2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80137ae:	2306      	movs	r3, #6
 80137b0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80137b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80137b6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80137b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80137bc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80137be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137c0:	2200      	movs	r2, #0
 80137c2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80137c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137c6:	3304      	adds	r3, #4
 80137c8:	4618      	mov	r0, r3
 80137ca:	f7ff f8f2 	bl	80129b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80137ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137d0:	3318      	adds	r3, #24
 80137d2:	4618      	mov	r0, r3
 80137d4:	f7ff f8ed 	bl	80129b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80137d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80137de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137e0:	f1c3 0207 	rsb	r2, r3, #7
 80137e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80137e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137ec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80137ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137f0:	2200      	movs	r2, #0
 80137f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80137f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137f6:	2200      	movs	r2, #0
 80137f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80137fc:	683a      	ldr	r2, [r7, #0]
 80137fe:	68f9      	ldr	r1, [r7, #12]
 8013800:	69b8      	ldr	r0, [r7, #24]
 8013802:	f000 ff8b 	bl	801471c <pxPortInitialiseStack>
 8013806:	4602      	mov	r2, r0
 8013808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801380a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801380c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801380e:	2b00      	cmp	r3, #0
 8013810:	d002      	beq.n	8013818 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013816:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013818:	bf00      	nop
 801381a:	3720      	adds	r7, #32
 801381c:	46bd      	mov	sp, r7
 801381e:	bd80      	pop	{r7, pc}

08013820 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013820:	b580      	push	{r7, lr}
 8013822:	b082      	sub	sp, #8
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013828:	f001 f8a0 	bl	801496c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801382c:	4b2a      	ldr	r3, [pc, #168]	; (80138d8 <prvAddNewTaskToReadyList+0xb8>)
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	3301      	adds	r3, #1
 8013832:	4a29      	ldr	r2, [pc, #164]	; (80138d8 <prvAddNewTaskToReadyList+0xb8>)
 8013834:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013836:	4b29      	ldr	r3, [pc, #164]	; (80138dc <prvAddNewTaskToReadyList+0xbc>)
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d109      	bne.n	8013852 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801383e:	4a27      	ldr	r2, [pc, #156]	; (80138dc <prvAddNewTaskToReadyList+0xbc>)
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013844:	4b24      	ldr	r3, [pc, #144]	; (80138d8 <prvAddNewTaskToReadyList+0xb8>)
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	2b01      	cmp	r3, #1
 801384a:	d110      	bne.n	801386e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801384c:	f000 fbc0 	bl	8013fd0 <prvInitialiseTaskLists>
 8013850:	e00d      	b.n	801386e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013852:	4b23      	ldr	r3, [pc, #140]	; (80138e0 <prvAddNewTaskToReadyList+0xc0>)
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d109      	bne.n	801386e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801385a:	4b20      	ldr	r3, [pc, #128]	; (80138dc <prvAddNewTaskToReadyList+0xbc>)
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013864:	429a      	cmp	r2, r3
 8013866:	d802      	bhi.n	801386e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013868:	4a1c      	ldr	r2, [pc, #112]	; (80138dc <prvAddNewTaskToReadyList+0xbc>)
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801386e:	4b1d      	ldr	r3, [pc, #116]	; (80138e4 <prvAddNewTaskToReadyList+0xc4>)
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	3301      	adds	r3, #1
 8013874:	4a1b      	ldr	r2, [pc, #108]	; (80138e4 <prvAddNewTaskToReadyList+0xc4>)
 8013876:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801387c:	2201      	movs	r2, #1
 801387e:	409a      	lsls	r2, r3
 8013880:	4b19      	ldr	r3, [pc, #100]	; (80138e8 <prvAddNewTaskToReadyList+0xc8>)
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	4313      	orrs	r3, r2
 8013886:	4a18      	ldr	r2, [pc, #96]	; (80138e8 <prvAddNewTaskToReadyList+0xc8>)
 8013888:	6013      	str	r3, [r2, #0]
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801388e:	4613      	mov	r3, r2
 8013890:	009b      	lsls	r3, r3, #2
 8013892:	4413      	add	r3, r2
 8013894:	009b      	lsls	r3, r3, #2
 8013896:	4a15      	ldr	r2, [pc, #84]	; (80138ec <prvAddNewTaskToReadyList+0xcc>)
 8013898:	441a      	add	r2, r3
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	3304      	adds	r3, #4
 801389e:	4619      	mov	r1, r3
 80138a0:	4610      	mov	r0, r2
 80138a2:	f7ff f893 	bl	80129cc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80138a6:	f001 f88f 	bl	80149c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80138aa:	4b0d      	ldr	r3, [pc, #52]	; (80138e0 <prvAddNewTaskToReadyList+0xc0>)
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d00e      	beq.n	80138d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80138b2:	4b0a      	ldr	r3, [pc, #40]	; (80138dc <prvAddNewTaskToReadyList+0xbc>)
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138bc:	429a      	cmp	r2, r3
 80138be:	d207      	bcs.n	80138d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80138c0:	4b0b      	ldr	r3, [pc, #44]	; (80138f0 <prvAddNewTaskToReadyList+0xd0>)
 80138c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138c6:	601a      	str	r2, [r3, #0]
 80138c8:	f3bf 8f4f 	dsb	sy
 80138cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80138d0:	bf00      	nop
 80138d2:	3708      	adds	r7, #8
 80138d4:	46bd      	mov	sp, r7
 80138d6:	bd80      	pop	{r7, pc}
 80138d8:	2000110c 	.word	0x2000110c
 80138dc:	2000100c 	.word	0x2000100c
 80138e0:	20001118 	.word	0x20001118
 80138e4:	20001128 	.word	0x20001128
 80138e8:	20001114 	.word	0x20001114
 80138ec:	20001010 	.word	0x20001010
 80138f0:	e000ed04 	.word	0xe000ed04

080138f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b084      	sub	sp, #16
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80138fc:	2300      	movs	r3, #0
 80138fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d016      	beq.n	8013934 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013906:	4b13      	ldr	r3, [pc, #76]	; (8013954 <vTaskDelay+0x60>)
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d009      	beq.n	8013922 <vTaskDelay+0x2e>
 801390e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013912:	f383 8811 	msr	BASEPRI, r3
 8013916:	f3bf 8f6f 	isb	sy
 801391a:	f3bf 8f4f 	dsb	sy
 801391e:	60bb      	str	r3, [r7, #8]
 8013920:	e7fe      	b.n	8013920 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8013922:	f000 f879 	bl	8013a18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013926:	2100      	movs	r1, #0
 8013928:	6878      	ldr	r0, [r7, #4]
 801392a:	f000 fe91 	bl	8014650 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801392e:	f000 f881 	bl	8013a34 <xTaskResumeAll>
 8013932:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d107      	bne.n	801394a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 801393a:	4b07      	ldr	r3, [pc, #28]	; (8013958 <vTaskDelay+0x64>)
 801393c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013940:	601a      	str	r2, [r3, #0]
 8013942:	f3bf 8f4f 	dsb	sy
 8013946:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801394a:	bf00      	nop
 801394c:	3710      	adds	r7, #16
 801394e:	46bd      	mov	sp, r7
 8013950:	bd80      	pop	{r7, pc}
 8013952:	bf00      	nop
 8013954:	20001134 	.word	0x20001134
 8013958:	e000ed04 	.word	0xe000ed04

0801395c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801395c:	b580      	push	{r7, lr}
 801395e:	b08a      	sub	sp, #40	; 0x28
 8013960:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013962:	2300      	movs	r3, #0
 8013964:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013966:	2300      	movs	r3, #0
 8013968:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801396a:	463a      	mov	r2, r7
 801396c:	1d39      	adds	r1, r7, #4
 801396e:	f107 0308 	add.w	r3, r7, #8
 8013972:	4618      	mov	r0, r3
 8013974:	f7ee fa9a 	bl	8001eac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013978:	6839      	ldr	r1, [r7, #0]
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	68ba      	ldr	r2, [r7, #8]
 801397e:	9202      	str	r2, [sp, #8]
 8013980:	9301      	str	r3, [sp, #4]
 8013982:	2300      	movs	r3, #0
 8013984:	9300      	str	r3, [sp, #0]
 8013986:	2300      	movs	r3, #0
 8013988:	460a      	mov	r2, r1
 801398a:	491d      	ldr	r1, [pc, #116]	; (8013a00 <vTaskStartScheduler+0xa4>)
 801398c:	481d      	ldr	r0, [pc, #116]	; (8013a04 <vTaskStartScheduler+0xa8>)
 801398e:	f7ff fe22 	bl	80135d6 <xTaskCreateStatic>
 8013992:	4602      	mov	r2, r0
 8013994:	4b1c      	ldr	r3, [pc, #112]	; (8013a08 <vTaskStartScheduler+0xac>)
 8013996:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013998:	4b1b      	ldr	r3, [pc, #108]	; (8013a08 <vTaskStartScheduler+0xac>)
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d002      	beq.n	80139a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80139a0:	2301      	movs	r3, #1
 80139a2:	617b      	str	r3, [r7, #20]
 80139a4:	e001      	b.n	80139aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80139a6:	2300      	movs	r3, #0
 80139a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80139aa:	697b      	ldr	r3, [r7, #20]
 80139ac:	2b01      	cmp	r3, #1
 80139ae:	d115      	bne.n	80139dc <vTaskStartScheduler+0x80>
 80139b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139b4:	f383 8811 	msr	BASEPRI, r3
 80139b8:	f3bf 8f6f 	isb	sy
 80139bc:	f3bf 8f4f 	dsb	sy
 80139c0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80139c2:	4b12      	ldr	r3, [pc, #72]	; (8013a0c <vTaskStartScheduler+0xb0>)
 80139c4:	f04f 32ff 	mov.w	r2, #4294967295
 80139c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80139ca:	4b11      	ldr	r3, [pc, #68]	; (8013a10 <vTaskStartScheduler+0xb4>)
 80139cc:	2201      	movs	r2, #1
 80139ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80139d0:	4b10      	ldr	r3, [pc, #64]	; (8013a14 <vTaskStartScheduler+0xb8>)
 80139d2:	2200      	movs	r2, #0
 80139d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80139d6:	f000 ff2b 	bl	8014830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80139da:	e00d      	b.n	80139f8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80139dc:	697b      	ldr	r3, [r7, #20]
 80139de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139e2:	d109      	bne.n	80139f8 <vTaskStartScheduler+0x9c>
 80139e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139e8:	f383 8811 	msr	BASEPRI, r3
 80139ec:	f3bf 8f6f 	isb	sy
 80139f0:	f3bf 8f4f 	dsb	sy
 80139f4:	60fb      	str	r3, [r7, #12]
 80139f6:	e7fe      	b.n	80139f6 <vTaskStartScheduler+0x9a>
}
 80139f8:	bf00      	nop
 80139fa:	3718      	adds	r7, #24
 80139fc:	46bd      	mov	sp, r7
 80139fe:	bd80      	pop	{r7, pc}
 8013a00:	0801b1a4 	.word	0x0801b1a4
 8013a04:	08013fa1 	.word	0x08013fa1
 8013a08:	20001130 	.word	0x20001130
 8013a0c:	2000112c 	.word	0x2000112c
 8013a10:	20001118 	.word	0x20001118
 8013a14:	20001110 	.word	0x20001110

08013a18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013a18:	b480      	push	{r7}
 8013a1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013a1c:	4b04      	ldr	r3, [pc, #16]	; (8013a30 <vTaskSuspendAll+0x18>)
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	3301      	adds	r3, #1
 8013a22:	4a03      	ldr	r2, [pc, #12]	; (8013a30 <vTaskSuspendAll+0x18>)
 8013a24:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013a26:	bf00      	nop
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a2e:	4770      	bx	lr
 8013a30:	20001134 	.word	0x20001134

08013a34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b084      	sub	sp, #16
 8013a38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013a3e:	2300      	movs	r3, #0
 8013a40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013a42:	4b41      	ldr	r3, [pc, #260]	; (8013b48 <xTaskResumeAll+0x114>)
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d109      	bne.n	8013a5e <xTaskResumeAll+0x2a>
 8013a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a4e:	f383 8811 	msr	BASEPRI, r3
 8013a52:	f3bf 8f6f 	isb	sy
 8013a56:	f3bf 8f4f 	dsb	sy
 8013a5a:	603b      	str	r3, [r7, #0]
 8013a5c:	e7fe      	b.n	8013a5c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013a5e:	f000 ff85 	bl	801496c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013a62:	4b39      	ldr	r3, [pc, #228]	; (8013b48 <xTaskResumeAll+0x114>)
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	3b01      	subs	r3, #1
 8013a68:	4a37      	ldr	r2, [pc, #220]	; (8013b48 <xTaskResumeAll+0x114>)
 8013a6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013a6c:	4b36      	ldr	r3, [pc, #216]	; (8013b48 <xTaskResumeAll+0x114>)
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d161      	bne.n	8013b38 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013a74:	4b35      	ldr	r3, [pc, #212]	; (8013b4c <xTaskResumeAll+0x118>)
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d05d      	beq.n	8013b38 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013a7c:	e02e      	b.n	8013adc <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013a7e:	4b34      	ldr	r3, [pc, #208]	; (8013b50 <xTaskResumeAll+0x11c>)
 8013a80:	68db      	ldr	r3, [r3, #12]
 8013a82:	68db      	ldr	r3, [r3, #12]
 8013a84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	3318      	adds	r3, #24
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	f7fe fffb 	bl	8012a86 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	3304      	adds	r3, #4
 8013a94:	4618      	mov	r0, r3
 8013a96:	f7fe fff6 	bl	8012a86 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a9e:	2201      	movs	r2, #1
 8013aa0:	409a      	lsls	r2, r3
 8013aa2:	4b2c      	ldr	r3, [pc, #176]	; (8013b54 <xTaskResumeAll+0x120>)
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	4313      	orrs	r3, r2
 8013aa8:	4a2a      	ldr	r2, [pc, #168]	; (8013b54 <xTaskResumeAll+0x120>)
 8013aaa:	6013      	str	r3, [r2, #0]
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ab0:	4613      	mov	r3, r2
 8013ab2:	009b      	lsls	r3, r3, #2
 8013ab4:	4413      	add	r3, r2
 8013ab6:	009b      	lsls	r3, r3, #2
 8013ab8:	4a27      	ldr	r2, [pc, #156]	; (8013b58 <xTaskResumeAll+0x124>)
 8013aba:	441a      	add	r2, r3
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	3304      	adds	r3, #4
 8013ac0:	4619      	mov	r1, r3
 8013ac2:	4610      	mov	r0, r2
 8013ac4:	f7fe ff82 	bl	80129cc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013acc:	4b23      	ldr	r3, [pc, #140]	; (8013b5c <xTaskResumeAll+0x128>)
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ad2:	429a      	cmp	r2, r3
 8013ad4:	d302      	bcc.n	8013adc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8013ad6:	4b22      	ldr	r3, [pc, #136]	; (8013b60 <xTaskResumeAll+0x12c>)
 8013ad8:	2201      	movs	r2, #1
 8013ada:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013adc:	4b1c      	ldr	r3, [pc, #112]	; (8013b50 <xTaskResumeAll+0x11c>)
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d1cc      	bne.n	8013a7e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d001      	beq.n	8013aee <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013aea:	f000 fb0b 	bl	8014104 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013aee:	4b1d      	ldr	r3, [pc, #116]	; (8013b64 <xTaskResumeAll+0x130>)
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d010      	beq.n	8013b1c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013afa:	f000 f837 	bl	8013b6c <xTaskIncrementTick>
 8013afe:	4603      	mov	r3, r0
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d002      	beq.n	8013b0a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8013b04:	4b16      	ldr	r3, [pc, #88]	; (8013b60 <xTaskResumeAll+0x12c>)
 8013b06:	2201      	movs	r2, #1
 8013b08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	3b01      	subs	r3, #1
 8013b0e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d1f1      	bne.n	8013afa <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8013b16:	4b13      	ldr	r3, [pc, #76]	; (8013b64 <xTaskResumeAll+0x130>)
 8013b18:	2200      	movs	r2, #0
 8013b1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013b1c:	4b10      	ldr	r3, [pc, #64]	; (8013b60 <xTaskResumeAll+0x12c>)
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d009      	beq.n	8013b38 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013b24:	2301      	movs	r3, #1
 8013b26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013b28:	4b0f      	ldr	r3, [pc, #60]	; (8013b68 <xTaskResumeAll+0x134>)
 8013b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b2e:	601a      	str	r2, [r3, #0]
 8013b30:	f3bf 8f4f 	dsb	sy
 8013b34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013b38:	f000 ff46 	bl	80149c8 <vPortExitCritical>

	return xAlreadyYielded;
 8013b3c:	68bb      	ldr	r3, [r7, #8]
}
 8013b3e:	4618      	mov	r0, r3
 8013b40:	3710      	adds	r7, #16
 8013b42:	46bd      	mov	sp, r7
 8013b44:	bd80      	pop	{r7, pc}
 8013b46:	bf00      	nop
 8013b48:	20001134 	.word	0x20001134
 8013b4c:	2000110c 	.word	0x2000110c
 8013b50:	200010cc 	.word	0x200010cc
 8013b54:	20001114 	.word	0x20001114
 8013b58:	20001010 	.word	0x20001010
 8013b5c:	2000100c 	.word	0x2000100c
 8013b60:	20001120 	.word	0x20001120
 8013b64:	2000111c 	.word	0x2000111c
 8013b68:	e000ed04 	.word	0xe000ed04

08013b6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	b086      	sub	sp, #24
 8013b70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013b72:	2300      	movs	r3, #0
 8013b74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013b76:	4b4e      	ldr	r3, [pc, #312]	; (8013cb0 <xTaskIncrementTick+0x144>)
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	f040 8087 	bne.w	8013c8e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013b80:	4b4c      	ldr	r3, [pc, #304]	; (8013cb4 <xTaskIncrementTick+0x148>)
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	3301      	adds	r3, #1
 8013b86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013b88:	4a4a      	ldr	r2, [pc, #296]	; (8013cb4 <xTaskIncrementTick+0x148>)
 8013b8a:	693b      	ldr	r3, [r7, #16]
 8013b8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013b8e:	693b      	ldr	r3, [r7, #16]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d11f      	bne.n	8013bd4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8013b94:	4b48      	ldr	r3, [pc, #288]	; (8013cb8 <xTaskIncrementTick+0x14c>)
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d009      	beq.n	8013bb2 <xTaskIncrementTick+0x46>
 8013b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ba2:	f383 8811 	msr	BASEPRI, r3
 8013ba6:	f3bf 8f6f 	isb	sy
 8013baa:	f3bf 8f4f 	dsb	sy
 8013bae:	603b      	str	r3, [r7, #0]
 8013bb0:	e7fe      	b.n	8013bb0 <xTaskIncrementTick+0x44>
 8013bb2:	4b41      	ldr	r3, [pc, #260]	; (8013cb8 <xTaskIncrementTick+0x14c>)
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	60fb      	str	r3, [r7, #12]
 8013bb8:	4b40      	ldr	r3, [pc, #256]	; (8013cbc <xTaskIncrementTick+0x150>)
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	4a3e      	ldr	r2, [pc, #248]	; (8013cb8 <xTaskIncrementTick+0x14c>)
 8013bbe:	6013      	str	r3, [r2, #0]
 8013bc0:	4a3e      	ldr	r2, [pc, #248]	; (8013cbc <xTaskIncrementTick+0x150>)
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	6013      	str	r3, [r2, #0]
 8013bc6:	4b3e      	ldr	r3, [pc, #248]	; (8013cc0 <xTaskIncrementTick+0x154>)
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	3301      	adds	r3, #1
 8013bcc:	4a3c      	ldr	r2, [pc, #240]	; (8013cc0 <xTaskIncrementTick+0x154>)
 8013bce:	6013      	str	r3, [r2, #0]
 8013bd0:	f000 fa98 	bl	8014104 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013bd4:	4b3b      	ldr	r3, [pc, #236]	; (8013cc4 <xTaskIncrementTick+0x158>)
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	693a      	ldr	r2, [r7, #16]
 8013bda:	429a      	cmp	r2, r3
 8013bdc:	d348      	bcc.n	8013c70 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013bde:	4b36      	ldr	r3, [pc, #216]	; (8013cb8 <xTaskIncrementTick+0x14c>)
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d104      	bne.n	8013bf2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013be8:	4b36      	ldr	r3, [pc, #216]	; (8013cc4 <xTaskIncrementTick+0x158>)
 8013bea:	f04f 32ff 	mov.w	r2, #4294967295
 8013bee:	601a      	str	r2, [r3, #0]
					break;
 8013bf0:	e03e      	b.n	8013c70 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013bf2:	4b31      	ldr	r3, [pc, #196]	; (8013cb8 <xTaskIncrementTick+0x14c>)
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	68db      	ldr	r3, [r3, #12]
 8013bf8:	68db      	ldr	r3, [r3, #12]
 8013bfa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013bfc:	68bb      	ldr	r3, [r7, #8]
 8013bfe:	685b      	ldr	r3, [r3, #4]
 8013c00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013c02:	693a      	ldr	r2, [r7, #16]
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	429a      	cmp	r2, r3
 8013c08:	d203      	bcs.n	8013c12 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013c0a:	4a2e      	ldr	r2, [pc, #184]	; (8013cc4 <xTaskIncrementTick+0x158>)
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013c10:	e02e      	b.n	8013c70 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013c12:	68bb      	ldr	r3, [r7, #8]
 8013c14:	3304      	adds	r3, #4
 8013c16:	4618      	mov	r0, r3
 8013c18:	f7fe ff35 	bl	8012a86 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013c1c:	68bb      	ldr	r3, [r7, #8]
 8013c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d004      	beq.n	8013c2e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013c24:	68bb      	ldr	r3, [r7, #8]
 8013c26:	3318      	adds	r3, #24
 8013c28:	4618      	mov	r0, r3
 8013c2a:	f7fe ff2c 	bl	8012a86 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013c2e:	68bb      	ldr	r3, [r7, #8]
 8013c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c32:	2201      	movs	r2, #1
 8013c34:	409a      	lsls	r2, r3
 8013c36:	4b24      	ldr	r3, [pc, #144]	; (8013cc8 <xTaskIncrementTick+0x15c>)
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	4313      	orrs	r3, r2
 8013c3c:	4a22      	ldr	r2, [pc, #136]	; (8013cc8 <xTaskIncrementTick+0x15c>)
 8013c3e:	6013      	str	r3, [r2, #0]
 8013c40:	68bb      	ldr	r3, [r7, #8]
 8013c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c44:	4613      	mov	r3, r2
 8013c46:	009b      	lsls	r3, r3, #2
 8013c48:	4413      	add	r3, r2
 8013c4a:	009b      	lsls	r3, r3, #2
 8013c4c:	4a1f      	ldr	r2, [pc, #124]	; (8013ccc <xTaskIncrementTick+0x160>)
 8013c4e:	441a      	add	r2, r3
 8013c50:	68bb      	ldr	r3, [r7, #8]
 8013c52:	3304      	adds	r3, #4
 8013c54:	4619      	mov	r1, r3
 8013c56:	4610      	mov	r0, r2
 8013c58:	f7fe feb8 	bl	80129cc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013c5c:	68bb      	ldr	r3, [r7, #8]
 8013c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c60:	4b1b      	ldr	r3, [pc, #108]	; (8013cd0 <xTaskIncrementTick+0x164>)
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c66:	429a      	cmp	r2, r3
 8013c68:	d3b9      	bcc.n	8013bde <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8013c6a:	2301      	movs	r3, #1
 8013c6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013c6e:	e7b6      	b.n	8013bde <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013c70:	4b17      	ldr	r3, [pc, #92]	; (8013cd0 <xTaskIncrementTick+0x164>)
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c76:	4915      	ldr	r1, [pc, #84]	; (8013ccc <xTaskIncrementTick+0x160>)
 8013c78:	4613      	mov	r3, r2
 8013c7a:	009b      	lsls	r3, r3, #2
 8013c7c:	4413      	add	r3, r2
 8013c7e:	009b      	lsls	r3, r3, #2
 8013c80:	440b      	add	r3, r1
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	2b01      	cmp	r3, #1
 8013c86:	d907      	bls.n	8013c98 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8013c88:	2301      	movs	r3, #1
 8013c8a:	617b      	str	r3, [r7, #20]
 8013c8c:	e004      	b.n	8013c98 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013c8e:	4b11      	ldr	r3, [pc, #68]	; (8013cd4 <xTaskIncrementTick+0x168>)
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	3301      	adds	r3, #1
 8013c94:	4a0f      	ldr	r2, [pc, #60]	; (8013cd4 <xTaskIncrementTick+0x168>)
 8013c96:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013c98:	4b0f      	ldr	r3, [pc, #60]	; (8013cd8 <xTaskIncrementTick+0x16c>)
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d001      	beq.n	8013ca4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8013ca0:	2301      	movs	r3, #1
 8013ca2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013ca4:	697b      	ldr	r3, [r7, #20]
}
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	3718      	adds	r7, #24
 8013caa:	46bd      	mov	sp, r7
 8013cac:	bd80      	pop	{r7, pc}
 8013cae:	bf00      	nop
 8013cb0:	20001134 	.word	0x20001134
 8013cb4:	20001110 	.word	0x20001110
 8013cb8:	200010c4 	.word	0x200010c4
 8013cbc:	200010c8 	.word	0x200010c8
 8013cc0:	20001124 	.word	0x20001124
 8013cc4:	2000112c 	.word	0x2000112c
 8013cc8:	20001114 	.word	0x20001114
 8013ccc:	20001010 	.word	0x20001010
 8013cd0:	2000100c 	.word	0x2000100c
 8013cd4:	2000111c 	.word	0x2000111c
 8013cd8:	20001120 	.word	0x20001120

08013cdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013cdc:	b480      	push	{r7}
 8013cde:	b087      	sub	sp, #28
 8013ce0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013ce2:	4b26      	ldr	r3, [pc, #152]	; (8013d7c <vTaskSwitchContext+0xa0>)
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d003      	beq.n	8013cf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013cea:	4b25      	ldr	r3, [pc, #148]	; (8013d80 <vTaskSwitchContext+0xa4>)
 8013cec:	2201      	movs	r2, #1
 8013cee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013cf0:	e03e      	b.n	8013d70 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8013cf2:	4b23      	ldr	r3, [pc, #140]	; (8013d80 <vTaskSwitchContext+0xa4>)
 8013cf4:	2200      	movs	r2, #0
 8013cf6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013cf8:	4b22      	ldr	r3, [pc, #136]	; (8013d84 <vTaskSwitchContext+0xa8>)
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	fab3 f383 	clz	r3, r3
 8013d04:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013d06:	7afb      	ldrb	r3, [r7, #11]
 8013d08:	f1c3 031f 	rsb	r3, r3, #31
 8013d0c:	617b      	str	r3, [r7, #20]
 8013d0e:	491e      	ldr	r1, [pc, #120]	; (8013d88 <vTaskSwitchContext+0xac>)
 8013d10:	697a      	ldr	r2, [r7, #20]
 8013d12:	4613      	mov	r3, r2
 8013d14:	009b      	lsls	r3, r3, #2
 8013d16:	4413      	add	r3, r2
 8013d18:	009b      	lsls	r3, r3, #2
 8013d1a:	440b      	add	r3, r1
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d109      	bne.n	8013d36 <vTaskSwitchContext+0x5a>
	__asm volatile
 8013d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d26:	f383 8811 	msr	BASEPRI, r3
 8013d2a:	f3bf 8f6f 	isb	sy
 8013d2e:	f3bf 8f4f 	dsb	sy
 8013d32:	607b      	str	r3, [r7, #4]
 8013d34:	e7fe      	b.n	8013d34 <vTaskSwitchContext+0x58>
 8013d36:	697a      	ldr	r2, [r7, #20]
 8013d38:	4613      	mov	r3, r2
 8013d3a:	009b      	lsls	r3, r3, #2
 8013d3c:	4413      	add	r3, r2
 8013d3e:	009b      	lsls	r3, r3, #2
 8013d40:	4a11      	ldr	r2, [pc, #68]	; (8013d88 <vTaskSwitchContext+0xac>)
 8013d42:	4413      	add	r3, r2
 8013d44:	613b      	str	r3, [r7, #16]
 8013d46:	693b      	ldr	r3, [r7, #16]
 8013d48:	685b      	ldr	r3, [r3, #4]
 8013d4a:	685a      	ldr	r2, [r3, #4]
 8013d4c:	693b      	ldr	r3, [r7, #16]
 8013d4e:	605a      	str	r2, [r3, #4]
 8013d50:	693b      	ldr	r3, [r7, #16]
 8013d52:	685a      	ldr	r2, [r3, #4]
 8013d54:	693b      	ldr	r3, [r7, #16]
 8013d56:	3308      	adds	r3, #8
 8013d58:	429a      	cmp	r2, r3
 8013d5a:	d104      	bne.n	8013d66 <vTaskSwitchContext+0x8a>
 8013d5c:	693b      	ldr	r3, [r7, #16]
 8013d5e:	685b      	ldr	r3, [r3, #4]
 8013d60:	685a      	ldr	r2, [r3, #4]
 8013d62:	693b      	ldr	r3, [r7, #16]
 8013d64:	605a      	str	r2, [r3, #4]
 8013d66:	693b      	ldr	r3, [r7, #16]
 8013d68:	685b      	ldr	r3, [r3, #4]
 8013d6a:	68db      	ldr	r3, [r3, #12]
 8013d6c:	4a07      	ldr	r2, [pc, #28]	; (8013d8c <vTaskSwitchContext+0xb0>)
 8013d6e:	6013      	str	r3, [r2, #0]
}
 8013d70:	bf00      	nop
 8013d72:	371c      	adds	r7, #28
 8013d74:	46bd      	mov	sp, r7
 8013d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7a:	4770      	bx	lr
 8013d7c:	20001134 	.word	0x20001134
 8013d80:	20001120 	.word	0x20001120
 8013d84:	20001114 	.word	0x20001114
 8013d88:	20001010 	.word	0x20001010
 8013d8c:	2000100c 	.word	0x2000100c

08013d90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b084      	sub	sp, #16
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
 8013d98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d109      	bne.n	8013db4 <vTaskPlaceOnEventList+0x24>
 8013da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013da4:	f383 8811 	msr	BASEPRI, r3
 8013da8:	f3bf 8f6f 	isb	sy
 8013dac:	f3bf 8f4f 	dsb	sy
 8013db0:	60fb      	str	r3, [r7, #12]
 8013db2:	e7fe      	b.n	8013db2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013db4:	4b07      	ldr	r3, [pc, #28]	; (8013dd4 <vTaskPlaceOnEventList+0x44>)
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	3318      	adds	r3, #24
 8013dba:	4619      	mov	r1, r3
 8013dbc:	6878      	ldr	r0, [r7, #4]
 8013dbe:	f7fe fe29 	bl	8012a14 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013dc2:	2101      	movs	r1, #1
 8013dc4:	6838      	ldr	r0, [r7, #0]
 8013dc6:	f000 fc43 	bl	8014650 <prvAddCurrentTaskToDelayedList>
}
 8013dca:	bf00      	nop
 8013dcc:	3710      	adds	r7, #16
 8013dce:	46bd      	mov	sp, r7
 8013dd0:	bd80      	pop	{r7, pc}
 8013dd2:	bf00      	nop
 8013dd4:	2000100c 	.word	0x2000100c

08013dd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013dd8:	b580      	push	{r7, lr}
 8013dda:	b086      	sub	sp, #24
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	68db      	ldr	r3, [r3, #12]
 8013de4:	68db      	ldr	r3, [r3, #12]
 8013de6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013de8:	693b      	ldr	r3, [r7, #16]
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d109      	bne.n	8013e02 <xTaskRemoveFromEventList+0x2a>
 8013dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013df2:	f383 8811 	msr	BASEPRI, r3
 8013df6:	f3bf 8f6f 	isb	sy
 8013dfa:	f3bf 8f4f 	dsb	sy
 8013dfe:	60fb      	str	r3, [r7, #12]
 8013e00:	e7fe      	b.n	8013e00 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013e02:	693b      	ldr	r3, [r7, #16]
 8013e04:	3318      	adds	r3, #24
 8013e06:	4618      	mov	r0, r3
 8013e08:	f7fe fe3d 	bl	8012a86 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013e0c:	4b1d      	ldr	r3, [pc, #116]	; (8013e84 <xTaskRemoveFromEventList+0xac>)
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d11c      	bne.n	8013e4e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013e14:	693b      	ldr	r3, [r7, #16]
 8013e16:	3304      	adds	r3, #4
 8013e18:	4618      	mov	r0, r3
 8013e1a:	f7fe fe34 	bl	8012a86 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013e1e:	693b      	ldr	r3, [r7, #16]
 8013e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e22:	2201      	movs	r2, #1
 8013e24:	409a      	lsls	r2, r3
 8013e26:	4b18      	ldr	r3, [pc, #96]	; (8013e88 <xTaskRemoveFromEventList+0xb0>)
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	4313      	orrs	r3, r2
 8013e2c:	4a16      	ldr	r2, [pc, #88]	; (8013e88 <xTaskRemoveFromEventList+0xb0>)
 8013e2e:	6013      	str	r3, [r2, #0]
 8013e30:	693b      	ldr	r3, [r7, #16]
 8013e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e34:	4613      	mov	r3, r2
 8013e36:	009b      	lsls	r3, r3, #2
 8013e38:	4413      	add	r3, r2
 8013e3a:	009b      	lsls	r3, r3, #2
 8013e3c:	4a13      	ldr	r2, [pc, #76]	; (8013e8c <xTaskRemoveFromEventList+0xb4>)
 8013e3e:	441a      	add	r2, r3
 8013e40:	693b      	ldr	r3, [r7, #16]
 8013e42:	3304      	adds	r3, #4
 8013e44:	4619      	mov	r1, r3
 8013e46:	4610      	mov	r0, r2
 8013e48:	f7fe fdc0 	bl	80129cc <vListInsertEnd>
 8013e4c:	e005      	b.n	8013e5a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013e4e:	693b      	ldr	r3, [r7, #16]
 8013e50:	3318      	adds	r3, #24
 8013e52:	4619      	mov	r1, r3
 8013e54:	480e      	ldr	r0, [pc, #56]	; (8013e90 <xTaskRemoveFromEventList+0xb8>)
 8013e56:	f7fe fdb9 	bl	80129cc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013e5a:	693b      	ldr	r3, [r7, #16]
 8013e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e5e:	4b0d      	ldr	r3, [pc, #52]	; (8013e94 <xTaskRemoveFromEventList+0xbc>)
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e64:	429a      	cmp	r2, r3
 8013e66:	d905      	bls.n	8013e74 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013e68:	2301      	movs	r3, #1
 8013e6a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013e6c:	4b0a      	ldr	r3, [pc, #40]	; (8013e98 <xTaskRemoveFromEventList+0xc0>)
 8013e6e:	2201      	movs	r2, #1
 8013e70:	601a      	str	r2, [r3, #0]
 8013e72:	e001      	b.n	8013e78 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8013e74:	2300      	movs	r3, #0
 8013e76:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013e78:	697b      	ldr	r3, [r7, #20]
}
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	3718      	adds	r7, #24
 8013e7e:	46bd      	mov	sp, r7
 8013e80:	bd80      	pop	{r7, pc}
 8013e82:	bf00      	nop
 8013e84:	20001134 	.word	0x20001134
 8013e88:	20001114 	.word	0x20001114
 8013e8c:	20001010 	.word	0x20001010
 8013e90:	200010cc 	.word	0x200010cc
 8013e94:	2000100c 	.word	0x2000100c
 8013e98:	20001120 	.word	0x20001120

08013e9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013e9c:	b480      	push	{r7}
 8013e9e:	b083      	sub	sp, #12
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013ea4:	4b06      	ldr	r3, [pc, #24]	; (8013ec0 <vTaskInternalSetTimeOutState+0x24>)
 8013ea6:	681a      	ldr	r2, [r3, #0]
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013eac:	4b05      	ldr	r3, [pc, #20]	; (8013ec4 <vTaskInternalSetTimeOutState+0x28>)
 8013eae:	681a      	ldr	r2, [r3, #0]
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	605a      	str	r2, [r3, #4]
}
 8013eb4:	bf00      	nop
 8013eb6:	370c      	adds	r7, #12
 8013eb8:	46bd      	mov	sp, r7
 8013eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ebe:	4770      	bx	lr
 8013ec0:	20001124 	.word	0x20001124
 8013ec4:	20001110 	.word	0x20001110

08013ec8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b088      	sub	sp, #32
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
 8013ed0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d109      	bne.n	8013eec <xTaskCheckForTimeOut+0x24>
 8013ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013edc:	f383 8811 	msr	BASEPRI, r3
 8013ee0:	f3bf 8f6f 	isb	sy
 8013ee4:	f3bf 8f4f 	dsb	sy
 8013ee8:	613b      	str	r3, [r7, #16]
 8013eea:	e7fe      	b.n	8013eea <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8013eec:	683b      	ldr	r3, [r7, #0]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d109      	bne.n	8013f06 <xTaskCheckForTimeOut+0x3e>
 8013ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ef6:	f383 8811 	msr	BASEPRI, r3
 8013efa:	f3bf 8f6f 	isb	sy
 8013efe:	f3bf 8f4f 	dsb	sy
 8013f02:	60fb      	str	r3, [r7, #12]
 8013f04:	e7fe      	b.n	8013f04 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8013f06:	f000 fd31 	bl	801496c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013f0a:	4b1d      	ldr	r3, [pc, #116]	; (8013f80 <xTaskCheckForTimeOut+0xb8>)
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	685b      	ldr	r3, [r3, #4]
 8013f14:	69ba      	ldr	r2, [r7, #24]
 8013f16:	1ad3      	subs	r3, r2, r3
 8013f18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013f1a:	683b      	ldr	r3, [r7, #0]
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f22:	d102      	bne.n	8013f2a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013f24:	2300      	movs	r3, #0
 8013f26:	61fb      	str	r3, [r7, #28]
 8013f28:	e023      	b.n	8013f72 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	681a      	ldr	r2, [r3, #0]
 8013f2e:	4b15      	ldr	r3, [pc, #84]	; (8013f84 <xTaskCheckForTimeOut+0xbc>)
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	429a      	cmp	r2, r3
 8013f34:	d007      	beq.n	8013f46 <xTaskCheckForTimeOut+0x7e>
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	685b      	ldr	r3, [r3, #4]
 8013f3a:	69ba      	ldr	r2, [r7, #24]
 8013f3c:	429a      	cmp	r2, r3
 8013f3e:	d302      	bcc.n	8013f46 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013f40:	2301      	movs	r3, #1
 8013f42:	61fb      	str	r3, [r7, #28]
 8013f44:	e015      	b.n	8013f72 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013f46:	683b      	ldr	r3, [r7, #0]
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	697a      	ldr	r2, [r7, #20]
 8013f4c:	429a      	cmp	r2, r3
 8013f4e:	d20b      	bcs.n	8013f68 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013f50:	683b      	ldr	r3, [r7, #0]
 8013f52:	681a      	ldr	r2, [r3, #0]
 8013f54:	697b      	ldr	r3, [r7, #20]
 8013f56:	1ad2      	subs	r2, r2, r3
 8013f58:	683b      	ldr	r3, [r7, #0]
 8013f5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013f5c:	6878      	ldr	r0, [r7, #4]
 8013f5e:	f7ff ff9d 	bl	8013e9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013f62:	2300      	movs	r3, #0
 8013f64:	61fb      	str	r3, [r7, #28]
 8013f66:	e004      	b.n	8013f72 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8013f68:	683b      	ldr	r3, [r7, #0]
 8013f6a:	2200      	movs	r2, #0
 8013f6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013f6e:	2301      	movs	r3, #1
 8013f70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013f72:	f000 fd29 	bl	80149c8 <vPortExitCritical>

	return xReturn;
 8013f76:	69fb      	ldr	r3, [r7, #28]
}
 8013f78:	4618      	mov	r0, r3
 8013f7a:	3720      	adds	r7, #32
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	bd80      	pop	{r7, pc}
 8013f80:	20001110 	.word	0x20001110
 8013f84:	20001124 	.word	0x20001124

08013f88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013f88:	b480      	push	{r7}
 8013f8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013f8c:	4b03      	ldr	r3, [pc, #12]	; (8013f9c <vTaskMissedYield+0x14>)
 8013f8e:	2201      	movs	r2, #1
 8013f90:	601a      	str	r2, [r3, #0]
}
 8013f92:	bf00      	nop
 8013f94:	46bd      	mov	sp, r7
 8013f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f9a:	4770      	bx	lr
 8013f9c:	20001120 	.word	0x20001120

08013fa0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b082      	sub	sp, #8
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013fa8:	f000 f852 	bl	8014050 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013fac:	4b06      	ldr	r3, [pc, #24]	; (8013fc8 <prvIdleTask+0x28>)
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	2b01      	cmp	r3, #1
 8013fb2:	d9f9      	bls.n	8013fa8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013fb4:	4b05      	ldr	r3, [pc, #20]	; (8013fcc <prvIdleTask+0x2c>)
 8013fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013fba:	601a      	str	r2, [r3, #0]
 8013fbc:	f3bf 8f4f 	dsb	sy
 8013fc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013fc4:	e7f0      	b.n	8013fa8 <prvIdleTask+0x8>
 8013fc6:	bf00      	nop
 8013fc8:	20001010 	.word	0x20001010
 8013fcc:	e000ed04 	.word	0xe000ed04

08013fd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b082      	sub	sp, #8
 8013fd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	607b      	str	r3, [r7, #4]
 8013fda:	e00c      	b.n	8013ff6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013fdc:	687a      	ldr	r2, [r7, #4]
 8013fde:	4613      	mov	r3, r2
 8013fe0:	009b      	lsls	r3, r3, #2
 8013fe2:	4413      	add	r3, r2
 8013fe4:	009b      	lsls	r3, r3, #2
 8013fe6:	4a12      	ldr	r2, [pc, #72]	; (8014030 <prvInitialiseTaskLists+0x60>)
 8013fe8:	4413      	add	r3, r2
 8013fea:	4618      	mov	r0, r3
 8013fec:	f7fe fcc1 	bl	8012972 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	3301      	adds	r3, #1
 8013ff4:	607b      	str	r3, [r7, #4]
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	2b06      	cmp	r3, #6
 8013ffa:	d9ef      	bls.n	8013fdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013ffc:	480d      	ldr	r0, [pc, #52]	; (8014034 <prvInitialiseTaskLists+0x64>)
 8013ffe:	f7fe fcb8 	bl	8012972 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014002:	480d      	ldr	r0, [pc, #52]	; (8014038 <prvInitialiseTaskLists+0x68>)
 8014004:	f7fe fcb5 	bl	8012972 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014008:	480c      	ldr	r0, [pc, #48]	; (801403c <prvInitialiseTaskLists+0x6c>)
 801400a:	f7fe fcb2 	bl	8012972 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801400e:	480c      	ldr	r0, [pc, #48]	; (8014040 <prvInitialiseTaskLists+0x70>)
 8014010:	f7fe fcaf 	bl	8012972 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014014:	480b      	ldr	r0, [pc, #44]	; (8014044 <prvInitialiseTaskLists+0x74>)
 8014016:	f7fe fcac 	bl	8012972 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801401a:	4b0b      	ldr	r3, [pc, #44]	; (8014048 <prvInitialiseTaskLists+0x78>)
 801401c:	4a05      	ldr	r2, [pc, #20]	; (8014034 <prvInitialiseTaskLists+0x64>)
 801401e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014020:	4b0a      	ldr	r3, [pc, #40]	; (801404c <prvInitialiseTaskLists+0x7c>)
 8014022:	4a05      	ldr	r2, [pc, #20]	; (8014038 <prvInitialiseTaskLists+0x68>)
 8014024:	601a      	str	r2, [r3, #0]
}
 8014026:	bf00      	nop
 8014028:	3708      	adds	r7, #8
 801402a:	46bd      	mov	sp, r7
 801402c:	bd80      	pop	{r7, pc}
 801402e:	bf00      	nop
 8014030:	20001010 	.word	0x20001010
 8014034:	2000109c 	.word	0x2000109c
 8014038:	200010b0 	.word	0x200010b0
 801403c:	200010cc 	.word	0x200010cc
 8014040:	200010e0 	.word	0x200010e0
 8014044:	200010f8 	.word	0x200010f8
 8014048:	200010c4 	.word	0x200010c4
 801404c:	200010c8 	.word	0x200010c8

08014050 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014050:	b580      	push	{r7, lr}
 8014052:	b082      	sub	sp, #8
 8014054:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014056:	e019      	b.n	801408c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014058:	f000 fc88 	bl	801496c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801405c:	4b0f      	ldr	r3, [pc, #60]	; (801409c <prvCheckTasksWaitingTermination+0x4c>)
 801405e:	68db      	ldr	r3, [r3, #12]
 8014060:	68db      	ldr	r3, [r3, #12]
 8014062:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	3304      	adds	r3, #4
 8014068:	4618      	mov	r0, r3
 801406a:	f7fe fd0c 	bl	8012a86 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801406e:	4b0c      	ldr	r3, [pc, #48]	; (80140a0 <prvCheckTasksWaitingTermination+0x50>)
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	3b01      	subs	r3, #1
 8014074:	4a0a      	ldr	r2, [pc, #40]	; (80140a0 <prvCheckTasksWaitingTermination+0x50>)
 8014076:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014078:	4b0a      	ldr	r3, [pc, #40]	; (80140a4 <prvCheckTasksWaitingTermination+0x54>)
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	3b01      	subs	r3, #1
 801407e:	4a09      	ldr	r2, [pc, #36]	; (80140a4 <prvCheckTasksWaitingTermination+0x54>)
 8014080:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014082:	f000 fca1 	bl	80149c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014086:	6878      	ldr	r0, [r7, #4]
 8014088:	f000 f80e 	bl	80140a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801408c:	4b05      	ldr	r3, [pc, #20]	; (80140a4 <prvCheckTasksWaitingTermination+0x54>)
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	2b00      	cmp	r3, #0
 8014092:	d1e1      	bne.n	8014058 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014094:	bf00      	nop
 8014096:	3708      	adds	r7, #8
 8014098:	46bd      	mov	sp, r7
 801409a:	bd80      	pop	{r7, pc}
 801409c:	200010e0 	.word	0x200010e0
 80140a0:	2000110c 	.word	0x2000110c
 80140a4:	200010f4 	.word	0x200010f4

080140a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80140a8:	b580      	push	{r7, lr}
 80140aa:	b084      	sub	sp, #16
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d108      	bne.n	80140cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80140be:	4618      	mov	r0, r3
 80140c0:	f000 fe30 	bl	8014d24 <vPortFree>
				vPortFree( pxTCB );
 80140c4:	6878      	ldr	r0, [r7, #4]
 80140c6:	f000 fe2d 	bl	8014d24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80140ca:	e017      	b.n	80140fc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80140d2:	2b01      	cmp	r3, #1
 80140d4:	d103      	bne.n	80140de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80140d6:	6878      	ldr	r0, [r7, #4]
 80140d8:	f000 fe24 	bl	8014d24 <vPortFree>
	}
 80140dc:	e00e      	b.n	80140fc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80140e4:	2b02      	cmp	r3, #2
 80140e6:	d009      	beq.n	80140fc <prvDeleteTCB+0x54>
 80140e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140ec:	f383 8811 	msr	BASEPRI, r3
 80140f0:	f3bf 8f6f 	isb	sy
 80140f4:	f3bf 8f4f 	dsb	sy
 80140f8:	60fb      	str	r3, [r7, #12]
 80140fa:	e7fe      	b.n	80140fa <prvDeleteTCB+0x52>
	}
 80140fc:	bf00      	nop
 80140fe:	3710      	adds	r7, #16
 8014100:	46bd      	mov	sp, r7
 8014102:	bd80      	pop	{r7, pc}

08014104 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014104:	b480      	push	{r7}
 8014106:	b083      	sub	sp, #12
 8014108:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801410a:	4b0c      	ldr	r3, [pc, #48]	; (801413c <prvResetNextTaskUnblockTime+0x38>)
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d104      	bne.n	801411e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014114:	4b0a      	ldr	r3, [pc, #40]	; (8014140 <prvResetNextTaskUnblockTime+0x3c>)
 8014116:	f04f 32ff 	mov.w	r2, #4294967295
 801411a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801411c:	e008      	b.n	8014130 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801411e:	4b07      	ldr	r3, [pc, #28]	; (801413c <prvResetNextTaskUnblockTime+0x38>)
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	68db      	ldr	r3, [r3, #12]
 8014124:	68db      	ldr	r3, [r3, #12]
 8014126:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	685b      	ldr	r3, [r3, #4]
 801412c:	4a04      	ldr	r2, [pc, #16]	; (8014140 <prvResetNextTaskUnblockTime+0x3c>)
 801412e:	6013      	str	r3, [r2, #0]
}
 8014130:	bf00      	nop
 8014132:	370c      	adds	r7, #12
 8014134:	46bd      	mov	sp, r7
 8014136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801413a:	4770      	bx	lr
 801413c:	200010c4 	.word	0x200010c4
 8014140:	2000112c 	.word	0x2000112c

08014144 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014144:	b480      	push	{r7}
 8014146:	b083      	sub	sp, #12
 8014148:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801414a:	4b0b      	ldr	r3, [pc, #44]	; (8014178 <xTaskGetSchedulerState+0x34>)
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d102      	bne.n	8014158 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014152:	2301      	movs	r3, #1
 8014154:	607b      	str	r3, [r7, #4]
 8014156:	e008      	b.n	801416a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014158:	4b08      	ldr	r3, [pc, #32]	; (801417c <xTaskGetSchedulerState+0x38>)
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d102      	bne.n	8014166 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014160:	2302      	movs	r3, #2
 8014162:	607b      	str	r3, [r7, #4]
 8014164:	e001      	b.n	801416a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014166:	2300      	movs	r3, #0
 8014168:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801416a:	687b      	ldr	r3, [r7, #4]
	}
 801416c:	4618      	mov	r0, r3
 801416e:	370c      	adds	r7, #12
 8014170:	46bd      	mov	sp, r7
 8014172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014176:	4770      	bx	lr
 8014178:	20001118 	.word	0x20001118
 801417c:	20001134 	.word	0x20001134

08014180 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014180:	b580      	push	{r7, lr}
 8014182:	b086      	sub	sp, #24
 8014184:	af00      	add	r7, sp, #0
 8014186:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801418c:	2300      	movs	r3, #0
 801418e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d06c      	beq.n	8014270 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014196:	4b39      	ldr	r3, [pc, #228]	; (801427c <xTaskPriorityDisinherit+0xfc>)
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	693a      	ldr	r2, [r7, #16]
 801419c:	429a      	cmp	r2, r3
 801419e:	d009      	beq.n	80141b4 <xTaskPriorityDisinherit+0x34>
 80141a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141a4:	f383 8811 	msr	BASEPRI, r3
 80141a8:	f3bf 8f6f 	isb	sy
 80141ac:	f3bf 8f4f 	dsb	sy
 80141b0:	60fb      	str	r3, [r7, #12]
 80141b2:	e7fe      	b.n	80141b2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80141b4:	693b      	ldr	r3, [r7, #16]
 80141b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d109      	bne.n	80141d0 <xTaskPriorityDisinherit+0x50>
 80141bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141c0:	f383 8811 	msr	BASEPRI, r3
 80141c4:	f3bf 8f6f 	isb	sy
 80141c8:	f3bf 8f4f 	dsb	sy
 80141cc:	60bb      	str	r3, [r7, #8]
 80141ce:	e7fe      	b.n	80141ce <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80141d0:	693b      	ldr	r3, [r7, #16]
 80141d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80141d4:	1e5a      	subs	r2, r3, #1
 80141d6:	693b      	ldr	r3, [r7, #16]
 80141d8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80141da:	693b      	ldr	r3, [r7, #16]
 80141dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141de:	693b      	ldr	r3, [r7, #16]
 80141e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80141e2:	429a      	cmp	r2, r3
 80141e4:	d044      	beq.n	8014270 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80141e6:	693b      	ldr	r3, [r7, #16]
 80141e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d140      	bne.n	8014270 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80141ee:	693b      	ldr	r3, [r7, #16]
 80141f0:	3304      	adds	r3, #4
 80141f2:	4618      	mov	r0, r3
 80141f4:	f7fe fc47 	bl	8012a86 <uxListRemove>
 80141f8:	4603      	mov	r3, r0
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d115      	bne.n	801422a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80141fe:	693b      	ldr	r3, [r7, #16]
 8014200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014202:	491f      	ldr	r1, [pc, #124]	; (8014280 <xTaskPriorityDisinherit+0x100>)
 8014204:	4613      	mov	r3, r2
 8014206:	009b      	lsls	r3, r3, #2
 8014208:	4413      	add	r3, r2
 801420a:	009b      	lsls	r3, r3, #2
 801420c:	440b      	add	r3, r1
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d10a      	bne.n	801422a <xTaskPriorityDisinherit+0xaa>
 8014214:	693b      	ldr	r3, [r7, #16]
 8014216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014218:	2201      	movs	r2, #1
 801421a:	fa02 f303 	lsl.w	r3, r2, r3
 801421e:	43da      	mvns	r2, r3
 8014220:	4b18      	ldr	r3, [pc, #96]	; (8014284 <xTaskPriorityDisinherit+0x104>)
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	4013      	ands	r3, r2
 8014226:	4a17      	ldr	r2, [pc, #92]	; (8014284 <xTaskPriorityDisinherit+0x104>)
 8014228:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801422a:	693b      	ldr	r3, [r7, #16]
 801422c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801422e:	693b      	ldr	r3, [r7, #16]
 8014230:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014232:	693b      	ldr	r3, [r7, #16]
 8014234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014236:	f1c3 0207 	rsb	r2, r3, #7
 801423a:	693b      	ldr	r3, [r7, #16]
 801423c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801423e:	693b      	ldr	r3, [r7, #16]
 8014240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014242:	2201      	movs	r2, #1
 8014244:	409a      	lsls	r2, r3
 8014246:	4b0f      	ldr	r3, [pc, #60]	; (8014284 <xTaskPriorityDisinherit+0x104>)
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	4313      	orrs	r3, r2
 801424c:	4a0d      	ldr	r2, [pc, #52]	; (8014284 <xTaskPriorityDisinherit+0x104>)
 801424e:	6013      	str	r3, [r2, #0]
 8014250:	693b      	ldr	r3, [r7, #16]
 8014252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014254:	4613      	mov	r3, r2
 8014256:	009b      	lsls	r3, r3, #2
 8014258:	4413      	add	r3, r2
 801425a:	009b      	lsls	r3, r3, #2
 801425c:	4a08      	ldr	r2, [pc, #32]	; (8014280 <xTaskPriorityDisinherit+0x100>)
 801425e:	441a      	add	r2, r3
 8014260:	693b      	ldr	r3, [r7, #16]
 8014262:	3304      	adds	r3, #4
 8014264:	4619      	mov	r1, r3
 8014266:	4610      	mov	r0, r2
 8014268:	f7fe fbb0 	bl	80129cc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801426c:	2301      	movs	r3, #1
 801426e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014270:	697b      	ldr	r3, [r7, #20]
	}
 8014272:	4618      	mov	r0, r3
 8014274:	3718      	adds	r7, #24
 8014276:	46bd      	mov	sp, r7
 8014278:	bd80      	pop	{r7, pc}
 801427a:	bf00      	nop
 801427c:	2000100c 	.word	0x2000100c
 8014280:	20001010 	.word	0x20001010
 8014284:	20001114 	.word	0x20001114

08014288 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8014288:	b580      	push	{r7, lr}
 801428a:	b086      	sub	sp, #24
 801428c:	af00      	add	r7, sp, #0
 801428e:	60f8      	str	r0, [r7, #12]
 8014290:	60b9      	str	r1, [r7, #8]
 8014292:	607a      	str	r2, [r7, #4]
 8014294:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8014296:	f000 fb69 	bl	801496c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801429a:	4b26      	ldr	r3, [pc, #152]	; (8014334 <xTaskNotifyWait+0xac>)
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80142a2:	b2db      	uxtb	r3, r3
 80142a4:	2b02      	cmp	r3, #2
 80142a6:	d01a      	beq.n	80142de <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80142a8:	4b22      	ldr	r3, [pc, #136]	; (8014334 <xTaskNotifyWait+0xac>)
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80142ae:	68fa      	ldr	r2, [r7, #12]
 80142b0:	43d2      	mvns	r2, r2
 80142b2:	400a      	ands	r2, r1
 80142b4:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80142b6:	4b1f      	ldr	r3, [pc, #124]	; (8014334 <xTaskNotifyWait+0xac>)
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	2201      	movs	r2, #1
 80142bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80142c0:	683b      	ldr	r3, [r7, #0]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d00b      	beq.n	80142de <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80142c6:	2101      	movs	r1, #1
 80142c8:	6838      	ldr	r0, [r7, #0]
 80142ca:	f000 f9c1 	bl	8014650 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80142ce:	4b1a      	ldr	r3, [pc, #104]	; (8014338 <xTaskNotifyWait+0xb0>)
 80142d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142d4:	601a      	str	r2, [r3, #0]
 80142d6:	f3bf 8f4f 	dsb	sy
 80142da:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80142de:	f000 fb73 	bl	80149c8 <vPortExitCritical>

		taskENTER_CRITICAL();
 80142e2:	f000 fb43 	bl	801496c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d004      	beq.n	80142f6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80142ec:	4b11      	ldr	r3, [pc, #68]	; (8014334 <xTaskNotifyWait+0xac>)
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80142f6:	4b0f      	ldr	r3, [pc, #60]	; (8014334 <xTaskNotifyWait+0xac>)
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80142fe:	b2db      	uxtb	r3, r3
 8014300:	2b02      	cmp	r3, #2
 8014302:	d002      	beq.n	801430a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8014304:	2300      	movs	r3, #0
 8014306:	617b      	str	r3, [r7, #20]
 8014308:	e008      	b.n	801431c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801430a:	4b0a      	ldr	r3, [pc, #40]	; (8014334 <xTaskNotifyWait+0xac>)
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014310:	68ba      	ldr	r2, [r7, #8]
 8014312:	43d2      	mvns	r2, r2
 8014314:	400a      	ands	r2, r1
 8014316:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8014318:	2301      	movs	r3, #1
 801431a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801431c:	4b05      	ldr	r3, [pc, #20]	; (8014334 <xTaskNotifyWait+0xac>)
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	2200      	movs	r2, #0
 8014322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8014326:	f000 fb4f 	bl	80149c8 <vPortExitCritical>

		return xReturn;
 801432a:	697b      	ldr	r3, [r7, #20]
	}
 801432c:	4618      	mov	r0, r3
 801432e:	3718      	adds	r7, #24
 8014330:	46bd      	mov	sp, r7
 8014332:	bd80      	pop	{r7, pc}
 8014334:	2000100c 	.word	0x2000100c
 8014338:	e000ed04 	.word	0xe000ed04

0801433c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801433c:	b580      	push	{r7, lr}
 801433e:	b08a      	sub	sp, #40	; 0x28
 8014340:	af00      	add	r7, sp, #0
 8014342:	60f8      	str	r0, [r7, #12]
 8014344:	60b9      	str	r1, [r7, #8]
 8014346:	603b      	str	r3, [r7, #0]
 8014348:	4613      	mov	r3, r2
 801434a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801434c:	2301      	movs	r3, #1
 801434e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	2b00      	cmp	r3, #0
 8014354:	d109      	bne.n	801436a <xTaskGenericNotify+0x2e>
 8014356:	f04f 0350 	mov.w	r3, #80	; 0x50
 801435a:	f383 8811 	msr	BASEPRI, r3
 801435e:	f3bf 8f6f 	isb	sy
 8014362:	f3bf 8f4f 	dsb	sy
 8014366:	61bb      	str	r3, [r7, #24]
 8014368:	e7fe      	b.n	8014368 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801436e:	f000 fafd 	bl	801496c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8014372:	683b      	ldr	r3, [r7, #0]
 8014374:	2b00      	cmp	r3, #0
 8014376:	d003      	beq.n	8014380 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014378:	6a3b      	ldr	r3, [r7, #32]
 801437a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801437c:	683b      	ldr	r3, [r7, #0]
 801437e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014380:	6a3b      	ldr	r3, [r7, #32]
 8014382:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014386:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014388:	6a3b      	ldr	r3, [r7, #32]
 801438a:	2202      	movs	r2, #2
 801438c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8014390:	79fb      	ldrb	r3, [r7, #7]
 8014392:	2b04      	cmp	r3, #4
 8014394:	d827      	bhi.n	80143e6 <xTaskGenericNotify+0xaa>
 8014396:	a201      	add	r2, pc, #4	; (adr r2, 801439c <xTaskGenericNotify+0x60>)
 8014398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801439c:	08014405 	.word	0x08014405
 80143a0:	080143b1 	.word	0x080143b1
 80143a4:	080143bf 	.word	0x080143bf
 80143a8:	080143cb 	.word	0x080143cb
 80143ac:	080143d3 	.word	0x080143d3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80143b0:	6a3b      	ldr	r3, [r7, #32]
 80143b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80143b4:	68bb      	ldr	r3, [r7, #8]
 80143b6:	431a      	orrs	r2, r3
 80143b8:	6a3b      	ldr	r3, [r7, #32]
 80143ba:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80143bc:	e025      	b.n	801440a <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80143be:	6a3b      	ldr	r3, [r7, #32]
 80143c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80143c2:	1c5a      	adds	r2, r3, #1
 80143c4:	6a3b      	ldr	r3, [r7, #32]
 80143c6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80143c8:	e01f      	b.n	801440a <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80143ca:	6a3b      	ldr	r3, [r7, #32]
 80143cc:	68ba      	ldr	r2, [r7, #8]
 80143ce:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80143d0:	e01b      	b.n	801440a <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80143d2:	7ffb      	ldrb	r3, [r7, #31]
 80143d4:	2b02      	cmp	r3, #2
 80143d6:	d003      	beq.n	80143e0 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80143d8:	6a3b      	ldr	r3, [r7, #32]
 80143da:	68ba      	ldr	r2, [r7, #8]
 80143dc:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80143de:	e014      	b.n	801440a <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 80143e0:	2300      	movs	r3, #0
 80143e2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80143e4:	e011      	b.n	801440a <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80143e6:	6a3b      	ldr	r3, [r7, #32]
 80143e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80143ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143ee:	d00b      	beq.n	8014408 <xTaskGenericNotify+0xcc>
 80143f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143f4:	f383 8811 	msr	BASEPRI, r3
 80143f8:	f3bf 8f6f 	isb	sy
 80143fc:	f3bf 8f4f 	dsb	sy
 8014400:	617b      	str	r3, [r7, #20]
 8014402:	e7fe      	b.n	8014402 <xTaskGenericNotify+0xc6>
					break;
 8014404:	bf00      	nop
 8014406:	e000      	b.n	801440a <xTaskGenericNotify+0xce>

					break;
 8014408:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801440a:	7ffb      	ldrb	r3, [r7, #31]
 801440c:	2b01      	cmp	r3, #1
 801440e:	d138      	bne.n	8014482 <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014410:	6a3b      	ldr	r3, [r7, #32]
 8014412:	3304      	adds	r3, #4
 8014414:	4618      	mov	r0, r3
 8014416:	f7fe fb36 	bl	8012a86 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801441a:	6a3b      	ldr	r3, [r7, #32]
 801441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801441e:	2201      	movs	r2, #1
 8014420:	409a      	lsls	r2, r3
 8014422:	4b1b      	ldr	r3, [pc, #108]	; (8014490 <xTaskGenericNotify+0x154>)
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	4313      	orrs	r3, r2
 8014428:	4a19      	ldr	r2, [pc, #100]	; (8014490 <xTaskGenericNotify+0x154>)
 801442a:	6013      	str	r3, [r2, #0]
 801442c:	6a3b      	ldr	r3, [r7, #32]
 801442e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014430:	4613      	mov	r3, r2
 8014432:	009b      	lsls	r3, r3, #2
 8014434:	4413      	add	r3, r2
 8014436:	009b      	lsls	r3, r3, #2
 8014438:	4a16      	ldr	r2, [pc, #88]	; (8014494 <xTaskGenericNotify+0x158>)
 801443a:	441a      	add	r2, r3
 801443c:	6a3b      	ldr	r3, [r7, #32]
 801443e:	3304      	adds	r3, #4
 8014440:	4619      	mov	r1, r3
 8014442:	4610      	mov	r0, r2
 8014444:	f7fe fac2 	bl	80129cc <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014448:	6a3b      	ldr	r3, [r7, #32]
 801444a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801444c:	2b00      	cmp	r3, #0
 801444e:	d009      	beq.n	8014464 <xTaskGenericNotify+0x128>
 8014450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014454:	f383 8811 	msr	BASEPRI, r3
 8014458:	f3bf 8f6f 	isb	sy
 801445c:	f3bf 8f4f 	dsb	sy
 8014460:	613b      	str	r3, [r7, #16]
 8014462:	e7fe      	b.n	8014462 <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014464:	6a3b      	ldr	r3, [r7, #32]
 8014466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014468:	4b0b      	ldr	r3, [pc, #44]	; (8014498 <xTaskGenericNotify+0x15c>)
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801446e:	429a      	cmp	r2, r3
 8014470:	d907      	bls.n	8014482 <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8014472:	4b0a      	ldr	r3, [pc, #40]	; (801449c <xTaskGenericNotify+0x160>)
 8014474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014478:	601a      	str	r2, [r3, #0]
 801447a:	f3bf 8f4f 	dsb	sy
 801447e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014482:	f000 faa1 	bl	80149c8 <vPortExitCritical>

		return xReturn;
 8014486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014488:	4618      	mov	r0, r3
 801448a:	3728      	adds	r7, #40	; 0x28
 801448c:	46bd      	mov	sp, r7
 801448e:	bd80      	pop	{r7, pc}
 8014490:	20001114 	.word	0x20001114
 8014494:	20001010 	.word	0x20001010
 8014498:	2000100c 	.word	0x2000100c
 801449c:	e000ed04 	.word	0xe000ed04

080144a0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b08e      	sub	sp, #56	; 0x38
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	60f8      	str	r0, [r7, #12]
 80144a8:	60b9      	str	r1, [r7, #8]
 80144aa:	603b      	str	r3, [r7, #0]
 80144ac:	4613      	mov	r3, r2
 80144ae:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80144b0:	2301      	movs	r3, #1
 80144b2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d109      	bne.n	80144ce <xTaskGenericNotifyFromISR+0x2e>
 80144ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144be:	f383 8811 	msr	BASEPRI, r3
 80144c2:	f3bf 8f6f 	isb	sy
 80144c6:	f3bf 8f4f 	dsb	sy
 80144ca:	627b      	str	r3, [r7, #36]	; 0x24
 80144cc:	e7fe      	b.n	80144cc <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80144ce:	f000 fb29 	bl	8014b24 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80144d6:	f3ef 8211 	mrs	r2, BASEPRI
 80144da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144de:	f383 8811 	msr	BASEPRI, r3
 80144e2:	f3bf 8f6f 	isb	sy
 80144e6:	f3bf 8f4f 	dsb	sy
 80144ea:	623a      	str	r2, [r7, #32]
 80144ec:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80144ee:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80144f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80144f2:	683b      	ldr	r3, [r7, #0]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d003      	beq.n	8014500 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80144f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80144fc:	683b      	ldr	r3, [r7, #0]
 80144fe:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014502:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801450a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801450c:	2202      	movs	r2, #2
 801450e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8014512:	79fb      	ldrb	r3, [r7, #7]
 8014514:	2b04      	cmp	r3, #4
 8014516:	d829      	bhi.n	801456c <xTaskGenericNotifyFromISR+0xcc>
 8014518:	a201      	add	r2, pc, #4	; (adr r2, 8014520 <xTaskGenericNotifyFromISR+0x80>)
 801451a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801451e:	bf00      	nop
 8014520:	0801458b 	.word	0x0801458b
 8014524:	08014535 	.word	0x08014535
 8014528:	08014543 	.word	0x08014543
 801452c:	0801454f 	.word	0x0801454f
 8014530:	08014557 	.word	0x08014557
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014536:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014538:	68bb      	ldr	r3, [r7, #8]
 801453a:	431a      	orrs	r2, r3
 801453c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801453e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014540:	e026      	b.n	8014590 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014546:	1c5a      	adds	r2, r3, #1
 8014548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801454a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801454c:	e020      	b.n	8014590 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801454e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014550:	68ba      	ldr	r2, [r7, #8]
 8014552:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014554:	e01c      	b.n	8014590 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014556:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801455a:	2b02      	cmp	r3, #2
 801455c:	d003      	beq.n	8014566 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014560:	68ba      	ldr	r2, [r7, #8]
 8014562:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014564:	e014      	b.n	8014590 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8014566:	2300      	movs	r3, #0
 8014568:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801456a:	e011      	b.n	8014590 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801456c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801456e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014574:	d00b      	beq.n	801458e <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8014576:	f04f 0350 	mov.w	r3, #80	; 0x50
 801457a:	f383 8811 	msr	BASEPRI, r3
 801457e:	f3bf 8f6f 	isb	sy
 8014582:	f3bf 8f4f 	dsb	sy
 8014586:	61bb      	str	r3, [r7, #24]
 8014588:	e7fe      	b.n	8014588 <xTaskGenericNotifyFromISR+0xe8>
					break;
 801458a:	bf00      	nop
 801458c:	e000      	b.n	8014590 <xTaskGenericNotifyFromISR+0xf0>
					break;
 801458e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014590:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014594:	2b01      	cmp	r3, #1
 8014596:	d144      	bne.n	8014622 <xTaskGenericNotifyFromISR+0x182>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801459a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801459c:	2b00      	cmp	r3, #0
 801459e:	d009      	beq.n	80145b4 <xTaskGenericNotifyFromISR+0x114>
 80145a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145a4:	f383 8811 	msr	BASEPRI, r3
 80145a8:	f3bf 8f6f 	isb	sy
 80145ac:	f3bf 8f4f 	dsb	sy
 80145b0:	617b      	str	r3, [r7, #20]
 80145b2:	e7fe      	b.n	80145b2 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80145b4:	4b20      	ldr	r3, [pc, #128]	; (8014638 <xTaskGenericNotifyFromISR+0x198>)
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d11c      	bne.n	80145f6 <xTaskGenericNotifyFromISR+0x156>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80145bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145be:	3304      	adds	r3, #4
 80145c0:	4618      	mov	r0, r3
 80145c2:	f7fe fa60 	bl	8012a86 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80145c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145ca:	2201      	movs	r2, #1
 80145cc:	409a      	lsls	r2, r3
 80145ce:	4b1b      	ldr	r3, [pc, #108]	; (801463c <xTaskGenericNotifyFromISR+0x19c>)
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	4313      	orrs	r3, r2
 80145d4:	4a19      	ldr	r2, [pc, #100]	; (801463c <xTaskGenericNotifyFromISR+0x19c>)
 80145d6:	6013      	str	r3, [r2, #0]
 80145d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145dc:	4613      	mov	r3, r2
 80145de:	009b      	lsls	r3, r3, #2
 80145e0:	4413      	add	r3, r2
 80145e2:	009b      	lsls	r3, r3, #2
 80145e4:	4a16      	ldr	r2, [pc, #88]	; (8014640 <xTaskGenericNotifyFromISR+0x1a0>)
 80145e6:	441a      	add	r2, r3
 80145e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145ea:	3304      	adds	r3, #4
 80145ec:	4619      	mov	r1, r3
 80145ee:	4610      	mov	r0, r2
 80145f0:	f7fe f9ec 	bl	80129cc <vListInsertEnd>
 80145f4:	e005      	b.n	8014602 <xTaskGenericNotifyFromISR+0x162>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80145f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145f8:	3318      	adds	r3, #24
 80145fa:	4619      	mov	r1, r3
 80145fc:	4811      	ldr	r0, [pc, #68]	; (8014644 <xTaskGenericNotifyFromISR+0x1a4>)
 80145fe:	f7fe f9e5 	bl	80129cc <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014606:	4b10      	ldr	r3, [pc, #64]	; (8014648 <xTaskGenericNotifyFromISR+0x1a8>)
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801460c:	429a      	cmp	r2, r3
 801460e:	d908      	bls.n	8014622 <xTaskGenericNotifyFromISR+0x182>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8014610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014612:	2b00      	cmp	r3, #0
 8014614:	d002      	beq.n	801461c <xTaskGenericNotifyFromISR+0x17c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8014616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014618:	2201      	movs	r2, #1
 801461a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801461c:	4b0b      	ldr	r3, [pc, #44]	; (801464c <xTaskGenericNotifyFromISR+0x1ac>)
 801461e:	2201      	movs	r2, #1
 8014620:	601a      	str	r2, [r3, #0]
 8014622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014624:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014626:	693b      	ldr	r3, [r7, #16]
 8014628:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801462c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 801462e:	4618      	mov	r0, r3
 8014630:	3738      	adds	r7, #56	; 0x38
 8014632:	46bd      	mov	sp, r7
 8014634:	bd80      	pop	{r7, pc}
 8014636:	bf00      	nop
 8014638:	20001134 	.word	0x20001134
 801463c:	20001114 	.word	0x20001114
 8014640:	20001010 	.word	0x20001010
 8014644:	200010cc 	.word	0x200010cc
 8014648:	2000100c 	.word	0x2000100c
 801464c:	20001120 	.word	0x20001120

08014650 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014650:	b580      	push	{r7, lr}
 8014652:	b084      	sub	sp, #16
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
 8014658:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801465a:	4b29      	ldr	r3, [pc, #164]	; (8014700 <prvAddCurrentTaskToDelayedList+0xb0>)
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014660:	4b28      	ldr	r3, [pc, #160]	; (8014704 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	3304      	adds	r3, #4
 8014666:	4618      	mov	r0, r3
 8014668:	f7fe fa0d 	bl	8012a86 <uxListRemove>
 801466c:	4603      	mov	r3, r0
 801466e:	2b00      	cmp	r3, #0
 8014670:	d10b      	bne.n	801468a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014672:	4b24      	ldr	r3, [pc, #144]	; (8014704 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014678:	2201      	movs	r2, #1
 801467a:	fa02 f303 	lsl.w	r3, r2, r3
 801467e:	43da      	mvns	r2, r3
 8014680:	4b21      	ldr	r3, [pc, #132]	; (8014708 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	4013      	ands	r3, r2
 8014686:	4a20      	ldr	r2, [pc, #128]	; (8014708 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014688:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014690:	d10a      	bne.n	80146a8 <prvAddCurrentTaskToDelayedList+0x58>
 8014692:	683b      	ldr	r3, [r7, #0]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d007      	beq.n	80146a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014698:	4b1a      	ldr	r3, [pc, #104]	; (8014704 <prvAddCurrentTaskToDelayedList+0xb4>)
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	3304      	adds	r3, #4
 801469e:	4619      	mov	r1, r3
 80146a0:	481a      	ldr	r0, [pc, #104]	; (801470c <prvAddCurrentTaskToDelayedList+0xbc>)
 80146a2:	f7fe f993 	bl	80129cc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80146a6:	e026      	b.n	80146f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80146a8:	68fa      	ldr	r2, [r7, #12]
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	4413      	add	r3, r2
 80146ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80146b0:	4b14      	ldr	r3, [pc, #80]	; (8014704 <prvAddCurrentTaskToDelayedList+0xb4>)
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	68ba      	ldr	r2, [r7, #8]
 80146b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80146b8:	68ba      	ldr	r2, [r7, #8]
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	429a      	cmp	r2, r3
 80146be:	d209      	bcs.n	80146d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80146c0:	4b13      	ldr	r3, [pc, #76]	; (8014710 <prvAddCurrentTaskToDelayedList+0xc0>)
 80146c2:	681a      	ldr	r2, [r3, #0]
 80146c4:	4b0f      	ldr	r3, [pc, #60]	; (8014704 <prvAddCurrentTaskToDelayedList+0xb4>)
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	3304      	adds	r3, #4
 80146ca:	4619      	mov	r1, r3
 80146cc:	4610      	mov	r0, r2
 80146ce:	f7fe f9a1 	bl	8012a14 <vListInsert>
}
 80146d2:	e010      	b.n	80146f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80146d4:	4b0f      	ldr	r3, [pc, #60]	; (8014714 <prvAddCurrentTaskToDelayedList+0xc4>)
 80146d6:	681a      	ldr	r2, [r3, #0]
 80146d8:	4b0a      	ldr	r3, [pc, #40]	; (8014704 <prvAddCurrentTaskToDelayedList+0xb4>)
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	3304      	adds	r3, #4
 80146de:	4619      	mov	r1, r3
 80146e0:	4610      	mov	r0, r2
 80146e2:	f7fe f997 	bl	8012a14 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80146e6:	4b0c      	ldr	r3, [pc, #48]	; (8014718 <prvAddCurrentTaskToDelayedList+0xc8>)
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	68ba      	ldr	r2, [r7, #8]
 80146ec:	429a      	cmp	r2, r3
 80146ee:	d202      	bcs.n	80146f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80146f0:	4a09      	ldr	r2, [pc, #36]	; (8014718 <prvAddCurrentTaskToDelayedList+0xc8>)
 80146f2:	68bb      	ldr	r3, [r7, #8]
 80146f4:	6013      	str	r3, [r2, #0]
}
 80146f6:	bf00      	nop
 80146f8:	3710      	adds	r7, #16
 80146fa:	46bd      	mov	sp, r7
 80146fc:	bd80      	pop	{r7, pc}
 80146fe:	bf00      	nop
 8014700:	20001110 	.word	0x20001110
 8014704:	2000100c 	.word	0x2000100c
 8014708:	20001114 	.word	0x20001114
 801470c:	200010f8 	.word	0x200010f8
 8014710:	200010c8 	.word	0x200010c8
 8014714:	200010c4 	.word	0x200010c4
 8014718:	2000112c 	.word	0x2000112c

0801471c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801471c:	b480      	push	{r7}
 801471e:	b085      	sub	sp, #20
 8014720:	af00      	add	r7, sp, #0
 8014722:	60f8      	str	r0, [r7, #12]
 8014724:	60b9      	str	r1, [r7, #8]
 8014726:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	3b04      	subs	r3, #4
 801472c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014734:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	3b04      	subs	r3, #4
 801473a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801473c:	68bb      	ldr	r3, [r7, #8]
 801473e:	f023 0201 	bic.w	r2, r3, #1
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	3b04      	subs	r3, #4
 801474a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801474c:	4a0c      	ldr	r2, [pc, #48]	; (8014780 <pxPortInitialiseStack+0x64>)
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	3b14      	subs	r3, #20
 8014756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014758:	687a      	ldr	r2, [r7, #4]
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	3b04      	subs	r3, #4
 8014762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	f06f 0202 	mvn.w	r2, #2
 801476a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	3b20      	subs	r3, #32
 8014770:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014772:	68fb      	ldr	r3, [r7, #12]
}
 8014774:	4618      	mov	r0, r3
 8014776:	3714      	adds	r7, #20
 8014778:	46bd      	mov	sp, r7
 801477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477e:	4770      	bx	lr
 8014780:	08014785 	.word	0x08014785

08014784 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014784:	b480      	push	{r7}
 8014786:	b085      	sub	sp, #20
 8014788:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801478a:	2300      	movs	r3, #0
 801478c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801478e:	4b11      	ldr	r3, [pc, #68]	; (80147d4 <prvTaskExitError+0x50>)
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014796:	d009      	beq.n	80147ac <prvTaskExitError+0x28>
	__asm volatile
 8014798:	f04f 0350 	mov.w	r3, #80	; 0x50
 801479c:	f383 8811 	msr	BASEPRI, r3
 80147a0:	f3bf 8f6f 	isb	sy
 80147a4:	f3bf 8f4f 	dsb	sy
 80147a8:	60fb      	str	r3, [r7, #12]
 80147aa:	e7fe      	b.n	80147aa <prvTaskExitError+0x26>
 80147ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147b0:	f383 8811 	msr	BASEPRI, r3
 80147b4:	f3bf 8f6f 	isb	sy
 80147b8:	f3bf 8f4f 	dsb	sy
 80147bc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80147be:	bf00      	nop
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d0fc      	beq.n	80147c0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80147c6:	bf00      	nop
 80147c8:	3714      	adds	r7, #20
 80147ca:	46bd      	mov	sp, r7
 80147cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d0:	4770      	bx	lr
 80147d2:	bf00      	nop
 80147d4:	20000944 	.word	0x20000944
	...

080147e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80147e0:	4b07      	ldr	r3, [pc, #28]	; (8014800 <pxCurrentTCBConst2>)
 80147e2:	6819      	ldr	r1, [r3, #0]
 80147e4:	6808      	ldr	r0, [r1, #0]
 80147e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147ea:	f380 8809 	msr	PSP, r0
 80147ee:	f3bf 8f6f 	isb	sy
 80147f2:	f04f 0000 	mov.w	r0, #0
 80147f6:	f380 8811 	msr	BASEPRI, r0
 80147fa:	4770      	bx	lr
 80147fc:	f3af 8000 	nop.w

08014800 <pxCurrentTCBConst2>:
 8014800:	2000100c 	.word	0x2000100c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014804:	bf00      	nop
 8014806:	bf00      	nop

08014808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014808:	4808      	ldr	r0, [pc, #32]	; (801482c <prvPortStartFirstTask+0x24>)
 801480a:	6800      	ldr	r0, [r0, #0]
 801480c:	6800      	ldr	r0, [r0, #0]
 801480e:	f380 8808 	msr	MSP, r0
 8014812:	f04f 0000 	mov.w	r0, #0
 8014816:	f380 8814 	msr	CONTROL, r0
 801481a:	b662      	cpsie	i
 801481c:	b661      	cpsie	f
 801481e:	f3bf 8f4f 	dsb	sy
 8014822:	f3bf 8f6f 	isb	sy
 8014826:	df00      	svc	0
 8014828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801482a:	bf00      	nop
 801482c:	e000ed08 	.word	0xe000ed08

08014830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014830:	b580      	push	{r7, lr}
 8014832:	b086      	sub	sp, #24
 8014834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014836:	4b44      	ldr	r3, [pc, #272]	; (8014948 <xPortStartScheduler+0x118>)
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	4a44      	ldr	r2, [pc, #272]	; (801494c <xPortStartScheduler+0x11c>)
 801483c:	4293      	cmp	r3, r2
 801483e:	d109      	bne.n	8014854 <xPortStartScheduler+0x24>
 8014840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014844:	f383 8811 	msr	BASEPRI, r3
 8014848:	f3bf 8f6f 	isb	sy
 801484c:	f3bf 8f4f 	dsb	sy
 8014850:	613b      	str	r3, [r7, #16]
 8014852:	e7fe      	b.n	8014852 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014854:	4b3c      	ldr	r3, [pc, #240]	; (8014948 <xPortStartScheduler+0x118>)
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	4a3d      	ldr	r2, [pc, #244]	; (8014950 <xPortStartScheduler+0x120>)
 801485a:	4293      	cmp	r3, r2
 801485c:	d109      	bne.n	8014872 <xPortStartScheduler+0x42>
 801485e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014862:	f383 8811 	msr	BASEPRI, r3
 8014866:	f3bf 8f6f 	isb	sy
 801486a:	f3bf 8f4f 	dsb	sy
 801486e:	60fb      	str	r3, [r7, #12]
 8014870:	e7fe      	b.n	8014870 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014872:	4b38      	ldr	r3, [pc, #224]	; (8014954 <xPortStartScheduler+0x124>)
 8014874:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014876:	697b      	ldr	r3, [r7, #20]
 8014878:	781b      	ldrb	r3, [r3, #0]
 801487a:	b2db      	uxtb	r3, r3
 801487c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801487e:	697b      	ldr	r3, [r7, #20]
 8014880:	22ff      	movs	r2, #255	; 0xff
 8014882:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014884:	697b      	ldr	r3, [r7, #20]
 8014886:	781b      	ldrb	r3, [r3, #0]
 8014888:	b2db      	uxtb	r3, r3
 801488a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801488c:	78fb      	ldrb	r3, [r7, #3]
 801488e:	b2db      	uxtb	r3, r3
 8014890:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014894:	b2da      	uxtb	r2, r3
 8014896:	4b30      	ldr	r3, [pc, #192]	; (8014958 <xPortStartScheduler+0x128>)
 8014898:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801489a:	4b30      	ldr	r3, [pc, #192]	; (801495c <xPortStartScheduler+0x12c>)
 801489c:	2207      	movs	r2, #7
 801489e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80148a0:	e009      	b.n	80148b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80148a2:	4b2e      	ldr	r3, [pc, #184]	; (801495c <xPortStartScheduler+0x12c>)
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	3b01      	subs	r3, #1
 80148a8:	4a2c      	ldr	r2, [pc, #176]	; (801495c <xPortStartScheduler+0x12c>)
 80148aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80148ac:	78fb      	ldrb	r3, [r7, #3]
 80148ae:	b2db      	uxtb	r3, r3
 80148b0:	005b      	lsls	r3, r3, #1
 80148b2:	b2db      	uxtb	r3, r3
 80148b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80148b6:	78fb      	ldrb	r3, [r7, #3]
 80148b8:	b2db      	uxtb	r3, r3
 80148ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80148be:	2b80      	cmp	r3, #128	; 0x80
 80148c0:	d0ef      	beq.n	80148a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80148c2:	4b26      	ldr	r3, [pc, #152]	; (801495c <xPortStartScheduler+0x12c>)
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	f1c3 0307 	rsb	r3, r3, #7
 80148ca:	2b04      	cmp	r3, #4
 80148cc:	d009      	beq.n	80148e2 <xPortStartScheduler+0xb2>
 80148ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148d2:	f383 8811 	msr	BASEPRI, r3
 80148d6:	f3bf 8f6f 	isb	sy
 80148da:	f3bf 8f4f 	dsb	sy
 80148de:	60bb      	str	r3, [r7, #8]
 80148e0:	e7fe      	b.n	80148e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80148e2:	4b1e      	ldr	r3, [pc, #120]	; (801495c <xPortStartScheduler+0x12c>)
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	021b      	lsls	r3, r3, #8
 80148e8:	4a1c      	ldr	r2, [pc, #112]	; (801495c <xPortStartScheduler+0x12c>)
 80148ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80148ec:	4b1b      	ldr	r3, [pc, #108]	; (801495c <xPortStartScheduler+0x12c>)
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80148f4:	4a19      	ldr	r2, [pc, #100]	; (801495c <xPortStartScheduler+0x12c>)
 80148f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	b2da      	uxtb	r2, r3
 80148fc:	697b      	ldr	r3, [r7, #20]
 80148fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014900:	4b17      	ldr	r3, [pc, #92]	; (8014960 <xPortStartScheduler+0x130>)
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	4a16      	ldr	r2, [pc, #88]	; (8014960 <xPortStartScheduler+0x130>)
 8014906:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801490a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801490c:	4b14      	ldr	r3, [pc, #80]	; (8014960 <xPortStartScheduler+0x130>)
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	4a13      	ldr	r2, [pc, #76]	; (8014960 <xPortStartScheduler+0x130>)
 8014912:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014916:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014918:	f000 f8d6 	bl	8014ac8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801491c:	4b11      	ldr	r3, [pc, #68]	; (8014964 <xPortStartScheduler+0x134>)
 801491e:	2200      	movs	r2, #0
 8014920:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014922:	f000 f8f5 	bl	8014b10 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014926:	4b10      	ldr	r3, [pc, #64]	; (8014968 <xPortStartScheduler+0x138>)
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	4a0f      	ldr	r2, [pc, #60]	; (8014968 <xPortStartScheduler+0x138>)
 801492c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014930:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014932:	f7ff ff69 	bl	8014808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014936:	f7ff f9d1 	bl	8013cdc <vTaskSwitchContext>
	prvTaskExitError();
 801493a:	f7ff ff23 	bl	8014784 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801493e:	2300      	movs	r3, #0
}
 8014940:	4618      	mov	r0, r3
 8014942:	3718      	adds	r7, #24
 8014944:	46bd      	mov	sp, r7
 8014946:	bd80      	pop	{r7, pc}
 8014948:	e000ed00 	.word	0xe000ed00
 801494c:	410fc271 	.word	0x410fc271
 8014950:	410fc270 	.word	0x410fc270
 8014954:	e000e400 	.word	0xe000e400
 8014958:	20001138 	.word	0x20001138
 801495c:	2000113c 	.word	0x2000113c
 8014960:	e000ed20 	.word	0xe000ed20
 8014964:	20000944 	.word	0x20000944
 8014968:	e000ef34 	.word	0xe000ef34

0801496c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801496c:	b480      	push	{r7}
 801496e:	b083      	sub	sp, #12
 8014970:	af00      	add	r7, sp, #0
 8014972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014976:	f383 8811 	msr	BASEPRI, r3
 801497a:	f3bf 8f6f 	isb	sy
 801497e:	f3bf 8f4f 	dsb	sy
 8014982:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014984:	4b0e      	ldr	r3, [pc, #56]	; (80149c0 <vPortEnterCritical+0x54>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	3301      	adds	r3, #1
 801498a:	4a0d      	ldr	r2, [pc, #52]	; (80149c0 <vPortEnterCritical+0x54>)
 801498c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801498e:	4b0c      	ldr	r3, [pc, #48]	; (80149c0 <vPortEnterCritical+0x54>)
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	2b01      	cmp	r3, #1
 8014994:	d10e      	bne.n	80149b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014996:	4b0b      	ldr	r3, [pc, #44]	; (80149c4 <vPortEnterCritical+0x58>)
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	b2db      	uxtb	r3, r3
 801499c:	2b00      	cmp	r3, #0
 801499e:	d009      	beq.n	80149b4 <vPortEnterCritical+0x48>
 80149a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149a4:	f383 8811 	msr	BASEPRI, r3
 80149a8:	f3bf 8f6f 	isb	sy
 80149ac:	f3bf 8f4f 	dsb	sy
 80149b0:	603b      	str	r3, [r7, #0]
 80149b2:	e7fe      	b.n	80149b2 <vPortEnterCritical+0x46>
	}
}
 80149b4:	bf00      	nop
 80149b6:	370c      	adds	r7, #12
 80149b8:	46bd      	mov	sp, r7
 80149ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149be:	4770      	bx	lr
 80149c0:	20000944 	.word	0x20000944
 80149c4:	e000ed04 	.word	0xe000ed04

080149c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80149c8:	b480      	push	{r7}
 80149ca:	b083      	sub	sp, #12
 80149cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80149ce:	4b11      	ldr	r3, [pc, #68]	; (8014a14 <vPortExitCritical+0x4c>)
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d109      	bne.n	80149ea <vPortExitCritical+0x22>
 80149d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149da:	f383 8811 	msr	BASEPRI, r3
 80149de:	f3bf 8f6f 	isb	sy
 80149e2:	f3bf 8f4f 	dsb	sy
 80149e6:	607b      	str	r3, [r7, #4]
 80149e8:	e7fe      	b.n	80149e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80149ea:	4b0a      	ldr	r3, [pc, #40]	; (8014a14 <vPortExitCritical+0x4c>)
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	3b01      	subs	r3, #1
 80149f0:	4a08      	ldr	r2, [pc, #32]	; (8014a14 <vPortExitCritical+0x4c>)
 80149f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80149f4:	4b07      	ldr	r3, [pc, #28]	; (8014a14 <vPortExitCritical+0x4c>)
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d104      	bne.n	8014a06 <vPortExitCritical+0x3e>
 80149fc:	2300      	movs	r3, #0
 80149fe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014a00:	683b      	ldr	r3, [r7, #0]
 8014a02:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8014a06:	bf00      	nop
 8014a08:	370c      	adds	r7, #12
 8014a0a:	46bd      	mov	sp, r7
 8014a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a10:	4770      	bx	lr
 8014a12:	bf00      	nop
 8014a14:	20000944 	.word	0x20000944
	...

08014a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014a20:	f3ef 8009 	mrs	r0, PSP
 8014a24:	f3bf 8f6f 	isb	sy
 8014a28:	4b15      	ldr	r3, [pc, #84]	; (8014a80 <pxCurrentTCBConst>)
 8014a2a:	681a      	ldr	r2, [r3, #0]
 8014a2c:	f01e 0f10 	tst.w	lr, #16
 8014a30:	bf08      	it	eq
 8014a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a3a:	6010      	str	r0, [r2, #0]
 8014a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014a40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014a44:	f380 8811 	msr	BASEPRI, r0
 8014a48:	f3bf 8f4f 	dsb	sy
 8014a4c:	f3bf 8f6f 	isb	sy
 8014a50:	f7ff f944 	bl	8013cdc <vTaskSwitchContext>
 8014a54:	f04f 0000 	mov.w	r0, #0
 8014a58:	f380 8811 	msr	BASEPRI, r0
 8014a5c:	bc09      	pop	{r0, r3}
 8014a5e:	6819      	ldr	r1, [r3, #0]
 8014a60:	6808      	ldr	r0, [r1, #0]
 8014a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a66:	f01e 0f10 	tst.w	lr, #16
 8014a6a:	bf08      	it	eq
 8014a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014a70:	f380 8809 	msr	PSP, r0
 8014a74:	f3bf 8f6f 	isb	sy
 8014a78:	4770      	bx	lr
 8014a7a:	bf00      	nop
 8014a7c:	f3af 8000 	nop.w

08014a80 <pxCurrentTCBConst>:
 8014a80:	2000100c 	.word	0x2000100c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014a84:	bf00      	nop
 8014a86:	bf00      	nop

08014a88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b082      	sub	sp, #8
 8014a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8014a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a92:	f383 8811 	msr	BASEPRI, r3
 8014a96:	f3bf 8f6f 	isb	sy
 8014a9a:	f3bf 8f4f 	dsb	sy
 8014a9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014aa0:	f7ff f864 	bl	8013b6c <xTaskIncrementTick>
 8014aa4:	4603      	mov	r3, r0
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d003      	beq.n	8014ab2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014aaa:	4b06      	ldr	r3, [pc, #24]	; (8014ac4 <SysTick_Handler+0x3c>)
 8014aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ab0:	601a      	str	r2, [r3, #0]
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014ab6:	683b      	ldr	r3, [r7, #0]
 8014ab8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8014abc:	bf00      	nop
 8014abe:	3708      	adds	r7, #8
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	bd80      	pop	{r7, pc}
 8014ac4:	e000ed04 	.word	0xe000ed04

08014ac8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014ac8:	b480      	push	{r7}
 8014aca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014acc:	4b0b      	ldr	r3, [pc, #44]	; (8014afc <vPortSetupTimerInterrupt+0x34>)
 8014ace:	2200      	movs	r2, #0
 8014ad0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014ad2:	4b0b      	ldr	r3, [pc, #44]	; (8014b00 <vPortSetupTimerInterrupt+0x38>)
 8014ad4:	2200      	movs	r2, #0
 8014ad6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014ad8:	4b0a      	ldr	r3, [pc, #40]	; (8014b04 <vPortSetupTimerInterrupt+0x3c>)
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	4a0a      	ldr	r2, [pc, #40]	; (8014b08 <vPortSetupTimerInterrupt+0x40>)
 8014ade:	fba2 2303 	umull	r2, r3, r2, r3
 8014ae2:	099b      	lsrs	r3, r3, #6
 8014ae4:	4a09      	ldr	r2, [pc, #36]	; (8014b0c <vPortSetupTimerInterrupt+0x44>)
 8014ae6:	3b01      	subs	r3, #1
 8014ae8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014aea:	4b04      	ldr	r3, [pc, #16]	; (8014afc <vPortSetupTimerInterrupt+0x34>)
 8014aec:	2207      	movs	r2, #7
 8014aee:	601a      	str	r2, [r3, #0]
}
 8014af0:	bf00      	nop
 8014af2:	46bd      	mov	sp, r7
 8014af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af8:	4770      	bx	lr
 8014afa:	bf00      	nop
 8014afc:	e000e010 	.word	0xe000e010
 8014b00:	e000e018 	.word	0xe000e018
 8014b04:	20000828 	.word	0x20000828
 8014b08:	10624dd3 	.word	0x10624dd3
 8014b0c:	e000e014 	.word	0xe000e014

08014b10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014b10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014b20 <vPortEnableVFP+0x10>
 8014b14:	6801      	ldr	r1, [r0, #0]
 8014b16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014b1a:	6001      	str	r1, [r0, #0]
 8014b1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014b1e:	bf00      	nop
 8014b20:	e000ed88 	.word	0xe000ed88

08014b24 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014b24:	b480      	push	{r7}
 8014b26:	b085      	sub	sp, #20
 8014b28:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014b2a:	f3ef 8305 	mrs	r3, IPSR
 8014b2e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	2b0f      	cmp	r3, #15
 8014b34:	d913      	bls.n	8014b5e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014b36:	4a16      	ldr	r2, [pc, #88]	; (8014b90 <vPortValidateInterruptPriority+0x6c>)
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	4413      	add	r3, r2
 8014b3c:	781b      	ldrb	r3, [r3, #0]
 8014b3e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014b40:	4b14      	ldr	r3, [pc, #80]	; (8014b94 <vPortValidateInterruptPriority+0x70>)
 8014b42:	781b      	ldrb	r3, [r3, #0]
 8014b44:	7afa      	ldrb	r2, [r7, #11]
 8014b46:	429a      	cmp	r2, r3
 8014b48:	d209      	bcs.n	8014b5e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8014b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b4e:	f383 8811 	msr	BASEPRI, r3
 8014b52:	f3bf 8f6f 	isb	sy
 8014b56:	f3bf 8f4f 	dsb	sy
 8014b5a:	607b      	str	r3, [r7, #4]
 8014b5c:	e7fe      	b.n	8014b5c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014b5e:	4b0e      	ldr	r3, [pc, #56]	; (8014b98 <vPortValidateInterruptPriority+0x74>)
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014b66:	4b0d      	ldr	r3, [pc, #52]	; (8014b9c <vPortValidateInterruptPriority+0x78>)
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	429a      	cmp	r2, r3
 8014b6c:	d909      	bls.n	8014b82 <vPortValidateInterruptPriority+0x5e>
 8014b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b72:	f383 8811 	msr	BASEPRI, r3
 8014b76:	f3bf 8f6f 	isb	sy
 8014b7a:	f3bf 8f4f 	dsb	sy
 8014b7e:	603b      	str	r3, [r7, #0]
 8014b80:	e7fe      	b.n	8014b80 <vPortValidateInterruptPriority+0x5c>
	}
 8014b82:	bf00      	nop
 8014b84:	3714      	adds	r7, #20
 8014b86:	46bd      	mov	sp, r7
 8014b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b8c:	4770      	bx	lr
 8014b8e:	bf00      	nop
 8014b90:	e000e3f0 	.word	0xe000e3f0
 8014b94:	20001138 	.word	0x20001138
 8014b98:	e000ed0c 	.word	0xe000ed0c
 8014b9c:	2000113c 	.word	0x2000113c

08014ba0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b08a      	sub	sp, #40	; 0x28
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014ba8:	2300      	movs	r3, #0
 8014baa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014bac:	f7fe ff34 	bl	8013a18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014bb0:	4b57      	ldr	r3, [pc, #348]	; (8014d10 <pvPortMalloc+0x170>)
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d101      	bne.n	8014bbc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014bb8:	f000 f90c 	bl	8014dd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014bbc:	4b55      	ldr	r3, [pc, #340]	; (8014d14 <pvPortMalloc+0x174>)
 8014bbe:	681a      	ldr	r2, [r3, #0]
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	4013      	ands	r3, r2
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	f040 808c 	bne.w	8014ce2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d01c      	beq.n	8014c0a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8014bd0:	2208      	movs	r2, #8
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	4413      	add	r3, r2
 8014bd6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	f003 0307 	and.w	r3, r3, #7
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d013      	beq.n	8014c0a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	f023 0307 	bic.w	r3, r3, #7
 8014be8:	3308      	adds	r3, #8
 8014bea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	f003 0307 	and.w	r3, r3, #7
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d009      	beq.n	8014c0a <pvPortMalloc+0x6a>
 8014bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bfa:	f383 8811 	msr	BASEPRI, r3
 8014bfe:	f3bf 8f6f 	isb	sy
 8014c02:	f3bf 8f4f 	dsb	sy
 8014c06:	617b      	str	r3, [r7, #20]
 8014c08:	e7fe      	b.n	8014c08 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d068      	beq.n	8014ce2 <pvPortMalloc+0x142>
 8014c10:	4b41      	ldr	r3, [pc, #260]	; (8014d18 <pvPortMalloc+0x178>)
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	687a      	ldr	r2, [r7, #4]
 8014c16:	429a      	cmp	r2, r3
 8014c18:	d863      	bhi.n	8014ce2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014c1a:	4b40      	ldr	r3, [pc, #256]	; (8014d1c <pvPortMalloc+0x17c>)
 8014c1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014c1e:	4b3f      	ldr	r3, [pc, #252]	; (8014d1c <pvPortMalloc+0x17c>)
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014c24:	e004      	b.n	8014c30 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8014c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c32:	685b      	ldr	r3, [r3, #4]
 8014c34:	687a      	ldr	r2, [r7, #4]
 8014c36:	429a      	cmp	r2, r3
 8014c38:	d903      	bls.n	8014c42 <pvPortMalloc+0xa2>
 8014c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d1f1      	bne.n	8014c26 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014c42:	4b33      	ldr	r3, [pc, #204]	; (8014d10 <pvPortMalloc+0x170>)
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c48:	429a      	cmp	r2, r3
 8014c4a:	d04a      	beq.n	8014ce2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014c4c:	6a3b      	ldr	r3, [r7, #32]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	2208      	movs	r2, #8
 8014c52:	4413      	add	r3, r2
 8014c54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c58:	681a      	ldr	r2, [r3, #0]
 8014c5a:	6a3b      	ldr	r3, [r7, #32]
 8014c5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c60:	685a      	ldr	r2, [r3, #4]
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	1ad2      	subs	r2, r2, r3
 8014c66:	2308      	movs	r3, #8
 8014c68:	005b      	lsls	r3, r3, #1
 8014c6a:	429a      	cmp	r2, r3
 8014c6c:	d91e      	bls.n	8014cac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	4413      	add	r3, r2
 8014c74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014c76:	69bb      	ldr	r3, [r7, #24]
 8014c78:	f003 0307 	and.w	r3, r3, #7
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d009      	beq.n	8014c94 <pvPortMalloc+0xf4>
 8014c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c84:	f383 8811 	msr	BASEPRI, r3
 8014c88:	f3bf 8f6f 	isb	sy
 8014c8c:	f3bf 8f4f 	dsb	sy
 8014c90:	613b      	str	r3, [r7, #16]
 8014c92:	e7fe      	b.n	8014c92 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c96:	685a      	ldr	r2, [r3, #4]
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	1ad2      	subs	r2, r2, r3
 8014c9c:	69bb      	ldr	r3, [r7, #24]
 8014c9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ca2:	687a      	ldr	r2, [r7, #4]
 8014ca4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014ca6:	69b8      	ldr	r0, [r7, #24]
 8014ca8:	f000 f8f6 	bl	8014e98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014cac:	4b1a      	ldr	r3, [pc, #104]	; (8014d18 <pvPortMalloc+0x178>)
 8014cae:	681a      	ldr	r2, [r3, #0]
 8014cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cb2:	685b      	ldr	r3, [r3, #4]
 8014cb4:	1ad3      	subs	r3, r2, r3
 8014cb6:	4a18      	ldr	r2, [pc, #96]	; (8014d18 <pvPortMalloc+0x178>)
 8014cb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014cba:	4b17      	ldr	r3, [pc, #92]	; (8014d18 <pvPortMalloc+0x178>)
 8014cbc:	681a      	ldr	r2, [r3, #0]
 8014cbe:	4b18      	ldr	r3, [pc, #96]	; (8014d20 <pvPortMalloc+0x180>)
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	429a      	cmp	r2, r3
 8014cc4:	d203      	bcs.n	8014cce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014cc6:	4b14      	ldr	r3, [pc, #80]	; (8014d18 <pvPortMalloc+0x178>)
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	4a15      	ldr	r2, [pc, #84]	; (8014d20 <pvPortMalloc+0x180>)
 8014ccc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cd0:	685a      	ldr	r2, [r3, #4]
 8014cd2:	4b10      	ldr	r3, [pc, #64]	; (8014d14 <pvPortMalloc+0x174>)
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	431a      	orrs	r2, r3
 8014cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cde:	2200      	movs	r2, #0
 8014ce0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014ce2:	f7fe fea7 	bl	8013a34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014ce6:	69fb      	ldr	r3, [r7, #28]
 8014ce8:	f003 0307 	and.w	r3, r3, #7
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d009      	beq.n	8014d04 <pvPortMalloc+0x164>
 8014cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cf4:	f383 8811 	msr	BASEPRI, r3
 8014cf8:	f3bf 8f6f 	isb	sy
 8014cfc:	f3bf 8f4f 	dsb	sy
 8014d00:	60fb      	str	r3, [r7, #12]
 8014d02:	e7fe      	b.n	8014d02 <pvPortMalloc+0x162>
	return pvReturn;
 8014d04:	69fb      	ldr	r3, [r7, #28]
}
 8014d06:	4618      	mov	r0, r3
 8014d08:	3728      	adds	r7, #40	; 0x28
 8014d0a:	46bd      	mov	sp, r7
 8014d0c:	bd80      	pop	{r7, pc}
 8014d0e:	bf00      	nop
 8014d10:	20004d48 	.word	0x20004d48
 8014d14:	20004d54 	.word	0x20004d54
 8014d18:	20004d4c 	.word	0x20004d4c
 8014d1c:	20004d40 	.word	0x20004d40
 8014d20:	20004d50 	.word	0x20004d50

08014d24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b086      	sub	sp, #24
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d046      	beq.n	8014dc4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014d36:	2308      	movs	r3, #8
 8014d38:	425b      	negs	r3, r3
 8014d3a:	697a      	ldr	r2, [r7, #20]
 8014d3c:	4413      	add	r3, r2
 8014d3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014d40:	697b      	ldr	r3, [r7, #20]
 8014d42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014d44:	693b      	ldr	r3, [r7, #16]
 8014d46:	685a      	ldr	r2, [r3, #4]
 8014d48:	4b20      	ldr	r3, [pc, #128]	; (8014dcc <vPortFree+0xa8>)
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	4013      	ands	r3, r2
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d109      	bne.n	8014d66 <vPortFree+0x42>
 8014d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d56:	f383 8811 	msr	BASEPRI, r3
 8014d5a:	f3bf 8f6f 	isb	sy
 8014d5e:	f3bf 8f4f 	dsb	sy
 8014d62:	60fb      	str	r3, [r7, #12]
 8014d64:	e7fe      	b.n	8014d64 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014d66:	693b      	ldr	r3, [r7, #16]
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d009      	beq.n	8014d82 <vPortFree+0x5e>
 8014d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d72:	f383 8811 	msr	BASEPRI, r3
 8014d76:	f3bf 8f6f 	isb	sy
 8014d7a:	f3bf 8f4f 	dsb	sy
 8014d7e:	60bb      	str	r3, [r7, #8]
 8014d80:	e7fe      	b.n	8014d80 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014d82:	693b      	ldr	r3, [r7, #16]
 8014d84:	685a      	ldr	r2, [r3, #4]
 8014d86:	4b11      	ldr	r3, [pc, #68]	; (8014dcc <vPortFree+0xa8>)
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	4013      	ands	r3, r2
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d019      	beq.n	8014dc4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014d90:	693b      	ldr	r3, [r7, #16]
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d115      	bne.n	8014dc4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014d98:	693b      	ldr	r3, [r7, #16]
 8014d9a:	685a      	ldr	r2, [r3, #4]
 8014d9c:	4b0b      	ldr	r3, [pc, #44]	; (8014dcc <vPortFree+0xa8>)
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	43db      	mvns	r3, r3
 8014da2:	401a      	ands	r2, r3
 8014da4:	693b      	ldr	r3, [r7, #16]
 8014da6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014da8:	f7fe fe36 	bl	8013a18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014dac:	693b      	ldr	r3, [r7, #16]
 8014dae:	685a      	ldr	r2, [r3, #4]
 8014db0:	4b07      	ldr	r3, [pc, #28]	; (8014dd0 <vPortFree+0xac>)
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	4413      	add	r3, r2
 8014db6:	4a06      	ldr	r2, [pc, #24]	; (8014dd0 <vPortFree+0xac>)
 8014db8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014dba:	6938      	ldr	r0, [r7, #16]
 8014dbc:	f000 f86c 	bl	8014e98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014dc0:	f7fe fe38 	bl	8013a34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014dc4:	bf00      	nop
 8014dc6:	3718      	adds	r7, #24
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	bd80      	pop	{r7, pc}
 8014dcc:	20004d54 	.word	0x20004d54
 8014dd0:	20004d4c 	.word	0x20004d4c

08014dd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014dd4:	b480      	push	{r7}
 8014dd6:	b085      	sub	sp, #20
 8014dd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014dda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8014dde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014de0:	4b27      	ldr	r3, [pc, #156]	; (8014e80 <prvHeapInit+0xac>)
 8014de2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	f003 0307 	and.w	r3, r3, #7
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d00c      	beq.n	8014e08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	3307      	adds	r3, #7
 8014df2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	f023 0307 	bic.w	r3, r3, #7
 8014dfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014dfc:	68ba      	ldr	r2, [r7, #8]
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	1ad3      	subs	r3, r2, r3
 8014e02:	4a1f      	ldr	r2, [pc, #124]	; (8014e80 <prvHeapInit+0xac>)
 8014e04:	4413      	add	r3, r2
 8014e06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014e0c:	4a1d      	ldr	r2, [pc, #116]	; (8014e84 <prvHeapInit+0xb0>)
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014e12:	4b1c      	ldr	r3, [pc, #112]	; (8014e84 <prvHeapInit+0xb0>)
 8014e14:	2200      	movs	r2, #0
 8014e16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	68ba      	ldr	r2, [r7, #8]
 8014e1c:	4413      	add	r3, r2
 8014e1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014e20:	2208      	movs	r2, #8
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	1a9b      	subs	r3, r3, r2
 8014e26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	f023 0307 	bic.w	r3, r3, #7
 8014e2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	4a15      	ldr	r2, [pc, #84]	; (8014e88 <prvHeapInit+0xb4>)
 8014e34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014e36:	4b14      	ldr	r3, [pc, #80]	; (8014e88 <prvHeapInit+0xb4>)
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	2200      	movs	r2, #0
 8014e3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014e3e:	4b12      	ldr	r3, [pc, #72]	; (8014e88 <prvHeapInit+0xb4>)
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	2200      	movs	r2, #0
 8014e44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014e4a:	683b      	ldr	r3, [r7, #0]
 8014e4c:	68fa      	ldr	r2, [r7, #12]
 8014e4e:	1ad2      	subs	r2, r2, r3
 8014e50:	683b      	ldr	r3, [r7, #0]
 8014e52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014e54:	4b0c      	ldr	r3, [pc, #48]	; (8014e88 <prvHeapInit+0xb4>)
 8014e56:	681a      	ldr	r2, [r3, #0]
 8014e58:	683b      	ldr	r3, [r7, #0]
 8014e5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014e5c:	683b      	ldr	r3, [r7, #0]
 8014e5e:	685b      	ldr	r3, [r3, #4]
 8014e60:	4a0a      	ldr	r2, [pc, #40]	; (8014e8c <prvHeapInit+0xb8>)
 8014e62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014e64:	683b      	ldr	r3, [r7, #0]
 8014e66:	685b      	ldr	r3, [r3, #4]
 8014e68:	4a09      	ldr	r2, [pc, #36]	; (8014e90 <prvHeapInit+0xbc>)
 8014e6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014e6c:	4b09      	ldr	r3, [pc, #36]	; (8014e94 <prvHeapInit+0xc0>)
 8014e6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014e72:	601a      	str	r2, [r3, #0]
}
 8014e74:	bf00      	nop
 8014e76:	3714      	adds	r7, #20
 8014e78:	46bd      	mov	sp, r7
 8014e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e7e:	4770      	bx	lr
 8014e80:	20001140 	.word	0x20001140
 8014e84:	20004d40 	.word	0x20004d40
 8014e88:	20004d48 	.word	0x20004d48
 8014e8c:	20004d50 	.word	0x20004d50
 8014e90:	20004d4c 	.word	0x20004d4c
 8014e94:	20004d54 	.word	0x20004d54

08014e98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014e98:	b480      	push	{r7}
 8014e9a:	b085      	sub	sp, #20
 8014e9c:	af00      	add	r7, sp, #0
 8014e9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014ea0:	4b28      	ldr	r3, [pc, #160]	; (8014f44 <prvInsertBlockIntoFreeList+0xac>)
 8014ea2:	60fb      	str	r3, [r7, #12]
 8014ea4:	e002      	b.n	8014eac <prvInsertBlockIntoFreeList+0x14>
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	60fb      	str	r3, [r7, #12]
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	687a      	ldr	r2, [r7, #4]
 8014eb2:	429a      	cmp	r2, r3
 8014eb4:	d8f7      	bhi.n	8014ea6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	685b      	ldr	r3, [r3, #4]
 8014ebe:	68ba      	ldr	r2, [r7, #8]
 8014ec0:	4413      	add	r3, r2
 8014ec2:	687a      	ldr	r2, [r7, #4]
 8014ec4:	429a      	cmp	r2, r3
 8014ec6:	d108      	bne.n	8014eda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	685a      	ldr	r2, [r3, #4]
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	685b      	ldr	r3, [r3, #4]
 8014ed0:	441a      	add	r2, r3
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	685b      	ldr	r3, [r3, #4]
 8014ee2:	68ba      	ldr	r2, [r7, #8]
 8014ee4:	441a      	add	r2, r3
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	429a      	cmp	r2, r3
 8014eec:	d118      	bne.n	8014f20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	681a      	ldr	r2, [r3, #0]
 8014ef2:	4b15      	ldr	r3, [pc, #84]	; (8014f48 <prvInsertBlockIntoFreeList+0xb0>)
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	429a      	cmp	r2, r3
 8014ef8:	d00d      	beq.n	8014f16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	685a      	ldr	r2, [r3, #4]
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	685b      	ldr	r3, [r3, #4]
 8014f04:	441a      	add	r2, r3
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	681a      	ldr	r2, [r3, #0]
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	601a      	str	r2, [r3, #0]
 8014f14:	e008      	b.n	8014f28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014f16:	4b0c      	ldr	r3, [pc, #48]	; (8014f48 <prvInsertBlockIntoFreeList+0xb0>)
 8014f18:	681a      	ldr	r2, [r3, #0]
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	601a      	str	r2, [r3, #0]
 8014f1e:	e003      	b.n	8014f28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	681a      	ldr	r2, [r3, #0]
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014f28:	68fa      	ldr	r2, [r7, #12]
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	429a      	cmp	r2, r3
 8014f2e:	d002      	beq.n	8014f36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	687a      	ldr	r2, [r7, #4]
 8014f34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014f36:	bf00      	nop
 8014f38:	3714      	adds	r7, #20
 8014f3a:	46bd      	mov	sp, r7
 8014f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f40:	4770      	bx	lr
 8014f42:	bf00      	nop
 8014f44:	20004d40 	.word	0x20004d40
 8014f48:	20004d48 	.word	0x20004d48

08014f4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014f50:	2200      	movs	r2, #0
 8014f52:	4912      	ldr	r1, [pc, #72]	; (8014f9c <MX_USB_DEVICE_Init+0x50>)
 8014f54:	4812      	ldr	r0, [pc, #72]	; (8014fa0 <MX_USB_DEVICE_Init+0x54>)
 8014f56:	f7fc f89d 	bl	8011094 <USBD_Init>
 8014f5a:	4603      	mov	r3, r0
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d001      	beq.n	8014f64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014f60:	f7ef f924 	bl	80041ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8014f64:	490f      	ldr	r1, [pc, #60]	; (8014fa4 <MX_USB_DEVICE_Init+0x58>)
 8014f66:	480e      	ldr	r0, [pc, #56]	; (8014fa0 <MX_USB_DEVICE_Init+0x54>)
 8014f68:	f7fc f8ca 	bl	8011100 <USBD_RegisterClass>
 8014f6c:	4603      	mov	r3, r0
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d001      	beq.n	8014f76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014f72:	f7ef f91b 	bl	80041ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8014f76:	490c      	ldr	r1, [pc, #48]	; (8014fa8 <MX_USB_DEVICE_Init+0x5c>)
 8014f78:	4809      	ldr	r0, [pc, #36]	; (8014fa0 <MX_USB_DEVICE_Init+0x54>)
 8014f7a:	f7fb ffef 	bl	8010f5c <USBD_CDC_RegisterInterface>
 8014f7e:	4603      	mov	r3, r0
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d001      	beq.n	8014f88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014f84:	f7ef f912 	bl	80041ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014f88:	4805      	ldr	r0, [pc, #20]	; (8014fa0 <MX_USB_DEVICE_Init+0x54>)
 8014f8a:	f7fc f8da 	bl	8011142 <USBD_Start>
 8014f8e:	4603      	mov	r3, r0
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d001      	beq.n	8014f98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014f94:	f7ef f90a 	bl	80041ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014f98:	bf00      	nop
 8014f9a:	bd80      	pop	{r7, pc}
 8014f9c:	2000095c 	.word	0x2000095c
 8014fa0:	20006a5c 	.word	0x20006a5c
 8014fa4:	20000840 	.word	0x20000840
 8014fa8:	20000948 	.word	0x20000948

08014fac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014fac:	b580      	push	{r7, lr}
 8014fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014fb0:	2200      	movs	r2, #0
 8014fb2:	4905      	ldr	r1, [pc, #20]	; (8014fc8 <CDC_Init_FS+0x1c>)
 8014fb4:	4805      	ldr	r0, [pc, #20]	; (8014fcc <CDC_Init_FS+0x20>)
 8014fb6:	f7fb ffe6 	bl	8010f86 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014fba:	4905      	ldr	r1, [pc, #20]	; (8014fd0 <CDC_Init_FS+0x24>)
 8014fbc:	4803      	ldr	r0, [pc, #12]	; (8014fcc <CDC_Init_FS+0x20>)
 8014fbe:	f7fb fffb 	bl	8010fb8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014fc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	bd80      	pop	{r7, pc}
 8014fc8:	20006f2c 	.word	0x20006f2c
 8014fcc:	20006a5c 	.word	0x20006a5c
 8014fd0:	20006d2c 	.word	0x20006d2c

08014fd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014fd4:	b480      	push	{r7}
 8014fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014fd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014fda:	4618      	mov	r0, r3
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe2:	4770      	bx	lr

08014fe4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014fe4:	b480      	push	{r7}
 8014fe6:	b083      	sub	sp, #12
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	4603      	mov	r3, r0
 8014fec:	6039      	str	r1, [r7, #0]
 8014fee:	71fb      	strb	r3, [r7, #7]
 8014ff0:	4613      	mov	r3, r2
 8014ff2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8014ff4:	79fb      	ldrb	r3, [r7, #7]
 8014ff6:	2b23      	cmp	r3, #35	; 0x23
 8014ff8:	f200 808c 	bhi.w	8015114 <CDC_Control_FS+0x130>
 8014ffc:	a201      	add	r2, pc, #4	; (adr r2, 8015004 <CDC_Control_FS+0x20>)
 8014ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015002:	bf00      	nop
 8015004:	08015115 	.word	0x08015115
 8015008:	08015115 	.word	0x08015115
 801500c:	08015115 	.word	0x08015115
 8015010:	08015115 	.word	0x08015115
 8015014:	08015115 	.word	0x08015115
 8015018:	08015115 	.word	0x08015115
 801501c:	08015115 	.word	0x08015115
 8015020:	08015115 	.word	0x08015115
 8015024:	08015115 	.word	0x08015115
 8015028:	08015115 	.word	0x08015115
 801502c:	08015115 	.word	0x08015115
 8015030:	08015115 	.word	0x08015115
 8015034:	08015115 	.word	0x08015115
 8015038:	08015115 	.word	0x08015115
 801503c:	08015115 	.word	0x08015115
 8015040:	08015115 	.word	0x08015115
 8015044:	08015115 	.word	0x08015115
 8015048:	08015115 	.word	0x08015115
 801504c:	08015115 	.word	0x08015115
 8015050:	08015115 	.word	0x08015115
 8015054:	08015115 	.word	0x08015115
 8015058:	08015115 	.word	0x08015115
 801505c:	08015115 	.word	0x08015115
 8015060:	08015115 	.word	0x08015115
 8015064:	08015115 	.word	0x08015115
 8015068:	08015115 	.word	0x08015115
 801506c:	08015115 	.word	0x08015115
 8015070:	08015115 	.word	0x08015115
 8015074:	08015115 	.word	0x08015115
 8015078:	08015115 	.word	0x08015115
 801507c:	08015115 	.word	0x08015115
 8015080:	08015115 	.word	0x08015115
 8015084:	08015095 	.word	0x08015095
 8015088:	080150cf 	.word	0x080150cf
 801508c:	08015115 	.word	0x08015115
 8015090:	08015115 	.word	0x08015115
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 8015094:	683b      	ldr	r3, [r7, #0]
 8015096:	781a      	ldrb	r2, [r3, #0]
 8015098:	4b22      	ldr	r3, [pc, #136]	; (8015124 <CDC_Control_FS+0x140>)
 801509a:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 801509c:	683b      	ldr	r3, [r7, #0]
 801509e:	785a      	ldrb	r2, [r3, #1]
 80150a0:	4b20      	ldr	r3, [pc, #128]	; (8015124 <CDC_Control_FS+0x140>)
 80150a2:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 80150a4:	683b      	ldr	r3, [r7, #0]
 80150a6:	789a      	ldrb	r2, [r3, #2]
 80150a8:	4b1e      	ldr	r3, [pc, #120]	; (8015124 <CDC_Control_FS+0x140>)
 80150aa:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 80150ac:	683b      	ldr	r3, [r7, #0]
 80150ae:	78da      	ldrb	r2, [r3, #3]
 80150b0:	4b1c      	ldr	r3, [pc, #112]	; (8015124 <CDC_Control_FS+0x140>)
 80150b2:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 80150b4:	683b      	ldr	r3, [r7, #0]
 80150b6:	791a      	ldrb	r2, [r3, #4]
 80150b8:	4b1a      	ldr	r3, [pc, #104]	; (8015124 <CDC_Control_FS+0x140>)
 80150ba:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 80150bc:	683b      	ldr	r3, [r7, #0]
 80150be:	795a      	ldrb	r2, [r3, #5]
 80150c0:	4b18      	ldr	r3, [pc, #96]	; (8015124 <CDC_Control_FS+0x140>)
 80150c2:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 80150c4:	683b      	ldr	r3, [r7, #0]
 80150c6:	799a      	ldrb	r2, [r3, #6]
 80150c8:	4b16      	ldr	r3, [pc, #88]	; (8015124 <CDC_Control_FS+0x140>)
 80150ca:	719a      	strb	r2, [r3, #6]
    	break;
 80150cc:	e023      	b.n	8015116 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 80150ce:	4b15      	ldr	r3, [pc, #84]	; (8015124 <CDC_Control_FS+0x140>)
 80150d0:	781a      	ldrb	r2, [r3, #0]
 80150d2:	683b      	ldr	r3, [r7, #0]
 80150d4:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 80150d6:	683b      	ldr	r3, [r7, #0]
 80150d8:	3301      	adds	r3, #1
 80150da:	4a12      	ldr	r2, [pc, #72]	; (8015124 <CDC_Control_FS+0x140>)
 80150dc:	7852      	ldrb	r2, [r2, #1]
 80150de:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 80150e0:	683b      	ldr	r3, [r7, #0]
 80150e2:	3302      	adds	r3, #2
 80150e4:	4a0f      	ldr	r2, [pc, #60]	; (8015124 <CDC_Control_FS+0x140>)
 80150e6:	7892      	ldrb	r2, [r2, #2]
 80150e8:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 80150ea:	683b      	ldr	r3, [r7, #0]
 80150ec:	3303      	adds	r3, #3
 80150ee:	4a0d      	ldr	r2, [pc, #52]	; (8015124 <CDC_Control_FS+0x140>)
 80150f0:	78d2      	ldrb	r2, [r2, #3]
 80150f2:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 80150f4:	683b      	ldr	r3, [r7, #0]
 80150f6:	3304      	adds	r3, #4
 80150f8:	4a0a      	ldr	r2, [pc, #40]	; (8015124 <CDC_Control_FS+0x140>)
 80150fa:	7912      	ldrb	r2, [r2, #4]
 80150fc:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 80150fe:	683b      	ldr	r3, [r7, #0]
 8015100:	3305      	adds	r3, #5
 8015102:	4a08      	ldr	r2, [pc, #32]	; (8015124 <CDC_Control_FS+0x140>)
 8015104:	7952      	ldrb	r2, [r2, #5]
 8015106:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 8015108:	683b      	ldr	r3, [r7, #0]
 801510a:	3306      	adds	r3, #6
 801510c:	4a05      	ldr	r2, [pc, #20]	; (8015124 <CDC_Control_FS+0x140>)
 801510e:	7992      	ldrb	r2, [r2, #6]
 8015110:	701a      	strb	r2, [r3, #0]
    break;
 8015112:	e000      	b.n	8015116 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015114:	bf00      	nop
  }

  return (USBD_OK);
 8015116:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015118:	4618      	mov	r0, r3
 801511a:	370c      	adds	r7, #12
 801511c:	46bd      	mov	sp, r7
 801511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015122:	4770      	bx	lr
 8015124:	2000712c 	.word	0x2000712c

08015128 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015128:	b580      	push	{r7, lr}
 801512a:	b082      	sub	sp, #8
 801512c:	af00      	add	r7, sp, #0
 801512e:	6078      	str	r0, [r7, #4]
 8015130:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 8015132:	683b      	ldr	r3, [r7, #0]
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	b29b      	uxth	r3, r3
 8015138:	461a      	mov	r2, r3
 801513a:	6879      	ldr	r1, [r7, #4]
 801513c:	4807      	ldr	r0, [pc, #28]	; (801515c <CDC_Receive_FS+0x34>)
 801513e:	f7ef f8ac 	bl	800429a <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015142:	6879      	ldr	r1, [r7, #4]
 8015144:	4806      	ldr	r0, [pc, #24]	; (8015160 <CDC_Receive_FS+0x38>)
 8015146:	f7fb ff37 	bl	8010fb8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801514a:	4805      	ldr	r0, [pc, #20]	; (8015160 <CDC_Receive_FS+0x38>)
 801514c:	f7fb ff78 	bl	8011040 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015150:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015152:	4618      	mov	r0, r3
 8015154:	3708      	adds	r7, #8
 8015156:	46bd      	mov	sp, r7
 8015158:	bd80      	pop	{r7, pc}
 801515a:	bf00      	nop
 801515c:	20000004 	.word	0x20000004
 8015160:	20006a5c 	.word	0x20006a5c

08015164 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015164:	b580      	push	{r7, lr}
 8015166:	b084      	sub	sp, #16
 8015168:	af00      	add	r7, sp, #0
 801516a:	6078      	str	r0, [r7, #4]
 801516c:	460b      	mov	r3, r1
 801516e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015170:	2300      	movs	r3, #0
 8015172:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015174:	4b0d      	ldr	r3, [pc, #52]	; (80151ac <CDC_Transmit_FS+0x48>)
 8015176:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801517a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801517c:	68bb      	ldr	r3, [r7, #8]
 801517e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015182:	2b00      	cmp	r3, #0
 8015184:	d001      	beq.n	801518a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015186:	2301      	movs	r3, #1
 8015188:	e00b      	b.n	80151a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801518a:	887b      	ldrh	r3, [r7, #2]
 801518c:	461a      	mov	r2, r3
 801518e:	6879      	ldr	r1, [r7, #4]
 8015190:	4806      	ldr	r0, [pc, #24]	; (80151ac <CDC_Transmit_FS+0x48>)
 8015192:	f7fb fef8 	bl	8010f86 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015196:	4805      	ldr	r0, [pc, #20]	; (80151ac <CDC_Transmit_FS+0x48>)
 8015198:	f7fb ff22 	bl	8010fe0 <USBD_CDC_TransmitPacket>
 801519c:	4603      	mov	r3, r0
 801519e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80151a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80151a2:	4618      	mov	r0, r3
 80151a4:	3710      	adds	r7, #16
 80151a6:	46bd      	mov	sp, r7
 80151a8:	bd80      	pop	{r7, pc}
 80151aa:	bf00      	nop
 80151ac:	20006a5c 	.word	0x20006a5c

080151b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80151b0:	b480      	push	{r7}
 80151b2:	b087      	sub	sp, #28
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	60f8      	str	r0, [r7, #12]
 80151b8:	60b9      	str	r1, [r7, #8]
 80151ba:	4613      	mov	r3, r2
 80151bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80151be:	2300      	movs	r3, #0
 80151c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80151c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80151c6:	4618      	mov	r0, r3
 80151c8:	371c      	adds	r7, #28
 80151ca:	46bd      	mov	sp, r7
 80151cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151d0:	4770      	bx	lr
	...

080151d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80151d4:	b480      	push	{r7}
 80151d6:	b083      	sub	sp, #12
 80151d8:	af00      	add	r7, sp, #0
 80151da:	4603      	mov	r3, r0
 80151dc:	6039      	str	r1, [r7, #0]
 80151de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80151e0:	683b      	ldr	r3, [r7, #0]
 80151e2:	2212      	movs	r2, #18
 80151e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80151e6:	4b03      	ldr	r3, [pc, #12]	; (80151f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80151e8:	4618      	mov	r0, r3
 80151ea:	370c      	adds	r7, #12
 80151ec:	46bd      	mov	sp, r7
 80151ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f2:	4770      	bx	lr
 80151f4:	20000978 	.word	0x20000978

080151f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80151f8:	b480      	push	{r7}
 80151fa:	b083      	sub	sp, #12
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	4603      	mov	r3, r0
 8015200:	6039      	str	r1, [r7, #0]
 8015202:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015204:	683b      	ldr	r3, [r7, #0]
 8015206:	2204      	movs	r2, #4
 8015208:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801520a:	4b03      	ldr	r3, [pc, #12]	; (8015218 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801520c:	4618      	mov	r0, r3
 801520e:	370c      	adds	r7, #12
 8015210:	46bd      	mov	sp, r7
 8015212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015216:	4770      	bx	lr
 8015218:	2000098c 	.word	0x2000098c

0801521c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801521c:	b580      	push	{r7, lr}
 801521e:	b082      	sub	sp, #8
 8015220:	af00      	add	r7, sp, #0
 8015222:	4603      	mov	r3, r0
 8015224:	6039      	str	r1, [r7, #0]
 8015226:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015228:	79fb      	ldrb	r3, [r7, #7]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d105      	bne.n	801523a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801522e:	683a      	ldr	r2, [r7, #0]
 8015230:	4907      	ldr	r1, [pc, #28]	; (8015250 <USBD_FS_ProductStrDescriptor+0x34>)
 8015232:	4808      	ldr	r0, [pc, #32]	; (8015254 <USBD_FS_ProductStrDescriptor+0x38>)
 8015234:	f7fc ff53 	bl	80120de <USBD_GetString>
 8015238:	e004      	b.n	8015244 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801523a:	683a      	ldr	r2, [r7, #0]
 801523c:	4904      	ldr	r1, [pc, #16]	; (8015250 <USBD_FS_ProductStrDescriptor+0x34>)
 801523e:	4805      	ldr	r0, [pc, #20]	; (8015254 <USBD_FS_ProductStrDescriptor+0x38>)
 8015240:	f7fc ff4d 	bl	80120de <USBD_GetString>
  }
  return USBD_StrDesc;
 8015244:	4b02      	ldr	r3, [pc, #8]	; (8015250 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015246:	4618      	mov	r0, r3
 8015248:	3708      	adds	r7, #8
 801524a:	46bd      	mov	sp, r7
 801524c:	bd80      	pop	{r7, pc}
 801524e:	bf00      	nop
 8015250:	20007134 	.word	0x20007134
 8015254:	0801b1ac 	.word	0x0801b1ac

08015258 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015258:	b580      	push	{r7, lr}
 801525a:	b082      	sub	sp, #8
 801525c:	af00      	add	r7, sp, #0
 801525e:	4603      	mov	r3, r0
 8015260:	6039      	str	r1, [r7, #0]
 8015262:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015264:	683a      	ldr	r2, [r7, #0]
 8015266:	4904      	ldr	r1, [pc, #16]	; (8015278 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015268:	4804      	ldr	r0, [pc, #16]	; (801527c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801526a:	f7fc ff38 	bl	80120de <USBD_GetString>
  return USBD_StrDesc;
 801526e:	4b02      	ldr	r3, [pc, #8]	; (8015278 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015270:	4618      	mov	r0, r3
 8015272:	3708      	adds	r7, #8
 8015274:	46bd      	mov	sp, r7
 8015276:	bd80      	pop	{r7, pc}
 8015278:	20007134 	.word	0x20007134
 801527c:	0801b1c4 	.word	0x0801b1c4

08015280 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015280:	b580      	push	{r7, lr}
 8015282:	b082      	sub	sp, #8
 8015284:	af00      	add	r7, sp, #0
 8015286:	4603      	mov	r3, r0
 8015288:	6039      	str	r1, [r7, #0]
 801528a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801528c:	683b      	ldr	r3, [r7, #0]
 801528e:	221a      	movs	r2, #26
 8015290:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015292:	f000 f843 	bl	801531c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015296:	4b02      	ldr	r3, [pc, #8]	; (80152a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015298:	4618      	mov	r0, r3
 801529a:	3708      	adds	r7, #8
 801529c:	46bd      	mov	sp, r7
 801529e:	bd80      	pop	{r7, pc}
 80152a0:	20000990 	.word	0x20000990

080152a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b082      	sub	sp, #8
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	4603      	mov	r3, r0
 80152ac:	6039      	str	r1, [r7, #0]
 80152ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80152b0:	79fb      	ldrb	r3, [r7, #7]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d105      	bne.n	80152c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80152b6:	683a      	ldr	r2, [r7, #0]
 80152b8:	4907      	ldr	r1, [pc, #28]	; (80152d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80152ba:	4808      	ldr	r0, [pc, #32]	; (80152dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80152bc:	f7fc ff0f 	bl	80120de <USBD_GetString>
 80152c0:	e004      	b.n	80152cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80152c2:	683a      	ldr	r2, [r7, #0]
 80152c4:	4904      	ldr	r1, [pc, #16]	; (80152d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80152c6:	4805      	ldr	r0, [pc, #20]	; (80152dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80152c8:	f7fc ff09 	bl	80120de <USBD_GetString>
  }
  return USBD_StrDesc;
 80152cc:	4b02      	ldr	r3, [pc, #8]	; (80152d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80152ce:	4618      	mov	r0, r3
 80152d0:	3708      	adds	r7, #8
 80152d2:	46bd      	mov	sp, r7
 80152d4:	bd80      	pop	{r7, pc}
 80152d6:	bf00      	nop
 80152d8:	20007134 	.word	0x20007134
 80152dc:	0801b1d8 	.word	0x0801b1d8

080152e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152e0:	b580      	push	{r7, lr}
 80152e2:	b082      	sub	sp, #8
 80152e4:	af00      	add	r7, sp, #0
 80152e6:	4603      	mov	r3, r0
 80152e8:	6039      	str	r1, [r7, #0]
 80152ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80152ec:	79fb      	ldrb	r3, [r7, #7]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d105      	bne.n	80152fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80152f2:	683a      	ldr	r2, [r7, #0]
 80152f4:	4907      	ldr	r1, [pc, #28]	; (8015314 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80152f6:	4808      	ldr	r0, [pc, #32]	; (8015318 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80152f8:	f7fc fef1 	bl	80120de <USBD_GetString>
 80152fc:	e004      	b.n	8015308 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80152fe:	683a      	ldr	r2, [r7, #0]
 8015300:	4904      	ldr	r1, [pc, #16]	; (8015314 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015302:	4805      	ldr	r0, [pc, #20]	; (8015318 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015304:	f7fc feeb 	bl	80120de <USBD_GetString>
  }
  return USBD_StrDesc;
 8015308:	4b02      	ldr	r3, [pc, #8]	; (8015314 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801530a:	4618      	mov	r0, r3
 801530c:	3708      	adds	r7, #8
 801530e:	46bd      	mov	sp, r7
 8015310:	bd80      	pop	{r7, pc}
 8015312:	bf00      	nop
 8015314:	20007134 	.word	0x20007134
 8015318:	0801b1e4 	.word	0x0801b1e4

0801531c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801531c:	b580      	push	{r7, lr}
 801531e:	b084      	sub	sp, #16
 8015320:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015322:	4b0f      	ldr	r3, [pc, #60]	; (8015360 <Get_SerialNum+0x44>)
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015328:	4b0e      	ldr	r3, [pc, #56]	; (8015364 <Get_SerialNum+0x48>)
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801532e:	4b0e      	ldr	r3, [pc, #56]	; (8015368 <Get_SerialNum+0x4c>)
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015334:	68fa      	ldr	r2, [r7, #12]
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	4413      	add	r3, r2
 801533a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d009      	beq.n	8015356 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015342:	2208      	movs	r2, #8
 8015344:	4909      	ldr	r1, [pc, #36]	; (801536c <Get_SerialNum+0x50>)
 8015346:	68f8      	ldr	r0, [r7, #12]
 8015348:	f000 f814 	bl	8015374 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801534c:	2204      	movs	r2, #4
 801534e:	4908      	ldr	r1, [pc, #32]	; (8015370 <Get_SerialNum+0x54>)
 8015350:	68b8      	ldr	r0, [r7, #8]
 8015352:	f000 f80f 	bl	8015374 <IntToUnicode>
  }
}
 8015356:	bf00      	nop
 8015358:	3710      	adds	r7, #16
 801535a:	46bd      	mov	sp, r7
 801535c:	bd80      	pop	{r7, pc}
 801535e:	bf00      	nop
 8015360:	1fff7a10 	.word	0x1fff7a10
 8015364:	1fff7a14 	.word	0x1fff7a14
 8015368:	1fff7a18 	.word	0x1fff7a18
 801536c:	20000992 	.word	0x20000992
 8015370:	200009a2 	.word	0x200009a2

08015374 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015374:	b480      	push	{r7}
 8015376:	b087      	sub	sp, #28
 8015378:	af00      	add	r7, sp, #0
 801537a:	60f8      	str	r0, [r7, #12]
 801537c:	60b9      	str	r1, [r7, #8]
 801537e:	4613      	mov	r3, r2
 8015380:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015382:	2300      	movs	r3, #0
 8015384:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015386:	2300      	movs	r3, #0
 8015388:	75fb      	strb	r3, [r7, #23]
 801538a:	e027      	b.n	80153dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	0f1b      	lsrs	r3, r3, #28
 8015390:	2b09      	cmp	r3, #9
 8015392:	d80b      	bhi.n	80153ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	0f1b      	lsrs	r3, r3, #28
 8015398:	b2da      	uxtb	r2, r3
 801539a:	7dfb      	ldrb	r3, [r7, #23]
 801539c:	005b      	lsls	r3, r3, #1
 801539e:	4619      	mov	r1, r3
 80153a0:	68bb      	ldr	r3, [r7, #8]
 80153a2:	440b      	add	r3, r1
 80153a4:	3230      	adds	r2, #48	; 0x30
 80153a6:	b2d2      	uxtb	r2, r2
 80153a8:	701a      	strb	r2, [r3, #0]
 80153aa:	e00a      	b.n	80153c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	0f1b      	lsrs	r3, r3, #28
 80153b0:	b2da      	uxtb	r2, r3
 80153b2:	7dfb      	ldrb	r3, [r7, #23]
 80153b4:	005b      	lsls	r3, r3, #1
 80153b6:	4619      	mov	r1, r3
 80153b8:	68bb      	ldr	r3, [r7, #8]
 80153ba:	440b      	add	r3, r1
 80153bc:	3237      	adds	r2, #55	; 0x37
 80153be:	b2d2      	uxtb	r2, r2
 80153c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	011b      	lsls	r3, r3, #4
 80153c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80153c8:	7dfb      	ldrb	r3, [r7, #23]
 80153ca:	005b      	lsls	r3, r3, #1
 80153cc:	3301      	adds	r3, #1
 80153ce:	68ba      	ldr	r2, [r7, #8]
 80153d0:	4413      	add	r3, r2
 80153d2:	2200      	movs	r2, #0
 80153d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80153d6:	7dfb      	ldrb	r3, [r7, #23]
 80153d8:	3301      	adds	r3, #1
 80153da:	75fb      	strb	r3, [r7, #23]
 80153dc:	7dfa      	ldrb	r2, [r7, #23]
 80153de:	79fb      	ldrb	r3, [r7, #7]
 80153e0:	429a      	cmp	r2, r3
 80153e2:	d3d3      	bcc.n	801538c <IntToUnicode+0x18>
  }
}
 80153e4:	bf00      	nop
 80153e6:	371c      	adds	r7, #28
 80153e8:	46bd      	mov	sp, r7
 80153ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ee:	4770      	bx	lr

080153f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b08a      	sub	sp, #40	; 0x28
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80153f8:	f107 0314 	add.w	r3, r7, #20
 80153fc:	2200      	movs	r2, #0
 80153fe:	601a      	str	r2, [r3, #0]
 8015400:	605a      	str	r2, [r3, #4]
 8015402:	609a      	str	r2, [r3, #8]
 8015404:	60da      	str	r2, [r3, #12]
 8015406:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015410:	d13a      	bne.n	8015488 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015412:	2300      	movs	r3, #0
 8015414:	613b      	str	r3, [r7, #16]
 8015416:	4b1e      	ldr	r3, [pc, #120]	; (8015490 <HAL_PCD_MspInit+0xa0>)
 8015418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801541a:	4a1d      	ldr	r2, [pc, #116]	; (8015490 <HAL_PCD_MspInit+0xa0>)
 801541c:	f043 0301 	orr.w	r3, r3, #1
 8015420:	6313      	str	r3, [r2, #48]	; 0x30
 8015422:	4b1b      	ldr	r3, [pc, #108]	; (8015490 <HAL_PCD_MspInit+0xa0>)
 8015424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015426:	f003 0301 	and.w	r3, r3, #1
 801542a:	613b      	str	r3, [r7, #16]
 801542c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801542e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015434:	2302      	movs	r3, #2
 8015436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015438:	2300      	movs	r3, #0
 801543a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801543c:	2303      	movs	r3, #3
 801543e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015440:	230a      	movs	r3, #10
 8015442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015444:	f107 0314 	add.w	r3, r7, #20
 8015448:	4619      	mov	r1, r3
 801544a:	4812      	ldr	r0, [pc, #72]	; (8015494 <HAL_PCD_MspInit+0xa4>)
 801544c:	f7f6 fbd4 	bl	800bbf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015450:	4b0f      	ldr	r3, [pc, #60]	; (8015490 <HAL_PCD_MspInit+0xa0>)
 8015452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015454:	4a0e      	ldr	r2, [pc, #56]	; (8015490 <HAL_PCD_MspInit+0xa0>)
 8015456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801545a:	6353      	str	r3, [r2, #52]	; 0x34
 801545c:	2300      	movs	r3, #0
 801545e:	60fb      	str	r3, [r7, #12]
 8015460:	4b0b      	ldr	r3, [pc, #44]	; (8015490 <HAL_PCD_MspInit+0xa0>)
 8015462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015464:	4a0a      	ldr	r2, [pc, #40]	; (8015490 <HAL_PCD_MspInit+0xa0>)
 8015466:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801546a:	6453      	str	r3, [r2, #68]	; 0x44
 801546c:	4b08      	ldr	r3, [pc, #32]	; (8015490 <HAL_PCD_MspInit+0xa0>)
 801546e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015474:	60fb      	str	r3, [r7, #12]
 8015476:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015478:	2200      	movs	r2, #0
 801547a:	2105      	movs	r1, #5
 801547c:	2043      	movs	r0, #67	; 0x43
 801547e:	f7f5 fff3 	bl	800b468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015482:	2043      	movs	r0, #67	; 0x43
 8015484:	f7f6 f80c 	bl	800b4a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015488:	bf00      	nop
 801548a:	3728      	adds	r7, #40	; 0x28
 801548c:	46bd      	mov	sp, r7
 801548e:	bd80      	pop	{r7, pc}
 8015490:	40023800 	.word	0x40023800
 8015494:	40020000 	.word	0x40020000

08015498 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015498:	b580      	push	{r7, lr}
 801549a:	b082      	sub	sp, #8
 801549c:	af00      	add	r7, sp, #0
 801549e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80154ac:	4619      	mov	r1, r3
 80154ae:	4610      	mov	r0, r2
 80154b0:	f7fb fe92 	bl	80111d8 <USBD_LL_SetupStage>
}
 80154b4:	bf00      	nop
 80154b6:	3708      	adds	r7, #8
 80154b8:	46bd      	mov	sp, r7
 80154ba:	bd80      	pop	{r7, pc}

080154bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80154bc:	b580      	push	{r7, lr}
 80154be:	b082      	sub	sp, #8
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	6078      	str	r0, [r7, #4]
 80154c4:	460b      	mov	r3, r1
 80154c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80154ce:	78fa      	ldrb	r2, [r7, #3]
 80154d0:	6879      	ldr	r1, [r7, #4]
 80154d2:	4613      	mov	r3, r2
 80154d4:	00db      	lsls	r3, r3, #3
 80154d6:	1a9b      	subs	r3, r3, r2
 80154d8:	009b      	lsls	r3, r3, #2
 80154da:	440b      	add	r3, r1
 80154dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80154e0:	681a      	ldr	r2, [r3, #0]
 80154e2:	78fb      	ldrb	r3, [r7, #3]
 80154e4:	4619      	mov	r1, r3
 80154e6:	f7fb feca 	bl	801127e <USBD_LL_DataOutStage>
}
 80154ea:	bf00      	nop
 80154ec:	3708      	adds	r7, #8
 80154ee:	46bd      	mov	sp, r7
 80154f0:	bd80      	pop	{r7, pc}

080154f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80154f2:	b580      	push	{r7, lr}
 80154f4:	b082      	sub	sp, #8
 80154f6:	af00      	add	r7, sp, #0
 80154f8:	6078      	str	r0, [r7, #4]
 80154fa:	460b      	mov	r3, r1
 80154fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015504:	78fa      	ldrb	r2, [r7, #3]
 8015506:	6879      	ldr	r1, [r7, #4]
 8015508:	4613      	mov	r3, r2
 801550a:	00db      	lsls	r3, r3, #3
 801550c:	1a9b      	subs	r3, r3, r2
 801550e:	009b      	lsls	r3, r3, #2
 8015510:	440b      	add	r3, r1
 8015512:	3348      	adds	r3, #72	; 0x48
 8015514:	681a      	ldr	r2, [r3, #0]
 8015516:	78fb      	ldrb	r3, [r7, #3]
 8015518:	4619      	mov	r1, r3
 801551a:	f7fb ff13 	bl	8011344 <USBD_LL_DataInStage>
}
 801551e:	bf00      	nop
 8015520:	3708      	adds	r7, #8
 8015522:	46bd      	mov	sp, r7
 8015524:	bd80      	pop	{r7, pc}

08015526 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015526:	b580      	push	{r7, lr}
 8015528:	b082      	sub	sp, #8
 801552a:	af00      	add	r7, sp, #0
 801552c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015534:	4618      	mov	r0, r3
 8015536:	f7fc f817 	bl	8011568 <USBD_LL_SOF>
}
 801553a:	bf00      	nop
 801553c:	3708      	adds	r7, #8
 801553e:	46bd      	mov	sp, r7
 8015540:	bd80      	pop	{r7, pc}

08015542 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015542:	b580      	push	{r7, lr}
 8015544:	b084      	sub	sp, #16
 8015546:	af00      	add	r7, sp, #0
 8015548:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801554a:	2301      	movs	r3, #1
 801554c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	68db      	ldr	r3, [r3, #12]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d102      	bne.n	801555c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015556:	2300      	movs	r3, #0
 8015558:	73fb      	strb	r3, [r7, #15]
 801555a:	e008      	b.n	801556e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	68db      	ldr	r3, [r3, #12]
 8015560:	2b02      	cmp	r3, #2
 8015562:	d102      	bne.n	801556a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015564:	2301      	movs	r3, #1
 8015566:	73fb      	strb	r3, [r7, #15]
 8015568:	e001      	b.n	801556e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801556a:	f7ee fe1f 	bl	80041ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015574:	7bfa      	ldrb	r2, [r7, #15]
 8015576:	4611      	mov	r1, r2
 8015578:	4618      	mov	r0, r3
 801557a:	f7fb ffba 	bl	80114f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015584:	4618      	mov	r0, r3
 8015586:	f7fb ff73 	bl	8011470 <USBD_LL_Reset>
}
 801558a:	bf00      	nop
 801558c:	3710      	adds	r7, #16
 801558e:	46bd      	mov	sp, r7
 8015590:	bd80      	pop	{r7, pc}
	...

08015594 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015594:	b580      	push	{r7, lr}
 8015596:	b082      	sub	sp, #8
 8015598:	af00      	add	r7, sp, #0
 801559a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80155a2:	4618      	mov	r0, r3
 80155a4:	f7fb ffb5 	bl	8011512 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	687a      	ldr	r2, [r7, #4]
 80155b4:	6812      	ldr	r2, [r2, #0]
 80155b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80155ba:	f043 0301 	orr.w	r3, r3, #1
 80155be:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	6a1b      	ldr	r3, [r3, #32]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d005      	beq.n	80155d4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80155c8:	4b04      	ldr	r3, [pc, #16]	; (80155dc <HAL_PCD_SuspendCallback+0x48>)
 80155ca:	691b      	ldr	r3, [r3, #16]
 80155cc:	4a03      	ldr	r2, [pc, #12]	; (80155dc <HAL_PCD_SuspendCallback+0x48>)
 80155ce:	f043 0306 	orr.w	r3, r3, #6
 80155d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80155d4:	bf00      	nop
 80155d6:	3708      	adds	r7, #8
 80155d8:	46bd      	mov	sp, r7
 80155da:	bd80      	pop	{r7, pc}
 80155dc:	e000ed00 	.word	0xe000ed00

080155e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b082      	sub	sp, #8
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80155ee:	4618      	mov	r0, r3
 80155f0:	f7fb ffa4 	bl	801153c <USBD_LL_Resume>
}
 80155f4:	bf00      	nop
 80155f6:	3708      	adds	r7, #8
 80155f8:	46bd      	mov	sp, r7
 80155fa:	bd80      	pop	{r7, pc}

080155fc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155fc:	b580      	push	{r7, lr}
 80155fe:	b082      	sub	sp, #8
 8015600:	af00      	add	r7, sp, #0
 8015602:	6078      	str	r0, [r7, #4]
 8015604:	460b      	mov	r3, r1
 8015606:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801560e:	78fa      	ldrb	r2, [r7, #3]
 8015610:	4611      	mov	r1, r2
 8015612:	4618      	mov	r0, r3
 8015614:	f7fb ffcf 	bl	80115b6 <USBD_LL_IsoOUTIncomplete>
}
 8015618:	bf00      	nop
 801561a:	3708      	adds	r7, #8
 801561c:	46bd      	mov	sp, r7
 801561e:	bd80      	pop	{r7, pc}

08015620 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015620:	b580      	push	{r7, lr}
 8015622:	b082      	sub	sp, #8
 8015624:	af00      	add	r7, sp, #0
 8015626:	6078      	str	r0, [r7, #4]
 8015628:	460b      	mov	r3, r1
 801562a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015632:	78fa      	ldrb	r2, [r7, #3]
 8015634:	4611      	mov	r1, r2
 8015636:	4618      	mov	r0, r3
 8015638:	f7fb ffb0 	bl	801159c <USBD_LL_IsoINIncomplete>
}
 801563c:	bf00      	nop
 801563e:	3708      	adds	r7, #8
 8015640:	46bd      	mov	sp, r7
 8015642:	bd80      	pop	{r7, pc}

08015644 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015644:	b580      	push	{r7, lr}
 8015646:	b082      	sub	sp, #8
 8015648:	af00      	add	r7, sp, #0
 801564a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015652:	4618      	mov	r0, r3
 8015654:	f7fb ffbc 	bl	80115d0 <USBD_LL_DevConnected>
}
 8015658:	bf00      	nop
 801565a:	3708      	adds	r7, #8
 801565c:	46bd      	mov	sp, r7
 801565e:	bd80      	pop	{r7, pc}

08015660 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015660:	b580      	push	{r7, lr}
 8015662:	b082      	sub	sp, #8
 8015664:	af00      	add	r7, sp, #0
 8015666:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801566e:	4618      	mov	r0, r3
 8015670:	f7fb ffb9 	bl	80115e6 <USBD_LL_DevDisconnected>
}
 8015674:	bf00      	nop
 8015676:	3708      	adds	r7, #8
 8015678:	46bd      	mov	sp, r7
 801567a:	bd80      	pop	{r7, pc}

0801567c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801567c:	b580      	push	{r7, lr}
 801567e:	b082      	sub	sp, #8
 8015680:	af00      	add	r7, sp, #0
 8015682:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	781b      	ldrb	r3, [r3, #0]
 8015688:	2b00      	cmp	r3, #0
 801568a:	d13c      	bne.n	8015706 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801568c:	4a20      	ldr	r2, [pc, #128]	; (8015710 <USBD_LL_Init+0x94>)
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	4a1e      	ldr	r2, [pc, #120]	; (8015710 <USBD_LL_Init+0x94>)
 8015698:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801569c:	4b1c      	ldr	r3, [pc, #112]	; (8015710 <USBD_LL_Init+0x94>)
 801569e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80156a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80156a4:	4b1a      	ldr	r3, [pc, #104]	; (8015710 <USBD_LL_Init+0x94>)
 80156a6:	2204      	movs	r2, #4
 80156a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80156aa:	4b19      	ldr	r3, [pc, #100]	; (8015710 <USBD_LL_Init+0x94>)
 80156ac:	2202      	movs	r2, #2
 80156ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80156b0:	4b17      	ldr	r3, [pc, #92]	; (8015710 <USBD_LL_Init+0x94>)
 80156b2:	2200      	movs	r2, #0
 80156b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80156b6:	4b16      	ldr	r3, [pc, #88]	; (8015710 <USBD_LL_Init+0x94>)
 80156b8:	2202      	movs	r2, #2
 80156ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80156bc:	4b14      	ldr	r3, [pc, #80]	; (8015710 <USBD_LL_Init+0x94>)
 80156be:	2200      	movs	r2, #0
 80156c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80156c2:	4b13      	ldr	r3, [pc, #76]	; (8015710 <USBD_LL_Init+0x94>)
 80156c4:	2200      	movs	r2, #0
 80156c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80156c8:	4b11      	ldr	r3, [pc, #68]	; (8015710 <USBD_LL_Init+0x94>)
 80156ca:	2200      	movs	r2, #0
 80156cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80156ce:	4b10      	ldr	r3, [pc, #64]	; (8015710 <USBD_LL_Init+0x94>)
 80156d0:	2200      	movs	r2, #0
 80156d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80156d4:	4b0e      	ldr	r3, [pc, #56]	; (8015710 <USBD_LL_Init+0x94>)
 80156d6:	2200      	movs	r2, #0
 80156d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80156da:	480d      	ldr	r0, [pc, #52]	; (8015710 <USBD_LL_Init+0x94>)
 80156dc:	f7f6 fc96 	bl	800c00c <HAL_PCD_Init>
 80156e0:	4603      	mov	r3, r0
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d001      	beq.n	80156ea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80156e6:	f7ee fd61 	bl	80041ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80156ea:	2180      	movs	r1, #128	; 0x80
 80156ec:	4808      	ldr	r0, [pc, #32]	; (8015710 <USBD_LL_Init+0x94>)
 80156ee:	f7f7 fdf4 	bl	800d2da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80156f2:	2240      	movs	r2, #64	; 0x40
 80156f4:	2100      	movs	r1, #0
 80156f6:	4806      	ldr	r0, [pc, #24]	; (8015710 <USBD_LL_Init+0x94>)
 80156f8:	f7f7 fda8 	bl	800d24c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80156fc:	2280      	movs	r2, #128	; 0x80
 80156fe:	2101      	movs	r1, #1
 8015700:	4803      	ldr	r0, [pc, #12]	; (8015710 <USBD_LL_Init+0x94>)
 8015702:	f7f7 fda3 	bl	800d24c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015706:	2300      	movs	r3, #0
}
 8015708:	4618      	mov	r0, r3
 801570a:	3708      	adds	r7, #8
 801570c:	46bd      	mov	sp, r7
 801570e:	bd80      	pop	{r7, pc}
 8015710:	20007334 	.word	0x20007334

08015714 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015714:	b580      	push	{r7, lr}
 8015716:	b084      	sub	sp, #16
 8015718:	af00      	add	r7, sp, #0
 801571a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801571c:	2300      	movs	r3, #0
 801571e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015720:	2300      	movs	r3, #0
 8015722:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801572a:	4618      	mov	r0, r3
 801572c:	f7f6 fd8b 	bl	800c246 <HAL_PCD_Start>
 8015730:	4603      	mov	r3, r0
 8015732:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015734:	7bfb      	ldrb	r3, [r7, #15]
 8015736:	4618      	mov	r0, r3
 8015738:	f000 f92a 	bl	8015990 <USBD_Get_USB_Status>
 801573c:	4603      	mov	r3, r0
 801573e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015740:	7bbb      	ldrb	r3, [r7, #14]
}
 8015742:	4618      	mov	r0, r3
 8015744:	3710      	adds	r7, #16
 8015746:	46bd      	mov	sp, r7
 8015748:	bd80      	pop	{r7, pc}

0801574a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801574a:	b580      	push	{r7, lr}
 801574c:	b084      	sub	sp, #16
 801574e:	af00      	add	r7, sp, #0
 8015750:	6078      	str	r0, [r7, #4]
 8015752:	4608      	mov	r0, r1
 8015754:	4611      	mov	r1, r2
 8015756:	461a      	mov	r2, r3
 8015758:	4603      	mov	r3, r0
 801575a:	70fb      	strb	r3, [r7, #3]
 801575c:	460b      	mov	r3, r1
 801575e:	70bb      	strb	r3, [r7, #2]
 8015760:	4613      	mov	r3, r2
 8015762:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015764:	2300      	movs	r3, #0
 8015766:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015768:	2300      	movs	r3, #0
 801576a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015772:	78bb      	ldrb	r3, [r7, #2]
 8015774:	883a      	ldrh	r2, [r7, #0]
 8015776:	78f9      	ldrb	r1, [r7, #3]
 8015778:	f7f7 f96f 	bl	800ca5a <HAL_PCD_EP_Open>
 801577c:	4603      	mov	r3, r0
 801577e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015780:	7bfb      	ldrb	r3, [r7, #15]
 8015782:	4618      	mov	r0, r3
 8015784:	f000 f904 	bl	8015990 <USBD_Get_USB_Status>
 8015788:	4603      	mov	r3, r0
 801578a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801578c:	7bbb      	ldrb	r3, [r7, #14]
}
 801578e:	4618      	mov	r0, r3
 8015790:	3710      	adds	r7, #16
 8015792:	46bd      	mov	sp, r7
 8015794:	bd80      	pop	{r7, pc}

08015796 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015796:	b580      	push	{r7, lr}
 8015798:	b084      	sub	sp, #16
 801579a:	af00      	add	r7, sp, #0
 801579c:	6078      	str	r0, [r7, #4]
 801579e:	460b      	mov	r3, r1
 80157a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80157a2:	2300      	movs	r3, #0
 80157a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157a6:	2300      	movs	r3, #0
 80157a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80157b0:	78fa      	ldrb	r2, [r7, #3]
 80157b2:	4611      	mov	r1, r2
 80157b4:	4618      	mov	r0, r3
 80157b6:	f7f7 f9b8 	bl	800cb2a <HAL_PCD_EP_Close>
 80157ba:	4603      	mov	r3, r0
 80157bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80157be:	7bfb      	ldrb	r3, [r7, #15]
 80157c0:	4618      	mov	r0, r3
 80157c2:	f000 f8e5 	bl	8015990 <USBD_Get_USB_Status>
 80157c6:	4603      	mov	r3, r0
 80157c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80157ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80157cc:	4618      	mov	r0, r3
 80157ce:	3710      	adds	r7, #16
 80157d0:	46bd      	mov	sp, r7
 80157d2:	bd80      	pop	{r7, pc}

080157d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80157d4:	b580      	push	{r7, lr}
 80157d6:	b084      	sub	sp, #16
 80157d8:	af00      	add	r7, sp, #0
 80157da:	6078      	str	r0, [r7, #4]
 80157dc:	460b      	mov	r3, r1
 80157de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80157e0:	2300      	movs	r3, #0
 80157e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157e4:	2300      	movs	r3, #0
 80157e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80157ee:	78fa      	ldrb	r2, [r7, #3]
 80157f0:	4611      	mov	r1, r2
 80157f2:	4618      	mov	r0, r3
 80157f4:	f7f7 fa90 	bl	800cd18 <HAL_PCD_EP_SetStall>
 80157f8:	4603      	mov	r3, r0
 80157fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80157fc:	7bfb      	ldrb	r3, [r7, #15]
 80157fe:	4618      	mov	r0, r3
 8015800:	f000 f8c6 	bl	8015990 <USBD_Get_USB_Status>
 8015804:	4603      	mov	r3, r0
 8015806:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015808:	7bbb      	ldrb	r3, [r7, #14]
}
 801580a:	4618      	mov	r0, r3
 801580c:	3710      	adds	r7, #16
 801580e:	46bd      	mov	sp, r7
 8015810:	bd80      	pop	{r7, pc}

08015812 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015812:	b580      	push	{r7, lr}
 8015814:	b084      	sub	sp, #16
 8015816:	af00      	add	r7, sp, #0
 8015818:	6078      	str	r0, [r7, #4]
 801581a:	460b      	mov	r3, r1
 801581c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801581e:	2300      	movs	r3, #0
 8015820:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015822:	2300      	movs	r3, #0
 8015824:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801582c:	78fa      	ldrb	r2, [r7, #3]
 801582e:	4611      	mov	r1, r2
 8015830:	4618      	mov	r0, r3
 8015832:	f7f7 fad5 	bl	800cde0 <HAL_PCD_EP_ClrStall>
 8015836:	4603      	mov	r3, r0
 8015838:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801583a:	7bfb      	ldrb	r3, [r7, #15]
 801583c:	4618      	mov	r0, r3
 801583e:	f000 f8a7 	bl	8015990 <USBD_Get_USB_Status>
 8015842:	4603      	mov	r3, r0
 8015844:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015846:	7bbb      	ldrb	r3, [r7, #14]
}
 8015848:	4618      	mov	r0, r3
 801584a:	3710      	adds	r7, #16
 801584c:	46bd      	mov	sp, r7
 801584e:	bd80      	pop	{r7, pc}

08015850 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015850:	b480      	push	{r7}
 8015852:	b085      	sub	sp, #20
 8015854:	af00      	add	r7, sp, #0
 8015856:	6078      	str	r0, [r7, #4]
 8015858:	460b      	mov	r3, r1
 801585a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015862:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015864:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015868:	2b00      	cmp	r3, #0
 801586a:	da0b      	bge.n	8015884 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801586c:	78fb      	ldrb	r3, [r7, #3]
 801586e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015872:	68f9      	ldr	r1, [r7, #12]
 8015874:	4613      	mov	r3, r2
 8015876:	00db      	lsls	r3, r3, #3
 8015878:	1a9b      	subs	r3, r3, r2
 801587a:	009b      	lsls	r3, r3, #2
 801587c:	440b      	add	r3, r1
 801587e:	333e      	adds	r3, #62	; 0x3e
 8015880:	781b      	ldrb	r3, [r3, #0]
 8015882:	e00b      	b.n	801589c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015884:	78fb      	ldrb	r3, [r7, #3]
 8015886:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801588a:	68f9      	ldr	r1, [r7, #12]
 801588c:	4613      	mov	r3, r2
 801588e:	00db      	lsls	r3, r3, #3
 8015890:	1a9b      	subs	r3, r3, r2
 8015892:	009b      	lsls	r3, r3, #2
 8015894:	440b      	add	r3, r1
 8015896:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801589a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801589c:	4618      	mov	r0, r3
 801589e:	3714      	adds	r7, #20
 80158a0:	46bd      	mov	sp, r7
 80158a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a6:	4770      	bx	lr

080158a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80158a8:	b580      	push	{r7, lr}
 80158aa:	b084      	sub	sp, #16
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	6078      	str	r0, [r7, #4]
 80158b0:	460b      	mov	r3, r1
 80158b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80158b4:	2300      	movs	r3, #0
 80158b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80158b8:	2300      	movs	r3, #0
 80158ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80158c2:	78fa      	ldrb	r2, [r7, #3]
 80158c4:	4611      	mov	r1, r2
 80158c6:	4618      	mov	r0, r3
 80158c8:	f7f7 f8a2 	bl	800ca10 <HAL_PCD_SetAddress>
 80158cc:	4603      	mov	r3, r0
 80158ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80158d0:	7bfb      	ldrb	r3, [r7, #15]
 80158d2:	4618      	mov	r0, r3
 80158d4:	f000 f85c 	bl	8015990 <USBD_Get_USB_Status>
 80158d8:	4603      	mov	r3, r0
 80158da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80158dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80158de:	4618      	mov	r0, r3
 80158e0:	3710      	adds	r7, #16
 80158e2:	46bd      	mov	sp, r7
 80158e4:	bd80      	pop	{r7, pc}

080158e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80158e6:	b580      	push	{r7, lr}
 80158e8:	b086      	sub	sp, #24
 80158ea:	af00      	add	r7, sp, #0
 80158ec:	60f8      	str	r0, [r7, #12]
 80158ee:	607a      	str	r2, [r7, #4]
 80158f0:	603b      	str	r3, [r7, #0]
 80158f2:	460b      	mov	r3, r1
 80158f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80158f6:	2300      	movs	r3, #0
 80158f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80158fa:	2300      	movs	r3, #0
 80158fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015904:	7af9      	ldrb	r1, [r7, #11]
 8015906:	683b      	ldr	r3, [r7, #0]
 8015908:	687a      	ldr	r2, [r7, #4]
 801590a:	f7f7 f9bb 	bl	800cc84 <HAL_PCD_EP_Transmit>
 801590e:	4603      	mov	r3, r0
 8015910:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015912:	7dfb      	ldrb	r3, [r7, #23]
 8015914:	4618      	mov	r0, r3
 8015916:	f000 f83b 	bl	8015990 <USBD_Get_USB_Status>
 801591a:	4603      	mov	r3, r0
 801591c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801591e:	7dbb      	ldrb	r3, [r7, #22]
}
 8015920:	4618      	mov	r0, r3
 8015922:	3718      	adds	r7, #24
 8015924:	46bd      	mov	sp, r7
 8015926:	bd80      	pop	{r7, pc}

08015928 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015928:	b580      	push	{r7, lr}
 801592a:	b086      	sub	sp, #24
 801592c:	af00      	add	r7, sp, #0
 801592e:	60f8      	str	r0, [r7, #12]
 8015930:	607a      	str	r2, [r7, #4]
 8015932:	603b      	str	r3, [r7, #0]
 8015934:	460b      	mov	r3, r1
 8015936:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015938:	2300      	movs	r3, #0
 801593a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801593c:	2300      	movs	r3, #0
 801593e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015940:	68fb      	ldr	r3, [r7, #12]
 8015942:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015946:	7af9      	ldrb	r1, [r7, #11]
 8015948:	683b      	ldr	r3, [r7, #0]
 801594a:	687a      	ldr	r2, [r7, #4]
 801594c:	f7f7 f937 	bl	800cbbe <HAL_PCD_EP_Receive>
 8015950:	4603      	mov	r3, r0
 8015952:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015954:	7dfb      	ldrb	r3, [r7, #23]
 8015956:	4618      	mov	r0, r3
 8015958:	f000 f81a 	bl	8015990 <USBD_Get_USB_Status>
 801595c:	4603      	mov	r3, r0
 801595e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015960:	7dbb      	ldrb	r3, [r7, #22]
}
 8015962:	4618      	mov	r0, r3
 8015964:	3718      	adds	r7, #24
 8015966:	46bd      	mov	sp, r7
 8015968:	bd80      	pop	{r7, pc}

0801596a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801596a:	b580      	push	{r7, lr}
 801596c:	b082      	sub	sp, #8
 801596e:	af00      	add	r7, sp, #0
 8015970:	6078      	str	r0, [r7, #4]
 8015972:	460b      	mov	r3, r1
 8015974:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801597c:	78fa      	ldrb	r2, [r7, #3]
 801597e:	4611      	mov	r1, r2
 8015980:	4618      	mov	r0, r3
 8015982:	f7f7 f967 	bl	800cc54 <HAL_PCD_EP_GetRxCount>
 8015986:	4603      	mov	r3, r0
}
 8015988:	4618      	mov	r0, r3
 801598a:	3708      	adds	r7, #8
 801598c:	46bd      	mov	sp, r7
 801598e:	bd80      	pop	{r7, pc}

08015990 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015990:	b480      	push	{r7}
 8015992:	b085      	sub	sp, #20
 8015994:	af00      	add	r7, sp, #0
 8015996:	4603      	mov	r3, r0
 8015998:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801599a:	2300      	movs	r3, #0
 801599c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801599e:	79fb      	ldrb	r3, [r7, #7]
 80159a0:	2b03      	cmp	r3, #3
 80159a2:	d817      	bhi.n	80159d4 <USBD_Get_USB_Status+0x44>
 80159a4:	a201      	add	r2, pc, #4	; (adr r2, 80159ac <USBD_Get_USB_Status+0x1c>)
 80159a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159aa:	bf00      	nop
 80159ac:	080159bd 	.word	0x080159bd
 80159b0:	080159c3 	.word	0x080159c3
 80159b4:	080159c9 	.word	0x080159c9
 80159b8:	080159cf 	.word	0x080159cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80159bc:	2300      	movs	r3, #0
 80159be:	73fb      	strb	r3, [r7, #15]
    break;
 80159c0:	e00b      	b.n	80159da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80159c2:	2303      	movs	r3, #3
 80159c4:	73fb      	strb	r3, [r7, #15]
    break;
 80159c6:	e008      	b.n	80159da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80159c8:	2301      	movs	r3, #1
 80159ca:	73fb      	strb	r3, [r7, #15]
    break;
 80159cc:	e005      	b.n	80159da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80159ce:	2303      	movs	r3, #3
 80159d0:	73fb      	strb	r3, [r7, #15]
    break;
 80159d2:	e002      	b.n	80159da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80159d4:	2303      	movs	r3, #3
 80159d6:	73fb      	strb	r3, [r7, #15]
    break;
 80159d8:	bf00      	nop
  }
  return usb_status;
 80159da:	7bfb      	ldrb	r3, [r7, #15]
}
 80159dc:	4618      	mov	r0, r3
 80159de:	3714      	adds	r7, #20
 80159e0:	46bd      	mov	sp, r7
 80159e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e6:	4770      	bx	lr

080159e8 <__errno>:
 80159e8:	4b01      	ldr	r3, [pc, #4]	; (80159f0 <__errno+0x8>)
 80159ea:	6818      	ldr	r0, [r3, #0]
 80159ec:	4770      	bx	lr
 80159ee:	bf00      	nop
 80159f0:	200009ac 	.word	0x200009ac

080159f4 <__libc_init_array>:
 80159f4:	b570      	push	{r4, r5, r6, lr}
 80159f6:	4e0d      	ldr	r6, [pc, #52]	; (8015a2c <__libc_init_array+0x38>)
 80159f8:	4c0d      	ldr	r4, [pc, #52]	; (8015a30 <__libc_init_array+0x3c>)
 80159fa:	1ba4      	subs	r4, r4, r6
 80159fc:	10a4      	asrs	r4, r4, #2
 80159fe:	2500      	movs	r5, #0
 8015a00:	42a5      	cmp	r5, r4
 8015a02:	d109      	bne.n	8015a18 <__libc_init_array+0x24>
 8015a04:	4e0b      	ldr	r6, [pc, #44]	; (8015a34 <__libc_init_array+0x40>)
 8015a06:	4c0c      	ldr	r4, [pc, #48]	; (8015a38 <__libc_init_array+0x44>)
 8015a08:	f005 fa8c 	bl	801af24 <_init>
 8015a0c:	1ba4      	subs	r4, r4, r6
 8015a0e:	10a4      	asrs	r4, r4, #2
 8015a10:	2500      	movs	r5, #0
 8015a12:	42a5      	cmp	r5, r4
 8015a14:	d105      	bne.n	8015a22 <__libc_init_array+0x2e>
 8015a16:	bd70      	pop	{r4, r5, r6, pc}
 8015a18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015a1c:	4798      	blx	r3
 8015a1e:	3501      	adds	r5, #1
 8015a20:	e7ee      	b.n	8015a00 <__libc_init_array+0xc>
 8015a22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015a26:	4798      	blx	r3
 8015a28:	3501      	adds	r5, #1
 8015a2a:	e7f2      	b.n	8015a12 <__libc_init_array+0x1e>
 8015a2c:	0801b6f8 	.word	0x0801b6f8
 8015a30:	0801b6f8 	.word	0x0801b6f8
 8015a34:	0801b6f8 	.word	0x0801b6f8
 8015a38:	0801b6fc 	.word	0x0801b6fc

08015a3c <malloc>:
 8015a3c:	4b02      	ldr	r3, [pc, #8]	; (8015a48 <malloc+0xc>)
 8015a3e:	4601      	mov	r1, r0
 8015a40:	6818      	ldr	r0, [r3, #0]
 8015a42:	f000 b885 	b.w	8015b50 <_malloc_r>
 8015a46:	bf00      	nop
 8015a48:	200009ac 	.word	0x200009ac

08015a4c <free>:
 8015a4c:	4b02      	ldr	r3, [pc, #8]	; (8015a58 <free+0xc>)
 8015a4e:	4601      	mov	r1, r0
 8015a50:	6818      	ldr	r0, [r3, #0]
 8015a52:	f000 b82f 	b.w	8015ab4 <_free_r>
 8015a56:	bf00      	nop
 8015a58:	200009ac 	.word	0x200009ac

08015a5c <memcpy>:
 8015a5c:	b510      	push	{r4, lr}
 8015a5e:	1e43      	subs	r3, r0, #1
 8015a60:	440a      	add	r2, r1
 8015a62:	4291      	cmp	r1, r2
 8015a64:	d100      	bne.n	8015a68 <memcpy+0xc>
 8015a66:	bd10      	pop	{r4, pc}
 8015a68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015a6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015a70:	e7f7      	b.n	8015a62 <memcpy+0x6>

08015a72 <memmove>:
 8015a72:	4288      	cmp	r0, r1
 8015a74:	b510      	push	{r4, lr}
 8015a76:	eb01 0302 	add.w	r3, r1, r2
 8015a7a:	d807      	bhi.n	8015a8c <memmove+0x1a>
 8015a7c:	1e42      	subs	r2, r0, #1
 8015a7e:	4299      	cmp	r1, r3
 8015a80:	d00a      	beq.n	8015a98 <memmove+0x26>
 8015a82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015a86:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015a8a:	e7f8      	b.n	8015a7e <memmove+0xc>
 8015a8c:	4283      	cmp	r3, r0
 8015a8e:	d9f5      	bls.n	8015a7c <memmove+0xa>
 8015a90:	1881      	adds	r1, r0, r2
 8015a92:	1ad2      	subs	r2, r2, r3
 8015a94:	42d3      	cmn	r3, r2
 8015a96:	d100      	bne.n	8015a9a <memmove+0x28>
 8015a98:	bd10      	pop	{r4, pc}
 8015a9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015a9e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015aa2:	e7f7      	b.n	8015a94 <memmove+0x22>

08015aa4 <memset>:
 8015aa4:	4402      	add	r2, r0
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	4293      	cmp	r3, r2
 8015aaa:	d100      	bne.n	8015aae <memset+0xa>
 8015aac:	4770      	bx	lr
 8015aae:	f803 1b01 	strb.w	r1, [r3], #1
 8015ab2:	e7f9      	b.n	8015aa8 <memset+0x4>

08015ab4 <_free_r>:
 8015ab4:	b538      	push	{r3, r4, r5, lr}
 8015ab6:	4605      	mov	r5, r0
 8015ab8:	2900      	cmp	r1, #0
 8015aba:	d045      	beq.n	8015b48 <_free_r+0x94>
 8015abc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ac0:	1f0c      	subs	r4, r1, #4
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	bfb8      	it	lt
 8015ac6:	18e4      	addlt	r4, r4, r3
 8015ac8:	f002 ff86 	bl	80189d8 <__malloc_lock>
 8015acc:	4a1f      	ldr	r2, [pc, #124]	; (8015b4c <_free_r+0x98>)
 8015ace:	6813      	ldr	r3, [r2, #0]
 8015ad0:	4610      	mov	r0, r2
 8015ad2:	b933      	cbnz	r3, 8015ae2 <_free_r+0x2e>
 8015ad4:	6063      	str	r3, [r4, #4]
 8015ad6:	6014      	str	r4, [r2, #0]
 8015ad8:	4628      	mov	r0, r5
 8015ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ade:	f002 bf7c 	b.w	80189da <__malloc_unlock>
 8015ae2:	42a3      	cmp	r3, r4
 8015ae4:	d90c      	bls.n	8015b00 <_free_r+0x4c>
 8015ae6:	6821      	ldr	r1, [r4, #0]
 8015ae8:	1862      	adds	r2, r4, r1
 8015aea:	4293      	cmp	r3, r2
 8015aec:	bf04      	itt	eq
 8015aee:	681a      	ldreq	r2, [r3, #0]
 8015af0:	685b      	ldreq	r3, [r3, #4]
 8015af2:	6063      	str	r3, [r4, #4]
 8015af4:	bf04      	itt	eq
 8015af6:	1852      	addeq	r2, r2, r1
 8015af8:	6022      	streq	r2, [r4, #0]
 8015afa:	6004      	str	r4, [r0, #0]
 8015afc:	e7ec      	b.n	8015ad8 <_free_r+0x24>
 8015afe:	4613      	mov	r3, r2
 8015b00:	685a      	ldr	r2, [r3, #4]
 8015b02:	b10a      	cbz	r2, 8015b08 <_free_r+0x54>
 8015b04:	42a2      	cmp	r2, r4
 8015b06:	d9fa      	bls.n	8015afe <_free_r+0x4a>
 8015b08:	6819      	ldr	r1, [r3, #0]
 8015b0a:	1858      	adds	r0, r3, r1
 8015b0c:	42a0      	cmp	r0, r4
 8015b0e:	d10b      	bne.n	8015b28 <_free_r+0x74>
 8015b10:	6820      	ldr	r0, [r4, #0]
 8015b12:	4401      	add	r1, r0
 8015b14:	1858      	adds	r0, r3, r1
 8015b16:	4282      	cmp	r2, r0
 8015b18:	6019      	str	r1, [r3, #0]
 8015b1a:	d1dd      	bne.n	8015ad8 <_free_r+0x24>
 8015b1c:	6810      	ldr	r0, [r2, #0]
 8015b1e:	6852      	ldr	r2, [r2, #4]
 8015b20:	605a      	str	r2, [r3, #4]
 8015b22:	4401      	add	r1, r0
 8015b24:	6019      	str	r1, [r3, #0]
 8015b26:	e7d7      	b.n	8015ad8 <_free_r+0x24>
 8015b28:	d902      	bls.n	8015b30 <_free_r+0x7c>
 8015b2a:	230c      	movs	r3, #12
 8015b2c:	602b      	str	r3, [r5, #0]
 8015b2e:	e7d3      	b.n	8015ad8 <_free_r+0x24>
 8015b30:	6820      	ldr	r0, [r4, #0]
 8015b32:	1821      	adds	r1, r4, r0
 8015b34:	428a      	cmp	r2, r1
 8015b36:	bf04      	itt	eq
 8015b38:	6811      	ldreq	r1, [r2, #0]
 8015b3a:	6852      	ldreq	r2, [r2, #4]
 8015b3c:	6062      	str	r2, [r4, #4]
 8015b3e:	bf04      	itt	eq
 8015b40:	1809      	addeq	r1, r1, r0
 8015b42:	6021      	streq	r1, [r4, #0]
 8015b44:	605c      	str	r4, [r3, #4]
 8015b46:	e7c7      	b.n	8015ad8 <_free_r+0x24>
 8015b48:	bd38      	pop	{r3, r4, r5, pc}
 8015b4a:	bf00      	nop
 8015b4c:	20004d58 	.word	0x20004d58

08015b50 <_malloc_r>:
 8015b50:	b570      	push	{r4, r5, r6, lr}
 8015b52:	1ccd      	adds	r5, r1, #3
 8015b54:	f025 0503 	bic.w	r5, r5, #3
 8015b58:	3508      	adds	r5, #8
 8015b5a:	2d0c      	cmp	r5, #12
 8015b5c:	bf38      	it	cc
 8015b5e:	250c      	movcc	r5, #12
 8015b60:	2d00      	cmp	r5, #0
 8015b62:	4606      	mov	r6, r0
 8015b64:	db01      	blt.n	8015b6a <_malloc_r+0x1a>
 8015b66:	42a9      	cmp	r1, r5
 8015b68:	d903      	bls.n	8015b72 <_malloc_r+0x22>
 8015b6a:	230c      	movs	r3, #12
 8015b6c:	6033      	str	r3, [r6, #0]
 8015b6e:	2000      	movs	r0, #0
 8015b70:	bd70      	pop	{r4, r5, r6, pc}
 8015b72:	f002 ff31 	bl	80189d8 <__malloc_lock>
 8015b76:	4a21      	ldr	r2, [pc, #132]	; (8015bfc <_malloc_r+0xac>)
 8015b78:	6814      	ldr	r4, [r2, #0]
 8015b7a:	4621      	mov	r1, r4
 8015b7c:	b991      	cbnz	r1, 8015ba4 <_malloc_r+0x54>
 8015b7e:	4c20      	ldr	r4, [pc, #128]	; (8015c00 <_malloc_r+0xb0>)
 8015b80:	6823      	ldr	r3, [r4, #0]
 8015b82:	b91b      	cbnz	r3, 8015b8c <_malloc_r+0x3c>
 8015b84:	4630      	mov	r0, r6
 8015b86:	f000 fe7b 	bl	8016880 <_sbrk_r>
 8015b8a:	6020      	str	r0, [r4, #0]
 8015b8c:	4629      	mov	r1, r5
 8015b8e:	4630      	mov	r0, r6
 8015b90:	f000 fe76 	bl	8016880 <_sbrk_r>
 8015b94:	1c43      	adds	r3, r0, #1
 8015b96:	d124      	bne.n	8015be2 <_malloc_r+0x92>
 8015b98:	230c      	movs	r3, #12
 8015b9a:	6033      	str	r3, [r6, #0]
 8015b9c:	4630      	mov	r0, r6
 8015b9e:	f002 ff1c 	bl	80189da <__malloc_unlock>
 8015ba2:	e7e4      	b.n	8015b6e <_malloc_r+0x1e>
 8015ba4:	680b      	ldr	r3, [r1, #0]
 8015ba6:	1b5b      	subs	r3, r3, r5
 8015ba8:	d418      	bmi.n	8015bdc <_malloc_r+0x8c>
 8015baa:	2b0b      	cmp	r3, #11
 8015bac:	d90f      	bls.n	8015bce <_malloc_r+0x7e>
 8015bae:	600b      	str	r3, [r1, #0]
 8015bb0:	50cd      	str	r5, [r1, r3]
 8015bb2:	18cc      	adds	r4, r1, r3
 8015bb4:	4630      	mov	r0, r6
 8015bb6:	f002 ff10 	bl	80189da <__malloc_unlock>
 8015bba:	f104 000b 	add.w	r0, r4, #11
 8015bbe:	1d23      	adds	r3, r4, #4
 8015bc0:	f020 0007 	bic.w	r0, r0, #7
 8015bc4:	1ac3      	subs	r3, r0, r3
 8015bc6:	d0d3      	beq.n	8015b70 <_malloc_r+0x20>
 8015bc8:	425a      	negs	r2, r3
 8015bca:	50e2      	str	r2, [r4, r3]
 8015bcc:	e7d0      	b.n	8015b70 <_malloc_r+0x20>
 8015bce:	428c      	cmp	r4, r1
 8015bd0:	684b      	ldr	r3, [r1, #4]
 8015bd2:	bf16      	itet	ne
 8015bd4:	6063      	strne	r3, [r4, #4]
 8015bd6:	6013      	streq	r3, [r2, #0]
 8015bd8:	460c      	movne	r4, r1
 8015bda:	e7eb      	b.n	8015bb4 <_malloc_r+0x64>
 8015bdc:	460c      	mov	r4, r1
 8015bde:	6849      	ldr	r1, [r1, #4]
 8015be0:	e7cc      	b.n	8015b7c <_malloc_r+0x2c>
 8015be2:	1cc4      	adds	r4, r0, #3
 8015be4:	f024 0403 	bic.w	r4, r4, #3
 8015be8:	42a0      	cmp	r0, r4
 8015bea:	d005      	beq.n	8015bf8 <_malloc_r+0xa8>
 8015bec:	1a21      	subs	r1, r4, r0
 8015bee:	4630      	mov	r0, r6
 8015bf0:	f000 fe46 	bl	8016880 <_sbrk_r>
 8015bf4:	3001      	adds	r0, #1
 8015bf6:	d0cf      	beq.n	8015b98 <_malloc_r+0x48>
 8015bf8:	6025      	str	r5, [r4, #0]
 8015bfa:	e7db      	b.n	8015bb4 <_malloc_r+0x64>
 8015bfc:	20004d58 	.word	0x20004d58
 8015c00:	20004d5c 	.word	0x20004d5c

08015c04 <__cvt>:
 8015c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015c08:	ec55 4b10 	vmov	r4, r5, d0
 8015c0c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015c0e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015c12:	2d00      	cmp	r5, #0
 8015c14:	460e      	mov	r6, r1
 8015c16:	4691      	mov	r9, r2
 8015c18:	4619      	mov	r1, r3
 8015c1a:	bfb8      	it	lt
 8015c1c:	4622      	movlt	r2, r4
 8015c1e:	462b      	mov	r3, r5
 8015c20:	f027 0720 	bic.w	r7, r7, #32
 8015c24:	bfbb      	ittet	lt
 8015c26:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015c2a:	461d      	movlt	r5, r3
 8015c2c:	2300      	movge	r3, #0
 8015c2e:	232d      	movlt	r3, #45	; 0x2d
 8015c30:	bfb8      	it	lt
 8015c32:	4614      	movlt	r4, r2
 8015c34:	2f46      	cmp	r7, #70	; 0x46
 8015c36:	700b      	strb	r3, [r1, #0]
 8015c38:	d004      	beq.n	8015c44 <__cvt+0x40>
 8015c3a:	2f45      	cmp	r7, #69	; 0x45
 8015c3c:	d100      	bne.n	8015c40 <__cvt+0x3c>
 8015c3e:	3601      	adds	r6, #1
 8015c40:	2102      	movs	r1, #2
 8015c42:	e000      	b.n	8015c46 <__cvt+0x42>
 8015c44:	2103      	movs	r1, #3
 8015c46:	ab03      	add	r3, sp, #12
 8015c48:	9301      	str	r3, [sp, #4]
 8015c4a:	ab02      	add	r3, sp, #8
 8015c4c:	9300      	str	r3, [sp, #0]
 8015c4e:	4632      	mov	r2, r6
 8015c50:	4653      	mov	r3, sl
 8015c52:	ec45 4b10 	vmov	d0, r4, r5
 8015c56:	f001 fdbb 	bl	80177d0 <_dtoa_r>
 8015c5a:	2f47      	cmp	r7, #71	; 0x47
 8015c5c:	4680      	mov	r8, r0
 8015c5e:	d102      	bne.n	8015c66 <__cvt+0x62>
 8015c60:	f019 0f01 	tst.w	r9, #1
 8015c64:	d026      	beq.n	8015cb4 <__cvt+0xb0>
 8015c66:	2f46      	cmp	r7, #70	; 0x46
 8015c68:	eb08 0906 	add.w	r9, r8, r6
 8015c6c:	d111      	bne.n	8015c92 <__cvt+0x8e>
 8015c6e:	f898 3000 	ldrb.w	r3, [r8]
 8015c72:	2b30      	cmp	r3, #48	; 0x30
 8015c74:	d10a      	bne.n	8015c8c <__cvt+0x88>
 8015c76:	2200      	movs	r2, #0
 8015c78:	2300      	movs	r3, #0
 8015c7a:	4620      	mov	r0, r4
 8015c7c:	4629      	mov	r1, r5
 8015c7e:	f7ea ff23 	bl	8000ac8 <__aeabi_dcmpeq>
 8015c82:	b918      	cbnz	r0, 8015c8c <__cvt+0x88>
 8015c84:	f1c6 0601 	rsb	r6, r6, #1
 8015c88:	f8ca 6000 	str.w	r6, [sl]
 8015c8c:	f8da 3000 	ldr.w	r3, [sl]
 8015c90:	4499      	add	r9, r3
 8015c92:	2200      	movs	r2, #0
 8015c94:	2300      	movs	r3, #0
 8015c96:	4620      	mov	r0, r4
 8015c98:	4629      	mov	r1, r5
 8015c9a:	f7ea ff15 	bl	8000ac8 <__aeabi_dcmpeq>
 8015c9e:	b938      	cbnz	r0, 8015cb0 <__cvt+0xac>
 8015ca0:	2230      	movs	r2, #48	; 0x30
 8015ca2:	9b03      	ldr	r3, [sp, #12]
 8015ca4:	454b      	cmp	r3, r9
 8015ca6:	d205      	bcs.n	8015cb4 <__cvt+0xb0>
 8015ca8:	1c59      	adds	r1, r3, #1
 8015caa:	9103      	str	r1, [sp, #12]
 8015cac:	701a      	strb	r2, [r3, #0]
 8015cae:	e7f8      	b.n	8015ca2 <__cvt+0x9e>
 8015cb0:	f8cd 900c 	str.w	r9, [sp, #12]
 8015cb4:	9b03      	ldr	r3, [sp, #12]
 8015cb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015cb8:	eba3 0308 	sub.w	r3, r3, r8
 8015cbc:	4640      	mov	r0, r8
 8015cbe:	6013      	str	r3, [r2, #0]
 8015cc0:	b004      	add	sp, #16
 8015cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015cc6 <__exponent>:
 8015cc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015cc8:	2900      	cmp	r1, #0
 8015cca:	4604      	mov	r4, r0
 8015ccc:	bfba      	itte	lt
 8015cce:	4249      	neglt	r1, r1
 8015cd0:	232d      	movlt	r3, #45	; 0x2d
 8015cd2:	232b      	movge	r3, #43	; 0x2b
 8015cd4:	2909      	cmp	r1, #9
 8015cd6:	f804 2b02 	strb.w	r2, [r4], #2
 8015cda:	7043      	strb	r3, [r0, #1]
 8015cdc:	dd20      	ble.n	8015d20 <__exponent+0x5a>
 8015cde:	f10d 0307 	add.w	r3, sp, #7
 8015ce2:	461f      	mov	r7, r3
 8015ce4:	260a      	movs	r6, #10
 8015ce6:	fb91 f5f6 	sdiv	r5, r1, r6
 8015cea:	fb06 1115 	mls	r1, r6, r5, r1
 8015cee:	3130      	adds	r1, #48	; 0x30
 8015cf0:	2d09      	cmp	r5, #9
 8015cf2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015cf6:	f103 32ff 	add.w	r2, r3, #4294967295
 8015cfa:	4629      	mov	r1, r5
 8015cfc:	dc09      	bgt.n	8015d12 <__exponent+0x4c>
 8015cfe:	3130      	adds	r1, #48	; 0x30
 8015d00:	3b02      	subs	r3, #2
 8015d02:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015d06:	42bb      	cmp	r3, r7
 8015d08:	4622      	mov	r2, r4
 8015d0a:	d304      	bcc.n	8015d16 <__exponent+0x50>
 8015d0c:	1a10      	subs	r0, r2, r0
 8015d0e:	b003      	add	sp, #12
 8015d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d12:	4613      	mov	r3, r2
 8015d14:	e7e7      	b.n	8015ce6 <__exponent+0x20>
 8015d16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015d1a:	f804 2b01 	strb.w	r2, [r4], #1
 8015d1e:	e7f2      	b.n	8015d06 <__exponent+0x40>
 8015d20:	2330      	movs	r3, #48	; 0x30
 8015d22:	4419      	add	r1, r3
 8015d24:	7083      	strb	r3, [r0, #2]
 8015d26:	1d02      	adds	r2, r0, #4
 8015d28:	70c1      	strb	r1, [r0, #3]
 8015d2a:	e7ef      	b.n	8015d0c <__exponent+0x46>

08015d2c <_printf_float>:
 8015d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d30:	b08d      	sub	sp, #52	; 0x34
 8015d32:	460c      	mov	r4, r1
 8015d34:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015d38:	4616      	mov	r6, r2
 8015d3a:	461f      	mov	r7, r3
 8015d3c:	4605      	mov	r5, r0
 8015d3e:	f002 fe2b 	bl	8018998 <_localeconv_r>
 8015d42:	6803      	ldr	r3, [r0, #0]
 8015d44:	9304      	str	r3, [sp, #16]
 8015d46:	4618      	mov	r0, r3
 8015d48:	f7ea fa42 	bl	80001d0 <strlen>
 8015d4c:	2300      	movs	r3, #0
 8015d4e:	930a      	str	r3, [sp, #40]	; 0x28
 8015d50:	f8d8 3000 	ldr.w	r3, [r8]
 8015d54:	9005      	str	r0, [sp, #20]
 8015d56:	3307      	adds	r3, #7
 8015d58:	f023 0307 	bic.w	r3, r3, #7
 8015d5c:	f103 0208 	add.w	r2, r3, #8
 8015d60:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015d64:	f8d4 b000 	ldr.w	fp, [r4]
 8015d68:	f8c8 2000 	str.w	r2, [r8]
 8015d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d70:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015d74:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015d78:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015d7c:	9307      	str	r3, [sp, #28]
 8015d7e:	f8cd 8018 	str.w	r8, [sp, #24]
 8015d82:	f04f 32ff 	mov.w	r2, #4294967295
 8015d86:	4ba7      	ldr	r3, [pc, #668]	; (8016024 <_printf_float+0x2f8>)
 8015d88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015d8c:	f7ea fece 	bl	8000b2c <__aeabi_dcmpun>
 8015d90:	bb70      	cbnz	r0, 8015df0 <_printf_float+0xc4>
 8015d92:	f04f 32ff 	mov.w	r2, #4294967295
 8015d96:	4ba3      	ldr	r3, [pc, #652]	; (8016024 <_printf_float+0x2f8>)
 8015d98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015d9c:	f7ea fea8 	bl	8000af0 <__aeabi_dcmple>
 8015da0:	bb30      	cbnz	r0, 8015df0 <_printf_float+0xc4>
 8015da2:	2200      	movs	r2, #0
 8015da4:	2300      	movs	r3, #0
 8015da6:	4640      	mov	r0, r8
 8015da8:	4649      	mov	r1, r9
 8015daa:	f7ea fe97 	bl	8000adc <__aeabi_dcmplt>
 8015dae:	b110      	cbz	r0, 8015db6 <_printf_float+0x8a>
 8015db0:	232d      	movs	r3, #45	; 0x2d
 8015db2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015db6:	4a9c      	ldr	r2, [pc, #624]	; (8016028 <_printf_float+0x2fc>)
 8015db8:	4b9c      	ldr	r3, [pc, #624]	; (801602c <_printf_float+0x300>)
 8015dba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015dbe:	bf8c      	ite	hi
 8015dc0:	4690      	movhi	r8, r2
 8015dc2:	4698      	movls	r8, r3
 8015dc4:	2303      	movs	r3, #3
 8015dc6:	f02b 0204 	bic.w	r2, fp, #4
 8015dca:	6123      	str	r3, [r4, #16]
 8015dcc:	6022      	str	r2, [r4, #0]
 8015dce:	f04f 0900 	mov.w	r9, #0
 8015dd2:	9700      	str	r7, [sp, #0]
 8015dd4:	4633      	mov	r3, r6
 8015dd6:	aa0b      	add	r2, sp, #44	; 0x2c
 8015dd8:	4621      	mov	r1, r4
 8015dda:	4628      	mov	r0, r5
 8015ddc:	f000 f9e6 	bl	80161ac <_printf_common>
 8015de0:	3001      	adds	r0, #1
 8015de2:	f040 808d 	bne.w	8015f00 <_printf_float+0x1d4>
 8015de6:	f04f 30ff 	mov.w	r0, #4294967295
 8015dea:	b00d      	add	sp, #52	; 0x34
 8015dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015df0:	4642      	mov	r2, r8
 8015df2:	464b      	mov	r3, r9
 8015df4:	4640      	mov	r0, r8
 8015df6:	4649      	mov	r1, r9
 8015df8:	f7ea fe98 	bl	8000b2c <__aeabi_dcmpun>
 8015dfc:	b110      	cbz	r0, 8015e04 <_printf_float+0xd8>
 8015dfe:	4a8c      	ldr	r2, [pc, #560]	; (8016030 <_printf_float+0x304>)
 8015e00:	4b8c      	ldr	r3, [pc, #560]	; (8016034 <_printf_float+0x308>)
 8015e02:	e7da      	b.n	8015dba <_printf_float+0x8e>
 8015e04:	6861      	ldr	r1, [r4, #4]
 8015e06:	1c4b      	adds	r3, r1, #1
 8015e08:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015e0c:	a80a      	add	r0, sp, #40	; 0x28
 8015e0e:	d13e      	bne.n	8015e8e <_printf_float+0x162>
 8015e10:	2306      	movs	r3, #6
 8015e12:	6063      	str	r3, [r4, #4]
 8015e14:	2300      	movs	r3, #0
 8015e16:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015e1a:	ab09      	add	r3, sp, #36	; 0x24
 8015e1c:	9300      	str	r3, [sp, #0]
 8015e1e:	ec49 8b10 	vmov	d0, r8, r9
 8015e22:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015e26:	6022      	str	r2, [r4, #0]
 8015e28:	f8cd a004 	str.w	sl, [sp, #4]
 8015e2c:	6861      	ldr	r1, [r4, #4]
 8015e2e:	4628      	mov	r0, r5
 8015e30:	f7ff fee8 	bl	8015c04 <__cvt>
 8015e34:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015e38:	2b47      	cmp	r3, #71	; 0x47
 8015e3a:	4680      	mov	r8, r0
 8015e3c:	d109      	bne.n	8015e52 <_printf_float+0x126>
 8015e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e40:	1cd8      	adds	r0, r3, #3
 8015e42:	db02      	blt.n	8015e4a <_printf_float+0x11e>
 8015e44:	6862      	ldr	r2, [r4, #4]
 8015e46:	4293      	cmp	r3, r2
 8015e48:	dd47      	ble.n	8015eda <_printf_float+0x1ae>
 8015e4a:	f1aa 0a02 	sub.w	sl, sl, #2
 8015e4e:	fa5f fa8a 	uxtb.w	sl, sl
 8015e52:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015e56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015e58:	d824      	bhi.n	8015ea4 <_printf_float+0x178>
 8015e5a:	3901      	subs	r1, #1
 8015e5c:	4652      	mov	r2, sl
 8015e5e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015e62:	9109      	str	r1, [sp, #36]	; 0x24
 8015e64:	f7ff ff2f 	bl	8015cc6 <__exponent>
 8015e68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e6a:	1813      	adds	r3, r2, r0
 8015e6c:	2a01      	cmp	r2, #1
 8015e6e:	4681      	mov	r9, r0
 8015e70:	6123      	str	r3, [r4, #16]
 8015e72:	dc02      	bgt.n	8015e7a <_printf_float+0x14e>
 8015e74:	6822      	ldr	r2, [r4, #0]
 8015e76:	07d1      	lsls	r1, r2, #31
 8015e78:	d501      	bpl.n	8015e7e <_printf_float+0x152>
 8015e7a:	3301      	adds	r3, #1
 8015e7c:	6123      	str	r3, [r4, #16]
 8015e7e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d0a5      	beq.n	8015dd2 <_printf_float+0xa6>
 8015e86:	232d      	movs	r3, #45	; 0x2d
 8015e88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015e8c:	e7a1      	b.n	8015dd2 <_printf_float+0xa6>
 8015e8e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015e92:	f000 8177 	beq.w	8016184 <_printf_float+0x458>
 8015e96:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015e9a:	d1bb      	bne.n	8015e14 <_printf_float+0xe8>
 8015e9c:	2900      	cmp	r1, #0
 8015e9e:	d1b9      	bne.n	8015e14 <_printf_float+0xe8>
 8015ea0:	2301      	movs	r3, #1
 8015ea2:	e7b6      	b.n	8015e12 <_printf_float+0xe6>
 8015ea4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015ea8:	d119      	bne.n	8015ede <_printf_float+0x1b2>
 8015eaa:	2900      	cmp	r1, #0
 8015eac:	6863      	ldr	r3, [r4, #4]
 8015eae:	dd0c      	ble.n	8015eca <_printf_float+0x19e>
 8015eb0:	6121      	str	r1, [r4, #16]
 8015eb2:	b913      	cbnz	r3, 8015eba <_printf_float+0x18e>
 8015eb4:	6822      	ldr	r2, [r4, #0]
 8015eb6:	07d2      	lsls	r2, r2, #31
 8015eb8:	d502      	bpl.n	8015ec0 <_printf_float+0x194>
 8015eba:	3301      	adds	r3, #1
 8015ebc:	440b      	add	r3, r1
 8015ebe:	6123      	str	r3, [r4, #16]
 8015ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ec2:	65a3      	str	r3, [r4, #88]	; 0x58
 8015ec4:	f04f 0900 	mov.w	r9, #0
 8015ec8:	e7d9      	b.n	8015e7e <_printf_float+0x152>
 8015eca:	b913      	cbnz	r3, 8015ed2 <_printf_float+0x1a6>
 8015ecc:	6822      	ldr	r2, [r4, #0]
 8015ece:	07d0      	lsls	r0, r2, #31
 8015ed0:	d501      	bpl.n	8015ed6 <_printf_float+0x1aa>
 8015ed2:	3302      	adds	r3, #2
 8015ed4:	e7f3      	b.n	8015ebe <_printf_float+0x192>
 8015ed6:	2301      	movs	r3, #1
 8015ed8:	e7f1      	b.n	8015ebe <_printf_float+0x192>
 8015eda:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015ede:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015ee2:	4293      	cmp	r3, r2
 8015ee4:	db05      	blt.n	8015ef2 <_printf_float+0x1c6>
 8015ee6:	6822      	ldr	r2, [r4, #0]
 8015ee8:	6123      	str	r3, [r4, #16]
 8015eea:	07d1      	lsls	r1, r2, #31
 8015eec:	d5e8      	bpl.n	8015ec0 <_printf_float+0x194>
 8015eee:	3301      	adds	r3, #1
 8015ef0:	e7e5      	b.n	8015ebe <_printf_float+0x192>
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	bfd4      	ite	le
 8015ef6:	f1c3 0302 	rsble	r3, r3, #2
 8015efa:	2301      	movgt	r3, #1
 8015efc:	4413      	add	r3, r2
 8015efe:	e7de      	b.n	8015ebe <_printf_float+0x192>
 8015f00:	6823      	ldr	r3, [r4, #0]
 8015f02:	055a      	lsls	r2, r3, #21
 8015f04:	d407      	bmi.n	8015f16 <_printf_float+0x1ea>
 8015f06:	6923      	ldr	r3, [r4, #16]
 8015f08:	4642      	mov	r2, r8
 8015f0a:	4631      	mov	r1, r6
 8015f0c:	4628      	mov	r0, r5
 8015f0e:	47b8      	blx	r7
 8015f10:	3001      	adds	r0, #1
 8015f12:	d12b      	bne.n	8015f6c <_printf_float+0x240>
 8015f14:	e767      	b.n	8015de6 <_printf_float+0xba>
 8015f16:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015f1a:	f240 80dc 	bls.w	80160d6 <_printf_float+0x3aa>
 8015f1e:	2200      	movs	r2, #0
 8015f20:	2300      	movs	r3, #0
 8015f22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015f26:	f7ea fdcf 	bl	8000ac8 <__aeabi_dcmpeq>
 8015f2a:	2800      	cmp	r0, #0
 8015f2c:	d033      	beq.n	8015f96 <_printf_float+0x26a>
 8015f2e:	2301      	movs	r3, #1
 8015f30:	4a41      	ldr	r2, [pc, #260]	; (8016038 <_printf_float+0x30c>)
 8015f32:	4631      	mov	r1, r6
 8015f34:	4628      	mov	r0, r5
 8015f36:	47b8      	blx	r7
 8015f38:	3001      	adds	r0, #1
 8015f3a:	f43f af54 	beq.w	8015de6 <_printf_float+0xba>
 8015f3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015f42:	429a      	cmp	r2, r3
 8015f44:	db02      	blt.n	8015f4c <_printf_float+0x220>
 8015f46:	6823      	ldr	r3, [r4, #0]
 8015f48:	07d8      	lsls	r0, r3, #31
 8015f4a:	d50f      	bpl.n	8015f6c <_printf_float+0x240>
 8015f4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015f50:	4631      	mov	r1, r6
 8015f52:	4628      	mov	r0, r5
 8015f54:	47b8      	blx	r7
 8015f56:	3001      	adds	r0, #1
 8015f58:	f43f af45 	beq.w	8015de6 <_printf_float+0xba>
 8015f5c:	f04f 0800 	mov.w	r8, #0
 8015f60:	f104 091a 	add.w	r9, r4, #26
 8015f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f66:	3b01      	subs	r3, #1
 8015f68:	4543      	cmp	r3, r8
 8015f6a:	dc09      	bgt.n	8015f80 <_printf_float+0x254>
 8015f6c:	6823      	ldr	r3, [r4, #0]
 8015f6e:	079b      	lsls	r3, r3, #30
 8015f70:	f100 8103 	bmi.w	801617a <_printf_float+0x44e>
 8015f74:	68e0      	ldr	r0, [r4, #12]
 8015f76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f78:	4298      	cmp	r0, r3
 8015f7a:	bfb8      	it	lt
 8015f7c:	4618      	movlt	r0, r3
 8015f7e:	e734      	b.n	8015dea <_printf_float+0xbe>
 8015f80:	2301      	movs	r3, #1
 8015f82:	464a      	mov	r2, r9
 8015f84:	4631      	mov	r1, r6
 8015f86:	4628      	mov	r0, r5
 8015f88:	47b8      	blx	r7
 8015f8a:	3001      	adds	r0, #1
 8015f8c:	f43f af2b 	beq.w	8015de6 <_printf_float+0xba>
 8015f90:	f108 0801 	add.w	r8, r8, #1
 8015f94:	e7e6      	b.n	8015f64 <_printf_float+0x238>
 8015f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	dc2b      	bgt.n	8015ff4 <_printf_float+0x2c8>
 8015f9c:	2301      	movs	r3, #1
 8015f9e:	4a26      	ldr	r2, [pc, #152]	; (8016038 <_printf_float+0x30c>)
 8015fa0:	4631      	mov	r1, r6
 8015fa2:	4628      	mov	r0, r5
 8015fa4:	47b8      	blx	r7
 8015fa6:	3001      	adds	r0, #1
 8015fa8:	f43f af1d 	beq.w	8015de6 <_printf_float+0xba>
 8015fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fae:	b923      	cbnz	r3, 8015fba <_printf_float+0x28e>
 8015fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015fb2:	b913      	cbnz	r3, 8015fba <_printf_float+0x28e>
 8015fb4:	6823      	ldr	r3, [r4, #0]
 8015fb6:	07d9      	lsls	r1, r3, #31
 8015fb8:	d5d8      	bpl.n	8015f6c <_printf_float+0x240>
 8015fba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015fbe:	4631      	mov	r1, r6
 8015fc0:	4628      	mov	r0, r5
 8015fc2:	47b8      	blx	r7
 8015fc4:	3001      	adds	r0, #1
 8015fc6:	f43f af0e 	beq.w	8015de6 <_printf_float+0xba>
 8015fca:	f04f 0900 	mov.w	r9, #0
 8015fce:	f104 0a1a 	add.w	sl, r4, #26
 8015fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fd4:	425b      	negs	r3, r3
 8015fd6:	454b      	cmp	r3, r9
 8015fd8:	dc01      	bgt.n	8015fde <_printf_float+0x2b2>
 8015fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015fdc:	e794      	b.n	8015f08 <_printf_float+0x1dc>
 8015fde:	2301      	movs	r3, #1
 8015fe0:	4652      	mov	r2, sl
 8015fe2:	4631      	mov	r1, r6
 8015fe4:	4628      	mov	r0, r5
 8015fe6:	47b8      	blx	r7
 8015fe8:	3001      	adds	r0, #1
 8015fea:	f43f aefc 	beq.w	8015de6 <_printf_float+0xba>
 8015fee:	f109 0901 	add.w	r9, r9, #1
 8015ff2:	e7ee      	b.n	8015fd2 <_printf_float+0x2a6>
 8015ff4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015ff6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015ff8:	429a      	cmp	r2, r3
 8015ffa:	bfa8      	it	ge
 8015ffc:	461a      	movge	r2, r3
 8015ffe:	2a00      	cmp	r2, #0
 8016000:	4691      	mov	r9, r2
 8016002:	dd07      	ble.n	8016014 <_printf_float+0x2e8>
 8016004:	4613      	mov	r3, r2
 8016006:	4631      	mov	r1, r6
 8016008:	4642      	mov	r2, r8
 801600a:	4628      	mov	r0, r5
 801600c:	47b8      	blx	r7
 801600e:	3001      	adds	r0, #1
 8016010:	f43f aee9 	beq.w	8015de6 <_printf_float+0xba>
 8016014:	f104 031a 	add.w	r3, r4, #26
 8016018:	f04f 0b00 	mov.w	fp, #0
 801601c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016020:	9306      	str	r3, [sp, #24]
 8016022:	e015      	b.n	8016050 <_printf_float+0x324>
 8016024:	7fefffff 	.word	0x7fefffff
 8016028:	0801b21c 	.word	0x0801b21c
 801602c:	0801b218 	.word	0x0801b218
 8016030:	0801b224 	.word	0x0801b224
 8016034:	0801b220 	.word	0x0801b220
 8016038:	0801b228 	.word	0x0801b228
 801603c:	2301      	movs	r3, #1
 801603e:	9a06      	ldr	r2, [sp, #24]
 8016040:	4631      	mov	r1, r6
 8016042:	4628      	mov	r0, r5
 8016044:	47b8      	blx	r7
 8016046:	3001      	adds	r0, #1
 8016048:	f43f aecd 	beq.w	8015de6 <_printf_float+0xba>
 801604c:	f10b 0b01 	add.w	fp, fp, #1
 8016050:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8016054:	ebaa 0309 	sub.w	r3, sl, r9
 8016058:	455b      	cmp	r3, fp
 801605a:	dcef      	bgt.n	801603c <_printf_float+0x310>
 801605c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016060:	429a      	cmp	r2, r3
 8016062:	44d0      	add	r8, sl
 8016064:	db15      	blt.n	8016092 <_printf_float+0x366>
 8016066:	6823      	ldr	r3, [r4, #0]
 8016068:	07da      	lsls	r2, r3, #31
 801606a:	d412      	bmi.n	8016092 <_printf_float+0x366>
 801606c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801606e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016070:	eba3 020a 	sub.w	r2, r3, sl
 8016074:	eba3 0a01 	sub.w	sl, r3, r1
 8016078:	4592      	cmp	sl, r2
 801607a:	bfa8      	it	ge
 801607c:	4692      	movge	sl, r2
 801607e:	f1ba 0f00 	cmp.w	sl, #0
 8016082:	dc0e      	bgt.n	80160a2 <_printf_float+0x376>
 8016084:	f04f 0800 	mov.w	r8, #0
 8016088:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801608c:	f104 091a 	add.w	r9, r4, #26
 8016090:	e019      	b.n	80160c6 <_printf_float+0x39a>
 8016092:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016096:	4631      	mov	r1, r6
 8016098:	4628      	mov	r0, r5
 801609a:	47b8      	blx	r7
 801609c:	3001      	adds	r0, #1
 801609e:	d1e5      	bne.n	801606c <_printf_float+0x340>
 80160a0:	e6a1      	b.n	8015de6 <_printf_float+0xba>
 80160a2:	4653      	mov	r3, sl
 80160a4:	4642      	mov	r2, r8
 80160a6:	4631      	mov	r1, r6
 80160a8:	4628      	mov	r0, r5
 80160aa:	47b8      	blx	r7
 80160ac:	3001      	adds	r0, #1
 80160ae:	d1e9      	bne.n	8016084 <_printf_float+0x358>
 80160b0:	e699      	b.n	8015de6 <_printf_float+0xba>
 80160b2:	2301      	movs	r3, #1
 80160b4:	464a      	mov	r2, r9
 80160b6:	4631      	mov	r1, r6
 80160b8:	4628      	mov	r0, r5
 80160ba:	47b8      	blx	r7
 80160bc:	3001      	adds	r0, #1
 80160be:	f43f ae92 	beq.w	8015de6 <_printf_float+0xba>
 80160c2:	f108 0801 	add.w	r8, r8, #1
 80160c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80160ca:	1a9b      	subs	r3, r3, r2
 80160cc:	eba3 030a 	sub.w	r3, r3, sl
 80160d0:	4543      	cmp	r3, r8
 80160d2:	dcee      	bgt.n	80160b2 <_printf_float+0x386>
 80160d4:	e74a      	b.n	8015f6c <_printf_float+0x240>
 80160d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80160d8:	2a01      	cmp	r2, #1
 80160da:	dc01      	bgt.n	80160e0 <_printf_float+0x3b4>
 80160dc:	07db      	lsls	r3, r3, #31
 80160de:	d53a      	bpl.n	8016156 <_printf_float+0x42a>
 80160e0:	2301      	movs	r3, #1
 80160e2:	4642      	mov	r2, r8
 80160e4:	4631      	mov	r1, r6
 80160e6:	4628      	mov	r0, r5
 80160e8:	47b8      	blx	r7
 80160ea:	3001      	adds	r0, #1
 80160ec:	f43f ae7b 	beq.w	8015de6 <_printf_float+0xba>
 80160f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80160f4:	4631      	mov	r1, r6
 80160f6:	4628      	mov	r0, r5
 80160f8:	47b8      	blx	r7
 80160fa:	3001      	adds	r0, #1
 80160fc:	f108 0801 	add.w	r8, r8, #1
 8016100:	f43f ae71 	beq.w	8015de6 <_printf_float+0xba>
 8016104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016106:	2200      	movs	r2, #0
 8016108:	f103 3aff 	add.w	sl, r3, #4294967295
 801610c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016110:	2300      	movs	r3, #0
 8016112:	f7ea fcd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8016116:	b9c8      	cbnz	r0, 801614c <_printf_float+0x420>
 8016118:	4653      	mov	r3, sl
 801611a:	4642      	mov	r2, r8
 801611c:	4631      	mov	r1, r6
 801611e:	4628      	mov	r0, r5
 8016120:	47b8      	blx	r7
 8016122:	3001      	adds	r0, #1
 8016124:	d10e      	bne.n	8016144 <_printf_float+0x418>
 8016126:	e65e      	b.n	8015de6 <_printf_float+0xba>
 8016128:	2301      	movs	r3, #1
 801612a:	4652      	mov	r2, sl
 801612c:	4631      	mov	r1, r6
 801612e:	4628      	mov	r0, r5
 8016130:	47b8      	blx	r7
 8016132:	3001      	adds	r0, #1
 8016134:	f43f ae57 	beq.w	8015de6 <_printf_float+0xba>
 8016138:	f108 0801 	add.w	r8, r8, #1
 801613c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801613e:	3b01      	subs	r3, #1
 8016140:	4543      	cmp	r3, r8
 8016142:	dcf1      	bgt.n	8016128 <_printf_float+0x3fc>
 8016144:	464b      	mov	r3, r9
 8016146:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801614a:	e6de      	b.n	8015f0a <_printf_float+0x1de>
 801614c:	f04f 0800 	mov.w	r8, #0
 8016150:	f104 0a1a 	add.w	sl, r4, #26
 8016154:	e7f2      	b.n	801613c <_printf_float+0x410>
 8016156:	2301      	movs	r3, #1
 8016158:	e7df      	b.n	801611a <_printf_float+0x3ee>
 801615a:	2301      	movs	r3, #1
 801615c:	464a      	mov	r2, r9
 801615e:	4631      	mov	r1, r6
 8016160:	4628      	mov	r0, r5
 8016162:	47b8      	blx	r7
 8016164:	3001      	adds	r0, #1
 8016166:	f43f ae3e 	beq.w	8015de6 <_printf_float+0xba>
 801616a:	f108 0801 	add.w	r8, r8, #1
 801616e:	68e3      	ldr	r3, [r4, #12]
 8016170:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016172:	1a9b      	subs	r3, r3, r2
 8016174:	4543      	cmp	r3, r8
 8016176:	dcf0      	bgt.n	801615a <_printf_float+0x42e>
 8016178:	e6fc      	b.n	8015f74 <_printf_float+0x248>
 801617a:	f04f 0800 	mov.w	r8, #0
 801617e:	f104 0919 	add.w	r9, r4, #25
 8016182:	e7f4      	b.n	801616e <_printf_float+0x442>
 8016184:	2900      	cmp	r1, #0
 8016186:	f43f ae8b 	beq.w	8015ea0 <_printf_float+0x174>
 801618a:	2300      	movs	r3, #0
 801618c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8016190:	ab09      	add	r3, sp, #36	; 0x24
 8016192:	9300      	str	r3, [sp, #0]
 8016194:	ec49 8b10 	vmov	d0, r8, r9
 8016198:	6022      	str	r2, [r4, #0]
 801619a:	f8cd a004 	str.w	sl, [sp, #4]
 801619e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80161a2:	4628      	mov	r0, r5
 80161a4:	f7ff fd2e 	bl	8015c04 <__cvt>
 80161a8:	4680      	mov	r8, r0
 80161aa:	e648      	b.n	8015e3e <_printf_float+0x112>

080161ac <_printf_common>:
 80161ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80161b0:	4691      	mov	r9, r2
 80161b2:	461f      	mov	r7, r3
 80161b4:	688a      	ldr	r2, [r1, #8]
 80161b6:	690b      	ldr	r3, [r1, #16]
 80161b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80161bc:	4293      	cmp	r3, r2
 80161be:	bfb8      	it	lt
 80161c0:	4613      	movlt	r3, r2
 80161c2:	f8c9 3000 	str.w	r3, [r9]
 80161c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80161ca:	4606      	mov	r6, r0
 80161cc:	460c      	mov	r4, r1
 80161ce:	b112      	cbz	r2, 80161d6 <_printf_common+0x2a>
 80161d0:	3301      	adds	r3, #1
 80161d2:	f8c9 3000 	str.w	r3, [r9]
 80161d6:	6823      	ldr	r3, [r4, #0]
 80161d8:	0699      	lsls	r1, r3, #26
 80161da:	bf42      	ittt	mi
 80161dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80161e0:	3302      	addmi	r3, #2
 80161e2:	f8c9 3000 	strmi.w	r3, [r9]
 80161e6:	6825      	ldr	r5, [r4, #0]
 80161e8:	f015 0506 	ands.w	r5, r5, #6
 80161ec:	d107      	bne.n	80161fe <_printf_common+0x52>
 80161ee:	f104 0a19 	add.w	sl, r4, #25
 80161f2:	68e3      	ldr	r3, [r4, #12]
 80161f4:	f8d9 2000 	ldr.w	r2, [r9]
 80161f8:	1a9b      	subs	r3, r3, r2
 80161fa:	42ab      	cmp	r3, r5
 80161fc:	dc28      	bgt.n	8016250 <_printf_common+0xa4>
 80161fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016202:	6822      	ldr	r2, [r4, #0]
 8016204:	3300      	adds	r3, #0
 8016206:	bf18      	it	ne
 8016208:	2301      	movne	r3, #1
 801620a:	0692      	lsls	r2, r2, #26
 801620c:	d42d      	bmi.n	801626a <_printf_common+0xbe>
 801620e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016212:	4639      	mov	r1, r7
 8016214:	4630      	mov	r0, r6
 8016216:	47c0      	blx	r8
 8016218:	3001      	adds	r0, #1
 801621a:	d020      	beq.n	801625e <_printf_common+0xb2>
 801621c:	6823      	ldr	r3, [r4, #0]
 801621e:	68e5      	ldr	r5, [r4, #12]
 8016220:	f8d9 2000 	ldr.w	r2, [r9]
 8016224:	f003 0306 	and.w	r3, r3, #6
 8016228:	2b04      	cmp	r3, #4
 801622a:	bf08      	it	eq
 801622c:	1aad      	subeq	r5, r5, r2
 801622e:	68a3      	ldr	r3, [r4, #8]
 8016230:	6922      	ldr	r2, [r4, #16]
 8016232:	bf0c      	ite	eq
 8016234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016238:	2500      	movne	r5, #0
 801623a:	4293      	cmp	r3, r2
 801623c:	bfc4      	itt	gt
 801623e:	1a9b      	subgt	r3, r3, r2
 8016240:	18ed      	addgt	r5, r5, r3
 8016242:	f04f 0900 	mov.w	r9, #0
 8016246:	341a      	adds	r4, #26
 8016248:	454d      	cmp	r5, r9
 801624a:	d11a      	bne.n	8016282 <_printf_common+0xd6>
 801624c:	2000      	movs	r0, #0
 801624e:	e008      	b.n	8016262 <_printf_common+0xb6>
 8016250:	2301      	movs	r3, #1
 8016252:	4652      	mov	r2, sl
 8016254:	4639      	mov	r1, r7
 8016256:	4630      	mov	r0, r6
 8016258:	47c0      	blx	r8
 801625a:	3001      	adds	r0, #1
 801625c:	d103      	bne.n	8016266 <_printf_common+0xba>
 801625e:	f04f 30ff 	mov.w	r0, #4294967295
 8016262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016266:	3501      	adds	r5, #1
 8016268:	e7c3      	b.n	80161f2 <_printf_common+0x46>
 801626a:	18e1      	adds	r1, r4, r3
 801626c:	1c5a      	adds	r2, r3, #1
 801626e:	2030      	movs	r0, #48	; 0x30
 8016270:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016274:	4422      	add	r2, r4
 8016276:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801627a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801627e:	3302      	adds	r3, #2
 8016280:	e7c5      	b.n	801620e <_printf_common+0x62>
 8016282:	2301      	movs	r3, #1
 8016284:	4622      	mov	r2, r4
 8016286:	4639      	mov	r1, r7
 8016288:	4630      	mov	r0, r6
 801628a:	47c0      	blx	r8
 801628c:	3001      	adds	r0, #1
 801628e:	d0e6      	beq.n	801625e <_printf_common+0xb2>
 8016290:	f109 0901 	add.w	r9, r9, #1
 8016294:	e7d8      	b.n	8016248 <_printf_common+0x9c>
	...

08016298 <_printf_i>:
 8016298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801629c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80162a0:	460c      	mov	r4, r1
 80162a2:	7e09      	ldrb	r1, [r1, #24]
 80162a4:	b085      	sub	sp, #20
 80162a6:	296e      	cmp	r1, #110	; 0x6e
 80162a8:	4617      	mov	r7, r2
 80162aa:	4606      	mov	r6, r0
 80162ac:	4698      	mov	r8, r3
 80162ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80162b0:	f000 80b3 	beq.w	801641a <_printf_i+0x182>
 80162b4:	d822      	bhi.n	80162fc <_printf_i+0x64>
 80162b6:	2963      	cmp	r1, #99	; 0x63
 80162b8:	d036      	beq.n	8016328 <_printf_i+0x90>
 80162ba:	d80a      	bhi.n	80162d2 <_printf_i+0x3a>
 80162bc:	2900      	cmp	r1, #0
 80162be:	f000 80b9 	beq.w	8016434 <_printf_i+0x19c>
 80162c2:	2958      	cmp	r1, #88	; 0x58
 80162c4:	f000 8083 	beq.w	80163ce <_printf_i+0x136>
 80162c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80162cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80162d0:	e032      	b.n	8016338 <_printf_i+0xa0>
 80162d2:	2964      	cmp	r1, #100	; 0x64
 80162d4:	d001      	beq.n	80162da <_printf_i+0x42>
 80162d6:	2969      	cmp	r1, #105	; 0x69
 80162d8:	d1f6      	bne.n	80162c8 <_printf_i+0x30>
 80162da:	6820      	ldr	r0, [r4, #0]
 80162dc:	6813      	ldr	r3, [r2, #0]
 80162de:	0605      	lsls	r5, r0, #24
 80162e0:	f103 0104 	add.w	r1, r3, #4
 80162e4:	d52a      	bpl.n	801633c <_printf_i+0xa4>
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	6011      	str	r1, [r2, #0]
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	da03      	bge.n	80162f6 <_printf_i+0x5e>
 80162ee:	222d      	movs	r2, #45	; 0x2d
 80162f0:	425b      	negs	r3, r3
 80162f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80162f6:	486f      	ldr	r0, [pc, #444]	; (80164b4 <_printf_i+0x21c>)
 80162f8:	220a      	movs	r2, #10
 80162fa:	e039      	b.n	8016370 <_printf_i+0xd8>
 80162fc:	2973      	cmp	r1, #115	; 0x73
 80162fe:	f000 809d 	beq.w	801643c <_printf_i+0x1a4>
 8016302:	d808      	bhi.n	8016316 <_printf_i+0x7e>
 8016304:	296f      	cmp	r1, #111	; 0x6f
 8016306:	d020      	beq.n	801634a <_printf_i+0xb2>
 8016308:	2970      	cmp	r1, #112	; 0x70
 801630a:	d1dd      	bne.n	80162c8 <_printf_i+0x30>
 801630c:	6823      	ldr	r3, [r4, #0]
 801630e:	f043 0320 	orr.w	r3, r3, #32
 8016312:	6023      	str	r3, [r4, #0]
 8016314:	e003      	b.n	801631e <_printf_i+0x86>
 8016316:	2975      	cmp	r1, #117	; 0x75
 8016318:	d017      	beq.n	801634a <_printf_i+0xb2>
 801631a:	2978      	cmp	r1, #120	; 0x78
 801631c:	d1d4      	bne.n	80162c8 <_printf_i+0x30>
 801631e:	2378      	movs	r3, #120	; 0x78
 8016320:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016324:	4864      	ldr	r0, [pc, #400]	; (80164b8 <_printf_i+0x220>)
 8016326:	e055      	b.n	80163d4 <_printf_i+0x13c>
 8016328:	6813      	ldr	r3, [r2, #0]
 801632a:	1d19      	adds	r1, r3, #4
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	6011      	str	r1, [r2, #0]
 8016330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016334:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016338:	2301      	movs	r3, #1
 801633a:	e08c      	b.n	8016456 <_printf_i+0x1be>
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	6011      	str	r1, [r2, #0]
 8016340:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016344:	bf18      	it	ne
 8016346:	b21b      	sxthne	r3, r3
 8016348:	e7cf      	b.n	80162ea <_printf_i+0x52>
 801634a:	6813      	ldr	r3, [r2, #0]
 801634c:	6825      	ldr	r5, [r4, #0]
 801634e:	1d18      	adds	r0, r3, #4
 8016350:	6010      	str	r0, [r2, #0]
 8016352:	0628      	lsls	r0, r5, #24
 8016354:	d501      	bpl.n	801635a <_printf_i+0xc2>
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	e002      	b.n	8016360 <_printf_i+0xc8>
 801635a:	0668      	lsls	r0, r5, #25
 801635c:	d5fb      	bpl.n	8016356 <_printf_i+0xbe>
 801635e:	881b      	ldrh	r3, [r3, #0]
 8016360:	4854      	ldr	r0, [pc, #336]	; (80164b4 <_printf_i+0x21c>)
 8016362:	296f      	cmp	r1, #111	; 0x6f
 8016364:	bf14      	ite	ne
 8016366:	220a      	movne	r2, #10
 8016368:	2208      	moveq	r2, #8
 801636a:	2100      	movs	r1, #0
 801636c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016370:	6865      	ldr	r5, [r4, #4]
 8016372:	60a5      	str	r5, [r4, #8]
 8016374:	2d00      	cmp	r5, #0
 8016376:	f2c0 8095 	blt.w	80164a4 <_printf_i+0x20c>
 801637a:	6821      	ldr	r1, [r4, #0]
 801637c:	f021 0104 	bic.w	r1, r1, #4
 8016380:	6021      	str	r1, [r4, #0]
 8016382:	2b00      	cmp	r3, #0
 8016384:	d13d      	bne.n	8016402 <_printf_i+0x16a>
 8016386:	2d00      	cmp	r5, #0
 8016388:	f040 808e 	bne.w	80164a8 <_printf_i+0x210>
 801638c:	4665      	mov	r5, ip
 801638e:	2a08      	cmp	r2, #8
 8016390:	d10b      	bne.n	80163aa <_printf_i+0x112>
 8016392:	6823      	ldr	r3, [r4, #0]
 8016394:	07db      	lsls	r3, r3, #31
 8016396:	d508      	bpl.n	80163aa <_printf_i+0x112>
 8016398:	6923      	ldr	r3, [r4, #16]
 801639a:	6862      	ldr	r2, [r4, #4]
 801639c:	429a      	cmp	r2, r3
 801639e:	bfde      	ittt	le
 80163a0:	2330      	movle	r3, #48	; 0x30
 80163a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80163a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80163aa:	ebac 0305 	sub.w	r3, ip, r5
 80163ae:	6123      	str	r3, [r4, #16]
 80163b0:	f8cd 8000 	str.w	r8, [sp]
 80163b4:	463b      	mov	r3, r7
 80163b6:	aa03      	add	r2, sp, #12
 80163b8:	4621      	mov	r1, r4
 80163ba:	4630      	mov	r0, r6
 80163bc:	f7ff fef6 	bl	80161ac <_printf_common>
 80163c0:	3001      	adds	r0, #1
 80163c2:	d14d      	bne.n	8016460 <_printf_i+0x1c8>
 80163c4:	f04f 30ff 	mov.w	r0, #4294967295
 80163c8:	b005      	add	sp, #20
 80163ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80163ce:	4839      	ldr	r0, [pc, #228]	; (80164b4 <_printf_i+0x21c>)
 80163d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80163d4:	6813      	ldr	r3, [r2, #0]
 80163d6:	6821      	ldr	r1, [r4, #0]
 80163d8:	1d1d      	adds	r5, r3, #4
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	6015      	str	r5, [r2, #0]
 80163de:	060a      	lsls	r2, r1, #24
 80163e0:	d50b      	bpl.n	80163fa <_printf_i+0x162>
 80163e2:	07ca      	lsls	r2, r1, #31
 80163e4:	bf44      	itt	mi
 80163e6:	f041 0120 	orrmi.w	r1, r1, #32
 80163ea:	6021      	strmi	r1, [r4, #0]
 80163ec:	b91b      	cbnz	r3, 80163f6 <_printf_i+0x15e>
 80163ee:	6822      	ldr	r2, [r4, #0]
 80163f0:	f022 0220 	bic.w	r2, r2, #32
 80163f4:	6022      	str	r2, [r4, #0]
 80163f6:	2210      	movs	r2, #16
 80163f8:	e7b7      	b.n	801636a <_printf_i+0xd2>
 80163fa:	064d      	lsls	r5, r1, #25
 80163fc:	bf48      	it	mi
 80163fe:	b29b      	uxthmi	r3, r3
 8016400:	e7ef      	b.n	80163e2 <_printf_i+0x14a>
 8016402:	4665      	mov	r5, ip
 8016404:	fbb3 f1f2 	udiv	r1, r3, r2
 8016408:	fb02 3311 	mls	r3, r2, r1, r3
 801640c:	5cc3      	ldrb	r3, [r0, r3]
 801640e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016412:	460b      	mov	r3, r1
 8016414:	2900      	cmp	r1, #0
 8016416:	d1f5      	bne.n	8016404 <_printf_i+0x16c>
 8016418:	e7b9      	b.n	801638e <_printf_i+0xf6>
 801641a:	6813      	ldr	r3, [r2, #0]
 801641c:	6825      	ldr	r5, [r4, #0]
 801641e:	6961      	ldr	r1, [r4, #20]
 8016420:	1d18      	adds	r0, r3, #4
 8016422:	6010      	str	r0, [r2, #0]
 8016424:	0628      	lsls	r0, r5, #24
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	d501      	bpl.n	801642e <_printf_i+0x196>
 801642a:	6019      	str	r1, [r3, #0]
 801642c:	e002      	b.n	8016434 <_printf_i+0x19c>
 801642e:	066a      	lsls	r2, r5, #25
 8016430:	d5fb      	bpl.n	801642a <_printf_i+0x192>
 8016432:	8019      	strh	r1, [r3, #0]
 8016434:	2300      	movs	r3, #0
 8016436:	6123      	str	r3, [r4, #16]
 8016438:	4665      	mov	r5, ip
 801643a:	e7b9      	b.n	80163b0 <_printf_i+0x118>
 801643c:	6813      	ldr	r3, [r2, #0]
 801643e:	1d19      	adds	r1, r3, #4
 8016440:	6011      	str	r1, [r2, #0]
 8016442:	681d      	ldr	r5, [r3, #0]
 8016444:	6862      	ldr	r2, [r4, #4]
 8016446:	2100      	movs	r1, #0
 8016448:	4628      	mov	r0, r5
 801644a:	f7e9 fec9 	bl	80001e0 <memchr>
 801644e:	b108      	cbz	r0, 8016454 <_printf_i+0x1bc>
 8016450:	1b40      	subs	r0, r0, r5
 8016452:	6060      	str	r0, [r4, #4]
 8016454:	6863      	ldr	r3, [r4, #4]
 8016456:	6123      	str	r3, [r4, #16]
 8016458:	2300      	movs	r3, #0
 801645a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801645e:	e7a7      	b.n	80163b0 <_printf_i+0x118>
 8016460:	6923      	ldr	r3, [r4, #16]
 8016462:	462a      	mov	r2, r5
 8016464:	4639      	mov	r1, r7
 8016466:	4630      	mov	r0, r6
 8016468:	47c0      	blx	r8
 801646a:	3001      	adds	r0, #1
 801646c:	d0aa      	beq.n	80163c4 <_printf_i+0x12c>
 801646e:	6823      	ldr	r3, [r4, #0]
 8016470:	079b      	lsls	r3, r3, #30
 8016472:	d413      	bmi.n	801649c <_printf_i+0x204>
 8016474:	68e0      	ldr	r0, [r4, #12]
 8016476:	9b03      	ldr	r3, [sp, #12]
 8016478:	4298      	cmp	r0, r3
 801647a:	bfb8      	it	lt
 801647c:	4618      	movlt	r0, r3
 801647e:	e7a3      	b.n	80163c8 <_printf_i+0x130>
 8016480:	2301      	movs	r3, #1
 8016482:	464a      	mov	r2, r9
 8016484:	4639      	mov	r1, r7
 8016486:	4630      	mov	r0, r6
 8016488:	47c0      	blx	r8
 801648a:	3001      	adds	r0, #1
 801648c:	d09a      	beq.n	80163c4 <_printf_i+0x12c>
 801648e:	3501      	adds	r5, #1
 8016490:	68e3      	ldr	r3, [r4, #12]
 8016492:	9a03      	ldr	r2, [sp, #12]
 8016494:	1a9b      	subs	r3, r3, r2
 8016496:	42ab      	cmp	r3, r5
 8016498:	dcf2      	bgt.n	8016480 <_printf_i+0x1e8>
 801649a:	e7eb      	b.n	8016474 <_printf_i+0x1dc>
 801649c:	2500      	movs	r5, #0
 801649e:	f104 0919 	add.w	r9, r4, #25
 80164a2:	e7f5      	b.n	8016490 <_printf_i+0x1f8>
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d1ac      	bne.n	8016402 <_printf_i+0x16a>
 80164a8:	7803      	ldrb	r3, [r0, #0]
 80164aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80164ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80164b2:	e76c      	b.n	801638e <_printf_i+0xf6>
 80164b4:	0801b22a 	.word	0x0801b22a
 80164b8:	0801b23b 	.word	0x0801b23b

080164bc <_scanf_float>:
 80164bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164c0:	469a      	mov	sl, r3
 80164c2:	688b      	ldr	r3, [r1, #8]
 80164c4:	4616      	mov	r6, r2
 80164c6:	1e5a      	subs	r2, r3, #1
 80164c8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80164cc:	b087      	sub	sp, #28
 80164ce:	bf83      	ittte	hi
 80164d0:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80164d4:	189b      	addhi	r3, r3, r2
 80164d6:	9301      	strhi	r3, [sp, #4]
 80164d8:	2300      	movls	r3, #0
 80164da:	bf86      	itte	hi
 80164dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80164e0:	608b      	strhi	r3, [r1, #8]
 80164e2:	9301      	strls	r3, [sp, #4]
 80164e4:	680b      	ldr	r3, [r1, #0]
 80164e6:	4688      	mov	r8, r1
 80164e8:	f04f 0b00 	mov.w	fp, #0
 80164ec:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80164f0:	f848 3b1c 	str.w	r3, [r8], #28
 80164f4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80164f8:	4607      	mov	r7, r0
 80164fa:	460c      	mov	r4, r1
 80164fc:	4645      	mov	r5, r8
 80164fe:	465a      	mov	r2, fp
 8016500:	46d9      	mov	r9, fp
 8016502:	f8cd b008 	str.w	fp, [sp, #8]
 8016506:	68a1      	ldr	r1, [r4, #8]
 8016508:	b181      	cbz	r1, 801652c <_scanf_float+0x70>
 801650a:	6833      	ldr	r3, [r6, #0]
 801650c:	781b      	ldrb	r3, [r3, #0]
 801650e:	2b49      	cmp	r3, #73	; 0x49
 8016510:	d071      	beq.n	80165f6 <_scanf_float+0x13a>
 8016512:	d84d      	bhi.n	80165b0 <_scanf_float+0xf4>
 8016514:	2b39      	cmp	r3, #57	; 0x39
 8016516:	d840      	bhi.n	801659a <_scanf_float+0xde>
 8016518:	2b31      	cmp	r3, #49	; 0x31
 801651a:	f080 8088 	bcs.w	801662e <_scanf_float+0x172>
 801651e:	2b2d      	cmp	r3, #45	; 0x2d
 8016520:	f000 8090 	beq.w	8016644 <_scanf_float+0x188>
 8016524:	d815      	bhi.n	8016552 <_scanf_float+0x96>
 8016526:	2b2b      	cmp	r3, #43	; 0x2b
 8016528:	f000 808c 	beq.w	8016644 <_scanf_float+0x188>
 801652c:	f1b9 0f00 	cmp.w	r9, #0
 8016530:	d003      	beq.n	801653a <_scanf_float+0x7e>
 8016532:	6823      	ldr	r3, [r4, #0]
 8016534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016538:	6023      	str	r3, [r4, #0]
 801653a:	3a01      	subs	r2, #1
 801653c:	2a01      	cmp	r2, #1
 801653e:	f200 80ea 	bhi.w	8016716 <_scanf_float+0x25a>
 8016542:	4545      	cmp	r5, r8
 8016544:	f200 80dc 	bhi.w	8016700 <_scanf_float+0x244>
 8016548:	2601      	movs	r6, #1
 801654a:	4630      	mov	r0, r6
 801654c:	b007      	add	sp, #28
 801654e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016552:	2b2e      	cmp	r3, #46	; 0x2e
 8016554:	f000 809f 	beq.w	8016696 <_scanf_float+0x1da>
 8016558:	2b30      	cmp	r3, #48	; 0x30
 801655a:	d1e7      	bne.n	801652c <_scanf_float+0x70>
 801655c:	6820      	ldr	r0, [r4, #0]
 801655e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8016562:	d064      	beq.n	801662e <_scanf_float+0x172>
 8016564:	9b01      	ldr	r3, [sp, #4]
 8016566:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801656a:	6020      	str	r0, [r4, #0]
 801656c:	f109 0901 	add.w	r9, r9, #1
 8016570:	b11b      	cbz	r3, 801657a <_scanf_float+0xbe>
 8016572:	3b01      	subs	r3, #1
 8016574:	3101      	adds	r1, #1
 8016576:	9301      	str	r3, [sp, #4]
 8016578:	60a1      	str	r1, [r4, #8]
 801657a:	68a3      	ldr	r3, [r4, #8]
 801657c:	3b01      	subs	r3, #1
 801657e:	60a3      	str	r3, [r4, #8]
 8016580:	6923      	ldr	r3, [r4, #16]
 8016582:	3301      	adds	r3, #1
 8016584:	6123      	str	r3, [r4, #16]
 8016586:	6873      	ldr	r3, [r6, #4]
 8016588:	3b01      	subs	r3, #1
 801658a:	2b00      	cmp	r3, #0
 801658c:	6073      	str	r3, [r6, #4]
 801658e:	f340 80ac 	ble.w	80166ea <_scanf_float+0x22e>
 8016592:	6833      	ldr	r3, [r6, #0]
 8016594:	3301      	adds	r3, #1
 8016596:	6033      	str	r3, [r6, #0]
 8016598:	e7b5      	b.n	8016506 <_scanf_float+0x4a>
 801659a:	2b45      	cmp	r3, #69	; 0x45
 801659c:	f000 8085 	beq.w	80166aa <_scanf_float+0x1ee>
 80165a0:	2b46      	cmp	r3, #70	; 0x46
 80165a2:	d06a      	beq.n	801667a <_scanf_float+0x1be>
 80165a4:	2b41      	cmp	r3, #65	; 0x41
 80165a6:	d1c1      	bne.n	801652c <_scanf_float+0x70>
 80165a8:	2a01      	cmp	r2, #1
 80165aa:	d1bf      	bne.n	801652c <_scanf_float+0x70>
 80165ac:	2202      	movs	r2, #2
 80165ae:	e046      	b.n	801663e <_scanf_float+0x182>
 80165b0:	2b65      	cmp	r3, #101	; 0x65
 80165b2:	d07a      	beq.n	80166aa <_scanf_float+0x1ee>
 80165b4:	d818      	bhi.n	80165e8 <_scanf_float+0x12c>
 80165b6:	2b54      	cmp	r3, #84	; 0x54
 80165b8:	d066      	beq.n	8016688 <_scanf_float+0x1cc>
 80165ba:	d811      	bhi.n	80165e0 <_scanf_float+0x124>
 80165bc:	2b4e      	cmp	r3, #78	; 0x4e
 80165be:	d1b5      	bne.n	801652c <_scanf_float+0x70>
 80165c0:	2a00      	cmp	r2, #0
 80165c2:	d146      	bne.n	8016652 <_scanf_float+0x196>
 80165c4:	f1b9 0f00 	cmp.w	r9, #0
 80165c8:	d145      	bne.n	8016656 <_scanf_float+0x19a>
 80165ca:	6821      	ldr	r1, [r4, #0]
 80165cc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80165d0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80165d4:	d13f      	bne.n	8016656 <_scanf_float+0x19a>
 80165d6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80165da:	6021      	str	r1, [r4, #0]
 80165dc:	2201      	movs	r2, #1
 80165de:	e02e      	b.n	801663e <_scanf_float+0x182>
 80165e0:	2b59      	cmp	r3, #89	; 0x59
 80165e2:	d01e      	beq.n	8016622 <_scanf_float+0x166>
 80165e4:	2b61      	cmp	r3, #97	; 0x61
 80165e6:	e7de      	b.n	80165a6 <_scanf_float+0xea>
 80165e8:	2b6e      	cmp	r3, #110	; 0x6e
 80165ea:	d0e9      	beq.n	80165c0 <_scanf_float+0x104>
 80165ec:	d815      	bhi.n	801661a <_scanf_float+0x15e>
 80165ee:	2b66      	cmp	r3, #102	; 0x66
 80165f0:	d043      	beq.n	801667a <_scanf_float+0x1be>
 80165f2:	2b69      	cmp	r3, #105	; 0x69
 80165f4:	d19a      	bne.n	801652c <_scanf_float+0x70>
 80165f6:	f1bb 0f00 	cmp.w	fp, #0
 80165fa:	d138      	bne.n	801666e <_scanf_float+0x1b2>
 80165fc:	f1b9 0f00 	cmp.w	r9, #0
 8016600:	d197      	bne.n	8016532 <_scanf_float+0x76>
 8016602:	6821      	ldr	r1, [r4, #0]
 8016604:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016608:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801660c:	d195      	bne.n	801653a <_scanf_float+0x7e>
 801660e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016612:	6021      	str	r1, [r4, #0]
 8016614:	f04f 0b01 	mov.w	fp, #1
 8016618:	e011      	b.n	801663e <_scanf_float+0x182>
 801661a:	2b74      	cmp	r3, #116	; 0x74
 801661c:	d034      	beq.n	8016688 <_scanf_float+0x1cc>
 801661e:	2b79      	cmp	r3, #121	; 0x79
 8016620:	d184      	bne.n	801652c <_scanf_float+0x70>
 8016622:	f1bb 0f07 	cmp.w	fp, #7
 8016626:	d181      	bne.n	801652c <_scanf_float+0x70>
 8016628:	f04f 0b08 	mov.w	fp, #8
 801662c:	e007      	b.n	801663e <_scanf_float+0x182>
 801662e:	eb12 0f0b 	cmn.w	r2, fp
 8016632:	f47f af7b 	bne.w	801652c <_scanf_float+0x70>
 8016636:	6821      	ldr	r1, [r4, #0]
 8016638:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 801663c:	6021      	str	r1, [r4, #0]
 801663e:	702b      	strb	r3, [r5, #0]
 8016640:	3501      	adds	r5, #1
 8016642:	e79a      	b.n	801657a <_scanf_float+0xbe>
 8016644:	6821      	ldr	r1, [r4, #0]
 8016646:	0608      	lsls	r0, r1, #24
 8016648:	f57f af70 	bpl.w	801652c <_scanf_float+0x70>
 801664c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016650:	e7f4      	b.n	801663c <_scanf_float+0x180>
 8016652:	2a02      	cmp	r2, #2
 8016654:	d047      	beq.n	80166e6 <_scanf_float+0x22a>
 8016656:	f1bb 0f01 	cmp.w	fp, #1
 801665a:	d003      	beq.n	8016664 <_scanf_float+0x1a8>
 801665c:	f1bb 0f04 	cmp.w	fp, #4
 8016660:	f47f af64 	bne.w	801652c <_scanf_float+0x70>
 8016664:	f10b 0b01 	add.w	fp, fp, #1
 8016668:	fa5f fb8b 	uxtb.w	fp, fp
 801666c:	e7e7      	b.n	801663e <_scanf_float+0x182>
 801666e:	f1bb 0f03 	cmp.w	fp, #3
 8016672:	d0f7      	beq.n	8016664 <_scanf_float+0x1a8>
 8016674:	f1bb 0f05 	cmp.w	fp, #5
 8016678:	e7f2      	b.n	8016660 <_scanf_float+0x1a4>
 801667a:	f1bb 0f02 	cmp.w	fp, #2
 801667e:	f47f af55 	bne.w	801652c <_scanf_float+0x70>
 8016682:	f04f 0b03 	mov.w	fp, #3
 8016686:	e7da      	b.n	801663e <_scanf_float+0x182>
 8016688:	f1bb 0f06 	cmp.w	fp, #6
 801668c:	f47f af4e 	bne.w	801652c <_scanf_float+0x70>
 8016690:	f04f 0b07 	mov.w	fp, #7
 8016694:	e7d3      	b.n	801663e <_scanf_float+0x182>
 8016696:	6821      	ldr	r1, [r4, #0]
 8016698:	0588      	lsls	r0, r1, #22
 801669a:	f57f af47 	bpl.w	801652c <_scanf_float+0x70>
 801669e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80166a2:	6021      	str	r1, [r4, #0]
 80166a4:	f8cd 9008 	str.w	r9, [sp, #8]
 80166a8:	e7c9      	b.n	801663e <_scanf_float+0x182>
 80166aa:	6821      	ldr	r1, [r4, #0]
 80166ac:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80166b0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80166b4:	d006      	beq.n	80166c4 <_scanf_float+0x208>
 80166b6:	0548      	lsls	r0, r1, #21
 80166b8:	f57f af38 	bpl.w	801652c <_scanf_float+0x70>
 80166bc:	f1b9 0f00 	cmp.w	r9, #0
 80166c0:	f43f af3b 	beq.w	801653a <_scanf_float+0x7e>
 80166c4:	0588      	lsls	r0, r1, #22
 80166c6:	bf58      	it	pl
 80166c8:	9802      	ldrpl	r0, [sp, #8]
 80166ca:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80166ce:	bf58      	it	pl
 80166d0:	eba9 0000 	subpl.w	r0, r9, r0
 80166d4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80166d8:	bf58      	it	pl
 80166da:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80166de:	6021      	str	r1, [r4, #0]
 80166e0:	f04f 0900 	mov.w	r9, #0
 80166e4:	e7ab      	b.n	801663e <_scanf_float+0x182>
 80166e6:	2203      	movs	r2, #3
 80166e8:	e7a9      	b.n	801663e <_scanf_float+0x182>
 80166ea:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80166ee:	9205      	str	r2, [sp, #20]
 80166f0:	4631      	mov	r1, r6
 80166f2:	4638      	mov	r0, r7
 80166f4:	4798      	blx	r3
 80166f6:	9a05      	ldr	r2, [sp, #20]
 80166f8:	2800      	cmp	r0, #0
 80166fa:	f43f af04 	beq.w	8016506 <_scanf_float+0x4a>
 80166fe:	e715      	b.n	801652c <_scanf_float+0x70>
 8016700:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016704:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016708:	4632      	mov	r2, r6
 801670a:	4638      	mov	r0, r7
 801670c:	4798      	blx	r3
 801670e:	6923      	ldr	r3, [r4, #16]
 8016710:	3b01      	subs	r3, #1
 8016712:	6123      	str	r3, [r4, #16]
 8016714:	e715      	b.n	8016542 <_scanf_float+0x86>
 8016716:	f10b 33ff 	add.w	r3, fp, #4294967295
 801671a:	2b06      	cmp	r3, #6
 801671c:	d80a      	bhi.n	8016734 <_scanf_float+0x278>
 801671e:	f1bb 0f02 	cmp.w	fp, #2
 8016722:	d968      	bls.n	80167f6 <_scanf_float+0x33a>
 8016724:	f1ab 0b03 	sub.w	fp, fp, #3
 8016728:	fa5f fb8b 	uxtb.w	fp, fp
 801672c:	eba5 0b0b 	sub.w	fp, r5, fp
 8016730:	455d      	cmp	r5, fp
 8016732:	d14b      	bne.n	80167cc <_scanf_float+0x310>
 8016734:	6823      	ldr	r3, [r4, #0]
 8016736:	05da      	lsls	r2, r3, #23
 8016738:	d51f      	bpl.n	801677a <_scanf_float+0x2be>
 801673a:	055b      	lsls	r3, r3, #21
 801673c:	d468      	bmi.n	8016810 <_scanf_float+0x354>
 801673e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016742:	6923      	ldr	r3, [r4, #16]
 8016744:	2965      	cmp	r1, #101	; 0x65
 8016746:	f103 33ff 	add.w	r3, r3, #4294967295
 801674a:	f105 3bff 	add.w	fp, r5, #4294967295
 801674e:	6123      	str	r3, [r4, #16]
 8016750:	d00d      	beq.n	801676e <_scanf_float+0x2b2>
 8016752:	2945      	cmp	r1, #69	; 0x45
 8016754:	d00b      	beq.n	801676e <_scanf_float+0x2b2>
 8016756:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801675a:	4632      	mov	r2, r6
 801675c:	4638      	mov	r0, r7
 801675e:	4798      	blx	r3
 8016760:	6923      	ldr	r3, [r4, #16]
 8016762:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8016766:	3b01      	subs	r3, #1
 8016768:	f1a5 0b02 	sub.w	fp, r5, #2
 801676c:	6123      	str	r3, [r4, #16]
 801676e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016772:	4632      	mov	r2, r6
 8016774:	4638      	mov	r0, r7
 8016776:	4798      	blx	r3
 8016778:	465d      	mov	r5, fp
 801677a:	6826      	ldr	r6, [r4, #0]
 801677c:	f016 0610 	ands.w	r6, r6, #16
 8016780:	d17a      	bne.n	8016878 <_scanf_float+0x3bc>
 8016782:	702e      	strb	r6, [r5, #0]
 8016784:	6823      	ldr	r3, [r4, #0]
 8016786:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801678a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801678e:	d142      	bne.n	8016816 <_scanf_float+0x35a>
 8016790:	9b02      	ldr	r3, [sp, #8]
 8016792:	eba9 0303 	sub.w	r3, r9, r3
 8016796:	425a      	negs	r2, r3
 8016798:	2b00      	cmp	r3, #0
 801679a:	d149      	bne.n	8016830 <_scanf_float+0x374>
 801679c:	2200      	movs	r2, #0
 801679e:	4641      	mov	r1, r8
 80167a0:	4638      	mov	r0, r7
 80167a2:	f000 fee9 	bl	8017578 <_strtod_r>
 80167a6:	6825      	ldr	r5, [r4, #0]
 80167a8:	f8da 3000 	ldr.w	r3, [sl]
 80167ac:	f015 0f02 	tst.w	r5, #2
 80167b0:	f103 0204 	add.w	r2, r3, #4
 80167b4:	ec59 8b10 	vmov	r8, r9, d0
 80167b8:	f8ca 2000 	str.w	r2, [sl]
 80167bc:	d043      	beq.n	8016846 <_scanf_float+0x38a>
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	e9c3 8900 	strd	r8, r9, [r3]
 80167c4:	68e3      	ldr	r3, [r4, #12]
 80167c6:	3301      	adds	r3, #1
 80167c8:	60e3      	str	r3, [r4, #12]
 80167ca:	e6be      	b.n	801654a <_scanf_float+0x8e>
 80167cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80167d0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80167d4:	4632      	mov	r2, r6
 80167d6:	4638      	mov	r0, r7
 80167d8:	4798      	blx	r3
 80167da:	6923      	ldr	r3, [r4, #16]
 80167dc:	3b01      	subs	r3, #1
 80167de:	6123      	str	r3, [r4, #16]
 80167e0:	e7a6      	b.n	8016730 <_scanf_float+0x274>
 80167e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80167e6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80167ea:	4632      	mov	r2, r6
 80167ec:	4638      	mov	r0, r7
 80167ee:	4798      	blx	r3
 80167f0:	6923      	ldr	r3, [r4, #16]
 80167f2:	3b01      	subs	r3, #1
 80167f4:	6123      	str	r3, [r4, #16]
 80167f6:	4545      	cmp	r5, r8
 80167f8:	d8f3      	bhi.n	80167e2 <_scanf_float+0x326>
 80167fa:	e6a5      	b.n	8016548 <_scanf_float+0x8c>
 80167fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016800:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016804:	4632      	mov	r2, r6
 8016806:	4638      	mov	r0, r7
 8016808:	4798      	blx	r3
 801680a:	6923      	ldr	r3, [r4, #16]
 801680c:	3b01      	subs	r3, #1
 801680e:	6123      	str	r3, [r4, #16]
 8016810:	4545      	cmp	r5, r8
 8016812:	d8f3      	bhi.n	80167fc <_scanf_float+0x340>
 8016814:	e698      	b.n	8016548 <_scanf_float+0x8c>
 8016816:	9b03      	ldr	r3, [sp, #12]
 8016818:	2b00      	cmp	r3, #0
 801681a:	d0bf      	beq.n	801679c <_scanf_float+0x2e0>
 801681c:	9904      	ldr	r1, [sp, #16]
 801681e:	230a      	movs	r3, #10
 8016820:	4632      	mov	r2, r6
 8016822:	3101      	adds	r1, #1
 8016824:	4638      	mov	r0, r7
 8016826:	f000 ff33 	bl	8017690 <_strtol_r>
 801682a:	9b03      	ldr	r3, [sp, #12]
 801682c:	9d04      	ldr	r5, [sp, #16]
 801682e:	1ac2      	subs	r2, r0, r3
 8016830:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016834:	429d      	cmp	r5, r3
 8016836:	bf28      	it	cs
 8016838:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 801683c:	490f      	ldr	r1, [pc, #60]	; (801687c <_scanf_float+0x3c0>)
 801683e:	4628      	mov	r0, r5
 8016840:	f000 f868 	bl	8016914 <siprintf>
 8016844:	e7aa      	b.n	801679c <_scanf_float+0x2e0>
 8016846:	f015 0504 	ands.w	r5, r5, #4
 801684a:	d1b8      	bne.n	80167be <_scanf_float+0x302>
 801684c:	681f      	ldr	r7, [r3, #0]
 801684e:	ee10 2a10 	vmov	r2, s0
 8016852:	464b      	mov	r3, r9
 8016854:	ee10 0a10 	vmov	r0, s0
 8016858:	4649      	mov	r1, r9
 801685a:	f7ea f967 	bl	8000b2c <__aeabi_dcmpun>
 801685e:	b128      	cbz	r0, 801686c <_scanf_float+0x3b0>
 8016860:	4628      	mov	r0, r5
 8016862:	f000 f81d 	bl	80168a0 <nanf>
 8016866:	ed87 0a00 	vstr	s0, [r7]
 801686a:	e7ab      	b.n	80167c4 <_scanf_float+0x308>
 801686c:	4640      	mov	r0, r8
 801686e:	4649      	mov	r1, r9
 8016870:	f7ea f9ba 	bl	8000be8 <__aeabi_d2f>
 8016874:	6038      	str	r0, [r7, #0]
 8016876:	e7a5      	b.n	80167c4 <_scanf_float+0x308>
 8016878:	2600      	movs	r6, #0
 801687a:	e666      	b.n	801654a <_scanf_float+0x8e>
 801687c:	0801b24c 	.word	0x0801b24c

08016880 <_sbrk_r>:
 8016880:	b538      	push	{r3, r4, r5, lr}
 8016882:	4c06      	ldr	r4, [pc, #24]	; (801689c <_sbrk_r+0x1c>)
 8016884:	2300      	movs	r3, #0
 8016886:	4605      	mov	r5, r0
 8016888:	4608      	mov	r0, r1
 801688a:	6023      	str	r3, [r4, #0]
 801688c:	f7f4 fad0 	bl	800ae30 <_sbrk>
 8016890:	1c43      	adds	r3, r0, #1
 8016892:	d102      	bne.n	801689a <_sbrk_r+0x1a>
 8016894:	6823      	ldr	r3, [r4, #0]
 8016896:	b103      	cbz	r3, 801689a <_sbrk_r+0x1a>
 8016898:	602b      	str	r3, [r5, #0]
 801689a:	bd38      	pop	{r3, r4, r5, pc}
 801689c:	2000773c 	.word	0x2000773c

080168a0 <nanf>:
 80168a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80168a8 <nanf+0x8>
 80168a4:	4770      	bx	lr
 80168a6:	bf00      	nop
 80168a8:	7fc00000 	.word	0x7fc00000

080168ac <sniprintf>:
 80168ac:	b40c      	push	{r2, r3}
 80168ae:	b530      	push	{r4, r5, lr}
 80168b0:	4b17      	ldr	r3, [pc, #92]	; (8016910 <sniprintf+0x64>)
 80168b2:	1e0c      	subs	r4, r1, #0
 80168b4:	b09d      	sub	sp, #116	; 0x74
 80168b6:	681d      	ldr	r5, [r3, #0]
 80168b8:	da08      	bge.n	80168cc <sniprintf+0x20>
 80168ba:	238b      	movs	r3, #139	; 0x8b
 80168bc:	602b      	str	r3, [r5, #0]
 80168be:	f04f 30ff 	mov.w	r0, #4294967295
 80168c2:	b01d      	add	sp, #116	; 0x74
 80168c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80168c8:	b002      	add	sp, #8
 80168ca:	4770      	bx	lr
 80168cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80168d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80168d4:	bf14      	ite	ne
 80168d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80168da:	4623      	moveq	r3, r4
 80168dc:	9304      	str	r3, [sp, #16]
 80168de:	9307      	str	r3, [sp, #28]
 80168e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80168e4:	9002      	str	r0, [sp, #8]
 80168e6:	9006      	str	r0, [sp, #24]
 80168e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80168ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80168ee:	ab21      	add	r3, sp, #132	; 0x84
 80168f0:	a902      	add	r1, sp, #8
 80168f2:	4628      	mov	r0, r5
 80168f4:	9301      	str	r3, [sp, #4]
 80168f6:	f002 fcd9 	bl	80192ac <_svfiprintf_r>
 80168fa:	1c43      	adds	r3, r0, #1
 80168fc:	bfbc      	itt	lt
 80168fe:	238b      	movlt	r3, #139	; 0x8b
 8016900:	602b      	strlt	r3, [r5, #0]
 8016902:	2c00      	cmp	r4, #0
 8016904:	d0dd      	beq.n	80168c2 <sniprintf+0x16>
 8016906:	9b02      	ldr	r3, [sp, #8]
 8016908:	2200      	movs	r2, #0
 801690a:	701a      	strb	r2, [r3, #0]
 801690c:	e7d9      	b.n	80168c2 <sniprintf+0x16>
 801690e:	bf00      	nop
 8016910:	200009ac 	.word	0x200009ac

08016914 <siprintf>:
 8016914:	b40e      	push	{r1, r2, r3}
 8016916:	b500      	push	{lr}
 8016918:	b09c      	sub	sp, #112	; 0x70
 801691a:	ab1d      	add	r3, sp, #116	; 0x74
 801691c:	9002      	str	r0, [sp, #8]
 801691e:	9006      	str	r0, [sp, #24]
 8016920:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016924:	4809      	ldr	r0, [pc, #36]	; (801694c <siprintf+0x38>)
 8016926:	9107      	str	r1, [sp, #28]
 8016928:	9104      	str	r1, [sp, #16]
 801692a:	4909      	ldr	r1, [pc, #36]	; (8016950 <siprintf+0x3c>)
 801692c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016930:	9105      	str	r1, [sp, #20]
 8016932:	6800      	ldr	r0, [r0, #0]
 8016934:	9301      	str	r3, [sp, #4]
 8016936:	a902      	add	r1, sp, #8
 8016938:	f002 fcb8 	bl	80192ac <_svfiprintf_r>
 801693c:	9b02      	ldr	r3, [sp, #8]
 801693e:	2200      	movs	r2, #0
 8016940:	701a      	strb	r2, [r3, #0]
 8016942:	b01c      	add	sp, #112	; 0x70
 8016944:	f85d eb04 	ldr.w	lr, [sp], #4
 8016948:	b003      	add	sp, #12
 801694a:	4770      	bx	lr
 801694c:	200009ac 	.word	0x200009ac
 8016950:	ffff0208 	.word	0xffff0208

08016954 <sulp>:
 8016954:	b570      	push	{r4, r5, r6, lr}
 8016956:	4604      	mov	r4, r0
 8016958:	460d      	mov	r5, r1
 801695a:	ec45 4b10 	vmov	d0, r4, r5
 801695e:	4616      	mov	r6, r2
 8016960:	f002 fb08 	bl	8018f74 <__ulp>
 8016964:	ec51 0b10 	vmov	r0, r1, d0
 8016968:	b17e      	cbz	r6, 801698a <sulp+0x36>
 801696a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801696e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016972:	2b00      	cmp	r3, #0
 8016974:	dd09      	ble.n	801698a <sulp+0x36>
 8016976:	051b      	lsls	r3, r3, #20
 8016978:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801697c:	2400      	movs	r4, #0
 801697e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016982:	4622      	mov	r2, r4
 8016984:	462b      	mov	r3, r5
 8016986:	f7e9 fe37 	bl	80005f8 <__aeabi_dmul>
 801698a:	bd70      	pop	{r4, r5, r6, pc}
 801698c:	0000      	movs	r0, r0
	...

08016990 <_strtod_l>:
 8016990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016994:	461f      	mov	r7, r3
 8016996:	b0a1      	sub	sp, #132	; 0x84
 8016998:	2300      	movs	r3, #0
 801699a:	4681      	mov	r9, r0
 801699c:	4638      	mov	r0, r7
 801699e:	460e      	mov	r6, r1
 80169a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80169a2:	931c      	str	r3, [sp, #112]	; 0x70
 80169a4:	f001 fff5 	bl	8018992 <__localeconv_l>
 80169a8:	4680      	mov	r8, r0
 80169aa:	6800      	ldr	r0, [r0, #0]
 80169ac:	f7e9 fc10 	bl	80001d0 <strlen>
 80169b0:	f04f 0a00 	mov.w	sl, #0
 80169b4:	4604      	mov	r4, r0
 80169b6:	f04f 0b00 	mov.w	fp, #0
 80169ba:	961b      	str	r6, [sp, #108]	; 0x6c
 80169bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169be:	781a      	ldrb	r2, [r3, #0]
 80169c0:	2a0d      	cmp	r2, #13
 80169c2:	d832      	bhi.n	8016a2a <_strtod_l+0x9a>
 80169c4:	2a09      	cmp	r2, #9
 80169c6:	d236      	bcs.n	8016a36 <_strtod_l+0xa6>
 80169c8:	2a00      	cmp	r2, #0
 80169ca:	d03e      	beq.n	8016a4a <_strtod_l+0xba>
 80169cc:	2300      	movs	r3, #0
 80169ce:	930d      	str	r3, [sp, #52]	; 0x34
 80169d0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80169d2:	782b      	ldrb	r3, [r5, #0]
 80169d4:	2b30      	cmp	r3, #48	; 0x30
 80169d6:	f040 80ac 	bne.w	8016b32 <_strtod_l+0x1a2>
 80169da:	786b      	ldrb	r3, [r5, #1]
 80169dc:	2b58      	cmp	r3, #88	; 0x58
 80169de:	d001      	beq.n	80169e4 <_strtod_l+0x54>
 80169e0:	2b78      	cmp	r3, #120	; 0x78
 80169e2:	d167      	bne.n	8016ab4 <_strtod_l+0x124>
 80169e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80169e6:	9301      	str	r3, [sp, #4]
 80169e8:	ab1c      	add	r3, sp, #112	; 0x70
 80169ea:	9300      	str	r3, [sp, #0]
 80169ec:	9702      	str	r7, [sp, #8]
 80169ee:	ab1d      	add	r3, sp, #116	; 0x74
 80169f0:	4a88      	ldr	r2, [pc, #544]	; (8016c14 <_strtod_l+0x284>)
 80169f2:	a91b      	add	r1, sp, #108	; 0x6c
 80169f4:	4648      	mov	r0, r9
 80169f6:	f001 fcf2 	bl	80183de <__gethex>
 80169fa:	f010 0407 	ands.w	r4, r0, #7
 80169fe:	4606      	mov	r6, r0
 8016a00:	d005      	beq.n	8016a0e <_strtod_l+0x7e>
 8016a02:	2c06      	cmp	r4, #6
 8016a04:	d12b      	bne.n	8016a5e <_strtod_l+0xce>
 8016a06:	3501      	adds	r5, #1
 8016a08:	2300      	movs	r3, #0
 8016a0a:	951b      	str	r5, [sp, #108]	; 0x6c
 8016a0c:	930d      	str	r3, [sp, #52]	; 0x34
 8016a0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	f040 859a 	bne.w	801754a <_strtod_l+0xbba>
 8016a16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016a18:	b1e3      	cbz	r3, 8016a54 <_strtod_l+0xc4>
 8016a1a:	4652      	mov	r2, sl
 8016a1c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016a20:	ec43 2b10 	vmov	d0, r2, r3
 8016a24:	b021      	add	sp, #132	; 0x84
 8016a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a2a:	2a2b      	cmp	r2, #43	; 0x2b
 8016a2c:	d015      	beq.n	8016a5a <_strtod_l+0xca>
 8016a2e:	2a2d      	cmp	r2, #45	; 0x2d
 8016a30:	d004      	beq.n	8016a3c <_strtod_l+0xac>
 8016a32:	2a20      	cmp	r2, #32
 8016a34:	d1ca      	bne.n	80169cc <_strtod_l+0x3c>
 8016a36:	3301      	adds	r3, #1
 8016a38:	931b      	str	r3, [sp, #108]	; 0x6c
 8016a3a:	e7bf      	b.n	80169bc <_strtod_l+0x2c>
 8016a3c:	2201      	movs	r2, #1
 8016a3e:	920d      	str	r2, [sp, #52]	; 0x34
 8016a40:	1c5a      	adds	r2, r3, #1
 8016a42:	921b      	str	r2, [sp, #108]	; 0x6c
 8016a44:	785b      	ldrb	r3, [r3, #1]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d1c2      	bne.n	80169d0 <_strtod_l+0x40>
 8016a4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016a4c:	961b      	str	r6, [sp, #108]	; 0x6c
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	f040 8579 	bne.w	8017546 <_strtod_l+0xbb6>
 8016a54:	4652      	mov	r2, sl
 8016a56:	465b      	mov	r3, fp
 8016a58:	e7e2      	b.n	8016a20 <_strtod_l+0x90>
 8016a5a:	2200      	movs	r2, #0
 8016a5c:	e7ef      	b.n	8016a3e <_strtod_l+0xae>
 8016a5e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016a60:	b13a      	cbz	r2, 8016a72 <_strtod_l+0xe2>
 8016a62:	2135      	movs	r1, #53	; 0x35
 8016a64:	a81e      	add	r0, sp, #120	; 0x78
 8016a66:	f002 fb7d 	bl	8019164 <__copybits>
 8016a6a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016a6c:	4648      	mov	r0, r9
 8016a6e:	f001 ffe9 	bl	8018a44 <_Bfree>
 8016a72:	3c01      	subs	r4, #1
 8016a74:	2c04      	cmp	r4, #4
 8016a76:	d806      	bhi.n	8016a86 <_strtod_l+0xf6>
 8016a78:	e8df f004 	tbb	[pc, r4]
 8016a7c:	1714030a 	.word	0x1714030a
 8016a80:	0a          	.byte	0x0a
 8016a81:	00          	.byte	0x00
 8016a82:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8016a86:	0730      	lsls	r0, r6, #28
 8016a88:	d5c1      	bpl.n	8016a0e <_strtod_l+0x7e>
 8016a8a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016a8e:	e7be      	b.n	8016a0e <_strtod_l+0x7e>
 8016a90:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8016a94:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016a96:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016a9a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016a9e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016aa2:	e7f0      	b.n	8016a86 <_strtod_l+0xf6>
 8016aa4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016c18 <_strtod_l+0x288>
 8016aa8:	e7ed      	b.n	8016a86 <_strtod_l+0xf6>
 8016aaa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016aae:	f04f 3aff 	mov.w	sl, #4294967295
 8016ab2:	e7e8      	b.n	8016a86 <_strtod_l+0xf6>
 8016ab4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ab6:	1c5a      	adds	r2, r3, #1
 8016ab8:	921b      	str	r2, [sp, #108]	; 0x6c
 8016aba:	785b      	ldrb	r3, [r3, #1]
 8016abc:	2b30      	cmp	r3, #48	; 0x30
 8016abe:	d0f9      	beq.n	8016ab4 <_strtod_l+0x124>
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d0a4      	beq.n	8016a0e <_strtod_l+0x7e>
 8016ac4:	2301      	movs	r3, #1
 8016ac6:	2500      	movs	r5, #0
 8016ac8:	9306      	str	r3, [sp, #24]
 8016aca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016acc:	9308      	str	r3, [sp, #32]
 8016ace:	9507      	str	r5, [sp, #28]
 8016ad0:	9505      	str	r5, [sp, #20]
 8016ad2:	220a      	movs	r2, #10
 8016ad4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016ad6:	7807      	ldrb	r7, [r0, #0]
 8016ad8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016adc:	b2d9      	uxtb	r1, r3
 8016ade:	2909      	cmp	r1, #9
 8016ae0:	d929      	bls.n	8016b36 <_strtod_l+0x1a6>
 8016ae2:	4622      	mov	r2, r4
 8016ae4:	f8d8 1000 	ldr.w	r1, [r8]
 8016ae8:	f002 fcd8 	bl	801949c <strncmp>
 8016aec:	2800      	cmp	r0, #0
 8016aee:	d031      	beq.n	8016b54 <_strtod_l+0x1c4>
 8016af0:	2000      	movs	r0, #0
 8016af2:	9c05      	ldr	r4, [sp, #20]
 8016af4:	9004      	str	r0, [sp, #16]
 8016af6:	463b      	mov	r3, r7
 8016af8:	4602      	mov	r2, r0
 8016afa:	2b65      	cmp	r3, #101	; 0x65
 8016afc:	d001      	beq.n	8016b02 <_strtod_l+0x172>
 8016afe:	2b45      	cmp	r3, #69	; 0x45
 8016b00:	d114      	bne.n	8016b2c <_strtod_l+0x19c>
 8016b02:	b924      	cbnz	r4, 8016b0e <_strtod_l+0x17e>
 8016b04:	b910      	cbnz	r0, 8016b0c <_strtod_l+0x17c>
 8016b06:	9b06      	ldr	r3, [sp, #24]
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d09e      	beq.n	8016a4a <_strtod_l+0xba>
 8016b0c:	2400      	movs	r4, #0
 8016b0e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016b10:	1c73      	adds	r3, r6, #1
 8016b12:	931b      	str	r3, [sp, #108]	; 0x6c
 8016b14:	7873      	ldrb	r3, [r6, #1]
 8016b16:	2b2b      	cmp	r3, #43	; 0x2b
 8016b18:	d078      	beq.n	8016c0c <_strtod_l+0x27c>
 8016b1a:	2b2d      	cmp	r3, #45	; 0x2d
 8016b1c:	d070      	beq.n	8016c00 <_strtod_l+0x270>
 8016b1e:	f04f 0c00 	mov.w	ip, #0
 8016b22:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8016b26:	2f09      	cmp	r7, #9
 8016b28:	d97c      	bls.n	8016c24 <_strtod_l+0x294>
 8016b2a:	961b      	str	r6, [sp, #108]	; 0x6c
 8016b2c:	f04f 0e00 	mov.w	lr, #0
 8016b30:	e09a      	b.n	8016c68 <_strtod_l+0x2d8>
 8016b32:	2300      	movs	r3, #0
 8016b34:	e7c7      	b.n	8016ac6 <_strtod_l+0x136>
 8016b36:	9905      	ldr	r1, [sp, #20]
 8016b38:	2908      	cmp	r1, #8
 8016b3a:	bfdd      	ittte	le
 8016b3c:	9907      	ldrle	r1, [sp, #28]
 8016b3e:	fb02 3301 	mlale	r3, r2, r1, r3
 8016b42:	9307      	strle	r3, [sp, #28]
 8016b44:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016b48:	9b05      	ldr	r3, [sp, #20]
 8016b4a:	3001      	adds	r0, #1
 8016b4c:	3301      	adds	r3, #1
 8016b4e:	9305      	str	r3, [sp, #20]
 8016b50:	901b      	str	r0, [sp, #108]	; 0x6c
 8016b52:	e7bf      	b.n	8016ad4 <_strtod_l+0x144>
 8016b54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b56:	191a      	adds	r2, r3, r4
 8016b58:	921b      	str	r2, [sp, #108]	; 0x6c
 8016b5a:	9a05      	ldr	r2, [sp, #20]
 8016b5c:	5d1b      	ldrb	r3, [r3, r4]
 8016b5e:	2a00      	cmp	r2, #0
 8016b60:	d037      	beq.n	8016bd2 <_strtod_l+0x242>
 8016b62:	9c05      	ldr	r4, [sp, #20]
 8016b64:	4602      	mov	r2, r0
 8016b66:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016b6a:	2909      	cmp	r1, #9
 8016b6c:	d913      	bls.n	8016b96 <_strtod_l+0x206>
 8016b6e:	2101      	movs	r1, #1
 8016b70:	9104      	str	r1, [sp, #16]
 8016b72:	e7c2      	b.n	8016afa <_strtod_l+0x16a>
 8016b74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b76:	1c5a      	adds	r2, r3, #1
 8016b78:	921b      	str	r2, [sp, #108]	; 0x6c
 8016b7a:	785b      	ldrb	r3, [r3, #1]
 8016b7c:	3001      	adds	r0, #1
 8016b7e:	2b30      	cmp	r3, #48	; 0x30
 8016b80:	d0f8      	beq.n	8016b74 <_strtod_l+0x1e4>
 8016b82:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016b86:	2a08      	cmp	r2, #8
 8016b88:	f200 84e4 	bhi.w	8017554 <_strtod_l+0xbc4>
 8016b8c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016b8e:	9208      	str	r2, [sp, #32]
 8016b90:	4602      	mov	r2, r0
 8016b92:	2000      	movs	r0, #0
 8016b94:	4604      	mov	r4, r0
 8016b96:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8016b9a:	f100 0101 	add.w	r1, r0, #1
 8016b9e:	d012      	beq.n	8016bc6 <_strtod_l+0x236>
 8016ba0:	440a      	add	r2, r1
 8016ba2:	eb00 0c04 	add.w	ip, r0, r4
 8016ba6:	4621      	mov	r1, r4
 8016ba8:	270a      	movs	r7, #10
 8016baa:	458c      	cmp	ip, r1
 8016bac:	d113      	bne.n	8016bd6 <_strtod_l+0x246>
 8016bae:	1821      	adds	r1, r4, r0
 8016bb0:	2908      	cmp	r1, #8
 8016bb2:	f104 0401 	add.w	r4, r4, #1
 8016bb6:	4404      	add	r4, r0
 8016bb8:	dc19      	bgt.n	8016bee <_strtod_l+0x25e>
 8016bba:	9b07      	ldr	r3, [sp, #28]
 8016bbc:	210a      	movs	r1, #10
 8016bbe:	fb01 e303 	mla	r3, r1, r3, lr
 8016bc2:	9307      	str	r3, [sp, #28]
 8016bc4:	2100      	movs	r1, #0
 8016bc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016bc8:	1c58      	adds	r0, r3, #1
 8016bca:	901b      	str	r0, [sp, #108]	; 0x6c
 8016bcc:	785b      	ldrb	r3, [r3, #1]
 8016bce:	4608      	mov	r0, r1
 8016bd0:	e7c9      	b.n	8016b66 <_strtod_l+0x1d6>
 8016bd2:	9805      	ldr	r0, [sp, #20]
 8016bd4:	e7d3      	b.n	8016b7e <_strtod_l+0x1ee>
 8016bd6:	2908      	cmp	r1, #8
 8016bd8:	f101 0101 	add.w	r1, r1, #1
 8016bdc:	dc03      	bgt.n	8016be6 <_strtod_l+0x256>
 8016bde:	9b07      	ldr	r3, [sp, #28]
 8016be0:	437b      	muls	r3, r7
 8016be2:	9307      	str	r3, [sp, #28]
 8016be4:	e7e1      	b.n	8016baa <_strtod_l+0x21a>
 8016be6:	2910      	cmp	r1, #16
 8016be8:	bfd8      	it	le
 8016bea:	437d      	mulle	r5, r7
 8016bec:	e7dd      	b.n	8016baa <_strtod_l+0x21a>
 8016bee:	2c10      	cmp	r4, #16
 8016bf0:	bfdc      	itt	le
 8016bf2:	210a      	movle	r1, #10
 8016bf4:	fb01 e505 	mlale	r5, r1, r5, lr
 8016bf8:	e7e4      	b.n	8016bc4 <_strtod_l+0x234>
 8016bfa:	2301      	movs	r3, #1
 8016bfc:	9304      	str	r3, [sp, #16]
 8016bfe:	e781      	b.n	8016b04 <_strtod_l+0x174>
 8016c00:	f04f 0c01 	mov.w	ip, #1
 8016c04:	1cb3      	adds	r3, r6, #2
 8016c06:	931b      	str	r3, [sp, #108]	; 0x6c
 8016c08:	78b3      	ldrb	r3, [r6, #2]
 8016c0a:	e78a      	b.n	8016b22 <_strtod_l+0x192>
 8016c0c:	f04f 0c00 	mov.w	ip, #0
 8016c10:	e7f8      	b.n	8016c04 <_strtod_l+0x274>
 8016c12:	bf00      	nop
 8016c14:	0801b254 	.word	0x0801b254
 8016c18:	7ff00000 	.word	0x7ff00000
 8016c1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016c1e:	1c5f      	adds	r7, r3, #1
 8016c20:	971b      	str	r7, [sp, #108]	; 0x6c
 8016c22:	785b      	ldrb	r3, [r3, #1]
 8016c24:	2b30      	cmp	r3, #48	; 0x30
 8016c26:	d0f9      	beq.n	8016c1c <_strtod_l+0x28c>
 8016c28:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016c2c:	2f08      	cmp	r7, #8
 8016c2e:	f63f af7d 	bhi.w	8016b2c <_strtod_l+0x19c>
 8016c32:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016c36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016c38:	930a      	str	r3, [sp, #40]	; 0x28
 8016c3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016c3c:	1c5f      	adds	r7, r3, #1
 8016c3e:	971b      	str	r7, [sp, #108]	; 0x6c
 8016c40:	785b      	ldrb	r3, [r3, #1]
 8016c42:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8016c46:	f1b8 0f09 	cmp.w	r8, #9
 8016c4a:	d937      	bls.n	8016cbc <_strtod_l+0x32c>
 8016c4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016c4e:	1a7f      	subs	r7, r7, r1
 8016c50:	2f08      	cmp	r7, #8
 8016c52:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016c56:	dc37      	bgt.n	8016cc8 <_strtod_l+0x338>
 8016c58:	45be      	cmp	lr, r7
 8016c5a:	bfa8      	it	ge
 8016c5c:	46be      	movge	lr, r7
 8016c5e:	f1bc 0f00 	cmp.w	ip, #0
 8016c62:	d001      	beq.n	8016c68 <_strtod_l+0x2d8>
 8016c64:	f1ce 0e00 	rsb	lr, lr, #0
 8016c68:	2c00      	cmp	r4, #0
 8016c6a:	d151      	bne.n	8016d10 <_strtod_l+0x380>
 8016c6c:	2800      	cmp	r0, #0
 8016c6e:	f47f aece 	bne.w	8016a0e <_strtod_l+0x7e>
 8016c72:	9a06      	ldr	r2, [sp, #24]
 8016c74:	2a00      	cmp	r2, #0
 8016c76:	f47f aeca 	bne.w	8016a0e <_strtod_l+0x7e>
 8016c7a:	9a04      	ldr	r2, [sp, #16]
 8016c7c:	2a00      	cmp	r2, #0
 8016c7e:	f47f aee4 	bne.w	8016a4a <_strtod_l+0xba>
 8016c82:	2b4e      	cmp	r3, #78	; 0x4e
 8016c84:	d027      	beq.n	8016cd6 <_strtod_l+0x346>
 8016c86:	dc21      	bgt.n	8016ccc <_strtod_l+0x33c>
 8016c88:	2b49      	cmp	r3, #73	; 0x49
 8016c8a:	f47f aede 	bne.w	8016a4a <_strtod_l+0xba>
 8016c8e:	49a0      	ldr	r1, [pc, #640]	; (8016f10 <_strtod_l+0x580>)
 8016c90:	a81b      	add	r0, sp, #108	; 0x6c
 8016c92:	f001 fdd7 	bl	8018844 <__match>
 8016c96:	2800      	cmp	r0, #0
 8016c98:	f43f aed7 	beq.w	8016a4a <_strtod_l+0xba>
 8016c9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016c9e:	499d      	ldr	r1, [pc, #628]	; (8016f14 <_strtod_l+0x584>)
 8016ca0:	3b01      	subs	r3, #1
 8016ca2:	a81b      	add	r0, sp, #108	; 0x6c
 8016ca4:	931b      	str	r3, [sp, #108]	; 0x6c
 8016ca6:	f001 fdcd 	bl	8018844 <__match>
 8016caa:	b910      	cbnz	r0, 8016cb2 <_strtod_l+0x322>
 8016cac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016cae:	3301      	adds	r3, #1
 8016cb0:	931b      	str	r3, [sp, #108]	; 0x6c
 8016cb2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016f28 <_strtod_l+0x598>
 8016cb6:	f04f 0a00 	mov.w	sl, #0
 8016cba:	e6a8      	b.n	8016a0e <_strtod_l+0x7e>
 8016cbc:	210a      	movs	r1, #10
 8016cbe:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016cc2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016cc6:	e7b8      	b.n	8016c3a <_strtod_l+0x2aa>
 8016cc8:	46be      	mov	lr, r7
 8016cca:	e7c8      	b.n	8016c5e <_strtod_l+0x2ce>
 8016ccc:	2b69      	cmp	r3, #105	; 0x69
 8016cce:	d0de      	beq.n	8016c8e <_strtod_l+0x2fe>
 8016cd0:	2b6e      	cmp	r3, #110	; 0x6e
 8016cd2:	f47f aeba 	bne.w	8016a4a <_strtod_l+0xba>
 8016cd6:	4990      	ldr	r1, [pc, #576]	; (8016f18 <_strtod_l+0x588>)
 8016cd8:	a81b      	add	r0, sp, #108	; 0x6c
 8016cda:	f001 fdb3 	bl	8018844 <__match>
 8016cde:	2800      	cmp	r0, #0
 8016ce0:	f43f aeb3 	beq.w	8016a4a <_strtod_l+0xba>
 8016ce4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ce6:	781b      	ldrb	r3, [r3, #0]
 8016ce8:	2b28      	cmp	r3, #40	; 0x28
 8016cea:	d10e      	bne.n	8016d0a <_strtod_l+0x37a>
 8016cec:	aa1e      	add	r2, sp, #120	; 0x78
 8016cee:	498b      	ldr	r1, [pc, #556]	; (8016f1c <_strtod_l+0x58c>)
 8016cf0:	a81b      	add	r0, sp, #108	; 0x6c
 8016cf2:	f001 fdbb 	bl	801886c <__hexnan>
 8016cf6:	2805      	cmp	r0, #5
 8016cf8:	d107      	bne.n	8016d0a <_strtod_l+0x37a>
 8016cfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016cfc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016d00:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016d04:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016d08:	e681      	b.n	8016a0e <_strtod_l+0x7e>
 8016d0a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016f30 <_strtod_l+0x5a0>
 8016d0e:	e7d2      	b.n	8016cb6 <_strtod_l+0x326>
 8016d10:	ebae 0302 	sub.w	r3, lr, r2
 8016d14:	9306      	str	r3, [sp, #24]
 8016d16:	9b05      	ldr	r3, [sp, #20]
 8016d18:	9807      	ldr	r0, [sp, #28]
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	bf08      	it	eq
 8016d1e:	4623      	moveq	r3, r4
 8016d20:	2c10      	cmp	r4, #16
 8016d22:	9305      	str	r3, [sp, #20]
 8016d24:	46a0      	mov	r8, r4
 8016d26:	bfa8      	it	ge
 8016d28:	f04f 0810 	movge.w	r8, #16
 8016d2c:	f7e9 fbea 	bl	8000504 <__aeabi_ui2d>
 8016d30:	2c09      	cmp	r4, #9
 8016d32:	4682      	mov	sl, r0
 8016d34:	468b      	mov	fp, r1
 8016d36:	dc13      	bgt.n	8016d60 <_strtod_l+0x3d0>
 8016d38:	9b06      	ldr	r3, [sp, #24]
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	f43f ae67 	beq.w	8016a0e <_strtod_l+0x7e>
 8016d40:	9b06      	ldr	r3, [sp, #24]
 8016d42:	dd7a      	ble.n	8016e3a <_strtod_l+0x4aa>
 8016d44:	2b16      	cmp	r3, #22
 8016d46:	dc61      	bgt.n	8016e0c <_strtod_l+0x47c>
 8016d48:	4a75      	ldr	r2, [pc, #468]	; (8016f20 <_strtod_l+0x590>)
 8016d4a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016d4e:	e9de 0100 	ldrd	r0, r1, [lr]
 8016d52:	4652      	mov	r2, sl
 8016d54:	465b      	mov	r3, fp
 8016d56:	f7e9 fc4f 	bl	80005f8 <__aeabi_dmul>
 8016d5a:	4682      	mov	sl, r0
 8016d5c:	468b      	mov	fp, r1
 8016d5e:	e656      	b.n	8016a0e <_strtod_l+0x7e>
 8016d60:	4b6f      	ldr	r3, [pc, #444]	; (8016f20 <_strtod_l+0x590>)
 8016d62:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016d66:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016d6a:	f7e9 fc45 	bl	80005f8 <__aeabi_dmul>
 8016d6e:	4606      	mov	r6, r0
 8016d70:	4628      	mov	r0, r5
 8016d72:	460f      	mov	r7, r1
 8016d74:	f7e9 fbc6 	bl	8000504 <__aeabi_ui2d>
 8016d78:	4602      	mov	r2, r0
 8016d7a:	460b      	mov	r3, r1
 8016d7c:	4630      	mov	r0, r6
 8016d7e:	4639      	mov	r1, r7
 8016d80:	f7e9 fa84 	bl	800028c <__adddf3>
 8016d84:	2c0f      	cmp	r4, #15
 8016d86:	4682      	mov	sl, r0
 8016d88:	468b      	mov	fp, r1
 8016d8a:	ddd5      	ble.n	8016d38 <_strtod_l+0x3a8>
 8016d8c:	9b06      	ldr	r3, [sp, #24]
 8016d8e:	eba4 0808 	sub.w	r8, r4, r8
 8016d92:	4498      	add	r8, r3
 8016d94:	f1b8 0f00 	cmp.w	r8, #0
 8016d98:	f340 8096 	ble.w	8016ec8 <_strtod_l+0x538>
 8016d9c:	f018 030f 	ands.w	r3, r8, #15
 8016da0:	d00a      	beq.n	8016db8 <_strtod_l+0x428>
 8016da2:	495f      	ldr	r1, [pc, #380]	; (8016f20 <_strtod_l+0x590>)
 8016da4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016da8:	4652      	mov	r2, sl
 8016daa:	465b      	mov	r3, fp
 8016dac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016db0:	f7e9 fc22 	bl	80005f8 <__aeabi_dmul>
 8016db4:	4682      	mov	sl, r0
 8016db6:	468b      	mov	fp, r1
 8016db8:	f038 080f 	bics.w	r8, r8, #15
 8016dbc:	d073      	beq.n	8016ea6 <_strtod_l+0x516>
 8016dbe:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016dc2:	dd47      	ble.n	8016e54 <_strtod_l+0x4c4>
 8016dc4:	2400      	movs	r4, #0
 8016dc6:	46a0      	mov	r8, r4
 8016dc8:	9407      	str	r4, [sp, #28]
 8016dca:	9405      	str	r4, [sp, #20]
 8016dcc:	2322      	movs	r3, #34	; 0x22
 8016dce:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016f28 <_strtod_l+0x598>
 8016dd2:	f8c9 3000 	str.w	r3, [r9]
 8016dd6:	f04f 0a00 	mov.w	sl, #0
 8016dda:	9b07      	ldr	r3, [sp, #28]
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	f43f ae16 	beq.w	8016a0e <_strtod_l+0x7e>
 8016de2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016de4:	4648      	mov	r0, r9
 8016de6:	f001 fe2d 	bl	8018a44 <_Bfree>
 8016dea:	9905      	ldr	r1, [sp, #20]
 8016dec:	4648      	mov	r0, r9
 8016dee:	f001 fe29 	bl	8018a44 <_Bfree>
 8016df2:	4641      	mov	r1, r8
 8016df4:	4648      	mov	r0, r9
 8016df6:	f001 fe25 	bl	8018a44 <_Bfree>
 8016dfa:	9907      	ldr	r1, [sp, #28]
 8016dfc:	4648      	mov	r0, r9
 8016dfe:	f001 fe21 	bl	8018a44 <_Bfree>
 8016e02:	4621      	mov	r1, r4
 8016e04:	4648      	mov	r0, r9
 8016e06:	f001 fe1d 	bl	8018a44 <_Bfree>
 8016e0a:	e600      	b.n	8016a0e <_strtod_l+0x7e>
 8016e0c:	9a06      	ldr	r2, [sp, #24]
 8016e0e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016e12:	4293      	cmp	r3, r2
 8016e14:	dbba      	blt.n	8016d8c <_strtod_l+0x3fc>
 8016e16:	4d42      	ldr	r5, [pc, #264]	; (8016f20 <_strtod_l+0x590>)
 8016e18:	f1c4 040f 	rsb	r4, r4, #15
 8016e1c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016e20:	4652      	mov	r2, sl
 8016e22:	465b      	mov	r3, fp
 8016e24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016e28:	f7e9 fbe6 	bl	80005f8 <__aeabi_dmul>
 8016e2c:	9b06      	ldr	r3, [sp, #24]
 8016e2e:	1b1c      	subs	r4, r3, r4
 8016e30:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016e34:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016e38:	e78d      	b.n	8016d56 <_strtod_l+0x3c6>
 8016e3a:	f113 0f16 	cmn.w	r3, #22
 8016e3e:	dba5      	blt.n	8016d8c <_strtod_l+0x3fc>
 8016e40:	4a37      	ldr	r2, [pc, #220]	; (8016f20 <_strtod_l+0x590>)
 8016e42:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016e46:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016e4a:	4650      	mov	r0, sl
 8016e4c:	4659      	mov	r1, fp
 8016e4e:	f7e9 fcfd 	bl	800084c <__aeabi_ddiv>
 8016e52:	e782      	b.n	8016d5a <_strtod_l+0x3ca>
 8016e54:	2300      	movs	r3, #0
 8016e56:	4e33      	ldr	r6, [pc, #204]	; (8016f24 <_strtod_l+0x594>)
 8016e58:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016e5c:	4650      	mov	r0, sl
 8016e5e:	4659      	mov	r1, fp
 8016e60:	461d      	mov	r5, r3
 8016e62:	f1b8 0f01 	cmp.w	r8, #1
 8016e66:	dc21      	bgt.n	8016eac <_strtod_l+0x51c>
 8016e68:	b10b      	cbz	r3, 8016e6e <_strtod_l+0x4de>
 8016e6a:	4682      	mov	sl, r0
 8016e6c:	468b      	mov	fp, r1
 8016e6e:	4b2d      	ldr	r3, [pc, #180]	; (8016f24 <_strtod_l+0x594>)
 8016e70:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016e74:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016e78:	4652      	mov	r2, sl
 8016e7a:	465b      	mov	r3, fp
 8016e7c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016e80:	f7e9 fbba 	bl	80005f8 <__aeabi_dmul>
 8016e84:	4b28      	ldr	r3, [pc, #160]	; (8016f28 <_strtod_l+0x598>)
 8016e86:	460a      	mov	r2, r1
 8016e88:	400b      	ands	r3, r1
 8016e8a:	4928      	ldr	r1, [pc, #160]	; (8016f2c <_strtod_l+0x59c>)
 8016e8c:	428b      	cmp	r3, r1
 8016e8e:	4682      	mov	sl, r0
 8016e90:	d898      	bhi.n	8016dc4 <_strtod_l+0x434>
 8016e92:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016e96:	428b      	cmp	r3, r1
 8016e98:	bf86      	itte	hi
 8016e9a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016f34 <_strtod_l+0x5a4>
 8016e9e:	f04f 3aff 	movhi.w	sl, #4294967295
 8016ea2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016ea6:	2300      	movs	r3, #0
 8016ea8:	9304      	str	r3, [sp, #16]
 8016eaa:	e077      	b.n	8016f9c <_strtod_l+0x60c>
 8016eac:	f018 0f01 	tst.w	r8, #1
 8016eb0:	d006      	beq.n	8016ec0 <_strtod_l+0x530>
 8016eb2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eba:	f7e9 fb9d 	bl	80005f8 <__aeabi_dmul>
 8016ebe:	2301      	movs	r3, #1
 8016ec0:	3501      	adds	r5, #1
 8016ec2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016ec6:	e7cc      	b.n	8016e62 <_strtod_l+0x4d2>
 8016ec8:	d0ed      	beq.n	8016ea6 <_strtod_l+0x516>
 8016eca:	f1c8 0800 	rsb	r8, r8, #0
 8016ece:	f018 020f 	ands.w	r2, r8, #15
 8016ed2:	d00a      	beq.n	8016eea <_strtod_l+0x55a>
 8016ed4:	4b12      	ldr	r3, [pc, #72]	; (8016f20 <_strtod_l+0x590>)
 8016ed6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016eda:	4650      	mov	r0, sl
 8016edc:	4659      	mov	r1, fp
 8016ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ee2:	f7e9 fcb3 	bl	800084c <__aeabi_ddiv>
 8016ee6:	4682      	mov	sl, r0
 8016ee8:	468b      	mov	fp, r1
 8016eea:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016eee:	d0da      	beq.n	8016ea6 <_strtod_l+0x516>
 8016ef0:	f1b8 0f1f 	cmp.w	r8, #31
 8016ef4:	dd20      	ble.n	8016f38 <_strtod_l+0x5a8>
 8016ef6:	2400      	movs	r4, #0
 8016ef8:	46a0      	mov	r8, r4
 8016efa:	9407      	str	r4, [sp, #28]
 8016efc:	9405      	str	r4, [sp, #20]
 8016efe:	2322      	movs	r3, #34	; 0x22
 8016f00:	f04f 0a00 	mov.w	sl, #0
 8016f04:	f04f 0b00 	mov.w	fp, #0
 8016f08:	f8c9 3000 	str.w	r3, [r9]
 8016f0c:	e765      	b.n	8016dda <_strtod_l+0x44a>
 8016f0e:	bf00      	nop
 8016f10:	0801b21d 	.word	0x0801b21d
 8016f14:	0801b2ab 	.word	0x0801b2ab
 8016f18:	0801b225 	.word	0x0801b225
 8016f1c:	0801b268 	.word	0x0801b268
 8016f20:	0801b2e8 	.word	0x0801b2e8
 8016f24:	0801b2c0 	.word	0x0801b2c0
 8016f28:	7ff00000 	.word	0x7ff00000
 8016f2c:	7ca00000 	.word	0x7ca00000
 8016f30:	fff80000 	.word	0xfff80000
 8016f34:	7fefffff 	.word	0x7fefffff
 8016f38:	f018 0310 	ands.w	r3, r8, #16
 8016f3c:	bf18      	it	ne
 8016f3e:	236a      	movne	r3, #106	; 0x6a
 8016f40:	4da0      	ldr	r5, [pc, #640]	; (80171c4 <_strtod_l+0x834>)
 8016f42:	9304      	str	r3, [sp, #16]
 8016f44:	4650      	mov	r0, sl
 8016f46:	4659      	mov	r1, fp
 8016f48:	2300      	movs	r3, #0
 8016f4a:	f1b8 0f00 	cmp.w	r8, #0
 8016f4e:	f300 810a 	bgt.w	8017166 <_strtod_l+0x7d6>
 8016f52:	b10b      	cbz	r3, 8016f58 <_strtod_l+0x5c8>
 8016f54:	4682      	mov	sl, r0
 8016f56:	468b      	mov	fp, r1
 8016f58:	9b04      	ldr	r3, [sp, #16]
 8016f5a:	b1bb      	cbz	r3, 8016f8c <_strtod_l+0x5fc>
 8016f5c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016f60:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	4659      	mov	r1, fp
 8016f68:	dd10      	ble.n	8016f8c <_strtod_l+0x5fc>
 8016f6a:	2b1f      	cmp	r3, #31
 8016f6c:	f340 8107 	ble.w	801717e <_strtod_l+0x7ee>
 8016f70:	2b34      	cmp	r3, #52	; 0x34
 8016f72:	bfde      	ittt	le
 8016f74:	3b20      	suble	r3, #32
 8016f76:	f04f 32ff 	movle.w	r2, #4294967295
 8016f7a:	fa02 f303 	lslle.w	r3, r2, r3
 8016f7e:	f04f 0a00 	mov.w	sl, #0
 8016f82:	bfcc      	ite	gt
 8016f84:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016f88:	ea03 0b01 	andle.w	fp, r3, r1
 8016f8c:	2200      	movs	r2, #0
 8016f8e:	2300      	movs	r3, #0
 8016f90:	4650      	mov	r0, sl
 8016f92:	4659      	mov	r1, fp
 8016f94:	f7e9 fd98 	bl	8000ac8 <__aeabi_dcmpeq>
 8016f98:	2800      	cmp	r0, #0
 8016f9a:	d1ac      	bne.n	8016ef6 <_strtod_l+0x566>
 8016f9c:	9b07      	ldr	r3, [sp, #28]
 8016f9e:	9300      	str	r3, [sp, #0]
 8016fa0:	9a05      	ldr	r2, [sp, #20]
 8016fa2:	9908      	ldr	r1, [sp, #32]
 8016fa4:	4623      	mov	r3, r4
 8016fa6:	4648      	mov	r0, r9
 8016fa8:	f001 fd9e 	bl	8018ae8 <__s2b>
 8016fac:	9007      	str	r0, [sp, #28]
 8016fae:	2800      	cmp	r0, #0
 8016fb0:	f43f af08 	beq.w	8016dc4 <_strtod_l+0x434>
 8016fb4:	9a06      	ldr	r2, [sp, #24]
 8016fb6:	9b06      	ldr	r3, [sp, #24]
 8016fb8:	2a00      	cmp	r2, #0
 8016fba:	f1c3 0300 	rsb	r3, r3, #0
 8016fbe:	bfa8      	it	ge
 8016fc0:	2300      	movge	r3, #0
 8016fc2:	930e      	str	r3, [sp, #56]	; 0x38
 8016fc4:	2400      	movs	r4, #0
 8016fc6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016fca:	9316      	str	r3, [sp, #88]	; 0x58
 8016fcc:	46a0      	mov	r8, r4
 8016fce:	9b07      	ldr	r3, [sp, #28]
 8016fd0:	4648      	mov	r0, r9
 8016fd2:	6859      	ldr	r1, [r3, #4]
 8016fd4:	f001 fd02 	bl	80189dc <_Balloc>
 8016fd8:	9005      	str	r0, [sp, #20]
 8016fda:	2800      	cmp	r0, #0
 8016fdc:	f43f aef6 	beq.w	8016dcc <_strtod_l+0x43c>
 8016fe0:	9b07      	ldr	r3, [sp, #28]
 8016fe2:	691a      	ldr	r2, [r3, #16]
 8016fe4:	3202      	adds	r2, #2
 8016fe6:	f103 010c 	add.w	r1, r3, #12
 8016fea:	0092      	lsls	r2, r2, #2
 8016fec:	300c      	adds	r0, #12
 8016fee:	f7fe fd35 	bl	8015a5c <memcpy>
 8016ff2:	aa1e      	add	r2, sp, #120	; 0x78
 8016ff4:	a91d      	add	r1, sp, #116	; 0x74
 8016ff6:	ec4b ab10 	vmov	d0, sl, fp
 8016ffa:	4648      	mov	r0, r9
 8016ffc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8017000:	f002 f82e 	bl	8019060 <__d2b>
 8017004:	901c      	str	r0, [sp, #112]	; 0x70
 8017006:	2800      	cmp	r0, #0
 8017008:	f43f aee0 	beq.w	8016dcc <_strtod_l+0x43c>
 801700c:	2101      	movs	r1, #1
 801700e:	4648      	mov	r0, r9
 8017010:	f001 fdf6 	bl	8018c00 <__i2b>
 8017014:	4680      	mov	r8, r0
 8017016:	2800      	cmp	r0, #0
 8017018:	f43f aed8 	beq.w	8016dcc <_strtod_l+0x43c>
 801701c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801701e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017020:	2e00      	cmp	r6, #0
 8017022:	bfab      	itete	ge
 8017024:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8017026:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8017028:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801702a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801702c:	bfac      	ite	ge
 801702e:	18f7      	addge	r7, r6, r3
 8017030:	1b9d      	sublt	r5, r3, r6
 8017032:	9b04      	ldr	r3, [sp, #16]
 8017034:	1af6      	subs	r6, r6, r3
 8017036:	4416      	add	r6, r2
 8017038:	4b63      	ldr	r3, [pc, #396]	; (80171c8 <_strtod_l+0x838>)
 801703a:	3e01      	subs	r6, #1
 801703c:	429e      	cmp	r6, r3
 801703e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017042:	f280 80af 	bge.w	80171a4 <_strtod_l+0x814>
 8017046:	1b9b      	subs	r3, r3, r6
 8017048:	2b1f      	cmp	r3, #31
 801704a:	eba2 0203 	sub.w	r2, r2, r3
 801704e:	f04f 0101 	mov.w	r1, #1
 8017052:	f300 809b 	bgt.w	801718c <_strtod_l+0x7fc>
 8017056:	fa01 f303 	lsl.w	r3, r1, r3
 801705a:	930f      	str	r3, [sp, #60]	; 0x3c
 801705c:	2300      	movs	r3, #0
 801705e:	930a      	str	r3, [sp, #40]	; 0x28
 8017060:	18be      	adds	r6, r7, r2
 8017062:	9b04      	ldr	r3, [sp, #16]
 8017064:	42b7      	cmp	r7, r6
 8017066:	4415      	add	r5, r2
 8017068:	441d      	add	r5, r3
 801706a:	463b      	mov	r3, r7
 801706c:	bfa8      	it	ge
 801706e:	4633      	movge	r3, r6
 8017070:	42ab      	cmp	r3, r5
 8017072:	bfa8      	it	ge
 8017074:	462b      	movge	r3, r5
 8017076:	2b00      	cmp	r3, #0
 8017078:	bfc2      	ittt	gt
 801707a:	1af6      	subgt	r6, r6, r3
 801707c:	1aed      	subgt	r5, r5, r3
 801707e:	1aff      	subgt	r7, r7, r3
 8017080:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017082:	b1bb      	cbz	r3, 80170b4 <_strtod_l+0x724>
 8017084:	4641      	mov	r1, r8
 8017086:	461a      	mov	r2, r3
 8017088:	4648      	mov	r0, r9
 801708a:	f001 fe59 	bl	8018d40 <__pow5mult>
 801708e:	4680      	mov	r8, r0
 8017090:	2800      	cmp	r0, #0
 8017092:	f43f ae9b 	beq.w	8016dcc <_strtod_l+0x43c>
 8017096:	4601      	mov	r1, r0
 8017098:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801709a:	4648      	mov	r0, r9
 801709c:	f001 fdb9 	bl	8018c12 <__multiply>
 80170a0:	900c      	str	r0, [sp, #48]	; 0x30
 80170a2:	2800      	cmp	r0, #0
 80170a4:	f43f ae92 	beq.w	8016dcc <_strtod_l+0x43c>
 80170a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80170aa:	4648      	mov	r0, r9
 80170ac:	f001 fcca 	bl	8018a44 <_Bfree>
 80170b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80170b2:	931c      	str	r3, [sp, #112]	; 0x70
 80170b4:	2e00      	cmp	r6, #0
 80170b6:	dc7a      	bgt.n	80171ae <_strtod_l+0x81e>
 80170b8:	9b06      	ldr	r3, [sp, #24]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	dd08      	ble.n	80170d0 <_strtod_l+0x740>
 80170be:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80170c0:	9905      	ldr	r1, [sp, #20]
 80170c2:	4648      	mov	r0, r9
 80170c4:	f001 fe3c 	bl	8018d40 <__pow5mult>
 80170c8:	9005      	str	r0, [sp, #20]
 80170ca:	2800      	cmp	r0, #0
 80170cc:	f43f ae7e 	beq.w	8016dcc <_strtod_l+0x43c>
 80170d0:	2d00      	cmp	r5, #0
 80170d2:	dd08      	ble.n	80170e6 <_strtod_l+0x756>
 80170d4:	462a      	mov	r2, r5
 80170d6:	9905      	ldr	r1, [sp, #20]
 80170d8:	4648      	mov	r0, r9
 80170da:	f001 fe7f 	bl	8018ddc <__lshift>
 80170de:	9005      	str	r0, [sp, #20]
 80170e0:	2800      	cmp	r0, #0
 80170e2:	f43f ae73 	beq.w	8016dcc <_strtod_l+0x43c>
 80170e6:	2f00      	cmp	r7, #0
 80170e8:	dd08      	ble.n	80170fc <_strtod_l+0x76c>
 80170ea:	4641      	mov	r1, r8
 80170ec:	463a      	mov	r2, r7
 80170ee:	4648      	mov	r0, r9
 80170f0:	f001 fe74 	bl	8018ddc <__lshift>
 80170f4:	4680      	mov	r8, r0
 80170f6:	2800      	cmp	r0, #0
 80170f8:	f43f ae68 	beq.w	8016dcc <_strtod_l+0x43c>
 80170fc:	9a05      	ldr	r2, [sp, #20]
 80170fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017100:	4648      	mov	r0, r9
 8017102:	f001 fed9 	bl	8018eb8 <__mdiff>
 8017106:	4604      	mov	r4, r0
 8017108:	2800      	cmp	r0, #0
 801710a:	f43f ae5f 	beq.w	8016dcc <_strtod_l+0x43c>
 801710e:	68c3      	ldr	r3, [r0, #12]
 8017110:	930c      	str	r3, [sp, #48]	; 0x30
 8017112:	2300      	movs	r3, #0
 8017114:	60c3      	str	r3, [r0, #12]
 8017116:	4641      	mov	r1, r8
 8017118:	f001 feb4 	bl	8018e84 <__mcmp>
 801711c:	2800      	cmp	r0, #0
 801711e:	da55      	bge.n	80171cc <_strtod_l+0x83c>
 8017120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017122:	b9e3      	cbnz	r3, 801715e <_strtod_l+0x7ce>
 8017124:	f1ba 0f00 	cmp.w	sl, #0
 8017128:	d119      	bne.n	801715e <_strtod_l+0x7ce>
 801712a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801712e:	b9b3      	cbnz	r3, 801715e <_strtod_l+0x7ce>
 8017130:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017134:	0d1b      	lsrs	r3, r3, #20
 8017136:	051b      	lsls	r3, r3, #20
 8017138:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801713c:	d90f      	bls.n	801715e <_strtod_l+0x7ce>
 801713e:	6963      	ldr	r3, [r4, #20]
 8017140:	b913      	cbnz	r3, 8017148 <_strtod_l+0x7b8>
 8017142:	6923      	ldr	r3, [r4, #16]
 8017144:	2b01      	cmp	r3, #1
 8017146:	dd0a      	ble.n	801715e <_strtod_l+0x7ce>
 8017148:	4621      	mov	r1, r4
 801714a:	2201      	movs	r2, #1
 801714c:	4648      	mov	r0, r9
 801714e:	f001 fe45 	bl	8018ddc <__lshift>
 8017152:	4641      	mov	r1, r8
 8017154:	4604      	mov	r4, r0
 8017156:	f001 fe95 	bl	8018e84 <__mcmp>
 801715a:	2800      	cmp	r0, #0
 801715c:	dc67      	bgt.n	801722e <_strtod_l+0x89e>
 801715e:	9b04      	ldr	r3, [sp, #16]
 8017160:	2b00      	cmp	r3, #0
 8017162:	d171      	bne.n	8017248 <_strtod_l+0x8b8>
 8017164:	e63d      	b.n	8016de2 <_strtod_l+0x452>
 8017166:	f018 0f01 	tst.w	r8, #1
 801716a:	d004      	beq.n	8017176 <_strtod_l+0x7e6>
 801716c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017170:	f7e9 fa42 	bl	80005f8 <__aeabi_dmul>
 8017174:	2301      	movs	r3, #1
 8017176:	ea4f 0868 	mov.w	r8, r8, asr #1
 801717a:	3508      	adds	r5, #8
 801717c:	e6e5      	b.n	8016f4a <_strtod_l+0x5ba>
 801717e:	f04f 32ff 	mov.w	r2, #4294967295
 8017182:	fa02 f303 	lsl.w	r3, r2, r3
 8017186:	ea03 0a0a 	and.w	sl, r3, sl
 801718a:	e6ff      	b.n	8016f8c <_strtod_l+0x5fc>
 801718c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8017190:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8017194:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8017198:	36e2      	adds	r6, #226	; 0xe2
 801719a:	fa01 f306 	lsl.w	r3, r1, r6
 801719e:	930a      	str	r3, [sp, #40]	; 0x28
 80171a0:	910f      	str	r1, [sp, #60]	; 0x3c
 80171a2:	e75d      	b.n	8017060 <_strtod_l+0x6d0>
 80171a4:	2300      	movs	r3, #0
 80171a6:	930a      	str	r3, [sp, #40]	; 0x28
 80171a8:	2301      	movs	r3, #1
 80171aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80171ac:	e758      	b.n	8017060 <_strtod_l+0x6d0>
 80171ae:	4632      	mov	r2, r6
 80171b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80171b2:	4648      	mov	r0, r9
 80171b4:	f001 fe12 	bl	8018ddc <__lshift>
 80171b8:	901c      	str	r0, [sp, #112]	; 0x70
 80171ba:	2800      	cmp	r0, #0
 80171bc:	f47f af7c 	bne.w	80170b8 <_strtod_l+0x728>
 80171c0:	e604      	b.n	8016dcc <_strtod_l+0x43c>
 80171c2:	bf00      	nop
 80171c4:	0801b280 	.word	0x0801b280
 80171c8:	fffffc02 	.word	0xfffffc02
 80171cc:	465d      	mov	r5, fp
 80171ce:	f040 8086 	bne.w	80172de <_strtod_l+0x94e>
 80171d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80171d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80171d8:	b32a      	cbz	r2, 8017226 <_strtod_l+0x896>
 80171da:	4aaf      	ldr	r2, [pc, #700]	; (8017498 <_strtod_l+0xb08>)
 80171dc:	4293      	cmp	r3, r2
 80171de:	d153      	bne.n	8017288 <_strtod_l+0x8f8>
 80171e0:	9b04      	ldr	r3, [sp, #16]
 80171e2:	4650      	mov	r0, sl
 80171e4:	b1d3      	cbz	r3, 801721c <_strtod_l+0x88c>
 80171e6:	4aad      	ldr	r2, [pc, #692]	; (801749c <_strtod_l+0xb0c>)
 80171e8:	402a      	ands	r2, r5
 80171ea:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80171ee:	f04f 31ff 	mov.w	r1, #4294967295
 80171f2:	d816      	bhi.n	8017222 <_strtod_l+0x892>
 80171f4:	0d12      	lsrs	r2, r2, #20
 80171f6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80171fa:	fa01 f303 	lsl.w	r3, r1, r3
 80171fe:	4298      	cmp	r0, r3
 8017200:	d142      	bne.n	8017288 <_strtod_l+0x8f8>
 8017202:	4ba7      	ldr	r3, [pc, #668]	; (80174a0 <_strtod_l+0xb10>)
 8017204:	429d      	cmp	r5, r3
 8017206:	d102      	bne.n	801720e <_strtod_l+0x87e>
 8017208:	3001      	adds	r0, #1
 801720a:	f43f addf 	beq.w	8016dcc <_strtod_l+0x43c>
 801720e:	4ba3      	ldr	r3, [pc, #652]	; (801749c <_strtod_l+0xb0c>)
 8017210:	402b      	ands	r3, r5
 8017212:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8017216:	f04f 0a00 	mov.w	sl, #0
 801721a:	e7a0      	b.n	801715e <_strtod_l+0x7ce>
 801721c:	f04f 33ff 	mov.w	r3, #4294967295
 8017220:	e7ed      	b.n	80171fe <_strtod_l+0x86e>
 8017222:	460b      	mov	r3, r1
 8017224:	e7eb      	b.n	80171fe <_strtod_l+0x86e>
 8017226:	bb7b      	cbnz	r3, 8017288 <_strtod_l+0x8f8>
 8017228:	f1ba 0f00 	cmp.w	sl, #0
 801722c:	d12c      	bne.n	8017288 <_strtod_l+0x8f8>
 801722e:	9904      	ldr	r1, [sp, #16]
 8017230:	4a9a      	ldr	r2, [pc, #616]	; (801749c <_strtod_l+0xb0c>)
 8017232:	465b      	mov	r3, fp
 8017234:	b1f1      	cbz	r1, 8017274 <_strtod_l+0x8e4>
 8017236:	ea02 010b 	and.w	r1, r2, fp
 801723a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801723e:	dc19      	bgt.n	8017274 <_strtod_l+0x8e4>
 8017240:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017244:	f77f ae5b 	ble.w	8016efe <_strtod_l+0x56e>
 8017248:	4a96      	ldr	r2, [pc, #600]	; (80174a4 <_strtod_l+0xb14>)
 801724a:	2300      	movs	r3, #0
 801724c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8017250:	4650      	mov	r0, sl
 8017252:	4659      	mov	r1, fp
 8017254:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017258:	f7e9 f9ce 	bl	80005f8 <__aeabi_dmul>
 801725c:	4682      	mov	sl, r0
 801725e:	468b      	mov	fp, r1
 8017260:	2900      	cmp	r1, #0
 8017262:	f47f adbe 	bne.w	8016de2 <_strtod_l+0x452>
 8017266:	2800      	cmp	r0, #0
 8017268:	f47f adbb 	bne.w	8016de2 <_strtod_l+0x452>
 801726c:	2322      	movs	r3, #34	; 0x22
 801726e:	f8c9 3000 	str.w	r3, [r9]
 8017272:	e5b6      	b.n	8016de2 <_strtod_l+0x452>
 8017274:	4013      	ands	r3, r2
 8017276:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801727a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801727e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017282:	f04f 3aff 	mov.w	sl, #4294967295
 8017286:	e76a      	b.n	801715e <_strtod_l+0x7ce>
 8017288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801728a:	b193      	cbz	r3, 80172b2 <_strtod_l+0x922>
 801728c:	422b      	tst	r3, r5
 801728e:	f43f af66 	beq.w	801715e <_strtod_l+0x7ce>
 8017292:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017294:	9a04      	ldr	r2, [sp, #16]
 8017296:	4650      	mov	r0, sl
 8017298:	4659      	mov	r1, fp
 801729a:	b173      	cbz	r3, 80172ba <_strtod_l+0x92a>
 801729c:	f7ff fb5a 	bl	8016954 <sulp>
 80172a0:	4602      	mov	r2, r0
 80172a2:	460b      	mov	r3, r1
 80172a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80172a8:	f7e8 fff0 	bl	800028c <__adddf3>
 80172ac:	4682      	mov	sl, r0
 80172ae:	468b      	mov	fp, r1
 80172b0:	e755      	b.n	801715e <_strtod_l+0x7ce>
 80172b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80172b4:	ea13 0f0a 	tst.w	r3, sl
 80172b8:	e7e9      	b.n	801728e <_strtod_l+0x8fe>
 80172ba:	f7ff fb4b 	bl	8016954 <sulp>
 80172be:	4602      	mov	r2, r0
 80172c0:	460b      	mov	r3, r1
 80172c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80172c6:	f7e8 ffdf 	bl	8000288 <__aeabi_dsub>
 80172ca:	2200      	movs	r2, #0
 80172cc:	2300      	movs	r3, #0
 80172ce:	4682      	mov	sl, r0
 80172d0:	468b      	mov	fp, r1
 80172d2:	f7e9 fbf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80172d6:	2800      	cmp	r0, #0
 80172d8:	f47f ae11 	bne.w	8016efe <_strtod_l+0x56e>
 80172dc:	e73f      	b.n	801715e <_strtod_l+0x7ce>
 80172de:	4641      	mov	r1, r8
 80172e0:	4620      	mov	r0, r4
 80172e2:	f001 ff0c 	bl	80190fe <__ratio>
 80172e6:	ec57 6b10 	vmov	r6, r7, d0
 80172ea:	2200      	movs	r2, #0
 80172ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80172f0:	ee10 0a10 	vmov	r0, s0
 80172f4:	4639      	mov	r1, r7
 80172f6:	f7e9 fbfb 	bl	8000af0 <__aeabi_dcmple>
 80172fa:	2800      	cmp	r0, #0
 80172fc:	d077      	beq.n	80173ee <_strtod_l+0xa5e>
 80172fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017300:	2b00      	cmp	r3, #0
 8017302:	d04a      	beq.n	801739a <_strtod_l+0xa0a>
 8017304:	4b68      	ldr	r3, [pc, #416]	; (80174a8 <_strtod_l+0xb18>)
 8017306:	2200      	movs	r2, #0
 8017308:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801730c:	4f66      	ldr	r7, [pc, #408]	; (80174a8 <_strtod_l+0xb18>)
 801730e:	2600      	movs	r6, #0
 8017310:	4b62      	ldr	r3, [pc, #392]	; (801749c <_strtod_l+0xb0c>)
 8017312:	402b      	ands	r3, r5
 8017314:	930f      	str	r3, [sp, #60]	; 0x3c
 8017316:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017318:	4b64      	ldr	r3, [pc, #400]	; (80174ac <_strtod_l+0xb1c>)
 801731a:	429a      	cmp	r2, r3
 801731c:	f040 80ce 	bne.w	80174bc <_strtod_l+0xb2c>
 8017320:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017324:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017328:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801732c:	ec4b ab10 	vmov	d0, sl, fp
 8017330:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8017334:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017338:	f001 fe1c 	bl	8018f74 <__ulp>
 801733c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017340:	ec53 2b10 	vmov	r2, r3, d0
 8017344:	f7e9 f958 	bl	80005f8 <__aeabi_dmul>
 8017348:	4652      	mov	r2, sl
 801734a:	465b      	mov	r3, fp
 801734c:	f7e8 ff9e 	bl	800028c <__adddf3>
 8017350:	460b      	mov	r3, r1
 8017352:	4952      	ldr	r1, [pc, #328]	; (801749c <_strtod_l+0xb0c>)
 8017354:	4a56      	ldr	r2, [pc, #344]	; (80174b0 <_strtod_l+0xb20>)
 8017356:	4019      	ands	r1, r3
 8017358:	4291      	cmp	r1, r2
 801735a:	4682      	mov	sl, r0
 801735c:	d95b      	bls.n	8017416 <_strtod_l+0xa86>
 801735e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017360:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017364:	4293      	cmp	r3, r2
 8017366:	d103      	bne.n	8017370 <_strtod_l+0x9e0>
 8017368:	9b08      	ldr	r3, [sp, #32]
 801736a:	3301      	adds	r3, #1
 801736c:	f43f ad2e 	beq.w	8016dcc <_strtod_l+0x43c>
 8017370:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80174a0 <_strtod_l+0xb10>
 8017374:	f04f 3aff 	mov.w	sl, #4294967295
 8017378:	991c      	ldr	r1, [sp, #112]	; 0x70
 801737a:	4648      	mov	r0, r9
 801737c:	f001 fb62 	bl	8018a44 <_Bfree>
 8017380:	9905      	ldr	r1, [sp, #20]
 8017382:	4648      	mov	r0, r9
 8017384:	f001 fb5e 	bl	8018a44 <_Bfree>
 8017388:	4641      	mov	r1, r8
 801738a:	4648      	mov	r0, r9
 801738c:	f001 fb5a 	bl	8018a44 <_Bfree>
 8017390:	4621      	mov	r1, r4
 8017392:	4648      	mov	r0, r9
 8017394:	f001 fb56 	bl	8018a44 <_Bfree>
 8017398:	e619      	b.n	8016fce <_strtod_l+0x63e>
 801739a:	f1ba 0f00 	cmp.w	sl, #0
 801739e:	d11a      	bne.n	80173d6 <_strtod_l+0xa46>
 80173a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80173a4:	b9eb      	cbnz	r3, 80173e2 <_strtod_l+0xa52>
 80173a6:	2200      	movs	r2, #0
 80173a8:	4b3f      	ldr	r3, [pc, #252]	; (80174a8 <_strtod_l+0xb18>)
 80173aa:	4630      	mov	r0, r6
 80173ac:	4639      	mov	r1, r7
 80173ae:	f7e9 fb95 	bl	8000adc <__aeabi_dcmplt>
 80173b2:	b9c8      	cbnz	r0, 80173e8 <_strtod_l+0xa58>
 80173b4:	4630      	mov	r0, r6
 80173b6:	4639      	mov	r1, r7
 80173b8:	2200      	movs	r2, #0
 80173ba:	4b3e      	ldr	r3, [pc, #248]	; (80174b4 <_strtod_l+0xb24>)
 80173bc:	f7e9 f91c 	bl	80005f8 <__aeabi_dmul>
 80173c0:	4606      	mov	r6, r0
 80173c2:	460f      	mov	r7, r1
 80173c4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80173c8:	9618      	str	r6, [sp, #96]	; 0x60
 80173ca:	9319      	str	r3, [sp, #100]	; 0x64
 80173cc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80173d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80173d4:	e79c      	b.n	8017310 <_strtod_l+0x980>
 80173d6:	f1ba 0f01 	cmp.w	sl, #1
 80173da:	d102      	bne.n	80173e2 <_strtod_l+0xa52>
 80173dc:	2d00      	cmp	r5, #0
 80173de:	f43f ad8e 	beq.w	8016efe <_strtod_l+0x56e>
 80173e2:	2200      	movs	r2, #0
 80173e4:	4b34      	ldr	r3, [pc, #208]	; (80174b8 <_strtod_l+0xb28>)
 80173e6:	e78f      	b.n	8017308 <_strtod_l+0x978>
 80173e8:	2600      	movs	r6, #0
 80173ea:	4f32      	ldr	r7, [pc, #200]	; (80174b4 <_strtod_l+0xb24>)
 80173ec:	e7ea      	b.n	80173c4 <_strtod_l+0xa34>
 80173ee:	4b31      	ldr	r3, [pc, #196]	; (80174b4 <_strtod_l+0xb24>)
 80173f0:	4630      	mov	r0, r6
 80173f2:	4639      	mov	r1, r7
 80173f4:	2200      	movs	r2, #0
 80173f6:	f7e9 f8ff 	bl	80005f8 <__aeabi_dmul>
 80173fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80173fc:	4606      	mov	r6, r0
 80173fe:	460f      	mov	r7, r1
 8017400:	b933      	cbnz	r3, 8017410 <_strtod_l+0xa80>
 8017402:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017406:	9010      	str	r0, [sp, #64]	; 0x40
 8017408:	9311      	str	r3, [sp, #68]	; 0x44
 801740a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801740e:	e7df      	b.n	80173d0 <_strtod_l+0xa40>
 8017410:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8017414:	e7f9      	b.n	801740a <_strtod_l+0xa7a>
 8017416:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801741a:	9b04      	ldr	r3, [sp, #16]
 801741c:	2b00      	cmp	r3, #0
 801741e:	d1ab      	bne.n	8017378 <_strtod_l+0x9e8>
 8017420:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017424:	0d1b      	lsrs	r3, r3, #20
 8017426:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017428:	051b      	lsls	r3, r3, #20
 801742a:	429a      	cmp	r2, r3
 801742c:	465d      	mov	r5, fp
 801742e:	d1a3      	bne.n	8017378 <_strtod_l+0x9e8>
 8017430:	4639      	mov	r1, r7
 8017432:	4630      	mov	r0, r6
 8017434:	f7e9 fb90 	bl	8000b58 <__aeabi_d2iz>
 8017438:	f7e9 f874 	bl	8000524 <__aeabi_i2d>
 801743c:	460b      	mov	r3, r1
 801743e:	4602      	mov	r2, r0
 8017440:	4639      	mov	r1, r7
 8017442:	4630      	mov	r0, r6
 8017444:	f7e8 ff20 	bl	8000288 <__aeabi_dsub>
 8017448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801744a:	4606      	mov	r6, r0
 801744c:	460f      	mov	r7, r1
 801744e:	b933      	cbnz	r3, 801745e <_strtod_l+0xace>
 8017450:	f1ba 0f00 	cmp.w	sl, #0
 8017454:	d103      	bne.n	801745e <_strtod_l+0xace>
 8017456:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801745a:	2d00      	cmp	r5, #0
 801745c:	d06d      	beq.n	801753a <_strtod_l+0xbaa>
 801745e:	a30a      	add	r3, pc, #40	; (adr r3, 8017488 <_strtod_l+0xaf8>)
 8017460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017464:	4630      	mov	r0, r6
 8017466:	4639      	mov	r1, r7
 8017468:	f7e9 fb38 	bl	8000adc <__aeabi_dcmplt>
 801746c:	2800      	cmp	r0, #0
 801746e:	f47f acb8 	bne.w	8016de2 <_strtod_l+0x452>
 8017472:	a307      	add	r3, pc, #28	; (adr r3, 8017490 <_strtod_l+0xb00>)
 8017474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017478:	4630      	mov	r0, r6
 801747a:	4639      	mov	r1, r7
 801747c:	f7e9 fb4c 	bl	8000b18 <__aeabi_dcmpgt>
 8017480:	2800      	cmp	r0, #0
 8017482:	f43f af79 	beq.w	8017378 <_strtod_l+0x9e8>
 8017486:	e4ac      	b.n	8016de2 <_strtod_l+0x452>
 8017488:	94a03595 	.word	0x94a03595
 801748c:	3fdfffff 	.word	0x3fdfffff
 8017490:	35afe535 	.word	0x35afe535
 8017494:	3fe00000 	.word	0x3fe00000
 8017498:	000fffff 	.word	0x000fffff
 801749c:	7ff00000 	.word	0x7ff00000
 80174a0:	7fefffff 	.word	0x7fefffff
 80174a4:	39500000 	.word	0x39500000
 80174a8:	3ff00000 	.word	0x3ff00000
 80174ac:	7fe00000 	.word	0x7fe00000
 80174b0:	7c9fffff 	.word	0x7c9fffff
 80174b4:	3fe00000 	.word	0x3fe00000
 80174b8:	bff00000 	.word	0xbff00000
 80174bc:	9b04      	ldr	r3, [sp, #16]
 80174be:	b333      	cbz	r3, 801750e <_strtod_l+0xb7e>
 80174c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80174c2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80174c6:	d822      	bhi.n	801750e <_strtod_l+0xb7e>
 80174c8:	a327      	add	r3, pc, #156	; (adr r3, 8017568 <_strtod_l+0xbd8>)
 80174ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174ce:	4630      	mov	r0, r6
 80174d0:	4639      	mov	r1, r7
 80174d2:	f7e9 fb0d 	bl	8000af0 <__aeabi_dcmple>
 80174d6:	b1a0      	cbz	r0, 8017502 <_strtod_l+0xb72>
 80174d8:	4639      	mov	r1, r7
 80174da:	4630      	mov	r0, r6
 80174dc:	f7e9 fb64 	bl	8000ba8 <__aeabi_d2uiz>
 80174e0:	2800      	cmp	r0, #0
 80174e2:	bf08      	it	eq
 80174e4:	2001      	moveq	r0, #1
 80174e6:	f7e9 f80d 	bl	8000504 <__aeabi_ui2d>
 80174ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80174ec:	4606      	mov	r6, r0
 80174ee:	460f      	mov	r7, r1
 80174f0:	bb03      	cbnz	r3, 8017534 <_strtod_l+0xba4>
 80174f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80174f6:	9012      	str	r0, [sp, #72]	; 0x48
 80174f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80174fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80174fe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017504:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017506:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801750a:	1a9b      	subs	r3, r3, r2
 801750c:	930b      	str	r3, [sp, #44]	; 0x2c
 801750e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8017512:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8017516:	f001 fd2d 	bl	8018f74 <__ulp>
 801751a:	4650      	mov	r0, sl
 801751c:	ec53 2b10 	vmov	r2, r3, d0
 8017520:	4659      	mov	r1, fp
 8017522:	f7e9 f869 	bl	80005f8 <__aeabi_dmul>
 8017526:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801752a:	f7e8 feaf 	bl	800028c <__adddf3>
 801752e:	4682      	mov	sl, r0
 8017530:	468b      	mov	fp, r1
 8017532:	e772      	b.n	801741a <_strtod_l+0xa8a>
 8017534:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8017538:	e7df      	b.n	80174fa <_strtod_l+0xb6a>
 801753a:	a30d      	add	r3, pc, #52	; (adr r3, 8017570 <_strtod_l+0xbe0>)
 801753c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017540:	f7e9 facc 	bl	8000adc <__aeabi_dcmplt>
 8017544:	e79c      	b.n	8017480 <_strtod_l+0xaf0>
 8017546:	2300      	movs	r3, #0
 8017548:	930d      	str	r3, [sp, #52]	; 0x34
 801754a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801754c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801754e:	6013      	str	r3, [r2, #0]
 8017550:	f7ff ba61 	b.w	8016a16 <_strtod_l+0x86>
 8017554:	2b65      	cmp	r3, #101	; 0x65
 8017556:	f04f 0200 	mov.w	r2, #0
 801755a:	f43f ab4e 	beq.w	8016bfa <_strtod_l+0x26a>
 801755e:	2101      	movs	r1, #1
 8017560:	4614      	mov	r4, r2
 8017562:	9104      	str	r1, [sp, #16]
 8017564:	f7ff bacb 	b.w	8016afe <_strtod_l+0x16e>
 8017568:	ffc00000 	.word	0xffc00000
 801756c:	41dfffff 	.word	0x41dfffff
 8017570:	94a03595 	.word	0x94a03595
 8017574:	3fcfffff 	.word	0x3fcfffff

08017578 <_strtod_r>:
 8017578:	4b05      	ldr	r3, [pc, #20]	; (8017590 <_strtod_r+0x18>)
 801757a:	681b      	ldr	r3, [r3, #0]
 801757c:	b410      	push	{r4}
 801757e:	6a1b      	ldr	r3, [r3, #32]
 8017580:	4c04      	ldr	r4, [pc, #16]	; (8017594 <_strtod_r+0x1c>)
 8017582:	2b00      	cmp	r3, #0
 8017584:	bf08      	it	eq
 8017586:	4623      	moveq	r3, r4
 8017588:	f85d 4b04 	ldr.w	r4, [sp], #4
 801758c:	f7ff ba00 	b.w	8016990 <_strtod_l>
 8017590:	200009ac 	.word	0x200009ac
 8017594:	20000a10 	.word	0x20000a10

08017598 <_strtol_l.isra.0>:
 8017598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801759c:	4680      	mov	r8, r0
 801759e:	4689      	mov	r9, r1
 80175a0:	4692      	mov	sl, r2
 80175a2:	461e      	mov	r6, r3
 80175a4:	460f      	mov	r7, r1
 80175a6:	463d      	mov	r5, r7
 80175a8:	9808      	ldr	r0, [sp, #32]
 80175aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80175ae:	f001 f9ed 	bl	801898c <__locale_ctype_ptr_l>
 80175b2:	4420      	add	r0, r4
 80175b4:	7843      	ldrb	r3, [r0, #1]
 80175b6:	f013 0308 	ands.w	r3, r3, #8
 80175ba:	d132      	bne.n	8017622 <_strtol_l.isra.0+0x8a>
 80175bc:	2c2d      	cmp	r4, #45	; 0x2d
 80175be:	d132      	bne.n	8017626 <_strtol_l.isra.0+0x8e>
 80175c0:	787c      	ldrb	r4, [r7, #1]
 80175c2:	1cbd      	adds	r5, r7, #2
 80175c4:	2201      	movs	r2, #1
 80175c6:	2e00      	cmp	r6, #0
 80175c8:	d05d      	beq.n	8017686 <_strtol_l.isra.0+0xee>
 80175ca:	2e10      	cmp	r6, #16
 80175cc:	d109      	bne.n	80175e2 <_strtol_l.isra.0+0x4a>
 80175ce:	2c30      	cmp	r4, #48	; 0x30
 80175d0:	d107      	bne.n	80175e2 <_strtol_l.isra.0+0x4a>
 80175d2:	782b      	ldrb	r3, [r5, #0]
 80175d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80175d8:	2b58      	cmp	r3, #88	; 0x58
 80175da:	d14f      	bne.n	801767c <_strtol_l.isra.0+0xe4>
 80175dc:	786c      	ldrb	r4, [r5, #1]
 80175de:	2610      	movs	r6, #16
 80175e0:	3502      	adds	r5, #2
 80175e2:	2a00      	cmp	r2, #0
 80175e4:	bf14      	ite	ne
 80175e6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80175ea:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80175ee:	2700      	movs	r7, #0
 80175f0:	fbb1 fcf6 	udiv	ip, r1, r6
 80175f4:	4638      	mov	r0, r7
 80175f6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80175fa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80175fe:	2b09      	cmp	r3, #9
 8017600:	d817      	bhi.n	8017632 <_strtol_l.isra.0+0x9a>
 8017602:	461c      	mov	r4, r3
 8017604:	42a6      	cmp	r6, r4
 8017606:	dd23      	ble.n	8017650 <_strtol_l.isra.0+0xb8>
 8017608:	1c7b      	adds	r3, r7, #1
 801760a:	d007      	beq.n	801761c <_strtol_l.isra.0+0x84>
 801760c:	4584      	cmp	ip, r0
 801760e:	d31c      	bcc.n	801764a <_strtol_l.isra.0+0xb2>
 8017610:	d101      	bne.n	8017616 <_strtol_l.isra.0+0x7e>
 8017612:	45a6      	cmp	lr, r4
 8017614:	db19      	blt.n	801764a <_strtol_l.isra.0+0xb2>
 8017616:	fb00 4006 	mla	r0, r0, r6, r4
 801761a:	2701      	movs	r7, #1
 801761c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017620:	e7eb      	b.n	80175fa <_strtol_l.isra.0+0x62>
 8017622:	462f      	mov	r7, r5
 8017624:	e7bf      	b.n	80175a6 <_strtol_l.isra.0+0xe>
 8017626:	2c2b      	cmp	r4, #43	; 0x2b
 8017628:	bf04      	itt	eq
 801762a:	1cbd      	addeq	r5, r7, #2
 801762c:	787c      	ldrbeq	r4, [r7, #1]
 801762e:	461a      	mov	r2, r3
 8017630:	e7c9      	b.n	80175c6 <_strtol_l.isra.0+0x2e>
 8017632:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8017636:	2b19      	cmp	r3, #25
 8017638:	d801      	bhi.n	801763e <_strtol_l.isra.0+0xa6>
 801763a:	3c37      	subs	r4, #55	; 0x37
 801763c:	e7e2      	b.n	8017604 <_strtol_l.isra.0+0x6c>
 801763e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8017642:	2b19      	cmp	r3, #25
 8017644:	d804      	bhi.n	8017650 <_strtol_l.isra.0+0xb8>
 8017646:	3c57      	subs	r4, #87	; 0x57
 8017648:	e7dc      	b.n	8017604 <_strtol_l.isra.0+0x6c>
 801764a:	f04f 37ff 	mov.w	r7, #4294967295
 801764e:	e7e5      	b.n	801761c <_strtol_l.isra.0+0x84>
 8017650:	1c7b      	adds	r3, r7, #1
 8017652:	d108      	bne.n	8017666 <_strtol_l.isra.0+0xce>
 8017654:	2322      	movs	r3, #34	; 0x22
 8017656:	f8c8 3000 	str.w	r3, [r8]
 801765a:	4608      	mov	r0, r1
 801765c:	f1ba 0f00 	cmp.w	sl, #0
 8017660:	d107      	bne.n	8017672 <_strtol_l.isra.0+0xda>
 8017662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017666:	b102      	cbz	r2, 801766a <_strtol_l.isra.0+0xd2>
 8017668:	4240      	negs	r0, r0
 801766a:	f1ba 0f00 	cmp.w	sl, #0
 801766e:	d0f8      	beq.n	8017662 <_strtol_l.isra.0+0xca>
 8017670:	b10f      	cbz	r7, 8017676 <_strtol_l.isra.0+0xde>
 8017672:	f105 39ff 	add.w	r9, r5, #4294967295
 8017676:	f8ca 9000 	str.w	r9, [sl]
 801767a:	e7f2      	b.n	8017662 <_strtol_l.isra.0+0xca>
 801767c:	2430      	movs	r4, #48	; 0x30
 801767e:	2e00      	cmp	r6, #0
 8017680:	d1af      	bne.n	80175e2 <_strtol_l.isra.0+0x4a>
 8017682:	2608      	movs	r6, #8
 8017684:	e7ad      	b.n	80175e2 <_strtol_l.isra.0+0x4a>
 8017686:	2c30      	cmp	r4, #48	; 0x30
 8017688:	d0a3      	beq.n	80175d2 <_strtol_l.isra.0+0x3a>
 801768a:	260a      	movs	r6, #10
 801768c:	e7a9      	b.n	80175e2 <_strtol_l.isra.0+0x4a>
	...

08017690 <_strtol_r>:
 8017690:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017692:	4c06      	ldr	r4, [pc, #24]	; (80176ac <_strtol_r+0x1c>)
 8017694:	4d06      	ldr	r5, [pc, #24]	; (80176b0 <_strtol_r+0x20>)
 8017696:	6824      	ldr	r4, [r4, #0]
 8017698:	6a24      	ldr	r4, [r4, #32]
 801769a:	2c00      	cmp	r4, #0
 801769c:	bf08      	it	eq
 801769e:	462c      	moveq	r4, r5
 80176a0:	9400      	str	r4, [sp, #0]
 80176a2:	f7ff ff79 	bl	8017598 <_strtol_l.isra.0>
 80176a6:	b003      	add	sp, #12
 80176a8:	bd30      	pop	{r4, r5, pc}
 80176aa:	bf00      	nop
 80176ac:	200009ac 	.word	0x200009ac
 80176b0:	20000a10 	.word	0x20000a10

080176b4 <quorem>:
 80176b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176b8:	6903      	ldr	r3, [r0, #16]
 80176ba:	690c      	ldr	r4, [r1, #16]
 80176bc:	42a3      	cmp	r3, r4
 80176be:	4680      	mov	r8, r0
 80176c0:	f2c0 8082 	blt.w	80177c8 <quorem+0x114>
 80176c4:	3c01      	subs	r4, #1
 80176c6:	f101 0714 	add.w	r7, r1, #20
 80176ca:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80176ce:	f100 0614 	add.w	r6, r0, #20
 80176d2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80176d6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80176da:	eb06 030c 	add.w	r3, r6, ip
 80176de:	3501      	adds	r5, #1
 80176e0:	eb07 090c 	add.w	r9, r7, ip
 80176e4:	9301      	str	r3, [sp, #4]
 80176e6:	fbb0 f5f5 	udiv	r5, r0, r5
 80176ea:	b395      	cbz	r5, 8017752 <quorem+0x9e>
 80176ec:	f04f 0a00 	mov.w	sl, #0
 80176f0:	4638      	mov	r0, r7
 80176f2:	46b6      	mov	lr, r6
 80176f4:	46d3      	mov	fp, sl
 80176f6:	f850 2b04 	ldr.w	r2, [r0], #4
 80176fa:	b293      	uxth	r3, r2
 80176fc:	fb05 a303 	mla	r3, r5, r3, sl
 8017700:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017704:	b29b      	uxth	r3, r3
 8017706:	ebab 0303 	sub.w	r3, fp, r3
 801770a:	0c12      	lsrs	r2, r2, #16
 801770c:	f8de b000 	ldr.w	fp, [lr]
 8017710:	fb05 a202 	mla	r2, r5, r2, sl
 8017714:	fa13 f38b 	uxtah	r3, r3, fp
 8017718:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801771c:	fa1f fb82 	uxth.w	fp, r2
 8017720:	f8de 2000 	ldr.w	r2, [lr]
 8017724:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017728:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801772c:	b29b      	uxth	r3, r3
 801772e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017732:	4581      	cmp	r9, r0
 8017734:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017738:	f84e 3b04 	str.w	r3, [lr], #4
 801773c:	d2db      	bcs.n	80176f6 <quorem+0x42>
 801773e:	f856 300c 	ldr.w	r3, [r6, ip]
 8017742:	b933      	cbnz	r3, 8017752 <quorem+0x9e>
 8017744:	9b01      	ldr	r3, [sp, #4]
 8017746:	3b04      	subs	r3, #4
 8017748:	429e      	cmp	r6, r3
 801774a:	461a      	mov	r2, r3
 801774c:	d330      	bcc.n	80177b0 <quorem+0xfc>
 801774e:	f8c8 4010 	str.w	r4, [r8, #16]
 8017752:	4640      	mov	r0, r8
 8017754:	f001 fb96 	bl	8018e84 <__mcmp>
 8017758:	2800      	cmp	r0, #0
 801775a:	db25      	blt.n	80177a8 <quorem+0xf4>
 801775c:	3501      	adds	r5, #1
 801775e:	4630      	mov	r0, r6
 8017760:	f04f 0c00 	mov.w	ip, #0
 8017764:	f857 2b04 	ldr.w	r2, [r7], #4
 8017768:	f8d0 e000 	ldr.w	lr, [r0]
 801776c:	b293      	uxth	r3, r2
 801776e:	ebac 0303 	sub.w	r3, ip, r3
 8017772:	0c12      	lsrs	r2, r2, #16
 8017774:	fa13 f38e 	uxtah	r3, r3, lr
 8017778:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801777c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017780:	b29b      	uxth	r3, r3
 8017782:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017786:	45b9      	cmp	r9, r7
 8017788:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801778c:	f840 3b04 	str.w	r3, [r0], #4
 8017790:	d2e8      	bcs.n	8017764 <quorem+0xb0>
 8017792:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8017796:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801779a:	b92a      	cbnz	r2, 80177a8 <quorem+0xf4>
 801779c:	3b04      	subs	r3, #4
 801779e:	429e      	cmp	r6, r3
 80177a0:	461a      	mov	r2, r3
 80177a2:	d30b      	bcc.n	80177bc <quorem+0x108>
 80177a4:	f8c8 4010 	str.w	r4, [r8, #16]
 80177a8:	4628      	mov	r0, r5
 80177aa:	b003      	add	sp, #12
 80177ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177b0:	6812      	ldr	r2, [r2, #0]
 80177b2:	3b04      	subs	r3, #4
 80177b4:	2a00      	cmp	r2, #0
 80177b6:	d1ca      	bne.n	801774e <quorem+0x9a>
 80177b8:	3c01      	subs	r4, #1
 80177ba:	e7c5      	b.n	8017748 <quorem+0x94>
 80177bc:	6812      	ldr	r2, [r2, #0]
 80177be:	3b04      	subs	r3, #4
 80177c0:	2a00      	cmp	r2, #0
 80177c2:	d1ef      	bne.n	80177a4 <quorem+0xf0>
 80177c4:	3c01      	subs	r4, #1
 80177c6:	e7ea      	b.n	801779e <quorem+0xea>
 80177c8:	2000      	movs	r0, #0
 80177ca:	e7ee      	b.n	80177aa <quorem+0xf6>
 80177cc:	0000      	movs	r0, r0
	...

080177d0 <_dtoa_r>:
 80177d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177d4:	ec57 6b10 	vmov	r6, r7, d0
 80177d8:	b097      	sub	sp, #92	; 0x5c
 80177da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80177dc:	9106      	str	r1, [sp, #24]
 80177de:	4604      	mov	r4, r0
 80177e0:	920b      	str	r2, [sp, #44]	; 0x2c
 80177e2:	9312      	str	r3, [sp, #72]	; 0x48
 80177e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80177e8:	e9cd 6700 	strd	r6, r7, [sp]
 80177ec:	b93d      	cbnz	r5, 80177fe <_dtoa_r+0x2e>
 80177ee:	2010      	movs	r0, #16
 80177f0:	f7fe f924 	bl	8015a3c <malloc>
 80177f4:	6260      	str	r0, [r4, #36]	; 0x24
 80177f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80177fa:	6005      	str	r5, [r0, #0]
 80177fc:	60c5      	str	r5, [r0, #12]
 80177fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017800:	6819      	ldr	r1, [r3, #0]
 8017802:	b151      	cbz	r1, 801781a <_dtoa_r+0x4a>
 8017804:	685a      	ldr	r2, [r3, #4]
 8017806:	604a      	str	r2, [r1, #4]
 8017808:	2301      	movs	r3, #1
 801780a:	4093      	lsls	r3, r2
 801780c:	608b      	str	r3, [r1, #8]
 801780e:	4620      	mov	r0, r4
 8017810:	f001 f918 	bl	8018a44 <_Bfree>
 8017814:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017816:	2200      	movs	r2, #0
 8017818:	601a      	str	r2, [r3, #0]
 801781a:	1e3b      	subs	r3, r7, #0
 801781c:	bfbb      	ittet	lt
 801781e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017822:	9301      	strlt	r3, [sp, #4]
 8017824:	2300      	movge	r3, #0
 8017826:	2201      	movlt	r2, #1
 8017828:	bfac      	ite	ge
 801782a:	f8c8 3000 	strge.w	r3, [r8]
 801782e:	f8c8 2000 	strlt.w	r2, [r8]
 8017832:	4baf      	ldr	r3, [pc, #700]	; (8017af0 <_dtoa_r+0x320>)
 8017834:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017838:	ea33 0308 	bics.w	r3, r3, r8
 801783c:	d114      	bne.n	8017868 <_dtoa_r+0x98>
 801783e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017840:	f242 730f 	movw	r3, #9999	; 0x270f
 8017844:	6013      	str	r3, [r2, #0]
 8017846:	9b00      	ldr	r3, [sp, #0]
 8017848:	b923      	cbnz	r3, 8017854 <_dtoa_r+0x84>
 801784a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801784e:	2800      	cmp	r0, #0
 8017850:	f000 8542 	beq.w	80182d8 <_dtoa_r+0xb08>
 8017854:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017856:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8017b04 <_dtoa_r+0x334>
 801785a:	2b00      	cmp	r3, #0
 801785c:	f000 8544 	beq.w	80182e8 <_dtoa_r+0xb18>
 8017860:	f10b 0303 	add.w	r3, fp, #3
 8017864:	f000 bd3e 	b.w	80182e4 <_dtoa_r+0xb14>
 8017868:	e9dd 6700 	ldrd	r6, r7, [sp]
 801786c:	2200      	movs	r2, #0
 801786e:	2300      	movs	r3, #0
 8017870:	4630      	mov	r0, r6
 8017872:	4639      	mov	r1, r7
 8017874:	f7e9 f928 	bl	8000ac8 <__aeabi_dcmpeq>
 8017878:	4681      	mov	r9, r0
 801787a:	b168      	cbz	r0, 8017898 <_dtoa_r+0xc8>
 801787c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801787e:	2301      	movs	r3, #1
 8017880:	6013      	str	r3, [r2, #0]
 8017882:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017884:	2b00      	cmp	r3, #0
 8017886:	f000 8524 	beq.w	80182d2 <_dtoa_r+0xb02>
 801788a:	4b9a      	ldr	r3, [pc, #616]	; (8017af4 <_dtoa_r+0x324>)
 801788c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801788e:	f103 3bff 	add.w	fp, r3, #4294967295
 8017892:	6013      	str	r3, [r2, #0]
 8017894:	f000 bd28 	b.w	80182e8 <_dtoa_r+0xb18>
 8017898:	aa14      	add	r2, sp, #80	; 0x50
 801789a:	a915      	add	r1, sp, #84	; 0x54
 801789c:	ec47 6b10 	vmov	d0, r6, r7
 80178a0:	4620      	mov	r0, r4
 80178a2:	f001 fbdd 	bl	8019060 <__d2b>
 80178a6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80178aa:	9004      	str	r0, [sp, #16]
 80178ac:	2d00      	cmp	r5, #0
 80178ae:	d07c      	beq.n	80179aa <_dtoa_r+0x1da>
 80178b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80178b4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80178b8:	46b2      	mov	sl, r6
 80178ba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80178be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80178c2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80178c6:	2200      	movs	r2, #0
 80178c8:	4b8b      	ldr	r3, [pc, #556]	; (8017af8 <_dtoa_r+0x328>)
 80178ca:	4650      	mov	r0, sl
 80178cc:	4659      	mov	r1, fp
 80178ce:	f7e8 fcdb 	bl	8000288 <__aeabi_dsub>
 80178d2:	a381      	add	r3, pc, #516	; (adr r3, 8017ad8 <_dtoa_r+0x308>)
 80178d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178d8:	f7e8 fe8e 	bl	80005f8 <__aeabi_dmul>
 80178dc:	a380      	add	r3, pc, #512	; (adr r3, 8017ae0 <_dtoa_r+0x310>)
 80178de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178e2:	f7e8 fcd3 	bl	800028c <__adddf3>
 80178e6:	4606      	mov	r6, r0
 80178e8:	4628      	mov	r0, r5
 80178ea:	460f      	mov	r7, r1
 80178ec:	f7e8 fe1a 	bl	8000524 <__aeabi_i2d>
 80178f0:	a37d      	add	r3, pc, #500	; (adr r3, 8017ae8 <_dtoa_r+0x318>)
 80178f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178f6:	f7e8 fe7f 	bl	80005f8 <__aeabi_dmul>
 80178fa:	4602      	mov	r2, r0
 80178fc:	460b      	mov	r3, r1
 80178fe:	4630      	mov	r0, r6
 8017900:	4639      	mov	r1, r7
 8017902:	f7e8 fcc3 	bl	800028c <__adddf3>
 8017906:	4606      	mov	r6, r0
 8017908:	460f      	mov	r7, r1
 801790a:	f7e9 f925 	bl	8000b58 <__aeabi_d2iz>
 801790e:	2200      	movs	r2, #0
 8017910:	4682      	mov	sl, r0
 8017912:	2300      	movs	r3, #0
 8017914:	4630      	mov	r0, r6
 8017916:	4639      	mov	r1, r7
 8017918:	f7e9 f8e0 	bl	8000adc <__aeabi_dcmplt>
 801791c:	b148      	cbz	r0, 8017932 <_dtoa_r+0x162>
 801791e:	4650      	mov	r0, sl
 8017920:	f7e8 fe00 	bl	8000524 <__aeabi_i2d>
 8017924:	4632      	mov	r2, r6
 8017926:	463b      	mov	r3, r7
 8017928:	f7e9 f8ce 	bl	8000ac8 <__aeabi_dcmpeq>
 801792c:	b908      	cbnz	r0, 8017932 <_dtoa_r+0x162>
 801792e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017932:	f1ba 0f16 	cmp.w	sl, #22
 8017936:	d859      	bhi.n	80179ec <_dtoa_r+0x21c>
 8017938:	4970      	ldr	r1, [pc, #448]	; (8017afc <_dtoa_r+0x32c>)
 801793a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801793e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017942:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017946:	f7e9 f8e7 	bl	8000b18 <__aeabi_dcmpgt>
 801794a:	2800      	cmp	r0, #0
 801794c:	d050      	beq.n	80179f0 <_dtoa_r+0x220>
 801794e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017952:	2300      	movs	r3, #0
 8017954:	930f      	str	r3, [sp, #60]	; 0x3c
 8017956:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017958:	1b5d      	subs	r5, r3, r5
 801795a:	f1b5 0801 	subs.w	r8, r5, #1
 801795e:	bf49      	itett	mi
 8017960:	f1c5 0301 	rsbmi	r3, r5, #1
 8017964:	2300      	movpl	r3, #0
 8017966:	9305      	strmi	r3, [sp, #20]
 8017968:	f04f 0800 	movmi.w	r8, #0
 801796c:	bf58      	it	pl
 801796e:	9305      	strpl	r3, [sp, #20]
 8017970:	f1ba 0f00 	cmp.w	sl, #0
 8017974:	db3e      	blt.n	80179f4 <_dtoa_r+0x224>
 8017976:	2300      	movs	r3, #0
 8017978:	44d0      	add	r8, sl
 801797a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801797e:	9307      	str	r3, [sp, #28]
 8017980:	9b06      	ldr	r3, [sp, #24]
 8017982:	2b09      	cmp	r3, #9
 8017984:	f200 8090 	bhi.w	8017aa8 <_dtoa_r+0x2d8>
 8017988:	2b05      	cmp	r3, #5
 801798a:	bfc4      	itt	gt
 801798c:	3b04      	subgt	r3, #4
 801798e:	9306      	strgt	r3, [sp, #24]
 8017990:	9b06      	ldr	r3, [sp, #24]
 8017992:	f1a3 0302 	sub.w	r3, r3, #2
 8017996:	bfcc      	ite	gt
 8017998:	2500      	movgt	r5, #0
 801799a:	2501      	movle	r5, #1
 801799c:	2b03      	cmp	r3, #3
 801799e:	f200 808f 	bhi.w	8017ac0 <_dtoa_r+0x2f0>
 80179a2:	e8df f003 	tbb	[pc, r3]
 80179a6:	7f7d      	.short	0x7f7d
 80179a8:	7131      	.short	0x7131
 80179aa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80179ae:	441d      	add	r5, r3
 80179b0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80179b4:	2820      	cmp	r0, #32
 80179b6:	dd13      	ble.n	80179e0 <_dtoa_r+0x210>
 80179b8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80179bc:	9b00      	ldr	r3, [sp, #0]
 80179be:	fa08 f800 	lsl.w	r8, r8, r0
 80179c2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80179c6:	fa23 f000 	lsr.w	r0, r3, r0
 80179ca:	ea48 0000 	orr.w	r0, r8, r0
 80179ce:	f7e8 fd99 	bl	8000504 <__aeabi_ui2d>
 80179d2:	2301      	movs	r3, #1
 80179d4:	4682      	mov	sl, r0
 80179d6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80179da:	3d01      	subs	r5, #1
 80179dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80179de:	e772      	b.n	80178c6 <_dtoa_r+0xf6>
 80179e0:	9b00      	ldr	r3, [sp, #0]
 80179e2:	f1c0 0020 	rsb	r0, r0, #32
 80179e6:	fa03 f000 	lsl.w	r0, r3, r0
 80179ea:	e7f0      	b.n	80179ce <_dtoa_r+0x1fe>
 80179ec:	2301      	movs	r3, #1
 80179ee:	e7b1      	b.n	8017954 <_dtoa_r+0x184>
 80179f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80179f2:	e7b0      	b.n	8017956 <_dtoa_r+0x186>
 80179f4:	9b05      	ldr	r3, [sp, #20]
 80179f6:	eba3 030a 	sub.w	r3, r3, sl
 80179fa:	9305      	str	r3, [sp, #20]
 80179fc:	f1ca 0300 	rsb	r3, sl, #0
 8017a00:	9307      	str	r3, [sp, #28]
 8017a02:	2300      	movs	r3, #0
 8017a04:	930e      	str	r3, [sp, #56]	; 0x38
 8017a06:	e7bb      	b.n	8017980 <_dtoa_r+0x1b0>
 8017a08:	2301      	movs	r3, #1
 8017a0a:	930a      	str	r3, [sp, #40]	; 0x28
 8017a0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a0e:	2b00      	cmp	r3, #0
 8017a10:	dd59      	ble.n	8017ac6 <_dtoa_r+0x2f6>
 8017a12:	9302      	str	r3, [sp, #8]
 8017a14:	4699      	mov	r9, r3
 8017a16:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017a18:	2200      	movs	r2, #0
 8017a1a:	6072      	str	r2, [r6, #4]
 8017a1c:	2204      	movs	r2, #4
 8017a1e:	f102 0014 	add.w	r0, r2, #20
 8017a22:	4298      	cmp	r0, r3
 8017a24:	6871      	ldr	r1, [r6, #4]
 8017a26:	d953      	bls.n	8017ad0 <_dtoa_r+0x300>
 8017a28:	4620      	mov	r0, r4
 8017a2a:	f000 ffd7 	bl	80189dc <_Balloc>
 8017a2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017a30:	6030      	str	r0, [r6, #0]
 8017a32:	f1b9 0f0e 	cmp.w	r9, #14
 8017a36:	f8d3 b000 	ldr.w	fp, [r3]
 8017a3a:	f200 80e6 	bhi.w	8017c0a <_dtoa_r+0x43a>
 8017a3e:	2d00      	cmp	r5, #0
 8017a40:	f000 80e3 	beq.w	8017c0a <_dtoa_r+0x43a>
 8017a44:	ed9d 7b00 	vldr	d7, [sp]
 8017a48:	f1ba 0f00 	cmp.w	sl, #0
 8017a4c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017a50:	dd74      	ble.n	8017b3c <_dtoa_r+0x36c>
 8017a52:	4a2a      	ldr	r2, [pc, #168]	; (8017afc <_dtoa_r+0x32c>)
 8017a54:	f00a 030f 	and.w	r3, sl, #15
 8017a58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017a5c:	ed93 7b00 	vldr	d7, [r3]
 8017a60:	ea4f 162a 	mov.w	r6, sl, asr #4
 8017a64:	06f0      	lsls	r0, r6, #27
 8017a66:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017a6a:	d565      	bpl.n	8017b38 <_dtoa_r+0x368>
 8017a6c:	4b24      	ldr	r3, [pc, #144]	; (8017b00 <_dtoa_r+0x330>)
 8017a6e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017a72:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017a76:	f7e8 fee9 	bl	800084c <__aeabi_ddiv>
 8017a7a:	e9cd 0100 	strd	r0, r1, [sp]
 8017a7e:	f006 060f 	and.w	r6, r6, #15
 8017a82:	2503      	movs	r5, #3
 8017a84:	4f1e      	ldr	r7, [pc, #120]	; (8017b00 <_dtoa_r+0x330>)
 8017a86:	e04c      	b.n	8017b22 <_dtoa_r+0x352>
 8017a88:	2301      	movs	r3, #1
 8017a8a:	930a      	str	r3, [sp, #40]	; 0x28
 8017a8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a8e:	4453      	add	r3, sl
 8017a90:	f103 0901 	add.w	r9, r3, #1
 8017a94:	9302      	str	r3, [sp, #8]
 8017a96:	464b      	mov	r3, r9
 8017a98:	2b01      	cmp	r3, #1
 8017a9a:	bfb8      	it	lt
 8017a9c:	2301      	movlt	r3, #1
 8017a9e:	e7ba      	b.n	8017a16 <_dtoa_r+0x246>
 8017aa0:	2300      	movs	r3, #0
 8017aa2:	e7b2      	b.n	8017a0a <_dtoa_r+0x23a>
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	e7f0      	b.n	8017a8a <_dtoa_r+0x2ba>
 8017aa8:	2501      	movs	r5, #1
 8017aaa:	2300      	movs	r3, #0
 8017aac:	9306      	str	r3, [sp, #24]
 8017aae:	950a      	str	r5, [sp, #40]	; 0x28
 8017ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8017ab4:	9302      	str	r3, [sp, #8]
 8017ab6:	4699      	mov	r9, r3
 8017ab8:	2200      	movs	r2, #0
 8017aba:	2312      	movs	r3, #18
 8017abc:	920b      	str	r2, [sp, #44]	; 0x2c
 8017abe:	e7aa      	b.n	8017a16 <_dtoa_r+0x246>
 8017ac0:	2301      	movs	r3, #1
 8017ac2:	930a      	str	r3, [sp, #40]	; 0x28
 8017ac4:	e7f4      	b.n	8017ab0 <_dtoa_r+0x2e0>
 8017ac6:	2301      	movs	r3, #1
 8017ac8:	9302      	str	r3, [sp, #8]
 8017aca:	4699      	mov	r9, r3
 8017acc:	461a      	mov	r2, r3
 8017ace:	e7f5      	b.n	8017abc <_dtoa_r+0x2ec>
 8017ad0:	3101      	adds	r1, #1
 8017ad2:	6071      	str	r1, [r6, #4]
 8017ad4:	0052      	lsls	r2, r2, #1
 8017ad6:	e7a2      	b.n	8017a1e <_dtoa_r+0x24e>
 8017ad8:	636f4361 	.word	0x636f4361
 8017adc:	3fd287a7 	.word	0x3fd287a7
 8017ae0:	8b60c8b3 	.word	0x8b60c8b3
 8017ae4:	3fc68a28 	.word	0x3fc68a28
 8017ae8:	509f79fb 	.word	0x509f79fb
 8017aec:	3fd34413 	.word	0x3fd34413
 8017af0:	7ff00000 	.word	0x7ff00000
 8017af4:	0801b229 	.word	0x0801b229
 8017af8:	3ff80000 	.word	0x3ff80000
 8017afc:	0801b2e8 	.word	0x0801b2e8
 8017b00:	0801b2c0 	.word	0x0801b2c0
 8017b04:	0801b2b1 	.word	0x0801b2b1
 8017b08:	07f1      	lsls	r1, r6, #31
 8017b0a:	d508      	bpl.n	8017b1e <_dtoa_r+0x34e>
 8017b0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017b14:	f7e8 fd70 	bl	80005f8 <__aeabi_dmul>
 8017b18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017b1c:	3501      	adds	r5, #1
 8017b1e:	1076      	asrs	r6, r6, #1
 8017b20:	3708      	adds	r7, #8
 8017b22:	2e00      	cmp	r6, #0
 8017b24:	d1f0      	bne.n	8017b08 <_dtoa_r+0x338>
 8017b26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017b2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b2e:	f7e8 fe8d 	bl	800084c <__aeabi_ddiv>
 8017b32:	e9cd 0100 	strd	r0, r1, [sp]
 8017b36:	e01a      	b.n	8017b6e <_dtoa_r+0x39e>
 8017b38:	2502      	movs	r5, #2
 8017b3a:	e7a3      	b.n	8017a84 <_dtoa_r+0x2b4>
 8017b3c:	f000 80a0 	beq.w	8017c80 <_dtoa_r+0x4b0>
 8017b40:	f1ca 0600 	rsb	r6, sl, #0
 8017b44:	4b9f      	ldr	r3, [pc, #636]	; (8017dc4 <_dtoa_r+0x5f4>)
 8017b46:	4fa0      	ldr	r7, [pc, #640]	; (8017dc8 <_dtoa_r+0x5f8>)
 8017b48:	f006 020f 	and.w	r2, r6, #15
 8017b4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017b58:	f7e8 fd4e 	bl	80005f8 <__aeabi_dmul>
 8017b5c:	e9cd 0100 	strd	r0, r1, [sp]
 8017b60:	1136      	asrs	r6, r6, #4
 8017b62:	2300      	movs	r3, #0
 8017b64:	2502      	movs	r5, #2
 8017b66:	2e00      	cmp	r6, #0
 8017b68:	d17f      	bne.n	8017c6a <_dtoa_r+0x49a>
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d1e1      	bne.n	8017b32 <_dtoa_r+0x362>
 8017b6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	f000 8087 	beq.w	8017c84 <_dtoa_r+0x4b4>
 8017b76:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017b7a:	2200      	movs	r2, #0
 8017b7c:	4b93      	ldr	r3, [pc, #588]	; (8017dcc <_dtoa_r+0x5fc>)
 8017b7e:	4630      	mov	r0, r6
 8017b80:	4639      	mov	r1, r7
 8017b82:	f7e8 ffab 	bl	8000adc <__aeabi_dcmplt>
 8017b86:	2800      	cmp	r0, #0
 8017b88:	d07c      	beq.n	8017c84 <_dtoa_r+0x4b4>
 8017b8a:	f1b9 0f00 	cmp.w	r9, #0
 8017b8e:	d079      	beq.n	8017c84 <_dtoa_r+0x4b4>
 8017b90:	9b02      	ldr	r3, [sp, #8]
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	dd35      	ble.n	8017c02 <_dtoa_r+0x432>
 8017b96:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017b9a:	9308      	str	r3, [sp, #32]
 8017b9c:	4639      	mov	r1, r7
 8017b9e:	2200      	movs	r2, #0
 8017ba0:	4b8b      	ldr	r3, [pc, #556]	; (8017dd0 <_dtoa_r+0x600>)
 8017ba2:	4630      	mov	r0, r6
 8017ba4:	f7e8 fd28 	bl	80005f8 <__aeabi_dmul>
 8017ba8:	e9cd 0100 	strd	r0, r1, [sp]
 8017bac:	9f02      	ldr	r7, [sp, #8]
 8017bae:	3501      	adds	r5, #1
 8017bb0:	4628      	mov	r0, r5
 8017bb2:	f7e8 fcb7 	bl	8000524 <__aeabi_i2d>
 8017bb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017bba:	f7e8 fd1d 	bl	80005f8 <__aeabi_dmul>
 8017bbe:	2200      	movs	r2, #0
 8017bc0:	4b84      	ldr	r3, [pc, #528]	; (8017dd4 <_dtoa_r+0x604>)
 8017bc2:	f7e8 fb63 	bl	800028c <__adddf3>
 8017bc6:	4605      	mov	r5, r0
 8017bc8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017bcc:	2f00      	cmp	r7, #0
 8017bce:	d15d      	bne.n	8017c8c <_dtoa_r+0x4bc>
 8017bd0:	2200      	movs	r2, #0
 8017bd2:	4b81      	ldr	r3, [pc, #516]	; (8017dd8 <_dtoa_r+0x608>)
 8017bd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017bd8:	f7e8 fb56 	bl	8000288 <__aeabi_dsub>
 8017bdc:	462a      	mov	r2, r5
 8017bde:	4633      	mov	r3, r6
 8017be0:	e9cd 0100 	strd	r0, r1, [sp]
 8017be4:	f7e8 ff98 	bl	8000b18 <__aeabi_dcmpgt>
 8017be8:	2800      	cmp	r0, #0
 8017bea:	f040 8288 	bne.w	80180fe <_dtoa_r+0x92e>
 8017bee:	462a      	mov	r2, r5
 8017bf0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017bf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017bf8:	f7e8 ff70 	bl	8000adc <__aeabi_dcmplt>
 8017bfc:	2800      	cmp	r0, #0
 8017bfe:	f040 827c 	bne.w	80180fa <_dtoa_r+0x92a>
 8017c02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017c06:	e9cd 2300 	strd	r2, r3, [sp]
 8017c0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	f2c0 8150 	blt.w	8017eb2 <_dtoa_r+0x6e2>
 8017c12:	f1ba 0f0e 	cmp.w	sl, #14
 8017c16:	f300 814c 	bgt.w	8017eb2 <_dtoa_r+0x6e2>
 8017c1a:	4b6a      	ldr	r3, [pc, #424]	; (8017dc4 <_dtoa_r+0x5f4>)
 8017c1c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017c20:	ed93 7b00 	vldr	d7, [r3]
 8017c24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017c2c:	f280 80d8 	bge.w	8017de0 <_dtoa_r+0x610>
 8017c30:	f1b9 0f00 	cmp.w	r9, #0
 8017c34:	f300 80d4 	bgt.w	8017de0 <_dtoa_r+0x610>
 8017c38:	f040 825e 	bne.w	80180f8 <_dtoa_r+0x928>
 8017c3c:	2200      	movs	r2, #0
 8017c3e:	4b66      	ldr	r3, [pc, #408]	; (8017dd8 <_dtoa_r+0x608>)
 8017c40:	ec51 0b17 	vmov	r0, r1, d7
 8017c44:	f7e8 fcd8 	bl	80005f8 <__aeabi_dmul>
 8017c48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017c4c:	f7e8 ff5a 	bl	8000b04 <__aeabi_dcmpge>
 8017c50:	464f      	mov	r7, r9
 8017c52:	464e      	mov	r6, r9
 8017c54:	2800      	cmp	r0, #0
 8017c56:	f040 8234 	bne.w	80180c2 <_dtoa_r+0x8f2>
 8017c5a:	2331      	movs	r3, #49	; 0x31
 8017c5c:	f10b 0501 	add.w	r5, fp, #1
 8017c60:	f88b 3000 	strb.w	r3, [fp]
 8017c64:	f10a 0a01 	add.w	sl, sl, #1
 8017c68:	e22f      	b.n	80180ca <_dtoa_r+0x8fa>
 8017c6a:	07f2      	lsls	r2, r6, #31
 8017c6c:	d505      	bpl.n	8017c7a <_dtoa_r+0x4aa>
 8017c6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017c72:	f7e8 fcc1 	bl	80005f8 <__aeabi_dmul>
 8017c76:	3501      	adds	r5, #1
 8017c78:	2301      	movs	r3, #1
 8017c7a:	1076      	asrs	r6, r6, #1
 8017c7c:	3708      	adds	r7, #8
 8017c7e:	e772      	b.n	8017b66 <_dtoa_r+0x396>
 8017c80:	2502      	movs	r5, #2
 8017c82:	e774      	b.n	8017b6e <_dtoa_r+0x39e>
 8017c84:	f8cd a020 	str.w	sl, [sp, #32]
 8017c88:	464f      	mov	r7, r9
 8017c8a:	e791      	b.n	8017bb0 <_dtoa_r+0x3e0>
 8017c8c:	4b4d      	ldr	r3, [pc, #308]	; (8017dc4 <_dtoa_r+0x5f4>)
 8017c8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017c92:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8017c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d047      	beq.n	8017d2c <_dtoa_r+0x55c>
 8017c9c:	4602      	mov	r2, r0
 8017c9e:	460b      	mov	r3, r1
 8017ca0:	2000      	movs	r0, #0
 8017ca2:	494e      	ldr	r1, [pc, #312]	; (8017ddc <_dtoa_r+0x60c>)
 8017ca4:	f7e8 fdd2 	bl	800084c <__aeabi_ddiv>
 8017ca8:	462a      	mov	r2, r5
 8017caa:	4633      	mov	r3, r6
 8017cac:	f7e8 faec 	bl	8000288 <__aeabi_dsub>
 8017cb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017cb4:	465d      	mov	r5, fp
 8017cb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017cba:	f7e8 ff4d 	bl	8000b58 <__aeabi_d2iz>
 8017cbe:	4606      	mov	r6, r0
 8017cc0:	f7e8 fc30 	bl	8000524 <__aeabi_i2d>
 8017cc4:	4602      	mov	r2, r0
 8017cc6:	460b      	mov	r3, r1
 8017cc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017ccc:	f7e8 fadc 	bl	8000288 <__aeabi_dsub>
 8017cd0:	3630      	adds	r6, #48	; 0x30
 8017cd2:	f805 6b01 	strb.w	r6, [r5], #1
 8017cd6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017cda:	e9cd 0100 	strd	r0, r1, [sp]
 8017cde:	f7e8 fefd 	bl	8000adc <__aeabi_dcmplt>
 8017ce2:	2800      	cmp	r0, #0
 8017ce4:	d163      	bne.n	8017dae <_dtoa_r+0x5de>
 8017ce6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017cea:	2000      	movs	r0, #0
 8017cec:	4937      	ldr	r1, [pc, #220]	; (8017dcc <_dtoa_r+0x5fc>)
 8017cee:	f7e8 facb 	bl	8000288 <__aeabi_dsub>
 8017cf2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017cf6:	f7e8 fef1 	bl	8000adc <__aeabi_dcmplt>
 8017cfa:	2800      	cmp	r0, #0
 8017cfc:	f040 80b7 	bne.w	8017e6e <_dtoa_r+0x69e>
 8017d00:	eba5 030b 	sub.w	r3, r5, fp
 8017d04:	429f      	cmp	r7, r3
 8017d06:	f77f af7c 	ble.w	8017c02 <_dtoa_r+0x432>
 8017d0a:	2200      	movs	r2, #0
 8017d0c:	4b30      	ldr	r3, [pc, #192]	; (8017dd0 <_dtoa_r+0x600>)
 8017d0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017d12:	f7e8 fc71 	bl	80005f8 <__aeabi_dmul>
 8017d16:	2200      	movs	r2, #0
 8017d18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017d1c:	4b2c      	ldr	r3, [pc, #176]	; (8017dd0 <_dtoa_r+0x600>)
 8017d1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017d22:	f7e8 fc69 	bl	80005f8 <__aeabi_dmul>
 8017d26:	e9cd 0100 	strd	r0, r1, [sp]
 8017d2a:	e7c4      	b.n	8017cb6 <_dtoa_r+0x4e6>
 8017d2c:	462a      	mov	r2, r5
 8017d2e:	4633      	mov	r3, r6
 8017d30:	f7e8 fc62 	bl	80005f8 <__aeabi_dmul>
 8017d34:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017d38:	eb0b 0507 	add.w	r5, fp, r7
 8017d3c:	465e      	mov	r6, fp
 8017d3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017d42:	f7e8 ff09 	bl	8000b58 <__aeabi_d2iz>
 8017d46:	4607      	mov	r7, r0
 8017d48:	f7e8 fbec 	bl	8000524 <__aeabi_i2d>
 8017d4c:	3730      	adds	r7, #48	; 0x30
 8017d4e:	4602      	mov	r2, r0
 8017d50:	460b      	mov	r3, r1
 8017d52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017d56:	f7e8 fa97 	bl	8000288 <__aeabi_dsub>
 8017d5a:	f806 7b01 	strb.w	r7, [r6], #1
 8017d5e:	42ae      	cmp	r6, r5
 8017d60:	e9cd 0100 	strd	r0, r1, [sp]
 8017d64:	f04f 0200 	mov.w	r2, #0
 8017d68:	d126      	bne.n	8017db8 <_dtoa_r+0x5e8>
 8017d6a:	4b1c      	ldr	r3, [pc, #112]	; (8017ddc <_dtoa_r+0x60c>)
 8017d6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017d70:	f7e8 fa8c 	bl	800028c <__adddf3>
 8017d74:	4602      	mov	r2, r0
 8017d76:	460b      	mov	r3, r1
 8017d78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017d7c:	f7e8 fecc 	bl	8000b18 <__aeabi_dcmpgt>
 8017d80:	2800      	cmp	r0, #0
 8017d82:	d174      	bne.n	8017e6e <_dtoa_r+0x69e>
 8017d84:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017d88:	2000      	movs	r0, #0
 8017d8a:	4914      	ldr	r1, [pc, #80]	; (8017ddc <_dtoa_r+0x60c>)
 8017d8c:	f7e8 fa7c 	bl	8000288 <__aeabi_dsub>
 8017d90:	4602      	mov	r2, r0
 8017d92:	460b      	mov	r3, r1
 8017d94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017d98:	f7e8 fea0 	bl	8000adc <__aeabi_dcmplt>
 8017d9c:	2800      	cmp	r0, #0
 8017d9e:	f43f af30 	beq.w	8017c02 <_dtoa_r+0x432>
 8017da2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017da6:	2b30      	cmp	r3, #48	; 0x30
 8017da8:	f105 32ff 	add.w	r2, r5, #4294967295
 8017dac:	d002      	beq.n	8017db4 <_dtoa_r+0x5e4>
 8017dae:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017db2:	e04a      	b.n	8017e4a <_dtoa_r+0x67a>
 8017db4:	4615      	mov	r5, r2
 8017db6:	e7f4      	b.n	8017da2 <_dtoa_r+0x5d2>
 8017db8:	4b05      	ldr	r3, [pc, #20]	; (8017dd0 <_dtoa_r+0x600>)
 8017dba:	f7e8 fc1d 	bl	80005f8 <__aeabi_dmul>
 8017dbe:	e9cd 0100 	strd	r0, r1, [sp]
 8017dc2:	e7bc      	b.n	8017d3e <_dtoa_r+0x56e>
 8017dc4:	0801b2e8 	.word	0x0801b2e8
 8017dc8:	0801b2c0 	.word	0x0801b2c0
 8017dcc:	3ff00000 	.word	0x3ff00000
 8017dd0:	40240000 	.word	0x40240000
 8017dd4:	401c0000 	.word	0x401c0000
 8017dd8:	40140000 	.word	0x40140000
 8017ddc:	3fe00000 	.word	0x3fe00000
 8017de0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017de4:	465d      	mov	r5, fp
 8017de6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017dea:	4630      	mov	r0, r6
 8017dec:	4639      	mov	r1, r7
 8017dee:	f7e8 fd2d 	bl	800084c <__aeabi_ddiv>
 8017df2:	f7e8 feb1 	bl	8000b58 <__aeabi_d2iz>
 8017df6:	4680      	mov	r8, r0
 8017df8:	f7e8 fb94 	bl	8000524 <__aeabi_i2d>
 8017dfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017e00:	f7e8 fbfa 	bl	80005f8 <__aeabi_dmul>
 8017e04:	4602      	mov	r2, r0
 8017e06:	460b      	mov	r3, r1
 8017e08:	4630      	mov	r0, r6
 8017e0a:	4639      	mov	r1, r7
 8017e0c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017e10:	f7e8 fa3a 	bl	8000288 <__aeabi_dsub>
 8017e14:	f805 6b01 	strb.w	r6, [r5], #1
 8017e18:	eba5 060b 	sub.w	r6, r5, fp
 8017e1c:	45b1      	cmp	r9, r6
 8017e1e:	4602      	mov	r2, r0
 8017e20:	460b      	mov	r3, r1
 8017e22:	d139      	bne.n	8017e98 <_dtoa_r+0x6c8>
 8017e24:	f7e8 fa32 	bl	800028c <__adddf3>
 8017e28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017e2c:	4606      	mov	r6, r0
 8017e2e:	460f      	mov	r7, r1
 8017e30:	f7e8 fe72 	bl	8000b18 <__aeabi_dcmpgt>
 8017e34:	b9c8      	cbnz	r0, 8017e6a <_dtoa_r+0x69a>
 8017e36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017e3a:	4630      	mov	r0, r6
 8017e3c:	4639      	mov	r1, r7
 8017e3e:	f7e8 fe43 	bl	8000ac8 <__aeabi_dcmpeq>
 8017e42:	b110      	cbz	r0, 8017e4a <_dtoa_r+0x67a>
 8017e44:	f018 0f01 	tst.w	r8, #1
 8017e48:	d10f      	bne.n	8017e6a <_dtoa_r+0x69a>
 8017e4a:	9904      	ldr	r1, [sp, #16]
 8017e4c:	4620      	mov	r0, r4
 8017e4e:	f000 fdf9 	bl	8018a44 <_Bfree>
 8017e52:	2300      	movs	r3, #0
 8017e54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017e56:	702b      	strb	r3, [r5, #0]
 8017e58:	f10a 0301 	add.w	r3, sl, #1
 8017e5c:	6013      	str	r3, [r2, #0]
 8017e5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	f000 8241 	beq.w	80182e8 <_dtoa_r+0xb18>
 8017e66:	601d      	str	r5, [r3, #0]
 8017e68:	e23e      	b.n	80182e8 <_dtoa_r+0xb18>
 8017e6a:	f8cd a020 	str.w	sl, [sp, #32]
 8017e6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017e72:	2a39      	cmp	r2, #57	; 0x39
 8017e74:	f105 33ff 	add.w	r3, r5, #4294967295
 8017e78:	d108      	bne.n	8017e8c <_dtoa_r+0x6bc>
 8017e7a:	459b      	cmp	fp, r3
 8017e7c:	d10a      	bne.n	8017e94 <_dtoa_r+0x6c4>
 8017e7e:	9b08      	ldr	r3, [sp, #32]
 8017e80:	3301      	adds	r3, #1
 8017e82:	9308      	str	r3, [sp, #32]
 8017e84:	2330      	movs	r3, #48	; 0x30
 8017e86:	f88b 3000 	strb.w	r3, [fp]
 8017e8a:	465b      	mov	r3, fp
 8017e8c:	781a      	ldrb	r2, [r3, #0]
 8017e8e:	3201      	adds	r2, #1
 8017e90:	701a      	strb	r2, [r3, #0]
 8017e92:	e78c      	b.n	8017dae <_dtoa_r+0x5de>
 8017e94:	461d      	mov	r5, r3
 8017e96:	e7ea      	b.n	8017e6e <_dtoa_r+0x69e>
 8017e98:	2200      	movs	r2, #0
 8017e9a:	4b9b      	ldr	r3, [pc, #620]	; (8018108 <_dtoa_r+0x938>)
 8017e9c:	f7e8 fbac 	bl	80005f8 <__aeabi_dmul>
 8017ea0:	2200      	movs	r2, #0
 8017ea2:	2300      	movs	r3, #0
 8017ea4:	4606      	mov	r6, r0
 8017ea6:	460f      	mov	r7, r1
 8017ea8:	f7e8 fe0e 	bl	8000ac8 <__aeabi_dcmpeq>
 8017eac:	2800      	cmp	r0, #0
 8017eae:	d09a      	beq.n	8017de6 <_dtoa_r+0x616>
 8017eb0:	e7cb      	b.n	8017e4a <_dtoa_r+0x67a>
 8017eb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017eb4:	2a00      	cmp	r2, #0
 8017eb6:	f000 808b 	beq.w	8017fd0 <_dtoa_r+0x800>
 8017eba:	9a06      	ldr	r2, [sp, #24]
 8017ebc:	2a01      	cmp	r2, #1
 8017ebe:	dc6e      	bgt.n	8017f9e <_dtoa_r+0x7ce>
 8017ec0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017ec2:	2a00      	cmp	r2, #0
 8017ec4:	d067      	beq.n	8017f96 <_dtoa_r+0x7c6>
 8017ec6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017eca:	9f07      	ldr	r7, [sp, #28]
 8017ecc:	9d05      	ldr	r5, [sp, #20]
 8017ece:	9a05      	ldr	r2, [sp, #20]
 8017ed0:	2101      	movs	r1, #1
 8017ed2:	441a      	add	r2, r3
 8017ed4:	4620      	mov	r0, r4
 8017ed6:	9205      	str	r2, [sp, #20]
 8017ed8:	4498      	add	r8, r3
 8017eda:	f000 fe91 	bl	8018c00 <__i2b>
 8017ede:	4606      	mov	r6, r0
 8017ee0:	2d00      	cmp	r5, #0
 8017ee2:	dd0c      	ble.n	8017efe <_dtoa_r+0x72e>
 8017ee4:	f1b8 0f00 	cmp.w	r8, #0
 8017ee8:	dd09      	ble.n	8017efe <_dtoa_r+0x72e>
 8017eea:	4545      	cmp	r5, r8
 8017eec:	9a05      	ldr	r2, [sp, #20]
 8017eee:	462b      	mov	r3, r5
 8017ef0:	bfa8      	it	ge
 8017ef2:	4643      	movge	r3, r8
 8017ef4:	1ad2      	subs	r2, r2, r3
 8017ef6:	9205      	str	r2, [sp, #20]
 8017ef8:	1aed      	subs	r5, r5, r3
 8017efa:	eba8 0803 	sub.w	r8, r8, r3
 8017efe:	9b07      	ldr	r3, [sp, #28]
 8017f00:	b1eb      	cbz	r3, 8017f3e <_dtoa_r+0x76e>
 8017f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d067      	beq.n	8017fd8 <_dtoa_r+0x808>
 8017f08:	b18f      	cbz	r7, 8017f2e <_dtoa_r+0x75e>
 8017f0a:	4631      	mov	r1, r6
 8017f0c:	463a      	mov	r2, r7
 8017f0e:	4620      	mov	r0, r4
 8017f10:	f000 ff16 	bl	8018d40 <__pow5mult>
 8017f14:	9a04      	ldr	r2, [sp, #16]
 8017f16:	4601      	mov	r1, r0
 8017f18:	4606      	mov	r6, r0
 8017f1a:	4620      	mov	r0, r4
 8017f1c:	f000 fe79 	bl	8018c12 <__multiply>
 8017f20:	9904      	ldr	r1, [sp, #16]
 8017f22:	9008      	str	r0, [sp, #32]
 8017f24:	4620      	mov	r0, r4
 8017f26:	f000 fd8d 	bl	8018a44 <_Bfree>
 8017f2a:	9b08      	ldr	r3, [sp, #32]
 8017f2c:	9304      	str	r3, [sp, #16]
 8017f2e:	9b07      	ldr	r3, [sp, #28]
 8017f30:	1bda      	subs	r2, r3, r7
 8017f32:	d004      	beq.n	8017f3e <_dtoa_r+0x76e>
 8017f34:	9904      	ldr	r1, [sp, #16]
 8017f36:	4620      	mov	r0, r4
 8017f38:	f000 ff02 	bl	8018d40 <__pow5mult>
 8017f3c:	9004      	str	r0, [sp, #16]
 8017f3e:	2101      	movs	r1, #1
 8017f40:	4620      	mov	r0, r4
 8017f42:	f000 fe5d 	bl	8018c00 <__i2b>
 8017f46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017f48:	4607      	mov	r7, r0
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	f000 81d0 	beq.w	80182f0 <_dtoa_r+0xb20>
 8017f50:	461a      	mov	r2, r3
 8017f52:	4601      	mov	r1, r0
 8017f54:	4620      	mov	r0, r4
 8017f56:	f000 fef3 	bl	8018d40 <__pow5mult>
 8017f5a:	9b06      	ldr	r3, [sp, #24]
 8017f5c:	2b01      	cmp	r3, #1
 8017f5e:	4607      	mov	r7, r0
 8017f60:	dc40      	bgt.n	8017fe4 <_dtoa_r+0x814>
 8017f62:	9b00      	ldr	r3, [sp, #0]
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d139      	bne.n	8017fdc <_dtoa_r+0x80c>
 8017f68:	9b01      	ldr	r3, [sp, #4]
 8017f6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d136      	bne.n	8017fe0 <_dtoa_r+0x810>
 8017f72:	9b01      	ldr	r3, [sp, #4]
 8017f74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017f78:	0d1b      	lsrs	r3, r3, #20
 8017f7a:	051b      	lsls	r3, r3, #20
 8017f7c:	b12b      	cbz	r3, 8017f8a <_dtoa_r+0x7ba>
 8017f7e:	9b05      	ldr	r3, [sp, #20]
 8017f80:	3301      	adds	r3, #1
 8017f82:	9305      	str	r3, [sp, #20]
 8017f84:	f108 0801 	add.w	r8, r8, #1
 8017f88:	2301      	movs	r3, #1
 8017f8a:	9307      	str	r3, [sp, #28]
 8017f8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d12a      	bne.n	8017fe8 <_dtoa_r+0x818>
 8017f92:	2001      	movs	r0, #1
 8017f94:	e030      	b.n	8017ff8 <_dtoa_r+0x828>
 8017f96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017f98:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017f9c:	e795      	b.n	8017eca <_dtoa_r+0x6fa>
 8017f9e:	9b07      	ldr	r3, [sp, #28]
 8017fa0:	f109 37ff 	add.w	r7, r9, #4294967295
 8017fa4:	42bb      	cmp	r3, r7
 8017fa6:	bfbf      	itttt	lt
 8017fa8:	9b07      	ldrlt	r3, [sp, #28]
 8017faa:	9707      	strlt	r7, [sp, #28]
 8017fac:	1afa      	sublt	r2, r7, r3
 8017fae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017fb0:	bfbb      	ittet	lt
 8017fb2:	189b      	addlt	r3, r3, r2
 8017fb4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017fb6:	1bdf      	subge	r7, r3, r7
 8017fb8:	2700      	movlt	r7, #0
 8017fba:	f1b9 0f00 	cmp.w	r9, #0
 8017fbe:	bfb5      	itete	lt
 8017fc0:	9b05      	ldrlt	r3, [sp, #20]
 8017fc2:	9d05      	ldrge	r5, [sp, #20]
 8017fc4:	eba3 0509 	sublt.w	r5, r3, r9
 8017fc8:	464b      	movge	r3, r9
 8017fca:	bfb8      	it	lt
 8017fcc:	2300      	movlt	r3, #0
 8017fce:	e77e      	b.n	8017ece <_dtoa_r+0x6fe>
 8017fd0:	9f07      	ldr	r7, [sp, #28]
 8017fd2:	9d05      	ldr	r5, [sp, #20]
 8017fd4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017fd6:	e783      	b.n	8017ee0 <_dtoa_r+0x710>
 8017fd8:	9a07      	ldr	r2, [sp, #28]
 8017fda:	e7ab      	b.n	8017f34 <_dtoa_r+0x764>
 8017fdc:	2300      	movs	r3, #0
 8017fde:	e7d4      	b.n	8017f8a <_dtoa_r+0x7ba>
 8017fe0:	9b00      	ldr	r3, [sp, #0]
 8017fe2:	e7d2      	b.n	8017f8a <_dtoa_r+0x7ba>
 8017fe4:	2300      	movs	r3, #0
 8017fe6:	9307      	str	r3, [sp, #28]
 8017fe8:	693b      	ldr	r3, [r7, #16]
 8017fea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017fee:	6918      	ldr	r0, [r3, #16]
 8017ff0:	f000 fdb8 	bl	8018b64 <__hi0bits>
 8017ff4:	f1c0 0020 	rsb	r0, r0, #32
 8017ff8:	4440      	add	r0, r8
 8017ffa:	f010 001f 	ands.w	r0, r0, #31
 8017ffe:	d047      	beq.n	8018090 <_dtoa_r+0x8c0>
 8018000:	f1c0 0320 	rsb	r3, r0, #32
 8018004:	2b04      	cmp	r3, #4
 8018006:	dd3b      	ble.n	8018080 <_dtoa_r+0x8b0>
 8018008:	9b05      	ldr	r3, [sp, #20]
 801800a:	f1c0 001c 	rsb	r0, r0, #28
 801800e:	4403      	add	r3, r0
 8018010:	9305      	str	r3, [sp, #20]
 8018012:	4405      	add	r5, r0
 8018014:	4480      	add	r8, r0
 8018016:	9b05      	ldr	r3, [sp, #20]
 8018018:	2b00      	cmp	r3, #0
 801801a:	dd05      	ble.n	8018028 <_dtoa_r+0x858>
 801801c:	461a      	mov	r2, r3
 801801e:	9904      	ldr	r1, [sp, #16]
 8018020:	4620      	mov	r0, r4
 8018022:	f000 fedb 	bl	8018ddc <__lshift>
 8018026:	9004      	str	r0, [sp, #16]
 8018028:	f1b8 0f00 	cmp.w	r8, #0
 801802c:	dd05      	ble.n	801803a <_dtoa_r+0x86a>
 801802e:	4639      	mov	r1, r7
 8018030:	4642      	mov	r2, r8
 8018032:	4620      	mov	r0, r4
 8018034:	f000 fed2 	bl	8018ddc <__lshift>
 8018038:	4607      	mov	r7, r0
 801803a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801803c:	b353      	cbz	r3, 8018094 <_dtoa_r+0x8c4>
 801803e:	4639      	mov	r1, r7
 8018040:	9804      	ldr	r0, [sp, #16]
 8018042:	f000 ff1f 	bl	8018e84 <__mcmp>
 8018046:	2800      	cmp	r0, #0
 8018048:	da24      	bge.n	8018094 <_dtoa_r+0x8c4>
 801804a:	2300      	movs	r3, #0
 801804c:	220a      	movs	r2, #10
 801804e:	9904      	ldr	r1, [sp, #16]
 8018050:	4620      	mov	r0, r4
 8018052:	f000 fd0e 	bl	8018a72 <__multadd>
 8018056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018058:	9004      	str	r0, [sp, #16]
 801805a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801805e:	2b00      	cmp	r3, #0
 8018060:	f000 814d 	beq.w	80182fe <_dtoa_r+0xb2e>
 8018064:	2300      	movs	r3, #0
 8018066:	4631      	mov	r1, r6
 8018068:	220a      	movs	r2, #10
 801806a:	4620      	mov	r0, r4
 801806c:	f000 fd01 	bl	8018a72 <__multadd>
 8018070:	9b02      	ldr	r3, [sp, #8]
 8018072:	2b00      	cmp	r3, #0
 8018074:	4606      	mov	r6, r0
 8018076:	dc4f      	bgt.n	8018118 <_dtoa_r+0x948>
 8018078:	9b06      	ldr	r3, [sp, #24]
 801807a:	2b02      	cmp	r3, #2
 801807c:	dd4c      	ble.n	8018118 <_dtoa_r+0x948>
 801807e:	e011      	b.n	80180a4 <_dtoa_r+0x8d4>
 8018080:	d0c9      	beq.n	8018016 <_dtoa_r+0x846>
 8018082:	9a05      	ldr	r2, [sp, #20]
 8018084:	331c      	adds	r3, #28
 8018086:	441a      	add	r2, r3
 8018088:	9205      	str	r2, [sp, #20]
 801808a:	441d      	add	r5, r3
 801808c:	4498      	add	r8, r3
 801808e:	e7c2      	b.n	8018016 <_dtoa_r+0x846>
 8018090:	4603      	mov	r3, r0
 8018092:	e7f6      	b.n	8018082 <_dtoa_r+0x8b2>
 8018094:	f1b9 0f00 	cmp.w	r9, #0
 8018098:	dc38      	bgt.n	801810c <_dtoa_r+0x93c>
 801809a:	9b06      	ldr	r3, [sp, #24]
 801809c:	2b02      	cmp	r3, #2
 801809e:	dd35      	ble.n	801810c <_dtoa_r+0x93c>
 80180a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80180a4:	9b02      	ldr	r3, [sp, #8]
 80180a6:	b963      	cbnz	r3, 80180c2 <_dtoa_r+0x8f2>
 80180a8:	4639      	mov	r1, r7
 80180aa:	2205      	movs	r2, #5
 80180ac:	4620      	mov	r0, r4
 80180ae:	f000 fce0 	bl	8018a72 <__multadd>
 80180b2:	4601      	mov	r1, r0
 80180b4:	4607      	mov	r7, r0
 80180b6:	9804      	ldr	r0, [sp, #16]
 80180b8:	f000 fee4 	bl	8018e84 <__mcmp>
 80180bc:	2800      	cmp	r0, #0
 80180be:	f73f adcc 	bgt.w	8017c5a <_dtoa_r+0x48a>
 80180c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80180c4:	465d      	mov	r5, fp
 80180c6:	ea6f 0a03 	mvn.w	sl, r3
 80180ca:	f04f 0900 	mov.w	r9, #0
 80180ce:	4639      	mov	r1, r7
 80180d0:	4620      	mov	r0, r4
 80180d2:	f000 fcb7 	bl	8018a44 <_Bfree>
 80180d6:	2e00      	cmp	r6, #0
 80180d8:	f43f aeb7 	beq.w	8017e4a <_dtoa_r+0x67a>
 80180dc:	f1b9 0f00 	cmp.w	r9, #0
 80180e0:	d005      	beq.n	80180ee <_dtoa_r+0x91e>
 80180e2:	45b1      	cmp	r9, r6
 80180e4:	d003      	beq.n	80180ee <_dtoa_r+0x91e>
 80180e6:	4649      	mov	r1, r9
 80180e8:	4620      	mov	r0, r4
 80180ea:	f000 fcab 	bl	8018a44 <_Bfree>
 80180ee:	4631      	mov	r1, r6
 80180f0:	4620      	mov	r0, r4
 80180f2:	f000 fca7 	bl	8018a44 <_Bfree>
 80180f6:	e6a8      	b.n	8017e4a <_dtoa_r+0x67a>
 80180f8:	2700      	movs	r7, #0
 80180fa:	463e      	mov	r6, r7
 80180fc:	e7e1      	b.n	80180c2 <_dtoa_r+0x8f2>
 80180fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8018102:	463e      	mov	r6, r7
 8018104:	e5a9      	b.n	8017c5a <_dtoa_r+0x48a>
 8018106:	bf00      	nop
 8018108:	40240000 	.word	0x40240000
 801810c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801810e:	f8cd 9008 	str.w	r9, [sp, #8]
 8018112:	2b00      	cmp	r3, #0
 8018114:	f000 80fa 	beq.w	801830c <_dtoa_r+0xb3c>
 8018118:	2d00      	cmp	r5, #0
 801811a:	dd05      	ble.n	8018128 <_dtoa_r+0x958>
 801811c:	4631      	mov	r1, r6
 801811e:	462a      	mov	r2, r5
 8018120:	4620      	mov	r0, r4
 8018122:	f000 fe5b 	bl	8018ddc <__lshift>
 8018126:	4606      	mov	r6, r0
 8018128:	9b07      	ldr	r3, [sp, #28]
 801812a:	2b00      	cmp	r3, #0
 801812c:	d04c      	beq.n	80181c8 <_dtoa_r+0x9f8>
 801812e:	6871      	ldr	r1, [r6, #4]
 8018130:	4620      	mov	r0, r4
 8018132:	f000 fc53 	bl	80189dc <_Balloc>
 8018136:	6932      	ldr	r2, [r6, #16]
 8018138:	3202      	adds	r2, #2
 801813a:	4605      	mov	r5, r0
 801813c:	0092      	lsls	r2, r2, #2
 801813e:	f106 010c 	add.w	r1, r6, #12
 8018142:	300c      	adds	r0, #12
 8018144:	f7fd fc8a 	bl	8015a5c <memcpy>
 8018148:	2201      	movs	r2, #1
 801814a:	4629      	mov	r1, r5
 801814c:	4620      	mov	r0, r4
 801814e:	f000 fe45 	bl	8018ddc <__lshift>
 8018152:	9b00      	ldr	r3, [sp, #0]
 8018154:	f8cd b014 	str.w	fp, [sp, #20]
 8018158:	f003 0301 	and.w	r3, r3, #1
 801815c:	46b1      	mov	r9, r6
 801815e:	9307      	str	r3, [sp, #28]
 8018160:	4606      	mov	r6, r0
 8018162:	4639      	mov	r1, r7
 8018164:	9804      	ldr	r0, [sp, #16]
 8018166:	f7ff faa5 	bl	80176b4 <quorem>
 801816a:	4649      	mov	r1, r9
 801816c:	4605      	mov	r5, r0
 801816e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8018172:	9804      	ldr	r0, [sp, #16]
 8018174:	f000 fe86 	bl	8018e84 <__mcmp>
 8018178:	4632      	mov	r2, r6
 801817a:	9000      	str	r0, [sp, #0]
 801817c:	4639      	mov	r1, r7
 801817e:	4620      	mov	r0, r4
 8018180:	f000 fe9a 	bl	8018eb8 <__mdiff>
 8018184:	68c3      	ldr	r3, [r0, #12]
 8018186:	4602      	mov	r2, r0
 8018188:	bb03      	cbnz	r3, 80181cc <_dtoa_r+0x9fc>
 801818a:	4601      	mov	r1, r0
 801818c:	9008      	str	r0, [sp, #32]
 801818e:	9804      	ldr	r0, [sp, #16]
 8018190:	f000 fe78 	bl	8018e84 <__mcmp>
 8018194:	9a08      	ldr	r2, [sp, #32]
 8018196:	4603      	mov	r3, r0
 8018198:	4611      	mov	r1, r2
 801819a:	4620      	mov	r0, r4
 801819c:	9308      	str	r3, [sp, #32]
 801819e:	f000 fc51 	bl	8018a44 <_Bfree>
 80181a2:	9b08      	ldr	r3, [sp, #32]
 80181a4:	b9a3      	cbnz	r3, 80181d0 <_dtoa_r+0xa00>
 80181a6:	9a06      	ldr	r2, [sp, #24]
 80181a8:	b992      	cbnz	r2, 80181d0 <_dtoa_r+0xa00>
 80181aa:	9a07      	ldr	r2, [sp, #28]
 80181ac:	b982      	cbnz	r2, 80181d0 <_dtoa_r+0xa00>
 80181ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80181b2:	d029      	beq.n	8018208 <_dtoa_r+0xa38>
 80181b4:	9b00      	ldr	r3, [sp, #0]
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	dd01      	ble.n	80181be <_dtoa_r+0x9ee>
 80181ba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80181be:	9b05      	ldr	r3, [sp, #20]
 80181c0:	1c5d      	adds	r5, r3, #1
 80181c2:	f883 8000 	strb.w	r8, [r3]
 80181c6:	e782      	b.n	80180ce <_dtoa_r+0x8fe>
 80181c8:	4630      	mov	r0, r6
 80181ca:	e7c2      	b.n	8018152 <_dtoa_r+0x982>
 80181cc:	2301      	movs	r3, #1
 80181ce:	e7e3      	b.n	8018198 <_dtoa_r+0x9c8>
 80181d0:	9a00      	ldr	r2, [sp, #0]
 80181d2:	2a00      	cmp	r2, #0
 80181d4:	db04      	blt.n	80181e0 <_dtoa_r+0xa10>
 80181d6:	d125      	bne.n	8018224 <_dtoa_r+0xa54>
 80181d8:	9a06      	ldr	r2, [sp, #24]
 80181da:	bb1a      	cbnz	r2, 8018224 <_dtoa_r+0xa54>
 80181dc:	9a07      	ldr	r2, [sp, #28]
 80181de:	bb0a      	cbnz	r2, 8018224 <_dtoa_r+0xa54>
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	ddec      	ble.n	80181be <_dtoa_r+0x9ee>
 80181e4:	2201      	movs	r2, #1
 80181e6:	9904      	ldr	r1, [sp, #16]
 80181e8:	4620      	mov	r0, r4
 80181ea:	f000 fdf7 	bl	8018ddc <__lshift>
 80181ee:	4639      	mov	r1, r7
 80181f0:	9004      	str	r0, [sp, #16]
 80181f2:	f000 fe47 	bl	8018e84 <__mcmp>
 80181f6:	2800      	cmp	r0, #0
 80181f8:	dc03      	bgt.n	8018202 <_dtoa_r+0xa32>
 80181fa:	d1e0      	bne.n	80181be <_dtoa_r+0x9ee>
 80181fc:	f018 0f01 	tst.w	r8, #1
 8018200:	d0dd      	beq.n	80181be <_dtoa_r+0x9ee>
 8018202:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018206:	d1d8      	bne.n	80181ba <_dtoa_r+0x9ea>
 8018208:	9b05      	ldr	r3, [sp, #20]
 801820a:	9a05      	ldr	r2, [sp, #20]
 801820c:	1c5d      	adds	r5, r3, #1
 801820e:	2339      	movs	r3, #57	; 0x39
 8018210:	7013      	strb	r3, [r2, #0]
 8018212:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018216:	2b39      	cmp	r3, #57	; 0x39
 8018218:	f105 32ff 	add.w	r2, r5, #4294967295
 801821c:	d04f      	beq.n	80182be <_dtoa_r+0xaee>
 801821e:	3301      	adds	r3, #1
 8018220:	7013      	strb	r3, [r2, #0]
 8018222:	e754      	b.n	80180ce <_dtoa_r+0x8fe>
 8018224:	9a05      	ldr	r2, [sp, #20]
 8018226:	2b00      	cmp	r3, #0
 8018228:	f102 0501 	add.w	r5, r2, #1
 801822c:	dd06      	ble.n	801823c <_dtoa_r+0xa6c>
 801822e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018232:	d0e9      	beq.n	8018208 <_dtoa_r+0xa38>
 8018234:	f108 0801 	add.w	r8, r8, #1
 8018238:	9b05      	ldr	r3, [sp, #20]
 801823a:	e7c2      	b.n	80181c2 <_dtoa_r+0x9f2>
 801823c:	9a02      	ldr	r2, [sp, #8]
 801823e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8018242:	eba5 030b 	sub.w	r3, r5, fp
 8018246:	4293      	cmp	r3, r2
 8018248:	d021      	beq.n	801828e <_dtoa_r+0xabe>
 801824a:	2300      	movs	r3, #0
 801824c:	220a      	movs	r2, #10
 801824e:	9904      	ldr	r1, [sp, #16]
 8018250:	4620      	mov	r0, r4
 8018252:	f000 fc0e 	bl	8018a72 <__multadd>
 8018256:	45b1      	cmp	r9, r6
 8018258:	9004      	str	r0, [sp, #16]
 801825a:	f04f 0300 	mov.w	r3, #0
 801825e:	f04f 020a 	mov.w	r2, #10
 8018262:	4649      	mov	r1, r9
 8018264:	4620      	mov	r0, r4
 8018266:	d105      	bne.n	8018274 <_dtoa_r+0xaa4>
 8018268:	f000 fc03 	bl	8018a72 <__multadd>
 801826c:	4681      	mov	r9, r0
 801826e:	4606      	mov	r6, r0
 8018270:	9505      	str	r5, [sp, #20]
 8018272:	e776      	b.n	8018162 <_dtoa_r+0x992>
 8018274:	f000 fbfd 	bl	8018a72 <__multadd>
 8018278:	4631      	mov	r1, r6
 801827a:	4681      	mov	r9, r0
 801827c:	2300      	movs	r3, #0
 801827e:	220a      	movs	r2, #10
 8018280:	4620      	mov	r0, r4
 8018282:	f000 fbf6 	bl	8018a72 <__multadd>
 8018286:	4606      	mov	r6, r0
 8018288:	e7f2      	b.n	8018270 <_dtoa_r+0xaa0>
 801828a:	f04f 0900 	mov.w	r9, #0
 801828e:	2201      	movs	r2, #1
 8018290:	9904      	ldr	r1, [sp, #16]
 8018292:	4620      	mov	r0, r4
 8018294:	f000 fda2 	bl	8018ddc <__lshift>
 8018298:	4639      	mov	r1, r7
 801829a:	9004      	str	r0, [sp, #16]
 801829c:	f000 fdf2 	bl	8018e84 <__mcmp>
 80182a0:	2800      	cmp	r0, #0
 80182a2:	dcb6      	bgt.n	8018212 <_dtoa_r+0xa42>
 80182a4:	d102      	bne.n	80182ac <_dtoa_r+0xadc>
 80182a6:	f018 0f01 	tst.w	r8, #1
 80182aa:	d1b2      	bne.n	8018212 <_dtoa_r+0xa42>
 80182ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80182b0:	2b30      	cmp	r3, #48	; 0x30
 80182b2:	f105 32ff 	add.w	r2, r5, #4294967295
 80182b6:	f47f af0a 	bne.w	80180ce <_dtoa_r+0x8fe>
 80182ba:	4615      	mov	r5, r2
 80182bc:	e7f6      	b.n	80182ac <_dtoa_r+0xadc>
 80182be:	4593      	cmp	fp, r2
 80182c0:	d105      	bne.n	80182ce <_dtoa_r+0xafe>
 80182c2:	2331      	movs	r3, #49	; 0x31
 80182c4:	f10a 0a01 	add.w	sl, sl, #1
 80182c8:	f88b 3000 	strb.w	r3, [fp]
 80182cc:	e6ff      	b.n	80180ce <_dtoa_r+0x8fe>
 80182ce:	4615      	mov	r5, r2
 80182d0:	e79f      	b.n	8018212 <_dtoa_r+0xa42>
 80182d2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8018338 <_dtoa_r+0xb68>
 80182d6:	e007      	b.n	80182e8 <_dtoa_r+0xb18>
 80182d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80182da:	f8df b060 	ldr.w	fp, [pc, #96]	; 801833c <_dtoa_r+0xb6c>
 80182de:	b11b      	cbz	r3, 80182e8 <_dtoa_r+0xb18>
 80182e0:	f10b 0308 	add.w	r3, fp, #8
 80182e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80182e6:	6013      	str	r3, [r2, #0]
 80182e8:	4658      	mov	r0, fp
 80182ea:	b017      	add	sp, #92	; 0x5c
 80182ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182f0:	9b06      	ldr	r3, [sp, #24]
 80182f2:	2b01      	cmp	r3, #1
 80182f4:	f77f ae35 	ble.w	8017f62 <_dtoa_r+0x792>
 80182f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80182fa:	9307      	str	r3, [sp, #28]
 80182fc:	e649      	b.n	8017f92 <_dtoa_r+0x7c2>
 80182fe:	9b02      	ldr	r3, [sp, #8]
 8018300:	2b00      	cmp	r3, #0
 8018302:	dc03      	bgt.n	801830c <_dtoa_r+0xb3c>
 8018304:	9b06      	ldr	r3, [sp, #24]
 8018306:	2b02      	cmp	r3, #2
 8018308:	f73f aecc 	bgt.w	80180a4 <_dtoa_r+0x8d4>
 801830c:	465d      	mov	r5, fp
 801830e:	4639      	mov	r1, r7
 8018310:	9804      	ldr	r0, [sp, #16]
 8018312:	f7ff f9cf 	bl	80176b4 <quorem>
 8018316:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801831a:	f805 8b01 	strb.w	r8, [r5], #1
 801831e:	9a02      	ldr	r2, [sp, #8]
 8018320:	eba5 030b 	sub.w	r3, r5, fp
 8018324:	429a      	cmp	r2, r3
 8018326:	ddb0      	ble.n	801828a <_dtoa_r+0xaba>
 8018328:	2300      	movs	r3, #0
 801832a:	220a      	movs	r2, #10
 801832c:	9904      	ldr	r1, [sp, #16]
 801832e:	4620      	mov	r0, r4
 8018330:	f000 fb9f 	bl	8018a72 <__multadd>
 8018334:	9004      	str	r0, [sp, #16]
 8018336:	e7ea      	b.n	801830e <_dtoa_r+0xb3e>
 8018338:	0801b228 	.word	0x0801b228
 801833c:	0801b2a8 	.word	0x0801b2a8

08018340 <rshift>:
 8018340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018342:	6906      	ldr	r6, [r0, #16]
 8018344:	114b      	asrs	r3, r1, #5
 8018346:	429e      	cmp	r6, r3
 8018348:	f100 0414 	add.w	r4, r0, #20
 801834c:	dd30      	ble.n	80183b0 <rshift+0x70>
 801834e:	f011 011f 	ands.w	r1, r1, #31
 8018352:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8018356:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801835a:	d108      	bne.n	801836e <rshift+0x2e>
 801835c:	4621      	mov	r1, r4
 801835e:	42b2      	cmp	r2, r6
 8018360:	460b      	mov	r3, r1
 8018362:	d211      	bcs.n	8018388 <rshift+0x48>
 8018364:	f852 3b04 	ldr.w	r3, [r2], #4
 8018368:	f841 3b04 	str.w	r3, [r1], #4
 801836c:	e7f7      	b.n	801835e <rshift+0x1e>
 801836e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8018372:	f1c1 0c20 	rsb	ip, r1, #32
 8018376:	40cd      	lsrs	r5, r1
 8018378:	3204      	adds	r2, #4
 801837a:	4623      	mov	r3, r4
 801837c:	42b2      	cmp	r2, r6
 801837e:	4617      	mov	r7, r2
 8018380:	d30c      	bcc.n	801839c <rshift+0x5c>
 8018382:	601d      	str	r5, [r3, #0]
 8018384:	b105      	cbz	r5, 8018388 <rshift+0x48>
 8018386:	3304      	adds	r3, #4
 8018388:	1b1a      	subs	r2, r3, r4
 801838a:	42a3      	cmp	r3, r4
 801838c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018390:	bf08      	it	eq
 8018392:	2300      	moveq	r3, #0
 8018394:	6102      	str	r2, [r0, #16]
 8018396:	bf08      	it	eq
 8018398:	6143      	streq	r3, [r0, #20]
 801839a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801839c:	683f      	ldr	r7, [r7, #0]
 801839e:	fa07 f70c 	lsl.w	r7, r7, ip
 80183a2:	433d      	orrs	r5, r7
 80183a4:	f843 5b04 	str.w	r5, [r3], #4
 80183a8:	f852 5b04 	ldr.w	r5, [r2], #4
 80183ac:	40cd      	lsrs	r5, r1
 80183ae:	e7e5      	b.n	801837c <rshift+0x3c>
 80183b0:	4623      	mov	r3, r4
 80183b2:	e7e9      	b.n	8018388 <rshift+0x48>

080183b4 <__hexdig_fun>:
 80183b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80183b8:	2b09      	cmp	r3, #9
 80183ba:	d802      	bhi.n	80183c2 <__hexdig_fun+0xe>
 80183bc:	3820      	subs	r0, #32
 80183be:	b2c0      	uxtb	r0, r0
 80183c0:	4770      	bx	lr
 80183c2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80183c6:	2b05      	cmp	r3, #5
 80183c8:	d801      	bhi.n	80183ce <__hexdig_fun+0x1a>
 80183ca:	3847      	subs	r0, #71	; 0x47
 80183cc:	e7f7      	b.n	80183be <__hexdig_fun+0xa>
 80183ce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80183d2:	2b05      	cmp	r3, #5
 80183d4:	d801      	bhi.n	80183da <__hexdig_fun+0x26>
 80183d6:	3827      	subs	r0, #39	; 0x27
 80183d8:	e7f1      	b.n	80183be <__hexdig_fun+0xa>
 80183da:	2000      	movs	r0, #0
 80183dc:	4770      	bx	lr

080183de <__gethex>:
 80183de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183e2:	b08b      	sub	sp, #44	; 0x2c
 80183e4:	468a      	mov	sl, r1
 80183e6:	9002      	str	r0, [sp, #8]
 80183e8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80183ea:	9306      	str	r3, [sp, #24]
 80183ec:	4690      	mov	r8, r2
 80183ee:	f000 fad0 	bl	8018992 <__localeconv_l>
 80183f2:	6803      	ldr	r3, [r0, #0]
 80183f4:	9303      	str	r3, [sp, #12]
 80183f6:	4618      	mov	r0, r3
 80183f8:	f7e7 feea 	bl	80001d0 <strlen>
 80183fc:	9b03      	ldr	r3, [sp, #12]
 80183fe:	9001      	str	r0, [sp, #4]
 8018400:	4403      	add	r3, r0
 8018402:	f04f 0b00 	mov.w	fp, #0
 8018406:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801840a:	9307      	str	r3, [sp, #28]
 801840c:	f8da 3000 	ldr.w	r3, [sl]
 8018410:	3302      	adds	r3, #2
 8018412:	461f      	mov	r7, r3
 8018414:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018418:	2830      	cmp	r0, #48	; 0x30
 801841a:	d06c      	beq.n	80184f6 <__gethex+0x118>
 801841c:	f7ff ffca 	bl	80183b4 <__hexdig_fun>
 8018420:	4604      	mov	r4, r0
 8018422:	2800      	cmp	r0, #0
 8018424:	d16a      	bne.n	80184fc <__gethex+0x11e>
 8018426:	9a01      	ldr	r2, [sp, #4]
 8018428:	9903      	ldr	r1, [sp, #12]
 801842a:	4638      	mov	r0, r7
 801842c:	f001 f836 	bl	801949c <strncmp>
 8018430:	2800      	cmp	r0, #0
 8018432:	d166      	bne.n	8018502 <__gethex+0x124>
 8018434:	9b01      	ldr	r3, [sp, #4]
 8018436:	5cf8      	ldrb	r0, [r7, r3]
 8018438:	18fe      	adds	r6, r7, r3
 801843a:	f7ff ffbb 	bl	80183b4 <__hexdig_fun>
 801843e:	2800      	cmp	r0, #0
 8018440:	d062      	beq.n	8018508 <__gethex+0x12a>
 8018442:	4633      	mov	r3, r6
 8018444:	7818      	ldrb	r0, [r3, #0]
 8018446:	2830      	cmp	r0, #48	; 0x30
 8018448:	461f      	mov	r7, r3
 801844a:	f103 0301 	add.w	r3, r3, #1
 801844e:	d0f9      	beq.n	8018444 <__gethex+0x66>
 8018450:	f7ff ffb0 	bl	80183b4 <__hexdig_fun>
 8018454:	fab0 f580 	clz	r5, r0
 8018458:	096d      	lsrs	r5, r5, #5
 801845a:	4634      	mov	r4, r6
 801845c:	f04f 0b01 	mov.w	fp, #1
 8018460:	463a      	mov	r2, r7
 8018462:	4616      	mov	r6, r2
 8018464:	3201      	adds	r2, #1
 8018466:	7830      	ldrb	r0, [r6, #0]
 8018468:	f7ff ffa4 	bl	80183b4 <__hexdig_fun>
 801846c:	2800      	cmp	r0, #0
 801846e:	d1f8      	bne.n	8018462 <__gethex+0x84>
 8018470:	9a01      	ldr	r2, [sp, #4]
 8018472:	9903      	ldr	r1, [sp, #12]
 8018474:	4630      	mov	r0, r6
 8018476:	f001 f811 	bl	801949c <strncmp>
 801847a:	b950      	cbnz	r0, 8018492 <__gethex+0xb4>
 801847c:	b954      	cbnz	r4, 8018494 <__gethex+0xb6>
 801847e:	9b01      	ldr	r3, [sp, #4]
 8018480:	18f4      	adds	r4, r6, r3
 8018482:	4622      	mov	r2, r4
 8018484:	4616      	mov	r6, r2
 8018486:	3201      	adds	r2, #1
 8018488:	7830      	ldrb	r0, [r6, #0]
 801848a:	f7ff ff93 	bl	80183b4 <__hexdig_fun>
 801848e:	2800      	cmp	r0, #0
 8018490:	d1f8      	bne.n	8018484 <__gethex+0xa6>
 8018492:	b10c      	cbz	r4, 8018498 <__gethex+0xba>
 8018494:	1ba4      	subs	r4, r4, r6
 8018496:	00a4      	lsls	r4, r4, #2
 8018498:	7833      	ldrb	r3, [r6, #0]
 801849a:	2b50      	cmp	r3, #80	; 0x50
 801849c:	d001      	beq.n	80184a2 <__gethex+0xc4>
 801849e:	2b70      	cmp	r3, #112	; 0x70
 80184a0:	d140      	bne.n	8018524 <__gethex+0x146>
 80184a2:	7873      	ldrb	r3, [r6, #1]
 80184a4:	2b2b      	cmp	r3, #43	; 0x2b
 80184a6:	d031      	beq.n	801850c <__gethex+0x12e>
 80184a8:	2b2d      	cmp	r3, #45	; 0x2d
 80184aa:	d033      	beq.n	8018514 <__gethex+0x136>
 80184ac:	1c71      	adds	r1, r6, #1
 80184ae:	f04f 0900 	mov.w	r9, #0
 80184b2:	7808      	ldrb	r0, [r1, #0]
 80184b4:	f7ff ff7e 	bl	80183b4 <__hexdig_fun>
 80184b8:	1e43      	subs	r3, r0, #1
 80184ba:	b2db      	uxtb	r3, r3
 80184bc:	2b18      	cmp	r3, #24
 80184be:	d831      	bhi.n	8018524 <__gethex+0x146>
 80184c0:	f1a0 0210 	sub.w	r2, r0, #16
 80184c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80184c8:	f7ff ff74 	bl	80183b4 <__hexdig_fun>
 80184cc:	1e43      	subs	r3, r0, #1
 80184ce:	b2db      	uxtb	r3, r3
 80184d0:	2b18      	cmp	r3, #24
 80184d2:	d922      	bls.n	801851a <__gethex+0x13c>
 80184d4:	f1b9 0f00 	cmp.w	r9, #0
 80184d8:	d000      	beq.n	80184dc <__gethex+0xfe>
 80184da:	4252      	negs	r2, r2
 80184dc:	4414      	add	r4, r2
 80184de:	f8ca 1000 	str.w	r1, [sl]
 80184e2:	b30d      	cbz	r5, 8018528 <__gethex+0x14a>
 80184e4:	f1bb 0f00 	cmp.w	fp, #0
 80184e8:	bf0c      	ite	eq
 80184ea:	2706      	moveq	r7, #6
 80184ec:	2700      	movne	r7, #0
 80184ee:	4638      	mov	r0, r7
 80184f0:	b00b      	add	sp, #44	; 0x2c
 80184f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184f6:	f10b 0b01 	add.w	fp, fp, #1
 80184fa:	e78a      	b.n	8018412 <__gethex+0x34>
 80184fc:	2500      	movs	r5, #0
 80184fe:	462c      	mov	r4, r5
 8018500:	e7ae      	b.n	8018460 <__gethex+0x82>
 8018502:	463e      	mov	r6, r7
 8018504:	2501      	movs	r5, #1
 8018506:	e7c7      	b.n	8018498 <__gethex+0xba>
 8018508:	4604      	mov	r4, r0
 801850a:	e7fb      	b.n	8018504 <__gethex+0x126>
 801850c:	f04f 0900 	mov.w	r9, #0
 8018510:	1cb1      	adds	r1, r6, #2
 8018512:	e7ce      	b.n	80184b2 <__gethex+0xd4>
 8018514:	f04f 0901 	mov.w	r9, #1
 8018518:	e7fa      	b.n	8018510 <__gethex+0x132>
 801851a:	230a      	movs	r3, #10
 801851c:	fb03 0202 	mla	r2, r3, r2, r0
 8018520:	3a10      	subs	r2, #16
 8018522:	e7cf      	b.n	80184c4 <__gethex+0xe6>
 8018524:	4631      	mov	r1, r6
 8018526:	e7da      	b.n	80184de <__gethex+0x100>
 8018528:	1bf3      	subs	r3, r6, r7
 801852a:	3b01      	subs	r3, #1
 801852c:	4629      	mov	r1, r5
 801852e:	2b07      	cmp	r3, #7
 8018530:	dc49      	bgt.n	80185c6 <__gethex+0x1e8>
 8018532:	9802      	ldr	r0, [sp, #8]
 8018534:	f000 fa52 	bl	80189dc <_Balloc>
 8018538:	9b01      	ldr	r3, [sp, #4]
 801853a:	f100 0914 	add.w	r9, r0, #20
 801853e:	f04f 0b00 	mov.w	fp, #0
 8018542:	f1c3 0301 	rsb	r3, r3, #1
 8018546:	4605      	mov	r5, r0
 8018548:	f8cd 9010 	str.w	r9, [sp, #16]
 801854c:	46da      	mov	sl, fp
 801854e:	9308      	str	r3, [sp, #32]
 8018550:	42b7      	cmp	r7, r6
 8018552:	d33b      	bcc.n	80185cc <__gethex+0x1ee>
 8018554:	9804      	ldr	r0, [sp, #16]
 8018556:	f840 ab04 	str.w	sl, [r0], #4
 801855a:	eba0 0009 	sub.w	r0, r0, r9
 801855e:	1080      	asrs	r0, r0, #2
 8018560:	6128      	str	r0, [r5, #16]
 8018562:	0147      	lsls	r7, r0, #5
 8018564:	4650      	mov	r0, sl
 8018566:	f000 fafd 	bl	8018b64 <__hi0bits>
 801856a:	f8d8 6000 	ldr.w	r6, [r8]
 801856e:	1a3f      	subs	r7, r7, r0
 8018570:	42b7      	cmp	r7, r6
 8018572:	dd64      	ble.n	801863e <__gethex+0x260>
 8018574:	1bbf      	subs	r7, r7, r6
 8018576:	4639      	mov	r1, r7
 8018578:	4628      	mov	r0, r5
 801857a:	f000 fe0d 	bl	8019198 <__any_on>
 801857e:	4682      	mov	sl, r0
 8018580:	b178      	cbz	r0, 80185a2 <__gethex+0x1c4>
 8018582:	1e7b      	subs	r3, r7, #1
 8018584:	1159      	asrs	r1, r3, #5
 8018586:	f003 021f 	and.w	r2, r3, #31
 801858a:	f04f 0a01 	mov.w	sl, #1
 801858e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018592:	fa0a f202 	lsl.w	r2, sl, r2
 8018596:	420a      	tst	r2, r1
 8018598:	d003      	beq.n	80185a2 <__gethex+0x1c4>
 801859a:	4553      	cmp	r3, sl
 801859c:	dc46      	bgt.n	801862c <__gethex+0x24e>
 801859e:	f04f 0a02 	mov.w	sl, #2
 80185a2:	4639      	mov	r1, r7
 80185a4:	4628      	mov	r0, r5
 80185a6:	f7ff fecb 	bl	8018340 <rshift>
 80185aa:	443c      	add	r4, r7
 80185ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80185b0:	42a3      	cmp	r3, r4
 80185b2:	da52      	bge.n	801865a <__gethex+0x27c>
 80185b4:	4629      	mov	r1, r5
 80185b6:	9802      	ldr	r0, [sp, #8]
 80185b8:	f000 fa44 	bl	8018a44 <_Bfree>
 80185bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80185be:	2300      	movs	r3, #0
 80185c0:	6013      	str	r3, [r2, #0]
 80185c2:	27a3      	movs	r7, #163	; 0xa3
 80185c4:	e793      	b.n	80184ee <__gethex+0x110>
 80185c6:	3101      	adds	r1, #1
 80185c8:	105b      	asrs	r3, r3, #1
 80185ca:	e7b0      	b.n	801852e <__gethex+0x150>
 80185cc:	1e73      	subs	r3, r6, #1
 80185ce:	9305      	str	r3, [sp, #20]
 80185d0:	9a07      	ldr	r2, [sp, #28]
 80185d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80185d6:	4293      	cmp	r3, r2
 80185d8:	d018      	beq.n	801860c <__gethex+0x22e>
 80185da:	f1bb 0f20 	cmp.w	fp, #32
 80185de:	d107      	bne.n	80185f0 <__gethex+0x212>
 80185e0:	9b04      	ldr	r3, [sp, #16]
 80185e2:	f8c3 a000 	str.w	sl, [r3]
 80185e6:	3304      	adds	r3, #4
 80185e8:	f04f 0a00 	mov.w	sl, #0
 80185ec:	9304      	str	r3, [sp, #16]
 80185ee:	46d3      	mov	fp, sl
 80185f0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80185f4:	f7ff fede 	bl	80183b4 <__hexdig_fun>
 80185f8:	f000 000f 	and.w	r0, r0, #15
 80185fc:	fa00 f00b 	lsl.w	r0, r0, fp
 8018600:	ea4a 0a00 	orr.w	sl, sl, r0
 8018604:	f10b 0b04 	add.w	fp, fp, #4
 8018608:	9b05      	ldr	r3, [sp, #20]
 801860a:	e00d      	b.n	8018628 <__gethex+0x24a>
 801860c:	9b05      	ldr	r3, [sp, #20]
 801860e:	9a08      	ldr	r2, [sp, #32]
 8018610:	4413      	add	r3, r2
 8018612:	42bb      	cmp	r3, r7
 8018614:	d3e1      	bcc.n	80185da <__gethex+0x1fc>
 8018616:	4618      	mov	r0, r3
 8018618:	9a01      	ldr	r2, [sp, #4]
 801861a:	9903      	ldr	r1, [sp, #12]
 801861c:	9309      	str	r3, [sp, #36]	; 0x24
 801861e:	f000 ff3d 	bl	801949c <strncmp>
 8018622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018624:	2800      	cmp	r0, #0
 8018626:	d1d8      	bne.n	80185da <__gethex+0x1fc>
 8018628:	461e      	mov	r6, r3
 801862a:	e791      	b.n	8018550 <__gethex+0x172>
 801862c:	1eb9      	subs	r1, r7, #2
 801862e:	4628      	mov	r0, r5
 8018630:	f000 fdb2 	bl	8019198 <__any_on>
 8018634:	2800      	cmp	r0, #0
 8018636:	d0b2      	beq.n	801859e <__gethex+0x1c0>
 8018638:	f04f 0a03 	mov.w	sl, #3
 801863c:	e7b1      	b.n	80185a2 <__gethex+0x1c4>
 801863e:	da09      	bge.n	8018654 <__gethex+0x276>
 8018640:	1bf7      	subs	r7, r6, r7
 8018642:	4629      	mov	r1, r5
 8018644:	463a      	mov	r2, r7
 8018646:	9802      	ldr	r0, [sp, #8]
 8018648:	f000 fbc8 	bl	8018ddc <__lshift>
 801864c:	1be4      	subs	r4, r4, r7
 801864e:	4605      	mov	r5, r0
 8018650:	f100 0914 	add.w	r9, r0, #20
 8018654:	f04f 0a00 	mov.w	sl, #0
 8018658:	e7a8      	b.n	80185ac <__gethex+0x1ce>
 801865a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801865e:	42a0      	cmp	r0, r4
 8018660:	dd6a      	ble.n	8018738 <__gethex+0x35a>
 8018662:	1b04      	subs	r4, r0, r4
 8018664:	42a6      	cmp	r6, r4
 8018666:	dc2e      	bgt.n	80186c6 <__gethex+0x2e8>
 8018668:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801866c:	2b02      	cmp	r3, #2
 801866e:	d022      	beq.n	80186b6 <__gethex+0x2d8>
 8018670:	2b03      	cmp	r3, #3
 8018672:	d024      	beq.n	80186be <__gethex+0x2e0>
 8018674:	2b01      	cmp	r3, #1
 8018676:	d115      	bne.n	80186a4 <__gethex+0x2c6>
 8018678:	42a6      	cmp	r6, r4
 801867a:	d113      	bne.n	80186a4 <__gethex+0x2c6>
 801867c:	2e01      	cmp	r6, #1
 801867e:	dc0b      	bgt.n	8018698 <__gethex+0x2ba>
 8018680:	9a06      	ldr	r2, [sp, #24]
 8018682:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018686:	6013      	str	r3, [r2, #0]
 8018688:	2301      	movs	r3, #1
 801868a:	612b      	str	r3, [r5, #16]
 801868c:	f8c9 3000 	str.w	r3, [r9]
 8018690:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018692:	2762      	movs	r7, #98	; 0x62
 8018694:	601d      	str	r5, [r3, #0]
 8018696:	e72a      	b.n	80184ee <__gethex+0x110>
 8018698:	1e71      	subs	r1, r6, #1
 801869a:	4628      	mov	r0, r5
 801869c:	f000 fd7c 	bl	8019198 <__any_on>
 80186a0:	2800      	cmp	r0, #0
 80186a2:	d1ed      	bne.n	8018680 <__gethex+0x2a2>
 80186a4:	4629      	mov	r1, r5
 80186a6:	9802      	ldr	r0, [sp, #8]
 80186a8:	f000 f9cc 	bl	8018a44 <_Bfree>
 80186ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80186ae:	2300      	movs	r3, #0
 80186b0:	6013      	str	r3, [r2, #0]
 80186b2:	2750      	movs	r7, #80	; 0x50
 80186b4:	e71b      	b.n	80184ee <__gethex+0x110>
 80186b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	d0e1      	beq.n	8018680 <__gethex+0x2a2>
 80186bc:	e7f2      	b.n	80186a4 <__gethex+0x2c6>
 80186be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d1dd      	bne.n	8018680 <__gethex+0x2a2>
 80186c4:	e7ee      	b.n	80186a4 <__gethex+0x2c6>
 80186c6:	1e67      	subs	r7, r4, #1
 80186c8:	f1ba 0f00 	cmp.w	sl, #0
 80186cc:	d131      	bne.n	8018732 <__gethex+0x354>
 80186ce:	b127      	cbz	r7, 80186da <__gethex+0x2fc>
 80186d0:	4639      	mov	r1, r7
 80186d2:	4628      	mov	r0, r5
 80186d4:	f000 fd60 	bl	8019198 <__any_on>
 80186d8:	4682      	mov	sl, r0
 80186da:	117a      	asrs	r2, r7, #5
 80186dc:	2301      	movs	r3, #1
 80186de:	f007 071f 	and.w	r7, r7, #31
 80186e2:	fa03 f707 	lsl.w	r7, r3, r7
 80186e6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80186ea:	4621      	mov	r1, r4
 80186ec:	421f      	tst	r7, r3
 80186ee:	4628      	mov	r0, r5
 80186f0:	bf18      	it	ne
 80186f2:	f04a 0a02 	orrne.w	sl, sl, #2
 80186f6:	1b36      	subs	r6, r6, r4
 80186f8:	f7ff fe22 	bl	8018340 <rshift>
 80186fc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018700:	2702      	movs	r7, #2
 8018702:	f1ba 0f00 	cmp.w	sl, #0
 8018706:	d048      	beq.n	801879a <__gethex+0x3bc>
 8018708:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801870c:	2b02      	cmp	r3, #2
 801870e:	d015      	beq.n	801873c <__gethex+0x35e>
 8018710:	2b03      	cmp	r3, #3
 8018712:	d017      	beq.n	8018744 <__gethex+0x366>
 8018714:	2b01      	cmp	r3, #1
 8018716:	d109      	bne.n	801872c <__gethex+0x34e>
 8018718:	f01a 0f02 	tst.w	sl, #2
 801871c:	d006      	beq.n	801872c <__gethex+0x34e>
 801871e:	f8d9 3000 	ldr.w	r3, [r9]
 8018722:	ea4a 0a03 	orr.w	sl, sl, r3
 8018726:	f01a 0f01 	tst.w	sl, #1
 801872a:	d10e      	bne.n	801874a <__gethex+0x36c>
 801872c:	f047 0710 	orr.w	r7, r7, #16
 8018730:	e033      	b.n	801879a <__gethex+0x3bc>
 8018732:	f04f 0a01 	mov.w	sl, #1
 8018736:	e7d0      	b.n	80186da <__gethex+0x2fc>
 8018738:	2701      	movs	r7, #1
 801873a:	e7e2      	b.n	8018702 <__gethex+0x324>
 801873c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801873e:	f1c3 0301 	rsb	r3, r3, #1
 8018742:	9315      	str	r3, [sp, #84]	; 0x54
 8018744:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018746:	2b00      	cmp	r3, #0
 8018748:	d0f0      	beq.n	801872c <__gethex+0x34e>
 801874a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801874e:	f105 0314 	add.w	r3, r5, #20
 8018752:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8018756:	eb03 010a 	add.w	r1, r3, sl
 801875a:	f04f 0c00 	mov.w	ip, #0
 801875e:	4618      	mov	r0, r3
 8018760:	f853 2b04 	ldr.w	r2, [r3], #4
 8018764:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018768:	d01c      	beq.n	80187a4 <__gethex+0x3c6>
 801876a:	3201      	adds	r2, #1
 801876c:	6002      	str	r2, [r0, #0]
 801876e:	2f02      	cmp	r7, #2
 8018770:	f105 0314 	add.w	r3, r5, #20
 8018774:	d138      	bne.n	80187e8 <__gethex+0x40a>
 8018776:	f8d8 2000 	ldr.w	r2, [r8]
 801877a:	3a01      	subs	r2, #1
 801877c:	42b2      	cmp	r2, r6
 801877e:	d10a      	bne.n	8018796 <__gethex+0x3b8>
 8018780:	1171      	asrs	r1, r6, #5
 8018782:	2201      	movs	r2, #1
 8018784:	f006 061f 	and.w	r6, r6, #31
 8018788:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801878c:	fa02 f606 	lsl.w	r6, r2, r6
 8018790:	421e      	tst	r6, r3
 8018792:	bf18      	it	ne
 8018794:	4617      	movne	r7, r2
 8018796:	f047 0720 	orr.w	r7, r7, #32
 801879a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801879c:	601d      	str	r5, [r3, #0]
 801879e:	9b06      	ldr	r3, [sp, #24]
 80187a0:	601c      	str	r4, [r3, #0]
 80187a2:	e6a4      	b.n	80184ee <__gethex+0x110>
 80187a4:	4299      	cmp	r1, r3
 80187a6:	f843 cc04 	str.w	ip, [r3, #-4]
 80187aa:	d8d8      	bhi.n	801875e <__gethex+0x380>
 80187ac:	68ab      	ldr	r3, [r5, #8]
 80187ae:	4599      	cmp	r9, r3
 80187b0:	db12      	blt.n	80187d8 <__gethex+0x3fa>
 80187b2:	6869      	ldr	r1, [r5, #4]
 80187b4:	9802      	ldr	r0, [sp, #8]
 80187b6:	3101      	adds	r1, #1
 80187b8:	f000 f910 	bl	80189dc <_Balloc>
 80187bc:	692a      	ldr	r2, [r5, #16]
 80187be:	3202      	adds	r2, #2
 80187c0:	f105 010c 	add.w	r1, r5, #12
 80187c4:	4683      	mov	fp, r0
 80187c6:	0092      	lsls	r2, r2, #2
 80187c8:	300c      	adds	r0, #12
 80187ca:	f7fd f947 	bl	8015a5c <memcpy>
 80187ce:	4629      	mov	r1, r5
 80187d0:	9802      	ldr	r0, [sp, #8]
 80187d2:	f000 f937 	bl	8018a44 <_Bfree>
 80187d6:	465d      	mov	r5, fp
 80187d8:	692b      	ldr	r3, [r5, #16]
 80187da:	1c5a      	adds	r2, r3, #1
 80187dc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80187e0:	612a      	str	r2, [r5, #16]
 80187e2:	2201      	movs	r2, #1
 80187e4:	615a      	str	r2, [r3, #20]
 80187e6:	e7c2      	b.n	801876e <__gethex+0x390>
 80187e8:	692a      	ldr	r2, [r5, #16]
 80187ea:	454a      	cmp	r2, r9
 80187ec:	dd0b      	ble.n	8018806 <__gethex+0x428>
 80187ee:	2101      	movs	r1, #1
 80187f0:	4628      	mov	r0, r5
 80187f2:	f7ff fda5 	bl	8018340 <rshift>
 80187f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80187fa:	3401      	adds	r4, #1
 80187fc:	42a3      	cmp	r3, r4
 80187fe:	f6ff aed9 	blt.w	80185b4 <__gethex+0x1d6>
 8018802:	2701      	movs	r7, #1
 8018804:	e7c7      	b.n	8018796 <__gethex+0x3b8>
 8018806:	f016 061f 	ands.w	r6, r6, #31
 801880a:	d0fa      	beq.n	8018802 <__gethex+0x424>
 801880c:	449a      	add	sl, r3
 801880e:	f1c6 0620 	rsb	r6, r6, #32
 8018812:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018816:	f000 f9a5 	bl	8018b64 <__hi0bits>
 801881a:	42b0      	cmp	r0, r6
 801881c:	dbe7      	blt.n	80187ee <__gethex+0x410>
 801881e:	e7f0      	b.n	8018802 <__gethex+0x424>

08018820 <L_shift>:
 8018820:	f1c2 0208 	rsb	r2, r2, #8
 8018824:	0092      	lsls	r2, r2, #2
 8018826:	b570      	push	{r4, r5, r6, lr}
 8018828:	f1c2 0620 	rsb	r6, r2, #32
 801882c:	6843      	ldr	r3, [r0, #4]
 801882e:	6804      	ldr	r4, [r0, #0]
 8018830:	fa03 f506 	lsl.w	r5, r3, r6
 8018834:	432c      	orrs	r4, r5
 8018836:	40d3      	lsrs	r3, r2
 8018838:	6004      	str	r4, [r0, #0]
 801883a:	f840 3f04 	str.w	r3, [r0, #4]!
 801883e:	4288      	cmp	r0, r1
 8018840:	d3f4      	bcc.n	801882c <L_shift+0xc>
 8018842:	bd70      	pop	{r4, r5, r6, pc}

08018844 <__match>:
 8018844:	b530      	push	{r4, r5, lr}
 8018846:	6803      	ldr	r3, [r0, #0]
 8018848:	3301      	adds	r3, #1
 801884a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801884e:	b914      	cbnz	r4, 8018856 <__match+0x12>
 8018850:	6003      	str	r3, [r0, #0]
 8018852:	2001      	movs	r0, #1
 8018854:	bd30      	pop	{r4, r5, pc}
 8018856:	f813 2b01 	ldrb.w	r2, [r3], #1
 801885a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801885e:	2d19      	cmp	r5, #25
 8018860:	bf98      	it	ls
 8018862:	3220      	addls	r2, #32
 8018864:	42a2      	cmp	r2, r4
 8018866:	d0f0      	beq.n	801884a <__match+0x6>
 8018868:	2000      	movs	r0, #0
 801886a:	e7f3      	b.n	8018854 <__match+0x10>

0801886c <__hexnan>:
 801886c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018870:	680b      	ldr	r3, [r1, #0]
 8018872:	6801      	ldr	r1, [r0, #0]
 8018874:	115f      	asrs	r7, r3, #5
 8018876:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801887a:	f013 031f 	ands.w	r3, r3, #31
 801887e:	b087      	sub	sp, #28
 8018880:	bf18      	it	ne
 8018882:	3704      	addne	r7, #4
 8018884:	2500      	movs	r5, #0
 8018886:	1f3e      	subs	r6, r7, #4
 8018888:	4682      	mov	sl, r0
 801888a:	4690      	mov	r8, r2
 801888c:	9301      	str	r3, [sp, #4]
 801888e:	f847 5c04 	str.w	r5, [r7, #-4]
 8018892:	46b1      	mov	r9, r6
 8018894:	4634      	mov	r4, r6
 8018896:	9502      	str	r5, [sp, #8]
 8018898:	46ab      	mov	fp, r5
 801889a:	784a      	ldrb	r2, [r1, #1]
 801889c:	1c4b      	adds	r3, r1, #1
 801889e:	9303      	str	r3, [sp, #12]
 80188a0:	b342      	cbz	r2, 80188f4 <__hexnan+0x88>
 80188a2:	4610      	mov	r0, r2
 80188a4:	9105      	str	r1, [sp, #20]
 80188a6:	9204      	str	r2, [sp, #16]
 80188a8:	f7ff fd84 	bl	80183b4 <__hexdig_fun>
 80188ac:	2800      	cmp	r0, #0
 80188ae:	d143      	bne.n	8018938 <__hexnan+0xcc>
 80188b0:	9a04      	ldr	r2, [sp, #16]
 80188b2:	9905      	ldr	r1, [sp, #20]
 80188b4:	2a20      	cmp	r2, #32
 80188b6:	d818      	bhi.n	80188ea <__hexnan+0x7e>
 80188b8:	9b02      	ldr	r3, [sp, #8]
 80188ba:	459b      	cmp	fp, r3
 80188bc:	dd13      	ble.n	80188e6 <__hexnan+0x7a>
 80188be:	454c      	cmp	r4, r9
 80188c0:	d206      	bcs.n	80188d0 <__hexnan+0x64>
 80188c2:	2d07      	cmp	r5, #7
 80188c4:	dc04      	bgt.n	80188d0 <__hexnan+0x64>
 80188c6:	462a      	mov	r2, r5
 80188c8:	4649      	mov	r1, r9
 80188ca:	4620      	mov	r0, r4
 80188cc:	f7ff ffa8 	bl	8018820 <L_shift>
 80188d0:	4544      	cmp	r4, r8
 80188d2:	d944      	bls.n	801895e <__hexnan+0xf2>
 80188d4:	2300      	movs	r3, #0
 80188d6:	f1a4 0904 	sub.w	r9, r4, #4
 80188da:	f844 3c04 	str.w	r3, [r4, #-4]
 80188de:	f8cd b008 	str.w	fp, [sp, #8]
 80188e2:	464c      	mov	r4, r9
 80188e4:	461d      	mov	r5, r3
 80188e6:	9903      	ldr	r1, [sp, #12]
 80188e8:	e7d7      	b.n	801889a <__hexnan+0x2e>
 80188ea:	2a29      	cmp	r2, #41	; 0x29
 80188ec:	d14a      	bne.n	8018984 <__hexnan+0x118>
 80188ee:	3102      	adds	r1, #2
 80188f0:	f8ca 1000 	str.w	r1, [sl]
 80188f4:	f1bb 0f00 	cmp.w	fp, #0
 80188f8:	d044      	beq.n	8018984 <__hexnan+0x118>
 80188fa:	454c      	cmp	r4, r9
 80188fc:	d206      	bcs.n	801890c <__hexnan+0xa0>
 80188fe:	2d07      	cmp	r5, #7
 8018900:	dc04      	bgt.n	801890c <__hexnan+0xa0>
 8018902:	462a      	mov	r2, r5
 8018904:	4649      	mov	r1, r9
 8018906:	4620      	mov	r0, r4
 8018908:	f7ff ff8a 	bl	8018820 <L_shift>
 801890c:	4544      	cmp	r4, r8
 801890e:	d928      	bls.n	8018962 <__hexnan+0xf6>
 8018910:	4643      	mov	r3, r8
 8018912:	f854 2b04 	ldr.w	r2, [r4], #4
 8018916:	f843 2b04 	str.w	r2, [r3], #4
 801891a:	42a6      	cmp	r6, r4
 801891c:	d2f9      	bcs.n	8018912 <__hexnan+0xa6>
 801891e:	2200      	movs	r2, #0
 8018920:	f843 2b04 	str.w	r2, [r3], #4
 8018924:	429e      	cmp	r6, r3
 8018926:	d2fb      	bcs.n	8018920 <__hexnan+0xb4>
 8018928:	6833      	ldr	r3, [r6, #0]
 801892a:	b91b      	cbnz	r3, 8018934 <__hexnan+0xc8>
 801892c:	4546      	cmp	r6, r8
 801892e:	d127      	bne.n	8018980 <__hexnan+0x114>
 8018930:	2301      	movs	r3, #1
 8018932:	6033      	str	r3, [r6, #0]
 8018934:	2005      	movs	r0, #5
 8018936:	e026      	b.n	8018986 <__hexnan+0x11a>
 8018938:	3501      	adds	r5, #1
 801893a:	2d08      	cmp	r5, #8
 801893c:	f10b 0b01 	add.w	fp, fp, #1
 8018940:	dd06      	ble.n	8018950 <__hexnan+0xe4>
 8018942:	4544      	cmp	r4, r8
 8018944:	d9cf      	bls.n	80188e6 <__hexnan+0x7a>
 8018946:	2300      	movs	r3, #0
 8018948:	f844 3c04 	str.w	r3, [r4, #-4]
 801894c:	2501      	movs	r5, #1
 801894e:	3c04      	subs	r4, #4
 8018950:	6822      	ldr	r2, [r4, #0]
 8018952:	f000 000f 	and.w	r0, r0, #15
 8018956:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801895a:	6020      	str	r0, [r4, #0]
 801895c:	e7c3      	b.n	80188e6 <__hexnan+0x7a>
 801895e:	2508      	movs	r5, #8
 8018960:	e7c1      	b.n	80188e6 <__hexnan+0x7a>
 8018962:	9b01      	ldr	r3, [sp, #4]
 8018964:	2b00      	cmp	r3, #0
 8018966:	d0df      	beq.n	8018928 <__hexnan+0xbc>
 8018968:	f04f 32ff 	mov.w	r2, #4294967295
 801896c:	f1c3 0320 	rsb	r3, r3, #32
 8018970:	fa22 f303 	lsr.w	r3, r2, r3
 8018974:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018978:	401a      	ands	r2, r3
 801897a:	f847 2c04 	str.w	r2, [r7, #-4]
 801897e:	e7d3      	b.n	8018928 <__hexnan+0xbc>
 8018980:	3e04      	subs	r6, #4
 8018982:	e7d1      	b.n	8018928 <__hexnan+0xbc>
 8018984:	2004      	movs	r0, #4
 8018986:	b007      	add	sp, #28
 8018988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801898c <__locale_ctype_ptr_l>:
 801898c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018990:	4770      	bx	lr

08018992 <__localeconv_l>:
 8018992:	30f0      	adds	r0, #240	; 0xf0
 8018994:	4770      	bx	lr
	...

08018998 <_localeconv_r>:
 8018998:	4b04      	ldr	r3, [pc, #16]	; (80189ac <_localeconv_r+0x14>)
 801899a:	681b      	ldr	r3, [r3, #0]
 801899c:	6a18      	ldr	r0, [r3, #32]
 801899e:	4b04      	ldr	r3, [pc, #16]	; (80189b0 <_localeconv_r+0x18>)
 80189a0:	2800      	cmp	r0, #0
 80189a2:	bf08      	it	eq
 80189a4:	4618      	moveq	r0, r3
 80189a6:	30f0      	adds	r0, #240	; 0xf0
 80189a8:	4770      	bx	lr
 80189aa:	bf00      	nop
 80189ac:	200009ac 	.word	0x200009ac
 80189b0:	20000a10 	.word	0x20000a10

080189b4 <__ascii_mbtowc>:
 80189b4:	b082      	sub	sp, #8
 80189b6:	b901      	cbnz	r1, 80189ba <__ascii_mbtowc+0x6>
 80189b8:	a901      	add	r1, sp, #4
 80189ba:	b142      	cbz	r2, 80189ce <__ascii_mbtowc+0x1a>
 80189bc:	b14b      	cbz	r3, 80189d2 <__ascii_mbtowc+0x1e>
 80189be:	7813      	ldrb	r3, [r2, #0]
 80189c0:	600b      	str	r3, [r1, #0]
 80189c2:	7812      	ldrb	r2, [r2, #0]
 80189c4:	1c10      	adds	r0, r2, #0
 80189c6:	bf18      	it	ne
 80189c8:	2001      	movne	r0, #1
 80189ca:	b002      	add	sp, #8
 80189cc:	4770      	bx	lr
 80189ce:	4610      	mov	r0, r2
 80189d0:	e7fb      	b.n	80189ca <__ascii_mbtowc+0x16>
 80189d2:	f06f 0001 	mvn.w	r0, #1
 80189d6:	e7f8      	b.n	80189ca <__ascii_mbtowc+0x16>

080189d8 <__malloc_lock>:
 80189d8:	4770      	bx	lr

080189da <__malloc_unlock>:
 80189da:	4770      	bx	lr

080189dc <_Balloc>:
 80189dc:	b570      	push	{r4, r5, r6, lr}
 80189de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80189e0:	4604      	mov	r4, r0
 80189e2:	460e      	mov	r6, r1
 80189e4:	b93d      	cbnz	r5, 80189f6 <_Balloc+0x1a>
 80189e6:	2010      	movs	r0, #16
 80189e8:	f7fd f828 	bl	8015a3c <malloc>
 80189ec:	6260      	str	r0, [r4, #36]	; 0x24
 80189ee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80189f2:	6005      	str	r5, [r0, #0]
 80189f4:	60c5      	str	r5, [r0, #12]
 80189f6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80189f8:	68eb      	ldr	r3, [r5, #12]
 80189fa:	b183      	cbz	r3, 8018a1e <_Balloc+0x42>
 80189fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80189fe:	68db      	ldr	r3, [r3, #12]
 8018a00:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018a04:	b9b8      	cbnz	r0, 8018a36 <_Balloc+0x5a>
 8018a06:	2101      	movs	r1, #1
 8018a08:	fa01 f506 	lsl.w	r5, r1, r6
 8018a0c:	1d6a      	adds	r2, r5, #5
 8018a0e:	0092      	lsls	r2, r2, #2
 8018a10:	4620      	mov	r0, r4
 8018a12:	f000 fbe2 	bl	80191da <_calloc_r>
 8018a16:	b160      	cbz	r0, 8018a32 <_Balloc+0x56>
 8018a18:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8018a1c:	e00e      	b.n	8018a3c <_Balloc+0x60>
 8018a1e:	2221      	movs	r2, #33	; 0x21
 8018a20:	2104      	movs	r1, #4
 8018a22:	4620      	mov	r0, r4
 8018a24:	f000 fbd9 	bl	80191da <_calloc_r>
 8018a28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018a2a:	60e8      	str	r0, [r5, #12]
 8018a2c:	68db      	ldr	r3, [r3, #12]
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d1e4      	bne.n	80189fc <_Balloc+0x20>
 8018a32:	2000      	movs	r0, #0
 8018a34:	bd70      	pop	{r4, r5, r6, pc}
 8018a36:	6802      	ldr	r2, [r0, #0]
 8018a38:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018a3c:	2300      	movs	r3, #0
 8018a3e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018a42:	e7f7      	b.n	8018a34 <_Balloc+0x58>

08018a44 <_Bfree>:
 8018a44:	b570      	push	{r4, r5, r6, lr}
 8018a46:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018a48:	4606      	mov	r6, r0
 8018a4a:	460d      	mov	r5, r1
 8018a4c:	b93c      	cbnz	r4, 8018a5e <_Bfree+0x1a>
 8018a4e:	2010      	movs	r0, #16
 8018a50:	f7fc fff4 	bl	8015a3c <malloc>
 8018a54:	6270      	str	r0, [r6, #36]	; 0x24
 8018a56:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018a5a:	6004      	str	r4, [r0, #0]
 8018a5c:	60c4      	str	r4, [r0, #12]
 8018a5e:	b13d      	cbz	r5, 8018a70 <_Bfree+0x2c>
 8018a60:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018a62:	686a      	ldr	r2, [r5, #4]
 8018a64:	68db      	ldr	r3, [r3, #12]
 8018a66:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018a6a:	6029      	str	r1, [r5, #0]
 8018a6c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018a70:	bd70      	pop	{r4, r5, r6, pc}

08018a72 <__multadd>:
 8018a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a76:	690d      	ldr	r5, [r1, #16]
 8018a78:	461f      	mov	r7, r3
 8018a7a:	4606      	mov	r6, r0
 8018a7c:	460c      	mov	r4, r1
 8018a7e:	f101 0c14 	add.w	ip, r1, #20
 8018a82:	2300      	movs	r3, #0
 8018a84:	f8dc 0000 	ldr.w	r0, [ip]
 8018a88:	b281      	uxth	r1, r0
 8018a8a:	fb02 7101 	mla	r1, r2, r1, r7
 8018a8e:	0c0f      	lsrs	r7, r1, #16
 8018a90:	0c00      	lsrs	r0, r0, #16
 8018a92:	fb02 7000 	mla	r0, r2, r0, r7
 8018a96:	b289      	uxth	r1, r1
 8018a98:	3301      	adds	r3, #1
 8018a9a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018a9e:	429d      	cmp	r5, r3
 8018aa0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018aa4:	f84c 1b04 	str.w	r1, [ip], #4
 8018aa8:	dcec      	bgt.n	8018a84 <__multadd+0x12>
 8018aaa:	b1d7      	cbz	r7, 8018ae2 <__multadd+0x70>
 8018aac:	68a3      	ldr	r3, [r4, #8]
 8018aae:	42ab      	cmp	r3, r5
 8018ab0:	dc12      	bgt.n	8018ad8 <__multadd+0x66>
 8018ab2:	6861      	ldr	r1, [r4, #4]
 8018ab4:	4630      	mov	r0, r6
 8018ab6:	3101      	adds	r1, #1
 8018ab8:	f7ff ff90 	bl	80189dc <_Balloc>
 8018abc:	6922      	ldr	r2, [r4, #16]
 8018abe:	3202      	adds	r2, #2
 8018ac0:	f104 010c 	add.w	r1, r4, #12
 8018ac4:	4680      	mov	r8, r0
 8018ac6:	0092      	lsls	r2, r2, #2
 8018ac8:	300c      	adds	r0, #12
 8018aca:	f7fc ffc7 	bl	8015a5c <memcpy>
 8018ace:	4621      	mov	r1, r4
 8018ad0:	4630      	mov	r0, r6
 8018ad2:	f7ff ffb7 	bl	8018a44 <_Bfree>
 8018ad6:	4644      	mov	r4, r8
 8018ad8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018adc:	3501      	adds	r5, #1
 8018ade:	615f      	str	r7, [r3, #20]
 8018ae0:	6125      	str	r5, [r4, #16]
 8018ae2:	4620      	mov	r0, r4
 8018ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018ae8 <__s2b>:
 8018ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018aec:	460c      	mov	r4, r1
 8018aee:	4615      	mov	r5, r2
 8018af0:	461f      	mov	r7, r3
 8018af2:	2209      	movs	r2, #9
 8018af4:	3308      	adds	r3, #8
 8018af6:	4606      	mov	r6, r0
 8018af8:	fb93 f3f2 	sdiv	r3, r3, r2
 8018afc:	2100      	movs	r1, #0
 8018afe:	2201      	movs	r2, #1
 8018b00:	429a      	cmp	r2, r3
 8018b02:	db20      	blt.n	8018b46 <__s2b+0x5e>
 8018b04:	4630      	mov	r0, r6
 8018b06:	f7ff ff69 	bl	80189dc <_Balloc>
 8018b0a:	9b08      	ldr	r3, [sp, #32]
 8018b0c:	6143      	str	r3, [r0, #20]
 8018b0e:	2d09      	cmp	r5, #9
 8018b10:	f04f 0301 	mov.w	r3, #1
 8018b14:	6103      	str	r3, [r0, #16]
 8018b16:	dd19      	ble.n	8018b4c <__s2b+0x64>
 8018b18:	f104 0809 	add.w	r8, r4, #9
 8018b1c:	46c1      	mov	r9, r8
 8018b1e:	442c      	add	r4, r5
 8018b20:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018b24:	4601      	mov	r1, r0
 8018b26:	3b30      	subs	r3, #48	; 0x30
 8018b28:	220a      	movs	r2, #10
 8018b2a:	4630      	mov	r0, r6
 8018b2c:	f7ff ffa1 	bl	8018a72 <__multadd>
 8018b30:	45a1      	cmp	r9, r4
 8018b32:	d1f5      	bne.n	8018b20 <__s2b+0x38>
 8018b34:	eb08 0405 	add.w	r4, r8, r5
 8018b38:	3c08      	subs	r4, #8
 8018b3a:	1b2d      	subs	r5, r5, r4
 8018b3c:	1963      	adds	r3, r4, r5
 8018b3e:	42bb      	cmp	r3, r7
 8018b40:	db07      	blt.n	8018b52 <__s2b+0x6a>
 8018b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b46:	0052      	lsls	r2, r2, #1
 8018b48:	3101      	adds	r1, #1
 8018b4a:	e7d9      	b.n	8018b00 <__s2b+0x18>
 8018b4c:	340a      	adds	r4, #10
 8018b4e:	2509      	movs	r5, #9
 8018b50:	e7f3      	b.n	8018b3a <__s2b+0x52>
 8018b52:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018b56:	4601      	mov	r1, r0
 8018b58:	3b30      	subs	r3, #48	; 0x30
 8018b5a:	220a      	movs	r2, #10
 8018b5c:	4630      	mov	r0, r6
 8018b5e:	f7ff ff88 	bl	8018a72 <__multadd>
 8018b62:	e7eb      	b.n	8018b3c <__s2b+0x54>

08018b64 <__hi0bits>:
 8018b64:	0c02      	lsrs	r2, r0, #16
 8018b66:	0412      	lsls	r2, r2, #16
 8018b68:	4603      	mov	r3, r0
 8018b6a:	b9b2      	cbnz	r2, 8018b9a <__hi0bits+0x36>
 8018b6c:	0403      	lsls	r3, r0, #16
 8018b6e:	2010      	movs	r0, #16
 8018b70:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018b74:	bf04      	itt	eq
 8018b76:	021b      	lsleq	r3, r3, #8
 8018b78:	3008      	addeq	r0, #8
 8018b7a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018b7e:	bf04      	itt	eq
 8018b80:	011b      	lsleq	r3, r3, #4
 8018b82:	3004      	addeq	r0, #4
 8018b84:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018b88:	bf04      	itt	eq
 8018b8a:	009b      	lsleq	r3, r3, #2
 8018b8c:	3002      	addeq	r0, #2
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	db06      	blt.n	8018ba0 <__hi0bits+0x3c>
 8018b92:	005b      	lsls	r3, r3, #1
 8018b94:	d503      	bpl.n	8018b9e <__hi0bits+0x3a>
 8018b96:	3001      	adds	r0, #1
 8018b98:	4770      	bx	lr
 8018b9a:	2000      	movs	r0, #0
 8018b9c:	e7e8      	b.n	8018b70 <__hi0bits+0xc>
 8018b9e:	2020      	movs	r0, #32
 8018ba0:	4770      	bx	lr

08018ba2 <__lo0bits>:
 8018ba2:	6803      	ldr	r3, [r0, #0]
 8018ba4:	f013 0207 	ands.w	r2, r3, #7
 8018ba8:	4601      	mov	r1, r0
 8018baa:	d00b      	beq.n	8018bc4 <__lo0bits+0x22>
 8018bac:	07da      	lsls	r2, r3, #31
 8018bae:	d423      	bmi.n	8018bf8 <__lo0bits+0x56>
 8018bb0:	0798      	lsls	r0, r3, #30
 8018bb2:	bf49      	itett	mi
 8018bb4:	085b      	lsrmi	r3, r3, #1
 8018bb6:	089b      	lsrpl	r3, r3, #2
 8018bb8:	2001      	movmi	r0, #1
 8018bba:	600b      	strmi	r3, [r1, #0]
 8018bbc:	bf5c      	itt	pl
 8018bbe:	600b      	strpl	r3, [r1, #0]
 8018bc0:	2002      	movpl	r0, #2
 8018bc2:	4770      	bx	lr
 8018bc4:	b298      	uxth	r0, r3
 8018bc6:	b9a8      	cbnz	r0, 8018bf4 <__lo0bits+0x52>
 8018bc8:	0c1b      	lsrs	r3, r3, #16
 8018bca:	2010      	movs	r0, #16
 8018bcc:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018bd0:	bf04      	itt	eq
 8018bd2:	0a1b      	lsreq	r3, r3, #8
 8018bd4:	3008      	addeq	r0, #8
 8018bd6:	071a      	lsls	r2, r3, #28
 8018bd8:	bf04      	itt	eq
 8018bda:	091b      	lsreq	r3, r3, #4
 8018bdc:	3004      	addeq	r0, #4
 8018bde:	079a      	lsls	r2, r3, #30
 8018be0:	bf04      	itt	eq
 8018be2:	089b      	lsreq	r3, r3, #2
 8018be4:	3002      	addeq	r0, #2
 8018be6:	07da      	lsls	r2, r3, #31
 8018be8:	d402      	bmi.n	8018bf0 <__lo0bits+0x4e>
 8018bea:	085b      	lsrs	r3, r3, #1
 8018bec:	d006      	beq.n	8018bfc <__lo0bits+0x5a>
 8018bee:	3001      	adds	r0, #1
 8018bf0:	600b      	str	r3, [r1, #0]
 8018bf2:	4770      	bx	lr
 8018bf4:	4610      	mov	r0, r2
 8018bf6:	e7e9      	b.n	8018bcc <__lo0bits+0x2a>
 8018bf8:	2000      	movs	r0, #0
 8018bfa:	4770      	bx	lr
 8018bfc:	2020      	movs	r0, #32
 8018bfe:	4770      	bx	lr

08018c00 <__i2b>:
 8018c00:	b510      	push	{r4, lr}
 8018c02:	460c      	mov	r4, r1
 8018c04:	2101      	movs	r1, #1
 8018c06:	f7ff fee9 	bl	80189dc <_Balloc>
 8018c0a:	2201      	movs	r2, #1
 8018c0c:	6144      	str	r4, [r0, #20]
 8018c0e:	6102      	str	r2, [r0, #16]
 8018c10:	bd10      	pop	{r4, pc}

08018c12 <__multiply>:
 8018c12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c16:	4614      	mov	r4, r2
 8018c18:	690a      	ldr	r2, [r1, #16]
 8018c1a:	6923      	ldr	r3, [r4, #16]
 8018c1c:	429a      	cmp	r2, r3
 8018c1e:	bfb8      	it	lt
 8018c20:	460b      	movlt	r3, r1
 8018c22:	4688      	mov	r8, r1
 8018c24:	bfbc      	itt	lt
 8018c26:	46a0      	movlt	r8, r4
 8018c28:	461c      	movlt	r4, r3
 8018c2a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018c2e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018c32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018c36:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018c3a:	eb07 0609 	add.w	r6, r7, r9
 8018c3e:	42b3      	cmp	r3, r6
 8018c40:	bfb8      	it	lt
 8018c42:	3101      	addlt	r1, #1
 8018c44:	f7ff feca 	bl	80189dc <_Balloc>
 8018c48:	f100 0514 	add.w	r5, r0, #20
 8018c4c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018c50:	462b      	mov	r3, r5
 8018c52:	2200      	movs	r2, #0
 8018c54:	4573      	cmp	r3, lr
 8018c56:	d316      	bcc.n	8018c86 <__multiply+0x74>
 8018c58:	f104 0214 	add.w	r2, r4, #20
 8018c5c:	f108 0114 	add.w	r1, r8, #20
 8018c60:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018c64:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018c68:	9300      	str	r3, [sp, #0]
 8018c6a:	9b00      	ldr	r3, [sp, #0]
 8018c6c:	9201      	str	r2, [sp, #4]
 8018c6e:	4293      	cmp	r3, r2
 8018c70:	d80c      	bhi.n	8018c8c <__multiply+0x7a>
 8018c72:	2e00      	cmp	r6, #0
 8018c74:	dd03      	ble.n	8018c7e <__multiply+0x6c>
 8018c76:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d05d      	beq.n	8018d3a <__multiply+0x128>
 8018c7e:	6106      	str	r6, [r0, #16]
 8018c80:	b003      	add	sp, #12
 8018c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c86:	f843 2b04 	str.w	r2, [r3], #4
 8018c8a:	e7e3      	b.n	8018c54 <__multiply+0x42>
 8018c8c:	f8b2 b000 	ldrh.w	fp, [r2]
 8018c90:	f1bb 0f00 	cmp.w	fp, #0
 8018c94:	d023      	beq.n	8018cde <__multiply+0xcc>
 8018c96:	4689      	mov	r9, r1
 8018c98:	46ac      	mov	ip, r5
 8018c9a:	f04f 0800 	mov.w	r8, #0
 8018c9e:	f859 4b04 	ldr.w	r4, [r9], #4
 8018ca2:	f8dc a000 	ldr.w	sl, [ip]
 8018ca6:	b2a3      	uxth	r3, r4
 8018ca8:	fa1f fa8a 	uxth.w	sl, sl
 8018cac:	fb0b a303 	mla	r3, fp, r3, sl
 8018cb0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018cb4:	f8dc 4000 	ldr.w	r4, [ip]
 8018cb8:	4443      	add	r3, r8
 8018cba:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018cbe:	fb0b 840a 	mla	r4, fp, sl, r8
 8018cc2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018cc6:	46e2      	mov	sl, ip
 8018cc8:	b29b      	uxth	r3, r3
 8018cca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018cce:	454f      	cmp	r7, r9
 8018cd0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018cd4:	f84a 3b04 	str.w	r3, [sl], #4
 8018cd8:	d82b      	bhi.n	8018d32 <__multiply+0x120>
 8018cda:	f8cc 8004 	str.w	r8, [ip, #4]
 8018cde:	9b01      	ldr	r3, [sp, #4]
 8018ce0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018ce4:	3204      	adds	r2, #4
 8018ce6:	f1ba 0f00 	cmp.w	sl, #0
 8018cea:	d020      	beq.n	8018d2e <__multiply+0x11c>
 8018cec:	682b      	ldr	r3, [r5, #0]
 8018cee:	4689      	mov	r9, r1
 8018cf0:	46a8      	mov	r8, r5
 8018cf2:	f04f 0b00 	mov.w	fp, #0
 8018cf6:	f8b9 c000 	ldrh.w	ip, [r9]
 8018cfa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018cfe:	fb0a 440c 	mla	r4, sl, ip, r4
 8018d02:	445c      	add	r4, fp
 8018d04:	46c4      	mov	ip, r8
 8018d06:	b29b      	uxth	r3, r3
 8018d08:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018d0c:	f84c 3b04 	str.w	r3, [ip], #4
 8018d10:	f859 3b04 	ldr.w	r3, [r9], #4
 8018d14:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018d18:	0c1b      	lsrs	r3, r3, #16
 8018d1a:	fb0a b303 	mla	r3, sl, r3, fp
 8018d1e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018d22:	454f      	cmp	r7, r9
 8018d24:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018d28:	d805      	bhi.n	8018d36 <__multiply+0x124>
 8018d2a:	f8c8 3004 	str.w	r3, [r8, #4]
 8018d2e:	3504      	adds	r5, #4
 8018d30:	e79b      	b.n	8018c6a <__multiply+0x58>
 8018d32:	46d4      	mov	ip, sl
 8018d34:	e7b3      	b.n	8018c9e <__multiply+0x8c>
 8018d36:	46e0      	mov	r8, ip
 8018d38:	e7dd      	b.n	8018cf6 <__multiply+0xe4>
 8018d3a:	3e01      	subs	r6, #1
 8018d3c:	e799      	b.n	8018c72 <__multiply+0x60>
	...

08018d40 <__pow5mult>:
 8018d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018d44:	4615      	mov	r5, r2
 8018d46:	f012 0203 	ands.w	r2, r2, #3
 8018d4a:	4606      	mov	r6, r0
 8018d4c:	460f      	mov	r7, r1
 8018d4e:	d007      	beq.n	8018d60 <__pow5mult+0x20>
 8018d50:	3a01      	subs	r2, #1
 8018d52:	4c21      	ldr	r4, [pc, #132]	; (8018dd8 <__pow5mult+0x98>)
 8018d54:	2300      	movs	r3, #0
 8018d56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018d5a:	f7ff fe8a 	bl	8018a72 <__multadd>
 8018d5e:	4607      	mov	r7, r0
 8018d60:	10ad      	asrs	r5, r5, #2
 8018d62:	d035      	beq.n	8018dd0 <__pow5mult+0x90>
 8018d64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018d66:	b93c      	cbnz	r4, 8018d78 <__pow5mult+0x38>
 8018d68:	2010      	movs	r0, #16
 8018d6a:	f7fc fe67 	bl	8015a3c <malloc>
 8018d6e:	6270      	str	r0, [r6, #36]	; 0x24
 8018d70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018d74:	6004      	str	r4, [r0, #0]
 8018d76:	60c4      	str	r4, [r0, #12]
 8018d78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018d7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018d80:	b94c      	cbnz	r4, 8018d96 <__pow5mult+0x56>
 8018d82:	f240 2171 	movw	r1, #625	; 0x271
 8018d86:	4630      	mov	r0, r6
 8018d88:	f7ff ff3a 	bl	8018c00 <__i2b>
 8018d8c:	2300      	movs	r3, #0
 8018d8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8018d92:	4604      	mov	r4, r0
 8018d94:	6003      	str	r3, [r0, #0]
 8018d96:	f04f 0800 	mov.w	r8, #0
 8018d9a:	07eb      	lsls	r3, r5, #31
 8018d9c:	d50a      	bpl.n	8018db4 <__pow5mult+0x74>
 8018d9e:	4639      	mov	r1, r7
 8018da0:	4622      	mov	r2, r4
 8018da2:	4630      	mov	r0, r6
 8018da4:	f7ff ff35 	bl	8018c12 <__multiply>
 8018da8:	4639      	mov	r1, r7
 8018daa:	4681      	mov	r9, r0
 8018dac:	4630      	mov	r0, r6
 8018dae:	f7ff fe49 	bl	8018a44 <_Bfree>
 8018db2:	464f      	mov	r7, r9
 8018db4:	106d      	asrs	r5, r5, #1
 8018db6:	d00b      	beq.n	8018dd0 <__pow5mult+0x90>
 8018db8:	6820      	ldr	r0, [r4, #0]
 8018dba:	b938      	cbnz	r0, 8018dcc <__pow5mult+0x8c>
 8018dbc:	4622      	mov	r2, r4
 8018dbe:	4621      	mov	r1, r4
 8018dc0:	4630      	mov	r0, r6
 8018dc2:	f7ff ff26 	bl	8018c12 <__multiply>
 8018dc6:	6020      	str	r0, [r4, #0]
 8018dc8:	f8c0 8000 	str.w	r8, [r0]
 8018dcc:	4604      	mov	r4, r0
 8018dce:	e7e4      	b.n	8018d9a <__pow5mult+0x5a>
 8018dd0:	4638      	mov	r0, r7
 8018dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018dd6:	bf00      	nop
 8018dd8:	0801b3b0 	.word	0x0801b3b0

08018ddc <__lshift>:
 8018ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018de0:	460c      	mov	r4, r1
 8018de2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018de6:	6923      	ldr	r3, [r4, #16]
 8018de8:	6849      	ldr	r1, [r1, #4]
 8018dea:	eb0a 0903 	add.w	r9, sl, r3
 8018dee:	68a3      	ldr	r3, [r4, #8]
 8018df0:	4607      	mov	r7, r0
 8018df2:	4616      	mov	r6, r2
 8018df4:	f109 0501 	add.w	r5, r9, #1
 8018df8:	42ab      	cmp	r3, r5
 8018dfa:	db32      	blt.n	8018e62 <__lshift+0x86>
 8018dfc:	4638      	mov	r0, r7
 8018dfe:	f7ff fded 	bl	80189dc <_Balloc>
 8018e02:	2300      	movs	r3, #0
 8018e04:	4680      	mov	r8, r0
 8018e06:	f100 0114 	add.w	r1, r0, #20
 8018e0a:	461a      	mov	r2, r3
 8018e0c:	4553      	cmp	r3, sl
 8018e0e:	db2b      	blt.n	8018e68 <__lshift+0x8c>
 8018e10:	6920      	ldr	r0, [r4, #16]
 8018e12:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018e16:	f104 0314 	add.w	r3, r4, #20
 8018e1a:	f016 021f 	ands.w	r2, r6, #31
 8018e1e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018e22:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018e26:	d025      	beq.n	8018e74 <__lshift+0x98>
 8018e28:	f1c2 0e20 	rsb	lr, r2, #32
 8018e2c:	2000      	movs	r0, #0
 8018e2e:	681e      	ldr	r6, [r3, #0]
 8018e30:	468a      	mov	sl, r1
 8018e32:	4096      	lsls	r6, r2
 8018e34:	4330      	orrs	r0, r6
 8018e36:	f84a 0b04 	str.w	r0, [sl], #4
 8018e3a:	f853 0b04 	ldr.w	r0, [r3], #4
 8018e3e:	459c      	cmp	ip, r3
 8018e40:	fa20 f00e 	lsr.w	r0, r0, lr
 8018e44:	d814      	bhi.n	8018e70 <__lshift+0x94>
 8018e46:	6048      	str	r0, [r1, #4]
 8018e48:	b108      	cbz	r0, 8018e4e <__lshift+0x72>
 8018e4a:	f109 0502 	add.w	r5, r9, #2
 8018e4e:	3d01      	subs	r5, #1
 8018e50:	4638      	mov	r0, r7
 8018e52:	f8c8 5010 	str.w	r5, [r8, #16]
 8018e56:	4621      	mov	r1, r4
 8018e58:	f7ff fdf4 	bl	8018a44 <_Bfree>
 8018e5c:	4640      	mov	r0, r8
 8018e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e62:	3101      	adds	r1, #1
 8018e64:	005b      	lsls	r3, r3, #1
 8018e66:	e7c7      	b.n	8018df8 <__lshift+0x1c>
 8018e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018e6c:	3301      	adds	r3, #1
 8018e6e:	e7cd      	b.n	8018e0c <__lshift+0x30>
 8018e70:	4651      	mov	r1, sl
 8018e72:	e7dc      	b.n	8018e2e <__lshift+0x52>
 8018e74:	3904      	subs	r1, #4
 8018e76:	f853 2b04 	ldr.w	r2, [r3], #4
 8018e7a:	f841 2f04 	str.w	r2, [r1, #4]!
 8018e7e:	459c      	cmp	ip, r3
 8018e80:	d8f9      	bhi.n	8018e76 <__lshift+0x9a>
 8018e82:	e7e4      	b.n	8018e4e <__lshift+0x72>

08018e84 <__mcmp>:
 8018e84:	6903      	ldr	r3, [r0, #16]
 8018e86:	690a      	ldr	r2, [r1, #16]
 8018e88:	1a9b      	subs	r3, r3, r2
 8018e8a:	b530      	push	{r4, r5, lr}
 8018e8c:	d10c      	bne.n	8018ea8 <__mcmp+0x24>
 8018e8e:	0092      	lsls	r2, r2, #2
 8018e90:	3014      	adds	r0, #20
 8018e92:	3114      	adds	r1, #20
 8018e94:	1884      	adds	r4, r0, r2
 8018e96:	4411      	add	r1, r2
 8018e98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018e9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018ea0:	4295      	cmp	r5, r2
 8018ea2:	d003      	beq.n	8018eac <__mcmp+0x28>
 8018ea4:	d305      	bcc.n	8018eb2 <__mcmp+0x2e>
 8018ea6:	2301      	movs	r3, #1
 8018ea8:	4618      	mov	r0, r3
 8018eaa:	bd30      	pop	{r4, r5, pc}
 8018eac:	42a0      	cmp	r0, r4
 8018eae:	d3f3      	bcc.n	8018e98 <__mcmp+0x14>
 8018eb0:	e7fa      	b.n	8018ea8 <__mcmp+0x24>
 8018eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8018eb6:	e7f7      	b.n	8018ea8 <__mcmp+0x24>

08018eb8 <__mdiff>:
 8018eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ebc:	460d      	mov	r5, r1
 8018ebe:	4607      	mov	r7, r0
 8018ec0:	4611      	mov	r1, r2
 8018ec2:	4628      	mov	r0, r5
 8018ec4:	4614      	mov	r4, r2
 8018ec6:	f7ff ffdd 	bl	8018e84 <__mcmp>
 8018eca:	1e06      	subs	r6, r0, #0
 8018ecc:	d108      	bne.n	8018ee0 <__mdiff+0x28>
 8018ece:	4631      	mov	r1, r6
 8018ed0:	4638      	mov	r0, r7
 8018ed2:	f7ff fd83 	bl	80189dc <_Balloc>
 8018ed6:	2301      	movs	r3, #1
 8018ed8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ee0:	bfa4      	itt	ge
 8018ee2:	4623      	movge	r3, r4
 8018ee4:	462c      	movge	r4, r5
 8018ee6:	4638      	mov	r0, r7
 8018ee8:	6861      	ldr	r1, [r4, #4]
 8018eea:	bfa6      	itte	ge
 8018eec:	461d      	movge	r5, r3
 8018eee:	2600      	movge	r6, #0
 8018ef0:	2601      	movlt	r6, #1
 8018ef2:	f7ff fd73 	bl	80189dc <_Balloc>
 8018ef6:	692b      	ldr	r3, [r5, #16]
 8018ef8:	60c6      	str	r6, [r0, #12]
 8018efa:	6926      	ldr	r6, [r4, #16]
 8018efc:	f105 0914 	add.w	r9, r5, #20
 8018f00:	f104 0214 	add.w	r2, r4, #20
 8018f04:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018f08:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018f0c:	f100 0514 	add.w	r5, r0, #20
 8018f10:	f04f 0e00 	mov.w	lr, #0
 8018f14:	f852 ab04 	ldr.w	sl, [r2], #4
 8018f18:	f859 4b04 	ldr.w	r4, [r9], #4
 8018f1c:	fa1e f18a 	uxtah	r1, lr, sl
 8018f20:	b2a3      	uxth	r3, r4
 8018f22:	1ac9      	subs	r1, r1, r3
 8018f24:	0c23      	lsrs	r3, r4, #16
 8018f26:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018f2a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018f2e:	b289      	uxth	r1, r1
 8018f30:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018f34:	45c8      	cmp	r8, r9
 8018f36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018f3a:	4694      	mov	ip, r2
 8018f3c:	f845 3b04 	str.w	r3, [r5], #4
 8018f40:	d8e8      	bhi.n	8018f14 <__mdiff+0x5c>
 8018f42:	45bc      	cmp	ip, r7
 8018f44:	d304      	bcc.n	8018f50 <__mdiff+0x98>
 8018f46:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018f4a:	b183      	cbz	r3, 8018f6e <__mdiff+0xb6>
 8018f4c:	6106      	str	r6, [r0, #16]
 8018f4e:	e7c5      	b.n	8018edc <__mdiff+0x24>
 8018f50:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018f54:	fa1e f381 	uxtah	r3, lr, r1
 8018f58:	141a      	asrs	r2, r3, #16
 8018f5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018f5e:	b29b      	uxth	r3, r3
 8018f60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018f64:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018f68:	f845 3b04 	str.w	r3, [r5], #4
 8018f6c:	e7e9      	b.n	8018f42 <__mdiff+0x8a>
 8018f6e:	3e01      	subs	r6, #1
 8018f70:	e7e9      	b.n	8018f46 <__mdiff+0x8e>
	...

08018f74 <__ulp>:
 8018f74:	4b12      	ldr	r3, [pc, #72]	; (8018fc0 <__ulp+0x4c>)
 8018f76:	ee10 2a90 	vmov	r2, s1
 8018f7a:	401a      	ands	r2, r3
 8018f7c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	dd04      	ble.n	8018f8e <__ulp+0x1a>
 8018f84:	2000      	movs	r0, #0
 8018f86:	4619      	mov	r1, r3
 8018f88:	ec41 0b10 	vmov	d0, r0, r1
 8018f8c:	4770      	bx	lr
 8018f8e:	425b      	negs	r3, r3
 8018f90:	151b      	asrs	r3, r3, #20
 8018f92:	2b13      	cmp	r3, #19
 8018f94:	f04f 0000 	mov.w	r0, #0
 8018f98:	f04f 0100 	mov.w	r1, #0
 8018f9c:	dc04      	bgt.n	8018fa8 <__ulp+0x34>
 8018f9e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018fa2:	fa42 f103 	asr.w	r1, r2, r3
 8018fa6:	e7ef      	b.n	8018f88 <__ulp+0x14>
 8018fa8:	3b14      	subs	r3, #20
 8018faa:	2b1e      	cmp	r3, #30
 8018fac:	f04f 0201 	mov.w	r2, #1
 8018fb0:	bfda      	itte	le
 8018fb2:	f1c3 031f 	rsble	r3, r3, #31
 8018fb6:	fa02 f303 	lslle.w	r3, r2, r3
 8018fba:	4613      	movgt	r3, r2
 8018fbc:	4618      	mov	r0, r3
 8018fbe:	e7e3      	b.n	8018f88 <__ulp+0x14>
 8018fc0:	7ff00000 	.word	0x7ff00000

08018fc4 <__b2d>:
 8018fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fc6:	6905      	ldr	r5, [r0, #16]
 8018fc8:	f100 0714 	add.w	r7, r0, #20
 8018fcc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018fd0:	1f2e      	subs	r6, r5, #4
 8018fd2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018fd6:	4620      	mov	r0, r4
 8018fd8:	f7ff fdc4 	bl	8018b64 <__hi0bits>
 8018fdc:	f1c0 0320 	rsb	r3, r0, #32
 8018fe0:	280a      	cmp	r0, #10
 8018fe2:	600b      	str	r3, [r1, #0]
 8018fe4:	f8df c074 	ldr.w	ip, [pc, #116]	; 801905c <__b2d+0x98>
 8018fe8:	dc14      	bgt.n	8019014 <__b2d+0x50>
 8018fea:	f1c0 0e0b 	rsb	lr, r0, #11
 8018fee:	fa24 f10e 	lsr.w	r1, r4, lr
 8018ff2:	42b7      	cmp	r7, r6
 8018ff4:	ea41 030c 	orr.w	r3, r1, ip
 8018ff8:	bf34      	ite	cc
 8018ffa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018ffe:	2100      	movcs	r1, #0
 8019000:	3015      	adds	r0, #21
 8019002:	fa04 f000 	lsl.w	r0, r4, r0
 8019006:	fa21 f10e 	lsr.w	r1, r1, lr
 801900a:	ea40 0201 	orr.w	r2, r0, r1
 801900e:	ec43 2b10 	vmov	d0, r2, r3
 8019012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019014:	42b7      	cmp	r7, r6
 8019016:	bf3a      	itte	cc
 8019018:	f1a5 0608 	subcc.w	r6, r5, #8
 801901c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019020:	2100      	movcs	r1, #0
 8019022:	380b      	subs	r0, #11
 8019024:	d015      	beq.n	8019052 <__b2d+0x8e>
 8019026:	4084      	lsls	r4, r0
 8019028:	f1c0 0520 	rsb	r5, r0, #32
 801902c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8019030:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8019034:	42be      	cmp	r6, r7
 8019036:	fa21 fc05 	lsr.w	ip, r1, r5
 801903a:	ea44 030c 	orr.w	r3, r4, ip
 801903e:	bf8c      	ite	hi
 8019040:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019044:	2400      	movls	r4, #0
 8019046:	fa01 f000 	lsl.w	r0, r1, r0
 801904a:	40ec      	lsrs	r4, r5
 801904c:	ea40 0204 	orr.w	r2, r0, r4
 8019050:	e7dd      	b.n	801900e <__b2d+0x4a>
 8019052:	ea44 030c 	orr.w	r3, r4, ip
 8019056:	460a      	mov	r2, r1
 8019058:	e7d9      	b.n	801900e <__b2d+0x4a>
 801905a:	bf00      	nop
 801905c:	3ff00000 	.word	0x3ff00000

08019060 <__d2b>:
 8019060:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019064:	460e      	mov	r6, r1
 8019066:	2101      	movs	r1, #1
 8019068:	ec59 8b10 	vmov	r8, r9, d0
 801906c:	4615      	mov	r5, r2
 801906e:	f7ff fcb5 	bl	80189dc <_Balloc>
 8019072:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8019076:	4607      	mov	r7, r0
 8019078:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801907c:	bb34      	cbnz	r4, 80190cc <__d2b+0x6c>
 801907e:	9301      	str	r3, [sp, #4]
 8019080:	f1b8 0300 	subs.w	r3, r8, #0
 8019084:	d027      	beq.n	80190d6 <__d2b+0x76>
 8019086:	a802      	add	r0, sp, #8
 8019088:	f840 3d08 	str.w	r3, [r0, #-8]!
 801908c:	f7ff fd89 	bl	8018ba2 <__lo0bits>
 8019090:	9900      	ldr	r1, [sp, #0]
 8019092:	b1f0      	cbz	r0, 80190d2 <__d2b+0x72>
 8019094:	9a01      	ldr	r2, [sp, #4]
 8019096:	f1c0 0320 	rsb	r3, r0, #32
 801909a:	fa02 f303 	lsl.w	r3, r2, r3
 801909e:	430b      	orrs	r3, r1
 80190a0:	40c2      	lsrs	r2, r0
 80190a2:	617b      	str	r3, [r7, #20]
 80190a4:	9201      	str	r2, [sp, #4]
 80190a6:	9b01      	ldr	r3, [sp, #4]
 80190a8:	61bb      	str	r3, [r7, #24]
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	bf14      	ite	ne
 80190ae:	2102      	movne	r1, #2
 80190b0:	2101      	moveq	r1, #1
 80190b2:	6139      	str	r1, [r7, #16]
 80190b4:	b1c4      	cbz	r4, 80190e8 <__d2b+0x88>
 80190b6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80190ba:	4404      	add	r4, r0
 80190bc:	6034      	str	r4, [r6, #0]
 80190be:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80190c2:	6028      	str	r0, [r5, #0]
 80190c4:	4638      	mov	r0, r7
 80190c6:	b003      	add	sp, #12
 80190c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80190cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80190d0:	e7d5      	b.n	801907e <__d2b+0x1e>
 80190d2:	6179      	str	r1, [r7, #20]
 80190d4:	e7e7      	b.n	80190a6 <__d2b+0x46>
 80190d6:	a801      	add	r0, sp, #4
 80190d8:	f7ff fd63 	bl	8018ba2 <__lo0bits>
 80190dc:	9b01      	ldr	r3, [sp, #4]
 80190de:	617b      	str	r3, [r7, #20]
 80190e0:	2101      	movs	r1, #1
 80190e2:	6139      	str	r1, [r7, #16]
 80190e4:	3020      	adds	r0, #32
 80190e6:	e7e5      	b.n	80190b4 <__d2b+0x54>
 80190e8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80190ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80190f0:	6030      	str	r0, [r6, #0]
 80190f2:	6918      	ldr	r0, [r3, #16]
 80190f4:	f7ff fd36 	bl	8018b64 <__hi0bits>
 80190f8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80190fc:	e7e1      	b.n	80190c2 <__d2b+0x62>

080190fe <__ratio>:
 80190fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019102:	4688      	mov	r8, r1
 8019104:	4669      	mov	r1, sp
 8019106:	4681      	mov	r9, r0
 8019108:	f7ff ff5c 	bl	8018fc4 <__b2d>
 801910c:	a901      	add	r1, sp, #4
 801910e:	4640      	mov	r0, r8
 8019110:	ec57 6b10 	vmov	r6, r7, d0
 8019114:	f7ff ff56 	bl	8018fc4 <__b2d>
 8019118:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801911c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019120:	eba3 0c02 	sub.w	ip, r3, r2
 8019124:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019128:	1a9b      	subs	r3, r3, r2
 801912a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801912e:	ec5b ab10 	vmov	sl, fp, d0
 8019132:	2b00      	cmp	r3, #0
 8019134:	bfce      	itee	gt
 8019136:	463a      	movgt	r2, r7
 8019138:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801913c:	465a      	movle	r2, fp
 801913e:	4659      	mov	r1, fp
 8019140:	463d      	mov	r5, r7
 8019142:	bfd4      	ite	le
 8019144:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8019148:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801914c:	4630      	mov	r0, r6
 801914e:	ee10 2a10 	vmov	r2, s0
 8019152:	460b      	mov	r3, r1
 8019154:	4629      	mov	r1, r5
 8019156:	f7e7 fb79 	bl	800084c <__aeabi_ddiv>
 801915a:	ec41 0b10 	vmov	d0, r0, r1
 801915e:	b003      	add	sp, #12
 8019160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019164 <__copybits>:
 8019164:	3901      	subs	r1, #1
 8019166:	b510      	push	{r4, lr}
 8019168:	1149      	asrs	r1, r1, #5
 801916a:	6914      	ldr	r4, [r2, #16]
 801916c:	3101      	adds	r1, #1
 801916e:	f102 0314 	add.w	r3, r2, #20
 8019172:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019176:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801917a:	42a3      	cmp	r3, r4
 801917c:	4602      	mov	r2, r0
 801917e:	d303      	bcc.n	8019188 <__copybits+0x24>
 8019180:	2300      	movs	r3, #0
 8019182:	428a      	cmp	r2, r1
 8019184:	d305      	bcc.n	8019192 <__copybits+0x2e>
 8019186:	bd10      	pop	{r4, pc}
 8019188:	f853 2b04 	ldr.w	r2, [r3], #4
 801918c:	f840 2b04 	str.w	r2, [r0], #4
 8019190:	e7f3      	b.n	801917a <__copybits+0x16>
 8019192:	f842 3b04 	str.w	r3, [r2], #4
 8019196:	e7f4      	b.n	8019182 <__copybits+0x1e>

08019198 <__any_on>:
 8019198:	f100 0214 	add.w	r2, r0, #20
 801919c:	6900      	ldr	r0, [r0, #16]
 801919e:	114b      	asrs	r3, r1, #5
 80191a0:	4298      	cmp	r0, r3
 80191a2:	b510      	push	{r4, lr}
 80191a4:	db11      	blt.n	80191ca <__any_on+0x32>
 80191a6:	dd0a      	ble.n	80191be <__any_on+0x26>
 80191a8:	f011 011f 	ands.w	r1, r1, #31
 80191ac:	d007      	beq.n	80191be <__any_on+0x26>
 80191ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80191b2:	fa24 f001 	lsr.w	r0, r4, r1
 80191b6:	fa00 f101 	lsl.w	r1, r0, r1
 80191ba:	428c      	cmp	r4, r1
 80191bc:	d10b      	bne.n	80191d6 <__any_on+0x3e>
 80191be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80191c2:	4293      	cmp	r3, r2
 80191c4:	d803      	bhi.n	80191ce <__any_on+0x36>
 80191c6:	2000      	movs	r0, #0
 80191c8:	bd10      	pop	{r4, pc}
 80191ca:	4603      	mov	r3, r0
 80191cc:	e7f7      	b.n	80191be <__any_on+0x26>
 80191ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80191d2:	2900      	cmp	r1, #0
 80191d4:	d0f5      	beq.n	80191c2 <__any_on+0x2a>
 80191d6:	2001      	movs	r0, #1
 80191d8:	e7f6      	b.n	80191c8 <__any_on+0x30>

080191da <_calloc_r>:
 80191da:	b538      	push	{r3, r4, r5, lr}
 80191dc:	fb02 f401 	mul.w	r4, r2, r1
 80191e0:	4621      	mov	r1, r4
 80191e2:	f7fc fcb5 	bl	8015b50 <_malloc_r>
 80191e6:	4605      	mov	r5, r0
 80191e8:	b118      	cbz	r0, 80191f2 <_calloc_r+0x18>
 80191ea:	4622      	mov	r2, r4
 80191ec:	2100      	movs	r1, #0
 80191ee:	f7fc fc59 	bl	8015aa4 <memset>
 80191f2:	4628      	mov	r0, r5
 80191f4:	bd38      	pop	{r3, r4, r5, pc}

080191f6 <__ssputs_r>:
 80191f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80191fa:	688e      	ldr	r6, [r1, #8]
 80191fc:	429e      	cmp	r6, r3
 80191fe:	4682      	mov	sl, r0
 8019200:	460c      	mov	r4, r1
 8019202:	4690      	mov	r8, r2
 8019204:	4699      	mov	r9, r3
 8019206:	d837      	bhi.n	8019278 <__ssputs_r+0x82>
 8019208:	898a      	ldrh	r2, [r1, #12]
 801920a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801920e:	d031      	beq.n	8019274 <__ssputs_r+0x7e>
 8019210:	6825      	ldr	r5, [r4, #0]
 8019212:	6909      	ldr	r1, [r1, #16]
 8019214:	1a6f      	subs	r7, r5, r1
 8019216:	6965      	ldr	r5, [r4, #20]
 8019218:	2302      	movs	r3, #2
 801921a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801921e:	fb95 f5f3 	sdiv	r5, r5, r3
 8019222:	f109 0301 	add.w	r3, r9, #1
 8019226:	443b      	add	r3, r7
 8019228:	429d      	cmp	r5, r3
 801922a:	bf38      	it	cc
 801922c:	461d      	movcc	r5, r3
 801922e:	0553      	lsls	r3, r2, #21
 8019230:	d530      	bpl.n	8019294 <__ssputs_r+0x9e>
 8019232:	4629      	mov	r1, r5
 8019234:	f7fc fc8c 	bl	8015b50 <_malloc_r>
 8019238:	4606      	mov	r6, r0
 801923a:	b950      	cbnz	r0, 8019252 <__ssputs_r+0x5c>
 801923c:	230c      	movs	r3, #12
 801923e:	f8ca 3000 	str.w	r3, [sl]
 8019242:	89a3      	ldrh	r3, [r4, #12]
 8019244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019248:	81a3      	strh	r3, [r4, #12]
 801924a:	f04f 30ff 	mov.w	r0, #4294967295
 801924e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019252:	463a      	mov	r2, r7
 8019254:	6921      	ldr	r1, [r4, #16]
 8019256:	f7fc fc01 	bl	8015a5c <memcpy>
 801925a:	89a3      	ldrh	r3, [r4, #12]
 801925c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019264:	81a3      	strh	r3, [r4, #12]
 8019266:	6126      	str	r6, [r4, #16]
 8019268:	6165      	str	r5, [r4, #20]
 801926a:	443e      	add	r6, r7
 801926c:	1bed      	subs	r5, r5, r7
 801926e:	6026      	str	r6, [r4, #0]
 8019270:	60a5      	str	r5, [r4, #8]
 8019272:	464e      	mov	r6, r9
 8019274:	454e      	cmp	r6, r9
 8019276:	d900      	bls.n	801927a <__ssputs_r+0x84>
 8019278:	464e      	mov	r6, r9
 801927a:	4632      	mov	r2, r6
 801927c:	4641      	mov	r1, r8
 801927e:	6820      	ldr	r0, [r4, #0]
 8019280:	f7fc fbf7 	bl	8015a72 <memmove>
 8019284:	68a3      	ldr	r3, [r4, #8]
 8019286:	1b9b      	subs	r3, r3, r6
 8019288:	60a3      	str	r3, [r4, #8]
 801928a:	6823      	ldr	r3, [r4, #0]
 801928c:	441e      	add	r6, r3
 801928e:	6026      	str	r6, [r4, #0]
 8019290:	2000      	movs	r0, #0
 8019292:	e7dc      	b.n	801924e <__ssputs_r+0x58>
 8019294:	462a      	mov	r2, r5
 8019296:	f000 f920 	bl	80194da <_realloc_r>
 801929a:	4606      	mov	r6, r0
 801929c:	2800      	cmp	r0, #0
 801929e:	d1e2      	bne.n	8019266 <__ssputs_r+0x70>
 80192a0:	6921      	ldr	r1, [r4, #16]
 80192a2:	4650      	mov	r0, sl
 80192a4:	f7fc fc06 	bl	8015ab4 <_free_r>
 80192a8:	e7c8      	b.n	801923c <__ssputs_r+0x46>
	...

080192ac <_svfiprintf_r>:
 80192ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192b0:	461d      	mov	r5, r3
 80192b2:	898b      	ldrh	r3, [r1, #12]
 80192b4:	061f      	lsls	r7, r3, #24
 80192b6:	b09d      	sub	sp, #116	; 0x74
 80192b8:	4680      	mov	r8, r0
 80192ba:	460c      	mov	r4, r1
 80192bc:	4616      	mov	r6, r2
 80192be:	d50f      	bpl.n	80192e0 <_svfiprintf_r+0x34>
 80192c0:	690b      	ldr	r3, [r1, #16]
 80192c2:	b96b      	cbnz	r3, 80192e0 <_svfiprintf_r+0x34>
 80192c4:	2140      	movs	r1, #64	; 0x40
 80192c6:	f7fc fc43 	bl	8015b50 <_malloc_r>
 80192ca:	6020      	str	r0, [r4, #0]
 80192cc:	6120      	str	r0, [r4, #16]
 80192ce:	b928      	cbnz	r0, 80192dc <_svfiprintf_r+0x30>
 80192d0:	230c      	movs	r3, #12
 80192d2:	f8c8 3000 	str.w	r3, [r8]
 80192d6:	f04f 30ff 	mov.w	r0, #4294967295
 80192da:	e0c8      	b.n	801946e <_svfiprintf_r+0x1c2>
 80192dc:	2340      	movs	r3, #64	; 0x40
 80192de:	6163      	str	r3, [r4, #20]
 80192e0:	2300      	movs	r3, #0
 80192e2:	9309      	str	r3, [sp, #36]	; 0x24
 80192e4:	2320      	movs	r3, #32
 80192e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80192ea:	2330      	movs	r3, #48	; 0x30
 80192ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80192f0:	9503      	str	r5, [sp, #12]
 80192f2:	f04f 0b01 	mov.w	fp, #1
 80192f6:	4637      	mov	r7, r6
 80192f8:	463d      	mov	r5, r7
 80192fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80192fe:	b10b      	cbz	r3, 8019304 <_svfiprintf_r+0x58>
 8019300:	2b25      	cmp	r3, #37	; 0x25
 8019302:	d13e      	bne.n	8019382 <_svfiprintf_r+0xd6>
 8019304:	ebb7 0a06 	subs.w	sl, r7, r6
 8019308:	d00b      	beq.n	8019322 <_svfiprintf_r+0x76>
 801930a:	4653      	mov	r3, sl
 801930c:	4632      	mov	r2, r6
 801930e:	4621      	mov	r1, r4
 8019310:	4640      	mov	r0, r8
 8019312:	f7ff ff70 	bl	80191f6 <__ssputs_r>
 8019316:	3001      	adds	r0, #1
 8019318:	f000 80a4 	beq.w	8019464 <_svfiprintf_r+0x1b8>
 801931c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801931e:	4453      	add	r3, sl
 8019320:	9309      	str	r3, [sp, #36]	; 0x24
 8019322:	783b      	ldrb	r3, [r7, #0]
 8019324:	2b00      	cmp	r3, #0
 8019326:	f000 809d 	beq.w	8019464 <_svfiprintf_r+0x1b8>
 801932a:	2300      	movs	r3, #0
 801932c:	f04f 32ff 	mov.w	r2, #4294967295
 8019330:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019334:	9304      	str	r3, [sp, #16]
 8019336:	9307      	str	r3, [sp, #28]
 8019338:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801933c:	931a      	str	r3, [sp, #104]	; 0x68
 801933e:	462f      	mov	r7, r5
 8019340:	2205      	movs	r2, #5
 8019342:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019346:	4850      	ldr	r0, [pc, #320]	; (8019488 <_svfiprintf_r+0x1dc>)
 8019348:	f7e6 ff4a 	bl	80001e0 <memchr>
 801934c:	9b04      	ldr	r3, [sp, #16]
 801934e:	b9d0      	cbnz	r0, 8019386 <_svfiprintf_r+0xda>
 8019350:	06d9      	lsls	r1, r3, #27
 8019352:	bf44      	itt	mi
 8019354:	2220      	movmi	r2, #32
 8019356:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801935a:	071a      	lsls	r2, r3, #28
 801935c:	bf44      	itt	mi
 801935e:	222b      	movmi	r2, #43	; 0x2b
 8019360:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019364:	782a      	ldrb	r2, [r5, #0]
 8019366:	2a2a      	cmp	r2, #42	; 0x2a
 8019368:	d015      	beq.n	8019396 <_svfiprintf_r+0xea>
 801936a:	9a07      	ldr	r2, [sp, #28]
 801936c:	462f      	mov	r7, r5
 801936e:	2000      	movs	r0, #0
 8019370:	250a      	movs	r5, #10
 8019372:	4639      	mov	r1, r7
 8019374:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019378:	3b30      	subs	r3, #48	; 0x30
 801937a:	2b09      	cmp	r3, #9
 801937c:	d94d      	bls.n	801941a <_svfiprintf_r+0x16e>
 801937e:	b1b8      	cbz	r0, 80193b0 <_svfiprintf_r+0x104>
 8019380:	e00f      	b.n	80193a2 <_svfiprintf_r+0xf6>
 8019382:	462f      	mov	r7, r5
 8019384:	e7b8      	b.n	80192f8 <_svfiprintf_r+0x4c>
 8019386:	4a40      	ldr	r2, [pc, #256]	; (8019488 <_svfiprintf_r+0x1dc>)
 8019388:	1a80      	subs	r0, r0, r2
 801938a:	fa0b f000 	lsl.w	r0, fp, r0
 801938e:	4318      	orrs	r0, r3
 8019390:	9004      	str	r0, [sp, #16]
 8019392:	463d      	mov	r5, r7
 8019394:	e7d3      	b.n	801933e <_svfiprintf_r+0x92>
 8019396:	9a03      	ldr	r2, [sp, #12]
 8019398:	1d11      	adds	r1, r2, #4
 801939a:	6812      	ldr	r2, [r2, #0]
 801939c:	9103      	str	r1, [sp, #12]
 801939e:	2a00      	cmp	r2, #0
 80193a0:	db01      	blt.n	80193a6 <_svfiprintf_r+0xfa>
 80193a2:	9207      	str	r2, [sp, #28]
 80193a4:	e004      	b.n	80193b0 <_svfiprintf_r+0x104>
 80193a6:	4252      	negs	r2, r2
 80193a8:	f043 0302 	orr.w	r3, r3, #2
 80193ac:	9207      	str	r2, [sp, #28]
 80193ae:	9304      	str	r3, [sp, #16]
 80193b0:	783b      	ldrb	r3, [r7, #0]
 80193b2:	2b2e      	cmp	r3, #46	; 0x2e
 80193b4:	d10c      	bne.n	80193d0 <_svfiprintf_r+0x124>
 80193b6:	787b      	ldrb	r3, [r7, #1]
 80193b8:	2b2a      	cmp	r3, #42	; 0x2a
 80193ba:	d133      	bne.n	8019424 <_svfiprintf_r+0x178>
 80193bc:	9b03      	ldr	r3, [sp, #12]
 80193be:	1d1a      	adds	r2, r3, #4
 80193c0:	681b      	ldr	r3, [r3, #0]
 80193c2:	9203      	str	r2, [sp, #12]
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	bfb8      	it	lt
 80193c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80193cc:	3702      	adds	r7, #2
 80193ce:	9305      	str	r3, [sp, #20]
 80193d0:	4d2e      	ldr	r5, [pc, #184]	; (801948c <_svfiprintf_r+0x1e0>)
 80193d2:	7839      	ldrb	r1, [r7, #0]
 80193d4:	2203      	movs	r2, #3
 80193d6:	4628      	mov	r0, r5
 80193d8:	f7e6 ff02 	bl	80001e0 <memchr>
 80193dc:	b138      	cbz	r0, 80193ee <_svfiprintf_r+0x142>
 80193de:	2340      	movs	r3, #64	; 0x40
 80193e0:	1b40      	subs	r0, r0, r5
 80193e2:	fa03 f000 	lsl.w	r0, r3, r0
 80193e6:	9b04      	ldr	r3, [sp, #16]
 80193e8:	4303      	orrs	r3, r0
 80193ea:	3701      	adds	r7, #1
 80193ec:	9304      	str	r3, [sp, #16]
 80193ee:	7839      	ldrb	r1, [r7, #0]
 80193f0:	4827      	ldr	r0, [pc, #156]	; (8019490 <_svfiprintf_r+0x1e4>)
 80193f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80193f6:	2206      	movs	r2, #6
 80193f8:	1c7e      	adds	r6, r7, #1
 80193fa:	f7e6 fef1 	bl	80001e0 <memchr>
 80193fe:	2800      	cmp	r0, #0
 8019400:	d038      	beq.n	8019474 <_svfiprintf_r+0x1c8>
 8019402:	4b24      	ldr	r3, [pc, #144]	; (8019494 <_svfiprintf_r+0x1e8>)
 8019404:	bb13      	cbnz	r3, 801944c <_svfiprintf_r+0x1a0>
 8019406:	9b03      	ldr	r3, [sp, #12]
 8019408:	3307      	adds	r3, #7
 801940a:	f023 0307 	bic.w	r3, r3, #7
 801940e:	3308      	adds	r3, #8
 8019410:	9303      	str	r3, [sp, #12]
 8019412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019414:	444b      	add	r3, r9
 8019416:	9309      	str	r3, [sp, #36]	; 0x24
 8019418:	e76d      	b.n	80192f6 <_svfiprintf_r+0x4a>
 801941a:	fb05 3202 	mla	r2, r5, r2, r3
 801941e:	2001      	movs	r0, #1
 8019420:	460f      	mov	r7, r1
 8019422:	e7a6      	b.n	8019372 <_svfiprintf_r+0xc6>
 8019424:	2300      	movs	r3, #0
 8019426:	3701      	adds	r7, #1
 8019428:	9305      	str	r3, [sp, #20]
 801942a:	4619      	mov	r1, r3
 801942c:	250a      	movs	r5, #10
 801942e:	4638      	mov	r0, r7
 8019430:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019434:	3a30      	subs	r2, #48	; 0x30
 8019436:	2a09      	cmp	r2, #9
 8019438:	d903      	bls.n	8019442 <_svfiprintf_r+0x196>
 801943a:	2b00      	cmp	r3, #0
 801943c:	d0c8      	beq.n	80193d0 <_svfiprintf_r+0x124>
 801943e:	9105      	str	r1, [sp, #20]
 8019440:	e7c6      	b.n	80193d0 <_svfiprintf_r+0x124>
 8019442:	fb05 2101 	mla	r1, r5, r1, r2
 8019446:	2301      	movs	r3, #1
 8019448:	4607      	mov	r7, r0
 801944a:	e7f0      	b.n	801942e <_svfiprintf_r+0x182>
 801944c:	ab03      	add	r3, sp, #12
 801944e:	9300      	str	r3, [sp, #0]
 8019450:	4622      	mov	r2, r4
 8019452:	4b11      	ldr	r3, [pc, #68]	; (8019498 <_svfiprintf_r+0x1ec>)
 8019454:	a904      	add	r1, sp, #16
 8019456:	4640      	mov	r0, r8
 8019458:	f7fc fc68 	bl	8015d2c <_printf_float>
 801945c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019460:	4681      	mov	r9, r0
 8019462:	d1d6      	bne.n	8019412 <_svfiprintf_r+0x166>
 8019464:	89a3      	ldrh	r3, [r4, #12]
 8019466:	065b      	lsls	r3, r3, #25
 8019468:	f53f af35 	bmi.w	80192d6 <_svfiprintf_r+0x2a>
 801946c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801946e:	b01d      	add	sp, #116	; 0x74
 8019470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019474:	ab03      	add	r3, sp, #12
 8019476:	9300      	str	r3, [sp, #0]
 8019478:	4622      	mov	r2, r4
 801947a:	4b07      	ldr	r3, [pc, #28]	; (8019498 <_svfiprintf_r+0x1ec>)
 801947c:	a904      	add	r1, sp, #16
 801947e:	4640      	mov	r0, r8
 8019480:	f7fc ff0a 	bl	8016298 <_printf_i>
 8019484:	e7ea      	b.n	801945c <_svfiprintf_r+0x1b0>
 8019486:	bf00      	nop
 8019488:	0801b3bc 	.word	0x0801b3bc
 801948c:	0801b3c2 	.word	0x0801b3c2
 8019490:	0801b3c6 	.word	0x0801b3c6
 8019494:	08015d2d 	.word	0x08015d2d
 8019498:	080191f7 	.word	0x080191f7

0801949c <strncmp>:
 801949c:	b510      	push	{r4, lr}
 801949e:	b16a      	cbz	r2, 80194bc <strncmp+0x20>
 80194a0:	3901      	subs	r1, #1
 80194a2:	1884      	adds	r4, r0, r2
 80194a4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80194a8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80194ac:	4293      	cmp	r3, r2
 80194ae:	d103      	bne.n	80194b8 <strncmp+0x1c>
 80194b0:	42a0      	cmp	r0, r4
 80194b2:	d001      	beq.n	80194b8 <strncmp+0x1c>
 80194b4:	2b00      	cmp	r3, #0
 80194b6:	d1f5      	bne.n	80194a4 <strncmp+0x8>
 80194b8:	1a98      	subs	r0, r3, r2
 80194ba:	bd10      	pop	{r4, pc}
 80194bc:	4610      	mov	r0, r2
 80194be:	e7fc      	b.n	80194ba <strncmp+0x1e>

080194c0 <__ascii_wctomb>:
 80194c0:	b149      	cbz	r1, 80194d6 <__ascii_wctomb+0x16>
 80194c2:	2aff      	cmp	r2, #255	; 0xff
 80194c4:	bf85      	ittet	hi
 80194c6:	238a      	movhi	r3, #138	; 0x8a
 80194c8:	6003      	strhi	r3, [r0, #0]
 80194ca:	700a      	strbls	r2, [r1, #0]
 80194cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80194d0:	bf98      	it	ls
 80194d2:	2001      	movls	r0, #1
 80194d4:	4770      	bx	lr
 80194d6:	4608      	mov	r0, r1
 80194d8:	4770      	bx	lr

080194da <_realloc_r>:
 80194da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194dc:	4607      	mov	r7, r0
 80194de:	4614      	mov	r4, r2
 80194e0:	460e      	mov	r6, r1
 80194e2:	b921      	cbnz	r1, 80194ee <_realloc_r+0x14>
 80194e4:	4611      	mov	r1, r2
 80194e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80194ea:	f7fc bb31 	b.w	8015b50 <_malloc_r>
 80194ee:	b922      	cbnz	r2, 80194fa <_realloc_r+0x20>
 80194f0:	f7fc fae0 	bl	8015ab4 <_free_r>
 80194f4:	4625      	mov	r5, r4
 80194f6:	4628      	mov	r0, r5
 80194f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80194fa:	f000 f814 	bl	8019526 <_malloc_usable_size_r>
 80194fe:	42a0      	cmp	r0, r4
 8019500:	d20f      	bcs.n	8019522 <_realloc_r+0x48>
 8019502:	4621      	mov	r1, r4
 8019504:	4638      	mov	r0, r7
 8019506:	f7fc fb23 	bl	8015b50 <_malloc_r>
 801950a:	4605      	mov	r5, r0
 801950c:	2800      	cmp	r0, #0
 801950e:	d0f2      	beq.n	80194f6 <_realloc_r+0x1c>
 8019510:	4631      	mov	r1, r6
 8019512:	4622      	mov	r2, r4
 8019514:	f7fc faa2 	bl	8015a5c <memcpy>
 8019518:	4631      	mov	r1, r6
 801951a:	4638      	mov	r0, r7
 801951c:	f7fc faca 	bl	8015ab4 <_free_r>
 8019520:	e7e9      	b.n	80194f6 <_realloc_r+0x1c>
 8019522:	4635      	mov	r5, r6
 8019524:	e7e7      	b.n	80194f6 <_realloc_r+0x1c>

08019526 <_malloc_usable_size_r>:
 8019526:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801952a:	1f18      	subs	r0, r3, #4
 801952c:	2b00      	cmp	r3, #0
 801952e:	bfbc      	itt	lt
 8019530:	580b      	ldrlt	r3, [r1, r0]
 8019532:	18c0      	addlt	r0, r0, r3
 8019534:	4770      	bx	lr
	...

08019538 <ceil>:
 8019538:	ec51 0b10 	vmov	r0, r1, d0
 801953c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019540:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8019544:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8019548:	2e13      	cmp	r6, #19
 801954a:	460c      	mov	r4, r1
 801954c:	ee10 5a10 	vmov	r5, s0
 8019550:	4680      	mov	r8, r0
 8019552:	dc30      	bgt.n	80195b6 <ceil+0x7e>
 8019554:	2e00      	cmp	r6, #0
 8019556:	da12      	bge.n	801957e <ceil+0x46>
 8019558:	a333      	add	r3, pc, #204	; (adr r3, 8019628 <ceil+0xf0>)
 801955a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801955e:	f7e6 fe95 	bl	800028c <__adddf3>
 8019562:	2200      	movs	r2, #0
 8019564:	2300      	movs	r3, #0
 8019566:	f7e7 fad7 	bl	8000b18 <__aeabi_dcmpgt>
 801956a:	b128      	cbz	r0, 8019578 <ceil+0x40>
 801956c:	2c00      	cmp	r4, #0
 801956e:	db55      	blt.n	801961c <ceil+0xe4>
 8019570:	432c      	orrs	r4, r5
 8019572:	d057      	beq.n	8019624 <ceil+0xec>
 8019574:	4c2e      	ldr	r4, [pc, #184]	; (8019630 <ceil+0xf8>)
 8019576:	2500      	movs	r5, #0
 8019578:	4621      	mov	r1, r4
 801957a:	4628      	mov	r0, r5
 801957c:	e025      	b.n	80195ca <ceil+0x92>
 801957e:	4f2d      	ldr	r7, [pc, #180]	; (8019634 <ceil+0xfc>)
 8019580:	4137      	asrs	r7, r6
 8019582:	ea01 0307 	and.w	r3, r1, r7
 8019586:	4303      	orrs	r3, r0
 8019588:	d01f      	beq.n	80195ca <ceil+0x92>
 801958a:	a327      	add	r3, pc, #156	; (adr r3, 8019628 <ceil+0xf0>)
 801958c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019590:	f7e6 fe7c 	bl	800028c <__adddf3>
 8019594:	2200      	movs	r2, #0
 8019596:	2300      	movs	r3, #0
 8019598:	f7e7 fabe 	bl	8000b18 <__aeabi_dcmpgt>
 801959c:	2800      	cmp	r0, #0
 801959e:	d0eb      	beq.n	8019578 <ceil+0x40>
 80195a0:	2c00      	cmp	r4, #0
 80195a2:	bfc2      	ittt	gt
 80195a4:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80195a8:	fa43 f606 	asrgt.w	r6, r3, r6
 80195ac:	19a4      	addgt	r4, r4, r6
 80195ae:	ea24 0407 	bic.w	r4, r4, r7
 80195b2:	2500      	movs	r5, #0
 80195b4:	e7e0      	b.n	8019578 <ceil+0x40>
 80195b6:	2e33      	cmp	r6, #51	; 0x33
 80195b8:	dd0b      	ble.n	80195d2 <ceil+0x9a>
 80195ba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80195be:	d104      	bne.n	80195ca <ceil+0x92>
 80195c0:	ee10 2a10 	vmov	r2, s0
 80195c4:	460b      	mov	r3, r1
 80195c6:	f7e6 fe61 	bl	800028c <__adddf3>
 80195ca:	ec41 0b10 	vmov	d0, r0, r1
 80195ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195d2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80195d6:	f04f 33ff 	mov.w	r3, #4294967295
 80195da:	fa23 f707 	lsr.w	r7, r3, r7
 80195de:	4207      	tst	r7, r0
 80195e0:	d0f3      	beq.n	80195ca <ceil+0x92>
 80195e2:	a311      	add	r3, pc, #68	; (adr r3, 8019628 <ceil+0xf0>)
 80195e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195e8:	f7e6 fe50 	bl	800028c <__adddf3>
 80195ec:	2200      	movs	r2, #0
 80195ee:	2300      	movs	r3, #0
 80195f0:	f7e7 fa92 	bl	8000b18 <__aeabi_dcmpgt>
 80195f4:	2800      	cmp	r0, #0
 80195f6:	d0bf      	beq.n	8019578 <ceil+0x40>
 80195f8:	2c00      	cmp	r4, #0
 80195fa:	dd02      	ble.n	8019602 <ceil+0xca>
 80195fc:	2e14      	cmp	r6, #20
 80195fe:	d103      	bne.n	8019608 <ceil+0xd0>
 8019600:	3401      	adds	r4, #1
 8019602:	ea25 0507 	bic.w	r5, r5, r7
 8019606:	e7b7      	b.n	8019578 <ceil+0x40>
 8019608:	2301      	movs	r3, #1
 801960a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801960e:	fa03 f606 	lsl.w	r6, r3, r6
 8019612:	4435      	add	r5, r6
 8019614:	4545      	cmp	r5, r8
 8019616:	bf38      	it	cc
 8019618:	18e4      	addcc	r4, r4, r3
 801961a:	e7f2      	b.n	8019602 <ceil+0xca>
 801961c:	2500      	movs	r5, #0
 801961e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8019622:	e7a9      	b.n	8019578 <ceil+0x40>
 8019624:	4625      	mov	r5, r4
 8019626:	e7a7      	b.n	8019578 <ceil+0x40>
 8019628:	8800759c 	.word	0x8800759c
 801962c:	7e37e43c 	.word	0x7e37e43c
 8019630:	3ff00000 	.word	0x3ff00000
 8019634:	000fffff 	.word	0x000fffff

08019638 <cos>:
 8019638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801963a:	ec51 0b10 	vmov	r0, r1, d0
 801963e:	4a1e      	ldr	r2, [pc, #120]	; (80196b8 <cos+0x80>)
 8019640:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019644:	4293      	cmp	r3, r2
 8019646:	dc06      	bgt.n	8019656 <cos+0x1e>
 8019648:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80196b0 <cos+0x78>
 801964c:	f000 fcec 	bl	801a028 <__kernel_cos>
 8019650:	ec51 0b10 	vmov	r0, r1, d0
 8019654:	e007      	b.n	8019666 <cos+0x2e>
 8019656:	4a19      	ldr	r2, [pc, #100]	; (80196bc <cos+0x84>)
 8019658:	4293      	cmp	r3, r2
 801965a:	dd09      	ble.n	8019670 <cos+0x38>
 801965c:	ee10 2a10 	vmov	r2, s0
 8019660:	460b      	mov	r3, r1
 8019662:	f7e6 fe11 	bl	8000288 <__aeabi_dsub>
 8019666:	ec41 0b10 	vmov	d0, r0, r1
 801966a:	b005      	add	sp, #20
 801966c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019670:	4668      	mov	r0, sp
 8019672:	f000 fa35 	bl	8019ae0 <__ieee754_rem_pio2>
 8019676:	f000 0003 	and.w	r0, r0, #3
 801967a:	2801      	cmp	r0, #1
 801967c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019680:	ed9d 0b00 	vldr	d0, [sp]
 8019684:	d007      	beq.n	8019696 <cos+0x5e>
 8019686:	2802      	cmp	r0, #2
 8019688:	d00e      	beq.n	80196a8 <cos+0x70>
 801968a:	2800      	cmp	r0, #0
 801968c:	d0de      	beq.n	801964c <cos+0x14>
 801968e:	2001      	movs	r0, #1
 8019690:	f001 f8d2 	bl	801a838 <__kernel_sin>
 8019694:	e7dc      	b.n	8019650 <cos+0x18>
 8019696:	f001 f8cf 	bl	801a838 <__kernel_sin>
 801969a:	ec53 2b10 	vmov	r2, r3, d0
 801969e:	ee10 0a10 	vmov	r0, s0
 80196a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80196a6:	e7de      	b.n	8019666 <cos+0x2e>
 80196a8:	f000 fcbe 	bl	801a028 <__kernel_cos>
 80196ac:	e7f5      	b.n	801969a <cos+0x62>
 80196ae:	bf00      	nop
	...
 80196b8:	3fe921fb 	.word	0x3fe921fb
 80196bc:	7fefffff 	.word	0x7fefffff

080196c0 <round>:
 80196c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196c2:	ec57 6b10 	vmov	r6, r7, d0
 80196c6:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80196ca:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80196ce:	2c13      	cmp	r4, #19
 80196d0:	463b      	mov	r3, r7
 80196d2:	463d      	mov	r5, r7
 80196d4:	dc17      	bgt.n	8019706 <round+0x46>
 80196d6:	2c00      	cmp	r4, #0
 80196d8:	da09      	bge.n	80196ee <round+0x2e>
 80196da:	3401      	adds	r4, #1
 80196dc:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80196e0:	d103      	bne.n	80196ea <round+0x2a>
 80196e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80196e6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80196ea:	2100      	movs	r1, #0
 80196ec:	e02c      	b.n	8019748 <round+0x88>
 80196ee:	4a18      	ldr	r2, [pc, #96]	; (8019750 <round+0x90>)
 80196f0:	4122      	asrs	r2, r4
 80196f2:	4217      	tst	r7, r2
 80196f4:	d100      	bne.n	80196f8 <round+0x38>
 80196f6:	b19e      	cbz	r6, 8019720 <round+0x60>
 80196f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80196fc:	4123      	asrs	r3, r4
 80196fe:	442b      	add	r3, r5
 8019700:	ea23 0302 	bic.w	r3, r3, r2
 8019704:	e7f1      	b.n	80196ea <round+0x2a>
 8019706:	2c33      	cmp	r4, #51	; 0x33
 8019708:	dd0d      	ble.n	8019726 <round+0x66>
 801970a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801970e:	d107      	bne.n	8019720 <round+0x60>
 8019710:	4630      	mov	r0, r6
 8019712:	4639      	mov	r1, r7
 8019714:	ee10 2a10 	vmov	r2, s0
 8019718:	f7e6 fdb8 	bl	800028c <__adddf3>
 801971c:	4606      	mov	r6, r0
 801971e:	460f      	mov	r7, r1
 8019720:	ec47 6b10 	vmov	d0, r6, r7
 8019724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019726:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 801972a:	f04f 30ff 	mov.w	r0, #4294967295
 801972e:	40d0      	lsrs	r0, r2
 8019730:	4206      	tst	r6, r0
 8019732:	d0f5      	beq.n	8019720 <round+0x60>
 8019734:	2201      	movs	r2, #1
 8019736:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801973a:	fa02 f404 	lsl.w	r4, r2, r4
 801973e:	1931      	adds	r1, r6, r4
 8019740:	bf28      	it	cs
 8019742:	189b      	addcs	r3, r3, r2
 8019744:	ea21 0100 	bic.w	r1, r1, r0
 8019748:	461f      	mov	r7, r3
 801974a:	460e      	mov	r6, r1
 801974c:	e7e8      	b.n	8019720 <round+0x60>
 801974e:	bf00      	nop
 8019750:	000fffff 	.word	0x000fffff
 8019754:	00000000 	.word	0x00000000

08019758 <sin>:
 8019758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801975a:	ec51 0b10 	vmov	r0, r1, d0
 801975e:	4a20      	ldr	r2, [pc, #128]	; (80197e0 <sin+0x88>)
 8019760:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019764:	4293      	cmp	r3, r2
 8019766:	dc07      	bgt.n	8019778 <sin+0x20>
 8019768:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80197d8 <sin+0x80>
 801976c:	2000      	movs	r0, #0
 801976e:	f001 f863 	bl	801a838 <__kernel_sin>
 8019772:	ec51 0b10 	vmov	r0, r1, d0
 8019776:	e007      	b.n	8019788 <sin+0x30>
 8019778:	4a1a      	ldr	r2, [pc, #104]	; (80197e4 <sin+0x8c>)
 801977a:	4293      	cmp	r3, r2
 801977c:	dd09      	ble.n	8019792 <sin+0x3a>
 801977e:	ee10 2a10 	vmov	r2, s0
 8019782:	460b      	mov	r3, r1
 8019784:	f7e6 fd80 	bl	8000288 <__aeabi_dsub>
 8019788:	ec41 0b10 	vmov	d0, r0, r1
 801978c:	b005      	add	sp, #20
 801978e:	f85d fb04 	ldr.w	pc, [sp], #4
 8019792:	4668      	mov	r0, sp
 8019794:	f000 f9a4 	bl	8019ae0 <__ieee754_rem_pio2>
 8019798:	f000 0003 	and.w	r0, r0, #3
 801979c:	2801      	cmp	r0, #1
 801979e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80197a2:	ed9d 0b00 	vldr	d0, [sp]
 80197a6:	d004      	beq.n	80197b2 <sin+0x5a>
 80197a8:	2802      	cmp	r0, #2
 80197aa:	d005      	beq.n	80197b8 <sin+0x60>
 80197ac:	b970      	cbnz	r0, 80197cc <sin+0x74>
 80197ae:	2001      	movs	r0, #1
 80197b0:	e7dd      	b.n	801976e <sin+0x16>
 80197b2:	f000 fc39 	bl	801a028 <__kernel_cos>
 80197b6:	e7dc      	b.n	8019772 <sin+0x1a>
 80197b8:	2001      	movs	r0, #1
 80197ba:	f001 f83d 	bl	801a838 <__kernel_sin>
 80197be:	ec53 2b10 	vmov	r2, r3, d0
 80197c2:	ee10 0a10 	vmov	r0, s0
 80197c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80197ca:	e7dd      	b.n	8019788 <sin+0x30>
 80197cc:	f000 fc2c 	bl	801a028 <__kernel_cos>
 80197d0:	e7f5      	b.n	80197be <sin+0x66>
 80197d2:	bf00      	nop
 80197d4:	f3af 8000 	nop.w
	...
 80197e0:	3fe921fb 	.word	0x3fe921fb
 80197e4:	7fefffff 	.word	0x7fefffff

080197e8 <ceilf>:
 80197e8:	ee10 3a10 	vmov	r3, s0
 80197ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80197f0:	0dca      	lsrs	r2, r1, #23
 80197f2:	3a7f      	subs	r2, #127	; 0x7f
 80197f4:	2a16      	cmp	r2, #22
 80197f6:	dc2a      	bgt.n	801984e <ceilf+0x66>
 80197f8:	2a00      	cmp	r2, #0
 80197fa:	da11      	bge.n	8019820 <ceilf+0x38>
 80197fc:	eddf 7a18 	vldr	s15, [pc, #96]	; 8019860 <ceilf+0x78>
 8019800:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019804:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801980c:	dd05      	ble.n	801981a <ceilf+0x32>
 801980e:	2b00      	cmp	r3, #0
 8019810:	db23      	blt.n	801985a <ceilf+0x72>
 8019812:	2900      	cmp	r1, #0
 8019814:	bf18      	it	ne
 8019816:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 801981a:	ee00 3a10 	vmov	s0, r3
 801981e:	4770      	bx	lr
 8019820:	4910      	ldr	r1, [pc, #64]	; (8019864 <ceilf+0x7c>)
 8019822:	4111      	asrs	r1, r2
 8019824:	420b      	tst	r3, r1
 8019826:	d0fa      	beq.n	801981e <ceilf+0x36>
 8019828:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8019860 <ceilf+0x78>
 801982c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019830:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019838:	ddef      	ble.n	801981a <ceilf+0x32>
 801983a:	2b00      	cmp	r3, #0
 801983c:	bfc2      	ittt	gt
 801983e:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8019842:	fa40 f202 	asrgt.w	r2, r0, r2
 8019846:	189b      	addgt	r3, r3, r2
 8019848:	ea23 0301 	bic.w	r3, r3, r1
 801984c:	e7e5      	b.n	801981a <ceilf+0x32>
 801984e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019852:	d3e4      	bcc.n	801981e <ceilf+0x36>
 8019854:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019858:	4770      	bx	lr
 801985a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801985e:	e7dc      	b.n	801981a <ceilf+0x32>
 8019860:	7149f2ca 	.word	0x7149f2ca
 8019864:	007fffff 	.word	0x007fffff

08019868 <atan2>:
 8019868:	f000 b85a 	b.w	8019920 <__ieee754_atan2>

0801986c <sqrt>:
 801986c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019870:	ed2d 8b02 	vpush	{d8}
 8019874:	b08b      	sub	sp, #44	; 0x2c
 8019876:	ec55 4b10 	vmov	r4, r5, d0
 801987a:	f000 fb23 	bl	8019ec4 <__ieee754_sqrt>
 801987e:	4b26      	ldr	r3, [pc, #152]	; (8019918 <sqrt+0xac>)
 8019880:	eeb0 8a40 	vmov.f32	s16, s0
 8019884:	eef0 8a60 	vmov.f32	s17, s1
 8019888:	f993 6000 	ldrsb.w	r6, [r3]
 801988c:	1c73      	adds	r3, r6, #1
 801988e:	d02a      	beq.n	80198e6 <sqrt+0x7a>
 8019890:	4622      	mov	r2, r4
 8019892:	462b      	mov	r3, r5
 8019894:	4620      	mov	r0, r4
 8019896:	4629      	mov	r1, r5
 8019898:	f7e7 f948 	bl	8000b2c <__aeabi_dcmpun>
 801989c:	4607      	mov	r7, r0
 801989e:	bb10      	cbnz	r0, 80198e6 <sqrt+0x7a>
 80198a0:	f04f 0800 	mov.w	r8, #0
 80198a4:	f04f 0900 	mov.w	r9, #0
 80198a8:	4642      	mov	r2, r8
 80198aa:	464b      	mov	r3, r9
 80198ac:	4620      	mov	r0, r4
 80198ae:	4629      	mov	r1, r5
 80198b0:	f7e7 f914 	bl	8000adc <__aeabi_dcmplt>
 80198b4:	b1b8      	cbz	r0, 80198e6 <sqrt+0x7a>
 80198b6:	2301      	movs	r3, #1
 80198b8:	9300      	str	r3, [sp, #0]
 80198ba:	4b18      	ldr	r3, [pc, #96]	; (801991c <sqrt+0xb0>)
 80198bc:	9301      	str	r3, [sp, #4]
 80198be:	9708      	str	r7, [sp, #32]
 80198c0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80198c4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80198c8:	b9b6      	cbnz	r6, 80198f8 <sqrt+0x8c>
 80198ca:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80198ce:	4668      	mov	r0, sp
 80198d0:	f001 fa9e 	bl	801ae10 <matherr>
 80198d4:	b1d0      	cbz	r0, 801990c <sqrt+0xa0>
 80198d6:	9b08      	ldr	r3, [sp, #32]
 80198d8:	b11b      	cbz	r3, 80198e2 <sqrt+0x76>
 80198da:	f7fc f885 	bl	80159e8 <__errno>
 80198de:	9b08      	ldr	r3, [sp, #32]
 80198e0:	6003      	str	r3, [r0, #0]
 80198e2:	ed9d 8b06 	vldr	d8, [sp, #24]
 80198e6:	eeb0 0a48 	vmov.f32	s0, s16
 80198ea:	eef0 0a68 	vmov.f32	s1, s17
 80198ee:	b00b      	add	sp, #44	; 0x2c
 80198f0:	ecbd 8b02 	vpop	{d8}
 80198f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80198f8:	4642      	mov	r2, r8
 80198fa:	464b      	mov	r3, r9
 80198fc:	4640      	mov	r0, r8
 80198fe:	4649      	mov	r1, r9
 8019900:	f7e6 ffa4 	bl	800084c <__aeabi_ddiv>
 8019904:	2e02      	cmp	r6, #2
 8019906:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801990a:	d1e0      	bne.n	80198ce <sqrt+0x62>
 801990c:	f7fc f86c 	bl	80159e8 <__errno>
 8019910:	2321      	movs	r3, #33	; 0x21
 8019912:	6003      	str	r3, [r0, #0]
 8019914:	e7df      	b.n	80198d6 <sqrt+0x6a>
 8019916:	bf00      	nop
 8019918:	20000b7c 	.word	0x20000b7c
 801991c:	0801b4ce 	.word	0x0801b4ce

08019920 <__ieee754_atan2>:
 8019920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019924:	ec57 6b11 	vmov	r6, r7, d1
 8019928:	4273      	negs	r3, r6
 801992a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801992e:	4333      	orrs	r3, r6
 8019930:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8019ad8 <__ieee754_atan2+0x1b8>
 8019934:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8019938:	4573      	cmp	r3, lr
 801993a:	ec51 0b10 	vmov	r0, r1, d0
 801993e:	ee11 8a10 	vmov	r8, s2
 8019942:	d80a      	bhi.n	801995a <__ieee754_atan2+0x3a>
 8019944:	4244      	negs	r4, r0
 8019946:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801994a:	4304      	orrs	r4, r0
 801994c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8019950:	4574      	cmp	r4, lr
 8019952:	468c      	mov	ip, r1
 8019954:	ee10 9a10 	vmov	r9, s0
 8019958:	d907      	bls.n	801996a <__ieee754_atan2+0x4a>
 801995a:	4632      	mov	r2, r6
 801995c:	463b      	mov	r3, r7
 801995e:	f7e6 fc95 	bl	800028c <__adddf3>
 8019962:	ec41 0b10 	vmov	d0, r0, r1
 8019966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801996a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801996e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019972:	4334      	orrs	r4, r6
 8019974:	d103      	bne.n	801997e <__ieee754_atan2+0x5e>
 8019976:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801997a:	f001 b819 	b.w	801a9b0 <atan>
 801997e:	17bc      	asrs	r4, r7, #30
 8019980:	f004 0402 	and.w	r4, r4, #2
 8019984:	ea53 0909 	orrs.w	r9, r3, r9
 8019988:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801998c:	d107      	bne.n	801999e <__ieee754_atan2+0x7e>
 801998e:	2c02      	cmp	r4, #2
 8019990:	d073      	beq.n	8019a7a <__ieee754_atan2+0x15a>
 8019992:	2c03      	cmp	r4, #3
 8019994:	d1e5      	bne.n	8019962 <__ieee754_atan2+0x42>
 8019996:	a13e      	add	r1, pc, #248	; (adr r1, 8019a90 <__ieee754_atan2+0x170>)
 8019998:	e9d1 0100 	ldrd	r0, r1, [r1]
 801999c:	e7e1      	b.n	8019962 <__ieee754_atan2+0x42>
 801999e:	ea52 0808 	orrs.w	r8, r2, r8
 80199a2:	d106      	bne.n	80199b2 <__ieee754_atan2+0x92>
 80199a4:	f1bc 0f00 	cmp.w	ip, #0
 80199a8:	da6b      	bge.n	8019a82 <__ieee754_atan2+0x162>
 80199aa:	a13b      	add	r1, pc, #236	; (adr r1, 8019a98 <__ieee754_atan2+0x178>)
 80199ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80199b0:	e7d7      	b.n	8019962 <__ieee754_atan2+0x42>
 80199b2:	4572      	cmp	r2, lr
 80199b4:	d120      	bne.n	80199f8 <__ieee754_atan2+0xd8>
 80199b6:	4293      	cmp	r3, r2
 80199b8:	d111      	bne.n	80199de <__ieee754_atan2+0xbe>
 80199ba:	2c02      	cmp	r4, #2
 80199bc:	d007      	beq.n	80199ce <__ieee754_atan2+0xae>
 80199be:	2c03      	cmp	r4, #3
 80199c0:	d009      	beq.n	80199d6 <__ieee754_atan2+0xb6>
 80199c2:	2c01      	cmp	r4, #1
 80199c4:	d155      	bne.n	8019a72 <__ieee754_atan2+0x152>
 80199c6:	a136      	add	r1, pc, #216	; (adr r1, 8019aa0 <__ieee754_atan2+0x180>)
 80199c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80199cc:	e7c9      	b.n	8019962 <__ieee754_atan2+0x42>
 80199ce:	a136      	add	r1, pc, #216	; (adr r1, 8019aa8 <__ieee754_atan2+0x188>)
 80199d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80199d4:	e7c5      	b.n	8019962 <__ieee754_atan2+0x42>
 80199d6:	a136      	add	r1, pc, #216	; (adr r1, 8019ab0 <__ieee754_atan2+0x190>)
 80199d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80199dc:	e7c1      	b.n	8019962 <__ieee754_atan2+0x42>
 80199de:	2c02      	cmp	r4, #2
 80199e0:	d04b      	beq.n	8019a7a <__ieee754_atan2+0x15a>
 80199e2:	2c03      	cmp	r4, #3
 80199e4:	d0d7      	beq.n	8019996 <__ieee754_atan2+0x76>
 80199e6:	2c01      	cmp	r4, #1
 80199e8:	f04f 0000 	mov.w	r0, #0
 80199ec:	d102      	bne.n	80199f4 <__ieee754_atan2+0xd4>
 80199ee:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80199f2:	e7b6      	b.n	8019962 <__ieee754_atan2+0x42>
 80199f4:	2100      	movs	r1, #0
 80199f6:	e7b4      	b.n	8019962 <__ieee754_atan2+0x42>
 80199f8:	4573      	cmp	r3, lr
 80199fa:	d0d3      	beq.n	80199a4 <__ieee754_atan2+0x84>
 80199fc:	1a9b      	subs	r3, r3, r2
 80199fe:	151b      	asrs	r3, r3, #20
 8019a00:	2b3c      	cmp	r3, #60	; 0x3c
 8019a02:	dc1e      	bgt.n	8019a42 <__ieee754_atan2+0x122>
 8019a04:	2f00      	cmp	r7, #0
 8019a06:	da01      	bge.n	8019a0c <__ieee754_atan2+0xec>
 8019a08:	333c      	adds	r3, #60	; 0x3c
 8019a0a:	db1e      	blt.n	8019a4a <__ieee754_atan2+0x12a>
 8019a0c:	4632      	mov	r2, r6
 8019a0e:	463b      	mov	r3, r7
 8019a10:	f7e6 ff1c 	bl	800084c <__aeabi_ddiv>
 8019a14:	ec41 0b10 	vmov	d0, r0, r1
 8019a18:	f001 f96a 	bl	801acf0 <fabs>
 8019a1c:	f000 ffc8 	bl	801a9b0 <atan>
 8019a20:	ec51 0b10 	vmov	r0, r1, d0
 8019a24:	2c01      	cmp	r4, #1
 8019a26:	d013      	beq.n	8019a50 <__ieee754_atan2+0x130>
 8019a28:	2c02      	cmp	r4, #2
 8019a2a:	d015      	beq.n	8019a58 <__ieee754_atan2+0x138>
 8019a2c:	2c00      	cmp	r4, #0
 8019a2e:	d098      	beq.n	8019962 <__ieee754_atan2+0x42>
 8019a30:	a321      	add	r3, pc, #132	; (adr r3, 8019ab8 <__ieee754_atan2+0x198>)
 8019a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a36:	f7e6 fc27 	bl	8000288 <__aeabi_dsub>
 8019a3a:	a321      	add	r3, pc, #132	; (adr r3, 8019ac0 <__ieee754_atan2+0x1a0>)
 8019a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a40:	e014      	b.n	8019a6c <__ieee754_atan2+0x14c>
 8019a42:	a121      	add	r1, pc, #132	; (adr r1, 8019ac8 <__ieee754_atan2+0x1a8>)
 8019a44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019a48:	e7ec      	b.n	8019a24 <__ieee754_atan2+0x104>
 8019a4a:	2000      	movs	r0, #0
 8019a4c:	2100      	movs	r1, #0
 8019a4e:	e7e9      	b.n	8019a24 <__ieee754_atan2+0x104>
 8019a50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019a54:	4619      	mov	r1, r3
 8019a56:	e784      	b.n	8019962 <__ieee754_atan2+0x42>
 8019a58:	a317      	add	r3, pc, #92	; (adr r3, 8019ab8 <__ieee754_atan2+0x198>)
 8019a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a5e:	f7e6 fc13 	bl	8000288 <__aeabi_dsub>
 8019a62:	4602      	mov	r2, r0
 8019a64:	460b      	mov	r3, r1
 8019a66:	a116      	add	r1, pc, #88	; (adr r1, 8019ac0 <__ieee754_atan2+0x1a0>)
 8019a68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019a6c:	f7e6 fc0c 	bl	8000288 <__aeabi_dsub>
 8019a70:	e777      	b.n	8019962 <__ieee754_atan2+0x42>
 8019a72:	a117      	add	r1, pc, #92	; (adr r1, 8019ad0 <__ieee754_atan2+0x1b0>)
 8019a74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019a78:	e773      	b.n	8019962 <__ieee754_atan2+0x42>
 8019a7a:	a111      	add	r1, pc, #68	; (adr r1, 8019ac0 <__ieee754_atan2+0x1a0>)
 8019a7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019a80:	e76f      	b.n	8019962 <__ieee754_atan2+0x42>
 8019a82:	a111      	add	r1, pc, #68	; (adr r1, 8019ac8 <__ieee754_atan2+0x1a8>)
 8019a84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019a88:	e76b      	b.n	8019962 <__ieee754_atan2+0x42>
 8019a8a:	bf00      	nop
 8019a8c:	f3af 8000 	nop.w
 8019a90:	54442d18 	.word	0x54442d18
 8019a94:	c00921fb 	.word	0xc00921fb
 8019a98:	54442d18 	.word	0x54442d18
 8019a9c:	bff921fb 	.word	0xbff921fb
 8019aa0:	54442d18 	.word	0x54442d18
 8019aa4:	bfe921fb 	.word	0xbfe921fb
 8019aa8:	7f3321d2 	.word	0x7f3321d2
 8019aac:	4002d97c 	.word	0x4002d97c
 8019ab0:	7f3321d2 	.word	0x7f3321d2
 8019ab4:	c002d97c 	.word	0xc002d97c
 8019ab8:	33145c07 	.word	0x33145c07
 8019abc:	3ca1a626 	.word	0x3ca1a626
 8019ac0:	54442d18 	.word	0x54442d18
 8019ac4:	400921fb 	.word	0x400921fb
 8019ac8:	54442d18 	.word	0x54442d18
 8019acc:	3ff921fb 	.word	0x3ff921fb
 8019ad0:	54442d18 	.word	0x54442d18
 8019ad4:	3fe921fb 	.word	0x3fe921fb
 8019ad8:	7ff00000 	.word	0x7ff00000
 8019adc:	00000000 	.word	0x00000000

08019ae0 <__ieee754_rem_pio2>:
 8019ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ae4:	ec57 6b10 	vmov	r6, r7, d0
 8019ae8:	4bc3      	ldr	r3, [pc, #780]	; (8019df8 <__ieee754_rem_pio2+0x318>)
 8019aea:	b08d      	sub	sp, #52	; 0x34
 8019aec:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8019af0:	4598      	cmp	r8, r3
 8019af2:	4604      	mov	r4, r0
 8019af4:	9704      	str	r7, [sp, #16]
 8019af6:	dc07      	bgt.n	8019b08 <__ieee754_rem_pio2+0x28>
 8019af8:	2200      	movs	r2, #0
 8019afa:	2300      	movs	r3, #0
 8019afc:	ed84 0b00 	vstr	d0, [r4]
 8019b00:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019b04:	2500      	movs	r5, #0
 8019b06:	e027      	b.n	8019b58 <__ieee754_rem_pio2+0x78>
 8019b08:	4bbc      	ldr	r3, [pc, #752]	; (8019dfc <__ieee754_rem_pio2+0x31c>)
 8019b0a:	4598      	cmp	r8, r3
 8019b0c:	dc75      	bgt.n	8019bfa <__ieee754_rem_pio2+0x11a>
 8019b0e:	9b04      	ldr	r3, [sp, #16]
 8019b10:	4dbb      	ldr	r5, [pc, #748]	; (8019e00 <__ieee754_rem_pio2+0x320>)
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	ee10 0a10 	vmov	r0, s0
 8019b18:	a3a9      	add	r3, pc, #676	; (adr r3, 8019dc0 <__ieee754_rem_pio2+0x2e0>)
 8019b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b1e:	4639      	mov	r1, r7
 8019b20:	dd36      	ble.n	8019b90 <__ieee754_rem_pio2+0xb0>
 8019b22:	f7e6 fbb1 	bl	8000288 <__aeabi_dsub>
 8019b26:	45a8      	cmp	r8, r5
 8019b28:	4606      	mov	r6, r0
 8019b2a:	460f      	mov	r7, r1
 8019b2c:	d018      	beq.n	8019b60 <__ieee754_rem_pio2+0x80>
 8019b2e:	a3a6      	add	r3, pc, #664	; (adr r3, 8019dc8 <__ieee754_rem_pio2+0x2e8>)
 8019b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b34:	f7e6 fba8 	bl	8000288 <__aeabi_dsub>
 8019b38:	4602      	mov	r2, r0
 8019b3a:	460b      	mov	r3, r1
 8019b3c:	e9c4 2300 	strd	r2, r3, [r4]
 8019b40:	4630      	mov	r0, r6
 8019b42:	4639      	mov	r1, r7
 8019b44:	f7e6 fba0 	bl	8000288 <__aeabi_dsub>
 8019b48:	a39f      	add	r3, pc, #636	; (adr r3, 8019dc8 <__ieee754_rem_pio2+0x2e8>)
 8019b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b4e:	f7e6 fb9b 	bl	8000288 <__aeabi_dsub>
 8019b52:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019b56:	2501      	movs	r5, #1
 8019b58:	4628      	mov	r0, r5
 8019b5a:	b00d      	add	sp, #52	; 0x34
 8019b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b60:	a39b      	add	r3, pc, #620	; (adr r3, 8019dd0 <__ieee754_rem_pio2+0x2f0>)
 8019b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b66:	f7e6 fb8f 	bl	8000288 <__aeabi_dsub>
 8019b6a:	a39b      	add	r3, pc, #620	; (adr r3, 8019dd8 <__ieee754_rem_pio2+0x2f8>)
 8019b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b70:	4606      	mov	r6, r0
 8019b72:	460f      	mov	r7, r1
 8019b74:	f7e6 fb88 	bl	8000288 <__aeabi_dsub>
 8019b78:	4602      	mov	r2, r0
 8019b7a:	460b      	mov	r3, r1
 8019b7c:	e9c4 2300 	strd	r2, r3, [r4]
 8019b80:	4630      	mov	r0, r6
 8019b82:	4639      	mov	r1, r7
 8019b84:	f7e6 fb80 	bl	8000288 <__aeabi_dsub>
 8019b88:	a393      	add	r3, pc, #588	; (adr r3, 8019dd8 <__ieee754_rem_pio2+0x2f8>)
 8019b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b8e:	e7de      	b.n	8019b4e <__ieee754_rem_pio2+0x6e>
 8019b90:	f7e6 fb7c 	bl	800028c <__adddf3>
 8019b94:	45a8      	cmp	r8, r5
 8019b96:	4606      	mov	r6, r0
 8019b98:	460f      	mov	r7, r1
 8019b9a:	d016      	beq.n	8019bca <__ieee754_rem_pio2+0xea>
 8019b9c:	a38a      	add	r3, pc, #552	; (adr r3, 8019dc8 <__ieee754_rem_pio2+0x2e8>)
 8019b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ba2:	f7e6 fb73 	bl	800028c <__adddf3>
 8019ba6:	4602      	mov	r2, r0
 8019ba8:	460b      	mov	r3, r1
 8019baa:	e9c4 2300 	strd	r2, r3, [r4]
 8019bae:	4630      	mov	r0, r6
 8019bb0:	4639      	mov	r1, r7
 8019bb2:	f7e6 fb69 	bl	8000288 <__aeabi_dsub>
 8019bb6:	a384      	add	r3, pc, #528	; (adr r3, 8019dc8 <__ieee754_rem_pio2+0x2e8>)
 8019bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bbc:	f7e6 fb66 	bl	800028c <__adddf3>
 8019bc0:	f04f 35ff 	mov.w	r5, #4294967295
 8019bc4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019bc8:	e7c6      	b.n	8019b58 <__ieee754_rem_pio2+0x78>
 8019bca:	a381      	add	r3, pc, #516	; (adr r3, 8019dd0 <__ieee754_rem_pio2+0x2f0>)
 8019bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bd0:	f7e6 fb5c 	bl	800028c <__adddf3>
 8019bd4:	a380      	add	r3, pc, #512	; (adr r3, 8019dd8 <__ieee754_rem_pio2+0x2f8>)
 8019bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bda:	4606      	mov	r6, r0
 8019bdc:	460f      	mov	r7, r1
 8019bde:	f7e6 fb55 	bl	800028c <__adddf3>
 8019be2:	4602      	mov	r2, r0
 8019be4:	460b      	mov	r3, r1
 8019be6:	e9c4 2300 	strd	r2, r3, [r4]
 8019bea:	4630      	mov	r0, r6
 8019bec:	4639      	mov	r1, r7
 8019bee:	f7e6 fb4b 	bl	8000288 <__aeabi_dsub>
 8019bf2:	a379      	add	r3, pc, #484	; (adr r3, 8019dd8 <__ieee754_rem_pio2+0x2f8>)
 8019bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bf8:	e7e0      	b.n	8019bbc <__ieee754_rem_pio2+0xdc>
 8019bfa:	4b82      	ldr	r3, [pc, #520]	; (8019e04 <__ieee754_rem_pio2+0x324>)
 8019bfc:	4598      	cmp	r8, r3
 8019bfe:	f300 80d0 	bgt.w	8019da2 <__ieee754_rem_pio2+0x2c2>
 8019c02:	f001 f875 	bl	801acf0 <fabs>
 8019c06:	ec57 6b10 	vmov	r6, r7, d0
 8019c0a:	ee10 0a10 	vmov	r0, s0
 8019c0e:	a374      	add	r3, pc, #464	; (adr r3, 8019de0 <__ieee754_rem_pio2+0x300>)
 8019c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c14:	4639      	mov	r1, r7
 8019c16:	f7e6 fcef 	bl	80005f8 <__aeabi_dmul>
 8019c1a:	2200      	movs	r2, #0
 8019c1c:	4b7a      	ldr	r3, [pc, #488]	; (8019e08 <__ieee754_rem_pio2+0x328>)
 8019c1e:	f7e6 fb35 	bl	800028c <__adddf3>
 8019c22:	f7e6 ff99 	bl	8000b58 <__aeabi_d2iz>
 8019c26:	4605      	mov	r5, r0
 8019c28:	f7e6 fc7c 	bl	8000524 <__aeabi_i2d>
 8019c2c:	a364      	add	r3, pc, #400	; (adr r3, 8019dc0 <__ieee754_rem_pio2+0x2e0>)
 8019c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019c36:	f7e6 fcdf 	bl	80005f8 <__aeabi_dmul>
 8019c3a:	4602      	mov	r2, r0
 8019c3c:	460b      	mov	r3, r1
 8019c3e:	4630      	mov	r0, r6
 8019c40:	4639      	mov	r1, r7
 8019c42:	f7e6 fb21 	bl	8000288 <__aeabi_dsub>
 8019c46:	a360      	add	r3, pc, #384	; (adr r3, 8019dc8 <__ieee754_rem_pio2+0x2e8>)
 8019c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c4c:	4682      	mov	sl, r0
 8019c4e:	468b      	mov	fp, r1
 8019c50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019c54:	f7e6 fcd0 	bl	80005f8 <__aeabi_dmul>
 8019c58:	2d1f      	cmp	r5, #31
 8019c5a:	4606      	mov	r6, r0
 8019c5c:	460f      	mov	r7, r1
 8019c5e:	dc0c      	bgt.n	8019c7a <__ieee754_rem_pio2+0x19a>
 8019c60:	1e6a      	subs	r2, r5, #1
 8019c62:	4b6a      	ldr	r3, [pc, #424]	; (8019e0c <__ieee754_rem_pio2+0x32c>)
 8019c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019c68:	4543      	cmp	r3, r8
 8019c6a:	d006      	beq.n	8019c7a <__ieee754_rem_pio2+0x19a>
 8019c6c:	4632      	mov	r2, r6
 8019c6e:	463b      	mov	r3, r7
 8019c70:	4650      	mov	r0, sl
 8019c72:	4659      	mov	r1, fp
 8019c74:	f7e6 fb08 	bl	8000288 <__aeabi_dsub>
 8019c78:	e00e      	b.n	8019c98 <__ieee754_rem_pio2+0x1b8>
 8019c7a:	4632      	mov	r2, r6
 8019c7c:	463b      	mov	r3, r7
 8019c7e:	4650      	mov	r0, sl
 8019c80:	4659      	mov	r1, fp
 8019c82:	f7e6 fb01 	bl	8000288 <__aeabi_dsub>
 8019c86:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019c8a:	9305      	str	r3, [sp, #20]
 8019c8c:	9a05      	ldr	r2, [sp, #20]
 8019c8e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019c92:	1ad3      	subs	r3, r2, r3
 8019c94:	2b10      	cmp	r3, #16
 8019c96:	dc02      	bgt.n	8019c9e <__ieee754_rem_pio2+0x1be>
 8019c98:	e9c4 0100 	strd	r0, r1, [r4]
 8019c9c:	e039      	b.n	8019d12 <__ieee754_rem_pio2+0x232>
 8019c9e:	a34c      	add	r3, pc, #304	; (adr r3, 8019dd0 <__ieee754_rem_pio2+0x2f0>)
 8019ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ca4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019ca8:	f7e6 fca6 	bl	80005f8 <__aeabi_dmul>
 8019cac:	4606      	mov	r6, r0
 8019cae:	460f      	mov	r7, r1
 8019cb0:	4602      	mov	r2, r0
 8019cb2:	460b      	mov	r3, r1
 8019cb4:	4650      	mov	r0, sl
 8019cb6:	4659      	mov	r1, fp
 8019cb8:	f7e6 fae6 	bl	8000288 <__aeabi_dsub>
 8019cbc:	4602      	mov	r2, r0
 8019cbe:	460b      	mov	r3, r1
 8019cc0:	4680      	mov	r8, r0
 8019cc2:	4689      	mov	r9, r1
 8019cc4:	4650      	mov	r0, sl
 8019cc6:	4659      	mov	r1, fp
 8019cc8:	f7e6 fade 	bl	8000288 <__aeabi_dsub>
 8019ccc:	4632      	mov	r2, r6
 8019cce:	463b      	mov	r3, r7
 8019cd0:	f7e6 fada 	bl	8000288 <__aeabi_dsub>
 8019cd4:	a340      	add	r3, pc, #256	; (adr r3, 8019dd8 <__ieee754_rem_pio2+0x2f8>)
 8019cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cda:	4606      	mov	r6, r0
 8019cdc:	460f      	mov	r7, r1
 8019cde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019ce2:	f7e6 fc89 	bl	80005f8 <__aeabi_dmul>
 8019ce6:	4632      	mov	r2, r6
 8019ce8:	463b      	mov	r3, r7
 8019cea:	f7e6 facd 	bl	8000288 <__aeabi_dsub>
 8019cee:	4602      	mov	r2, r0
 8019cf0:	460b      	mov	r3, r1
 8019cf2:	4606      	mov	r6, r0
 8019cf4:	460f      	mov	r7, r1
 8019cf6:	4640      	mov	r0, r8
 8019cf8:	4649      	mov	r1, r9
 8019cfa:	f7e6 fac5 	bl	8000288 <__aeabi_dsub>
 8019cfe:	9a05      	ldr	r2, [sp, #20]
 8019d00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019d04:	1ad3      	subs	r3, r2, r3
 8019d06:	2b31      	cmp	r3, #49	; 0x31
 8019d08:	dc20      	bgt.n	8019d4c <__ieee754_rem_pio2+0x26c>
 8019d0a:	e9c4 0100 	strd	r0, r1, [r4]
 8019d0e:	46c2      	mov	sl, r8
 8019d10:	46cb      	mov	fp, r9
 8019d12:	e9d4 8900 	ldrd	r8, r9, [r4]
 8019d16:	4650      	mov	r0, sl
 8019d18:	4642      	mov	r2, r8
 8019d1a:	464b      	mov	r3, r9
 8019d1c:	4659      	mov	r1, fp
 8019d1e:	f7e6 fab3 	bl	8000288 <__aeabi_dsub>
 8019d22:	463b      	mov	r3, r7
 8019d24:	4632      	mov	r2, r6
 8019d26:	f7e6 faaf 	bl	8000288 <__aeabi_dsub>
 8019d2a:	9b04      	ldr	r3, [sp, #16]
 8019d2c:	2b00      	cmp	r3, #0
 8019d2e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019d32:	f6bf af11 	bge.w	8019b58 <__ieee754_rem_pio2+0x78>
 8019d36:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8019d3a:	6063      	str	r3, [r4, #4]
 8019d3c:	f8c4 8000 	str.w	r8, [r4]
 8019d40:	60a0      	str	r0, [r4, #8]
 8019d42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019d46:	60e3      	str	r3, [r4, #12]
 8019d48:	426d      	negs	r5, r5
 8019d4a:	e705      	b.n	8019b58 <__ieee754_rem_pio2+0x78>
 8019d4c:	a326      	add	r3, pc, #152	; (adr r3, 8019de8 <__ieee754_rem_pio2+0x308>)
 8019d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019d56:	f7e6 fc4f 	bl	80005f8 <__aeabi_dmul>
 8019d5a:	4606      	mov	r6, r0
 8019d5c:	460f      	mov	r7, r1
 8019d5e:	4602      	mov	r2, r0
 8019d60:	460b      	mov	r3, r1
 8019d62:	4640      	mov	r0, r8
 8019d64:	4649      	mov	r1, r9
 8019d66:	f7e6 fa8f 	bl	8000288 <__aeabi_dsub>
 8019d6a:	4602      	mov	r2, r0
 8019d6c:	460b      	mov	r3, r1
 8019d6e:	4682      	mov	sl, r0
 8019d70:	468b      	mov	fp, r1
 8019d72:	4640      	mov	r0, r8
 8019d74:	4649      	mov	r1, r9
 8019d76:	f7e6 fa87 	bl	8000288 <__aeabi_dsub>
 8019d7a:	4632      	mov	r2, r6
 8019d7c:	463b      	mov	r3, r7
 8019d7e:	f7e6 fa83 	bl	8000288 <__aeabi_dsub>
 8019d82:	a31b      	add	r3, pc, #108	; (adr r3, 8019df0 <__ieee754_rem_pio2+0x310>)
 8019d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d88:	4606      	mov	r6, r0
 8019d8a:	460f      	mov	r7, r1
 8019d8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019d90:	f7e6 fc32 	bl	80005f8 <__aeabi_dmul>
 8019d94:	4632      	mov	r2, r6
 8019d96:	463b      	mov	r3, r7
 8019d98:	f7e6 fa76 	bl	8000288 <__aeabi_dsub>
 8019d9c:	4606      	mov	r6, r0
 8019d9e:	460f      	mov	r7, r1
 8019da0:	e764      	b.n	8019c6c <__ieee754_rem_pio2+0x18c>
 8019da2:	4b1b      	ldr	r3, [pc, #108]	; (8019e10 <__ieee754_rem_pio2+0x330>)
 8019da4:	4598      	cmp	r8, r3
 8019da6:	dd35      	ble.n	8019e14 <__ieee754_rem_pio2+0x334>
 8019da8:	ee10 2a10 	vmov	r2, s0
 8019dac:	463b      	mov	r3, r7
 8019dae:	4630      	mov	r0, r6
 8019db0:	4639      	mov	r1, r7
 8019db2:	f7e6 fa69 	bl	8000288 <__aeabi_dsub>
 8019db6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019dba:	e9c4 0100 	strd	r0, r1, [r4]
 8019dbe:	e6a1      	b.n	8019b04 <__ieee754_rem_pio2+0x24>
 8019dc0:	54400000 	.word	0x54400000
 8019dc4:	3ff921fb 	.word	0x3ff921fb
 8019dc8:	1a626331 	.word	0x1a626331
 8019dcc:	3dd0b461 	.word	0x3dd0b461
 8019dd0:	1a600000 	.word	0x1a600000
 8019dd4:	3dd0b461 	.word	0x3dd0b461
 8019dd8:	2e037073 	.word	0x2e037073
 8019ddc:	3ba3198a 	.word	0x3ba3198a
 8019de0:	6dc9c883 	.word	0x6dc9c883
 8019de4:	3fe45f30 	.word	0x3fe45f30
 8019de8:	2e000000 	.word	0x2e000000
 8019dec:	3ba3198a 	.word	0x3ba3198a
 8019df0:	252049c1 	.word	0x252049c1
 8019df4:	397b839a 	.word	0x397b839a
 8019df8:	3fe921fb 	.word	0x3fe921fb
 8019dfc:	4002d97b 	.word	0x4002d97b
 8019e00:	3ff921fb 	.word	0x3ff921fb
 8019e04:	413921fb 	.word	0x413921fb
 8019e08:	3fe00000 	.word	0x3fe00000
 8019e0c:	0801b4d4 	.word	0x0801b4d4
 8019e10:	7fefffff 	.word	0x7fefffff
 8019e14:	ea4f 5528 	mov.w	r5, r8, asr #20
 8019e18:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8019e1c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8019e20:	4630      	mov	r0, r6
 8019e22:	460f      	mov	r7, r1
 8019e24:	f7e6 fe98 	bl	8000b58 <__aeabi_d2iz>
 8019e28:	f7e6 fb7c 	bl	8000524 <__aeabi_i2d>
 8019e2c:	4602      	mov	r2, r0
 8019e2e:	460b      	mov	r3, r1
 8019e30:	4630      	mov	r0, r6
 8019e32:	4639      	mov	r1, r7
 8019e34:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019e38:	f7e6 fa26 	bl	8000288 <__aeabi_dsub>
 8019e3c:	2200      	movs	r2, #0
 8019e3e:	4b1f      	ldr	r3, [pc, #124]	; (8019ebc <__ieee754_rem_pio2+0x3dc>)
 8019e40:	f7e6 fbda 	bl	80005f8 <__aeabi_dmul>
 8019e44:	460f      	mov	r7, r1
 8019e46:	4606      	mov	r6, r0
 8019e48:	f7e6 fe86 	bl	8000b58 <__aeabi_d2iz>
 8019e4c:	f7e6 fb6a 	bl	8000524 <__aeabi_i2d>
 8019e50:	4602      	mov	r2, r0
 8019e52:	460b      	mov	r3, r1
 8019e54:	4630      	mov	r0, r6
 8019e56:	4639      	mov	r1, r7
 8019e58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8019e5c:	f7e6 fa14 	bl	8000288 <__aeabi_dsub>
 8019e60:	2200      	movs	r2, #0
 8019e62:	4b16      	ldr	r3, [pc, #88]	; (8019ebc <__ieee754_rem_pio2+0x3dc>)
 8019e64:	f7e6 fbc8 	bl	80005f8 <__aeabi_dmul>
 8019e68:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8019e6c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8019e70:	f04f 0803 	mov.w	r8, #3
 8019e74:	2600      	movs	r6, #0
 8019e76:	2700      	movs	r7, #0
 8019e78:	4632      	mov	r2, r6
 8019e7a:	463b      	mov	r3, r7
 8019e7c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8019e80:	f108 3aff 	add.w	sl, r8, #4294967295
 8019e84:	f7e6 fe20 	bl	8000ac8 <__aeabi_dcmpeq>
 8019e88:	b9b0      	cbnz	r0, 8019eb8 <__ieee754_rem_pio2+0x3d8>
 8019e8a:	4b0d      	ldr	r3, [pc, #52]	; (8019ec0 <__ieee754_rem_pio2+0x3e0>)
 8019e8c:	9301      	str	r3, [sp, #4]
 8019e8e:	2302      	movs	r3, #2
 8019e90:	9300      	str	r3, [sp, #0]
 8019e92:	462a      	mov	r2, r5
 8019e94:	4643      	mov	r3, r8
 8019e96:	4621      	mov	r1, r4
 8019e98:	a806      	add	r0, sp, #24
 8019e9a:	f000 f98d 	bl	801a1b8 <__kernel_rem_pio2>
 8019e9e:	9b04      	ldr	r3, [sp, #16]
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	4605      	mov	r5, r0
 8019ea4:	f6bf ae58 	bge.w	8019b58 <__ieee754_rem_pio2+0x78>
 8019ea8:	6863      	ldr	r3, [r4, #4]
 8019eaa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019eae:	6063      	str	r3, [r4, #4]
 8019eb0:	68e3      	ldr	r3, [r4, #12]
 8019eb2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019eb6:	e746      	b.n	8019d46 <__ieee754_rem_pio2+0x266>
 8019eb8:	46d0      	mov	r8, sl
 8019eba:	e7dd      	b.n	8019e78 <__ieee754_rem_pio2+0x398>
 8019ebc:	41700000 	.word	0x41700000
 8019ec0:	0801b554 	.word	0x0801b554

08019ec4 <__ieee754_sqrt>:
 8019ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ec8:	4955      	ldr	r1, [pc, #340]	; (801a020 <__ieee754_sqrt+0x15c>)
 8019eca:	ec55 4b10 	vmov	r4, r5, d0
 8019ece:	43a9      	bics	r1, r5
 8019ed0:	462b      	mov	r3, r5
 8019ed2:	462a      	mov	r2, r5
 8019ed4:	d112      	bne.n	8019efc <__ieee754_sqrt+0x38>
 8019ed6:	ee10 2a10 	vmov	r2, s0
 8019eda:	ee10 0a10 	vmov	r0, s0
 8019ede:	4629      	mov	r1, r5
 8019ee0:	f7e6 fb8a 	bl	80005f8 <__aeabi_dmul>
 8019ee4:	4602      	mov	r2, r0
 8019ee6:	460b      	mov	r3, r1
 8019ee8:	4620      	mov	r0, r4
 8019eea:	4629      	mov	r1, r5
 8019eec:	f7e6 f9ce 	bl	800028c <__adddf3>
 8019ef0:	4604      	mov	r4, r0
 8019ef2:	460d      	mov	r5, r1
 8019ef4:	ec45 4b10 	vmov	d0, r4, r5
 8019ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019efc:	2d00      	cmp	r5, #0
 8019efe:	ee10 0a10 	vmov	r0, s0
 8019f02:	4621      	mov	r1, r4
 8019f04:	dc0f      	bgt.n	8019f26 <__ieee754_sqrt+0x62>
 8019f06:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019f0a:	4330      	orrs	r0, r6
 8019f0c:	d0f2      	beq.n	8019ef4 <__ieee754_sqrt+0x30>
 8019f0e:	b155      	cbz	r5, 8019f26 <__ieee754_sqrt+0x62>
 8019f10:	ee10 2a10 	vmov	r2, s0
 8019f14:	4620      	mov	r0, r4
 8019f16:	4629      	mov	r1, r5
 8019f18:	f7e6 f9b6 	bl	8000288 <__aeabi_dsub>
 8019f1c:	4602      	mov	r2, r0
 8019f1e:	460b      	mov	r3, r1
 8019f20:	f7e6 fc94 	bl	800084c <__aeabi_ddiv>
 8019f24:	e7e4      	b.n	8019ef0 <__ieee754_sqrt+0x2c>
 8019f26:	151b      	asrs	r3, r3, #20
 8019f28:	d073      	beq.n	801a012 <__ieee754_sqrt+0x14e>
 8019f2a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019f2e:	07dd      	lsls	r5, r3, #31
 8019f30:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8019f34:	bf48      	it	mi
 8019f36:	0fc8      	lsrmi	r0, r1, #31
 8019f38:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8019f3c:	bf44      	itt	mi
 8019f3e:	0049      	lslmi	r1, r1, #1
 8019f40:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8019f44:	2500      	movs	r5, #0
 8019f46:	1058      	asrs	r0, r3, #1
 8019f48:	0fcb      	lsrs	r3, r1, #31
 8019f4a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8019f4e:	0049      	lsls	r1, r1, #1
 8019f50:	2316      	movs	r3, #22
 8019f52:	462c      	mov	r4, r5
 8019f54:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8019f58:	19a7      	adds	r7, r4, r6
 8019f5a:	4297      	cmp	r7, r2
 8019f5c:	bfde      	ittt	le
 8019f5e:	19bc      	addle	r4, r7, r6
 8019f60:	1bd2      	suble	r2, r2, r7
 8019f62:	19ad      	addle	r5, r5, r6
 8019f64:	0fcf      	lsrs	r7, r1, #31
 8019f66:	3b01      	subs	r3, #1
 8019f68:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8019f6c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019f70:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019f74:	d1f0      	bne.n	8019f58 <__ieee754_sqrt+0x94>
 8019f76:	f04f 0c20 	mov.w	ip, #32
 8019f7a:	469e      	mov	lr, r3
 8019f7c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8019f80:	42a2      	cmp	r2, r4
 8019f82:	eb06 070e 	add.w	r7, r6, lr
 8019f86:	dc02      	bgt.n	8019f8e <__ieee754_sqrt+0xca>
 8019f88:	d112      	bne.n	8019fb0 <__ieee754_sqrt+0xec>
 8019f8a:	428f      	cmp	r7, r1
 8019f8c:	d810      	bhi.n	8019fb0 <__ieee754_sqrt+0xec>
 8019f8e:	2f00      	cmp	r7, #0
 8019f90:	eb07 0e06 	add.w	lr, r7, r6
 8019f94:	da42      	bge.n	801a01c <__ieee754_sqrt+0x158>
 8019f96:	f1be 0f00 	cmp.w	lr, #0
 8019f9a:	db3f      	blt.n	801a01c <__ieee754_sqrt+0x158>
 8019f9c:	f104 0801 	add.w	r8, r4, #1
 8019fa0:	1b12      	subs	r2, r2, r4
 8019fa2:	428f      	cmp	r7, r1
 8019fa4:	bf88      	it	hi
 8019fa6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019faa:	1bc9      	subs	r1, r1, r7
 8019fac:	4433      	add	r3, r6
 8019fae:	4644      	mov	r4, r8
 8019fb0:	0052      	lsls	r2, r2, #1
 8019fb2:	f1bc 0c01 	subs.w	ip, ip, #1
 8019fb6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8019fba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019fbe:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019fc2:	d1dd      	bne.n	8019f80 <__ieee754_sqrt+0xbc>
 8019fc4:	430a      	orrs	r2, r1
 8019fc6:	d006      	beq.n	8019fd6 <__ieee754_sqrt+0x112>
 8019fc8:	1c5c      	adds	r4, r3, #1
 8019fca:	bf13      	iteet	ne
 8019fcc:	3301      	addne	r3, #1
 8019fce:	3501      	addeq	r5, #1
 8019fd0:	4663      	moveq	r3, ip
 8019fd2:	f023 0301 	bicne.w	r3, r3, #1
 8019fd6:	106a      	asrs	r2, r5, #1
 8019fd8:	085b      	lsrs	r3, r3, #1
 8019fda:	07e9      	lsls	r1, r5, #31
 8019fdc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8019fe0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8019fe4:	bf48      	it	mi
 8019fe6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8019fea:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8019fee:	461c      	mov	r4, r3
 8019ff0:	e780      	b.n	8019ef4 <__ieee754_sqrt+0x30>
 8019ff2:	0aca      	lsrs	r2, r1, #11
 8019ff4:	3815      	subs	r0, #21
 8019ff6:	0549      	lsls	r1, r1, #21
 8019ff8:	2a00      	cmp	r2, #0
 8019ffa:	d0fa      	beq.n	8019ff2 <__ieee754_sqrt+0x12e>
 8019ffc:	02d6      	lsls	r6, r2, #11
 8019ffe:	d50a      	bpl.n	801a016 <__ieee754_sqrt+0x152>
 801a000:	f1c3 0420 	rsb	r4, r3, #32
 801a004:	fa21 f404 	lsr.w	r4, r1, r4
 801a008:	1e5d      	subs	r5, r3, #1
 801a00a:	4099      	lsls	r1, r3
 801a00c:	4322      	orrs	r2, r4
 801a00e:	1b43      	subs	r3, r0, r5
 801a010:	e78b      	b.n	8019f2a <__ieee754_sqrt+0x66>
 801a012:	4618      	mov	r0, r3
 801a014:	e7f0      	b.n	8019ff8 <__ieee754_sqrt+0x134>
 801a016:	0052      	lsls	r2, r2, #1
 801a018:	3301      	adds	r3, #1
 801a01a:	e7ef      	b.n	8019ffc <__ieee754_sqrt+0x138>
 801a01c:	46a0      	mov	r8, r4
 801a01e:	e7bf      	b.n	8019fa0 <__ieee754_sqrt+0xdc>
 801a020:	7ff00000 	.word	0x7ff00000
 801a024:	00000000 	.word	0x00000000

0801a028 <__kernel_cos>:
 801a028:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a02c:	ec59 8b10 	vmov	r8, r9, d0
 801a030:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801a034:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 801a038:	ed2d 8b02 	vpush	{d8}
 801a03c:	eeb0 8a41 	vmov.f32	s16, s2
 801a040:	eef0 8a61 	vmov.f32	s17, s3
 801a044:	da07      	bge.n	801a056 <__kernel_cos+0x2e>
 801a046:	ee10 0a10 	vmov	r0, s0
 801a04a:	4649      	mov	r1, r9
 801a04c:	f7e6 fd84 	bl	8000b58 <__aeabi_d2iz>
 801a050:	2800      	cmp	r0, #0
 801a052:	f000 8089 	beq.w	801a168 <__kernel_cos+0x140>
 801a056:	4642      	mov	r2, r8
 801a058:	464b      	mov	r3, r9
 801a05a:	4640      	mov	r0, r8
 801a05c:	4649      	mov	r1, r9
 801a05e:	f7e6 facb 	bl	80005f8 <__aeabi_dmul>
 801a062:	2200      	movs	r2, #0
 801a064:	4b4e      	ldr	r3, [pc, #312]	; (801a1a0 <__kernel_cos+0x178>)
 801a066:	4604      	mov	r4, r0
 801a068:	460d      	mov	r5, r1
 801a06a:	f7e6 fac5 	bl	80005f8 <__aeabi_dmul>
 801a06e:	a340      	add	r3, pc, #256	; (adr r3, 801a170 <__kernel_cos+0x148>)
 801a070:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a074:	4682      	mov	sl, r0
 801a076:	468b      	mov	fp, r1
 801a078:	4620      	mov	r0, r4
 801a07a:	4629      	mov	r1, r5
 801a07c:	f7e6 fabc 	bl	80005f8 <__aeabi_dmul>
 801a080:	a33d      	add	r3, pc, #244	; (adr r3, 801a178 <__kernel_cos+0x150>)
 801a082:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a086:	f7e6 f901 	bl	800028c <__adddf3>
 801a08a:	4622      	mov	r2, r4
 801a08c:	462b      	mov	r3, r5
 801a08e:	f7e6 fab3 	bl	80005f8 <__aeabi_dmul>
 801a092:	a33b      	add	r3, pc, #236	; (adr r3, 801a180 <__kernel_cos+0x158>)
 801a094:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a098:	f7e6 f8f6 	bl	8000288 <__aeabi_dsub>
 801a09c:	4622      	mov	r2, r4
 801a09e:	462b      	mov	r3, r5
 801a0a0:	f7e6 faaa 	bl	80005f8 <__aeabi_dmul>
 801a0a4:	a338      	add	r3, pc, #224	; (adr r3, 801a188 <__kernel_cos+0x160>)
 801a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0aa:	f7e6 f8ef 	bl	800028c <__adddf3>
 801a0ae:	4622      	mov	r2, r4
 801a0b0:	462b      	mov	r3, r5
 801a0b2:	f7e6 faa1 	bl	80005f8 <__aeabi_dmul>
 801a0b6:	a336      	add	r3, pc, #216	; (adr r3, 801a190 <__kernel_cos+0x168>)
 801a0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0bc:	f7e6 f8e4 	bl	8000288 <__aeabi_dsub>
 801a0c0:	4622      	mov	r2, r4
 801a0c2:	462b      	mov	r3, r5
 801a0c4:	f7e6 fa98 	bl	80005f8 <__aeabi_dmul>
 801a0c8:	a333      	add	r3, pc, #204	; (adr r3, 801a198 <__kernel_cos+0x170>)
 801a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0ce:	f7e6 f8dd 	bl	800028c <__adddf3>
 801a0d2:	4622      	mov	r2, r4
 801a0d4:	462b      	mov	r3, r5
 801a0d6:	f7e6 fa8f 	bl	80005f8 <__aeabi_dmul>
 801a0da:	4622      	mov	r2, r4
 801a0dc:	462b      	mov	r3, r5
 801a0de:	f7e6 fa8b 	bl	80005f8 <__aeabi_dmul>
 801a0e2:	ec53 2b18 	vmov	r2, r3, d8
 801a0e6:	4604      	mov	r4, r0
 801a0e8:	460d      	mov	r5, r1
 801a0ea:	4640      	mov	r0, r8
 801a0ec:	4649      	mov	r1, r9
 801a0ee:	f7e6 fa83 	bl	80005f8 <__aeabi_dmul>
 801a0f2:	460b      	mov	r3, r1
 801a0f4:	4602      	mov	r2, r0
 801a0f6:	4629      	mov	r1, r5
 801a0f8:	4620      	mov	r0, r4
 801a0fa:	f7e6 f8c5 	bl	8000288 <__aeabi_dsub>
 801a0fe:	4b29      	ldr	r3, [pc, #164]	; (801a1a4 <__kernel_cos+0x17c>)
 801a100:	429e      	cmp	r6, r3
 801a102:	4680      	mov	r8, r0
 801a104:	4689      	mov	r9, r1
 801a106:	dc11      	bgt.n	801a12c <__kernel_cos+0x104>
 801a108:	4602      	mov	r2, r0
 801a10a:	460b      	mov	r3, r1
 801a10c:	4650      	mov	r0, sl
 801a10e:	4659      	mov	r1, fp
 801a110:	f7e6 f8ba 	bl	8000288 <__aeabi_dsub>
 801a114:	460b      	mov	r3, r1
 801a116:	4924      	ldr	r1, [pc, #144]	; (801a1a8 <__kernel_cos+0x180>)
 801a118:	4602      	mov	r2, r0
 801a11a:	2000      	movs	r0, #0
 801a11c:	f7e6 f8b4 	bl	8000288 <__aeabi_dsub>
 801a120:	ecbd 8b02 	vpop	{d8}
 801a124:	ec41 0b10 	vmov	d0, r0, r1
 801a128:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a12c:	4b1f      	ldr	r3, [pc, #124]	; (801a1ac <__kernel_cos+0x184>)
 801a12e:	491e      	ldr	r1, [pc, #120]	; (801a1a8 <__kernel_cos+0x180>)
 801a130:	429e      	cmp	r6, r3
 801a132:	bfcc      	ite	gt
 801a134:	4d1e      	ldrgt	r5, [pc, #120]	; (801a1b0 <__kernel_cos+0x188>)
 801a136:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801a13a:	2400      	movs	r4, #0
 801a13c:	4622      	mov	r2, r4
 801a13e:	462b      	mov	r3, r5
 801a140:	2000      	movs	r0, #0
 801a142:	f7e6 f8a1 	bl	8000288 <__aeabi_dsub>
 801a146:	4622      	mov	r2, r4
 801a148:	4606      	mov	r6, r0
 801a14a:	460f      	mov	r7, r1
 801a14c:	462b      	mov	r3, r5
 801a14e:	4650      	mov	r0, sl
 801a150:	4659      	mov	r1, fp
 801a152:	f7e6 f899 	bl	8000288 <__aeabi_dsub>
 801a156:	4642      	mov	r2, r8
 801a158:	464b      	mov	r3, r9
 801a15a:	f7e6 f895 	bl	8000288 <__aeabi_dsub>
 801a15e:	4602      	mov	r2, r0
 801a160:	460b      	mov	r3, r1
 801a162:	4630      	mov	r0, r6
 801a164:	4639      	mov	r1, r7
 801a166:	e7d9      	b.n	801a11c <__kernel_cos+0xf4>
 801a168:	2000      	movs	r0, #0
 801a16a:	490f      	ldr	r1, [pc, #60]	; (801a1a8 <__kernel_cos+0x180>)
 801a16c:	e7d8      	b.n	801a120 <__kernel_cos+0xf8>
 801a16e:	bf00      	nop
 801a170:	be8838d4 	.word	0xbe8838d4
 801a174:	bda8fae9 	.word	0xbda8fae9
 801a178:	bdb4b1c4 	.word	0xbdb4b1c4
 801a17c:	3e21ee9e 	.word	0x3e21ee9e
 801a180:	809c52ad 	.word	0x809c52ad
 801a184:	3e927e4f 	.word	0x3e927e4f
 801a188:	19cb1590 	.word	0x19cb1590
 801a18c:	3efa01a0 	.word	0x3efa01a0
 801a190:	16c15177 	.word	0x16c15177
 801a194:	3f56c16c 	.word	0x3f56c16c
 801a198:	5555554c 	.word	0x5555554c
 801a19c:	3fa55555 	.word	0x3fa55555
 801a1a0:	3fe00000 	.word	0x3fe00000
 801a1a4:	3fd33332 	.word	0x3fd33332
 801a1a8:	3ff00000 	.word	0x3ff00000
 801a1ac:	3fe90000 	.word	0x3fe90000
 801a1b0:	3fd20000 	.word	0x3fd20000
 801a1b4:	00000000 	.word	0x00000000

0801a1b8 <__kernel_rem_pio2>:
 801a1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1bc:	ed2d 8b02 	vpush	{d8}
 801a1c0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801a1c4:	1ed4      	subs	r4, r2, #3
 801a1c6:	9308      	str	r3, [sp, #32]
 801a1c8:	9101      	str	r1, [sp, #4]
 801a1ca:	4bc5      	ldr	r3, [pc, #788]	; (801a4e0 <__kernel_rem_pio2+0x328>)
 801a1cc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801a1ce:	9009      	str	r0, [sp, #36]	; 0x24
 801a1d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a1d4:	9304      	str	r3, [sp, #16]
 801a1d6:	9b08      	ldr	r3, [sp, #32]
 801a1d8:	3b01      	subs	r3, #1
 801a1da:	9307      	str	r3, [sp, #28]
 801a1dc:	2318      	movs	r3, #24
 801a1de:	fb94 f4f3 	sdiv	r4, r4, r3
 801a1e2:	f06f 0317 	mvn.w	r3, #23
 801a1e6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801a1ea:	fb04 3303 	mla	r3, r4, r3, r3
 801a1ee:	eb03 0a02 	add.w	sl, r3, r2
 801a1f2:	9b04      	ldr	r3, [sp, #16]
 801a1f4:	9a07      	ldr	r2, [sp, #28]
 801a1f6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801a4d0 <__kernel_rem_pio2+0x318>
 801a1fa:	eb03 0802 	add.w	r8, r3, r2
 801a1fe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a200:	1aa7      	subs	r7, r4, r2
 801a202:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801a206:	ae22      	add	r6, sp, #136	; 0x88
 801a208:	2500      	movs	r5, #0
 801a20a:	4545      	cmp	r5, r8
 801a20c:	dd13      	ble.n	801a236 <__kernel_rem_pio2+0x7e>
 801a20e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 801a4d0 <__kernel_rem_pio2+0x318>
 801a212:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801a216:	2600      	movs	r6, #0
 801a218:	9b04      	ldr	r3, [sp, #16]
 801a21a:	429e      	cmp	r6, r3
 801a21c:	dc32      	bgt.n	801a284 <__kernel_rem_pio2+0xcc>
 801a21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a220:	9302      	str	r3, [sp, #8]
 801a222:	9b08      	ldr	r3, [sp, #32]
 801a224:	199d      	adds	r5, r3, r6
 801a226:	ab22      	add	r3, sp, #136	; 0x88
 801a228:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a22c:	9306      	str	r3, [sp, #24]
 801a22e:	ec59 8b18 	vmov	r8, r9, d8
 801a232:	2700      	movs	r7, #0
 801a234:	e01f      	b.n	801a276 <__kernel_rem_pio2+0xbe>
 801a236:	42ef      	cmn	r7, r5
 801a238:	d407      	bmi.n	801a24a <__kernel_rem_pio2+0x92>
 801a23a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801a23e:	f7e6 f971 	bl	8000524 <__aeabi_i2d>
 801a242:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a246:	3501      	adds	r5, #1
 801a248:	e7df      	b.n	801a20a <__kernel_rem_pio2+0x52>
 801a24a:	ec51 0b18 	vmov	r0, r1, d8
 801a24e:	e7f8      	b.n	801a242 <__kernel_rem_pio2+0x8a>
 801a250:	9906      	ldr	r1, [sp, #24]
 801a252:	9d02      	ldr	r5, [sp, #8]
 801a254:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 801a258:	9106      	str	r1, [sp, #24]
 801a25a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801a25e:	9502      	str	r5, [sp, #8]
 801a260:	f7e6 f9ca 	bl	80005f8 <__aeabi_dmul>
 801a264:	4602      	mov	r2, r0
 801a266:	460b      	mov	r3, r1
 801a268:	4640      	mov	r0, r8
 801a26a:	4649      	mov	r1, r9
 801a26c:	f7e6 f80e 	bl	800028c <__adddf3>
 801a270:	3701      	adds	r7, #1
 801a272:	4680      	mov	r8, r0
 801a274:	4689      	mov	r9, r1
 801a276:	9b07      	ldr	r3, [sp, #28]
 801a278:	429f      	cmp	r7, r3
 801a27a:	dde9      	ble.n	801a250 <__kernel_rem_pio2+0x98>
 801a27c:	e8eb 8902 	strd	r8, r9, [fp], #8
 801a280:	3601      	adds	r6, #1
 801a282:	e7c9      	b.n	801a218 <__kernel_rem_pio2+0x60>
 801a284:	9b04      	ldr	r3, [sp, #16]
 801a286:	aa0e      	add	r2, sp, #56	; 0x38
 801a288:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a28c:	930c      	str	r3, [sp, #48]	; 0x30
 801a28e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a290:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a294:	9c04      	ldr	r4, [sp, #16]
 801a296:	930b      	str	r3, [sp, #44]	; 0x2c
 801a298:	ab9a      	add	r3, sp, #616	; 0x268
 801a29a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801a29e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a2a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a2a6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801a2aa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801a2ae:	ab9a      	add	r3, sp, #616	; 0x268
 801a2b0:	445b      	add	r3, fp
 801a2b2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801a2b6:	2500      	movs	r5, #0
 801a2b8:	1b63      	subs	r3, r4, r5
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	dc78      	bgt.n	801a3b0 <__kernel_rem_pio2+0x1f8>
 801a2be:	4650      	mov	r0, sl
 801a2c0:	ec49 8b10 	vmov	d0, r8, r9
 801a2c4:	f000 fda8 	bl	801ae18 <scalbn>
 801a2c8:	ec57 6b10 	vmov	r6, r7, d0
 801a2cc:	2200      	movs	r2, #0
 801a2ce:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801a2d2:	ee10 0a10 	vmov	r0, s0
 801a2d6:	4639      	mov	r1, r7
 801a2d8:	f7e6 f98e 	bl	80005f8 <__aeabi_dmul>
 801a2dc:	ec41 0b10 	vmov	d0, r0, r1
 801a2e0:	f000 fd12 	bl	801ad08 <floor>
 801a2e4:	2200      	movs	r2, #0
 801a2e6:	ec51 0b10 	vmov	r0, r1, d0
 801a2ea:	4b7e      	ldr	r3, [pc, #504]	; (801a4e4 <__kernel_rem_pio2+0x32c>)
 801a2ec:	f7e6 f984 	bl	80005f8 <__aeabi_dmul>
 801a2f0:	4602      	mov	r2, r0
 801a2f2:	460b      	mov	r3, r1
 801a2f4:	4630      	mov	r0, r6
 801a2f6:	4639      	mov	r1, r7
 801a2f8:	f7e5 ffc6 	bl	8000288 <__aeabi_dsub>
 801a2fc:	460f      	mov	r7, r1
 801a2fe:	4606      	mov	r6, r0
 801a300:	f7e6 fc2a 	bl	8000b58 <__aeabi_d2iz>
 801a304:	9006      	str	r0, [sp, #24]
 801a306:	f7e6 f90d 	bl	8000524 <__aeabi_i2d>
 801a30a:	4602      	mov	r2, r0
 801a30c:	460b      	mov	r3, r1
 801a30e:	4630      	mov	r0, r6
 801a310:	4639      	mov	r1, r7
 801a312:	f7e5 ffb9 	bl	8000288 <__aeabi_dsub>
 801a316:	f1ba 0f00 	cmp.w	sl, #0
 801a31a:	4606      	mov	r6, r0
 801a31c:	460f      	mov	r7, r1
 801a31e:	dd6c      	ble.n	801a3fa <__kernel_rem_pio2+0x242>
 801a320:	1e62      	subs	r2, r4, #1
 801a322:	ab0e      	add	r3, sp, #56	; 0x38
 801a324:	f1ca 0118 	rsb	r1, sl, #24
 801a328:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a32c:	9d06      	ldr	r5, [sp, #24]
 801a32e:	fa40 f301 	asr.w	r3, r0, r1
 801a332:	441d      	add	r5, r3
 801a334:	408b      	lsls	r3, r1
 801a336:	1ac0      	subs	r0, r0, r3
 801a338:	ab0e      	add	r3, sp, #56	; 0x38
 801a33a:	9506      	str	r5, [sp, #24]
 801a33c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801a340:	f1ca 0317 	rsb	r3, sl, #23
 801a344:	fa40 f303 	asr.w	r3, r0, r3
 801a348:	9302      	str	r3, [sp, #8]
 801a34a:	9b02      	ldr	r3, [sp, #8]
 801a34c:	2b00      	cmp	r3, #0
 801a34e:	dd62      	ble.n	801a416 <__kernel_rem_pio2+0x25e>
 801a350:	9b06      	ldr	r3, [sp, #24]
 801a352:	2200      	movs	r2, #0
 801a354:	3301      	adds	r3, #1
 801a356:	9306      	str	r3, [sp, #24]
 801a358:	4615      	mov	r5, r2
 801a35a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801a35e:	4294      	cmp	r4, r2
 801a360:	f300 8095 	bgt.w	801a48e <__kernel_rem_pio2+0x2d6>
 801a364:	f1ba 0f00 	cmp.w	sl, #0
 801a368:	dd07      	ble.n	801a37a <__kernel_rem_pio2+0x1c2>
 801a36a:	f1ba 0f01 	cmp.w	sl, #1
 801a36e:	f000 80a2 	beq.w	801a4b6 <__kernel_rem_pio2+0x2fe>
 801a372:	f1ba 0f02 	cmp.w	sl, #2
 801a376:	f000 80c1 	beq.w	801a4fc <__kernel_rem_pio2+0x344>
 801a37a:	9b02      	ldr	r3, [sp, #8]
 801a37c:	2b02      	cmp	r3, #2
 801a37e:	d14a      	bne.n	801a416 <__kernel_rem_pio2+0x25e>
 801a380:	4632      	mov	r2, r6
 801a382:	463b      	mov	r3, r7
 801a384:	2000      	movs	r0, #0
 801a386:	4958      	ldr	r1, [pc, #352]	; (801a4e8 <__kernel_rem_pio2+0x330>)
 801a388:	f7e5 ff7e 	bl	8000288 <__aeabi_dsub>
 801a38c:	4606      	mov	r6, r0
 801a38e:	460f      	mov	r7, r1
 801a390:	2d00      	cmp	r5, #0
 801a392:	d040      	beq.n	801a416 <__kernel_rem_pio2+0x25e>
 801a394:	4650      	mov	r0, sl
 801a396:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801a4d8 <__kernel_rem_pio2+0x320>
 801a39a:	f000 fd3d 	bl	801ae18 <scalbn>
 801a39e:	4630      	mov	r0, r6
 801a3a0:	4639      	mov	r1, r7
 801a3a2:	ec53 2b10 	vmov	r2, r3, d0
 801a3a6:	f7e5 ff6f 	bl	8000288 <__aeabi_dsub>
 801a3aa:	4606      	mov	r6, r0
 801a3ac:	460f      	mov	r7, r1
 801a3ae:	e032      	b.n	801a416 <__kernel_rem_pio2+0x25e>
 801a3b0:	2200      	movs	r2, #0
 801a3b2:	4b4e      	ldr	r3, [pc, #312]	; (801a4ec <__kernel_rem_pio2+0x334>)
 801a3b4:	4640      	mov	r0, r8
 801a3b6:	4649      	mov	r1, r9
 801a3b8:	f7e6 f91e 	bl	80005f8 <__aeabi_dmul>
 801a3bc:	f7e6 fbcc 	bl	8000b58 <__aeabi_d2iz>
 801a3c0:	f7e6 f8b0 	bl	8000524 <__aeabi_i2d>
 801a3c4:	2200      	movs	r2, #0
 801a3c6:	4b4a      	ldr	r3, [pc, #296]	; (801a4f0 <__kernel_rem_pio2+0x338>)
 801a3c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a3cc:	f7e6 f914 	bl	80005f8 <__aeabi_dmul>
 801a3d0:	4602      	mov	r2, r0
 801a3d2:	460b      	mov	r3, r1
 801a3d4:	4640      	mov	r0, r8
 801a3d6:	4649      	mov	r1, r9
 801a3d8:	f7e5 ff56 	bl	8000288 <__aeabi_dsub>
 801a3dc:	f7e6 fbbc 	bl	8000b58 <__aeabi_d2iz>
 801a3e0:	ab0e      	add	r3, sp, #56	; 0x38
 801a3e2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801a3e6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801a3ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a3ee:	f7e5 ff4d 	bl	800028c <__adddf3>
 801a3f2:	3501      	adds	r5, #1
 801a3f4:	4680      	mov	r8, r0
 801a3f6:	4689      	mov	r9, r1
 801a3f8:	e75e      	b.n	801a2b8 <__kernel_rem_pio2+0x100>
 801a3fa:	d105      	bne.n	801a408 <__kernel_rem_pio2+0x250>
 801a3fc:	1e63      	subs	r3, r4, #1
 801a3fe:	aa0e      	add	r2, sp, #56	; 0x38
 801a400:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a404:	15c3      	asrs	r3, r0, #23
 801a406:	e79f      	b.n	801a348 <__kernel_rem_pio2+0x190>
 801a408:	2200      	movs	r2, #0
 801a40a:	4b3a      	ldr	r3, [pc, #232]	; (801a4f4 <__kernel_rem_pio2+0x33c>)
 801a40c:	f7e6 fb7a 	bl	8000b04 <__aeabi_dcmpge>
 801a410:	2800      	cmp	r0, #0
 801a412:	d139      	bne.n	801a488 <__kernel_rem_pio2+0x2d0>
 801a414:	9002      	str	r0, [sp, #8]
 801a416:	2200      	movs	r2, #0
 801a418:	2300      	movs	r3, #0
 801a41a:	4630      	mov	r0, r6
 801a41c:	4639      	mov	r1, r7
 801a41e:	f7e6 fb53 	bl	8000ac8 <__aeabi_dcmpeq>
 801a422:	2800      	cmp	r0, #0
 801a424:	f000 80c7 	beq.w	801a5b6 <__kernel_rem_pio2+0x3fe>
 801a428:	1e65      	subs	r5, r4, #1
 801a42a:	462b      	mov	r3, r5
 801a42c:	2200      	movs	r2, #0
 801a42e:	9904      	ldr	r1, [sp, #16]
 801a430:	428b      	cmp	r3, r1
 801a432:	da6a      	bge.n	801a50a <__kernel_rem_pio2+0x352>
 801a434:	2a00      	cmp	r2, #0
 801a436:	f000 8088 	beq.w	801a54a <__kernel_rem_pio2+0x392>
 801a43a:	ab0e      	add	r3, sp, #56	; 0x38
 801a43c:	f1aa 0a18 	sub.w	sl, sl, #24
 801a440:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801a444:	2b00      	cmp	r3, #0
 801a446:	f000 80b4 	beq.w	801a5b2 <__kernel_rem_pio2+0x3fa>
 801a44a:	4650      	mov	r0, sl
 801a44c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 801a4d8 <__kernel_rem_pio2+0x320>
 801a450:	f000 fce2 	bl	801ae18 <scalbn>
 801a454:	00ec      	lsls	r4, r5, #3
 801a456:	ab72      	add	r3, sp, #456	; 0x1c8
 801a458:	191e      	adds	r6, r3, r4
 801a45a:	ec59 8b10 	vmov	r8, r9, d0
 801a45e:	f106 0a08 	add.w	sl, r6, #8
 801a462:	462f      	mov	r7, r5
 801a464:	2f00      	cmp	r7, #0
 801a466:	f280 80df 	bge.w	801a628 <__kernel_rem_pio2+0x470>
 801a46a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 801a4d0 <__kernel_rem_pio2+0x318>
 801a46e:	f04f 0a00 	mov.w	sl, #0
 801a472:	eba5 030a 	sub.w	r3, r5, sl
 801a476:	2b00      	cmp	r3, #0
 801a478:	f2c0 810a 	blt.w	801a690 <__kernel_rem_pio2+0x4d8>
 801a47c:	f8df b078 	ldr.w	fp, [pc, #120]	; 801a4f8 <__kernel_rem_pio2+0x340>
 801a480:	ec59 8b18 	vmov	r8, r9, d8
 801a484:	2700      	movs	r7, #0
 801a486:	e0f5      	b.n	801a674 <__kernel_rem_pio2+0x4bc>
 801a488:	2302      	movs	r3, #2
 801a48a:	9302      	str	r3, [sp, #8]
 801a48c:	e760      	b.n	801a350 <__kernel_rem_pio2+0x198>
 801a48e:	ab0e      	add	r3, sp, #56	; 0x38
 801a490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a494:	b94d      	cbnz	r5, 801a4aa <__kernel_rem_pio2+0x2f2>
 801a496:	b12b      	cbz	r3, 801a4a4 <__kernel_rem_pio2+0x2ec>
 801a498:	a80e      	add	r0, sp, #56	; 0x38
 801a49a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801a49e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a4a2:	2301      	movs	r3, #1
 801a4a4:	3201      	adds	r2, #1
 801a4a6:	461d      	mov	r5, r3
 801a4a8:	e759      	b.n	801a35e <__kernel_rem_pio2+0x1a6>
 801a4aa:	a80e      	add	r0, sp, #56	; 0x38
 801a4ac:	1acb      	subs	r3, r1, r3
 801a4ae:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a4b2:	462b      	mov	r3, r5
 801a4b4:	e7f6      	b.n	801a4a4 <__kernel_rem_pio2+0x2ec>
 801a4b6:	1e62      	subs	r2, r4, #1
 801a4b8:	ab0e      	add	r3, sp, #56	; 0x38
 801a4ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a4be:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801a4c2:	a90e      	add	r1, sp, #56	; 0x38
 801a4c4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801a4c8:	e757      	b.n	801a37a <__kernel_rem_pio2+0x1c2>
 801a4ca:	bf00      	nop
 801a4cc:	f3af 8000 	nop.w
	...
 801a4dc:	3ff00000 	.word	0x3ff00000
 801a4e0:	0801b6a0 	.word	0x0801b6a0
 801a4e4:	40200000 	.word	0x40200000
 801a4e8:	3ff00000 	.word	0x3ff00000
 801a4ec:	3e700000 	.word	0x3e700000
 801a4f0:	41700000 	.word	0x41700000
 801a4f4:	3fe00000 	.word	0x3fe00000
 801a4f8:	0801b660 	.word	0x0801b660
 801a4fc:	1e62      	subs	r2, r4, #1
 801a4fe:	ab0e      	add	r3, sp, #56	; 0x38
 801a500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a504:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a508:	e7db      	b.n	801a4c2 <__kernel_rem_pio2+0x30a>
 801a50a:	a90e      	add	r1, sp, #56	; 0x38
 801a50c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801a510:	3b01      	subs	r3, #1
 801a512:	430a      	orrs	r2, r1
 801a514:	e78b      	b.n	801a42e <__kernel_rem_pio2+0x276>
 801a516:	3301      	adds	r3, #1
 801a518:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801a51c:	2900      	cmp	r1, #0
 801a51e:	d0fa      	beq.n	801a516 <__kernel_rem_pio2+0x35e>
 801a520:	9a08      	ldr	r2, [sp, #32]
 801a522:	4422      	add	r2, r4
 801a524:	00d2      	lsls	r2, r2, #3
 801a526:	a922      	add	r1, sp, #136	; 0x88
 801a528:	18e3      	adds	r3, r4, r3
 801a52a:	9206      	str	r2, [sp, #24]
 801a52c:	440a      	add	r2, r1
 801a52e:	9302      	str	r3, [sp, #8]
 801a530:	f10b 0108 	add.w	r1, fp, #8
 801a534:	f102 0308 	add.w	r3, r2, #8
 801a538:	1c66      	adds	r6, r4, #1
 801a53a:	910a      	str	r1, [sp, #40]	; 0x28
 801a53c:	2500      	movs	r5, #0
 801a53e:	930d      	str	r3, [sp, #52]	; 0x34
 801a540:	9b02      	ldr	r3, [sp, #8]
 801a542:	42b3      	cmp	r3, r6
 801a544:	da04      	bge.n	801a550 <__kernel_rem_pio2+0x398>
 801a546:	461c      	mov	r4, r3
 801a548:	e6a6      	b.n	801a298 <__kernel_rem_pio2+0xe0>
 801a54a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a54c:	2301      	movs	r3, #1
 801a54e:	e7e3      	b.n	801a518 <__kernel_rem_pio2+0x360>
 801a550:	9b06      	ldr	r3, [sp, #24]
 801a552:	18ef      	adds	r7, r5, r3
 801a554:	ab22      	add	r3, sp, #136	; 0x88
 801a556:	441f      	add	r7, r3
 801a558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a55a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801a55e:	f7e5 ffe1 	bl	8000524 <__aeabi_i2d>
 801a562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a564:	461c      	mov	r4, r3
 801a566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a568:	e9c7 0100 	strd	r0, r1, [r7]
 801a56c:	eb03 0b05 	add.w	fp, r3, r5
 801a570:	2700      	movs	r7, #0
 801a572:	f04f 0800 	mov.w	r8, #0
 801a576:	f04f 0900 	mov.w	r9, #0
 801a57a:	9b07      	ldr	r3, [sp, #28]
 801a57c:	429f      	cmp	r7, r3
 801a57e:	dd08      	ble.n	801a592 <__kernel_rem_pio2+0x3da>
 801a580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a582:	aa72      	add	r2, sp, #456	; 0x1c8
 801a584:	18eb      	adds	r3, r5, r3
 801a586:	4413      	add	r3, r2
 801a588:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801a58c:	3601      	adds	r6, #1
 801a58e:	3508      	adds	r5, #8
 801a590:	e7d6      	b.n	801a540 <__kernel_rem_pio2+0x388>
 801a592:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801a596:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801a59a:	f7e6 f82d 	bl	80005f8 <__aeabi_dmul>
 801a59e:	4602      	mov	r2, r0
 801a5a0:	460b      	mov	r3, r1
 801a5a2:	4640      	mov	r0, r8
 801a5a4:	4649      	mov	r1, r9
 801a5a6:	f7e5 fe71 	bl	800028c <__adddf3>
 801a5aa:	3701      	adds	r7, #1
 801a5ac:	4680      	mov	r8, r0
 801a5ae:	4689      	mov	r9, r1
 801a5b0:	e7e3      	b.n	801a57a <__kernel_rem_pio2+0x3c2>
 801a5b2:	3d01      	subs	r5, #1
 801a5b4:	e741      	b.n	801a43a <__kernel_rem_pio2+0x282>
 801a5b6:	f1ca 0000 	rsb	r0, sl, #0
 801a5ba:	ec47 6b10 	vmov	d0, r6, r7
 801a5be:	f000 fc2b 	bl	801ae18 <scalbn>
 801a5c2:	ec57 6b10 	vmov	r6, r7, d0
 801a5c6:	2200      	movs	r2, #0
 801a5c8:	4b99      	ldr	r3, [pc, #612]	; (801a830 <__kernel_rem_pio2+0x678>)
 801a5ca:	ee10 0a10 	vmov	r0, s0
 801a5ce:	4639      	mov	r1, r7
 801a5d0:	f7e6 fa98 	bl	8000b04 <__aeabi_dcmpge>
 801a5d4:	b1f8      	cbz	r0, 801a616 <__kernel_rem_pio2+0x45e>
 801a5d6:	2200      	movs	r2, #0
 801a5d8:	4b96      	ldr	r3, [pc, #600]	; (801a834 <__kernel_rem_pio2+0x67c>)
 801a5da:	4630      	mov	r0, r6
 801a5dc:	4639      	mov	r1, r7
 801a5de:	f7e6 f80b 	bl	80005f8 <__aeabi_dmul>
 801a5e2:	f7e6 fab9 	bl	8000b58 <__aeabi_d2iz>
 801a5e6:	4680      	mov	r8, r0
 801a5e8:	f7e5 ff9c 	bl	8000524 <__aeabi_i2d>
 801a5ec:	2200      	movs	r2, #0
 801a5ee:	4b90      	ldr	r3, [pc, #576]	; (801a830 <__kernel_rem_pio2+0x678>)
 801a5f0:	f7e6 f802 	bl	80005f8 <__aeabi_dmul>
 801a5f4:	460b      	mov	r3, r1
 801a5f6:	4602      	mov	r2, r0
 801a5f8:	4639      	mov	r1, r7
 801a5fa:	4630      	mov	r0, r6
 801a5fc:	f7e5 fe44 	bl	8000288 <__aeabi_dsub>
 801a600:	f7e6 faaa 	bl	8000b58 <__aeabi_d2iz>
 801a604:	1c65      	adds	r5, r4, #1
 801a606:	ab0e      	add	r3, sp, #56	; 0x38
 801a608:	f10a 0a18 	add.w	sl, sl, #24
 801a60c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a610:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801a614:	e719      	b.n	801a44a <__kernel_rem_pio2+0x292>
 801a616:	4630      	mov	r0, r6
 801a618:	4639      	mov	r1, r7
 801a61a:	f7e6 fa9d 	bl	8000b58 <__aeabi_d2iz>
 801a61e:	ab0e      	add	r3, sp, #56	; 0x38
 801a620:	4625      	mov	r5, r4
 801a622:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a626:	e710      	b.n	801a44a <__kernel_rem_pio2+0x292>
 801a628:	ab0e      	add	r3, sp, #56	; 0x38
 801a62a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801a62e:	f7e5 ff79 	bl	8000524 <__aeabi_i2d>
 801a632:	4642      	mov	r2, r8
 801a634:	464b      	mov	r3, r9
 801a636:	f7e5 ffdf 	bl	80005f8 <__aeabi_dmul>
 801a63a:	2200      	movs	r2, #0
 801a63c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801a640:	4b7c      	ldr	r3, [pc, #496]	; (801a834 <__kernel_rem_pio2+0x67c>)
 801a642:	4640      	mov	r0, r8
 801a644:	4649      	mov	r1, r9
 801a646:	f7e5 ffd7 	bl	80005f8 <__aeabi_dmul>
 801a64a:	3f01      	subs	r7, #1
 801a64c:	4680      	mov	r8, r0
 801a64e:	4689      	mov	r9, r1
 801a650:	e708      	b.n	801a464 <__kernel_rem_pio2+0x2ac>
 801a652:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801a656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a65a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801a65e:	f7e5 ffcb 	bl	80005f8 <__aeabi_dmul>
 801a662:	4602      	mov	r2, r0
 801a664:	460b      	mov	r3, r1
 801a666:	4640      	mov	r0, r8
 801a668:	4649      	mov	r1, r9
 801a66a:	f7e5 fe0f 	bl	800028c <__adddf3>
 801a66e:	3701      	adds	r7, #1
 801a670:	4680      	mov	r8, r0
 801a672:	4689      	mov	r9, r1
 801a674:	9b04      	ldr	r3, [sp, #16]
 801a676:	429f      	cmp	r7, r3
 801a678:	dc01      	bgt.n	801a67e <__kernel_rem_pio2+0x4c6>
 801a67a:	45ba      	cmp	sl, r7
 801a67c:	dae9      	bge.n	801a652 <__kernel_rem_pio2+0x49a>
 801a67e:	ab4a      	add	r3, sp, #296	; 0x128
 801a680:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a684:	e9c3 8900 	strd	r8, r9, [r3]
 801a688:	f10a 0a01 	add.w	sl, sl, #1
 801a68c:	3e08      	subs	r6, #8
 801a68e:	e6f0      	b.n	801a472 <__kernel_rem_pio2+0x2ba>
 801a690:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801a692:	2b03      	cmp	r3, #3
 801a694:	d85b      	bhi.n	801a74e <__kernel_rem_pio2+0x596>
 801a696:	e8df f003 	tbb	[pc, r3]
 801a69a:	264a      	.short	0x264a
 801a69c:	0226      	.short	0x0226
 801a69e:	ab9a      	add	r3, sp, #616	; 0x268
 801a6a0:	441c      	add	r4, r3
 801a6a2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801a6a6:	46a2      	mov	sl, r4
 801a6a8:	46ab      	mov	fp, r5
 801a6aa:	f1bb 0f00 	cmp.w	fp, #0
 801a6ae:	dc6c      	bgt.n	801a78a <__kernel_rem_pio2+0x5d2>
 801a6b0:	46a2      	mov	sl, r4
 801a6b2:	46ab      	mov	fp, r5
 801a6b4:	f1bb 0f01 	cmp.w	fp, #1
 801a6b8:	f300 8086 	bgt.w	801a7c8 <__kernel_rem_pio2+0x610>
 801a6bc:	2000      	movs	r0, #0
 801a6be:	2100      	movs	r1, #0
 801a6c0:	2d01      	cmp	r5, #1
 801a6c2:	f300 80a0 	bgt.w	801a806 <__kernel_rem_pio2+0x64e>
 801a6c6:	9b02      	ldr	r3, [sp, #8]
 801a6c8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801a6cc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 801a6d0:	2b00      	cmp	r3, #0
 801a6d2:	f040 809e 	bne.w	801a812 <__kernel_rem_pio2+0x65a>
 801a6d6:	9b01      	ldr	r3, [sp, #4]
 801a6d8:	e9c3 7800 	strd	r7, r8, [r3]
 801a6dc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801a6e0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801a6e4:	e033      	b.n	801a74e <__kernel_rem_pio2+0x596>
 801a6e6:	3408      	adds	r4, #8
 801a6e8:	ab4a      	add	r3, sp, #296	; 0x128
 801a6ea:	441c      	add	r4, r3
 801a6ec:	462e      	mov	r6, r5
 801a6ee:	2000      	movs	r0, #0
 801a6f0:	2100      	movs	r1, #0
 801a6f2:	2e00      	cmp	r6, #0
 801a6f4:	da3a      	bge.n	801a76c <__kernel_rem_pio2+0x5b4>
 801a6f6:	9b02      	ldr	r3, [sp, #8]
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	d03d      	beq.n	801a778 <__kernel_rem_pio2+0x5c0>
 801a6fc:	4602      	mov	r2, r0
 801a6fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a702:	9c01      	ldr	r4, [sp, #4]
 801a704:	e9c4 2300 	strd	r2, r3, [r4]
 801a708:	4602      	mov	r2, r0
 801a70a:	460b      	mov	r3, r1
 801a70c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801a710:	f7e5 fdba 	bl	8000288 <__aeabi_dsub>
 801a714:	ae4c      	add	r6, sp, #304	; 0x130
 801a716:	2401      	movs	r4, #1
 801a718:	42a5      	cmp	r5, r4
 801a71a:	da30      	bge.n	801a77e <__kernel_rem_pio2+0x5c6>
 801a71c:	9b02      	ldr	r3, [sp, #8]
 801a71e:	b113      	cbz	r3, 801a726 <__kernel_rem_pio2+0x56e>
 801a720:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a724:	4619      	mov	r1, r3
 801a726:	9b01      	ldr	r3, [sp, #4]
 801a728:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801a72c:	e00f      	b.n	801a74e <__kernel_rem_pio2+0x596>
 801a72e:	ab9a      	add	r3, sp, #616	; 0x268
 801a730:	441c      	add	r4, r3
 801a732:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801a736:	2000      	movs	r0, #0
 801a738:	2100      	movs	r1, #0
 801a73a:	2d00      	cmp	r5, #0
 801a73c:	da10      	bge.n	801a760 <__kernel_rem_pio2+0x5a8>
 801a73e:	9b02      	ldr	r3, [sp, #8]
 801a740:	b113      	cbz	r3, 801a748 <__kernel_rem_pio2+0x590>
 801a742:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a746:	4619      	mov	r1, r3
 801a748:	9b01      	ldr	r3, [sp, #4]
 801a74a:	e9c3 0100 	strd	r0, r1, [r3]
 801a74e:	9b06      	ldr	r3, [sp, #24]
 801a750:	f003 0007 	and.w	r0, r3, #7
 801a754:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801a758:	ecbd 8b02 	vpop	{d8}
 801a75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a760:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a764:	f7e5 fd92 	bl	800028c <__adddf3>
 801a768:	3d01      	subs	r5, #1
 801a76a:	e7e6      	b.n	801a73a <__kernel_rem_pio2+0x582>
 801a76c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a770:	f7e5 fd8c 	bl	800028c <__adddf3>
 801a774:	3e01      	subs	r6, #1
 801a776:	e7bc      	b.n	801a6f2 <__kernel_rem_pio2+0x53a>
 801a778:	4602      	mov	r2, r0
 801a77a:	460b      	mov	r3, r1
 801a77c:	e7c1      	b.n	801a702 <__kernel_rem_pio2+0x54a>
 801a77e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801a782:	f7e5 fd83 	bl	800028c <__adddf3>
 801a786:	3401      	adds	r4, #1
 801a788:	e7c6      	b.n	801a718 <__kernel_rem_pio2+0x560>
 801a78a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801a78e:	ed3a 7b02 	vldmdb	sl!, {d7}
 801a792:	4640      	mov	r0, r8
 801a794:	ec53 2b17 	vmov	r2, r3, d7
 801a798:	4649      	mov	r1, r9
 801a79a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801a79e:	f7e5 fd75 	bl	800028c <__adddf3>
 801a7a2:	4602      	mov	r2, r0
 801a7a4:	460b      	mov	r3, r1
 801a7a6:	4606      	mov	r6, r0
 801a7a8:	460f      	mov	r7, r1
 801a7aa:	4640      	mov	r0, r8
 801a7ac:	4649      	mov	r1, r9
 801a7ae:	f7e5 fd6b 	bl	8000288 <__aeabi_dsub>
 801a7b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a7b6:	f7e5 fd69 	bl	800028c <__adddf3>
 801a7ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a7be:	e9ca 0100 	strd	r0, r1, [sl]
 801a7c2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801a7c6:	e770      	b.n	801a6aa <__kernel_rem_pio2+0x4f2>
 801a7c8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801a7cc:	ed3a 7b02 	vldmdb	sl!, {d7}
 801a7d0:	4630      	mov	r0, r6
 801a7d2:	ec53 2b17 	vmov	r2, r3, d7
 801a7d6:	4639      	mov	r1, r7
 801a7d8:	ed8d 7b04 	vstr	d7, [sp, #16]
 801a7dc:	f7e5 fd56 	bl	800028c <__adddf3>
 801a7e0:	4602      	mov	r2, r0
 801a7e2:	460b      	mov	r3, r1
 801a7e4:	4680      	mov	r8, r0
 801a7e6:	4689      	mov	r9, r1
 801a7e8:	4630      	mov	r0, r6
 801a7ea:	4639      	mov	r1, r7
 801a7ec:	f7e5 fd4c 	bl	8000288 <__aeabi_dsub>
 801a7f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a7f4:	f7e5 fd4a 	bl	800028c <__adddf3>
 801a7f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a7fc:	e9ca 0100 	strd	r0, r1, [sl]
 801a800:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801a804:	e756      	b.n	801a6b4 <__kernel_rem_pio2+0x4fc>
 801a806:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a80a:	f7e5 fd3f 	bl	800028c <__adddf3>
 801a80e:	3d01      	subs	r5, #1
 801a810:	e756      	b.n	801a6c0 <__kernel_rem_pio2+0x508>
 801a812:	9b01      	ldr	r3, [sp, #4]
 801a814:	9a01      	ldr	r2, [sp, #4]
 801a816:	601f      	str	r7, [r3, #0]
 801a818:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801a81c:	605c      	str	r4, [r3, #4]
 801a81e:	609d      	str	r5, [r3, #8]
 801a820:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801a824:	60d3      	str	r3, [r2, #12]
 801a826:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a82a:	6110      	str	r0, [r2, #16]
 801a82c:	6153      	str	r3, [r2, #20]
 801a82e:	e78e      	b.n	801a74e <__kernel_rem_pio2+0x596>
 801a830:	41700000 	.word	0x41700000
 801a834:	3e700000 	.word	0x3e700000

0801a838 <__kernel_sin>:
 801a838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a83c:	ec55 4b10 	vmov	r4, r5, d0
 801a840:	b085      	sub	sp, #20
 801a842:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a846:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801a84a:	ed8d 1b00 	vstr	d1, [sp]
 801a84e:	9002      	str	r0, [sp, #8]
 801a850:	da06      	bge.n	801a860 <__kernel_sin+0x28>
 801a852:	ee10 0a10 	vmov	r0, s0
 801a856:	4629      	mov	r1, r5
 801a858:	f7e6 f97e 	bl	8000b58 <__aeabi_d2iz>
 801a85c:	2800      	cmp	r0, #0
 801a85e:	d051      	beq.n	801a904 <__kernel_sin+0xcc>
 801a860:	4622      	mov	r2, r4
 801a862:	462b      	mov	r3, r5
 801a864:	4620      	mov	r0, r4
 801a866:	4629      	mov	r1, r5
 801a868:	f7e5 fec6 	bl	80005f8 <__aeabi_dmul>
 801a86c:	4682      	mov	sl, r0
 801a86e:	468b      	mov	fp, r1
 801a870:	4602      	mov	r2, r0
 801a872:	460b      	mov	r3, r1
 801a874:	4620      	mov	r0, r4
 801a876:	4629      	mov	r1, r5
 801a878:	f7e5 febe 	bl	80005f8 <__aeabi_dmul>
 801a87c:	a341      	add	r3, pc, #260	; (adr r3, 801a984 <__kernel_sin+0x14c>)
 801a87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a882:	4680      	mov	r8, r0
 801a884:	4689      	mov	r9, r1
 801a886:	4650      	mov	r0, sl
 801a888:	4659      	mov	r1, fp
 801a88a:	f7e5 feb5 	bl	80005f8 <__aeabi_dmul>
 801a88e:	a33f      	add	r3, pc, #252	; (adr r3, 801a98c <__kernel_sin+0x154>)
 801a890:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a894:	f7e5 fcf8 	bl	8000288 <__aeabi_dsub>
 801a898:	4652      	mov	r2, sl
 801a89a:	465b      	mov	r3, fp
 801a89c:	f7e5 feac 	bl	80005f8 <__aeabi_dmul>
 801a8a0:	a33c      	add	r3, pc, #240	; (adr r3, 801a994 <__kernel_sin+0x15c>)
 801a8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8a6:	f7e5 fcf1 	bl	800028c <__adddf3>
 801a8aa:	4652      	mov	r2, sl
 801a8ac:	465b      	mov	r3, fp
 801a8ae:	f7e5 fea3 	bl	80005f8 <__aeabi_dmul>
 801a8b2:	a33a      	add	r3, pc, #232	; (adr r3, 801a99c <__kernel_sin+0x164>)
 801a8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8b8:	f7e5 fce6 	bl	8000288 <__aeabi_dsub>
 801a8bc:	4652      	mov	r2, sl
 801a8be:	465b      	mov	r3, fp
 801a8c0:	f7e5 fe9a 	bl	80005f8 <__aeabi_dmul>
 801a8c4:	a337      	add	r3, pc, #220	; (adr r3, 801a9a4 <__kernel_sin+0x16c>)
 801a8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8ca:	f7e5 fcdf 	bl	800028c <__adddf3>
 801a8ce:	9b02      	ldr	r3, [sp, #8]
 801a8d0:	4606      	mov	r6, r0
 801a8d2:	460f      	mov	r7, r1
 801a8d4:	b9db      	cbnz	r3, 801a90e <__kernel_sin+0xd6>
 801a8d6:	4602      	mov	r2, r0
 801a8d8:	460b      	mov	r3, r1
 801a8da:	4650      	mov	r0, sl
 801a8dc:	4659      	mov	r1, fp
 801a8de:	f7e5 fe8b 	bl	80005f8 <__aeabi_dmul>
 801a8e2:	a325      	add	r3, pc, #148	; (adr r3, 801a978 <__kernel_sin+0x140>)
 801a8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8e8:	f7e5 fcce 	bl	8000288 <__aeabi_dsub>
 801a8ec:	4642      	mov	r2, r8
 801a8ee:	464b      	mov	r3, r9
 801a8f0:	f7e5 fe82 	bl	80005f8 <__aeabi_dmul>
 801a8f4:	4602      	mov	r2, r0
 801a8f6:	460b      	mov	r3, r1
 801a8f8:	4620      	mov	r0, r4
 801a8fa:	4629      	mov	r1, r5
 801a8fc:	f7e5 fcc6 	bl	800028c <__adddf3>
 801a900:	4604      	mov	r4, r0
 801a902:	460d      	mov	r5, r1
 801a904:	ec45 4b10 	vmov	d0, r4, r5
 801a908:	b005      	add	sp, #20
 801a90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a90e:	2200      	movs	r2, #0
 801a910:	4b1b      	ldr	r3, [pc, #108]	; (801a980 <__kernel_sin+0x148>)
 801a912:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a916:	f7e5 fe6f 	bl	80005f8 <__aeabi_dmul>
 801a91a:	4632      	mov	r2, r6
 801a91c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a920:	463b      	mov	r3, r7
 801a922:	4640      	mov	r0, r8
 801a924:	4649      	mov	r1, r9
 801a926:	f7e5 fe67 	bl	80005f8 <__aeabi_dmul>
 801a92a:	4602      	mov	r2, r0
 801a92c:	460b      	mov	r3, r1
 801a92e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a932:	f7e5 fca9 	bl	8000288 <__aeabi_dsub>
 801a936:	4652      	mov	r2, sl
 801a938:	465b      	mov	r3, fp
 801a93a:	f7e5 fe5d 	bl	80005f8 <__aeabi_dmul>
 801a93e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a942:	f7e5 fca1 	bl	8000288 <__aeabi_dsub>
 801a946:	a30c      	add	r3, pc, #48	; (adr r3, 801a978 <__kernel_sin+0x140>)
 801a948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a94c:	4606      	mov	r6, r0
 801a94e:	460f      	mov	r7, r1
 801a950:	4640      	mov	r0, r8
 801a952:	4649      	mov	r1, r9
 801a954:	f7e5 fe50 	bl	80005f8 <__aeabi_dmul>
 801a958:	4602      	mov	r2, r0
 801a95a:	460b      	mov	r3, r1
 801a95c:	4630      	mov	r0, r6
 801a95e:	4639      	mov	r1, r7
 801a960:	f7e5 fc94 	bl	800028c <__adddf3>
 801a964:	4602      	mov	r2, r0
 801a966:	460b      	mov	r3, r1
 801a968:	4620      	mov	r0, r4
 801a96a:	4629      	mov	r1, r5
 801a96c:	f7e5 fc8c 	bl	8000288 <__aeabi_dsub>
 801a970:	e7c6      	b.n	801a900 <__kernel_sin+0xc8>
 801a972:	bf00      	nop
 801a974:	f3af 8000 	nop.w
 801a978:	55555549 	.word	0x55555549
 801a97c:	3fc55555 	.word	0x3fc55555
 801a980:	3fe00000 	.word	0x3fe00000
 801a984:	5acfd57c 	.word	0x5acfd57c
 801a988:	3de5d93a 	.word	0x3de5d93a
 801a98c:	8a2b9ceb 	.word	0x8a2b9ceb
 801a990:	3e5ae5e6 	.word	0x3e5ae5e6
 801a994:	57b1fe7d 	.word	0x57b1fe7d
 801a998:	3ec71de3 	.word	0x3ec71de3
 801a99c:	19c161d5 	.word	0x19c161d5
 801a9a0:	3f2a01a0 	.word	0x3f2a01a0
 801a9a4:	1110f8a6 	.word	0x1110f8a6
 801a9a8:	3f811111 	.word	0x3f811111
 801a9ac:	00000000 	.word	0x00000000

0801a9b0 <atan>:
 801a9b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9b4:	ec55 4b10 	vmov	r4, r5, d0
 801a9b8:	4bc3      	ldr	r3, [pc, #780]	; (801acc8 <atan+0x318>)
 801a9ba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a9be:	429e      	cmp	r6, r3
 801a9c0:	46ab      	mov	fp, r5
 801a9c2:	dd18      	ble.n	801a9f6 <atan+0x46>
 801a9c4:	4bc1      	ldr	r3, [pc, #772]	; (801accc <atan+0x31c>)
 801a9c6:	429e      	cmp	r6, r3
 801a9c8:	dc01      	bgt.n	801a9ce <atan+0x1e>
 801a9ca:	d109      	bne.n	801a9e0 <atan+0x30>
 801a9cc:	b144      	cbz	r4, 801a9e0 <atan+0x30>
 801a9ce:	4622      	mov	r2, r4
 801a9d0:	462b      	mov	r3, r5
 801a9d2:	4620      	mov	r0, r4
 801a9d4:	4629      	mov	r1, r5
 801a9d6:	f7e5 fc59 	bl	800028c <__adddf3>
 801a9da:	4604      	mov	r4, r0
 801a9dc:	460d      	mov	r5, r1
 801a9de:	e006      	b.n	801a9ee <atan+0x3e>
 801a9e0:	f1bb 0f00 	cmp.w	fp, #0
 801a9e4:	f340 8131 	ble.w	801ac4a <atan+0x29a>
 801a9e8:	a59b      	add	r5, pc, #620	; (adr r5, 801ac58 <atan+0x2a8>)
 801a9ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a9ee:	ec45 4b10 	vmov	d0, r4, r5
 801a9f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9f6:	4bb6      	ldr	r3, [pc, #728]	; (801acd0 <atan+0x320>)
 801a9f8:	429e      	cmp	r6, r3
 801a9fa:	dc14      	bgt.n	801aa26 <atan+0x76>
 801a9fc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801aa00:	429e      	cmp	r6, r3
 801aa02:	dc0d      	bgt.n	801aa20 <atan+0x70>
 801aa04:	a396      	add	r3, pc, #600	; (adr r3, 801ac60 <atan+0x2b0>)
 801aa06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa0a:	ee10 0a10 	vmov	r0, s0
 801aa0e:	4629      	mov	r1, r5
 801aa10:	f7e5 fc3c 	bl	800028c <__adddf3>
 801aa14:	2200      	movs	r2, #0
 801aa16:	4baf      	ldr	r3, [pc, #700]	; (801acd4 <atan+0x324>)
 801aa18:	f7e6 f87e 	bl	8000b18 <__aeabi_dcmpgt>
 801aa1c:	2800      	cmp	r0, #0
 801aa1e:	d1e6      	bne.n	801a9ee <atan+0x3e>
 801aa20:	f04f 3aff 	mov.w	sl, #4294967295
 801aa24:	e02b      	b.n	801aa7e <atan+0xce>
 801aa26:	f000 f963 	bl	801acf0 <fabs>
 801aa2a:	4bab      	ldr	r3, [pc, #684]	; (801acd8 <atan+0x328>)
 801aa2c:	429e      	cmp	r6, r3
 801aa2e:	ec55 4b10 	vmov	r4, r5, d0
 801aa32:	f300 80bf 	bgt.w	801abb4 <atan+0x204>
 801aa36:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801aa3a:	429e      	cmp	r6, r3
 801aa3c:	f300 80a0 	bgt.w	801ab80 <atan+0x1d0>
 801aa40:	ee10 2a10 	vmov	r2, s0
 801aa44:	ee10 0a10 	vmov	r0, s0
 801aa48:	462b      	mov	r3, r5
 801aa4a:	4629      	mov	r1, r5
 801aa4c:	f7e5 fc1e 	bl	800028c <__adddf3>
 801aa50:	2200      	movs	r2, #0
 801aa52:	4ba0      	ldr	r3, [pc, #640]	; (801acd4 <atan+0x324>)
 801aa54:	f7e5 fc18 	bl	8000288 <__aeabi_dsub>
 801aa58:	2200      	movs	r2, #0
 801aa5a:	4606      	mov	r6, r0
 801aa5c:	460f      	mov	r7, r1
 801aa5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801aa62:	4620      	mov	r0, r4
 801aa64:	4629      	mov	r1, r5
 801aa66:	f7e5 fc11 	bl	800028c <__adddf3>
 801aa6a:	4602      	mov	r2, r0
 801aa6c:	460b      	mov	r3, r1
 801aa6e:	4630      	mov	r0, r6
 801aa70:	4639      	mov	r1, r7
 801aa72:	f7e5 feeb 	bl	800084c <__aeabi_ddiv>
 801aa76:	f04f 0a00 	mov.w	sl, #0
 801aa7a:	4604      	mov	r4, r0
 801aa7c:	460d      	mov	r5, r1
 801aa7e:	4622      	mov	r2, r4
 801aa80:	462b      	mov	r3, r5
 801aa82:	4620      	mov	r0, r4
 801aa84:	4629      	mov	r1, r5
 801aa86:	f7e5 fdb7 	bl	80005f8 <__aeabi_dmul>
 801aa8a:	4602      	mov	r2, r0
 801aa8c:	460b      	mov	r3, r1
 801aa8e:	4680      	mov	r8, r0
 801aa90:	4689      	mov	r9, r1
 801aa92:	f7e5 fdb1 	bl	80005f8 <__aeabi_dmul>
 801aa96:	a374      	add	r3, pc, #464	; (adr r3, 801ac68 <atan+0x2b8>)
 801aa98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa9c:	4606      	mov	r6, r0
 801aa9e:	460f      	mov	r7, r1
 801aaa0:	f7e5 fdaa 	bl	80005f8 <__aeabi_dmul>
 801aaa4:	a372      	add	r3, pc, #456	; (adr r3, 801ac70 <atan+0x2c0>)
 801aaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaaa:	f7e5 fbef 	bl	800028c <__adddf3>
 801aaae:	4632      	mov	r2, r6
 801aab0:	463b      	mov	r3, r7
 801aab2:	f7e5 fda1 	bl	80005f8 <__aeabi_dmul>
 801aab6:	a370      	add	r3, pc, #448	; (adr r3, 801ac78 <atan+0x2c8>)
 801aab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aabc:	f7e5 fbe6 	bl	800028c <__adddf3>
 801aac0:	4632      	mov	r2, r6
 801aac2:	463b      	mov	r3, r7
 801aac4:	f7e5 fd98 	bl	80005f8 <__aeabi_dmul>
 801aac8:	a36d      	add	r3, pc, #436	; (adr r3, 801ac80 <atan+0x2d0>)
 801aaca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aace:	f7e5 fbdd 	bl	800028c <__adddf3>
 801aad2:	4632      	mov	r2, r6
 801aad4:	463b      	mov	r3, r7
 801aad6:	f7e5 fd8f 	bl	80005f8 <__aeabi_dmul>
 801aada:	a36b      	add	r3, pc, #428	; (adr r3, 801ac88 <atan+0x2d8>)
 801aadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aae0:	f7e5 fbd4 	bl	800028c <__adddf3>
 801aae4:	4632      	mov	r2, r6
 801aae6:	463b      	mov	r3, r7
 801aae8:	f7e5 fd86 	bl	80005f8 <__aeabi_dmul>
 801aaec:	a368      	add	r3, pc, #416	; (adr r3, 801ac90 <atan+0x2e0>)
 801aaee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaf2:	f7e5 fbcb 	bl	800028c <__adddf3>
 801aaf6:	4642      	mov	r2, r8
 801aaf8:	464b      	mov	r3, r9
 801aafa:	f7e5 fd7d 	bl	80005f8 <__aeabi_dmul>
 801aafe:	a366      	add	r3, pc, #408	; (adr r3, 801ac98 <atan+0x2e8>)
 801ab00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab04:	4680      	mov	r8, r0
 801ab06:	4689      	mov	r9, r1
 801ab08:	4630      	mov	r0, r6
 801ab0a:	4639      	mov	r1, r7
 801ab0c:	f7e5 fd74 	bl	80005f8 <__aeabi_dmul>
 801ab10:	a363      	add	r3, pc, #396	; (adr r3, 801aca0 <atan+0x2f0>)
 801ab12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab16:	f7e5 fbb7 	bl	8000288 <__aeabi_dsub>
 801ab1a:	4632      	mov	r2, r6
 801ab1c:	463b      	mov	r3, r7
 801ab1e:	f7e5 fd6b 	bl	80005f8 <__aeabi_dmul>
 801ab22:	a361      	add	r3, pc, #388	; (adr r3, 801aca8 <atan+0x2f8>)
 801ab24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab28:	f7e5 fbae 	bl	8000288 <__aeabi_dsub>
 801ab2c:	4632      	mov	r2, r6
 801ab2e:	463b      	mov	r3, r7
 801ab30:	f7e5 fd62 	bl	80005f8 <__aeabi_dmul>
 801ab34:	a35e      	add	r3, pc, #376	; (adr r3, 801acb0 <atan+0x300>)
 801ab36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab3a:	f7e5 fba5 	bl	8000288 <__aeabi_dsub>
 801ab3e:	4632      	mov	r2, r6
 801ab40:	463b      	mov	r3, r7
 801ab42:	f7e5 fd59 	bl	80005f8 <__aeabi_dmul>
 801ab46:	a35c      	add	r3, pc, #368	; (adr r3, 801acb8 <atan+0x308>)
 801ab48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab4c:	f7e5 fb9c 	bl	8000288 <__aeabi_dsub>
 801ab50:	4632      	mov	r2, r6
 801ab52:	463b      	mov	r3, r7
 801ab54:	f7e5 fd50 	bl	80005f8 <__aeabi_dmul>
 801ab58:	4602      	mov	r2, r0
 801ab5a:	460b      	mov	r3, r1
 801ab5c:	4640      	mov	r0, r8
 801ab5e:	4649      	mov	r1, r9
 801ab60:	f7e5 fb94 	bl	800028c <__adddf3>
 801ab64:	4622      	mov	r2, r4
 801ab66:	462b      	mov	r3, r5
 801ab68:	f7e5 fd46 	bl	80005f8 <__aeabi_dmul>
 801ab6c:	f1ba 3fff 	cmp.w	sl, #4294967295
 801ab70:	4602      	mov	r2, r0
 801ab72:	460b      	mov	r3, r1
 801ab74:	d14b      	bne.n	801ac0e <atan+0x25e>
 801ab76:	4620      	mov	r0, r4
 801ab78:	4629      	mov	r1, r5
 801ab7a:	f7e5 fb85 	bl	8000288 <__aeabi_dsub>
 801ab7e:	e72c      	b.n	801a9da <atan+0x2a>
 801ab80:	ee10 0a10 	vmov	r0, s0
 801ab84:	2200      	movs	r2, #0
 801ab86:	4b53      	ldr	r3, [pc, #332]	; (801acd4 <atan+0x324>)
 801ab88:	4629      	mov	r1, r5
 801ab8a:	f7e5 fb7d 	bl	8000288 <__aeabi_dsub>
 801ab8e:	2200      	movs	r2, #0
 801ab90:	4606      	mov	r6, r0
 801ab92:	460f      	mov	r7, r1
 801ab94:	4b4f      	ldr	r3, [pc, #316]	; (801acd4 <atan+0x324>)
 801ab96:	4620      	mov	r0, r4
 801ab98:	4629      	mov	r1, r5
 801ab9a:	f7e5 fb77 	bl	800028c <__adddf3>
 801ab9e:	4602      	mov	r2, r0
 801aba0:	460b      	mov	r3, r1
 801aba2:	4630      	mov	r0, r6
 801aba4:	4639      	mov	r1, r7
 801aba6:	f7e5 fe51 	bl	800084c <__aeabi_ddiv>
 801abaa:	f04f 0a01 	mov.w	sl, #1
 801abae:	4604      	mov	r4, r0
 801abb0:	460d      	mov	r5, r1
 801abb2:	e764      	b.n	801aa7e <atan+0xce>
 801abb4:	4b49      	ldr	r3, [pc, #292]	; (801acdc <atan+0x32c>)
 801abb6:	429e      	cmp	r6, r3
 801abb8:	dc1d      	bgt.n	801abf6 <atan+0x246>
 801abba:	ee10 0a10 	vmov	r0, s0
 801abbe:	2200      	movs	r2, #0
 801abc0:	4b47      	ldr	r3, [pc, #284]	; (801ace0 <atan+0x330>)
 801abc2:	4629      	mov	r1, r5
 801abc4:	f7e5 fb60 	bl	8000288 <__aeabi_dsub>
 801abc8:	2200      	movs	r2, #0
 801abca:	4606      	mov	r6, r0
 801abcc:	460f      	mov	r7, r1
 801abce:	4b44      	ldr	r3, [pc, #272]	; (801ace0 <atan+0x330>)
 801abd0:	4620      	mov	r0, r4
 801abd2:	4629      	mov	r1, r5
 801abd4:	f7e5 fd10 	bl	80005f8 <__aeabi_dmul>
 801abd8:	2200      	movs	r2, #0
 801abda:	4b3e      	ldr	r3, [pc, #248]	; (801acd4 <atan+0x324>)
 801abdc:	f7e5 fb56 	bl	800028c <__adddf3>
 801abe0:	4602      	mov	r2, r0
 801abe2:	460b      	mov	r3, r1
 801abe4:	4630      	mov	r0, r6
 801abe6:	4639      	mov	r1, r7
 801abe8:	f7e5 fe30 	bl	800084c <__aeabi_ddiv>
 801abec:	f04f 0a02 	mov.w	sl, #2
 801abf0:	4604      	mov	r4, r0
 801abf2:	460d      	mov	r5, r1
 801abf4:	e743      	b.n	801aa7e <atan+0xce>
 801abf6:	462b      	mov	r3, r5
 801abf8:	ee10 2a10 	vmov	r2, s0
 801abfc:	2000      	movs	r0, #0
 801abfe:	4939      	ldr	r1, [pc, #228]	; (801ace4 <atan+0x334>)
 801ac00:	f7e5 fe24 	bl	800084c <__aeabi_ddiv>
 801ac04:	f04f 0a03 	mov.w	sl, #3
 801ac08:	4604      	mov	r4, r0
 801ac0a:	460d      	mov	r5, r1
 801ac0c:	e737      	b.n	801aa7e <atan+0xce>
 801ac0e:	4b36      	ldr	r3, [pc, #216]	; (801ace8 <atan+0x338>)
 801ac10:	4e36      	ldr	r6, [pc, #216]	; (801acec <atan+0x33c>)
 801ac12:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801ac16:	4456      	add	r6, sl
 801ac18:	449a      	add	sl, r3
 801ac1a:	e9da 2300 	ldrd	r2, r3, [sl]
 801ac1e:	f7e5 fb33 	bl	8000288 <__aeabi_dsub>
 801ac22:	4622      	mov	r2, r4
 801ac24:	462b      	mov	r3, r5
 801ac26:	f7e5 fb2f 	bl	8000288 <__aeabi_dsub>
 801ac2a:	4602      	mov	r2, r0
 801ac2c:	460b      	mov	r3, r1
 801ac2e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801ac32:	f7e5 fb29 	bl	8000288 <__aeabi_dsub>
 801ac36:	f1bb 0f00 	cmp.w	fp, #0
 801ac3a:	4604      	mov	r4, r0
 801ac3c:	460d      	mov	r5, r1
 801ac3e:	f6bf aed6 	bge.w	801a9ee <atan+0x3e>
 801ac42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ac46:	461d      	mov	r5, r3
 801ac48:	e6d1      	b.n	801a9ee <atan+0x3e>
 801ac4a:	a51d      	add	r5, pc, #116	; (adr r5, 801acc0 <atan+0x310>)
 801ac4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ac50:	e6cd      	b.n	801a9ee <atan+0x3e>
 801ac52:	bf00      	nop
 801ac54:	f3af 8000 	nop.w
 801ac58:	54442d18 	.word	0x54442d18
 801ac5c:	3ff921fb 	.word	0x3ff921fb
 801ac60:	8800759c 	.word	0x8800759c
 801ac64:	7e37e43c 	.word	0x7e37e43c
 801ac68:	e322da11 	.word	0xe322da11
 801ac6c:	3f90ad3a 	.word	0x3f90ad3a
 801ac70:	24760deb 	.word	0x24760deb
 801ac74:	3fa97b4b 	.word	0x3fa97b4b
 801ac78:	a0d03d51 	.word	0xa0d03d51
 801ac7c:	3fb10d66 	.word	0x3fb10d66
 801ac80:	c54c206e 	.word	0xc54c206e
 801ac84:	3fb745cd 	.word	0x3fb745cd
 801ac88:	920083ff 	.word	0x920083ff
 801ac8c:	3fc24924 	.word	0x3fc24924
 801ac90:	5555550d 	.word	0x5555550d
 801ac94:	3fd55555 	.word	0x3fd55555
 801ac98:	2c6a6c2f 	.word	0x2c6a6c2f
 801ac9c:	bfa2b444 	.word	0xbfa2b444
 801aca0:	52defd9a 	.word	0x52defd9a
 801aca4:	3fadde2d 	.word	0x3fadde2d
 801aca8:	af749a6d 	.word	0xaf749a6d
 801acac:	3fb3b0f2 	.word	0x3fb3b0f2
 801acb0:	fe231671 	.word	0xfe231671
 801acb4:	3fbc71c6 	.word	0x3fbc71c6
 801acb8:	9998ebc4 	.word	0x9998ebc4
 801acbc:	3fc99999 	.word	0x3fc99999
 801acc0:	54442d18 	.word	0x54442d18
 801acc4:	bff921fb 	.word	0xbff921fb
 801acc8:	440fffff 	.word	0x440fffff
 801accc:	7ff00000 	.word	0x7ff00000
 801acd0:	3fdbffff 	.word	0x3fdbffff
 801acd4:	3ff00000 	.word	0x3ff00000
 801acd8:	3ff2ffff 	.word	0x3ff2ffff
 801acdc:	40037fff 	.word	0x40037fff
 801ace0:	3ff80000 	.word	0x3ff80000
 801ace4:	bff00000 	.word	0xbff00000
 801ace8:	0801b6d0 	.word	0x0801b6d0
 801acec:	0801b6b0 	.word	0x0801b6b0

0801acf0 <fabs>:
 801acf0:	ec51 0b10 	vmov	r0, r1, d0
 801acf4:	ee10 2a10 	vmov	r2, s0
 801acf8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801acfc:	ec43 2b10 	vmov	d0, r2, r3
 801ad00:	4770      	bx	lr
 801ad02:	0000      	movs	r0, r0
 801ad04:	0000      	movs	r0, r0
	...

0801ad08 <floor>:
 801ad08:	ec51 0b10 	vmov	r0, r1, d0
 801ad0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad10:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801ad14:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801ad18:	2e13      	cmp	r6, #19
 801ad1a:	460c      	mov	r4, r1
 801ad1c:	ee10 5a10 	vmov	r5, s0
 801ad20:	4680      	mov	r8, r0
 801ad22:	dc34      	bgt.n	801ad8e <floor+0x86>
 801ad24:	2e00      	cmp	r6, #0
 801ad26:	da16      	bge.n	801ad56 <floor+0x4e>
 801ad28:	a335      	add	r3, pc, #212	; (adr r3, 801ae00 <floor+0xf8>)
 801ad2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad2e:	f7e5 faad 	bl	800028c <__adddf3>
 801ad32:	2200      	movs	r2, #0
 801ad34:	2300      	movs	r3, #0
 801ad36:	f7e5 feef 	bl	8000b18 <__aeabi_dcmpgt>
 801ad3a:	b148      	cbz	r0, 801ad50 <floor+0x48>
 801ad3c:	2c00      	cmp	r4, #0
 801ad3e:	da59      	bge.n	801adf4 <floor+0xec>
 801ad40:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801ad44:	4a30      	ldr	r2, [pc, #192]	; (801ae08 <floor+0x100>)
 801ad46:	432b      	orrs	r3, r5
 801ad48:	2500      	movs	r5, #0
 801ad4a:	42ab      	cmp	r3, r5
 801ad4c:	bf18      	it	ne
 801ad4e:	4614      	movne	r4, r2
 801ad50:	4621      	mov	r1, r4
 801ad52:	4628      	mov	r0, r5
 801ad54:	e025      	b.n	801ada2 <floor+0x9a>
 801ad56:	4f2d      	ldr	r7, [pc, #180]	; (801ae0c <floor+0x104>)
 801ad58:	4137      	asrs	r7, r6
 801ad5a:	ea01 0307 	and.w	r3, r1, r7
 801ad5e:	4303      	orrs	r3, r0
 801ad60:	d01f      	beq.n	801ada2 <floor+0x9a>
 801ad62:	a327      	add	r3, pc, #156	; (adr r3, 801ae00 <floor+0xf8>)
 801ad64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad68:	f7e5 fa90 	bl	800028c <__adddf3>
 801ad6c:	2200      	movs	r2, #0
 801ad6e:	2300      	movs	r3, #0
 801ad70:	f7e5 fed2 	bl	8000b18 <__aeabi_dcmpgt>
 801ad74:	2800      	cmp	r0, #0
 801ad76:	d0eb      	beq.n	801ad50 <floor+0x48>
 801ad78:	2c00      	cmp	r4, #0
 801ad7a:	bfbe      	ittt	lt
 801ad7c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801ad80:	fa43 f606 	asrlt.w	r6, r3, r6
 801ad84:	19a4      	addlt	r4, r4, r6
 801ad86:	ea24 0407 	bic.w	r4, r4, r7
 801ad8a:	2500      	movs	r5, #0
 801ad8c:	e7e0      	b.n	801ad50 <floor+0x48>
 801ad8e:	2e33      	cmp	r6, #51	; 0x33
 801ad90:	dd0b      	ble.n	801adaa <floor+0xa2>
 801ad92:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ad96:	d104      	bne.n	801ada2 <floor+0x9a>
 801ad98:	ee10 2a10 	vmov	r2, s0
 801ad9c:	460b      	mov	r3, r1
 801ad9e:	f7e5 fa75 	bl	800028c <__adddf3>
 801ada2:	ec41 0b10 	vmov	d0, r0, r1
 801ada6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801adaa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801adae:	f04f 33ff 	mov.w	r3, #4294967295
 801adb2:	fa23 f707 	lsr.w	r7, r3, r7
 801adb6:	4207      	tst	r7, r0
 801adb8:	d0f3      	beq.n	801ada2 <floor+0x9a>
 801adba:	a311      	add	r3, pc, #68	; (adr r3, 801ae00 <floor+0xf8>)
 801adbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adc0:	f7e5 fa64 	bl	800028c <__adddf3>
 801adc4:	2200      	movs	r2, #0
 801adc6:	2300      	movs	r3, #0
 801adc8:	f7e5 fea6 	bl	8000b18 <__aeabi_dcmpgt>
 801adcc:	2800      	cmp	r0, #0
 801adce:	d0bf      	beq.n	801ad50 <floor+0x48>
 801add0:	2c00      	cmp	r4, #0
 801add2:	da02      	bge.n	801adda <floor+0xd2>
 801add4:	2e14      	cmp	r6, #20
 801add6:	d103      	bne.n	801ade0 <floor+0xd8>
 801add8:	3401      	adds	r4, #1
 801adda:	ea25 0507 	bic.w	r5, r5, r7
 801adde:	e7b7      	b.n	801ad50 <floor+0x48>
 801ade0:	2301      	movs	r3, #1
 801ade2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ade6:	fa03 f606 	lsl.w	r6, r3, r6
 801adea:	4435      	add	r5, r6
 801adec:	4545      	cmp	r5, r8
 801adee:	bf38      	it	cc
 801adf0:	18e4      	addcc	r4, r4, r3
 801adf2:	e7f2      	b.n	801adda <floor+0xd2>
 801adf4:	2500      	movs	r5, #0
 801adf6:	462c      	mov	r4, r5
 801adf8:	e7aa      	b.n	801ad50 <floor+0x48>
 801adfa:	bf00      	nop
 801adfc:	f3af 8000 	nop.w
 801ae00:	8800759c 	.word	0x8800759c
 801ae04:	7e37e43c 	.word	0x7e37e43c
 801ae08:	bff00000 	.word	0xbff00000
 801ae0c:	000fffff 	.word	0x000fffff

0801ae10 <matherr>:
 801ae10:	2000      	movs	r0, #0
 801ae12:	4770      	bx	lr
 801ae14:	0000      	movs	r0, r0
	...

0801ae18 <scalbn>:
 801ae18:	b570      	push	{r4, r5, r6, lr}
 801ae1a:	ec55 4b10 	vmov	r4, r5, d0
 801ae1e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801ae22:	4606      	mov	r6, r0
 801ae24:	462b      	mov	r3, r5
 801ae26:	b9aa      	cbnz	r2, 801ae54 <scalbn+0x3c>
 801ae28:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801ae2c:	4323      	orrs	r3, r4
 801ae2e:	d03b      	beq.n	801aea8 <scalbn+0x90>
 801ae30:	4b31      	ldr	r3, [pc, #196]	; (801aef8 <scalbn+0xe0>)
 801ae32:	4629      	mov	r1, r5
 801ae34:	2200      	movs	r2, #0
 801ae36:	ee10 0a10 	vmov	r0, s0
 801ae3a:	f7e5 fbdd 	bl	80005f8 <__aeabi_dmul>
 801ae3e:	4b2f      	ldr	r3, [pc, #188]	; (801aefc <scalbn+0xe4>)
 801ae40:	429e      	cmp	r6, r3
 801ae42:	4604      	mov	r4, r0
 801ae44:	460d      	mov	r5, r1
 801ae46:	da12      	bge.n	801ae6e <scalbn+0x56>
 801ae48:	a327      	add	r3, pc, #156	; (adr r3, 801aee8 <scalbn+0xd0>)
 801ae4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae4e:	f7e5 fbd3 	bl	80005f8 <__aeabi_dmul>
 801ae52:	e009      	b.n	801ae68 <scalbn+0x50>
 801ae54:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801ae58:	428a      	cmp	r2, r1
 801ae5a:	d10c      	bne.n	801ae76 <scalbn+0x5e>
 801ae5c:	ee10 2a10 	vmov	r2, s0
 801ae60:	4620      	mov	r0, r4
 801ae62:	4629      	mov	r1, r5
 801ae64:	f7e5 fa12 	bl	800028c <__adddf3>
 801ae68:	4604      	mov	r4, r0
 801ae6a:	460d      	mov	r5, r1
 801ae6c:	e01c      	b.n	801aea8 <scalbn+0x90>
 801ae6e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801ae72:	460b      	mov	r3, r1
 801ae74:	3a36      	subs	r2, #54	; 0x36
 801ae76:	4432      	add	r2, r6
 801ae78:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801ae7c:	428a      	cmp	r2, r1
 801ae7e:	dd0b      	ble.n	801ae98 <scalbn+0x80>
 801ae80:	ec45 4b11 	vmov	d1, r4, r5
 801ae84:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801aef0 <scalbn+0xd8>
 801ae88:	f000 f83c 	bl	801af04 <copysign>
 801ae8c:	a318      	add	r3, pc, #96	; (adr r3, 801aef0 <scalbn+0xd8>)
 801ae8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae92:	ec51 0b10 	vmov	r0, r1, d0
 801ae96:	e7da      	b.n	801ae4e <scalbn+0x36>
 801ae98:	2a00      	cmp	r2, #0
 801ae9a:	dd08      	ble.n	801aeae <scalbn+0x96>
 801ae9c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801aea0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801aea4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801aea8:	ec45 4b10 	vmov	d0, r4, r5
 801aeac:	bd70      	pop	{r4, r5, r6, pc}
 801aeae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801aeb2:	da0d      	bge.n	801aed0 <scalbn+0xb8>
 801aeb4:	f24c 3350 	movw	r3, #50000	; 0xc350
 801aeb8:	429e      	cmp	r6, r3
 801aeba:	ec45 4b11 	vmov	d1, r4, r5
 801aebe:	dce1      	bgt.n	801ae84 <scalbn+0x6c>
 801aec0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801aee8 <scalbn+0xd0>
 801aec4:	f000 f81e 	bl	801af04 <copysign>
 801aec8:	a307      	add	r3, pc, #28	; (adr r3, 801aee8 <scalbn+0xd0>)
 801aeca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aece:	e7e0      	b.n	801ae92 <scalbn+0x7a>
 801aed0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801aed4:	3236      	adds	r2, #54	; 0x36
 801aed6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801aeda:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801aede:	4620      	mov	r0, r4
 801aee0:	4629      	mov	r1, r5
 801aee2:	2200      	movs	r2, #0
 801aee4:	4b06      	ldr	r3, [pc, #24]	; (801af00 <scalbn+0xe8>)
 801aee6:	e7b2      	b.n	801ae4e <scalbn+0x36>
 801aee8:	c2f8f359 	.word	0xc2f8f359
 801aeec:	01a56e1f 	.word	0x01a56e1f
 801aef0:	8800759c 	.word	0x8800759c
 801aef4:	7e37e43c 	.word	0x7e37e43c
 801aef8:	43500000 	.word	0x43500000
 801aefc:	ffff3cb0 	.word	0xffff3cb0
 801af00:	3c900000 	.word	0x3c900000

0801af04 <copysign>:
 801af04:	ec51 0b10 	vmov	r0, r1, d0
 801af08:	ee11 0a90 	vmov	r0, s3
 801af0c:	ee10 2a10 	vmov	r2, s0
 801af10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801af14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801af18:	ea41 0300 	orr.w	r3, r1, r0
 801af1c:	ec43 2b10 	vmov	d0, r2, r3
 801af20:	4770      	bx	lr
	...

0801af24 <_init>:
 801af24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af26:	bf00      	nop
 801af28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801af2a:	bc08      	pop	{r3}
 801af2c:	469e      	mov	lr, r3
 801af2e:	4770      	bx	lr

0801af30 <_fini>:
 801af30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af32:	bf00      	nop
 801af34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801af36:	bc08      	pop	{r3}
 801af38:	469e      	mov	lr, r3
 801af3a:	4770      	bx	lr
