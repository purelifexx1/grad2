
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c08c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f0  0801c220  0801c220  0002c220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cc10  0801cc10  000343e8  2**0
                  CONTENTS
  4 .ARM          00000008  0801cc10  0801cc10  0002cc10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cc18  0801cc18  000343e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cc18  0801cc18  0002cc18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cc1c  0801cc1c  0002cc1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000043e8  20000000  0801cc20  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d7a4  200043e8  08021008  000343e8  2**3
                  ALLOC
 10 ._user_heap_stack 000063c4  20011b8c  08021008  00041b8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000343e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035e03  00000000  00000000  00034418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007154  00000000  00000000  0006a21b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e90  00000000  00000000  00071370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c50  00000000  00000000  00073200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aefe  00000000  00000000  00074e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000292c0  00000000  00000000  0009fd4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df2aa  00000000  00000000  000c900e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a82b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096c0  00000000  00000000  001a830c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200043e8 	.word	0x200043e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801c204 	.word	0x0801c204

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200043ec 	.word	0x200043ec
 80001cc:	0801c204 	.word	0x0801c204

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <packetRead>:
Position_DataType position_type;
SCARA_Gcode_Cor_TypeDef	Gcode_Cor[1000];
uint16_t point_counter = 0, current_clutch_index = 0;
uint8_t step_status;
Robot_CommandTypedef pnp_move_option;
Robot_CommandTypedef 	packetRead	(uint8_t *message, int32_t length, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08e      	sub	sp, #56	; 0x38
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	603b      	str	r3, [r7, #0]
	Transfer_Protocol protocol_id = message[0];
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    duty_cmd->id_command = message[1];
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3301      	adds	r3, #1
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	609a      	str	r2, [r3, #8]
	int32_t temp_pointer = 2;
 8001012:	2302      	movs	r3, #2
 8001014:	637b      	str	r3, [r7, #52]	; 0x34
    switch(protocol_id) 
 8001016:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800101a:	2b00      	cmp	r3, #0
 800101c:	d004      	beq.n	8001028 <packetRead+0x38>
 800101e:	2b01      	cmp	r3, #1
 8001020:	f000 8212 	beq.w	8001448 <packetRead+0x458>
 8001024:	f001 b84b 	b.w	80020be <packetRead+0x10ce>
    {
        // reserved for Gcode file transfer
        case FILE_TRANSMISION:
        {
        	temp_pointer = 1;
 8001028:	2301      	movs	r3, #1
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
        	uint16_t timeout_value = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	867b      	strh	r3, [r7, #50]	; 0x32
        	do {
        		Gcode_Packet_Command_TypeDef move_type 	= message[temp_pointer] & 0x0f;
 8001030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	4413      	add	r3, r2
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	f003 030f 	and.w	r3, r3, #15
 800103c:	763b      	strb	r3, [r7, #24]
				switch (move_type){
 800103e:	7e3b      	ldrb	r3, [r7, #24]
 8001040:	2b05      	cmp	r3, #5
 8001042:	f200 81f0 	bhi.w	8001426 <packetRead+0x436>
 8001046:	a201      	add	r2, pc, #4	; (adr r2, 800104c <packetRead+0x5c>)
 8001048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104c:	08001065 	.word	0x08001065
 8001050:	0800117d 	.word	0x0800117d
 8001054:	08001427 	.word	0x08001427
 8001058:	080012c9 	.word	0x080012c9
 800105c:	080012c9 	.word	0x080012c9
 8001060:	080010ff 	.word	0x080010ff
				case FIRST_PACKET:{
					Gcode_Mode = message[temp_pointer++] >> 4 & 0x0f;
 8001064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	637a      	str	r2, [r7, #52]	; 0x34
 800106a:	461a      	mov	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	091b      	lsrs	r3, r3, #4
 8001074:	b2db      	uxtb	r3, r3
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	b2da      	uxtb	r2, r3
 800107c:	4b88      	ldr	r3, [pc, #544]	; (80012a0 <packetRead+0x2b0>)
 800107e:	701a      	strb	r2, [r3, #0]
//					if(Gcode_Mode == GCODE_LINEAR){
//						bezier_wc = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
//					}
					down_z_height = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 8001080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	4413      	add	r3, r2
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fa4b 	bl	8000524 <__aeabi_i2d>
 800108e:	a382      	add	r3, pc, #520	; (adr r3, 8001298 <packetRead+0x2a8>)
 8001090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001094:	f7ff fab0 	bl	80005f8 <__aeabi_dmul>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4981      	ldr	r1, [pc, #516]	; (80012a4 <packetRead+0x2b4>)
 800109e:	e9c1 2300 	strd	r2, r3, [r1]
 80010a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010a4:	3304      	adds	r3, #4
 80010a6:	637b      	str	r3, [r7, #52]	; 0x34
					up_z_height   = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 80010a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	4413      	add	r3, r2
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fa37 	bl	8000524 <__aeabi_i2d>
 80010b6:	a378      	add	r3, pc, #480	; (adr r3, 8001298 <packetRead+0x2a8>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff fa9c 	bl	80005f8 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4978      	ldr	r1, [pc, #480]	; (80012a8 <packetRead+0x2b8>)
 80010c6:	e9c1 2300 	strd	r2, r3, [r1]
 80010ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010cc:	3304      	adds	r3, #4
 80010ce:	637b      	str	r3, [r7, #52]	; 0x34
					total_num_of_point = B2I(temp_pointer);						 temp_pointer+=4;
 80010d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	4413      	add	r3, r2
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a74      	ldr	r2, [pc, #464]	; (80012ac <packetRead+0x2bc>)
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010de:	3304      	adds	r3, #4
 80010e0:	637b      	str	r3, [r7, #52]	; 0x34
					point_counter = 0;
 80010e2:	4b73      	ldr	r3, [pc, #460]	; (80012b0 <packetRead+0x2c0>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	801a      	strh	r2, [r3, #0]
					current_clutch_index = 0;
 80010e8:	4b72      	ldr	r3, [pc, #456]	; (80012b4 <packetRead+0x2c4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	801a      	strh	r2, [r3, #0]
					pre_clutch_index = -1;
 80010ee:	4b72      	ldr	r3, [pc, #456]	; (80012b8 <packetRead+0x2c8>)
 80010f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f4:	801a      	strh	r2, [r3, #0]
					pre_height = UP_Z;
 80010f6:	4b71      	ldr	r3, [pc, #452]	; (80012bc <packetRead+0x2cc>)
 80010f8:	2206      	movs	r2, #6
 80010fa:	701a      	strb	r2, [r3, #0]
				}
				break;
 80010fc:	e193      	b.n	8001426 <packetRead+0x436>
				case CLUTCH_HEADER_TYPE:{
					temp_pointer++;
 80010fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001100:	3301      	adds	r3, #1
 8001102:	637b      	str	r3, [r7, #52]	; 0x34
					gcode_clutch_configure[current_clutch_index].total_s     = B2I(temp_pointer); temp_pointer+=4;
 8001104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	4413      	add	r3, r2
 800110a:	4a6a      	ldr	r2, [pc, #424]	; (80012b4 <packetRead+0x2c4>)
 800110c:	8812      	ldrh	r2, [r2, #0]
 800110e:	4610      	mov	r0, r2
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	496b      	ldr	r1, [pc, #428]	; (80012c0 <packetRead+0x2d0>)
 8001114:	4603      	mov	r3, r0
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4403      	add	r3, r0
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	440b      	add	r3, r1
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001122:	3304      	adds	r3, #4
 8001124:	637b      	str	r3, [r7, #52]	; 0x34
					gcode_clutch_configure[current_clutch_index].veloc 	     = B2I(temp_pointer); temp_pointer+=4;
 8001126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	4a61      	ldr	r2, [pc, #388]	; (80012b4 <packetRead+0x2c4>)
 800112e:	8812      	ldrh	r2, [r2, #0]
 8001130:	4610      	mov	r0, r2
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4962      	ldr	r1, [pc, #392]	; (80012c0 <packetRead+0x2d0>)
 8001136:	4603      	mov	r3, r0
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	4403      	add	r3, r0
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	440b      	add	r3, r1
 8001140:	3304      	adds	r3, #4
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001146:	3304      	adds	r3, #4
 8001148:	637b      	str	r3, [r7, #52]	; 0x34
					gcode_clutch_configure[current_clutch_index].Depth_Feed  = B2I(temp_pointer); temp_pointer+=4;
 800114a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	4a58      	ldr	r2, [pc, #352]	; (80012b4 <packetRead+0x2c4>)
 8001152:	8812      	ldrh	r2, [r2, #0]
 8001154:	4610      	mov	r0, r2
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4959      	ldr	r1, [pc, #356]	; (80012c0 <packetRead+0x2d0>)
 800115a:	4603      	mov	r3, r0
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4403      	add	r3, r0
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	440b      	add	r3, r1
 8001164:	3308      	adds	r3, #8
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800116a:	3304      	adds	r3, #4
 800116c:	637b      	str	r3, [r7, #52]	; 0x34
					current_clutch_index++;
 800116e:	4b51      	ldr	r3, [pc, #324]	; (80012b4 <packetRead+0x2c4>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	b29a      	uxth	r2, r3
 8001176:	4b4f      	ldr	r3, [pc, #316]	; (80012b4 <packetRead+0x2c4>)
 8001178:	801a      	strh	r2, [r3, #0]
				}
				break;
 800117a:	e154      	b.n	8001426 <packetRead+0x436>
//				case BEZIER_TYPE:
				case LINEAR_TYPE:{
					Gcode_Cor[point_counter].configure.type_define[0] = move_type;
 800117c:	4b4c      	ldr	r3, [pc, #304]	; (80012b0 <packetRead+0x2c0>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	4a50      	ldr	r2, [pc, #320]	; (80012c4 <packetRead+0x2d4>)
 8001184:	460b      	mov	r3, r1
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	1a5b      	subs	r3, r3, r1
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	331a      	adds	r3, #26
 8001190:	7e3a      	ldrb	r2, [r7, #24]
 8001192:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].configure.type_define[1] = message[temp_pointer++] >> 4 & 0x0f;
 8001194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001196:	1c5a      	adds	r2, r3, #1
 8001198:	637a      	str	r2, [r7, #52]	; 0x34
 800119a:	461a      	mov	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4413      	add	r3, r2
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	091b      	lsrs	r3, r3, #4
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	4a42      	ldr	r2, [pc, #264]	; (80012b0 <packetRead+0x2c0>)
 80011a8:	8812      	ldrh	r2, [r2, #0]
 80011aa:	4611      	mov	r1, r2
 80011ac:	f003 030f 	and.w	r3, r3, #15
 80011b0:	b2d8      	uxtb	r0, r3
 80011b2:	4a44      	ldr	r2, [pc, #272]	; (80012c4 <packetRead+0x2d4>)
 80011b4:	460b      	mov	r3, r1
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	1a5b      	subs	r3, r3, r1
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	331b      	adds	r3, #27
 80011c0:	4602      	mov	r2, r0
 80011c2:	701a      	strb	r2, [r3, #0]
//					if(move_type == BEZIER_TYPE){
//						Gcode_Cor[point_counter].I = B2I(temp_pointer);	temp_pointer+=4;
//					}
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 80011c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a39      	ldr	r2, [pc, #228]	; (80012b0 <packetRead+0x2c0>)
 80011cc:	8812      	ldrh	r2, [r2, #0]
 80011ce:	4610      	mov	r0, r2
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	493c      	ldr	r1, [pc, #240]	; (80012c4 <packetRead+0x2d4>)
 80011d4:	4603      	mov	r3, r0
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	1a1b      	subs	r3, r3, r0
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e2:	3304      	adds	r3, #4
 80011e4:	637b      	str	r3, [r7, #52]	; 0x34
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 80011e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	4a30      	ldr	r2, [pc, #192]	; (80012b0 <packetRead+0x2c0>)
 80011ee:	8812      	ldrh	r2, [r2, #0]
 80011f0:	4610      	mov	r0, r2
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4933      	ldr	r1, [pc, #204]	; (80012c4 <packetRead+0x2d4>)
 80011f6:	4603      	mov	r3, r0
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	1a1b      	subs	r3, r3, r0
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	440b      	add	r3, r1
 8001200:	3304      	adds	r3, #4
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001206:	3304      	adds	r3, #4
 8001208:	637b      	str	r3, [r7, #52]	; 0x34
					if(Gcode_Mode == GCODE_LINEAR){
 800120a:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <packetRead+0x2b0>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b08      	cmp	r3, #8
 8001210:	d112      	bne.n	8001238 <packetRead+0x248>
						Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 8001212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	4413      	add	r3, r2
 8001218:	4a25      	ldr	r2, [pc, #148]	; (80012b0 <packetRead+0x2c0>)
 800121a:	8812      	ldrh	r2, [r2, #0]
 800121c:	4610      	mov	r0, r2
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4928      	ldr	r1, [pc, #160]	; (80012c4 <packetRead+0x2d4>)
 8001222:	4603      	mov	r3, r0
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	1a1b      	subs	r3, r3, r0
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	3308      	adds	r3, #8
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001232:	3304      	adds	r3, #4
 8001234:	637b      	str	r3, [r7, #52]	; 0x34
 8001236:	e025      	b.n	8001284 <packetRead+0x294>
					}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8001238:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <packetRead+0x2b0>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b09      	cmp	r3, #9
 800123e:	d121      	bne.n	8001284 <packetRead+0x294>
						Gcode_Cor[point_counter].configure.clutch_index = current_clutch_index - 1;
 8001240:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <packetRead+0x2c4>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	4a1a      	ldr	r2, [pc, #104]	; (80012b0 <packetRead+0x2c0>)
 8001246:	8812      	ldrh	r2, [r2, #0]
 8001248:	4611      	mov	r1, r2
 800124a:	3b01      	subs	r3, #1
 800124c:	b298      	uxth	r0, r3
 800124e:	4a1d      	ldr	r2, [pc, #116]	; (80012c4 <packetRead+0x2d4>)
 8001250:	460b      	mov	r3, r1
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	1a5b      	subs	r3, r3, r1
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	3318      	adds	r3, #24
 800125c:	4602      	mov	r2, r0
 800125e:	801a      	strh	r2, [r3, #0]
						Gcode_Cor[point_counter].T = B2I(temp_pointer);	temp_pointer+=4;
 8001260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	4413      	add	r3, r2
 8001266:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <packetRead+0x2c0>)
 8001268:	8812      	ldrh	r2, [r2, #0]
 800126a:	4610      	mov	r0, r2
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4915      	ldr	r1, [pc, #84]	; (80012c4 <packetRead+0x2d4>)
 8001270:	4603      	mov	r3, r0
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	1a1b      	subs	r3, r3, r0
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	440b      	add	r3, r1
 800127a:	3314      	adds	r3, #20
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001280:	3304      	adds	r3, #4
 8001282:	637b      	str	r3, [r7, #52]	; 0x34
					}
					point_counter++;
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <packetRead+0x2c0>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	b29a      	uxth	r2, r3
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <packetRead+0x2c0>)
 800128e:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001290:	e0c9      	b.n	8001426 <packetRead+0x436>
 8001292:	bf00      	nop
 8001294:	f3af 8000 	nop.w
 8001298:	a0000000 	.word	0xa0000000
 800129c:	3eb0c6f7 	.word	0x3eb0c6f7
 80012a0:	200085c8 	.word	0x200085c8
 80012a4:	20008f38 	.word	0x20008f38
 80012a8:	200085c0 	.word	0x200085c0
 80012ac:	20008fa8 	.word	0x20008fa8
 80012b0:	20004404 	.word	0x20004404
 80012b4:	20004406 	.word	0x20004406
 80012b8:	2000fd32 	.word	0x2000fd32
 80012bc:	20008f80 	.word	0x20008f80
 80012c0:	200085d8 	.word	0x200085d8
 80012c4:	20008fc0 	.word	0x20008fc0
				case ARC_CW_TYPE:
				case ARC_AW_TYPE:{
					Gcode_Cor[point_counter].configure.type_define[0] = move_type;
 80012c8:	4b8c      	ldr	r3, [pc, #560]	; (80014fc <packetRead+0x50c>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	4a8c      	ldr	r2, [pc, #560]	; (8001500 <packetRead+0x510>)
 80012d0:	460b      	mov	r3, r1
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	1a5b      	subs	r3, r3, r1
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	331a      	adds	r3, #26
 80012dc:	7e3a      	ldrb	r2, [r7, #24]
 80012de:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].configure.type_define[1] = message[temp_pointer++] >> 4 & 0x0f;
 80012e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e2:	1c5a      	adds	r2, r3, #1
 80012e4:	637a      	str	r2, [r7, #52]	; 0x34
 80012e6:	461a      	mov	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4413      	add	r3, r2
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	091b      	lsrs	r3, r3, #4
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	4a82      	ldr	r2, [pc, #520]	; (80014fc <packetRead+0x50c>)
 80012f4:	8812      	ldrh	r2, [r2, #0]
 80012f6:	4611      	mov	r1, r2
 80012f8:	f003 030f 	and.w	r3, r3, #15
 80012fc:	b2d8      	uxtb	r0, r3
 80012fe:	4a80      	ldr	r2, [pc, #512]	; (8001500 <packetRead+0x510>)
 8001300:	460b      	mov	r3, r1
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	1a5b      	subs	r3, r3, r1
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	331b      	adds	r3, #27
 800130c:	4602      	mov	r2, r0
 800130e:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 8001310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	4413      	add	r3, r2
 8001316:	4a79      	ldr	r2, [pc, #484]	; (80014fc <packetRead+0x50c>)
 8001318:	8812      	ldrh	r2, [r2, #0]
 800131a:	4610      	mov	r0, r2
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4978      	ldr	r1, [pc, #480]	; (8001500 <packetRead+0x510>)
 8001320:	4603      	mov	r3, r0
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	1a1b      	subs	r3, r3, r0
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800132e:	3304      	adds	r3, #4
 8001330:	637b      	str	r3, [r7, #52]	; 0x34
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 8001332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	4a70      	ldr	r2, [pc, #448]	; (80014fc <packetRead+0x50c>)
 800133a:	8812      	ldrh	r2, [r2, #0]
 800133c:	4610      	mov	r0, r2
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	496f      	ldr	r1, [pc, #444]	; (8001500 <packetRead+0x510>)
 8001342:	4603      	mov	r3, r0
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	1a1b      	subs	r3, r3, r0
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	440b      	add	r3, r1
 800134c:	3304      	adds	r3, #4
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001352:	3304      	adds	r3, #4
 8001354:	637b      	str	r3, [r7, #52]	; 0x34
					if(Gcode_Mode == GCODE_LINEAR){
 8001356:	4b6b      	ldr	r3, [pc, #428]	; (8001504 <packetRead+0x514>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b08      	cmp	r3, #8
 800135c:	d112      	bne.n	8001384 <packetRead+0x394>
						Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 800135e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	4a65      	ldr	r2, [pc, #404]	; (80014fc <packetRead+0x50c>)
 8001366:	8812      	ldrh	r2, [r2, #0]
 8001368:	4610      	mov	r0, r2
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4964      	ldr	r1, [pc, #400]	; (8001500 <packetRead+0x510>)
 800136e:	4603      	mov	r3, r0
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	1a1b      	subs	r3, r3, r0
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	440b      	add	r3, r1
 8001378:	3308      	adds	r3, #8
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800137e:	3304      	adds	r3, #4
 8001380:	637b      	str	r3, [r7, #52]	; 0x34
 8001382:	e025      	b.n	80013d0 <packetRead+0x3e0>
					}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8001384:	4b5f      	ldr	r3, [pc, #380]	; (8001504 <packetRead+0x514>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b09      	cmp	r3, #9
 800138a:	d121      	bne.n	80013d0 <packetRead+0x3e0>
						Gcode_Cor[point_counter].configure.clutch_index = current_clutch_index - 1;
 800138c:	4b5e      	ldr	r3, [pc, #376]	; (8001508 <packetRead+0x518>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	4a5a      	ldr	r2, [pc, #360]	; (80014fc <packetRead+0x50c>)
 8001392:	8812      	ldrh	r2, [r2, #0]
 8001394:	4611      	mov	r1, r2
 8001396:	3b01      	subs	r3, #1
 8001398:	b298      	uxth	r0, r3
 800139a:	4a59      	ldr	r2, [pc, #356]	; (8001500 <packetRead+0x510>)
 800139c:	460b      	mov	r3, r1
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	1a5b      	subs	r3, r3, r1
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	3318      	adds	r3, #24
 80013a8:	4602      	mov	r2, r0
 80013aa:	801a      	strh	r2, [r3, #0]
						Gcode_Cor[point_counter].T = B2I(temp_pointer);	temp_pointer+=4;
 80013ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	4413      	add	r3, r2
 80013b2:	4a52      	ldr	r2, [pc, #328]	; (80014fc <packetRead+0x50c>)
 80013b4:	8812      	ldrh	r2, [r2, #0]
 80013b6:	4610      	mov	r0, r2
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4951      	ldr	r1, [pc, #324]	; (8001500 <packetRead+0x510>)
 80013bc:	4603      	mov	r3, r0
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	1a1b      	subs	r3, r3, r0
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	3314      	adds	r3, #20
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013cc:	3304      	adds	r3, #4
 80013ce:	637b      	str	r3, [r7, #52]	; 0x34
					}
					Gcode_Cor[point_counter].I = B2I(temp_pointer);	temp_pointer+=4;
 80013d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	4413      	add	r3, r2
 80013d6:	4a49      	ldr	r2, [pc, #292]	; (80014fc <packetRead+0x50c>)
 80013d8:	8812      	ldrh	r2, [r2, #0]
 80013da:	4610      	mov	r0, r2
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4948      	ldr	r1, [pc, #288]	; (8001500 <packetRead+0x510>)
 80013e0:	4603      	mov	r3, r0
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	1a1b      	subs	r3, r3, r0
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	440b      	add	r3, r1
 80013ea:	330c      	adds	r3, #12
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f0:	3304      	adds	r3, #4
 80013f2:	637b      	str	r3, [r7, #52]	; 0x34
					Gcode_Cor[point_counter].J = B2I(temp_pointer);	temp_pointer+=4;
 80013f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a40      	ldr	r2, [pc, #256]	; (80014fc <packetRead+0x50c>)
 80013fc:	8812      	ldrh	r2, [r2, #0]
 80013fe:	4610      	mov	r0, r2
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	493f      	ldr	r1, [pc, #252]	; (8001500 <packetRead+0x510>)
 8001404:	4603      	mov	r3, r0
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	1a1b      	subs	r3, r3, r0
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	3310      	adds	r3, #16
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001414:	3304      	adds	r3, #4
 8001416:	637b      	str	r3, [r7, #52]	; 0x34
					point_counter++;
 8001418:	4b38      	ldr	r3, [pc, #224]	; (80014fc <packetRead+0x50c>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	b29a      	uxth	r2, r3
 8001420:	4b36      	ldr	r3, [pc, #216]	; (80014fc <packetRead+0x50c>)
 8001422:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001424:	bf00      	nop
				}
				if(timeout_value++ == 0xffff) break;
 8001426:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	867a      	strh	r2, [r7, #50]	; 0x32
 800142c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001430:	4293      	cmp	r3, r2
 8001432:	d005      	beq.n	8001440 <packetRead+0x450>
        	}while(temp_pointer < length);
 8001434:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	429a      	cmp	r2, r3
 800143a:	f6ff adf9 	blt.w	8001030 <packetRead+0x40>
 800143e:	e000      	b.n	8001442 <packetRead+0x452>
				if(timeout_value++ == 0xffff) break;
 8001440:	bf00      	nop
        	return CMD_GCODE;
 8001442:	231b      	movs	r3, #27
 8001444:	f000 be3c 	b.w	80020c0 <packetRead+0x10d0>
        break;

        // command control from pc
        case COMMAND_TRANSMISION:
        {
        	Robot_CommandTypedef command_id = message[1];
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	785b      	ldrb	r3, [r3, #1]
 800144c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            switch(command_id)
 8001450:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001454:	2b1a      	cmp	r3, #26
 8001456:	f200 8630 	bhi.w	80020ba <packetRead+0x10ca>
 800145a:	a201      	add	r2, pc, #4	; (adr r2, 8001460 <packetRead+0x470>)
 800145c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001460:	080014cd 	.word	0x080014cd
 8001464:	080014e5 	.word	0x080014e5
 8001468:	08001511 	.word	0x08001511
 800146c:	080015d9 	.word	0x080015d9
 8001470:	0800182d 	.word	0x0800182d
 8001474:	080015d9 	.word	0x080015d9
 8001478:	08001a9f 	.word	0x08001a9f
 800147c:	08001aa3 	.word	0x08001aa3
 8001480:	080020bb 	.word	0x080020bb
 8001484:	08001ac3 	.word	0x08001ac3
 8001488:	08001aef 	.word	0x08001aef
 800148c:	08001b51 	.word	0x08001b51
 8001490:	08001c1f 	.word	0x08001c1f
 8001494:	08002069 	.word	0x08002069
 8001498:	08001fed 	.word	0x08001fed
 800149c:	08001ffd 	.word	0x08001ffd
 80014a0:	080020bb 	.word	0x080020bb
 80014a4:	080020bb 	.word	0x080020bb
 80014a8:	08001f29 	.word	0x08001f29
 80014ac:	0800200d 	.word	0x0800200d
 80014b0:	08001fdd 	.word	0x08001fdd
 80014b4:	08001bbd 	.word	0x08001bbd
 80014b8:	08001be7 	.word	0x08001be7
 80014bc:	080020bb 	.word	0x080020bb
 80014c0:	080020bb 	.word	0x080020bb
 80014c4:	08001c59 	.word	0x08001c59
 80014c8:	08001d49 	.word	0x08001d49
            {
                // Stop now
                case CMD_STOPNOW:
                {
                    duty_cmd->robot_mode = SCARA_MODE_STOP;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	2200      	movs	r2, #0
 80014d0:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	2201      	movs	r2, #1
 80014d6:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
                    return CMD_STOPNOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	f000 bdee 	b.w	80020c0 <packetRead+0x10d0>
                break;

                // Scan limit
                case CMD_SCAN_LIMIT:
                {
                    duty_cmd->robot_mode = SCARA_MODE_SCAN;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	2201      	movs	r2, #1
 80014e8:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	2201      	movs	r2, #1
 80014ee:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
                    return CMD_SCAN_LIMIT;
 80014f6:	2301      	movs	r3, #1
 80014f8:	f000 bde2 	b.w	80020c0 <packetRead+0x10d0>
 80014fc:	20004404 	.word	0x20004404
 8001500:	20008fc0 	.word	0x20008fc0
 8001504:	200085c8 	.word	0x200085c8
 8001508:	20004406 	.word	0x20004406
 800150c:	358637bd 	.word	0x358637bd
                break;

                // Move home
                case CMD_MOVE_HOME:
                {
                    if (length == 10){ // 2 int32_t number + 2 define byte
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2b0a      	cmp	r3, #10
 8001514:	d15d      	bne.n	80015d2 <packetRead+0x5e2>
						temp_pointer = -2;
 8001516:	f06f 0301 	mvn.w	r3, #1
 800151a:	637b      	str	r3, [r7, #52]	; 0x34
						duty_cmd->v_factor = B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800151c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800151e:	3304      	adds	r3, #4
 8001520:	637b      	str	r3, [r7, #52]	; 0x34
 8001522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	ee07 3a90 	vmov	s15, r3
 800152e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001532:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 800150c <packetRead+0x51c>
 8001536:	ee67 7a87 	vmul.f32	s15, s15, s14
 800153a:	ee17 0a90 	vmov	r0, s15
 800153e:	f7ff f803 	bl	8000548 <__aeabi_f2d>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	6839      	ldr	r1, [r7, #0]
 8001548:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
						duty_cmd->a_factor = B2I(temp_pointer)*COR_INVERSE_SCALE;
 800154c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4413      	add	r3, r2
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	ee07 3a90 	vmov	s15, r3
 8001558:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155c:	ed1f 7a15 	vldr	s14, [pc, #-84]	; 800150c <packetRead+0x51c>
 8001560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001564:	ee17 0a90 	vmov	r0, s15
 8001568:	f7fe ffee 	bl	8000548 <__aeabi_f2d>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	6839      	ldr	r1, [r7, #0]
 8001572:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
                    }else{
                        return CMD_ERROR;
                    }
                    duty_cmd->target_point.x = 250;
 8001576:	6839      	ldr	r1, [r7, #0]
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	4ba8      	ldr	r3, [pc, #672]	; (8001820 <packetRead+0x830>)
 800157e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
                    duty_cmd->target_point.y = -200;
 8001582:	6839      	ldr	r1, [r7, #0]
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	4ba6      	ldr	r3, [pc, #664]	; (8001824 <packetRead+0x834>)
 800158a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
                    duty_cmd->target_point.z = 120;
 800158e:	6839      	ldr	r1, [r7, #0]
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	4ba4      	ldr	r3, [pc, #656]	; (8001828 <packetRead+0x838>)
 8001596:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
                    duty_cmd->target_point.roll = 0;
 800159a:	6839      	ldr	r1, [r7, #0]
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

                    duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	2200      	movs	r2, #0
 80015ac:	745a      	strb	r2, [r3, #17]
                    duty_cmd->space_type = DUTY_SPACE_JOINT;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	2201      	movs	r2, #1
 80015b2:	735a      	strb	r2, [r3, #13]
                    duty_cmd->joint_type = DUTY_JOINT_4DOF;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2201      	movs	r2, #1
 80015b8:	73da      	strb	r2, [r3, #15]
                    duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2202      	movs	r2, #2
 80015be:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	2201      	movs	r2, #1
 80015c4:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
                    return CMD_MOVE_HOME;
 80015cc:	2302      	movs	r3, #2
 80015ce:	f000 bd77 	b.w	80020c0 <packetRead+0x10d0>
                        return CMD_ERROR;
 80015d2:	2317      	movs	r3, #23
 80015d4:	f000 bd74 	b.w	80020c0 <packetRead+0x10d0>

                case CMD_MOVE_JOINT:
                // Move line
                case CMD_MOVE_LINE:
                {
                    if (length == 29){ // 6 int32_t number + 3 byte number + 2 define byte
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	2b1d      	cmp	r3, #29
 80015dc:	f040 8109 	bne.w	80017f2 <packetRead+0x802>
						//scaraSetScanFlag();
						uint8_t mode_init;
						temp_pointer = -2;
 80015e0:	f06f 0301 	mvn.w	r3, #1
 80015e4:	637b      	str	r3, [r7, #52]	; 0x34

						duty_cmd->target_point.x = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80015e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e8:	3304      	adds	r3, #4
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
 80015ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	4413      	add	r3, r2
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe ff95 	bl	8000524 <__aeabi_i2d>
 80015fa:	a387      	add	r3, pc, #540	; (adr r3, 8001818 <packetRead+0x828>)
 80015fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001600:	f7fe fffa 	bl	80005f8 <__aeabi_dmul>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	6839      	ldr	r1, [r7, #0]
 800160a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
						duty_cmd->target_point.y = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800160e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001610:	3304      	adds	r3, #4
 8001612:	637b      	str	r3, [r7, #52]	; 0x34
 8001614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	4413      	add	r3, r2
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ff81 	bl	8000524 <__aeabi_i2d>
 8001622:	a37d      	add	r3, pc, #500	; (adr r3, 8001818 <packetRead+0x828>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7fe ffe6 	bl	80005f8 <__aeabi_dmul>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	6839      	ldr	r1, [r7, #0]
 8001632:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
						duty_cmd->target_point.z = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001638:	3304      	adds	r3, #4
 800163a:	637b      	str	r3, [r7, #52]	; 0x34
 800163c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	4413      	add	r3, r2
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe ff6d 	bl	8000524 <__aeabi_i2d>
 800164a:	a373      	add	r3, pc, #460	; (adr r3, 8001818 <packetRead+0x828>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7fe ffd2 	bl	80005f8 <__aeabi_dmul>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	6839      	ldr	r1, [r7, #0]
 800165a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
						duty_cmd->target_point.roll = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800165e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001660:	3304      	adds	r3, #4
 8001662:	637b      	str	r3, [r7, #52]	; 0x34
 8001664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	4413      	add	r3, r2
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe ff59 	bl	8000524 <__aeabi_i2d>
 8001672:	a369      	add	r3, pc, #420	; (adr r3, 8001818 <packetRead+0x828>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	f7fe ffbe 	bl	80005f8 <__aeabi_dmul>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	6839      	ldr	r1, [r7, #0]
 8001682:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
						duty_cmd->v_factor = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001688:	3304      	adds	r3, #4
 800168a:	637b      	str	r3, [r7, #52]	; 0x34
 800168c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4413      	add	r3, r2
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff45 	bl	8000524 <__aeabi_i2d>
 800169a:	a35f      	add	r3, pc, #380	; (adr r3, 8001818 <packetRead+0x828>)
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	f7fe ffaa 	bl	80005f8 <__aeabi_dmul>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	6839      	ldr	r1, [r7, #0]
 80016aa:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
						mode_init = message[temp_pointer+=4];
 80016ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b0:	3304      	adds	r3, #4
 80016b2:	637b      	str	r3, [r7, #52]	; 0x34
 80016b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	4413      	add	r3, r2
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	767b      	strb	r3, [r7, #25]

						if(mode_init == DUTY_MODE_INIT_QVA){
 80016be:	7e7b      	ldrb	r3, [r7, #25]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d117      	bne.n	80016f4 <packetRead+0x704>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	2200      	movs	r2, #0
 80016c8:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 80016ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016cc:	3301      	adds	r3, #1
 80016ce:	637b      	str	r3, [r7, #52]	; 0x34
 80016d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	4413      	add	r3, r2
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe ff23 	bl	8000524 <__aeabi_i2d>
 80016de:	a34e      	add	r3, pc, #312	; (adr r3, 8001818 <packetRead+0x828>)
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	f7fe ff88 	bl	80005f8 <__aeabi_dmul>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	6839      	ldr	r1, [r7, #0]
 80016ee:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
 80016f2:	e053      	b.n	800179c <packetRead+0x7ac>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 80016f4:	7e7b      	ldrb	r3, [r7, #25]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d117      	bne.n	800172a <packetRead+0x73a>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	2201      	movs	r2, #1
 80016fe:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001702:	3301      	adds	r3, #1
 8001704:	637b      	str	r3, [r7, #52]	; 0x34
 8001706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	4413      	add	r3, r2
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe ff08 	bl	8000524 <__aeabi_i2d>
 8001714:	a340      	add	r3, pc, #256	; (adr r3, 8001818 <packetRead+0x828>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	f7fe ff6d 	bl	80005f8 <__aeabi_dmul>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	6839      	ldr	r1, [r7, #0]
 8001724:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001728:	e038      	b.n	800179c <packetRead+0x7ac>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 800172a:	7e7b      	ldrb	r3, [r7, #25]
 800172c:	2b03      	cmp	r3, #3
 800172e:	d117      	bne.n	8001760 <packetRead+0x770>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	2203      	movs	r2, #3
 8001734:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001738:	3301      	adds	r3, #1
 800173a:	637b      	str	r3, [r7, #52]	; 0x34
 800173c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	4413      	add	r3, r2
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe feed 	bl	8000524 <__aeabi_i2d>
 800174a:	a333      	add	r3, pc, #204	; (adr r3, 8001818 <packetRead+0x828>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7fe ff52 	bl	80005f8 <__aeabi_dmul>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	6839      	ldr	r1, [r7, #0]
 800175a:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800175e:	e01d      	b.n	800179c <packetRead+0x7ac>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 8001760:	7e7b      	ldrb	r3, [r7, #25]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d117      	bne.n	8001796 <packetRead+0x7a6>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	2202      	movs	r2, #2
 800176a:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 800176c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800176e:	3301      	adds	r3, #1
 8001770:	637b      	str	r3, [r7, #52]	; 0x34
 8001772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	4413      	add	r3, r2
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fed2 	bl	8000524 <__aeabi_i2d>
 8001780:	a325      	add	r3, pc, #148	; (adr r3, 8001818 <packetRead+0x828>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	f7fe ff37 	bl	80005f8 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	6839      	ldr	r1, [r7, #0]
 8001790:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
 8001794:	e002      	b.n	800179c <packetRead+0x7ac>
						}else{
							return CMD_ERROR;
 8001796:	2317      	movs	r3, #23
 8001798:	f000 bc92 	b.w	80020c0 <packetRead+0x10d0>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 800179c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800179e:	3304      	adds	r3, #4
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
 80017a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	781a      	ldrb	r2, [r3, #0]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 80017ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b0:	3301      	adds	r3, #1
 80017b2:	637b      	str	r3, [r7, #52]	; 0x34
 80017b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4413      	add	r3, r2
 80017ba:	781a      	ldrb	r2, [r3, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	741a      	strb	r2, [r3, #16]
						if(command_id == CMD_MOVE_LINE){
 80017c0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d106      	bne.n	80017d6 <packetRead+0x7e6>
							duty_cmd->path_type = DUTY_PATH_LINE;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	2200      	movs	r2, #0
 80017cc:	739a      	strb	r2, [r3, #14]
							duty_cmd->space_type = DUTY_SPACE_TASK;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	2200      	movs	r2, #0
 80017d2:	735a      	strb	r2, [r3, #13]
 80017d4:	e010      	b.n	80017f8 <packetRead+0x808>
						}else if(command_id == CMD_MOVE_JOINT){
 80017d6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017da:	2b05      	cmp	r3, #5
 80017dc:	d106      	bne.n	80017ec <packetRead+0x7fc>
							duty_cmd->joint_type = DUTY_JOINT_4DOF;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	2201      	movs	r2, #1
 80017e2:	73da      	strb	r2, [r3, #15]
							duty_cmd->space_type = DUTY_SPACE_JOINT;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	2201      	movs	r2, #1
 80017e8:	735a      	strb	r2, [r3, #13]
 80017ea:	e005      	b.n	80017f8 <packetRead+0x808>
						}else{
							return CMD_ERROR;
 80017ec:	2317      	movs	r3, #23
 80017ee:	f000 bc67 	b.w	80020c0 <packetRead+0x10d0>
						}

					}else{
						return CMD_ERROR;
 80017f2:	2317      	movs	r3, #23
 80017f4:	f000 bc64 	b.w	80020c0 <packetRead+0x10d0>
					}
					duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	2202      	movs	r2, #2
 80017fc:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	2201      	movs	r2, #1
 8001802:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
					return command_id;
 800180a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800180e:	f000 bc57 	b.w	80020c0 <packetRead+0x10d0>
 8001812:	bf00      	nop
 8001814:	f3af 8000 	nop.w
 8001818:	a0000000 	.word	0xa0000000
 800181c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001820:	406f4000 	.word	0x406f4000
 8001824:	c0690000 	.word	0xc0690000
 8001828:	405e0000 	.word	0x405e0000
				break;


				// Move circle
                case CMD_MOVE_CIRCLE:{
                	if(length == 34){ // 7 int32_t number + 4 byte number + 2 define byte
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	2b22      	cmp	r3, #34	; 0x22
 8001830:	f040 8133 	bne.w	8001a9a <packetRead+0xaaa>
                		uint8_t mode_init, arc_type;
                		temp_pointer = -2;
 8001834:	f06f 0301 	mvn.w	r3, #1
 8001838:	637b      	str	r3, [r7, #52]	; 0x34
                		duty_cmd->target_point.x      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800183a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800183c:	3304      	adds	r3, #4
 800183e:	637b      	str	r3, [r7, #52]	; 0x34
 8001840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	4413      	add	r3, r2
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe6b 	bl	8000524 <__aeabi_i2d>
 800184e:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	f7fe fecf 	bl	80005f8 <__aeabi_dmul>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	6839      	ldr	r1, [r7, #0]
 8001860:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
                		duty_cmd->target_point.y      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001866:	3304      	adds	r3, #4
 8001868:	637b      	str	r3, [r7, #52]	; 0x34
 800186a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	4413      	add	r3, r2
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fe56 	bl	8000524 <__aeabi_i2d>
 8001878:	f20f 43ac 	addw	r3, pc, #1196	; 0x4ac
 800187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001880:	f7fe feba 	bl	80005f8 <__aeabi_dmul>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	6839      	ldr	r1, [r7, #0]
 800188a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
                		duty_cmd->sub_point.x 	      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800188e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001890:	3304      	adds	r3, #4
 8001892:	637b      	str	r3, [r7, #52]	; 0x34
 8001894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	4413      	add	r3, r2
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fe41 	bl	8000524 <__aeabi_i2d>
 80018a2:	f20f 4384 	addw	r3, pc, #1156	; 0x484
 80018a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018aa:	f7fe fea5 	bl	80005f8 <__aeabi_dmul>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	6839      	ldr	r1, [r7, #0]
 80018b4:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
                		duty_cmd->sub_point.y         = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80018b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ba:	3304      	adds	r3, #4
 80018bc:	637b      	str	r3, [r7, #52]	; 0x34
 80018be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	4413      	add	r3, r2
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe2c 	bl	8000524 <__aeabi_i2d>
 80018cc:	f20f 4358 	addw	r3, pc, #1112	; 0x458
 80018d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d4:	f7fe fe90 	bl	80005f8 <__aeabi_dmul>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	6839      	ldr	r1, [r7, #0]
 80018de:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
                		duty_cmd->target_point.roll   = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80018e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e4:	3304      	adds	r3, #4
 80018e6:	637b      	str	r3, [r7, #52]	; 0x34
 80018e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	4413      	add	r3, r2
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fe17 	bl	8000524 <__aeabi_i2d>
 80018f6:	f20f 4330 	addw	r3, pc, #1072	; 0x430
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f7fe fe7b 	bl	80005f8 <__aeabi_dmul>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	6839      	ldr	r1, [r7, #0]
 8001908:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
                		duty_cmd->v_factor			  = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800190c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800190e:	3304      	adds	r3, #4
 8001910:	637b      	str	r3, [r7, #52]	; 0x34
 8001912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	4413      	add	r3, r2
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fe02 	bl	8000524 <__aeabi_i2d>
 8001920:	f20f 4304 	addw	r3, pc, #1028	; 0x404
 8001924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001928:	f7fe fe66 	bl	80005f8 <__aeabi_dmul>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	6839      	ldr	r1, [r7, #0]
 8001932:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
                		arc_type = message[temp_pointer+=4];
 8001936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001938:	3304      	adds	r3, #4
 800193a:	637b      	str	r3, [r7, #52]	; 0x34
 800193c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	4413      	add	r3, r2
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	76fb      	strb	r3, [r7, #27]
                		if(arc_type == ARC_AW_TYPE){
 8001946:	7efb      	ldrb	r3, [r7, #27]
 8001948:	2b04      	cmp	r3, #4
 800194a:	d103      	bne.n	8001954 <packetRead+0x964>
                			duty_cmd->arc_dir = 1;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	2201      	movs	r2, #1
 8001950:	615a      	str	r2, [r3, #20]
 8001952:	e009      	b.n	8001968 <packetRead+0x978>
                		}else if(arc_type == ARC_CW_TYPE){
 8001954:	7efb      	ldrb	r3, [r7, #27]
 8001956:	2b03      	cmp	r3, #3
 8001958:	d104      	bne.n	8001964 <packetRead+0x974>
                			duty_cmd->arc_dir = -1;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	f04f 32ff 	mov.w	r2, #4294967295
 8001960:	615a      	str	r2, [r3, #20]
 8001962:	e001      	b.n	8001968 <packetRead+0x978>
                		}else{
                			return CMD_ERROR;
 8001964:	2317      	movs	r3, #23
 8001966:	e3ab      	b.n	80020c0 <packetRead+0x10d0>
                		}
                		mode_init = message[temp_pointer+=1];
 8001968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800196a:	3301      	adds	r3, #1
 800196c:	637b      	str	r3, [r7, #52]	; 0x34
 800196e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	76bb      	strb	r3, [r7, #26]
						if(mode_init == DUTY_MODE_INIT_QVA){
 8001978:	7ebb      	ldrb	r3, [r7, #26]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d117      	bne.n	80019ae <packetRead+0x9be>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2200      	movs	r2, #0
 8001982:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001986:	3301      	adds	r3, #1
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
 800198a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fdc6 	bl	8000524 <__aeabi_i2d>
 8001998:	a3e3      	add	r3, pc, #908	; (adr r3, 8001d28 <packetRead+0xd38>)
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	f7fe fe2b 	bl	80005f8 <__aeabi_dmul>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	6839      	ldr	r1, [r7, #0]
 80019a8:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
 80019ac:	e052      	b.n	8001a54 <packetRead+0xa64>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 80019ae:	7ebb      	ldrb	r3, [r7, #26]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d117      	bne.n	80019e4 <packetRead+0x9f4>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	2201      	movs	r2, #1
 80019b8:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 80019ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019bc:	3301      	adds	r3, #1
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
 80019c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	4413      	add	r3, r2
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe fdab 	bl	8000524 <__aeabi_i2d>
 80019ce:	a3d6      	add	r3, pc, #856	; (adr r3, 8001d28 <packetRead+0xd38>)
 80019d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d4:	f7fe fe10 	bl	80005f8 <__aeabi_dmul>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	6839      	ldr	r1, [r7, #0]
 80019de:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80019e2:	e037      	b.n	8001a54 <packetRead+0xa64>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 80019e4:	7ebb      	ldrb	r3, [r7, #26]
 80019e6:	2b03      	cmp	r3, #3
 80019e8:	d117      	bne.n	8001a1a <packetRead+0xa2a>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	2203      	movs	r2, #3
 80019ee:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 80019f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f2:	3301      	adds	r3, #1
 80019f4:	637b      	str	r3, [r7, #52]	; 0x34
 80019f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	4413      	add	r3, r2
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fd90 	bl	8000524 <__aeabi_i2d>
 8001a04:	a3c8      	add	r3, pc, #800	; (adr r3, 8001d28 <packetRead+0xd38>)
 8001a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0a:	f7fe fdf5 	bl	80005f8 <__aeabi_dmul>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	6839      	ldr	r1, [r7, #0]
 8001a14:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001a18:	e01c      	b.n	8001a54 <packetRead+0xa64>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 8001a1a:	7ebb      	ldrb	r3, [r7, #26]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d117      	bne.n	8001a50 <packetRead+0xa60>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	2202      	movs	r2, #2
 8001a24:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a28:	3301      	adds	r3, #1
 8001a2a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	4413      	add	r3, r2
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fd75 	bl	8000524 <__aeabi_i2d>
 8001a3a:	a3bb      	add	r3, pc, #748	; (adr r3, 8001d28 <packetRead+0xd38>)
 8001a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a40:	f7fe fdda 	bl	80005f8 <__aeabi_dmul>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	6839      	ldr	r1, [r7, #0]
 8001a4a:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
 8001a4e:	e001      	b.n	8001a54 <packetRead+0xa64>
						}else{
							return CMD_ERROR;
 8001a50:	2317      	movs	r3, #23
 8001a52:	e335      	b.n	80020c0 <packetRead+0x10d0>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 8001a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a56:	3304      	adds	r3, #4
 8001a58:	637b      	str	r3, [r7, #52]	; 0x34
 8001a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	4413      	add	r3, r2
 8001a60:	781a      	ldrb	r2, [r3, #0]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 8001a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a68:	3301      	adds	r3, #1
 8001a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	4413      	add	r3, r2
 8001a72:	781a      	ldrb	r2, [r3, #0]
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	741a      	strb	r2, [r3, #16]
						duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	2200      	movs	r2, #0
 8001a82:	735a      	strb	r2, [r3, #13]
                	}else{
                		return CMD_ERROR;
                	}
                	duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	2202      	movs	r2, #2
 8001a88:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
					return CMD_MOVE_CIRCLE;
 8001a96:	2304      	movs	r3, #4
 8001a98:	e312      	b.n	80020c0 <packetRead+0x10d0>
                		return CMD_ERROR;
 8001a9a:	2317      	movs	r3, #23
 8001a9c:	e310      	b.n	80020c0 <packetRead+0x10d0>
                break;

				// Rotate Single
				case CMD_ROTATE_SINGLE:
				{
					return CMD_ROTATE_SINGLE;
 8001a9e:	2306      	movs	r3, #6
 8001aa0:	e30e      	b.n	80020c0 <packetRead+0x10d0>
				break;

				// Set output
				case CMD_OUTPUT:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d10a      	bne.n	8001abe <packetRead+0xace>
						temp_pointer = 2;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	637b      	str	r3, [r7, #52]	; 0x34
						duty_cmd->arc_dir = message[temp_pointer];
 8001aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	615a      	str	r2, [r3, #20]
						return CMD_OUTPUT;
 8001aba:	2307      	movs	r3, #7
 8001abc:	e300      	b.n	80020c0 <packetRead+0x10d0>
					}else{
						return CMD_ERROR;
 8001abe:	2317      	movs	r3, #23
 8001ac0:	e2fe      	b.n	80020c0 <packetRead+0x10d0>
				break;

				// Read position
				case CMD_READ_POSITION:
				{
					if(length == 3){ // 1 byte categorize read type + 2 byte define
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2b03      	cmp	r3, #3
 8001ac6:	d110      	bne.n	8001aea <packetRead+0xafa>
						temp_pointer = 2;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	637b      	str	r3, [r7, #52]	; 0x34
						position_type = message[temp_pointer];
 8001acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	781a      	ldrb	r2, [r3, #0]
 8001ad4:	4b96      	ldr	r3, [pc, #600]	; (8001d30 <packetRead+0xd40>)
 8001ad6:	701a      	strb	r2, [r3, #0]
						uint8_t lala[2] = {12, 24};
 8001ad8:	f641 030c 	movw	r3, #6156	; 0x180c
 8001adc:	82bb      	strh	r3, [r7, #20]
						uint16_t tes = *(uint16_t*)lala;
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	83bb      	strh	r3, [r7, #28]
						return CMD_READ_POSITION;
 8001ae6:	2309      	movs	r3, #9
 8001ae8:	e2ea      	b.n	80020c0 <packetRead+0x10d0>
					}else{
						return CMD_ERROR;
 8001aea:	2317      	movs	r3, #23
 8001aec:	e2e8      	b.n	80020c0 <packetRead+0x10d0>
				break;			

				// Setting
				case CMD_TEST_METHOD_SETTING:
				{
					if (length == 6){ // 4 byte configure + 2 byte define
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	2b06      	cmp	r3, #6
 8001af2:	d12b      	bne.n	8001b4c <packetRead+0xb5c>
						temp_pointer = 2;
 8001af4:	2302      	movs	r3, #2
 8001af6:	637b      	str	r3, [r7, #52]	; 0x34
						test_value_array[0] = message[temp_pointer++];
 8001af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	637a      	str	r2, [r7, #52]	; 0x34
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	b25a      	sxtb	r2, r3
 8001b08:	4b8a      	ldr	r3, [pc, #552]	; (8001d34 <packetRead+0xd44>)
 8001b0a:	701a      	strb	r2, [r3, #0]
						test_value_array[1] = message[temp_pointer++];
 8001b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b0e:	1c5a      	adds	r2, r3, #1
 8001b10:	637a      	str	r2, [r7, #52]	; 0x34
 8001b12:	461a      	mov	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4413      	add	r3, r2
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	b25a      	sxtb	r2, r3
 8001b1c:	4b85      	ldr	r3, [pc, #532]	; (8001d34 <packetRead+0xd44>)
 8001b1e:	705a      	strb	r2, [r3, #1]
						test_value_array[2] = message[temp_pointer++];
 8001b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	637a      	str	r2, [r7, #52]	; 0x34
 8001b26:	461a      	mov	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	b25a      	sxtb	r2, r3
 8001b30:	4b80      	ldr	r3, [pc, #512]	; (8001d34 <packetRead+0xd44>)
 8001b32:	709a      	strb	r2, [r3, #2]
						test_value_array[3] = message[temp_pointer++];
 8001b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	637a      	str	r2, [r7, #52]	; 0x34
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4413      	add	r3, r2
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	b25a      	sxtb	r2, r3
 8001b44:	4b7b      	ldr	r3, [pc, #492]	; (8001d34 <packetRead+0xd44>)
 8001b46:	70da      	strb	r2, [r3, #3]
						return CMD_TEST_METHOD_SETTING;
 8001b48:	230a      	movs	r3, #10
 8001b4a:	e2b9      	b.n	80020c0 <packetRead+0x10d0>
					}else{
						return CMD_ERROR;
 8001b4c:	2317      	movs	r3, #23
 8001b4e:	e2b7      	b.n	80020c0 <packetRead+0x10d0>
				break;

				// Change method
				case CMD_METHOD_CHANGE:
				{
					if(length == 3){ // 1 byte configure + 2 byte define
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d130      	bne.n	8001bb8 <packetRead+0xbc8>
						uint8_t method;
						temp_pointer = 2;
 8001b56:	2302      	movs	r3, #2
 8001b58:	637b      	str	r3, [r7, #52]	; 0x34
						method = message[temp_pointer];
 8001b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	4413      	add	r3, r2
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	77bb      	strb	r3, [r7, #30]
						if (SCARA_METHOD_MANUAL == method) {
 8001b64:	7fbb      	ldrb	r3, [r7, #30]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d103      	bne.n	8001b72 <packetRead+0xb82>
							duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	705a      	strb	r2, [r3, #1]
 8001b70:	e01d      	b.n	8001bae <packetRead+0xbbe>
						} else if (SCARA_METHOD_SEMI_AUTO == method) {
 8001b72:	7fbb      	ldrb	r3, [r7, #30]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d103      	bne.n	8001b80 <packetRead+0xb90>
							duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	705a      	strb	r2, [r3, #1]
 8001b7e:	e016      	b.n	8001bae <packetRead+0xbbe>
						} else if (SCARA_METHOD_GCODE == method) {
 8001b80:	7fbb      	ldrb	r3, [r7, #30]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d103      	bne.n	8001b8e <packetRead+0xb9e>
							duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	2202      	movs	r2, #2
 8001b8a:	705a      	strb	r2, [r3, #1]
 8001b8c:	e00f      	b.n	8001bae <packetRead+0xbbe>
						}else if(SCARA_METHOD_TEST == method){
 8001b8e:	7fbb      	ldrb	r3, [r7, #30]
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d103      	bne.n	8001b9c <packetRead+0xbac>
							duty_cmd->robot_method = SCARA_METHOD_TEST;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	2203      	movs	r2, #3
 8001b98:	705a      	strb	r2, [r3, #1]
 8001b9a:	e008      	b.n	8001bae <packetRead+0xbbe>
						}else if(SCARA_METHOD_PICK_AND_PLACE == method){
 8001b9c:	7fbb      	ldrb	r3, [r7, #30]
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d103      	bne.n	8001baa <packetRead+0xbba>
							duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	2204      	movs	r2, #4
 8001ba6:	705a      	strb	r2, [r3, #1]
 8001ba8:	e001      	b.n	8001bae <packetRead+0xbbe>
						}else {
							return CMD_ERROR;
 8001baa:	2317      	movs	r3, #23
 8001bac:	e288      	b.n	80020c0 <packetRead+0x10d0>
						}
						duty_cmd->change_method = TRUE;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
						return CMD_METHOD_CHANGE;
 8001bb4:	230b      	movs	r3, #11
 8001bb6:	e283      	b.n	80020c0 <packetRead+0x10d0>
					}else{
						return CMD_ERROR;
 8001bb8:	2317      	movs	r3, #23
 8001bba:	e281      	b.n	80020c0 <packetRead+0x10d0>
				break;

				// Set manual key
				case CMD_KEYBOARD:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d10f      	bne.n	8001be2 <packetRead+0xbf2>
						int temp_pointer = 2;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
						duty_cmd->keyboard = (SCARA_KeyTypeDef)message[temp_pointer];
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	4413      	add	r3, r2
 8001bcc:	781a      	ldrb	r2, [r3, #0]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	70da      	strb	r2, [r3, #3]
						duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
						return CMD_KEYBOARD;
 8001bde:	2315      	movs	r3, #21
 8001be0:	e26e      	b.n	80020c0 <packetRead+0x10d0>
					}else{
						return CMD_ERROR;
 8001be2:	2317      	movs	r3, #23
 8001be4:	e26c      	b.n	80020c0 <packetRead+0x10d0>
				break;

				// Set manual key speed
				case CMD_KEY_SPEED:
				{
					if(length == 3){ // 1 byte key value + 2 byte define
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	d116      	bne.n	8001c1a <packetRead+0xc2a>
						int temp_pointer = 2;
 8001bec:	2302      	movs	r3, #2
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
						int32_t speed = (int32_t)message[temp_pointer];
 8001bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
						// check limit
						if ((speed < SHIFT_SPEED_MIN) || (speed > SHIFT_SPEED_MAX)) {
 8001bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	dd02      	ble.n	8001c06 <packetRead+0xc16>
 8001c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c02:	2b0e      	cmp	r3, #14
 8001c04:	dd01      	ble.n	8001c0a <packetRead+0xc1a>
							return CMD_ERROR;
 8001c06:	2317      	movs	r3, #23
 8001c08:	e25a      	b.n	80020c0 <packetRead+0x10d0>
						}
						duty_cmd->key_speed = speed;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c0e:	605a      	str	r2, [r3, #4]
						current_key_speed1 = speed;
 8001c10:	4a49      	ldr	r2, [pc, #292]	; (8001d38 <packetRead+0xd48>)
 8001c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c14:	6013      	str	r3, [r2, #0]
						return CMD_KEY_SPEED;
 8001c16:	2316      	movs	r3, #22
 8001c18:	e252      	b.n	80020c0 <packetRead+0x10d0>
					}else{
						return CMD_ERROR;
 8001c1a:	2317      	movs	r3, #23
 8001c1c:	e250      	b.n	80020c0 <packetRead+0x10d0>
				break;

				// Set test mode
				case CMD_MOTOR_TEST:
				{
					if(length == 3){ // 1byte key mode + 2 byte define
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d117      	bne.n	8001c54 <packetRead+0xc64>
						int temp_pointer = 2;
 8001c24:	2302      	movs	r3, #2
 8001c26:	623b      	str	r3, [r7, #32]
						uint8_t test_key = message[temp_pointer];
 8001c28:	6a3b      	ldr	r3, [r7, #32]
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	77fb      	strb	r3, [r7, #31]
						if(test_key < 0 || test_key > 8){
 8001c32:	7ffb      	ldrb	r3, [r7, #31]
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d901      	bls.n	8001c3c <packetRead+0xc4c>
							return CMD_ERROR;
 8001c38:	2317      	movs	r3, #23
 8001c3a:	e241      	b.n	80020c0 <packetRead+0x10d0>
						}
						duty_cmd->test_key = test_key;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	7ffa      	ldrb	r2, [r7, #31]
 8001c40:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
						duty_cmd->robot_method = SCARA_METHOD_TEST;	
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	2203      	movs	r2, #3
 8001c48:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
						return CMD_MOTOR_TEST;
 8001c50:	230c      	movs	r3, #12
 8001c52:	e235      	b.n	80020c0 <packetRead+0x10d0>
					}else{
						return CMD_ERROR;
 8001c54:	2317      	movs	r3, #23
 8001c56:	e233      	b.n	80020c0 <packetRead+0x10d0>
				}
				break;

				case CMD_OBJECT_DETECTED:
				{
					if (length == 15){ // 3 int32_t number + 1 byte object type + 2 define byte
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b0f      	cmp	r3, #15
 8001c5c:	d160      	bne.n	8001d20 <packetRead+0xd30>
						temp_pointer = -2;
 8001c5e:	f06f 0301 	mvn.w	r3, #1
 8001c62:	637b      	str	r3, [r7, #52]	; 0x34
						duty_cmd->target_point.x = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c66:	3304      	adds	r3, #4
 8001c68:	637b      	str	r3, [r7, #52]	; 0x34
 8001c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	4413      	add	r3, r2
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fc56 	bl	8000524 <__aeabi_i2d>
 8001c78:	a32b      	add	r3, pc, #172	; (adr r3, 8001d28 <packetRead+0xd38>)
 8001c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7e:	f7fe fcbb 	bl	80005f8 <__aeabi_dmul>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	6839      	ldr	r1, [r7, #0]
 8001c88:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
						duty_cmd->target_point.y = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c8e:	3304      	adds	r3, #4
 8001c90:	637b      	str	r3, [r7, #52]	; 0x34
 8001c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fc42 	bl	8000524 <__aeabi_i2d>
 8001ca0:	a321      	add	r3, pc, #132	; (adr r3, 8001d28 <packetRead+0xd38>)
 8001ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca6:	f7fe fca7 	bl	80005f8 <__aeabi_dmul>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	6839      	ldr	r1, [r7, #0]
 8001cb0:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
						//duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
						duty_cmd->target_point.roll = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8001cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fc2e 	bl	8000524 <__aeabi_i2d>
 8001cc8:	a317      	add	r3, pc, #92	; (adr r3, 8001d28 <packetRead+0xd38>)
 8001cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cce:	f7fe fc93 	bl	80005f8 <__aeabi_dmul>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	6839      	ldr	r1, [r7, #0]
 8001cd8:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
						duty_cmd->target_point.object_type = message[temp_pointer+=4];
 8001cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cde:	3304      	adds	r3, #4
 8001ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	781a      	ldrb	r2, [r3, #0]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
						duty_cmd->target_point.packet_time_stamp = GET_MICROS;
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <packetRead+0xd4c>)
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <packetRead+0xd50>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4912      	ldr	r1, [pc, #72]	; (8001d44 <packetRead+0xd54>)
 8001cfa:	fba1 1303 	umull	r1, r3, r1, r3
 8001cfe:	0c9b      	lsrs	r3, r3, #18
 8001d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d04:	461a      	mov	r2, r3
 8001d06:	f04f 0300 	mov.w	r3, #0
 8001d0a:	6839      	ldr	r1, [r7, #0]
 8001d0c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	2204      	movs	r2, #4
 8001d14:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
					return CMD_OBJECT_DETECTED;
 8001d1c:	2319      	movs	r3, #25
 8001d1e:	e1cf      	b.n	80020c0 <packetRead+0x10d0>
						return CMD_ERROR;
 8001d20:	2317      	movs	r3, #23
 8001d22:	e1cd      	b.n	80020c0 <packetRead+0x10d0>
 8001d24:	f3af 8000 	nop.w
 8001d28:	a0000000 	.word	0xa0000000
 8001d2c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001d30:	2000fd30 	.word	0x2000fd30
 8001d34:	20000000 	.word	0x20000000
 8001d38:	20000060 	.word	0x20000060
 8001d3c:	e0001000 	.word	0xe0001000
 8001d40:	2000408c 	.word	0x2000408c
 8001d44:	431bde83 	.word	0x431bde83
				}
				break;

				case CMD_SETUP_CONVEYOR_SPEED:
				{
					if (length == 47) { // 11 int32_t number + 1 byte move type + 2 define byte
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2b2f      	cmp	r3, #47	; 0x2f
 8001d4c:	f040 80ea 	bne.w	8001f24 <packetRead+0xf34>
						temp_pointer = -2;
 8001d50:	f06f 0301 	mvn.w	r3, #1
 8001d54:	637b      	str	r3, [r7, #52]	; 0x34
						conveyor_speed           = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d58:	3304      	adds	r3, #4
 8001d5a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4413      	add	r3, r2
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fbdd 	bl	8000524 <__aeabi_i2d>
 8001d6a:	a3ad      	add	r3, pc, #692	; (adr r3, 8002020 <packetRead+0x1030>)
 8001d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d70:	f7fe fc42 	bl	80005f8 <__aeabi_dmul>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	49ab      	ldr	r1, [pc, #684]	; (8002028 <packetRead+0x1038>)
 8001d7a:	e9c1 2300 	strd	r2, r3, [r1]
						PUT_DOWN_TIME_ON_SLOT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d80:	3304      	adds	r3, #4
 8001d82:	637b      	str	r3, [r7, #52]	; 0x34
 8001d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	4413      	add	r3, r2
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe fbc9 	bl	8000524 <__aeabi_i2d>
 8001d92:	a3a3      	add	r3, pc, #652	; (adr r3, 8002020 <packetRead+0x1030>)
 8001d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d98:	f7fe fc2e 	bl	80005f8 <__aeabi_dmul>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	49a2      	ldr	r1, [pc, #648]	; (800202c <packetRead+0x103c>)
 8001da2:	e9c1 2300 	strd	r2, r3, [r1]
						PUT_DOWN_TIME_ON_OBJECT	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da8:	3304      	adds	r3, #4
 8001daa:	637b      	str	r3, [r7, #52]	; 0x34
 8001dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	4413      	add	r3, r2
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fbb5 	bl	8000524 <__aeabi_i2d>
 8001dba:	a399      	add	r3, pc, #612	; (adr r3, 8002020 <packetRead+0x1030>)
 8001dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc0:	f7fe fc1a 	bl	80005f8 <__aeabi_dmul>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4999      	ldr	r1, [pc, #612]	; (8002030 <packetRead+0x1040>)
 8001dca:	e9c1 2300 	strd	r2, r3, [r1]
						PICK_UP_TIME_ON_OBJECT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8001dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	4413      	add	r3, r2
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fba1 	bl	8000524 <__aeabi_i2d>
 8001de2:	a38f      	add	r3, pc, #572	; (adr r3, 8002020 <packetRead+0x1030>)
 8001de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de8:	f7fe fc06 	bl	80005f8 <__aeabi_dmul>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4990      	ldr	r1, [pc, #576]	; (8002034 <packetRead+0x1044>)
 8001df2:	e9c1 2300 	strd	r2, r3, [r1]
						PICK_UP_TIME_ON_SLOT	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df8:	3304      	adds	r3, #4
 8001dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8001dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	4413      	add	r3, r2
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fb8d 	bl	8000524 <__aeabi_i2d>
 8001e0a:	a385      	add	r3, pc, #532	; (adr r3, 8002020 <packetRead+0x1030>)
 8001e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e10:	f7fe fbf2 	bl	80005f8 <__aeabi_dmul>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4987      	ldr	r1, [pc, #540]	; (8002038 <packetRead+0x1048>)
 8001e1a:	e9c1 2300 	strd	r2, r3, [r1]
						MOVE_TIME 				 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e20:	3304      	adds	r3, #4
 8001e22:	637b      	str	r3, [r7, #52]	; 0x34
 8001e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	4413      	add	r3, r2
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fb79 	bl	8000524 <__aeabi_i2d>
 8001e32:	a37b      	add	r3, pc, #492	; (adr r3, 8002020 <packetRead+0x1030>)
 8001e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e38:	f7fe fbde 	bl	80005f8 <__aeabi_dmul>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	497e      	ldr	r1, [pc, #504]	; (800203c <packetRead+0x104c>)
 8001e42:	e9c1 2300 	strd	r2, r3, [r1]
						ATTACH_TIME 			 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e48:	3304      	adds	r3, #4
 8001e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8001e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	4413      	add	r3, r2
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fb65 	bl	8000524 <__aeabi_i2d>
 8001e5a:	a371      	add	r3, pc, #452	; (adr r3, 8002020 <packetRead+0x1030>)
 8001e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e60:	f7fe fbca 	bl	80005f8 <__aeabi_dmul>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4975      	ldr	r1, [pc, #468]	; (8002040 <packetRead+0x1050>)
 8001e6a:	e9c1 2300 	strd	r2, r3, [r1]
						DETACH_TIME 			 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e70:	3304      	adds	r3, #4
 8001e72:	637b      	str	r3, [r7, #52]	; 0x34
 8001e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	4413      	add	r3, r2
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fb51 	bl	8000524 <__aeabi_i2d>
 8001e82:	a367      	add	r3, pc, #412	; (adr r3, 8002020 <packetRead+0x1030>)
 8001e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e88:	f7fe fbb6 	bl	80005f8 <__aeabi_dmul>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	496c      	ldr	r1, [pc, #432]	; (8002044 <packetRead+0x1054>)
 8001e92:	e9c1 2300 	strd	r2, r3, [r1]
						UP_HEIGHT 				 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e98:	3304      	adds	r3, #4
 8001e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8001e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fb3d 	bl	8000524 <__aeabi_i2d>
 8001eaa:	a35d      	add	r3, pc, #372	; (adr r3, 8002020 <packetRead+0x1030>)
 8001eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb0:	f7fe fba2 	bl	80005f8 <__aeabi_dmul>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4963      	ldr	r1, [pc, #396]	; (8002048 <packetRead+0x1058>)
 8001eba:	e9c1 2300 	strd	r2, r3, [r1]
						DOWN_HEIGHT_ON_OBJECT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4413      	add	r3, r2
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fb29 	bl	8000524 <__aeabi_i2d>
 8001ed2:	a353      	add	r3, pc, #332	; (adr r3, 8002020 <packetRead+0x1030>)
 8001ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed8:	f7fe fb8e 	bl	80005f8 <__aeabi_dmul>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	495a      	ldr	r1, [pc, #360]	; (800204c <packetRead+0x105c>)
 8001ee2:	e9c1 2300 	strd	r2, r3, [r1]
						DOWN_HEIGHT_ON_SLOT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ee8:	3304      	adds	r3, #4
 8001eea:	637b      	str	r3, [r7, #52]	; 0x34
 8001eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fb15 	bl	8000524 <__aeabi_i2d>
 8001efa:	a349      	add	r3, pc, #292	; (adr r3, 8002020 <packetRead+0x1030>)
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	f7fe fb7a 	bl	80005f8 <__aeabi_dmul>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4951      	ldr	r1, [pc, #324]	; (8002050 <packetRead+0x1060>)
 8001f0a:	e9c1 2300 	strd	r2, r3, [r1]
						pnp_move_option 		 = message[temp_pointer+=4];
 8001f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f10:	3304      	adds	r3, #4
 8001f12:	637b      	str	r3, [r7, #52]	; 0x34
 8001f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	4413      	add	r3, r2
 8001f1a:	781a      	ldrb	r2, [r3, #0]
 8001f1c:	4b4d      	ldr	r3, [pc, #308]	; (8002054 <packetRead+0x1064>)
 8001f1e:	701a      	strb	r2, [r3, #0]
						return CMD_SETUP_CONVEYOR_SPEED;
 8001f20:	231a      	movs	r3, #26
 8001f22:	e0cd      	b.n	80020c0 <packetRead+0x10d0>
					}else{
						return CMD_ERROR;
 8001f24:	2317      	movs	r3, #23
 8001f26:	e0cb      	b.n	80020c0 <packetRead+0x10d0>
					}
				}
				break;
				case CMD_GCODE_CONFIGURE:
				{
					if(length == 18) { // 4 int32_t number + 2 define byte
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2b12      	cmp	r3, #18
 8001f2c:	d154      	bne.n	8001fd8 <packetRead+0xfe8>
						temp_pointer = -2;
 8001f2e:	f06f 0301 	mvn.w	r3, #1
 8001f32:	637b      	str	r3, [r7, #52]	; 0x34
						offset_x = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f36:	3304      	adds	r3, #4
 8001f38:	637b      	str	r3, [r7, #52]	; 0x34
 8001f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4413      	add	r3, r2
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe faee 	bl	8000524 <__aeabi_i2d>
 8001f48:	a335      	add	r3, pc, #212	; (adr r3, 8002020 <packetRead+0x1030>)
 8001f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4e:	f7fe fb53 	bl	80005f8 <__aeabi_dmul>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4940      	ldr	r1, [pc, #256]	; (8002058 <packetRead+0x1068>)
 8001f58:	e9c1 2300 	strd	r2, r3, [r1]
						offset_y = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5e:	3304      	adds	r3, #4
 8001f60:	637b      	str	r3, [r7, #52]	; 0x34
 8001f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	4413      	add	r3, r2
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fada 	bl	8000524 <__aeabi_i2d>
 8001f70:	a32b      	add	r3, pc, #172	; (adr r3, 8002020 <packetRead+0x1030>)
 8001f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f76:	f7fe fb3f 	bl	80005f8 <__aeabi_dmul>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4937      	ldr	r1, [pc, #220]	; (800205c <packetRead+0x106c>)
 8001f80:	e9c1 2300 	strd	r2, r3, [r1]
						offset_z = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f86:	3304      	adds	r3, #4
 8001f88:	637b      	str	r3, [r7, #52]	; 0x34
 8001f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	4413      	add	r3, r2
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fac6 	bl	8000524 <__aeabi_i2d>
 8001f98:	a321      	add	r3, pc, #132	; (adr r3, 8002020 <packetRead+0x1030>)
 8001f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9e:	f7fe fb2b 	bl	80005f8 <__aeabi_dmul>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	492e      	ldr	r1, [pc, #184]	; (8002060 <packetRead+0x1070>)
 8001fa8:	e9c1 2300 	strd	r2, r3, [r1]
						roll_angle =(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fae:	3304      	adds	r3, #4
 8001fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8001fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fab2 	bl	8000524 <__aeabi_i2d>
 8001fc0:	a317      	add	r3, pc, #92	; (adr r3, 8002020 <packetRead+0x1030>)
 8001fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc6:	f7fe fb17 	bl	80005f8 <__aeabi_dmul>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4925      	ldr	r1, [pc, #148]	; (8002064 <packetRead+0x1074>)
 8001fd0:	e9c1 2300 	strd	r2, r3, [r1]
						return CMD_GCODE_CONFIGURE;
 8001fd4:	2312      	movs	r3, #18
 8001fd6:	e073      	b.n	80020c0 <packetRead+0x10d0>
					}else{
						return CMD_ERROR;
 8001fd8:	2317      	movs	r3, #23
 8001fda:	e071      	b.n	80020c0 <packetRead+0x10d0>
					}
				}
				break;
				case CMD_GCODE_RUN:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RUN;
 8001fe8:	2314      	movs	r3, #20
 8001fea:	e069      	b.n	80020c0 <packetRead+0x10d0>
				}
				break;
				case CMD_GCODE_STOP:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_STOP;
 8001ff8:	230e      	movs	r3, #14
 8001ffa:	e061      	b.n	80020c0 <packetRead+0x10d0>
				}
				break;
				case CMD_GCODE_PAUSE:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	2202      	movs	r2, #2
 8002000:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_PAUSE;
 8002008:	230f      	movs	r3, #15
 800200a:	e059      	b.n	80020c0 <packetRead+0x10d0>
				}
				break;
				case CMD_GCODE_RESUME:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	2202      	movs	r2, #2
 8002010:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RESUME;
 8002018:	2313      	movs	r3, #19
 800201a:	e051      	b.n	80020c0 <packetRead+0x10d0>
 800201c:	f3af 8000 	nop.w
 8002020:	a0000000 	.word	0xa0000000
 8002024:	3eb0c6f7 	.word	0x3eb0c6f7
 8002028:	20000058 	.word	0x20000058
 800202c:	20000008 	.word	0x20000008
 8002030:	20000010 	.word	0x20000010
 8002034:	20000018 	.word	0x20000018
 8002038:	20000020 	.word	0x20000020
 800203c:	20000028 	.word	0x20000028
 8002040:	20000030 	.word	0x20000030
 8002044:	20000038 	.word	0x20000038
 8002048:	20000040 	.word	0x20000040
 800204c:	20000048 	.word	0x20000048
 8002050:	20000050 	.word	0x20000050
 8002054:	20000064 	.word	0x20000064
 8002058:	20008fa0 	.word	0x20008fa0
 800205c:	2000fd48 	.word	0x2000fd48
 8002060:	2000fd38 	.word	0x2000fd38
 8002064:	20008f98 	.word	0x20008f98
				}
				break;
				case CMD_STEP_ON_OFF:
				{
					if(length == 3){ //1 byte status + 2 define byte
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b03      	cmp	r3, #3
 800206c:	d121      	bne.n	80020b2 <packetRead+0x10c2>
						temp_pointer = 2;
 800206e:	2302      	movs	r3, #2
 8002070:	637b      	str	r3, [r7, #52]	; 0x34
						if(message[temp_pointer] == 1){
 8002072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4413      	add	r3, r2
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d109      	bne.n	8002092 <packetRead+0x10a2>
							step_status = 1;
 800207e:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <packetRead+0x10d8>)
 8002080:	2201      	movs	r2, #1
 8002082:	701a      	strb	r2, [r3, #0]
							HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8002084:	2200      	movs	r2, #0
 8002086:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800208a:	4810      	ldr	r0, [pc, #64]	; (80020cc <packetRead+0x10dc>)
 800208c:	f00a f954 	bl	800c338 <HAL_GPIO_WritePin>
 8002090:	e011      	b.n	80020b6 <packetRead+0x10c6>
						}else if(message[temp_pointer] == 0){
 8002092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4413      	add	r3, r2
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10b      	bne.n	80020b6 <packetRead+0x10c6>
							step_status = 0;
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <packetRead+0x10d8>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	701a      	strb	r2, [r3, #0]
							HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET);
 80020a4:	2201      	movs	r2, #1
 80020a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020aa:	4808      	ldr	r0, [pc, #32]	; (80020cc <packetRead+0x10dc>)
 80020ac:	f00a f944 	bl	800c338 <HAL_GPIO_WritePin>
 80020b0:	e001      	b.n	80020b6 <packetRead+0x10c6>
						}
					}else{
						return CMD_ERROR;
 80020b2:	2317      	movs	r3, #23
 80020b4:	e004      	b.n	80020c0 <packetRead+0x10d0>
					}
					return CMD_STEP_ON_OFF;
 80020b6:	230d      	movs	r3, #13
 80020b8:	e002      	b.n	80020c0 <packetRead+0x10d0>
				}
				break;
				//Unknow command id
				default:
				{
					return CMD_ERROR;
 80020ba:	2317      	movs	r3, #23
 80020bc:	e000      	b.n	80020c0 <packetRead+0x10d0>
        break;

        //unknow protocol id
        default:
        {
            return PROTOCOL_ERROR;
 80020be:	2318      	movs	r3, #24
        }
    }
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3738      	adds	r7, #56	; 0x38
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	2000fd20 	.word	0x2000fd20
 80020cc:	40020000 	.word	0x40020000

080020d0 <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail, int32_t *detail_length) {
 80020d0:	b082      	sub	sp, #8
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b0e2      	sub	sp, #392	; 0x188
 80020d6:	af2e      	add	r7, sp, #184	; 0xb8
 80020d8:	4601      	mov	r1, r0
 80020da:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 80020de:	e880 000c 	stmia.w	r0, {r2, r3}
 80020e2:	460b      	mov	r3, r1
 80020e4:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	2b1b      	cmp	r3, #27
 80020ea:	f200 818e 	bhi.w	800240a <commandReply+0x33a>
 80020ee:	a201      	add	r2, pc, #4	; (adr r2, 80020f4 <commandReply+0x24>)
 80020f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f4:	08002165 	.word	0x08002165
 80020f8:	08002165 	.word	0x08002165
 80020fc:	08002165 	.word	0x08002165
 8002100:	08002165 	.word	0x08002165
 8002104:	08002165 	.word	0x08002165
 8002108:	08002165 	.word	0x08002165
 800210c:	08002165 	.word	0x08002165
 8002110:	0800216d 	.word	0x0800216d
 8002114:	080021e7 	.word	0x080021e7
 8002118:	0800221b 	.word	0x0800221b
 800211c:	080022b1 	.word	0x080022b1
 8002120:	080022db 	.word	0x080022db
 8002124:	08002165 	.word	0x08002165
 8002128:	080023af 	.word	0x080023af
 800212c:	0800233d 	.word	0x0800233d
 8002130:	0800233d 	.word	0x0800233d
 8002134:	0800233d 	.word	0x0800233d
 8002138:	0800233d 	.word	0x0800233d
 800213c:	0800231b 	.word	0x0800231b
 8002140:	0800233d 	.word	0x0800233d
 8002144:	0800233d 	.word	0x0800233d
 8002148:	08002345 	.word	0x08002345
 800214c:	0800234d 	.word	0x0800234d
 8002150:	0800238d 	.word	0x0800238d
 8002154:	0800240b 	.word	0x0800240b
 8002158:	08002165 	.word	0x08002165
 800215c:	080022d3 	.word	0x080022d3
 8002160:	080022e3 	.word	0x080022e3
	case CMD_MOTOR_TEST:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_OBJECT_DETECTED:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 8002164:	2309      	movs	r3, #9
 8002166:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 800216a:	e15e      	b.n	800242a <commandReply+0x35a>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.arc_dir) {
 800216c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002170:	2b01      	cmp	r3, #1
 8002172:	d110      	bne.n	8002196 <commandReply+0xc6>
				scaraSetOutput(1);
 8002174:	2001      	movs	r0, #1
 8002176:	f008 fa4b 	bl	800a610 <scaraSetOutput>
				// strcpy( (char *)detail, "Output ON");
				// detail_length += 9;
				detail[(*detail_length)++] = OUTPUT_ON;
 800217a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	1c59      	adds	r1, r3, #1
 8002182:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002186:	6011      	str	r1, [r2, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800218e:	4413      	add	r3, r2
 8002190:	220d      	movs	r2, #13
 8002192:	701a      	strb	r2, [r3, #0]
 8002194:	e023      	b.n	80021de <commandReply+0x10e>
			} else if (0 == duty_cmd.arc_dir) {
 8002196:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800219a:	2b00      	cmp	r3, #0
 800219c:	d110      	bne.n	80021c0 <commandReply+0xf0>
				scaraSetOutput(0);
 800219e:	2000      	movs	r0, #0
 80021a0:	f008 fa36 	bl	800a610 <scaraSetOutput>
				detail[(*detail_length)++] = OUTPUT_OFF;
 80021a4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	1c59      	adds	r1, r3, #1
 80021ac:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80021b0:	6011      	str	r1, [r2, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80021b8:	4413      	add	r3, r2
 80021ba:	220e      	movs	r2, #14
 80021bc:	701a      	strb	r2, [r3, #0]
 80021be:	e00e      	b.n	80021de <commandReply+0x10e>
			} else {
				// strcpy( (char *)detail, "Wrong Value");
				// detail_length += 11;
				detail[(*detail_length)++] = WRONG_OUTPUT_VALUE ;
 80021c0:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	1c59      	adds	r1, r3, #1
 80021c8:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80021cc:	6011      	str	r1, [r2, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80021d4:	4413      	add	r3, r2
 80021d6:	2211      	movs	r2, #17
 80021d8:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 80021da:	2307      	movs	r3, #7
 80021dc:	e127      	b.n	800242e <commandReply+0x35e>
			}
			ret = RPD_OK;
 80021de:	2308      	movs	r3, #8
 80021e0:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 80021e4:	e121      	b.n	800242a <commandReply+0x35a>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 80021e6:	f008 fa75 	bl	800a6d4 <scaraGetMode>
 80021ea:	4603      	mov	r3, r0
 80021ec:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			current_state	 = scaraGetDutyState();
 80021f0:	f008 fa88 	bl	800a704 <scaraGetDutyState>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 80021fa:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d107      	bne.n	8002212 <commandReply+0x142>
 8002202:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8002206:	2b00      	cmp	r3, #0
 8002208:	d103      	bne.n	8002212 <commandReply+0x142>
				ret = RPD_IDLE;
 800220a:	2300      	movs	r3, #0
 800220c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 8002210:	e10b      	b.n	800242a <commandReply+0x35a>
				ret = RPD_BUSY;
 8002212:	2301      	movs	r3, #1
 8002214:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002218:	e107      	b.n	800242a <commandReply+0x35a>
	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			if(position_type == REAL_POSITION_DATA || position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 800221a:	4b88      	ldr	r3, [pc, #544]	; (800243c <commandReply+0x36c>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <commandReply+0x15a>
 8002222:	4b86      	ldr	r3, [pc, #536]	; (800243c <commandReply+0x36c>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d113      	bne.n	8002252 <commandReply+0x182>
				lowlayer_readTruePosition(&position);
 800222a:	f107 0308 	add.w	r3, r7, #8
 800222e:	4618      	mov	r0, r3
 8002230:	f003 ff1a 	bl	8006068 <lowlayer_readTruePosition>
				kinematicForward(&position);
 8002234:	f107 0308 	add.w	r3, r7, #8
 8002238:	4618      	mov	r0, r3
 800223a:	f002 ffd9 	bl	80051f0 <kinematicForward>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 800223e:	4b7f      	ldr	r3, [pc, #508]	; (800243c <commandReply+0x36c>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d11e      	bne.n	8002284 <commandReply+0x1b4>
					scaraUpdatePosition(&position);
 8002246:	f107 0308 	add.w	r3, r7, #8
 800224a:	4618      	mov	r0, r3
 800224c:	f008 fa32 	bl	800a6b4 <scaraUpdatePosition>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 8002250:	e018      	b.n	8002284 <commandReply+0x1b4>
				}
			}else if(position_type == ESTIMATE_POSITION_DATA){
 8002252:	4b7a      	ldr	r3, [pc, #488]	; (800243c <commandReply+0x36c>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d105      	bne.n	8002266 <commandReply+0x196>
				scaraGetPosition(&position);
 800225a:	f107 0308 	add.w	r3, r7, #8
 800225e:	4618      	mov	r0, r3
 8002260:	f008 fa18 	bl	800a694 <scaraGetPosition>
 8002264:	e00e      	b.n	8002284 <commandReply+0x1b4>
			}else{
				detail[(*detail_length)++] = WRONG_READ_POSITION_TYPE;
 8002266:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	1c59      	adds	r1, r3, #1
 800226e:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002272:	6011      	str	r1, [r2, #0]
 8002274:	461a      	mov	r2, r3
 8002276:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800227a:	4413      	add	r3, r2
 800227c:	2212      	movs	r2, #18
 800227e:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 8002280:	2307      	movs	r3, #7
 8002282:	e0d4      	b.n	800242e <commandReply+0x35e>
			}
			*detail_length = scaraPosition_packaging(detail, position);
 8002284:	4668      	mov	r0, sp
 8002286:	f107 0310 	add.w	r3, r7, #16
 800228a:	22b8      	movs	r2, #184	; 0xb8
 800228c:	4619      	mov	r1, r3
 800228e:	f013 fe6f 	bl	8015f70 <memcpy>
 8002292:	f107 0308 	add.w	r3, r7, #8
 8002296:	cb0c      	ldmia	r3, {r2, r3}
 8002298:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 800229c:	f008 fa64 	bl	800a768 <scaraPosition_packaging>
 80022a0:	4602      	mov	r2, r0
 80022a2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80022a6:	601a      	str	r2, [r3, #0]
			ret =  RPD_POSITION;
 80022a8:	2302      	movs	r3, #2
 80022aa:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 80022ae:	e0bc      	b.n	800242a <commandReply+0x35a>
	case CMD_TEST_METHOD_SETTING:
		detail[(*detail_length)++] = TEST_VALUE_SETTING;
 80022b0:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	1c59      	adds	r1, r3, #1
 80022b8:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80022bc:	6011      	str	r1, [r2, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80022c4:	4413      	add	r3, r2
 80022c6:	2213      	movs	r2, #19
 80022c8:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 80022ca:	2308      	movs	r3, #8
 80022cc:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80022d0:	e0ab      	b.n	800242a <commandReply+0x35a>
	case CMD_SETUP_CONVEYOR_SPEED:
		ret = RPD_OK;
 80022d2:	2308      	movs	r3, #8
 80022d4:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80022d8:	e0a7      	b.n	800242a <commandReply+0x35a>
	case CMD_METHOD_CHANGE:
		ret = RPD_DUTY;
 80022da:	2309      	movs	r3, #9
 80022dc:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80022e0:	e0a3      	b.n	800242a <commandReply+0x35a>
	case CMD_GCODE:{
		if(point_counter == total_num_of_point){
 80022e2:	4b57      	ldr	r3, [pc, #348]	; (8002440 <commandReply+0x370>)
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	4b56      	ldr	r3, [pc, #344]	; (8002444 <commandReply+0x374>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d110      	bne.n	8002312 <commandReply+0x242>
			detail[(*detail_length)++] = GCODE_TRANSFER_FINISH;
 80022f0:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	1c59      	adds	r1, r3, #1
 80022f8:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80022fc:	6011      	str	r1, [r2, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002304:	4413      	add	r3, r2
 8002306:	2220      	movs	r2, #32
 8002308:	701a      	strb	r2, [r3, #0]
			ret = RPD_OK;
 800230a:	2308      	movs	r3, #8
 800230c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}else{
			ret = RPD_TRANSFER;
		}
	}
	break;
 8002310:	e08b      	b.n	800242a <commandReply+0x35a>
			ret = RPD_TRANSFER;
 8002312:	230a      	movs	r3, #10
 8002314:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	break;
 8002318:	e087      	b.n	800242a <commandReply+0x35a>
	case CMD_GCODE_CONFIGURE:
	{
		detail[(*detail_length)++] = GCODE_OFFSET_CONFIGURE;
 800231a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	1c59      	adds	r1, r3, #1
 8002322:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002326:	6011      	str	r1, [r2, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800232e:	4413      	add	r3, r2
 8002330:	2221      	movs	r2, #33	; 0x21
 8002332:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8002334:	2308      	movs	r3, #8
 8002336:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	break;
 800233a:	e076      	b.n	800242a <commandReply+0x35a>
	case CMD_GCODE_PAUSE:
	case CMD_JOB_PUSH_MOVE_LINE:
	case CMD_JOB_PUSH_MOVE_JOINT:
	case CMD_GCODE_RESUME:
	case CMD_GCODE_RUN:
		ret = RPD_DUTY;
 800233c:	2309      	movs	r3, #9
 800233e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002342:	e072      	b.n	800242a <commandReply+0x35a>
	case CMD_KEYBOARD:
		ret = RPD_DUTY;
 8002344:	2309      	movs	r3, #9
 8002346:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 800234a:	e06e      	b.n	800242a <commandReply+0x35a>
	case CMD_KEY_SPEED:{
		detail[(*detail_length)++] = MANUAL_SPEED;
 800234c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	1c59      	adds	r1, r3, #1
 8002354:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002358:	6011      	str	r1, [r2, #0]
 800235a:	461a      	mov	r2, r3
 800235c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002360:	4413      	add	r3, r2
 8002362:	2218      	movs	r2, #24
 8002364:	701a      	strb	r2, [r3, #0]
		detail[(*detail_length)++] = (uint8_t)(duty_cmd.key_speed);
 8002366:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800236a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	1c59      	adds	r1, r3, #1
 8002372:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002376:	6011      	str	r1, [r2, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800237e:	4413      	add	r3, r2
 8002380:	b2c2      	uxtb	r2, r0
 8002382:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8002384:	2308      	movs	r3, #8
 8002386:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
		break;
 800238a:	e04e      	b.n	800242a <commandReply+0x35a>
	case CMD_ERROR:{
		detail[(*detail_length)++] = CHECK_PARAMETER;
 800238c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	1c59      	adds	r1, r3, #1
 8002394:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002398:	6011      	str	r1, [r2, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80023a0:	4413      	add	r3, r2
 80023a2:	2217      	movs	r2, #23
 80023a4:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 80023a6:	2307      	movs	r3, #7
 80023a8:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
		break;
 80023ac:	e03d      	b.n	800242a <commandReply+0x35a>
	case CMD_STEP_ON_OFF:{
		if(step_status == 1){
 80023ae:	4b26      	ldr	r3, [pc, #152]	; (8002448 <commandReply+0x378>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d110      	bne.n	80023d8 <commandReply+0x308>
			detail[(*detail_length)++] = STEP_ON;
 80023b6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	1c59      	adds	r1, r3, #1
 80023be:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80023c2:	6011      	str	r1, [r2, #0]
 80023c4:	461a      	mov	r2, r3
 80023c6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80023ca:	4413      	add	r3, r2
 80023cc:	220f      	movs	r2, #15
 80023ce:	701a      	strb	r2, [r3, #0]
			ret = RPD_OK;
 80023d0:	2308      	movs	r3, #8
 80023d2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			ret = RPD_OK;
		}else{
			ret = RPD_ERROR;
		}
	}
	break;
 80023d6:	e028      	b.n	800242a <commandReply+0x35a>
		}else if(step_status == 0){
 80023d8:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <commandReply+0x378>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d110      	bne.n	8002402 <commandReply+0x332>
			detail[(*detail_length)++] = STEP_OFF;
 80023e0:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	1c59      	adds	r1, r3, #1
 80023e8:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80023ec:	6011      	str	r1, [r2, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80023f4:	4413      	add	r3, r2
 80023f6:	2210      	movs	r2, #16
 80023f8:	701a      	strb	r2, [r3, #0]
			ret = RPD_OK;
 80023fa:	2308      	movs	r3, #8
 80023fc:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	break;
 8002400:	e013      	b.n	800242a <commandReply+0x35a>
			ret = RPD_ERROR;
 8002402:	2307      	movs	r3, #7
 8002404:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	break;
 8002408:	e00f      	b.n	800242a <commandReply+0x35a>
	default:
		detail[(*detail_length)++] = UNKNOW_COMMAND;
 800240a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	1c59      	adds	r1, r3, #1
 8002412:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002416:	6011      	str	r1, [r2, #0]
 8002418:	461a      	mov	r2, r3
 800241a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800241e:	4413      	add	r3, r2
 8002420:	2219      	movs	r2, #25
 8002422:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 8002424:	2307      	movs	r3, #7
 8002426:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	return ret;
 800242a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 800242e:	4618      	mov	r0, r3
 8002430:	37d0      	adds	r7, #208	; 0xd0
 8002432:	46bd      	mov	sp, r7
 8002434:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002438:	b002      	add	sp, #8
 800243a:	4770      	bx	lr
 800243c:	2000fd30 	.word	0x2000fd30
 8002440:	20004404 	.word	0x20004404
 8002444:	20008fa8 	.word	0x20008fa8
 8002448:	2000fd20 	.word	0x2000fd20

0800244c <commandRespond1>:

int32_t				commandRespond1	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										int32_t detail_length,
										char *respond) {
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	4603      	mov	r3, r0
 800245a:	73fb      	strb	r3, [r7, #15]
	int32_t out_length = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
	respond[out_length++] = 0x28;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	617a      	str	r2, [r7, #20]
 8002466:	461a      	mov	r2, r3
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	4413      	add	r3, r2
 800246c:	2228      	movs	r2, #40	; 0x28
 800246e:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0;
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	617a      	str	r2, [r7, #20]
 8002476:	461a      	mov	r2, r3
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	4413      	add	r3, r2
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = RESPONSE_TRANSMISION;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	1c5a      	adds	r2, r3, #1
 8002484:	617a      	str	r2, [r7, #20]
 8002486:	461a      	mov	r2, r3
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	4413      	add	r3, r2
 800248c:	2202      	movs	r2, #2
 800248e:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = rpd;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	617a      	str	r2, [r7, #20]
 8002496:	461a      	mov	r2, r3
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	4413      	add	r3, r2
 800249c:	7bfa      	ldrb	r2, [r7, #15]
 800249e:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = id_command;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	617a      	str	r2, [r7, #20]
 80024a6:	461a      	mov	r2, r3
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	4413      	add	r3, r2
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	701a      	strb	r2, [r3, #0]
	if(detail_length != 0){
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00c      	beq.n	80024d2 <commandRespond1+0x86>
		memcpy(&respond[out_length], detail, detail_length);
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	6a3a      	ldr	r2, [r7, #32]
 80024bc:	4413      	add	r3, r2
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f013 fd54 	bl	8015f70 <memcpy>
		out_length += detail_length;
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	4413      	add	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	e007      	b.n	80024e2 <commandRespond1+0x96>
	}else{
		respond[out_length++] = NONE;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	617a      	str	r2, [r7, #20]
 80024d8:	461a      	mov	r2, r3
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	4413      	add	r3, r2
 80024de:	2227      	movs	r2, #39	; 0x27
 80024e0:	701a      	strb	r2, [r3, #0]
	}
	respond[out_length++] = 0x7d;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	617a      	str	r2, [r7, #20]
 80024e8:	461a      	mov	r2, r3
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	4413      	add	r3, r2
 80024ee:	227d      	movs	r2, #125	; 0x7d
 80024f0:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0x29;
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	617a      	str	r2, [r7, #20]
 80024f8:	461a      	mov	r2, r3
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	4413      	add	r3, r2
 80024fe:	2229      	movs	r2, #41	; 0x29
 8002500:	701a      	strb	r2, [r3, #0]
	respond[1] = out_length - 2;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	b2da      	uxtb	r2, r3
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	3301      	adds	r3, #1
 800250a:	3a02      	subs	r2, #2
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	701a      	strb	r2, [r3, #0]
	return out_length;
 8002510:	697b      	ldr	r3, [r7, #20]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b096      	sub	sp, #88	; 0x58
 8002520:	af02      	add	r7, sp, #8
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "%d, %s \r\n", line, message);
 8002528:	887a      	ldrh	r2, [r7, #2]
 800252a:	f107 0008 	add.w	r0, r7, #8
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	4613      	mov	r3, r2
 8002534:	4a17      	ldr	r2, [pc, #92]	; (8002594 <LOG_REPORT+0x78>)
 8002536:	213f      	movs	r1, #63	; 0x3f
 8002538:	f014 fc84 	bl	8016e44 <sniprintf>
 800253c:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 800253e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d101      	bne.n	800254a <LOG_REPORT+0x2e>
		return FALSE;
 8002546:	2300      	movs	r3, #0
 8002548:	e01f      	b.n	800258a <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 800254a:	f107 0308 	add.w	r3, r7, #8
 800254e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002550:	4619      	mov	r1, r3
 8002552:	4811      	ldr	r0, [pc, #68]	; (8002598 <LOG_REPORT+0x7c>)
 8002554:	f003 faa8 	bl	8005aa8 <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 8002558:	4810      	ldr	r0, [pc, #64]	; (800259c <LOG_REPORT+0x80>)
 800255a:	f009 fc63 	bl	800be24 <HAL_DMA_GetState>
 800255e:	4603      	mov	r3, r0
 8002560:	2b02      	cmp	r3, #2
 8002562:	d101      	bne.n	8002568 <LOG_REPORT+0x4c>
		return TRUE;
 8002564:	2301      	movs	r3, #1
 8002566:	e010      	b.n	800258a <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 8002568:	f44f 7280 	mov.w	r2, #256	; 0x100
 800256c:	490c      	ldr	r1, [pc, #48]	; (80025a0 <LOG_REPORT+0x84>)
 800256e:	480a      	ldr	r0, [pc, #40]	; (8002598 <LOG_REPORT+0x7c>)
 8002570:	f003 fac2 	bl	8005af8 <ringBuff_PopArray>
 8002574:	4603      	mov	r3, r0
 8002576:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800257a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800257e:	461a      	mov	r2, r3
 8002580:	4907      	ldr	r1, [pc, #28]	; (80025a0 <LOG_REPORT+0x84>)
 8002582:	4808      	ldr	r0, [pc, #32]	; (80025a4 <LOG_REPORT+0x88>)
 8002584:	f00c f9ea 	bl	800e95c <HAL_UART_Transmit_DMA>
	return TRUE;
 8002588:	2301      	movs	r3, #1
}
 800258a:	4618      	mov	r0, r3
 800258c:	3750      	adds	r7, #80	; 0x50
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	0801c220 	.word	0x0801c220
 8002598:	20002074 	.word	0x20002074
 800259c:	20010e38 	.word	0x20010e38
 80025a0:	2000fd68 	.word	0x2000fd68
 80025a4:	20010df8 	.word	0x20010df8

080025a8 <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_length, uint8_t*data_packet) {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]

	int32_t data_length = in_length - 3;
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	3b03      	subs	r3, #3
 80025b8:	617b      	str	r3, [r7, #20]
	uint16_t packet_length = *(uint16_t*)(&message_buff[1]);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80025c0:	827b      	strh	r3, [r7, #18]
	//check packet length
	if(packet_length == data_length && backup_available == 0){
 80025c2:	8a7b      	ldrh	r3, [r7, #18]
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d119      	bne.n	80025fe <unPackPayload+0x56>
 80025ca:	4b2d      	ldr	r3, [pc, #180]	; (8002680 <unPackPayload+0xd8>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d115      	bne.n	80025fe <unPackPayload+0x56>
		// check minimum lenght
		if (in_length < MIN_MESSAGE_LENGHT) {
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	dc02      	bgt.n	80025de <unPackPayload+0x36>
			return -1;
 80025d8:	f04f 33ff 	mov.w	r3, #4294967295
 80025dc:	e04c      	b.n	8002678 <unPackPayload+0xd0>
		}

		// check start char
		if(message_buff[0] != START_CHAR){
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b28      	cmp	r3, #40	; 0x28
 80025e4:	d002      	beq.n	80025ec <unPackPayload+0x44>
			return -1;
 80025e6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ea:	e045      	b.n	8002678 <unPackPayload+0xd0>
		}
		memcpy(data_packet, &message_buff[3], data_length - RECEIVE_END_LENGTH);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1cd9      	adds	r1, r3, #3
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	3b02      	subs	r3, #2
 80025f4:	461a      	mov	r2, r3
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f013 fcba 	bl	8015f70 <memcpy>
 80025fc:	e03a      	b.n	8002674 <unPackPayload+0xcc>
	}else if(packet_length != data_length && backup_available == 0){
 80025fe:	8a7b      	ldrh	r3, [r7, #18]
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	429a      	cmp	r2, r3
 8002604:	d01b      	beq.n	800263e <unPackPayload+0x96>
 8002606:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <unPackPayload+0xd8>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d117      	bne.n	800263e <unPackPayload+0x96>
		// check start char
		if(message_buff[0] != START_CHAR){
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b28      	cmp	r3, #40	; 0x28
 8002614:	d002      	beq.n	800261c <unPackPayload+0x74>
			return -1;
 8002616:	f04f 33ff 	mov.w	r3, #4294967295
 800261a:	e02d      	b.n	8002678 <unPackPayload+0xd0>
		}
		backup_available = 1;
 800261c:	4b18      	ldr	r3, [pc, #96]	; (8002680 <unPackPayload+0xd8>)
 800261e:	2201      	movs	r2, #1
 8002620:	701a      	strb	r2, [r3, #0]
		memcpy(data_packet, &message_buff[3], data_length);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	3303      	adds	r3, #3
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	4619      	mov	r1, r3
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f013 fca0 	bl	8015f70 <memcpy>
		backup_length = data_length;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	b29a      	uxth	r2, r3
 8002634:	4b13      	ldr	r3, [pc, #76]	; (8002684 <unPackPayload+0xdc>)
 8002636:	801a      	strh	r2, [r3, #0]
		return - 1;
 8002638:	f04f 33ff 	mov.w	r3, #4294967295
 800263c:	e01c      	b.n	8002678 <unPackPayload+0xd0>
	}else if(backup_available == 1){
 800263e:	4b10      	ldr	r3, [pc, #64]	; (8002680 <unPackPayload+0xd8>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d113      	bne.n	800266e <unPackPayload+0xc6>
		backup_available = 0;
 8002646:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <unPackPayload+0xd8>)
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
		memcpy(&data_packet[backup_length], message_buff, in_length);
 800264c:	4b0d      	ldr	r3, [pc, #52]	; (8002684 <unPackPayload+0xdc>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	461a      	mov	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	68f9      	ldr	r1, [r7, #12]
 800265a:	4618      	mov	r0, r3
 800265c:	f013 fc88 	bl	8015f70 <memcpy>
		data_length = backup_length + in_length;
 8002660:	4b08      	ldr	r3, [pc, #32]	; (8002684 <unPackPayload+0xdc>)
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	461a      	mov	r2, r3
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	4413      	add	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	e002      	b.n	8002674 <unPackPayload+0xcc>
	}else{
		return - 1;
 800266e:	f04f 33ff 	mov.w	r3, #4294967295
 8002672:	e001      	b.n	8002678 <unPackPayload+0xd0>
	}


	return data_length - RECEIVE_END_LENGTH;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	3b02      	subs	r3, #2
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	2000fe68 	.word	0x2000fe68
 8002684:	2000fe6a 	.word	0x2000fe6a

08002688 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	607b      	str	r3, [r7, #4]
 8002692:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <MX_DMA_Init+0x3c>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	4a0b      	ldr	r2, [pc, #44]	; (80026c4 <MX_DMA_Init+0x3c>)
 8002698:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800269c:	6313      	str	r3, [r2, #48]	; 0x30
 800269e:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <MX_DMA_Init+0x3c>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a6:	607b      	str	r3, [r7, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80026aa:	2200      	movs	r2, #0
 80026ac:	2105      	movs	r1, #5
 80026ae:	200f      	movs	r0, #15
 80026b0:	f009 f8dc 	bl	800b86c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80026b4:	200f      	movs	r0, #15
 80026b6:	f009 f8f5 	bl	800b8a4 <HAL_NVIC_EnableIRQ>

}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800

080026c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4a07      	ldr	r2, [pc, #28]	; (80026f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80026d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	4a06      	ldr	r2, [pc, #24]	; (80026f8 <vApplicationGetIdleTaskMemory+0x30>)
 80026de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026e6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	20004408 	.word	0x20004408
 80026f8:	2000445c 	.word	0x2000445c

080026fc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80026fc:	b5b0      	push	{r4, r5, r7, lr}
 80026fe:	b094      	sub	sp, #80	; 0x50
 8002700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 8002702:	2300      	movs	r3, #0
 8002704:	64bb      	str	r3, [r7, #72]	; 0x48
 8002706:	2300      	movs	r3, #0
 8002708:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 800270a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800270e:	4618      	mov	r0, r3
 8002710:	f010 f930 	bl	8012974 <osMutexCreate>
 8002714:	4603      	mov	r3, r0
 8002716:	4a1d      	ldr	r2, [pc, #116]	; (800278c <MX_FREERTOS_Init+0x90>)
 8002718:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 800271a:	2301      	movs	r3, #1
 800271c:	63bb      	str	r3, [r7, #56]	; 0x38
 800271e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002724:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002728:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 800272a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800272e:	2100      	movs	r1, #0
 8002730:	4618      	mov	r0, r3
 8002732:	f010 fa37 	bl	8012ba4 <osMailCreate>
 8002736:	4603      	mov	r3, r0
 8002738:	4a15      	ldr	r2, [pc, #84]	; (8002790 <MX_FREERTOS_Init+0x94>)
 800273a:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2060);
 800273c:	4b15      	ldr	r3, [pc, #84]	; (8002794 <MX_FREERTOS_Init+0x98>)
 800273e:	f107 041c 	add.w	r4, r7, #28
 8002742:	461d      	mov	r5, r3
 8002744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002748:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800274c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002750:	f107 031c 	add.w	r3, r7, #28
 8002754:	2100      	movs	r1, #0
 8002756:	4618      	mov	r0, r3
 8002758:	f010 f81f 	bl	801279a <osThreadCreate>
 800275c:	4603      	mov	r3, r0
 800275e:	4a0e      	ldr	r2, [pc, #56]	; (8002798 <MX_FREERTOS_Init+0x9c>)
 8002760:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 8002762:	4b0e      	ldr	r3, [pc, #56]	; (800279c <MX_FREERTOS_Init+0xa0>)
 8002764:	463c      	mov	r4, r7
 8002766:	461d      	mov	r5, r3
 8002768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800276a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800276c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002770:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 8002774:	463b      	mov	r3, r7
 8002776:	2100      	movs	r1, #0
 8002778:	4618      	mov	r0, r3
 800277a:	f010 f80e 	bl	801279a <osThreadCreate>
 800277e:	4603      	mov	r3, r0
 8002780:	4a07      	ldr	r2, [pc, #28]	; (80027a0 <MX_FREERTOS_Init+0xa4>)
 8002782:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002784:	bf00      	nop
 8002786:	3750      	adds	r7, #80	; 0x50
 8002788:	46bd      	mov	sp, r7
 800278a:	bdb0      	pop	{r4, r5, r7, pc}
 800278c:	2000fe70 	.word	0x2000fe70
 8002790:	2000fe74 	.word	0x2000fe74
 8002794:	0801c25c 	.word	0x0801c25c
 8002798:	2000fe6c 	.word	0x2000fe6c
 800279c:	0801c278 	.word	0x0801c278
 80027a0:	2000fe78 	.word	0x2000fe78
 80027a4:	00000000 	.word	0x00000000

080027a8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80027a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027ac:	f5ad 5d8f 	sub.w	sp, sp, #4576	; 0x11e0
 80027b0:	b087      	sub	sp, #28
 80027b2:	af6c      	add	r7, sp, #432	; 0x1b0
 80027b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027b8:	3b0c      	subs	r3, #12
 80027ba:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80027bc:	f012 fe4e 	bl	801545c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 80027c0:	2201      	movs	r2, #1
 80027c2:	2110      	movs	r1, #16
 80027c4:	48d2      	ldr	r0, [pc, #840]	; (8002b10 <StartDefaultTask+0x368>)
 80027c6:	f009 fdb7 	bl	800c338 <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 80027ca:	2300      	movs	r3, #0
 80027cc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80027d0:	f102 0207 	add.w	r2, r2, #7
 80027d4:	7013      	strb	r3, [r2, #0]
  int32_t					current_key_speed;
  double						run_time;

  SCARA_Pick_And_Place_Package Object[8];
  SCARA_Pick_And_Place_State  operation_state;
  uint8_t object_tail_pointer = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80027dc:	f102 0206 	add.w	r2, r2, #6
 80027e0:	7013      	strb	r3, [r2, #0]
  uint8_t object_head_pointer = 0;
 80027e2:	2300      	movs	r3, #0
 80027e4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80027e8:	f102 0205 	add.w	r2, r2, #5
 80027ec:	7013      	strb	r3, [r2, #0]
  double state_time = 0;
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80027fa:	f101 0118 	add.w	r1, r1, #24
 80027fe:	e9c1 2300 	strd	r2, r3, [r1]
  int run_point = 0;
 8002802:	2300      	movs	r3, #0
 8002804:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002808:	f102 0214 	add.w	r2, r2, #20
 800280c:	6013      	str	r3, [r2, #0]
  const SCARA_Slot_TypeDef SLot_Cordinate[NUM_OF_OBJECT] = {
 800280e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002812:	4ac0      	ldr	r2, [pc, #768]	; (8002b14 <StartDefaultTask+0x36c>)
 8002814:	4618      	mov	r0, r3
 8002816:	4611      	mov	r1, r2
 8002818:	2390      	movs	r3, #144	; 0x90
 800281a:	461a      	mov	r2, r3
 800281c:	f013 fba8 	bl	8015f70 <memcpy>
  		{257.2121f, -76.9947f, 0.0f} ,
  		{258.221f, -47.1851f, 0.0f} ,
		{260.695f, -17.075f, 0.0f} ,
		{260.4f, 13.66f, 0.0f}
  };
  const double placement_spacing = -34.0f;
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	4bbc      	ldr	r3, [pc, #752]	; (8002b18 <StartDefaultTask+0x370>)
 8002826:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800282a:	f101 0108 	add.w	r1, r1, #8
 800282e:	e9c1 2300 	strd	r2, r3, [r1]
  uint8_t Slot_Placement[NUM_OF_OBJECT] = {
 8002832:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002836:	3b08      	subs	r3, #8
 8002838:	4ab8      	ldr	r2, [pc, #736]	; (8002b1c <StartDefaultTask+0x374>)
 800283a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800283e:	6018      	str	r0, [r3, #0]
 8002840:	3304      	adds	r3, #4
 8002842:	8019      	strh	r1, [r3, #0]
		  0, 0, 0, 0, 0, 0
  };

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 8002844:	21eb      	movs	r1, #235	; 0xeb
 8002846:	48b6      	ldr	r0, [pc, #728]	; (8002b20 <StartDefaultTask+0x378>)
 8002848:	f7ff fe68 	bl	800251c <LOG_REPORT>

  // Init value
  current_method = scaraGetMethod();
 800284c:	f007 ff4e 	bl	800a6ec <scaraGetMethod>
 8002850:	4603      	mov	r3, r0
 8002852:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002856:	f102 021f 	add.w	r2, r2, #31
 800285a:	7013      	strb	r3, [r2, #0]
  current_mode	 = scaraGetMode();
 800285c:	f007 ff3a 	bl	800a6d4 <scaraGetMode>
 8002860:	4603      	mov	r3, r0
 8002862:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002866:	f102 021e 	add.w	r2, r2, #30
 800286a:	7013      	strb	r3, [r2, #0]
  current_duty_state	 = scaraGetDutyState();
 800286c:	f007 ff4a 	bl	800a704 <scaraGetDutyState>
 8002870:	4603      	mov	r3, r0
 8002872:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002876:	f102 021d 	add.w	r2, r2, #29
 800287a:	7013      	strb	r3, [r2, #0]

  // Start up robot
  scaraStartup();
 800287c:	f004 f910 	bl	8006aa0 <scaraStartup>
  osDelay(10);
 8002880:	200a      	movs	r0, #10
 8002882:	f00f ffd6 	bl	8012832 <osDelay>
//   positionNext.Theta2 = PI/3;
//   positionNext.D3 = 10;
//   positionNext.Theta4 = 0;
//   positionNext.t = 0;

  positionNext.Theta1 = -1.4345;
 8002886:	49a7      	ldr	r1, [pc, #668]	; (8002b24 <StartDefaultTask+0x37c>)
 8002888:	a399      	add	r3, pc, #612	; (adr r3, 8002af0 <StartDefaultTask+0x348>)
 800288a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
  positionNext.Theta2 = 1.7213f;
 8002892:	49a4      	ldr	r1, [pc, #656]	; (8002b24 <StartDefaultTask+0x37c>)
 8002894:	a398      	add	r3, pc, #608	; (adr r3, 8002af8 <StartDefaultTask+0x350>)
 8002896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
  positionNext.D3 = 9.826;
 800289e:	49a1      	ldr	r1, [pc, #644]	; (8002b24 <StartDefaultTask+0x37c>)
 80028a0:	a397      	add	r3, pc, #604	; (adr r3, 8002b00 <StartDefaultTask+0x358>)
 80028a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a6:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
  positionNext.Theta4 = 0.28676;
 80028aa:	499e      	ldr	r1, [pc, #632]	; (8002b24 <StartDefaultTask+0x37c>)
 80028ac:	a396      	add	r3, pc, #600	; (adr r3, 8002b08 <StartDefaultTask+0x360>)
 80028ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b2:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
  positionNext.t = 0;
 80028b6:	499b      	ldr	r1, [pc, #620]	; (8002b24 <StartDefaultTask+0x37c>)
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	f04f 0300 	mov.w	r3, #0
 80028c0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

  kinematicForward(&positionNext);
 80028c4:	4897      	ldr	r0, [pc, #604]	; (8002b24 <StartDefaultTask+0x37c>)
 80028c6:	f002 fc93 	bl	80051f0 <kinematicForward>
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 80028ca:	4897      	ldr	r0, [pc, #604]	; (8002b28 <StartDefaultTask+0x380>)
 80028cc:	f00b fc15 	bl	800e0fa <HAL_TIM_Base_Start_IT>

  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 80028d0:	f107 0308 	add.w	r3, r7, #8
 80028d4:	f04f 32ff 	mov.w	r2, #4294967295
 80028d8:	2101      	movs	r1, #1
 80028da:	4618      	mov	r0, r3
 80028dc:	f00f fffe 	bl	80128dc <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80028e6:	f102 0204 	add.w	r2, r2, #4
 80028ea:	6013      	str	r3, [r2, #0]
	  respond_packed_lenght = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80028f2:	6013      	str	r3, [r2, #0]
	  infor_lenght			= 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	f8c7 3ffc 	str.w	r3, [r7, #4092]	; 0xffc
	  infor_packed_lenght	= 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f8c7 3ff8 	str.w	r3, [r7, #4088]	; 0xff8
	  task_usb_lenght		= 0;
 8002900:	2300      	movs	r3, #0
 8002902:	f8c7 3ff4 	str.w	r3, [r7, #4084]	; 0xff4
	  usb_lenght			= 0;
 8002906:	2300      	movs	r3, #0
 8002908:	f8c7 3ff0 	str.w	r3, [r7, #4080]	; 0xff0
	  total_respond_length  = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002912:	6013      	str	r3, [r2, #0]
	  detail_ptr 			= 0;
 8002914:	2300      	movs	r3, #0
 8002916:	f8c7 3fec 	str.w	r3, [r7, #4076]	; 0xfec
	  // Update new position
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800291a:	4a84      	ldr	r2, [pc, #528]	; (8002b2c <StartDefaultTask+0x384>)
 800291c:	4b84      	ldr	r3, [pc, #528]	; (8002b30 <StartDefaultTask+0x388>)
 800291e:	4610      	mov	r0, r2
 8002920:	4619      	mov	r1, r3
 8002922:	23c0      	movs	r3, #192	; 0xc0
 8002924:	461a      	mov	r2, r3
 8002926:	f013 fb23 	bl	8015f70 <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 800292a:	4a81      	ldr	r2, [pc, #516]	; (8002b30 <StartDefaultTask+0x388>)
 800292c:	4b7d      	ldr	r3, [pc, #500]	; (8002b24 <StartDefaultTask+0x37c>)
 800292e:	4610      	mov	r0, r2
 8002930:	4619      	mov	r1, r3
 8002932:	23c0      	movs	r3, #192	; 0xc0
 8002934:	461a      	mov	r2, r3
 8002936:	f013 fb1b 	bl	8015f70 <memcpy>

	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 800293a:	4b7e      	ldr	r3, [pc, #504]	; (8002b34 <StartDefaultTask+0x38c>)
 800293c:	6819      	ldr	r1, [r3, #0]
 800293e:	f607 73c4 	addw	r3, r7, #4036	; 0xfc4
 8002942:	2200      	movs	r2, #0
 8002944:	4618      	mov	r0, r3
 8002946:	f010 f9d9 	bl	8012cfc <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 800294a:	f8d7 3fc4 	ldr.w	r3, [r7, #4036]	; 0xfc4
 800294e:	2b20      	cmp	r3, #32
 8002950:	d119      	bne.n	8002986 <StartDefaultTask+0x1de>
		   dataMail = ret_mail.value.p;
 8002952:	f8d7 3fc8 	ldr.w	r3, [r7, #4040]	; 0xfc8
 8002956:	f8c7 3fe8 	str.w	r3, [r7, #4072]	; 0xfe8
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 800295a:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800295e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8002962:	f8d7 1fe8 	ldr.w	r1, [r7, #4072]	; 0xfe8
 8002966:	4618      	mov	r0, r3
 8002968:	f013 fb02 	bl	8015f70 <memcpy>
		   isNewDuty = TRUE;
 800296c:	2301      	movs	r3, #1
 800296e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002972:	f102 0207 	add.w	r2, r2, #7
 8002976:	7013      	strb	r3, [r2, #0]
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 8002978:	4b6e      	ldr	r3, [pc, #440]	; (8002b34 <StartDefaultTask+0x38c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f8d7 1fe8 	ldr.w	r1, [r7, #4072]	; 0xfe8
 8002980:	4618      	mov	r0, r3
 8002982:	f010 fa2f 	bl	8012de4 <osMailFree>
	  }
	  if(isNewDuty) {
 8002986:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800298a:	f103 0307 	add.w	r3, r3, #7
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 847e 	beq.w	8003292 <StartDefaultTask+0xaea>
		  if (duty_cmd.change_method == TRUE) {
 8002996:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b01      	cmp	r3, #1
 800299e:	f040 8144 	bne.w	8002c2a <StartDefaultTask+0x482>
			  //vPortFree(Gcode_Cor);
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 80029a2:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80029a6:	785b      	ldrb	r3, [r3, #1]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d132      	bne.n	8002a12 <StartDefaultTask+0x26a>
				  // Need add check condition idle in each method
				  current_method = SCARA_METHOD_MANUAL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80029b2:	f102 021f 	add.w	r2, r2, #31
 80029b6:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_READY;
 80029b8:	2300      	movs	r3, #0
 80029ba:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80029be:	f102 021d 	add.w	r2, r2, #29
 80029c2:	7013      	strb	r3, [r2, #0]
				detail_array[0] = MANUAL_METHOD;
 80029c4:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80029c8:	221a      	movs	r2, #26
 80029ca:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80029cc:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80029d0:	6899      	ldr	r1, [r3, #8]
 80029d2:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 80029d6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4413      	add	r3, r2
 80029de:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	2301      	movs	r3, #1
 80029e6:	2008      	movs	r0, #8
 80029e8:	f7ff fd30 	bl	800244c <commandRespond1>
 80029ec:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80029f0:	f103 0304 	add.w	r3, r3, #4
 80029f4:	6018      	str	r0, [r3, #0]
				total_respond_length += respond_lenght;
 80029f6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002a00:	f103 0304 	add.w	r3, r3, #4
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4413      	add	r3, r2
 8002a08:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	f000 bc3a 	b.w	8003286 <StartDefaultTask+0xade>
			  } else if (SCARA_METHOD_SEMI_AUTO == duty_cmd.robot_method) {
 8002a12:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002a16:	785b      	ldrb	r3, [r3, #1]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d132      	bne.n	8002a82 <StartDefaultTask+0x2da>
				  current_method = SCARA_METHOD_SEMI_AUTO;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a22:	f102 021f 	add.w	r2, r2, #31
 8002a26:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a2e:	f102 021d 	add.w	r2, r2, #29
 8002a32:	7013      	strb	r3, [r2, #0]
				detail_array[0] = SEMI_AUTO_METHOD;
 8002a34:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8002a38:	221b      	movs	r2, #27
 8002a3a:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002a3c:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002a40:	6899      	ldr	r1, [r3, #8]
 8002a42:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002a46:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	2301      	movs	r3, #1
 8002a56:	2008      	movs	r0, #8
 8002a58:	f7ff fcf8 	bl	800244c <commandRespond1>
 8002a5c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002a60:	f103 0304 	add.w	r3, r3, #4
 8002a64:	6018      	str	r0, [r3, #0]
				total_respond_length += respond_lenght;
 8002a66:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002a70:	f103 0304 	add.w	r3, r3, #4
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4413      	add	r3, r2
 8002a78:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	f000 bc02 	b.w	8003286 <StartDefaultTask+0xade>
			  } else if (SCARA_METHOD_GCODE == duty_cmd.robot_method) {
 8002a82:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002a86:	785b      	ldrb	r3, [r3, #1]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d155      	bne.n	8002b38 <StartDefaultTask+0x390>
//				  Gcode_Cor = pvPortMalloc(total_num_of_point*sizeof(SCARA_Gcode_Cor_TypeDef));
//					if(Gcode_Cor == NULL){
//					  int t =2;
//					}
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a92:	f102 021d 	add.w	r2, r2, #29
 8002a96:	7013      	strb	r3, [r2, #0]
				  current_method = SCARA_METHOD_GCODE;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a9e:	f102 021f 	add.w	r2, r2, #31
 8002aa2:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = GCODE_METHOD;
 8002aa4:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8002aa8:	221c      	movs	r2, #28
 8002aaa:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002aac:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002ab0:	6899      	ldr	r1, [r3, #8]
 8002ab2:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002ab6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4413      	add	r3, r2
 8002abe:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	2008      	movs	r0, #8
 8002ac8:	f7ff fcc0 	bl	800244c <commandRespond1>
 8002acc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002ad0:	f103 0304 	add.w	r3, r3, #4
 8002ad4:	6018      	str	r0, [r3, #0]
				total_respond_length += respond_lenght;
 8002ad6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002ae0:	f103 0304 	add.w	r3, r3, #4
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	e3ca      	b.n	8003286 <StartDefaultTask+0xade>
 8002af0:	45a1cac1 	.word	0x45a1cac1
 8002af4:	bff6f3b6 	.word	0xbff6f3b6
 8002af8:	e0000000 	.word	0xe0000000
 8002afc:	3ffb8a71 	.word	0x3ffb8a71
 8002b00:	78d4fdf4 	.word	0x78d4fdf4
 8002b04:	4023a6e9 	.word	0x4023a6e9
 8002b08:	9d7342ee 	.word	0x9d7342ee
 8002b0c:	3fd25a46 	.word	0x3fd25a46
 8002b10:	40020400 	.word	0x40020400
 8002b14:	0801c378 	.word	0x0801c378
 8002b18:	c0410000 	.word	0xc0410000
 8002b1c:	0801c408 	.word	0x0801c408
 8002b20:	0801c294 	.word	0x0801c294
 8002b24:	20010c78 	.word	0x20010c78
 8002b28:	20010db8 	.word	0x20010db8
 8002b2c:	20010978 	.word	0x20010978
 8002b30:	20010af8 	.word	0x20010af8
 8002b34:	2000fe74 	.word	0x2000fe74
			  }else if(SCARA_METHOD_TEST == duty_cmd.robot_method){
 8002b38:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002b3c:	785b      	ldrb	r3, [r3, #1]
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d13b      	bne.n	8002bba <StartDefaultTask+0x412>
				  test_value[0] = 0;
 8002b42:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002b46:	2200      	movs	r2, #0
 8002b48:	701a      	strb	r2, [r3, #0]
				  test_value[1] = 0;
 8002b4a:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002b4e:	2200      	movs	r2, #0
 8002b50:	705a      	strb	r2, [r3, #1]
				  test_value[2] = 0;
 8002b52:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002b56:	2200      	movs	r2, #0
 8002b58:	709a      	strb	r2, [r3, #2]
				  test_value[3] = 0;
 8002b5a:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002b5e:	2200      	movs	r2, #0
 8002b60:	70da      	strb	r2, [r3, #3]
				  current_method = SCARA_METHOD_TEST;
 8002b62:	2303      	movs	r3, #3
 8002b64:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002b68:	f102 021f 	add.w	r2, r2, #31
 8002b6c:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = TEST_METHOD;
 8002b6e:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8002b72:	221d      	movs	r2, #29
 8002b74:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002b76:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002b7a:	6899      	ldr	r1, [r3, #8]
 8002b7c:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002b80:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4413      	add	r3, r2
 8002b88:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	2301      	movs	r3, #1
 8002b90:	2008      	movs	r0, #8
 8002b92:	f7ff fc5b 	bl	800244c <commandRespond1>
 8002b96:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002b9a:	f103 0304 	add.w	r3, r3, #4
 8002b9e:	6018      	str	r0, [r3, #0]
				  total_respond_length += respond_lenght;
 8002ba0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002baa:	f103 0304 	add.w	r3, r3, #4
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	e365      	b.n	8003286 <StartDefaultTask+0xade>
			  }else if(SCARA_METHOD_PICK_AND_PLACE == duty_cmd.robot_method){
 8002bba:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002bbe:	785b      	ldrb	r3, [r3, #1]
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	f040 8360 	bne.w	8003286 <StartDefaultTask+0xade>
				  current_method = SCARA_METHOD_PICK_AND_PLACE;
 8002bc6:	2304      	movs	r3, #4
 8002bc8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002bcc:	f102 021f 	add.w	r2, r2, #31
 8002bd0:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002bd8:	f102 021d 	add.w	r2, r2, #29
 8002bdc:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = PICK_AND_PLACE_METHOD;
 8002bde:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8002be2:	221e      	movs	r2, #30
 8002be4:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002be6:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002bea:	6899      	ldr	r1, [r3, #8]
 8002bec:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002bf0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	2301      	movs	r3, #1
 8002c00:	2008      	movs	r0, #8
 8002c02:	f7ff fc23 	bl	800244c <commandRespond1>
 8002c06:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002c0a:	f103 0304 	add.w	r3, r3, #4
 8002c0e:	6018      	str	r0, [r3, #0]
				  total_respond_length += respond_lenght;
 8002c10:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002c1a:	f103 0304 	add.w	r3, r3, #4
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4413      	add	r3, r2
 8002c22:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002c26:	6013      	str	r3, [r2, #0]
 8002c28:	e32d      	b.n	8003286 <StartDefaultTask+0xade>
			  }
		  } else {
			  	  // Check current method & cmd method
			  	  if (current_method == duty_cmd.robot_method) {
 8002c2a:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002c2e:	785b      	ldrb	r3, [r3, #1]
 8002c30:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c34:	f102 021f 	add.w	r2, r2, #31
 8002c38:	7812      	ldrb	r2, [r2, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	f040 82fa 	bne.w	8003234 <StartDefaultTask+0xa8c>
				  	  switch( duty_cmd.robot_method) {
 8002c40:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002c44:	785b      	ldrb	r3, [r3, #1]
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	f200 82ee 	bhi.w	8003228 <StartDefaultTask+0xa80>
 8002c4c:	a201      	add	r2, pc, #4	; (adr r2, 8002c54 <StartDefaultTask+0x4ac>)
 8002c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c52:	bf00      	nop
 8002c54:	08002c69 	.word	0x08002c69
 8002c58:	08002cef 	.word	0x08002cef
 8002c5c:	080030b5 	.word	0x080030b5
 8002c60:	08002f43 	.word	0x08002f43
 8002c64:	0800316b 	.word	0x0800316b
				  	  case SCARA_METHOD_MANUAL:
				  	  {
				  		  if (current_key_state == SCARA_KEY_STATE_READY) {
 8002c68:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002c6c:	f103 031b 	add.w	r3, r3, #27
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d116      	bne.n	8002ca4 <StartDefaultTask+0x4fc>
				  			  current_key = duty_cmd.keyboard;
 8002c76:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002c7a:	78db      	ldrb	r3, [r3, #3]
 8002c7c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c80:	f102 021a 	add.w	r2, r2, #26
 8002c84:	7013      	strb	r3, [r2, #0]
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Init new path
 8002c86:	2301      	movs	r3, #1
 8002c88:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c8c:	f102 021b 	add.w	r2, r2, #27
 8002c90:	7013      	strb	r3, [r2, #0]
				  			  current_key_speed = duty_cmd.key_speed;
 8002c92:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c9c:	f102 0214 	add.w	r2, r2, #20
 8002ca0:	6013      	str	r3, [r2, #0]
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
									  && current_key_speed == duty_cmd.key_speed) {
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
				  		  }
				  	  }
				  	  break;
 8002ca2:	e2ed      	b.n	8003280 <StartDefaultTask+0xad8>
				  		  } else if (current_key == duty_cmd.keyboard
 8002ca4:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002ca8:	78db      	ldrb	r3, [r3, #3]
 8002caa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002cae:	f102 021a 	add.w	r2, r2, #26
 8002cb2:	7812      	ldrb	r2, [r2, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	f040 82e3 	bne.w	8003280 <StartDefaultTask+0xad8>
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
 8002cba:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002cbe:	f103 031b 	add.w	r3, r3, #27
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	f040 82db 	bne.w	8003280 <StartDefaultTask+0xad8>
									  && current_key_speed == duty_cmd.key_speed) {
 8002cca:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002cd4:	f102 0214 	add.w	r2, r2, #20
 8002cd8:	6812      	ldr	r2, [r2, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	f040 82d0 	bne.w	8003280 <StartDefaultTask+0xad8>
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002ce6:	f102 021b 	add.w	r2, r2, #27
 8002cea:	7013      	strb	r3, [r2, #0]
				  	  break;
 8002cec:	e2c8      	b.n	8003280 <StartDefaultTask+0xad8>
				  	  case SCARA_METHOD_SEMI_AUTO:
				  	  {
						  switch( duty_cmd.robot_mode) {
 8002cee:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002cf2:	789b      	ldrb	r3, [r3, #2]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	f000 80a4 	beq.w	8002e42 <StartDefaultTask+0x69a>
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	f300 811a 	bgt.w	8002f34 <StartDefaultTask+0x78c>
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <StartDefaultTask+0x562>
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d031      	beq.n	8002d6c <StartDefaultTask+0x5c4>
 8002d08:	e114      	b.n	8002f34 <StartDefaultTask+0x78c>
						  case SCARA_MODE_STOP:
							  {
								  current_mode	 = SCARA_MODE_STOP;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002d10:	f102 021e 	add.w	r2, r2, #30
 8002d14:	7013      	strb	r3, [r2, #0]
								detail_array[0] = STOP_NOW;
 8002d16:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8002d1a:	2222      	movs	r2, #34	; 0x22
 8002d1c:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002d1e:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002d22:	6899      	ldr	r1, [r3, #8]
 8002d24:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002d28:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4413      	add	r3, r2
 8002d30:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	2301      	movs	r3, #1
 8002d38:	2008      	movs	r0, #8
 8002d3a:	f7ff fb87 	bl	800244c <commandRespond1>
 8002d3e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002d42:	f103 0304 	add.w	r3, r3, #4
 8002d46:	6018      	str	r0, [r3, #0]
								total_respond_length += respond_lenght;
 8002d48:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002d52:	f103 0304 	add.w	r3, r3, #4
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002d5e:	6013      	str	r3, [r2, #0]
								  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 8002d60:	f240 1165 	movw	r1, #357	; 0x165
 8002d64:	48cd      	ldr	r0, [pc, #820]	; (800309c <StartDefaultTask+0x8f4>)
 8002d66:	f7ff fbd9 	bl	800251c <LOG_REPORT>
							  }
							  break;
 8002d6a:	e0e9      	b.n	8002f40 <StartDefaultTask+0x798>

						  case SCARA_MODE_SCAN:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002d6c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002d70:	f103 031e 	add.w	r3, r3, #30
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d138      	bne.n	8002dec <StartDefaultTask+0x644>
 8002d7a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002d7e:	f103 031d 	add.w	r3, r3, #29
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d131      	bne.n	8002dec <StartDefaultTask+0x644>
									  current_mode = SCARA_MODE_SCAN;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002d8e:	f102 021e 	add.w	r2, r2, #30
 8002d92:	7013      	strb	r3, [r2, #0]
									  current_scan_state = SCARA_SCAN_STATE_INIT;
 8002d94:	2300      	movs	r3, #0
 8002d96:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002d9a:	f102 021c 	add.w	r2, r2, #28
 8002d9e:	7013      	strb	r3, [r2, #0]
									detail_array[0] = START_SCAN;
 8002da0:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8002da4:	2223      	movs	r2, #35	; 0x23
 8002da6:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002da8:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002dac:	6899      	ldr	r1, [r3, #8]
 8002dae:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002db2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4413      	add	r3, r2
 8002dba:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	2008      	movs	r0, #8
 8002dc4:	f7ff fb42 	bl	800244c <commandRespond1>
 8002dc8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002dcc:	f103 0304 	add.w	r3, r3, #4
 8002dd0:	6018      	str	r0, [r3, #0]
									total_respond_length += respond_lenght;
 8002dd2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002ddc:	f103 0304 	add.w	r3, r3, #4
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4413      	add	r3, r2
 8002de4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002de8:	6013      	str	r3, [r2, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
									total_respond_length += respond_lenght;
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
								  }
							  }
							  break;
 8002dea:	e0a9      	b.n	8002f40 <StartDefaultTask+0x798>
									detail_array[0] = BUSY;
 8002dec:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8002df0:	2224      	movs	r2, #36	; 0x24
 8002df2:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002df4:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002df8:	6899      	ldr	r1, [r3, #8]
 8002dfa:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002dfe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4413      	add	r3, r2
 8002e06:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	2007      	movs	r0, #7
 8002e10:	f7ff fb1c 	bl	800244c <commandRespond1>
 8002e14:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002e18:	f103 0304 	add.w	r3, r3, #4
 8002e1c:	6018      	str	r0, [r3, #0]
									total_respond_length += respond_lenght;
 8002e1e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002e28:	f103 0304 	add.w	r3, r3, #4
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002e34:	6013      	str	r3, [r2, #0]
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 8002e36:	f240 1179 	movw	r1, #377	; 0x179
 8002e3a:	4899      	ldr	r0, [pc, #612]	; (80030a0 <StartDefaultTask+0x8f8>)
 8002e3c:	f7ff fb6e 	bl	800251c <LOG_REPORT>
							  break;
 8002e40:	e07e      	b.n	8002f40 <StartDefaultTask+0x798>

						  case SCARA_MODE_DUTY:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002e42:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002e46:	f103 031e 	add.w	r3, r3, #30
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d145      	bne.n	8002edc <StartDefaultTask+0x734>
 8002e50:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002e54:	f103 031d 	add.w	r3, r3, #29
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d13e      	bne.n	8002edc <StartDefaultTask+0x734>
									  scaraSetScanFlag();
 8002e5e:	f007 fbcb 	bl	800a5f8 <scaraSetScanFlag>
//									  if(duty_cmd.modeInit_type == DUTY_MODE_INIT_LINEAR){
//										  current_method = SCARA_METHOD_AUTO;
//									  }
									  if (scaraIsScanLimit()) {
 8002e62:	f007 fc5b 	bl	800a71c <scaraIsScanLimit>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00c      	beq.n	8002e86 <StartDefaultTask+0x6de>
										  current_mode	 = SCARA_MODE_DUTY;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002e72:	f102 021e 	add.w	r2, r2, #30
 8002e76:	7013      	strb	r3, [r2, #0]
										  current_duty_state	 = SCARA_DUTY_STATE_INIT;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002e7e:	f102 021d 	add.w	r2, r2, #29
 8002e82:	7013      	strb	r3, [r2, #0]
									  if (scaraIsScanLimit()) {
 8002e84:	e055      	b.n	8002f32 <StartDefaultTask+0x78a>
									  } else {
										detail_array[0] = NOT_SCAN;
 8002e86:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8002e8a:	2225      	movs	r2, #37	; 0x25
 8002e8c:	701a      	strb	r2, [r3, #0]
										respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002e8e:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002e92:	6899      	ldr	r1, [r3, #8]
 8002e94:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002e98:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	2007      	movs	r0, #7
 8002eaa:	f7ff facf 	bl	800244c <commandRespond1>
 8002eae:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002eb2:	f103 0304 	add.w	r3, r3, #4
 8002eb6:	6018      	str	r0, [r3, #0]
										total_respond_length += respond_lenght;
 8002eb8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002ec2:	f103 0304 	add.w	r3, r3, #4
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002ece:	6013      	str	r3, [r2, #0]
										  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 8002ed0:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002ed4:	4873      	ldr	r0, [pc, #460]	; (80030a4 <StartDefaultTask+0x8fc>)
 8002ed6:	f7ff fb21 	bl	800251c <LOG_REPORT>
									  if (scaraIsScanLimit()) {
 8002eda:	e02a      	b.n	8002f32 <StartDefaultTask+0x78a>
									  }
								  } else {
									detail_array[0] = BUSY;
 8002edc:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8002ee0:	2224      	movs	r2, #36	; 0x24
 8002ee2:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002ee4:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002ee8:	6899      	ldr	r1, [r3, #8]
 8002eea:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002eee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	2301      	movs	r3, #1
 8002efe:	2007      	movs	r0, #7
 8002f00:	f7ff faa4 	bl	800244c <commandRespond1>
 8002f04:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002f08:	f103 0304 	add.w	r3, r3, #4
 8002f0c:	6018      	str	r0, [r3, #0]
									total_respond_length += respond_lenght;
 8002f0e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002f18:	f103 0304 	add.w	r3, r3, #4
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002f24:	6013      	str	r3, [r2, #0]
									  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 8002f26:	f44f 71c9 	mov.w	r1, #402	; 0x192
 8002f2a:	485f      	ldr	r0, [pc, #380]	; (80030a8 <StartDefaultTask+0x900>)
 8002f2c:	f7ff faf6 	bl	800251c <LOG_REPORT>
								  }
							  }
							  break;
 8002f30:	e006      	b.n	8002f40 <StartDefaultTask+0x798>
 8002f32:	e005      	b.n	8002f40 <StartDefaultTask+0x798>
						  default:
							  {
								  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 8002f34:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8002f38:	485c      	ldr	r0, [pc, #368]	; (80030ac <StartDefaultTask+0x904>)
 8002f3a:	f7ff faef 	bl	800251c <LOG_REPORT>
							  }
						  }
					  }
					  break;
 8002f3e:	e1a2      	b.n	8003286 <StartDefaultTask+0xade>
 8002f40:	e1a1      	b.n	8003286 <StartDefaultTask+0xade>
					  case SCARA_METHOD_TEST:
					  {
						  test_value[0] = 0;
 8002f42:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002f46:	2200      	movs	r2, #0
 8002f48:	701a      	strb	r2, [r3, #0]
						  test_value[1] = 0;
 8002f4a:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002f4e:	2200      	movs	r2, #0
 8002f50:	705a      	strb	r2, [r3, #1]
						  test_value[2] = 0;
 8002f52:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002f56:	2200      	movs	r2, #0
 8002f58:	709a      	strb	r2, [r3, #2]
						  test_value[3] = 0;
 8002f5a:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002f5e:	2200      	movs	r2, #0
 8002f60:	70da      	strb	r2, [r3, #3]
						  switch (duty_cmd.test_key)
 8002f62:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002f66:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002f6a:	2b07      	cmp	r3, #7
 8002f6c:	f200 8094 	bhi.w	8003098 <StartDefaultTask+0x8f0>
 8002f70:	a201      	add	r2, pc, #4	; (adr r2, 8002f78 <StartDefaultTask+0x7d0>)
 8002f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f76:	bf00      	nop
 8002f78:	08002f99 	.word	0x08002f99
 8002f7c:	08002fb5 	.word	0x08002fb5
 8002f80:	08002fd9 	.word	0x08002fd9
 8002f84:	08002ff5 	.word	0x08002ff5
 8002f88:	08003019 	.word	0x08003019
 8002f8c:	08003035 	.word	0x08003035
 8002f90:	08003059 	.word	0x08003059
 8002f94:	08003075 	.word	0x08003075
						  {
						  case SCARA_TEST_MOTOR1_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[0];
 8002f98:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002f9c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002fa0:	085b      	lsrs	r3, r3, #1
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4b42      	ldr	r3, [pc, #264]	; (80030b0 <StartDefaultTask+0x908>)
 8002fa8:	f993 1000 	ldrsb.w	r1, [r3]
 8002fac:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002fb0:	5499      	strb	r1, [r3, r2]
						  break;
 8002fb2:	e072      	b.n	800309a <StartDefaultTask+0x8f2>
						  case SCARA_TEST_MOTOR1_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[0];
 8002fb4:	4b3e      	ldr	r3, [pc, #248]	; (80030b0 <StartDefaultTask+0x908>)
 8002fb6:	f993 3000 	ldrsb.w	r3, [r3]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	425b      	negs	r3, r3
 8002fbe:	b2d9      	uxtb	r1, r3
 8002fc0:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002fc4:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002fc8:	085b      	lsrs	r3, r3, #1
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	461a      	mov	r2, r3
 8002fce:	b249      	sxtb	r1, r1
 8002fd0:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002fd4:	5499      	strb	r1, [r3, r2]
						  break;
 8002fd6:	e060      	b.n	800309a <StartDefaultTask+0x8f2>
						  case SCARA_TEST_MOTOR2_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[1];
 8002fd8:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002fdc:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002fe0:	085b      	lsrs	r3, r3, #1
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4b32      	ldr	r3, [pc, #200]	; (80030b0 <StartDefaultTask+0x908>)
 8002fe8:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8002fec:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002ff0:	5499      	strb	r1, [r3, r2]
						  break;
 8002ff2:	e052      	b.n	800309a <StartDefaultTask+0x8f2>
						  case SCARA_TEST_MOTOR2_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[1];
 8002ff4:	4b2e      	ldr	r3, [pc, #184]	; (80030b0 <StartDefaultTask+0x908>)
 8002ff6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	425b      	negs	r3, r3
 8002ffe:	b2d9      	uxtb	r1, r3
 8003000:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003004:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8003008:	085b      	lsrs	r3, r3, #1
 800300a:	b2db      	uxtb	r3, r3
 800300c:	461a      	mov	r2, r3
 800300e:	b249      	sxtb	r1, r1
 8003010:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8003014:	5499      	strb	r1, [r3, r2]
						  break;
 8003016:	e040      	b.n	800309a <StartDefaultTask+0x8f2>
						  case SCARA_TEST_MOTOR3_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[2];
 8003018:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800301c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8003020:	085b      	lsrs	r3, r3, #1
 8003022:	b2db      	uxtb	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	4b22      	ldr	r3, [pc, #136]	; (80030b0 <StartDefaultTask+0x908>)
 8003028:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800302c:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8003030:	5499      	strb	r1, [r3, r2]
						  break;
 8003032:	e032      	b.n	800309a <StartDefaultTask+0x8f2>
						  case SCARA_TEST_MOTOR3_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[2];
 8003034:	4b1e      	ldr	r3, [pc, #120]	; (80030b0 <StartDefaultTask+0x908>)
 8003036:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	425b      	negs	r3, r3
 800303e:	b2d9      	uxtb	r1, r3
 8003040:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003044:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8003048:	085b      	lsrs	r3, r3, #1
 800304a:	b2db      	uxtb	r3, r3
 800304c:	461a      	mov	r2, r3
 800304e:	b249      	sxtb	r1, r1
 8003050:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8003054:	5499      	strb	r1, [r3, r2]
						  break;
 8003056:	e020      	b.n	800309a <StartDefaultTask+0x8f2>
						  case SCARA_TEST_MOTOR4_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[3];
 8003058:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800305c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8003060:	085b      	lsrs	r3, r3, #1
 8003062:	b2db      	uxtb	r3, r3
 8003064:	461a      	mov	r2, r3
 8003066:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <StartDefaultTask+0x908>)
 8003068:	f993 1003 	ldrsb.w	r1, [r3, #3]
 800306c:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8003070:	5499      	strb	r1, [r3, r2]
						  break;
 8003072:	e012      	b.n	800309a <StartDefaultTask+0x8f2>
						  case SCARA_TEST_MOTOR4_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[3];
 8003074:	4b0e      	ldr	r3, [pc, #56]	; (80030b0 <StartDefaultTask+0x908>)
 8003076:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	425b      	negs	r3, r3
 800307e:	b2d9      	uxtb	r1, r3
 8003080:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003084:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8003088:	085b      	lsrs	r3, r3, #1
 800308a:	b2db      	uxtb	r3, r3
 800308c:	461a      	mov	r2, r3
 800308e:	b249      	sxtb	r1, r1
 8003090:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8003094:	5499      	strb	r1, [r3, r2]
						  break;						  
 8003096:	e000      	b.n	800309a <StartDefaultTask+0x8f2>
						  default:
							  break;
 8003098:	bf00      	nop
						  }
					  }
					  break;
 800309a:	e0f4      	b.n	8003286 <StartDefaultTask+0xade>
 800309c:	0801c2b4 	.word	0x0801c2b4
 80030a0:	0801c2c4 	.word	0x0801c2c4
 80030a4:	0801c2d4 	.word	0x0801c2d4
 80030a8:	0801c2e8 	.word	0x0801c2e8
 80030ac:	0801c2f8 	.word	0x0801c2f8
 80030b0:	20000000 	.word	0x20000000
				  	  case SCARA_METHOD_GCODE:
				  	  {
				  		  if(current_duty_state == SCARA_DUTY_STATE_READY && duty_cmd.id_command == CMD_GCODE_RUN){
 80030b4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80030b8:	f103 031d 	add.w	r3, r3, #29
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d120      	bne.n	8003104 <StartDefaultTask+0x95c>
 80030c2:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2b14      	cmp	r3, #20
 80030ca:	d11b      	bne.n	8003104 <StartDefaultTask+0x95c>
				  			  if(Gcode_Mode == GCODE_LINEAR){
 80030cc:	4bc0      	ldr	r3, [pc, #768]	; (80033d0 <StartDefaultTask+0xc28>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d106      	bne.n	80030e2 <StartDefaultTask+0x93a>
				  				run_point = 1;
 80030d4:	2301      	movs	r3, #1
 80030d6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80030da:	f102 0214 	add.w	r2, r2, #20
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	e009      	b.n	80030f6 <StartDefaultTask+0x94e>
				  			  }else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 80030e2:	4bbb      	ldr	r3, [pc, #748]	; (80033d0 <StartDefaultTask+0xc28>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b09      	cmp	r3, #9
 80030e8:	d105      	bne.n	80030f6 <StartDefaultTask+0x94e>
				  				run_point = 0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80030f0:	f102 0214 	add.w	r2, r2, #20
 80030f4:	6013      	str	r3, [r2, #0]
				  			  }

				  			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 80030f6:	2304      	movs	r3, #4
 80030f8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80030fc:	f102 021d 	add.w	r2, r2, #29
 8003100:	7013      	strb	r3, [r2, #0]
 8003102:	e031      	b.n	8003168 <StartDefaultTask+0x9c0>
				  		  }else if(current_duty_state == SCARA_DUTY_STATE_INIT && duty_cmd.id_command == CMD_GCODE_RESUME){
 8003104:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003108:	f103 031d 	add.w	r3, r3, #29
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d111      	bne.n	8003136 <StartDefaultTask+0x98e>
 8003112:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	2b13      	cmp	r3, #19
 800311a:	d10c      	bne.n	8003136 <StartDefaultTask+0x98e>
				  			  lowlayer_readTruePosition(&positionCurrent);
 800311c:	48ad      	ldr	r0, [pc, #692]	; (80033d4 <StartDefaultTask+0xc2c>)
 800311e:	f002 ffa3 	bl	8006068 <lowlayer_readTruePosition>
				  			  kinematicForward(&positionCurrent);
 8003122:	48ac      	ldr	r0, [pc, #688]	; (80033d4 <StartDefaultTask+0xc2c>)
 8003124:	f002 f864 	bl	80051f0 <kinematicForward>
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
 8003128:	2301      	movs	r3, #1
 800312a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800312e:	f102 021d 	add.w	r2, r2, #29
 8003132:	7013      	strb	r3, [r2, #0]
 8003134:	e018      	b.n	8003168 <StartDefaultTask+0x9c0>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_STOP){
 8003136:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b0e      	cmp	r3, #14
 800313e:	d106      	bne.n	800314e <StartDefaultTask+0x9a6>
				  			  current_duty_state = SCARA_DUTY_STATE_READY;
 8003140:	2300      	movs	r3, #0
 8003142:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003146:	f102 021d 	add.w	r2, r2, #29
 800314a:	7013      	strb	r3, [r2, #0]
				  		  }else if(duty_cmd.id_command == CMD_GCODE_PAUSE){
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
				  		  }
				  	  }
				  	  break;
 800314c:	e09a      	b.n	8003284 <StartDefaultTask+0xadc>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_PAUSE){
 800314e:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b0f      	cmp	r3, #15
 8003156:	f040 8095 	bne.w	8003284 <StartDefaultTask+0xadc>
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
 800315a:	2301      	movs	r3, #1
 800315c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003160:	f102 021d 	add.w	r2, r2, #29
 8003164:	7013      	strb	r3, [r2, #0]
				  	  break;
 8003166:	e08d      	b.n	8003284 <StartDefaultTask+0xadc>
 8003168:	e08c      	b.n	8003284 <StartDefaultTask+0xadc>
				  	  case SCARA_METHOD_PICK_AND_PLACE:{
				  		  memcpy(&Object[object_head_pointer].object_position, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 800316a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800316e:	f103 0305 	add.w	r3, r3, #5
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8003178:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800317c:	fb01 f303 	mul.w	r3, r1, r3
 8003180:	18d0      	adds	r0, r2, r3
 8003182:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003186:	3328      	adds	r3, #40	; 0x28
 8003188:	22c0      	movs	r2, #192	; 0xc0
 800318a:	4619      	mov	r1, r3
 800318c:	f012 fef0 	bl	8015f70 <memcpy>
				  		  //Object[object_head_pointer].timer_value = (uint16_t)duty_cmd.target_point.t;
				  		  Object[object_head_pointer].timer_value = duty_cmd.target_point.packet_time_stamp;
 8003190:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003194:	f103 0305 	add.w	r3, r3, #5
 8003198:	7819      	ldrb	r1, [r3, #0]
 800319a:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800319e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80031a2:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 80031a6:	f44f 76c4 	mov.w	r6, #392	; 0x188
 80031aa:	fb06 f101 	mul.w	r1, r6, r1
 80031ae:	4401      	add	r1, r0
 80031b0:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 80031b4:	e9c1 2300 	strd	r2, r3, [r1]
				  		  object_head_pointer = (object_head_pointer+1)%8;
 80031b8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80031bc:	f103 0305 	add.w	r3, r3, #5
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	3301      	adds	r3, #1
 80031c4:	425a      	negs	r2, r3
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	f002 0207 	and.w	r2, r2, #7
 80031ce:	bf58      	it	pl
 80031d0:	4253      	negpl	r3, r2
 80031d2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80031d6:	f102 0205 	add.w	r2, r2, #5
 80031da:	7013      	strb	r3, [r2, #0]
				  		  detail_array[0] = OBJECT_DETECTED;
 80031dc:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80031e0:	221f      	movs	r2, #31
 80031e2:	701a      	strb	r2, [r3, #0]
						  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80031e4:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80031e8:	6899      	ldr	r1, [r3, #8]
 80031ea:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 80031ee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4413      	add	r3, r2
 80031f6:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	2301      	movs	r3, #1
 80031fe:	2008      	movs	r0, #8
 8003200:	f7ff f924 	bl	800244c <commandRespond1>
 8003204:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003208:	f103 0304 	add.w	r3, r3, #4
 800320c:	6018      	str	r0, [r3, #0]
						  total_respond_length += respond_lenght;
 800320e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003218:	f103 0304 	add.w	r3, r3, #4
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4413      	add	r3, r2
 8003220:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003224:	6013      	str	r3, [r2, #0]
				  	  }
				  	  break;
 8003226:	e02e      	b.n	8003286 <StartDefaultTask+0xade>
				  	  default:
				  	  {
				  		  LOG_REPORT("CMD Error Method !!!", __LINE__);
 8003228:	f240 11e3 	movw	r1, #483	; 0x1e3
 800322c:	486a      	ldr	r0, [pc, #424]	; (80033d8 <StartDefaultTask+0xc30>)
 800322e:	f7ff f975 	bl	800251c <LOG_REPORT>
 8003232:	e028      	b.n	8003286 <StartDefaultTask+0xade>
				  	  }
				  	  }
			  	  } else {
					detail_array[0] = INCORRECT_METHOD;
 8003234:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8003238:	2226      	movs	r2, #38	; 0x26
 800323a:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800323c:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003240:	6899      	ldr	r1, [r3, #8]
 8003242:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8003246:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4413      	add	r3, r2
 800324e:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	2301      	movs	r3, #1
 8003256:	2007      	movs	r0, #7
 8003258:	f7ff f8f8 	bl	800244c <commandRespond1>
 800325c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003260:	f103 0304 	add.w	r3, r3, #4
 8003264:	6018      	str	r0, [r3, #0]
					total_respond_length += respond_lenght;
 8003266:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003270:	f103 0304 	add.w	r3, r3, #4
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4413      	add	r3, r2
 8003278:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	e002      	b.n	8003286 <StartDefaultTask+0xade>
				  	  break;
 8003280:	bf00      	nop
 8003282:	e000      	b.n	8003286 <StartDefaultTask+0xade>
				  	  break;
 8003284:	bf00      	nop
			  	  }

			  }
		  isNewDuty = FALSE;
 8003286:	2300      	movs	r3, #0
 8003288:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800328c:	f102 0207 	add.w	r2, r2, #7
 8003290:	7013      	strb	r3, [r2, #0]
	  }

	  /* 3--- Execute Phase ---*/
	  switch(current_method) {
 8003292:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003296:	f103 031f 	add.w	r3, r3, #31
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b04      	cmp	r3, #4
 800329e:	f201 8195 	bhi.w	80045cc <StartDefaultTask+0x1e24>
 80032a2:	a201      	add	r2, pc, #4	; (adr r2, 80032a8 <StartDefaultTask+0xb00>)
 80032a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a8:	080032bd 	.word	0x080032bd
 80032ac:	080034eb 	.word	0x080034eb
 80032b0:	080039c5 	.word	0x080039c5
 80032b4:	08003d41 	.word	0x08003d41
 80032b8:	08003d69 	.word	0x08003d69
	  case SCARA_METHOD_MANUAL:
	  {
		  switch( current_key_state) {
 80032bc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80032c0:	f103 031b 	add.w	r3, r3, #27
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	f201 817d 	bhi.w	80045c6 <StartDefaultTask+0x1e1e>
 80032cc:	a201      	add	r2, pc, #4	; (adr r2, 80032d4 <StartDefaultTask+0xb2c>)
 80032ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d2:	bf00      	nop
 80032d4:	080034e5 	.word	0x080034e5
 80032d8:	080032e5 	.word	0x080032e5
 80032dc:	0800337b 	.word	0x0800337b
 80032e0:	080034a1 	.word	0x080034a1
		  case SCARA_KEY_STATE_READY:
			  /* Wait for application keyboard , do nothing*/
		  break;
		  case SCARA_KEY_STATE_INIT:
		  {
			  if (scaraKeyInit1(current_key, current_key_speed1) == SCARA_STATUS_OK) {
 80032e4:	4b3d      	ldr	r3, [pc, #244]	; (80033dc <StartDefaultTask+0xc34>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80032ec:	f103 031a 	add.w	r3, r3, #26
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	4611      	mov	r1, r2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f007 fb27 	bl	800a948 <scaraKeyInit1>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d135      	bne.n	800336c <StartDefaultTask+0xbc4>
				  run_time = 0;
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800330c:	f101 0108 	add.w	r1, r1, #8
 8003310:	e9c1 2300 	strd	r2, r3, [r1]
				  current_key_state = SCARA_KEY_STATE_FLOW;
 8003314:	2302      	movs	r3, #2
 8003316:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800331a:	f102 021b 	add.w	r2, r2, #27
 800331e:	7013      	strb	r3, [r2, #0]
					detail_array[0] = NONE;
 8003320:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8003324:	2227      	movs	r2, #39	; 0x27
 8003326:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003328:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800332c:	6899      	ldr	r1, [r3, #8]
 800332e:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8003332:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4413      	add	r3, r2
 800333a:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2301      	movs	r3, #1
 8003342:	2003      	movs	r0, #3
 8003344:	f7ff f882 	bl	800244c <commandRespond1>
 8003348:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800334c:	f103 0304 	add.w	r3, r3, #4
 8003350:	6018      	str	r0, [r3, #0]
					total_respond_length += respond_lenght;
 8003352:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800335c:	f103 0304 	add.w	r3, r3, #4
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4413      	add	r3, r2
 8003364:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003368:	6013      	str	r3, [r2, #0]
			  } else {
				  current_key_state = SCARA_KEY_STATE_READY;
			  }
		  }
		  break;
 800336a:	e0bc      	b.n	80034e6 <StartDefaultTask+0xd3e>
				  current_key_state = SCARA_KEY_STATE_READY;
 800336c:	2300      	movs	r3, #0
 800336e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003372:	f102 021b 	add.w	r2, r2, #27
 8003376:	7013      	strb	r3, [r2, #0]
		  break;
 8003378:	e0b5      	b.n	80034e6 <StartDefaultTask+0xd3e>
		  case SCARA_KEY_STATE_FLOW:
		  {
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 800337a:	a313      	add	r3, pc, #76	; (adr r3, 80033c8 <StartDefaultTask+0xc20>)
 800337c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003380:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003384:	f101 0108 	add.w	r1, r1, #8
 8003388:	e9d1 0100 	ldrd	r0, r1, [r1]
 800338c:	f7fc ff7e 	bl	800028c <__adddf3>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003398:	f101 0108 	add.w	r1, r1, #8
 800339c:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 80033a0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80033a4:	f103 0308 	add.w	r3, r3, #8
 80033a8:	ed93 0b00 	vldr	d0, [r3]
 80033ac:	f007 f9c2 	bl	800a734 <scaraIsFinish>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d014      	beq.n	80033e0 <StartDefaultTask+0xc38>
				  current_key_state = SCARA_KEY_STATE_FINISH;// Key Done
 80033b6:	2303      	movs	r3, #3
 80033b8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80033bc:	f102 021b 	add.w	r2, r2, #27
 80033c0:	7013      	strb	r3, [r2, #0]
					total_respond_length += respond_lenght;
					  LOG_REPORT("STOP KEY", __LINE__);
				  }
			  }
		  }
		  break;
 80033c2:	e090      	b.n	80034e6 <StartDefaultTask+0xd3e>
 80033c4:	f3af 8000 	nop.w
 80033c8:	40000000 	.word	0x40000000
 80033cc:	3f847ae1 	.word	0x3f847ae1
 80033d0:	200085c8 	.word	0x200085c8
 80033d4:	20010af8 	.word	0x20010af8
 80033d8:	0801c30c 	.word	0x0801c30c
 80033dc:	20000060 	.word	0x20000060
				  status = scaraFlowDuty(run_time, &positionNext, positionCurrent);
 80033e0:	4ed4      	ldr	r6, [pc, #848]	; (8003734 <StartDefaultTask+0xf8c>)
 80033e2:	4668      	mov	r0, sp
 80033e4:	f106 0308 	add.w	r3, r6, #8
 80033e8:	22b8      	movs	r2, #184	; 0xb8
 80033ea:	4619      	mov	r1, r3
 80033ec:	f012 fdc0 	bl	8015f70 <memcpy>
 80033f0:	e896 000c 	ldmia.w	r6, {r2, r3}
 80033f4:	48d0      	ldr	r0, [pc, #832]	; (8003738 <StartDefaultTask+0xf90>)
 80033f6:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80033fa:	f101 0108 	add.w	r1, r1, #8
 80033fe:	ed91 0b00 	vldr	d0, [r1]
 8003402:	f006 fb31 	bl	8009a68 <scaraFlowDuty>
 8003406:	4603      	mov	r3, r0
 8003408:	f887 3fd1 	strb.w	r3, [r7, #4049]	; 0xfd1
				  if ( SCARA_STATUS_OK == status) {
 800340c:	f897 3fd1 	ldrb.w	r3, [r7, #4049]	; 0xfd1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d113      	bne.n	800343c <StartDefaultTask+0xc94>
					  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003414:	4ec7      	ldr	r6, [pc, #796]	; (8003734 <StartDefaultTask+0xf8c>)
 8003416:	4ac8      	ldr	r2, [pc, #800]	; (8003738 <StartDefaultTask+0xf90>)
 8003418:	ab2c      	add	r3, sp, #176	; 0xb0
 800341a:	4611      	mov	r1, r2
 800341c:	22c0      	movs	r2, #192	; 0xc0
 800341e:	4618      	mov	r0, r3
 8003420:	f012 fda6 	bl	8015f70 <memcpy>
 8003424:	4668      	mov	r0, sp
 8003426:	f106 0310 	add.w	r3, r6, #16
 800342a:	22b0      	movs	r2, #176	; 0xb0
 800342c:	4619      	mov	r1, r3
 800342e:	f012 fd9f 	bl	8015f70 <memcpy>
 8003432:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003436:	f002 ffa7 	bl	8006388 <lowlayer_computeAndWritePulse>
		  break;
 800343a:	e054      	b.n	80034e6 <StartDefaultTask+0xd3e>
					  current_key_state = SCARA_KEY_STATE_FINISH;
 800343c:	2303      	movs	r3, #3
 800343e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003442:	f102 021b 	add.w	r2, r2, #27
 8003446:	7013      	strb	r3, [r2, #0]
					detail_array[0] = status;
 8003448:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800344c:	f897 2fd1 	ldrb.w	r2, [r7, #4049]	; 0xfd1
 8003450:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003452:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003456:	6899      	ldr	r1, [r3, #8]
 8003458:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 800345c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4413      	add	r3, r2
 8003464:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	2301      	movs	r3, #1
 800346c:	2006      	movs	r0, #6
 800346e:	f7fe ffed 	bl	800244c <commandRespond1>
 8003472:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003476:	f103 0304 	add.w	r3, r3, #4
 800347a:	6018      	str	r0, [r3, #0]
					total_respond_length += respond_lenght;
 800347c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003486:	f103 0304 	add.w	r3, r3, #4
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4413      	add	r3, r2
 800348e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003492:	6013      	str	r3, [r2, #0]
					  LOG_REPORT("STOP KEY", __LINE__);
 8003494:	f240 2117 	movw	r1, #535	; 0x217
 8003498:	48a8      	ldr	r0, [pc, #672]	; (800373c <StartDefaultTask+0xf94>)
 800349a:	f7ff f83f 	bl	800251c <LOG_REPORT>
		  break;
 800349e:	e022      	b.n	80034e6 <StartDefaultTask+0xd3e>
		  case SCARA_KEY_STATE_FINISH:
		  {
			  lowlayer_readTruePosition(&positionNext);
 80034a0:	48a5      	ldr	r0, [pc, #660]	; (8003738 <StartDefaultTask+0xf90>)
 80034a2:	f002 fde1 	bl	8006068 <lowlayer_readTruePosition>
			  kinematicForward(&positionNext);
 80034a6:	48a4      	ldr	r0, [pc, #656]	; (8003738 <StartDefaultTask+0xf90>)
 80034a8:	f001 fea2 	bl	80051f0 <kinematicForward>
			  current_key_state = SCARA_KEY_STATE_READY;
 80034ac:	2300      	movs	r3, #0
 80034ae:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80034b2:	f102 021b 	add.w	r2, r2, #27
 80034b6:	7013      	strb	r3, [r2, #0]
			  positionNext.t = 0;
 80034b8:	499f      	ldr	r1, [pc, #636]	; (8003738 <StartDefaultTask+0xf90>)
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	f04f 0300 	mov.w	r3, #0
 80034c2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			  positionNext.total_time = 0;
 80034c6:	499c      	ldr	r1, [pc, #624]	; (8003738 <StartDefaultTask+0xf90>)
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
			  positionNext.q = 0;
 80034d4:	4998      	ldr	r1, [pc, #608]	; (8003738 <StartDefaultTask+0xf90>)
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	e9c1 2300 	strd	r2, r3, [r1]
		  }
		  break;
 80034e2:	e000      	b.n	80034e6 <StartDefaultTask+0xd3e>
		  break;
 80034e4:	bf00      	nop
		  }
	  }
	  break;
 80034e6:	f001 b86e 	b.w	80045c6 <StartDefaultTask+0x1e1e>

	  case SCARA_METHOD_SEMI_AUTO:
	  {
		  switch( current_mode) {
 80034ea:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80034ee:	f103 031e 	add.w	r3, r3, #30
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	f000 808d 	beq.w	8003614 <StartDefaultTask+0xe6c>
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	f300 825a 	bgt.w	80039b4 <StartDefaultTask+0x120c>
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <StartDefaultTask+0xd62>
 8003504:	2b01      	cmp	r3, #1
 8003506:	d00d      	beq.n	8003524 <StartDefaultTask+0xd7c>
 8003508:	e254      	b.n	80039b4 <StartDefaultTask+0x120c>
		  case SCARA_MODE_STOP:
			  {
				  current_mode 	= SCARA_MODE_DUTY;
 800350a:	2302      	movs	r3, #2
 800350c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003510:	f102 021e 	add.w	r2, r2, #30
 8003514:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8003516:	2300      	movs	r3, #0
 8003518:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800351c:	f102 021d 	add.w	r2, r2, #29
 8003520:	7013      	strb	r3, [r2, #0]
			  }
			  break;
 8003522:	e24d      	b.n	80039c0 <StartDefaultTask+0x1218>

		  case SCARA_MODE_SCAN:
			  {
				  switch (current_scan_state) {
 8003524:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003528:	f103 031c 	add.w	r3, r3, #28
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b03      	cmp	r3, #3
 8003530:	d866      	bhi.n	8003600 <StartDefaultTask+0xe58>
 8003532:	a201      	add	r2, pc, #4	; (adr r2, 8003538 <StartDefaultTask+0xd90>)
 8003534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003538:	08003549 	.word	0x08003549
 800353c:	0800355b 	.word	0x0800355b
 8003540:	08003573 	.word	0x08003573
 8003544:	0800358d 	.word	0x0800358d
				  case SCARA_SCAN_STATE_INIT:
					  {
						  lowlayer_scanReset();
 8003548:	f002 fb88 	bl	8005c5c <lowlayer_scanReset>
						  current_scan_state = SCARA_SCAN_STATE_HARD;
 800354c:	2301      	movs	r3, #1
 800354e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003552:	f102 021c 	add.w	r2, r2, #28
 8003556:	7013      	strb	r3, [r2, #0]
					  }
					  break;
 8003558:	e05b      	b.n	8003612 <StartDefaultTask+0xe6a>
				  case SCARA_SCAN_STATE_HARD:
					  {
						  if(lowlayer_scanFlow()) {
 800355a:	f002 fbb1 	bl	8005cc0 <lowlayer_scanFlow>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d053      	beq.n	800360c <StartDefaultTask+0xe64>
							  current_scan_state = SCARA_SCAN_STATE_SOFT;
 8003564:	2302      	movs	r3, #2
 8003566:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800356a:	f102 021c 	add.w	r2, r2, #28
 800356e:	7013      	strb	r3, [r2, #0]
						  }
					  }
					  break;
 8003570:	e04c      	b.n	800360c <StartDefaultTask+0xe64>
				  case SCARA_SCAN_STATE_SOFT:
					  {
						  if(lowlayer_goToSoftLimit(&positionNext)) {
 8003572:	4871      	ldr	r0, [pc, #452]	; (8003738 <StartDefaultTask+0xf90>)
 8003574:	f002 fcfc 	bl	8005f70 <lowlayer_goToSoftLimit>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d048      	beq.n	8003610 <StartDefaultTask+0xe68>
							  current_scan_state = SCARA_SCAN_STATE_FINISH;
 800357e:	2303      	movs	r3, #3
 8003580:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003584:	f102 021c 	add.w	r2, r2, #28
 8003588:	7013      	strb	r3, [r2, #0]
							}
					  }
					  break;
 800358a:	e041      	b.n	8003610 <StartDefaultTask+0xe68>
				  case SCARA_SCAN_STATE_FINISH:
					  {
						  //lowlayer_readSetPosition(&positionNext);
						  lowlayer_readTruePosition(&positionNext);
 800358c:	486a      	ldr	r0, [pc, #424]	; (8003738 <StartDefaultTask+0xf90>)
 800358e:	f002 fd6b 	bl	8006068 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 8003592:	4869      	ldr	r0, [pc, #420]	; (8003738 <StartDefaultTask+0xf90>)
 8003594:	f001 fe2c 	bl	80051f0 <kinematicForward>
						  current_mode 	= SCARA_MODE_DUTY;
 8003598:	2302      	movs	r3, #2
 800359a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800359e:	f102 021e 	add.w	r2, r2, #30
 80035a2:	7013      	strb	r3, [r2, #0]
						  current_duty_state = SCARA_DUTY_STATE_READY;
 80035a4:	2300      	movs	r3, #0
 80035a6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80035aa:	f102 021d 	add.w	r2, r2, #29
 80035ae:	7013      	strb	r3, [r2, #0]
						  scaraSetScanFlag();
 80035b0:	f007 f822 	bl	800a5f8 <scaraSetScanFlag>

						detail_array[0] = NONE;
 80035b4:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80035b8:	2227      	movs	r2, #39	; 0x27
 80035ba:	701a      	strb	r2, [r3, #0]
						respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80035bc:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80035c0:	6899      	ldr	r1, [r3, #8]
 80035c2:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 80035c6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4413      	add	r3, r2
 80035ce:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	2301      	movs	r3, #1
 80035d6:	2005      	movs	r0, #5
 80035d8:	f7fe ff38 	bl	800244c <commandRespond1>
 80035dc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80035e0:	f103 0304 	add.w	r3, r3, #4
 80035e4:	6018      	str	r0, [r3, #0]
						total_respond_length += respond_lenght;
 80035e6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80035f0:	f103 0304 	add.w	r3, r3, #4
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4413      	add	r3, r2
 80035f8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80035fc:	6013      	str	r3, [r2, #0]
					  }
					  break;
 80035fe:	e008      	b.n	8003612 <StartDefaultTask+0xe6a>
				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8003600:	f240 215b 	movw	r1, #603	; 0x25b
 8003604:	484e      	ldr	r0, [pc, #312]	; (8003740 <StartDefaultTask+0xf98>)
 8003606:	f7fe ff89 	bl	800251c <LOG_REPORT>
						  while(1);
 800360a:	e7fe      	b.n	800360a <StartDefaultTask+0xe62>
					  break;
 800360c:	bf00      	nop
 800360e:	e1d7      	b.n	80039c0 <StartDefaultTask+0x1218>
					  break;
 8003610:	bf00      	nop
					  }
				  }

			  }
			  break;
 8003612:	e1d5      	b.n	80039c0 <StartDefaultTask+0x1218>

		  case SCARA_MODE_DUTY:
			  {
				  switch (current_duty_state) {
 8003614:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003618:	f103 031d 	add.w	r3, r3, #29
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b03      	cmp	r3, #3
 8003620:	f200 81c0 	bhi.w	80039a4 <StartDefaultTask+0x11fc>
 8003624:	a201      	add	r2, pc, #4	; (adr r2, 800362c <StartDefaultTask+0xe84>)
 8003626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362a:	bf00      	nop
 800362c:	080039b1 	.word	0x080039b1
 8003630:	0800363d 	.word	0x0800363d
 8003634:	0800380d 	.word	0x0800380d
 8003638:	08003917 	.word	0x08003917

				  case SCARA_DUTY_STATE_INIT:
					  {

						  SCARA_StatusTypeDef status1, status2;
						  status1 = scaraInitDuty(duty_cmd);
 800363c:	f507 6660 	add.w	r6, r7, #3584	; 0xe00
 8003640:	4668      	mov	r0, sp
 8003642:	f106 0310 	add.w	r3, r6, #16
 8003646:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800364a:	4619      	mov	r1, r3
 800364c:	f012 fc90 	bl	8015f70 <memcpy>
 8003650:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003654:	f003 fa30 	bl	8006ab8 <scaraInitDuty>
 8003658:	4603      	mov	r3, r0
 800365a:	f887 3fd3 	strb.w	r3, [r7, #4051]	; 0xfd3
						  if ( SCARA_STATUS_OK == status1) {
 800365e:	f897 3fd3 	ldrb.w	r3, [r7, #4051]	; 0xfd3
 8003662:	2b00      	cmp	r3, #0
 8003664:	f040 80a0 	bne.w	80037a8 <StartDefaultTask+0x1000>
							  status2 = scaraTestDuty();
 8003668:	f006 ff4a 	bl	800a500 <scaraTestDuty>
 800366c:	4603      	mov	r3, r0
 800366e:	f887 3fd2 	strb.w	r3, [r7, #4050]	; 0xfd2
							  if (SCARA_STATUS_OK == status2) {
 8003672:	f897 3fd2 	ldrb.w	r3, [r7, #4050]	; 0xfd2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d164      	bne.n	8003744 <StartDefaultTask+0xf9c>
							  current_duty_state = SCARA_DUTY_STATE_FLOW;
 800367a:	2302      	movs	r3, #2
 800367c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003680:	f102 021d 	add.w	r2, r2, #29
 8003684:	7013      	strb	r3, [r2, #0]
							  //current_duty_state = SCARA_DUTY_STATE_FINISH;
							  run_time			= 0;
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	f04f 0300 	mov.w	r3, #0
 800368e:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003692:	f101 0108 	add.w	r1, r1, #8
 8003696:	e9c1 2300 	strd	r2, r3, [r1]
							  // Respond
							  detail_array[0] = status1;
 800369a:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800369e:	f897 2fd3 	ldrb.w	r2, [r7, #4051]	; 0xfd3
 80036a2:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80036a4:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80036a8:	6899      	ldr	r1, [r3, #8]
 80036aa:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 80036ae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4413      	add	r3, r2
 80036b6:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	2301      	movs	r3, #1
 80036be:	2008      	movs	r0, #8
 80036c0:	f7fe fec4 	bl	800244c <commandRespond1>
 80036c4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80036c8:	f103 0304 	add.w	r3, r3, #4
 80036cc:	6018      	str	r0, [r3, #0]
							  total_respond_length += respond_lenght;
 80036ce:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80036d8:	f103 0304 	add.w	r3, r3, #4
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4413      	add	r3, r2
 80036e0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80036e4:	6013      	str	r3, [r2, #0]
							  detail_array[0] = NONE;
 80036e6:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80036ea:	2227      	movs	r2, #39	; 0x27
 80036ec:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80036ee:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80036f2:	6899      	ldr	r1, [r3, #8]
 80036f4:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 80036f8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4413      	add	r3, r2
 8003700:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	2301      	movs	r3, #1
 8003708:	2003      	movs	r0, #3
 800370a:	f7fe fe9f 	bl	800244c <commandRespond1>
 800370e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003712:	f103 0304 	add.w	r3, r3, #4
 8003716:	6018      	str	r0, [r3, #0]
							  total_respond_length += respond_lenght;
 8003718:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003722:	f103 0304 	add.w	r3, r3, #4
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4413      	add	r3, r2
 800372a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800372e:	6013      	str	r3, [r2, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
							total_respond_length += respond_lenght;
							  LOG_REPORT("INIT FAIL", __LINE__);
						  }
					  }
				  break;
 8003730:	e13f      	b.n	80039b2 <StartDefaultTask+0x120a>
 8003732:	bf00      	nop
 8003734:	20010af8 	.word	0x20010af8
 8003738:	20010c78 	.word	0x20010c78
 800373c:	0801c324 	.word	0x0801c324
 8003740:	0801c330 	.word	0x0801c330
								  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8003744:	2300      	movs	r3, #0
 8003746:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800374a:	f102 021d 	add.w	r2, r2, #29
 800374e:	7013      	strb	r3, [r2, #0]
								  LOG_REPORT("TEST FAIL", __LINE__);
 8003750:	f240 2183 	movw	r1, #643	; 0x283
 8003754:	48c2      	ldr	r0, [pc, #776]	; (8003a60 <StartDefaultTask+0x12b8>)
 8003756:	f7fe fee1 	bl	800251c <LOG_REPORT>
								detail_array[0] = status2;
 800375a:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800375e:	f897 2fd2 	ldrb.w	r2, [r7, #4050]	; 0xfd2
 8003762:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003764:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003768:	6899      	ldr	r1, [r3, #8]
 800376a:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 800376e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4413      	add	r3, r2
 8003776:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	2301      	movs	r3, #1
 800377e:	2007      	movs	r0, #7
 8003780:	f7fe fe64 	bl	800244c <commandRespond1>
 8003784:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003788:	f103 0304 	add.w	r3, r3, #4
 800378c:	6018      	str	r0, [r3, #0]
								total_respond_length += respond_lenght;
 800378e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003798:	f103 0304 	add.w	r3, r3, #4
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4413      	add	r3, r2
 80037a0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80037a4:	6013      	str	r3, [r2, #0]
				  break;
 80037a6:	e104      	b.n	80039b2 <StartDefaultTask+0x120a>
							  current_duty_state 	= SCARA_DUTY_STATE_READY;
 80037a8:	2300      	movs	r3, #0
 80037aa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80037ae:	f102 021d 	add.w	r2, r2, #29
 80037b2:	7013      	strb	r3, [r2, #0]
							detail_array[0] = status1;
 80037b4:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80037b8:	f897 2fd3 	ldrb.w	r2, [r7, #4051]	; 0xfd3
 80037bc:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80037be:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80037c2:	6899      	ldr	r1, [r3, #8]
 80037c4:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 80037c8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4413      	add	r3, r2
 80037d0:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	2301      	movs	r3, #1
 80037d8:	2007      	movs	r0, #7
 80037da:	f7fe fe37 	bl	800244c <commandRespond1>
 80037de:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80037e2:	f103 0304 	add.w	r3, r3, #4
 80037e6:	6018      	str	r0, [r3, #0]
							total_respond_length += respond_lenght;
 80037e8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80037f2:	f103 0304 	add.w	r3, r3, #4
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4413      	add	r3, r2
 80037fa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80037fe:	6013      	str	r3, [r2, #0]
							  LOG_REPORT("INIT FAIL", __LINE__);
 8003800:	f240 218e 	movw	r1, #654	; 0x28e
 8003804:	4897      	ldr	r0, [pc, #604]	; (8003a64 <StartDefaultTask+0x12bc>)
 8003806:	f7fe fe89 	bl	800251c <LOG_REPORT>
				  break;
 800380a:	e0d2      	b.n	80039b2 <StartDefaultTask+0x120a>

				  case SCARA_DUTY_STATE_FLOW:
					  {
						  SCARA_StatusTypeDef status;
						  // Increase run time
						  run_time += T_SAMPLING;
 800380c:	a392      	add	r3, pc, #584	; (adr r3, 8003a58 <StartDefaultTask+0x12b0>)
 800380e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003812:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003816:	f101 0108 	add.w	r1, r1, #8
 800381a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800381e:	f7fc fd35 	bl	800028c <__adddf3>
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800382a:	f101 0108 	add.w	r1, r1, #8
 800382e:	e9c1 2300 	strd	r2, r3, [r1]
						  // Check Time Out
						  if (scaraIsFinish(run_time)) {
 8003832:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003836:	f103 0308 	add.w	r3, r3, #8
 800383a:	ed93 0b00 	vldr	d0, [r3]
 800383e:	f006 ff79 	bl	800a734 <scaraIsFinish>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d006      	beq.n	8003856 <StartDefaultTask+0x10ae>
							  current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 8003848:	2303      	movs	r3, #3
 800384a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800384e:	f102 021d 	add.w	r2, r2, #29
 8003852:	7013      	strb	r3, [r2, #0]
								total_respond_length += respond_lenght;
								  LOG_REPORT("STOP DUTY", __LINE__);
							  }
						  }
					  }
				  break;
 8003854:	e0ad      	b.n	80039b2 <StartDefaultTask+0x120a>
							  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8003856:	4e84      	ldr	r6, [pc, #528]	; (8003a68 <StartDefaultTask+0x12c0>)
 8003858:	4668      	mov	r0, sp
 800385a:	f106 0308 	add.w	r3, r6, #8
 800385e:	22b8      	movs	r2, #184	; 0xb8
 8003860:	4619      	mov	r1, r3
 8003862:	f012 fb85 	bl	8015f70 <memcpy>
 8003866:	e896 000c 	ldmia.w	r6, {r2, r3}
 800386a:	4880      	ldr	r0, [pc, #512]	; (8003a6c <StartDefaultTask+0x12c4>)
 800386c:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003870:	f101 0108 	add.w	r1, r1, #8
 8003874:	ed91 0b00 	vldr	d0, [r1]
 8003878:	f006 f8f6 	bl	8009a68 <scaraFlowDuty>
 800387c:	4603      	mov	r3, r0
 800387e:	f887 3fd4 	strb.w	r3, [r7, #4052]	; 0xfd4
							  if ( SCARA_STATUS_OK == status) {
 8003882:	f897 3fd4 	ldrb.w	r3, [r7, #4052]	; 0xfd4
 8003886:	2b00      	cmp	r3, #0
 8003888:	d113      	bne.n	80038b2 <StartDefaultTask+0x110a>
								  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 800388a:	4e77      	ldr	r6, [pc, #476]	; (8003a68 <StartDefaultTask+0x12c0>)
 800388c:	4a77      	ldr	r2, [pc, #476]	; (8003a6c <StartDefaultTask+0x12c4>)
 800388e:	ab2c      	add	r3, sp, #176	; 0xb0
 8003890:	4611      	mov	r1, r2
 8003892:	22c0      	movs	r2, #192	; 0xc0
 8003894:	4618      	mov	r0, r3
 8003896:	f012 fb6b 	bl	8015f70 <memcpy>
 800389a:	4668      	mov	r0, sp
 800389c:	f106 0310 	add.w	r3, r6, #16
 80038a0:	22b0      	movs	r2, #176	; 0xb0
 80038a2:	4619      	mov	r1, r3
 80038a4:	f012 fb64 	bl	8015f70 <memcpy>
 80038a8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80038ac:	f002 fd6c 	bl	8006388 <lowlayer_computeAndWritePulse>
				  break;
 80038b0:	e07f      	b.n	80039b2 <StartDefaultTask+0x120a>
								  current_duty_state = SCARA_DUTY_STATE_FINISH;
 80038b2:	2303      	movs	r3, #3
 80038b4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80038b8:	f102 021d 	add.w	r2, r2, #29
 80038bc:	7013      	strb	r3, [r2, #0]
								detail_array[0] = status;
 80038be:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80038c2:	f897 2fd4 	ldrb.w	r2, [r7, #4052]	; 0xfd4
 80038c6:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80038c8:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80038cc:	6899      	ldr	r1, [r3, #8]
 80038ce:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 80038d2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4413      	add	r3, r2
 80038da:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	2301      	movs	r3, #1
 80038e2:	2006      	movs	r0, #6
 80038e4:	f7fe fdb2 	bl	800244c <commandRespond1>
 80038e8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80038ec:	f103 0304 	add.w	r3, r3, #4
 80038f0:	6018      	str	r0, [r3, #0]
								total_respond_length += respond_lenght;
 80038f2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80038fc:	f103 0304 	add.w	r3, r3, #4
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4413      	add	r3, r2
 8003904:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003908:	6013      	str	r3, [r2, #0]
								  LOG_REPORT("STOP DUTY", __LINE__);
 800390a:	f240 21a6 	movw	r1, #678	; 0x2a6
 800390e:	4858      	ldr	r0, [pc, #352]	; (8003a70 <StartDefaultTask+0x12c8>)
 8003910:	f7fe fe04 	bl	800251c <LOG_REPORT>
				  break;
 8003914:	e04d      	b.n	80039b2 <StartDefaultTask+0x120a>

				  case SCARA_DUTY_STATE_FINISH:
					  {
						  lowlayer_readTruePosition(&positionNext);
 8003916:	4855      	ldr	r0, [pc, #340]	; (8003a6c <StartDefaultTask+0x12c4>)
 8003918:	f002 fba6 	bl	8006068 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 800391c:	4853      	ldr	r0, [pc, #332]	; (8003a6c <StartDefaultTask+0x12c4>)
 800391e:	f001 fc67 	bl	80051f0 <kinematicForward>
						  current_duty_state = SCARA_DUTY_STATE_READY;
 8003922:	2300      	movs	r3, #0
 8003924:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003928:	f102 021d 	add.w	r2, r2, #29
 800392c:	7013      	strb	r3, [r2, #0]
						  positionNext.t = 0;
 800392e:	494f      	ldr	r1, [pc, #316]	; (8003a6c <StartDefaultTask+0x12c4>)
 8003930:	f04f 0200 	mov.w	r2, #0
 8003934:	f04f 0300 	mov.w	r3, #0
 8003938:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
						  positionNext.total_time = 0;
 800393c:	494b      	ldr	r1, [pc, #300]	; (8003a6c <StartDefaultTask+0x12c4>)
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	f04f 0300 	mov.w	r3, #0
 8003946:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
						  positionNext.q = 0;
 800394a:	4948      	ldr	r1, [pc, #288]	; (8003a6c <StartDefaultTask+0x12c4>)
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	e9c1 2300 	strd	r2, r3, [r1]
						  // Done Inform

					detail_array[0] = NONE;
 8003958:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800395c:	2227      	movs	r2, #39	; 0x27
 800395e:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003960:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003964:	6899      	ldr	r1, [r3, #8]
 8003966:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 800396a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4413      	add	r3, r2
 8003972:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	2301      	movs	r3, #1
 800397a:	2005      	movs	r0, #5
 800397c:	f7fe fd66 	bl	800244c <commandRespond1>
 8003980:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003984:	f103 0304 	add.w	r3, r3, #4
 8003988:	6018      	str	r0, [r3, #0]
					total_respond_length += respond_lenght;
 800398a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003994:	f103 0304 	add.w	r3, r3, #4
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4413      	add	r3, r2
 800399c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80039a0:	6013      	str	r3, [r2, #0]
					  }
				  break;
 80039a2:	e006      	b.n	80039b2 <StartDefaultTask+0x120a>

				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 80039a4:	f240 21be 	movw	r1, #702	; 0x2be
 80039a8:	4832      	ldr	r0, [pc, #200]	; (8003a74 <StartDefaultTask+0x12cc>)
 80039aa:	f7fe fdb7 	bl	800251c <LOG_REPORT>
						  while(1);
 80039ae:	e7fe      	b.n	80039ae <StartDefaultTask+0x1206>
				  break;
 80039b0:	bf00      	nop
					  }
				  }

			  }
			  break;
 80039b2:	e005      	b.n	80039c0 <StartDefaultTask+0x1218>

		  default:
			  {
				  LOG_REPORT("ERROR MODE !!!", __LINE__);
 80039b4:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 80039b8:	482f      	ldr	r0, [pc, #188]	; (8003a78 <StartDefaultTask+0x12d0>)
 80039ba:	f7fe fdaf 	bl	800251c <LOG_REPORT>
				  while(1);
 80039be:	e7fe      	b.n	80039be <StartDefaultTask+0x1216>
			  }
		  }
	  }
	  break;
 80039c0:	f000 be04 	b.w	80045cc <StartDefaultTask+0x1e24>

	  case SCARA_METHOD_GCODE:
	  {
		  switch (current_duty_state)
 80039c4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80039c8:	f103 031d 	add.w	r3, r3, #29
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	f200 81b3 	bhi.w	8003d3a <StartDefaultTask+0x1592>
 80039d4:	a201      	add	r2, pc, #4	; (adr r2, 80039dc <StartDefaultTask+0x1234>)
 80039d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039da:	bf00      	nop
 80039dc:	08003d3b 	.word	0x08003d3b
 80039e0:	08003d3b 	.word	0x08003d3b
 80039e4:	08003b81 	.word	0x08003b81
 80039e8:	08003d3b 	.word	0x08003d3b
 80039ec:	080039f1 	.word	0x080039f1
		  case SCARA_DUTY_STATE_INIT:{

		  }
		  break;
		  case SCARA_DUTY_STATE_OPERATION:{
			  update_gcode_point(&duty_cmd, run_point);
 80039f0:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80039f4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80039f8:	f102 0214 	add.w	r2, r2, #20
 80039fc:	6811      	ldr	r1, [r2, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 ffda 	bl	80049b8 <update_gcode_point>
			  SCARA_StatusTypeDef status;
			  status = scaraInitDuty(duty_cmd);
 8003a04:	f507 6660 	add.w	r6, r7, #3584	; 0xe00
 8003a08:	4668      	mov	r0, sp
 8003a0a:	f106 0310 	add.w	r3, r6, #16
 8003a0e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8003a12:	4619      	mov	r1, r3
 8003a14:	f012 faac 	bl	8015f70 <memcpy>
 8003a18:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003a1c:	f003 f84c 	bl	8006ab8 <scaraInitDuty>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f887 3fd6 	strb.w	r3, [r7, #4054]	; 0xfd6
			  if(status == SCARA_STATUS_OK){
 8003a26:	f897 3fd6 	ldrb.w	r3, [r7, #4054]	; 0xfd6
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d17b      	bne.n	8003b26 <StartDefaultTask+0x137e>
				  if(duty_cmd.trajec_type == DUTY_TRAJECTORY_LINEAR || duty_cmd.trajec_type == DUTY_TRAJECTORY_BEZIER_CURVE){
 8003a2e:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003a32:	7c1b      	ldrb	r3, [r3, #16]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d004      	beq.n	8003a42 <StartDefaultTask+0x129a>
 8003a38:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003a3c:	7c1b      	ldrb	r3, [r3, #16]
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d11c      	bne.n	8003a7c <StartDefaultTask+0x12d4>
					  run_time = 0;
 8003a42:	f04f 0200 	mov.w	r2, #0
 8003a46:	f04f 0300 	mov.w	r3, #0
 8003a4a:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003a4e:	f101 0108 	add.w	r1, r1, #8
 8003a52:	e9c1 2300 	strd	r2, r3, [r1]
 8003a56:	e01f      	b.n	8003a98 <StartDefaultTask+0x12f0>
 8003a58:	40000000 	.word	0x40000000
 8003a5c:	3f847ae1 	.word	0x3f847ae1
 8003a60:	0801c340 	.word	0x0801c340
 8003a64:	0801c34c 	.word	0x0801c34c
 8003a68:	20010af8 	.word	0x20010af8
 8003a6c:	20010c78 	.word	0x20010c78
 8003a70:	0801c358 	.word	0x0801c358
 8003a74:	0801c330 	.word	0x0801c330
 8003a78:	0801c364 	.word	0x0801c364
				  }else if(duty_cmd.trajec_type == DUTY_TRAJECTORY_GCODE_LSPB){
 8003a7c:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003a80:	7c1b      	ldrb	r3, [r3, #16]
 8003a82:	2b03      	cmp	r3, #3
 8003a84:	d108      	bne.n	8003a98 <StartDefaultTask+0x12f0>
					  run_time = last_T;
 8003a86:	4bc4      	ldr	r3, [pc, #784]	; (8003d98 <StartDefaultTask+0x15f0>)
 8003a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8c:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003a90:	f101 0108 	add.w	r1, r1, #8
 8003a94:	e9c1 2300 	strd	r2, r3, [r1]
				  }
				  current_duty_state = SCARA_DUTY_STATE_FLOW;
 8003a98:	2302      	movs	r3, #2
 8003a9a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003a9e:	f102 021d 	add.w	r2, r2, #29
 8003aa2:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = (uint8_t)((run_point+1) * 100.0f / total_num_of_point );
 8003aa4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003aa8:	f103 0314 	add.w	r3, r3, #20
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	ee07 3a90 	vmov	s15, r3
 8003ab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ab8:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 8003d9c <StartDefaultTask+0x15f4>
 8003abc:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003ac0:	4bb7      	ldr	r3, [pc, #732]	; (8003da0 <StartDefaultTask+0x15f8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	ee07 3a90 	vmov	s15, r3
 8003ac8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ad4:	edc7 7a01 	vstr	s15, [r7, #4]
 8003ad8:	793b      	ldrb	r3, [r7, #4]
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8003ae0:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RDP_GCODE_PROCESS, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003ae2:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003ae6:	6899      	ldr	r1, [r3, #8]
 8003ae8:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8003aec:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4413      	add	r3, r2
 8003af4:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	2301      	movs	r3, #1
 8003afc:	200b      	movs	r0, #11
 8003afe:	f7fe fca5 	bl	800244c <commandRespond1>
 8003b02:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003b06:	f103 0304 	add.w	r3, r3, #4
 8003b0a:	6018      	str	r0, [r3, #0]
				  total_respond_length += respond_lenght;
 8003b0c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003b16:	f103 0304 	add.w	r3, r3, #4
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	e02c      	b.n	8003b80 <StartDefaultTask+0x13d8>
			  }else{
				  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003b26:	2303      	movs	r3, #3
 8003b28:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003b2c:	f102 021d 	add.w	r2, r2, #29
 8003b30:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = status;
 8003b32:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8003b36:	f897 2fd6 	ldrb.w	r2, [r7, #4054]	; 0xfd6
 8003b3a:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003b3c:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003b40:	6899      	ldr	r1, [r3, #8]
 8003b42:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8003b46:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	2301      	movs	r3, #1
 8003b56:	2007      	movs	r0, #7
 8003b58:	f7fe fc78 	bl	800244c <commandRespond1>
 8003b5c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003b60:	f103 0304 	add.w	r3, r3, #4
 8003b64:	6018      	str	r0, [r3, #0]
				  total_respond_length += respond_lenght;
 8003b66:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003b70:	f103 0304 	add.w	r3, r3, #4
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4413      	add	r3, r2
 8003b78:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003b7c:	6013      	str	r3, [r2, #0]
				  break;
 8003b7e:	e0dd      	b.n	8003d3c <StartDefaultTask+0x1594>
			  }
		  }
		  //break;

		  case SCARA_DUTY_STATE_FLOW:{
			  run_time += T_SAMPLING;
 8003b80:	a383      	add	r3, pc, #524	; (adr r3, 8003d90 <StartDefaultTask+0x15e8>)
 8003b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b86:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003b8a:	f101 0108 	add.w	r1, r1, #8
 8003b8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b92:	f7fc fb7b 	bl	800028c <__adddf3>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003b9e:	f101 0108 	add.w	r1, r1, #8
 8003ba2:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8003ba6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003baa:	f103 0308 	add.w	r3, r3, #8
 8003bae:	ed93 0b00 	vldr	d0, [r3]
 8003bb2:	f006 fdbf 	bl	800a734 <scaraIsFinish>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d063      	beq.n	8003c84 <StartDefaultTask+0x14dc>
				if(run_point >= total_num_of_point-1){
 8003bbc:	4b78      	ldr	r3, [pc, #480]	; (8003da0 <StartDefaultTask+0x15f8>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003bc6:	f102 0214 	add.w	r2, r2, #20
 8003bca:	6812      	ldr	r2, [r2, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	db0c      	blt.n	8003bea <StartDefaultTask+0x1442>
					current_duty_state = SCARA_DUTY_STATE_READY;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003bd6:	f102 021d 	add.w	r2, r2, #29
 8003bda:	7013      	strb	r3, [r2, #0]
					lowlayer_readTruePosition(&positionNext);
 8003bdc:	4871      	ldr	r0, [pc, #452]	; (8003da4 <StartDefaultTask+0x15fc>)
 8003bde:	f002 fa43 	bl	8006068 <lowlayer_readTruePosition>
				    kinematicForward(&positionNext);
 8003be2:	4870      	ldr	r0, [pc, #448]	; (8003da4 <StartDefaultTask+0x15fc>)
 8003be4:	f001 fb04 	bl	80051f0 <kinematicForward>
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 8003be8:	e0a8      	b.n	8003d3c <StartDefaultTask+0x1594>
					if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8003bea:	4b6f      	ldr	r3, [pc, #444]	; (8003da8 <StartDefaultTask+0x1600>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b09      	cmp	r3, #9
 8003bf0:	d11a      	bne.n	8003c28 <StartDefaultTask+0x1480>
						accumulate_update(Gcode_Cor[run_point++]);
 8003bf2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003bf6:	f103 0314 	add.w	r3, r3, #20
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	1c53      	adds	r3, r2, #1
 8003bfe:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003c02:	f101 0114 	add.w	r1, r1, #20
 8003c06:	600b      	str	r3, [r1, #0]
 8003c08:	4968      	ldr	r1, [pc, #416]	; (8003dac <StartDefaultTask+0x1604>)
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	1a9b      	subs	r3, r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	440b      	add	r3, r1
 8003c14:	466e      	mov	r6, sp
 8003c16:	f103 0210 	add.w	r2, r3, #16
 8003c1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c1c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8003c20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c22:	f001 f9f5 	bl	8005010 <accumulate_update>
 8003c26:	e00a      	b.n	8003c3e <StartDefaultTask+0x1496>
						run_point++;
 8003c28:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003c2c:	f103 0314 	add.w	r3, r3, #20
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3301      	adds	r3, #1
 8003c34:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003c38:	f102 0214 	add.w	r2, r2, #20
 8003c3c:	6013      	str	r3, [r2, #0]
					current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003c3e:	2304      	movs	r3, #4
 8003c40:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003c44:	f102 021d 	add.w	r2, r2, #29
 8003c48:	7013      	strb	r3, [r2, #0]
					positionNext.x = duty_cmd.target_point.x;
 8003c4a:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003c4e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8003c52:	4954      	ldr	r1, [pc, #336]	; (8003da4 <StartDefaultTask+0x15fc>)
 8003c54:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
					positionNext.y = duty_cmd.target_point.y;
 8003c58:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003c5c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003c60:	4950      	ldr	r1, [pc, #320]	; (8003da4 <StartDefaultTask+0x15fc>)
 8003c62:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
					positionNext.z = duty_cmd.target_point.z;
 8003c66:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003c6a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003c6e:	494d      	ldr	r1, [pc, #308]	; (8003da4 <StartDefaultTask+0x15fc>)
 8003c70:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
					positionNext.roll = duty_cmd.target_point.roll;
 8003c74:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003c78:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8003c7c:	4949      	ldr	r1, [pc, #292]	; (8003da4 <StartDefaultTask+0x15fc>)
 8003c7e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		  break;
 8003c82:	e05b      	b.n	8003d3c <StartDefaultTask+0x1594>
				SCARA_StatusTypeDef status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8003c84:	4e4a      	ldr	r6, [pc, #296]	; (8003db0 <StartDefaultTask+0x1608>)
 8003c86:	4668      	mov	r0, sp
 8003c88:	f106 0308 	add.w	r3, r6, #8
 8003c8c:	22b8      	movs	r2, #184	; 0xb8
 8003c8e:	4619      	mov	r1, r3
 8003c90:	f012 f96e 	bl	8015f70 <memcpy>
 8003c94:	e896 000c 	ldmia.w	r6, {r2, r3}
 8003c98:	4842      	ldr	r0, [pc, #264]	; (8003da4 <StartDefaultTask+0x15fc>)
 8003c9a:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003c9e:	f101 0108 	add.w	r1, r1, #8
 8003ca2:	ed91 0b00 	vldr	d0, [r1]
 8003ca6:	f005 fedf 	bl	8009a68 <scaraFlowDuty>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f887 3fd5 	strb.w	r3, [r7, #4053]	; 0xfd5
				if ( SCARA_STATUS_OK == status) {
 8003cb0:	f897 3fd5 	ldrb.w	r3, [r7, #4053]	; 0xfd5
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d113      	bne.n	8003ce0 <StartDefaultTask+0x1538>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003cb8:	4e3d      	ldr	r6, [pc, #244]	; (8003db0 <StartDefaultTask+0x1608>)
 8003cba:	4a3a      	ldr	r2, [pc, #232]	; (8003da4 <StartDefaultTask+0x15fc>)
 8003cbc:	ab2c      	add	r3, sp, #176	; 0xb0
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	22c0      	movs	r2, #192	; 0xc0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f012 f954 	bl	8015f70 <memcpy>
 8003cc8:	4668      	mov	r0, sp
 8003cca:	f106 0310 	add.w	r3, r6, #16
 8003cce:	22b0      	movs	r2, #176	; 0xb0
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	f012 f94d 	bl	8015f70 <memcpy>
 8003cd6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003cda:	f002 fb55 	bl	8006388 <lowlayer_computeAndWritePulse>
		  break;
 8003cde:	e02d      	b.n	8003d3c <StartDefaultTask+0x1594>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003ce6:	f102 021d 	add.w	r2, r2, #29
 8003cea:	7013      	strb	r3, [r2, #0]
					  detail_array[0] = status;
 8003cec:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8003cf0:	f897 2fd5 	ldrb.w	r2, [r7, #4053]	; 0xfd5
 8003cf4:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003cf6:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003cfa:	6899      	ldr	r1, [r3, #8]
 8003cfc:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8003d00:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4413      	add	r3, r2
 8003d08:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	2301      	movs	r3, #1
 8003d10:	2007      	movs	r0, #7
 8003d12:	f7fe fb9b 	bl	800244c <commandRespond1>
 8003d16:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003d1a:	f103 0304 	add.w	r3, r3, #4
 8003d1e:	6018      	str	r0, [r3, #0]
					  total_respond_length += respond_lenght;
 8003d20:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003d2a:	f103 0304 	add.w	r3, r3, #4
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4413      	add	r3, r2
 8003d32:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003d36:	6013      	str	r3, [r2, #0]
		  break;
 8003d38:	e000      	b.n	8003d3c <StartDefaultTask+0x1594>

		  }
		  break;
		  
		  default:
			  break;
 8003d3a:	bf00      	nop
		  }
	  }

	  break;
 8003d3c:	f000 bc46 	b.w	80045cc <StartDefaultTask+0x1e24>
	  case SCARA_METHOD_TEST:
	  {
		  lowlayer_writePulse(test_value[0], test_value[1], test_value[2], test_value[3]);
 8003d40:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8003d44:	f993 0000 	ldrsb.w	r0, [r3]
 8003d48:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8003d4c:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8003d50:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8003d54:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8003d58:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8003d5c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003d60:	f002 fcba 	bl	80066d8 <lowlayer_writePulse>
	  }
	  break;
 8003d64:	f000 bc32 	b.w	80045cc <StartDefaultTask+0x1e24>


	  case SCARA_METHOD_PICK_AND_PLACE:
	  {
		  switch(current_duty_state) {
 8003d68:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003d6c:	f103 031d 	add.w	r3, r3, #29
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	f200 8428 	bhi.w	80045ca <StartDefaultTask+0x1e22>
 8003d7a:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <StartDefaultTask+0x15d8>)
 8003d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d80:	08003db5 	.word	0x08003db5
 8003d84:	0800443d 	.word	0x0800443d
 8003d88:	080045bb 	.word	0x080045bb
 8003d8c:	08003e05 	.word	0x08003e05
 8003d90:	40000000 	.word	0x40000000
 8003d94:	3f847ae1 	.word	0x3f847ae1
 8003d98:	2000fd40 	.word	0x2000fd40
 8003d9c:	42c80000 	.word	0x42c80000
 8003da0:	20008fa8 	.word	0x20008fa8
 8003da4:	20010c78 	.word	0x20010c78
 8003da8:	200085c8 	.word	0x200085c8
 8003dac:	20008fc0 	.word	0x20008fc0
 8003db0:	20010af8 	.word	0x20010af8
		  case SCARA_DUTY_STATE_INIT:{
			  HAL_TIM_Base_Start(&htim2);
 8003db4:	4896      	ldr	r0, [pc, #600]	; (8004010 <StartDefaultTask+0x1868>)
 8003db6:	f00a f97c 	bl	800e0b2 <HAL_TIM_Base_Start>
			  object_tail_pointer = 0;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003dc0:	f102 0206 	add.w	r2, r2, #6
 8003dc4:	7013      	strb	r3, [r2, #0]
			  object_head_pointer = 0;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003dcc:	f102 0205 	add.w	r2, r2, #5
 8003dd0:	7013      	strb	r3, [r2, #0]
			  operation_state = SCARA_MOVE_TO_TARGET;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003dd8:	f102 0207 	add.w	r2, r2, #7
 8003ddc:	7013      	strb	r3, [r2, #0]
			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003dde:	2304      	movs	r3, #4
 8003de0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003de4:	f102 021d 	add.w	r2, r2, #29
 8003de8:	7013      	strb	r3, [r2, #0]
			  duty_cmd.robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8003dea:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003dee:	2204      	movs	r2, #4
 8003df0:	705a      	strb	r2, [r3, #1]
			  duty_cmd.path_type = DUTY_PATH_LINE;
 8003df2:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003df6:	2200      	movs	r2, #0
 8003df8:	739a      	strb	r2, [r3, #14]
			  duty_cmd.space_type = DUTY_SPACE_TASK;
 8003dfa:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003dfe:	2200      	movs	r2, #0
 8003e00:	735a      	strb	r2, [r3, #13]
		  }
		  break;
 8003e02:	e3df      	b.n	80045c4 <StartDefaultTask+0x1e1c>

		  case SCARA_DUTY_STATE_OPERATION:{
			  if(object_tail_pointer != object_head_pointer){
 8003e04:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003e08:	f103 0306 	add.w	r3, r3, #6
 8003e0c:	781a      	ldrb	r2, [r3, #0]
 8003e0e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003e12:	f103 0305 	add.w	r3, r3, #5
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	f000 83d0 	beq.w	80045be <StartDefaultTask+0x1e16>
				  switch(operation_state){
 8003e1e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003e22:	f103 0307 	add.w	r3, r3, #7
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b07      	cmp	r3, #7
 8003e2a:	f200 81f4 	bhi.w	8004216 <StartDefaultTask+0x1a6e>
 8003e2e:	a201      	add	r2, pc, #4	; (adr r2, 8003e34 <StartDefaultTask+0x168c>)
 8003e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e34:	08003e55 	.word	0x08003e55
 8003e38:	08003f7f 	.word	0x08003f7f
 8003e3c:	08003fb7 	.word	0x08003fb7
 8003e40:	08003fd1 	.word	0x08003fd1
 8003e44:	0800403d 	.word	0x0800403d
 8003e48:	0800418d 	.word	0x0800418d
 8003e4c:	080041c5 	.word	0x080041c5
 8003e50:	080041df 	.word	0x080041df
					  case SCARA_MOVE_TO_TARGET:{
						  double wait_time = 1e-6*((uint64_t)(GET_MICROS - Object[object_tail_pointer].timer_value)) + MOVE_TIME + PUT_DOWN_TIME_ON_OBJECT + ATTACH_TIME;
 8003e54:	4b6f      	ldr	r3, [pc, #444]	; (8004014 <StartDefaultTask+0x186c>)
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	4b6f      	ldr	r3, [pc, #444]	; (8004018 <StartDefaultTask+0x1870>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	496f      	ldr	r1, [pc, #444]	; (800401c <StartDefaultTask+0x1874>)
 8003e5e:	fba1 1303 	umull	r1, r3, r1, r3
 8003e62:	0c9b      	lsrs	r3, r3, #18
 8003e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f04f 0100 	mov.w	r1, #0
 8003e6e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003e72:	f103 0306 	add.w	r3, r3, #6
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8003e7c:	f44f 76c4 	mov.w	r6, #392	; 0x188
 8003e80:	fb06 f303 	mul.w	r3, r6, r3
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8e:	1a84      	subs	r4, r0, r2
 8003e90:	eb61 0503 	sbc.w	r5, r1, r3
 8003e94:	4620      	mov	r0, r4
 8003e96:	4629      	mov	r1, r5
 8003e98:	f7fc fb78 	bl	800058c <__aeabi_ul2d>
 8003e9c:	a35a      	add	r3, pc, #360	; (adr r3, 8004008 <StartDefaultTask+0x1860>)
 8003e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea2:	f7fc fba9 	bl	80005f8 <__aeabi_dmul>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4610      	mov	r0, r2
 8003eac:	4619      	mov	r1, r3
 8003eae:	4b5c      	ldr	r3, [pc, #368]	; (8004020 <StartDefaultTask+0x1878>)
 8003eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb4:	f7fc f9ea 	bl	800028c <__adddf3>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4b58      	ldr	r3, [pc, #352]	; (8004024 <StartDefaultTask+0x187c>)
 8003ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec6:	f7fc f9e1 	bl	800028c <__adddf3>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4610      	mov	r0, r2
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4b55      	ldr	r3, [pc, #340]	; (8004028 <StartDefaultTask+0x1880>)
 8003ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed8:	f7fc f9d8 	bl	800028c <__adddf3>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	f607 71d8 	addw	r1, r7, #4056	; 0xfd8
 8003ee4:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.y -= wait_time*conveyor_speed;
 8003ee8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003eec:	f103 0306 	add.w	r3, r3, #6
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8003ef6:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003efa:	fb01 f303 	mul.w	r3, r1, r3
 8003efe:	4413      	add	r3, r2
 8003f00:	3350      	adds	r3, #80	; 0x50
 8003f02:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003f06:	4b49      	ldr	r3, [pc, #292]	; (800402c <StartDefaultTask+0x1884>)
 8003f08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f0c:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8003f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f14:	f7fc fb70 	bl	80005f8 <__aeabi_dmul>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003f20:	f101 0106 	add.w	r1, r1, #6
 8003f24:	780e      	ldrb	r6, [r1, #0]
 8003f26:	4640      	mov	r0, r8
 8003f28:	4649      	mov	r1, r9
 8003f2a:	f7fc f9ad 	bl	8000288 <__aeabi_dsub>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8003f36:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003f3a:	fb01 f106 	mul.w	r1, r1, r6
 8003f3e:	4401      	add	r1, r0
 8003f40:	3150      	adds	r1, #80	; 0x50
 8003f42:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003f46:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003f4a:	f103 0306 	add.w	r3, r3, #6
 8003f4e:	7819      	ldrb	r1, [r3, #0]
 8003f50:	4b37      	ldr	r3, [pc, #220]	; (8004030 <StartDefaultTask+0x1888>)
 8003f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f56:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8003f5a:	f44f 76c4 	mov.w	r6, #392	; 0x188
 8003f5e:	fb06 f101 	mul.w	r1, r6, r1
 8003f62:	4401      	add	r1, r0
 8003f64:	3158      	adds	r1, #88	; 0x58
 8003f66:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = MOVE_TIME;
 8003f6a:	4b2d      	ldr	r3, [pc, #180]	; (8004020 <StartDefaultTask+0x1878>)
 8003f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f70:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003f74:	f101 0118 	add.w	r1, r1, #24
 8003f78:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8003f7c:	e14b      	b.n	8004216 <StartDefaultTask+0x1a6e>

					  case SCARA_MOVE_DOWN_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_OBJECT;
 8003f7e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003f82:	f103 0306 	add.w	r3, r3, #6
 8003f86:	7819      	ldrb	r1, [r3, #0]
 8003f88:	4b2a      	ldr	r3, [pc, #168]	; (8004034 <StartDefaultTask+0x188c>)
 8003f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8e:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8003f92:	f44f 76c4 	mov.w	r6, #392	; 0x188
 8003f96:	fb06 f101 	mul.w	r1, r6, r1
 8003f9a:	4401      	add	r1, r0
 8003f9c:	3158      	adds	r1, #88	; 0x58
 8003f9e:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PUT_DOWN_TIME_ON_OBJECT;
 8003fa2:	4b20      	ldr	r3, [pc, #128]	; (8004024 <StartDefaultTask+0x187c>)
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003fac:	f101 0118 	add.w	r1, r1, #24
 8003fb0:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8003fb4:	e12f      	b.n	8004216 <StartDefaultTask+0x1a6e>
					  case SCARA_ATTACH:{
						  state_time = ATTACH_TIME;
 8003fb6:	4b1c      	ldr	r3, [pc, #112]	; (8004028 <StartDefaultTask+0x1880>)
 8003fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbc:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003fc0:	f101 0118 	add.w	r1, r1, #24
 8003fc4:	e9c1 2300 	strd	r2, r3, [r1]
						  scaraSetOutput(1);
 8003fc8:	2001      	movs	r0, #1
 8003fca:	f006 fb21 	bl	800a610 <scaraSetOutput>
					  }
					  break;
 8003fce:	e122      	b.n	8004216 <StartDefaultTask+0x1a6e>
					  case SCARA_MOVE_UP_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003fd0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003fd4:	f103 0306 	add.w	r3, r3, #6
 8003fd8:	7819      	ldrb	r1, [r3, #0]
 8003fda:	4b15      	ldr	r3, [pc, #84]	; (8004030 <StartDefaultTask+0x1888>)
 8003fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe0:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8003fe4:	f44f 76c4 	mov.w	r6, #392	; 0x188
 8003fe8:	fb06 f101 	mul.w	r1, r6, r1
 8003fec:	4401      	add	r1, r0
 8003fee:	3158      	adds	r1, #88	; 0x58
 8003ff0:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PICK_UP_TIME_ON_OBJECT;
 8003ff4:	4b10      	ldr	r3, [pc, #64]	; (8004038 <StartDefaultTask+0x1890>)
 8003ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffa:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003ffe:	f101 0118 	add.w	r1, r1, #24
 8004002:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8004006:	e106      	b.n	8004216 <StartDefaultTask+0x1a6e>
 8004008:	a0b5ed8d 	.word	0xa0b5ed8d
 800400c:	3eb0c6f7 	.word	0x3eb0c6f7
 8004010:	20010d78 	.word	0x20010d78
 8004014:	e0001000 	.word	0xe0001000
 8004018:	2000408c 	.word	0x2000408c
 800401c:	431bde83 	.word	0x431bde83
 8004020:	20000028 	.word	0x20000028
 8004024:	20000010 	.word	0x20000010
 8004028:	20000030 	.word	0x20000030
 800402c:	20000058 	.word	0x20000058
 8004030:	20000040 	.word	0x20000040
 8004034:	20000048 	.word	0x20000048
 8004038:	20000018 	.word	0x20000018
					  case SCARA_MOVE_TO_SLOT :{
						  ObjectType current_type = Object[object_tail_pointer].object_position.object_type;
 800403c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004040:	f103 0306 	add.w	r3, r3, #6
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800404a:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800404e:	fb01 f303 	mul.w	r3, r1, r3
 8004052:	4413      	add	r3, r2
 8004054:	33b8      	adds	r3, #184	; 0xb8
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	f887 3fe7 	strb.w	r3, [r7, #4071]	; 0xfe7
						  Object[object_tail_pointer].object_position.x = SLot_Cordinate[current_type].posx + Slot_Placement[current_type]*placement_spacing;
 800405c:	f897 2fe7 	ldrb.w	r2, [r7, #4071]	; 0xfe7
 8004060:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004064:	4613      	mov	r3, r2
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	4413      	add	r3, r2
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	440b      	add	r3, r1
 800406e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004072:	f897 2fe7 	ldrb.w	r2, [r7, #4071]	; 0xfe7
 8004076:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800407a:	3b08      	subs	r3, #8
 800407c:	5c9b      	ldrb	r3, [r3, r2]
 800407e:	4618      	mov	r0, r3
 8004080:	f7fc fa50 	bl	8000524 <__aeabi_i2d>
 8004084:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004088:	f103 0308 	add.w	r3, r3, #8
 800408c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004090:	f7fc fab2 	bl	80005f8 <__aeabi_dmul>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800409c:	f101 0106 	add.w	r1, r1, #6
 80040a0:	780e      	ldrb	r6, [r1, #0]
 80040a2:	4640      	mov	r0, r8
 80040a4:	4649      	mov	r1, r9
 80040a6:	f7fc f8f1 	bl	800028c <__adddf3>
 80040aa:	4602      	mov	r2, r0
 80040ac:	460b      	mov	r3, r1
 80040ae:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 80040b2:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80040b6:	fb01 f106 	mul.w	r1, r1, r6
 80040ba:	4401      	add	r1, r0
 80040bc:	3148      	adds	r1, #72	; 0x48
 80040be:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.y = SLot_Cordinate[current_type].posy;
 80040c2:	f897 2fe7 	ldrb.w	r2, [r7, #4071]	; 0xfe7
 80040c6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80040ca:	f103 0306 	add.w	r3, r3, #6
 80040ce:	7819      	ldrb	r1, [r3, #0]
 80040d0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80040d4:	4613      	mov	r3, r2
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	4413      	add	r3, r2
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	4403      	add	r3, r0
 80040de:	3308      	adds	r3, #8
 80040e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e4:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 80040e8:	f44f 76c4 	mov.w	r6, #392	; 0x188
 80040ec:	fb06 f101 	mul.w	r1, r6, r1
 80040f0:	4401      	add	r1, r0
 80040f2:	3150      	adds	r1, #80	; 0x50
 80040f4:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.roll = SLot_Cordinate[current_type].roll;
 80040f8:	f897 2fe7 	ldrb.w	r2, [r7, #4071]	; 0xfe7
 80040fc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004100:	f103 0306 	add.w	r3, r3, #6
 8004104:	7819      	ldrb	r1, [r3, #0]
 8004106:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800410a:	4613      	mov	r3, r2
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	4413      	add	r3, r2
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	4403      	add	r3, r0
 8004114:	3310      	adds	r3, #16
 8004116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411a:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 800411e:	f44f 76c4 	mov.w	r6, #392	; 0x188
 8004122:	fb06 f101 	mul.w	r1, r6, r1
 8004126:	4401      	add	r1, r0
 8004128:	3160      	adds	r1, #96	; 0x60
 800412a:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 800412e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004132:	f103 0306 	add.w	r3, r3, #6
 8004136:	7819      	ldrb	r1, [r3, #0]
 8004138:	4bb8      	ldr	r3, [pc, #736]	; (800441c <StartDefaultTask+0x1c74>)
 800413a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413e:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8004142:	f44f 76c4 	mov.w	r6, #392	; 0x188
 8004146:	fb06 f101 	mul.w	r1, r6, r1
 800414a:	4401      	add	r1, r0
 800414c:	3158      	adds	r1, #88	; 0x58
 800414e:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = MOVE_TIME;
 8004152:	4bb3      	ldr	r3, [pc, #716]	; (8004420 <StartDefaultTask+0x1c78>)
 8004154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004158:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800415c:	f101 0118 	add.w	r1, r1, #24
 8004160:	e9c1 2300 	strd	r2, r3, [r1]
						  Slot_Placement[current_type] = (Slot_Placement[current_type] + 1)%2;
 8004164:	f897 2fe7 	ldrb.w	r2, [r7, #4071]	; 0xfe7
 8004168:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800416c:	3b08      	subs	r3, #8
 800416e:	5c9b      	ldrb	r3, [r3, r2]
 8004170:	3301      	adds	r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	bfb8      	it	lt
 800417a:	425b      	neglt	r3, r3
 800417c:	f897 2fe7 	ldrb.w	r2, [r7, #4071]	; 0xfe7
 8004180:	b2d9      	uxtb	r1, r3
 8004182:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004186:	3b08      	subs	r3, #8
 8004188:	5499      	strb	r1, [r3, r2]
					  }
					  break;
 800418a:	e044      	b.n	8004216 <StartDefaultTask+0x1a6e>
					  case SCARA_MOVE_DOWN_ON_SLOT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_SLOT;
 800418c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004190:	f103 0306 	add.w	r3, r3, #6
 8004194:	7819      	ldrb	r1, [r3, #0]
 8004196:	4ba3      	ldr	r3, [pc, #652]	; (8004424 <StartDefaultTask+0x1c7c>)
 8004198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419c:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 80041a0:	f44f 76c4 	mov.w	r6, #392	; 0x188
 80041a4:	fb06 f101 	mul.w	r1, r6, r1
 80041a8:	4401      	add	r1, r0
 80041aa:	3158      	adds	r1, #88	; 0x58
 80041ac:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PUT_DOWN_TIME_ON_SLOT;
 80041b0:	4b9d      	ldr	r3, [pc, #628]	; (8004428 <StartDefaultTask+0x1c80>)
 80041b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b6:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80041ba:	f101 0118 	add.w	r1, r1, #24
 80041be:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 80041c2:	e028      	b.n	8004216 <StartDefaultTask+0x1a6e>
					  case SCARA_RELEASE:{
						  state_time = DETACH_TIME;
 80041c4:	4b99      	ldr	r3, [pc, #612]	; (800442c <StartDefaultTask+0x1c84>)
 80041c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ca:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80041ce:	f101 0118 	add.w	r1, r1, #24
 80041d2:	e9c1 2300 	strd	r2, r3, [r1]
						  scaraSetOutput(0);
 80041d6:	2000      	movs	r0, #0
 80041d8:	f006 fa1a 	bl	800a610 <scaraSetOutput>
					  }
					  break;
 80041dc:	e01b      	b.n	8004216 <StartDefaultTask+0x1a6e>
					  case SCARA_MOVE_UP_ON_SLOT:{
						  state_time = PICK_UP_TIME_ON_SLOT;
 80041de:	4b94      	ldr	r3, [pc, #592]	; (8004430 <StartDefaultTask+0x1c88>)
 80041e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e4:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80041e8:	f101 0118 	add.w	r1, r1, #24
 80041ec:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 80041f0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80041f4:	f103 0306 	add.w	r3, r3, #6
 80041f8:	7819      	ldrb	r1, [r3, #0]
 80041fa:	4b88      	ldr	r3, [pc, #544]	; (800441c <StartDefaultTask+0x1c74>)
 80041fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004200:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8004204:	f44f 76c4 	mov.w	r6, #392	; 0x188
 8004208:	fb06 f101 	mul.w	r1, r6, r1
 800420c:	4401      	add	r1, r0
 800420e:	3158      	adds	r1, #88	; 0x58
 8004210:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8004214:	bf00      	nop
				  }
				  memcpy(&duty_cmd.target_point, &Object[object_tail_pointer].object_position, sizeof(SCARA_PositionTypeDef));
 8004216:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800421a:	f103 0306 	add.w	r3, r3, #6
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8004224:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8004228:	fb01 f303 	mul.w	r3, r1, r3
 800422c:	18d1      	adds	r1, r2, r3
 800422e:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8004232:	3328      	adds	r3, #40	; 0x28
 8004234:	22c0      	movs	r2, #192	; 0xc0
 8004236:	4618      	mov	r0, r3
 8004238:	f011 fe9a 	bl	8015f70 <memcpy>
				  duty_cmd.time_total = state_time;
 800423c:	f507 6160 	add.w	r1, r7, #3584	; 0xe00
 8004240:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004244:	f103 0318 	add.w	r3, r3, #24
 8004248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424c:	e9c1 2308 	strd	r2, r3, [r1, #32]
				  SCARA_StatusTypeDef status1;
				  duty_cmd.v_factor = 0;
 8004250:	f507 6160 	add.w	r1, r7, #3584	; 0xe00
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
				  duty_cmd.coordinate_type = DUTY_COORDINATES_ABS;
 8004260:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8004264:	2200      	movs	r2, #0
 8004266:	731a      	strb	r2, [r3, #12]
				  if(operation_state == SCARA_ATTACH || operation_state == SCARA_RELEASE){
 8004268:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800426c:	f103 0307 	add.w	r3, r3, #7
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d006      	beq.n	8004284 <StartDefaultTask+0x1adc>
 8004276:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800427a:	f103 0307 	add.w	r3, r3, #7
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b06      	cmp	r3, #6
 8004282:	d106      	bne.n	8004292 <StartDefaultTask+0x1aea>
					  status1 = SCARA_STATUS_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800428a:	f102 0213 	add.w	r2, r2, #19
 800428e:	7013      	strb	r3, [r2, #0]
 8004290:	e065      	b.n	800435e <StartDefaultTask+0x1bb6>
				  }else{
					  if(operation_state == SCARA_MOVE_DOWN_ON_OBJECT || operation_state == SCARA_MOVE_DOWN_ON_SLOT || operation_state == SCARA_MOVE_UP_ON_OBJECT || operation_state == SCARA_MOVE_UP_ON_SLOT){
 8004292:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004296:	f103 0307 	add.w	r3, r3, #7
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d014      	beq.n	80042ca <StartDefaultTask+0x1b22>
 80042a0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80042a4:	f103 0307 	add.w	r3, r3, #7
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b05      	cmp	r3, #5
 80042ac:	d00d      	beq.n	80042ca <StartDefaultTask+0x1b22>
 80042ae:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80042b2:	f103 0307 	add.w	r3, r3, #7
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b03      	cmp	r3, #3
 80042ba:	d006      	beq.n	80042ca <StartDefaultTask+0x1b22>
 80042bc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80042c0:	f103 0307 	add.w	r3, r3, #7
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b07      	cmp	r3, #7
 80042c8:	d110      	bne.n	80042ec <StartDefaultTask+0x1b44>
						  duty_cmd.path_type = DUTY_PATH_LINE;
 80042ca:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80042ce:	2200      	movs	r2, #0
 80042d0:	739a      	strb	r2, [r3, #14]
						  duty_cmd.space_type = DUTY_SPACE_TASK;
 80042d2:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80042d6:	2200      	movs	r2, #0
 80042d8:	735a      	strb	r2, [r3, #13]
						  duty_cmd.trajec_type = DUTY_TRAJECTORY_LINEAR;
 80042da:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80042de:	2202      	movs	r2, #2
 80042e0:	741a      	strb	r2, [r3, #16]
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QT;
 80042e2:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80042e6:	2203      	movs	r2, #3
 80042e8:	745a      	strb	r2, [r3, #17]
 80042ea:	e024      	b.n	8004336 <StartDefaultTask+0x1b8e>
					  }else{
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 80042ec:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80042f0:	2201      	movs	r2, #1
 80042f2:	745a      	strb	r2, [r3, #17]
						  if(pnp_move_option == CMD_MOVE_LINE){
 80042f4:	4b4f      	ldr	r3, [pc, #316]	; (8004434 <StartDefaultTask+0x1c8c>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b03      	cmp	r3, #3
 80042fa:	d10c      	bne.n	8004316 <StartDefaultTask+0x1b6e>
							  duty_cmd.path_type = DUTY_PATH_LINE;
 80042fc:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8004300:	2200      	movs	r2, #0
 8004302:	739a      	strb	r2, [r3, #14]
							  duty_cmd.space_type = DUTY_SPACE_TASK;
 8004304:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8004308:	2200      	movs	r2, #0
 800430a:	735a      	strb	r2, [r3, #13]
							  duty_cmd.trajec_type = DUTY_TRAJECTORY_SCURVE;
 800430c:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8004310:	2201      	movs	r2, #1
 8004312:	741a      	strb	r2, [r3, #16]
 8004314:	e00f      	b.n	8004336 <StartDefaultTask+0x1b8e>
						  }else if(pnp_move_option == CMD_MOVE_JOINT){
 8004316:	4b47      	ldr	r3, [pc, #284]	; (8004434 <StartDefaultTask+0x1c8c>)
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	2b05      	cmp	r3, #5
 800431c:	d10b      	bne.n	8004336 <StartDefaultTask+0x1b8e>
							  duty_cmd.joint_type = DUTY_JOINT_4DOF;
 800431e:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8004322:	2201      	movs	r2, #1
 8004324:	73da      	strb	r2, [r3, #15]
							  duty_cmd.space_type = DUTY_SPACE_JOINT;
 8004326:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800432a:	2201      	movs	r2, #1
 800432c:	735a      	strb	r2, [r3, #13]
							  duty_cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 800432e:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8004332:	2200      	movs	r2, #0
 8004334:	741a      	strb	r2, [r3, #16]
						  }

					  }
					  status1 = scaraInitDuty(duty_cmd);
 8004336:	f507 6660 	add.w	r6, r7, #3584	; 0xe00
 800433a:	4668      	mov	r0, sp
 800433c:	f106 0310 	add.w	r3, r6, #16
 8004340:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8004344:	4619      	mov	r1, r3
 8004346:	f011 fe13 	bl	8015f70 <memcpy>
 800434a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800434e:	f002 fbb3 	bl	8006ab8 <scaraInitDuty>
 8004352:	4603      	mov	r3, r0
 8004354:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004358:	f102 0213 	add.w	r2, r2, #19
 800435c:	7013      	strb	r3, [r2, #0]
				  }
				  if ( SCARA_STATUS_OK == status1) {
 800435e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004362:	f103 0313 	add.w	r3, r3, #19
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d110      	bne.n	800438e <StartDefaultTask+0x1be6>
				  	current_duty_state = SCARA_DUTY_STATE_FLOW;
 800436c:	2302      	movs	r3, #2
 800436e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004372:	f102 021d 	add.w	r2, r2, #29
 8004376:	7013      	strb	r3, [r2, #0]
				  	run_time = 0;
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8004384:	f101 0108 	add.w	r1, r1, #8
 8004388:	e9c1 2300 	strd	r2, r3, [r1]
 800438c:	e056      	b.n	800443c <StartDefaultTask+0x1c94>
				  } else {
					object_tail_pointer = (object_tail_pointer+1)%8;
 800438e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004392:	f103 0306 	add.w	r3, r3, #6
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	3301      	adds	r3, #1
 800439a:	425a      	negs	r2, r3
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	f002 0207 	and.w	r2, r2, #7
 80043a4:	bf58      	it	pl
 80043a6:	4253      	negpl	r3, r2
 80043a8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80043ac:	f102 0206 	add.w	r2, r2, #6
 80043b0:	7013      	strb	r3, [r2, #0]
					operation_state = SCARA_MOVE_TO_TARGET;
 80043b2:	2300      	movs	r3, #0
 80043b4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80043b8:	f102 0207 	add.w	r2, r2, #7
 80043bc:	7013      	strb	r3, [r2, #0]
					detail_array[0] = status1;
 80043be:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80043c2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80043c6:	f102 0213 	add.w	r2, r2, #19
 80043ca:	7812      	ldrb	r2, [r2, #0]
 80043cc:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80043ce:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80043d2:	6899      	ldr	r1, [r3, #8]
 80043d4:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 80043d8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4413      	add	r3, r2
 80043e0:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	2301      	movs	r3, #1
 80043e8:	2007      	movs	r0, #7
 80043ea:	f7fe f82f 	bl	800244c <commandRespond1>
 80043ee:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80043f2:	f103 0304 	add.w	r3, r3, #4
 80043f6:	6018      	str	r0, [r3, #0]
					total_respond_length += respond_lenght;
 80043f8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004402:	f103 0304 	add.w	r3, r3, #4
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4413      	add	r3, r2
 800440a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800440e:	6013      	str	r3, [r2, #0]
					LOG_REPORT("INIT FAIL", __LINE__);
 8004410:	f240 3195 	movw	r1, #917	; 0x395
 8004414:	4808      	ldr	r0, [pc, #32]	; (8004438 <StartDefaultTask+0x1c90>)
 8004416:	f7fe f881 	bl	800251c <LOG_REPORT>
					break;
 800441a:	e0d3      	b.n	80045c4 <StartDefaultTask+0x1e1c>
 800441c:	20000040 	.word	0x20000040
 8004420:	20000028 	.word	0x20000028
 8004424:	20000050 	.word	0x20000050
 8004428:	20000008 	.word	0x20000008
 800442c:	20000038 	.word	0x20000038
 8004430:	20000020 	.word	0x20000020
 8004434:	20000064 	.word	0x20000064
 8004438:	0801c34c 	.word	0x0801c34c


		  case SCARA_DUTY_STATE_FLOW:{
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 800443c:	a37c      	add	r3, pc, #496	; (adr r3, 8004630 <StartDefaultTask+0x1e88>)
 800443e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004442:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8004446:	f101 0108 	add.w	r1, r1, #8
 800444a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800444e:	f7fb ff1d 	bl	800028c <__adddf3>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800445a:	f101 0108 	add.w	r1, r1, #8
 800445e:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8004462:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004466:	f103 0308 	add.w	r3, r3, #8
 800446a:	ed93 0b00 	vldr	d0, [r3]
 800446e:	f006 f961 	bl	800a734 <scaraIsFinish>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d037      	beq.n	80044e8 <StartDefaultTask+0x1d40>
				current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8004478:	2304      	movs	r3, #4
 800447a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800447e:	f102 021d 	add.w	r2, r2, #29
 8004482:	7013      	strb	r3, [r2, #0]
				if(operation_state == SCARA_MOVE_UP_ON_SLOT){
 8004484:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004488:	f103 0307 	add.w	r3, r3, #7
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b07      	cmp	r3, #7
 8004490:	d118      	bne.n	80044c4 <StartDefaultTask+0x1d1c>
					operation_state = SCARA_MOVE_TO_TARGET;
 8004492:	2300      	movs	r3, #0
 8004494:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004498:	f102 0207 	add.w	r2, r2, #7
 800449c:	7013      	strb	r3, [r2, #0]
					object_tail_pointer = (object_tail_pointer+1)%8;
 800449e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80044a2:	f103 0306 	add.w	r3, r3, #6
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	3301      	adds	r3, #1
 80044aa:	425a      	negs	r2, r3
 80044ac:	f003 0307 	and.w	r3, r3, #7
 80044b0:	f002 0207 	and.w	r2, r2, #7
 80044b4:	bf58      	it	pl
 80044b6:	4253      	negpl	r3, r2
 80044b8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80044bc:	f102 0206 	add.w	r2, r2, #6
 80044c0:	7013      	strb	r3, [r2, #0]
 80044c2:	e00a      	b.n	80044da <StartDefaultTask+0x1d32>
				}else{
					operation_state += 1; //next state
 80044c4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80044c8:	f103 0307 	add.w	r3, r3, #7
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	3301      	adds	r3, #1
 80044d0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80044d4:	f102 0207 	add.w	r2, r2, #7
 80044d8:	7013      	strb	r3, [r2, #0]
				}
				lowlayer_readTruePosition(&positionNext);
 80044da:	4853      	ldr	r0, [pc, #332]	; (8004628 <StartDefaultTask+0x1e80>)
 80044dc:	f001 fdc4 	bl	8006068 <lowlayer_readTruePosition>
				kinematicForward(&positionNext);
 80044e0:	4851      	ldr	r0, [pc, #324]	; (8004628 <StartDefaultTask+0x1e80>)
 80044e2:	f000 fe85 	bl	80051f0 <kinematicForward>
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 80044e6:	e06c      	b.n	80045c2 <StartDefaultTask+0x1e1a>
			  } else if(operation_state != SCARA_ATTACH && operation_state != SCARA_RELEASE){
 80044e8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80044ec:	f103 0307 	add.w	r3, r3, #7
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d065      	beq.n	80045c2 <StartDefaultTask+0x1e1a>
 80044f6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80044fa:	f103 0307 	add.w	r3, r3, #7
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b06      	cmp	r3, #6
 8004502:	d05e      	beq.n	80045c2 <StartDefaultTask+0x1e1a>
				status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8004504:	4e49      	ldr	r6, [pc, #292]	; (800462c <StartDefaultTask+0x1e84>)
 8004506:	4668      	mov	r0, sp
 8004508:	f106 0308 	add.w	r3, r6, #8
 800450c:	22b8      	movs	r2, #184	; 0xb8
 800450e:	4619      	mov	r1, r3
 8004510:	f011 fd2e 	bl	8015f70 <memcpy>
 8004514:	e896 000c 	ldmia.w	r6, {r2, r3}
 8004518:	4843      	ldr	r0, [pc, #268]	; (8004628 <StartDefaultTask+0x1e80>)
 800451a:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800451e:	f101 0108 	add.w	r1, r1, #8
 8004522:	ed91 0b00 	vldr	d0, [r1]
 8004526:	f005 fa9f 	bl	8009a68 <scaraFlowDuty>
 800452a:	4603      	mov	r3, r0
 800452c:	f887 3fd7 	strb.w	r3, [r7, #4055]	; 0xfd7
				if ( SCARA_STATUS_OK == status) {
 8004530:	f897 3fd7 	ldrb.w	r3, [r7, #4055]	; 0xfd7
 8004534:	2b00      	cmp	r3, #0
 8004536:	d113      	bne.n	8004560 <StartDefaultTask+0x1db8>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8004538:	4e3c      	ldr	r6, [pc, #240]	; (800462c <StartDefaultTask+0x1e84>)
 800453a:	4a3b      	ldr	r2, [pc, #236]	; (8004628 <StartDefaultTask+0x1e80>)
 800453c:	ab2c      	add	r3, sp, #176	; 0xb0
 800453e:	4611      	mov	r1, r2
 8004540:	22c0      	movs	r2, #192	; 0xc0
 8004542:	4618      	mov	r0, r3
 8004544:	f011 fd14 	bl	8015f70 <memcpy>
 8004548:	4668      	mov	r0, sp
 800454a:	f106 0310 	add.w	r3, r6, #16
 800454e:	22b0      	movs	r2, #176	; 0xb0
 8004550:	4619      	mov	r1, r3
 8004552:	f011 fd0d 	bl	8015f70 <memcpy>
 8004556:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800455a:	f001 ff15 	bl	8006388 <lowlayer_computeAndWritePulse>
		  break;
 800455e:	e030      	b.n	80045c2 <StartDefaultTask+0x1e1a>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8004560:	2303      	movs	r3, #3
 8004562:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004566:	f102 021d 	add.w	r2, r2, #29
 800456a:	7013      	strb	r3, [r2, #0]
					  detail_array[0] = status;
 800456c:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8004570:	f897 2fd7 	ldrb.w	r2, [r7, #4055]	; 0xfd7
 8004574:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8004576:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800457a:	6899      	ldr	r1, [r3, #8]
 800457c:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8004580:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4413      	add	r3, r2
 8004588:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	2301      	movs	r3, #1
 8004590:	2007      	movs	r0, #7
 8004592:	f7fd ff5b 	bl	800244c <commandRespond1>
 8004596:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800459a:	f103 0304 	add.w	r3, r3, #4
 800459e:	6018      	str	r0, [r3, #0]
					  total_respond_length += respond_lenght;
 80045a0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80045aa:	f103 0304 	add.w	r3, r3, #4
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4413      	add	r3, r2
 80045b2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80045b6:	6013      	str	r3, [r2, #0]
		  break;
 80045b8:	e003      	b.n	80045c2 <StartDefaultTask+0x1e1a>

		  case SCARA_DUTY_STATE_FINISH:

			  //error
			  //free(Object);
		  break;
 80045ba:	bf00      	nop
 80045bc:	e005      	b.n	80045ca <StartDefaultTask+0x1e22>
				  break;
 80045be:	bf00      	nop
 80045c0:	e003      	b.n	80045ca <StartDefaultTask+0x1e22>
		  break;
 80045c2:	bf00      	nop
		  }
	  }
	  break;
 80045c4:	e001      	b.n	80045ca <StartDefaultTask+0x1e22>
	  break;
 80045c6:	bf00      	nop
 80045c8:	e000      	b.n	80045cc <StartDefaultTask+0x1e24>
	  break;
 80045ca:	bf00      	nop

	  }
	  }

	  /* 4--- Send to PC Phase ---*/
	if(total_respond_length > 0){
 80045cc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	dd09      	ble.n	80045ea <StartDefaultTask+0x1e42>
		CDC_Transmit_FS(respond, total_respond_length);
 80045d6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	b29a      	uxth	r2, r3
 80045de:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 80045e2:	4611      	mov	r1, r2
 80045e4:	4618      	mov	r0, r3
 80045e6:	f011 f845 	bl	8015674 <CDC_Transmit_FS>
	}

	  /* 5--- Update ---*/
	  scaraSetMethod(current_method);
 80045ea:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80045ee:	f103 031f 	add.w	r3, r3, #31
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f006 f83d 	bl	800a674 <scaraSetMethod>
	  scaraSetMode(current_mode);
 80045fa:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80045fe:	f103 031e 	add.w	r3, r3, #30
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	4618      	mov	r0, r3
 8004606:	f006 f825 	bl	800a654 <scaraSetMode>
	  scaraSetDutyState(current_duty_state);
 800460a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800460e:	f103 031d 	add.w	r3, r3, #29
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f006 f80d 	bl	800a634 <scaraSetDutyState>

    osDelay(1);
 800461a:	2001      	movs	r0, #1
 800461c:	f00e f909 	bl	8012832 <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 8004620:	f7fe b956 	b.w	80028d0 <StartDefaultTask+0x128>
 8004624:	f3af 8000 	nop.w
 8004628:	20010c78 	.word	0x20010c78
 800462c:	20010af8 	.word	0x20010af8
 8004630:	40000000 	.word	0x40000000
 8004634:	3f847ae1 	.word	0x3f847ae1

08004638 <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 8004638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800463a:	f2ad 5dd4 	subw	sp, sp, #1492	; 0x5d4
 800463e:	af70      	add	r7, sp, #448	; 0x1c0
 8004640:	1d3b      	adds	r3, r7, #4
 8004642:	6018      	str	r0, [r3, #0]
	int32_t				respond_lenght;
	//int32_t				message_lenght;
	int32_t 			detail_length;

	// Default value
	duty_cmd.key_speed = 1;
 8004644:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8004648:	2201      	movs	r2, #1
 800464a:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 800464c:	4964      	ldr	r1, [pc, #400]	; (80047e0 <Start_USB_RX_Task+0x1a8>)
 800464e:	4865      	ldr	r0, [pc, #404]	; (80047e4 <Start_USB_RX_Task+0x1ac>)
 8004650:	f001 fa73 	bl	8005b3a <ringBuff_DistanceOf>
 8004654:	f8c7 0408 	str.w	r0, [r7, #1032]	; 0x408
		  if (distance != -1) {
 8004658:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800465c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004660:	d0f4      	beq.n	800464c <Start_USB_RX_Task+0x14>
 8004662:	466b      	mov	r3, sp
 8004664:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 8004666:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800466a:	1c5c      	adds	r4, r3, #1
 800466c:	1e63      	subs	r3, r4, #1
 800466e:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8004672:	4623      	mov	r3, r4
 8004674:	4618      	mov	r0, r3
 8004676:	f04f 0100 	mov.w	r1, #0
 800467a:	f04f 0200 	mov.w	r2, #0
 800467e:	f04f 0300 	mov.w	r3, #0
 8004682:	00cb      	lsls	r3, r1, #3
 8004684:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004688:	00c2      	lsls	r2, r0, #3
 800468a:	4623      	mov	r3, r4
 800468c:	4618      	mov	r0, r3
 800468e:	f04f 0100 	mov.w	r1, #0
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	f04f 0300 	mov.w	r3, #0
 800469a:	00cb      	lsls	r3, r1, #3
 800469c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80046a0:	00c2      	lsls	r2, r0, #3
 80046a2:	4623      	mov	r3, r4
 80046a4:	3307      	adds	r3, #7
 80046a6:	08db      	lsrs	r3, r3, #3
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	ebad 0d03 	sub.w	sp, sp, r3
 80046ae:	ab70      	add	r3, sp, #448	; 0x1c0
 80046b0:	3300      	adds	r3, #0
 80046b2:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 80046b6:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 80046ba:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80046be:	3301      	adds	r3, #1
 80046c0:	461a      	mov	r2, r3
 80046c2:	4848      	ldr	r0, [pc, #288]	; (80047e4 <Start_USB_RX_Task+0x1ac>)
 80046c4:	f001 fa18 	bl	8005af8 <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1, data_packet);
 80046c8:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
 80046cc:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80046d0:	3301      	adds	r3, #1
 80046d2:	f107 020c 	add.w	r2, r7, #12
 80046d6:	4619      	mov	r1, r3
 80046d8:	f7fd ff66 	bl	80025a8 <unPackPayload>
 80046dc:	f8c7 03fc 	str.w	r0, [r7, #1020]	; 0x3fc

			  if( -1 == ret) {
 80046e0:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 80046e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e8:	d077      	beq.n	80047da <Start_USB_RX_Task+0x1a2>
				  //LOG_REPORT("UNPACK FAIL", __LINE__);
			  } else {
				  //LOG_REPORT((char*) temp, __LINE__);
				  cmd_type = packetRead(data_packet, ret, &id_command, &duty_cmd);
 80046ea:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80046ee:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 80046f2:	f107 000c 	add.w	r0, r7, #12
 80046f6:	f8d7 13fc 	ldr.w	r1, [r7, #1020]	; 0x3fc
 80046fa:	f7fc fc79 	bl	8000ff0 <packetRead>
 80046fe:	4603      	mov	r3, r0
 8004700:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb
				  memset(detail, 0, sizeof(detail));
 8004704:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004708:	2287      	movs	r2, #135	; 0x87
 800470a:	2100      	movs	r1, #0
 800470c:	4618      	mov	r0, r3
 800470e:	f011 fc57 	bl	8015fc0 <memset>
				  detail_length = 0;
 8004712:	f107 0308 	add.w	r3, r7, #8
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]
				  rpd_type = commandReply(cmd_type, duty_cmd, detail, &detail_length);
 800471a:	f507 740a 	add.w	r4, r7, #552	; 0x228
 800471e:	f897 53fb 	ldrb.w	r5, [r7, #1019]	; 0x3fb
 8004722:	f107 0308 	add.w	r3, r7, #8
 8004726:	936f      	str	r3, [sp, #444]	; 0x1bc
 8004728:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800472c:	936e      	str	r3, [sp, #440]	; 0x1b8
 800472e:	4668      	mov	r0, sp
 8004730:	f104 0308 	add.w	r3, r4, #8
 8004734:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8004738:	4619      	mov	r1, r3
 800473a:	f011 fc19 	bl	8015f70 <memcpy>
 800473e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8004742:	4628      	mov	r0, r5
 8004744:	f7fd fcc4 	bl	80020d0 <commandReply>
 8004748:	4603      	mov	r3, r0
 800474a:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
				  //LOG_REPORT("tail", usb_rx_ringbuff.tail);
				  if ( RPD_DUTY == rpd_type) {
 800474e:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8004752:	2b09      	cmp	r3, #9
 8004754:	d123      	bne.n	800479e <Start_USB_RX_Task+0x166>
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 8004756:	2300      	movs	r3, #0
 8004758:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
					  // Wait allocate
					  while (dataMail == NULL) {
 800475c:	e008      	b.n	8004770 <Start_USB_RX_Task+0x138>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 800475e:	4b22      	ldr	r3, [pc, #136]	; (80047e8 <Start_USB_RX_Task+0x1b0>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f04f 31ff 	mov.w	r1, #4294967295
 8004766:	4618      	mov	r0, r3
 8004768:	f00e fa74 	bl	8012c54 <osMailAlloc>
 800476c:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
					  while (dataMail == NULL) {
 8004770:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0f2      	beq.n	800475e <Start_USB_RX_Task+0x126>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 8004778:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800477c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8004780:	4619      	mov	r1, r3
 8004782:	f8d7 040c 	ldr.w	r0, [r7, #1036]	; 0x40c
 8004786:	f011 fbf3 	bl	8015f70 <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 800478a:	4b17      	ldr	r3, [pc, #92]	; (80047e8 <Start_USB_RX_Task+0x1b0>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 8004792:	4618      	mov	r0, r3
 8004794:	f00e fa74 	bl	8012c80 <osMailPut>
 8004798:	f8c7 03f0 	str.w	r0, [r7, #1008]	; 0x3f0
 800479c:	e01d      	b.n	80047da <Start_USB_RX_Task+0x1a2>
						  //LOG_REPORT("DUTY SEND", __LINE__);
					  }

				//   }else if( RPD_POSITION == rpd_type) { 
				// 	  CDC_Transmit_FS(detail, 84);
				  }else if(rpd_type == RPD_TRANSFER){
 800479e:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 80047a2:	2b0a      	cmp	r3, #10
 80047a4:	d019      	beq.n	80047da <Start_USB_RX_Task+0x1a2>

				  }else {
					  respond_lenght	= commandRespond1(rpd_type, cmd_type,
 80047a6:	f897 13fb 	ldrb.w	r1, [r7, #1019]	; 0x3fb
 80047aa:	f107 0308 	add.w	r3, r7, #8
 80047ae:	681c      	ldr	r4, [r3, #0]
 80047b0:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80047b4:	f897 03fa 	ldrb.w	r0, [r7, #1018]	; 0x3fa
 80047b8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	4623      	mov	r3, r4
 80047c0:	f7fd fe44 	bl	800244c <commandRespond1>
 80047c4:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
							  	  	  	  (char *)detail, detail_length,
										  (char *)respond);
					  CDC_Transmit_FS(respond, respond_lenght);
 80047c8:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80047d2:	4611      	mov	r1, r2
 80047d4:	4618      	mov	r0, r3
 80047d6:	f010 ff4d 	bl	8015674 <CDC_Transmit_FS>
 80047da:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 80047dc:	e736      	b.n	800464c <Start_USB_RX_Task+0x14>
 80047de:	bf00      	nop
 80047e0:	0801c410 	.word	0x0801c410
 80047e4:	20000068 	.word	0x20000068
 80047e8:	2000fe74 	.word	0x2000fe74

080047ec <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	b292      	uxth	r2, r2
 80047fc:	801a      	strh	r2, [r3, #0]
}
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	b29b      	uxth	r3, r3
}
 8004818:	4618      	mov	r0, r3
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800482a:	1d3b      	adds	r3, r7, #4
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	605a      	str	r2, [r3, #4]
 8004832:	609a      	str	r2, [r3, #8]
 8004834:	60da      	str	r2, [r3, #12]
 8004836:	611a      	str	r2, [r3, #16]
 8004838:	615a      	str	r2, [r3, #20]
 800483a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 800483c:	4b27      	ldr	r3, [pc, #156]	; (80048dc <MX_FSMC_Init+0xb8>)
 800483e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8004842:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8004844:	4b25      	ldr	r3, [pc, #148]	; (80048dc <MX_FSMC_Init+0xb8>)
 8004846:	4a26      	ldr	r2, [pc, #152]	; (80048e0 <MX_FSMC_Init+0xbc>)
 8004848:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800484a:	4b24      	ldr	r3, [pc, #144]	; (80048dc <MX_FSMC_Init+0xb8>)
 800484c:	2200      	movs	r2, #0
 800484e:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8004850:	4b22      	ldr	r3, [pc, #136]	; (80048dc <MX_FSMC_Init+0xb8>)
 8004852:	2202      	movs	r2, #2
 8004854:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 8004856:	4b21      	ldr	r3, [pc, #132]	; (80048dc <MX_FSMC_Init+0xb8>)
 8004858:	2208      	movs	r2, #8
 800485a:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800485c:	4b1f      	ldr	r3, [pc, #124]	; (80048dc <MX_FSMC_Init+0xb8>)
 800485e:	2210      	movs	r2, #16
 8004860:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8004862:	4b1e      	ldr	r3, [pc, #120]	; (80048dc <MX_FSMC_Init+0xb8>)
 8004864:	2200      	movs	r2, #0
 8004866:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8004868:	4b1c      	ldr	r3, [pc, #112]	; (80048dc <MX_FSMC_Init+0xb8>)
 800486a:	2200      	movs	r2, #0
 800486c:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800486e:	4b1b      	ldr	r3, [pc, #108]	; (80048dc <MX_FSMC_Init+0xb8>)
 8004870:	2200      	movs	r2, #0
 8004872:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8004874:	4b19      	ldr	r3, [pc, #100]	; (80048dc <MX_FSMC_Init+0xb8>)
 8004876:	2200      	movs	r2, #0
 8004878:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800487a:	4b18      	ldr	r3, [pc, #96]	; (80048dc <MX_FSMC_Init+0xb8>)
 800487c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004880:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8004882:	4b16      	ldr	r3, [pc, #88]	; (80048dc <MX_FSMC_Init+0xb8>)
 8004884:	2200      	movs	r2, #0
 8004886:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8004888:	4b14      	ldr	r3, [pc, #80]	; (80048dc <MX_FSMC_Init+0xb8>)
 800488a:	2200      	movs	r2, #0
 800488c:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800488e:	4b13      	ldr	r3, [pc, #76]	; (80048dc <MX_FSMC_Init+0xb8>)
 8004890:	2200      	movs	r2, #0
 8004892:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8004894:	4b11      	ldr	r3, [pc, #68]	; (80048dc <MX_FSMC_Init+0xb8>)
 8004896:	2200      	movs	r2, #0
 8004898:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800489a:	4b10      	ldr	r3, [pc, #64]	; (80048dc <MX_FSMC_Init+0xb8>)
 800489c:	2200      	movs	r2, #0
 800489e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80048a0:	230f      	movs	r3, #15
 80048a2:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80048a4:	230f      	movs	r3, #15
 80048a6:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80048a8:	23ff      	movs	r3, #255	; 0xff
 80048aa:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80048ac:	230f      	movs	r3, #15
 80048ae:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80048b0:	2310      	movs	r3, #16
 80048b2:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80048b4:	2311      	movs	r3, #17
 80048b6:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80048b8:	2300      	movs	r3, #0
 80048ba:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 80048bc:	1d3b      	adds	r3, r7, #4
 80048be:	2200      	movs	r2, #0
 80048c0:	4619      	mov	r1, r3
 80048c2:	4806      	ldr	r0, [pc, #24]	; (80048dc <MX_FSMC_Init+0xb8>)
 80048c4:	f007 fd52 	bl	800c36c <HAL_NOR_Init>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 80048ce:	f001 f859 	bl	8005984 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80048d2:	bf00      	nop
 80048d4:	3720      	adds	r7, #32
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	2000fe80 	.word	0x2000fe80
 80048e0:	a0000104 	.word	0xa0000104

080048e4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ea:	1d3b      	adds	r3, r7, #4
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	605a      	str	r2, [r3, #4]
 80048f2:	609a      	str	r2, [r3, #8]
 80048f4:	60da      	str	r2, [r3, #12]
 80048f6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80048f8:	4b24      	ldr	r3, [pc, #144]	; (800498c <HAL_FSMC_MspInit+0xa8>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d140      	bne.n	8004982 <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 8004900:	4b22      	ldr	r3, [pc, #136]	; (800498c <HAL_FSMC_MspInit+0xa8>)
 8004902:	2201      	movs	r2, #1
 8004904:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8004906:	2300      	movs	r3, #0
 8004908:	603b      	str	r3, [r7, #0]
 800490a:	4b21      	ldr	r3, [pc, #132]	; (8004990 <HAL_FSMC_MspInit+0xac>)
 800490c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490e:	4a20      	ldr	r2, [pc, #128]	; (8004990 <HAL_FSMC_MspInit+0xac>)
 8004910:	f043 0301 	orr.w	r3, r3, #1
 8004914:	6393      	str	r3, [r2, #56]	; 0x38
 8004916:	4b1e      	ldr	r3, [pc, #120]	; (8004990 <HAL_FSMC_MspInit+0xac>)
 8004918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	603b      	str	r3, [r7, #0]
 8004920:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004922:	f64f 7380 	movw	r3, #65408	; 0xff80
 8004926:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004928:	2302      	movs	r3, #2
 800492a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492c:	2300      	movs	r3, #0
 800492e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004930:	2303      	movs	r3, #3
 8004932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004934:	230c      	movs	r3, #12
 8004936:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004938:	1d3b      	adds	r3, r7, #4
 800493a:	4619      	mov	r1, r3
 800493c:	4815      	ldr	r0, [pc, #84]	; (8004994 <HAL_FSMC_MspInit+0xb0>)
 800493e:	f007 fb5f 	bl	800c000 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8004942:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8004946:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004948:	2302      	movs	r3, #2
 800494a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800494c:	2300      	movs	r3, #0
 800494e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004950:	2303      	movs	r3, #3
 8004952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004954:	230c      	movs	r3, #12
 8004956:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004958:	1d3b      	adds	r3, r7, #4
 800495a:	4619      	mov	r1, r3
 800495c:	480e      	ldr	r0, [pc, #56]	; (8004998 <HAL_FSMC_MspInit+0xb4>)
 800495e:	f007 fb4f 	bl	800c000 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004962:	2380      	movs	r3, #128	; 0x80
 8004964:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004966:	2302      	movs	r3, #2
 8004968:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800496a:	2300      	movs	r3, #0
 800496c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800496e:	2303      	movs	r3, #3
 8004970:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004972:	230c      	movs	r3, #12
 8004974:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004976:	1d3b      	adds	r3, r7, #4
 8004978:	4619      	mov	r1, r3
 800497a:	4808      	ldr	r0, [pc, #32]	; (800499c <HAL_FSMC_MspInit+0xb8>)
 800497c:	f007 fb40 	bl	800c000 <HAL_GPIO_Init>
 8004980:	e000      	b.n	8004984 <HAL_FSMC_MspInit+0xa0>
    return;
 8004982:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004984:	3718      	adds	r7, #24
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	2000485c 	.word	0x2000485c
 8004990:	40023800 	.word	0x40023800
 8004994:	40021000 	.word	0x40021000
 8004998:	40020c00 	.word	0x40020c00
 800499c:	40020400 	.word	0x40020400

080049a0 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 80049a8:	f7ff ff9c 	bl	80048e4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 80049ac:	bf00      	nop
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	0000      	movs	r0, r0
	...

080049b8 <update_gcode_point>:
extern int16_t 							pre_clutch_index;
extern Gcode_Packet_Command_TypeDef 	pre_height;
extern Gcode_Packet_Command_TypeDef 	Gcode_Mode;
extern SCARA_Gcode_Cor_TypeDef			Gcode_Cor[1000];
void update_gcode_point(DUTY_Command_TypeDef *duty_cmd, int32_t run_point)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
//		bezier_y_coeffs[1] = ((double)Gcode_Cor[run_point].Y * COR_INVERSE_SCALE + offset_y)*2.0*bezier_wc;
//		bezier_y_coeffs[2] = duty_cmd->target_point.y;
//	}else{
//
//	}
	duty_cmd->target_point.x = (double)Gcode_Cor[run_point].X * COR_INVERSE_SCALE + offset_x;
 80049c2:	499d      	ldr	r1, [pc, #628]	; (8004c38 <update_gcode_point+0x280>)
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	4613      	mov	r3, r2
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	1a9b      	subs	r3, r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	440b      	add	r3, r1
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fb fda6 	bl	8000524 <__aeabi_i2d>
 80049d8:	a395      	add	r3, pc, #596	; (adr r3, 8004c30 <update_gcode_point+0x278>)
 80049da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049de:	f7fb fe0b 	bl	80005f8 <__aeabi_dmul>
 80049e2:	4602      	mov	r2, r0
 80049e4:	460b      	mov	r3, r1
 80049e6:	4610      	mov	r0, r2
 80049e8:	4619      	mov	r1, r3
 80049ea:	4b94      	ldr	r3, [pc, #592]	; (8004c3c <update_gcode_point+0x284>)
 80049ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f0:	f7fb fc4c 	bl	800028c <__adddf3>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	duty_cmd->target_point.y = (double)Gcode_Cor[run_point].Y * COR_INVERSE_SCALE + offset_y;
 80049fe:	498e      	ldr	r1, [pc, #568]	; (8004c38 <update_gcode_point+0x280>)
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	4613      	mov	r3, r2
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	1a9b      	subs	r3, r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fb fd87 	bl	8000524 <__aeabi_i2d>
 8004a16:	a386      	add	r3, pc, #536	; (adr r3, 8004c30 <update_gcode_point+0x278>)
 8004a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1c:	f7fb fdec 	bl	80005f8 <__aeabi_dmul>
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	4610      	mov	r0, r2
 8004a26:	4619      	mov	r1, r3
 8004a28:	4b85      	ldr	r3, [pc, #532]	; (8004c40 <update_gcode_point+0x288>)
 8004a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2e:	f7fb fc2d 	bl	800028c <__adddf3>
 8004a32:	4602      	mov	r2, r0
 8004a34:	460b      	mov	r3, r1
 8004a36:	6879      	ldr	r1, [r7, #4]
 8004a38:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	if(Gcode_Cor[run_point].configure.type_define[1] == UP_Z){
 8004a3c:	497e      	ldr	r1, [pc, #504]	; (8004c38 <update_gcode_point+0x280>)
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	4613      	mov	r3, r2
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	1a9b      	subs	r3, r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	440b      	add	r3, r1
 8004a4a:	331b      	adds	r3, #27
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	2b06      	cmp	r3, #6
 8004a50:	d10d      	bne.n	8004a6e <update_gcode_point+0xb6>
	  duty_cmd->target_point.z = up_z_height + offset_z;
 8004a52:	4b7c      	ldr	r3, [pc, #496]	; (8004c44 <update_gcode_point+0x28c>)
 8004a54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a58:	4b7b      	ldr	r3, [pc, #492]	; (8004c48 <update_gcode_point+0x290>)
 8004a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5e:	f7fb fc15 	bl	800028c <__adddf3>
 8004a62:	4602      	mov	r2, r0
 8004a64:	460b      	mov	r3, r1
 8004a66:	6879      	ldr	r1, [r7, #4]
 8004a68:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 8004a6c:	e00c      	b.n	8004a88 <update_gcode_point+0xd0>
	}else{
	  duty_cmd->target_point.z = down_z_height + offset_z;
 8004a6e:	4b77      	ldr	r3, [pc, #476]	; (8004c4c <update_gcode_point+0x294>)
 8004a70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a74:	4b74      	ldr	r3, [pc, #464]	; (8004c48 <update_gcode_point+0x290>)
 8004a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7a:	f7fb fc07 	bl	800028c <__adddf3>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	}
	duty_cmd->target_point.roll = roll_angle;
 8004a88:	4b71      	ldr	r3, [pc, #452]	; (8004c50 <update_gcode_point+0x298>)
 8004a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	duty_cmd->space_type = DUTY_SPACE_TASK;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	735a      	strb	r2, [r3, #13]
	duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	731a      	strb	r2, [r3, #12]
	if(Gcode_Cor[run_point].configure.type_define[0] == LINEAR_TYPE){
 8004aa0:	4965      	ldr	r1, [pc, #404]	; (8004c38 <update_gcode_point+0x280>)
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	1a9b      	subs	r3, r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	440b      	add	r3, r1
 8004aae:	331a      	adds	r3, #26
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d103      	bne.n	8004abe <update_gcode_point+0x106>
	  duty_cmd->path_type = DUTY_PATH_LINE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	739a      	strb	r2, [r3, #14]
 8004abc:	e07b      	b.n	8004bb6 <update_gcode_point+0x1fe>
	}else if(Gcode_Cor[run_point].configure.type_define[0] == ARC_AW_TYPE){
 8004abe:	495e      	ldr	r1, [pc, #376]	; (8004c38 <update_gcode_point+0x280>)
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	1a9b      	subs	r3, r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	440b      	add	r3, r1
 8004acc:	331a      	adds	r3, #26
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d132      	bne.n	8004b3a <update_gcode_point+0x182>
	  duty_cmd->sub_point.x = (double)Gcode_Cor[run_point].I * COR_INVERSE_SCALE;
 8004ad4:	4958      	ldr	r1, [pc, #352]	; (8004c38 <update_gcode_point+0x280>)
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	1a9b      	subs	r3, r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	330c      	adds	r3, #12
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fb fd1c 	bl	8000524 <__aeabi_i2d>
 8004aec:	a350      	add	r3, pc, #320	; (adr r3, 8004c30 <update_gcode_point+0x278>)
 8004aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af2:	f7fb fd81 	bl	80005f8 <__aeabi_dmul>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
	  duty_cmd->sub_point.y = (double)Gcode_Cor[run_point].J * COR_INVERSE_SCALE;
 8004b00:	494d      	ldr	r1, [pc, #308]	; (8004c38 <update_gcode_point+0x280>)
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	4613      	mov	r3, r2
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	1a9b      	subs	r3, r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	3310      	adds	r3, #16
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fb fd06 	bl	8000524 <__aeabi_i2d>
 8004b18:	a345      	add	r3, pc, #276	; (adr r3, 8004c30 <update_gcode_point+0x278>)
 8004b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1e:	f7fb fd6b 	bl	80005f8 <__aeabi_dmul>
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	6879      	ldr	r1, [r7, #4]
 8004b28:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
	  duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	739a      	strb	r2, [r3, #14]
	  duty_cmd->arc_dir = 1;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	615a      	str	r2, [r3, #20]
 8004b38:	e03d      	b.n	8004bb6 <update_gcode_point+0x1fe>
	}else if(Gcode_Cor[run_point].configure.type_define[0] == ARC_CW_TYPE){
 8004b3a:	493f      	ldr	r1, [pc, #252]	; (8004c38 <update_gcode_point+0x280>)
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	1a9b      	subs	r3, r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	440b      	add	r3, r1
 8004b48:	331a      	adds	r3, #26
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b03      	cmp	r3, #3
 8004b4e:	d132      	bne.n	8004bb6 <update_gcode_point+0x1fe>
	  duty_cmd->sub_point.x = (double)Gcode_Cor[run_point].I * COR_INVERSE_SCALE;
 8004b50:	4939      	ldr	r1, [pc, #228]	; (8004c38 <update_gcode_point+0x280>)
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	4613      	mov	r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	1a9b      	subs	r3, r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	440b      	add	r3, r1
 8004b5e:	330c      	adds	r3, #12
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fb fcde 	bl	8000524 <__aeabi_i2d>
 8004b68:	a331      	add	r3, pc, #196	; (adr r3, 8004c30 <update_gcode_point+0x278>)
 8004b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6e:	f7fb fd43 	bl	80005f8 <__aeabi_dmul>
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
	  duty_cmd->sub_point.y = (double)Gcode_Cor[run_point].J * COR_INVERSE_SCALE;
 8004b7c:	492e      	ldr	r1, [pc, #184]	; (8004c38 <update_gcode_point+0x280>)
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	4613      	mov	r3, r2
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	1a9b      	subs	r3, r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	440b      	add	r3, r1
 8004b8a:	3310      	adds	r3, #16
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fb fcc8 	bl	8000524 <__aeabi_i2d>
 8004b94:	a326      	add	r3, pc, #152	; (adr r3, 8004c30 <update_gcode_point+0x278>)
 8004b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9a:	f7fb fd2d 	bl	80005f8 <__aeabi_dmul>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	6879      	ldr	r1, [r7, #4]
 8004ba4:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
	  duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	739a      	strb	r2, [r3, #14]
	  duty_cmd->arc_dir = -1;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb4:	615a      	str	r2, [r3, #20]
	}

	if(Gcode_Mode == GCODE_LINEAR){
 8004bb6:	4b27      	ldr	r3, [pc, #156]	; (8004c54 <update_gcode_point+0x29c>)
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	2b08      	cmp	r3, #8
 8004bbc:	d14e      	bne.n	8004c5c <update_gcode_point+0x2a4>
		duty_cmd->v_factor = (double)Gcode_Cor[run_point].F * COR_INVERSE_SCALE / V_MOVE_MAX;
 8004bbe:	491e      	ldr	r1, [pc, #120]	; (8004c38 <update_gcode_point+0x280>)
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	1a9b      	subs	r3, r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	440b      	add	r3, r1
 8004bcc:	3308      	adds	r3, #8
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fb fca7 	bl	8000524 <__aeabi_i2d>
 8004bd6:	a316      	add	r3, pc, #88	; (adr r3, 8004c30 <update_gcode_point+0x278>)
 8004bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bdc:	f7fb fd0c 	bl	80005f8 <__aeabi_dmul>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	4610      	mov	r0, r2
 8004be6:	4619      	mov	r1, r3
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	4b1a      	ldr	r3, [pc, #104]	; (8004c58 <update_gcode_point+0x2a0>)
 8004bee:	f7fb fe2d 	bl	800084c <__aeabi_ddiv>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	6879      	ldr	r1, [r7, #4]
 8004bf8:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
		if(run_point == 1){
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d10d      	bne.n	8004c1e <update_gcode_point+0x266>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	741a      	strb	r2, [r3, #16]
			duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	745a      	strb	r2, [r3, #17]
			duty_cmd->time_total = 0;
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	e9c1 2308 	strd	r2, r3, [r1, #32]
			duty_cmd->v_factor = (double)gcode_clutch_configure[Gcode_Cor[run_point].configure.clutch_index].Depth_Feed*COR_INVERSE_SCALE/V_MOVE_MAX;
			pre_height = Gcode_Cor[run_point].configure.type_define[1];
		}
	}

}
 8004c1c:	e0b6      	b.n	8004d8c <update_gcode_point+0x3d4>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LINEAR;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2202      	movs	r2, #2
 8004c22:	741a      	strb	r2, [r3, #16]
			duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	745a      	strb	r2, [r3, #17]
}
 8004c2a:	e0af      	b.n	8004d8c <update_gcode_point+0x3d4>
 8004c2c:	f3af 8000 	nop.w
 8004c30:	a0000000 	.word	0xa0000000
 8004c34:	3eb0c6f7 	.word	0x3eb0c6f7
 8004c38:	20008fc0 	.word	0x20008fc0
 8004c3c:	20008fa0 	.word	0x20008fa0
 8004c40:	2000fd48 	.word	0x2000fd48
 8004c44:	200085c0 	.word	0x200085c0
 8004c48:	2000fd38 	.word	0x2000fd38
 8004c4c:	20008f38 	.word	0x20008f38
 8004c50:	20008f98 	.word	0x20008f98
 8004c54:	200085c8 	.word	0x200085c8
 8004c58:	40877000 	.word	0x40877000
	}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8004c5c:	4b50      	ldr	r3, [pc, #320]	; (8004da0 <update_gcode_point+0x3e8>)
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b09      	cmp	r3, #9
 8004c62:	f040 8093 	bne.w	8004d8c <update_gcode_point+0x3d4>
		if(Gcode_Cor[run_point].configure.type_define[1] == pre_height){
 8004c66:	494f      	ldr	r1, [pc, #316]	; (8004da4 <update_gcode_point+0x3ec>)
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	1a9b      	subs	r3, r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	440b      	add	r3, r1
 8004c74:	331b      	adds	r3, #27
 8004c76:	781a      	ldrb	r2, [r3, #0]
 8004c78:	4b4b      	ldr	r3, [pc, #300]	; (8004da8 <update_gcode_point+0x3f0>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d14c      	bne.n	8004d1a <update_gcode_point+0x362>
			if(Gcode_Cor[run_point].configure.clutch_index != pre_clutch_index){
 8004c80:	4948      	ldr	r1, [pc, #288]	; (8004da4 <update_gcode_point+0x3ec>)
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	4613      	mov	r3, r2
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	1a9b      	subs	r3, r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	3318      	adds	r3, #24
 8004c90:	881b      	ldrh	r3, [r3, #0]
 8004c92:	461a      	mov	r2, r3
 8004c94:	4b45      	ldr	r3, [pc, #276]	; (8004dac <update_gcode_point+0x3f4>)
 8004c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d01f      	beq.n	8004cde <update_gcode_point+0x326>
				LSPB_calculation(gcode_clutch_configure[Gcode_Cor[run_point].configure.clutch_index]);
 8004c9e:	4941      	ldr	r1, [pc, #260]	; (8004da4 <update_gcode_point+0x3ec>)
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	1a9b      	subs	r3, r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	440b      	add	r3, r1
 8004cac:	3318      	adds	r3, #24
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4a3f      	ldr	r2, [pc, #252]	; (8004db0 <update_gcode_point+0x3f8>)
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	440b      	add	r3, r1
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004cc2:	f000 f87d 	bl	8004dc0 <LSPB_calculation>
				pre_clutch_index = Gcode_Cor[run_point].configure.clutch_index;
 8004cc6:	4937      	ldr	r1, [pc, #220]	; (8004da4 <update_gcode_point+0x3ec>)
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	1a9b      	subs	r3, r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	440b      	add	r3, r1
 8004cd4:	3318      	adds	r3, #24
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	b21a      	sxth	r2, r3
 8004cda:	4b34      	ldr	r3, [pc, #208]	; (8004dac <update_gcode_point+0x3f4>)
 8004cdc:	801a      	strh	r2, [r3, #0]
			duty_cmd->trajec_type = DUTY_TRAJECTORY_GCODE_LSPB;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2203      	movs	r2, #3
 8004ce2:	741a      	strb	r2, [r3, #16]
			duty_cmd->time_total = (double)(Gcode_Cor[run_point].T*COR_INVERSE_SCALE);
 8004ce4:	492f      	ldr	r1, [pc, #188]	; (8004da4 <update_gcode_point+0x3ec>)
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	1a9b      	subs	r3, r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	3314      	adds	r3, #20
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	ee07 3a90 	vmov	s15, r3
 8004cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cfe:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8004db4 <update_gcode_point+0x3fc>
 8004d02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d06:	ee17 0a90 	vmov	r0, s15
 8004d0a:	f7fb fc1d 	bl	8000548 <__aeabi_f2d>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8004d18:	e038      	b.n	8004d8c <update_gcode_point+0x3d4>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LINEAR;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	741a      	strb	r2, [r3, #16]
			duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	745a      	strb	r2, [r3, #17]
			duty_cmd->v_factor = (double)gcode_clutch_configure[Gcode_Cor[run_point].configure.clutch_index].Depth_Feed*COR_INVERSE_SCALE/V_MOVE_MAX;
 8004d26:	491f      	ldr	r1, [pc, #124]	; (8004da4 <update_gcode_point+0x3ec>)
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	1a9b      	subs	r3, r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	440b      	add	r3, r1
 8004d34:	3318      	adds	r3, #24
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4a1d      	ldr	r2, [pc, #116]	; (8004db0 <update_gcode_point+0x3f8>)
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	440b      	add	r3, r1
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	3308      	adds	r3, #8
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fb fbea 	bl	8000524 <__aeabi_i2d>
 8004d50:	a311      	add	r3, pc, #68	; (adr r3, 8004d98 <update_gcode_point+0x3e0>)
 8004d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d56:	f7fb fc4f 	bl	80005f8 <__aeabi_dmul>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4610      	mov	r0, r2
 8004d60:	4619      	mov	r1, r3
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	4b14      	ldr	r3, [pc, #80]	; (8004db8 <update_gcode_point+0x400>)
 8004d68:	f7fb fd70 	bl	800084c <__aeabi_ddiv>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			pre_height = Gcode_Cor[run_point].configure.type_define[1];
 8004d76:	490b      	ldr	r1, [pc, #44]	; (8004da4 <update_gcode_point+0x3ec>)
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	1a9b      	subs	r3, r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	440b      	add	r3, r1
 8004d84:	331b      	adds	r3, #27
 8004d86:	781a      	ldrb	r2, [r3, #0]
 8004d88:	4b07      	ldr	r3, [pc, #28]	; (8004da8 <update_gcode_point+0x3f0>)
 8004d8a:	701a      	strb	r2, [r3, #0]
}
 8004d8c:	bf00      	nop
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	f3af 8000 	nop.w
 8004d98:	a0000000 	.word	0xa0000000
 8004d9c:	3eb0c6f7 	.word	0x3eb0c6f7
 8004da0:	200085c8 	.word	0x200085c8
 8004da4:	20008fc0 	.word	0x20008fc0
 8004da8:	20008f80 	.word	0x20008f80
 8004dac:	2000fd32 	.word	0x2000fd32
 8004db0:	200085d8 	.word	0x200085d8
 8004db4:	358637bd 	.word	0x358637bd
 8004db8:	40877000 	.word	0x40877000
 8004dbc:	00000000 	.word	0x00000000

08004dc0 <LSPB_calculation>:
void LSPB_calculation(SCARA_LSPB_Clutch_TypeDef configure)
{
 8004dc0:	b5b0      	push	{r4, r5, r7, lr}
 8004dc2:	b08a      	sub	sp, #40	; 0x28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	1d3b      	adds	r3, r7, #4
 8004dc8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	double accel = 0;
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double total_s = (double)configure.total_s*COR_INVERSE_SCALE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fb fba2 	bl	8000524 <__aeabi_i2d>
 8004de0:	a388      	add	r3, pc, #544	; (adr r3, 8005004 <LSPB_calculation+0x244>)
 8004de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de6:	f7fb fc07 	bl	80005f8 <__aeabi_dmul>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double veloc   = (double)configure.veloc*COR_INVERSE_SCALE;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7fb fb95 	bl	8000524 <__aeabi_i2d>
 8004dfa:	a382      	add	r3, pc, #520	; (adr r3, 8005004 <LSPB_calculation+0x244>)
 8004dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e00:	f7fb fbfa 	bl	80005f8 <__aeabi_dmul>
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	e9c7 2304 	strd	r2, r3, [r7, #16]
	time_move = 1.2*total_s/veloc;
 8004e0c:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8004e10:	4b71      	ldr	r3, [pc, #452]	; (8004fd8 <LSPB_calculation+0x218>)
 8004e12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004e16:	f7fb fbef 	bl	80005f8 <__aeabi_dmul>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	4610      	mov	r0, r2
 8004e20:	4619      	mov	r1, r3
 8004e22:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004e26:	f7fb fd11 	bl	800084c <__aeabi_ddiv>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	496b      	ldr	r1, [pc, #428]	; (8004fdc <LSPB_calculation+0x21c>)
 8004e30:	e9c1 2300 	strd	r2, r3, [r1]
	time_acc = time_move - total_s/veloc;
 8004e34:	4b69      	ldr	r3, [pc, #420]	; (8004fdc <LSPB_calculation+0x21c>)
 8004e36:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004e3a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004e3e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004e42:	f7fb fd03 	bl	800084c <__aeabi_ddiv>
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	4629      	mov	r1, r5
 8004e4e:	f7fb fa1b 	bl	8000288 <__aeabi_dsub>
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	4962      	ldr	r1, [pc, #392]	; (8004fe0 <LSPB_calculation+0x220>)
 8004e58:	e9c1 2300 	strd	r2, r3, [r1]
	time_dec = time_move - time_acc;
 8004e5c:	4b5f      	ldr	r3, [pc, #380]	; (8004fdc <LSPB_calculation+0x21c>)
 8004e5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e62:	4b5f      	ldr	r3, [pc, #380]	; (8004fe0 <LSPB_calculation+0x220>)
 8004e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e68:	f7fb fa0e 	bl	8000288 <__aeabi_dsub>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	495c      	ldr	r1, [pc, #368]	; (8004fe4 <LSPB_calculation+0x224>)
 8004e72:	e9c1 2300 	strd	r2, r3, [r1]
	accel = veloc / time_acc;
 8004e76:	4b5a      	ldr	r3, [pc, #360]	; (8004fe0 <LSPB_calculation+0x220>)
 8004e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004e80:	f7fb fce4 	bl	800084c <__aeabi_ddiv>
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	e9c7 2308 	strd	r2, r3, [r7, #32]
	acc0 = 0.5*accel;
 8004e8c:	f04f 0200 	mov.w	r2, #0
 8004e90:	4b55      	ldr	r3, [pc, #340]	; (8004fe8 <LSPB_calculation+0x228>)
 8004e92:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004e96:	f7fb fbaf 	bl	80005f8 <__aeabi_dmul>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4953      	ldr	r1, [pc, #332]	; (8004fec <LSPB_calculation+0x22c>)
 8004ea0:	e9c1 2300 	strd	r2, r3, [r1]
	constant[0] = veloc;
 8004ea4:	4952      	ldr	r1, [pc, #328]	; (8004ff0 <LSPB_calculation+0x230>)
 8004ea6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004eaa:	e9c1 2300 	strd	r2, r3, [r1]
	constant[1] = -0.5*time_acc*veloc;
 8004eae:	4b4c      	ldr	r3, [pc, #304]	; (8004fe0 <LSPB_calculation+0x220>)
 8004eb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	4b4e      	ldr	r3, [pc, #312]	; (8004ff4 <LSPB_calculation+0x234>)
 8004eba:	f7fb fb9d 	bl	80005f8 <__aeabi_dmul>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004eca:	f7fb fb95 	bl	80005f8 <__aeabi_dmul>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	4947      	ldr	r1, [pc, #284]	; (8004ff0 <LSPB_calculation+0x230>)
 8004ed4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    deacc[0] 	= -0.5*accel;
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	4b45      	ldr	r3, [pc, #276]	; (8004ff4 <LSPB_calculation+0x234>)
 8004ede:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004ee2:	f7fb fb89 	bl	80005f8 <__aeabi_dmul>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	4943      	ldr	r1, [pc, #268]	; (8004ff8 <LSPB_calculation+0x238>)
 8004eec:	e9c1 2300 	strd	r2, r3, [r1]
    deacc[1]	= veloc + accel*time_dec;
 8004ef0:	4b3c      	ldr	r3, [pc, #240]	; (8004fe4 <LSPB_calculation+0x224>)
 8004ef2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ef6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004efa:	f7fb fb7d 	bl	80005f8 <__aeabi_dmul>
 8004efe:	4602      	mov	r2, r0
 8004f00:	460b      	mov	r3, r1
 8004f02:	4610      	mov	r0, r2
 8004f04:	4619      	mov	r1, r3
 8004f06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f0a:	f7fb f9bf 	bl	800028c <__adddf3>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	4939      	ldr	r1, [pc, #228]	; (8004ff8 <LSPB_calculation+0x238>)
 8004f14:	e9c1 2302 	strd	r2, r3, [r1, #8]
    deacc[2]    = total_s - time_move*(2*veloc + 2*accel*time_dec - accel*time_move)/2;
 8004f18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	f7fb f9b4 	bl	800028c <__adddf3>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4614      	mov	r4, r2
 8004f2a:	461d      	mov	r5, r3
 8004f2c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	f7fb f9aa 	bl	800028c <__adddf3>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	4619      	mov	r1, r3
 8004f40:	4b28      	ldr	r3, [pc, #160]	; (8004fe4 <LSPB_calculation+0x224>)
 8004f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f46:	f7fb fb57 	bl	80005f8 <__aeabi_dmul>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4620      	mov	r0, r4
 8004f50:	4629      	mov	r1, r5
 8004f52:	f7fb f99b 	bl	800028c <__adddf3>
 8004f56:	4602      	mov	r2, r0
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4614      	mov	r4, r2
 8004f5c:	461d      	mov	r5, r3
 8004f5e:	4b1f      	ldr	r3, [pc, #124]	; (8004fdc <LSPB_calculation+0x21c>)
 8004f60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f64:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f68:	f7fb fb46 	bl	80005f8 <__aeabi_dmul>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4620      	mov	r0, r4
 8004f72:	4629      	mov	r1, r5
 8004f74:	f7fb f988 	bl	8000288 <__aeabi_dsub>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4b16      	ldr	r3, [pc, #88]	; (8004fdc <LSPB_calculation+0x21c>)
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	f7fb fb37 	bl	80005f8 <__aeabi_dmul>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	4610      	mov	r0, r2
 8004f90:	4619      	mov	r1, r3
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f9a:	f7fb fc57 	bl	800084c <__aeabi_ddiv>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004fa6:	f7fb f96f 	bl	8000288 <__aeabi_dsub>
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	4912      	ldr	r1, [pc, #72]	; (8004ff8 <LSPB_calculation+0x238>)
 8004fb0:	e9c1 2304 	strd	r2, r3, [r1, #16]
    accumulate_s = 0;
 8004fb4:	4911      	ldr	r1, [pc, #68]	; (8004ffc <LSPB_calculation+0x23c>)
 8004fb6:	f04f 0200 	mov.w	r2, #0
 8004fba:	f04f 0300 	mov.w	r3, #0
 8004fbe:	e9c1 2300 	strd	r2, r3, [r1]
    last_T = 0;
 8004fc2:	490f      	ldr	r1, [pc, #60]	; (8005000 <LSPB_calculation+0x240>)
 8004fc4:	f04f 0200 	mov.w	r2, #0
 8004fc8:	f04f 0300 	mov.w	r3, #0
 8004fcc:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004fd0:	bf00      	nop
 8004fd2:	3728      	adds	r7, #40	; 0x28
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8004fd8:	3ff33333 	.word	0x3ff33333
 8004fdc:	20008fb0 	.word	0x20008fb0
 8004fe0:	20008f40 	.word	0x20008f40
 8004fe4:	20008f60 	.word	0x20008f60
 8004fe8:	3fe00000 	.word	0x3fe00000
 8004fec:	2000fd28 	.word	0x2000fd28
 8004ff0:	20008f88 	.word	0x20008f88
 8004ff4:	bfe00000 	.word	0xbfe00000
 8004ff8:	20008f48 	.word	0x20008f48
 8004ffc:	200085d0 	.word	0x200085d0
 8005000:	2000fd40 	.word	0x2000fd40
 8005004:	a0000000 	.word	0xa0000000
 8005008:	3eb0c6f7 	.word	0x3eb0c6f7
 800500c:	00000000 	.word	0x00000000

08005010 <accumulate_update>:
void accumulate_update(SCARA_Gcode_Cor_TypeDef gcode_point){
 8005010:	b084      	sub	sp, #16
 8005012:	b580      	push	{r7, lr}
 8005014:	af00      	add	r7, sp, #0
 8005016:	f107 0c08 	add.w	ip, r7, #8
 800501a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	scaraFlowGCODE(&accumulate_s, (double)gcode_point.T*COR_INVERSE_SCALE);
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	4618      	mov	r0, r3
 8005022:	f7fb fa7f 	bl	8000524 <__aeabi_i2d>
 8005026:	a312      	add	r3, pc, #72	; (adr r3, 8005070 <accumulate_update+0x60>)
 8005028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502c:	f7fb fae4 	bl	80005f8 <__aeabi_dmul>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	ec43 2b17 	vmov	d7, r2, r3
 8005038:	eeb0 0a47 	vmov.f32	s0, s14
 800503c:	eef0 0a67 	vmov.f32	s1, s15
 8005040:	480d      	ldr	r0, [pc, #52]	; (8005078 <accumulate_update+0x68>)
 8005042:	f003 fe79 	bl	8008d38 <scaraFlowGCODE>
	last_T = (double)gcode_point.T*COR_INVERSE_SCALE;
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	4618      	mov	r0, r3
 800504a:	f7fb fa6b 	bl	8000524 <__aeabi_i2d>
 800504e:	a308      	add	r3, pc, #32	; (adr r3, 8005070 <accumulate_update+0x60>)
 8005050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005054:	f7fb fad0 	bl	80005f8 <__aeabi_dmul>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4907      	ldr	r1, [pc, #28]	; (800507c <accumulate_update+0x6c>)
 800505e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005062:	bf00      	nop
 8005064:	46bd      	mov	sp, r7
 8005066:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800506a:	b004      	add	sp, #16
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	a0000000 	.word	0xa0000000
 8005074:	3eb0c6f7 	.word	0x3eb0c6f7
 8005078:	200085d0 	.word	0x200085d0
 800507c:	2000fd40 	.word	0x2000fd40

08005080 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08a      	sub	sp, #40	; 0x28
 8005084:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005086:	f107 0314 	add.w	r3, r7, #20
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	605a      	str	r2, [r3, #4]
 8005090:	609a      	str	r2, [r3, #8]
 8005092:	60da      	str	r2, [r3, #12]
 8005094:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005096:	2300      	movs	r3, #0
 8005098:	613b      	str	r3, [r7, #16]
 800509a:	4b51      	ldr	r3, [pc, #324]	; (80051e0 <MX_GPIO_Init+0x160>)
 800509c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509e:	4a50      	ldr	r2, [pc, #320]	; (80051e0 <MX_GPIO_Init+0x160>)
 80050a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a4:	6313      	str	r3, [r2, #48]	; 0x30
 80050a6:	4b4e      	ldr	r3, [pc, #312]	; (80051e0 <MX_GPIO_Init+0x160>)
 80050a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	4b4a      	ldr	r3, [pc, #296]	; (80051e0 <MX_GPIO_Init+0x160>)
 80050b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ba:	4a49      	ldr	r2, [pc, #292]	; (80051e0 <MX_GPIO_Init+0x160>)
 80050bc:	f043 0301 	orr.w	r3, r3, #1
 80050c0:	6313      	str	r3, [r2, #48]	; 0x30
 80050c2:	4b47      	ldr	r3, [pc, #284]	; (80051e0 <MX_GPIO_Init+0x160>)
 80050c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80050ce:	2300      	movs	r3, #0
 80050d0:	60bb      	str	r3, [r7, #8]
 80050d2:	4b43      	ldr	r3, [pc, #268]	; (80051e0 <MX_GPIO_Init+0x160>)
 80050d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d6:	4a42      	ldr	r2, [pc, #264]	; (80051e0 <MX_GPIO_Init+0x160>)
 80050d8:	f043 0310 	orr.w	r3, r3, #16
 80050dc:	6313      	str	r3, [r2, #48]	; 0x30
 80050de:	4b40      	ldr	r3, [pc, #256]	; (80051e0 <MX_GPIO_Init+0x160>)
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	f003 0310 	and.w	r3, r3, #16
 80050e6:	60bb      	str	r3, [r7, #8]
 80050e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80050ea:	2300      	movs	r3, #0
 80050ec:	607b      	str	r3, [r7, #4]
 80050ee:	4b3c      	ldr	r3, [pc, #240]	; (80051e0 <MX_GPIO_Init+0x160>)
 80050f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f2:	4a3b      	ldr	r2, [pc, #236]	; (80051e0 <MX_GPIO_Init+0x160>)
 80050f4:	f043 0302 	orr.w	r3, r3, #2
 80050f8:	6313      	str	r3, [r2, #48]	; 0x30
 80050fa:	4b39      	ldr	r3, [pc, #228]	; (80051e0 <MX_GPIO_Init+0x160>)
 80050fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	607b      	str	r3, [r7, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005106:	2300      	movs	r3, #0
 8005108:	603b      	str	r3, [r7, #0]
 800510a:	4b35      	ldr	r3, [pc, #212]	; (80051e0 <MX_GPIO_Init+0x160>)
 800510c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510e:	4a34      	ldr	r2, [pc, #208]	; (80051e0 <MX_GPIO_Init+0x160>)
 8005110:	f043 0308 	orr.w	r3, r3, #8
 8005114:	6313      	str	r3, [r2, #48]	; 0x30
 8005116:	4b32      	ldr	r3, [pc, #200]	; (80051e0 <MX_GPIO_Init+0x160>)
 8005118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511a:	f003 0308 	and.w	r3, r3, #8
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 8005122:	2200      	movs	r2, #0
 8005124:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 8005128:	482e      	ldr	r0, [pc, #184]	; (80051e4 <MX_GPIO_Init+0x164>)
 800512a:	f007 f905 	bl	800c338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|CAPTURE_ENABLE_Pin|STOP_Pin, GPIO_PIN_RESET);
 800512e:	2200      	movs	r2, #0
 8005130:	f641 0148 	movw	r1, #6216	; 0x1848
 8005134:	482c      	ldr	r0, [pc, #176]	; (80051e8 <MX_GPIO_Init+0x168>)
 8005136:	f007 f8ff 	bl	800c338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 800513a:	2200      	movs	r2, #0
 800513c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005140:	482a      	ldr	r0, [pc, #168]	; (80051ec <MX_GPIO_Init+0x16c>)
 8005142:	f007 f8f9 	bl	800c338 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 8005146:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 800514a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800514c:	2301      	movs	r3, #1
 800514e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005150:	2300      	movs	r3, #0
 8005152:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005154:	2300      	movs	r3, #0
 8005156:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005158:	f107 0314 	add.w	r3, r7, #20
 800515c:	4619      	mov	r1, r3
 800515e:	4821      	ldr	r0, [pc, #132]	; (80051e4 <MX_GPIO_Init+0x164>)
 8005160:	f006 ff4e 	bl	800c000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|CAPTURE_ENABLE_Pin|STOP_Pin;
 8005164:	f640 0348 	movw	r3, #2120	; 0x848
 8005168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800516a:	2301      	movs	r3, #1
 800516c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800516e:	2300      	movs	r3, #0
 8005170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005172:	2300      	movs	r3, #0
 8005174:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005176:	f107 0314 	add.w	r3, r7, #20
 800517a:	4619      	mov	r1, r3
 800517c:	481a      	ldr	r0, [pc, #104]	; (80051e8 <MX_GPIO_Init+0x168>)
 800517e:	f006 ff3f 	bl	800c000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_WRITE_Pin;
 8005182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005188:	2301      	movs	r3, #1
 800518a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800518c:	2300      	movs	r3, #0
 800518e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005190:	2303      	movs	r3, #3
 8005192:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_WRITE_GPIO_Port, &GPIO_InitStruct);
 8005194:	f107 0314 	add.w	r3, r7, #20
 8005198:	4619      	mov	r1, r3
 800519a:	4813      	ldr	r0, [pc, #76]	; (80051e8 <MX_GPIO_Init+0x168>)
 800519c:	f006 ff30 	bl	800c000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CPLD_LIMIT_Pin|CPLD_BUSY_Pin;
 80051a0:	f242 0304 	movw	r3, #8196	; 0x2004
 80051a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051a6:	2300      	movs	r3, #0
 80051a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051aa:	2301      	movs	r3, #1
 80051ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051ae:	f107 0314 	add.w	r3, r7, #20
 80051b2:	4619      	mov	r1, r3
 80051b4:	480c      	ldr	r0, [pc, #48]	; (80051e8 <MX_GPIO_Init+0x168>)
 80051b6:	f006 ff23 	bl	800c000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin;
 80051ba:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80051be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051c0:	2301      	movs	r3, #1
 80051c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c4:	2300      	movs	r3, #0
 80051c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051c8:	2300      	movs	r3, #0
 80051ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051cc:	f107 0314 	add.w	r3, r7, #20
 80051d0:	4619      	mov	r1, r3
 80051d2:	4806      	ldr	r0, [pc, #24]	; (80051ec <MX_GPIO_Init+0x16c>)
 80051d4:	f006 ff14 	bl	800c000 <HAL_GPIO_Init>

}
 80051d8:	bf00      	nop
 80051da:	3728      	adds	r7, #40	; 0x28
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	40023800 	.word	0x40023800
 80051e4:	40020400 	.word	0x40020400
 80051e8:	40020c00 	.word	0x40020c00
 80051ec:	40020000 	.word	0x40020000

080051f0 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 80051f0:	b5b0      	push	{r4, r5, r7, lr}
 80051f2:	b08a      	sub	sp, #40	; 0x28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80051fe:	eeb0 0a47 	vmov.f32	s0, s14
 8005202:	eef0 0a67 	vmov.f32	s1, s15
 8005206:	f015 fb93 	bl	801a930 <cos>
 800520a:	ec51 0b10 	vmov	r0, r1, d0
 800520e:	a382      	add	r3, pc, #520	; (adr r3, 8005418 <kinematicForward+0x228>)
 8005210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005214:	f7fb f9f0 	bl	80005f8 <__aeabi_dmul>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4614      	mov	r4, r2
 800521e:	461d      	mov	r5, r3
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800522c:	f7fb f82e 	bl	800028c <__adddf3>
 8005230:	4602      	mov	r2, r0
 8005232:	460b      	mov	r3, r1
 8005234:	ec43 2b17 	vmov	d7, r2, r3
 8005238:	eeb0 0a47 	vmov.f32	s0, s14
 800523c:	eef0 0a67 	vmov.f32	s1, s15
 8005240:	f015 fb76 	bl	801a930 <cos>
 8005244:	ec51 0b10 	vmov	r0, r1, d0
 8005248:	f04f 0200 	mov.w	r2, #0
 800524c:	4b78      	ldr	r3, [pc, #480]	; (8005430 <kinematicForward+0x240>)
 800524e:	f7fb f9d3 	bl	80005f8 <__aeabi_dmul>
 8005252:	4602      	mov	r2, r0
 8005254:	460b      	mov	r3, r1
 8005256:	4620      	mov	r0, r4
 8005258:	4629      	mov	r1, r5
 800525a:	f7fb f817 	bl	800028c <__adddf3>
 800525e:	4602      	mov	r2, r0
 8005260:	460b      	mov	r3, r1
 8005262:	4614      	mov	r4, r2
 8005264:	461d      	mov	r5, r3
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8005272:	f7fb f80b 	bl	800028c <__adddf3>
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	4610      	mov	r0, r2
 800527c:	4619      	mov	r1, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8005284:	f7fb f800 	bl	8000288 <__aeabi_dsub>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	ec43 2b17 	vmov	d7, r2, r3
 8005290:	eeb0 0a47 	vmov.f32	s0, s14
 8005294:	eef0 0a67 	vmov.f32	s1, s15
 8005298:	f015 fb4a 	bl	801a930 <cos>
 800529c:	ec51 0b10 	vmov	r0, r1, d0
 80052a0:	a35b      	add	r3, pc, #364	; (adr r3, 8005410 <kinematicForward+0x220>)
 80052a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a6:	f7fb f9a7 	bl	80005f8 <__aeabi_dmul>
 80052aa:	4602      	mov	r2, r0
 80052ac:	460b      	mov	r3, r1
	x =   a1*cos(pnt->Theta1)
 80052ae:	4620      	mov	r0, r4
 80052b0:	4629      	mov	r1, r5
 80052b2:	f7fa ffeb 	bl	800028c <__adddf3>
 80052b6:	4602      	mov	r2, r0
 80052b8:	460b      	mov	r3, r1
 80052ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80052c4:	eeb0 0a47 	vmov.f32	s0, s14
 80052c8:	eef0 0a67 	vmov.f32	s1, s15
 80052cc:	f015 fbc8 	bl	801aa60 <sin>
 80052d0:	ec51 0b10 	vmov	r0, r1, d0
 80052d4:	a350      	add	r3, pc, #320	; (adr r3, 8005418 <kinematicForward+0x228>)
 80052d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052da:	f7fb f98d 	bl	80005f8 <__aeabi_dmul>
 80052de:	4602      	mov	r2, r0
 80052e0:	460b      	mov	r3, r1
 80052e2:	4614      	mov	r4, r2
 80052e4:	461d      	mov	r5, r3
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80052f2:	f7fa ffcb 	bl	800028c <__adddf3>
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	ec43 2b17 	vmov	d7, r2, r3
 80052fe:	eeb0 0a47 	vmov.f32	s0, s14
 8005302:	eef0 0a67 	vmov.f32	s1, s15
 8005306:	f015 fbab 	bl	801aa60 <sin>
 800530a:	ec51 0b10 	vmov	r0, r1, d0
 800530e:	f04f 0200 	mov.w	r2, #0
 8005312:	4b47      	ldr	r3, [pc, #284]	; (8005430 <kinematicForward+0x240>)
 8005314:	f7fb f970 	bl	80005f8 <__aeabi_dmul>
 8005318:	4602      	mov	r2, r0
 800531a:	460b      	mov	r3, r1
 800531c:	4620      	mov	r0, r4
 800531e:	4629      	mov	r1, r5
 8005320:	f7fa ffb4 	bl	800028c <__adddf3>
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	4614      	mov	r4, r2
 800532a:	461d      	mov	r5, r3
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8005338:	f7fa ffa8 	bl	800028c <__adddf3>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4610      	mov	r0, r2
 8005342:	4619      	mov	r1, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800534a:	f7fa ff9d 	bl	8000288 <__aeabi_dsub>
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	ec43 2b17 	vmov	d7, r2, r3
 8005356:	eeb0 0a47 	vmov.f32	s0, s14
 800535a:	eef0 0a67 	vmov.f32	s1, s15
 800535e:	f015 fb7f 	bl	801aa60 <sin>
 8005362:	ec51 0b10 	vmov	r0, r1, d0
 8005366:	a32a      	add	r3, pc, #168	; (adr r3, 8005410 <kinematicForward+0x220>)
 8005368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536c:	f7fb f944 	bl	80005f8 <__aeabi_dmul>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
	y =   a1*sin(pnt->Theta1)
 8005374:	4620      	mov	r0, r4
 8005376:	4629      	mov	r1, r5
 8005378:	f7fa ff88 	bl	800028c <__adddf3>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	e9c7 2306 	strd	r2, r3, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800538a:	a125      	add	r1, pc, #148	; (adr r1, 8005420 <kinematicForward+0x230>)
 800538c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005390:	f7fa ff7a 	bl	8000288 <__aeabi_dsub>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4610      	mov	r0, r2
 800539a:	4619      	mov	r1, r3
 800539c:	a322      	add	r3, pc, #136	; (adr r3, 8005428 <kinematicForward+0x238>)
 800539e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a2:	f7fa ff71 	bl	8000288 <__aeabi_dsub>
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80053ba:	f7fa ff67 	bl	800028c <__adddf3>
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	4610      	mov	r0, r2
 80053c4:	4619      	mov	r1, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80053cc:	f7fa ff5c 	bl	8000288 <__aeabi_dsub>
 80053d0:	4602      	mov	r2, r0
 80053d2:	460b      	mov	r3, r1
 80053d4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	pnt->x = x;
 80053d8:	6879      	ldr	r1, [r7, #4]
 80053da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053de:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	pnt->y = y;
 80053e2:	6879      	ldr	r1, [r7, #4]
 80053e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053e8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	pnt->z = z;
 80053ec:	6879      	ldr	r1, [r7, #4]
 80053ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80053f2:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	pnt->roll = roll;
 80053f6:	6879      	ldr	r1, [r7, #4]
 80053f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053fc:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	return TRUE;
 8005400:	2301      	movs	r3, #1
}
 8005402:	4618      	mov	r0, r3
 8005404:	3728      	adds	r7, #40	; 0x28
 8005406:	46bd      	mov	sp, r7
 8005408:	bdb0      	pop	{r4, r5, r7, pc}
 800540a:	bf00      	nop
 800540c:	f3af 8000 	nop.w
 8005410:	80000000 	.word	0x80000000
 8005414:	40402e14 	.word	0x40402e14
 8005418:	00000000 	.word	0x00000000
 800541c:	4068a000 	.word	0x4068a000
 8005420:	00000000 	.word	0x00000000
 8005424:	406a6000 	.word	0x406a6000
 8005428:	e0000000 	.word	0xe0000000
 800542c:	40536b22 	.word	0x40536b22
 8005430:	40640000 	.word	0x40640000
 8005434:	00000000 	.word	0x00000000

08005438 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 8005438:	b082      	sub	sp, #8
 800543a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800543e:	b0a0      	sub	sp, #128	; 0x80
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8005448:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8005452:	a1f0      	add	r1, pc, #960	; (adr r1, 8005814 <kinematicInverse+0x3dc>)
 8005454:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005458:	f7fa ff16 	bl	8000288 <__aeabi_dsub>
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	; 0x48
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8005470:	eeb0 0a47 	vmov.f32	s0, s14
 8005474:	eef0 0a67 	vmov.f32	s1, s15
 8005478:	f015 fa5a 	bl	801a930 <cos>
 800547c:	ec51 0b10 	vmov	r0, r1, d0
 8005480:	a3e6      	add	r3, pc, #920	; (adr r3, 800581c <kinematicInverse+0x3e4>)
 8005482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005486:	f7fb f8b7 	bl	80005f8 <__aeabi_dmul>
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	4650      	mov	r0, sl
 8005490:	4659      	mov	r1, fp
 8005492:	f7fa fef9 	bl	8000288 <__aeabi_dsub>
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80054aa:	eeb0 0a47 	vmov.f32	s0, s14
 80054ae:	eef0 0a67 	vmov.f32	s1, s15
 80054b2:	f015 fad5 	bl	801aa60 <sin>
 80054b6:	ec51 0b10 	vmov	r0, r1, d0
 80054ba:	a3d8      	add	r3, pc, #864	; (adr r3, 800581c <kinematicInverse+0x3e4>)
 80054bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c0:	f7fb f89a 	bl	80005f8 <__aeabi_dmul>
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	4650      	mov	r0, sl
 80054ca:	4659      	mov	r1, fp
 80054cc:	f7fa fedc 	bl	8000288 <__aeabi_dsub>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 80054d8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80054dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80054e0:	f7fb f88a 	bl	80005f8 <__aeabi_dmul>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	4692      	mov	sl, r2
 80054ea:	469b      	mov	fp, r3
 80054ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80054f0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80054f4:	f7fb f880 	bl	80005f8 <__aeabi_dmul>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	4650      	mov	r0, sl
 80054fe:	4659      	mov	r1, fp
 8005500:	f7fa fec4 	bl	800028c <__adddf3>
 8005504:	4602      	mov	r2, r0
 8005506:	460b      	mov	r3, r1
 8005508:	4610      	mov	r0, r2
 800550a:	4619      	mov	r1, r3
 800550c:	a3c5      	add	r3, pc, #788	; (adr r3, 8005824 <kinematicInverse+0x3ec>)
 800550e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005512:	f7fa feb9 	bl	8000288 <__aeabi_dsub>
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
 800551a:	4610      	mov	r0, r2
 800551c:	4619      	mov	r1, r3
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	4bb9      	ldr	r3, [pc, #740]	; (8005808 <kinematicInverse+0x3d0>)
 8005524:	f7fa feb0 	bl	8000288 <__aeabi_dsub>
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	4610      	mov	r0, r2
 800552e:	4619      	mov	r1, r3
 8005530:	a3b1      	add	r3, pc, #708	; (adr r3, 80057f8 <kinematicInverse+0x3c0>)
 8005532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005536:	f7fb f989 	bl	800084c <__aeabi_ddiv>
 800553a:	4602      	mov	r2, r0
 800553c:	460b      	mov	r3, r1
 800553e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 8005542:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005546:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800554a:	f7fb f855 	bl	80005f8 <__aeabi_dmul>
 800554e:	4602      	mov	r2, r0
 8005550:	460b      	mov	r3, r1
 8005552:	f04f 0000 	mov.w	r0, #0
 8005556:	49ad      	ldr	r1, [pc, #692]	; (800580c <kinematicInverse+0x3d4>)
 8005558:	f7fa fe96 	bl	8000288 <__aeabi_dsub>
 800555c:	4602      	mov	r2, r0
 800555e:	460b      	mov	r3, r1
 8005560:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 8005564:	f04f 0200 	mov.w	r2, #0
 8005568:	f04f 0300 	mov.w	r3, #0
 800556c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005570:	f7fb fab4 	bl	8000adc <__aeabi_dcmplt>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <kinematicInverse+0x146>
		return FALSE;
 800557a:	2300      	movs	r3, #0
 800557c:	e134      	b.n	80057e8 <kinematicInverse+0x3b0>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 800557e:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8005582:	f015 fb05 	bl	801ab90 <sqrt>
 8005586:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 800558a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800558c:	63bb      	str	r3, [r7, #56]	; 0x38
 800558e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005590:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005594:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 8005596:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 800559a:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800559e:	f015 faf5 	bl	801ab8c <atan2>
 80055a2:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 80055a6:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 80055aa:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80055ae:	f015 faed 	bl	801ab8c <atan2>
 80055b2:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 80055b6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80055ba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80055be:	f7fa fe63 	bl	8000288 <__aeabi_dsub>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	4614      	mov	r4, r2
 80055c8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80055cc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80055d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80055d4:	f7fa fe58 	bl	8000288 <__aeabi_dsub>
 80055d8:	4602      	mov	r2, r0
 80055da:	460b      	mov	r3, r1
 80055dc:	4690      	mov	r8, r2
 80055de:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80055e2:	4642      	mov	r2, r8
 80055e4:	464b      	mov	r3, r9
 80055e6:	4620      	mov	r0, r4
 80055e8:	4629      	mov	r1, r5
 80055ea:	f7fb fa81 	bl	8000af0 <__aeabi_dcmple>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d008      	beq.n	8005606 <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 80055f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80055f8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 80055fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005600:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8005604:	e007      	b.n	8005616 <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 8005606:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800560a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 800560e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005612:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 8005616:	f04f 0200 	mov.w	r2, #0
 800561a:	4b7d      	ldr	r3, [pc, #500]	; (8005810 <kinematicInverse+0x3d8>)
 800561c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005620:	f7fa ffea 	bl	80005f8 <__aeabi_dmul>
 8005624:	4602      	mov	r2, r0
 8005626:	460b      	mov	r3, r1
 8005628:	4610      	mov	r0, r2
 800562a:	4619      	mov	r1, r3
 800562c:	a374      	add	r3, pc, #464	; (adr r3, 8005800 <kinematicInverse+0x3c8>)
 800562e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005632:	f7fa fe2b 	bl	800028c <__adddf3>
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	4610      	mov	r0, r2
 800563c:	4619      	mov	r1, r3
 800563e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005642:	f7fa ffd9 	bl	80005f8 <__aeabi_dmul>
 8005646:	4602      	mov	r2, r0
 8005648:	460b      	mov	r3, r1
 800564a:	4614      	mov	r4, r2
 800564c:	461d      	mov	r5, r3
 800564e:	f04f 0200 	mov.w	r2, #0
 8005652:	4b6f      	ldr	r3, [pc, #444]	; (8005810 <kinematicInverse+0x3d8>)
 8005654:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005658:	f7fa ffce 	bl	80005f8 <__aeabi_dmul>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4610      	mov	r0, r2
 8005662:	4619      	mov	r1, r3
 8005664:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005668:	f7fa ffc6 	bl	80005f8 <__aeabi_dmul>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	4620      	mov	r0, r4
 8005672:	4629      	mov	r1, r5
 8005674:	f7fa fe08 	bl	8000288 <__aeabi_dsub>
 8005678:	4602      	mov	r2, r0
 800567a:	460b      	mov	r3, r1
 800567c:	4614      	mov	r4, r2
 800567e:	461d      	mov	r5, r3
 8005680:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005684:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005688:	f7fa ffb6 	bl	80005f8 <__aeabi_dmul>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	4690      	mov	r8, r2
 8005692:	4699      	mov	r9, r3
 8005694:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005698:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800569c:	f7fa ffac 	bl	80005f8 <__aeabi_dmul>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4640      	mov	r0, r8
 80056a6:	4649      	mov	r1, r9
 80056a8:	f7fa fdf0 	bl	800028c <__adddf3>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	4620      	mov	r0, r4
 80056b2:	4629      	mov	r1, r5
 80056b4:	f7fb f8ca 	bl	800084c <__aeabi_ddiv>
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 80056c0:	f04f 0200 	mov.w	r2, #0
 80056c4:	4b52      	ldr	r3, [pc, #328]	; (8005810 <kinematicInverse+0x3d8>)
 80056c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80056ca:	f7fa ff95 	bl	80005f8 <__aeabi_dmul>
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	4610      	mov	r0, r2
 80056d4:	4619      	mov	r1, r3
 80056d6:	a34a      	add	r3, pc, #296	; (adr r3, 8005800 <kinematicInverse+0x3c8>)
 80056d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056dc:	f7fa fdd6 	bl	800028c <__adddf3>
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	4610      	mov	r0, r2
 80056e6:	4619      	mov	r1, r3
 80056e8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80056ec:	f7fa ff84 	bl	80005f8 <__aeabi_dmul>
 80056f0:	4602      	mov	r2, r0
 80056f2:	460b      	mov	r3, r1
 80056f4:	4614      	mov	r4, r2
 80056f6:	461d      	mov	r5, r3
 80056f8:	f04f 0200 	mov.w	r2, #0
 80056fc:	4b44      	ldr	r3, [pc, #272]	; (8005810 <kinematicInverse+0x3d8>)
 80056fe:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005702:	f7fa ff79 	bl	80005f8 <__aeabi_dmul>
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	4610      	mov	r0, r2
 800570c:	4619      	mov	r1, r3
 800570e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005712:	f7fa ff71 	bl	80005f8 <__aeabi_dmul>
 8005716:	4602      	mov	r2, r0
 8005718:	460b      	mov	r3, r1
 800571a:	4620      	mov	r0, r4
 800571c:	4629      	mov	r1, r5
 800571e:	f7fa fdb5 	bl	800028c <__adddf3>
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	4614      	mov	r4, r2
 8005728:	461d      	mov	r5, r3
 800572a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800572e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005732:	f7fa ff61 	bl	80005f8 <__aeabi_dmul>
 8005736:	4602      	mov	r2, r0
 8005738:	460b      	mov	r3, r1
 800573a:	4690      	mov	r8, r2
 800573c:	4699      	mov	r9, r3
 800573e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005742:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005746:	f7fa ff57 	bl	80005f8 <__aeabi_dmul>
 800574a:	4602      	mov	r2, r0
 800574c:	460b      	mov	r3, r1
 800574e:	4640      	mov	r0, r8
 8005750:	4649      	mov	r1, r9
 8005752:	f7fa fd9b 	bl	800028c <__adddf3>
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	4620      	mov	r0, r4
 800575c:	4629      	mov	r1, r5
 800575e:	f7fb f875 	bl	800084c <__aeabi_ddiv>
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	e9c7 2306 	strd	r2, r3, [r7, #24]
	theta1 = atan2(s1,c1);
 800576a:	ed97 1b06 	vldr	d1, [r7, #24]
 800576e:	ed97 0b08 	vldr	d0, [r7, #32]
 8005772:	f015 fa0b 	bl	801ab8c <atan2>
 8005776:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 800577a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800577e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005782:	f7fa fd83 	bl	800028c <__adddf3>
 8005786:	4602      	mov	r2, r0
 8005788:	460b      	mov	r3, r1
 800578a:	4610      	mov	r0, r2
 800578c:	4619      	mov	r1, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8005794:	f7fa fd78 	bl	8000288 <__aeabi_dsub>
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 80057a0:	ed97 3b02 	vldr	d3, [r7, #8]
 80057a4:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 80057a8:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 80057ac:	ed97 0b04 	vldr	d0, [r7, #16]
 80057b0:	f004 fe1e 	bl	800a3f0 <scaraCheckWorkSpace4>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <kinematicInverse+0x386>
		return FALSE; // Over workspace !!!
 80057ba:	2300      	movs	r3, #0
 80057bc:	e014      	b.n	80057e8 <kinematicInverse+0x3b0>
	}
	pnt->Theta1 = theta1;
 80057be:	6879      	ldr	r1, [r7, #4]
 80057c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80057c4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	pnt->Theta2 = theta2;
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80057ce:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	pnt->D3		= d3;
 80057d2:	6879      	ldr	r1, [r7, #4]
 80057d4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80057d8:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	pnt->Theta4 = theta4;
 80057dc:	6879      	ldr	r1, [r7, #4]
 80057de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057e2:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	return TRUE; // All is well
 80057e6:	2301      	movs	r3, #1
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3780      	adds	r7, #128	; 0x80
 80057ec:	46bd      	mov	sp, r7
 80057ee:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057f2:	b002      	add	sp, #8
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	00000000 	.word	0x00000000
 80057fc:	40eec800 	.word	0x40eec800
 8005800:	00000000 	.word	0x00000000
 8005804:	4068a000 	.word	0x4068a000
 8005808:	40d90000 	.word	0x40d90000
 800580c:	3ff00000 	.word	0x3ff00000
 8005810:	40640000 	.word	0x40640000
 8005814:	80000000 	.word	0x80000000
 8005818:	4060aa6e 	.word	0x4060aa6e
 800581c:	80000000 	.word	0x80000000
 8005820:	40402e14 	.word	0x40402e14
 8005824:	00000000 	.word	0x00000000
 8005828:	40e2f320 	.word	0x40e2f320

0800582c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005830:	f005 fefe 	bl	800b630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005834:	f000 f82a 	bl	800588c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005838:	f7ff fc22 	bl	8005080 <MX_GPIO_Init>
  MX_DMA_Init();
 800583c:	f7fc ff24 	bl	8002688 <MX_DMA_Init>
  MX_UART4_Init();
 8005840:	f005 fdf8 	bl	800b434 <MX_UART4_Init>
  MX_FSMC_Init();
 8005844:	f7fe ffee 	bl	8004824 <MX_FSMC_Init>
  MX_TIM7_Init();
 8005848:	f005 fd82 	bl	800b350 <MX_TIM7_Init>
  MX_TIM2_Init();
 800584c:	f005 fd32 	bl	800b2b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if(!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)){
 8005850:	4b0c      	ldr	r3, [pc, #48]	; (8005884 <main+0x58>)
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10b      	bne.n	8005874 <main+0x48>
  		CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800585c:	4b09      	ldr	r3, [pc, #36]	; (8005884 <main+0x58>)
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	4a08      	ldr	r2, [pc, #32]	; (8005884 <main+0x58>)
 8005862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005866:	60d3      	str	r3, [r2, #12]
  		DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8005868:	4b07      	ldr	r3, [pc, #28]	; (8005888 <main+0x5c>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a06      	ldr	r2, [pc, #24]	; (8005888 <main+0x5c>)
 800586e:	f043 0301 	orr.w	r3, r3, #1
 8005872:	6013      	str	r3, [r2, #0]
  	}
  	DWT->CYCCNT = 0;
 8005874:	4b04      	ldr	r3, [pc, #16]	; (8005888 <main+0x5c>)
 8005876:	2200      	movs	r2, #0
 8005878:	605a      	str	r2, [r3, #4]
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800587a:	f7fc ff3f 	bl	80026fc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800587e:	f00c ff85 	bl	801278c <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 8005882:	e7fe      	b.n	8005882 <main+0x56>
 8005884:	e000edf0 	.word	0xe000edf0
 8005888:	e0001000 	.word	0xe0001000

0800588c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b094      	sub	sp, #80	; 0x50
 8005890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005892:	f107 0320 	add.w	r3, r7, #32
 8005896:	2230      	movs	r2, #48	; 0x30
 8005898:	2100      	movs	r1, #0
 800589a:	4618      	mov	r0, r3
 800589c:	f010 fb90 	bl	8015fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80058a0:	f107 030c 	add.w	r3, r7, #12
 80058a4:	2200      	movs	r2, #0
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	605a      	str	r2, [r3, #4]
 80058aa:	609a      	str	r2, [r3, #8]
 80058ac:	60da      	str	r2, [r3, #12]
 80058ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80058b0:	2300      	movs	r3, #0
 80058b2:	60bb      	str	r3, [r7, #8]
 80058b4:	4b28      	ldr	r3, [pc, #160]	; (8005958 <SystemClock_Config+0xcc>)
 80058b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b8:	4a27      	ldr	r2, [pc, #156]	; (8005958 <SystemClock_Config+0xcc>)
 80058ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058be:	6413      	str	r3, [r2, #64]	; 0x40
 80058c0:	4b25      	ldr	r3, [pc, #148]	; (8005958 <SystemClock_Config+0xcc>)
 80058c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058c8:	60bb      	str	r3, [r7, #8]
 80058ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80058cc:	2300      	movs	r3, #0
 80058ce:	607b      	str	r3, [r7, #4]
 80058d0:	4b22      	ldr	r3, [pc, #136]	; (800595c <SystemClock_Config+0xd0>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a21      	ldr	r2, [pc, #132]	; (800595c <SystemClock_Config+0xd0>)
 80058d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058da:	6013      	str	r3, [r2, #0]
 80058dc:	4b1f      	ldr	r3, [pc, #124]	; (800595c <SystemClock_Config+0xd0>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058e4:	607b      	str	r3, [r7, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80058e8:	2301      	movs	r3, #1
 80058ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80058ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80058f2:	2302      	movs	r3, #2
 80058f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80058f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80058fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80058fc:	2308      	movs	r3, #8
 80058fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005900:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8005904:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005906:	2302      	movs	r3, #2
 8005908:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800590a:	2307      	movs	r3, #7
 800590c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800590e:	f107 0320 	add.w	r3, r7, #32
 8005912:	4618      	mov	r0, r3
 8005914:	f007 ff04 	bl	800d720 <HAL_RCC_OscConfig>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800591e:	f000 f831 	bl	8005984 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005922:	230f      	movs	r3, #15
 8005924:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005926:	2302      	movs	r3, #2
 8005928:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800592a:	2300      	movs	r3, #0
 800592c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800592e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005932:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005938:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800593a:	f107 030c 	add.w	r3, r7, #12
 800593e:	2105      	movs	r1, #5
 8005940:	4618      	mov	r0, r3
 8005942:	f008 f95d 	bl	800dc00 <HAL_RCC_ClockConfig>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800594c:	f000 f81a 	bl	8005984 <Error_Handler>
  }
}
 8005950:	bf00      	nop
 8005952:	3750      	adds	r7, #80	; 0x50
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	40023800 	.word	0x40023800
 800595c:	40007000 	.word	0x40007000

08005960 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a04      	ldr	r2, [pc, #16]	; (8005980 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d101      	bne.n	8005976 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005972:	f005 fe7f 	bl	800b674 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005976:	bf00      	nop
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	40001000 	.word	0x40001000

08005984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005988:	bf00      	nop
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 8005992:	b480      	push	{r7}
 8005994:	b083      	sub	sp, #12
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	460b      	mov	r3, r1
 800599c:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80059a4:	3308      	adds	r3, #8
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <ringBuff_PushChar+0x1e>
		return FALSE;
 80059ac:	2300      	movs	r3, #0
 80059ae:	e02e      	b.n	8005a0e <ringBuff_PushChar+0x7c>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	78f9      	ldrb	r1, [r7, #3]
 80059bc:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3301      	adds	r3, #1
 80059c8:	425a      	negs	r2, r3
 80059ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059ce:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80059d2:	bf58      	it	pl
 80059d4:	4253      	negpl	r3, r2
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80059dc:	6013      	str	r3, [r2, #0]
			if (ringbuff->head == ringbuff->tail) {
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80059ec:	3304      	adds	r3, #4
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d105      	bne.n	8005a00 <ringBuff_PushChar+0x6e>
				ringbuff->isFull_Flag = TRUE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80059fa:	3308      	adds	r3, #8
 80059fc:	2201      	movs	r2, #1
 80059fe:	701a      	strb	r2, [r3, #0]
			}
			ringbuff->isEmpty_Flag = FALSE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a06:	3309      	adds	r3, #9
 8005a08:	2200      	movs	r2, #0
 8005a0a:	701a      	strb	r2, [r3, #0]
			return TRUE;
 8005a0c:	2301      	movs	r3, #1
	}
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 8005a1a:	b480      	push	{r7}
 8005a1c:	b083      	sub	sp, #12
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
 8005a22:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a2a:	3309      	adds	r3, #9
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <ringBuff_PopChar+0x1c>
		return FALSE;
 8005a32:	2300      	movs	r3, #0
 8005a34:	e032      	b.n	8005a9c <ringBuff_PopChar+0x82>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	5cd2      	ldrb	r2, [r2, r3]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a4e:	3304      	adds	r3, #4
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3301      	adds	r3, #1
 8005a54:	4259      	negs	r1, r3
 8005a56:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8005a5a:	f3c1 030c 	ubfx	r3, r1, #0, #13
 8005a5e:	bf58      	it	pl
 8005a60:	425a      	negpl	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a68:	3304      	adds	r3, #4
 8005a6a:	601a      	str	r2, [r3, #0]
			if (ringbuff->head == ringbuff->tail) {
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d105      	bne.n	8005a8e <ringBuff_PopChar+0x74>
				ringbuff->isEmpty_Flag = TRUE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a88:	3309      	adds	r3, #9
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	701a      	strb	r2, [r3, #0]
			}
			ringbuff->isFull_Flag = FALSE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a94:	3308      	adds	r3, #8
 8005a96:	2200      	movs	r2, #0
 8005a98:	701a      	strb	r2, [r3, #0]
			return TRUE;
 8005a9a:	2301      	movs	r3, #1
	}
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	82fb      	strh	r3, [r7, #22]
 8005ab8:	e011      	b.n	8005ade <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 8005aba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f7ff ff63 	bl	8005992 <ringBuff_PushChar>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00b      	beq.n	8005aea <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 8005ad2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	3301      	adds	r3, #1
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	82fb      	strh	r3, [r7, #22]
 8005ade:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	dce8      	bgt.n	8005aba <ringBuff_PushArray+0x12>
 8005ae8:	e000      	b.n	8005aec <ringBuff_PushArray+0x44>
			break;
 8005aea:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 8005aec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8005b04:	2300      	movs	r3, #0
 8005b06:	617b      	str	r3, [r7, #20]
 8005b08:	e00c      	b.n	8005b24 <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	4413      	add	r3, r2
 8005b10:	4619      	mov	r1, r3
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f7ff ff81 	bl	8005a1a <ringBuff_PopChar>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d007      	beq.n	8005b2e <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	3301      	adds	r3, #1
 8005b22:	617b      	str	r3, [r7, #20]
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	dbee      	blt.n	8005b0a <ringBuff_PopArray+0x12>
 8005b2c:	e000      	b.n	8005b30 <ringBuff_PopArray+0x38>
			break;
 8005b2e:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 8005b30:	697b      	ldr	r3, [r7, #20]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3718      	adds	r7, #24
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, const char* cmp_char) {
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b088      	sub	sp, #32
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	6039      	str	r1, [r7, #0]
	int32_t index = ringbuff->tail;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	61fb      	str	r3, [r7, #28]
	int32_t distance = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	61bb      	str	r3, [r7, #24]
	int32_t sync_state = 0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	617b      	str	r3, [r7, #20]
	int32_t head_ptr = ringbuff->head;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	60fb      	str	r3, [r7, #12]
	int32_t number_of_state = strlen(cmp_char);
 8005b62:	6838      	ldr	r0, [r7, #0]
 8005b64:	f7fa fb34 	bl	80001d0 <strlen>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	60bb      	str	r3, [r7, #8]
	if (ringbuff->isFull_Flag) {
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005b72:	3308      	adds	r3, #8
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d066      	beq.n	8005c48 <ringBuff_DistanceOf+0x10e>
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	613b      	str	r3, [r7, #16]
 8005b7e:	e030      	b.n	8005be2 <ringBuff_DistanceOf+0xa8>
	            if(ringbuff->Array[index] == cmp_char[sync_state]){
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	4413      	add	r3, r2
 8005b86:	781a      	ldrb	r2, [r3, #0]
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	6839      	ldr	r1, [r7, #0]
 8005b8c:	440b      	add	r3, r1
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d103      	bne.n	8005b9c <ringBuff_DistanceOf+0x62>
	                sync_state++;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	3301      	adds	r3, #1
 8005b98:	617b      	str	r3, [r7, #20]
 8005b9a:	e00c      	b.n	8005bb6 <ringBuff_DistanceOf+0x7c>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	781a      	ldrb	r2, [r3, #0]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d102      	bne.n	8005bb2 <ringBuff_DistanceOf+0x78>
	                sync_state = 1;
 8005bac:	2301      	movs	r3, #1
 8005bae:	617b      	str	r3, [r7, #20]
 8005bb0:	e001      	b.n	8005bb6 <ringBuff_DistanceOf+0x7c>
	            }else{
	                sync_state = 0;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d101      	bne.n	8005bc2 <ringBuff_DistanceOf+0x88>
	                return distance;
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	e048      	b.n	8005c54 <ringBuff_DistanceOf+0x11a>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	61bb      	str	r3, [r7, #24]
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	613b      	str	r3, [r7, #16]
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	425a      	negs	r2, r3
 8005bd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bd8:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005bdc:	bf58      	it	pl
 8005bde:	4253      	negpl	r3, r2
 8005be0:	61fb      	str	r3, [r7, #28]
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005be8:	dbca      	blt.n	8005b80 <ringBuff_DistanceOf+0x46>
 8005bea:	e031      	b.n	8005c50 <ringBuff_DistanceOf+0x116>
	        }
	} else {
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
	        if(ringbuff->Array[index] == cmp_char[sync_state]){
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	781a      	ldrb	r2, [r3, #0]
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	6839      	ldr	r1, [r7, #0]
 8005bf8:	440b      	add	r3, r1
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d103      	bne.n	8005c08 <ringBuff_DistanceOf+0xce>
	                //LOG_REPORT("dis1", ringbuff->.tail);
	                sync_state++;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	3301      	adds	r3, #1
 8005c04:	617b      	str	r3, [r7, #20]
 8005c06:	e00c      	b.n	8005c22 <ringBuff_DistanceOf+0xe8>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	781a      	ldrb	r2, [r3, #0]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d102      	bne.n	8005c1e <ringBuff_DistanceOf+0xe4>
	                sync_state = 1;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	617b      	str	r3, [r7, #20]
 8005c1c:	e001      	b.n	8005c22 <ringBuff_DistanceOf+0xe8>
	            }else{
	                sync_state = 0;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d101      	bne.n	8005c2e <ringBuff_DistanceOf+0xf4>
	                //LOG_REPORT("dis", distance);
	                return distance;
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	e012      	b.n	8005c54 <ringBuff_DistanceOf+0x11a>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	3301      	adds	r3, #1
 8005c32:	61bb      	str	r3, [r7, #24]
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	3301      	adds	r3, #1
 8005c38:	425a      	negs	r2, r3
 8005c3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c3e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005c42:	bf58      	it	pl
 8005c44:	4253      	negpl	r3, r2
 8005c46:	61fb      	str	r3, [r7, #28]
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d1cd      	bne.n	8005bec <ringBuff_DistanceOf+0xb2>
	        }
	    //LOG_REPORT("hai", 2);
	}

	return -1;
 8005c50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3720      	adds	r7, #32
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {3, 5, 5, 10};

void	lowlayer_scanReset(void) {
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
	lowlayer_resetEncoder();
 8005c60:	f000 fdfe 	bl	8006860 <lowlayer_resetEncoder>
	pulse_accumulate[0] = 0;
 8005c64:	4b10      	ldr	r3, [pc, #64]	; (8005ca8 <lowlayer_scanReset+0x4c>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	601a      	str	r2, [r3, #0]
	pulse_accumulate[1] = 0;
 8005c6a:	4b0f      	ldr	r3, [pc, #60]	; (8005ca8 <lowlayer_scanReset+0x4c>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	605a      	str	r2, [r3, #4]
	pulse_accumulate[2] = 0;
 8005c70:	4b0d      	ldr	r3, [pc, #52]	; (8005ca8 <lowlayer_scanReset+0x4c>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	609a      	str	r2, [r3, #8]
	pulse_accumulate[3] = 0;
 8005c76:	4b0c      	ldr	r3, [pc, #48]	; (8005ca8 <lowlayer_scanReset+0x4c>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	60da      	str	r2, [r3, #12]

	position_encoder[0] = 0;
 8005c7c:	4b0b      	ldr	r3, [pc, #44]	; (8005cac <lowlayer_scanReset+0x50>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	601a      	str	r2, [r3, #0]
	position_encoder[1] = 0;
 8005c82:	4b0a      	ldr	r3, [pc, #40]	; (8005cac <lowlayer_scanReset+0x50>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	605a      	str	r2, [r3, #4]
	position_encoder[2] = 0;
 8005c88:	4b08      	ldr	r3, [pc, #32]	; (8005cac <lowlayer_scanReset+0x50>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	609a      	str	r2, [r3, #8]

	scan_flag = 0;
 8005c8e:	4b08      	ldr	r3, [pc, #32]	; (8005cb0 <lowlayer_scanReset+0x54>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 8005c94:	4b07      	ldr	r3, [pc, #28]	; (8005cb4 <lowlayer_scanReset+0x58>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	2108      	movs	r1, #8
 8005c9e:	4806      	ldr	r0, [pc, #24]	; (8005cb8 <lowlayer_scanReset+0x5c>)
 8005ca0:	f006 fb4a 	bl	800c338 <HAL_GPIO_WritePin>
}
 8005ca4:	bf00      	nop
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	2000fed0 	.word	0x2000fed0
 8005cac:	2000fee4 	.word	0x2000fee4
 8005cb0:	2000fee0 	.word	0x2000fee0
 8005cb4:	2000ff00 	.word	0x2000ff00
 8005cb8:	40020c00 	.word	0x40020c00
 8005cbc:	00000000 	.word	0x00000000

08005cc0 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 8005cca:	f000 fe87 	bl	80069dc <lowlayer_updateLimit>
	if (state_scan < 4) {
 8005cce:	4b96      	ldr	r3, [pc, #600]	; (8005f28 <lowlayer_scanFlow+0x268>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	2b03      	cmp	r3, #3
 8005cd4:	d837      	bhi.n	8005d46 <lowlayer_scanFlow+0x86>
		if (limit_switch[3 - state_scan] == 0) {
 8005cd6:	4b94      	ldr	r3, [pc, #592]	; (8005f28 <lowlayer_scanFlow+0x268>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	f1c3 0303 	rsb	r3, r3, #3
 8005cde:	4a93      	ldr	r2, [pc, #588]	; (8005f2c <lowlayer_scanFlow+0x26c>)
 8005ce0:	5cd3      	ldrb	r3, [r2, r3]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d121      	bne.n	8005d2a <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 8005ce6:	4b90      	ldr	r3, [pc, #576]	; (8005f28 <lowlayer_scanFlow+0x268>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	f1c3 0203 	rsb	r2, r3, #3
 8005cee:	4b8e      	ldr	r3, [pc, #568]	; (8005f28 <lowlayer_scanFlow+0x268>)
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	f1c3 0303 	rsb	r3, r3, #3
 8005cf6:	498e      	ldr	r1, [pc, #568]	; (8005f30 <lowlayer_scanFlow+0x270>)
 8005cf8:	568a      	ldrsb	r2, [r1, r2]
 8005cfa:	f107 0108 	add.w	r1, r7, #8
 8005cfe:	440b      	add	r3, r1
 8005d00:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 8005d04:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	425b      	negs	r3, r3
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	b258      	sxtb	r0, r3
 8005d10:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005d14:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	425b      	negs	r3, r3
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	b25a      	sxtb	r2, r3
 8005d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d24:	f000 fcd8 	bl	80066d8 <lowlayer_writePulse>
 8005d28:	e00b      	b.n	8005d42 <lowlayer_scanFlow+0x82>
		} else {
			state_scan++;
 8005d2a:	4b7f      	ldr	r3, [pc, #508]	; (8005f28 <lowlayer_scanFlow+0x268>)
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	4b7d      	ldr	r3, [pc, #500]	; (8005f28 <lowlayer_scanFlow+0x268>)
 8005d34:	701a      	strb	r2, [r3, #0]
			lowlayer_writePulse(0, 0, 0, 0);
 8005d36:	2300      	movs	r3, #0
 8005d38:	2200      	movs	r2, #0
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	2000      	movs	r0, #0
 8005d3e:	f000 fccb 	bl	80066d8 <lowlayer_writePulse>
		}

		return FALSE;
 8005d42:	2300      	movs	r3, #0
 8005d44:	e0d2      	b.n	8005eec <lowlayer_scanFlow+0x22c>
	} else {
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 8005d46:	2201      	movs	r2, #1
 8005d48:	2108      	movs	r1, #8
 8005d4a:	487a      	ldr	r0, [pc, #488]	; (8005f34 <lowlayer_scanFlow+0x274>)
 8005d4c:	f006 faf4 	bl	800c338 <HAL_GPIO_WritePin>
		lowlayer_updateCapture();
 8005d50:	f000 fe28 	bl	80069a4 <lowlayer_updateCapture>
		lowlayer_writePulse(0, 0, 0, 0);
 8005d54:	2300      	movs	r3, #0
 8005d56:	2200      	movs	r2, #0
 8005d58:	2100      	movs	r1, #0
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	f000 fcbc 	bl	80066d8 <lowlayer_writePulse>
		scan_flag = 1;
 8005d60:	4b75      	ldr	r3, [pc, #468]	; (8005f38 <lowlayer_scanFlow+0x278>)
 8005d62:	2201      	movs	r2, #1
 8005d64:	701a      	strb	r2, [r3, #0]
		// Update offset
		offset_encoder[0] 	= position_capture[0];
 8005d66:	4b75      	ldr	r3, [pc, #468]	; (8005f3c <lowlayer_scanFlow+0x27c>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a75      	ldr	r2, [pc, #468]	; (8005f40 <lowlayer_scanFlow+0x280>)
 8005d6c:	6013      	str	r3, [r2, #0]
		offset_encoder[1] 	= position_capture[1];
 8005d6e:	4b73      	ldr	r3, [pc, #460]	; (8005f3c <lowlayer_scanFlow+0x27c>)
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	4a73      	ldr	r2, [pc, #460]	; (8005f40 <lowlayer_scanFlow+0x280>)
 8005d74:	6053      	str	r3, [r2, #4]
		offset_encoder[2] 	= position_capture[2];
 8005d76:	4b71      	ldr	r3, [pc, #452]	; (8005f3c <lowlayer_scanFlow+0x27c>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	4a71      	ldr	r2, [pc, #452]	; (8005f40 <lowlayer_scanFlow+0x280>)
 8005d7c:	6093      	str	r3, [r2, #8]
		offset_stepper		= pulse_accumulate[3];
 8005d7e:	4b71      	ldr	r3, [pc, #452]	; (8005f44 <lowlayer_scanFlow+0x284>)
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	4a71      	ldr	r2, [pc, #452]	; (8005f48 <lowlayer_scanFlow+0x288>)
 8005d84:	6013      	str	r3, [r2, #0]
		// LOG offset
		LOG_REPORT("offset encoder 0", offset_encoder[0]);
 8005d86:	4b6e      	ldr	r3, [pc, #440]	; (8005f40 <lowlayer_scanFlow+0x280>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	486f      	ldr	r0, [pc, #444]	; (8005f4c <lowlayer_scanFlow+0x28c>)
 8005d90:	f7fc fbc4 	bl	800251c <LOG_REPORT>
		LOG_REPORT("offset encoder 1", offset_encoder[1]);
 8005d94:	4b6a      	ldr	r3, [pc, #424]	; (8005f40 <lowlayer_scanFlow+0x280>)
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	486c      	ldr	r0, [pc, #432]	; (8005f50 <lowlayer_scanFlow+0x290>)
 8005d9e:	f7fc fbbd 	bl	800251c <LOG_REPORT>
		LOG_REPORT("offset encoder 2", offset_encoder[2]);
 8005da2:	4b67      	ldr	r3, [pc, #412]	; (8005f40 <lowlayer_scanFlow+0x280>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	4619      	mov	r1, r3
 8005daa:	486a      	ldr	r0, [pc, #424]	; (8005f54 <lowlayer_scanFlow+0x294>)
 8005dac:	f7fc fbb6 	bl	800251c <LOG_REPORT>
		LOG_REPORT("offset stepper", offset_stepper);
 8005db0:	4b65      	ldr	r3, [pc, #404]	; (8005f48 <lowlayer_scanFlow+0x288>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	4619      	mov	r1, r3
 8005db8:	4867      	ldr	r0, [pc, #412]	; (8005f58 <lowlayer_scanFlow+0x298>)
 8005dba:	f7fc fbaf 	bl	800251c <LOG_REPORT>

		offset_setpoint[0]	= HARD_LIM0_NEG
				- DIR_ENCODER_0*offset_encoder[0]*2.0*PI/ENCODER_J0;
 8005dbe:	4b60      	ldr	r3, [pc, #384]	; (8005f40 <lowlayer_scanFlow+0x280>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	ee07 3a90 	vmov	s15, r3
 8005dc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dca:	ee17 0a90 	vmov	r0, s15
 8005dce:	f7fa fbbb 	bl	8000548 <__aeabi_f2d>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	f7fa fa59 	bl	800028c <__adddf3>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	4610      	mov	r0, r2
 8005de0:	4619      	mov	r1, r3
 8005de2:	a345      	add	r3, pc, #276	; (adr r3, 8005ef8 <lowlayer_scanFlow+0x238>)
 8005de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de8:	f7fa fc06 	bl	80005f8 <__aeabi_dmul>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4610      	mov	r0, r2
 8005df2:	4619      	mov	r1, r3
 8005df4:	a342      	add	r3, pc, #264	; (adr r3, 8005f00 <lowlayer_scanFlow+0x240>)
 8005df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfa:	f7fa fd27 	bl	800084c <__aeabi_ddiv>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	460b      	mov	r3, r1
 8005e02:	a141      	add	r1, pc, #260	; (adr r1, 8005f08 <lowlayer_scanFlow+0x248>)
 8005e04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e08:	f7fa fa3e 	bl	8000288 <__aeabi_dsub>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	460b      	mov	r3, r1
		offset_setpoint[0]	= HARD_LIM0_NEG
 8005e10:	4952      	ldr	r1, [pc, #328]	; (8005f5c <lowlayer_scanFlow+0x29c>)
 8005e12:	e9c1 2300 	strd	r2, r3, [r1]
		offset_setpoint[1]	= HARD_LIM1_POS
				- DIR_ENCODER_1*offset_encoder[1]*2.0*PI/ENCODER_J1;
 8005e16:	4b4a      	ldr	r3, [pc, #296]	; (8005f40 <lowlayer_scanFlow+0x280>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	ee07 3a90 	vmov	s15, r3
 8005e1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e22:	ee17 0a90 	vmov	r0, s15
 8005e26:	f7fa fb8f 	bl	8000548 <__aeabi_f2d>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	f7fa fa2d 	bl	800028c <__adddf3>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	4610      	mov	r0, r2
 8005e38:	4619      	mov	r1, r3
 8005e3a:	a32f      	add	r3, pc, #188	; (adr r3, 8005ef8 <lowlayer_scanFlow+0x238>)
 8005e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e40:	f7fa fbda 	bl	80005f8 <__aeabi_dmul>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4610      	mov	r0, r2
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	f04f 0200 	mov.w	r2, #0
 8005e50:	4b43      	ldr	r3, [pc, #268]	; (8005f60 <lowlayer_scanFlow+0x2a0>)
 8005e52:	f7fa fcfb 	bl	800084c <__aeabi_ddiv>
 8005e56:	4602      	mov	r2, r0
 8005e58:	460b      	mov	r3, r1
 8005e5a:	a12d      	add	r1, pc, #180	; (adr r1, 8005f10 <lowlayer_scanFlow+0x250>)
 8005e5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e60:	f7fa fa12 	bl	8000288 <__aeabi_dsub>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
		offset_setpoint[1]	= HARD_LIM1_POS
 8005e68:	493c      	ldr	r1, [pc, #240]	; (8005f5c <lowlayer_scanFlow+0x29c>)
 8005e6a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		offset_setpoint[2]	= HARD_LIM2_NEG
				- DIR_ENCODER_2*offset_encoder[2]/ENCODER_J2;
 8005e6e:	4b34      	ldr	r3, [pc, #208]	; (8005f40 <lowlayer_scanFlow+0x280>)
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	ee07 3a90 	vmov	s15, r3
 8005e76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e7a:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8005f64 <lowlayer_scanFlow+0x2a4>
 8005e7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e82:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8005f68 <lowlayer_scanFlow+0x2a8>
 8005e86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e8a:	ee17 0a90 	vmov	r0, s15
 8005e8e:	f7fa fb5b 	bl	8000548 <__aeabi_f2d>
 8005e92:	4602      	mov	r2, r0
 8005e94:	460b      	mov	r3, r1
		offset_setpoint[2]	= HARD_LIM2_NEG
 8005e96:	4931      	ldr	r1, [pc, #196]	; (8005f5c <lowlayer_scanFlow+0x29c>)
 8005e98:	e9c1 2304 	strd	r2, r3, [r1, #16]
		offset_setpoint[3]  = HARD_LIM3_POS
				- offset_stepper*2.0*PI/GEAR_J3;
 8005e9c:	4b2a      	ldr	r3, [pc, #168]	; (8005f48 <lowlayer_scanFlow+0x288>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fa fb3f 	bl	8000524 <__aeabi_i2d>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	f7fa f9ef 	bl	800028c <__adddf3>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	4610      	mov	r0, r2
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	a310      	add	r3, pc, #64	; (adr r3, 8005ef8 <lowlayer_scanFlow+0x238>)
 8005eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebc:	f7fa fb9c 	bl	80005f8 <__aeabi_dmul>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	a313      	add	r3, pc, #76	; (adr r3, 8005f18 <lowlayer_scanFlow+0x258>)
 8005eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ece:	f7fa fcbd 	bl	800084c <__aeabi_ddiv>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	a112      	add	r1, pc, #72	; (adr r1, 8005f20 <lowlayer_scanFlow+0x260>)
 8005ed8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005edc:	f7fa f9d4 	bl	8000288 <__aeabi_dsub>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	460b      	mov	r3, r1
		offset_setpoint[3]  = HARD_LIM3_POS
 8005ee4:	491d      	ldr	r1, [pc, #116]	; (8005f5c <lowlayer_scanFlow+0x29c>)
 8005ee6:	e9c1 2306 	strd	r2, r3, [r1, #24]

		return TRUE;
 8005eea:	2301      	movs	r3, #1
	}
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	f3af 8000 	nop.w
 8005ef8:	60000000 	.word	0x60000000
 8005efc:	400921fb 	.word	0x400921fb
 8005f00:	00000000 	.word	0x00000000
 8005f04:	40f38800 	.word	0x40f38800
 8005f08:	40000000 	.word	0x40000000
 8005f0c:	bff9f17a 	.word	0xbff9f17a
 8005f10:	80000000 	.word	0x80000000
 8005f14:	40039716 	.word	0x40039716
 8005f18:	a0000000 	.word	0xa0000000
 8005f1c:	40d3bca1 	.word	0x40d3bca1
 8005f20:	a0000000 	.word	0xa0000000
 8005f24:	4008330d 	.word	0x4008330d
 8005f28:	2000ff00 	.word	0x2000ff00
 8005f2c:	2000fef0 	.word	0x2000fef0
 8005f30:	0801c4ec 	.word	0x0801c4ec
 8005f34:	40020c00 	.word	0x40020c00
 8005f38:	2000fee0 	.word	0x2000fee0
 8005f3c:	2000fef4 	.word	0x2000fef4
 8005f40:	2000ff28 	.word	0x2000ff28
 8005f44:	2000fed0 	.word	0x2000fed0
 8005f48:	2000ff04 	.word	0x2000ff04
 8005f4c:	0801c414 	.word	0x0801c414
 8005f50:	0801c428 	.word	0x0801c428
 8005f54:	0801c43c 	.word	0x0801c43c
 8005f58:	0801c450 	.word	0x0801c450
 8005f5c:	2000ff08 	.word	0x2000ff08
 8005f60:	40ff4000 	.word	0x40ff4000
 8005f64:	4426aaab 	.word	0x4426aaab
 8005f68:	400f1aa0 	.word	0x400f1aa0
 8005f6c:	00000000 	.word	0x00000000

08005f70 <lowlayer_goToSoftLimit>:

uint8_t	lowlayer_goToSoftLimit(SCARA_PositionTypeDef *setpoint) {
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
	int8_t pulse[4] = {0, 0, 0 ,0};
 8005f78:	2300      	movs	r3, #0
 8005f7a:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	73fb      	strb	r3, [r7, #15]
	lowlayer_readSetPosition(setpoint);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f94d 	bl	8006220 <lowlayer_readSetPosition>
	if (setpoint->Theta1 < LIM_MIN_J0) {
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8005f8c:	a330      	add	r3, pc, #192	; (adr r3, 8006050 <lowlayer_goToSoftLimit+0xe0>)
 8005f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f92:	f7fa fda3 	bl	8000adc <__aeabi_dcmplt>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d004      	beq.n	8005fa6 <lowlayer_goToSoftLimit+0x36>
		pulse[0] = pulse_scan[0];
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	723b      	strb	r3, [r7, #8]
		check++;
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta2 > LIM_MAX_J1) {
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8005fac:	a32a      	add	r3, pc, #168	; (adr r3, 8006058 <lowlayer_goToSoftLimit+0xe8>)
 8005fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb2:	f7fa fdb1 	bl	8000b18 <__aeabi_dcmpgt>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d004      	beq.n	8005fc6 <lowlayer_goToSoftLimit+0x56>
		pulse[1] = pulse_scan[1];
 8005fbc:	2305      	movs	r3, #5
 8005fbe:	727b      	strb	r3, [r7, #9]
		check++;
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->D3 < LIM_MIN_J2) {
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8005fcc:	f04f 0200 	mov.w	r2, #0
 8005fd0:	f04f 0300 	mov.w	r3, #0
 8005fd4:	f7fa fd82 	bl	8000adc <__aeabi_dcmplt>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d004      	beq.n	8005fe8 <lowlayer_goToSoftLimit+0x78>
		pulse[2] = pulse_scan[2];
 8005fde:	2305      	movs	r3, #5
 8005fe0:	72bb      	strb	r3, [r7, #10]
		check++;
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta4 > LIM_MAX_J3) {
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8005fee:	a31c      	add	r3, pc, #112	; (adr r3, 8006060 <lowlayer_goToSoftLimit+0xf0>)
 8005ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff4:	f7fa fd90 	bl	8000b18 <__aeabi_dcmpgt>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d004      	beq.n	8006008 <lowlayer_goToSoftLimit+0x98>
		pulse[3] = pulse_scan[3];
 8005ffe:	230a      	movs	r3, #10
 8006000:	72fb      	strb	r3, [r7, #11]
		check++;
 8006002:	7bfb      	ldrb	r3, [r7, #15]
 8006004:	3301      	adds	r3, #1
 8006006:	73fb      	strb	r3, [r7, #15]
	}

	if (check > 0) {
 8006008:	7bfb      	ldrb	r3, [r7, #15]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d013      	beq.n	8006036 <lowlayer_goToSoftLimit+0xc6>
		lowlayer_writePulse(pulse[0], -pulse[1], pulse[2], -pulse[3]);
 800600e:	f997 0008 	ldrsb.w	r0, [r7, #8]
 8006012:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8006016:	b2db      	uxtb	r3, r3
 8006018:	425b      	negs	r3, r3
 800601a:	b2db      	uxtb	r3, r3
 800601c:	b259      	sxtb	r1, r3
 800601e:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8006022:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006026:	b2db      	uxtb	r3, r3
 8006028:	425b      	negs	r3, r3
 800602a:	b2db      	uxtb	r3, r3
 800602c:	b25b      	sxtb	r3, r3
 800602e:	f000 fb53 	bl	80066d8 <lowlayer_writePulse>
		return FALSE;
 8006032:	2300      	movs	r3, #0
 8006034:	e006      	b.n	8006044 <lowlayer_goToSoftLimit+0xd4>
	} else {
		lowlayer_writePulse(0, 0, 0, 0);
 8006036:	2300      	movs	r3, #0
 8006038:	2200      	movs	r2, #0
 800603a:	2100      	movs	r1, #0
 800603c:	2000      	movs	r0, #0
 800603e:	f000 fb4b 	bl	80066d8 <lowlayer_writePulse>
		return TRUE;
 8006042:	2301      	movs	r3, #1
	}
}
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	f3af 8000 	nop.w
 8006050:	daaaaaab 	.word	0xdaaaaaab
 8006054:	bff7bc89 	.word	0xbff7bc89
 8006058:	88000000 	.word	0x88000000
 800605c:	4002d97c 	.word	0x4002d97c
 8006060:	daaaaaab 	.word	0xdaaaaaab
 8006064:	4007bc89 	.word	0x4007bc89

08006068 <lowlayer_readTruePosition>:

void	lowlayer_readTruePosition(SCARA_PositionTypeDef *true) {
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
	lowlayer_updateEncoder();
 8006070:	f000 fc7c 	bl	800696c <lowlayer_updateEncoder>
	true->Theta1 = HARD_LIM0_NEG
			+ DIR_ENCODER_0*(position_encoder[0] - offset_encoder[0])*2.0*PI/ENCODER_J0; // Servo Motor
 8006074:	4b62      	ldr	r3, [pc, #392]	; (8006200 <lowlayer_readTruePosition+0x198>)
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	4b62      	ldr	r3, [pc, #392]	; (8006204 <lowlayer_readTruePosition+0x19c>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	ee07 3a90 	vmov	s15, r3
 8006082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006086:	ee17 0a90 	vmov	r0, s15
 800608a:	f7fa fa5d 	bl	8000548 <__aeabi_f2d>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	f7fa f8fb 	bl	800028c <__adddf3>
 8006096:	4602      	mov	r2, r0
 8006098:	460b      	mov	r3, r1
 800609a:	4610      	mov	r0, r2
 800609c:	4619      	mov	r1, r3
 800609e:	a34c      	add	r3, pc, #304	; (adr r3, 80061d0 <lowlayer_readTruePosition+0x168>)
 80060a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a4:	f7fa faa8 	bl	80005f8 <__aeabi_dmul>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	4610      	mov	r0, r2
 80060ae:	4619      	mov	r1, r3
 80060b0:	a349      	add	r3, pc, #292	; (adr r3, 80061d8 <lowlayer_readTruePosition+0x170>)
 80060b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b6:	f7fa fbc9 	bl	800084c <__aeabi_ddiv>
 80060ba:	4602      	mov	r2, r0
 80060bc:	460b      	mov	r3, r1
 80060be:	4610      	mov	r0, r2
 80060c0:	4619      	mov	r1, r3
 80060c2:	a347      	add	r3, pc, #284	; (adr r3, 80061e0 <lowlayer_readTruePosition+0x178>)
 80060c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c8:	f7fa f8de 	bl	8000288 <__aeabi_dsub>
 80060cc:	4602      	mov	r2, r0
 80060ce:	460b      	mov	r3, r1
	true->Theta1 = HARD_LIM0_NEG
 80060d0:	6879      	ldr	r1, [r7, #4]
 80060d2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	true->Theta2 = HARD_LIM1_POS
			+ DIR_ENCODER_1*(position_encoder[1] - offset_encoder[1])*2.0*PI/ENCODER_J1; // Servo Motor
 80060d6:	4b4a      	ldr	r3, [pc, #296]	; (8006200 <lowlayer_readTruePosition+0x198>)
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	4b4a      	ldr	r3, [pc, #296]	; (8006204 <lowlayer_readTruePosition+0x19c>)
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	ee07 3a90 	vmov	s15, r3
 80060e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060e8:	ee17 0a90 	vmov	r0, s15
 80060ec:	f7fa fa2c 	bl	8000548 <__aeabi_f2d>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	f7fa f8ca 	bl	800028c <__adddf3>
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	4610      	mov	r0, r2
 80060fe:	4619      	mov	r1, r3
 8006100:	a333      	add	r3, pc, #204	; (adr r3, 80061d0 <lowlayer_readTruePosition+0x168>)
 8006102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006106:	f7fa fa77 	bl	80005f8 <__aeabi_dmul>
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	4610      	mov	r0, r2
 8006110:	4619      	mov	r1, r3
 8006112:	f04f 0200 	mov.w	r2, #0
 8006116:	4b3c      	ldr	r3, [pc, #240]	; (8006208 <lowlayer_readTruePosition+0x1a0>)
 8006118:	f7fa fb98 	bl	800084c <__aeabi_ddiv>
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	4610      	mov	r0, r2
 8006122:	4619      	mov	r1, r3
 8006124:	a330      	add	r3, pc, #192	; (adr r3, 80061e8 <lowlayer_readTruePosition+0x180>)
 8006126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612a:	f7fa f8af 	bl	800028c <__adddf3>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
	true->Theta2 = HARD_LIM1_POS
 8006132:	6879      	ldr	r1, [r7, #4]
 8006134:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	true->D3	 = HARD_LIM2_NEG
			+ DIR_ENCODER_2*(position_encoder[2] - offset_encoder[2])/ENCODER_J2; // Servo Motor
 8006138:	4b31      	ldr	r3, [pc, #196]	; (8006200 <lowlayer_readTruePosition+0x198>)
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	4b31      	ldr	r3, [pc, #196]	; (8006204 <lowlayer_readTruePosition+0x19c>)
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	ee07 3a90 	vmov	s15, r3
 8006146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800614a:	eeb1 7a67 	vneg.f32	s14, s15
 800614e:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800620c <lowlayer_readTruePosition+0x1a4>
 8006152:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006156:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8006210 <lowlayer_readTruePosition+0x1a8>
 800615a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800615e:	ee17 0a90 	vmov	r0, s15
 8006162:	f7fa f9f1 	bl	8000548 <__aeabi_f2d>
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
	true->D3	 = HARD_LIM2_NEG
 800616a:	6879      	ldr	r1, [r7, #4]
 800616c:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

	true->Theta4 = HARD_LIM3_POS
			+ (pulse_accumulate[3] - offset_stepper)*2.0*PI/GEAR_J3; // Stepper Motor
 8006170:	4b28      	ldr	r3, [pc, #160]	; (8006214 <lowlayer_readTruePosition+0x1ac>)
 8006172:	68da      	ldr	r2, [r3, #12]
 8006174:	4b28      	ldr	r3, [pc, #160]	; (8006218 <lowlayer_readTruePosition+0x1b0>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	4618      	mov	r0, r3
 800617c:	f7fa f9d2 	bl	8000524 <__aeabi_i2d>
 8006180:	4602      	mov	r2, r0
 8006182:	460b      	mov	r3, r1
 8006184:	f7fa f882 	bl	800028c <__adddf3>
 8006188:	4602      	mov	r2, r0
 800618a:	460b      	mov	r3, r1
 800618c:	4610      	mov	r0, r2
 800618e:	4619      	mov	r1, r3
 8006190:	a30f      	add	r3, pc, #60	; (adr r3, 80061d0 <lowlayer_readTruePosition+0x168>)
 8006192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006196:	f7fa fa2f 	bl	80005f8 <__aeabi_dmul>
 800619a:	4602      	mov	r2, r0
 800619c:	460b      	mov	r3, r1
 800619e:	4610      	mov	r0, r2
 80061a0:	4619      	mov	r1, r3
 80061a2:	a313      	add	r3, pc, #76	; (adr r3, 80061f0 <lowlayer_readTruePosition+0x188>)
 80061a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a8:	f7fa fb50 	bl	800084c <__aeabi_ddiv>
 80061ac:	4602      	mov	r2, r0
 80061ae:	460b      	mov	r3, r1
 80061b0:	4610      	mov	r0, r2
 80061b2:	4619      	mov	r1, r3
 80061b4:	a310      	add	r3, pc, #64	; (adr r3, 80061f8 <lowlayer_readTruePosition+0x190>)
 80061b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ba:	f7fa f867 	bl	800028c <__adddf3>
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
	true->Theta4 = HARD_LIM3_POS
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
}
 80061c8:	bf00      	nop
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	60000000 	.word	0x60000000
 80061d4:	400921fb 	.word	0x400921fb
 80061d8:	00000000 	.word	0x00000000
 80061dc:	40f38800 	.word	0x40f38800
 80061e0:	40000000 	.word	0x40000000
 80061e4:	3ff9f17a 	.word	0x3ff9f17a
 80061e8:	80000000 	.word	0x80000000
 80061ec:	40039716 	.word	0x40039716
 80061f0:	a0000000 	.word	0xa0000000
 80061f4:	40d3bca1 	.word	0x40d3bca1
 80061f8:	a0000000 	.word	0xa0000000
 80061fc:	4008330d 	.word	0x4008330d
 8006200:	2000fee4 	.word	0x2000fee4
 8006204:	2000ff28 	.word	0x2000ff28
 8006208:	40ff4000 	.word	0x40ff4000
 800620c:	4426aaab 	.word	0x4426aaab
 8006210:	400f1aa0 	.word	0x400f1aa0
 8006214:	2000fed0 	.word	0x2000fed0
 8006218:	2000ff04 	.word	0x2000ff04
 800621c:	00000000 	.word	0x00000000

08006220 <lowlayer_readSetPosition>:

void	lowlayer_readSetPosition(SCARA_PositionTypeDef *setpoint) {
 8006220:	b5b0      	push	{r4, r5, r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
	setpoint->Theta1 = offset_setpoint[0] + pulse_accumulate[0]*2.0*PI/GEAR_J0;
 8006228:	4b53      	ldr	r3, [pc, #332]	; (8006378 <lowlayer_readSetPosition+0x158>)
 800622a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800622e:	4b53      	ldr	r3, [pc, #332]	; (800637c <lowlayer_readSetPosition+0x15c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4618      	mov	r0, r3
 8006234:	f7fa f976 	bl	8000524 <__aeabi_i2d>
 8006238:	4602      	mov	r2, r0
 800623a:	460b      	mov	r3, r1
 800623c:	f7fa f826 	bl	800028c <__adddf3>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	4610      	mov	r0, r2
 8006246:	4619      	mov	r1, r3
 8006248:	a345      	add	r3, pc, #276	; (adr r3, 8006360 <lowlayer_readSetPosition+0x140>)
 800624a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624e:	f7fa f9d3 	bl	80005f8 <__aeabi_dmul>
 8006252:	4602      	mov	r2, r0
 8006254:	460b      	mov	r3, r1
 8006256:	4610      	mov	r0, r2
 8006258:	4619      	mov	r1, r3
 800625a:	a343      	add	r3, pc, #268	; (adr r3, 8006368 <lowlayer_readSetPosition+0x148>)
 800625c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006260:	f7fa faf4 	bl	800084c <__aeabi_ddiv>
 8006264:	4602      	mov	r2, r0
 8006266:	460b      	mov	r3, r1
 8006268:	4620      	mov	r0, r4
 800626a:	4629      	mov	r1, r5
 800626c:	f7fa f80e 	bl	800028c <__adddf3>
 8006270:	4602      	mov	r2, r0
 8006272:	460b      	mov	r3, r1
 8006274:	6879      	ldr	r1, [r7, #4]
 8006276:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	setpoint->Theta2 = offset_setpoint[1] + pulse_accumulate[1]*2.0*PI/GEAR_J1;
 800627a:	4b3f      	ldr	r3, [pc, #252]	; (8006378 <lowlayer_readSetPosition+0x158>)
 800627c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8006280:	4b3e      	ldr	r3, [pc, #248]	; (800637c <lowlayer_readSetPosition+0x15c>)
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	4618      	mov	r0, r3
 8006286:	f7fa f94d 	bl	8000524 <__aeabi_i2d>
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	f7f9 fffd 	bl	800028c <__adddf3>
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	4610      	mov	r0, r2
 8006298:	4619      	mov	r1, r3
 800629a:	a331      	add	r3, pc, #196	; (adr r3, 8006360 <lowlayer_readSetPosition+0x140>)
 800629c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a0:	f7fa f9aa 	bl	80005f8 <__aeabi_dmul>
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	4610      	mov	r0, r2
 80062aa:	4619      	mov	r1, r3
 80062ac:	f04f 0200 	mov.w	r2, #0
 80062b0:	4b33      	ldr	r3, [pc, #204]	; (8006380 <lowlayer_readSetPosition+0x160>)
 80062b2:	f7fa facb 	bl	800084c <__aeabi_ddiv>
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4620      	mov	r0, r4
 80062bc:	4629      	mov	r1, r5
 80062be:	f7f9 ffe5 	bl	800028c <__adddf3>
 80062c2:	4602      	mov	r2, r0
 80062c4:	460b      	mov	r3, r1
 80062c6:	6879      	ldr	r1, [r7, #4]
 80062c8:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	setpoint->D3	 = offset_setpoint[2] + pulse_accumulate[2]/GEAR_J2;
 80062cc:	4b2a      	ldr	r3, [pc, #168]	; (8006378 <lowlayer_readSetPosition+0x158>)
 80062ce:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80062d2:	4b2a      	ldr	r3, [pc, #168]	; (800637c <lowlayer_readSetPosition+0x15c>)
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	ee07 3a90 	vmov	s15, r3
 80062da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062de:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8006384 <lowlayer_readSetPosition+0x164>
 80062e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80062e6:	ee16 0a90 	vmov	r0, s13
 80062ea:	f7fa f92d 	bl	8000548 <__aeabi_f2d>
 80062ee:	4602      	mov	r2, r0
 80062f0:	460b      	mov	r3, r1
 80062f2:	4620      	mov	r0, r4
 80062f4:	4629      	mov	r1, r5
 80062f6:	f7f9 ffc9 	bl	800028c <__adddf3>
 80062fa:	4602      	mov	r2, r0
 80062fc:	460b      	mov	r3, r1
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

	setpoint->Theta4 = offset_setpoint[3] + pulse_accumulate[3]*2.0*PI/GEAR_J3;
 8006304:	4b1c      	ldr	r3, [pc, #112]	; (8006378 <lowlayer_readSetPosition+0x158>)
 8006306:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800630a:	4b1c      	ldr	r3, [pc, #112]	; (800637c <lowlayer_readSetPosition+0x15c>)
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	4618      	mov	r0, r3
 8006310:	f7fa f908 	bl	8000524 <__aeabi_i2d>
 8006314:	4602      	mov	r2, r0
 8006316:	460b      	mov	r3, r1
 8006318:	f7f9 ffb8 	bl	800028c <__adddf3>
 800631c:	4602      	mov	r2, r0
 800631e:	460b      	mov	r3, r1
 8006320:	4610      	mov	r0, r2
 8006322:	4619      	mov	r1, r3
 8006324:	a30e      	add	r3, pc, #56	; (adr r3, 8006360 <lowlayer_readSetPosition+0x140>)
 8006326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632a:	f7fa f965 	bl	80005f8 <__aeabi_dmul>
 800632e:	4602      	mov	r2, r0
 8006330:	460b      	mov	r3, r1
 8006332:	4610      	mov	r0, r2
 8006334:	4619      	mov	r1, r3
 8006336:	a30e      	add	r3, pc, #56	; (adr r3, 8006370 <lowlayer_readSetPosition+0x150>)
 8006338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633c:	f7fa fa86 	bl	800084c <__aeabi_ddiv>
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	4620      	mov	r0, r4
 8006346:	4629      	mov	r1, r5
 8006348:	f7f9 ffa0 	bl	800028c <__adddf3>
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	6879      	ldr	r1, [r7, #4]
 8006352:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
}
 8006356:	bf00      	nop
 8006358:	3708      	adds	r7, #8
 800635a:	46bd      	mov	sp, r7
 800635c:	bdb0      	pop	{r4, r5, r7, pc}
 800635e:	bf00      	nop
 8006360:	60000000 	.word	0x60000000
 8006364:	400921fb 	.word	0x400921fb
 8006368:	00000000 	.word	0x00000000
 800636c:	40d38800 	.word	0x40d38800
 8006370:	a0000000 	.word	0xa0000000
 8006374:	40d3bca1 	.word	0x40d3bca1
 8006378:	2000ff08 	.word	0x2000ff08
 800637c:	2000fed0 	.word	0x2000fed0
 8006380:	40df4000 	.word	0x40df4000
 8006384:	42c80000 	.word	0x42c80000

08006388 <lowlayer_computeAndWritePulse>:

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 8006388:	b084      	sub	sp, #16
 800638a:	b580      	push	{r7, lr}
 800638c:	b092      	sub	sp, #72	; 0x48
 800638e:	af00      	add	r7, sp, #0
 8006390:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 8006394:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 8006398:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800639c:	a3c6      	add	r3, pc, #792	; (adr r3, 80066b8 <lowlayer_computeAndWritePulse+0x330>)
 800639e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a2:	f7f9 ff73 	bl	800028c <__adddf3>
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	4610      	mov	r0, r2
 80063ac:	4619      	mov	r1, r3
 80063ae:	a3c4      	add	r3, pc, #784	; (adr r3, 80066c0 <lowlayer_computeAndWritePulse+0x338>)
 80063b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b4:	f7fa f920 	bl	80005f8 <__aeabi_dmul>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	4610      	mov	r0, r2
 80063be:	4619      	mov	r1, r3
 80063c0:	a3b7      	add	r3, pc, #732	; (adr r3, 80066a0 <lowlayer_computeAndWritePulse+0x318>)
 80063c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c6:	f7fa fa41 	bl	800084c <__aeabi_ddiv>
 80063ca:	4602      	mov	r2, r0
 80063cc:	460b      	mov	r3, r1
 80063ce:	ec43 2b17 	vmov	d7, r2, r3
 80063d2:	eeb0 0a47 	vmov.f32	s0, s14
 80063d6:	eef0 0a67 	vmov.f32	s1, s15
 80063da:	f014 faf9 	bl	801a9d0 <round>
 80063de:	ec53 2b10 	vmov	r2, r3, d0
 80063e2:	4610      	mov	r0, r2
 80063e4:	4619      	mov	r1, r3
 80063e6:	f7fa fbdf 	bl	8000ba8 <__aeabi_d2uiz>
 80063ea:	4603      	mov	r3, r0
 80063ec:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 80063ee:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80063f2:	a3b5      	add	r3, pc, #724	; (adr r3, 80066c8 <lowlayer_computeAndWritePulse+0x340>)
 80063f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f8:	f7f9 ff48 	bl	800028c <__adddf3>
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	4610      	mov	r0, r2
 8006402:	4619      	mov	r1, r3
 8006404:	f04f 0200 	mov.w	r2, #0
 8006408:	4bb1      	ldr	r3, [pc, #708]	; (80066d0 <lowlayer_computeAndWritePulse+0x348>)
 800640a:	f7fa f8f5 	bl	80005f8 <__aeabi_dmul>
 800640e:	4602      	mov	r2, r0
 8006410:	460b      	mov	r3, r1
 8006412:	4610      	mov	r0, r2
 8006414:	4619      	mov	r1, r3
 8006416:	a3a2      	add	r3, pc, #648	; (adr r3, 80066a0 <lowlayer_computeAndWritePulse+0x318>)
 8006418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641c:	f7fa fa16 	bl	800084c <__aeabi_ddiv>
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	ec43 2b17 	vmov	d7, r2, r3
 8006428:	eeb0 0a47 	vmov.f32	s0, s14
 800642c:	eef0 0a67 	vmov.f32	s1, s15
 8006430:	f014 face 	bl	801a9d0 <round>
 8006434:	ec53 2b10 	vmov	r2, r3, d0
 8006438:	4610      	mov	r0, r2
 800643a:	4619      	mov	r1, r3
 800643c:	f7fa fbb4 	bl	8000ba8 <__aeabi_d2uiz>
 8006440:	4603      	mov	r3, r0
 8006442:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 8006444:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006448:	f04f 0200 	mov.w	r2, #0
 800644c:	4ba1      	ldr	r3, [pc, #644]	; (80066d4 <lowlayer_computeAndWritePulse+0x34c>)
 800644e:	f7fa f8d3 	bl	80005f8 <__aeabi_dmul>
 8006452:	4602      	mov	r2, r0
 8006454:	460b      	mov	r3, r1
 8006456:	ec43 2b17 	vmov	d7, r2, r3
 800645a:	eeb0 0a47 	vmov.f32	s0, s14
 800645e:	eef0 0a67 	vmov.f32	s1, s15
 8006462:	f014 fab5 	bl	801a9d0 <round>
 8006466:	ec53 2b10 	vmov	r2, r3, d0
 800646a:	4610      	mov	r0, r2
 800646c:	4619      	mov	r1, r3
 800646e:	f7fa fb9b 	bl	8000ba8 <__aeabi_d2uiz>
 8006472:	4603      	mov	r3, r0
 8006474:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 8006476:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800647a:	a38b      	add	r3, pc, #556	; (adr r3, 80066a8 <lowlayer_computeAndWritePulse+0x320>)
 800647c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006480:	f7f9 ff04 	bl	800028c <__adddf3>
 8006484:	4602      	mov	r2, r0
 8006486:	460b      	mov	r3, r1
 8006488:	4610      	mov	r0, r2
 800648a:	4619      	mov	r1, r3
 800648c:	a388      	add	r3, pc, #544	; (adr r3, 80066b0 <lowlayer_computeAndWritePulse+0x328>)
 800648e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006492:	f7fa f8b1 	bl	80005f8 <__aeabi_dmul>
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	4610      	mov	r0, r2
 800649c:	4619      	mov	r1, r3
 800649e:	a380      	add	r3, pc, #512	; (adr r3, 80066a0 <lowlayer_computeAndWritePulse+0x318>)
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	f7fa f9d2 	bl	800084c <__aeabi_ddiv>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	ec43 2b17 	vmov	d7, r2, r3
 80064b0:	eeb0 0a47 	vmov.f32	s0, s14
 80064b4:	eef0 0a67 	vmov.f32	s1, s15
 80064b8:	f014 fa8a 	bl	801a9d0 <round>
 80064bc:	ec53 2b10 	vmov	r2, r3, d0
 80064c0:	4610      	mov	r0, r2
 80064c2:	4619      	mov	r1, r3
 80064c4:	f7fa fb70 	bl	8000ba8 <__aeabi_d2uiz>
 80064c8:	4603      	mov	r3, r0
 80064ca:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 80064cc:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80064d0:	a379      	add	r3, pc, #484	; (adr r3, 80066b8 <lowlayer_computeAndWritePulse+0x330>)
 80064d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d6:	f7f9 fed9 	bl	800028c <__adddf3>
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	4610      	mov	r0, r2
 80064e0:	4619      	mov	r1, r3
 80064e2:	a377      	add	r3, pc, #476	; (adr r3, 80066c0 <lowlayer_computeAndWritePulse+0x338>)
 80064e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e8:	f7fa f886 	bl	80005f8 <__aeabi_dmul>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	4610      	mov	r0, r2
 80064f2:	4619      	mov	r1, r3
 80064f4:	a36a      	add	r3, pc, #424	; (adr r3, 80066a0 <lowlayer_computeAndWritePulse+0x318>)
 80064f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fa:	f7fa f9a7 	bl	800084c <__aeabi_ddiv>
 80064fe:	4602      	mov	r2, r0
 8006500:	460b      	mov	r3, r1
 8006502:	ec43 2b17 	vmov	d7, r2, r3
 8006506:	eeb0 0a47 	vmov.f32	s0, s14
 800650a:	eef0 0a67 	vmov.f32	s1, s15
 800650e:	f014 fa5f 	bl	801a9d0 <round>
 8006512:	ec53 2b10 	vmov	r2, r3, d0
 8006516:	4610      	mov	r0, r2
 8006518:	4619      	mov	r1, r3
 800651a:	f7fa fb45 	bl	8000ba8 <__aeabi_d2uiz>
 800651e:	4603      	mov	r3, r0
 8006520:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 8006522:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8006526:	a368      	add	r3, pc, #416	; (adr r3, 80066c8 <lowlayer_computeAndWritePulse+0x340>)
 8006528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652c:	f7f9 feae 	bl	800028c <__adddf3>
 8006530:	4602      	mov	r2, r0
 8006532:	460b      	mov	r3, r1
 8006534:	4610      	mov	r0, r2
 8006536:	4619      	mov	r1, r3
 8006538:	f04f 0200 	mov.w	r2, #0
 800653c:	4b64      	ldr	r3, [pc, #400]	; (80066d0 <lowlayer_computeAndWritePulse+0x348>)
 800653e:	f7fa f85b 	bl	80005f8 <__aeabi_dmul>
 8006542:	4602      	mov	r2, r0
 8006544:	460b      	mov	r3, r1
 8006546:	4610      	mov	r0, r2
 8006548:	4619      	mov	r1, r3
 800654a:	a355      	add	r3, pc, #340	; (adr r3, 80066a0 <lowlayer_computeAndWritePulse+0x318>)
 800654c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006550:	f7fa f97c 	bl	800084c <__aeabi_ddiv>
 8006554:	4602      	mov	r2, r0
 8006556:	460b      	mov	r3, r1
 8006558:	ec43 2b17 	vmov	d7, r2, r3
 800655c:	eeb0 0a47 	vmov.f32	s0, s14
 8006560:	eef0 0a67 	vmov.f32	s1, s15
 8006564:	f014 fa34 	bl	801a9d0 <round>
 8006568:	ec53 2b10 	vmov	r2, r3, d0
 800656c:	4610      	mov	r0, r2
 800656e:	4619      	mov	r1, r3
 8006570:	f7fa fb1a 	bl	8000ba8 <__aeabi_d2uiz>
 8006574:	4603      	mov	r3, r0
 8006576:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 8006578:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800657c:	f04f 0200 	mov.w	r2, #0
 8006580:	4b54      	ldr	r3, [pc, #336]	; (80066d4 <lowlayer_computeAndWritePulse+0x34c>)
 8006582:	f7fa f839 	bl	80005f8 <__aeabi_dmul>
 8006586:	4602      	mov	r2, r0
 8006588:	460b      	mov	r3, r1
 800658a:	ec43 2b17 	vmov	d7, r2, r3
 800658e:	eeb0 0a47 	vmov.f32	s0, s14
 8006592:	eef0 0a67 	vmov.f32	s1, s15
 8006596:	f014 fa1b 	bl	801a9d0 <round>
 800659a:	ec53 2b10 	vmov	r2, r3, d0
 800659e:	4610      	mov	r0, r2
 80065a0:	4619      	mov	r1, r3
 80065a2:	f7fa fb01 	bl	8000ba8 <__aeabi_d2uiz>
 80065a6:	4603      	mov	r3, r0
 80065a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 80065aa:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80065ae:	a33e      	add	r3, pc, #248	; (adr r3, 80066a8 <lowlayer_computeAndWritePulse+0x320>)
 80065b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b4:	f7f9 fe6a 	bl	800028c <__adddf3>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4610      	mov	r0, r2
 80065be:	4619      	mov	r1, r3
 80065c0:	a33b      	add	r3, pc, #236	; (adr r3, 80066b0 <lowlayer_computeAndWritePulse+0x328>)
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	f7fa f817 	bl	80005f8 <__aeabi_dmul>
 80065ca:	4602      	mov	r2, r0
 80065cc:	460b      	mov	r3, r1
 80065ce:	4610      	mov	r0, r2
 80065d0:	4619      	mov	r1, r3
 80065d2:	a333      	add	r3, pc, #204	; (adr r3, 80066a0 <lowlayer_computeAndWritePulse+0x318>)
 80065d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d8:	f7fa f938 	bl	800084c <__aeabi_ddiv>
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	ec43 2b17 	vmov	d7, r2, r3
 80065e4:	eeb0 0a47 	vmov.f32	s0, s14
 80065e8:	eef0 0a67 	vmov.f32	s1, s15
 80065ec:	f014 f9f0 	bl	801a9d0 <round>
 80065f0:	ec53 2b10 	vmov	r2, r3, d0
 80065f4:	4610      	mov	r0, r2
 80065f6:	4619      	mov	r1, r3
 80065f8:	f7fa fad6 	bl	8000ba8 <__aeabi_d2uiz>
 80065fc:	4603      	mov	r3, r0
 80065fe:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 8006600:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	461a      	mov	r2, r3
 8006608:	f04f 0300 	mov.w	r3, #0
 800660c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 8006610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	461a      	mov	r2, r3
 8006618:	f04f 0300 	mov.w	r3, #0
 800661c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 8006620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	461a      	mov	r2, r3
 8006628:	f04f 0300 	mov.w	r3, #0
 800662c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 8006630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	461a      	mov	r2, r3
 8006638:	f04f 0300 	mov.w	r3, #0
 800663c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (abs(delta_var0) > 127
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	2b00      	cmp	r3, #0
 8006644:	bfb8      	it	lt
 8006646:	425b      	neglt	r3, r3
 8006648:	2b7f      	cmp	r3, #127	; 0x7f
 800664a:	dc11      	bgt.n	8006670 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var1) > 127
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	2b00      	cmp	r3, #0
 8006650:	bfb8      	it	lt
 8006652:	425b      	neglt	r3, r3
 8006654:	2b7f      	cmp	r3, #127	; 0x7f
 8006656:	dc0b      	bgt.n	8006670 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var2) > 127
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	2b00      	cmp	r3, #0
 800665c:	bfb8      	it	lt
 800665e:	425b      	neglt	r3, r3
 8006660:	2b7f      	cmp	r3, #127	; 0x7f
 8006662:	dc05      	bgt.n	8006670 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var3) > 127) {
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	bfb8      	it	lt
 800666a:	425b      	neglt	r3, r3
 800666c:	2b7f      	cmp	r3, #127	; 0x7f
 800666e:	dd01      	ble.n	8006674 <lowlayer_computeAndWritePulse+0x2ec>
		return FALSE;
 8006670:	2300      	movs	r3, #0
 8006672:	e00c      	b.n	800668e <lowlayer_computeAndWritePulse+0x306>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 8006674:	f997 0020 	ldrsb.w	r0, [r7, #32]
 8006678:	f997 1018 	ldrsb.w	r1, [r7, #24]
 800667c:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8006680:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8006684:	f000 f828 	bl	80066d8 <lowlayer_writePulse>
 8006688:	4603      	mov	r3, r0
 800668a:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 800668c:	79fb      	ldrb	r3, [r7, #7]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3748      	adds	r7, #72	; 0x48
 8006692:	46bd      	mov	sp, r7
 8006694:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006698:	b004      	add	sp, #16
 800669a:	4770      	bx	lr
 800669c:	f3af 8000 	nop.w
 80066a0:	60000000 	.word	0x60000000
 80066a4:	401921fb 	.word	0x401921fb
 80066a8:	daaaaaab 	.word	0xdaaaaaab
 80066ac:	4007bc89 	.word	0x4007bc89
 80066b0:	a0000000 	.word	0xa0000000
 80066b4:	40d3bca1 	.word	0x40d3bca1
 80066b8:	daaaaaab 	.word	0xdaaaaaab
 80066bc:	3ff7bc89 	.word	0x3ff7bc89
 80066c0:	00000000 	.word	0x00000000
 80066c4:	40d38800 	.word	0x40d38800
 80066c8:	88000000 	.word	0x88000000
 80066cc:	4002d97c 	.word	0x4002d97c
 80066d0:	40df4000 	.word	0x40df4000
 80066d4:	40590000 	.word	0x40590000

080066d8 <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 80066d8:	b590      	push	{r4, r7, lr}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	4604      	mov	r4, r0
 80066e0:	4608      	mov	r0, r1
 80066e2:	4611      	mov	r1, r2
 80066e4:	461a      	mov	r2, r3
 80066e6:	4623      	mov	r3, r4
 80066e8:	71fb      	strb	r3, [r7, #7]
 80066ea:	4603      	mov	r3, r0
 80066ec:	71bb      	strb	r3, [r7, #6]
 80066ee:	460b      	mov	r3, r1
 80066f0:	717b      	strb	r3, [r7, #5]
 80066f2:	4613      	mov	r3, r2
 80066f4:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 80066f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	da06      	bge.n	800670c <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 80066fe:	79fb      	ldrb	r3, [r7, #7]
 8006700:	425b      	negs	r3, r3
 8006702:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 8006704:	79fb      	ldrb	r3, [r7, #7]
 8006706:	425b      	negs	r3, r3
 8006708:	75fb      	strb	r3, [r7, #23]
 800670a:	e006      	b.n	800671a <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 800670c:	79fb      	ldrb	r3, [r7, #7]
 800670e:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 8006710:	79fb      	ldrb	r3, [r7, #7]
 8006712:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006716:	b25b      	sxtb	r3, r3
 8006718:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 800671a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800671e:	2b00      	cmp	r3, #0
 8006720:	da06      	bge.n	8006730 <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 8006722:	79bb      	ldrb	r3, [r7, #6]
 8006724:	425b      	negs	r3, r3
 8006726:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 8006728:	79bb      	ldrb	r3, [r7, #6]
 800672a:	425b      	negs	r3, r3
 800672c:	75bb      	strb	r3, [r7, #22]
 800672e:	e006      	b.n	800673e <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 8006730:	79bb      	ldrb	r3, [r7, #6]
 8006732:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 8006734:	79bb      	ldrb	r3, [r7, #6]
 8006736:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800673a:	b25b      	sxtb	r3, r3
 800673c:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 800673e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006742:	2b00      	cmp	r3, #0
 8006744:	da0b      	bge.n	800675e <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 8006746:	797b      	ldrb	r3, [r7, #5]
 8006748:	425b      	negs	r3, r3
 800674a:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 800674c:	797b      	ldrb	r3, [r7, #5]
 800674e:	425b      	negs	r3, r3
 8006750:	b2db      	uxtb	r3, r3
 8006752:	b25b      	sxtb	r3, r3
 8006754:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006758:	b25b      	sxtb	r3, r3
 800675a:	757b      	strb	r3, [r7, #21]
 800675c:	e003      	b.n	8006766 <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 800675e:	797b      	ldrb	r3, [r7, #5]
 8006760:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 8006762:	797b      	ldrb	r3, [r7, #5]
 8006764:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 8006766:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	da06      	bge.n	800677c <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 800676e:	793b      	ldrb	r3, [r7, #4]
 8006770:	425b      	negs	r3, r3
 8006772:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 8006774:	793b      	ldrb	r3, [r7, #4]
 8006776:	425b      	negs	r3, r3
 8006778:	753b      	strb	r3, [r7, #20]
 800677a:	e006      	b.n	800678a <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 800677c:	793b      	ldrb	r3, [r7, #4]
 800677e:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 8006780:	793b      	ldrb	r3, [r7, #4]
 8006782:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006786:	b25b      	sxtb	r3, r3
 8006788:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 800678a:	7cfb      	ldrb	r3, [r7, #19]
 800678c:	2b4b      	cmp	r3, #75	; 0x4b
 800678e:	d808      	bhi.n	80067a2 <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 8006790:	7cbb      	ldrb	r3, [r7, #18]
 8006792:	2b78      	cmp	r3, #120	; 0x78
 8006794:	d805      	bhi.n	80067a2 <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 8006796:	7c7b      	ldrb	r3, [r7, #17]
 8006798:	2b7d      	cmp	r3, #125	; 0x7d
 800679a:	d802      	bhi.n	80067a2 <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 800679c:	7c3b      	ldrb	r3, [r7, #16]
 800679e:	2b65      	cmp	r3, #101	; 0x65
 80067a0:	d901      	bls.n	80067a6 <lowlayer_writePulse+0xce>
		return FALSE;
 80067a2:	2300      	movs	r3, #0
 80067a4:	e04b      	b.n	800683e <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 80067a6:	2200      	movs	r2, #0
 80067a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80067ac:	4826      	ldr	r0, [pc, #152]	; (8006848 <lowlayer_writePulse+0x170>)
 80067ae:	f005 fdc3 	bl	800c338 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 80067b2:	2200      	movs	r2, #0
 80067b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80067b8:	4824      	ldr	r0, [pc, #144]	; (800684c <lowlayer_writePulse+0x174>)
 80067ba:	f005 fdbd 	bl	800c338 <HAL_GPIO_WritePin>
	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 80067be:	7dfb      	ldrb	r3, [r7, #23]
 80067c0:	4619      	mov	r1, r3
 80067c2:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 80067c6:	f7fe f811 	bl	80047ec <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 80067ca:	7dbb      	ldrb	r3, [r7, #22]
 80067cc:	4619      	mov	r1, r3
 80067ce:	4820      	ldr	r0, [pc, #128]	; (8006850 <lowlayer_writePulse+0x178>)
 80067d0:	f7fe f80c 	bl	80047ec <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 80067d4:	7d7b      	ldrb	r3, [r7, #21]
 80067d6:	4619      	mov	r1, r3
 80067d8:	481e      	ldr	r0, [pc, #120]	; (8006854 <lowlayer_writePulse+0x17c>)
 80067da:	f7fe f807 	bl	80047ec <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 80067de:	7d3b      	ldrb	r3, [r7, #20]
 80067e0:	4619      	mov	r1, r3
 80067e2:	481d      	ldr	r0, [pc, #116]	; (8006858 <lowlayer_writePulse+0x180>)
 80067e4:	f7fe f802 	bl	80047ec <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 80067e8:	2364      	movs	r3, #100	; 0x64
 80067ea:	73fb      	strb	r3, [r7, #15]
	
	 while (delay--);
 80067ec:	bf00      	nop
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
 80067f0:	1e5a      	subs	r2, r3, #1
 80067f2:	73fa      	strb	r2, [r7, #15]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1fa      	bne.n	80067ee <lowlayer_writePulse+0x116>

//	int16_t wow = HAL_GPIO_ReadPin(CPLD_BUSY_GPIO_Port, CPLD_BUSY_Pin);
//	LOG_REPORT(" Busy: ", wow);
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 80067f8:	2201      	movs	r2, #1
 80067fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80067fe:	4813      	ldr	r0, [pc, #76]	; (800684c <lowlayer_writePulse+0x174>)
 8006800:	f005 fd9a 	bl	800c338 <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 8006804:	4b15      	ldr	r3, [pc, #84]	; (800685c <lowlayer_writePulse+0x184>)
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800680c:	4413      	add	r3, r2
 800680e:	4a13      	ldr	r2, [pc, #76]	; (800685c <lowlayer_writePulse+0x184>)
 8006810:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 8006812:	4b12      	ldr	r3, [pc, #72]	; (800685c <lowlayer_writePulse+0x184>)
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800681a:	4413      	add	r3, r2
 800681c:	4a0f      	ldr	r2, [pc, #60]	; (800685c <lowlayer_writePulse+0x184>)
 800681e:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 8006820:	4b0e      	ldr	r3, [pc, #56]	; (800685c <lowlayer_writePulse+0x184>)
 8006822:	689a      	ldr	r2, [r3, #8]
 8006824:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006828:	4413      	add	r3, r2
 800682a:	4a0c      	ldr	r2, [pc, #48]	; (800685c <lowlayer_writePulse+0x184>)
 800682c:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 800682e:	4b0b      	ldr	r3, [pc, #44]	; (800685c <lowlayer_writePulse+0x184>)
 8006830:	68da      	ldr	r2, [r3, #12]
 8006832:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8006836:	4413      	add	r3, r2
 8006838:	4a08      	ldr	r2, [pc, #32]	; (800685c <lowlayer_writePulse+0x184>)
 800683a:	60d3      	str	r3, [r2, #12]

	return TRUE;
 800683c:	2301      	movs	r3, #1
}
 800683e:	4618      	mov	r0, r3
 8006840:	371c      	adds	r7, #28
 8006842:	46bd      	mov	sp, r7
 8006844:	bd90      	pop	{r4, r7, pc}
 8006846:	bf00      	nop
 8006848:	40020000 	.word	0x40020000
 800684c:	40020c00 	.word	0x40020c00
 8006850:	60000002 	.word	0x60000002
 8006854:	60000004 	.word	0x60000004
 8006858:	60000006 	.word	0x60000006
 800685c:	2000fed0 	.word	0x2000fed0

08006860 <lowlayer_resetEncoder>:

void	lowlayer_resetEncoder(void) {
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
	// Trigger
	uint8_t delay = 100;
 8006866:	2364      	movs	r3, #100	; 0x64
 8006868:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
 800686a:	2201      	movs	r2, #1
 800686c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006870:	4809      	ldr	r0, [pc, #36]	; (8006898 <lowlayer_resetEncoder+0x38>)
 8006872:	f005 fd61 	bl	800c338 <HAL_GPIO_WritePin>
	while (delay--);
 8006876:	bf00      	nop
 8006878:	79fb      	ldrb	r3, [r7, #7]
 800687a:	1e5a      	subs	r2, r3, #1
 800687c:	71fa      	strb	r2, [r7, #7]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1fa      	bne.n	8006878 <lowlayer_resetEncoder+0x18>
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
 8006882:	2200      	movs	r2, #0
 8006884:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006888:	4803      	ldr	r0, [pc, #12]	; (8006898 <lowlayer_resetEncoder+0x38>)
 800688a:	f005 fd55 	bl	800c338 <HAL_GPIO_WritePin>
}
 800688e:	bf00      	nop
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	40020c00 	.word	0x40020c00

0800689c <lowlayer_readLimitSwitch>:

uint8_t lowlayer_readLimitSwitch(void) {
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 80068a2:	4805      	ldr	r0, [pc, #20]	; (80068b8 <lowlayer_readLimitSwitch+0x1c>)
 80068a4:	f7fd ffb1 	bl	800480a <FSMC_Read>
 80068a8:	4603      	mov	r3, r0
 80068aa:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 80068ac:	88fb      	ldrh	r3, [r7, #6]
 80068ae:	b2db      	uxtb	r3, r3
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	60000020 	.word	0x60000020

080068bc <lowlayer_readEncoder>:

int32_t lowlayer_readEncoder(uint8_t encoder_num) {
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	4603      	mov	r3, r0
 80068c4:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (encoder_num <= 2) {
 80068c6:	79fb      	ldrb	r3, [r7, #7]
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d81c      	bhi.n	8006906 <lowlayer_readEncoder+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4);
 80068cc:	79fb      	ldrb	r3, [r7, #7]
 80068ce:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80068d2:	3310      	adds	r3, #16
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fd ff97 	bl	800480a <FSMC_Read>
 80068dc:	4603      	mov	r3, r0
 80068de:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4 + 2);
 80068e0:	79fb      	ldrb	r3, [r7, #7]
 80068e2:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80068e6:	3310      	adds	r3, #16
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	3302      	adds	r3, #2
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7fd ff8c 	bl	800480a <FSMC_Read>
 80068f2:	4603      	mov	r3, r0
 80068f4:	813b      	strh	r3, [r7, #8]
		data = high_word;
 80068f6:	893b      	ldrh	r3, [r7, #8]
 80068f8:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	041a      	lsls	r2, r3, #16
 80068fe:	897b      	ldrh	r3, [r7, #10]
 8006900:	4313      	orrs	r3, r2
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	e001      	b.n	800690a <lowlayer_readEncoder+0x4e>
	} else {
		data = 0;
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]
	}
	return data;
 800690a:	68fb      	ldr	r3, [r7, #12]
}
 800690c:	4618      	mov	r0, r3
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <lowlayer_readCapture>:

int32_t lowlayer_readCapture(uint8_t capture_num) {
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	4603      	mov	r3, r0
 800691c:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 800691e:	79fb      	ldrb	r3, [r7, #7]
 8006920:	2b02      	cmp	r3, #2
 8006922:	d81c      	bhi.n	800695e <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 8006924:	79fb      	ldrb	r3, [r7, #7]
 8006926:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 800692a:	3318      	adds	r3, #24
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4618      	mov	r0, r3
 8006930:	f7fd ff6b 	bl	800480a <FSMC_Read>
 8006934:	4603      	mov	r3, r0
 8006936:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 8006938:	79fb      	ldrb	r3, [r7, #7]
 800693a:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 800693e:	3318      	adds	r3, #24
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	3302      	adds	r3, #2
 8006944:	4618      	mov	r0, r3
 8006946:	f7fd ff60 	bl	800480a <FSMC_Read>
 800694a:	4603      	mov	r3, r0
 800694c:	813b      	strh	r3, [r7, #8]
		data = high_word;
 800694e:	893b      	ldrh	r3, [r7, #8]
 8006950:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	041a      	lsls	r2, r3, #16
 8006956:	897b      	ldrh	r3, [r7, #10]
 8006958:	4313      	orrs	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]
 800695c:	e001      	b.n	8006962 <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 800695e:	2300      	movs	r3, #0
 8006960:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8006962:	68fb      	ldr	r3, [r7, #12]
}
 8006964:	4618      	mov	r0, r3
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <lowlayer_updateEncoder>:

void	lowlayer_updateEncoder(void) {
 800696c:	b590      	push	{r4, r7, lr}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8006972:	2300      	movs	r3, #0
 8006974:	71fb      	strb	r3, [r7, #7]
 8006976:	e00b      	b.n	8006990 <lowlayer_updateEncoder+0x24>
		position_encoder[i] = lowlayer_readEncoder(i);
 8006978:	79fc      	ldrb	r4, [r7, #7]
 800697a:	79fb      	ldrb	r3, [r7, #7]
 800697c:	4618      	mov	r0, r3
 800697e:	f7ff ff9d 	bl	80068bc <lowlayer_readEncoder>
 8006982:	4603      	mov	r3, r0
 8006984:	4a06      	ldr	r2, [pc, #24]	; (80069a0 <lowlayer_updateEncoder+0x34>)
 8006986:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 800698a:	79fb      	ldrb	r3, [r7, #7]
 800698c:	3301      	adds	r3, #1
 800698e:	71fb      	strb	r3, [r7, #7]
 8006990:	79fb      	ldrb	r3, [r7, #7]
 8006992:	2b02      	cmp	r3, #2
 8006994:	d9f0      	bls.n	8006978 <lowlayer_updateEncoder+0xc>
	}
}
 8006996:	bf00      	nop
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	bd90      	pop	{r4, r7, pc}
 80069a0:	2000fee4 	.word	0x2000fee4

080069a4 <lowlayer_updateCapture>:

void	lowlayer_updateCapture(void) {
 80069a4:	b590      	push	{r4, r7, lr}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 80069aa:	2300      	movs	r3, #0
 80069ac:	71fb      	strb	r3, [r7, #7]
 80069ae:	e00b      	b.n	80069c8 <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 80069b0:	79fc      	ldrb	r4, [r7, #7]
 80069b2:	79fb      	ldrb	r3, [r7, #7]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7ff ffad 	bl	8006914 <lowlayer_readCapture>
 80069ba:	4603      	mov	r3, r0
 80069bc:	4a06      	ldr	r2, [pc, #24]	; (80069d8 <lowlayer_updateCapture+0x34>)
 80069be:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 80069c2:	79fb      	ldrb	r3, [r7, #7]
 80069c4:	3301      	adds	r3, #1
 80069c6:	71fb      	strb	r3, [r7, #7]
 80069c8:	79fb      	ldrb	r3, [r7, #7]
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d9f0      	bls.n	80069b0 <lowlayer_updateCapture+0xc>
	}
}
 80069ce:	bf00      	nop
 80069d0:	bf00      	nop
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd90      	pop	{r4, r7, pc}
 80069d8:	2000fef4 	.word	0x2000fef4

080069dc <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 80069e2:	f7ff ff5b 	bl	800689c <lowlayer_readLimitSwitch>
 80069e6:	4603      	mov	r3, r0
 80069e8:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 80069ea:	2300      	movs	r3, #0
 80069ec:	71fb      	strb	r3, [r7, #7]
 80069ee:	e00d      	b.n	8006a0c <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 80069f0:	79ba      	ldrb	r2, [r7, #6]
 80069f2:	79fb      	ldrb	r3, [r7, #7]
 80069f4:	fa42 f303 	asr.w	r3, r2, r3
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	79fb      	ldrb	r3, [r7, #7]
 80069fc:	f002 0201 	and.w	r2, r2, #1
 8006a00:	b2d1      	uxtb	r1, r2
 8006a02:	4a06      	ldr	r2, [pc, #24]	; (8006a1c <lowlayer_updateLimit+0x40>)
 8006a04:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 8006a06:	79fb      	ldrb	r3, [r7, #7]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	71fb      	strb	r3, [r7, #7]
 8006a0c:	79fb      	ldrb	r3, [r7, #7]
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d9ee      	bls.n	80069f0 <lowlayer_updateLimit+0x14>
	}
}
 8006a12:	bf00      	nop
 8006a14:	bf00      	nop
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	2000fef0 	.word	0x2000fef0

08006a20 <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	4603      	mov	r3, r0
 8006a28:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 8006a2a:	79fb      	ldrb	r3, [r7, #7]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d006      	beq.n	8006a3e <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 8006a30:	2201      	movs	r2, #1
 8006a32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a36:	4807      	ldr	r0, [pc, #28]	; (8006a54 <lowlayer_setOutput+0x34>)
 8006a38:	f005 fc7e 	bl	800c338 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 8006a3c:	e005      	b.n	8006a4a <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a44:	4803      	ldr	r0, [pc, #12]	; (8006a54 <lowlayer_setOutput+0x34>)
 8006a46:	f005 fc77 	bl	800c338 <HAL_GPIO_WritePin>
}
 8006a4a:	bf00      	nop
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	40020400 	.word	0x40020400

08006a58 <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	2140      	movs	r1, #64	; 0x40
 8006a60:	4802      	ldr	r0, [pc, #8]	; (8006a6c <lowlayer_CPLD_Init+0x14>)
 8006a62:	f005 fc69 	bl	800c338 <HAL_GPIO_WritePin>
}
 8006a66:	bf00      	nop
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	40020c00 	.word	0x40020c00

08006a70 <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 8006a70:	b580      	push	{r7, lr}
 8006a72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 8006a74:	2201      	movs	r2, #1
 8006a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a7a:	4808      	ldr	r0, [pc, #32]	; (8006a9c <lowlayer_stepMotorInit+0x2c>)
 8006a7c:	f005 fc5c 	bl	800c338 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 8006a80:	2201      	movs	r2, #1
 8006a82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a86:	4805      	ldr	r0, [pc, #20]	; (8006a9c <lowlayer_stepMotorInit+0x2c>)
 8006a88:	f005 fc56 	bl	800c338 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a92:	4802      	ldr	r0, [pc, #8]	; (8006a9c <lowlayer_stepMotorInit+0x2c>)
 8006a94:	f005 fc50 	bl	800c338 <HAL_GPIO_WritePin>
}
 8006a98:	bf00      	nop
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	40020000 	.word	0x40020000

08006aa0 <scaraStartup>:
//SCARA_Gcode_Cor_TypeDef		Gcode_Cor[125];

Trajectory_TargetTypeDef	joint_taget[4] = {  TRAJECTORY_J0, TRAJECTORY_J1,
												TRAJECTORY_J2, TRAJECTORY_J3};

void				scaraStartup(void) {
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	scaraSetScanFlag();
#endif
	lowlayer_CPLD_Init();
 8006aa4:	f7ff ffd8 	bl	8006a58 <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 8006aa8:	f7ff ffe2 	bl	8006a70 <lowlayer_stepMotorInit>
	lowlayer_resetEncoder();
 8006aac:	f7ff fed8 	bl	8006860 <lowlayer_resetEncoder>
	//lowlayer_writePulse(0, 0, 0, 0);
}
 8006ab0:	bf00      	nop
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	0000      	movs	r0, r0
	...

08006ab8 <scaraInitDuty>:
	return SCARA_STATUS_OK;
	
}

/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 8006ab8:	b084      	sub	sp, #16
 8006aba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006abc:	ed2d 8b02 	vpush	{d8}
 8006ac0:	f5ad 7d7d 	sub.w	sp, sp, #1012	; 0x3f4
 8006ac4:	af90      	add	r7, sp, #576	; 0x240
 8006ac6:	f507 74e8 	add.w	r4, r7, #464	; 0x1d0
 8006aca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if(DUTY_SPACE_TASK == command.space_type) {
 8006ace:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f040 8359 	bne.w	800718a <scaraInitDuty+0x6d2>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 8006ad8:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 8006adc:	a3bd      	add	r3, pc, #756	; (adr r3, 8006dd4 <scaraInitDuty+0x31c>)
 8006ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae2:	f7f9 fd89 	bl	80005f8 <__aeabi_dmul>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	460b      	mov	r3, r1
 8006aea:	4610      	mov	r0, r2
 8006aec:	4619      	mov	r1, r3
 8006aee:	f04f 0200 	mov.w	r2, #0
 8006af2:	4bb1      	ldr	r3, [pc, #708]	; (8006db8 <scaraInitDuty+0x300>)
 8006af4:	f7f9 feaa 	bl	800084c <__aeabi_ddiv>
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8006b00:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d134      	bne.n	8006b72 <scaraInitDuty+0xba>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 8006b08:	4bac      	ldr	r3, [pc, #688]	; (8006dbc <scaraInitDuty+0x304>)
 8006b0a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006b0e:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006b12:	f7f9 fbbb 	bl	800028c <__adddf3>
 8006b16:	4602      	mov	r2, r0
 8006b18:	460b      	mov	r3, r1
 8006b1a:	f107 0108 	add.w	r1, r7, #8
 8006b1e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= positionCurrent.y + command.target_point.y;
 8006b22:	4ba6      	ldr	r3, [pc, #664]	; (8006dbc <scaraInitDuty+0x304>)
 8006b24:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006b28:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8006b2c:	f7f9 fbae 	bl	800028c <__adddf3>
 8006b30:	4602      	mov	r2, r0
 8006b32:	460b      	mov	r3, r1
 8006b34:	f107 0108 	add.w	r1, r7, #8
 8006b38:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8006b3c:	4b9f      	ldr	r3, [pc, #636]	; (8006dbc <scaraInitDuty+0x304>)
 8006b3e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8006b42:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8006b46:	f7f9 fba1 	bl	800028c <__adddf3>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	f107 0108 	add.w	r1, r7, #8
 8006b52:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8006b56:	4b99      	ldr	r3, [pc, #612]	; (8006dbc <scaraInitDuty+0x304>)
 8006b58:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8006b5c:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8006b60:	f7f9 fb94 	bl	800028c <__adddf3>
 8006b64:	4602      	mov	r2, r0
 8006b66:	460b      	mov	r3, r1
 8006b68:	f107 0108 	add.w	r1, r7, #8
 8006b6c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8006b70:	e01f      	b.n	8006bb2 <scaraInitDuty+0xfa>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8006b72:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d118      	bne.n	8006bac <scaraInitDuty+0xf4>
			target_point.x 		= command.target_point.x;
 8006b7a:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006b7e:	f107 0108 	add.w	r1, r7, #8
 8006b82:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= command.target_point.y;
 8006b86:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8006b8a:	f107 0108 	add.w	r1, r7, #8
 8006b8e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= command.target_point.z;
 8006b92:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8006b96:	f107 0108 	add.w	r1, r7, #8
 8006b9a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= command.target_point.roll;
 8006b9e:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8006ba2:	f107 0108 	add.w	r1, r7, #8
 8006ba6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8006baa:	e002      	b.n	8006bb2 <scaraInitDuty+0xfa>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8006bac:	230c      	movs	r3, #12
 8006bae:	f000 be95 	b.w	80078dc <scaraInitDuty+0xe24>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 8006bb2:	f107 0308 	add.w	r3, r7, #8
 8006bb6:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8006bba:	4b80      	ldr	r3, [pc, #512]	; (8006dbc <scaraInitDuty+0x304>)
 8006bbc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006bc0:	f7f9 fb62 	bl	8000288 <__aeabi_dsub>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
		dir_angle = 1;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
		if ( angle_s < 0) {
 8006bd2:	f04f 0200 	mov.w	r2, #0
 8006bd6:	f04f 0300 	mov.w	r3, #0
 8006bda:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8006bde:	f7f9 ff7d 	bl	8000adc <__aeabi_dcmplt>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d002      	beq.n	8006bee <scaraInitDuty+0x136>
			dir_angle = -1;
 8006be8:	23ff      	movs	r3, #255	; 0xff
 8006bea:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
//		if(positionCurrent.roll + angle_s < -3.14 || positionCurrent.roll + angle_s > 3.14){
//			dir_angle = -dir_angle;
//			angle_s = (2*PI - fabs(angle_s))*dir_angle;
//		}

		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 8006bee:	4b74      	ldr	r3, [pc, #464]	; (8006dc0 <scaraInitDuty+0x308>)
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 8006bf4:	4b71      	ldr	r3, [pc, #452]	; (8006dbc <scaraInitDuty+0x304>)
 8006bf6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006bfa:	4971      	ldr	r1, [pc, #452]	; (8006dc0 <scaraInitDuty+0x308>)
 8006bfc:	f501 6182 	add.w	r1, r1, #1040	; 0x410
 8006c00:	e9c1 2300 	strd	r2, r3, [r1]
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 8006c04:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d120      	bne.n	8006c4e <scaraInitDuty+0x196>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 8006c0c:	4b6c      	ldr	r3, [pc, #432]	; (8006dc0 <scaraInitDuty+0x308>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 8006c12:	4c6a      	ldr	r4, [pc, #424]	; (8006dbc <scaraInitDuty+0x304>)
 8006c14:	f107 0208 	add.w	r2, r7, #8
 8006c18:	ab2e      	add	r3, sp, #184	; 0xb8
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	22c0      	movs	r2, #192	; 0xc0
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f00f f9a6 	bl	8015f70 <memcpy>
 8006c24:	4668      	mov	r0, sp
 8006c26:	f104 0308 	add.w	r3, r4, #8
 8006c2a:	22b8      	movs	r2, #184	; 0xb8
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	f00f f99f 	bl	8015f70 <memcpy>
 8006c32:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006c36:	4863      	ldr	r0, [pc, #396]	; (8006dc4 <scaraInitDuty+0x30c>)
 8006c38:	f000 fe64 	bl	8007904 <scaraInitLine>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
			total_s = myDUTY.task.path.line.total_s;
 8006c42:	4b5f      	ldr	r3, [pc, #380]	; (8006dc0 <scaraInitDuty+0x308>)
 8006c44:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006c48:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
 8006c4c:	e053      	b.n	8006cf6 <scaraInitDuty+0x23e>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 8006c4e:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d14c      	bne.n	8006cf0 <scaraInitDuty+0x238>
			SCARA_PositionTypeDef	center_point;
			target_point.z = positionCurrent.z;
 8006c56:	4b59      	ldr	r3, [pc, #356]	; (8006dbc <scaraInitDuty+0x304>)
 8006c58:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006c5c:	f107 0108 	add.w	r1, r7, #8
 8006c60:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

			center_point.x 		= positionCurrent.x + command.sub_point.x;
 8006c64:	4b55      	ldr	r3, [pc, #340]	; (8006dbc <scaraInitDuty+0x304>)
 8006c66:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006c6a:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8006c6e:	f7f9 fb0d 	bl	800028c <__adddf3>
 8006c72:	4602      	mov	r2, r0
 8006c74:	460b      	mov	r3, r1
 8006c76:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			center_point.y 		= positionCurrent.y + command.sub_point.y;
 8006c7a:	4b50      	ldr	r3, [pc, #320]	; (8006dbc <scaraInitDuty+0x304>)
 8006c7c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006c80:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8006c84:	f7f9 fb02 	bl	800028c <__adddf3>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			center_point.z 		= positionCurrent.z;
 8006c90:	4b4a      	ldr	r3, [pc, #296]	; (8006dbc <scaraInitDuty+0x304>)
 8006c92:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006c96:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 8006c9a:	4b49      	ldr	r3, [pc, #292]	; (8006dc0 <scaraInitDuty+0x308>)
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 8006ca0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006ca4:	4c45      	ldr	r4, [pc, #276]	; (8006dbc <scaraInitDuty+0x304>)
 8006ca6:	938e      	str	r3, [sp, #568]	; 0x238
 8006ca8:	a85e      	add	r0, sp, #376	; 0x178
 8006caa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006cae:	22c0      	movs	r2, #192	; 0xc0
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	f00f f95d 	bl	8015f70 <memcpy>
 8006cb6:	f107 0208 	add.w	r2, r7, #8
 8006cba:	ab2e      	add	r3, sp, #184	; 0xb8
 8006cbc:	4611      	mov	r1, r2
 8006cbe:	22c0      	movs	r2, #192	; 0xc0
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f00f f955 	bl	8015f70 <memcpy>
 8006cc6:	4668      	mov	r0, sp
 8006cc8:	f104 0308 	add.w	r3, r4, #8
 8006ccc:	22b8      	movs	r2, #184	; 0xb8
 8006cce:	4619      	mov	r1, r3
 8006cd0:	f00f f94e 	bl	8015f70 <memcpy>
 8006cd4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006cd8:	483b      	ldr	r0, [pc, #236]	; (8006dc8 <scaraInitDuty+0x310>)
 8006cda:	f000 fec9 	bl	8007a70 <scaraInitCircle>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
										positionCurrent,
										target_point,
										center_point,
										command.arc_dir );
			total_s = myDUTY.task.path.circle.total_s;
 8006ce4:	4b36      	ldr	r3, [pc, #216]	; (8006dc0 <scaraInitDuty+0x308>)
 8006ce6:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8006cea:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
 8006cee:	e002      	b.n	8006cf6 <scaraInitDuty+0x23e>
//		}else if(DUTY_PATH_BEZIER_CURVE == command.path_type){
//			myDUTY.task.path.path_type = DUTY_PATH_BEZIER_CURVE;
//			myDUTY.task.path.line.z0 = command.target_point.z;
//		}
		}else {
			return SCARA_STATUS_ERROR_TASK;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	f000 bdf3 	b.w	80078dc <scaraInitDuty+0xe24>
		}

		if ( SCARA_STATUS_OK != status) {
 8006cf6:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <scaraInitDuty+0x24e>
			return status;
 8006cfe:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8006d02:	f000 bdeb 	b.w	80078dc <scaraInitDuty+0xe24>
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 8006d06:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f040 80bb 	bne.w	8006e86 <scaraInitDuty+0x3ce>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006d10:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d161      	bne.n	8006ddc <scaraInitDuty+0x324>
				//myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006d18:	4b29      	ldr	r3, [pc, #164]	; (8006dc0 <scaraInitDuty+0x308>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB1(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8006d20:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006d24:	ed97 6b7c 	vldr	d6, [r7, #496]	; 0x1f0
 8006d28:	eeb0 2a46 	vmov.f32	s4, s12
 8006d2c:	eef0 2a66 	vmov.f32	s5, s13
 8006d30:	eeb0 1a47 	vmov.f32	s2, s14
 8006d34:	eef0 1a67 	vmov.f32	s3, s15
 8006d38:	2201      	movs	r2, #1
 8006d3a:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8006d3e:	2104      	movs	r1, #4
 8006d40:	4822      	ldr	r0, [pc, #136]	; (8006dcc <scaraInitDuty+0x314>)
 8006d42:	f001 f891 	bl	8007e68 <scaraInitLSPB1>
 8006d46:	4603      	mov	r3, r0
 8006d48:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006d4c:	4a1c      	ldr	r2, [pc, #112]	; (8006dc0 <scaraInitDuty+0x308>)
 8006d4e:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8006d52:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
				myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8006d56:	4b1a      	ldr	r3, [pc, #104]	; (8006dc0 <scaraInitDuty+0x308>)
 8006d58:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 8006d5c:	4918      	ldr	r1, [pc, #96]	; (8006dc0 <scaraInitDuty+0x308>)
 8006d5e:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006d62:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006d66:	4b16      	ldr	r3, [pc, #88]	; (8006dc0 <scaraInitDuty+0x308>)
 8006d68:	2202      	movs	r2, #2
 8006d6a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8006d6e:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7f9 fbd6 	bl	8000524 <__aeabi_i2d>
 8006d78:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8006d7c:	f7f9 fc3c 	bl	80005f8 <__aeabi_dmul>
 8006d80:	4602      	mov	r2, r0
 8006d82:	460b      	mov	r3, r1
 8006d84:	ec43 2b16 	vmov	d6, r2, r3
 8006d88:	4b0d      	ldr	r3, [pc, #52]	; (8006dc0 <scaraInitDuty+0x308>)
 8006d8a:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006d8e:	ed93 7b00 	vldr	d7, [r3]
 8006d92:	eeb0 1a47 	vmov.f32	s2, s14
 8006d96:	eef0 1a67 	vmov.f32	s3, s15
 8006d9a:	2203      	movs	r2, #3
 8006d9c:	eeb0 0a46 	vmov.f32	s0, s12
 8006da0:	eef0 0a66 	vmov.f32	s1, s13
 8006da4:	2105      	movs	r1, #5
 8006da6:	480a      	ldr	r0, [pc, #40]	; (8006dd0 <scaraInitDuty+0x318>)
 8006da8:	f001 f810 	bl	8007dcc <scaraInitLinear>
 8006dac:	4603      	mov	r3, r0
 8006dae:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8006db2:	e1db      	b.n	800716c <scaraInitDuty+0x6b4>
 8006db4:	f3af 8000 	nop.w
 8006db8:	40668000 	.word	0x40668000
 8006dbc:	20010af8 	.word	0x20010af8
 8006dc0:	2000ff38 	.word	0x2000ff38
 8006dc4:	2000ff48 	.word	0x2000ff48
 8006dc8:	2000ffb8 	.word	0x2000ffb8
 8006dcc:	20010050 	.word	0x20010050
 8006dd0:	20010320 	.word	0x20010320
 8006dd4:	60000000 	.word	0x60000000
 8006dd8:	400921fb 	.word	0x400921fb
			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006ddc:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d14d      	bne.n	8006e80 <scaraInitDuty+0x3c8>
				//myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006de4:	4bb9      	ldr	r3, [pc, #740]	; (80070cc <scaraInitDuty+0x614>)
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB1(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8006dec:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006df0:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006df4:	eeb0 2a46 	vmov.f32	s4, s12
 8006df8:	eef0 2a66 	vmov.f32	s5, s13
 8006dfc:	eeb0 1a47 	vmov.f32	s2, s14
 8006e00:	eef0 1a67 	vmov.f32	s3, s15
 8006e04:	2200      	movs	r2, #0
 8006e06:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8006e0a:	2104      	movs	r1, #4
 8006e0c:	48b0      	ldr	r0, [pc, #704]	; (80070d0 <scaraInitDuty+0x618>)
 8006e0e:	f001 f82b 	bl	8007e68 <scaraInitLSPB1>
 8006e12:	4603      	mov	r3, r0
 8006e14:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006e18:	4aac      	ldr	r2, [pc, #688]	; (80070cc <scaraInitDuty+0x614>)
 8006e1a:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8006e1e:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
				myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8006e22:	4baa      	ldr	r3, [pc, #680]	; (80070cc <scaraInitDuty+0x614>)
 8006e24:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 8006e28:	49a8      	ldr	r1, [pc, #672]	; (80070cc <scaraInitDuty+0x614>)
 8006e2a:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006e2e:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006e32:	4ba6      	ldr	r3, [pc, #664]	; (80070cc <scaraInitDuty+0x614>)
 8006e34:	2202      	movs	r2, #2
 8006e36:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8006e3a:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7f9 fb70 	bl	8000524 <__aeabi_i2d>
 8006e44:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8006e48:	f7f9 fbd6 	bl	80005f8 <__aeabi_dmul>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	460b      	mov	r3, r1
 8006e50:	ec43 2b16 	vmov	d6, r2, r3
 8006e54:	4b9d      	ldr	r3, [pc, #628]	; (80070cc <scaraInitDuty+0x614>)
 8006e56:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006e5a:	ed93 7b00 	vldr	d7, [r3]
 8006e5e:	eeb0 1a47 	vmov.f32	s2, s14
 8006e62:	eef0 1a67 	vmov.f32	s3, s15
 8006e66:	2203      	movs	r2, #3
 8006e68:	eeb0 0a46 	vmov.f32	s0, s12
 8006e6c:	eef0 0a66 	vmov.f32	s1, s13
 8006e70:	2105      	movs	r1, #5
 8006e72:	4898      	ldr	r0, [pc, #608]	; (80070d4 <scaraInitDuty+0x61c>)
 8006e74:	f000 ffaa 	bl	8007dcc <scaraInitLinear>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8006e7e:	e175      	b.n	800716c <scaraInitDuty+0x6b4>

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 8006e80:	2308      	movs	r3, #8
 8006e82:	f000 bd2b 	b.w	80078dc <scaraInitDuty+0xe24>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 8006e86:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	f040 80a7 	bne.w	8006fde <scaraInitDuty+0x526>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006e90:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d14d      	bne.n	8006f34 <scaraInitDuty+0x47c>
				//myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006e98:	4b8c      	ldr	r3, [pc, #560]	; (80070cc <scaraInitDuty+0x614>)
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve1(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8006ea0:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006ea4:	ed97 6b7c 	vldr	d6, [r7, #496]	; 0x1f0
 8006ea8:	eeb0 2a46 	vmov.f32	s4, s12
 8006eac:	eef0 2a66 	vmov.f32	s5, s13
 8006eb0:	eeb0 1a47 	vmov.f32	s2, s14
 8006eb4:	eef0 1a67 	vmov.f32	s3, s15
 8006eb8:	2201      	movs	r2, #1
 8006eba:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8006ebe:	2104      	movs	r1, #4
 8006ec0:	4885      	ldr	r0, [pc, #532]	; (80070d8 <scaraInitDuty+0x620>)
 8006ec2:	f001 fa95 	bl	80083f0 <scaraInitScurve1>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006ecc:	4a7f      	ldr	r2, [pc, #508]	; (80070cc <scaraInitDuty+0x614>)
 8006ece:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8006ed2:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
				myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8006ed6:	4b7d      	ldr	r3, [pc, #500]	; (80070cc <scaraInitDuty+0x614>)
 8006ed8:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
 8006edc:	497b      	ldr	r1, [pc, #492]	; (80070cc <scaraInitDuty+0x614>)
 8006ede:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006ee2:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006ee6:	4b79      	ldr	r3, [pc, #484]	; (80070cc <scaraInitDuty+0x614>)
 8006ee8:	2202      	movs	r2, #2
 8006eea:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8006eee:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7f9 fb16 	bl	8000524 <__aeabi_i2d>
 8006ef8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8006efc:	f7f9 fb7c 	bl	80005f8 <__aeabi_dmul>
 8006f00:	4602      	mov	r2, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	ec43 2b16 	vmov	d6, r2, r3
 8006f08:	4b70      	ldr	r3, [pc, #448]	; (80070cc <scaraInitDuty+0x614>)
 8006f0a:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006f0e:	ed93 7b00 	vldr	d7, [r3]
 8006f12:	eeb0 1a47 	vmov.f32	s2, s14
 8006f16:	eef0 1a67 	vmov.f32	s3, s15
 8006f1a:	2203      	movs	r2, #3
 8006f1c:	eeb0 0a46 	vmov.f32	s0, s12
 8006f20:	eef0 0a66 	vmov.f32	s1, s13
 8006f24:	2105      	movs	r1, #5
 8006f26:	486b      	ldr	r0, [pc, #428]	; (80070d4 <scaraInitDuty+0x61c>)
 8006f28:	f000 ff50 	bl	8007dcc <scaraInitLinear>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8006f32:	e11b      	b.n	800716c <scaraInitDuty+0x6b4>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006f34:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d14d      	bne.n	8006fd8 <scaraInitDuty+0x520>
				//myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006f3c:	4b63      	ldr	r3, [pc, #396]	; (80070cc <scaraInitDuty+0x614>)
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve1(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8006f44:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006f48:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006f4c:	eeb0 2a46 	vmov.f32	s4, s12
 8006f50:	eef0 2a66 	vmov.f32	s5, s13
 8006f54:	eeb0 1a47 	vmov.f32	s2, s14
 8006f58:	eef0 1a67 	vmov.f32	s3, s15
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8006f62:	2104      	movs	r1, #4
 8006f64:	485c      	ldr	r0, [pc, #368]	; (80070d8 <scaraInitDuty+0x620>)
 8006f66:	f001 fa43 	bl	80083f0 <scaraInitScurve1>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006f70:	4a56      	ldr	r2, [pc, #344]	; (80070cc <scaraInitDuty+0x614>)
 8006f72:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8006f76:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
				myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8006f7a:	4b54      	ldr	r3, [pc, #336]	; (80070cc <scaraInitDuty+0x614>)
 8006f7c:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
 8006f80:	4952      	ldr	r1, [pc, #328]	; (80070cc <scaraInitDuty+0x614>)
 8006f82:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006f86:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006f8a:	4b50      	ldr	r3, [pc, #320]	; (80070cc <scaraInitDuty+0x614>)
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8006f92:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7f9 fac4 	bl	8000524 <__aeabi_i2d>
 8006f9c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8006fa0:	f7f9 fb2a 	bl	80005f8 <__aeabi_dmul>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	ec43 2b16 	vmov	d6, r2, r3
 8006fac:	4b47      	ldr	r3, [pc, #284]	; (80070cc <scaraInitDuty+0x614>)
 8006fae:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006fb2:	ed93 7b00 	vldr	d7, [r3]
 8006fb6:	eeb0 1a47 	vmov.f32	s2, s14
 8006fba:	eef0 1a67 	vmov.f32	s3, s15
 8006fbe:	2203      	movs	r2, #3
 8006fc0:	eeb0 0a46 	vmov.f32	s0, s12
 8006fc4:	eef0 0a66 	vmov.f32	s1, s13
 8006fc8:	2105      	movs	r1, #5
 8006fca:	4842      	ldr	r0, [pc, #264]	; (80070d4 <scaraInitDuty+0x61c>)
 8006fcc:	f000 fefe 	bl	8007dcc <scaraInitLinear>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8006fd6:	e0c9      	b.n	800716c <scaraInitDuty+0x6b4>
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8006fd8:	2308      	movs	r3, #8
 8006fda:	f000 bc7f 	b.w	80078dc <scaraInitDuty+0xe24>
			}
		}else if(DUTY_TRAJECTORY_LINEAR == command.trajec_type){
 8006fde:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d17c      	bne.n	80070e0 <scaraInitDuty+0x628>
			//myDUTY.time_total = command.time_total;
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006fe6:	4a39      	ldr	r2, [pc, #228]	; (80070cc <scaraInitDuty+0x614>)
 8006fe8:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8006fec:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006ff0:	4b36      	ldr	r3, [pc, #216]	; (80070cc <scaraInitDuty+0x614>)
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006ff8:	4b34      	ldr	r3, [pc, #208]	; (80070cc <scaraInitDuty+0x614>)
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			if(command.modeInit_type == DUTY_MODE_INIT_QT){
 8007000:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8007004:	2b03      	cmp	r3, #3
 8007006:	d118      	bne.n	800703a <scaraInitDuty+0x582>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, fabs(total_s), DUTY_MODE_INIT_QT, command.time_total);
 8007008:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800700c:	603b      	str	r3, [r7, #0]
 800700e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8007012:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007016:	607b      	str	r3, [r7, #4]
 8007018:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 800701c:	eeb0 1a47 	vmov.f32	s2, s14
 8007020:	eef0 1a67 	vmov.f32	s3, s15
 8007024:	2203      	movs	r2, #3
 8007026:	ed97 0b00 	vldr	d0, [r7]
 800702a:	2104      	movs	r1, #4
 800702c:	482b      	ldr	r0, [pc, #172]	; (80070dc <scaraInitDuty+0x624>)
 800702e:	f000 fecd 	bl	8007dcc <scaraInitLinear>
 8007032:	4603      	mov	r3, r0
 8007034:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 8007038:	e01d      	b.n	8007076 <scaraInitDuty+0x5be>
			}else if(command.modeInit_type == DUTY_MODE_INIT_QV){
 800703a:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800703e:	2b02      	cmp	r3, #2
 8007040:	d116      	bne.n	8007070 <scaraInitDuty+0x5b8>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, fabs(total_s), DUTY_MODE_INIT_QV, command.v_factor);
 8007042:	f8d7 51a0 	ldr.w	r5, [r7, #416]	; 0x1a0
 8007046:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800704a:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 800704e:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8007052:	eeb0 1a47 	vmov.f32	s2, s14
 8007056:	eef0 1a67 	vmov.f32	s3, s15
 800705a:	2202      	movs	r2, #2
 800705c:	ec46 5b10 	vmov	d0, r5, r6
 8007060:	2104      	movs	r1, #4
 8007062:	481e      	ldr	r0, [pc, #120]	; (80070dc <scaraInitDuty+0x624>)
 8007064:	f000 feb2 	bl	8007dcc <scaraInitLinear>
 8007068:	4603      	mov	r3, r0
 800706a:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 800706e:	e002      	b.n	8007076 <scaraInitDuty+0x5be>
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8007070:	2308      	movs	r3, #8
 8007072:	f000 bc33 	b.w	80078dc <scaraInitDuty+0xe24>
			}
			myDUTY.time_total = myDUTY.task.trajectory_3d.linear.Tf;
 8007076:	4b15      	ldr	r3, [pc, #84]	; (80070cc <scaraInitDuty+0x614>)
 8007078:	e9d3 23a0 	ldrd	r2, r3, [r3, #640]	; 0x280
 800707c:	4913      	ldr	r1, [pc, #76]	; (80070cc <scaraInitDuty+0x614>)
 800707e:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007082:	e9c1 2300 	strd	r2, r3, [r1]
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8007086:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 800708a:	4618      	mov	r0, r3
 800708c:	f7f9 fa4a 	bl	8000524 <__aeabi_i2d>
 8007090:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8007094:	f7f9 fab0 	bl	80005f8 <__aeabi_dmul>
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	ec43 2b16 	vmov	d6, r2, r3
 80070a0:	4b0a      	ldr	r3, [pc, #40]	; (80070cc <scaraInitDuty+0x614>)
 80070a2:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80070a6:	ed93 7b00 	vldr	d7, [r3]
 80070aa:	eeb0 1a47 	vmov.f32	s2, s14
 80070ae:	eef0 1a67 	vmov.f32	s3, s15
 80070b2:	2203      	movs	r2, #3
 80070b4:	eeb0 0a46 	vmov.f32	s0, s12
 80070b8:	eef0 0a66 	vmov.f32	s1, s13
 80070bc:	2105      	movs	r1, #5
 80070be:	4805      	ldr	r0, [pc, #20]	; (80070d4 <scaraInitDuty+0x61c>)
 80070c0:	f000 fe84 	bl	8007dcc <scaraInitLinear>
 80070c4:	4603      	mov	r3, r0
 80070c6:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 80070ca:	e04f      	b.n	800716c <scaraInitDuty+0x6b4>
 80070cc:	2000ff38 	.word	0x2000ff38
 80070d0:	20010050 	.word	0x20010050
 80070d4:	20010320 	.word	0x20010320
 80070d8:	200100d0 	.word	0x200100d0
 80070dc:	200101a0 	.word	0x200101a0
		}else if(DUTY_TRAJECTORY_GCODE_LSPB == command.trajec_type){
 80070e0:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80070e4:	2b03      	cmp	r3, #3
 80070e6:	d13f      	bne.n	8007168 <scaraInitDuty+0x6b0>
			status1 = SCARA_STATUS_OK;
 80070e8:	2300      	movs	r3, #0
 80070ea:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 80070ee:	4a96      	ldr	r2, [pc, #600]	; (8007348 <scaraInitDuty+0x890>)
 80070f0:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 80070f4:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_GCODE_LSPB;
 80070f8:	4b93      	ldr	r3, [pc, #588]	; (8007348 <scaraInitDuty+0x890>)
 80070fa:	2203      	movs	r2, #3
 80070fc:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8007100:	4b91      	ldr	r3, [pc, #580]	; (8007348 <scaraInitDuty+0x890>)
 8007102:	2202      	movs	r2, #2
 8007104:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			myDUTY.time_total = command.time_total;
 8007108:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 800710c:	498e      	ldr	r1, [pc, #568]	; (8007348 <scaraInitDuty+0x890>)
 800710e:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007112:	e9c1 2300 	strd	r2, r3, [r1]
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total - last_T);
 8007116:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 800711a:	4618      	mov	r0, r3
 800711c:	f7f9 fa02 	bl	8000524 <__aeabi_i2d>
 8007120:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8007124:	f7f9 fa68 	bl	80005f8 <__aeabi_dmul>
 8007128:	4602      	mov	r2, r0
 800712a:	460b      	mov	r3, r1
 800712c:	ec43 2b18 	vmov	d8, r2, r3
 8007130:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8007134:	4b85      	ldr	r3, [pc, #532]	; (800734c <scaraInitDuty+0x894>)
 8007136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713a:	f7f9 f8a5 	bl	8000288 <__aeabi_dsub>
 800713e:	4602      	mov	r2, r0
 8007140:	460b      	mov	r3, r1
 8007142:	ec43 2b17 	vmov	d7, r2, r3
 8007146:	eeb0 1a47 	vmov.f32	s2, s14
 800714a:	eef0 1a67 	vmov.f32	s3, s15
 800714e:	2203      	movs	r2, #3
 8007150:	eeb0 0a48 	vmov.f32	s0, s16
 8007154:	eef0 0a68 	vmov.f32	s1, s17
 8007158:	2105      	movs	r1, #5
 800715a:	487d      	ldr	r0, [pc, #500]	; (8007350 <scaraInitDuty+0x898>)
 800715c:	f000 fe36 	bl	8007dcc <scaraInitLinear>
 8007160:	4603      	mov	r3, r0
 8007162:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8007166:	e001      	b.n	800716c <scaraInitDuty+0x6b4>
//			myDUTY.time_total = command.time_total;
//			status1 = SCARA_STATUS_OK;
//			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
//		}
		else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8007168:	2305      	movs	r3, #5
 800716a:	e3b7      	b.n	80078dc <scaraInitDuty+0xe24>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 800716c:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8007170:	2b00      	cmp	r3, #0
 8007172:	d002      	beq.n	800717a <scaraInitDuty+0x6c2>
			return status1;
 8007174:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8007178:	e3b0      	b.n	80078dc <scaraInitDuty+0xe24>
		}
		if ( SCARA_STATUS_OK != status2) {
 800717a:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 800717e:	2b00      	cmp	r3, #0
 8007180:	f000 837e 	beq.w	8007880 <scaraInitDuty+0xdc8>
			return status2;
 8007184:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8007188:	e3a8      	b.n	80078dc <scaraInitDuty+0xe24>
		}


	
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 800718a:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 800718e:	2b01      	cmp	r3, #1
 8007190:	f040 8374 	bne.w	800787c <scaraInitDuty+0xdc4>
		/*----------- Space Joint ------------*/
		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 8007194:	4b6c      	ldr	r3, [pc, #432]	; (8007348 <scaraInitDuty+0x890>)
 8007196:	2201      	movs	r2, #1
 8007198:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 800719a:	4b6e      	ldr	r3, [pc, #440]	; (8007354 <scaraInitDuty+0x89c>)
 800719c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80071a0:	4969      	ldr	r1, [pc, #420]	; (8007348 <scaraInitDuty+0x890>)
 80071a2:	f601 2118 	addw	r1, r1, #2584	; 0xa18
 80071a6:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 80071aa:	4b6a      	ldr	r3, [pc, #424]	; (8007354 <scaraInitDuty+0x89c>)
 80071ac:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80071b0:	4965      	ldr	r1, [pc, #404]	; (8007348 <scaraInitDuty+0x890>)
 80071b2:	f501 6122 	add.w	r1, r1, #2592	; 0xa20
 80071b6:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 80071ba:	4b66      	ldr	r3, [pc, #408]	; (8007354 <scaraInitDuty+0x89c>)
 80071bc:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80071c0:	4961      	ldr	r1, [pc, #388]	; (8007348 <scaraInitDuty+0x890>)
 80071c2:	f601 2128 	addw	r1, r1, #2600	; 0xa28
 80071c6:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 80071ca:	4b62      	ldr	r3, [pc, #392]	; (8007354 <scaraInitDuty+0x89c>)
 80071cc:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80071d0:	495d      	ldr	r1, [pc, #372]	; (8007348 <scaraInitDuty+0x890>)
 80071d2:	f501 6123 	add.w	r1, r1, #2608	; 0xa30
 80071d6:	e9c1 2300 	strd	r2, r3, [r1]

		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 80071da:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 80071de:	a358      	add	r3, pc, #352	; (adr r3, 8007340 <scaraInitDuty+0x888>)
 80071e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e4:	f7f9 fa08 	bl	80005f8 <__aeabi_dmul>
 80071e8:	4602      	mov	r2, r0
 80071ea:	460b      	mov	r3, r1
 80071ec:	4610      	mov	r0, r2
 80071ee:	4619      	mov	r1, r3
 80071f0:	f04f 0200 	mov.w	r2, #0
 80071f4:	4b58      	ldr	r3, [pc, #352]	; (8007358 <scaraInitDuty+0x8a0>)
 80071f6:	f7f9 fb29 	bl	800084c <__aeabi_ddiv>
 80071fa:	4602      	mov	r2, r0
 80071fc:	460b      	mov	r3, r1
 80071fe:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8007202:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8007206:	2b01      	cmp	r3, #1
 8007208:	d12c      	bne.n	8007264 <scaraInitDuty+0x7ac>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 800720a:	4b52      	ldr	r3, [pc, #328]	; (8007354 <scaraInitDuty+0x89c>)
 800720c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8007210:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8007214:	f7f9 f83a 	bl	800028c <__adddf3>
 8007218:	4602      	mov	r2, r0
 800721a:	460b      	mov	r3, r1
 800721c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			target_point.y 		= positionCurrent.y + command.target_point.y;
 8007220:	4b4c      	ldr	r3, [pc, #304]	; (8007354 <scaraInitDuty+0x89c>)
 8007222:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8007226:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 800722a:	f7f9 f82f 	bl	800028c <__adddf3>
 800722e:	4602      	mov	r2, r0
 8007230:	460b      	mov	r3, r1
 8007232:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8007236:	4b47      	ldr	r3, [pc, #284]	; (8007354 <scaraInitDuty+0x89c>)
 8007238:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800723c:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8007240:	f7f9 f824 	bl	800028c <__adddf3>
 8007244:	4602      	mov	r2, r0
 8007246:	460b      	mov	r3, r1
 8007248:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 800724c:	4b41      	ldr	r3, [pc, #260]	; (8007354 <scaraInitDuty+0x89c>)
 800724e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8007252:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8007256:	f7f9 f819 	bl	800028c <__adddf3>
 800725a:	4602      	mov	r2, r0
 800725c:	460b      	mov	r3, r1
 800725e:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
 8007262:	e016      	b.n	8007292 <scaraInitDuty+0x7da>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8007264:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8007268:	2b00      	cmp	r3, #0
 800726a:	d110      	bne.n	800728e <scaraInitDuty+0x7d6>
			target_point.x 		= command.target_point.x;
 800726c:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8007270:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			target_point.y 		= command.target_point.y;
 8007274:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8007278:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			target_point.z 		= command.target_point.z;
 800727c:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8007280:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			target_point.roll	= command.target_point.roll;
 8007284:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8007288:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
 800728c:	e001      	b.n	8007292 <scaraInitDuty+0x7da>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 800728e:	230c      	movs	r3, #12
 8007290:	e324      	b.n	80078dc <scaraInitDuty+0xe24>
		}

		if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 8007292:	4c30      	ldr	r4, [pc, #192]	; (8007354 <scaraInitDuty+0x89c>)
 8007294:	f107 05c8 	add.w	r5, r7, #200	; 0xc8
 8007298:	4668      	mov	r0, sp
 800729a:	f104 0308 	add.w	r3, r4, #8
 800729e:	22b8      	movs	r2, #184	; 0xb8
 80072a0:	4619      	mov	r1, r3
 80072a2:	f00e fe65 	bl	8015f70 <memcpy>
 80072a6:	e894 000c 	ldmia.w	r4, {r2, r3}
 80072aa:	4628      	mov	r0, r5
 80072ac:	f7fe f8c4 	bl	8005438 <kinematicInverse>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d101      	bne.n	80072ba <scaraInitDuty+0x802>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 80072b6:	2307      	movs	r3, #7
 80072b8:	e310      	b.n	80078dc <scaraInitDuty+0xe24>
		}
		// Trajectory 4 profile
		double q[4];
		q[0] = target_point.Theta1 - positionCurrent.Theta1;
 80072ba:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 80072be:	4b25      	ldr	r3, [pc, #148]	; (8007354 <scaraInitDuty+0x89c>)
 80072c0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80072c4:	f7f8 ffe0 	bl	8000288 <__aeabi_dsub>
 80072c8:	4602      	mov	r2, r0
 80072ca:	460b      	mov	r3, r1
 80072cc:	f107 0108 	add.w	r1, r7, #8
 80072d0:	e9c1 2300 	strd	r2, r3, [r1]
		q[1] = target_point.Theta2 - positionCurrent.Theta2;
 80072d4:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 80072d8:	4b1e      	ldr	r3, [pc, #120]	; (8007354 <scaraInitDuty+0x89c>)
 80072da:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80072de:	f7f8 ffd3 	bl	8000288 <__aeabi_dsub>
 80072e2:	4602      	mov	r2, r0
 80072e4:	460b      	mov	r3, r1
 80072e6:	f107 0108 	add.w	r1, r7, #8
 80072ea:	e9c1 2302 	strd	r2, r3, [r1, #8]
		q[2] = target_point.D3 	   - positionCurrent.D3;
 80072ee:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80072f2:	4b18      	ldr	r3, [pc, #96]	; (8007354 <scaraInitDuty+0x89c>)
 80072f4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80072f8:	f7f8 ffc6 	bl	8000288 <__aeabi_dsub>
 80072fc:	4602      	mov	r2, r0
 80072fe:	460b      	mov	r3, r1
 8007300:	f107 0108 	add.w	r1, r7, #8
 8007304:	e9c1 2304 	strd	r2, r3, [r1, #16]
		q[3] = target_point.Theta4 - positionCurrent.Theta4;
 8007308:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800730c:	4b11      	ldr	r3, [pc, #68]	; (8007354 <scaraInitDuty+0x89c>)
 800730e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8007312:	f7f8 ffb9 	bl	8000288 <__aeabi_dsub>
 8007316:	4602      	mov	r2, r0
 8007318:	460b      	mov	r3, r1
 800731a:	f107 0108 	add.w	r1, r7, #8
 800731e:	e9c1 2306 	strd	r2, r3, [r1, #24]

		// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8007322:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8007326:	2b00      	cmp	r3, #0
 8007328:	f040 8156 	bne.w	80075d8 <scaraInitDuty+0xb20>
			// Mode Init Time
			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800732c:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8007330:	2b01      	cmp	r3, #1
 8007332:	d171      	bne.n	8007418 <scaraInitDuty+0x960>
				for ( uint8_t i = 0; i < 4; i++) {
 8007334:	2300      	movs	r3, #0
 8007336:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 800733a:	e061      	b.n	8007400 <scaraInitDuty+0x948>
 800733c:	f3af 8000 	nop.w
 8007340:	60000000 	.word	0x60000000
 8007344:	400921fb 	.word	0x400921fb
 8007348:	2000ff38 	.word	0x2000ff38
 800734c:	2000fd40 	.word	0x2000fd40
 8007350:	20010320 	.word	0x20010320
 8007354:	20010af8 	.word	0x20010af8
 8007358:	40668000 	.word	0x40668000
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 800735c:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 8007360:	49d3      	ldr	r1, [pc, #844]	; (80076b0 <scaraInitDuty+0xbf8>)
 8007362:	4613      	mov	r3, r2
 8007364:	005b      	lsls	r3, r3, #1
 8007366:	4413      	add	r3, r2
 8007368:	01db      	lsls	r3, r3, #7
 800736a:	440b      	add	r3, r1
 800736c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007370:	2200      	movs	r2, #0
 8007372:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8007374:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 8007378:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 800737c:	4ccc      	ldr	r4, [pc, #816]	; (80076b0 <scaraInitDuty+0xbf8>)
 800737e:	4613      	mov	r3, r2
 8007380:	005b      	lsls	r3, r3, #1
 8007382:	4413      	add	r3, r2
 8007384:	01db      	lsls	r3, r3, #7
 8007386:	4423      	add	r3, r4
 8007388:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800738c:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitLSPB1(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8007390:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 8007394:	4613      	mov	r3, r2
 8007396:	005b      	lsls	r3, r3, #1
 8007398:	4413      	add	r3, r2
 800739a:	01db      	lsls	r3, r3, #7
 800739c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80073a0:	4ac3      	ldr	r2, [pc, #780]	; (80076b0 <scaraInitDuty+0xbf8>)
 80073a2:	1898      	adds	r0, r3, r2
 80073a4:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 80073a8:	4ac2      	ldr	r2, [pc, #776]	; (80076b4 <scaraInitDuty+0xbfc>)
 80073aa:	5cd1      	ldrb	r1, [r2, r3]
 80073ac:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 80073b0:	f107 0208 	add.w	r2, r7, #8
 80073b4:	00db      	lsls	r3, r3, #3
 80073b6:	4413      	add	r3, r2
 80073b8:	ed93 7b00 	vldr	d7, [r3]
 80073bc:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80073c0:	ed97 5b7c 	vldr	d5, [r7, #496]	; 0x1f0
 80073c4:	eeb0 2a45 	vmov.f32	s4, s10
 80073c8:	eef0 2a65 	vmov.f32	s5, s11
 80073cc:	eeb0 1a46 	vmov.f32	s2, s12
 80073d0:	eef0 1a66 	vmov.f32	s3, s13
 80073d4:	2201      	movs	r2, #1
 80073d6:	eeb0 0a47 	vmov.f32	s0, s14
 80073da:	eef0 0a67 	vmov.f32	s1, s15
 80073de:	f000 fd43 	bl	8007e68 <scaraInitLSPB1>
 80073e2:	4603      	mov	r3, r0
 80073e4:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
					if(status1 != SCARA_STATUS_OK){
 80073e8:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d002      	beq.n	80073f6 <scaraInitDuty+0x93e>
						return status1;
 80073f0:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80073f4:	e272      	b.n	80078dc <scaraInitDuty+0xe24>
				for ( uint8_t i = 0; i < 4; i++) {
 80073f6:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 80073fa:	3301      	adds	r3, #1
 80073fc:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 8007400:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 8007404:	2b03      	cmp	r3, #3
 8007406:	d9a9      	bls.n	800735c <scaraInitDuty+0x8a4>
					}
				}
				myDUTY.time_total = command.time_total;
 8007408:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 800740c:	49a8      	ldr	r1, [pc, #672]	; (80076b0 <scaraInitDuty+0xbf8>)
 800740e:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007412:	e9c1 2300 	strd	r2, r3, [r1]
 8007416:	e233      	b.n	8007880 <scaraInitDuty+0xdc8>
			// Mode Init Acc
			} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8007418:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800741c:	2b00      	cmp	r3, #0
 800741e:	f040 80d9 	bne.w	80075d4 <scaraInitDuty+0xb1c>
				for ( uint8_t i = 0; i < 4; i++) {
 8007422:	2300      	movs	r3, #0
 8007424:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
 8007428:	e03c      	b.n	80074a4 <scaraInitDuty+0x9ec>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 800742a:	f897 219d 	ldrb.w	r2, [r7, #413]	; 0x19d
 800742e:	49a0      	ldr	r1, [pc, #640]	; (80076b0 <scaraInitDuty+0xbf8>)
 8007430:	4613      	mov	r3, r2
 8007432:	005b      	lsls	r3, r3, #1
 8007434:	4413      	add	r3, r2
 8007436:	01db      	lsls	r3, r3, #7
 8007438:	440b      	add	r3, r1
 800743a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800743e:	2200      	movs	r2, #0
 8007440:	701a      	strb	r2, [r3, #0]
					status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8007442:	f897 219d 	ldrb.w	r2, [r7, #413]	; 0x19d
 8007446:	4613      	mov	r3, r2
 8007448:	005b      	lsls	r3, r3, #1
 800744a:	4413      	add	r3, r2
 800744c:	01db      	lsls	r3, r3, #7
 800744e:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8007452:	4a97      	ldr	r2, [pc, #604]	; (80076b0 <scaraInitDuty+0xbf8>)
 8007454:	1898      	adds	r0, r3, r2
 8007456:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 800745a:	4a96      	ldr	r2, [pc, #600]	; (80076b4 <scaraInitDuty+0xbfc>)
 800745c:	5cd1      	ldrb	r1, [r2, r3]
 800745e:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 8007462:	f107 0208 	add.w	r2, r7, #8
 8007466:	00db      	lsls	r3, r3, #3
 8007468:	4413      	add	r3, r2
 800746a:	ed93 7b00 	vldr	d7, [r3]
 800746e:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8007472:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8007476:	eeb0 2a45 	vmov.f32	s4, s10
 800747a:	eef0 2a65 	vmov.f32	s5, s11
 800747e:	eeb0 1a46 	vmov.f32	s2, s12
 8007482:	eef0 1a66 	vmov.f32	s3, s13
 8007486:	2200      	movs	r2, #0
 8007488:	eeb0 0a47 	vmov.f32	s0, s14
 800748c:	eef0 0a67 	vmov.f32	s1, s15
 8007490:	f001 ff02 	bl	8009298 <scaraInitLSPB>
 8007494:	4603      	mov	r3, r0
 8007496:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 800749a:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 800749e:	3301      	adds	r3, #1
 80074a0:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
 80074a4:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 80074a8:	2b03      	cmp	r3, #3
 80074aa:	d9be      	bls.n	800742a <scaraInitDuty+0x972>
										q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				}
				myDUTY.time_total = 0;
 80074ac:	4b80      	ldr	r3, [pc, #512]	; (80076b0 <scaraInitDuty+0xbf8>)
 80074ae:	f603 2138 	addw	r1, r3, #2616	; 0xa38
 80074b2:	f04f 0200 	mov.w	r2, #0
 80074b6:	f04f 0300 	mov.w	r3, #0
 80074ba:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 80074be:	2300      	movs	r3, #0
 80074c0:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c
 80074c4:	e02b      	b.n	800751e <scaraInitDuty+0xa66>
					if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 80074c6:	f897 219c 	ldrb.w	r2, [r7, #412]	; 0x19c
 80074ca:	4979      	ldr	r1, [pc, #484]	; (80076b0 <scaraInitDuty+0xbf8>)
 80074cc:	4613      	mov	r3, r2
 80074ce:	005b      	lsls	r3, r3, #1
 80074d0:	4413      	add	r3, r2
 80074d2:	01db      	lsls	r3, r3, #7
 80074d4:	440b      	add	r3, r1
 80074d6:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80074da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80074de:	4b74      	ldr	r3, [pc, #464]	; (80076b0 <scaraInitDuty+0xbf8>)
 80074e0:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80074e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e8:	f7f9 fb16 	bl	8000b18 <__aeabi_dcmpgt>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d010      	beq.n	8007514 <scaraInitDuty+0xa5c>
						myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 80074f2:	f897 219c 	ldrb.w	r2, [r7, #412]	; 0x19c
 80074f6:	496e      	ldr	r1, [pc, #440]	; (80076b0 <scaraInitDuty+0xbf8>)
 80074f8:	4613      	mov	r3, r2
 80074fa:	005b      	lsls	r3, r3, #1
 80074fc:	4413      	add	r3, r2
 80074fe:	01db      	lsls	r3, r3, #7
 8007500:	440b      	add	r3, r1
 8007502:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8007506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750a:	4969      	ldr	r1, [pc, #420]	; (80076b0 <scaraInitDuty+0xbf8>)
 800750c:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007510:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 8007514:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 8007518:	3301      	adds	r3, #1
 800751a:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c
 800751e:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 8007522:	2b03      	cmp	r3, #3
 8007524:	d9cf      	bls.n	80074c6 <scaraInitDuty+0xa0e>
					}
				}
				for ( uint8_t i = 0; i < 4; i++) {
 8007526:	2300      	movs	r3, #0
 8007528:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
 800752c:	e04d      	b.n	80075ca <scaraInitDuty+0xb12>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 800752e:	f897 219b 	ldrb.w	r2, [r7, #411]	; 0x19b
 8007532:	495f      	ldr	r1, [pc, #380]	; (80076b0 <scaraInitDuty+0xbf8>)
 8007534:	4613      	mov	r3, r2
 8007536:	005b      	lsls	r3, r3, #1
 8007538:	4413      	add	r3, r2
 800753a:	01db      	lsls	r3, r3, #7
 800753c:	440b      	add	r3, r1
 800753e:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007542:	2200      	movs	r2, #0
 8007544:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 8007546:	f897 219b 	ldrb.w	r2, [r7, #411]	; 0x19b
 800754a:	4b59      	ldr	r3, [pc, #356]	; (80076b0 <scaraInitDuty+0xbf8>)
 800754c:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007550:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007554:	4c56      	ldr	r4, [pc, #344]	; (80076b0 <scaraInitDuty+0xbf8>)
 8007556:	4613      	mov	r3, r2
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	4413      	add	r3, r2
 800755c:	01db      	lsls	r3, r3, #7
 800755e:	4423      	add	r3, r4
 8007560:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8007564:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8007568:	f897 219b 	ldrb.w	r2, [r7, #411]	; 0x19b
 800756c:	4613      	mov	r3, r2
 800756e:	005b      	lsls	r3, r3, #1
 8007570:	4413      	add	r3, r2
 8007572:	01db      	lsls	r3, r3, #7
 8007574:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8007578:	4a4d      	ldr	r2, [pc, #308]	; (80076b0 <scaraInitDuty+0xbf8>)
 800757a:	1898      	adds	r0, r3, r2
 800757c:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8007580:	4a4c      	ldr	r2, [pc, #304]	; (80076b4 <scaraInitDuty+0xbfc>)
 8007582:	5cd1      	ldrb	r1, [r2, r3]
 8007584:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8007588:	f107 0208 	add.w	r2, r7, #8
 800758c:	00db      	lsls	r3, r3, #3
 800758e:	4413      	add	r3, r2
 8007590:	ed93 7b00 	vldr	d7, [r3]
 8007594:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8007598:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 800759c:	eeb0 2a45 	vmov.f32	s4, s10
 80075a0:	eef0 2a65 	vmov.f32	s5, s11
 80075a4:	eeb0 1a46 	vmov.f32	s2, s12
 80075a8:	eef0 1a66 	vmov.f32	s3, s13
 80075ac:	2201      	movs	r2, #1
 80075ae:	eeb0 0a47 	vmov.f32	s0, s14
 80075b2:	eef0 0a67 	vmov.f32	s1, s15
 80075b6:	f001 fe6f 	bl	8009298 <scaraInitLSPB>
 80075ba:	4603      	mov	r3, r0
 80075bc:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 80075c0:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80075c4:	3301      	adds	r3, #1
 80075c6:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
 80075ca:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80075ce:	2b03      	cmp	r3, #3
 80075d0:	d9ad      	bls.n	800752e <scaraInitDuty+0xa76>
 80075d2:	e155      	b.n	8007880 <scaraInitDuty+0xdc8>
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				}

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 80075d4:	2308      	movs	r3, #8
 80075d6:	e181      	b.n	80078dc <scaraInitDuty+0xe24>
			}
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 80075d8:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80075dc:	2b01      	cmp	r3, #1
 80075de:	f040 814b 	bne.w	8007878 <scaraInitDuty+0xdc0>
			// Mode Init Time
			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80075e2:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d166      	bne.n	80076b8 <scaraInitDuty+0xc00>
				for ( uint8_t i = 0; i < 4; i++) {
 80075ea:	2300      	movs	r3, #0
 80075ec:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
 80075f0:	e051      	b.n	8007696 <scaraInitDuty+0xbde>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80075f2:	f897 219a 	ldrb.w	r2, [r7, #410]	; 0x19a
 80075f6:	492e      	ldr	r1, [pc, #184]	; (80076b0 <scaraInitDuty+0xbf8>)
 80075f8:	4613      	mov	r3, r2
 80075fa:	005b      	lsls	r3, r3, #1
 80075fc:	4413      	add	r3, r2
 80075fe:	01db      	lsls	r3, r3, #7
 8007600:	440b      	add	r3, r1
 8007602:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007606:	2201      	movs	r2, #1
 8007608:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 800760a:	f897 219a 	ldrb.w	r2, [r7, #410]	; 0x19a
 800760e:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8007612:	4c27      	ldr	r4, [pc, #156]	; (80076b0 <scaraInitDuty+0xbf8>)
 8007614:	4613      	mov	r3, r2
 8007616:	005b      	lsls	r3, r3, #1
 8007618:	4413      	add	r3, r2
 800761a:	01db      	lsls	r3, r3, #7
 800761c:	4423      	add	r3, r4
 800761e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007622:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitScurve1(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8007626:	f897 219a 	ldrb.w	r2, [r7, #410]	; 0x19a
 800762a:	4613      	mov	r3, r2
 800762c:	005b      	lsls	r3, r3, #1
 800762e:	4413      	add	r3, r2
 8007630:	01db      	lsls	r3, r3, #7
 8007632:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8007636:	4a1e      	ldr	r2, [pc, #120]	; (80076b0 <scaraInitDuty+0xbf8>)
 8007638:	1898      	adds	r0, r3, r2
 800763a:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 800763e:	4a1d      	ldr	r2, [pc, #116]	; (80076b4 <scaraInitDuty+0xbfc>)
 8007640:	5cd1      	ldrb	r1, [r2, r3]
 8007642:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 8007646:	f107 0208 	add.w	r2, r7, #8
 800764a:	00db      	lsls	r3, r3, #3
 800764c:	4413      	add	r3, r2
 800764e:	ed93 7b00 	vldr	d7, [r3]
 8007652:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8007656:	ed97 5b7c 	vldr	d5, [r7, #496]	; 0x1f0
 800765a:	eeb0 2a45 	vmov.f32	s4, s10
 800765e:	eef0 2a65 	vmov.f32	s5, s11
 8007662:	eeb0 1a46 	vmov.f32	s2, s12
 8007666:	eef0 1a66 	vmov.f32	s3, s13
 800766a:	2201      	movs	r2, #1
 800766c:	eeb0 0a47 	vmov.f32	s0, s14
 8007670:	eef0 0a67 	vmov.f32	s1, s15
 8007674:	f000 febc 	bl	80083f0 <scaraInitScurve1>
 8007678:	4603      	mov	r3, r0
 800767a:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
					if(status1 != SCARA_STATUS_OK){
 800767e:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8007682:	2b00      	cmp	r3, #0
 8007684:	d002      	beq.n	800768c <scaraInitDuty+0xbd4>
						return status1;
 8007686:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800768a:	e127      	b.n	80078dc <scaraInitDuty+0xe24>
				for ( uint8_t i = 0; i < 4; i++) {
 800768c:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 8007690:	3301      	adds	r3, #1
 8007692:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
 8007696:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 800769a:	2b03      	cmp	r3, #3
 800769c:	d9a9      	bls.n	80075f2 <scaraInitDuty+0xb3a>
					}
				}
				myDUTY.time_total = command.time_total;
 800769e:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 80076a2:	4903      	ldr	r1, [pc, #12]	; (80076b0 <scaraInitDuty+0xbf8>)
 80076a4:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80076a8:	e9c1 2300 	strd	r2, r3, [r1]
 80076ac:	e0e8      	b.n	8007880 <scaraInitDuty+0xdc8>
 80076ae:	bf00      	nop
 80076b0:	2000ff38 	.word	0x2000ff38
 80076b4:	20004088 	.word	0x20004088
			// Mode Init Acc
			} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80076b8:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f040 80d9 	bne.w	8007874 <scaraInitDuty+0xdbc>
				for ( uint8_t i = 0; i < 4; i++) {
 80076c2:	2300      	movs	r3, #0
 80076c4:	f887 3199 	strb.w	r3, [r7, #409]	; 0x199
 80076c8:	e03c      	b.n	8007744 <scaraInitDuty+0xc8c>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80076ca:	f897 2199 	ldrb.w	r2, [r7, #409]	; 0x199
 80076ce:	4988      	ldr	r1, [pc, #544]	; (80078f0 <scaraInitDuty+0xe38>)
 80076d0:	4613      	mov	r3, r2
 80076d2:	005b      	lsls	r3, r3, #1
 80076d4:	4413      	add	r3, r2
 80076d6:	01db      	lsls	r3, r3, #7
 80076d8:	440b      	add	r3, r1
 80076da:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80076de:	2201      	movs	r2, #1
 80076e0:	701a      	strb	r2, [r3, #0]
					status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80076e2:	f897 2199 	ldrb.w	r2, [r7, #409]	; 0x199
 80076e6:	4613      	mov	r3, r2
 80076e8:	005b      	lsls	r3, r3, #1
 80076ea:	4413      	add	r3, r2
 80076ec:	01db      	lsls	r3, r3, #7
 80076ee:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80076f2:	4a7f      	ldr	r2, [pc, #508]	; (80078f0 <scaraInitDuty+0xe38>)
 80076f4:	1898      	adds	r0, r3, r2
 80076f6:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 80076fa:	4a7e      	ldr	r2, [pc, #504]	; (80078f4 <scaraInitDuty+0xe3c>)
 80076fc:	5cd1      	ldrb	r1, [r2, r3]
 80076fe:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 8007702:	f107 0208 	add.w	r2, r7, #8
 8007706:	00db      	lsls	r3, r3, #3
 8007708:	4413      	add	r3, r2
 800770a:	ed93 7b00 	vldr	d7, [r3]
 800770e:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8007712:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8007716:	eeb0 2a45 	vmov.f32	s4, s10
 800771a:	eef0 2a65 	vmov.f32	s5, s11
 800771e:	eeb0 1a46 	vmov.f32	s2, s12
 8007722:	eef0 1a66 	vmov.f32	s3, s13
 8007726:	2200      	movs	r2, #0
 8007728:	eeb0 0a47 	vmov.f32	s0, s14
 800772c:	eef0 0a67 	vmov.f32	s1, s15
 8007730:	f002 f984 	bl	8009a3c <scaraInitScurve>
 8007734:	4603      	mov	r3, r0
 8007736:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 800773a:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 800773e:	3301      	adds	r3, #1
 8007740:	f887 3199 	strb.w	r3, [r7, #409]	; 0x199
 8007744:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 8007748:	2b03      	cmp	r3, #3
 800774a:	d9be      	bls.n	80076ca <scaraInitDuty+0xc12>
										q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				}
				myDUTY.time_total = 0;
 800774c:	4b68      	ldr	r3, [pc, #416]	; (80078f0 <scaraInitDuty+0xe38>)
 800774e:	f603 2138 	addw	r1, r3, #2616	; 0xa38
 8007752:	f04f 0200 	mov.w	r2, #0
 8007756:	f04f 0300 	mov.w	r3, #0
 800775a:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 800775e:	2300      	movs	r3, #0
 8007760:	f887 3198 	strb.w	r3, [r7, #408]	; 0x198
 8007764:	e02b      	b.n	80077be <scaraInitDuty+0xd06>
					if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 8007766:	f897 2198 	ldrb.w	r2, [r7, #408]	; 0x198
 800776a:	4961      	ldr	r1, [pc, #388]	; (80078f0 <scaraInitDuty+0xe38>)
 800776c:	4613      	mov	r3, r2
 800776e:	005b      	lsls	r3, r3, #1
 8007770:	4413      	add	r3, r2
 8007772:	01db      	lsls	r3, r3, #7
 8007774:	440b      	add	r3, r1
 8007776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800777a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800777e:	4b5c      	ldr	r3, [pc, #368]	; (80078f0 <scaraInitDuty+0xe38>)
 8007780:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007788:	f7f9 f9c6 	bl	8000b18 <__aeabi_dcmpgt>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d010      	beq.n	80077b4 <scaraInitDuty+0xcfc>
						myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8007792:	f897 2198 	ldrb.w	r2, [r7, #408]	; 0x198
 8007796:	4956      	ldr	r1, [pc, #344]	; (80078f0 <scaraInitDuty+0xe38>)
 8007798:	4613      	mov	r3, r2
 800779a:	005b      	lsls	r3, r3, #1
 800779c:	4413      	add	r3, r2
 800779e:	01db      	lsls	r3, r3, #7
 80077a0:	440b      	add	r3, r1
 80077a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077aa:	4951      	ldr	r1, [pc, #324]	; (80078f0 <scaraInitDuty+0xe38>)
 80077ac:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80077b0:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 80077b4:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80077b8:	3301      	adds	r3, #1
 80077ba:	f887 3198 	strb.w	r3, [r7, #408]	; 0x198
 80077be:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d9cf      	bls.n	8007766 <scaraInitDuty+0xcae>
					}
				}
				for ( uint8_t i = 0; i < 4; i++) {
 80077c6:	2300      	movs	r3, #0
 80077c8:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 80077cc:	e04d      	b.n	800786a <scaraInitDuty+0xdb2>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80077ce:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 80077d2:	4947      	ldr	r1, [pc, #284]	; (80078f0 <scaraInitDuty+0xe38>)
 80077d4:	4613      	mov	r3, r2
 80077d6:	005b      	lsls	r3, r3, #1
 80077d8:	4413      	add	r3, r2
 80077da:	01db      	lsls	r3, r3, #7
 80077dc:	440b      	add	r3, r1
 80077de:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80077e2:	2201      	movs	r2, #1
 80077e4:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 80077e6:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 80077ea:	4b41      	ldr	r3, [pc, #260]	; (80078f0 <scaraInitDuty+0xe38>)
 80077ec:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80077f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80077f4:	4c3e      	ldr	r4, [pc, #248]	; (80078f0 <scaraInitDuty+0xe38>)
 80077f6:	4613      	mov	r3, r2
 80077f8:	005b      	lsls	r3, r3, #1
 80077fa:	4413      	add	r3, r2
 80077fc:	01db      	lsls	r3, r3, #7
 80077fe:	4423      	add	r3, r4
 8007800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007804:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8007808:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 800780c:	4613      	mov	r3, r2
 800780e:	005b      	lsls	r3, r3, #1
 8007810:	4413      	add	r3, r2
 8007812:	01db      	lsls	r3, r3, #7
 8007814:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8007818:	4a35      	ldr	r2, [pc, #212]	; (80078f0 <scaraInitDuty+0xe38>)
 800781a:	1898      	adds	r0, r3, r2
 800781c:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007820:	4a34      	ldr	r2, [pc, #208]	; (80078f4 <scaraInitDuty+0xe3c>)
 8007822:	5cd1      	ldrb	r1, [r2, r3]
 8007824:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007828:	f107 0208 	add.w	r2, r7, #8
 800782c:	00db      	lsls	r3, r3, #3
 800782e:	4413      	add	r3, r2
 8007830:	ed93 7b00 	vldr	d7, [r3]
 8007834:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8007838:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 800783c:	eeb0 2a45 	vmov.f32	s4, s10
 8007840:	eef0 2a65 	vmov.f32	s5, s11
 8007844:	eeb0 1a46 	vmov.f32	s2, s12
 8007848:	eef0 1a66 	vmov.f32	s3, s13
 800784c:	2201      	movs	r2, #1
 800784e:	eeb0 0a47 	vmov.f32	s0, s14
 8007852:	eef0 0a67 	vmov.f32	s1, s15
 8007856:	f002 f8f1 	bl	8009a3c <scaraInitScurve>
 800785a:	4603      	mov	r3, r0
 800785c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 8007860:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007864:	3301      	adds	r3, #1
 8007866:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 800786a:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 800786e:	2b03      	cmp	r3, #3
 8007870:	d9ad      	bls.n	80077ce <scaraInitDuty+0xd16>
 8007872:	e005      	b.n	8007880 <scaraInitDuty+0xdc8>
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				}

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8007874:	2308      	movs	r3, #8
 8007876:	e031      	b.n	80078dc <scaraInitDuty+0xe24>
			}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8007878:	2305      	movs	r3, #5
 800787a:	e02f      	b.n	80078dc <scaraInitDuty+0xe24>
			}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 800787c:	2302      	movs	r3, #2
 800787e:	e02d      	b.n	80078dc <scaraInitDuty+0xe24>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 8007880:	491d      	ldr	r1, [pc, #116]	; (80078f8 <scaraInitDuty+0xe40>)
 8007882:	f04f 0200 	mov.w	r2, #0
 8007886:	f04f 0300 	mov.w	r3, #0
 800788a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	positionCurrent.total_time = myDUTY.time_total;
 800788e:	4b18      	ldr	r3, [pc, #96]	; (80078f0 <scaraInitDuty+0xe38>)
 8007890:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007898:	4917      	ldr	r1, [pc, #92]	; (80078f8 <scaraInitDuty+0xe40>)
 800789a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	positionNext.t = 0;
 800789e:	4917      	ldr	r1, [pc, #92]	; (80078fc <scaraInitDuty+0xe44>)
 80078a0:	f04f 0200 	mov.w	r2, #0
 80078a4:	f04f 0300 	mov.w	r3, #0
 80078a8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	positionNext.total_time = myDUTY.time_total;
 80078ac:	4b10      	ldr	r3, [pc, #64]	; (80078f0 <scaraInitDuty+0xe38>)
 80078ae:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80078b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b6:	4911      	ldr	r1, [pc, #68]	; (80078fc <scaraInitDuty+0xe44>)
 80078b8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	positionTrue.t = 0;
 80078bc:	4910      	ldr	r1, [pc, #64]	; (8007900 <scaraInitDuty+0xe48>)
 80078be:	f04f 0200 	mov.w	r2, #0
 80078c2:	f04f 0300 	mov.w	r3, #0
 80078c6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	positionTrue.total_time = myDUTY.time_total;
 80078ca:	4b09      	ldr	r3, [pc, #36]	; (80078f0 <scaraInitDuty+0xe38>)
 80078cc:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80078d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d4:	490a      	ldr	r1, [pc, #40]	; (8007900 <scaraInitDuty+0xe48>)
 80078d6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	return SCARA_STATUS_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 80078e2:	46bd      	mov	sp, r7
 80078e4:	ecbd 8b02 	vpop	{d8}
 80078e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80078ec:	b004      	add	sp, #16
 80078ee:	4770      	bx	lr
 80078f0:	2000ff38 	.word	0x2000ff38
 80078f4:	20004088 	.word	0x20004088
 80078f8:	20010af8 	.word	0x20010af8
 80078fc:	20010c78 	.word	0x20010c78
 8007900:	20010bb8 	.word	0x20010bb8

08007904 <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 8007904:	b082      	sub	sp, #8
 8007906:	b5b0      	push	{r4, r5, r7, lr}
 8007908:	b0b0      	sub	sp, #192	; 0xc0
 800790a:	af2e      	add	r7, sp, #184	; 0xb8
 800790c:	6078      	str	r0, [r7, #4]
 800790e:	f107 0118 	add.w	r1, r7, #24
 8007912:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 8007916:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 800791a:	4668      	mov	r0, sp
 800791c:	f107 0320 	add.w	r3, r7, #32
 8007920:	22b8      	movs	r2, #184	; 0xb8
 8007922:	4619      	mov	r1, r3
 8007924:	f00e fb24 	bl	8015f70 <memcpy>
 8007928:	f107 0318 	add.w	r3, r7, #24
 800792c:	cb0c      	ldmia	r3, {r2, r3}
 800792e:	4620      	mov	r0, r4
 8007930:	f7fd fd82 	bl	8005438 <kinematicInverse>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800793a:	2307      	movs	r3, #7
 800793c:	e08e      	b.n	8007a5c <scaraInitLine+0x158>
	}
	// Init line params
	line->x1 = end.x;
 800793e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8007942:	6879      	ldr	r1, [r7, #4]
 8007944:	e9c1 2302 	strd	r2, r3, [r1, #8]
	line->y1 = end.y;
 8007948:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800794c:	6879      	ldr	r1, [r7, #4]
 800794e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	line->z1 = end.z;
 8007952:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8007956:	6879      	ldr	r1, [r7, #4]
 8007958:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	line->x0 = start.x;
 800795c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007960:	6879      	ldr	r1, [r7, #4]
 8007962:	e9c1 2300 	strd	r2, r3, [r1]
	line->y0 = start.y;
 8007966:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800796a:	6879      	ldr	r1, [r7, #4]
 800796c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	line->z0 = start.z;
 8007970:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007974:	6879      	ldr	r1, [r7, #4]
 8007976:	e9c1 2308 	strd	r2, r3, [r1, #32]
	line->denta_x = end.x  -  start.x;
 800797a:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800797e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007982:	f7f8 fc81 	bl	8000288 <__aeabi_dsub>
 8007986:	4602      	mov	r2, r0
 8007988:	460b      	mov	r3, r1
 800798a:	6879      	ldr	r1, [r7, #4]
 800798c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 8007990:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8007994:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007998:	f7f8 fc76 	bl	8000288 <__aeabi_dsub>
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	6879      	ldr	r1, [r7, #4]
 80079a2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 80079a6:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 80079aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80079ae:	f7f8 fc6b 	bl	8000288 <__aeabi_dsub>
 80079b2:	4602      	mov	r2, r0
 80079b4:	460b      	mov	r3, r1
 80079b6:	6879      	ldr	r1, [r7, #4]
 80079b8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80079c8:	f7f8 fe16 	bl	80005f8 <__aeabi_dmul>
 80079cc:	4602      	mov	r2, r0
 80079ce:	460b      	mov	r3, r1
 80079d0:	4614      	mov	r4, r2
 80079d2:	461d      	mov	r5, r3
			       +(line->denta_y)*(line->denta_y)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80079e0:	f7f8 fe0a 	bl	80005f8 <__aeabi_dmul>
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	4620      	mov	r0, r4
 80079ea:	4629      	mov	r1, r5
 80079ec:	f7f8 fc4e 	bl	800028c <__adddf3>
 80079f0:	4602      	mov	r2, r0
 80079f2:	460b      	mov	r3, r1
 80079f4:	4614      	mov	r4, r2
 80079f6:	461d      	mov	r5, r3
				   +(line->denta_z)*(line->denta_z));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8007a04:	f7f8 fdf8 	bl	80005f8 <__aeabi_dmul>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	4629      	mov	r1, r5
 8007a10:	f7f8 fc3c 	bl	800028c <__adddf3>
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	ec43 2b17 	vmov	d7, r2, r3
 8007a1c:	eeb0 0a47 	vmov.f32	s0, s14
 8007a20:	eef0 0a67 	vmov.f32	s1, s15
 8007a24:	f013 f8b4 	bl	801ab90 <sqrt>
 8007a28:	eeb0 7a40 	vmov.f32	s14, s0
 8007a2c:	eef0 7a60 	vmov.f32	s15, s1
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3c:	6879      	ldr	r1, [r7, #4]
 8007a3e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	line->y_current = line->y0;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007a48:	6879      	ldr	r1, [r7, #4]
 8007a4a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	line->z_current = line->z0;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a54:	6879      	ldr	r1, [r7, #4]
 8007a56:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	return SCARA_STATUS_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8007a66:	b002      	add	sp, #8
 8007a68:	4770      	bx	lr
 8007a6a:	0000      	movs	r0, r0
 8007a6c:	0000      	movs	r0, r0
	...

08007a70 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 8007a70:	b082      	sub	sp, #8
 8007a72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a76:	b0c5      	sub	sp, #276	; 0x114
 8007a78:	af2e      	add	r7, sp, #184	; 0xb8
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8007a80:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 8007a84:	f507 76a0 	add.w	r6, r7, #320	; 0x140
 8007a88:	4668      	mov	r0, sp
 8007a8a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007a8e:	22b8      	movs	r2, #184	; 0xb8
 8007a90:	4619      	mov	r1, r3
 8007a92:	f00e fa6d 	bl	8015f70 <memcpy>
 8007a96:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007a9a:	cb0c      	ldmia	r3, {r2, r3}
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	f7fd fccb 	bl	8005438 <kinematicInverse>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d101      	bne.n	8007aac <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007aa8:	2307      	movs	r3, #7
 8007aaa:	e17b      	b.n	8007da4 <scaraInitCircle+0x334>
	}

//	if( 1 != dir && -1 != dir) {
//		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
//	}
	if(dir != 1 && dir != -1){
 8007aac:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d006      	beq.n	8007ac2 <scaraInitCircle+0x52>
 8007ab4:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007abc:	d001      	beq.n	8007ac2 <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;
 8007abe:	2306      	movs	r3, #6
 8007ac0:	e170      	b.n	8007da4 <scaraInitCircle+0x334>
	}

	double x_start, y_start, x_stop, y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	x_start = start.x - center.x;
 8007ac2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007ac6:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8007aca:	f7f8 fbdd 	bl	8000288 <__aeabi_dsub>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	y_start = start.y - center.y;
 8007ad6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8007ada:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8007ade:	f7f8 fbd3 	bl	8000288 <__aeabi_dsub>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	x_stop  = end.x  - center.x;
 8007aea:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8007aee:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8007af2:	f7f8 fbc9 	bl	8000288 <__aeabi_dsub>
 8007af6:	4602      	mov	r2, r0
 8007af8:	460b      	mov	r3, r1
 8007afa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	y_stop  = end.y  - center.y;
 8007afe:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8007b02:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8007b06:	f7f8 fbbf 	bl	8000288 <__aeabi_dsub>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	r1 = sqrt(x_start*x_start + y_start*y_start);
 8007b12:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007b16:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007b1a:	f7f8 fd6d 	bl	80005f8 <__aeabi_dmul>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	4692      	mov	sl, r2
 8007b24:	469b      	mov	fp, r3
 8007b26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007b2a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007b2e:	f7f8 fd63 	bl	80005f8 <__aeabi_dmul>
 8007b32:	4602      	mov	r2, r0
 8007b34:	460b      	mov	r3, r1
 8007b36:	4650      	mov	r0, sl
 8007b38:	4659      	mov	r1, fp
 8007b3a:	f7f8 fba7 	bl	800028c <__adddf3>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	460b      	mov	r3, r1
 8007b42:	ec43 2b17 	vmov	d7, r2, r3
 8007b46:	eeb0 0a47 	vmov.f32	s0, s14
 8007b4a:	eef0 0a67 	vmov.f32	s1, s15
 8007b4e:	f013 f81f 	bl	801ab90 <sqrt>
 8007b52:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	r2 = sqrt(x_stop*x_stop + y_stop*y_stop);
 8007b56:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007b5a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007b5e:	f7f8 fd4b 	bl	80005f8 <__aeabi_dmul>
 8007b62:	4602      	mov	r2, r0
 8007b64:	460b      	mov	r3, r1
 8007b66:	4692      	mov	sl, r2
 8007b68:	469b      	mov	fp, r3
 8007b6a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007b6e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007b72:	f7f8 fd41 	bl	80005f8 <__aeabi_dmul>
 8007b76:	4602      	mov	r2, r0
 8007b78:	460b      	mov	r3, r1
 8007b7a:	4650      	mov	r0, sl
 8007b7c:	4659      	mov	r1, fp
 8007b7e:	f7f8 fb85 	bl	800028c <__adddf3>
 8007b82:	4602      	mov	r2, r0
 8007b84:	460b      	mov	r3, r1
 8007b86:	ec43 2b17 	vmov	d7, r2, r3
 8007b8a:	eeb0 0a47 	vmov.f32	s0, s14
 8007b8e:	eef0 0a67 	vmov.f32	s1, s15
 8007b92:	f012 fffd 	bl	801ab90 <sqrt>
 8007b96:	ed87 0b08 	vstr	d0, [r7, #32]

	if( 1.0 < fabs(r1 - r2)) {
 8007b9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007ba2:	f7f8 fb71 	bl	8000288 <__aeabi_dsub>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	460b      	mov	r3, r1
 8007baa:	4690      	mov	r8, r2
 8007bac:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8007bb0:	f04f 0200 	mov.w	r2, #0
 8007bb4:	4b84      	ldr	r3, [pc, #528]	; (8007dc8 <scaraInitCircle+0x358>)
 8007bb6:	4640      	mov	r0, r8
 8007bb8:	4649      	mov	r1, r9
 8007bba:	f7f8 ffad 	bl	8000b18 <__aeabi_dcmpgt>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <scaraInitCircle+0x158>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 8007bc4:	2306      	movs	r3, #6
 8007bc6:	e0ed      	b.n	8007da4 <scaraInitCircle+0x334>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 8007bc8:	a37b      	add	r3, pc, #492	; (adr r3, 8007db8 <scaraInitCircle+0x348>)
 8007bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007bd2:	f7f8 ff83 	bl	8000adc <__aeabi_dcmplt>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d109      	bne.n	8007bf0 <scaraInitCircle+0x180>
 8007bdc:	a376      	add	r3, pc, #472	; (adr r3, 8007db8 <scaraInitCircle+0x348>)
 8007bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007be6:	f7f8 ff79 	bl	8000adc <__aeabi_dcmplt>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d001      	beq.n	8007bf4 <scaraInitCircle+0x184>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 8007bf0:	2306      	movs	r3, #6
 8007bf2:	e0d7      	b.n	8007da4 <scaraInitCircle+0x334>
	}

	angle_start = atan2(y_start, x_start);
 8007bf4:	ed97 1b12 	vldr	d1, [r7, #72]	; 0x48
 8007bf8:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8007bfc:	f012 ffc6 	bl	801ab8c <atan2>
 8007c00:	ed87 0b06 	vstr	d0, [r7, #24]
	angle_stop  = atan2(y_stop, x_stop);
 8007c04:	ed97 1b0e 	vldr	d1, [r7, #56]	; 0x38
 8007c08:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8007c0c:	f012 ffbe 	bl	801ab8c <atan2>
 8007c10:	ed87 0b04 	vstr	d0, [r7, #16]
	delta_angle = angle_stop - angle_start;
 8007c14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007c1c:	f7f8 fb34 	bl	8000288 <__aeabi_dsub>
 8007c20:	4602      	mov	r2, r0
 8007c22:	460b      	mov	r3, r1
 8007c24:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	if (delta_angle < 0 && dir > 0) {
 8007c28:	f04f 0200 	mov.w	r2, #0
 8007c2c:	f04f 0300 	mov.w	r3, #0
 8007c30:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007c34:	f7f8 ff52 	bl	8000adc <__aeabi_dcmplt>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d015      	beq.n	8007c6a <scaraInitCircle+0x1fa>
 8007c3e:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	dd11      	ble.n	8007c6a <scaraInitCircle+0x1fa>
		delta_angle = 2*PI - fabs(delta_angle); //this state mean that the arc radius is over 180
 8007c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c48:	603b      	str	r3, [r7, #0]
 8007c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c50:	607b      	str	r3, [r7, #4]
 8007c52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c56:	a15a      	add	r1, pc, #360	; (adr r1, 8007dc0 <scaraInitCircle+0x350>)
 8007c58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c5c:	f7f8 fb14 	bl	8000288 <__aeabi_dsub>
 8007c60:	4602      	mov	r2, r0
 8007c62:	460b      	mov	r3, r1
 8007c64:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8007c68:	e01d      	b.n	8007ca6 <scaraInitCircle+0x236>
	}else if(delta_angle > 0 && dir < 0){
 8007c6a:	f04f 0200 	mov.w	r2, #0
 8007c6e:	f04f 0300 	mov.w	r3, #0
 8007c72:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007c76:	f7f8 ff4f 	bl	8000b18 <__aeabi_dcmpgt>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d012      	beq.n	8007ca6 <scaraInitCircle+0x236>
 8007c80:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	da0e      	bge.n	8007ca6 <scaraInitCircle+0x236>
		delta_angle = 2*PI - fabs(delta_angle);
 8007c88:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8007c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c8c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8007c90:	4622      	mov	r2, r4
 8007c92:	462b      	mov	r3, r5
 8007c94:	a14a      	add	r1, pc, #296	; (adr r1, 8007dc0 <scaraInitCircle+0x350>)
 8007c96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c9a:	f7f8 faf5 	bl	8000288 <__aeabi_dsub>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	}
	if(delta_angle*dir < 0){
 8007ca6:	f8d7 02c0 	ldr.w	r0, [r7, #704]	; 0x2c0
 8007caa:	f7f8 fc3b 	bl	8000524 <__aeabi_i2d>
 8007cae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007cb2:	f7f8 fca1 	bl	80005f8 <__aeabi_dmul>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	460b      	mov	r3, r1
 8007cba:	4610      	mov	r0, r2
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	f04f 0200 	mov.w	r2, #0
 8007cc2:	f04f 0300 	mov.w	r3, #0
 8007cc6:	f7f8 ff09 	bl	8000adc <__aeabi_dcmplt>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d005      	beq.n	8007cdc <scaraInitCircle+0x26c>
		delta_angle = fabs(delta_angle);
 8007cd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cd2:	653b      	str	r3, [r7, #80]	; 0x50
 8007cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cda:	657b      	str	r3, [r7, #84]	; 0x54

//	if ( 0 > dir) {
//		delta_angle = 2*PI - delta_angle;
//	}
	// Init circle params
	circle->dir = dir;
 8007cdc:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007ce0:	b25a      	sxtb	r2, r3
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 8007ce6:	68f9      	ldr	r1, [r7, #12]
 8007ce8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007cec:	e9c1 2302 	strd	r2, r3, [r1, #8]
	circle->angle_start = angle_start;
 8007cf0:	68f9      	ldr	r1, [r7, #12]
 8007cf2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cf6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	circle->angle_stop  = angle_stop;
 8007cfa:	68f9      	ldr	r1, [r7, #12]
 8007cfc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007d00:	e9c1 2306 	strd	r2, r3, [r1, #24]
	circle->total_angle = delta_angle;
 8007d04:	68f9      	ldr	r1, [r7, #12]
 8007d06:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007d0a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 8007d0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d12:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007d16:	f7f8 fc6f 	bl	80005f8 <__aeabi_dmul>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	68f9      	ldr	r1, [r7, #12]
 8007d20:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	circle->x0 = start.x;
 8007d24:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8007d28:	68f9      	ldr	r1, [r7, #12]
 8007d2a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	circle->y0 = start.y;
 8007d2e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8007d32:	68f9      	ldr	r1, [r7, #12]
 8007d34:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	circle->x1 = end.x;
 8007d38:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8007d3c:	68f9      	ldr	r1, [r7, #12]
 8007d3e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	circle->y1 = end.y;
 8007d42:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8007d46:	68f9      	ldr	r1, [r7, #12]
 8007d48:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	circle->xi = center.x;
 8007d4c:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8007d50:	68f9      	ldr	r1, [r7, #12]
 8007d52:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	circle->yi = center.y;
 8007d56:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8007d5a:	68f9      	ldr	r1, [r7, #12]
 8007d5c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	circle->z0 = start.z;
 8007d60:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007d64:	68f9      	ldr	r1, [r7, #12]
 8007d66:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	circle->z1 = start.z;
 8007d6a:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007d6e:	68f9      	ldr	r1, [r7, #12]
 8007d70:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	circle->zi = start.z;
 8007d74:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007d78:	68f9      	ldr	r1, [r7, #12]
 8007d7a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	circle->x_current = circle->x0;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d84:	68f9      	ldr	r1, [r7, #12]
 8007d86:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	circle->y_current = circle->y0;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8007d90:	68f9      	ldr	r1, [r7, #12]
 8007d92:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	circle->z_current = circle->z0;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007d9c:	68f9      	ldr	r1, [r7, #12]
 8007d9e:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

	return SCARA_STATUS_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	375c      	adds	r7, #92	; 0x5c
 8007da8:	46bd      	mov	sp, r7
 8007daa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dae:	b002      	add	sp, #8
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	f3af 8000 	nop.w
 8007db8:	9999999a 	.word	0x9999999a
 8007dbc:	3fb99999 	.word	0x3fb99999
 8007dc0:	60000000 	.word	0x60000000
 8007dc4:	401921fb 	.word	0x401921fb
 8007dc8:	3ff00000 	.word	0x3ff00000

08007dcc <scaraInitLinear>:

SCARA_StatusTypeDef scaraInitLinear(Trajectory_Linear_TypeDef *linear, Trajectory_TargetTypeDef target, double total_s,
									ModeInitTypeDef modeinit, double additional_factor)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6178      	str	r0, [r7, #20]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	ed87 0b02 	vstr	d0, [r7, #8]
 8007dda:	ed87 1b00 	vstr	d1, [r7]
 8007dde:	74fb      	strb	r3, [r7, #19]
 8007de0:	4613      	mov	r3, r2
 8007de2:	74bb      	strb	r3, [r7, #18]

	if(target == TRAJECTORY_3D){
 8007de4:	7cfb      	ldrb	r3, [r7, #19]
 8007de6:	2b04      	cmp	r3, #4
 8007de8:	d004      	beq.n	8007df4 <scaraInitLinear+0x28>

	}else if(target == TRAJECTORY_ROLL){
 8007dea:	7cfb      	ldrb	r3, [r7, #19]
 8007dec:	2b05      	cmp	r3, #5
 8007dee:	d001      	beq.n	8007df4 <scaraInitLinear+0x28>

	}else{
		return SCARA_STATUS_ERROR_PARA;
 8007df0:	2306      	movs	r3, #6
 8007df2:	e032      	b.n	8007e5a <scaraInitLinear+0x8e>
	}

	if(modeinit == DUTY_MODE_INIT_QT){
 8007df4:	7cbb      	ldrb	r3, [r7, #18]
 8007df6:	2b03      	cmp	r3, #3
 8007df8:	d110      	bne.n	8007e1c <scaraInitLinear+0x50>
		linear->constant_v = total_s / additional_factor;
 8007dfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e02:	f7f8 fd23 	bl	800084c <__aeabi_ddiv>
 8007e06:	4602      	mov	r2, r0
 8007e08:	460b      	mov	r3, r1
 8007e0a:	6979      	ldr	r1, [r7, #20]
 8007e0c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		linear->Tf = additional_factor;
 8007e10:	6979      	ldr	r1, [r7, #20]
 8007e12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e16:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8007e1a:	e01d      	b.n	8007e58 <scaraInitLinear+0x8c>
		//linear->number_of_sample = ceilf(additional_factor / T_SAMPLING); // ceiling
	}else if(modeinit == DUTY_MODE_INIT_QV){
 8007e1c:	7cbb      	ldrb	r3, [r7, #18]
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d118      	bne.n	8007e54 <scaraInitLinear+0x88>
		linear->constant_v = additional_factor * V_MOVE_MAX;
 8007e22:	f04f 0200 	mov.w	r2, #0
 8007e26:	4b0f      	ldr	r3, [pc, #60]	; (8007e64 <scaraInitLinear+0x98>)
 8007e28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e2c:	f7f8 fbe4 	bl	80005f8 <__aeabi_dmul>
 8007e30:	4602      	mov	r2, r0
 8007e32:	460b      	mov	r3, r1
 8007e34:	6979      	ldr	r1, [r7, #20]
 8007e36:	e9c1 2302 	strd	r2, r3, [r1, #8]
		linear->Tf = total_s / linear->constant_v;
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007e40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e44:	f7f8 fd02 	bl	800084c <__aeabi_ddiv>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	6979      	ldr	r1, [r7, #20]
 8007e4e:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8007e52:	e001      	b.n	8007e58 <scaraInitLinear+0x8c>
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8007e54:	2306      	movs	r3, #6
 8007e56:	e000      	b.n	8007e5a <scaraInitLinear+0x8e>
	}

	return SCARA_STATUS_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	40877000 	.word	0x40877000

08007e68 <scaraInitLSPB1>:
SCARA_StatusTypeDef	scaraInitLSPB1		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double additional_factor){
 8007e68:	b5b0      	push	{r4, r5, r7, lr}
 8007e6a:	b096      	sub	sp, #88	; 0x58
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	61f8      	str	r0, [r7, #28]
 8007e70:	460b      	mov	r3, r1
 8007e72:	ed87 0b04 	vstr	d0, [r7, #16]
 8007e76:	ed87 1b02 	vstr	d1, [r7, #8]
 8007e7a:	ed87 2b00 	vstr	d2, [r7]
 8007e7e:	76fb      	strb	r3, [r7, #27]
 8007e80:	4613      	mov	r3, r2
 8007e82:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	if(total_s < 0){
 8007e84:	f04f 0200 	mov.w	r2, #0
 8007e88:	f04f 0300 	mov.w	r3, #0
 8007e8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007e90:	f7f8 fe24 	bl	8000adc <__aeabi_dcmplt>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d009      	beq.n	8007eae <scaraInitLSPB1+0x46>
		total_s = -total_s;
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	613b      	str	r3, [r7, #16]
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007ea4:	617b      	str	r3, [r7, #20]
		lspb->dir= -1;
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	22ff      	movs	r2, #255	; 0xff
 8007eaa:	701a      	strb	r2, [r3, #0]
 8007eac:	e002      	b.n	8007eb4 <scaraInitLSPB1+0x4c>
	}else{
		lspb->dir= 1;
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	701a      	strb	r2, [r3, #0]
	}
	if(target == TRAJECTORY_3D){
 8007eb4:	7efb      	ldrb	r3, [r7, #27]
 8007eb6:	2b04      	cmp	r3, #4
 8007eb8:	d12c      	bne.n	8007f14 <scaraInitLSPB1+0xac>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007eba:	7ebb      	ldrb	r3, [r7, #26]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d10f      	bne.n	8007ee0 <scaraInitLSPB1+0x78>
			v_design = V_MOVE_MAX*v_factor;
 8007ec0:	f04f 0200 	mov.w	r2, #0
 8007ec4:	4b98      	ldr	r3, [pc, #608]	; (8008128 <scaraInitLSPB1+0x2c0>)
 8007ec6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007eca:	f7f8 fb95 	bl	80005f8 <__aeabi_dmul>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 8007ed6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eda:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007ede:	e073      	b.n	8007fc8 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 8007ee0:	7ebb      	ldrb	r3, [r7, #26]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d170      	bne.n	8007fc8 <scaraInitLSPB1+0x160>
			a_design = A_MOVE_MAX*additional_factor;
 8007ee6:	f04f 0200 	mov.w	r2, #0
 8007eea:	4b90      	ldr	r3, [pc, #576]	; (800812c <scaraInitLSPB1+0x2c4>)
 8007eec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ef0:	f7f8 fb82 	bl	80005f8 <__aeabi_dmul>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			v_design = V_MOVE_MAX*v_factor;
 8007efc:	f04f 0200 	mov.w	r2, #0
 8007f00:	4b89      	ldr	r3, [pc, #548]	; (8008128 <scaraInitLSPB1+0x2c0>)
 8007f02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f06:	f7f8 fb77 	bl	80005f8 <__aeabi_dmul>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8007f12:	e059      	b.n	8007fc8 <scaraInitLSPB1+0x160>
		}
	}else if(target == TRAJECTORY_J0){
 8007f14:	7efb      	ldrb	r3, [r7, #27]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d112      	bne.n	8007f40 <scaraInitLSPB1+0xd8>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007f1a:	7ebb      	ldrb	r3, [r7, #26]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d153      	bne.n	8007fc8 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J0*v_factor;
 8007f20:	a373      	add	r3, pc, #460	; (adr r3, 80080f0 <scaraInitLSPB1+0x288>)
 8007f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f2a:	f7f8 fb65 	bl	80005f8 <__aeabi_dmul>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
 8007f32:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 8007f36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f3a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007f3e:	e043      	b.n	8007fc8 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J1){
 8007f40:	7efb      	ldrb	r3, [r7, #27]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d112      	bne.n	8007f6c <scaraInitLSPB1+0x104>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007f46:	7ebb      	ldrb	r3, [r7, #26]
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d13d      	bne.n	8007fc8 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J1*v_factor;
 8007f4c:	a368      	add	r3, pc, #416	; (adr r3, 80080f0 <scaraInitLSPB1+0x288>)
 8007f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f56:	f7f8 fb4f 	bl	80005f8 <__aeabi_dmul>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 8007f62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f66:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007f6a:	e02d      	b.n	8007fc8 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J2){
 8007f6c:	7efb      	ldrb	r3, [r7, #27]
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d112      	bne.n	8007f98 <scaraInitLSPB1+0x130>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007f72:	7ebb      	ldrb	r3, [r7, #26]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d127      	bne.n	8007fc8 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J2*v_factor;
 8007f78:	a35f      	add	r3, pc, #380	; (adr r3, 80080f8 <scaraInitLSPB1+0x290>)
 8007f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f82:	f7f8 fb39 	bl	80005f8 <__aeabi_dmul>
 8007f86:	4602      	mov	r2, r0
 8007f88:	460b      	mov	r3, r1
 8007f8a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 8007f8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f92:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007f96:	e017      	b.n	8007fc8 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J3){
 8007f98:	7efb      	ldrb	r3, [r7, #27]
 8007f9a:	2b03      	cmp	r3, #3
 8007f9c:	d112      	bne.n	8007fc4 <scaraInitLSPB1+0x15c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007f9e:	7ebb      	ldrb	r3, [r7, #26]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d111      	bne.n	8007fc8 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J3*v_factor;
 8007fa4:	a356      	add	r3, pc, #344	; (adr r3, 8008100 <scaraInitLSPB1+0x298>)
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007fae:	f7f8 fb23 	bl	80005f8 <__aeabi_dmul>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 8007fba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fbe:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007fc2:	e001      	b.n	8007fc8 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8007fc4:	2306      	movs	r3, #6
 8007fc6:	e201      	b.n	80083cc <scaraInitLSPB1+0x564>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 8007fc8:	7ebb      	ldrb	r3, [r7, #26]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	f040 80f2 	bne.w	80081b4 <scaraInitLSPB1+0x34c>
		if(tf < 0.1 && v_design > 3){ //check if time valid or not
 8007fd0:	a34d      	add	r3, pc, #308	; (adr r3, 8008108 <scaraInitLSPB1+0x2a0>)
 8007fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007fda:	f7f8 fd7f 	bl	8000adc <__aeabi_dcmplt>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d01d      	beq.n	8008020 <scaraInitLSPB1+0x1b8>
 8007fe4:	f04f 0200 	mov.w	r2, #0
 8007fe8:	4b51      	ldr	r3, [pc, #324]	; (8008130 <scaraInitLSPB1+0x2c8>)
 8007fea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007fee:	f7f8 fd93 	bl	8000b18 <__aeabi_dcmpgt>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d013      	beq.n	8008020 <scaraInitLSPB1+0x1b8>
			tf = 1.5*total_s/v_design;
 8007ff8:	f04f 0200 	mov.w	r2, #0
 8007ffc:	4b4d      	ldr	r3, [pc, #308]	; (8008134 <scaraInitLSPB1+0x2cc>)
 8007ffe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008002:	f7f8 faf9 	bl	80005f8 <__aeabi_dmul>
 8008006:	4602      	mov	r2, r0
 8008008:	460b      	mov	r3, r1
 800800a:	4610      	mov	r0, r2
 800800c:	4619      	mov	r1, r3
 800800e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008012:	f7f8 fc1b 	bl	800084c <__aeabi_ddiv>
 8008016:	4602      	mov	r2, r0
 8008018:	460b      	mov	r3, r1
 800801a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800801e:	e0a4      	b.n	800816a <scaraInitLSPB1+0x302>
			//return SCARA_STATUS_ERROR_OVER_VELOC;
		}else if(v_design < 0.1 && tf > 0.15){ //check if velocity valid or not
 8008020:	a339      	add	r3, pc, #228	; (adr r3, 8008108 <scaraInitLSPB1+0x2a0>)
 8008022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008026:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800802a:	f7f8 fd57 	bl	8000adc <__aeabi_dcmplt>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d01d      	beq.n	8008070 <scaraInitLSPB1+0x208>
 8008034:	a336      	add	r3, pc, #216	; (adr r3, 8008110 <scaraInitLSPB1+0x2a8>)
 8008036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800803e:	f7f8 fd6b 	bl	8000b18 <__aeabi_dcmpgt>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d013      	beq.n	8008070 <scaraInitLSPB1+0x208>
			v_design = 1.5*total_s/tf;
 8008048:	f04f 0200 	mov.w	r2, #0
 800804c:	4b39      	ldr	r3, [pc, #228]	; (8008134 <scaraInitLSPB1+0x2cc>)
 800804e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008052:	f7f8 fad1 	bl	80005f8 <__aeabi_dmul>
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	4610      	mov	r0, r2
 800805c:	4619      	mov	r1, r3
 800805e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008062:	f7f8 fbf3 	bl	800084c <__aeabi_ddiv>
 8008066:	4602      	mov	r2, r0
 8008068:	460b      	mov	r3, r1
 800806a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 800806e:	e07c      	b.n	800816a <scaraInitLSPB1+0x302>
		}else if(v_design < 0.1 && tf < 0.1){
 8008070:	a325      	add	r3, pc, #148	; (adr r3, 8008108 <scaraInitLSPB1+0x2a0>)
 8008072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008076:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800807a:	f7f8 fd2f 	bl	8000adc <__aeabi_dcmplt>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00b      	beq.n	800809c <scaraInitLSPB1+0x234>
 8008084:	a320      	add	r3, pc, #128	; (adr r3, 8008108 <scaraInitLSPB1+0x2a0>)
 8008086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800808e:	f7f8 fd25 	bl	8000adc <__aeabi_dcmplt>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d001      	beq.n	800809c <scaraInitLSPB1+0x234>
			return SCARA_STATUS_ERROR_OVER_VELOC;
 8008098:	2309      	movs	r3, #9
 800809a:	e197      	b.n	80083cc <scaraInitLSPB1+0x564>
		}
		else{
			if(tf < 0.001){
 800809c:	a31e      	add	r3, pc, #120	; (adr r3, 8008118 <scaraInitLSPB1+0x2b0>)
 800809e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80080a6:	f7f8 fd19 	bl	8000adc <__aeabi_dcmplt>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d001      	beq.n	80080b4 <scaraInitLSPB1+0x24c>
				return SCARA_STATUS_ERROR_OVER_VELOC;
 80080b0:	2309      	movs	r3, #9
 80080b2:	e18b      	b.n	80083cc <scaraInitLSPB1+0x564>
			}else{
				v_lim = total_s/tf;
 80080b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80080b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80080bc:	f7f8 fbc6 	bl	800084c <__aeabi_ddiv>
 80080c0:	4602      	mov	r2, r0
 80080c2:	460b      	mov	r3, r1
 80080c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			if(v_design < 1.1*v_lim){ //the accelaration part is too large
 80080c8:	a315      	add	r3, pc, #84	; (adr r3, 8008120 <scaraInitLSPB1+0x2b8>)
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80080d2:	f7f8 fa91 	bl	80005f8 <__aeabi_dmul>
 80080d6:	4602      	mov	r2, r0
 80080d8:	460b      	mov	r3, r1
 80080da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80080de:	f7f8 fcfd 	bl	8000adc <__aeabi_dcmplt>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d027      	beq.n	8008138 <scaraInitLSPB1+0x2d0>
				return SCARA_STATUS_ERROR_OVER_ACCEL;
 80080e8:	230a      	movs	r3, #10
 80080ea:	e16f      	b.n	80083cc <scaraInitLSPB1+0x564>
 80080ec:	f3af 8000 	nop.w
 80080f0:	14000000 	.word	0x14000000
 80080f4:	4000f6f0 	.word	0x4000f6f0
 80080f8:	00000000 	.word	0x00000000
 80080fc:	405c2000 	.word	0x405c2000
 8008100:	6b259425 	.word	0x6b259425
 8008104:	40069b91 	.word	0x40069b91
 8008108:	9999999a 	.word	0x9999999a
 800810c:	3fb99999 	.word	0x3fb99999
 8008110:	33333333 	.word	0x33333333
 8008114:	3fc33333 	.word	0x3fc33333
 8008118:	d2f1a9fc 	.word	0xd2f1a9fc
 800811c:	3f50624d 	.word	0x3f50624d
 8008120:	9999999a 	.word	0x9999999a
 8008124:	3ff19999 	.word	0x3ff19999
 8008128:	40877000 	.word	0x40877000
 800812c:	407f4000 	.word	0x407f4000
 8008130:	40080000 	.word	0x40080000
 8008134:	3ff80000 	.word	0x3ff80000
			}else if(v_design > 2*v_lim){
 8008138:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	f7f8 f8a4 	bl	800028c <__adddf3>
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800814c:	f7f8 fce4 	bl	8000b18 <__aeabi_dcmpgt>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d009      	beq.n	800816a <scaraInitLSPB1+0x302>
				v_design = 2*v_lim;
 8008156:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	f7f8 f895 	bl	800028c <__adddf3>
 8008162:	4602      	mov	r2, r0
 8008164:	460b      	mov	r3, r1
 8008166:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			}else{

			}
		}
		ta = tf - total_s/v_design;
 800816a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800816e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008172:	f7f8 fb6b 	bl	800084c <__aeabi_ddiv>
 8008176:	4602      	mov	r2, r0
 8008178:	460b      	mov	r3, r1
 800817a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800817e:	f7f8 f883 	bl	8000288 <__aeabi_dsub>
 8008182:	4602      	mov	r2, r0
 8008184:	460b      	mov	r3, r1
 8008186:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		a_design = v_design/ta;
 800818a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800818e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008192:	f7f8 fb5b 	bl	800084c <__aeabi_ddiv>
 8008196:	4602      	mov	r2, r0
 8008198:	460b      	mov	r3, r1
 800819a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		td = tf - ta;
 800819e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80081a2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80081a6:	f7f8 f86f 	bl	8000288 <__aeabi_dsub>
 80081aa:	4602      	mov	r2, r0
 80081ac:	460b      	mov	r3, r1
 80081ae:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80081b2:	e0a9      	b.n	8008308 <scaraInitLSPB1+0x4a0>

	}else if(modeinit == DUTY_MODE_INIT_QVA){
 80081b4:	7ebb      	ldrb	r3, [r7, #26]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	f040 80a6 	bne.w	8008308 <scaraInitLSPB1+0x4a0>
		//check qva condition
		if(total_s*a_design > v_design*v_design){ //condition for ta smaller than td
 80081bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80081c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80081c4:	f7f8 fa18 	bl	80005f8 <__aeabi_dmul>
 80081c8:	4602      	mov	r2, r0
 80081ca:	460b      	mov	r3, r1
 80081cc:	4614      	mov	r4, r2
 80081ce:	461d      	mov	r5, r3
 80081d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80081d4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80081d8:	f7f8 fa0e 	bl	80005f8 <__aeabi_dmul>
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	4620      	mov	r0, r4
 80081e2:	4629      	mov	r1, r5
 80081e4:	f7f8 fc98 	bl	8000b18 <__aeabi_dcmpgt>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d058      	beq.n	80082a0 <scaraInitLSPB1+0x438>
			if(total_s/v_design < 0.3){ //td too small
 80081ee:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80081f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80081f6:	f7f8 fb29 	bl	800084c <__aeabi_ddiv>
 80081fa:	4602      	mov	r2, r0
 80081fc:	460b      	mov	r3, r1
 80081fe:	4610      	mov	r0, r2
 8008200:	4619      	mov	r1, r3
 8008202:	a375      	add	r3, pc, #468	; (adr r3, 80083d8 <scaraInitLSPB1+0x570>)
 8008204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008208:	f7f8 fc68 	bl	8000adc <__aeabi_dcmplt>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00a      	beq.n	8008228 <scaraInitLSPB1+0x3c0>
				//recalculate v_design
				v_design = total_s/0.3;
 8008212:	a371      	add	r3, pc, #452	; (adr r3, 80083d8 <scaraInitLSPB1+0x570>)
 8008214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008218:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800821c:	f7f8 fb16 	bl	800084c <__aeabi_ddiv>
 8008220:	4602      	mov	r2, r0
 8008222:	460b      	mov	r3, r1
 8008224:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			}
			if(v_design/a_design < 0.1){ //ta is too small
 8008228:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800822c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008230:	f7f8 fb0c 	bl	800084c <__aeabi_ddiv>
 8008234:	4602      	mov	r2, r0
 8008236:	460b      	mov	r3, r1
 8008238:	4610      	mov	r0, r2
 800823a:	4619      	mov	r1, r3
 800823c:	a368      	add	r3, pc, #416	; (adr r3, 80083e0 <scaraInitLSPB1+0x578>)
 800823e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008242:	f7f8 fc4b 	bl	8000adc <__aeabi_dcmplt>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00a      	beq.n	8008262 <scaraInitLSPB1+0x3fa>
				//recalculate a_design
				a_design = v_design/0.1;
 800824c:	a364      	add	r3, pc, #400	; (adr r3, 80083e0 <scaraInitLSPB1+0x578>)
 800824e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008252:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008256:	f7f8 faf9 	bl	800084c <__aeabi_ddiv>
 800825a:	4602      	mov	r2, r0
 800825c:	460b      	mov	r3, r1
 800825e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			}
			ta = v_design/a_design;
 8008262:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008266:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800826a:	f7f8 faef 	bl	800084c <__aeabi_ddiv>
 800826e:	4602      	mov	r2, r0
 8008270:	460b      	mov	r3, r1
 8008272:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			td = total_s/v_design;
 8008276:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800827a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800827e:	f7f8 fae5 	bl	800084c <__aeabi_ddiv>
 8008282:	4602      	mov	r2, r0
 8008284:	460b      	mov	r3, r1
 8008286:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			tf = ta + td;
 800828a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800828e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008292:	f7f7 fffb 	bl	800028c <__adddf3>
 8008296:	4602      	mov	r2, r0
 8008298:	460b      	mov	r3, r1
 800829a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800829e:	e033      	b.n	8008308 <scaraInitLSPB1+0x4a0>
//				td = total_s/v_design;
//				tf = ta + td;
//			}

		}else{
			tf = 2*total_s/v_design;
 80082a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80082a4:	4602      	mov	r2, r0
 80082a6:	460b      	mov	r3, r1
 80082a8:	f7f7 fff0 	bl	800028c <__adddf3>
 80082ac:	4602      	mov	r2, r0
 80082ae:	460b      	mov	r3, r1
 80082b0:	4610      	mov	r0, r2
 80082b2:	4619      	mov	r1, r3
 80082b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80082b8:	f7f8 fac8 	bl	800084c <__aeabi_ddiv>
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			ta = tf/2;
 80082c4:	f04f 0200 	mov.w	r2, #0
 80082c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80082cc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80082d0:	f7f8 fabc 	bl	800084c <__aeabi_ddiv>
 80082d4:	4602      	mov	r2, r0
 80082d6:	460b      	mov	r3, r1
 80082d8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			td = tf/2;
 80082dc:	f04f 0200 	mov.w	r2, #0
 80082e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80082e4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80082e8:	f7f8 fab0 	bl	800084c <__aeabi_ddiv>
 80082ec:	4602      	mov	r2, r0
 80082ee:	460b      	mov	r3, r1
 80082f0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			a_design = v_design/ta;
 80082f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80082f8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80082fc:	f7f8 faa6 	bl	800084c <__aeabi_ddiv>
 8008300:	4602      	mov	r2, r0
 8008302:	460b      	mov	r3, r1
 8008304:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		}
	}
	no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8008308:	a337      	add	r3, pc, #220	; (adr r3, 80083e8 <scaraInitLSPB1+0x580>)
 800830a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008312:	f7f8 fa9b 	bl	800084c <__aeabi_ddiv>
 8008316:	4602      	mov	r2, r0
 8008318:	460b      	mov	r3, r1
 800831a:	4610      	mov	r0, r2
 800831c:	4619      	mov	r1, r3
 800831e:	f7f8 fc63 	bl	8000be8 <__aeabi_d2f>
 8008322:	4603      	mov	r3, r0
 8008324:	ee00 3a10 	vmov	s0, r3
 8008328:	f012 fbee 	bl	801ab08 <ceilf>
 800832c:	eef0 7a40 	vmov.f32	s15, s0
 8008330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008334:	ee17 3a90 	vmov	r3, s15
 8008338:	627b      	str	r3, [r7, #36]	; 0x24
	 // Init lspb params

	 lspb->s0 = 0;
 800833a:	69f9      	ldr	r1, [r7, #28]
 800833c:	f04f 0200 	mov.w	r2, #0
 8008340:	f04f 0300 	mov.w	r3, #0
 8008344:	e9c1 2302 	strd	r2, r3, [r1, #8]
	 lspb->s1 = total_s;
 8008348:	69f9      	ldr	r1, [r7, #28]
 800834a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800834e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	 lspb->Ta = ta;
 8008352:	69f9      	ldr	r1, [r7, #28]
 8008354:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008358:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 lspb->Td = td;
 800835c:	69f9      	ldr	r1, [r7, #28]
 800835e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008362:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	 lspb->Tf = tf;
 8008366:	69f9      	ldr	r1, [r7, #28]
 8008368:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800836c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	 lspb->a_design = a_design;
 8008370:	69f9      	ldr	r1, [r7, #28]
 8008372:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008376:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	 lspb->v_design = v_design;
 800837a:	69f9      	ldr	r1, [r7, #28]
 800837c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008380:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	 lspb->v_lim = v_design;
 8008384:	69f9      	ldr	r1, [r7, #28]
 8008386:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800838a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 lspb->v0 = 0;
 800838e:	69f9      	ldr	r1, [r7, #28]
 8008390:	f04f 0200 	mov.w	r2, #0
 8008394:	f04f 0300 	mov.w	r3, #0
 8008398:	e9c1 2306 	strd	r2, r3, [r1, #24]
	 lspb->v1 = 0;
 800839c:	69f9      	ldr	r1, [r7, #28]
 800839e:	f04f 0200 	mov.w	r2, #0
 80083a2:	f04f 0300 	mov.w	r3, #0
 80083a6:	e9c1 2308 	strd	r2, r3, [r1, #32]
	 lspb->num_of_sampling = no_sample;
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ae:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80083bc:	f7f7 ff64 	bl	8000288 <__aeabi_dsub>
 80083c0:	4602      	mov	r2, r0
 80083c2:	460b      	mov	r3, r1
 80083c4:	69f9      	ldr	r1, [r7, #28]
 80083c6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	 return SCARA_STATUS_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3758      	adds	r7, #88	; 0x58
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bdb0      	pop	{r4, r5, r7, pc}
 80083d4:	f3af 8000 	nop.w
 80083d8:	33333333 	.word	0x33333333
 80083dc:	3fd33333 	.word	0x3fd33333
 80083e0:	9999999a 	.word	0x9999999a
 80083e4:	3fb99999 	.word	0x3fb99999
 80083e8:	40000000 	.word	0x40000000
 80083ec:	3f847ae1 	.word	0x3f847ae1

080083f0 <scaraInitScurve1>:
												Trajectory_TargetTypeDef target,
												double total_s,
												ModeInitTypeDef modeinit,
												double v_factor,
												double additional_factor)
{
 80083f0:	b5b0      	push	{r4, r5, r7, lr}
 80083f2:	b094      	sub	sp, #80	; 0x50
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	61f8      	str	r0, [r7, #28]
 80083f8:	460b      	mov	r3, r1
 80083fa:	ed87 0b04 	vstr	d0, [r7, #16]
 80083fe:	ed87 1b02 	vstr	d1, [r7, #8]
 8008402:	ed87 2b00 	vstr	d2, [r7]
 8008406:	76fb      	strb	r3, [r7, #27]
 8008408:	4613      	mov	r3, r2
 800840a:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	if(total_s < 0){
 800840c:	f04f 0200 	mov.w	r2, #0
 8008410:	f04f 0300 	mov.w	r3, #0
 8008414:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008418:	f7f8 fb60 	bl	8000adc <__aeabi_dcmplt>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d009      	beq.n	8008436 <scaraInitScurve1+0x46>
		total_s = -total_s;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	613b      	str	r3, [r7, #16]
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800842c:	617b      	str	r3, [r7, #20]
		scurve->dir= -1;
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	22ff      	movs	r2, #255	; 0xff
 8008432:	701a      	strb	r2, [r3, #0]
 8008434:	e002      	b.n	800843c <scaraInitScurve1+0x4c>
	}else{
		scurve->dir= 1;
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	2201      	movs	r2, #1
 800843a:	701a      	strb	r2, [r3, #0]
	}
	if(target == TRAJECTORY_3D){
 800843c:	7efb      	ldrb	r3, [r7, #27]
 800843e:	2b04      	cmp	r3, #4
 8008440:	d12c      	bne.n	800849c <scaraInitScurve1+0xac>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8008442:	7ebb      	ldrb	r3, [r7, #26]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d10f      	bne.n	8008468 <scaraInitScurve1+0x78>
			v_design = V_MOVE_MAX*v_factor;
 8008448:	f04f 0200 	mov.w	r2, #0
 800844c:	4b90      	ldr	r3, [pc, #576]	; (8008690 <scaraInitScurve1+0x2a0>)
 800844e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008452:	f7f8 f8d1 	bl	80005f8 <__aeabi_dmul>
 8008456:	4602      	mov	r2, r0
 8008458:	460b      	mov	r3, r1
 800845a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 800845e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008462:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008466:	e073      	b.n	8008550 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 8008468:	7ebb      	ldrb	r3, [r7, #26]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d170      	bne.n	8008550 <scaraInitScurve1+0x160>
			a_design = A_MOVE_MAX*additional_factor;
 800846e:	f04f 0200 	mov.w	r2, #0
 8008472:	4b88      	ldr	r3, [pc, #544]	; (8008694 <scaraInitScurve1+0x2a4>)
 8008474:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008478:	f7f8 f8be 	bl	80005f8 <__aeabi_dmul>
 800847c:	4602      	mov	r2, r0
 800847e:	460b      	mov	r3, r1
 8008480:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			v_design = V_MOVE_MAX*v_factor;
 8008484:	f04f 0200 	mov.w	r2, #0
 8008488:	4b81      	ldr	r3, [pc, #516]	; (8008690 <scaraInitScurve1+0x2a0>)
 800848a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800848e:	f7f8 f8b3 	bl	80005f8 <__aeabi_dmul>
 8008492:	4602      	mov	r2, r0
 8008494:	460b      	mov	r3, r1
 8008496:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800849a:	e059      	b.n	8008550 <scaraInitScurve1+0x160>
		}
	}else if(target == TRAJECTORY_J0){
 800849c:	7efb      	ldrb	r3, [r7, #27]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d112      	bne.n	80084c8 <scaraInitScurve1+0xd8>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80084a2:	7ebb      	ldrb	r3, [r7, #26]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d153      	bne.n	8008550 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J0*v_factor;
 80084a8:	a36d      	add	r3, pc, #436	; (adr r3, 8008660 <scaraInitScurve1+0x270>)
 80084aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80084b2:	f7f8 f8a1 	bl	80005f8 <__aeabi_dmul>
 80084b6:	4602      	mov	r2, r0
 80084b8:	460b      	mov	r3, r1
 80084ba:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 80084be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084c2:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80084c6:	e043      	b.n	8008550 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J1){
 80084c8:	7efb      	ldrb	r3, [r7, #27]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d112      	bne.n	80084f4 <scaraInitScurve1+0x104>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80084ce:	7ebb      	ldrb	r3, [r7, #26]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d13d      	bne.n	8008550 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J1*v_factor;
 80084d4:	a362      	add	r3, pc, #392	; (adr r3, 8008660 <scaraInitScurve1+0x270>)
 80084d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80084de:	f7f8 f88b 	bl	80005f8 <__aeabi_dmul>
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 80084ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084ee:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80084f2:	e02d      	b.n	8008550 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J2){
 80084f4:	7efb      	ldrb	r3, [r7, #27]
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d112      	bne.n	8008520 <scaraInitScurve1+0x130>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80084fa:	7ebb      	ldrb	r3, [r7, #26]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d127      	bne.n	8008550 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J2*v_factor;
 8008500:	a359      	add	r3, pc, #356	; (adr r3, 8008668 <scaraInitScurve1+0x278>)
 8008502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008506:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800850a:	f7f8 f875 	bl	80005f8 <__aeabi_dmul>
 800850e:	4602      	mov	r2, r0
 8008510:	460b      	mov	r3, r1
 8008512:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 8008516:	e9d7 2300 	ldrd	r2, r3, [r7]
 800851a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800851e:	e017      	b.n	8008550 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J3){
 8008520:	7efb      	ldrb	r3, [r7, #27]
 8008522:	2b03      	cmp	r3, #3
 8008524:	d112      	bne.n	800854c <scaraInitScurve1+0x15c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8008526:	7ebb      	ldrb	r3, [r7, #26]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d111      	bne.n	8008550 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J3*v_factor;
 800852c:	a350      	add	r3, pc, #320	; (adr r3, 8008670 <scaraInitScurve1+0x280>)
 800852e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008532:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008536:	f7f8 f85f 	bl	80005f8 <__aeabi_dmul>
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 8008542:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008546:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800854a:	e001      	b.n	8008550 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 800854c:	2306      	movs	r3, #6
 800854e:	e24c      	b.n	80089ea <scaraInitScurve1+0x5fa>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 8008550:	7ebb      	ldrb	r3, [r7, #26]
 8008552:	2b01      	cmp	r3, #1
 8008554:	f040 80fc 	bne.w	8008750 <scaraInitScurve1+0x360>
		if(tf < 0.1 && v_design > 7.5){ //check if time valid or not
 8008558:	a347      	add	r3, pc, #284	; (adr r3, 8008678 <scaraInitScurve1+0x288>)
 800855a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008562:	f7f8 fabb 	bl	8000adc <__aeabi_dcmplt>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d01d      	beq.n	80085a8 <scaraInitScurve1+0x1b8>
 800856c:	f04f 0200 	mov.w	r2, #0
 8008570:	4b49      	ldr	r3, [pc, #292]	; (8008698 <scaraInitScurve1+0x2a8>)
 8008572:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008576:	f7f8 facf 	bl	8000b18 <__aeabi_dcmpgt>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d013      	beq.n	80085a8 <scaraInitScurve1+0x1b8>
			tf = 1.5*total_s/v_design;
 8008580:	f04f 0200 	mov.w	r2, #0
 8008584:	4b45      	ldr	r3, [pc, #276]	; (800869c <scaraInitScurve1+0x2ac>)
 8008586:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800858a:	f7f8 f835 	bl	80005f8 <__aeabi_dmul>
 800858e:	4602      	mov	r2, r0
 8008590:	460b      	mov	r3, r1
 8008592:	4610      	mov	r0, r2
 8008594:	4619      	mov	r1, r3
 8008596:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800859a:	f7f8 f957 	bl	800084c <__aeabi_ddiv>
 800859e:	4602      	mov	r2, r0
 80085a0:	460b      	mov	r3, r1
 80085a2:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80085a6:	e094      	b.n	80086d2 <scaraInitScurve1+0x2e2>
		}else if(v_design < 0.1 && tf > 0.15){ //check if velocity valid or not
 80085a8:	a333      	add	r3, pc, #204	; (adr r3, 8008678 <scaraInitScurve1+0x288>)
 80085aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80085b2:	f7f8 fa93 	bl	8000adc <__aeabi_dcmplt>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d01d      	beq.n	80085f8 <scaraInitScurve1+0x208>
 80085bc:	a330      	add	r3, pc, #192	; (adr r3, 8008680 <scaraInitScurve1+0x290>)
 80085be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80085c6:	f7f8 faa7 	bl	8000b18 <__aeabi_dcmpgt>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d013      	beq.n	80085f8 <scaraInitScurve1+0x208>
			v_design = 1.5*total_s/tf;
 80085d0:	f04f 0200 	mov.w	r2, #0
 80085d4:	4b31      	ldr	r3, [pc, #196]	; (800869c <scaraInitScurve1+0x2ac>)
 80085d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80085da:	f7f8 f80d 	bl	80005f8 <__aeabi_dmul>
 80085de:	4602      	mov	r2, r0
 80085e0:	460b      	mov	r3, r1
 80085e2:	4610      	mov	r0, r2
 80085e4:	4619      	mov	r1, r3
 80085e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80085ea:	f7f8 f92f 	bl	800084c <__aeabi_ddiv>
 80085ee:	4602      	mov	r2, r0
 80085f0:	460b      	mov	r3, r1
 80085f2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80085f6:	e06c      	b.n	80086d2 <scaraInitScurve1+0x2e2>
		}else if(tf < 0.1 && v_design < 0.1){
 80085f8:	a31f      	add	r3, pc, #124	; (adr r3, 8008678 <scaraInitScurve1+0x288>)
 80085fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008602:	f7f8 fa6b 	bl	8000adc <__aeabi_dcmplt>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00b      	beq.n	8008624 <scaraInitScurve1+0x234>
 800860c:	a31a      	add	r3, pc, #104	; (adr r3, 8008678 <scaraInitScurve1+0x288>)
 800860e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008612:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008616:	f7f8 fa61 	bl	8000adc <__aeabi_dcmplt>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d001      	beq.n	8008624 <scaraInitScurve1+0x234>
			return SCARA_STATUS_ERROR_OVER_VELOC;
 8008620:	2309      	movs	r3, #9
 8008622:	e1e2      	b.n	80089ea <scaraInitScurve1+0x5fa>
		}else{
			v_lim = total_s/tf;
 8008624:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008628:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800862c:	f7f8 f90e 	bl	800084c <__aeabi_ddiv>
 8008630:	4602      	mov	r2, r0
 8008632:	460b      	mov	r3, r1
 8008634:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			if(v_design < 1.1*v_lim){ // the accelaration part is too large
 8008638:	a313      	add	r3, pc, #76	; (adr r3, 8008688 <scaraInitScurve1+0x298>)
 800863a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008642:	f7f7 ffd9 	bl	80005f8 <__aeabi_dmul>
 8008646:	4602      	mov	r2, r0
 8008648:	460b      	mov	r3, r1
 800864a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800864e:	f7f8 fa45 	bl	8000adc <__aeabi_dcmplt>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d023      	beq.n	80086a0 <scaraInitScurve1+0x2b0>
				return SCARA_STATUS_ERROR_OVER_ACCEL;
 8008658:	230a      	movs	r3, #10
 800865a:	e1c6      	b.n	80089ea <scaraInitScurve1+0x5fa>
 800865c:	f3af 8000 	nop.w
 8008660:	14000000 	.word	0x14000000
 8008664:	4000f6f0 	.word	0x4000f6f0
 8008668:	00000000 	.word	0x00000000
 800866c:	405c2000 	.word	0x405c2000
 8008670:	6b259425 	.word	0x6b259425
 8008674:	40069b91 	.word	0x40069b91
 8008678:	9999999a 	.word	0x9999999a
 800867c:	3fb99999 	.word	0x3fb99999
 8008680:	33333333 	.word	0x33333333
 8008684:	3fc33333 	.word	0x3fc33333
 8008688:	9999999a 	.word	0x9999999a
 800868c:	3ff19999 	.word	0x3ff19999
 8008690:	40877000 	.word	0x40877000
 8008694:	407f4000 	.word	0x407f4000
 8008698:	401e0000 	.word	0x401e0000
 800869c:	3ff80000 	.word	0x3ff80000
			}else if(v_design > 2*v_lim){
 80086a0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80086a4:	4602      	mov	r2, r0
 80086a6:	460b      	mov	r3, r1
 80086a8:	f7f7 fdf0 	bl	800028c <__adddf3>
 80086ac:	4602      	mov	r2, r0
 80086ae:	460b      	mov	r3, r1
 80086b0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80086b4:	f7f8 fa30 	bl	8000b18 <__aeabi_dcmpgt>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d009      	beq.n	80086d2 <scaraInitScurve1+0x2e2>
				v_design = 2*v_lim;
 80086be:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80086c2:	4602      	mov	r2, r0
 80086c4:	460b      	mov	r3, r1
 80086c6:	f7f7 fde1 	bl	800028c <__adddf3>
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			}else{
	
			}
		}
		a_design = 2*v_design*v_design/(v_design*tf - total_s);
 80086d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80086d6:	4602      	mov	r2, r0
 80086d8:	460b      	mov	r3, r1
 80086da:	f7f7 fdd7 	bl	800028c <__adddf3>
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	4610      	mov	r0, r2
 80086e4:	4619      	mov	r1, r3
 80086e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80086ea:	f7f7 ff85 	bl	80005f8 <__aeabi_dmul>
 80086ee:	4602      	mov	r2, r0
 80086f0:	460b      	mov	r3, r1
 80086f2:	4614      	mov	r4, r2
 80086f4:	461d      	mov	r5, r3
 80086f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80086fa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80086fe:	f7f7 ff7b 	bl	80005f8 <__aeabi_dmul>
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	4610      	mov	r0, r2
 8008708:	4619      	mov	r1, r3
 800870a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800870e:	f7f7 fdbb 	bl	8000288 <__aeabi_dsub>
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	4620      	mov	r0, r4
 8008718:	4629      	mov	r1, r5
 800871a:	f7f8 f897 	bl	800084c <__aeabi_ddiv>
 800871e:	4602      	mov	r2, r0
 8008720:	460b      	mov	r3, r1
 8008722:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		ta = v_design/a_design;		
 8008726:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800872a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800872e:	f7f8 f88d 	bl	800084c <__aeabi_ddiv>
 8008732:	4602      	mov	r2, r0
 8008734:	460b      	mov	r3, r1
 8008736:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		td = tf - ta;
 800873a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800873e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008742:	f7f7 fda1 	bl	8000288 <__aeabi_dsub>
 8008746:	4602      	mov	r2, r0
 8008748:	460b      	mov	r3, r1
 800874a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800874e:	e0be      	b.n	80088ce <scaraInitScurve1+0x4de>
	
	}else if(modeinit == DUTY_MODE_INIT_QVA){
 8008750:	7ebb      	ldrb	r3, [r7, #26]
 8008752:	2b00      	cmp	r3, #0
 8008754:	f040 80bb 	bne.w	80088ce <scaraInitScurve1+0x4de>
		//check qva condition
		if(total_s*a_design > 2*v_design*v_design){ //condition for ta smaller than tc
 8008758:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800875c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008760:	f7f7 ff4a 	bl	80005f8 <__aeabi_dmul>
 8008764:	4602      	mov	r2, r0
 8008766:	460b      	mov	r3, r1
 8008768:	4614      	mov	r4, r2
 800876a:	461d      	mov	r5, r3
 800876c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008770:	4602      	mov	r2, r0
 8008772:	460b      	mov	r3, r1
 8008774:	f7f7 fd8a 	bl	800028c <__adddf3>
 8008778:	4602      	mov	r2, r0
 800877a:	460b      	mov	r3, r1
 800877c:	4610      	mov	r0, r2
 800877e:	4619      	mov	r1, r3
 8008780:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008784:	f7f7 ff38 	bl	80005f8 <__aeabi_dmul>
 8008788:	4602      	mov	r2, r0
 800878a:	460b      	mov	r3, r1
 800878c:	4620      	mov	r0, r4
 800878e:	4629      	mov	r1, r5
 8008790:	f7f8 f9c2 	bl	8000b18 <__aeabi_dcmpgt>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d05e      	beq.n	8008858 <scaraInitScurve1+0x468>
			if(total_s/v_design < 0.3){ //tc too small
 800879a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800879e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80087a2:	f7f8 f853 	bl	800084c <__aeabi_ddiv>
 80087a6:	4602      	mov	r2, r0
 80087a8:	460b      	mov	r3, r1
 80087aa:	4610      	mov	r0, r2
 80087ac:	4619      	mov	r1, r3
 80087ae:	a395      	add	r3, pc, #596	; (adr r3, 8008a04 <scaraInitScurve1+0x614>)
 80087b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b4:	f7f8 f992 	bl	8000adc <__aeabi_dcmplt>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00a      	beq.n	80087d4 <scaraInitScurve1+0x3e4>
				//recalculate v_design
				v_design = total_s/0.3;
 80087be:	a391      	add	r3, pc, #580	; (adr r3, 8008a04 <scaraInitScurve1+0x614>)
 80087c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80087c8:	f7f8 f840 	bl	800084c <__aeabi_ddiv>
 80087cc:	4602      	mov	r2, r0
 80087ce:	460b      	mov	r3, r1
 80087d0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			}
			if(v_design/a_design < 0.1){ //ta is too small
 80087d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80087d8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80087dc:	f7f8 f836 	bl	800084c <__aeabi_ddiv>
 80087e0:	4602      	mov	r2, r0
 80087e2:	460b      	mov	r3, r1
 80087e4:	4610      	mov	r0, r2
 80087e6:	4619      	mov	r1, r3
 80087e8:	a388      	add	r3, pc, #544	; (adr r3, 8008a0c <scaraInitScurve1+0x61c>)
 80087ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ee:	f7f8 f975 	bl	8000adc <__aeabi_dcmplt>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00a      	beq.n	800880e <scaraInitScurve1+0x41e>
				//recalculate a_design
				a_design = v_design/0.1;
 80087f8:	a384      	add	r3, pc, #528	; (adr r3, 8008a0c <scaraInitScurve1+0x61c>)
 80087fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008802:	f7f8 f823 	bl	800084c <__aeabi_ddiv>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			}
			ta = v_design/a_design;
 800880e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008812:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008816:	f7f8 f819 	bl	800084c <__aeabi_ddiv>
 800881a:	4602      	mov	r2, r0
 800881c:	460b      	mov	r3, r1
 800881e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			td = total_s/v_design + ta;
 8008822:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008826:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800882a:	f7f8 f80f 	bl	800084c <__aeabi_ddiv>
 800882e:	4602      	mov	r2, r0
 8008830:	460b      	mov	r3, r1
 8008832:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008836:	f7f7 fd29 	bl	800028c <__adddf3>
 800883a:	4602      	mov	r2, r0
 800883c:	460b      	mov	r3, r1
 800883e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			tf = ta + td;
 8008842:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008846:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800884a:	f7f7 fd1f 	bl	800028c <__adddf3>
 800884e:	4602      	mov	r2, r0
 8008850:	460b      	mov	r3, r1
 8008852:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008856:	e03a      	b.n	80088ce <scaraInitScurve1+0x4de>
//				td = total_s/v_design;
//				tf = ta + td;
//			}
	
		}else{
			tf = 2*total_s/v_design;
 8008858:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800885c:	4602      	mov	r2, r0
 800885e:	460b      	mov	r3, r1
 8008860:	f7f7 fd14 	bl	800028c <__adddf3>
 8008864:	4602      	mov	r2, r0
 8008866:	460b      	mov	r3, r1
 8008868:	4610      	mov	r0, r2
 800886a:	4619      	mov	r1, r3
 800886c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008870:	f7f7 ffec 	bl	800084c <__aeabi_ddiv>
 8008874:	4602      	mov	r2, r0
 8008876:	460b      	mov	r3, r1
 8008878:	e9c7 2308 	strd	r2, r3, [r7, #32]
			ta = tf/4;
 800887c:	f04f 0200 	mov.w	r2, #0
 8008880:	4b5d      	ldr	r3, [pc, #372]	; (80089f8 <scaraInitScurve1+0x608>)
 8008882:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008886:	f7f7 ffe1 	bl	800084c <__aeabi_ddiv>
 800888a:	4602      	mov	r2, r0
 800888c:	460b      	mov	r3, r1
 800888e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			td = 3*tf/4;
 8008892:	f04f 0200 	mov.w	r2, #0
 8008896:	4b59      	ldr	r3, [pc, #356]	; (80089fc <scaraInitScurve1+0x60c>)
 8008898:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800889c:	f7f7 feac 	bl	80005f8 <__aeabi_dmul>
 80088a0:	4602      	mov	r2, r0
 80088a2:	460b      	mov	r3, r1
 80088a4:	4610      	mov	r0, r2
 80088a6:	4619      	mov	r1, r3
 80088a8:	f04f 0200 	mov.w	r2, #0
 80088ac:	4b52      	ldr	r3, [pc, #328]	; (80089f8 <scaraInitScurve1+0x608>)
 80088ae:	f7f7 ffcd 	bl	800084c <__aeabi_ddiv>
 80088b2:	4602      	mov	r2, r0
 80088b4:	460b      	mov	r3, r1
 80088b6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			a_design = v_design/ta;
 80088ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80088be:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80088c2:	f7f7 ffc3 	bl	800084c <__aeabi_ddiv>
 80088c6:	4602      	mov	r2, r0
 80088c8:	460b      	mov	r3, r1
 80088ca:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		}
	}
	//no_sample = ceilf(tf / T_SAMPLING); // ceiling
	 // Init lspb params
	
	scurve->Ta = ta;
 80088ce:	69f9      	ldr	r1, [r7, #28]
 80088d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80088d4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	scurve->Tf = tf;
 80088d8:	69f9      	ldr	r1, [r7, #28]
 80088da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80088de:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	scurve->Td = td;
 80088e2:	69f9      	ldr	r1, [r7, #28]
 80088e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80088e8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	scurve->a_design = a_design;
 80088ec:	69f9      	ldr	r1, [r7, #28]
 80088ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80088f2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	scurve->v_design = v_design;
 80088f6:	69f9      	ldr	r1, [r7, #28]
 80088f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80088fc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	scurve->v_lim = v_lim;
 8008900:	69f9      	ldr	r1, [r7, #28]
 8008902:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008906:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	scurve->total_s = total_s;
 800890a:	69f9      	ldr	r1, [r7, #28]
 800890c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008910:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	scurve->a_current = 0;
 8008914:	69f9      	ldr	r1, [r7, #28]
 8008916:	f04f 0200 	mov.w	r2, #0
 800891a:	f04f 0300 	mov.w	r3, #0
 800891e:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
	scurve->v_current = 0;
 8008922:	69f9      	ldr	r1, [r7, #28]
 8008924:	f04f 0200 	mov.w	r2, #0
 8008928:	f04f 0300 	mov.w	r3, #0
 800892c:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
	scurve->s_current = 0;
 8008930:	69f9      	ldr	r1, [r7, #28]
 8008932:	f04f 0200 	mov.w	r2, #0
 8008936:	f04f 0300 	mov.w	r3, #0
 800893a:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
	//define duplicate value when calculating scurve flow
	scurve->k_1        = v_design/(6*ta*ta);
 800893e:	f04f 0200 	mov.w	r2, #0
 8008942:	4b2f      	ldr	r3, [pc, #188]	; (8008a00 <scaraInitScurve1+0x610>)
 8008944:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008948:	f7f7 fe56 	bl	80005f8 <__aeabi_dmul>
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	4610      	mov	r0, r2
 8008952:	4619      	mov	r1, r3
 8008954:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008958:	f7f7 fe4e 	bl	80005f8 <__aeabi_dmul>
 800895c:	4602      	mov	r2, r0
 800895e:	460b      	mov	r3, r1
 8008960:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008964:	f7f7 ff72 	bl	800084c <__aeabi_ddiv>
 8008968:	4602      	mov	r2, r0
 800896a:	460b      	mov	r3, r1
 800896c:	69f9      	ldr	r1, [r7, #28]
 800896e:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	scurve->k_2		   = 2*ta*ta*ta;
 8008972:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008976:	4602      	mov	r2, r0
 8008978:	460b      	mov	r3, r1
 800897a:	f7f7 fc87 	bl	800028c <__adddf3>
 800897e:	4602      	mov	r2, r0
 8008980:	460b      	mov	r3, r1
 8008982:	4610      	mov	r0, r2
 8008984:	4619      	mov	r1, r3
 8008986:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800898a:	f7f7 fe35 	bl	80005f8 <__aeabi_dmul>
 800898e:	4602      	mov	r2, r0
 8008990:	460b      	mov	r3, r1
 8008992:	4610      	mov	r0, r2
 8008994:	4619      	mov	r1, r3
 8008996:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800899a:	f7f7 fe2d 	bl	80005f8 <__aeabi_dmul>
 800899e:	4602      	mov	r2, r0
 80089a0:	460b      	mov	r3, r1
 80089a2:	69f9      	ldr	r1, [r7, #28]
 80089a4:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	scurve->k_3        = 6*ta;
 80089a8:	f04f 0200 	mov.w	r2, #0
 80089ac:	4b14      	ldr	r3, [pc, #80]	; (8008a00 <scaraInitScurve1+0x610>)
 80089ae:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80089b2:	f7f7 fe21 	bl	80005f8 <__aeabi_dmul>
 80089b6:	4602      	mov	r2, r0
 80089b8:	460b      	mov	r3, r1
 80089ba:	69f9      	ldr	r1, [r7, #28]
 80089bc:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	scurve->k_4        = 6*ta*ta;
 80089c0:	f04f 0200 	mov.w	r2, #0
 80089c4:	4b0e      	ldr	r3, [pc, #56]	; (8008a00 <scaraInitScurve1+0x610>)
 80089c6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80089ca:	f7f7 fe15 	bl	80005f8 <__aeabi_dmul>
 80089ce:	4602      	mov	r2, r0
 80089d0:	460b      	mov	r3, r1
 80089d2:	4610      	mov	r0, r2
 80089d4:	4619      	mov	r1, r3
 80089d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80089da:	f7f7 fe0d 	bl	80005f8 <__aeabi_dmul>
 80089de:	4602      	mov	r2, r0
 80089e0:	460b      	mov	r3, r1
 80089e2:	69f9      	ldr	r1, [r7, #28]
 80089e4:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	return SCARA_STATUS_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3750      	adds	r7, #80	; 0x50
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bdb0      	pop	{r4, r5, r7, pc}
 80089f2:	bf00      	nop
 80089f4:	f3af 8000 	nop.w
 80089f8:	40100000 	.word	0x40100000
 80089fc:	40080000 	.word	0x40080000
 8008a00:	40180000 	.word	0x40180000
 8008a04:	33333333 	.word	0x33333333
 8008a08:	3fd33333 	.word	0x3fd33333
 8008a0c:	9999999a 	.word	0x9999999a
 8008a10:	3fb99999 	.word	0x3fb99999

08008a14 <scaraFlowLSPB1>:
SCARA_StatusTypeDef	scaraFlowLSPB1	(Trajectory_LSPB_TypeDef *lspb, double time){
 8008a14:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008a18:	b08a      	sub	sp, #40	; 0x28
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	60f8      	str	r0, [r7, #12]
 8008a1e:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008a28:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008a32:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8008a3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8008a40:	f04f 0200 	mov.w	r2, #0
 8008a44:	f04f 0300 	mov.w	r3, #0
 8008a48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a4c:	f7f8 f85a 	bl	8000b04 <__aeabi_dcmpge>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d05b      	beq.n	8008b0e <scaraFlowLSPB1+0xfa>
 8008a56:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008a5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a5e:	f7f8 f847 	bl	8000af0 <__aeabi_dcmple>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d052      	beq.n	8008b0e <scaraFlowLSPB1+0xfa>
		lspb->a_current		=	lspb->a_design;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008a6e:	68f9      	ldr	r1, [r7, #12]
 8008a70:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a84:	f7f7 fdb8 	bl	80005f8 <__aeabi_dmul>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	4629      	mov	r1, r5
 8008a90:	f7f7 fbfc 	bl	800028c <__adddf3>
 8008a94:	4602      	mov	r2, r0
 8008a96:	460b      	mov	r3, r1
 8008a98:	68f9      	ldr	r1, [r7, #12]
 8008a9a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008aaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aae:	f7f7 fda3 	bl	80005f8 <__aeabi_dmul>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	4629      	mov	r1, r5
 8008aba:	f7f7 fbe7 	bl	800028c <__adddf3>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	4614      	mov	r4, r2
 8008ac4:	461d      	mov	r5, r3
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008acc:	f04f 0200 	mov.w	r2, #0
 8008ad0:	4b98      	ldr	r3, [pc, #608]	; (8008d34 <scaraFlowLSPB1+0x320>)
 8008ad2:	f7f7 fd91 	bl	80005f8 <__aeabi_dmul>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4610      	mov	r0, r2
 8008adc:	4619      	mov	r1, r3
 8008ade:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ae2:	f7f7 fd89 	bl	80005f8 <__aeabi_dmul>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	4610      	mov	r0, r2
 8008aec:	4619      	mov	r1, r3
 8008aee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008af2:	f7f7 fd81 	bl	80005f8 <__aeabi_dmul>
 8008af6:	4602      	mov	r2, r0
 8008af8:	460b      	mov	r3, r1
 8008afa:	4620      	mov	r0, r4
 8008afc:	4629      	mov	r1, r5
 8008afe:	f7f7 fbc5 	bl	800028c <__adddf3>
 8008b02:	4602      	mov	r2, r0
 8008b04:	460b      	mov	r3, r1
 8008b06:	68f9      	ldr	r1, [r7, #12]
 8008b08:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8008b0c:	e10b      	b.n	8008d26 <scaraFlowLSPB1+0x312>
	// Constant velocity
	} else if (ta < time && time <= td) {
 8008b0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008b16:	f7f7 ffe1 	bl	8000adc <__aeabi_dcmplt>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d054      	beq.n	8008bca <scaraFlowLSPB1+0x1b6>
 8008b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b28:	f7f7 ffe2 	bl	8000af0 <__aeabi_dcmple>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d04b      	beq.n	8008bca <scaraFlowLSPB1+0x1b6>
		lspb->a_current		=	0;
 8008b32:	68f9      	ldr	r1, [r7, #12]
 8008b34:	f04f 0200 	mov.w	r2, #0
 8008b38:	f04f 0300 	mov.w	r3, #0
 8008b3c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008b46:	68f9      	ldr	r1, [r7, #12]
 8008b48:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta*0.5 + lspb->v_design*(time - ta*0.5);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008b58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008b5c:	f7f7 fd4c 	bl	80005f8 <__aeabi_dmul>
 8008b60:	4602      	mov	r2, r0
 8008b62:	460b      	mov	r3, r1
 8008b64:	4610      	mov	r0, r2
 8008b66:	4619      	mov	r1, r3
 8008b68:	f04f 0200 	mov.w	r2, #0
 8008b6c:	4b71      	ldr	r3, [pc, #452]	; (8008d34 <scaraFlowLSPB1+0x320>)
 8008b6e:	f7f7 fd43 	bl	80005f8 <__aeabi_dmul>
 8008b72:	4602      	mov	r2, r0
 8008b74:	460b      	mov	r3, r1
 8008b76:	4620      	mov	r0, r4
 8008b78:	4629      	mov	r1, r5
 8008b7a:	f7f7 fb87 	bl	800028c <__adddf3>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	460b      	mov	r3, r1
 8008b82:	4690      	mov	r8, r2
 8008b84:	4699      	mov	r9, r3
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8008b8c:	f04f 0200 	mov.w	r2, #0
 8008b90:	4b68      	ldr	r3, [pc, #416]	; (8008d34 <scaraFlowLSPB1+0x320>)
 8008b92:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008b96:	f7f7 fd2f 	bl	80005f8 <__aeabi_dmul>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ba2:	f7f7 fb71 	bl	8000288 <__aeabi_dsub>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	460b      	mov	r3, r1
 8008baa:	4620      	mov	r0, r4
 8008bac:	4629      	mov	r1, r5
 8008bae:	f7f7 fd23 	bl	80005f8 <__aeabi_dmul>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	4640      	mov	r0, r8
 8008bb8:	4649      	mov	r1, r9
 8008bba:	f7f7 fb67 	bl	800028c <__adddf3>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	68f9      	ldr	r1, [r7, #12]
 8008bc4:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8008bc8:	e0ad      	b.n	8008d26 <scaraFlowLSPB1+0x312>
	// Decelerate
	} else if (td < time && time <= tf) {
 8008bca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008bd2:	f7f7 ff83 	bl	8000adc <__aeabi_dcmplt>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f000 8090 	beq.w	8008cfe <scaraFlowLSPB1+0x2ea>
 8008bde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008be2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008be6:	f7f7 ff83 	bl	8000af0 <__aeabi_dcmple>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f000 8086 	beq.w	8008cfe <scaraFlowLSPB1+0x2ea>
		lspb->a_current		=	-lspb->a_design;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008bf8:	4614      	mov	r4, r2
 8008bfa:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v_design + lspb->a_design*(td - time);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 8008c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c14:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008c18:	f7f7 fb36 	bl	8000288 <__aeabi_dsub>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4640      	mov	r0, r8
 8008c22:	4649      	mov	r1, r9
 8008c24:	f7f7 fce8 	bl	80005f8 <__aeabi_dmul>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	4629      	mov	r1, r5
 8008c30:	f7f7 fb2c 	bl	800028c <__adddf3>
 8008c34:	4602      	mov	r2, r0
 8008c36:	460b      	mov	r3, r1
 8008c38:	68f9      	ldr	r1, [r7, #12]
 8008c3a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8008c4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c4e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008c52:	f7f7 fb19 	bl	8000288 <__aeabi_dsub>
 8008c56:	4602      	mov	r2, r0
 8008c58:	460b      	mov	r3, r1
 8008c5a:	4640      	mov	r0, r8
 8008c5c:	4649      	mov	r1, r9
 8008c5e:	f7f7 fccb 	bl	80005f8 <__aeabi_dmul>
 8008c62:	4602      	mov	r2, r0
 8008c64:	460b      	mov	r3, r1
 8008c66:	4620      	mov	r0, r4
 8008c68:	4629      	mov	r1, r5
 8008c6a:	f7f7 fb0d 	bl	8000288 <__aeabi_dsub>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	460b      	mov	r3, r1
 8008c72:	4614      	mov	r4, r2
 8008c74:	461d      	mov	r5, r3
								- (lspb->v_lim - lspb->v0)*(tf - time)*(tf - time)/(2*ta);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008c82:	f7f7 fb01 	bl	8000288 <__aeabi_dsub>
 8008c86:	4602      	mov	r2, r0
 8008c88:	460b      	mov	r3, r1
 8008c8a:	4690      	mov	r8, r2
 8008c8c:	4699      	mov	r9, r3
 8008c8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c92:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008c96:	f7f7 faf7 	bl	8000288 <__aeabi_dsub>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	4640      	mov	r0, r8
 8008ca0:	4649      	mov	r1, r9
 8008ca2:	f7f7 fca9 	bl	80005f8 <__aeabi_dmul>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	460b      	mov	r3, r1
 8008caa:	4690      	mov	r8, r2
 8008cac:	4699      	mov	r9, r3
 8008cae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cb2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008cb6:	f7f7 fae7 	bl	8000288 <__aeabi_dsub>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	4640      	mov	r0, r8
 8008cc0:	4649      	mov	r1, r9
 8008cc2:	f7f7 fc99 	bl	80005f8 <__aeabi_dmul>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	460b      	mov	r3, r1
 8008cca:	4690      	mov	r8, r2
 8008ccc:	4699      	mov	r9, r3
 8008cce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	f7f7 fad9 	bl	800028c <__adddf3>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	460b      	mov	r3, r1
 8008cde:	4640      	mov	r0, r8
 8008ce0:	4649      	mov	r1, r9
 8008ce2:	f7f7 fdb3 	bl	800084c <__aeabi_ddiv>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	460b      	mov	r3, r1
 8008cea:	4620      	mov	r0, r4
 8008cec:	4629      	mov	r1, r5
 8008cee:	f7f7 facb 	bl	8000288 <__aeabi_dsub>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	460b      	mov	r3, r1
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 8008cf6:	68f9      	ldr	r1, [r7, #12]
 8008cf8:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8008cfc:	e013      	b.n	8008d26 <scaraFlowLSPB1+0x312>
	} else {
		lspb->a_current 	=	0;
 8008cfe:	68f9      	ldr	r1, [r7, #12]
 8008d00:	f04f 0200 	mov.w	r2, #0
 8008d04:	f04f 0300 	mov.w	r3, #0
 8008d08:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	0;
 8008d0c:	68f9      	ldr	r1, [r7, #12]
 8008d0e:	f04f 0200 	mov.w	r2, #0
 8008d12:	f04f 0300 	mov.w	r3, #0
 8008d16:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8008d20:	68f9      	ldr	r1, [r7, #12]
 8008d22:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3728      	adds	r7, #40	; 0x28
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008d32:	bf00      	nop
 8008d34:	3fe00000 	.word	0x3fe00000

08008d38 <scaraFlowGCODE>:
SCARA_StatusTypeDef	scaraFlowGCODE(double *s, double time)
{
 8008d38:	b5b0      	push	{r4, r5, r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	ed87 0b00 	vstr	d0, [r7]
	if ( 0.0f <= time && time <= time_acc) {
 8008d44:	f04f 0200 	mov.w	r2, #0
 8008d48:	f04f 0300 	mov.w	r3, #0
 8008d4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d50:	f7f7 fed8 	bl	8000b04 <__aeabi_dcmpge>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d01e      	beq.n	8008d98 <scaraFlowGCODE+0x60>
 8008d5a:	4b5f      	ldr	r3, [pc, #380]	; (8008ed8 <scaraFlowGCODE+0x1a0>)
 8008d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d64:	f7f7 fec4 	bl	8000af0 <__aeabi_dcmple>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d014      	beq.n	8008d98 <scaraFlowGCODE+0x60>
		*s = acc0*time*time;
 8008d6e:	4b5b      	ldr	r3, [pc, #364]	; (8008edc <scaraFlowGCODE+0x1a4>)
 8008d70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d78:	f7f7 fc3e 	bl	80005f8 <__aeabi_dmul>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	4610      	mov	r0, r2
 8008d82:	4619      	mov	r1, r3
 8008d84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d88:	f7f7 fc36 	bl	80005f8 <__aeabi_dmul>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	460b      	mov	r3, r1
 8008d90:	68f9      	ldr	r1, [r7, #12]
 8008d92:	e9c1 2300 	strd	r2, r3, [r1]
 8008d96:	e09a      	b.n	8008ece <scaraFlowGCODE+0x196>
	// Constant velocity
	} else if (time_acc < time && time <= time_dec) {
 8008d98:	4b4f      	ldr	r3, [pc, #316]	; (8008ed8 <scaraFlowGCODE+0x1a0>)
 8008d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008da2:	f7f7 feb9 	bl	8000b18 <__aeabi_dcmpgt>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d01f      	beq.n	8008dec <scaraFlowGCODE+0xb4>
 8008dac:	4b4c      	ldr	r3, [pc, #304]	; (8008ee0 <scaraFlowGCODE+0x1a8>)
 8008dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008db6:	f7f7 fe9b 	bl	8000af0 <__aeabi_dcmple>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d015      	beq.n	8008dec <scaraFlowGCODE+0xb4>
		*s = constant[0]*time + constant[1];
 8008dc0:	4b48      	ldr	r3, [pc, #288]	; (8008ee4 <scaraFlowGCODE+0x1ac>)
 8008dc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008dc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dca:	f7f7 fc15 	bl	80005f8 <__aeabi_dmul>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	4610      	mov	r0, r2
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	4b43      	ldr	r3, [pc, #268]	; (8008ee4 <scaraFlowGCODE+0x1ac>)
 8008dd8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008ddc:	f7f7 fa56 	bl	800028c <__adddf3>
 8008de0:	4602      	mov	r2, r0
 8008de2:	460b      	mov	r3, r1
 8008de4:	68f9      	ldr	r1, [r7, #12]
 8008de6:	e9c1 2300 	strd	r2, r3, [r1]
 8008dea:	e070      	b.n	8008ece <scaraFlowGCODE+0x196>
	// Decelerate
	} else if (time_dec < time && time <= time_move) {
 8008dec:	4b3c      	ldr	r3, [pc, #240]	; (8008ee0 <scaraFlowGCODE+0x1a8>)
 8008dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008df6:	f7f7 fe8f 	bl	8000b18 <__aeabi_dcmpgt>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d038      	beq.n	8008e72 <scaraFlowGCODE+0x13a>
 8008e00:	4b39      	ldr	r3, [pc, #228]	; (8008ee8 <scaraFlowGCODE+0x1b0>)
 8008e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e0a:	f7f7 fe71 	bl	8000af0 <__aeabi_dcmple>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d02e      	beq.n	8008e72 <scaraFlowGCODE+0x13a>
		*s = deacc[0]*time*time + deacc[1]*time + deacc[2];
 8008e14:	4b35      	ldr	r3, [pc, #212]	; (8008eec <scaraFlowGCODE+0x1b4>)
 8008e16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e1e:	f7f7 fbeb 	bl	80005f8 <__aeabi_dmul>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	4610      	mov	r0, r2
 8008e28:	4619      	mov	r1, r3
 8008e2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e2e:	f7f7 fbe3 	bl	80005f8 <__aeabi_dmul>
 8008e32:	4602      	mov	r2, r0
 8008e34:	460b      	mov	r3, r1
 8008e36:	4614      	mov	r4, r2
 8008e38:	461d      	mov	r5, r3
 8008e3a:	4b2c      	ldr	r3, [pc, #176]	; (8008eec <scaraFlowGCODE+0x1b4>)
 8008e3c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e44:	f7f7 fbd8 	bl	80005f8 <__aeabi_dmul>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	4629      	mov	r1, r5
 8008e50:	f7f7 fa1c 	bl	800028c <__adddf3>
 8008e54:	4602      	mov	r2, r0
 8008e56:	460b      	mov	r3, r1
 8008e58:	4610      	mov	r0, r2
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	4b23      	ldr	r3, [pc, #140]	; (8008eec <scaraFlowGCODE+0x1b4>)
 8008e5e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008e62:	f7f7 fa13 	bl	800028c <__adddf3>
 8008e66:	4602      	mov	r2, r0
 8008e68:	460b      	mov	r3, r1
 8008e6a:	68f9      	ldr	r1, [r7, #12]
 8008e6c:	e9c1 2300 	strd	r2, r3, [r1]
 8008e70:	e02d      	b.n	8008ece <scaraFlowGCODE+0x196>
	} else {
		*s = deacc[0]*time*time + deacc[1]*time + deacc[2];
 8008e72:	4b1e      	ldr	r3, [pc, #120]	; (8008eec <scaraFlowGCODE+0x1b4>)
 8008e74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e7c:	f7f7 fbbc 	bl	80005f8 <__aeabi_dmul>
 8008e80:	4602      	mov	r2, r0
 8008e82:	460b      	mov	r3, r1
 8008e84:	4610      	mov	r0, r2
 8008e86:	4619      	mov	r1, r3
 8008e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e8c:	f7f7 fbb4 	bl	80005f8 <__aeabi_dmul>
 8008e90:	4602      	mov	r2, r0
 8008e92:	460b      	mov	r3, r1
 8008e94:	4614      	mov	r4, r2
 8008e96:	461d      	mov	r5, r3
 8008e98:	4b14      	ldr	r3, [pc, #80]	; (8008eec <scaraFlowGCODE+0x1b4>)
 8008e9a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008e9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ea2:	f7f7 fba9 	bl	80005f8 <__aeabi_dmul>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	4620      	mov	r0, r4
 8008eac:	4629      	mov	r1, r5
 8008eae:	f7f7 f9ed 	bl	800028c <__adddf3>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	4610      	mov	r0, r2
 8008eb8:	4619      	mov	r1, r3
 8008eba:	4b0c      	ldr	r3, [pc, #48]	; (8008eec <scaraFlowGCODE+0x1b4>)
 8008ebc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008ec0:	f7f7 f9e4 	bl	800028c <__adddf3>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	68f9      	ldr	r1, [r7, #12]
 8008eca:	e9c1 2300 	strd	r2, r3, [r1]
	}
	return SCARA_STATUS_OK;
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bdb0      	pop	{r4, r5, r7, pc}
 8008ed8:	20008f40 	.word	0x20008f40
 8008edc:	2000fd28 	.word	0x2000fd28
 8008ee0:	20008f60 	.word	0x20008f60
 8008ee4:	20008f88 	.word	0x20008f88
 8008ee8:	20008fb0 	.word	0x20008fb0
 8008eec:	20008f48 	.word	0x20008f48

08008ef0 <scaraFLowScurve1>:
SCARA_StatusTypeDef	scaraFLowScurve1(Trajectory_Scurve_TypeDef *scurve, double t)
{
 8008ef0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008ef4:	b08c      	sub	sp, #48	; 0x30
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	60f8      	str	r0, [r7, #12]
 8008efa:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta, vc;
	tf = scurve->Tf;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8008f04:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	ta = scurve->Ta;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8008f0e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = scurve->Td;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008f18:	e9c7 2306 	strd	r2, r3, [r7, #24]
	vc = scurve->v_design;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8008f22:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if ( 0.0f <= t && t <= ta) {
 8008f26:	f04f 0200 	mov.w	r2, #0
 8008f2a:	f04f 0300 	mov.w	r3, #0
 8008f2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f32:	f7f7 fde7 	bl	8000b04 <__aeabi_dcmpge>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d025      	beq.n	8008f88 <scaraFLowScurve1+0x98>
 8008f3c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008f40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f44:	f7f7 fdd4 	bl	8000af0 <__aeabi_dcmple>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d01c      	beq.n	8008f88 <scaraFLowScurve1+0x98>
//		lspb->a_current		=	(time*vc)/ta*ta;
//		lspb->v_current		=	(time*time*vc)/(2*ta*ta);
		scurve->s_current	=	t*t*t*scurve->k_1;
 8008f4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f56:	f7f7 fb4f 	bl	80005f8 <__aeabi_dmul>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	4610      	mov	r0, r2
 8008f60:	4619      	mov	r1, r3
 8008f62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f66:	f7f7 fb47 	bl	80005f8 <__aeabi_dmul>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	4610      	mov	r0, r2
 8008f70:	4619      	mov	r1, r3
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008f78:	f7f7 fb3e 	bl	80005f8 <__aeabi_dmul>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	460b      	mov	r3, r1
 8008f80:	68f9      	ldr	r1, [r7, #12]
 8008f82:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8008f86:	e17c      	b.n	8009282 <scaraFLowScurve1+0x392>
	// Constant velocity
	} else if (ta < t && t <= 2*ta) {
 8008f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f8c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008f90:	f7f7 fda4 	bl	8000adc <__aeabi_dcmplt>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d061      	beq.n	800905e <scaraFLowScurve1+0x16e>
 8008f9a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	f7f7 f973 	bl	800028c <__adddf3>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	460b      	mov	r3, r1
 8008faa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fae:	f7f7 fd9f 	bl	8000af0 <__aeabi_dcmple>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d052      	beq.n	800905e <scaraFLowScurve1+0x16e>
//		scurve->a_current   =	-(vc*(time - 2*ta))/(ta*ta);
//		scurve->v_current   =	vc/2 - (vc*(time - ta)*(time - 3*ta))/(2*ta*ta);
		scurve->s_current   =	-(t*t*t - t*t*scurve->k_3 + t*scurve->k_4 - scurve->k_2)*scurve->k_1;
 8008fb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fc0:	f7f7 fb1a 	bl	80005f8 <__aeabi_dmul>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	4610      	mov	r0, r2
 8008fca:	4619      	mov	r1, r3
 8008fcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fd0:	f7f7 fb12 	bl	80005f8 <__aeabi_dmul>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	4690      	mov	r8, r2
 8008fda:	4699      	mov	r9, r3
 8008fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fe0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fe4:	f7f7 fb08 	bl	80005f8 <__aeabi_dmul>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	460b      	mov	r3, r1
 8008fec:	4610      	mov	r0, r2
 8008fee:	4619      	mov	r1, r3
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8008ff6:	f7f7 faff 	bl	80005f8 <__aeabi_dmul>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	4640      	mov	r0, r8
 8009000:	4649      	mov	r1, r9
 8009002:	f7f7 f941 	bl	8000288 <__aeabi_dsub>
 8009006:	4602      	mov	r2, r0
 8009008:	460b      	mov	r3, r1
 800900a:	4690      	mov	r8, r2
 800900c:	4699      	mov	r9, r3
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 8009014:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009018:	f7f7 faee 	bl	80005f8 <__aeabi_dmul>
 800901c:	4602      	mov	r2, r0
 800901e:	460b      	mov	r3, r1
 8009020:	4640      	mov	r0, r8
 8009022:	4649      	mov	r1, r9
 8009024:	f7f7 f932 	bl	800028c <__adddf3>
 8009028:	4602      	mov	r2, r0
 800902a:	460b      	mov	r3, r1
 800902c:	4610      	mov	r0, r2
 800902e:	4619      	mov	r1, r3
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8009036:	f7f7 f927 	bl	8000288 <__aeabi_dsub>
 800903a:	4602      	mov	r2, r0
 800903c:	460b      	mov	r3, r1
 800903e:	4614      	mov	r4, r2
 8009040:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800904a:	4620      	mov	r0, r4
 800904c:	4629      	mov	r1, r5
 800904e:	f7f7 fad3 	bl	80005f8 <__aeabi_dmul>
 8009052:	4602      	mov	r2, r0
 8009054:	460b      	mov	r3, r1
 8009056:	68f9      	ldr	r1, [r7, #12]
 8009058:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 800905c:	e111      	b.n	8009282 <scaraFLowScurve1+0x392>
	// Decelerate
	} else if (2*ta < t && t <= td - ta) {
 800905e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009062:	4602      	mov	r2, r0
 8009064:	460b      	mov	r3, r1
 8009066:	f7f7 f911 	bl	800028c <__adddf3>
 800906a:	4602      	mov	r2, r0
 800906c:	460b      	mov	r3, r1
 800906e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009072:	f7f7 fd51 	bl	8000b18 <__aeabi_dcmpgt>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d022      	beq.n	80090c2 <scaraFLowScurve1+0x1d2>
 800907c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009080:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009084:	f7f7 f900 	bl	8000288 <__aeabi_dsub>
 8009088:	4602      	mov	r2, r0
 800908a:	460b      	mov	r3, r1
 800908c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009090:	f7f7 fd2e 	bl	8000af0 <__aeabi_dcmple>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d013      	beq.n	80090c2 <scaraFLowScurve1+0x1d2>
//		scurve->a_current   =	0;
//		scurve->v_current   =	v_design;
		scurve->s_current   =	vc*(t - ta);
 800909a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800909e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090a2:	f7f7 f8f1 	bl	8000288 <__aeabi_dsub>
 80090a6:	4602      	mov	r2, r0
 80090a8:	460b      	mov	r3, r1
 80090aa:	4610      	mov	r0, r2
 80090ac:	4619      	mov	r1, r3
 80090ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80090b2:	f7f7 faa1 	bl	80005f8 <__aeabi_dmul>
 80090b6:	4602      	mov	r2, r0
 80090b8:	460b      	mov	r3, r1
 80090ba:	68f9      	ldr	r1, [r7, #12]
 80090bc:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 80090c0:	e0df      	b.n	8009282 <scaraFLowScurve1+0x392>
	} else if(td-ta < t && t <= td){
 80090c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80090c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80090ca:	f7f7 f8dd 	bl	8000288 <__aeabi_dsub>
 80090ce:	4602      	mov	r2, r0
 80090d0:	460b      	mov	r3, r1
 80090d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090d6:	f7f7 fd1f 	bl	8000b18 <__aeabi_dcmpgt>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	f000 8081 	beq.w	80091e4 <scaraFLowScurve1+0x2f4>
 80090e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090ea:	f7f7 fd01 	bl	8000af0 <__aeabi_dcmple>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d077      	beq.n	80091e4 <scaraFLowScurve1+0x2f4>
//		scurve->a_current 	=	-(vc*(t - td + ta))/ta^2;
//		scurve->v_current   =	vc/2 - (vc*(t + ta - tf)*(t + 3*ta - tf))/(2*ta*ta);
		scurve->s_current   =	scurve->total_s - (ta*vc)/3 - vc*(t - tf) - (t-tf)*(t-tf)*(t + scurve->k_3 - tf)*scurve->k_1;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 80090fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80090fe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009102:	f7f7 fa79 	bl	80005f8 <__aeabi_dmul>
 8009106:	4602      	mov	r2, r0
 8009108:	460b      	mov	r3, r1
 800910a:	4610      	mov	r0, r2
 800910c:	4619      	mov	r1, r3
 800910e:	f04f 0200 	mov.w	r2, #0
 8009112:	4b5f      	ldr	r3, [pc, #380]	; (8009290 <scaraFLowScurve1+0x3a0>)
 8009114:	f7f7 fb9a 	bl	800084c <__aeabi_ddiv>
 8009118:	4602      	mov	r2, r0
 800911a:	460b      	mov	r3, r1
 800911c:	4620      	mov	r0, r4
 800911e:	4629      	mov	r1, r5
 8009120:	f7f7 f8b2 	bl	8000288 <__aeabi_dsub>
 8009124:	4602      	mov	r2, r0
 8009126:	460b      	mov	r3, r1
 8009128:	4614      	mov	r4, r2
 800912a:	461d      	mov	r5, r3
 800912c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009130:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009134:	f7f7 f8a8 	bl	8000288 <__aeabi_dsub>
 8009138:	4602      	mov	r2, r0
 800913a:	460b      	mov	r3, r1
 800913c:	4610      	mov	r0, r2
 800913e:	4619      	mov	r1, r3
 8009140:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009144:	f7f7 fa58 	bl	80005f8 <__aeabi_dmul>
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	4620      	mov	r0, r4
 800914e:	4629      	mov	r1, r5
 8009150:	f7f7 f89a 	bl	8000288 <__aeabi_dsub>
 8009154:	4602      	mov	r2, r0
 8009156:	460b      	mov	r3, r1
 8009158:	4614      	mov	r4, r2
 800915a:	461d      	mov	r5, r3
 800915c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009160:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009164:	f7f7 f890 	bl	8000288 <__aeabi_dsub>
 8009168:	4602      	mov	r2, r0
 800916a:	460b      	mov	r3, r1
 800916c:	4690      	mov	r8, r2
 800916e:	4699      	mov	r9, r3
 8009170:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009174:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009178:	f7f7 f886 	bl	8000288 <__aeabi_dsub>
 800917c:	4602      	mov	r2, r0
 800917e:	460b      	mov	r3, r1
 8009180:	4640      	mov	r0, r8
 8009182:	4649      	mov	r1, r9
 8009184:	f7f7 fa38 	bl	80005f8 <__aeabi_dmul>
 8009188:	4602      	mov	r2, r0
 800918a:	460b      	mov	r3, r1
 800918c:	4690      	mov	r8, r2
 800918e:	4699      	mov	r9, r3
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8009196:	e9d7 2300 	ldrd	r2, r3, [r7]
 800919a:	f7f7 f877 	bl	800028c <__adddf3>
 800919e:	4602      	mov	r2, r0
 80091a0:	460b      	mov	r3, r1
 80091a2:	4610      	mov	r0, r2
 80091a4:	4619      	mov	r1, r3
 80091a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80091aa:	f7f7 f86d 	bl	8000288 <__aeabi_dsub>
 80091ae:	4602      	mov	r2, r0
 80091b0:	460b      	mov	r3, r1
 80091b2:	4640      	mov	r0, r8
 80091b4:	4649      	mov	r1, r9
 80091b6:	f7f7 fa1f 	bl	80005f8 <__aeabi_dmul>
 80091ba:	4602      	mov	r2, r0
 80091bc:	460b      	mov	r3, r1
 80091be:	4610      	mov	r0, r2
 80091c0:	4619      	mov	r1, r3
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80091c8:	f7f7 fa16 	bl	80005f8 <__aeabi_dmul>
 80091cc:	4602      	mov	r2, r0
 80091ce:	460b      	mov	r3, r1
 80091d0:	4620      	mov	r0, r4
 80091d2:	4629      	mov	r1, r5
 80091d4:	f7f7 f858 	bl	8000288 <__aeabi_dsub>
 80091d8:	4602      	mov	r2, r0
 80091da:	460b      	mov	r3, r1
 80091dc:	68f9      	ldr	r1, [r7, #12]
 80091de:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 80091e2:	e04e      	b.n	8009282 <scaraFLowScurve1+0x392>
	} else if(td < t && t <= tf){
 80091e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80091ec:	f7f7 fc76 	bl	8000adc <__aeabi_dcmplt>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d045      	beq.n	8009282 <scaraFLowScurve1+0x392>
 80091f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80091fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091fe:	f7f7 fc77 	bl	8000af0 <__aeabi_dcmple>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d03c      	beq.n	8009282 <scaraFLowScurve1+0x392>
//		scurve->a_current 	=	-(vc*(ta - t + td))/(ta*ta);
//		scurve->v_current   =	(vc*(t - tf)*(t-tf))/(2*ta*ta);
		scurve->s_current   =	scurve->total_s + (t-tf)*(t-tf)*(t-tf)*scurve->k_1;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 800920e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009212:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009216:	f7f7 f837 	bl	8000288 <__aeabi_dsub>
 800921a:	4602      	mov	r2, r0
 800921c:	460b      	mov	r3, r1
 800921e:	4690      	mov	r8, r2
 8009220:	4699      	mov	r9, r3
 8009222:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009226:	e9d7 0100 	ldrd	r0, r1, [r7]
 800922a:	f7f7 f82d 	bl	8000288 <__aeabi_dsub>
 800922e:	4602      	mov	r2, r0
 8009230:	460b      	mov	r3, r1
 8009232:	4640      	mov	r0, r8
 8009234:	4649      	mov	r1, r9
 8009236:	f7f7 f9df 	bl	80005f8 <__aeabi_dmul>
 800923a:	4602      	mov	r2, r0
 800923c:	460b      	mov	r3, r1
 800923e:	4690      	mov	r8, r2
 8009240:	4699      	mov	r9, r3
 8009242:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009246:	e9d7 0100 	ldrd	r0, r1, [r7]
 800924a:	f7f7 f81d 	bl	8000288 <__aeabi_dsub>
 800924e:	4602      	mov	r2, r0
 8009250:	460b      	mov	r3, r1
 8009252:	4640      	mov	r0, r8
 8009254:	4649      	mov	r1, r9
 8009256:	f7f7 f9cf 	bl	80005f8 <__aeabi_dmul>
 800925a:	4602      	mov	r2, r0
 800925c:	460b      	mov	r3, r1
 800925e:	4610      	mov	r0, r2
 8009260:	4619      	mov	r1, r3
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8009268:	f7f7 f9c6 	bl	80005f8 <__aeabi_dmul>
 800926c:	4602      	mov	r2, r0
 800926e:	460b      	mov	r3, r1
 8009270:	4620      	mov	r0, r4
 8009272:	4629      	mov	r1, r5
 8009274:	f7f7 f80a 	bl	800028c <__adddf3>
 8009278:	4602      	mov	r2, r0
 800927a:	460b      	mov	r3, r1
 800927c:	68f9      	ldr	r1, [r7, #12]
 800927e:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
	}

	return SCARA_STATUS_OK;
 8009282:	2300      	movs	r3, #0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3730      	adds	r7, #48	; 0x30
 8009288:	46bd      	mov	sp, r7
 800928a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800928e:	bf00      	nop
 8009290:	40080000 	.word	0x40080000
 8009294:	00000000 	.word	0x00000000

08009298 <scaraInitLSPB>:
SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8009298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800929c:	b0ac      	sub	sp, #176	; 0xb0
 800929e:	af00      	add	r7, sp, #0
 80092a0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80092a2:	460b      	mov	r3, r1
 80092a4:	ed87 0b08 	vstr	d0, [r7, #32]
 80092a8:	ed87 1b06 	vstr	d1, [r7, #24]
 80092ac:	ed87 2b04 	vstr	d2, [r7, #16]
 80092b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092b4:	4613      	mov	r3, r2
 80092b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 80092ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80092be:	2b04      	cmp	r3, #4
 80092c0:	d118      	bne.n	80092f4 <scaraInitLSPB+0x5c>
		 v_design = V_DESIGN_3D*v_factor;
 80092c2:	f20f 7350 	addw	r3, pc, #1872	; 0x750
 80092c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80092ce:	f7f7 f993 	bl	80005f8 <__aeabi_dmul>
 80092d2:	4602      	mov	r2, r0
 80092d4:	460b      	mov	r3, r1
 80092d6:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_3D*a_factor;
 80092da:	f20f 7338 	addw	r3, pc, #1848	; 0x738
 80092de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80092e6:	f7f7 f987 	bl	80005f8 <__aeabi_dmul>
 80092ea:	4602      	mov	r2, r0
 80092ec:	460b      	mov	r3, r1
 80092ee:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 80092f2:	e092      	b.n	800941a <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_ROLL == target) {
 80092f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80092f8:	2b05      	cmp	r3, #5
 80092fa:	d118      	bne.n	800932e <scaraInitLSPB+0x96>
		 v_design = V_DESIGN_ROLL*v_factor;
 80092fc:	f20f 731c 	addw	r3, pc, #1820	; 0x71c
 8009300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009304:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009308:	f7f7 f976 	bl	80005f8 <__aeabi_dmul>
 800930c:	4602      	mov	r2, r0
 800930e:	460b      	mov	r3, r1
 8009310:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_ROLL*a_factor;
 8009314:	f20f 7304 	addw	r3, pc, #1796	; 0x704
 8009318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009320:	f7f7 f96a 	bl	80005f8 <__aeabi_dmul>
 8009324:	4602      	mov	r2, r0
 8009326:	460b      	mov	r3, r1
 8009328:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 800932c:	e075      	b.n	800941a <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J0 == target) {
 800932e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009332:	2b00      	cmp	r3, #0
 8009334:	d118      	bne.n	8009368 <scaraInitLSPB+0xd0>
		 v_design = V_DESIGN_J0*v_factor;
 8009336:	f20f 63e4 	addw	r3, pc, #1764	; 0x6e4
 800933a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009342:	f7f7 f959 	bl	80005f8 <__aeabi_dmul>
 8009346:	4602      	mov	r2, r0
 8009348:	460b      	mov	r3, r1
 800934a:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J0*a_factor;
 800934e:	f20f 63cc 	addw	r3, pc, #1740	; 0x6cc
 8009352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009356:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800935a:	f7f7 f94d 	bl	80005f8 <__aeabi_dmul>
 800935e:	4602      	mov	r2, r0
 8009360:	460b      	mov	r3, r1
 8009362:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8009366:	e058      	b.n	800941a <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J1 == target) {
 8009368:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800936c:	2b01      	cmp	r3, #1
 800936e:	d118      	bne.n	80093a2 <scaraInitLSPB+0x10a>
		 v_design = V_DESIGN_J1*v_factor;
 8009370:	f20f 63a8 	addw	r3, pc, #1704	; 0x6a8
 8009374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009378:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800937c:	f7f7 f93c 	bl	80005f8 <__aeabi_dmul>
 8009380:	4602      	mov	r2, r0
 8009382:	460b      	mov	r3, r1
 8009384:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J1*a_factor;
 8009388:	f20f 6390 	addw	r3, pc, #1680	; 0x690
 800938c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009390:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009394:	f7f7 f930 	bl	80005f8 <__aeabi_dmul>
 8009398:	4602      	mov	r2, r0
 800939a:	460b      	mov	r3, r1
 800939c:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 80093a0:	e03b      	b.n	800941a <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J2 == target) {
 80093a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d118      	bne.n	80093dc <scaraInitLSPB+0x144>
		 v_design = V_DESIGN_J2*v_factor;
 80093aa:	f20f 6368 	addw	r3, pc, #1640	; 0x668
 80093ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80093b6:	f7f7 f91f 	bl	80005f8 <__aeabi_dmul>
 80093ba:	4602      	mov	r2, r0
 80093bc:	460b      	mov	r3, r1
 80093be:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J2*a_factor;
 80093c2:	f20f 6350 	addw	r3, pc, #1616	; 0x650
 80093c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80093ce:	f7f7 f913 	bl	80005f8 <__aeabi_dmul>
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 80093da:	e01e      	b.n	800941a <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J3 == target) {
 80093dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80093e0:	2b03      	cmp	r3, #3
 80093e2:	d118      	bne.n	8009416 <scaraInitLSPB+0x17e>
		 v_design = V_DESIGN_J3*v_factor;
 80093e4:	f20f 633c 	addw	r3, pc, #1596	; 0x63c
 80093e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80093f0:	f7f7 f902 	bl	80005f8 <__aeabi_dmul>
 80093f4:	4602      	mov	r2, r0
 80093f6:	460b      	mov	r3, r1
 80093f8:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J3*a_factor;
 80093fc:	f20f 6324 	addw	r3, pc, #1572	; 0x624
 8009400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009404:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009408:	f7f7 f8f6 	bl	80005f8 <__aeabi_dmul>
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8009414:	e001      	b.n	800941a <scaraInitLSPB+0x182>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8009416:	2306      	movs	r3, #6
 8009418:	e2ef      	b.n	80099fa <scaraInitLSPB+0x762>
	 }

	 q0 = 0;
 800941a:	f04f 0200 	mov.w	r2, #0
 800941e:	f04f 0300 	mov.w	r3, #0
 8009422:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	 q1 = total_s;
 8009426:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800942a:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	 v0 = 0;
 800942e:	f04f 0200 	mov.w	r2, #0
 8009432:	f04f 0300 	mov.w	r3, #0
 8009436:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	 v1 = 0;
 800943a:	f04f 0200 	mov.w	r2, #0
 800943e:	f04f 0300 	mov.w	r3, #0
 8009442:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	 if ( q0 <= q1) {
 8009446:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800944a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800944e:	f7f7 fb4f 	bl	8000af0 <__aeabi_dcmple>
 8009452:	4603      	mov	r3, r0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d003      	beq.n	8009460 <scaraInitLSPB+0x1c8>
		 dir = 1;
 8009458:	2301      	movs	r3, #1
 800945a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800945e:	e00c      	b.n	800947a <scaraInitLSPB+0x1e2>
	 } else {
		 dir = -1;
 8009460:	23ff      	movs	r3, #255	; 0xff
 8009462:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		 q1 = -q1;
 8009466:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800946a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800946e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009472:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009476:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 800947a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800947e:	2b01      	cmp	r3, #1
 8009480:	f040 809b 	bne.w	80095ba <scaraInitLSPB+0x322>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 8009484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009486:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800948a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		 // Avoid division by 0
		 if (tf > 0.001) {
 800948e:	f20f 539c 	addw	r3, pc, #1436	; 0x59c
 8009492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009496:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800949a:	f7f7 fb3d 	bl	8000b18 <__aeabi_dcmpgt>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d07e      	beq.n	80095a2 <scaraInitLSPB+0x30a>
			 v_lower 	= (q1 - q0) / tf;
 80094a4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80094a8:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80094ac:	f7f6 feec 	bl	8000288 <__aeabi_dsub>
 80094b0:	4602      	mov	r2, r0
 80094b2:	460b      	mov	r3, r1
 80094b4:	4610      	mov	r0, r2
 80094b6:	4619      	mov	r1, r3
 80094b8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80094bc:	f7f7 f9c6 	bl	800084c <__aeabi_ddiv>
 80094c0:	4602      	mov	r2, r0
 80094c2:	460b      	mov	r3, r1
 80094c4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			 v_upper 	= 2*(q1 - q0) / tf;
 80094c8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80094cc:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80094d0:	f7f6 feda 	bl	8000288 <__aeabi_dsub>
 80094d4:	4602      	mov	r2, r0
 80094d6:	460b      	mov	r3, r1
 80094d8:	4610      	mov	r0, r2
 80094da:	4619      	mov	r1, r3
 80094dc:	4602      	mov	r2, r0
 80094de:	460b      	mov	r3, r1
 80094e0:	f7f6 fed4 	bl	800028c <__adddf3>
 80094e4:	4602      	mov	r2, r0
 80094e6:	460b      	mov	r3, r1
 80094e8:	4610      	mov	r0, r2
 80094ea:	4619      	mov	r1, r3
 80094ec:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80094f0:	f7f7 f9ac 	bl	800084c <__aeabi_ddiv>
 80094f4:	4602      	mov	r2, r0
 80094f6:	460b      	mov	r3, r1
 80094f8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

			 if ( v_design < v_lower) {
 80094fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009500:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009504:	f7f7 faea 	bl	8000adc <__aeabi_dcmplt>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d001      	beq.n	8009512 <scaraInitLSPB+0x27a>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 800950e:	2309      	movs	r3, #9
 8009510:	e273      	b.n	80099fa <scaraInitLSPB+0x762>
			 } else {
				 if ( v_upper <= v_design) {
 8009512:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8009516:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800951a:	f7f7 fae9 	bl	8000af0 <__aeabi_dcmple>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d003      	beq.n	800952c <scaraInitLSPB+0x294>
					 v_design = v_upper;
 8009524:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009528:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 800952c:	f20f 5304 	addw	r3, pc, #1284	; 0x504
 8009530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009534:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009538:	f7f7 faee 	bl	8000b18 <__aeabi_dcmpgt>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d018      	beq.n	8009574 <scaraInitLSPB+0x2dc>
					 tc_upper	= tf - (q1 - q0)/v_design;
 8009542:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009546:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800954a:	f7f6 fe9d 	bl	8000288 <__aeabi_dsub>
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	4610      	mov	r0, r2
 8009554:	4619      	mov	r1, r3
 8009556:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800955a:	f7f7 f977 	bl	800084c <__aeabi_ddiv>
 800955e:	4602      	mov	r2, r0
 8009560:	460b      	mov	r3, r1
 8009562:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009566:	f7f6 fe8f 	bl	8000288 <__aeabi_dsub>
 800956a:	4602      	mov	r2, r0
 800956c:	460b      	mov	r3, r1
 800956e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8009572:	e00b      	b.n	800958c <scaraInitLSPB+0x2f4>
				 } else {
					 tc_upper = tf / 2;
 8009574:	f04f 0200 	mov.w	r2, #0
 8009578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800957c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009580:	f7f7 f964 	bl	800084c <__aeabi_ddiv>
 8009584:	4602      	mov	r2, r0
 8009586:	460b      	mov	r3, r1
 8009588:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
				 }
				 a_upper	= v_design/tc_upper;
 800958c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009590:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009594:	f7f7 f95a 	bl	800084c <__aeabi_ddiv>
 8009598:	4602      	mov	r2, r0
 800959a:	460b      	mov	r3, r1
 800959c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80095a0:	e00b      	b.n	80095ba <scaraInitLSPB+0x322>
				//  } else {
				// 	 a_design = a_upper;
				//  }
			 }
		 } else {
			 v_design = 0;
 80095a2:	f04f 0200 	mov.w	r2, #0
 80095a6:	f04f 0300 	mov.w	r3, #0
 80095aa:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
			 a_design = 0;
 80095ae:	f04f 0200 	mov.w	r2, #0
 80095b2:	f04f 0300 	mov.w	r3, #0
 80095b6:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 80095ba:	f20f 4378 	addw	r3, pc, #1144	; 0x478
 80095be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80095c6:	f7f7 faa7 	bl	8000b18 <__aeabi_dcmpgt>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f000 8196 	beq.w	80098fe <scaraInitLSPB+0x666>
 80095d2:	f20f 4360 	addw	r3, pc, #1120	; 0x460
 80095d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095da:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80095de:	f7f7 fa9b 	bl	8000b18 <__aeabi_dcmpgt>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f000 818a 	beq.w	80098fe <scaraInitLSPB+0x666>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80095ea:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80095ee:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80095f2:	f7f6 fe49 	bl	8000288 <__aeabi_dsub>
 80095f6:	4602      	mov	r2, r0
 80095f8:	460b      	mov	r3, r1
 80095fa:	4614      	mov	r4, r2
 80095fc:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8009600:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009604:	4620      	mov	r0, r4
 8009606:	4629      	mov	r1, r5
 8009608:	f7f6 fff6 	bl	80005f8 <__aeabi_dmul>
 800960c:	4602      	mov	r2, r0
 800960e:	460b      	mov	r3, r1
 8009610:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009614:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8009618:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800961c:	f7f6 ffec 	bl	80005f8 <__aeabi_dmul>
 8009620:	4602      	mov	r2, r0
 8009622:	460b      	mov	r3, r1
 8009624:	e9c7 2300 	strd	r2, r3, [r7]
 8009628:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800962c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009630:	f7f6 ffe2 	bl	80005f8 <__aeabi_dmul>
 8009634:	4602      	mov	r2, r0
 8009636:	460b      	mov	r3, r1
 8009638:	4614      	mov	r4, r2
 800963a:	461d      	mov	r5, r3
 800963c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009640:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009644:	f7f6 ffd8 	bl	80005f8 <__aeabi_dmul>
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	4620      	mov	r0, r4
 800964e:	4629      	mov	r1, r5
 8009650:	f7f6 fe1c 	bl	800028c <__adddf3>
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	4610      	mov	r0, r2
 800965a:	4619      	mov	r1, r3
 800965c:	f04f 0200 	mov.w	r2, #0
 8009660:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009664:	f7f7 f8f2 	bl	800084c <__aeabi_ddiv>
 8009668:	4602      	mov	r2, r0
 800966a:	460b      	mov	r3, r1
 800966c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009670:	f7f6 fe0a 	bl	8000288 <__aeabi_dsub>
 8009674:	4602      	mov	r2, r0
 8009676:	460b      	mov	r3, r1
 8009678:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800967c:	f7f7 fa38 	bl	8000af0 <__aeabi_dcmple>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d075      	beq.n	8009772 <scaraInitLSPB+0x4da>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 8009686:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800968a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800968e:	f7f6 fdfb 	bl	8000288 <__aeabi_dsub>
 8009692:	4602      	mov	r2, r0
 8009694:	460b      	mov	r3, r1
 8009696:	4692      	mov	sl, r2
 8009698:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800969c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80096a0:	4650      	mov	r0, sl
 80096a2:	4659      	mov	r1, fp
 80096a4:	f7f6 ffa8 	bl	80005f8 <__aeabi_dmul>
 80096a8:	4602      	mov	r2, r0
 80096aa:	460b      	mov	r3, r1
 80096ac:	4614      	mov	r4, r2
 80096ae:	461d      	mov	r5, r3
 80096b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80096b4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80096b8:	f7f6 ff9e 	bl	80005f8 <__aeabi_dmul>
 80096bc:	4602      	mov	r2, r0
 80096be:	460b      	mov	r3, r1
 80096c0:	4690      	mov	r8, r2
 80096c2:	4699      	mov	r9, r3
 80096c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80096c8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80096cc:	f7f6 ff94 	bl	80005f8 <__aeabi_dmul>
 80096d0:	4602      	mov	r2, r0
 80096d2:	460b      	mov	r3, r1
 80096d4:	4640      	mov	r0, r8
 80096d6:	4649      	mov	r1, r9
 80096d8:	f7f6 fdd8 	bl	800028c <__adddf3>
 80096dc:	4602      	mov	r2, r0
 80096de:	460b      	mov	r3, r1
 80096e0:	4610      	mov	r0, r2
 80096e2:	4619      	mov	r1, r3
 80096e4:	f04f 0200 	mov.w	r2, #0
 80096e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80096ec:	f7f7 f8ae 	bl	800084c <__aeabi_ddiv>
 80096f0:	4602      	mov	r2, r0
 80096f2:	460b      	mov	r3, r1
 80096f4:	4620      	mov	r0, r4
 80096f6:	4629      	mov	r1, r5
 80096f8:	f7f6 fdc8 	bl	800028c <__adddf3>
 80096fc:	4602      	mov	r2, r0
 80096fe:	460b      	mov	r3, r1
 8009700:	ec43 2b17 	vmov	d7, r2, r3
 8009704:	eeb0 0a47 	vmov.f32	s0, s14
 8009708:	eef0 0a67 	vmov.f32	s1, s15
 800970c:	f011 fa40 	bl	801ab90 <sqrt>
 8009710:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 8009714:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009718:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800971c:	f7f6 fdb4 	bl	8000288 <__aeabi_dsub>
 8009720:	4602      	mov	r2, r0
 8009722:	460b      	mov	r3, r1
 8009724:	4610      	mov	r0, r2
 8009726:	4619      	mov	r1, r3
 8009728:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800972c:	f7f7 f88e 	bl	800084c <__aeabi_ddiv>
 8009730:	4602      	mov	r2, r0
 8009732:	460b      	mov	r3, r1
 8009734:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8009738:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800973c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009740:	f7f6 fda2 	bl	8000288 <__aeabi_dsub>
 8009744:	4602      	mov	r2, r0
 8009746:	460b      	mov	r3, r1
 8009748:	4610      	mov	r0, r2
 800974a:	4619      	mov	r1, r3
 800974c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009750:	f7f7 f87c 	bl	800084c <__aeabi_ddiv>
 8009754:	4602      	mov	r2, r0
 8009756:	460b      	mov	r3, r1
 8009758:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			 tf		= ta + td;
 800975c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009760:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8009764:	f7f6 fd92 	bl	800028c <__adddf3>
 8009768:	4602      	mov	r2, r0
 800976a:	460b      	mov	r3, r1
 800976c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8009770:	e0e3      	b.n	800993a <scaraInitLSPB+0x6a2>
		 } else {
			 v_lim	= v_design;
 8009772:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8009776:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 800977a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800977e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009782:	f7f6 fd81 	bl	8000288 <__aeabi_dsub>
 8009786:	4602      	mov	r2, r0
 8009788:	460b      	mov	r3, r1
 800978a:	4610      	mov	r0, r2
 800978c:	4619      	mov	r1, r3
 800978e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009792:	f7f7 f85b 	bl	800084c <__aeabi_ddiv>
 8009796:	4602      	mov	r2, r0
 8009798:	460b      	mov	r3, r1
 800979a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 800979e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80097a2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80097a6:	f7f6 fd6f 	bl	8000288 <__aeabi_dsub>
 80097aa:	4602      	mov	r2, r0
 80097ac:	460b      	mov	r3, r1
 80097ae:	4610      	mov	r0, r2
 80097b0:	4619      	mov	r1, r3
 80097b2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80097b6:	f7f7 f849 	bl	800084c <__aeabi_ddiv>
 80097ba:	4602      	mov	r2, r0
 80097bc:	460b      	mov	r3, r1
 80097be:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 80097c2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80097c6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80097ca:	f7f6 fd5d 	bl	8000288 <__aeabi_dsub>
 80097ce:	4602      	mov	r2, r0
 80097d0:	460b      	mov	r3, r1
 80097d2:	4690      	mov	r8, r2
 80097d4:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80097d8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80097dc:	4640      	mov	r0, r8
 80097de:	4649      	mov	r1, r9
 80097e0:	f7f7 f834 	bl	800084c <__aeabi_ddiv>
 80097e4:	4602      	mov	r2, r0
 80097e6:	460b      	mov	r3, r1
 80097e8:	4614      	mov	r4, r2
 80097ea:	461d      	mov	r5, r3
 80097ec:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80097f0:	4602      	mov	r2, r0
 80097f2:	460b      	mov	r3, r1
 80097f4:	f7f6 fd4a 	bl	800028c <__adddf3>
 80097f8:	4602      	mov	r2, r0
 80097fa:	460b      	mov	r3, r1
 80097fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009800:	f7f7 f824 	bl	800084c <__aeabi_ddiv>
 8009804:	4602      	mov	r2, r0
 8009806:	460b      	mov	r3, r1
 8009808:	4690      	mov	r8, r2
 800980a:	4699      	mov	r9, r3
 800980c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009810:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009814:	f7f7 f81a 	bl	800084c <__aeabi_ddiv>
 8009818:	4602      	mov	r2, r0
 800981a:	460b      	mov	r3, r1
 800981c:	f04f 0000 	mov.w	r0, #0
 8009820:	497b      	ldr	r1, [pc, #492]	; (8009a10 <scaraInitLSPB+0x778>)
 8009822:	f7f6 fd31 	bl	8000288 <__aeabi_dsub>
 8009826:	4602      	mov	r2, r0
 8009828:	460b      	mov	r3, r1
 800982a:	4640      	mov	r0, r8
 800982c:	4649      	mov	r1, r9
 800982e:	f7f6 fee3 	bl	80005f8 <__aeabi_dmul>
 8009832:	4602      	mov	r2, r0
 8009834:	460b      	mov	r3, r1
 8009836:	4690      	mov	r8, r2
 8009838:	4699      	mov	r9, r3
 800983a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800983e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009842:	f7f7 f803 	bl	800084c <__aeabi_ddiv>
 8009846:	4602      	mov	r2, r0
 8009848:	460b      	mov	r3, r1
 800984a:	f04f 0000 	mov.w	r0, #0
 800984e:	4970      	ldr	r1, [pc, #448]	; (8009a10 <scaraInitLSPB+0x778>)
 8009850:	f7f6 fd1a 	bl	8000288 <__aeabi_dsub>
 8009854:	4602      	mov	r2, r0
 8009856:	460b      	mov	r3, r1
 8009858:	4640      	mov	r0, r8
 800985a:	4649      	mov	r1, r9
 800985c:	f7f6 fecc 	bl	80005f8 <__aeabi_dmul>
 8009860:	4602      	mov	r2, r0
 8009862:	460b      	mov	r3, r1
 8009864:	4620      	mov	r0, r4
 8009866:	4629      	mov	r1, r5
 8009868:	f7f6 fd10 	bl	800028c <__adddf3>
 800986c:	4602      	mov	r2, r0
 800986e:	460b      	mov	r3, r1
 8009870:	4614      	mov	r4, r2
 8009872:	461d      	mov	r5, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 8009874:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009878:	4602      	mov	r2, r0
 800987a:	460b      	mov	r3, r1
 800987c:	f7f6 fd06 	bl	800028c <__adddf3>
 8009880:	4602      	mov	r2, r0
 8009882:	460b      	mov	r3, r1
 8009884:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009888:	f7f6 ffe0 	bl	800084c <__aeabi_ddiv>
 800988c:	4602      	mov	r2, r0
 800988e:	460b      	mov	r3, r1
 8009890:	4690      	mov	r8, r2
 8009892:	4699      	mov	r9, r3
 8009894:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009898:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800989c:	f7f6 ffd6 	bl	800084c <__aeabi_ddiv>
 80098a0:	4602      	mov	r2, r0
 80098a2:	460b      	mov	r3, r1
 80098a4:	f04f 0000 	mov.w	r0, #0
 80098a8:	4959      	ldr	r1, [pc, #356]	; (8009a10 <scaraInitLSPB+0x778>)
 80098aa:	f7f6 fced 	bl	8000288 <__aeabi_dsub>
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	4640      	mov	r0, r8
 80098b4:	4649      	mov	r1, r9
 80098b6:	f7f6 fe9f 	bl	80005f8 <__aeabi_dmul>
 80098ba:	4602      	mov	r2, r0
 80098bc:	460b      	mov	r3, r1
 80098be:	4690      	mov	r8, r2
 80098c0:	4699      	mov	r9, r3
 80098c2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80098c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80098ca:	f7f6 ffbf 	bl	800084c <__aeabi_ddiv>
 80098ce:	4602      	mov	r2, r0
 80098d0:	460b      	mov	r3, r1
 80098d2:	f04f 0000 	mov.w	r0, #0
 80098d6:	494e      	ldr	r1, [pc, #312]	; (8009a10 <scaraInitLSPB+0x778>)
 80098d8:	f7f6 fcd6 	bl	8000288 <__aeabi_dsub>
 80098dc:	4602      	mov	r2, r0
 80098de:	460b      	mov	r3, r1
 80098e0:	4640      	mov	r0, r8
 80098e2:	4649      	mov	r1, r9
 80098e4:	f7f6 fe88 	bl	80005f8 <__aeabi_dmul>
 80098e8:	4602      	mov	r2, r0
 80098ea:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 80098ec:	4620      	mov	r0, r4
 80098ee:	4629      	mov	r1, r5
 80098f0:	f7f6 fccc 	bl	800028c <__adddf3>
 80098f4:	4602      	mov	r2, r0
 80098f6:	460b      	mov	r3, r1
 80098f8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80098fc:	e01d      	b.n	800993a <scaraInitLSPB+0x6a2>
		 }
	 } else {
		 v_lim	= 0;
 80098fe:	f04f 0200 	mov.w	r2, #0
 8009902:	f04f 0300 	mov.w	r3, #0
 8009906:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		 ta = tf/2;
 800990a:	f04f 0200 	mov.w	r2, #0
 800990e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009912:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009916:	f7f6 ff99 	bl	800084c <__aeabi_ddiv>
 800991a:	4602      	mov	r2, r0
 800991c:	460b      	mov	r3, r1
 800991e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		 td = tf/2;
 8009922:	f04f 0200 	mov.w	r2, #0
 8009926:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800992a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800992e:	f7f6 ff8d 	bl	800084c <__aeabi_ddiv>
 8009932:	4602      	mov	r2, r0
 8009934:	460b      	mov	r3, r1
 8009936:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 800993a:	a333      	add	r3, pc, #204	; (adr r3, 8009a08 <scaraInitLSPB+0x770>)
 800993c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009940:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009944:	f7f6 ff82 	bl	800084c <__aeabi_ddiv>
 8009948:	4602      	mov	r2, r0
 800994a:	460b      	mov	r3, r1
 800994c:	4610      	mov	r0, r2
 800994e:	4619      	mov	r1, r3
 8009950:	f7f7 f94a 	bl	8000be8 <__aeabi_d2f>
 8009954:	4603      	mov	r3, r0
 8009956:	ee00 3a10 	vmov	s0, r3
 800995a:	f011 f8d5 	bl	801ab08 <ceilf>
 800995e:	eef0 7a40 	vmov.f32	s15, s0
 8009962:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009966:	ee17 3a90 	vmov	r3, s15
 800996a:	637b      	str	r3, [r7, #52]	; 0x34
	 // Init lspb params
	 lspb->dir= dir;
 800996c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800996e:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8009972:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 8009974:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009976:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800997a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	 lspb->s1 = q1;
 800997e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009980:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8009984:	e9c1 2304 	strd	r2, r3, [r1, #16]
	 lspb->Ta = ta;
 8009988:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800998a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800998e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 lspb->Td = td;
 8009992:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009994:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009998:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	 lspb->Tf = tf;
 800999c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800999e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80099a2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	 lspb->a_design = a_design;
 80099a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099a8:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80099ac:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	 lspb->v_design = v_design;
 80099b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099b2:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80099b6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	 lspb->v_lim = v_lim;
 80099ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099bc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80099c0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 lspb->v0 = v0;
 80099c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80099ca:	e9c1 2306 	strd	r2, r3, [r1, #24]
	 lspb->v1 = v1;
 80099ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80099d4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	 lspb->num_of_sampling = no_sample;
 80099d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099dc:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 80099de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80099e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80099ea:	f7f6 fc4d 	bl	8000288 <__aeabi_dsub>
 80099ee:	4602      	mov	r2, r0
 80099f0:	460b      	mov	r3, r1
 80099f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099f4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	 return SCARA_STATUS_OK;
 80099f8:	2300      	movs	r3, #0
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	37b0      	adds	r7, #176	; 0xb0
 80099fe:	46bd      	mov	sp, r7
 8009a00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a04:	f3af 8000 	nop.w
 8009a08:	40000000 	.word	0x40000000
 8009a0c:	3f847ae1 	.word	0x3f847ae1
 8009a10:	3ff00000 	.word	0x3ff00000
 8009a14:	00000000 	.word	0x00000000
 8009a18:	405c2000 	.word	0x405c2000
 8009a1c:	14000000 	.word	0x14000000
 8009a20:	4000f6f0 	.word	0x4000f6f0
 8009a24:	6b259425 	.word	0x6b259425
 8009a28:	40069b91 	.word	0x40069b91
 8009a2c:	d2f1a9fc 	.word	0xd2f1a9fc
 8009a30:	3f50624d 	.word	0x3f50624d
 8009a34:	9abcaf48 	.word	0x9abcaf48
 8009a38:	3e7ad7f2 	.word	0x3e7ad7f2

08009a3c <scaraInitScurve>:
SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8009a3c:	b480      	push	{r7}
 8009a3e:	b089      	sub	sp, #36	; 0x24
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	61f8      	str	r0, [r7, #28]
 8009a44:	460b      	mov	r3, r1
 8009a46:	ed87 0b04 	vstr	d0, [r7, #16]
 8009a4a:	ed87 1b02 	vstr	d1, [r7, #8]
 8009a4e:	ed87 2b00 	vstr	d2, [r7]
 8009a52:	76fb      	strb	r3, [r7, #27]
 8009a54:	4613      	mov	r3, r2
 8009a56:	76bb      	strb	r3, [r7, #26]
//	 scurve->s_1 = s_1;
//	 scurve->s_2 = s_2;
//	 scurve->s_3 = s_3;
//	 scurve->s_4 = s_4;

	 return SCARA_STATUS_OK;
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3724      	adds	r7, #36	; 0x24
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr
	...

08009a68 <scaraFlowDuty>:
}

/* Compute new x, y , z, theta1, theta2 , d3, theta4 corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 8009a68:	b082      	sub	sp, #8
 8009a6a:	b5b0      	push	{r4, r5, r7, lr}
 8009a6c:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8009a70:	af2e      	add	r7, sp, #184	; 0xb8
 8009a72:	f107 0108 	add.w	r1, r7, #8
 8009a76:	ed81 0b00 	vstr	d0, [r1]
 8009a7a:	1d39      	adds	r1, r7, #4
 8009a7c:	6008      	str	r0, [r1, #0]
 8009a7e:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8009a82:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 8009a86:	f107 0118 	add.w	r1, r7, #24
 8009a8a:	f107 0308 	add.w	r3, r7, #8
 8009a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a92:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 8009a96:	4b92      	ldr	r3, [pc, #584]	; (8009ce0 <scaraFlowDuty+0x278>)
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f040 81a1 	bne.w	8009de2 <scaraFlowDuty+0x37a>
		double s, angle, x, y, z, v, v_angle;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 8009aa0:	4b8f      	ldr	r3, [pc, #572]	; (8009ce0 <scaraFlowDuty+0x278>)
 8009aa2:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d12b      	bne.n	8009b02 <scaraFlowDuty+0x9a>

			status1 = scaraFlowLSPB1(&(myDUTY.task.trajectory_3d.lspb), time);
 8009aaa:	f107 0308 	add.w	r3, r7, #8
 8009aae:	ed93 0b00 	vldr	d0, [r3]
 8009ab2:	488c      	ldr	r0, [pc, #560]	; (8009ce4 <scaraFlowDuty+0x27c>)
 8009ab4:	f7fe ffae 	bl	8008a14 <scaraFlowLSPB1>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 8009abe:	4b88      	ldr	r3, [pc, #544]	; (8009ce0 <scaraFlowDuty+0x278>)
 8009ac0:	e9d3 2362 	ldrd	r2, r3, [r3, #392]	; 0x188
 8009ac4:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 8009ac8:	4b85      	ldr	r3, [pc, #532]	; (8009ce0 <scaraFlowDuty+0x278>)
 8009aca:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 8009ace:	f107 0110 	add.w	r1, r7, #16
 8009ad2:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8009ad6:	4b82      	ldr	r3, [pc, #520]	; (8009ce0 <scaraFlowDuty+0x278>)
 8009ad8:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8009adc:	f107 0108 	add.w	r1, r7, #8
 8009ae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ae4:	f7f6 fd88 	bl	80005f8 <__aeabi_dmul>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	460b      	mov	r3, r1
 8009aec:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009af0:	4b7b      	ldr	r3, [pc, #492]	; (8009ce0 <scaraFlowDuty+0x278>)
 8009af2:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009af6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status2 = SCARA_STATUS_OK;
 8009afa:	2300      	movs	r3, #0
 8009afc:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009b00:	e099      	b.n	8009c36 <scaraFlowDuty+0x1ce>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 8009b02:	4b77      	ldr	r3, [pc, #476]	; (8009ce0 <scaraFlowDuty+0x278>)
 8009b04:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d126      	bne.n	8009b5a <scaraFlowDuty+0xf2>

			status1 = scaraFLowScurve1(&(myDUTY.task.trajectory_3d.scurve), time);
 8009b0c:	f107 0308 	add.w	r3, r7, #8
 8009b10:	ed93 0b00 	vldr	d0, [r3]
 8009b14:	4874      	ldr	r0, [pc, #464]	; (8009ce8 <scaraFlowDuty+0x280>)
 8009b16:	f7ff f9eb 	bl	8008ef0 <scaraFLowScurve1>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			//v = myDUTY.task.trajectory_3d.lspb.v_current;
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 8009b20:	4b6f      	ldr	r3, [pc, #444]	; (8009ce0 <scaraFlowDuty+0x278>)
 8009b22:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	; 0x260
 8009b26:	f107 0110 	add.w	r1, r7, #16
 8009b2a:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8009b2e:	4b6c      	ldr	r3, [pc, #432]	; (8009ce0 <scaraFlowDuty+0x278>)
 8009b30:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8009b34:	f107 0108 	add.w	r1, r7, #8
 8009b38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b3c:	f7f6 fd5c 	bl	80005f8 <__aeabi_dmul>
 8009b40:	4602      	mov	r2, r0
 8009b42:	460b      	mov	r3, r1
 8009b44:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009b48:	4b65      	ldr	r3, [pc, #404]	; (8009ce0 <scaraFlowDuty+0x278>)
 8009b4a:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009b4e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status2 = SCARA_STATUS_OK;
 8009b52:	2300      	movs	r3, #0
 8009b54:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009b58:	e06d      	b.n	8009c36 <scaraFlowDuty+0x1ce>
		}else if( DUTY_TRAJECTORY_LINEAR == myDUTY.task.trajectory_3d.trajectory_type){
 8009b5a:	4b61      	ldr	r3, [pc, #388]	; (8009ce0 <scaraFlowDuty+0x278>)
 8009b5c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	d127      	bne.n	8009bb4 <scaraFlowDuty+0x14c>
			s = time*myDUTY.task.trajectory_3d.linear.constant_v;
 8009b64:	4b5e      	ldr	r3, [pc, #376]	; (8009ce0 <scaraFlowDuty+0x278>)
 8009b66:	e9d3 019c 	ldrd	r0, r1, [r3, #624]	; 0x270
 8009b6a:	f107 0308 	add.w	r3, r7, #8
 8009b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b72:	f7f6 fd41 	bl	80005f8 <__aeabi_dmul>
 8009b76:	4602      	mov	r2, r0
 8009b78:	460b      	mov	r3, r1
 8009b7a:	f107 0110 	add.w	r1, r7, #16
 8009b7e:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8009b82:	4b57      	ldr	r3, [pc, #348]	; (8009ce0 <scaraFlowDuty+0x278>)
 8009b84:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8009b88:	f107 0108 	add.w	r1, r7, #8
 8009b8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b90:	f7f6 fd32 	bl	80005f8 <__aeabi_dmul>
 8009b94:	4602      	mov	r2, r0
 8009b96:	460b      	mov	r3, r1
 8009b98:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009b9c:	4b50      	ldr	r3, [pc, #320]	; (8009ce0 <scaraFlowDuty+0x278>)
 8009b9e:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009ba2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status1 = SCARA_STATUS_OK;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 8009bac:	2300      	movs	r3, #0
 8009bae:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009bb2:	e040      	b.n	8009c36 <scaraFlowDuty+0x1ce>
		}else if(DUTY_TRAJECTORY_GCODE_LSPB == myDUTY.task.trajectory_3d.trajectory_type){
 8009bb4:	4b4a      	ldr	r3, [pc, #296]	; (8009ce0 <scaraFlowDuty+0x278>)
 8009bb6:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009bba:	2b03      	cmp	r3, #3
 8009bbc:	d139      	bne.n	8009c32 <scaraFlowDuty+0x1ca>
			scaraFlowGCODE(&s, time);
 8009bbe:	f107 0308 	add.w	r3, r7, #8
 8009bc2:	f107 0210 	add.w	r2, r7, #16
 8009bc6:	ed93 0b00 	vldr	d0, [r3]
 8009bca:	4610      	mov	r0, r2
 8009bcc:	f7ff f8b4 	bl	8008d38 <scaraFlowGCODE>
			s -= accumulate_s;
 8009bd0:	f107 0310 	add.w	r3, r7, #16
 8009bd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009bd8:	4b44      	ldr	r3, [pc, #272]	; (8009cec <scaraFlowDuty+0x284>)
 8009bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bde:	f7f6 fb53 	bl	8000288 <__aeabi_dsub>
 8009be2:	4602      	mov	r2, r0
 8009be4:	460b      	mov	r3, r1
 8009be6:	f107 0110 	add.w	r1, r7, #16
 8009bea:	e9c1 2300 	strd	r2, r3, [r1]
			//LOG_REPORT1("s watcher:", s, time);
			angle = myDUTY.task.trajectory_roll.linear.constant_v*(time - last_T);
 8009bee:	4b3c      	ldr	r3, [pc, #240]	; (8009ce0 <scaraFlowDuty+0x278>)
 8009bf0:	e9d3 45fc 	ldrd	r4, r5, [r3, #1008]	; 0x3f0
 8009bf4:	4b3e      	ldr	r3, [pc, #248]	; (8009cf0 <scaraFlowDuty+0x288>)
 8009bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfa:	f107 0108 	add.w	r1, r7, #8
 8009bfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c02:	f7f6 fb41 	bl	8000288 <__aeabi_dsub>
 8009c06:	4602      	mov	r2, r0
 8009c08:	460b      	mov	r3, r1
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	4629      	mov	r1, r5
 8009c0e:	f7f6 fcf3 	bl	80005f8 <__aeabi_dmul>
 8009c12:	4602      	mov	r2, r0
 8009c14:	460b      	mov	r3, r1
 8009c16:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009c1a:	4b31      	ldr	r3, [pc, #196]	; (8009ce0 <scaraFlowDuty+0x278>)
 8009c1c:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009c20:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status1 = SCARA_STATUS_OK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009c30:	e001      	b.n	8009c36 <scaraFlowDuty+0x1ce>
//			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
//			status1 = SCARA_STATUS_OK;
//			status2 = SCARA_STATUS_OK;
//		}
		else{
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8009c32:	2305      	movs	r3, #5
 8009c34:	e2c1      	b.n	800a1ba <scaraFlowDuty+0x752>
		}

		if ( SCARA_STATUS_OK != status1) {
 8009c36:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d002      	beq.n	8009c44 <scaraFlowDuty+0x1dc>
			return status1;
 8009c3e:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8009c42:	e2ba      	b.n	800a1ba <scaraFlowDuty+0x752>
		}
		if ( SCARA_STATUS_OK != status2) {
 8009c44:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d002      	beq.n	8009c52 <scaraFlowDuty+0x1ea>
			return status2;
 8009c4c:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8009c50:	e2b3      	b.n	800a1ba <scaraFlowDuty+0x752>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 8009c52:	4b23      	ldr	r3, [pc, #140]	; (8009ce0 <scaraFlowDuty+0x278>)
 8009c54:	7a1b      	ldrb	r3, [r3, #8]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d11d      	bne.n	8009c96 <scaraFlowDuty+0x22e>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 8009c5a:	f107 0310 	add.w	r3, r7, #16
 8009c5e:	ed93 7b00 	vldr	d7, [r3]
 8009c62:	eeb0 0a47 	vmov.f32	s0, s14
 8009c66:	eef0 0a67 	vmov.f32	s1, s15
 8009c6a:	4822      	ldr	r0, [pc, #136]	; (8009cf4 <scaraFlowDuty+0x28c>)
 8009c6c:	f000 fab0 	bl	800a1d0 <scaraFlowLine>
 8009c70:	4603      	mov	r3, r0
 8009c72:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.line.x_current;
 8009c76:	4b1a      	ldr	r3, [pc, #104]	; (8009ce0 <scaraFlowDuty+0x278>)
 8009c78:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8009c7c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			y = myDUTY.task.path.line.y_current;
 8009c80:	4b17      	ldr	r3, [pc, #92]	; (8009ce0 <scaraFlowDuty+0x278>)
 8009c82:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8009c86:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			z = myDUTY.task.path.line.z_current;
 8009c8a:	4b15      	ldr	r3, [pc, #84]	; (8009ce0 <scaraFlowDuty+0x278>)
 8009c8c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8009c90:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
 8009c94:	e032      	b.n	8009cfc <scaraFlowDuty+0x294>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 8009c96:	4b12      	ldr	r3, [pc, #72]	; (8009ce0 <scaraFlowDuty+0x278>)
 8009c98:	7a1b      	ldrb	r3, [r3, #8]
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d11d      	bne.n	8009cda <scaraFlowDuty+0x272>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 8009c9e:	f107 0310 	add.w	r3, r7, #16
 8009ca2:	ed93 7b00 	vldr	d7, [r3]
 8009ca6:	eeb0 0a47 	vmov.f32	s0, s14
 8009caa:	eef0 0a67 	vmov.f32	s1, s15
 8009cae:	4812      	ldr	r0, [pc, #72]	; (8009cf8 <scaraFlowDuty+0x290>)
 8009cb0:	f000 fb16 	bl	800a2e0 <scaraFlowCircle>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.circle.x_current;
 8009cba:	4b09      	ldr	r3, [pc, #36]	; (8009ce0 <scaraFlowDuty+0x278>)
 8009cbc:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8009cc0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			y = myDUTY.task.path.circle.y_current;
 8009cc4:	4b06      	ldr	r3, [pc, #24]	; (8009ce0 <scaraFlowDuty+0x278>)
 8009cc6:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 8009cca:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			z = myDUTY.task.path.circle.z_current;
 8009cce:	4b04      	ldr	r3, [pc, #16]	; (8009ce0 <scaraFlowDuty+0x278>)
 8009cd0:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 8009cd4:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
 8009cd8:	e010      	b.n	8009cfc <scaraFlowDuty+0x294>
//			x = myDUTY.task.path.line.x_current;
//			y = myDUTY.task.path.line.y_current;
//			z = myDUTY.task.path.line.z0;
//		}
		else {
			return SCARA_STATUS_ERROR_TASK;
 8009cda:	2303      	movs	r3, #3
 8009cdc:	e26d      	b.n	800a1ba <scaraFlowDuty+0x752>
 8009cde:	bf00      	nop
 8009ce0:	2000ff38 	.word	0x2000ff38
 8009ce4:	20010050 	.word	0x20010050
 8009ce8:	200100d0 	.word	0x200100d0
 8009cec:	200085d0 	.word	0x200085d0
 8009cf0:	2000fd40 	.word	0x2000fd40
 8009cf4:	2000ff48 	.word	0x2000ff48
 8009cf8:	2000ffb8 	.word	0x2000ffb8
		}

		positionCompute.x 		= x;
 8009cfc:	f107 0118 	add.w	r1, r7, #24
 8009d00:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009d04:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		positionCompute.y		= y;
 8009d08:	f107 0118 	add.w	r1, r7, #24
 8009d0c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8009d10:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		positionCompute.z 		= z;
 8009d14:	f107 0118 	add.w	r1, r7, #24
 8009d18:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8009d1c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 8009d20:	4bad      	ldr	r3, [pc, #692]	; (8009fd8 <scaraFlowDuty+0x570>)
 8009d22:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8009d26:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009d2a:	f997 312f 	ldrsb.w	r3, [r7, #303]	; 0x12f
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7f6 fbf8 	bl	8000524 <__aeabi_i2d>
 8009d34:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009d38:	f7f6 fc5e 	bl	80005f8 <__aeabi_dmul>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	460b      	mov	r3, r1
 8009d40:	4620      	mov	r0, r4
 8009d42:	4629      	mov	r1, r5
 8009d44:	f7f6 faa2 	bl	800028c <__adddf3>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	f107 0118 	add.w	r1, r7, #24
 8009d50:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

		positionCompute.q		= s;
 8009d54:	f107 0310 	add.w	r3, r7, #16
 8009d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5c:	f107 0118 	add.w	r1, r7, #24
 8009d60:	e9c1 2300 	strd	r2, r3, [r1]
		positionCompute.q_roll  = angle;
 8009d64:	f107 0118 	add.w	r1, r7, #24
 8009d68:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009d6c:	e9c1 2302 	strd	r2, r3, [r1, #8]

		positionCompute.v_3d    = v;
 8009d70:	f107 0118 	add.w	r1, r7, #24
 8009d74:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8009d78:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 8009d7c:	f107 0118 	add.w	r1, r7, #24
 8009d80:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8009d84:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 8009d88:	4b93      	ldr	r3, [pc, #588]	; (8009fd8 <scaraFlowDuty+0x570>)
 8009d8a:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8009d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d92:	f107 0118 	add.w	r1, r7, #24
 8009d96:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		positionCompute.t		= time;
 8009d9a:	f107 0118 	add.w	r1, r7, #24
 8009d9e:	f107 0308 	add.w	r3, r7, #8
 8009da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 8009daa:	f107 0418 	add.w	r4, r7, #24
 8009dae:	4668      	mov	r0, sp
 8009db0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8009db4:	22b8      	movs	r2, #184	; 0xb8
 8009db6:	4619      	mov	r1, r3
 8009db8:	f00c f8da 	bl	8015f70 <memcpy>
 8009dbc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8009dc0:	cb0c      	ldmia	r3, {r2, r3}
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	f7fb fb38 	bl	8005438 <kinematicInverse>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d101      	bne.n	8009dd2 <scaraFlowDuty+0x36a>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8009dce:	2307      	movs	r3, #7
 8009dd0:	e1f3      	b.n	800a1ba <scaraFlowDuty+0x752>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8009dd2:	f107 0118 	add.w	r1, r7, #24
 8009dd6:	1d3b      	adds	r3, r7, #4
 8009dd8:	22c0      	movs	r2, #192	; 0xc0
 8009dda:	6818      	ldr	r0, [r3, #0]
 8009ddc:	f00c f8c8 	bl	8015f70 <memcpy>
 8009de0:	e1ea      	b.n	800a1b8 <scaraFlowDuty+0x750>
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 8009de2:	4b7d      	ldr	r3, [pc, #500]	; (8009fd8 <scaraFlowDuty+0x570>)
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	f040 81e4 	bne.w	800a1b4 <scaraFlowDuty+0x74c>
		double s0, s1, s2, s3;
		double v0, v1, v2, v3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 8009dec:	4b7a      	ldr	r3, [pc, #488]	; (8009fd8 <scaraFlowDuty+0x570>)
 8009dee:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d174      	bne.n	8009ee0 <scaraFlowDuty+0x478>
			status1 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[0].lspb), time);
 8009df6:	f107 0308 	add.w	r3, r7, #8
 8009dfa:	ed93 0b00 	vldr	d0, [r3]
 8009dfe:	4877      	ldr	r0, [pc, #476]	; (8009fdc <scaraFlowDuty+0x574>)
 8009e00:	f7fe fe08 	bl	8008a14 <scaraFlowLSPB1>
 8009e04:	4603      	mov	r3, r0
 8009e06:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[1].lspb), time);
 8009e0a:	f107 0308 	add.w	r3, r7, #8
 8009e0e:	ed93 0b00 	vldr	d0, [r3]
 8009e12:	4873      	ldr	r0, [pc, #460]	; (8009fe0 <scaraFlowDuty+0x578>)
 8009e14:	f7fe fdfe 	bl	8008a14 <scaraFlowLSPB1>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[2].lspb), time);
 8009e1e:	f107 0308 	add.w	r3, r7, #8
 8009e22:	ed93 0b00 	vldr	d0, [r3]
 8009e26:	486f      	ldr	r0, [pc, #444]	; (8009fe4 <scaraFlowDuty+0x57c>)
 8009e28:	f7fe fdf4 	bl	8008a14 <scaraFlowLSPB1>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[3].lspb), time);
 8009e32:	f107 0308 	add.w	r3, r7, #8
 8009e36:	ed93 0b00 	vldr	d0, [r3]
 8009e3a:	486b      	ldr	r0, [pc, #428]	; (8009fe8 <scaraFlowDuty+0x580>)
 8009e3c:	f7fe fdea 	bl	8008a14 <scaraFlowLSPB1>
 8009e40:	4603      	mov	r3, r0
 8009e42:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 8009e46:	4b64      	ldr	r3, [pc, #400]	; (8009fd8 <scaraFlowDuty+0x570>)
 8009e48:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 8009e4c:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 8009e50:	4b61      	ldr	r3, [pc, #388]	; (8009fd8 <scaraFlowDuty+0x570>)
 8009e52:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 8009e56:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 8009e5a:	4b5f      	ldr	r3, [pc, #380]	; (8009fd8 <scaraFlowDuty+0x570>)
 8009e5c:	f893 3720 	ldrb.w	r3, [r3, #1824]	; 0x720
 8009e60:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 8009e64:	4b5c      	ldr	r3, [pc, #368]	; (8009fd8 <scaraFlowDuty+0x570>)
 8009e66:	f893 38a0 	ldrb.w	r3, [r3, #2208]	; 0x8a0
 8009e6a:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 8009e6e:	4b5a      	ldr	r3, [pc, #360]	; (8009fd8 <scaraFlowDuty+0x570>)
 8009e70:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8009e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e78:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 8009e7c:	4b56      	ldr	r3, [pc, #344]	; (8009fd8 <scaraFlowDuty+0x570>)
 8009e7e:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 8009e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e86:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 8009e8a:	4b53      	ldr	r3, [pc, #332]	; (8009fd8 <scaraFlowDuty+0x570>)
 8009e8c:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 8009e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e94:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 8009e98:	4b4f      	ldr	r3, [pc, #316]	; (8009fd8 <scaraFlowDuty+0x570>)
 8009e9a:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8009e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea2:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 8009ea6:	4b4c      	ldr	r3, [pc, #304]	; (8009fd8 <scaraFlowDuty+0x570>)
 8009ea8:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8009eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb0:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 8009eb4:	4b48      	ldr	r3, [pc, #288]	; (8009fd8 <scaraFlowDuty+0x570>)
 8009eb6:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8009eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ebe:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 8009ec2:	4b45      	ldr	r3, [pc, #276]	; (8009fd8 <scaraFlowDuty+0x570>)
 8009ec4:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8009ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ecc:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 8009ed0:	4b41      	ldr	r3, [pc, #260]	; (8009fd8 <scaraFlowDuty+0x570>)
 8009ed2:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8009ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eda:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 8009ede:	e05f      	b.n	8009fa0 <scaraFlowDuty+0x538>

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 8009ee0:	4b3d      	ldr	r3, [pc, #244]	; (8009fd8 <scaraFlowDuty+0x570>)
 8009ee2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	d158      	bne.n	8009f9c <scaraFlowDuty+0x534>
			status1 = scaraFLowScurve1(&(myDUTY.joint.trajectory[0].scurve), time);
 8009eea:	f107 0308 	add.w	r3, r7, #8
 8009eee:	ed93 0b00 	vldr	d0, [r3]
 8009ef2:	483e      	ldr	r0, [pc, #248]	; (8009fec <scaraFlowDuty+0x584>)
 8009ef4:	f7fe fffc 	bl	8008ef0 <scaraFLowScurve1>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFLowScurve1(&(myDUTY.joint.trajectory[1].scurve), time);
 8009efe:	f107 0308 	add.w	r3, r7, #8
 8009f02:	ed93 0b00 	vldr	d0, [r3]
 8009f06:	483a      	ldr	r0, [pc, #232]	; (8009ff0 <scaraFlowDuty+0x588>)
 8009f08:	f7fe fff2 	bl	8008ef0 <scaraFLowScurve1>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFLowScurve1(&(myDUTY.joint.trajectory[2].scurve), time);
 8009f12:	f107 0308 	add.w	r3, r7, #8
 8009f16:	ed93 0b00 	vldr	d0, [r3]
 8009f1a:	4836      	ldr	r0, [pc, #216]	; (8009ff4 <scaraFlowDuty+0x58c>)
 8009f1c:	f7fe ffe8 	bl	8008ef0 <scaraFLowScurve1>
 8009f20:	4603      	mov	r3, r0
 8009f22:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFLowScurve1(&(myDUTY.joint.trajectory[3].scurve), time);
 8009f26:	f107 0308 	add.w	r3, r7, #8
 8009f2a:	ed93 0b00 	vldr	d0, [r3]
 8009f2e:	4832      	ldr	r0, [pc, #200]	; (8009ff8 <scaraFlowDuty+0x590>)
 8009f30:	f7fe ffde 	bl	8008ef0 <scaraFLowScurve1>
 8009f34:	4603      	mov	r3, r0
 8009f36:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 8009f3a:	4b27      	ldr	r3, [pc, #156]	; (8009fd8 <scaraFlowDuty+0x570>)
 8009f3c:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 8009f40:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 8009f44:	4b24      	ldr	r3, [pc, #144]	; (8009fd8 <scaraFlowDuty+0x570>)
 8009f46:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 8009f4a:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 8009f4e:	4b22      	ldr	r3, [pc, #136]	; (8009fd8 <scaraFlowDuty+0x570>)
 8009f50:	f893 37a0 	ldrb.w	r3, [r3, #1952]	; 0x7a0
 8009f54:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 8009f58:	4b1f      	ldr	r3, [pc, #124]	; (8009fd8 <scaraFlowDuty+0x570>)
 8009f5a:	f893 3920 	ldrb.w	r3, [r3, #2336]	; 0x920
 8009f5e:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 8009f62:	4b1d      	ldr	r3, [pc, #116]	; (8009fd8 <scaraFlowDuty+0x570>)
 8009f64:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8009f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6c:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 8009f70:	4b19      	ldr	r3, [pc, #100]	; (8009fd8 <scaraFlowDuty+0x570>)
 8009f72:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 8009f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 8009f7e:	4b16      	ldr	r3, [pc, #88]	; (8009fd8 <scaraFlowDuty+0x570>)
 8009f80:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8009f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f88:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 8009f8c:	4b12      	ldr	r3, [pc, #72]	; (8009fd8 <scaraFlowDuty+0x570>)
 8009f8e:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8009f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f96:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
 8009f9a:	e001      	b.n	8009fa0 <scaraFlowDuty+0x538>
//			v1 = myDUTY.joint.trajectory[1].scurve.v_current;
//			v2 = myDUTY.joint.trajectory[2].scurve.v_current;
//			v3 = myDUTY.joint.trajectory[3].scurve.v_current;

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8009f9c:	2305      	movs	r3, #5
 8009f9e:	e10c      	b.n	800a1ba <scaraFlowDuty+0x752>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 8009fa0:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d002      	beq.n	8009fae <scaraFlowDuty+0x546>
			return status1;
 8009fa8:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8009fac:	e105      	b.n	800a1ba <scaraFlowDuty+0x752>
		}
		if ( SCARA_STATUS_OK != status2) {
 8009fae:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d002      	beq.n	8009fbc <scaraFlowDuty+0x554>
			return status2;
 8009fb6:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8009fba:	e0fe      	b.n	800a1ba <scaraFlowDuty+0x752>
		}
		if ( SCARA_STATUS_OK != status3) {
 8009fbc:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d002      	beq.n	8009fca <scaraFlowDuty+0x562>
			return status3;
 8009fc4:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8009fc8:	e0f7      	b.n	800a1ba <scaraFlowDuty+0x752>
		}
		if ( SCARA_STATUS_OK != status4) {
 8009fca:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d014      	beq.n	8009ffc <scaraFlowDuty+0x594>
			return status4;
 8009fd2:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 8009fd6:	e0f0      	b.n	800a1ba <scaraFlowDuty+0x752>
 8009fd8:	2000ff38 	.word	0x2000ff38
 8009fdc:	20010358 	.word	0x20010358
 8009fe0:	200104d8 	.word	0x200104d8
 8009fe4:	20010658 	.word	0x20010658
 8009fe8:	200107d8 	.word	0x200107d8
 8009fec:	200103d8 	.word	0x200103d8
 8009ff0:	20010558 	.word	0x20010558
 8009ff4:	200106d8 	.word	0x200106d8
 8009ff8:	20010858 	.word	0x20010858
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 8009ffc:	4b73      	ldr	r3, [pc, #460]	; (800a1cc <scaraFlowDuty+0x764>)
 8009ffe:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 800a002:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a006:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7f6 fa8a 	bl	8000524 <__aeabi_i2d>
 800a010:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800a014:	f7f6 faf0 	bl	80005f8 <__aeabi_dmul>
 800a018:	4602      	mov	r2, r0
 800a01a:	460b      	mov	r3, r1
 800a01c:	4620      	mov	r0, r4
 800a01e:	4629      	mov	r1, r5
 800a020:	f7f6 f934 	bl	800028c <__adddf3>
 800a024:	4602      	mov	r2, r0
 800a026:	460b      	mov	r3, r1
 800a028:	f107 0118 	add.w	r1, r7, #24
 800a02c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 800a030:	4b66      	ldr	r3, [pc, #408]	; (800a1cc <scaraFlowDuty+0x764>)
 800a032:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 800a036:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a03a:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 800a03e:	4618      	mov	r0, r3
 800a040:	f7f6 fa70 	bl	8000524 <__aeabi_i2d>
 800a044:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800a048:	f7f6 fad6 	bl	80005f8 <__aeabi_dmul>
 800a04c:	4602      	mov	r2, r0
 800a04e:	460b      	mov	r3, r1
 800a050:	4620      	mov	r0, r4
 800a052:	4629      	mov	r1, r5
 800a054:	f7f6 f91a 	bl	800028c <__adddf3>
 800a058:	4602      	mov	r2, r0
 800a05a:	460b      	mov	r3, r1
 800a05c:	f107 0118 	add.w	r1, r7, #24
 800a060:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 800a064:	4b59      	ldr	r3, [pc, #356]	; (800a1cc <scaraFlowDuty+0x764>)
 800a066:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800a06a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a06e:	f997 30e5 	ldrsb.w	r3, [r7, #229]	; 0xe5
 800a072:	4618      	mov	r0, r3
 800a074:	f7f6 fa56 	bl	8000524 <__aeabi_i2d>
 800a078:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800a07c:	f7f6 fabc 	bl	80005f8 <__aeabi_dmul>
 800a080:	4602      	mov	r2, r0
 800a082:	460b      	mov	r3, r1
 800a084:	4620      	mov	r0, r4
 800a086:	4629      	mov	r1, r5
 800a088:	f7f6 f900 	bl	800028c <__adddf3>
 800a08c:	4602      	mov	r2, r0
 800a08e:	460b      	mov	r3, r1
 800a090:	f107 0118 	add.w	r1, r7, #24
 800a094:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 800a098:	4b4c      	ldr	r3, [pc, #304]	; (800a1cc <scaraFlowDuty+0x764>)
 800a09a:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 800a09e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a0a2:	f997 30e4 	ldrsb.w	r3, [r7, #228]	; 0xe4
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7f6 fa3c 	bl	8000524 <__aeabi_i2d>
 800a0ac:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800a0b0:	f7f6 faa2 	bl	80005f8 <__aeabi_dmul>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	4629      	mov	r1, r5
 800a0bc:	f7f6 f8e6 	bl	800028c <__adddf3>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	f107 0118 	add.w	r1, r7, #24
 800a0c8:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 800a0cc:	f107 0118 	add.w	r1, r7, #24
 800a0d0:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 800a0d4:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 800a0d8:	f107 0118 	add.w	r1, r7, #24
 800a0dc:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800a0e0:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 800a0e4:	f107 0118 	add.w	r1, r7, #24
 800a0e8:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800a0ec:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 800a0f0:	f107 0118 	add.w	r1, r7, #24
 800a0f4:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a0f8:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 800a0fc:	f107 0118 	add.w	r1, r7, #24
 800a100:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800a104:	e9c1 2304 	strd	r2, r3, [r1, #16]
		positionCompute.q_theta2 = s1;
 800a108:	f107 0118 	add.w	r1, r7, #24
 800a10c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800a110:	e9c1 2306 	strd	r2, r3, [r1, #24]
		positionCompute.q_d3	 = s2;
 800a114:	f107 0118 	add.w	r1, r7, #24
 800a118:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800a11c:	e9c1 2308 	strd	r2, r3, [r1, #32]
		positionCompute.q_theta4 = s3;
 800a120:	f107 0118 	add.w	r1, r7, #24
 800a124:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800a128:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 800a12c:	4b27      	ldr	r3, [pc, #156]	; (800a1cc <scaraFlowDuty+0x764>)
 800a12e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a136:	f107 0118 	add.w	r1, r7, #24
 800a13a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		positionCompute.t		= time;
 800a13e:	f107 0118 	add.w	r1, r7, #24
 800a142:	f107 0308 	add.w	r3, r7, #8
 800a146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 800a14e:	f107 0318 	add.w	r3, r7, #24
 800a152:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800a156:	f107 0318 	add.w	r3, r7, #24
 800a15a:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 800a15e:	f107 0318 	add.w	r3, r7, #24
 800a162:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 800a166:	f107 0318 	add.w	r3, r7, #24
 800a16a:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 800a16e:	eeb0 3a44 	vmov.f32	s6, s8
 800a172:	eef0 3a64 	vmov.f32	s7, s9
 800a176:	eeb0 2a45 	vmov.f32	s4, s10
 800a17a:	eef0 2a65 	vmov.f32	s5, s11
 800a17e:	eeb0 1a46 	vmov.f32	s2, s12
 800a182:	eef0 1a66 	vmov.f32	s3, s13
 800a186:	eeb0 0a47 	vmov.f32	s0, s14
 800a18a:	eef0 0a67 	vmov.f32	s1, s15
 800a18e:	f000 f92f 	bl	800a3f0 <scaraCheckWorkSpace4>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d001      	beq.n	800a19c <scaraFlowDuty+0x734>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a198:	2307      	movs	r3, #7
 800a19a:	e00e      	b.n	800a1ba <scaraFlowDuty+0x752>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800a19c:	f107 0118 	add.w	r1, r7, #24
 800a1a0:	1d3b      	adds	r3, r7, #4
 800a1a2:	22c0      	movs	r2, #192	; 0xc0
 800a1a4:	6818      	ldr	r0, [r3, #0]
 800a1a6:	f00b fee3 	bl	8015f70 <memcpy>
		}
		kinematicForward(pos_Next);
 800a1aa:	1d3b      	adds	r3, r7, #4
 800a1ac:	6818      	ldr	r0, [r3, #0]
 800a1ae:	f7fb f81f 	bl	80051f0 <kinematicForward>
 800a1b2:	e001      	b.n	800a1b8 <scaraFlowDuty+0x750>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	e000      	b.n	800a1ba <scaraFlowDuty+0x752>
	}

	return SCARA_STATUS_OK;
 800a1b8:	2300      	movs	r3, #0
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a1c6:	b002      	add	sp, #8
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	2000ff38 	.word	0x2000ff38

0800a1d0 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 800a1d0:	b5b0      	push	{r4, r5, r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800a1e2:	a33d      	add	r3, pc, #244	; (adr r3, 800a2d8 <scaraFlowLine+0x108>)
 800a1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e8:	f7f6 fc96 	bl	8000b18 <__aeabi_dcmpgt>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d05a      	beq.n	800a2a8 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800a1fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a202:	f7f6 f9f9 	bl	80005f8 <__aeabi_dmul>
 800a206:	4602      	mov	r2, r0
 800a208:	460b      	mov	r3, r1
 800a20a:	4610      	mov	r0, r2
 800a20c:	4619      	mov	r1, r3
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a214:	f7f6 fb1a 	bl	800084c <__aeabi_ddiv>
 800a218:	4602      	mov	r2, r0
 800a21a:	460b      	mov	r3, r1
 800a21c:	4620      	mov	r0, r4
 800a21e:	4629      	mov	r1, r5
 800a220:	f7f6 f834 	bl	800028c <__adddf3>
 800a224:	4602      	mov	r2, r0
 800a226:	460b      	mov	r3, r1
 800a228:	68f9      	ldr	r1, [r7, #12]
 800a22a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800a23a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a23e:	f7f6 f9db 	bl	80005f8 <__aeabi_dmul>
 800a242:	4602      	mov	r2, r0
 800a244:	460b      	mov	r3, r1
 800a246:	4610      	mov	r0, r2
 800a248:	4619      	mov	r1, r3
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a250:	f7f6 fafc 	bl	800084c <__aeabi_ddiv>
 800a254:	4602      	mov	r2, r0
 800a256:	460b      	mov	r3, r1
 800a258:	4620      	mov	r0, r4
 800a25a:	4629      	mov	r1, r5
 800a25c:	f7f6 f816 	bl	800028c <__adddf3>
 800a260:	4602      	mov	r2, r0
 800a262:	460b      	mov	r3, r1
 800a264:	68f9      	ldr	r1, [r7, #12]
 800a266:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800a276:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a27a:	f7f6 f9bd 	bl	80005f8 <__aeabi_dmul>
 800a27e:	4602      	mov	r2, r0
 800a280:	460b      	mov	r3, r1
 800a282:	4610      	mov	r0, r2
 800a284:	4619      	mov	r1, r3
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a28c:	f7f6 fade 	bl	800084c <__aeabi_ddiv>
 800a290:	4602      	mov	r2, r0
 800a292:	460b      	mov	r3, r1
 800a294:	4620      	mov	r0, r4
 800a296:	4629      	mov	r1, r5
 800a298:	f7f5 fff8 	bl	800028c <__adddf3>
 800a29c:	4602      	mov	r2, r0
 800a29e:	460b      	mov	r3, r1
 800a2a0:	68f9      	ldr	r1, [r7, #12]
 800a2a2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 800a2a6:	e011      	b.n	800a2cc <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a2ae:	68f9      	ldr	r1, [r7, #12]
 800a2b0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		line->y_current = line->y1;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800a2ba:	68f9      	ldr	r1, [r7, #12]
 800a2bc:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		line->z_current = line->z1;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800a2c6:	68f9      	ldr	r1, [r7, #12]
 800a2c8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bdb0      	pop	{r4, r5, r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	47ae147b 	.word	0x47ae147b
 800a2dc:	3f847ae1 	.word	0x3f847ae1

0800a2e0 <scaraFlowCircle>:
	line->y_current = (a*bezier_y_coeffs[0] + b*bezier_y_coeffs[1] + c*bezier_y_coeffs[2])/(a + 2*bezier_wc*b+c);
	return SCARA_STATUS_OK;
}

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 800a2e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a2e4:	b086      	sub	sp, #24
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	60f8      	str	r0, [r7, #12]
 800a2ea:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a2f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a2f8:	f7f6 faa8 	bl	800084c <__aeabi_ddiv>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	460b      	mov	r3, r1
 800a300:	e9c7 2304 	strd	r2, r3, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f993 3000 	ldrsb.w	r3, [r3]
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7f6 f901 	bl	8000524 <__aeabi_i2d>
 800a322:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a326:	f7f6 f967 	bl	80005f8 <__aeabi_dmul>
 800a32a:	4602      	mov	r2, r0
 800a32c:	460b      	mov	r3, r1
 800a32e:	4650      	mov	r0, sl
 800a330:	4659      	mov	r1, fp
 800a332:	f7f5 ffab 	bl	800028c <__adddf3>
 800a336:	4602      	mov	r2, r0
 800a338:	460b      	mov	r3, r1
 800a33a:	ec43 2b17 	vmov	d7, r2, r3
 800a33e:	eeb0 0a47 	vmov.f32	s0, s14
 800a342:	eef0 0a67 	vmov.f32	s1, s15
 800a346:	f010 faf3 	bl	801a930 <cos>
 800a34a:	ec53 2b10 	vmov	r2, r3, d0
 800a34e:	4640      	mov	r0, r8
 800a350:	4649      	mov	r1, r9
 800a352:	f7f6 f951 	bl	80005f8 <__aeabi_dmul>
 800a356:	4602      	mov	r2, r0
 800a358:	460b      	mov	r3, r1
 800a35a:	4620      	mov	r0, r4
 800a35c:	4629      	mov	r1, r5
 800a35e:	f7f5 ff95 	bl	800028c <__adddf3>
 800a362:	4602      	mov	r2, r0
 800a364:	460b      	mov	r3, r1
 800a366:	68f9      	ldr	r1, [r7, #12]
 800a368:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f993 3000 	ldrsb.w	r3, [r3]
 800a384:	4618      	mov	r0, r3
 800a386:	f7f6 f8cd 	bl	8000524 <__aeabi_i2d>
 800a38a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a38e:	f7f6 f933 	bl	80005f8 <__aeabi_dmul>
 800a392:	4602      	mov	r2, r0
 800a394:	460b      	mov	r3, r1
 800a396:	4650      	mov	r0, sl
 800a398:	4659      	mov	r1, fp
 800a39a:	f7f5 ff77 	bl	800028c <__adddf3>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	ec43 2b17 	vmov	d7, r2, r3
 800a3a6:	eeb0 0a47 	vmov.f32	s0, s14
 800a3aa:	eef0 0a67 	vmov.f32	s1, s15
 800a3ae:	f010 fb57 	bl	801aa60 <sin>
 800a3b2:	ec53 2b10 	vmov	r2, r3, d0
 800a3b6:	4640      	mov	r0, r8
 800a3b8:	4649      	mov	r1, r9
 800a3ba:	f7f6 f91d 	bl	80005f8 <__aeabi_dmul>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	4629      	mov	r1, r5
 800a3c6:	f7f5 ff61 	bl	800028c <__adddf3>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	68f9      	ldr	r1, [r7, #12]
 800a3d0:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800a3da:	68f9      	ldr	r1, [r7, #12]
 800a3dc:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

	return SCARA_STATUS_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3718      	adds	r7, #24
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a3ec:	0000      	movs	r0, r0
	...

0800a3f0 <scaraCheckWorkSpace4>:

	 return SCARA_STATUS_OK;
}

/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b088      	sub	sp, #32
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	ed87 0b06 	vstr	d0, [r7, #24]
 800a3fa:	ed87 1b04 	vstr	d1, [r7, #16]
 800a3fe:	ed87 2b02 	vstr	d2, [r7, #8]
 800a402:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0-0.1 || theta1 > LIM_MAX_J0+0.1) {
 800a406:	a335      	add	r3, pc, #212	; (adr r3, 800a4dc <scaraCheckWorkSpace4+0xec>)
 800a408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a410:	f7f6 fb64 	bl	8000adc <__aeabi_dcmplt>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d109      	bne.n	800a42e <scaraCheckWorkSpace4+0x3e>
 800a41a:	a332      	add	r3, pc, #200	; (adr r3, 800a4e4 <scaraCheckWorkSpace4+0xf4>)
 800a41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a420:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a424:	f7f6 fb78 	bl	8000b18 <__aeabi_dcmpgt>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d001      	beq.n	800a432 <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a42e:	2307      	movs	r3, #7
 800a430:	e043      	b.n	800a4ba <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1-0.1 || theta2 > LIM_MAX_J1+0.1) {
 800a432:	a32e      	add	r3, pc, #184	; (adr r3, 800a4ec <scaraCheckWorkSpace4+0xfc>)
 800a434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a438:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a43c:	f7f6 fb4e 	bl	8000adc <__aeabi_dcmplt>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d109      	bne.n	800a45a <scaraCheckWorkSpace4+0x6a>
 800a446:	a32b      	add	r3, pc, #172	; (adr r3, 800a4f4 <scaraCheckWorkSpace4+0x104>)
 800a448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a450:	f7f6 fb62 	bl	8000b18 <__aeabi_dcmpgt>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d001      	beq.n	800a45e <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a45a:	2307      	movs	r3, #7
 800a45c:	e02d      	b.n	800a4ba <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 800a45e:	f04f 0200 	mov.w	r2, #0
 800a462:	f04f 0300 	mov.w	r3, #0
 800a466:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a46a:	f7f6 fb37 	bl	8000adc <__aeabi_dcmplt>
 800a46e:	4603      	mov	r3, r0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d109      	bne.n	800a488 <scaraCheckWorkSpace4+0x98>
 800a474:	f04f 0200 	mov.w	r2, #0
 800a478:	4b17      	ldr	r3, [pc, #92]	; (800a4d8 <scaraCheckWorkSpace4+0xe8>)
 800a47a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a47e:	f7f6 fb4b 	bl	8000b18 <__aeabi_dcmpgt>
 800a482:	4603      	mov	r3, r0
 800a484:	2b00      	cmp	r3, #0
 800a486:	d001      	beq.n	800a48c <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a488:	2307      	movs	r3, #7
 800a48a:	e016      	b.n	800a4ba <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3-0.1 || theta4 > LIM_MAX_J3+0.1) {
 800a48c:	a30e      	add	r3, pc, #56	; (adr r3, 800a4c8 <scaraCheckWorkSpace4+0xd8>)
 800a48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a492:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a496:	f7f6 fb21 	bl	8000adc <__aeabi_dcmplt>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d109      	bne.n	800a4b4 <scaraCheckWorkSpace4+0xc4>
 800a4a0:	a30b      	add	r3, pc, #44	; (adr r3, 800a4d0 <scaraCheckWorkSpace4+0xe0>)
 800a4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4aa:	f7f6 fb35 	bl	8000b18 <__aeabi_dcmpgt>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d001      	beq.n	800a4b8 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a4b4:	2307      	movs	r3, #7
 800a4b6:	e000      	b.n	800a4ba <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 800a4b8:	2300      	movs	r3, #0
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3720      	adds	r7, #32
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	f3af 8000 	nop.w
 800a4c8:	a7777778 	.word	0xa7777778
 800a4cc:	c0088956 	.word	0xc0088956
 800a4d0:	a7777778 	.word	0xa7777778
 800a4d4:	40088956 	.word	0x40088956
 800a4d8:	40590000 	.word	0x40590000
 800a4dc:	74444445 	.word	0x74444445
 800a4e0:	bff95623 	.word	0xbff95623
 800a4e4:	74444445 	.word	0x74444445
 800a4e8:	3ff95623 	.word	0x3ff95623
 800a4ec:	54cccccd 	.word	0x54cccccd
 800a4f0:	c003a649 	.word	0xc003a649
 800a4f4:	54cccccd 	.word	0x54cccccd
 800a4f8:	4003a649 	.word	0x4003a649
 800a4fc:	00000000 	.word	0x00000000

0800a500 <scaraTestDuty>:
	}
}


/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 800a500:	b5b0      	push	{r4, r5, r7, lr}
 800a502:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800a506:	af2e      	add	r7, sp, #184	; 0xb8
	int32_t sample_count;
	double run_time = 0;
 800a508:	f04f 0200 	mov.w	r2, #0
 800a50c:	f04f 0300 	mov.w	r3, #0
 800a510:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a514:	463b      	mov	r3, r7
 800a516:	4a36      	ldr	r2, [pc, #216]	; (800a5f0 <scaraTestDuty+0xf0>)
 800a518:	4618      	mov	r0, r3
 800a51a:	4611      	mov	r1, r2
 800a51c:	23c0      	movs	r3, #192	; 0xc0
 800a51e:	461a      	mov	r2, r3
 800a520:	f00b fd26 	bl	8015f70 <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 800a524:	4b33      	ldr	r3, [pc, #204]	; (800a5f4 <scaraTestDuty+0xf4>)
 800a526:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a52a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a52e:	a32e      	add	r3, pc, #184	; (adr r3, 800a5e8 <scaraTestDuty+0xe8>)
 800a530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a534:	f7f6 f98a 	bl	800084c <__aeabi_ddiv>
 800a538:	4602      	mov	r2, r0
 800a53a:	460b      	mov	r3, r1
 800a53c:	ec43 2b17 	vmov	d7, r2, r3
 800a540:	eeb0 0a47 	vmov.f32	s0, s14
 800a544:	eef0 0a67 	vmov.f32	s1, s15
 800a548:	f010 f96e 	bl	801a828 <ceil>
 800a54c:	ec53 2b10 	vmov	r2, r3, d0
 800a550:	4610      	mov	r0, r2
 800a552:	4619      	mov	r1, r3
 800a554:	f7f6 fb00 	bl	8000b58 <__aeabi_d2iz>
 800a558:	4603      	mov	r3, r0
 800a55a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	for (int32_t i = 1; i < sample_count; i++) {
 800a55e:	2301      	movs	r3, #1
 800a560:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a564:	e032      	b.n	800a5cc <scaraTestDuty+0xcc>
		run_time += T_SAMPLING;
 800a566:	a320      	add	r3, pc, #128	; (adr r3, 800a5e8 <scaraTestDuty+0xe8>)
 800a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800a570:	f7f5 fe8c 	bl	800028c <__adddf3>
 800a574:	4602      	mov	r2, r0
 800a576:	460b      	mov	r3, r1
 800a578:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 800a57c:	463c      	mov	r4, r7
 800a57e:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 800a582:	4668      	mov	r0, sp
 800a584:	f104 0308 	add.w	r3, r4, #8
 800a588:	22b8      	movs	r2, #184	; 0xb8
 800a58a:	4619      	mov	r1, r3
 800a58c:	f00b fcf0 	bl	8015f70 <memcpy>
 800a590:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a594:	4628      	mov	r0, r5
 800a596:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 800a59a:	f7ff fa65 	bl	8009a68 <scaraFlowDuty>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
		if (status != SCARA_STATUS_OK) {
 800a5a4:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d002      	beq.n	800a5b2 <scaraTestDuty+0xb2>
			return status;
 800a5ac:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a5b0:	e013      	b.n	800a5da <scaraTestDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 800a5b2:	463a      	mov	r2, r7
 800a5b4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800a5b8:	4611      	mov	r1, r2
 800a5ba:	22c0      	movs	r2, #192	; 0xc0
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f00b fcd7 	bl	8015f70 <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 800a5c2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a5cc:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a5d0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	dbc6      	blt.n	800a566 <scaraTestDuty+0x66>
	}
	return SCARA_STATUS_OK;
 800a5d8:	2300      	movs	r3, #0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bdb0      	pop	{r4, r5, r7, pc}
 800a5e4:	f3af 8000 	nop.w
 800a5e8:	40000000 	.word	0x40000000
 800a5ec:	3f847ae1 	.word	0x3f847ae1
 800a5f0:	20010af8 	.word	0x20010af8
 800a5f4:	2000ff38 	.word	0x2000ff38

0800a5f8 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 800a5f8:	b480      	push	{r7}
 800a5fa:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 800a5fc:	4b03      	ldr	r3, [pc, #12]	; (800a60c <scaraSetScanFlag+0x14>)
 800a5fe:	2201      	movs	r2, #1
 800a600:	70da      	strb	r2, [r3, #3]
}
 800a602:	bf00      	nop
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr
 800a60c:	20004080 	.word	0x20004080

0800a610 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	4603      	mov	r3, r0
 800a618:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 800a61a:	4a05      	ldr	r2, [pc, #20]	; (800a630 <scaraSetOutput+0x20>)
 800a61c:	79fb      	ldrb	r3, [r7, #7]
 800a61e:	7113      	strb	r3, [r2, #4]
	lowlayer_setOutput(level);
 800a620:	79fb      	ldrb	r3, [r7, #7]
 800a622:	4618      	mov	r0, r3
 800a624:	f7fc f9fc 	bl	8006a20 <lowlayer_setOutput>
}
 800a628:	bf00      	nop
 800a62a:	3708      	adds	r7, #8
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}
 800a630:	20004080 	.word	0x20004080

0800a634 <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
 800a63a:	4603      	mov	r3, r0
 800a63c:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 800a63e:	4a04      	ldr	r2, [pc, #16]	; (800a650 <scaraSetDutyState+0x1c>)
 800a640:	79fb      	ldrb	r3, [r7, #7]
 800a642:	7093      	strb	r3, [r2, #2]
}
 800a644:	bf00      	nop
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr
 800a650:	20004080 	.word	0x20004080

0800a654 <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	4603      	mov	r3, r0
 800a65c:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 800a65e:	4a04      	ldr	r2, [pc, #16]	; (800a670 <scaraSetMode+0x1c>)
 800a660:	79fb      	ldrb	r3, [r7, #7]
 800a662:	7053      	strb	r3, [r2, #1]
}
 800a664:	bf00      	nop
 800a666:	370c      	adds	r7, #12
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr
 800a670:	20004080 	.word	0x20004080

0800a674 <scaraSetMethod>:

void				scaraSetMethod(SCARA_MethodTypeDef method) {
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	4603      	mov	r3, r0
 800a67c:	71fb      	strb	r3, [r7, #7]
	mySCARA.method = method;
 800a67e:	4a04      	ldr	r2, [pc, #16]	; (800a690 <scaraSetMethod+0x1c>)
 800a680:	79fb      	ldrb	r3, [r7, #7]
 800a682:	7013      	strb	r3, [r2, #0]
}
 800a684:	bf00      	nop
 800a686:	370c      	adds	r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr
 800a690:	20004080 	.word	0x20004080

0800a694 <scaraGetPosition>:


void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a69c:	22c0      	movs	r2, #192	; 0xc0
 800a69e:	4904      	ldr	r1, [pc, #16]	; (800a6b0 <scaraGetPosition+0x1c>)
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f00b fc65 	bl	8015f70 <memcpy>
}
 800a6a6:	bf00      	nop
 800a6a8:	3708      	adds	r7, #8
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	20010af8 	.word	0x20010af8

0800a6b4 <scaraUpdatePosition>:

void				scaraUpdatePosition (SCARA_PositionTypeDef *pos) {
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
	memcpy(&positionNext, pos, sizeof(SCARA_PositionTypeDef));
 800a6bc:	22c0      	movs	r2, #192	; 0xc0
 800a6be:	6879      	ldr	r1, [r7, #4]
 800a6c0:	4803      	ldr	r0, [pc, #12]	; (800a6d0 <scaraUpdatePosition+0x1c>)
 800a6c2:	f00b fc55 	bl	8015f70 <memcpy>
}
 800a6c6:	bf00      	nop
 800a6c8:	3708      	adds	r7, #8
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	20010c78 	.word	0x20010c78

0800a6d4 <scaraGetMode>:


SCARA_ModeTypeDef	scaraGetMode(void) {
 800a6d4:	b480      	push	{r7}
 800a6d6:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 800a6d8:	4b03      	ldr	r3, [pc, #12]	; (800a6e8 <scaraGetMode+0x14>)
 800a6da:	785b      	ldrb	r3, [r3, #1]
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	20004080 	.word	0x20004080

0800a6ec <scaraGetMethod>:

SCARA_MethodTypeDef	scaraGetMethod(void) {
 800a6ec:	b480      	push	{r7}
 800a6ee:	af00      	add	r7, sp, #0
	return mySCARA.method;
 800a6f0:	4b03      	ldr	r3, [pc, #12]	; (800a700 <scaraGetMethod+0x14>)
 800a6f2:	781b      	ldrb	r3, [r3, #0]
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr
 800a6fe:	bf00      	nop
 800a700:	20004080 	.word	0x20004080

0800a704 <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 800a704:	b480      	push	{r7}
 800a706:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 800a708:	4b03      	ldr	r3, [pc, #12]	; (800a718 <scaraGetDutyState+0x14>)
 800a70a:	789b      	ldrb	r3, [r3, #2]
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop
 800a718:	20004080 	.word	0x20004080

0800a71c <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 800a71c:	b480      	push	{r7}
 800a71e:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 800a720:	4b03      	ldr	r3, [pc, #12]	; (800a730 <scaraIsScanLimit+0x14>)
 800a722:	78db      	ldrb	r3, [r3, #3]
}
 800a724:	4618      	mov	r0, r3
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	20004080 	.word	0x20004080

0800a734 <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total < run_time) {
 800a73e:	4b09      	ldr	r3, [pc, #36]	; (800a764 <scaraIsFinish+0x30>)
 800a740:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a748:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a74c:	f7f6 f9e4 	bl	8000b18 <__aeabi_dcmpgt>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d001      	beq.n	800a75a <scaraIsFinish+0x26>
		return TRUE;
 800a756:	2301      	movs	r3, #1
 800a758:	e000      	b.n	800a75c <scaraIsFinish+0x28>
	} else {
		return FALSE;
 800a75a:	2300      	movs	r3, #0
	}
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3708      	adds	r7, #8
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	2000ff38 	.word	0x2000ff38

0800a768 <scaraPosition_packaging>:


int32_t scaraPosition_packaging(uint8_t *data_packet, SCARA_PositionTypeDef position)
{
 800a768:	b082      	sub	sp, #8
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b084      	sub	sp, #16
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
 800a772:	f107 0118 	add.w	r1, r7, #24
 800a776:	e881 000c 	stmia.w	r1, {r2, r3}
	int32_t cur_ptr = -4;
 800a77a:	f06f 0303 	mvn.w	r3, #3
 800a77e:	60fb      	str	r3, [r7, #12]
	Append_Coordinate_Value((int32_t)(position.x*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a780:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a784:	a35c      	add	r3, pc, #368	; (adr r3, 800a8f8 <scaraPosition_packaging+0x190>)
 800a786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78a:	f7f5 ff35 	bl	80005f8 <__aeabi_dmul>
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	4610      	mov	r0, r2
 800a794:	4619      	mov	r1, r3
 800a796:	f7f6 f9df 	bl	8000b58 <__aeabi_d2iz>
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	3304      	adds	r3, #4
 800a79e:	60fb      	str	r3, [r7, #12]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	f000 f8aa 	bl	800a900 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.y*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a7ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a7b0:	a351      	add	r3, pc, #324	; (adr r3, 800a8f8 <scaraPosition_packaging+0x190>)
 800a7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b6:	f7f5 ff1f 	bl	80005f8 <__aeabi_dmul>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	460b      	mov	r3, r1
 800a7be:	4610      	mov	r0, r2
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	f7f6 f9c9 	bl	8000b58 <__aeabi_d2iz>
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	3304      	adds	r3, #4
 800a7ca:	60fb      	str	r3, [r7, #12]
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	f000 f894 	bl	800a900 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.z*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a7d8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800a7dc:	a346      	add	r3, pc, #280	; (adr r3, 800a8f8 <scaraPosition_packaging+0x190>)
 800a7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e2:	f7f5 ff09 	bl	80005f8 <__aeabi_dmul>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	4610      	mov	r0, r2
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	f7f6 f9b3 	bl	8000b58 <__aeabi_d2iz>
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	3304      	adds	r3, #4
 800a7f6:	60fb      	str	r3, [r7, #12]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	4619      	mov	r1, r3
 800a800:	f000 f87e 	bl	800a900 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.roll*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a804:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800a808:	a33b      	add	r3, pc, #236	; (adr r3, 800a8f8 <scaraPosition_packaging+0x190>)
 800a80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80e:	f7f5 fef3 	bl	80005f8 <__aeabi_dmul>
 800a812:	4602      	mov	r2, r0
 800a814:	460b      	mov	r3, r1
 800a816:	4610      	mov	r0, r2
 800a818:	4619      	mov	r1, r3
 800a81a:	f7f6 f99d 	bl	8000b58 <__aeabi_d2iz>
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	3304      	adds	r3, #4
 800a822:	60fb      	str	r3, [r7, #12]
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	4413      	add	r3, r2
 800a82a:	4619      	mov	r1, r3
 800a82c:	f000 f868 	bl	800a900 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta1*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a830:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a834:	a330      	add	r3, pc, #192	; (adr r3, 800a8f8 <scaraPosition_packaging+0x190>)
 800a836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83a:	f7f5 fedd 	bl	80005f8 <__aeabi_dmul>
 800a83e:	4602      	mov	r2, r0
 800a840:	460b      	mov	r3, r1
 800a842:	4610      	mov	r0, r2
 800a844:	4619      	mov	r1, r3
 800a846:	f7f6 f987 	bl	8000b58 <__aeabi_d2iz>
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	3304      	adds	r3, #4
 800a84e:	60fb      	str	r3, [r7, #12]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	4413      	add	r3, r2
 800a856:	4619      	mov	r1, r3
 800a858:	f000 f852 	bl	800a900 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta2*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a85c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800a860:	a325      	add	r3, pc, #148	; (adr r3, 800a8f8 <scaraPosition_packaging+0x190>)
 800a862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a866:	f7f5 fec7 	bl	80005f8 <__aeabi_dmul>
 800a86a:	4602      	mov	r2, r0
 800a86c:	460b      	mov	r3, r1
 800a86e:	4610      	mov	r0, r2
 800a870:	4619      	mov	r1, r3
 800a872:	f7f6 f971 	bl	8000b58 <__aeabi_d2iz>
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	3304      	adds	r3, #4
 800a87a:	60fb      	str	r3, [r7, #12]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	4413      	add	r3, r2
 800a882:	4619      	mov	r1, r3
 800a884:	f000 f83c 	bl	800a900 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.D3*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a888:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800a88c:	a31a      	add	r3, pc, #104	; (adr r3, 800a8f8 <scaraPosition_packaging+0x190>)
 800a88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a892:	f7f5 feb1 	bl	80005f8 <__aeabi_dmul>
 800a896:	4602      	mov	r2, r0
 800a898:	460b      	mov	r3, r1
 800a89a:	4610      	mov	r0, r2
 800a89c:	4619      	mov	r1, r3
 800a89e:	f7f6 f95b 	bl	8000b58 <__aeabi_d2iz>
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	3304      	adds	r3, #4
 800a8a6:	60fb      	str	r3, [r7, #12]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	f000 f826 	bl	800a900 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta4*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a8b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a8b8:	a30f      	add	r3, pc, #60	; (adr r3, 800a8f8 <scaraPosition_packaging+0x190>)
 800a8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8be:	f7f5 fe9b 	bl	80005f8 <__aeabi_dmul>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	4610      	mov	r0, r2
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	f7f6 f945 	bl	8000b58 <__aeabi_d2iz>
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	3304      	adds	r3, #4
 800a8d2:	60fb      	str	r3, [r7, #12]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	4413      	add	r3, r2
 800a8da:	4619      	mov	r1, r3
 800a8dc:	f000 f810 	bl	800a900 <Append_Coordinate_Value>
	return cur_ptr + 4;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	3304      	adds	r3, #4
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3710      	adds	r7, #16
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a8ee:	b002      	add	sp, #8
 800a8f0:	4770      	bx	lr
 800a8f2:	bf00      	nop
 800a8f4:	f3af 8000 	nop.w
 800a8f8:	00000000 	.word	0x00000000
 800a8fc:	412e8480 	.word	0x412e8480

0800a900 <Append_Coordinate_Value>:

void Append_Coordinate_Value(int32_t append_value, uint8_t* append_position)
{
 800a900:	b480      	push	{r7}
 800a902:	b083      	sub	sp, #12
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
	append_position[0] = (uint8_t)(append_value & 0xff);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	b2da      	uxtb	r2, r3
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	701a      	strb	r2, [r3, #0]
	append_position[1] = (uint8_t)(append_value >> 8 & 0xff);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	121a      	asrs	r2, r3, #8
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	3301      	adds	r3, #1
 800a91a:	b2d2      	uxtb	r2, r2
 800a91c:	701a      	strb	r2, [r3, #0]
	append_position[2] = (uint8_t)(append_value >> 16 & 0xff);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	141a      	asrs	r2, r3, #16
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	3302      	adds	r3, #2
 800a926:	b2d2      	uxtb	r2, r2
 800a928:	701a      	strb	r2, [r3, #0]
	append_position[3] = (uint8_t)(append_value >> 24 & 0xff);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	161a      	asrs	r2, r3, #24
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	3303      	adds	r3, #3
 800a932:	b2d2      	uxtb	r2, r2
 800a934:	701a      	strb	r2, [r3, #0]
}
 800a936:	bf00      	nop
 800a938:	370c      	adds	r7, #12
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr
 800a942:	0000      	movs	r0, r0
 800a944:	0000      	movs	r0, r0
	...

0800a948 <scaraKeyInit1>:
SCARA_StatusTypeDef  scaraKeyInit1(SCARA_KeyTypeDef key, int32_t speed)
{
 800a948:	b590      	push	{r4, r7, lr}
 800a94a:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
 800a94e:	af6c      	add	r7, sp, #432	; 0x1b0
 800a950:	4602      	mov	r2, r0
 800a952:	463b      	mov	r3, r7
 800a954:	6019      	str	r1, [r3, #0]
 800a956:	1dfb      	adds	r3, r7, #7
 800a958:	701a      	strb	r2, [r3, #0]
	DUTY_Command_TypeDef cmd;
	SCARA_StatusTypeDef status;
	cmd.coordinate_type = DUTY_COORDINATES_REL;
 800a95a:	f107 0308 	add.w	r3, r7, #8
 800a95e:	2201      	movs	r2, #1
 800a960:	731a      	strb	r2, [r3, #12]
	cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 800a962:	f107 0308 	add.w	r3, r7, #8
 800a966:	2200      	movs	r2, #0
 800a968:	741a      	strb	r2, [r3, #16]
	cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 800a96a:	f107 0308 	add.w	r3, r7, #8
 800a96e:	2201      	movs	r2, #1
 800a970:	745a      	strb	r2, [r3, #17]
	double v_current = 0;
 800a972:	f04f 0200 	mov.w	r2, #0
 800a976:	f04f 0300 	mov.w	r3, #0
 800a97a:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
	Trajectory_LSPB_TypeDef *lspb;
	if(speed < SHIFT_SPEED_MIN || speed > SHIFT_SPEED_MAX){
 800a97e:	463b      	mov	r3, r7
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	dd03      	ble.n	800a98e <scaraKeyInit1+0x46>
 800a986:	463b      	mov	r3, r7
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	2b0e      	cmp	r3, #14
 800a98c:	dd01      	ble.n	800a992 <scaraKeyInit1+0x4a>
		return SCARA_STATUS_ERROR_PARA;
 800a98e:	2306      	movs	r3, #6
 800a990:	e2c0      	b.n	800af14 <scaraKeyInit1+0x5cc>
	}
	switch(key){
 800a992:	1dfb      	adds	r3, r7, #7
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	2b07      	cmp	r3, #7
 800a998:	f200 8298 	bhi.w	800aecc <scaraKeyInit1+0x584>
 800a99c:	a201      	add	r2, pc, #4	; (adr r2, 800a9a4 <scaraKeyInit1+0x5c>)
 800a99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a2:	bf00      	nop
 800a9a4:	0800a9c5 	.word	0x0800a9c5
 800a9a8:	0800aa67 	.word	0x0800aa67
 800a9ac:	0800ab0d 	.word	0x0800ab0d
 800a9b0:	0800abab 	.word	0x0800abab
 800a9b4:	0800ac4d 	.word	0x0800ac4d
 800a9b8:	0800aceb 	.word	0x0800aceb
 800a9bc:	0800ad8d 	.word	0x0800ad8d
 800a9c0:	0800ae2b 	.word	0x0800ae2b
		case SCARA_KEY_X_INC:{
			cmd.v_factor = 0;
 800a9c4:	f107 0108 	add.w	r1, r7, #8
 800a9c8:	f04f 0200 	mov.w	r2, #0
 800a9cc:	f04f 0300 	mov.w	r3, #0
 800a9d0:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a9d4:	f107 0308 	add.w	r3, r7, #8
 800a9d8:	2200      	movs	r2, #0
 800a9da:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a9dc:	f107 0308 	add.w	r3, r7, #8
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= speed*SHIFT_KEY_S;
 800a9e4:	463b      	mov	r3, r7
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	4413      	add	r3, r2
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7f5 fd98 	bl	8000524 <__aeabi_i2d>
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	f107 0108 	add.w	r1, r7, #8
 800a9fc:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800aa00:	f107 0108 	add.w	r1, r7, #8
 800aa04:	f04f 0200 	mov.w	r2, #0
 800aa08:	f04f 0300 	mov.w	r3, #0
 800aa0c:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800aa10:	f107 0108 	add.w	r1, r7, #8
 800aa14:	f04f 0200 	mov.w	r2, #0
 800aa18:	f04f 0300 	mov.w	r3, #0
 800aa1c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800aa20:	f107 0108 	add.w	r1, r7, #8
 800aa24:	f04f 0200 	mov.w	r2, #0
 800aa28:	f04f 0300 	mov.w	r3, #0
 800aa2c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800aa30:	463b      	mov	r3, r7
 800aa32:	6818      	ldr	r0, [r3, #0]
 800aa34:	f7f5 fd76 	bl	8000524 <__aeabi_i2d>
 800aa38:	f20f 43e4 	addw	r3, pc, #1252	; 0x4e4
 800aa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa40:	f7f5 fdda 	bl	80005f8 <__aeabi_dmul>
 800aa44:	4602      	mov	r2, r0
 800aa46:	460b      	mov	r3, r1
 800aa48:	4610      	mov	r0, r2
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 800aa50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa54:	f7f5 fc1a 	bl	800028c <__adddf3>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	f107 0108 	add.w	r1, r7, #8
 800aa60:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800aa64:	e232      	b.n	800aecc <scaraKeyInit1+0x584>
		case SCARA_KEY_X_DEC:{
			cmd.v_factor = 0;
 800aa66:	f107 0108 	add.w	r1, r7, #8
 800aa6a:	f04f 0200 	mov.w	r2, #0
 800aa6e:	f04f 0300 	mov.w	r3, #0
 800aa72:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800aa76:	f107 0308 	add.w	r3, r7, #8
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800aa7e:	f107 0308 	add.w	r3, r7, #8
 800aa82:	2200      	movs	r2, #0
 800aa84:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= -speed*SHIFT_KEY_S;
 800aa86:	463b      	mov	r3, r7
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	079b      	lsls	r3, r3, #30
 800aa8e:	1a9b      	subs	r3, r3, r2
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	1a9b      	subs	r3, r3, r2
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7f5 fd45 	bl	8000524 <__aeabi_i2d>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	f107 0108 	add.w	r1, r7, #8
 800aaa2:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800aaa6:	f107 0108 	add.w	r1, r7, #8
 800aaaa:	f04f 0200 	mov.w	r2, #0
 800aaae:	f04f 0300 	mov.w	r3, #0
 800aab2:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800aab6:	f107 0108 	add.w	r1, r7, #8
 800aaba:	f04f 0200 	mov.w	r2, #0
 800aabe:	f04f 0300 	mov.w	r3, #0
 800aac2:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800aac6:	f107 0108 	add.w	r1, r7, #8
 800aaca:	f04f 0200 	mov.w	r2, #0
 800aace:	f04f 0300 	mov.w	r3, #0
 800aad2:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800aad6:	463b      	mov	r3, r7
 800aad8:	6818      	ldr	r0, [r3, #0]
 800aada:	f7f5 fd23 	bl	8000524 <__aeabi_i2d>
 800aade:	f20f 4340 	addw	r3, pc, #1088	; 0x440
 800aae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae6:	f7f5 fd87 	bl	80005f8 <__aeabi_dmul>
 800aaea:	4602      	mov	r2, r0
 800aaec:	460b      	mov	r3, r1
 800aaee:	4610      	mov	r0, r2
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	f20f 4334 	addw	r3, pc, #1076	; 0x434
 800aaf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafa:	f7f5 fbc7 	bl	800028c <__adddf3>
 800aafe:	4602      	mov	r2, r0
 800ab00:	460b      	mov	r3, r1
 800ab02:	f107 0108 	add.w	r1, r7, #8
 800ab06:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800ab0a:	e1df      	b.n	800aecc <scaraKeyInit1+0x584>
		case SCARA_KEY_Y_INC:{
			cmd.v_factor = 0;
 800ab0c:	f107 0108 	add.w	r1, r7, #8
 800ab10:	f04f 0200 	mov.w	r2, #0
 800ab14:	f04f 0300 	mov.w	r3, #0
 800ab18:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ab1c:	f107 0308 	add.w	r3, r7, #8
 800ab20:	2200      	movs	r2, #0
 800ab22:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ab24:	f107 0308 	add.w	r3, r7, #8
 800ab28:	2200      	movs	r2, #0
 800ab2a:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ab2c:	f107 0108 	add.w	r1, r7, #8
 800ab30:	f04f 0200 	mov.w	r2, #0
 800ab34:	f04f 0300 	mov.w	r3, #0
 800ab38:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= speed*SHIFT_KEY_S;
 800ab3c:	463b      	mov	r3, r7
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	4613      	mov	r3, r2
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	4413      	add	r3, r2
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7f5 fcec 	bl	8000524 <__aeabi_i2d>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	460b      	mov	r3, r1
 800ab50:	f107 0108 	add.w	r1, r7, #8
 800ab54:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ab58:	f107 0108 	add.w	r1, r7, #8
 800ab5c:	f04f 0200 	mov.w	r2, #0
 800ab60:	f04f 0300 	mov.w	r3, #0
 800ab64:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ab68:	f107 0108 	add.w	r1, r7, #8
 800ab6c:	f04f 0200 	mov.w	r2, #0
 800ab70:	f04f 0300 	mov.w	r3, #0
 800ab74:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ab78:	463b      	mov	r3, r7
 800ab7a:	6818      	ldr	r0, [r3, #0]
 800ab7c:	f7f5 fcd2 	bl	8000524 <__aeabi_i2d>
 800ab80:	a3e7      	add	r3, pc, #924	; (adr r3, 800af20 <scaraKeyInit1+0x5d8>)
 800ab82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab86:	f7f5 fd37 	bl	80005f8 <__aeabi_dmul>
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	4610      	mov	r0, r2
 800ab90:	4619      	mov	r1, r3
 800ab92:	a3e5      	add	r3, pc, #916	; (adr r3, 800af28 <scaraKeyInit1+0x5e0>)
 800ab94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab98:	f7f5 fb78 	bl	800028c <__adddf3>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	460b      	mov	r3, r1
 800aba0:	f107 0108 	add.w	r1, r7, #8
 800aba4:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800aba8:	e190      	b.n	800aecc <scaraKeyInit1+0x584>

		case SCARA_KEY_Y_DEC:{
			cmd.v_factor = 0;
 800abaa:	f107 0108 	add.w	r1, r7, #8
 800abae:	f04f 0200 	mov.w	r2, #0
 800abb2:	f04f 0300 	mov.w	r3, #0
 800abb6:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800abba:	f107 0308 	add.w	r3, r7, #8
 800abbe:	2200      	movs	r2, #0
 800abc0:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800abc2:	f107 0308 	add.w	r3, r7, #8
 800abc6:	2200      	movs	r2, #0
 800abc8:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800abca:	f107 0108 	add.w	r1, r7, #8
 800abce:	f04f 0200 	mov.w	r2, #0
 800abd2:	f04f 0300 	mov.w	r3, #0
 800abd6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= -speed*SHIFT_KEY_S;
 800abda:	463b      	mov	r3, r7
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	4613      	mov	r3, r2
 800abe0:	079b      	lsls	r3, r3, #30
 800abe2:	1a9b      	subs	r3, r3, r2
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	1a9b      	subs	r3, r3, r2
 800abe8:	4618      	mov	r0, r3
 800abea:	f7f5 fc9b 	bl	8000524 <__aeabi_i2d>
 800abee:	4602      	mov	r2, r0
 800abf0:	460b      	mov	r3, r1
 800abf2:	f107 0108 	add.w	r1, r7, #8
 800abf6:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800abfa:	f107 0108 	add.w	r1, r7, #8
 800abfe:	f04f 0200 	mov.w	r2, #0
 800ac02:	f04f 0300 	mov.w	r3, #0
 800ac06:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ac0a:	f107 0108 	add.w	r1, r7, #8
 800ac0e:	f04f 0200 	mov.w	r2, #0
 800ac12:	f04f 0300 	mov.w	r3, #0
 800ac16:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ac1a:	463b      	mov	r3, r7
 800ac1c:	6818      	ldr	r0, [r3, #0]
 800ac1e:	f7f5 fc81 	bl	8000524 <__aeabi_i2d>
 800ac22:	a3bf      	add	r3, pc, #764	; (adr r3, 800af20 <scaraKeyInit1+0x5d8>)
 800ac24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac28:	f7f5 fce6 	bl	80005f8 <__aeabi_dmul>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	460b      	mov	r3, r1
 800ac30:	4610      	mov	r0, r2
 800ac32:	4619      	mov	r1, r3
 800ac34:	a3bc      	add	r3, pc, #752	; (adr r3, 800af28 <scaraKeyInit1+0x5e0>)
 800ac36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3a:	f7f5 fb27 	bl	800028c <__adddf3>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	460b      	mov	r3, r1
 800ac42:	f107 0108 	add.w	r1, r7, #8
 800ac46:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800ac4a:	e13f      	b.n	800aecc <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_INC:{
			cmd.v_factor = 0;
 800ac4c:	f107 0108 	add.w	r1, r7, #8
 800ac50:	f04f 0200 	mov.w	r2, #0
 800ac54:	f04f 0300 	mov.w	r3, #0
 800ac58:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ac5c:	f107 0308 	add.w	r3, r7, #8
 800ac60:	2200      	movs	r2, #0
 800ac62:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ac64:	f107 0308 	add.w	r3, r7, #8
 800ac68:	2200      	movs	r2, #0
 800ac6a:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ac6c:	f107 0108 	add.w	r1, r7, #8
 800ac70:	f04f 0200 	mov.w	r2, #0
 800ac74:	f04f 0300 	mov.w	r3, #0
 800ac78:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ac7c:	f107 0108 	add.w	r1, r7, #8
 800ac80:	f04f 0200 	mov.w	r2, #0
 800ac84:	f04f 0300 	mov.w	r3, #0
 800ac88:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= speed*SHIFT_KEY_S;
 800ac8c:	463b      	mov	r3, r7
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	4613      	mov	r3, r2
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	4413      	add	r3, r2
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7f5 fc44 	bl	8000524 <__aeabi_i2d>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	460b      	mov	r3, r1
 800aca0:	f107 0108 	add.w	r1, r7, #8
 800aca4:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800aca8:	f107 0108 	add.w	r1, r7, #8
 800acac:	f04f 0200 	mov.w	r2, #0
 800acb0:	f04f 0300 	mov.w	r3, #0
 800acb4:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800acb8:	463b      	mov	r3, r7
 800acba:	6818      	ldr	r0, [r3, #0]
 800acbc:	f7f5 fc32 	bl	8000524 <__aeabi_i2d>
 800acc0:	a397      	add	r3, pc, #604	; (adr r3, 800af20 <scaraKeyInit1+0x5d8>)
 800acc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc6:	f7f5 fc97 	bl	80005f8 <__aeabi_dmul>
 800acca:	4602      	mov	r2, r0
 800accc:	460b      	mov	r3, r1
 800acce:	4610      	mov	r0, r2
 800acd0:	4619      	mov	r1, r3
 800acd2:	a395      	add	r3, pc, #596	; (adr r3, 800af28 <scaraKeyInit1+0x5e0>)
 800acd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd8:	f7f5 fad8 	bl	800028c <__adddf3>
 800acdc:	4602      	mov	r2, r0
 800acde:	460b      	mov	r3, r1
 800ace0:	f107 0108 	add.w	r1, r7, #8
 800ace4:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800ace8:	e0f0      	b.n	800aecc <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_DEC:{
			cmd.v_factor = 0;
 800acea:	f107 0108 	add.w	r1, r7, #8
 800acee:	f04f 0200 	mov.w	r2, #0
 800acf2:	f04f 0300 	mov.w	r3, #0
 800acf6:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800acfa:	f107 0308 	add.w	r3, r7, #8
 800acfe:	2200      	movs	r2, #0
 800ad00:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ad02:	f107 0308 	add.w	r3, r7, #8
 800ad06:	2200      	movs	r2, #0
 800ad08:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ad0a:	f107 0108 	add.w	r1, r7, #8
 800ad0e:	f04f 0200 	mov.w	r2, #0
 800ad12:	f04f 0300 	mov.w	r3, #0
 800ad16:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ad1a:	f107 0108 	add.w	r1, r7, #8
 800ad1e:	f04f 0200 	mov.w	r2, #0
 800ad22:	f04f 0300 	mov.w	r3, #0
 800ad26:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= -speed*SHIFT_KEY_S;
 800ad2a:	463b      	mov	r3, r7
 800ad2c:	681a      	ldr	r2, [r3, #0]
 800ad2e:	4613      	mov	r3, r2
 800ad30:	079b      	lsls	r3, r3, #30
 800ad32:	1a9b      	subs	r3, r3, r2
 800ad34:	009b      	lsls	r3, r3, #2
 800ad36:	1a9b      	subs	r3, r3, r2
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f7f5 fbf3 	bl	8000524 <__aeabi_i2d>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	460b      	mov	r3, r1
 800ad42:	f107 0108 	add.w	r1, r7, #8
 800ad46:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ad4a:	f107 0108 	add.w	r1, r7, #8
 800ad4e:	f04f 0200 	mov.w	r2, #0
 800ad52:	f04f 0300 	mov.w	r3, #0
 800ad56:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ad5a:	463b      	mov	r3, r7
 800ad5c:	6818      	ldr	r0, [r3, #0]
 800ad5e:	f7f5 fbe1 	bl	8000524 <__aeabi_i2d>
 800ad62:	a36f      	add	r3, pc, #444	; (adr r3, 800af20 <scaraKeyInit1+0x5d8>)
 800ad64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad68:	f7f5 fc46 	bl	80005f8 <__aeabi_dmul>
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	460b      	mov	r3, r1
 800ad70:	4610      	mov	r0, r2
 800ad72:	4619      	mov	r1, r3
 800ad74:	a36c      	add	r3, pc, #432	; (adr r3, 800af28 <scaraKeyInit1+0x5e0>)
 800ad76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7a:	f7f5 fa87 	bl	800028c <__adddf3>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	460b      	mov	r3, r1
 800ad82:	f107 0108 	add.w	r1, r7, #8
 800ad86:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800ad8a:	e09f      	b.n	800aecc <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_INC:{
			cmd.v_factor = 0;
 800ad8c:	f107 0108 	add.w	r1, r7, #8
 800ad90:	f04f 0200 	mov.w	r2, #0
 800ad94:	f04f 0300 	mov.w	r3, #0
 800ad98:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ad9c:	f107 0308 	add.w	r3, r7, #8
 800ada0:	2200      	movs	r2, #0
 800ada2:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ada4:	f107 0308 	add.w	r3, r7, #8
 800ada8:	2200      	movs	r2, #0
 800adaa:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800adac:	f107 0108 	add.w	r1, r7, #8
 800adb0:	f04f 0200 	mov.w	r2, #0
 800adb4:	f04f 0300 	mov.w	r3, #0
 800adb8:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800adbc:	f107 0108 	add.w	r1, r7, #8
 800adc0:	f04f 0200 	mov.w	r2, #0
 800adc4:	f04f 0300 	mov.w	r3, #0
 800adc8:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800adcc:	f107 0108 	add.w	r1, r7, #8
 800add0:	f04f 0200 	mov.w	r2, #0
 800add4:	f04f 0300 	mov.w	r3, #0
 800add8:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= speed*SHIFT_KEY_S;
 800addc:	463b      	mov	r3, r7
 800adde:	681a      	ldr	r2, [r3, #0]
 800ade0:	4613      	mov	r3, r2
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	4413      	add	r3, r2
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7f5 fb9c 	bl	8000524 <__aeabi_i2d>
 800adec:	4602      	mov	r2, r0
 800adee:	460b      	mov	r3, r1
 800adf0:	f107 0108 	add.w	r1, r7, #8
 800adf4:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800adf8:	463b      	mov	r3, r7
 800adfa:	6818      	ldr	r0, [r3, #0]
 800adfc:	f7f5 fb92 	bl	8000524 <__aeabi_i2d>
 800ae00:	a347      	add	r3, pc, #284	; (adr r3, 800af20 <scaraKeyInit1+0x5d8>)
 800ae02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae06:	f7f5 fbf7 	bl	80005f8 <__aeabi_dmul>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	4610      	mov	r0, r2
 800ae10:	4619      	mov	r1, r3
 800ae12:	a345      	add	r3, pc, #276	; (adr r3, 800af28 <scaraKeyInit1+0x5e0>)
 800ae14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae18:	f7f5 fa38 	bl	800028c <__adddf3>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	460b      	mov	r3, r1
 800ae20:	f107 0108 	add.w	r1, r7, #8
 800ae24:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800ae28:	e050      	b.n	800aecc <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_DEC:{
			cmd.v_factor = 0;
 800ae2a:	f107 0108 	add.w	r1, r7, #8
 800ae2e:	f04f 0200 	mov.w	r2, #0
 800ae32:	f04f 0300 	mov.w	r3, #0
 800ae36:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ae3a:	f107 0308 	add.w	r3, r7, #8
 800ae3e:	2200      	movs	r2, #0
 800ae40:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ae42:	f107 0308 	add.w	r3, r7, #8
 800ae46:	2200      	movs	r2, #0
 800ae48:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ae4a:	f107 0108 	add.w	r1, r7, #8
 800ae4e:	f04f 0200 	mov.w	r2, #0
 800ae52:	f04f 0300 	mov.w	r3, #0
 800ae56:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ae5a:	f107 0108 	add.w	r1, r7, #8
 800ae5e:	f04f 0200 	mov.w	r2, #0
 800ae62:	f04f 0300 	mov.w	r3, #0
 800ae66:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ae6a:	f107 0108 	add.w	r1, r7, #8
 800ae6e:	f04f 0200 	mov.w	r2, #0
 800ae72:	f04f 0300 	mov.w	r3, #0
 800ae76:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= -speed*SHIFT_KEY_S;
 800ae7a:	463b      	mov	r3, r7
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	4613      	mov	r3, r2
 800ae80:	079b      	lsls	r3, r3, #30
 800ae82:	1a9b      	subs	r3, r3, r2
 800ae84:	009b      	lsls	r3, r3, #2
 800ae86:	1a9b      	subs	r3, r3, r2
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f7f5 fb4b 	bl	8000524 <__aeabi_i2d>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	460b      	mov	r3, r1
 800ae92:	f107 0108 	add.w	r1, r7, #8
 800ae96:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ae9a:	463b      	mov	r3, r7
 800ae9c:	6818      	ldr	r0, [r3, #0]
 800ae9e:	f7f5 fb41 	bl	8000524 <__aeabi_i2d>
 800aea2:	a31f      	add	r3, pc, #124	; (adr r3, 800af20 <scaraKeyInit1+0x5d8>)
 800aea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea8:	f7f5 fba6 	bl	80005f8 <__aeabi_dmul>
 800aeac:	4602      	mov	r2, r0
 800aeae:	460b      	mov	r3, r1
 800aeb0:	4610      	mov	r0, r2
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	a31c      	add	r3, pc, #112	; (adr r3, 800af28 <scaraKeyInit1+0x5e0>)
 800aeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeba:	f7f5 f9e7 	bl	800028c <__adddf3>
 800aebe:	4602      	mov	r2, r0
 800aec0:	460b      	mov	r3, r1
 800aec2:	f107 0108 	add.w	r1, r7, #8
 800aec6:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800aeca:	bf00      	nop
	}

	status = scaraInitDuty(cmd);
 800aecc:	f107 0408 	add.w	r4, r7, #8
 800aed0:	4668      	mov	r0, sp
 800aed2:	f104 0310 	add.w	r3, r4, #16
 800aed6:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800aeda:	4619      	mov	r1, r3
 800aedc:	f00b f848 	bl	8015f70 <memcpy>
 800aee0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800aee4:	f7fb fde8 	bl	8006ab8 <scaraInitDuty>
 800aee8:	4603      	mov	r3, r0
 800aeea:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
	if (status == SCARA_STATUS_OK) {
 800aeee:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d10b      	bne.n	800af0e <scaraKeyInit1+0x5c6>
		status = scaraTestDuty();
 800aef6:	f7ff fb03 	bl	800a500 <scaraTestDuty>
 800aefa:	4603      	mov	r3, r0
 800aefc:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		if (status != SCARA_STATUS_OK) {
 800af00:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800af04:	2b00      	cmp	r3, #0
 800af06:	d005      	beq.n	800af14 <scaraKeyInit1+0x5cc>
			return status;
 800af08:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800af0c:	e002      	b.n	800af14 <scaraKeyInit1+0x5cc>
		// tinh lai run time so vs v hien tai
//		*(runtime) = (v_current - lspb->v0)/(lspb->a_design);
//		scaraFlowDuty(*runtime, &positionKeyInit, positionCurrent);
//		return status;
	} else {
		return status;
 800af0e:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800af12:	e7ff      	b.n	800af14 <scaraKeyInit1+0x5cc>
	}
}
 800af14:	4618      	mov	r0, r3
 800af16:	f507 77ee 	add.w	r7, r7, #476	; 0x1dc
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd90      	pop	{r4, r7, pc}
 800af1e:	bf00      	nop
 800af20:	9999999a 	.word	0x9999999a
 800af24:	3fa99999 	.word	0x3fa99999
 800af28:	9999999a 	.word	0x9999999a
 800af2c:	3fe99999 	.word	0x3fe99999

0800af30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800af36:	2300      	movs	r3, #0
 800af38:	607b      	str	r3, [r7, #4]
 800af3a:	4b12      	ldr	r3, [pc, #72]	; (800af84 <HAL_MspInit+0x54>)
 800af3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af3e:	4a11      	ldr	r2, [pc, #68]	; (800af84 <HAL_MspInit+0x54>)
 800af40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af44:	6453      	str	r3, [r2, #68]	; 0x44
 800af46:	4b0f      	ldr	r3, [pc, #60]	; (800af84 <HAL_MspInit+0x54>)
 800af48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af4e:	607b      	str	r3, [r7, #4]
 800af50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800af52:	2300      	movs	r3, #0
 800af54:	603b      	str	r3, [r7, #0]
 800af56:	4b0b      	ldr	r3, [pc, #44]	; (800af84 <HAL_MspInit+0x54>)
 800af58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af5a:	4a0a      	ldr	r2, [pc, #40]	; (800af84 <HAL_MspInit+0x54>)
 800af5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af60:	6413      	str	r3, [r2, #64]	; 0x40
 800af62:	4b08      	ldr	r3, [pc, #32]	; (800af84 <HAL_MspInit+0x54>)
 800af64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af6a:	603b      	str	r3, [r7, #0]
 800af6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800af6e:	2200      	movs	r2, #0
 800af70:	210f      	movs	r1, #15
 800af72:	f06f 0001 	mvn.w	r0, #1
 800af76:	f000 fc79 	bl	800b86c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800af7a:	bf00      	nop
 800af7c:	3708      	adds	r7, #8
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	40023800 	.word	0x40023800

0800af88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b08c      	sub	sp, #48	; 0x30
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800af90:	2300      	movs	r3, #0
 800af92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800af94:	2300      	movs	r3, #0
 800af96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800af98:	2200      	movs	r2, #0
 800af9a:	6879      	ldr	r1, [r7, #4]
 800af9c:	2036      	movs	r0, #54	; 0x36
 800af9e:	f000 fc65 	bl	800b86c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800afa2:	2036      	movs	r0, #54	; 0x36
 800afa4:	f000 fc7e 	bl	800b8a4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800afa8:	2300      	movs	r3, #0
 800afaa:	60fb      	str	r3, [r7, #12]
 800afac:	4b1f      	ldr	r3, [pc, #124]	; (800b02c <HAL_InitTick+0xa4>)
 800afae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb0:	4a1e      	ldr	r2, [pc, #120]	; (800b02c <HAL_InitTick+0xa4>)
 800afb2:	f043 0310 	orr.w	r3, r3, #16
 800afb6:	6413      	str	r3, [r2, #64]	; 0x40
 800afb8:	4b1c      	ldr	r3, [pc, #112]	; (800b02c <HAL_InitTick+0xa4>)
 800afba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afbc:	f003 0310 	and.w	r3, r3, #16
 800afc0:	60fb      	str	r3, [r7, #12]
 800afc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800afc4:	f107 0210 	add.w	r2, r7, #16
 800afc8:	f107 0314 	add.w	r3, r7, #20
 800afcc:	4611      	mov	r1, r2
 800afce:	4618      	mov	r0, r3
 800afd0:	f003 f812 	bl	800dff8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800afd4:	f002 ffe8 	bl	800dfa8 <HAL_RCC_GetPCLK1Freq>
 800afd8:	4603      	mov	r3, r0
 800afda:	005b      	lsls	r3, r3, #1
 800afdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800afde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe0:	4a13      	ldr	r2, [pc, #76]	; (800b030 <HAL_InitTick+0xa8>)
 800afe2:	fba2 2303 	umull	r2, r3, r2, r3
 800afe6:	0c9b      	lsrs	r3, r3, #18
 800afe8:	3b01      	subs	r3, #1
 800afea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800afec:	4b11      	ldr	r3, [pc, #68]	; (800b034 <HAL_InitTick+0xac>)
 800afee:	4a12      	ldr	r2, [pc, #72]	; (800b038 <HAL_InitTick+0xb0>)
 800aff0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800aff2:	4b10      	ldr	r3, [pc, #64]	; (800b034 <HAL_InitTick+0xac>)
 800aff4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800aff8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800affa:	4a0e      	ldr	r2, [pc, #56]	; (800b034 <HAL_InitTick+0xac>)
 800affc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800b000:	4b0c      	ldr	r3, [pc, #48]	; (800b034 <HAL_InitTick+0xac>)
 800b002:	2200      	movs	r2, #0
 800b004:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b006:	4b0b      	ldr	r3, [pc, #44]	; (800b034 <HAL_InitTick+0xac>)
 800b008:	2200      	movs	r2, #0
 800b00a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800b00c:	4809      	ldr	r0, [pc, #36]	; (800b034 <HAL_InitTick+0xac>)
 800b00e:	f003 f825 	bl	800e05c <HAL_TIM_Base_Init>
 800b012:	4603      	mov	r3, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d104      	bne.n	800b022 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800b018:	4806      	ldr	r0, [pc, #24]	; (800b034 <HAL_InitTick+0xac>)
 800b01a:	f003 f86e 	bl	800e0fa <HAL_TIM_Base_Start_IT>
 800b01e:	4603      	mov	r3, r0
 800b020:	e000      	b.n	800b024 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800b022:	2301      	movs	r3, #1
}
 800b024:	4618      	mov	r0, r3
 800b026:	3730      	adds	r7, #48	; 0x30
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}
 800b02c:	40023800 	.word	0x40023800
 800b030:	431bde83 	.word	0x431bde83
 800b034:	20010d38 	.word	0x20010d38
 800b038:	40001000 	.word	0x40001000

0800b03c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b03c:	b480      	push	{r7}
 800b03e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b040:	bf00      	nop
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr
	...

0800b04c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 800b050:	2162      	movs	r1, #98	; 0x62
 800b052:	4802      	ldr	r0, [pc, #8]	; (800b05c <HardFault_Handler+0x10>)
 800b054:	f7f7 fa62 	bl	800251c <LOG_REPORT>
 800b058:	e7fa      	b.n	800b050 <HardFault_Handler+0x4>
 800b05a:	bf00      	nop
 800b05c:	0801c460 	.word	0x0801c460

0800b060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 800b064:	2172      	movs	r1, #114	; 0x72
 800b066:	4802      	ldr	r0, [pc, #8]	; (800b070 <MemManage_Handler+0x10>)
 800b068:	f7f7 fa58 	bl	800251c <LOG_REPORT>
 800b06c:	e7fa      	b.n	800b064 <MemManage_Handler+0x4>
 800b06e:	bf00      	nop
 800b070:	0801c478 	.word	0x0801c478

0800b074 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 800b078:	2182      	movs	r1, #130	; 0x82
 800b07a:	4802      	ldr	r0, [pc, #8]	; (800b084 <BusFault_Handler+0x10>)
 800b07c:	f7f7 fa4e 	bl	800251c <LOG_REPORT>
 800b080:	e7fa      	b.n	800b078 <BusFault_Handler+0x4>
 800b082:	bf00      	nop
 800b084:	0801c48c 	.word	0x0801c48c

0800b088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b088:	b480      	push	{r7}
 800b08a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b08c:	e7fe      	b.n	800b08c <UsageFault_Handler+0x4>

0800b08e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b08e:	b480      	push	{r7}
 800b090:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b092:	bf00      	nop
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr

0800b09c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800b0a0:	4802      	ldr	r0, [pc, #8]	; (800b0ac <DMA1_Stream4_IRQHandler+0x10>)
 800b0a2:	f000 fd35 	bl	800bb10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800b0a6:	bf00      	nop
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	20010e38 	.word	0x20010e38

0800b0b0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800b0b4:	4802      	ldr	r0, [pc, #8]	; (800b0c0 <UART4_IRQHandler+0x10>)
 800b0b6:	f003 fcbd 	bl	800ea34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800b0ba:	bf00      	nop
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	20010df8 	.word	0x20010df8

0800b0c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b0c8:	4802      	ldr	r0, [pc, #8]	; (800b0d4 <TIM6_DAC_IRQHandler+0x10>)
 800b0ca:	f003 f83a 	bl	800e142 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b0ce:	bf00      	nop
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	20010d38 	.word	0x20010d38

0800b0d8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 800b0dc:	4b05      	ldr	r3, [pc, #20]	; (800b0f4 <TIM7_IRQHandler+0x1c>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2101      	movs	r1, #1
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f007 fbba 	bl	801285c <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800b0e8:	4803      	ldr	r0, [pc, #12]	; (800b0f8 <TIM7_IRQHandler+0x20>)
 800b0ea:	f003 f82a 	bl	800e142 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 800b0ee:	bf00      	nop
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	2000fe6c 	.word	0x2000fe6c
 800b0f8:	20010db8 	.word	0x20010db8

0800b0fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b100:	4802      	ldr	r0, [pc, #8]	; (800b10c <OTG_FS_IRQHandler+0x10>)
 800b102:	f001 fad9 	bl	800c6b8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b106:	bf00      	nop
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	20011774 	.word	0x20011774

0800b110 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b110:	b480      	push	{r7}
 800b112:	af00      	add	r7, sp, #0
	return 1;
 800b114:	2301      	movs	r3, #1
}
 800b116:	4618      	mov	r0, r3
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <_kill>:

int _kill(int pid, int sig)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b12a:	f00a fee7 	bl	8015efc <__errno>
 800b12e:	4603      	mov	r3, r0
 800b130:	2216      	movs	r2, #22
 800b132:	601a      	str	r2, [r3, #0]
	return -1;
 800b134:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3708      	adds	r7, #8
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <_exit>:

void _exit (int status)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b148:	f04f 31ff 	mov.w	r1, #4294967295
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f7ff ffe7 	bl	800b120 <_kill>
	while (1) {}		/* Make sure we hang here */
 800b152:	e7fe      	b.n	800b152 <_exit+0x12>

0800b154 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b086      	sub	sp, #24
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b160:	2300      	movs	r3, #0
 800b162:	617b      	str	r3, [r7, #20]
 800b164:	e00a      	b.n	800b17c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b166:	f3af 8000 	nop.w
 800b16a:	4601      	mov	r1, r0
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	1c5a      	adds	r2, r3, #1
 800b170:	60ba      	str	r2, [r7, #8]
 800b172:	b2ca      	uxtb	r2, r1
 800b174:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	3301      	adds	r3, #1
 800b17a:	617b      	str	r3, [r7, #20]
 800b17c:	697a      	ldr	r2, [r7, #20]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	429a      	cmp	r2, r3
 800b182:	dbf0      	blt.n	800b166 <_read+0x12>
	}

return len;
 800b184:	687b      	ldr	r3, [r7, #4]
}
 800b186:	4618      	mov	r0, r3
 800b188:	3718      	adds	r7, #24
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}

0800b18e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b18e:	b580      	push	{r7, lr}
 800b190:	b086      	sub	sp, #24
 800b192:	af00      	add	r7, sp, #0
 800b194:	60f8      	str	r0, [r7, #12]
 800b196:	60b9      	str	r1, [r7, #8]
 800b198:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b19a:	2300      	movs	r3, #0
 800b19c:	617b      	str	r3, [r7, #20]
 800b19e:	e009      	b.n	800b1b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	1c5a      	adds	r2, r3, #1
 800b1a4:	60ba      	str	r2, [r7, #8]
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	617b      	str	r3, [r7, #20]
 800b1b4:	697a      	ldr	r2, [r7, #20]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	dbf1      	blt.n	800b1a0 <_write+0x12>
	}
	return len;
 800b1bc:	687b      	ldr	r3, [r7, #4]
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3718      	adds	r7, #24
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <_close>:

int _close(int file)
{
 800b1c6:	b480      	push	{r7}
 800b1c8:	b083      	sub	sp, #12
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
	return -1;
 800b1ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	370c      	adds	r7, #12
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr

0800b1de <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b1de:	b480      	push	{r7}
 800b1e0:	b083      	sub	sp, #12
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
 800b1e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b1ee:	605a      	str	r2, [r3, #4]
	return 0;
 800b1f0:	2300      	movs	r3, #0
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	370c      	adds	r7, #12
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fc:	4770      	bx	lr

0800b1fe <_isatty>:

int _isatty(int file)
{
 800b1fe:	b480      	push	{r7}
 800b200:	b083      	sub	sp, #12
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
	return 1;
 800b206:	2301      	movs	r3, #1
}
 800b208:	4618      	mov	r0, r3
 800b20a:	370c      	adds	r7, #12
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b214:	b480      	push	{r7}
 800b216:	b085      	sub	sp, #20
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	607a      	str	r2, [r7, #4]
	return 0;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	3714      	adds	r7, #20
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr
	...

0800b230 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b084      	sub	sp, #16
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b238:	4b11      	ldr	r3, [pc, #68]	; (800b280 <_sbrk+0x50>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d102      	bne.n	800b246 <_sbrk+0x16>
		heap_end = &end;
 800b240:	4b0f      	ldr	r3, [pc, #60]	; (800b280 <_sbrk+0x50>)
 800b242:	4a10      	ldr	r2, [pc, #64]	; (800b284 <_sbrk+0x54>)
 800b244:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b246:	4b0e      	ldr	r3, [pc, #56]	; (800b280 <_sbrk+0x50>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b24c:	4b0c      	ldr	r3, [pc, #48]	; (800b280 <_sbrk+0x50>)
 800b24e:	681a      	ldr	r2, [r3, #0]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	4413      	add	r3, r2
 800b254:	466a      	mov	r2, sp
 800b256:	4293      	cmp	r3, r2
 800b258:	d907      	bls.n	800b26a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b25a:	f00a fe4f 	bl	8015efc <__errno>
 800b25e:	4603      	mov	r3, r0
 800b260:	220c      	movs	r2, #12
 800b262:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800b264:	f04f 33ff 	mov.w	r3, #4294967295
 800b268:	e006      	b.n	800b278 <_sbrk+0x48>
	}

	heap_end += incr;
 800b26a:	4b05      	ldr	r3, [pc, #20]	; (800b280 <_sbrk+0x50>)
 800b26c:	681a      	ldr	r2, [r3, #0]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	4413      	add	r3, r2
 800b272:	4a03      	ldr	r2, [pc, #12]	; (800b280 <_sbrk+0x50>)
 800b274:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b276:	68fb      	ldr	r3, [r7, #12]
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3710      	adds	r7, #16
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}
 800b280:	20004860 	.word	0x20004860
 800b284:	20011b90 	.word	0x20011b90

0800b288 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b288:	b480      	push	{r7}
 800b28a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b28c:	4b08      	ldr	r3, [pc, #32]	; (800b2b0 <SystemInit+0x28>)
 800b28e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b292:	4a07      	ldr	r2, [pc, #28]	; (800b2b0 <SystemInit+0x28>)
 800b294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b298:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b29c:	4b04      	ldr	r3, [pc, #16]	; (800b2b0 <SystemInit+0x28>)
 800b29e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b2a2:	609a      	str	r2, [r3, #8]
#endif
}
 800b2a4:	bf00      	nop
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	e000ed00 	.word	0xe000ed00

0800b2b4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b086      	sub	sp, #24
 800b2b8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b2ba:	f107 0308 	add.w	r3, r7, #8
 800b2be:	2200      	movs	r2, #0
 800b2c0:	601a      	str	r2, [r3, #0]
 800b2c2:	605a      	str	r2, [r3, #4]
 800b2c4:	609a      	str	r2, [r3, #8]
 800b2c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b2c8:	463b      	mov	r3, r7
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	601a      	str	r2, [r3, #0]
 800b2ce:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800b2d0:	4b1e      	ldr	r3, [pc, #120]	; (800b34c <MX_TIM2_Init+0x98>)
 800b2d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b2d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25000;
 800b2d8:	4b1c      	ldr	r3, [pc, #112]	; (800b34c <MX_TIM2_Init+0x98>)
 800b2da:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800b2de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b2e0:	4b1a      	ldr	r3, [pc, #104]	; (800b34c <MX_TIM2_Init+0x98>)
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 800b2e6:	4b19      	ldr	r3, [pc, #100]	; (800b34c <MX_TIM2_Init+0x98>)
 800b2e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b2ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b2ee:	4b17      	ldr	r3, [pc, #92]	; (800b34c <MX_TIM2_Init+0x98>)
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b2f4:	4b15      	ldr	r3, [pc, #84]	; (800b34c <MX_TIM2_Init+0x98>)
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b2fa:	4814      	ldr	r0, [pc, #80]	; (800b34c <MX_TIM2_Init+0x98>)
 800b2fc:	f002 feae 	bl	800e05c <HAL_TIM_Base_Init>
 800b300:	4603      	mov	r3, r0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d001      	beq.n	800b30a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800b306:	f7fa fb3d 	bl	8005984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b30a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b30e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b310:	f107 0308 	add.w	r3, r7, #8
 800b314:	4619      	mov	r1, r3
 800b316:	480d      	ldr	r0, [pc, #52]	; (800b34c <MX_TIM2_Init+0x98>)
 800b318:	f003 f81b 	bl	800e352 <HAL_TIM_ConfigClockSource>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d001      	beq.n	800b326 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800b322:	f7fa fb2f 	bl	8005984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b326:	2300      	movs	r3, #0
 800b328:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b32a:	2300      	movs	r3, #0
 800b32c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b32e:	463b      	mov	r3, r7
 800b330:	4619      	mov	r1, r3
 800b332:	4806      	ldr	r0, [pc, #24]	; (800b34c <MX_TIM2_Init+0x98>)
 800b334:	f003 fa34 	bl	800e7a0 <HAL_TIMEx_MasterConfigSynchronization>
 800b338:	4603      	mov	r3, r0
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d001      	beq.n	800b342 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800b33e:	f7fa fb21 	bl	8005984 <Error_Handler>
  }

}
 800b342:	bf00      	nop
 800b344:	3718      	adds	r7, #24
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	20010d78 	.word	0x20010d78

0800b350 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b356:	463b      	mov	r3, r7
 800b358:	2200      	movs	r2, #0
 800b35a:	601a      	str	r2, [r3, #0]
 800b35c:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800b35e:	4b15      	ldr	r3, [pc, #84]	; (800b3b4 <MX_TIM7_Init+0x64>)
 800b360:	4a15      	ldr	r2, [pc, #84]	; (800b3b8 <MX_TIM7_Init+0x68>)
 800b362:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800b364:	4b13      	ldr	r3, [pc, #76]	; (800b3b4 <MX_TIM7_Init+0x64>)
 800b366:	2253      	movs	r2, #83	; 0x53
 800b368:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b36a:	4b12      	ldr	r3, [pc, #72]	; (800b3b4 <MX_TIM7_Init+0x64>)
 800b36c:	2200      	movs	r2, #0
 800b36e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800b370:	4b10      	ldr	r3, [pc, #64]	; (800b3b4 <MX_TIM7_Init+0x64>)
 800b372:	f242 720f 	movw	r2, #9999	; 0x270f
 800b376:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b378:	4b0e      	ldr	r3, [pc, #56]	; (800b3b4 <MX_TIM7_Init+0x64>)
 800b37a:	2200      	movs	r2, #0
 800b37c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800b37e:	480d      	ldr	r0, [pc, #52]	; (800b3b4 <MX_TIM7_Init+0x64>)
 800b380:	f002 fe6c 	bl	800e05c <HAL_TIM_Base_Init>
 800b384:	4603      	mov	r3, r0
 800b386:	2b00      	cmp	r3, #0
 800b388:	d001      	beq.n	800b38e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800b38a:	f7fa fafb 	bl	8005984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b38e:	2300      	movs	r3, #0
 800b390:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b392:	2300      	movs	r3, #0
 800b394:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800b396:	463b      	mov	r3, r7
 800b398:	4619      	mov	r1, r3
 800b39a:	4806      	ldr	r0, [pc, #24]	; (800b3b4 <MX_TIM7_Init+0x64>)
 800b39c:	f003 fa00 	bl	800e7a0 <HAL_TIMEx_MasterConfigSynchronization>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d001      	beq.n	800b3aa <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800b3a6:	f7fa faed 	bl	8005984 <Error_Handler>
  }

}
 800b3aa:	bf00      	nop
 800b3ac:	3708      	adds	r7, #8
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	20010db8 	.word	0x20010db8
 800b3b8:	40001400 	.word	0x40001400

0800b3bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3cc:	d10e      	bne.n	800b3ec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	60fb      	str	r3, [r7, #12]
 800b3d2:	4b16      	ldr	r3, [pc, #88]	; (800b42c <HAL_TIM_Base_MspInit+0x70>)
 800b3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3d6:	4a15      	ldr	r2, [pc, #84]	; (800b42c <HAL_TIM_Base_MspInit+0x70>)
 800b3d8:	f043 0301 	orr.w	r3, r3, #1
 800b3dc:	6413      	str	r3, [r2, #64]	; 0x40
 800b3de:	4b13      	ldr	r3, [pc, #76]	; (800b42c <HAL_TIM_Base_MspInit+0x70>)
 800b3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e2:	f003 0301 	and.w	r3, r3, #1
 800b3e6:	60fb      	str	r3, [r7, #12]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800b3ea:	e01a      	b.n	800b422 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a0f      	ldr	r2, [pc, #60]	; (800b430 <HAL_TIM_Base_MspInit+0x74>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d115      	bne.n	800b422 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	60bb      	str	r3, [r7, #8]
 800b3fa:	4b0c      	ldr	r3, [pc, #48]	; (800b42c <HAL_TIM_Base_MspInit+0x70>)
 800b3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3fe:	4a0b      	ldr	r2, [pc, #44]	; (800b42c <HAL_TIM_Base_MspInit+0x70>)
 800b400:	f043 0320 	orr.w	r3, r3, #32
 800b404:	6413      	str	r3, [r2, #64]	; 0x40
 800b406:	4b09      	ldr	r3, [pc, #36]	; (800b42c <HAL_TIM_Base_MspInit+0x70>)
 800b408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b40a:	f003 0320 	and.w	r3, r3, #32
 800b40e:	60bb      	str	r3, [r7, #8]
 800b410:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800b412:	2200      	movs	r2, #0
 800b414:	2105      	movs	r1, #5
 800b416:	2037      	movs	r0, #55	; 0x37
 800b418:	f000 fa28 	bl	800b86c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800b41c:	2037      	movs	r0, #55	; 0x37
 800b41e:	f000 fa41 	bl	800b8a4 <HAL_NVIC_EnableIRQ>
}
 800b422:	bf00      	nop
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	40023800 	.word	0x40023800
 800b430:	40001400 	.word	0x40001400

0800b434 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800b438:	4b11      	ldr	r3, [pc, #68]	; (800b480 <MX_UART4_Init+0x4c>)
 800b43a:	4a12      	ldr	r2, [pc, #72]	; (800b484 <MX_UART4_Init+0x50>)
 800b43c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b43e:	4b10      	ldr	r3, [pc, #64]	; (800b480 <MX_UART4_Init+0x4c>)
 800b440:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b444:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800b446:	4b0e      	ldr	r3, [pc, #56]	; (800b480 <MX_UART4_Init+0x4c>)
 800b448:	2200      	movs	r2, #0
 800b44a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b44c:	4b0c      	ldr	r3, [pc, #48]	; (800b480 <MX_UART4_Init+0x4c>)
 800b44e:	2200      	movs	r2, #0
 800b450:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b452:	4b0b      	ldr	r3, [pc, #44]	; (800b480 <MX_UART4_Init+0x4c>)
 800b454:	2200      	movs	r2, #0
 800b456:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b458:	4b09      	ldr	r3, [pc, #36]	; (800b480 <MX_UART4_Init+0x4c>)
 800b45a:	220c      	movs	r2, #12
 800b45c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b45e:	4b08      	ldr	r3, [pc, #32]	; (800b480 <MX_UART4_Init+0x4c>)
 800b460:	2200      	movs	r2, #0
 800b462:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b464:	4b06      	ldr	r3, [pc, #24]	; (800b480 <MX_UART4_Init+0x4c>)
 800b466:	2200      	movs	r2, #0
 800b468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b46a:	4805      	ldr	r0, [pc, #20]	; (800b480 <MX_UART4_Init+0x4c>)
 800b46c:	f003 fa28 	bl	800e8c0 <HAL_UART_Init>
 800b470:	4603      	mov	r3, r0
 800b472:	2b00      	cmp	r3, #0
 800b474:	d001      	beq.n	800b47a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800b476:	f7fa fa85 	bl	8005984 <Error_Handler>
  }

}
 800b47a:	bf00      	nop
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	20010df8 	.word	0x20010df8
 800b484:	40004c00 	.word	0x40004c00

0800b488 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b08a      	sub	sp, #40	; 0x28
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b490:	f107 0314 	add.w	r3, r7, #20
 800b494:	2200      	movs	r2, #0
 800b496:	601a      	str	r2, [r3, #0]
 800b498:	605a      	str	r2, [r3, #4]
 800b49a:	609a      	str	r2, [r3, #8]
 800b49c:	60da      	str	r2, [r3, #12]
 800b49e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a34      	ldr	r2, [pc, #208]	; (800b578 <HAL_UART_MspInit+0xf0>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d161      	bne.n	800b56e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	613b      	str	r3, [r7, #16]
 800b4ae:	4b33      	ldr	r3, [pc, #204]	; (800b57c <HAL_UART_MspInit+0xf4>)
 800b4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4b2:	4a32      	ldr	r2, [pc, #200]	; (800b57c <HAL_UART_MspInit+0xf4>)
 800b4b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b4b8:	6413      	str	r3, [r2, #64]	; 0x40
 800b4ba:	4b30      	ldr	r3, [pc, #192]	; (800b57c <HAL_UART_MspInit+0xf4>)
 800b4bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b4c2:	613b      	str	r3, [r7, #16]
 800b4c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	60fb      	str	r3, [r7, #12]
 800b4ca:	4b2c      	ldr	r3, [pc, #176]	; (800b57c <HAL_UART_MspInit+0xf4>)
 800b4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ce:	4a2b      	ldr	r2, [pc, #172]	; (800b57c <HAL_UART_MspInit+0xf4>)
 800b4d0:	f043 0301 	orr.w	r3, r3, #1
 800b4d4:	6313      	str	r3, [r2, #48]	; 0x30
 800b4d6:	4b29      	ldr	r3, [pc, #164]	; (800b57c <HAL_UART_MspInit+0xf4>)
 800b4d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4da:	f003 0301 	and.w	r3, r3, #1
 800b4de:	60fb      	str	r3, [r7, #12]
 800b4e0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b4e2:	2303      	movs	r3, #3
 800b4e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4e6:	2302      	movs	r3, #2
 800b4e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4ee:	2303      	movs	r3, #3
 800b4f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800b4f2:	2308      	movs	r3, #8
 800b4f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b4f6:	f107 0314 	add.w	r3, r7, #20
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	4820      	ldr	r0, [pc, #128]	; (800b580 <HAL_UART_MspInit+0xf8>)
 800b4fe:	f000 fd7f 	bl	800c000 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800b502:	4b20      	ldr	r3, [pc, #128]	; (800b584 <HAL_UART_MspInit+0xfc>)
 800b504:	4a20      	ldr	r2, [pc, #128]	; (800b588 <HAL_UART_MspInit+0x100>)
 800b506:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800b508:	4b1e      	ldr	r3, [pc, #120]	; (800b584 <HAL_UART_MspInit+0xfc>)
 800b50a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b50e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b510:	4b1c      	ldr	r3, [pc, #112]	; (800b584 <HAL_UART_MspInit+0xfc>)
 800b512:	2240      	movs	r2, #64	; 0x40
 800b514:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b516:	4b1b      	ldr	r3, [pc, #108]	; (800b584 <HAL_UART_MspInit+0xfc>)
 800b518:	2200      	movs	r2, #0
 800b51a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b51c:	4b19      	ldr	r3, [pc, #100]	; (800b584 <HAL_UART_MspInit+0xfc>)
 800b51e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b522:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b524:	4b17      	ldr	r3, [pc, #92]	; (800b584 <HAL_UART_MspInit+0xfc>)
 800b526:	2200      	movs	r2, #0
 800b528:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b52a:	4b16      	ldr	r3, [pc, #88]	; (800b584 <HAL_UART_MspInit+0xfc>)
 800b52c:	2200      	movs	r2, #0
 800b52e:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800b530:	4b14      	ldr	r3, [pc, #80]	; (800b584 <HAL_UART_MspInit+0xfc>)
 800b532:	2200      	movs	r2, #0
 800b534:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b536:	4b13      	ldr	r3, [pc, #76]	; (800b584 <HAL_UART_MspInit+0xfc>)
 800b538:	2200      	movs	r2, #0
 800b53a:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b53c:	4b11      	ldr	r3, [pc, #68]	; (800b584 <HAL_UART_MspInit+0xfc>)
 800b53e:	2200      	movs	r2, #0
 800b540:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800b542:	4810      	ldr	r0, [pc, #64]	; (800b584 <HAL_UART_MspInit+0xfc>)
 800b544:	f000 f9bc 	bl	800b8c0 <HAL_DMA_Init>
 800b548:	4603      	mov	r3, r0
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d001      	beq.n	800b552 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800b54e:	f7fa fa19 	bl	8005984 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	4a0b      	ldr	r2, [pc, #44]	; (800b584 <HAL_UART_MspInit+0xfc>)
 800b556:	631a      	str	r2, [r3, #48]	; 0x30
 800b558:	4a0a      	ldr	r2, [pc, #40]	; (800b584 <HAL_UART_MspInit+0xfc>)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800b55e:	2200      	movs	r2, #0
 800b560:	2105      	movs	r1, #5
 800b562:	2034      	movs	r0, #52	; 0x34
 800b564:	f000 f982 	bl	800b86c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800b568:	2034      	movs	r0, #52	; 0x34
 800b56a:	f000 f99b 	bl	800b8a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800b56e:	bf00      	nop
 800b570:	3728      	adds	r7, #40	; 0x28
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	40004c00 	.word	0x40004c00
 800b57c:	40023800 	.word	0x40023800
 800b580:	40020000 	.word	0x40020000
 800b584:	20010e38 	.word	0x20010e38
 800b588:	40026070 	.word	0x40026070

0800b58c <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4a0c      	ldr	r2, [pc, #48]	; (800b5cc <HAL_UART_TxCpltCallback+0x40>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d112      	bne.n	800b5c4 <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800b59e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b5a2:	490b      	ldr	r1, [pc, #44]	; (800b5d0 <HAL_UART_TxCpltCallback+0x44>)
 800b5a4:	480b      	ldr	r0, [pc, #44]	; (800b5d4 <HAL_UART_TxCpltCallback+0x48>)
 800b5a6:	f7fa faa7 	bl	8005af8 <ringBuff_PopArray>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 800b5ae:	89fb      	ldrh	r3, [r7, #14]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d006      	beq.n	800b5c2 <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800b5b4:	89fb      	ldrh	r3, [r7, #14]
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	4905      	ldr	r1, [pc, #20]	; (800b5d0 <HAL_UART_TxCpltCallback+0x44>)
 800b5ba:	4807      	ldr	r0, [pc, #28]	; (800b5d8 <HAL_UART_TxCpltCallback+0x4c>)
 800b5bc:	f003 f9ce 	bl	800e95c <HAL_UART_Transmit_DMA>
 800b5c0:	e000      	b.n	800b5c4 <HAL_UART_TxCpltCallback+0x38>
			return;
 800b5c2:	bf00      	nop
	}
}
 800b5c4:	3710      	adds	r7, #16
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	40004c00 	.word	0x40004c00
 800b5d0:	2000fd68 	.word	0x2000fd68
 800b5d4:	20002074 	.word	0x20002074
 800b5d8:	20010df8 	.word	0x20010df8

0800b5dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b5dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b614 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b5e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b5e2:	e003      	b.n	800b5ec <LoopCopyDataInit>

0800b5e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b5e4:	4b0c      	ldr	r3, [pc, #48]	; (800b618 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b5e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b5e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b5ea:	3104      	adds	r1, #4

0800b5ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b5ec:	480b      	ldr	r0, [pc, #44]	; (800b61c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b5ee:	4b0c      	ldr	r3, [pc, #48]	; (800b620 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b5f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b5f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b5f4:	d3f6      	bcc.n	800b5e4 <CopyDataInit>
  ldr  r2, =_sbss
 800b5f6:	4a0b      	ldr	r2, [pc, #44]	; (800b624 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b5f8:	e002      	b.n	800b600 <LoopFillZerobss>

0800b5fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b5fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b5fc:	f842 3b04 	str.w	r3, [r2], #4

0800b600 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b600:	4b09      	ldr	r3, [pc, #36]	; (800b628 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b602:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b604:	d3f9      	bcc.n	800b5fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b606:	f7ff fe3f 	bl	800b288 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b60a:	f00a fc7d 	bl	8015f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b60e:	f7fa f90d 	bl	800582c <main>
  bx  lr    
 800b612:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b614:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b618:	0801cc20 	.word	0x0801cc20
  ldr  r0, =_sdata
 800b61c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b620:	200043e8 	.word	0x200043e8
  ldr  r2, =_sbss
 800b624:	200043e8 	.word	0x200043e8
  ldr  r3, = _ebss
 800b628:	20011b8c 	.word	0x20011b8c

0800b62c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b62c:	e7fe      	b.n	800b62c <ADC_IRQHandler>
	...

0800b630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b634:	4b0e      	ldr	r3, [pc, #56]	; (800b670 <HAL_Init+0x40>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4a0d      	ldr	r2, [pc, #52]	; (800b670 <HAL_Init+0x40>)
 800b63a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b63e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b640:	4b0b      	ldr	r3, [pc, #44]	; (800b670 <HAL_Init+0x40>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	4a0a      	ldr	r2, [pc, #40]	; (800b670 <HAL_Init+0x40>)
 800b646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b64a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b64c:	4b08      	ldr	r3, [pc, #32]	; (800b670 <HAL_Init+0x40>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a07      	ldr	r2, [pc, #28]	; (800b670 <HAL_Init+0x40>)
 800b652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b656:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b658:	2003      	movs	r0, #3
 800b65a:	f000 f8fc 	bl	800b856 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b65e:	2000      	movs	r0, #0
 800b660:	f7ff fc92 	bl	800af88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b664:	f7ff fc64 	bl	800af30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b668:	2300      	movs	r3, #0
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop
 800b670:	40023c00 	.word	0x40023c00

0800b674 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b674:	b480      	push	{r7}
 800b676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b678:	4b06      	ldr	r3, [pc, #24]	; (800b694 <HAL_IncTick+0x20>)
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	461a      	mov	r2, r3
 800b67e:	4b06      	ldr	r3, [pc, #24]	; (800b698 <HAL_IncTick+0x24>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4413      	add	r3, r2
 800b684:	4a04      	ldr	r2, [pc, #16]	; (800b698 <HAL_IncTick+0x24>)
 800b686:	6013      	str	r3, [r2, #0]
}
 800b688:	bf00      	nop
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr
 800b692:	bf00      	nop
 800b694:	20004094 	.word	0x20004094
 800b698:	20010e98 	.word	0x20010e98

0800b69c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b69c:	b480      	push	{r7}
 800b69e:	af00      	add	r7, sp, #0
  return uwTick;
 800b6a0:	4b03      	ldr	r3, [pc, #12]	; (800b6b0 <HAL_GetTick+0x14>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ac:	4770      	bx	lr
 800b6ae:	bf00      	nop
 800b6b0:	20010e98 	.word	0x20010e98

0800b6b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b6bc:	f7ff ffee 	bl	800b69c <HAL_GetTick>
 800b6c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6cc:	d005      	beq.n	800b6da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b6ce:	4b0a      	ldr	r3, [pc, #40]	; (800b6f8 <HAL_Delay+0x44>)
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	4413      	add	r3, r2
 800b6d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b6da:	bf00      	nop
 800b6dc:	f7ff ffde 	bl	800b69c <HAL_GetTick>
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	1ad3      	subs	r3, r2, r3
 800b6e6:	68fa      	ldr	r2, [r7, #12]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d8f7      	bhi.n	800b6dc <HAL_Delay+0x28>
  {
  }
}
 800b6ec:	bf00      	nop
 800b6ee:	bf00      	nop
 800b6f0:	3710      	adds	r7, #16
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	20004094 	.word	0x20004094

0800b6fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b085      	sub	sp, #20
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f003 0307 	and.w	r3, r3, #7
 800b70a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b70c:	4b0c      	ldr	r3, [pc, #48]	; (800b740 <__NVIC_SetPriorityGrouping+0x44>)
 800b70e:	68db      	ldr	r3, [r3, #12]
 800b710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b712:	68ba      	ldr	r2, [r7, #8]
 800b714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b718:	4013      	ands	r3, r2
 800b71a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b72c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b72e:	4a04      	ldr	r2, [pc, #16]	; (800b740 <__NVIC_SetPriorityGrouping+0x44>)
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	60d3      	str	r3, [r2, #12]
}
 800b734:	bf00      	nop
 800b736:	3714      	adds	r7, #20
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr
 800b740:	e000ed00 	.word	0xe000ed00

0800b744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b744:	b480      	push	{r7}
 800b746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b748:	4b04      	ldr	r3, [pc, #16]	; (800b75c <__NVIC_GetPriorityGrouping+0x18>)
 800b74a:	68db      	ldr	r3, [r3, #12]
 800b74c:	0a1b      	lsrs	r3, r3, #8
 800b74e:	f003 0307 	and.w	r3, r3, #7
}
 800b752:	4618      	mov	r0, r3
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr
 800b75c:	e000ed00 	.word	0xe000ed00

0800b760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	4603      	mov	r3, r0
 800b768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b76a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	db0b      	blt.n	800b78a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b772:	79fb      	ldrb	r3, [r7, #7]
 800b774:	f003 021f 	and.w	r2, r3, #31
 800b778:	4907      	ldr	r1, [pc, #28]	; (800b798 <__NVIC_EnableIRQ+0x38>)
 800b77a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b77e:	095b      	lsrs	r3, r3, #5
 800b780:	2001      	movs	r0, #1
 800b782:	fa00 f202 	lsl.w	r2, r0, r2
 800b786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b78a:	bf00      	nop
 800b78c:	370c      	adds	r7, #12
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr
 800b796:	bf00      	nop
 800b798:	e000e100 	.word	0xe000e100

0800b79c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b083      	sub	sp, #12
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	6039      	str	r1, [r7, #0]
 800b7a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b7a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	db0a      	blt.n	800b7c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	b2da      	uxtb	r2, r3
 800b7b4:	490c      	ldr	r1, [pc, #48]	; (800b7e8 <__NVIC_SetPriority+0x4c>)
 800b7b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7ba:	0112      	lsls	r2, r2, #4
 800b7bc:	b2d2      	uxtb	r2, r2
 800b7be:	440b      	add	r3, r1
 800b7c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b7c4:	e00a      	b.n	800b7dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	b2da      	uxtb	r2, r3
 800b7ca:	4908      	ldr	r1, [pc, #32]	; (800b7ec <__NVIC_SetPriority+0x50>)
 800b7cc:	79fb      	ldrb	r3, [r7, #7]
 800b7ce:	f003 030f 	and.w	r3, r3, #15
 800b7d2:	3b04      	subs	r3, #4
 800b7d4:	0112      	lsls	r2, r2, #4
 800b7d6:	b2d2      	uxtb	r2, r2
 800b7d8:	440b      	add	r3, r1
 800b7da:	761a      	strb	r2, [r3, #24]
}
 800b7dc:	bf00      	nop
 800b7de:	370c      	adds	r7, #12
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr
 800b7e8:	e000e100 	.word	0xe000e100
 800b7ec:	e000ed00 	.word	0xe000ed00

0800b7f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b089      	sub	sp, #36	; 0x24
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f003 0307 	and.w	r3, r3, #7
 800b802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b804:	69fb      	ldr	r3, [r7, #28]
 800b806:	f1c3 0307 	rsb	r3, r3, #7
 800b80a:	2b04      	cmp	r3, #4
 800b80c:	bf28      	it	cs
 800b80e:	2304      	movcs	r3, #4
 800b810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b812:	69fb      	ldr	r3, [r7, #28]
 800b814:	3304      	adds	r3, #4
 800b816:	2b06      	cmp	r3, #6
 800b818:	d902      	bls.n	800b820 <NVIC_EncodePriority+0x30>
 800b81a:	69fb      	ldr	r3, [r7, #28]
 800b81c:	3b03      	subs	r3, #3
 800b81e:	e000      	b.n	800b822 <NVIC_EncodePriority+0x32>
 800b820:	2300      	movs	r3, #0
 800b822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b824:	f04f 32ff 	mov.w	r2, #4294967295
 800b828:	69bb      	ldr	r3, [r7, #24]
 800b82a:	fa02 f303 	lsl.w	r3, r2, r3
 800b82e:	43da      	mvns	r2, r3
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	401a      	ands	r2, r3
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b838:	f04f 31ff 	mov.w	r1, #4294967295
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	fa01 f303 	lsl.w	r3, r1, r3
 800b842:	43d9      	mvns	r1, r3
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b848:	4313      	orrs	r3, r2
         );
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3724      	adds	r7, #36	; 0x24
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr

0800b856 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b856:	b580      	push	{r7, lr}
 800b858:	b082      	sub	sp, #8
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f7ff ff4c 	bl	800b6fc <__NVIC_SetPriorityGrouping>
}
 800b864:	bf00      	nop
 800b866:	3708      	adds	r7, #8
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b086      	sub	sp, #24
 800b870:	af00      	add	r7, sp, #0
 800b872:	4603      	mov	r3, r0
 800b874:	60b9      	str	r1, [r7, #8]
 800b876:	607a      	str	r2, [r7, #4]
 800b878:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b87a:	2300      	movs	r3, #0
 800b87c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b87e:	f7ff ff61 	bl	800b744 <__NVIC_GetPriorityGrouping>
 800b882:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	68b9      	ldr	r1, [r7, #8]
 800b888:	6978      	ldr	r0, [r7, #20]
 800b88a:	f7ff ffb1 	bl	800b7f0 <NVIC_EncodePriority>
 800b88e:	4602      	mov	r2, r0
 800b890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b894:	4611      	mov	r1, r2
 800b896:	4618      	mov	r0, r3
 800b898:	f7ff ff80 	bl	800b79c <__NVIC_SetPriority>
}
 800b89c:	bf00      	nop
 800b89e:	3718      	adds	r7, #24
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b8ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7ff ff54 	bl	800b760 <__NVIC_EnableIRQ>
}
 800b8b8:	bf00      	nop
 800b8ba:	3708      	adds	r7, #8
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b086      	sub	sp, #24
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b8cc:	f7ff fee6 	bl	800b69c <HAL_GetTick>
 800b8d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d101      	bne.n	800b8dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	e099      	b.n	800ba10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2202      	movs	r2, #2
 800b8e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	681a      	ldr	r2, [r3, #0]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f022 0201 	bic.w	r2, r2, #1
 800b8fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b8fc:	e00f      	b.n	800b91e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b8fe:	f7ff fecd 	bl	800b69c <HAL_GetTick>
 800b902:	4602      	mov	r2, r0
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	1ad3      	subs	r3, r2, r3
 800b908:	2b05      	cmp	r3, #5
 800b90a:	d908      	bls.n	800b91e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2220      	movs	r2, #32
 800b910:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2203      	movs	r2, #3
 800b916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b91a:	2303      	movs	r3, #3
 800b91c:	e078      	b.n	800ba10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f003 0301 	and.w	r3, r3, #1
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d1e8      	bne.n	800b8fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b934:	697a      	ldr	r2, [r7, #20]
 800b936:	4b38      	ldr	r3, [pc, #224]	; (800ba18 <HAL_DMA_Init+0x158>)
 800b938:	4013      	ands	r3, r2
 800b93a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	685a      	ldr	r2, [r3, #4]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	689b      	ldr	r3, [r3, #8]
 800b944:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b94a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	691b      	ldr	r3, [r3, #16]
 800b950:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b956:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	699b      	ldr	r3, [r3, #24]
 800b95c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b962:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6a1b      	ldr	r3, [r3, #32]
 800b968:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b96a:	697a      	ldr	r2, [r7, #20]
 800b96c:	4313      	orrs	r3, r2
 800b96e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b974:	2b04      	cmp	r3, #4
 800b976:	d107      	bne.n	800b988 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b980:	4313      	orrs	r3, r2
 800b982:	697a      	ldr	r2, [r7, #20]
 800b984:	4313      	orrs	r3, r2
 800b986:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	697a      	ldr	r2, [r7, #20]
 800b98e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	695b      	ldr	r3, [r3, #20]
 800b996:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	f023 0307 	bic.w	r3, r3, #7
 800b99e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a4:	697a      	ldr	r2, [r7, #20]
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ae:	2b04      	cmp	r3, #4
 800b9b0:	d117      	bne.n	800b9e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9b6:	697a      	ldr	r2, [r7, #20]
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d00e      	beq.n	800b9e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 fa9f 	bl	800bf08 <DMA_CheckFifoParam>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d008      	beq.n	800b9e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2240      	movs	r2, #64	; 0x40
 800b9d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2201      	movs	r2, #1
 800b9da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b9de:	2301      	movs	r3, #1
 800b9e0:	e016      	b.n	800ba10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	697a      	ldr	r2, [r7, #20]
 800b9e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 fa56 	bl	800be9c <DMA_CalcBaseAndBitshift>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9f8:	223f      	movs	r2, #63	; 0x3f
 800b9fa:	409a      	lsls	r2, r3
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2200      	movs	r2, #0
 800ba04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2201      	movs	r2, #1
 800ba0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800ba0e:	2300      	movs	r3, #0
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3718      	adds	r7, #24
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	f010803f 	.word	0xf010803f

0800ba1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b086      	sub	sp, #24
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	60b9      	str	r1, [r7, #8]
 800ba26:	607a      	str	r2, [r7, #4]
 800ba28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ba3a:	2b01      	cmp	r3, #1
 800ba3c:	d101      	bne.n	800ba42 <HAL_DMA_Start_IT+0x26>
 800ba3e:	2302      	movs	r3, #2
 800ba40:	e040      	b.n	800bac4 <HAL_DMA_Start_IT+0xa8>
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2201      	movs	r2, #1
 800ba46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d12f      	bne.n	800bab6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2202      	movs	r2, #2
 800ba5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	2200      	movs	r2, #0
 800ba62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	68b9      	ldr	r1, [r7, #8]
 800ba6a:	68f8      	ldr	r0, [r7, #12]
 800ba6c:	f000 f9e8 	bl	800be40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba74:	223f      	movs	r2, #63	; 0x3f
 800ba76:	409a      	lsls	r2, r3
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	681a      	ldr	r2, [r3, #0]
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f042 0216 	orr.w	r2, r2, #22
 800ba8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d007      	beq.n	800baa4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f042 0208 	orr.w	r2, r2, #8
 800baa2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	681a      	ldr	r2, [r3, #0]
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f042 0201 	orr.w	r2, r2, #1
 800bab2:	601a      	str	r2, [r3, #0]
 800bab4:	e005      	b.n	800bac2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2200      	movs	r2, #0
 800baba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800babe:	2302      	movs	r3, #2
 800bac0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800bac2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3718      	adds	r7, #24
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bada:	b2db      	uxtb	r3, r3
 800badc:	2b02      	cmp	r3, #2
 800bade:	d004      	beq.n	800baea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2280      	movs	r2, #128	; 0x80
 800bae4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800bae6:	2301      	movs	r3, #1
 800bae8:	e00c      	b.n	800bb04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2205      	movs	r2, #5
 800baee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f022 0201 	bic.w	r2, r2, #1
 800bb00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800bb02:	2300      	movs	r3, #0
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	370c      	adds	r7, #12
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr

0800bb10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b086      	sub	sp, #24
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800bb1c:	4b92      	ldr	r3, [pc, #584]	; (800bd68 <HAL_DMA_IRQHandler+0x258>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a92      	ldr	r2, [pc, #584]	; (800bd6c <HAL_DMA_IRQHandler+0x25c>)
 800bb22:	fba2 2303 	umull	r2, r3, r2, r3
 800bb26:	0a9b      	lsrs	r3, r3, #10
 800bb28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb3a:	2208      	movs	r2, #8
 800bb3c:	409a      	lsls	r2, r3
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	4013      	ands	r3, r2
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d01a      	beq.n	800bb7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f003 0304 	and.w	r3, r3, #4
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d013      	beq.n	800bb7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f022 0204 	bic.w	r2, r2, #4
 800bb62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb68:	2208      	movs	r2, #8
 800bb6a:	409a      	lsls	r2, r3
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb74:	f043 0201 	orr.w	r2, r3, #1
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb80:	2201      	movs	r2, #1
 800bb82:	409a      	lsls	r2, r3
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	4013      	ands	r3, r2
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d012      	beq.n	800bbb2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	695b      	ldr	r3, [r3, #20]
 800bb92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d00b      	beq.n	800bbb2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb9e:	2201      	movs	r2, #1
 800bba0:	409a      	lsls	r2, r3
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbaa:	f043 0202 	orr.w	r2, r3, #2
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbb6:	2204      	movs	r2, #4
 800bbb8:	409a      	lsls	r2, r3
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	4013      	ands	r3, r2
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d012      	beq.n	800bbe8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f003 0302 	and.w	r3, r3, #2
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d00b      	beq.n	800bbe8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbd4:	2204      	movs	r2, #4
 800bbd6:	409a      	lsls	r2, r3
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbe0:	f043 0204 	orr.w	r2, r3, #4
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbec:	2210      	movs	r2, #16
 800bbee:	409a      	lsls	r2, r3
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	4013      	ands	r3, r2
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d043      	beq.n	800bc80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f003 0308 	and.w	r3, r3, #8
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d03c      	beq.n	800bc80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc0a:	2210      	movs	r2, #16
 800bc0c:	409a      	lsls	r2, r3
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d018      	beq.n	800bc52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d108      	bne.n	800bc40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d024      	beq.n	800bc80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	4798      	blx	r3
 800bc3e:	e01f      	b.n	800bc80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d01b      	beq.n	800bc80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	4798      	blx	r3
 800bc50:	e016      	b.n	800bc80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d107      	bne.n	800bc70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	681a      	ldr	r2, [r3, #0]
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f022 0208 	bic.w	r2, r2, #8
 800bc6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d003      	beq.n	800bc80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc84:	2220      	movs	r2, #32
 800bc86:	409a      	lsls	r2, r3
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	4013      	ands	r3, r2
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	f000 808e 	beq.w	800bdae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f003 0310 	and.w	r3, r3, #16
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	f000 8086 	beq.w	800bdae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bca6:	2220      	movs	r2, #32
 800bca8:	409a      	lsls	r2, r3
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	2b05      	cmp	r3, #5
 800bcb8:	d136      	bne.n	800bd28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f022 0216 	bic.w	r2, r2, #22
 800bcc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	695a      	ldr	r2, [r3, #20]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bcd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d103      	bne.n	800bcea <HAL_DMA_IRQHandler+0x1da>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d007      	beq.n	800bcfa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	681a      	ldr	r2, [r3, #0]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f022 0208 	bic.w	r2, r2, #8
 800bcf8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcfe:	223f      	movs	r2, #63	; 0x3f
 800bd00:	409a      	lsls	r2, r3
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2201      	movs	r2, #1
 800bd12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d07d      	beq.n	800be1a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	4798      	blx	r3
        }
        return;
 800bd26:	e078      	b.n	800be1a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d01c      	beq.n	800bd70 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d108      	bne.n	800bd56 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d030      	beq.n	800bdae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	4798      	blx	r3
 800bd54:	e02b      	b.n	800bdae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d027      	beq.n	800bdae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	4798      	blx	r3
 800bd66:	e022      	b.n	800bdae <HAL_DMA_IRQHandler+0x29e>
 800bd68:	2000408c 	.word	0x2000408c
 800bd6c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d10f      	bne.n	800bd9e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	681a      	ldr	r2, [r3, #0]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f022 0210 	bic.w	r2, r2, #16
 800bd8c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2200      	movs	r2, #0
 800bd92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2201      	movs	r2, #1
 800bd9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d003      	beq.n	800bdae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d032      	beq.n	800be1c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdba:	f003 0301 	and.w	r3, r3, #1
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d022      	beq.n	800be08 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2205      	movs	r2, #5
 800bdc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	681a      	ldr	r2, [r3, #0]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f022 0201 	bic.w	r2, r2, #1
 800bdd8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	3301      	adds	r3, #1
 800bdde:	60bb      	str	r3, [r7, #8]
 800bde0:	697a      	ldr	r2, [r7, #20]
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d307      	bcc.n	800bdf6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f003 0301 	and.w	r3, r3, #1
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d1f2      	bne.n	800bdda <HAL_DMA_IRQHandler+0x2ca>
 800bdf4:	e000      	b.n	800bdf8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800bdf6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2201      	movs	r2, #1
 800be04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d005      	beq.n	800be1c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	4798      	blx	r3
 800be18:	e000      	b.n	800be1c <HAL_DMA_IRQHandler+0x30c>
        return;
 800be1a:	bf00      	nop
    }
  }
}
 800be1c:	3718      	adds	r7, #24
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop

0800be24 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800be24:	b480      	push	{r7}
 800be26:	b083      	sub	sp, #12
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800be32:	b2db      	uxtb	r3, r3
}
 800be34:	4618      	mov	r0, r3
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800be40:	b480      	push	{r7}
 800be42:	b085      	sub	sp, #20
 800be44:	af00      	add	r7, sp, #0
 800be46:	60f8      	str	r0, [r7, #12]
 800be48:	60b9      	str	r1, [r7, #8]
 800be4a:	607a      	str	r2, [r7, #4]
 800be4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800be5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	683a      	ldr	r2, [r7, #0]
 800be64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	689b      	ldr	r3, [r3, #8]
 800be6a:	2b40      	cmp	r3, #64	; 0x40
 800be6c:	d108      	bne.n	800be80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	687a      	ldr	r2, [r7, #4]
 800be74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	68ba      	ldr	r2, [r7, #8]
 800be7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800be7e:	e007      	b.n	800be90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	68ba      	ldr	r2, [r7, #8]
 800be86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	60da      	str	r2, [r3, #12]
}
 800be90:	bf00      	nop
 800be92:	3714      	adds	r7, #20
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr

0800be9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b085      	sub	sp, #20
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	3b10      	subs	r3, #16
 800beac:	4a14      	ldr	r2, [pc, #80]	; (800bf00 <DMA_CalcBaseAndBitshift+0x64>)
 800beae:	fba2 2303 	umull	r2, r3, r2, r3
 800beb2:	091b      	lsrs	r3, r3, #4
 800beb4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800beb6:	4a13      	ldr	r2, [pc, #76]	; (800bf04 <DMA_CalcBaseAndBitshift+0x68>)
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	4413      	add	r3, r2
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	461a      	mov	r2, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	2b03      	cmp	r3, #3
 800bec8:	d909      	bls.n	800bede <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bed2:	f023 0303 	bic.w	r3, r3, #3
 800bed6:	1d1a      	adds	r2, r3, #4
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	659a      	str	r2, [r3, #88]	; 0x58
 800bedc:	e007      	b.n	800beee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bee6:	f023 0303 	bic.w	r3, r3, #3
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3714      	adds	r7, #20
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr
 800befe:	bf00      	nop
 800bf00:	aaaaaaab 	.word	0xaaaaaaab
 800bf04:	0801c508 	.word	0x0801c508

0800bf08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b085      	sub	sp, #20
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf10:	2300      	movs	r3, #0
 800bf12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	699b      	ldr	r3, [r3, #24]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d11f      	bne.n	800bf62 <DMA_CheckFifoParam+0x5a>
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	2b03      	cmp	r3, #3
 800bf26:	d856      	bhi.n	800bfd6 <DMA_CheckFifoParam+0xce>
 800bf28:	a201      	add	r2, pc, #4	; (adr r2, 800bf30 <DMA_CheckFifoParam+0x28>)
 800bf2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf2e:	bf00      	nop
 800bf30:	0800bf41 	.word	0x0800bf41
 800bf34:	0800bf53 	.word	0x0800bf53
 800bf38:	0800bf41 	.word	0x0800bf41
 800bf3c:	0800bfd7 	.word	0x0800bfd7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d046      	beq.n	800bfda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bf50:	e043      	b.n	800bfda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bf5a:	d140      	bne.n	800bfde <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bf60:	e03d      	b.n	800bfde <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	699b      	ldr	r3, [r3, #24]
 800bf66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf6a:	d121      	bne.n	800bfb0 <DMA_CheckFifoParam+0xa8>
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	2b03      	cmp	r3, #3
 800bf70:	d837      	bhi.n	800bfe2 <DMA_CheckFifoParam+0xda>
 800bf72:	a201      	add	r2, pc, #4	; (adr r2, 800bf78 <DMA_CheckFifoParam+0x70>)
 800bf74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf78:	0800bf89 	.word	0x0800bf89
 800bf7c:	0800bf8f 	.word	0x0800bf8f
 800bf80:	0800bf89 	.word	0x0800bf89
 800bf84:	0800bfa1 	.word	0x0800bfa1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	73fb      	strb	r3, [r7, #15]
      break;
 800bf8c:	e030      	b.n	800bff0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d025      	beq.n	800bfe6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bf9e:	e022      	b.n	800bfe6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bfa8:	d11f      	bne.n	800bfea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800bfae:	e01c      	b.n	800bfea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	2b02      	cmp	r3, #2
 800bfb4:	d903      	bls.n	800bfbe <DMA_CheckFifoParam+0xb6>
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	2b03      	cmp	r3, #3
 800bfba:	d003      	beq.n	800bfc4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800bfbc:	e018      	b.n	800bff0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	73fb      	strb	r3, [r7, #15]
      break;
 800bfc2:	e015      	b.n	800bff0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d00e      	beq.n	800bfee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	73fb      	strb	r3, [r7, #15]
      break;
 800bfd4:	e00b      	b.n	800bfee <DMA_CheckFifoParam+0xe6>
      break;
 800bfd6:	bf00      	nop
 800bfd8:	e00a      	b.n	800bff0 <DMA_CheckFifoParam+0xe8>
      break;
 800bfda:	bf00      	nop
 800bfdc:	e008      	b.n	800bff0 <DMA_CheckFifoParam+0xe8>
      break;
 800bfde:	bf00      	nop
 800bfe0:	e006      	b.n	800bff0 <DMA_CheckFifoParam+0xe8>
      break;
 800bfe2:	bf00      	nop
 800bfe4:	e004      	b.n	800bff0 <DMA_CheckFifoParam+0xe8>
      break;
 800bfe6:	bf00      	nop
 800bfe8:	e002      	b.n	800bff0 <DMA_CheckFifoParam+0xe8>
      break;   
 800bfea:	bf00      	nop
 800bfec:	e000      	b.n	800bff0 <DMA_CheckFifoParam+0xe8>
      break;
 800bfee:	bf00      	nop
    }
  } 
  
  return status; 
 800bff0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3714      	adds	r7, #20
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr
 800bffe:	bf00      	nop

0800c000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c000:	b480      	push	{r7}
 800c002:	b089      	sub	sp, #36	; 0x24
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c00a:	2300      	movs	r3, #0
 800c00c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c00e:	2300      	movs	r3, #0
 800c010:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c012:	2300      	movs	r3, #0
 800c014:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c016:	2300      	movs	r3, #0
 800c018:	61fb      	str	r3, [r7, #28]
 800c01a:	e16b      	b.n	800c2f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c01c:	2201      	movs	r2, #1
 800c01e:	69fb      	ldr	r3, [r7, #28]
 800c020:	fa02 f303 	lsl.w	r3, r2, r3
 800c024:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	697a      	ldr	r2, [r7, #20]
 800c02c:	4013      	ands	r3, r2
 800c02e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c030:	693a      	ldr	r2, [r7, #16]
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	429a      	cmp	r2, r3
 800c036:	f040 815a 	bne.w	800c2ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	2b01      	cmp	r3, #1
 800c040:	d00b      	beq.n	800c05a <HAL_GPIO_Init+0x5a>
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	2b02      	cmp	r3, #2
 800c048:	d007      	beq.n	800c05a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c04e:	2b11      	cmp	r3, #17
 800c050:	d003      	beq.n	800c05a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	2b12      	cmp	r3, #18
 800c058:	d130      	bne.n	800c0bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	689b      	ldr	r3, [r3, #8]
 800c05e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c060:	69fb      	ldr	r3, [r7, #28]
 800c062:	005b      	lsls	r3, r3, #1
 800c064:	2203      	movs	r2, #3
 800c066:	fa02 f303 	lsl.w	r3, r2, r3
 800c06a:	43db      	mvns	r3, r3
 800c06c:	69ba      	ldr	r2, [r7, #24]
 800c06e:	4013      	ands	r3, r2
 800c070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	68da      	ldr	r2, [r3, #12]
 800c076:	69fb      	ldr	r3, [r7, #28]
 800c078:	005b      	lsls	r3, r3, #1
 800c07a:	fa02 f303 	lsl.w	r3, r2, r3
 800c07e:	69ba      	ldr	r2, [r7, #24]
 800c080:	4313      	orrs	r3, r2
 800c082:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	69ba      	ldr	r2, [r7, #24]
 800c088:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c090:	2201      	movs	r2, #1
 800c092:	69fb      	ldr	r3, [r7, #28]
 800c094:	fa02 f303 	lsl.w	r3, r2, r3
 800c098:	43db      	mvns	r3, r3
 800c09a:	69ba      	ldr	r2, [r7, #24]
 800c09c:	4013      	ands	r3, r2
 800c09e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	091b      	lsrs	r3, r3, #4
 800c0a6:	f003 0201 	and.w	r2, r3, #1
 800c0aa:	69fb      	ldr	r3, [r7, #28]
 800c0ac:	fa02 f303 	lsl.w	r3, r2, r3
 800c0b0:	69ba      	ldr	r2, [r7, #24]
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	69ba      	ldr	r2, [r7, #24]
 800c0ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	68db      	ldr	r3, [r3, #12]
 800c0c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c0c2:	69fb      	ldr	r3, [r7, #28]
 800c0c4:	005b      	lsls	r3, r3, #1
 800c0c6:	2203      	movs	r2, #3
 800c0c8:	fa02 f303 	lsl.w	r3, r2, r3
 800c0cc:	43db      	mvns	r3, r3
 800c0ce:	69ba      	ldr	r2, [r7, #24]
 800c0d0:	4013      	ands	r3, r2
 800c0d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	689a      	ldr	r2, [r3, #8]
 800c0d8:	69fb      	ldr	r3, [r7, #28]
 800c0da:	005b      	lsls	r3, r3, #1
 800c0dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c0e0:	69ba      	ldr	r2, [r7, #24]
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	69ba      	ldr	r2, [r7, #24]
 800c0ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	2b02      	cmp	r3, #2
 800c0f2:	d003      	beq.n	800c0fc <HAL_GPIO_Init+0xfc>
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	2b12      	cmp	r3, #18
 800c0fa:	d123      	bne.n	800c144 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c0fc:	69fb      	ldr	r3, [r7, #28]
 800c0fe:	08da      	lsrs	r2, r3, #3
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	3208      	adds	r2, #8
 800c104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c108:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	f003 0307 	and.w	r3, r3, #7
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	220f      	movs	r2, #15
 800c114:	fa02 f303 	lsl.w	r3, r2, r3
 800c118:	43db      	mvns	r3, r3
 800c11a:	69ba      	ldr	r2, [r7, #24]
 800c11c:	4013      	ands	r3, r2
 800c11e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	691a      	ldr	r2, [r3, #16]
 800c124:	69fb      	ldr	r3, [r7, #28]
 800c126:	f003 0307 	and.w	r3, r3, #7
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	fa02 f303 	lsl.w	r3, r2, r3
 800c130:	69ba      	ldr	r2, [r7, #24]
 800c132:	4313      	orrs	r3, r2
 800c134:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c136:	69fb      	ldr	r3, [r7, #28]
 800c138:	08da      	lsrs	r2, r3, #3
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	3208      	adds	r2, #8
 800c13e:	69b9      	ldr	r1, [r7, #24]
 800c140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c14a:	69fb      	ldr	r3, [r7, #28]
 800c14c:	005b      	lsls	r3, r3, #1
 800c14e:	2203      	movs	r2, #3
 800c150:	fa02 f303 	lsl.w	r3, r2, r3
 800c154:	43db      	mvns	r3, r3
 800c156:	69ba      	ldr	r2, [r7, #24]
 800c158:	4013      	ands	r3, r2
 800c15a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	f003 0203 	and.w	r2, r3, #3
 800c164:	69fb      	ldr	r3, [r7, #28]
 800c166:	005b      	lsls	r3, r3, #1
 800c168:	fa02 f303 	lsl.w	r3, r2, r3
 800c16c:	69ba      	ldr	r2, [r7, #24]
 800c16e:	4313      	orrs	r3, r2
 800c170:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	69ba      	ldr	r2, [r7, #24]
 800c176:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c180:	2b00      	cmp	r3, #0
 800c182:	f000 80b4 	beq.w	800c2ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c186:	2300      	movs	r3, #0
 800c188:	60fb      	str	r3, [r7, #12]
 800c18a:	4b60      	ldr	r3, [pc, #384]	; (800c30c <HAL_GPIO_Init+0x30c>)
 800c18c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c18e:	4a5f      	ldr	r2, [pc, #380]	; (800c30c <HAL_GPIO_Init+0x30c>)
 800c190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c194:	6453      	str	r3, [r2, #68]	; 0x44
 800c196:	4b5d      	ldr	r3, [pc, #372]	; (800c30c <HAL_GPIO_Init+0x30c>)
 800c198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c19a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c19e:	60fb      	str	r3, [r7, #12]
 800c1a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c1a2:	4a5b      	ldr	r2, [pc, #364]	; (800c310 <HAL_GPIO_Init+0x310>)
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	089b      	lsrs	r3, r3, #2
 800c1a8:	3302      	adds	r3, #2
 800c1aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c1b0:	69fb      	ldr	r3, [r7, #28]
 800c1b2:	f003 0303 	and.w	r3, r3, #3
 800c1b6:	009b      	lsls	r3, r3, #2
 800c1b8:	220f      	movs	r2, #15
 800c1ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c1be:	43db      	mvns	r3, r3
 800c1c0:	69ba      	ldr	r2, [r7, #24]
 800c1c2:	4013      	ands	r3, r2
 800c1c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	4a52      	ldr	r2, [pc, #328]	; (800c314 <HAL_GPIO_Init+0x314>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d02b      	beq.n	800c226 <HAL_GPIO_Init+0x226>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	4a51      	ldr	r2, [pc, #324]	; (800c318 <HAL_GPIO_Init+0x318>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d025      	beq.n	800c222 <HAL_GPIO_Init+0x222>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	4a50      	ldr	r2, [pc, #320]	; (800c31c <HAL_GPIO_Init+0x31c>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d01f      	beq.n	800c21e <HAL_GPIO_Init+0x21e>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	4a4f      	ldr	r2, [pc, #316]	; (800c320 <HAL_GPIO_Init+0x320>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d019      	beq.n	800c21a <HAL_GPIO_Init+0x21a>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	4a4e      	ldr	r2, [pc, #312]	; (800c324 <HAL_GPIO_Init+0x324>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d013      	beq.n	800c216 <HAL_GPIO_Init+0x216>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	4a4d      	ldr	r2, [pc, #308]	; (800c328 <HAL_GPIO_Init+0x328>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d00d      	beq.n	800c212 <HAL_GPIO_Init+0x212>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	4a4c      	ldr	r2, [pc, #304]	; (800c32c <HAL_GPIO_Init+0x32c>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d007      	beq.n	800c20e <HAL_GPIO_Init+0x20e>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	4a4b      	ldr	r2, [pc, #300]	; (800c330 <HAL_GPIO_Init+0x330>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d101      	bne.n	800c20a <HAL_GPIO_Init+0x20a>
 800c206:	2307      	movs	r3, #7
 800c208:	e00e      	b.n	800c228 <HAL_GPIO_Init+0x228>
 800c20a:	2308      	movs	r3, #8
 800c20c:	e00c      	b.n	800c228 <HAL_GPIO_Init+0x228>
 800c20e:	2306      	movs	r3, #6
 800c210:	e00a      	b.n	800c228 <HAL_GPIO_Init+0x228>
 800c212:	2305      	movs	r3, #5
 800c214:	e008      	b.n	800c228 <HAL_GPIO_Init+0x228>
 800c216:	2304      	movs	r3, #4
 800c218:	e006      	b.n	800c228 <HAL_GPIO_Init+0x228>
 800c21a:	2303      	movs	r3, #3
 800c21c:	e004      	b.n	800c228 <HAL_GPIO_Init+0x228>
 800c21e:	2302      	movs	r3, #2
 800c220:	e002      	b.n	800c228 <HAL_GPIO_Init+0x228>
 800c222:	2301      	movs	r3, #1
 800c224:	e000      	b.n	800c228 <HAL_GPIO_Init+0x228>
 800c226:	2300      	movs	r3, #0
 800c228:	69fa      	ldr	r2, [r7, #28]
 800c22a:	f002 0203 	and.w	r2, r2, #3
 800c22e:	0092      	lsls	r2, r2, #2
 800c230:	4093      	lsls	r3, r2
 800c232:	69ba      	ldr	r2, [r7, #24]
 800c234:	4313      	orrs	r3, r2
 800c236:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c238:	4935      	ldr	r1, [pc, #212]	; (800c310 <HAL_GPIO_Init+0x310>)
 800c23a:	69fb      	ldr	r3, [r7, #28]
 800c23c:	089b      	lsrs	r3, r3, #2
 800c23e:	3302      	adds	r3, #2
 800c240:	69ba      	ldr	r2, [r7, #24]
 800c242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c246:	4b3b      	ldr	r3, [pc, #236]	; (800c334 <HAL_GPIO_Init+0x334>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	43db      	mvns	r3, r3
 800c250:	69ba      	ldr	r2, [r7, #24]
 800c252:	4013      	ands	r3, r2
 800c254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d003      	beq.n	800c26a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800c262:	69ba      	ldr	r2, [r7, #24]
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	4313      	orrs	r3, r2
 800c268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c26a:	4a32      	ldr	r2, [pc, #200]	; (800c334 <HAL_GPIO_Init+0x334>)
 800c26c:	69bb      	ldr	r3, [r7, #24]
 800c26e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c270:	4b30      	ldr	r3, [pc, #192]	; (800c334 <HAL_GPIO_Init+0x334>)
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	43db      	mvns	r3, r3
 800c27a:	69ba      	ldr	r2, [r7, #24]
 800c27c:	4013      	ands	r3, r2
 800c27e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d003      	beq.n	800c294 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800c28c:	69ba      	ldr	r2, [r7, #24]
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	4313      	orrs	r3, r2
 800c292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c294:	4a27      	ldr	r2, [pc, #156]	; (800c334 <HAL_GPIO_Init+0x334>)
 800c296:	69bb      	ldr	r3, [r7, #24]
 800c298:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c29a:	4b26      	ldr	r3, [pc, #152]	; (800c334 <HAL_GPIO_Init+0x334>)
 800c29c:	689b      	ldr	r3, [r3, #8]
 800c29e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	43db      	mvns	r3, r3
 800c2a4:	69ba      	ldr	r2, [r7, #24]
 800c2a6:	4013      	ands	r3, r2
 800c2a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d003      	beq.n	800c2be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800c2b6:	69ba      	ldr	r2, [r7, #24]
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c2be:	4a1d      	ldr	r2, [pc, #116]	; (800c334 <HAL_GPIO_Init+0x334>)
 800c2c0:	69bb      	ldr	r3, [r7, #24]
 800c2c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c2c4:	4b1b      	ldr	r3, [pc, #108]	; (800c334 <HAL_GPIO_Init+0x334>)
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	43db      	mvns	r3, r3
 800c2ce:	69ba      	ldr	r2, [r7, #24]
 800c2d0:	4013      	ands	r3, r2
 800c2d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d003      	beq.n	800c2e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800c2e0:	69ba      	ldr	r2, [r7, #24]
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c2e8:	4a12      	ldr	r2, [pc, #72]	; (800c334 <HAL_GPIO_Init+0x334>)
 800c2ea:	69bb      	ldr	r3, [r7, #24]
 800c2ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c2ee:	69fb      	ldr	r3, [r7, #28]
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	61fb      	str	r3, [r7, #28]
 800c2f4:	69fb      	ldr	r3, [r7, #28]
 800c2f6:	2b0f      	cmp	r3, #15
 800c2f8:	f67f ae90 	bls.w	800c01c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c2fc:	bf00      	nop
 800c2fe:	bf00      	nop
 800c300:	3724      	adds	r7, #36	; 0x24
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr
 800c30a:	bf00      	nop
 800c30c:	40023800 	.word	0x40023800
 800c310:	40013800 	.word	0x40013800
 800c314:	40020000 	.word	0x40020000
 800c318:	40020400 	.word	0x40020400
 800c31c:	40020800 	.word	0x40020800
 800c320:	40020c00 	.word	0x40020c00
 800c324:	40021000 	.word	0x40021000
 800c328:	40021400 	.word	0x40021400
 800c32c:	40021800 	.word	0x40021800
 800c330:	40021c00 	.word	0x40021c00
 800c334:	40013c00 	.word	0x40013c00

0800c338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c338:	b480      	push	{r7}
 800c33a:	b083      	sub	sp, #12
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	460b      	mov	r3, r1
 800c342:	807b      	strh	r3, [r7, #2]
 800c344:	4613      	mov	r3, r2
 800c346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c348:	787b      	ldrb	r3, [r7, #1]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d003      	beq.n	800c356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c34e:	887a      	ldrh	r2, [r7, #2]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c354:	e003      	b.n	800c35e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c356:	887b      	ldrh	r3, [r7, #2]
 800c358:	041a      	lsls	r2, r3, #16
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	619a      	str	r2, [r3, #24]
}
 800c35e:	bf00      	nop
 800c360:	370c      	adds	r7, #12
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr
	...

0800c36c <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	60b9      	str	r1, [r7, #8]
 800c376:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d101      	bne.n	800c382 <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800c37e:	2301      	movs	r3, #1
 800c380:	e043      	b.n	800c40a <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800c388:	b2db      	uxtb	r3, r3
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d106      	bne.n	800c39c <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	2200      	movs	r2, #0
 800c392:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800c396:	68f8      	ldr	r0, [r7, #12]
 800c398:	f7f8 fb02 	bl	80049a0 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	3308      	adds	r3, #8
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	4610      	mov	r0, r2
 800c3a8:	f003 f9b6 	bl	800f718 <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	6818      	ldr	r0, [r3, #0]
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	689b      	ldr	r3, [r3, #8]
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	68b9      	ldr	r1, [r7, #8]
 800c3b8:	f003 fa00 	bl	800f7bc <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	6858      	ldr	r0, [r3, #4]
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	689a      	ldr	r2, [r3, #8]
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3c8:	6879      	ldr	r1, [r7, #4]
 800c3ca:	f003 fa35 	bl	800f838 <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	68fa      	ldr	r2, [r7, #12]
 800c3d4:	6892      	ldr	r2, [r2, #8]
 800c3d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	68fa      	ldr	r2, [r7, #12]
 800c3e0:	6892      	ldr	r2, [r2, #8]
 800c3e2:	f041 0101 	orr.w	r1, r1, #1
 800c3e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	695b      	ldr	r3, [r3, #20]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d103      	bne.n	800c3fa <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800c3f2:	4b08      	ldr	r3, [pc, #32]	; (800c414 <HAL_NOR_Init+0xa8>)
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	601a      	str	r2, [r3, #0]
 800c3f8:	e002      	b.n	800c400 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800c3fa:	4b06      	ldr	r3, [pc, #24]	; (800c414 <HAL_NOR_Init+0xa8>)
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	2201      	movs	r2, #1
 800c404:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 800c408:	2300      	movs	r3, #0
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3710      	adds	r7, #16
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	bf00      	nop
 800c414:	20004864 	.word	0x20004864

0800c418 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c41a:	b08f      	sub	sp, #60	; 0x3c
 800c41c:	af0a      	add	r7, sp, #40	; 0x28
 800c41e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d101      	bne.n	800c42a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c426:	2301      	movs	r3, #1
 800c428:	e10f      	b.n	800c64a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800c436:	b2db      	uxtb	r3, r3
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d106      	bne.n	800c44a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2200      	movs	r2, #0
 800c440:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f009 fa5d 	bl	8015904 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2203      	movs	r2, #3
 800c44e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d102      	bne.n	800c464 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2200      	movs	r2, #0
 800c462:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	4618      	mov	r0, r3
 800c46a:	f003 fb3a 	bl	800fae2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	603b      	str	r3, [r7, #0]
 800c474:	687e      	ldr	r6, [r7, #4]
 800c476:	466d      	mov	r5, sp
 800c478:	f106 0410 	add.w	r4, r6, #16
 800c47c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c47e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c482:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c484:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c488:	e885 0003 	stmia.w	r5, {r0, r1}
 800c48c:	1d33      	adds	r3, r6, #4
 800c48e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c490:	6838      	ldr	r0, [r7, #0]
 800c492:	f003 fa11 	bl	800f8b8 <USB_CoreInit>
 800c496:	4603      	mov	r3, r0
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d005      	beq.n	800c4a8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2202      	movs	r2, #2
 800c4a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	e0d0      	b.n	800c64a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f003 fb28 	bl	800fb04 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	73fb      	strb	r3, [r7, #15]
 800c4b8:	e04a      	b.n	800c550 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c4ba:	7bfa      	ldrb	r2, [r7, #15]
 800c4bc:	6879      	ldr	r1, [r7, #4]
 800c4be:	4613      	mov	r3, r2
 800c4c0:	00db      	lsls	r3, r3, #3
 800c4c2:	1a9b      	subs	r3, r3, r2
 800c4c4:	009b      	lsls	r3, r3, #2
 800c4c6:	440b      	add	r3, r1
 800c4c8:	333d      	adds	r3, #61	; 0x3d
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c4ce:	7bfa      	ldrb	r2, [r7, #15]
 800c4d0:	6879      	ldr	r1, [r7, #4]
 800c4d2:	4613      	mov	r3, r2
 800c4d4:	00db      	lsls	r3, r3, #3
 800c4d6:	1a9b      	subs	r3, r3, r2
 800c4d8:	009b      	lsls	r3, r3, #2
 800c4da:	440b      	add	r3, r1
 800c4dc:	333c      	adds	r3, #60	; 0x3c
 800c4de:	7bfa      	ldrb	r2, [r7, #15]
 800c4e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c4e2:	7bfa      	ldrb	r2, [r7, #15]
 800c4e4:	7bfb      	ldrb	r3, [r7, #15]
 800c4e6:	b298      	uxth	r0, r3
 800c4e8:	6879      	ldr	r1, [r7, #4]
 800c4ea:	4613      	mov	r3, r2
 800c4ec:	00db      	lsls	r3, r3, #3
 800c4ee:	1a9b      	subs	r3, r3, r2
 800c4f0:	009b      	lsls	r3, r3, #2
 800c4f2:	440b      	add	r3, r1
 800c4f4:	3342      	adds	r3, #66	; 0x42
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c4fa:	7bfa      	ldrb	r2, [r7, #15]
 800c4fc:	6879      	ldr	r1, [r7, #4]
 800c4fe:	4613      	mov	r3, r2
 800c500:	00db      	lsls	r3, r3, #3
 800c502:	1a9b      	subs	r3, r3, r2
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	440b      	add	r3, r1
 800c508:	333f      	adds	r3, #63	; 0x3f
 800c50a:	2200      	movs	r2, #0
 800c50c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c50e:	7bfa      	ldrb	r2, [r7, #15]
 800c510:	6879      	ldr	r1, [r7, #4]
 800c512:	4613      	mov	r3, r2
 800c514:	00db      	lsls	r3, r3, #3
 800c516:	1a9b      	subs	r3, r3, r2
 800c518:	009b      	lsls	r3, r3, #2
 800c51a:	440b      	add	r3, r1
 800c51c:	3344      	adds	r3, #68	; 0x44
 800c51e:	2200      	movs	r2, #0
 800c520:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c522:	7bfa      	ldrb	r2, [r7, #15]
 800c524:	6879      	ldr	r1, [r7, #4]
 800c526:	4613      	mov	r3, r2
 800c528:	00db      	lsls	r3, r3, #3
 800c52a:	1a9b      	subs	r3, r3, r2
 800c52c:	009b      	lsls	r3, r3, #2
 800c52e:	440b      	add	r3, r1
 800c530:	3348      	adds	r3, #72	; 0x48
 800c532:	2200      	movs	r2, #0
 800c534:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c536:	7bfa      	ldrb	r2, [r7, #15]
 800c538:	6879      	ldr	r1, [r7, #4]
 800c53a:	4613      	mov	r3, r2
 800c53c:	00db      	lsls	r3, r3, #3
 800c53e:	1a9b      	subs	r3, r3, r2
 800c540:	009b      	lsls	r3, r3, #2
 800c542:	440b      	add	r3, r1
 800c544:	3350      	adds	r3, #80	; 0x50
 800c546:	2200      	movs	r2, #0
 800c548:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c54a:	7bfb      	ldrb	r3, [r7, #15]
 800c54c:	3301      	adds	r3, #1
 800c54e:	73fb      	strb	r3, [r7, #15]
 800c550:	7bfa      	ldrb	r2, [r7, #15]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	685b      	ldr	r3, [r3, #4]
 800c556:	429a      	cmp	r2, r3
 800c558:	d3af      	bcc.n	800c4ba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c55a:	2300      	movs	r3, #0
 800c55c:	73fb      	strb	r3, [r7, #15]
 800c55e:	e044      	b.n	800c5ea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c560:	7bfa      	ldrb	r2, [r7, #15]
 800c562:	6879      	ldr	r1, [r7, #4]
 800c564:	4613      	mov	r3, r2
 800c566:	00db      	lsls	r3, r3, #3
 800c568:	1a9b      	subs	r3, r3, r2
 800c56a:	009b      	lsls	r3, r3, #2
 800c56c:	440b      	add	r3, r1
 800c56e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800c572:	2200      	movs	r2, #0
 800c574:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c576:	7bfa      	ldrb	r2, [r7, #15]
 800c578:	6879      	ldr	r1, [r7, #4]
 800c57a:	4613      	mov	r3, r2
 800c57c:	00db      	lsls	r3, r3, #3
 800c57e:	1a9b      	subs	r3, r3, r2
 800c580:	009b      	lsls	r3, r3, #2
 800c582:	440b      	add	r3, r1
 800c584:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c588:	7bfa      	ldrb	r2, [r7, #15]
 800c58a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c58c:	7bfa      	ldrb	r2, [r7, #15]
 800c58e:	6879      	ldr	r1, [r7, #4]
 800c590:	4613      	mov	r3, r2
 800c592:	00db      	lsls	r3, r3, #3
 800c594:	1a9b      	subs	r3, r3, r2
 800c596:	009b      	lsls	r3, r3, #2
 800c598:	440b      	add	r3, r1
 800c59a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c59e:	2200      	movs	r2, #0
 800c5a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c5a2:	7bfa      	ldrb	r2, [r7, #15]
 800c5a4:	6879      	ldr	r1, [r7, #4]
 800c5a6:	4613      	mov	r3, r2
 800c5a8:	00db      	lsls	r3, r3, #3
 800c5aa:	1a9b      	subs	r3, r3, r2
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	440b      	add	r3, r1
 800c5b0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c5b8:	7bfa      	ldrb	r2, [r7, #15]
 800c5ba:	6879      	ldr	r1, [r7, #4]
 800c5bc:	4613      	mov	r3, r2
 800c5be:	00db      	lsls	r3, r3, #3
 800c5c0:	1a9b      	subs	r3, r3, r2
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	440b      	add	r3, r1
 800c5c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c5ce:	7bfa      	ldrb	r2, [r7, #15]
 800c5d0:	6879      	ldr	r1, [r7, #4]
 800c5d2:	4613      	mov	r3, r2
 800c5d4:	00db      	lsls	r3, r3, #3
 800c5d6:	1a9b      	subs	r3, r3, r2
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	440b      	add	r3, r1
 800c5dc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c5e4:	7bfb      	ldrb	r3, [r7, #15]
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	73fb      	strb	r3, [r7, #15]
 800c5ea:	7bfa      	ldrb	r2, [r7, #15]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d3b5      	bcc.n	800c560 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	603b      	str	r3, [r7, #0]
 800c5fa:	687e      	ldr	r6, [r7, #4]
 800c5fc:	466d      	mov	r5, sp
 800c5fe:	f106 0410 	add.w	r4, r6, #16
 800c602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c608:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c60a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c60e:	e885 0003 	stmia.w	r5, {r0, r1}
 800c612:	1d33      	adds	r3, r6, #4
 800c614:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c616:	6838      	ldr	r0, [r7, #0]
 800c618:	f003 fa9e 	bl	800fb58 <USB_DevInit>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d005      	beq.n	800c62e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2202      	movs	r2, #2
 800c626:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c62a:	2301      	movs	r3, #1
 800c62c:	e00d      	b.n	800c64a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2200      	movs	r2, #0
 800c632:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2201      	movs	r2, #1
 800c63a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4618      	mov	r0, r3
 800c644:	f004 fae6 	bl	8010c14 <USB_DevDisconnect>

  return HAL_OK;
 800c648:	2300      	movs	r3, #0
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3714      	adds	r7, #20
 800c64e:	46bd      	mov	sp, r7
 800c650:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c652 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c652:	b580      	push	{r7, lr}
 800c654:	b084      	sub	sp, #16
 800c656:	af00      	add	r7, sp, #0
 800c658:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c666:	2b01      	cmp	r3, #1
 800c668:	d101      	bne.n	800c66e <HAL_PCD_Start+0x1c>
 800c66a:	2302      	movs	r3, #2
 800c66c:	e020      	b.n	800c6b0 <HAL_PCD_Start+0x5e>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2201      	movs	r2, #1
 800c672:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	d109      	bne.n	800c692 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c682:	2b01      	cmp	r3, #1
 800c684:	d005      	beq.n	800c692 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c68a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4618      	mov	r0, r3
 800c698:	f003 fa12 	bl	800fac0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f004 fa96 	bl	8010bd2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c6ae:	2300      	movs	r3, #0
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3710      	adds	r7, #16
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}

0800c6b8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c6b8:	b590      	push	{r4, r7, lr}
 800c6ba:	b08d      	sub	sp, #52	; 0x34
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6c6:	6a3b      	ldr	r3, [r7, #32]
 800c6c8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f004 fb54 	bl	8010d7c <USB_GetMode>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	f040 839d 	bne.w	800ce16 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f004 fab8 	bl	8010c56 <USB_ReadInterrupts>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	f000 8393 	beq.w	800ce14 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f004 faaf 	bl	8010c56 <USB_ReadInterrupts>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	f003 0302 	and.w	r3, r3, #2
 800c6fe:	2b02      	cmp	r3, #2
 800c700:	d107      	bne.n	800c712 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	695a      	ldr	r2, [r3, #20]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f002 0202 	and.w	r2, r2, #2
 800c710:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	4618      	mov	r0, r3
 800c718:	f004 fa9d 	bl	8010c56 <USB_ReadInterrupts>
 800c71c:	4603      	mov	r3, r0
 800c71e:	f003 0310 	and.w	r3, r3, #16
 800c722:	2b10      	cmp	r3, #16
 800c724:	d161      	bne.n	800c7ea <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	699a      	ldr	r2, [r3, #24]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f022 0210 	bic.w	r2, r2, #16
 800c734:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800c736:	6a3b      	ldr	r3, [r7, #32]
 800c738:	6a1b      	ldr	r3, [r3, #32]
 800c73a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800c73c:	69bb      	ldr	r3, [r7, #24]
 800c73e:	f003 020f 	and.w	r2, r3, #15
 800c742:	4613      	mov	r3, r2
 800c744:	00db      	lsls	r3, r3, #3
 800c746:	1a9b      	subs	r3, r3, r2
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c74e:	687a      	ldr	r2, [r7, #4]
 800c750:	4413      	add	r3, r2
 800c752:	3304      	adds	r3, #4
 800c754:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c756:	69bb      	ldr	r3, [r7, #24]
 800c758:	0c5b      	lsrs	r3, r3, #17
 800c75a:	f003 030f 	and.w	r3, r3, #15
 800c75e:	2b02      	cmp	r3, #2
 800c760:	d124      	bne.n	800c7ac <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c762:	69ba      	ldr	r2, [r7, #24]
 800c764:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800c768:	4013      	ands	r3, r2
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d035      	beq.n	800c7da <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c772:	69bb      	ldr	r3, [r7, #24]
 800c774:	091b      	lsrs	r3, r3, #4
 800c776:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c778:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	461a      	mov	r2, r3
 800c780:	6a38      	ldr	r0, [r7, #32]
 800c782:	f004 f903 	bl	801098c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	68da      	ldr	r2, [r3, #12]
 800c78a:	69bb      	ldr	r3, [r7, #24]
 800c78c:	091b      	lsrs	r3, r3, #4
 800c78e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c792:	441a      	add	r2, r3
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	699a      	ldr	r2, [r3, #24]
 800c79c:	69bb      	ldr	r3, [r7, #24]
 800c79e:	091b      	lsrs	r3, r3, #4
 800c7a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c7a4:	441a      	add	r2, r3
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	619a      	str	r2, [r3, #24]
 800c7aa:	e016      	b.n	800c7da <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800c7ac:	69bb      	ldr	r3, [r7, #24]
 800c7ae:	0c5b      	lsrs	r3, r3, #17
 800c7b0:	f003 030f 	and.w	r3, r3, #15
 800c7b4:	2b06      	cmp	r3, #6
 800c7b6:	d110      	bne.n	800c7da <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c7be:	2208      	movs	r2, #8
 800c7c0:	4619      	mov	r1, r3
 800c7c2:	6a38      	ldr	r0, [r7, #32]
 800c7c4:	f004 f8e2 	bl	801098c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	699a      	ldr	r2, [r3, #24]
 800c7cc:	69bb      	ldr	r3, [r7, #24]
 800c7ce:	091b      	lsrs	r3, r3, #4
 800c7d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c7d4:	441a      	add	r2, r3
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	699a      	ldr	r2, [r3, #24]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f042 0210 	orr.w	r2, r2, #16
 800c7e8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f004 fa31 	bl	8010c56 <USB_ReadInterrupts>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c7fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c7fe:	d16e      	bne.n	800c8de <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800c800:	2300      	movs	r3, #0
 800c802:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4618      	mov	r0, r3
 800c80a:	f004 fa37 	bl	8010c7c <USB_ReadDevAllOutEpInterrupt>
 800c80e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800c810:	e062      	b.n	800c8d8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c814:	f003 0301 	and.w	r3, r3, #1
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d057      	beq.n	800c8cc <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c822:	b2d2      	uxtb	r2, r2
 800c824:	4611      	mov	r1, r2
 800c826:	4618      	mov	r0, r3
 800c828:	f004 fa5c 	bl	8010ce4 <USB_ReadDevOutEPInterrupt>
 800c82c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	f003 0301 	and.w	r3, r3, #1
 800c834:	2b00      	cmp	r3, #0
 800c836:	d00c      	beq.n	800c852 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83a:	015a      	lsls	r2, r3, #5
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	4413      	add	r3, r2
 800c840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c844:	461a      	mov	r2, r3
 800c846:	2301      	movs	r3, #1
 800c848:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c84a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 fdb1 	bl	800d3b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	f003 0308 	and.w	r3, r3, #8
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d00c      	beq.n	800c876 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85e:	015a      	lsls	r2, r3, #5
 800c860:	69fb      	ldr	r3, [r7, #28]
 800c862:	4413      	add	r3, r2
 800c864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c868:	461a      	mov	r2, r3
 800c86a:	2308      	movs	r3, #8
 800c86c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c86e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f000 feab 	bl	800d5cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	f003 0310 	and.w	r3, r3, #16
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d008      	beq.n	800c892 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c882:	015a      	lsls	r2, r3, #5
 800c884:	69fb      	ldr	r3, [r7, #28]
 800c886:	4413      	add	r3, r2
 800c888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c88c:	461a      	mov	r2, r3
 800c88e:	2310      	movs	r3, #16
 800c890:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	f003 0320 	and.w	r3, r3, #32
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d008      	beq.n	800c8ae <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c89e:	015a      	lsls	r2, r3, #5
 800c8a0:	69fb      	ldr	r3, [r7, #28]
 800c8a2:	4413      	add	r3, r2
 800c8a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	2320      	movs	r3, #32
 800c8ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d009      	beq.n	800c8cc <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ba:	015a      	lsls	r2, r3, #5
 800c8bc:	69fb      	ldr	r3, [r7, #28]
 800c8be:	4413      	add	r3, r2
 800c8c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c8ca:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d4:	085b      	lsrs	r3, r3, #1
 800c8d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d199      	bne.n	800c812 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f004 f9b7 	bl	8010c56 <USB_ReadInterrupts>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c8ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c8f2:	f040 80c0 	bne.w	800ca76 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f004 f9d8 	bl	8010cb0 <USB_ReadDevAllInEpInterrupt>
 800c900:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800c902:	2300      	movs	r3, #0
 800c904:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800c906:	e0b2      	b.n	800ca6e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c90a:	f003 0301 	and.w	r3, r3, #1
 800c90e:	2b00      	cmp	r3, #0
 800c910:	f000 80a7 	beq.w	800ca62 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c91a:	b2d2      	uxtb	r2, r2
 800c91c:	4611      	mov	r1, r2
 800c91e:	4618      	mov	r0, r3
 800c920:	f004 f9fe 	bl	8010d20 <USB_ReadDevInEPInterrupt>
 800c924:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	f003 0301 	and.w	r3, r3, #1
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d057      	beq.n	800c9e0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c932:	f003 030f 	and.w	r3, r3, #15
 800c936:	2201      	movs	r2, #1
 800c938:	fa02 f303 	lsl.w	r3, r2, r3
 800c93c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c93e:	69fb      	ldr	r3, [r7, #28]
 800c940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	43db      	mvns	r3, r3
 800c94a:	69f9      	ldr	r1, [r7, #28]
 800c94c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c950:	4013      	ands	r3, r2
 800c952:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c956:	015a      	lsls	r2, r3, #5
 800c958:	69fb      	ldr	r3, [r7, #28]
 800c95a:	4413      	add	r3, r2
 800c95c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c960:	461a      	mov	r2, r3
 800c962:	2301      	movs	r3, #1
 800c964:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	691b      	ldr	r3, [r3, #16]
 800c96a:	2b01      	cmp	r3, #1
 800c96c:	d132      	bne.n	800c9d4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c96e:	6879      	ldr	r1, [r7, #4]
 800c970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c972:	4613      	mov	r3, r2
 800c974:	00db      	lsls	r3, r3, #3
 800c976:	1a9b      	subs	r3, r3, r2
 800c978:	009b      	lsls	r3, r3, #2
 800c97a:	440b      	add	r3, r1
 800c97c:	3348      	adds	r3, #72	; 0x48
 800c97e:	6819      	ldr	r1, [r3, #0]
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c984:	4613      	mov	r3, r2
 800c986:	00db      	lsls	r3, r3, #3
 800c988:	1a9b      	subs	r3, r3, r2
 800c98a:	009b      	lsls	r3, r3, #2
 800c98c:	4403      	add	r3, r0
 800c98e:	3344      	adds	r3, #68	; 0x44
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	4419      	add	r1, r3
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c998:	4613      	mov	r3, r2
 800c99a:	00db      	lsls	r3, r3, #3
 800c99c:	1a9b      	subs	r3, r3, r2
 800c99e:	009b      	lsls	r3, r3, #2
 800c9a0:	4403      	add	r3, r0
 800c9a2:	3348      	adds	r3, #72	; 0x48
 800c9a4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d113      	bne.n	800c9d4 <HAL_PCD_IRQHandler+0x31c>
 800c9ac:	6879      	ldr	r1, [r7, #4]
 800c9ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9b0:	4613      	mov	r3, r2
 800c9b2:	00db      	lsls	r3, r3, #3
 800c9b4:	1a9b      	subs	r3, r3, r2
 800c9b6:	009b      	lsls	r3, r3, #2
 800c9b8:	440b      	add	r3, r1
 800c9ba:	3350      	adds	r3, #80	; 0x50
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d108      	bne.n	800c9d4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6818      	ldr	r0, [r3, #0]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	2101      	movs	r1, #1
 800c9d0:	f004 fa06 	bl	8010de0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d6:	b2db      	uxtb	r3, r3
 800c9d8:	4619      	mov	r1, r3
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f009 f813 	bl	8015a06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	f003 0308 	and.w	r3, r3, #8
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d008      	beq.n	800c9fc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ec:	015a      	lsls	r2, r3, #5
 800c9ee:	69fb      	ldr	r3, [r7, #28]
 800c9f0:	4413      	add	r3, r2
 800c9f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	2308      	movs	r3, #8
 800c9fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	f003 0310 	and.w	r3, r3, #16
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d008      	beq.n	800ca18 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800ca06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca08:	015a      	lsls	r2, r3, #5
 800ca0a:	69fb      	ldr	r3, [r7, #28]
 800ca0c:	4413      	add	r3, r2
 800ca0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca12:	461a      	mov	r2, r3
 800ca14:	2310      	movs	r3, #16
 800ca16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d008      	beq.n	800ca34 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800ca22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca24:	015a      	lsls	r2, r3, #5
 800ca26:	69fb      	ldr	r3, [r7, #28]
 800ca28:	4413      	add	r3, r2
 800ca2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca2e:	461a      	mov	r2, r3
 800ca30:	2340      	movs	r3, #64	; 0x40
 800ca32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	f003 0302 	and.w	r3, r3, #2
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d008      	beq.n	800ca50 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800ca3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca40:	015a      	lsls	r2, r3, #5
 800ca42:	69fb      	ldr	r3, [r7, #28]
 800ca44:	4413      	add	r3, r2
 800ca46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	2302      	movs	r3, #2
 800ca4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d003      	beq.n	800ca62 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800ca5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f000 fc1b 	bl	800d298 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800ca62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca64:	3301      	adds	r3, #1
 800ca66:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800ca68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca6a:	085b      	lsrs	r3, r3, #1
 800ca6c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800ca6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	f47f af49 	bne.w	800c908 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f004 f8eb 	bl	8010c56 <USB_ReadInterrupts>
 800ca80:	4603      	mov	r3, r0
 800ca82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca8a:	d122      	bne.n	800cad2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ca8c:	69fb      	ldr	r3, [r7, #28]
 800ca8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	69fa      	ldr	r2, [r7, #28]
 800ca96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca9a:	f023 0301 	bic.w	r3, r3, #1
 800ca9e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800caa6:	2b01      	cmp	r3, #1
 800caa8:	d108      	bne.n	800cabc <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2200      	movs	r2, #0
 800caae:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800cab2:	2100      	movs	r1, #0
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f000 fe27 	bl	800d708 <HAL_PCDEx_LPM_Callback>
 800caba:	e002      	b.n	800cac2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f009 f819 	bl	8015af4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	695a      	ldr	r2, [r3, #20]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800cad0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	4618      	mov	r0, r3
 800cad8:	f004 f8bd 	bl	8010c56 <USB_ReadInterrupts>
 800cadc:	4603      	mov	r3, r0
 800cade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cae6:	d112      	bne.n	800cb0e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800caee:	689b      	ldr	r3, [r3, #8]
 800caf0:	f003 0301 	and.w	r3, r3, #1
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	d102      	bne.n	800cafe <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f008 ffd5 	bl	8015aa8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	695a      	ldr	r2, [r3, #20]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800cb0c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	4618      	mov	r0, r3
 800cb14:	f004 f89f 	bl	8010c56 <USB_ReadInterrupts>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cb1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb22:	f040 80c7 	bne.w	800ccb4 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800cb26:	69fb      	ldr	r3, [r7, #28]
 800cb28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	69fa      	ldr	r2, [r7, #28]
 800cb30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb34:	f023 0301 	bic.w	r3, r3, #1
 800cb38:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	2110      	movs	r1, #16
 800cb40:	4618      	mov	r0, r3
 800cb42:	f003 f96d 	bl	800fe20 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cb46:	2300      	movs	r3, #0
 800cb48:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb4a:	e056      	b.n	800cbfa <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800cb4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb4e:	015a      	lsls	r2, r3, #5
 800cb50:	69fb      	ldr	r3, [r7, #28]
 800cb52:	4413      	add	r3, r2
 800cb54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb58:	461a      	mov	r2, r3
 800cb5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cb5e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cb60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb62:	015a      	lsls	r2, r3, #5
 800cb64:	69fb      	ldr	r3, [r7, #28]
 800cb66:	4413      	add	r3, r2
 800cb68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb70:	0151      	lsls	r1, r2, #5
 800cb72:	69fa      	ldr	r2, [r7, #28]
 800cb74:	440a      	add	r2, r1
 800cb76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cb7e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cb80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb82:	015a      	lsls	r2, r3, #5
 800cb84:	69fb      	ldr	r3, [r7, #28]
 800cb86:	4413      	add	r3, r2
 800cb88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb90:	0151      	lsls	r1, r2, #5
 800cb92:	69fa      	ldr	r2, [r7, #28]
 800cb94:	440a      	add	r2, r1
 800cb96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cb9e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800cba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba2:	015a      	lsls	r2, r3, #5
 800cba4:	69fb      	ldr	r3, [r7, #28]
 800cba6:	4413      	add	r3, r2
 800cba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbac:	461a      	mov	r2, r3
 800cbae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cbb2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb6:	015a      	lsls	r2, r3, #5
 800cbb8:	69fb      	ldr	r3, [r7, #28]
 800cbba:	4413      	add	r3, r2
 800cbbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbc4:	0151      	lsls	r1, r2, #5
 800cbc6:	69fa      	ldr	r2, [r7, #28]
 800cbc8:	440a      	add	r2, r1
 800cbca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cbd2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd6:	015a      	lsls	r2, r3, #5
 800cbd8:	69fb      	ldr	r3, [r7, #28]
 800cbda:	4413      	add	r3, r2
 800cbdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbe4:	0151      	lsls	r1, r2, #5
 800cbe6:	69fa      	ldr	r2, [r7, #28]
 800cbe8:	440a      	add	r2, r1
 800cbea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cbf2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc00:	429a      	cmp	r2, r3
 800cc02:	d3a3      	bcc.n	800cb4c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800cc04:	69fb      	ldr	r3, [r7, #28]
 800cc06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc0a:	69db      	ldr	r3, [r3, #28]
 800cc0c:	69fa      	ldr	r2, [r7, #28]
 800cc0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc12:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800cc16:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d016      	beq.n	800cc4e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800cc20:	69fb      	ldr	r3, [r7, #28]
 800cc22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc2a:	69fa      	ldr	r2, [r7, #28]
 800cc2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc30:	f043 030b 	orr.w	r3, r3, #11
 800cc34:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800cc38:	69fb      	ldr	r3, [r7, #28]
 800cc3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc40:	69fa      	ldr	r2, [r7, #28]
 800cc42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc46:	f043 030b 	orr.w	r3, r3, #11
 800cc4a:	6453      	str	r3, [r2, #68]	; 0x44
 800cc4c:	e015      	b.n	800cc7a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800cc4e:	69fb      	ldr	r3, [r7, #28]
 800cc50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc54:	695b      	ldr	r3, [r3, #20]
 800cc56:	69fa      	ldr	r2, [r7, #28]
 800cc58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cc60:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800cc64:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800cc66:	69fb      	ldr	r3, [r7, #28]
 800cc68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc6c:	691b      	ldr	r3, [r3, #16]
 800cc6e:	69fa      	ldr	r2, [r7, #28]
 800cc70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc74:	f043 030b 	orr.w	r3, r3, #11
 800cc78:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800cc7a:	69fb      	ldr	r3, [r7, #28]
 800cc7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	69fa      	ldr	r2, [r7, #28]
 800cc84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc88:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cc8c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6818      	ldr	r0, [r3, #0]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	691b      	ldr	r3, [r3, #16]
 800cc96:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cc9e:	461a      	mov	r2, r3
 800cca0:	f004 f89e 	bl	8010de0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	695a      	ldr	r2, [r3, #20]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800ccb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f003 ffcc 	bl	8010c56 <USB_ReadInterrupts>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ccc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ccc8:	d124      	bne.n	800cd14 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f004 f862 	bl	8010d98 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f003 f902 	bl	800fee2 <USB_GetDevSpeed>
 800ccde:	4603      	mov	r3, r0
 800cce0:	461a      	mov	r2, r3
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681c      	ldr	r4, [r3, #0]
 800ccea:	f001 f951 	bl	800df90 <HAL_RCC_GetHCLKFreq>
 800ccee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	461a      	mov	r2, r3
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	f002 fe3f 	bl	800f97c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f008 fea9 	bl	8015a56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	695a      	ldr	r2, [r3, #20]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800cd12:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f003 ff9c 	bl	8010c56 <USB_ReadInterrupts>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	f003 0308 	and.w	r3, r3, #8
 800cd24:	2b08      	cmp	r3, #8
 800cd26:	d10a      	bne.n	800cd3e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f008 fe86 	bl	8015a3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	695a      	ldr	r2, [r3, #20]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f002 0208 	and.w	r2, r2, #8
 800cd3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	4618      	mov	r0, r3
 800cd44:	f003 ff87 	bl	8010c56 <USB_ReadInterrupts>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd52:	d10f      	bne.n	800cd74 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800cd54:	2300      	movs	r3, #0
 800cd56:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800cd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd5a:	b2db      	uxtb	r3, r3
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f008 fee8 	bl	8015b34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	695a      	ldr	r2, [r3, #20]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800cd72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f003 ff6c 	bl	8010c56 <USB_ReadInterrupts>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cd84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd88:	d10f      	bne.n	800cdaa <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800cd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd90:	b2db      	uxtb	r3, r3
 800cd92:	4619      	mov	r1, r3
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f008 febb 	bl	8015b10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	695a      	ldr	r2, [r3, #20]
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800cda8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f003 ff51 	bl	8010c56 <USB_ReadInterrupts>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cdba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cdbe:	d10a      	bne.n	800cdd6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f008 fec9 	bl	8015b58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	695a      	ldr	r2, [r3, #20]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800cdd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	4618      	mov	r0, r3
 800cddc:	f003 ff3b 	bl	8010c56 <USB_ReadInterrupts>
 800cde0:	4603      	mov	r3, r0
 800cde2:	f003 0304 	and.w	r3, r3, #4
 800cde6:	2b04      	cmp	r3, #4
 800cde8:	d115      	bne.n	800ce16 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	f003 0304 	and.w	r3, r3, #4
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d002      	beq.n	800ce02 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f008 feb9 	bl	8015b74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	6859      	ldr	r1, [r3, #4]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	69ba      	ldr	r2, [r7, #24]
 800ce0e:	430a      	orrs	r2, r1
 800ce10:	605a      	str	r2, [r3, #4]
 800ce12:	e000      	b.n	800ce16 <HAL_PCD_IRQHandler+0x75e>
      return;
 800ce14:	bf00      	nop
    }
  }
}
 800ce16:	3734      	adds	r7, #52	; 0x34
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd90      	pop	{r4, r7, pc}

0800ce1c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b082      	sub	sp, #8
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	460b      	mov	r3, r1
 800ce26:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ce2e:	2b01      	cmp	r3, #1
 800ce30:	d101      	bne.n	800ce36 <HAL_PCD_SetAddress+0x1a>
 800ce32:	2302      	movs	r3, #2
 800ce34:	e013      	b.n	800ce5e <HAL_PCD_SetAddress+0x42>
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2201      	movs	r2, #1
 800ce3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	78fa      	ldrb	r2, [r7, #3]
 800ce42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	78fa      	ldrb	r2, [r7, #3]
 800ce4c:	4611      	mov	r1, r2
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f003 fe99 	bl	8010b86 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2200      	movs	r2, #0
 800ce58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ce5c:	2300      	movs	r3, #0
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3708      	adds	r7, #8
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}

0800ce66 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800ce66:	b580      	push	{r7, lr}
 800ce68:	b084      	sub	sp, #16
 800ce6a:	af00      	add	r7, sp, #0
 800ce6c:	6078      	str	r0, [r7, #4]
 800ce6e:	4608      	mov	r0, r1
 800ce70:	4611      	mov	r1, r2
 800ce72:	461a      	mov	r2, r3
 800ce74:	4603      	mov	r3, r0
 800ce76:	70fb      	strb	r3, [r7, #3]
 800ce78:	460b      	mov	r3, r1
 800ce7a:	803b      	strh	r3, [r7, #0]
 800ce7c:	4613      	mov	r3, r2
 800ce7e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800ce80:	2300      	movs	r3, #0
 800ce82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ce84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	da0f      	bge.n	800ceac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ce8c:	78fb      	ldrb	r3, [r7, #3]
 800ce8e:	f003 020f 	and.w	r2, r3, #15
 800ce92:	4613      	mov	r3, r2
 800ce94:	00db      	lsls	r3, r3, #3
 800ce96:	1a9b      	subs	r3, r3, r2
 800ce98:	009b      	lsls	r3, r3, #2
 800ce9a:	3338      	adds	r3, #56	; 0x38
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	4413      	add	r3, r2
 800cea0:	3304      	adds	r3, #4
 800cea2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2201      	movs	r2, #1
 800cea8:	705a      	strb	r2, [r3, #1]
 800ceaa:	e00f      	b.n	800cecc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ceac:	78fb      	ldrb	r3, [r7, #3]
 800ceae:	f003 020f 	and.w	r2, r3, #15
 800ceb2:	4613      	mov	r3, r2
 800ceb4:	00db      	lsls	r3, r3, #3
 800ceb6:	1a9b      	subs	r3, r3, r2
 800ceb8:	009b      	lsls	r3, r3, #2
 800ceba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	4413      	add	r3, r2
 800cec2:	3304      	adds	r3, #4
 800cec4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2200      	movs	r2, #0
 800ceca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800cecc:	78fb      	ldrb	r3, [r7, #3]
 800cece:	f003 030f 	and.w	r3, r3, #15
 800ced2:	b2da      	uxtb	r2, r3
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800ced8:	883a      	ldrh	r2, [r7, #0]
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	78ba      	ldrb	r2, [r7, #2]
 800cee2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	785b      	ldrb	r3, [r3, #1]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d004      	beq.n	800cef6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	b29a      	uxth	r2, r3
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800cef6:	78bb      	ldrb	r3, [r7, #2]
 800cef8:	2b02      	cmp	r3, #2
 800cefa:	d102      	bne.n	800cf02 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2200      	movs	r2, #0
 800cf00:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cf08:	2b01      	cmp	r3, #1
 800cf0a:	d101      	bne.n	800cf10 <HAL_PCD_EP_Open+0xaa>
 800cf0c:	2302      	movs	r3, #2
 800cf0e:	e00e      	b.n	800cf2e <HAL_PCD_EP_Open+0xc8>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2201      	movs	r2, #1
 800cf14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	68f9      	ldr	r1, [r7, #12]
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f003 f804 	bl	800ff2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2200      	movs	r2, #0
 800cf28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800cf2c:	7afb      	ldrb	r3, [r7, #11]
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3710      	adds	r7, #16
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}

0800cf36 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cf36:	b580      	push	{r7, lr}
 800cf38:	b084      	sub	sp, #16
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	6078      	str	r0, [r7, #4]
 800cf3e:	460b      	mov	r3, r1
 800cf40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cf42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	da0f      	bge.n	800cf6a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cf4a:	78fb      	ldrb	r3, [r7, #3]
 800cf4c:	f003 020f 	and.w	r2, r3, #15
 800cf50:	4613      	mov	r3, r2
 800cf52:	00db      	lsls	r3, r3, #3
 800cf54:	1a9b      	subs	r3, r3, r2
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	3338      	adds	r3, #56	; 0x38
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	3304      	adds	r3, #4
 800cf60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2201      	movs	r2, #1
 800cf66:	705a      	strb	r2, [r3, #1]
 800cf68:	e00f      	b.n	800cf8a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cf6a:	78fb      	ldrb	r3, [r7, #3]
 800cf6c:	f003 020f 	and.w	r2, r3, #15
 800cf70:	4613      	mov	r3, r2
 800cf72:	00db      	lsls	r3, r3, #3
 800cf74:	1a9b      	subs	r3, r3, r2
 800cf76:	009b      	lsls	r3, r3, #2
 800cf78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cf7c:	687a      	ldr	r2, [r7, #4]
 800cf7e:	4413      	add	r3, r2
 800cf80:	3304      	adds	r3, #4
 800cf82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	2200      	movs	r2, #0
 800cf88:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800cf8a:	78fb      	ldrb	r3, [r7, #3]
 800cf8c:	f003 030f 	and.w	r3, r3, #15
 800cf90:	b2da      	uxtb	r2, r3
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d101      	bne.n	800cfa4 <HAL_PCD_EP_Close+0x6e>
 800cfa0:	2302      	movs	r3, #2
 800cfa2:	e00e      	b.n	800cfc2 <HAL_PCD_EP_Close+0x8c>
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	68f9      	ldr	r1, [r7, #12]
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f003 f842 	bl	801003c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800cfc0:	2300      	movs	r3, #0
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3710      	adds	r7, #16
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}

0800cfca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cfca:	b580      	push	{r7, lr}
 800cfcc:	b086      	sub	sp, #24
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	60f8      	str	r0, [r7, #12]
 800cfd2:	607a      	str	r2, [r7, #4]
 800cfd4:	603b      	str	r3, [r7, #0]
 800cfd6:	460b      	mov	r3, r1
 800cfd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cfda:	7afb      	ldrb	r3, [r7, #11]
 800cfdc:	f003 020f 	and.w	r2, r3, #15
 800cfe0:	4613      	mov	r3, r2
 800cfe2:	00db      	lsls	r3, r3, #3
 800cfe4:	1a9b      	subs	r3, r3, r2
 800cfe6:	009b      	lsls	r3, r3, #2
 800cfe8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cfec:	68fa      	ldr	r2, [r7, #12]
 800cfee:	4413      	add	r3, r2
 800cff0:	3304      	adds	r3, #4
 800cff2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	687a      	ldr	r2, [r7, #4]
 800cff8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	683a      	ldr	r2, [r7, #0]
 800cffe:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	2200      	movs	r2, #0
 800d004:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	2200      	movs	r2, #0
 800d00a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d00c:	7afb      	ldrb	r3, [r7, #11]
 800d00e:	f003 030f 	and.w	r3, r3, #15
 800d012:	b2da      	uxtb	r2, r3
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	691b      	ldr	r3, [r3, #16]
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	d102      	bne.n	800d026 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d020:	687a      	ldr	r2, [r7, #4]
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d026:	7afb      	ldrb	r3, [r7, #11]
 800d028:	f003 030f 	and.w	r3, r3, #15
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d109      	bne.n	800d044 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	6818      	ldr	r0, [r3, #0]
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	691b      	ldr	r3, [r3, #16]
 800d038:	b2db      	uxtb	r3, r3
 800d03a:	461a      	mov	r2, r3
 800d03c:	6979      	ldr	r1, [r7, #20]
 800d03e:	f003 fb1d 	bl	801067c <USB_EP0StartXfer>
 800d042:	e008      	b.n	800d056 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	6818      	ldr	r0, [r3, #0]
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	691b      	ldr	r3, [r3, #16]
 800d04c:	b2db      	uxtb	r3, r3
 800d04e:	461a      	mov	r2, r3
 800d050:	6979      	ldr	r1, [r7, #20]
 800d052:	f003 f8cf 	bl	80101f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800d056:	2300      	movs	r3, #0
}
 800d058:	4618      	mov	r0, r3
 800d05a:	3718      	adds	r7, #24
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}

0800d060 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d060:	b480      	push	{r7}
 800d062:	b083      	sub	sp, #12
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
 800d068:	460b      	mov	r3, r1
 800d06a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d06c:	78fb      	ldrb	r3, [r7, #3]
 800d06e:	f003 020f 	and.w	r2, r3, #15
 800d072:	6879      	ldr	r1, [r7, #4]
 800d074:	4613      	mov	r3, r2
 800d076:	00db      	lsls	r3, r3, #3
 800d078:	1a9b      	subs	r3, r3, r2
 800d07a:	009b      	lsls	r3, r3, #2
 800d07c:	440b      	add	r3, r1
 800d07e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d082:	681b      	ldr	r3, [r3, #0]
}
 800d084:	4618      	mov	r0, r3
 800d086:	370c      	adds	r7, #12
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr

0800d090 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b086      	sub	sp, #24
 800d094:	af00      	add	r7, sp, #0
 800d096:	60f8      	str	r0, [r7, #12]
 800d098:	607a      	str	r2, [r7, #4]
 800d09a:	603b      	str	r3, [r7, #0]
 800d09c:	460b      	mov	r3, r1
 800d09e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d0a0:	7afb      	ldrb	r3, [r7, #11]
 800d0a2:	f003 020f 	and.w	r2, r3, #15
 800d0a6:	4613      	mov	r3, r2
 800d0a8:	00db      	lsls	r3, r3, #3
 800d0aa:	1a9b      	subs	r3, r3, r2
 800d0ac:	009b      	lsls	r3, r3, #2
 800d0ae:	3338      	adds	r3, #56	; 0x38
 800d0b0:	68fa      	ldr	r2, [r7, #12]
 800d0b2:	4413      	add	r3, r2
 800d0b4:	3304      	adds	r3, #4
 800d0b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	687a      	ldr	r2, [r7, #4]
 800d0bc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	683a      	ldr	r2, [r7, #0]
 800d0c2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d0d0:	7afb      	ldrb	r3, [r7, #11]
 800d0d2:	f003 030f 	and.w	r3, r3, #15
 800d0d6:	b2da      	uxtb	r2, r3
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	691b      	ldr	r3, [r3, #16]
 800d0e0:	2b01      	cmp	r3, #1
 800d0e2:	d102      	bne.n	800d0ea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d0e4:	687a      	ldr	r2, [r7, #4]
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d0ea:	7afb      	ldrb	r3, [r7, #11]
 800d0ec:	f003 030f 	and.w	r3, r3, #15
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d109      	bne.n	800d108 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	6818      	ldr	r0, [r3, #0]
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	691b      	ldr	r3, [r3, #16]
 800d0fc:	b2db      	uxtb	r3, r3
 800d0fe:	461a      	mov	r2, r3
 800d100:	6979      	ldr	r1, [r7, #20]
 800d102:	f003 fabb 	bl	801067c <USB_EP0StartXfer>
 800d106:	e008      	b.n	800d11a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	6818      	ldr	r0, [r3, #0]
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	691b      	ldr	r3, [r3, #16]
 800d110:	b2db      	uxtb	r3, r3
 800d112:	461a      	mov	r2, r3
 800d114:	6979      	ldr	r1, [r7, #20]
 800d116:	f003 f86d 	bl	80101f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800d11a:	2300      	movs	r3, #0
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3718      	adds	r7, #24
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}

0800d124 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b084      	sub	sp, #16
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	460b      	mov	r3, r1
 800d12e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d130:	78fb      	ldrb	r3, [r7, #3]
 800d132:	f003 020f 	and.w	r2, r3, #15
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d901      	bls.n	800d142 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800d13e:	2301      	movs	r3, #1
 800d140:	e050      	b.n	800d1e4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d142:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d146:	2b00      	cmp	r3, #0
 800d148:	da0f      	bge.n	800d16a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d14a:	78fb      	ldrb	r3, [r7, #3]
 800d14c:	f003 020f 	and.w	r2, r3, #15
 800d150:	4613      	mov	r3, r2
 800d152:	00db      	lsls	r3, r3, #3
 800d154:	1a9b      	subs	r3, r3, r2
 800d156:	009b      	lsls	r3, r3, #2
 800d158:	3338      	adds	r3, #56	; 0x38
 800d15a:	687a      	ldr	r2, [r7, #4]
 800d15c:	4413      	add	r3, r2
 800d15e:	3304      	adds	r3, #4
 800d160:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	2201      	movs	r2, #1
 800d166:	705a      	strb	r2, [r3, #1]
 800d168:	e00d      	b.n	800d186 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d16a:	78fa      	ldrb	r2, [r7, #3]
 800d16c:	4613      	mov	r3, r2
 800d16e:	00db      	lsls	r3, r3, #3
 800d170:	1a9b      	subs	r3, r3, r2
 800d172:	009b      	lsls	r3, r3, #2
 800d174:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d178:	687a      	ldr	r2, [r7, #4]
 800d17a:	4413      	add	r3, r2
 800d17c:	3304      	adds	r3, #4
 800d17e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2200      	movs	r2, #0
 800d184:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2201      	movs	r2, #1
 800d18a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d18c:	78fb      	ldrb	r3, [r7, #3]
 800d18e:	f003 030f 	and.w	r3, r3, #15
 800d192:	b2da      	uxtb	r2, r3
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d19e:	2b01      	cmp	r3, #1
 800d1a0:	d101      	bne.n	800d1a6 <HAL_PCD_EP_SetStall+0x82>
 800d1a2:	2302      	movs	r3, #2
 800d1a4:	e01e      	b.n	800d1e4 <HAL_PCD_EP_SetStall+0xc0>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	68f9      	ldr	r1, [r7, #12]
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f003 fc12 	bl	80109de <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d1ba:	78fb      	ldrb	r3, [r7, #3]
 800d1bc:	f003 030f 	and.w	r3, r3, #15
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d10a      	bne.n	800d1da <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	6818      	ldr	r0, [r3, #0]
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	691b      	ldr	r3, [r3, #16]
 800d1cc:	b2d9      	uxtb	r1, r3
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	f003 fe03 	bl	8010de0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d1e2:	2300      	movs	r3, #0
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3710      	adds	r7, #16
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b084      	sub	sp, #16
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
 800d1f4:	460b      	mov	r3, r1
 800d1f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d1f8:	78fb      	ldrb	r3, [r7, #3]
 800d1fa:	f003 020f 	and.w	r2, r3, #15
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	685b      	ldr	r3, [r3, #4]
 800d202:	429a      	cmp	r2, r3
 800d204:	d901      	bls.n	800d20a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800d206:	2301      	movs	r3, #1
 800d208:	e042      	b.n	800d290 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d20a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	da0f      	bge.n	800d232 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d212:	78fb      	ldrb	r3, [r7, #3]
 800d214:	f003 020f 	and.w	r2, r3, #15
 800d218:	4613      	mov	r3, r2
 800d21a:	00db      	lsls	r3, r3, #3
 800d21c:	1a9b      	subs	r3, r3, r2
 800d21e:	009b      	lsls	r3, r3, #2
 800d220:	3338      	adds	r3, #56	; 0x38
 800d222:	687a      	ldr	r2, [r7, #4]
 800d224:	4413      	add	r3, r2
 800d226:	3304      	adds	r3, #4
 800d228:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2201      	movs	r2, #1
 800d22e:	705a      	strb	r2, [r3, #1]
 800d230:	e00f      	b.n	800d252 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d232:	78fb      	ldrb	r3, [r7, #3]
 800d234:	f003 020f 	and.w	r2, r3, #15
 800d238:	4613      	mov	r3, r2
 800d23a:	00db      	lsls	r3, r3, #3
 800d23c:	1a9b      	subs	r3, r3, r2
 800d23e:	009b      	lsls	r3, r3, #2
 800d240:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d244:	687a      	ldr	r2, [r7, #4]
 800d246:	4413      	add	r3, r2
 800d248:	3304      	adds	r3, #4
 800d24a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2200      	movs	r2, #0
 800d250:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2200      	movs	r2, #0
 800d256:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d258:	78fb      	ldrb	r3, [r7, #3]
 800d25a:	f003 030f 	and.w	r3, r3, #15
 800d25e:	b2da      	uxtb	r2, r3
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d101      	bne.n	800d272 <HAL_PCD_EP_ClrStall+0x86>
 800d26e:	2302      	movs	r3, #2
 800d270:	e00e      	b.n	800d290 <HAL_PCD_EP_ClrStall+0xa4>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2201      	movs	r2, #1
 800d276:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	68f9      	ldr	r1, [r7, #12]
 800d280:	4618      	mov	r0, r3
 800d282:	f003 fc1a 	bl	8010aba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2200      	movs	r2, #0
 800d28a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d28e:	2300      	movs	r3, #0
}
 800d290:	4618      	mov	r0, r3
 800d292:	3710      	adds	r7, #16
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}

0800d298 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b08a      	sub	sp, #40	; 0x28
 800d29c:	af02      	add	r7, sp, #8
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800d2ac:	683a      	ldr	r2, [r7, #0]
 800d2ae:	4613      	mov	r3, r2
 800d2b0:	00db      	lsls	r3, r3, #3
 800d2b2:	1a9b      	subs	r3, r3, r2
 800d2b4:	009b      	lsls	r3, r3, #2
 800d2b6:	3338      	adds	r3, #56	; 0x38
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	4413      	add	r3, r2
 800d2bc:	3304      	adds	r3, #4
 800d2be:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	699a      	ldr	r2, [r3, #24]
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	695b      	ldr	r3, [r3, #20]
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	d901      	bls.n	800d2d0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	e06c      	b.n	800d3aa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	695a      	ldr	r2, [r3, #20]
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	699b      	ldr	r3, [r3, #24]
 800d2d8:	1ad3      	subs	r3, r2, r3
 800d2da:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	689b      	ldr	r3, [r3, #8]
 800d2e0:	69fa      	ldr	r2, [r7, #28]
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d902      	bls.n	800d2ec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	689b      	ldr	r3, [r3, #8]
 800d2ea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800d2ec:	69fb      	ldr	r3, [r7, #28]
 800d2ee:	3303      	adds	r3, #3
 800d2f0:	089b      	lsrs	r3, r3, #2
 800d2f2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d2f4:	e02b      	b.n	800d34e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	695a      	ldr	r2, [r3, #20]
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	699b      	ldr	r3, [r3, #24]
 800d2fe:	1ad3      	subs	r3, r2, r3
 800d300:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	689b      	ldr	r3, [r3, #8]
 800d306:	69fa      	ldr	r2, [r7, #28]
 800d308:	429a      	cmp	r2, r3
 800d30a:	d902      	bls.n	800d312 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	689b      	ldr	r3, [r3, #8]
 800d310:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800d312:	69fb      	ldr	r3, [r7, #28]
 800d314:	3303      	adds	r3, #3
 800d316:	089b      	lsrs	r3, r3, #2
 800d318:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	68d9      	ldr	r1, [r3, #12]
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	b2da      	uxtb	r2, r3
 800d322:	69fb      	ldr	r3, [r7, #28]
 800d324:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d32a:	b2db      	uxtb	r3, r3
 800d32c:	9300      	str	r3, [sp, #0]
 800d32e:	4603      	mov	r3, r0
 800d330:	6978      	ldr	r0, [r7, #20]
 800d332:	f003 faf6 	bl	8010922 <USB_WritePacket>

    ep->xfer_buff  += len;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	68da      	ldr	r2, [r3, #12]
 800d33a:	69fb      	ldr	r3, [r7, #28]
 800d33c:	441a      	add	r2, r3
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	699a      	ldr	r2, [r3, #24]
 800d346:	69fb      	ldr	r3, [r7, #28]
 800d348:	441a      	add	r2, r3
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	015a      	lsls	r2, r3, #5
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	4413      	add	r3, r2
 800d356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d35a:	699b      	ldr	r3, [r3, #24]
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	69ba      	ldr	r2, [r7, #24]
 800d360:	429a      	cmp	r2, r3
 800d362:	d809      	bhi.n	800d378 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	699a      	ldr	r2, [r3, #24]
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d203      	bcs.n	800d378 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	695b      	ldr	r3, [r3, #20]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d1be      	bne.n	800d2f6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	695a      	ldr	r2, [r3, #20]
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	699b      	ldr	r3, [r3, #24]
 800d380:	429a      	cmp	r2, r3
 800d382:	d811      	bhi.n	800d3a8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	f003 030f 	and.w	r3, r3, #15
 800d38a:	2201      	movs	r2, #1
 800d38c:	fa02 f303 	lsl.w	r3, r2, r3
 800d390:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	43db      	mvns	r3, r3
 800d39e:	6939      	ldr	r1, [r7, #16]
 800d3a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d3a4:	4013      	ands	r3, r2
 800d3a6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800d3a8:	2300      	movs	r3, #0
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3720      	adds	r7, #32
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}
	...

0800d3b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b086      	sub	sp, #24
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	333c      	adds	r3, #60	; 0x3c
 800d3cc:	3304      	adds	r3, #4
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	015a      	lsls	r2, r3, #5
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	4413      	add	r3, r2
 800d3da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3de:	689b      	ldr	r3, [r3, #8]
 800d3e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	691b      	ldr	r3, [r3, #16]
 800d3e6:	2b01      	cmp	r3, #1
 800d3e8:	f040 80a0 	bne.w	800d52c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	f003 0308 	and.w	r3, r3, #8
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d015      	beq.n	800d422 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	4a72      	ldr	r2, [pc, #456]	; (800d5c4 <PCD_EP_OutXfrComplete_int+0x210>)
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	f240 80dd 	bls.w	800d5ba <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d406:	2b00      	cmp	r3, #0
 800d408:	f000 80d7 	beq.w	800d5ba <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	015a      	lsls	r2, r3, #5
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	4413      	add	r3, r2
 800d414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d418:	461a      	mov	r2, r3
 800d41a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d41e:	6093      	str	r3, [r2, #8]
 800d420:	e0cb      	b.n	800d5ba <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	f003 0320 	and.w	r3, r3, #32
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d009      	beq.n	800d440 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	015a      	lsls	r2, r3, #5
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	4413      	add	r3, r2
 800d434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d438:	461a      	mov	r2, r3
 800d43a:	2320      	movs	r3, #32
 800d43c:	6093      	str	r3, [r2, #8]
 800d43e:	e0bc      	b.n	800d5ba <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d446:	2b00      	cmp	r3, #0
 800d448:	f040 80b7 	bne.w	800d5ba <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	4a5d      	ldr	r2, [pc, #372]	; (800d5c4 <PCD_EP_OutXfrComplete_int+0x210>)
 800d450:	4293      	cmp	r3, r2
 800d452:	d90f      	bls.n	800d474 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d00a      	beq.n	800d474 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	015a      	lsls	r2, r3, #5
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	4413      	add	r3, r2
 800d466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d46a:	461a      	mov	r2, r3
 800d46c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d470:	6093      	str	r3, [r2, #8]
 800d472:	e0a2      	b.n	800d5ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800d474:	6879      	ldr	r1, [r7, #4]
 800d476:	683a      	ldr	r2, [r7, #0]
 800d478:	4613      	mov	r3, r2
 800d47a:	00db      	lsls	r3, r3, #3
 800d47c:	1a9b      	subs	r3, r3, r2
 800d47e:	009b      	lsls	r3, r3, #2
 800d480:	440b      	add	r3, r1
 800d482:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d486:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	0159      	lsls	r1, r3, #5
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	440b      	add	r3, r1
 800d490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d494:	691b      	ldr	r3, [r3, #16]
 800d496:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800d49a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	683a      	ldr	r2, [r7, #0]
 800d4a0:	4613      	mov	r3, r2
 800d4a2:	00db      	lsls	r3, r3, #3
 800d4a4:	1a9b      	subs	r3, r3, r2
 800d4a6:	009b      	lsls	r3, r3, #2
 800d4a8:	4403      	add	r3, r0
 800d4aa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d4ae:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800d4b0:	6879      	ldr	r1, [r7, #4]
 800d4b2:	683a      	ldr	r2, [r7, #0]
 800d4b4:	4613      	mov	r3, r2
 800d4b6:	00db      	lsls	r3, r3, #3
 800d4b8:	1a9b      	subs	r3, r3, r2
 800d4ba:	009b      	lsls	r3, r3, #2
 800d4bc:	440b      	add	r3, r1
 800d4be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d4c2:	6819      	ldr	r1, [r3, #0]
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	683a      	ldr	r2, [r7, #0]
 800d4c8:	4613      	mov	r3, r2
 800d4ca:	00db      	lsls	r3, r3, #3
 800d4cc:	1a9b      	subs	r3, r3, r2
 800d4ce:	009b      	lsls	r3, r3, #2
 800d4d0:	4403      	add	r3, r0
 800d4d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	4419      	add	r1, r3
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	683a      	ldr	r2, [r7, #0]
 800d4de:	4613      	mov	r3, r2
 800d4e0:	00db      	lsls	r3, r3, #3
 800d4e2:	1a9b      	subs	r3, r3, r2
 800d4e4:	009b      	lsls	r3, r3, #2
 800d4e6:	4403      	add	r3, r0
 800d4e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d4ec:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d114      	bne.n	800d51e <PCD_EP_OutXfrComplete_int+0x16a>
 800d4f4:	6879      	ldr	r1, [r7, #4]
 800d4f6:	683a      	ldr	r2, [r7, #0]
 800d4f8:	4613      	mov	r3, r2
 800d4fa:	00db      	lsls	r3, r3, #3
 800d4fc:	1a9b      	subs	r3, r3, r2
 800d4fe:	009b      	lsls	r3, r3, #2
 800d500:	440b      	add	r3, r1
 800d502:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d108      	bne.n	800d51e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6818      	ldr	r0, [r3, #0]
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d516:	461a      	mov	r2, r3
 800d518:	2101      	movs	r1, #1
 800d51a:	f003 fc61 	bl	8010de0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	b2db      	uxtb	r3, r3
 800d522:	4619      	mov	r1, r3
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f008 fa53 	bl	80159d0 <HAL_PCD_DataOutStageCallback>
 800d52a:	e046      	b.n	800d5ba <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	4a26      	ldr	r2, [pc, #152]	; (800d5c8 <PCD_EP_OutXfrComplete_int+0x214>)
 800d530:	4293      	cmp	r3, r2
 800d532:	d124      	bne.n	800d57e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d00a      	beq.n	800d554 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	015a      	lsls	r2, r3, #5
 800d542:	693b      	ldr	r3, [r7, #16]
 800d544:	4413      	add	r3, r2
 800d546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d54a:	461a      	mov	r2, r3
 800d54c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d550:	6093      	str	r3, [r2, #8]
 800d552:	e032      	b.n	800d5ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	f003 0320 	and.w	r3, r3, #32
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d008      	beq.n	800d570 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	015a      	lsls	r2, r3, #5
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	4413      	add	r3, r2
 800d566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d56a:	461a      	mov	r2, r3
 800d56c:	2320      	movs	r3, #32
 800d56e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	b2db      	uxtb	r3, r3
 800d574:	4619      	mov	r1, r3
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f008 fa2a 	bl	80159d0 <HAL_PCD_DataOutStageCallback>
 800d57c:	e01d      	b.n	800d5ba <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d114      	bne.n	800d5ae <PCD_EP_OutXfrComplete_int+0x1fa>
 800d584:	6879      	ldr	r1, [r7, #4]
 800d586:	683a      	ldr	r2, [r7, #0]
 800d588:	4613      	mov	r3, r2
 800d58a:	00db      	lsls	r3, r3, #3
 800d58c:	1a9b      	subs	r3, r3, r2
 800d58e:	009b      	lsls	r3, r3, #2
 800d590:	440b      	add	r3, r1
 800d592:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d108      	bne.n	800d5ae <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6818      	ldr	r0, [r3, #0]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	2100      	movs	r1, #0
 800d5aa:	f003 fc19 	bl	8010de0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	b2db      	uxtb	r3, r3
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f008 fa0b 	bl	80159d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d5ba:	2300      	movs	r3, #0
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3718      	adds	r7, #24
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}
 800d5c4:	4f54300a 	.word	0x4f54300a
 800d5c8:	4f54310a 	.word	0x4f54310a

0800d5cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b086      	sub	sp, #24
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	333c      	adds	r3, #60	; 0x3c
 800d5e4:	3304      	adds	r3, #4
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	015a      	lsls	r2, r3, #5
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	4413      	add	r3, r2
 800d5f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5f6:	689b      	ldr	r3, [r3, #8]
 800d5f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	4a15      	ldr	r2, [pc, #84]	; (800d654 <PCD_EP_OutSetupPacket_int+0x88>)
 800d5fe:	4293      	cmp	r3, r2
 800d600:	d90e      	bls.n	800d620 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d009      	beq.n	800d620 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	015a      	lsls	r2, r3, #5
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	4413      	add	r3, r2
 800d614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d618:	461a      	mov	r2, r3
 800d61a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d61e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f008 f9c3 	bl	80159ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	4a0a      	ldr	r2, [pc, #40]	; (800d654 <PCD_EP_OutSetupPacket_int+0x88>)
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d90c      	bls.n	800d648 <PCD_EP_OutSetupPacket_int+0x7c>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	691b      	ldr	r3, [r3, #16]
 800d632:	2b01      	cmp	r3, #1
 800d634:	d108      	bne.n	800d648 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6818      	ldr	r0, [r3, #0]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d640:	461a      	mov	r2, r3
 800d642:	2101      	movs	r1, #1
 800d644:	f003 fbcc 	bl	8010de0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d648:	2300      	movs	r3, #0
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	3718      	adds	r7, #24
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}
 800d652:	bf00      	nop
 800d654:	4f54300a 	.word	0x4f54300a

0800d658 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d658:	b480      	push	{r7}
 800d65a:	b085      	sub	sp, #20
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	460b      	mov	r3, r1
 800d662:	70fb      	strb	r3, [r7, #3]
 800d664:	4613      	mov	r3, r2
 800d666:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d66e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d670:	78fb      	ldrb	r3, [r7, #3]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d107      	bne.n	800d686 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d676:	883b      	ldrh	r3, [r7, #0]
 800d678:	0419      	lsls	r1, r3, #16
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	68ba      	ldr	r2, [r7, #8]
 800d680:	430a      	orrs	r2, r1
 800d682:	629a      	str	r2, [r3, #40]	; 0x28
 800d684:	e028      	b.n	800d6d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d68c:	0c1b      	lsrs	r3, r3, #16
 800d68e:	68ba      	ldr	r2, [r7, #8]
 800d690:	4413      	add	r3, r2
 800d692:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d694:	2300      	movs	r3, #0
 800d696:	73fb      	strb	r3, [r7, #15]
 800d698:	e00d      	b.n	800d6b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681a      	ldr	r2, [r3, #0]
 800d69e:	7bfb      	ldrb	r3, [r7, #15]
 800d6a0:	3340      	adds	r3, #64	; 0x40
 800d6a2:	009b      	lsls	r3, r3, #2
 800d6a4:	4413      	add	r3, r2
 800d6a6:	685b      	ldr	r3, [r3, #4]
 800d6a8:	0c1b      	lsrs	r3, r3, #16
 800d6aa:	68ba      	ldr	r2, [r7, #8]
 800d6ac:	4413      	add	r3, r2
 800d6ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d6b0:	7bfb      	ldrb	r3, [r7, #15]
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	73fb      	strb	r3, [r7, #15]
 800d6b6:	7bfa      	ldrb	r2, [r7, #15]
 800d6b8:	78fb      	ldrb	r3, [r7, #3]
 800d6ba:	3b01      	subs	r3, #1
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d3ec      	bcc.n	800d69a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d6c0:	883b      	ldrh	r3, [r7, #0]
 800d6c2:	0418      	lsls	r0, r3, #16
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6819      	ldr	r1, [r3, #0]
 800d6c8:	78fb      	ldrb	r3, [r7, #3]
 800d6ca:	3b01      	subs	r3, #1
 800d6cc:	68ba      	ldr	r2, [r7, #8]
 800d6ce:	4302      	orrs	r2, r0
 800d6d0:	3340      	adds	r3, #64	; 0x40
 800d6d2:	009b      	lsls	r3, r3, #2
 800d6d4:	440b      	add	r3, r1
 800d6d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d6d8:	2300      	movs	r3, #0
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3714      	adds	r7, #20
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e4:	4770      	bx	lr

0800d6e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d6e6:	b480      	push	{r7}
 800d6e8:	b083      	sub	sp, #12
 800d6ea:	af00      	add	r7, sp, #0
 800d6ec:	6078      	str	r0, [r7, #4]
 800d6ee:	460b      	mov	r3, r1
 800d6f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	887a      	ldrh	r2, [r7, #2]
 800d6f8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800d6fa:	2300      	movs	r3, #0
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	370c      	adds	r7, #12
 800d700:	46bd      	mov	sp, r7
 800d702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d706:	4770      	bx	lr

0800d708 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d708:	b480      	push	{r7}
 800d70a:	b083      	sub	sp, #12
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	460b      	mov	r3, r1
 800d712:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d714:	bf00      	nop
 800d716:	370c      	adds	r7, #12
 800d718:	46bd      	mov	sp, r7
 800d71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71e:	4770      	bx	lr

0800d720 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b086      	sub	sp, #24
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d101      	bne.n	800d732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d72e:	2301      	movs	r3, #1
 800d730:	e25b      	b.n	800dbea <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f003 0301 	and.w	r3, r3, #1
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d075      	beq.n	800d82a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d73e:	4ba3      	ldr	r3, [pc, #652]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d740:	689b      	ldr	r3, [r3, #8]
 800d742:	f003 030c 	and.w	r3, r3, #12
 800d746:	2b04      	cmp	r3, #4
 800d748:	d00c      	beq.n	800d764 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d74a:	4ba0      	ldr	r3, [pc, #640]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d74c:	689b      	ldr	r3, [r3, #8]
 800d74e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d752:	2b08      	cmp	r3, #8
 800d754:	d112      	bne.n	800d77c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d756:	4b9d      	ldr	r3, [pc, #628]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d758:	685b      	ldr	r3, [r3, #4]
 800d75a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d75e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d762:	d10b      	bne.n	800d77c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d764:	4b99      	ldr	r3, [pc, #612]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d05b      	beq.n	800d828 <HAL_RCC_OscConfig+0x108>
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d157      	bne.n	800d828 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d778:	2301      	movs	r3, #1
 800d77a:	e236      	b.n	800dbea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	685b      	ldr	r3, [r3, #4]
 800d780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d784:	d106      	bne.n	800d794 <HAL_RCC_OscConfig+0x74>
 800d786:	4b91      	ldr	r3, [pc, #580]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4a90      	ldr	r2, [pc, #576]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d78c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d790:	6013      	str	r3, [r2, #0]
 800d792:	e01d      	b.n	800d7d0 <HAL_RCC_OscConfig+0xb0>
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	685b      	ldr	r3, [r3, #4]
 800d798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d79c:	d10c      	bne.n	800d7b8 <HAL_RCC_OscConfig+0x98>
 800d79e:	4b8b      	ldr	r3, [pc, #556]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	4a8a      	ldr	r2, [pc, #552]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d7a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d7a8:	6013      	str	r3, [r2, #0]
 800d7aa:	4b88      	ldr	r3, [pc, #544]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	4a87      	ldr	r2, [pc, #540]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d7b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d7b4:	6013      	str	r3, [r2, #0]
 800d7b6:	e00b      	b.n	800d7d0 <HAL_RCC_OscConfig+0xb0>
 800d7b8:	4b84      	ldr	r3, [pc, #528]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4a83      	ldr	r2, [pc, #524]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d7be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d7c2:	6013      	str	r3, [r2, #0]
 800d7c4:	4b81      	ldr	r3, [pc, #516]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	4a80      	ldr	r2, [pc, #512]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d7ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d7ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	685b      	ldr	r3, [r3, #4]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d013      	beq.n	800d800 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d7d8:	f7fd ff60 	bl	800b69c <HAL_GetTick>
 800d7dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d7de:	e008      	b.n	800d7f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d7e0:	f7fd ff5c 	bl	800b69c <HAL_GetTick>
 800d7e4:	4602      	mov	r2, r0
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	1ad3      	subs	r3, r2, r3
 800d7ea:	2b64      	cmp	r3, #100	; 0x64
 800d7ec:	d901      	bls.n	800d7f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d7ee:	2303      	movs	r3, #3
 800d7f0:	e1fb      	b.n	800dbea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d7f2:	4b76      	ldr	r3, [pc, #472]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d0f0      	beq.n	800d7e0 <HAL_RCC_OscConfig+0xc0>
 800d7fe:	e014      	b.n	800d82a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d800:	f7fd ff4c 	bl	800b69c <HAL_GetTick>
 800d804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d806:	e008      	b.n	800d81a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d808:	f7fd ff48 	bl	800b69c <HAL_GetTick>
 800d80c:	4602      	mov	r2, r0
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	1ad3      	subs	r3, r2, r3
 800d812:	2b64      	cmp	r3, #100	; 0x64
 800d814:	d901      	bls.n	800d81a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d816:	2303      	movs	r3, #3
 800d818:	e1e7      	b.n	800dbea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d81a:	4b6c      	ldr	r3, [pc, #432]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d822:	2b00      	cmp	r3, #0
 800d824:	d1f0      	bne.n	800d808 <HAL_RCC_OscConfig+0xe8>
 800d826:	e000      	b.n	800d82a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f003 0302 	and.w	r3, r3, #2
 800d832:	2b00      	cmp	r3, #0
 800d834:	d063      	beq.n	800d8fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d836:	4b65      	ldr	r3, [pc, #404]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d838:	689b      	ldr	r3, [r3, #8]
 800d83a:	f003 030c 	and.w	r3, r3, #12
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d00b      	beq.n	800d85a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d842:	4b62      	ldr	r3, [pc, #392]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d844:	689b      	ldr	r3, [r3, #8]
 800d846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d84a:	2b08      	cmp	r3, #8
 800d84c:	d11c      	bne.n	800d888 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d84e:	4b5f      	ldr	r3, [pc, #380]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d850:	685b      	ldr	r3, [r3, #4]
 800d852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d856:	2b00      	cmp	r3, #0
 800d858:	d116      	bne.n	800d888 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d85a:	4b5c      	ldr	r3, [pc, #368]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	f003 0302 	and.w	r3, r3, #2
 800d862:	2b00      	cmp	r3, #0
 800d864:	d005      	beq.n	800d872 <HAL_RCC_OscConfig+0x152>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	68db      	ldr	r3, [r3, #12]
 800d86a:	2b01      	cmp	r3, #1
 800d86c:	d001      	beq.n	800d872 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d86e:	2301      	movs	r3, #1
 800d870:	e1bb      	b.n	800dbea <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d872:	4b56      	ldr	r3, [pc, #344]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	691b      	ldr	r3, [r3, #16]
 800d87e:	00db      	lsls	r3, r3, #3
 800d880:	4952      	ldr	r1, [pc, #328]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d882:	4313      	orrs	r3, r2
 800d884:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d886:	e03a      	b.n	800d8fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	68db      	ldr	r3, [r3, #12]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d020      	beq.n	800d8d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d890:	4b4f      	ldr	r3, [pc, #316]	; (800d9d0 <HAL_RCC_OscConfig+0x2b0>)
 800d892:	2201      	movs	r2, #1
 800d894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d896:	f7fd ff01 	bl	800b69c <HAL_GetTick>
 800d89a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d89c:	e008      	b.n	800d8b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d89e:	f7fd fefd 	bl	800b69c <HAL_GetTick>
 800d8a2:	4602      	mov	r2, r0
 800d8a4:	693b      	ldr	r3, [r7, #16]
 800d8a6:	1ad3      	subs	r3, r2, r3
 800d8a8:	2b02      	cmp	r3, #2
 800d8aa:	d901      	bls.n	800d8b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d8ac:	2303      	movs	r3, #3
 800d8ae:	e19c      	b.n	800dbea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d8b0:	4b46      	ldr	r3, [pc, #280]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f003 0302 	and.w	r3, r3, #2
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d0f0      	beq.n	800d89e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d8bc:	4b43      	ldr	r3, [pc, #268]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	691b      	ldr	r3, [r3, #16]
 800d8c8:	00db      	lsls	r3, r3, #3
 800d8ca:	4940      	ldr	r1, [pc, #256]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d8cc:	4313      	orrs	r3, r2
 800d8ce:	600b      	str	r3, [r1, #0]
 800d8d0:	e015      	b.n	800d8fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d8d2:	4b3f      	ldr	r3, [pc, #252]	; (800d9d0 <HAL_RCC_OscConfig+0x2b0>)
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8d8:	f7fd fee0 	bl	800b69c <HAL_GetTick>
 800d8dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d8de:	e008      	b.n	800d8f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d8e0:	f7fd fedc 	bl	800b69c <HAL_GetTick>
 800d8e4:	4602      	mov	r2, r0
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	1ad3      	subs	r3, r2, r3
 800d8ea:	2b02      	cmp	r3, #2
 800d8ec:	d901      	bls.n	800d8f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d8ee:	2303      	movs	r3, #3
 800d8f0:	e17b      	b.n	800dbea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d8f2:	4b36      	ldr	r3, [pc, #216]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	f003 0302 	and.w	r3, r3, #2
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d1f0      	bne.n	800d8e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	f003 0308 	and.w	r3, r3, #8
 800d906:	2b00      	cmp	r3, #0
 800d908:	d030      	beq.n	800d96c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	695b      	ldr	r3, [r3, #20]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d016      	beq.n	800d940 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d912:	4b30      	ldr	r3, [pc, #192]	; (800d9d4 <HAL_RCC_OscConfig+0x2b4>)
 800d914:	2201      	movs	r2, #1
 800d916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d918:	f7fd fec0 	bl	800b69c <HAL_GetTick>
 800d91c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d91e:	e008      	b.n	800d932 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d920:	f7fd febc 	bl	800b69c <HAL_GetTick>
 800d924:	4602      	mov	r2, r0
 800d926:	693b      	ldr	r3, [r7, #16]
 800d928:	1ad3      	subs	r3, r2, r3
 800d92a:	2b02      	cmp	r3, #2
 800d92c:	d901      	bls.n	800d932 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d92e:	2303      	movs	r3, #3
 800d930:	e15b      	b.n	800dbea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d932:	4b26      	ldr	r3, [pc, #152]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d936:	f003 0302 	and.w	r3, r3, #2
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d0f0      	beq.n	800d920 <HAL_RCC_OscConfig+0x200>
 800d93e:	e015      	b.n	800d96c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d940:	4b24      	ldr	r3, [pc, #144]	; (800d9d4 <HAL_RCC_OscConfig+0x2b4>)
 800d942:	2200      	movs	r2, #0
 800d944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d946:	f7fd fea9 	bl	800b69c <HAL_GetTick>
 800d94a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d94c:	e008      	b.n	800d960 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d94e:	f7fd fea5 	bl	800b69c <HAL_GetTick>
 800d952:	4602      	mov	r2, r0
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	1ad3      	subs	r3, r2, r3
 800d958:	2b02      	cmp	r3, #2
 800d95a:	d901      	bls.n	800d960 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d95c:	2303      	movs	r3, #3
 800d95e:	e144      	b.n	800dbea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d960:	4b1a      	ldr	r3, [pc, #104]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d964:	f003 0302 	and.w	r3, r3, #2
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d1f0      	bne.n	800d94e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	f003 0304 	and.w	r3, r3, #4
 800d974:	2b00      	cmp	r3, #0
 800d976:	f000 80a0 	beq.w	800daba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d97a:	2300      	movs	r3, #0
 800d97c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d97e:	4b13      	ldr	r3, [pc, #76]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d986:	2b00      	cmp	r3, #0
 800d988:	d10f      	bne.n	800d9aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d98a:	2300      	movs	r3, #0
 800d98c:	60bb      	str	r3, [r7, #8]
 800d98e:	4b0f      	ldr	r3, [pc, #60]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d992:	4a0e      	ldr	r2, [pc, #56]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d998:	6413      	str	r3, [r2, #64]	; 0x40
 800d99a:	4b0c      	ldr	r3, [pc, #48]	; (800d9cc <HAL_RCC_OscConfig+0x2ac>)
 800d99c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d99e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d9a2:	60bb      	str	r3, [r7, #8]
 800d9a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d9aa:	4b0b      	ldr	r3, [pc, #44]	; (800d9d8 <HAL_RCC_OscConfig+0x2b8>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d121      	bne.n	800d9fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d9b6:	4b08      	ldr	r3, [pc, #32]	; (800d9d8 <HAL_RCC_OscConfig+0x2b8>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	4a07      	ldr	r2, [pc, #28]	; (800d9d8 <HAL_RCC_OscConfig+0x2b8>)
 800d9bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d9c2:	f7fd fe6b 	bl	800b69c <HAL_GetTick>
 800d9c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d9c8:	e011      	b.n	800d9ee <HAL_RCC_OscConfig+0x2ce>
 800d9ca:	bf00      	nop
 800d9cc:	40023800 	.word	0x40023800
 800d9d0:	42470000 	.word	0x42470000
 800d9d4:	42470e80 	.word	0x42470e80
 800d9d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d9dc:	f7fd fe5e 	bl	800b69c <HAL_GetTick>
 800d9e0:	4602      	mov	r2, r0
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	1ad3      	subs	r3, r2, r3
 800d9e6:	2b02      	cmp	r3, #2
 800d9e8:	d901      	bls.n	800d9ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800d9ea:	2303      	movs	r3, #3
 800d9ec:	e0fd      	b.n	800dbea <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d9ee:	4b81      	ldr	r3, [pc, #516]	; (800dbf4 <HAL_RCC_OscConfig+0x4d4>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d0f0      	beq.n	800d9dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	689b      	ldr	r3, [r3, #8]
 800d9fe:	2b01      	cmp	r3, #1
 800da00:	d106      	bne.n	800da10 <HAL_RCC_OscConfig+0x2f0>
 800da02:	4b7d      	ldr	r3, [pc, #500]	; (800dbf8 <HAL_RCC_OscConfig+0x4d8>)
 800da04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da06:	4a7c      	ldr	r2, [pc, #496]	; (800dbf8 <HAL_RCC_OscConfig+0x4d8>)
 800da08:	f043 0301 	orr.w	r3, r3, #1
 800da0c:	6713      	str	r3, [r2, #112]	; 0x70
 800da0e:	e01c      	b.n	800da4a <HAL_RCC_OscConfig+0x32a>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	689b      	ldr	r3, [r3, #8]
 800da14:	2b05      	cmp	r3, #5
 800da16:	d10c      	bne.n	800da32 <HAL_RCC_OscConfig+0x312>
 800da18:	4b77      	ldr	r3, [pc, #476]	; (800dbf8 <HAL_RCC_OscConfig+0x4d8>)
 800da1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da1c:	4a76      	ldr	r2, [pc, #472]	; (800dbf8 <HAL_RCC_OscConfig+0x4d8>)
 800da1e:	f043 0304 	orr.w	r3, r3, #4
 800da22:	6713      	str	r3, [r2, #112]	; 0x70
 800da24:	4b74      	ldr	r3, [pc, #464]	; (800dbf8 <HAL_RCC_OscConfig+0x4d8>)
 800da26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da28:	4a73      	ldr	r2, [pc, #460]	; (800dbf8 <HAL_RCC_OscConfig+0x4d8>)
 800da2a:	f043 0301 	orr.w	r3, r3, #1
 800da2e:	6713      	str	r3, [r2, #112]	; 0x70
 800da30:	e00b      	b.n	800da4a <HAL_RCC_OscConfig+0x32a>
 800da32:	4b71      	ldr	r3, [pc, #452]	; (800dbf8 <HAL_RCC_OscConfig+0x4d8>)
 800da34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da36:	4a70      	ldr	r2, [pc, #448]	; (800dbf8 <HAL_RCC_OscConfig+0x4d8>)
 800da38:	f023 0301 	bic.w	r3, r3, #1
 800da3c:	6713      	str	r3, [r2, #112]	; 0x70
 800da3e:	4b6e      	ldr	r3, [pc, #440]	; (800dbf8 <HAL_RCC_OscConfig+0x4d8>)
 800da40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da42:	4a6d      	ldr	r2, [pc, #436]	; (800dbf8 <HAL_RCC_OscConfig+0x4d8>)
 800da44:	f023 0304 	bic.w	r3, r3, #4
 800da48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	689b      	ldr	r3, [r3, #8]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d015      	beq.n	800da7e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da52:	f7fd fe23 	bl	800b69c <HAL_GetTick>
 800da56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800da58:	e00a      	b.n	800da70 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800da5a:	f7fd fe1f 	bl	800b69c <HAL_GetTick>
 800da5e:	4602      	mov	r2, r0
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	1ad3      	subs	r3, r2, r3
 800da64:	f241 3288 	movw	r2, #5000	; 0x1388
 800da68:	4293      	cmp	r3, r2
 800da6a:	d901      	bls.n	800da70 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800da6c:	2303      	movs	r3, #3
 800da6e:	e0bc      	b.n	800dbea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800da70:	4b61      	ldr	r3, [pc, #388]	; (800dbf8 <HAL_RCC_OscConfig+0x4d8>)
 800da72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da74:	f003 0302 	and.w	r3, r3, #2
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d0ee      	beq.n	800da5a <HAL_RCC_OscConfig+0x33a>
 800da7c:	e014      	b.n	800daa8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800da7e:	f7fd fe0d 	bl	800b69c <HAL_GetTick>
 800da82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800da84:	e00a      	b.n	800da9c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800da86:	f7fd fe09 	bl	800b69c <HAL_GetTick>
 800da8a:	4602      	mov	r2, r0
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	1ad3      	subs	r3, r2, r3
 800da90:	f241 3288 	movw	r2, #5000	; 0x1388
 800da94:	4293      	cmp	r3, r2
 800da96:	d901      	bls.n	800da9c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800da98:	2303      	movs	r3, #3
 800da9a:	e0a6      	b.n	800dbea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800da9c:	4b56      	ldr	r3, [pc, #344]	; (800dbf8 <HAL_RCC_OscConfig+0x4d8>)
 800da9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daa0:	f003 0302 	and.w	r3, r3, #2
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d1ee      	bne.n	800da86 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800daa8:	7dfb      	ldrb	r3, [r7, #23]
 800daaa:	2b01      	cmp	r3, #1
 800daac:	d105      	bne.n	800daba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800daae:	4b52      	ldr	r3, [pc, #328]	; (800dbf8 <HAL_RCC_OscConfig+0x4d8>)
 800dab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dab2:	4a51      	ldr	r2, [pc, #324]	; (800dbf8 <HAL_RCC_OscConfig+0x4d8>)
 800dab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dab8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	699b      	ldr	r3, [r3, #24]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	f000 8092 	beq.w	800dbe8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800dac4:	4b4c      	ldr	r3, [pc, #304]	; (800dbf8 <HAL_RCC_OscConfig+0x4d8>)
 800dac6:	689b      	ldr	r3, [r3, #8]
 800dac8:	f003 030c 	and.w	r3, r3, #12
 800dacc:	2b08      	cmp	r3, #8
 800dace:	d05c      	beq.n	800db8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	699b      	ldr	r3, [r3, #24]
 800dad4:	2b02      	cmp	r3, #2
 800dad6:	d141      	bne.n	800db5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dad8:	4b48      	ldr	r3, [pc, #288]	; (800dbfc <HAL_RCC_OscConfig+0x4dc>)
 800dada:	2200      	movs	r2, #0
 800dadc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dade:	f7fd fddd 	bl	800b69c <HAL_GetTick>
 800dae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dae4:	e008      	b.n	800daf8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dae6:	f7fd fdd9 	bl	800b69c <HAL_GetTick>
 800daea:	4602      	mov	r2, r0
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	1ad3      	subs	r3, r2, r3
 800daf0:	2b02      	cmp	r3, #2
 800daf2:	d901      	bls.n	800daf8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800daf4:	2303      	movs	r3, #3
 800daf6:	e078      	b.n	800dbea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800daf8:	4b3f      	ldr	r3, [pc, #252]	; (800dbf8 <HAL_RCC_OscConfig+0x4d8>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db00:	2b00      	cmp	r3, #0
 800db02:	d1f0      	bne.n	800dae6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	69da      	ldr	r2, [r3, #28]
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6a1b      	ldr	r3, [r3, #32]
 800db0c:	431a      	orrs	r2, r3
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db12:	019b      	lsls	r3, r3, #6
 800db14:	431a      	orrs	r2, r3
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db1a:	085b      	lsrs	r3, r3, #1
 800db1c:	3b01      	subs	r3, #1
 800db1e:	041b      	lsls	r3, r3, #16
 800db20:	431a      	orrs	r2, r3
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db26:	061b      	lsls	r3, r3, #24
 800db28:	4933      	ldr	r1, [pc, #204]	; (800dbf8 <HAL_RCC_OscConfig+0x4d8>)
 800db2a:	4313      	orrs	r3, r2
 800db2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800db2e:	4b33      	ldr	r3, [pc, #204]	; (800dbfc <HAL_RCC_OscConfig+0x4dc>)
 800db30:	2201      	movs	r2, #1
 800db32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800db34:	f7fd fdb2 	bl	800b69c <HAL_GetTick>
 800db38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800db3a:	e008      	b.n	800db4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800db3c:	f7fd fdae 	bl	800b69c <HAL_GetTick>
 800db40:	4602      	mov	r2, r0
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	1ad3      	subs	r3, r2, r3
 800db46:	2b02      	cmp	r3, #2
 800db48:	d901      	bls.n	800db4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800db4a:	2303      	movs	r3, #3
 800db4c:	e04d      	b.n	800dbea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800db4e:	4b2a      	ldr	r3, [pc, #168]	; (800dbf8 <HAL_RCC_OscConfig+0x4d8>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db56:	2b00      	cmp	r3, #0
 800db58:	d0f0      	beq.n	800db3c <HAL_RCC_OscConfig+0x41c>
 800db5a:	e045      	b.n	800dbe8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800db5c:	4b27      	ldr	r3, [pc, #156]	; (800dbfc <HAL_RCC_OscConfig+0x4dc>)
 800db5e:	2200      	movs	r2, #0
 800db60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800db62:	f7fd fd9b 	bl	800b69c <HAL_GetTick>
 800db66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800db68:	e008      	b.n	800db7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800db6a:	f7fd fd97 	bl	800b69c <HAL_GetTick>
 800db6e:	4602      	mov	r2, r0
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	1ad3      	subs	r3, r2, r3
 800db74:	2b02      	cmp	r3, #2
 800db76:	d901      	bls.n	800db7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800db78:	2303      	movs	r3, #3
 800db7a:	e036      	b.n	800dbea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800db7c:	4b1e      	ldr	r3, [pc, #120]	; (800dbf8 <HAL_RCC_OscConfig+0x4d8>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db84:	2b00      	cmp	r3, #0
 800db86:	d1f0      	bne.n	800db6a <HAL_RCC_OscConfig+0x44a>
 800db88:	e02e      	b.n	800dbe8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	699b      	ldr	r3, [r3, #24]
 800db8e:	2b01      	cmp	r3, #1
 800db90:	d101      	bne.n	800db96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800db92:	2301      	movs	r3, #1
 800db94:	e029      	b.n	800dbea <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800db96:	4b18      	ldr	r3, [pc, #96]	; (800dbf8 <HAL_RCC_OscConfig+0x4d8>)
 800db98:	685b      	ldr	r3, [r3, #4]
 800db9a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	69db      	ldr	r3, [r3, #28]
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d11c      	bne.n	800dbe4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d115      	bne.n	800dbe4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800dbb8:	68fa      	ldr	r2, [r7, #12]
 800dbba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800dbbe:	4013      	ands	r3, r2
 800dbc0:	687a      	ldr	r2, [r7, #4]
 800dbc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	d10d      	bne.n	800dbe4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d106      	bne.n	800dbe4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d001      	beq.n	800dbe8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	e000      	b.n	800dbea <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800dbe8:	2300      	movs	r3, #0
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3718      	adds	r7, #24
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	40007000 	.word	0x40007000
 800dbf8:	40023800 	.word	0x40023800
 800dbfc:	42470060 	.word	0x42470060

0800dc00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d101      	bne.n	800dc14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800dc10:	2301      	movs	r3, #1
 800dc12:	e0cc      	b.n	800ddae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800dc14:	4b68      	ldr	r3, [pc, #416]	; (800ddb8 <HAL_RCC_ClockConfig+0x1b8>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	f003 030f 	and.w	r3, r3, #15
 800dc1c:	683a      	ldr	r2, [r7, #0]
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d90c      	bls.n	800dc3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dc22:	4b65      	ldr	r3, [pc, #404]	; (800ddb8 <HAL_RCC_ClockConfig+0x1b8>)
 800dc24:	683a      	ldr	r2, [r7, #0]
 800dc26:	b2d2      	uxtb	r2, r2
 800dc28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dc2a:	4b63      	ldr	r3, [pc, #396]	; (800ddb8 <HAL_RCC_ClockConfig+0x1b8>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	f003 030f 	and.w	r3, r3, #15
 800dc32:	683a      	ldr	r2, [r7, #0]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d001      	beq.n	800dc3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	e0b8      	b.n	800ddae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	f003 0302 	and.w	r3, r3, #2
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d020      	beq.n	800dc8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	f003 0304 	and.w	r3, r3, #4
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d005      	beq.n	800dc60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dc54:	4b59      	ldr	r3, [pc, #356]	; (800ddbc <HAL_RCC_ClockConfig+0x1bc>)
 800dc56:	689b      	ldr	r3, [r3, #8]
 800dc58:	4a58      	ldr	r2, [pc, #352]	; (800ddbc <HAL_RCC_ClockConfig+0x1bc>)
 800dc5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800dc5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f003 0308 	and.w	r3, r3, #8
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d005      	beq.n	800dc78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800dc6c:	4b53      	ldr	r3, [pc, #332]	; (800ddbc <HAL_RCC_ClockConfig+0x1bc>)
 800dc6e:	689b      	ldr	r3, [r3, #8]
 800dc70:	4a52      	ldr	r2, [pc, #328]	; (800ddbc <HAL_RCC_ClockConfig+0x1bc>)
 800dc72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800dc76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dc78:	4b50      	ldr	r3, [pc, #320]	; (800ddbc <HAL_RCC_ClockConfig+0x1bc>)
 800dc7a:	689b      	ldr	r3, [r3, #8]
 800dc7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	689b      	ldr	r3, [r3, #8]
 800dc84:	494d      	ldr	r1, [pc, #308]	; (800ddbc <HAL_RCC_ClockConfig+0x1bc>)
 800dc86:	4313      	orrs	r3, r2
 800dc88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f003 0301 	and.w	r3, r3, #1
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d044      	beq.n	800dd20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	2b01      	cmp	r3, #1
 800dc9c:	d107      	bne.n	800dcae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dc9e:	4b47      	ldr	r3, [pc, #284]	; (800ddbc <HAL_RCC_ClockConfig+0x1bc>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d119      	bne.n	800dcde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dcaa:	2301      	movs	r3, #1
 800dcac:	e07f      	b.n	800ddae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	685b      	ldr	r3, [r3, #4]
 800dcb2:	2b02      	cmp	r3, #2
 800dcb4:	d003      	beq.n	800dcbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dcba:	2b03      	cmp	r3, #3
 800dcbc:	d107      	bne.n	800dcce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dcbe:	4b3f      	ldr	r3, [pc, #252]	; (800ddbc <HAL_RCC_ClockConfig+0x1bc>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d109      	bne.n	800dcde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dcca:	2301      	movs	r3, #1
 800dccc:	e06f      	b.n	800ddae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dcce:	4b3b      	ldr	r3, [pc, #236]	; (800ddbc <HAL_RCC_ClockConfig+0x1bc>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f003 0302 	and.w	r3, r3, #2
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d101      	bne.n	800dcde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dcda:	2301      	movs	r3, #1
 800dcdc:	e067      	b.n	800ddae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dcde:	4b37      	ldr	r3, [pc, #220]	; (800ddbc <HAL_RCC_ClockConfig+0x1bc>)
 800dce0:	689b      	ldr	r3, [r3, #8]
 800dce2:	f023 0203 	bic.w	r2, r3, #3
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	4934      	ldr	r1, [pc, #208]	; (800ddbc <HAL_RCC_ClockConfig+0x1bc>)
 800dcec:	4313      	orrs	r3, r2
 800dcee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800dcf0:	f7fd fcd4 	bl	800b69c <HAL_GetTick>
 800dcf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dcf6:	e00a      	b.n	800dd0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dcf8:	f7fd fcd0 	bl	800b69c <HAL_GetTick>
 800dcfc:	4602      	mov	r2, r0
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	1ad3      	subs	r3, r2, r3
 800dd02:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd06:	4293      	cmp	r3, r2
 800dd08:	d901      	bls.n	800dd0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800dd0a:	2303      	movs	r3, #3
 800dd0c:	e04f      	b.n	800ddae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dd0e:	4b2b      	ldr	r3, [pc, #172]	; (800ddbc <HAL_RCC_ClockConfig+0x1bc>)
 800dd10:	689b      	ldr	r3, [r3, #8]
 800dd12:	f003 020c 	and.w	r2, r3, #12
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	685b      	ldr	r3, [r3, #4]
 800dd1a:	009b      	lsls	r3, r3, #2
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d1eb      	bne.n	800dcf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800dd20:	4b25      	ldr	r3, [pc, #148]	; (800ddb8 <HAL_RCC_ClockConfig+0x1b8>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	f003 030f 	and.w	r3, r3, #15
 800dd28:	683a      	ldr	r2, [r7, #0]
 800dd2a:	429a      	cmp	r2, r3
 800dd2c:	d20c      	bcs.n	800dd48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dd2e:	4b22      	ldr	r3, [pc, #136]	; (800ddb8 <HAL_RCC_ClockConfig+0x1b8>)
 800dd30:	683a      	ldr	r2, [r7, #0]
 800dd32:	b2d2      	uxtb	r2, r2
 800dd34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dd36:	4b20      	ldr	r3, [pc, #128]	; (800ddb8 <HAL_RCC_ClockConfig+0x1b8>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f003 030f 	and.w	r3, r3, #15
 800dd3e:	683a      	ldr	r2, [r7, #0]
 800dd40:	429a      	cmp	r2, r3
 800dd42:	d001      	beq.n	800dd48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800dd44:	2301      	movs	r3, #1
 800dd46:	e032      	b.n	800ddae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	f003 0304 	and.w	r3, r3, #4
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d008      	beq.n	800dd66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800dd54:	4b19      	ldr	r3, [pc, #100]	; (800ddbc <HAL_RCC_ClockConfig+0x1bc>)
 800dd56:	689b      	ldr	r3, [r3, #8]
 800dd58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	68db      	ldr	r3, [r3, #12]
 800dd60:	4916      	ldr	r1, [pc, #88]	; (800ddbc <HAL_RCC_ClockConfig+0x1bc>)
 800dd62:	4313      	orrs	r3, r2
 800dd64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	f003 0308 	and.w	r3, r3, #8
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d009      	beq.n	800dd86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800dd72:	4b12      	ldr	r3, [pc, #72]	; (800ddbc <HAL_RCC_ClockConfig+0x1bc>)
 800dd74:	689b      	ldr	r3, [r3, #8]
 800dd76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	691b      	ldr	r3, [r3, #16]
 800dd7e:	00db      	lsls	r3, r3, #3
 800dd80:	490e      	ldr	r1, [pc, #56]	; (800ddbc <HAL_RCC_ClockConfig+0x1bc>)
 800dd82:	4313      	orrs	r3, r2
 800dd84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800dd86:	f000 f821 	bl	800ddcc <HAL_RCC_GetSysClockFreq>
 800dd8a:	4602      	mov	r2, r0
 800dd8c:	4b0b      	ldr	r3, [pc, #44]	; (800ddbc <HAL_RCC_ClockConfig+0x1bc>)
 800dd8e:	689b      	ldr	r3, [r3, #8]
 800dd90:	091b      	lsrs	r3, r3, #4
 800dd92:	f003 030f 	and.w	r3, r3, #15
 800dd96:	490a      	ldr	r1, [pc, #40]	; (800ddc0 <HAL_RCC_ClockConfig+0x1c0>)
 800dd98:	5ccb      	ldrb	r3, [r1, r3]
 800dd9a:	fa22 f303 	lsr.w	r3, r2, r3
 800dd9e:	4a09      	ldr	r2, [pc, #36]	; (800ddc4 <HAL_RCC_ClockConfig+0x1c4>)
 800dda0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800dda2:	4b09      	ldr	r3, [pc, #36]	; (800ddc8 <HAL_RCC_ClockConfig+0x1c8>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7fd f8ee 	bl	800af88 <HAL_InitTick>

  return HAL_OK;
 800ddac:	2300      	movs	r3, #0
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3710      	adds	r7, #16
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	40023c00 	.word	0x40023c00
 800ddbc:	40023800 	.word	0x40023800
 800ddc0:	0801c4f0 	.word	0x0801c4f0
 800ddc4:	2000408c 	.word	0x2000408c
 800ddc8:	20004090 	.word	0x20004090

0800ddcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ddcc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ddd0:	b084      	sub	sp, #16
 800ddd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	607b      	str	r3, [r7, #4]
 800ddd8:	2300      	movs	r3, #0
 800ddda:	60fb      	str	r3, [r7, #12]
 800dddc:	2300      	movs	r3, #0
 800ddde:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800dde0:	2300      	movs	r3, #0
 800dde2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dde4:	4b67      	ldr	r3, [pc, #412]	; (800df84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800dde6:	689b      	ldr	r3, [r3, #8]
 800dde8:	f003 030c 	and.w	r3, r3, #12
 800ddec:	2b08      	cmp	r3, #8
 800ddee:	d00d      	beq.n	800de0c <HAL_RCC_GetSysClockFreq+0x40>
 800ddf0:	2b08      	cmp	r3, #8
 800ddf2:	f200 80bd 	bhi.w	800df70 <HAL_RCC_GetSysClockFreq+0x1a4>
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d002      	beq.n	800de00 <HAL_RCC_GetSysClockFreq+0x34>
 800ddfa:	2b04      	cmp	r3, #4
 800ddfc:	d003      	beq.n	800de06 <HAL_RCC_GetSysClockFreq+0x3a>
 800ddfe:	e0b7      	b.n	800df70 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800de00:	4b61      	ldr	r3, [pc, #388]	; (800df88 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800de02:	60bb      	str	r3, [r7, #8]
       break;
 800de04:	e0b7      	b.n	800df76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800de06:	4b61      	ldr	r3, [pc, #388]	; (800df8c <HAL_RCC_GetSysClockFreq+0x1c0>)
 800de08:	60bb      	str	r3, [r7, #8]
      break;
 800de0a:	e0b4      	b.n	800df76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800de0c:	4b5d      	ldr	r3, [pc, #372]	; (800df84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800de0e:	685b      	ldr	r3, [r3, #4]
 800de10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de14:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800de16:	4b5b      	ldr	r3, [pc, #364]	; (800df84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800de18:	685b      	ldr	r3, [r3, #4]
 800de1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d04d      	beq.n	800debe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800de22:	4b58      	ldr	r3, [pc, #352]	; (800df84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800de24:	685b      	ldr	r3, [r3, #4]
 800de26:	099b      	lsrs	r3, r3, #6
 800de28:	461a      	mov	r2, r3
 800de2a:	f04f 0300 	mov.w	r3, #0
 800de2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800de32:	f04f 0100 	mov.w	r1, #0
 800de36:	ea02 0800 	and.w	r8, r2, r0
 800de3a:	ea03 0901 	and.w	r9, r3, r1
 800de3e:	4640      	mov	r0, r8
 800de40:	4649      	mov	r1, r9
 800de42:	f04f 0200 	mov.w	r2, #0
 800de46:	f04f 0300 	mov.w	r3, #0
 800de4a:	014b      	lsls	r3, r1, #5
 800de4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800de50:	0142      	lsls	r2, r0, #5
 800de52:	4610      	mov	r0, r2
 800de54:	4619      	mov	r1, r3
 800de56:	ebb0 0008 	subs.w	r0, r0, r8
 800de5a:	eb61 0109 	sbc.w	r1, r1, r9
 800de5e:	f04f 0200 	mov.w	r2, #0
 800de62:	f04f 0300 	mov.w	r3, #0
 800de66:	018b      	lsls	r3, r1, #6
 800de68:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800de6c:	0182      	lsls	r2, r0, #6
 800de6e:	1a12      	subs	r2, r2, r0
 800de70:	eb63 0301 	sbc.w	r3, r3, r1
 800de74:	f04f 0000 	mov.w	r0, #0
 800de78:	f04f 0100 	mov.w	r1, #0
 800de7c:	00d9      	lsls	r1, r3, #3
 800de7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800de82:	00d0      	lsls	r0, r2, #3
 800de84:	4602      	mov	r2, r0
 800de86:	460b      	mov	r3, r1
 800de88:	eb12 0208 	adds.w	r2, r2, r8
 800de8c:	eb43 0309 	adc.w	r3, r3, r9
 800de90:	f04f 0000 	mov.w	r0, #0
 800de94:	f04f 0100 	mov.w	r1, #0
 800de98:	0259      	lsls	r1, r3, #9
 800de9a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800de9e:	0250      	lsls	r0, r2, #9
 800dea0:	4602      	mov	r2, r0
 800dea2:	460b      	mov	r3, r1
 800dea4:	4610      	mov	r0, r2
 800dea6:	4619      	mov	r1, r3
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	461a      	mov	r2, r3
 800deac:	f04f 0300 	mov.w	r3, #0
 800deb0:	f7f2 feea 	bl	8000c88 <__aeabi_uldivmod>
 800deb4:	4602      	mov	r2, r0
 800deb6:	460b      	mov	r3, r1
 800deb8:	4613      	mov	r3, r2
 800deba:	60fb      	str	r3, [r7, #12]
 800debc:	e04a      	b.n	800df54 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800debe:	4b31      	ldr	r3, [pc, #196]	; (800df84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	099b      	lsrs	r3, r3, #6
 800dec4:	461a      	mov	r2, r3
 800dec6:	f04f 0300 	mov.w	r3, #0
 800deca:	f240 10ff 	movw	r0, #511	; 0x1ff
 800dece:	f04f 0100 	mov.w	r1, #0
 800ded2:	ea02 0400 	and.w	r4, r2, r0
 800ded6:	ea03 0501 	and.w	r5, r3, r1
 800deda:	4620      	mov	r0, r4
 800dedc:	4629      	mov	r1, r5
 800dede:	f04f 0200 	mov.w	r2, #0
 800dee2:	f04f 0300 	mov.w	r3, #0
 800dee6:	014b      	lsls	r3, r1, #5
 800dee8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800deec:	0142      	lsls	r2, r0, #5
 800deee:	4610      	mov	r0, r2
 800def0:	4619      	mov	r1, r3
 800def2:	1b00      	subs	r0, r0, r4
 800def4:	eb61 0105 	sbc.w	r1, r1, r5
 800def8:	f04f 0200 	mov.w	r2, #0
 800defc:	f04f 0300 	mov.w	r3, #0
 800df00:	018b      	lsls	r3, r1, #6
 800df02:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800df06:	0182      	lsls	r2, r0, #6
 800df08:	1a12      	subs	r2, r2, r0
 800df0a:	eb63 0301 	sbc.w	r3, r3, r1
 800df0e:	f04f 0000 	mov.w	r0, #0
 800df12:	f04f 0100 	mov.w	r1, #0
 800df16:	00d9      	lsls	r1, r3, #3
 800df18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800df1c:	00d0      	lsls	r0, r2, #3
 800df1e:	4602      	mov	r2, r0
 800df20:	460b      	mov	r3, r1
 800df22:	1912      	adds	r2, r2, r4
 800df24:	eb45 0303 	adc.w	r3, r5, r3
 800df28:	f04f 0000 	mov.w	r0, #0
 800df2c:	f04f 0100 	mov.w	r1, #0
 800df30:	0299      	lsls	r1, r3, #10
 800df32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800df36:	0290      	lsls	r0, r2, #10
 800df38:	4602      	mov	r2, r0
 800df3a:	460b      	mov	r3, r1
 800df3c:	4610      	mov	r0, r2
 800df3e:	4619      	mov	r1, r3
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	461a      	mov	r2, r3
 800df44:	f04f 0300 	mov.w	r3, #0
 800df48:	f7f2 fe9e 	bl	8000c88 <__aeabi_uldivmod>
 800df4c:	4602      	mov	r2, r0
 800df4e:	460b      	mov	r3, r1
 800df50:	4613      	mov	r3, r2
 800df52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800df54:	4b0b      	ldr	r3, [pc, #44]	; (800df84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800df56:	685b      	ldr	r3, [r3, #4]
 800df58:	0c1b      	lsrs	r3, r3, #16
 800df5a:	f003 0303 	and.w	r3, r3, #3
 800df5e:	3301      	adds	r3, #1
 800df60:	005b      	lsls	r3, r3, #1
 800df62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800df64:	68fa      	ldr	r2, [r7, #12]
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	fbb2 f3f3 	udiv	r3, r2, r3
 800df6c:	60bb      	str	r3, [r7, #8]
      break;
 800df6e:	e002      	b.n	800df76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800df70:	4b05      	ldr	r3, [pc, #20]	; (800df88 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800df72:	60bb      	str	r3, [r7, #8]
      break;
 800df74:	bf00      	nop
    }
  }
  return sysclockfreq;
 800df76:	68bb      	ldr	r3, [r7, #8]
}
 800df78:	4618      	mov	r0, r3
 800df7a:	3710      	adds	r7, #16
 800df7c:	46bd      	mov	sp, r7
 800df7e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800df82:	bf00      	nop
 800df84:	40023800 	.word	0x40023800
 800df88:	00f42400 	.word	0x00f42400
 800df8c:	007a1200 	.word	0x007a1200

0800df90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800df90:	b480      	push	{r7}
 800df92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800df94:	4b03      	ldr	r3, [pc, #12]	; (800dfa4 <HAL_RCC_GetHCLKFreq+0x14>)
 800df96:	681b      	ldr	r3, [r3, #0]
}
 800df98:	4618      	mov	r0, r3
 800df9a:	46bd      	mov	sp, r7
 800df9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa0:	4770      	bx	lr
 800dfa2:	bf00      	nop
 800dfa4:	2000408c 	.word	0x2000408c

0800dfa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800dfac:	f7ff fff0 	bl	800df90 <HAL_RCC_GetHCLKFreq>
 800dfb0:	4602      	mov	r2, r0
 800dfb2:	4b05      	ldr	r3, [pc, #20]	; (800dfc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800dfb4:	689b      	ldr	r3, [r3, #8]
 800dfb6:	0a9b      	lsrs	r3, r3, #10
 800dfb8:	f003 0307 	and.w	r3, r3, #7
 800dfbc:	4903      	ldr	r1, [pc, #12]	; (800dfcc <HAL_RCC_GetPCLK1Freq+0x24>)
 800dfbe:	5ccb      	ldrb	r3, [r1, r3]
 800dfc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	bd80      	pop	{r7, pc}
 800dfc8:	40023800 	.word	0x40023800
 800dfcc:	0801c500 	.word	0x0801c500

0800dfd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800dfd4:	f7ff ffdc 	bl	800df90 <HAL_RCC_GetHCLKFreq>
 800dfd8:	4602      	mov	r2, r0
 800dfda:	4b05      	ldr	r3, [pc, #20]	; (800dff0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800dfdc:	689b      	ldr	r3, [r3, #8]
 800dfde:	0b5b      	lsrs	r3, r3, #13
 800dfe0:	f003 0307 	and.w	r3, r3, #7
 800dfe4:	4903      	ldr	r1, [pc, #12]	; (800dff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800dfe6:	5ccb      	ldrb	r3, [r1, r3]
 800dfe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	bd80      	pop	{r7, pc}
 800dff0:	40023800 	.word	0x40023800
 800dff4:	0801c500 	.word	0x0801c500

0800dff8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800dff8:	b480      	push	{r7}
 800dffa:	b083      	sub	sp, #12
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	220f      	movs	r2, #15
 800e006:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e008:	4b12      	ldr	r3, [pc, #72]	; (800e054 <HAL_RCC_GetClockConfig+0x5c>)
 800e00a:	689b      	ldr	r3, [r3, #8]
 800e00c:	f003 0203 	and.w	r2, r3, #3
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e014:	4b0f      	ldr	r3, [pc, #60]	; (800e054 <HAL_RCC_GetClockConfig+0x5c>)
 800e016:	689b      	ldr	r3, [r3, #8]
 800e018:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e020:	4b0c      	ldr	r3, [pc, #48]	; (800e054 <HAL_RCC_GetClockConfig+0x5c>)
 800e022:	689b      	ldr	r3, [r3, #8]
 800e024:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800e02c:	4b09      	ldr	r3, [pc, #36]	; (800e054 <HAL_RCC_GetClockConfig+0x5c>)
 800e02e:	689b      	ldr	r3, [r3, #8]
 800e030:	08db      	lsrs	r3, r3, #3
 800e032:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e03a:	4b07      	ldr	r3, [pc, #28]	; (800e058 <HAL_RCC_GetClockConfig+0x60>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	f003 020f 	and.w	r2, r3, #15
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	601a      	str	r2, [r3, #0]
}
 800e046:	bf00      	nop
 800e048:	370c      	adds	r7, #12
 800e04a:	46bd      	mov	sp, r7
 800e04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e050:	4770      	bx	lr
 800e052:	bf00      	nop
 800e054:	40023800 	.word	0x40023800
 800e058:	40023c00 	.word	0x40023c00

0800e05c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b082      	sub	sp, #8
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d101      	bne.n	800e06e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e06a:	2301      	movs	r3, #1
 800e06c:	e01d      	b.n	800e0aa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e074:	b2db      	uxtb	r3, r3
 800e076:	2b00      	cmp	r3, #0
 800e078:	d106      	bne.n	800e088 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2200      	movs	r2, #0
 800e07e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f7fd f99a 	bl	800b3bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2202      	movs	r2, #2
 800e08c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681a      	ldr	r2, [r3, #0]
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	3304      	adds	r3, #4
 800e098:	4619      	mov	r1, r3
 800e09a:	4610      	mov	r0, r2
 800e09c:	f000 fa46 	bl	800e52c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e0a8:	2300      	movs	r3, #0
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3708      	adds	r7, #8
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}

0800e0b2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e0b2:	b480      	push	{r7}
 800e0b4:	b085      	sub	sp, #20
 800e0b6:	af00      	add	r7, sp, #0
 800e0b8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2202      	movs	r2, #2
 800e0be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	689b      	ldr	r3, [r3, #8]
 800e0c8:	f003 0307 	and.w	r3, r3, #7
 800e0cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2b06      	cmp	r3, #6
 800e0d2:	d007      	beq.n	800e0e4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	681a      	ldr	r2, [r3, #0]
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	f042 0201 	orr.w	r2, r2, #1
 800e0e2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2201      	movs	r2, #1
 800e0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e0ec:	2300      	movs	r3, #0
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3714      	adds	r7, #20
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f8:	4770      	bx	lr

0800e0fa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e0fa:	b480      	push	{r7}
 800e0fc:	b085      	sub	sp, #20
 800e0fe:	af00      	add	r7, sp, #0
 800e100:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	68da      	ldr	r2, [r3, #12]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f042 0201 	orr.w	r2, r2, #1
 800e110:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	689b      	ldr	r3, [r3, #8]
 800e118:	f003 0307 	and.w	r3, r3, #7
 800e11c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	2b06      	cmp	r3, #6
 800e122:	d007      	beq.n	800e134 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	681a      	ldr	r2, [r3, #0]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	f042 0201 	orr.w	r2, r2, #1
 800e132:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e134:	2300      	movs	r3, #0
}
 800e136:	4618      	mov	r0, r3
 800e138:	3714      	adds	r7, #20
 800e13a:	46bd      	mov	sp, r7
 800e13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e140:	4770      	bx	lr

0800e142 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e142:	b580      	push	{r7, lr}
 800e144:	b082      	sub	sp, #8
 800e146:	af00      	add	r7, sp, #0
 800e148:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	691b      	ldr	r3, [r3, #16]
 800e150:	f003 0302 	and.w	r3, r3, #2
 800e154:	2b02      	cmp	r3, #2
 800e156:	d122      	bne.n	800e19e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	68db      	ldr	r3, [r3, #12]
 800e15e:	f003 0302 	and.w	r3, r3, #2
 800e162:	2b02      	cmp	r3, #2
 800e164:	d11b      	bne.n	800e19e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	f06f 0202 	mvn.w	r2, #2
 800e16e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2201      	movs	r2, #1
 800e174:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	699b      	ldr	r3, [r3, #24]
 800e17c:	f003 0303 	and.w	r3, r3, #3
 800e180:	2b00      	cmp	r3, #0
 800e182:	d003      	beq.n	800e18c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f000 f9b2 	bl	800e4ee <HAL_TIM_IC_CaptureCallback>
 800e18a:	e005      	b.n	800e198 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f000 f9a4 	bl	800e4da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f000 f9b5 	bl	800e502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2200      	movs	r2, #0
 800e19c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	691b      	ldr	r3, [r3, #16]
 800e1a4:	f003 0304 	and.w	r3, r3, #4
 800e1a8:	2b04      	cmp	r3, #4
 800e1aa:	d122      	bne.n	800e1f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	68db      	ldr	r3, [r3, #12]
 800e1b2:	f003 0304 	and.w	r3, r3, #4
 800e1b6:	2b04      	cmp	r3, #4
 800e1b8:	d11b      	bne.n	800e1f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	f06f 0204 	mvn.w	r2, #4
 800e1c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2202      	movs	r2, #2
 800e1c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	699b      	ldr	r3, [r3, #24]
 800e1d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d003      	beq.n	800e1e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f000 f988 	bl	800e4ee <HAL_TIM_IC_CaptureCallback>
 800e1de:	e005      	b.n	800e1ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f000 f97a 	bl	800e4da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f000 f98b 	bl	800e502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	691b      	ldr	r3, [r3, #16]
 800e1f8:	f003 0308 	and.w	r3, r3, #8
 800e1fc:	2b08      	cmp	r3, #8
 800e1fe:	d122      	bne.n	800e246 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	68db      	ldr	r3, [r3, #12]
 800e206:	f003 0308 	and.w	r3, r3, #8
 800e20a:	2b08      	cmp	r3, #8
 800e20c:	d11b      	bne.n	800e246 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	f06f 0208 	mvn.w	r2, #8
 800e216:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2204      	movs	r2, #4
 800e21c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	69db      	ldr	r3, [r3, #28]
 800e224:	f003 0303 	and.w	r3, r3, #3
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d003      	beq.n	800e234 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f000 f95e 	bl	800e4ee <HAL_TIM_IC_CaptureCallback>
 800e232:	e005      	b.n	800e240 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f000 f950 	bl	800e4da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f000 f961 	bl	800e502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2200      	movs	r2, #0
 800e244:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	691b      	ldr	r3, [r3, #16]
 800e24c:	f003 0310 	and.w	r3, r3, #16
 800e250:	2b10      	cmp	r3, #16
 800e252:	d122      	bne.n	800e29a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	68db      	ldr	r3, [r3, #12]
 800e25a:	f003 0310 	and.w	r3, r3, #16
 800e25e:	2b10      	cmp	r3, #16
 800e260:	d11b      	bne.n	800e29a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f06f 0210 	mvn.w	r2, #16
 800e26a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2208      	movs	r2, #8
 800e270:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	69db      	ldr	r3, [r3, #28]
 800e278:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d003      	beq.n	800e288 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f000 f934 	bl	800e4ee <HAL_TIM_IC_CaptureCallback>
 800e286:	e005      	b.n	800e294 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f000 f926 	bl	800e4da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f000 f937 	bl	800e502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2200      	movs	r2, #0
 800e298:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	691b      	ldr	r3, [r3, #16]
 800e2a0:	f003 0301 	and.w	r3, r3, #1
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	d10e      	bne.n	800e2c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	68db      	ldr	r3, [r3, #12]
 800e2ae:	f003 0301 	and.w	r3, r3, #1
 800e2b2:	2b01      	cmp	r3, #1
 800e2b4:	d107      	bne.n	800e2c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f06f 0201 	mvn.w	r2, #1
 800e2be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f7f7 fb4d 	bl	8005960 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	691b      	ldr	r3, [r3, #16]
 800e2cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2d0:	2b80      	cmp	r3, #128	; 0x80
 800e2d2:	d10e      	bne.n	800e2f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	68db      	ldr	r3, [r3, #12]
 800e2da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2de:	2b80      	cmp	r3, #128	; 0x80
 800e2e0:	d107      	bne.n	800e2f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e2ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f000 fadd 	bl	800e8ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	691b      	ldr	r3, [r3, #16]
 800e2f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2fc:	2b40      	cmp	r3, #64	; 0x40
 800e2fe:	d10e      	bne.n	800e31e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	68db      	ldr	r3, [r3, #12]
 800e306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e30a:	2b40      	cmp	r3, #64	; 0x40
 800e30c:	d107      	bne.n	800e31e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f000 f8fc 	bl	800e516 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	691b      	ldr	r3, [r3, #16]
 800e324:	f003 0320 	and.w	r3, r3, #32
 800e328:	2b20      	cmp	r3, #32
 800e32a:	d10e      	bne.n	800e34a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	68db      	ldr	r3, [r3, #12]
 800e332:	f003 0320 	and.w	r3, r3, #32
 800e336:	2b20      	cmp	r3, #32
 800e338:	d107      	bne.n	800e34a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	f06f 0220 	mvn.w	r2, #32
 800e342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f000 faa7 	bl	800e898 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e34a:	bf00      	nop
 800e34c:	3708      	adds	r7, #8
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}

0800e352 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e352:	b580      	push	{r7, lr}
 800e354:	b084      	sub	sp, #16
 800e356:	af00      	add	r7, sp, #0
 800e358:	6078      	str	r0, [r7, #4]
 800e35a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e362:	2b01      	cmp	r3, #1
 800e364:	d101      	bne.n	800e36a <HAL_TIM_ConfigClockSource+0x18>
 800e366:	2302      	movs	r3, #2
 800e368:	e0b3      	b.n	800e4d2 <HAL_TIM_ConfigClockSource+0x180>
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2201      	movs	r2, #1
 800e36e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2202      	movs	r2, #2
 800e376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	689b      	ldr	r3, [r3, #8]
 800e380:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e388:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e390:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	68fa      	ldr	r2, [r7, #12]
 800e398:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e3a2:	d03e      	beq.n	800e422 <HAL_TIM_ConfigClockSource+0xd0>
 800e3a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e3a8:	f200 8087 	bhi.w	800e4ba <HAL_TIM_ConfigClockSource+0x168>
 800e3ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3b0:	f000 8085 	beq.w	800e4be <HAL_TIM_ConfigClockSource+0x16c>
 800e3b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3b8:	d87f      	bhi.n	800e4ba <HAL_TIM_ConfigClockSource+0x168>
 800e3ba:	2b70      	cmp	r3, #112	; 0x70
 800e3bc:	d01a      	beq.n	800e3f4 <HAL_TIM_ConfigClockSource+0xa2>
 800e3be:	2b70      	cmp	r3, #112	; 0x70
 800e3c0:	d87b      	bhi.n	800e4ba <HAL_TIM_ConfigClockSource+0x168>
 800e3c2:	2b60      	cmp	r3, #96	; 0x60
 800e3c4:	d050      	beq.n	800e468 <HAL_TIM_ConfigClockSource+0x116>
 800e3c6:	2b60      	cmp	r3, #96	; 0x60
 800e3c8:	d877      	bhi.n	800e4ba <HAL_TIM_ConfigClockSource+0x168>
 800e3ca:	2b50      	cmp	r3, #80	; 0x50
 800e3cc:	d03c      	beq.n	800e448 <HAL_TIM_ConfigClockSource+0xf6>
 800e3ce:	2b50      	cmp	r3, #80	; 0x50
 800e3d0:	d873      	bhi.n	800e4ba <HAL_TIM_ConfigClockSource+0x168>
 800e3d2:	2b40      	cmp	r3, #64	; 0x40
 800e3d4:	d058      	beq.n	800e488 <HAL_TIM_ConfigClockSource+0x136>
 800e3d6:	2b40      	cmp	r3, #64	; 0x40
 800e3d8:	d86f      	bhi.n	800e4ba <HAL_TIM_ConfigClockSource+0x168>
 800e3da:	2b30      	cmp	r3, #48	; 0x30
 800e3dc:	d064      	beq.n	800e4a8 <HAL_TIM_ConfigClockSource+0x156>
 800e3de:	2b30      	cmp	r3, #48	; 0x30
 800e3e0:	d86b      	bhi.n	800e4ba <HAL_TIM_ConfigClockSource+0x168>
 800e3e2:	2b20      	cmp	r3, #32
 800e3e4:	d060      	beq.n	800e4a8 <HAL_TIM_ConfigClockSource+0x156>
 800e3e6:	2b20      	cmp	r3, #32
 800e3e8:	d867      	bhi.n	800e4ba <HAL_TIM_ConfigClockSource+0x168>
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d05c      	beq.n	800e4a8 <HAL_TIM_ConfigClockSource+0x156>
 800e3ee:	2b10      	cmp	r3, #16
 800e3f0:	d05a      	beq.n	800e4a8 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e3f2:	e062      	b.n	800e4ba <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6818      	ldr	r0, [r3, #0]
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	6899      	ldr	r1, [r3, #8]
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	685a      	ldr	r2, [r3, #4]
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	68db      	ldr	r3, [r3, #12]
 800e404:	f000 f9ac 	bl	800e760 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	689b      	ldr	r3, [r3, #8]
 800e40e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e416:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	68fa      	ldr	r2, [r7, #12]
 800e41e:	609a      	str	r2, [r3, #8]
      break;
 800e420:	e04e      	b.n	800e4c0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6818      	ldr	r0, [r3, #0]
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	6899      	ldr	r1, [r3, #8]
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	685a      	ldr	r2, [r3, #4]
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	68db      	ldr	r3, [r3, #12]
 800e432:	f000 f995 	bl	800e760 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	689a      	ldr	r2, [r3, #8]
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e444:	609a      	str	r2, [r3, #8]
      break;
 800e446:	e03b      	b.n	800e4c0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6818      	ldr	r0, [r3, #0]
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	6859      	ldr	r1, [r3, #4]
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	68db      	ldr	r3, [r3, #12]
 800e454:	461a      	mov	r2, r3
 800e456:	f000 f909 	bl	800e66c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	2150      	movs	r1, #80	; 0x50
 800e460:	4618      	mov	r0, r3
 800e462:	f000 f962 	bl	800e72a <TIM_ITRx_SetConfig>
      break;
 800e466:	e02b      	b.n	800e4c0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6818      	ldr	r0, [r3, #0]
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	6859      	ldr	r1, [r3, #4]
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	68db      	ldr	r3, [r3, #12]
 800e474:	461a      	mov	r2, r3
 800e476:	f000 f928 	bl	800e6ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	2160      	movs	r1, #96	; 0x60
 800e480:	4618      	mov	r0, r3
 800e482:	f000 f952 	bl	800e72a <TIM_ITRx_SetConfig>
      break;
 800e486:	e01b      	b.n	800e4c0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6818      	ldr	r0, [r3, #0]
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	6859      	ldr	r1, [r3, #4]
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	68db      	ldr	r3, [r3, #12]
 800e494:	461a      	mov	r2, r3
 800e496:	f000 f8e9 	bl	800e66c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	2140      	movs	r1, #64	; 0x40
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f000 f942 	bl	800e72a <TIM_ITRx_SetConfig>
      break;
 800e4a6:	e00b      	b.n	800e4c0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681a      	ldr	r2, [r3, #0]
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4619      	mov	r1, r3
 800e4b2:	4610      	mov	r0, r2
 800e4b4:	f000 f939 	bl	800e72a <TIM_ITRx_SetConfig>
      break;
 800e4b8:	e002      	b.n	800e4c0 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800e4ba:	bf00      	nop
 800e4bc:	e000      	b.n	800e4c0 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800e4be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e4d0:	2300      	movs	r3, #0
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3710      	adds	r7, #16
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}

0800e4da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e4da:	b480      	push	{r7}
 800e4dc:	b083      	sub	sp, #12
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e4e2:	bf00      	nop
 800e4e4:	370c      	adds	r7, #12
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ec:	4770      	bx	lr

0800e4ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e4ee:	b480      	push	{r7}
 800e4f0:	b083      	sub	sp, #12
 800e4f2:	af00      	add	r7, sp, #0
 800e4f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e4f6:	bf00      	nop
 800e4f8:	370c      	adds	r7, #12
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e500:	4770      	bx	lr

0800e502 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e502:	b480      	push	{r7}
 800e504:	b083      	sub	sp, #12
 800e506:	af00      	add	r7, sp, #0
 800e508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e50a:	bf00      	nop
 800e50c:	370c      	adds	r7, #12
 800e50e:	46bd      	mov	sp, r7
 800e510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e514:	4770      	bx	lr

0800e516 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e516:	b480      	push	{r7}
 800e518:	b083      	sub	sp, #12
 800e51a:	af00      	add	r7, sp, #0
 800e51c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e51e:	bf00      	nop
 800e520:	370c      	adds	r7, #12
 800e522:	46bd      	mov	sp, r7
 800e524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e528:	4770      	bx	lr
	...

0800e52c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e52c:	b480      	push	{r7}
 800e52e:	b085      	sub	sp, #20
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	4a40      	ldr	r2, [pc, #256]	; (800e640 <TIM_Base_SetConfig+0x114>)
 800e540:	4293      	cmp	r3, r2
 800e542:	d013      	beq.n	800e56c <TIM_Base_SetConfig+0x40>
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e54a:	d00f      	beq.n	800e56c <TIM_Base_SetConfig+0x40>
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	4a3d      	ldr	r2, [pc, #244]	; (800e644 <TIM_Base_SetConfig+0x118>)
 800e550:	4293      	cmp	r3, r2
 800e552:	d00b      	beq.n	800e56c <TIM_Base_SetConfig+0x40>
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	4a3c      	ldr	r2, [pc, #240]	; (800e648 <TIM_Base_SetConfig+0x11c>)
 800e558:	4293      	cmp	r3, r2
 800e55a:	d007      	beq.n	800e56c <TIM_Base_SetConfig+0x40>
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	4a3b      	ldr	r2, [pc, #236]	; (800e64c <TIM_Base_SetConfig+0x120>)
 800e560:	4293      	cmp	r3, r2
 800e562:	d003      	beq.n	800e56c <TIM_Base_SetConfig+0x40>
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	4a3a      	ldr	r2, [pc, #232]	; (800e650 <TIM_Base_SetConfig+0x124>)
 800e568:	4293      	cmp	r3, r2
 800e56a:	d108      	bne.n	800e57e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	685b      	ldr	r3, [r3, #4]
 800e578:	68fa      	ldr	r2, [r7, #12]
 800e57a:	4313      	orrs	r3, r2
 800e57c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	4a2f      	ldr	r2, [pc, #188]	; (800e640 <TIM_Base_SetConfig+0x114>)
 800e582:	4293      	cmp	r3, r2
 800e584:	d02b      	beq.n	800e5de <TIM_Base_SetConfig+0xb2>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e58c:	d027      	beq.n	800e5de <TIM_Base_SetConfig+0xb2>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	4a2c      	ldr	r2, [pc, #176]	; (800e644 <TIM_Base_SetConfig+0x118>)
 800e592:	4293      	cmp	r3, r2
 800e594:	d023      	beq.n	800e5de <TIM_Base_SetConfig+0xb2>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	4a2b      	ldr	r2, [pc, #172]	; (800e648 <TIM_Base_SetConfig+0x11c>)
 800e59a:	4293      	cmp	r3, r2
 800e59c:	d01f      	beq.n	800e5de <TIM_Base_SetConfig+0xb2>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	4a2a      	ldr	r2, [pc, #168]	; (800e64c <TIM_Base_SetConfig+0x120>)
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d01b      	beq.n	800e5de <TIM_Base_SetConfig+0xb2>
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	4a29      	ldr	r2, [pc, #164]	; (800e650 <TIM_Base_SetConfig+0x124>)
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d017      	beq.n	800e5de <TIM_Base_SetConfig+0xb2>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	4a28      	ldr	r2, [pc, #160]	; (800e654 <TIM_Base_SetConfig+0x128>)
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d013      	beq.n	800e5de <TIM_Base_SetConfig+0xb2>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	4a27      	ldr	r2, [pc, #156]	; (800e658 <TIM_Base_SetConfig+0x12c>)
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d00f      	beq.n	800e5de <TIM_Base_SetConfig+0xb2>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	4a26      	ldr	r2, [pc, #152]	; (800e65c <TIM_Base_SetConfig+0x130>)
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	d00b      	beq.n	800e5de <TIM_Base_SetConfig+0xb2>
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	4a25      	ldr	r2, [pc, #148]	; (800e660 <TIM_Base_SetConfig+0x134>)
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	d007      	beq.n	800e5de <TIM_Base_SetConfig+0xb2>
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	4a24      	ldr	r2, [pc, #144]	; (800e664 <TIM_Base_SetConfig+0x138>)
 800e5d2:	4293      	cmp	r3, r2
 800e5d4:	d003      	beq.n	800e5de <TIM_Base_SetConfig+0xb2>
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	4a23      	ldr	r2, [pc, #140]	; (800e668 <TIM_Base_SetConfig+0x13c>)
 800e5da:	4293      	cmp	r3, r2
 800e5dc:	d108      	bne.n	800e5f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e5e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	68db      	ldr	r3, [r3, #12]
 800e5ea:	68fa      	ldr	r2, [r7, #12]
 800e5ec:	4313      	orrs	r3, r2
 800e5ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	695b      	ldr	r3, [r3, #20]
 800e5fa:	4313      	orrs	r3, r2
 800e5fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	68fa      	ldr	r2, [r7, #12]
 800e602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	689a      	ldr	r2, [r3, #8]
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	681a      	ldr	r2, [r3, #0]
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	4a0a      	ldr	r2, [pc, #40]	; (800e640 <TIM_Base_SetConfig+0x114>)
 800e618:	4293      	cmp	r3, r2
 800e61a:	d003      	beq.n	800e624 <TIM_Base_SetConfig+0xf8>
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	4a0c      	ldr	r2, [pc, #48]	; (800e650 <TIM_Base_SetConfig+0x124>)
 800e620:	4293      	cmp	r3, r2
 800e622:	d103      	bne.n	800e62c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	691a      	ldr	r2, [r3, #16]
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2201      	movs	r2, #1
 800e630:	615a      	str	r2, [r3, #20]
}
 800e632:	bf00      	nop
 800e634:	3714      	adds	r7, #20
 800e636:	46bd      	mov	sp, r7
 800e638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63c:	4770      	bx	lr
 800e63e:	bf00      	nop
 800e640:	40010000 	.word	0x40010000
 800e644:	40000400 	.word	0x40000400
 800e648:	40000800 	.word	0x40000800
 800e64c:	40000c00 	.word	0x40000c00
 800e650:	40010400 	.word	0x40010400
 800e654:	40014000 	.word	0x40014000
 800e658:	40014400 	.word	0x40014400
 800e65c:	40014800 	.word	0x40014800
 800e660:	40001800 	.word	0x40001800
 800e664:	40001c00 	.word	0x40001c00
 800e668:	40002000 	.word	0x40002000

0800e66c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e66c:	b480      	push	{r7}
 800e66e:	b087      	sub	sp, #28
 800e670:	af00      	add	r7, sp, #0
 800e672:	60f8      	str	r0, [r7, #12]
 800e674:	60b9      	str	r1, [r7, #8]
 800e676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	6a1b      	ldr	r3, [r3, #32]
 800e67c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	6a1b      	ldr	r3, [r3, #32]
 800e682:	f023 0201 	bic.w	r2, r3, #1
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	699b      	ldr	r3, [r3, #24]
 800e68e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e690:	693b      	ldr	r3, [r7, #16]
 800e692:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	011b      	lsls	r3, r3, #4
 800e69c:	693a      	ldr	r2, [r7, #16]
 800e69e:	4313      	orrs	r3, r2
 800e6a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	f023 030a 	bic.w	r3, r3, #10
 800e6a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e6aa:	697a      	ldr	r2, [r7, #20]
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	4313      	orrs	r3, r2
 800e6b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	693a      	ldr	r2, [r7, #16]
 800e6b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	697a      	ldr	r2, [r7, #20]
 800e6bc:	621a      	str	r2, [r3, #32]
}
 800e6be:	bf00      	nop
 800e6c0:	371c      	adds	r7, #28
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c8:	4770      	bx	lr

0800e6ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e6ca:	b480      	push	{r7}
 800e6cc:	b087      	sub	sp, #28
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	60f8      	str	r0, [r7, #12]
 800e6d2:	60b9      	str	r1, [r7, #8]
 800e6d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	6a1b      	ldr	r3, [r3, #32]
 800e6da:	f023 0210 	bic.w	r2, r3, #16
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	699b      	ldr	r3, [r3, #24]
 800e6e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	6a1b      	ldr	r3, [r3, #32]
 800e6ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e6f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	031b      	lsls	r3, r3, #12
 800e6fa:	697a      	ldr	r2, [r7, #20]
 800e6fc:	4313      	orrs	r3, r2
 800e6fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e706:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	011b      	lsls	r3, r3, #4
 800e70c:	693a      	ldr	r2, [r7, #16]
 800e70e:	4313      	orrs	r3, r2
 800e710:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	697a      	ldr	r2, [r7, #20]
 800e716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	693a      	ldr	r2, [r7, #16]
 800e71c:	621a      	str	r2, [r3, #32]
}
 800e71e:	bf00      	nop
 800e720:	371c      	adds	r7, #28
 800e722:	46bd      	mov	sp, r7
 800e724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e728:	4770      	bx	lr

0800e72a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e72a:	b480      	push	{r7}
 800e72c:	b085      	sub	sp, #20
 800e72e:	af00      	add	r7, sp, #0
 800e730:	6078      	str	r0, [r7, #4]
 800e732:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	689b      	ldr	r3, [r3, #8]
 800e738:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e740:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e742:	683a      	ldr	r2, [r7, #0]
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	4313      	orrs	r3, r2
 800e748:	f043 0307 	orr.w	r3, r3, #7
 800e74c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	68fa      	ldr	r2, [r7, #12]
 800e752:	609a      	str	r2, [r3, #8]
}
 800e754:	bf00      	nop
 800e756:	3714      	adds	r7, #20
 800e758:	46bd      	mov	sp, r7
 800e75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75e:	4770      	bx	lr

0800e760 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e760:	b480      	push	{r7}
 800e762:	b087      	sub	sp, #28
 800e764:	af00      	add	r7, sp, #0
 800e766:	60f8      	str	r0, [r7, #12]
 800e768:	60b9      	str	r1, [r7, #8]
 800e76a:	607a      	str	r2, [r7, #4]
 800e76c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	689b      	ldr	r3, [r3, #8]
 800e772:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e774:	697b      	ldr	r3, [r7, #20]
 800e776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e77a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	021a      	lsls	r2, r3, #8
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	431a      	orrs	r2, r3
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	4313      	orrs	r3, r2
 800e788:	697a      	ldr	r2, [r7, #20]
 800e78a:	4313      	orrs	r3, r2
 800e78c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	697a      	ldr	r2, [r7, #20]
 800e792:	609a      	str	r2, [r3, #8]
}
 800e794:	bf00      	nop
 800e796:	371c      	adds	r7, #28
 800e798:	46bd      	mov	sp, r7
 800e79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79e:	4770      	bx	lr

0800e7a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e7a0:	b480      	push	{r7}
 800e7a2:	b085      	sub	sp, #20
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e7b0:	2b01      	cmp	r3, #1
 800e7b2:	d101      	bne.n	800e7b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e7b4:	2302      	movs	r3, #2
 800e7b6:	e05a      	b.n	800e86e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2201      	movs	r2, #1
 800e7bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2202      	movs	r2, #2
 800e7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	685b      	ldr	r3, [r3, #4]
 800e7ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	689b      	ldr	r3, [r3, #8]
 800e7d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e7de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	68fa      	ldr	r2, [r7, #12]
 800e7e6:	4313      	orrs	r3, r2
 800e7e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	68fa      	ldr	r2, [r7, #12]
 800e7f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	4a21      	ldr	r2, [pc, #132]	; (800e87c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e7f8:	4293      	cmp	r3, r2
 800e7fa:	d022      	beq.n	800e842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e804:	d01d      	beq.n	800e842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	4a1d      	ldr	r2, [pc, #116]	; (800e880 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e80c:	4293      	cmp	r3, r2
 800e80e:	d018      	beq.n	800e842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	4a1b      	ldr	r2, [pc, #108]	; (800e884 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e816:	4293      	cmp	r3, r2
 800e818:	d013      	beq.n	800e842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	4a1a      	ldr	r2, [pc, #104]	; (800e888 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e820:	4293      	cmp	r3, r2
 800e822:	d00e      	beq.n	800e842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	4a18      	ldr	r2, [pc, #96]	; (800e88c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e82a:	4293      	cmp	r3, r2
 800e82c:	d009      	beq.n	800e842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	4a17      	ldr	r2, [pc, #92]	; (800e890 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e834:	4293      	cmp	r3, r2
 800e836:	d004      	beq.n	800e842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	4a15      	ldr	r2, [pc, #84]	; (800e894 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e83e:	4293      	cmp	r3, r2
 800e840:	d10c      	bne.n	800e85c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e848:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	685b      	ldr	r3, [r3, #4]
 800e84e:	68ba      	ldr	r2, [r7, #8]
 800e850:	4313      	orrs	r3, r2
 800e852:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	68ba      	ldr	r2, [r7, #8]
 800e85a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2201      	movs	r2, #1
 800e860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2200      	movs	r2, #0
 800e868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e86c:	2300      	movs	r3, #0
}
 800e86e:	4618      	mov	r0, r3
 800e870:	3714      	adds	r7, #20
 800e872:	46bd      	mov	sp, r7
 800e874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e878:	4770      	bx	lr
 800e87a:	bf00      	nop
 800e87c:	40010000 	.word	0x40010000
 800e880:	40000400 	.word	0x40000400
 800e884:	40000800 	.word	0x40000800
 800e888:	40000c00 	.word	0x40000c00
 800e88c:	40010400 	.word	0x40010400
 800e890:	40014000 	.word	0x40014000
 800e894:	40001800 	.word	0x40001800

0800e898 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e898:	b480      	push	{r7}
 800e89a:	b083      	sub	sp, #12
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e8a0:	bf00      	nop
 800e8a2:	370c      	adds	r7, #12
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8aa:	4770      	bx	lr

0800e8ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e8ac:	b480      	push	{r7}
 800e8ae:	b083      	sub	sp, #12
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e8b4:	bf00      	nop
 800e8b6:	370c      	adds	r7, #12
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8be:	4770      	bx	lr

0800e8c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b082      	sub	sp, #8
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d101      	bne.n	800e8d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	e03f      	b.n	800e952 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e8d8:	b2db      	uxtb	r3, r3
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d106      	bne.n	800e8ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f7fc fdce 	bl	800b488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2224      	movs	r2, #36	; 0x24
 800e8f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	68da      	ldr	r2, [r3, #12]
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e902:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f000 fb6b 	bl	800efe0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	691a      	ldr	r2, [r3, #16]
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e918:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	695a      	ldr	r2, [r3, #20]
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e928:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	68da      	ldr	r2, [r3, #12]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e938:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2200      	movs	r2, #0
 800e93e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2220      	movs	r2, #32
 800e944:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2220      	movs	r2, #32
 800e94c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800e950:	2300      	movs	r3, #0
}
 800e952:	4618      	mov	r0, r3
 800e954:	3708      	adds	r7, #8
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}
	...

0800e95c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b086      	sub	sp, #24
 800e960:	af00      	add	r7, sp, #0
 800e962:	60f8      	str	r0, [r7, #12]
 800e964:	60b9      	str	r1, [r7, #8]
 800e966:	4613      	mov	r3, r2
 800e968:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e970:	b2db      	uxtb	r3, r3
 800e972:	2b20      	cmp	r3, #32
 800e974:	d153      	bne.n	800ea1e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d002      	beq.n	800e982 <HAL_UART_Transmit_DMA+0x26>
 800e97c:	88fb      	ldrh	r3, [r7, #6]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d101      	bne.n	800e986 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800e982:	2301      	movs	r3, #1
 800e984:	e04c      	b.n	800ea20 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e98c:	2b01      	cmp	r3, #1
 800e98e:	d101      	bne.n	800e994 <HAL_UART_Transmit_DMA+0x38>
 800e990:	2302      	movs	r3, #2
 800e992:	e045      	b.n	800ea20 <HAL_UART_Transmit_DMA+0xc4>
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	2201      	movs	r2, #1
 800e998:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800e99c:	68ba      	ldr	r2, [r7, #8]
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	88fa      	ldrh	r2, [r7, #6]
 800e9a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	88fa      	ldrh	r2, [r7, #6]
 800e9ac:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	2221      	movs	r2, #33	; 0x21
 800e9b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9c0:	4a19      	ldr	r2, [pc, #100]	; (800ea28 <HAL_UART_Transmit_DMA+0xcc>)
 800e9c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9c8:	4a18      	ldr	r2, [pc, #96]	; (800ea2c <HAL_UART_Transmit_DMA+0xd0>)
 800e9ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9d0:	4a17      	ldr	r2, [pc, #92]	; (800ea30 <HAL_UART_Transmit_DMA+0xd4>)
 800e9d2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9d8:	2200      	movs	r2, #0
 800e9da:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800e9dc:	f107 0308 	add.w	r3, r7, #8
 800e9e0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e9e6:	697b      	ldr	r3, [r7, #20]
 800e9e8:	6819      	ldr	r1, [r3, #0]
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	3304      	adds	r3, #4
 800e9f0:	461a      	mov	r2, r3
 800e9f2:	88fb      	ldrh	r3, [r7, #6]
 800e9f4:	f7fd f812 	bl	800ba1c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ea00:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	2200      	movs	r2, #0
 800ea06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	695a      	ldr	r2, [r3, #20]
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ea18:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	e000      	b.n	800ea20 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800ea1e:	2302      	movs	r3, #2
  }
}
 800ea20:	4618      	mov	r0, r3
 800ea22:	3718      	adds	r7, #24
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	0800ec71 	.word	0x0800ec71
 800ea2c:	0800ecc3 	.word	0x0800ecc3
 800ea30:	0800ecdf 	.word	0x0800ecdf

0800ea34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b088      	sub	sp, #32
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	68db      	ldr	r3, [r3, #12]
 800ea4a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	695b      	ldr	r3, [r3, #20]
 800ea52:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800ea54:	2300      	movs	r3, #0
 800ea56:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ea5c:	69fb      	ldr	r3, [r7, #28]
 800ea5e:	f003 030f 	and.w	r3, r3, #15
 800ea62:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800ea64:	693b      	ldr	r3, [r7, #16]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d10d      	bne.n	800ea86 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ea6a:	69fb      	ldr	r3, [r7, #28]
 800ea6c:	f003 0320 	and.w	r3, r3, #32
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d008      	beq.n	800ea86 <HAL_UART_IRQHandler+0x52>
 800ea74:	69bb      	ldr	r3, [r7, #24]
 800ea76:	f003 0320 	and.w	r3, r3, #32
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d003      	beq.n	800ea86 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f000 fa2d 	bl	800eede <UART_Receive_IT>
      return;
 800ea84:	e0d0      	b.n	800ec28 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	f000 80b0 	beq.w	800ebee <HAL_UART_IRQHandler+0x1ba>
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	f003 0301 	and.w	r3, r3, #1
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d105      	bne.n	800eaa4 <HAL_UART_IRQHandler+0x70>
 800ea98:	69bb      	ldr	r3, [r7, #24]
 800ea9a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	f000 80a5 	beq.w	800ebee <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800eaa4:	69fb      	ldr	r3, [r7, #28]
 800eaa6:	f003 0301 	and.w	r3, r3, #1
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d00a      	beq.n	800eac4 <HAL_UART_IRQHandler+0x90>
 800eaae:	69bb      	ldr	r3, [r7, #24]
 800eab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d005      	beq.n	800eac4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eabc:	f043 0201 	orr.w	r2, r3, #1
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800eac4:	69fb      	ldr	r3, [r7, #28]
 800eac6:	f003 0304 	and.w	r3, r3, #4
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d00a      	beq.n	800eae4 <HAL_UART_IRQHandler+0xb0>
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	f003 0301 	and.w	r3, r3, #1
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d005      	beq.n	800eae4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eadc:	f043 0202 	orr.w	r2, r3, #2
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800eae4:	69fb      	ldr	r3, [r7, #28]
 800eae6:	f003 0302 	and.w	r3, r3, #2
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d00a      	beq.n	800eb04 <HAL_UART_IRQHandler+0xd0>
 800eaee:	697b      	ldr	r3, [r7, #20]
 800eaf0:	f003 0301 	and.w	r3, r3, #1
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d005      	beq.n	800eb04 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eafc:	f043 0204 	orr.w	r2, r3, #4
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	f003 0308 	and.w	r3, r3, #8
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d00f      	beq.n	800eb2e <HAL_UART_IRQHandler+0xfa>
 800eb0e:	69bb      	ldr	r3, [r7, #24]
 800eb10:	f003 0320 	and.w	r3, r3, #32
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d104      	bne.n	800eb22 <HAL_UART_IRQHandler+0xee>
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	f003 0301 	and.w	r3, r3, #1
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d005      	beq.n	800eb2e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb26:	f043 0208 	orr.w	r2, r3, #8
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d077      	beq.n	800ec26 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800eb36:	69fb      	ldr	r3, [r7, #28]
 800eb38:	f003 0320 	and.w	r3, r3, #32
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d007      	beq.n	800eb50 <HAL_UART_IRQHandler+0x11c>
 800eb40:	69bb      	ldr	r3, [r7, #24]
 800eb42:	f003 0320 	and.w	r3, r3, #32
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d002      	beq.n	800eb50 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f000 f9c7 	bl	800eede <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	695b      	ldr	r3, [r3, #20]
 800eb56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb5a:	2b40      	cmp	r3, #64	; 0x40
 800eb5c:	bf0c      	ite	eq
 800eb5e:	2301      	moveq	r3, #1
 800eb60:	2300      	movne	r3, #0
 800eb62:	b2db      	uxtb	r3, r3
 800eb64:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb6a:	f003 0308 	and.w	r3, r3, #8
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d102      	bne.n	800eb78 <HAL_UART_IRQHandler+0x144>
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d031      	beq.n	800ebdc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f000 f910 	bl	800ed9e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	695b      	ldr	r3, [r3, #20]
 800eb84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb88:	2b40      	cmp	r3, #64	; 0x40
 800eb8a:	d123      	bne.n	800ebd4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	695a      	ldr	r2, [r3, #20]
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eb9a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d013      	beq.n	800ebcc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eba8:	4a21      	ldr	r2, [pc, #132]	; (800ec30 <HAL_UART_IRQHandler+0x1fc>)
 800ebaa:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f7fc ff8b 	bl	800bacc <HAL_DMA_Abort_IT>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d016      	beq.n	800ebea <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebc2:	687a      	ldr	r2, [r7, #4]
 800ebc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ebc6:	4610      	mov	r0, r2
 800ebc8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ebca:	e00e      	b.n	800ebea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f000 f845 	bl	800ec5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ebd2:	e00a      	b.n	800ebea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ebd4:	6878      	ldr	r0, [r7, #4]
 800ebd6:	f000 f841 	bl	800ec5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ebda:	e006      	b.n	800ebea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f000 f83d 	bl	800ec5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800ebe8:	e01d      	b.n	800ec26 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ebea:	bf00      	nop
    return;
 800ebec:	e01b      	b.n	800ec26 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ebee:	69fb      	ldr	r3, [r7, #28]
 800ebf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d008      	beq.n	800ec0a <HAL_UART_IRQHandler+0x1d6>
 800ebf8:	69bb      	ldr	r3, [r7, #24]
 800ebfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d003      	beq.n	800ec0a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f000 f8fd 	bl	800ee02 <UART_Transmit_IT>
    return;
 800ec08:	e00e      	b.n	800ec28 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ec0a:	69fb      	ldr	r3, [r7, #28]
 800ec0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d009      	beq.n	800ec28 <HAL_UART_IRQHandler+0x1f4>
 800ec14:	69bb      	ldr	r3, [r7, #24]
 800ec16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d004      	beq.n	800ec28 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	f000 f945 	bl	800eeae <UART_EndTransmit_IT>
    return;
 800ec24:	e000      	b.n	800ec28 <HAL_UART_IRQHandler+0x1f4>
    return;
 800ec26:	bf00      	nop
  }
}
 800ec28:	3720      	adds	r7, #32
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}
 800ec2e:	bf00      	nop
 800ec30:	0800eddb 	.word	0x0800eddb

0800ec34 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ec34:	b480      	push	{r7}
 800ec36:	b083      	sub	sp, #12
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ec3c:	bf00      	nop
 800ec3e:	370c      	adds	r7, #12
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr

0800ec48 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ec48:	b480      	push	{r7}
 800ec4a:	b083      	sub	sp, #12
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ec50:	bf00      	nop
 800ec52:	370c      	adds	r7, #12
 800ec54:	46bd      	mov	sp, r7
 800ec56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5a:	4770      	bx	lr

0800ec5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ec5c:	b480      	push	{r7}
 800ec5e:	b083      	sub	sp, #12
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ec64:	bf00      	nop
 800ec66:	370c      	adds	r7, #12
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6e:	4770      	bx	lr

0800ec70 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b084      	sub	sp, #16
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec7c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d113      	bne.n	800ecb4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	695a      	ldr	r2, [r3, #20]
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eca0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	68da      	ldr	r2, [r3, #12]
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ecb0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ecb2:	e002      	b.n	800ecba <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800ecb4:	68f8      	ldr	r0, [r7, #12]
 800ecb6:	f7fc fc69 	bl	800b58c <HAL_UART_TxCpltCallback>
}
 800ecba:	bf00      	nop
 800ecbc:	3710      	adds	r7, #16
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}

0800ecc2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ecc2:	b580      	push	{r7, lr}
 800ecc4:	b084      	sub	sp, #16
 800ecc6:	af00      	add	r7, sp, #0
 800ecc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ecd0:	68f8      	ldr	r0, [r7, #12]
 800ecd2:	f7ff ffaf 	bl	800ec34 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ecd6:	bf00      	nop
 800ecd8:	3710      	adds	r7, #16
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}

0800ecde <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ecde:	b580      	push	{r7, lr}
 800ece0:	b084      	sub	sp, #16
 800ece2:	af00      	add	r7, sp, #0
 800ece4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ece6:	2300      	movs	r3, #0
 800ece8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecee:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	695b      	ldr	r3, [r3, #20]
 800ecf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecfa:	2b80      	cmp	r3, #128	; 0x80
 800ecfc:	bf0c      	ite	eq
 800ecfe:	2301      	moveq	r3, #1
 800ed00:	2300      	movne	r3, #0
 800ed02:	b2db      	uxtb	r3, r3
 800ed04:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ed0c:	b2db      	uxtb	r3, r3
 800ed0e:	2b21      	cmp	r3, #33	; 0x21
 800ed10:	d108      	bne.n	800ed24 <UART_DMAError+0x46>
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d005      	beq.n	800ed24 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ed18:	68bb      	ldr	r3, [r7, #8]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ed1e:	68b8      	ldr	r0, [r7, #8]
 800ed20:	f000 f827 	bl	800ed72 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	695b      	ldr	r3, [r3, #20]
 800ed2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed2e:	2b40      	cmp	r3, #64	; 0x40
 800ed30:	bf0c      	ite	eq
 800ed32:	2301      	moveq	r3, #1
 800ed34:	2300      	movne	r3, #0
 800ed36:	b2db      	uxtb	r3, r3
 800ed38:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ed3a:	68bb      	ldr	r3, [r7, #8]
 800ed3c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ed40:	b2db      	uxtb	r3, r3
 800ed42:	2b22      	cmp	r3, #34	; 0x22
 800ed44:	d108      	bne.n	800ed58 <UART_DMAError+0x7a>
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d005      	beq.n	800ed58 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	2200      	movs	r2, #0
 800ed50:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ed52:	68b8      	ldr	r0, [r7, #8]
 800ed54:	f000 f823 	bl	800ed9e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ed58:	68bb      	ldr	r3, [r7, #8]
 800ed5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed5c:	f043 0210 	orr.w	r2, r3, #16
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ed64:	68b8      	ldr	r0, [r7, #8]
 800ed66:	f7ff ff79 	bl	800ec5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed6a:	bf00      	nop
 800ed6c:	3710      	adds	r7, #16
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}

0800ed72 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ed72:	b480      	push	{r7}
 800ed74:	b083      	sub	sp, #12
 800ed76:	af00      	add	r7, sp, #0
 800ed78:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	68da      	ldr	r2, [r3, #12]
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ed88:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2220      	movs	r2, #32
 800ed8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800ed92:	bf00      	nop
 800ed94:	370c      	adds	r7, #12
 800ed96:	46bd      	mov	sp, r7
 800ed98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9c:	4770      	bx	lr

0800ed9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ed9e:	b480      	push	{r7}
 800eda0:	b083      	sub	sp, #12
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	68da      	ldr	r2, [r3, #12]
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800edb4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	695a      	ldr	r2, [r3, #20]
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	f022 0201 	bic.w	r2, r2, #1
 800edc4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2220      	movs	r2, #32
 800edca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800edce:	bf00      	nop
 800edd0:	370c      	adds	r7, #12
 800edd2:	46bd      	mov	sp, r7
 800edd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd8:	4770      	bx	lr

0800edda <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800edda:	b580      	push	{r7, lr}
 800eddc:	b084      	sub	sp, #16
 800edde:	af00      	add	r7, sp, #0
 800ede0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ede6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	2200      	movs	r2, #0
 800edec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	2200      	movs	r2, #0
 800edf2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800edf4:	68f8      	ldr	r0, [r7, #12]
 800edf6:	f7ff ff31 	bl	800ec5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800edfa:	bf00      	nop
 800edfc:	3710      	adds	r7, #16
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}

0800ee02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ee02:	b480      	push	{r7}
 800ee04:	b085      	sub	sp, #20
 800ee06:	af00      	add	r7, sp, #0
 800ee08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ee10:	b2db      	uxtb	r3, r3
 800ee12:	2b21      	cmp	r3, #33	; 0x21
 800ee14:	d144      	bne.n	800eea0 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	689b      	ldr	r3, [r3, #8]
 800ee1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee1e:	d11a      	bne.n	800ee56 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	6a1b      	ldr	r3, [r3, #32]
 800ee24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	881b      	ldrh	r3, [r3, #0]
 800ee2a:	461a      	mov	r2, r3
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ee34:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	691b      	ldr	r3, [r3, #16]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d105      	bne.n	800ee4a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6a1b      	ldr	r3, [r3, #32]
 800ee42:	1c9a      	adds	r2, r3, #2
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	621a      	str	r2, [r3, #32]
 800ee48:	e00e      	b.n	800ee68 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	6a1b      	ldr	r3, [r3, #32]
 800ee4e:	1c5a      	adds	r2, r3, #1
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	621a      	str	r2, [r3, #32]
 800ee54:	e008      	b.n	800ee68 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6a1b      	ldr	r3, [r3, #32]
 800ee5a:	1c59      	adds	r1, r3, #1
 800ee5c:	687a      	ldr	r2, [r7, #4]
 800ee5e:	6211      	str	r1, [r2, #32]
 800ee60:	781a      	ldrb	r2, [r3, #0]
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ee6c:	b29b      	uxth	r3, r3
 800ee6e:	3b01      	subs	r3, #1
 800ee70:	b29b      	uxth	r3, r3
 800ee72:	687a      	ldr	r2, [r7, #4]
 800ee74:	4619      	mov	r1, r3
 800ee76:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d10f      	bne.n	800ee9c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	68da      	ldr	r2, [r3, #12]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ee8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	68da      	ldr	r2, [r3, #12]
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ee9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	e000      	b.n	800eea2 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800eea0:	2302      	movs	r3, #2
  }
}
 800eea2:	4618      	mov	r0, r3
 800eea4:	3714      	adds	r7, #20
 800eea6:	46bd      	mov	sp, r7
 800eea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeac:	4770      	bx	lr

0800eeae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eeae:	b580      	push	{r7, lr}
 800eeb0:	b082      	sub	sp, #8
 800eeb2:	af00      	add	r7, sp, #0
 800eeb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	68da      	ldr	r2, [r3, #12]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eec4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2220      	movs	r2, #32
 800eeca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f7fc fb5c 	bl	800b58c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800eed4:	2300      	movs	r3, #0
}
 800eed6:	4618      	mov	r0, r3
 800eed8:	3708      	adds	r7, #8
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}

0800eede <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800eede:	b580      	push	{r7, lr}
 800eee0:	b084      	sub	sp, #16
 800eee2:	af00      	add	r7, sp, #0
 800eee4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800eeec:	b2db      	uxtb	r3, r3
 800eeee:	2b22      	cmp	r3, #34	; 0x22
 800eef0:	d171      	bne.n	800efd6 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	689b      	ldr	r3, [r3, #8]
 800eef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eefa:	d123      	bne.n	800ef44 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef00:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	691b      	ldr	r3, [r3, #16]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d10e      	bne.n	800ef28 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	685b      	ldr	r3, [r3, #4]
 800ef10:	b29b      	uxth	r3, r3
 800ef12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef16:	b29a      	uxth	r2, r3
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef20:	1c9a      	adds	r2, r3, #2
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	629a      	str	r2, [r3, #40]	; 0x28
 800ef26:	e029      	b.n	800ef7c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	685b      	ldr	r3, [r3, #4]
 800ef2e:	b29b      	uxth	r3, r3
 800ef30:	b2db      	uxtb	r3, r3
 800ef32:	b29a      	uxth	r2, r3
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef3c:	1c5a      	adds	r2, r3, #1
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	629a      	str	r2, [r3, #40]	; 0x28
 800ef42:	e01b      	b.n	800ef7c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	691b      	ldr	r3, [r3, #16]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d10a      	bne.n	800ef62 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	6858      	ldr	r0, [r3, #4]
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef56:	1c59      	adds	r1, r3, #1
 800ef58:	687a      	ldr	r2, [r7, #4]
 800ef5a:	6291      	str	r1, [r2, #40]	; 0x28
 800ef5c:	b2c2      	uxtb	r2, r0
 800ef5e:	701a      	strb	r2, [r3, #0]
 800ef60:	e00c      	b.n	800ef7c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	685b      	ldr	r3, [r3, #4]
 800ef68:	b2da      	uxtb	r2, r3
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef6e:	1c58      	adds	r0, r3, #1
 800ef70:	6879      	ldr	r1, [r7, #4]
 800ef72:	6288      	str	r0, [r1, #40]	; 0x28
 800ef74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ef78:	b2d2      	uxtb	r2, r2
 800ef7a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ef80:	b29b      	uxth	r3, r3
 800ef82:	3b01      	subs	r3, #1
 800ef84:	b29b      	uxth	r3, r3
 800ef86:	687a      	ldr	r2, [r7, #4]
 800ef88:	4619      	mov	r1, r3
 800ef8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d120      	bne.n	800efd2 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	68da      	ldr	r2, [r3, #12]
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	f022 0220 	bic.w	r2, r2, #32
 800ef9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	68da      	ldr	r2, [r3, #12]
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800efae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	695a      	ldr	r2, [r3, #20]
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	f022 0201 	bic.w	r2, r2, #1
 800efbe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2220      	movs	r2, #32
 800efc4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800efc8:	6878      	ldr	r0, [r7, #4]
 800efca:	f7ff fe3d 	bl	800ec48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800efce:	2300      	movs	r3, #0
 800efd0:	e002      	b.n	800efd8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800efd2:	2300      	movs	r3, #0
 800efd4:	e000      	b.n	800efd8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800efd6:	2302      	movs	r3, #2
  }
}
 800efd8:	4618      	mov	r0, r3
 800efda:	3710      	adds	r7, #16
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}

0800efe0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800efe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efe4:	b0bd      	sub	sp, #244	; 0xf4
 800efe6:	af00      	add	r7, sp, #0
 800efe8:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800efec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	691b      	ldr	r3, [r3, #16]
 800eff4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800eff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800effc:	68d9      	ldr	r1, [r3, #12]
 800effe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f002:	681a      	ldr	r2, [r3, #0]
 800f004:	ea40 0301 	orr.w	r3, r0, r1
 800f008:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f00a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f00e:	689a      	ldr	r2, [r3, #8]
 800f010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f014:	691b      	ldr	r3, [r3, #16]
 800f016:	431a      	orrs	r2, r3
 800f018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f01c:	695b      	ldr	r3, [r3, #20]
 800f01e:	431a      	orrs	r2, r3
 800f020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f024:	69db      	ldr	r3, [r3, #28]
 800f026:	4313      	orrs	r3, r2
 800f028:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800f02c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	68db      	ldr	r3, [r3, #12]
 800f034:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800f038:	f021 010c 	bic.w	r1, r1, #12
 800f03c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f040:	681a      	ldr	r2, [r3, #0]
 800f042:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f046:	430b      	orrs	r3, r1
 800f048:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f04a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	695b      	ldr	r3, [r3, #20]
 800f052:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800f056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f05a:	6999      	ldr	r1, [r3, #24]
 800f05c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f060:	681a      	ldr	r2, [r3, #0]
 800f062:	ea40 0301 	orr.w	r3, r0, r1
 800f066:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f06c:	69db      	ldr	r3, [r3, #28]
 800f06e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f072:	f040 81a5 	bne.w	800f3c0 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f07a:	681a      	ldr	r2, [r3, #0]
 800f07c:	4bcd      	ldr	r3, [pc, #820]	; (800f3b4 <UART_SetConfig+0x3d4>)
 800f07e:	429a      	cmp	r2, r3
 800f080:	d006      	beq.n	800f090 <UART_SetConfig+0xb0>
 800f082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f086:	681a      	ldr	r2, [r3, #0]
 800f088:	4bcb      	ldr	r3, [pc, #812]	; (800f3b8 <UART_SetConfig+0x3d8>)
 800f08a:	429a      	cmp	r2, r3
 800f08c:	f040 80cb 	bne.w	800f226 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f090:	f7fe ff9e 	bl	800dfd0 <HAL_RCC_GetPCLK2Freq>
 800f094:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f098:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f09c:	461c      	mov	r4, r3
 800f09e:	f04f 0500 	mov.w	r5, #0
 800f0a2:	4622      	mov	r2, r4
 800f0a4:	462b      	mov	r3, r5
 800f0a6:	1891      	adds	r1, r2, r2
 800f0a8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800f0ac:	415b      	adcs	r3, r3
 800f0ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f0b2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800f0b6:	1912      	adds	r2, r2, r4
 800f0b8:	eb45 0303 	adc.w	r3, r5, r3
 800f0bc:	f04f 0000 	mov.w	r0, #0
 800f0c0:	f04f 0100 	mov.w	r1, #0
 800f0c4:	00d9      	lsls	r1, r3, #3
 800f0c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f0ca:	00d0      	lsls	r0, r2, #3
 800f0cc:	4602      	mov	r2, r0
 800f0ce:	460b      	mov	r3, r1
 800f0d0:	1911      	adds	r1, r2, r4
 800f0d2:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800f0d6:	416b      	adcs	r3, r5
 800f0d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f0dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f0e0:	685b      	ldr	r3, [r3, #4]
 800f0e2:	461a      	mov	r2, r3
 800f0e4:	f04f 0300 	mov.w	r3, #0
 800f0e8:	1891      	adds	r1, r2, r2
 800f0ea:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800f0ee:	415b      	adcs	r3, r3
 800f0f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f0f4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800f0f8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800f0fc:	f7f1 fdc4 	bl	8000c88 <__aeabi_uldivmod>
 800f100:	4602      	mov	r2, r0
 800f102:	460b      	mov	r3, r1
 800f104:	4bad      	ldr	r3, [pc, #692]	; (800f3bc <UART_SetConfig+0x3dc>)
 800f106:	fba3 2302 	umull	r2, r3, r3, r2
 800f10a:	095b      	lsrs	r3, r3, #5
 800f10c:	011e      	lsls	r6, r3, #4
 800f10e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f112:	461c      	mov	r4, r3
 800f114:	f04f 0500 	mov.w	r5, #0
 800f118:	4622      	mov	r2, r4
 800f11a:	462b      	mov	r3, r5
 800f11c:	1891      	adds	r1, r2, r2
 800f11e:	67b9      	str	r1, [r7, #120]	; 0x78
 800f120:	415b      	adcs	r3, r3
 800f122:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f124:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800f128:	1912      	adds	r2, r2, r4
 800f12a:	eb45 0303 	adc.w	r3, r5, r3
 800f12e:	f04f 0000 	mov.w	r0, #0
 800f132:	f04f 0100 	mov.w	r1, #0
 800f136:	00d9      	lsls	r1, r3, #3
 800f138:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f13c:	00d0      	lsls	r0, r2, #3
 800f13e:	4602      	mov	r2, r0
 800f140:	460b      	mov	r3, r1
 800f142:	1911      	adds	r1, r2, r4
 800f144:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800f148:	416b      	adcs	r3, r5
 800f14a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f14e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f152:	685b      	ldr	r3, [r3, #4]
 800f154:	461a      	mov	r2, r3
 800f156:	f04f 0300 	mov.w	r3, #0
 800f15a:	1891      	adds	r1, r2, r2
 800f15c:	6739      	str	r1, [r7, #112]	; 0x70
 800f15e:	415b      	adcs	r3, r3
 800f160:	677b      	str	r3, [r7, #116]	; 0x74
 800f162:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800f166:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800f16a:	f7f1 fd8d 	bl	8000c88 <__aeabi_uldivmod>
 800f16e:	4602      	mov	r2, r0
 800f170:	460b      	mov	r3, r1
 800f172:	4b92      	ldr	r3, [pc, #584]	; (800f3bc <UART_SetConfig+0x3dc>)
 800f174:	fba3 1302 	umull	r1, r3, r3, r2
 800f178:	095b      	lsrs	r3, r3, #5
 800f17a:	2164      	movs	r1, #100	; 0x64
 800f17c:	fb01 f303 	mul.w	r3, r1, r3
 800f180:	1ad3      	subs	r3, r2, r3
 800f182:	00db      	lsls	r3, r3, #3
 800f184:	3332      	adds	r3, #50	; 0x32
 800f186:	4a8d      	ldr	r2, [pc, #564]	; (800f3bc <UART_SetConfig+0x3dc>)
 800f188:	fba2 2303 	umull	r2, r3, r2, r3
 800f18c:	095b      	lsrs	r3, r3, #5
 800f18e:	005b      	lsls	r3, r3, #1
 800f190:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f194:	441e      	add	r6, r3
 800f196:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f19a:	4618      	mov	r0, r3
 800f19c:	f04f 0100 	mov.w	r1, #0
 800f1a0:	4602      	mov	r2, r0
 800f1a2:	460b      	mov	r3, r1
 800f1a4:	1894      	adds	r4, r2, r2
 800f1a6:	66bc      	str	r4, [r7, #104]	; 0x68
 800f1a8:	415b      	adcs	r3, r3
 800f1aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f1ac:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800f1b0:	1812      	adds	r2, r2, r0
 800f1b2:	eb41 0303 	adc.w	r3, r1, r3
 800f1b6:	f04f 0400 	mov.w	r4, #0
 800f1ba:	f04f 0500 	mov.w	r5, #0
 800f1be:	00dd      	lsls	r5, r3, #3
 800f1c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f1c4:	00d4      	lsls	r4, r2, #3
 800f1c6:	4622      	mov	r2, r4
 800f1c8:	462b      	mov	r3, r5
 800f1ca:	1814      	adds	r4, r2, r0
 800f1cc:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800f1d0:	414b      	adcs	r3, r1
 800f1d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f1d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1da:	685b      	ldr	r3, [r3, #4]
 800f1dc:	461a      	mov	r2, r3
 800f1de:	f04f 0300 	mov.w	r3, #0
 800f1e2:	1891      	adds	r1, r2, r2
 800f1e4:	6639      	str	r1, [r7, #96]	; 0x60
 800f1e6:	415b      	adcs	r3, r3
 800f1e8:	667b      	str	r3, [r7, #100]	; 0x64
 800f1ea:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800f1ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800f1f2:	f7f1 fd49 	bl	8000c88 <__aeabi_uldivmod>
 800f1f6:	4602      	mov	r2, r0
 800f1f8:	460b      	mov	r3, r1
 800f1fa:	4b70      	ldr	r3, [pc, #448]	; (800f3bc <UART_SetConfig+0x3dc>)
 800f1fc:	fba3 1302 	umull	r1, r3, r3, r2
 800f200:	095b      	lsrs	r3, r3, #5
 800f202:	2164      	movs	r1, #100	; 0x64
 800f204:	fb01 f303 	mul.w	r3, r1, r3
 800f208:	1ad3      	subs	r3, r2, r3
 800f20a:	00db      	lsls	r3, r3, #3
 800f20c:	3332      	adds	r3, #50	; 0x32
 800f20e:	4a6b      	ldr	r2, [pc, #428]	; (800f3bc <UART_SetConfig+0x3dc>)
 800f210:	fba2 2303 	umull	r2, r3, r2, r3
 800f214:	095b      	lsrs	r3, r3, #5
 800f216:	f003 0207 	and.w	r2, r3, #7
 800f21a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	4432      	add	r2, r6
 800f222:	609a      	str	r2, [r3, #8]
 800f224:	e26d      	b.n	800f702 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f226:	f7fe febf 	bl	800dfa8 <HAL_RCC_GetPCLK1Freq>
 800f22a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f22e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f232:	461c      	mov	r4, r3
 800f234:	f04f 0500 	mov.w	r5, #0
 800f238:	4622      	mov	r2, r4
 800f23a:	462b      	mov	r3, r5
 800f23c:	1891      	adds	r1, r2, r2
 800f23e:	65b9      	str	r1, [r7, #88]	; 0x58
 800f240:	415b      	adcs	r3, r3
 800f242:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f244:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800f248:	1912      	adds	r2, r2, r4
 800f24a:	eb45 0303 	adc.w	r3, r5, r3
 800f24e:	f04f 0000 	mov.w	r0, #0
 800f252:	f04f 0100 	mov.w	r1, #0
 800f256:	00d9      	lsls	r1, r3, #3
 800f258:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f25c:	00d0      	lsls	r0, r2, #3
 800f25e:	4602      	mov	r2, r0
 800f260:	460b      	mov	r3, r1
 800f262:	1911      	adds	r1, r2, r4
 800f264:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800f268:	416b      	adcs	r3, r5
 800f26a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f26e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f272:	685b      	ldr	r3, [r3, #4]
 800f274:	461a      	mov	r2, r3
 800f276:	f04f 0300 	mov.w	r3, #0
 800f27a:	1891      	adds	r1, r2, r2
 800f27c:	6539      	str	r1, [r7, #80]	; 0x50
 800f27e:	415b      	adcs	r3, r3
 800f280:	657b      	str	r3, [r7, #84]	; 0x54
 800f282:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800f286:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800f28a:	f7f1 fcfd 	bl	8000c88 <__aeabi_uldivmod>
 800f28e:	4602      	mov	r2, r0
 800f290:	460b      	mov	r3, r1
 800f292:	4b4a      	ldr	r3, [pc, #296]	; (800f3bc <UART_SetConfig+0x3dc>)
 800f294:	fba3 2302 	umull	r2, r3, r3, r2
 800f298:	095b      	lsrs	r3, r3, #5
 800f29a:	011e      	lsls	r6, r3, #4
 800f29c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f2a0:	461c      	mov	r4, r3
 800f2a2:	f04f 0500 	mov.w	r5, #0
 800f2a6:	4622      	mov	r2, r4
 800f2a8:	462b      	mov	r3, r5
 800f2aa:	1891      	adds	r1, r2, r2
 800f2ac:	64b9      	str	r1, [r7, #72]	; 0x48
 800f2ae:	415b      	adcs	r3, r3
 800f2b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f2b2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f2b6:	1912      	adds	r2, r2, r4
 800f2b8:	eb45 0303 	adc.w	r3, r5, r3
 800f2bc:	f04f 0000 	mov.w	r0, #0
 800f2c0:	f04f 0100 	mov.w	r1, #0
 800f2c4:	00d9      	lsls	r1, r3, #3
 800f2c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f2ca:	00d0      	lsls	r0, r2, #3
 800f2cc:	4602      	mov	r2, r0
 800f2ce:	460b      	mov	r3, r1
 800f2d0:	1911      	adds	r1, r2, r4
 800f2d2:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800f2d6:	416b      	adcs	r3, r5
 800f2d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f2dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2e0:	685b      	ldr	r3, [r3, #4]
 800f2e2:	461a      	mov	r2, r3
 800f2e4:	f04f 0300 	mov.w	r3, #0
 800f2e8:	1891      	adds	r1, r2, r2
 800f2ea:	6439      	str	r1, [r7, #64]	; 0x40
 800f2ec:	415b      	adcs	r3, r3
 800f2ee:	647b      	str	r3, [r7, #68]	; 0x44
 800f2f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f2f4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800f2f8:	f7f1 fcc6 	bl	8000c88 <__aeabi_uldivmod>
 800f2fc:	4602      	mov	r2, r0
 800f2fe:	460b      	mov	r3, r1
 800f300:	4b2e      	ldr	r3, [pc, #184]	; (800f3bc <UART_SetConfig+0x3dc>)
 800f302:	fba3 1302 	umull	r1, r3, r3, r2
 800f306:	095b      	lsrs	r3, r3, #5
 800f308:	2164      	movs	r1, #100	; 0x64
 800f30a:	fb01 f303 	mul.w	r3, r1, r3
 800f30e:	1ad3      	subs	r3, r2, r3
 800f310:	00db      	lsls	r3, r3, #3
 800f312:	3332      	adds	r3, #50	; 0x32
 800f314:	4a29      	ldr	r2, [pc, #164]	; (800f3bc <UART_SetConfig+0x3dc>)
 800f316:	fba2 2303 	umull	r2, r3, r2, r3
 800f31a:	095b      	lsrs	r3, r3, #5
 800f31c:	005b      	lsls	r3, r3, #1
 800f31e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f322:	441e      	add	r6, r3
 800f324:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f328:	4618      	mov	r0, r3
 800f32a:	f04f 0100 	mov.w	r1, #0
 800f32e:	4602      	mov	r2, r0
 800f330:	460b      	mov	r3, r1
 800f332:	1894      	adds	r4, r2, r2
 800f334:	63bc      	str	r4, [r7, #56]	; 0x38
 800f336:	415b      	adcs	r3, r3
 800f338:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f33a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f33e:	1812      	adds	r2, r2, r0
 800f340:	eb41 0303 	adc.w	r3, r1, r3
 800f344:	f04f 0400 	mov.w	r4, #0
 800f348:	f04f 0500 	mov.w	r5, #0
 800f34c:	00dd      	lsls	r5, r3, #3
 800f34e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f352:	00d4      	lsls	r4, r2, #3
 800f354:	4622      	mov	r2, r4
 800f356:	462b      	mov	r3, r5
 800f358:	1814      	adds	r4, r2, r0
 800f35a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800f35e:	414b      	adcs	r3, r1
 800f360:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f368:	685b      	ldr	r3, [r3, #4]
 800f36a:	461a      	mov	r2, r3
 800f36c:	f04f 0300 	mov.w	r3, #0
 800f370:	1891      	adds	r1, r2, r2
 800f372:	6339      	str	r1, [r7, #48]	; 0x30
 800f374:	415b      	adcs	r3, r3
 800f376:	637b      	str	r3, [r7, #52]	; 0x34
 800f378:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f37c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800f380:	f7f1 fc82 	bl	8000c88 <__aeabi_uldivmod>
 800f384:	4602      	mov	r2, r0
 800f386:	460b      	mov	r3, r1
 800f388:	4b0c      	ldr	r3, [pc, #48]	; (800f3bc <UART_SetConfig+0x3dc>)
 800f38a:	fba3 1302 	umull	r1, r3, r3, r2
 800f38e:	095b      	lsrs	r3, r3, #5
 800f390:	2164      	movs	r1, #100	; 0x64
 800f392:	fb01 f303 	mul.w	r3, r1, r3
 800f396:	1ad3      	subs	r3, r2, r3
 800f398:	00db      	lsls	r3, r3, #3
 800f39a:	3332      	adds	r3, #50	; 0x32
 800f39c:	4a07      	ldr	r2, [pc, #28]	; (800f3bc <UART_SetConfig+0x3dc>)
 800f39e:	fba2 2303 	umull	r2, r3, r2, r3
 800f3a2:	095b      	lsrs	r3, r3, #5
 800f3a4:	f003 0207 	and.w	r2, r3, #7
 800f3a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	4432      	add	r2, r6
 800f3b0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f3b2:	e1a6      	b.n	800f702 <UART_SetConfig+0x722>
 800f3b4:	40011000 	.word	0x40011000
 800f3b8:	40011400 	.word	0x40011400
 800f3bc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f3c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3c4:	681a      	ldr	r2, [r3, #0]
 800f3c6:	4bd1      	ldr	r3, [pc, #836]	; (800f70c <UART_SetConfig+0x72c>)
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d006      	beq.n	800f3da <UART_SetConfig+0x3fa>
 800f3cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3d0:	681a      	ldr	r2, [r3, #0]
 800f3d2:	4bcf      	ldr	r3, [pc, #828]	; (800f710 <UART_SetConfig+0x730>)
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	f040 80ca 	bne.w	800f56e <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f3da:	f7fe fdf9 	bl	800dfd0 <HAL_RCC_GetPCLK2Freq>
 800f3de:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f3e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f3e6:	461c      	mov	r4, r3
 800f3e8:	f04f 0500 	mov.w	r5, #0
 800f3ec:	4622      	mov	r2, r4
 800f3ee:	462b      	mov	r3, r5
 800f3f0:	1891      	adds	r1, r2, r2
 800f3f2:	62b9      	str	r1, [r7, #40]	; 0x28
 800f3f4:	415b      	adcs	r3, r3
 800f3f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f3f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f3fc:	1912      	adds	r2, r2, r4
 800f3fe:	eb45 0303 	adc.w	r3, r5, r3
 800f402:	f04f 0000 	mov.w	r0, #0
 800f406:	f04f 0100 	mov.w	r1, #0
 800f40a:	00d9      	lsls	r1, r3, #3
 800f40c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f410:	00d0      	lsls	r0, r2, #3
 800f412:	4602      	mov	r2, r0
 800f414:	460b      	mov	r3, r1
 800f416:	eb12 0a04 	adds.w	sl, r2, r4
 800f41a:	eb43 0b05 	adc.w	fp, r3, r5
 800f41e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f422:	685b      	ldr	r3, [r3, #4]
 800f424:	4618      	mov	r0, r3
 800f426:	f04f 0100 	mov.w	r1, #0
 800f42a:	f04f 0200 	mov.w	r2, #0
 800f42e:	f04f 0300 	mov.w	r3, #0
 800f432:	008b      	lsls	r3, r1, #2
 800f434:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f438:	0082      	lsls	r2, r0, #2
 800f43a:	4650      	mov	r0, sl
 800f43c:	4659      	mov	r1, fp
 800f43e:	f7f1 fc23 	bl	8000c88 <__aeabi_uldivmod>
 800f442:	4602      	mov	r2, r0
 800f444:	460b      	mov	r3, r1
 800f446:	4bb3      	ldr	r3, [pc, #716]	; (800f714 <UART_SetConfig+0x734>)
 800f448:	fba3 2302 	umull	r2, r3, r3, r2
 800f44c:	095b      	lsrs	r3, r3, #5
 800f44e:	011e      	lsls	r6, r3, #4
 800f450:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f454:	4618      	mov	r0, r3
 800f456:	f04f 0100 	mov.w	r1, #0
 800f45a:	4602      	mov	r2, r0
 800f45c:	460b      	mov	r3, r1
 800f45e:	1894      	adds	r4, r2, r2
 800f460:	623c      	str	r4, [r7, #32]
 800f462:	415b      	adcs	r3, r3
 800f464:	627b      	str	r3, [r7, #36]	; 0x24
 800f466:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f46a:	1812      	adds	r2, r2, r0
 800f46c:	eb41 0303 	adc.w	r3, r1, r3
 800f470:	f04f 0400 	mov.w	r4, #0
 800f474:	f04f 0500 	mov.w	r5, #0
 800f478:	00dd      	lsls	r5, r3, #3
 800f47a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f47e:	00d4      	lsls	r4, r2, #3
 800f480:	4622      	mov	r2, r4
 800f482:	462b      	mov	r3, r5
 800f484:	1814      	adds	r4, r2, r0
 800f486:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800f48a:	414b      	adcs	r3, r1
 800f48c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f494:	685b      	ldr	r3, [r3, #4]
 800f496:	4618      	mov	r0, r3
 800f498:	f04f 0100 	mov.w	r1, #0
 800f49c:	f04f 0200 	mov.w	r2, #0
 800f4a0:	f04f 0300 	mov.w	r3, #0
 800f4a4:	008b      	lsls	r3, r1, #2
 800f4a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f4aa:	0082      	lsls	r2, r0, #2
 800f4ac:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800f4b0:	f7f1 fbea 	bl	8000c88 <__aeabi_uldivmod>
 800f4b4:	4602      	mov	r2, r0
 800f4b6:	460b      	mov	r3, r1
 800f4b8:	4b96      	ldr	r3, [pc, #600]	; (800f714 <UART_SetConfig+0x734>)
 800f4ba:	fba3 1302 	umull	r1, r3, r3, r2
 800f4be:	095b      	lsrs	r3, r3, #5
 800f4c0:	2164      	movs	r1, #100	; 0x64
 800f4c2:	fb01 f303 	mul.w	r3, r1, r3
 800f4c6:	1ad3      	subs	r3, r2, r3
 800f4c8:	011b      	lsls	r3, r3, #4
 800f4ca:	3332      	adds	r3, #50	; 0x32
 800f4cc:	4a91      	ldr	r2, [pc, #580]	; (800f714 <UART_SetConfig+0x734>)
 800f4ce:	fba2 2303 	umull	r2, r3, r2, r3
 800f4d2:	095b      	lsrs	r3, r3, #5
 800f4d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f4d8:	441e      	add	r6, r3
 800f4da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f04f 0100 	mov.w	r1, #0
 800f4e4:	4602      	mov	r2, r0
 800f4e6:	460b      	mov	r3, r1
 800f4e8:	1894      	adds	r4, r2, r2
 800f4ea:	61bc      	str	r4, [r7, #24]
 800f4ec:	415b      	adcs	r3, r3
 800f4ee:	61fb      	str	r3, [r7, #28]
 800f4f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f4f4:	1812      	adds	r2, r2, r0
 800f4f6:	eb41 0303 	adc.w	r3, r1, r3
 800f4fa:	f04f 0400 	mov.w	r4, #0
 800f4fe:	f04f 0500 	mov.w	r5, #0
 800f502:	00dd      	lsls	r5, r3, #3
 800f504:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f508:	00d4      	lsls	r4, r2, #3
 800f50a:	4622      	mov	r2, r4
 800f50c:	462b      	mov	r3, r5
 800f50e:	1814      	adds	r4, r2, r0
 800f510:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800f514:	414b      	adcs	r3, r1
 800f516:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f51a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f51e:	685b      	ldr	r3, [r3, #4]
 800f520:	4618      	mov	r0, r3
 800f522:	f04f 0100 	mov.w	r1, #0
 800f526:	f04f 0200 	mov.w	r2, #0
 800f52a:	f04f 0300 	mov.w	r3, #0
 800f52e:	008b      	lsls	r3, r1, #2
 800f530:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f534:	0082      	lsls	r2, r0, #2
 800f536:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800f53a:	f7f1 fba5 	bl	8000c88 <__aeabi_uldivmod>
 800f53e:	4602      	mov	r2, r0
 800f540:	460b      	mov	r3, r1
 800f542:	4b74      	ldr	r3, [pc, #464]	; (800f714 <UART_SetConfig+0x734>)
 800f544:	fba3 1302 	umull	r1, r3, r3, r2
 800f548:	095b      	lsrs	r3, r3, #5
 800f54a:	2164      	movs	r1, #100	; 0x64
 800f54c:	fb01 f303 	mul.w	r3, r1, r3
 800f550:	1ad3      	subs	r3, r2, r3
 800f552:	011b      	lsls	r3, r3, #4
 800f554:	3332      	adds	r3, #50	; 0x32
 800f556:	4a6f      	ldr	r2, [pc, #444]	; (800f714 <UART_SetConfig+0x734>)
 800f558:	fba2 2303 	umull	r2, r3, r2, r3
 800f55c:	095b      	lsrs	r3, r3, #5
 800f55e:	f003 020f 	and.w	r2, r3, #15
 800f562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	4432      	add	r2, r6
 800f56a:	609a      	str	r2, [r3, #8]
 800f56c:	e0c9      	b.n	800f702 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800f56e:	f7fe fd1b 	bl	800dfa8 <HAL_RCC_GetPCLK1Freq>
 800f572:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f576:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f57a:	461c      	mov	r4, r3
 800f57c:	f04f 0500 	mov.w	r5, #0
 800f580:	4622      	mov	r2, r4
 800f582:	462b      	mov	r3, r5
 800f584:	1891      	adds	r1, r2, r2
 800f586:	6139      	str	r1, [r7, #16]
 800f588:	415b      	adcs	r3, r3
 800f58a:	617b      	str	r3, [r7, #20]
 800f58c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f590:	1912      	adds	r2, r2, r4
 800f592:	eb45 0303 	adc.w	r3, r5, r3
 800f596:	f04f 0000 	mov.w	r0, #0
 800f59a:	f04f 0100 	mov.w	r1, #0
 800f59e:	00d9      	lsls	r1, r3, #3
 800f5a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f5a4:	00d0      	lsls	r0, r2, #3
 800f5a6:	4602      	mov	r2, r0
 800f5a8:	460b      	mov	r3, r1
 800f5aa:	eb12 0804 	adds.w	r8, r2, r4
 800f5ae:	eb43 0905 	adc.w	r9, r3, r5
 800f5b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5b6:	685b      	ldr	r3, [r3, #4]
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f04f 0100 	mov.w	r1, #0
 800f5be:	f04f 0200 	mov.w	r2, #0
 800f5c2:	f04f 0300 	mov.w	r3, #0
 800f5c6:	008b      	lsls	r3, r1, #2
 800f5c8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f5cc:	0082      	lsls	r2, r0, #2
 800f5ce:	4640      	mov	r0, r8
 800f5d0:	4649      	mov	r1, r9
 800f5d2:	f7f1 fb59 	bl	8000c88 <__aeabi_uldivmod>
 800f5d6:	4602      	mov	r2, r0
 800f5d8:	460b      	mov	r3, r1
 800f5da:	4b4e      	ldr	r3, [pc, #312]	; (800f714 <UART_SetConfig+0x734>)
 800f5dc:	fba3 2302 	umull	r2, r3, r3, r2
 800f5e0:	095b      	lsrs	r3, r3, #5
 800f5e2:	011e      	lsls	r6, r3, #4
 800f5e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f04f 0100 	mov.w	r1, #0
 800f5ee:	4602      	mov	r2, r0
 800f5f0:	460b      	mov	r3, r1
 800f5f2:	1894      	adds	r4, r2, r2
 800f5f4:	60bc      	str	r4, [r7, #8]
 800f5f6:	415b      	adcs	r3, r3
 800f5f8:	60fb      	str	r3, [r7, #12]
 800f5fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f5fe:	1812      	adds	r2, r2, r0
 800f600:	eb41 0303 	adc.w	r3, r1, r3
 800f604:	f04f 0400 	mov.w	r4, #0
 800f608:	f04f 0500 	mov.w	r5, #0
 800f60c:	00dd      	lsls	r5, r3, #3
 800f60e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f612:	00d4      	lsls	r4, r2, #3
 800f614:	4622      	mov	r2, r4
 800f616:	462b      	mov	r3, r5
 800f618:	1814      	adds	r4, r2, r0
 800f61a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800f61e:	414b      	adcs	r3, r1
 800f620:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f628:	685b      	ldr	r3, [r3, #4]
 800f62a:	4618      	mov	r0, r3
 800f62c:	f04f 0100 	mov.w	r1, #0
 800f630:	f04f 0200 	mov.w	r2, #0
 800f634:	f04f 0300 	mov.w	r3, #0
 800f638:	008b      	lsls	r3, r1, #2
 800f63a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f63e:	0082      	lsls	r2, r0, #2
 800f640:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800f644:	f7f1 fb20 	bl	8000c88 <__aeabi_uldivmod>
 800f648:	4602      	mov	r2, r0
 800f64a:	460b      	mov	r3, r1
 800f64c:	4b31      	ldr	r3, [pc, #196]	; (800f714 <UART_SetConfig+0x734>)
 800f64e:	fba3 1302 	umull	r1, r3, r3, r2
 800f652:	095b      	lsrs	r3, r3, #5
 800f654:	2164      	movs	r1, #100	; 0x64
 800f656:	fb01 f303 	mul.w	r3, r1, r3
 800f65a:	1ad3      	subs	r3, r2, r3
 800f65c:	011b      	lsls	r3, r3, #4
 800f65e:	3332      	adds	r3, #50	; 0x32
 800f660:	4a2c      	ldr	r2, [pc, #176]	; (800f714 <UART_SetConfig+0x734>)
 800f662:	fba2 2303 	umull	r2, r3, r2, r3
 800f666:	095b      	lsrs	r3, r3, #5
 800f668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f66c:	441e      	add	r6, r3
 800f66e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f672:	4618      	mov	r0, r3
 800f674:	f04f 0100 	mov.w	r1, #0
 800f678:	4602      	mov	r2, r0
 800f67a:	460b      	mov	r3, r1
 800f67c:	1894      	adds	r4, r2, r2
 800f67e:	603c      	str	r4, [r7, #0]
 800f680:	415b      	adcs	r3, r3
 800f682:	607b      	str	r3, [r7, #4]
 800f684:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f688:	1812      	adds	r2, r2, r0
 800f68a:	eb41 0303 	adc.w	r3, r1, r3
 800f68e:	f04f 0400 	mov.w	r4, #0
 800f692:	f04f 0500 	mov.w	r5, #0
 800f696:	00dd      	lsls	r5, r3, #3
 800f698:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f69c:	00d4      	lsls	r4, r2, #3
 800f69e:	4622      	mov	r2, r4
 800f6a0:	462b      	mov	r3, r5
 800f6a2:	1814      	adds	r4, r2, r0
 800f6a4:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800f6a8:	414b      	adcs	r3, r1
 800f6aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f6ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f6b2:	685b      	ldr	r3, [r3, #4]
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f04f 0100 	mov.w	r1, #0
 800f6ba:	f04f 0200 	mov.w	r2, #0
 800f6be:	f04f 0300 	mov.w	r3, #0
 800f6c2:	008b      	lsls	r3, r1, #2
 800f6c4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f6c8:	0082      	lsls	r2, r0, #2
 800f6ca:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800f6ce:	f7f1 fadb 	bl	8000c88 <__aeabi_uldivmod>
 800f6d2:	4602      	mov	r2, r0
 800f6d4:	460b      	mov	r3, r1
 800f6d6:	4b0f      	ldr	r3, [pc, #60]	; (800f714 <UART_SetConfig+0x734>)
 800f6d8:	fba3 1302 	umull	r1, r3, r3, r2
 800f6dc:	095b      	lsrs	r3, r3, #5
 800f6de:	2164      	movs	r1, #100	; 0x64
 800f6e0:	fb01 f303 	mul.w	r3, r1, r3
 800f6e4:	1ad3      	subs	r3, r2, r3
 800f6e6:	011b      	lsls	r3, r3, #4
 800f6e8:	3332      	adds	r3, #50	; 0x32
 800f6ea:	4a0a      	ldr	r2, [pc, #40]	; (800f714 <UART_SetConfig+0x734>)
 800f6ec:	fba2 2303 	umull	r2, r3, r2, r3
 800f6f0:	095b      	lsrs	r3, r3, #5
 800f6f2:	f003 020f 	and.w	r2, r3, #15
 800f6f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	4432      	add	r2, r6
 800f6fe:	609a      	str	r2, [r3, #8]
}
 800f700:	e7ff      	b.n	800f702 <UART_SetConfig+0x722>
 800f702:	bf00      	nop
 800f704:	37f4      	adds	r7, #244	; 0xf4
 800f706:	46bd      	mov	sp, r7
 800f708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f70c:	40011000 	.word	0x40011000
 800f710:	40011400 	.word	0x40011400
 800f714:	51eb851f 	.word	0x51eb851f

0800f718 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800f718:	b480      	push	{r7}
 800f71a:	b085      	sub	sp, #20
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
 800f720:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800f722:	2300      	movs	r3, #0
 800f724:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	681a      	ldr	r2, [r3, #0]
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f730:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800f732:	68fa      	ldr	r2, [r7, #12]
 800f734:	4b20      	ldr	r3, [pc, #128]	; (800f7b8 <FSMC_NORSRAM_Init+0xa0>)
 800f736:	4013      	ands	r3, r2
 800f738:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f742:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800f748:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800f74a:	683b      	ldr	r3, [r7, #0]
 800f74c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800f74e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800f754:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800f75a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800f760:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800f762:	683b      	ldr	r3, [r7, #0]
 800f764:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800f766:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800f76c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800f772:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800f778:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800f77e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800f784:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f786:	68fa      	ldr	r2, [r7, #12]
 800f788:	4313      	orrs	r3, r2
 800f78a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	689b      	ldr	r3, [r3, #8]
 800f790:	2b08      	cmp	r3, #8
 800f792:	d103      	bne.n	800f79c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f79a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	681a      	ldr	r2, [r3, #0]
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	68f9      	ldr	r1, [r7, #12]
 800f7a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f7a8:	2300      	movs	r3, #0
}
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	3714      	adds	r7, #20
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b4:	4770      	bx	lr
 800f7b6:	bf00      	nop
 800f7b8:	fff00080 	.word	0xfff00080

0800f7bc <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f7bc:	b480      	push	{r7}
 800f7be:	b087      	sub	sp, #28
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	60f8      	str	r0, [r7, #12]
 800f7c4:	60b9      	str	r1, [r7, #8]
 800f7c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	1c5a      	adds	r2, r3, #1
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7d6:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800f7d8:	697b      	ldr	r3, [r7, #20]
 800f7da:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800f7de:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	685b      	ldr	r3, [r3, #4]
 800f7e8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f7ea:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	689b      	ldr	r3, [r3, #8]
 800f7f0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f7f2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	68db      	ldr	r3, [r3, #12]
 800f7f8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800f7fa:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	691b      	ldr	r3, [r3, #16]
 800f800:	3b01      	subs	r3, #1
 800f802:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f804:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	695b      	ldr	r3, [r3, #20]
 800f80a:	3b02      	subs	r3, #2
 800f80c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f80e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f814:	4313      	orrs	r3, r2
 800f816:	697a      	ldr	r2, [r7, #20]
 800f818:	4313      	orrs	r3, r2
 800f81a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	1c5a      	adds	r2, r3, #1
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	6979      	ldr	r1, [r7, #20]
 800f824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f828:	2300      	movs	r3, #0
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	371c      	adds	r7, #28
 800f82e:	46bd      	mov	sp, r7
 800f830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f834:	4770      	bx	lr
	...

0800f838 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800f838:	b480      	push	{r7}
 800f83a:	b087      	sub	sp, #28
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	60f8      	str	r0, [r7, #12]
 800f840:	60b9      	str	r1, [r7, #8]
 800f842:	607a      	str	r2, [r7, #4]
 800f844:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800f846:	2300      	movs	r3, #0
 800f848:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f850:	d122      	bne.n	800f898 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	687a      	ldr	r2, [r7, #4]
 800f856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f85a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800f85c:	697a      	ldr	r2, [r7, #20]
 800f85e:	4b15      	ldr	r3, [pc, #84]	; (800f8b4 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800f860:	4013      	ands	r3, r2
 800f862:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	685b      	ldr	r3, [r3, #4]
 800f86c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f86e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800f870:	68bb      	ldr	r3, [r7, #8]
 800f872:	689b      	ldr	r3, [r3, #8]
 800f874:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f876:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	68db      	ldr	r3, [r3, #12]
 800f87c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800f87e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f884:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f886:	697a      	ldr	r2, [r7, #20]
 800f888:	4313      	orrs	r3, r2
 800f88a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	687a      	ldr	r2, [r7, #4]
 800f890:	6979      	ldr	r1, [r7, #20]
 800f892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f896:	e005      	b.n	800f8a4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	687a      	ldr	r2, [r7, #4]
 800f89c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f8a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800f8a4:	2300      	movs	r3, #0
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	371c      	adds	r7, #28
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b0:	4770      	bx	lr
 800f8b2:	bf00      	nop
 800f8b4:	cff00000 	.word	0xcff00000

0800f8b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f8b8:	b084      	sub	sp, #16
 800f8ba:	b580      	push	{r7, lr}
 800f8bc:	b084      	sub	sp, #16
 800f8be:	af00      	add	r7, sp, #0
 800f8c0:	6078      	str	r0, [r7, #4]
 800f8c2:	f107 001c 	add.w	r0, r7, #28
 800f8c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8cc:	2b01      	cmp	r3, #1
 800f8ce:	d122      	bne.n	800f916 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	68db      	ldr	r3, [r3, #12]
 800f8e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800f8e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f8e8:	687a      	ldr	r2, [r7, #4]
 800f8ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	68db      	ldr	r3, [r3, #12]
 800f8f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f8f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8fa:	2b01      	cmp	r3, #1
 800f8fc:	d105      	bne.n	800f90a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	68db      	ldr	r3, [r3, #12]
 800f902:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f001 fac6 	bl	8010e9c <USB_CoreReset>
 800f910:	4603      	mov	r3, r0
 800f912:	73fb      	strb	r3, [r7, #15]
 800f914:	e01a      	b.n	800f94c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	68db      	ldr	r3, [r3, #12]
 800f91a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f001 faba 	bl	8010e9c <USB_CoreReset>
 800f928:	4603      	mov	r3, r0
 800f92a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f92c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d106      	bne.n	800f940 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f936:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	639a      	str	r2, [r3, #56]	; 0x38
 800f93e:	e005      	b.n	800f94c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f944:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f94e:	2b01      	cmp	r3, #1
 800f950:	d10b      	bne.n	800f96a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	689b      	ldr	r3, [r3, #8]
 800f956:	f043 0206 	orr.w	r2, r3, #6
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	689b      	ldr	r3, [r3, #8]
 800f962:	f043 0220 	orr.w	r2, r3, #32
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f96a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f96c:	4618      	mov	r0, r3
 800f96e:	3710      	adds	r7, #16
 800f970:	46bd      	mov	sp, r7
 800f972:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f976:	b004      	add	sp, #16
 800f978:	4770      	bx	lr
	...

0800f97c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f97c:	b480      	push	{r7}
 800f97e:	b087      	sub	sp, #28
 800f980:	af00      	add	r7, sp, #0
 800f982:	60f8      	str	r0, [r7, #12]
 800f984:	60b9      	str	r1, [r7, #8]
 800f986:	4613      	mov	r3, r2
 800f988:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f98a:	79fb      	ldrb	r3, [r7, #7]
 800f98c:	2b02      	cmp	r3, #2
 800f98e:	d165      	bne.n	800fa5c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f990:	68bb      	ldr	r3, [r7, #8]
 800f992:	4a41      	ldr	r2, [pc, #260]	; (800fa98 <USB_SetTurnaroundTime+0x11c>)
 800f994:	4293      	cmp	r3, r2
 800f996:	d906      	bls.n	800f9a6 <USB_SetTurnaroundTime+0x2a>
 800f998:	68bb      	ldr	r3, [r7, #8]
 800f99a:	4a40      	ldr	r2, [pc, #256]	; (800fa9c <USB_SetTurnaroundTime+0x120>)
 800f99c:	4293      	cmp	r3, r2
 800f99e:	d202      	bcs.n	800f9a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f9a0:	230f      	movs	r3, #15
 800f9a2:	617b      	str	r3, [r7, #20]
 800f9a4:	e062      	b.n	800fa6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	4a3c      	ldr	r2, [pc, #240]	; (800fa9c <USB_SetTurnaroundTime+0x120>)
 800f9aa:	4293      	cmp	r3, r2
 800f9ac:	d306      	bcc.n	800f9bc <USB_SetTurnaroundTime+0x40>
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	4a3b      	ldr	r2, [pc, #236]	; (800faa0 <USB_SetTurnaroundTime+0x124>)
 800f9b2:	4293      	cmp	r3, r2
 800f9b4:	d202      	bcs.n	800f9bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f9b6:	230e      	movs	r3, #14
 800f9b8:	617b      	str	r3, [r7, #20]
 800f9ba:	e057      	b.n	800fa6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	4a38      	ldr	r2, [pc, #224]	; (800faa0 <USB_SetTurnaroundTime+0x124>)
 800f9c0:	4293      	cmp	r3, r2
 800f9c2:	d306      	bcc.n	800f9d2 <USB_SetTurnaroundTime+0x56>
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	4a37      	ldr	r2, [pc, #220]	; (800faa4 <USB_SetTurnaroundTime+0x128>)
 800f9c8:	4293      	cmp	r3, r2
 800f9ca:	d202      	bcs.n	800f9d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f9cc:	230d      	movs	r3, #13
 800f9ce:	617b      	str	r3, [r7, #20]
 800f9d0:	e04c      	b.n	800fa6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	4a33      	ldr	r2, [pc, #204]	; (800faa4 <USB_SetTurnaroundTime+0x128>)
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	d306      	bcc.n	800f9e8 <USB_SetTurnaroundTime+0x6c>
 800f9da:	68bb      	ldr	r3, [r7, #8]
 800f9dc:	4a32      	ldr	r2, [pc, #200]	; (800faa8 <USB_SetTurnaroundTime+0x12c>)
 800f9de:	4293      	cmp	r3, r2
 800f9e0:	d802      	bhi.n	800f9e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f9e2:	230c      	movs	r3, #12
 800f9e4:	617b      	str	r3, [r7, #20]
 800f9e6:	e041      	b.n	800fa6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	4a2f      	ldr	r2, [pc, #188]	; (800faa8 <USB_SetTurnaroundTime+0x12c>)
 800f9ec:	4293      	cmp	r3, r2
 800f9ee:	d906      	bls.n	800f9fe <USB_SetTurnaroundTime+0x82>
 800f9f0:	68bb      	ldr	r3, [r7, #8]
 800f9f2:	4a2e      	ldr	r2, [pc, #184]	; (800faac <USB_SetTurnaroundTime+0x130>)
 800f9f4:	4293      	cmp	r3, r2
 800f9f6:	d802      	bhi.n	800f9fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f9f8:	230b      	movs	r3, #11
 800f9fa:	617b      	str	r3, [r7, #20]
 800f9fc:	e036      	b.n	800fa6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	4a2a      	ldr	r2, [pc, #168]	; (800faac <USB_SetTurnaroundTime+0x130>)
 800fa02:	4293      	cmp	r3, r2
 800fa04:	d906      	bls.n	800fa14 <USB_SetTurnaroundTime+0x98>
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	4a29      	ldr	r2, [pc, #164]	; (800fab0 <USB_SetTurnaroundTime+0x134>)
 800fa0a:	4293      	cmp	r3, r2
 800fa0c:	d802      	bhi.n	800fa14 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800fa0e:	230a      	movs	r3, #10
 800fa10:	617b      	str	r3, [r7, #20]
 800fa12:	e02b      	b.n	800fa6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	4a26      	ldr	r2, [pc, #152]	; (800fab0 <USB_SetTurnaroundTime+0x134>)
 800fa18:	4293      	cmp	r3, r2
 800fa1a:	d906      	bls.n	800fa2a <USB_SetTurnaroundTime+0xae>
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	4a25      	ldr	r2, [pc, #148]	; (800fab4 <USB_SetTurnaroundTime+0x138>)
 800fa20:	4293      	cmp	r3, r2
 800fa22:	d202      	bcs.n	800fa2a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800fa24:	2309      	movs	r3, #9
 800fa26:	617b      	str	r3, [r7, #20]
 800fa28:	e020      	b.n	800fa6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800fa2a:	68bb      	ldr	r3, [r7, #8]
 800fa2c:	4a21      	ldr	r2, [pc, #132]	; (800fab4 <USB_SetTurnaroundTime+0x138>)
 800fa2e:	4293      	cmp	r3, r2
 800fa30:	d306      	bcc.n	800fa40 <USB_SetTurnaroundTime+0xc4>
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	4a20      	ldr	r2, [pc, #128]	; (800fab8 <USB_SetTurnaroundTime+0x13c>)
 800fa36:	4293      	cmp	r3, r2
 800fa38:	d802      	bhi.n	800fa40 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800fa3a:	2308      	movs	r3, #8
 800fa3c:	617b      	str	r3, [r7, #20]
 800fa3e:	e015      	b.n	800fa6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	4a1d      	ldr	r2, [pc, #116]	; (800fab8 <USB_SetTurnaroundTime+0x13c>)
 800fa44:	4293      	cmp	r3, r2
 800fa46:	d906      	bls.n	800fa56 <USB_SetTurnaroundTime+0xda>
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	4a1c      	ldr	r2, [pc, #112]	; (800fabc <USB_SetTurnaroundTime+0x140>)
 800fa4c:	4293      	cmp	r3, r2
 800fa4e:	d202      	bcs.n	800fa56 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800fa50:	2307      	movs	r3, #7
 800fa52:	617b      	str	r3, [r7, #20]
 800fa54:	e00a      	b.n	800fa6c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800fa56:	2306      	movs	r3, #6
 800fa58:	617b      	str	r3, [r7, #20]
 800fa5a:	e007      	b.n	800fa6c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800fa5c:	79fb      	ldrb	r3, [r7, #7]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d102      	bne.n	800fa68 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800fa62:	2309      	movs	r3, #9
 800fa64:	617b      	str	r3, [r7, #20]
 800fa66:	e001      	b.n	800fa6c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800fa68:	2309      	movs	r3, #9
 800fa6a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	68db      	ldr	r3, [r3, #12]
 800fa70:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	68da      	ldr	r2, [r3, #12]
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	029b      	lsls	r3, r3, #10
 800fa80:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800fa84:	431a      	orrs	r2, r3
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fa8a:	2300      	movs	r3, #0
}
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	371c      	adds	r7, #28
 800fa90:	46bd      	mov	sp, r7
 800fa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa96:	4770      	bx	lr
 800fa98:	00d8acbf 	.word	0x00d8acbf
 800fa9c:	00e4e1c0 	.word	0x00e4e1c0
 800faa0:	00f42400 	.word	0x00f42400
 800faa4:	01067380 	.word	0x01067380
 800faa8:	011a499f 	.word	0x011a499f
 800faac:	01312cff 	.word	0x01312cff
 800fab0:	014ca43f 	.word	0x014ca43f
 800fab4:	016e3600 	.word	0x016e3600
 800fab8:	01a6ab1f 	.word	0x01a6ab1f
 800fabc:	01e84800 	.word	0x01e84800

0800fac0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fac0:	b480      	push	{r7}
 800fac2:	b083      	sub	sp, #12
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	689b      	ldr	r3, [r3, #8]
 800facc:	f043 0201 	orr.w	r2, r3, #1
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fad4:	2300      	movs	r3, #0
}
 800fad6:	4618      	mov	r0, r3
 800fad8:	370c      	adds	r7, #12
 800fada:	46bd      	mov	sp, r7
 800fadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae0:	4770      	bx	lr

0800fae2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fae2:	b480      	push	{r7}
 800fae4:	b083      	sub	sp, #12
 800fae6:	af00      	add	r7, sp, #0
 800fae8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	689b      	ldr	r3, [r3, #8]
 800faee:	f023 0201 	bic.w	r2, r3, #1
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800faf6:	2300      	movs	r3, #0
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	370c      	adds	r7, #12
 800fafc:	46bd      	mov	sp, r7
 800fafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb02:	4770      	bx	lr

0800fb04 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b082      	sub	sp, #8
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	460b      	mov	r3, r1
 800fb0e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	68db      	ldr	r3, [r3, #12]
 800fb14:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fb1c:	78fb      	ldrb	r3, [r7, #3]
 800fb1e:	2b01      	cmp	r3, #1
 800fb20:	d106      	bne.n	800fb30 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	68db      	ldr	r3, [r3, #12]
 800fb26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	60da      	str	r2, [r3, #12]
 800fb2e:	e00b      	b.n	800fb48 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800fb30:	78fb      	ldrb	r3, [r7, #3]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d106      	bne.n	800fb44 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	68db      	ldr	r3, [r3, #12]
 800fb3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	60da      	str	r2, [r3, #12]
 800fb42:	e001      	b.n	800fb48 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800fb44:	2301      	movs	r3, #1
 800fb46:	e003      	b.n	800fb50 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800fb48:	2032      	movs	r0, #50	; 0x32
 800fb4a:	f7fb fdb3 	bl	800b6b4 <HAL_Delay>

  return HAL_OK;
 800fb4e:	2300      	movs	r3, #0
}
 800fb50:	4618      	mov	r0, r3
 800fb52:	3708      	adds	r7, #8
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}

0800fb58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fb58:	b084      	sub	sp, #16
 800fb5a:	b580      	push	{r7, lr}
 800fb5c:	b086      	sub	sp, #24
 800fb5e:	af00      	add	r7, sp, #0
 800fb60:	6078      	str	r0, [r7, #4]
 800fb62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fb66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fb72:	2300      	movs	r3, #0
 800fb74:	613b      	str	r3, [r7, #16]
 800fb76:	e009      	b.n	800fb8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fb78:	687a      	ldr	r2, [r7, #4]
 800fb7a:	693b      	ldr	r3, [r7, #16]
 800fb7c:	3340      	adds	r3, #64	; 0x40
 800fb7e:	009b      	lsls	r3, r3, #2
 800fb80:	4413      	add	r3, r2
 800fb82:	2200      	movs	r2, #0
 800fb84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fb86:	693b      	ldr	r3, [r7, #16]
 800fb88:	3301      	adds	r3, #1
 800fb8a:	613b      	str	r3, [r7, #16]
 800fb8c:	693b      	ldr	r3, [r7, #16]
 800fb8e:	2b0e      	cmp	r3, #14
 800fb90:	d9f2      	bls.n	800fb78 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fb92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d11c      	bne.n	800fbd2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb9e:	685b      	ldr	r3, [r3, #4]
 800fba0:	68fa      	ldr	r2, [r7, #12]
 800fba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fba6:	f043 0302 	orr.w	r3, r3, #2
 800fbaa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbb0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbbc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbc8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	639a      	str	r2, [r3, #56]	; 0x38
 800fbd0:	e00b      	b.n	800fbea <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbd6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbe2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fbf0:	461a      	mov	r2, r3
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc04:	461a      	mov	r2, r3
 800fc06:	680b      	ldr	r3, [r1, #0]
 800fc08:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc0c:	2b01      	cmp	r3, #1
 800fc0e:	d10c      	bne.n	800fc2a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d104      	bne.n	800fc20 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fc16:	2100      	movs	r1, #0
 800fc18:	6878      	ldr	r0, [r7, #4]
 800fc1a:	f000 f949 	bl	800feb0 <USB_SetDevSpeed>
 800fc1e:	e008      	b.n	800fc32 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fc20:	2101      	movs	r1, #1
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f000 f944 	bl	800feb0 <USB_SetDevSpeed>
 800fc28:	e003      	b.n	800fc32 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fc2a:	2103      	movs	r1, #3
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f000 f93f 	bl	800feb0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fc32:	2110      	movs	r1, #16
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f000 f8f3 	bl	800fe20 <USB_FlushTxFifo>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d001      	beq.n	800fc44 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800fc40:	2301      	movs	r3, #1
 800fc42:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f000 f911 	bl	800fe6c <USB_FlushRxFifo>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d001      	beq.n	800fc54 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800fc50:	2301      	movs	r3, #1
 800fc52:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc5a:	461a      	mov	r2, r3
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc66:	461a      	mov	r2, r3
 800fc68:	2300      	movs	r3, #0
 800fc6a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc72:	461a      	mov	r2, r3
 800fc74:	2300      	movs	r3, #0
 800fc76:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fc78:	2300      	movs	r3, #0
 800fc7a:	613b      	str	r3, [r7, #16]
 800fc7c:	e043      	b.n	800fd06 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fc7e:	693b      	ldr	r3, [r7, #16]
 800fc80:	015a      	lsls	r2, r3, #5
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	4413      	add	r3, r2
 800fc86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fc90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fc94:	d118      	bne.n	800fcc8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800fc96:	693b      	ldr	r3, [r7, #16]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d10a      	bne.n	800fcb2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fc9c:	693b      	ldr	r3, [r7, #16]
 800fc9e:	015a      	lsls	r2, r3, #5
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	4413      	add	r3, r2
 800fca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fca8:	461a      	mov	r2, r3
 800fcaa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fcae:	6013      	str	r3, [r2, #0]
 800fcb0:	e013      	b.n	800fcda <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fcb2:	693b      	ldr	r3, [r7, #16]
 800fcb4:	015a      	lsls	r2, r3, #5
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	4413      	add	r3, r2
 800fcba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcbe:	461a      	mov	r2, r3
 800fcc0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fcc4:	6013      	str	r3, [r2, #0]
 800fcc6:	e008      	b.n	800fcda <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fcc8:	693b      	ldr	r3, [r7, #16]
 800fcca:	015a      	lsls	r2, r3, #5
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	4413      	add	r3, r2
 800fcd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcd4:	461a      	mov	r2, r3
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fcda:	693b      	ldr	r3, [r7, #16]
 800fcdc:	015a      	lsls	r2, r3, #5
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	4413      	add	r3, r2
 800fce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fce6:	461a      	mov	r2, r3
 800fce8:	2300      	movs	r3, #0
 800fcea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fcec:	693b      	ldr	r3, [r7, #16]
 800fcee:	015a      	lsls	r2, r3, #5
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	4413      	add	r3, r2
 800fcf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcf8:	461a      	mov	r2, r3
 800fcfa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fcfe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fd00:	693b      	ldr	r3, [r7, #16]
 800fd02:	3301      	adds	r3, #1
 800fd04:	613b      	str	r3, [r7, #16]
 800fd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd08:	693a      	ldr	r2, [r7, #16]
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	d3b7      	bcc.n	800fc7e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fd0e:	2300      	movs	r3, #0
 800fd10:	613b      	str	r3, [r7, #16]
 800fd12:	e043      	b.n	800fd9c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	015a      	lsls	r2, r3, #5
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	4413      	add	r3, r2
 800fd1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fd26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fd2a:	d118      	bne.n	800fd5e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800fd2c:	693b      	ldr	r3, [r7, #16]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d10a      	bne.n	800fd48 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fd32:	693b      	ldr	r3, [r7, #16]
 800fd34:	015a      	lsls	r2, r3, #5
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	4413      	add	r3, r2
 800fd3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd3e:	461a      	mov	r2, r3
 800fd40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fd44:	6013      	str	r3, [r2, #0]
 800fd46:	e013      	b.n	800fd70 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fd48:	693b      	ldr	r3, [r7, #16]
 800fd4a:	015a      	lsls	r2, r3, #5
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	4413      	add	r3, r2
 800fd50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd54:	461a      	mov	r2, r3
 800fd56:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fd5a:	6013      	str	r3, [r2, #0]
 800fd5c:	e008      	b.n	800fd70 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fd5e:	693b      	ldr	r3, [r7, #16]
 800fd60:	015a      	lsls	r2, r3, #5
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	4413      	add	r3, r2
 800fd66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd6a:	461a      	mov	r2, r3
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fd70:	693b      	ldr	r3, [r7, #16]
 800fd72:	015a      	lsls	r2, r3, #5
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	4413      	add	r3, r2
 800fd78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd7c:	461a      	mov	r2, r3
 800fd7e:	2300      	movs	r3, #0
 800fd80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fd82:	693b      	ldr	r3, [r7, #16]
 800fd84:	015a      	lsls	r2, r3, #5
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	4413      	add	r3, r2
 800fd8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd8e:	461a      	mov	r2, r3
 800fd90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fd94:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fd96:	693b      	ldr	r3, [r7, #16]
 800fd98:	3301      	adds	r3, #1
 800fd9a:	613b      	str	r3, [r7, #16]
 800fd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd9e:	693a      	ldr	r2, [r7, #16]
 800fda0:	429a      	cmp	r2, r3
 800fda2:	d3b7      	bcc.n	800fd14 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fdaa:	691b      	ldr	r3, [r3, #16]
 800fdac:	68fa      	ldr	r2, [r7, #12]
 800fdae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fdb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fdb6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2200      	movs	r2, #0
 800fdbc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fdc4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d105      	bne.n	800fdd8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	699b      	ldr	r3, [r3, #24]
 800fdd0:	f043 0210 	orr.w	r2, r3, #16
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	699a      	ldr	r2, [r3, #24]
 800fddc:	4b0f      	ldr	r3, [pc, #60]	; (800fe1c <USB_DevInit+0x2c4>)
 800fdde:	4313      	orrs	r3, r2
 800fde0:	687a      	ldr	r2, [r7, #4]
 800fde2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fde4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d005      	beq.n	800fdf6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	699b      	ldr	r3, [r3, #24]
 800fdee:	f043 0208 	orr.w	r2, r3, #8
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fdf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fdf8:	2b01      	cmp	r3, #1
 800fdfa:	d107      	bne.n	800fe0c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	699b      	ldr	r3, [r3, #24]
 800fe00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fe04:	f043 0304 	orr.w	r3, r3, #4
 800fe08:	687a      	ldr	r2, [r7, #4]
 800fe0a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fe0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe0e:	4618      	mov	r0, r3
 800fe10:	3718      	adds	r7, #24
 800fe12:	46bd      	mov	sp, r7
 800fe14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fe18:	b004      	add	sp, #16
 800fe1a:	4770      	bx	lr
 800fe1c:	803c3800 	.word	0x803c3800

0800fe20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fe20:	b480      	push	{r7}
 800fe22:	b085      	sub	sp, #20
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
 800fe28:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	019b      	lsls	r3, r3, #6
 800fe32:	f043 0220 	orr.w	r2, r3, #32
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	3301      	adds	r3, #1
 800fe3e:	60fb      	str	r3, [r7, #12]
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	4a09      	ldr	r2, [pc, #36]	; (800fe68 <USB_FlushTxFifo+0x48>)
 800fe44:	4293      	cmp	r3, r2
 800fe46:	d901      	bls.n	800fe4c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800fe48:	2303      	movs	r3, #3
 800fe4a:	e006      	b.n	800fe5a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	691b      	ldr	r3, [r3, #16]
 800fe50:	f003 0320 	and.w	r3, r3, #32
 800fe54:	2b20      	cmp	r3, #32
 800fe56:	d0f0      	beq.n	800fe3a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800fe58:	2300      	movs	r3, #0
}
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	3714      	adds	r7, #20
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe64:	4770      	bx	lr
 800fe66:	bf00      	nop
 800fe68:	00030d40 	.word	0x00030d40

0800fe6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fe6c:	b480      	push	{r7}
 800fe6e:	b085      	sub	sp, #20
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800fe74:	2300      	movs	r3, #0
 800fe76:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2210      	movs	r2, #16
 800fe7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	3301      	adds	r3, #1
 800fe82:	60fb      	str	r3, [r7, #12]
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	4a09      	ldr	r2, [pc, #36]	; (800feac <USB_FlushRxFifo+0x40>)
 800fe88:	4293      	cmp	r3, r2
 800fe8a:	d901      	bls.n	800fe90 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800fe8c:	2303      	movs	r3, #3
 800fe8e:	e006      	b.n	800fe9e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	691b      	ldr	r3, [r3, #16]
 800fe94:	f003 0310 	and.w	r3, r3, #16
 800fe98:	2b10      	cmp	r3, #16
 800fe9a:	d0f0      	beq.n	800fe7e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800fe9c:	2300      	movs	r3, #0
}
 800fe9e:	4618      	mov	r0, r3
 800fea0:	3714      	adds	r7, #20
 800fea2:	46bd      	mov	sp, r7
 800fea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea8:	4770      	bx	lr
 800feaa:	bf00      	nop
 800feac:	00030d40 	.word	0x00030d40

0800feb0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800feb0:	b480      	push	{r7}
 800feb2:	b085      	sub	sp, #20
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
 800feb8:	460b      	mov	r3, r1
 800feba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fec6:	681a      	ldr	r2, [r3, #0]
 800fec8:	78fb      	ldrb	r3, [r7, #3]
 800feca:	68f9      	ldr	r1, [r7, #12]
 800fecc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fed0:	4313      	orrs	r3, r2
 800fed2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fed4:	2300      	movs	r3, #0
}
 800fed6:	4618      	mov	r0, r3
 800fed8:	3714      	adds	r7, #20
 800feda:	46bd      	mov	sp, r7
 800fedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee0:	4770      	bx	lr

0800fee2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800fee2:	b480      	push	{r7}
 800fee4:	b087      	sub	sp, #28
 800fee6:	af00      	add	r7, sp, #0
 800fee8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800feee:	693b      	ldr	r3, [r7, #16]
 800fef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fef4:	689b      	ldr	r3, [r3, #8]
 800fef6:	f003 0306 	and.w	r3, r3, #6
 800fefa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d102      	bne.n	800ff08 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ff02:	2300      	movs	r3, #0
 800ff04:	75fb      	strb	r3, [r7, #23]
 800ff06:	e00a      	b.n	800ff1e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	2b02      	cmp	r3, #2
 800ff0c:	d002      	beq.n	800ff14 <USB_GetDevSpeed+0x32>
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	2b06      	cmp	r3, #6
 800ff12:	d102      	bne.n	800ff1a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ff14:	2302      	movs	r3, #2
 800ff16:	75fb      	strb	r3, [r7, #23]
 800ff18:	e001      	b.n	800ff1e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ff1a:	230f      	movs	r3, #15
 800ff1c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ff1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	371c      	adds	r7, #28
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr

0800ff2c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ff2c:	b480      	push	{r7}
 800ff2e:	b085      	sub	sp, #20
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
 800ff34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	781b      	ldrb	r3, [r3, #0]
 800ff3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	785b      	ldrb	r3, [r3, #1]
 800ff44:	2b01      	cmp	r3, #1
 800ff46:	d13a      	bne.n	800ffbe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff4e:	69da      	ldr	r2, [r3, #28]
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	781b      	ldrb	r3, [r3, #0]
 800ff54:	f003 030f 	and.w	r3, r3, #15
 800ff58:	2101      	movs	r1, #1
 800ff5a:	fa01 f303 	lsl.w	r3, r1, r3
 800ff5e:	b29b      	uxth	r3, r3
 800ff60:	68f9      	ldr	r1, [r7, #12]
 800ff62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff66:	4313      	orrs	r3, r2
 800ff68:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ff6a:	68bb      	ldr	r3, [r7, #8]
 800ff6c:	015a      	lsls	r2, r3, #5
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	4413      	add	r3, r2
 800ff72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d155      	bne.n	801002c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ff80:	68bb      	ldr	r3, [r7, #8]
 800ff82:	015a      	lsls	r2, r3, #5
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	4413      	add	r3, r2
 800ff88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff8c:	681a      	ldr	r2, [r3, #0]
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	689b      	ldr	r3, [r3, #8]
 800ff92:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	78db      	ldrb	r3, [r3, #3]
 800ff9a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ff9c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	059b      	lsls	r3, r3, #22
 800ffa2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ffa4:	4313      	orrs	r3, r2
 800ffa6:	68ba      	ldr	r2, [r7, #8]
 800ffa8:	0151      	lsls	r1, r2, #5
 800ffaa:	68fa      	ldr	r2, [r7, #12]
 800ffac:	440a      	add	r2, r1
 800ffae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ffb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ffba:	6013      	str	r3, [r2, #0]
 800ffbc:	e036      	b.n	801002c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffc4:	69da      	ldr	r2, [r3, #28]
 800ffc6:	683b      	ldr	r3, [r7, #0]
 800ffc8:	781b      	ldrb	r3, [r3, #0]
 800ffca:	f003 030f 	and.w	r3, r3, #15
 800ffce:	2101      	movs	r1, #1
 800ffd0:	fa01 f303 	lsl.w	r3, r1, r3
 800ffd4:	041b      	lsls	r3, r3, #16
 800ffd6:	68f9      	ldr	r1, [r7, #12]
 800ffd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ffdc:	4313      	orrs	r3, r2
 800ffde:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	015a      	lsls	r2, r3, #5
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	4413      	add	r3, r2
 800ffe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d11a      	bne.n	801002c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fff6:	68bb      	ldr	r3, [r7, #8]
 800fff8:	015a      	lsls	r2, r3, #5
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	4413      	add	r3, r2
 800fffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010002:	681a      	ldr	r2, [r3, #0]
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	689b      	ldr	r3, [r3, #8]
 8010008:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	78db      	ldrb	r3, [r3, #3]
 8010010:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010012:	430b      	orrs	r3, r1
 8010014:	4313      	orrs	r3, r2
 8010016:	68ba      	ldr	r2, [r7, #8]
 8010018:	0151      	lsls	r1, r2, #5
 801001a:	68fa      	ldr	r2, [r7, #12]
 801001c:	440a      	add	r2, r1
 801001e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801002a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801002c:	2300      	movs	r3, #0
}
 801002e:	4618      	mov	r0, r3
 8010030:	3714      	adds	r7, #20
 8010032:	46bd      	mov	sp, r7
 8010034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010038:	4770      	bx	lr
	...

0801003c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801003c:	b480      	push	{r7}
 801003e:	b085      	sub	sp, #20
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
 8010044:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	781b      	ldrb	r3, [r3, #0]
 801004e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010050:	683b      	ldr	r3, [r7, #0]
 8010052:	785b      	ldrb	r3, [r3, #1]
 8010054:	2b01      	cmp	r3, #1
 8010056:	d161      	bne.n	801011c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010058:	68bb      	ldr	r3, [r7, #8]
 801005a:	015a      	lsls	r2, r3, #5
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	4413      	add	r3, r2
 8010060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801006a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801006e:	d11f      	bne.n	80100b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	015a      	lsls	r2, r3, #5
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	4413      	add	r3, r2
 8010078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	68ba      	ldr	r2, [r7, #8]
 8010080:	0151      	lsls	r1, r2, #5
 8010082:	68fa      	ldr	r2, [r7, #12]
 8010084:	440a      	add	r2, r1
 8010086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801008a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801008e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8010090:	68bb      	ldr	r3, [r7, #8]
 8010092:	015a      	lsls	r2, r3, #5
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	4413      	add	r3, r2
 8010098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	68ba      	ldr	r2, [r7, #8]
 80100a0:	0151      	lsls	r1, r2, #5
 80100a2:	68fa      	ldr	r2, [r7, #12]
 80100a4:	440a      	add	r2, r1
 80100a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80100ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	781b      	ldrb	r3, [r3, #0]
 80100bc:	f003 030f 	and.w	r3, r3, #15
 80100c0:	2101      	movs	r1, #1
 80100c2:	fa01 f303 	lsl.w	r3, r1, r3
 80100c6:	b29b      	uxth	r3, r3
 80100c8:	43db      	mvns	r3, r3
 80100ca:	68f9      	ldr	r1, [r7, #12]
 80100cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80100d0:	4013      	ands	r3, r2
 80100d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100da:	69da      	ldr	r2, [r3, #28]
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	781b      	ldrb	r3, [r3, #0]
 80100e0:	f003 030f 	and.w	r3, r3, #15
 80100e4:	2101      	movs	r1, #1
 80100e6:	fa01 f303 	lsl.w	r3, r1, r3
 80100ea:	b29b      	uxth	r3, r3
 80100ec:	43db      	mvns	r3, r3
 80100ee:	68f9      	ldr	r1, [r7, #12]
 80100f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80100f4:	4013      	ands	r3, r2
 80100f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	015a      	lsls	r2, r3, #5
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	4413      	add	r3, r2
 8010100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010104:	681a      	ldr	r2, [r3, #0]
 8010106:	68bb      	ldr	r3, [r7, #8]
 8010108:	0159      	lsls	r1, r3, #5
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	440b      	add	r3, r1
 801010e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010112:	4619      	mov	r1, r3
 8010114:	4b35      	ldr	r3, [pc, #212]	; (80101ec <USB_DeactivateEndpoint+0x1b0>)
 8010116:	4013      	ands	r3, r2
 8010118:	600b      	str	r3, [r1, #0]
 801011a:	e060      	b.n	80101de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801011c:	68bb      	ldr	r3, [r7, #8]
 801011e:	015a      	lsls	r2, r3, #5
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	4413      	add	r3, r2
 8010124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801012e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010132:	d11f      	bne.n	8010174 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010134:	68bb      	ldr	r3, [r7, #8]
 8010136:	015a      	lsls	r2, r3, #5
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	4413      	add	r3, r2
 801013c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	68ba      	ldr	r2, [r7, #8]
 8010144:	0151      	lsls	r1, r2, #5
 8010146:	68fa      	ldr	r2, [r7, #12]
 8010148:	440a      	add	r2, r1
 801014a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801014e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010152:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	015a      	lsls	r2, r3, #5
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	4413      	add	r3, r2
 801015c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	68ba      	ldr	r2, [r7, #8]
 8010164:	0151      	lsls	r1, r2, #5
 8010166:	68fa      	ldr	r2, [r7, #12]
 8010168:	440a      	add	r2, r1
 801016a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801016e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010172:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801017a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	781b      	ldrb	r3, [r3, #0]
 8010180:	f003 030f 	and.w	r3, r3, #15
 8010184:	2101      	movs	r1, #1
 8010186:	fa01 f303 	lsl.w	r3, r1, r3
 801018a:	041b      	lsls	r3, r3, #16
 801018c:	43db      	mvns	r3, r3
 801018e:	68f9      	ldr	r1, [r7, #12]
 8010190:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010194:	4013      	ands	r3, r2
 8010196:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801019e:	69da      	ldr	r2, [r3, #28]
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	781b      	ldrb	r3, [r3, #0]
 80101a4:	f003 030f 	and.w	r3, r3, #15
 80101a8:	2101      	movs	r1, #1
 80101aa:	fa01 f303 	lsl.w	r3, r1, r3
 80101ae:	041b      	lsls	r3, r3, #16
 80101b0:	43db      	mvns	r3, r3
 80101b2:	68f9      	ldr	r1, [r7, #12]
 80101b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80101b8:	4013      	ands	r3, r2
 80101ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	015a      	lsls	r2, r3, #5
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	4413      	add	r3, r2
 80101c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101c8:	681a      	ldr	r2, [r3, #0]
 80101ca:	68bb      	ldr	r3, [r7, #8]
 80101cc:	0159      	lsls	r1, r3, #5
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	440b      	add	r3, r1
 80101d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101d6:	4619      	mov	r1, r3
 80101d8:	4b05      	ldr	r3, [pc, #20]	; (80101f0 <USB_DeactivateEndpoint+0x1b4>)
 80101da:	4013      	ands	r3, r2
 80101dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80101de:	2300      	movs	r3, #0
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	3714      	adds	r7, #20
 80101e4:	46bd      	mov	sp, r7
 80101e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ea:	4770      	bx	lr
 80101ec:	ec337800 	.word	0xec337800
 80101f0:	eff37800 	.word	0xeff37800

080101f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b08a      	sub	sp, #40	; 0x28
 80101f8:	af02      	add	r7, sp, #8
 80101fa:	60f8      	str	r0, [r7, #12]
 80101fc:	60b9      	str	r1, [r7, #8]
 80101fe:	4613      	mov	r3, r2
 8010200:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8010206:	68bb      	ldr	r3, [r7, #8]
 8010208:	781b      	ldrb	r3, [r3, #0]
 801020a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	785b      	ldrb	r3, [r3, #1]
 8010210:	2b01      	cmp	r3, #1
 8010212:	f040 815c 	bne.w	80104ce <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	695b      	ldr	r3, [r3, #20]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d132      	bne.n	8010284 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801021e:	69bb      	ldr	r3, [r7, #24]
 8010220:	015a      	lsls	r2, r3, #5
 8010222:	69fb      	ldr	r3, [r7, #28]
 8010224:	4413      	add	r3, r2
 8010226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801022a:	691b      	ldr	r3, [r3, #16]
 801022c:	69ba      	ldr	r2, [r7, #24]
 801022e:	0151      	lsls	r1, r2, #5
 8010230:	69fa      	ldr	r2, [r7, #28]
 8010232:	440a      	add	r2, r1
 8010234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010238:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801023c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010240:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010242:	69bb      	ldr	r3, [r7, #24]
 8010244:	015a      	lsls	r2, r3, #5
 8010246:	69fb      	ldr	r3, [r7, #28]
 8010248:	4413      	add	r3, r2
 801024a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801024e:	691b      	ldr	r3, [r3, #16]
 8010250:	69ba      	ldr	r2, [r7, #24]
 8010252:	0151      	lsls	r1, r2, #5
 8010254:	69fa      	ldr	r2, [r7, #28]
 8010256:	440a      	add	r2, r1
 8010258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801025c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010260:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010262:	69bb      	ldr	r3, [r7, #24]
 8010264:	015a      	lsls	r2, r3, #5
 8010266:	69fb      	ldr	r3, [r7, #28]
 8010268:	4413      	add	r3, r2
 801026a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801026e:	691b      	ldr	r3, [r3, #16]
 8010270:	69ba      	ldr	r2, [r7, #24]
 8010272:	0151      	lsls	r1, r2, #5
 8010274:	69fa      	ldr	r2, [r7, #28]
 8010276:	440a      	add	r2, r1
 8010278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801027c:	0cdb      	lsrs	r3, r3, #19
 801027e:	04db      	lsls	r3, r3, #19
 8010280:	6113      	str	r3, [r2, #16]
 8010282:	e074      	b.n	801036e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010284:	69bb      	ldr	r3, [r7, #24]
 8010286:	015a      	lsls	r2, r3, #5
 8010288:	69fb      	ldr	r3, [r7, #28]
 801028a:	4413      	add	r3, r2
 801028c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010290:	691b      	ldr	r3, [r3, #16]
 8010292:	69ba      	ldr	r2, [r7, #24]
 8010294:	0151      	lsls	r1, r2, #5
 8010296:	69fa      	ldr	r2, [r7, #28]
 8010298:	440a      	add	r2, r1
 801029a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801029e:	0cdb      	lsrs	r3, r3, #19
 80102a0:	04db      	lsls	r3, r3, #19
 80102a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80102a4:	69bb      	ldr	r3, [r7, #24]
 80102a6:	015a      	lsls	r2, r3, #5
 80102a8:	69fb      	ldr	r3, [r7, #28]
 80102aa:	4413      	add	r3, r2
 80102ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102b0:	691b      	ldr	r3, [r3, #16]
 80102b2:	69ba      	ldr	r2, [r7, #24]
 80102b4:	0151      	lsls	r1, r2, #5
 80102b6:	69fa      	ldr	r2, [r7, #28]
 80102b8:	440a      	add	r2, r1
 80102ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80102c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80102c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80102c8:	69bb      	ldr	r3, [r7, #24]
 80102ca:	015a      	lsls	r2, r3, #5
 80102cc:	69fb      	ldr	r3, [r7, #28]
 80102ce:	4413      	add	r3, r2
 80102d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102d4:	691a      	ldr	r2, [r3, #16]
 80102d6:	68bb      	ldr	r3, [r7, #8]
 80102d8:	6959      	ldr	r1, [r3, #20]
 80102da:	68bb      	ldr	r3, [r7, #8]
 80102dc:	689b      	ldr	r3, [r3, #8]
 80102de:	440b      	add	r3, r1
 80102e0:	1e59      	subs	r1, r3, #1
 80102e2:	68bb      	ldr	r3, [r7, #8]
 80102e4:	689b      	ldr	r3, [r3, #8]
 80102e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80102ea:	04d9      	lsls	r1, r3, #19
 80102ec:	4b9d      	ldr	r3, [pc, #628]	; (8010564 <USB_EPStartXfer+0x370>)
 80102ee:	400b      	ands	r3, r1
 80102f0:	69b9      	ldr	r1, [r7, #24]
 80102f2:	0148      	lsls	r0, r1, #5
 80102f4:	69f9      	ldr	r1, [r7, #28]
 80102f6:	4401      	add	r1, r0
 80102f8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80102fc:	4313      	orrs	r3, r2
 80102fe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010300:	69bb      	ldr	r3, [r7, #24]
 8010302:	015a      	lsls	r2, r3, #5
 8010304:	69fb      	ldr	r3, [r7, #28]
 8010306:	4413      	add	r3, r2
 8010308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801030c:	691a      	ldr	r2, [r3, #16]
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	695b      	ldr	r3, [r3, #20]
 8010312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010316:	69b9      	ldr	r1, [r7, #24]
 8010318:	0148      	lsls	r0, r1, #5
 801031a:	69f9      	ldr	r1, [r7, #28]
 801031c:	4401      	add	r1, r0
 801031e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010322:	4313      	orrs	r3, r2
 8010324:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8010326:	68bb      	ldr	r3, [r7, #8]
 8010328:	78db      	ldrb	r3, [r3, #3]
 801032a:	2b01      	cmp	r3, #1
 801032c:	d11f      	bne.n	801036e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801032e:	69bb      	ldr	r3, [r7, #24]
 8010330:	015a      	lsls	r2, r3, #5
 8010332:	69fb      	ldr	r3, [r7, #28]
 8010334:	4413      	add	r3, r2
 8010336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801033a:	691b      	ldr	r3, [r3, #16]
 801033c:	69ba      	ldr	r2, [r7, #24]
 801033e:	0151      	lsls	r1, r2, #5
 8010340:	69fa      	ldr	r2, [r7, #28]
 8010342:	440a      	add	r2, r1
 8010344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010348:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801034c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801034e:	69bb      	ldr	r3, [r7, #24]
 8010350:	015a      	lsls	r2, r3, #5
 8010352:	69fb      	ldr	r3, [r7, #28]
 8010354:	4413      	add	r3, r2
 8010356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801035a:	691b      	ldr	r3, [r3, #16]
 801035c:	69ba      	ldr	r2, [r7, #24]
 801035e:	0151      	lsls	r1, r2, #5
 8010360:	69fa      	ldr	r2, [r7, #28]
 8010362:	440a      	add	r2, r1
 8010364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010368:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801036c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801036e:	79fb      	ldrb	r3, [r7, #7]
 8010370:	2b01      	cmp	r3, #1
 8010372:	d14b      	bne.n	801040c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010374:	68bb      	ldr	r3, [r7, #8]
 8010376:	691b      	ldr	r3, [r3, #16]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d009      	beq.n	8010390 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801037c:	69bb      	ldr	r3, [r7, #24]
 801037e:	015a      	lsls	r2, r3, #5
 8010380:	69fb      	ldr	r3, [r7, #28]
 8010382:	4413      	add	r3, r2
 8010384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010388:	461a      	mov	r2, r3
 801038a:	68bb      	ldr	r3, [r7, #8]
 801038c:	691b      	ldr	r3, [r3, #16]
 801038e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010390:	68bb      	ldr	r3, [r7, #8]
 8010392:	78db      	ldrb	r3, [r3, #3]
 8010394:	2b01      	cmp	r3, #1
 8010396:	d128      	bne.n	80103ea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010398:	69fb      	ldr	r3, [r7, #28]
 801039a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801039e:	689b      	ldr	r3, [r3, #8]
 80103a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d110      	bne.n	80103ca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80103a8:	69bb      	ldr	r3, [r7, #24]
 80103aa:	015a      	lsls	r2, r3, #5
 80103ac:	69fb      	ldr	r3, [r7, #28]
 80103ae:	4413      	add	r3, r2
 80103b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	69ba      	ldr	r2, [r7, #24]
 80103b8:	0151      	lsls	r1, r2, #5
 80103ba:	69fa      	ldr	r2, [r7, #28]
 80103bc:	440a      	add	r2, r1
 80103be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80103c6:	6013      	str	r3, [r2, #0]
 80103c8:	e00f      	b.n	80103ea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80103ca:	69bb      	ldr	r3, [r7, #24]
 80103cc:	015a      	lsls	r2, r3, #5
 80103ce:	69fb      	ldr	r3, [r7, #28]
 80103d0:	4413      	add	r3, r2
 80103d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	69ba      	ldr	r2, [r7, #24]
 80103da:	0151      	lsls	r1, r2, #5
 80103dc:	69fa      	ldr	r2, [r7, #28]
 80103de:	440a      	add	r2, r1
 80103e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80103e8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80103ea:	69bb      	ldr	r3, [r7, #24]
 80103ec:	015a      	lsls	r2, r3, #5
 80103ee:	69fb      	ldr	r3, [r7, #28]
 80103f0:	4413      	add	r3, r2
 80103f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	69ba      	ldr	r2, [r7, #24]
 80103fa:	0151      	lsls	r1, r2, #5
 80103fc:	69fa      	ldr	r2, [r7, #28]
 80103fe:	440a      	add	r2, r1
 8010400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010404:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010408:	6013      	str	r3, [r2, #0]
 801040a:	e12f      	b.n	801066c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801040c:	69bb      	ldr	r3, [r7, #24]
 801040e:	015a      	lsls	r2, r3, #5
 8010410:	69fb      	ldr	r3, [r7, #28]
 8010412:	4413      	add	r3, r2
 8010414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	69ba      	ldr	r2, [r7, #24]
 801041c:	0151      	lsls	r1, r2, #5
 801041e:	69fa      	ldr	r2, [r7, #28]
 8010420:	440a      	add	r2, r1
 8010422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010426:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801042a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	78db      	ldrb	r3, [r3, #3]
 8010430:	2b01      	cmp	r3, #1
 8010432:	d015      	beq.n	8010460 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	695b      	ldr	r3, [r3, #20]
 8010438:	2b00      	cmp	r3, #0
 801043a:	f000 8117 	beq.w	801066c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801043e:	69fb      	ldr	r3, [r7, #28]
 8010440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010446:	68bb      	ldr	r3, [r7, #8]
 8010448:	781b      	ldrb	r3, [r3, #0]
 801044a:	f003 030f 	and.w	r3, r3, #15
 801044e:	2101      	movs	r1, #1
 8010450:	fa01 f303 	lsl.w	r3, r1, r3
 8010454:	69f9      	ldr	r1, [r7, #28]
 8010456:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801045a:	4313      	orrs	r3, r2
 801045c:	634b      	str	r3, [r1, #52]	; 0x34
 801045e:	e105      	b.n	801066c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010460:	69fb      	ldr	r3, [r7, #28]
 8010462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010466:	689b      	ldr	r3, [r3, #8]
 8010468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801046c:	2b00      	cmp	r3, #0
 801046e:	d110      	bne.n	8010492 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010470:	69bb      	ldr	r3, [r7, #24]
 8010472:	015a      	lsls	r2, r3, #5
 8010474:	69fb      	ldr	r3, [r7, #28]
 8010476:	4413      	add	r3, r2
 8010478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	69ba      	ldr	r2, [r7, #24]
 8010480:	0151      	lsls	r1, r2, #5
 8010482:	69fa      	ldr	r2, [r7, #28]
 8010484:	440a      	add	r2, r1
 8010486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801048a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801048e:	6013      	str	r3, [r2, #0]
 8010490:	e00f      	b.n	80104b2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010492:	69bb      	ldr	r3, [r7, #24]
 8010494:	015a      	lsls	r2, r3, #5
 8010496:	69fb      	ldr	r3, [r7, #28]
 8010498:	4413      	add	r3, r2
 801049a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	69ba      	ldr	r2, [r7, #24]
 80104a2:	0151      	lsls	r1, r2, #5
 80104a4:	69fa      	ldr	r2, [r7, #28]
 80104a6:	440a      	add	r2, r1
 80104a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80104b0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	68d9      	ldr	r1, [r3, #12]
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	781a      	ldrb	r2, [r3, #0]
 80104ba:	68bb      	ldr	r3, [r7, #8]
 80104bc:	695b      	ldr	r3, [r3, #20]
 80104be:	b298      	uxth	r0, r3
 80104c0:	79fb      	ldrb	r3, [r7, #7]
 80104c2:	9300      	str	r3, [sp, #0]
 80104c4:	4603      	mov	r3, r0
 80104c6:	68f8      	ldr	r0, [r7, #12]
 80104c8:	f000 fa2b 	bl	8010922 <USB_WritePacket>
 80104cc:	e0ce      	b.n	801066c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80104ce:	69bb      	ldr	r3, [r7, #24]
 80104d0:	015a      	lsls	r2, r3, #5
 80104d2:	69fb      	ldr	r3, [r7, #28]
 80104d4:	4413      	add	r3, r2
 80104d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104da:	691b      	ldr	r3, [r3, #16]
 80104dc:	69ba      	ldr	r2, [r7, #24]
 80104de:	0151      	lsls	r1, r2, #5
 80104e0:	69fa      	ldr	r2, [r7, #28]
 80104e2:	440a      	add	r2, r1
 80104e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80104e8:	0cdb      	lsrs	r3, r3, #19
 80104ea:	04db      	lsls	r3, r3, #19
 80104ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80104ee:	69bb      	ldr	r3, [r7, #24]
 80104f0:	015a      	lsls	r2, r3, #5
 80104f2:	69fb      	ldr	r3, [r7, #28]
 80104f4:	4413      	add	r3, r2
 80104f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104fa:	691b      	ldr	r3, [r3, #16]
 80104fc:	69ba      	ldr	r2, [r7, #24]
 80104fe:	0151      	lsls	r1, r2, #5
 8010500:	69fa      	ldr	r2, [r7, #28]
 8010502:	440a      	add	r2, r1
 8010504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010508:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801050c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010510:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8010512:	68bb      	ldr	r3, [r7, #8]
 8010514:	695b      	ldr	r3, [r3, #20]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d126      	bne.n	8010568 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801051a:	69bb      	ldr	r3, [r7, #24]
 801051c:	015a      	lsls	r2, r3, #5
 801051e:	69fb      	ldr	r3, [r7, #28]
 8010520:	4413      	add	r3, r2
 8010522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010526:	691a      	ldr	r2, [r3, #16]
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	689b      	ldr	r3, [r3, #8]
 801052c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010530:	69b9      	ldr	r1, [r7, #24]
 8010532:	0148      	lsls	r0, r1, #5
 8010534:	69f9      	ldr	r1, [r7, #28]
 8010536:	4401      	add	r1, r0
 8010538:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801053c:	4313      	orrs	r3, r2
 801053e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010540:	69bb      	ldr	r3, [r7, #24]
 8010542:	015a      	lsls	r2, r3, #5
 8010544:	69fb      	ldr	r3, [r7, #28]
 8010546:	4413      	add	r3, r2
 8010548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801054c:	691b      	ldr	r3, [r3, #16]
 801054e:	69ba      	ldr	r2, [r7, #24]
 8010550:	0151      	lsls	r1, r2, #5
 8010552:	69fa      	ldr	r2, [r7, #28]
 8010554:	440a      	add	r2, r1
 8010556:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801055a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801055e:	6113      	str	r3, [r2, #16]
 8010560:	e036      	b.n	80105d0 <USB_EPStartXfer+0x3dc>
 8010562:	bf00      	nop
 8010564:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	695a      	ldr	r2, [r3, #20]
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	689b      	ldr	r3, [r3, #8]
 8010570:	4413      	add	r3, r2
 8010572:	1e5a      	subs	r2, r3, #1
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	689b      	ldr	r3, [r3, #8]
 8010578:	fbb2 f3f3 	udiv	r3, r2, r3
 801057c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801057e:	69bb      	ldr	r3, [r7, #24]
 8010580:	015a      	lsls	r2, r3, #5
 8010582:	69fb      	ldr	r3, [r7, #28]
 8010584:	4413      	add	r3, r2
 8010586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801058a:	691a      	ldr	r2, [r3, #16]
 801058c:	8afb      	ldrh	r3, [r7, #22]
 801058e:	04d9      	lsls	r1, r3, #19
 8010590:	4b39      	ldr	r3, [pc, #228]	; (8010678 <USB_EPStartXfer+0x484>)
 8010592:	400b      	ands	r3, r1
 8010594:	69b9      	ldr	r1, [r7, #24]
 8010596:	0148      	lsls	r0, r1, #5
 8010598:	69f9      	ldr	r1, [r7, #28]
 801059a:	4401      	add	r1, r0
 801059c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80105a0:	4313      	orrs	r3, r2
 80105a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80105a4:	69bb      	ldr	r3, [r7, #24]
 80105a6:	015a      	lsls	r2, r3, #5
 80105a8:	69fb      	ldr	r3, [r7, #28]
 80105aa:	4413      	add	r3, r2
 80105ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105b0:	691a      	ldr	r2, [r3, #16]
 80105b2:	68bb      	ldr	r3, [r7, #8]
 80105b4:	689b      	ldr	r3, [r3, #8]
 80105b6:	8af9      	ldrh	r1, [r7, #22]
 80105b8:	fb01 f303 	mul.w	r3, r1, r3
 80105bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80105c0:	69b9      	ldr	r1, [r7, #24]
 80105c2:	0148      	lsls	r0, r1, #5
 80105c4:	69f9      	ldr	r1, [r7, #28]
 80105c6:	4401      	add	r1, r0
 80105c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80105cc:	4313      	orrs	r3, r2
 80105ce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80105d0:	79fb      	ldrb	r3, [r7, #7]
 80105d2:	2b01      	cmp	r3, #1
 80105d4:	d10d      	bne.n	80105f2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80105d6:	68bb      	ldr	r3, [r7, #8]
 80105d8:	68db      	ldr	r3, [r3, #12]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d009      	beq.n	80105f2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80105de:	68bb      	ldr	r3, [r7, #8]
 80105e0:	68d9      	ldr	r1, [r3, #12]
 80105e2:	69bb      	ldr	r3, [r7, #24]
 80105e4:	015a      	lsls	r2, r3, #5
 80105e6:	69fb      	ldr	r3, [r7, #28]
 80105e8:	4413      	add	r3, r2
 80105ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105ee:	460a      	mov	r2, r1
 80105f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80105f2:	68bb      	ldr	r3, [r7, #8]
 80105f4:	78db      	ldrb	r3, [r3, #3]
 80105f6:	2b01      	cmp	r3, #1
 80105f8:	d128      	bne.n	801064c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80105fa:	69fb      	ldr	r3, [r7, #28]
 80105fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010600:	689b      	ldr	r3, [r3, #8]
 8010602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010606:	2b00      	cmp	r3, #0
 8010608:	d110      	bne.n	801062c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801060a:	69bb      	ldr	r3, [r7, #24]
 801060c:	015a      	lsls	r2, r3, #5
 801060e:	69fb      	ldr	r3, [r7, #28]
 8010610:	4413      	add	r3, r2
 8010612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	69ba      	ldr	r2, [r7, #24]
 801061a:	0151      	lsls	r1, r2, #5
 801061c:	69fa      	ldr	r2, [r7, #28]
 801061e:	440a      	add	r2, r1
 8010620:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010624:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010628:	6013      	str	r3, [r2, #0]
 801062a:	e00f      	b.n	801064c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801062c:	69bb      	ldr	r3, [r7, #24]
 801062e:	015a      	lsls	r2, r3, #5
 8010630:	69fb      	ldr	r3, [r7, #28]
 8010632:	4413      	add	r3, r2
 8010634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	69ba      	ldr	r2, [r7, #24]
 801063c:	0151      	lsls	r1, r2, #5
 801063e:	69fa      	ldr	r2, [r7, #28]
 8010640:	440a      	add	r2, r1
 8010642:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801064a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801064c:	69bb      	ldr	r3, [r7, #24]
 801064e:	015a      	lsls	r2, r3, #5
 8010650:	69fb      	ldr	r3, [r7, #28]
 8010652:	4413      	add	r3, r2
 8010654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	69ba      	ldr	r2, [r7, #24]
 801065c:	0151      	lsls	r1, r2, #5
 801065e:	69fa      	ldr	r2, [r7, #28]
 8010660:	440a      	add	r2, r1
 8010662:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010666:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801066a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801066c:	2300      	movs	r3, #0
}
 801066e:	4618      	mov	r0, r3
 8010670:	3720      	adds	r7, #32
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}
 8010676:	bf00      	nop
 8010678:	1ff80000 	.word	0x1ff80000

0801067c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801067c:	b480      	push	{r7}
 801067e:	b087      	sub	sp, #28
 8010680:	af00      	add	r7, sp, #0
 8010682:	60f8      	str	r0, [r7, #12]
 8010684:	60b9      	str	r1, [r7, #8]
 8010686:	4613      	mov	r3, r2
 8010688:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	781b      	ldrb	r3, [r3, #0]
 8010692:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	785b      	ldrb	r3, [r3, #1]
 8010698:	2b01      	cmp	r3, #1
 801069a:	f040 80cd 	bne.w	8010838 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	695b      	ldr	r3, [r3, #20]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d132      	bne.n	801070c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	015a      	lsls	r2, r3, #5
 80106aa:	697b      	ldr	r3, [r7, #20]
 80106ac:	4413      	add	r3, r2
 80106ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106b2:	691b      	ldr	r3, [r3, #16]
 80106b4:	693a      	ldr	r2, [r7, #16]
 80106b6:	0151      	lsls	r1, r2, #5
 80106b8:	697a      	ldr	r2, [r7, #20]
 80106ba:	440a      	add	r2, r1
 80106bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80106c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80106c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80106ca:	693b      	ldr	r3, [r7, #16]
 80106cc:	015a      	lsls	r2, r3, #5
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	4413      	add	r3, r2
 80106d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106d6:	691b      	ldr	r3, [r3, #16]
 80106d8:	693a      	ldr	r2, [r7, #16]
 80106da:	0151      	lsls	r1, r2, #5
 80106dc:	697a      	ldr	r2, [r7, #20]
 80106de:	440a      	add	r2, r1
 80106e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80106e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80106ea:	693b      	ldr	r3, [r7, #16]
 80106ec:	015a      	lsls	r2, r3, #5
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	4413      	add	r3, r2
 80106f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106f6:	691b      	ldr	r3, [r3, #16]
 80106f8:	693a      	ldr	r2, [r7, #16]
 80106fa:	0151      	lsls	r1, r2, #5
 80106fc:	697a      	ldr	r2, [r7, #20]
 80106fe:	440a      	add	r2, r1
 8010700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010704:	0cdb      	lsrs	r3, r3, #19
 8010706:	04db      	lsls	r3, r3, #19
 8010708:	6113      	str	r3, [r2, #16]
 801070a:	e04e      	b.n	80107aa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801070c:	693b      	ldr	r3, [r7, #16]
 801070e:	015a      	lsls	r2, r3, #5
 8010710:	697b      	ldr	r3, [r7, #20]
 8010712:	4413      	add	r3, r2
 8010714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010718:	691b      	ldr	r3, [r3, #16]
 801071a:	693a      	ldr	r2, [r7, #16]
 801071c:	0151      	lsls	r1, r2, #5
 801071e:	697a      	ldr	r2, [r7, #20]
 8010720:	440a      	add	r2, r1
 8010722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010726:	0cdb      	lsrs	r3, r3, #19
 8010728:	04db      	lsls	r3, r3, #19
 801072a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801072c:	693b      	ldr	r3, [r7, #16]
 801072e:	015a      	lsls	r2, r3, #5
 8010730:	697b      	ldr	r3, [r7, #20]
 8010732:	4413      	add	r3, r2
 8010734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010738:	691b      	ldr	r3, [r3, #16]
 801073a:	693a      	ldr	r2, [r7, #16]
 801073c:	0151      	lsls	r1, r2, #5
 801073e:	697a      	ldr	r2, [r7, #20]
 8010740:	440a      	add	r2, r1
 8010742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010746:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801074a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801074e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010750:	68bb      	ldr	r3, [r7, #8]
 8010752:	695a      	ldr	r2, [r3, #20]
 8010754:	68bb      	ldr	r3, [r7, #8]
 8010756:	689b      	ldr	r3, [r3, #8]
 8010758:	429a      	cmp	r2, r3
 801075a:	d903      	bls.n	8010764 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	689a      	ldr	r2, [r3, #8]
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010764:	693b      	ldr	r3, [r7, #16]
 8010766:	015a      	lsls	r2, r3, #5
 8010768:	697b      	ldr	r3, [r7, #20]
 801076a:	4413      	add	r3, r2
 801076c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010770:	691b      	ldr	r3, [r3, #16]
 8010772:	693a      	ldr	r2, [r7, #16]
 8010774:	0151      	lsls	r1, r2, #5
 8010776:	697a      	ldr	r2, [r7, #20]
 8010778:	440a      	add	r2, r1
 801077a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801077e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010782:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010784:	693b      	ldr	r3, [r7, #16]
 8010786:	015a      	lsls	r2, r3, #5
 8010788:	697b      	ldr	r3, [r7, #20]
 801078a:	4413      	add	r3, r2
 801078c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010790:	691a      	ldr	r2, [r3, #16]
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	695b      	ldr	r3, [r3, #20]
 8010796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801079a:	6939      	ldr	r1, [r7, #16]
 801079c:	0148      	lsls	r0, r1, #5
 801079e:	6979      	ldr	r1, [r7, #20]
 80107a0:	4401      	add	r1, r0
 80107a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80107a6:	4313      	orrs	r3, r2
 80107a8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80107aa:	79fb      	ldrb	r3, [r7, #7]
 80107ac:	2b01      	cmp	r3, #1
 80107ae:	d11e      	bne.n	80107ee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	691b      	ldr	r3, [r3, #16]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d009      	beq.n	80107cc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80107b8:	693b      	ldr	r3, [r7, #16]
 80107ba:	015a      	lsls	r2, r3, #5
 80107bc:	697b      	ldr	r3, [r7, #20]
 80107be:	4413      	add	r3, r2
 80107c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107c4:	461a      	mov	r2, r3
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	691b      	ldr	r3, [r3, #16]
 80107ca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80107cc:	693b      	ldr	r3, [r7, #16]
 80107ce:	015a      	lsls	r2, r3, #5
 80107d0:	697b      	ldr	r3, [r7, #20]
 80107d2:	4413      	add	r3, r2
 80107d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	693a      	ldr	r2, [r7, #16]
 80107dc:	0151      	lsls	r1, r2, #5
 80107de:	697a      	ldr	r2, [r7, #20]
 80107e0:	440a      	add	r2, r1
 80107e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80107ea:	6013      	str	r3, [r2, #0]
 80107ec:	e092      	b.n	8010914 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80107ee:	693b      	ldr	r3, [r7, #16]
 80107f0:	015a      	lsls	r2, r3, #5
 80107f2:	697b      	ldr	r3, [r7, #20]
 80107f4:	4413      	add	r3, r2
 80107f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	693a      	ldr	r2, [r7, #16]
 80107fe:	0151      	lsls	r1, r2, #5
 8010800:	697a      	ldr	r2, [r7, #20]
 8010802:	440a      	add	r2, r1
 8010804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010808:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801080c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	695b      	ldr	r3, [r3, #20]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d07e      	beq.n	8010914 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010816:	697b      	ldr	r3, [r7, #20]
 8010818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801081c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801081e:	68bb      	ldr	r3, [r7, #8]
 8010820:	781b      	ldrb	r3, [r3, #0]
 8010822:	f003 030f 	and.w	r3, r3, #15
 8010826:	2101      	movs	r1, #1
 8010828:	fa01 f303 	lsl.w	r3, r1, r3
 801082c:	6979      	ldr	r1, [r7, #20]
 801082e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010832:	4313      	orrs	r3, r2
 8010834:	634b      	str	r3, [r1, #52]	; 0x34
 8010836:	e06d      	b.n	8010914 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010838:	693b      	ldr	r3, [r7, #16]
 801083a:	015a      	lsls	r2, r3, #5
 801083c:	697b      	ldr	r3, [r7, #20]
 801083e:	4413      	add	r3, r2
 8010840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010844:	691b      	ldr	r3, [r3, #16]
 8010846:	693a      	ldr	r2, [r7, #16]
 8010848:	0151      	lsls	r1, r2, #5
 801084a:	697a      	ldr	r2, [r7, #20]
 801084c:	440a      	add	r2, r1
 801084e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010852:	0cdb      	lsrs	r3, r3, #19
 8010854:	04db      	lsls	r3, r3, #19
 8010856:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010858:	693b      	ldr	r3, [r7, #16]
 801085a:	015a      	lsls	r2, r3, #5
 801085c:	697b      	ldr	r3, [r7, #20]
 801085e:	4413      	add	r3, r2
 8010860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010864:	691b      	ldr	r3, [r3, #16]
 8010866:	693a      	ldr	r2, [r7, #16]
 8010868:	0151      	lsls	r1, r2, #5
 801086a:	697a      	ldr	r2, [r7, #20]
 801086c:	440a      	add	r2, r1
 801086e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010872:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010876:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801087a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801087c:	68bb      	ldr	r3, [r7, #8]
 801087e:	695b      	ldr	r3, [r3, #20]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d003      	beq.n	801088c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8010884:	68bb      	ldr	r3, [r7, #8]
 8010886:	689a      	ldr	r2, [r3, #8]
 8010888:	68bb      	ldr	r3, [r7, #8]
 801088a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801088c:	693b      	ldr	r3, [r7, #16]
 801088e:	015a      	lsls	r2, r3, #5
 8010890:	697b      	ldr	r3, [r7, #20]
 8010892:	4413      	add	r3, r2
 8010894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010898:	691b      	ldr	r3, [r3, #16]
 801089a:	693a      	ldr	r2, [r7, #16]
 801089c:	0151      	lsls	r1, r2, #5
 801089e:	697a      	ldr	r2, [r7, #20]
 80108a0:	440a      	add	r2, r1
 80108a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80108a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80108aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80108ac:	693b      	ldr	r3, [r7, #16]
 80108ae:	015a      	lsls	r2, r3, #5
 80108b0:	697b      	ldr	r3, [r7, #20]
 80108b2:	4413      	add	r3, r2
 80108b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108b8:	691a      	ldr	r2, [r3, #16]
 80108ba:	68bb      	ldr	r3, [r7, #8]
 80108bc:	689b      	ldr	r3, [r3, #8]
 80108be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80108c2:	6939      	ldr	r1, [r7, #16]
 80108c4:	0148      	lsls	r0, r1, #5
 80108c6:	6979      	ldr	r1, [r7, #20]
 80108c8:	4401      	add	r1, r0
 80108ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80108ce:	4313      	orrs	r3, r2
 80108d0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80108d2:	79fb      	ldrb	r3, [r7, #7]
 80108d4:	2b01      	cmp	r3, #1
 80108d6:	d10d      	bne.n	80108f4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80108d8:	68bb      	ldr	r3, [r7, #8]
 80108da:	68db      	ldr	r3, [r3, #12]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d009      	beq.n	80108f4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80108e0:	68bb      	ldr	r3, [r7, #8]
 80108e2:	68d9      	ldr	r1, [r3, #12]
 80108e4:	693b      	ldr	r3, [r7, #16]
 80108e6:	015a      	lsls	r2, r3, #5
 80108e8:	697b      	ldr	r3, [r7, #20]
 80108ea:	4413      	add	r3, r2
 80108ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108f0:	460a      	mov	r2, r1
 80108f2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80108f4:	693b      	ldr	r3, [r7, #16]
 80108f6:	015a      	lsls	r2, r3, #5
 80108f8:	697b      	ldr	r3, [r7, #20]
 80108fa:	4413      	add	r3, r2
 80108fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	693a      	ldr	r2, [r7, #16]
 8010904:	0151      	lsls	r1, r2, #5
 8010906:	697a      	ldr	r2, [r7, #20]
 8010908:	440a      	add	r2, r1
 801090a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801090e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010912:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010914:	2300      	movs	r3, #0
}
 8010916:	4618      	mov	r0, r3
 8010918:	371c      	adds	r7, #28
 801091a:	46bd      	mov	sp, r7
 801091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010920:	4770      	bx	lr

08010922 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010922:	b480      	push	{r7}
 8010924:	b089      	sub	sp, #36	; 0x24
 8010926:	af00      	add	r7, sp, #0
 8010928:	60f8      	str	r0, [r7, #12]
 801092a:	60b9      	str	r1, [r7, #8]
 801092c:	4611      	mov	r1, r2
 801092e:	461a      	mov	r2, r3
 8010930:	460b      	mov	r3, r1
 8010932:	71fb      	strb	r3, [r7, #7]
 8010934:	4613      	mov	r3, r2
 8010936:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8010940:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010944:	2b00      	cmp	r3, #0
 8010946:	d11a      	bne.n	801097e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010948:	88bb      	ldrh	r3, [r7, #4]
 801094a:	3303      	adds	r3, #3
 801094c:	089b      	lsrs	r3, r3, #2
 801094e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010950:	2300      	movs	r3, #0
 8010952:	61bb      	str	r3, [r7, #24]
 8010954:	e00f      	b.n	8010976 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010956:	79fb      	ldrb	r3, [r7, #7]
 8010958:	031a      	lsls	r2, r3, #12
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	4413      	add	r3, r2
 801095e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010962:	461a      	mov	r2, r3
 8010964:	69fb      	ldr	r3, [r7, #28]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	6013      	str	r3, [r2, #0]
      pSrc++;
 801096a:	69fb      	ldr	r3, [r7, #28]
 801096c:	3304      	adds	r3, #4
 801096e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010970:	69bb      	ldr	r3, [r7, #24]
 8010972:	3301      	adds	r3, #1
 8010974:	61bb      	str	r3, [r7, #24]
 8010976:	69ba      	ldr	r2, [r7, #24]
 8010978:	693b      	ldr	r3, [r7, #16]
 801097a:	429a      	cmp	r2, r3
 801097c:	d3eb      	bcc.n	8010956 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801097e:	2300      	movs	r3, #0
}
 8010980:	4618      	mov	r0, r3
 8010982:	3724      	adds	r7, #36	; 0x24
 8010984:	46bd      	mov	sp, r7
 8010986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098a:	4770      	bx	lr

0801098c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801098c:	b480      	push	{r7}
 801098e:	b089      	sub	sp, #36	; 0x24
 8010990:	af00      	add	r7, sp, #0
 8010992:	60f8      	str	r0, [r7, #12]
 8010994:	60b9      	str	r1, [r7, #8]
 8010996:	4613      	mov	r3, r2
 8010998:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80109a2:	88fb      	ldrh	r3, [r7, #6]
 80109a4:	3303      	adds	r3, #3
 80109a6:	089b      	lsrs	r3, r3, #2
 80109a8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80109aa:	2300      	movs	r3, #0
 80109ac:	61bb      	str	r3, [r7, #24]
 80109ae:	e00b      	b.n	80109c8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80109b0:	697b      	ldr	r3, [r7, #20]
 80109b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109b6:	681a      	ldr	r2, [r3, #0]
 80109b8:	69fb      	ldr	r3, [r7, #28]
 80109ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80109bc:	69fb      	ldr	r3, [r7, #28]
 80109be:	3304      	adds	r3, #4
 80109c0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80109c2:	69bb      	ldr	r3, [r7, #24]
 80109c4:	3301      	adds	r3, #1
 80109c6:	61bb      	str	r3, [r7, #24]
 80109c8:	69ba      	ldr	r2, [r7, #24]
 80109ca:	693b      	ldr	r3, [r7, #16]
 80109cc:	429a      	cmp	r2, r3
 80109ce:	d3ef      	bcc.n	80109b0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80109d0:	69fb      	ldr	r3, [r7, #28]
}
 80109d2:	4618      	mov	r0, r3
 80109d4:	3724      	adds	r7, #36	; 0x24
 80109d6:	46bd      	mov	sp, r7
 80109d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109dc:	4770      	bx	lr

080109de <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80109de:	b480      	push	{r7}
 80109e0:	b085      	sub	sp, #20
 80109e2:	af00      	add	r7, sp, #0
 80109e4:	6078      	str	r0, [r7, #4]
 80109e6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	781b      	ldrb	r3, [r3, #0]
 80109f0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	785b      	ldrb	r3, [r3, #1]
 80109f6:	2b01      	cmp	r3, #1
 80109f8:	d12c      	bne.n	8010a54 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80109fa:	68bb      	ldr	r3, [r7, #8]
 80109fc:	015a      	lsls	r2, r3, #5
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	4413      	add	r3, r2
 8010a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	db12      	blt.n	8010a32 <USB_EPSetStall+0x54>
 8010a0c:	68bb      	ldr	r3, [r7, #8]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d00f      	beq.n	8010a32 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010a12:	68bb      	ldr	r3, [r7, #8]
 8010a14:	015a      	lsls	r2, r3, #5
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	4413      	add	r3, r2
 8010a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	68ba      	ldr	r2, [r7, #8]
 8010a22:	0151      	lsls	r1, r2, #5
 8010a24:	68fa      	ldr	r2, [r7, #12]
 8010a26:	440a      	add	r2, r1
 8010a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010a30:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010a32:	68bb      	ldr	r3, [r7, #8]
 8010a34:	015a      	lsls	r2, r3, #5
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	4413      	add	r3, r2
 8010a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	68ba      	ldr	r2, [r7, #8]
 8010a42:	0151      	lsls	r1, r2, #5
 8010a44:	68fa      	ldr	r2, [r7, #12]
 8010a46:	440a      	add	r2, r1
 8010a48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010a50:	6013      	str	r3, [r2, #0]
 8010a52:	e02b      	b.n	8010aac <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	015a      	lsls	r2, r3, #5
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	4413      	add	r3, r2
 8010a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	db12      	blt.n	8010a8c <USB_EPSetStall+0xae>
 8010a66:	68bb      	ldr	r3, [r7, #8]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d00f      	beq.n	8010a8c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010a6c:	68bb      	ldr	r3, [r7, #8]
 8010a6e:	015a      	lsls	r2, r3, #5
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	4413      	add	r3, r2
 8010a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	68ba      	ldr	r2, [r7, #8]
 8010a7c:	0151      	lsls	r1, r2, #5
 8010a7e:	68fa      	ldr	r2, [r7, #12]
 8010a80:	440a      	add	r2, r1
 8010a82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010a8a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010a8c:	68bb      	ldr	r3, [r7, #8]
 8010a8e:	015a      	lsls	r2, r3, #5
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	4413      	add	r3, r2
 8010a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	68ba      	ldr	r2, [r7, #8]
 8010a9c:	0151      	lsls	r1, r2, #5
 8010a9e:	68fa      	ldr	r2, [r7, #12]
 8010aa0:	440a      	add	r2, r1
 8010aa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010aa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010aaa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010aac:	2300      	movs	r3, #0
}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	3714      	adds	r7, #20
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab8:	4770      	bx	lr

08010aba <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010aba:	b480      	push	{r7}
 8010abc:	b085      	sub	sp, #20
 8010abe:	af00      	add	r7, sp, #0
 8010ac0:	6078      	str	r0, [r7, #4]
 8010ac2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010ac8:	683b      	ldr	r3, [r7, #0]
 8010aca:	781b      	ldrb	r3, [r3, #0]
 8010acc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	785b      	ldrb	r3, [r3, #1]
 8010ad2:	2b01      	cmp	r3, #1
 8010ad4:	d128      	bne.n	8010b28 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	015a      	lsls	r2, r3, #5
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	4413      	add	r3, r2
 8010ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	68ba      	ldr	r2, [r7, #8]
 8010ae6:	0151      	lsls	r1, r2, #5
 8010ae8:	68fa      	ldr	r2, [r7, #12]
 8010aea:	440a      	add	r2, r1
 8010aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010af0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010af4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010af6:	683b      	ldr	r3, [r7, #0]
 8010af8:	78db      	ldrb	r3, [r3, #3]
 8010afa:	2b03      	cmp	r3, #3
 8010afc:	d003      	beq.n	8010b06 <USB_EPClearStall+0x4c>
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	78db      	ldrb	r3, [r3, #3]
 8010b02:	2b02      	cmp	r3, #2
 8010b04:	d138      	bne.n	8010b78 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010b06:	68bb      	ldr	r3, [r7, #8]
 8010b08:	015a      	lsls	r2, r3, #5
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	4413      	add	r3, r2
 8010b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	68ba      	ldr	r2, [r7, #8]
 8010b16:	0151      	lsls	r1, r2, #5
 8010b18:	68fa      	ldr	r2, [r7, #12]
 8010b1a:	440a      	add	r2, r1
 8010b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010b24:	6013      	str	r3, [r2, #0]
 8010b26:	e027      	b.n	8010b78 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	015a      	lsls	r2, r3, #5
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	4413      	add	r3, r2
 8010b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	68ba      	ldr	r2, [r7, #8]
 8010b38:	0151      	lsls	r1, r2, #5
 8010b3a:	68fa      	ldr	r2, [r7, #12]
 8010b3c:	440a      	add	r2, r1
 8010b3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010b46:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	78db      	ldrb	r3, [r3, #3]
 8010b4c:	2b03      	cmp	r3, #3
 8010b4e:	d003      	beq.n	8010b58 <USB_EPClearStall+0x9e>
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	78db      	ldrb	r3, [r3, #3]
 8010b54:	2b02      	cmp	r3, #2
 8010b56:	d10f      	bne.n	8010b78 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	015a      	lsls	r2, r3, #5
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	4413      	add	r3, r2
 8010b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	68ba      	ldr	r2, [r7, #8]
 8010b68:	0151      	lsls	r1, r2, #5
 8010b6a:	68fa      	ldr	r2, [r7, #12]
 8010b6c:	440a      	add	r2, r1
 8010b6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010b76:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010b78:	2300      	movs	r3, #0
}
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	3714      	adds	r7, #20
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b84:	4770      	bx	lr

08010b86 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010b86:	b480      	push	{r7}
 8010b88:	b085      	sub	sp, #20
 8010b8a:	af00      	add	r7, sp, #0
 8010b8c:	6078      	str	r0, [r7, #4]
 8010b8e:	460b      	mov	r3, r1
 8010b90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	68fa      	ldr	r2, [r7, #12]
 8010ba0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ba4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010ba8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010bb0:	681a      	ldr	r2, [r3, #0]
 8010bb2:	78fb      	ldrb	r3, [r7, #3]
 8010bb4:	011b      	lsls	r3, r3, #4
 8010bb6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010bba:	68f9      	ldr	r1, [r7, #12]
 8010bbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010bc0:	4313      	orrs	r3, r2
 8010bc2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010bc4:	2300      	movs	r3, #0
}
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	3714      	adds	r7, #20
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd0:	4770      	bx	lr

08010bd2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010bd2:	b480      	push	{r7}
 8010bd4:	b085      	sub	sp, #20
 8010bd6:	af00      	add	r7, sp, #0
 8010bd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	68fa      	ldr	r2, [r7, #12]
 8010be8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010bec:	f023 0303 	bic.w	r3, r3, #3
 8010bf0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010bf8:	685b      	ldr	r3, [r3, #4]
 8010bfa:	68fa      	ldr	r2, [r7, #12]
 8010bfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010c00:	f023 0302 	bic.w	r3, r3, #2
 8010c04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010c06:	2300      	movs	r3, #0
}
 8010c08:	4618      	mov	r0, r3
 8010c0a:	3714      	adds	r7, #20
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c12:	4770      	bx	lr

08010c14 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010c14:	b480      	push	{r7}
 8010c16:	b085      	sub	sp, #20
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	68fa      	ldr	r2, [r7, #12]
 8010c2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010c2e:	f023 0303 	bic.w	r3, r3, #3
 8010c32:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c3a:	685b      	ldr	r3, [r3, #4]
 8010c3c:	68fa      	ldr	r2, [r7, #12]
 8010c3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010c42:	f043 0302 	orr.w	r3, r3, #2
 8010c46:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010c48:	2300      	movs	r3, #0
}
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	3714      	adds	r7, #20
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c54:	4770      	bx	lr

08010c56 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010c56:	b480      	push	{r7}
 8010c58:	b085      	sub	sp, #20
 8010c5a:	af00      	add	r7, sp, #0
 8010c5c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	695b      	ldr	r3, [r3, #20]
 8010c62:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	699b      	ldr	r3, [r3, #24]
 8010c68:	68fa      	ldr	r2, [r7, #12]
 8010c6a:	4013      	ands	r3, r2
 8010c6c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010c6e:	68fb      	ldr	r3, [r7, #12]
}
 8010c70:	4618      	mov	r0, r3
 8010c72:	3714      	adds	r7, #20
 8010c74:	46bd      	mov	sp, r7
 8010c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7a:	4770      	bx	lr

08010c7c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010c7c:	b480      	push	{r7}
 8010c7e:	b085      	sub	sp, #20
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c8e:	699b      	ldr	r3, [r3, #24]
 8010c90:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c98:	69db      	ldr	r3, [r3, #28]
 8010c9a:	68ba      	ldr	r2, [r7, #8]
 8010c9c:	4013      	ands	r3, r2
 8010c9e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010ca0:	68bb      	ldr	r3, [r7, #8]
 8010ca2:	0c1b      	lsrs	r3, r3, #16
}
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	3714      	adds	r7, #20
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cae:	4770      	bx	lr

08010cb0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010cb0:	b480      	push	{r7}
 8010cb2:	b085      	sub	sp, #20
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cc2:	699b      	ldr	r3, [r3, #24]
 8010cc4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ccc:	69db      	ldr	r3, [r3, #28]
 8010cce:	68ba      	ldr	r2, [r7, #8]
 8010cd0:	4013      	ands	r3, r2
 8010cd2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	b29b      	uxth	r3, r3
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3714      	adds	r7, #20
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce2:	4770      	bx	lr

08010ce4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010ce4:	b480      	push	{r7}
 8010ce6:	b085      	sub	sp, #20
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
 8010cec:	460b      	mov	r3, r1
 8010cee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010cf4:	78fb      	ldrb	r3, [r7, #3]
 8010cf6:	015a      	lsls	r2, r3, #5
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	4413      	add	r3, r2
 8010cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d00:	689b      	ldr	r3, [r3, #8]
 8010d02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d0a:	695b      	ldr	r3, [r3, #20]
 8010d0c:	68ba      	ldr	r2, [r7, #8]
 8010d0e:	4013      	ands	r3, r2
 8010d10:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010d12:	68bb      	ldr	r3, [r7, #8]
}
 8010d14:	4618      	mov	r0, r3
 8010d16:	3714      	adds	r7, #20
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1e:	4770      	bx	lr

08010d20 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010d20:	b480      	push	{r7}
 8010d22:	b087      	sub	sp, #28
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
 8010d28:	460b      	mov	r3, r1
 8010d2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d36:	691b      	ldr	r3, [r3, #16]
 8010d38:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010d3a:	697b      	ldr	r3, [r7, #20]
 8010d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d42:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010d44:	78fb      	ldrb	r3, [r7, #3]
 8010d46:	f003 030f 	and.w	r3, r3, #15
 8010d4a:	68fa      	ldr	r2, [r7, #12]
 8010d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8010d50:	01db      	lsls	r3, r3, #7
 8010d52:	b2db      	uxtb	r3, r3
 8010d54:	693a      	ldr	r2, [r7, #16]
 8010d56:	4313      	orrs	r3, r2
 8010d58:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010d5a:	78fb      	ldrb	r3, [r7, #3]
 8010d5c:	015a      	lsls	r2, r3, #5
 8010d5e:	697b      	ldr	r3, [r7, #20]
 8010d60:	4413      	add	r3, r2
 8010d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d66:	689b      	ldr	r3, [r3, #8]
 8010d68:	693a      	ldr	r2, [r7, #16]
 8010d6a:	4013      	ands	r3, r2
 8010d6c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010d6e:	68bb      	ldr	r3, [r7, #8]
}
 8010d70:	4618      	mov	r0, r3
 8010d72:	371c      	adds	r7, #28
 8010d74:	46bd      	mov	sp, r7
 8010d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7a:	4770      	bx	lr

08010d7c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010d7c:	b480      	push	{r7}
 8010d7e:	b083      	sub	sp, #12
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	695b      	ldr	r3, [r3, #20]
 8010d88:	f003 0301 	and.w	r3, r3, #1
}
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	370c      	adds	r7, #12
 8010d90:	46bd      	mov	sp, r7
 8010d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d96:	4770      	bx	lr

08010d98 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010d98:	b480      	push	{r7}
 8010d9a:	b085      	sub	sp, #20
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	68fa      	ldr	r2, [r7, #12]
 8010dae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010db2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010db6:	f023 0307 	bic.w	r3, r3, #7
 8010dba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010dc2:	685b      	ldr	r3, [r3, #4]
 8010dc4:	68fa      	ldr	r2, [r7, #12]
 8010dc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010dce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010dd0:	2300      	movs	r3, #0
}
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	3714      	adds	r7, #20
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ddc:	4770      	bx	lr
	...

08010de0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010de0:	b480      	push	{r7}
 8010de2:	b087      	sub	sp, #28
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	60f8      	str	r0, [r7, #12]
 8010de8:	460b      	mov	r3, r1
 8010dea:	607a      	str	r2, [r7, #4]
 8010dec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	333c      	adds	r3, #60	; 0x3c
 8010df6:	3304      	adds	r3, #4
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010dfc:	693b      	ldr	r3, [r7, #16]
 8010dfe:	4a26      	ldr	r2, [pc, #152]	; (8010e98 <USB_EP0_OutStart+0xb8>)
 8010e00:	4293      	cmp	r3, r2
 8010e02:	d90a      	bls.n	8010e1a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010e04:	697b      	ldr	r3, [r7, #20]
 8010e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010e10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010e14:	d101      	bne.n	8010e1a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010e16:	2300      	movs	r3, #0
 8010e18:	e037      	b.n	8010e8a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010e1a:	697b      	ldr	r3, [r7, #20]
 8010e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e20:	461a      	mov	r2, r3
 8010e22:	2300      	movs	r3, #0
 8010e24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010e26:	697b      	ldr	r3, [r7, #20]
 8010e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e2c:	691b      	ldr	r3, [r3, #16]
 8010e2e:	697a      	ldr	r2, [r7, #20]
 8010e30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010e38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010e3a:	697b      	ldr	r3, [r7, #20]
 8010e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e40:	691b      	ldr	r3, [r3, #16]
 8010e42:	697a      	ldr	r2, [r7, #20]
 8010e44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e48:	f043 0318 	orr.w	r3, r3, #24
 8010e4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010e4e:	697b      	ldr	r3, [r7, #20]
 8010e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e54:	691b      	ldr	r3, [r3, #16]
 8010e56:	697a      	ldr	r2, [r7, #20]
 8010e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e5c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010e60:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010e62:	7afb      	ldrb	r3, [r7, #11]
 8010e64:	2b01      	cmp	r3, #1
 8010e66:	d10f      	bne.n	8010e88 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010e68:	697b      	ldr	r3, [r7, #20]
 8010e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e6e:	461a      	mov	r2, r3
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010e74:	697b      	ldr	r3, [r7, #20]
 8010e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	697a      	ldr	r2, [r7, #20]
 8010e7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e82:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010e86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010e88:	2300      	movs	r3, #0
}
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	371c      	adds	r7, #28
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e94:	4770      	bx	lr
 8010e96:	bf00      	nop
 8010e98:	4f54300a 	.word	0x4f54300a

08010e9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010e9c:	b480      	push	{r7}
 8010e9e:	b085      	sub	sp, #20
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	3301      	adds	r3, #1
 8010eac:	60fb      	str	r3, [r7, #12]
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	4a13      	ldr	r2, [pc, #76]	; (8010f00 <USB_CoreReset+0x64>)
 8010eb2:	4293      	cmp	r3, r2
 8010eb4:	d901      	bls.n	8010eba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010eb6:	2303      	movs	r3, #3
 8010eb8:	e01b      	b.n	8010ef2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	691b      	ldr	r3, [r3, #16]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	daf2      	bge.n	8010ea8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	691b      	ldr	r3, [r3, #16]
 8010eca:	f043 0201 	orr.w	r2, r3, #1
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	3301      	adds	r3, #1
 8010ed6:	60fb      	str	r3, [r7, #12]
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	4a09      	ldr	r2, [pc, #36]	; (8010f00 <USB_CoreReset+0x64>)
 8010edc:	4293      	cmp	r3, r2
 8010ede:	d901      	bls.n	8010ee4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010ee0:	2303      	movs	r3, #3
 8010ee2:	e006      	b.n	8010ef2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	691b      	ldr	r3, [r3, #16]
 8010ee8:	f003 0301 	and.w	r3, r3, #1
 8010eec:	2b01      	cmp	r3, #1
 8010eee:	d0f0      	beq.n	8010ed2 <USB_CoreReset+0x36>

  return HAL_OK;
 8010ef0:	2300      	movs	r3, #0
}
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	3714      	adds	r7, #20
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efc:	4770      	bx	lr
 8010efe:	bf00      	nop
 8010f00:	00030d40 	.word	0x00030d40

08010f04 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b084      	sub	sp, #16
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
 8010f0c:	460b      	mov	r3, r1
 8010f0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010f10:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010f14:	f005 f81c 	bl	8015f50 <malloc>
 8010f18:	4603      	mov	r3, r0
 8010f1a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d105      	bne.n	8010f2e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	2200      	movs	r2, #0
 8010f26:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8010f2a:	2302      	movs	r3, #2
 8010f2c:	e066      	b.n	8010ffc <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	68fa      	ldr	r2, [r7, #12]
 8010f32:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	7c1b      	ldrb	r3, [r3, #16]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d119      	bne.n	8010f72 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010f3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010f42:	2202      	movs	r2, #2
 8010f44:	2181      	movs	r1, #129	; 0x81
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f004 fe89 	bl	8015c5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	2201      	movs	r2, #1
 8010f50:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010f52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010f56:	2202      	movs	r2, #2
 8010f58:	2101      	movs	r1, #1
 8010f5a:	6878      	ldr	r0, [r7, #4]
 8010f5c:	f004 fe7f 	bl	8015c5e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	2201      	movs	r2, #1
 8010f64:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	2210      	movs	r2, #16
 8010f6c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8010f70:	e016      	b.n	8010fa0 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010f72:	2340      	movs	r3, #64	; 0x40
 8010f74:	2202      	movs	r2, #2
 8010f76:	2181      	movs	r1, #129	; 0x81
 8010f78:	6878      	ldr	r0, [r7, #4]
 8010f7a:	f004 fe70 	bl	8015c5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	2201      	movs	r2, #1
 8010f82:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010f84:	2340      	movs	r3, #64	; 0x40
 8010f86:	2202      	movs	r2, #2
 8010f88:	2101      	movs	r1, #1
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f004 fe67 	bl	8015c5e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2201      	movs	r2, #1
 8010f94:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2210      	movs	r2, #16
 8010f9c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010fa0:	2308      	movs	r3, #8
 8010fa2:	2203      	movs	r2, #3
 8010fa4:	2182      	movs	r1, #130	; 0x82
 8010fa6:	6878      	ldr	r0, [r7, #4]
 8010fa8:	f004 fe59 	bl	8015c5e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	2201      	movs	r2, #1
 8010fb0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	2200      	movs	r2, #0
 8010fca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	7c1b      	ldrb	r3, [r3, #16]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d109      	bne.n	8010fea <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010fe0:	2101      	movs	r1, #1
 8010fe2:	6878      	ldr	r0, [r7, #4]
 8010fe4:	f004 ff2a 	bl	8015e3c <USBD_LL_PrepareReceive>
 8010fe8:	e007      	b.n	8010ffa <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010ff0:	2340      	movs	r3, #64	; 0x40
 8010ff2:	2101      	movs	r1, #1
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f004 ff21 	bl	8015e3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010ffa:	2300      	movs	r3, #0
}
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	3710      	adds	r7, #16
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}

08011004 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b084      	sub	sp, #16
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
 801100c:	460b      	mov	r3, r1
 801100e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8011010:	2300      	movs	r3, #0
 8011012:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8011014:	2181      	movs	r1, #129	; 0x81
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f004 fe47 	bl	8015caa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2200      	movs	r2, #0
 8011020:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8011022:	2101      	movs	r1, #1
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	f004 fe40 	bl	8015caa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	2200      	movs	r2, #0
 801102e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8011032:	2182      	movs	r1, #130	; 0x82
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	f004 fe38 	bl	8015caa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	2200      	movs	r2, #0
 801103e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	2200      	movs	r2, #0
 8011046:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011050:	2b00      	cmp	r3, #0
 8011052:	d00e      	beq.n	8011072 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801105a:	685b      	ldr	r3, [r3, #4]
 801105c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011064:	4618      	mov	r0, r3
 8011066:	f004 ff7b 	bl	8015f60 <free>
    pdev->pClassData = NULL;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	2200      	movs	r2, #0
 801106e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8011072:	7bfb      	ldrb	r3, [r7, #15]
}
 8011074:	4618      	mov	r0, r3
 8011076:	3710      	adds	r7, #16
 8011078:	46bd      	mov	sp, r7
 801107a:	bd80      	pop	{r7, pc}

0801107c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801107c:	b580      	push	{r7, lr}
 801107e:	b086      	sub	sp, #24
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
 8011084:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801108c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801108e:	2300      	movs	r3, #0
 8011090:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8011092:	2300      	movs	r3, #0
 8011094:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8011096:	2300      	movs	r3, #0
 8011098:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	781b      	ldrb	r3, [r3, #0]
 801109e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d03a      	beq.n	801111c <USBD_CDC_Setup+0xa0>
 80110a6:	2b20      	cmp	r3, #32
 80110a8:	f040 8097 	bne.w	80111da <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80110ac:	683b      	ldr	r3, [r7, #0]
 80110ae:	88db      	ldrh	r3, [r3, #6]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d029      	beq.n	8011108 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80110b4:	683b      	ldr	r3, [r7, #0]
 80110b6:	781b      	ldrb	r3, [r3, #0]
 80110b8:	b25b      	sxtb	r3, r3
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	da11      	bge.n	80110e2 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80110c4:	689b      	ldr	r3, [r3, #8]
 80110c6:	683a      	ldr	r2, [r7, #0]
 80110c8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80110ca:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80110cc:	683a      	ldr	r2, [r7, #0]
 80110ce:	88d2      	ldrh	r2, [r2, #6]
 80110d0:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80110d2:	6939      	ldr	r1, [r7, #16]
 80110d4:	683b      	ldr	r3, [r7, #0]
 80110d6:	88db      	ldrh	r3, [r3, #6]
 80110d8:	461a      	mov	r2, r3
 80110da:	6878      	ldr	r0, [r7, #4]
 80110dc:	f001 faac 	bl	8012638 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80110e0:	e082      	b.n	80111e8 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	785a      	ldrb	r2, [r3, #1]
 80110e6:	693b      	ldr	r3, [r7, #16]
 80110e8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	88db      	ldrh	r3, [r3, #6]
 80110f0:	b2da      	uxtb	r2, r3
 80110f2:	693b      	ldr	r3, [r7, #16]
 80110f4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80110f8:	6939      	ldr	r1, [r7, #16]
 80110fa:	683b      	ldr	r3, [r7, #0]
 80110fc:	88db      	ldrh	r3, [r3, #6]
 80110fe:	461a      	mov	r2, r3
 8011100:	6878      	ldr	r0, [r7, #4]
 8011102:	f001 fac5 	bl	8012690 <USBD_CtlPrepareRx>
    break;
 8011106:	e06f      	b.n	80111e8 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801110e:	689b      	ldr	r3, [r3, #8]
 8011110:	683a      	ldr	r2, [r7, #0]
 8011112:	7850      	ldrb	r0, [r2, #1]
 8011114:	2200      	movs	r2, #0
 8011116:	6839      	ldr	r1, [r7, #0]
 8011118:	4798      	blx	r3
    break;
 801111a:	e065      	b.n	80111e8 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	785b      	ldrb	r3, [r3, #1]
 8011120:	2b0b      	cmp	r3, #11
 8011122:	d84f      	bhi.n	80111c4 <USBD_CDC_Setup+0x148>
 8011124:	a201      	add	r2, pc, #4	; (adr r2, 801112c <USBD_CDC_Setup+0xb0>)
 8011126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801112a:	bf00      	nop
 801112c:	0801115d 	.word	0x0801115d
 8011130:	080111d3 	.word	0x080111d3
 8011134:	080111c5 	.word	0x080111c5
 8011138:	080111c5 	.word	0x080111c5
 801113c:	080111c5 	.word	0x080111c5
 8011140:	080111c5 	.word	0x080111c5
 8011144:	080111c5 	.word	0x080111c5
 8011148:	080111c5 	.word	0x080111c5
 801114c:	080111c5 	.word	0x080111c5
 8011150:	080111c5 	.word	0x080111c5
 8011154:	08011185 	.word	0x08011185
 8011158:	080111ad 	.word	0x080111ad
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011162:	2b03      	cmp	r3, #3
 8011164:	d107      	bne.n	8011176 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011166:	f107 030c 	add.w	r3, r7, #12
 801116a:	2202      	movs	r2, #2
 801116c:	4619      	mov	r1, r3
 801116e:	6878      	ldr	r0, [r7, #4]
 8011170:	f001 fa62 	bl	8012638 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8011174:	e030      	b.n	80111d8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8011176:	6839      	ldr	r1, [r7, #0]
 8011178:	6878      	ldr	r0, [r7, #4]
 801117a:	f001 f9ec 	bl	8012556 <USBD_CtlError>
        ret = USBD_FAIL;
 801117e:	2303      	movs	r3, #3
 8011180:	75fb      	strb	r3, [r7, #23]
      break;
 8011182:	e029      	b.n	80111d8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801118a:	2b03      	cmp	r3, #3
 801118c:	d107      	bne.n	801119e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801118e:	f107 030f 	add.w	r3, r7, #15
 8011192:	2201      	movs	r2, #1
 8011194:	4619      	mov	r1, r3
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	f001 fa4e 	bl	8012638 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801119c:	e01c      	b.n	80111d8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 801119e:	6839      	ldr	r1, [r7, #0]
 80111a0:	6878      	ldr	r0, [r7, #4]
 80111a2:	f001 f9d8 	bl	8012556 <USBD_CtlError>
        ret = USBD_FAIL;
 80111a6:	2303      	movs	r3, #3
 80111a8:	75fb      	strb	r3, [r7, #23]
      break;
 80111aa:	e015      	b.n	80111d8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80111b2:	2b03      	cmp	r3, #3
 80111b4:	d00f      	beq.n	80111d6 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80111b6:	6839      	ldr	r1, [r7, #0]
 80111b8:	6878      	ldr	r0, [r7, #4]
 80111ba:	f001 f9cc 	bl	8012556 <USBD_CtlError>
        ret = USBD_FAIL;
 80111be:	2303      	movs	r3, #3
 80111c0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80111c2:	e008      	b.n	80111d6 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80111c4:	6839      	ldr	r1, [r7, #0]
 80111c6:	6878      	ldr	r0, [r7, #4]
 80111c8:	f001 f9c5 	bl	8012556 <USBD_CtlError>
      ret = USBD_FAIL;
 80111cc:	2303      	movs	r3, #3
 80111ce:	75fb      	strb	r3, [r7, #23]
      break;
 80111d0:	e002      	b.n	80111d8 <USBD_CDC_Setup+0x15c>
      break;
 80111d2:	bf00      	nop
 80111d4:	e008      	b.n	80111e8 <USBD_CDC_Setup+0x16c>
      break;
 80111d6:	bf00      	nop
    }
    break;
 80111d8:	e006      	b.n	80111e8 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80111da:	6839      	ldr	r1, [r7, #0]
 80111dc:	6878      	ldr	r0, [r7, #4]
 80111de:	f001 f9ba 	bl	8012556 <USBD_CtlError>
    ret = USBD_FAIL;
 80111e2:	2303      	movs	r3, #3
 80111e4:	75fb      	strb	r3, [r7, #23]
    break;
 80111e6:	bf00      	nop
  }

  return (uint8_t)ret;
 80111e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80111ea:	4618      	mov	r0, r3
 80111ec:	3718      	adds	r7, #24
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}
 80111f2:	bf00      	nop

080111f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b084      	sub	sp, #16
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
 80111fc:	460b      	mov	r3, r1
 80111fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011206:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801120e:	2b00      	cmp	r3, #0
 8011210:	d101      	bne.n	8011216 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011212:	2303      	movs	r3, #3
 8011214:	e049      	b.n	80112aa <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801121c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801121e:	78fa      	ldrb	r2, [r7, #3]
 8011220:	6879      	ldr	r1, [r7, #4]
 8011222:	4613      	mov	r3, r2
 8011224:	009b      	lsls	r3, r3, #2
 8011226:	4413      	add	r3, r2
 8011228:	009b      	lsls	r3, r3, #2
 801122a:	440b      	add	r3, r1
 801122c:	3318      	adds	r3, #24
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d029      	beq.n	8011288 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011234:	78fa      	ldrb	r2, [r7, #3]
 8011236:	6879      	ldr	r1, [r7, #4]
 8011238:	4613      	mov	r3, r2
 801123a:	009b      	lsls	r3, r3, #2
 801123c:	4413      	add	r3, r2
 801123e:	009b      	lsls	r3, r3, #2
 8011240:	440b      	add	r3, r1
 8011242:	3318      	adds	r3, #24
 8011244:	681a      	ldr	r2, [r3, #0]
 8011246:	78f9      	ldrb	r1, [r7, #3]
 8011248:	68f8      	ldr	r0, [r7, #12]
 801124a:	460b      	mov	r3, r1
 801124c:	00db      	lsls	r3, r3, #3
 801124e:	1a5b      	subs	r3, r3, r1
 8011250:	009b      	lsls	r3, r3, #2
 8011252:	4403      	add	r3, r0
 8011254:	3344      	adds	r3, #68	; 0x44
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	fbb2 f1f3 	udiv	r1, r2, r3
 801125c:	fb03 f301 	mul.w	r3, r3, r1
 8011260:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011262:	2b00      	cmp	r3, #0
 8011264:	d110      	bne.n	8011288 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8011266:	78fa      	ldrb	r2, [r7, #3]
 8011268:	6879      	ldr	r1, [r7, #4]
 801126a:	4613      	mov	r3, r2
 801126c:	009b      	lsls	r3, r3, #2
 801126e:	4413      	add	r3, r2
 8011270:	009b      	lsls	r3, r3, #2
 8011272:	440b      	add	r3, r1
 8011274:	3318      	adds	r3, #24
 8011276:	2200      	movs	r2, #0
 8011278:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801127a:	78f9      	ldrb	r1, [r7, #3]
 801127c:	2300      	movs	r3, #0
 801127e:	2200      	movs	r2, #0
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	f004 fdba 	bl	8015dfa <USBD_LL_Transmit>
 8011286:	e00f      	b.n	80112a8 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8011288:	68bb      	ldr	r3, [r7, #8]
 801128a:	2200      	movs	r2, #0
 801128c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011296:	691b      	ldr	r3, [r3, #16]
 8011298:	68ba      	ldr	r2, [r7, #8]
 801129a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801129e:	68ba      	ldr	r2, [r7, #8]
 80112a0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80112a4:	78fa      	ldrb	r2, [r7, #3]
 80112a6:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80112a8:	2300      	movs	r3, #0
}
 80112aa:	4618      	mov	r0, r3
 80112ac:	3710      	adds	r7, #16
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}

080112b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80112b2:	b580      	push	{r7, lr}
 80112b4:	b084      	sub	sp, #16
 80112b6:	af00      	add	r7, sp, #0
 80112b8:	6078      	str	r0, [r7, #4]
 80112ba:	460b      	mov	r3, r1
 80112bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80112c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d101      	bne.n	80112d4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80112d0:	2303      	movs	r3, #3
 80112d2:	e015      	b.n	8011300 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80112d4:	78fb      	ldrb	r3, [r7, #3]
 80112d6:	4619      	mov	r1, r3
 80112d8:	6878      	ldr	r0, [r7, #4]
 80112da:	f004 fdd0 	bl	8015e7e <USBD_LL_GetRxDataSize>
 80112de:	4602      	mov	r2, r0
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80112ec:	68db      	ldr	r3, [r3, #12]
 80112ee:	68fa      	ldr	r2, [r7, #12]
 80112f0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80112f4:	68fa      	ldr	r2, [r7, #12]
 80112f6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80112fa:	4611      	mov	r1, r2
 80112fc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80112fe:	2300      	movs	r3, #0
}
 8011300:	4618      	mov	r0, r3
 8011302:	3710      	adds	r7, #16
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}

08011308 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b084      	sub	sp, #16
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011316:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801131e:	2b00      	cmp	r3, #0
 8011320:	d015      	beq.n	801134e <USBD_CDC_EP0_RxReady+0x46>
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011328:	2bff      	cmp	r3, #255	; 0xff
 801132a:	d010      	beq.n	801134e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011332:	689b      	ldr	r3, [r3, #8]
 8011334:	68fa      	ldr	r2, [r7, #12]
 8011336:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 801133a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801133c:	68fa      	ldr	r2, [r7, #12]
 801133e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011342:	b292      	uxth	r2, r2
 8011344:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	22ff      	movs	r2, #255	; 0xff
 801134a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 801134e:	2300      	movs	r3, #0
}
 8011350:	4618      	mov	r0, r3
 8011352:	3710      	adds	r7, #16
 8011354:	46bd      	mov	sp, r7
 8011356:	bd80      	pop	{r7, pc}

08011358 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011358:	b480      	push	{r7}
 801135a:	b083      	sub	sp, #12
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	2243      	movs	r2, #67	; 0x43
 8011364:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8011366:	4b03      	ldr	r3, [pc, #12]	; (8011374 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011368:	4618      	mov	r0, r3
 801136a:	370c      	adds	r7, #12
 801136c:	46bd      	mov	sp, r7
 801136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011372:	4770      	bx	lr
 8011374:	20004120 	.word	0x20004120

08011378 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011378:	b480      	push	{r7}
 801137a:	b083      	sub	sp, #12
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	2243      	movs	r2, #67	; 0x43
 8011384:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8011386:	4b03      	ldr	r3, [pc, #12]	; (8011394 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011388:	4618      	mov	r0, r3
 801138a:	370c      	adds	r7, #12
 801138c:	46bd      	mov	sp, r7
 801138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011392:	4770      	bx	lr
 8011394:	200040dc 	.word	0x200040dc

08011398 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011398:	b480      	push	{r7}
 801139a:	b083      	sub	sp, #12
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2243      	movs	r2, #67	; 0x43
 80113a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80113a6:	4b03      	ldr	r3, [pc, #12]	; (80113b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80113a8:	4618      	mov	r0, r3
 80113aa:	370c      	adds	r7, #12
 80113ac:	46bd      	mov	sp, r7
 80113ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b2:	4770      	bx	lr
 80113b4:	20004164 	.word	0x20004164

080113b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80113b8:	b480      	push	{r7}
 80113ba:	b083      	sub	sp, #12
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	220a      	movs	r2, #10
 80113c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80113c6:	4b03      	ldr	r3, [pc, #12]	; (80113d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80113c8:	4618      	mov	r0, r3
 80113ca:	370c      	adds	r7, #12
 80113cc:	46bd      	mov	sp, r7
 80113ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d2:	4770      	bx	lr
 80113d4:	20004098 	.word	0x20004098

080113d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80113d8:	b480      	push	{r7}
 80113da:	b083      	sub	sp, #12
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
 80113e0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80113e2:	683b      	ldr	r3, [r7, #0]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d101      	bne.n	80113ec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80113e8:	2303      	movs	r3, #3
 80113ea:	e004      	b.n	80113f6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	683a      	ldr	r2, [r7, #0]
 80113f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80113f4:	2300      	movs	r3, #0
}
 80113f6:	4618      	mov	r0, r3
 80113f8:	370c      	adds	r7, #12
 80113fa:	46bd      	mov	sp, r7
 80113fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011400:	4770      	bx	lr

08011402 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011402:	b480      	push	{r7}
 8011404:	b087      	sub	sp, #28
 8011406:	af00      	add	r7, sp, #0
 8011408:	60f8      	str	r0, [r7, #12]
 801140a:	60b9      	str	r1, [r7, #8]
 801140c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011414:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8011416:	697b      	ldr	r3, [r7, #20]
 8011418:	68ba      	ldr	r2, [r7, #8]
 801141a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801141e:	697b      	ldr	r3, [r7, #20]
 8011420:	687a      	ldr	r2, [r7, #4]
 8011422:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8011426:	2300      	movs	r3, #0
}
 8011428:	4618      	mov	r0, r3
 801142a:	371c      	adds	r7, #28
 801142c:	46bd      	mov	sp, r7
 801142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011432:	4770      	bx	lr

08011434 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011434:	b480      	push	{r7}
 8011436:	b085      	sub	sp, #20
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
 801143c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011444:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	683a      	ldr	r2, [r7, #0]
 801144a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801144e:	2300      	movs	r3, #0
}
 8011450:	4618      	mov	r0, r3
 8011452:	3714      	adds	r7, #20
 8011454:	46bd      	mov	sp, r7
 8011456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145a:	4770      	bx	lr

0801145c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b084      	sub	sp, #16
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801146a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 801146c:	2301      	movs	r3, #1
 801146e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011476:	2b00      	cmp	r3, #0
 8011478:	d101      	bne.n	801147e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801147a:	2303      	movs	r3, #3
 801147c:	e01a      	b.n	80114b4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 801147e:	68bb      	ldr	r3, [r7, #8]
 8011480:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011484:	2b00      	cmp	r3, #0
 8011486:	d114      	bne.n	80114b2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	2201      	movs	r2, #1
 801148c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 801149a:	68bb      	ldr	r3, [r7, #8]
 801149c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80114a6:	2181      	movs	r1, #129	; 0x81
 80114a8:	6878      	ldr	r0, [r7, #4]
 80114aa:	f004 fca6 	bl	8015dfa <USBD_LL_Transmit>

    ret = USBD_OK;
 80114ae:	2300      	movs	r3, #0
 80114b0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80114b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80114b4:	4618      	mov	r0, r3
 80114b6:	3710      	adds	r7, #16
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd80      	pop	{r7, pc}

080114bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b084      	sub	sp, #16
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80114ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d101      	bne.n	80114da <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80114d6:	2303      	movs	r3, #3
 80114d8:	e016      	b.n	8011508 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	7c1b      	ldrb	r3, [r3, #16]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d109      	bne.n	80114f6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80114e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80114ec:	2101      	movs	r1, #1
 80114ee:	6878      	ldr	r0, [r7, #4]
 80114f0:	f004 fca4 	bl	8015e3c <USBD_LL_PrepareReceive>
 80114f4:	e007      	b.n	8011506 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80114fc:	2340      	movs	r3, #64	; 0x40
 80114fe:	2101      	movs	r1, #1
 8011500:	6878      	ldr	r0, [r7, #4]
 8011502:	f004 fc9b 	bl	8015e3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011506:	2300      	movs	r3, #0
}
 8011508:	4618      	mov	r0, r3
 801150a:	3710      	adds	r7, #16
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}

08011510 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b086      	sub	sp, #24
 8011514:	af00      	add	r7, sp, #0
 8011516:	60f8      	str	r0, [r7, #12]
 8011518:	60b9      	str	r1, [r7, #8]
 801151a:	4613      	mov	r3, r2
 801151c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d101      	bne.n	8011528 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011524:	2303      	movs	r3, #3
 8011526:	e025      	b.n	8011574 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801152e:	2b00      	cmp	r3, #0
 8011530:	d003      	beq.n	801153a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	2200      	movs	r2, #0
 8011536:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8011540:	2b00      	cmp	r3, #0
 8011542:	d003      	beq.n	801154c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	2200      	movs	r2, #0
 8011548:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801154c:	68bb      	ldr	r3, [r7, #8]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d003      	beq.n	801155a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	68ba      	ldr	r2, [r7, #8]
 8011556:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	2201      	movs	r2, #1
 801155e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	79fa      	ldrb	r2, [r7, #7]
 8011566:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011568:	68f8      	ldr	r0, [r7, #12]
 801156a:	f004 fb11 	bl	8015b90 <USBD_LL_Init>
 801156e:	4603      	mov	r3, r0
 8011570:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011572:	7dfb      	ldrb	r3, [r7, #23]
}
 8011574:	4618      	mov	r0, r3
 8011576:	3718      	adds	r7, #24
 8011578:	46bd      	mov	sp, r7
 801157a:	bd80      	pop	{r7, pc}

0801157c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801157c:	b580      	push	{r7, lr}
 801157e:	b084      	sub	sp, #16
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
 8011584:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011586:	2300      	movs	r3, #0
 8011588:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d101      	bne.n	8011594 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011590:	2303      	movs	r3, #3
 8011592:	e010      	b.n	80115b6 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	683a      	ldr	r2, [r7, #0]
 8011598:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115a4:	f107 020e 	add.w	r2, r7, #14
 80115a8:	4610      	mov	r0, r2
 80115aa:	4798      	blx	r3
 80115ac:	4602      	mov	r2, r0
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80115b4:	2300      	movs	r3, #0
}
 80115b6:	4618      	mov	r0, r3
 80115b8:	3710      	adds	r7, #16
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd80      	pop	{r7, pc}

080115be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80115be:	b580      	push	{r7, lr}
 80115c0:	b082      	sub	sp, #8
 80115c2:	af00      	add	r7, sp, #0
 80115c4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80115c6:	6878      	ldr	r0, [r7, #4]
 80115c8:	f004 fb2e 	bl	8015c28 <USBD_LL_Start>
 80115cc:	4603      	mov	r3, r0
}
 80115ce:	4618      	mov	r0, r3
 80115d0:	3708      	adds	r7, #8
 80115d2:	46bd      	mov	sp, r7
 80115d4:	bd80      	pop	{r7, pc}

080115d6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80115d6:	b480      	push	{r7}
 80115d8:	b083      	sub	sp, #12
 80115da:	af00      	add	r7, sp, #0
 80115dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80115de:	2300      	movs	r3, #0
}
 80115e0:	4618      	mov	r0, r3
 80115e2:	370c      	adds	r7, #12
 80115e4:	46bd      	mov	sp, r7
 80115e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ea:	4770      	bx	lr

080115ec <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b084      	sub	sp, #16
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
 80115f4:	460b      	mov	r3, r1
 80115f6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80115f8:	2303      	movs	r3, #3
 80115fa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011602:	2b00      	cmp	r3, #0
 8011604:	d009      	beq.n	801161a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	78fa      	ldrb	r2, [r7, #3]
 8011610:	4611      	mov	r1, r2
 8011612:	6878      	ldr	r0, [r7, #4]
 8011614:	4798      	blx	r3
 8011616:	4603      	mov	r3, r0
 8011618:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801161a:	7bfb      	ldrb	r3, [r7, #15]
}
 801161c:	4618      	mov	r0, r3
 801161e:	3710      	adds	r7, #16
 8011620:	46bd      	mov	sp, r7
 8011622:	bd80      	pop	{r7, pc}

08011624 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b082      	sub	sp, #8
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
 801162c:	460b      	mov	r3, r1
 801162e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011636:	2b00      	cmp	r3, #0
 8011638:	d007      	beq.n	801164a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011640:	685b      	ldr	r3, [r3, #4]
 8011642:	78fa      	ldrb	r2, [r7, #3]
 8011644:	4611      	mov	r1, r2
 8011646:	6878      	ldr	r0, [r7, #4]
 8011648:	4798      	blx	r3
  }

  return USBD_OK;
 801164a:	2300      	movs	r3, #0
}
 801164c:	4618      	mov	r0, r3
 801164e:	3708      	adds	r7, #8
 8011650:	46bd      	mov	sp, r7
 8011652:	bd80      	pop	{r7, pc}

08011654 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b084      	sub	sp, #16
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
 801165c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011664:	6839      	ldr	r1, [r7, #0]
 8011666:	4618      	mov	r0, r3
 8011668:	f000 ff3b 	bl	80124e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	2201      	movs	r2, #1
 8011670:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801167a:	461a      	mov	r2, r3
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011688:	f003 031f 	and.w	r3, r3, #31
 801168c:	2b02      	cmp	r3, #2
 801168e:	d01a      	beq.n	80116c6 <USBD_LL_SetupStage+0x72>
 8011690:	2b02      	cmp	r3, #2
 8011692:	d822      	bhi.n	80116da <USBD_LL_SetupStage+0x86>
 8011694:	2b00      	cmp	r3, #0
 8011696:	d002      	beq.n	801169e <USBD_LL_SetupStage+0x4a>
 8011698:	2b01      	cmp	r3, #1
 801169a:	d00a      	beq.n	80116b2 <USBD_LL_SetupStage+0x5e>
 801169c:	e01d      	b.n	80116da <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80116a4:	4619      	mov	r1, r3
 80116a6:	6878      	ldr	r0, [r7, #4]
 80116a8:	f000 fa18 	bl	8011adc <USBD_StdDevReq>
 80116ac:	4603      	mov	r3, r0
 80116ae:	73fb      	strb	r3, [r7, #15]
      break;
 80116b0:	e020      	b.n	80116f4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80116b8:	4619      	mov	r1, r3
 80116ba:	6878      	ldr	r0, [r7, #4]
 80116bc:	f000 fa7c 	bl	8011bb8 <USBD_StdItfReq>
 80116c0:	4603      	mov	r3, r0
 80116c2:	73fb      	strb	r3, [r7, #15]
      break;
 80116c4:	e016      	b.n	80116f4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80116cc:	4619      	mov	r1, r3
 80116ce:	6878      	ldr	r0, [r7, #4]
 80116d0:	f000 faba 	bl	8011c48 <USBD_StdEPReq>
 80116d4:	4603      	mov	r3, r0
 80116d6:	73fb      	strb	r3, [r7, #15]
      break;
 80116d8:	e00c      	b.n	80116f4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80116e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80116e4:	b2db      	uxtb	r3, r3
 80116e6:	4619      	mov	r1, r3
 80116e8:	6878      	ldr	r0, [r7, #4]
 80116ea:	f004 fafd 	bl	8015ce8 <USBD_LL_StallEP>
 80116ee:	4603      	mov	r3, r0
 80116f0:	73fb      	strb	r3, [r7, #15]
      break;
 80116f2:	bf00      	nop
  }

  return ret;
 80116f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	3710      	adds	r7, #16
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}

080116fe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80116fe:	b580      	push	{r7, lr}
 8011700:	b086      	sub	sp, #24
 8011702:	af00      	add	r7, sp, #0
 8011704:	60f8      	str	r0, [r7, #12]
 8011706:	460b      	mov	r3, r1
 8011708:	607a      	str	r2, [r7, #4]
 801170a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801170c:	7afb      	ldrb	r3, [r7, #11]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d137      	bne.n	8011782 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011718:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011720:	2b03      	cmp	r3, #3
 8011722:	d14a      	bne.n	80117ba <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011724:	693b      	ldr	r3, [r7, #16]
 8011726:	689a      	ldr	r2, [r3, #8]
 8011728:	693b      	ldr	r3, [r7, #16]
 801172a:	68db      	ldr	r3, [r3, #12]
 801172c:	429a      	cmp	r2, r3
 801172e:	d913      	bls.n	8011758 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011730:	693b      	ldr	r3, [r7, #16]
 8011732:	689a      	ldr	r2, [r3, #8]
 8011734:	693b      	ldr	r3, [r7, #16]
 8011736:	68db      	ldr	r3, [r3, #12]
 8011738:	1ad2      	subs	r2, r2, r3
 801173a:	693b      	ldr	r3, [r7, #16]
 801173c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801173e:	693b      	ldr	r3, [r7, #16]
 8011740:	68da      	ldr	r2, [r3, #12]
 8011742:	693b      	ldr	r3, [r7, #16]
 8011744:	689b      	ldr	r3, [r3, #8]
 8011746:	4293      	cmp	r3, r2
 8011748:	bf28      	it	cs
 801174a:	4613      	movcs	r3, r2
 801174c:	461a      	mov	r2, r3
 801174e:	6879      	ldr	r1, [r7, #4]
 8011750:	68f8      	ldr	r0, [r7, #12]
 8011752:	f000 ffba 	bl	80126ca <USBD_CtlContinueRx>
 8011756:	e030      	b.n	80117ba <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801175e:	691b      	ldr	r3, [r3, #16]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d00a      	beq.n	801177a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801176a:	2b03      	cmp	r3, #3
 801176c:	d105      	bne.n	801177a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011774:	691b      	ldr	r3, [r3, #16]
 8011776:	68f8      	ldr	r0, [r7, #12]
 8011778:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 801177a:	68f8      	ldr	r0, [r7, #12]
 801177c:	f000 ffb6 	bl	80126ec <USBD_CtlSendStatus>
 8011780:	e01b      	b.n	80117ba <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011788:	699b      	ldr	r3, [r3, #24]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d013      	beq.n	80117b6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8011794:	2b03      	cmp	r3, #3
 8011796:	d10e      	bne.n	80117b6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801179e:	699b      	ldr	r3, [r3, #24]
 80117a0:	7afa      	ldrb	r2, [r7, #11]
 80117a2:	4611      	mov	r1, r2
 80117a4:	68f8      	ldr	r0, [r7, #12]
 80117a6:	4798      	blx	r3
 80117a8:	4603      	mov	r3, r0
 80117aa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80117ac:	7dfb      	ldrb	r3, [r7, #23]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d003      	beq.n	80117ba <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80117b2:	7dfb      	ldrb	r3, [r7, #23]
 80117b4:	e002      	b.n	80117bc <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80117b6:	2303      	movs	r3, #3
 80117b8:	e000      	b.n	80117bc <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80117ba:	2300      	movs	r3, #0
}
 80117bc:	4618      	mov	r0, r3
 80117be:	3718      	adds	r7, #24
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}

080117c4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b086      	sub	sp, #24
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	60f8      	str	r0, [r7, #12]
 80117cc:	460b      	mov	r3, r1
 80117ce:	607a      	str	r2, [r7, #4]
 80117d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80117d2:	7afb      	ldrb	r3, [r7, #11]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d16a      	bne.n	80118ae <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	3314      	adds	r3, #20
 80117dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80117e4:	2b02      	cmp	r3, #2
 80117e6:	d155      	bne.n	8011894 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80117e8:	693b      	ldr	r3, [r7, #16]
 80117ea:	689a      	ldr	r2, [r3, #8]
 80117ec:	693b      	ldr	r3, [r7, #16]
 80117ee:	68db      	ldr	r3, [r3, #12]
 80117f0:	429a      	cmp	r2, r3
 80117f2:	d914      	bls.n	801181e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80117f4:	693b      	ldr	r3, [r7, #16]
 80117f6:	689a      	ldr	r2, [r3, #8]
 80117f8:	693b      	ldr	r3, [r7, #16]
 80117fa:	68db      	ldr	r3, [r3, #12]
 80117fc:	1ad2      	subs	r2, r2, r3
 80117fe:	693b      	ldr	r3, [r7, #16]
 8011800:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011802:	693b      	ldr	r3, [r7, #16]
 8011804:	689b      	ldr	r3, [r3, #8]
 8011806:	461a      	mov	r2, r3
 8011808:	6879      	ldr	r1, [r7, #4]
 801180a:	68f8      	ldr	r0, [r7, #12]
 801180c:	f000 ff2f 	bl	801266e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011810:	2300      	movs	r3, #0
 8011812:	2200      	movs	r2, #0
 8011814:	2100      	movs	r1, #0
 8011816:	68f8      	ldr	r0, [r7, #12]
 8011818:	f004 fb10 	bl	8015e3c <USBD_LL_PrepareReceive>
 801181c:	e03a      	b.n	8011894 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801181e:	693b      	ldr	r3, [r7, #16]
 8011820:	68da      	ldr	r2, [r3, #12]
 8011822:	693b      	ldr	r3, [r7, #16]
 8011824:	689b      	ldr	r3, [r3, #8]
 8011826:	429a      	cmp	r2, r3
 8011828:	d11c      	bne.n	8011864 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801182a:	693b      	ldr	r3, [r7, #16]
 801182c:	685a      	ldr	r2, [r3, #4]
 801182e:	693b      	ldr	r3, [r7, #16]
 8011830:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011832:	429a      	cmp	r2, r3
 8011834:	d316      	bcc.n	8011864 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011836:	693b      	ldr	r3, [r7, #16]
 8011838:	685a      	ldr	r2, [r3, #4]
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011840:	429a      	cmp	r2, r3
 8011842:	d20f      	bcs.n	8011864 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011844:	2200      	movs	r2, #0
 8011846:	2100      	movs	r1, #0
 8011848:	68f8      	ldr	r0, [r7, #12]
 801184a:	f000 ff10 	bl	801266e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	2200      	movs	r2, #0
 8011852:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011856:	2300      	movs	r3, #0
 8011858:	2200      	movs	r2, #0
 801185a:	2100      	movs	r1, #0
 801185c:	68f8      	ldr	r0, [r7, #12]
 801185e:	f004 faed 	bl	8015e3c <USBD_LL_PrepareReceive>
 8011862:	e017      	b.n	8011894 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801186a:	68db      	ldr	r3, [r3, #12]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d00a      	beq.n	8011886 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011876:	2b03      	cmp	r3, #3
 8011878:	d105      	bne.n	8011886 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011880:	68db      	ldr	r3, [r3, #12]
 8011882:	68f8      	ldr	r0, [r7, #12]
 8011884:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011886:	2180      	movs	r1, #128	; 0x80
 8011888:	68f8      	ldr	r0, [r7, #12]
 801188a:	f004 fa2d 	bl	8015ce8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801188e:	68f8      	ldr	r0, [r7, #12]
 8011890:	f000 ff3f 	bl	8012712 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801189a:	2b01      	cmp	r3, #1
 801189c:	d123      	bne.n	80118e6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801189e:	68f8      	ldr	r0, [r7, #12]
 80118a0:	f7ff fe99 	bl	80115d6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	2200      	movs	r2, #0
 80118a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80118ac:	e01b      	b.n	80118e6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118b4:	695b      	ldr	r3, [r3, #20]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d013      	beq.n	80118e2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80118c0:	2b03      	cmp	r3, #3
 80118c2:	d10e      	bne.n	80118e2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118ca:	695b      	ldr	r3, [r3, #20]
 80118cc:	7afa      	ldrb	r2, [r7, #11]
 80118ce:	4611      	mov	r1, r2
 80118d0:	68f8      	ldr	r0, [r7, #12]
 80118d2:	4798      	blx	r3
 80118d4:	4603      	mov	r3, r0
 80118d6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80118d8:	7dfb      	ldrb	r3, [r7, #23]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d003      	beq.n	80118e6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80118de:	7dfb      	ldrb	r3, [r7, #23]
 80118e0:	e002      	b.n	80118e8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80118e2:	2303      	movs	r3, #3
 80118e4:	e000      	b.n	80118e8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80118e6:	2300      	movs	r3, #0
}
 80118e8:	4618      	mov	r0, r3
 80118ea:	3718      	adds	r7, #24
 80118ec:	46bd      	mov	sp, r7
 80118ee:	bd80      	pop	{r7, pc}

080118f0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b082      	sub	sp, #8
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	2201      	movs	r2, #1
 80118fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	2200      	movs	r2, #0
 8011904:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2200      	movs	r2, #0
 801190c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	2200      	movs	r2, #0
 8011912:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801191c:	2b00      	cmp	r3, #0
 801191e:	d009      	beq.n	8011934 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011926:	685b      	ldr	r3, [r3, #4]
 8011928:	687a      	ldr	r2, [r7, #4]
 801192a:	6852      	ldr	r2, [r2, #4]
 801192c:	b2d2      	uxtb	r2, r2
 801192e:	4611      	mov	r1, r2
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011934:	2340      	movs	r3, #64	; 0x40
 8011936:	2200      	movs	r2, #0
 8011938:	2100      	movs	r1, #0
 801193a:	6878      	ldr	r0, [r7, #4]
 801193c:	f004 f98f 	bl	8015c5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	2201      	movs	r2, #1
 8011944:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	2240      	movs	r2, #64	; 0x40
 801194c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011950:	2340      	movs	r3, #64	; 0x40
 8011952:	2200      	movs	r2, #0
 8011954:	2180      	movs	r1, #128	; 0x80
 8011956:	6878      	ldr	r0, [r7, #4]
 8011958:	f004 f981 	bl	8015c5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	2201      	movs	r2, #1
 8011960:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	2240      	movs	r2, #64	; 0x40
 8011966:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011968:	2300      	movs	r3, #0
}
 801196a:	4618      	mov	r0, r3
 801196c:	3708      	adds	r7, #8
 801196e:	46bd      	mov	sp, r7
 8011970:	bd80      	pop	{r7, pc}

08011972 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011972:	b480      	push	{r7}
 8011974:	b083      	sub	sp, #12
 8011976:	af00      	add	r7, sp, #0
 8011978:	6078      	str	r0, [r7, #4]
 801197a:	460b      	mov	r3, r1
 801197c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	78fa      	ldrb	r2, [r7, #3]
 8011982:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011984:	2300      	movs	r3, #0
}
 8011986:	4618      	mov	r0, r3
 8011988:	370c      	adds	r7, #12
 801198a:	46bd      	mov	sp, r7
 801198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011990:	4770      	bx	lr

08011992 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011992:	b480      	push	{r7}
 8011994:	b083      	sub	sp, #12
 8011996:	af00      	add	r7, sp, #0
 8011998:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2204      	movs	r2, #4
 80119aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80119ae:	2300      	movs	r3, #0
}
 80119b0:	4618      	mov	r0, r3
 80119b2:	370c      	adds	r7, #12
 80119b4:	46bd      	mov	sp, r7
 80119b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ba:	4770      	bx	lr

080119bc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80119bc:	b480      	push	{r7}
 80119be:	b083      	sub	sp, #12
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80119ca:	2b04      	cmp	r3, #4
 80119cc:	d105      	bne.n	80119da <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80119da:	2300      	movs	r3, #0
}
 80119dc:	4618      	mov	r0, r3
 80119de:	370c      	adds	r7, #12
 80119e0:	46bd      	mov	sp, r7
 80119e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e6:	4770      	bx	lr

080119e8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b082      	sub	sp, #8
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80119f6:	2b03      	cmp	r3, #3
 80119f8:	d10b      	bne.n	8011a12 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a00:	69db      	ldr	r3, [r3, #28]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d005      	beq.n	8011a12 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a0c:	69db      	ldr	r3, [r3, #28]
 8011a0e:	6878      	ldr	r0, [r7, #4]
 8011a10:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011a12:	2300      	movs	r3, #0
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	3708      	adds	r7, #8
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	bd80      	pop	{r7, pc}

08011a1c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011a1c:	b480      	push	{r7}
 8011a1e:	b083      	sub	sp, #12
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
 8011a24:	460b      	mov	r3, r1
 8011a26:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011a28:	2300      	movs	r3, #0
}
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	370c      	adds	r7, #12
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a34:	4770      	bx	lr

08011a36 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011a36:	b480      	push	{r7}
 8011a38:	b083      	sub	sp, #12
 8011a3a:	af00      	add	r7, sp, #0
 8011a3c:	6078      	str	r0, [r7, #4]
 8011a3e:	460b      	mov	r3, r1
 8011a40:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011a42:	2300      	movs	r3, #0
}
 8011a44:	4618      	mov	r0, r3
 8011a46:	370c      	adds	r7, #12
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4e:	4770      	bx	lr

08011a50 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011a50:	b480      	push	{r7}
 8011a52:	b083      	sub	sp, #12
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011a58:	2300      	movs	r3, #0
}
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	370c      	adds	r7, #12
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a64:	4770      	bx	lr

08011a66 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011a66:	b580      	push	{r7, lr}
 8011a68:	b082      	sub	sp, #8
 8011a6a:	af00      	add	r7, sp, #0
 8011a6c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	2201      	movs	r2, #1
 8011a72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d009      	beq.n	8011a94 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a86:	685b      	ldr	r3, [r3, #4]
 8011a88:	687a      	ldr	r2, [r7, #4]
 8011a8a:	6852      	ldr	r2, [r2, #4]
 8011a8c:	b2d2      	uxtb	r2, r2
 8011a8e:	4611      	mov	r1, r2
 8011a90:	6878      	ldr	r0, [r7, #4]
 8011a92:	4798      	blx	r3
  }

  return USBD_OK;
 8011a94:	2300      	movs	r3, #0
}
 8011a96:	4618      	mov	r0, r3
 8011a98:	3708      	adds	r7, #8
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}

08011a9e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011a9e:	b480      	push	{r7}
 8011aa0:	b087      	sub	sp, #28
 8011aa2:	af00      	add	r7, sp, #0
 8011aa4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011aaa:	697b      	ldr	r3, [r7, #20]
 8011aac:	781b      	ldrb	r3, [r3, #0]
 8011aae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011ab0:	697b      	ldr	r3, [r7, #20]
 8011ab2:	3301      	adds	r3, #1
 8011ab4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011ab6:	697b      	ldr	r3, [r7, #20]
 8011ab8:	781b      	ldrb	r3, [r3, #0]
 8011aba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011abc:	8a3b      	ldrh	r3, [r7, #16]
 8011abe:	021b      	lsls	r3, r3, #8
 8011ac0:	b21a      	sxth	r2, r3
 8011ac2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011ac6:	4313      	orrs	r3, r2
 8011ac8:	b21b      	sxth	r3, r3
 8011aca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011acc:	89fb      	ldrh	r3, [r7, #14]
}
 8011ace:	4618      	mov	r0, r3
 8011ad0:	371c      	adds	r7, #28
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad8:	4770      	bx	lr
	...

08011adc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b084      	sub	sp, #16
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
 8011ae4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	781b      	ldrb	r3, [r3, #0]
 8011aee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011af2:	2b40      	cmp	r3, #64	; 0x40
 8011af4:	d005      	beq.n	8011b02 <USBD_StdDevReq+0x26>
 8011af6:	2b40      	cmp	r3, #64	; 0x40
 8011af8:	d853      	bhi.n	8011ba2 <USBD_StdDevReq+0xc6>
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d00b      	beq.n	8011b16 <USBD_StdDevReq+0x3a>
 8011afe:	2b20      	cmp	r3, #32
 8011b00:	d14f      	bne.n	8011ba2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b08:	689b      	ldr	r3, [r3, #8]
 8011b0a:	6839      	ldr	r1, [r7, #0]
 8011b0c:	6878      	ldr	r0, [r7, #4]
 8011b0e:	4798      	blx	r3
 8011b10:	4603      	mov	r3, r0
 8011b12:	73fb      	strb	r3, [r7, #15]
    break;
 8011b14:	e04a      	b.n	8011bac <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	785b      	ldrb	r3, [r3, #1]
 8011b1a:	2b09      	cmp	r3, #9
 8011b1c:	d83b      	bhi.n	8011b96 <USBD_StdDevReq+0xba>
 8011b1e:	a201      	add	r2, pc, #4	; (adr r2, 8011b24 <USBD_StdDevReq+0x48>)
 8011b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b24:	08011b79 	.word	0x08011b79
 8011b28:	08011b8d 	.word	0x08011b8d
 8011b2c:	08011b97 	.word	0x08011b97
 8011b30:	08011b83 	.word	0x08011b83
 8011b34:	08011b97 	.word	0x08011b97
 8011b38:	08011b57 	.word	0x08011b57
 8011b3c:	08011b4d 	.word	0x08011b4d
 8011b40:	08011b97 	.word	0x08011b97
 8011b44:	08011b6f 	.word	0x08011b6f
 8011b48:	08011b61 	.word	0x08011b61
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8011b4c:	6839      	ldr	r1, [r7, #0]
 8011b4e:	6878      	ldr	r0, [r7, #4]
 8011b50:	f000 f9d8 	bl	8011f04 <USBD_GetDescriptor>
      break;
 8011b54:	e024      	b.n	8011ba0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8011b56:	6839      	ldr	r1, [r7, #0]
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	f000 fb3d 	bl	80121d8 <USBD_SetAddress>
      break;
 8011b5e:	e01f      	b.n	8011ba0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8011b60:	6839      	ldr	r1, [r7, #0]
 8011b62:	6878      	ldr	r0, [r7, #4]
 8011b64:	f000 fb7c 	bl	8012260 <USBD_SetConfig>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8011b6c:	e018      	b.n	8011ba0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8011b6e:	6839      	ldr	r1, [r7, #0]
 8011b70:	6878      	ldr	r0, [r7, #4]
 8011b72:	f000 fc19 	bl	80123a8 <USBD_GetConfig>
      break;
 8011b76:	e013      	b.n	8011ba0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8011b78:	6839      	ldr	r1, [r7, #0]
 8011b7a:	6878      	ldr	r0, [r7, #4]
 8011b7c:	f000 fc49 	bl	8012412 <USBD_GetStatus>
      break;
 8011b80:	e00e      	b.n	8011ba0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8011b82:	6839      	ldr	r1, [r7, #0]
 8011b84:	6878      	ldr	r0, [r7, #4]
 8011b86:	f000 fc77 	bl	8012478 <USBD_SetFeature>
      break;
 8011b8a:	e009      	b.n	8011ba0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8011b8c:	6839      	ldr	r1, [r7, #0]
 8011b8e:	6878      	ldr	r0, [r7, #4]
 8011b90:	f000 fc86 	bl	80124a0 <USBD_ClrFeature>
      break;
 8011b94:	e004      	b.n	8011ba0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8011b96:	6839      	ldr	r1, [r7, #0]
 8011b98:	6878      	ldr	r0, [r7, #4]
 8011b9a:	f000 fcdc 	bl	8012556 <USBD_CtlError>
      break;
 8011b9e:	bf00      	nop
    }
    break;
 8011ba0:	e004      	b.n	8011bac <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8011ba2:	6839      	ldr	r1, [r7, #0]
 8011ba4:	6878      	ldr	r0, [r7, #4]
 8011ba6:	f000 fcd6 	bl	8012556 <USBD_CtlError>
    break;
 8011baa:	bf00      	nop
  }

  return ret;
 8011bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3710      	adds	r7, #16
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}
 8011bb6:	bf00      	nop

08011bb8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b084      	sub	sp, #16
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
 8011bc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	781b      	ldrb	r3, [r3, #0]
 8011bca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011bce:	2b40      	cmp	r3, #64	; 0x40
 8011bd0:	d005      	beq.n	8011bde <USBD_StdItfReq+0x26>
 8011bd2:	2b40      	cmp	r3, #64	; 0x40
 8011bd4:	d82e      	bhi.n	8011c34 <USBD_StdItfReq+0x7c>
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d001      	beq.n	8011bde <USBD_StdItfReq+0x26>
 8011bda:	2b20      	cmp	r3, #32
 8011bdc:	d12a      	bne.n	8011c34 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011be4:	3b01      	subs	r3, #1
 8011be6:	2b02      	cmp	r3, #2
 8011be8:	d81d      	bhi.n	8011c26 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011bea:	683b      	ldr	r3, [r7, #0]
 8011bec:	889b      	ldrh	r3, [r3, #4]
 8011bee:	b2db      	uxtb	r3, r3
 8011bf0:	2b01      	cmp	r3, #1
 8011bf2:	d813      	bhi.n	8011c1c <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bfa:	689b      	ldr	r3, [r3, #8]
 8011bfc:	6839      	ldr	r1, [r7, #0]
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	4798      	blx	r3
 8011c02:	4603      	mov	r3, r0
 8011c04:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	88db      	ldrh	r3, [r3, #6]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d110      	bne.n	8011c30 <USBD_StdItfReq+0x78>
 8011c0e:	7bfb      	ldrb	r3, [r7, #15]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d10d      	bne.n	8011c30 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8011c14:	6878      	ldr	r0, [r7, #4]
 8011c16:	f000 fd69 	bl	80126ec <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8011c1a:	e009      	b.n	8011c30 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8011c1c:	6839      	ldr	r1, [r7, #0]
 8011c1e:	6878      	ldr	r0, [r7, #4]
 8011c20:	f000 fc99 	bl	8012556 <USBD_CtlError>
      break;
 8011c24:	e004      	b.n	8011c30 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8011c26:	6839      	ldr	r1, [r7, #0]
 8011c28:	6878      	ldr	r0, [r7, #4]
 8011c2a:	f000 fc94 	bl	8012556 <USBD_CtlError>
      break;
 8011c2e:	e000      	b.n	8011c32 <USBD_StdItfReq+0x7a>
      break;
 8011c30:	bf00      	nop
    }
    break;
 8011c32:	e004      	b.n	8011c3e <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8011c34:	6839      	ldr	r1, [r7, #0]
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f000 fc8d 	bl	8012556 <USBD_CtlError>
    break;
 8011c3c:	bf00      	nop
  }

  return ret;
 8011c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c40:	4618      	mov	r0, r3
 8011c42:	3710      	adds	r7, #16
 8011c44:	46bd      	mov	sp, r7
 8011c46:	bd80      	pop	{r7, pc}

08011c48 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	b084      	sub	sp, #16
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
 8011c50:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011c52:	2300      	movs	r3, #0
 8011c54:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8011c56:	683b      	ldr	r3, [r7, #0]
 8011c58:	889b      	ldrh	r3, [r3, #4]
 8011c5a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011c5c:	683b      	ldr	r3, [r7, #0]
 8011c5e:	781b      	ldrb	r3, [r3, #0]
 8011c60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011c64:	2b40      	cmp	r3, #64	; 0x40
 8011c66:	d007      	beq.n	8011c78 <USBD_StdEPReq+0x30>
 8011c68:	2b40      	cmp	r3, #64	; 0x40
 8011c6a:	f200 8140 	bhi.w	8011eee <USBD_StdEPReq+0x2a6>
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d00c      	beq.n	8011c8c <USBD_StdEPReq+0x44>
 8011c72:	2b20      	cmp	r3, #32
 8011c74:	f040 813b 	bne.w	8011eee <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c7e:	689b      	ldr	r3, [r3, #8]
 8011c80:	6839      	ldr	r1, [r7, #0]
 8011c82:	6878      	ldr	r0, [r7, #4]
 8011c84:	4798      	blx	r3
 8011c86:	4603      	mov	r3, r0
 8011c88:	73fb      	strb	r3, [r7, #15]
    break;
 8011c8a:	e135      	b.n	8011ef8 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011c8c:	683b      	ldr	r3, [r7, #0]
 8011c8e:	785b      	ldrb	r3, [r3, #1]
 8011c90:	2b03      	cmp	r3, #3
 8011c92:	d007      	beq.n	8011ca4 <USBD_StdEPReq+0x5c>
 8011c94:	2b03      	cmp	r3, #3
 8011c96:	f300 8124 	bgt.w	8011ee2 <USBD_StdEPReq+0x29a>
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d07b      	beq.n	8011d96 <USBD_StdEPReq+0x14e>
 8011c9e:	2b01      	cmp	r3, #1
 8011ca0:	d03b      	beq.n	8011d1a <USBD_StdEPReq+0xd2>
 8011ca2:	e11e      	b.n	8011ee2 <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011caa:	2b02      	cmp	r3, #2
 8011cac:	d002      	beq.n	8011cb4 <USBD_StdEPReq+0x6c>
 8011cae:	2b03      	cmp	r3, #3
 8011cb0:	d016      	beq.n	8011ce0 <USBD_StdEPReq+0x98>
 8011cb2:	e02c      	b.n	8011d0e <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011cb4:	7bbb      	ldrb	r3, [r7, #14]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d00d      	beq.n	8011cd6 <USBD_StdEPReq+0x8e>
 8011cba:	7bbb      	ldrb	r3, [r7, #14]
 8011cbc:	2b80      	cmp	r3, #128	; 0x80
 8011cbe:	d00a      	beq.n	8011cd6 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011cc0:	7bbb      	ldrb	r3, [r7, #14]
 8011cc2:	4619      	mov	r1, r3
 8011cc4:	6878      	ldr	r0, [r7, #4]
 8011cc6:	f004 f80f 	bl	8015ce8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011cca:	2180      	movs	r1, #128	; 0x80
 8011ccc:	6878      	ldr	r0, [r7, #4]
 8011cce:	f004 f80b 	bl	8015ce8 <USBD_LL_StallEP>
 8011cd2:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011cd4:	e020      	b.n	8011d18 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8011cd6:	6839      	ldr	r1, [r7, #0]
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f000 fc3c 	bl	8012556 <USBD_CtlError>
        break;
 8011cde:	e01b      	b.n	8011d18 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	885b      	ldrh	r3, [r3, #2]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d10e      	bne.n	8011d06 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011ce8:	7bbb      	ldrb	r3, [r7, #14]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d00b      	beq.n	8011d06 <USBD_StdEPReq+0xbe>
 8011cee:	7bbb      	ldrb	r3, [r7, #14]
 8011cf0:	2b80      	cmp	r3, #128	; 0x80
 8011cf2:	d008      	beq.n	8011d06 <USBD_StdEPReq+0xbe>
 8011cf4:	683b      	ldr	r3, [r7, #0]
 8011cf6:	88db      	ldrh	r3, [r3, #6]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d104      	bne.n	8011d06 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8011cfc:	7bbb      	ldrb	r3, [r7, #14]
 8011cfe:	4619      	mov	r1, r3
 8011d00:	6878      	ldr	r0, [r7, #4]
 8011d02:	f003 fff1 	bl	8015ce8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8011d06:	6878      	ldr	r0, [r7, #4]
 8011d08:	f000 fcf0 	bl	80126ec <USBD_CtlSendStatus>

        break;
 8011d0c:	e004      	b.n	8011d18 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8011d0e:	6839      	ldr	r1, [r7, #0]
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	f000 fc20 	bl	8012556 <USBD_CtlError>
        break;
 8011d16:	bf00      	nop
      }
      break;
 8011d18:	e0e8      	b.n	8011eec <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d20:	2b02      	cmp	r3, #2
 8011d22:	d002      	beq.n	8011d2a <USBD_StdEPReq+0xe2>
 8011d24:	2b03      	cmp	r3, #3
 8011d26:	d016      	beq.n	8011d56 <USBD_StdEPReq+0x10e>
 8011d28:	e02e      	b.n	8011d88 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011d2a:	7bbb      	ldrb	r3, [r7, #14]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d00d      	beq.n	8011d4c <USBD_StdEPReq+0x104>
 8011d30:	7bbb      	ldrb	r3, [r7, #14]
 8011d32:	2b80      	cmp	r3, #128	; 0x80
 8011d34:	d00a      	beq.n	8011d4c <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011d36:	7bbb      	ldrb	r3, [r7, #14]
 8011d38:	4619      	mov	r1, r3
 8011d3a:	6878      	ldr	r0, [r7, #4]
 8011d3c:	f003 ffd4 	bl	8015ce8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011d40:	2180      	movs	r1, #128	; 0x80
 8011d42:	6878      	ldr	r0, [r7, #4]
 8011d44:	f003 ffd0 	bl	8015ce8 <USBD_LL_StallEP>
 8011d48:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011d4a:	e023      	b.n	8011d94 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8011d4c:	6839      	ldr	r1, [r7, #0]
 8011d4e:	6878      	ldr	r0, [r7, #4]
 8011d50:	f000 fc01 	bl	8012556 <USBD_CtlError>
        break;
 8011d54:	e01e      	b.n	8011d94 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011d56:	683b      	ldr	r3, [r7, #0]
 8011d58:	885b      	ldrh	r3, [r3, #2]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d119      	bne.n	8011d92 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8011d5e:	7bbb      	ldrb	r3, [r7, #14]
 8011d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d004      	beq.n	8011d72 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011d68:	7bbb      	ldrb	r3, [r7, #14]
 8011d6a:	4619      	mov	r1, r3
 8011d6c:	6878      	ldr	r0, [r7, #4]
 8011d6e:	f003 ffda 	bl	8015d26 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8011d72:	6878      	ldr	r0, [r7, #4]
 8011d74:	f000 fcba 	bl	80126ec <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d7e:	689b      	ldr	r3, [r3, #8]
 8011d80:	6839      	ldr	r1, [r7, #0]
 8011d82:	6878      	ldr	r0, [r7, #4]
 8011d84:	4798      	blx	r3
        }
        break;
 8011d86:	e004      	b.n	8011d92 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8011d88:	6839      	ldr	r1, [r7, #0]
 8011d8a:	6878      	ldr	r0, [r7, #4]
 8011d8c:	f000 fbe3 	bl	8012556 <USBD_CtlError>
        break;
 8011d90:	e000      	b.n	8011d94 <USBD_StdEPReq+0x14c>
        break;
 8011d92:	bf00      	nop
      }
      break;
 8011d94:	e0aa      	b.n	8011eec <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d9c:	2b02      	cmp	r3, #2
 8011d9e:	d002      	beq.n	8011da6 <USBD_StdEPReq+0x15e>
 8011da0:	2b03      	cmp	r3, #3
 8011da2:	d032      	beq.n	8011e0a <USBD_StdEPReq+0x1c2>
 8011da4:	e097      	b.n	8011ed6 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011da6:	7bbb      	ldrb	r3, [r7, #14]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d007      	beq.n	8011dbc <USBD_StdEPReq+0x174>
 8011dac:	7bbb      	ldrb	r3, [r7, #14]
 8011dae:	2b80      	cmp	r3, #128	; 0x80
 8011db0:	d004      	beq.n	8011dbc <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8011db2:	6839      	ldr	r1, [r7, #0]
 8011db4:	6878      	ldr	r0, [r7, #4]
 8011db6:	f000 fbce 	bl	8012556 <USBD_CtlError>
          break;
 8011dba:	e091      	b.n	8011ee0 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011dbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	da0b      	bge.n	8011ddc <USBD_StdEPReq+0x194>
 8011dc4:	7bbb      	ldrb	r3, [r7, #14]
 8011dc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011dca:	4613      	mov	r3, r2
 8011dcc:	009b      	lsls	r3, r3, #2
 8011dce:	4413      	add	r3, r2
 8011dd0:	009b      	lsls	r3, r3, #2
 8011dd2:	3310      	adds	r3, #16
 8011dd4:	687a      	ldr	r2, [r7, #4]
 8011dd6:	4413      	add	r3, r2
 8011dd8:	3304      	adds	r3, #4
 8011dda:	e00b      	b.n	8011df4 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011ddc:	7bbb      	ldrb	r3, [r7, #14]
 8011dde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011de2:	4613      	mov	r3, r2
 8011de4:	009b      	lsls	r3, r3, #2
 8011de6:	4413      	add	r3, r2
 8011de8:	009b      	lsls	r3, r3, #2
 8011dea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011dee:	687a      	ldr	r2, [r7, #4]
 8011df0:	4413      	add	r3, r2
 8011df2:	3304      	adds	r3, #4
 8011df4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8011df6:	68bb      	ldr	r3, [r7, #8]
 8011df8:	2200      	movs	r2, #0
 8011dfa:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011dfc:	68bb      	ldr	r3, [r7, #8]
 8011dfe:	2202      	movs	r2, #2
 8011e00:	4619      	mov	r1, r3
 8011e02:	6878      	ldr	r0, [r7, #4]
 8011e04:	f000 fc18 	bl	8012638 <USBD_CtlSendData>
        break;
 8011e08:	e06a      	b.n	8011ee0 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8011e0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	da11      	bge.n	8011e36 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011e12:	7bbb      	ldrb	r3, [r7, #14]
 8011e14:	f003 020f 	and.w	r2, r3, #15
 8011e18:	6879      	ldr	r1, [r7, #4]
 8011e1a:	4613      	mov	r3, r2
 8011e1c:	009b      	lsls	r3, r3, #2
 8011e1e:	4413      	add	r3, r2
 8011e20:	009b      	lsls	r3, r3, #2
 8011e22:	440b      	add	r3, r1
 8011e24:	3324      	adds	r3, #36	; 0x24
 8011e26:	881b      	ldrh	r3, [r3, #0]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d117      	bne.n	8011e5c <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8011e2c:	6839      	ldr	r1, [r7, #0]
 8011e2e:	6878      	ldr	r0, [r7, #4]
 8011e30:	f000 fb91 	bl	8012556 <USBD_CtlError>
            break;
 8011e34:	e054      	b.n	8011ee0 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011e36:	7bbb      	ldrb	r3, [r7, #14]
 8011e38:	f003 020f 	and.w	r2, r3, #15
 8011e3c:	6879      	ldr	r1, [r7, #4]
 8011e3e:	4613      	mov	r3, r2
 8011e40:	009b      	lsls	r3, r3, #2
 8011e42:	4413      	add	r3, r2
 8011e44:	009b      	lsls	r3, r3, #2
 8011e46:	440b      	add	r3, r1
 8011e48:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011e4c:	881b      	ldrh	r3, [r3, #0]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d104      	bne.n	8011e5c <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8011e52:	6839      	ldr	r1, [r7, #0]
 8011e54:	6878      	ldr	r0, [r7, #4]
 8011e56:	f000 fb7e 	bl	8012556 <USBD_CtlError>
            break;
 8011e5a:	e041      	b.n	8011ee0 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011e5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	da0b      	bge.n	8011e7c <USBD_StdEPReq+0x234>
 8011e64:	7bbb      	ldrb	r3, [r7, #14]
 8011e66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011e6a:	4613      	mov	r3, r2
 8011e6c:	009b      	lsls	r3, r3, #2
 8011e6e:	4413      	add	r3, r2
 8011e70:	009b      	lsls	r3, r3, #2
 8011e72:	3310      	adds	r3, #16
 8011e74:	687a      	ldr	r2, [r7, #4]
 8011e76:	4413      	add	r3, r2
 8011e78:	3304      	adds	r3, #4
 8011e7a:	e00b      	b.n	8011e94 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011e7c:	7bbb      	ldrb	r3, [r7, #14]
 8011e7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011e82:	4613      	mov	r3, r2
 8011e84:	009b      	lsls	r3, r3, #2
 8011e86:	4413      	add	r3, r2
 8011e88:	009b      	lsls	r3, r3, #2
 8011e8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011e8e:	687a      	ldr	r2, [r7, #4]
 8011e90:	4413      	add	r3, r2
 8011e92:	3304      	adds	r3, #4
 8011e94:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011e96:	7bbb      	ldrb	r3, [r7, #14]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d002      	beq.n	8011ea2 <USBD_StdEPReq+0x25a>
 8011e9c:	7bbb      	ldrb	r3, [r7, #14]
 8011e9e:	2b80      	cmp	r3, #128	; 0x80
 8011ea0:	d103      	bne.n	8011eaa <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8011ea2:	68bb      	ldr	r3, [r7, #8]
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	601a      	str	r2, [r3, #0]
 8011ea8:	e00e      	b.n	8011ec8 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011eaa:	7bbb      	ldrb	r3, [r7, #14]
 8011eac:	4619      	mov	r1, r3
 8011eae:	6878      	ldr	r0, [r7, #4]
 8011eb0:	f003 ff58 	bl	8015d64 <USBD_LL_IsStallEP>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d003      	beq.n	8011ec2 <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 8011eba:	68bb      	ldr	r3, [r7, #8]
 8011ebc:	2201      	movs	r2, #1
 8011ebe:	601a      	str	r2, [r3, #0]
 8011ec0:	e002      	b.n	8011ec8 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 8011ec2:	68bb      	ldr	r3, [r7, #8]
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011ec8:	68bb      	ldr	r3, [r7, #8]
 8011eca:	2202      	movs	r2, #2
 8011ecc:	4619      	mov	r1, r3
 8011ece:	6878      	ldr	r0, [r7, #4]
 8011ed0:	f000 fbb2 	bl	8012638 <USBD_CtlSendData>
          break;
 8011ed4:	e004      	b.n	8011ee0 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 8011ed6:	6839      	ldr	r1, [r7, #0]
 8011ed8:	6878      	ldr	r0, [r7, #4]
 8011eda:	f000 fb3c 	bl	8012556 <USBD_CtlError>
        break;
 8011ede:	bf00      	nop
      }
      break;
 8011ee0:	e004      	b.n	8011eec <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 8011ee2:	6839      	ldr	r1, [r7, #0]
 8011ee4:	6878      	ldr	r0, [r7, #4]
 8011ee6:	f000 fb36 	bl	8012556 <USBD_CtlError>
      break;
 8011eea:	bf00      	nop
    }
    break;
 8011eec:	e004      	b.n	8011ef8 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8011eee:	6839      	ldr	r1, [r7, #0]
 8011ef0:	6878      	ldr	r0, [r7, #4]
 8011ef2:	f000 fb30 	bl	8012556 <USBD_CtlError>
    break;
 8011ef6:	bf00      	nop
  }

  return ret;
 8011ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011efa:	4618      	mov	r0, r3
 8011efc:	3710      	adds	r7, #16
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bd80      	pop	{r7, pc}
	...

08011f04 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b084      	sub	sp, #16
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
 8011f0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011f0e:	2300      	movs	r3, #0
 8011f10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011f12:	2300      	movs	r3, #0
 8011f14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011f16:	2300      	movs	r3, #0
 8011f18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	885b      	ldrh	r3, [r3, #2]
 8011f1e:	0a1b      	lsrs	r3, r3, #8
 8011f20:	b29b      	uxth	r3, r3
 8011f22:	3b01      	subs	r3, #1
 8011f24:	2b06      	cmp	r3, #6
 8011f26:	f200 8128 	bhi.w	801217a <USBD_GetDescriptor+0x276>
 8011f2a:	a201      	add	r2, pc, #4	; (adr r2, 8011f30 <USBD_GetDescriptor+0x2c>)
 8011f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f30:	08011f4d 	.word	0x08011f4d
 8011f34:	08011f65 	.word	0x08011f65
 8011f38:	08011fa5 	.word	0x08011fa5
 8011f3c:	0801217b 	.word	0x0801217b
 8011f40:	0801217b 	.word	0x0801217b
 8011f44:	0801211b 	.word	0x0801211b
 8011f48:	08012147 	.word	0x08012147
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	687a      	ldr	r2, [r7, #4]
 8011f56:	7c12      	ldrb	r2, [r2, #16]
 8011f58:	f107 0108 	add.w	r1, r7, #8
 8011f5c:	4610      	mov	r0, r2
 8011f5e:	4798      	blx	r3
 8011f60:	60f8      	str	r0, [r7, #12]
    break;
 8011f62:	e112      	b.n	801218a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	7c1b      	ldrb	r3, [r3, #16]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d10d      	bne.n	8011f88 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f74:	f107 0208 	add.w	r2, r7, #8
 8011f78:	4610      	mov	r0, r2
 8011f7a:	4798      	blx	r3
 8011f7c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	3301      	adds	r3, #1
 8011f82:	2202      	movs	r2, #2
 8011f84:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8011f86:	e100      	b.n	801218a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f90:	f107 0208 	add.w	r2, r7, #8
 8011f94:	4610      	mov	r0, r2
 8011f96:	4798      	blx	r3
 8011f98:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	3301      	adds	r3, #1
 8011f9e:	2202      	movs	r2, #2
 8011fa0:	701a      	strb	r2, [r3, #0]
    break;
 8011fa2:	e0f2      	b.n	801218a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8011fa4:	683b      	ldr	r3, [r7, #0]
 8011fa6:	885b      	ldrh	r3, [r3, #2]
 8011fa8:	b2db      	uxtb	r3, r3
 8011faa:	2b05      	cmp	r3, #5
 8011fac:	f200 80ac 	bhi.w	8012108 <USBD_GetDescriptor+0x204>
 8011fb0:	a201      	add	r2, pc, #4	; (adr r2, 8011fb8 <USBD_GetDescriptor+0xb4>)
 8011fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fb6:	bf00      	nop
 8011fb8:	08011fd1 	.word	0x08011fd1
 8011fbc:	08012005 	.word	0x08012005
 8011fc0:	08012039 	.word	0x08012039
 8011fc4:	0801206d 	.word	0x0801206d
 8011fc8:	080120a1 	.word	0x080120a1
 8011fcc:	080120d5 	.word	0x080120d5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011fd6:	685b      	ldr	r3, [r3, #4]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d00b      	beq.n	8011ff4 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011fe2:	685b      	ldr	r3, [r3, #4]
 8011fe4:	687a      	ldr	r2, [r7, #4]
 8011fe6:	7c12      	ldrb	r2, [r2, #16]
 8011fe8:	f107 0108 	add.w	r1, r7, #8
 8011fec:	4610      	mov	r0, r2
 8011fee:	4798      	blx	r3
 8011ff0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011ff2:	e091      	b.n	8012118 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011ff4:	6839      	ldr	r1, [r7, #0]
 8011ff6:	6878      	ldr	r0, [r7, #4]
 8011ff8:	f000 faad 	bl	8012556 <USBD_CtlError>
        err++;
 8011ffc:	7afb      	ldrb	r3, [r7, #11]
 8011ffe:	3301      	adds	r3, #1
 8012000:	72fb      	strb	r3, [r7, #11]
      break;
 8012002:	e089      	b.n	8012118 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801200a:	689b      	ldr	r3, [r3, #8]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d00b      	beq.n	8012028 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012016:	689b      	ldr	r3, [r3, #8]
 8012018:	687a      	ldr	r2, [r7, #4]
 801201a:	7c12      	ldrb	r2, [r2, #16]
 801201c:	f107 0108 	add.w	r1, r7, #8
 8012020:	4610      	mov	r0, r2
 8012022:	4798      	blx	r3
 8012024:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012026:	e077      	b.n	8012118 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012028:	6839      	ldr	r1, [r7, #0]
 801202a:	6878      	ldr	r0, [r7, #4]
 801202c:	f000 fa93 	bl	8012556 <USBD_CtlError>
        err++;
 8012030:	7afb      	ldrb	r3, [r7, #11]
 8012032:	3301      	adds	r3, #1
 8012034:	72fb      	strb	r3, [r7, #11]
      break;
 8012036:	e06f      	b.n	8012118 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801203e:	68db      	ldr	r3, [r3, #12]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d00b      	beq.n	801205c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801204a:	68db      	ldr	r3, [r3, #12]
 801204c:	687a      	ldr	r2, [r7, #4]
 801204e:	7c12      	ldrb	r2, [r2, #16]
 8012050:	f107 0108 	add.w	r1, r7, #8
 8012054:	4610      	mov	r0, r2
 8012056:	4798      	blx	r3
 8012058:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801205a:	e05d      	b.n	8012118 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801205c:	6839      	ldr	r1, [r7, #0]
 801205e:	6878      	ldr	r0, [r7, #4]
 8012060:	f000 fa79 	bl	8012556 <USBD_CtlError>
        err++;
 8012064:	7afb      	ldrb	r3, [r7, #11]
 8012066:	3301      	adds	r3, #1
 8012068:	72fb      	strb	r3, [r7, #11]
      break;
 801206a:	e055      	b.n	8012118 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012072:	691b      	ldr	r3, [r3, #16]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d00b      	beq.n	8012090 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801207e:	691b      	ldr	r3, [r3, #16]
 8012080:	687a      	ldr	r2, [r7, #4]
 8012082:	7c12      	ldrb	r2, [r2, #16]
 8012084:	f107 0108 	add.w	r1, r7, #8
 8012088:	4610      	mov	r0, r2
 801208a:	4798      	blx	r3
 801208c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801208e:	e043      	b.n	8012118 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012090:	6839      	ldr	r1, [r7, #0]
 8012092:	6878      	ldr	r0, [r7, #4]
 8012094:	f000 fa5f 	bl	8012556 <USBD_CtlError>
        err++;
 8012098:	7afb      	ldrb	r3, [r7, #11]
 801209a:	3301      	adds	r3, #1
 801209c:	72fb      	strb	r3, [r7, #11]
      break;
 801209e:	e03b      	b.n	8012118 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80120a6:	695b      	ldr	r3, [r3, #20]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d00b      	beq.n	80120c4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80120b2:	695b      	ldr	r3, [r3, #20]
 80120b4:	687a      	ldr	r2, [r7, #4]
 80120b6:	7c12      	ldrb	r2, [r2, #16]
 80120b8:	f107 0108 	add.w	r1, r7, #8
 80120bc:	4610      	mov	r0, r2
 80120be:	4798      	blx	r3
 80120c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80120c2:	e029      	b.n	8012118 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80120c4:	6839      	ldr	r1, [r7, #0]
 80120c6:	6878      	ldr	r0, [r7, #4]
 80120c8:	f000 fa45 	bl	8012556 <USBD_CtlError>
        err++;
 80120cc:	7afb      	ldrb	r3, [r7, #11]
 80120ce:	3301      	adds	r3, #1
 80120d0:	72fb      	strb	r3, [r7, #11]
      break;
 80120d2:	e021      	b.n	8012118 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80120da:	699b      	ldr	r3, [r3, #24]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d00b      	beq.n	80120f8 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80120e6:	699b      	ldr	r3, [r3, #24]
 80120e8:	687a      	ldr	r2, [r7, #4]
 80120ea:	7c12      	ldrb	r2, [r2, #16]
 80120ec:	f107 0108 	add.w	r1, r7, #8
 80120f0:	4610      	mov	r0, r2
 80120f2:	4798      	blx	r3
 80120f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80120f6:	e00f      	b.n	8012118 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80120f8:	6839      	ldr	r1, [r7, #0]
 80120fa:	6878      	ldr	r0, [r7, #4]
 80120fc:	f000 fa2b 	bl	8012556 <USBD_CtlError>
        err++;
 8012100:	7afb      	ldrb	r3, [r7, #11]
 8012102:	3301      	adds	r3, #1
 8012104:	72fb      	strb	r3, [r7, #11]
      break;
 8012106:	e007      	b.n	8012118 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8012108:	6839      	ldr	r1, [r7, #0]
 801210a:	6878      	ldr	r0, [r7, #4]
 801210c:	f000 fa23 	bl	8012556 <USBD_CtlError>
      err++;
 8012110:	7afb      	ldrb	r3, [r7, #11]
 8012112:	3301      	adds	r3, #1
 8012114:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8012116:	bf00      	nop
    }
    break;
 8012118:	e037      	b.n	801218a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	7c1b      	ldrb	r3, [r3, #16]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d109      	bne.n	8012136 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801212a:	f107 0208 	add.w	r2, r7, #8
 801212e:	4610      	mov	r0, r2
 8012130:	4798      	blx	r3
 8012132:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8012134:	e029      	b.n	801218a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8012136:	6839      	ldr	r1, [r7, #0]
 8012138:	6878      	ldr	r0, [r7, #4]
 801213a:	f000 fa0c 	bl	8012556 <USBD_CtlError>
      err++;
 801213e:	7afb      	ldrb	r3, [r7, #11]
 8012140:	3301      	adds	r3, #1
 8012142:	72fb      	strb	r3, [r7, #11]
    break;
 8012144:	e021      	b.n	801218a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	7c1b      	ldrb	r3, [r3, #16]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d10d      	bne.n	801216a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012156:	f107 0208 	add.w	r2, r7, #8
 801215a:	4610      	mov	r0, r2
 801215c:	4798      	blx	r3
 801215e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	3301      	adds	r3, #1
 8012164:	2207      	movs	r2, #7
 8012166:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8012168:	e00f      	b.n	801218a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 801216a:	6839      	ldr	r1, [r7, #0]
 801216c:	6878      	ldr	r0, [r7, #4]
 801216e:	f000 f9f2 	bl	8012556 <USBD_CtlError>
      err++;
 8012172:	7afb      	ldrb	r3, [r7, #11]
 8012174:	3301      	adds	r3, #1
 8012176:	72fb      	strb	r3, [r7, #11]
    break;
 8012178:	e007      	b.n	801218a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 801217a:	6839      	ldr	r1, [r7, #0]
 801217c:	6878      	ldr	r0, [r7, #4]
 801217e:	f000 f9ea 	bl	8012556 <USBD_CtlError>
    err++;
 8012182:	7afb      	ldrb	r3, [r7, #11]
 8012184:	3301      	adds	r3, #1
 8012186:	72fb      	strb	r3, [r7, #11]
    break;
 8012188:	bf00      	nop
  }

  if (err != 0U)
 801218a:	7afb      	ldrb	r3, [r7, #11]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d11e      	bne.n	80121ce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8012190:	683b      	ldr	r3, [r7, #0]
 8012192:	88db      	ldrh	r3, [r3, #6]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d016      	beq.n	80121c6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8012198:	893b      	ldrh	r3, [r7, #8]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d00e      	beq.n	80121bc <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 801219e:	683b      	ldr	r3, [r7, #0]
 80121a0:	88da      	ldrh	r2, [r3, #6]
 80121a2:	893b      	ldrh	r3, [r7, #8]
 80121a4:	4293      	cmp	r3, r2
 80121a6:	bf28      	it	cs
 80121a8:	4613      	movcs	r3, r2
 80121aa:	b29b      	uxth	r3, r3
 80121ac:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80121ae:	893b      	ldrh	r3, [r7, #8]
 80121b0:	461a      	mov	r2, r3
 80121b2:	68f9      	ldr	r1, [r7, #12]
 80121b4:	6878      	ldr	r0, [r7, #4]
 80121b6:	f000 fa3f 	bl	8012638 <USBD_CtlSendData>
 80121ba:	e009      	b.n	80121d0 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80121bc:	6839      	ldr	r1, [r7, #0]
 80121be:	6878      	ldr	r0, [r7, #4]
 80121c0:	f000 f9c9 	bl	8012556 <USBD_CtlError>
 80121c4:	e004      	b.n	80121d0 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80121c6:	6878      	ldr	r0, [r7, #4]
 80121c8:	f000 fa90 	bl	80126ec <USBD_CtlSendStatus>
 80121cc:	e000      	b.n	80121d0 <USBD_GetDescriptor+0x2cc>
    return;
 80121ce:	bf00      	nop
    }
  }
}
 80121d0:	3710      	adds	r7, #16
 80121d2:	46bd      	mov	sp, r7
 80121d4:	bd80      	pop	{r7, pc}
 80121d6:	bf00      	nop

080121d8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b084      	sub	sp, #16
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
 80121e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80121e2:	683b      	ldr	r3, [r7, #0]
 80121e4:	889b      	ldrh	r3, [r3, #4]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d130      	bne.n	801224c <USBD_SetAddress+0x74>
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	88db      	ldrh	r3, [r3, #6]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d12c      	bne.n	801224c <USBD_SetAddress+0x74>
 80121f2:	683b      	ldr	r3, [r7, #0]
 80121f4:	885b      	ldrh	r3, [r3, #2]
 80121f6:	2b7f      	cmp	r3, #127	; 0x7f
 80121f8:	d828      	bhi.n	801224c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80121fa:	683b      	ldr	r3, [r7, #0]
 80121fc:	885b      	ldrh	r3, [r3, #2]
 80121fe:	b2db      	uxtb	r3, r3
 8012200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012204:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801220c:	2b03      	cmp	r3, #3
 801220e:	d104      	bne.n	801221a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8012210:	6839      	ldr	r1, [r7, #0]
 8012212:	6878      	ldr	r0, [r7, #4]
 8012214:	f000 f99f 	bl	8012556 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012218:	e01d      	b.n	8012256 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	7bfa      	ldrb	r2, [r7, #15]
 801221e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012222:	7bfb      	ldrb	r3, [r7, #15]
 8012224:	4619      	mov	r1, r3
 8012226:	6878      	ldr	r0, [r7, #4]
 8012228:	f003 fdc8 	bl	8015dbc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801222c:	6878      	ldr	r0, [r7, #4]
 801222e:	f000 fa5d 	bl	80126ec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012232:	7bfb      	ldrb	r3, [r7, #15]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d004      	beq.n	8012242 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	2202      	movs	r2, #2
 801223c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012240:	e009      	b.n	8012256 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	2201      	movs	r2, #1
 8012246:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801224a:	e004      	b.n	8012256 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801224c:	6839      	ldr	r1, [r7, #0]
 801224e:	6878      	ldr	r0, [r7, #4]
 8012250:	f000 f981 	bl	8012556 <USBD_CtlError>
  }
}
 8012254:	bf00      	nop
 8012256:	bf00      	nop
 8012258:	3710      	adds	r7, #16
 801225a:	46bd      	mov	sp, r7
 801225c:	bd80      	pop	{r7, pc}
	...

08012260 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b084      	sub	sp, #16
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
 8012268:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801226a:	2300      	movs	r3, #0
 801226c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801226e:	683b      	ldr	r3, [r7, #0]
 8012270:	885b      	ldrh	r3, [r3, #2]
 8012272:	b2da      	uxtb	r2, r3
 8012274:	4b4b      	ldr	r3, [pc, #300]	; (80123a4 <USBD_SetConfig+0x144>)
 8012276:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012278:	4b4a      	ldr	r3, [pc, #296]	; (80123a4 <USBD_SetConfig+0x144>)
 801227a:	781b      	ldrb	r3, [r3, #0]
 801227c:	2b01      	cmp	r3, #1
 801227e:	d905      	bls.n	801228c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012280:	6839      	ldr	r1, [r7, #0]
 8012282:	6878      	ldr	r0, [r7, #4]
 8012284:	f000 f967 	bl	8012556 <USBD_CtlError>
    return USBD_FAIL;
 8012288:	2303      	movs	r3, #3
 801228a:	e087      	b.n	801239c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012292:	2b02      	cmp	r3, #2
 8012294:	d002      	beq.n	801229c <USBD_SetConfig+0x3c>
 8012296:	2b03      	cmp	r3, #3
 8012298:	d025      	beq.n	80122e6 <USBD_SetConfig+0x86>
 801229a:	e071      	b.n	8012380 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 801229c:	4b41      	ldr	r3, [pc, #260]	; (80123a4 <USBD_SetConfig+0x144>)
 801229e:	781b      	ldrb	r3, [r3, #0]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d01c      	beq.n	80122de <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80122a4:	4b3f      	ldr	r3, [pc, #252]	; (80123a4 <USBD_SetConfig+0x144>)
 80122a6:	781b      	ldrb	r3, [r3, #0]
 80122a8:	461a      	mov	r2, r3
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80122ae:	4b3d      	ldr	r3, [pc, #244]	; (80123a4 <USBD_SetConfig+0x144>)
 80122b0:	781b      	ldrb	r3, [r3, #0]
 80122b2:	4619      	mov	r1, r3
 80122b4:	6878      	ldr	r0, [r7, #4]
 80122b6:	f7ff f999 	bl	80115ec <USBD_SetClassConfig>
 80122ba:	4603      	mov	r3, r0
 80122bc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80122be:	7bfb      	ldrb	r3, [r7, #15]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d004      	beq.n	80122ce <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80122c4:	6839      	ldr	r1, [r7, #0]
 80122c6:	6878      	ldr	r0, [r7, #4]
 80122c8:	f000 f945 	bl	8012556 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80122cc:	e065      	b.n	801239a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80122ce:	6878      	ldr	r0, [r7, #4]
 80122d0:	f000 fa0c 	bl	80126ec <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	2203      	movs	r2, #3
 80122d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80122dc:	e05d      	b.n	801239a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80122de:	6878      	ldr	r0, [r7, #4]
 80122e0:	f000 fa04 	bl	80126ec <USBD_CtlSendStatus>
    break;
 80122e4:	e059      	b.n	801239a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80122e6:	4b2f      	ldr	r3, [pc, #188]	; (80123a4 <USBD_SetConfig+0x144>)
 80122e8:	781b      	ldrb	r3, [r3, #0]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d112      	bne.n	8012314 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	2202      	movs	r2, #2
 80122f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80122f6:	4b2b      	ldr	r3, [pc, #172]	; (80123a4 <USBD_SetConfig+0x144>)
 80122f8:	781b      	ldrb	r3, [r3, #0]
 80122fa:	461a      	mov	r2, r3
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012300:	4b28      	ldr	r3, [pc, #160]	; (80123a4 <USBD_SetConfig+0x144>)
 8012302:	781b      	ldrb	r3, [r3, #0]
 8012304:	4619      	mov	r1, r3
 8012306:	6878      	ldr	r0, [r7, #4]
 8012308:	f7ff f98c 	bl	8011624 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 801230c:	6878      	ldr	r0, [r7, #4]
 801230e:	f000 f9ed 	bl	80126ec <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8012312:	e042      	b.n	801239a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8012314:	4b23      	ldr	r3, [pc, #140]	; (80123a4 <USBD_SetConfig+0x144>)
 8012316:	781b      	ldrb	r3, [r3, #0]
 8012318:	461a      	mov	r2, r3
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	685b      	ldr	r3, [r3, #4]
 801231e:	429a      	cmp	r2, r3
 8012320:	d02a      	beq.n	8012378 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	685b      	ldr	r3, [r3, #4]
 8012326:	b2db      	uxtb	r3, r3
 8012328:	4619      	mov	r1, r3
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	f7ff f97a 	bl	8011624 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8012330:	4b1c      	ldr	r3, [pc, #112]	; (80123a4 <USBD_SetConfig+0x144>)
 8012332:	781b      	ldrb	r3, [r3, #0]
 8012334:	461a      	mov	r2, r3
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 801233a:	4b1a      	ldr	r3, [pc, #104]	; (80123a4 <USBD_SetConfig+0x144>)
 801233c:	781b      	ldrb	r3, [r3, #0]
 801233e:	4619      	mov	r1, r3
 8012340:	6878      	ldr	r0, [r7, #4]
 8012342:	f7ff f953 	bl	80115ec <USBD_SetClassConfig>
 8012346:	4603      	mov	r3, r0
 8012348:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 801234a:	7bfb      	ldrb	r3, [r7, #15]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d00f      	beq.n	8012370 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8012350:	6839      	ldr	r1, [r7, #0]
 8012352:	6878      	ldr	r0, [r7, #4]
 8012354:	f000 f8ff 	bl	8012556 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	685b      	ldr	r3, [r3, #4]
 801235c:	b2db      	uxtb	r3, r3
 801235e:	4619      	mov	r1, r3
 8012360:	6878      	ldr	r0, [r7, #4]
 8012362:	f7ff f95f 	bl	8011624 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	2202      	movs	r2, #2
 801236a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801236e:	e014      	b.n	801239a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8012370:	6878      	ldr	r0, [r7, #4]
 8012372:	f000 f9bb 	bl	80126ec <USBD_CtlSendStatus>
    break;
 8012376:	e010      	b.n	801239a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	f000 f9b7 	bl	80126ec <USBD_CtlSendStatus>
    break;
 801237e:	e00c      	b.n	801239a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8012380:	6839      	ldr	r1, [r7, #0]
 8012382:	6878      	ldr	r0, [r7, #4]
 8012384:	f000 f8e7 	bl	8012556 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012388:	4b06      	ldr	r3, [pc, #24]	; (80123a4 <USBD_SetConfig+0x144>)
 801238a:	781b      	ldrb	r3, [r3, #0]
 801238c:	4619      	mov	r1, r3
 801238e:	6878      	ldr	r0, [r7, #4]
 8012390:	f7ff f948 	bl	8011624 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8012394:	2303      	movs	r3, #3
 8012396:	73fb      	strb	r3, [r7, #15]
    break;
 8012398:	bf00      	nop
  }

  return ret;
 801239a:	7bfb      	ldrb	r3, [r7, #15]
}
 801239c:	4618      	mov	r0, r3
 801239e:	3710      	adds	r7, #16
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}
 80123a4:	20004868 	.word	0x20004868

080123a8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b082      	sub	sp, #8
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
 80123b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80123b2:	683b      	ldr	r3, [r7, #0]
 80123b4:	88db      	ldrh	r3, [r3, #6]
 80123b6:	2b01      	cmp	r3, #1
 80123b8:	d004      	beq.n	80123c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80123ba:	6839      	ldr	r1, [r7, #0]
 80123bc:	6878      	ldr	r0, [r7, #4]
 80123be:	f000 f8ca 	bl	8012556 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80123c2:	e022      	b.n	801240a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123ca:	2b02      	cmp	r3, #2
 80123cc:	dc02      	bgt.n	80123d4 <USBD_GetConfig+0x2c>
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	dc03      	bgt.n	80123da <USBD_GetConfig+0x32>
 80123d2:	e015      	b.n	8012400 <USBD_GetConfig+0x58>
 80123d4:	2b03      	cmp	r3, #3
 80123d6:	d00b      	beq.n	80123f0 <USBD_GetConfig+0x48>
 80123d8:	e012      	b.n	8012400 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	2200      	movs	r2, #0
 80123de:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	3308      	adds	r3, #8
 80123e4:	2201      	movs	r2, #1
 80123e6:	4619      	mov	r1, r3
 80123e8:	6878      	ldr	r0, [r7, #4]
 80123ea:	f000 f925 	bl	8012638 <USBD_CtlSendData>
      break;
 80123ee:	e00c      	b.n	801240a <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	3304      	adds	r3, #4
 80123f4:	2201      	movs	r2, #1
 80123f6:	4619      	mov	r1, r3
 80123f8:	6878      	ldr	r0, [r7, #4]
 80123fa:	f000 f91d 	bl	8012638 <USBD_CtlSendData>
      break;
 80123fe:	e004      	b.n	801240a <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8012400:	6839      	ldr	r1, [r7, #0]
 8012402:	6878      	ldr	r0, [r7, #4]
 8012404:	f000 f8a7 	bl	8012556 <USBD_CtlError>
      break;
 8012408:	bf00      	nop
}
 801240a:	bf00      	nop
 801240c:	3708      	adds	r7, #8
 801240e:	46bd      	mov	sp, r7
 8012410:	bd80      	pop	{r7, pc}

08012412 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012412:	b580      	push	{r7, lr}
 8012414:	b082      	sub	sp, #8
 8012416:	af00      	add	r7, sp, #0
 8012418:	6078      	str	r0, [r7, #4]
 801241a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012422:	3b01      	subs	r3, #1
 8012424:	2b02      	cmp	r3, #2
 8012426:	d81e      	bhi.n	8012466 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8012428:	683b      	ldr	r3, [r7, #0]
 801242a:	88db      	ldrh	r3, [r3, #6]
 801242c:	2b02      	cmp	r3, #2
 801242e:	d004      	beq.n	801243a <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8012430:	6839      	ldr	r1, [r7, #0]
 8012432:	6878      	ldr	r0, [r7, #4]
 8012434:	f000 f88f 	bl	8012556 <USBD_CtlError>
      break;
 8012438:	e01a      	b.n	8012470 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	2201      	movs	r2, #1
 801243e:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012446:	2b00      	cmp	r3, #0
 8012448:	d005      	beq.n	8012456 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	68db      	ldr	r3, [r3, #12]
 801244e:	f043 0202 	orr.w	r2, r3, #2
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	330c      	adds	r3, #12
 801245a:	2202      	movs	r2, #2
 801245c:	4619      	mov	r1, r3
 801245e:	6878      	ldr	r0, [r7, #4]
 8012460:	f000 f8ea 	bl	8012638 <USBD_CtlSendData>
    break;
 8012464:	e004      	b.n	8012470 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8012466:	6839      	ldr	r1, [r7, #0]
 8012468:	6878      	ldr	r0, [r7, #4]
 801246a:	f000 f874 	bl	8012556 <USBD_CtlError>
    break;
 801246e:	bf00      	nop
  }
}
 8012470:	bf00      	nop
 8012472:	3708      	adds	r7, #8
 8012474:	46bd      	mov	sp, r7
 8012476:	bd80      	pop	{r7, pc}

08012478 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b082      	sub	sp, #8
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
 8012480:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012482:	683b      	ldr	r3, [r7, #0]
 8012484:	885b      	ldrh	r3, [r3, #2]
 8012486:	2b01      	cmp	r3, #1
 8012488:	d106      	bne.n	8012498 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	2201      	movs	r2, #1
 801248e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012492:	6878      	ldr	r0, [r7, #4]
 8012494:	f000 f92a 	bl	80126ec <USBD_CtlSendStatus>
  }
}
 8012498:	bf00      	nop
 801249a:	3708      	adds	r7, #8
 801249c:	46bd      	mov	sp, r7
 801249e:	bd80      	pop	{r7, pc}

080124a0 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b082      	sub	sp, #8
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
 80124a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80124b0:	3b01      	subs	r3, #1
 80124b2:	2b02      	cmp	r3, #2
 80124b4:	d80b      	bhi.n	80124ce <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80124b6:	683b      	ldr	r3, [r7, #0]
 80124b8:	885b      	ldrh	r3, [r3, #2]
 80124ba:	2b01      	cmp	r3, #1
 80124bc:	d10c      	bne.n	80124d8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	2200      	movs	r2, #0
 80124c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80124c6:	6878      	ldr	r0, [r7, #4]
 80124c8:	f000 f910 	bl	80126ec <USBD_CtlSendStatus>
      }
      break;
 80124cc:	e004      	b.n	80124d8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80124ce:	6839      	ldr	r1, [r7, #0]
 80124d0:	6878      	ldr	r0, [r7, #4]
 80124d2:	f000 f840 	bl	8012556 <USBD_CtlError>
      break;
 80124d6:	e000      	b.n	80124da <USBD_ClrFeature+0x3a>
      break;
 80124d8:	bf00      	nop
  }
}
 80124da:	bf00      	nop
 80124dc:	3708      	adds	r7, #8
 80124de:	46bd      	mov	sp, r7
 80124e0:	bd80      	pop	{r7, pc}

080124e2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80124e2:	b580      	push	{r7, lr}
 80124e4:	b084      	sub	sp, #16
 80124e6:	af00      	add	r7, sp, #0
 80124e8:	6078      	str	r0, [r7, #4]
 80124ea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80124ec:	683b      	ldr	r3, [r7, #0]
 80124ee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	781a      	ldrb	r2, [r3, #0]
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	3301      	adds	r3, #1
 80124fc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	781a      	ldrb	r2, [r3, #0]
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	3301      	adds	r3, #1
 801250a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801250c:	68f8      	ldr	r0, [r7, #12]
 801250e:	f7ff fac6 	bl	8011a9e <SWAPBYTE>
 8012512:	4603      	mov	r3, r0
 8012514:	461a      	mov	r2, r3
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	3301      	adds	r3, #1
 801251e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	3301      	adds	r3, #1
 8012524:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012526:	68f8      	ldr	r0, [r7, #12]
 8012528:	f7ff fab9 	bl	8011a9e <SWAPBYTE>
 801252c:	4603      	mov	r3, r0
 801252e:	461a      	mov	r2, r3
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	3301      	adds	r3, #1
 8012538:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	3301      	adds	r3, #1
 801253e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012540:	68f8      	ldr	r0, [r7, #12]
 8012542:	f7ff faac 	bl	8011a9e <SWAPBYTE>
 8012546:	4603      	mov	r3, r0
 8012548:	461a      	mov	r2, r3
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	80da      	strh	r2, [r3, #6]
}
 801254e:	bf00      	nop
 8012550:	3710      	adds	r7, #16
 8012552:	46bd      	mov	sp, r7
 8012554:	bd80      	pop	{r7, pc}

08012556 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012556:	b580      	push	{r7, lr}
 8012558:	b082      	sub	sp, #8
 801255a:	af00      	add	r7, sp, #0
 801255c:	6078      	str	r0, [r7, #4]
 801255e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012560:	2180      	movs	r1, #128	; 0x80
 8012562:	6878      	ldr	r0, [r7, #4]
 8012564:	f003 fbc0 	bl	8015ce8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012568:	2100      	movs	r1, #0
 801256a:	6878      	ldr	r0, [r7, #4]
 801256c:	f003 fbbc 	bl	8015ce8 <USBD_LL_StallEP>
}
 8012570:	bf00      	nop
 8012572:	3708      	adds	r7, #8
 8012574:	46bd      	mov	sp, r7
 8012576:	bd80      	pop	{r7, pc}

08012578 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b086      	sub	sp, #24
 801257c:	af00      	add	r7, sp, #0
 801257e:	60f8      	str	r0, [r7, #12]
 8012580:	60b9      	str	r1, [r7, #8]
 8012582:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012584:	2300      	movs	r3, #0
 8012586:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d036      	beq.n	80125fc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012592:	6938      	ldr	r0, [r7, #16]
 8012594:	f000 f836 	bl	8012604 <USBD_GetLen>
 8012598:	4603      	mov	r3, r0
 801259a:	3301      	adds	r3, #1
 801259c:	b29b      	uxth	r3, r3
 801259e:	005b      	lsls	r3, r3, #1
 80125a0:	b29a      	uxth	r2, r3
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80125a6:	7dfb      	ldrb	r3, [r7, #23]
 80125a8:	68ba      	ldr	r2, [r7, #8]
 80125aa:	4413      	add	r3, r2
 80125ac:	687a      	ldr	r2, [r7, #4]
 80125ae:	7812      	ldrb	r2, [r2, #0]
 80125b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80125b2:	7dfb      	ldrb	r3, [r7, #23]
 80125b4:	3301      	adds	r3, #1
 80125b6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80125b8:	7dfb      	ldrb	r3, [r7, #23]
 80125ba:	68ba      	ldr	r2, [r7, #8]
 80125bc:	4413      	add	r3, r2
 80125be:	2203      	movs	r2, #3
 80125c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80125c2:	7dfb      	ldrb	r3, [r7, #23]
 80125c4:	3301      	adds	r3, #1
 80125c6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80125c8:	e013      	b.n	80125f2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80125ca:	7dfb      	ldrb	r3, [r7, #23]
 80125cc:	68ba      	ldr	r2, [r7, #8]
 80125ce:	4413      	add	r3, r2
 80125d0:	693a      	ldr	r2, [r7, #16]
 80125d2:	7812      	ldrb	r2, [r2, #0]
 80125d4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80125d6:	693b      	ldr	r3, [r7, #16]
 80125d8:	3301      	adds	r3, #1
 80125da:	613b      	str	r3, [r7, #16]
    idx++;
 80125dc:	7dfb      	ldrb	r3, [r7, #23]
 80125de:	3301      	adds	r3, #1
 80125e0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80125e2:	7dfb      	ldrb	r3, [r7, #23]
 80125e4:	68ba      	ldr	r2, [r7, #8]
 80125e6:	4413      	add	r3, r2
 80125e8:	2200      	movs	r2, #0
 80125ea:	701a      	strb	r2, [r3, #0]
    idx++;
 80125ec:	7dfb      	ldrb	r3, [r7, #23]
 80125ee:	3301      	adds	r3, #1
 80125f0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80125f2:	693b      	ldr	r3, [r7, #16]
 80125f4:	781b      	ldrb	r3, [r3, #0]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d1e7      	bne.n	80125ca <USBD_GetString+0x52>
 80125fa:	e000      	b.n	80125fe <USBD_GetString+0x86>
    return;
 80125fc:	bf00      	nop
  }
}
 80125fe:	3718      	adds	r7, #24
 8012600:	46bd      	mov	sp, r7
 8012602:	bd80      	pop	{r7, pc}

08012604 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012604:	b480      	push	{r7}
 8012606:	b085      	sub	sp, #20
 8012608:	af00      	add	r7, sp, #0
 801260a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801260c:	2300      	movs	r3, #0
 801260e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012614:	e005      	b.n	8012622 <USBD_GetLen+0x1e>
  {
    len++;
 8012616:	7bfb      	ldrb	r3, [r7, #15]
 8012618:	3301      	adds	r3, #1
 801261a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801261c:	68bb      	ldr	r3, [r7, #8]
 801261e:	3301      	adds	r3, #1
 8012620:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012622:	68bb      	ldr	r3, [r7, #8]
 8012624:	781b      	ldrb	r3, [r3, #0]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d1f5      	bne.n	8012616 <USBD_GetLen+0x12>
  }

  return len;
 801262a:	7bfb      	ldrb	r3, [r7, #15]
}
 801262c:	4618      	mov	r0, r3
 801262e:	3714      	adds	r7, #20
 8012630:	46bd      	mov	sp, r7
 8012632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012636:	4770      	bx	lr

08012638 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012638:	b580      	push	{r7, lr}
 801263a:	b084      	sub	sp, #16
 801263c:	af00      	add	r7, sp, #0
 801263e:	60f8      	str	r0, [r7, #12]
 8012640:	60b9      	str	r1, [r7, #8]
 8012642:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	2202      	movs	r2, #2
 8012648:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	687a      	ldr	r2, [r7, #4]
 8012650:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	687a      	ldr	r2, [r7, #4]
 8012656:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	68ba      	ldr	r2, [r7, #8]
 801265c:	2100      	movs	r1, #0
 801265e:	68f8      	ldr	r0, [r7, #12]
 8012660:	f003 fbcb 	bl	8015dfa <USBD_LL_Transmit>

  return USBD_OK;
 8012664:	2300      	movs	r3, #0
}
 8012666:	4618      	mov	r0, r3
 8012668:	3710      	adds	r7, #16
 801266a:	46bd      	mov	sp, r7
 801266c:	bd80      	pop	{r7, pc}

0801266e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801266e:	b580      	push	{r7, lr}
 8012670:	b084      	sub	sp, #16
 8012672:	af00      	add	r7, sp, #0
 8012674:	60f8      	str	r0, [r7, #12]
 8012676:	60b9      	str	r1, [r7, #8]
 8012678:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	68ba      	ldr	r2, [r7, #8]
 801267e:	2100      	movs	r1, #0
 8012680:	68f8      	ldr	r0, [r7, #12]
 8012682:	f003 fbba 	bl	8015dfa <USBD_LL_Transmit>

  return USBD_OK;
 8012686:	2300      	movs	r3, #0
}
 8012688:	4618      	mov	r0, r3
 801268a:	3710      	adds	r7, #16
 801268c:	46bd      	mov	sp, r7
 801268e:	bd80      	pop	{r7, pc}

08012690 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b084      	sub	sp, #16
 8012694:	af00      	add	r7, sp, #0
 8012696:	60f8      	str	r0, [r7, #12]
 8012698:	60b9      	str	r1, [r7, #8]
 801269a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	2203      	movs	r2, #3
 80126a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	687a      	ldr	r2, [r7, #4]
 80126a8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	687a      	ldr	r2, [r7, #4]
 80126b0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	68ba      	ldr	r2, [r7, #8]
 80126b8:	2100      	movs	r1, #0
 80126ba:	68f8      	ldr	r0, [r7, #12]
 80126bc:	f003 fbbe 	bl	8015e3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80126c0:	2300      	movs	r3, #0
}
 80126c2:	4618      	mov	r0, r3
 80126c4:	3710      	adds	r7, #16
 80126c6:	46bd      	mov	sp, r7
 80126c8:	bd80      	pop	{r7, pc}

080126ca <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80126ca:	b580      	push	{r7, lr}
 80126cc:	b084      	sub	sp, #16
 80126ce:	af00      	add	r7, sp, #0
 80126d0:	60f8      	str	r0, [r7, #12]
 80126d2:	60b9      	str	r1, [r7, #8]
 80126d4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	68ba      	ldr	r2, [r7, #8]
 80126da:	2100      	movs	r1, #0
 80126dc:	68f8      	ldr	r0, [r7, #12]
 80126de:	f003 fbad 	bl	8015e3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80126e2:	2300      	movs	r3, #0
}
 80126e4:	4618      	mov	r0, r3
 80126e6:	3710      	adds	r7, #16
 80126e8:	46bd      	mov	sp, r7
 80126ea:	bd80      	pop	{r7, pc}

080126ec <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b082      	sub	sp, #8
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	2204      	movs	r2, #4
 80126f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80126fc:	2300      	movs	r3, #0
 80126fe:	2200      	movs	r2, #0
 8012700:	2100      	movs	r1, #0
 8012702:	6878      	ldr	r0, [r7, #4]
 8012704:	f003 fb79 	bl	8015dfa <USBD_LL_Transmit>

  return USBD_OK;
 8012708:	2300      	movs	r3, #0
}
 801270a:	4618      	mov	r0, r3
 801270c:	3708      	adds	r7, #8
 801270e:	46bd      	mov	sp, r7
 8012710:	bd80      	pop	{r7, pc}

08012712 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012712:	b580      	push	{r7, lr}
 8012714:	b082      	sub	sp, #8
 8012716:	af00      	add	r7, sp, #0
 8012718:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	2205      	movs	r2, #5
 801271e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012722:	2300      	movs	r3, #0
 8012724:	2200      	movs	r2, #0
 8012726:	2100      	movs	r1, #0
 8012728:	6878      	ldr	r0, [r7, #4]
 801272a:	f003 fb87 	bl	8015e3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801272e:	2300      	movs	r3, #0
}
 8012730:	4618      	mov	r0, r3
 8012732:	3708      	adds	r7, #8
 8012734:	46bd      	mov	sp, r7
 8012736:	bd80      	pop	{r7, pc}

08012738 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8012738:	b480      	push	{r7}
 801273a:	b085      	sub	sp, #20
 801273c:	af00      	add	r7, sp, #0
 801273e:	4603      	mov	r3, r0
 8012740:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8012742:	2300      	movs	r3, #0
 8012744:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8012746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801274a:	2b84      	cmp	r3, #132	; 0x84
 801274c:	d005      	beq.n	801275a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801274e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	4413      	add	r3, r2
 8012756:	3303      	adds	r3, #3
 8012758:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801275a:	68fb      	ldr	r3, [r7, #12]
}
 801275c:	4618      	mov	r0, r3
 801275e:	3714      	adds	r7, #20
 8012760:	46bd      	mov	sp, r7
 8012762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012766:	4770      	bx	lr

08012768 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8012768:	b480      	push	{r7}
 801276a:	b083      	sub	sp, #12
 801276c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801276e:	f3ef 8305 	mrs	r3, IPSR
 8012772:	607b      	str	r3, [r7, #4]
  return(result);
 8012774:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8012776:	2b00      	cmp	r3, #0
 8012778:	bf14      	ite	ne
 801277a:	2301      	movne	r3, #1
 801277c:	2300      	moveq	r3, #0
 801277e:	b2db      	uxtb	r3, r3
}
 8012780:	4618      	mov	r0, r3
 8012782:	370c      	adds	r7, #12
 8012784:	46bd      	mov	sp, r7
 8012786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278a:	4770      	bx	lr

0801278c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801278c:	b580      	push	{r7, lr}
 801278e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012790:	f001 fb4c 	bl	8013e2c <vTaskStartScheduler>
  
  return osOK;
 8012794:	2300      	movs	r3, #0
}
 8012796:	4618      	mov	r0, r3
 8012798:	bd80      	pop	{r7, pc}

0801279a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801279a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801279c:	b089      	sub	sp, #36	; 0x24
 801279e:	af04      	add	r7, sp, #16
 80127a0:	6078      	str	r0, [r7, #4]
 80127a2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	695b      	ldr	r3, [r3, #20]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d020      	beq.n	80127ee <osThreadCreate+0x54>
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	699b      	ldr	r3, [r3, #24]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d01c      	beq.n	80127ee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	685c      	ldr	r4, [r3, #4]
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	681d      	ldr	r5, [r3, #0]
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	691e      	ldr	r6, [r3, #16]
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80127c6:	4618      	mov	r0, r3
 80127c8:	f7ff ffb6 	bl	8012738 <makeFreeRtosPriority>
 80127cc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	695b      	ldr	r3, [r3, #20]
 80127d2:	687a      	ldr	r2, [r7, #4]
 80127d4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80127d6:	9202      	str	r2, [sp, #8]
 80127d8:	9301      	str	r3, [sp, #4]
 80127da:	9100      	str	r1, [sp, #0]
 80127dc:	683b      	ldr	r3, [r7, #0]
 80127de:	4632      	mov	r2, r6
 80127e0:	4629      	mov	r1, r5
 80127e2:	4620      	mov	r0, r4
 80127e4:	f001 f95a 	bl	8013a9c <xTaskCreateStatic>
 80127e8:	4603      	mov	r3, r0
 80127ea:	60fb      	str	r3, [r7, #12]
 80127ec:	e01c      	b.n	8012828 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	685c      	ldr	r4, [r3, #4]
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80127fa:	b29e      	uxth	r6, r3
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012802:	4618      	mov	r0, r3
 8012804:	f7ff ff98 	bl	8012738 <makeFreeRtosPriority>
 8012808:	4602      	mov	r2, r0
 801280a:	f107 030c 	add.w	r3, r7, #12
 801280e:	9301      	str	r3, [sp, #4]
 8012810:	9200      	str	r2, [sp, #0]
 8012812:	683b      	ldr	r3, [r7, #0]
 8012814:	4632      	mov	r2, r6
 8012816:	4629      	mov	r1, r5
 8012818:	4620      	mov	r0, r4
 801281a:	f001 f99c 	bl	8013b56 <xTaskCreate>
 801281e:	4603      	mov	r3, r0
 8012820:	2b01      	cmp	r3, #1
 8012822:	d001      	beq.n	8012828 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8012824:	2300      	movs	r3, #0
 8012826:	e000      	b.n	801282a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8012828:	68fb      	ldr	r3, [r7, #12]
}
 801282a:	4618      	mov	r0, r3
 801282c:	3714      	adds	r7, #20
 801282e:	46bd      	mov	sp, r7
 8012830:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012832 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012832:	b580      	push	{r7, lr}
 8012834:	b084      	sub	sp, #16
 8012836:	af00      	add	r7, sp, #0
 8012838:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d001      	beq.n	8012848 <osDelay+0x16>
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	e000      	b.n	801284a <osDelay+0x18>
 8012848:	2301      	movs	r3, #1
 801284a:	4618      	mov	r0, r3
 801284c:	f001 faba 	bl	8013dc4 <vTaskDelay>
  
  return osOK;
 8012850:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012852:	4618      	mov	r0, r3
 8012854:	3710      	adds	r7, #16
 8012856:	46bd      	mov	sp, r7
 8012858:	bd80      	pop	{r7, pc}
	...

0801285c <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b086      	sub	sp, #24
 8012860:	af02      	add	r7, sp, #8
 8012862:	6078      	str	r0, [r7, #4]
 8012864:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8012866:	2300      	movs	r3, #0
 8012868:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 801286a:	2300      	movs	r3, #0
 801286c:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 801286e:	f7ff ff7b 	bl	8012768 <inHandlerMode>
 8012872:	4603      	mov	r3, r0
 8012874:	2b00      	cmp	r3, #0
 8012876:	d01c      	beq.n	80128b2 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8012878:	6839      	ldr	r1, [r7, #0]
 801287a:	f107 0208 	add.w	r2, r7, #8
 801287e:	f107 030c 	add.w	r3, r7, #12
 8012882:	9300      	str	r3, [sp, #0]
 8012884:	4613      	mov	r3, r2
 8012886:	2201      	movs	r2, #1
 8012888:	6878      	ldr	r0, [r7, #4]
 801288a:	f002 f881 	bl	8014990 <xTaskGenericNotifyFromISR>
 801288e:	4603      	mov	r3, r0
 8012890:	2b01      	cmp	r3, #1
 8012892:	d002      	beq.n	801289a <osSignalSet+0x3e>
      return 0x80000000;
 8012894:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012898:	e019      	b.n	80128ce <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d015      	beq.n	80128cc <osSignalSet+0x70>
 80128a0:	4b0d      	ldr	r3, [pc, #52]	; (80128d8 <osSignalSet+0x7c>)
 80128a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128a6:	601a      	str	r2, [r3, #0]
 80128a8:	f3bf 8f4f 	dsb	sy
 80128ac:	f3bf 8f6f 	isb	sy
 80128b0:	e00c      	b.n	80128cc <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80128b2:	6839      	ldr	r1, [r7, #0]
 80128b4:	f107 0308 	add.w	r3, r7, #8
 80128b8:	2201      	movs	r2, #1
 80128ba:	6878      	ldr	r0, [r7, #4]
 80128bc:	f001 ffb2 	bl	8014824 <xTaskGenericNotify>
 80128c0:	4603      	mov	r3, r0
 80128c2:	2b01      	cmp	r3, #1
 80128c4:	d002      	beq.n	80128cc <osSignalSet+0x70>
    return 0x80000000;
 80128c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80128ca:	e000      	b.n	80128ce <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 80128cc:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80128ce:	4618      	mov	r0, r3
 80128d0:	3710      	adds	r7, #16
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bd80      	pop	{r7, pc}
 80128d6:	bf00      	nop
 80128d8:	e000ed04 	.word	0xe000ed04

080128dc <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80128dc:	b590      	push	{r4, r7, lr}
 80128de:	b089      	sub	sp, #36	; 0x24
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	60f8      	str	r0, [r7, #12]
 80128e4:	60b9      	str	r1, [r7, #8]
 80128e6:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80128e8:	2300      	movs	r3, #0
 80128ea:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80128ec:	2300      	movs	r3, #0
 80128ee:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128f6:	d103      	bne.n	8012900 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80128f8:	f04f 33ff 	mov.w	r3, #4294967295
 80128fc:	61fb      	str	r3, [r7, #28]
 80128fe:	e009      	b.n	8012914 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d006      	beq.n	8012914 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 801290a:	69fb      	ldr	r3, [r7, #28]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d101      	bne.n	8012914 <osSignalWait+0x38>
      ticks = 1;
 8012910:	2301      	movs	r3, #1
 8012912:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8012914:	f7ff ff28 	bl	8012768 <inHandlerMode>
 8012918:	4603      	mov	r3, r0
 801291a:	2b00      	cmp	r3, #0
 801291c:	d002      	beq.n	8012924 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 801291e:	2382      	movs	r3, #130	; 0x82
 8012920:	613b      	str	r3, [r7, #16]
 8012922:	e01b      	b.n	801295c <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8012924:	68b9      	ldr	r1, [r7, #8]
 8012926:	f107 0310 	add.w	r3, r7, #16
 801292a:	1d1a      	adds	r2, r3, #4
 801292c:	69fb      	ldr	r3, [r7, #28]
 801292e:	2000      	movs	r0, #0
 8012930:	f001 ff1e 	bl	8014770 <xTaskNotifyWait>
 8012934:	4603      	mov	r3, r0
 8012936:	2b01      	cmp	r3, #1
 8012938:	d008      	beq.n	801294c <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 801293a:	69fb      	ldr	r3, [r7, #28]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d102      	bne.n	8012946 <osSignalWait+0x6a>
 8012940:	2300      	movs	r3, #0
 8012942:	613b      	str	r3, [r7, #16]
 8012944:	e00a      	b.n	801295c <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8012946:	2340      	movs	r3, #64	; 0x40
 8012948:	613b      	str	r3, [r7, #16]
 801294a:	e007      	b.n	801295c <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 801294c:	697b      	ldr	r3, [r7, #20]
 801294e:	2b00      	cmp	r3, #0
 8012950:	da02      	bge.n	8012958 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8012952:	2386      	movs	r3, #134	; 0x86
 8012954:	613b      	str	r3, [r7, #16]
 8012956:	e001      	b.n	801295c <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8012958:	2308      	movs	r3, #8
 801295a:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	461c      	mov	r4, r3
 8012960:	f107 0310 	add.w	r3, r7, #16
 8012964:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012968:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801296c:	68f8      	ldr	r0, [r7, #12]
 801296e:	3724      	adds	r7, #36	; 0x24
 8012970:	46bd      	mov	sp, r7
 8012972:	bd90      	pop	{r4, r7, pc}

08012974 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8012974:	b580      	push	{r7, lr}
 8012976:	b082      	sub	sp, #8
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	685b      	ldr	r3, [r3, #4]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d007      	beq.n	8012994 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	685b      	ldr	r3, [r3, #4]
 8012988:	4619      	mov	r1, r3
 801298a:	2001      	movs	r0, #1
 801298c:	f000 fc65 	bl	801325a <xQueueCreateMutexStatic>
 8012990:	4603      	mov	r3, r0
 8012992:	e003      	b.n	801299c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8012994:	2001      	movs	r0, #1
 8012996:	f000 fc48 	bl	801322a <xQueueCreateMutex>
 801299a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 801299c:	4618      	mov	r0, r3
 801299e:	3708      	adds	r7, #8
 80129a0:	46bd      	mov	sp, r7
 80129a2:	bd80      	pop	{r7, pc}

080129a4 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b086      	sub	sp, #24
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	685b      	ldr	r3, [r3, #4]
 80129b0:	3303      	adds	r3, #3
 80129b2:	f023 0303 	bic.w	r3, r3, #3
 80129b6:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80129b8:	2014      	movs	r0, #20
 80129ba:	f002 fb75 	bl	80150a8 <pvPortMalloc>
 80129be:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 80129c0:	697b      	ldr	r3, [r7, #20]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d046      	beq.n	8012a54 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	681a      	ldr	r2, [r3, #0]
 80129ca:	697b      	ldr	r3, [r7, #20]
 80129cc:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 80129ce:	68fa      	ldr	r2, [r7, #12]
 80129d0:	697b      	ldr	r3, [r7, #20]
 80129d2:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 80129d4:	697b      	ldr	r3, [r7, #20]
 80129d6:	2200      	movs	r2, #0
 80129d8:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	4618      	mov	r0, r3
 80129e0:	f002 fb62 	bl	80150a8 <pvPortMalloc>
 80129e4:	4602      	mov	r2, r0
 80129e6:	697b      	ldr	r3, [r7, #20]
 80129e8:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80129ea:	697b      	ldr	r3, [r7, #20]
 80129ec:	685b      	ldr	r3, [r3, #4]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d02b      	beq.n	8012a4a <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	68fa      	ldr	r2, [r7, #12]
 80129f8:	fb02 f303 	mul.w	r3, r2, r3
 80129fc:	4618      	mov	r0, r3
 80129fe:	f002 fb53 	bl	80150a8 <pvPortMalloc>
 8012a02:	4602      	mov	r2, r0
 8012a04:	697b      	ldr	r3, [r7, #20]
 8012a06:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8012a08:	697b      	ldr	r3, [r7, #20]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d011      	beq.n	8012a34 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8012a10:	2300      	movs	r3, #0
 8012a12:	613b      	str	r3, [r7, #16]
 8012a14:	e008      	b.n	8012a28 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8012a16:	697b      	ldr	r3, [r7, #20]
 8012a18:	685a      	ldr	r2, [r3, #4]
 8012a1a:	693b      	ldr	r3, [r7, #16]
 8012a1c:	4413      	add	r3, r2
 8012a1e:	2200      	movs	r2, #0
 8012a20:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8012a22:	693b      	ldr	r3, [r7, #16]
 8012a24:	3301      	adds	r3, #1
 8012a26:	613b      	str	r3, [r7, #16]
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	693a      	ldr	r2, [r7, #16]
 8012a2e:	429a      	cmp	r2, r3
 8012a30:	d3f1      	bcc.n	8012a16 <osPoolCreate+0x72>
 8012a32:	e00f      	b.n	8012a54 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8012a34:	697b      	ldr	r3, [r7, #20]
 8012a36:	685b      	ldr	r3, [r3, #4]
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f002 fbf9 	bl	8015230 <vPortFree>
        vPortFree(thePool);
 8012a3e:	6978      	ldr	r0, [r7, #20]
 8012a40:	f002 fbf6 	bl	8015230 <vPortFree>
        thePool = NULL;
 8012a44:	2300      	movs	r3, #0
 8012a46:	617b      	str	r3, [r7, #20]
 8012a48:	e004      	b.n	8012a54 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8012a4a:	6978      	ldr	r0, [r7, #20]
 8012a4c:	f002 fbf0 	bl	8015230 <vPortFree>
      thePool = NULL;
 8012a50:	2300      	movs	r3, #0
 8012a52:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8012a54:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8012a56:	4618      	mov	r0, r3
 8012a58:	3718      	adds	r7, #24
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bd80      	pop	{r7, pc}

08012a5e <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8012a5e:	b580      	push	{r7, lr}
 8012a60:	b08a      	sub	sp, #40	; 0x28
 8012a62:	af00      	add	r7, sp, #0
 8012a64:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8012a66:	2300      	movs	r3, #0
 8012a68:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8012a6e:	f7ff fe7b 	bl	8012768 <inHandlerMode>
 8012a72:	4603      	mov	r3, r0
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d00e      	beq.n	8012a96 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012a78:	f3ef 8211 	mrs	r2, BASEPRI
 8012a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a80:	f383 8811 	msr	BASEPRI, r3
 8012a84:	f3bf 8f6f 	isb	sy
 8012a88:	f3bf 8f4f 	dsb	sy
 8012a8c:	617a      	str	r2, [r7, #20]
 8012a8e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012a90:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8012a92:	627b      	str	r3, [r7, #36]	; 0x24
 8012a94:	e001      	b.n	8012a9a <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8012a96:	f002 f9e5 	bl	8014e64 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	61fb      	str	r3, [r7, #28]
 8012a9e:	e029      	b.n	8012af4 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	691a      	ldr	r2, [r3, #16]
 8012aa4:	69fb      	ldr	r3, [r7, #28]
 8012aa6:	4413      	add	r3, r2
 8012aa8:	687a      	ldr	r2, [r7, #4]
 8012aaa:	6892      	ldr	r2, [r2, #8]
 8012aac:	fbb3 f1f2 	udiv	r1, r3, r2
 8012ab0:	fb02 f201 	mul.w	r2, r2, r1
 8012ab4:	1a9b      	subs	r3, r3, r2
 8012ab6:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	685a      	ldr	r2, [r3, #4]
 8012abc:	69bb      	ldr	r3, [r7, #24]
 8012abe:	4413      	add	r3, r2
 8012ac0:	781b      	ldrb	r3, [r3, #0]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d113      	bne.n	8012aee <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	685a      	ldr	r2, [r3, #4]
 8012aca:	69bb      	ldr	r3, [r7, #24]
 8012acc:	4413      	add	r3, r2
 8012ace:	2201      	movs	r2, #1
 8012ad0:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	4619      	mov	r1, r3
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	68db      	ldr	r3, [r3, #12]
 8012adc:	69ba      	ldr	r2, [r7, #24]
 8012ade:	fb02 f303 	mul.w	r3, r2, r3
 8012ae2:	440b      	add	r3, r1
 8012ae4:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	69ba      	ldr	r2, [r7, #24]
 8012aea:	611a      	str	r2, [r3, #16]
      break;
 8012aec:	e007      	b.n	8012afe <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8012aee:	69fb      	ldr	r3, [r7, #28]
 8012af0:	3301      	adds	r3, #1
 8012af2:	61fb      	str	r3, [r7, #28]
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	689b      	ldr	r3, [r3, #8]
 8012af8:	69fa      	ldr	r2, [r7, #28]
 8012afa:	429a      	cmp	r2, r3
 8012afc:	d3d0      	bcc.n	8012aa0 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8012afe:	f7ff fe33 	bl	8012768 <inHandlerMode>
 8012b02:	4603      	mov	r3, r0
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d005      	beq.n	8012b14 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8012b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b0a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012b12:	e001      	b.n	8012b18 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8012b14:	f002 f9d6 	bl	8014ec4 <vPortExitCritical>
  }
  
  return p;
 8012b18:	6a3b      	ldr	r3, [r7, #32]
}
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	3728      	adds	r7, #40	; 0x28
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	bd80      	pop	{r7, pc}

08012b22 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8012b22:	b480      	push	{r7}
 8012b24:	b085      	sub	sp, #20
 8012b26:	af00      	add	r7, sp, #0
 8012b28:	6078      	str	r0, [r7, #4]
 8012b2a:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d101      	bne.n	8012b36 <osPoolFree+0x14>
    return osErrorParameter;
 8012b32:	2380      	movs	r3, #128	; 0x80
 8012b34:	e030      	b.n	8012b98 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8012b36:	683b      	ldr	r3, [r7, #0]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d101      	bne.n	8012b40 <osPoolFree+0x1e>
    return osErrorParameter;
 8012b3c:	2380      	movs	r3, #128	; 0x80
 8012b3e:	e02b      	b.n	8012b98 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	683a      	ldr	r2, [r7, #0]
 8012b46:	429a      	cmp	r2, r3
 8012b48:	d201      	bcs.n	8012b4e <osPoolFree+0x2c>
    return osErrorParameter;
 8012b4a:	2380      	movs	r3, #128	; 0x80
 8012b4c:	e024      	b.n	8012b98 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8012b4e:	683b      	ldr	r3, [r7, #0]
 8012b50:	687a      	ldr	r2, [r7, #4]
 8012b52:	6812      	ldr	r2, [r2, #0]
 8012b54:	1a9b      	subs	r3, r3, r2
 8012b56:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	68da      	ldr	r2, [r3, #12]
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012b62:	fb02 f201 	mul.w	r2, r2, r1
 8012b66:	1a9b      	subs	r3, r3, r2
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d001      	beq.n	8012b70 <osPoolFree+0x4e>
    return osErrorParameter;
 8012b6c:	2380      	movs	r3, #128	; 0x80
 8012b6e:	e013      	b.n	8012b98 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	68db      	ldr	r3, [r3, #12]
 8012b74:	68fa      	ldr	r2, [r7, #12]
 8012b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8012b7a:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	689b      	ldr	r3, [r3, #8]
 8012b80:	68fa      	ldr	r2, [r7, #12]
 8012b82:	429a      	cmp	r2, r3
 8012b84:	d301      	bcc.n	8012b8a <osPoolFree+0x68>
    return osErrorParameter;
 8012b86:	2380      	movs	r3, #128	; 0x80
 8012b88:	e006      	b.n	8012b98 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	685a      	ldr	r2, [r3, #4]
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	4413      	add	r3, r2
 8012b92:	2200      	movs	r2, #0
 8012b94:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8012b96:	2300      	movs	r3, #0
}
 8012b98:	4618      	mov	r0, r3
 8012b9a:	3714      	adds	r7, #20
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba2:	4770      	bx	lr

08012ba4 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8012ba4:	b590      	push	{r4, r7, lr}
 8012ba6:	b087      	sub	sp, #28
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
 8012bac:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	60fb      	str	r3, [r7, #12]
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	685b      	ldr	r3, [r3, #4]
 8012bb8:	613b      	str	r3, [r7, #16]
 8012bba:	2300      	movs	r3, #0
 8012bbc:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	689c      	ldr	r4, [r3, #8]
 8012bc2:	200c      	movs	r0, #12
 8012bc4:	f002 fa70 	bl	80150a8 <pvPortMalloc>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	689b      	ldr	r3, [r3, #8]
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d101      	bne.n	8012bda <osMailCreate+0x36>
    return NULL;
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	e038      	b.n	8012c4c <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	689b      	ldr	r3, [r3, #8]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	687a      	ldr	r2, [r7, #4]
 8012be2:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	6818      	ldr	r0, [r3, #0]
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	689b      	ldr	r3, [r3, #8]
 8012bec:	681c      	ldr	r4, [r3, #0]
 8012bee:	2200      	movs	r2, #0
 8012bf0:	2104      	movs	r1, #4
 8012bf2:	f000 faa1 	bl	8013138 <xQueueGenericCreate>
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	689b      	ldr	r3, [r3, #8]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	685b      	ldr	r3, [r3, #4]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d107      	bne.n	8012c16 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	689b      	ldr	r3, [r3, #8]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	f002 fb0f 	bl	8015230 <vPortFree>
    return NULL;
 8012c12:	2300      	movs	r3, #0
 8012c14:	e01a      	b.n	8012c4c <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	689b      	ldr	r3, [r3, #8]
 8012c1a:	681c      	ldr	r4, [r3, #0]
 8012c1c:	f107 030c 	add.w	r3, r7, #12
 8012c20:	4618      	mov	r0, r3
 8012c22:	f7ff febf 	bl	80129a4 <osPoolCreate>
 8012c26:	4603      	mov	r3, r0
 8012c28:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	689b      	ldr	r3, [r3, #8]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	689b      	ldr	r3, [r3, #8]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d107      	bne.n	8012c46 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	689b      	ldr	r3, [r3, #8]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	f002 faf7 	bl	8015230 <vPortFree>
    return NULL;
 8012c42:	2300      	movs	r3, #0
 8012c44:	e002      	b.n	8012c4c <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	689b      	ldr	r3, [r3, #8]
 8012c4a:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	371c      	adds	r7, #28
 8012c50:	46bd      	mov	sp, r7
 8012c52:	bd90      	pop	{r4, r7, pc}

08012c54 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b084      	sub	sp, #16
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
 8012c5c:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d101      	bne.n	8012c68 <osMailAlloc+0x14>
    return NULL;
 8012c64:	2300      	movs	r3, #0
 8012c66:	e006      	b.n	8012c76 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	689b      	ldr	r3, [r3, #8]
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f7ff fef6 	bl	8012a5e <osPoolAlloc>
 8012c72:	60f8      	str	r0, [r7, #12]
  
  return p;
 8012c74:	68fb      	ldr	r3, [r7, #12]
}
 8012c76:	4618      	mov	r0, r3
 8012c78:	3710      	adds	r7, #16
 8012c7a:	46bd      	mov	sp, r7
 8012c7c:	bd80      	pop	{r7, pc}
	...

08012c80 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b084      	sub	sp, #16
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
 8012c88:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d101      	bne.n	8012c94 <osMailPut+0x14>
    return osErrorParameter;
 8012c90:	2380      	movs	r3, #128	; 0x80
 8012c92:	e02c      	b.n	8012cee <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8012c94:	2300      	movs	r3, #0
 8012c96:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8012c98:	f7ff fd66 	bl	8012768 <inHandlerMode>
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d018      	beq.n	8012cd4 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	6858      	ldr	r0, [r3, #4]
 8012ca6:	f107 020c 	add.w	r2, r7, #12
 8012caa:	4639      	mov	r1, r7
 8012cac:	2300      	movs	r3, #0
 8012cae:	f000 fbed 	bl	801348c <xQueueGenericSendFromISR>
 8012cb2:	4603      	mov	r3, r0
 8012cb4:	2b01      	cmp	r3, #1
 8012cb6:	d001      	beq.n	8012cbc <osMailPut+0x3c>
      return osErrorOS;
 8012cb8:	23ff      	movs	r3, #255	; 0xff
 8012cba:	e018      	b.n	8012cee <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d014      	beq.n	8012cec <osMailPut+0x6c>
 8012cc2:	4b0d      	ldr	r3, [pc, #52]	; (8012cf8 <osMailPut+0x78>)
 8012cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012cc8:	601a      	str	r2, [r3, #0]
 8012cca:	f3bf 8f4f 	dsb	sy
 8012cce:	f3bf 8f6f 	isb	sy
 8012cd2:	e00b      	b.n	8012cec <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	6858      	ldr	r0, [r3, #4]
 8012cd8:	4639      	mov	r1, r7
 8012cda:	2300      	movs	r3, #0
 8012cdc:	2200      	movs	r2, #0
 8012cde:	f000 fad7 	bl	8013290 <xQueueGenericSend>
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	2b01      	cmp	r3, #1
 8012ce6:	d001      	beq.n	8012cec <osMailPut+0x6c>
      return osErrorOS;
 8012ce8:	23ff      	movs	r3, #255	; 0xff
 8012cea:	e000      	b.n	8012cee <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8012cec:	2300      	movs	r3, #0
}
 8012cee:	4618      	mov	r0, r3
 8012cf0:	3710      	adds	r7, #16
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bd80      	pop	{r7, pc}
 8012cf6:	bf00      	nop
 8012cf8:	e000ed04 	.word	0xe000ed04

08012cfc <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8012cfc:	b590      	push	{r4, r7, lr}
 8012cfe:	b08b      	sub	sp, #44	; 0x2c
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	60f8      	str	r0, [r7, #12]
 8012d04:	60b9      	str	r1, [r7, #8]
 8012d06:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8012d08:	68bb      	ldr	r3, [r7, #8]
 8012d0a:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8012d0c:	68bb      	ldr	r3, [r7, #8]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d10a      	bne.n	8012d28 <osMailGet+0x2c>
    event.status = osErrorParameter;
 8012d12:	2380      	movs	r3, #128	; 0x80
 8012d14:	617b      	str	r3, [r7, #20]
    return event;
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	461c      	mov	r4, r3
 8012d1a:	f107 0314 	add.w	r3, r7, #20
 8012d1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012d22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012d26:	e056      	b.n	8012dd6 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8012d28:	2300      	movs	r3, #0
 8012d2a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d36:	d103      	bne.n	8012d40 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8012d38:	f04f 33ff 	mov.w	r3, #4294967295
 8012d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8012d3e:	e009      	b.n	8012d54 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d006      	beq.n	8012d54 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8012d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d101      	bne.n	8012d54 <osMailGet+0x58>
      ticks = 1;
 8012d50:	2301      	movs	r3, #1
 8012d52:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012d54:	f7ff fd08 	bl	8012768 <inHandlerMode>
 8012d58:	4603      	mov	r3, r0
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d01d      	beq.n	8012d9a <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8012d5e:	68bb      	ldr	r3, [r7, #8]
 8012d60:	6858      	ldr	r0, [r3, #4]
 8012d62:	f107 0220 	add.w	r2, r7, #32
 8012d66:	f107 0314 	add.w	r3, r7, #20
 8012d6a:	3304      	adds	r3, #4
 8012d6c:	4619      	mov	r1, r3
 8012d6e:	f000 fd05 	bl	801377c <xQueueReceiveFromISR>
 8012d72:	4603      	mov	r3, r0
 8012d74:	2b01      	cmp	r3, #1
 8012d76:	d102      	bne.n	8012d7e <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8012d78:	2320      	movs	r3, #32
 8012d7a:	617b      	str	r3, [r7, #20]
 8012d7c:	e001      	b.n	8012d82 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8012d7e:	2300      	movs	r3, #0
 8012d80:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012d82:	6a3b      	ldr	r3, [r7, #32]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d01e      	beq.n	8012dc6 <osMailGet+0xca>
 8012d88:	4b15      	ldr	r3, [pc, #84]	; (8012de0 <osMailGet+0xe4>)
 8012d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d8e:	601a      	str	r2, [r3, #0]
 8012d90:	f3bf 8f4f 	dsb	sy
 8012d94:	f3bf 8f6f 	isb	sy
 8012d98:	e015      	b.n	8012dc6 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8012d9a:	68bb      	ldr	r3, [r7, #8]
 8012d9c:	6858      	ldr	r0, [r3, #4]
 8012d9e:	f107 0314 	add.w	r3, r7, #20
 8012da2:	3304      	adds	r3, #4
 8012da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012da6:	4619      	mov	r1, r3
 8012da8:	f000 fc08 	bl	80135bc <xQueueReceive>
 8012dac:	4603      	mov	r3, r0
 8012dae:	2b01      	cmp	r3, #1
 8012db0:	d102      	bne.n	8012db8 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8012db2:	2320      	movs	r3, #32
 8012db4:	617b      	str	r3, [r7, #20]
 8012db6:	e006      	b.n	8012dc6 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d101      	bne.n	8012dc2 <osMailGet+0xc6>
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	e000      	b.n	8012dc4 <osMailGet+0xc8>
 8012dc2:	2340      	movs	r3, #64	; 0x40
 8012dc4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	461c      	mov	r4, r3
 8012dca:	f107 0314 	add.w	r3, r7, #20
 8012dce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012dd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012dd6:	68f8      	ldr	r0, [r7, #12]
 8012dd8:	372c      	adds	r7, #44	; 0x2c
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	bd90      	pop	{r4, r7, pc}
 8012dde:	bf00      	nop
 8012de0:	e000ed04 	.word	0xe000ed04

08012de4 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b082      	sub	sp, #8
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
 8012dec:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d101      	bne.n	8012df8 <osMailFree+0x14>
    return osErrorParameter;
 8012df4:	2380      	movs	r3, #128	; 0x80
 8012df6:	e006      	b.n	8012e06 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	689b      	ldr	r3, [r3, #8]
 8012dfc:	6839      	ldr	r1, [r7, #0]
 8012dfe:	4618      	mov	r0, r3
 8012e00:	f7ff fe8f 	bl	8012b22 <osPoolFree>
 8012e04:	4603      	mov	r3, r0
}
 8012e06:	4618      	mov	r0, r3
 8012e08:	3708      	adds	r7, #8
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	bd80      	pop	{r7, pc}

08012e0e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012e0e:	b480      	push	{r7}
 8012e10:	b083      	sub	sp, #12
 8012e12:	af00      	add	r7, sp, #0
 8012e14:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	f103 0208 	add.w	r2, r3, #8
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	f04f 32ff 	mov.w	r2, #4294967295
 8012e26:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	f103 0208 	add.w	r2, r3, #8
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	f103 0208 	add.w	r2, r3, #8
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	2200      	movs	r2, #0
 8012e40:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012e42:	bf00      	nop
 8012e44:	370c      	adds	r7, #12
 8012e46:	46bd      	mov	sp, r7
 8012e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4c:	4770      	bx	lr

08012e4e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012e4e:	b480      	push	{r7}
 8012e50:	b083      	sub	sp, #12
 8012e52:	af00      	add	r7, sp, #0
 8012e54:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	2200      	movs	r2, #0
 8012e5a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012e5c:	bf00      	nop
 8012e5e:	370c      	adds	r7, #12
 8012e60:	46bd      	mov	sp, r7
 8012e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e66:	4770      	bx	lr

08012e68 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012e68:	b480      	push	{r7}
 8012e6a:	b085      	sub	sp, #20
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
 8012e70:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	685b      	ldr	r3, [r3, #4]
 8012e76:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012e78:	683b      	ldr	r3, [r7, #0]
 8012e7a:	68fa      	ldr	r2, [r7, #12]
 8012e7c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	689a      	ldr	r2, [r3, #8]
 8012e82:	683b      	ldr	r3, [r7, #0]
 8012e84:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	689b      	ldr	r3, [r3, #8]
 8012e8a:	683a      	ldr	r2, [r7, #0]
 8012e8c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	683a      	ldr	r2, [r7, #0]
 8012e92:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	687a      	ldr	r2, [r7, #4]
 8012e98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	1c5a      	adds	r2, r3, #1
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	601a      	str	r2, [r3, #0]
}
 8012ea4:	bf00      	nop
 8012ea6:	3714      	adds	r7, #20
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eae:	4770      	bx	lr

08012eb0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012eb0:	b480      	push	{r7}
 8012eb2:	b085      	sub	sp, #20
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
 8012eb8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012eba:	683b      	ldr	r3, [r7, #0]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012ec0:	68bb      	ldr	r3, [r7, #8]
 8012ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ec6:	d103      	bne.n	8012ed0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	691b      	ldr	r3, [r3, #16]
 8012ecc:	60fb      	str	r3, [r7, #12]
 8012ece:	e00c      	b.n	8012eea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	3308      	adds	r3, #8
 8012ed4:	60fb      	str	r3, [r7, #12]
 8012ed6:	e002      	b.n	8012ede <vListInsert+0x2e>
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	685b      	ldr	r3, [r3, #4]
 8012edc:	60fb      	str	r3, [r7, #12]
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	685b      	ldr	r3, [r3, #4]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	68ba      	ldr	r2, [r7, #8]
 8012ee6:	429a      	cmp	r2, r3
 8012ee8:	d2f6      	bcs.n	8012ed8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	685a      	ldr	r2, [r3, #4]
 8012eee:	683b      	ldr	r3, [r7, #0]
 8012ef0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012ef2:	683b      	ldr	r3, [r7, #0]
 8012ef4:	685b      	ldr	r3, [r3, #4]
 8012ef6:	683a      	ldr	r2, [r7, #0]
 8012ef8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012efa:	683b      	ldr	r3, [r7, #0]
 8012efc:	68fa      	ldr	r2, [r7, #12]
 8012efe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	683a      	ldr	r2, [r7, #0]
 8012f04:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012f06:	683b      	ldr	r3, [r7, #0]
 8012f08:	687a      	ldr	r2, [r7, #4]
 8012f0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	1c5a      	adds	r2, r3, #1
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	601a      	str	r2, [r3, #0]
}
 8012f16:	bf00      	nop
 8012f18:	3714      	adds	r7, #20
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f20:	4770      	bx	lr

08012f22 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012f22:	b480      	push	{r7}
 8012f24:	b085      	sub	sp, #20
 8012f26:	af00      	add	r7, sp, #0
 8012f28:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	691b      	ldr	r3, [r3, #16]
 8012f2e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	685b      	ldr	r3, [r3, #4]
 8012f34:	687a      	ldr	r2, [r7, #4]
 8012f36:	6892      	ldr	r2, [r2, #8]
 8012f38:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	689b      	ldr	r3, [r3, #8]
 8012f3e:	687a      	ldr	r2, [r7, #4]
 8012f40:	6852      	ldr	r2, [r2, #4]
 8012f42:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	685b      	ldr	r3, [r3, #4]
 8012f48:	687a      	ldr	r2, [r7, #4]
 8012f4a:	429a      	cmp	r2, r3
 8012f4c:	d103      	bne.n	8012f56 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	689a      	ldr	r2, [r3, #8]
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	2200      	movs	r2, #0
 8012f5a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	1e5a      	subs	r2, r3, #1
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	681b      	ldr	r3, [r3, #0]
}
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	3714      	adds	r7, #20
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f74:	4770      	bx	lr
	...

08012f78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b084      	sub	sp, #16
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
 8012f80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d10a      	bne.n	8012fa2 <xQueueGenericReset+0x2a>
	__asm volatile
 8012f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f90:	f383 8811 	msr	BASEPRI, r3
 8012f94:	f3bf 8f6f 	isb	sy
 8012f98:	f3bf 8f4f 	dsb	sy
 8012f9c:	60bb      	str	r3, [r7, #8]
}
 8012f9e:	bf00      	nop
 8012fa0:	e7fe      	b.n	8012fa0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012fa2:	f001 ff5f 	bl	8014e64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	681a      	ldr	r2, [r3, #0]
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012fae:	68f9      	ldr	r1, [r7, #12]
 8012fb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012fb2:	fb01 f303 	mul.w	r3, r1, r3
 8012fb6:	441a      	add	r2, r3
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	681a      	ldr	r2, [r3, #0]
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	681a      	ldr	r2, [r3, #0]
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012fd2:	3b01      	subs	r3, #1
 8012fd4:	68f9      	ldr	r1, [r7, #12]
 8012fd6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012fd8:	fb01 f303 	mul.w	r3, r1, r3
 8012fdc:	441a      	add	r2, r3
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	22ff      	movs	r2, #255	; 0xff
 8012fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	22ff      	movs	r2, #255	; 0xff
 8012fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012ff2:	683b      	ldr	r3, [r7, #0]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d114      	bne.n	8013022 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	691b      	ldr	r3, [r3, #16]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d01a      	beq.n	8013036 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	3310      	adds	r3, #16
 8013004:	4618      	mov	r0, r3
 8013006:	f001 f953 	bl	80142b0 <xTaskRemoveFromEventList>
 801300a:	4603      	mov	r3, r0
 801300c:	2b00      	cmp	r3, #0
 801300e:	d012      	beq.n	8013036 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013010:	4b0c      	ldr	r3, [pc, #48]	; (8013044 <xQueueGenericReset+0xcc>)
 8013012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013016:	601a      	str	r2, [r3, #0]
 8013018:	f3bf 8f4f 	dsb	sy
 801301c:	f3bf 8f6f 	isb	sy
 8013020:	e009      	b.n	8013036 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	3310      	adds	r3, #16
 8013026:	4618      	mov	r0, r3
 8013028:	f7ff fef1 	bl	8012e0e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	3324      	adds	r3, #36	; 0x24
 8013030:	4618      	mov	r0, r3
 8013032:	f7ff feec 	bl	8012e0e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013036:	f001 ff45 	bl	8014ec4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801303a:	2301      	movs	r3, #1
}
 801303c:	4618      	mov	r0, r3
 801303e:	3710      	adds	r7, #16
 8013040:	46bd      	mov	sp, r7
 8013042:	bd80      	pop	{r7, pc}
 8013044:	e000ed04 	.word	0xe000ed04

08013048 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013048:	b580      	push	{r7, lr}
 801304a:	b08e      	sub	sp, #56	; 0x38
 801304c:	af02      	add	r7, sp, #8
 801304e:	60f8      	str	r0, [r7, #12]
 8013050:	60b9      	str	r1, [r7, #8]
 8013052:	607a      	str	r2, [r7, #4]
 8013054:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d10a      	bne.n	8013072 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801305c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013060:	f383 8811 	msr	BASEPRI, r3
 8013064:	f3bf 8f6f 	isb	sy
 8013068:	f3bf 8f4f 	dsb	sy
 801306c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801306e:	bf00      	nop
 8013070:	e7fe      	b.n	8013070 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013072:	683b      	ldr	r3, [r7, #0]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d10a      	bne.n	801308e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013078:	f04f 0350 	mov.w	r3, #80	; 0x50
 801307c:	f383 8811 	msr	BASEPRI, r3
 8013080:	f3bf 8f6f 	isb	sy
 8013084:	f3bf 8f4f 	dsb	sy
 8013088:	627b      	str	r3, [r7, #36]	; 0x24
}
 801308a:	bf00      	nop
 801308c:	e7fe      	b.n	801308c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d002      	beq.n	801309a <xQueueGenericCreateStatic+0x52>
 8013094:	68bb      	ldr	r3, [r7, #8]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d001      	beq.n	801309e <xQueueGenericCreateStatic+0x56>
 801309a:	2301      	movs	r3, #1
 801309c:	e000      	b.n	80130a0 <xQueueGenericCreateStatic+0x58>
 801309e:	2300      	movs	r3, #0
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d10a      	bne.n	80130ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80130a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130a8:	f383 8811 	msr	BASEPRI, r3
 80130ac:	f3bf 8f6f 	isb	sy
 80130b0:	f3bf 8f4f 	dsb	sy
 80130b4:	623b      	str	r3, [r7, #32]
}
 80130b6:	bf00      	nop
 80130b8:	e7fe      	b.n	80130b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d102      	bne.n	80130c6 <xQueueGenericCreateStatic+0x7e>
 80130c0:	68bb      	ldr	r3, [r7, #8]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d101      	bne.n	80130ca <xQueueGenericCreateStatic+0x82>
 80130c6:	2301      	movs	r3, #1
 80130c8:	e000      	b.n	80130cc <xQueueGenericCreateStatic+0x84>
 80130ca:	2300      	movs	r3, #0
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d10a      	bne.n	80130e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80130d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130d4:	f383 8811 	msr	BASEPRI, r3
 80130d8:	f3bf 8f6f 	isb	sy
 80130dc:	f3bf 8f4f 	dsb	sy
 80130e0:	61fb      	str	r3, [r7, #28]
}
 80130e2:	bf00      	nop
 80130e4:	e7fe      	b.n	80130e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80130e6:	2348      	movs	r3, #72	; 0x48
 80130e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80130ea:	697b      	ldr	r3, [r7, #20]
 80130ec:	2b48      	cmp	r3, #72	; 0x48
 80130ee:	d00a      	beq.n	8013106 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80130f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130f4:	f383 8811 	msr	BASEPRI, r3
 80130f8:	f3bf 8f6f 	isb	sy
 80130fc:	f3bf 8f4f 	dsb	sy
 8013100:	61bb      	str	r3, [r7, #24]
}
 8013102:	bf00      	nop
 8013104:	e7fe      	b.n	8013104 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013106:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013108:	683b      	ldr	r3, [r7, #0]
 801310a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801310c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801310e:	2b00      	cmp	r3, #0
 8013110:	d00d      	beq.n	801312e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013114:	2201      	movs	r2, #1
 8013116:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801311a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013120:	9300      	str	r3, [sp, #0]
 8013122:	4613      	mov	r3, r2
 8013124:	687a      	ldr	r2, [r7, #4]
 8013126:	68b9      	ldr	r1, [r7, #8]
 8013128:	68f8      	ldr	r0, [r7, #12]
 801312a:	f000 f845 	bl	80131b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801312e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013130:	4618      	mov	r0, r3
 8013132:	3730      	adds	r7, #48	; 0x30
 8013134:	46bd      	mov	sp, r7
 8013136:	bd80      	pop	{r7, pc}

08013138 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013138:	b580      	push	{r7, lr}
 801313a:	b08a      	sub	sp, #40	; 0x28
 801313c:	af02      	add	r7, sp, #8
 801313e:	60f8      	str	r0, [r7, #12]
 8013140:	60b9      	str	r1, [r7, #8]
 8013142:	4613      	mov	r3, r2
 8013144:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d10a      	bne.n	8013162 <xQueueGenericCreate+0x2a>
	__asm volatile
 801314c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013150:	f383 8811 	msr	BASEPRI, r3
 8013154:	f3bf 8f6f 	isb	sy
 8013158:	f3bf 8f4f 	dsb	sy
 801315c:	613b      	str	r3, [r7, #16]
}
 801315e:	bf00      	nop
 8013160:	e7fe      	b.n	8013160 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8013162:	68bb      	ldr	r3, [r7, #8]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d102      	bne.n	801316e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8013168:	2300      	movs	r3, #0
 801316a:	61fb      	str	r3, [r7, #28]
 801316c:	e004      	b.n	8013178 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	68ba      	ldr	r2, [r7, #8]
 8013172:	fb02 f303 	mul.w	r3, r2, r3
 8013176:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013178:	69fb      	ldr	r3, [r7, #28]
 801317a:	3348      	adds	r3, #72	; 0x48
 801317c:	4618      	mov	r0, r3
 801317e:	f001 ff93 	bl	80150a8 <pvPortMalloc>
 8013182:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013184:	69bb      	ldr	r3, [r7, #24]
 8013186:	2b00      	cmp	r3, #0
 8013188:	d011      	beq.n	80131ae <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801318a:	69bb      	ldr	r3, [r7, #24]
 801318c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801318e:	697b      	ldr	r3, [r7, #20]
 8013190:	3348      	adds	r3, #72	; 0x48
 8013192:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013194:	69bb      	ldr	r3, [r7, #24]
 8013196:	2200      	movs	r2, #0
 8013198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801319c:	79fa      	ldrb	r2, [r7, #7]
 801319e:	69bb      	ldr	r3, [r7, #24]
 80131a0:	9300      	str	r3, [sp, #0]
 80131a2:	4613      	mov	r3, r2
 80131a4:	697a      	ldr	r2, [r7, #20]
 80131a6:	68b9      	ldr	r1, [r7, #8]
 80131a8:	68f8      	ldr	r0, [r7, #12]
 80131aa:	f000 f805 	bl	80131b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80131ae:	69bb      	ldr	r3, [r7, #24]
	}
 80131b0:	4618      	mov	r0, r3
 80131b2:	3720      	adds	r7, #32
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bd80      	pop	{r7, pc}

080131b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b084      	sub	sp, #16
 80131bc:	af00      	add	r7, sp, #0
 80131be:	60f8      	str	r0, [r7, #12]
 80131c0:	60b9      	str	r1, [r7, #8]
 80131c2:	607a      	str	r2, [r7, #4]
 80131c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80131c6:	68bb      	ldr	r3, [r7, #8]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d103      	bne.n	80131d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80131cc:	69bb      	ldr	r3, [r7, #24]
 80131ce:	69ba      	ldr	r2, [r7, #24]
 80131d0:	601a      	str	r2, [r3, #0]
 80131d2:	e002      	b.n	80131da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80131d4:	69bb      	ldr	r3, [r7, #24]
 80131d6:	687a      	ldr	r2, [r7, #4]
 80131d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80131da:	69bb      	ldr	r3, [r7, #24]
 80131dc:	68fa      	ldr	r2, [r7, #12]
 80131de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80131e0:	69bb      	ldr	r3, [r7, #24]
 80131e2:	68ba      	ldr	r2, [r7, #8]
 80131e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80131e6:	2101      	movs	r1, #1
 80131e8:	69b8      	ldr	r0, [r7, #24]
 80131ea:	f7ff fec5 	bl	8012f78 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80131ee:	bf00      	nop
 80131f0:	3710      	adds	r7, #16
 80131f2:	46bd      	mov	sp, r7
 80131f4:	bd80      	pop	{r7, pc}

080131f6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80131f6:	b580      	push	{r7, lr}
 80131f8:	b082      	sub	sp, #8
 80131fa:	af00      	add	r7, sp, #0
 80131fc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d00e      	beq.n	8013222 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	2200      	movs	r2, #0
 8013208:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	2200      	movs	r2, #0
 801320e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	2200      	movs	r2, #0
 8013214:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8013216:	2300      	movs	r3, #0
 8013218:	2200      	movs	r2, #0
 801321a:	2100      	movs	r1, #0
 801321c:	6878      	ldr	r0, [r7, #4]
 801321e:	f000 f837 	bl	8013290 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8013222:	bf00      	nop
 8013224:	3708      	adds	r7, #8
 8013226:	46bd      	mov	sp, r7
 8013228:	bd80      	pop	{r7, pc}

0801322a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801322a:	b580      	push	{r7, lr}
 801322c:	b086      	sub	sp, #24
 801322e:	af00      	add	r7, sp, #0
 8013230:	4603      	mov	r3, r0
 8013232:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8013234:	2301      	movs	r3, #1
 8013236:	617b      	str	r3, [r7, #20]
 8013238:	2300      	movs	r3, #0
 801323a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801323c:	79fb      	ldrb	r3, [r7, #7]
 801323e:	461a      	mov	r2, r3
 8013240:	6939      	ldr	r1, [r7, #16]
 8013242:	6978      	ldr	r0, [r7, #20]
 8013244:	f7ff ff78 	bl	8013138 <xQueueGenericCreate>
 8013248:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801324a:	68f8      	ldr	r0, [r7, #12]
 801324c:	f7ff ffd3 	bl	80131f6 <prvInitialiseMutex>

		return xNewQueue;
 8013250:	68fb      	ldr	r3, [r7, #12]
	}
 8013252:	4618      	mov	r0, r3
 8013254:	3718      	adds	r7, #24
 8013256:	46bd      	mov	sp, r7
 8013258:	bd80      	pop	{r7, pc}

0801325a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801325a:	b580      	push	{r7, lr}
 801325c:	b088      	sub	sp, #32
 801325e:	af02      	add	r7, sp, #8
 8013260:	4603      	mov	r3, r0
 8013262:	6039      	str	r1, [r7, #0]
 8013264:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8013266:	2301      	movs	r3, #1
 8013268:	617b      	str	r3, [r7, #20]
 801326a:	2300      	movs	r3, #0
 801326c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801326e:	79fb      	ldrb	r3, [r7, #7]
 8013270:	9300      	str	r3, [sp, #0]
 8013272:	683b      	ldr	r3, [r7, #0]
 8013274:	2200      	movs	r2, #0
 8013276:	6939      	ldr	r1, [r7, #16]
 8013278:	6978      	ldr	r0, [r7, #20]
 801327a:	f7ff fee5 	bl	8013048 <xQueueGenericCreateStatic>
 801327e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013280:	68f8      	ldr	r0, [r7, #12]
 8013282:	f7ff ffb8 	bl	80131f6 <prvInitialiseMutex>

		return xNewQueue;
 8013286:	68fb      	ldr	r3, [r7, #12]
	}
 8013288:	4618      	mov	r0, r3
 801328a:	3718      	adds	r7, #24
 801328c:	46bd      	mov	sp, r7
 801328e:	bd80      	pop	{r7, pc}

08013290 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b08e      	sub	sp, #56	; 0x38
 8013294:	af00      	add	r7, sp, #0
 8013296:	60f8      	str	r0, [r7, #12]
 8013298:	60b9      	str	r1, [r7, #8]
 801329a:	607a      	str	r2, [r7, #4]
 801329c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801329e:	2300      	movs	r3, #0
 80132a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80132a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d10a      	bne.n	80132c2 <xQueueGenericSend+0x32>
	__asm volatile
 80132ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132b0:	f383 8811 	msr	BASEPRI, r3
 80132b4:	f3bf 8f6f 	isb	sy
 80132b8:	f3bf 8f4f 	dsb	sy
 80132bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80132be:	bf00      	nop
 80132c0:	e7fe      	b.n	80132c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80132c2:	68bb      	ldr	r3, [r7, #8]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d103      	bne.n	80132d0 <xQueueGenericSend+0x40>
 80132c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d101      	bne.n	80132d4 <xQueueGenericSend+0x44>
 80132d0:	2301      	movs	r3, #1
 80132d2:	e000      	b.n	80132d6 <xQueueGenericSend+0x46>
 80132d4:	2300      	movs	r3, #0
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d10a      	bne.n	80132f0 <xQueueGenericSend+0x60>
	__asm volatile
 80132da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132de:	f383 8811 	msr	BASEPRI, r3
 80132e2:	f3bf 8f6f 	isb	sy
 80132e6:	f3bf 8f4f 	dsb	sy
 80132ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80132ec:	bf00      	nop
 80132ee:	e7fe      	b.n	80132ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80132f0:	683b      	ldr	r3, [r7, #0]
 80132f2:	2b02      	cmp	r3, #2
 80132f4:	d103      	bne.n	80132fe <xQueueGenericSend+0x6e>
 80132f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80132fa:	2b01      	cmp	r3, #1
 80132fc:	d101      	bne.n	8013302 <xQueueGenericSend+0x72>
 80132fe:	2301      	movs	r3, #1
 8013300:	e000      	b.n	8013304 <xQueueGenericSend+0x74>
 8013302:	2300      	movs	r3, #0
 8013304:	2b00      	cmp	r3, #0
 8013306:	d10a      	bne.n	801331e <xQueueGenericSend+0x8e>
	__asm volatile
 8013308:	f04f 0350 	mov.w	r3, #80	; 0x50
 801330c:	f383 8811 	msr	BASEPRI, r3
 8013310:	f3bf 8f6f 	isb	sy
 8013314:	f3bf 8f4f 	dsb	sy
 8013318:	623b      	str	r3, [r7, #32]
}
 801331a:	bf00      	nop
 801331c:	e7fe      	b.n	801331c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801331e:	f001 f983 	bl	8014628 <xTaskGetSchedulerState>
 8013322:	4603      	mov	r3, r0
 8013324:	2b00      	cmp	r3, #0
 8013326:	d102      	bne.n	801332e <xQueueGenericSend+0x9e>
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d101      	bne.n	8013332 <xQueueGenericSend+0xa2>
 801332e:	2301      	movs	r3, #1
 8013330:	e000      	b.n	8013334 <xQueueGenericSend+0xa4>
 8013332:	2300      	movs	r3, #0
 8013334:	2b00      	cmp	r3, #0
 8013336:	d10a      	bne.n	801334e <xQueueGenericSend+0xbe>
	__asm volatile
 8013338:	f04f 0350 	mov.w	r3, #80	; 0x50
 801333c:	f383 8811 	msr	BASEPRI, r3
 8013340:	f3bf 8f6f 	isb	sy
 8013344:	f3bf 8f4f 	dsb	sy
 8013348:	61fb      	str	r3, [r7, #28]
}
 801334a:	bf00      	nop
 801334c:	e7fe      	b.n	801334c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801334e:	f001 fd89 	bl	8014e64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801335a:	429a      	cmp	r2, r3
 801335c:	d302      	bcc.n	8013364 <xQueueGenericSend+0xd4>
 801335e:	683b      	ldr	r3, [r7, #0]
 8013360:	2b02      	cmp	r3, #2
 8013362:	d129      	bne.n	80133b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013364:	683a      	ldr	r2, [r7, #0]
 8013366:	68b9      	ldr	r1, [r7, #8]
 8013368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801336a:	f000 fa87 	bl	801387c <prvCopyDataToQueue>
 801336e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013374:	2b00      	cmp	r3, #0
 8013376:	d010      	beq.n	801339a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801337a:	3324      	adds	r3, #36	; 0x24
 801337c:	4618      	mov	r0, r3
 801337e:	f000 ff97 	bl	80142b0 <xTaskRemoveFromEventList>
 8013382:	4603      	mov	r3, r0
 8013384:	2b00      	cmp	r3, #0
 8013386:	d013      	beq.n	80133b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013388:	4b3f      	ldr	r3, [pc, #252]	; (8013488 <xQueueGenericSend+0x1f8>)
 801338a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801338e:	601a      	str	r2, [r3, #0]
 8013390:	f3bf 8f4f 	dsb	sy
 8013394:	f3bf 8f6f 	isb	sy
 8013398:	e00a      	b.n	80133b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801339c:	2b00      	cmp	r3, #0
 801339e:	d007      	beq.n	80133b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80133a0:	4b39      	ldr	r3, [pc, #228]	; (8013488 <xQueueGenericSend+0x1f8>)
 80133a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133a6:	601a      	str	r2, [r3, #0]
 80133a8:	f3bf 8f4f 	dsb	sy
 80133ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80133b0:	f001 fd88 	bl	8014ec4 <vPortExitCritical>
				return pdPASS;
 80133b4:	2301      	movs	r3, #1
 80133b6:	e063      	b.n	8013480 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d103      	bne.n	80133c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80133be:	f001 fd81 	bl	8014ec4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80133c2:	2300      	movs	r3, #0
 80133c4:	e05c      	b.n	8013480 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80133c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d106      	bne.n	80133da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80133cc:	f107 0314 	add.w	r3, r7, #20
 80133d0:	4618      	mov	r0, r3
 80133d2:	f000 ffcf 	bl	8014374 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80133d6:	2301      	movs	r3, #1
 80133d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80133da:	f001 fd73 	bl	8014ec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80133de:	f000 fd85 	bl	8013eec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80133e2:	f001 fd3f 	bl	8014e64 <vPortEnterCritical>
 80133e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80133ec:	b25b      	sxtb	r3, r3
 80133ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133f2:	d103      	bne.n	80133fc <xQueueGenericSend+0x16c>
 80133f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133f6:	2200      	movs	r2, #0
 80133f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80133fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013402:	b25b      	sxtb	r3, r3
 8013404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013408:	d103      	bne.n	8013412 <xQueueGenericSend+0x182>
 801340a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801340c:	2200      	movs	r2, #0
 801340e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013412:	f001 fd57 	bl	8014ec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013416:	1d3a      	adds	r2, r7, #4
 8013418:	f107 0314 	add.w	r3, r7, #20
 801341c:	4611      	mov	r1, r2
 801341e:	4618      	mov	r0, r3
 8013420:	f000 ffbe 	bl	80143a0 <xTaskCheckForTimeOut>
 8013424:	4603      	mov	r3, r0
 8013426:	2b00      	cmp	r3, #0
 8013428:	d124      	bne.n	8013474 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801342a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801342c:	f000 fb1e 	bl	8013a6c <prvIsQueueFull>
 8013430:	4603      	mov	r3, r0
 8013432:	2b00      	cmp	r3, #0
 8013434:	d018      	beq.n	8013468 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013438:	3310      	adds	r3, #16
 801343a:	687a      	ldr	r2, [r7, #4]
 801343c:	4611      	mov	r1, r2
 801343e:	4618      	mov	r0, r3
 8013440:	f000 ff12 	bl	8014268 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013446:	f000 faa9 	bl	801399c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801344a:	f000 fd5d 	bl	8013f08 <xTaskResumeAll>
 801344e:	4603      	mov	r3, r0
 8013450:	2b00      	cmp	r3, #0
 8013452:	f47f af7c 	bne.w	801334e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8013456:	4b0c      	ldr	r3, [pc, #48]	; (8013488 <xQueueGenericSend+0x1f8>)
 8013458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801345c:	601a      	str	r2, [r3, #0]
 801345e:	f3bf 8f4f 	dsb	sy
 8013462:	f3bf 8f6f 	isb	sy
 8013466:	e772      	b.n	801334e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801346a:	f000 fa97 	bl	801399c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801346e:	f000 fd4b 	bl	8013f08 <xTaskResumeAll>
 8013472:	e76c      	b.n	801334e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013474:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013476:	f000 fa91 	bl	801399c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801347a:	f000 fd45 	bl	8013f08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801347e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013480:	4618      	mov	r0, r3
 8013482:	3738      	adds	r7, #56	; 0x38
 8013484:	46bd      	mov	sp, r7
 8013486:	bd80      	pop	{r7, pc}
 8013488:	e000ed04 	.word	0xe000ed04

0801348c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801348c:	b580      	push	{r7, lr}
 801348e:	b08e      	sub	sp, #56	; 0x38
 8013490:	af00      	add	r7, sp, #0
 8013492:	60f8      	str	r0, [r7, #12]
 8013494:	60b9      	str	r1, [r7, #8]
 8013496:	607a      	str	r2, [r7, #4]
 8013498:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801349e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d10a      	bne.n	80134ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80134a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134a8:	f383 8811 	msr	BASEPRI, r3
 80134ac:	f3bf 8f6f 	isb	sy
 80134b0:	f3bf 8f4f 	dsb	sy
 80134b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80134b6:	bf00      	nop
 80134b8:	e7fe      	b.n	80134b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80134ba:	68bb      	ldr	r3, [r7, #8]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d103      	bne.n	80134c8 <xQueueGenericSendFromISR+0x3c>
 80134c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d101      	bne.n	80134cc <xQueueGenericSendFromISR+0x40>
 80134c8:	2301      	movs	r3, #1
 80134ca:	e000      	b.n	80134ce <xQueueGenericSendFromISR+0x42>
 80134cc:	2300      	movs	r3, #0
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d10a      	bne.n	80134e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80134d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134d6:	f383 8811 	msr	BASEPRI, r3
 80134da:	f3bf 8f6f 	isb	sy
 80134de:	f3bf 8f4f 	dsb	sy
 80134e2:	623b      	str	r3, [r7, #32]
}
 80134e4:	bf00      	nop
 80134e6:	e7fe      	b.n	80134e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80134e8:	683b      	ldr	r3, [r7, #0]
 80134ea:	2b02      	cmp	r3, #2
 80134ec:	d103      	bne.n	80134f6 <xQueueGenericSendFromISR+0x6a>
 80134ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80134f2:	2b01      	cmp	r3, #1
 80134f4:	d101      	bne.n	80134fa <xQueueGenericSendFromISR+0x6e>
 80134f6:	2301      	movs	r3, #1
 80134f8:	e000      	b.n	80134fc <xQueueGenericSendFromISR+0x70>
 80134fa:	2300      	movs	r3, #0
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d10a      	bne.n	8013516 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013504:	f383 8811 	msr	BASEPRI, r3
 8013508:	f3bf 8f6f 	isb	sy
 801350c:	f3bf 8f4f 	dsb	sy
 8013510:	61fb      	str	r3, [r7, #28]
}
 8013512:	bf00      	nop
 8013514:	e7fe      	b.n	8013514 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013516:	f001 fd87 	bl	8015028 <vPortValidateInterruptPriority>
	__asm volatile
 801351a:	f3ef 8211 	mrs	r2, BASEPRI
 801351e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013522:	f383 8811 	msr	BASEPRI, r3
 8013526:	f3bf 8f6f 	isb	sy
 801352a:	f3bf 8f4f 	dsb	sy
 801352e:	61ba      	str	r2, [r7, #24]
 8013530:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013532:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013534:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801353a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801353c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801353e:	429a      	cmp	r2, r3
 8013540:	d302      	bcc.n	8013548 <xQueueGenericSendFromISR+0xbc>
 8013542:	683b      	ldr	r3, [r7, #0]
 8013544:	2b02      	cmp	r3, #2
 8013546:	d12c      	bne.n	80135a2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801354a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801354e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013552:	683a      	ldr	r2, [r7, #0]
 8013554:	68b9      	ldr	r1, [r7, #8]
 8013556:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013558:	f000 f990 	bl	801387c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801355c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8013560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013564:	d112      	bne.n	801358c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801356a:	2b00      	cmp	r3, #0
 801356c:	d016      	beq.n	801359c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801356e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013570:	3324      	adds	r3, #36	; 0x24
 8013572:	4618      	mov	r0, r3
 8013574:	f000 fe9c 	bl	80142b0 <xTaskRemoveFromEventList>
 8013578:	4603      	mov	r3, r0
 801357a:	2b00      	cmp	r3, #0
 801357c:	d00e      	beq.n	801359c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d00b      	beq.n	801359c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	2201      	movs	r2, #1
 8013588:	601a      	str	r2, [r3, #0]
 801358a:	e007      	b.n	801359c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801358c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013590:	3301      	adds	r3, #1
 8013592:	b2db      	uxtb	r3, r3
 8013594:	b25a      	sxtb	r2, r3
 8013596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801359c:	2301      	movs	r3, #1
 801359e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80135a0:	e001      	b.n	80135a6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80135a2:	2300      	movs	r3, #0
 80135a4:	637b      	str	r3, [r7, #52]	; 0x34
 80135a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80135aa:	693b      	ldr	r3, [r7, #16]
 80135ac:	f383 8811 	msr	BASEPRI, r3
}
 80135b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80135b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80135b4:	4618      	mov	r0, r3
 80135b6:	3738      	adds	r7, #56	; 0x38
 80135b8:	46bd      	mov	sp, r7
 80135ba:	bd80      	pop	{r7, pc}

080135bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	b08c      	sub	sp, #48	; 0x30
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	60f8      	str	r0, [r7, #12]
 80135c4:	60b9      	str	r1, [r7, #8]
 80135c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80135c8:	2300      	movs	r3, #0
 80135ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80135d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d10a      	bne.n	80135ec <xQueueReceive+0x30>
	__asm volatile
 80135d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135da:	f383 8811 	msr	BASEPRI, r3
 80135de:	f3bf 8f6f 	isb	sy
 80135e2:	f3bf 8f4f 	dsb	sy
 80135e6:	623b      	str	r3, [r7, #32]
}
 80135e8:	bf00      	nop
 80135ea:	e7fe      	b.n	80135ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80135ec:	68bb      	ldr	r3, [r7, #8]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d103      	bne.n	80135fa <xQueueReceive+0x3e>
 80135f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d101      	bne.n	80135fe <xQueueReceive+0x42>
 80135fa:	2301      	movs	r3, #1
 80135fc:	e000      	b.n	8013600 <xQueueReceive+0x44>
 80135fe:	2300      	movs	r3, #0
 8013600:	2b00      	cmp	r3, #0
 8013602:	d10a      	bne.n	801361a <xQueueReceive+0x5e>
	__asm volatile
 8013604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013608:	f383 8811 	msr	BASEPRI, r3
 801360c:	f3bf 8f6f 	isb	sy
 8013610:	f3bf 8f4f 	dsb	sy
 8013614:	61fb      	str	r3, [r7, #28]
}
 8013616:	bf00      	nop
 8013618:	e7fe      	b.n	8013618 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801361a:	f001 f805 	bl	8014628 <xTaskGetSchedulerState>
 801361e:	4603      	mov	r3, r0
 8013620:	2b00      	cmp	r3, #0
 8013622:	d102      	bne.n	801362a <xQueueReceive+0x6e>
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	2b00      	cmp	r3, #0
 8013628:	d101      	bne.n	801362e <xQueueReceive+0x72>
 801362a:	2301      	movs	r3, #1
 801362c:	e000      	b.n	8013630 <xQueueReceive+0x74>
 801362e:	2300      	movs	r3, #0
 8013630:	2b00      	cmp	r3, #0
 8013632:	d10a      	bne.n	801364a <xQueueReceive+0x8e>
	__asm volatile
 8013634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013638:	f383 8811 	msr	BASEPRI, r3
 801363c:	f3bf 8f6f 	isb	sy
 8013640:	f3bf 8f4f 	dsb	sy
 8013644:	61bb      	str	r3, [r7, #24]
}
 8013646:	bf00      	nop
 8013648:	e7fe      	b.n	8013648 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801364a:	f001 fc0b 	bl	8014e64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013652:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013656:	2b00      	cmp	r3, #0
 8013658:	d01f      	beq.n	801369a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801365a:	68b9      	ldr	r1, [r7, #8]
 801365c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801365e:	f000 f977 	bl	8013950 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013664:	1e5a      	subs	r2, r3, #1
 8013666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013668:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801366a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801366c:	691b      	ldr	r3, [r3, #16]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d00f      	beq.n	8013692 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013674:	3310      	adds	r3, #16
 8013676:	4618      	mov	r0, r3
 8013678:	f000 fe1a 	bl	80142b0 <xTaskRemoveFromEventList>
 801367c:	4603      	mov	r3, r0
 801367e:	2b00      	cmp	r3, #0
 8013680:	d007      	beq.n	8013692 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013682:	4b3d      	ldr	r3, [pc, #244]	; (8013778 <xQueueReceive+0x1bc>)
 8013684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013688:	601a      	str	r2, [r3, #0]
 801368a:	f3bf 8f4f 	dsb	sy
 801368e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013692:	f001 fc17 	bl	8014ec4 <vPortExitCritical>
				return pdPASS;
 8013696:	2301      	movs	r3, #1
 8013698:	e069      	b.n	801376e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d103      	bne.n	80136a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80136a0:	f001 fc10 	bl	8014ec4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80136a4:	2300      	movs	r3, #0
 80136a6:	e062      	b.n	801376e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80136a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d106      	bne.n	80136bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80136ae:	f107 0310 	add.w	r3, r7, #16
 80136b2:	4618      	mov	r0, r3
 80136b4:	f000 fe5e 	bl	8014374 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80136b8:	2301      	movs	r3, #1
 80136ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80136bc:	f001 fc02 	bl	8014ec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80136c0:	f000 fc14 	bl	8013eec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80136c4:	f001 fbce 	bl	8014e64 <vPortEnterCritical>
 80136c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80136ce:	b25b      	sxtb	r3, r3
 80136d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136d4:	d103      	bne.n	80136de <xQueueReceive+0x122>
 80136d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136d8:	2200      	movs	r2, #0
 80136da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80136de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80136e4:	b25b      	sxtb	r3, r3
 80136e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136ea:	d103      	bne.n	80136f4 <xQueueReceive+0x138>
 80136ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ee:	2200      	movs	r2, #0
 80136f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80136f4:	f001 fbe6 	bl	8014ec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80136f8:	1d3a      	adds	r2, r7, #4
 80136fa:	f107 0310 	add.w	r3, r7, #16
 80136fe:	4611      	mov	r1, r2
 8013700:	4618      	mov	r0, r3
 8013702:	f000 fe4d 	bl	80143a0 <xTaskCheckForTimeOut>
 8013706:	4603      	mov	r3, r0
 8013708:	2b00      	cmp	r3, #0
 801370a:	d123      	bne.n	8013754 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801370c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801370e:	f000 f997 	bl	8013a40 <prvIsQueueEmpty>
 8013712:	4603      	mov	r3, r0
 8013714:	2b00      	cmp	r3, #0
 8013716:	d017      	beq.n	8013748 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801371a:	3324      	adds	r3, #36	; 0x24
 801371c:	687a      	ldr	r2, [r7, #4]
 801371e:	4611      	mov	r1, r2
 8013720:	4618      	mov	r0, r3
 8013722:	f000 fda1 	bl	8014268 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013728:	f000 f938 	bl	801399c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801372c:	f000 fbec 	bl	8013f08 <xTaskResumeAll>
 8013730:	4603      	mov	r3, r0
 8013732:	2b00      	cmp	r3, #0
 8013734:	d189      	bne.n	801364a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013736:	4b10      	ldr	r3, [pc, #64]	; (8013778 <xQueueReceive+0x1bc>)
 8013738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801373c:	601a      	str	r2, [r3, #0]
 801373e:	f3bf 8f4f 	dsb	sy
 8013742:	f3bf 8f6f 	isb	sy
 8013746:	e780      	b.n	801364a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801374a:	f000 f927 	bl	801399c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801374e:	f000 fbdb 	bl	8013f08 <xTaskResumeAll>
 8013752:	e77a      	b.n	801364a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013756:	f000 f921 	bl	801399c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801375a:	f000 fbd5 	bl	8013f08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801375e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013760:	f000 f96e 	bl	8013a40 <prvIsQueueEmpty>
 8013764:	4603      	mov	r3, r0
 8013766:	2b00      	cmp	r3, #0
 8013768:	f43f af6f 	beq.w	801364a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801376c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801376e:	4618      	mov	r0, r3
 8013770:	3730      	adds	r7, #48	; 0x30
 8013772:	46bd      	mov	sp, r7
 8013774:	bd80      	pop	{r7, pc}
 8013776:	bf00      	nop
 8013778:	e000ed04 	.word	0xe000ed04

0801377c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801377c:	b580      	push	{r7, lr}
 801377e:	b08e      	sub	sp, #56	; 0x38
 8013780:	af00      	add	r7, sp, #0
 8013782:	60f8      	str	r0, [r7, #12]
 8013784:	60b9      	str	r1, [r7, #8]
 8013786:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801378c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801378e:	2b00      	cmp	r3, #0
 8013790:	d10a      	bne.n	80137a8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8013792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013796:	f383 8811 	msr	BASEPRI, r3
 801379a:	f3bf 8f6f 	isb	sy
 801379e:	f3bf 8f4f 	dsb	sy
 80137a2:	623b      	str	r3, [r7, #32]
}
 80137a4:	bf00      	nop
 80137a6:	e7fe      	b.n	80137a6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80137a8:	68bb      	ldr	r3, [r7, #8]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d103      	bne.n	80137b6 <xQueueReceiveFromISR+0x3a>
 80137ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d101      	bne.n	80137ba <xQueueReceiveFromISR+0x3e>
 80137b6:	2301      	movs	r3, #1
 80137b8:	e000      	b.n	80137bc <xQueueReceiveFromISR+0x40>
 80137ba:	2300      	movs	r3, #0
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d10a      	bne.n	80137d6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80137c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137c4:	f383 8811 	msr	BASEPRI, r3
 80137c8:	f3bf 8f6f 	isb	sy
 80137cc:	f3bf 8f4f 	dsb	sy
 80137d0:	61fb      	str	r3, [r7, #28]
}
 80137d2:	bf00      	nop
 80137d4:	e7fe      	b.n	80137d4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80137d6:	f001 fc27 	bl	8015028 <vPortValidateInterruptPriority>
	__asm volatile
 80137da:	f3ef 8211 	mrs	r2, BASEPRI
 80137de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137e2:	f383 8811 	msr	BASEPRI, r3
 80137e6:	f3bf 8f6f 	isb	sy
 80137ea:	f3bf 8f4f 	dsb	sy
 80137ee:	61ba      	str	r2, [r7, #24]
 80137f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80137f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80137f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80137f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80137fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d02f      	beq.n	8013862 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013804:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801380c:	68b9      	ldr	r1, [r7, #8]
 801380e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013810:	f000 f89e 	bl	8013950 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013816:	1e5a      	subs	r2, r3, #1
 8013818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801381a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801381c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013824:	d112      	bne.n	801384c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013828:	691b      	ldr	r3, [r3, #16]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d016      	beq.n	801385c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801382e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013830:	3310      	adds	r3, #16
 8013832:	4618      	mov	r0, r3
 8013834:	f000 fd3c 	bl	80142b0 <xTaskRemoveFromEventList>
 8013838:	4603      	mov	r3, r0
 801383a:	2b00      	cmp	r3, #0
 801383c:	d00e      	beq.n	801385c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d00b      	beq.n	801385c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	2201      	movs	r2, #1
 8013848:	601a      	str	r2, [r3, #0]
 801384a:	e007      	b.n	801385c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801384c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013850:	3301      	adds	r3, #1
 8013852:	b2db      	uxtb	r3, r3
 8013854:	b25a      	sxtb	r2, r3
 8013856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801385c:	2301      	movs	r3, #1
 801385e:	637b      	str	r3, [r7, #52]	; 0x34
 8013860:	e001      	b.n	8013866 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8013862:	2300      	movs	r3, #0
 8013864:	637b      	str	r3, [r7, #52]	; 0x34
 8013866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013868:	613b      	str	r3, [r7, #16]
	__asm volatile
 801386a:	693b      	ldr	r3, [r7, #16]
 801386c:	f383 8811 	msr	BASEPRI, r3
}
 8013870:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013874:	4618      	mov	r0, r3
 8013876:	3738      	adds	r7, #56	; 0x38
 8013878:	46bd      	mov	sp, r7
 801387a:	bd80      	pop	{r7, pc}

0801387c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b086      	sub	sp, #24
 8013880:	af00      	add	r7, sp, #0
 8013882:	60f8      	str	r0, [r7, #12]
 8013884:	60b9      	str	r1, [r7, #8]
 8013886:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013888:	2300      	movs	r3, #0
 801388a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013890:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013896:	2b00      	cmp	r3, #0
 8013898:	d10d      	bne.n	80138b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d14d      	bne.n	801393e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	689b      	ldr	r3, [r3, #8]
 80138a6:	4618      	mov	r0, r3
 80138a8:	f000 fedc 	bl	8014664 <xTaskPriorityDisinherit>
 80138ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	2200      	movs	r2, #0
 80138b2:	609a      	str	r2, [r3, #8]
 80138b4:	e043      	b.n	801393e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d119      	bne.n	80138f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	6858      	ldr	r0, [r3, #4]
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138c4:	461a      	mov	r2, r3
 80138c6:	68b9      	ldr	r1, [r7, #8]
 80138c8:	f002 fb52 	bl	8015f70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	685a      	ldr	r2, [r3, #4]
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138d4:	441a      	add	r2, r3
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	685a      	ldr	r2, [r3, #4]
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	689b      	ldr	r3, [r3, #8]
 80138e2:	429a      	cmp	r2, r3
 80138e4:	d32b      	bcc.n	801393e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	681a      	ldr	r2, [r3, #0]
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	605a      	str	r2, [r3, #4]
 80138ee:	e026      	b.n	801393e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	68d8      	ldr	r0, [r3, #12]
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138f8:	461a      	mov	r2, r3
 80138fa:	68b9      	ldr	r1, [r7, #8]
 80138fc:	f002 fb38 	bl	8015f70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	68da      	ldr	r2, [r3, #12]
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013908:	425b      	negs	r3, r3
 801390a:	441a      	add	r2, r3
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	68da      	ldr	r2, [r3, #12]
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	429a      	cmp	r2, r3
 801391a:	d207      	bcs.n	801392c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	689a      	ldr	r2, [r3, #8]
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013924:	425b      	negs	r3, r3
 8013926:	441a      	add	r2, r3
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	2b02      	cmp	r3, #2
 8013930:	d105      	bne.n	801393e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013932:	693b      	ldr	r3, [r7, #16]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d002      	beq.n	801393e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013938:	693b      	ldr	r3, [r7, #16]
 801393a:	3b01      	subs	r3, #1
 801393c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801393e:	693b      	ldr	r3, [r7, #16]
 8013940:	1c5a      	adds	r2, r3, #1
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013946:	697b      	ldr	r3, [r7, #20]
}
 8013948:	4618      	mov	r0, r3
 801394a:	3718      	adds	r7, #24
 801394c:	46bd      	mov	sp, r7
 801394e:	bd80      	pop	{r7, pc}

08013950 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013950:	b580      	push	{r7, lr}
 8013952:	b082      	sub	sp, #8
 8013954:	af00      	add	r7, sp, #0
 8013956:	6078      	str	r0, [r7, #4]
 8013958:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801395e:	2b00      	cmp	r3, #0
 8013960:	d018      	beq.n	8013994 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	68da      	ldr	r2, [r3, #12]
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801396a:	441a      	add	r2, r3
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	68da      	ldr	r2, [r3, #12]
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	689b      	ldr	r3, [r3, #8]
 8013978:	429a      	cmp	r2, r3
 801397a:	d303      	bcc.n	8013984 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	681a      	ldr	r2, [r3, #0]
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	68d9      	ldr	r1, [r3, #12]
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801398c:	461a      	mov	r2, r3
 801398e:	6838      	ldr	r0, [r7, #0]
 8013990:	f002 faee 	bl	8015f70 <memcpy>
	}
}
 8013994:	bf00      	nop
 8013996:	3708      	adds	r7, #8
 8013998:	46bd      	mov	sp, r7
 801399a:	bd80      	pop	{r7, pc}

0801399c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801399c:	b580      	push	{r7, lr}
 801399e:	b084      	sub	sp, #16
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80139a4:	f001 fa5e 	bl	8014e64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80139ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80139b0:	e011      	b.n	80139d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d012      	beq.n	80139e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	3324      	adds	r3, #36	; 0x24
 80139be:	4618      	mov	r0, r3
 80139c0:	f000 fc76 	bl	80142b0 <xTaskRemoveFromEventList>
 80139c4:	4603      	mov	r3, r0
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d001      	beq.n	80139ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80139ca:	f000 fd4b 	bl	8014464 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80139ce:	7bfb      	ldrb	r3, [r7, #15]
 80139d0:	3b01      	subs	r3, #1
 80139d2:	b2db      	uxtb	r3, r3
 80139d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80139d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	dce9      	bgt.n	80139b2 <prvUnlockQueue+0x16>
 80139de:	e000      	b.n	80139e2 <prvUnlockQueue+0x46>
					break;
 80139e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	22ff      	movs	r2, #255	; 0xff
 80139e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80139ea:	f001 fa6b 	bl	8014ec4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80139ee:	f001 fa39 	bl	8014e64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80139f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80139fa:	e011      	b.n	8013a20 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	691b      	ldr	r3, [r3, #16]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d012      	beq.n	8013a2a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	3310      	adds	r3, #16
 8013a08:	4618      	mov	r0, r3
 8013a0a:	f000 fc51 	bl	80142b0 <xTaskRemoveFromEventList>
 8013a0e:	4603      	mov	r3, r0
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d001      	beq.n	8013a18 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013a14:	f000 fd26 	bl	8014464 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013a18:	7bbb      	ldrb	r3, [r7, #14]
 8013a1a:	3b01      	subs	r3, #1
 8013a1c:	b2db      	uxtb	r3, r3
 8013a1e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013a20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	dce9      	bgt.n	80139fc <prvUnlockQueue+0x60>
 8013a28:	e000      	b.n	8013a2c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013a2a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	22ff      	movs	r2, #255	; 0xff
 8013a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013a34:	f001 fa46 	bl	8014ec4 <vPortExitCritical>
}
 8013a38:	bf00      	nop
 8013a3a:	3710      	adds	r7, #16
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	bd80      	pop	{r7, pc}

08013a40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b084      	sub	sp, #16
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013a48:	f001 fa0c 	bl	8014e64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d102      	bne.n	8013a5a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013a54:	2301      	movs	r3, #1
 8013a56:	60fb      	str	r3, [r7, #12]
 8013a58:	e001      	b.n	8013a5e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013a5e:	f001 fa31 	bl	8014ec4 <vPortExitCritical>

	return xReturn;
 8013a62:	68fb      	ldr	r3, [r7, #12]
}
 8013a64:	4618      	mov	r0, r3
 8013a66:	3710      	adds	r7, #16
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	bd80      	pop	{r7, pc}

08013a6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b084      	sub	sp, #16
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013a74:	f001 f9f6 	bl	8014e64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a80:	429a      	cmp	r2, r3
 8013a82:	d102      	bne.n	8013a8a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013a84:	2301      	movs	r3, #1
 8013a86:	60fb      	str	r3, [r7, #12]
 8013a88:	e001      	b.n	8013a8e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013a8e:	f001 fa19 	bl	8014ec4 <vPortExitCritical>

	return xReturn;
 8013a92:	68fb      	ldr	r3, [r7, #12]
}
 8013a94:	4618      	mov	r0, r3
 8013a96:	3710      	adds	r7, #16
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	bd80      	pop	{r7, pc}

08013a9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b08e      	sub	sp, #56	; 0x38
 8013aa0:	af04      	add	r7, sp, #16
 8013aa2:	60f8      	str	r0, [r7, #12]
 8013aa4:	60b9      	str	r1, [r7, #8]
 8013aa6:	607a      	str	r2, [r7, #4]
 8013aa8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d10a      	bne.n	8013ac6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8013ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ab4:	f383 8811 	msr	BASEPRI, r3
 8013ab8:	f3bf 8f6f 	isb	sy
 8013abc:	f3bf 8f4f 	dsb	sy
 8013ac0:	623b      	str	r3, [r7, #32]
}
 8013ac2:	bf00      	nop
 8013ac4:	e7fe      	b.n	8013ac4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d10a      	bne.n	8013ae2 <xTaskCreateStatic+0x46>
	__asm volatile
 8013acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ad0:	f383 8811 	msr	BASEPRI, r3
 8013ad4:	f3bf 8f6f 	isb	sy
 8013ad8:	f3bf 8f4f 	dsb	sy
 8013adc:	61fb      	str	r3, [r7, #28]
}
 8013ade:	bf00      	nop
 8013ae0:	e7fe      	b.n	8013ae0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013ae2:	2354      	movs	r3, #84	; 0x54
 8013ae4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013ae6:	693b      	ldr	r3, [r7, #16]
 8013ae8:	2b54      	cmp	r3, #84	; 0x54
 8013aea:	d00a      	beq.n	8013b02 <xTaskCreateStatic+0x66>
	__asm volatile
 8013aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013af0:	f383 8811 	msr	BASEPRI, r3
 8013af4:	f3bf 8f6f 	isb	sy
 8013af8:	f3bf 8f4f 	dsb	sy
 8013afc:	61bb      	str	r3, [r7, #24]
}
 8013afe:	bf00      	nop
 8013b00:	e7fe      	b.n	8013b00 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013b02:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d01e      	beq.n	8013b48 <xTaskCreateStatic+0xac>
 8013b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d01b      	beq.n	8013b48 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b12:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013b18:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b1c:	2202      	movs	r2, #2
 8013b1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013b22:	2300      	movs	r3, #0
 8013b24:	9303      	str	r3, [sp, #12]
 8013b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b28:	9302      	str	r3, [sp, #8]
 8013b2a:	f107 0314 	add.w	r3, r7, #20
 8013b2e:	9301      	str	r3, [sp, #4]
 8013b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b32:	9300      	str	r3, [sp, #0]
 8013b34:	683b      	ldr	r3, [r7, #0]
 8013b36:	687a      	ldr	r2, [r7, #4]
 8013b38:	68b9      	ldr	r1, [r7, #8]
 8013b3a:	68f8      	ldr	r0, [r7, #12]
 8013b3c:	f000 f850 	bl	8013be0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013b40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013b42:	f000 f8d5 	bl	8013cf0 <prvAddNewTaskToReadyList>
 8013b46:	e001      	b.n	8013b4c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8013b48:	2300      	movs	r3, #0
 8013b4a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013b4c:	697b      	ldr	r3, [r7, #20]
	}
 8013b4e:	4618      	mov	r0, r3
 8013b50:	3728      	adds	r7, #40	; 0x28
 8013b52:	46bd      	mov	sp, r7
 8013b54:	bd80      	pop	{r7, pc}

08013b56 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013b56:	b580      	push	{r7, lr}
 8013b58:	b08c      	sub	sp, #48	; 0x30
 8013b5a:	af04      	add	r7, sp, #16
 8013b5c:	60f8      	str	r0, [r7, #12]
 8013b5e:	60b9      	str	r1, [r7, #8]
 8013b60:	603b      	str	r3, [r7, #0]
 8013b62:	4613      	mov	r3, r2
 8013b64:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013b66:	88fb      	ldrh	r3, [r7, #6]
 8013b68:	009b      	lsls	r3, r3, #2
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	f001 fa9c 	bl	80150a8 <pvPortMalloc>
 8013b70:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013b72:	697b      	ldr	r3, [r7, #20]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d00e      	beq.n	8013b96 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013b78:	2054      	movs	r0, #84	; 0x54
 8013b7a:	f001 fa95 	bl	80150a8 <pvPortMalloc>
 8013b7e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013b80:	69fb      	ldr	r3, [r7, #28]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d003      	beq.n	8013b8e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013b86:	69fb      	ldr	r3, [r7, #28]
 8013b88:	697a      	ldr	r2, [r7, #20]
 8013b8a:	631a      	str	r2, [r3, #48]	; 0x30
 8013b8c:	e005      	b.n	8013b9a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013b8e:	6978      	ldr	r0, [r7, #20]
 8013b90:	f001 fb4e 	bl	8015230 <vPortFree>
 8013b94:	e001      	b.n	8013b9a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013b96:	2300      	movs	r3, #0
 8013b98:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013b9a:	69fb      	ldr	r3, [r7, #28]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d017      	beq.n	8013bd0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013ba0:	69fb      	ldr	r3, [r7, #28]
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013ba8:	88fa      	ldrh	r2, [r7, #6]
 8013baa:	2300      	movs	r3, #0
 8013bac:	9303      	str	r3, [sp, #12]
 8013bae:	69fb      	ldr	r3, [r7, #28]
 8013bb0:	9302      	str	r3, [sp, #8]
 8013bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bb4:	9301      	str	r3, [sp, #4]
 8013bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bb8:	9300      	str	r3, [sp, #0]
 8013bba:	683b      	ldr	r3, [r7, #0]
 8013bbc:	68b9      	ldr	r1, [r7, #8]
 8013bbe:	68f8      	ldr	r0, [r7, #12]
 8013bc0:	f000 f80e 	bl	8013be0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013bc4:	69f8      	ldr	r0, [r7, #28]
 8013bc6:	f000 f893 	bl	8013cf0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013bca:	2301      	movs	r3, #1
 8013bcc:	61bb      	str	r3, [r7, #24]
 8013bce:	e002      	b.n	8013bd6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8013bd4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013bd6:	69bb      	ldr	r3, [r7, #24]
	}
 8013bd8:	4618      	mov	r0, r3
 8013bda:	3720      	adds	r7, #32
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	bd80      	pop	{r7, pc}

08013be0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013be0:	b580      	push	{r7, lr}
 8013be2:	b088      	sub	sp, #32
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	60f8      	str	r0, [r7, #12]
 8013be8:	60b9      	str	r1, [r7, #8]
 8013bea:	607a      	str	r2, [r7, #4]
 8013bec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013bf8:	3b01      	subs	r3, #1
 8013bfa:	009b      	lsls	r3, r3, #2
 8013bfc:	4413      	add	r3, r2
 8013bfe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013c00:	69bb      	ldr	r3, [r7, #24]
 8013c02:	f023 0307 	bic.w	r3, r3, #7
 8013c06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013c08:	69bb      	ldr	r3, [r7, #24]
 8013c0a:	f003 0307 	and.w	r3, r3, #7
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d00a      	beq.n	8013c28 <prvInitialiseNewTask+0x48>
	__asm volatile
 8013c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c16:	f383 8811 	msr	BASEPRI, r3
 8013c1a:	f3bf 8f6f 	isb	sy
 8013c1e:	f3bf 8f4f 	dsb	sy
 8013c22:	617b      	str	r3, [r7, #20]
}
 8013c24:	bf00      	nop
 8013c26:	e7fe      	b.n	8013c26 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013c28:	68bb      	ldr	r3, [r7, #8]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d01f      	beq.n	8013c6e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013c2e:	2300      	movs	r3, #0
 8013c30:	61fb      	str	r3, [r7, #28]
 8013c32:	e012      	b.n	8013c5a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013c34:	68ba      	ldr	r2, [r7, #8]
 8013c36:	69fb      	ldr	r3, [r7, #28]
 8013c38:	4413      	add	r3, r2
 8013c3a:	7819      	ldrb	r1, [r3, #0]
 8013c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c3e:	69fb      	ldr	r3, [r7, #28]
 8013c40:	4413      	add	r3, r2
 8013c42:	3334      	adds	r3, #52	; 0x34
 8013c44:	460a      	mov	r2, r1
 8013c46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013c48:	68ba      	ldr	r2, [r7, #8]
 8013c4a:	69fb      	ldr	r3, [r7, #28]
 8013c4c:	4413      	add	r3, r2
 8013c4e:	781b      	ldrb	r3, [r3, #0]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d006      	beq.n	8013c62 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013c54:	69fb      	ldr	r3, [r7, #28]
 8013c56:	3301      	adds	r3, #1
 8013c58:	61fb      	str	r3, [r7, #28]
 8013c5a:	69fb      	ldr	r3, [r7, #28]
 8013c5c:	2b0f      	cmp	r3, #15
 8013c5e:	d9e9      	bls.n	8013c34 <prvInitialiseNewTask+0x54>
 8013c60:	e000      	b.n	8013c64 <prvInitialiseNewTask+0x84>
			{
				break;
 8013c62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c66:	2200      	movs	r2, #0
 8013c68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013c6c:	e003      	b.n	8013c76 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c70:	2200      	movs	r2, #0
 8013c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c78:	2b06      	cmp	r3, #6
 8013c7a:	d901      	bls.n	8013c80 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013c7c:	2306      	movs	r3, #6
 8013c7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013c84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013c8a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c8e:	2200      	movs	r2, #0
 8013c90:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c94:	3304      	adds	r3, #4
 8013c96:	4618      	mov	r0, r3
 8013c98:	f7ff f8d9 	bl	8012e4e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c9e:	3318      	adds	r3, #24
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	f7ff f8d4 	bl	8012e4e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013caa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cae:	f1c3 0207 	rsb	r2, r3, #7
 8013cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cb4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013cba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cc4:	2200      	movs	r2, #0
 8013cc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013cca:	683a      	ldr	r2, [r7, #0]
 8013ccc:	68f9      	ldr	r1, [r7, #12]
 8013cce:	69b8      	ldr	r0, [r7, #24]
 8013cd0:	f000 ff9e 	bl	8014c10 <pxPortInitialiseStack>
 8013cd4:	4602      	mov	r2, r0
 8013cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cd8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d002      	beq.n	8013ce6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ce4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013ce6:	bf00      	nop
 8013ce8:	3720      	adds	r7, #32
 8013cea:	46bd      	mov	sp, r7
 8013cec:	bd80      	pop	{r7, pc}
	...

08013cf0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b082      	sub	sp, #8
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013cf8:	f001 f8b4 	bl	8014e64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013cfc:	4b2a      	ldr	r3, [pc, #168]	; (8013da8 <prvAddNewTaskToReadyList+0xb8>)
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	3301      	adds	r3, #1
 8013d02:	4a29      	ldr	r2, [pc, #164]	; (8013da8 <prvAddNewTaskToReadyList+0xb8>)
 8013d04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013d06:	4b29      	ldr	r3, [pc, #164]	; (8013dac <prvAddNewTaskToReadyList+0xbc>)
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d109      	bne.n	8013d22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013d0e:	4a27      	ldr	r2, [pc, #156]	; (8013dac <prvAddNewTaskToReadyList+0xbc>)
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013d14:	4b24      	ldr	r3, [pc, #144]	; (8013da8 <prvAddNewTaskToReadyList+0xb8>)
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	2b01      	cmp	r3, #1
 8013d1a:	d110      	bne.n	8013d3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013d1c:	f000 fbc6 	bl	80144ac <prvInitialiseTaskLists>
 8013d20:	e00d      	b.n	8013d3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013d22:	4b23      	ldr	r3, [pc, #140]	; (8013db0 <prvAddNewTaskToReadyList+0xc0>)
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d109      	bne.n	8013d3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013d2a:	4b20      	ldr	r3, [pc, #128]	; (8013dac <prvAddNewTaskToReadyList+0xbc>)
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d34:	429a      	cmp	r2, r3
 8013d36:	d802      	bhi.n	8013d3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013d38:	4a1c      	ldr	r2, [pc, #112]	; (8013dac <prvAddNewTaskToReadyList+0xbc>)
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013d3e:	4b1d      	ldr	r3, [pc, #116]	; (8013db4 <prvAddNewTaskToReadyList+0xc4>)
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	3301      	adds	r3, #1
 8013d44:	4a1b      	ldr	r2, [pc, #108]	; (8013db4 <prvAddNewTaskToReadyList+0xc4>)
 8013d46:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d4c:	2201      	movs	r2, #1
 8013d4e:	409a      	lsls	r2, r3
 8013d50:	4b19      	ldr	r3, [pc, #100]	; (8013db8 <prvAddNewTaskToReadyList+0xc8>)
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	4313      	orrs	r3, r2
 8013d56:	4a18      	ldr	r2, [pc, #96]	; (8013db8 <prvAddNewTaskToReadyList+0xc8>)
 8013d58:	6013      	str	r3, [r2, #0]
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d5e:	4613      	mov	r3, r2
 8013d60:	009b      	lsls	r3, r3, #2
 8013d62:	4413      	add	r3, r2
 8013d64:	009b      	lsls	r3, r3, #2
 8013d66:	4a15      	ldr	r2, [pc, #84]	; (8013dbc <prvAddNewTaskToReadyList+0xcc>)
 8013d68:	441a      	add	r2, r3
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	3304      	adds	r3, #4
 8013d6e:	4619      	mov	r1, r3
 8013d70:	4610      	mov	r0, r2
 8013d72:	f7ff f879 	bl	8012e68 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013d76:	f001 f8a5 	bl	8014ec4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013d7a:	4b0d      	ldr	r3, [pc, #52]	; (8013db0 <prvAddNewTaskToReadyList+0xc0>)
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d00e      	beq.n	8013da0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013d82:	4b0a      	ldr	r3, [pc, #40]	; (8013dac <prvAddNewTaskToReadyList+0xbc>)
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d8c:	429a      	cmp	r2, r3
 8013d8e:	d207      	bcs.n	8013da0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013d90:	4b0b      	ldr	r3, [pc, #44]	; (8013dc0 <prvAddNewTaskToReadyList+0xd0>)
 8013d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d96:	601a      	str	r2, [r3, #0]
 8013d98:	f3bf 8f4f 	dsb	sy
 8013d9c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013da0:	bf00      	nop
 8013da2:	3708      	adds	r7, #8
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bd80      	pop	{r7, pc}
 8013da8:	2000496c 	.word	0x2000496c
 8013dac:	2000486c 	.word	0x2000486c
 8013db0:	20004978 	.word	0x20004978
 8013db4:	20004988 	.word	0x20004988
 8013db8:	20004974 	.word	0x20004974
 8013dbc:	20004870 	.word	0x20004870
 8013dc0:	e000ed04 	.word	0xe000ed04

08013dc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b084      	sub	sp, #16
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013dcc:	2300      	movs	r3, #0
 8013dce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d017      	beq.n	8013e06 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013dd6:	4b13      	ldr	r3, [pc, #76]	; (8013e24 <vTaskDelay+0x60>)
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d00a      	beq.n	8013df4 <vTaskDelay+0x30>
	__asm volatile
 8013dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013de2:	f383 8811 	msr	BASEPRI, r3
 8013de6:	f3bf 8f6f 	isb	sy
 8013dea:	f3bf 8f4f 	dsb	sy
 8013dee:	60bb      	str	r3, [r7, #8]
}
 8013df0:	bf00      	nop
 8013df2:	e7fe      	b.n	8013df2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013df4:	f000 f87a 	bl	8013eec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013df8:	2100      	movs	r1, #0
 8013dfa:	6878      	ldr	r0, [r7, #4]
 8013dfc:	f000 fea2 	bl	8014b44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013e00:	f000 f882 	bl	8013f08 <xTaskResumeAll>
 8013e04:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d107      	bne.n	8013e1c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8013e0c:	4b06      	ldr	r3, [pc, #24]	; (8013e28 <vTaskDelay+0x64>)
 8013e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e12:	601a      	str	r2, [r3, #0]
 8013e14:	f3bf 8f4f 	dsb	sy
 8013e18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013e1c:	bf00      	nop
 8013e1e:	3710      	adds	r7, #16
 8013e20:	46bd      	mov	sp, r7
 8013e22:	bd80      	pop	{r7, pc}
 8013e24:	20004994 	.word	0x20004994
 8013e28:	e000ed04 	.word	0xe000ed04

08013e2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b08a      	sub	sp, #40	; 0x28
 8013e30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013e32:	2300      	movs	r3, #0
 8013e34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013e36:	2300      	movs	r3, #0
 8013e38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013e3a:	463a      	mov	r2, r7
 8013e3c:	1d39      	adds	r1, r7, #4
 8013e3e:	f107 0308 	add.w	r3, r7, #8
 8013e42:	4618      	mov	r0, r3
 8013e44:	f7ee fc40 	bl	80026c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013e48:	6839      	ldr	r1, [r7, #0]
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	68ba      	ldr	r2, [r7, #8]
 8013e4e:	9202      	str	r2, [sp, #8]
 8013e50:	9301      	str	r3, [sp, #4]
 8013e52:	2300      	movs	r3, #0
 8013e54:	9300      	str	r3, [sp, #0]
 8013e56:	2300      	movs	r3, #0
 8013e58:	460a      	mov	r2, r1
 8013e5a:	491e      	ldr	r1, [pc, #120]	; (8013ed4 <vTaskStartScheduler+0xa8>)
 8013e5c:	481e      	ldr	r0, [pc, #120]	; (8013ed8 <vTaskStartScheduler+0xac>)
 8013e5e:	f7ff fe1d 	bl	8013a9c <xTaskCreateStatic>
 8013e62:	4603      	mov	r3, r0
 8013e64:	4a1d      	ldr	r2, [pc, #116]	; (8013edc <vTaskStartScheduler+0xb0>)
 8013e66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013e68:	4b1c      	ldr	r3, [pc, #112]	; (8013edc <vTaskStartScheduler+0xb0>)
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d002      	beq.n	8013e76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013e70:	2301      	movs	r3, #1
 8013e72:	617b      	str	r3, [r7, #20]
 8013e74:	e001      	b.n	8013e7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013e76:	2300      	movs	r3, #0
 8013e78:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013e7a:	697b      	ldr	r3, [r7, #20]
 8013e7c:	2b01      	cmp	r3, #1
 8013e7e:	d116      	bne.n	8013eae <vTaskStartScheduler+0x82>
	__asm volatile
 8013e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e84:	f383 8811 	msr	BASEPRI, r3
 8013e88:	f3bf 8f6f 	isb	sy
 8013e8c:	f3bf 8f4f 	dsb	sy
 8013e90:	613b      	str	r3, [r7, #16]
}
 8013e92:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013e94:	4b12      	ldr	r3, [pc, #72]	; (8013ee0 <vTaskStartScheduler+0xb4>)
 8013e96:	f04f 32ff 	mov.w	r2, #4294967295
 8013e9a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013e9c:	4b11      	ldr	r3, [pc, #68]	; (8013ee4 <vTaskStartScheduler+0xb8>)
 8013e9e:	2201      	movs	r2, #1
 8013ea0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013ea2:	4b11      	ldr	r3, [pc, #68]	; (8013ee8 <vTaskStartScheduler+0xbc>)
 8013ea4:	2200      	movs	r2, #0
 8013ea6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013ea8:	f000 ff3a 	bl	8014d20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013eac:	e00e      	b.n	8013ecc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013eae:	697b      	ldr	r3, [r7, #20]
 8013eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013eb4:	d10a      	bne.n	8013ecc <vTaskStartScheduler+0xa0>
	__asm volatile
 8013eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eba:	f383 8811 	msr	BASEPRI, r3
 8013ebe:	f3bf 8f6f 	isb	sy
 8013ec2:	f3bf 8f4f 	dsb	sy
 8013ec6:	60fb      	str	r3, [r7, #12]
}
 8013ec8:	bf00      	nop
 8013eca:	e7fe      	b.n	8013eca <vTaskStartScheduler+0x9e>
}
 8013ecc:	bf00      	nop
 8013ece:	3718      	adds	r7, #24
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	bd80      	pop	{r7, pc}
 8013ed4:	0801c49c 	.word	0x0801c49c
 8013ed8:	0801447d 	.word	0x0801447d
 8013edc:	20004990 	.word	0x20004990
 8013ee0:	2000498c 	.word	0x2000498c
 8013ee4:	20004978 	.word	0x20004978
 8013ee8:	20004970 	.word	0x20004970

08013eec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013eec:	b480      	push	{r7}
 8013eee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013ef0:	4b04      	ldr	r3, [pc, #16]	; (8013f04 <vTaskSuspendAll+0x18>)
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	3301      	adds	r3, #1
 8013ef6:	4a03      	ldr	r2, [pc, #12]	; (8013f04 <vTaskSuspendAll+0x18>)
 8013ef8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013efa:	bf00      	nop
 8013efc:	46bd      	mov	sp, r7
 8013efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f02:	4770      	bx	lr
 8013f04:	20004994 	.word	0x20004994

08013f08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b084      	sub	sp, #16
 8013f0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013f0e:	2300      	movs	r3, #0
 8013f10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013f12:	2300      	movs	r3, #0
 8013f14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013f16:	4b41      	ldr	r3, [pc, #260]	; (801401c <xTaskResumeAll+0x114>)
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d10a      	bne.n	8013f34 <xTaskResumeAll+0x2c>
	__asm volatile
 8013f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f22:	f383 8811 	msr	BASEPRI, r3
 8013f26:	f3bf 8f6f 	isb	sy
 8013f2a:	f3bf 8f4f 	dsb	sy
 8013f2e:	603b      	str	r3, [r7, #0]
}
 8013f30:	bf00      	nop
 8013f32:	e7fe      	b.n	8013f32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013f34:	f000 ff96 	bl	8014e64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013f38:	4b38      	ldr	r3, [pc, #224]	; (801401c <xTaskResumeAll+0x114>)
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	3b01      	subs	r3, #1
 8013f3e:	4a37      	ldr	r2, [pc, #220]	; (801401c <xTaskResumeAll+0x114>)
 8013f40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013f42:	4b36      	ldr	r3, [pc, #216]	; (801401c <xTaskResumeAll+0x114>)
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d161      	bne.n	801400e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013f4a:	4b35      	ldr	r3, [pc, #212]	; (8014020 <xTaskResumeAll+0x118>)
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d05d      	beq.n	801400e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013f52:	e02e      	b.n	8013fb2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f54:	4b33      	ldr	r3, [pc, #204]	; (8014024 <xTaskResumeAll+0x11c>)
 8013f56:	68db      	ldr	r3, [r3, #12]
 8013f58:	68db      	ldr	r3, [r3, #12]
 8013f5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	3318      	adds	r3, #24
 8013f60:	4618      	mov	r0, r3
 8013f62:	f7fe ffde 	bl	8012f22 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	3304      	adds	r3, #4
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f7fe ffd9 	bl	8012f22 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f74:	2201      	movs	r2, #1
 8013f76:	409a      	lsls	r2, r3
 8013f78:	4b2b      	ldr	r3, [pc, #172]	; (8014028 <xTaskResumeAll+0x120>)
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	4313      	orrs	r3, r2
 8013f7e:	4a2a      	ldr	r2, [pc, #168]	; (8014028 <xTaskResumeAll+0x120>)
 8013f80:	6013      	str	r3, [r2, #0]
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f86:	4613      	mov	r3, r2
 8013f88:	009b      	lsls	r3, r3, #2
 8013f8a:	4413      	add	r3, r2
 8013f8c:	009b      	lsls	r3, r3, #2
 8013f8e:	4a27      	ldr	r2, [pc, #156]	; (801402c <xTaskResumeAll+0x124>)
 8013f90:	441a      	add	r2, r3
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	3304      	adds	r3, #4
 8013f96:	4619      	mov	r1, r3
 8013f98:	4610      	mov	r0, r2
 8013f9a:	f7fe ff65 	bl	8012e68 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fa2:	4b23      	ldr	r3, [pc, #140]	; (8014030 <xTaskResumeAll+0x128>)
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fa8:	429a      	cmp	r2, r3
 8013faa:	d302      	bcc.n	8013fb2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8013fac:	4b21      	ldr	r3, [pc, #132]	; (8014034 <xTaskResumeAll+0x12c>)
 8013fae:	2201      	movs	r2, #1
 8013fb0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013fb2:	4b1c      	ldr	r3, [pc, #112]	; (8014024 <xTaskResumeAll+0x11c>)
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d1cc      	bne.n	8013f54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d001      	beq.n	8013fc4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013fc0:	f000 fb12 	bl	80145e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013fc4:	4b1c      	ldr	r3, [pc, #112]	; (8014038 <xTaskResumeAll+0x130>)
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d010      	beq.n	8013ff2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013fd0:	f000 f836 	bl	8014040 <xTaskIncrementTick>
 8013fd4:	4603      	mov	r3, r0
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d002      	beq.n	8013fe0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8013fda:	4b16      	ldr	r3, [pc, #88]	; (8014034 <xTaskResumeAll+0x12c>)
 8013fdc:	2201      	movs	r2, #1
 8013fde:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	3b01      	subs	r3, #1
 8013fe4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d1f1      	bne.n	8013fd0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8013fec:	4b12      	ldr	r3, [pc, #72]	; (8014038 <xTaskResumeAll+0x130>)
 8013fee:	2200      	movs	r2, #0
 8013ff0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013ff2:	4b10      	ldr	r3, [pc, #64]	; (8014034 <xTaskResumeAll+0x12c>)
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d009      	beq.n	801400e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013ffa:	2301      	movs	r3, #1
 8013ffc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013ffe:	4b0f      	ldr	r3, [pc, #60]	; (801403c <xTaskResumeAll+0x134>)
 8014000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014004:	601a      	str	r2, [r3, #0]
 8014006:	f3bf 8f4f 	dsb	sy
 801400a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801400e:	f000 ff59 	bl	8014ec4 <vPortExitCritical>

	return xAlreadyYielded;
 8014012:	68bb      	ldr	r3, [r7, #8]
}
 8014014:	4618      	mov	r0, r3
 8014016:	3710      	adds	r7, #16
 8014018:	46bd      	mov	sp, r7
 801401a:	bd80      	pop	{r7, pc}
 801401c:	20004994 	.word	0x20004994
 8014020:	2000496c 	.word	0x2000496c
 8014024:	2000492c 	.word	0x2000492c
 8014028:	20004974 	.word	0x20004974
 801402c:	20004870 	.word	0x20004870
 8014030:	2000486c 	.word	0x2000486c
 8014034:	20004980 	.word	0x20004980
 8014038:	2000497c 	.word	0x2000497c
 801403c:	e000ed04 	.word	0xe000ed04

08014040 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014040:	b580      	push	{r7, lr}
 8014042:	b086      	sub	sp, #24
 8014044:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014046:	2300      	movs	r3, #0
 8014048:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801404a:	4b4e      	ldr	r3, [pc, #312]	; (8014184 <xTaskIncrementTick+0x144>)
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	2b00      	cmp	r3, #0
 8014050:	f040 8088 	bne.w	8014164 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014054:	4b4c      	ldr	r3, [pc, #304]	; (8014188 <xTaskIncrementTick+0x148>)
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	3301      	adds	r3, #1
 801405a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801405c:	4a4a      	ldr	r2, [pc, #296]	; (8014188 <xTaskIncrementTick+0x148>)
 801405e:	693b      	ldr	r3, [r7, #16]
 8014060:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014062:	693b      	ldr	r3, [r7, #16]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d120      	bne.n	80140aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014068:	4b48      	ldr	r3, [pc, #288]	; (801418c <xTaskIncrementTick+0x14c>)
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d00a      	beq.n	8014088 <xTaskIncrementTick+0x48>
	__asm volatile
 8014072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014076:	f383 8811 	msr	BASEPRI, r3
 801407a:	f3bf 8f6f 	isb	sy
 801407e:	f3bf 8f4f 	dsb	sy
 8014082:	603b      	str	r3, [r7, #0]
}
 8014084:	bf00      	nop
 8014086:	e7fe      	b.n	8014086 <xTaskIncrementTick+0x46>
 8014088:	4b40      	ldr	r3, [pc, #256]	; (801418c <xTaskIncrementTick+0x14c>)
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	60fb      	str	r3, [r7, #12]
 801408e:	4b40      	ldr	r3, [pc, #256]	; (8014190 <xTaskIncrementTick+0x150>)
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	4a3e      	ldr	r2, [pc, #248]	; (801418c <xTaskIncrementTick+0x14c>)
 8014094:	6013      	str	r3, [r2, #0]
 8014096:	4a3e      	ldr	r2, [pc, #248]	; (8014190 <xTaskIncrementTick+0x150>)
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	6013      	str	r3, [r2, #0]
 801409c:	4b3d      	ldr	r3, [pc, #244]	; (8014194 <xTaskIncrementTick+0x154>)
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	3301      	adds	r3, #1
 80140a2:	4a3c      	ldr	r2, [pc, #240]	; (8014194 <xTaskIncrementTick+0x154>)
 80140a4:	6013      	str	r3, [r2, #0]
 80140a6:	f000 fa9f 	bl	80145e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80140aa:	4b3b      	ldr	r3, [pc, #236]	; (8014198 <xTaskIncrementTick+0x158>)
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	693a      	ldr	r2, [r7, #16]
 80140b0:	429a      	cmp	r2, r3
 80140b2:	d348      	bcc.n	8014146 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80140b4:	4b35      	ldr	r3, [pc, #212]	; (801418c <xTaskIncrementTick+0x14c>)
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d104      	bne.n	80140c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80140be:	4b36      	ldr	r3, [pc, #216]	; (8014198 <xTaskIncrementTick+0x158>)
 80140c0:	f04f 32ff 	mov.w	r2, #4294967295
 80140c4:	601a      	str	r2, [r3, #0]
					break;
 80140c6:	e03e      	b.n	8014146 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80140c8:	4b30      	ldr	r3, [pc, #192]	; (801418c <xTaskIncrementTick+0x14c>)
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	68db      	ldr	r3, [r3, #12]
 80140ce:	68db      	ldr	r3, [r3, #12]
 80140d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80140d2:	68bb      	ldr	r3, [r7, #8]
 80140d4:	685b      	ldr	r3, [r3, #4]
 80140d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80140d8:	693a      	ldr	r2, [r7, #16]
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	429a      	cmp	r2, r3
 80140de:	d203      	bcs.n	80140e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80140e0:	4a2d      	ldr	r2, [pc, #180]	; (8014198 <xTaskIncrementTick+0x158>)
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80140e6:	e02e      	b.n	8014146 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80140e8:	68bb      	ldr	r3, [r7, #8]
 80140ea:	3304      	adds	r3, #4
 80140ec:	4618      	mov	r0, r3
 80140ee:	f7fe ff18 	bl	8012f22 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80140f2:	68bb      	ldr	r3, [r7, #8]
 80140f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d004      	beq.n	8014104 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80140fa:	68bb      	ldr	r3, [r7, #8]
 80140fc:	3318      	adds	r3, #24
 80140fe:	4618      	mov	r0, r3
 8014100:	f7fe ff0f 	bl	8012f22 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014104:	68bb      	ldr	r3, [r7, #8]
 8014106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014108:	2201      	movs	r2, #1
 801410a:	409a      	lsls	r2, r3
 801410c:	4b23      	ldr	r3, [pc, #140]	; (801419c <xTaskIncrementTick+0x15c>)
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	4313      	orrs	r3, r2
 8014112:	4a22      	ldr	r2, [pc, #136]	; (801419c <xTaskIncrementTick+0x15c>)
 8014114:	6013      	str	r3, [r2, #0]
 8014116:	68bb      	ldr	r3, [r7, #8]
 8014118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801411a:	4613      	mov	r3, r2
 801411c:	009b      	lsls	r3, r3, #2
 801411e:	4413      	add	r3, r2
 8014120:	009b      	lsls	r3, r3, #2
 8014122:	4a1f      	ldr	r2, [pc, #124]	; (80141a0 <xTaskIncrementTick+0x160>)
 8014124:	441a      	add	r2, r3
 8014126:	68bb      	ldr	r3, [r7, #8]
 8014128:	3304      	adds	r3, #4
 801412a:	4619      	mov	r1, r3
 801412c:	4610      	mov	r0, r2
 801412e:	f7fe fe9b 	bl	8012e68 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014132:	68bb      	ldr	r3, [r7, #8]
 8014134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014136:	4b1b      	ldr	r3, [pc, #108]	; (80141a4 <xTaskIncrementTick+0x164>)
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801413c:	429a      	cmp	r2, r3
 801413e:	d3b9      	bcc.n	80140b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014140:	2301      	movs	r3, #1
 8014142:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014144:	e7b6      	b.n	80140b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014146:	4b17      	ldr	r3, [pc, #92]	; (80141a4 <xTaskIncrementTick+0x164>)
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801414c:	4914      	ldr	r1, [pc, #80]	; (80141a0 <xTaskIncrementTick+0x160>)
 801414e:	4613      	mov	r3, r2
 8014150:	009b      	lsls	r3, r3, #2
 8014152:	4413      	add	r3, r2
 8014154:	009b      	lsls	r3, r3, #2
 8014156:	440b      	add	r3, r1
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	2b01      	cmp	r3, #1
 801415c:	d907      	bls.n	801416e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 801415e:	2301      	movs	r3, #1
 8014160:	617b      	str	r3, [r7, #20]
 8014162:	e004      	b.n	801416e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8014164:	4b10      	ldr	r3, [pc, #64]	; (80141a8 <xTaskIncrementTick+0x168>)
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	3301      	adds	r3, #1
 801416a:	4a0f      	ldr	r2, [pc, #60]	; (80141a8 <xTaskIncrementTick+0x168>)
 801416c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801416e:	4b0f      	ldr	r3, [pc, #60]	; (80141ac <xTaskIncrementTick+0x16c>)
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d001      	beq.n	801417a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8014176:	2301      	movs	r3, #1
 8014178:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801417a:	697b      	ldr	r3, [r7, #20]
}
 801417c:	4618      	mov	r0, r3
 801417e:	3718      	adds	r7, #24
 8014180:	46bd      	mov	sp, r7
 8014182:	bd80      	pop	{r7, pc}
 8014184:	20004994 	.word	0x20004994
 8014188:	20004970 	.word	0x20004970
 801418c:	20004924 	.word	0x20004924
 8014190:	20004928 	.word	0x20004928
 8014194:	20004984 	.word	0x20004984
 8014198:	2000498c 	.word	0x2000498c
 801419c:	20004974 	.word	0x20004974
 80141a0:	20004870 	.word	0x20004870
 80141a4:	2000486c 	.word	0x2000486c
 80141a8:	2000497c 	.word	0x2000497c
 80141ac:	20004980 	.word	0x20004980

080141b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80141b0:	b480      	push	{r7}
 80141b2:	b087      	sub	sp, #28
 80141b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80141b6:	4b27      	ldr	r3, [pc, #156]	; (8014254 <vTaskSwitchContext+0xa4>)
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d003      	beq.n	80141c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80141be:	4b26      	ldr	r3, [pc, #152]	; (8014258 <vTaskSwitchContext+0xa8>)
 80141c0:	2201      	movs	r2, #1
 80141c2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80141c4:	e03f      	b.n	8014246 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80141c6:	4b24      	ldr	r3, [pc, #144]	; (8014258 <vTaskSwitchContext+0xa8>)
 80141c8:	2200      	movs	r2, #0
 80141ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80141cc:	4b23      	ldr	r3, [pc, #140]	; (801425c <vTaskSwitchContext+0xac>)
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	fab3 f383 	clz	r3, r3
 80141d8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80141da:	7afb      	ldrb	r3, [r7, #11]
 80141dc:	f1c3 031f 	rsb	r3, r3, #31
 80141e0:	617b      	str	r3, [r7, #20]
 80141e2:	491f      	ldr	r1, [pc, #124]	; (8014260 <vTaskSwitchContext+0xb0>)
 80141e4:	697a      	ldr	r2, [r7, #20]
 80141e6:	4613      	mov	r3, r2
 80141e8:	009b      	lsls	r3, r3, #2
 80141ea:	4413      	add	r3, r2
 80141ec:	009b      	lsls	r3, r3, #2
 80141ee:	440b      	add	r3, r1
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d10a      	bne.n	801420c <vTaskSwitchContext+0x5c>
	__asm volatile
 80141f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141fa:	f383 8811 	msr	BASEPRI, r3
 80141fe:	f3bf 8f6f 	isb	sy
 8014202:	f3bf 8f4f 	dsb	sy
 8014206:	607b      	str	r3, [r7, #4]
}
 8014208:	bf00      	nop
 801420a:	e7fe      	b.n	801420a <vTaskSwitchContext+0x5a>
 801420c:	697a      	ldr	r2, [r7, #20]
 801420e:	4613      	mov	r3, r2
 8014210:	009b      	lsls	r3, r3, #2
 8014212:	4413      	add	r3, r2
 8014214:	009b      	lsls	r3, r3, #2
 8014216:	4a12      	ldr	r2, [pc, #72]	; (8014260 <vTaskSwitchContext+0xb0>)
 8014218:	4413      	add	r3, r2
 801421a:	613b      	str	r3, [r7, #16]
 801421c:	693b      	ldr	r3, [r7, #16]
 801421e:	685b      	ldr	r3, [r3, #4]
 8014220:	685a      	ldr	r2, [r3, #4]
 8014222:	693b      	ldr	r3, [r7, #16]
 8014224:	605a      	str	r2, [r3, #4]
 8014226:	693b      	ldr	r3, [r7, #16]
 8014228:	685a      	ldr	r2, [r3, #4]
 801422a:	693b      	ldr	r3, [r7, #16]
 801422c:	3308      	adds	r3, #8
 801422e:	429a      	cmp	r2, r3
 8014230:	d104      	bne.n	801423c <vTaskSwitchContext+0x8c>
 8014232:	693b      	ldr	r3, [r7, #16]
 8014234:	685b      	ldr	r3, [r3, #4]
 8014236:	685a      	ldr	r2, [r3, #4]
 8014238:	693b      	ldr	r3, [r7, #16]
 801423a:	605a      	str	r2, [r3, #4]
 801423c:	693b      	ldr	r3, [r7, #16]
 801423e:	685b      	ldr	r3, [r3, #4]
 8014240:	68db      	ldr	r3, [r3, #12]
 8014242:	4a08      	ldr	r2, [pc, #32]	; (8014264 <vTaskSwitchContext+0xb4>)
 8014244:	6013      	str	r3, [r2, #0]
}
 8014246:	bf00      	nop
 8014248:	371c      	adds	r7, #28
 801424a:	46bd      	mov	sp, r7
 801424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014250:	4770      	bx	lr
 8014252:	bf00      	nop
 8014254:	20004994 	.word	0x20004994
 8014258:	20004980 	.word	0x20004980
 801425c:	20004974 	.word	0x20004974
 8014260:	20004870 	.word	0x20004870
 8014264:	2000486c 	.word	0x2000486c

08014268 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014268:	b580      	push	{r7, lr}
 801426a:	b084      	sub	sp, #16
 801426c:	af00      	add	r7, sp, #0
 801426e:	6078      	str	r0, [r7, #4]
 8014270:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d10a      	bne.n	801428e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014278:	f04f 0350 	mov.w	r3, #80	; 0x50
 801427c:	f383 8811 	msr	BASEPRI, r3
 8014280:	f3bf 8f6f 	isb	sy
 8014284:	f3bf 8f4f 	dsb	sy
 8014288:	60fb      	str	r3, [r7, #12]
}
 801428a:	bf00      	nop
 801428c:	e7fe      	b.n	801428c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801428e:	4b07      	ldr	r3, [pc, #28]	; (80142ac <vTaskPlaceOnEventList+0x44>)
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	3318      	adds	r3, #24
 8014294:	4619      	mov	r1, r3
 8014296:	6878      	ldr	r0, [r7, #4]
 8014298:	f7fe fe0a 	bl	8012eb0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801429c:	2101      	movs	r1, #1
 801429e:	6838      	ldr	r0, [r7, #0]
 80142a0:	f000 fc50 	bl	8014b44 <prvAddCurrentTaskToDelayedList>
}
 80142a4:	bf00      	nop
 80142a6:	3710      	adds	r7, #16
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}
 80142ac:	2000486c 	.word	0x2000486c

080142b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b086      	sub	sp, #24
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	68db      	ldr	r3, [r3, #12]
 80142bc:	68db      	ldr	r3, [r3, #12]
 80142be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80142c0:	693b      	ldr	r3, [r7, #16]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d10a      	bne.n	80142dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80142c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142ca:	f383 8811 	msr	BASEPRI, r3
 80142ce:	f3bf 8f6f 	isb	sy
 80142d2:	f3bf 8f4f 	dsb	sy
 80142d6:	60fb      	str	r3, [r7, #12]
}
 80142d8:	bf00      	nop
 80142da:	e7fe      	b.n	80142da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80142dc:	693b      	ldr	r3, [r7, #16]
 80142de:	3318      	adds	r3, #24
 80142e0:	4618      	mov	r0, r3
 80142e2:	f7fe fe1e 	bl	8012f22 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80142e6:	4b1d      	ldr	r3, [pc, #116]	; (801435c <xTaskRemoveFromEventList+0xac>)
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d11c      	bne.n	8014328 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80142ee:	693b      	ldr	r3, [r7, #16]
 80142f0:	3304      	adds	r3, #4
 80142f2:	4618      	mov	r0, r3
 80142f4:	f7fe fe15 	bl	8012f22 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80142f8:	693b      	ldr	r3, [r7, #16]
 80142fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142fc:	2201      	movs	r2, #1
 80142fe:	409a      	lsls	r2, r3
 8014300:	4b17      	ldr	r3, [pc, #92]	; (8014360 <xTaskRemoveFromEventList+0xb0>)
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	4313      	orrs	r3, r2
 8014306:	4a16      	ldr	r2, [pc, #88]	; (8014360 <xTaskRemoveFromEventList+0xb0>)
 8014308:	6013      	str	r3, [r2, #0]
 801430a:	693b      	ldr	r3, [r7, #16]
 801430c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801430e:	4613      	mov	r3, r2
 8014310:	009b      	lsls	r3, r3, #2
 8014312:	4413      	add	r3, r2
 8014314:	009b      	lsls	r3, r3, #2
 8014316:	4a13      	ldr	r2, [pc, #76]	; (8014364 <xTaskRemoveFromEventList+0xb4>)
 8014318:	441a      	add	r2, r3
 801431a:	693b      	ldr	r3, [r7, #16]
 801431c:	3304      	adds	r3, #4
 801431e:	4619      	mov	r1, r3
 8014320:	4610      	mov	r0, r2
 8014322:	f7fe fda1 	bl	8012e68 <vListInsertEnd>
 8014326:	e005      	b.n	8014334 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014328:	693b      	ldr	r3, [r7, #16]
 801432a:	3318      	adds	r3, #24
 801432c:	4619      	mov	r1, r3
 801432e:	480e      	ldr	r0, [pc, #56]	; (8014368 <xTaskRemoveFromEventList+0xb8>)
 8014330:	f7fe fd9a 	bl	8012e68 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014334:	693b      	ldr	r3, [r7, #16]
 8014336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014338:	4b0c      	ldr	r3, [pc, #48]	; (801436c <xTaskRemoveFromEventList+0xbc>)
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801433e:	429a      	cmp	r2, r3
 8014340:	d905      	bls.n	801434e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014342:	2301      	movs	r3, #1
 8014344:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014346:	4b0a      	ldr	r3, [pc, #40]	; (8014370 <xTaskRemoveFromEventList+0xc0>)
 8014348:	2201      	movs	r2, #1
 801434a:	601a      	str	r2, [r3, #0]
 801434c:	e001      	b.n	8014352 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801434e:	2300      	movs	r3, #0
 8014350:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014352:	697b      	ldr	r3, [r7, #20]
}
 8014354:	4618      	mov	r0, r3
 8014356:	3718      	adds	r7, #24
 8014358:	46bd      	mov	sp, r7
 801435a:	bd80      	pop	{r7, pc}
 801435c:	20004994 	.word	0x20004994
 8014360:	20004974 	.word	0x20004974
 8014364:	20004870 	.word	0x20004870
 8014368:	2000492c 	.word	0x2000492c
 801436c:	2000486c 	.word	0x2000486c
 8014370:	20004980 	.word	0x20004980

08014374 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014374:	b480      	push	{r7}
 8014376:	b083      	sub	sp, #12
 8014378:	af00      	add	r7, sp, #0
 801437a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801437c:	4b06      	ldr	r3, [pc, #24]	; (8014398 <vTaskInternalSetTimeOutState+0x24>)
 801437e:	681a      	ldr	r2, [r3, #0]
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014384:	4b05      	ldr	r3, [pc, #20]	; (801439c <vTaskInternalSetTimeOutState+0x28>)
 8014386:	681a      	ldr	r2, [r3, #0]
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	605a      	str	r2, [r3, #4]
}
 801438c:	bf00      	nop
 801438e:	370c      	adds	r7, #12
 8014390:	46bd      	mov	sp, r7
 8014392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014396:	4770      	bx	lr
 8014398:	20004984 	.word	0x20004984
 801439c:	20004970 	.word	0x20004970

080143a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b088      	sub	sp, #32
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	6078      	str	r0, [r7, #4]
 80143a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d10a      	bne.n	80143c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80143b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143b4:	f383 8811 	msr	BASEPRI, r3
 80143b8:	f3bf 8f6f 	isb	sy
 80143bc:	f3bf 8f4f 	dsb	sy
 80143c0:	613b      	str	r3, [r7, #16]
}
 80143c2:	bf00      	nop
 80143c4:	e7fe      	b.n	80143c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80143c6:	683b      	ldr	r3, [r7, #0]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d10a      	bne.n	80143e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80143cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143d0:	f383 8811 	msr	BASEPRI, r3
 80143d4:	f3bf 8f6f 	isb	sy
 80143d8:	f3bf 8f4f 	dsb	sy
 80143dc:	60fb      	str	r3, [r7, #12]
}
 80143de:	bf00      	nop
 80143e0:	e7fe      	b.n	80143e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80143e2:	f000 fd3f 	bl	8014e64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80143e6:	4b1d      	ldr	r3, [pc, #116]	; (801445c <xTaskCheckForTimeOut+0xbc>)
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	685b      	ldr	r3, [r3, #4]
 80143f0:	69ba      	ldr	r2, [r7, #24]
 80143f2:	1ad3      	subs	r3, r2, r3
 80143f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80143f6:	683b      	ldr	r3, [r7, #0]
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143fe:	d102      	bne.n	8014406 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014400:	2300      	movs	r3, #0
 8014402:	61fb      	str	r3, [r7, #28]
 8014404:	e023      	b.n	801444e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	681a      	ldr	r2, [r3, #0]
 801440a:	4b15      	ldr	r3, [pc, #84]	; (8014460 <xTaskCheckForTimeOut+0xc0>)
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	429a      	cmp	r2, r3
 8014410:	d007      	beq.n	8014422 <xTaskCheckForTimeOut+0x82>
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	685b      	ldr	r3, [r3, #4]
 8014416:	69ba      	ldr	r2, [r7, #24]
 8014418:	429a      	cmp	r2, r3
 801441a:	d302      	bcc.n	8014422 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801441c:	2301      	movs	r3, #1
 801441e:	61fb      	str	r3, [r7, #28]
 8014420:	e015      	b.n	801444e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014422:	683b      	ldr	r3, [r7, #0]
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	697a      	ldr	r2, [r7, #20]
 8014428:	429a      	cmp	r2, r3
 801442a:	d20b      	bcs.n	8014444 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801442c:	683b      	ldr	r3, [r7, #0]
 801442e:	681a      	ldr	r2, [r3, #0]
 8014430:	697b      	ldr	r3, [r7, #20]
 8014432:	1ad2      	subs	r2, r2, r3
 8014434:	683b      	ldr	r3, [r7, #0]
 8014436:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014438:	6878      	ldr	r0, [r7, #4]
 801443a:	f7ff ff9b 	bl	8014374 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801443e:	2300      	movs	r3, #0
 8014440:	61fb      	str	r3, [r7, #28]
 8014442:	e004      	b.n	801444e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014444:	683b      	ldr	r3, [r7, #0]
 8014446:	2200      	movs	r2, #0
 8014448:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801444a:	2301      	movs	r3, #1
 801444c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801444e:	f000 fd39 	bl	8014ec4 <vPortExitCritical>

	return xReturn;
 8014452:	69fb      	ldr	r3, [r7, #28]
}
 8014454:	4618      	mov	r0, r3
 8014456:	3720      	adds	r7, #32
 8014458:	46bd      	mov	sp, r7
 801445a:	bd80      	pop	{r7, pc}
 801445c:	20004970 	.word	0x20004970
 8014460:	20004984 	.word	0x20004984

08014464 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014464:	b480      	push	{r7}
 8014466:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014468:	4b03      	ldr	r3, [pc, #12]	; (8014478 <vTaskMissedYield+0x14>)
 801446a:	2201      	movs	r2, #1
 801446c:	601a      	str	r2, [r3, #0]
}
 801446e:	bf00      	nop
 8014470:	46bd      	mov	sp, r7
 8014472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014476:	4770      	bx	lr
 8014478:	20004980 	.word	0x20004980

0801447c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b082      	sub	sp, #8
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014484:	f000 f852 	bl	801452c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014488:	4b06      	ldr	r3, [pc, #24]	; (80144a4 <prvIdleTask+0x28>)
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	2b01      	cmp	r3, #1
 801448e:	d9f9      	bls.n	8014484 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014490:	4b05      	ldr	r3, [pc, #20]	; (80144a8 <prvIdleTask+0x2c>)
 8014492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014496:	601a      	str	r2, [r3, #0]
 8014498:	f3bf 8f4f 	dsb	sy
 801449c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80144a0:	e7f0      	b.n	8014484 <prvIdleTask+0x8>
 80144a2:	bf00      	nop
 80144a4:	20004870 	.word	0x20004870
 80144a8:	e000ed04 	.word	0xe000ed04

080144ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b082      	sub	sp, #8
 80144b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80144b2:	2300      	movs	r3, #0
 80144b4:	607b      	str	r3, [r7, #4]
 80144b6:	e00c      	b.n	80144d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80144b8:	687a      	ldr	r2, [r7, #4]
 80144ba:	4613      	mov	r3, r2
 80144bc:	009b      	lsls	r3, r3, #2
 80144be:	4413      	add	r3, r2
 80144c0:	009b      	lsls	r3, r3, #2
 80144c2:	4a12      	ldr	r2, [pc, #72]	; (801450c <prvInitialiseTaskLists+0x60>)
 80144c4:	4413      	add	r3, r2
 80144c6:	4618      	mov	r0, r3
 80144c8:	f7fe fca1 	bl	8012e0e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	3301      	adds	r3, #1
 80144d0:	607b      	str	r3, [r7, #4]
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	2b06      	cmp	r3, #6
 80144d6:	d9ef      	bls.n	80144b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80144d8:	480d      	ldr	r0, [pc, #52]	; (8014510 <prvInitialiseTaskLists+0x64>)
 80144da:	f7fe fc98 	bl	8012e0e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80144de:	480d      	ldr	r0, [pc, #52]	; (8014514 <prvInitialiseTaskLists+0x68>)
 80144e0:	f7fe fc95 	bl	8012e0e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80144e4:	480c      	ldr	r0, [pc, #48]	; (8014518 <prvInitialiseTaskLists+0x6c>)
 80144e6:	f7fe fc92 	bl	8012e0e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80144ea:	480c      	ldr	r0, [pc, #48]	; (801451c <prvInitialiseTaskLists+0x70>)
 80144ec:	f7fe fc8f 	bl	8012e0e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80144f0:	480b      	ldr	r0, [pc, #44]	; (8014520 <prvInitialiseTaskLists+0x74>)
 80144f2:	f7fe fc8c 	bl	8012e0e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80144f6:	4b0b      	ldr	r3, [pc, #44]	; (8014524 <prvInitialiseTaskLists+0x78>)
 80144f8:	4a05      	ldr	r2, [pc, #20]	; (8014510 <prvInitialiseTaskLists+0x64>)
 80144fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80144fc:	4b0a      	ldr	r3, [pc, #40]	; (8014528 <prvInitialiseTaskLists+0x7c>)
 80144fe:	4a05      	ldr	r2, [pc, #20]	; (8014514 <prvInitialiseTaskLists+0x68>)
 8014500:	601a      	str	r2, [r3, #0]
}
 8014502:	bf00      	nop
 8014504:	3708      	adds	r7, #8
 8014506:	46bd      	mov	sp, r7
 8014508:	bd80      	pop	{r7, pc}
 801450a:	bf00      	nop
 801450c:	20004870 	.word	0x20004870
 8014510:	200048fc 	.word	0x200048fc
 8014514:	20004910 	.word	0x20004910
 8014518:	2000492c 	.word	0x2000492c
 801451c:	20004940 	.word	0x20004940
 8014520:	20004958 	.word	0x20004958
 8014524:	20004924 	.word	0x20004924
 8014528:	20004928 	.word	0x20004928

0801452c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801452c:	b580      	push	{r7, lr}
 801452e:	b082      	sub	sp, #8
 8014530:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014532:	e019      	b.n	8014568 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014534:	f000 fc96 	bl	8014e64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014538:	4b10      	ldr	r3, [pc, #64]	; (801457c <prvCheckTasksWaitingTermination+0x50>)
 801453a:	68db      	ldr	r3, [r3, #12]
 801453c:	68db      	ldr	r3, [r3, #12]
 801453e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	3304      	adds	r3, #4
 8014544:	4618      	mov	r0, r3
 8014546:	f7fe fcec 	bl	8012f22 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801454a:	4b0d      	ldr	r3, [pc, #52]	; (8014580 <prvCheckTasksWaitingTermination+0x54>)
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	3b01      	subs	r3, #1
 8014550:	4a0b      	ldr	r2, [pc, #44]	; (8014580 <prvCheckTasksWaitingTermination+0x54>)
 8014552:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014554:	4b0b      	ldr	r3, [pc, #44]	; (8014584 <prvCheckTasksWaitingTermination+0x58>)
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	3b01      	subs	r3, #1
 801455a:	4a0a      	ldr	r2, [pc, #40]	; (8014584 <prvCheckTasksWaitingTermination+0x58>)
 801455c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801455e:	f000 fcb1 	bl	8014ec4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014562:	6878      	ldr	r0, [r7, #4]
 8014564:	f000 f810 	bl	8014588 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014568:	4b06      	ldr	r3, [pc, #24]	; (8014584 <prvCheckTasksWaitingTermination+0x58>)
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d1e1      	bne.n	8014534 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014570:	bf00      	nop
 8014572:	bf00      	nop
 8014574:	3708      	adds	r7, #8
 8014576:	46bd      	mov	sp, r7
 8014578:	bd80      	pop	{r7, pc}
 801457a:	bf00      	nop
 801457c:	20004940 	.word	0x20004940
 8014580:	2000496c 	.word	0x2000496c
 8014584:	20004954 	.word	0x20004954

08014588 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014588:	b580      	push	{r7, lr}
 801458a:	b084      	sub	sp, #16
 801458c:	af00      	add	r7, sp, #0
 801458e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014596:	2b00      	cmp	r3, #0
 8014598:	d108      	bne.n	80145ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801459e:	4618      	mov	r0, r3
 80145a0:	f000 fe46 	bl	8015230 <vPortFree>
				vPortFree( pxTCB );
 80145a4:	6878      	ldr	r0, [r7, #4]
 80145a6:	f000 fe43 	bl	8015230 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80145aa:	e018      	b.n	80145de <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80145b2:	2b01      	cmp	r3, #1
 80145b4:	d103      	bne.n	80145be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80145b6:	6878      	ldr	r0, [r7, #4]
 80145b8:	f000 fe3a 	bl	8015230 <vPortFree>
	}
 80145bc:	e00f      	b.n	80145de <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80145c4:	2b02      	cmp	r3, #2
 80145c6:	d00a      	beq.n	80145de <prvDeleteTCB+0x56>
	__asm volatile
 80145c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145cc:	f383 8811 	msr	BASEPRI, r3
 80145d0:	f3bf 8f6f 	isb	sy
 80145d4:	f3bf 8f4f 	dsb	sy
 80145d8:	60fb      	str	r3, [r7, #12]
}
 80145da:	bf00      	nop
 80145dc:	e7fe      	b.n	80145dc <prvDeleteTCB+0x54>
	}
 80145de:	bf00      	nop
 80145e0:	3710      	adds	r7, #16
 80145e2:	46bd      	mov	sp, r7
 80145e4:	bd80      	pop	{r7, pc}
	...

080145e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80145e8:	b480      	push	{r7}
 80145ea:	b083      	sub	sp, #12
 80145ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80145ee:	4b0c      	ldr	r3, [pc, #48]	; (8014620 <prvResetNextTaskUnblockTime+0x38>)
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d104      	bne.n	8014602 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80145f8:	4b0a      	ldr	r3, [pc, #40]	; (8014624 <prvResetNextTaskUnblockTime+0x3c>)
 80145fa:	f04f 32ff 	mov.w	r2, #4294967295
 80145fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014600:	e008      	b.n	8014614 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014602:	4b07      	ldr	r3, [pc, #28]	; (8014620 <prvResetNextTaskUnblockTime+0x38>)
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	68db      	ldr	r3, [r3, #12]
 8014608:	68db      	ldr	r3, [r3, #12]
 801460a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	685b      	ldr	r3, [r3, #4]
 8014610:	4a04      	ldr	r2, [pc, #16]	; (8014624 <prvResetNextTaskUnblockTime+0x3c>)
 8014612:	6013      	str	r3, [r2, #0]
}
 8014614:	bf00      	nop
 8014616:	370c      	adds	r7, #12
 8014618:	46bd      	mov	sp, r7
 801461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461e:	4770      	bx	lr
 8014620:	20004924 	.word	0x20004924
 8014624:	2000498c 	.word	0x2000498c

08014628 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014628:	b480      	push	{r7}
 801462a:	b083      	sub	sp, #12
 801462c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801462e:	4b0b      	ldr	r3, [pc, #44]	; (801465c <xTaskGetSchedulerState+0x34>)
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d102      	bne.n	801463c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014636:	2301      	movs	r3, #1
 8014638:	607b      	str	r3, [r7, #4]
 801463a:	e008      	b.n	801464e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801463c:	4b08      	ldr	r3, [pc, #32]	; (8014660 <xTaskGetSchedulerState+0x38>)
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d102      	bne.n	801464a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014644:	2302      	movs	r3, #2
 8014646:	607b      	str	r3, [r7, #4]
 8014648:	e001      	b.n	801464e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801464a:	2300      	movs	r3, #0
 801464c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801464e:	687b      	ldr	r3, [r7, #4]
	}
 8014650:	4618      	mov	r0, r3
 8014652:	370c      	adds	r7, #12
 8014654:	46bd      	mov	sp, r7
 8014656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801465a:	4770      	bx	lr
 801465c:	20004978 	.word	0x20004978
 8014660:	20004994 	.word	0x20004994

08014664 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014664:	b580      	push	{r7, lr}
 8014666:	b086      	sub	sp, #24
 8014668:	af00      	add	r7, sp, #0
 801466a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014670:	2300      	movs	r3, #0
 8014672:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	2b00      	cmp	r3, #0
 8014678:	d06e      	beq.n	8014758 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801467a:	4b3a      	ldr	r3, [pc, #232]	; (8014764 <xTaskPriorityDisinherit+0x100>)
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	693a      	ldr	r2, [r7, #16]
 8014680:	429a      	cmp	r2, r3
 8014682:	d00a      	beq.n	801469a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8014684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014688:	f383 8811 	msr	BASEPRI, r3
 801468c:	f3bf 8f6f 	isb	sy
 8014690:	f3bf 8f4f 	dsb	sy
 8014694:	60fb      	str	r3, [r7, #12]
}
 8014696:	bf00      	nop
 8014698:	e7fe      	b.n	8014698 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801469a:	693b      	ldr	r3, [r7, #16]
 801469c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d10a      	bne.n	80146b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80146a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146a6:	f383 8811 	msr	BASEPRI, r3
 80146aa:	f3bf 8f6f 	isb	sy
 80146ae:	f3bf 8f4f 	dsb	sy
 80146b2:	60bb      	str	r3, [r7, #8]
}
 80146b4:	bf00      	nop
 80146b6:	e7fe      	b.n	80146b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80146b8:	693b      	ldr	r3, [r7, #16]
 80146ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80146bc:	1e5a      	subs	r2, r3, #1
 80146be:	693b      	ldr	r3, [r7, #16]
 80146c0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80146c2:	693b      	ldr	r3, [r7, #16]
 80146c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146c6:	693b      	ldr	r3, [r7, #16]
 80146c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80146ca:	429a      	cmp	r2, r3
 80146cc:	d044      	beq.n	8014758 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80146ce:	693b      	ldr	r3, [r7, #16]
 80146d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d140      	bne.n	8014758 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80146d6:	693b      	ldr	r3, [r7, #16]
 80146d8:	3304      	adds	r3, #4
 80146da:	4618      	mov	r0, r3
 80146dc:	f7fe fc21 	bl	8012f22 <uxListRemove>
 80146e0:	4603      	mov	r3, r0
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d115      	bne.n	8014712 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80146e6:	693b      	ldr	r3, [r7, #16]
 80146e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146ea:	491f      	ldr	r1, [pc, #124]	; (8014768 <xTaskPriorityDisinherit+0x104>)
 80146ec:	4613      	mov	r3, r2
 80146ee:	009b      	lsls	r3, r3, #2
 80146f0:	4413      	add	r3, r2
 80146f2:	009b      	lsls	r3, r3, #2
 80146f4:	440b      	add	r3, r1
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d10a      	bne.n	8014712 <xTaskPriorityDisinherit+0xae>
 80146fc:	693b      	ldr	r3, [r7, #16]
 80146fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014700:	2201      	movs	r2, #1
 8014702:	fa02 f303 	lsl.w	r3, r2, r3
 8014706:	43da      	mvns	r2, r3
 8014708:	4b18      	ldr	r3, [pc, #96]	; (801476c <xTaskPriorityDisinherit+0x108>)
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	4013      	ands	r3, r2
 801470e:	4a17      	ldr	r2, [pc, #92]	; (801476c <xTaskPriorityDisinherit+0x108>)
 8014710:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014712:	693b      	ldr	r3, [r7, #16]
 8014714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014716:	693b      	ldr	r3, [r7, #16]
 8014718:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801471a:	693b      	ldr	r3, [r7, #16]
 801471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801471e:	f1c3 0207 	rsb	r2, r3, #7
 8014722:	693b      	ldr	r3, [r7, #16]
 8014724:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014726:	693b      	ldr	r3, [r7, #16]
 8014728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801472a:	2201      	movs	r2, #1
 801472c:	409a      	lsls	r2, r3
 801472e:	4b0f      	ldr	r3, [pc, #60]	; (801476c <xTaskPriorityDisinherit+0x108>)
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	4313      	orrs	r3, r2
 8014734:	4a0d      	ldr	r2, [pc, #52]	; (801476c <xTaskPriorityDisinherit+0x108>)
 8014736:	6013      	str	r3, [r2, #0]
 8014738:	693b      	ldr	r3, [r7, #16]
 801473a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801473c:	4613      	mov	r3, r2
 801473e:	009b      	lsls	r3, r3, #2
 8014740:	4413      	add	r3, r2
 8014742:	009b      	lsls	r3, r3, #2
 8014744:	4a08      	ldr	r2, [pc, #32]	; (8014768 <xTaskPriorityDisinherit+0x104>)
 8014746:	441a      	add	r2, r3
 8014748:	693b      	ldr	r3, [r7, #16]
 801474a:	3304      	adds	r3, #4
 801474c:	4619      	mov	r1, r3
 801474e:	4610      	mov	r0, r2
 8014750:	f7fe fb8a 	bl	8012e68 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014754:	2301      	movs	r3, #1
 8014756:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014758:	697b      	ldr	r3, [r7, #20]
	}
 801475a:	4618      	mov	r0, r3
 801475c:	3718      	adds	r7, #24
 801475e:	46bd      	mov	sp, r7
 8014760:	bd80      	pop	{r7, pc}
 8014762:	bf00      	nop
 8014764:	2000486c 	.word	0x2000486c
 8014768:	20004870 	.word	0x20004870
 801476c:	20004974 	.word	0x20004974

08014770 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8014770:	b580      	push	{r7, lr}
 8014772:	b086      	sub	sp, #24
 8014774:	af00      	add	r7, sp, #0
 8014776:	60f8      	str	r0, [r7, #12]
 8014778:	60b9      	str	r1, [r7, #8]
 801477a:	607a      	str	r2, [r7, #4]
 801477c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801477e:	f000 fb71 	bl	8014e64 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8014782:	4b26      	ldr	r3, [pc, #152]	; (801481c <xTaskNotifyWait+0xac>)
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801478a:	b2db      	uxtb	r3, r3
 801478c:	2b02      	cmp	r3, #2
 801478e:	d01a      	beq.n	80147c6 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8014790:	4b22      	ldr	r3, [pc, #136]	; (801481c <xTaskNotifyWait+0xac>)
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014796:	68fa      	ldr	r2, [r7, #12]
 8014798:	43d2      	mvns	r2, r2
 801479a:	400a      	ands	r2, r1
 801479c:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801479e:	4b1f      	ldr	r3, [pc, #124]	; (801481c <xTaskNotifyWait+0xac>)
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	2201      	movs	r2, #1
 80147a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80147a8:	683b      	ldr	r3, [r7, #0]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d00b      	beq.n	80147c6 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80147ae:	2101      	movs	r1, #1
 80147b0:	6838      	ldr	r0, [r7, #0]
 80147b2:	f000 f9c7 	bl	8014b44 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80147b6:	4b1a      	ldr	r3, [pc, #104]	; (8014820 <xTaskNotifyWait+0xb0>)
 80147b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80147bc:	601a      	str	r2, [r3, #0]
 80147be:	f3bf 8f4f 	dsb	sy
 80147c2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80147c6:	f000 fb7d 	bl	8014ec4 <vPortExitCritical>

		taskENTER_CRITICAL();
 80147ca:	f000 fb4b 	bl	8014e64 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d004      	beq.n	80147de <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80147d4:	4b11      	ldr	r3, [pc, #68]	; (801481c <xTaskNotifyWait+0xac>)
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80147de:	4b0f      	ldr	r3, [pc, #60]	; (801481c <xTaskNotifyWait+0xac>)
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80147e6:	b2db      	uxtb	r3, r3
 80147e8:	2b02      	cmp	r3, #2
 80147ea:	d002      	beq.n	80147f2 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80147ec:	2300      	movs	r3, #0
 80147ee:	617b      	str	r3, [r7, #20]
 80147f0:	e008      	b.n	8014804 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80147f2:	4b0a      	ldr	r3, [pc, #40]	; (801481c <xTaskNotifyWait+0xac>)
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80147f8:	68ba      	ldr	r2, [r7, #8]
 80147fa:	43d2      	mvns	r2, r2
 80147fc:	400a      	ands	r2, r1
 80147fe:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8014800:	2301      	movs	r3, #1
 8014802:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014804:	4b05      	ldr	r3, [pc, #20]	; (801481c <xTaskNotifyWait+0xac>)
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	2200      	movs	r2, #0
 801480a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 801480e:	f000 fb59 	bl	8014ec4 <vPortExitCritical>

		return xReturn;
 8014812:	697b      	ldr	r3, [r7, #20]
	}
 8014814:	4618      	mov	r0, r3
 8014816:	3718      	adds	r7, #24
 8014818:	46bd      	mov	sp, r7
 801481a:	bd80      	pop	{r7, pc}
 801481c:	2000486c 	.word	0x2000486c
 8014820:	e000ed04 	.word	0xe000ed04

08014824 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8014824:	b580      	push	{r7, lr}
 8014826:	b08a      	sub	sp, #40	; 0x28
 8014828:	af00      	add	r7, sp, #0
 801482a:	60f8      	str	r0, [r7, #12]
 801482c:	60b9      	str	r1, [r7, #8]
 801482e:	603b      	str	r3, [r7, #0]
 8014830:	4613      	mov	r3, r2
 8014832:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8014834:	2301      	movs	r3, #1
 8014836:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d10a      	bne.n	8014854 <xTaskGenericNotify+0x30>
	__asm volatile
 801483e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014842:	f383 8811 	msr	BASEPRI, r3
 8014846:	f3bf 8f6f 	isb	sy
 801484a:	f3bf 8f4f 	dsb	sy
 801484e:	61bb      	str	r3, [r7, #24]
}
 8014850:	bf00      	nop
 8014852:	e7fe      	b.n	8014852 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8014858:	f000 fb04 	bl	8014e64 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801485c:	683b      	ldr	r3, [r7, #0]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d003      	beq.n	801486a <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014862:	6a3b      	ldr	r3, [r7, #32]
 8014864:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014866:	683b      	ldr	r3, [r7, #0]
 8014868:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801486a:	6a3b      	ldr	r3, [r7, #32]
 801486c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014870:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014872:	6a3b      	ldr	r3, [r7, #32]
 8014874:	2202      	movs	r2, #2
 8014876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 801487a:	79fb      	ldrb	r3, [r7, #7]
 801487c:	2b04      	cmp	r3, #4
 801487e:	d828      	bhi.n	80148d2 <xTaskGenericNotify+0xae>
 8014880:	a201      	add	r2, pc, #4	; (adr r2, 8014888 <xTaskGenericNotify+0x64>)
 8014882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014886:	bf00      	nop
 8014888:	080148f3 	.word	0x080148f3
 801488c:	0801489d 	.word	0x0801489d
 8014890:	080148ab 	.word	0x080148ab
 8014894:	080148b7 	.word	0x080148b7
 8014898:	080148bf 	.word	0x080148bf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801489c:	6a3b      	ldr	r3, [r7, #32]
 801489e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80148a0:	68bb      	ldr	r3, [r7, #8]
 80148a2:	431a      	orrs	r2, r3
 80148a4:	6a3b      	ldr	r3, [r7, #32]
 80148a6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80148a8:	e026      	b.n	80148f8 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80148aa:	6a3b      	ldr	r3, [r7, #32]
 80148ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80148ae:	1c5a      	adds	r2, r3, #1
 80148b0:	6a3b      	ldr	r3, [r7, #32]
 80148b2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80148b4:	e020      	b.n	80148f8 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80148b6:	6a3b      	ldr	r3, [r7, #32]
 80148b8:	68ba      	ldr	r2, [r7, #8]
 80148ba:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80148bc:	e01c      	b.n	80148f8 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80148be:	7ffb      	ldrb	r3, [r7, #31]
 80148c0:	2b02      	cmp	r3, #2
 80148c2:	d003      	beq.n	80148cc <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80148c4:	6a3b      	ldr	r3, [r7, #32]
 80148c6:	68ba      	ldr	r2, [r7, #8]
 80148c8:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80148ca:	e015      	b.n	80148f8 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 80148cc:	2300      	movs	r3, #0
 80148ce:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80148d0:	e012      	b.n	80148f8 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80148d2:	6a3b      	ldr	r3, [r7, #32]
 80148d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80148d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148da:	d00c      	beq.n	80148f6 <xTaskGenericNotify+0xd2>
	__asm volatile
 80148dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148e0:	f383 8811 	msr	BASEPRI, r3
 80148e4:	f3bf 8f6f 	isb	sy
 80148e8:	f3bf 8f4f 	dsb	sy
 80148ec:	617b      	str	r3, [r7, #20]
}
 80148ee:	bf00      	nop
 80148f0:	e7fe      	b.n	80148f0 <xTaskGenericNotify+0xcc>
					break;
 80148f2:	bf00      	nop
 80148f4:	e000      	b.n	80148f8 <xTaskGenericNotify+0xd4>

					break;
 80148f6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80148f8:	7ffb      	ldrb	r3, [r7, #31]
 80148fa:	2b01      	cmp	r3, #1
 80148fc:	d139      	bne.n	8014972 <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80148fe:	6a3b      	ldr	r3, [r7, #32]
 8014900:	3304      	adds	r3, #4
 8014902:	4618      	mov	r0, r3
 8014904:	f7fe fb0d 	bl	8012f22 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8014908:	6a3b      	ldr	r3, [r7, #32]
 801490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801490c:	2201      	movs	r2, #1
 801490e:	409a      	lsls	r2, r3
 8014910:	4b1b      	ldr	r3, [pc, #108]	; (8014980 <xTaskGenericNotify+0x15c>)
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	4313      	orrs	r3, r2
 8014916:	4a1a      	ldr	r2, [pc, #104]	; (8014980 <xTaskGenericNotify+0x15c>)
 8014918:	6013      	str	r3, [r2, #0]
 801491a:	6a3b      	ldr	r3, [r7, #32]
 801491c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801491e:	4613      	mov	r3, r2
 8014920:	009b      	lsls	r3, r3, #2
 8014922:	4413      	add	r3, r2
 8014924:	009b      	lsls	r3, r3, #2
 8014926:	4a17      	ldr	r2, [pc, #92]	; (8014984 <xTaskGenericNotify+0x160>)
 8014928:	441a      	add	r2, r3
 801492a:	6a3b      	ldr	r3, [r7, #32]
 801492c:	3304      	adds	r3, #4
 801492e:	4619      	mov	r1, r3
 8014930:	4610      	mov	r0, r2
 8014932:	f7fe fa99 	bl	8012e68 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014936:	6a3b      	ldr	r3, [r7, #32]
 8014938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801493a:	2b00      	cmp	r3, #0
 801493c:	d00a      	beq.n	8014954 <xTaskGenericNotify+0x130>
	__asm volatile
 801493e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014942:	f383 8811 	msr	BASEPRI, r3
 8014946:	f3bf 8f6f 	isb	sy
 801494a:	f3bf 8f4f 	dsb	sy
 801494e:	613b      	str	r3, [r7, #16]
}
 8014950:	bf00      	nop
 8014952:	e7fe      	b.n	8014952 <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014954:	6a3b      	ldr	r3, [r7, #32]
 8014956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014958:	4b0b      	ldr	r3, [pc, #44]	; (8014988 <xTaskGenericNotify+0x164>)
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801495e:	429a      	cmp	r2, r3
 8014960:	d907      	bls.n	8014972 <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8014962:	4b0a      	ldr	r3, [pc, #40]	; (801498c <xTaskGenericNotify+0x168>)
 8014964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014968:	601a      	str	r2, [r3, #0]
 801496a:	f3bf 8f4f 	dsb	sy
 801496e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014972:	f000 faa7 	bl	8014ec4 <vPortExitCritical>

		return xReturn;
 8014976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014978:	4618      	mov	r0, r3
 801497a:	3728      	adds	r7, #40	; 0x28
 801497c:	46bd      	mov	sp, r7
 801497e:	bd80      	pop	{r7, pc}
 8014980:	20004974 	.word	0x20004974
 8014984:	20004870 	.word	0x20004870
 8014988:	2000486c 	.word	0x2000486c
 801498c:	e000ed04 	.word	0xe000ed04

08014990 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014990:	b580      	push	{r7, lr}
 8014992:	b08e      	sub	sp, #56	; 0x38
 8014994:	af00      	add	r7, sp, #0
 8014996:	60f8      	str	r0, [r7, #12]
 8014998:	60b9      	str	r1, [r7, #8]
 801499a:	603b      	str	r3, [r7, #0]
 801499c:	4613      	mov	r3, r2
 801499e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80149a0:	2301      	movs	r3, #1
 80149a2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d10a      	bne.n	80149c0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80149aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149ae:	f383 8811 	msr	BASEPRI, r3
 80149b2:	f3bf 8f6f 	isb	sy
 80149b6:	f3bf 8f4f 	dsb	sy
 80149ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80149bc:	bf00      	nop
 80149be:	e7fe      	b.n	80149be <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80149c0:	f000 fb32 	bl	8015028 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80149c8:	f3ef 8211 	mrs	r2, BASEPRI
 80149cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149d0:	f383 8811 	msr	BASEPRI, r3
 80149d4:	f3bf 8f6f 	isb	sy
 80149d8:	f3bf 8f4f 	dsb	sy
 80149dc:	623a      	str	r2, [r7, #32]
 80149de:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80149e0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80149e2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80149e4:	683b      	ldr	r3, [r7, #0]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d003      	beq.n	80149f2 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80149ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80149ee:	683b      	ldr	r3, [r7, #0]
 80149f0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80149f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80149f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80149fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149fe:	2202      	movs	r2, #2
 8014a00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8014a04:	79fb      	ldrb	r3, [r7, #7]
 8014a06:	2b04      	cmp	r3, #4
 8014a08:	d828      	bhi.n	8014a5c <xTaskGenericNotifyFromISR+0xcc>
 8014a0a:	a201      	add	r2, pc, #4	; (adr r2, 8014a10 <xTaskGenericNotifyFromISR+0x80>)
 8014a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a10:	08014a7d 	.word	0x08014a7d
 8014a14:	08014a25 	.word	0x08014a25
 8014a18:	08014a33 	.word	0x08014a33
 8014a1c:	08014a3f 	.word	0x08014a3f
 8014a20:	08014a47 	.word	0x08014a47
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014a28:	68bb      	ldr	r3, [r7, #8]
 8014a2a:	431a      	orrs	r2, r3
 8014a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a2e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014a30:	e027      	b.n	8014a82 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014a36:	1c5a      	adds	r2, r3, #1
 8014a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a3a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014a3c:	e021      	b.n	8014a82 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8014a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a40:	68ba      	ldr	r2, [r7, #8]
 8014a42:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014a44:	e01d      	b.n	8014a82 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014a46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014a4a:	2b02      	cmp	r3, #2
 8014a4c:	d003      	beq.n	8014a56 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a50:	68ba      	ldr	r2, [r7, #8]
 8014a52:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014a54:	e015      	b.n	8014a82 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8014a56:	2300      	movs	r3, #0
 8014a58:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8014a5a:	e012      	b.n	8014a82 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a64:	d00c      	beq.n	8014a80 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8014a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a6a:	f383 8811 	msr	BASEPRI, r3
 8014a6e:	f3bf 8f6f 	isb	sy
 8014a72:	f3bf 8f4f 	dsb	sy
 8014a76:	61bb      	str	r3, [r7, #24]
}
 8014a78:	bf00      	nop
 8014a7a:	e7fe      	b.n	8014a7a <xTaskGenericNotifyFromISR+0xea>
					break;
 8014a7c:	bf00      	nop
 8014a7e:	e000      	b.n	8014a82 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8014a80:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014a82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014a86:	2b01      	cmp	r3, #1
 8014a88:	d145      	bne.n	8014b16 <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d00a      	beq.n	8014aa8 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8014a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a96:	f383 8811 	msr	BASEPRI, r3
 8014a9a:	f3bf 8f6f 	isb	sy
 8014a9e:	f3bf 8f4f 	dsb	sy
 8014aa2:	617b      	str	r3, [r7, #20]
}
 8014aa4:	bf00      	nop
 8014aa6:	e7fe      	b.n	8014aa6 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014aa8:	4b20      	ldr	r3, [pc, #128]	; (8014b2c <xTaskGenericNotifyFromISR+0x19c>)
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d11c      	bne.n	8014aea <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ab2:	3304      	adds	r3, #4
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	f7fe fa34 	bl	8012f22 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014abe:	2201      	movs	r2, #1
 8014ac0:	409a      	lsls	r2, r3
 8014ac2:	4b1b      	ldr	r3, [pc, #108]	; (8014b30 <xTaskGenericNotifyFromISR+0x1a0>)
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	4313      	orrs	r3, r2
 8014ac8:	4a19      	ldr	r2, [pc, #100]	; (8014b30 <xTaskGenericNotifyFromISR+0x1a0>)
 8014aca:	6013      	str	r3, [r2, #0]
 8014acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ad0:	4613      	mov	r3, r2
 8014ad2:	009b      	lsls	r3, r3, #2
 8014ad4:	4413      	add	r3, r2
 8014ad6:	009b      	lsls	r3, r3, #2
 8014ad8:	4a16      	ldr	r2, [pc, #88]	; (8014b34 <xTaskGenericNotifyFromISR+0x1a4>)
 8014ada:	441a      	add	r2, r3
 8014adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ade:	3304      	adds	r3, #4
 8014ae0:	4619      	mov	r1, r3
 8014ae2:	4610      	mov	r0, r2
 8014ae4:	f7fe f9c0 	bl	8012e68 <vListInsertEnd>
 8014ae8:	e005      	b.n	8014af6 <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aec:	3318      	adds	r3, #24
 8014aee:	4619      	mov	r1, r3
 8014af0:	4811      	ldr	r0, [pc, #68]	; (8014b38 <xTaskGenericNotifyFromISR+0x1a8>)
 8014af2:	f7fe f9b9 	bl	8012e68 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014afa:	4b10      	ldr	r3, [pc, #64]	; (8014b3c <xTaskGenericNotifyFromISR+0x1ac>)
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b00:	429a      	cmp	r2, r3
 8014b02:	d908      	bls.n	8014b16 <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8014b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d002      	beq.n	8014b10 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8014b0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b0c:	2201      	movs	r2, #1
 8014b0e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8014b10:	4b0b      	ldr	r3, [pc, #44]	; (8014b40 <xTaskGenericNotifyFromISR+0x1b0>)
 8014b12:	2201      	movs	r2, #1
 8014b14:	601a      	str	r2, [r3, #0]
 8014b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b18:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014b1a:	693b      	ldr	r3, [r7, #16]
 8014b1c:	f383 8811 	msr	BASEPRI, r3
}
 8014b20:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8014b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8014b24:	4618      	mov	r0, r3
 8014b26:	3738      	adds	r7, #56	; 0x38
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	bd80      	pop	{r7, pc}
 8014b2c:	20004994 	.word	0x20004994
 8014b30:	20004974 	.word	0x20004974
 8014b34:	20004870 	.word	0x20004870
 8014b38:	2000492c 	.word	0x2000492c
 8014b3c:	2000486c 	.word	0x2000486c
 8014b40:	20004980 	.word	0x20004980

08014b44 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014b44:	b580      	push	{r7, lr}
 8014b46:	b084      	sub	sp, #16
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	6078      	str	r0, [r7, #4]
 8014b4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014b4e:	4b29      	ldr	r3, [pc, #164]	; (8014bf4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014b54:	4b28      	ldr	r3, [pc, #160]	; (8014bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	3304      	adds	r3, #4
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	f7fe f9e1 	bl	8012f22 <uxListRemove>
 8014b60:	4603      	mov	r3, r0
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d10b      	bne.n	8014b7e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014b66:	4b24      	ldr	r3, [pc, #144]	; (8014bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b6c:	2201      	movs	r2, #1
 8014b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8014b72:	43da      	mvns	r2, r3
 8014b74:	4b21      	ldr	r3, [pc, #132]	; (8014bfc <prvAddCurrentTaskToDelayedList+0xb8>)
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	4013      	ands	r3, r2
 8014b7a:	4a20      	ldr	r2, [pc, #128]	; (8014bfc <prvAddCurrentTaskToDelayedList+0xb8>)
 8014b7c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b84:	d10a      	bne.n	8014b9c <prvAddCurrentTaskToDelayedList+0x58>
 8014b86:	683b      	ldr	r3, [r7, #0]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d007      	beq.n	8014b9c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014b8c:	4b1a      	ldr	r3, [pc, #104]	; (8014bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	3304      	adds	r3, #4
 8014b92:	4619      	mov	r1, r3
 8014b94:	481a      	ldr	r0, [pc, #104]	; (8014c00 <prvAddCurrentTaskToDelayedList+0xbc>)
 8014b96:	f7fe f967 	bl	8012e68 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014b9a:	e026      	b.n	8014bea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014b9c:	68fa      	ldr	r2, [r7, #12]
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	4413      	add	r3, r2
 8014ba2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014ba4:	4b14      	ldr	r3, [pc, #80]	; (8014bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	68ba      	ldr	r2, [r7, #8]
 8014baa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014bac:	68ba      	ldr	r2, [r7, #8]
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	429a      	cmp	r2, r3
 8014bb2:	d209      	bcs.n	8014bc8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014bb4:	4b13      	ldr	r3, [pc, #76]	; (8014c04 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014bb6:	681a      	ldr	r2, [r3, #0]
 8014bb8:	4b0f      	ldr	r3, [pc, #60]	; (8014bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	3304      	adds	r3, #4
 8014bbe:	4619      	mov	r1, r3
 8014bc0:	4610      	mov	r0, r2
 8014bc2:	f7fe f975 	bl	8012eb0 <vListInsert>
}
 8014bc6:	e010      	b.n	8014bea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014bc8:	4b0f      	ldr	r3, [pc, #60]	; (8014c08 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014bca:	681a      	ldr	r2, [r3, #0]
 8014bcc:	4b0a      	ldr	r3, [pc, #40]	; (8014bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	3304      	adds	r3, #4
 8014bd2:	4619      	mov	r1, r3
 8014bd4:	4610      	mov	r0, r2
 8014bd6:	f7fe f96b 	bl	8012eb0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014bda:	4b0c      	ldr	r3, [pc, #48]	; (8014c0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	68ba      	ldr	r2, [r7, #8]
 8014be0:	429a      	cmp	r2, r3
 8014be2:	d202      	bcs.n	8014bea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014be4:	4a09      	ldr	r2, [pc, #36]	; (8014c0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8014be6:	68bb      	ldr	r3, [r7, #8]
 8014be8:	6013      	str	r3, [r2, #0]
}
 8014bea:	bf00      	nop
 8014bec:	3710      	adds	r7, #16
 8014bee:	46bd      	mov	sp, r7
 8014bf0:	bd80      	pop	{r7, pc}
 8014bf2:	bf00      	nop
 8014bf4:	20004970 	.word	0x20004970
 8014bf8:	2000486c 	.word	0x2000486c
 8014bfc:	20004974 	.word	0x20004974
 8014c00:	20004958 	.word	0x20004958
 8014c04:	20004928 	.word	0x20004928
 8014c08:	20004924 	.word	0x20004924
 8014c0c:	2000498c 	.word	0x2000498c

08014c10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014c10:	b480      	push	{r7}
 8014c12:	b085      	sub	sp, #20
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	60f8      	str	r0, [r7, #12]
 8014c18:	60b9      	str	r1, [r7, #8]
 8014c1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	3b04      	subs	r3, #4
 8014c20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014c28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	3b04      	subs	r3, #4
 8014c2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014c30:	68bb      	ldr	r3, [r7, #8]
 8014c32:	f023 0201 	bic.w	r2, r3, #1
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	3b04      	subs	r3, #4
 8014c3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014c40:	4a0c      	ldr	r2, [pc, #48]	; (8014c74 <pxPortInitialiseStack+0x64>)
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	3b14      	subs	r3, #20
 8014c4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014c4c:	687a      	ldr	r2, [r7, #4]
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	3b04      	subs	r3, #4
 8014c56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	f06f 0202 	mvn.w	r2, #2
 8014c5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	3b20      	subs	r3, #32
 8014c64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014c66:	68fb      	ldr	r3, [r7, #12]
}
 8014c68:	4618      	mov	r0, r3
 8014c6a:	3714      	adds	r7, #20
 8014c6c:	46bd      	mov	sp, r7
 8014c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c72:	4770      	bx	lr
 8014c74:	08014c79 	.word	0x08014c79

08014c78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014c78:	b480      	push	{r7}
 8014c7a:	b085      	sub	sp, #20
 8014c7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014c7e:	2300      	movs	r3, #0
 8014c80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014c82:	4b12      	ldr	r3, [pc, #72]	; (8014ccc <prvTaskExitError+0x54>)
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c8a:	d00a      	beq.n	8014ca2 <prvTaskExitError+0x2a>
	__asm volatile
 8014c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c90:	f383 8811 	msr	BASEPRI, r3
 8014c94:	f3bf 8f6f 	isb	sy
 8014c98:	f3bf 8f4f 	dsb	sy
 8014c9c:	60fb      	str	r3, [r7, #12]
}
 8014c9e:	bf00      	nop
 8014ca0:	e7fe      	b.n	8014ca0 <prvTaskExitError+0x28>
	__asm volatile
 8014ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ca6:	f383 8811 	msr	BASEPRI, r3
 8014caa:	f3bf 8f6f 	isb	sy
 8014cae:	f3bf 8f4f 	dsb	sy
 8014cb2:	60bb      	str	r3, [r7, #8]
}
 8014cb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014cb6:	bf00      	nop
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d0fc      	beq.n	8014cb8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014cbe:	bf00      	nop
 8014cc0:	bf00      	nop
 8014cc2:	3714      	adds	r7, #20
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cca:	4770      	bx	lr
 8014ccc:	200041a8 	.word	0x200041a8

08014cd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014cd0:	4b07      	ldr	r3, [pc, #28]	; (8014cf0 <pxCurrentTCBConst2>)
 8014cd2:	6819      	ldr	r1, [r3, #0]
 8014cd4:	6808      	ldr	r0, [r1, #0]
 8014cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cda:	f380 8809 	msr	PSP, r0
 8014cde:	f3bf 8f6f 	isb	sy
 8014ce2:	f04f 0000 	mov.w	r0, #0
 8014ce6:	f380 8811 	msr	BASEPRI, r0
 8014cea:	4770      	bx	lr
 8014cec:	f3af 8000 	nop.w

08014cf0 <pxCurrentTCBConst2>:
 8014cf0:	2000486c 	.word	0x2000486c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014cf4:	bf00      	nop
 8014cf6:	bf00      	nop

08014cf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014cf8:	4808      	ldr	r0, [pc, #32]	; (8014d1c <prvPortStartFirstTask+0x24>)
 8014cfa:	6800      	ldr	r0, [r0, #0]
 8014cfc:	6800      	ldr	r0, [r0, #0]
 8014cfe:	f380 8808 	msr	MSP, r0
 8014d02:	f04f 0000 	mov.w	r0, #0
 8014d06:	f380 8814 	msr	CONTROL, r0
 8014d0a:	b662      	cpsie	i
 8014d0c:	b661      	cpsie	f
 8014d0e:	f3bf 8f4f 	dsb	sy
 8014d12:	f3bf 8f6f 	isb	sy
 8014d16:	df00      	svc	0
 8014d18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014d1a:	bf00      	nop
 8014d1c:	e000ed08 	.word	0xe000ed08

08014d20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014d20:	b580      	push	{r7, lr}
 8014d22:	b086      	sub	sp, #24
 8014d24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014d26:	4b46      	ldr	r3, [pc, #280]	; (8014e40 <xPortStartScheduler+0x120>)
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	4a46      	ldr	r2, [pc, #280]	; (8014e44 <xPortStartScheduler+0x124>)
 8014d2c:	4293      	cmp	r3, r2
 8014d2e:	d10a      	bne.n	8014d46 <xPortStartScheduler+0x26>
	__asm volatile
 8014d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d34:	f383 8811 	msr	BASEPRI, r3
 8014d38:	f3bf 8f6f 	isb	sy
 8014d3c:	f3bf 8f4f 	dsb	sy
 8014d40:	613b      	str	r3, [r7, #16]
}
 8014d42:	bf00      	nop
 8014d44:	e7fe      	b.n	8014d44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014d46:	4b3e      	ldr	r3, [pc, #248]	; (8014e40 <xPortStartScheduler+0x120>)
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	4a3f      	ldr	r2, [pc, #252]	; (8014e48 <xPortStartScheduler+0x128>)
 8014d4c:	4293      	cmp	r3, r2
 8014d4e:	d10a      	bne.n	8014d66 <xPortStartScheduler+0x46>
	__asm volatile
 8014d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d54:	f383 8811 	msr	BASEPRI, r3
 8014d58:	f3bf 8f6f 	isb	sy
 8014d5c:	f3bf 8f4f 	dsb	sy
 8014d60:	60fb      	str	r3, [r7, #12]
}
 8014d62:	bf00      	nop
 8014d64:	e7fe      	b.n	8014d64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014d66:	4b39      	ldr	r3, [pc, #228]	; (8014e4c <xPortStartScheduler+0x12c>)
 8014d68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014d6a:	697b      	ldr	r3, [r7, #20]
 8014d6c:	781b      	ldrb	r3, [r3, #0]
 8014d6e:	b2db      	uxtb	r3, r3
 8014d70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014d72:	697b      	ldr	r3, [r7, #20]
 8014d74:	22ff      	movs	r2, #255	; 0xff
 8014d76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014d78:	697b      	ldr	r3, [r7, #20]
 8014d7a:	781b      	ldrb	r3, [r3, #0]
 8014d7c:	b2db      	uxtb	r3, r3
 8014d7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014d80:	78fb      	ldrb	r3, [r7, #3]
 8014d82:	b2db      	uxtb	r3, r3
 8014d84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014d88:	b2da      	uxtb	r2, r3
 8014d8a:	4b31      	ldr	r3, [pc, #196]	; (8014e50 <xPortStartScheduler+0x130>)
 8014d8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014d8e:	4b31      	ldr	r3, [pc, #196]	; (8014e54 <xPortStartScheduler+0x134>)
 8014d90:	2207      	movs	r2, #7
 8014d92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014d94:	e009      	b.n	8014daa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014d96:	4b2f      	ldr	r3, [pc, #188]	; (8014e54 <xPortStartScheduler+0x134>)
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	3b01      	subs	r3, #1
 8014d9c:	4a2d      	ldr	r2, [pc, #180]	; (8014e54 <xPortStartScheduler+0x134>)
 8014d9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014da0:	78fb      	ldrb	r3, [r7, #3]
 8014da2:	b2db      	uxtb	r3, r3
 8014da4:	005b      	lsls	r3, r3, #1
 8014da6:	b2db      	uxtb	r3, r3
 8014da8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014daa:	78fb      	ldrb	r3, [r7, #3]
 8014dac:	b2db      	uxtb	r3, r3
 8014dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014db2:	2b80      	cmp	r3, #128	; 0x80
 8014db4:	d0ef      	beq.n	8014d96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014db6:	4b27      	ldr	r3, [pc, #156]	; (8014e54 <xPortStartScheduler+0x134>)
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	f1c3 0307 	rsb	r3, r3, #7
 8014dbe:	2b04      	cmp	r3, #4
 8014dc0:	d00a      	beq.n	8014dd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8014dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dc6:	f383 8811 	msr	BASEPRI, r3
 8014dca:	f3bf 8f6f 	isb	sy
 8014dce:	f3bf 8f4f 	dsb	sy
 8014dd2:	60bb      	str	r3, [r7, #8]
}
 8014dd4:	bf00      	nop
 8014dd6:	e7fe      	b.n	8014dd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014dd8:	4b1e      	ldr	r3, [pc, #120]	; (8014e54 <xPortStartScheduler+0x134>)
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	021b      	lsls	r3, r3, #8
 8014dde:	4a1d      	ldr	r2, [pc, #116]	; (8014e54 <xPortStartScheduler+0x134>)
 8014de0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014de2:	4b1c      	ldr	r3, [pc, #112]	; (8014e54 <xPortStartScheduler+0x134>)
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014dea:	4a1a      	ldr	r2, [pc, #104]	; (8014e54 <xPortStartScheduler+0x134>)
 8014dec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	b2da      	uxtb	r2, r3
 8014df2:	697b      	ldr	r3, [r7, #20]
 8014df4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014df6:	4b18      	ldr	r3, [pc, #96]	; (8014e58 <xPortStartScheduler+0x138>)
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	4a17      	ldr	r2, [pc, #92]	; (8014e58 <xPortStartScheduler+0x138>)
 8014dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014e00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014e02:	4b15      	ldr	r3, [pc, #84]	; (8014e58 <xPortStartScheduler+0x138>)
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	4a14      	ldr	r2, [pc, #80]	; (8014e58 <xPortStartScheduler+0x138>)
 8014e08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014e0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014e0e:	f000 f8dd 	bl	8014fcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014e12:	4b12      	ldr	r3, [pc, #72]	; (8014e5c <xPortStartScheduler+0x13c>)
 8014e14:	2200      	movs	r2, #0
 8014e16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014e18:	f000 f8fc 	bl	8015014 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014e1c:	4b10      	ldr	r3, [pc, #64]	; (8014e60 <xPortStartScheduler+0x140>)
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	4a0f      	ldr	r2, [pc, #60]	; (8014e60 <xPortStartScheduler+0x140>)
 8014e22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014e26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014e28:	f7ff ff66 	bl	8014cf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014e2c:	f7ff f9c0 	bl	80141b0 <vTaskSwitchContext>
	prvTaskExitError();
 8014e30:	f7ff ff22 	bl	8014c78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014e34:	2300      	movs	r3, #0
}
 8014e36:	4618      	mov	r0, r3
 8014e38:	3718      	adds	r7, #24
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	bd80      	pop	{r7, pc}
 8014e3e:	bf00      	nop
 8014e40:	e000ed00 	.word	0xe000ed00
 8014e44:	410fc271 	.word	0x410fc271
 8014e48:	410fc270 	.word	0x410fc270
 8014e4c:	e000e400 	.word	0xe000e400
 8014e50:	20004998 	.word	0x20004998
 8014e54:	2000499c 	.word	0x2000499c
 8014e58:	e000ed20 	.word	0xe000ed20
 8014e5c:	200041a8 	.word	0x200041a8
 8014e60:	e000ef34 	.word	0xe000ef34

08014e64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014e64:	b480      	push	{r7}
 8014e66:	b083      	sub	sp, #12
 8014e68:	af00      	add	r7, sp, #0
	__asm volatile
 8014e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e6e:	f383 8811 	msr	BASEPRI, r3
 8014e72:	f3bf 8f6f 	isb	sy
 8014e76:	f3bf 8f4f 	dsb	sy
 8014e7a:	607b      	str	r3, [r7, #4]
}
 8014e7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014e7e:	4b0f      	ldr	r3, [pc, #60]	; (8014ebc <vPortEnterCritical+0x58>)
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	3301      	adds	r3, #1
 8014e84:	4a0d      	ldr	r2, [pc, #52]	; (8014ebc <vPortEnterCritical+0x58>)
 8014e86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014e88:	4b0c      	ldr	r3, [pc, #48]	; (8014ebc <vPortEnterCritical+0x58>)
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	2b01      	cmp	r3, #1
 8014e8e:	d10f      	bne.n	8014eb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014e90:	4b0b      	ldr	r3, [pc, #44]	; (8014ec0 <vPortEnterCritical+0x5c>)
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	b2db      	uxtb	r3, r3
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d00a      	beq.n	8014eb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8014e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e9e:	f383 8811 	msr	BASEPRI, r3
 8014ea2:	f3bf 8f6f 	isb	sy
 8014ea6:	f3bf 8f4f 	dsb	sy
 8014eaa:	603b      	str	r3, [r7, #0]
}
 8014eac:	bf00      	nop
 8014eae:	e7fe      	b.n	8014eae <vPortEnterCritical+0x4a>
	}
}
 8014eb0:	bf00      	nop
 8014eb2:	370c      	adds	r7, #12
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eba:	4770      	bx	lr
 8014ebc:	200041a8 	.word	0x200041a8
 8014ec0:	e000ed04 	.word	0xe000ed04

08014ec4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014ec4:	b480      	push	{r7}
 8014ec6:	b083      	sub	sp, #12
 8014ec8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014eca:	4b12      	ldr	r3, [pc, #72]	; (8014f14 <vPortExitCritical+0x50>)
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d10a      	bne.n	8014ee8 <vPortExitCritical+0x24>
	__asm volatile
 8014ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ed6:	f383 8811 	msr	BASEPRI, r3
 8014eda:	f3bf 8f6f 	isb	sy
 8014ede:	f3bf 8f4f 	dsb	sy
 8014ee2:	607b      	str	r3, [r7, #4]
}
 8014ee4:	bf00      	nop
 8014ee6:	e7fe      	b.n	8014ee6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014ee8:	4b0a      	ldr	r3, [pc, #40]	; (8014f14 <vPortExitCritical+0x50>)
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	3b01      	subs	r3, #1
 8014eee:	4a09      	ldr	r2, [pc, #36]	; (8014f14 <vPortExitCritical+0x50>)
 8014ef0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014ef2:	4b08      	ldr	r3, [pc, #32]	; (8014f14 <vPortExitCritical+0x50>)
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d105      	bne.n	8014f06 <vPortExitCritical+0x42>
 8014efa:	2300      	movs	r3, #0
 8014efc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014efe:	683b      	ldr	r3, [r7, #0]
 8014f00:	f383 8811 	msr	BASEPRI, r3
}
 8014f04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014f06:	bf00      	nop
 8014f08:	370c      	adds	r7, #12
 8014f0a:	46bd      	mov	sp, r7
 8014f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f10:	4770      	bx	lr
 8014f12:	bf00      	nop
 8014f14:	200041a8 	.word	0x200041a8
	...

08014f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014f20:	f3ef 8009 	mrs	r0, PSP
 8014f24:	f3bf 8f6f 	isb	sy
 8014f28:	4b15      	ldr	r3, [pc, #84]	; (8014f80 <pxCurrentTCBConst>)
 8014f2a:	681a      	ldr	r2, [r3, #0]
 8014f2c:	f01e 0f10 	tst.w	lr, #16
 8014f30:	bf08      	it	eq
 8014f32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014f36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f3a:	6010      	str	r0, [r2, #0]
 8014f3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014f40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014f44:	f380 8811 	msr	BASEPRI, r0
 8014f48:	f3bf 8f4f 	dsb	sy
 8014f4c:	f3bf 8f6f 	isb	sy
 8014f50:	f7ff f92e 	bl	80141b0 <vTaskSwitchContext>
 8014f54:	f04f 0000 	mov.w	r0, #0
 8014f58:	f380 8811 	msr	BASEPRI, r0
 8014f5c:	bc09      	pop	{r0, r3}
 8014f5e:	6819      	ldr	r1, [r3, #0]
 8014f60:	6808      	ldr	r0, [r1, #0]
 8014f62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f66:	f01e 0f10 	tst.w	lr, #16
 8014f6a:	bf08      	it	eq
 8014f6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014f70:	f380 8809 	msr	PSP, r0
 8014f74:	f3bf 8f6f 	isb	sy
 8014f78:	4770      	bx	lr
 8014f7a:	bf00      	nop
 8014f7c:	f3af 8000 	nop.w

08014f80 <pxCurrentTCBConst>:
 8014f80:	2000486c 	.word	0x2000486c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014f84:	bf00      	nop
 8014f86:	bf00      	nop

08014f88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	b082      	sub	sp, #8
 8014f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8014f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f92:	f383 8811 	msr	BASEPRI, r3
 8014f96:	f3bf 8f6f 	isb	sy
 8014f9a:	f3bf 8f4f 	dsb	sy
 8014f9e:	607b      	str	r3, [r7, #4]
}
 8014fa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014fa2:	f7ff f84d 	bl	8014040 <xTaskIncrementTick>
 8014fa6:	4603      	mov	r3, r0
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d003      	beq.n	8014fb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014fac:	4b06      	ldr	r3, [pc, #24]	; (8014fc8 <SysTick_Handler+0x40>)
 8014fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014fb2:	601a      	str	r2, [r3, #0]
 8014fb4:	2300      	movs	r3, #0
 8014fb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014fb8:	683b      	ldr	r3, [r7, #0]
 8014fba:	f383 8811 	msr	BASEPRI, r3
}
 8014fbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014fc0:	bf00      	nop
 8014fc2:	3708      	adds	r7, #8
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	bd80      	pop	{r7, pc}
 8014fc8:	e000ed04 	.word	0xe000ed04

08014fcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014fcc:	b480      	push	{r7}
 8014fce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014fd0:	4b0b      	ldr	r3, [pc, #44]	; (8015000 <vPortSetupTimerInterrupt+0x34>)
 8014fd2:	2200      	movs	r2, #0
 8014fd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014fd6:	4b0b      	ldr	r3, [pc, #44]	; (8015004 <vPortSetupTimerInterrupt+0x38>)
 8014fd8:	2200      	movs	r2, #0
 8014fda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014fdc:	4b0a      	ldr	r3, [pc, #40]	; (8015008 <vPortSetupTimerInterrupt+0x3c>)
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	4a0a      	ldr	r2, [pc, #40]	; (801500c <vPortSetupTimerInterrupt+0x40>)
 8014fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8014fe6:	099b      	lsrs	r3, r3, #6
 8014fe8:	4a09      	ldr	r2, [pc, #36]	; (8015010 <vPortSetupTimerInterrupt+0x44>)
 8014fea:	3b01      	subs	r3, #1
 8014fec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014fee:	4b04      	ldr	r3, [pc, #16]	; (8015000 <vPortSetupTimerInterrupt+0x34>)
 8014ff0:	2207      	movs	r2, #7
 8014ff2:	601a      	str	r2, [r3, #0]
}
 8014ff4:	bf00      	nop
 8014ff6:	46bd      	mov	sp, r7
 8014ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ffc:	4770      	bx	lr
 8014ffe:	bf00      	nop
 8015000:	e000e010 	.word	0xe000e010
 8015004:	e000e018 	.word	0xe000e018
 8015008:	2000408c 	.word	0x2000408c
 801500c:	10624dd3 	.word	0x10624dd3
 8015010:	e000e014 	.word	0xe000e014

08015014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015014:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015024 <vPortEnableVFP+0x10>
 8015018:	6801      	ldr	r1, [r0, #0]
 801501a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801501e:	6001      	str	r1, [r0, #0]
 8015020:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015022:	bf00      	nop
 8015024:	e000ed88 	.word	0xe000ed88

08015028 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015028:	b480      	push	{r7}
 801502a:	b085      	sub	sp, #20
 801502c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801502e:	f3ef 8305 	mrs	r3, IPSR
 8015032:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	2b0f      	cmp	r3, #15
 8015038:	d914      	bls.n	8015064 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801503a:	4a17      	ldr	r2, [pc, #92]	; (8015098 <vPortValidateInterruptPriority+0x70>)
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	4413      	add	r3, r2
 8015040:	781b      	ldrb	r3, [r3, #0]
 8015042:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015044:	4b15      	ldr	r3, [pc, #84]	; (801509c <vPortValidateInterruptPriority+0x74>)
 8015046:	781b      	ldrb	r3, [r3, #0]
 8015048:	7afa      	ldrb	r2, [r7, #11]
 801504a:	429a      	cmp	r2, r3
 801504c:	d20a      	bcs.n	8015064 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015052:	f383 8811 	msr	BASEPRI, r3
 8015056:	f3bf 8f6f 	isb	sy
 801505a:	f3bf 8f4f 	dsb	sy
 801505e:	607b      	str	r3, [r7, #4]
}
 8015060:	bf00      	nop
 8015062:	e7fe      	b.n	8015062 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015064:	4b0e      	ldr	r3, [pc, #56]	; (80150a0 <vPortValidateInterruptPriority+0x78>)
 8015066:	681b      	ldr	r3, [r3, #0]
 8015068:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801506c:	4b0d      	ldr	r3, [pc, #52]	; (80150a4 <vPortValidateInterruptPriority+0x7c>)
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	429a      	cmp	r2, r3
 8015072:	d90a      	bls.n	801508a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015078:	f383 8811 	msr	BASEPRI, r3
 801507c:	f3bf 8f6f 	isb	sy
 8015080:	f3bf 8f4f 	dsb	sy
 8015084:	603b      	str	r3, [r7, #0]
}
 8015086:	bf00      	nop
 8015088:	e7fe      	b.n	8015088 <vPortValidateInterruptPriority+0x60>
	}
 801508a:	bf00      	nop
 801508c:	3714      	adds	r7, #20
 801508e:	46bd      	mov	sp, r7
 8015090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015094:	4770      	bx	lr
 8015096:	bf00      	nop
 8015098:	e000e3f0 	.word	0xe000e3f0
 801509c:	20004998 	.word	0x20004998
 80150a0:	e000ed0c 	.word	0xe000ed0c
 80150a4:	2000499c 	.word	0x2000499c

080150a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b08a      	sub	sp, #40	; 0x28
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80150b0:	2300      	movs	r3, #0
 80150b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80150b4:	f7fe ff1a 	bl	8013eec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80150b8:	4b58      	ldr	r3, [pc, #352]	; (801521c <pvPortMalloc+0x174>)
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d101      	bne.n	80150c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80150c0:	f000 f910 	bl	80152e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80150c4:	4b56      	ldr	r3, [pc, #344]	; (8015220 <pvPortMalloc+0x178>)
 80150c6:	681a      	ldr	r2, [r3, #0]
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	4013      	ands	r3, r2
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	f040 808e 	bne.w	80151ee <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d01d      	beq.n	8015114 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80150d8:	2208      	movs	r2, #8
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	4413      	add	r3, r2
 80150de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	f003 0307 	and.w	r3, r3, #7
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d014      	beq.n	8015114 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	f023 0307 	bic.w	r3, r3, #7
 80150f0:	3308      	adds	r3, #8
 80150f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	f003 0307 	and.w	r3, r3, #7
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d00a      	beq.n	8015114 <pvPortMalloc+0x6c>
	__asm volatile
 80150fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015102:	f383 8811 	msr	BASEPRI, r3
 8015106:	f3bf 8f6f 	isb	sy
 801510a:	f3bf 8f4f 	dsb	sy
 801510e:	617b      	str	r3, [r7, #20]
}
 8015110:	bf00      	nop
 8015112:	e7fe      	b.n	8015112 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d069      	beq.n	80151ee <pvPortMalloc+0x146>
 801511a:	4b42      	ldr	r3, [pc, #264]	; (8015224 <pvPortMalloc+0x17c>)
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	687a      	ldr	r2, [r7, #4]
 8015120:	429a      	cmp	r2, r3
 8015122:	d864      	bhi.n	80151ee <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015124:	4b40      	ldr	r3, [pc, #256]	; (8015228 <pvPortMalloc+0x180>)
 8015126:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015128:	4b3f      	ldr	r3, [pc, #252]	; (8015228 <pvPortMalloc+0x180>)
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801512e:	e004      	b.n	801513a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015132:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801513c:	685b      	ldr	r3, [r3, #4]
 801513e:	687a      	ldr	r2, [r7, #4]
 8015140:	429a      	cmp	r2, r3
 8015142:	d903      	bls.n	801514c <pvPortMalloc+0xa4>
 8015144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	2b00      	cmp	r3, #0
 801514a:	d1f1      	bne.n	8015130 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801514c:	4b33      	ldr	r3, [pc, #204]	; (801521c <pvPortMalloc+0x174>)
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015152:	429a      	cmp	r2, r3
 8015154:	d04b      	beq.n	80151ee <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015156:	6a3b      	ldr	r3, [r7, #32]
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	2208      	movs	r2, #8
 801515c:	4413      	add	r3, r2
 801515e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015162:	681a      	ldr	r2, [r3, #0]
 8015164:	6a3b      	ldr	r3, [r7, #32]
 8015166:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801516a:	685a      	ldr	r2, [r3, #4]
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	1ad2      	subs	r2, r2, r3
 8015170:	2308      	movs	r3, #8
 8015172:	005b      	lsls	r3, r3, #1
 8015174:	429a      	cmp	r2, r3
 8015176:	d91f      	bls.n	80151b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	4413      	add	r3, r2
 801517e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015180:	69bb      	ldr	r3, [r7, #24]
 8015182:	f003 0307 	and.w	r3, r3, #7
 8015186:	2b00      	cmp	r3, #0
 8015188:	d00a      	beq.n	80151a0 <pvPortMalloc+0xf8>
	__asm volatile
 801518a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801518e:	f383 8811 	msr	BASEPRI, r3
 8015192:	f3bf 8f6f 	isb	sy
 8015196:	f3bf 8f4f 	dsb	sy
 801519a:	613b      	str	r3, [r7, #16]
}
 801519c:	bf00      	nop
 801519e:	e7fe      	b.n	801519e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80151a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151a2:	685a      	ldr	r2, [r3, #4]
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	1ad2      	subs	r2, r2, r3
 80151a8:	69bb      	ldr	r3, [r7, #24]
 80151aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80151ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ae:	687a      	ldr	r2, [r7, #4]
 80151b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80151b2:	69b8      	ldr	r0, [r7, #24]
 80151b4:	f000 f8f8 	bl	80153a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80151b8:	4b1a      	ldr	r3, [pc, #104]	; (8015224 <pvPortMalloc+0x17c>)
 80151ba:	681a      	ldr	r2, [r3, #0]
 80151bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151be:	685b      	ldr	r3, [r3, #4]
 80151c0:	1ad3      	subs	r3, r2, r3
 80151c2:	4a18      	ldr	r2, [pc, #96]	; (8015224 <pvPortMalloc+0x17c>)
 80151c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80151c6:	4b17      	ldr	r3, [pc, #92]	; (8015224 <pvPortMalloc+0x17c>)
 80151c8:	681a      	ldr	r2, [r3, #0]
 80151ca:	4b18      	ldr	r3, [pc, #96]	; (801522c <pvPortMalloc+0x184>)
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	429a      	cmp	r2, r3
 80151d0:	d203      	bcs.n	80151da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80151d2:	4b14      	ldr	r3, [pc, #80]	; (8015224 <pvPortMalloc+0x17c>)
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	4a15      	ldr	r2, [pc, #84]	; (801522c <pvPortMalloc+0x184>)
 80151d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80151da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151dc:	685a      	ldr	r2, [r3, #4]
 80151de:	4b10      	ldr	r3, [pc, #64]	; (8015220 <pvPortMalloc+0x178>)
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	431a      	orrs	r2, r3
 80151e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80151e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ea:	2200      	movs	r2, #0
 80151ec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80151ee:	f7fe fe8b 	bl	8013f08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80151f2:	69fb      	ldr	r3, [r7, #28]
 80151f4:	f003 0307 	and.w	r3, r3, #7
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d00a      	beq.n	8015212 <pvPortMalloc+0x16a>
	__asm volatile
 80151fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015200:	f383 8811 	msr	BASEPRI, r3
 8015204:	f3bf 8f6f 	isb	sy
 8015208:	f3bf 8f4f 	dsb	sy
 801520c:	60fb      	str	r3, [r7, #12]
}
 801520e:	bf00      	nop
 8015210:	e7fe      	b.n	8015210 <pvPortMalloc+0x168>
	return pvReturn;
 8015212:	69fb      	ldr	r3, [r7, #28]
}
 8015214:	4618      	mov	r0, r3
 8015216:	3728      	adds	r7, #40	; 0x28
 8015218:	46bd      	mov	sp, r7
 801521a:	bd80      	pop	{r7, pc}
 801521c:	200085a8 	.word	0x200085a8
 8015220:	200085b4 	.word	0x200085b4
 8015224:	200085ac 	.word	0x200085ac
 8015228:	200085a0 	.word	0x200085a0
 801522c:	200085b0 	.word	0x200085b0

08015230 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015230:	b580      	push	{r7, lr}
 8015232:	b086      	sub	sp, #24
 8015234:	af00      	add	r7, sp, #0
 8015236:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	2b00      	cmp	r3, #0
 8015240:	d048      	beq.n	80152d4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015242:	2308      	movs	r3, #8
 8015244:	425b      	negs	r3, r3
 8015246:	697a      	ldr	r2, [r7, #20]
 8015248:	4413      	add	r3, r2
 801524a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801524c:	697b      	ldr	r3, [r7, #20]
 801524e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015250:	693b      	ldr	r3, [r7, #16]
 8015252:	685a      	ldr	r2, [r3, #4]
 8015254:	4b21      	ldr	r3, [pc, #132]	; (80152dc <vPortFree+0xac>)
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	4013      	ands	r3, r2
 801525a:	2b00      	cmp	r3, #0
 801525c:	d10a      	bne.n	8015274 <vPortFree+0x44>
	__asm volatile
 801525e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015262:	f383 8811 	msr	BASEPRI, r3
 8015266:	f3bf 8f6f 	isb	sy
 801526a:	f3bf 8f4f 	dsb	sy
 801526e:	60fb      	str	r3, [r7, #12]
}
 8015270:	bf00      	nop
 8015272:	e7fe      	b.n	8015272 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015274:	693b      	ldr	r3, [r7, #16]
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d00a      	beq.n	8015292 <vPortFree+0x62>
	__asm volatile
 801527c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015280:	f383 8811 	msr	BASEPRI, r3
 8015284:	f3bf 8f6f 	isb	sy
 8015288:	f3bf 8f4f 	dsb	sy
 801528c:	60bb      	str	r3, [r7, #8]
}
 801528e:	bf00      	nop
 8015290:	e7fe      	b.n	8015290 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015292:	693b      	ldr	r3, [r7, #16]
 8015294:	685a      	ldr	r2, [r3, #4]
 8015296:	4b11      	ldr	r3, [pc, #68]	; (80152dc <vPortFree+0xac>)
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	4013      	ands	r3, r2
 801529c:	2b00      	cmp	r3, #0
 801529e:	d019      	beq.n	80152d4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80152a0:	693b      	ldr	r3, [r7, #16]
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d115      	bne.n	80152d4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80152a8:	693b      	ldr	r3, [r7, #16]
 80152aa:	685a      	ldr	r2, [r3, #4]
 80152ac:	4b0b      	ldr	r3, [pc, #44]	; (80152dc <vPortFree+0xac>)
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	43db      	mvns	r3, r3
 80152b2:	401a      	ands	r2, r3
 80152b4:	693b      	ldr	r3, [r7, #16]
 80152b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80152b8:	f7fe fe18 	bl	8013eec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80152bc:	693b      	ldr	r3, [r7, #16]
 80152be:	685a      	ldr	r2, [r3, #4]
 80152c0:	4b07      	ldr	r3, [pc, #28]	; (80152e0 <vPortFree+0xb0>)
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	4413      	add	r3, r2
 80152c6:	4a06      	ldr	r2, [pc, #24]	; (80152e0 <vPortFree+0xb0>)
 80152c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80152ca:	6938      	ldr	r0, [r7, #16]
 80152cc:	f000 f86c 	bl	80153a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80152d0:	f7fe fe1a 	bl	8013f08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80152d4:	bf00      	nop
 80152d6:	3718      	adds	r7, #24
 80152d8:	46bd      	mov	sp, r7
 80152da:	bd80      	pop	{r7, pc}
 80152dc:	200085b4 	.word	0x200085b4
 80152e0:	200085ac 	.word	0x200085ac

080152e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80152e4:	b480      	push	{r7}
 80152e6:	b085      	sub	sp, #20
 80152e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80152ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80152ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80152f0:	4b27      	ldr	r3, [pc, #156]	; (8015390 <prvHeapInit+0xac>)
 80152f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	f003 0307 	and.w	r3, r3, #7
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d00c      	beq.n	8015318 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	3307      	adds	r3, #7
 8015302:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	f023 0307 	bic.w	r3, r3, #7
 801530a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801530c:	68ba      	ldr	r2, [r7, #8]
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	1ad3      	subs	r3, r2, r3
 8015312:	4a1f      	ldr	r2, [pc, #124]	; (8015390 <prvHeapInit+0xac>)
 8015314:	4413      	add	r3, r2
 8015316:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801531c:	4a1d      	ldr	r2, [pc, #116]	; (8015394 <prvHeapInit+0xb0>)
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015322:	4b1c      	ldr	r3, [pc, #112]	; (8015394 <prvHeapInit+0xb0>)
 8015324:	2200      	movs	r2, #0
 8015326:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	68ba      	ldr	r2, [r7, #8]
 801532c:	4413      	add	r3, r2
 801532e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015330:	2208      	movs	r2, #8
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	1a9b      	subs	r3, r3, r2
 8015336:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	f023 0307 	bic.w	r3, r3, #7
 801533e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	4a15      	ldr	r2, [pc, #84]	; (8015398 <prvHeapInit+0xb4>)
 8015344:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015346:	4b14      	ldr	r3, [pc, #80]	; (8015398 <prvHeapInit+0xb4>)
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	2200      	movs	r2, #0
 801534c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801534e:	4b12      	ldr	r3, [pc, #72]	; (8015398 <prvHeapInit+0xb4>)
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	2200      	movs	r2, #0
 8015354:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801535a:	683b      	ldr	r3, [r7, #0]
 801535c:	68fa      	ldr	r2, [r7, #12]
 801535e:	1ad2      	subs	r2, r2, r3
 8015360:	683b      	ldr	r3, [r7, #0]
 8015362:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015364:	4b0c      	ldr	r3, [pc, #48]	; (8015398 <prvHeapInit+0xb4>)
 8015366:	681a      	ldr	r2, [r3, #0]
 8015368:	683b      	ldr	r3, [r7, #0]
 801536a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801536c:	683b      	ldr	r3, [r7, #0]
 801536e:	685b      	ldr	r3, [r3, #4]
 8015370:	4a0a      	ldr	r2, [pc, #40]	; (801539c <prvHeapInit+0xb8>)
 8015372:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015374:	683b      	ldr	r3, [r7, #0]
 8015376:	685b      	ldr	r3, [r3, #4]
 8015378:	4a09      	ldr	r2, [pc, #36]	; (80153a0 <prvHeapInit+0xbc>)
 801537a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801537c:	4b09      	ldr	r3, [pc, #36]	; (80153a4 <prvHeapInit+0xc0>)
 801537e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015382:	601a      	str	r2, [r3, #0]
}
 8015384:	bf00      	nop
 8015386:	3714      	adds	r7, #20
 8015388:	46bd      	mov	sp, r7
 801538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538e:	4770      	bx	lr
 8015390:	200049a0 	.word	0x200049a0
 8015394:	200085a0 	.word	0x200085a0
 8015398:	200085a8 	.word	0x200085a8
 801539c:	200085b0 	.word	0x200085b0
 80153a0:	200085ac 	.word	0x200085ac
 80153a4:	200085b4 	.word	0x200085b4

080153a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80153a8:	b480      	push	{r7}
 80153aa:	b085      	sub	sp, #20
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80153b0:	4b28      	ldr	r3, [pc, #160]	; (8015454 <prvInsertBlockIntoFreeList+0xac>)
 80153b2:	60fb      	str	r3, [r7, #12]
 80153b4:	e002      	b.n	80153bc <prvInsertBlockIntoFreeList+0x14>
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	60fb      	str	r3, [r7, #12]
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	687a      	ldr	r2, [r7, #4]
 80153c2:	429a      	cmp	r2, r3
 80153c4:	d8f7      	bhi.n	80153b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	685b      	ldr	r3, [r3, #4]
 80153ce:	68ba      	ldr	r2, [r7, #8]
 80153d0:	4413      	add	r3, r2
 80153d2:	687a      	ldr	r2, [r7, #4]
 80153d4:	429a      	cmp	r2, r3
 80153d6:	d108      	bne.n	80153ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	685a      	ldr	r2, [r3, #4]
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	685b      	ldr	r3, [r3, #4]
 80153e0:	441a      	add	r2, r3
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	685b      	ldr	r3, [r3, #4]
 80153f2:	68ba      	ldr	r2, [r7, #8]
 80153f4:	441a      	add	r2, r3
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	429a      	cmp	r2, r3
 80153fc:	d118      	bne.n	8015430 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	681a      	ldr	r2, [r3, #0]
 8015402:	4b15      	ldr	r3, [pc, #84]	; (8015458 <prvInsertBlockIntoFreeList+0xb0>)
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	429a      	cmp	r2, r3
 8015408:	d00d      	beq.n	8015426 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	685a      	ldr	r2, [r3, #4]
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	685b      	ldr	r3, [r3, #4]
 8015414:	441a      	add	r2, r3
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	681a      	ldr	r2, [r3, #0]
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	601a      	str	r2, [r3, #0]
 8015424:	e008      	b.n	8015438 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015426:	4b0c      	ldr	r3, [pc, #48]	; (8015458 <prvInsertBlockIntoFreeList+0xb0>)
 8015428:	681a      	ldr	r2, [r3, #0]
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	601a      	str	r2, [r3, #0]
 801542e:	e003      	b.n	8015438 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	681a      	ldr	r2, [r3, #0]
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015438:	68fa      	ldr	r2, [r7, #12]
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	429a      	cmp	r2, r3
 801543e:	d002      	beq.n	8015446 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	687a      	ldr	r2, [r7, #4]
 8015444:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015446:	bf00      	nop
 8015448:	3714      	adds	r7, #20
 801544a:	46bd      	mov	sp, r7
 801544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015450:	4770      	bx	lr
 8015452:	bf00      	nop
 8015454:	200085a0 	.word	0x200085a0
 8015458:	200085a8 	.word	0x200085a8

0801545c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801545c:	b580      	push	{r7, lr}
 801545e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015460:	2200      	movs	r2, #0
 8015462:	4912      	ldr	r1, [pc, #72]	; (80154ac <MX_USB_DEVICE_Init+0x50>)
 8015464:	4812      	ldr	r0, [pc, #72]	; (80154b0 <MX_USB_DEVICE_Init+0x54>)
 8015466:	f7fc f853 	bl	8011510 <USBD_Init>
 801546a:	4603      	mov	r3, r0
 801546c:	2b00      	cmp	r3, #0
 801546e:	d001      	beq.n	8015474 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015470:	f7f0 fa88 	bl	8005984 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015474:	490f      	ldr	r1, [pc, #60]	; (80154b4 <MX_USB_DEVICE_Init+0x58>)
 8015476:	480e      	ldr	r0, [pc, #56]	; (80154b0 <MX_USB_DEVICE_Init+0x54>)
 8015478:	f7fc f880 	bl	801157c <USBD_RegisterClass>
 801547c:	4603      	mov	r3, r0
 801547e:	2b00      	cmp	r3, #0
 8015480:	d001      	beq.n	8015486 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015482:	f7f0 fa7f 	bl	8005984 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015486:	490c      	ldr	r1, [pc, #48]	; (80154b8 <MX_USB_DEVICE_Init+0x5c>)
 8015488:	4809      	ldr	r0, [pc, #36]	; (80154b0 <MX_USB_DEVICE_Init+0x54>)
 801548a:	f7fb ffa5 	bl	80113d8 <USBD_CDC_RegisterInterface>
 801548e:	4603      	mov	r3, r0
 8015490:	2b00      	cmp	r3, #0
 8015492:	d001      	beq.n	8015498 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015494:	f7f0 fa76 	bl	8005984 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015498:	4805      	ldr	r0, [pc, #20]	; (80154b0 <MX_USB_DEVICE_Init+0x54>)
 801549a:	f7fc f890 	bl	80115be <USBD_Start>
 801549e:	4603      	mov	r3, r0
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d001      	beq.n	80154a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80154a4:	f7f0 fa6e 	bl	8005984 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80154a8:	bf00      	nop
 80154aa:	bd80      	pop	{r7, pc}
 80154ac:	200041c0 	.word	0x200041c0
 80154b0:	20010e9c 	.word	0x20010e9c
 80154b4:	200040a4 	.word	0x200040a4
 80154b8:	200041ac 	.word	0x200041ac

080154bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80154bc:	b580      	push	{r7, lr}
 80154be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80154c0:	2200      	movs	r2, #0
 80154c2:	4905      	ldr	r1, [pc, #20]	; (80154d8 <CDC_Init_FS+0x1c>)
 80154c4:	4805      	ldr	r0, [pc, #20]	; (80154dc <CDC_Init_FS+0x20>)
 80154c6:	f7fb ff9c 	bl	8011402 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80154ca:	4905      	ldr	r1, [pc, #20]	; (80154e0 <CDC_Init_FS+0x24>)
 80154cc:	4803      	ldr	r0, [pc, #12]	; (80154dc <CDC_Init_FS+0x20>)
 80154ce:	f7fb ffb1 	bl	8011434 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80154d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80154d4:	4618      	mov	r0, r3
 80154d6:	bd80      	pop	{r7, pc}
 80154d8:	2001136c 	.word	0x2001136c
 80154dc:	20010e9c 	.word	0x20010e9c
 80154e0:	2001116c 	.word	0x2001116c

080154e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80154e4:	b480      	push	{r7}
 80154e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80154e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80154ea:	4618      	mov	r0, r3
 80154ec:	46bd      	mov	sp, r7
 80154ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f2:	4770      	bx	lr

080154f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80154f4:	b480      	push	{r7}
 80154f6:	b083      	sub	sp, #12
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	4603      	mov	r3, r0
 80154fc:	6039      	str	r1, [r7, #0]
 80154fe:	71fb      	strb	r3, [r7, #7]
 8015500:	4613      	mov	r3, r2
 8015502:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015504:	79fb      	ldrb	r3, [r7, #7]
 8015506:	2b23      	cmp	r3, #35	; 0x23
 8015508:	f200 808c 	bhi.w	8015624 <CDC_Control_FS+0x130>
 801550c:	a201      	add	r2, pc, #4	; (adr r2, 8015514 <CDC_Control_FS+0x20>)
 801550e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015512:	bf00      	nop
 8015514:	08015625 	.word	0x08015625
 8015518:	08015625 	.word	0x08015625
 801551c:	08015625 	.word	0x08015625
 8015520:	08015625 	.word	0x08015625
 8015524:	08015625 	.word	0x08015625
 8015528:	08015625 	.word	0x08015625
 801552c:	08015625 	.word	0x08015625
 8015530:	08015625 	.word	0x08015625
 8015534:	08015625 	.word	0x08015625
 8015538:	08015625 	.word	0x08015625
 801553c:	08015625 	.word	0x08015625
 8015540:	08015625 	.word	0x08015625
 8015544:	08015625 	.word	0x08015625
 8015548:	08015625 	.word	0x08015625
 801554c:	08015625 	.word	0x08015625
 8015550:	08015625 	.word	0x08015625
 8015554:	08015625 	.word	0x08015625
 8015558:	08015625 	.word	0x08015625
 801555c:	08015625 	.word	0x08015625
 8015560:	08015625 	.word	0x08015625
 8015564:	08015625 	.word	0x08015625
 8015568:	08015625 	.word	0x08015625
 801556c:	08015625 	.word	0x08015625
 8015570:	08015625 	.word	0x08015625
 8015574:	08015625 	.word	0x08015625
 8015578:	08015625 	.word	0x08015625
 801557c:	08015625 	.word	0x08015625
 8015580:	08015625 	.word	0x08015625
 8015584:	08015625 	.word	0x08015625
 8015588:	08015625 	.word	0x08015625
 801558c:	08015625 	.word	0x08015625
 8015590:	08015625 	.word	0x08015625
 8015594:	080155a5 	.word	0x080155a5
 8015598:	080155df 	.word	0x080155df
 801559c:	08015625 	.word	0x08015625
 80155a0:	08015625 	.word	0x08015625
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 80155a4:	683b      	ldr	r3, [r7, #0]
 80155a6:	781a      	ldrb	r2, [r3, #0]
 80155a8:	4b22      	ldr	r3, [pc, #136]	; (8015634 <CDC_Control_FS+0x140>)
 80155aa:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 80155ac:	683b      	ldr	r3, [r7, #0]
 80155ae:	785a      	ldrb	r2, [r3, #1]
 80155b0:	4b20      	ldr	r3, [pc, #128]	; (8015634 <CDC_Control_FS+0x140>)
 80155b2:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 80155b4:	683b      	ldr	r3, [r7, #0]
 80155b6:	789a      	ldrb	r2, [r3, #2]
 80155b8:	4b1e      	ldr	r3, [pc, #120]	; (8015634 <CDC_Control_FS+0x140>)
 80155ba:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 80155bc:	683b      	ldr	r3, [r7, #0]
 80155be:	78da      	ldrb	r2, [r3, #3]
 80155c0:	4b1c      	ldr	r3, [pc, #112]	; (8015634 <CDC_Control_FS+0x140>)
 80155c2:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 80155c4:	683b      	ldr	r3, [r7, #0]
 80155c6:	791a      	ldrb	r2, [r3, #4]
 80155c8:	4b1a      	ldr	r3, [pc, #104]	; (8015634 <CDC_Control_FS+0x140>)
 80155ca:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 80155cc:	683b      	ldr	r3, [r7, #0]
 80155ce:	795a      	ldrb	r2, [r3, #5]
 80155d0:	4b18      	ldr	r3, [pc, #96]	; (8015634 <CDC_Control_FS+0x140>)
 80155d2:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 80155d4:	683b      	ldr	r3, [r7, #0]
 80155d6:	799a      	ldrb	r2, [r3, #6]
 80155d8:	4b16      	ldr	r3, [pc, #88]	; (8015634 <CDC_Control_FS+0x140>)
 80155da:	719a      	strb	r2, [r3, #6]
    	break;
 80155dc:	e023      	b.n	8015626 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 80155de:	4b15      	ldr	r3, [pc, #84]	; (8015634 <CDC_Control_FS+0x140>)
 80155e0:	781a      	ldrb	r2, [r3, #0]
 80155e2:	683b      	ldr	r3, [r7, #0]
 80155e4:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 80155e6:	683b      	ldr	r3, [r7, #0]
 80155e8:	3301      	adds	r3, #1
 80155ea:	4a12      	ldr	r2, [pc, #72]	; (8015634 <CDC_Control_FS+0x140>)
 80155ec:	7852      	ldrb	r2, [r2, #1]
 80155ee:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 80155f0:	683b      	ldr	r3, [r7, #0]
 80155f2:	3302      	adds	r3, #2
 80155f4:	4a0f      	ldr	r2, [pc, #60]	; (8015634 <CDC_Control_FS+0x140>)
 80155f6:	7892      	ldrb	r2, [r2, #2]
 80155f8:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 80155fa:	683b      	ldr	r3, [r7, #0]
 80155fc:	3303      	adds	r3, #3
 80155fe:	4a0d      	ldr	r2, [pc, #52]	; (8015634 <CDC_Control_FS+0x140>)
 8015600:	78d2      	ldrb	r2, [r2, #3]
 8015602:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 8015604:	683b      	ldr	r3, [r7, #0]
 8015606:	3304      	adds	r3, #4
 8015608:	4a0a      	ldr	r2, [pc, #40]	; (8015634 <CDC_Control_FS+0x140>)
 801560a:	7912      	ldrb	r2, [r2, #4]
 801560c:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 801560e:	683b      	ldr	r3, [r7, #0]
 8015610:	3305      	adds	r3, #5
 8015612:	4a08      	ldr	r2, [pc, #32]	; (8015634 <CDC_Control_FS+0x140>)
 8015614:	7952      	ldrb	r2, [r2, #5]
 8015616:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 8015618:	683b      	ldr	r3, [r7, #0]
 801561a:	3306      	adds	r3, #6
 801561c:	4a05      	ldr	r2, [pc, #20]	; (8015634 <CDC_Control_FS+0x140>)
 801561e:	7992      	ldrb	r2, [r2, #6]
 8015620:	701a      	strb	r2, [r3, #0]
    break;
 8015622:	e000      	b.n	8015626 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015624:	bf00      	nop
  }

  return (USBD_OK);
 8015626:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015628:	4618      	mov	r0, r3
 801562a:	370c      	adds	r7, #12
 801562c:	46bd      	mov	sp, r7
 801562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015632:	4770      	bx	lr
 8015634:	2001156c 	.word	0x2001156c

08015638 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015638:	b580      	push	{r7, lr}
 801563a:	b082      	sub	sp, #8
 801563c:	af00      	add	r7, sp, #0
 801563e:	6078      	str	r0, [r7, #4]
 8015640:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 8015642:	683b      	ldr	r3, [r7, #0]
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	b29b      	uxth	r3, r3
 8015648:	461a      	mov	r2, r3
 801564a:	6879      	ldr	r1, [r7, #4]
 801564c:	4807      	ldr	r0, [pc, #28]	; (801566c <CDC_Receive_FS+0x34>)
 801564e:	f7f0 fa2b 	bl	8005aa8 <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015652:	6879      	ldr	r1, [r7, #4]
 8015654:	4806      	ldr	r0, [pc, #24]	; (8015670 <CDC_Receive_FS+0x38>)
 8015656:	f7fb feed 	bl	8011434 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801565a:	4805      	ldr	r0, [pc, #20]	; (8015670 <CDC_Receive_FS+0x38>)
 801565c:	f7fb ff2e 	bl	80114bc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015660:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015662:	4618      	mov	r0, r3
 8015664:	3708      	adds	r7, #8
 8015666:	46bd      	mov	sp, r7
 8015668:	bd80      	pop	{r7, pc}
 801566a:	bf00      	nop
 801566c:	20000068 	.word	0x20000068
 8015670:	20010e9c 	.word	0x20010e9c

08015674 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015674:	b580      	push	{r7, lr}
 8015676:	b084      	sub	sp, #16
 8015678:	af00      	add	r7, sp, #0
 801567a:	6078      	str	r0, [r7, #4]
 801567c:	460b      	mov	r3, r1
 801567e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015680:	2300      	movs	r3, #0
 8015682:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015684:	4b0d      	ldr	r3, [pc, #52]	; (80156bc <CDC_Transmit_FS+0x48>)
 8015686:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801568a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801568c:	68bb      	ldr	r3, [r7, #8]
 801568e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015692:	2b00      	cmp	r3, #0
 8015694:	d001      	beq.n	801569a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015696:	2301      	movs	r3, #1
 8015698:	e00b      	b.n	80156b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801569a:	887b      	ldrh	r3, [r7, #2]
 801569c:	461a      	mov	r2, r3
 801569e:	6879      	ldr	r1, [r7, #4]
 80156a0:	4806      	ldr	r0, [pc, #24]	; (80156bc <CDC_Transmit_FS+0x48>)
 80156a2:	f7fb feae 	bl	8011402 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80156a6:	4805      	ldr	r0, [pc, #20]	; (80156bc <CDC_Transmit_FS+0x48>)
 80156a8:	f7fb fed8 	bl	801145c <USBD_CDC_TransmitPacket>
 80156ac:	4603      	mov	r3, r0
 80156ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80156b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80156b2:	4618      	mov	r0, r3
 80156b4:	3710      	adds	r7, #16
 80156b6:	46bd      	mov	sp, r7
 80156b8:	bd80      	pop	{r7, pc}
 80156ba:	bf00      	nop
 80156bc:	20010e9c 	.word	0x20010e9c

080156c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80156c0:	b480      	push	{r7}
 80156c2:	b087      	sub	sp, #28
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	60f8      	str	r0, [r7, #12]
 80156c8:	60b9      	str	r1, [r7, #8]
 80156ca:	4613      	mov	r3, r2
 80156cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80156ce:	2300      	movs	r3, #0
 80156d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80156d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80156d6:	4618      	mov	r0, r3
 80156d8:	371c      	adds	r7, #28
 80156da:	46bd      	mov	sp, r7
 80156dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e0:	4770      	bx	lr
	...

080156e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80156e4:	b480      	push	{r7}
 80156e6:	b083      	sub	sp, #12
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	4603      	mov	r3, r0
 80156ec:	6039      	str	r1, [r7, #0]
 80156ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80156f0:	683b      	ldr	r3, [r7, #0]
 80156f2:	2212      	movs	r2, #18
 80156f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80156f6:	4b03      	ldr	r3, [pc, #12]	; (8015704 <USBD_FS_DeviceDescriptor+0x20>)
}
 80156f8:	4618      	mov	r0, r3
 80156fa:	370c      	adds	r7, #12
 80156fc:	46bd      	mov	sp, r7
 80156fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015702:	4770      	bx	lr
 8015704:	200041dc 	.word	0x200041dc

08015708 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015708:	b480      	push	{r7}
 801570a:	b083      	sub	sp, #12
 801570c:	af00      	add	r7, sp, #0
 801570e:	4603      	mov	r3, r0
 8015710:	6039      	str	r1, [r7, #0]
 8015712:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015714:	683b      	ldr	r3, [r7, #0]
 8015716:	2204      	movs	r2, #4
 8015718:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801571a:	4b03      	ldr	r3, [pc, #12]	; (8015728 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801571c:	4618      	mov	r0, r3
 801571e:	370c      	adds	r7, #12
 8015720:	46bd      	mov	sp, r7
 8015722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015726:	4770      	bx	lr
 8015728:	200041f0 	.word	0x200041f0

0801572c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801572c:	b580      	push	{r7, lr}
 801572e:	b082      	sub	sp, #8
 8015730:	af00      	add	r7, sp, #0
 8015732:	4603      	mov	r3, r0
 8015734:	6039      	str	r1, [r7, #0]
 8015736:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015738:	79fb      	ldrb	r3, [r7, #7]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d105      	bne.n	801574a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801573e:	683a      	ldr	r2, [r7, #0]
 8015740:	4907      	ldr	r1, [pc, #28]	; (8015760 <USBD_FS_ProductStrDescriptor+0x34>)
 8015742:	4808      	ldr	r0, [pc, #32]	; (8015764 <USBD_FS_ProductStrDescriptor+0x38>)
 8015744:	f7fc ff18 	bl	8012578 <USBD_GetString>
 8015748:	e004      	b.n	8015754 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801574a:	683a      	ldr	r2, [r7, #0]
 801574c:	4904      	ldr	r1, [pc, #16]	; (8015760 <USBD_FS_ProductStrDescriptor+0x34>)
 801574e:	4805      	ldr	r0, [pc, #20]	; (8015764 <USBD_FS_ProductStrDescriptor+0x38>)
 8015750:	f7fc ff12 	bl	8012578 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015754:	4b02      	ldr	r3, [pc, #8]	; (8015760 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015756:	4618      	mov	r0, r3
 8015758:	3708      	adds	r7, #8
 801575a:	46bd      	mov	sp, r7
 801575c:	bd80      	pop	{r7, pc}
 801575e:	bf00      	nop
 8015760:	20011574 	.word	0x20011574
 8015764:	0801c4a4 	.word	0x0801c4a4

08015768 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015768:	b580      	push	{r7, lr}
 801576a:	b082      	sub	sp, #8
 801576c:	af00      	add	r7, sp, #0
 801576e:	4603      	mov	r3, r0
 8015770:	6039      	str	r1, [r7, #0]
 8015772:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015774:	683a      	ldr	r2, [r7, #0]
 8015776:	4904      	ldr	r1, [pc, #16]	; (8015788 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015778:	4804      	ldr	r0, [pc, #16]	; (801578c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801577a:	f7fc fefd 	bl	8012578 <USBD_GetString>
  return USBD_StrDesc;
 801577e:	4b02      	ldr	r3, [pc, #8]	; (8015788 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015780:	4618      	mov	r0, r3
 8015782:	3708      	adds	r7, #8
 8015784:	46bd      	mov	sp, r7
 8015786:	bd80      	pop	{r7, pc}
 8015788:	20011574 	.word	0x20011574
 801578c:	0801c4bc 	.word	0x0801c4bc

08015790 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015790:	b580      	push	{r7, lr}
 8015792:	b082      	sub	sp, #8
 8015794:	af00      	add	r7, sp, #0
 8015796:	4603      	mov	r3, r0
 8015798:	6039      	str	r1, [r7, #0]
 801579a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801579c:	683b      	ldr	r3, [r7, #0]
 801579e:	221a      	movs	r2, #26
 80157a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80157a2:	f000 f843 	bl	801582c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80157a6:	4b02      	ldr	r3, [pc, #8]	; (80157b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80157a8:	4618      	mov	r0, r3
 80157aa:	3708      	adds	r7, #8
 80157ac:	46bd      	mov	sp, r7
 80157ae:	bd80      	pop	{r7, pc}
 80157b0:	200041f4 	.word	0x200041f4

080157b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80157b4:	b580      	push	{r7, lr}
 80157b6:	b082      	sub	sp, #8
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	4603      	mov	r3, r0
 80157bc:	6039      	str	r1, [r7, #0]
 80157be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80157c0:	79fb      	ldrb	r3, [r7, #7]
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d105      	bne.n	80157d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80157c6:	683a      	ldr	r2, [r7, #0]
 80157c8:	4907      	ldr	r1, [pc, #28]	; (80157e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80157ca:	4808      	ldr	r0, [pc, #32]	; (80157ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80157cc:	f7fc fed4 	bl	8012578 <USBD_GetString>
 80157d0:	e004      	b.n	80157dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80157d2:	683a      	ldr	r2, [r7, #0]
 80157d4:	4904      	ldr	r1, [pc, #16]	; (80157e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80157d6:	4805      	ldr	r0, [pc, #20]	; (80157ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80157d8:	f7fc fece 	bl	8012578 <USBD_GetString>
  }
  return USBD_StrDesc;
 80157dc:	4b02      	ldr	r3, [pc, #8]	; (80157e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80157de:	4618      	mov	r0, r3
 80157e0:	3708      	adds	r7, #8
 80157e2:	46bd      	mov	sp, r7
 80157e4:	bd80      	pop	{r7, pc}
 80157e6:	bf00      	nop
 80157e8:	20011574 	.word	0x20011574
 80157ec:	0801c4d0 	.word	0x0801c4d0

080157f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80157f0:	b580      	push	{r7, lr}
 80157f2:	b082      	sub	sp, #8
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	4603      	mov	r3, r0
 80157f8:	6039      	str	r1, [r7, #0]
 80157fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80157fc:	79fb      	ldrb	r3, [r7, #7]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d105      	bne.n	801580e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015802:	683a      	ldr	r2, [r7, #0]
 8015804:	4907      	ldr	r1, [pc, #28]	; (8015824 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015806:	4808      	ldr	r0, [pc, #32]	; (8015828 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015808:	f7fc feb6 	bl	8012578 <USBD_GetString>
 801580c:	e004      	b.n	8015818 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801580e:	683a      	ldr	r2, [r7, #0]
 8015810:	4904      	ldr	r1, [pc, #16]	; (8015824 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015812:	4805      	ldr	r0, [pc, #20]	; (8015828 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015814:	f7fc feb0 	bl	8012578 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015818:	4b02      	ldr	r3, [pc, #8]	; (8015824 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801581a:	4618      	mov	r0, r3
 801581c:	3708      	adds	r7, #8
 801581e:	46bd      	mov	sp, r7
 8015820:	bd80      	pop	{r7, pc}
 8015822:	bf00      	nop
 8015824:	20011574 	.word	0x20011574
 8015828:	0801c4dc 	.word	0x0801c4dc

0801582c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801582c:	b580      	push	{r7, lr}
 801582e:	b084      	sub	sp, #16
 8015830:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015832:	4b0f      	ldr	r3, [pc, #60]	; (8015870 <Get_SerialNum+0x44>)
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015838:	4b0e      	ldr	r3, [pc, #56]	; (8015874 <Get_SerialNum+0x48>)
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801583e:	4b0e      	ldr	r3, [pc, #56]	; (8015878 <Get_SerialNum+0x4c>)
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015844:	68fa      	ldr	r2, [r7, #12]
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	4413      	add	r3, r2
 801584a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d009      	beq.n	8015866 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015852:	2208      	movs	r2, #8
 8015854:	4909      	ldr	r1, [pc, #36]	; (801587c <Get_SerialNum+0x50>)
 8015856:	68f8      	ldr	r0, [r7, #12]
 8015858:	f000 f814 	bl	8015884 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801585c:	2204      	movs	r2, #4
 801585e:	4908      	ldr	r1, [pc, #32]	; (8015880 <Get_SerialNum+0x54>)
 8015860:	68b8      	ldr	r0, [r7, #8]
 8015862:	f000 f80f 	bl	8015884 <IntToUnicode>
  }
}
 8015866:	bf00      	nop
 8015868:	3710      	adds	r7, #16
 801586a:	46bd      	mov	sp, r7
 801586c:	bd80      	pop	{r7, pc}
 801586e:	bf00      	nop
 8015870:	1fff7a10 	.word	0x1fff7a10
 8015874:	1fff7a14 	.word	0x1fff7a14
 8015878:	1fff7a18 	.word	0x1fff7a18
 801587c:	200041f6 	.word	0x200041f6
 8015880:	20004206 	.word	0x20004206

08015884 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015884:	b480      	push	{r7}
 8015886:	b087      	sub	sp, #28
 8015888:	af00      	add	r7, sp, #0
 801588a:	60f8      	str	r0, [r7, #12]
 801588c:	60b9      	str	r1, [r7, #8]
 801588e:	4613      	mov	r3, r2
 8015890:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015892:	2300      	movs	r3, #0
 8015894:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015896:	2300      	movs	r3, #0
 8015898:	75fb      	strb	r3, [r7, #23]
 801589a:	e027      	b.n	80158ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	0f1b      	lsrs	r3, r3, #28
 80158a0:	2b09      	cmp	r3, #9
 80158a2:	d80b      	bhi.n	80158bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	0f1b      	lsrs	r3, r3, #28
 80158a8:	b2da      	uxtb	r2, r3
 80158aa:	7dfb      	ldrb	r3, [r7, #23]
 80158ac:	005b      	lsls	r3, r3, #1
 80158ae:	4619      	mov	r1, r3
 80158b0:	68bb      	ldr	r3, [r7, #8]
 80158b2:	440b      	add	r3, r1
 80158b4:	3230      	adds	r2, #48	; 0x30
 80158b6:	b2d2      	uxtb	r2, r2
 80158b8:	701a      	strb	r2, [r3, #0]
 80158ba:	e00a      	b.n	80158d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	0f1b      	lsrs	r3, r3, #28
 80158c0:	b2da      	uxtb	r2, r3
 80158c2:	7dfb      	ldrb	r3, [r7, #23]
 80158c4:	005b      	lsls	r3, r3, #1
 80158c6:	4619      	mov	r1, r3
 80158c8:	68bb      	ldr	r3, [r7, #8]
 80158ca:	440b      	add	r3, r1
 80158cc:	3237      	adds	r2, #55	; 0x37
 80158ce:	b2d2      	uxtb	r2, r2
 80158d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	011b      	lsls	r3, r3, #4
 80158d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80158d8:	7dfb      	ldrb	r3, [r7, #23]
 80158da:	005b      	lsls	r3, r3, #1
 80158dc:	3301      	adds	r3, #1
 80158de:	68ba      	ldr	r2, [r7, #8]
 80158e0:	4413      	add	r3, r2
 80158e2:	2200      	movs	r2, #0
 80158e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80158e6:	7dfb      	ldrb	r3, [r7, #23]
 80158e8:	3301      	adds	r3, #1
 80158ea:	75fb      	strb	r3, [r7, #23]
 80158ec:	7dfa      	ldrb	r2, [r7, #23]
 80158ee:	79fb      	ldrb	r3, [r7, #7]
 80158f0:	429a      	cmp	r2, r3
 80158f2:	d3d3      	bcc.n	801589c <IntToUnicode+0x18>
  }
}
 80158f4:	bf00      	nop
 80158f6:	bf00      	nop
 80158f8:	371c      	adds	r7, #28
 80158fa:	46bd      	mov	sp, r7
 80158fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015900:	4770      	bx	lr
	...

08015904 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015904:	b580      	push	{r7, lr}
 8015906:	b08a      	sub	sp, #40	; 0x28
 8015908:	af00      	add	r7, sp, #0
 801590a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801590c:	f107 0314 	add.w	r3, r7, #20
 8015910:	2200      	movs	r2, #0
 8015912:	601a      	str	r2, [r3, #0]
 8015914:	605a      	str	r2, [r3, #4]
 8015916:	609a      	str	r2, [r3, #8]
 8015918:	60da      	str	r2, [r3, #12]
 801591a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015924:	d13a      	bne.n	801599c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015926:	2300      	movs	r3, #0
 8015928:	613b      	str	r3, [r7, #16]
 801592a:	4b1e      	ldr	r3, [pc, #120]	; (80159a4 <HAL_PCD_MspInit+0xa0>)
 801592c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801592e:	4a1d      	ldr	r2, [pc, #116]	; (80159a4 <HAL_PCD_MspInit+0xa0>)
 8015930:	f043 0301 	orr.w	r3, r3, #1
 8015934:	6313      	str	r3, [r2, #48]	; 0x30
 8015936:	4b1b      	ldr	r3, [pc, #108]	; (80159a4 <HAL_PCD_MspInit+0xa0>)
 8015938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801593a:	f003 0301 	and.w	r3, r3, #1
 801593e:	613b      	str	r3, [r7, #16]
 8015940:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015942:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015948:	2302      	movs	r3, #2
 801594a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801594c:	2300      	movs	r3, #0
 801594e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015950:	2303      	movs	r3, #3
 8015952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015954:	230a      	movs	r3, #10
 8015956:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015958:	f107 0314 	add.w	r3, r7, #20
 801595c:	4619      	mov	r1, r3
 801595e:	4812      	ldr	r0, [pc, #72]	; (80159a8 <HAL_PCD_MspInit+0xa4>)
 8015960:	f7f6 fb4e 	bl	800c000 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015964:	4b0f      	ldr	r3, [pc, #60]	; (80159a4 <HAL_PCD_MspInit+0xa0>)
 8015966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015968:	4a0e      	ldr	r2, [pc, #56]	; (80159a4 <HAL_PCD_MspInit+0xa0>)
 801596a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801596e:	6353      	str	r3, [r2, #52]	; 0x34
 8015970:	2300      	movs	r3, #0
 8015972:	60fb      	str	r3, [r7, #12]
 8015974:	4b0b      	ldr	r3, [pc, #44]	; (80159a4 <HAL_PCD_MspInit+0xa0>)
 8015976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015978:	4a0a      	ldr	r2, [pc, #40]	; (80159a4 <HAL_PCD_MspInit+0xa0>)
 801597a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801597e:	6453      	str	r3, [r2, #68]	; 0x44
 8015980:	4b08      	ldr	r3, [pc, #32]	; (80159a4 <HAL_PCD_MspInit+0xa0>)
 8015982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015984:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015988:	60fb      	str	r3, [r7, #12]
 801598a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801598c:	2200      	movs	r2, #0
 801598e:	2105      	movs	r1, #5
 8015990:	2043      	movs	r0, #67	; 0x43
 8015992:	f7f5 ff6b 	bl	800b86c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015996:	2043      	movs	r0, #67	; 0x43
 8015998:	f7f5 ff84 	bl	800b8a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801599c:	bf00      	nop
 801599e:	3728      	adds	r7, #40	; 0x28
 80159a0:	46bd      	mov	sp, r7
 80159a2:	bd80      	pop	{r7, pc}
 80159a4:	40023800 	.word	0x40023800
 80159a8:	40020000 	.word	0x40020000

080159ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159ac:	b580      	push	{r7, lr}
 80159ae:	b082      	sub	sp, #8
 80159b0:	af00      	add	r7, sp, #0
 80159b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80159c0:	4619      	mov	r1, r3
 80159c2:	4610      	mov	r0, r2
 80159c4:	f7fb fe46 	bl	8011654 <USBD_LL_SetupStage>
}
 80159c8:	bf00      	nop
 80159ca:	3708      	adds	r7, #8
 80159cc:	46bd      	mov	sp, r7
 80159ce:	bd80      	pop	{r7, pc}

080159d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159d0:	b580      	push	{r7, lr}
 80159d2:	b082      	sub	sp, #8
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	6078      	str	r0, [r7, #4]
 80159d8:	460b      	mov	r3, r1
 80159da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80159e2:	78fa      	ldrb	r2, [r7, #3]
 80159e4:	6879      	ldr	r1, [r7, #4]
 80159e6:	4613      	mov	r3, r2
 80159e8:	00db      	lsls	r3, r3, #3
 80159ea:	1a9b      	subs	r3, r3, r2
 80159ec:	009b      	lsls	r3, r3, #2
 80159ee:	440b      	add	r3, r1
 80159f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80159f4:	681a      	ldr	r2, [r3, #0]
 80159f6:	78fb      	ldrb	r3, [r7, #3]
 80159f8:	4619      	mov	r1, r3
 80159fa:	f7fb fe80 	bl	80116fe <USBD_LL_DataOutStage>
}
 80159fe:	bf00      	nop
 8015a00:	3708      	adds	r7, #8
 8015a02:	46bd      	mov	sp, r7
 8015a04:	bd80      	pop	{r7, pc}

08015a06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a06:	b580      	push	{r7, lr}
 8015a08:	b082      	sub	sp, #8
 8015a0a:	af00      	add	r7, sp, #0
 8015a0c:	6078      	str	r0, [r7, #4]
 8015a0e:	460b      	mov	r3, r1
 8015a10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015a18:	78fa      	ldrb	r2, [r7, #3]
 8015a1a:	6879      	ldr	r1, [r7, #4]
 8015a1c:	4613      	mov	r3, r2
 8015a1e:	00db      	lsls	r3, r3, #3
 8015a20:	1a9b      	subs	r3, r3, r2
 8015a22:	009b      	lsls	r3, r3, #2
 8015a24:	440b      	add	r3, r1
 8015a26:	3348      	adds	r3, #72	; 0x48
 8015a28:	681a      	ldr	r2, [r3, #0]
 8015a2a:	78fb      	ldrb	r3, [r7, #3]
 8015a2c:	4619      	mov	r1, r3
 8015a2e:	f7fb fec9 	bl	80117c4 <USBD_LL_DataInStage>
}
 8015a32:	bf00      	nop
 8015a34:	3708      	adds	r7, #8
 8015a36:	46bd      	mov	sp, r7
 8015a38:	bd80      	pop	{r7, pc}

08015a3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a3a:	b580      	push	{r7, lr}
 8015a3c:	b082      	sub	sp, #8
 8015a3e:	af00      	add	r7, sp, #0
 8015a40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015a48:	4618      	mov	r0, r3
 8015a4a:	f7fb ffcd 	bl	80119e8 <USBD_LL_SOF>
}
 8015a4e:	bf00      	nop
 8015a50:	3708      	adds	r7, #8
 8015a52:	46bd      	mov	sp, r7
 8015a54:	bd80      	pop	{r7, pc}

08015a56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a56:	b580      	push	{r7, lr}
 8015a58:	b084      	sub	sp, #16
 8015a5a:	af00      	add	r7, sp, #0
 8015a5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015a5e:	2301      	movs	r3, #1
 8015a60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	68db      	ldr	r3, [r3, #12]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d102      	bne.n	8015a70 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015a6a:	2300      	movs	r3, #0
 8015a6c:	73fb      	strb	r3, [r7, #15]
 8015a6e:	e008      	b.n	8015a82 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	68db      	ldr	r3, [r3, #12]
 8015a74:	2b02      	cmp	r3, #2
 8015a76:	d102      	bne.n	8015a7e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015a78:	2301      	movs	r3, #1
 8015a7a:	73fb      	strb	r3, [r7, #15]
 8015a7c:	e001      	b.n	8015a82 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015a7e:	f7ef ff81 	bl	8005984 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015a88:	7bfa      	ldrb	r2, [r7, #15]
 8015a8a:	4611      	mov	r1, r2
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	f7fb ff70 	bl	8011972 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015a98:	4618      	mov	r0, r3
 8015a9a:	f7fb ff29 	bl	80118f0 <USBD_LL_Reset>
}
 8015a9e:	bf00      	nop
 8015aa0:	3710      	adds	r7, #16
 8015aa2:	46bd      	mov	sp, r7
 8015aa4:	bd80      	pop	{r7, pc}
	...

08015aa8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b082      	sub	sp, #8
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	f7fb ff6b 	bl	8011992 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	687a      	ldr	r2, [r7, #4]
 8015ac8:	6812      	ldr	r2, [r2, #0]
 8015aca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015ace:	f043 0301 	orr.w	r3, r3, #1
 8015ad2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	6a1b      	ldr	r3, [r3, #32]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d005      	beq.n	8015ae8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015adc:	4b04      	ldr	r3, [pc, #16]	; (8015af0 <HAL_PCD_SuspendCallback+0x48>)
 8015ade:	691b      	ldr	r3, [r3, #16]
 8015ae0:	4a03      	ldr	r2, [pc, #12]	; (8015af0 <HAL_PCD_SuspendCallback+0x48>)
 8015ae2:	f043 0306 	orr.w	r3, r3, #6
 8015ae6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015ae8:	bf00      	nop
 8015aea:	3708      	adds	r7, #8
 8015aec:	46bd      	mov	sp, r7
 8015aee:	bd80      	pop	{r7, pc}
 8015af0:	e000ed00 	.word	0xe000ed00

08015af4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015af4:	b580      	push	{r7, lr}
 8015af6:	b082      	sub	sp, #8
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015b02:	4618      	mov	r0, r3
 8015b04:	f7fb ff5a 	bl	80119bc <USBD_LL_Resume>
}
 8015b08:	bf00      	nop
 8015b0a:	3708      	adds	r7, #8
 8015b0c:	46bd      	mov	sp, r7
 8015b0e:	bd80      	pop	{r7, pc}

08015b10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b10:	b580      	push	{r7, lr}
 8015b12:	b082      	sub	sp, #8
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	6078      	str	r0, [r7, #4]
 8015b18:	460b      	mov	r3, r1
 8015b1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015b22:	78fa      	ldrb	r2, [r7, #3]
 8015b24:	4611      	mov	r1, r2
 8015b26:	4618      	mov	r0, r3
 8015b28:	f7fb ff85 	bl	8011a36 <USBD_LL_IsoOUTIncomplete>
}
 8015b2c:	bf00      	nop
 8015b2e:	3708      	adds	r7, #8
 8015b30:	46bd      	mov	sp, r7
 8015b32:	bd80      	pop	{r7, pc}

08015b34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b34:	b580      	push	{r7, lr}
 8015b36:	b082      	sub	sp, #8
 8015b38:	af00      	add	r7, sp, #0
 8015b3a:	6078      	str	r0, [r7, #4]
 8015b3c:	460b      	mov	r3, r1
 8015b3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015b46:	78fa      	ldrb	r2, [r7, #3]
 8015b48:	4611      	mov	r1, r2
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f7fb ff66 	bl	8011a1c <USBD_LL_IsoINIncomplete>
}
 8015b50:	bf00      	nop
 8015b52:	3708      	adds	r7, #8
 8015b54:	46bd      	mov	sp, r7
 8015b56:	bd80      	pop	{r7, pc}

08015b58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b58:	b580      	push	{r7, lr}
 8015b5a:	b082      	sub	sp, #8
 8015b5c:	af00      	add	r7, sp, #0
 8015b5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015b66:	4618      	mov	r0, r3
 8015b68:	f7fb ff72 	bl	8011a50 <USBD_LL_DevConnected>
}
 8015b6c:	bf00      	nop
 8015b6e:	3708      	adds	r7, #8
 8015b70:	46bd      	mov	sp, r7
 8015b72:	bd80      	pop	{r7, pc}

08015b74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b74:	b580      	push	{r7, lr}
 8015b76:	b082      	sub	sp, #8
 8015b78:	af00      	add	r7, sp, #0
 8015b7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015b82:	4618      	mov	r0, r3
 8015b84:	f7fb ff6f 	bl	8011a66 <USBD_LL_DevDisconnected>
}
 8015b88:	bf00      	nop
 8015b8a:	3708      	adds	r7, #8
 8015b8c:	46bd      	mov	sp, r7
 8015b8e:	bd80      	pop	{r7, pc}

08015b90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015b90:	b580      	push	{r7, lr}
 8015b92:	b082      	sub	sp, #8
 8015b94:	af00      	add	r7, sp, #0
 8015b96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	781b      	ldrb	r3, [r3, #0]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d13c      	bne.n	8015c1a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015ba0:	4a20      	ldr	r2, [pc, #128]	; (8015c24 <USBD_LL_Init+0x94>)
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	4a1e      	ldr	r2, [pc, #120]	; (8015c24 <USBD_LL_Init+0x94>)
 8015bac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015bb0:	4b1c      	ldr	r3, [pc, #112]	; (8015c24 <USBD_LL_Init+0x94>)
 8015bb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015bb6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8015bb8:	4b1a      	ldr	r3, [pc, #104]	; (8015c24 <USBD_LL_Init+0x94>)
 8015bba:	2204      	movs	r2, #4
 8015bbc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015bbe:	4b19      	ldr	r3, [pc, #100]	; (8015c24 <USBD_LL_Init+0x94>)
 8015bc0:	2202      	movs	r2, #2
 8015bc2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015bc4:	4b17      	ldr	r3, [pc, #92]	; (8015c24 <USBD_LL_Init+0x94>)
 8015bc6:	2200      	movs	r2, #0
 8015bc8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015bca:	4b16      	ldr	r3, [pc, #88]	; (8015c24 <USBD_LL_Init+0x94>)
 8015bcc:	2202      	movs	r2, #2
 8015bce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015bd0:	4b14      	ldr	r3, [pc, #80]	; (8015c24 <USBD_LL_Init+0x94>)
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015bd6:	4b13      	ldr	r3, [pc, #76]	; (8015c24 <USBD_LL_Init+0x94>)
 8015bd8:	2200      	movs	r2, #0
 8015bda:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015bdc:	4b11      	ldr	r3, [pc, #68]	; (8015c24 <USBD_LL_Init+0x94>)
 8015bde:	2200      	movs	r2, #0
 8015be0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015be2:	4b10      	ldr	r3, [pc, #64]	; (8015c24 <USBD_LL_Init+0x94>)
 8015be4:	2200      	movs	r2, #0
 8015be6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015be8:	4b0e      	ldr	r3, [pc, #56]	; (8015c24 <USBD_LL_Init+0x94>)
 8015bea:	2200      	movs	r2, #0
 8015bec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015bee:	480d      	ldr	r0, [pc, #52]	; (8015c24 <USBD_LL_Init+0x94>)
 8015bf0:	f7f6 fc12 	bl	800c418 <HAL_PCD_Init>
 8015bf4:	4603      	mov	r3, r0
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d001      	beq.n	8015bfe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8015bfa:	f7ef fec3 	bl	8005984 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015bfe:	2180      	movs	r1, #128	; 0x80
 8015c00:	4808      	ldr	r0, [pc, #32]	; (8015c24 <USBD_LL_Init+0x94>)
 8015c02:	f7f7 fd70 	bl	800d6e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015c06:	2240      	movs	r2, #64	; 0x40
 8015c08:	2100      	movs	r1, #0
 8015c0a:	4806      	ldr	r0, [pc, #24]	; (8015c24 <USBD_LL_Init+0x94>)
 8015c0c:	f7f7 fd24 	bl	800d658 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015c10:	2280      	movs	r2, #128	; 0x80
 8015c12:	2101      	movs	r1, #1
 8015c14:	4803      	ldr	r0, [pc, #12]	; (8015c24 <USBD_LL_Init+0x94>)
 8015c16:	f7f7 fd1f 	bl	800d658 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015c1a:	2300      	movs	r3, #0
}
 8015c1c:	4618      	mov	r0, r3
 8015c1e:	3708      	adds	r7, #8
 8015c20:	46bd      	mov	sp, r7
 8015c22:	bd80      	pop	{r7, pc}
 8015c24:	20011774 	.word	0x20011774

08015c28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015c28:	b580      	push	{r7, lr}
 8015c2a:	b084      	sub	sp, #16
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c30:	2300      	movs	r3, #0
 8015c32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c34:	2300      	movs	r3, #0
 8015c36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015c3e:	4618      	mov	r0, r3
 8015c40:	f7f6 fd07 	bl	800c652 <HAL_PCD_Start>
 8015c44:	4603      	mov	r3, r0
 8015c46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c48:	7bfb      	ldrb	r3, [r7, #15]
 8015c4a:	4618      	mov	r0, r3
 8015c4c:	f000 f92a 	bl	8015ea4 <USBD_Get_USB_Status>
 8015c50:	4603      	mov	r3, r0
 8015c52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015c54:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c56:	4618      	mov	r0, r3
 8015c58:	3710      	adds	r7, #16
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	bd80      	pop	{r7, pc}

08015c5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015c5e:	b580      	push	{r7, lr}
 8015c60:	b084      	sub	sp, #16
 8015c62:	af00      	add	r7, sp, #0
 8015c64:	6078      	str	r0, [r7, #4]
 8015c66:	4608      	mov	r0, r1
 8015c68:	4611      	mov	r1, r2
 8015c6a:	461a      	mov	r2, r3
 8015c6c:	4603      	mov	r3, r0
 8015c6e:	70fb      	strb	r3, [r7, #3]
 8015c70:	460b      	mov	r3, r1
 8015c72:	70bb      	strb	r3, [r7, #2]
 8015c74:	4613      	mov	r3, r2
 8015c76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c78:	2300      	movs	r3, #0
 8015c7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c7c:	2300      	movs	r3, #0
 8015c7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015c86:	78bb      	ldrb	r3, [r7, #2]
 8015c88:	883a      	ldrh	r2, [r7, #0]
 8015c8a:	78f9      	ldrb	r1, [r7, #3]
 8015c8c:	f7f7 f8eb 	bl	800ce66 <HAL_PCD_EP_Open>
 8015c90:	4603      	mov	r3, r0
 8015c92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c94:	7bfb      	ldrb	r3, [r7, #15]
 8015c96:	4618      	mov	r0, r3
 8015c98:	f000 f904 	bl	8015ea4 <USBD_Get_USB_Status>
 8015c9c:	4603      	mov	r3, r0
 8015c9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015ca0:	7bbb      	ldrb	r3, [r7, #14]
}
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	3710      	adds	r7, #16
 8015ca6:	46bd      	mov	sp, r7
 8015ca8:	bd80      	pop	{r7, pc}

08015caa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015caa:	b580      	push	{r7, lr}
 8015cac:	b084      	sub	sp, #16
 8015cae:	af00      	add	r7, sp, #0
 8015cb0:	6078      	str	r0, [r7, #4]
 8015cb2:	460b      	mov	r3, r1
 8015cb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015cba:	2300      	movs	r3, #0
 8015cbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015cc4:	78fa      	ldrb	r2, [r7, #3]
 8015cc6:	4611      	mov	r1, r2
 8015cc8:	4618      	mov	r0, r3
 8015cca:	f7f7 f934 	bl	800cf36 <HAL_PCD_EP_Close>
 8015cce:	4603      	mov	r3, r0
 8015cd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015cd2:	7bfb      	ldrb	r3, [r7, #15]
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	f000 f8e5 	bl	8015ea4 <USBD_Get_USB_Status>
 8015cda:	4603      	mov	r3, r0
 8015cdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015cde:	7bbb      	ldrb	r3, [r7, #14]
}
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	3710      	adds	r7, #16
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	bd80      	pop	{r7, pc}

08015ce8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ce8:	b580      	push	{r7, lr}
 8015cea:	b084      	sub	sp, #16
 8015cec:	af00      	add	r7, sp, #0
 8015cee:	6078      	str	r0, [r7, #4]
 8015cf0:	460b      	mov	r3, r1
 8015cf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015cf8:	2300      	movs	r3, #0
 8015cfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015d02:	78fa      	ldrb	r2, [r7, #3]
 8015d04:	4611      	mov	r1, r2
 8015d06:	4618      	mov	r0, r3
 8015d08:	f7f7 fa0c 	bl	800d124 <HAL_PCD_EP_SetStall>
 8015d0c:	4603      	mov	r3, r0
 8015d0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d10:	7bfb      	ldrb	r3, [r7, #15]
 8015d12:	4618      	mov	r0, r3
 8015d14:	f000 f8c6 	bl	8015ea4 <USBD_Get_USB_Status>
 8015d18:	4603      	mov	r3, r0
 8015d1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d1e:	4618      	mov	r0, r3
 8015d20:	3710      	adds	r7, #16
 8015d22:	46bd      	mov	sp, r7
 8015d24:	bd80      	pop	{r7, pc}

08015d26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d26:	b580      	push	{r7, lr}
 8015d28:	b084      	sub	sp, #16
 8015d2a:	af00      	add	r7, sp, #0
 8015d2c:	6078      	str	r0, [r7, #4]
 8015d2e:	460b      	mov	r3, r1
 8015d30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d32:	2300      	movs	r3, #0
 8015d34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d36:	2300      	movs	r3, #0
 8015d38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015d40:	78fa      	ldrb	r2, [r7, #3]
 8015d42:	4611      	mov	r1, r2
 8015d44:	4618      	mov	r0, r3
 8015d46:	f7f7 fa51 	bl	800d1ec <HAL_PCD_EP_ClrStall>
 8015d4a:	4603      	mov	r3, r0
 8015d4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d4e:	7bfb      	ldrb	r3, [r7, #15]
 8015d50:	4618      	mov	r0, r3
 8015d52:	f000 f8a7 	bl	8015ea4 <USBD_Get_USB_Status>
 8015d56:	4603      	mov	r3, r0
 8015d58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d5c:	4618      	mov	r0, r3
 8015d5e:	3710      	adds	r7, #16
 8015d60:	46bd      	mov	sp, r7
 8015d62:	bd80      	pop	{r7, pc}

08015d64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d64:	b480      	push	{r7}
 8015d66:	b085      	sub	sp, #20
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	6078      	str	r0, [r7, #4]
 8015d6c:	460b      	mov	r3, r1
 8015d6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015d76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015d78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	da0b      	bge.n	8015d98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015d80:	78fb      	ldrb	r3, [r7, #3]
 8015d82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015d86:	68f9      	ldr	r1, [r7, #12]
 8015d88:	4613      	mov	r3, r2
 8015d8a:	00db      	lsls	r3, r3, #3
 8015d8c:	1a9b      	subs	r3, r3, r2
 8015d8e:	009b      	lsls	r3, r3, #2
 8015d90:	440b      	add	r3, r1
 8015d92:	333e      	adds	r3, #62	; 0x3e
 8015d94:	781b      	ldrb	r3, [r3, #0]
 8015d96:	e00b      	b.n	8015db0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015d98:	78fb      	ldrb	r3, [r7, #3]
 8015d9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015d9e:	68f9      	ldr	r1, [r7, #12]
 8015da0:	4613      	mov	r3, r2
 8015da2:	00db      	lsls	r3, r3, #3
 8015da4:	1a9b      	subs	r3, r3, r2
 8015da6:	009b      	lsls	r3, r3, #2
 8015da8:	440b      	add	r3, r1
 8015daa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015dae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015db0:	4618      	mov	r0, r3
 8015db2:	3714      	adds	r7, #20
 8015db4:	46bd      	mov	sp, r7
 8015db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dba:	4770      	bx	lr

08015dbc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b084      	sub	sp, #16
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	6078      	str	r0, [r7, #4]
 8015dc4:	460b      	mov	r3, r1
 8015dc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015dc8:	2300      	movs	r3, #0
 8015dca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015dcc:	2300      	movs	r3, #0
 8015dce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015dd6:	78fa      	ldrb	r2, [r7, #3]
 8015dd8:	4611      	mov	r1, r2
 8015dda:	4618      	mov	r0, r3
 8015ddc:	f7f7 f81e 	bl	800ce1c <HAL_PCD_SetAddress>
 8015de0:	4603      	mov	r3, r0
 8015de2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015de4:	7bfb      	ldrb	r3, [r7, #15]
 8015de6:	4618      	mov	r0, r3
 8015de8:	f000 f85c 	bl	8015ea4 <USBD_Get_USB_Status>
 8015dec:	4603      	mov	r3, r0
 8015dee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015df0:	7bbb      	ldrb	r3, [r7, #14]
}
 8015df2:	4618      	mov	r0, r3
 8015df4:	3710      	adds	r7, #16
 8015df6:	46bd      	mov	sp, r7
 8015df8:	bd80      	pop	{r7, pc}

08015dfa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015dfa:	b580      	push	{r7, lr}
 8015dfc:	b086      	sub	sp, #24
 8015dfe:	af00      	add	r7, sp, #0
 8015e00:	60f8      	str	r0, [r7, #12]
 8015e02:	607a      	str	r2, [r7, #4]
 8015e04:	603b      	str	r3, [r7, #0]
 8015e06:	460b      	mov	r3, r1
 8015e08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e0a:	2300      	movs	r3, #0
 8015e0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e0e:	2300      	movs	r3, #0
 8015e10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015e18:	7af9      	ldrb	r1, [r7, #11]
 8015e1a:	683b      	ldr	r3, [r7, #0]
 8015e1c:	687a      	ldr	r2, [r7, #4]
 8015e1e:	f7f7 f937 	bl	800d090 <HAL_PCD_EP_Transmit>
 8015e22:	4603      	mov	r3, r0
 8015e24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e26:	7dfb      	ldrb	r3, [r7, #23]
 8015e28:	4618      	mov	r0, r3
 8015e2a:	f000 f83b 	bl	8015ea4 <USBD_Get_USB_Status>
 8015e2e:	4603      	mov	r3, r0
 8015e30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015e32:	7dbb      	ldrb	r3, [r7, #22]
}
 8015e34:	4618      	mov	r0, r3
 8015e36:	3718      	adds	r7, #24
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	bd80      	pop	{r7, pc}

08015e3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	b086      	sub	sp, #24
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	60f8      	str	r0, [r7, #12]
 8015e44:	607a      	str	r2, [r7, #4]
 8015e46:	603b      	str	r3, [r7, #0]
 8015e48:	460b      	mov	r3, r1
 8015e4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e4c:	2300      	movs	r3, #0
 8015e4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e50:	2300      	movs	r3, #0
 8015e52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015e5a:	7af9      	ldrb	r1, [r7, #11]
 8015e5c:	683b      	ldr	r3, [r7, #0]
 8015e5e:	687a      	ldr	r2, [r7, #4]
 8015e60:	f7f7 f8b3 	bl	800cfca <HAL_PCD_EP_Receive>
 8015e64:	4603      	mov	r3, r0
 8015e66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e68:	7dfb      	ldrb	r3, [r7, #23]
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	f000 f81a 	bl	8015ea4 <USBD_Get_USB_Status>
 8015e70:	4603      	mov	r3, r0
 8015e72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015e74:	7dbb      	ldrb	r3, [r7, #22]
}
 8015e76:	4618      	mov	r0, r3
 8015e78:	3718      	adds	r7, #24
 8015e7a:	46bd      	mov	sp, r7
 8015e7c:	bd80      	pop	{r7, pc}

08015e7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015e7e:	b580      	push	{r7, lr}
 8015e80:	b082      	sub	sp, #8
 8015e82:	af00      	add	r7, sp, #0
 8015e84:	6078      	str	r0, [r7, #4]
 8015e86:	460b      	mov	r3, r1
 8015e88:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015e90:	78fa      	ldrb	r2, [r7, #3]
 8015e92:	4611      	mov	r1, r2
 8015e94:	4618      	mov	r0, r3
 8015e96:	f7f7 f8e3 	bl	800d060 <HAL_PCD_EP_GetRxCount>
 8015e9a:	4603      	mov	r3, r0
}
 8015e9c:	4618      	mov	r0, r3
 8015e9e:	3708      	adds	r7, #8
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	bd80      	pop	{r7, pc}

08015ea4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015ea4:	b480      	push	{r7}
 8015ea6:	b085      	sub	sp, #20
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	4603      	mov	r3, r0
 8015eac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015eae:	2300      	movs	r3, #0
 8015eb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015eb2:	79fb      	ldrb	r3, [r7, #7]
 8015eb4:	2b03      	cmp	r3, #3
 8015eb6:	d817      	bhi.n	8015ee8 <USBD_Get_USB_Status+0x44>
 8015eb8:	a201      	add	r2, pc, #4	; (adr r2, 8015ec0 <USBD_Get_USB_Status+0x1c>)
 8015eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ebe:	bf00      	nop
 8015ec0:	08015ed1 	.word	0x08015ed1
 8015ec4:	08015ed7 	.word	0x08015ed7
 8015ec8:	08015edd 	.word	0x08015edd
 8015ecc:	08015ee3 	.word	0x08015ee3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015ed0:	2300      	movs	r3, #0
 8015ed2:	73fb      	strb	r3, [r7, #15]
    break;
 8015ed4:	e00b      	b.n	8015eee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015ed6:	2303      	movs	r3, #3
 8015ed8:	73fb      	strb	r3, [r7, #15]
    break;
 8015eda:	e008      	b.n	8015eee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015edc:	2301      	movs	r3, #1
 8015ede:	73fb      	strb	r3, [r7, #15]
    break;
 8015ee0:	e005      	b.n	8015eee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015ee2:	2303      	movs	r3, #3
 8015ee4:	73fb      	strb	r3, [r7, #15]
    break;
 8015ee6:	e002      	b.n	8015eee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015ee8:	2303      	movs	r3, #3
 8015eea:	73fb      	strb	r3, [r7, #15]
    break;
 8015eec:	bf00      	nop
  }
  return usb_status;
 8015eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	3714      	adds	r7, #20
 8015ef4:	46bd      	mov	sp, r7
 8015ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015efa:	4770      	bx	lr

08015efc <__errno>:
 8015efc:	4b01      	ldr	r3, [pc, #4]	; (8015f04 <__errno+0x8>)
 8015efe:	6818      	ldr	r0, [r3, #0]
 8015f00:	4770      	bx	lr
 8015f02:	bf00      	nop
 8015f04:	20004210 	.word	0x20004210

08015f08 <__libc_init_array>:
 8015f08:	b570      	push	{r4, r5, r6, lr}
 8015f0a:	4d0d      	ldr	r5, [pc, #52]	; (8015f40 <__libc_init_array+0x38>)
 8015f0c:	4c0d      	ldr	r4, [pc, #52]	; (8015f44 <__libc_init_array+0x3c>)
 8015f0e:	1b64      	subs	r4, r4, r5
 8015f10:	10a4      	asrs	r4, r4, #2
 8015f12:	2600      	movs	r6, #0
 8015f14:	42a6      	cmp	r6, r4
 8015f16:	d109      	bne.n	8015f2c <__libc_init_array+0x24>
 8015f18:	4d0b      	ldr	r5, [pc, #44]	; (8015f48 <__libc_init_array+0x40>)
 8015f1a:	4c0c      	ldr	r4, [pc, #48]	; (8015f4c <__libc_init_array+0x44>)
 8015f1c:	f006 f972 	bl	801c204 <_init>
 8015f20:	1b64      	subs	r4, r4, r5
 8015f22:	10a4      	asrs	r4, r4, #2
 8015f24:	2600      	movs	r6, #0
 8015f26:	42a6      	cmp	r6, r4
 8015f28:	d105      	bne.n	8015f36 <__libc_init_array+0x2e>
 8015f2a:	bd70      	pop	{r4, r5, r6, pc}
 8015f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015f30:	4798      	blx	r3
 8015f32:	3601      	adds	r6, #1
 8015f34:	e7ee      	b.n	8015f14 <__libc_init_array+0xc>
 8015f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8015f3a:	4798      	blx	r3
 8015f3c:	3601      	adds	r6, #1
 8015f3e:	e7f2      	b.n	8015f26 <__libc_init_array+0x1e>
 8015f40:	0801cc18 	.word	0x0801cc18
 8015f44:	0801cc18 	.word	0x0801cc18
 8015f48:	0801cc18 	.word	0x0801cc18
 8015f4c:	0801cc1c 	.word	0x0801cc1c

08015f50 <malloc>:
 8015f50:	4b02      	ldr	r3, [pc, #8]	; (8015f5c <malloc+0xc>)
 8015f52:	4601      	mov	r1, r0
 8015f54:	6818      	ldr	r0, [r3, #0]
 8015f56:	f000 b88b 	b.w	8016070 <_malloc_r>
 8015f5a:	bf00      	nop
 8015f5c:	20004210 	.word	0x20004210

08015f60 <free>:
 8015f60:	4b02      	ldr	r3, [pc, #8]	; (8015f6c <free+0xc>)
 8015f62:	4601      	mov	r1, r0
 8015f64:	6818      	ldr	r0, [r3, #0]
 8015f66:	f000 b833 	b.w	8015fd0 <_free_r>
 8015f6a:	bf00      	nop
 8015f6c:	20004210 	.word	0x20004210

08015f70 <memcpy>:
 8015f70:	440a      	add	r2, r1
 8015f72:	4291      	cmp	r1, r2
 8015f74:	f100 33ff 	add.w	r3, r0, #4294967295
 8015f78:	d100      	bne.n	8015f7c <memcpy+0xc>
 8015f7a:	4770      	bx	lr
 8015f7c:	b510      	push	{r4, lr}
 8015f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015f82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015f86:	4291      	cmp	r1, r2
 8015f88:	d1f9      	bne.n	8015f7e <memcpy+0xe>
 8015f8a:	bd10      	pop	{r4, pc}

08015f8c <memmove>:
 8015f8c:	4288      	cmp	r0, r1
 8015f8e:	b510      	push	{r4, lr}
 8015f90:	eb01 0402 	add.w	r4, r1, r2
 8015f94:	d902      	bls.n	8015f9c <memmove+0x10>
 8015f96:	4284      	cmp	r4, r0
 8015f98:	4623      	mov	r3, r4
 8015f9a:	d807      	bhi.n	8015fac <memmove+0x20>
 8015f9c:	1e43      	subs	r3, r0, #1
 8015f9e:	42a1      	cmp	r1, r4
 8015fa0:	d008      	beq.n	8015fb4 <memmove+0x28>
 8015fa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015fa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015faa:	e7f8      	b.n	8015f9e <memmove+0x12>
 8015fac:	4402      	add	r2, r0
 8015fae:	4601      	mov	r1, r0
 8015fb0:	428a      	cmp	r2, r1
 8015fb2:	d100      	bne.n	8015fb6 <memmove+0x2a>
 8015fb4:	bd10      	pop	{r4, pc}
 8015fb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015fba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015fbe:	e7f7      	b.n	8015fb0 <memmove+0x24>

08015fc0 <memset>:
 8015fc0:	4402      	add	r2, r0
 8015fc2:	4603      	mov	r3, r0
 8015fc4:	4293      	cmp	r3, r2
 8015fc6:	d100      	bne.n	8015fca <memset+0xa>
 8015fc8:	4770      	bx	lr
 8015fca:	f803 1b01 	strb.w	r1, [r3], #1
 8015fce:	e7f9      	b.n	8015fc4 <memset+0x4>

08015fd0 <_free_r>:
 8015fd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015fd2:	2900      	cmp	r1, #0
 8015fd4:	d048      	beq.n	8016068 <_free_r+0x98>
 8015fd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015fda:	9001      	str	r0, [sp, #4]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	f1a1 0404 	sub.w	r4, r1, #4
 8015fe2:	bfb8      	it	lt
 8015fe4:	18e4      	addlt	r4, r4, r3
 8015fe6:	f003 f835 	bl	8019054 <__malloc_lock>
 8015fea:	4a20      	ldr	r2, [pc, #128]	; (801606c <_free_r+0x9c>)
 8015fec:	9801      	ldr	r0, [sp, #4]
 8015fee:	6813      	ldr	r3, [r2, #0]
 8015ff0:	4615      	mov	r5, r2
 8015ff2:	b933      	cbnz	r3, 8016002 <_free_r+0x32>
 8015ff4:	6063      	str	r3, [r4, #4]
 8015ff6:	6014      	str	r4, [r2, #0]
 8015ff8:	b003      	add	sp, #12
 8015ffa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ffe:	f003 b82f 	b.w	8019060 <__malloc_unlock>
 8016002:	42a3      	cmp	r3, r4
 8016004:	d90b      	bls.n	801601e <_free_r+0x4e>
 8016006:	6821      	ldr	r1, [r4, #0]
 8016008:	1862      	adds	r2, r4, r1
 801600a:	4293      	cmp	r3, r2
 801600c:	bf04      	itt	eq
 801600e:	681a      	ldreq	r2, [r3, #0]
 8016010:	685b      	ldreq	r3, [r3, #4]
 8016012:	6063      	str	r3, [r4, #4]
 8016014:	bf04      	itt	eq
 8016016:	1852      	addeq	r2, r2, r1
 8016018:	6022      	streq	r2, [r4, #0]
 801601a:	602c      	str	r4, [r5, #0]
 801601c:	e7ec      	b.n	8015ff8 <_free_r+0x28>
 801601e:	461a      	mov	r2, r3
 8016020:	685b      	ldr	r3, [r3, #4]
 8016022:	b10b      	cbz	r3, 8016028 <_free_r+0x58>
 8016024:	42a3      	cmp	r3, r4
 8016026:	d9fa      	bls.n	801601e <_free_r+0x4e>
 8016028:	6811      	ldr	r1, [r2, #0]
 801602a:	1855      	adds	r5, r2, r1
 801602c:	42a5      	cmp	r5, r4
 801602e:	d10b      	bne.n	8016048 <_free_r+0x78>
 8016030:	6824      	ldr	r4, [r4, #0]
 8016032:	4421      	add	r1, r4
 8016034:	1854      	adds	r4, r2, r1
 8016036:	42a3      	cmp	r3, r4
 8016038:	6011      	str	r1, [r2, #0]
 801603a:	d1dd      	bne.n	8015ff8 <_free_r+0x28>
 801603c:	681c      	ldr	r4, [r3, #0]
 801603e:	685b      	ldr	r3, [r3, #4]
 8016040:	6053      	str	r3, [r2, #4]
 8016042:	4421      	add	r1, r4
 8016044:	6011      	str	r1, [r2, #0]
 8016046:	e7d7      	b.n	8015ff8 <_free_r+0x28>
 8016048:	d902      	bls.n	8016050 <_free_r+0x80>
 801604a:	230c      	movs	r3, #12
 801604c:	6003      	str	r3, [r0, #0]
 801604e:	e7d3      	b.n	8015ff8 <_free_r+0x28>
 8016050:	6825      	ldr	r5, [r4, #0]
 8016052:	1961      	adds	r1, r4, r5
 8016054:	428b      	cmp	r3, r1
 8016056:	bf04      	itt	eq
 8016058:	6819      	ldreq	r1, [r3, #0]
 801605a:	685b      	ldreq	r3, [r3, #4]
 801605c:	6063      	str	r3, [r4, #4]
 801605e:	bf04      	itt	eq
 8016060:	1949      	addeq	r1, r1, r5
 8016062:	6021      	streq	r1, [r4, #0]
 8016064:	6054      	str	r4, [r2, #4]
 8016066:	e7c7      	b.n	8015ff8 <_free_r+0x28>
 8016068:	b003      	add	sp, #12
 801606a:	bd30      	pop	{r4, r5, pc}
 801606c:	200085b8 	.word	0x200085b8

08016070 <_malloc_r>:
 8016070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016072:	1ccd      	adds	r5, r1, #3
 8016074:	f025 0503 	bic.w	r5, r5, #3
 8016078:	3508      	adds	r5, #8
 801607a:	2d0c      	cmp	r5, #12
 801607c:	bf38      	it	cc
 801607e:	250c      	movcc	r5, #12
 8016080:	2d00      	cmp	r5, #0
 8016082:	4606      	mov	r6, r0
 8016084:	db01      	blt.n	801608a <_malloc_r+0x1a>
 8016086:	42a9      	cmp	r1, r5
 8016088:	d903      	bls.n	8016092 <_malloc_r+0x22>
 801608a:	230c      	movs	r3, #12
 801608c:	6033      	str	r3, [r6, #0]
 801608e:	2000      	movs	r0, #0
 8016090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016092:	f002 ffdf 	bl	8019054 <__malloc_lock>
 8016096:	4921      	ldr	r1, [pc, #132]	; (801611c <_malloc_r+0xac>)
 8016098:	680a      	ldr	r2, [r1, #0]
 801609a:	4614      	mov	r4, r2
 801609c:	b99c      	cbnz	r4, 80160c6 <_malloc_r+0x56>
 801609e:	4f20      	ldr	r7, [pc, #128]	; (8016120 <_malloc_r+0xb0>)
 80160a0:	683b      	ldr	r3, [r7, #0]
 80160a2:	b923      	cbnz	r3, 80160ae <_malloc_r+0x3e>
 80160a4:	4621      	mov	r1, r4
 80160a6:	4630      	mov	r0, r6
 80160a8:	f000 feb6 	bl	8016e18 <_sbrk_r>
 80160ac:	6038      	str	r0, [r7, #0]
 80160ae:	4629      	mov	r1, r5
 80160b0:	4630      	mov	r0, r6
 80160b2:	f000 feb1 	bl	8016e18 <_sbrk_r>
 80160b6:	1c43      	adds	r3, r0, #1
 80160b8:	d123      	bne.n	8016102 <_malloc_r+0x92>
 80160ba:	230c      	movs	r3, #12
 80160bc:	6033      	str	r3, [r6, #0]
 80160be:	4630      	mov	r0, r6
 80160c0:	f002 ffce 	bl	8019060 <__malloc_unlock>
 80160c4:	e7e3      	b.n	801608e <_malloc_r+0x1e>
 80160c6:	6823      	ldr	r3, [r4, #0]
 80160c8:	1b5b      	subs	r3, r3, r5
 80160ca:	d417      	bmi.n	80160fc <_malloc_r+0x8c>
 80160cc:	2b0b      	cmp	r3, #11
 80160ce:	d903      	bls.n	80160d8 <_malloc_r+0x68>
 80160d0:	6023      	str	r3, [r4, #0]
 80160d2:	441c      	add	r4, r3
 80160d4:	6025      	str	r5, [r4, #0]
 80160d6:	e004      	b.n	80160e2 <_malloc_r+0x72>
 80160d8:	6863      	ldr	r3, [r4, #4]
 80160da:	42a2      	cmp	r2, r4
 80160dc:	bf0c      	ite	eq
 80160de:	600b      	streq	r3, [r1, #0]
 80160e0:	6053      	strne	r3, [r2, #4]
 80160e2:	4630      	mov	r0, r6
 80160e4:	f002 ffbc 	bl	8019060 <__malloc_unlock>
 80160e8:	f104 000b 	add.w	r0, r4, #11
 80160ec:	1d23      	adds	r3, r4, #4
 80160ee:	f020 0007 	bic.w	r0, r0, #7
 80160f2:	1ac2      	subs	r2, r0, r3
 80160f4:	d0cc      	beq.n	8016090 <_malloc_r+0x20>
 80160f6:	1a1b      	subs	r3, r3, r0
 80160f8:	50a3      	str	r3, [r4, r2]
 80160fa:	e7c9      	b.n	8016090 <_malloc_r+0x20>
 80160fc:	4622      	mov	r2, r4
 80160fe:	6864      	ldr	r4, [r4, #4]
 8016100:	e7cc      	b.n	801609c <_malloc_r+0x2c>
 8016102:	1cc4      	adds	r4, r0, #3
 8016104:	f024 0403 	bic.w	r4, r4, #3
 8016108:	42a0      	cmp	r0, r4
 801610a:	d0e3      	beq.n	80160d4 <_malloc_r+0x64>
 801610c:	1a21      	subs	r1, r4, r0
 801610e:	4630      	mov	r0, r6
 8016110:	f000 fe82 	bl	8016e18 <_sbrk_r>
 8016114:	3001      	adds	r0, #1
 8016116:	d1dd      	bne.n	80160d4 <_malloc_r+0x64>
 8016118:	e7cf      	b.n	80160ba <_malloc_r+0x4a>
 801611a:	bf00      	nop
 801611c:	200085b8 	.word	0x200085b8
 8016120:	200085bc 	.word	0x200085bc

08016124 <__cvt>:
 8016124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016128:	ec55 4b10 	vmov	r4, r5, d0
 801612c:	2d00      	cmp	r5, #0
 801612e:	460e      	mov	r6, r1
 8016130:	4619      	mov	r1, r3
 8016132:	462b      	mov	r3, r5
 8016134:	bfbb      	ittet	lt
 8016136:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801613a:	461d      	movlt	r5, r3
 801613c:	2300      	movge	r3, #0
 801613e:	232d      	movlt	r3, #45	; 0x2d
 8016140:	700b      	strb	r3, [r1, #0]
 8016142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016144:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016148:	4691      	mov	r9, r2
 801614a:	f023 0820 	bic.w	r8, r3, #32
 801614e:	bfbc      	itt	lt
 8016150:	4622      	movlt	r2, r4
 8016152:	4614      	movlt	r4, r2
 8016154:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016158:	d005      	beq.n	8016166 <__cvt+0x42>
 801615a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801615e:	d100      	bne.n	8016162 <__cvt+0x3e>
 8016160:	3601      	adds	r6, #1
 8016162:	2102      	movs	r1, #2
 8016164:	e000      	b.n	8016168 <__cvt+0x44>
 8016166:	2103      	movs	r1, #3
 8016168:	ab03      	add	r3, sp, #12
 801616a:	9301      	str	r3, [sp, #4]
 801616c:	ab02      	add	r3, sp, #8
 801616e:	9300      	str	r3, [sp, #0]
 8016170:	ec45 4b10 	vmov	d0, r4, r5
 8016174:	4653      	mov	r3, sl
 8016176:	4632      	mov	r2, r6
 8016178:	f001 fdfa 	bl	8017d70 <_dtoa_r>
 801617c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016180:	4607      	mov	r7, r0
 8016182:	d102      	bne.n	801618a <__cvt+0x66>
 8016184:	f019 0f01 	tst.w	r9, #1
 8016188:	d022      	beq.n	80161d0 <__cvt+0xac>
 801618a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801618e:	eb07 0906 	add.w	r9, r7, r6
 8016192:	d110      	bne.n	80161b6 <__cvt+0x92>
 8016194:	783b      	ldrb	r3, [r7, #0]
 8016196:	2b30      	cmp	r3, #48	; 0x30
 8016198:	d10a      	bne.n	80161b0 <__cvt+0x8c>
 801619a:	2200      	movs	r2, #0
 801619c:	2300      	movs	r3, #0
 801619e:	4620      	mov	r0, r4
 80161a0:	4629      	mov	r1, r5
 80161a2:	f7ea fc91 	bl	8000ac8 <__aeabi_dcmpeq>
 80161a6:	b918      	cbnz	r0, 80161b0 <__cvt+0x8c>
 80161a8:	f1c6 0601 	rsb	r6, r6, #1
 80161ac:	f8ca 6000 	str.w	r6, [sl]
 80161b0:	f8da 3000 	ldr.w	r3, [sl]
 80161b4:	4499      	add	r9, r3
 80161b6:	2200      	movs	r2, #0
 80161b8:	2300      	movs	r3, #0
 80161ba:	4620      	mov	r0, r4
 80161bc:	4629      	mov	r1, r5
 80161be:	f7ea fc83 	bl	8000ac8 <__aeabi_dcmpeq>
 80161c2:	b108      	cbz	r0, 80161c8 <__cvt+0xa4>
 80161c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80161c8:	2230      	movs	r2, #48	; 0x30
 80161ca:	9b03      	ldr	r3, [sp, #12]
 80161cc:	454b      	cmp	r3, r9
 80161ce:	d307      	bcc.n	80161e0 <__cvt+0xbc>
 80161d0:	9b03      	ldr	r3, [sp, #12]
 80161d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80161d4:	1bdb      	subs	r3, r3, r7
 80161d6:	4638      	mov	r0, r7
 80161d8:	6013      	str	r3, [r2, #0]
 80161da:	b004      	add	sp, #16
 80161dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161e0:	1c59      	adds	r1, r3, #1
 80161e2:	9103      	str	r1, [sp, #12]
 80161e4:	701a      	strb	r2, [r3, #0]
 80161e6:	e7f0      	b.n	80161ca <__cvt+0xa6>

080161e8 <__exponent>:
 80161e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80161ea:	4603      	mov	r3, r0
 80161ec:	2900      	cmp	r1, #0
 80161ee:	bfb8      	it	lt
 80161f0:	4249      	neglt	r1, r1
 80161f2:	f803 2b02 	strb.w	r2, [r3], #2
 80161f6:	bfb4      	ite	lt
 80161f8:	222d      	movlt	r2, #45	; 0x2d
 80161fa:	222b      	movge	r2, #43	; 0x2b
 80161fc:	2909      	cmp	r1, #9
 80161fe:	7042      	strb	r2, [r0, #1]
 8016200:	dd2a      	ble.n	8016258 <__exponent+0x70>
 8016202:	f10d 0407 	add.w	r4, sp, #7
 8016206:	46a4      	mov	ip, r4
 8016208:	270a      	movs	r7, #10
 801620a:	46a6      	mov	lr, r4
 801620c:	460a      	mov	r2, r1
 801620e:	fb91 f6f7 	sdiv	r6, r1, r7
 8016212:	fb07 1516 	mls	r5, r7, r6, r1
 8016216:	3530      	adds	r5, #48	; 0x30
 8016218:	2a63      	cmp	r2, #99	; 0x63
 801621a:	f104 34ff 	add.w	r4, r4, #4294967295
 801621e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8016222:	4631      	mov	r1, r6
 8016224:	dcf1      	bgt.n	801620a <__exponent+0x22>
 8016226:	3130      	adds	r1, #48	; 0x30
 8016228:	f1ae 0502 	sub.w	r5, lr, #2
 801622c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8016230:	1c44      	adds	r4, r0, #1
 8016232:	4629      	mov	r1, r5
 8016234:	4561      	cmp	r1, ip
 8016236:	d30a      	bcc.n	801624e <__exponent+0x66>
 8016238:	f10d 0209 	add.w	r2, sp, #9
 801623c:	eba2 020e 	sub.w	r2, r2, lr
 8016240:	4565      	cmp	r5, ip
 8016242:	bf88      	it	hi
 8016244:	2200      	movhi	r2, #0
 8016246:	4413      	add	r3, r2
 8016248:	1a18      	subs	r0, r3, r0
 801624a:	b003      	add	sp, #12
 801624c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801624e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016252:	f804 2f01 	strb.w	r2, [r4, #1]!
 8016256:	e7ed      	b.n	8016234 <__exponent+0x4c>
 8016258:	2330      	movs	r3, #48	; 0x30
 801625a:	3130      	adds	r1, #48	; 0x30
 801625c:	7083      	strb	r3, [r0, #2]
 801625e:	70c1      	strb	r1, [r0, #3]
 8016260:	1d03      	adds	r3, r0, #4
 8016262:	e7f1      	b.n	8016248 <__exponent+0x60>

08016264 <_printf_float>:
 8016264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016268:	ed2d 8b02 	vpush	{d8}
 801626c:	b08d      	sub	sp, #52	; 0x34
 801626e:	460c      	mov	r4, r1
 8016270:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016274:	4616      	mov	r6, r2
 8016276:	461f      	mov	r7, r3
 8016278:	4605      	mov	r5, r0
 801627a:	f002 fed5 	bl	8019028 <_localeconv_r>
 801627e:	f8d0 a000 	ldr.w	sl, [r0]
 8016282:	4650      	mov	r0, sl
 8016284:	f7e9 ffa4 	bl	80001d0 <strlen>
 8016288:	2300      	movs	r3, #0
 801628a:	930a      	str	r3, [sp, #40]	; 0x28
 801628c:	6823      	ldr	r3, [r4, #0]
 801628e:	9305      	str	r3, [sp, #20]
 8016290:	f8d8 3000 	ldr.w	r3, [r8]
 8016294:	f894 b018 	ldrb.w	fp, [r4, #24]
 8016298:	3307      	adds	r3, #7
 801629a:	f023 0307 	bic.w	r3, r3, #7
 801629e:	f103 0208 	add.w	r2, r3, #8
 80162a2:	f8c8 2000 	str.w	r2, [r8]
 80162a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162aa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80162ae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80162b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80162b6:	9307      	str	r3, [sp, #28]
 80162b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80162bc:	ee08 0a10 	vmov	s16, r0
 80162c0:	4b9f      	ldr	r3, [pc, #636]	; (8016540 <_printf_float+0x2dc>)
 80162c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80162c6:	f04f 32ff 	mov.w	r2, #4294967295
 80162ca:	f7ea fc2f 	bl	8000b2c <__aeabi_dcmpun>
 80162ce:	bb88      	cbnz	r0, 8016334 <_printf_float+0xd0>
 80162d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80162d4:	4b9a      	ldr	r3, [pc, #616]	; (8016540 <_printf_float+0x2dc>)
 80162d6:	f04f 32ff 	mov.w	r2, #4294967295
 80162da:	f7ea fc09 	bl	8000af0 <__aeabi_dcmple>
 80162de:	bb48      	cbnz	r0, 8016334 <_printf_float+0xd0>
 80162e0:	2200      	movs	r2, #0
 80162e2:	2300      	movs	r3, #0
 80162e4:	4640      	mov	r0, r8
 80162e6:	4649      	mov	r1, r9
 80162e8:	f7ea fbf8 	bl	8000adc <__aeabi_dcmplt>
 80162ec:	b110      	cbz	r0, 80162f4 <_printf_float+0x90>
 80162ee:	232d      	movs	r3, #45	; 0x2d
 80162f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80162f4:	4b93      	ldr	r3, [pc, #588]	; (8016544 <_printf_float+0x2e0>)
 80162f6:	4894      	ldr	r0, [pc, #592]	; (8016548 <_printf_float+0x2e4>)
 80162f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80162fc:	bf94      	ite	ls
 80162fe:	4698      	movls	r8, r3
 8016300:	4680      	movhi	r8, r0
 8016302:	2303      	movs	r3, #3
 8016304:	6123      	str	r3, [r4, #16]
 8016306:	9b05      	ldr	r3, [sp, #20]
 8016308:	f023 0204 	bic.w	r2, r3, #4
 801630c:	6022      	str	r2, [r4, #0]
 801630e:	f04f 0900 	mov.w	r9, #0
 8016312:	9700      	str	r7, [sp, #0]
 8016314:	4633      	mov	r3, r6
 8016316:	aa0b      	add	r2, sp, #44	; 0x2c
 8016318:	4621      	mov	r1, r4
 801631a:	4628      	mov	r0, r5
 801631c:	f000 f9d8 	bl	80166d0 <_printf_common>
 8016320:	3001      	adds	r0, #1
 8016322:	f040 8090 	bne.w	8016446 <_printf_float+0x1e2>
 8016326:	f04f 30ff 	mov.w	r0, #4294967295
 801632a:	b00d      	add	sp, #52	; 0x34
 801632c:	ecbd 8b02 	vpop	{d8}
 8016330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016334:	4642      	mov	r2, r8
 8016336:	464b      	mov	r3, r9
 8016338:	4640      	mov	r0, r8
 801633a:	4649      	mov	r1, r9
 801633c:	f7ea fbf6 	bl	8000b2c <__aeabi_dcmpun>
 8016340:	b140      	cbz	r0, 8016354 <_printf_float+0xf0>
 8016342:	464b      	mov	r3, r9
 8016344:	2b00      	cmp	r3, #0
 8016346:	bfbc      	itt	lt
 8016348:	232d      	movlt	r3, #45	; 0x2d
 801634a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801634e:	487f      	ldr	r0, [pc, #508]	; (801654c <_printf_float+0x2e8>)
 8016350:	4b7f      	ldr	r3, [pc, #508]	; (8016550 <_printf_float+0x2ec>)
 8016352:	e7d1      	b.n	80162f8 <_printf_float+0x94>
 8016354:	6863      	ldr	r3, [r4, #4]
 8016356:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801635a:	9206      	str	r2, [sp, #24]
 801635c:	1c5a      	adds	r2, r3, #1
 801635e:	d13f      	bne.n	80163e0 <_printf_float+0x17c>
 8016360:	2306      	movs	r3, #6
 8016362:	6063      	str	r3, [r4, #4]
 8016364:	9b05      	ldr	r3, [sp, #20]
 8016366:	6861      	ldr	r1, [r4, #4]
 8016368:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801636c:	2300      	movs	r3, #0
 801636e:	9303      	str	r3, [sp, #12]
 8016370:	ab0a      	add	r3, sp, #40	; 0x28
 8016372:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016376:	ab09      	add	r3, sp, #36	; 0x24
 8016378:	ec49 8b10 	vmov	d0, r8, r9
 801637c:	9300      	str	r3, [sp, #0]
 801637e:	6022      	str	r2, [r4, #0]
 8016380:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016384:	4628      	mov	r0, r5
 8016386:	f7ff fecd 	bl	8016124 <__cvt>
 801638a:	9b06      	ldr	r3, [sp, #24]
 801638c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801638e:	2b47      	cmp	r3, #71	; 0x47
 8016390:	4680      	mov	r8, r0
 8016392:	d108      	bne.n	80163a6 <_printf_float+0x142>
 8016394:	1cc8      	adds	r0, r1, #3
 8016396:	db02      	blt.n	801639e <_printf_float+0x13a>
 8016398:	6863      	ldr	r3, [r4, #4]
 801639a:	4299      	cmp	r1, r3
 801639c:	dd41      	ble.n	8016422 <_printf_float+0x1be>
 801639e:	f1ab 0b02 	sub.w	fp, fp, #2
 80163a2:	fa5f fb8b 	uxtb.w	fp, fp
 80163a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80163aa:	d820      	bhi.n	80163ee <_printf_float+0x18a>
 80163ac:	3901      	subs	r1, #1
 80163ae:	465a      	mov	r2, fp
 80163b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80163b4:	9109      	str	r1, [sp, #36]	; 0x24
 80163b6:	f7ff ff17 	bl	80161e8 <__exponent>
 80163ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80163bc:	1813      	adds	r3, r2, r0
 80163be:	2a01      	cmp	r2, #1
 80163c0:	4681      	mov	r9, r0
 80163c2:	6123      	str	r3, [r4, #16]
 80163c4:	dc02      	bgt.n	80163cc <_printf_float+0x168>
 80163c6:	6822      	ldr	r2, [r4, #0]
 80163c8:	07d2      	lsls	r2, r2, #31
 80163ca:	d501      	bpl.n	80163d0 <_printf_float+0x16c>
 80163cc:	3301      	adds	r3, #1
 80163ce:	6123      	str	r3, [r4, #16]
 80163d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d09c      	beq.n	8016312 <_printf_float+0xae>
 80163d8:	232d      	movs	r3, #45	; 0x2d
 80163da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80163de:	e798      	b.n	8016312 <_printf_float+0xae>
 80163e0:	9a06      	ldr	r2, [sp, #24]
 80163e2:	2a47      	cmp	r2, #71	; 0x47
 80163e4:	d1be      	bne.n	8016364 <_printf_float+0x100>
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d1bc      	bne.n	8016364 <_printf_float+0x100>
 80163ea:	2301      	movs	r3, #1
 80163ec:	e7b9      	b.n	8016362 <_printf_float+0xfe>
 80163ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80163f2:	d118      	bne.n	8016426 <_printf_float+0x1c2>
 80163f4:	2900      	cmp	r1, #0
 80163f6:	6863      	ldr	r3, [r4, #4]
 80163f8:	dd0b      	ble.n	8016412 <_printf_float+0x1ae>
 80163fa:	6121      	str	r1, [r4, #16]
 80163fc:	b913      	cbnz	r3, 8016404 <_printf_float+0x1a0>
 80163fe:	6822      	ldr	r2, [r4, #0]
 8016400:	07d0      	lsls	r0, r2, #31
 8016402:	d502      	bpl.n	801640a <_printf_float+0x1a6>
 8016404:	3301      	adds	r3, #1
 8016406:	440b      	add	r3, r1
 8016408:	6123      	str	r3, [r4, #16]
 801640a:	65a1      	str	r1, [r4, #88]	; 0x58
 801640c:	f04f 0900 	mov.w	r9, #0
 8016410:	e7de      	b.n	80163d0 <_printf_float+0x16c>
 8016412:	b913      	cbnz	r3, 801641a <_printf_float+0x1b6>
 8016414:	6822      	ldr	r2, [r4, #0]
 8016416:	07d2      	lsls	r2, r2, #31
 8016418:	d501      	bpl.n	801641e <_printf_float+0x1ba>
 801641a:	3302      	adds	r3, #2
 801641c:	e7f4      	b.n	8016408 <_printf_float+0x1a4>
 801641e:	2301      	movs	r3, #1
 8016420:	e7f2      	b.n	8016408 <_printf_float+0x1a4>
 8016422:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8016426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016428:	4299      	cmp	r1, r3
 801642a:	db05      	blt.n	8016438 <_printf_float+0x1d4>
 801642c:	6823      	ldr	r3, [r4, #0]
 801642e:	6121      	str	r1, [r4, #16]
 8016430:	07d8      	lsls	r0, r3, #31
 8016432:	d5ea      	bpl.n	801640a <_printf_float+0x1a6>
 8016434:	1c4b      	adds	r3, r1, #1
 8016436:	e7e7      	b.n	8016408 <_printf_float+0x1a4>
 8016438:	2900      	cmp	r1, #0
 801643a:	bfd4      	ite	le
 801643c:	f1c1 0202 	rsble	r2, r1, #2
 8016440:	2201      	movgt	r2, #1
 8016442:	4413      	add	r3, r2
 8016444:	e7e0      	b.n	8016408 <_printf_float+0x1a4>
 8016446:	6823      	ldr	r3, [r4, #0]
 8016448:	055a      	lsls	r2, r3, #21
 801644a:	d407      	bmi.n	801645c <_printf_float+0x1f8>
 801644c:	6923      	ldr	r3, [r4, #16]
 801644e:	4642      	mov	r2, r8
 8016450:	4631      	mov	r1, r6
 8016452:	4628      	mov	r0, r5
 8016454:	47b8      	blx	r7
 8016456:	3001      	adds	r0, #1
 8016458:	d12c      	bne.n	80164b4 <_printf_float+0x250>
 801645a:	e764      	b.n	8016326 <_printf_float+0xc2>
 801645c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016460:	f240 80e0 	bls.w	8016624 <_printf_float+0x3c0>
 8016464:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016468:	2200      	movs	r2, #0
 801646a:	2300      	movs	r3, #0
 801646c:	f7ea fb2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8016470:	2800      	cmp	r0, #0
 8016472:	d034      	beq.n	80164de <_printf_float+0x27a>
 8016474:	4a37      	ldr	r2, [pc, #220]	; (8016554 <_printf_float+0x2f0>)
 8016476:	2301      	movs	r3, #1
 8016478:	4631      	mov	r1, r6
 801647a:	4628      	mov	r0, r5
 801647c:	47b8      	blx	r7
 801647e:	3001      	adds	r0, #1
 8016480:	f43f af51 	beq.w	8016326 <_printf_float+0xc2>
 8016484:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016488:	429a      	cmp	r2, r3
 801648a:	db02      	blt.n	8016492 <_printf_float+0x22e>
 801648c:	6823      	ldr	r3, [r4, #0]
 801648e:	07d8      	lsls	r0, r3, #31
 8016490:	d510      	bpl.n	80164b4 <_printf_float+0x250>
 8016492:	ee18 3a10 	vmov	r3, s16
 8016496:	4652      	mov	r2, sl
 8016498:	4631      	mov	r1, r6
 801649a:	4628      	mov	r0, r5
 801649c:	47b8      	blx	r7
 801649e:	3001      	adds	r0, #1
 80164a0:	f43f af41 	beq.w	8016326 <_printf_float+0xc2>
 80164a4:	f04f 0800 	mov.w	r8, #0
 80164a8:	f104 091a 	add.w	r9, r4, #26
 80164ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164ae:	3b01      	subs	r3, #1
 80164b0:	4543      	cmp	r3, r8
 80164b2:	dc09      	bgt.n	80164c8 <_printf_float+0x264>
 80164b4:	6823      	ldr	r3, [r4, #0]
 80164b6:	079b      	lsls	r3, r3, #30
 80164b8:	f100 8105 	bmi.w	80166c6 <_printf_float+0x462>
 80164bc:	68e0      	ldr	r0, [r4, #12]
 80164be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80164c0:	4298      	cmp	r0, r3
 80164c2:	bfb8      	it	lt
 80164c4:	4618      	movlt	r0, r3
 80164c6:	e730      	b.n	801632a <_printf_float+0xc6>
 80164c8:	2301      	movs	r3, #1
 80164ca:	464a      	mov	r2, r9
 80164cc:	4631      	mov	r1, r6
 80164ce:	4628      	mov	r0, r5
 80164d0:	47b8      	blx	r7
 80164d2:	3001      	adds	r0, #1
 80164d4:	f43f af27 	beq.w	8016326 <_printf_float+0xc2>
 80164d8:	f108 0801 	add.w	r8, r8, #1
 80164dc:	e7e6      	b.n	80164ac <_printf_float+0x248>
 80164de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	dc39      	bgt.n	8016558 <_printf_float+0x2f4>
 80164e4:	4a1b      	ldr	r2, [pc, #108]	; (8016554 <_printf_float+0x2f0>)
 80164e6:	2301      	movs	r3, #1
 80164e8:	4631      	mov	r1, r6
 80164ea:	4628      	mov	r0, r5
 80164ec:	47b8      	blx	r7
 80164ee:	3001      	adds	r0, #1
 80164f0:	f43f af19 	beq.w	8016326 <_printf_float+0xc2>
 80164f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80164f8:	4313      	orrs	r3, r2
 80164fa:	d102      	bne.n	8016502 <_printf_float+0x29e>
 80164fc:	6823      	ldr	r3, [r4, #0]
 80164fe:	07d9      	lsls	r1, r3, #31
 8016500:	d5d8      	bpl.n	80164b4 <_printf_float+0x250>
 8016502:	ee18 3a10 	vmov	r3, s16
 8016506:	4652      	mov	r2, sl
 8016508:	4631      	mov	r1, r6
 801650a:	4628      	mov	r0, r5
 801650c:	47b8      	blx	r7
 801650e:	3001      	adds	r0, #1
 8016510:	f43f af09 	beq.w	8016326 <_printf_float+0xc2>
 8016514:	f04f 0900 	mov.w	r9, #0
 8016518:	f104 0a1a 	add.w	sl, r4, #26
 801651c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801651e:	425b      	negs	r3, r3
 8016520:	454b      	cmp	r3, r9
 8016522:	dc01      	bgt.n	8016528 <_printf_float+0x2c4>
 8016524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016526:	e792      	b.n	801644e <_printf_float+0x1ea>
 8016528:	2301      	movs	r3, #1
 801652a:	4652      	mov	r2, sl
 801652c:	4631      	mov	r1, r6
 801652e:	4628      	mov	r0, r5
 8016530:	47b8      	blx	r7
 8016532:	3001      	adds	r0, #1
 8016534:	f43f aef7 	beq.w	8016326 <_printf_float+0xc2>
 8016538:	f109 0901 	add.w	r9, r9, #1
 801653c:	e7ee      	b.n	801651c <_printf_float+0x2b8>
 801653e:	bf00      	nop
 8016540:	7fefffff 	.word	0x7fefffff
 8016544:	0801c514 	.word	0x0801c514
 8016548:	0801c518 	.word	0x0801c518
 801654c:	0801c520 	.word	0x0801c520
 8016550:	0801c51c 	.word	0x0801c51c
 8016554:	0801c524 	.word	0x0801c524
 8016558:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801655a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801655c:	429a      	cmp	r2, r3
 801655e:	bfa8      	it	ge
 8016560:	461a      	movge	r2, r3
 8016562:	2a00      	cmp	r2, #0
 8016564:	4691      	mov	r9, r2
 8016566:	dc37      	bgt.n	80165d8 <_printf_float+0x374>
 8016568:	f04f 0b00 	mov.w	fp, #0
 801656c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016570:	f104 021a 	add.w	r2, r4, #26
 8016574:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016576:	9305      	str	r3, [sp, #20]
 8016578:	eba3 0309 	sub.w	r3, r3, r9
 801657c:	455b      	cmp	r3, fp
 801657e:	dc33      	bgt.n	80165e8 <_printf_float+0x384>
 8016580:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016584:	429a      	cmp	r2, r3
 8016586:	db3b      	blt.n	8016600 <_printf_float+0x39c>
 8016588:	6823      	ldr	r3, [r4, #0]
 801658a:	07da      	lsls	r2, r3, #31
 801658c:	d438      	bmi.n	8016600 <_printf_float+0x39c>
 801658e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016590:	9b05      	ldr	r3, [sp, #20]
 8016592:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016594:	1ad3      	subs	r3, r2, r3
 8016596:	eba2 0901 	sub.w	r9, r2, r1
 801659a:	4599      	cmp	r9, r3
 801659c:	bfa8      	it	ge
 801659e:	4699      	movge	r9, r3
 80165a0:	f1b9 0f00 	cmp.w	r9, #0
 80165a4:	dc35      	bgt.n	8016612 <_printf_float+0x3ae>
 80165a6:	f04f 0800 	mov.w	r8, #0
 80165aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80165ae:	f104 0a1a 	add.w	sl, r4, #26
 80165b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80165b6:	1a9b      	subs	r3, r3, r2
 80165b8:	eba3 0309 	sub.w	r3, r3, r9
 80165bc:	4543      	cmp	r3, r8
 80165be:	f77f af79 	ble.w	80164b4 <_printf_float+0x250>
 80165c2:	2301      	movs	r3, #1
 80165c4:	4652      	mov	r2, sl
 80165c6:	4631      	mov	r1, r6
 80165c8:	4628      	mov	r0, r5
 80165ca:	47b8      	blx	r7
 80165cc:	3001      	adds	r0, #1
 80165ce:	f43f aeaa 	beq.w	8016326 <_printf_float+0xc2>
 80165d2:	f108 0801 	add.w	r8, r8, #1
 80165d6:	e7ec      	b.n	80165b2 <_printf_float+0x34e>
 80165d8:	4613      	mov	r3, r2
 80165da:	4631      	mov	r1, r6
 80165dc:	4642      	mov	r2, r8
 80165de:	4628      	mov	r0, r5
 80165e0:	47b8      	blx	r7
 80165e2:	3001      	adds	r0, #1
 80165e4:	d1c0      	bne.n	8016568 <_printf_float+0x304>
 80165e6:	e69e      	b.n	8016326 <_printf_float+0xc2>
 80165e8:	2301      	movs	r3, #1
 80165ea:	4631      	mov	r1, r6
 80165ec:	4628      	mov	r0, r5
 80165ee:	9205      	str	r2, [sp, #20]
 80165f0:	47b8      	blx	r7
 80165f2:	3001      	adds	r0, #1
 80165f4:	f43f ae97 	beq.w	8016326 <_printf_float+0xc2>
 80165f8:	9a05      	ldr	r2, [sp, #20]
 80165fa:	f10b 0b01 	add.w	fp, fp, #1
 80165fe:	e7b9      	b.n	8016574 <_printf_float+0x310>
 8016600:	ee18 3a10 	vmov	r3, s16
 8016604:	4652      	mov	r2, sl
 8016606:	4631      	mov	r1, r6
 8016608:	4628      	mov	r0, r5
 801660a:	47b8      	blx	r7
 801660c:	3001      	adds	r0, #1
 801660e:	d1be      	bne.n	801658e <_printf_float+0x32a>
 8016610:	e689      	b.n	8016326 <_printf_float+0xc2>
 8016612:	9a05      	ldr	r2, [sp, #20]
 8016614:	464b      	mov	r3, r9
 8016616:	4442      	add	r2, r8
 8016618:	4631      	mov	r1, r6
 801661a:	4628      	mov	r0, r5
 801661c:	47b8      	blx	r7
 801661e:	3001      	adds	r0, #1
 8016620:	d1c1      	bne.n	80165a6 <_printf_float+0x342>
 8016622:	e680      	b.n	8016326 <_printf_float+0xc2>
 8016624:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016626:	2a01      	cmp	r2, #1
 8016628:	dc01      	bgt.n	801662e <_printf_float+0x3ca>
 801662a:	07db      	lsls	r3, r3, #31
 801662c:	d538      	bpl.n	80166a0 <_printf_float+0x43c>
 801662e:	2301      	movs	r3, #1
 8016630:	4642      	mov	r2, r8
 8016632:	4631      	mov	r1, r6
 8016634:	4628      	mov	r0, r5
 8016636:	47b8      	blx	r7
 8016638:	3001      	adds	r0, #1
 801663a:	f43f ae74 	beq.w	8016326 <_printf_float+0xc2>
 801663e:	ee18 3a10 	vmov	r3, s16
 8016642:	4652      	mov	r2, sl
 8016644:	4631      	mov	r1, r6
 8016646:	4628      	mov	r0, r5
 8016648:	47b8      	blx	r7
 801664a:	3001      	adds	r0, #1
 801664c:	f43f ae6b 	beq.w	8016326 <_printf_float+0xc2>
 8016650:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016654:	2200      	movs	r2, #0
 8016656:	2300      	movs	r3, #0
 8016658:	f7ea fa36 	bl	8000ac8 <__aeabi_dcmpeq>
 801665c:	b9d8      	cbnz	r0, 8016696 <_printf_float+0x432>
 801665e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016660:	f108 0201 	add.w	r2, r8, #1
 8016664:	3b01      	subs	r3, #1
 8016666:	4631      	mov	r1, r6
 8016668:	4628      	mov	r0, r5
 801666a:	47b8      	blx	r7
 801666c:	3001      	adds	r0, #1
 801666e:	d10e      	bne.n	801668e <_printf_float+0x42a>
 8016670:	e659      	b.n	8016326 <_printf_float+0xc2>
 8016672:	2301      	movs	r3, #1
 8016674:	4652      	mov	r2, sl
 8016676:	4631      	mov	r1, r6
 8016678:	4628      	mov	r0, r5
 801667a:	47b8      	blx	r7
 801667c:	3001      	adds	r0, #1
 801667e:	f43f ae52 	beq.w	8016326 <_printf_float+0xc2>
 8016682:	f108 0801 	add.w	r8, r8, #1
 8016686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016688:	3b01      	subs	r3, #1
 801668a:	4543      	cmp	r3, r8
 801668c:	dcf1      	bgt.n	8016672 <_printf_float+0x40e>
 801668e:	464b      	mov	r3, r9
 8016690:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016694:	e6dc      	b.n	8016450 <_printf_float+0x1ec>
 8016696:	f04f 0800 	mov.w	r8, #0
 801669a:	f104 0a1a 	add.w	sl, r4, #26
 801669e:	e7f2      	b.n	8016686 <_printf_float+0x422>
 80166a0:	2301      	movs	r3, #1
 80166a2:	4642      	mov	r2, r8
 80166a4:	e7df      	b.n	8016666 <_printf_float+0x402>
 80166a6:	2301      	movs	r3, #1
 80166a8:	464a      	mov	r2, r9
 80166aa:	4631      	mov	r1, r6
 80166ac:	4628      	mov	r0, r5
 80166ae:	47b8      	blx	r7
 80166b0:	3001      	adds	r0, #1
 80166b2:	f43f ae38 	beq.w	8016326 <_printf_float+0xc2>
 80166b6:	f108 0801 	add.w	r8, r8, #1
 80166ba:	68e3      	ldr	r3, [r4, #12]
 80166bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80166be:	1a5b      	subs	r3, r3, r1
 80166c0:	4543      	cmp	r3, r8
 80166c2:	dcf0      	bgt.n	80166a6 <_printf_float+0x442>
 80166c4:	e6fa      	b.n	80164bc <_printf_float+0x258>
 80166c6:	f04f 0800 	mov.w	r8, #0
 80166ca:	f104 0919 	add.w	r9, r4, #25
 80166ce:	e7f4      	b.n	80166ba <_printf_float+0x456>

080166d0 <_printf_common>:
 80166d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166d4:	4616      	mov	r6, r2
 80166d6:	4699      	mov	r9, r3
 80166d8:	688a      	ldr	r2, [r1, #8]
 80166da:	690b      	ldr	r3, [r1, #16]
 80166dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80166e0:	4293      	cmp	r3, r2
 80166e2:	bfb8      	it	lt
 80166e4:	4613      	movlt	r3, r2
 80166e6:	6033      	str	r3, [r6, #0]
 80166e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80166ec:	4607      	mov	r7, r0
 80166ee:	460c      	mov	r4, r1
 80166f0:	b10a      	cbz	r2, 80166f6 <_printf_common+0x26>
 80166f2:	3301      	adds	r3, #1
 80166f4:	6033      	str	r3, [r6, #0]
 80166f6:	6823      	ldr	r3, [r4, #0]
 80166f8:	0699      	lsls	r1, r3, #26
 80166fa:	bf42      	ittt	mi
 80166fc:	6833      	ldrmi	r3, [r6, #0]
 80166fe:	3302      	addmi	r3, #2
 8016700:	6033      	strmi	r3, [r6, #0]
 8016702:	6825      	ldr	r5, [r4, #0]
 8016704:	f015 0506 	ands.w	r5, r5, #6
 8016708:	d106      	bne.n	8016718 <_printf_common+0x48>
 801670a:	f104 0a19 	add.w	sl, r4, #25
 801670e:	68e3      	ldr	r3, [r4, #12]
 8016710:	6832      	ldr	r2, [r6, #0]
 8016712:	1a9b      	subs	r3, r3, r2
 8016714:	42ab      	cmp	r3, r5
 8016716:	dc26      	bgt.n	8016766 <_printf_common+0x96>
 8016718:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801671c:	1e13      	subs	r3, r2, #0
 801671e:	6822      	ldr	r2, [r4, #0]
 8016720:	bf18      	it	ne
 8016722:	2301      	movne	r3, #1
 8016724:	0692      	lsls	r2, r2, #26
 8016726:	d42b      	bmi.n	8016780 <_printf_common+0xb0>
 8016728:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801672c:	4649      	mov	r1, r9
 801672e:	4638      	mov	r0, r7
 8016730:	47c0      	blx	r8
 8016732:	3001      	adds	r0, #1
 8016734:	d01e      	beq.n	8016774 <_printf_common+0xa4>
 8016736:	6823      	ldr	r3, [r4, #0]
 8016738:	68e5      	ldr	r5, [r4, #12]
 801673a:	6832      	ldr	r2, [r6, #0]
 801673c:	f003 0306 	and.w	r3, r3, #6
 8016740:	2b04      	cmp	r3, #4
 8016742:	bf08      	it	eq
 8016744:	1aad      	subeq	r5, r5, r2
 8016746:	68a3      	ldr	r3, [r4, #8]
 8016748:	6922      	ldr	r2, [r4, #16]
 801674a:	bf0c      	ite	eq
 801674c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016750:	2500      	movne	r5, #0
 8016752:	4293      	cmp	r3, r2
 8016754:	bfc4      	itt	gt
 8016756:	1a9b      	subgt	r3, r3, r2
 8016758:	18ed      	addgt	r5, r5, r3
 801675a:	2600      	movs	r6, #0
 801675c:	341a      	adds	r4, #26
 801675e:	42b5      	cmp	r5, r6
 8016760:	d11a      	bne.n	8016798 <_printf_common+0xc8>
 8016762:	2000      	movs	r0, #0
 8016764:	e008      	b.n	8016778 <_printf_common+0xa8>
 8016766:	2301      	movs	r3, #1
 8016768:	4652      	mov	r2, sl
 801676a:	4649      	mov	r1, r9
 801676c:	4638      	mov	r0, r7
 801676e:	47c0      	blx	r8
 8016770:	3001      	adds	r0, #1
 8016772:	d103      	bne.n	801677c <_printf_common+0xac>
 8016774:	f04f 30ff 	mov.w	r0, #4294967295
 8016778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801677c:	3501      	adds	r5, #1
 801677e:	e7c6      	b.n	801670e <_printf_common+0x3e>
 8016780:	18e1      	adds	r1, r4, r3
 8016782:	1c5a      	adds	r2, r3, #1
 8016784:	2030      	movs	r0, #48	; 0x30
 8016786:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801678a:	4422      	add	r2, r4
 801678c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016790:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016794:	3302      	adds	r3, #2
 8016796:	e7c7      	b.n	8016728 <_printf_common+0x58>
 8016798:	2301      	movs	r3, #1
 801679a:	4622      	mov	r2, r4
 801679c:	4649      	mov	r1, r9
 801679e:	4638      	mov	r0, r7
 80167a0:	47c0      	blx	r8
 80167a2:	3001      	adds	r0, #1
 80167a4:	d0e6      	beq.n	8016774 <_printf_common+0xa4>
 80167a6:	3601      	adds	r6, #1
 80167a8:	e7d9      	b.n	801675e <_printf_common+0x8e>
	...

080167ac <_printf_i>:
 80167ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80167b0:	460c      	mov	r4, r1
 80167b2:	4691      	mov	r9, r2
 80167b4:	7e27      	ldrb	r7, [r4, #24]
 80167b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80167b8:	2f78      	cmp	r7, #120	; 0x78
 80167ba:	4680      	mov	r8, r0
 80167bc:	469a      	mov	sl, r3
 80167be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80167c2:	d807      	bhi.n	80167d4 <_printf_i+0x28>
 80167c4:	2f62      	cmp	r7, #98	; 0x62
 80167c6:	d80a      	bhi.n	80167de <_printf_i+0x32>
 80167c8:	2f00      	cmp	r7, #0
 80167ca:	f000 80d8 	beq.w	801697e <_printf_i+0x1d2>
 80167ce:	2f58      	cmp	r7, #88	; 0x58
 80167d0:	f000 80a3 	beq.w	801691a <_printf_i+0x16e>
 80167d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80167d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80167dc:	e03a      	b.n	8016854 <_printf_i+0xa8>
 80167de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80167e2:	2b15      	cmp	r3, #21
 80167e4:	d8f6      	bhi.n	80167d4 <_printf_i+0x28>
 80167e6:	a001      	add	r0, pc, #4	; (adr r0, 80167ec <_printf_i+0x40>)
 80167e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80167ec:	08016845 	.word	0x08016845
 80167f0:	08016859 	.word	0x08016859
 80167f4:	080167d5 	.word	0x080167d5
 80167f8:	080167d5 	.word	0x080167d5
 80167fc:	080167d5 	.word	0x080167d5
 8016800:	080167d5 	.word	0x080167d5
 8016804:	08016859 	.word	0x08016859
 8016808:	080167d5 	.word	0x080167d5
 801680c:	080167d5 	.word	0x080167d5
 8016810:	080167d5 	.word	0x080167d5
 8016814:	080167d5 	.word	0x080167d5
 8016818:	08016965 	.word	0x08016965
 801681c:	08016889 	.word	0x08016889
 8016820:	08016947 	.word	0x08016947
 8016824:	080167d5 	.word	0x080167d5
 8016828:	080167d5 	.word	0x080167d5
 801682c:	08016987 	.word	0x08016987
 8016830:	080167d5 	.word	0x080167d5
 8016834:	08016889 	.word	0x08016889
 8016838:	080167d5 	.word	0x080167d5
 801683c:	080167d5 	.word	0x080167d5
 8016840:	0801694f 	.word	0x0801694f
 8016844:	680b      	ldr	r3, [r1, #0]
 8016846:	1d1a      	adds	r2, r3, #4
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	600a      	str	r2, [r1, #0]
 801684c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016850:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016854:	2301      	movs	r3, #1
 8016856:	e0a3      	b.n	80169a0 <_printf_i+0x1f4>
 8016858:	6825      	ldr	r5, [r4, #0]
 801685a:	6808      	ldr	r0, [r1, #0]
 801685c:	062e      	lsls	r6, r5, #24
 801685e:	f100 0304 	add.w	r3, r0, #4
 8016862:	d50a      	bpl.n	801687a <_printf_i+0xce>
 8016864:	6805      	ldr	r5, [r0, #0]
 8016866:	600b      	str	r3, [r1, #0]
 8016868:	2d00      	cmp	r5, #0
 801686a:	da03      	bge.n	8016874 <_printf_i+0xc8>
 801686c:	232d      	movs	r3, #45	; 0x2d
 801686e:	426d      	negs	r5, r5
 8016870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016874:	485e      	ldr	r0, [pc, #376]	; (80169f0 <_printf_i+0x244>)
 8016876:	230a      	movs	r3, #10
 8016878:	e019      	b.n	80168ae <_printf_i+0x102>
 801687a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801687e:	6805      	ldr	r5, [r0, #0]
 8016880:	600b      	str	r3, [r1, #0]
 8016882:	bf18      	it	ne
 8016884:	b22d      	sxthne	r5, r5
 8016886:	e7ef      	b.n	8016868 <_printf_i+0xbc>
 8016888:	680b      	ldr	r3, [r1, #0]
 801688a:	6825      	ldr	r5, [r4, #0]
 801688c:	1d18      	adds	r0, r3, #4
 801688e:	6008      	str	r0, [r1, #0]
 8016890:	0628      	lsls	r0, r5, #24
 8016892:	d501      	bpl.n	8016898 <_printf_i+0xec>
 8016894:	681d      	ldr	r5, [r3, #0]
 8016896:	e002      	b.n	801689e <_printf_i+0xf2>
 8016898:	0669      	lsls	r1, r5, #25
 801689a:	d5fb      	bpl.n	8016894 <_printf_i+0xe8>
 801689c:	881d      	ldrh	r5, [r3, #0]
 801689e:	4854      	ldr	r0, [pc, #336]	; (80169f0 <_printf_i+0x244>)
 80168a0:	2f6f      	cmp	r7, #111	; 0x6f
 80168a2:	bf0c      	ite	eq
 80168a4:	2308      	moveq	r3, #8
 80168a6:	230a      	movne	r3, #10
 80168a8:	2100      	movs	r1, #0
 80168aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80168ae:	6866      	ldr	r6, [r4, #4]
 80168b0:	60a6      	str	r6, [r4, #8]
 80168b2:	2e00      	cmp	r6, #0
 80168b4:	bfa2      	ittt	ge
 80168b6:	6821      	ldrge	r1, [r4, #0]
 80168b8:	f021 0104 	bicge.w	r1, r1, #4
 80168bc:	6021      	strge	r1, [r4, #0]
 80168be:	b90d      	cbnz	r5, 80168c4 <_printf_i+0x118>
 80168c0:	2e00      	cmp	r6, #0
 80168c2:	d04d      	beq.n	8016960 <_printf_i+0x1b4>
 80168c4:	4616      	mov	r6, r2
 80168c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80168ca:	fb03 5711 	mls	r7, r3, r1, r5
 80168ce:	5dc7      	ldrb	r7, [r0, r7]
 80168d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80168d4:	462f      	mov	r7, r5
 80168d6:	42bb      	cmp	r3, r7
 80168d8:	460d      	mov	r5, r1
 80168da:	d9f4      	bls.n	80168c6 <_printf_i+0x11a>
 80168dc:	2b08      	cmp	r3, #8
 80168de:	d10b      	bne.n	80168f8 <_printf_i+0x14c>
 80168e0:	6823      	ldr	r3, [r4, #0]
 80168e2:	07df      	lsls	r7, r3, #31
 80168e4:	d508      	bpl.n	80168f8 <_printf_i+0x14c>
 80168e6:	6923      	ldr	r3, [r4, #16]
 80168e8:	6861      	ldr	r1, [r4, #4]
 80168ea:	4299      	cmp	r1, r3
 80168ec:	bfde      	ittt	le
 80168ee:	2330      	movle	r3, #48	; 0x30
 80168f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80168f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80168f8:	1b92      	subs	r2, r2, r6
 80168fa:	6122      	str	r2, [r4, #16]
 80168fc:	f8cd a000 	str.w	sl, [sp]
 8016900:	464b      	mov	r3, r9
 8016902:	aa03      	add	r2, sp, #12
 8016904:	4621      	mov	r1, r4
 8016906:	4640      	mov	r0, r8
 8016908:	f7ff fee2 	bl	80166d0 <_printf_common>
 801690c:	3001      	adds	r0, #1
 801690e:	d14c      	bne.n	80169aa <_printf_i+0x1fe>
 8016910:	f04f 30ff 	mov.w	r0, #4294967295
 8016914:	b004      	add	sp, #16
 8016916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801691a:	4835      	ldr	r0, [pc, #212]	; (80169f0 <_printf_i+0x244>)
 801691c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016920:	6823      	ldr	r3, [r4, #0]
 8016922:	680e      	ldr	r6, [r1, #0]
 8016924:	061f      	lsls	r7, r3, #24
 8016926:	f856 5b04 	ldr.w	r5, [r6], #4
 801692a:	600e      	str	r6, [r1, #0]
 801692c:	d514      	bpl.n	8016958 <_printf_i+0x1ac>
 801692e:	07d9      	lsls	r1, r3, #31
 8016930:	bf44      	itt	mi
 8016932:	f043 0320 	orrmi.w	r3, r3, #32
 8016936:	6023      	strmi	r3, [r4, #0]
 8016938:	b91d      	cbnz	r5, 8016942 <_printf_i+0x196>
 801693a:	6823      	ldr	r3, [r4, #0]
 801693c:	f023 0320 	bic.w	r3, r3, #32
 8016940:	6023      	str	r3, [r4, #0]
 8016942:	2310      	movs	r3, #16
 8016944:	e7b0      	b.n	80168a8 <_printf_i+0xfc>
 8016946:	6823      	ldr	r3, [r4, #0]
 8016948:	f043 0320 	orr.w	r3, r3, #32
 801694c:	6023      	str	r3, [r4, #0]
 801694e:	2378      	movs	r3, #120	; 0x78
 8016950:	4828      	ldr	r0, [pc, #160]	; (80169f4 <_printf_i+0x248>)
 8016952:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016956:	e7e3      	b.n	8016920 <_printf_i+0x174>
 8016958:	065e      	lsls	r6, r3, #25
 801695a:	bf48      	it	mi
 801695c:	b2ad      	uxthmi	r5, r5
 801695e:	e7e6      	b.n	801692e <_printf_i+0x182>
 8016960:	4616      	mov	r6, r2
 8016962:	e7bb      	b.n	80168dc <_printf_i+0x130>
 8016964:	680b      	ldr	r3, [r1, #0]
 8016966:	6826      	ldr	r6, [r4, #0]
 8016968:	6960      	ldr	r0, [r4, #20]
 801696a:	1d1d      	adds	r5, r3, #4
 801696c:	600d      	str	r5, [r1, #0]
 801696e:	0635      	lsls	r5, r6, #24
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	d501      	bpl.n	8016978 <_printf_i+0x1cc>
 8016974:	6018      	str	r0, [r3, #0]
 8016976:	e002      	b.n	801697e <_printf_i+0x1d2>
 8016978:	0671      	lsls	r1, r6, #25
 801697a:	d5fb      	bpl.n	8016974 <_printf_i+0x1c8>
 801697c:	8018      	strh	r0, [r3, #0]
 801697e:	2300      	movs	r3, #0
 8016980:	6123      	str	r3, [r4, #16]
 8016982:	4616      	mov	r6, r2
 8016984:	e7ba      	b.n	80168fc <_printf_i+0x150>
 8016986:	680b      	ldr	r3, [r1, #0]
 8016988:	1d1a      	adds	r2, r3, #4
 801698a:	600a      	str	r2, [r1, #0]
 801698c:	681e      	ldr	r6, [r3, #0]
 801698e:	6862      	ldr	r2, [r4, #4]
 8016990:	2100      	movs	r1, #0
 8016992:	4630      	mov	r0, r6
 8016994:	f7e9 fc24 	bl	80001e0 <memchr>
 8016998:	b108      	cbz	r0, 801699e <_printf_i+0x1f2>
 801699a:	1b80      	subs	r0, r0, r6
 801699c:	6060      	str	r0, [r4, #4]
 801699e:	6863      	ldr	r3, [r4, #4]
 80169a0:	6123      	str	r3, [r4, #16]
 80169a2:	2300      	movs	r3, #0
 80169a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80169a8:	e7a8      	b.n	80168fc <_printf_i+0x150>
 80169aa:	6923      	ldr	r3, [r4, #16]
 80169ac:	4632      	mov	r2, r6
 80169ae:	4649      	mov	r1, r9
 80169b0:	4640      	mov	r0, r8
 80169b2:	47d0      	blx	sl
 80169b4:	3001      	adds	r0, #1
 80169b6:	d0ab      	beq.n	8016910 <_printf_i+0x164>
 80169b8:	6823      	ldr	r3, [r4, #0]
 80169ba:	079b      	lsls	r3, r3, #30
 80169bc:	d413      	bmi.n	80169e6 <_printf_i+0x23a>
 80169be:	68e0      	ldr	r0, [r4, #12]
 80169c0:	9b03      	ldr	r3, [sp, #12]
 80169c2:	4298      	cmp	r0, r3
 80169c4:	bfb8      	it	lt
 80169c6:	4618      	movlt	r0, r3
 80169c8:	e7a4      	b.n	8016914 <_printf_i+0x168>
 80169ca:	2301      	movs	r3, #1
 80169cc:	4632      	mov	r2, r6
 80169ce:	4649      	mov	r1, r9
 80169d0:	4640      	mov	r0, r8
 80169d2:	47d0      	blx	sl
 80169d4:	3001      	adds	r0, #1
 80169d6:	d09b      	beq.n	8016910 <_printf_i+0x164>
 80169d8:	3501      	adds	r5, #1
 80169da:	68e3      	ldr	r3, [r4, #12]
 80169dc:	9903      	ldr	r1, [sp, #12]
 80169de:	1a5b      	subs	r3, r3, r1
 80169e0:	42ab      	cmp	r3, r5
 80169e2:	dcf2      	bgt.n	80169ca <_printf_i+0x21e>
 80169e4:	e7eb      	b.n	80169be <_printf_i+0x212>
 80169e6:	2500      	movs	r5, #0
 80169e8:	f104 0619 	add.w	r6, r4, #25
 80169ec:	e7f5      	b.n	80169da <_printf_i+0x22e>
 80169ee:	bf00      	nop
 80169f0:	0801c526 	.word	0x0801c526
 80169f4:	0801c537 	.word	0x0801c537

080169f8 <_scanf_float>:
 80169f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169fc:	b087      	sub	sp, #28
 80169fe:	4617      	mov	r7, r2
 8016a00:	9303      	str	r3, [sp, #12]
 8016a02:	688b      	ldr	r3, [r1, #8]
 8016a04:	1e5a      	subs	r2, r3, #1
 8016a06:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016a0a:	bf83      	ittte	hi
 8016a0c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016a10:	195b      	addhi	r3, r3, r5
 8016a12:	9302      	strhi	r3, [sp, #8]
 8016a14:	2300      	movls	r3, #0
 8016a16:	bf86      	itte	hi
 8016a18:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016a1c:	608b      	strhi	r3, [r1, #8]
 8016a1e:	9302      	strls	r3, [sp, #8]
 8016a20:	680b      	ldr	r3, [r1, #0]
 8016a22:	468b      	mov	fp, r1
 8016a24:	2500      	movs	r5, #0
 8016a26:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016a2a:	f84b 3b1c 	str.w	r3, [fp], #28
 8016a2e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016a32:	4680      	mov	r8, r0
 8016a34:	460c      	mov	r4, r1
 8016a36:	465e      	mov	r6, fp
 8016a38:	46aa      	mov	sl, r5
 8016a3a:	46a9      	mov	r9, r5
 8016a3c:	9501      	str	r5, [sp, #4]
 8016a3e:	68a2      	ldr	r2, [r4, #8]
 8016a40:	b152      	cbz	r2, 8016a58 <_scanf_float+0x60>
 8016a42:	683b      	ldr	r3, [r7, #0]
 8016a44:	781b      	ldrb	r3, [r3, #0]
 8016a46:	2b4e      	cmp	r3, #78	; 0x4e
 8016a48:	d864      	bhi.n	8016b14 <_scanf_float+0x11c>
 8016a4a:	2b40      	cmp	r3, #64	; 0x40
 8016a4c:	d83c      	bhi.n	8016ac8 <_scanf_float+0xd0>
 8016a4e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8016a52:	b2c8      	uxtb	r0, r1
 8016a54:	280e      	cmp	r0, #14
 8016a56:	d93a      	bls.n	8016ace <_scanf_float+0xd6>
 8016a58:	f1b9 0f00 	cmp.w	r9, #0
 8016a5c:	d003      	beq.n	8016a66 <_scanf_float+0x6e>
 8016a5e:	6823      	ldr	r3, [r4, #0]
 8016a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016a64:	6023      	str	r3, [r4, #0]
 8016a66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016a6a:	f1ba 0f01 	cmp.w	sl, #1
 8016a6e:	f200 8113 	bhi.w	8016c98 <_scanf_float+0x2a0>
 8016a72:	455e      	cmp	r6, fp
 8016a74:	f200 8105 	bhi.w	8016c82 <_scanf_float+0x28a>
 8016a78:	2501      	movs	r5, #1
 8016a7a:	4628      	mov	r0, r5
 8016a7c:	b007      	add	sp, #28
 8016a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a82:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8016a86:	2a0d      	cmp	r2, #13
 8016a88:	d8e6      	bhi.n	8016a58 <_scanf_float+0x60>
 8016a8a:	a101      	add	r1, pc, #4	; (adr r1, 8016a90 <_scanf_float+0x98>)
 8016a8c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016a90:	08016bcf 	.word	0x08016bcf
 8016a94:	08016a59 	.word	0x08016a59
 8016a98:	08016a59 	.word	0x08016a59
 8016a9c:	08016a59 	.word	0x08016a59
 8016aa0:	08016c2f 	.word	0x08016c2f
 8016aa4:	08016c07 	.word	0x08016c07
 8016aa8:	08016a59 	.word	0x08016a59
 8016aac:	08016a59 	.word	0x08016a59
 8016ab0:	08016bdd 	.word	0x08016bdd
 8016ab4:	08016a59 	.word	0x08016a59
 8016ab8:	08016a59 	.word	0x08016a59
 8016abc:	08016a59 	.word	0x08016a59
 8016ac0:	08016a59 	.word	0x08016a59
 8016ac4:	08016b95 	.word	0x08016b95
 8016ac8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8016acc:	e7db      	b.n	8016a86 <_scanf_float+0x8e>
 8016ace:	290e      	cmp	r1, #14
 8016ad0:	d8c2      	bhi.n	8016a58 <_scanf_float+0x60>
 8016ad2:	a001      	add	r0, pc, #4	; (adr r0, 8016ad8 <_scanf_float+0xe0>)
 8016ad4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016ad8:	08016b87 	.word	0x08016b87
 8016adc:	08016a59 	.word	0x08016a59
 8016ae0:	08016b87 	.word	0x08016b87
 8016ae4:	08016c1b 	.word	0x08016c1b
 8016ae8:	08016a59 	.word	0x08016a59
 8016aec:	08016b35 	.word	0x08016b35
 8016af0:	08016b71 	.word	0x08016b71
 8016af4:	08016b71 	.word	0x08016b71
 8016af8:	08016b71 	.word	0x08016b71
 8016afc:	08016b71 	.word	0x08016b71
 8016b00:	08016b71 	.word	0x08016b71
 8016b04:	08016b71 	.word	0x08016b71
 8016b08:	08016b71 	.word	0x08016b71
 8016b0c:	08016b71 	.word	0x08016b71
 8016b10:	08016b71 	.word	0x08016b71
 8016b14:	2b6e      	cmp	r3, #110	; 0x6e
 8016b16:	d809      	bhi.n	8016b2c <_scanf_float+0x134>
 8016b18:	2b60      	cmp	r3, #96	; 0x60
 8016b1a:	d8b2      	bhi.n	8016a82 <_scanf_float+0x8a>
 8016b1c:	2b54      	cmp	r3, #84	; 0x54
 8016b1e:	d077      	beq.n	8016c10 <_scanf_float+0x218>
 8016b20:	2b59      	cmp	r3, #89	; 0x59
 8016b22:	d199      	bne.n	8016a58 <_scanf_float+0x60>
 8016b24:	2d07      	cmp	r5, #7
 8016b26:	d197      	bne.n	8016a58 <_scanf_float+0x60>
 8016b28:	2508      	movs	r5, #8
 8016b2a:	e029      	b.n	8016b80 <_scanf_float+0x188>
 8016b2c:	2b74      	cmp	r3, #116	; 0x74
 8016b2e:	d06f      	beq.n	8016c10 <_scanf_float+0x218>
 8016b30:	2b79      	cmp	r3, #121	; 0x79
 8016b32:	e7f6      	b.n	8016b22 <_scanf_float+0x12a>
 8016b34:	6821      	ldr	r1, [r4, #0]
 8016b36:	05c8      	lsls	r0, r1, #23
 8016b38:	d51a      	bpl.n	8016b70 <_scanf_float+0x178>
 8016b3a:	9b02      	ldr	r3, [sp, #8]
 8016b3c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016b40:	6021      	str	r1, [r4, #0]
 8016b42:	f109 0901 	add.w	r9, r9, #1
 8016b46:	b11b      	cbz	r3, 8016b50 <_scanf_float+0x158>
 8016b48:	3b01      	subs	r3, #1
 8016b4a:	3201      	adds	r2, #1
 8016b4c:	9302      	str	r3, [sp, #8]
 8016b4e:	60a2      	str	r2, [r4, #8]
 8016b50:	68a3      	ldr	r3, [r4, #8]
 8016b52:	3b01      	subs	r3, #1
 8016b54:	60a3      	str	r3, [r4, #8]
 8016b56:	6923      	ldr	r3, [r4, #16]
 8016b58:	3301      	adds	r3, #1
 8016b5a:	6123      	str	r3, [r4, #16]
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	3b01      	subs	r3, #1
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	607b      	str	r3, [r7, #4]
 8016b64:	f340 8084 	ble.w	8016c70 <_scanf_float+0x278>
 8016b68:	683b      	ldr	r3, [r7, #0]
 8016b6a:	3301      	adds	r3, #1
 8016b6c:	603b      	str	r3, [r7, #0]
 8016b6e:	e766      	b.n	8016a3e <_scanf_float+0x46>
 8016b70:	eb1a 0f05 	cmn.w	sl, r5
 8016b74:	f47f af70 	bne.w	8016a58 <_scanf_float+0x60>
 8016b78:	6822      	ldr	r2, [r4, #0]
 8016b7a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8016b7e:	6022      	str	r2, [r4, #0]
 8016b80:	f806 3b01 	strb.w	r3, [r6], #1
 8016b84:	e7e4      	b.n	8016b50 <_scanf_float+0x158>
 8016b86:	6822      	ldr	r2, [r4, #0]
 8016b88:	0610      	lsls	r0, r2, #24
 8016b8a:	f57f af65 	bpl.w	8016a58 <_scanf_float+0x60>
 8016b8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016b92:	e7f4      	b.n	8016b7e <_scanf_float+0x186>
 8016b94:	f1ba 0f00 	cmp.w	sl, #0
 8016b98:	d10e      	bne.n	8016bb8 <_scanf_float+0x1c0>
 8016b9a:	f1b9 0f00 	cmp.w	r9, #0
 8016b9e:	d10e      	bne.n	8016bbe <_scanf_float+0x1c6>
 8016ba0:	6822      	ldr	r2, [r4, #0]
 8016ba2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016ba6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016baa:	d108      	bne.n	8016bbe <_scanf_float+0x1c6>
 8016bac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016bb0:	6022      	str	r2, [r4, #0]
 8016bb2:	f04f 0a01 	mov.w	sl, #1
 8016bb6:	e7e3      	b.n	8016b80 <_scanf_float+0x188>
 8016bb8:	f1ba 0f02 	cmp.w	sl, #2
 8016bbc:	d055      	beq.n	8016c6a <_scanf_float+0x272>
 8016bbe:	2d01      	cmp	r5, #1
 8016bc0:	d002      	beq.n	8016bc8 <_scanf_float+0x1d0>
 8016bc2:	2d04      	cmp	r5, #4
 8016bc4:	f47f af48 	bne.w	8016a58 <_scanf_float+0x60>
 8016bc8:	3501      	adds	r5, #1
 8016bca:	b2ed      	uxtb	r5, r5
 8016bcc:	e7d8      	b.n	8016b80 <_scanf_float+0x188>
 8016bce:	f1ba 0f01 	cmp.w	sl, #1
 8016bd2:	f47f af41 	bne.w	8016a58 <_scanf_float+0x60>
 8016bd6:	f04f 0a02 	mov.w	sl, #2
 8016bda:	e7d1      	b.n	8016b80 <_scanf_float+0x188>
 8016bdc:	b97d      	cbnz	r5, 8016bfe <_scanf_float+0x206>
 8016bde:	f1b9 0f00 	cmp.w	r9, #0
 8016be2:	f47f af3c 	bne.w	8016a5e <_scanf_float+0x66>
 8016be6:	6822      	ldr	r2, [r4, #0]
 8016be8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016bec:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016bf0:	f47f af39 	bne.w	8016a66 <_scanf_float+0x6e>
 8016bf4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016bf8:	6022      	str	r2, [r4, #0]
 8016bfa:	2501      	movs	r5, #1
 8016bfc:	e7c0      	b.n	8016b80 <_scanf_float+0x188>
 8016bfe:	2d03      	cmp	r5, #3
 8016c00:	d0e2      	beq.n	8016bc8 <_scanf_float+0x1d0>
 8016c02:	2d05      	cmp	r5, #5
 8016c04:	e7de      	b.n	8016bc4 <_scanf_float+0x1cc>
 8016c06:	2d02      	cmp	r5, #2
 8016c08:	f47f af26 	bne.w	8016a58 <_scanf_float+0x60>
 8016c0c:	2503      	movs	r5, #3
 8016c0e:	e7b7      	b.n	8016b80 <_scanf_float+0x188>
 8016c10:	2d06      	cmp	r5, #6
 8016c12:	f47f af21 	bne.w	8016a58 <_scanf_float+0x60>
 8016c16:	2507      	movs	r5, #7
 8016c18:	e7b2      	b.n	8016b80 <_scanf_float+0x188>
 8016c1a:	6822      	ldr	r2, [r4, #0]
 8016c1c:	0591      	lsls	r1, r2, #22
 8016c1e:	f57f af1b 	bpl.w	8016a58 <_scanf_float+0x60>
 8016c22:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8016c26:	6022      	str	r2, [r4, #0]
 8016c28:	f8cd 9004 	str.w	r9, [sp, #4]
 8016c2c:	e7a8      	b.n	8016b80 <_scanf_float+0x188>
 8016c2e:	6822      	ldr	r2, [r4, #0]
 8016c30:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8016c34:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016c38:	d006      	beq.n	8016c48 <_scanf_float+0x250>
 8016c3a:	0550      	lsls	r0, r2, #21
 8016c3c:	f57f af0c 	bpl.w	8016a58 <_scanf_float+0x60>
 8016c40:	f1b9 0f00 	cmp.w	r9, #0
 8016c44:	f43f af0f 	beq.w	8016a66 <_scanf_float+0x6e>
 8016c48:	0591      	lsls	r1, r2, #22
 8016c4a:	bf58      	it	pl
 8016c4c:	9901      	ldrpl	r1, [sp, #4]
 8016c4e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016c52:	bf58      	it	pl
 8016c54:	eba9 0101 	subpl.w	r1, r9, r1
 8016c58:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8016c5c:	bf58      	it	pl
 8016c5e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8016c62:	6022      	str	r2, [r4, #0]
 8016c64:	f04f 0900 	mov.w	r9, #0
 8016c68:	e78a      	b.n	8016b80 <_scanf_float+0x188>
 8016c6a:	f04f 0a03 	mov.w	sl, #3
 8016c6e:	e787      	b.n	8016b80 <_scanf_float+0x188>
 8016c70:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016c74:	4639      	mov	r1, r7
 8016c76:	4640      	mov	r0, r8
 8016c78:	4798      	blx	r3
 8016c7a:	2800      	cmp	r0, #0
 8016c7c:	f43f aedf 	beq.w	8016a3e <_scanf_float+0x46>
 8016c80:	e6ea      	b.n	8016a58 <_scanf_float+0x60>
 8016c82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016c8a:	463a      	mov	r2, r7
 8016c8c:	4640      	mov	r0, r8
 8016c8e:	4798      	blx	r3
 8016c90:	6923      	ldr	r3, [r4, #16]
 8016c92:	3b01      	subs	r3, #1
 8016c94:	6123      	str	r3, [r4, #16]
 8016c96:	e6ec      	b.n	8016a72 <_scanf_float+0x7a>
 8016c98:	1e6b      	subs	r3, r5, #1
 8016c9a:	2b06      	cmp	r3, #6
 8016c9c:	d825      	bhi.n	8016cea <_scanf_float+0x2f2>
 8016c9e:	2d02      	cmp	r5, #2
 8016ca0:	d836      	bhi.n	8016d10 <_scanf_float+0x318>
 8016ca2:	455e      	cmp	r6, fp
 8016ca4:	f67f aee8 	bls.w	8016a78 <_scanf_float+0x80>
 8016ca8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016cac:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016cb0:	463a      	mov	r2, r7
 8016cb2:	4640      	mov	r0, r8
 8016cb4:	4798      	blx	r3
 8016cb6:	6923      	ldr	r3, [r4, #16]
 8016cb8:	3b01      	subs	r3, #1
 8016cba:	6123      	str	r3, [r4, #16]
 8016cbc:	e7f1      	b.n	8016ca2 <_scanf_float+0x2aa>
 8016cbe:	9802      	ldr	r0, [sp, #8]
 8016cc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016cc4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016cc8:	9002      	str	r0, [sp, #8]
 8016cca:	463a      	mov	r2, r7
 8016ccc:	4640      	mov	r0, r8
 8016cce:	4798      	blx	r3
 8016cd0:	6923      	ldr	r3, [r4, #16]
 8016cd2:	3b01      	subs	r3, #1
 8016cd4:	6123      	str	r3, [r4, #16]
 8016cd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016cda:	fa5f fa8a 	uxtb.w	sl, sl
 8016cde:	f1ba 0f02 	cmp.w	sl, #2
 8016ce2:	d1ec      	bne.n	8016cbe <_scanf_float+0x2c6>
 8016ce4:	3d03      	subs	r5, #3
 8016ce6:	b2ed      	uxtb	r5, r5
 8016ce8:	1b76      	subs	r6, r6, r5
 8016cea:	6823      	ldr	r3, [r4, #0]
 8016cec:	05da      	lsls	r2, r3, #23
 8016cee:	d52f      	bpl.n	8016d50 <_scanf_float+0x358>
 8016cf0:	055b      	lsls	r3, r3, #21
 8016cf2:	d510      	bpl.n	8016d16 <_scanf_float+0x31e>
 8016cf4:	455e      	cmp	r6, fp
 8016cf6:	f67f aebf 	bls.w	8016a78 <_scanf_float+0x80>
 8016cfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016cfe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016d02:	463a      	mov	r2, r7
 8016d04:	4640      	mov	r0, r8
 8016d06:	4798      	blx	r3
 8016d08:	6923      	ldr	r3, [r4, #16]
 8016d0a:	3b01      	subs	r3, #1
 8016d0c:	6123      	str	r3, [r4, #16]
 8016d0e:	e7f1      	b.n	8016cf4 <_scanf_float+0x2fc>
 8016d10:	46aa      	mov	sl, r5
 8016d12:	9602      	str	r6, [sp, #8]
 8016d14:	e7df      	b.n	8016cd6 <_scanf_float+0x2de>
 8016d16:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016d1a:	6923      	ldr	r3, [r4, #16]
 8016d1c:	2965      	cmp	r1, #101	; 0x65
 8016d1e:	f103 33ff 	add.w	r3, r3, #4294967295
 8016d22:	f106 35ff 	add.w	r5, r6, #4294967295
 8016d26:	6123      	str	r3, [r4, #16]
 8016d28:	d00c      	beq.n	8016d44 <_scanf_float+0x34c>
 8016d2a:	2945      	cmp	r1, #69	; 0x45
 8016d2c:	d00a      	beq.n	8016d44 <_scanf_float+0x34c>
 8016d2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016d32:	463a      	mov	r2, r7
 8016d34:	4640      	mov	r0, r8
 8016d36:	4798      	blx	r3
 8016d38:	6923      	ldr	r3, [r4, #16]
 8016d3a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016d3e:	3b01      	subs	r3, #1
 8016d40:	1eb5      	subs	r5, r6, #2
 8016d42:	6123      	str	r3, [r4, #16]
 8016d44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016d48:	463a      	mov	r2, r7
 8016d4a:	4640      	mov	r0, r8
 8016d4c:	4798      	blx	r3
 8016d4e:	462e      	mov	r6, r5
 8016d50:	6825      	ldr	r5, [r4, #0]
 8016d52:	f015 0510 	ands.w	r5, r5, #16
 8016d56:	d158      	bne.n	8016e0a <_scanf_float+0x412>
 8016d58:	7035      	strb	r5, [r6, #0]
 8016d5a:	6823      	ldr	r3, [r4, #0]
 8016d5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016d64:	d11c      	bne.n	8016da0 <_scanf_float+0x3a8>
 8016d66:	9b01      	ldr	r3, [sp, #4]
 8016d68:	454b      	cmp	r3, r9
 8016d6a:	eba3 0209 	sub.w	r2, r3, r9
 8016d6e:	d124      	bne.n	8016dba <_scanf_float+0x3c2>
 8016d70:	2200      	movs	r2, #0
 8016d72:	4659      	mov	r1, fp
 8016d74:	4640      	mov	r0, r8
 8016d76:	f000 fee1 	bl	8017b3c <_strtod_r>
 8016d7a:	9b03      	ldr	r3, [sp, #12]
 8016d7c:	6821      	ldr	r1, [r4, #0]
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	f011 0f02 	tst.w	r1, #2
 8016d84:	ec57 6b10 	vmov	r6, r7, d0
 8016d88:	f103 0204 	add.w	r2, r3, #4
 8016d8c:	d020      	beq.n	8016dd0 <_scanf_float+0x3d8>
 8016d8e:	9903      	ldr	r1, [sp, #12]
 8016d90:	600a      	str	r2, [r1, #0]
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	e9c3 6700 	strd	r6, r7, [r3]
 8016d98:	68e3      	ldr	r3, [r4, #12]
 8016d9a:	3301      	adds	r3, #1
 8016d9c:	60e3      	str	r3, [r4, #12]
 8016d9e:	e66c      	b.n	8016a7a <_scanf_float+0x82>
 8016da0:	9b04      	ldr	r3, [sp, #16]
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d0e4      	beq.n	8016d70 <_scanf_float+0x378>
 8016da6:	9905      	ldr	r1, [sp, #20]
 8016da8:	230a      	movs	r3, #10
 8016daa:	462a      	mov	r2, r5
 8016dac:	3101      	adds	r1, #1
 8016dae:	4640      	mov	r0, r8
 8016db0:	f000 ff4e 	bl	8017c50 <_strtol_r>
 8016db4:	9b04      	ldr	r3, [sp, #16]
 8016db6:	9e05      	ldr	r6, [sp, #20]
 8016db8:	1ac2      	subs	r2, r0, r3
 8016dba:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016dbe:	429e      	cmp	r6, r3
 8016dc0:	bf28      	it	cs
 8016dc2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8016dc6:	4912      	ldr	r1, [pc, #72]	; (8016e10 <_scanf_float+0x418>)
 8016dc8:	4630      	mov	r0, r6
 8016dca:	f000 f86f 	bl	8016eac <siprintf>
 8016dce:	e7cf      	b.n	8016d70 <_scanf_float+0x378>
 8016dd0:	f011 0f04 	tst.w	r1, #4
 8016dd4:	9903      	ldr	r1, [sp, #12]
 8016dd6:	600a      	str	r2, [r1, #0]
 8016dd8:	d1db      	bne.n	8016d92 <_scanf_float+0x39a>
 8016dda:	f8d3 8000 	ldr.w	r8, [r3]
 8016dde:	ee10 2a10 	vmov	r2, s0
 8016de2:	ee10 0a10 	vmov	r0, s0
 8016de6:	463b      	mov	r3, r7
 8016de8:	4639      	mov	r1, r7
 8016dea:	f7e9 fe9f 	bl	8000b2c <__aeabi_dcmpun>
 8016dee:	b128      	cbz	r0, 8016dfc <_scanf_float+0x404>
 8016df0:	4808      	ldr	r0, [pc, #32]	; (8016e14 <_scanf_float+0x41c>)
 8016df2:	f000 f821 	bl	8016e38 <nanf>
 8016df6:	ed88 0a00 	vstr	s0, [r8]
 8016dfa:	e7cd      	b.n	8016d98 <_scanf_float+0x3a0>
 8016dfc:	4630      	mov	r0, r6
 8016dfe:	4639      	mov	r1, r7
 8016e00:	f7e9 fef2 	bl	8000be8 <__aeabi_d2f>
 8016e04:	f8c8 0000 	str.w	r0, [r8]
 8016e08:	e7c6      	b.n	8016d98 <_scanf_float+0x3a0>
 8016e0a:	2500      	movs	r5, #0
 8016e0c:	e635      	b.n	8016a7a <_scanf_float+0x82>
 8016e0e:	bf00      	nop
 8016e10:	0801c548 	.word	0x0801c548
 8016e14:	0801c960 	.word	0x0801c960

08016e18 <_sbrk_r>:
 8016e18:	b538      	push	{r3, r4, r5, lr}
 8016e1a:	4d06      	ldr	r5, [pc, #24]	; (8016e34 <_sbrk_r+0x1c>)
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	4604      	mov	r4, r0
 8016e20:	4608      	mov	r0, r1
 8016e22:	602b      	str	r3, [r5, #0]
 8016e24:	f7f4 fa04 	bl	800b230 <_sbrk>
 8016e28:	1c43      	adds	r3, r0, #1
 8016e2a:	d102      	bne.n	8016e32 <_sbrk_r+0x1a>
 8016e2c:	682b      	ldr	r3, [r5, #0]
 8016e2e:	b103      	cbz	r3, 8016e32 <_sbrk_r+0x1a>
 8016e30:	6023      	str	r3, [r4, #0]
 8016e32:	bd38      	pop	{r3, r4, r5, pc}
 8016e34:	20011b7c 	.word	0x20011b7c

08016e38 <nanf>:
 8016e38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016e40 <nanf+0x8>
 8016e3c:	4770      	bx	lr
 8016e3e:	bf00      	nop
 8016e40:	7fc00000 	.word	0x7fc00000

08016e44 <sniprintf>:
 8016e44:	b40c      	push	{r2, r3}
 8016e46:	b530      	push	{r4, r5, lr}
 8016e48:	4b17      	ldr	r3, [pc, #92]	; (8016ea8 <sniprintf+0x64>)
 8016e4a:	1e0c      	subs	r4, r1, #0
 8016e4c:	681d      	ldr	r5, [r3, #0]
 8016e4e:	b09d      	sub	sp, #116	; 0x74
 8016e50:	da08      	bge.n	8016e64 <sniprintf+0x20>
 8016e52:	238b      	movs	r3, #139	; 0x8b
 8016e54:	602b      	str	r3, [r5, #0]
 8016e56:	f04f 30ff 	mov.w	r0, #4294967295
 8016e5a:	b01d      	add	sp, #116	; 0x74
 8016e5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016e60:	b002      	add	sp, #8
 8016e62:	4770      	bx	lr
 8016e64:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016e68:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016e6c:	bf14      	ite	ne
 8016e6e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016e72:	4623      	moveq	r3, r4
 8016e74:	9304      	str	r3, [sp, #16]
 8016e76:	9307      	str	r3, [sp, #28]
 8016e78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016e7c:	9002      	str	r0, [sp, #8]
 8016e7e:	9006      	str	r0, [sp, #24]
 8016e80:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016e84:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016e86:	ab21      	add	r3, sp, #132	; 0x84
 8016e88:	a902      	add	r1, sp, #8
 8016e8a:	4628      	mov	r0, r5
 8016e8c:	9301      	str	r3, [sp, #4]
 8016e8e:	f002 fe13 	bl	8019ab8 <_svfiprintf_r>
 8016e92:	1c43      	adds	r3, r0, #1
 8016e94:	bfbc      	itt	lt
 8016e96:	238b      	movlt	r3, #139	; 0x8b
 8016e98:	602b      	strlt	r3, [r5, #0]
 8016e9a:	2c00      	cmp	r4, #0
 8016e9c:	d0dd      	beq.n	8016e5a <sniprintf+0x16>
 8016e9e:	9b02      	ldr	r3, [sp, #8]
 8016ea0:	2200      	movs	r2, #0
 8016ea2:	701a      	strb	r2, [r3, #0]
 8016ea4:	e7d9      	b.n	8016e5a <sniprintf+0x16>
 8016ea6:	bf00      	nop
 8016ea8:	20004210 	.word	0x20004210

08016eac <siprintf>:
 8016eac:	b40e      	push	{r1, r2, r3}
 8016eae:	b500      	push	{lr}
 8016eb0:	b09c      	sub	sp, #112	; 0x70
 8016eb2:	ab1d      	add	r3, sp, #116	; 0x74
 8016eb4:	9002      	str	r0, [sp, #8]
 8016eb6:	9006      	str	r0, [sp, #24]
 8016eb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016ebc:	4809      	ldr	r0, [pc, #36]	; (8016ee4 <siprintf+0x38>)
 8016ebe:	9107      	str	r1, [sp, #28]
 8016ec0:	9104      	str	r1, [sp, #16]
 8016ec2:	4909      	ldr	r1, [pc, #36]	; (8016ee8 <siprintf+0x3c>)
 8016ec4:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ec8:	9105      	str	r1, [sp, #20]
 8016eca:	6800      	ldr	r0, [r0, #0]
 8016ecc:	9301      	str	r3, [sp, #4]
 8016ece:	a902      	add	r1, sp, #8
 8016ed0:	f002 fdf2 	bl	8019ab8 <_svfiprintf_r>
 8016ed4:	9b02      	ldr	r3, [sp, #8]
 8016ed6:	2200      	movs	r2, #0
 8016ed8:	701a      	strb	r2, [r3, #0]
 8016eda:	b01c      	add	sp, #112	; 0x70
 8016edc:	f85d eb04 	ldr.w	lr, [sp], #4
 8016ee0:	b003      	add	sp, #12
 8016ee2:	4770      	bx	lr
 8016ee4:	20004210 	.word	0x20004210
 8016ee8:	ffff0208 	.word	0xffff0208

08016eec <sulp>:
 8016eec:	b570      	push	{r4, r5, r6, lr}
 8016eee:	4604      	mov	r4, r0
 8016ef0:	460d      	mov	r5, r1
 8016ef2:	ec45 4b10 	vmov	d0, r4, r5
 8016ef6:	4616      	mov	r6, r2
 8016ef8:	f002 fc24 	bl	8019744 <__ulp>
 8016efc:	ec51 0b10 	vmov	r0, r1, d0
 8016f00:	b17e      	cbz	r6, 8016f22 <sulp+0x36>
 8016f02:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016f06:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	dd09      	ble.n	8016f22 <sulp+0x36>
 8016f0e:	051b      	lsls	r3, r3, #20
 8016f10:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016f14:	2400      	movs	r4, #0
 8016f16:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016f1a:	4622      	mov	r2, r4
 8016f1c:	462b      	mov	r3, r5
 8016f1e:	f7e9 fb6b 	bl	80005f8 <__aeabi_dmul>
 8016f22:	bd70      	pop	{r4, r5, r6, pc}
 8016f24:	0000      	movs	r0, r0
	...

08016f28 <_strtod_l>:
 8016f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f2c:	b0a3      	sub	sp, #140	; 0x8c
 8016f2e:	461f      	mov	r7, r3
 8016f30:	2300      	movs	r3, #0
 8016f32:	931e      	str	r3, [sp, #120]	; 0x78
 8016f34:	4ba4      	ldr	r3, [pc, #656]	; (80171c8 <_strtod_l+0x2a0>)
 8016f36:	9219      	str	r2, [sp, #100]	; 0x64
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	9307      	str	r3, [sp, #28]
 8016f3c:	4604      	mov	r4, r0
 8016f3e:	4618      	mov	r0, r3
 8016f40:	4688      	mov	r8, r1
 8016f42:	f7e9 f945 	bl	80001d0 <strlen>
 8016f46:	f04f 0a00 	mov.w	sl, #0
 8016f4a:	4605      	mov	r5, r0
 8016f4c:	f04f 0b00 	mov.w	fp, #0
 8016f50:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016f54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016f56:	781a      	ldrb	r2, [r3, #0]
 8016f58:	2a2b      	cmp	r2, #43	; 0x2b
 8016f5a:	d04c      	beq.n	8016ff6 <_strtod_l+0xce>
 8016f5c:	d839      	bhi.n	8016fd2 <_strtod_l+0xaa>
 8016f5e:	2a0d      	cmp	r2, #13
 8016f60:	d832      	bhi.n	8016fc8 <_strtod_l+0xa0>
 8016f62:	2a08      	cmp	r2, #8
 8016f64:	d832      	bhi.n	8016fcc <_strtod_l+0xa4>
 8016f66:	2a00      	cmp	r2, #0
 8016f68:	d03c      	beq.n	8016fe4 <_strtod_l+0xbc>
 8016f6a:	2300      	movs	r3, #0
 8016f6c:	930e      	str	r3, [sp, #56]	; 0x38
 8016f6e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016f70:	7833      	ldrb	r3, [r6, #0]
 8016f72:	2b30      	cmp	r3, #48	; 0x30
 8016f74:	f040 80b4 	bne.w	80170e0 <_strtod_l+0x1b8>
 8016f78:	7873      	ldrb	r3, [r6, #1]
 8016f7a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016f7e:	2b58      	cmp	r3, #88	; 0x58
 8016f80:	d16c      	bne.n	801705c <_strtod_l+0x134>
 8016f82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f84:	9301      	str	r3, [sp, #4]
 8016f86:	ab1e      	add	r3, sp, #120	; 0x78
 8016f88:	9702      	str	r7, [sp, #8]
 8016f8a:	9300      	str	r3, [sp, #0]
 8016f8c:	4a8f      	ldr	r2, [pc, #572]	; (80171cc <_strtod_l+0x2a4>)
 8016f8e:	ab1f      	add	r3, sp, #124	; 0x7c
 8016f90:	a91d      	add	r1, sp, #116	; 0x74
 8016f92:	4620      	mov	r0, r4
 8016f94:	f001 fd40 	bl	8018a18 <__gethex>
 8016f98:	f010 0707 	ands.w	r7, r0, #7
 8016f9c:	4605      	mov	r5, r0
 8016f9e:	d005      	beq.n	8016fac <_strtod_l+0x84>
 8016fa0:	2f06      	cmp	r7, #6
 8016fa2:	d12a      	bne.n	8016ffa <_strtod_l+0xd2>
 8016fa4:	3601      	adds	r6, #1
 8016fa6:	2300      	movs	r3, #0
 8016fa8:	961d      	str	r6, [sp, #116]	; 0x74
 8016faa:	930e      	str	r3, [sp, #56]	; 0x38
 8016fac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	f040 8596 	bne.w	8017ae0 <_strtod_l+0xbb8>
 8016fb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016fb6:	b1db      	cbz	r3, 8016ff0 <_strtod_l+0xc8>
 8016fb8:	4652      	mov	r2, sl
 8016fba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016fbe:	ec43 2b10 	vmov	d0, r2, r3
 8016fc2:	b023      	add	sp, #140	; 0x8c
 8016fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fc8:	2a20      	cmp	r2, #32
 8016fca:	d1ce      	bne.n	8016f6a <_strtod_l+0x42>
 8016fcc:	3301      	adds	r3, #1
 8016fce:	931d      	str	r3, [sp, #116]	; 0x74
 8016fd0:	e7c0      	b.n	8016f54 <_strtod_l+0x2c>
 8016fd2:	2a2d      	cmp	r2, #45	; 0x2d
 8016fd4:	d1c9      	bne.n	8016f6a <_strtod_l+0x42>
 8016fd6:	2201      	movs	r2, #1
 8016fd8:	920e      	str	r2, [sp, #56]	; 0x38
 8016fda:	1c5a      	adds	r2, r3, #1
 8016fdc:	921d      	str	r2, [sp, #116]	; 0x74
 8016fde:	785b      	ldrb	r3, [r3, #1]
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d1c4      	bne.n	8016f6e <_strtod_l+0x46>
 8016fe4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016fe6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	f040 8576 	bne.w	8017adc <_strtod_l+0xbb4>
 8016ff0:	4652      	mov	r2, sl
 8016ff2:	465b      	mov	r3, fp
 8016ff4:	e7e3      	b.n	8016fbe <_strtod_l+0x96>
 8016ff6:	2200      	movs	r2, #0
 8016ff8:	e7ee      	b.n	8016fd8 <_strtod_l+0xb0>
 8016ffa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016ffc:	b13a      	cbz	r2, 801700e <_strtod_l+0xe6>
 8016ffe:	2135      	movs	r1, #53	; 0x35
 8017000:	a820      	add	r0, sp, #128	; 0x80
 8017002:	f002 fcaa 	bl	801995a <__copybits>
 8017006:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017008:	4620      	mov	r0, r4
 801700a:	f002 f86f 	bl	80190ec <_Bfree>
 801700e:	3f01      	subs	r7, #1
 8017010:	2f05      	cmp	r7, #5
 8017012:	d807      	bhi.n	8017024 <_strtod_l+0xfc>
 8017014:	e8df f007 	tbb	[pc, r7]
 8017018:	1d180b0e 	.word	0x1d180b0e
 801701c:	030e      	.short	0x030e
 801701e:	f04f 0b00 	mov.w	fp, #0
 8017022:	46da      	mov	sl, fp
 8017024:	0728      	lsls	r0, r5, #28
 8017026:	d5c1      	bpl.n	8016fac <_strtod_l+0x84>
 8017028:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801702c:	e7be      	b.n	8016fac <_strtod_l+0x84>
 801702e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8017032:	e7f7      	b.n	8017024 <_strtod_l+0xfc>
 8017034:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8017038:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801703a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801703e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017042:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8017046:	e7ed      	b.n	8017024 <_strtod_l+0xfc>
 8017048:	f8df b184 	ldr.w	fp, [pc, #388]	; 80171d0 <_strtod_l+0x2a8>
 801704c:	f04f 0a00 	mov.w	sl, #0
 8017050:	e7e8      	b.n	8017024 <_strtod_l+0xfc>
 8017052:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8017056:	f04f 3aff 	mov.w	sl, #4294967295
 801705a:	e7e3      	b.n	8017024 <_strtod_l+0xfc>
 801705c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801705e:	1c5a      	adds	r2, r3, #1
 8017060:	921d      	str	r2, [sp, #116]	; 0x74
 8017062:	785b      	ldrb	r3, [r3, #1]
 8017064:	2b30      	cmp	r3, #48	; 0x30
 8017066:	d0f9      	beq.n	801705c <_strtod_l+0x134>
 8017068:	2b00      	cmp	r3, #0
 801706a:	d09f      	beq.n	8016fac <_strtod_l+0x84>
 801706c:	2301      	movs	r3, #1
 801706e:	f04f 0900 	mov.w	r9, #0
 8017072:	9304      	str	r3, [sp, #16]
 8017074:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017076:	930a      	str	r3, [sp, #40]	; 0x28
 8017078:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801707c:	464f      	mov	r7, r9
 801707e:	220a      	movs	r2, #10
 8017080:	981d      	ldr	r0, [sp, #116]	; 0x74
 8017082:	7806      	ldrb	r6, [r0, #0]
 8017084:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8017088:	b2d9      	uxtb	r1, r3
 801708a:	2909      	cmp	r1, #9
 801708c:	d92a      	bls.n	80170e4 <_strtod_l+0x1bc>
 801708e:	9907      	ldr	r1, [sp, #28]
 8017090:	462a      	mov	r2, r5
 8017092:	f002 fe19 	bl	8019cc8 <strncmp>
 8017096:	b398      	cbz	r0, 8017100 <_strtod_l+0x1d8>
 8017098:	2000      	movs	r0, #0
 801709a:	4633      	mov	r3, r6
 801709c:	463d      	mov	r5, r7
 801709e:	9007      	str	r0, [sp, #28]
 80170a0:	4602      	mov	r2, r0
 80170a2:	2b65      	cmp	r3, #101	; 0x65
 80170a4:	d001      	beq.n	80170aa <_strtod_l+0x182>
 80170a6:	2b45      	cmp	r3, #69	; 0x45
 80170a8:	d118      	bne.n	80170dc <_strtod_l+0x1b4>
 80170aa:	b91d      	cbnz	r5, 80170b4 <_strtod_l+0x18c>
 80170ac:	9b04      	ldr	r3, [sp, #16]
 80170ae:	4303      	orrs	r3, r0
 80170b0:	d098      	beq.n	8016fe4 <_strtod_l+0xbc>
 80170b2:	2500      	movs	r5, #0
 80170b4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80170b8:	f108 0301 	add.w	r3, r8, #1
 80170bc:	931d      	str	r3, [sp, #116]	; 0x74
 80170be:	f898 3001 	ldrb.w	r3, [r8, #1]
 80170c2:	2b2b      	cmp	r3, #43	; 0x2b
 80170c4:	d075      	beq.n	80171b2 <_strtod_l+0x28a>
 80170c6:	2b2d      	cmp	r3, #45	; 0x2d
 80170c8:	d07b      	beq.n	80171c2 <_strtod_l+0x29a>
 80170ca:	f04f 0c00 	mov.w	ip, #0
 80170ce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80170d2:	2909      	cmp	r1, #9
 80170d4:	f240 8082 	bls.w	80171dc <_strtod_l+0x2b4>
 80170d8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80170dc:	2600      	movs	r6, #0
 80170de:	e09d      	b.n	801721c <_strtod_l+0x2f4>
 80170e0:	2300      	movs	r3, #0
 80170e2:	e7c4      	b.n	801706e <_strtod_l+0x146>
 80170e4:	2f08      	cmp	r7, #8
 80170e6:	bfd8      	it	le
 80170e8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80170ea:	f100 0001 	add.w	r0, r0, #1
 80170ee:	bfda      	itte	le
 80170f0:	fb02 3301 	mlale	r3, r2, r1, r3
 80170f4:	9309      	strle	r3, [sp, #36]	; 0x24
 80170f6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80170fa:	3701      	adds	r7, #1
 80170fc:	901d      	str	r0, [sp, #116]	; 0x74
 80170fe:	e7bf      	b.n	8017080 <_strtod_l+0x158>
 8017100:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017102:	195a      	adds	r2, r3, r5
 8017104:	921d      	str	r2, [sp, #116]	; 0x74
 8017106:	5d5b      	ldrb	r3, [r3, r5]
 8017108:	2f00      	cmp	r7, #0
 801710a:	d037      	beq.n	801717c <_strtod_l+0x254>
 801710c:	9007      	str	r0, [sp, #28]
 801710e:	463d      	mov	r5, r7
 8017110:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8017114:	2a09      	cmp	r2, #9
 8017116:	d912      	bls.n	801713e <_strtod_l+0x216>
 8017118:	2201      	movs	r2, #1
 801711a:	e7c2      	b.n	80170a2 <_strtod_l+0x17a>
 801711c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801711e:	1c5a      	adds	r2, r3, #1
 8017120:	921d      	str	r2, [sp, #116]	; 0x74
 8017122:	785b      	ldrb	r3, [r3, #1]
 8017124:	3001      	adds	r0, #1
 8017126:	2b30      	cmp	r3, #48	; 0x30
 8017128:	d0f8      	beq.n	801711c <_strtod_l+0x1f4>
 801712a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801712e:	2a08      	cmp	r2, #8
 8017130:	f200 84db 	bhi.w	8017aea <_strtod_l+0xbc2>
 8017134:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017136:	9007      	str	r0, [sp, #28]
 8017138:	2000      	movs	r0, #0
 801713a:	920a      	str	r2, [sp, #40]	; 0x28
 801713c:	4605      	mov	r5, r0
 801713e:	3b30      	subs	r3, #48	; 0x30
 8017140:	f100 0201 	add.w	r2, r0, #1
 8017144:	d014      	beq.n	8017170 <_strtod_l+0x248>
 8017146:	9907      	ldr	r1, [sp, #28]
 8017148:	4411      	add	r1, r2
 801714a:	9107      	str	r1, [sp, #28]
 801714c:	462a      	mov	r2, r5
 801714e:	eb00 0e05 	add.w	lr, r0, r5
 8017152:	210a      	movs	r1, #10
 8017154:	4572      	cmp	r2, lr
 8017156:	d113      	bne.n	8017180 <_strtod_l+0x258>
 8017158:	182a      	adds	r2, r5, r0
 801715a:	2a08      	cmp	r2, #8
 801715c:	f105 0501 	add.w	r5, r5, #1
 8017160:	4405      	add	r5, r0
 8017162:	dc1c      	bgt.n	801719e <_strtod_l+0x276>
 8017164:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017166:	220a      	movs	r2, #10
 8017168:	fb02 3301 	mla	r3, r2, r1, r3
 801716c:	9309      	str	r3, [sp, #36]	; 0x24
 801716e:	2200      	movs	r2, #0
 8017170:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017172:	1c59      	adds	r1, r3, #1
 8017174:	911d      	str	r1, [sp, #116]	; 0x74
 8017176:	785b      	ldrb	r3, [r3, #1]
 8017178:	4610      	mov	r0, r2
 801717a:	e7c9      	b.n	8017110 <_strtod_l+0x1e8>
 801717c:	4638      	mov	r0, r7
 801717e:	e7d2      	b.n	8017126 <_strtod_l+0x1fe>
 8017180:	2a08      	cmp	r2, #8
 8017182:	dc04      	bgt.n	801718e <_strtod_l+0x266>
 8017184:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8017186:	434e      	muls	r6, r1
 8017188:	9609      	str	r6, [sp, #36]	; 0x24
 801718a:	3201      	adds	r2, #1
 801718c:	e7e2      	b.n	8017154 <_strtod_l+0x22c>
 801718e:	f102 0c01 	add.w	ip, r2, #1
 8017192:	f1bc 0f10 	cmp.w	ip, #16
 8017196:	bfd8      	it	le
 8017198:	fb01 f909 	mulle.w	r9, r1, r9
 801719c:	e7f5      	b.n	801718a <_strtod_l+0x262>
 801719e:	2d10      	cmp	r5, #16
 80171a0:	bfdc      	itt	le
 80171a2:	220a      	movle	r2, #10
 80171a4:	fb02 3909 	mlale	r9, r2, r9, r3
 80171a8:	e7e1      	b.n	801716e <_strtod_l+0x246>
 80171aa:	2300      	movs	r3, #0
 80171ac:	9307      	str	r3, [sp, #28]
 80171ae:	2201      	movs	r2, #1
 80171b0:	e77c      	b.n	80170ac <_strtod_l+0x184>
 80171b2:	f04f 0c00 	mov.w	ip, #0
 80171b6:	f108 0302 	add.w	r3, r8, #2
 80171ba:	931d      	str	r3, [sp, #116]	; 0x74
 80171bc:	f898 3002 	ldrb.w	r3, [r8, #2]
 80171c0:	e785      	b.n	80170ce <_strtod_l+0x1a6>
 80171c2:	f04f 0c01 	mov.w	ip, #1
 80171c6:	e7f6      	b.n	80171b6 <_strtod_l+0x28e>
 80171c8:	0801c7a0 	.word	0x0801c7a0
 80171cc:	0801c550 	.word	0x0801c550
 80171d0:	7ff00000 	.word	0x7ff00000
 80171d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80171d6:	1c59      	adds	r1, r3, #1
 80171d8:	911d      	str	r1, [sp, #116]	; 0x74
 80171da:	785b      	ldrb	r3, [r3, #1]
 80171dc:	2b30      	cmp	r3, #48	; 0x30
 80171de:	d0f9      	beq.n	80171d4 <_strtod_l+0x2ac>
 80171e0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80171e4:	2908      	cmp	r1, #8
 80171e6:	f63f af79 	bhi.w	80170dc <_strtod_l+0x1b4>
 80171ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80171ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80171f0:	9308      	str	r3, [sp, #32]
 80171f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80171f4:	1c59      	adds	r1, r3, #1
 80171f6:	911d      	str	r1, [sp, #116]	; 0x74
 80171f8:	785b      	ldrb	r3, [r3, #1]
 80171fa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80171fe:	2e09      	cmp	r6, #9
 8017200:	d937      	bls.n	8017272 <_strtod_l+0x34a>
 8017202:	9e08      	ldr	r6, [sp, #32]
 8017204:	1b89      	subs	r1, r1, r6
 8017206:	2908      	cmp	r1, #8
 8017208:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801720c:	dc02      	bgt.n	8017214 <_strtod_l+0x2ec>
 801720e:	4576      	cmp	r6, lr
 8017210:	bfa8      	it	ge
 8017212:	4676      	movge	r6, lr
 8017214:	f1bc 0f00 	cmp.w	ip, #0
 8017218:	d000      	beq.n	801721c <_strtod_l+0x2f4>
 801721a:	4276      	negs	r6, r6
 801721c:	2d00      	cmp	r5, #0
 801721e:	d14f      	bne.n	80172c0 <_strtod_l+0x398>
 8017220:	9904      	ldr	r1, [sp, #16]
 8017222:	4301      	orrs	r1, r0
 8017224:	f47f aec2 	bne.w	8016fac <_strtod_l+0x84>
 8017228:	2a00      	cmp	r2, #0
 801722a:	f47f aedb 	bne.w	8016fe4 <_strtod_l+0xbc>
 801722e:	2b69      	cmp	r3, #105	; 0x69
 8017230:	d027      	beq.n	8017282 <_strtod_l+0x35a>
 8017232:	dc24      	bgt.n	801727e <_strtod_l+0x356>
 8017234:	2b49      	cmp	r3, #73	; 0x49
 8017236:	d024      	beq.n	8017282 <_strtod_l+0x35a>
 8017238:	2b4e      	cmp	r3, #78	; 0x4e
 801723a:	f47f aed3 	bne.w	8016fe4 <_strtod_l+0xbc>
 801723e:	499e      	ldr	r1, [pc, #632]	; (80174b8 <_strtod_l+0x590>)
 8017240:	a81d      	add	r0, sp, #116	; 0x74
 8017242:	f001 fe41 	bl	8018ec8 <__match>
 8017246:	2800      	cmp	r0, #0
 8017248:	f43f aecc 	beq.w	8016fe4 <_strtod_l+0xbc>
 801724c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801724e:	781b      	ldrb	r3, [r3, #0]
 8017250:	2b28      	cmp	r3, #40	; 0x28
 8017252:	d12d      	bne.n	80172b0 <_strtod_l+0x388>
 8017254:	4999      	ldr	r1, [pc, #612]	; (80174bc <_strtod_l+0x594>)
 8017256:	aa20      	add	r2, sp, #128	; 0x80
 8017258:	a81d      	add	r0, sp, #116	; 0x74
 801725a:	f001 fe49 	bl	8018ef0 <__hexnan>
 801725e:	2805      	cmp	r0, #5
 8017260:	d126      	bne.n	80172b0 <_strtod_l+0x388>
 8017262:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017264:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8017268:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801726c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8017270:	e69c      	b.n	8016fac <_strtod_l+0x84>
 8017272:	210a      	movs	r1, #10
 8017274:	fb01 3e0e 	mla	lr, r1, lr, r3
 8017278:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801727c:	e7b9      	b.n	80171f2 <_strtod_l+0x2ca>
 801727e:	2b6e      	cmp	r3, #110	; 0x6e
 8017280:	e7db      	b.n	801723a <_strtod_l+0x312>
 8017282:	498f      	ldr	r1, [pc, #572]	; (80174c0 <_strtod_l+0x598>)
 8017284:	a81d      	add	r0, sp, #116	; 0x74
 8017286:	f001 fe1f 	bl	8018ec8 <__match>
 801728a:	2800      	cmp	r0, #0
 801728c:	f43f aeaa 	beq.w	8016fe4 <_strtod_l+0xbc>
 8017290:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017292:	498c      	ldr	r1, [pc, #560]	; (80174c4 <_strtod_l+0x59c>)
 8017294:	3b01      	subs	r3, #1
 8017296:	a81d      	add	r0, sp, #116	; 0x74
 8017298:	931d      	str	r3, [sp, #116]	; 0x74
 801729a:	f001 fe15 	bl	8018ec8 <__match>
 801729e:	b910      	cbnz	r0, 80172a6 <_strtod_l+0x37e>
 80172a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80172a2:	3301      	adds	r3, #1
 80172a4:	931d      	str	r3, [sp, #116]	; 0x74
 80172a6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80174d4 <_strtod_l+0x5ac>
 80172aa:	f04f 0a00 	mov.w	sl, #0
 80172ae:	e67d      	b.n	8016fac <_strtod_l+0x84>
 80172b0:	4885      	ldr	r0, [pc, #532]	; (80174c8 <_strtod_l+0x5a0>)
 80172b2:	f002 fd01 	bl	8019cb8 <nan>
 80172b6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80172ba:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80172be:	e675      	b.n	8016fac <_strtod_l+0x84>
 80172c0:	9b07      	ldr	r3, [sp, #28]
 80172c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80172c4:	1af3      	subs	r3, r6, r3
 80172c6:	2f00      	cmp	r7, #0
 80172c8:	bf08      	it	eq
 80172ca:	462f      	moveq	r7, r5
 80172cc:	2d10      	cmp	r5, #16
 80172ce:	9308      	str	r3, [sp, #32]
 80172d0:	46a8      	mov	r8, r5
 80172d2:	bfa8      	it	ge
 80172d4:	f04f 0810 	movge.w	r8, #16
 80172d8:	f7e9 f914 	bl	8000504 <__aeabi_ui2d>
 80172dc:	2d09      	cmp	r5, #9
 80172de:	4682      	mov	sl, r0
 80172e0:	468b      	mov	fp, r1
 80172e2:	dd13      	ble.n	801730c <_strtod_l+0x3e4>
 80172e4:	4b79      	ldr	r3, [pc, #484]	; (80174cc <_strtod_l+0x5a4>)
 80172e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80172ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80172ee:	f7e9 f983 	bl	80005f8 <__aeabi_dmul>
 80172f2:	4682      	mov	sl, r0
 80172f4:	4648      	mov	r0, r9
 80172f6:	468b      	mov	fp, r1
 80172f8:	f7e9 f904 	bl	8000504 <__aeabi_ui2d>
 80172fc:	4602      	mov	r2, r0
 80172fe:	460b      	mov	r3, r1
 8017300:	4650      	mov	r0, sl
 8017302:	4659      	mov	r1, fp
 8017304:	f7e8 ffc2 	bl	800028c <__adddf3>
 8017308:	4682      	mov	sl, r0
 801730a:	468b      	mov	fp, r1
 801730c:	2d0f      	cmp	r5, #15
 801730e:	dc38      	bgt.n	8017382 <_strtod_l+0x45a>
 8017310:	9b08      	ldr	r3, [sp, #32]
 8017312:	2b00      	cmp	r3, #0
 8017314:	f43f ae4a 	beq.w	8016fac <_strtod_l+0x84>
 8017318:	dd24      	ble.n	8017364 <_strtod_l+0x43c>
 801731a:	2b16      	cmp	r3, #22
 801731c:	dc0b      	bgt.n	8017336 <_strtod_l+0x40e>
 801731e:	4d6b      	ldr	r5, [pc, #428]	; (80174cc <_strtod_l+0x5a4>)
 8017320:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8017324:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017328:	4652      	mov	r2, sl
 801732a:	465b      	mov	r3, fp
 801732c:	f7e9 f964 	bl	80005f8 <__aeabi_dmul>
 8017330:	4682      	mov	sl, r0
 8017332:	468b      	mov	fp, r1
 8017334:	e63a      	b.n	8016fac <_strtod_l+0x84>
 8017336:	9a08      	ldr	r2, [sp, #32]
 8017338:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801733c:	4293      	cmp	r3, r2
 801733e:	db20      	blt.n	8017382 <_strtod_l+0x45a>
 8017340:	4c62      	ldr	r4, [pc, #392]	; (80174cc <_strtod_l+0x5a4>)
 8017342:	f1c5 050f 	rsb	r5, r5, #15
 8017346:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801734a:	4652      	mov	r2, sl
 801734c:	465b      	mov	r3, fp
 801734e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017352:	f7e9 f951 	bl	80005f8 <__aeabi_dmul>
 8017356:	9b08      	ldr	r3, [sp, #32]
 8017358:	1b5d      	subs	r5, r3, r5
 801735a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801735e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017362:	e7e3      	b.n	801732c <_strtod_l+0x404>
 8017364:	9b08      	ldr	r3, [sp, #32]
 8017366:	3316      	adds	r3, #22
 8017368:	db0b      	blt.n	8017382 <_strtod_l+0x45a>
 801736a:	9b07      	ldr	r3, [sp, #28]
 801736c:	4a57      	ldr	r2, [pc, #348]	; (80174cc <_strtod_l+0x5a4>)
 801736e:	1b9e      	subs	r6, r3, r6
 8017370:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8017374:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017378:	4650      	mov	r0, sl
 801737a:	4659      	mov	r1, fp
 801737c:	f7e9 fa66 	bl	800084c <__aeabi_ddiv>
 8017380:	e7d6      	b.n	8017330 <_strtod_l+0x408>
 8017382:	9b08      	ldr	r3, [sp, #32]
 8017384:	eba5 0808 	sub.w	r8, r5, r8
 8017388:	4498      	add	r8, r3
 801738a:	f1b8 0f00 	cmp.w	r8, #0
 801738e:	dd71      	ble.n	8017474 <_strtod_l+0x54c>
 8017390:	f018 030f 	ands.w	r3, r8, #15
 8017394:	d00a      	beq.n	80173ac <_strtod_l+0x484>
 8017396:	494d      	ldr	r1, [pc, #308]	; (80174cc <_strtod_l+0x5a4>)
 8017398:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801739c:	4652      	mov	r2, sl
 801739e:	465b      	mov	r3, fp
 80173a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80173a4:	f7e9 f928 	bl	80005f8 <__aeabi_dmul>
 80173a8:	4682      	mov	sl, r0
 80173aa:	468b      	mov	fp, r1
 80173ac:	f038 080f 	bics.w	r8, r8, #15
 80173b0:	d04d      	beq.n	801744e <_strtod_l+0x526>
 80173b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80173b6:	dd22      	ble.n	80173fe <_strtod_l+0x4d6>
 80173b8:	2500      	movs	r5, #0
 80173ba:	462e      	mov	r6, r5
 80173bc:	9509      	str	r5, [sp, #36]	; 0x24
 80173be:	9507      	str	r5, [sp, #28]
 80173c0:	2322      	movs	r3, #34	; 0x22
 80173c2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80174d4 <_strtod_l+0x5ac>
 80173c6:	6023      	str	r3, [r4, #0]
 80173c8:	f04f 0a00 	mov.w	sl, #0
 80173cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	f43f adec 	beq.w	8016fac <_strtod_l+0x84>
 80173d4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80173d6:	4620      	mov	r0, r4
 80173d8:	f001 fe88 	bl	80190ec <_Bfree>
 80173dc:	9907      	ldr	r1, [sp, #28]
 80173de:	4620      	mov	r0, r4
 80173e0:	f001 fe84 	bl	80190ec <_Bfree>
 80173e4:	4631      	mov	r1, r6
 80173e6:	4620      	mov	r0, r4
 80173e8:	f001 fe80 	bl	80190ec <_Bfree>
 80173ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80173ee:	4620      	mov	r0, r4
 80173f0:	f001 fe7c 	bl	80190ec <_Bfree>
 80173f4:	4629      	mov	r1, r5
 80173f6:	4620      	mov	r0, r4
 80173f8:	f001 fe78 	bl	80190ec <_Bfree>
 80173fc:	e5d6      	b.n	8016fac <_strtod_l+0x84>
 80173fe:	2300      	movs	r3, #0
 8017400:	ea4f 1828 	mov.w	r8, r8, asr #4
 8017404:	4650      	mov	r0, sl
 8017406:	4659      	mov	r1, fp
 8017408:	4699      	mov	r9, r3
 801740a:	f1b8 0f01 	cmp.w	r8, #1
 801740e:	dc21      	bgt.n	8017454 <_strtod_l+0x52c>
 8017410:	b10b      	cbz	r3, 8017416 <_strtod_l+0x4ee>
 8017412:	4682      	mov	sl, r0
 8017414:	468b      	mov	fp, r1
 8017416:	4b2e      	ldr	r3, [pc, #184]	; (80174d0 <_strtod_l+0x5a8>)
 8017418:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801741c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8017420:	4652      	mov	r2, sl
 8017422:	465b      	mov	r3, fp
 8017424:	e9d9 0100 	ldrd	r0, r1, [r9]
 8017428:	f7e9 f8e6 	bl	80005f8 <__aeabi_dmul>
 801742c:	4b29      	ldr	r3, [pc, #164]	; (80174d4 <_strtod_l+0x5ac>)
 801742e:	460a      	mov	r2, r1
 8017430:	400b      	ands	r3, r1
 8017432:	4929      	ldr	r1, [pc, #164]	; (80174d8 <_strtod_l+0x5b0>)
 8017434:	428b      	cmp	r3, r1
 8017436:	4682      	mov	sl, r0
 8017438:	d8be      	bhi.n	80173b8 <_strtod_l+0x490>
 801743a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801743e:	428b      	cmp	r3, r1
 8017440:	bf86      	itte	hi
 8017442:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80174dc <_strtod_l+0x5b4>
 8017446:	f04f 3aff 	movhi.w	sl, #4294967295
 801744a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801744e:	2300      	movs	r3, #0
 8017450:	9304      	str	r3, [sp, #16]
 8017452:	e081      	b.n	8017558 <_strtod_l+0x630>
 8017454:	f018 0f01 	tst.w	r8, #1
 8017458:	d007      	beq.n	801746a <_strtod_l+0x542>
 801745a:	4b1d      	ldr	r3, [pc, #116]	; (80174d0 <_strtod_l+0x5a8>)
 801745c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8017460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017464:	f7e9 f8c8 	bl	80005f8 <__aeabi_dmul>
 8017468:	2301      	movs	r3, #1
 801746a:	f109 0901 	add.w	r9, r9, #1
 801746e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017472:	e7ca      	b.n	801740a <_strtod_l+0x4e2>
 8017474:	d0eb      	beq.n	801744e <_strtod_l+0x526>
 8017476:	f1c8 0800 	rsb	r8, r8, #0
 801747a:	f018 020f 	ands.w	r2, r8, #15
 801747e:	d00a      	beq.n	8017496 <_strtod_l+0x56e>
 8017480:	4b12      	ldr	r3, [pc, #72]	; (80174cc <_strtod_l+0x5a4>)
 8017482:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017486:	4650      	mov	r0, sl
 8017488:	4659      	mov	r1, fp
 801748a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801748e:	f7e9 f9dd 	bl	800084c <__aeabi_ddiv>
 8017492:	4682      	mov	sl, r0
 8017494:	468b      	mov	fp, r1
 8017496:	ea5f 1828 	movs.w	r8, r8, asr #4
 801749a:	d0d8      	beq.n	801744e <_strtod_l+0x526>
 801749c:	f1b8 0f1f 	cmp.w	r8, #31
 80174a0:	dd1e      	ble.n	80174e0 <_strtod_l+0x5b8>
 80174a2:	2500      	movs	r5, #0
 80174a4:	462e      	mov	r6, r5
 80174a6:	9509      	str	r5, [sp, #36]	; 0x24
 80174a8:	9507      	str	r5, [sp, #28]
 80174aa:	2322      	movs	r3, #34	; 0x22
 80174ac:	f04f 0a00 	mov.w	sl, #0
 80174b0:	f04f 0b00 	mov.w	fp, #0
 80174b4:	6023      	str	r3, [r4, #0]
 80174b6:	e789      	b.n	80173cc <_strtod_l+0x4a4>
 80174b8:	0801c521 	.word	0x0801c521
 80174bc:	0801c564 	.word	0x0801c564
 80174c0:	0801c519 	.word	0x0801c519
 80174c4:	0801c6a4 	.word	0x0801c6a4
 80174c8:	0801c960 	.word	0x0801c960
 80174cc:	0801c840 	.word	0x0801c840
 80174d0:	0801c818 	.word	0x0801c818
 80174d4:	7ff00000 	.word	0x7ff00000
 80174d8:	7ca00000 	.word	0x7ca00000
 80174dc:	7fefffff 	.word	0x7fefffff
 80174e0:	f018 0310 	ands.w	r3, r8, #16
 80174e4:	bf18      	it	ne
 80174e6:	236a      	movne	r3, #106	; 0x6a
 80174e8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80178a0 <_strtod_l+0x978>
 80174ec:	9304      	str	r3, [sp, #16]
 80174ee:	4650      	mov	r0, sl
 80174f0:	4659      	mov	r1, fp
 80174f2:	2300      	movs	r3, #0
 80174f4:	f018 0f01 	tst.w	r8, #1
 80174f8:	d004      	beq.n	8017504 <_strtod_l+0x5dc>
 80174fa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80174fe:	f7e9 f87b 	bl	80005f8 <__aeabi_dmul>
 8017502:	2301      	movs	r3, #1
 8017504:	ea5f 0868 	movs.w	r8, r8, asr #1
 8017508:	f109 0908 	add.w	r9, r9, #8
 801750c:	d1f2      	bne.n	80174f4 <_strtod_l+0x5cc>
 801750e:	b10b      	cbz	r3, 8017514 <_strtod_l+0x5ec>
 8017510:	4682      	mov	sl, r0
 8017512:	468b      	mov	fp, r1
 8017514:	9b04      	ldr	r3, [sp, #16]
 8017516:	b1bb      	cbz	r3, 8017548 <_strtod_l+0x620>
 8017518:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801751c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017520:	2b00      	cmp	r3, #0
 8017522:	4659      	mov	r1, fp
 8017524:	dd10      	ble.n	8017548 <_strtod_l+0x620>
 8017526:	2b1f      	cmp	r3, #31
 8017528:	f340 8128 	ble.w	801777c <_strtod_l+0x854>
 801752c:	2b34      	cmp	r3, #52	; 0x34
 801752e:	bfde      	ittt	le
 8017530:	3b20      	suble	r3, #32
 8017532:	f04f 32ff 	movle.w	r2, #4294967295
 8017536:	fa02 f303 	lslle.w	r3, r2, r3
 801753a:	f04f 0a00 	mov.w	sl, #0
 801753e:	bfcc      	ite	gt
 8017540:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8017544:	ea03 0b01 	andle.w	fp, r3, r1
 8017548:	2200      	movs	r2, #0
 801754a:	2300      	movs	r3, #0
 801754c:	4650      	mov	r0, sl
 801754e:	4659      	mov	r1, fp
 8017550:	f7e9 faba 	bl	8000ac8 <__aeabi_dcmpeq>
 8017554:	2800      	cmp	r0, #0
 8017556:	d1a4      	bne.n	80174a2 <_strtod_l+0x57a>
 8017558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801755a:	9300      	str	r3, [sp, #0]
 801755c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801755e:	462b      	mov	r3, r5
 8017560:	463a      	mov	r2, r7
 8017562:	4620      	mov	r0, r4
 8017564:	f001 fe2e 	bl	80191c4 <__s2b>
 8017568:	9009      	str	r0, [sp, #36]	; 0x24
 801756a:	2800      	cmp	r0, #0
 801756c:	f43f af24 	beq.w	80173b8 <_strtod_l+0x490>
 8017570:	9b07      	ldr	r3, [sp, #28]
 8017572:	1b9e      	subs	r6, r3, r6
 8017574:	9b08      	ldr	r3, [sp, #32]
 8017576:	2b00      	cmp	r3, #0
 8017578:	bfb4      	ite	lt
 801757a:	4633      	movlt	r3, r6
 801757c:	2300      	movge	r3, #0
 801757e:	9310      	str	r3, [sp, #64]	; 0x40
 8017580:	9b08      	ldr	r3, [sp, #32]
 8017582:	2500      	movs	r5, #0
 8017584:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017588:	9318      	str	r3, [sp, #96]	; 0x60
 801758a:	462e      	mov	r6, r5
 801758c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801758e:	4620      	mov	r0, r4
 8017590:	6859      	ldr	r1, [r3, #4]
 8017592:	f001 fd6b 	bl	801906c <_Balloc>
 8017596:	9007      	str	r0, [sp, #28]
 8017598:	2800      	cmp	r0, #0
 801759a:	f43f af11 	beq.w	80173c0 <_strtod_l+0x498>
 801759e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175a0:	691a      	ldr	r2, [r3, #16]
 80175a2:	3202      	adds	r2, #2
 80175a4:	f103 010c 	add.w	r1, r3, #12
 80175a8:	0092      	lsls	r2, r2, #2
 80175aa:	300c      	adds	r0, #12
 80175ac:	f7fe fce0 	bl	8015f70 <memcpy>
 80175b0:	ec4b ab10 	vmov	d0, sl, fp
 80175b4:	aa20      	add	r2, sp, #128	; 0x80
 80175b6:	a91f      	add	r1, sp, #124	; 0x7c
 80175b8:	4620      	mov	r0, r4
 80175ba:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80175be:	f002 f93d 	bl	801983c <__d2b>
 80175c2:	901e      	str	r0, [sp, #120]	; 0x78
 80175c4:	2800      	cmp	r0, #0
 80175c6:	f43f aefb 	beq.w	80173c0 <_strtod_l+0x498>
 80175ca:	2101      	movs	r1, #1
 80175cc:	4620      	mov	r0, r4
 80175ce:	f001 fe93 	bl	80192f8 <__i2b>
 80175d2:	4606      	mov	r6, r0
 80175d4:	2800      	cmp	r0, #0
 80175d6:	f43f aef3 	beq.w	80173c0 <_strtod_l+0x498>
 80175da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80175dc:	9904      	ldr	r1, [sp, #16]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	bfab      	itete	ge
 80175e2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80175e4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80175e6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80175e8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80175ec:	bfac      	ite	ge
 80175ee:	eb03 0902 	addge.w	r9, r3, r2
 80175f2:	1ad7      	sublt	r7, r2, r3
 80175f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80175f6:	eba3 0801 	sub.w	r8, r3, r1
 80175fa:	4490      	add	r8, r2
 80175fc:	4ba3      	ldr	r3, [pc, #652]	; (801788c <_strtod_l+0x964>)
 80175fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8017602:	4598      	cmp	r8, r3
 8017604:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017608:	f280 80cc 	bge.w	80177a4 <_strtod_l+0x87c>
 801760c:	eba3 0308 	sub.w	r3, r3, r8
 8017610:	2b1f      	cmp	r3, #31
 8017612:	eba2 0203 	sub.w	r2, r2, r3
 8017616:	f04f 0101 	mov.w	r1, #1
 801761a:	f300 80b6 	bgt.w	801778a <_strtod_l+0x862>
 801761e:	fa01 f303 	lsl.w	r3, r1, r3
 8017622:	9311      	str	r3, [sp, #68]	; 0x44
 8017624:	2300      	movs	r3, #0
 8017626:	930c      	str	r3, [sp, #48]	; 0x30
 8017628:	eb09 0802 	add.w	r8, r9, r2
 801762c:	9b04      	ldr	r3, [sp, #16]
 801762e:	45c1      	cmp	r9, r8
 8017630:	4417      	add	r7, r2
 8017632:	441f      	add	r7, r3
 8017634:	464b      	mov	r3, r9
 8017636:	bfa8      	it	ge
 8017638:	4643      	movge	r3, r8
 801763a:	42bb      	cmp	r3, r7
 801763c:	bfa8      	it	ge
 801763e:	463b      	movge	r3, r7
 8017640:	2b00      	cmp	r3, #0
 8017642:	bfc2      	ittt	gt
 8017644:	eba8 0803 	subgt.w	r8, r8, r3
 8017648:	1aff      	subgt	r7, r7, r3
 801764a:	eba9 0903 	subgt.w	r9, r9, r3
 801764e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017650:	2b00      	cmp	r3, #0
 8017652:	dd17      	ble.n	8017684 <_strtod_l+0x75c>
 8017654:	4631      	mov	r1, r6
 8017656:	461a      	mov	r2, r3
 8017658:	4620      	mov	r0, r4
 801765a:	f001 ff09 	bl	8019470 <__pow5mult>
 801765e:	4606      	mov	r6, r0
 8017660:	2800      	cmp	r0, #0
 8017662:	f43f aead 	beq.w	80173c0 <_strtod_l+0x498>
 8017666:	4601      	mov	r1, r0
 8017668:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801766a:	4620      	mov	r0, r4
 801766c:	f001 fe5a 	bl	8019324 <__multiply>
 8017670:	900f      	str	r0, [sp, #60]	; 0x3c
 8017672:	2800      	cmp	r0, #0
 8017674:	f43f aea4 	beq.w	80173c0 <_strtod_l+0x498>
 8017678:	991e      	ldr	r1, [sp, #120]	; 0x78
 801767a:	4620      	mov	r0, r4
 801767c:	f001 fd36 	bl	80190ec <_Bfree>
 8017680:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017682:	931e      	str	r3, [sp, #120]	; 0x78
 8017684:	f1b8 0f00 	cmp.w	r8, #0
 8017688:	f300 8091 	bgt.w	80177ae <_strtod_l+0x886>
 801768c:	9b08      	ldr	r3, [sp, #32]
 801768e:	2b00      	cmp	r3, #0
 8017690:	dd08      	ble.n	80176a4 <_strtod_l+0x77c>
 8017692:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017694:	9907      	ldr	r1, [sp, #28]
 8017696:	4620      	mov	r0, r4
 8017698:	f001 feea 	bl	8019470 <__pow5mult>
 801769c:	9007      	str	r0, [sp, #28]
 801769e:	2800      	cmp	r0, #0
 80176a0:	f43f ae8e 	beq.w	80173c0 <_strtod_l+0x498>
 80176a4:	2f00      	cmp	r7, #0
 80176a6:	dd08      	ble.n	80176ba <_strtod_l+0x792>
 80176a8:	9907      	ldr	r1, [sp, #28]
 80176aa:	463a      	mov	r2, r7
 80176ac:	4620      	mov	r0, r4
 80176ae:	f001 ff39 	bl	8019524 <__lshift>
 80176b2:	9007      	str	r0, [sp, #28]
 80176b4:	2800      	cmp	r0, #0
 80176b6:	f43f ae83 	beq.w	80173c0 <_strtod_l+0x498>
 80176ba:	f1b9 0f00 	cmp.w	r9, #0
 80176be:	dd08      	ble.n	80176d2 <_strtod_l+0x7aa>
 80176c0:	4631      	mov	r1, r6
 80176c2:	464a      	mov	r2, r9
 80176c4:	4620      	mov	r0, r4
 80176c6:	f001 ff2d 	bl	8019524 <__lshift>
 80176ca:	4606      	mov	r6, r0
 80176cc:	2800      	cmp	r0, #0
 80176ce:	f43f ae77 	beq.w	80173c0 <_strtod_l+0x498>
 80176d2:	9a07      	ldr	r2, [sp, #28]
 80176d4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80176d6:	4620      	mov	r0, r4
 80176d8:	f001 ffac 	bl	8019634 <__mdiff>
 80176dc:	4605      	mov	r5, r0
 80176de:	2800      	cmp	r0, #0
 80176e0:	f43f ae6e 	beq.w	80173c0 <_strtod_l+0x498>
 80176e4:	68c3      	ldr	r3, [r0, #12]
 80176e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80176e8:	2300      	movs	r3, #0
 80176ea:	60c3      	str	r3, [r0, #12]
 80176ec:	4631      	mov	r1, r6
 80176ee:	f001 ff85 	bl	80195fc <__mcmp>
 80176f2:	2800      	cmp	r0, #0
 80176f4:	da65      	bge.n	80177c2 <_strtod_l+0x89a>
 80176f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80176f8:	ea53 030a 	orrs.w	r3, r3, sl
 80176fc:	f040 8087 	bne.w	801780e <_strtod_l+0x8e6>
 8017700:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017704:	2b00      	cmp	r3, #0
 8017706:	f040 8082 	bne.w	801780e <_strtod_l+0x8e6>
 801770a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801770e:	0d1b      	lsrs	r3, r3, #20
 8017710:	051b      	lsls	r3, r3, #20
 8017712:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017716:	d97a      	bls.n	801780e <_strtod_l+0x8e6>
 8017718:	696b      	ldr	r3, [r5, #20]
 801771a:	b913      	cbnz	r3, 8017722 <_strtod_l+0x7fa>
 801771c:	692b      	ldr	r3, [r5, #16]
 801771e:	2b01      	cmp	r3, #1
 8017720:	dd75      	ble.n	801780e <_strtod_l+0x8e6>
 8017722:	4629      	mov	r1, r5
 8017724:	2201      	movs	r2, #1
 8017726:	4620      	mov	r0, r4
 8017728:	f001 fefc 	bl	8019524 <__lshift>
 801772c:	4631      	mov	r1, r6
 801772e:	4605      	mov	r5, r0
 8017730:	f001 ff64 	bl	80195fc <__mcmp>
 8017734:	2800      	cmp	r0, #0
 8017736:	dd6a      	ble.n	801780e <_strtod_l+0x8e6>
 8017738:	9904      	ldr	r1, [sp, #16]
 801773a:	4a55      	ldr	r2, [pc, #340]	; (8017890 <_strtod_l+0x968>)
 801773c:	465b      	mov	r3, fp
 801773e:	2900      	cmp	r1, #0
 8017740:	f000 8085 	beq.w	801784e <_strtod_l+0x926>
 8017744:	ea02 010b 	and.w	r1, r2, fp
 8017748:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801774c:	dc7f      	bgt.n	801784e <_strtod_l+0x926>
 801774e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017752:	f77f aeaa 	ble.w	80174aa <_strtod_l+0x582>
 8017756:	4a4f      	ldr	r2, [pc, #316]	; (8017894 <_strtod_l+0x96c>)
 8017758:	2300      	movs	r3, #0
 801775a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801775e:	4650      	mov	r0, sl
 8017760:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8017764:	4659      	mov	r1, fp
 8017766:	f7e8 ff47 	bl	80005f8 <__aeabi_dmul>
 801776a:	460b      	mov	r3, r1
 801776c:	4303      	orrs	r3, r0
 801776e:	bf08      	it	eq
 8017770:	2322      	moveq	r3, #34	; 0x22
 8017772:	4682      	mov	sl, r0
 8017774:	468b      	mov	fp, r1
 8017776:	bf08      	it	eq
 8017778:	6023      	streq	r3, [r4, #0]
 801777a:	e62b      	b.n	80173d4 <_strtod_l+0x4ac>
 801777c:	f04f 32ff 	mov.w	r2, #4294967295
 8017780:	fa02 f303 	lsl.w	r3, r2, r3
 8017784:	ea03 0a0a 	and.w	sl, r3, sl
 8017788:	e6de      	b.n	8017548 <_strtod_l+0x620>
 801778a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801778e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8017792:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8017796:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801779a:	fa01 f308 	lsl.w	r3, r1, r8
 801779e:	930c      	str	r3, [sp, #48]	; 0x30
 80177a0:	9111      	str	r1, [sp, #68]	; 0x44
 80177a2:	e741      	b.n	8017628 <_strtod_l+0x700>
 80177a4:	2300      	movs	r3, #0
 80177a6:	930c      	str	r3, [sp, #48]	; 0x30
 80177a8:	2301      	movs	r3, #1
 80177aa:	9311      	str	r3, [sp, #68]	; 0x44
 80177ac:	e73c      	b.n	8017628 <_strtod_l+0x700>
 80177ae:	991e      	ldr	r1, [sp, #120]	; 0x78
 80177b0:	4642      	mov	r2, r8
 80177b2:	4620      	mov	r0, r4
 80177b4:	f001 feb6 	bl	8019524 <__lshift>
 80177b8:	901e      	str	r0, [sp, #120]	; 0x78
 80177ba:	2800      	cmp	r0, #0
 80177bc:	f47f af66 	bne.w	801768c <_strtod_l+0x764>
 80177c0:	e5fe      	b.n	80173c0 <_strtod_l+0x498>
 80177c2:	465f      	mov	r7, fp
 80177c4:	d16e      	bne.n	80178a4 <_strtod_l+0x97c>
 80177c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80177c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80177cc:	b342      	cbz	r2, 8017820 <_strtod_l+0x8f8>
 80177ce:	4a32      	ldr	r2, [pc, #200]	; (8017898 <_strtod_l+0x970>)
 80177d0:	4293      	cmp	r3, r2
 80177d2:	d128      	bne.n	8017826 <_strtod_l+0x8fe>
 80177d4:	9b04      	ldr	r3, [sp, #16]
 80177d6:	4650      	mov	r0, sl
 80177d8:	b1eb      	cbz	r3, 8017816 <_strtod_l+0x8ee>
 80177da:	4a2d      	ldr	r2, [pc, #180]	; (8017890 <_strtod_l+0x968>)
 80177dc:	403a      	ands	r2, r7
 80177de:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80177e2:	f04f 31ff 	mov.w	r1, #4294967295
 80177e6:	d819      	bhi.n	801781c <_strtod_l+0x8f4>
 80177e8:	0d12      	lsrs	r2, r2, #20
 80177ea:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80177ee:	fa01 f303 	lsl.w	r3, r1, r3
 80177f2:	4298      	cmp	r0, r3
 80177f4:	d117      	bne.n	8017826 <_strtod_l+0x8fe>
 80177f6:	4b29      	ldr	r3, [pc, #164]	; (801789c <_strtod_l+0x974>)
 80177f8:	429f      	cmp	r7, r3
 80177fa:	d102      	bne.n	8017802 <_strtod_l+0x8da>
 80177fc:	3001      	adds	r0, #1
 80177fe:	f43f addf 	beq.w	80173c0 <_strtod_l+0x498>
 8017802:	4b23      	ldr	r3, [pc, #140]	; (8017890 <_strtod_l+0x968>)
 8017804:	403b      	ands	r3, r7
 8017806:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801780a:	f04f 0a00 	mov.w	sl, #0
 801780e:	9b04      	ldr	r3, [sp, #16]
 8017810:	2b00      	cmp	r3, #0
 8017812:	d1a0      	bne.n	8017756 <_strtod_l+0x82e>
 8017814:	e5de      	b.n	80173d4 <_strtod_l+0x4ac>
 8017816:	f04f 33ff 	mov.w	r3, #4294967295
 801781a:	e7ea      	b.n	80177f2 <_strtod_l+0x8ca>
 801781c:	460b      	mov	r3, r1
 801781e:	e7e8      	b.n	80177f2 <_strtod_l+0x8ca>
 8017820:	ea53 030a 	orrs.w	r3, r3, sl
 8017824:	d088      	beq.n	8017738 <_strtod_l+0x810>
 8017826:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017828:	b1db      	cbz	r3, 8017862 <_strtod_l+0x93a>
 801782a:	423b      	tst	r3, r7
 801782c:	d0ef      	beq.n	801780e <_strtod_l+0x8e6>
 801782e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017830:	9a04      	ldr	r2, [sp, #16]
 8017832:	4650      	mov	r0, sl
 8017834:	4659      	mov	r1, fp
 8017836:	b1c3      	cbz	r3, 801786a <_strtod_l+0x942>
 8017838:	f7ff fb58 	bl	8016eec <sulp>
 801783c:	4602      	mov	r2, r0
 801783e:	460b      	mov	r3, r1
 8017840:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017844:	f7e8 fd22 	bl	800028c <__adddf3>
 8017848:	4682      	mov	sl, r0
 801784a:	468b      	mov	fp, r1
 801784c:	e7df      	b.n	801780e <_strtod_l+0x8e6>
 801784e:	4013      	ands	r3, r2
 8017850:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017854:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017858:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801785c:	f04f 3aff 	mov.w	sl, #4294967295
 8017860:	e7d5      	b.n	801780e <_strtod_l+0x8e6>
 8017862:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017864:	ea13 0f0a 	tst.w	r3, sl
 8017868:	e7e0      	b.n	801782c <_strtod_l+0x904>
 801786a:	f7ff fb3f 	bl	8016eec <sulp>
 801786e:	4602      	mov	r2, r0
 8017870:	460b      	mov	r3, r1
 8017872:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017876:	f7e8 fd07 	bl	8000288 <__aeabi_dsub>
 801787a:	2200      	movs	r2, #0
 801787c:	2300      	movs	r3, #0
 801787e:	4682      	mov	sl, r0
 8017880:	468b      	mov	fp, r1
 8017882:	f7e9 f921 	bl	8000ac8 <__aeabi_dcmpeq>
 8017886:	2800      	cmp	r0, #0
 8017888:	d0c1      	beq.n	801780e <_strtod_l+0x8e6>
 801788a:	e60e      	b.n	80174aa <_strtod_l+0x582>
 801788c:	fffffc02 	.word	0xfffffc02
 8017890:	7ff00000 	.word	0x7ff00000
 8017894:	39500000 	.word	0x39500000
 8017898:	000fffff 	.word	0x000fffff
 801789c:	7fefffff 	.word	0x7fefffff
 80178a0:	0801c578 	.word	0x0801c578
 80178a4:	4631      	mov	r1, r6
 80178a6:	4628      	mov	r0, r5
 80178a8:	f002 f824 	bl	80198f4 <__ratio>
 80178ac:	ec59 8b10 	vmov	r8, r9, d0
 80178b0:	ee10 0a10 	vmov	r0, s0
 80178b4:	2200      	movs	r2, #0
 80178b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80178ba:	4649      	mov	r1, r9
 80178bc:	f7e9 f918 	bl	8000af0 <__aeabi_dcmple>
 80178c0:	2800      	cmp	r0, #0
 80178c2:	d07c      	beq.n	80179be <_strtod_l+0xa96>
 80178c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d04c      	beq.n	8017964 <_strtod_l+0xa3c>
 80178ca:	4b95      	ldr	r3, [pc, #596]	; (8017b20 <_strtod_l+0xbf8>)
 80178cc:	2200      	movs	r2, #0
 80178ce:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80178d2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8017b20 <_strtod_l+0xbf8>
 80178d6:	f04f 0800 	mov.w	r8, #0
 80178da:	4b92      	ldr	r3, [pc, #584]	; (8017b24 <_strtod_l+0xbfc>)
 80178dc:	403b      	ands	r3, r7
 80178de:	9311      	str	r3, [sp, #68]	; 0x44
 80178e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80178e2:	4b91      	ldr	r3, [pc, #580]	; (8017b28 <_strtod_l+0xc00>)
 80178e4:	429a      	cmp	r2, r3
 80178e6:	f040 80b2 	bne.w	8017a4e <_strtod_l+0xb26>
 80178ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80178ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80178f2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80178f6:	ec4b ab10 	vmov	d0, sl, fp
 80178fa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80178fe:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017902:	f001 ff1f 	bl	8019744 <__ulp>
 8017906:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801790a:	ec53 2b10 	vmov	r2, r3, d0
 801790e:	f7e8 fe73 	bl	80005f8 <__aeabi_dmul>
 8017912:	4652      	mov	r2, sl
 8017914:	465b      	mov	r3, fp
 8017916:	f7e8 fcb9 	bl	800028c <__adddf3>
 801791a:	460b      	mov	r3, r1
 801791c:	4981      	ldr	r1, [pc, #516]	; (8017b24 <_strtod_l+0xbfc>)
 801791e:	4a83      	ldr	r2, [pc, #524]	; (8017b2c <_strtod_l+0xc04>)
 8017920:	4019      	ands	r1, r3
 8017922:	4291      	cmp	r1, r2
 8017924:	4682      	mov	sl, r0
 8017926:	d95e      	bls.n	80179e6 <_strtod_l+0xabe>
 8017928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801792a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801792e:	4293      	cmp	r3, r2
 8017930:	d103      	bne.n	801793a <_strtod_l+0xa12>
 8017932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017934:	3301      	adds	r3, #1
 8017936:	f43f ad43 	beq.w	80173c0 <_strtod_l+0x498>
 801793a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8017b38 <_strtod_l+0xc10>
 801793e:	f04f 3aff 	mov.w	sl, #4294967295
 8017942:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017944:	4620      	mov	r0, r4
 8017946:	f001 fbd1 	bl	80190ec <_Bfree>
 801794a:	9907      	ldr	r1, [sp, #28]
 801794c:	4620      	mov	r0, r4
 801794e:	f001 fbcd 	bl	80190ec <_Bfree>
 8017952:	4631      	mov	r1, r6
 8017954:	4620      	mov	r0, r4
 8017956:	f001 fbc9 	bl	80190ec <_Bfree>
 801795a:	4629      	mov	r1, r5
 801795c:	4620      	mov	r0, r4
 801795e:	f001 fbc5 	bl	80190ec <_Bfree>
 8017962:	e613      	b.n	801758c <_strtod_l+0x664>
 8017964:	f1ba 0f00 	cmp.w	sl, #0
 8017968:	d11b      	bne.n	80179a2 <_strtod_l+0xa7a>
 801796a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801796e:	b9f3      	cbnz	r3, 80179ae <_strtod_l+0xa86>
 8017970:	4b6b      	ldr	r3, [pc, #428]	; (8017b20 <_strtod_l+0xbf8>)
 8017972:	2200      	movs	r2, #0
 8017974:	4640      	mov	r0, r8
 8017976:	4649      	mov	r1, r9
 8017978:	f7e9 f8b0 	bl	8000adc <__aeabi_dcmplt>
 801797c:	b9d0      	cbnz	r0, 80179b4 <_strtod_l+0xa8c>
 801797e:	4640      	mov	r0, r8
 8017980:	4649      	mov	r1, r9
 8017982:	4b6b      	ldr	r3, [pc, #428]	; (8017b30 <_strtod_l+0xc08>)
 8017984:	2200      	movs	r2, #0
 8017986:	f7e8 fe37 	bl	80005f8 <__aeabi_dmul>
 801798a:	4680      	mov	r8, r0
 801798c:	4689      	mov	r9, r1
 801798e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8017992:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8017996:	931b      	str	r3, [sp, #108]	; 0x6c
 8017998:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801799c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80179a0:	e79b      	b.n	80178da <_strtod_l+0x9b2>
 80179a2:	f1ba 0f01 	cmp.w	sl, #1
 80179a6:	d102      	bne.n	80179ae <_strtod_l+0xa86>
 80179a8:	2f00      	cmp	r7, #0
 80179aa:	f43f ad7e 	beq.w	80174aa <_strtod_l+0x582>
 80179ae:	4b61      	ldr	r3, [pc, #388]	; (8017b34 <_strtod_l+0xc0c>)
 80179b0:	2200      	movs	r2, #0
 80179b2:	e78c      	b.n	80178ce <_strtod_l+0x9a6>
 80179b4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8017b30 <_strtod_l+0xc08>
 80179b8:	f04f 0800 	mov.w	r8, #0
 80179bc:	e7e7      	b.n	801798e <_strtod_l+0xa66>
 80179be:	4b5c      	ldr	r3, [pc, #368]	; (8017b30 <_strtod_l+0xc08>)
 80179c0:	4640      	mov	r0, r8
 80179c2:	4649      	mov	r1, r9
 80179c4:	2200      	movs	r2, #0
 80179c6:	f7e8 fe17 	bl	80005f8 <__aeabi_dmul>
 80179ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80179cc:	4680      	mov	r8, r0
 80179ce:	4689      	mov	r9, r1
 80179d0:	b933      	cbnz	r3, 80179e0 <_strtod_l+0xab8>
 80179d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80179d6:	9012      	str	r0, [sp, #72]	; 0x48
 80179d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80179da:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80179de:	e7dd      	b.n	801799c <_strtod_l+0xa74>
 80179e0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80179e4:	e7f9      	b.n	80179da <_strtod_l+0xab2>
 80179e6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80179ea:	9b04      	ldr	r3, [sp, #16]
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d1a8      	bne.n	8017942 <_strtod_l+0xa1a>
 80179f0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80179f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80179f6:	0d1b      	lsrs	r3, r3, #20
 80179f8:	051b      	lsls	r3, r3, #20
 80179fa:	429a      	cmp	r2, r3
 80179fc:	d1a1      	bne.n	8017942 <_strtod_l+0xa1a>
 80179fe:	4640      	mov	r0, r8
 8017a00:	4649      	mov	r1, r9
 8017a02:	f7e9 f959 	bl	8000cb8 <__aeabi_d2lz>
 8017a06:	f7e8 fdc9 	bl	800059c <__aeabi_l2d>
 8017a0a:	4602      	mov	r2, r0
 8017a0c:	460b      	mov	r3, r1
 8017a0e:	4640      	mov	r0, r8
 8017a10:	4649      	mov	r1, r9
 8017a12:	f7e8 fc39 	bl	8000288 <__aeabi_dsub>
 8017a16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017a18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017a1c:	ea43 030a 	orr.w	r3, r3, sl
 8017a20:	4313      	orrs	r3, r2
 8017a22:	4680      	mov	r8, r0
 8017a24:	4689      	mov	r9, r1
 8017a26:	d053      	beq.n	8017ad0 <_strtod_l+0xba8>
 8017a28:	a335      	add	r3, pc, #212	; (adr r3, 8017b00 <_strtod_l+0xbd8>)
 8017a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a2e:	f7e9 f855 	bl	8000adc <__aeabi_dcmplt>
 8017a32:	2800      	cmp	r0, #0
 8017a34:	f47f acce 	bne.w	80173d4 <_strtod_l+0x4ac>
 8017a38:	a333      	add	r3, pc, #204	; (adr r3, 8017b08 <_strtod_l+0xbe0>)
 8017a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a3e:	4640      	mov	r0, r8
 8017a40:	4649      	mov	r1, r9
 8017a42:	f7e9 f869 	bl	8000b18 <__aeabi_dcmpgt>
 8017a46:	2800      	cmp	r0, #0
 8017a48:	f43f af7b 	beq.w	8017942 <_strtod_l+0xa1a>
 8017a4c:	e4c2      	b.n	80173d4 <_strtod_l+0x4ac>
 8017a4e:	9b04      	ldr	r3, [sp, #16]
 8017a50:	b333      	cbz	r3, 8017aa0 <_strtod_l+0xb78>
 8017a52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017a54:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017a58:	d822      	bhi.n	8017aa0 <_strtod_l+0xb78>
 8017a5a:	a32d      	add	r3, pc, #180	; (adr r3, 8017b10 <_strtod_l+0xbe8>)
 8017a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a60:	4640      	mov	r0, r8
 8017a62:	4649      	mov	r1, r9
 8017a64:	f7e9 f844 	bl	8000af0 <__aeabi_dcmple>
 8017a68:	b1a0      	cbz	r0, 8017a94 <_strtod_l+0xb6c>
 8017a6a:	4649      	mov	r1, r9
 8017a6c:	4640      	mov	r0, r8
 8017a6e:	f7e9 f89b 	bl	8000ba8 <__aeabi_d2uiz>
 8017a72:	2801      	cmp	r0, #1
 8017a74:	bf38      	it	cc
 8017a76:	2001      	movcc	r0, #1
 8017a78:	f7e8 fd44 	bl	8000504 <__aeabi_ui2d>
 8017a7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a7e:	4680      	mov	r8, r0
 8017a80:	4689      	mov	r9, r1
 8017a82:	bb13      	cbnz	r3, 8017aca <_strtod_l+0xba2>
 8017a84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017a88:	9014      	str	r0, [sp, #80]	; 0x50
 8017a8a:	9315      	str	r3, [sp, #84]	; 0x54
 8017a8c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017a90:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017a94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017a96:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017a98:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017a9c:	1a9b      	subs	r3, r3, r2
 8017a9e:	930d      	str	r3, [sp, #52]	; 0x34
 8017aa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017aa4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017aa8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017aac:	f001 fe4a 	bl	8019744 <__ulp>
 8017ab0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017ab4:	ec53 2b10 	vmov	r2, r3, d0
 8017ab8:	f7e8 fd9e 	bl	80005f8 <__aeabi_dmul>
 8017abc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017ac0:	f7e8 fbe4 	bl	800028c <__adddf3>
 8017ac4:	4682      	mov	sl, r0
 8017ac6:	468b      	mov	fp, r1
 8017ac8:	e78f      	b.n	80179ea <_strtod_l+0xac2>
 8017aca:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8017ace:	e7dd      	b.n	8017a8c <_strtod_l+0xb64>
 8017ad0:	a311      	add	r3, pc, #68	; (adr r3, 8017b18 <_strtod_l+0xbf0>)
 8017ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ad6:	f7e9 f801 	bl	8000adc <__aeabi_dcmplt>
 8017ada:	e7b4      	b.n	8017a46 <_strtod_l+0xb1e>
 8017adc:	2300      	movs	r3, #0
 8017ade:	930e      	str	r3, [sp, #56]	; 0x38
 8017ae0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8017ae2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017ae4:	6013      	str	r3, [r2, #0]
 8017ae6:	f7ff ba65 	b.w	8016fb4 <_strtod_l+0x8c>
 8017aea:	2b65      	cmp	r3, #101	; 0x65
 8017aec:	f43f ab5d 	beq.w	80171aa <_strtod_l+0x282>
 8017af0:	2b45      	cmp	r3, #69	; 0x45
 8017af2:	f43f ab5a 	beq.w	80171aa <_strtod_l+0x282>
 8017af6:	2201      	movs	r2, #1
 8017af8:	f7ff bb92 	b.w	8017220 <_strtod_l+0x2f8>
 8017afc:	f3af 8000 	nop.w
 8017b00:	94a03595 	.word	0x94a03595
 8017b04:	3fdfffff 	.word	0x3fdfffff
 8017b08:	35afe535 	.word	0x35afe535
 8017b0c:	3fe00000 	.word	0x3fe00000
 8017b10:	ffc00000 	.word	0xffc00000
 8017b14:	41dfffff 	.word	0x41dfffff
 8017b18:	94a03595 	.word	0x94a03595
 8017b1c:	3fcfffff 	.word	0x3fcfffff
 8017b20:	3ff00000 	.word	0x3ff00000
 8017b24:	7ff00000 	.word	0x7ff00000
 8017b28:	7fe00000 	.word	0x7fe00000
 8017b2c:	7c9fffff 	.word	0x7c9fffff
 8017b30:	3fe00000 	.word	0x3fe00000
 8017b34:	bff00000 	.word	0xbff00000
 8017b38:	7fefffff 	.word	0x7fefffff

08017b3c <_strtod_r>:
 8017b3c:	4b01      	ldr	r3, [pc, #4]	; (8017b44 <_strtod_r+0x8>)
 8017b3e:	f7ff b9f3 	b.w	8016f28 <_strtod_l>
 8017b42:	bf00      	nop
 8017b44:	20004278 	.word	0x20004278

08017b48 <_strtol_l.isra.0>:
 8017b48:	2b01      	cmp	r3, #1
 8017b4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b4e:	d001      	beq.n	8017b54 <_strtol_l.isra.0+0xc>
 8017b50:	2b24      	cmp	r3, #36	; 0x24
 8017b52:	d906      	bls.n	8017b62 <_strtol_l.isra.0+0x1a>
 8017b54:	f7fe f9d2 	bl	8015efc <__errno>
 8017b58:	2316      	movs	r3, #22
 8017b5a:	6003      	str	r3, [r0, #0]
 8017b5c:	2000      	movs	r0, #0
 8017b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b62:	4f3a      	ldr	r7, [pc, #232]	; (8017c4c <_strtol_l.isra.0+0x104>)
 8017b64:	468e      	mov	lr, r1
 8017b66:	4676      	mov	r6, lr
 8017b68:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017b6c:	5de5      	ldrb	r5, [r4, r7]
 8017b6e:	f015 0508 	ands.w	r5, r5, #8
 8017b72:	d1f8      	bne.n	8017b66 <_strtol_l.isra.0+0x1e>
 8017b74:	2c2d      	cmp	r4, #45	; 0x2d
 8017b76:	d134      	bne.n	8017be2 <_strtol_l.isra.0+0x9a>
 8017b78:	f89e 4000 	ldrb.w	r4, [lr]
 8017b7c:	f04f 0801 	mov.w	r8, #1
 8017b80:	f106 0e02 	add.w	lr, r6, #2
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d05c      	beq.n	8017c42 <_strtol_l.isra.0+0xfa>
 8017b88:	2b10      	cmp	r3, #16
 8017b8a:	d10c      	bne.n	8017ba6 <_strtol_l.isra.0+0x5e>
 8017b8c:	2c30      	cmp	r4, #48	; 0x30
 8017b8e:	d10a      	bne.n	8017ba6 <_strtol_l.isra.0+0x5e>
 8017b90:	f89e 4000 	ldrb.w	r4, [lr]
 8017b94:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017b98:	2c58      	cmp	r4, #88	; 0x58
 8017b9a:	d14d      	bne.n	8017c38 <_strtol_l.isra.0+0xf0>
 8017b9c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8017ba0:	2310      	movs	r3, #16
 8017ba2:	f10e 0e02 	add.w	lr, lr, #2
 8017ba6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8017baa:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017bae:	2600      	movs	r6, #0
 8017bb0:	fbbc f9f3 	udiv	r9, ip, r3
 8017bb4:	4635      	mov	r5, r6
 8017bb6:	fb03 ca19 	mls	sl, r3, r9, ip
 8017bba:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8017bbe:	2f09      	cmp	r7, #9
 8017bc0:	d818      	bhi.n	8017bf4 <_strtol_l.isra.0+0xac>
 8017bc2:	463c      	mov	r4, r7
 8017bc4:	42a3      	cmp	r3, r4
 8017bc6:	dd24      	ble.n	8017c12 <_strtol_l.isra.0+0xca>
 8017bc8:	2e00      	cmp	r6, #0
 8017bca:	db1f      	blt.n	8017c0c <_strtol_l.isra.0+0xc4>
 8017bcc:	45a9      	cmp	r9, r5
 8017bce:	d31d      	bcc.n	8017c0c <_strtol_l.isra.0+0xc4>
 8017bd0:	d101      	bne.n	8017bd6 <_strtol_l.isra.0+0x8e>
 8017bd2:	45a2      	cmp	sl, r4
 8017bd4:	db1a      	blt.n	8017c0c <_strtol_l.isra.0+0xc4>
 8017bd6:	fb05 4503 	mla	r5, r5, r3, r4
 8017bda:	2601      	movs	r6, #1
 8017bdc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017be0:	e7eb      	b.n	8017bba <_strtol_l.isra.0+0x72>
 8017be2:	2c2b      	cmp	r4, #43	; 0x2b
 8017be4:	bf08      	it	eq
 8017be6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8017bea:	46a8      	mov	r8, r5
 8017bec:	bf08      	it	eq
 8017bee:	f106 0e02 	addeq.w	lr, r6, #2
 8017bf2:	e7c7      	b.n	8017b84 <_strtol_l.isra.0+0x3c>
 8017bf4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017bf8:	2f19      	cmp	r7, #25
 8017bfa:	d801      	bhi.n	8017c00 <_strtol_l.isra.0+0xb8>
 8017bfc:	3c37      	subs	r4, #55	; 0x37
 8017bfe:	e7e1      	b.n	8017bc4 <_strtol_l.isra.0+0x7c>
 8017c00:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017c04:	2f19      	cmp	r7, #25
 8017c06:	d804      	bhi.n	8017c12 <_strtol_l.isra.0+0xca>
 8017c08:	3c57      	subs	r4, #87	; 0x57
 8017c0a:	e7db      	b.n	8017bc4 <_strtol_l.isra.0+0x7c>
 8017c0c:	f04f 36ff 	mov.w	r6, #4294967295
 8017c10:	e7e4      	b.n	8017bdc <_strtol_l.isra.0+0x94>
 8017c12:	2e00      	cmp	r6, #0
 8017c14:	da05      	bge.n	8017c22 <_strtol_l.isra.0+0xda>
 8017c16:	2322      	movs	r3, #34	; 0x22
 8017c18:	6003      	str	r3, [r0, #0]
 8017c1a:	4665      	mov	r5, ip
 8017c1c:	b942      	cbnz	r2, 8017c30 <_strtol_l.isra.0+0xe8>
 8017c1e:	4628      	mov	r0, r5
 8017c20:	e79d      	b.n	8017b5e <_strtol_l.isra.0+0x16>
 8017c22:	f1b8 0f00 	cmp.w	r8, #0
 8017c26:	d000      	beq.n	8017c2a <_strtol_l.isra.0+0xe2>
 8017c28:	426d      	negs	r5, r5
 8017c2a:	2a00      	cmp	r2, #0
 8017c2c:	d0f7      	beq.n	8017c1e <_strtol_l.isra.0+0xd6>
 8017c2e:	b10e      	cbz	r6, 8017c34 <_strtol_l.isra.0+0xec>
 8017c30:	f10e 31ff 	add.w	r1, lr, #4294967295
 8017c34:	6011      	str	r1, [r2, #0]
 8017c36:	e7f2      	b.n	8017c1e <_strtol_l.isra.0+0xd6>
 8017c38:	2430      	movs	r4, #48	; 0x30
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d1b3      	bne.n	8017ba6 <_strtol_l.isra.0+0x5e>
 8017c3e:	2308      	movs	r3, #8
 8017c40:	e7b1      	b.n	8017ba6 <_strtol_l.isra.0+0x5e>
 8017c42:	2c30      	cmp	r4, #48	; 0x30
 8017c44:	d0a4      	beq.n	8017b90 <_strtol_l.isra.0+0x48>
 8017c46:	230a      	movs	r3, #10
 8017c48:	e7ad      	b.n	8017ba6 <_strtol_l.isra.0+0x5e>
 8017c4a:	bf00      	nop
 8017c4c:	0801c5a1 	.word	0x0801c5a1

08017c50 <_strtol_r>:
 8017c50:	f7ff bf7a 	b.w	8017b48 <_strtol_l.isra.0>

08017c54 <quorem>:
 8017c54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c58:	6903      	ldr	r3, [r0, #16]
 8017c5a:	690c      	ldr	r4, [r1, #16]
 8017c5c:	42a3      	cmp	r3, r4
 8017c5e:	4607      	mov	r7, r0
 8017c60:	f2c0 8081 	blt.w	8017d66 <quorem+0x112>
 8017c64:	3c01      	subs	r4, #1
 8017c66:	f101 0814 	add.w	r8, r1, #20
 8017c6a:	f100 0514 	add.w	r5, r0, #20
 8017c6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017c72:	9301      	str	r3, [sp, #4]
 8017c74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017c78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017c7c:	3301      	adds	r3, #1
 8017c7e:	429a      	cmp	r2, r3
 8017c80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017c84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017c88:	fbb2 f6f3 	udiv	r6, r2, r3
 8017c8c:	d331      	bcc.n	8017cf2 <quorem+0x9e>
 8017c8e:	f04f 0e00 	mov.w	lr, #0
 8017c92:	4640      	mov	r0, r8
 8017c94:	46ac      	mov	ip, r5
 8017c96:	46f2      	mov	sl, lr
 8017c98:	f850 2b04 	ldr.w	r2, [r0], #4
 8017c9c:	b293      	uxth	r3, r2
 8017c9e:	fb06 e303 	mla	r3, r6, r3, lr
 8017ca2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017ca6:	b29b      	uxth	r3, r3
 8017ca8:	ebaa 0303 	sub.w	r3, sl, r3
 8017cac:	0c12      	lsrs	r2, r2, #16
 8017cae:	f8dc a000 	ldr.w	sl, [ip]
 8017cb2:	fb06 e202 	mla	r2, r6, r2, lr
 8017cb6:	fa13 f38a 	uxtah	r3, r3, sl
 8017cba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017cbe:	fa1f fa82 	uxth.w	sl, r2
 8017cc2:	f8dc 2000 	ldr.w	r2, [ip]
 8017cc6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8017cca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017cce:	b29b      	uxth	r3, r3
 8017cd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017cd4:	4581      	cmp	r9, r0
 8017cd6:	f84c 3b04 	str.w	r3, [ip], #4
 8017cda:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017cde:	d2db      	bcs.n	8017c98 <quorem+0x44>
 8017ce0:	f855 300b 	ldr.w	r3, [r5, fp]
 8017ce4:	b92b      	cbnz	r3, 8017cf2 <quorem+0x9e>
 8017ce6:	9b01      	ldr	r3, [sp, #4]
 8017ce8:	3b04      	subs	r3, #4
 8017cea:	429d      	cmp	r5, r3
 8017cec:	461a      	mov	r2, r3
 8017cee:	d32e      	bcc.n	8017d4e <quorem+0xfa>
 8017cf0:	613c      	str	r4, [r7, #16]
 8017cf2:	4638      	mov	r0, r7
 8017cf4:	f001 fc82 	bl	80195fc <__mcmp>
 8017cf8:	2800      	cmp	r0, #0
 8017cfa:	db24      	blt.n	8017d46 <quorem+0xf2>
 8017cfc:	3601      	adds	r6, #1
 8017cfe:	4628      	mov	r0, r5
 8017d00:	f04f 0c00 	mov.w	ip, #0
 8017d04:	f858 2b04 	ldr.w	r2, [r8], #4
 8017d08:	f8d0 e000 	ldr.w	lr, [r0]
 8017d0c:	b293      	uxth	r3, r2
 8017d0e:	ebac 0303 	sub.w	r3, ip, r3
 8017d12:	0c12      	lsrs	r2, r2, #16
 8017d14:	fa13 f38e 	uxtah	r3, r3, lr
 8017d18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017d1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017d20:	b29b      	uxth	r3, r3
 8017d22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017d26:	45c1      	cmp	r9, r8
 8017d28:	f840 3b04 	str.w	r3, [r0], #4
 8017d2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017d30:	d2e8      	bcs.n	8017d04 <quorem+0xb0>
 8017d32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017d36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017d3a:	b922      	cbnz	r2, 8017d46 <quorem+0xf2>
 8017d3c:	3b04      	subs	r3, #4
 8017d3e:	429d      	cmp	r5, r3
 8017d40:	461a      	mov	r2, r3
 8017d42:	d30a      	bcc.n	8017d5a <quorem+0x106>
 8017d44:	613c      	str	r4, [r7, #16]
 8017d46:	4630      	mov	r0, r6
 8017d48:	b003      	add	sp, #12
 8017d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d4e:	6812      	ldr	r2, [r2, #0]
 8017d50:	3b04      	subs	r3, #4
 8017d52:	2a00      	cmp	r2, #0
 8017d54:	d1cc      	bne.n	8017cf0 <quorem+0x9c>
 8017d56:	3c01      	subs	r4, #1
 8017d58:	e7c7      	b.n	8017cea <quorem+0x96>
 8017d5a:	6812      	ldr	r2, [r2, #0]
 8017d5c:	3b04      	subs	r3, #4
 8017d5e:	2a00      	cmp	r2, #0
 8017d60:	d1f0      	bne.n	8017d44 <quorem+0xf0>
 8017d62:	3c01      	subs	r4, #1
 8017d64:	e7eb      	b.n	8017d3e <quorem+0xea>
 8017d66:	2000      	movs	r0, #0
 8017d68:	e7ee      	b.n	8017d48 <quorem+0xf4>
 8017d6a:	0000      	movs	r0, r0
 8017d6c:	0000      	movs	r0, r0
	...

08017d70 <_dtoa_r>:
 8017d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d74:	ed2d 8b02 	vpush	{d8}
 8017d78:	ec57 6b10 	vmov	r6, r7, d0
 8017d7c:	b095      	sub	sp, #84	; 0x54
 8017d7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017d80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017d84:	9105      	str	r1, [sp, #20]
 8017d86:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8017d8a:	4604      	mov	r4, r0
 8017d8c:	9209      	str	r2, [sp, #36]	; 0x24
 8017d8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017d90:	b975      	cbnz	r5, 8017db0 <_dtoa_r+0x40>
 8017d92:	2010      	movs	r0, #16
 8017d94:	f7fe f8dc 	bl	8015f50 <malloc>
 8017d98:	4602      	mov	r2, r0
 8017d9a:	6260      	str	r0, [r4, #36]	; 0x24
 8017d9c:	b920      	cbnz	r0, 8017da8 <_dtoa_r+0x38>
 8017d9e:	4bb2      	ldr	r3, [pc, #712]	; (8018068 <_dtoa_r+0x2f8>)
 8017da0:	21ea      	movs	r1, #234	; 0xea
 8017da2:	48b2      	ldr	r0, [pc, #712]	; (801806c <_dtoa_r+0x2fc>)
 8017da4:	f001 ffb0 	bl	8019d08 <__assert_func>
 8017da8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017dac:	6005      	str	r5, [r0, #0]
 8017dae:	60c5      	str	r5, [r0, #12]
 8017db0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017db2:	6819      	ldr	r1, [r3, #0]
 8017db4:	b151      	cbz	r1, 8017dcc <_dtoa_r+0x5c>
 8017db6:	685a      	ldr	r2, [r3, #4]
 8017db8:	604a      	str	r2, [r1, #4]
 8017dba:	2301      	movs	r3, #1
 8017dbc:	4093      	lsls	r3, r2
 8017dbe:	608b      	str	r3, [r1, #8]
 8017dc0:	4620      	mov	r0, r4
 8017dc2:	f001 f993 	bl	80190ec <_Bfree>
 8017dc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017dc8:	2200      	movs	r2, #0
 8017dca:	601a      	str	r2, [r3, #0]
 8017dcc:	1e3b      	subs	r3, r7, #0
 8017dce:	bfb9      	ittee	lt
 8017dd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017dd4:	9303      	strlt	r3, [sp, #12]
 8017dd6:	2300      	movge	r3, #0
 8017dd8:	f8c8 3000 	strge.w	r3, [r8]
 8017ddc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8017de0:	4ba3      	ldr	r3, [pc, #652]	; (8018070 <_dtoa_r+0x300>)
 8017de2:	bfbc      	itt	lt
 8017de4:	2201      	movlt	r2, #1
 8017de6:	f8c8 2000 	strlt.w	r2, [r8]
 8017dea:	ea33 0309 	bics.w	r3, r3, r9
 8017dee:	d11b      	bne.n	8017e28 <_dtoa_r+0xb8>
 8017df0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017df2:	f242 730f 	movw	r3, #9999	; 0x270f
 8017df6:	6013      	str	r3, [r2, #0]
 8017df8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017dfc:	4333      	orrs	r3, r6
 8017dfe:	f000 857a 	beq.w	80188f6 <_dtoa_r+0xb86>
 8017e02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017e04:	b963      	cbnz	r3, 8017e20 <_dtoa_r+0xb0>
 8017e06:	4b9b      	ldr	r3, [pc, #620]	; (8018074 <_dtoa_r+0x304>)
 8017e08:	e024      	b.n	8017e54 <_dtoa_r+0xe4>
 8017e0a:	4b9b      	ldr	r3, [pc, #620]	; (8018078 <_dtoa_r+0x308>)
 8017e0c:	9300      	str	r3, [sp, #0]
 8017e0e:	3308      	adds	r3, #8
 8017e10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017e12:	6013      	str	r3, [r2, #0]
 8017e14:	9800      	ldr	r0, [sp, #0]
 8017e16:	b015      	add	sp, #84	; 0x54
 8017e18:	ecbd 8b02 	vpop	{d8}
 8017e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e20:	4b94      	ldr	r3, [pc, #592]	; (8018074 <_dtoa_r+0x304>)
 8017e22:	9300      	str	r3, [sp, #0]
 8017e24:	3303      	adds	r3, #3
 8017e26:	e7f3      	b.n	8017e10 <_dtoa_r+0xa0>
 8017e28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017e2c:	2200      	movs	r2, #0
 8017e2e:	ec51 0b17 	vmov	r0, r1, d7
 8017e32:	2300      	movs	r3, #0
 8017e34:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8017e38:	f7e8 fe46 	bl	8000ac8 <__aeabi_dcmpeq>
 8017e3c:	4680      	mov	r8, r0
 8017e3e:	b158      	cbz	r0, 8017e58 <_dtoa_r+0xe8>
 8017e40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017e42:	2301      	movs	r3, #1
 8017e44:	6013      	str	r3, [r2, #0]
 8017e46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	f000 8551 	beq.w	80188f0 <_dtoa_r+0xb80>
 8017e4e:	488b      	ldr	r0, [pc, #556]	; (801807c <_dtoa_r+0x30c>)
 8017e50:	6018      	str	r0, [r3, #0]
 8017e52:	1e43      	subs	r3, r0, #1
 8017e54:	9300      	str	r3, [sp, #0]
 8017e56:	e7dd      	b.n	8017e14 <_dtoa_r+0xa4>
 8017e58:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017e5c:	aa12      	add	r2, sp, #72	; 0x48
 8017e5e:	a913      	add	r1, sp, #76	; 0x4c
 8017e60:	4620      	mov	r0, r4
 8017e62:	f001 fceb 	bl	801983c <__d2b>
 8017e66:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017e6a:	4683      	mov	fp, r0
 8017e6c:	2d00      	cmp	r5, #0
 8017e6e:	d07c      	beq.n	8017f6a <_dtoa_r+0x1fa>
 8017e70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017e72:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8017e76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017e7a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8017e7e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8017e82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8017e86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017e8a:	4b7d      	ldr	r3, [pc, #500]	; (8018080 <_dtoa_r+0x310>)
 8017e8c:	2200      	movs	r2, #0
 8017e8e:	4630      	mov	r0, r6
 8017e90:	4639      	mov	r1, r7
 8017e92:	f7e8 f9f9 	bl	8000288 <__aeabi_dsub>
 8017e96:	a36e      	add	r3, pc, #440	; (adr r3, 8018050 <_dtoa_r+0x2e0>)
 8017e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e9c:	f7e8 fbac 	bl	80005f8 <__aeabi_dmul>
 8017ea0:	a36d      	add	r3, pc, #436	; (adr r3, 8018058 <_dtoa_r+0x2e8>)
 8017ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ea6:	f7e8 f9f1 	bl	800028c <__adddf3>
 8017eaa:	4606      	mov	r6, r0
 8017eac:	4628      	mov	r0, r5
 8017eae:	460f      	mov	r7, r1
 8017eb0:	f7e8 fb38 	bl	8000524 <__aeabi_i2d>
 8017eb4:	a36a      	add	r3, pc, #424	; (adr r3, 8018060 <_dtoa_r+0x2f0>)
 8017eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017eba:	f7e8 fb9d 	bl	80005f8 <__aeabi_dmul>
 8017ebe:	4602      	mov	r2, r0
 8017ec0:	460b      	mov	r3, r1
 8017ec2:	4630      	mov	r0, r6
 8017ec4:	4639      	mov	r1, r7
 8017ec6:	f7e8 f9e1 	bl	800028c <__adddf3>
 8017eca:	4606      	mov	r6, r0
 8017ecc:	460f      	mov	r7, r1
 8017ece:	f7e8 fe43 	bl	8000b58 <__aeabi_d2iz>
 8017ed2:	2200      	movs	r2, #0
 8017ed4:	4682      	mov	sl, r0
 8017ed6:	2300      	movs	r3, #0
 8017ed8:	4630      	mov	r0, r6
 8017eda:	4639      	mov	r1, r7
 8017edc:	f7e8 fdfe 	bl	8000adc <__aeabi_dcmplt>
 8017ee0:	b148      	cbz	r0, 8017ef6 <_dtoa_r+0x186>
 8017ee2:	4650      	mov	r0, sl
 8017ee4:	f7e8 fb1e 	bl	8000524 <__aeabi_i2d>
 8017ee8:	4632      	mov	r2, r6
 8017eea:	463b      	mov	r3, r7
 8017eec:	f7e8 fdec 	bl	8000ac8 <__aeabi_dcmpeq>
 8017ef0:	b908      	cbnz	r0, 8017ef6 <_dtoa_r+0x186>
 8017ef2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017ef6:	f1ba 0f16 	cmp.w	sl, #22
 8017efa:	d854      	bhi.n	8017fa6 <_dtoa_r+0x236>
 8017efc:	4b61      	ldr	r3, [pc, #388]	; (8018084 <_dtoa_r+0x314>)
 8017efe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017f0a:	f7e8 fde7 	bl	8000adc <__aeabi_dcmplt>
 8017f0e:	2800      	cmp	r0, #0
 8017f10:	d04b      	beq.n	8017faa <_dtoa_r+0x23a>
 8017f12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017f16:	2300      	movs	r3, #0
 8017f18:	930e      	str	r3, [sp, #56]	; 0x38
 8017f1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017f1c:	1b5d      	subs	r5, r3, r5
 8017f1e:	1e6b      	subs	r3, r5, #1
 8017f20:	9304      	str	r3, [sp, #16]
 8017f22:	bf43      	ittte	mi
 8017f24:	2300      	movmi	r3, #0
 8017f26:	f1c5 0801 	rsbmi	r8, r5, #1
 8017f2a:	9304      	strmi	r3, [sp, #16]
 8017f2c:	f04f 0800 	movpl.w	r8, #0
 8017f30:	f1ba 0f00 	cmp.w	sl, #0
 8017f34:	db3b      	blt.n	8017fae <_dtoa_r+0x23e>
 8017f36:	9b04      	ldr	r3, [sp, #16]
 8017f38:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8017f3c:	4453      	add	r3, sl
 8017f3e:	9304      	str	r3, [sp, #16]
 8017f40:	2300      	movs	r3, #0
 8017f42:	9306      	str	r3, [sp, #24]
 8017f44:	9b05      	ldr	r3, [sp, #20]
 8017f46:	2b09      	cmp	r3, #9
 8017f48:	d869      	bhi.n	801801e <_dtoa_r+0x2ae>
 8017f4a:	2b05      	cmp	r3, #5
 8017f4c:	bfc4      	itt	gt
 8017f4e:	3b04      	subgt	r3, #4
 8017f50:	9305      	strgt	r3, [sp, #20]
 8017f52:	9b05      	ldr	r3, [sp, #20]
 8017f54:	f1a3 0302 	sub.w	r3, r3, #2
 8017f58:	bfcc      	ite	gt
 8017f5a:	2500      	movgt	r5, #0
 8017f5c:	2501      	movle	r5, #1
 8017f5e:	2b03      	cmp	r3, #3
 8017f60:	d869      	bhi.n	8018036 <_dtoa_r+0x2c6>
 8017f62:	e8df f003 	tbb	[pc, r3]
 8017f66:	4e2c      	.short	0x4e2c
 8017f68:	5a4c      	.short	0x5a4c
 8017f6a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8017f6e:	441d      	add	r5, r3
 8017f70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017f74:	2b20      	cmp	r3, #32
 8017f76:	bfc1      	itttt	gt
 8017f78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017f7c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8017f80:	fa09 f303 	lslgt.w	r3, r9, r3
 8017f84:	fa26 f000 	lsrgt.w	r0, r6, r0
 8017f88:	bfda      	itte	le
 8017f8a:	f1c3 0320 	rsble	r3, r3, #32
 8017f8e:	fa06 f003 	lslle.w	r0, r6, r3
 8017f92:	4318      	orrgt	r0, r3
 8017f94:	f7e8 fab6 	bl	8000504 <__aeabi_ui2d>
 8017f98:	2301      	movs	r3, #1
 8017f9a:	4606      	mov	r6, r0
 8017f9c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8017fa0:	3d01      	subs	r5, #1
 8017fa2:	9310      	str	r3, [sp, #64]	; 0x40
 8017fa4:	e771      	b.n	8017e8a <_dtoa_r+0x11a>
 8017fa6:	2301      	movs	r3, #1
 8017fa8:	e7b6      	b.n	8017f18 <_dtoa_r+0x1a8>
 8017faa:	900e      	str	r0, [sp, #56]	; 0x38
 8017fac:	e7b5      	b.n	8017f1a <_dtoa_r+0x1aa>
 8017fae:	f1ca 0300 	rsb	r3, sl, #0
 8017fb2:	9306      	str	r3, [sp, #24]
 8017fb4:	2300      	movs	r3, #0
 8017fb6:	eba8 080a 	sub.w	r8, r8, sl
 8017fba:	930d      	str	r3, [sp, #52]	; 0x34
 8017fbc:	e7c2      	b.n	8017f44 <_dtoa_r+0x1d4>
 8017fbe:	2300      	movs	r3, #0
 8017fc0:	9308      	str	r3, [sp, #32]
 8017fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	dc39      	bgt.n	801803c <_dtoa_r+0x2cc>
 8017fc8:	f04f 0901 	mov.w	r9, #1
 8017fcc:	f8cd 9004 	str.w	r9, [sp, #4]
 8017fd0:	464b      	mov	r3, r9
 8017fd2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8017fd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017fd8:	2200      	movs	r2, #0
 8017fda:	6042      	str	r2, [r0, #4]
 8017fdc:	2204      	movs	r2, #4
 8017fde:	f102 0614 	add.w	r6, r2, #20
 8017fe2:	429e      	cmp	r6, r3
 8017fe4:	6841      	ldr	r1, [r0, #4]
 8017fe6:	d92f      	bls.n	8018048 <_dtoa_r+0x2d8>
 8017fe8:	4620      	mov	r0, r4
 8017fea:	f001 f83f 	bl	801906c <_Balloc>
 8017fee:	9000      	str	r0, [sp, #0]
 8017ff0:	2800      	cmp	r0, #0
 8017ff2:	d14b      	bne.n	801808c <_dtoa_r+0x31c>
 8017ff4:	4b24      	ldr	r3, [pc, #144]	; (8018088 <_dtoa_r+0x318>)
 8017ff6:	4602      	mov	r2, r0
 8017ff8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017ffc:	e6d1      	b.n	8017da2 <_dtoa_r+0x32>
 8017ffe:	2301      	movs	r3, #1
 8018000:	e7de      	b.n	8017fc0 <_dtoa_r+0x250>
 8018002:	2300      	movs	r3, #0
 8018004:	9308      	str	r3, [sp, #32]
 8018006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018008:	eb0a 0903 	add.w	r9, sl, r3
 801800c:	f109 0301 	add.w	r3, r9, #1
 8018010:	2b01      	cmp	r3, #1
 8018012:	9301      	str	r3, [sp, #4]
 8018014:	bfb8      	it	lt
 8018016:	2301      	movlt	r3, #1
 8018018:	e7dd      	b.n	8017fd6 <_dtoa_r+0x266>
 801801a:	2301      	movs	r3, #1
 801801c:	e7f2      	b.n	8018004 <_dtoa_r+0x294>
 801801e:	2501      	movs	r5, #1
 8018020:	2300      	movs	r3, #0
 8018022:	9305      	str	r3, [sp, #20]
 8018024:	9508      	str	r5, [sp, #32]
 8018026:	f04f 39ff 	mov.w	r9, #4294967295
 801802a:	2200      	movs	r2, #0
 801802c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018030:	2312      	movs	r3, #18
 8018032:	9209      	str	r2, [sp, #36]	; 0x24
 8018034:	e7cf      	b.n	8017fd6 <_dtoa_r+0x266>
 8018036:	2301      	movs	r3, #1
 8018038:	9308      	str	r3, [sp, #32]
 801803a:	e7f4      	b.n	8018026 <_dtoa_r+0x2b6>
 801803c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018040:	f8cd 9004 	str.w	r9, [sp, #4]
 8018044:	464b      	mov	r3, r9
 8018046:	e7c6      	b.n	8017fd6 <_dtoa_r+0x266>
 8018048:	3101      	adds	r1, #1
 801804a:	6041      	str	r1, [r0, #4]
 801804c:	0052      	lsls	r2, r2, #1
 801804e:	e7c6      	b.n	8017fde <_dtoa_r+0x26e>
 8018050:	636f4361 	.word	0x636f4361
 8018054:	3fd287a7 	.word	0x3fd287a7
 8018058:	8b60c8b3 	.word	0x8b60c8b3
 801805c:	3fc68a28 	.word	0x3fc68a28
 8018060:	509f79fb 	.word	0x509f79fb
 8018064:	3fd34413 	.word	0x3fd34413
 8018068:	0801c6ae 	.word	0x0801c6ae
 801806c:	0801c6c5 	.word	0x0801c6c5
 8018070:	7ff00000 	.word	0x7ff00000
 8018074:	0801c6aa 	.word	0x0801c6aa
 8018078:	0801c6a1 	.word	0x0801c6a1
 801807c:	0801c525 	.word	0x0801c525
 8018080:	3ff80000 	.word	0x3ff80000
 8018084:	0801c840 	.word	0x0801c840
 8018088:	0801c724 	.word	0x0801c724
 801808c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801808e:	9a00      	ldr	r2, [sp, #0]
 8018090:	601a      	str	r2, [r3, #0]
 8018092:	9b01      	ldr	r3, [sp, #4]
 8018094:	2b0e      	cmp	r3, #14
 8018096:	f200 80ad 	bhi.w	80181f4 <_dtoa_r+0x484>
 801809a:	2d00      	cmp	r5, #0
 801809c:	f000 80aa 	beq.w	80181f4 <_dtoa_r+0x484>
 80180a0:	f1ba 0f00 	cmp.w	sl, #0
 80180a4:	dd36      	ble.n	8018114 <_dtoa_r+0x3a4>
 80180a6:	4ac3      	ldr	r2, [pc, #780]	; (80183b4 <_dtoa_r+0x644>)
 80180a8:	f00a 030f 	and.w	r3, sl, #15
 80180ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80180b0:	ed93 7b00 	vldr	d7, [r3]
 80180b4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80180b8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80180bc:	eeb0 8a47 	vmov.f32	s16, s14
 80180c0:	eef0 8a67 	vmov.f32	s17, s15
 80180c4:	d016      	beq.n	80180f4 <_dtoa_r+0x384>
 80180c6:	4bbc      	ldr	r3, [pc, #752]	; (80183b8 <_dtoa_r+0x648>)
 80180c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80180cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80180d0:	f7e8 fbbc 	bl	800084c <__aeabi_ddiv>
 80180d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80180d8:	f007 070f 	and.w	r7, r7, #15
 80180dc:	2503      	movs	r5, #3
 80180de:	4eb6      	ldr	r6, [pc, #728]	; (80183b8 <_dtoa_r+0x648>)
 80180e0:	b957      	cbnz	r7, 80180f8 <_dtoa_r+0x388>
 80180e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80180e6:	ec53 2b18 	vmov	r2, r3, d8
 80180ea:	f7e8 fbaf 	bl	800084c <__aeabi_ddiv>
 80180ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80180f2:	e029      	b.n	8018148 <_dtoa_r+0x3d8>
 80180f4:	2502      	movs	r5, #2
 80180f6:	e7f2      	b.n	80180de <_dtoa_r+0x36e>
 80180f8:	07f9      	lsls	r1, r7, #31
 80180fa:	d508      	bpl.n	801810e <_dtoa_r+0x39e>
 80180fc:	ec51 0b18 	vmov	r0, r1, d8
 8018100:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018104:	f7e8 fa78 	bl	80005f8 <__aeabi_dmul>
 8018108:	ec41 0b18 	vmov	d8, r0, r1
 801810c:	3501      	adds	r5, #1
 801810e:	107f      	asrs	r7, r7, #1
 8018110:	3608      	adds	r6, #8
 8018112:	e7e5      	b.n	80180e0 <_dtoa_r+0x370>
 8018114:	f000 80a6 	beq.w	8018264 <_dtoa_r+0x4f4>
 8018118:	f1ca 0600 	rsb	r6, sl, #0
 801811c:	4ba5      	ldr	r3, [pc, #660]	; (80183b4 <_dtoa_r+0x644>)
 801811e:	4fa6      	ldr	r7, [pc, #664]	; (80183b8 <_dtoa_r+0x648>)
 8018120:	f006 020f 	and.w	r2, r6, #15
 8018124:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801812c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018130:	f7e8 fa62 	bl	80005f8 <__aeabi_dmul>
 8018134:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018138:	1136      	asrs	r6, r6, #4
 801813a:	2300      	movs	r3, #0
 801813c:	2502      	movs	r5, #2
 801813e:	2e00      	cmp	r6, #0
 8018140:	f040 8085 	bne.w	801824e <_dtoa_r+0x4de>
 8018144:	2b00      	cmp	r3, #0
 8018146:	d1d2      	bne.n	80180ee <_dtoa_r+0x37e>
 8018148:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801814a:	2b00      	cmp	r3, #0
 801814c:	f000 808c 	beq.w	8018268 <_dtoa_r+0x4f8>
 8018150:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018154:	4b99      	ldr	r3, [pc, #612]	; (80183bc <_dtoa_r+0x64c>)
 8018156:	2200      	movs	r2, #0
 8018158:	4630      	mov	r0, r6
 801815a:	4639      	mov	r1, r7
 801815c:	f7e8 fcbe 	bl	8000adc <__aeabi_dcmplt>
 8018160:	2800      	cmp	r0, #0
 8018162:	f000 8081 	beq.w	8018268 <_dtoa_r+0x4f8>
 8018166:	9b01      	ldr	r3, [sp, #4]
 8018168:	2b00      	cmp	r3, #0
 801816a:	d07d      	beq.n	8018268 <_dtoa_r+0x4f8>
 801816c:	f1b9 0f00 	cmp.w	r9, #0
 8018170:	dd3c      	ble.n	80181ec <_dtoa_r+0x47c>
 8018172:	f10a 33ff 	add.w	r3, sl, #4294967295
 8018176:	9307      	str	r3, [sp, #28]
 8018178:	2200      	movs	r2, #0
 801817a:	4b91      	ldr	r3, [pc, #580]	; (80183c0 <_dtoa_r+0x650>)
 801817c:	4630      	mov	r0, r6
 801817e:	4639      	mov	r1, r7
 8018180:	f7e8 fa3a 	bl	80005f8 <__aeabi_dmul>
 8018184:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018188:	3501      	adds	r5, #1
 801818a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801818e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018192:	4628      	mov	r0, r5
 8018194:	f7e8 f9c6 	bl	8000524 <__aeabi_i2d>
 8018198:	4632      	mov	r2, r6
 801819a:	463b      	mov	r3, r7
 801819c:	f7e8 fa2c 	bl	80005f8 <__aeabi_dmul>
 80181a0:	4b88      	ldr	r3, [pc, #544]	; (80183c4 <_dtoa_r+0x654>)
 80181a2:	2200      	movs	r2, #0
 80181a4:	f7e8 f872 	bl	800028c <__adddf3>
 80181a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80181ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80181b0:	9303      	str	r3, [sp, #12]
 80181b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d15c      	bne.n	8018272 <_dtoa_r+0x502>
 80181b8:	4b83      	ldr	r3, [pc, #524]	; (80183c8 <_dtoa_r+0x658>)
 80181ba:	2200      	movs	r2, #0
 80181bc:	4630      	mov	r0, r6
 80181be:	4639      	mov	r1, r7
 80181c0:	f7e8 f862 	bl	8000288 <__aeabi_dsub>
 80181c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80181c8:	4606      	mov	r6, r0
 80181ca:	460f      	mov	r7, r1
 80181cc:	f7e8 fca4 	bl	8000b18 <__aeabi_dcmpgt>
 80181d0:	2800      	cmp	r0, #0
 80181d2:	f040 8296 	bne.w	8018702 <_dtoa_r+0x992>
 80181d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80181da:	4630      	mov	r0, r6
 80181dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80181e0:	4639      	mov	r1, r7
 80181e2:	f7e8 fc7b 	bl	8000adc <__aeabi_dcmplt>
 80181e6:	2800      	cmp	r0, #0
 80181e8:	f040 8288 	bne.w	80186fc <_dtoa_r+0x98c>
 80181ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80181f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80181f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	f2c0 8158 	blt.w	80184ac <_dtoa_r+0x73c>
 80181fc:	f1ba 0f0e 	cmp.w	sl, #14
 8018200:	f300 8154 	bgt.w	80184ac <_dtoa_r+0x73c>
 8018204:	4b6b      	ldr	r3, [pc, #428]	; (80183b4 <_dtoa_r+0x644>)
 8018206:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801820a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801820e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018210:	2b00      	cmp	r3, #0
 8018212:	f280 80e3 	bge.w	80183dc <_dtoa_r+0x66c>
 8018216:	9b01      	ldr	r3, [sp, #4]
 8018218:	2b00      	cmp	r3, #0
 801821a:	f300 80df 	bgt.w	80183dc <_dtoa_r+0x66c>
 801821e:	f040 826d 	bne.w	80186fc <_dtoa_r+0x98c>
 8018222:	4b69      	ldr	r3, [pc, #420]	; (80183c8 <_dtoa_r+0x658>)
 8018224:	2200      	movs	r2, #0
 8018226:	4640      	mov	r0, r8
 8018228:	4649      	mov	r1, r9
 801822a:	f7e8 f9e5 	bl	80005f8 <__aeabi_dmul>
 801822e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018232:	f7e8 fc67 	bl	8000b04 <__aeabi_dcmpge>
 8018236:	9e01      	ldr	r6, [sp, #4]
 8018238:	4637      	mov	r7, r6
 801823a:	2800      	cmp	r0, #0
 801823c:	f040 8243 	bne.w	80186c6 <_dtoa_r+0x956>
 8018240:	9d00      	ldr	r5, [sp, #0]
 8018242:	2331      	movs	r3, #49	; 0x31
 8018244:	f805 3b01 	strb.w	r3, [r5], #1
 8018248:	f10a 0a01 	add.w	sl, sl, #1
 801824c:	e23f      	b.n	80186ce <_dtoa_r+0x95e>
 801824e:	07f2      	lsls	r2, r6, #31
 8018250:	d505      	bpl.n	801825e <_dtoa_r+0x4ee>
 8018252:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018256:	f7e8 f9cf 	bl	80005f8 <__aeabi_dmul>
 801825a:	3501      	adds	r5, #1
 801825c:	2301      	movs	r3, #1
 801825e:	1076      	asrs	r6, r6, #1
 8018260:	3708      	adds	r7, #8
 8018262:	e76c      	b.n	801813e <_dtoa_r+0x3ce>
 8018264:	2502      	movs	r5, #2
 8018266:	e76f      	b.n	8018148 <_dtoa_r+0x3d8>
 8018268:	9b01      	ldr	r3, [sp, #4]
 801826a:	f8cd a01c 	str.w	sl, [sp, #28]
 801826e:	930c      	str	r3, [sp, #48]	; 0x30
 8018270:	e78d      	b.n	801818e <_dtoa_r+0x41e>
 8018272:	9900      	ldr	r1, [sp, #0]
 8018274:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018276:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018278:	4b4e      	ldr	r3, [pc, #312]	; (80183b4 <_dtoa_r+0x644>)
 801827a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801827e:	4401      	add	r1, r0
 8018280:	9102      	str	r1, [sp, #8]
 8018282:	9908      	ldr	r1, [sp, #32]
 8018284:	eeb0 8a47 	vmov.f32	s16, s14
 8018288:	eef0 8a67 	vmov.f32	s17, s15
 801828c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018290:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018294:	2900      	cmp	r1, #0
 8018296:	d045      	beq.n	8018324 <_dtoa_r+0x5b4>
 8018298:	494c      	ldr	r1, [pc, #304]	; (80183cc <_dtoa_r+0x65c>)
 801829a:	2000      	movs	r0, #0
 801829c:	f7e8 fad6 	bl	800084c <__aeabi_ddiv>
 80182a0:	ec53 2b18 	vmov	r2, r3, d8
 80182a4:	f7e7 fff0 	bl	8000288 <__aeabi_dsub>
 80182a8:	9d00      	ldr	r5, [sp, #0]
 80182aa:	ec41 0b18 	vmov	d8, r0, r1
 80182ae:	4639      	mov	r1, r7
 80182b0:	4630      	mov	r0, r6
 80182b2:	f7e8 fc51 	bl	8000b58 <__aeabi_d2iz>
 80182b6:	900c      	str	r0, [sp, #48]	; 0x30
 80182b8:	f7e8 f934 	bl	8000524 <__aeabi_i2d>
 80182bc:	4602      	mov	r2, r0
 80182be:	460b      	mov	r3, r1
 80182c0:	4630      	mov	r0, r6
 80182c2:	4639      	mov	r1, r7
 80182c4:	f7e7 ffe0 	bl	8000288 <__aeabi_dsub>
 80182c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80182ca:	3330      	adds	r3, #48	; 0x30
 80182cc:	f805 3b01 	strb.w	r3, [r5], #1
 80182d0:	ec53 2b18 	vmov	r2, r3, d8
 80182d4:	4606      	mov	r6, r0
 80182d6:	460f      	mov	r7, r1
 80182d8:	f7e8 fc00 	bl	8000adc <__aeabi_dcmplt>
 80182dc:	2800      	cmp	r0, #0
 80182de:	d165      	bne.n	80183ac <_dtoa_r+0x63c>
 80182e0:	4632      	mov	r2, r6
 80182e2:	463b      	mov	r3, r7
 80182e4:	4935      	ldr	r1, [pc, #212]	; (80183bc <_dtoa_r+0x64c>)
 80182e6:	2000      	movs	r0, #0
 80182e8:	f7e7 ffce 	bl	8000288 <__aeabi_dsub>
 80182ec:	ec53 2b18 	vmov	r2, r3, d8
 80182f0:	f7e8 fbf4 	bl	8000adc <__aeabi_dcmplt>
 80182f4:	2800      	cmp	r0, #0
 80182f6:	f040 80b9 	bne.w	801846c <_dtoa_r+0x6fc>
 80182fa:	9b02      	ldr	r3, [sp, #8]
 80182fc:	429d      	cmp	r5, r3
 80182fe:	f43f af75 	beq.w	80181ec <_dtoa_r+0x47c>
 8018302:	4b2f      	ldr	r3, [pc, #188]	; (80183c0 <_dtoa_r+0x650>)
 8018304:	ec51 0b18 	vmov	r0, r1, d8
 8018308:	2200      	movs	r2, #0
 801830a:	f7e8 f975 	bl	80005f8 <__aeabi_dmul>
 801830e:	4b2c      	ldr	r3, [pc, #176]	; (80183c0 <_dtoa_r+0x650>)
 8018310:	ec41 0b18 	vmov	d8, r0, r1
 8018314:	2200      	movs	r2, #0
 8018316:	4630      	mov	r0, r6
 8018318:	4639      	mov	r1, r7
 801831a:	f7e8 f96d 	bl	80005f8 <__aeabi_dmul>
 801831e:	4606      	mov	r6, r0
 8018320:	460f      	mov	r7, r1
 8018322:	e7c4      	b.n	80182ae <_dtoa_r+0x53e>
 8018324:	ec51 0b17 	vmov	r0, r1, d7
 8018328:	f7e8 f966 	bl	80005f8 <__aeabi_dmul>
 801832c:	9b02      	ldr	r3, [sp, #8]
 801832e:	9d00      	ldr	r5, [sp, #0]
 8018330:	930c      	str	r3, [sp, #48]	; 0x30
 8018332:	ec41 0b18 	vmov	d8, r0, r1
 8018336:	4639      	mov	r1, r7
 8018338:	4630      	mov	r0, r6
 801833a:	f7e8 fc0d 	bl	8000b58 <__aeabi_d2iz>
 801833e:	9011      	str	r0, [sp, #68]	; 0x44
 8018340:	f7e8 f8f0 	bl	8000524 <__aeabi_i2d>
 8018344:	4602      	mov	r2, r0
 8018346:	460b      	mov	r3, r1
 8018348:	4630      	mov	r0, r6
 801834a:	4639      	mov	r1, r7
 801834c:	f7e7 ff9c 	bl	8000288 <__aeabi_dsub>
 8018350:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018352:	3330      	adds	r3, #48	; 0x30
 8018354:	f805 3b01 	strb.w	r3, [r5], #1
 8018358:	9b02      	ldr	r3, [sp, #8]
 801835a:	429d      	cmp	r5, r3
 801835c:	4606      	mov	r6, r0
 801835e:	460f      	mov	r7, r1
 8018360:	f04f 0200 	mov.w	r2, #0
 8018364:	d134      	bne.n	80183d0 <_dtoa_r+0x660>
 8018366:	4b19      	ldr	r3, [pc, #100]	; (80183cc <_dtoa_r+0x65c>)
 8018368:	ec51 0b18 	vmov	r0, r1, d8
 801836c:	f7e7 ff8e 	bl	800028c <__adddf3>
 8018370:	4602      	mov	r2, r0
 8018372:	460b      	mov	r3, r1
 8018374:	4630      	mov	r0, r6
 8018376:	4639      	mov	r1, r7
 8018378:	f7e8 fbce 	bl	8000b18 <__aeabi_dcmpgt>
 801837c:	2800      	cmp	r0, #0
 801837e:	d175      	bne.n	801846c <_dtoa_r+0x6fc>
 8018380:	ec53 2b18 	vmov	r2, r3, d8
 8018384:	4911      	ldr	r1, [pc, #68]	; (80183cc <_dtoa_r+0x65c>)
 8018386:	2000      	movs	r0, #0
 8018388:	f7e7 ff7e 	bl	8000288 <__aeabi_dsub>
 801838c:	4602      	mov	r2, r0
 801838e:	460b      	mov	r3, r1
 8018390:	4630      	mov	r0, r6
 8018392:	4639      	mov	r1, r7
 8018394:	f7e8 fba2 	bl	8000adc <__aeabi_dcmplt>
 8018398:	2800      	cmp	r0, #0
 801839a:	f43f af27 	beq.w	80181ec <_dtoa_r+0x47c>
 801839e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80183a0:	1e6b      	subs	r3, r5, #1
 80183a2:	930c      	str	r3, [sp, #48]	; 0x30
 80183a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80183a8:	2b30      	cmp	r3, #48	; 0x30
 80183aa:	d0f8      	beq.n	801839e <_dtoa_r+0x62e>
 80183ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80183b0:	e04a      	b.n	8018448 <_dtoa_r+0x6d8>
 80183b2:	bf00      	nop
 80183b4:	0801c840 	.word	0x0801c840
 80183b8:	0801c818 	.word	0x0801c818
 80183bc:	3ff00000 	.word	0x3ff00000
 80183c0:	40240000 	.word	0x40240000
 80183c4:	401c0000 	.word	0x401c0000
 80183c8:	40140000 	.word	0x40140000
 80183cc:	3fe00000 	.word	0x3fe00000
 80183d0:	4baf      	ldr	r3, [pc, #700]	; (8018690 <_dtoa_r+0x920>)
 80183d2:	f7e8 f911 	bl	80005f8 <__aeabi_dmul>
 80183d6:	4606      	mov	r6, r0
 80183d8:	460f      	mov	r7, r1
 80183da:	e7ac      	b.n	8018336 <_dtoa_r+0x5c6>
 80183dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80183e0:	9d00      	ldr	r5, [sp, #0]
 80183e2:	4642      	mov	r2, r8
 80183e4:	464b      	mov	r3, r9
 80183e6:	4630      	mov	r0, r6
 80183e8:	4639      	mov	r1, r7
 80183ea:	f7e8 fa2f 	bl	800084c <__aeabi_ddiv>
 80183ee:	f7e8 fbb3 	bl	8000b58 <__aeabi_d2iz>
 80183f2:	9002      	str	r0, [sp, #8]
 80183f4:	f7e8 f896 	bl	8000524 <__aeabi_i2d>
 80183f8:	4642      	mov	r2, r8
 80183fa:	464b      	mov	r3, r9
 80183fc:	f7e8 f8fc 	bl	80005f8 <__aeabi_dmul>
 8018400:	4602      	mov	r2, r0
 8018402:	460b      	mov	r3, r1
 8018404:	4630      	mov	r0, r6
 8018406:	4639      	mov	r1, r7
 8018408:	f7e7 ff3e 	bl	8000288 <__aeabi_dsub>
 801840c:	9e02      	ldr	r6, [sp, #8]
 801840e:	9f01      	ldr	r7, [sp, #4]
 8018410:	3630      	adds	r6, #48	; 0x30
 8018412:	f805 6b01 	strb.w	r6, [r5], #1
 8018416:	9e00      	ldr	r6, [sp, #0]
 8018418:	1bae      	subs	r6, r5, r6
 801841a:	42b7      	cmp	r7, r6
 801841c:	4602      	mov	r2, r0
 801841e:	460b      	mov	r3, r1
 8018420:	d137      	bne.n	8018492 <_dtoa_r+0x722>
 8018422:	f7e7 ff33 	bl	800028c <__adddf3>
 8018426:	4642      	mov	r2, r8
 8018428:	464b      	mov	r3, r9
 801842a:	4606      	mov	r6, r0
 801842c:	460f      	mov	r7, r1
 801842e:	f7e8 fb73 	bl	8000b18 <__aeabi_dcmpgt>
 8018432:	b9c8      	cbnz	r0, 8018468 <_dtoa_r+0x6f8>
 8018434:	4642      	mov	r2, r8
 8018436:	464b      	mov	r3, r9
 8018438:	4630      	mov	r0, r6
 801843a:	4639      	mov	r1, r7
 801843c:	f7e8 fb44 	bl	8000ac8 <__aeabi_dcmpeq>
 8018440:	b110      	cbz	r0, 8018448 <_dtoa_r+0x6d8>
 8018442:	9b02      	ldr	r3, [sp, #8]
 8018444:	07d9      	lsls	r1, r3, #31
 8018446:	d40f      	bmi.n	8018468 <_dtoa_r+0x6f8>
 8018448:	4620      	mov	r0, r4
 801844a:	4659      	mov	r1, fp
 801844c:	f000 fe4e 	bl	80190ec <_Bfree>
 8018450:	2300      	movs	r3, #0
 8018452:	702b      	strb	r3, [r5, #0]
 8018454:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018456:	f10a 0001 	add.w	r0, sl, #1
 801845a:	6018      	str	r0, [r3, #0]
 801845c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801845e:	2b00      	cmp	r3, #0
 8018460:	f43f acd8 	beq.w	8017e14 <_dtoa_r+0xa4>
 8018464:	601d      	str	r5, [r3, #0]
 8018466:	e4d5      	b.n	8017e14 <_dtoa_r+0xa4>
 8018468:	f8cd a01c 	str.w	sl, [sp, #28]
 801846c:	462b      	mov	r3, r5
 801846e:	461d      	mov	r5, r3
 8018470:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018474:	2a39      	cmp	r2, #57	; 0x39
 8018476:	d108      	bne.n	801848a <_dtoa_r+0x71a>
 8018478:	9a00      	ldr	r2, [sp, #0]
 801847a:	429a      	cmp	r2, r3
 801847c:	d1f7      	bne.n	801846e <_dtoa_r+0x6fe>
 801847e:	9a07      	ldr	r2, [sp, #28]
 8018480:	9900      	ldr	r1, [sp, #0]
 8018482:	3201      	adds	r2, #1
 8018484:	9207      	str	r2, [sp, #28]
 8018486:	2230      	movs	r2, #48	; 0x30
 8018488:	700a      	strb	r2, [r1, #0]
 801848a:	781a      	ldrb	r2, [r3, #0]
 801848c:	3201      	adds	r2, #1
 801848e:	701a      	strb	r2, [r3, #0]
 8018490:	e78c      	b.n	80183ac <_dtoa_r+0x63c>
 8018492:	4b7f      	ldr	r3, [pc, #508]	; (8018690 <_dtoa_r+0x920>)
 8018494:	2200      	movs	r2, #0
 8018496:	f7e8 f8af 	bl	80005f8 <__aeabi_dmul>
 801849a:	2200      	movs	r2, #0
 801849c:	2300      	movs	r3, #0
 801849e:	4606      	mov	r6, r0
 80184a0:	460f      	mov	r7, r1
 80184a2:	f7e8 fb11 	bl	8000ac8 <__aeabi_dcmpeq>
 80184a6:	2800      	cmp	r0, #0
 80184a8:	d09b      	beq.n	80183e2 <_dtoa_r+0x672>
 80184aa:	e7cd      	b.n	8018448 <_dtoa_r+0x6d8>
 80184ac:	9a08      	ldr	r2, [sp, #32]
 80184ae:	2a00      	cmp	r2, #0
 80184b0:	f000 80c4 	beq.w	801863c <_dtoa_r+0x8cc>
 80184b4:	9a05      	ldr	r2, [sp, #20]
 80184b6:	2a01      	cmp	r2, #1
 80184b8:	f300 80a8 	bgt.w	801860c <_dtoa_r+0x89c>
 80184bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80184be:	2a00      	cmp	r2, #0
 80184c0:	f000 80a0 	beq.w	8018604 <_dtoa_r+0x894>
 80184c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80184c8:	9e06      	ldr	r6, [sp, #24]
 80184ca:	4645      	mov	r5, r8
 80184cc:	9a04      	ldr	r2, [sp, #16]
 80184ce:	2101      	movs	r1, #1
 80184d0:	441a      	add	r2, r3
 80184d2:	4620      	mov	r0, r4
 80184d4:	4498      	add	r8, r3
 80184d6:	9204      	str	r2, [sp, #16]
 80184d8:	f000 ff0e 	bl	80192f8 <__i2b>
 80184dc:	4607      	mov	r7, r0
 80184de:	2d00      	cmp	r5, #0
 80184e0:	dd0b      	ble.n	80184fa <_dtoa_r+0x78a>
 80184e2:	9b04      	ldr	r3, [sp, #16]
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	dd08      	ble.n	80184fa <_dtoa_r+0x78a>
 80184e8:	42ab      	cmp	r3, r5
 80184ea:	9a04      	ldr	r2, [sp, #16]
 80184ec:	bfa8      	it	ge
 80184ee:	462b      	movge	r3, r5
 80184f0:	eba8 0803 	sub.w	r8, r8, r3
 80184f4:	1aed      	subs	r5, r5, r3
 80184f6:	1ad3      	subs	r3, r2, r3
 80184f8:	9304      	str	r3, [sp, #16]
 80184fa:	9b06      	ldr	r3, [sp, #24]
 80184fc:	b1fb      	cbz	r3, 801853e <_dtoa_r+0x7ce>
 80184fe:	9b08      	ldr	r3, [sp, #32]
 8018500:	2b00      	cmp	r3, #0
 8018502:	f000 809f 	beq.w	8018644 <_dtoa_r+0x8d4>
 8018506:	2e00      	cmp	r6, #0
 8018508:	dd11      	ble.n	801852e <_dtoa_r+0x7be>
 801850a:	4639      	mov	r1, r7
 801850c:	4632      	mov	r2, r6
 801850e:	4620      	mov	r0, r4
 8018510:	f000 ffae 	bl	8019470 <__pow5mult>
 8018514:	465a      	mov	r2, fp
 8018516:	4601      	mov	r1, r0
 8018518:	4607      	mov	r7, r0
 801851a:	4620      	mov	r0, r4
 801851c:	f000 ff02 	bl	8019324 <__multiply>
 8018520:	4659      	mov	r1, fp
 8018522:	9007      	str	r0, [sp, #28]
 8018524:	4620      	mov	r0, r4
 8018526:	f000 fde1 	bl	80190ec <_Bfree>
 801852a:	9b07      	ldr	r3, [sp, #28]
 801852c:	469b      	mov	fp, r3
 801852e:	9b06      	ldr	r3, [sp, #24]
 8018530:	1b9a      	subs	r2, r3, r6
 8018532:	d004      	beq.n	801853e <_dtoa_r+0x7ce>
 8018534:	4659      	mov	r1, fp
 8018536:	4620      	mov	r0, r4
 8018538:	f000 ff9a 	bl	8019470 <__pow5mult>
 801853c:	4683      	mov	fp, r0
 801853e:	2101      	movs	r1, #1
 8018540:	4620      	mov	r0, r4
 8018542:	f000 fed9 	bl	80192f8 <__i2b>
 8018546:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018548:	2b00      	cmp	r3, #0
 801854a:	4606      	mov	r6, r0
 801854c:	dd7c      	ble.n	8018648 <_dtoa_r+0x8d8>
 801854e:	461a      	mov	r2, r3
 8018550:	4601      	mov	r1, r0
 8018552:	4620      	mov	r0, r4
 8018554:	f000 ff8c 	bl	8019470 <__pow5mult>
 8018558:	9b05      	ldr	r3, [sp, #20]
 801855a:	2b01      	cmp	r3, #1
 801855c:	4606      	mov	r6, r0
 801855e:	dd76      	ble.n	801864e <_dtoa_r+0x8de>
 8018560:	2300      	movs	r3, #0
 8018562:	9306      	str	r3, [sp, #24]
 8018564:	6933      	ldr	r3, [r6, #16]
 8018566:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801856a:	6918      	ldr	r0, [r3, #16]
 801856c:	f000 fe74 	bl	8019258 <__hi0bits>
 8018570:	f1c0 0020 	rsb	r0, r0, #32
 8018574:	9b04      	ldr	r3, [sp, #16]
 8018576:	4418      	add	r0, r3
 8018578:	f010 001f 	ands.w	r0, r0, #31
 801857c:	f000 8086 	beq.w	801868c <_dtoa_r+0x91c>
 8018580:	f1c0 0320 	rsb	r3, r0, #32
 8018584:	2b04      	cmp	r3, #4
 8018586:	dd7f      	ble.n	8018688 <_dtoa_r+0x918>
 8018588:	f1c0 001c 	rsb	r0, r0, #28
 801858c:	9b04      	ldr	r3, [sp, #16]
 801858e:	4403      	add	r3, r0
 8018590:	4480      	add	r8, r0
 8018592:	4405      	add	r5, r0
 8018594:	9304      	str	r3, [sp, #16]
 8018596:	f1b8 0f00 	cmp.w	r8, #0
 801859a:	dd05      	ble.n	80185a8 <_dtoa_r+0x838>
 801859c:	4659      	mov	r1, fp
 801859e:	4642      	mov	r2, r8
 80185a0:	4620      	mov	r0, r4
 80185a2:	f000 ffbf 	bl	8019524 <__lshift>
 80185a6:	4683      	mov	fp, r0
 80185a8:	9b04      	ldr	r3, [sp, #16]
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	dd05      	ble.n	80185ba <_dtoa_r+0x84a>
 80185ae:	4631      	mov	r1, r6
 80185b0:	461a      	mov	r2, r3
 80185b2:	4620      	mov	r0, r4
 80185b4:	f000 ffb6 	bl	8019524 <__lshift>
 80185b8:	4606      	mov	r6, r0
 80185ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d069      	beq.n	8018694 <_dtoa_r+0x924>
 80185c0:	4631      	mov	r1, r6
 80185c2:	4658      	mov	r0, fp
 80185c4:	f001 f81a 	bl	80195fc <__mcmp>
 80185c8:	2800      	cmp	r0, #0
 80185ca:	da63      	bge.n	8018694 <_dtoa_r+0x924>
 80185cc:	2300      	movs	r3, #0
 80185ce:	4659      	mov	r1, fp
 80185d0:	220a      	movs	r2, #10
 80185d2:	4620      	mov	r0, r4
 80185d4:	f000 fdac 	bl	8019130 <__multadd>
 80185d8:	9b08      	ldr	r3, [sp, #32]
 80185da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80185de:	4683      	mov	fp, r0
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	f000 818f 	beq.w	8018904 <_dtoa_r+0xb94>
 80185e6:	4639      	mov	r1, r7
 80185e8:	2300      	movs	r3, #0
 80185ea:	220a      	movs	r2, #10
 80185ec:	4620      	mov	r0, r4
 80185ee:	f000 fd9f 	bl	8019130 <__multadd>
 80185f2:	f1b9 0f00 	cmp.w	r9, #0
 80185f6:	4607      	mov	r7, r0
 80185f8:	f300 808e 	bgt.w	8018718 <_dtoa_r+0x9a8>
 80185fc:	9b05      	ldr	r3, [sp, #20]
 80185fe:	2b02      	cmp	r3, #2
 8018600:	dc50      	bgt.n	80186a4 <_dtoa_r+0x934>
 8018602:	e089      	b.n	8018718 <_dtoa_r+0x9a8>
 8018604:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018606:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801860a:	e75d      	b.n	80184c8 <_dtoa_r+0x758>
 801860c:	9b01      	ldr	r3, [sp, #4]
 801860e:	1e5e      	subs	r6, r3, #1
 8018610:	9b06      	ldr	r3, [sp, #24]
 8018612:	42b3      	cmp	r3, r6
 8018614:	bfbf      	itttt	lt
 8018616:	9b06      	ldrlt	r3, [sp, #24]
 8018618:	9606      	strlt	r6, [sp, #24]
 801861a:	1af2      	sublt	r2, r6, r3
 801861c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801861e:	bfb6      	itet	lt
 8018620:	189b      	addlt	r3, r3, r2
 8018622:	1b9e      	subge	r6, r3, r6
 8018624:	930d      	strlt	r3, [sp, #52]	; 0x34
 8018626:	9b01      	ldr	r3, [sp, #4]
 8018628:	bfb8      	it	lt
 801862a:	2600      	movlt	r6, #0
 801862c:	2b00      	cmp	r3, #0
 801862e:	bfb5      	itete	lt
 8018630:	eba8 0503 	sublt.w	r5, r8, r3
 8018634:	9b01      	ldrge	r3, [sp, #4]
 8018636:	2300      	movlt	r3, #0
 8018638:	4645      	movge	r5, r8
 801863a:	e747      	b.n	80184cc <_dtoa_r+0x75c>
 801863c:	9e06      	ldr	r6, [sp, #24]
 801863e:	9f08      	ldr	r7, [sp, #32]
 8018640:	4645      	mov	r5, r8
 8018642:	e74c      	b.n	80184de <_dtoa_r+0x76e>
 8018644:	9a06      	ldr	r2, [sp, #24]
 8018646:	e775      	b.n	8018534 <_dtoa_r+0x7c4>
 8018648:	9b05      	ldr	r3, [sp, #20]
 801864a:	2b01      	cmp	r3, #1
 801864c:	dc18      	bgt.n	8018680 <_dtoa_r+0x910>
 801864e:	9b02      	ldr	r3, [sp, #8]
 8018650:	b9b3      	cbnz	r3, 8018680 <_dtoa_r+0x910>
 8018652:	9b03      	ldr	r3, [sp, #12]
 8018654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018658:	b9a3      	cbnz	r3, 8018684 <_dtoa_r+0x914>
 801865a:	9b03      	ldr	r3, [sp, #12]
 801865c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018660:	0d1b      	lsrs	r3, r3, #20
 8018662:	051b      	lsls	r3, r3, #20
 8018664:	b12b      	cbz	r3, 8018672 <_dtoa_r+0x902>
 8018666:	9b04      	ldr	r3, [sp, #16]
 8018668:	3301      	adds	r3, #1
 801866a:	9304      	str	r3, [sp, #16]
 801866c:	f108 0801 	add.w	r8, r8, #1
 8018670:	2301      	movs	r3, #1
 8018672:	9306      	str	r3, [sp, #24]
 8018674:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018676:	2b00      	cmp	r3, #0
 8018678:	f47f af74 	bne.w	8018564 <_dtoa_r+0x7f4>
 801867c:	2001      	movs	r0, #1
 801867e:	e779      	b.n	8018574 <_dtoa_r+0x804>
 8018680:	2300      	movs	r3, #0
 8018682:	e7f6      	b.n	8018672 <_dtoa_r+0x902>
 8018684:	9b02      	ldr	r3, [sp, #8]
 8018686:	e7f4      	b.n	8018672 <_dtoa_r+0x902>
 8018688:	d085      	beq.n	8018596 <_dtoa_r+0x826>
 801868a:	4618      	mov	r0, r3
 801868c:	301c      	adds	r0, #28
 801868e:	e77d      	b.n	801858c <_dtoa_r+0x81c>
 8018690:	40240000 	.word	0x40240000
 8018694:	9b01      	ldr	r3, [sp, #4]
 8018696:	2b00      	cmp	r3, #0
 8018698:	dc38      	bgt.n	801870c <_dtoa_r+0x99c>
 801869a:	9b05      	ldr	r3, [sp, #20]
 801869c:	2b02      	cmp	r3, #2
 801869e:	dd35      	ble.n	801870c <_dtoa_r+0x99c>
 80186a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80186a4:	f1b9 0f00 	cmp.w	r9, #0
 80186a8:	d10d      	bne.n	80186c6 <_dtoa_r+0x956>
 80186aa:	4631      	mov	r1, r6
 80186ac:	464b      	mov	r3, r9
 80186ae:	2205      	movs	r2, #5
 80186b0:	4620      	mov	r0, r4
 80186b2:	f000 fd3d 	bl	8019130 <__multadd>
 80186b6:	4601      	mov	r1, r0
 80186b8:	4606      	mov	r6, r0
 80186ba:	4658      	mov	r0, fp
 80186bc:	f000 ff9e 	bl	80195fc <__mcmp>
 80186c0:	2800      	cmp	r0, #0
 80186c2:	f73f adbd 	bgt.w	8018240 <_dtoa_r+0x4d0>
 80186c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186c8:	9d00      	ldr	r5, [sp, #0]
 80186ca:	ea6f 0a03 	mvn.w	sl, r3
 80186ce:	f04f 0800 	mov.w	r8, #0
 80186d2:	4631      	mov	r1, r6
 80186d4:	4620      	mov	r0, r4
 80186d6:	f000 fd09 	bl	80190ec <_Bfree>
 80186da:	2f00      	cmp	r7, #0
 80186dc:	f43f aeb4 	beq.w	8018448 <_dtoa_r+0x6d8>
 80186e0:	f1b8 0f00 	cmp.w	r8, #0
 80186e4:	d005      	beq.n	80186f2 <_dtoa_r+0x982>
 80186e6:	45b8      	cmp	r8, r7
 80186e8:	d003      	beq.n	80186f2 <_dtoa_r+0x982>
 80186ea:	4641      	mov	r1, r8
 80186ec:	4620      	mov	r0, r4
 80186ee:	f000 fcfd 	bl	80190ec <_Bfree>
 80186f2:	4639      	mov	r1, r7
 80186f4:	4620      	mov	r0, r4
 80186f6:	f000 fcf9 	bl	80190ec <_Bfree>
 80186fa:	e6a5      	b.n	8018448 <_dtoa_r+0x6d8>
 80186fc:	2600      	movs	r6, #0
 80186fe:	4637      	mov	r7, r6
 8018700:	e7e1      	b.n	80186c6 <_dtoa_r+0x956>
 8018702:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018704:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018708:	4637      	mov	r7, r6
 801870a:	e599      	b.n	8018240 <_dtoa_r+0x4d0>
 801870c:	9b08      	ldr	r3, [sp, #32]
 801870e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018712:	2b00      	cmp	r3, #0
 8018714:	f000 80fd 	beq.w	8018912 <_dtoa_r+0xba2>
 8018718:	2d00      	cmp	r5, #0
 801871a:	dd05      	ble.n	8018728 <_dtoa_r+0x9b8>
 801871c:	4639      	mov	r1, r7
 801871e:	462a      	mov	r2, r5
 8018720:	4620      	mov	r0, r4
 8018722:	f000 feff 	bl	8019524 <__lshift>
 8018726:	4607      	mov	r7, r0
 8018728:	9b06      	ldr	r3, [sp, #24]
 801872a:	2b00      	cmp	r3, #0
 801872c:	d05c      	beq.n	80187e8 <_dtoa_r+0xa78>
 801872e:	6879      	ldr	r1, [r7, #4]
 8018730:	4620      	mov	r0, r4
 8018732:	f000 fc9b 	bl	801906c <_Balloc>
 8018736:	4605      	mov	r5, r0
 8018738:	b928      	cbnz	r0, 8018746 <_dtoa_r+0x9d6>
 801873a:	4b80      	ldr	r3, [pc, #512]	; (801893c <_dtoa_r+0xbcc>)
 801873c:	4602      	mov	r2, r0
 801873e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018742:	f7ff bb2e 	b.w	8017da2 <_dtoa_r+0x32>
 8018746:	693a      	ldr	r2, [r7, #16]
 8018748:	3202      	adds	r2, #2
 801874a:	0092      	lsls	r2, r2, #2
 801874c:	f107 010c 	add.w	r1, r7, #12
 8018750:	300c      	adds	r0, #12
 8018752:	f7fd fc0d 	bl	8015f70 <memcpy>
 8018756:	2201      	movs	r2, #1
 8018758:	4629      	mov	r1, r5
 801875a:	4620      	mov	r0, r4
 801875c:	f000 fee2 	bl	8019524 <__lshift>
 8018760:	9b00      	ldr	r3, [sp, #0]
 8018762:	3301      	adds	r3, #1
 8018764:	9301      	str	r3, [sp, #4]
 8018766:	9b00      	ldr	r3, [sp, #0]
 8018768:	444b      	add	r3, r9
 801876a:	9307      	str	r3, [sp, #28]
 801876c:	9b02      	ldr	r3, [sp, #8]
 801876e:	f003 0301 	and.w	r3, r3, #1
 8018772:	46b8      	mov	r8, r7
 8018774:	9306      	str	r3, [sp, #24]
 8018776:	4607      	mov	r7, r0
 8018778:	9b01      	ldr	r3, [sp, #4]
 801877a:	4631      	mov	r1, r6
 801877c:	3b01      	subs	r3, #1
 801877e:	4658      	mov	r0, fp
 8018780:	9302      	str	r3, [sp, #8]
 8018782:	f7ff fa67 	bl	8017c54 <quorem>
 8018786:	4603      	mov	r3, r0
 8018788:	3330      	adds	r3, #48	; 0x30
 801878a:	9004      	str	r0, [sp, #16]
 801878c:	4641      	mov	r1, r8
 801878e:	4658      	mov	r0, fp
 8018790:	9308      	str	r3, [sp, #32]
 8018792:	f000 ff33 	bl	80195fc <__mcmp>
 8018796:	463a      	mov	r2, r7
 8018798:	4681      	mov	r9, r0
 801879a:	4631      	mov	r1, r6
 801879c:	4620      	mov	r0, r4
 801879e:	f000 ff49 	bl	8019634 <__mdiff>
 80187a2:	68c2      	ldr	r2, [r0, #12]
 80187a4:	9b08      	ldr	r3, [sp, #32]
 80187a6:	4605      	mov	r5, r0
 80187a8:	bb02      	cbnz	r2, 80187ec <_dtoa_r+0xa7c>
 80187aa:	4601      	mov	r1, r0
 80187ac:	4658      	mov	r0, fp
 80187ae:	f000 ff25 	bl	80195fc <__mcmp>
 80187b2:	9b08      	ldr	r3, [sp, #32]
 80187b4:	4602      	mov	r2, r0
 80187b6:	4629      	mov	r1, r5
 80187b8:	4620      	mov	r0, r4
 80187ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80187be:	f000 fc95 	bl	80190ec <_Bfree>
 80187c2:	9b05      	ldr	r3, [sp, #20]
 80187c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80187c6:	9d01      	ldr	r5, [sp, #4]
 80187c8:	ea43 0102 	orr.w	r1, r3, r2
 80187cc:	9b06      	ldr	r3, [sp, #24]
 80187ce:	430b      	orrs	r3, r1
 80187d0:	9b08      	ldr	r3, [sp, #32]
 80187d2:	d10d      	bne.n	80187f0 <_dtoa_r+0xa80>
 80187d4:	2b39      	cmp	r3, #57	; 0x39
 80187d6:	d029      	beq.n	801882c <_dtoa_r+0xabc>
 80187d8:	f1b9 0f00 	cmp.w	r9, #0
 80187dc:	dd01      	ble.n	80187e2 <_dtoa_r+0xa72>
 80187de:	9b04      	ldr	r3, [sp, #16]
 80187e0:	3331      	adds	r3, #49	; 0x31
 80187e2:	9a02      	ldr	r2, [sp, #8]
 80187e4:	7013      	strb	r3, [r2, #0]
 80187e6:	e774      	b.n	80186d2 <_dtoa_r+0x962>
 80187e8:	4638      	mov	r0, r7
 80187ea:	e7b9      	b.n	8018760 <_dtoa_r+0x9f0>
 80187ec:	2201      	movs	r2, #1
 80187ee:	e7e2      	b.n	80187b6 <_dtoa_r+0xa46>
 80187f0:	f1b9 0f00 	cmp.w	r9, #0
 80187f4:	db06      	blt.n	8018804 <_dtoa_r+0xa94>
 80187f6:	9905      	ldr	r1, [sp, #20]
 80187f8:	ea41 0909 	orr.w	r9, r1, r9
 80187fc:	9906      	ldr	r1, [sp, #24]
 80187fe:	ea59 0101 	orrs.w	r1, r9, r1
 8018802:	d120      	bne.n	8018846 <_dtoa_r+0xad6>
 8018804:	2a00      	cmp	r2, #0
 8018806:	ddec      	ble.n	80187e2 <_dtoa_r+0xa72>
 8018808:	4659      	mov	r1, fp
 801880a:	2201      	movs	r2, #1
 801880c:	4620      	mov	r0, r4
 801880e:	9301      	str	r3, [sp, #4]
 8018810:	f000 fe88 	bl	8019524 <__lshift>
 8018814:	4631      	mov	r1, r6
 8018816:	4683      	mov	fp, r0
 8018818:	f000 fef0 	bl	80195fc <__mcmp>
 801881c:	2800      	cmp	r0, #0
 801881e:	9b01      	ldr	r3, [sp, #4]
 8018820:	dc02      	bgt.n	8018828 <_dtoa_r+0xab8>
 8018822:	d1de      	bne.n	80187e2 <_dtoa_r+0xa72>
 8018824:	07da      	lsls	r2, r3, #31
 8018826:	d5dc      	bpl.n	80187e2 <_dtoa_r+0xa72>
 8018828:	2b39      	cmp	r3, #57	; 0x39
 801882a:	d1d8      	bne.n	80187de <_dtoa_r+0xa6e>
 801882c:	9a02      	ldr	r2, [sp, #8]
 801882e:	2339      	movs	r3, #57	; 0x39
 8018830:	7013      	strb	r3, [r2, #0]
 8018832:	462b      	mov	r3, r5
 8018834:	461d      	mov	r5, r3
 8018836:	3b01      	subs	r3, #1
 8018838:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801883c:	2a39      	cmp	r2, #57	; 0x39
 801883e:	d050      	beq.n	80188e2 <_dtoa_r+0xb72>
 8018840:	3201      	adds	r2, #1
 8018842:	701a      	strb	r2, [r3, #0]
 8018844:	e745      	b.n	80186d2 <_dtoa_r+0x962>
 8018846:	2a00      	cmp	r2, #0
 8018848:	dd03      	ble.n	8018852 <_dtoa_r+0xae2>
 801884a:	2b39      	cmp	r3, #57	; 0x39
 801884c:	d0ee      	beq.n	801882c <_dtoa_r+0xabc>
 801884e:	3301      	adds	r3, #1
 8018850:	e7c7      	b.n	80187e2 <_dtoa_r+0xa72>
 8018852:	9a01      	ldr	r2, [sp, #4]
 8018854:	9907      	ldr	r1, [sp, #28]
 8018856:	f802 3c01 	strb.w	r3, [r2, #-1]
 801885a:	428a      	cmp	r2, r1
 801885c:	d02a      	beq.n	80188b4 <_dtoa_r+0xb44>
 801885e:	4659      	mov	r1, fp
 8018860:	2300      	movs	r3, #0
 8018862:	220a      	movs	r2, #10
 8018864:	4620      	mov	r0, r4
 8018866:	f000 fc63 	bl	8019130 <__multadd>
 801886a:	45b8      	cmp	r8, r7
 801886c:	4683      	mov	fp, r0
 801886e:	f04f 0300 	mov.w	r3, #0
 8018872:	f04f 020a 	mov.w	r2, #10
 8018876:	4641      	mov	r1, r8
 8018878:	4620      	mov	r0, r4
 801887a:	d107      	bne.n	801888c <_dtoa_r+0xb1c>
 801887c:	f000 fc58 	bl	8019130 <__multadd>
 8018880:	4680      	mov	r8, r0
 8018882:	4607      	mov	r7, r0
 8018884:	9b01      	ldr	r3, [sp, #4]
 8018886:	3301      	adds	r3, #1
 8018888:	9301      	str	r3, [sp, #4]
 801888a:	e775      	b.n	8018778 <_dtoa_r+0xa08>
 801888c:	f000 fc50 	bl	8019130 <__multadd>
 8018890:	4639      	mov	r1, r7
 8018892:	4680      	mov	r8, r0
 8018894:	2300      	movs	r3, #0
 8018896:	220a      	movs	r2, #10
 8018898:	4620      	mov	r0, r4
 801889a:	f000 fc49 	bl	8019130 <__multadd>
 801889e:	4607      	mov	r7, r0
 80188a0:	e7f0      	b.n	8018884 <_dtoa_r+0xb14>
 80188a2:	f1b9 0f00 	cmp.w	r9, #0
 80188a6:	9a00      	ldr	r2, [sp, #0]
 80188a8:	bfcc      	ite	gt
 80188aa:	464d      	movgt	r5, r9
 80188ac:	2501      	movle	r5, #1
 80188ae:	4415      	add	r5, r2
 80188b0:	f04f 0800 	mov.w	r8, #0
 80188b4:	4659      	mov	r1, fp
 80188b6:	2201      	movs	r2, #1
 80188b8:	4620      	mov	r0, r4
 80188ba:	9301      	str	r3, [sp, #4]
 80188bc:	f000 fe32 	bl	8019524 <__lshift>
 80188c0:	4631      	mov	r1, r6
 80188c2:	4683      	mov	fp, r0
 80188c4:	f000 fe9a 	bl	80195fc <__mcmp>
 80188c8:	2800      	cmp	r0, #0
 80188ca:	dcb2      	bgt.n	8018832 <_dtoa_r+0xac2>
 80188cc:	d102      	bne.n	80188d4 <_dtoa_r+0xb64>
 80188ce:	9b01      	ldr	r3, [sp, #4]
 80188d0:	07db      	lsls	r3, r3, #31
 80188d2:	d4ae      	bmi.n	8018832 <_dtoa_r+0xac2>
 80188d4:	462b      	mov	r3, r5
 80188d6:	461d      	mov	r5, r3
 80188d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80188dc:	2a30      	cmp	r2, #48	; 0x30
 80188de:	d0fa      	beq.n	80188d6 <_dtoa_r+0xb66>
 80188e0:	e6f7      	b.n	80186d2 <_dtoa_r+0x962>
 80188e2:	9a00      	ldr	r2, [sp, #0]
 80188e4:	429a      	cmp	r2, r3
 80188e6:	d1a5      	bne.n	8018834 <_dtoa_r+0xac4>
 80188e8:	f10a 0a01 	add.w	sl, sl, #1
 80188ec:	2331      	movs	r3, #49	; 0x31
 80188ee:	e779      	b.n	80187e4 <_dtoa_r+0xa74>
 80188f0:	4b13      	ldr	r3, [pc, #76]	; (8018940 <_dtoa_r+0xbd0>)
 80188f2:	f7ff baaf 	b.w	8017e54 <_dtoa_r+0xe4>
 80188f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	f47f aa86 	bne.w	8017e0a <_dtoa_r+0x9a>
 80188fe:	4b11      	ldr	r3, [pc, #68]	; (8018944 <_dtoa_r+0xbd4>)
 8018900:	f7ff baa8 	b.w	8017e54 <_dtoa_r+0xe4>
 8018904:	f1b9 0f00 	cmp.w	r9, #0
 8018908:	dc03      	bgt.n	8018912 <_dtoa_r+0xba2>
 801890a:	9b05      	ldr	r3, [sp, #20]
 801890c:	2b02      	cmp	r3, #2
 801890e:	f73f aec9 	bgt.w	80186a4 <_dtoa_r+0x934>
 8018912:	9d00      	ldr	r5, [sp, #0]
 8018914:	4631      	mov	r1, r6
 8018916:	4658      	mov	r0, fp
 8018918:	f7ff f99c 	bl	8017c54 <quorem>
 801891c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018920:	f805 3b01 	strb.w	r3, [r5], #1
 8018924:	9a00      	ldr	r2, [sp, #0]
 8018926:	1aaa      	subs	r2, r5, r2
 8018928:	4591      	cmp	r9, r2
 801892a:	ddba      	ble.n	80188a2 <_dtoa_r+0xb32>
 801892c:	4659      	mov	r1, fp
 801892e:	2300      	movs	r3, #0
 8018930:	220a      	movs	r2, #10
 8018932:	4620      	mov	r0, r4
 8018934:	f000 fbfc 	bl	8019130 <__multadd>
 8018938:	4683      	mov	fp, r0
 801893a:	e7eb      	b.n	8018914 <_dtoa_r+0xba4>
 801893c:	0801c724 	.word	0x0801c724
 8018940:	0801c524 	.word	0x0801c524
 8018944:	0801c6a1 	.word	0x0801c6a1

08018948 <rshift>:
 8018948:	6903      	ldr	r3, [r0, #16]
 801894a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801894e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018952:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018956:	f100 0414 	add.w	r4, r0, #20
 801895a:	dd45      	ble.n	80189e8 <rshift+0xa0>
 801895c:	f011 011f 	ands.w	r1, r1, #31
 8018960:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018964:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018968:	d10c      	bne.n	8018984 <rshift+0x3c>
 801896a:	f100 0710 	add.w	r7, r0, #16
 801896e:	4629      	mov	r1, r5
 8018970:	42b1      	cmp	r1, r6
 8018972:	d334      	bcc.n	80189de <rshift+0x96>
 8018974:	1a9b      	subs	r3, r3, r2
 8018976:	009b      	lsls	r3, r3, #2
 8018978:	1eea      	subs	r2, r5, #3
 801897a:	4296      	cmp	r6, r2
 801897c:	bf38      	it	cc
 801897e:	2300      	movcc	r3, #0
 8018980:	4423      	add	r3, r4
 8018982:	e015      	b.n	80189b0 <rshift+0x68>
 8018984:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018988:	f1c1 0820 	rsb	r8, r1, #32
 801898c:	40cf      	lsrs	r7, r1
 801898e:	f105 0e04 	add.w	lr, r5, #4
 8018992:	46a1      	mov	r9, r4
 8018994:	4576      	cmp	r6, lr
 8018996:	46f4      	mov	ip, lr
 8018998:	d815      	bhi.n	80189c6 <rshift+0x7e>
 801899a:	1a9b      	subs	r3, r3, r2
 801899c:	009a      	lsls	r2, r3, #2
 801899e:	3a04      	subs	r2, #4
 80189a0:	3501      	adds	r5, #1
 80189a2:	42ae      	cmp	r6, r5
 80189a4:	bf38      	it	cc
 80189a6:	2200      	movcc	r2, #0
 80189a8:	18a3      	adds	r3, r4, r2
 80189aa:	50a7      	str	r7, [r4, r2]
 80189ac:	b107      	cbz	r7, 80189b0 <rshift+0x68>
 80189ae:	3304      	adds	r3, #4
 80189b0:	1b1a      	subs	r2, r3, r4
 80189b2:	42a3      	cmp	r3, r4
 80189b4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80189b8:	bf08      	it	eq
 80189ba:	2300      	moveq	r3, #0
 80189bc:	6102      	str	r2, [r0, #16]
 80189be:	bf08      	it	eq
 80189c0:	6143      	streq	r3, [r0, #20]
 80189c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189c6:	f8dc c000 	ldr.w	ip, [ip]
 80189ca:	fa0c fc08 	lsl.w	ip, ip, r8
 80189ce:	ea4c 0707 	orr.w	r7, ip, r7
 80189d2:	f849 7b04 	str.w	r7, [r9], #4
 80189d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80189da:	40cf      	lsrs	r7, r1
 80189dc:	e7da      	b.n	8018994 <rshift+0x4c>
 80189de:	f851 cb04 	ldr.w	ip, [r1], #4
 80189e2:	f847 cf04 	str.w	ip, [r7, #4]!
 80189e6:	e7c3      	b.n	8018970 <rshift+0x28>
 80189e8:	4623      	mov	r3, r4
 80189ea:	e7e1      	b.n	80189b0 <rshift+0x68>

080189ec <__hexdig_fun>:
 80189ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80189f0:	2b09      	cmp	r3, #9
 80189f2:	d802      	bhi.n	80189fa <__hexdig_fun+0xe>
 80189f4:	3820      	subs	r0, #32
 80189f6:	b2c0      	uxtb	r0, r0
 80189f8:	4770      	bx	lr
 80189fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80189fe:	2b05      	cmp	r3, #5
 8018a00:	d801      	bhi.n	8018a06 <__hexdig_fun+0x1a>
 8018a02:	3847      	subs	r0, #71	; 0x47
 8018a04:	e7f7      	b.n	80189f6 <__hexdig_fun+0xa>
 8018a06:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018a0a:	2b05      	cmp	r3, #5
 8018a0c:	d801      	bhi.n	8018a12 <__hexdig_fun+0x26>
 8018a0e:	3827      	subs	r0, #39	; 0x27
 8018a10:	e7f1      	b.n	80189f6 <__hexdig_fun+0xa>
 8018a12:	2000      	movs	r0, #0
 8018a14:	4770      	bx	lr
	...

08018a18 <__gethex>:
 8018a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a1c:	ed2d 8b02 	vpush	{d8}
 8018a20:	b089      	sub	sp, #36	; 0x24
 8018a22:	ee08 0a10 	vmov	s16, r0
 8018a26:	9304      	str	r3, [sp, #16]
 8018a28:	4bbc      	ldr	r3, [pc, #752]	; (8018d1c <__gethex+0x304>)
 8018a2a:	681b      	ldr	r3, [r3, #0]
 8018a2c:	9301      	str	r3, [sp, #4]
 8018a2e:	4618      	mov	r0, r3
 8018a30:	468b      	mov	fp, r1
 8018a32:	4690      	mov	r8, r2
 8018a34:	f7e7 fbcc 	bl	80001d0 <strlen>
 8018a38:	9b01      	ldr	r3, [sp, #4]
 8018a3a:	f8db 2000 	ldr.w	r2, [fp]
 8018a3e:	4403      	add	r3, r0
 8018a40:	4682      	mov	sl, r0
 8018a42:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018a46:	9305      	str	r3, [sp, #20]
 8018a48:	1c93      	adds	r3, r2, #2
 8018a4a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018a4e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018a52:	32fe      	adds	r2, #254	; 0xfe
 8018a54:	18d1      	adds	r1, r2, r3
 8018a56:	461f      	mov	r7, r3
 8018a58:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018a5c:	9100      	str	r1, [sp, #0]
 8018a5e:	2830      	cmp	r0, #48	; 0x30
 8018a60:	d0f8      	beq.n	8018a54 <__gethex+0x3c>
 8018a62:	f7ff ffc3 	bl	80189ec <__hexdig_fun>
 8018a66:	4604      	mov	r4, r0
 8018a68:	2800      	cmp	r0, #0
 8018a6a:	d13a      	bne.n	8018ae2 <__gethex+0xca>
 8018a6c:	9901      	ldr	r1, [sp, #4]
 8018a6e:	4652      	mov	r2, sl
 8018a70:	4638      	mov	r0, r7
 8018a72:	f001 f929 	bl	8019cc8 <strncmp>
 8018a76:	4605      	mov	r5, r0
 8018a78:	2800      	cmp	r0, #0
 8018a7a:	d168      	bne.n	8018b4e <__gethex+0x136>
 8018a7c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8018a80:	eb07 060a 	add.w	r6, r7, sl
 8018a84:	f7ff ffb2 	bl	80189ec <__hexdig_fun>
 8018a88:	2800      	cmp	r0, #0
 8018a8a:	d062      	beq.n	8018b52 <__gethex+0x13a>
 8018a8c:	4633      	mov	r3, r6
 8018a8e:	7818      	ldrb	r0, [r3, #0]
 8018a90:	2830      	cmp	r0, #48	; 0x30
 8018a92:	461f      	mov	r7, r3
 8018a94:	f103 0301 	add.w	r3, r3, #1
 8018a98:	d0f9      	beq.n	8018a8e <__gethex+0x76>
 8018a9a:	f7ff ffa7 	bl	80189ec <__hexdig_fun>
 8018a9e:	2301      	movs	r3, #1
 8018aa0:	fab0 f480 	clz	r4, r0
 8018aa4:	0964      	lsrs	r4, r4, #5
 8018aa6:	4635      	mov	r5, r6
 8018aa8:	9300      	str	r3, [sp, #0]
 8018aaa:	463a      	mov	r2, r7
 8018aac:	4616      	mov	r6, r2
 8018aae:	3201      	adds	r2, #1
 8018ab0:	7830      	ldrb	r0, [r6, #0]
 8018ab2:	f7ff ff9b 	bl	80189ec <__hexdig_fun>
 8018ab6:	2800      	cmp	r0, #0
 8018ab8:	d1f8      	bne.n	8018aac <__gethex+0x94>
 8018aba:	9901      	ldr	r1, [sp, #4]
 8018abc:	4652      	mov	r2, sl
 8018abe:	4630      	mov	r0, r6
 8018ac0:	f001 f902 	bl	8019cc8 <strncmp>
 8018ac4:	b980      	cbnz	r0, 8018ae8 <__gethex+0xd0>
 8018ac6:	b94d      	cbnz	r5, 8018adc <__gethex+0xc4>
 8018ac8:	eb06 050a 	add.w	r5, r6, sl
 8018acc:	462a      	mov	r2, r5
 8018ace:	4616      	mov	r6, r2
 8018ad0:	3201      	adds	r2, #1
 8018ad2:	7830      	ldrb	r0, [r6, #0]
 8018ad4:	f7ff ff8a 	bl	80189ec <__hexdig_fun>
 8018ad8:	2800      	cmp	r0, #0
 8018ada:	d1f8      	bne.n	8018ace <__gethex+0xb6>
 8018adc:	1bad      	subs	r5, r5, r6
 8018ade:	00ad      	lsls	r5, r5, #2
 8018ae0:	e004      	b.n	8018aec <__gethex+0xd4>
 8018ae2:	2400      	movs	r4, #0
 8018ae4:	4625      	mov	r5, r4
 8018ae6:	e7e0      	b.n	8018aaa <__gethex+0x92>
 8018ae8:	2d00      	cmp	r5, #0
 8018aea:	d1f7      	bne.n	8018adc <__gethex+0xc4>
 8018aec:	7833      	ldrb	r3, [r6, #0]
 8018aee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018af2:	2b50      	cmp	r3, #80	; 0x50
 8018af4:	d13b      	bne.n	8018b6e <__gethex+0x156>
 8018af6:	7873      	ldrb	r3, [r6, #1]
 8018af8:	2b2b      	cmp	r3, #43	; 0x2b
 8018afa:	d02c      	beq.n	8018b56 <__gethex+0x13e>
 8018afc:	2b2d      	cmp	r3, #45	; 0x2d
 8018afe:	d02e      	beq.n	8018b5e <__gethex+0x146>
 8018b00:	1c71      	adds	r1, r6, #1
 8018b02:	f04f 0900 	mov.w	r9, #0
 8018b06:	7808      	ldrb	r0, [r1, #0]
 8018b08:	f7ff ff70 	bl	80189ec <__hexdig_fun>
 8018b0c:	1e43      	subs	r3, r0, #1
 8018b0e:	b2db      	uxtb	r3, r3
 8018b10:	2b18      	cmp	r3, #24
 8018b12:	d82c      	bhi.n	8018b6e <__gethex+0x156>
 8018b14:	f1a0 0210 	sub.w	r2, r0, #16
 8018b18:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018b1c:	f7ff ff66 	bl	80189ec <__hexdig_fun>
 8018b20:	1e43      	subs	r3, r0, #1
 8018b22:	b2db      	uxtb	r3, r3
 8018b24:	2b18      	cmp	r3, #24
 8018b26:	d91d      	bls.n	8018b64 <__gethex+0x14c>
 8018b28:	f1b9 0f00 	cmp.w	r9, #0
 8018b2c:	d000      	beq.n	8018b30 <__gethex+0x118>
 8018b2e:	4252      	negs	r2, r2
 8018b30:	4415      	add	r5, r2
 8018b32:	f8cb 1000 	str.w	r1, [fp]
 8018b36:	b1e4      	cbz	r4, 8018b72 <__gethex+0x15a>
 8018b38:	9b00      	ldr	r3, [sp, #0]
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	bf14      	ite	ne
 8018b3e:	2700      	movne	r7, #0
 8018b40:	2706      	moveq	r7, #6
 8018b42:	4638      	mov	r0, r7
 8018b44:	b009      	add	sp, #36	; 0x24
 8018b46:	ecbd 8b02 	vpop	{d8}
 8018b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b4e:	463e      	mov	r6, r7
 8018b50:	4625      	mov	r5, r4
 8018b52:	2401      	movs	r4, #1
 8018b54:	e7ca      	b.n	8018aec <__gethex+0xd4>
 8018b56:	f04f 0900 	mov.w	r9, #0
 8018b5a:	1cb1      	adds	r1, r6, #2
 8018b5c:	e7d3      	b.n	8018b06 <__gethex+0xee>
 8018b5e:	f04f 0901 	mov.w	r9, #1
 8018b62:	e7fa      	b.n	8018b5a <__gethex+0x142>
 8018b64:	230a      	movs	r3, #10
 8018b66:	fb03 0202 	mla	r2, r3, r2, r0
 8018b6a:	3a10      	subs	r2, #16
 8018b6c:	e7d4      	b.n	8018b18 <__gethex+0x100>
 8018b6e:	4631      	mov	r1, r6
 8018b70:	e7df      	b.n	8018b32 <__gethex+0x11a>
 8018b72:	1bf3      	subs	r3, r6, r7
 8018b74:	3b01      	subs	r3, #1
 8018b76:	4621      	mov	r1, r4
 8018b78:	2b07      	cmp	r3, #7
 8018b7a:	dc0b      	bgt.n	8018b94 <__gethex+0x17c>
 8018b7c:	ee18 0a10 	vmov	r0, s16
 8018b80:	f000 fa74 	bl	801906c <_Balloc>
 8018b84:	4604      	mov	r4, r0
 8018b86:	b940      	cbnz	r0, 8018b9a <__gethex+0x182>
 8018b88:	4b65      	ldr	r3, [pc, #404]	; (8018d20 <__gethex+0x308>)
 8018b8a:	4602      	mov	r2, r0
 8018b8c:	21de      	movs	r1, #222	; 0xde
 8018b8e:	4865      	ldr	r0, [pc, #404]	; (8018d24 <__gethex+0x30c>)
 8018b90:	f001 f8ba 	bl	8019d08 <__assert_func>
 8018b94:	3101      	adds	r1, #1
 8018b96:	105b      	asrs	r3, r3, #1
 8018b98:	e7ee      	b.n	8018b78 <__gethex+0x160>
 8018b9a:	f100 0914 	add.w	r9, r0, #20
 8018b9e:	f04f 0b00 	mov.w	fp, #0
 8018ba2:	f1ca 0301 	rsb	r3, sl, #1
 8018ba6:	f8cd 9008 	str.w	r9, [sp, #8]
 8018baa:	f8cd b000 	str.w	fp, [sp]
 8018bae:	9306      	str	r3, [sp, #24]
 8018bb0:	42b7      	cmp	r7, r6
 8018bb2:	d340      	bcc.n	8018c36 <__gethex+0x21e>
 8018bb4:	9802      	ldr	r0, [sp, #8]
 8018bb6:	9b00      	ldr	r3, [sp, #0]
 8018bb8:	f840 3b04 	str.w	r3, [r0], #4
 8018bbc:	eba0 0009 	sub.w	r0, r0, r9
 8018bc0:	1080      	asrs	r0, r0, #2
 8018bc2:	0146      	lsls	r6, r0, #5
 8018bc4:	6120      	str	r0, [r4, #16]
 8018bc6:	4618      	mov	r0, r3
 8018bc8:	f000 fb46 	bl	8019258 <__hi0bits>
 8018bcc:	1a30      	subs	r0, r6, r0
 8018bce:	f8d8 6000 	ldr.w	r6, [r8]
 8018bd2:	42b0      	cmp	r0, r6
 8018bd4:	dd63      	ble.n	8018c9e <__gethex+0x286>
 8018bd6:	1b87      	subs	r7, r0, r6
 8018bd8:	4639      	mov	r1, r7
 8018bda:	4620      	mov	r0, r4
 8018bdc:	f000 fee0 	bl	80199a0 <__any_on>
 8018be0:	4682      	mov	sl, r0
 8018be2:	b1a8      	cbz	r0, 8018c10 <__gethex+0x1f8>
 8018be4:	1e7b      	subs	r3, r7, #1
 8018be6:	1159      	asrs	r1, r3, #5
 8018be8:	f003 021f 	and.w	r2, r3, #31
 8018bec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018bf0:	f04f 0a01 	mov.w	sl, #1
 8018bf4:	fa0a f202 	lsl.w	r2, sl, r2
 8018bf8:	420a      	tst	r2, r1
 8018bfa:	d009      	beq.n	8018c10 <__gethex+0x1f8>
 8018bfc:	4553      	cmp	r3, sl
 8018bfe:	dd05      	ble.n	8018c0c <__gethex+0x1f4>
 8018c00:	1eb9      	subs	r1, r7, #2
 8018c02:	4620      	mov	r0, r4
 8018c04:	f000 fecc 	bl	80199a0 <__any_on>
 8018c08:	2800      	cmp	r0, #0
 8018c0a:	d145      	bne.n	8018c98 <__gethex+0x280>
 8018c0c:	f04f 0a02 	mov.w	sl, #2
 8018c10:	4639      	mov	r1, r7
 8018c12:	4620      	mov	r0, r4
 8018c14:	f7ff fe98 	bl	8018948 <rshift>
 8018c18:	443d      	add	r5, r7
 8018c1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018c1e:	42ab      	cmp	r3, r5
 8018c20:	da4c      	bge.n	8018cbc <__gethex+0x2a4>
 8018c22:	ee18 0a10 	vmov	r0, s16
 8018c26:	4621      	mov	r1, r4
 8018c28:	f000 fa60 	bl	80190ec <_Bfree>
 8018c2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018c2e:	2300      	movs	r3, #0
 8018c30:	6013      	str	r3, [r2, #0]
 8018c32:	27a3      	movs	r7, #163	; 0xa3
 8018c34:	e785      	b.n	8018b42 <__gethex+0x12a>
 8018c36:	1e73      	subs	r3, r6, #1
 8018c38:	9a05      	ldr	r2, [sp, #20]
 8018c3a:	9303      	str	r3, [sp, #12]
 8018c3c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018c40:	4293      	cmp	r3, r2
 8018c42:	d019      	beq.n	8018c78 <__gethex+0x260>
 8018c44:	f1bb 0f20 	cmp.w	fp, #32
 8018c48:	d107      	bne.n	8018c5a <__gethex+0x242>
 8018c4a:	9b02      	ldr	r3, [sp, #8]
 8018c4c:	9a00      	ldr	r2, [sp, #0]
 8018c4e:	f843 2b04 	str.w	r2, [r3], #4
 8018c52:	9302      	str	r3, [sp, #8]
 8018c54:	2300      	movs	r3, #0
 8018c56:	9300      	str	r3, [sp, #0]
 8018c58:	469b      	mov	fp, r3
 8018c5a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018c5e:	f7ff fec5 	bl	80189ec <__hexdig_fun>
 8018c62:	9b00      	ldr	r3, [sp, #0]
 8018c64:	f000 000f 	and.w	r0, r0, #15
 8018c68:	fa00 f00b 	lsl.w	r0, r0, fp
 8018c6c:	4303      	orrs	r3, r0
 8018c6e:	9300      	str	r3, [sp, #0]
 8018c70:	f10b 0b04 	add.w	fp, fp, #4
 8018c74:	9b03      	ldr	r3, [sp, #12]
 8018c76:	e00d      	b.n	8018c94 <__gethex+0x27c>
 8018c78:	9b03      	ldr	r3, [sp, #12]
 8018c7a:	9a06      	ldr	r2, [sp, #24]
 8018c7c:	4413      	add	r3, r2
 8018c7e:	42bb      	cmp	r3, r7
 8018c80:	d3e0      	bcc.n	8018c44 <__gethex+0x22c>
 8018c82:	4618      	mov	r0, r3
 8018c84:	9901      	ldr	r1, [sp, #4]
 8018c86:	9307      	str	r3, [sp, #28]
 8018c88:	4652      	mov	r2, sl
 8018c8a:	f001 f81d 	bl	8019cc8 <strncmp>
 8018c8e:	9b07      	ldr	r3, [sp, #28]
 8018c90:	2800      	cmp	r0, #0
 8018c92:	d1d7      	bne.n	8018c44 <__gethex+0x22c>
 8018c94:	461e      	mov	r6, r3
 8018c96:	e78b      	b.n	8018bb0 <__gethex+0x198>
 8018c98:	f04f 0a03 	mov.w	sl, #3
 8018c9c:	e7b8      	b.n	8018c10 <__gethex+0x1f8>
 8018c9e:	da0a      	bge.n	8018cb6 <__gethex+0x29e>
 8018ca0:	1a37      	subs	r7, r6, r0
 8018ca2:	4621      	mov	r1, r4
 8018ca4:	ee18 0a10 	vmov	r0, s16
 8018ca8:	463a      	mov	r2, r7
 8018caa:	f000 fc3b 	bl	8019524 <__lshift>
 8018cae:	1bed      	subs	r5, r5, r7
 8018cb0:	4604      	mov	r4, r0
 8018cb2:	f100 0914 	add.w	r9, r0, #20
 8018cb6:	f04f 0a00 	mov.w	sl, #0
 8018cba:	e7ae      	b.n	8018c1a <__gethex+0x202>
 8018cbc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018cc0:	42a8      	cmp	r0, r5
 8018cc2:	dd72      	ble.n	8018daa <__gethex+0x392>
 8018cc4:	1b45      	subs	r5, r0, r5
 8018cc6:	42ae      	cmp	r6, r5
 8018cc8:	dc36      	bgt.n	8018d38 <__gethex+0x320>
 8018cca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018cce:	2b02      	cmp	r3, #2
 8018cd0:	d02a      	beq.n	8018d28 <__gethex+0x310>
 8018cd2:	2b03      	cmp	r3, #3
 8018cd4:	d02c      	beq.n	8018d30 <__gethex+0x318>
 8018cd6:	2b01      	cmp	r3, #1
 8018cd8:	d115      	bne.n	8018d06 <__gethex+0x2ee>
 8018cda:	42ae      	cmp	r6, r5
 8018cdc:	d113      	bne.n	8018d06 <__gethex+0x2ee>
 8018cde:	2e01      	cmp	r6, #1
 8018ce0:	d10b      	bne.n	8018cfa <__gethex+0x2e2>
 8018ce2:	9a04      	ldr	r2, [sp, #16]
 8018ce4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018ce8:	6013      	str	r3, [r2, #0]
 8018cea:	2301      	movs	r3, #1
 8018cec:	6123      	str	r3, [r4, #16]
 8018cee:	f8c9 3000 	str.w	r3, [r9]
 8018cf2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018cf4:	2762      	movs	r7, #98	; 0x62
 8018cf6:	601c      	str	r4, [r3, #0]
 8018cf8:	e723      	b.n	8018b42 <__gethex+0x12a>
 8018cfa:	1e71      	subs	r1, r6, #1
 8018cfc:	4620      	mov	r0, r4
 8018cfe:	f000 fe4f 	bl	80199a0 <__any_on>
 8018d02:	2800      	cmp	r0, #0
 8018d04:	d1ed      	bne.n	8018ce2 <__gethex+0x2ca>
 8018d06:	ee18 0a10 	vmov	r0, s16
 8018d0a:	4621      	mov	r1, r4
 8018d0c:	f000 f9ee 	bl	80190ec <_Bfree>
 8018d10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018d12:	2300      	movs	r3, #0
 8018d14:	6013      	str	r3, [r2, #0]
 8018d16:	2750      	movs	r7, #80	; 0x50
 8018d18:	e713      	b.n	8018b42 <__gethex+0x12a>
 8018d1a:	bf00      	nop
 8018d1c:	0801c7a0 	.word	0x0801c7a0
 8018d20:	0801c724 	.word	0x0801c724
 8018d24:	0801c735 	.word	0x0801c735
 8018d28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	d1eb      	bne.n	8018d06 <__gethex+0x2ee>
 8018d2e:	e7d8      	b.n	8018ce2 <__gethex+0x2ca>
 8018d30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	d1d5      	bne.n	8018ce2 <__gethex+0x2ca>
 8018d36:	e7e6      	b.n	8018d06 <__gethex+0x2ee>
 8018d38:	1e6f      	subs	r7, r5, #1
 8018d3a:	f1ba 0f00 	cmp.w	sl, #0
 8018d3e:	d131      	bne.n	8018da4 <__gethex+0x38c>
 8018d40:	b127      	cbz	r7, 8018d4c <__gethex+0x334>
 8018d42:	4639      	mov	r1, r7
 8018d44:	4620      	mov	r0, r4
 8018d46:	f000 fe2b 	bl	80199a0 <__any_on>
 8018d4a:	4682      	mov	sl, r0
 8018d4c:	117b      	asrs	r3, r7, #5
 8018d4e:	2101      	movs	r1, #1
 8018d50:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8018d54:	f007 071f 	and.w	r7, r7, #31
 8018d58:	fa01 f707 	lsl.w	r7, r1, r7
 8018d5c:	421f      	tst	r7, r3
 8018d5e:	4629      	mov	r1, r5
 8018d60:	4620      	mov	r0, r4
 8018d62:	bf18      	it	ne
 8018d64:	f04a 0a02 	orrne.w	sl, sl, #2
 8018d68:	1b76      	subs	r6, r6, r5
 8018d6a:	f7ff fded 	bl	8018948 <rshift>
 8018d6e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018d72:	2702      	movs	r7, #2
 8018d74:	f1ba 0f00 	cmp.w	sl, #0
 8018d78:	d048      	beq.n	8018e0c <__gethex+0x3f4>
 8018d7a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018d7e:	2b02      	cmp	r3, #2
 8018d80:	d015      	beq.n	8018dae <__gethex+0x396>
 8018d82:	2b03      	cmp	r3, #3
 8018d84:	d017      	beq.n	8018db6 <__gethex+0x39e>
 8018d86:	2b01      	cmp	r3, #1
 8018d88:	d109      	bne.n	8018d9e <__gethex+0x386>
 8018d8a:	f01a 0f02 	tst.w	sl, #2
 8018d8e:	d006      	beq.n	8018d9e <__gethex+0x386>
 8018d90:	f8d9 0000 	ldr.w	r0, [r9]
 8018d94:	ea4a 0a00 	orr.w	sl, sl, r0
 8018d98:	f01a 0f01 	tst.w	sl, #1
 8018d9c:	d10e      	bne.n	8018dbc <__gethex+0x3a4>
 8018d9e:	f047 0710 	orr.w	r7, r7, #16
 8018da2:	e033      	b.n	8018e0c <__gethex+0x3f4>
 8018da4:	f04f 0a01 	mov.w	sl, #1
 8018da8:	e7d0      	b.n	8018d4c <__gethex+0x334>
 8018daa:	2701      	movs	r7, #1
 8018dac:	e7e2      	b.n	8018d74 <__gethex+0x35c>
 8018dae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018db0:	f1c3 0301 	rsb	r3, r3, #1
 8018db4:	9315      	str	r3, [sp, #84]	; 0x54
 8018db6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	d0f0      	beq.n	8018d9e <__gethex+0x386>
 8018dbc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018dc0:	f104 0314 	add.w	r3, r4, #20
 8018dc4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018dc8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018dcc:	f04f 0c00 	mov.w	ip, #0
 8018dd0:	4618      	mov	r0, r3
 8018dd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8018dd6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018dda:	d01c      	beq.n	8018e16 <__gethex+0x3fe>
 8018ddc:	3201      	adds	r2, #1
 8018dde:	6002      	str	r2, [r0, #0]
 8018de0:	2f02      	cmp	r7, #2
 8018de2:	f104 0314 	add.w	r3, r4, #20
 8018de6:	d13f      	bne.n	8018e68 <__gethex+0x450>
 8018de8:	f8d8 2000 	ldr.w	r2, [r8]
 8018dec:	3a01      	subs	r2, #1
 8018dee:	42b2      	cmp	r2, r6
 8018df0:	d10a      	bne.n	8018e08 <__gethex+0x3f0>
 8018df2:	1171      	asrs	r1, r6, #5
 8018df4:	2201      	movs	r2, #1
 8018df6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018dfa:	f006 061f 	and.w	r6, r6, #31
 8018dfe:	fa02 f606 	lsl.w	r6, r2, r6
 8018e02:	421e      	tst	r6, r3
 8018e04:	bf18      	it	ne
 8018e06:	4617      	movne	r7, r2
 8018e08:	f047 0720 	orr.w	r7, r7, #32
 8018e0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018e0e:	601c      	str	r4, [r3, #0]
 8018e10:	9b04      	ldr	r3, [sp, #16]
 8018e12:	601d      	str	r5, [r3, #0]
 8018e14:	e695      	b.n	8018b42 <__gethex+0x12a>
 8018e16:	4299      	cmp	r1, r3
 8018e18:	f843 cc04 	str.w	ip, [r3, #-4]
 8018e1c:	d8d8      	bhi.n	8018dd0 <__gethex+0x3b8>
 8018e1e:	68a3      	ldr	r3, [r4, #8]
 8018e20:	459b      	cmp	fp, r3
 8018e22:	db19      	blt.n	8018e58 <__gethex+0x440>
 8018e24:	6861      	ldr	r1, [r4, #4]
 8018e26:	ee18 0a10 	vmov	r0, s16
 8018e2a:	3101      	adds	r1, #1
 8018e2c:	f000 f91e 	bl	801906c <_Balloc>
 8018e30:	4681      	mov	r9, r0
 8018e32:	b918      	cbnz	r0, 8018e3c <__gethex+0x424>
 8018e34:	4b1a      	ldr	r3, [pc, #104]	; (8018ea0 <__gethex+0x488>)
 8018e36:	4602      	mov	r2, r0
 8018e38:	2184      	movs	r1, #132	; 0x84
 8018e3a:	e6a8      	b.n	8018b8e <__gethex+0x176>
 8018e3c:	6922      	ldr	r2, [r4, #16]
 8018e3e:	3202      	adds	r2, #2
 8018e40:	f104 010c 	add.w	r1, r4, #12
 8018e44:	0092      	lsls	r2, r2, #2
 8018e46:	300c      	adds	r0, #12
 8018e48:	f7fd f892 	bl	8015f70 <memcpy>
 8018e4c:	4621      	mov	r1, r4
 8018e4e:	ee18 0a10 	vmov	r0, s16
 8018e52:	f000 f94b 	bl	80190ec <_Bfree>
 8018e56:	464c      	mov	r4, r9
 8018e58:	6923      	ldr	r3, [r4, #16]
 8018e5a:	1c5a      	adds	r2, r3, #1
 8018e5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018e60:	6122      	str	r2, [r4, #16]
 8018e62:	2201      	movs	r2, #1
 8018e64:	615a      	str	r2, [r3, #20]
 8018e66:	e7bb      	b.n	8018de0 <__gethex+0x3c8>
 8018e68:	6922      	ldr	r2, [r4, #16]
 8018e6a:	455a      	cmp	r2, fp
 8018e6c:	dd0b      	ble.n	8018e86 <__gethex+0x46e>
 8018e6e:	2101      	movs	r1, #1
 8018e70:	4620      	mov	r0, r4
 8018e72:	f7ff fd69 	bl	8018948 <rshift>
 8018e76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018e7a:	3501      	adds	r5, #1
 8018e7c:	42ab      	cmp	r3, r5
 8018e7e:	f6ff aed0 	blt.w	8018c22 <__gethex+0x20a>
 8018e82:	2701      	movs	r7, #1
 8018e84:	e7c0      	b.n	8018e08 <__gethex+0x3f0>
 8018e86:	f016 061f 	ands.w	r6, r6, #31
 8018e8a:	d0fa      	beq.n	8018e82 <__gethex+0x46a>
 8018e8c:	449a      	add	sl, r3
 8018e8e:	f1c6 0620 	rsb	r6, r6, #32
 8018e92:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018e96:	f000 f9df 	bl	8019258 <__hi0bits>
 8018e9a:	42b0      	cmp	r0, r6
 8018e9c:	dbe7      	blt.n	8018e6e <__gethex+0x456>
 8018e9e:	e7f0      	b.n	8018e82 <__gethex+0x46a>
 8018ea0:	0801c724 	.word	0x0801c724

08018ea4 <L_shift>:
 8018ea4:	f1c2 0208 	rsb	r2, r2, #8
 8018ea8:	0092      	lsls	r2, r2, #2
 8018eaa:	b570      	push	{r4, r5, r6, lr}
 8018eac:	f1c2 0620 	rsb	r6, r2, #32
 8018eb0:	6843      	ldr	r3, [r0, #4]
 8018eb2:	6804      	ldr	r4, [r0, #0]
 8018eb4:	fa03 f506 	lsl.w	r5, r3, r6
 8018eb8:	432c      	orrs	r4, r5
 8018eba:	40d3      	lsrs	r3, r2
 8018ebc:	6004      	str	r4, [r0, #0]
 8018ebe:	f840 3f04 	str.w	r3, [r0, #4]!
 8018ec2:	4288      	cmp	r0, r1
 8018ec4:	d3f4      	bcc.n	8018eb0 <L_shift+0xc>
 8018ec6:	bd70      	pop	{r4, r5, r6, pc}

08018ec8 <__match>:
 8018ec8:	b530      	push	{r4, r5, lr}
 8018eca:	6803      	ldr	r3, [r0, #0]
 8018ecc:	3301      	adds	r3, #1
 8018ece:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018ed2:	b914      	cbnz	r4, 8018eda <__match+0x12>
 8018ed4:	6003      	str	r3, [r0, #0]
 8018ed6:	2001      	movs	r0, #1
 8018ed8:	bd30      	pop	{r4, r5, pc}
 8018eda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018ede:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018ee2:	2d19      	cmp	r5, #25
 8018ee4:	bf98      	it	ls
 8018ee6:	3220      	addls	r2, #32
 8018ee8:	42a2      	cmp	r2, r4
 8018eea:	d0f0      	beq.n	8018ece <__match+0x6>
 8018eec:	2000      	movs	r0, #0
 8018eee:	e7f3      	b.n	8018ed8 <__match+0x10>

08018ef0 <__hexnan>:
 8018ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ef4:	680b      	ldr	r3, [r1, #0]
 8018ef6:	6801      	ldr	r1, [r0, #0]
 8018ef8:	115e      	asrs	r6, r3, #5
 8018efa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018efe:	f013 031f 	ands.w	r3, r3, #31
 8018f02:	b087      	sub	sp, #28
 8018f04:	bf18      	it	ne
 8018f06:	3604      	addne	r6, #4
 8018f08:	2500      	movs	r5, #0
 8018f0a:	1f37      	subs	r7, r6, #4
 8018f0c:	4682      	mov	sl, r0
 8018f0e:	4690      	mov	r8, r2
 8018f10:	9301      	str	r3, [sp, #4]
 8018f12:	f846 5c04 	str.w	r5, [r6, #-4]
 8018f16:	46b9      	mov	r9, r7
 8018f18:	463c      	mov	r4, r7
 8018f1a:	9502      	str	r5, [sp, #8]
 8018f1c:	46ab      	mov	fp, r5
 8018f1e:	784a      	ldrb	r2, [r1, #1]
 8018f20:	1c4b      	adds	r3, r1, #1
 8018f22:	9303      	str	r3, [sp, #12]
 8018f24:	b342      	cbz	r2, 8018f78 <__hexnan+0x88>
 8018f26:	4610      	mov	r0, r2
 8018f28:	9105      	str	r1, [sp, #20]
 8018f2a:	9204      	str	r2, [sp, #16]
 8018f2c:	f7ff fd5e 	bl	80189ec <__hexdig_fun>
 8018f30:	2800      	cmp	r0, #0
 8018f32:	d14f      	bne.n	8018fd4 <__hexnan+0xe4>
 8018f34:	9a04      	ldr	r2, [sp, #16]
 8018f36:	9905      	ldr	r1, [sp, #20]
 8018f38:	2a20      	cmp	r2, #32
 8018f3a:	d818      	bhi.n	8018f6e <__hexnan+0x7e>
 8018f3c:	9b02      	ldr	r3, [sp, #8]
 8018f3e:	459b      	cmp	fp, r3
 8018f40:	dd13      	ble.n	8018f6a <__hexnan+0x7a>
 8018f42:	454c      	cmp	r4, r9
 8018f44:	d206      	bcs.n	8018f54 <__hexnan+0x64>
 8018f46:	2d07      	cmp	r5, #7
 8018f48:	dc04      	bgt.n	8018f54 <__hexnan+0x64>
 8018f4a:	462a      	mov	r2, r5
 8018f4c:	4649      	mov	r1, r9
 8018f4e:	4620      	mov	r0, r4
 8018f50:	f7ff ffa8 	bl	8018ea4 <L_shift>
 8018f54:	4544      	cmp	r4, r8
 8018f56:	d950      	bls.n	8018ffa <__hexnan+0x10a>
 8018f58:	2300      	movs	r3, #0
 8018f5a:	f1a4 0904 	sub.w	r9, r4, #4
 8018f5e:	f844 3c04 	str.w	r3, [r4, #-4]
 8018f62:	f8cd b008 	str.w	fp, [sp, #8]
 8018f66:	464c      	mov	r4, r9
 8018f68:	461d      	mov	r5, r3
 8018f6a:	9903      	ldr	r1, [sp, #12]
 8018f6c:	e7d7      	b.n	8018f1e <__hexnan+0x2e>
 8018f6e:	2a29      	cmp	r2, #41	; 0x29
 8018f70:	d156      	bne.n	8019020 <__hexnan+0x130>
 8018f72:	3102      	adds	r1, #2
 8018f74:	f8ca 1000 	str.w	r1, [sl]
 8018f78:	f1bb 0f00 	cmp.w	fp, #0
 8018f7c:	d050      	beq.n	8019020 <__hexnan+0x130>
 8018f7e:	454c      	cmp	r4, r9
 8018f80:	d206      	bcs.n	8018f90 <__hexnan+0xa0>
 8018f82:	2d07      	cmp	r5, #7
 8018f84:	dc04      	bgt.n	8018f90 <__hexnan+0xa0>
 8018f86:	462a      	mov	r2, r5
 8018f88:	4649      	mov	r1, r9
 8018f8a:	4620      	mov	r0, r4
 8018f8c:	f7ff ff8a 	bl	8018ea4 <L_shift>
 8018f90:	4544      	cmp	r4, r8
 8018f92:	d934      	bls.n	8018ffe <__hexnan+0x10e>
 8018f94:	f1a8 0204 	sub.w	r2, r8, #4
 8018f98:	4623      	mov	r3, r4
 8018f9a:	f853 1b04 	ldr.w	r1, [r3], #4
 8018f9e:	f842 1f04 	str.w	r1, [r2, #4]!
 8018fa2:	429f      	cmp	r7, r3
 8018fa4:	d2f9      	bcs.n	8018f9a <__hexnan+0xaa>
 8018fa6:	1b3b      	subs	r3, r7, r4
 8018fa8:	f023 0303 	bic.w	r3, r3, #3
 8018fac:	3304      	adds	r3, #4
 8018fae:	3401      	adds	r4, #1
 8018fb0:	3e03      	subs	r6, #3
 8018fb2:	42b4      	cmp	r4, r6
 8018fb4:	bf88      	it	hi
 8018fb6:	2304      	movhi	r3, #4
 8018fb8:	4443      	add	r3, r8
 8018fba:	2200      	movs	r2, #0
 8018fbc:	f843 2b04 	str.w	r2, [r3], #4
 8018fc0:	429f      	cmp	r7, r3
 8018fc2:	d2fb      	bcs.n	8018fbc <__hexnan+0xcc>
 8018fc4:	683b      	ldr	r3, [r7, #0]
 8018fc6:	b91b      	cbnz	r3, 8018fd0 <__hexnan+0xe0>
 8018fc8:	4547      	cmp	r7, r8
 8018fca:	d127      	bne.n	801901c <__hexnan+0x12c>
 8018fcc:	2301      	movs	r3, #1
 8018fce:	603b      	str	r3, [r7, #0]
 8018fd0:	2005      	movs	r0, #5
 8018fd2:	e026      	b.n	8019022 <__hexnan+0x132>
 8018fd4:	3501      	adds	r5, #1
 8018fd6:	2d08      	cmp	r5, #8
 8018fd8:	f10b 0b01 	add.w	fp, fp, #1
 8018fdc:	dd06      	ble.n	8018fec <__hexnan+0xfc>
 8018fde:	4544      	cmp	r4, r8
 8018fe0:	d9c3      	bls.n	8018f6a <__hexnan+0x7a>
 8018fe2:	2300      	movs	r3, #0
 8018fe4:	f844 3c04 	str.w	r3, [r4, #-4]
 8018fe8:	2501      	movs	r5, #1
 8018fea:	3c04      	subs	r4, #4
 8018fec:	6822      	ldr	r2, [r4, #0]
 8018fee:	f000 000f 	and.w	r0, r0, #15
 8018ff2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8018ff6:	6022      	str	r2, [r4, #0]
 8018ff8:	e7b7      	b.n	8018f6a <__hexnan+0x7a>
 8018ffa:	2508      	movs	r5, #8
 8018ffc:	e7b5      	b.n	8018f6a <__hexnan+0x7a>
 8018ffe:	9b01      	ldr	r3, [sp, #4]
 8019000:	2b00      	cmp	r3, #0
 8019002:	d0df      	beq.n	8018fc4 <__hexnan+0xd4>
 8019004:	f04f 32ff 	mov.w	r2, #4294967295
 8019008:	f1c3 0320 	rsb	r3, r3, #32
 801900c:	fa22 f303 	lsr.w	r3, r2, r3
 8019010:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019014:	401a      	ands	r2, r3
 8019016:	f846 2c04 	str.w	r2, [r6, #-4]
 801901a:	e7d3      	b.n	8018fc4 <__hexnan+0xd4>
 801901c:	3f04      	subs	r7, #4
 801901e:	e7d1      	b.n	8018fc4 <__hexnan+0xd4>
 8019020:	2004      	movs	r0, #4
 8019022:	b007      	add	sp, #28
 8019024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019028 <_localeconv_r>:
 8019028:	4800      	ldr	r0, [pc, #0]	; (801902c <_localeconv_r+0x4>)
 801902a:	4770      	bx	lr
 801902c:	20004368 	.word	0x20004368

08019030 <__ascii_mbtowc>:
 8019030:	b082      	sub	sp, #8
 8019032:	b901      	cbnz	r1, 8019036 <__ascii_mbtowc+0x6>
 8019034:	a901      	add	r1, sp, #4
 8019036:	b142      	cbz	r2, 801904a <__ascii_mbtowc+0x1a>
 8019038:	b14b      	cbz	r3, 801904e <__ascii_mbtowc+0x1e>
 801903a:	7813      	ldrb	r3, [r2, #0]
 801903c:	600b      	str	r3, [r1, #0]
 801903e:	7812      	ldrb	r2, [r2, #0]
 8019040:	1e10      	subs	r0, r2, #0
 8019042:	bf18      	it	ne
 8019044:	2001      	movne	r0, #1
 8019046:	b002      	add	sp, #8
 8019048:	4770      	bx	lr
 801904a:	4610      	mov	r0, r2
 801904c:	e7fb      	b.n	8019046 <__ascii_mbtowc+0x16>
 801904e:	f06f 0001 	mvn.w	r0, #1
 8019052:	e7f8      	b.n	8019046 <__ascii_mbtowc+0x16>

08019054 <__malloc_lock>:
 8019054:	4801      	ldr	r0, [pc, #4]	; (801905c <__malloc_lock+0x8>)
 8019056:	f000 be88 	b.w	8019d6a <__retarget_lock_acquire_recursive>
 801905a:	bf00      	nop
 801905c:	20011b84 	.word	0x20011b84

08019060 <__malloc_unlock>:
 8019060:	4801      	ldr	r0, [pc, #4]	; (8019068 <__malloc_unlock+0x8>)
 8019062:	f000 be83 	b.w	8019d6c <__retarget_lock_release_recursive>
 8019066:	bf00      	nop
 8019068:	20011b84 	.word	0x20011b84

0801906c <_Balloc>:
 801906c:	b570      	push	{r4, r5, r6, lr}
 801906e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019070:	4604      	mov	r4, r0
 8019072:	460d      	mov	r5, r1
 8019074:	b976      	cbnz	r6, 8019094 <_Balloc+0x28>
 8019076:	2010      	movs	r0, #16
 8019078:	f7fc ff6a 	bl	8015f50 <malloc>
 801907c:	4602      	mov	r2, r0
 801907e:	6260      	str	r0, [r4, #36]	; 0x24
 8019080:	b920      	cbnz	r0, 801908c <_Balloc+0x20>
 8019082:	4b18      	ldr	r3, [pc, #96]	; (80190e4 <_Balloc+0x78>)
 8019084:	4818      	ldr	r0, [pc, #96]	; (80190e8 <_Balloc+0x7c>)
 8019086:	2166      	movs	r1, #102	; 0x66
 8019088:	f000 fe3e 	bl	8019d08 <__assert_func>
 801908c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019090:	6006      	str	r6, [r0, #0]
 8019092:	60c6      	str	r6, [r0, #12]
 8019094:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019096:	68f3      	ldr	r3, [r6, #12]
 8019098:	b183      	cbz	r3, 80190bc <_Balloc+0x50>
 801909a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801909c:	68db      	ldr	r3, [r3, #12]
 801909e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80190a2:	b9b8      	cbnz	r0, 80190d4 <_Balloc+0x68>
 80190a4:	2101      	movs	r1, #1
 80190a6:	fa01 f605 	lsl.w	r6, r1, r5
 80190aa:	1d72      	adds	r2, r6, #5
 80190ac:	0092      	lsls	r2, r2, #2
 80190ae:	4620      	mov	r0, r4
 80190b0:	f000 fc97 	bl	80199e2 <_calloc_r>
 80190b4:	b160      	cbz	r0, 80190d0 <_Balloc+0x64>
 80190b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80190ba:	e00e      	b.n	80190da <_Balloc+0x6e>
 80190bc:	2221      	movs	r2, #33	; 0x21
 80190be:	2104      	movs	r1, #4
 80190c0:	4620      	mov	r0, r4
 80190c2:	f000 fc8e 	bl	80199e2 <_calloc_r>
 80190c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80190c8:	60f0      	str	r0, [r6, #12]
 80190ca:	68db      	ldr	r3, [r3, #12]
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d1e4      	bne.n	801909a <_Balloc+0x2e>
 80190d0:	2000      	movs	r0, #0
 80190d2:	bd70      	pop	{r4, r5, r6, pc}
 80190d4:	6802      	ldr	r2, [r0, #0]
 80190d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80190da:	2300      	movs	r3, #0
 80190dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80190e0:	e7f7      	b.n	80190d2 <_Balloc+0x66>
 80190e2:	bf00      	nop
 80190e4:	0801c6ae 	.word	0x0801c6ae
 80190e8:	0801c7b4 	.word	0x0801c7b4

080190ec <_Bfree>:
 80190ec:	b570      	push	{r4, r5, r6, lr}
 80190ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80190f0:	4605      	mov	r5, r0
 80190f2:	460c      	mov	r4, r1
 80190f4:	b976      	cbnz	r6, 8019114 <_Bfree+0x28>
 80190f6:	2010      	movs	r0, #16
 80190f8:	f7fc ff2a 	bl	8015f50 <malloc>
 80190fc:	4602      	mov	r2, r0
 80190fe:	6268      	str	r0, [r5, #36]	; 0x24
 8019100:	b920      	cbnz	r0, 801910c <_Bfree+0x20>
 8019102:	4b09      	ldr	r3, [pc, #36]	; (8019128 <_Bfree+0x3c>)
 8019104:	4809      	ldr	r0, [pc, #36]	; (801912c <_Bfree+0x40>)
 8019106:	218a      	movs	r1, #138	; 0x8a
 8019108:	f000 fdfe 	bl	8019d08 <__assert_func>
 801910c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019110:	6006      	str	r6, [r0, #0]
 8019112:	60c6      	str	r6, [r0, #12]
 8019114:	b13c      	cbz	r4, 8019126 <_Bfree+0x3a>
 8019116:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019118:	6862      	ldr	r2, [r4, #4]
 801911a:	68db      	ldr	r3, [r3, #12]
 801911c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019120:	6021      	str	r1, [r4, #0]
 8019122:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019126:	bd70      	pop	{r4, r5, r6, pc}
 8019128:	0801c6ae 	.word	0x0801c6ae
 801912c:	0801c7b4 	.word	0x0801c7b4

08019130 <__multadd>:
 8019130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019134:	690e      	ldr	r6, [r1, #16]
 8019136:	4607      	mov	r7, r0
 8019138:	4698      	mov	r8, r3
 801913a:	460c      	mov	r4, r1
 801913c:	f101 0014 	add.w	r0, r1, #20
 8019140:	2300      	movs	r3, #0
 8019142:	6805      	ldr	r5, [r0, #0]
 8019144:	b2a9      	uxth	r1, r5
 8019146:	fb02 8101 	mla	r1, r2, r1, r8
 801914a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801914e:	0c2d      	lsrs	r5, r5, #16
 8019150:	fb02 c505 	mla	r5, r2, r5, ip
 8019154:	b289      	uxth	r1, r1
 8019156:	3301      	adds	r3, #1
 8019158:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801915c:	429e      	cmp	r6, r3
 801915e:	f840 1b04 	str.w	r1, [r0], #4
 8019162:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8019166:	dcec      	bgt.n	8019142 <__multadd+0x12>
 8019168:	f1b8 0f00 	cmp.w	r8, #0
 801916c:	d022      	beq.n	80191b4 <__multadd+0x84>
 801916e:	68a3      	ldr	r3, [r4, #8]
 8019170:	42b3      	cmp	r3, r6
 8019172:	dc19      	bgt.n	80191a8 <__multadd+0x78>
 8019174:	6861      	ldr	r1, [r4, #4]
 8019176:	4638      	mov	r0, r7
 8019178:	3101      	adds	r1, #1
 801917a:	f7ff ff77 	bl	801906c <_Balloc>
 801917e:	4605      	mov	r5, r0
 8019180:	b928      	cbnz	r0, 801918e <__multadd+0x5e>
 8019182:	4602      	mov	r2, r0
 8019184:	4b0d      	ldr	r3, [pc, #52]	; (80191bc <__multadd+0x8c>)
 8019186:	480e      	ldr	r0, [pc, #56]	; (80191c0 <__multadd+0x90>)
 8019188:	21b5      	movs	r1, #181	; 0xb5
 801918a:	f000 fdbd 	bl	8019d08 <__assert_func>
 801918e:	6922      	ldr	r2, [r4, #16]
 8019190:	3202      	adds	r2, #2
 8019192:	f104 010c 	add.w	r1, r4, #12
 8019196:	0092      	lsls	r2, r2, #2
 8019198:	300c      	adds	r0, #12
 801919a:	f7fc fee9 	bl	8015f70 <memcpy>
 801919e:	4621      	mov	r1, r4
 80191a0:	4638      	mov	r0, r7
 80191a2:	f7ff ffa3 	bl	80190ec <_Bfree>
 80191a6:	462c      	mov	r4, r5
 80191a8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80191ac:	3601      	adds	r6, #1
 80191ae:	f8c3 8014 	str.w	r8, [r3, #20]
 80191b2:	6126      	str	r6, [r4, #16]
 80191b4:	4620      	mov	r0, r4
 80191b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191ba:	bf00      	nop
 80191bc:	0801c724 	.word	0x0801c724
 80191c0:	0801c7b4 	.word	0x0801c7b4

080191c4 <__s2b>:
 80191c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80191c8:	460c      	mov	r4, r1
 80191ca:	4615      	mov	r5, r2
 80191cc:	461f      	mov	r7, r3
 80191ce:	2209      	movs	r2, #9
 80191d0:	3308      	adds	r3, #8
 80191d2:	4606      	mov	r6, r0
 80191d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80191d8:	2100      	movs	r1, #0
 80191da:	2201      	movs	r2, #1
 80191dc:	429a      	cmp	r2, r3
 80191de:	db09      	blt.n	80191f4 <__s2b+0x30>
 80191e0:	4630      	mov	r0, r6
 80191e2:	f7ff ff43 	bl	801906c <_Balloc>
 80191e6:	b940      	cbnz	r0, 80191fa <__s2b+0x36>
 80191e8:	4602      	mov	r2, r0
 80191ea:	4b19      	ldr	r3, [pc, #100]	; (8019250 <__s2b+0x8c>)
 80191ec:	4819      	ldr	r0, [pc, #100]	; (8019254 <__s2b+0x90>)
 80191ee:	21ce      	movs	r1, #206	; 0xce
 80191f0:	f000 fd8a 	bl	8019d08 <__assert_func>
 80191f4:	0052      	lsls	r2, r2, #1
 80191f6:	3101      	adds	r1, #1
 80191f8:	e7f0      	b.n	80191dc <__s2b+0x18>
 80191fa:	9b08      	ldr	r3, [sp, #32]
 80191fc:	6143      	str	r3, [r0, #20]
 80191fe:	2d09      	cmp	r5, #9
 8019200:	f04f 0301 	mov.w	r3, #1
 8019204:	6103      	str	r3, [r0, #16]
 8019206:	dd16      	ble.n	8019236 <__s2b+0x72>
 8019208:	f104 0909 	add.w	r9, r4, #9
 801920c:	46c8      	mov	r8, r9
 801920e:	442c      	add	r4, r5
 8019210:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019214:	4601      	mov	r1, r0
 8019216:	3b30      	subs	r3, #48	; 0x30
 8019218:	220a      	movs	r2, #10
 801921a:	4630      	mov	r0, r6
 801921c:	f7ff ff88 	bl	8019130 <__multadd>
 8019220:	45a0      	cmp	r8, r4
 8019222:	d1f5      	bne.n	8019210 <__s2b+0x4c>
 8019224:	f1a5 0408 	sub.w	r4, r5, #8
 8019228:	444c      	add	r4, r9
 801922a:	1b2d      	subs	r5, r5, r4
 801922c:	1963      	adds	r3, r4, r5
 801922e:	42bb      	cmp	r3, r7
 8019230:	db04      	blt.n	801923c <__s2b+0x78>
 8019232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019236:	340a      	adds	r4, #10
 8019238:	2509      	movs	r5, #9
 801923a:	e7f6      	b.n	801922a <__s2b+0x66>
 801923c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019240:	4601      	mov	r1, r0
 8019242:	3b30      	subs	r3, #48	; 0x30
 8019244:	220a      	movs	r2, #10
 8019246:	4630      	mov	r0, r6
 8019248:	f7ff ff72 	bl	8019130 <__multadd>
 801924c:	e7ee      	b.n	801922c <__s2b+0x68>
 801924e:	bf00      	nop
 8019250:	0801c724 	.word	0x0801c724
 8019254:	0801c7b4 	.word	0x0801c7b4

08019258 <__hi0bits>:
 8019258:	0c03      	lsrs	r3, r0, #16
 801925a:	041b      	lsls	r3, r3, #16
 801925c:	b9d3      	cbnz	r3, 8019294 <__hi0bits+0x3c>
 801925e:	0400      	lsls	r0, r0, #16
 8019260:	2310      	movs	r3, #16
 8019262:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019266:	bf04      	itt	eq
 8019268:	0200      	lsleq	r0, r0, #8
 801926a:	3308      	addeq	r3, #8
 801926c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019270:	bf04      	itt	eq
 8019272:	0100      	lsleq	r0, r0, #4
 8019274:	3304      	addeq	r3, #4
 8019276:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801927a:	bf04      	itt	eq
 801927c:	0080      	lsleq	r0, r0, #2
 801927e:	3302      	addeq	r3, #2
 8019280:	2800      	cmp	r0, #0
 8019282:	db05      	blt.n	8019290 <__hi0bits+0x38>
 8019284:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019288:	f103 0301 	add.w	r3, r3, #1
 801928c:	bf08      	it	eq
 801928e:	2320      	moveq	r3, #32
 8019290:	4618      	mov	r0, r3
 8019292:	4770      	bx	lr
 8019294:	2300      	movs	r3, #0
 8019296:	e7e4      	b.n	8019262 <__hi0bits+0xa>

08019298 <__lo0bits>:
 8019298:	6803      	ldr	r3, [r0, #0]
 801929a:	f013 0207 	ands.w	r2, r3, #7
 801929e:	4601      	mov	r1, r0
 80192a0:	d00b      	beq.n	80192ba <__lo0bits+0x22>
 80192a2:	07da      	lsls	r2, r3, #31
 80192a4:	d424      	bmi.n	80192f0 <__lo0bits+0x58>
 80192a6:	0798      	lsls	r0, r3, #30
 80192a8:	bf49      	itett	mi
 80192aa:	085b      	lsrmi	r3, r3, #1
 80192ac:	089b      	lsrpl	r3, r3, #2
 80192ae:	2001      	movmi	r0, #1
 80192b0:	600b      	strmi	r3, [r1, #0]
 80192b2:	bf5c      	itt	pl
 80192b4:	600b      	strpl	r3, [r1, #0]
 80192b6:	2002      	movpl	r0, #2
 80192b8:	4770      	bx	lr
 80192ba:	b298      	uxth	r0, r3
 80192bc:	b9b0      	cbnz	r0, 80192ec <__lo0bits+0x54>
 80192be:	0c1b      	lsrs	r3, r3, #16
 80192c0:	2010      	movs	r0, #16
 80192c2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80192c6:	bf04      	itt	eq
 80192c8:	0a1b      	lsreq	r3, r3, #8
 80192ca:	3008      	addeq	r0, #8
 80192cc:	071a      	lsls	r2, r3, #28
 80192ce:	bf04      	itt	eq
 80192d0:	091b      	lsreq	r3, r3, #4
 80192d2:	3004      	addeq	r0, #4
 80192d4:	079a      	lsls	r2, r3, #30
 80192d6:	bf04      	itt	eq
 80192d8:	089b      	lsreq	r3, r3, #2
 80192da:	3002      	addeq	r0, #2
 80192dc:	07da      	lsls	r2, r3, #31
 80192de:	d403      	bmi.n	80192e8 <__lo0bits+0x50>
 80192e0:	085b      	lsrs	r3, r3, #1
 80192e2:	f100 0001 	add.w	r0, r0, #1
 80192e6:	d005      	beq.n	80192f4 <__lo0bits+0x5c>
 80192e8:	600b      	str	r3, [r1, #0]
 80192ea:	4770      	bx	lr
 80192ec:	4610      	mov	r0, r2
 80192ee:	e7e8      	b.n	80192c2 <__lo0bits+0x2a>
 80192f0:	2000      	movs	r0, #0
 80192f2:	4770      	bx	lr
 80192f4:	2020      	movs	r0, #32
 80192f6:	4770      	bx	lr

080192f8 <__i2b>:
 80192f8:	b510      	push	{r4, lr}
 80192fa:	460c      	mov	r4, r1
 80192fc:	2101      	movs	r1, #1
 80192fe:	f7ff feb5 	bl	801906c <_Balloc>
 8019302:	4602      	mov	r2, r0
 8019304:	b928      	cbnz	r0, 8019312 <__i2b+0x1a>
 8019306:	4b05      	ldr	r3, [pc, #20]	; (801931c <__i2b+0x24>)
 8019308:	4805      	ldr	r0, [pc, #20]	; (8019320 <__i2b+0x28>)
 801930a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801930e:	f000 fcfb 	bl	8019d08 <__assert_func>
 8019312:	2301      	movs	r3, #1
 8019314:	6144      	str	r4, [r0, #20]
 8019316:	6103      	str	r3, [r0, #16]
 8019318:	bd10      	pop	{r4, pc}
 801931a:	bf00      	nop
 801931c:	0801c724 	.word	0x0801c724
 8019320:	0801c7b4 	.word	0x0801c7b4

08019324 <__multiply>:
 8019324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019328:	4614      	mov	r4, r2
 801932a:	690a      	ldr	r2, [r1, #16]
 801932c:	6923      	ldr	r3, [r4, #16]
 801932e:	429a      	cmp	r2, r3
 8019330:	bfb8      	it	lt
 8019332:	460b      	movlt	r3, r1
 8019334:	460d      	mov	r5, r1
 8019336:	bfbc      	itt	lt
 8019338:	4625      	movlt	r5, r4
 801933a:	461c      	movlt	r4, r3
 801933c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8019340:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019344:	68ab      	ldr	r3, [r5, #8]
 8019346:	6869      	ldr	r1, [r5, #4]
 8019348:	eb0a 0709 	add.w	r7, sl, r9
 801934c:	42bb      	cmp	r3, r7
 801934e:	b085      	sub	sp, #20
 8019350:	bfb8      	it	lt
 8019352:	3101      	addlt	r1, #1
 8019354:	f7ff fe8a 	bl	801906c <_Balloc>
 8019358:	b930      	cbnz	r0, 8019368 <__multiply+0x44>
 801935a:	4602      	mov	r2, r0
 801935c:	4b42      	ldr	r3, [pc, #264]	; (8019468 <__multiply+0x144>)
 801935e:	4843      	ldr	r0, [pc, #268]	; (801946c <__multiply+0x148>)
 8019360:	f240 115d 	movw	r1, #349	; 0x15d
 8019364:	f000 fcd0 	bl	8019d08 <__assert_func>
 8019368:	f100 0614 	add.w	r6, r0, #20
 801936c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8019370:	4633      	mov	r3, r6
 8019372:	2200      	movs	r2, #0
 8019374:	4543      	cmp	r3, r8
 8019376:	d31e      	bcc.n	80193b6 <__multiply+0x92>
 8019378:	f105 0c14 	add.w	ip, r5, #20
 801937c:	f104 0314 	add.w	r3, r4, #20
 8019380:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8019384:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8019388:	9202      	str	r2, [sp, #8]
 801938a:	ebac 0205 	sub.w	r2, ip, r5
 801938e:	3a15      	subs	r2, #21
 8019390:	f022 0203 	bic.w	r2, r2, #3
 8019394:	3204      	adds	r2, #4
 8019396:	f105 0115 	add.w	r1, r5, #21
 801939a:	458c      	cmp	ip, r1
 801939c:	bf38      	it	cc
 801939e:	2204      	movcc	r2, #4
 80193a0:	9201      	str	r2, [sp, #4]
 80193a2:	9a02      	ldr	r2, [sp, #8]
 80193a4:	9303      	str	r3, [sp, #12]
 80193a6:	429a      	cmp	r2, r3
 80193a8:	d808      	bhi.n	80193bc <__multiply+0x98>
 80193aa:	2f00      	cmp	r7, #0
 80193ac:	dc55      	bgt.n	801945a <__multiply+0x136>
 80193ae:	6107      	str	r7, [r0, #16]
 80193b0:	b005      	add	sp, #20
 80193b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193b6:	f843 2b04 	str.w	r2, [r3], #4
 80193ba:	e7db      	b.n	8019374 <__multiply+0x50>
 80193bc:	f8b3 a000 	ldrh.w	sl, [r3]
 80193c0:	f1ba 0f00 	cmp.w	sl, #0
 80193c4:	d020      	beq.n	8019408 <__multiply+0xe4>
 80193c6:	f105 0e14 	add.w	lr, r5, #20
 80193ca:	46b1      	mov	r9, r6
 80193cc:	2200      	movs	r2, #0
 80193ce:	f85e 4b04 	ldr.w	r4, [lr], #4
 80193d2:	f8d9 b000 	ldr.w	fp, [r9]
 80193d6:	b2a1      	uxth	r1, r4
 80193d8:	fa1f fb8b 	uxth.w	fp, fp
 80193dc:	fb0a b101 	mla	r1, sl, r1, fp
 80193e0:	4411      	add	r1, r2
 80193e2:	f8d9 2000 	ldr.w	r2, [r9]
 80193e6:	0c24      	lsrs	r4, r4, #16
 80193e8:	0c12      	lsrs	r2, r2, #16
 80193ea:	fb0a 2404 	mla	r4, sl, r4, r2
 80193ee:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80193f2:	b289      	uxth	r1, r1
 80193f4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80193f8:	45f4      	cmp	ip, lr
 80193fa:	f849 1b04 	str.w	r1, [r9], #4
 80193fe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8019402:	d8e4      	bhi.n	80193ce <__multiply+0xaa>
 8019404:	9901      	ldr	r1, [sp, #4]
 8019406:	5072      	str	r2, [r6, r1]
 8019408:	9a03      	ldr	r2, [sp, #12]
 801940a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801940e:	3304      	adds	r3, #4
 8019410:	f1b9 0f00 	cmp.w	r9, #0
 8019414:	d01f      	beq.n	8019456 <__multiply+0x132>
 8019416:	6834      	ldr	r4, [r6, #0]
 8019418:	f105 0114 	add.w	r1, r5, #20
 801941c:	46b6      	mov	lr, r6
 801941e:	f04f 0a00 	mov.w	sl, #0
 8019422:	880a      	ldrh	r2, [r1, #0]
 8019424:	f8be b002 	ldrh.w	fp, [lr, #2]
 8019428:	fb09 b202 	mla	r2, r9, r2, fp
 801942c:	4492      	add	sl, r2
 801942e:	b2a4      	uxth	r4, r4
 8019430:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8019434:	f84e 4b04 	str.w	r4, [lr], #4
 8019438:	f851 4b04 	ldr.w	r4, [r1], #4
 801943c:	f8be 2000 	ldrh.w	r2, [lr]
 8019440:	0c24      	lsrs	r4, r4, #16
 8019442:	fb09 2404 	mla	r4, r9, r4, r2
 8019446:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801944a:	458c      	cmp	ip, r1
 801944c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8019450:	d8e7      	bhi.n	8019422 <__multiply+0xfe>
 8019452:	9a01      	ldr	r2, [sp, #4]
 8019454:	50b4      	str	r4, [r6, r2]
 8019456:	3604      	adds	r6, #4
 8019458:	e7a3      	b.n	80193a2 <__multiply+0x7e>
 801945a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801945e:	2b00      	cmp	r3, #0
 8019460:	d1a5      	bne.n	80193ae <__multiply+0x8a>
 8019462:	3f01      	subs	r7, #1
 8019464:	e7a1      	b.n	80193aa <__multiply+0x86>
 8019466:	bf00      	nop
 8019468:	0801c724 	.word	0x0801c724
 801946c:	0801c7b4 	.word	0x0801c7b4

08019470 <__pow5mult>:
 8019470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019474:	4615      	mov	r5, r2
 8019476:	f012 0203 	ands.w	r2, r2, #3
 801947a:	4606      	mov	r6, r0
 801947c:	460f      	mov	r7, r1
 801947e:	d007      	beq.n	8019490 <__pow5mult+0x20>
 8019480:	4c25      	ldr	r4, [pc, #148]	; (8019518 <__pow5mult+0xa8>)
 8019482:	3a01      	subs	r2, #1
 8019484:	2300      	movs	r3, #0
 8019486:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801948a:	f7ff fe51 	bl	8019130 <__multadd>
 801948e:	4607      	mov	r7, r0
 8019490:	10ad      	asrs	r5, r5, #2
 8019492:	d03d      	beq.n	8019510 <__pow5mult+0xa0>
 8019494:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019496:	b97c      	cbnz	r4, 80194b8 <__pow5mult+0x48>
 8019498:	2010      	movs	r0, #16
 801949a:	f7fc fd59 	bl	8015f50 <malloc>
 801949e:	4602      	mov	r2, r0
 80194a0:	6270      	str	r0, [r6, #36]	; 0x24
 80194a2:	b928      	cbnz	r0, 80194b0 <__pow5mult+0x40>
 80194a4:	4b1d      	ldr	r3, [pc, #116]	; (801951c <__pow5mult+0xac>)
 80194a6:	481e      	ldr	r0, [pc, #120]	; (8019520 <__pow5mult+0xb0>)
 80194a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80194ac:	f000 fc2c 	bl	8019d08 <__assert_func>
 80194b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80194b4:	6004      	str	r4, [r0, #0]
 80194b6:	60c4      	str	r4, [r0, #12]
 80194b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80194bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80194c0:	b94c      	cbnz	r4, 80194d6 <__pow5mult+0x66>
 80194c2:	f240 2171 	movw	r1, #625	; 0x271
 80194c6:	4630      	mov	r0, r6
 80194c8:	f7ff ff16 	bl	80192f8 <__i2b>
 80194cc:	2300      	movs	r3, #0
 80194ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80194d2:	4604      	mov	r4, r0
 80194d4:	6003      	str	r3, [r0, #0]
 80194d6:	f04f 0900 	mov.w	r9, #0
 80194da:	07eb      	lsls	r3, r5, #31
 80194dc:	d50a      	bpl.n	80194f4 <__pow5mult+0x84>
 80194de:	4639      	mov	r1, r7
 80194e0:	4622      	mov	r2, r4
 80194e2:	4630      	mov	r0, r6
 80194e4:	f7ff ff1e 	bl	8019324 <__multiply>
 80194e8:	4639      	mov	r1, r7
 80194ea:	4680      	mov	r8, r0
 80194ec:	4630      	mov	r0, r6
 80194ee:	f7ff fdfd 	bl	80190ec <_Bfree>
 80194f2:	4647      	mov	r7, r8
 80194f4:	106d      	asrs	r5, r5, #1
 80194f6:	d00b      	beq.n	8019510 <__pow5mult+0xa0>
 80194f8:	6820      	ldr	r0, [r4, #0]
 80194fa:	b938      	cbnz	r0, 801950c <__pow5mult+0x9c>
 80194fc:	4622      	mov	r2, r4
 80194fe:	4621      	mov	r1, r4
 8019500:	4630      	mov	r0, r6
 8019502:	f7ff ff0f 	bl	8019324 <__multiply>
 8019506:	6020      	str	r0, [r4, #0]
 8019508:	f8c0 9000 	str.w	r9, [r0]
 801950c:	4604      	mov	r4, r0
 801950e:	e7e4      	b.n	80194da <__pow5mult+0x6a>
 8019510:	4638      	mov	r0, r7
 8019512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019516:	bf00      	nop
 8019518:	0801c908 	.word	0x0801c908
 801951c:	0801c6ae 	.word	0x0801c6ae
 8019520:	0801c7b4 	.word	0x0801c7b4

08019524 <__lshift>:
 8019524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019528:	460c      	mov	r4, r1
 801952a:	6849      	ldr	r1, [r1, #4]
 801952c:	6923      	ldr	r3, [r4, #16]
 801952e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019532:	68a3      	ldr	r3, [r4, #8]
 8019534:	4607      	mov	r7, r0
 8019536:	4691      	mov	r9, r2
 8019538:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801953c:	f108 0601 	add.w	r6, r8, #1
 8019540:	42b3      	cmp	r3, r6
 8019542:	db0b      	blt.n	801955c <__lshift+0x38>
 8019544:	4638      	mov	r0, r7
 8019546:	f7ff fd91 	bl	801906c <_Balloc>
 801954a:	4605      	mov	r5, r0
 801954c:	b948      	cbnz	r0, 8019562 <__lshift+0x3e>
 801954e:	4602      	mov	r2, r0
 8019550:	4b28      	ldr	r3, [pc, #160]	; (80195f4 <__lshift+0xd0>)
 8019552:	4829      	ldr	r0, [pc, #164]	; (80195f8 <__lshift+0xd4>)
 8019554:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019558:	f000 fbd6 	bl	8019d08 <__assert_func>
 801955c:	3101      	adds	r1, #1
 801955e:	005b      	lsls	r3, r3, #1
 8019560:	e7ee      	b.n	8019540 <__lshift+0x1c>
 8019562:	2300      	movs	r3, #0
 8019564:	f100 0114 	add.w	r1, r0, #20
 8019568:	f100 0210 	add.w	r2, r0, #16
 801956c:	4618      	mov	r0, r3
 801956e:	4553      	cmp	r3, sl
 8019570:	db33      	blt.n	80195da <__lshift+0xb6>
 8019572:	6920      	ldr	r0, [r4, #16]
 8019574:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019578:	f104 0314 	add.w	r3, r4, #20
 801957c:	f019 091f 	ands.w	r9, r9, #31
 8019580:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019584:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019588:	d02b      	beq.n	80195e2 <__lshift+0xbe>
 801958a:	f1c9 0e20 	rsb	lr, r9, #32
 801958e:	468a      	mov	sl, r1
 8019590:	2200      	movs	r2, #0
 8019592:	6818      	ldr	r0, [r3, #0]
 8019594:	fa00 f009 	lsl.w	r0, r0, r9
 8019598:	4302      	orrs	r2, r0
 801959a:	f84a 2b04 	str.w	r2, [sl], #4
 801959e:	f853 2b04 	ldr.w	r2, [r3], #4
 80195a2:	459c      	cmp	ip, r3
 80195a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80195a8:	d8f3      	bhi.n	8019592 <__lshift+0x6e>
 80195aa:	ebac 0304 	sub.w	r3, ip, r4
 80195ae:	3b15      	subs	r3, #21
 80195b0:	f023 0303 	bic.w	r3, r3, #3
 80195b4:	3304      	adds	r3, #4
 80195b6:	f104 0015 	add.w	r0, r4, #21
 80195ba:	4584      	cmp	ip, r0
 80195bc:	bf38      	it	cc
 80195be:	2304      	movcc	r3, #4
 80195c0:	50ca      	str	r2, [r1, r3]
 80195c2:	b10a      	cbz	r2, 80195c8 <__lshift+0xa4>
 80195c4:	f108 0602 	add.w	r6, r8, #2
 80195c8:	3e01      	subs	r6, #1
 80195ca:	4638      	mov	r0, r7
 80195cc:	612e      	str	r6, [r5, #16]
 80195ce:	4621      	mov	r1, r4
 80195d0:	f7ff fd8c 	bl	80190ec <_Bfree>
 80195d4:	4628      	mov	r0, r5
 80195d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195da:	f842 0f04 	str.w	r0, [r2, #4]!
 80195de:	3301      	adds	r3, #1
 80195e0:	e7c5      	b.n	801956e <__lshift+0x4a>
 80195e2:	3904      	subs	r1, #4
 80195e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80195e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80195ec:	459c      	cmp	ip, r3
 80195ee:	d8f9      	bhi.n	80195e4 <__lshift+0xc0>
 80195f0:	e7ea      	b.n	80195c8 <__lshift+0xa4>
 80195f2:	bf00      	nop
 80195f4:	0801c724 	.word	0x0801c724
 80195f8:	0801c7b4 	.word	0x0801c7b4

080195fc <__mcmp>:
 80195fc:	b530      	push	{r4, r5, lr}
 80195fe:	6902      	ldr	r2, [r0, #16]
 8019600:	690c      	ldr	r4, [r1, #16]
 8019602:	1b12      	subs	r2, r2, r4
 8019604:	d10e      	bne.n	8019624 <__mcmp+0x28>
 8019606:	f100 0314 	add.w	r3, r0, #20
 801960a:	3114      	adds	r1, #20
 801960c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019610:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019614:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019618:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801961c:	42a5      	cmp	r5, r4
 801961e:	d003      	beq.n	8019628 <__mcmp+0x2c>
 8019620:	d305      	bcc.n	801962e <__mcmp+0x32>
 8019622:	2201      	movs	r2, #1
 8019624:	4610      	mov	r0, r2
 8019626:	bd30      	pop	{r4, r5, pc}
 8019628:	4283      	cmp	r3, r0
 801962a:	d3f3      	bcc.n	8019614 <__mcmp+0x18>
 801962c:	e7fa      	b.n	8019624 <__mcmp+0x28>
 801962e:	f04f 32ff 	mov.w	r2, #4294967295
 8019632:	e7f7      	b.n	8019624 <__mcmp+0x28>

08019634 <__mdiff>:
 8019634:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019638:	460c      	mov	r4, r1
 801963a:	4606      	mov	r6, r0
 801963c:	4611      	mov	r1, r2
 801963e:	4620      	mov	r0, r4
 8019640:	4617      	mov	r7, r2
 8019642:	f7ff ffdb 	bl	80195fc <__mcmp>
 8019646:	1e05      	subs	r5, r0, #0
 8019648:	d110      	bne.n	801966c <__mdiff+0x38>
 801964a:	4629      	mov	r1, r5
 801964c:	4630      	mov	r0, r6
 801964e:	f7ff fd0d 	bl	801906c <_Balloc>
 8019652:	b930      	cbnz	r0, 8019662 <__mdiff+0x2e>
 8019654:	4b39      	ldr	r3, [pc, #228]	; (801973c <__mdiff+0x108>)
 8019656:	4602      	mov	r2, r0
 8019658:	f240 2132 	movw	r1, #562	; 0x232
 801965c:	4838      	ldr	r0, [pc, #224]	; (8019740 <__mdiff+0x10c>)
 801965e:	f000 fb53 	bl	8019d08 <__assert_func>
 8019662:	2301      	movs	r3, #1
 8019664:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019668:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801966c:	bfa4      	itt	ge
 801966e:	463b      	movge	r3, r7
 8019670:	4627      	movge	r7, r4
 8019672:	4630      	mov	r0, r6
 8019674:	6879      	ldr	r1, [r7, #4]
 8019676:	bfa6      	itte	ge
 8019678:	461c      	movge	r4, r3
 801967a:	2500      	movge	r5, #0
 801967c:	2501      	movlt	r5, #1
 801967e:	f7ff fcf5 	bl	801906c <_Balloc>
 8019682:	b920      	cbnz	r0, 801968e <__mdiff+0x5a>
 8019684:	4b2d      	ldr	r3, [pc, #180]	; (801973c <__mdiff+0x108>)
 8019686:	4602      	mov	r2, r0
 8019688:	f44f 7110 	mov.w	r1, #576	; 0x240
 801968c:	e7e6      	b.n	801965c <__mdiff+0x28>
 801968e:	693e      	ldr	r6, [r7, #16]
 8019690:	60c5      	str	r5, [r0, #12]
 8019692:	6925      	ldr	r5, [r4, #16]
 8019694:	f107 0114 	add.w	r1, r7, #20
 8019698:	f104 0914 	add.w	r9, r4, #20
 801969c:	f100 0e14 	add.w	lr, r0, #20
 80196a0:	f107 0210 	add.w	r2, r7, #16
 80196a4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80196a8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80196ac:	46f2      	mov	sl, lr
 80196ae:	2700      	movs	r7, #0
 80196b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80196b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80196b8:	fa1f f883 	uxth.w	r8, r3
 80196bc:	fa17 f78b 	uxtah	r7, r7, fp
 80196c0:	0c1b      	lsrs	r3, r3, #16
 80196c2:	eba7 0808 	sub.w	r8, r7, r8
 80196c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80196ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80196ce:	fa1f f888 	uxth.w	r8, r8
 80196d2:	141f      	asrs	r7, r3, #16
 80196d4:	454d      	cmp	r5, r9
 80196d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80196da:	f84a 3b04 	str.w	r3, [sl], #4
 80196de:	d8e7      	bhi.n	80196b0 <__mdiff+0x7c>
 80196e0:	1b2b      	subs	r3, r5, r4
 80196e2:	3b15      	subs	r3, #21
 80196e4:	f023 0303 	bic.w	r3, r3, #3
 80196e8:	3304      	adds	r3, #4
 80196ea:	3415      	adds	r4, #21
 80196ec:	42a5      	cmp	r5, r4
 80196ee:	bf38      	it	cc
 80196f0:	2304      	movcc	r3, #4
 80196f2:	4419      	add	r1, r3
 80196f4:	4473      	add	r3, lr
 80196f6:	469e      	mov	lr, r3
 80196f8:	460d      	mov	r5, r1
 80196fa:	4565      	cmp	r5, ip
 80196fc:	d30e      	bcc.n	801971c <__mdiff+0xe8>
 80196fe:	f10c 0203 	add.w	r2, ip, #3
 8019702:	1a52      	subs	r2, r2, r1
 8019704:	f022 0203 	bic.w	r2, r2, #3
 8019708:	3903      	subs	r1, #3
 801970a:	458c      	cmp	ip, r1
 801970c:	bf38      	it	cc
 801970e:	2200      	movcc	r2, #0
 8019710:	441a      	add	r2, r3
 8019712:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019716:	b17b      	cbz	r3, 8019738 <__mdiff+0x104>
 8019718:	6106      	str	r6, [r0, #16]
 801971a:	e7a5      	b.n	8019668 <__mdiff+0x34>
 801971c:	f855 8b04 	ldr.w	r8, [r5], #4
 8019720:	fa17 f488 	uxtah	r4, r7, r8
 8019724:	1422      	asrs	r2, r4, #16
 8019726:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801972a:	b2a4      	uxth	r4, r4
 801972c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8019730:	f84e 4b04 	str.w	r4, [lr], #4
 8019734:	1417      	asrs	r7, r2, #16
 8019736:	e7e0      	b.n	80196fa <__mdiff+0xc6>
 8019738:	3e01      	subs	r6, #1
 801973a:	e7ea      	b.n	8019712 <__mdiff+0xde>
 801973c:	0801c724 	.word	0x0801c724
 8019740:	0801c7b4 	.word	0x0801c7b4

08019744 <__ulp>:
 8019744:	b082      	sub	sp, #8
 8019746:	ed8d 0b00 	vstr	d0, [sp]
 801974a:	9b01      	ldr	r3, [sp, #4]
 801974c:	4912      	ldr	r1, [pc, #72]	; (8019798 <__ulp+0x54>)
 801974e:	4019      	ands	r1, r3
 8019750:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8019754:	2900      	cmp	r1, #0
 8019756:	dd05      	ble.n	8019764 <__ulp+0x20>
 8019758:	2200      	movs	r2, #0
 801975a:	460b      	mov	r3, r1
 801975c:	ec43 2b10 	vmov	d0, r2, r3
 8019760:	b002      	add	sp, #8
 8019762:	4770      	bx	lr
 8019764:	4249      	negs	r1, r1
 8019766:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801976a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801976e:	f04f 0200 	mov.w	r2, #0
 8019772:	f04f 0300 	mov.w	r3, #0
 8019776:	da04      	bge.n	8019782 <__ulp+0x3e>
 8019778:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801977c:	fa41 f300 	asr.w	r3, r1, r0
 8019780:	e7ec      	b.n	801975c <__ulp+0x18>
 8019782:	f1a0 0114 	sub.w	r1, r0, #20
 8019786:	291e      	cmp	r1, #30
 8019788:	bfda      	itte	le
 801978a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801978e:	fa20 f101 	lsrle.w	r1, r0, r1
 8019792:	2101      	movgt	r1, #1
 8019794:	460a      	mov	r2, r1
 8019796:	e7e1      	b.n	801975c <__ulp+0x18>
 8019798:	7ff00000 	.word	0x7ff00000

0801979c <__b2d>:
 801979c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801979e:	6905      	ldr	r5, [r0, #16]
 80197a0:	f100 0714 	add.w	r7, r0, #20
 80197a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80197a8:	1f2e      	subs	r6, r5, #4
 80197aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80197ae:	4620      	mov	r0, r4
 80197b0:	f7ff fd52 	bl	8019258 <__hi0bits>
 80197b4:	f1c0 0320 	rsb	r3, r0, #32
 80197b8:	280a      	cmp	r0, #10
 80197ba:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8019838 <__b2d+0x9c>
 80197be:	600b      	str	r3, [r1, #0]
 80197c0:	dc14      	bgt.n	80197ec <__b2d+0x50>
 80197c2:	f1c0 0e0b 	rsb	lr, r0, #11
 80197c6:	fa24 f10e 	lsr.w	r1, r4, lr
 80197ca:	42b7      	cmp	r7, r6
 80197cc:	ea41 030c 	orr.w	r3, r1, ip
 80197d0:	bf34      	ite	cc
 80197d2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80197d6:	2100      	movcs	r1, #0
 80197d8:	3015      	adds	r0, #21
 80197da:	fa04 f000 	lsl.w	r0, r4, r0
 80197de:	fa21 f10e 	lsr.w	r1, r1, lr
 80197e2:	ea40 0201 	orr.w	r2, r0, r1
 80197e6:	ec43 2b10 	vmov	d0, r2, r3
 80197ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80197ec:	42b7      	cmp	r7, r6
 80197ee:	bf3a      	itte	cc
 80197f0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80197f4:	f1a5 0608 	subcc.w	r6, r5, #8
 80197f8:	2100      	movcs	r1, #0
 80197fa:	380b      	subs	r0, #11
 80197fc:	d017      	beq.n	801982e <__b2d+0x92>
 80197fe:	f1c0 0c20 	rsb	ip, r0, #32
 8019802:	fa04 f500 	lsl.w	r5, r4, r0
 8019806:	42be      	cmp	r6, r7
 8019808:	fa21 f40c 	lsr.w	r4, r1, ip
 801980c:	ea45 0504 	orr.w	r5, r5, r4
 8019810:	bf8c      	ite	hi
 8019812:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019816:	2400      	movls	r4, #0
 8019818:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801981c:	fa01 f000 	lsl.w	r0, r1, r0
 8019820:	fa24 f40c 	lsr.w	r4, r4, ip
 8019824:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019828:	ea40 0204 	orr.w	r2, r0, r4
 801982c:	e7db      	b.n	80197e6 <__b2d+0x4a>
 801982e:	ea44 030c 	orr.w	r3, r4, ip
 8019832:	460a      	mov	r2, r1
 8019834:	e7d7      	b.n	80197e6 <__b2d+0x4a>
 8019836:	bf00      	nop
 8019838:	3ff00000 	.word	0x3ff00000

0801983c <__d2b>:
 801983c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019840:	4689      	mov	r9, r1
 8019842:	2101      	movs	r1, #1
 8019844:	ec57 6b10 	vmov	r6, r7, d0
 8019848:	4690      	mov	r8, r2
 801984a:	f7ff fc0f 	bl	801906c <_Balloc>
 801984e:	4604      	mov	r4, r0
 8019850:	b930      	cbnz	r0, 8019860 <__d2b+0x24>
 8019852:	4602      	mov	r2, r0
 8019854:	4b25      	ldr	r3, [pc, #148]	; (80198ec <__d2b+0xb0>)
 8019856:	4826      	ldr	r0, [pc, #152]	; (80198f0 <__d2b+0xb4>)
 8019858:	f240 310a 	movw	r1, #778	; 0x30a
 801985c:	f000 fa54 	bl	8019d08 <__assert_func>
 8019860:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019864:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019868:	bb35      	cbnz	r5, 80198b8 <__d2b+0x7c>
 801986a:	2e00      	cmp	r6, #0
 801986c:	9301      	str	r3, [sp, #4]
 801986e:	d028      	beq.n	80198c2 <__d2b+0x86>
 8019870:	4668      	mov	r0, sp
 8019872:	9600      	str	r6, [sp, #0]
 8019874:	f7ff fd10 	bl	8019298 <__lo0bits>
 8019878:	9900      	ldr	r1, [sp, #0]
 801987a:	b300      	cbz	r0, 80198be <__d2b+0x82>
 801987c:	9a01      	ldr	r2, [sp, #4]
 801987e:	f1c0 0320 	rsb	r3, r0, #32
 8019882:	fa02 f303 	lsl.w	r3, r2, r3
 8019886:	430b      	orrs	r3, r1
 8019888:	40c2      	lsrs	r2, r0
 801988a:	6163      	str	r3, [r4, #20]
 801988c:	9201      	str	r2, [sp, #4]
 801988e:	9b01      	ldr	r3, [sp, #4]
 8019890:	61a3      	str	r3, [r4, #24]
 8019892:	2b00      	cmp	r3, #0
 8019894:	bf14      	ite	ne
 8019896:	2202      	movne	r2, #2
 8019898:	2201      	moveq	r2, #1
 801989a:	6122      	str	r2, [r4, #16]
 801989c:	b1d5      	cbz	r5, 80198d4 <__d2b+0x98>
 801989e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80198a2:	4405      	add	r5, r0
 80198a4:	f8c9 5000 	str.w	r5, [r9]
 80198a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80198ac:	f8c8 0000 	str.w	r0, [r8]
 80198b0:	4620      	mov	r0, r4
 80198b2:	b003      	add	sp, #12
 80198b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80198b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80198bc:	e7d5      	b.n	801986a <__d2b+0x2e>
 80198be:	6161      	str	r1, [r4, #20]
 80198c0:	e7e5      	b.n	801988e <__d2b+0x52>
 80198c2:	a801      	add	r0, sp, #4
 80198c4:	f7ff fce8 	bl	8019298 <__lo0bits>
 80198c8:	9b01      	ldr	r3, [sp, #4]
 80198ca:	6163      	str	r3, [r4, #20]
 80198cc:	2201      	movs	r2, #1
 80198ce:	6122      	str	r2, [r4, #16]
 80198d0:	3020      	adds	r0, #32
 80198d2:	e7e3      	b.n	801989c <__d2b+0x60>
 80198d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80198d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80198dc:	f8c9 0000 	str.w	r0, [r9]
 80198e0:	6918      	ldr	r0, [r3, #16]
 80198e2:	f7ff fcb9 	bl	8019258 <__hi0bits>
 80198e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80198ea:	e7df      	b.n	80198ac <__d2b+0x70>
 80198ec:	0801c724 	.word	0x0801c724
 80198f0:	0801c7b4 	.word	0x0801c7b4

080198f4 <__ratio>:
 80198f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198f8:	4688      	mov	r8, r1
 80198fa:	4669      	mov	r1, sp
 80198fc:	4681      	mov	r9, r0
 80198fe:	f7ff ff4d 	bl	801979c <__b2d>
 8019902:	a901      	add	r1, sp, #4
 8019904:	4640      	mov	r0, r8
 8019906:	ec55 4b10 	vmov	r4, r5, d0
 801990a:	f7ff ff47 	bl	801979c <__b2d>
 801990e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019912:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019916:	eba3 0c02 	sub.w	ip, r3, r2
 801991a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801991e:	1a9b      	subs	r3, r3, r2
 8019920:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019924:	ec51 0b10 	vmov	r0, r1, d0
 8019928:	2b00      	cmp	r3, #0
 801992a:	bfd6      	itet	le
 801992c:	460a      	movle	r2, r1
 801992e:	462a      	movgt	r2, r5
 8019930:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019934:	468b      	mov	fp, r1
 8019936:	462f      	mov	r7, r5
 8019938:	bfd4      	ite	le
 801993a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801993e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8019942:	4620      	mov	r0, r4
 8019944:	ee10 2a10 	vmov	r2, s0
 8019948:	465b      	mov	r3, fp
 801994a:	4639      	mov	r1, r7
 801994c:	f7e6 ff7e 	bl	800084c <__aeabi_ddiv>
 8019950:	ec41 0b10 	vmov	d0, r0, r1
 8019954:	b003      	add	sp, #12
 8019956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801995a <__copybits>:
 801995a:	3901      	subs	r1, #1
 801995c:	b570      	push	{r4, r5, r6, lr}
 801995e:	1149      	asrs	r1, r1, #5
 8019960:	6914      	ldr	r4, [r2, #16]
 8019962:	3101      	adds	r1, #1
 8019964:	f102 0314 	add.w	r3, r2, #20
 8019968:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801996c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019970:	1f05      	subs	r5, r0, #4
 8019972:	42a3      	cmp	r3, r4
 8019974:	d30c      	bcc.n	8019990 <__copybits+0x36>
 8019976:	1aa3      	subs	r3, r4, r2
 8019978:	3b11      	subs	r3, #17
 801997a:	f023 0303 	bic.w	r3, r3, #3
 801997e:	3211      	adds	r2, #17
 8019980:	42a2      	cmp	r2, r4
 8019982:	bf88      	it	hi
 8019984:	2300      	movhi	r3, #0
 8019986:	4418      	add	r0, r3
 8019988:	2300      	movs	r3, #0
 801998a:	4288      	cmp	r0, r1
 801998c:	d305      	bcc.n	801999a <__copybits+0x40>
 801998e:	bd70      	pop	{r4, r5, r6, pc}
 8019990:	f853 6b04 	ldr.w	r6, [r3], #4
 8019994:	f845 6f04 	str.w	r6, [r5, #4]!
 8019998:	e7eb      	b.n	8019972 <__copybits+0x18>
 801999a:	f840 3b04 	str.w	r3, [r0], #4
 801999e:	e7f4      	b.n	801998a <__copybits+0x30>

080199a0 <__any_on>:
 80199a0:	f100 0214 	add.w	r2, r0, #20
 80199a4:	6900      	ldr	r0, [r0, #16]
 80199a6:	114b      	asrs	r3, r1, #5
 80199a8:	4298      	cmp	r0, r3
 80199aa:	b510      	push	{r4, lr}
 80199ac:	db11      	blt.n	80199d2 <__any_on+0x32>
 80199ae:	dd0a      	ble.n	80199c6 <__any_on+0x26>
 80199b0:	f011 011f 	ands.w	r1, r1, #31
 80199b4:	d007      	beq.n	80199c6 <__any_on+0x26>
 80199b6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80199ba:	fa24 f001 	lsr.w	r0, r4, r1
 80199be:	fa00 f101 	lsl.w	r1, r0, r1
 80199c2:	428c      	cmp	r4, r1
 80199c4:	d10b      	bne.n	80199de <__any_on+0x3e>
 80199c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80199ca:	4293      	cmp	r3, r2
 80199cc:	d803      	bhi.n	80199d6 <__any_on+0x36>
 80199ce:	2000      	movs	r0, #0
 80199d0:	bd10      	pop	{r4, pc}
 80199d2:	4603      	mov	r3, r0
 80199d4:	e7f7      	b.n	80199c6 <__any_on+0x26>
 80199d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80199da:	2900      	cmp	r1, #0
 80199dc:	d0f5      	beq.n	80199ca <__any_on+0x2a>
 80199de:	2001      	movs	r0, #1
 80199e0:	e7f6      	b.n	80199d0 <__any_on+0x30>

080199e2 <_calloc_r>:
 80199e2:	b513      	push	{r0, r1, r4, lr}
 80199e4:	434a      	muls	r2, r1
 80199e6:	4611      	mov	r1, r2
 80199e8:	9201      	str	r2, [sp, #4]
 80199ea:	f7fc fb41 	bl	8016070 <_malloc_r>
 80199ee:	4604      	mov	r4, r0
 80199f0:	b118      	cbz	r0, 80199fa <_calloc_r+0x18>
 80199f2:	9a01      	ldr	r2, [sp, #4]
 80199f4:	2100      	movs	r1, #0
 80199f6:	f7fc fae3 	bl	8015fc0 <memset>
 80199fa:	4620      	mov	r0, r4
 80199fc:	b002      	add	sp, #8
 80199fe:	bd10      	pop	{r4, pc}

08019a00 <__ssputs_r>:
 8019a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a04:	688e      	ldr	r6, [r1, #8]
 8019a06:	429e      	cmp	r6, r3
 8019a08:	4682      	mov	sl, r0
 8019a0a:	460c      	mov	r4, r1
 8019a0c:	4690      	mov	r8, r2
 8019a0e:	461f      	mov	r7, r3
 8019a10:	d838      	bhi.n	8019a84 <__ssputs_r+0x84>
 8019a12:	898a      	ldrh	r2, [r1, #12]
 8019a14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019a18:	d032      	beq.n	8019a80 <__ssputs_r+0x80>
 8019a1a:	6825      	ldr	r5, [r4, #0]
 8019a1c:	6909      	ldr	r1, [r1, #16]
 8019a1e:	eba5 0901 	sub.w	r9, r5, r1
 8019a22:	6965      	ldr	r5, [r4, #20]
 8019a24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019a28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019a2c:	3301      	adds	r3, #1
 8019a2e:	444b      	add	r3, r9
 8019a30:	106d      	asrs	r5, r5, #1
 8019a32:	429d      	cmp	r5, r3
 8019a34:	bf38      	it	cc
 8019a36:	461d      	movcc	r5, r3
 8019a38:	0553      	lsls	r3, r2, #21
 8019a3a:	d531      	bpl.n	8019aa0 <__ssputs_r+0xa0>
 8019a3c:	4629      	mov	r1, r5
 8019a3e:	f7fc fb17 	bl	8016070 <_malloc_r>
 8019a42:	4606      	mov	r6, r0
 8019a44:	b950      	cbnz	r0, 8019a5c <__ssputs_r+0x5c>
 8019a46:	230c      	movs	r3, #12
 8019a48:	f8ca 3000 	str.w	r3, [sl]
 8019a4c:	89a3      	ldrh	r3, [r4, #12]
 8019a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a52:	81a3      	strh	r3, [r4, #12]
 8019a54:	f04f 30ff 	mov.w	r0, #4294967295
 8019a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a5c:	6921      	ldr	r1, [r4, #16]
 8019a5e:	464a      	mov	r2, r9
 8019a60:	f7fc fa86 	bl	8015f70 <memcpy>
 8019a64:	89a3      	ldrh	r3, [r4, #12]
 8019a66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a6e:	81a3      	strh	r3, [r4, #12]
 8019a70:	6126      	str	r6, [r4, #16]
 8019a72:	6165      	str	r5, [r4, #20]
 8019a74:	444e      	add	r6, r9
 8019a76:	eba5 0509 	sub.w	r5, r5, r9
 8019a7a:	6026      	str	r6, [r4, #0]
 8019a7c:	60a5      	str	r5, [r4, #8]
 8019a7e:	463e      	mov	r6, r7
 8019a80:	42be      	cmp	r6, r7
 8019a82:	d900      	bls.n	8019a86 <__ssputs_r+0x86>
 8019a84:	463e      	mov	r6, r7
 8019a86:	4632      	mov	r2, r6
 8019a88:	6820      	ldr	r0, [r4, #0]
 8019a8a:	4641      	mov	r1, r8
 8019a8c:	f7fc fa7e 	bl	8015f8c <memmove>
 8019a90:	68a3      	ldr	r3, [r4, #8]
 8019a92:	6822      	ldr	r2, [r4, #0]
 8019a94:	1b9b      	subs	r3, r3, r6
 8019a96:	4432      	add	r2, r6
 8019a98:	60a3      	str	r3, [r4, #8]
 8019a9a:	6022      	str	r2, [r4, #0]
 8019a9c:	2000      	movs	r0, #0
 8019a9e:	e7db      	b.n	8019a58 <__ssputs_r+0x58>
 8019aa0:	462a      	mov	r2, r5
 8019aa2:	f000 f964 	bl	8019d6e <_realloc_r>
 8019aa6:	4606      	mov	r6, r0
 8019aa8:	2800      	cmp	r0, #0
 8019aaa:	d1e1      	bne.n	8019a70 <__ssputs_r+0x70>
 8019aac:	6921      	ldr	r1, [r4, #16]
 8019aae:	4650      	mov	r0, sl
 8019ab0:	f7fc fa8e 	bl	8015fd0 <_free_r>
 8019ab4:	e7c7      	b.n	8019a46 <__ssputs_r+0x46>
	...

08019ab8 <_svfiprintf_r>:
 8019ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019abc:	4698      	mov	r8, r3
 8019abe:	898b      	ldrh	r3, [r1, #12]
 8019ac0:	061b      	lsls	r3, r3, #24
 8019ac2:	b09d      	sub	sp, #116	; 0x74
 8019ac4:	4607      	mov	r7, r0
 8019ac6:	460d      	mov	r5, r1
 8019ac8:	4614      	mov	r4, r2
 8019aca:	d50e      	bpl.n	8019aea <_svfiprintf_r+0x32>
 8019acc:	690b      	ldr	r3, [r1, #16]
 8019ace:	b963      	cbnz	r3, 8019aea <_svfiprintf_r+0x32>
 8019ad0:	2140      	movs	r1, #64	; 0x40
 8019ad2:	f7fc facd 	bl	8016070 <_malloc_r>
 8019ad6:	6028      	str	r0, [r5, #0]
 8019ad8:	6128      	str	r0, [r5, #16]
 8019ada:	b920      	cbnz	r0, 8019ae6 <_svfiprintf_r+0x2e>
 8019adc:	230c      	movs	r3, #12
 8019ade:	603b      	str	r3, [r7, #0]
 8019ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8019ae4:	e0d1      	b.n	8019c8a <_svfiprintf_r+0x1d2>
 8019ae6:	2340      	movs	r3, #64	; 0x40
 8019ae8:	616b      	str	r3, [r5, #20]
 8019aea:	2300      	movs	r3, #0
 8019aec:	9309      	str	r3, [sp, #36]	; 0x24
 8019aee:	2320      	movs	r3, #32
 8019af0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019af4:	f8cd 800c 	str.w	r8, [sp, #12]
 8019af8:	2330      	movs	r3, #48	; 0x30
 8019afa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019ca4 <_svfiprintf_r+0x1ec>
 8019afe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019b02:	f04f 0901 	mov.w	r9, #1
 8019b06:	4623      	mov	r3, r4
 8019b08:	469a      	mov	sl, r3
 8019b0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019b0e:	b10a      	cbz	r2, 8019b14 <_svfiprintf_r+0x5c>
 8019b10:	2a25      	cmp	r2, #37	; 0x25
 8019b12:	d1f9      	bne.n	8019b08 <_svfiprintf_r+0x50>
 8019b14:	ebba 0b04 	subs.w	fp, sl, r4
 8019b18:	d00b      	beq.n	8019b32 <_svfiprintf_r+0x7a>
 8019b1a:	465b      	mov	r3, fp
 8019b1c:	4622      	mov	r2, r4
 8019b1e:	4629      	mov	r1, r5
 8019b20:	4638      	mov	r0, r7
 8019b22:	f7ff ff6d 	bl	8019a00 <__ssputs_r>
 8019b26:	3001      	adds	r0, #1
 8019b28:	f000 80aa 	beq.w	8019c80 <_svfiprintf_r+0x1c8>
 8019b2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019b2e:	445a      	add	r2, fp
 8019b30:	9209      	str	r2, [sp, #36]	; 0x24
 8019b32:	f89a 3000 	ldrb.w	r3, [sl]
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	f000 80a2 	beq.w	8019c80 <_svfiprintf_r+0x1c8>
 8019b3c:	2300      	movs	r3, #0
 8019b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8019b42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019b46:	f10a 0a01 	add.w	sl, sl, #1
 8019b4a:	9304      	str	r3, [sp, #16]
 8019b4c:	9307      	str	r3, [sp, #28]
 8019b4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019b52:	931a      	str	r3, [sp, #104]	; 0x68
 8019b54:	4654      	mov	r4, sl
 8019b56:	2205      	movs	r2, #5
 8019b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b5c:	4851      	ldr	r0, [pc, #324]	; (8019ca4 <_svfiprintf_r+0x1ec>)
 8019b5e:	f7e6 fb3f 	bl	80001e0 <memchr>
 8019b62:	9a04      	ldr	r2, [sp, #16]
 8019b64:	b9d8      	cbnz	r0, 8019b9e <_svfiprintf_r+0xe6>
 8019b66:	06d0      	lsls	r0, r2, #27
 8019b68:	bf44      	itt	mi
 8019b6a:	2320      	movmi	r3, #32
 8019b6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019b70:	0711      	lsls	r1, r2, #28
 8019b72:	bf44      	itt	mi
 8019b74:	232b      	movmi	r3, #43	; 0x2b
 8019b76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8019b7e:	2b2a      	cmp	r3, #42	; 0x2a
 8019b80:	d015      	beq.n	8019bae <_svfiprintf_r+0xf6>
 8019b82:	9a07      	ldr	r2, [sp, #28]
 8019b84:	4654      	mov	r4, sl
 8019b86:	2000      	movs	r0, #0
 8019b88:	f04f 0c0a 	mov.w	ip, #10
 8019b8c:	4621      	mov	r1, r4
 8019b8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019b92:	3b30      	subs	r3, #48	; 0x30
 8019b94:	2b09      	cmp	r3, #9
 8019b96:	d94e      	bls.n	8019c36 <_svfiprintf_r+0x17e>
 8019b98:	b1b0      	cbz	r0, 8019bc8 <_svfiprintf_r+0x110>
 8019b9a:	9207      	str	r2, [sp, #28]
 8019b9c:	e014      	b.n	8019bc8 <_svfiprintf_r+0x110>
 8019b9e:	eba0 0308 	sub.w	r3, r0, r8
 8019ba2:	fa09 f303 	lsl.w	r3, r9, r3
 8019ba6:	4313      	orrs	r3, r2
 8019ba8:	9304      	str	r3, [sp, #16]
 8019baa:	46a2      	mov	sl, r4
 8019bac:	e7d2      	b.n	8019b54 <_svfiprintf_r+0x9c>
 8019bae:	9b03      	ldr	r3, [sp, #12]
 8019bb0:	1d19      	adds	r1, r3, #4
 8019bb2:	681b      	ldr	r3, [r3, #0]
 8019bb4:	9103      	str	r1, [sp, #12]
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	bfbb      	ittet	lt
 8019bba:	425b      	neglt	r3, r3
 8019bbc:	f042 0202 	orrlt.w	r2, r2, #2
 8019bc0:	9307      	strge	r3, [sp, #28]
 8019bc2:	9307      	strlt	r3, [sp, #28]
 8019bc4:	bfb8      	it	lt
 8019bc6:	9204      	strlt	r2, [sp, #16]
 8019bc8:	7823      	ldrb	r3, [r4, #0]
 8019bca:	2b2e      	cmp	r3, #46	; 0x2e
 8019bcc:	d10c      	bne.n	8019be8 <_svfiprintf_r+0x130>
 8019bce:	7863      	ldrb	r3, [r4, #1]
 8019bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8019bd2:	d135      	bne.n	8019c40 <_svfiprintf_r+0x188>
 8019bd4:	9b03      	ldr	r3, [sp, #12]
 8019bd6:	1d1a      	adds	r2, r3, #4
 8019bd8:	681b      	ldr	r3, [r3, #0]
 8019bda:	9203      	str	r2, [sp, #12]
 8019bdc:	2b00      	cmp	r3, #0
 8019bde:	bfb8      	it	lt
 8019be0:	f04f 33ff 	movlt.w	r3, #4294967295
 8019be4:	3402      	adds	r4, #2
 8019be6:	9305      	str	r3, [sp, #20]
 8019be8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019cb4 <_svfiprintf_r+0x1fc>
 8019bec:	7821      	ldrb	r1, [r4, #0]
 8019bee:	2203      	movs	r2, #3
 8019bf0:	4650      	mov	r0, sl
 8019bf2:	f7e6 faf5 	bl	80001e0 <memchr>
 8019bf6:	b140      	cbz	r0, 8019c0a <_svfiprintf_r+0x152>
 8019bf8:	2340      	movs	r3, #64	; 0x40
 8019bfa:	eba0 000a 	sub.w	r0, r0, sl
 8019bfe:	fa03 f000 	lsl.w	r0, r3, r0
 8019c02:	9b04      	ldr	r3, [sp, #16]
 8019c04:	4303      	orrs	r3, r0
 8019c06:	3401      	adds	r4, #1
 8019c08:	9304      	str	r3, [sp, #16]
 8019c0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c0e:	4826      	ldr	r0, [pc, #152]	; (8019ca8 <_svfiprintf_r+0x1f0>)
 8019c10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019c14:	2206      	movs	r2, #6
 8019c16:	f7e6 fae3 	bl	80001e0 <memchr>
 8019c1a:	2800      	cmp	r0, #0
 8019c1c:	d038      	beq.n	8019c90 <_svfiprintf_r+0x1d8>
 8019c1e:	4b23      	ldr	r3, [pc, #140]	; (8019cac <_svfiprintf_r+0x1f4>)
 8019c20:	bb1b      	cbnz	r3, 8019c6a <_svfiprintf_r+0x1b2>
 8019c22:	9b03      	ldr	r3, [sp, #12]
 8019c24:	3307      	adds	r3, #7
 8019c26:	f023 0307 	bic.w	r3, r3, #7
 8019c2a:	3308      	adds	r3, #8
 8019c2c:	9303      	str	r3, [sp, #12]
 8019c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c30:	4433      	add	r3, r6
 8019c32:	9309      	str	r3, [sp, #36]	; 0x24
 8019c34:	e767      	b.n	8019b06 <_svfiprintf_r+0x4e>
 8019c36:	fb0c 3202 	mla	r2, ip, r2, r3
 8019c3a:	460c      	mov	r4, r1
 8019c3c:	2001      	movs	r0, #1
 8019c3e:	e7a5      	b.n	8019b8c <_svfiprintf_r+0xd4>
 8019c40:	2300      	movs	r3, #0
 8019c42:	3401      	adds	r4, #1
 8019c44:	9305      	str	r3, [sp, #20]
 8019c46:	4619      	mov	r1, r3
 8019c48:	f04f 0c0a 	mov.w	ip, #10
 8019c4c:	4620      	mov	r0, r4
 8019c4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019c52:	3a30      	subs	r2, #48	; 0x30
 8019c54:	2a09      	cmp	r2, #9
 8019c56:	d903      	bls.n	8019c60 <_svfiprintf_r+0x1a8>
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d0c5      	beq.n	8019be8 <_svfiprintf_r+0x130>
 8019c5c:	9105      	str	r1, [sp, #20]
 8019c5e:	e7c3      	b.n	8019be8 <_svfiprintf_r+0x130>
 8019c60:	fb0c 2101 	mla	r1, ip, r1, r2
 8019c64:	4604      	mov	r4, r0
 8019c66:	2301      	movs	r3, #1
 8019c68:	e7f0      	b.n	8019c4c <_svfiprintf_r+0x194>
 8019c6a:	ab03      	add	r3, sp, #12
 8019c6c:	9300      	str	r3, [sp, #0]
 8019c6e:	462a      	mov	r2, r5
 8019c70:	4b0f      	ldr	r3, [pc, #60]	; (8019cb0 <_svfiprintf_r+0x1f8>)
 8019c72:	a904      	add	r1, sp, #16
 8019c74:	4638      	mov	r0, r7
 8019c76:	f7fc faf5 	bl	8016264 <_printf_float>
 8019c7a:	1c42      	adds	r2, r0, #1
 8019c7c:	4606      	mov	r6, r0
 8019c7e:	d1d6      	bne.n	8019c2e <_svfiprintf_r+0x176>
 8019c80:	89ab      	ldrh	r3, [r5, #12]
 8019c82:	065b      	lsls	r3, r3, #25
 8019c84:	f53f af2c 	bmi.w	8019ae0 <_svfiprintf_r+0x28>
 8019c88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019c8a:	b01d      	add	sp, #116	; 0x74
 8019c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c90:	ab03      	add	r3, sp, #12
 8019c92:	9300      	str	r3, [sp, #0]
 8019c94:	462a      	mov	r2, r5
 8019c96:	4b06      	ldr	r3, [pc, #24]	; (8019cb0 <_svfiprintf_r+0x1f8>)
 8019c98:	a904      	add	r1, sp, #16
 8019c9a:	4638      	mov	r0, r7
 8019c9c:	f7fc fd86 	bl	80167ac <_printf_i>
 8019ca0:	e7eb      	b.n	8019c7a <_svfiprintf_r+0x1c2>
 8019ca2:	bf00      	nop
 8019ca4:	0801c914 	.word	0x0801c914
 8019ca8:	0801c91e 	.word	0x0801c91e
 8019cac:	08016265 	.word	0x08016265
 8019cb0:	08019a01 	.word	0x08019a01
 8019cb4:	0801c91a 	.word	0x0801c91a

08019cb8 <nan>:
 8019cb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019cc0 <nan+0x8>
 8019cbc:	4770      	bx	lr
 8019cbe:	bf00      	nop
 8019cc0:	00000000 	.word	0x00000000
 8019cc4:	7ff80000 	.word	0x7ff80000

08019cc8 <strncmp>:
 8019cc8:	b510      	push	{r4, lr}
 8019cca:	b16a      	cbz	r2, 8019ce8 <strncmp+0x20>
 8019ccc:	3901      	subs	r1, #1
 8019cce:	1884      	adds	r4, r0, r2
 8019cd0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019cd4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019cd8:	4293      	cmp	r3, r2
 8019cda:	d103      	bne.n	8019ce4 <strncmp+0x1c>
 8019cdc:	42a0      	cmp	r0, r4
 8019cde:	d001      	beq.n	8019ce4 <strncmp+0x1c>
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	d1f5      	bne.n	8019cd0 <strncmp+0x8>
 8019ce4:	1a98      	subs	r0, r3, r2
 8019ce6:	bd10      	pop	{r4, pc}
 8019ce8:	4610      	mov	r0, r2
 8019cea:	e7fc      	b.n	8019ce6 <strncmp+0x1e>

08019cec <__ascii_wctomb>:
 8019cec:	b149      	cbz	r1, 8019d02 <__ascii_wctomb+0x16>
 8019cee:	2aff      	cmp	r2, #255	; 0xff
 8019cf0:	bf85      	ittet	hi
 8019cf2:	238a      	movhi	r3, #138	; 0x8a
 8019cf4:	6003      	strhi	r3, [r0, #0]
 8019cf6:	700a      	strbls	r2, [r1, #0]
 8019cf8:	f04f 30ff 	movhi.w	r0, #4294967295
 8019cfc:	bf98      	it	ls
 8019cfe:	2001      	movls	r0, #1
 8019d00:	4770      	bx	lr
 8019d02:	4608      	mov	r0, r1
 8019d04:	4770      	bx	lr
	...

08019d08 <__assert_func>:
 8019d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019d0a:	4614      	mov	r4, r2
 8019d0c:	461a      	mov	r2, r3
 8019d0e:	4b09      	ldr	r3, [pc, #36]	; (8019d34 <__assert_func+0x2c>)
 8019d10:	681b      	ldr	r3, [r3, #0]
 8019d12:	4605      	mov	r5, r0
 8019d14:	68d8      	ldr	r0, [r3, #12]
 8019d16:	b14c      	cbz	r4, 8019d2c <__assert_func+0x24>
 8019d18:	4b07      	ldr	r3, [pc, #28]	; (8019d38 <__assert_func+0x30>)
 8019d1a:	9100      	str	r1, [sp, #0]
 8019d1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019d20:	4906      	ldr	r1, [pc, #24]	; (8019d3c <__assert_func+0x34>)
 8019d22:	462b      	mov	r3, r5
 8019d24:	f000 f80e 	bl	8019d44 <fiprintf>
 8019d28:	f000 fa60 	bl	801a1ec <abort>
 8019d2c:	4b04      	ldr	r3, [pc, #16]	; (8019d40 <__assert_func+0x38>)
 8019d2e:	461c      	mov	r4, r3
 8019d30:	e7f3      	b.n	8019d1a <__assert_func+0x12>
 8019d32:	bf00      	nop
 8019d34:	20004210 	.word	0x20004210
 8019d38:	0801c925 	.word	0x0801c925
 8019d3c:	0801c932 	.word	0x0801c932
 8019d40:	0801c960 	.word	0x0801c960

08019d44 <fiprintf>:
 8019d44:	b40e      	push	{r1, r2, r3}
 8019d46:	b503      	push	{r0, r1, lr}
 8019d48:	4601      	mov	r1, r0
 8019d4a:	ab03      	add	r3, sp, #12
 8019d4c:	4805      	ldr	r0, [pc, #20]	; (8019d64 <fiprintf+0x20>)
 8019d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019d52:	6800      	ldr	r0, [r0, #0]
 8019d54:	9301      	str	r3, [sp, #4]
 8019d56:	f000 f859 	bl	8019e0c <_vfiprintf_r>
 8019d5a:	b002      	add	sp, #8
 8019d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019d60:	b003      	add	sp, #12
 8019d62:	4770      	bx	lr
 8019d64:	20004210 	.word	0x20004210

08019d68 <__retarget_lock_init_recursive>:
 8019d68:	4770      	bx	lr

08019d6a <__retarget_lock_acquire_recursive>:
 8019d6a:	4770      	bx	lr

08019d6c <__retarget_lock_release_recursive>:
 8019d6c:	4770      	bx	lr

08019d6e <_realloc_r>:
 8019d6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d70:	4607      	mov	r7, r0
 8019d72:	4614      	mov	r4, r2
 8019d74:	460e      	mov	r6, r1
 8019d76:	b921      	cbnz	r1, 8019d82 <_realloc_r+0x14>
 8019d78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019d7c:	4611      	mov	r1, r2
 8019d7e:	f7fc b977 	b.w	8016070 <_malloc_r>
 8019d82:	b922      	cbnz	r2, 8019d8e <_realloc_r+0x20>
 8019d84:	f7fc f924 	bl	8015fd0 <_free_r>
 8019d88:	4625      	mov	r5, r4
 8019d8a:	4628      	mov	r0, r5
 8019d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d8e:	f000 fc51 	bl	801a634 <_malloc_usable_size_r>
 8019d92:	42a0      	cmp	r0, r4
 8019d94:	d20f      	bcs.n	8019db6 <_realloc_r+0x48>
 8019d96:	4621      	mov	r1, r4
 8019d98:	4638      	mov	r0, r7
 8019d9a:	f7fc f969 	bl	8016070 <_malloc_r>
 8019d9e:	4605      	mov	r5, r0
 8019da0:	2800      	cmp	r0, #0
 8019da2:	d0f2      	beq.n	8019d8a <_realloc_r+0x1c>
 8019da4:	4631      	mov	r1, r6
 8019da6:	4622      	mov	r2, r4
 8019da8:	f7fc f8e2 	bl	8015f70 <memcpy>
 8019dac:	4631      	mov	r1, r6
 8019dae:	4638      	mov	r0, r7
 8019db0:	f7fc f90e 	bl	8015fd0 <_free_r>
 8019db4:	e7e9      	b.n	8019d8a <_realloc_r+0x1c>
 8019db6:	4635      	mov	r5, r6
 8019db8:	e7e7      	b.n	8019d8a <_realloc_r+0x1c>

08019dba <__sfputc_r>:
 8019dba:	6893      	ldr	r3, [r2, #8]
 8019dbc:	3b01      	subs	r3, #1
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	b410      	push	{r4}
 8019dc2:	6093      	str	r3, [r2, #8]
 8019dc4:	da08      	bge.n	8019dd8 <__sfputc_r+0x1e>
 8019dc6:	6994      	ldr	r4, [r2, #24]
 8019dc8:	42a3      	cmp	r3, r4
 8019dca:	db01      	blt.n	8019dd0 <__sfputc_r+0x16>
 8019dcc:	290a      	cmp	r1, #10
 8019dce:	d103      	bne.n	8019dd8 <__sfputc_r+0x1e>
 8019dd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019dd4:	f000 b94a 	b.w	801a06c <__swbuf_r>
 8019dd8:	6813      	ldr	r3, [r2, #0]
 8019dda:	1c58      	adds	r0, r3, #1
 8019ddc:	6010      	str	r0, [r2, #0]
 8019dde:	7019      	strb	r1, [r3, #0]
 8019de0:	4608      	mov	r0, r1
 8019de2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019de6:	4770      	bx	lr

08019de8 <__sfputs_r>:
 8019de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019dea:	4606      	mov	r6, r0
 8019dec:	460f      	mov	r7, r1
 8019dee:	4614      	mov	r4, r2
 8019df0:	18d5      	adds	r5, r2, r3
 8019df2:	42ac      	cmp	r4, r5
 8019df4:	d101      	bne.n	8019dfa <__sfputs_r+0x12>
 8019df6:	2000      	movs	r0, #0
 8019df8:	e007      	b.n	8019e0a <__sfputs_r+0x22>
 8019dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019dfe:	463a      	mov	r2, r7
 8019e00:	4630      	mov	r0, r6
 8019e02:	f7ff ffda 	bl	8019dba <__sfputc_r>
 8019e06:	1c43      	adds	r3, r0, #1
 8019e08:	d1f3      	bne.n	8019df2 <__sfputs_r+0xa>
 8019e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019e0c <_vfiprintf_r>:
 8019e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e10:	460d      	mov	r5, r1
 8019e12:	b09d      	sub	sp, #116	; 0x74
 8019e14:	4614      	mov	r4, r2
 8019e16:	4698      	mov	r8, r3
 8019e18:	4606      	mov	r6, r0
 8019e1a:	b118      	cbz	r0, 8019e24 <_vfiprintf_r+0x18>
 8019e1c:	6983      	ldr	r3, [r0, #24]
 8019e1e:	b90b      	cbnz	r3, 8019e24 <_vfiprintf_r+0x18>
 8019e20:	f000 fb06 	bl	801a430 <__sinit>
 8019e24:	4b89      	ldr	r3, [pc, #548]	; (801a04c <_vfiprintf_r+0x240>)
 8019e26:	429d      	cmp	r5, r3
 8019e28:	d11b      	bne.n	8019e62 <_vfiprintf_r+0x56>
 8019e2a:	6875      	ldr	r5, [r6, #4]
 8019e2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019e2e:	07d9      	lsls	r1, r3, #31
 8019e30:	d405      	bmi.n	8019e3e <_vfiprintf_r+0x32>
 8019e32:	89ab      	ldrh	r3, [r5, #12]
 8019e34:	059a      	lsls	r2, r3, #22
 8019e36:	d402      	bmi.n	8019e3e <_vfiprintf_r+0x32>
 8019e38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019e3a:	f7ff ff96 	bl	8019d6a <__retarget_lock_acquire_recursive>
 8019e3e:	89ab      	ldrh	r3, [r5, #12]
 8019e40:	071b      	lsls	r3, r3, #28
 8019e42:	d501      	bpl.n	8019e48 <_vfiprintf_r+0x3c>
 8019e44:	692b      	ldr	r3, [r5, #16]
 8019e46:	b9eb      	cbnz	r3, 8019e84 <_vfiprintf_r+0x78>
 8019e48:	4629      	mov	r1, r5
 8019e4a:	4630      	mov	r0, r6
 8019e4c:	f000 f960 	bl	801a110 <__swsetup_r>
 8019e50:	b1c0      	cbz	r0, 8019e84 <_vfiprintf_r+0x78>
 8019e52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019e54:	07dc      	lsls	r4, r3, #31
 8019e56:	d50e      	bpl.n	8019e76 <_vfiprintf_r+0x6a>
 8019e58:	f04f 30ff 	mov.w	r0, #4294967295
 8019e5c:	b01d      	add	sp, #116	; 0x74
 8019e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e62:	4b7b      	ldr	r3, [pc, #492]	; (801a050 <_vfiprintf_r+0x244>)
 8019e64:	429d      	cmp	r5, r3
 8019e66:	d101      	bne.n	8019e6c <_vfiprintf_r+0x60>
 8019e68:	68b5      	ldr	r5, [r6, #8]
 8019e6a:	e7df      	b.n	8019e2c <_vfiprintf_r+0x20>
 8019e6c:	4b79      	ldr	r3, [pc, #484]	; (801a054 <_vfiprintf_r+0x248>)
 8019e6e:	429d      	cmp	r5, r3
 8019e70:	bf08      	it	eq
 8019e72:	68f5      	ldreq	r5, [r6, #12]
 8019e74:	e7da      	b.n	8019e2c <_vfiprintf_r+0x20>
 8019e76:	89ab      	ldrh	r3, [r5, #12]
 8019e78:	0598      	lsls	r0, r3, #22
 8019e7a:	d4ed      	bmi.n	8019e58 <_vfiprintf_r+0x4c>
 8019e7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019e7e:	f7ff ff75 	bl	8019d6c <__retarget_lock_release_recursive>
 8019e82:	e7e9      	b.n	8019e58 <_vfiprintf_r+0x4c>
 8019e84:	2300      	movs	r3, #0
 8019e86:	9309      	str	r3, [sp, #36]	; 0x24
 8019e88:	2320      	movs	r3, #32
 8019e8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019e8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019e92:	2330      	movs	r3, #48	; 0x30
 8019e94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a058 <_vfiprintf_r+0x24c>
 8019e98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019e9c:	f04f 0901 	mov.w	r9, #1
 8019ea0:	4623      	mov	r3, r4
 8019ea2:	469a      	mov	sl, r3
 8019ea4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019ea8:	b10a      	cbz	r2, 8019eae <_vfiprintf_r+0xa2>
 8019eaa:	2a25      	cmp	r2, #37	; 0x25
 8019eac:	d1f9      	bne.n	8019ea2 <_vfiprintf_r+0x96>
 8019eae:	ebba 0b04 	subs.w	fp, sl, r4
 8019eb2:	d00b      	beq.n	8019ecc <_vfiprintf_r+0xc0>
 8019eb4:	465b      	mov	r3, fp
 8019eb6:	4622      	mov	r2, r4
 8019eb8:	4629      	mov	r1, r5
 8019eba:	4630      	mov	r0, r6
 8019ebc:	f7ff ff94 	bl	8019de8 <__sfputs_r>
 8019ec0:	3001      	adds	r0, #1
 8019ec2:	f000 80aa 	beq.w	801a01a <_vfiprintf_r+0x20e>
 8019ec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019ec8:	445a      	add	r2, fp
 8019eca:	9209      	str	r2, [sp, #36]	; 0x24
 8019ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8019ed0:	2b00      	cmp	r3, #0
 8019ed2:	f000 80a2 	beq.w	801a01a <_vfiprintf_r+0x20e>
 8019ed6:	2300      	movs	r3, #0
 8019ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8019edc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019ee0:	f10a 0a01 	add.w	sl, sl, #1
 8019ee4:	9304      	str	r3, [sp, #16]
 8019ee6:	9307      	str	r3, [sp, #28]
 8019ee8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019eec:	931a      	str	r3, [sp, #104]	; 0x68
 8019eee:	4654      	mov	r4, sl
 8019ef0:	2205      	movs	r2, #5
 8019ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ef6:	4858      	ldr	r0, [pc, #352]	; (801a058 <_vfiprintf_r+0x24c>)
 8019ef8:	f7e6 f972 	bl	80001e0 <memchr>
 8019efc:	9a04      	ldr	r2, [sp, #16]
 8019efe:	b9d8      	cbnz	r0, 8019f38 <_vfiprintf_r+0x12c>
 8019f00:	06d1      	lsls	r1, r2, #27
 8019f02:	bf44      	itt	mi
 8019f04:	2320      	movmi	r3, #32
 8019f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019f0a:	0713      	lsls	r3, r2, #28
 8019f0c:	bf44      	itt	mi
 8019f0e:	232b      	movmi	r3, #43	; 0x2b
 8019f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019f14:	f89a 3000 	ldrb.w	r3, [sl]
 8019f18:	2b2a      	cmp	r3, #42	; 0x2a
 8019f1a:	d015      	beq.n	8019f48 <_vfiprintf_r+0x13c>
 8019f1c:	9a07      	ldr	r2, [sp, #28]
 8019f1e:	4654      	mov	r4, sl
 8019f20:	2000      	movs	r0, #0
 8019f22:	f04f 0c0a 	mov.w	ip, #10
 8019f26:	4621      	mov	r1, r4
 8019f28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019f2c:	3b30      	subs	r3, #48	; 0x30
 8019f2e:	2b09      	cmp	r3, #9
 8019f30:	d94e      	bls.n	8019fd0 <_vfiprintf_r+0x1c4>
 8019f32:	b1b0      	cbz	r0, 8019f62 <_vfiprintf_r+0x156>
 8019f34:	9207      	str	r2, [sp, #28]
 8019f36:	e014      	b.n	8019f62 <_vfiprintf_r+0x156>
 8019f38:	eba0 0308 	sub.w	r3, r0, r8
 8019f3c:	fa09 f303 	lsl.w	r3, r9, r3
 8019f40:	4313      	orrs	r3, r2
 8019f42:	9304      	str	r3, [sp, #16]
 8019f44:	46a2      	mov	sl, r4
 8019f46:	e7d2      	b.n	8019eee <_vfiprintf_r+0xe2>
 8019f48:	9b03      	ldr	r3, [sp, #12]
 8019f4a:	1d19      	adds	r1, r3, #4
 8019f4c:	681b      	ldr	r3, [r3, #0]
 8019f4e:	9103      	str	r1, [sp, #12]
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	bfbb      	ittet	lt
 8019f54:	425b      	neglt	r3, r3
 8019f56:	f042 0202 	orrlt.w	r2, r2, #2
 8019f5a:	9307      	strge	r3, [sp, #28]
 8019f5c:	9307      	strlt	r3, [sp, #28]
 8019f5e:	bfb8      	it	lt
 8019f60:	9204      	strlt	r2, [sp, #16]
 8019f62:	7823      	ldrb	r3, [r4, #0]
 8019f64:	2b2e      	cmp	r3, #46	; 0x2e
 8019f66:	d10c      	bne.n	8019f82 <_vfiprintf_r+0x176>
 8019f68:	7863      	ldrb	r3, [r4, #1]
 8019f6a:	2b2a      	cmp	r3, #42	; 0x2a
 8019f6c:	d135      	bne.n	8019fda <_vfiprintf_r+0x1ce>
 8019f6e:	9b03      	ldr	r3, [sp, #12]
 8019f70:	1d1a      	adds	r2, r3, #4
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	9203      	str	r2, [sp, #12]
 8019f76:	2b00      	cmp	r3, #0
 8019f78:	bfb8      	it	lt
 8019f7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8019f7e:	3402      	adds	r4, #2
 8019f80:	9305      	str	r3, [sp, #20]
 8019f82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a068 <_vfiprintf_r+0x25c>
 8019f86:	7821      	ldrb	r1, [r4, #0]
 8019f88:	2203      	movs	r2, #3
 8019f8a:	4650      	mov	r0, sl
 8019f8c:	f7e6 f928 	bl	80001e0 <memchr>
 8019f90:	b140      	cbz	r0, 8019fa4 <_vfiprintf_r+0x198>
 8019f92:	2340      	movs	r3, #64	; 0x40
 8019f94:	eba0 000a 	sub.w	r0, r0, sl
 8019f98:	fa03 f000 	lsl.w	r0, r3, r0
 8019f9c:	9b04      	ldr	r3, [sp, #16]
 8019f9e:	4303      	orrs	r3, r0
 8019fa0:	3401      	adds	r4, #1
 8019fa2:	9304      	str	r3, [sp, #16]
 8019fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019fa8:	482c      	ldr	r0, [pc, #176]	; (801a05c <_vfiprintf_r+0x250>)
 8019faa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019fae:	2206      	movs	r2, #6
 8019fb0:	f7e6 f916 	bl	80001e0 <memchr>
 8019fb4:	2800      	cmp	r0, #0
 8019fb6:	d03f      	beq.n	801a038 <_vfiprintf_r+0x22c>
 8019fb8:	4b29      	ldr	r3, [pc, #164]	; (801a060 <_vfiprintf_r+0x254>)
 8019fba:	bb1b      	cbnz	r3, 801a004 <_vfiprintf_r+0x1f8>
 8019fbc:	9b03      	ldr	r3, [sp, #12]
 8019fbe:	3307      	adds	r3, #7
 8019fc0:	f023 0307 	bic.w	r3, r3, #7
 8019fc4:	3308      	adds	r3, #8
 8019fc6:	9303      	str	r3, [sp, #12]
 8019fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019fca:	443b      	add	r3, r7
 8019fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8019fce:	e767      	b.n	8019ea0 <_vfiprintf_r+0x94>
 8019fd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8019fd4:	460c      	mov	r4, r1
 8019fd6:	2001      	movs	r0, #1
 8019fd8:	e7a5      	b.n	8019f26 <_vfiprintf_r+0x11a>
 8019fda:	2300      	movs	r3, #0
 8019fdc:	3401      	adds	r4, #1
 8019fde:	9305      	str	r3, [sp, #20]
 8019fe0:	4619      	mov	r1, r3
 8019fe2:	f04f 0c0a 	mov.w	ip, #10
 8019fe6:	4620      	mov	r0, r4
 8019fe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019fec:	3a30      	subs	r2, #48	; 0x30
 8019fee:	2a09      	cmp	r2, #9
 8019ff0:	d903      	bls.n	8019ffa <_vfiprintf_r+0x1ee>
 8019ff2:	2b00      	cmp	r3, #0
 8019ff4:	d0c5      	beq.n	8019f82 <_vfiprintf_r+0x176>
 8019ff6:	9105      	str	r1, [sp, #20]
 8019ff8:	e7c3      	b.n	8019f82 <_vfiprintf_r+0x176>
 8019ffa:	fb0c 2101 	mla	r1, ip, r1, r2
 8019ffe:	4604      	mov	r4, r0
 801a000:	2301      	movs	r3, #1
 801a002:	e7f0      	b.n	8019fe6 <_vfiprintf_r+0x1da>
 801a004:	ab03      	add	r3, sp, #12
 801a006:	9300      	str	r3, [sp, #0]
 801a008:	462a      	mov	r2, r5
 801a00a:	4b16      	ldr	r3, [pc, #88]	; (801a064 <_vfiprintf_r+0x258>)
 801a00c:	a904      	add	r1, sp, #16
 801a00e:	4630      	mov	r0, r6
 801a010:	f7fc f928 	bl	8016264 <_printf_float>
 801a014:	4607      	mov	r7, r0
 801a016:	1c78      	adds	r0, r7, #1
 801a018:	d1d6      	bne.n	8019fc8 <_vfiprintf_r+0x1bc>
 801a01a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a01c:	07d9      	lsls	r1, r3, #31
 801a01e:	d405      	bmi.n	801a02c <_vfiprintf_r+0x220>
 801a020:	89ab      	ldrh	r3, [r5, #12]
 801a022:	059a      	lsls	r2, r3, #22
 801a024:	d402      	bmi.n	801a02c <_vfiprintf_r+0x220>
 801a026:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a028:	f7ff fea0 	bl	8019d6c <__retarget_lock_release_recursive>
 801a02c:	89ab      	ldrh	r3, [r5, #12]
 801a02e:	065b      	lsls	r3, r3, #25
 801a030:	f53f af12 	bmi.w	8019e58 <_vfiprintf_r+0x4c>
 801a034:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a036:	e711      	b.n	8019e5c <_vfiprintf_r+0x50>
 801a038:	ab03      	add	r3, sp, #12
 801a03a:	9300      	str	r3, [sp, #0]
 801a03c:	462a      	mov	r2, r5
 801a03e:	4b09      	ldr	r3, [pc, #36]	; (801a064 <_vfiprintf_r+0x258>)
 801a040:	a904      	add	r1, sp, #16
 801a042:	4630      	mov	r0, r6
 801a044:	f7fc fbb2 	bl	80167ac <_printf_i>
 801a048:	e7e4      	b.n	801a014 <_vfiprintf_r+0x208>
 801a04a:	bf00      	nop
 801a04c:	0801c984 	.word	0x0801c984
 801a050:	0801c9a4 	.word	0x0801c9a4
 801a054:	0801c964 	.word	0x0801c964
 801a058:	0801c914 	.word	0x0801c914
 801a05c:	0801c91e 	.word	0x0801c91e
 801a060:	08016265 	.word	0x08016265
 801a064:	08019de9 	.word	0x08019de9
 801a068:	0801c91a 	.word	0x0801c91a

0801a06c <__swbuf_r>:
 801a06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a06e:	460e      	mov	r6, r1
 801a070:	4614      	mov	r4, r2
 801a072:	4605      	mov	r5, r0
 801a074:	b118      	cbz	r0, 801a07e <__swbuf_r+0x12>
 801a076:	6983      	ldr	r3, [r0, #24]
 801a078:	b90b      	cbnz	r3, 801a07e <__swbuf_r+0x12>
 801a07a:	f000 f9d9 	bl	801a430 <__sinit>
 801a07e:	4b21      	ldr	r3, [pc, #132]	; (801a104 <__swbuf_r+0x98>)
 801a080:	429c      	cmp	r4, r3
 801a082:	d12b      	bne.n	801a0dc <__swbuf_r+0x70>
 801a084:	686c      	ldr	r4, [r5, #4]
 801a086:	69a3      	ldr	r3, [r4, #24]
 801a088:	60a3      	str	r3, [r4, #8]
 801a08a:	89a3      	ldrh	r3, [r4, #12]
 801a08c:	071a      	lsls	r2, r3, #28
 801a08e:	d52f      	bpl.n	801a0f0 <__swbuf_r+0x84>
 801a090:	6923      	ldr	r3, [r4, #16]
 801a092:	b36b      	cbz	r3, 801a0f0 <__swbuf_r+0x84>
 801a094:	6923      	ldr	r3, [r4, #16]
 801a096:	6820      	ldr	r0, [r4, #0]
 801a098:	1ac0      	subs	r0, r0, r3
 801a09a:	6963      	ldr	r3, [r4, #20]
 801a09c:	b2f6      	uxtb	r6, r6
 801a09e:	4283      	cmp	r3, r0
 801a0a0:	4637      	mov	r7, r6
 801a0a2:	dc04      	bgt.n	801a0ae <__swbuf_r+0x42>
 801a0a4:	4621      	mov	r1, r4
 801a0a6:	4628      	mov	r0, r5
 801a0a8:	f000 f92e 	bl	801a308 <_fflush_r>
 801a0ac:	bb30      	cbnz	r0, 801a0fc <__swbuf_r+0x90>
 801a0ae:	68a3      	ldr	r3, [r4, #8]
 801a0b0:	3b01      	subs	r3, #1
 801a0b2:	60a3      	str	r3, [r4, #8]
 801a0b4:	6823      	ldr	r3, [r4, #0]
 801a0b6:	1c5a      	adds	r2, r3, #1
 801a0b8:	6022      	str	r2, [r4, #0]
 801a0ba:	701e      	strb	r6, [r3, #0]
 801a0bc:	6963      	ldr	r3, [r4, #20]
 801a0be:	3001      	adds	r0, #1
 801a0c0:	4283      	cmp	r3, r0
 801a0c2:	d004      	beq.n	801a0ce <__swbuf_r+0x62>
 801a0c4:	89a3      	ldrh	r3, [r4, #12]
 801a0c6:	07db      	lsls	r3, r3, #31
 801a0c8:	d506      	bpl.n	801a0d8 <__swbuf_r+0x6c>
 801a0ca:	2e0a      	cmp	r6, #10
 801a0cc:	d104      	bne.n	801a0d8 <__swbuf_r+0x6c>
 801a0ce:	4621      	mov	r1, r4
 801a0d0:	4628      	mov	r0, r5
 801a0d2:	f000 f919 	bl	801a308 <_fflush_r>
 801a0d6:	b988      	cbnz	r0, 801a0fc <__swbuf_r+0x90>
 801a0d8:	4638      	mov	r0, r7
 801a0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a0dc:	4b0a      	ldr	r3, [pc, #40]	; (801a108 <__swbuf_r+0x9c>)
 801a0de:	429c      	cmp	r4, r3
 801a0e0:	d101      	bne.n	801a0e6 <__swbuf_r+0x7a>
 801a0e2:	68ac      	ldr	r4, [r5, #8]
 801a0e4:	e7cf      	b.n	801a086 <__swbuf_r+0x1a>
 801a0e6:	4b09      	ldr	r3, [pc, #36]	; (801a10c <__swbuf_r+0xa0>)
 801a0e8:	429c      	cmp	r4, r3
 801a0ea:	bf08      	it	eq
 801a0ec:	68ec      	ldreq	r4, [r5, #12]
 801a0ee:	e7ca      	b.n	801a086 <__swbuf_r+0x1a>
 801a0f0:	4621      	mov	r1, r4
 801a0f2:	4628      	mov	r0, r5
 801a0f4:	f000 f80c 	bl	801a110 <__swsetup_r>
 801a0f8:	2800      	cmp	r0, #0
 801a0fa:	d0cb      	beq.n	801a094 <__swbuf_r+0x28>
 801a0fc:	f04f 37ff 	mov.w	r7, #4294967295
 801a100:	e7ea      	b.n	801a0d8 <__swbuf_r+0x6c>
 801a102:	bf00      	nop
 801a104:	0801c984 	.word	0x0801c984
 801a108:	0801c9a4 	.word	0x0801c9a4
 801a10c:	0801c964 	.word	0x0801c964

0801a110 <__swsetup_r>:
 801a110:	4b32      	ldr	r3, [pc, #200]	; (801a1dc <__swsetup_r+0xcc>)
 801a112:	b570      	push	{r4, r5, r6, lr}
 801a114:	681d      	ldr	r5, [r3, #0]
 801a116:	4606      	mov	r6, r0
 801a118:	460c      	mov	r4, r1
 801a11a:	b125      	cbz	r5, 801a126 <__swsetup_r+0x16>
 801a11c:	69ab      	ldr	r3, [r5, #24]
 801a11e:	b913      	cbnz	r3, 801a126 <__swsetup_r+0x16>
 801a120:	4628      	mov	r0, r5
 801a122:	f000 f985 	bl	801a430 <__sinit>
 801a126:	4b2e      	ldr	r3, [pc, #184]	; (801a1e0 <__swsetup_r+0xd0>)
 801a128:	429c      	cmp	r4, r3
 801a12a:	d10f      	bne.n	801a14c <__swsetup_r+0x3c>
 801a12c:	686c      	ldr	r4, [r5, #4]
 801a12e:	89a3      	ldrh	r3, [r4, #12]
 801a130:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a134:	0719      	lsls	r1, r3, #28
 801a136:	d42c      	bmi.n	801a192 <__swsetup_r+0x82>
 801a138:	06dd      	lsls	r5, r3, #27
 801a13a:	d411      	bmi.n	801a160 <__swsetup_r+0x50>
 801a13c:	2309      	movs	r3, #9
 801a13e:	6033      	str	r3, [r6, #0]
 801a140:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a144:	81a3      	strh	r3, [r4, #12]
 801a146:	f04f 30ff 	mov.w	r0, #4294967295
 801a14a:	e03e      	b.n	801a1ca <__swsetup_r+0xba>
 801a14c:	4b25      	ldr	r3, [pc, #148]	; (801a1e4 <__swsetup_r+0xd4>)
 801a14e:	429c      	cmp	r4, r3
 801a150:	d101      	bne.n	801a156 <__swsetup_r+0x46>
 801a152:	68ac      	ldr	r4, [r5, #8]
 801a154:	e7eb      	b.n	801a12e <__swsetup_r+0x1e>
 801a156:	4b24      	ldr	r3, [pc, #144]	; (801a1e8 <__swsetup_r+0xd8>)
 801a158:	429c      	cmp	r4, r3
 801a15a:	bf08      	it	eq
 801a15c:	68ec      	ldreq	r4, [r5, #12]
 801a15e:	e7e6      	b.n	801a12e <__swsetup_r+0x1e>
 801a160:	0758      	lsls	r0, r3, #29
 801a162:	d512      	bpl.n	801a18a <__swsetup_r+0x7a>
 801a164:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a166:	b141      	cbz	r1, 801a17a <__swsetup_r+0x6a>
 801a168:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a16c:	4299      	cmp	r1, r3
 801a16e:	d002      	beq.n	801a176 <__swsetup_r+0x66>
 801a170:	4630      	mov	r0, r6
 801a172:	f7fb ff2d 	bl	8015fd0 <_free_r>
 801a176:	2300      	movs	r3, #0
 801a178:	6363      	str	r3, [r4, #52]	; 0x34
 801a17a:	89a3      	ldrh	r3, [r4, #12]
 801a17c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a180:	81a3      	strh	r3, [r4, #12]
 801a182:	2300      	movs	r3, #0
 801a184:	6063      	str	r3, [r4, #4]
 801a186:	6923      	ldr	r3, [r4, #16]
 801a188:	6023      	str	r3, [r4, #0]
 801a18a:	89a3      	ldrh	r3, [r4, #12]
 801a18c:	f043 0308 	orr.w	r3, r3, #8
 801a190:	81a3      	strh	r3, [r4, #12]
 801a192:	6923      	ldr	r3, [r4, #16]
 801a194:	b94b      	cbnz	r3, 801a1aa <__swsetup_r+0x9a>
 801a196:	89a3      	ldrh	r3, [r4, #12]
 801a198:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a19c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a1a0:	d003      	beq.n	801a1aa <__swsetup_r+0x9a>
 801a1a2:	4621      	mov	r1, r4
 801a1a4:	4630      	mov	r0, r6
 801a1a6:	f000 fa05 	bl	801a5b4 <__smakebuf_r>
 801a1aa:	89a0      	ldrh	r0, [r4, #12]
 801a1ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a1b0:	f010 0301 	ands.w	r3, r0, #1
 801a1b4:	d00a      	beq.n	801a1cc <__swsetup_r+0xbc>
 801a1b6:	2300      	movs	r3, #0
 801a1b8:	60a3      	str	r3, [r4, #8]
 801a1ba:	6963      	ldr	r3, [r4, #20]
 801a1bc:	425b      	negs	r3, r3
 801a1be:	61a3      	str	r3, [r4, #24]
 801a1c0:	6923      	ldr	r3, [r4, #16]
 801a1c2:	b943      	cbnz	r3, 801a1d6 <__swsetup_r+0xc6>
 801a1c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a1c8:	d1ba      	bne.n	801a140 <__swsetup_r+0x30>
 801a1ca:	bd70      	pop	{r4, r5, r6, pc}
 801a1cc:	0781      	lsls	r1, r0, #30
 801a1ce:	bf58      	it	pl
 801a1d0:	6963      	ldrpl	r3, [r4, #20]
 801a1d2:	60a3      	str	r3, [r4, #8]
 801a1d4:	e7f4      	b.n	801a1c0 <__swsetup_r+0xb0>
 801a1d6:	2000      	movs	r0, #0
 801a1d8:	e7f7      	b.n	801a1ca <__swsetup_r+0xba>
 801a1da:	bf00      	nop
 801a1dc:	20004210 	.word	0x20004210
 801a1e0:	0801c984 	.word	0x0801c984
 801a1e4:	0801c9a4 	.word	0x0801c9a4
 801a1e8:	0801c964 	.word	0x0801c964

0801a1ec <abort>:
 801a1ec:	b508      	push	{r3, lr}
 801a1ee:	2006      	movs	r0, #6
 801a1f0:	f000 fa50 	bl	801a694 <raise>
 801a1f4:	2001      	movs	r0, #1
 801a1f6:	f7f0 ffa3 	bl	800b140 <_exit>
	...

0801a1fc <__sflush_r>:
 801a1fc:	898a      	ldrh	r2, [r1, #12]
 801a1fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a202:	4605      	mov	r5, r0
 801a204:	0710      	lsls	r0, r2, #28
 801a206:	460c      	mov	r4, r1
 801a208:	d458      	bmi.n	801a2bc <__sflush_r+0xc0>
 801a20a:	684b      	ldr	r3, [r1, #4]
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	dc05      	bgt.n	801a21c <__sflush_r+0x20>
 801a210:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a212:	2b00      	cmp	r3, #0
 801a214:	dc02      	bgt.n	801a21c <__sflush_r+0x20>
 801a216:	2000      	movs	r0, #0
 801a218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a21c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a21e:	2e00      	cmp	r6, #0
 801a220:	d0f9      	beq.n	801a216 <__sflush_r+0x1a>
 801a222:	2300      	movs	r3, #0
 801a224:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a228:	682f      	ldr	r7, [r5, #0]
 801a22a:	602b      	str	r3, [r5, #0]
 801a22c:	d032      	beq.n	801a294 <__sflush_r+0x98>
 801a22e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a230:	89a3      	ldrh	r3, [r4, #12]
 801a232:	075a      	lsls	r2, r3, #29
 801a234:	d505      	bpl.n	801a242 <__sflush_r+0x46>
 801a236:	6863      	ldr	r3, [r4, #4]
 801a238:	1ac0      	subs	r0, r0, r3
 801a23a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a23c:	b10b      	cbz	r3, 801a242 <__sflush_r+0x46>
 801a23e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a240:	1ac0      	subs	r0, r0, r3
 801a242:	2300      	movs	r3, #0
 801a244:	4602      	mov	r2, r0
 801a246:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a248:	6a21      	ldr	r1, [r4, #32]
 801a24a:	4628      	mov	r0, r5
 801a24c:	47b0      	blx	r6
 801a24e:	1c43      	adds	r3, r0, #1
 801a250:	89a3      	ldrh	r3, [r4, #12]
 801a252:	d106      	bne.n	801a262 <__sflush_r+0x66>
 801a254:	6829      	ldr	r1, [r5, #0]
 801a256:	291d      	cmp	r1, #29
 801a258:	d82c      	bhi.n	801a2b4 <__sflush_r+0xb8>
 801a25a:	4a2a      	ldr	r2, [pc, #168]	; (801a304 <__sflush_r+0x108>)
 801a25c:	40ca      	lsrs	r2, r1
 801a25e:	07d6      	lsls	r6, r2, #31
 801a260:	d528      	bpl.n	801a2b4 <__sflush_r+0xb8>
 801a262:	2200      	movs	r2, #0
 801a264:	6062      	str	r2, [r4, #4]
 801a266:	04d9      	lsls	r1, r3, #19
 801a268:	6922      	ldr	r2, [r4, #16]
 801a26a:	6022      	str	r2, [r4, #0]
 801a26c:	d504      	bpl.n	801a278 <__sflush_r+0x7c>
 801a26e:	1c42      	adds	r2, r0, #1
 801a270:	d101      	bne.n	801a276 <__sflush_r+0x7a>
 801a272:	682b      	ldr	r3, [r5, #0]
 801a274:	b903      	cbnz	r3, 801a278 <__sflush_r+0x7c>
 801a276:	6560      	str	r0, [r4, #84]	; 0x54
 801a278:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a27a:	602f      	str	r7, [r5, #0]
 801a27c:	2900      	cmp	r1, #0
 801a27e:	d0ca      	beq.n	801a216 <__sflush_r+0x1a>
 801a280:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a284:	4299      	cmp	r1, r3
 801a286:	d002      	beq.n	801a28e <__sflush_r+0x92>
 801a288:	4628      	mov	r0, r5
 801a28a:	f7fb fea1 	bl	8015fd0 <_free_r>
 801a28e:	2000      	movs	r0, #0
 801a290:	6360      	str	r0, [r4, #52]	; 0x34
 801a292:	e7c1      	b.n	801a218 <__sflush_r+0x1c>
 801a294:	6a21      	ldr	r1, [r4, #32]
 801a296:	2301      	movs	r3, #1
 801a298:	4628      	mov	r0, r5
 801a29a:	47b0      	blx	r6
 801a29c:	1c41      	adds	r1, r0, #1
 801a29e:	d1c7      	bne.n	801a230 <__sflush_r+0x34>
 801a2a0:	682b      	ldr	r3, [r5, #0]
 801a2a2:	2b00      	cmp	r3, #0
 801a2a4:	d0c4      	beq.n	801a230 <__sflush_r+0x34>
 801a2a6:	2b1d      	cmp	r3, #29
 801a2a8:	d001      	beq.n	801a2ae <__sflush_r+0xb2>
 801a2aa:	2b16      	cmp	r3, #22
 801a2ac:	d101      	bne.n	801a2b2 <__sflush_r+0xb6>
 801a2ae:	602f      	str	r7, [r5, #0]
 801a2b0:	e7b1      	b.n	801a216 <__sflush_r+0x1a>
 801a2b2:	89a3      	ldrh	r3, [r4, #12]
 801a2b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a2b8:	81a3      	strh	r3, [r4, #12]
 801a2ba:	e7ad      	b.n	801a218 <__sflush_r+0x1c>
 801a2bc:	690f      	ldr	r7, [r1, #16]
 801a2be:	2f00      	cmp	r7, #0
 801a2c0:	d0a9      	beq.n	801a216 <__sflush_r+0x1a>
 801a2c2:	0793      	lsls	r3, r2, #30
 801a2c4:	680e      	ldr	r6, [r1, #0]
 801a2c6:	bf08      	it	eq
 801a2c8:	694b      	ldreq	r3, [r1, #20]
 801a2ca:	600f      	str	r7, [r1, #0]
 801a2cc:	bf18      	it	ne
 801a2ce:	2300      	movne	r3, #0
 801a2d0:	eba6 0807 	sub.w	r8, r6, r7
 801a2d4:	608b      	str	r3, [r1, #8]
 801a2d6:	f1b8 0f00 	cmp.w	r8, #0
 801a2da:	dd9c      	ble.n	801a216 <__sflush_r+0x1a>
 801a2dc:	6a21      	ldr	r1, [r4, #32]
 801a2de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a2e0:	4643      	mov	r3, r8
 801a2e2:	463a      	mov	r2, r7
 801a2e4:	4628      	mov	r0, r5
 801a2e6:	47b0      	blx	r6
 801a2e8:	2800      	cmp	r0, #0
 801a2ea:	dc06      	bgt.n	801a2fa <__sflush_r+0xfe>
 801a2ec:	89a3      	ldrh	r3, [r4, #12]
 801a2ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a2f2:	81a3      	strh	r3, [r4, #12]
 801a2f4:	f04f 30ff 	mov.w	r0, #4294967295
 801a2f8:	e78e      	b.n	801a218 <__sflush_r+0x1c>
 801a2fa:	4407      	add	r7, r0
 801a2fc:	eba8 0800 	sub.w	r8, r8, r0
 801a300:	e7e9      	b.n	801a2d6 <__sflush_r+0xda>
 801a302:	bf00      	nop
 801a304:	20400001 	.word	0x20400001

0801a308 <_fflush_r>:
 801a308:	b538      	push	{r3, r4, r5, lr}
 801a30a:	690b      	ldr	r3, [r1, #16]
 801a30c:	4605      	mov	r5, r0
 801a30e:	460c      	mov	r4, r1
 801a310:	b913      	cbnz	r3, 801a318 <_fflush_r+0x10>
 801a312:	2500      	movs	r5, #0
 801a314:	4628      	mov	r0, r5
 801a316:	bd38      	pop	{r3, r4, r5, pc}
 801a318:	b118      	cbz	r0, 801a322 <_fflush_r+0x1a>
 801a31a:	6983      	ldr	r3, [r0, #24]
 801a31c:	b90b      	cbnz	r3, 801a322 <_fflush_r+0x1a>
 801a31e:	f000 f887 	bl	801a430 <__sinit>
 801a322:	4b14      	ldr	r3, [pc, #80]	; (801a374 <_fflush_r+0x6c>)
 801a324:	429c      	cmp	r4, r3
 801a326:	d11b      	bne.n	801a360 <_fflush_r+0x58>
 801a328:	686c      	ldr	r4, [r5, #4]
 801a32a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a32e:	2b00      	cmp	r3, #0
 801a330:	d0ef      	beq.n	801a312 <_fflush_r+0xa>
 801a332:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a334:	07d0      	lsls	r0, r2, #31
 801a336:	d404      	bmi.n	801a342 <_fflush_r+0x3a>
 801a338:	0599      	lsls	r1, r3, #22
 801a33a:	d402      	bmi.n	801a342 <_fflush_r+0x3a>
 801a33c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a33e:	f7ff fd14 	bl	8019d6a <__retarget_lock_acquire_recursive>
 801a342:	4628      	mov	r0, r5
 801a344:	4621      	mov	r1, r4
 801a346:	f7ff ff59 	bl	801a1fc <__sflush_r>
 801a34a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a34c:	07da      	lsls	r2, r3, #31
 801a34e:	4605      	mov	r5, r0
 801a350:	d4e0      	bmi.n	801a314 <_fflush_r+0xc>
 801a352:	89a3      	ldrh	r3, [r4, #12]
 801a354:	059b      	lsls	r3, r3, #22
 801a356:	d4dd      	bmi.n	801a314 <_fflush_r+0xc>
 801a358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a35a:	f7ff fd07 	bl	8019d6c <__retarget_lock_release_recursive>
 801a35e:	e7d9      	b.n	801a314 <_fflush_r+0xc>
 801a360:	4b05      	ldr	r3, [pc, #20]	; (801a378 <_fflush_r+0x70>)
 801a362:	429c      	cmp	r4, r3
 801a364:	d101      	bne.n	801a36a <_fflush_r+0x62>
 801a366:	68ac      	ldr	r4, [r5, #8]
 801a368:	e7df      	b.n	801a32a <_fflush_r+0x22>
 801a36a:	4b04      	ldr	r3, [pc, #16]	; (801a37c <_fflush_r+0x74>)
 801a36c:	429c      	cmp	r4, r3
 801a36e:	bf08      	it	eq
 801a370:	68ec      	ldreq	r4, [r5, #12]
 801a372:	e7da      	b.n	801a32a <_fflush_r+0x22>
 801a374:	0801c984 	.word	0x0801c984
 801a378:	0801c9a4 	.word	0x0801c9a4
 801a37c:	0801c964 	.word	0x0801c964

0801a380 <std>:
 801a380:	2300      	movs	r3, #0
 801a382:	b510      	push	{r4, lr}
 801a384:	4604      	mov	r4, r0
 801a386:	e9c0 3300 	strd	r3, r3, [r0]
 801a38a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a38e:	6083      	str	r3, [r0, #8]
 801a390:	8181      	strh	r1, [r0, #12]
 801a392:	6643      	str	r3, [r0, #100]	; 0x64
 801a394:	81c2      	strh	r2, [r0, #14]
 801a396:	6183      	str	r3, [r0, #24]
 801a398:	4619      	mov	r1, r3
 801a39a:	2208      	movs	r2, #8
 801a39c:	305c      	adds	r0, #92	; 0x5c
 801a39e:	f7fb fe0f 	bl	8015fc0 <memset>
 801a3a2:	4b05      	ldr	r3, [pc, #20]	; (801a3b8 <std+0x38>)
 801a3a4:	6263      	str	r3, [r4, #36]	; 0x24
 801a3a6:	4b05      	ldr	r3, [pc, #20]	; (801a3bc <std+0x3c>)
 801a3a8:	62a3      	str	r3, [r4, #40]	; 0x28
 801a3aa:	4b05      	ldr	r3, [pc, #20]	; (801a3c0 <std+0x40>)
 801a3ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a3ae:	4b05      	ldr	r3, [pc, #20]	; (801a3c4 <std+0x44>)
 801a3b0:	6224      	str	r4, [r4, #32]
 801a3b2:	6323      	str	r3, [r4, #48]	; 0x30
 801a3b4:	bd10      	pop	{r4, pc}
 801a3b6:	bf00      	nop
 801a3b8:	0801a6cd 	.word	0x0801a6cd
 801a3bc:	0801a6ef 	.word	0x0801a6ef
 801a3c0:	0801a727 	.word	0x0801a727
 801a3c4:	0801a74b 	.word	0x0801a74b

0801a3c8 <_cleanup_r>:
 801a3c8:	4901      	ldr	r1, [pc, #4]	; (801a3d0 <_cleanup_r+0x8>)
 801a3ca:	f000 b8af 	b.w	801a52c <_fwalk_reent>
 801a3ce:	bf00      	nop
 801a3d0:	0801a309 	.word	0x0801a309

0801a3d4 <__sfmoreglue>:
 801a3d4:	b570      	push	{r4, r5, r6, lr}
 801a3d6:	1e4a      	subs	r2, r1, #1
 801a3d8:	2568      	movs	r5, #104	; 0x68
 801a3da:	4355      	muls	r5, r2
 801a3dc:	460e      	mov	r6, r1
 801a3de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a3e2:	f7fb fe45 	bl	8016070 <_malloc_r>
 801a3e6:	4604      	mov	r4, r0
 801a3e8:	b140      	cbz	r0, 801a3fc <__sfmoreglue+0x28>
 801a3ea:	2100      	movs	r1, #0
 801a3ec:	e9c0 1600 	strd	r1, r6, [r0]
 801a3f0:	300c      	adds	r0, #12
 801a3f2:	60a0      	str	r0, [r4, #8]
 801a3f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a3f8:	f7fb fde2 	bl	8015fc0 <memset>
 801a3fc:	4620      	mov	r0, r4
 801a3fe:	bd70      	pop	{r4, r5, r6, pc}

0801a400 <__sfp_lock_acquire>:
 801a400:	4801      	ldr	r0, [pc, #4]	; (801a408 <__sfp_lock_acquire+0x8>)
 801a402:	f7ff bcb2 	b.w	8019d6a <__retarget_lock_acquire_recursive>
 801a406:	bf00      	nop
 801a408:	20011b88 	.word	0x20011b88

0801a40c <__sfp_lock_release>:
 801a40c:	4801      	ldr	r0, [pc, #4]	; (801a414 <__sfp_lock_release+0x8>)
 801a40e:	f7ff bcad 	b.w	8019d6c <__retarget_lock_release_recursive>
 801a412:	bf00      	nop
 801a414:	20011b88 	.word	0x20011b88

0801a418 <__sinit_lock_acquire>:
 801a418:	4801      	ldr	r0, [pc, #4]	; (801a420 <__sinit_lock_acquire+0x8>)
 801a41a:	f7ff bca6 	b.w	8019d6a <__retarget_lock_acquire_recursive>
 801a41e:	bf00      	nop
 801a420:	20011b83 	.word	0x20011b83

0801a424 <__sinit_lock_release>:
 801a424:	4801      	ldr	r0, [pc, #4]	; (801a42c <__sinit_lock_release+0x8>)
 801a426:	f7ff bca1 	b.w	8019d6c <__retarget_lock_release_recursive>
 801a42a:	bf00      	nop
 801a42c:	20011b83 	.word	0x20011b83

0801a430 <__sinit>:
 801a430:	b510      	push	{r4, lr}
 801a432:	4604      	mov	r4, r0
 801a434:	f7ff fff0 	bl	801a418 <__sinit_lock_acquire>
 801a438:	69a3      	ldr	r3, [r4, #24]
 801a43a:	b11b      	cbz	r3, 801a444 <__sinit+0x14>
 801a43c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a440:	f7ff bff0 	b.w	801a424 <__sinit_lock_release>
 801a444:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a448:	6523      	str	r3, [r4, #80]	; 0x50
 801a44a:	4b13      	ldr	r3, [pc, #76]	; (801a498 <__sinit+0x68>)
 801a44c:	4a13      	ldr	r2, [pc, #76]	; (801a49c <__sinit+0x6c>)
 801a44e:	681b      	ldr	r3, [r3, #0]
 801a450:	62a2      	str	r2, [r4, #40]	; 0x28
 801a452:	42a3      	cmp	r3, r4
 801a454:	bf04      	itt	eq
 801a456:	2301      	moveq	r3, #1
 801a458:	61a3      	streq	r3, [r4, #24]
 801a45a:	4620      	mov	r0, r4
 801a45c:	f000 f820 	bl	801a4a0 <__sfp>
 801a460:	6060      	str	r0, [r4, #4]
 801a462:	4620      	mov	r0, r4
 801a464:	f000 f81c 	bl	801a4a0 <__sfp>
 801a468:	60a0      	str	r0, [r4, #8]
 801a46a:	4620      	mov	r0, r4
 801a46c:	f000 f818 	bl	801a4a0 <__sfp>
 801a470:	2200      	movs	r2, #0
 801a472:	60e0      	str	r0, [r4, #12]
 801a474:	2104      	movs	r1, #4
 801a476:	6860      	ldr	r0, [r4, #4]
 801a478:	f7ff ff82 	bl	801a380 <std>
 801a47c:	68a0      	ldr	r0, [r4, #8]
 801a47e:	2201      	movs	r2, #1
 801a480:	2109      	movs	r1, #9
 801a482:	f7ff ff7d 	bl	801a380 <std>
 801a486:	68e0      	ldr	r0, [r4, #12]
 801a488:	2202      	movs	r2, #2
 801a48a:	2112      	movs	r1, #18
 801a48c:	f7ff ff78 	bl	801a380 <std>
 801a490:	2301      	movs	r3, #1
 801a492:	61a3      	str	r3, [r4, #24]
 801a494:	e7d2      	b.n	801a43c <__sinit+0xc>
 801a496:	bf00      	nop
 801a498:	0801c510 	.word	0x0801c510
 801a49c:	0801a3c9 	.word	0x0801a3c9

0801a4a0 <__sfp>:
 801a4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4a2:	4607      	mov	r7, r0
 801a4a4:	f7ff ffac 	bl	801a400 <__sfp_lock_acquire>
 801a4a8:	4b1e      	ldr	r3, [pc, #120]	; (801a524 <__sfp+0x84>)
 801a4aa:	681e      	ldr	r6, [r3, #0]
 801a4ac:	69b3      	ldr	r3, [r6, #24]
 801a4ae:	b913      	cbnz	r3, 801a4b6 <__sfp+0x16>
 801a4b0:	4630      	mov	r0, r6
 801a4b2:	f7ff ffbd 	bl	801a430 <__sinit>
 801a4b6:	3648      	adds	r6, #72	; 0x48
 801a4b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a4bc:	3b01      	subs	r3, #1
 801a4be:	d503      	bpl.n	801a4c8 <__sfp+0x28>
 801a4c0:	6833      	ldr	r3, [r6, #0]
 801a4c2:	b30b      	cbz	r3, 801a508 <__sfp+0x68>
 801a4c4:	6836      	ldr	r6, [r6, #0]
 801a4c6:	e7f7      	b.n	801a4b8 <__sfp+0x18>
 801a4c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a4cc:	b9d5      	cbnz	r5, 801a504 <__sfp+0x64>
 801a4ce:	4b16      	ldr	r3, [pc, #88]	; (801a528 <__sfp+0x88>)
 801a4d0:	60e3      	str	r3, [r4, #12]
 801a4d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a4d6:	6665      	str	r5, [r4, #100]	; 0x64
 801a4d8:	f7ff fc46 	bl	8019d68 <__retarget_lock_init_recursive>
 801a4dc:	f7ff ff96 	bl	801a40c <__sfp_lock_release>
 801a4e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a4e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a4e8:	6025      	str	r5, [r4, #0]
 801a4ea:	61a5      	str	r5, [r4, #24]
 801a4ec:	2208      	movs	r2, #8
 801a4ee:	4629      	mov	r1, r5
 801a4f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a4f4:	f7fb fd64 	bl	8015fc0 <memset>
 801a4f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a4fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a500:	4620      	mov	r0, r4
 801a502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a504:	3468      	adds	r4, #104	; 0x68
 801a506:	e7d9      	b.n	801a4bc <__sfp+0x1c>
 801a508:	2104      	movs	r1, #4
 801a50a:	4638      	mov	r0, r7
 801a50c:	f7ff ff62 	bl	801a3d4 <__sfmoreglue>
 801a510:	4604      	mov	r4, r0
 801a512:	6030      	str	r0, [r6, #0]
 801a514:	2800      	cmp	r0, #0
 801a516:	d1d5      	bne.n	801a4c4 <__sfp+0x24>
 801a518:	f7ff ff78 	bl	801a40c <__sfp_lock_release>
 801a51c:	230c      	movs	r3, #12
 801a51e:	603b      	str	r3, [r7, #0]
 801a520:	e7ee      	b.n	801a500 <__sfp+0x60>
 801a522:	bf00      	nop
 801a524:	0801c510 	.word	0x0801c510
 801a528:	ffff0001 	.word	0xffff0001

0801a52c <_fwalk_reent>:
 801a52c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a530:	4606      	mov	r6, r0
 801a532:	4688      	mov	r8, r1
 801a534:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a538:	2700      	movs	r7, #0
 801a53a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a53e:	f1b9 0901 	subs.w	r9, r9, #1
 801a542:	d505      	bpl.n	801a550 <_fwalk_reent+0x24>
 801a544:	6824      	ldr	r4, [r4, #0]
 801a546:	2c00      	cmp	r4, #0
 801a548:	d1f7      	bne.n	801a53a <_fwalk_reent+0xe>
 801a54a:	4638      	mov	r0, r7
 801a54c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a550:	89ab      	ldrh	r3, [r5, #12]
 801a552:	2b01      	cmp	r3, #1
 801a554:	d907      	bls.n	801a566 <_fwalk_reent+0x3a>
 801a556:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a55a:	3301      	adds	r3, #1
 801a55c:	d003      	beq.n	801a566 <_fwalk_reent+0x3a>
 801a55e:	4629      	mov	r1, r5
 801a560:	4630      	mov	r0, r6
 801a562:	47c0      	blx	r8
 801a564:	4307      	orrs	r7, r0
 801a566:	3568      	adds	r5, #104	; 0x68
 801a568:	e7e9      	b.n	801a53e <_fwalk_reent+0x12>

0801a56a <__swhatbuf_r>:
 801a56a:	b570      	push	{r4, r5, r6, lr}
 801a56c:	460e      	mov	r6, r1
 801a56e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a572:	2900      	cmp	r1, #0
 801a574:	b096      	sub	sp, #88	; 0x58
 801a576:	4614      	mov	r4, r2
 801a578:	461d      	mov	r5, r3
 801a57a:	da07      	bge.n	801a58c <__swhatbuf_r+0x22>
 801a57c:	2300      	movs	r3, #0
 801a57e:	602b      	str	r3, [r5, #0]
 801a580:	89b3      	ldrh	r3, [r6, #12]
 801a582:	061a      	lsls	r2, r3, #24
 801a584:	d410      	bmi.n	801a5a8 <__swhatbuf_r+0x3e>
 801a586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a58a:	e00e      	b.n	801a5aa <__swhatbuf_r+0x40>
 801a58c:	466a      	mov	r2, sp
 801a58e:	f000 f903 	bl	801a798 <_fstat_r>
 801a592:	2800      	cmp	r0, #0
 801a594:	dbf2      	blt.n	801a57c <__swhatbuf_r+0x12>
 801a596:	9a01      	ldr	r2, [sp, #4]
 801a598:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a59c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a5a0:	425a      	negs	r2, r3
 801a5a2:	415a      	adcs	r2, r3
 801a5a4:	602a      	str	r2, [r5, #0]
 801a5a6:	e7ee      	b.n	801a586 <__swhatbuf_r+0x1c>
 801a5a8:	2340      	movs	r3, #64	; 0x40
 801a5aa:	2000      	movs	r0, #0
 801a5ac:	6023      	str	r3, [r4, #0]
 801a5ae:	b016      	add	sp, #88	; 0x58
 801a5b0:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a5b4 <__smakebuf_r>:
 801a5b4:	898b      	ldrh	r3, [r1, #12]
 801a5b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a5b8:	079d      	lsls	r5, r3, #30
 801a5ba:	4606      	mov	r6, r0
 801a5bc:	460c      	mov	r4, r1
 801a5be:	d507      	bpl.n	801a5d0 <__smakebuf_r+0x1c>
 801a5c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a5c4:	6023      	str	r3, [r4, #0]
 801a5c6:	6123      	str	r3, [r4, #16]
 801a5c8:	2301      	movs	r3, #1
 801a5ca:	6163      	str	r3, [r4, #20]
 801a5cc:	b002      	add	sp, #8
 801a5ce:	bd70      	pop	{r4, r5, r6, pc}
 801a5d0:	ab01      	add	r3, sp, #4
 801a5d2:	466a      	mov	r2, sp
 801a5d4:	f7ff ffc9 	bl	801a56a <__swhatbuf_r>
 801a5d8:	9900      	ldr	r1, [sp, #0]
 801a5da:	4605      	mov	r5, r0
 801a5dc:	4630      	mov	r0, r6
 801a5de:	f7fb fd47 	bl	8016070 <_malloc_r>
 801a5e2:	b948      	cbnz	r0, 801a5f8 <__smakebuf_r+0x44>
 801a5e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a5e8:	059a      	lsls	r2, r3, #22
 801a5ea:	d4ef      	bmi.n	801a5cc <__smakebuf_r+0x18>
 801a5ec:	f023 0303 	bic.w	r3, r3, #3
 801a5f0:	f043 0302 	orr.w	r3, r3, #2
 801a5f4:	81a3      	strh	r3, [r4, #12]
 801a5f6:	e7e3      	b.n	801a5c0 <__smakebuf_r+0xc>
 801a5f8:	4b0d      	ldr	r3, [pc, #52]	; (801a630 <__smakebuf_r+0x7c>)
 801a5fa:	62b3      	str	r3, [r6, #40]	; 0x28
 801a5fc:	89a3      	ldrh	r3, [r4, #12]
 801a5fe:	6020      	str	r0, [r4, #0]
 801a600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a604:	81a3      	strh	r3, [r4, #12]
 801a606:	9b00      	ldr	r3, [sp, #0]
 801a608:	6163      	str	r3, [r4, #20]
 801a60a:	9b01      	ldr	r3, [sp, #4]
 801a60c:	6120      	str	r0, [r4, #16]
 801a60e:	b15b      	cbz	r3, 801a628 <__smakebuf_r+0x74>
 801a610:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a614:	4630      	mov	r0, r6
 801a616:	f000 f8d1 	bl	801a7bc <_isatty_r>
 801a61a:	b128      	cbz	r0, 801a628 <__smakebuf_r+0x74>
 801a61c:	89a3      	ldrh	r3, [r4, #12]
 801a61e:	f023 0303 	bic.w	r3, r3, #3
 801a622:	f043 0301 	orr.w	r3, r3, #1
 801a626:	81a3      	strh	r3, [r4, #12]
 801a628:	89a0      	ldrh	r0, [r4, #12]
 801a62a:	4305      	orrs	r5, r0
 801a62c:	81a5      	strh	r5, [r4, #12]
 801a62e:	e7cd      	b.n	801a5cc <__smakebuf_r+0x18>
 801a630:	0801a3c9 	.word	0x0801a3c9

0801a634 <_malloc_usable_size_r>:
 801a634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a638:	1f18      	subs	r0, r3, #4
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	bfbc      	itt	lt
 801a63e:	580b      	ldrlt	r3, [r1, r0]
 801a640:	18c0      	addlt	r0, r0, r3
 801a642:	4770      	bx	lr

0801a644 <_raise_r>:
 801a644:	291f      	cmp	r1, #31
 801a646:	b538      	push	{r3, r4, r5, lr}
 801a648:	4604      	mov	r4, r0
 801a64a:	460d      	mov	r5, r1
 801a64c:	d904      	bls.n	801a658 <_raise_r+0x14>
 801a64e:	2316      	movs	r3, #22
 801a650:	6003      	str	r3, [r0, #0]
 801a652:	f04f 30ff 	mov.w	r0, #4294967295
 801a656:	bd38      	pop	{r3, r4, r5, pc}
 801a658:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a65a:	b112      	cbz	r2, 801a662 <_raise_r+0x1e>
 801a65c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a660:	b94b      	cbnz	r3, 801a676 <_raise_r+0x32>
 801a662:	4620      	mov	r0, r4
 801a664:	f000 f830 	bl	801a6c8 <_getpid_r>
 801a668:	462a      	mov	r2, r5
 801a66a:	4601      	mov	r1, r0
 801a66c:	4620      	mov	r0, r4
 801a66e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a672:	f000 b817 	b.w	801a6a4 <_kill_r>
 801a676:	2b01      	cmp	r3, #1
 801a678:	d00a      	beq.n	801a690 <_raise_r+0x4c>
 801a67a:	1c59      	adds	r1, r3, #1
 801a67c:	d103      	bne.n	801a686 <_raise_r+0x42>
 801a67e:	2316      	movs	r3, #22
 801a680:	6003      	str	r3, [r0, #0]
 801a682:	2001      	movs	r0, #1
 801a684:	e7e7      	b.n	801a656 <_raise_r+0x12>
 801a686:	2400      	movs	r4, #0
 801a688:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a68c:	4628      	mov	r0, r5
 801a68e:	4798      	blx	r3
 801a690:	2000      	movs	r0, #0
 801a692:	e7e0      	b.n	801a656 <_raise_r+0x12>

0801a694 <raise>:
 801a694:	4b02      	ldr	r3, [pc, #8]	; (801a6a0 <raise+0xc>)
 801a696:	4601      	mov	r1, r0
 801a698:	6818      	ldr	r0, [r3, #0]
 801a69a:	f7ff bfd3 	b.w	801a644 <_raise_r>
 801a69e:	bf00      	nop
 801a6a0:	20004210 	.word	0x20004210

0801a6a4 <_kill_r>:
 801a6a4:	b538      	push	{r3, r4, r5, lr}
 801a6a6:	4d07      	ldr	r5, [pc, #28]	; (801a6c4 <_kill_r+0x20>)
 801a6a8:	2300      	movs	r3, #0
 801a6aa:	4604      	mov	r4, r0
 801a6ac:	4608      	mov	r0, r1
 801a6ae:	4611      	mov	r1, r2
 801a6b0:	602b      	str	r3, [r5, #0]
 801a6b2:	f7f0 fd35 	bl	800b120 <_kill>
 801a6b6:	1c43      	adds	r3, r0, #1
 801a6b8:	d102      	bne.n	801a6c0 <_kill_r+0x1c>
 801a6ba:	682b      	ldr	r3, [r5, #0]
 801a6bc:	b103      	cbz	r3, 801a6c0 <_kill_r+0x1c>
 801a6be:	6023      	str	r3, [r4, #0]
 801a6c0:	bd38      	pop	{r3, r4, r5, pc}
 801a6c2:	bf00      	nop
 801a6c4:	20011b7c 	.word	0x20011b7c

0801a6c8 <_getpid_r>:
 801a6c8:	f7f0 bd22 	b.w	800b110 <_getpid>

0801a6cc <__sread>:
 801a6cc:	b510      	push	{r4, lr}
 801a6ce:	460c      	mov	r4, r1
 801a6d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a6d4:	f000 f894 	bl	801a800 <_read_r>
 801a6d8:	2800      	cmp	r0, #0
 801a6da:	bfab      	itete	ge
 801a6dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a6de:	89a3      	ldrhlt	r3, [r4, #12]
 801a6e0:	181b      	addge	r3, r3, r0
 801a6e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a6e6:	bfac      	ite	ge
 801a6e8:	6563      	strge	r3, [r4, #84]	; 0x54
 801a6ea:	81a3      	strhlt	r3, [r4, #12]
 801a6ec:	bd10      	pop	{r4, pc}

0801a6ee <__swrite>:
 801a6ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6f2:	461f      	mov	r7, r3
 801a6f4:	898b      	ldrh	r3, [r1, #12]
 801a6f6:	05db      	lsls	r3, r3, #23
 801a6f8:	4605      	mov	r5, r0
 801a6fa:	460c      	mov	r4, r1
 801a6fc:	4616      	mov	r6, r2
 801a6fe:	d505      	bpl.n	801a70c <__swrite+0x1e>
 801a700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a704:	2302      	movs	r3, #2
 801a706:	2200      	movs	r2, #0
 801a708:	f000 f868 	bl	801a7dc <_lseek_r>
 801a70c:	89a3      	ldrh	r3, [r4, #12]
 801a70e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a712:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a716:	81a3      	strh	r3, [r4, #12]
 801a718:	4632      	mov	r2, r6
 801a71a:	463b      	mov	r3, r7
 801a71c:	4628      	mov	r0, r5
 801a71e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a722:	f000 b817 	b.w	801a754 <_write_r>

0801a726 <__sseek>:
 801a726:	b510      	push	{r4, lr}
 801a728:	460c      	mov	r4, r1
 801a72a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a72e:	f000 f855 	bl	801a7dc <_lseek_r>
 801a732:	1c43      	adds	r3, r0, #1
 801a734:	89a3      	ldrh	r3, [r4, #12]
 801a736:	bf15      	itete	ne
 801a738:	6560      	strne	r0, [r4, #84]	; 0x54
 801a73a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a73e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a742:	81a3      	strheq	r3, [r4, #12]
 801a744:	bf18      	it	ne
 801a746:	81a3      	strhne	r3, [r4, #12]
 801a748:	bd10      	pop	{r4, pc}

0801a74a <__sclose>:
 801a74a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a74e:	f000 b813 	b.w	801a778 <_close_r>
	...

0801a754 <_write_r>:
 801a754:	b538      	push	{r3, r4, r5, lr}
 801a756:	4d07      	ldr	r5, [pc, #28]	; (801a774 <_write_r+0x20>)
 801a758:	4604      	mov	r4, r0
 801a75a:	4608      	mov	r0, r1
 801a75c:	4611      	mov	r1, r2
 801a75e:	2200      	movs	r2, #0
 801a760:	602a      	str	r2, [r5, #0]
 801a762:	461a      	mov	r2, r3
 801a764:	f7f0 fd13 	bl	800b18e <_write>
 801a768:	1c43      	adds	r3, r0, #1
 801a76a:	d102      	bne.n	801a772 <_write_r+0x1e>
 801a76c:	682b      	ldr	r3, [r5, #0]
 801a76e:	b103      	cbz	r3, 801a772 <_write_r+0x1e>
 801a770:	6023      	str	r3, [r4, #0]
 801a772:	bd38      	pop	{r3, r4, r5, pc}
 801a774:	20011b7c 	.word	0x20011b7c

0801a778 <_close_r>:
 801a778:	b538      	push	{r3, r4, r5, lr}
 801a77a:	4d06      	ldr	r5, [pc, #24]	; (801a794 <_close_r+0x1c>)
 801a77c:	2300      	movs	r3, #0
 801a77e:	4604      	mov	r4, r0
 801a780:	4608      	mov	r0, r1
 801a782:	602b      	str	r3, [r5, #0]
 801a784:	f7f0 fd1f 	bl	800b1c6 <_close>
 801a788:	1c43      	adds	r3, r0, #1
 801a78a:	d102      	bne.n	801a792 <_close_r+0x1a>
 801a78c:	682b      	ldr	r3, [r5, #0]
 801a78e:	b103      	cbz	r3, 801a792 <_close_r+0x1a>
 801a790:	6023      	str	r3, [r4, #0]
 801a792:	bd38      	pop	{r3, r4, r5, pc}
 801a794:	20011b7c 	.word	0x20011b7c

0801a798 <_fstat_r>:
 801a798:	b538      	push	{r3, r4, r5, lr}
 801a79a:	4d07      	ldr	r5, [pc, #28]	; (801a7b8 <_fstat_r+0x20>)
 801a79c:	2300      	movs	r3, #0
 801a79e:	4604      	mov	r4, r0
 801a7a0:	4608      	mov	r0, r1
 801a7a2:	4611      	mov	r1, r2
 801a7a4:	602b      	str	r3, [r5, #0]
 801a7a6:	f7f0 fd1a 	bl	800b1de <_fstat>
 801a7aa:	1c43      	adds	r3, r0, #1
 801a7ac:	d102      	bne.n	801a7b4 <_fstat_r+0x1c>
 801a7ae:	682b      	ldr	r3, [r5, #0]
 801a7b0:	b103      	cbz	r3, 801a7b4 <_fstat_r+0x1c>
 801a7b2:	6023      	str	r3, [r4, #0]
 801a7b4:	bd38      	pop	{r3, r4, r5, pc}
 801a7b6:	bf00      	nop
 801a7b8:	20011b7c 	.word	0x20011b7c

0801a7bc <_isatty_r>:
 801a7bc:	b538      	push	{r3, r4, r5, lr}
 801a7be:	4d06      	ldr	r5, [pc, #24]	; (801a7d8 <_isatty_r+0x1c>)
 801a7c0:	2300      	movs	r3, #0
 801a7c2:	4604      	mov	r4, r0
 801a7c4:	4608      	mov	r0, r1
 801a7c6:	602b      	str	r3, [r5, #0]
 801a7c8:	f7f0 fd19 	bl	800b1fe <_isatty>
 801a7cc:	1c43      	adds	r3, r0, #1
 801a7ce:	d102      	bne.n	801a7d6 <_isatty_r+0x1a>
 801a7d0:	682b      	ldr	r3, [r5, #0]
 801a7d2:	b103      	cbz	r3, 801a7d6 <_isatty_r+0x1a>
 801a7d4:	6023      	str	r3, [r4, #0]
 801a7d6:	bd38      	pop	{r3, r4, r5, pc}
 801a7d8:	20011b7c 	.word	0x20011b7c

0801a7dc <_lseek_r>:
 801a7dc:	b538      	push	{r3, r4, r5, lr}
 801a7de:	4d07      	ldr	r5, [pc, #28]	; (801a7fc <_lseek_r+0x20>)
 801a7e0:	4604      	mov	r4, r0
 801a7e2:	4608      	mov	r0, r1
 801a7e4:	4611      	mov	r1, r2
 801a7e6:	2200      	movs	r2, #0
 801a7e8:	602a      	str	r2, [r5, #0]
 801a7ea:	461a      	mov	r2, r3
 801a7ec:	f7f0 fd12 	bl	800b214 <_lseek>
 801a7f0:	1c43      	adds	r3, r0, #1
 801a7f2:	d102      	bne.n	801a7fa <_lseek_r+0x1e>
 801a7f4:	682b      	ldr	r3, [r5, #0]
 801a7f6:	b103      	cbz	r3, 801a7fa <_lseek_r+0x1e>
 801a7f8:	6023      	str	r3, [r4, #0]
 801a7fa:	bd38      	pop	{r3, r4, r5, pc}
 801a7fc:	20011b7c 	.word	0x20011b7c

0801a800 <_read_r>:
 801a800:	b538      	push	{r3, r4, r5, lr}
 801a802:	4d07      	ldr	r5, [pc, #28]	; (801a820 <_read_r+0x20>)
 801a804:	4604      	mov	r4, r0
 801a806:	4608      	mov	r0, r1
 801a808:	4611      	mov	r1, r2
 801a80a:	2200      	movs	r2, #0
 801a80c:	602a      	str	r2, [r5, #0]
 801a80e:	461a      	mov	r2, r3
 801a810:	f7f0 fca0 	bl	800b154 <_read>
 801a814:	1c43      	adds	r3, r0, #1
 801a816:	d102      	bne.n	801a81e <_read_r+0x1e>
 801a818:	682b      	ldr	r3, [r5, #0]
 801a81a:	b103      	cbz	r3, 801a81e <_read_r+0x1e>
 801a81c:	6023      	str	r3, [r4, #0]
 801a81e:	bd38      	pop	{r3, r4, r5, pc}
 801a820:	20011b7c 	.word	0x20011b7c
 801a824:	00000000 	.word	0x00000000

0801a828 <ceil>:
 801a828:	ec51 0b10 	vmov	r0, r1, d0
 801a82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a830:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801a834:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801a838:	2e13      	cmp	r6, #19
 801a83a:	ee10 5a10 	vmov	r5, s0
 801a83e:	ee10 8a10 	vmov	r8, s0
 801a842:	460c      	mov	r4, r1
 801a844:	dc30      	bgt.n	801a8a8 <ceil+0x80>
 801a846:	2e00      	cmp	r6, #0
 801a848:	da12      	bge.n	801a870 <ceil+0x48>
 801a84a:	a335      	add	r3, pc, #212	; (adr r3, 801a920 <ceil+0xf8>)
 801a84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a850:	f7e5 fd1c 	bl	800028c <__adddf3>
 801a854:	2200      	movs	r2, #0
 801a856:	2300      	movs	r3, #0
 801a858:	f7e6 f95e 	bl	8000b18 <__aeabi_dcmpgt>
 801a85c:	b128      	cbz	r0, 801a86a <ceil+0x42>
 801a85e:	2c00      	cmp	r4, #0
 801a860:	db55      	blt.n	801a90e <ceil+0xe6>
 801a862:	432c      	orrs	r4, r5
 801a864:	d057      	beq.n	801a916 <ceil+0xee>
 801a866:	4c30      	ldr	r4, [pc, #192]	; (801a928 <ceil+0x100>)
 801a868:	2500      	movs	r5, #0
 801a86a:	4621      	mov	r1, r4
 801a86c:	4628      	mov	r0, r5
 801a86e:	e025      	b.n	801a8bc <ceil+0x94>
 801a870:	4f2e      	ldr	r7, [pc, #184]	; (801a92c <ceil+0x104>)
 801a872:	4137      	asrs	r7, r6
 801a874:	ea01 0307 	and.w	r3, r1, r7
 801a878:	4303      	orrs	r3, r0
 801a87a:	d01f      	beq.n	801a8bc <ceil+0x94>
 801a87c:	a328      	add	r3, pc, #160	; (adr r3, 801a920 <ceil+0xf8>)
 801a87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a882:	f7e5 fd03 	bl	800028c <__adddf3>
 801a886:	2200      	movs	r2, #0
 801a888:	2300      	movs	r3, #0
 801a88a:	f7e6 f945 	bl	8000b18 <__aeabi_dcmpgt>
 801a88e:	2800      	cmp	r0, #0
 801a890:	d0eb      	beq.n	801a86a <ceil+0x42>
 801a892:	2c00      	cmp	r4, #0
 801a894:	bfc2      	ittt	gt
 801a896:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 801a89a:	fa43 f606 	asrgt.w	r6, r3, r6
 801a89e:	19a4      	addgt	r4, r4, r6
 801a8a0:	ea24 0407 	bic.w	r4, r4, r7
 801a8a4:	2500      	movs	r5, #0
 801a8a6:	e7e0      	b.n	801a86a <ceil+0x42>
 801a8a8:	2e33      	cmp	r6, #51	; 0x33
 801a8aa:	dd0b      	ble.n	801a8c4 <ceil+0x9c>
 801a8ac:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801a8b0:	d104      	bne.n	801a8bc <ceil+0x94>
 801a8b2:	ee10 2a10 	vmov	r2, s0
 801a8b6:	460b      	mov	r3, r1
 801a8b8:	f7e5 fce8 	bl	800028c <__adddf3>
 801a8bc:	ec41 0b10 	vmov	d0, r0, r1
 801a8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a8c4:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801a8c8:	f04f 33ff 	mov.w	r3, #4294967295
 801a8cc:	fa23 f707 	lsr.w	r7, r3, r7
 801a8d0:	4207      	tst	r7, r0
 801a8d2:	d0f3      	beq.n	801a8bc <ceil+0x94>
 801a8d4:	a312      	add	r3, pc, #72	; (adr r3, 801a920 <ceil+0xf8>)
 801a8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8da:	f7e5 fcd7 	bl	800028c <__adddf3>
 801a8de:	2200      	movs	r2, #0
 801a8e0:	2300      	movs	r3, #0
 801a8e2:	f7e6 f919 	bl	8000b18 <__aeabi_dcmpgt>
 801a8e6:	2800      	cmp	r0, #0
 801a8e8:	d0bf      	beq.n	801a86a <ceil+0x42>
 801a8ea:	2c00      	cmp	r4, #0
 801a8ec:	dd02      	ble.n	801a8f4 <ceil+0xcc>
 801a8ee:	2e14      	cmp	r6, #20
 801a8f0:	d103      	bne.n	801a8fa <ceil+0xd2>
 801a8f2:	3401      	adds	r4, #1
 801a8f4:	ea25 0507 	bic.w	r5, r5, r7
 801a8f8:	e7b7      	b.n	801a86a <ceil+0x42>
 801a8fa:	2301      	movs	r3, #1
 801a8fc:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801a900:	fa03 f606 	lsl.w	r6, r3, r6
 801a904:	4435      	add	r5, r6
 801a906:	4545      	cmp	r5, r8
 801a908:	bf38      	it	cc
 801a90a:	18e4      	addcc	r4, r4, r3
 801a90c:	e7f2      	b.n	801a8f4 <ceil+0xcc>
 801a90e:	2500      	movs	r5, #0
 801a910:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801a914:	e7a9      	b.n	801a86a <ceil+0x42>
 801a916:	4625      	mov	r5, r4
 801a918:	e7a7      	b.n	801a86a <ceil+0x42>
 801a91a:	bf00      	nop
 801a91c:	f3af 8000 	nop.w
 801a920:	8800759c 	.word	0x8800759c
 801a924:	7e37e43c 	.word	0x7e37e43c
 801a928:	3ff00000 	.word	0x3ff00000
 801a92c:	000fffff 	.word	0x000fffff

0801a930 <cos>:
 801a930:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a932:	ec53 2b10 	vmov	r2, r3, d0
 801a936:	4824      	ldr	r0, [pc, #144]	; (801a9c8 <cos+0x98>)
 801a938:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a93c:	4281      	cmp	r1, r0
 801a93e:	dc06      	bgt.n	801a94e <cos+0x1e>
 801a940:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 801a9c0 <cos+0x90>
 801a944:	f000 fce4 	bl	801b310 <__kernel_cos>
 801a948:	ec51 0b10 	vmov	r0, r1, d0
 801a94c:	e007      	b.n	801a95e <cos+0x2e>
 801a94e:	481f      	ldr	r0, [pc, #124]	; (801a9cc <cos+0x9c>)
 801a950:	4281      	cmp	r1, r0
 801a952:	dd09      	ble.n	801a968 <cos+0x38>
 801a954:	ee10 0a10 	vmov	r0, s0
 801a958:	4619      	mov	r1, r3
 801a95a:	f7e5 fc95 	bl	8000288 <__aeabi_dsub>
 801a95e:	ec41 0b10 	vmov	d0, r0, r1
 801a962:	b005      	add	sp, #20
 801a964:	f85d fb04 	ldr.w	pc, [sp], #4
 801a968:	4668      	mov	r0, sp
 801a96a:	f000 fa11 	bl	801ad90 <__ieee754_rem_pio2>
 801a96e:	f000 0003 	and.w	r0, r0, #3
 801a972:	2801      	cmp	r0, #1
 801a974:	d007      	beq.n	801a986 <cos+0x56>
 801a976:	2802      	cmp	r0, #2
 801a978:	d012      	beq.n	801a9a0 <cos+0x70>
 801a97a:	b9c0      	cbnz	r0, 801a9ae <cos+0x7e>
 801a97c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a980:	ed9d 0b00 	vldr	d0, [sp]
 801a984:	e7de      	b.n	801a944 <cos+0x14>
 801a986:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a98a:	ed9d 0b00 	vldr	d0, [sp]
 801a98e:	f001 f8c7 	bl	801bb20 <__kernel_sin>
 801a992:	ec53 2b10 	vmov	r2, r3, d0
 801a996:	ee10 0a10 	vmov	r0, s0
 801a99a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a99e:	e7de      	b.n	801a95e <cos+0x2e>
 801a9a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a9a4:	ed9d 0b00 	vldr	d0, [sp]
 801a9a8:	f000 fcb2 	bl	801b310 <__kernel_cos>
 801a9ac:	e7f1      	b.n	801a992 <cos+0x62>
 801a9ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a9b2:	ed9d 0b00 	vldr	d0, [sp]
 801a9b6:	2001      	movs	r0, #1
 801a9b8:	f001 f8b2 	bl	801bb20 <__kernel_sin>
 801a9bc:	e7c4      	b.n	801a948 <cos+0x18>
 801a9be:	bf00      	nop
	...
 801a9c8:	3fe921fb 	.word	0x3fe921fb
 801a9cc:	7fefffff 	.word	0x7fefffff

0801a9d0 <round>:
 801a9d0:	ec51 0b10 	vmov	r0, r1, d0
 801a9d4:	b570      	push	{r4, r5, r6, lr}
 801a9d6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 801a9da:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 801a9de:	2c13      	cmp	r4, #19
 801a9e0:	ee10 2a10 	vmov	r2, s0
 801a9e4:	460b      	mov	r3, r1
 801a9e6:	dc19      	bgt.n	801aa1c <round+0x4c>
 801a9e8:	2c00      	cmp	r4, #0
 801a9ea:	da09      	bge.n	801aa00 <round+0x30>
 801a9ec:	3401      	adds	r4, #1
 801a9ee:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801a9f2:	d103      	bne.n	801a9fc <round+0x2c>
 801a9f4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801a9f8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a9fc:	2100      	movs	r1, #0
 801a9fe:	e028      	b.n	801aa52 <round+0x82>
 801aa00:	4d15      	ldr	r5, [pc, #84]	; (801aa58 <round+0x88>)
 801aa02:	4125      	asrs	r5, r4
 801aa04:	ea01 0605 	and.w	r6, r1, r5
 801aa08:	4332      	orrs	r2, r6
 801aa0a:	d00e      	beq.n	801aa2a <round+0x5a>
 801aa0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801aa10:	fa42 f404 	asr.w	r4, r2, r4
 801aa14:	4423      	add	r3, r4
 801aa16:	ea23 0305 	bic.w	r3, r3, r5
 801aa1a:	e7ef      	b.n	801a9fc <round+0x2c>
 801aa1c:	2c33      	cmp	r4, #51	; 0x33
 801aa1e:	dd07      	ble.n	801aa30 <round+0x60>
 801aa20:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801aa24:	d101      	bne.n	801aa2a <round+0x5a>
 801aa26:	f7e5 fc31 	bl	800028c <__adddf3>
 801aa2a:	ec41 0b10 	vmov	d0, r0, r1
 801aa2e:	bd70      	pop	{r4, r5, r6, pc}
 801aa30:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 801aa34:	f04f 35ff 	mov.w	r5, #4294967295
 801aa38:	40f5      	lsrs	r5, r6
 801aa3a:	4228      	tst	r0, r5
 801aa3c:	d0f5      	beq.n	801aa2a <round+0x5a>
 801aa3e:	2101      	movs	r1, #1
 801aa40:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801aa44:	fa01 f404 	lsl.w	r4, r1, r4
 801aa48:	1912      	adds	r2, r2, r4
 801aa4a:	bf28      	it	cs
 801aa4c:	185b      	addcs	r3, r3, r1
 801aa4e:	ea22 0105 	bic.w	r1, r2, r5
 801aa52:	4608      	mov	r0, r1
 801aa54:	4619      	mov	r1, r3
 801aa56:	e7e8      	b.n	801aa2a <round+0x5a>
 801aa58:	000fffff 	.word	0x000fffff
 801aa5c:	00000000 	.word	0x00000000

0801aa60 <sin>:
 801aa60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801aa62:	ec53 2b10 	vmov	r2, r3, d0
 801aa66:	4826      	ldr	r0, [pc, #152]	; (801ab00 <sin+0xa0>)
 801aa68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801aa6c:	4281      	cmp	r1, r0
 801aa6e:	dc07      	bgt.n	801aa80 <sin+0x20>
 801aa70:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801aaf8 <sin+0x98>
 801aa74:	2000      	movs	r0, #0
 801aa76:	f001 f853 	bl	801bb20 <__kernel_sin>
 801aa7a:	ec51 0b10 	vmov	r0, r1, d0
 801aa7e:	e007      	b.n	801aa90 <sin+0x30>
 801aa80:	4820      	ldr	r0, [pc, #128]	; (801ab04 <sin+0xa4>)
 801aa82:	4281      	cmp	r1, r0
 801aa84:	dd09      	ble.n	801aa9a <sin+0x3a>
 801aa86:	ee10 0a10 	vmov	r0, s0
 801aa8a:	4619      	mov	r1, r3
 801aa8c:	f7e5 fbfc 	bl	8000288 <__aeabi_dsub>
 801aa90:	ec41 0b10 	vmov	d0, r0, r1
 801aa94:	b005      	add	sp, #20
 801aa96:	f85d fb04 	ldr.w	pc, [sp], #4
 801aa9a:	4668      	mov	r0, sp
 801aa9c:	f000 f978 	bl	801ad90 <__ieee754_rem_pio2>
 801aaa0:	f000 0003 	and.w	r0, r0, #3
 801aaa4:	2801      	cmp	r0, #1
 801aaa6:	d008      	beq.n	801aaba <sin+0x5a>
 801aaa8:	2802      	cmp	r0, #2
 801aaaa:	d00d      	beq.n	801aac8 <sin+0x68>
 801aaac:	b9d0      	cbnz	r0, 801aae4 <sin+0x84>
 801aaae:	ed9d 1b02 	vldr	d1, [sp, #8]
 801aab2:	ed9d 0b00 	vldr	d0, [sp]
 801aab6:	2001      	movs	r0, #1
 801aab8:	e7dd      	b.n	801aa76 <sin+0x16>
 801aaba:	ed9d 1b02 	vldr	d1, [sp, #8]
 801aabe:	ed9d 0b00 	vldr	d0, [sp]
 801aac2:	f000 fc25 	bl	801b310 <__kernel_cos>
 801aac6:	e7d8      	b.n	801aa7a <sin+0x1a>
 801aac8:	ed9d 1b02 	vldr	d1, [sp, #8]
 801aacc:	ed9d 0b00 	vldr	d0, [sp]
 801aad0:	2001      	movs	r0, #1
 801aad2:	f001 f825 	bl	801bb20 <__kernel_sin>
 801aad6:	ec53 2b10 	vmov	r2, r3, d0
 801aada:	ee10 0a10 	vmov	r0, s0
 801aade:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801aae2:	e7d5      	b.n	801aa90 <sin+0x30>
 801aae4:	ed9d 1b02 	vldr	d1, [sp, #8]
 801aae8:	ed9d 0b00 	vldr	d0, [sp]
 801aaec:	f000 fc10 	bl	801b310 <__kernel_cos>
 801aaf0:	e7f1      	b.n	801aad6 <sin+0x76>
 801aaf2:	bf00      	nop
 801aaf4:	f3af 8000 	nop.w
	...
 801ab00:	3fe921fb 	.word	0x3fe921fb
 801ab04:	7fefffff 	.word	0x7fefffff

0801ab08 <ceilf>:
 801ab08:	ee10 3a10 	vmov	r3, s0
 801ab0c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ab10:	3a7f      	subs	r2, #127	; 0x7f
 801ab12:	2a16      	cmp	r2, #22
 801ab14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801ab18:	dc2a      	bgt.n	801ab70 <ceilf+0x68>
 801ab1a:	2a00      	cmp	r2, #0
 801ab1c:	da11      	bge.n	801ab42 <ceilf+0x3a>
 801ab1e:	eddf 7a19 	vldr	s15, [pc, #100]	; 801ab84 <ceilf+0x7c>
 801ab22:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ab26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ab2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab2e:	dd05      	ble.n	801ab3c <ceilf+0x34>
 801ab30:	2b00      	cmp	r3, #0
 801ab32:	db23      	blt.n	801ab7c <ceilf+0x74>
 801ab34:	2900      	cmp	r1, #0
 801ab36:	bf18      	it	ne
 801ab38:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 801ab3c:	ee00 3a10 	vmov	s0, r3
 801ab40:	4770      	bx	lr
 801ab42:	4911      	ldr	r1, [pc, #68]	; (801ab88 <ceilf+0x80>)
 801ab44:	4111      	asrs	r1, r2
 801ab46:	420b      	tst	r3, r1
 801ab48:	d0fa      	beq.n	801ab40 <ceilf+0x38>
 801ab4a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801ab84 <ceilf+0x7c>
 801ab4e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ab52:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ab56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab5a:	ddef      	ble.n	801ab3c <ceilf+0x34>
 801ab5c:	2b00      	cmp	r3, #0
 801ab5e:	bfc2      	ittt	gt
 801ab60:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 801ab64:	fa40 f202 	asrgt.w	r2, r0, r2
 801ab68:	189b      	addgt	r3, r3, r2
 801ab6a:	ea23 0301 	bic.w	r3, r3, r1
 801ab6e:	e7e5      	b.n	801ab3c <ceilf+0x34>
 801ab70:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801ab74:	d3e4      	bcc.n	801ab40 <ceilf+0x38>
 801ab76:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ab7a:	4770      	bx	lr
 801ab7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801ab80:	e7dc      	b.n	801ab3c <ceilf+0x34>
 801ab82:	bf00      	nop
 801ab84:	7149f2ca 	.word	0x7149f2ca
 801ab88:	007fffff 	.word	0x007fffff

0801ab8c <atan2>:
 801ab8c:	f000 b834 	b.w	801abf8 <__ieee754_atan2>

0801ab90 <sqrt>:
 801ab90:	b538      	push	{r3, r4, r5, lr}
 801ab92:	ed2d 8b02 	vpush	{d8}
 801ab96:	ec55 4b10 	vmov	r4, r5, d0
 801ab9a:	f000 fb03 	bl	801b1a4 <__ieee754_sqrt>
 801ab9e:	4b15      	ldr	r3, [pc, #84]	; (801abf4 <sqrt+0x64>)
 801aba0:	eeb0 8a40 	vmov.f32	s16, s0
 801aba4:	eef0 8a60 	vmov.f32	s17, s1
 801aba8:	f993 3000 	ldrsb.w	r3, [r3]
 801abac:	3301      	adds	r3, #1
 801abae:	d019      	beq.n	801abe4 <sqrt+0x54>
 801abb0:	4622      	mov	r2, r4
 801abb2:	462b      	mov	r3, r5
 801abb4:	4620      	mov	r0, r4
 801abb6:	4629      	mov	r1, r5
 801abb8:	f7e5 ffb8 	bl	8000b2c <__aeabi_dcmpun>
 801abbc:	b990      	cbnz	r0, 801abe4 <sqrt+0x54>
 801abbe:	2200      	movs	r2, #0
 801abc0:	2300      	movs	r3, #0
 801abc2:	4620      	mov	r0, r4
 801abc4:	4629      	mov	r1, r5
 801abc6:	f7e5 ff89 	bl	8000adc <__aeabi_dcmplt>
 801abca:	b158      	cbz	r0, 801abe4 <sqrt+0x54>
 801abcc:	f7fb f996 	bl	8015efc <__errno>
 801abd0:	2321      	movs	r3, #33	; 0x21
 801abd2:	6003      	str	r3, [r0, #0]
 801abd4:	2200      	movs	r2, #0
 801abd6:	2300      	movs	r3, #0
 801abd8:	4610      	mov	r0, r2
 801abda:	4619      	mov	r1, r3
 801abdc:	f7e5 fe36 	bl	800084c <__aeabi_ddiv>
 801abe0:	ec41 0b18 	vmov	d8, r0, r1
 801abe4:	eeb0 0a48 	vmov.f32	s0, s16
 801abe8:	eef0 0a68 	vmov.f32	s1, s17
 801abec:	ecbd 8b02 	vpop	{d8}
 801abf0:	bd38      	pop	{r3, r4, r5, pc}
 801abf2:	bf00      	nop
 801abf4:	200043e4 	.word	0x200043e4

0801abf8 <__ieee754_atan2>:
 801abf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801abfc:	ec57 6b11 	vmov	r6, r7, d1
 801ac00:	4273      	negs	r3, r6
 801ac02:	f8df e184 	ldr.w	lr, [pc, #388]	; 801ad88 <__ieee754_atan2+0x190>
 801ac06:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801ac0a:	4333      	orrs	r3, r6
 801ac0c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801ac10:	4573      	cmp	r3, lr
 801ac12:	ec51 0b10 	vmov	r0, r1, d0
 801ac16:	ee11 8a10 	vmov	r8, s2
 801ac1a:	d80a      	bhi.n	801ac32 <__ieee754_atan2+0x3a>
 801ac1c:	4244      	negs	r4, r0
 801ac1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ac22:	4304      	orrs	r4, r0
 801ac24:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801ac28:	4574      	cmp	r4, lr
 801ac2a:	ee10 9a10 	vmov	r9, s0
 801ac2e:	468c      	mov	ip, r1
 801ac30:	d907      	bls.n	801ac42 <__ieee754_atan2+0x4a>
 801ac32:	4632      	mov	r2, r6
 801ac34:	463b      	mov	r3, r7
 801ac36:	f7e5 fb29 	bl	800028c <__adddf3>
 801ac3a:	ec41 0b10 	vmov	d0, r0, r1
 801ac3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac42:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801ac46:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801ac4a:	4334      	orrs	r4, r6
 801ac4c:	d103      	bne.n	801ac56 <__ieee754_atan2+0x5e>
 801ac4e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ac52:	f001 b825 	b.w	801bca0 <atan>
 801ac56:	17bc      	asrs	r4, r7, #30
 801ac58:	f004 0402 	and.w	r4, r4, #2
 801ac5c:	ea53 0909 	orrs.w	r9, r3, r9
 801ac60:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801ac64:	d107      	bne.n	801ac76 <__ieee754_atan2+0x7e>
 801ac66:	2c02      	cmp	r4, #2
 801ac68:	d060      	beq.n	801ad2c <__ieee754_atan2+0x134>
 801ac6a:	2c03      	cmp	r4, #3
 801ac6c:	d1e5      	bne.n	801ac3a <__ieee754_atan2+0x42>
 801ac6e:	a142      	add	r1, pc, #264	; (adr r1, 801ad78 <__ieee754_atan2+0x180>)
 801ac70:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ac74:	e7e1      	b.n	801ac3a <__ieee754_atan2+0x42>
 801ac76:	ea52 0808 	orrs.w	r8, r2, r8
 801ac7a:	d106      	bne.n	801ac8a <__ieee754_atan2+0x92>
 801ac7c:	f1bc 0f00 	cmp.w	ip, #0
 801ac80:	da5f      	bge.n	801ad42 <__ieee754_atan2+0x14a>
 801ac82:	a13f      	add	r1, pc, #252	; (adr r1, 801ad80 <__ieee754_atan2+0x188>)
 801ac84:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ac88:	e7d7      	b.n	801ac3a <__ieee754_atan2+0x42>
 801ac8a:	4572      	cmp	r2, lr
 801ac8c:	d10f      	bne.n	801acae <__ieee754_atan2+0xb6>
 801ac8e:	4293      	cmp	r3, r2
 801ac90:	f104 34ff 	add.w	r4, r4, #4294967295
 801ac94:	d107      	bne.n	801aca6 <__ieee754_atan2+0xae>
 801ac96:	2c02      	cmp	r4, #2
 801ac98:	d84c      	bhi.n	801ad34 <__ieee754_atan2+0x13c>
 801ac9a:	4b35      	ldr	r3, [pc, #212]	; (801ad70 <__ieee754_atan2+0x178>)
 801ac9c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801aca0:	e9d4 0100 	ldrd	r0, r1, [r4]
 801aca4:	e7c9      	b.n	801ac3a <__ieee754_atan2+0x42>
 801aca6:	2c02      	cmp	r4, #2
 801aca8:	d848      	bhi.n	801ad3c <__ieee754_atan2+0x144>
 801acaa:	4b32      	ldr	r3, [pc, #200]	; (801ad74 <__ieee754_atan2+0x17c>)
 801acac:	e7f6      	b.n	801ac9c <__ieee754_atan2+0xa4>
 801acae:	4573      	cmp	r3, lr
 801acb0:	d0e4      	beq.n	801ac7c <__ieee754_atan2+0x84>
 801acb2:	1a9b      	subs	r3, r3, r2
 801acb4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801acb8:	ea4f 5223 	mov.w	r2, r3, asr #20
 801acbc:	da1e      	bge.n	801acfc <__ieee754_atan2+0x104>
 801acbe:	2f00      	cmp	r7, #0
 801acc0:	da01      	bge.n	801acc6 <__ieee754_atan2+0xce>
 801acc2:	323c      	adds	r2, #60	; 0x3c
 801acc4:	db1e      	blt.n	801ad04 <__ieee754_atan2+0x10c>
 801acc6:	4632      	mov	r2, r6
 801acc8:	463b      	mov	r3, r7
 801acca:	f7e5 fdbf 	bl	800084c <__aeabi_ddiv>
 801acce:	ec41 0b10 	vmov	d0, r0, r1
 801acd2:	f001 f985 	bl	801bfe0 <fabs>
 801acd6:	f000 ffe3 	bl	801bca0 <atan>
 801acda:	ec51 0b10 	vmov	r0, r1, d0
 801acde:	2c01      	cmp	r4, #1
 801ace0:	d013      	beq.n	801ad0a <__ieee754_atan2+0x112>
 801ace2:	2c02      	cmp	r4, #2
 801ace4:	d015      	beq.n	801ad12 <__ieee754_atan2+0x11a>
 801ace6:	2c00      	cmp	r4, #0
 801ace8:	d0a7      	beq.n	801ac3a <__ieee754_atan2+0x42>
 801acea:	a319      	add	r3, pc, #100	; (adr r3, 801ad50 <__ieee754_atan2+0x158>)
 801acec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acf0:	f7e5 faca 	bl	8000288 <__aeabi_dsub>
 801acf4:	a318      	add	r3, pc, #96	; (adr r3, 801ad58 <__ieee754_atan2+0x160>)
 801acf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acfa:	e014      	b.n	801ad26 <__ieee754_atan2+0x12e>
 801acfc:	a118      	add	r1, pc, #96	; (adr r1, 801ad60 <__ieee754_atan2+0x168>)
 801acfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad02:	e7ec      	b.n	801acde <__ieee754_atan2+0xe6>
 801ad04:	2000      	movs	r0, #0
 801ad06:	2100      	movs	r1, #0
 801ad08:	e7e9      	b.n	801acde <__ieee754_atan2+0xe6>
 801ad0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ad0e:	4619      	mov	r1, r3
 801ad10:	e793      	b.n	801ac3a <__ieee754_atan2+0x42>
 801ad12:	a30f      	add	r3, pc, #60	; (adr r3, 801ad50 <__ieee754_atan2+0x158>)
 801ad14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad18:	f7e5 fab6 	bl	8000288 <__aeabi_dsub>
 801ad1c:	4602      	mov	r2, r0
 801ad1e:	460b      	mov	r3, r1
 801ad20:	a10d      	add	r1, pc, #52	; (adr r1, 801ad58 <__ieee754_atan2+0x160>)
 801ad22:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad26:	f7e5 faaf 	bl	8000288 <__aeabi_dsub>
 801ad2a:	e786      	b.n	801ac3a <__ieee754_atan2+0x42>
 801ad2c:	a10a      	add	r1, pc, #40	; (adr r1, 801ad58 <__ieee754_atan2+0x160>)
 801ad2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad32:	e782      	b.n	801ac3a <__ieee754_atan2+0x42>
 801ad34:	a10c      	add	r1, pc, #48	; (adr r1, 801ad68 <__ieee754_atan2+0x170>)
 801ad36:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad3a:	e77e      	b.n	801ac3a <__ieee754_atan2+0x42>
 801ad3c:	2000      	movs	r0, #0
 801ad3e:	2100      	movs	r1, #0
 801ad40:	e77b      	b.n	801ac3a <__ieee754_atan2+0x42>
 801ad42:	a107      	add	r1, pc, #28	; (adr r1, 801ad60 <__ieee754_atan2+0x168>)
 801ad44:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad48:	e777      	b.n	801ac3a <__ieee754_atan2+0x42>
 801ad4a:	bf00      	nop
 801ad4c:	f3af 8000 	nop.w
 801ad50:	33145c07 	.word	0x33145c07
 801ad54:	3ca1a626 	.word	0x3ca1a626
 801ad58:	54442d18 	.word	0x54442d18
 801ad5c:	400921fb 	.word	0x400921fb
 801ad60:	54442d18 	.word	0x54442d18
 801ad64:	3ff921fb 	.word	0x3ff921fb
 801ad68:	54442d18 	.word	0x54442d18
 801ad6c:	3fe921fb 	.word	0x3fe921fb
 801ad70:	0801c9c8 	.word	0x0801c9c8
 801ad74:	0801c9e0 	.word	0x0801c9e0
 801ad78:	54442d18 	.word	0x54442d18
 801ad7c:	c00921fb 	.word	0xc00921fb
 801ad80:	54442d18 	.word	0x54442d18
 801ad84:	bff921fb 	.word	0xbff921fb
 801ad88:	7ff00000 	.word	0x7ff00000
 801ad8c:	00000000 	.word	0x00000000

0801ad90 <__ieee754_rem_pio2>:
 801ad90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad94:	ed2d 8b02 	vpush	{d8}
 801ad98:	ec55 4b10 	vmov	r4, r5, d0
 801ad9c:	4bca      	ldr	r3, [pc, #808]	; (801b0c8 <__ieee754_rem_pio2+0x338>)
 801ad9e:	b08b      	sub	sp, #44	; 0x2c
 801ada0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801ada4:	4598      	cmp	r8, r3
 801ada6:	4682      	mov	sl, r0
 801ada8:	9502      	str	r5, [sp, #8]
 801adaa:	dc08      	bgt.n	801adbe <__ieee754_rem_pio2+0x2e>
 801adac:	2200      	movs	r2, #0
 801adae:	2300      	movs	r3, #0
 801adb0:	ed80 0b00 	vstr	d0, [r0]
 801adb4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801adb8:	f04f 0b00 	mov.w	fp, #0
 801adbc:	e028      	b.n	801ae10 <__ieee754_rem_pio2+0x80>
 801adbe:	4bc3      	ldr	r3, [pc, #780]	; (801b0cc <__ieee754_rem_pio2+0x33c>)
 801adc0:	4598      	cmp	r8, r3
 801adc2:	dc78      	bgt.n	801aeb6 <__ieee754_rem_pio2+0x126>
 801adc4:	9b02      	ldr	r3, [sp, #8]
 801adc6:	4ec2      	ldr	r6, [pc, #776]	; (801b0d0 <__ieee754_rem_pio2+0x340>)
 801adc8:	2b00      	cmp	r3, #0
 801adca:	ee10 0a10 	vmov	r0, s0
 801adce:	a3b0      	add	r3, pc, #704	; (adr r3, 801b090 <__ieee754_rem_pio2+0x300>)
 801add0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801add4:	4629      	mov	r1, r5
 801add6:	dd39      	ble.n	801ae4c <__ieee754_rem_pio2+0xbc>
 801add8:	f7e5 fa56 	bl	8000288 <__aeabi_dsub>
 801addc:	45b0      	cmp	r8, r6
 801adde:	4604      	mov	r4, r0
 801ade0:	460d      	mov	r5, r1
 801ade2:	d01b      	beq.n	801ae1c <__ieee754_rem_pio2+0x8c>
 801ade4:	a3ac      	add	r3, pc, #688	; (adr r3, 801b098 <__ieee754_rem_pio2+0x308>)
 801ade6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adea:	f7e5 fa4d 	bl	8000288 <__aeabi_dsub>
 801adee:	4602      	mov	r2, r0
 801adf0:	460b      	mov	r3, r1
 801adf2:	e9ca 2300 	strd	r2, r3, [sl]
 801adf6:	4620      	mov	r0, r4
 801adf8:	4629      	mov	r1, r5
 801adfa:	f7e5 fa45 	bl	8000288 <__aeabi_dsub>
 801adfe:	a3a6      	add	r3, pc, #664	; (adr r3, 801b098 <__ieee754_rem_pio2+0x308>)
 801ae00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae04:	f7e5 fa40 	bl	8000288 <__aeabi_dsub>
 801ae08:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801ae0c:	f04f 0b01 	mov.w	fp, #1
 801ae10:	4658      	mov	r0, fp
 801ae12:	b00b      	add	sp, #44	; 0x2c
 801ae14:	ecbd 8b02 	vpop	{d8}
 801ae18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae1c:	a3a0      	add	r3, pc, #640	; (adr r3, 801b0a0 <__ieee754_rem_pio2+0x310>)
 801ae1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae22:	f7e5 fa31 	bl	8000288 <__aeabi_dsub>
 801ae26:	a3a0      	add	r3, pc, #640	; (adr r3, 801b0a8 <__ieee754_rem_pio2+0x318>)
 801ae28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae2c:	4604      	mov	r4, r0
 801ae2e:	460d      	mov	r5, r1
 801ae30:	f7e5 fa2a 	bl	8000288 <__aeabi_dsub>
 801ae34:	4602      	mov	r2, r0
 801ae36:	460b      	mov	r3, r1
 801ae38:	e9ca 2300 	strd	r2, r3, [sl]
 801ae3c:	4620      	mov	r0, r4
 801ae3e:	4629      	mov	r1, r5
 801ae40:	f7e5 fa22 	bl	8000288 <__aeabi_dsub>
 801ae44:	a398      	add	r3, pc, #608	; (adr r3, 801b0a8 <__ieee754_rem_pio2+0x318>)
 801ae46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae4a:	e7db      	b.n	801ae04 <__ieee754_rem_pio2+0x74>
 801ae4c:	f7e5 fa1e 	bl	800028c <__adddf3>
 801ae50:	45b0      	cmp	r8, r6
 801ae52:	4604      	mov	r4, r0
 801ae54:	460d      	mov	r5, r1
 801ae56:	d016      	beq.n	801ae86 <__ieee754_rem_pio2+0xf6>
 801ae58:	a38f      	add	r3, pc, #572	; (adr r3, 801b098 <__ieee754_rem_pio2+0x308>)
 801ae5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae5e:	f7e5 fa15 	bl	800028c <__adddf3>
 801ae62:	4602      	mov	r2, r0
 801ae64:	460b      	mov	r3, r1
 801ae66:	e9ca 2300 	strd	r2, r3, [sl]
 801ae6a:	4620      	mov	r0, r4
 801ae6c:	4629      	mov	r1, r5
 801ae6e:	f7e5 fa0b 	bl	8000288 <__aeabi_dsub>
 801ae72:	a389      	add	r3, pc, #548	; (adr r3, 801b098 <__ieee754_rem_pio2+0x308>)
 801ae74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae78:	f7e5 fa08 	bl	800028c <__adddf3>
 801ae7c:	f04f 3bff 	mov.w	fp, #4294967295
 801ae80:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801ae84:	e7c4      	b.n	801ae10 <__ieee754_rem_pio2+0x80>
 801ae86:	a386      	add	r3, pc, #536	; (adr r3, 801b0a0 <__ieee754_rem_pio2+0x310>)
 801ae88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae8c:	f7e5 f9fe 	bl	800028c <__adddf3>
 801ae90:	a385      	add	r3, pc, #532	; (adr r3, 801b0a8 <__ieee754_rem_pio2+0x318>)
 801ae92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae96:	4604      	mov	r4, r0
 801ae98:	460d      	mov	r5, r1
 801ae9a:	f7e5 f9f7 	bl	800028c <__adddf3>
 801ae9e:	4602      	mov	r2, r0
 801aea0:	460b      	mov	r3, r1
 801aea2:	e9ca 2300 	strd	r2, r3, [sl]
 801aea6:	4620      	mov	r0, r4
 801aea8:	4629      	mov	r1, r5
 801aeaa:	f7e5 f9ed 	bl	8000288 <__aeabi_dsub>
 801aeae:	a37e      	add	r3, pc, #504	; (adr r3, 801b0a8 <__ieee754_rem_pio2+0x318>)
 801aeb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aeb4:	e7e0      	b.n	801ae78 <__ieee754_rem_pio2+0xe8>
 801aeb6:	4b87      	ldr	r3, [pc, #540]	; (801b0d4 <__ieee754_rem_pio2+0x344>)
 801aeb8:	4598      	cmp	r8, r3
 801aeba:	f300 80d9 	bgt.w	801b070 <__ieee754_rem_pio2+0x2e0>
 801aebe:	f001 f88f 	bl	801bfe0 <fabs>
 801aec2:	ec55 4b10 	vmov	r4, r5, d0
 801aec6:	ee10 0a10 	vmov	r0, s0
 801aeca:	a379      	add	r3, pc, #484	; (adr r3, 801b0b0 <__ieee754_rem_pio2+0x320>)
 801aecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aed0:	4629      	mov	r1, r5
 801aed2:	f7e5 fb91 	bl	80005f8 <__aeabi_dmul>
 801aed6:	4b80      	ldr	r3, [pc, #512]	; (801b0d8 <__ieee754_rem_pio2+0x348>)
 801aed8:	2200      	movs	r2, #0
 801aeda:	f7e5 f9d7 	bl	800028c <__adddf3>
 801aede:	f7e5 fe3b 	bl	8000b58 <__aeabi_d2iz>
 801aee2:	4683      	mov	fp, r0
 801aee4:	f7e5 fb1e 	bl	8000524 <__aeabi_i2d>
 801aee8:	4602      	mov	r2, r0
 801aeea:	460b      	mov	r3, r1
 801aeec:	ec43 2b18 	vmov	d8, r2, r3
 801aef0:	a367      	add	r3, pc, #412	; (adr r3, 801b090 <__ieee754_rem_pio2+0x300>)
 801aef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aef6:	f7e5 fb7f 	bl	80005f8 <__aeabi_dmul>
 801aefa:	4602      	mov	r2, r0
 801aefc:	460b      	mov	r3, r1
 801aefe:	4620      	mov	r0, r4
 801af00:	4629      	mov	r1, r5
 801af02:	f7e5 f9c1 	bl	8000288 <__aeabi_dsub>
 801af06:	a364      	add	r3, pc, #400	; (adr r3, 801b098 <__ieee754_rem_pio2+0x308>)
 801af08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af0c:	4606      	mov	r6, r0
 801af0e:	460f      	mov	r7, r1
 801af10:	ec51 0b18 	vmov	r0, r1, d8
 801af14:	f7e5 fb70 	bl	80005f8 <__aeabi_dmul>
 801af18:	f1bb 0f1f 	cmp.w	fp, #31
 801af1c:	4604      	mov	r4, r0
 801af1e:	460d      	mov	r5, r1
 801af20:	dc0d      	bgt.n	801af3e <__ieee754_rem_pio2+0x1ae>
 801af22:	4b6e      	ldr	r3, [pc, #440]	; (801b0dc <__ieee754_rem_pio2+0x34c>)
 801af24:	f10b 32ff 	add.w	r2, fp, #4294967295
 801af28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801af2c:	4543      	cmp	r3, r8
 801af2e:	d006      	beq.n	801af3e <__ieee754_rem_pio2+0x1ae>
 801af30:	4622      	mov	r2, r4
 801af32:	462b      	mov	r3, r5
 801af34:	4630      	mov	r0, r6
 801af36:	4639      	mov	r1, r7
 801af38:	f7e5 f9a6 	bl	8000288 <__aeabi_dsub>
 801af3c:	e00f      	b.n	801af5e <__ieee754_rem_pio2+0x1ce>
 801af3e:	462b      	mov	r3, r5
 801af40:	4622      	mov	r2, r4
 801af42:	4630      	mov	r0, r6
 801af44:	4639      	mov	r1, r7
 801af46:	f7e5 f99f 	bl	8000288 <__aeabi_dsub>
 801af4a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801af4e:	9303      	str	r3, [sp, #12]
 801af50:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801af54:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 801af58:	f1b8 0f10 	cmp.w	r8, #16
 801af5c:	dc02      	bgt.n	801af64 <__ieee754_rem_pio2+0x1d4>
 801af5e:	e9ca 0100 	strd	r0, r1, [sl]
 801af62:	e039      	b.n	801afd8 <__ieee754_rem_pio2+0x248>
 801af64:	a34e      	add	r3, pc, #312	; (adr r3, 801b0a0 <__ieee754_rem_pio2+0x310>)
 801af66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af6a:	ec51 0b18 	vmov	r0, r1, d8
 801af6e:	f7e5 fb43 	bl	80005f8 <__aeabi_dmul>
 801af72:	4604      	mov	r4, r0
 801af74:	460d      	mov	r5, r1
 801af76:	4602      	mov	r2, r0
 801af78:	460b      	mov	r3, r1
 801af7a:	4630      	mov	r0, r6
 801af7c:	4639      	mov	r1, r7
 801af7e:	f7e5 f983 	bl	8000288 <__aeabi_dsub>
 801af82:	4602      	mov	r2, r0
 801af84:	460b      	mov	r3, r1
 801af86:	4680      	mov	r8, r0
 801af88:	4689      	mov	r9, r1
 801af8a:	4630      	mov	r0, r6
 801af8c:	4639      	mov	r1, r7
 801af8e:	f7e5 f97b 	bl	8000288 <__aeabi_dsub>
 801af92:	4622      	mov	r2, r4
 801af94:	462b      	mov	r3, r5
 801af96:	f7e5 f977 	bl	8000288 <__aeabi_dsub>
 801af9a:	a343      	add	r3, pc, #268	; (adr r3, 801b0a8 <__ieee754_rem_pio2+0x318>)
 801af9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afa0:	4604      	mov	r4, r0
 801afa2:	460d      	mov	r5, r1
 801afa4:	ec51 0b18 	vmov	r0, r1, d8
 801afa8:	f7e5 fb26 	bl	80005f8 <__aeabi_dmul>
 801afac:	4622      	mov	r2, r4
 801afae:	462b      	mov	r3, r5
 801afb0:	f7e5 f96a 	bl	8000288 <__aeabi_dsub>
 801afb4:	4602      	mov	r2, r0
 801afb6:	460b      	mov	r3, r1
 801afb8:	4604      	mov	r4, r0
 801afba:	460d      	mov	r5, r1
 801afbc:	4640      	mov	r0, r8
 801afbe:	4649      	mov	r1, r9
 801afc0:	f7e5 f962 	bl	8000288 <__aeabi_dsub>
 801afc4:	9a03      	ldr	r2, [sp, #12]
 801afc6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801afca:	1ad3      	subs	r3, r2, r3
 801afcc:	2b31      	cmp	r3, #49	; 0x31
 801afce:	dc24      	bgt.n	801b01a <__ieee754_rem_pio2+0x28a>
 801afd0:	e9ca 0100 	strd	r0, r1, [sl]
 801afd4:	4646      	mov	r6, r8
 801afd6:	464f      	mov	r7, r9
 801afd8:	e9da 8900 	ldrd	r8, r9, [sl]
 801afdc:	4630      	mov	r0, r6
 801afde:	4642      	mov	r2, r8
 801afe0:	464b      	mov	r3, r9
 801afe2:	4639      	mov	r1, r7
 801afe4:	f7e5 f950 	bl	8000288 <__aeabi_dsub>
 801afe8:	462b      	mov	r3, r5
 801afea:	4622      	mov	r2, r4
 801afec:	f7e5 f94c 	bl	8000288 <__aeabi_dsub>
 801aff0:	9b02      	ldr	r3, [sp, #8]
 801aff2:	2b00      	cmp	r3, #0
 801aff4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801aff8:	f6bf af0a 	bge.w	801ae10 <__ieee754_rem_pio2+0x80>
 801affc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b000:	f8ca 3004 	str.w	r3, [sl, #4]
 801b004:	f8ca 8000 	str.w	r8, [sl]
 801b008:	f8ca 0008 	str.w	r0, [sl, #8]
 801b00c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b010:	f8ca 300c 	str.w	r3, [sl, #12]
 801b014:	f1cb 0b00 	rsb	fp, fp, #0
 801b018:	e6fa      	b.n	801ae10 <__ieee754_rem_pio2+0x80>
 801b01a:	a327      	add	r3, pc, #156	; (adr r3, 801b0b8 <__ieee754_rem_pio2+0x328>)
 801b01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b020:	ec51 0b18 	vmov	r0, r1, d8
 801b024:	f7e5 fae8 	bl	80005f8 <__aeabi_dmul>
 801b028:	4604      	mov	r4, r0
 801b02a:	460d      	mov	r5, r1
 801b02c:	4602      	mov	r2, r0
 801b02e:	460b      	mov	r3, r1
 801b030:	4640      	mov	r0, r8
 801b032:	4649      	mov	r1, r9
 801b034:	f7e5 f928 	bl	8000288 <__aeabi_dsub>
 801b038:	4602      	mov	r2, r0
 801b03a:	460b      	mov	r3, r1
 801b03c:	4606      	mov	r6, r0
 801b03e:	460f      	mov	r7, r1
 801b040:	4640      	mov	r0, r8
 801b042:	4649      	mov	r1, r9
 801b044:	f7e5 f920 	bl	8000288 <__aeabi_dsub>
 801b048:	4622      	mov	r2, r4
 801b04a:	462b      	mov	r3, r5
 801b04c:	f7e5 f91c 	bl	8000288 <__aeabi_dsub>
 801b050:	a31b      	add	r3, pc, #108	; (adr r3, 801b0c0 <__ieee754_rem_pio2+0x330>)
 801b052:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b056:	4604      	mov	r4, r0
 801b058:	460d      	mov	r5, r1
 801b05a:	ec51 0b18 	vmov	r0, r1, d8
 801b05e:	f7e5 facb 	bl	80005f8 <__aeabi_dmul>
 801b062:	4622      	mov	r2, r4
 801b064:	462b      	mov	r3, r5
 801b066:	f7e5 f90f 	bl	8000288 <__aeabi_dsub>
 801b06a:	4604      	mov	r4, r0
 801b06c:	460d      	mov	r5, r1
 801b06e:	e75f      	b.n	801af30 <__ieee754_rem_pio2+0x1a0>
 801b070:	4b1b      	ldr	r3, [pc, #108]	; (801b0e0 <__ieee754_rem_pio2+0x350>)
 801b072:	4598      	cmp	r8, r3
 801b074:	dd36      	ble.n	801b0e4 <__ieee754_rem_pio2+0x354>
 801b076:	ee10 2a10 	vmov	r2, s0
 801b07a:	462b      	mov	r3, r5
 801b07c:	4620      	mov	r0, r4
 801b07e:	4629      	mov	r1, r5
 801b080:	f7e5 f902 	bl	8000288 <__aeabi_dsub>
 801b084:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b088:	e9ca 0100 	strd	r0, r1, [sl]
 801b08c:	e694      	b.n	801adb8 <__ieee754_rem_pio2+0x28>
 801b08e:	bf00      	nop
 801b090:	54400000 	.word	0x54400000
 801b094:	3ff921fb 	.word	0x3ff921fb
 801b098:	1a626331 	.word	0x1a626331
 801b09c:	3dd0b461 	.word	0x3dd0b461
 801b0a0:	1a600000 	.word	0x1a600000
 801b0a4:	3dd0b461 	.word	0x3dd0b461
 801b0a8:	2e037073 	.word	0x2e037073
 801b0ac:	3ba3198a 	.word	0x3ba3198a
 801b0b0:	6dc9c883 	.word	0x6dc9c883
 801b0b4:	3fe45f30 	.word	0x3fe45f30
 801b0b8:	2e000000 	.word	0x2e000000
 801b0bc:	3ba3198a 	.word	0x3ba3198a
 801b0c0:	252049c1 	.word	0x252049c1
 801b0c4:	397b839a 	.word	0x397b839a
 801b0c8:	3fe921fb 	.word	0x3fe921fb
 801b0cc:	4002d97b 	.word	0x4002d97b
 801b0d0:	3ff921fb 	.word	0x3ff921fb
 801b0d4:	413921fb 	.word	0x413921fb
 801b0d8:	3fe00000 	.word	0x3fe00000
 801b0dc:	0801c9f8 	.word	0x0801c9f8
 801b0e0:	7fefffff 	.word	0x7fefffff
 801b0e4:	ea4f 5428 	mov.w	r4, r8, asr #20
 801b0e8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801b0ec:	ee10 0a10 	vmov	r0, s0
 801b0f0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801b0f4:	ee10 6a10 	vmov	r6, s0
 801b0f8:	460f      	mov	r7, r1
 801b0fa:	f7e5 fd2d 	bl	8000b58 <__aeabi_d2iz>
 801b0fe:	f7e5 fa11 	bl	8000524 <__aeabi_i2d>
 801b102:	4602      	mov	r2, r0
 801b104:	460b      	mov	r3, r1
 801b106:	4630      	mov	r0, r6
 801b108:	4639      	mov	r1, r7
 801b10a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b10e:	f7e5 f8bb 	bl	8000288 <__aeabi_dsub>
 801b112:	4b22      	ldr	r3, [pc, #136]	; (801b19c <__ieee754_rem_pio2+0x40c>)
 801b114:	2200      	movs	r2, #0
 801b116:	f7e5 fa6f 	bl	80005f8 <__aeabi_dmul>
 801b11a:	460f      	mov	r7, r1
 801b11c:	4606      	mov	r6, r0
 801b11e:	f7e5 fd1b 	bl	8000b58 <__aeabi_d2iz>
 801b122:	f7e5 f9ff 	bl	8000524 <__aeabi_i2d>
 801b126:	4602      	mov	r2, r0
 801b128:	460b      	mov	r3, r1
 801b12a:	4630      	mov	r0, r6
 801b12c:	4639      	mov	r1, r7
 801b12e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b132:	f7e5 f8a9 	bl	8000288 <__aeabi_dsub>
 801b136:	4b19      	ldr	r3, [pc, #100]	; (801b19c <__ieee754_rem_pio2+0x40c>)
 801b138:	2200      	movs	r2, #0
 801b13a:	f7e5 fa5d 	bl	80005f8 <__aeabi_dmul>
 801b13e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b142:	ad04      	add	r5, sp, #16
 801b144:	f04f 0803 	mov.w	r8, #3
 801b148:	46a9      	mov	r9, r5
 801b14a:	2600      	movs	r6, #0
 801b14c:	2700      	movs	r7, #0
 801b14e:	4632      	mov	r2, r6
 801b150:	463b      	mov	r3, r7
 801b152:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801b156:	46c3      	mov	fp, r8
 801b158:	3d08      	subs	r5, #8
 801b15a:	f108 38ff 	add.w	r8, r8, #4294967295
 801b15e:	f7e5 fcb3 	bl	8000ac8 <__aeabi_dcmpeq>
 801b162:	2800      	cmp	r0, #0
 801b164:	d1f3      	bne.n	801b14e <__ieee754_rem_pio2+0x3be>
 801b166:	4b0e      	ldr	r3, [pc, #56]	; (801b1a0 <__ieee754_rem_pio2+0x410>)
 801b168:	9301      	str	r3, [sp, #4]
 801b16a:	2302      	movs	r3, #2
 801b16c:	9300      	str	r3, [sp, #0]
 801b16e:	4622      	mov	r2, r4
 801b170:	465b      	mov	r3, fp
 801b172:	4651      	mov	r1, sl
 801b174:	4648      	mov	r0, r9
 801b176:	f000 f993 	bl	801b4a0 <__kernel_rem_pio2>
 801b17a:	9b02      	ldr	r3, [sp, #8]
 801b17c:	2b00      	cmp	r3, #0
 801b17e:	4683      	mov	fp, r0
 801b180:	f6bf ae46 	bge.w	801ae10 <__ieee754_rem_pio2+0x80>
 801b184:	f8da 3004 	ldr.w	r3, [sl, #4]
 801b188:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801b18c:	f8ca 3004 	str.w	r3, [sl, #4]
 801b190:	f8da 300c 	ldr.w	r3, [sl, #12]
 801b194:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801b198:	e73a      	b.n	801b010 <__ieee754_rem_pio2+0x280>
 801b19a:	bf00      	nop
 801b19c:	41700000 	.word	0x41700000
 801b1a0:	0801ca78 	.word	0x0801ca78

0801b1a4 <__ieee754_sqrt>:
 801b1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1a8:	ec55 4b10 	vmov	r4, r5, d0
 801b1ac:	4e56      	ldr	r6, [pc, #344]	; (801b308 <__ieee754_sqrt+0x164>)
 801b1ae:	43ae      	bics	r6, r5
 801b1b0:	ee10 0a10 	vmov	r0, s0
 801b1b4:	ee10 3a10 	vmov	r3, s0
 801b1b8:	4629      	mov	r1, r5
 801b1ba:	462a      	mov	r2, r5
 801b1bc:	d110      	bne.n	801b1e0 <__ieee754_sqrt+0x3c>
 801b1be:	ee10 2a10 	vmov	r2, s0
 801b1c2:	462b      	mov	r3, r5
 801b1c4:	f7e5 fa18 	bl	80005f8 <__aeabi_dmul>
 801b1c8:	4602      	mov	r2, r0
 801b1ca:	460b      	mov	r3, r1
 801b1cc:	4620      	mov	r0, r4
 801b1ce:	4629      	mov	r1, r5
 801b1d0:	f7e5 f85c 	bl	800028c <__adddf3>
 801b1d4:	4604      	mov	r4, r0
 801b1d6:	460d      	mov	r5, r1
 801b1d8:	ec45 4b10 	vmov	d0, r4, r5
 801b1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b1e0:	2d00      	cmp	r5, #0
 801b1e2:	dc10      	bgt.n	801b206 <__ieee754_sqrt+0x62>
 801b1e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b1e8:	4330      	orrs	r0, r6
 801b1ea:	d0f5      	beq.n	801b1d8 <__ieee754_sqrt+0x34>
 801b1ec:	b15d      	cbz	r5, 801b206 <__ieee754_sqrt+0x62>
 801b1ee:	ee10 2a10 	vmov	r2, s0
 801b1f2:	462b      	mov	r3, r5
 801b1f4:	ee10 0a10 	vmov	r0, s0
 801b1f8:	f7e5 f846 	bl	8000288 <__aeabi_dsub>
 801b1fc:	4602      	mov	r2, r0
 801b1fe:	460b      	mov	r3, r1
 801b200:	f7e5 fb24 	bl	800084c <__aeabi_ddiv>
 801b204:	e7e6      	b.n	801b1d4 <__ieee754_sqrt+0x30>
 801b206:	1509      	asrs	r1, r1, #20
 801b208:	d076      	beq.n	801b2f8 <__ieee754_sqrt+0x154>
 801b20a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801b20e:	07ce      	lsls	r6, r1, #31
 801b210:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801b214:	bf5e      	ittt	pl
 801b216:	0fda      	lsrpl	r2, r3, #31
 801b218:	005b      	lslpl	r3, r3, #1
 801b21a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801b21e:	0fda      	lsrs	r2, r3, #31
 801b220:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801b224:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801b228:	2000      	movs	r0, #0
 801b22a:	106d      	asrs	r5, r5, #1
 801b22c:	005b      	lsls	r3, r3, #1
 801b22e:	f04f 0e16 	mov.w	lr, #22
 801b232:	4684      	mov	ip, r0
 801b234:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801b238:	eb0c 0401 	add.w	r4, ip, r1
 801b23c:	4294      	cmp	r4, r2
 801b23e:	bfde      	ittt	le
 801b240:	1b12      	suble	r2, r2, r4
 801b242:	eb04 0c01 	addle.w	ip, r4, r1
 801b246:	1840      	addle	r0, r0, r1
 801b248:	0052      	lsls	r2, r2, #1
 801b24a:	f1be 0e01 	subs.w	lr, lr, #1
 801b24e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801b252:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801b256:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b25a:	d1ed      	bne.n	801b238 <__ieee754_sqrt+0x94>
 801b25c:	4671      	mov	r1, lr
 801b25e:	2720      	movs	r7, #32
 801b260:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801b264:	4562      	cmp	r2, ip
 801b266:	eb04 060e 	add.w	r6, r4, lr
 801b26a:	dc02      	bgt.n	801b272 <__ieee754_sqrt+0xce>
 801b26c:	d113      	bne.n	801b296 <__ieee754_sqrt+0xf2>
 801b26e:	429e      	cmp	r6, r3
 801b270:	d811      	bhi.n	801b296 <__ieee754_sqrt+0xf2>
 801b272:	2e00      	cmp	r6, #0
 801b274:	eb06 0e04 	add.w	lr, r6, r4
 801b278:	da43      	bge.n	801b302 <__ieee754_sqrt+0x15e>
 801b27a:	f1be 0f00 	cmp.w	lr, #0
 801b27e:	db40      	blt.n	801b302 <__ieee754_sqrt+0x15e>
 801b280:	f10c 0801 	add.w	r8, ip, #1
 801b284:	eba2 020c 	sub.w	r2, r2, ip
 801b288:	429e      	cmp	r6, r3
 801b28a:	bf88      	it	hi
 801b28c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801b290:	1b9b      	subs	r3, r3, r6
 801b292:	4421      	add	r1, r4
 801b294:	46c4      	mov	ip, r8
 801b296:	0052      	lsls	r2, r2, #1
 801b298:	3f01      	subs	r7, #1
 801b29a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801b29e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801b2a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b2a6:	d1dd      	bne.n	801b264 <__ieee754_sqrt+0xc0>
 801b2a8:	4313      	orrs	r3, r2
 801b2aa:	d006      	beq.n	801b2ba <__ieee754_sqrt+0x116>
 801b2ac:	1c4c      	adds	r4, r1, #1
 801b2ae:	bf13      	iteet	ne
 801b2b0:	3101      	addne	r1, #1
 801b2b2:	3001      	addeq	r0, #1
 801b2b4:	4639      	moveq	r1, r7
 801b2b6:	f021 0101 	bicne.w	r1, r1, #1
 801b2ba:	1043      	asrs	r3, r0, #1
 801b2bc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801b2c0:	0849      	lsrs	r1, r1, #1
 801b2c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801b2c6:	07c2      	lsls	r2, r0, #31
 801b2c8:	bf48      	it	mi
 801b2ca:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801b2ce:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801b2d2:	460c      	mov	r4, r1
 801b2d4:	463d      	mov	r5, r7
 801b2d6:	e77f      	b.n	801b1d8 <__ieee754_sqrt+0x34>
 801b2d8:	0ada      	lsrs	r2, r3, #11
 801b2da:	3815      	subs	r0, #21
 801b2dc:	055b      	lsls	r3, r3, #21
 801b2de:	2a00      	cmp	r2, #0
 801b2e0:	d0fa      	beq.n	801b2d8 <__ieee754_sqrt+0x134>
 801b2e2:	02d7      	lsls	r7, r2, #11
 801b2e4:	d50a      	bpl.n	801b2fc <__ieee754_sqrt+0x158>
 801b2e6:	f1c1 0420 	rsb	r4, r1, #32
 801b2ea:	fa23 f404 	lsr.w	r4, r3, r4
 801b2ee:	1e4d      	subs	r5, r1, #1
 801b2f0:	408b      	lsls	r3, r1
 801b2f2:	4322      	orrs	r2, r4
 801b2f4:	1b41      	subs	r1, r0, r5
 801b2f6:	e788      	b.n	801b20a <__ieee754_sqrt+0x66>
 801b2f8:	4608      	mov	r0, r1
 801b2fa:	e7f0      	b.n	801b2de <__ieee754_sqrt+0x13a>
 801b2fc:	0052      	lsls	r2, r2, #1
 801b2fe:	3101      	adds	r1, #1
 801b300:	e7ef      	b.n	801b2e2 <__ieee754_sqrt+0x13e>
 801b302:	46e0      	mov	r8, ip
 801b304:	e7be      	b.n	801b284 <__ieee754_sqrt+0xe0>
 801b306:	bf00      	nop
 801b308:	7ff00000 	.word	0x7ff00000
 801b30c:	00000000 	.word	0x00000000

0801b310 <__kernel_cos>:
 801b310:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b314:	ec57 6b10 	vmov	r6, r7, d0
 801b318:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801b31c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801b320:	ed8d 1b00 	vstr	d1, [sp]
 801b324:	da07      	bge.n	801b336 <__kernel_cos+0x26>
 801b326:	ee10 0a10 	vmov	r0, s0
 801b32a:	4639      	mov	r1, r7
 801b32c:	f7e5 fc14 	bl	8000b58 <__aeabi_d2iz>
 801b330:	2800      	cmp	r0, #0
 801b332:	f000 8088 	beq.w	801b446 <__kernel_cos+0x136>
 801b336:	4632      	mov	r2, r6
 801b338:	463b      	mov	r3, r7
 801b33a:	4630      	mov	r0, r6
 801b33c:	4639      	mov	r1, r7
 801b33e:	f7e5 f95b 	bl	80005f8 <__aeabi_dmul>
 801b342:	4b51      	ldr	r3, [pc, #324]	; (801b488 <__kernel_cos+0x178>)
 801b344:	2200      	movs	r2, #0
 801b346:	4604      	mov	r4, r0
 801b348:	460d      	mov	r5, r1
 801b34a:	f7e5 f955 	bl	80005f8 <__aeabi_dmul>
 801b34e:	a340      	add	r3, pc, #256	; (adr r3, 801b450 <__kernel_cos+0x140>)
 801b350:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b354:	4682      	mov	sl, r0
 801b356:	468b      	mov	fp, r1
 801b358:	4620      	mov	r0, r4
 801b35a:	4629      	mov	r1, r5
 801b35c:	f7e5 f94c 	bl	80005f8 <__aeabi_dmul>
 801b360:	a33d      	add	r3, pc, #244	; (adr r3, 801b458 <__kernel_cos+0x148>)
 801b362:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b366:	f7e4 ff91 	bl	800028c <__adddf3>
 801b36a:	4622      	mov	r2, r4
 801b36c:	462b      	mov	r3, r5
 801b36e:	f7e5 f943 	bl	80005f8 <__aeabi_dmul>
 801b372:	a33b      	add	r3, pc, #236	; (adr r3, 801b460 <__kernel_cos+0x150>)
 801b374:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b378:	f7e4 ff86 	bl	8000288 <__aeabi_dsub>
 801b37c:	4622      	mov	r2, r4
 801b37e:	462b      	mov	r3, r5
 801b380:	f7e5 f93a 	bl	80005f8 <__aeabi_dmul>
 801b384:	a338      	add	r3, pc, #224	; (adr r3, 801b468 <__kernel_cos+0x158>)
 801b386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b38a:	f7e4 ff7f 	bl	800028c <__adddf3>
 801b38e:	4622      	mov	r2, r4
 801b390:	462b      	mov	r3, r5
 801b392:	f7e5 f931 	bl	80005f8 <__aeabi_dmul>
 801b396:	a336      	add	r3, pc, #216	; (adr r3, 801b470 <__kernel_cos+0x160>)
 801b398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b39c:	f7e4 ff74 	bl	8000288 <__aeabi_dsub>
 801b3a0:	4622      	mov	r2, r4
 801b3a2:	462b      	mov	r3, r5
 801b3a4:	f7e5 f928 	bl	80005f8 <__aeabi_dmul>
 801b3a8:	a333      	add	r3, pc, #204	; (adr r3, 801b478 <__kernel_cos+0x168>)
 801b3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3ae:	f7e4 ff6d 	bl	800028c <__adddf3>
 801b3b2:	4622      	mov	r2, r4
 801b3b4:	462b      	mov	r3, r5
 801b3b6:	f7e5 f91f 	bl	80005f8 <__aeabi_dmul>
 801b3ba:	4622      	mov	r2, r4
 801b3bc:	462b      	mov	r3, r5
 801b3be:	f7e5 f91b 	bl	80005f8 <__aeabi_dmul>
 801b3c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b3c6:	4604      	mov	r4, r0
 801b3c8:	460d      	mov	r5, r1
 801b3ca:	4630      	mov	r0, r6
 801b3cc:	4639      	mov	r1, r7
 801b3ce:	f7e5 f913 	bl	80005f8 <__aeabi_dmul>
 801b3d2:	460b      	mov	r3, r1
 801b3d4:	4602      	mov	r2, r0
 801b3d6:	4629      	mov	r1, r5
 801b3d8:	4620      	mov	r0, r4
 801b3da:	f7e4 ff55 	bl	8000288 <__aeabi_dsub>
 801b3de:	4b2b      	ldr	r3, [pc, #172]	; (801b48c <__kernel_cos+0x17c>)
 801b3e0:	4598      	cmp	r8, r3
 801b3e2:	4606      	mov	r6, r0
 801b3e4:	460f      	mov	r7, r1
 801b3e6:	dc10      	bgt.n	801b40a <__kernel_cos+0xfa>
 801b3e8:	4602      	mov	r2, r0
 801b3ea:	460b      	mov	r3, r1
 801b3ec:	4650      	mov	r0, sl
 801b3ee:	4659      	mov	r1, fp
 801b3f0:	f7e4 ff4a 	bl	8000288 <__aeabi_dsub>
 801b3f4:	460b      	mov	r3, r1
 801b3f6:	4926      	ldr	r1, [pc, #152]	; (801b490 <__kernel_cos+0x180>)
 801b3f8:	4602      	mov	r2, r0
 801b3fa:	2000      	movs	r0, #0
 801b3fc:	f7e4 ff44 	bl	8000288 <__aeabi_dsub>
 801b400:	ec41 0b10 	vmov	d0, r0, r1
 801b404:	b003      	add	sp, #12
 801b406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b40a:	4b22      	ldr	r3, [pc, #136]	; (801b494 <__kernel_cos+0x184>)
 801b40c:	4920      	ldr	r1, [pc, #128]	; (801b490 <__kernel_cos+0x180>)
 801b40e:	4598      	cmp	r8, r3
 801b410:	bfcc      	ite	gt
 801b412:	4d21      	ldrgt	r5, [pc, #132]	; (801b498 <__kernel_cos+0x188>)
 801b414:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801b418:	2400      	movs	r4, #0
 801b41a:	4622      	mov	r2, r4
 801b41c:	462b      	mov	r3, r5
 801b41e:	2000      	movs	r0, #0
 801b420:	f7e4 ff32 	bl	8000288 <__aeabi_dsub>
 801b424:	4622      	mov	r2, r4
 801b426:	4680      	mov	r8, r0
 801b428:	4689      	mov	r9, r1
 801b42a:	462b      	mov	r3, r5
 801b42c:	4650      	mov	r0, sl
 801b42e:	4659      	mov	r1, fp
 801b430:	f7e4 ff2a 	bl	8000288 <__aeabi_dsub>
 801b434:	4632      	mov	r2, r6
 801b436:	463b      	mov	r3, r7
 801b438:	f7e4 ff26 	bl	8000288 <__aeabi_dsub>
 801b43c:	4602      	mov	r2, r0
 801b43e:	460b      	mov	r3, r1
 801b440:	4640      	mov	r0, r8
 801b442:	4649      	mov	r1, r9
 801b444:	e7da      	b.n	801b3fc <__kernel_cos+0xec>
 801b446:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801b480 <__kernel_cos+0x170>
 801b44a:	e7db      	b.n	801b404 <__kernel_cos+0xf4>
 801b44c:	f3af 8000 	nop.w
 801b450:	be8838d4 	.word	0xbe8838d4
 801b454:	bda8fae9 	.word	0xbda8fae9
 801b458:	bdb4b1c4 	.word	0xbdb4b1c4
 801b45c:	3e21ee9e 	.word	0x3e21ee9e
 801b460:	809c52ad 	.word	0x809c52ad
 801b464:	3e927e4f 	.word	0x3e927e4f
 801b468:	19cb1590 	.word	0x19cb1590
 801b46c:	3efa01a0 	.word	0x3efa01a0
 801b470:	16c15177 	.word	0x16c15177
 801b474:	3f56c16c 	.word	0x3f56c16c
 801b478:	5555554c 	.word	0x5555554c
 801b47c:	3fa55555 	.word	0x3fa55555
 801b480:	00000000 	.word	0x00000000
 801b484:	3ff00000 	.word	0x3ff00000
 801b488:	3fe00000 	.word	0x3fe00000
 801b48c:	3fd33332 	.word	0x3fd33332
 801b490:	3ff00000 	.word	0x3ff00000
 801b494:	3fe90000 	.word	0x3fe90000
 801b498:	3fd20000 	.word	0x3fd20000
 801b49c:	00000000 	.word	0x00000000

0801b4a0 <__kernel_rem_pio2>:
 801b4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4a4:	ed2d 8b02 	vpush	{d8}
 801b4a8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801b4ac:	f112 0f14 	cmn.w	r2, #20
 801b4b0:	9308      	str	r3, [sp, #32]
 801b4b2:	9101      	str	r1, [sp, #4]
 801b4b4:	4bc6      	ldr	r3, [pc, #792]	; (801b7d0 <__kernel_rem_pio2+0x330>)
 801b4b6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801b4b8:	9009      	str	r0, [sp, #36]	; 0x24
 801b4ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b4be:	9304      	str	r3, [sp, #16]
 801b4c0:	9b08      	ldr	r3, [sp, #32]
 801b4c2:	f103 33ff 	add.w	r3, r3, #4294967295
 801b4c6:	bfa8      	it	ge
 801b4c8:	1ed4      	subge	r4, r2, #3
 801b4ca:	9306      	str	r3, [sp, #24]
 801b4cc:	bfb2      	itee	lt
 801b4ce:	2400      	movlt	r4, #0
 801b4d0:	2318      	movge	r3, #24
 801b4d2:	fb94 f4f3 	sdivge	r4, r4, r3
 801b4d6:	f06f 0317 	mvn.w	r3, #23
 801b4da:	fb04 3303 	mla	r3, r4, r3, r3
 801b4de:	eb03 0a02 	add.w	sl, r3, r2
 801b4e2:	9b04      	ldr	r3, [sp, #16]
 801b4e4:	9a06      	ldr	r2, [sp, #24]
 801b4e6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801b7c0 <__kernel_rem_pio2+0x320>
 801b4ea:	eb03 0802 	add.w	r8, r3, r2
 801b4ee:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801b4f0:	1aa7      	subs	r7, r4, r2
 801b4f2:	ae20      	add	r6, sp, #128	; 0x80
 801b4f4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801b4f8:	2500      	movs	r5, #0
 801b4fa:	4545      	cmp	r5, r8
 801b4fc:	dd18      	ble.n	801b530 <__kernel_rem_pio2+0x90>
 801b4fe:	9b08      	ldr	r3, [sp, #32]
 801b500:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801b504:	aa20      	add	r2, sp, #128	; 0x80
 801b506:	ed9f 8bae 	vldr	d8, [pc, #696]	; 801b7c0 <__kernel_rem_pio2+0x320>
 801b50a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801b50e:	f1c3 0301 	rsb	r3, r3, #1
 801b512:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801b516:	9307      	str	r3, [sp, #28]
 801b518:	9b07      	ldr	r3, [sp, #28]
 801b51a:	9a04      	ldr	r2, [sp, #16]
 801b51c:	4443      	add	r3, r8
 801b51e:	429a      	cmp	r2, r3
 801b520:	db2f      	blt.n	801b582 <__kernel_rem_pio2+0xe2>
 801b522:	ed8d 8b02 	vstr	d8, [sp, #8]
 801b526:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801b52a:	462f      	mov	r7, r5
 801b52c:	2600      	movs	r6, #0
 801b52e:	e01b      	b.n	801b568 <__kernel_rem_pio2+0xc8>
 801b530:	42ef      	cmn	r7, r5
 801b532:	d407      	bmi.n	801b544 <__kernel_rem_pio2+0xa4>
 801b534:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801b538:	f7e4 fff4 	bl	8000524 <__aeabi_i2d>
 801b53c:	e8e6 0102 	strd	r0, r1, [r6], #8
 801b540:	3501      	adds	r5, #1
 801b542:	e7da      	b.n	801b4fa <__kernel_rem_pio2+0x5a>
 801b544:	ec51 0b18 	vmov	r0, r1, d8
 801b548:	e7f8      	b.n	801b53c <__kernel_rem_pio2+0x9c>
 801b54a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b54e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801b552:	f7e5 f851 	bl	80005f8 <__aeabi_dmul>
 801b556:	4602      	mov	r2, r0
 801b558:	460b      	mov	r3, r1
 801b55a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b55e:	f7e4 fe95 	bl	800028c <__adddf3>
 801b562:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b566:	3601      	adds	r6, #1
 801b568:	9b06      	ldr	r3, [sp, #24]
 801b56a:	429e      	cmp	r6, r3
 801b56c:	f1a7 0708 	sub.w	r7, r7, #8
 801b570:	ddeb      	ble.n	801b54a <__kernel_rem_pio2+0xaa>
 801b572:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b576:	3508      	adds	r5, #8
 801b578:	ecab 7b02 	vstmia	fp!, {d7}
 801b57c:	f108 0801 	add.w	r8, r8, #1
 801b580:	e7ca      	b.n	801b518 <__kernel_rem_pio2+0x78>
 801b582:	9b04      	ldr	r3, [sp, #16]
 801b584:	aa0c      	add	r2, sp, #48	; 0x30
 801b586:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b58a:	930b      	str	r3, [sp, #44]	; 0x2c
 801b58c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801b58e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801b592:	9c04      	ldr	r4, [sp, #16]
 801b594:	930a      	str	r3, [sp, #40]	; 0x28
 801b596:	ab98      	add	r3, sp, #608	; 0x260
 801b598:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b59c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801b5a0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 801b5a4:	f8cd b008 	str.w	fp, [sp, #8]
 801b5a8:	4625      	mov	r5, r4
 801b5aa:	2d00      	cmp	r5, #0
 801b5ac:	dc78      	bgt.n	801b6a0 <__kernel_rem_pio2+0x200>
 801b5ae:	ec47 6b10 	vmov	d0, r6, r7
 801b5b2:	4650      	mov	r0, sl
 801b5b4:	f000 fda0 	bl	801c0f8 <scalbn>
 801b5b8:	ec57 6b10 	vmov	r6, r7, d0
 801b5bc:	2200      	movs	r2, #0
 801b5be:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801b5c2:	ee10 0a10 	vmov	r0, s0
 801b5c6:	4639      	mov	r1, r7
 801b5c8:	f7e5 f816 	bl	80005f8 <__aeabi_dmul>
 801b5cc:	ec41 0b10 	vmov	d0, r0, r1
 801b5d0:	f000 fd12 	bl	801bff8 <floor>
 801b5d4:	4b7f      	ldr	r3, [pc, #508]	; (801b7d4 <__kernel_rem_pio2+0x334>)
 801b5d6:	ec51 0b10 	vmov	r0, r1, d0
 801b5da:	2200      	movs	r2, #0
 801b5dc:	f7e5 f80c 	bl	80005f8 <__aeabi_dmul>
 801b5e0:	4602      	mov	r2, r0
 801b5e2:	460b      	mov	r3, r1
 801b5e4:	4630      	mov	r0, r6
 801b5e6:	4639      	mov	r1, r7
 801b5e8:	f7e4 fe4e 	bl	8000288 <__aeabi_dsub>
 801b5ec:	460f      	mov	r7, r1
 801b5ee:	4606      	mov	r6, r0
 801b5f0:	f7e5 fab2 	bl	8000b58 <__aeabi_d2iz>
 801b5f4:	9007      	str	r0, [sp, #28]
 801b5f6:	f7e4 ff95 	bl	8000524 <__aeabi_i2d>
 801b5fa:	4602      	mov	r2, r0
 801b5fc:	460b      	mov	r3, r1
 801b5fe:	4630      	mov	r0, r6
 801b600:	4639      	mov	r1, r7
 801b602:	f7e4 fe41 	bl	8000288 <__aeabi_dsub>
 801b606:	f1ba 0f00 	cmp.w	sl, #0
 801b60a:	4606      	mov	r6, r0
 801b60c:	460f      	mov	r7, r1
 801b60e:	dd70      	ble.n	801b6f2 <__kernel_rem_pio2+0x252>
 801b610:	1e62      	subs	r2, r4, #1
 801b612:	ab0c      	add	r3, sp, #48	; 0x30
 801b614:	9d07      	ldr	r5, [sp, #28]
 801b616:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801b61a:	f1ca 0118 	rsb	r1, sl, #24
 801b61e:	fa40 f301 	asr.w	r3, r0, r1
 801b622:	441d      	add	r5, r3
 801b624:	408b      	lsls	r3, r1
 801b626:	1ac0      	subs	r0, r0, r3
 801b628:	ab0c      	add	r3, sp, #48	; 0x30
 801b62a:	9507      	str	r5, [sp, #28]
 801b62c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801b630:	f1ca 0317 	rsb	r3, sl, #23
 801b634:	fa40 f303 	asr.w	r3, r0, r3
 801b638:	9302      	str	r3, [sp, #8]
 801b63a:	9b02      	ldr	r3, [sp, #8]
 801b63c:	2b00      	cmp	r3, #0
 801b63e:	dd66      	ble.n	801b70e <__kernel_rem_pio2+0x26e>
 801b640:	9b07      	ldr	r3, [sp, #28]
 801b642:	2200      	movs	r2, #0
 801b644:	3301      	adds	r3, #1
 801b646:	9307      	str	r3, [sp, #28]
 801b648:	4615      	mov	r5, r2
 801b64a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801b64e:	4294      	cmp	r4, r2
 801b650:	f300 8099 	bgt.w	801b786 <__kernel_rem_pio2+0x2e6>
 801b654:	f1ba 0f00 	cmp.w	sl, #0
 801b658:	dd07      	ble.n	801b66a <__kernel_rem_pio2+0x1ca>
 801b65a:	f1ba 0f01 	cmp.w	sl, #1
 801b65e:	f000 80a5 	beq.w	801b7ac <__kernel_rem_pio2+0x30c>
 801b662:	f1ba 0f02 	cmp.w	sl, #2
 801b666:	f000 80c1 	beq.w	801b7ec <__kernel_rem_pio2+0x34c>
 801b66a:	9b02      	ldr	r3, [sp, #8]
 801b66c:	2b02      	cmp	r3, #2
 801b66e:	d14e      	bne.n	801b70e <__kernel_rem_pio2+0x26e>
 801b670:	4632      	mov	r2, r6
 801b672:	463b      	mov	r3, r7
 801b674:	4958      	ldr	r1, [pc, #352]	; (801b7d8 <__kernel_rem_pio2+0x338>)
 801b676:	2000      	movs	r0, #0
 801b678:	f7e4 fe06 	bl	8000288 <__aeabi_dsub>
 801b67c:	4606      	mov	r6, r0
 801b67e:	460f      	mov	r7, r1
 801b680:	2d00      	cmp	r5, #0
 801b682:	d044      	beq.n	801b70e <__kernel_rem_pio2+0x26e>
 801b684:	4650      	mov	r0, sl
 801b686:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801b7c8 <__kernel_rem_pio2+0x328>
 801b68a:	f000 fd35 	bl	801c0f8 <scalbn>
 801b68e:	4630      	mov	r0, r6
 801b690:	4639      	mov	r1, r7
 801b692:	ec53 2b10 	vmov	r2, r3, d0
 801b696:	f7e4 fdf7 	bl	8000288 <__aeabi_dsub>
 801b69a:	4606      	mov	r6, r0
 801b69c:	460f      	mov	r7, r1
 801b69e:	e036      	b.n	801b70e <__kernel_rem_pio2+0x26e>
 801b6a0:	4b4e      	ldr	r3, [pc, #312]	; (801b7dc <__kernel_rem_pio2+0x33c>)
 801b6a2:	2200      	movs	r2, #0
 801b6a4:	4630      	mov	r0, r6
 801b6a6:	4639      	mov	r1, r7
 801b6a8:	f7e4 ffa6 	bl	80005f8 <__aeabi_dmul>
 801b6ac:	f7e5 fa54 	bl	8000b58 <__aeabi_d2iz>
 801b6b0:	f7e4 ff38 	bl	8000524 <__aeabi_i2d>
 801b6b4:	4b4a      	ldr	r3, [pc, #296]	; (801b7e0 <__kernel_rem_pio2+0x340>)
 801b6b6:	2200      	movs	r2, #0
 801b6b8:	4680      	mov	r8, r0
 801b6ba:	4689      	mov	r9, r1
 801b6bc:	f7e4 ff9c 	bl	80005f8 <__aeabi_dmul>
 801b6c0:	4602      	mov	r2, r0
 801b6c2:	460b      	mov	r3, r1
 801b6c4:	4630      	mov	r0, r6
 801b6c6:	4639      	mov	r1, r7
 801b6c8:	f7e4 fdde 	bl	8000288 <__aeabi_dsub>
 801b6cc:	f7e5 fa44 	bl	8000b58 <__aeabi_d2iz>
 801b6d0:	9b02      	ldr	r3, [sp, #8]
 801b6d2:	f843 0b04 	str.w	r0, [r3], #4
 801b6d6:	3d01      	subs	r5, #1
 801b6d8:	9302      	str	r3, [sp, #8]
 801b6da:	ab70      	add	r3, sp, #448	; 0x1c0
 801b6dc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6e4:	4640      	mov	r0, r8
 801b6e6:	4649      	mov	r1, r9
 801b6e8:	f7e4 fdd0 	bl	800028c <__adddf3>
 801b6ec:	4606      	mov	r6, r0
 801b6ee:	460f      	mov	r7, r1
 801b6f0:	e75b      	b.n	801b5aa <__kernel_rem_pio2+0x10a>
 801b6f2:	d105      	bne.n	801b700 <__kernel_rem_pio2+0x260>
 801b6f4:	1e63      	subs	r3, r4, #1
 801b6f6:	aa0c      	add	r2, sp, #48	; 0x30
 801b6f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b6fc:	15c3      	asrs	r3, r0, #23
 801b6fe:	e79b      	b.n	801b638 <__kernel_rem_pio2+0x198>
 801b700:	4b38      	ldr	r3, [pc, #224]	; (801b7e4 <__kernel_rem_pio2+0x344>)
 801b702:	2200      	movs	r2, #0
 801b704:	f7e5 f9fe 	bl	8000b04 <__aeabi_dcmpge>
 801b708:	2800      	cmp	r0, #0
 801b70a:	d139      	bne.n	801b780 <__kernel_rem_pio2+0x2e0>
 801b70c:	9002      	str	r0, [sp, #8]
 801b70e:	2200      	movs	r2, #0
 801b710:	2300      	movs	r3, #0
 801b712:	4630      	mov	r0, r6
 801b714:	4639      	mov	r1, r7
 801b716:	f7e5 f9d7 	bl	8000ac8 <__aeabi_dcmpeq>
 801b71a:	2800      	cmp	r0, #0
 801b71c:	f000 80b4 	beq.w	801b888 <__kernel_rem_pio2+0x3e8>
 801b720:	f104 3bff 	add.w	fp, r4, #4294967295
 801b724:	465b      	mov	r3, fp
 801b726:	2200      	movs	r2, #0
 801b728:	9904      	ldr	r1, [sp, #16]
 801b72a:	428b      	cmp	r3, r1
 801b72c:	da65      	bge.n	801b7fa <__kernel_rem_pio2+0x35a>
 801b72e:	2a00      	cmp	r2, #0
 801b730:	d07b      	beq.n	801b82a <__kernel_rem_pio2+0x38a>
 801b732:	ab0c      	add	r3, sp, #48	; 0x30
 801b734:	f1aa 0a18 	sub.w	sl, sl, #24
 801b738:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801b73c:	2b00      	cmp	r3, #0
 801b73e:	f000 80a0 	beq.w	801b882 <__kernel_rem_pio2+0x3e2>
 801b742:	ed9f 0b21 	vldr	d0, [pc, #132]	; 801b7c8 <__kernel_rem_pio2+0x328>
 801b746:	4650      	mov	r0, sl
 801b748:	f000 fcd6 	bl	801c0f8 <scalbn>
 801b74c:	4f23      	ldr	r7, [pc, #140]	; (801b7dc <__kernel_rem_pio2+0x33c>)
 801b74e:	ec55 4b10 	vmov	r4, r5, d0
 801b752:	46d8      	mov	r8, fp
 801b754:	2600      	movs	r6, #0
 801b756:	f1b8 0f00 	cmp.w	r8, #0
 801b75a:	f280 80cf 	bge.w	801b8fc <__kernel_rem_pio2+0x45c>
 801b75e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 801b7c0 <__kernel_rem_pio2+0x320>
 801b762:	465f      	mov	r7, fp
 801b764:	f04f 0800 	mov.w	r8, #0
 801b768:	2f00      	cmp	r7, #0
 801b76a:	f2c0 80fd 	blt.w	801b968 <__kernel_rem_pio2+0x4c8>
 801b76e:	ab70      	add	r3, sp, #448	; 0x1c0
 801b770:	f8df a074 	ldr.w	sl, [pc, #116]	; 801b7e8 <__kernel_rem_pio2+0x348>
 801b774:	ec55 4b18 	vmov	r4, r5, d8
 801b778:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801b77c:	2600      	movs	r6, #0
 801b77e:	e0e5      	b.n	801b94c <__kernel_rem_pio2+0x4ac>
 801b780:	2302      	movs	r3, #2
 801b782:	9302      	str	r3, [sp, #8]
 801b784:	e75c      	b.n	801b640 <__kernel_rem_pio2+0x1a0>
 801b786:	f8db 3000 	ldr.w	r3, [fp]
 801b78a:	b955      	cbnz	r5, 801b7a2 <__kernel_rem_pio2+0x302>
 801b78c:	b123      	cbz	r3, 801b798 <__kernel_rem_pio2+0x2f8>
 801b78e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801b792:	f8cb 3000 	str.w	r3, [fp]
 801b796:	2301      	movs	r3, #1
 801b798:	3201      	adds	r2, #1
 801b79a:	f10b 0b04 	add.w	fp, fp, #4
 801b79e:	461d      	mov	r5, r3
 801b7a0:	e755      	b.n	801b64e <__kernel_rem_pio2+0x1ae>
 801b7a2:	1acb      	subs	r3, r1, r3
 801b7a4:	f8cb 3000 	str.w	r3, [fp]
 801b7a8:	462b      	mov	r3, r5
 801b7aa:	e7f5      	b.n	801b798 <__kernel_rem_pio2+0x2f8>
 801b7ac:	1e62      	subs	r2, r4, #1
 801b7ae:	ab0c      	add	r3, sp, #48	; 0x30
 801b7b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b7b4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801b7b8:	a90c      	add	r1, sp, #48	; 0x30
 801b7ba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801b7be:	e754      	b.n	801b66a <__kernel_rem_pio2+0x1ca>
	...
 801b7cc:	3ff00000 	.word	0x3ff00000
 801b7d0:	0801cbc0 	.word	0x0801cbc0
 801b7d4:	40200000 	.word	0x40200000
 801b7d8:	3ff00000 	.word	0x3ff00000
 801b7dc:	3e700000 	.word	0x3e700000
 801b7e0:	41700000 	.word	0x41700000
 801b7e4:	3fe00000 	.word	0x3fe00000
 801b7e8:	0801cb80 	.word	0x0801cb80
 801b7ec:	1e62      	subs	r2, r4, #1
 801b7ee:	ab0c      	add	r3, sp, #48	; 0x30
 801b7f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b7f4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801b7f8:	e7de      	b.n	801b7b8 <__kernel_rem_pio2+0x318>
 801b7fa:	a90c      	add	r1, sp, #48	; 0x30
 801b7fc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801b800:	3b01      	subs	r3, #1
 801b802:	430a      	orrs	r2, r1
 801b804:	e790      	b.n	801b728 <__kernel_rem_pio2+0x288>
 801b806:	3301      	adds	r3, #1
 801b808:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801b80c:	2900      	cmp	r1, #0
 801b80e:	d0fa      	beq.n	801b806 <__kernel_rem_pio2+0x366>
 801b810:	9a08      	ldr	r2, [sp, #32]
 801b812:	18e3      	adds	r3, r4, r3
 801b814:	18a6      	adds	r6, r4, r2
 801b816:	aa20      	add	r2, sp, #128	; 0x80
 801b818:	1c65      	adds	r5, r4, #1
 801b81a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801b81e:	9302      	str	r3, [sp, #8]
 801b820:	9b02      	ldr	r3, [sp, #8]
 801b822:	42ab      	cmp	r3, r5
 801b824:	da04      	bge.n	801b830 <__kernel_rem_pio2+0x390>
 801b826:	461c      	mov	r4, r3
 801b828:	e6b5      	b.n	801b596 <__kernel_rem_pio2+0xf6>
 801b82a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b82c:	2301      	movs	r3, #1
 801b82e:	e7eb      	b.n	801b808 <__kernel_rem_pio2+0x368>
 801b830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b832:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b836:	f7e4 fe75 	bl	8000524 <__aeabi_i2d>
 801b83a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801b83e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b840:	46b3      	mov	fp, r6
 801b842:	461c      	mov	r4, r3
 801b844:	2700      	movs	r7, #0
 801b846:	f04f 0800 	mov.w	r8, #0
 801b84a:	f04f 0900 	mov.w	r9, #0
 801b84e:	9b06      	ldr	r3, [sp, #24]
 801b850:	429f      	cmp	r7, r3
 801b852:	dd06      	ble.n	801b862 <__kernel_rem_pio2+0x3c2>
 801b854:	ab70      	add	r3, sp, #448	; 0x1c0
 801b856:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b85a:	e9c3 8900 	strd	r8, r9, [r3]
 801b85e:	3501      	adds	r5, #1
 801b860:	e7de      	b.n	801b820 <__kernel_rem_pio2+0x380>
 801b862:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801b866:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801b86a:	f7e4 fec5 	bl	80005f8 <__aeabi_dmul>
 801b86e:	4602      	mov	r2, r0
 801b870:	460b      	mov	r3, r1
 801b872:	4640      	mov	r0, r8
 801b874:	4649      	mov	r1, r9
 801b876:	f7e4 fd09 	bl	800028c <__adddf3>
 801b87a:	3701      	adds	r7, #1
 801b87c:	4680      	mov	r8, r0
 801b87e:	4689      	mov	r9, r1
 801b880:	e7e5      	b.n	801b84e <__kernel_rem_pio2+0x3ae>
 801b882:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b886:	e754      	b.n	801b732 <__kernel_rem_pio2+0x292>
 801b888:	ec47 6b10 	vmov	d0, r6, r7
 801b88c:	f1ca 0000 	rsb	r0, sl, #0
 801b890:	f000 fc32 	bl	801c0f8 <scalbn>
 801b894:	ec57 6b10 	vmov	r6, r7, d0
 801b898:	4b9f      	ldr	r3, [pc, #636]	; (801bb18 <__kernel_rem_pio2+0x678>)
 801b89a:	ee10 0a10 	vmov	r0, s0
 801b89e:	2200      	movs	r2, #0
 801b8a0:	4639      	mov	r1, r7
 801b8a2:	f7e5 f92f 	bl	8000b04 <__aeabi_dcmpge>
 801b8a6:	b300      	cbz	r0, 801b8ea <__kernel_rem_pio2+0x44a>
 801b8a8:	4b9c      	ldr	r3, [pc, #624]	; (801bb1c <__kernel_rem_pio2+0x67c>)
 801b8aa:	2200      	movs	r2, #0
 801b8ac:	4630      	mov	r0, r6
 801b8ae:	4639      	mov	r1, r7
 801b8b0:	f7e4 fea2 	bl	80005f8 <__aeabi_dmul>
 801b8b4:	f7e5 f950 	bl	8000b58 <__aeabi_d2iz>
 801b8b8:	4605      	mov	r5, r0
 801b8ba:	f7e4 fe33 	bl	8000524 <__aeabi_i2d>
 801b8be:	4b96      	ldr	r3, [pc, #600]	; (801bb18 <__kernel_rem_pio2+0x678>)
 801b8c0:	2200      	movs	r2, #0
 801b8c2:	f7e4 fe99 	bl	80005f8 <__aeabi_dmul>
 801b8c6:	460b      	mov	r3, r1
 801b8c8:	4602      	mov	r2, r0
 801b8ca:	4639      	mov	r1, r7
 801b8cc:	4630      	mov	r0, r6
 801b8ce:	f7e4 fcdb 	bl	8000288 <__aeabi_dsub>
 801b8d2:	f7e5 f941 	bl	8000b58 <__aeabi_d2iz>
 801b8d6:	f104 0b01 	add.w	fp, r4, #1
 801b8da:	ab0c      	add	r3, sp, #48	; 0x30
 801b8dc:	f10a 0a18 	add.w	sl, sl, #24
 801b8e0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b8e4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 801b8e8:	e72b      	b.n	801b742 <__kernel_rem_pio2+0x2a2>
 801b8ea:	4630      	mov	r0, r6
 801b8ec:	4639      	mov	r1, r7
 801b8ee:	f7e5 f933 	bl	8000b58 <__aeabi_d2iz>
 801b8f2:	ab0c      	add	r3, sp, #48	; 0x30
 801b8f4:	46a3      	mov	fp, r4
 801b8f6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b8fa:	e722      	b.n	801b742 <__kernel_rem_pio2+0x2a2>
 801b8fc:	ab70      	add	r3, sp, #448	; 0x1c0
 801b8fe:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 801b902:	ab0c      	add	r3, sp, #48	; 0x30
 801b904:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801b908:	f7e4 fe0c 	bl	8000524 <__aeabi_i2d>
 801b90c:	4622      	mov	r2, r4
 801b90e:	462b      	mov	r3, r5
 801b910:	f7e4 fe72 	bl	80005f8 <__aeabi_dmul>
 801b914:	4632      	mov	r2, r6
 801b916:	e9c9 0100 	strd	r0, r1, [r9]
 801b91a:	463b      	mov	r3, r7
 801b91c:	4620      	mov	r0, r4
 801b91e:	4629      	mov	r1, r5
 801b920:	f7e4 fe6a 	bl	80005f8 <__aeabi_dmul>
 801b924:	f108 38ff 	add.w	r8, r8, #4294967295
 801b928:	4604      	mov	r4, r0
 801b92a:	460d      	mov	r5, r1
 801b92c:	e713      	b.n	801b756 <__kernel_rem_pio2+0x2b6>
 801b92e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801b932:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801b936:	f7e4 fe5f 	bl	80005f8 <__aeabi_dmul>
 801b93a:	4602      	mov	r2, r0
 801b93c:	460b      	mov	r3, r1
 801b93e:	4620      	mov	r0, r4
 801b940:	4629      	mov	r1, r5
 801b942:	f7e4 fca3 	bl	800028c <__adddf3>
 801b946:	3601      	adds	r6, #1
 801b948:	4604      	mov	r4, r0
 801b94a:	460d      	mov	r5, r1
 801b94c:	9b04      	ldr	r3, [sp, #16]
 801b94e:	429e      	cmp	r6, r3
 801b950:	dc01      	bgt.n	801b956 <__kernel_rem_pio2+0x4b6>
 801b952:	45b0      	cmp	r8, r6
 801b954:	daeb      	bge.n	801b92e <__kernel_rem_pio2+0x48e>
 801b956:	ab48      	add	r3, sp, #288	; 0x120
 801b958:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801b95c:	e9c3 4500 	strd	r4, r5, [r3]
 801b960:	3f01      	subs	r7, #1
 801b962:	f108 0801 	add.w	r8, r8, #1
 801b966:	e6ff      	b.n	801b768 <__kernel_rem_pio2+0x2c8>
 801b968:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801b96a:	2b02      	cmp	r3, #2
 801b96c:	dc0b      	bgt.n	801b986 <__kernel_rem_pio2+0x4e6>
 801b96e:	2b00      	cmp	r3, #0
 801b970:	dc6e      	bgt.n	801ba50 <__kernel_rem_pio2+0x5b0>
 801b972:	d045      	beq.n	801ba00 <__kernel_rem_pio2+0x560>
 801b974:	9b07      	ldr	r3, [sp, #28]
 801b976:	f003 0007 	and.w	r0, r3, #7
 801b97a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801b97e:	ecbd 8b02 	vpop	{d8}
 801b982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b986:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801b988:	2b03      	cmp	r3, #3
 801b98a:	d1f3      	bne.n	801b974 <__kernel_rem_pio2+0x4d4>
 801b98c:	ab48      	add	r3, sp, #288	; 0x120
 801b98e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 801b992:	46d0      	mov	r8, sl
 801b994:	46d9      	mov	r9, fp
 801b996:	f1b9 0f00 	cmp.w	r9, #0
 801b99a:	f1a8 0808 	sub.w	r8, r8, #8
 801b99e:	dc64      	bgt.n	801ba6a <__kernel_rem_pio2+0x5ca>
 801b9a0:	465c      	mov	r4, fp
 801b9a2:	2c01      	cmp	r4, #1
 801b9a4:	f1aa 0a08 	sub.w	sl, sl, #8
 801b9a8:	dc7e      	bgt.n	801baa8 <__kernel_rem_pio2+0x608>
 801b9aa:	2000      	movs	r0, #0
 801b9ac:	2100      	movs	r1, #0
 801b9ae:	f1bb 0f01 	cmp.w	fp, #1
 801b9b2:	f300 8097 	bgt.w	801bae4 <__kernel_rem_pio2+0x644>
 801b9b6:	9b02      	ldr	r3, [sp, #8]
 801b9b8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 801b9bc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	f040 8099 	bne.w	801baf8 <__kernel_rem_pio2+0x658>
 801b9c6:	9b01      	ldr	r3, [sp, #4]
 801b9c8:	e9c3 5600 	strd	r5, r6, [r3]
 801b9cc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801b9d0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801b9d4:	e7ce      	b.n	801b974 <__kernel_rem_pio2+0x4d4>
 801b9d6:	ab48      	add	r3, sp, #288	; 0x120
 801b9d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9e0:	f7e4 fc54 	bl	800028c <__adddf3>
 801b9e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b9e8:	f1bb 0f00 	cmp.w	fp, #0
 801b9ec:	daf3      	bge.n	801b9d6 <__kernel_rem_pio2+0x536>
 801b9ee:	9b02      	ldr	r3, [sp, #8]
 801b9f0:	b113      	cbz	r3, 801b9f8 <__kernel_rem_pio2+0x558>
 801b9f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b9f6:	4619      	mov	r1, r3
 801b9f8:	9b01      	ldr	r3, [sp, #4]
 801b9fa:	e9c3 0100 	strd	r0, r1, [r3]
 801b9fe:	e7b9      	b.n	801b974 <__kernel_rem_pio2+0x4d4>
 801ba00:	2000      	movs	r0, #0
 801ba02:	2100      	movs	r1, #0
 801ba04:	e7f0      	b.n	801b9e8 <__kernel_rem_pio2+0x548>
 801ba06:	ab48      	add	r3, sp, #288	; 0x120
 801ba08:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ba0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba10:	f7e4 fc3c 	bl	800028c <__adddf3>
 801ba14:	3c01      	subs	r4, #1
 801ba16:	2c00      	cmp	r4, #0
 801ba18:	daf5      	bge.n	801ba06 <__kernel_rem_pio2+0x566>
 801ba1a:	9b02      	ldr	r3, [sp, #8]
 801ba1c:	b1e3      	cbz	r3, 801ba58 <__kernel_rem_pio2+0x5b8>
 801ba1e:	4602      	mov	r2, r0
 801ba20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ba24:	9c01      	ldr	r4, [sp, #4]
 801ba26:	e9c4 2300 	strd	r2, r3, [r4]
 801ba2a:	4602      	mov	r2, r0
 801ba2c:	460b      	mov	r3, r1
 801ba2e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801ba32:	f7e4 fc29 	bl	8000288 <__aeabi_dsub>
 801ba36:	ad4a      	add	r5, sp, #296	; 0x128
 801ba38:	2401      	movs	r4, #1
 801ba3a:	45a3      	cmp	fp, r4
 801ba3c:	da0f      	bge.n	801ba5e <__kernel_rem_pio2+0x5be>
 801ba3e:	9b02      	ldr	r3, [sp, #8]
 801ba40:	b113      	cbz	r3, 801ba48 <__kernel_rem_pio2+0x5a8>
 801ba42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ba46:	4619      	mov	r1, r3
 801ba48:	9b01      	ldr	r3, [sp, #4]
 801ba4a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801ba4e:	e791      	b.n	801b974 <__kernel_rem_pio2+0x4d4>
 801ba50:	465c      	mov	r4, fp
 801ba52:	2000      	movs	r0, #0
 801ba54:	2100      	movs	r1, #0
 801ba56:	e7de      	b.n	801ba16 <__kernel_rem_pio2+0x576>
 801ba58:	4602      	mov	r2, r0
 801ba5a:	460b      	mov	r3, r1
 801ba5c:	e7e2      	b.n	801ba24 <__kernel_rem_pio2+0x584>
 801ba5e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801ba62:	f7e4 fc13 	bl	800028c <__adddf3>
 801ba66:	3401      	adds	r4, #1
 801ba68:	e7e7      	b.n	801ba3a <__kernel_rem_pio2+0x59a>
 801ba6a:	e9d8 4500 	ldrd	r4, r5, [r8]
 801ba6e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 801ba72:	4620      	mov	r0, r4
 801ba74:	4632      	mov	r2, r6
 801ba76:	463b      	mov	r3, r7
 801ba78:	4629      	mov	r1, r5
 801ba7a:	f7e4 fc07 	bl	800028c <__adddf3>
 801ba7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ba82:	4602      	mov	r2, r0
 801ba84:	460b      	mov	r3, r1
 801ba86:	4620      	mov	r0, r4
 801ba88:	4629      	mov	r1, r5
 801ba8a:	f7e4 fbfd 	bl	8000288 <__aeabi_dsub>
 801ba8e:	4632      	mov	r2, r6
 801ba90:	463b      	mov	r3, r7
 801ba92:	f7e4 fbfb 	bl	800028c <__adddf3>
 801ba96:	ed9d 7b04 	vldr	d7, [sp, #16]
 801ba9a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801ba9e:	ed88 7b00 	vstr	d7, [r8]
 801baa2:	f109 39ff 	add.w	r9, r9, #4294967295
 801baa6:	e776      	b.n	801b996 <__kernel_rem_pio2+0x4f6>
 801baa8:	e9da 8900 	ldrd	r8, r9, [sl]
 801baac:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801bab0:	4640      	mov	r0, r8
 801bab2:	4632      	mov	r2, r6
 801bab4:	463b      	mov	r3, r7
 801bab6:	4649      	mov	r1, r9
 801bab8:	f7e4 fbe8 	bl	800028c <__adddf3>
 801babc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bac0:	4602      	mov	r2, r0
 801bac2:	460b      	mov	r3, r1
 801bac4:	4640      	mov	r0, r8
 801bac6:	4649      	mov	r1, r9
 801bac8:	f7e4 fbde 	bl	8000288 <__aeabi_dsub>
 801bacc:	4632      	mov	r2, r6
 801bace:	463b      	mov	r3, r7
 801bad0:	f7e4 fbdc 	bl	800028c <__adddf3>
 801bad4:	ed9d 7b04 	vldr	d7, [sp, #16]
 801bad8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801badc:	ed8a 7b00 	vstr	d7, [sl]
 801bae0:	3c01      	subs	r4, #1
 801bae2:	e75e      	b.n	801b9a2 <__kernel_rem_pio2+0x502>
 801bae4:	ab48      	add	r3, sp, #288	; 0x120
 801bae6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801baea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baee:	f7e4 fbcd 	bl	800028c <__adddf3>
 801baf2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801baf6:	e75a      	b.n	801b9ae <__kernel_rem_pio2+0x50e>
 801baf8:	9b01      	ldr	r3, [sp, #4]
 801bafa:	9a01      	ldr	r2, [sp, #4]
 801bafc:	601d      	str	r5, [r3, #0]
 801bafe:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801bb02:	605c      	str	r4, [r3, #4]
 801bb04:	609f      	str	r7, [r3, #8]
 801bb06:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801bb0a:	60d3      	str	r3, [r2, #12]
 801bb0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bb10:	6110      	str	r0, [r2, #16]
 801bb12:	6153      	str	r3, [r2, #20]
 801bb14:	e72e      	b.n	801b974 <__kernel_rem_pio2+0x4d4>
 801bb16:	bf00      	nop
 801bb18:	41700000 	.word	0x41700000
 801bb1c:	3e700000 	.word	0x3e700000

0801bb20 <__kernel_sin>:
 801bb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb24:	ed2d 8b04 	vpush	{d8-d9}
 801bb28:	eeb0 8a41 	vmov.f32	s16, s2
 801bb2c:	eef0 8a61 	vmov.f32	s17, s3
 801bb30:	ec55 4b10 	vmov	r4, r5, d0
 801bb34:	b083      	sub	sp, #12
 801bb36:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801bb3a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801bb3e:	9001      	str	r0, [sp, #4]
 801bb40:	da06      	bge.n	801bb50 <__kernel_sin+0x30>
 801bb42:	ee10 0a10 	vmov	r0, s0
 801bb46:	4629      	mov	r1, r5
 801bb48:	f7e5 f806 	bl	8000b58 <__aeabi_d2iz>
 801bb4c:	2800      	cmp	r0, #0
 801bb4e:	d051      	beq.n	801bbf4 <__kernel_sin+0xd4>
 801bb50:	4622      	mov	r2, r4
 801bb52:	462b      	mov	r3, r5
 801bb54:	4620      	mov	r0, r4
 801bb56:	4629      	mov	r1, r5
 801bb58:	f7e4 fd4e 	bl	80005f8 <__aeabi_dmul>
 801bb5c:	4682      	mov	sl, r0
 801bb5e:	468b      	mov	fp, r1
 801bb60:	4602      	mov	r2, r0
 801bb62:	460b      	mov	r3, r1
 801bb64:	4620      	mov	r0, r4
 801bb66:	4629      	mov	r1, r5
 801bb68:	f7e4 fd46 	bl	80005f8 <__aeabi_dmul>
 801bb6c:	a341      	add	r3, pc, #260	; (adr r3, 801bc74 <__kernel_sin+0x154>)
 801bb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb72:	4680      	mov	r8, r0
 801bb74:	4689      	mov	r9, r1
 801bb76:	4650      	mov	r0, sl
 801bb78:	4659      	mov	r1, fp
 801bb7a:	f7e4 fd3d 	bl	80005f8 <__aeabi_dmul>
 801bb7e:	a33f      	add	r3, pc, #252	; (adr r3, 801bc7c <__kernel_sin+0x15c>)
 801bb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb84:	f7e4 fb80 	bl	8000288 <__aeabi_dsub>
 801bb88:	4652      	mov	r2, sl
 801bb8a:	465b      	mov	r3, fp
 801bb8c:	f7e4 fd34 	bl	80005f8 <__aeabi_dmul>
 801bb90:	a33c      	add	r3, pc, #240	; (adr r3, 801bc84 <__kernel_sin+0x164>)
 801bb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb96:	f7e4 fb79 	bl	800028c <__adddf3>
 801bb9a:	4652      	mov	r2, sl
 801bb9c:	465b      	mov	r3, fp
 801bb9e:	f7e4 fd2b 	bl	80005f8 <__aeabi_dmul>
 801bba2:	a33a      	add	r3, pc, #232	; (adr r3, 801bc8c <__kernel_sin+0x16c>)
 801bba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bba8:	f7e4 fb6e 	bl	8000288 <__aeabi_dsub>
 801bbac:	4652      	mov	r2, sl
 801bbae:	465b      	mov	r3, fp
 801bbb0:	f7e4 fd22 	bl	80005f8 <__aeabi_dmul>
 801bbb4:	a337      	add	r3, pc, #220	; (adr r3, 801bc94 <__kernel_sin+0x174>)
 801bbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbba:	f7e4 fb67 	bl	800028c <__adddf3>
 801bbbe:	9b01      	ldr	r3, [sp, #4]
 801bbc0:	4606      	mov	r6, r0
 801bbc2:	460f      	mov	r7, r1
 801bbc4:	b9eb      	cbnz	r3, 801bc02 <__kernel_sin+0xe2>
 801bbc6:	4602      	mov	r2, r0
 801bbc8:	460b      	mov	r3, r1
 801bbca:	4650      	mov	r0, sl
 801bbcc:	4659      	mov	r1, fp
 801bbce:	f7e4 fd13 	bl	80005f8 <__aeabi_dmul>
 801bbd2:	a325      	add	r3, pc, #148	; (adr r3, 801bc68 <__kernel_sin+0x148>)
 801bbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbd8:	f7e4 fb56 	bl	8000288 <__aeabi_dsub>
 801bbdc:	4642      	mov	r2, r8
 801bbde:	464b      	mov	r3, r9
 801bbe0:	f7e4 fd0a 	bl	80005f8 <__aeabi_dmul>
 801bbe4:	4602      	mov	r2, r0
 801bbe6:	460b      	mov	r3, r1
 801bbe8:	4620      	mov	r0, r4
 801bbea:	4629      	mov	r1, r5
 801bbec:	f7e4 fb4e 	bl	800028c <__adddf3>
 801bbf0:	4604      	mov	r4, r0
 801bbf2:	460d      	mov	r5, r1
 801bbf4:	ec45 4b10 	vmov	d0, r4, r5
 801bbf8:	b003      	add	sp, #12
 801bbfa:	ecbd 8b04 	vpop	{d8-d9}
 801bbfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc02:	4b1b      	ldr	r3, [pc, #108]	; (801bc70 <__kernel_sin+0x150>)
 801bc04:	ec51 0b18 	vmov	r0, r1, d8
 801bc08:	2200      	movs	r2, #0
 801bc0a:	f7e4 fcf5 	bl	80005f8 <__aeabi_dmul>
 801bc0e:	4632      	mov	r2, r6
 801bc10:	ec41 0b19 	vmov	d9, r0, r1
 801bc14:	463b      	mov	r3, r7
 801bc16:	4640      	mov	r0, r8
 801bc18:	4649      	mov	r1, r9
 801bc1a:	f7e4 fced 	bl	80005f8 <__aeabi_dmul>
 801bc1e:	4602      	mov	r2, r0
 801bc20:	460b      	mov	r3, r1
 801bc22:	ec51 0b19 	vmov	r0, r1, d9
 801bc26:	f7e4 fb2f 	bl	8000288 <__aeabi_dsub>
 801bc2a:	4652      	mov	r2, sl
 801bc2c:	465b      	mov	r3, fp
 801bc2e:	f7e4 fce3 	bl	80005f8 <__aeabi_dmul>
 801bc32:	ec53 2b18 	vmov	r2, r3, d8
 801bc36:	f7e4 fb27 	bl	8000288 <__aeabi_dsub>
 801bc3a:	a30b      	add	r3, pc, #44	; (adr r3, 801bc68 <__kernel_sin+0x148>)
 801bc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc40:	4606      	mov	r6, r0
 801bc42:	460f      	mov	r7, r1
 801bc44:	4640      	mov	r0, r8
 801bc46:	4649      	mov	r1, r9
 801bc48:	f7e4 fcd6 	bl	80005f8 <__aeabi_dmul>
 801bc4c:	4602      	mov	r2, r0
 801bc4e:	460b      	mov	r3, r1
 801bc50:	4630      	mov	r0, r6
 801bc52:	4639      	mov	r1, r7
 801bc54:	f7e4 fb1a 	bl	800028c <__adddf3>
 801bc58:	4602      	mov	r2, r0
 801bc5a:	460b      	mov	r3, r1
 801bc5c:	4620      	mov	r0, r4
 801bc5e:	4629      	mov	r1, r5
 801bc60:	f7e4 fb12 	bl	8000288 <__aeabi_dsub>
 801bc64:	e7c4      	b.n	801bbf0 <__kernel_sin+0xd0>
 801bc66:	bf00      	nop
 801bc68:	55555549 	.word	0x55555549
 801bc6c:	3fc55555 	.word	0x3fc55555
 801bc70:	3fe00000 	.word	0x3fe00000
 801bc74:	5acfd57c 	.word	0x5acfd57c
 801bc78:	3de5d93a 	.word	0x3de5d93a
 801bc7c:	8a2b9ceb 	.word	0x8a2b9ceb
 801bc80:	3e5ae5e6 	.word	0x3e5ae5e6
 801bc84:	57b1fe7d 	.word	0x57b1fe7d
 801bc88:	3ec71de3 	.word	0x3ec71de3
 801bc8c:	19c161d5 	.word	0x19c161d5
 801bc90:	3f2a01a0 	.word	0x3f2a01a0
 801bc94:	1110f8a6 	.word	0x1110f8a6
 801bc98:	3f811111 	.word	0x3f811111
 801bc9c:	00000000 	.word	0x00000000

0801bca0 <atan>:
 801bca0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bca4:	ec55 4b10 	vmov	r4, r5, d0
 801bca8:	4bc3      	ldr	r3, [pc, #780]	; (801bfb8 <atan+0x318>)
 801bcaa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801bcae:	429e      	cmp	r6, r3
 801bcb0:	46ab      	mov	fp, r5
 801bcb2:	dd18      	ble.n	801bce6 <atan+0x46>
 801bcb4:	4bc1      	ldr	r3, [pc, #772]	; (801bfbc <atan+0x31c>)
 801bcb6:	429e      	cmp	r6, r3
 801bcb8:	dc01      	bgt.n	801bcbe <atan+0x1e>
 801bcba:	d109      	bne.n	801bcd0 <atan+0x30>
 801bcbc:	b144      	cbz	r4, 801bcd0 <atan+0x30>
 801bcbe:	4622      	mov	r2, r4
 801bcc0:	462b      	mov	r3, r5
 801bcc2:	4620      	mov	r0, r4
 801bcc4:	4629      	mov	r1, r5
 801bcc6:	f7e4 fae1 	bl	800028c <__adddf3>
 801bcca:	4604      	mov	r4, r0
 801bccc:	460d      	mov	r5, r1
 801bcce:	e006      	b.n	801bcde <atan+0x3e>
 801bcd0:	f1bb 0f00 	cmp.w	fp, #0
 801bcd4:	f300 8131 	bgt.w	801bf3a <atan+0x29a>
 801bcd8:	a59b      	add	r5, pc, #620	; (adr r5, 801bf48 <atan+0x2a8>)
 801bcda:	e9d5 4500 	ldrd	r4, r5, [r5]
 801bcde:	ec45 4b10 	vmov	d0, r4, r5
 801bce2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bce6:	4bb6      	ldr	r3, [pc, #728]	; (801bfc0 <atan+0x320>)
 801bce8:	429e      	cmp	r6, r3
 801bcea:	dc14      	bgt.n	801bd16 <atan+0x76>
 801bcec:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801bcf0:	429e      	cmp	r6, r3
 801bcf2:	dc0d      	bgt.n	801bd10 <atan+0x70>
 801bcf4:	a396      	add	r3, pc, #600	; (adr r3, 801bf50 <atan+0x2b0>)
 801bcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcfa:	ee10 0a10 	vmov	r0, s0
 801bcfe:	4629      	mov	r1, r5
 801bd00:	f7e4 fac4 	bl	800028c <__adddf3>
 801bd04:	4baf      	ldr	r3, [pc, #700]	; (801bfc4 <atan+0x324>)
 801bd06:	2200      	movs	r2, #0
 801bd08:	f7e4 ff06 	bl	8000b18 <__aeabi_dcmpgt>
 801bd0c:	2800      	cmp	r0, #0
 801bd0e:	d1e6      	bne.n	801bcde <atan+0x3e>
 801bd10:	f04f 3aff 	mov.w	sl, #4294967295
 801bd14:	e02b      	b.n	801bd6e <atan+0xce>
 801bd16:	f000 f963 	bl	801bfe0 <fabs>
 801bd1a:	4bab      	ldr	r3, [pc, #684]	; (801bfc8 <atan+0x328>)
 801bd1c:	429e      	cmp	r6, r3
 801bd1e:	ec55 4b10 	vmov	r4, r5, d0
 801bd22:	f300 80bf 	bgt.w	801bea4 <atan+0x204>
 801bd26:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801bd2a:	429e      	cmp	r6, r3
 801bd2c:	f300 80a0 	bgt.w	801be70 <atan+0x1d0>
 801bd30:	ee10 2a10 	vmov	r2, s0
 801bd34:	ee10 0a10 	vmov	r0, s0
 801bd38:	462b      	mov	r3, r5
 801bd3a:	4629      	mov	r1, r5
 801bd3c:	f7e4 faa6 	bl	800028c <__adddf3>
 801bd40:	4ba0      	ldr	r3, [pc, #640]	; (801bfc4 <atan+0x324>)
 801bd42:	2200      	movs	r2, #0
 801bd44:	f7e4 faa0 	bl	8000288 <__aeabi_dsub>
 801bd48:	2200      	movs	r2, #0
 801bd4a:	4606      	mov	r6, r0
 801bd4c:	460f      	mov	r7, r1
 801bd4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801bd52:	4620      	mov	r0, r4
 801bd54:	4629      	mov	r1, r5
 801bd56:	f7e4 fa99 	bl	800028c <__adddf3>
 801bd5a:	4602      	mov	r2, r0
 801bd5c:	460b      	mov	r3, r1
 801bd5e:	4630      	mov	r0, r6
 801bd60:	4639      	mov	r1, r7
 801bd62:	f7e4 fd73 	bl	800084c <__aeabi_ddiv>
 801bd66:	f04f 0a00 	mov.w	sl, #0
 801bd6a:	4604      	mov	r4, r0
 801bd6c:	460d      	mov	r5, r1
 801bd6e:	4622      	mov	r2, r4
 801bd70:	462b      	mov	r3, r5
 801bd72:	4620      	mov	r0, r4
 801bd74:	4629      	mov	r1, r5
 801bd76:	f7e4 fc3f 	bl	80005f8 <__aeabi_dmul>
 801bd7a:	4602      	mov	r2, r0
 801bd7c:	460b      	mov	r3, r1
 801bd7e:	4680      	mov	r8, r0
 801bd80:	4689      	mov	r9, r1
 801bd82:	f7e4 fc39 	bl	80005f8 <__aeabi_dmul>
 801bd86:	a374      	add	r3, pc, #464	; (adr r3, 801bf58 <atan+0x2b8>)
 801bd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd8c:	4606      	mov	r6, r0
 801bd8e:	460f      	mov	r7, r1
 801bd90:	f7e4 fc32 	bl	80005f8 <__aeabi_dmul>
 801bd94:	a372      	add	r3, pc, #456	; (adr r3, 801bf60 <atan+0x2c0>)
 801bd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd9a:	f7e4 fa77 	bl	800028c <__adddf3>
 801bd9e:	4632      	mov	r2, r6
 801bda0:	463b      	mov	r3, r7
 801bda2:	f7e4 fc29 	bl	80005f8 <__aeabi_dmul>
 801bda6:	a370      	add	r3, pc, #448	; (adr r3, 801bf68 <atan+0x2c8>)
 801bda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdac:	f7e4 fa6e 	bl	800028c <__adddf3>
 801bdb0:	4632      	mov	r2, r6
 801bdb2:	463b      	mov	r3, r7
 801bdb4:	f7e4 fc20 	bl	80005f8 <__aeabi_dmul>
 801bdb8:	a36d      	add	r3, pc, #436	; (adr r3, 801bf70 <atan+0x2d0>)
 801bdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdbe:	f7e4 fa65 	bl	800028c <__adddf3>
 801bdc2:	4632      	mov	r2, r6
 801bdc4:	463b      	mov	r3, r7
 801bdc6:	f7e4 fc17 	bl	80005f8 <__aeabi_dmul>
 801bdca:	a36b      	add	r3, pc, #428	; (adr r3, 801bf78 <atan+0x2d8>)
 801bdcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdd0:	f7e4 fa5c 	bl	800028c <__adddf3>
 801bdd4:	4632      	mov	r2, r6
 801bdd6:	463b      	mov	r3, r7
 801bdd8:	f7e4 fc0e 	bl	80005f8 <__aeabi_dmul>
 801bddc:	a368      	add	r3, pc, #416	; (adr r3, 801bf80 <atan+0x2e0>)
 801bdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bde2:	f7e4 fa53 	bl	800028c <__adddf3>
 801bde6:	4642      	mov	r2, r8
 801bde8:	464b      	mov	r3, r9
 801bdea:	f7e4 fc05 	bl	80005f8 <__aeabi_dmul>
 801bdee:	a366      	add	r3, pc, #408	; (adr r3, 801bf88 <atan+0x2e8>)
 801bdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdf4:	4680      	mov	r8, r0
 801bdf6:	4689      	mov	r9, r1
 801bdf8:	4630      	mov	r0, r6
 801bdfa:	4639      	mov	r1, r7
 801bdfc:	f7e4 fbfc 	bl	80005f8 <__aeabi_dmul>
 801be00:	a363      	add	r3, pc, #396	; (adr r3, 801bf90 <atan+0x2f0>)
 801be02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be06:	f7e4 fa3f 	bl	8000288 <__aeabi_dsub>
 801be0a:	4632      	mov	r2, r6
 801be0c:	463b      	mov	r3, r7
 801be0e:	f7e4 fbf3 	bl	80005f8 <__aeabi_dmul>
 801be12:	a361      	add	r3, pc, #388	; (adr r3, 801bf98 <atan+0x2f8>)
 801be14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be18:	f7e4 fa36 	bl	8000288 <__aeabi_dsub>
 801be1c:	4632      	mov	r2, r6
 801be1e:	463b      	mov	r3, r7
 801be20:	f7e4 fbea 	bl	80005f8 <__aeabi_dmul>
 801be24:	a35e      	add	r3, pc, #376	; (adr r3, 801bfa0 <atan+0x300>)
 801be26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be2a:	f7e4 fa2d 	bl	8000288 <__aeabi_dsub>
 801be2e:	4632      	mov	r2, r6
 801be30:	463b      	mov	r3, r7
 801be32:	f7e4 fbe1 	bl	80005f8 <__aeabi_dmul>
 801be36:	a35c      	add	r3, pc, #368	; (adr r3, 801bfa8 <atan+0x308>)
 801be38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be3c:	f7e4 fa24 	bl	8000288 <__aeabi_dsub>
 801be40:	4632      	mov	r2, r6
 801be42:	463b      	mov	r3, r7
 801be44:	f7e4 fbd8 	bl	80005f8 <__aeabi_dmul>
 801be48:	4602      	mov	r2, r0
 801be4a:	460b      	mov	r3, r1
 801be4c:	4640      	mov	r0, r8
 801be4e:	4649      	mov	r1, r9
 801be50:	f7e4 fa1c 	bl	800028c <__adddf3>
 801be54:	4622      	mov	r2, r4
 801be56:	462b      	mov	r3, r5
 801be58:	f7e4 fbce 	bl	80005f8 <__aeabi_dmul>
 801be5c:	f1ba 3fff 	cmp.w	sl, #4294967295
 801be60:	4602      	mov	r2, r0
 801be62:	460b      	mov	r3, r1
 801be64:	d14b      	bne.n	801befe <atan+0x25e>
 801be66:	4620      	mov	r0, r4
 801be68:	4629      	mov	r1, r5
 801be6a:	f7e4 fa0d 	bl	8000288 <__aeabi_dsub>
 801be6e:	e72c      	b.n	801bcca <atan+0x2a>
 801be70:	ee10 0a10 	vmov	r0, s0
 801be74:	4b53      	ldr	r3, [pc, #332]	; (801bfc4 <atan+0x324>)
 801be76:	2200      	movs	r2, #0
 801be78:	4629      	mov	r1, r5
 801be7a:	f7e4 fa05 	bl	8000288 <__aeabi_dsub>
 801be7e:	4b51      	ldr	r3, [pc, #324]	; (801bfc4 <atan+0x324>)
 801be80:	4606      	mov	r6, r0
 801be82:	460f      	mov	r7, r1
 801be84:	2200      	movs	r2, #0
 801be86:	4620      	mov	r0, r4
 801be88:	4629      	mov	r1, r5
 801be8a:	f7e4 f9ff 	bl	800028c <__adddf3>
 801be8e:	4602      	mov	r2, r0
 801be90:	460b      	mov	r3, r1
 801be92:	4630      	mov	r0, r6
 801be94:	4639      	mov	r1, r7
 801be96:	f7e4 fcd9 	bl	800084c <__aeabi_ddiv>
 801be9a:	f04f 0a01 	mov.w	sl, #1
 801be9e:	4604      	mov	r4, r0
 801bea0:	460d      	mov	r5, r1
 801bea2:	e764      	b.n	801bd6e <atan+0xce>
 801bea4:	4b49      	ldr	r3, [pc, #292]	; (801bfcc <atan+0x32c>)
 801bea6:	429e      	cmp	r6, r3
 801bea8:	da1d      	bge.n	801bee6 <atan+0x246>
 801beaa:	ee10 0a10 	vmov	r0, s0
 801beae:	4b48      	ldr	r3, [pc, #288]	; (801bfd0 <atan+0x330>)
 801beb0:	2200      	movs	r2, #0
 801beb2:	4629      	mov	r1, r5
 801beb4:	f7e4 f9e8 	bl	8000288 <__aeabi_dsub>
 801beb8:	4b45      	ldr	r3, [pc, #276]	; (801bfd0 <atan+0x330>)
 801beba:	4606      	mov	r6, r0
 801bebc:	460f      	mov	r7, r1
 801bebe:	2200      	movs	r2, #0
 801bec0:	4620      	mov	r0, r4
 801bec2:	4629      	mov	r1, r5
 801bec4:	f7e4 fb98 	bl	80005f8 <__aeabi_dmul>
 801bec8:	4b3e      	ldr	r3, [pc, #248]	; (801bfc4 <atan+0x324>)
 801beca:	2200      	movs	r2, #0
 801becc:	f7e4 f9de 	bl	800028c <__adddf3>
 801bed0:	4602      	mov	r2, r0
 801bed2:	460b      	mov	r3, r1
 801bed4:	4630      	mov	r0, r6
 801bed6:	4639      	mov	r1, r7
 801bed8:	f7e4 fcb8 	bl	800084c <__aeabi_ddiv>
 801bedc:	f04f 0a02 	mov.w	sl, #2
 801bee0:	4604      	mov	r4, r0
 801bee2:	460d      	mov	r5, r1
 801bee4:	e743      	b.n	801bd6e <atan+0xce>
 801bee6:	462b      	mov	r3, r5
 801bee8:	ee10 2a10 	vmov	r2, s0
 801beec:	4939      	ldr	r1, [pc, #228]	; (801bfd4 <atan+0x334>)
 801beee:	2000      	movs	r0, #0
 801bef0:	f7e4 fcac 	bl	800084c <__aeabi_ddiv>
 801bef4:	f04f 0a03 	mov.w	sl, #3
 801bef8:	4604      	mov	r4, r0
 801befa:	460d      	mov	r5, r1
 801befc:	e737      	b.n	801bd6e <atan+0xce>
 801befe:	4b36      	ldr	r3, [pc, #216]	; (801bfd8 <atan+0x338>)
 801bf00:	4e36      	ldr	r6, [pc, #216]	; (801bfdc <atan+0x33c>)
 801bf02:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801bf06:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801bf0a:	e9da 2300 	ldrd	r2, r3, [sl]
 801bf0e:	f7e4 f9bb 	bl	8000288 <__aeabi_dsub>
 801bf12:	4622      	mov	r2, r4
 801bf14:	462b      	mov	r3, r5
 801bf16:	f7e4 f9b7 	bl	8000288 <__aeabi_dsub>
 801bf1a:	4602      	mov	r2, r0
 801bf1c:	460b      	mov	r3, r1
 801bf1e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801bf22:	f7e4 f9b1 	bl	8000288 <__aeabi_dsub>
 801bf26:	f1bb 0f00 	cmp.w	fp, #0
 801bf2a:	4604      	mov	r4, r0
 801bf2c:	460d      	mov	r5, r1
 801bf2e:	f6bf aed6 	bge.w	801bcde <atan+0x3e>
 801bf32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bf36:	461d      	mov	r5, r3
 801bf38:	e6d1      	b.n	801bcde <atan+0x3e>
 801bf3a:	a51d      	add	r5, pc, #116	; (adr r5, 801bfb0 <atan+0x310>)
 801bf3c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801bf40:	e6cd      	b.n	801bcde <atan+0x3e>
 801bf42:	bf00      	nop
 801bf44:	f3af 8000 	nop.w
 801bf48:	54442d18 	.word	0x54442d18
 801bf4c:	bff921fb 	.word	0xbff921fb
 801bf50:	8800759c 	.word	0x8800759c
 801bf54:	7e37e43c 	.word	0x7e37e43c
 801bf58:	e322da11 	.word	0xe322da11
 801bf5c:	3f90ad3a 	.word	0x3f90ad3a
 801bf60:	24760deb 	.word	0x24760deb
 801bf64:	3fa97b4b 	.word	0x3fa97b4b
 801bf68:	a0d03d51 	.word	0xa0d03d51
 801bf6c:	3fb10d66 	.word	0x3fb10d66
 801bf70:	c54c206e 	.word	0xc54c206e
 801bf74:	3fb745cd 	.word	0x3fb745cd
 801bf78:	920083ff 	.word	0x920083ff
 801bf7c:	3fc24924 	.word	0x3fc24924
 801bf80:	5555550d 	.word	0x5555550d
 801bf84:	3fd55555 	.word	0x3fd55555
 801bf88:	2c6a6c2f 	.word	0x2c6a6c2f
 801bf8c:	bfa2b444 	.word	0xbfa2b444
 801bf90:	52defd9a 	.word	0x52defd9a
 801bf94:	3fadde2d 	.word	0x3fadde2d
 801bf98:	af749a6d 	.word	0xaf749a6d
 801bf9c:	3fb3b0f2 	.word	0x3fb3b0f2
 801bfa0:	fe231671 	.word	0xfe231671
 801bfa4:	3fbc71c6 	.word	0x3fbc71c6
 801bfa8:	9998ebc4 	.word	0x9998ebc4
 801bfac:	3fc99999 	.word	0x3fc99999
 801bfb0:	54442d18 	.word	0x54442d18
 801bfb4:	3ff921fb 	.word	0x3ff921fb
 801bfb8:	440fffff 	.word	0x440fffff
 801bfbc:	7ff00000 	.word	0x7ff00000
 801bfc0:	3fdbffff 	.word	0x3fdbffff
 801bfc4:	3ff00000 	.word	0x3ff00000
 801bfc8:	3ff2ffff 	.word	0x3ff2ffff
 801bfcc:	40038000 	.word	0x40038000
 801bfd0:	3ff80000 	.word	0x3ff80000
 801bfd4:	bff00000 	.word	0xbff00000
 801bfd8:	0801cbf0 	.word	0x0801cbf0
 801bfdc:	0801cbd0 	.word	0x0801cbd0

0801bfe0 <fabs>:
 801bfe0:	ec51 0b10 	vmov	r0, r1, d0
 801bfe4:	ee10 2a10 	vmov	r2, s0
 801bfe8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801bfec:	ec43 2b10 	vmov	d0, r2, r3
 801bff0:	4770      	bx	lr
 801bff2:	0000      	movs	r0, r0
 801bff4:	0000      	movs	r0, r0
	...

0801bff8 <floor>:
 801bff8:	ec51 0b10 	vmov	r0, r1, d0
 801bffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c000:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801c004:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801c008:	2e13      	cmp	r6, #19
 801c00a:	ee10 5a10 	vmov	r5, s0
 801c00e:	ee10 8a10 	vmov	r8, s0
 801c012:	460c      	mov	r4, r1
 801c014:	dc32      	bgt.n	801c07c <floor+0x84>
 801c016:	2e00      	cmp	r6, #0
 801c018:	da14      	bge.n	801c044 <floor+0x4c>
 801c01a:	a333      	add	r3, pc, #204	; (adr r3, 801c0e8 <floor+0xf0>)
 801c01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c020:	f7e4 f934 	bl	800028c <__adddf3>
 801c024:	2200      	movs	r2, #0
 801c026:	2300      	movs	r3, #0
 801c028:	f7e4 fd76 	bl	8000b18 <__aeabi_dcmpgt>
 801c02c:	b138      	cbz	r0, 801c03e <floor+0x46>
 801c02e:	2c00      	cmp	r4, #0
 801c030:	da57      	bge.n	801c0e2 <floor+0xea>
 801c032:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801c036:	431d      	orrs	r5, r3
 801c038:	d001      	beq.n	801c03e <floor+0x46>
 801c03a:	4c2d      	ldr	r4, [pc, #180]	; (801c0f0 <floor+0xf8>)
 801c03c:	2500      	movs	r5, #0
 801c03e:	4621      	mov	r1, r4
 801c040:	4628      	mov	r0, r5
 801c042:	e025      	b.n	801c090 <floor+0x98>
 801c044:	4f2b      	ldr	r7, [pc, #172]	; (801c0f4 <floor+0xfc>)
 801c046:	4137      	asrs	r7, r6
 801c048:	ea01 0307 	and.w	r3, r1, r7
 801c04c:	4303      	orrs	r3, r0
 801c04e:	d01f      	beq.n	801c090 <floor+0x98>
 801c050:	a325      	add	r3, pc, #148	; (adr r3, 801c0e8 <floor+0xf0>)
 801c052:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c056:	f7e4 f919 	bl	800028c <__adddf3>
 801c05a:	2200      	movs	r2, #0
 801c05c:	2300      	movs	r3, #0
 801c05e:	f7e4 fd5b 	bl	8000b18 <__aeabi_dcmpgt>
 801c062:	2800      	cmp	r0, #0
 801c064:	d0eb      	beq.n	801c03e <floor+0x46>
 801c066:	2c00      	cmp	r4, #0
 801c068:	bfbe      	ittt	lt
 801c06a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801c06e:	fa43 f606 	asrlt.w	r6, r3, r6
 801c072:	19a4      	addlt	r4, r4, r6
 801c074:	ea24 0407 	bic.w	r4, r4, r7
 801c078:	2500      	movs	r5, #0
 801c07a:	e7e0      	b.n	801c03e <floor+0x46>
 801c07c:	2e33      	cmp	r6, #51	; 0x33
 801c07e:	dd0b      	ble.n	801c098 <floor+0xa0>
 801c080:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c084:	d104      	bne.n	801c090 <floor+0x98>
 801c086:	ee10 2a10 	vmov	r2, s0
 801c08a:	460b      	mov	r3, r1
 801c08c:	f7e4 f8fe 	bl	800028c <__adddf3>
 801c090:	ec41 0b10 	vmov	d0, r0, r1
 801c094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c098:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801c09c:	f04f 33ff 	mov.w	r3, #4294967295
 801c0a0:	fa23 f707 	lsr.w	r7, r3, r7
 801c0a4:	4207      	tst	r7, r0
 801c0a6:	d0f3      	beq.n	801c090 <floor+0x98>
 801c0a8:	a30f      	add	r3, pc, #60	; (adr r3, 801c0e8 <floor+0xf0>)
 801c0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0ae:	f7e4 f8ed 	bl	800028c <__adddf3>
 801c0b2:	2200      	movs	r2, #0
 801c0b4:	2300      	movs	r3, #0
 801c0b6:	f7e4 fd2f 	bl	8000b18 <__aeabi_dcmpgt>
 801c0ba:	2800      	cmp	r0, #0
 801c0bc:	d0bf      	beq.n	801c03e <floor+0x46>
 801c0be:	2c00      	cmp	r4, #0
 801c0c0:	da02      	bge.n	801c0c8 <floor+0xd0>
 801c0c2:	2e14      	cmp	r6, #20
 801c0c4:	d103      	bne.n	801c0ce <floor+0xd6>
 801c0c6:	3401      	adds	r4, #1
 801c0c8:	ea25 0507 	bic.w	r5, r5, r7
 801c0cc:	e7b7      	b.n	801c03e <floor+0x46>
 801c0ce:	2301      	movs	r3, #1
 801c0d0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801c0d4:	fa03 f606 	lsl.w	r6, r3, r6
 801c0d8:	4435      	add	r5, r6
 801c0da:	4545      	cmp	r5, r8
 801c0dc:	bf38      	it	cc
 801c0de:	18e4      	addcc	r4, r4, r3
 801c0e0:	e7f2      	b.n	801c0c8 <floor+0xd0>
 801c0e2:	2500      	movs	r5, #0
 801c0e4:	462c      	mov	r4, r5
 801c0e6:	e7aa      	b.n	801c03e <floor+0x46>
 801c0e8:	8800759c 	.word	0x8800759c
 801c0ec:	7e37e43c 	.word	0x7e37e43c
 801c0f0:	bff00000 	.word	0xbff00000
 801c0f4:	000fffff 	.word	0x000fffff

0801c0f8 <scalbn>:
 801c0f8:	b570      	push	{r4, r5, r6, lr}
 801c0fa:	ec55 4b10 	vmov	r4, r5, d0
 801c0fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801c102:	4606      	mov	r6, r0
 801c104:	462b      	mov	r3, r5
 801c106:	b99a      	cbnz	r2, 801c130 <scalbn+0x38>
 801c108:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c10c:	4323      	orrs	r3, r4
 801c10e:	d036      	beq.n	801c17e <scalbn+0x86>
 801c110:	4b39      	ldr	r3, [pc, #228]	; (801c1f8 <scalbn+0x100>)
 801c112:	4629      	mov	r1, r5
 801c114:	ee10 0a10 	vmov	r0, s0
 801c118:	2200      	movs	r2, #0
 801c11a:	f7e4 fa6d 	bl	80005f8 <__aeabi_dmul>
 801c11e:	4b37      	ldr	r3, [pc, #220]	; (801c1fc <scalbn+0x104>)
 801c120:	429e      	cmp	r6, r3
 801c122:	4604      	mov	r4, r0
 801c124:	460d      	mov	r5, r1
 801c126:	da10      	bge.n	801c14a <scalbn+0x52>
 801c128:	a32b      	add	r3, pc, #172	; (adr r3, 801c1d8 <scalbn+0xe0>)
 801c12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c12e:	e03a      	b.n	801c1a6 <scalbn+0xae>
 801c130:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801c134:	428a      	cmp	r2, r1
 801c136:	d10c      	bne.n	801c152 <scalbn+0x5a>
 801c138:	ee10 2a10 	vmov	r2, s0
 801c13c:	4620      	mov	r0, r4
 801c13e:	4629      	mov	r1, r5
 801c140:	f7e4 f8a4 	bl	800028c <__adddf3>
 801c144:	4604      	mov	r4, r0
 801c146:	460d      	mov	r5, r1
 801c148:	e019      	b.n	801c17e <scalbn+0x86>
 801c14a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c14e:	460b      	mov	r3, r1
 801c150:	3a36      	subs	r2, #54	; 0x36
 801c152:	4432      	add	r2, r6
 801c154:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801c158:	428a      	cmp	r2, r1
 801c15a:	dd08      	ble.n	801c16e <scalbn+0x76>
 801c15c:	2d00      	cmp	r5, #0
 801c15e:	a120      	add	r1, pc, #128	; (adr r1, 801c1e0 <scalbn+0xe8>)
 801c160:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c164:	da1c      	bge.n	801c1a0 <scalbn+0xa8>
 801c166:	a120      	add	r1, pc, #128	; (adr r1, 801c1e8 <scalbn+0xf0>)
 801c168:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c16c:	e018      	b.n	801c1a0 <scalbn+0xa8>
 801c16e:	2a00      	cmp	r2, #0
 801c170:	dd08      	ble.n	801c184 <scalbn+0x8c>
 801c172:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c176:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c17a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c17e:	ec45 4b10 	vmov	d0, r4, r5
 801c182:	bd70      	pop	{r4, r5, r6, pc}
 801c184:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801c188:	da19      	bge.n	801c1be <scalbn+0xc6>
 801c18a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801c18e:	429e      	cmp	r6, r3
 801c190:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801c194:	dd0a      	ble.n	801c1ac <scalbn+0xb4>
 801c196:	a112      	add	r1, pc, #72	; (adr r1, 801c1e0 <scalbn+0xe8>)
 801c198:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c19c:	2b00      	cmp	r3, #0
 801c19e:	d1e2      	bne.n	801c166 <scalbn+0x6e>
 801c1a0:	a30f      	add	r3, pc, #60	; (adr r3, 801c1e0 <scalbn+0xe8>)
 801c1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1a6:	f7e4 fa27 	bl	80005f8 <__aeabi_dmul>
 801c1aa:	e7cb      	b.n	801c144 <scalbn+0x4c>
 801c1ac:	a10a      	add	r1, pc, #40	; (adr r1, 801c1d8 <scalbn+0xe0>)
 801c1ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	d0b8      	beq.n	801c128 <scalbn+0x30>
 801c1b6:	a10e      	add	r1, pc, #56	; (adr r1, 801c1f0 <scalbn+0xf8>)
 801c1b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c1bc:	e7b4      	b.n	801c128 <scalbn+0x30>
 801c1be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c1c2:	3236      	adds	r2, #54	; 0x36
 801c1c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c1c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801c1cc:	4620      	mov	r0, r4
 801c1ce:	4b0c      	ldr	r3, [pc, #48]	; (801c200 <scalbn+0x108>)
 801c1d0:	2200      	movs	r2, #0
 801c1d2:	e7e8      	b.n	801c1a6 <scalbn+0xae>
 801c1d4:	f3af 8000 	nop.w
 801c1d8:	c2f8f359 	.word	0xc2f8f359
 801c1dc:	01a56e1f 	.word	0x01a56e1f
 801c1e0:	8800759c 	.word	0x8800759c
 801c1e4:	7e37e43c 	.word	0x7e37e43c
 801c1e8:	8800759c 	.word	0x8800759c
 801c1ec:	fe37e43c 	.word	0xfe37e43c
 801c1f0:	c2f8f359 	.word	0xc2f8f359
 801c1f4:	81a56e1f 	.word	0x81a56e1f
 801c1f8:	43500000 	.word	0x43500000
 801c1fc:	ffff3cb0 	.word	0xffff3cb0
 801c200:	3c900000 	.word	0x3c900000

0801c204 <_init>:
 801c204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c206:	bf00      	nop
 801c208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c20a:	bc08      	pop	{r3}
 801c20c:	469e      	mov	lr, r3
 801c20e:	4770      	bx	lr

0801c210 <_fini>:
 801c210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c212:	bf00      	nop
 801c214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c216:	bc08      	pop	{r3}
 801c218:	469e      	mov	lr, r3
 801c21a:	4770      	bx	lr
