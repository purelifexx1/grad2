
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b0ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c0  0801b240  0801b240  0002b240  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ba00  0801ba00  000323e0  2**0
                  CONTENTS
  4 .ARM          00000008  0801ba00  0801ba00  0002ba00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ba08  0801ba08  000323e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ba08  0801ba08  0002ba08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ba0c  0801ba0c  0002ba0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000023e0  20000000  0801ba10  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d758  200023e0  0801ddf0  000323e0  2**3
                  ALLOC
 10 ._user_heap_stack 000063c0  2000fb38  0801ddf0  0003fb38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000323e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031c14  00000000  00000000  00032410  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000065e5  00000000  00000000  00064024  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001de8  00000000  00000000  0006a610  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ba0  00000000  00000000  0006c3f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a087  00000000  00000000  0006df98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002002b  00000000  00000000  0009801f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dde91  00000000  00000000  000b804a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00195edb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c54  00000000  00000000  00195f58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200023e0 	.word	0x200023e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b224 	.word	0x0801b224

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200023e4 	.word	0x200023e4
 80001cc:	0801b224 	.word	0x0801b224

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <packetRead>:
extern SCARA_LSPB_Clutch_TypeDef  gcode_clutch_configure[200];
Position_DataType position_type;
SCARA_Gcode_Cor_TypeDef	Gcode_Cor[1000];
uint16_t point_counter = 0, current_clutch_index = 0;

Robot_CommandTypedef 	packetRead	(uint8_t *message, int32_t length, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b08d      	sub	sp, #52	; 0x34
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	603b      	str	r3, [r7, #0]
	Transfer_Protocol protocol_id = message[0];
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    duty_cmd->id_command = message[1];
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	609a      	str	r2, [r3, #8]
	int32_t temp_pointer = 2;
 8000faa:	2302      	movs	r3, #2
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch(protocol_id) 
 8000fae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d004      	beq.n	8000fc0 <packetRead+0x38>
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	f000 8205 	beq.w	80013c6 <packetRead+0x43e>
 8000fbc:	f000 bfe1 	b.w	8001f82 <packetRead+0xffa>
    {
        // reserved for Gcode file transfer
        case FILE_TRANSMISION:
        {
        	temp_pointer = 1;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	62fb      	str	r3, [r7, #44]	; 0x2c

        	do {
        		Gcode_Packet_Command_TypeDef move_type 	= message[temp_pointer] & 0x0f;
 8000fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	4413      	add	r3, r2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	f003 030f 	and.w	r3, r3, #15
 8000fd0:	74bb      	strb	r3, [r7, #18]
				switch (move_type){
 8000fd2:	7cbb      	ldrb	r3, [r7, #18]
 8000fd4:	2b04      	cmp	r3, #4
 8000fd6:	f200 81ee 	bhi.w	80013b6 <packetRead+0x42e>
 8000fda:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <packetRead+0x58>)
 8000fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe0:	08000ff5 	.word	0x08000ff5
 8000fe4:	0800110d 	.word	0x0800110d
 8000fe8:	08001259 	.word	0x08001259
 8000fec:	08001259 	.word	0x08001259
 8000ff0:	0800108f 	.word	0x0800108f
				case FIRST_PACKET:{
					Gcode_Mode = message[temp_pointer++] >> 4 & 0x0f;
 8000ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4413      	add	r3, r2
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	091b      	lsrs	r3, r3, #4
 8001004:	b2db      	uxtb	r3, r3
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	b2da      	uxtb	r2, r3
 800100c:	4b88      	ldr	r3, [pc, #544]	; (8001230 <packetRead+0x2a8>)
 800100e:	701a      	strb	r2, [r3, #0]
					down_z_height = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 8001010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	4413      	add	r3, r2
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fa83 	bl	8000524 <__aeabi_i2d>
 800101e:	a382      	add	r3, pc, #520	; (adr r3, 8001228 <packetRead+0x2a0>)
 8001020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001024:	f7ff fae8 	bl	80005f8 <__aeabi_dmul>
 8001028:	4603      	mov	r3, r0
 800102a:	460c      	mov	r4, r1
 800102c:	4a81      	ldr	r2, [pc, #516]	; (8001234 <packetRead+0x2ac>)
 800102e:	e9c2 3400 	strd	r3, r4, [r2]
 8001032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001034:	3304      	adds	r3, #4
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
					up_z_height   = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 8001038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fa6f 	bl	8000524 <__aeabi_i2d>
 8001046:	a378      	add	r3, pc, #480	; (adr r3, 8001228 <packetRead+0x2a0>)
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	f7ff fad4 	bl	80005f8 <__aeabi_dmul>
 8001050:	4603      	mov	r3, r0
 8001052:	460c      	mov	r4, r1
 8001054:	4a78      	ldr	r2, [pc, #480]	; (8001238 <packetRead+0x2b0>)
 8001056:	e9c2 3400 	strd	r3, r4, [r2]
 800105a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105c:	3304      	adds	r3, #4
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
					total_num_of_point = B2I(temp_pointer);						 temp_pointer+=4;
 8001060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	4413      	add	r3, r2
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a74      	ldr	r2, [pc, #464]	; (800123c <packetRead+0x2b4>)
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800106e:	3304      	adds	r3, #4
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter = 0;
 8001072:	4b73      	ldr	r3, [pc, #460]	; (8001240 <packetRead+0x2b8>)
 8001074:	2200      	movs	r2, #0
 8001076:	801a      	strh	r2, [r3, #0]
					current_clutch_index = 0;
 8001078:	4b72      	ldr	r3, [pc, #456]	; (8001244 <packetRead+0x2bc>)
 800107a:	2200      	movs	r2, #0
 800107c:	801a      	strh	r2, [r3, #0]
					pre_clutch_index = -1;
 800107e:	4b72      	ldr	r3, [pc, #456]	; (8001248 <packetRead+0x2c0>)
 8001080:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001084:	801a      	strh	r2, [r3, #0]
					pre_height = UP_Z;
 8001086:	4b71      	ldr	r3, [pc, #452]	; (800124c <packetRead+0x2c4>)
 8001088:	2205      	movs	r2, #5
 800108a:	701a      	strb	r2, [r3, #0]
				}
				break;
 800108c:	e193      	b.n	80013b6 <packetRead+0x42e>
				case CLUTCH_HEADER_TYPE:{
					temp_pointer++;
 800108e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001090:	3301      	adds	r3, #1
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
					gcode_clutch_configure[current_clutch_index].total_s     = B2I(temp_pointer); temp_pointer+=4;
 8001094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	4413      	add	r3, r2
 800109a:	4a6a      	ldr	r2, [pc, #424]	; (8001244 <packetRead+0x2bc>)
 800109c:	8812      	ldrh	r2, [r2, #0]
 800109e:	4610      	mov	r0, r2
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	496b      	ldr	r1, [pc, #428]	; (8001250 <packetRead+0x2c8>)
 80010a4:	4603      	mov	r3, r0
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4403      	add	r3, r0
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	440b      	add	r3, r1
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b2:	3304      	adds	r3, #4
 80010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
					gcode_clutch_configure[current_clutch_index].veloc 	     = B2I(temp_pointer); temp_pointer+=4;
 80010b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a61      	ldr	r2, [pc, #388]	; (8001244 <packetRead+0x2bc>)
 80010be:	8812      	ldrh	r2, [r2, #0]
 80010c0:	4610      	mov	r0, r2
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4962      	ldr	r1, [pc, #392]	; (8001250 <packetRead+0x2c8>)
 80010c6:	4603      	mov	r3, r0
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4403      	add	r3, r0
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	440b      	add	r3, r1
 80010d0:	3304      	adds	r3, #4
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d6:	3304      	adds	r3, #4
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
					gcode_clutch_configure[current_clutch_index].Depth_Feed  = B2I(temp_pointer); temp_pointer+=4;
 80010da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	4a58      	ldr	r2, [pc, #352]	; (8001244 <packetRead+0x2bc>)
 80010e2:	8812      	ldrh	r2, [r2, #0]
 80010e4:	4610      	mov	r0, r2
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4959      	ldr	r1, [pc, #356]	; (8001250 <packetRead+0x2c8>)
 80010ea:	4603      	mov	r3, r0
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4403      	add	r3, r0
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	440b      	add	r3, r1
 80010f4:	3308      	adds	r3, #8
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010fa:	3304      	adds	r3, #4
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
					current_clutch_index++;
 80010fe:	4b51      	ldr	r3, [pc, #324]	; (8001244 <packetRead+0x2bc>)
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	3301      	adds	r3, #1
 8001104:	b29a      	uxth	r2, r3
 8001106:	4b4f      	ldr	r3, [pc, #316]	; (8001244 <packetRead+0x2bc>)
 8001108:	801a      	strh	r2, [r3, #0]
				}
				break;
 800110a:	e154      	b.n	80013b6 <packetRead+0x42e>
				case LINEAR_TYPE:{
					Gcode_Cor[point_counter].configure.type_define[0] = move_type;
 800110c:	4b4c      	ldr	r3, [pc, #304]	; (8001240 <packetRead+0x2b8>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	4a50      	ldr	r2, [pc, #320]	; (8001254 <packetRead+0x2cc>)
 8001114:	460b      	mov	r3, r1
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	1a5b      	subs	r3, r3, r1
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	331a      	adds	r3, #26
 8001120:	7cba      	ldrb	r2, [r7, #18]
 8001122:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].configure.type_define[1] = message[temp_pointer++] >> 4 & 0x0f;
 8001124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001126:	1c5a      	adds	r2, r3, #1
 8001128:	62fa      	str	r2, [r7, #44]	; 0x2c
 800112a:	461a      	mov	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4413      	add	r3, r2
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	091b      	lsrs	r3, r3, #4
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4a42      	ldr	r2, [pc, #264]	; (8001240 <packetRead+0x2b8>)
 8001138:	8812      	ldrh	r2, [r2, #0]
 800113a:	4611      	mov	r1, r2
 800113c:	f003 030f 	and.w	r3, r3, #15
 8001140:	b2d8      	uxtb	r0, r3
 8001142:	4a44      	ldr	r2, [pc, #272]	; (8001254 <packetRead+0x2cc>)
 8001144:	460b      	mov	r3, r1
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	1a5b      	subs	r3, r3, r1
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	331b      	adds	r3, #27
 8001150:	4602      	mov	r2, r0
 8001152:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 8001154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	4413      	add	r3, r2
 800115a:	4a39      	ldr	r2, [pc, #228]	; (8001240 <packetRead+0x2b8>)
 800115c:	8812      	ldrh	r2, [r2, #0]
 800115e:	4610      	mov	r0, r2
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	493c      	ldr	r1, [pc, #240]	; (8001254 <packetRead+0x2cc>)
 8001164:	4603      	mov	r3, r0
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	1a1b      	subs	r3, r3, r0
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	440b      	add	r3, r1
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001172:	3304      	adds	r3, #4
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 8001176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	4413      	add	r3, r2
 800117c:	4a30      	ldr	r2, [pc, #192]	; (8001240 <packetRead+0x2b8>)
 800117e:	8812      	ldrh	r2, [r2, #0]
 8001180:	4610      	mov	r0, r2
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4933      	ldr	r1, [pc, #204]	; (8001254 <packetRead+0x2cc>)
 8001186:	4603      	mov	r3, r0
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	1a1b      	subs	r3, r3, r0
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	440b      	add	r3, r1
 8001190:	3304      	adds	r3, #4
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001196:	3304      	adds	r3, #4
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
					if(Gcode_Mode == GCODE_LINEAR){
 800119a:	4b25      	ldr	r3, [pc, #148]	; (8001230 <packetRead+0x2a8>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b07      	cmp	r3, #7
 80011a0:	d112      	bne.n	80011c8 <packetRead+0x240>
						Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 80011a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a25      	ldr	r2, [pc, #148]	; (8001240 <packetRead+0x2b8>)
 80011aa:	8812      	ldrh	r2, [r2, #0]
 80011ac:	4610      	mov	r0, r2
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4928      	ldr	r1, [pc, #160]	; (8001254 <packetRead+0x2cc>)
 80011b2:	4603      	mov	r3, r0
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	1a1b      	subs	r3, r3, r0
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	440b      	add	r3, r1
 80011bc:	3308      	adds	r3, #8
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c2:	3304      	adds	r3, #4
 80011c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011c6:	e025      	b.n	8001214 <packetRead+0x28c>
					}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <packetRead+0x2a8>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b08      	cmp	r3, #8
 80011ce:	d121      	bne.n	8001214 <packetRead+0x28c>
						Gcode_Cor[point_counter].configure.clutch_index = current_clutch_index - 1;
 80011d0:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <packetRead+0x2bc>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	4a1a      	ldr	r2, [pc, #104]	; (8001240 <packetRead+0x2b8>)
 80011d6:	8812      	ldrh	r2, [r2, #0]
 80011d8:	4611      	mov	r1, r2
 80011da:	3b01      	subs	r3, #1
 80011dc:	b298      	uxth	r0, r3
 80011de:	4a1d      	ldr	r2, [pc, #116]	; (8001254 <packetRead+0x2cc>)
 80011e0:	460b      	mov	r3, r1
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	1a5b      	subs	r3, r3, r1
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	3318      	adds	r3, #24
 80011ec:	4602      	mov	r2, r0
 80011ee:	801a      	strh	r2, [r3, #0]
						Gcode_Cor[point_counter].T = B2I(temp_pointer);	temp_pointer+=4;
 80011f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	4413      	add	r3, r2
 80011f6:	4a12      	ldr	r2, [pc, #72]	; (8001240 <packetRead+0x2b8>)
 80011f8:	8812      	ldrh	r2, [r2, #0]
 80011fa:	4610      	mov	r0, r2
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4915      	ldr	r1, [pc, #84]	; (8001254 <packetRead+0x2cc>)
 8001200:	4603      	mov	r3, r0
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	1a1b      	subs	r3, r3, r0
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	3314      	adds	r3, #20
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001210:	3304      	adds	r3, #4
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
					}
					point_counter++;
 8001214:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <packetRead+0x2b8>)
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	3301      	adds	r3, #1
 800121a:	b29a      	uxth	r2, r3
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <packetRead+0x2b8>)
 800121e:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001220:	e0c9      	b.n	80013b6 <packetRead+0x42e>
 8001222:	bf00      	nop
 8001224:	f3af 8000 	nop.w
 8001228:	a0000000 	.word	0xa0000000
 800122c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001230:	200065c0 	.word	0x200065c0
 8001234:	20006f30 	.word	0x20006f30
 8001238:	200065b8 	.word	0x200065b8
 800123c:	20006f88 	.word	0x20006f88
 8001240:	200023fc 	.word	0x200023fc
 8001244:	200023fe 	.word	0x200023fe
 8001248:	2000dd02 	.word	0x2000dd02
 800124c:	20006f60 	.word	0x20006f60
 8001250:	200065d0 	.word	0x200065d0
 8001254:	20006f98 	.word	0x20006f98
				case ARC_CW_TYPE:
				case ARC_AW_TYPE:{
					Gcode_Cor[point_counter].configure.type_define[0] = move_type;
 8001258:	4bb9      	ldr	r3, [pc, #740]	; (8001540 <packetRead+0x5b8>)
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	4619      	mov	r1, r3
 800125e:	4ab9      	ldr	r2, [pc, #740]	; (8001544 <packetRead+0x5bc>)
 8001260:	460b      	mov	r3, r1
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	1a5b      	subs	r3, r3, r1
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	331a      	adds	r3, #26
 800126c:	7cba      	ldrb	r2, [r7, #18]
 800126e:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].configure.type_define[1] = message[temp_pointer++] >> 4 & 0x0f;
 8001270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001272:	1c5a      	adds	r2, r3, #1
 8001274:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001276:	461a      	mov	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4413      	add	r3, r2
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	091b      	lsrs	r3, r3, #4
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4aaf      	ldr	r2, [pc, #700]	; (8001540 <packetRead+0x5b8>)
 8001284:	8812      	ldrh	r2, [r2, #0]
 8001286:	4611      	mov	r1, r2
 8001288:	f003 030f 	and.w	r3, r3, #15
 800128c:	b2d8      	uxtb	r0, r3
 800128e:	4aad      	ldr	r2, [pc, #692]	; (8001544 <packetRead+0x5bc>)
 8001290:	460b      	mov	r3, r1
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	1a5b      	subs	r3, r3, r1
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	331b      	adds	r3, #27
 800129c:	4602      	mov	r2, r0
 800129e:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 80012a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	4413      	add	r3, r2
 80012a6:	4aa6      	ldr	r2, [pc, #664]	; (8001540 <packetRead+0x5b8>)
 80012a8:	8812      	ldrh	r2, [r2, #0]
 80012aa:	4610      	mov	r0, r2
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	49a5      	ldr	r1, [pc, #660]	; (8001544 <packetRead+0x5bc>)
 80012b0:	4603      	mov	r3, r0
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	1a1b      	subs	r3, r3, r0
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012be:	3304      	adds	r3, #4
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 80012c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	4a9d      	ldr	r2, [pc, #628]	; (8001540 <packetRead+0x5b8>)
 80012ca:	8812      	ldrh	r2, [r2, #0]
 80012cc:	4610      	mov	r0, r2
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	499c      	ldr	r1, [pc, #624]	; (8001544 <packetRead+0x5bc>)
 80012d2:	4603      	mov	r3, r0
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	1a1b      	subs	r3, r3, r0
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	440b      	add	r3, r1
 80012dc:	3304      	adds	r3, #4
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e2:	3304      	adds	r3, #4
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
					if(Gcode_Mode == GCODE_LINEAR){
 80012e6:	4b98      	ldr	r3, [pc, #608]	; (8001548 <packetRead+0x5c0>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b07      	cmp	r3, #7
 80012ec:	d112      	bne.n	8001314 <packetRead+0x38c>
						Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 80012ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	4413      	add	r3, r2
 80012f4:	4a92      	ldr	r2, [pc, #584]	; (8001540 <packetRead+0x5b8>)
 80012f6:	8812      	ldrh	r2, [r2, #0]
 80012f8:	4610      	mov	r0, r2
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4991      	ldr	r1, [pc, #580]	; (8001544 <packetRead+0x5bc>)
 80012fe:	4603      	mov	r3, r0
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	1a1b      	subs	r3, r3, r0
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	440b      	add	r3, r1
 8001308:	3308      	adds	r3, #8
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800130e:	3304      	adds	r3, #4
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001312:	e025      	b.n	8001360 <packetRead+0x3d8>
					}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8001314:	4b8c      	ldr	r3, [pc, #560]	; (8001548 <packetRead+0x5c0>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b08      	cmp	r3, #8
 800131a:	d121      	bne.n	8001360 <packetRead+0x3d8>
						Gcode_Cor[point_counter].configure.clutch_index = current_clutch_index - 1;
 800131c:	4b8b      	ldr	r3, [pc, #556]	; (800154c <packetRead+0x5c4>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	4a87      	ldr	r2, [pc, #540]	; (8001540 <packetRead+0x5b8>)
 8001322:	8812      	ldrh	r2, [r2, #0]
 8001324:	4611      	mov	r1, r2
 8001326:	3b01      	subs	r3, #1
 8001328:	b298      	uxth	r0, r3
 800132a:	4a86      	ldr	r2, [pc, #536]	; (8001544 <packetRead+0x5bc>)
 800132c:	460b      	mov	r3, r1
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	1a5b      	subs	r3, r3, r1
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	3318      	adds	r3, #24
 8001338:	4602      	mov	r2, r0
 800133a:	801a      	strh	r2, [r3, #0]
						Gcode_Cor[point_counter].T = B2I(temp_pointer);	temp_pointer+=4;
 800133c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	4413      	add	r3, r2
 8001342:	4a7f      	ldr	r2, [pc, #508]	; (8001540 <packetRead+0x5b8>)
 8001344:	8812      	ldrh	r2, [r2, #0]
 8001346:	4610      	mov	r0, r2
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	497e      	ldr	r1, [pc, #504]	; (8001544 <packetRead+0x5bc>)
 800134c:	4603      	mov	r3, r0
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	1a1b      	subs	r3, r3, r0
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	440b      	add	r3, r1
 8001356:	3314      	adds	r3, #20
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135c:	3304      	adds	r3, #4
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
					}
					Gcode_Cor[point_counter].I = B2I(temp_pointer);	temp_pointer+=4;
 8001360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	4413      	add	r3, r2
 8001366:	4a76      	ldr	r2, [pc, #472]	; (8001540 <packetRead+0x5b8>)
 8001368:	8812      	ldrh	r2, [r2, #0]
 800136a:	4610      	mov	r0, r2
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4975      	ldr	r1, [pc, #468]	; (8001544 <packetRead+0x5bc>)
 8001370:	4603      	mov	r3, r0
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	1a1b      	subs	r3, r3, r0
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	330c      	adds	r3, #12
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001380:	3304      	adds	r3, #4
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].J = B2I(temp_pointer);	temp_pointer+=4;
 8001384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	4413      	add	r3, r2
 800138a:	4a6d      	ldr	r2, [pc, #436]	; (8001540 <packetRead+0x5b8>)
 800138c:	8812      	ldrh	r2, [r2, #0]
 800138e:	4610      	mov	r0, r2
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	496c      	ldr	r1, [pc, #432]	; (8001544 <packetRead+0x5bc>)
 8001394:	4603      	mov	r3, r0
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	1a1b      	subs	r3, r3, r0
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	440b      	add	r3, r1
 800139e:	3310      	adds	r3, #16
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a4:	3304      	adds	r3, #4
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter++;
 80013a8:	4b65      	ldr	r3, [pc, #404]	; (8001540 <packetRead+0x5b8>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	3301      	adds	r3, #1
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	4b63      	ldr	r3, [pc, #396]	; (8001540 <packetRead+0x5b8>)
 80013b2:	801a      	strh	r2, [r3, #0]
				}
				break;
 80013b4:	bf00      	nop
				}
        	}while(temp_pointer < length);
 80013b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	f6ff ae02 	blt.w	8000fc4 <packetRead+0x3c>
        	return CMD_GCODE;
 80013c0:	231a      	movs	r3, #26
 80013c2:	f000 bddf 	b.w	8001f84 <packetRead+0xffc>
        break;

        // command control from pc
        case COMMAND_TRANSMISION:
        {
        	Robot_CommandTypedef command_id = message[1];
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	785b      	ldrb	r3, [r3, #1]
 80013ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            switch(command_id)
 80013ce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80013d2:	2b19      	cmp	r3, #25
 80013d4:	f200 85d3 	bhi.w	8001f7e <packetRead+0xff6>
 80013d8:	a201      	add	r2, pc, #4	; (adr r2, 80013e0 <packetRead+0x458>)
 80013da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013de:	bf00      	nop
 80013e0:	08001449 	.word	0x08001449
 80013e4:	08001461 	.word	0x08001461
 80013e8:	08001479 	.word	0x08001479
 80013ec:	08001561 	.word	0x08001561
 80013f0:	080017a7 	.word	0x080017a7
 80013f4:	08001561 	.word	0x08001561
 80013f8:	08001a19 	.word	0x08001a19
 80013fc:	08001a1d 	.word	0x08001a1d
 8001400:	08001f7f 	.word	0x08001f7f
 8001404:	08001a3d 	.word	0x08001a3d
 8001408:	08001a5b 	.word	0x08001a5b
 800140c:	08001abd 	.word	0x08001abd
 8001410:	08001b8b 	.word	0x08001b8b
 8001414:	08001f4f 	.word	0x08001f4f
 8001418:	08001f5f 	.word	0x08001f5f
 800141c:	08001f7f 	.word	0x08001f7f
 8001420:	08001f7f 	.word	0x08001f7f
 8001424:	08001e8b 	.word	0x08001e8b
 8001428:	08001f6f 	.word	0x08001f6f
 800142c:	08001f3f 	.word	0x08001f3f
 8001430:	08001b29 	.word	0x08001b29
 8001434:	08001b53 	.word	0x08001b53
 8001438:	08001f7f 	.word	0x08001f7f
 800143c:	08001f7f 	.word	0x08001f7f
 8001440:	08001bc5 	.word	0x08001bc5
 8001444:	08001cbd 	.word	0x08001cbd
            {
                // Stop now
                case CMD_STOPNOW:
                {
                    duty_cmd->robot_mode = SCARA_MODE_STOP;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	2200      	movs	r2, #0
 800144c:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	2201      	movs	r2, #1
 8001452:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
                    return CMD_STOPNOW;
 800145a:	2300      	movs	r3, #0
 800145c:	f000 bd92 	b.w	8001f84 <packetRead+0xffc>
                break;

                // Scan limit
                case CMD_SCAN_LIMIT:
                {
                    duty_cmd->robot_mode = SCARA_MODE_SCAN;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	2201      	movs	r2, #1
 8001464:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	2201      	movs	r2, #1
 800146a:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]
                    return CMD_SCAN_LIMIT;
 8001472:	2301      	movs	r3, #1
 8001474:	f000 bd86 	b.w	8001f84 <packetRead+0xffc>
                break;

                // Move home
                case CMD_MOVE_HOME:
                {
                    if (length == 10){ // 2 int32_t number + 2 define byte
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	2b0a      	cmp	r3, #10
 800147c:	d15d      	bne.n	800153a <packetRead+0x5b2>
                        // memcpy(&duty_cmd->v_factor, &message[temp_pointer+=8], 8);
						// memcpy(&duty_cmd->a_factor, &message[temp_pointer], 8); 
						temp_pointer = -2;
 800147e:	f06f 0301 	mvn.w	r3, #1
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->v_factor = B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001486:	3304      	adds	r3, #4
 8001488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800148a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	4413      	add	r3, r2
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	ee07 3a90 	vmov	s15, r3
 8001496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800149a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001550 <packetRead+0x5c8>
 800149e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a2:	ee17 0a90 	vmov	r0, s15
 80014a6:	f7ff f84f 	bl	8000548 <__aeabi_f2d>
 80014aa:	4603      	mov	r3, r0
 80014ac:	460c      	mov	r4, r1
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
						duty_cmd->a_factor = B2I(temp_pointer)*COR_INVERSE_SCALE;
 80014b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	4413      	add	r3, r2
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	ee07 3a90 	vmov	s15, r3
 80014c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001550 <packetRead+0x5c8>
 80014c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014cc:	ee17 0a90 	vmov	r0, s15
 80014d0:	f7ff f83a 	bl	8000548 <__aeabi_f2d>
 80014d4:	4603      	mov	r3, r0
 80014d6:	460c      	mov	r4, r1
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0
                    }else{
                        return CMD_ERROR;
                    }
                    duty_cmd->target_point.x = 250;
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	4c1b      	ldr	r4, [pc, #108]	; (8001554 <packetRead+0x5cc>)
 80014e6:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
                    duty_cmd->target_point.y = -200;
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	4c19      	ldr	r4, [pc, #100]	; (8001558 <packetRead+0x5d0>)
 80014f2:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
                    duty_cmd->target_point.z = 120;
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	4c17      	ldr	r4, [pc, #92]	; (800155c <packetRead+0x5d4>)
 80014fe:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
                    duty_cmd->target_point.roll = 0;
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	f04f 0300 	mov.w	r3, #0
 8001508:	f04f 0400 	mov.w	r4, #0
 800150c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

                    duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	2200      	movs	r2, #0
 8001514:	745a      	strb	r2, [r3, #17]
                    duty_cmd->space_type = DUTY_SPACE_JOINT;
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	2201      	movs	r2, #1
 800151a:	735a      	strb	r2, [r3, #13]
                    duty_cmd->joint_type = DUTY_JOINT_4DOF;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	2201      	movs	r2, #1
 8001520:	73da      	strb	r2, [r3, #15]
                    duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	2202      	movs	r2, #2
 8001526:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	2201      	movs	r2, #1
 800152c:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
                    return CMD_MOVE_HOME;
 8001534:	2302      	movs	r3, #2
 8001536:	f000 bd25 	b.w	8001f84 <packetRead+0xffc>
                        return CMD_ERROR;
 800153a:	2316      	movs	r3, #22
 800153c:	f000 bd22 	b.w	8001f84 <packetRead+0xffc>
 8001540:	200023fc 	.word	0x200023fc
 8001544:	20006f98 	.word	0x20006f98
 8001548:	200065c0 	.word	0x200065c0
 800154c:	200023fe 	.word	0x200023fe
 8001550:	358637bd 	.word	0x358637bd
 8001554:	406f4000 	.word	0x406f4000
 8001558:	c0690000 	.word	0xc0690000
 800155c:	405e0000 	.word	0x405e0000

                case CMD_MOVE_JOINT:
                // Move line
                case CMD_MOVE_LINE:
                {
                    if (length == 29){ // 6 int32_t number + 3 byte number + 2 define byte
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	2b1d      	cmp	r3, #29
 8001564:	f040 8111 	bne.w	800178a <packetRead+0x802>
						//scaraSetScanFlag();
						uint8_t mode_init;
						temp_pointer = -2;
 8001568:	f06f 0301 	mvn.w	r3, #1
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c

						duty_cmd->target_point.x = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800156e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001570:	3304      	adds	r3, #4
 8001572:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	4413      	add	r3, r2
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe ffd1 	bl	8000524 <__aeabi_i2d>
 8001582:	f20f 7324 	addw	r3, pc, #1828	; 0x724
 8001586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158a:	f7ff f835 	bl	80005f8 <__aeabi_dmul>
 800158e:	4603      	mov	r3, r0
 8001590:	460c      	mov	r4, r1
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
						duty_cmd->target_point.y = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159a:	3304      	adds	r3, #4
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	4413      	add	r3, r2
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe ffbc 	bl	8000524 <__aeabi_i2d>
 80015ac:	f20f 63f8 	addw	r3, pc, #1784	; 0x6f8
 80015b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b4:	f7ff f820 	bl	80005f8 <__aeabi_dmul>
 80015b8:	4603      	mov	r3, r0
 80015ba:	460c      	mov	r4, r1
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
						duty_cmd->target_point.z = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80015c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c4:	3304      	adds	r3, #4
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	4413      	add	r3, r2
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ffa7 	bl	8000524 <__aeabi_i2d>
 80015d6:	f20f 63d0 	addw	r3, pc, #1744	; 0x6d0
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	f7ff f80b 	bl	80005f8 <__aeabi_dmul>
 80015e2:	4603      	mov	r3, r0
 80015e4:	460c      	mov	r4, r1
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
						duty_cmd->target_point.roll = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80015ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ee:	3304      	adds	r3, #4
 80015f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	4413      	add	r3, r2
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff92 	bl	8000524 <__aeabi_i2d>
 8001600:	f20f 63a4 	addw	r3, pc, #1700	; 0x6a4
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	f7fe fff6 	bl	80005f8 <__aeabi_dmul>
 800160c:	4603      	mov	r3, r0
 800160e:	460c      	mov	r4, r1
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
						duty_cmd->v_factor = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001618:	3304      	adds	r3, #4
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800161c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	4413      	add	r3, r2
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe ff7d 	bl	8000524 <__aeabi_i2d>
 800162a:	f20f 637c 	addw	r3, pc, #1660	; 0x67c
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	f7fe ffe1 	bl	80005f8 <__aeabi_dmul>
 8001636:	4603      	mov	r3, r0
 8001638:	460c      	mov	r4, r1
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
						mode_init = message[temp_pointer+=4];
 8001640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001642:	3304      	adds	r3, #4
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	4413      	add	r3, r2
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	74fb      	strb	r3, [r7, #19]

						if(mode_init == DUTY_MODE_INIT_QVA){
 8001650:	7cfb      	ldrb	r3, [r7, #19]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d118      	bne.n	8001688 <packetRead+0x700>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	2200      	movs	r2, #0
 800165a:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 800165c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165e:	3301      	adds	r3, #1
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff5a 	bl	8000524 <__aeabi_i2d>
 8001670:	f20f 6334 	addw	r3, pc, #1588	; 0x634
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	f7fe ffbe 	bl	80005f8 <__aeabi_dmul>
 800167c:	4603      	mov	r3, r0
 800167e:	460c      	mov	r4, r1
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0
 8001686:	e056      	b.n	8001736 <packetRead+0x7ae>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 8001688:	7cfb      	ldrb	r3, [r7, #19]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d118      	bne.n	80016c0 <packetRead+0x738>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	2201      	movs	r2, #1
 8001692:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001696:	3301      	adds	r3, #1
 8001698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800169a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	4413      	add	r3, r2
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe ff3e 	bl	8000524 <__aeabi_i2d>
 80016a8:	f20f 53fc 	addw	r3, pc, #1532	; 0x5fc
 80016ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b0:	f7fe ffa2 	bl	80005f8 <__aeabi_dmul>
 80016b4:	4603      	mov	r3, r0
 80016b6:	460c      	mov	r4, r1
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80016be:	e03a      	b.n	8001736 <packetRead+0x7ae>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 80016c0:	7cfb      	ldrb	r3, [r7, #19]
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d118      	bne.n	80016f8 <packetRead+0x770>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	2203      	movs	r2, #3
 80016ca:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 80016cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ce:	3301      	adds	r3, #1
 80016d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	4413      	add	r3, r2
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe ff22 	bl	8000524 <__aeabi_i2d>
 80016e0:	f20f 53c4 	addw	r3, pc, #1476	; 0x5c4
 80016e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e8:	f7fe ff86 	bl	80005f8 <__aeabi_dmul>
 80016ec:	4603      	mov	r3, r0
 80016ee:	460c      	mov	r4, r1
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80016f6:	e01e      	b.n	8001736 <packetRead+0x7ae>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 80016f8:	7cfb      	ldrb	r3, [r7, #19]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d118      	bne.n	8001730 <packetRead+0x7a8>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	2202      	movs	r2, #2
 8001702:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001706:	3301      	adds	r3, #1
 8001708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800170a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	4413      	add	r3, r2
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe ff06 	bl	8000524 <__aeabi_i2d>
 8001718:	f20f 538c 	addw	r3, pc, #1420	; 0x58c
 800171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001720:	f7fe ff6a 	bl	80005f8 <__aeabi_dmul>
 8001724:	4603      	mov	r3, r0
 8001726:	460c      	mov	r4, r1
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
 800172e:	e002      	b.n	8001736 <packetRead+0x7ae>
						}else{
							return CMD_ERROR;
 8001730:	2316      	movs	r3, #22
 8001732:	f000 bc27 	b.w	8001f84 <packetRead+0xffc>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 8001736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001738:	3304      	adds	r3, #4
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800173c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	4413      	add	r3, r2
 8001742:	781a      	ldrb	r2, [r3, #0]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 8001748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174a:	3301      	adds	r3, #1
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800174e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	781a      	ldrb	r2, [r3, #0]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	741a      	strb	r2, [r3, #16]
						if(command_id == CMD_MOVE_LINE){
 800175a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800175e:	2b03      	cmp	r3, #3
 8001760:	d106      	bne.n	8001770 <packetRead+0x7e8>
							duty_cmd->path_type = DUTY_PATH_LINE;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	2200      	movs	r2, #0
 8001766:	739a      	strb	r2, [r3, #14]
							duty_cmd->space_type = DUTY_SPACE_TASK;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	2200      	movs	r2, #0
 800176c:	735a      	strb	r2, [r3, #13]
 800176e:	e00e      	b.n	800178e <packetRead+0x806>
						}else if(command_id == CMD_MOVE_JOINT){
 8001770:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001774:	2b05      	cmp	r3, #5
 8001776:	d106      	bne.n	8001786 <packetRead+0x7fe>
							duty_cmd->joint_type = DUTY_JOINT_4DOF;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	2201      	movs	r2, #1
 800177c:	73da      	strb	r2, [r3, #15]
							duty_cmd->space_type = DUTY_SPACE_JOINT;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	2201      	movs	r2, #1
 8001782:	735a      	strb	r2, [r3, #13]
 8001784:	e003      	b.n	800178e <packetRead+0x806>
						}else{
							return CMD_ERROR;
 8001786:	2316      	movs	r3, #22
 8001788:	e3fc      	b.n	8001f84 <packetRead+0xffc>
						}

					}else{
						return CMD_ERROR;
 800178a:	2316      	movs	r3, #22
 800178c:	e3fa      	b.n	8001f84 <packetRead+0xffc>
					}
					duty_cmd->robot_mode = SCARA_MODE_DUTY;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	2202      	movs	r2, #2
 8001792:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	2201      	movs	r2, #1
 8001798:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
					return command_id;
 80017a0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80017a4:	e3ee      	b.n	8001f84 <packetRead+0xffc>
				break;


				// Move circle
                case CMD_MOVE_CIRCLE:{
                	if(length == 34){ // 7 int32_t number + 4 byte number + 2 define byte
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	2b22      	cmp	r3, #34	; 0x22
 80017aa:	f040 8133 	bne.w	8001a14 <packetRead+0xa8c>
                		uint8_t mode_init, arc_type;
                		temp_pointer = -2;
 80017ae:	f06f 0301 	mvn.w	r3, #1
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                		duty_cmd->target_point.x      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80017b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b6:	3304      	adds	r3, #4
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	4413      	add	r3, r2
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe feae 	bl	8000524 <__aeabi_i2d>
 80017c8:	f20f 43dc 	addw	r3, pc, #1244	; 0x4dc
 80017cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d0:	f7fe ff12 	bl	80005f8 <__aeabi_dmul>
 80017d4:	4603      	mov	r3, r0
 80017d6:	460c      	mov	r4, r1
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
                		duty_cmd->target_point.y      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80017de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e0:	3304      	adds	r3, #4
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	4413      	add	r3, r2
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fe99 	bl	8000524 <__aeabi_i2d>
 80017f2:	f20f 43b4 	addw	r3, pc, #1204	; 0x4b4
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	f7fe fefd 	bl	80005f8 <__aeabi_dmul>
 80017fe:	4603      	mov	r3, r0
 8001800:	460c      	mov	r4, r1
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
                		duty_cmd->sub_point.x 	      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180a:	3304      	adds	r3, #4
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800180e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	4413      	add	r3, r2
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fe84 	bl	8000524 <__aeabi_i2d>
 800181c:	f20f 4388 	addw	r3, pc, #1160	; 0x488
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	f7fe fee8 	bl	80005f8 <__aeabi_dmul>
 8001828:	4603      	mov	r3, r0
 800182a:	460c      	mov	r4, r1
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	e9c2 344c 	strd	r3, r4, [r2, #304]	; 0x130
                		duty_cmd->sub_point.y         = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001834:	3304      	adds	r3, #4
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4413      	add	r3, r2
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fe6f 	bl	8000524 <__aeabi_i2d>
 8001846:	f20f 4360 	addw	r3, pc, #1120	; 0x460
 800184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184e:	f7fe fed3 	bl	80005f8 <__aeabi_dmul>
 8001852:	4603      	mov	r3, r0
 8001854:	460c      	mov	r4, r1
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	e9c2 344e 	strd	r3, r4, [r2, #312]	; 0x138
                		duty_cmd->target_point.roll   = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800185c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185e:	3304      	adds	r3, #4
 8001860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4413      	add	r3, r2
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe5a 	bl	8000524 <__aeabi_i2d>
 8001870:	f20f 4334 	addw	r3, pc, #1076	; 0x434
 8001874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001878:	f7fe febe 	bl	80005f8 <__aeabi_dmul>
 800187c:	4603      	mov	r3, r0
 800187e:	460c      	mov	r4, r1
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
                		duty_cmd->v_factor			  = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001888:	3304      	adds	r3, #4
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800188c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	4413      	add	r3, r2
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fe45 	bl	8000524 <__aeabi_i2d>
 800189a:	f20f 430c 	addw	r3, pc, #1036	; 0x40c
 800189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a2:	f7fe fea9 	bl	80005f8 <__aeabi_dmul>
 80018a6:	4603      	mov	r3, r0
 80018a8:	460c      	mov	r4, r1
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
                		arc_type = message[temp_pointer+=4];
 80018b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b2:	3304      	adds	r3, #4
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	4413      	add	r3, r2
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	757b      	strb	r3, [r7, #21]
                		if(arc_type == ARC_AW_TYPE){
 80018c0:	7d7b      	ldrb	r3, [r7, #21]
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	d103      	bne.n	80018ce <packetRead+0x946>
                			duty_cmd->arc_dir = 1;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	2201      	movs	r2, #1
 80018ca:	615a      	str	r2, [r3, #20]
 80018cc:	e009      	b.n	80018e2 <packetRead+0x95a>
                		}else if(arc_type == ARC_CW_TYPE){
 80018ce:	7d7b      	ldrb	r3, [r7, #21]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d104      	bne.n	80018de <packetRead+0x956>
                			duty_cmd->arc_dir = -1;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	f04f 32ff 	mov.w	r2, #4294967295
 80018da:	615a      	str	r2, [r3, #20]
 80018dc:	e001      	b.n	80018e2 <packetRead+0x95a>
                		}else{
                			return CMD_ERROR;
 80018de:	2316      	movs	r3, #22
 80018e0:	e350      	b.n	8001f84 <packetRead+0xffc>
                		}
                		mode_init = message[temp_pointer+=1];
 80018e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e4:	3301      	adds	r3, #1
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	4413      	add	r3, r2
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	753b      	strb	r3, [r7, #20]
						if(mode_init == DUTY_MODE_INIT_QVA){
 80018f2:	7d3b      	ldrb	r3, [r7, #20]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d117      	bne.n	8001928 <packetRead+0x9a0>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	2200      	movs	r2, #0
 80018fc:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 80018fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001900:	3301      	adds	r3, #1
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	4413      	add	r3, r2
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fe09 	bl	8000524 <__aeabi_i2d>
 8001912:	a3e5      	add	r3, pc, #916	; (adr r3, 8001ca8 <packetRead+0xd20>)
 8001914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001918:	f7fe fe6e 	bl	80005f8 <__aeabi_dmul>
 800191c:	4603      	mov	r3, r0
 800191e:	460c      	mov	r4, r1
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0
 8001926:	e052      	b.n	80019ce <packetRead+0xa46>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 8001928:	7d3b      	ldrb	r3, [r7, #20]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d117      	bne.n	800195e <packetRead+0x9d6>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	2201      	movs	r2, #1
 8001932:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001936:	3301      	adds	r3, #1
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800193a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	4413      	add	r3, r2
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fdee 	bl	8000524 <__aeabi_i2d>
 8001948:	a3d7      	add	r3, pc, #860	; (adr r3, 8001ca8 <packetRead+0xd20>)
 800194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194e:	f7fe fe53 	bl	80005f8 <__aeabi_dmul>
 8001952:	4603      	mov	r3, r0
 8001954:	460c      	mov	r4, r1
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800195c:	e037      	b.n	80019ce <packetRead+0xa46>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 800195e:	7d3b      	ldrb	r3, [r7, #20]
 8001960:	2b03      	cmp	r3, #3
 8001962:	d117      	bne.n	8001994 <packetRead+0xa0c>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	2203      	movs	r2, #3
 8001968:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 800196a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800196c:	3301      	adds	r3, #1
 800196e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	4413      	add	r3, r2
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fdd3 	bl	8000524 <__aeabi_i2d>
 800197e:	a3ca      	add	r3, pc, #808	; (adr r3, 8001ca8 <packetRead+0xd20>)
 8001980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001984:	f7fe fe38 	bl	80005f8 <__aeabi_dmul>
 8001988:	4603      	mov	r3, r0
 800198a:	460c      	mov	r4, r1
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001992:	e01c      	b.n	80019ce <packetRead+0xa46>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 8001994:	7d3b      	ldrb	r3, [r7, #20]
 8001996:	2b02      	cmp	r3, #2
 8001998:	d117      	bne.n	80019ca <packetRead+0xa42>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	2202      	movs	r2, #2
 800199e:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 80019a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a2:	3301      	adds	r3, #1
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	4413      	add	r3, r2
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fdb8 	bl	8000524 <__aeabi_i2d>
 80019b4:	a3bc      	add	r3, pc, #752	; (adr r3, 8001ca8 <packetRead+0xd20>)
 80019b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ba:	f7fe fe1d 	bl	80005f8 <__aeabi_dmul>
 80019be:	4603      	mov	r3, r0
 80019c0:	460c      	mov	r4, r1
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
 80019c8:	e001      	b.n	80019ce <packetRead+0xa46>
						}else{
							return CMD_ERROR;
 80019ca:	2316      	movs	r3, #22
 80019cc:	e2da      	b.n	8001f84 <packetRead+0xffc>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 80019ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d0:	3304      	adds	r3, #4
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	4413      	add	r3, r2
 80019da:	781a      	ldrb	r2, [r3, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 80019e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e2:	3301      	adds	r3, #1
 80019e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	4413      	add	r3, r2
 80019ec:	781a      	ldrb	r2, [r3, #0]
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	741a      	strb	r2, [r3, #16]
						duty_cmd->path_type = DUTY_PATH_CIRCLE;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	2201      	movs	r2, #1
 80019f6:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	2200      	movs	r2, #0
 80019fc:	735a      	strb	r2, [r3, #13]
                	}else{
                		return CMD_ERROR;
                	}
                	duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	2202      	movs	r2, #2
 8001a02:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	2201      	movs	r2, #1
 8001a08:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
					return CMD_MOVE_CIRCLE;
 8001a10:	2304      	movs	r3, #4
 8001a12:	e2b7      	b.n	8001f84 <packetRead+0xffc>
                		return CMD_ERROR;
 8001a14:	2316      	movs	r3, #22
 8001a16:	e2b5      	b.n	8001f84 <packetRead+0xffc>
                break;

				// Rotate Single
				case CMD_ROTATE_SINGLE:
				{
					return CMD_ROTATE_SINGLE;
 8001a18:	2306      	movs	r3, #6
 8001a1a:	e2b3      	b.n	8001f84 <packetRead+0xffc>
				break;

				// Set output
				case CMD_OUTPUT:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d10a      	bne.n	8001a38 <packetRead+0xab0>
						temp_pointer = 2;
 8001a22:	2302      	movs	r3, #2
 8001a24:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->arc_dir = message[temp_pointer];
 8001a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	615a      	str	r2, [r3, #20]
						return CMD_OUTPUT;
 8001a34:	2307      	movs	r3, #7
 8001a36:	e2a5      	b.n	8001f84 <packetRead+0xffc>
					}else{
						return CMD_ERROR;
 8001a38:	2316      	movs	r3, #22
 8001a3a:	e2a3      	b.n	8001f84 <packetRead+0xffc>
				break;

				// Read position
				case CMD_READ_POSITION:
				{
					if(length == 3){ // 1 byte categorize read type + 2 byte define
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d109      	bne.n	8001a56 <packetRead+0xace>
						temp_pointer = 2;
 8001a42:	2302      	movs	r3, #2
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
						position_type = message[temp_pointer];
 8001a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	781a      	ldrb	r2, [r3, #0]
 8001a4e:	4b98      	ldr	r3, [pc, #608]	; (8001cb0 <packetRead+0xd28>)
 8001a50:	701a      	strb	r2, [r3, #0]
						return CMD_READ_POSITION;
 8001a52:	2309      	movs	r3, #9
 8001a54:	e296      	b.n	8001f84 <packetRead+0xffc>
					}else{
						return CMD_ERROR;
 8001a56:	2316      	movs	r3, #22
 8001a58:	e294      	b.n	8001f84 <packetRead+0xffc>
				break;			

				// Setting
				case CMD_TEST_METHOD_SETTING:
				{
					if (length == 6){ // 4 byte configure + 2 byte define
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	2b06      	cmp	r3, #6
 8001a5e:	d12b      	bne.n	8001ab8 <packetRead+0xb30>
						temp_pointer = 2;
 8001a60:	2302      	movs	r3, #2
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
						test_value_array[0] = message[temp_pointer++];
 8001a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4413      	add	r3, r2
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	b25a      	sxtb	r2, r3
 8001a74:	4b8f      	ldr	r3, [pc, #572]	; (8001cb4 <packetRead+0xd2c>)
 8001a76:	701a      	strb	r2, [r3, #0]
						test_value_array[1] = message[temp_pointer++];
 8001a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	b25a      	sxtb	r2, r3
 8001a88:	4b8a      	ldr	r3, [pc, #552]	; (8001cb4 <packetRead+0xd2c>)
 8001a8a:	705a      	strb	r2, [r3, #1]
						test_value_array[2] = message[temp_pointer++];
 8001a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a92:	461a      	mov	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4413      	add	r3, r2
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	b25a      	sxtb	r2, r3
 8001a9c:	4b85      	ldr	r3, [pc, #532]	; (8001cb4 <packetRead+0xd2c>)
 8001a9e:	709a      	strb	r2, [r3, #2]
						test_value_array[3] = message[temp_pointer++];
 8001aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4413      	add	r3, r2
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	b25a      	sxtb	r2, r3
 8001ab0:	4b80      	ldr	r3, [pc, #512]	; (8001cb4 <packetRead+0xd2c>)
 8001ab2:	70da      	strb	r2, [r3, #3]
						return CMD_TEST_METHOD_SETTING;
 8001ab4:	230a      	movs	r3, #10
 8001ab6:	e265      	b.n	8001f84 <packetRead+0xffc>
					}else{
						return CMD_ERROR;
 8001ab8:	2316      	movs	r3, #22
 8001aba:	e263      	b.n	8001f84 <packetRead+0xffc>
				break;

				// Change method
				case CMD_METHOD_CHANGE:
				{
					if(length == 3){ // 1 byte configure + 2 byte define
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d130      	bne.n	8001b24 <packetRead+0xb9c>
						uint8_t method;
						temp_pointer = 2;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
						method = message[temp_pointer];
 8001ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	4413      	add	r3, r2
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	75bb      	strb	r3, [r7, #22]
						if (SCARA_METHOD_MANUAL == method) {
 8001ad0:	7dbb      	ldrb	r3, [r7, #22]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d103      	bne.n	8001ade <packetRead+0xb56>
							duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	705a      	strb	r2, [r3, #1]
 8001adc:	e01d      	b.n	8001b1a <packetRead+0xb92>
						} else if (SCARA_METHOD_SEMI_AUTO == method) {
 8001ade:	7dbb      	ldrb	r3, [r7, #22]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d103      	bne.n	8001aec <packetRead+0xb64>
							duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	705a      	strb	r2, [r3, #1]
 8001aea:	e016      	b.n	8001b1a <packetRead+0xb92>
						} else if (SCARA_METHOD_GCODE == method) {
 8001aec:	7dbb      	ldrb	r3, [r7, #22]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d103      	bne.n	8001afa <packetRead+0xb72>
							duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	2202      	movs	r2, #2
 8001af6:	705a      	strb	r2, [r3, #1]
 8001af8:	e00f      	b.n	8001b1a <packetRead+0xb92>
						}else if(SCARA_METHOD_TEST == method){
 8001afa:	7dbb      	ldrb	r3, [r7, #22]
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d103      	bne.n	8001b08 <packetRead+0xb80>
							duty_cmd->robot_method = SCARA_METHOD_TEST;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	2203      	movs	r2, #3
 8001b04:	705a      	strb	r2, [r3, #1]
 8001b06:	e008      	b.n	8001b1a <packetRead+0xb92>
						}else if(SCARA_METHOD_PICK_AND_PLACE == method){
 8001b08:	7dbb      	ldrb	r3, [r7, #22]
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d103      	bne.n	8001b16 <packetRead+0xb8e>
							duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	2204      	movs	r2, #4
 8001b12:	705a      	strb	r2, [r3, #1]
 8001b14:	e001      	b.n	8001b1a <packetRead+0xb92>
						}else {
							return CMD_ERROR;
 8001b16:	2316      	movs	r3, #22
 8001b18:	e234      	b.n	8001f84 <packetRead+0xffc>
						}
						duty_cmd->change_method = TRUE;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	701a      	strb	r2, [r3, #0]
						return CMD_METHOD_CHANGE;
 8001b20:	230b      	movs	r3, #11
 8001b22:	e22f      	b.n	8001f84 <packetRead+0xffc>
					}else{
						return CMD_ERROR;
 8001b24:	2316      	movs	r3, #22
 8001b26:	e22d      	b.n	8001f84 <packetRead+0xffc>
				break;

				// Set manual key
				case CMD_KEYBOARD:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d10f      	bne.n	8001b4e <packetRead+0xbc6>
						int temp_pointer = 2;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	61fb      	str	r3, [r7, #28]
						duty_cmd->keyboard = (SCARA_KeyTypeDef)message[temp_pointer];
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	4413      	add	r3, r2
 8001b38:	781a      	ldrb	r2, [r3, #0]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	70da      	strb	r2, [r3, #3]
						duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	2200      	movs	r2, #0
 8001b42:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]
						return CMD_KEYBOARD;
 8001b4a:	2314      	movs	r3, #20
 8001b4c:	e21a      	b.n	8001f84 <packetRead+0xffc>
					}else{
						return CMD_ERROR;
 8001b4e:	2316      	movs	r3, #22
 8001b50:	e218      	b.n	8001f84 <packetRead+0xffc>
				break;

				// Set manual key speed
				case CMD_KEY_SPEED:
				{
					if(length == 3){ // 1 byte key value + 2 byte define
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d116      	bne.n	8001b86 <packetRead+0xbfe>
						int temp_pointer = 2;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
						int32_t speed = (int32_t)message[temp_pointer];
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	4413      	add	r3, r2
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	623b      	str	r3, [r7, #32]
						// check limit
						if ((speed < SHIFT_SPEED_MIN) || (speed > SHIFT_SPEED_MAX)) {
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	dd02      	ble.n	8001b72 <packetRead+0xbea>
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	2b0e      	cmp	r3, #14
 8001b70:	dd01      	ble.n	8001b76 <packetRead+0xbee>
							return CMD_ERROR;
 8001b72:	2316      	movs	r3, #22
 8001b74:	e206      	b.n	8001f84 <packetRead+0xffc>
						}
						duty_cmd->key_speed = speed;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	6a3a      	ldr	r2, [r7, #32]
 8001b7a:	605a      	str	r2, [r3, #4]
						current_key_speed1 = speed;
 8001b7c:	4a4e      	ldr	r2, [pc, #312]	; (8001cb8 <packetRead+0xd30>)
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	6013      	str	r3, [r2, #0]
						return CMD_KEY_SPEED;
 8001b82:	2315      	movs	r3, #21
 8001b84:	e1fe      	b.n	8001f84 <packetRead+0xffc>
					}else{
						return CMD_ERROR;
 8001b86:	2316      	movs	r3, #22
 8001b88:	e1fc      	b.n	8001f84 <packetRead+0xffc>
				break;

				// Set test mode
				case CMD_MOTOR_TEST:
				{
					if(length == 3){ // 1byte key mode + 2 byte define
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d117      	bne.n	8001bc0 <packetRead+0xc38>
						int temp_pointer = 2;
 8001b90:	2302      	movs	r3, #2
 8001b92:	61bb      	str	r3, [r7, #24]
						uint8_t test_key = message[temp_pointer];
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	4413      	add	r3, r2
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	75fb      	strb	r3, [r7, #23]
						if(test_key < 0 || test_key > 8){
 8001b9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d901      	bls.n	8001ba8 <packetRead+0xc20>
							return CMD_ERROR;
 8001ba4:	2316      	movs	r3, #22
 8001ba6:	e1ed      	b.n	8001f84 <packetRead+0xffc>
						}
						duty_cmd->test_key = test_key;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	7dfa      	ldrb	r2, [r7, #23]
 8001bac:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
						duty_cmd->robot_method = SCARA_METHOD_TEST;	
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
						return CMD_MOTOR_TEST;
 8001bbc:	230c      	movs	r3, #12
 8001bbe:	e1e1      	b.n	8001f84 <packetRead+0xffc>
					}else{
						return CMD_ERROR;
 8001bc0:	2316      	movs	r3, #22
 8001bc2:	e1df      	b.n	8001f84 <packetRead+0xffc>
				}
				break;

				case CMD_OBJECT_DETECTED:
				{
					if (length == 15){ // 3 int32_t number + 1 byte object type + 2 define byte
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b0f      	cmp	r3, #15
 8001bc8:	d16a      	bne.n	8001ca0 <packetRead+0xd18>
						temp_pointer = -2;
 8001bca:	f06f 0301 	mvn.w	r3, #1
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->target_point.x = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	4413      	add	r3, r2
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe fca0 	bl	8000524 <__aeabi_i2d>
 8001be4:	a330      	add	r3, pc, #192	; (adr r3, 8001ca8 <packetRead+0xd20>)
 8001be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bea:	f7fe fd05 	bl	80005f8 <__aeabi_dmul>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	460c      	mov	r4, r1
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
						duty_cmd->target_point.y = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fc8c 	bl	8000524 <__aeabi_i2d>
 8001c0c:	a326      	add	r3, pc, #152	; (adr r3, 8001ca8 <packetRead+0xd20>)
 8001c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c12:	f7fe fcf1 	bl	80005f8 <__aeabi_dmul>
 8001c16:	4603      	mov	r3, r0
 8001c18:	460c      	mov	r4, r1
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
						//duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
						duty_cmd->target_point.roll = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c22:	3304      	adds	r3, #4
 8001c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fc78 	bl	8000524 <__aeabi_i2d>
 8001c34:	a31c      	add	r3, pc, #112	; (adr r3, 8001ca8 <packetRead+0xd20>)
 8001c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3a:	f7fe fcdd 	bl	80005f8 <__aeabi_dmul>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	460c      	mov	r4, r1
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
						duty_cmd->target_point.object_type = message[temp_pointer+=4];
 8001c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	4413      	add	r3, r2
 8001c54:	781a      	ldrb	r2, [r3, #0]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
						duty_cmd->target_point.t = (double)(TIM2->CNT);
 8001c5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fc4e 	bl	8000504 <__aeabi_ui2d>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	460c      	mov	r4, r1
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
						duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2201      	movs	r2, #1
 8001c76:	745a      	strb	r2, [r3, #17]
						duty_cmd->path_type = DUTY_PATH_LINE;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2200      	movs	r2, #0
 8001c82:	735a      	strb	r2, [r3, #13]
						duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	2200      	movs	r2, #0
 8001c88:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = DUTY_TRAJECTORY_SCURVE;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	741a      	strb	r2, [r3, #16]
					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	2204      	movs	r2, #4
 8001c94:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
					return CMD_OBJECT_DETECTED;
 8001c9c:	2318      	movs	r3, #24
 8001c9e:	e171      	b.n	8001f84 <packetRead+0xffc>
						return CMD_ERROR;
 8001ca0:	2316      	movs	r3, #22
 8001ca2:	e16f      	b.n	8001f84 <packetRead+0xffc>
 8001ca4:	f3af 8000 	nop.w
 8001ca8:	a0000000 	.word	0xa0000000
 8001cac:	3eb0c6f7 	.word	0x3eb0c6f7
 8001cb0:	2000dd00 	.word	0x2000dd00
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	20000060 	.word	0x20000060
				}
				break;

				case CMD_SETUP_CONVEYOR_SPEED:
				{
					if (length == 46) { // 11 int32_t number + 2 define byte
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2b2e      	cmp	r3, #46	; 0x2e
 8001cc0:	f040 80e1 	bne.w	8001e86 <packetRead+0xefe>
						temp_pointer = -2;
 8001cc4:	f06f 0301 	mvn.w	r3, #1
 8001cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
						conveyor_speed           = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ccc:	3304      	adds	r3, #4
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fc23 	bl	8000524 <__aeabi_i2d>
 8001cde:	a3ac      	add	r3, pc, #688	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce4:	f7fe fc88 	bl	80005f8 <__aeabi_dmul>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	460c      	mov	r4, r1
 8001cec:	4aaa      	ldr	r2, [pc, #680]	; (8001f98 <packetRead+0x1010>)
 8001cee:	e9c2 3400 	strd	r3, r4, [r2]
						PUT_DOWN_TIME_ON_SLOT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fc0f 	bl	8000524 <__aeabi_i2d>
 8001d06:	a3a2      	add	r3, pc, #648	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0c:	f7fe fc74 	bl	80005f8 <__aeabi_dmul>
 8001d10:	4603      	mov	r3, r0
 8001d12:	460c      	mov	r4, r1
 8001d14:	4aa1      	ldr	r2, [pc, #644]	; (8001f9c <packetRead+0x1014>)
 8001d16:	e9c2 3400 	strd	r3, r4, [r2]
						PUT_DOWN_TIME_ON_OBJECT	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	4413      	add	r3, r2
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fbfb 	bl	8000524 <__aeabi_i2d>
 8001d2e:	a398      	add	r3, pc, #608	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d34:	f7fe fc60 	bl	80005f8 <__aeabi_dmul>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	460c      	mov	r4, r1
 8001d3c:	4a98      	ldr	r2, [pc, #608]	; (8001fa0 <packetRead+0x1018>)
 8001d3e:	e9c2 3400 	strd	r3, r4, [r2]
						PICK_UP_TIME_ON_OBJECT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d44:	3304      	adds	r3, #4
 8001d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fbe7 	bl	8000524 <__aeabi_i2d>
 8001d56:	a38e      	add	r3, pc, #568	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5c:	f7fe fc4c 	bl	80005f8 <__aeabi_dmul>
 8001d60:	4603      	mov	r3, r0
 8001d62:	460c      	mov	r4, r1
 8001d64:	4a8f      	ldr	r2, [pc, #572]	; (8001fa4 <packetRead+0x101c>)
 8001d66:	e9c2 3400 	strd	r3, r4, [r2]
						PICK_UP_TIME_ON_SLOT	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	4413      	add	r3, r2
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fbd3 	bl	8000524 <__aeabi_i2d>
 8001d7e:	a384      	add	r3, pc, #528	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d84:	f7fe fc38 	bl	80005f8 <__aeabi_dmul>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	460c      	mov	r4, r1
 8001d8c:	4a86      	ldr	r2, [pc, #536]	; (8001fa8 <packetRead+0x1020>)
 8001d8e:	e9c2 3400 	strd	r3, r4, [r2]
						MOVE_TIME 				 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d94:	3304      	adds	r3, #4
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fbbf 	bl	8000524 <__aeabi_i2d>
 8001da6:	a37a      	add	r3, pc, #488	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dac:	f7fe fc24 	bl	80005f8 <__aeabi_dmul>
 8001db0:	4603      	mov	r3, r0
 8001db2:	460c      	mov	r4, r1
 8001db4:	4a7d      	ldr	r2, [pc, #500]	; (8001fac <packetRead+0x1024>)
 8001db6:	e9c2 3400 	strd	r3, r4, [r2]
						ATTACH_TIME 			 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fbab 	bl	8000524 <__aeabi_i2d>
 8001dce:	a370      	add	r3, pc, #448	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd4:	f7fe fc10 	bl	80005f8 <__aeabi_dmul>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	460c      	mov	r4, r1
 8001ddc:	4a74      	ldr	r2, [pc, #464]	; (8001fb0 <packetRead+0x1028>)
 8001dde:	e9c2 3400 	strd	r3, r4, [r2]
						DETACH_TIME 			 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de4:	3304      	adds	r3, #4
 8001de6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	4413      	add	r3, r2
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fb97 	bl	8000524 <__aeabi_i2d>
 8001df6:	a366      	add	r3, pc, #408	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	f7fe fbfc 	bl	80005f8 <__aeabi_dmul>
 8001e00:	4603      	mov	r3, r0
 8001e02:	460c      	mov	r4, r1
 8001e04:	4a6b      	ldr	r2, [pc, #428]	; (8001fb4 <packetRead+0x102c>)
 8001e06:	e9c2 3400 	strd	r3, r4, [r2]
						UP_HEIGHT 				 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	4413      	add	r3, r2
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fb83 	bl	8000524 <__aeabi_i2d>
 8001e1e:	a35c      	add	r3, pc, #368	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e24:	f7fe fbe8 	bl	80005f8 <__aeabi_dmul>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	460c      	mov	r4, r1
 8001e2c:	4a62      	ldr	r2, [pc, #392]	; (8001fb8 <packetRead+0x1030>)
 8001e2e:	e9c2 3400 	strd	r3, r4, [r2]
						DOWN_HEIGHT_ON_OBJECT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e34:	3304      	adds	r3, #4
 8001e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fb6f 	bl	8000524 <__aeabi_i2d>
 8001e46:	a352      	add	r3, pc, #328	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	f7fe fbd4 	bl	80005f8 <__aeabi_dmul>
 8001e50:	4603      	mov	r3, r0
 8001e52:	460c      	mov	r4, r1
 8001e54:	4a59      	ldr	r2, [pc, #356]	; (8001fbc <packetRead+0x1034>)
 8001e56:	e9c2 3400 	strd	r3, r4, [r2]
						DOWN_HEIGHT_ON_SLOT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4413      	add	r3, r2
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fb5b 	bl	8000524 <__aeabi_i2d>
 8001e6e:	a348      	add	r3, pc, #288	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e74:	f7fe fbc0 	bl	80005f8 <__aeabi_dmul>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	460c      	mov	r4, r1
 8001e7c:	4a50      	ldr	r2, [pc, #320]	; (8001fc0 <packetRead+0x1038>)
 8001e7e:	e9c2 3400 	strd	r3, r4, [r2]
						return CMD_SETUP_CONVEYOR_SPEED;
 8001e82:	2319      	movs	r3, #25
 8001e84:	e07e      	b.n	8001f84 <packetRead+0xffc>
					}else{
						return CMD_ERROR;
 8001e86:	2316      	movs	r3, #22
 8001e88:	e07c      	b.n	8001f84 <packetRead+0xffc>
					}
				}
				break;
				case CMD_GCODE_CONFIGURE:
				{
					if(length == 18) { // 4 int32_t number + 2 define byte
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b12      	cmp	r3, #18
 8001e8e:	d154      	bne.n	8001f3a <packetRead+0xfb2>
						temp_pointer = -2;
 8001e90:	f06f 0301 	mvn.w	r3, #1
 8001e94:	62fb      	str	r3, [r7, #44]	; 0x2c
						offset_x = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e98:	3304      	adds	r3, #4
 8001e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fb3d 	bl	8000524 <__aeabi_i2d>
 8001eaa:	a339      	add	r3, pc, #228	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb0:	f7fe fba2 	bl	80005f8 <__aeabi_dmul>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	460c      	mov	r4, r1
 8001eb8:	4a42      	ldr	r2, [pc, #264]	; (8001fc4 <packetRead+0x103c>)
 8001eba:	e9c2 3400 	strd	r3, r4, [r2]
						offset_y = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4413      	add	r3, r2
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fb29 	bl	8000524 <__aeabi_i2d>
 8001ed2:	a32f      	add	r3, pc, #188	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed8:	f7fe fb8e 	bl	80005f8 <__aeabi_dmul>
 8001edc:	4603      	mov	r3, r0
 8001ede:	460c      	mov	r4, r1
 8001ee0:	4a39      	ldr	r2, [pc, #228]	; (8001fc8 <packetRead+0x1040>)
 8001ee2:	e9c2 3400 	strd	r3, r4, [r2]
						offset_z = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee8:	3304      	adds	r3, #4
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fb15 	bl	8000524 <__aeabi_i2d>
 8001efa:	a325      	add	r3, pc, #148	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	f7fe fb7a 	bl	80005f8 <__aeabi_dmul>
 8001f04:	4603      	mov	r3, r0
 8001f06:	460c      	mov	r4, r1
 8001f08:	4a30      	ldr	r2, [pc, #192]	; (8001fcc <packetRead+0x1044>)
 8001f0a:	e9c2 3400 	strd	r3, r4, [r2]
						roll_angle =(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f10:	3304      	adds	r3, #4
 8001f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	4413      	add	r3, r2
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe fb01 	bl	8000524 <__aeabi_i2d>
 8001f22:	a31b      	add	r3, pc, #108	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f28:	f7fe fb66 	bl	80005f8 <__aeabi_dmul>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	460c      	mov	r4, r1
 8001f30:	4a27      	ldr	r2, [pc, #156]	; (8001fd0 <packetRead+0x1048>)
 8001f32:	e9c2 3400 	strd	r3, r4, [r2]
						return CMD_GCODE_CONFIGURE;
 8001f36:	2311      	movs	r3, #17
 8001f38:	e024      	b.n	8001f84 <packetRead+0xffc>
					}else{
						return CMD_ERROR;
 8001f3a:	2316      	movs	r3, #22
 8001f3c:	e022      	b.n	8001f84 <packetRead+0xffc>
					}
				}
				break;
				case CMD_GCODE_RUN:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2202      	movs	r2, #2
 8001f42:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RUN;
 8001f4a:	2313      	movs	r3, #19
 8001f4c:	e01a      	b.n	8001f84 <packetRead+0xffc>
				}
				break;
				case CMD_GCODE_STOP:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2202      	movs	r2, #2
 8001f52:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_STOP;
 8001f5a:	230d      	movs	r3, #13
 8001f5c:	e012      	b.n	8001f84 <packetRead+0xffc>
				}
				break;
				case CMD_GCODE_PAUSE:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	2202      	movs	r2, #2
 8001f62:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_PAUSE;
 8001f6a:	230e      	movs	r3, #14
 8001f6c:	e00a      	b.n	8001f84 <packetRead+0xffc>
				}
				break;
				case CMD_GCODE_RESUME:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	2202      	movs	r2, #2
 8001f72:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	2200      	movs	r2, #0
 8001f78:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RESUME;
 8001f7a:	2312      	movs	r3, #18
 8001f7c:	e002      	b.n	8001f84 <packetRead+0xffc>
				}
				break;
				//Unknow command id
				default:
				{
					return CMD_ERROR;
 8001f7e:	2316      	movs	r3, #22
 8001f80:	e000      	b.n	8001f84 <packetRead+0xffc>
        break;

        //unknow protocol id
        default:
        {
            return PROTOCOL_ERROR;
 8001f82:	2317      	movs	r3, #23
        }
    }
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3734      	adds	r7, #52	; 0x34
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd90      	pop	{r4, r7, pc}
 8001f8c:	f3af 8000 	nop.w
 8001f90:	a0000000 	.word	0xa0000000
 8001f94:	3eb0c6f7 	.word	0x3eb0c6f7
 8001f98:	20000058 	.word	0x20000058
 8001f9c:	20000008 	.word	0x20000008
 8001fa0:	20000010 	.word	0x20000010
 8001fa4:	20000018 	.word	0x20000018
 8001fa8:	20000020 	.word	0x20000020
 8001fac:	20000028 	.word	0x20000028
 8001fb0:	20000030 	.word	0x20000030
 8001fb4:	20000038 	.word	0x20000038
 8001fb8:	20000040 	.word	0x20000040
 8001fbc:	20000048 	.word	0x20000048
 8001fc0:	20000050 	.word	0x20000050
 8001fc4:	20006f80 	.word	0x20006f80
 8001fc8:	2000dd18 	.word	0x2000dd18
 8001fcc:	2000dd08 	.word	0x2000dd08
 8001fd0:	20006f78 	.word	0x20006f78

08001fd4 <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail, int32_t *detail_length) {
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b0e2      	sub	sp, #392	; 0x188
 8001fda:	af2e      	add	r7, sp, #184	; 0xb8
 8001fdc:	4601      	mov	r1, r0
 8001fde:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8001fe2:	e880 000c 	stmia.w	r0, {r2, r3}
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	2b1a      	cmp	r3, #26
 8001fee:	f200 815e 	bhi.w	80022ae <commandReply+0x2da>
 8001ff2:	a201      	add	r2, pc, #4	; (adr r2, 8001ff8 <commandReply+0x24>)
 8001ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff8:	08002065 	.word	0x08002065
 8001ffc:	08002065 	.word	0x08002065
 8002000:	08002065 	.word	0x08002065
 8002004:	08002065 	.word	0x08002065
 8002008:	08002065 	.word	0x08002065
 800200c:	08002065 	.word	0x08002065
 8002010:	08002065 	.word	0x08002065
 8002014:	0800206d 	.word	0x0800206d
 8002018:	080020e7 	.word	0x080020e7
 800201c:	0800211b 	.word	0x0800211b
 8002020:	080021b1 	.word	0x080021b1
 8002024:	080021db 	.word	0x080021db
 8002028:	08002065 	.word	0x08002065
 800202c:	0800223d 	.word	0x0800223d
 8002030:	0800223d 	.word	0x0800223d
 8002034:	0800223d 	.word	0x0800223d
 8002038:	0800223d 	.word	0x0800223d
 800203c:	0800221b 	.word	0x0800221b
 8002040:	0800223d 	.word	0x0800223d
 8002044:	0800223d 	.word	0x0800223d
 8002048:	08002245 	.word	0x08002245
 800204c:	0800224d 	.word	0x0800224d
 8002050:	0800228d 	.word	0x0800228d
 8002054:	080022af 	.word	0x080022af
 8002058:	08002065 	.word	0x08002065
 800205c:	080021d3 	.word	0x080021d3
 8002060:	080021e3 	.word	0x080021e3
	case CMD_MOTOR_TEST:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_OBJECT_DETECTED:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 8002064:	2309      	movs	r3, #9
 8002066:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 800206a:	e130      	b.n	80022ce <commandReply+0x2fa>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.arc_dir) {
 800206c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002070:	2b01      	cmp	r3, #1
 8002072:	d110      	bne.n	8002096 <commandReply+0xc2>
				scaraSetOutput(1);
 8002074:	2001      	movs	r0, #1
 8002076:	f008 fadb 	bl	800a630 <scaraSetOutput>
				// strcpy( (char *)detail, "Output ON");
				// detail_length += 9;
				detail[(*detail_length)++] = OUTPUT_ON;
 800207a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	1c59      	adds	r1, r3, #1
 8002082:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002086:	6011      	str	r1, [r2, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800208e:	4413      	add	r3, r2
 8002090:	220d      	movs	r2, #13
 8002092:	701a      	strb	r2, [r3, #0]
 8002094:	e023      	b.n	80020de <commandReply+0x10a>
			} else if (0 == duty_cmd.arc_dir) {
 8002096:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800209a:	2b00      	cmp	r3, #0
 800209c:	d110      	bne.n	80020c0 <commandReply+0xec>
				scaraSetOutput(0);
 800209e:	2000      	movs	r0, #0
 80020a0:	f008 fac6 	bl	800a630 <scaraSetOutput>
				detail[(*detail_length)++] = OUTPUT_OFF;
 80020a4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	1c59      	adds	r1, r3, #1
 80020ac:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80020b0:	6011      	str	r1, [r2, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80020b8:	4413      	add	r3, r2
 80020ba:	220e      	movs	r2, #14
 80020bc:	701a      	strb	r2, [r3, #0]
 80020be:	e00e      	b.n	80020de <commandReply+0x10a>
			} else {
				// strcpy( (char *)detail, "Wrong Value");
				// detail_length += 11;
				detail[(*detail_length)++] = WRONG_OUTPUT_VALUE ;
 80020c0:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	1c59      	adds	r1, r3, #1
 80020c8:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80020cc:	6011      	str	r1, [r2, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80020d4:	4413      	add	r3, r2
 80020d6:	220f      	movs	r2, #15
 80020d8:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 80020da:	2307      	movs	r3, #7
 80020dc:	e0f9      	b.n	80022d2 <commandReply+0x2fe>
			}
			ret = RPD_OK;
 80020de:	2308      	movs	r3, #8
 80020e0:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 80020e4:	e0f3      	b.n	80022ce <commandReply+0x2fa>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 80020e6:	f008 fb05 	bl	800a6f4 <scaraGetMode>
 80020ea:	4603      	mov	r3, r0
 80020ec:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			current_state	 = scaraGetDutyState();
 80020f0:	f008 fb18 	bl	800a724 <scaraGetDutyState>
 80020f4:	4603      	mov	r3, r0
 80020f6:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 80020fa:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d107      	bne.n	8002112 <commandReply+0x13e>
 8002102:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8002106:	2b00      	cmp	r3, #0
 8002108:	d103      	bne.n	8002112 <commandReply+0x13e>
				ret = RPD_IDLE;
 800210a:	2300      	movs	r3, #0
 800210c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 8002110:	e0dd      	b.n	80022ce <commandReply+0x2fa>
				ret = RPD_BUSY;
 8002112:	2301      	movs	r3, #1
 8002114:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002118:	e0d9      	b.n	80022ce <commandReply+0x2fa>
	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			if(position_type == REAL_POSITION_DATA || position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 800211a:	4b71      	ldr	r3, [pc, #452]	; (80022e0 <commandReply+0x30c>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <commandReply+0x156>
 8002122:	4b6f      	ldr	r3, [pc, #444]	; (80022e0 <commandReply+0x30c>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d113      	bne.n	8002152 <commandReply+0x17e>
				lowlayer_readTruePosition(&position);
 800212a:	f107 0308 	add.w	r3, r7, #8
 800212e:	4618      	mov	r0, r3
 8002130:	f003 fe72 	bl	8005e18 <lowlayer_readTruePosition>
				kinematicForward(&position);
 8002134:	f107 0308 	add.w	r3, r7, #8
 8002138:	4618      	mov	r0, r3
 800213a:	f002 ff29 	bl	8004f90 <kinematicForward>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 800213e:	4b68      	ldr	r3, [pc, #416]	; (80022e0 <commandReply+0x30c>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d11e      	bne.n	8002184 <commandReply+0x1b0>
					scaraUpdatePosition(&position);
 8002146:	f107 0308 	add.w	r3, r7, #8
 800214a:	4618      	mov	r0, r3
 800214c:	f008 fac2 	bl	800a6d4 <scaraUpdatePosition>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 8002150:	e018      	b.n	8002184 <commandReply+0x1b0>
				}
			}else if(position_type == ESTIMATE_POSITION_DATA){
 8002152:	4b63      	ldr	r3, [pc, #396]	; (80022e0 <commandReply+0x30c>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d105      	bne.n	8002166 <commandReply+0x192>
				scaraGetPosition(&position);
 800215a:	f107 0308 	add.w	r3, r7, #8
 800215e:	4618      	mov	r0, r3
 8002160:	f008 faa8 	bl	800a6b4 <scaraGetPosition>
 8002164:	e00e      	b.n	8002184 <commandReply+0x1b0>
			}else{
				detail[(*detail_length)++] = WRONG_READ_POSITION_TYPE;
 8002166:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	1c59      	adds	r1, r3, #1
 800216e:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002172:	6011      	str	r1, [r2, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800217a:	4413      	add	r3, r2
 800217c:	2210      	movs	r2, #16
 800217e:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 8002180:	2307      	movs	r3, #7
 8002182:	e0a6      	b.n	80022d2 <commandReply+0x2fe>
			}
			*detail_length = scaraPosition_packaging(detail, position);
 8002184:	4668      	mov	r0, sp
 8002186:	f107 0310 	add.w	r3, r7, #16
 800218a:	22b8      	movs	r2, #184	; 0xb8
 800218c:	4619      	mov	r1, r3
 800218e:	f013 fde5 	bl	8015d5c <memcpy>
 8002192:	f107 0308 	add.w	r3, r7, #8
 8002196:	cb0c      	ldmia	r3, {r2, r3}
 8002198:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 800219c:	f008 faf8 	bl	800a790 <scaraPosition_packaging>
 80021a0:	4602      	mov	r2, r0
 80021a2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80021a6:	601a      	str	r2, [r3, #0]
			ret =  RPD_POSITION;
 80021a8:	2302      	movs	r3, #2
 80021aa:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 80021ae:	e08e      	b.n	80022ce <commandReply+0x2fa>
	case CMD_TEST_METHOD_SETTING:
		detail[(*detail_length)++] = TEST_VALUE_SETTING;
 80021b0:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	1c59      	adds	r1, r3, #1
 80021b8:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80021bc:	6011      	str	r1, [r2, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80021c4:	4413      	add	r3, r2
 80021c6:	2211      	movs	r2, #17
 80021c8:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 80021ca:	2308      	movs	r3, #8
 80021cc:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80021d0:	e07d      	b.n	80022ce <commandReply+0x2fa>
	case CMD_SETUP_CONVEYOR_SPEED:
		ret = RPD_OK;
 80021d2:	2308      	movs	r3, #8
 80021d4:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80021d8:	e079      	b.n	80022ce <commandReply+0x2fa>
	case CMD_METHOD_CHANGE:
		ret = RPD_DUTY;
 80021da:	2309      	movs	r3, #9
 80021dc:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80021e0:	e075      	b.n	80022ce <commandReply+0x2fa>
	case CMD_GCODE:{
		if(point_counter == total_num_of_point){
 80021e2:	4b40      	ldr	r3, [pc, #256]	; (80022e4 <commandReply+0x310>)
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	4b3f      	ldr	r3, [pc, #252]	; (80022e8 <commandReply+0x314>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d110      	bne.n	8002212 <commandReply+0x23e>
			detail[(*detail_length)++] = GCODE_TRANSFER_FINISH;
 80021f0:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	1c59      	adds	r1, r3, #1
 80021f8:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80021fc:	6011      	str	r1, [r2, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002204:	4413      	add	r3, r2
 8002206:	221e      	movs	r2, #30
 8002208:	701a      	strb	r2, [r3, #0]
			ret = RPD_OK;
 800220a:	2308      	movs	r3, #8
 800220c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}else{
			ret = RPD_TRANSFER;
		}
	}
	break;
 8002210:	e05d      	b.n	80022ce <commandReply+0x2fa>
			ret = RPD_TRANSFER;
 8002212:	230a      	movs	r3, #10
 8002214:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	break;
 8002218:	e059      	b.n	80022ce <commandReply+0x2fa>
	case CMD_GCODE_CONFIGURE:
	{
		detail[(*detail_length)++] = GCODE_OFFSET_CONFIGURE;
 800221a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	1c59      	adds	r1, r3, #1
 8002222:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002226:	6011      	str	r1, [r2, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800222e:	4413      	add	r3, r2
 8002230:	221f      	movs	r2, #31
 8002232:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8002234:	2308      	movs	r3, #8
 8002236:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	break;
 800223a:	e048      	b.n	80022ce <commandReply+0x2fa>
	case CMD_GCODE_PAUSE:
	case CMD_JOB_PUSH_MOVE_LINE:
	case CMD_JOB_PUSH_MOVE_JOINT:
	case CMD_GCODE_RESUME:
	case CMD_GCODE_RUN:
		ret = RPD_DUTY;
 800223c:	2309      	movs	r3, #9
 800223e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002242:	e044      	b.n	80022ce <commandReply+0x2fa>
	case CMD_KEYBOARD:
		ret = RPD_DUTY;
 8002244:	2309      	movs	r3, #9
 8002246:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 800224a:	e040      	b.n	80022ce <commandReply+0x2fa>
	case CMD_KEY_SPEED:
		// sprintf((char*) detail, "MANUAL SPEED = %d", duty_cmd.key_speed);
		detail[(*detail_length)++] = MANUAL_SPEED;
 800224c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	1c59      	adds	r1, r3, #1
 8002254:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002258:	6011      	str	r1, [r2, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002260:	4413      	add	r3, r2
 8002262:	2216      	movs	r2, #22
 8002264:	701a      	strb	r2, [r3, #0]
		detail[(*detail_length)++] = (uint8_t)(duty_cmd.key_speed);
 8002266:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800226a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	1c59      	adds	r1, r3, #1
 8002272:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002276:	6011      	str	r1, [r2, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800227e:	4413      	add	r3, r2
 8002280:	b2c2      	uxtb	r2, r0
 8002282:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8002284:	2308      	movs	r3, #8
 8002286:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 800228a:	e020      	b.n	80022ce <commandReply+0x2fa>
	case CMD_ERROR:
		// strcpy( (char *)detail, "Check parameters");
		detail[(*detail_length)++] = CHECK_PARAMETER;
 800228c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	1c59      	adds	r1, r3, #1
 8002294:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002298:	6011      	str	r1, [r2, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80022a0:	4413      	add	r3, r2
 80022a2:	2215      	movs	r2, #21
 80022a4:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 80022a6:	2307      	movs	r3, #7
 80022a8:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80022ac:	e00f      	b.n	80022ce <commandReply+0x2fa>
	default:
		// strcpy( (char *)detail, "Unknown command");
		detail[(*detail_length)++] = UNKNOW_COMMAND;
 80022ae:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	1c59      	adds	r1, r3, #1
 80022b6:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80022ba:	6011      	str	r1, [r2, #0]
 80022bc:	461a      	mov	r2, r3
 80022be:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80022c2:	4413      	add	r3, r2
 80022c4:	2217      	movs	r2, #23
 80022c6:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 80022c8:	2307      	movs	r3, #7
 80022ca:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	return ret;
 80022ce:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	37d0      	adds	r7, #208	; 0xd0
 80022d6:	46bd      	mov	sp, r7
 80022d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022dc:	b002      	add	sp, #8
 80022de:	4770      	bx	lr
 80022e0:	2000dd00 	.word	0x2000dd00
 80022e4:	200023fc 	.word	0x200023fc
 80022e8:	20006f88 	.word	0x20006f88

080022ec <commandRespond1>:

int32_t				commandRespond1	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										int32_t detail_length,
										char *respond) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	4603      	mov	r3, r0
 80022fa:	73fb      	strb	r3, [r7, #15]
	int32_t out_length = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
	respond[out_length++] = 0x28;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	617a      	str	r2, [r7, #20]
 8002306:	461a      	mov	r2, r3
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	4413      	add	r3, r2
 800230c:	2228      	movs	r2, #40	; 0x28
 800230e:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	617a      	str	r2, [r7, #20]
 8002316:	461a      	mov	r2, r3
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	4413      	add	r3, r2
 800231c:	2200      	movs	r2, #0
 800231e:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = RESPONSE_TRANSMISION;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	617a      	str	r2, [r7, #20]
 8002326:	461a      	mov	r2, r3
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	4413      	add	r3, r2
 800232c:	2202      	movs	r2, #2
 800232e:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = rpd;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	617a      	str	r2, [r7, #20]
 8002336:	461a      	mov	r2, r3
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	4413      	add	r3, r2
 800233c:	7bfa      	ldrb	r2, [r7, #15]
 800233e:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = id_command;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	617a      	str	r2, [r7, #20]
 8002346:	461a      	mov	r2, r3
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	4413      	add	r3, r2
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	701a      	strb	r2, [r3, #0]
	if(detail_length != 0){
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00c      	beq.n	8002372 <commandRespond1+0x86>
		memcpy(&respond[out_length], detail, detail_length);
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	6a3a      	ldr	r2, [r7, #32]
 800235c:	4413      	add	r3, r2
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4618      	mov	r0, r3
 8002364:	f013 fcfa 	bl	8015d5c <memcpy>
		out_length += detail_length;
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	4413      	add	r3, r2
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	e007      	b.n	8002382 <commandRespond1+0x96>
	}else{
		respond[out_length++] = NONE;
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	1c5a      	adds	r2, r3, #1
 8002376:	617a      	str	r2, [r7, #20]
 8002378:	461a      	mov	r2, r3
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	4413      	add	r3, r2
 800237e:	2225      	movs	r2, #37	; 0x25
 8002380:	701a      	strb	r2, [r3, #0]
	}
	respond[out_length++] = 0x7d;
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	1c5a      	adds	r2, r3, #1
 8002386:	617a      	str	r2, [r7, #20]
 8002388:	461a      	mov	r2, r3
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	4413      	add	r3, r2
 800238e:	227d      	movs	r2, #125	; 0x7d
 8002390:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0x29;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	617a      	str	r2, [r7, #20]
 8002398:	461a      	mov	r2, r3
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	4413      	add	r3, r2
 800239e:	2229      	movs	r2, #41	; 0x29
 80023a0:	701a      	strb	r2, [r3, #0]
	respond[1] = out_length - 2;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	3301      	adds	r3, #1
 80023aa:	3a02      	subs	r2, #2
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	701a      	strb	r2, [r3, #0]
	return out_length;
 80023b0:	697b      	ldr	r3, [r7, #20]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 80023bc:	b580      	push	{r7, lr}
 80023be:	b096      	sub	sp, #88	; 0x58
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "%d, %s \r\n", line, message);
 80023c8:	887a      	ldrh	r2, [r7, #2]
 80023ca:	f107 0008 	add.w	r0, r7, #8
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	4613      	mov	r3, r2
 80023d4:	4a17      	ldr	r2, [pc, #92]	; (8002434 <LOG_REPORT+0x78>)
 80023d6:	213f      	movs	r1, #63	; 0x3f
 80023d8:	f014 fbe8 	bl	8016bac <sniprintf>
 80023dc:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 80023de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e4:	d101      	bne.n	80023ea <LOG_REPORT+0x2e>
		return FALSE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	e01f      	b.n	800242a <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 80023ea:	f107 0308 	add.w	r3, r7, #8
 80023ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023f0:	4619      	mov	r1, r3
 80023f2:	4811      	ldr	r0, [pc, #68]	; (8002438 <LOG_REPORT+0x7c>)
 80023f4:	f003 fa2c 	bl	8005850 <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 80023f8:	4810      	ldr	r0, [pc, #64]	; (800243c <LOG_REPORT+0x80>)
 80023fa:	f009 fc95 	bl	800bd28 <HAL_DMA_GetState>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b02      	cmp	r3, #2
 8002402:	d101      	bne.n	8002408 <LOG_REPORT+0x4c>
		return TRUE;
 8002404:	2301      	movs	r3, #1
 8002406:	e010      	b.n	800242a <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 8002408:	f44f 7280 	mov.w	r2, #256	; 0x100
 800240c:	490c      	ldr	r1, [pc, #48]	; (8002440 <LOG_REPORT+0x84>)
 800240e:	480a      	ldr	r0, [pc, #40]	; (8002438 <LOG_REPORT+0x7c>)
 8002410:	f003 fa46 	bl	80058a0 <ringBuff_PopArray>
 8002414:	4603      	mov	r3, r0
 8002416:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800241a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800241e:	461a      	mov	r2, r3
 8002420:	4907      	ldr	r1, [pc, #28]	; (8002440 <LOG_REPORT+0x84>)
 8002422:	4808      	ldr	r0, [pc, #32]	; (8002444 <LOG_REPORT+0x88>)
 8002424:	f00c fa00 	bl	800e828 <HAL_UART_Transmit_DMA>
	return TRUE;
 8002428:	2301      	movs	r3, #1
}
 800242a:	4618      	mov	r0, r3
 800242c:	3750      	adds	r7, #80	; 0x50
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	0801b240 	.word	0x0801b240
 8002438:	20001070 	.word	0x20001070
 800243c:	2000edf0 	.word	0x2000edf0
 8002440:	2000dd20 	.word	0x2000dd20
 8002444:	2000edb0 	.word	0x2000edb0

08002448 <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_length, uint8_t*data_packet) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]

	int32_t data_length = in_length - 2;
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	3b02      	subs	r3, #2
 8002458:	617b      	str	r3, [r7, #20]
	//check packet length
	if(message_buff[1] == data_length && backup_available == 0){
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	3301      	adds	r3, #1
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	461a      	mov	r2, r3
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	4293      	cmp	r3, r2
 8002466:	d119      	bne.n	800249c <unPackPayload+0x54>
 8002468:	4b2e      	ldr	r3, [pc, #184]	; (8002524 <unPackPayload+0xdc>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d115      	bne.n	800249c <unPackPayload+0x54>
		// check minimum lenght
		if (in_length < MIN_MESSAGE_LENGHT) {
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b03      	cmp	r3, #3
 8002474:	dc02      	bgt.n	800247c <unPackPayload+0x34>
			return -1;
 8002476:	f04f 33ff 	mov.w	r3, #4294967295
 800247a:	e04f      	b.n	800251c <unPackPayload+0xd4>
		}

		// check start char
		if(message_buff[0] != START_CHAR){
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b28      	cmp	r3, #40	; 0x28
 8002482:	d002      	beq.n	800248a <unPackPayload+0x42>
			return -1;
 8002484:	f04f 33ff 	mov.w	r3, #4294967295
 8002488:	e048      	b.n	800251c <unPackPayload+0xd4>
		}
		memcpy(data_packet, &message_buff[2], data_length - RECEIVE_END_LENGTH);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1c99      	adds	r1, r3, #2
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	3b02      	subs	r3, #2
 8002492:	461a      	mov	r2, r3
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f013 fc61 	bl	8015d5c <memcpy>
 800249a:	e03d      	b.n	8002518 <unPackPayload+0xd0>
	}else if(message_buff[1] != data_length && backup_available == 0){
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	3301      	adds	r3, #1
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d01b      	beq.n	80024e2 <unPackPayload+0x9a>
 80024aa:	4b1e      	ldr	r3, [pc, #120]	; (8002524 <unPackPayload+0xdc>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d117      	bne.n	80024e2 <unPackPayload+0x9a>
		backup_available = 1;
 80024b2:	4b1c      	ldr	r3, [pc, #112]	; (8002524 <unPackPayload+0xdc>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	701a      	strb	r2, [r3, #0]
		// check start char
		if(message_buff[0] != START_CHAR){
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b28      	cmp	r3, #40	; 0x28
 80024be:	d002      	beq.n	80024c6 <unPackPayload+0x7e>
			return -1;
 80024c0:	f04f 33ff 	mov.w	r3, #4294967295
 80024c4:	e02a      	b.n	800251c <unPackPayload+0xd4>
		}
		memcpy(data_packet, &message_buff[2], data_length);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	3302      	adds	r3, #2
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4619      	mov	r1, r3
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f013 fc44 	bl	8015d5c <memcpy>
		backup_length = data_length;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	4b13      	ldr	r3, [pc, #76]	; (8002528 <unPackPayload+0xe0>)
 80024da:	701a      	strb	r2, [r3, #0]
		return - 1;
 80024dc:	f04f 33ff 	mov.w	r3, #4294967295
 80024e0:	e01c      	b.n	800251c <unPackPayload+0xd4>
	}else if(backup_available == 1){
 80024e2:	4b10      	ldr	r3, [pc, #64]	; (8002524 <unPackPayload+0xdc>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d113      	bne.n	8002512 <unPackPayload+0xca>
		backup_available = 0;
 80024ea:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <unPackPayload+0xdc>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]
		memcpy(&data_packet[backup_length], message_buff, in_length);
 80024f0:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <unPackPayload+0xe0>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	68f9      	ldr	r1, [r7, #12]
 80024fe:	4618      	mov	r0, r3
 8002500:	f013 fc2c 	bl	8015d5c <memcpy>
		data_length = backup_length + in_length;
 8002504:	4b08      	ldr	r3, [pc, #32]	; (8002528 <unPackPayload+0xe0>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	461a      	mov	r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	4413      	add	r3, r2
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	e002      	b.n	8002518 <unPackPayload+0xd0>
	}else{
		return - 1;
 8002512:	f04f 33ff 	mov.w	r3, #4294967295
 8002516:	e001      	b.n	800251c <unPackPayload+0xd4>
	}


	return data_length - RECEIVE_END_LENGTH;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	3b02      	subs	r3, #2
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	2000de20 	.word	0x2000de20
 8002528:	2000de21 	.word	0x2000de21

0800252c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	607b      	str	r3, [r7, #4]
 8002536:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <MX_DMA_Init+0x3c>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4a0b      	ldr	r2, [pc, #44]	; (8002568 <MX_DMA_Init+0x3c>)
 800253c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002540:	6313      	str	r3, [r2, #48]	; 0x30
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <MX_DMA_Init+0x3c>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800254e:	2200      	movs	r2, #0
 8002550:	2105      	movs	r1, #5
 8002552:	200f      	movs	r0, #15
 8002554:	f009 f90c 	bl	800b770 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002558:	200f      	movs	r0, #15
 800255a:	f009 f925 	bl	800b7a8 <HAL_NVIC_EnableIRQ>

}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800

0800256c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4a07      	ldr	r2, [pc, #28]	; (8002598 <vApplicationGetIdleTaskMemory+0x2c>)
 800257c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	4a06      	ldr	r2, [pc, #24]	; (800259c <vApplicationGetIdleTaskMemory+0x30>)
 8002582:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f44f 7280 	mov.w	r2, #256	; 0x100
 800258a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	20002400 	.word	0x20002400
 800259c:	20002454 	.word	0x20002454

080025a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80025a0:	b5b0      	push	{r4, r5, r7, lr}
 80025a2:	b094      	sub	sp, #80	; 0x50
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 80025a6:	2300      	movs	r3, #0
 80025a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80025aa:	2300      	movs	r3, #0
 80025ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 80025ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025b2:	4618      	mov	r0, r3
 80025b4:	f010 f914 	bl	80127e0 <osMutexCreate>
 80025b8:	4602      	mov	r2, r0
 80025ba:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <MX_FREERTOS_Init+0x90>)
 80025bc:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 80025be:	2301      	movs	r3, #1
 80025c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80025c2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80025c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025cc:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 80025ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025d2:	2100      	movs	r1, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f010 fa1b 	bl	8012a10 <osMailCreate>
 80025da:	4602      	mov	r2, r0
 80025dc:	4b15      	ldr	r3, [pc, #84]	; (8002634 <MX_FREERTOS_Init+0x94>)
 80025de:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2060);
 80025e0:	4b15      	ldr	r3, [pc, #84]	; (8002638 <MX_FREERTOS_Init+0x98>)
 80025e2:	f107 041c 	add.w	r4, r7, #28
 80025e6:	461d      	mov	r5, r3
 80025e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80025f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80025f4:	f107 031c 	add.w	r3, r7, #28
 80025f8:	2100      	movs	r1, #0
 80025fa:	4618      	mov	r0, r3
 80025fc:	f010 f804 	bl	8012608 <osThreadCreate>
 8002600:	4602      	mov	r2, r0
 8002602:	4b0e      	ldr	r3, [pc, #56]	; (800263c <MX_FREERTOS_Init+0x9c>)
 8002604:	601a      	str	r2, [r3, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 8002606:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <MX_FREERTOS_Init+0xa0>)
 8002608:	463c      	mov	r4, r7
 800260a:	461d      	mov	r5, r3
 800260c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800260e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002610:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002614:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 8002618:	463b      	mov	r3, r7
 800261a:	2100      	movs	r1, #0
 800261c:	4618      	mov	r0, r3
 800261e:	f00f fff3 	bl	8012608 <osThreadCreate>
 8002622:	4602      	mov	r2, r0
 8002624:	4b07      	ldr	r3, [pc, #28]	; (8002644 <MX_FREERTOS_Init+0xa4>)
 8002626:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002628:	bf00      	nop
 800262a:	3750      	adds	r7, #80	; 0x50
 800262c:	46bd      	mov	sp, r7
 800262e:	bdb0      	pop	{r4, r5, r7, pc}
 8002630:	2000de28 	.word	0x2000de28
 8002634:	2000de2c 	.word	0x2000de2c
 8002638:	0801b26c 	.word	0x0801b26c
 800263c:	2000de24 	.word	0x2000de24
 8002640:	0801b298 	.word	0x0801b298
 8002644:	2000de30 	.word	0x2000de30

08002648 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800264a:	f5ad 5d8f 	sub.w	sp, sp, #4576	; 0x11e0
 800264e:	b081      	sub	sp, #4
 8002650:	af6c      	add	r7, sp, #432	; 0x1b0
 8002652:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002656:	3b14      	subs	r3, #20
 8002658:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800265a:	f012 fdf7 	bl	801524c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 800265e:	2201      	movs	r2, #1
 8002660:	2110      	movs	r1, #16
 8002662:	48c7      	ldr	r0, [pc, #796]	; (8002980 <StartDefaultTask+0x338>)
 8002664:	f009 fde6 	bl	800c234 <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 8002668:	2300      	movs	r3, #0
 800266a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800266e:	f102 020f 	add.w	r2, r2, #15
 8002672:	7013      	strb	r3, [r2, #0]
  int32_t					current_key_speed;
  double						run_time;

  SCARA_Pick_And_Place_Package Object[8];
  SCARA_Pick_And_Place_State  operation_state;
  uint8_t object_tail_pointer = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800267a:	f102 020e 	add.w	r2, r2, #14
 800267e:	7013      	strb	r3, [r2, #0]
  uint8_t object_head_pointer = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002686:	f102 020d 	add.w	r2, r2, #13
 800268a:	7013      	strb	r3, [r2, #0]
  double state_time = 0;
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	f04f 0400 	mov.w	r4, #0
 8002694:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002698:	e9c2 3400 	strd	r3, r4, [r2]
  int run_point = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	f8c7 3ffc 	str.w	r3, [r7, #4092]	; 0xffc
  const SCARA_Slot_TypeDef SLot_Cordinate[NUM_OF_OBJECT] = {
 80026a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026a6:	3b10      	subs	r3, #16
 80026a8:	4ab6      	ldr	r2, [pc, #728]	; (8002984 <StartDefaultTask+0x33c>)
 80026aa:	4618      	mov	r0, r3
 80026ac:	4611      	mov	r1, r2
 80026ae:	2390      	movs	r3, #144	; 0x90
 80026b0:	461a      	mov	r2, r3
 80026b2:	f013 fb53 	bl	8015d5c <memcpy>
  		{203.859f, -101.616f, 0.0f} ,
		{203.859f, -101.616f, 0.0f} ,
		{203.859f, -101.616f, 0.0f}
  };

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 80026b6:	21e6      	movs	r1, #230	; 0xe6
 80026b8:	48b3      	ldr	r0, [pc, #716]	; (8002988 <StartDefaultTask+0x340>)
 80026ba:	f7ff fe7f 	bl	80023bc <LOG_REPORT>

  // Init value
  current_method = scaraGetMethod();
 80026be:	f008 f825 	bl	800a70c <scaraGetMethod>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80026c8:	f102 0207 	add.w	r2, r2, #7
 80026cc:	7013      	strb	r3, [r2, #0]
  current_mode	 = scaraGetMode();
 80026ce:	f008 f811 	bl	800a6f4 <scaraGetMode>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80026d8:	f102 0206 	add.w	r2, r2, #6
 80026dc:	7013      	strb	r3, [r2, #0]
  current_duty_state	 = scaraGetDutyState();
 80026de:	f008 f821 	bl	800a724 <scaraGetDutyState>
 80026e2:	4603      	mov	r3, r0
 80026e4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80026e8:	f102 0205 	add.w	r2, r2, #5
 80026ec:	7013      	strb	r3, [r2, #0]

  // Start up robot
  scaraStartup();
 80026ee:	f004 f8ab 	bl	8006848 <scaraStartup>
  osDelay(10);
 80026f2:	200a      	movs	r0, #10
 80026f4:	f00f ffd4 	bl	80126a0 <osDelay>
//   positionNext.Theta2 = PI/3;
//   positionNext.D3 = 10;
//   positionNext.Theta4 = 0;
//   positionNext.t = 0;

  positionNext.Theta1 = -1.48267f;
 80026f8:	4aa4      	ldr	r2, [pc, #656]	; (800298c <StartDefaultTask+0x344>)
 80026fa:	a499      	add	r4, pc, #612	; (adr r4, 8002960 <StartDefaultTask+0x318>)
 80026fc:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002700:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
  positionNext.Theta2 = 2.35575f;
 8002704:	4aa1      	ldr	r2, [pc, #644]	; (800298c <StartDefaultTask+0x344>)
 8002706:	a498      	add	r4, pc, #608	; (adr r4, 8002968 <StartDefaultTask+0x320>)
 8002708:	e9d4 3400 	ldrd	r3, r4, [r4]
 800270c:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
  positionNext.D3 = 0.034999;
 8002710:	4a9e      	ldr	r2, [pc, #632]	; (800298c <StartDefaultTask+0x344>)
 8002712:	a497      	add	r4, pc, #604	; (adr r4, 8002970 <StartDefaultTask+0x328>)
 8002714:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002718:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
  positionNext.Theta4 = 2.96586;
 800271c:	4a9b      	ldr	r2, [pc, #620]	; (800298c <StartDefaultTask+0x344>)
 800271e:	a496      	add	r4, pc, #600	; (adr r4, 8002978 <StartDefaultTask+0x330>)
 8002720:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002724:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
  positionNext.t = 0;
 8002728:	4a98      	ldr	r2, [pc, #608]	; (800298c <StartDefaultTask+0x344>)
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	f04f 0400 	mov.w	r4, #0
 8002732:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

  kinematicForward(&positionNext);
 8002736:	4895      	ldr	r0, [pc, #596]	; (800298c <StartDefaultTask+0x344>)
 8002738:	f002 fc2a 	bl	8004f90 <kinematicForward>
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 800273c:	4894      	ldr	r0, [pc, #592]	; (8002990 <StartDefaultTask+0x348>)
 800273e:	f00b fc50 	bl	800dfe2 <HAL_TIM_Base_Start_IT>

  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 8002742:	f107 0310 	add.w	r3, r7, #16
 8002746:	3b08      	subs	r3, #8
 8002748:	f04f 32ff 	mov.w	r2, #4294967295
 800274c:	2101      	movs	r1, #1
 800274e:	4618      	mov	r0, r3
 8002750:	f00f fffa 	bl	8012748 <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 8002754:	2300      	movs	r3, #0
 8002756:	f8c7 3ff4 	str.w	r3, [r7, #4084]	; 0xff4
	  respond_packed_lenght = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	f8c7 3ff0 	str.w	r3, [r7, #4080]	; 0xff0
	  infor_lenght			= 0;
 8002760:	2300      	movs	r3, #0
 8002762:	f8c7 3fec 	str.w	r3, [r7, #4076]	; 0xfec
	  infor_packed_lenght	= 0;
 8002766:	2300      	movs	r3, #0
 8002768:	f8c7 3fe8 	str.w	r3, [r7, #4072]	; 0xfe8
	  task_usb_lenght		= 0;
 800276c:	2300      	movs	r3, #0
 800276e:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
	  usb_lenght			= 0;
 8002772:	2300      	movs	r3, #0
 8002774:	f8c7 3fe0 	str.w	r3, [r7, #4064]	; 0xfe0
	  total_respond_length  = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800277e:	f102 0208 	add.w	r2, r2, #8
 8002782:	6013      	str	r3, [r2, #0]
	  detail_ptr 			= 0;
 8002784:	2300      	movs	r3, #0
 8002786:	f8c7 3fdc 	str.w	r3, [r7, #4060]	; 0xfdc
	  // Update new position
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800278a:	4a82      	ldr	r2, [pc, #520]	; (8002994 <StartDefaultTask+0x34c>)
 800278c:	4b82      	ldr	r3, [pc, #520]	; (8002998 <StartDefaultTask+0x350>)
 800278e:	4610      	mov	r0, r2
 8002790:	4619      	mov	r1, r3
 8002792:	23c0      	movs	r3, #192	; 0xc0
 8002794:	461a      	mov	r2, r3
 8002796:	f013 fae1 	bl	8015d5c <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 800279a:	4a7f      	ldr	r2, [pc, #508]	; (8002998 <StartDefaultTask+0x350>)
 800279c:	4b7b      	ldr	r3, [pc, #492]	; (800298c <StartDefaultTask+0x344>)
 800279e:	4610      	mov	r0, r2
 80027a0:	4619      	mov	r1, r3
 80027a2:	23c0      	movs	r3, #192	; 0xc0
 80027a4:	461a      	mov	r2, r3
 80027a6:	f013 fad9 	bl	8015d5c <memcpy>

	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 80027aa:	4b7c      	ldr	r3, [pc, #496]	; (800299c <StartDefaultTask+0x354>)
 80027ac:	6819      	ldr	r1, [r3, #0]
 80027ae:	f607 73bc 	addw	r3, r7, #4028	; 0xfbc
 80027b2:	2200      	movs	r2, #0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f010 f9d7 	bl	8012b68 <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 80027ba:	f8d7 3fbc 	ldr.w	r3, [r7, #4028]	; 0xfbc
 80027be:	2b20      	cmp	r3, #32
 80027c0:	d119      	bne.n	80027f6 <StartDefaultTask+0x1ae>
		   dataMail = ret_mail.value.p;
 80027c2:	f8d7 3fc0 	ldr.w	r3, [r7, #4032]	; 0xfc0
 80027c6:	f8c7 3fd8 	str.w	r3, [r7, #4056]	; 0xfd8
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 80027ca:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80027ce:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80027d2:	f8d7 1fd8 	ldr.w	r1, [r7, #4056]	; 0xfd8
 80027d6:	4618      	mov	r0, r3
 80027d8:	f013 fac0 	bl	8015d5c <memcpy>
		   isNewDuty = TRUE;
 80027dc:	2301      	movs	r3, #1
 80027de:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80027e2:	f102 020f 	add.w	r2, r2, #15
 80027e6:	7013      	strb	r3, [r2, #0]
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 80027e8:	4b6c      	ldr	r3, [pc, #432]	; (800299c <StartDefaultTask+0x354>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f8d7 1fd8 	ldr.w	r1, [r7, #4056]	; 0xfd8
 80027f0:	4618      	mov	r0, r3
 80027f2:	f010 fa2d 	bl	8012c50 <osMailFree>
	  }
	  if(isNewDuty) {
 80027f6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80027fa:	f103 030f 	add.w	r3, r3, #15
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 8476 	beq.w	80030f2 <StartDefaultTask+0xaaa>
		  if (duty_cmd.change_method == TRUE) {
 8002806:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b01      	cmp	r3, #1
 800280e:	f040 8140 	bne.w	8002a92 <StartDefaultTask+0x44a>
			  //vPortFree(Gcode_Cor);
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 8002812:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002816:	785b      	ldrb	r3, [r3, #1]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d132      	bne.n	8002882 <StartDefaultTask+0x23a>
				  // Need add check condition idle in each method
				  current_method = SCARA_METHOD_MANUAL;
 800281c:	2300      	movs	r3, #0
 800281e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002822:	f102 0207 	add.w	r2, r2, #7
 8002826:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002828:	2300      	movs	r3, #0
 800282a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800282e:	f102 0205 	add.w	r2, r2, #5
 8002832:	7013      	strb	r3, [r2, #0]
				detail_array[0] = MANUAL_METHOD;
 8002834:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002838:	2218      	movs	r2, #24
 800283a:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800283c:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002840:	6899      	ldr	r1, [r3, #8]
 8002842:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002846:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800284a:	f103 0308 	add.w	r3, r3, #8
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4413      	add	r3, r2
 8002852:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	2301      	movs	r3, #1
 800285a:	2008      	movs	r0, #8
 800285c:	f7ff fd46 	bl	80022ec <commandRespond1>
 8002860:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
				total_respond_length += respond_lenght;
 8002864:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002868:	f103 0308 	add.w	r3, r3, #8
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002872:	4413      	add	r3, r2
 8002874:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002878:	f102 0208 	add.w	r2, r2, #8
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	f000 bc32 	b.w	80030e6 <StartDefaultTask+0xa9e>
			  } else if (SCARA_METHOD_SEMI_AUTO == duty_cmd.robot_method) {
 8002882:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002886:	785b      	ldrb	r3, [r3, #1]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d131      	bne.n	80028f0 <StartDefaultTask+0x2a8>
				  current_method = SCARA_METHOD_SEMI_AUTO;
 800288c:	2301      	movs	r3, #1
 800288e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002892:	f102 0207 	add.w	r2, r2, #7
 8002896:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002898:	2300      	movs	r3, #0
 800289a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800289e:	f102 0205 	add.w	r2, r2, #5
 80028a2:	7013      	strb	r3, [r2, #0]
				detail_array[0] = SEMI_AUTO_METHOD;
 80028a4:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 80028a8:	2219      	movs	r2, #25
 80028aa:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80028ac:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80028b0:	6899      	ldr	r1, [r3, #8]
 80028b2:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 80028b6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80028ba:	f103 0308 	add.w	r3, r3, #8
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4413      	add	r3, r2
 80028c2:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	2301      	movs	r3, #1
 80028ca:	2008      	movs	r0, #8
 80028cc:	f7ff fd0e 	bl	80022ec <commandRespond1>
 80028d0:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
				total_respond_length += respond_lenght;
 80028d4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80028d8:	f103 0308 	add.w	r3, r3, #8
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80028e2:	4413      	add	r3, r2
 80028e4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80028e8:	f102 0208 	add.w	r2, r2, #8
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	e3fa      	b.n	80030e6 <StartDefaultTask+0xa9e>
			  } else if (SCARA_METHOD_GCODE == duty_cmd.robot_method) {
 80028f0:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80028f4:	785b      	ldrb	r3, [r3, #1]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d152      	bne.n	80029a0 <StartDefaultTask+0x358>
//				  Gcode_Cor = pvPortMalloc(total_num_of_point*sizeof(SCARA_Gcode_Cor_TypeDef));
//					if(Gcode_Cor == NULL){
//					  int t =2;
//					}
				  current_duty_state = SCARA_DUTY_STATE_READY;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002900:	f102 0205 	add.w	r2, r2, #5
 8002904:	7013      	strb	r3, [r2, #0]
				  current_method = SCARA_METHOD_GCODE;
 8002906:	2302      	movs	r3, #2
 8002908:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800290c:	f102 0207 	add.w	r2, r2, #7
 8002910:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = GCODE_METHOD;
 8002912:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002916:	221a      	movs	r2, #26
 8002918:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800291a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800291e:	6899      	ldr	r1, [r3, #8]
 8002920:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002924:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002928:	f103 0308 	add.w	r3, r3, #8
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4413      	add	r3, r2
 8002930:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	2301      	movs	r3, #1
 8002938:	2008      	movs	r0, #8
 800293a:	f7ff fcd7 	bl	80022ec <commandRespond1>
 800293e:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
				total_respond_length += respond_lenght;
 8002942:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002946:	f103 0308 	add.w	r3, r3, #8
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002950:	4413      	add	r3, r2
 8002952:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002956:	f102 0208 	add.w	r2, r2, #8
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	e3c3      	b.n	80030e6 <StartDefaultTask+0xa9e>
 800295e:	bf00      	nop
 8002960:	20000000 	.word	0x20000000
 8002964:	bff7b904 	.word	0xbff7b904
 8002968:	80000000 	.word	0x80000000
 800296c:	4002d893 	.word	0x4002d893
 8002970:	90c91080 	.word	0x90c91080
 8002974:	3fa1eb63 	.word	0x3fa1eb63
 8002978:	cec41dd2 	.word	0xcec41dd2
 800297c:	4007ba14 	.word	0x4007ba14
 8002980:	40020400 	.word	0x40020400
 8002984:	0801b398 	.word	0x0801b398
 8002988:	0801b2b4 	.word	0x0801b2b4
 800298c:	2000ec30 	.word	0x2000ec30
 8002990:	2000ed70 	.word	0x2000ed70
 8002994:	2000e930 	.word	0x2000e930
 8002998:	2000eab0 	.word	0x2000eab0
 800299c:	2000de2c 	.word	0x2000de2c
			  }else if(SCARA_METHOD_TEST == duty_cmd.robot_method){
 80029a0:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80029a4:	785b      	ldrb	r3, [r3, #1]
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	d13b      	bne.n	8002a22 <StartDefaultTask+0x3da>
				  test_value[0] = 0;
 80029aa:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
				  test_value[1] = 0;
 80029b2:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 80029b6:	2200      	movs	r2, #0
 80029b8:	705a      	strb	r2, [r3, #1]
				  test_value[2] = 0;
 80029ba:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 80029be:	2200      	movs	r2, #0
 80029c0:	709a      	strb	r2, [r3, #2]
				  test_value[3] = 0;
 80029c2:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 80029c6:	2200      	movs	r2, #0
 80029c8:	70da      	strb	r2, [r3, #3]
				  current_method = SCARA_METHOD_TEST;
 80029ca:	2303      	movs	r3, #3
 80029cc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80029d0:	f102 0207 	add.w	r2, r2, #7
 80029d4:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = TEST_METHOD;
 80029d6:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 80029da:	221b      	movs	r2, #27
 80029dc:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80029de:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80029e2:	6899      	ldr	r1, [r3, #8]
 80029e4:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 80029e8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80029ec:	f103 0308 	add.w	r3, r3, #8
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4413      	add	r3, r2
 80029f4:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	2301      	movs	r3, #1
 80029fc:	2008      	movs	r0, #8
 80029fe:	f7ff fc75 	bl	80022ec <commandRespond1>
 8002a02:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
				  total_respond_length += respond_lenght;
 8002a06:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002a0a:	f103 0308 	add.w	r3, r3, #8
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002a14:	4413      	add	r3, r2
 8002a16:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a1a:	f102 0208 	add.w	r2, r2, #8
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	e361      	b.n	80030e6 <StartDefaultTask+0xa9e>
			  }else if(SCARA_METHOD_PICK_AND_PLACE == duty_cmd.robot_method){
 8002a22:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002a26:	785b      	ldrb	r3, [r3, #1]
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	f040 835c 	bne.w	80030e6 <StartDefaultTask+0xa9e>
				  current_method = SCARA_METHOD_PICK_AND_PLACE;
 8002a2e:	2304      	movs	r3, #4
 8002a30:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a34:	f102 0207 	add.w	r2, r2, #7
 8002a38:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a40:	f102 0205 	add.w	r2, r2, #5
 8002a44:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = PICK_AND_PLACE_METHOD;
 8002a46:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002a4a:	221c      	movs	r2, #28
 8002a4c:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002a4e:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002a52:	6899      	ldr	r1, [r3, #8]
 8002a54:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002a58:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002a5c:	f103 0308 	add.w	r3, r3, #8
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4413      	add	r3, r2
 8002a64:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	2008      	movs	r0, #8
 8002a6e:	f7ff fc3d 	bl	80022ec <commandRespond1>
 8002a72:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
				  total_respond_length += respond_lenght;
 8002a76:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002a7a:	f103 0308 	add.w	r3, r3, #8
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002a84:	4413      	add	r3, r2
 8002a86:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a8a:	f102 0208 	add.w	r2, r2, #8
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	e329      	b.n	80030e6 <StartDefaultTask+0xa9e>
			  }
		  } else {
			  	  // Check current method & cmd method
			  	  if (current_method == duty_cmd.robot_method) {
 8002a92:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002a96:	785b      	ldrb	r3, [r3, #1]
 8002a98:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a9c:	f102 0207 	add.w	r2, r2, #7
 8002aa0:	7812      	ldrb	r2, [r2, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	f040 82f6 	bne.w	8003094 <StartDefaultTask+0xa4c>
				  	  switch( duty_cmd.robot_method) {
 8002aa8:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002aac:	785b      	ldrb	r3, [r3, #1]
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	f200 82ea 	bhi.w	8003088 <StartDefaultTask+0xa40>
 8002ab4:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <StartDefaultTask+0x474>)
 8002ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aba:	bf00      	nop
 8002abc:	08002ad1 	.word	0x08002ad1
 8002ac0:	08002b57 	.word	0x08002b57
 8002ac4:	08002f15 	.word	0x08002f15
 8002ac8:	08002da5 	.word	0x08002da5
 8002acc:	08002fbf 	.word	0x08002fbf
				  	  case SCARA_METHOD_MANUAL:
				  	  {
				  		  if (current_key_state == SCARA_KEY_STATE_READY) {
 8002ad0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002ad4:	f103 0303 	add.w	r3, r3, #3
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d116      	bne.n	8002b0c <StartDefaultTask+0x4c4>
				  			  current_key = duty_cmd.keyboard;
 8002ade:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002ae2:	78db      	ldrb	r3, [r3, #3]
 8002ae4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002ae8:	f102 0202 	add.w	r2, r2, #2
 8002aec:	7013      	strb	r3, [r2, #0]
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Init new path
 8002aee:	2301      	movs	r3, #1
 8002af0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002af4:	f102 0203 	add.w	r2, r2, #3
 8002af8:	7013      	strb	r3, [r2, #0]
				  			  current_key_speed = duty_cmd.key_speed;
 8002afa:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002b04:	f102 021c 	add.w	r2, r2, #28
 8002b08:	6013      	str	r3, [r2, #0]
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
									  && current_key_speed == duty_cmd.key_speed) {
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
				  		  }
				  	  }
				  	  break;
 8002b0a:	e2e9      	b.n	80030e0 <StartDefaultTask+0xa98>
				  		  } else if (current_key == duty_cmd.keyboard
 8002b0c:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002b10:	78db      	ldrb	r3, [r3, #3]
 8002b12:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002b16:	f102 0202 	add.w	r2, r2, #2
 8002b1a:	7812      	ldrb	r2, [r2, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	f040 82df 	bne.w	80030e0 <StartDefaultTask+0xa98>
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
 8002b22:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002b26:	f103 0303 	add.w	r3, r3, #3
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	f040 82d7 	bne.w	80030e0 <StartDefaultTask+0xa98>
									  && current_key_speed == duty_cmd.key_speed) {
 8002b32:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002b3c:	f102 021c 	add.w	r2, r2, #28
 8002b40:	6812      	ldr	r2, [r2, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	f040 82cc 	bne.w	80030e0 <StartDefaultTask+0xa98>
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
 8002b48:	2301      	movs	r3, #1
 8002b4a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002b4e:	f102 0203 	add.w	r2, r2, #3
 8002b52:	7013      	strb	r3, [r2, #0]
				  	  break;
 8002b54:	e2c4      	b.n	80030e0 <StartDefaultTask+0xa98>
				  	  case SCARA_METHOD_SEMI_AUTO:
				  	  {
						  switch( duty_cmd.robot_mode) {
 8002b56:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002b5a:	789b      	ldrb	r3, [r3, #2]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d036      	beq.n	8002bce <StartDefaultTask+0x586>
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	f000 809f 	beq.w	8002ca4 <StartDefaultTask+0x65c>
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f040 8115 	bne.w	8002d96 <StartDefaultTask+0x74e>
						  case SCARA_MODE_STOP:
							  {
								  current_mode	 = SCARA_MODE_STOP;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002b72:	f102 0206 	add.w	r2, r2, #6
 8002b76:	7013      	strb	r3, [r2, #0]
								detail_array[0] = STOP_NOW;
 8002b78:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002b80:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002b84:	6899      	ldr	r1, [r3, #8]
 8002b86:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002b8a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002b8e:	f103 0308 	add.w	r3, r3, #8
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4413      	add	r3, r2
 8002b96:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	2008      	movs	r0, #8
 8002ba0:	f7ff fba4 	bl	80022ec <commandRespond1>
 8002ba4:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
								total_respond_length += respond_lenght;
 8002ba8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002bac:	f103 0308 	add.w	r3, r3, #8
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002bbc:	f102 0208 	add.w	r2, r2, #8
 8002bc0:	6013      	str	r3, [r2, #0]
								  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 8002bc2:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8002bc6:	48cd      	ldr	r0, [pc, #820]	; (8002efc <StartDefaultTask+0x8b4>)
 8002bc8:	f7ff fbf8 	bl	80023bc <LOG_REPORT>
							  }
							  break;
 8002bcc:	e0e9      	b.n	8002da2 <StartDefaultTask+0x75a>

						  case SCARA_MODE_SCAN:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002bce:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002bd2:	f103 0306 	add.w	r3, r3, #6
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d138      	bne.n	8002c4e <StartDefaultTask+0x606>
 8002bdc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002be0:	f103 0305 	add.w	r3, r3, #5
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d131      	bne.n	8002c4e <StartDefaultTask+0x606>
									  current_mode = SCARA_MODE_SCAN;
 8002bea:	2301      	movs	r3, #1
 8002bec:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002bf0:	f102 0206 	add.w	r2, r2, #6
 8002bf4:	7013      	strb	r3, [r2, #0]
									  current_scan_state = SCARA_SCAN_STATE_INIT;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002bfc:	f102 0204 	add.w	r2, r2, #4
 8002c00:	7013      	strb	r3, [r2, #0]
									detail_array[0] = START_SCAN;
 8002c02:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002c06:	2221      	movs	r2, #33	; 0x21
 8002c08:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002c0a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002c0e:	6899      	ldr	r1, [r3, #8]
 8002c10:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002c14:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002c18:	f103 0308 	add.w	r3, r3, #8
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	2301      	movs	r3, #1
 8002c28:	2008      	movs	r0, #8
 8002c2a:	f7ff fb5f 	bl	80022ec <commandRespond1>
 8002c2e:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
									total_respond_length += respond_lenght;
 8002c32:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002c36:	f103 0308 	add.w	r3, r3, #8
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002c40:	4413      	add	r3, r2
 8002c42:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c46:	f102 0208 	add.w	r2, r2, #8
 8002c4a:	6013      	str	r3, [r2, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
									total_respond_length += respond_lenght;
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
								  }
							  }
							  break;
 8002c4c:	e0a9      	b.n	8002da2 <StartDefaultTask+0x75a>
									detail_array[0] = BUSY;
 8002c4e:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002c52:	2222      	movs	r2, #34	; 0x22
 8002c54:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002c56:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002c5a:	6899      	ldr	r1, [r3, #8]
 8002c5c:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002c60:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002c64:	f103 0308 	add.w	r3, r3, #8
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	2301      	movs	r3, #1
 8002c74:	2007      	movs	r0, #7
 8002c76:	f7ff fb39 	bl	80022ec <commandRespond1>
 8002c7a:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
									total_respond_length += respond_lenght;
 8002c7e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002c82:	f103 0308 	add.w	r3, r3, #8
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c92:	f102 0208 	add.w	r2, r2, #8
 8002c96:	6013      	str	r3, [r2, #0]
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 8002c98:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8002c9c:	4898      	ldr	r0, [pc, #608]	; (8002f00 <StartDefaultTask+0x8b8>)
 8002c9e:	f7ff fb8d 	bl	80023bc <LOG_REPORT>
							  break;
 8002ca2:	e07e      	b.n	8002da2 <StartDefaultTask+0x75a>

						  case SCARA_MODE_DUTY:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002ca4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002ca8:	f103 0306 	add.w	r3, r3, #6
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d145      	bne.n	8002d3e <StartDefaultTask+0x6f6>
 8002cb2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002cb6:	f103 0305 	add.w	r3, r3, #5
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d13e      	bne.n	8002d3e <StartDefaultTask+0x6f6>
									  scaraSetScanFlag();
 8002cc0:	f007 fcaa 	bl	800a618 <scaraSetScanFlag>
//									  if(duty_cmd.modeInit_type == DUTY_MODE_INIT_LINEAR){
//										  current_method = SCARA_METHOD_AUTO;
//									  }
									  if (scaraIsScanLimit()) {
 8002cc4:	f007 fd3a 	bl	800a73c <scaraIsScanLimit>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00c      	beq.n	8002ce8 <StartDefaultTask+0x6a0>
										  current_mode	 = SCARA_MODE_DUTY;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002cd4:	f102 0206 	add.w	r2, r2, #6
 8002cd8:	7013      	strb	r3, [r2, #0]
										  current_duty_state	 = SCARA_DUTY_STATE_INIT;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002ce0:	f102 0205 	add.w	r2, r2, #5
 8002ce4:	7013      	strb	r3, [r2, #0]
									  if (scaraIsScanLimit()) {
 8002ce6:	e055      	b.n	8002d94 <StartDefaultTask+0x74c>
									  } else {
										detail_array[0] = NOT_SCAN;
 8002ce8:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002cec:	2223      	movs	r2, #35	; 0x23
 8002cee:	701a      	strb	r2, [r3, #0]
										respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002cf0:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002cf4:	6899      	ldr	r1, [r3, #8]
 8002cf6:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002cfa:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002cfe:	f103 0308 	add.w	r3, r3, #8
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4413      	add	r3, r2
 8002d06:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	2007      	movs	r0, #7
 8002d10:	f7ff faec 	bl	80022ec <commandRespond1>
 8002d14:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
										total_respond_length += respond_lenght;
 8002d18:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002d1c:	f103 0308 	add.w	r3, r3, #8
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002d26:	4413      	add	r3, r2
 8002d28:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002d2c:	f102 0208 	add.w	r2, r2, #8
 8002d30:	6013      	str	r3, [r2, #0]
										  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 8002d32:	f240 1187 	movw	r1, #391	; 0x187
 8002d36:	4873      	ldr	r0, [pc, #460]	; (8002f04 <StartDefaultTask+0x8bc>)
 8002d38:	f7ff fb40 	bl	80023bc <LOG_REPORT>
									  if (scaraIsScanLimit()) {
 8002d3c:	e02a      	b.n	8002d94 <StartDefaultTask+0x74c>
									  }
								  } else {
									detail_array[0] = BUSY;
 8002d3e:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002d42:	2222      	movs	r2, #34	; 0x22
 8002d44:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002d46:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002d4a:	6899      	ldr	r1, [r3, #8]
 8002d4c:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002d50:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002d54:	f103 0308 	add.w	r3, r3, #8
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	2301      	movs	r3, #1
 8002d64:	2007      	movs	r0, #7
 8002d66:	f7ff fac1 	bl	80022ec <commandRespond1>
 8002d6a:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
									total_respond_length += respond_lenght;
 8002d6e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002d72:	f103 0308 	add.w	r3, r3, #8
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002d82:	f102 0208 	add.w	r2, r2, #8
 8002d86:	6013      	str	r3, [r2, #0]
									  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 8002d88:	f240 118d 	movw	r1, #397	; 0x18d
 8002d8c:	485e      	ldr	r0, [pc, #376]	; (8002f08 <StartDefaultTask+0x8c0>)
 8002d8e:	f7ff fb15 	bl	80023bc <LOG_REPORT>
								  }
							  }
							  break;
 8002d92:	e006      	b.n	8002da2 <StartDefaultTask+0x75a>
 8002d94:	e005      	b.n	8002da2 <StartDefaultTask+0x75a>
						  default:
							  {
								  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 8002d96:	f240 1193 	movw	r1, #403	; 0x193
 8002d9a:	485c      	ldr	r0, [pc, #368]	; (8002f0c <StartDefaultTask+0x8c4>)
 8002d9c:	f7ff fb0e 	bl	80023bc <LOG_REPORT>
							  }
						  }
					  }
					  break;
 8002da0:	e1a1      	b.n	80030e6 <StartDefaultTask+0xa9e>
 8002da2:	e1a0      	b.n	80030e6 <StartDefaultTask+0xa9e>
					  case SCARA_METHOD_TEST:
					  {
						  test_value[0] = 0;
 8002da4:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002da8:	2200      	movs	r2, #0
 8002daa:	701a      	strb	r2, [r3, #0]
						  test_value[1] = 0;
 8002dac:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002db0:	2200      	movs	r2, #0
 8002db2:	705a      	strb	r2, [r3, #1]
						  test_value[2] = 0;
 8002db4:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002db8:	2200      	movs	r2, #0
 8002dba:	709a      	strb	r2, [r3, #2]
						  test_value[3] = 0;
 8002dbc:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	70da      	strb	r2, [r3, #3]
						  switch (duty_cmd.test_key)
 8002dc4:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002dc8:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002dcc:	2b07      	cmp	r3, #7
 8002dce:	f200 8093 	bhi.w	8002ef8 <StartDefaultTask+0x8b0>
 8002dd2:	a201      	add	r2, pc, #4	; (adr r2, 8002dd8 <StartDefaultTask+0x790>)
 8002dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd8:	08002df9 	.word	0x08002df9
 8002ddc:	08002e15 	.word	0x08002e15
 8002de0:	08002e39 	.word	0x08002e39
 8002de4:	08002e55 	.word	0x08002e55
 8002de8:	08002e79 	.word	0x08002e79
 8002dec:	08002e95 	.word	0x08002e95
 8002df0:	08002eb9 	.word	0x08002eb9
 8002df4:	08002ed5 	.word	0x08002ed5
						  {
						  case SCARA_TEST_MOTOR1_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[0];
 8002df8:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002dfc:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002e00:	085b      	lsrs	r3, r3, #1
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	461a      	mov	r2, r3
 8002e06:	4b42      	ldr	r3, [pc, #264]	; (8002f10 <StartDefaultTask+0x8c8>)
 8002e08:	f993 1000 	ldrsb.w	r1, [r3]
 8002e0c:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002e10:	5499      	strb	r1, [r3, r2]
						  break;
 8002e12:	e072      	b.n	8002efa <StartDefaultTask+0x8b2>
						  case SCARA_TEST_MOTOR1_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[0];
 8002e14:	4b3e      	ldr	r3, [pc, #248]	; (8002f10 <StartDefaultTask+0x8c8>)
 8002e16:	f993 3000 	ldrsb.w	r3, [r3]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	425b      	negs	r3, r3
 8002e1e:	b2d9      	uxtb	r1, r3
 8002e20:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002e24:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002e28:	085b      	lsrs	r3, r3, #1
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	b249      	sxtb	r1, r1
 8002e30:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002e34:	5499      	strb	r1, [r3, r2]
						  break;
 8002e36:	e060      	b.n	8002efa <StartDefaultTask+0x8b2>
						  case SCARA_TEST_MOTOR2_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[1];
 8002e38:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002e3c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002e40:	085b      	lsrs	r3, r3, #1
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	461a      	mov	r2, r3
 8002e46:	4b32      	ldr	r3, [pc, #200]	; (8002f10 <StartDefaultTask+0x8c8>)
 8002e48:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8002e4c:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002e50:	5499      	strb	r1, [r3, r2]
						  break;
 8002e52:	e052      	b.n	8002efa <StartDefaultTask+0x8b2>
						  case SCARA_TEST_MOTOR2_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[1];
 8002e54:	4b2e      	ldr	r3, [pc, #184]	; (8002f10 <StartDefaultTask+0x8c8>)
 8002e56:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	425b      	negs	r3, r3
 8002e5e:	b2d9      	uxtb	r1, r3
 8002e60:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002e64:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002e68:	085b      	lsrs	r3, r3, #1
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	b249      	sxtb	r1, r1
 8002e70:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002e74:	5499      	strb	r1, [r3, r2]
						  break;
 8002e76:	e040      	b.n	8002efa <StartDefaultTask+0x8b2>
						  case SCARA_TEST_MOTOR3_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[2];
 8002e78:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002e7c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002e80:	085b      	lsrs	r3, r3, #1
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	461a      	mov	r2, r3
 8002e86:	4b22      	ldr	r3, [pc, #136]	; (8002f10 <StartDefaultTask+0x8c8>)
 8002e88:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8002e8c:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002e90:	5499      	strb	r1, [r3, r2]
						  break;
 8002e92:	e032      	b.n	8002efa <StartDefaultTask+0x8b2>
						  case SCARA_TEST_MOTOR3_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[2];
 8002e94:	4b1e      	ldr	r3, [pc, #120]	; (8002f10 <StartDefaultTask+0x8c8>)
 8002e96:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	425b      	negs	r3, r3
 8002e9e:	b2d9      	uxtb	r1, r3
 8002ea0:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002ea4:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002ea8:	085b      	lsrs	r3, r3, #1
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	b249      	sxtb	r1, r1
 8002eb0:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002eb4:	5499      	strb	r1, [r3, r2]
						  break;
 8002eb6:	e020      	b.n	8002efa <StartDefaultTask+0x8b2>
						  case SCARA_TEST_MOTOR4_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[3];
 8002eb8:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002ebc:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002ec0:	085b      	lsrs	r3, r3, #1
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <StartDefaultTask+0x8c8>)
 8002ec8:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8002ecc:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002ed0:	5499      	strb	r1, [r3, r2]
						  break;
 8002ed2:	e012      	b.n	8002efa <StartDefaultTask+0x8b2>
						  case SCARA_TEST_MOTOR4_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[3];
 8002ed4:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <StartDefaultTask+0x8c8>)
 8002ed6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	425b      	negs	r3, r3
 8002ede:	b2d9      	uxtb	r1, r3
 8002ee0:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002ee4:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002ee8:	085b      	lsrs	r3, r3, #1
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	b249      	sxtb	r1, r1
 8002ef0:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002ef4:	5499      	strb	r1, [r3, r2]
						  break;						  
 8002ef6:	e000      	b.n	8002efa <StartDefaultTask+0x8b2>
						  default:
							  break;
 8002ef8:	bf00      	nop
						  }
					  }
					  break;
 8002efa:	e0f4      	b.n	80030e6 <StartDefaultTask+0xa9e>
 8002efc:	0801b2d4 	.word	0x0801b2d4
 8002f00:	0801b2e4 	.word	0x0801b2e4
 8002f04:	0801b2f4 	.word	0x0801b2f4
 8002f08:	0801b308 	.word	0x0801b308
 8002f0c:	0801b318 	.word	0x0801b318
 8002f10:	20000000 	.word	0x20000000
				  	  case SCARA_METHOD_GCODE:
				  	  {
				  		  if(current_duty_state == SCARA_DUTY_STATE_READY && duty_cmd.id_command == CMD_GCODE_RUN){
 8002f14:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002f18:	f103 0305 	add.w	r3, r3, #5
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d11a      	bne.n	8002f58 <StartDefaultTask+0x910>
 8002f22:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	2b13      	cmp	r3, #19
 8002f2a:	d115      	bne.n	8002f58 <StartDefaultTask+0x910>
				  			  if(Gcode_Mode == GCODE_LINEAR){
 8002f2c:	4bc0      	ldr	r3, [pc, #768]	; (8003230 <StartDefaultTask+0xbe8>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b07      	cmp	r3, #7
 8002f32:	d103      	bne.n	8002f3c <StartDefaultTask+0x8f4>
				  				run_point = 1;
 8002f34:	2301      	movs	r3, #1
 8002f36:	f8c7 3ffc 	str.w	r3, [r7, #4092]	; 0xffc
 8002f3a:	e006      	b.n	8002f4a <StartDefaultTask+0x902>
				  			  }else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8002f3c:	4bbc      	ldr	r3, [pc, #752]	; (8003230 <StartDefaultTask+0xbe8>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d102      	bne.n	8002f4a <StartDefaultTask+0x902>
				  				run_point = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	f8c7 3ffc 	str.w	r3, [r7, #4092]	; 0xffc
				  			  }

				  			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8002f4a:	2304      	movs	r3, #4
 8002f4c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002f50:	f102 0205 	add.w	r2, r2, #5
 8002f54:	7013      	strb	r3, [r2, #0]
 8002f56:	e031      	b.n	8002fbc <StartDefaultTask+0x974>
				  		  }else if(current_duty_state == SCARA_DUTY_STATE_INIT && duty_cmd.id_command == CMD_GCODE_RESUME){
 8002f58:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002f5c:	f103 0305 	add.w	r3, r3, #5
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d111      	bne.n	8002f8a <StartDefaultTask+0x942>
 8002f66:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	2b12      	cmp	r3, #18
 8002f6e:	d10c      	bne.n	8002f8a <StartDefaultTask+0x942>
				  			  lowlayer_readTruePosition(&positionCurrent);
 8002f70:	48b0      	ldr	r0, [pc, #704]	; (8003234 <StartDefaultTask+0xbec>)
 8002f72:	f002 ff51 	bl	8005e18 <lowlayer_readTruePosition>
				  			  kinematicForward(&positionCurrent);
 8002f76:	48af      	ldr	r0, [pc, #700]	; (8003234 <StartDefaultTask+0xbec>)
 8002f78:	f002 f80a 	bl	8004f90 <kinematicForward>
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002f82:	f102 0205 	add.w	r2, r2, #5
 8002f86:	7013      	strb	r3, [r2, #0]
 8002f88:	e018      	b.n	8002fbc <StartDefaultTask+0x974>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_STOP){
 8002f8a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2b0d      	cmp	r3, #13
 8002f92:	d106      	bne.n	8002fa2 <StartDefaultTask+0x95a>
				  			  current_duty_state = SCARA_DUTY_STATE_READY;
 8002f94:	2300      	movs	r3, #0
 8002f96:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002f9a:	f102 0205 	add.w	r2, r2, #5
 8002f9e:	7013      	strb	r3, [r2, #0]
				  		  }else if(duty_cmd.id_command == CMD_GCODE_PAUSE){
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
				  		  }
				  	  }
				  	  break;
 8002fa0:	e0a0      	b.n	80030e4 <StartDefaultTask+0xa9c>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_PAUSE){
 8002fa2:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b0e      	cmp	r3, #14
 8002faa:	f040 809b 	bne.w	80030e4 <StartDefaultTask+0xa9c>
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002fb4:	f102 0205 	add.w	r2, r2, #5
 8002fb8:	7013      	strb	r3, [r2, #0]
				  	  break;
 8002fba:	e093      	b.n	80030e4 <StartDefaultTask+0xa9c>
 8002fbc:	e092      	b.n	80030e4 <StartDefaultTask+0xa9c>
				  	  case SCARA_METHOD_PICK_AND_PLACE:{
				  		  memcpy(&Object[object_head_pointer].object_position, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 8002fbe:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002fc2:	f103 030d 	add.w	r3, r3, #13
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8002fcc:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002fd0:	fb01 f303 	mul.w	r3, r1, r3
 8002fd4:	18d0      	adds	r0, r2, r3
 8002fd6:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002fda:	3328      	adds	r3, #40	; 0x28
 8002fdc:	22c0      	movs	r2, #192	; 0xc0
 8002fde:	4619      	mov	r1, r3
 8002fe0:	f012 febc 	bl	8015d5c <memcpy>
				  		  Object[object_head_pointer].timer_value = (uint16_t)duty_cmd.target_point.t;
 8002fe4:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002fe8:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8002fec:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002ff0:	f102 020d 	add.w	r2, r2, #13
 8002ff4:	7815      	ldrb	r5, [r2, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	4621      	mov	r1, r4
 8002ffa:	f7fd fdd5 	bl	8000ba8 <__aeabi_d2uiz>
 8002ffe:	4603      	mov	r3, r0
 8003000:	b299      	uxth	r1, r3
 8003002:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003006:	f44f 73c4 	mov.w	r3, #392	; 0x188
 800300a:	fb03 f305 	mul.w	r3, r3, r5
 800300e:	4413      	add	r3, r2
 8003010:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003014:	460a      	mov	r2, r1
 8003016:	801a      	strh	r2, [r3, #0]
				  		  object_head_pointer = (object_head_pointer+1)%8;
 8003018:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800301c:	f103 030d 	add.w	r3, r3, #13
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	3301      	adds	r3, #1
 8003024:	425a      	negs	r2, r3
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	f002 0207 	and.w	r2, r2, #7
 800302e:	bf58      	it	pl
 8003030:	4253      	negpl	r3, r2
 8003032:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003036:	f102 020d 	add.w	r2, r2, #13
 800303a:	7013      	strb	r3, [r2, #0]
				  		  detail_array[0] = OBJECT_DETECTED;
 800303c:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003040:	221d      	movs	r2, #29
 8003042:	701a      	strb	r2, [r3, #0]
						  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003044:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003048:	6899      	ldr	r1, [r3, #8]
 800304a:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 800304e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003052:	f103 0308 	add.w	r3, r3, #8
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4413      	add	r3, r2
 800305a:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	2301      	movs	r3, #1
 8003062:	2008      	movs	r0, #8
 8003064:	f7ff f942 	bl	80022ec <commandRespond1>
 8003068:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
						  total_respond_length += respond_lenght;
 800306c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003070:	f103 0308 	add.w	r3, r3, #8
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 800307a:	4413      	add	r3, r2
 800307c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003080:	f102 0208 	add.w	r2, r2, #8
 8003084:	6013      	str	r3, [r2, #0]
				  	  }
				  	  break;
 8003086:	e02e      	b.n	80030e6 <StartDefaultTask+0xa9e>
				  	  default:
				  	  {
				  		  LOG_REPORT("CMD Error Method !!!", __LINE__);
 8003088:	f240 11dd 	movw	r1, #477	; 0x1dd
 800308c:	486a      	ldr	r0, [pc, #424]	; (8003238 <StartDefaultTask+0xbf0>)
 800308e:	f7ff f995 	bl	80023bc <LOG_REPORT>
 8003092:	e028      	b.n	80030e6 <StartDefaultTask+0xa9e>
				  	  }
				  	  }
			  	  } else {
					detail_array[0] = INCORRECT_METHOD;
 8003094:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003098:	2224      	movs	r2, #36	; 0x24
 800309a:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800309c:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80030a0:	6899      	ldr	r1, [r3, #8]
 80030a2:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 80030a6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80030aa:	f103 0308 	add.w	r3, r3, #8
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4413      	add	r3, r2
 80030b2:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	2301      	movs	r3, #1
 80030ba:	2007      	movs	r0, #7
 80030bc:	f7ff f916 	bl	80022ec <commandRespond1>
 80030c0:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
					total_respond_length += respond_lenght;
 80030c4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80030c8:	f103 0308 	add.w	r3, r3, #8
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80030d2:	4413      	add	r3, r2
 80030d4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80030d8:	f102 0208 	add.w	r2, r2, #8
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e002      	b.n	80030e6 <StartDefaultTask+0xa9e>
				  	  break;
 80030e0:	bf00      	nop
 80030e2:	e000      	b.n	80030e6 <StartDefaultTask+0xa9e>
				  	  break;
 80030e4:	bf00      	nop
			  	  }

			  }
		  isNewDuty = FALSE;
 80030e6:	2300      	movs	r3, #0
 80030e8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80030ec:	f102 020f 	add.w	r2, r2, #15
 80030f0:	7013      	strb	r3, [r2, #0]
	  }

	  /* 3--- Execute Phase ---*/
	  switch(current_method) {
 80030f2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80030f6:	f103 0307 	add.w	r3, r3, #7
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	f201 8104 	bhi.w	800430a <StartDefaultTask+0x1cc2>
 8003102:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <StartDefaultTask+0xac0>)
 8003104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003108:	0800311d 	.word	0x0800311d
 800310c:	0800334b 	.word	0x0800334b
 8003110:	08003821 	.word	0x08003821
 8003114:	08003b57 	.word	0x08003b57
 8003118:	08003b7d 	.word	0x08003b7d
	  case SCARA_METHOD_MANUAL:
	  {
		  switch( current_key_state) {
 800311c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003120:	f103 0303 	add.w	r3, r3, #3
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b03      	cmp	r3, #3
 8003128:	f201 80ec 	bhi.w	8004304 <StartDefaultTask+0x1cbc>
 800312c:	a201      	add	r2, pc, #4	; (adr r2, 8003134 <StartDefaultTask+0xaec>)
 800312e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003132:	bf00      	nop
 8003134:	08003345 	.word	0x08003345
 8003138:	08003145 	.word	0x08003145
 800313c:	080031db 	.word	0x080031db
 8003140:	08003301 	.word	0x08003301
		  case SCARA_KEY_STATE_READY:
			  /* Wait for application keyboard , do nothing*/
		  break;
		  case SCARA_KEY_STATE_INIT:
		  {
			  if (scaraKeyInit1(current_key, current_key_speed1) == SCARA_STATUS_OK) {
 8003144:	4b3d      	ldr	r3, [pc, #244]	; (800323c <StartDefaultTask+0xbf4>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800314c:	f103 0302 	add.w	r3, r3, #2
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	4611      	mov	r1, r2
 8003154:	4618      	mov	r0, r3
 8003156:	f007 fc0b 	bl	800a970 <scaraKeyInit1>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d135      	bne.n	80031cc <StartDefaultTask+0xb84>
				  run_time = 0;
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	f04f 0400 	mov.w	r4, #0
 8003168:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800316c:	f102 0210 	add.w	r2, r2, #16
 8003170:	e9c2 3400 	strd	r3, r4, [r2]
				  current_key_state = SCARA_KEY_STATE_FLOW;
 8003174:	2302      	movs	r3, #2
 8003176:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800317a:	f102 0203 	add.w	r2, r2, #3
 800317e:	7013      	strb	r3, [r2, #0]
					detail_array[0] = NONE;
 8003180:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003184:	2225      	movs	r2, #37	; 0x25
 8003186:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003188:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800318c:	6899      	ldr	r1, [r3, #8]
 800318e:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8003192:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003196:	f103 0308 	add.w	r3, r3, #8
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4413      	add	r3, r2
 800319e:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	2301      	movs	r3, #1
 80031a6:	2003      	movs	r0, #3
 80031a8:	f7ff f8a0 	bl	80022ec <commandRespond1>
 80031ac:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
					total_respond_length += respond_lenght;
 80031b0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80031b4:	f103 0308 	add.w	r3, r3, #8
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80031be:	4413      	add	r3, r2
 80031c0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80031c4:	f102 0208 	add.w	r2, r2, #8
 80031c8:	6013      	str	r3, [r2, #0]
			  } else {
				  current_key_state = SCARA_KEY_STATE_READY;
			  }
		  }
		  break;
 80031ca:	e0bc      	b.n	8003346 <StartDefaultTask+0xcfe>
				  current_key_state = SCARA_KEY_STATE_READY;
 80031cc:	2300      	movs	r3, #0
 80031ce:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80031d2:	f102 0203 	add.w	r2, r2, #3
 80031d6:	7013      	strb	r3, [r2, #0]
		  break;
 80031d8:	e0b5      	b.n	8003346 <StartDefaultTask+0xcfe>
		  case SCARA_KEY_STATE_FLOW:
		  {
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 80031da:	a313      	add	r3, pc, #76	; (adr r3, 8003228 <StartDefaultTask+0xbe0>)
 80031dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e0:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80031e4:	f101 0110 	add.w	r1, r1, #16
 80031e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031ec:	f7fd f84e 	bl	800028c <__adddf3>
 80031f0:	4603      	mov	r3, r0
 80031f2:	460c      	mov	r4, r1
 80031f4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80031f8:	f102 0210 	add.w	r2, r2, #16
 80031fc:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8003200:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003204:	f103 0310 	add.w	r3, r3, #16
 8003208:	ed93 0b00 	vldr	d0, [r3]
 800320c:	f007 faa2 	bl	800a754 <scaraIsFinish>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d014      	beq.n	8003240 <StartDefaultTask+0xbf8>
				  current_key_state = SCARA_KEY_STATE_FINISH;// Key Done
 8003216:	2303      	movs	r3, #3
 8003218:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800321c:	f102 0203 	add.w	r2, r2, #3
 8003220:	7013      	strb	r3, [r2, #0]
					total_respond_length += respond_lenght;
					  LOG_REPORT("STOP KEY", __LINE__);
				  }
			  }
		  }
		  break;
 8003222:	e090      	b.n	8003346 <StartDefaultTask+0xcfe>
 8003224:	f3af 8000 	nop.w
 8003228:	40000000 	.word	0x40000000
 800322c:	3f847ae1 	.word	0x3f847ae1
 8003230:	200065c0 	.word	0x200065c0
 8003234:	2000eab0 	.word	0x2000eab0
 8003238:	0801b32c 	.word	0x0801b32c
 800323c:	20000060 	.word	0x20000060
				  status = scaraFlowDuty(run_time, &positionNext, positionCurrent);
 8003240:	4cd3      	ldr	r4, [pc, #844]	; (8003590 <StartDefaultTask+0xf48>)
 8003242:	4668      	mov	r0, sp
 8003244:	f104 0308 	add.w	r3, r4, #8
 8003248:	22b8      	movs	r2, #184	; 0xb8
 800324a:	4619      	mov	r1, r3
 800324c:	f012 fd86 	bl	8015d5c <memcpy>
 8003250:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003254:	48cf      	ldr	r0, [pc, #828]	; (8003594 <StartDefaultTask+0xf4c>)
 8003256:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800325a:	f101 0110 	add.w	r1, r1, #16
 800325e:	ed91 0b00 	vldr	d0, [r1]
 8003262:	f006 fbdd 	bl	8009a20 <scaraFlowDuty>
 8003266:	4603      	mov	r3, r0
 8003268:	f887 3fc9 	strb.w	r3, [r7, #4041]	; 0xfc9
				  if ( SCARA_STATUS_OK == status) {
 800326c:	f897 3fc9 	ldrb.w	r3, [r7, #4041]	; 0xfc9
 8003270:	2b00      	cmp	r3, #0
 8003272:	d113      	bne.n	800329c <StartDefaultTask+0xc54>
					  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003274:	4cc6      	ldr	r4, [pc, #792]	; (8003590 <StartDefaultTask+0xf48>)
 8003276:	4ac7      	ldr	r2, [pc, #796]	; (8003594 <StartDefaultTask+0xf4c>)
 8003278:	ab2c      	add	r3, sp, #176	; 0xb0
 800327a:	4611      	mov	r1, r2
 800327c:	22c0      	movs	r2, #192	; 0xc0
 800327e:	4618      	mov	r0, r3
 8003280:	f012 fd6c 	bl	8015d5c <memcpy>
 8003284:	4668      	mov	r0, sp
 8003286:	f104 0310 	add.w	r3, r4, #16
 800328a:	22b0      	movs	r2, #176	; 0xb0
 800328c:	4619      	mov	r1, r3
 800328e:	f012 fd65 	bl	8015d5c <memcpy>
 8003292:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003296:	f002 ff4f 	bl	8006138 <lowlayer_computeAndWritePulse>
		  break;
 800329a:	e054      	b.n	8003346 <StartDefaultTask+0xcfe>
					  current_key_state = SCARA_KEY_STATE_FINISH;
 800329c:	2303      	movs	r3, #3
 800329e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80032a2:	f102 0203 	add.w	r2, r2, #3
 80032a6:	7013      	strb	r3, [r2, #0]
					detail_array[0] = status;
 80032a8:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 80032ac:	f897 2fc9 	ldrb.w	r2, [r7, #4041]	; 0xfc9
 80032b0:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80032b2:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80032b6:	6899      	ldr	r1, [r3, #8]
 80032b8:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 80032bc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80032c0:	f103 0308 	add.w	r3, r3, #8
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4413      	add	r3, r2
 80032c8:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	2301      	movs	r3, #1
 80032d0:	2006      	movs	r0, #6
 80032d2:	f7ff f80b 	bl	80022ec <commandRespond1>
 80032d6:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
					total_respond_length += respond_lenght;
 80032da:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80032de:	f103 0308 	add.w	r3, r3, #8
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80032e8:	4413      	add	r3, r2
 80032ea:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80032ee:	f102 0208 	add.w	r2, r2, #8
 80032f2:	6013      	str	r3, [r2, #0]
					  LOG_REPORT("STOP KEY", __LINE__);
 80032f4:	f240 2111 	movw	r1, #529	; 0x211
 80032f8:	48a7      	ldr	r0, [pc, #668]	; (8003598 <StartDefaultTask+0xf50>)
 80032fa:	f7ff f85f 	bl	80023bc <LOG_REPORT>
		  break;
 80032fe:	e022      	b.n	8003346 <StartDefaultTask+0xcfe>
		  case SCARA_KEY_STATE_FINISH:
		  {
			  lowlayer_readTruePosition(&positionNext);
 8003300:	48a4      	ldr	r0, [pc, #656]	; (8003594 <StartDefaultTask+0xf4c>)
 8003302:	f002 fd89 	bl	8005e18 <lowlayer_readTruePosition>
			  kinematicForward(&positionNext);
 8003306:	48a3      	ldr	r0, [pc, #652]	; (8003594 <StartDefaultTask+0xf4c>)
 8003308:	f001 fe42 	bl	8004f90 <kinematicForward>
			  current_key_state = SCARA_KEY_STATE_READY;
 800330c:	2300      	movs	r3, #0
 800330e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003312:	f102 0203 	add.w	r2, r2, #3
 8003316:	7013      	strb	r3, [r2, #0]
			  positionNext.t = 0;
 8003318:	4a9e      	ldr	r2, [pc, #632]	; (8003594 <StartDefaultTask+0xf4c>)
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	f04f 0400 	mov.w	r4, #0
 8003322:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
			  positionNext.total_time = 0;
 8003326:	4a9b      	ldr	r2, [pc, #620]	; (8003594 <StartDefaultTask+0xf4c>)
 8003328:	f04f 0300 	mov.w	r3, #0
 800332c:	f04f 0400 	mov.w	r4, #0
 8003330:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
			  positionNext.q = 0;
 8003334:	4a97      	ldr	r2, [pc, #604]	; (8003594 <StartDefaultTask+0xf4c>)
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	f04f 0400 	mov.w	r4, #0
 800333e:	e9c2 3400 	strd	r3, r4, [r2]
		  }
		  break;
 8003342:	e000      	b.n	8003346 <StartDefaultTask+0xcfe>
		  break;
 8003344:	bf00      	nop
		  }
	  }
	  break;
 8003346:	f000 bfdd 	b.w	8004304 <StartDefaultTask+0x1cbc>

	  case SCARA_METHOD_SEMI_AUTO:
	  {
		  switch( current_mode) {
 800334a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800334e:	f103 0306 	add.w	r3, r3, #6
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d012      	beq.n	800337e <StartDefaultTask+0xd36>
 8003358:	2b02      	cmp	r3, #2
 800335a:	f000 8089 	beq.w	8003470 <StartDefaultTask+0xe28>
 800335e:	2b00      	cmp	r3, #0
 8003360:	f040 8256 	bne.w	8003810 <StartDefaultTask+0x11c8>
		  case SCARA_MODE_STOP:
			  {
				  current_mode 	= SCARA_MODE_DUTY;
 8003364:	2302      	movs	r3, #2
 8003366:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800336a:	f102 0206 	add.w	r2, r2, #6
 800336e:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8003370:	2300      	movs	r3, #0
 8003372:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003376:	f102 0205 	add.w	r2, r2, #5
 800337a:	7013      	strb	r3, [r2, #0]
			  }
			  break;
 800337c:	e24e      	b.n	800381c <StartDefaultTask+0x11d4>

		  case SCARA_MODE_SCAN:
			  {
				  switch (current_scan_state) {
 800337e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003382:	f103 0304 	add.w	r3, r3, #4
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b03      	cmp	r3, #3
 800338a:	d867      	bhi.n	800345c <StartDefaultTask+0xe14>
 800338c:	a201      	add	r2, pc, #4	; (adr r2, 8003394 <StartDefaultTask+0xd4c>)
 800338e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003392:	bf00      	nop
 8003394:	080033a5 	.word	0x080033a5
 8003398:	080033b7 	.word	0x080033b7
 800339c:	080033cf 	.word	0x080033cf
 80033a0:	080033e9 	.word	0x080033e9
				  case SCARA_SCAN_STATE_INIT:
					  {
						  lowlayer_scanReset();
 80033a4:	f002 fb2e 	bl	8005a04 <lowlayer_scanReset>
						  current_scan_state = SCARA_SCAN_STATE_HARD;
 80033a8:	2301      	movs	r3, #1
 80033aa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80033ae:	f102 0204 	add.w	r2, r2, #4
 80033b2:	7013      	strb	r3, [r2, #0]
					  }
					  break;
 80033b4:	e05b      	b.n	800346e <StartDefaultTask+0xe26>
				  case SCARA_SCAN_STATE_HARD:
					  {
						  if(lowlayer_scanFlow()) {
 80033b6:	f002 fb57 	bl	8005a68 <lowlayer_scanFlow>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d053      	beq.n	8003468 <StartDefaultTask+0xe20>
							  current_scan_state = SCARA_SCAN_STATE_SOFT;
 80033c0:	2302      	movs	r3, #2
 80033c2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80033c6:	f102 0204 	add.w	r2, r2, #4
 80033ca:	7013      	strb	r3, [r2, #0]
						  }
					  }
					  break;
 80033cc:	e04c      	b.n	8003468 <StartDefaultTask+0xe20>
				  case SCARA_SCAN_STATE_SOFT:
					  {
						  if(lowlayer_goToSoftLimit(&positionNext)) {
 80033ce:	4871      	ldr	r0, [pc, #452]	; (8003594 <StartDefaultTask+0xf4c>)
 80033d0:	f002 fca6 	bl	8005d20 <lowlayer_goToSoftLimit>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d048      	beq.n	800346c <StartDefaultTask+0xe24>
							  current_scan_state = SCARA_SCAN_STATE_FINISH;
 80033da:	2303      	movs	r3, #3
 80033dc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80033e0:	f102 0204 	add.w	r2, r2, #4
 80033e4:	7013      	strb	r3, [r2, #0]
							}
					  }
					  break;
 80033e6:	e041      	b.n	800346c <StartDefaultTask+0xe24>
				  case SCARA_SCAN_STATE_FINISH:
					  {
						  //lowlayer_readSetPosition(&positionNext);
						  lowlayer_readTruePosition(&positionNext);
 80033e8:	486a      	ldr	r0, [pc, #424]	; (8003594 <StartDefaultTask+0xf4c>)
 80033ea:	f002 fd15 	bl	8005e18 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 80033ee:	4869      	ldr	r0, [pc, #420]	; (8003594 <StartDefaultTask+0xf4c>)
 80033f0:	f001 fdce 	bl	8004f90 <kinematicForward>
						  current_mode 	= SCARA_MODE_DUTY;
 80033f4:	2302      	movs	r3, #2
 80033f6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80033fa:	f102 0206 	add.w	r2, r2, #6
 80033fe:	7013      	strb	r3, [r2, #0]
						  current_duty_state = SCARA_DUTY_STATE_READY;
 8003400:	2300      	movs	r3, #0
 8003402:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003406:	f102 0205 	add.w	r2, r2, #5
 800340a:	7013      	strb	r3, [r2, #0]
						  scaraSetScanFlag();
 800340c:	f007 f904 	bl	800a618 <scaraSetScanFlag>
						//   scaraPosition2String((char *)position, positionNext);
						//   infor_lenght 		= commandRespond(RPD_DONE,
						// 									 0,
						// 									(char *)position,
						// 									(char *)infor);
						detail_array[0] = NONE;
 8003410:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003414:	2225      	movs	r2, #37	; 0x25
 8003416:	701a      	strb	r2, [r3, #0]
						respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003418:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800341c:	6899      	ldr	r1, [r3, #8]
 800341e:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8003422:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003426:	f103 0308 	add.w	r3, r3, #8
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4413      	add	r3, r2
 800342e:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	2301      	movs	r3, #1
 8003436:	2005      	movs	r0, #5
 8003438:	f7fe ff58 	bl	80022ec <commandRespond1>
 800343c:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
						total_respond_length += respond_lenght;
 8003440:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003444:	f103 0308 	add.w	r3, r3, #8
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 800344e:	4413      	add	r3, r2
 8003450:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003454:	f102 0208 	add.w	r2, r2, #8
 8003458:	6013      	str	r3, [r2, #0]
					  }
					  break;
 800345a:	e008      	b.n	800346e <StartDefaultTask+0xe26>
				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 800345c:	f240 215a 	movw	r1, #602	; 0x25a
 8003460:	484e      	ldr	r0, [pc, #312]	; (800359c <StartDefaultTask+0xf54>)
 8003462:	f7fe ffab 	bl	80023bc <LOG_REPORT>
						  while(1);
 8003466:	e7fe      	b.n	8003466 <StartDefaultTask+0xe1e>
					  break;
 8003468:	bf00      	nop
 800346a:	e1d7      	b.n	800381c <StartDefaultTask+0x11d4>
					  break;
 800346c:	bf00      	nop
					  }
				  }

			  }
			  break;
 800346e:	e1d5      	b.n	800381c <StartDefaultTask+0x11d4>

		  case SCARA_MODE_DUTY:
			  {
				  switch (current_duty_state) {
 8003470:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003474:	f103 0305 	add.w	r3, r3, #5
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b03      	cmp	r3, #3
 800347c:	f200 81c0 	bhi.w	8003800 <StartDefaultTask+0x11b8>
 8003480:	a201      	add	r2, pc, #4	; (adr r2, 8003488 <StartDefaultTask+0xe40>)
 8003482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003486:	bf00      	nop
 8003488:	0800380d 	.word	0x0800380d
 800348c:	08003499 	.word	0x08003499
 8003490:	08003669 	.word	0x08003669
 8003494:	08003773 	.word	0x08003773

				  case SCARA_DUTY_STATE_INIT:
					  {

						  SCARA_StatusTypeDef status1, status2;
						  status1 = scaraInitDuty(duty_cmd);
 8003498:	f607 54f8 	addw	r4, r7, #3576	; 0xdf8
 800349c:	4668      	mov	r0, sp
 800349e:	f104 0310 	add.w	r3, r4, #16
 80034a2:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80034a6:	4619      	mov	r1, r3
 80034a8:	f012 fc58 	bl	8015d5c <memcpy>
 80034ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80034b0:	f003 f9d6 	bl	8006860 <scaraInitDuty>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f887 3fcb 	strb.w	r3, [r7, #4043]	; 0xfcb
						  if ( SCARA_STATUS_OK == status1) {
 80034ba:	f897 3fcb 	ldrb.w	r3, [r7, #4043]	; 0xfcb
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f040 80a0 	bne.w	8003604 <StartDefaultTask+0xfbc>
							  status2 = scaraTestDuty();
 80034c4:	f007 f82c 	bl	800a520 <scaraTestDuty>
 80034c8:	4603      	mov	r3, r0
 80034ca:	f887 3fca 	strb.w	r3, [r7, #4042]	; 0xfca
							  if (SCARA_STATUS_OK == status2) {
 80034ce:	f897 3fca 	ldrb.w	r3, [r7, #4042]	; 0xfca
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d164      	bne.n	80035a0 <StartDefaultTask+0xf58>
							  current_duty_state = SCARA_DUTY_STATE_FLOW;
 80034d6:	2302      	movs	r3, #2
 80034d8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80034dc:	f102 0205 	add.w	r2, r2, #5
 80034e0:	7013      	strb	r3, [r2, #0]
							  //current_duty_state = SCARA_DUTY_STATE_FINISH;
							  run_time			= 0;
 80034e2:	f04f 0300 	mov.w	r3, #0
 80034e6:	f04f 0400 	mov.w	r4, #0
 80034ea:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80034ee:	f102 0210 	add.w	r2, r2, #16
 80034f2:	e9c2 3400 	strd	r3, r4, [r2]
							  // Respond
							  detail_array[0] = status1;
 80034f6:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 80034fa:	f897 2fcb 	ldrb.w	r2, [r7, #4043]	; 0xfcb
 80034fe:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003500:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003504:	6899      	ldr	r1, [r3, #8]
 8003506:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 800350a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800350e:	f103 0308 	add.w	r3, r3, #8
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4413      	add	r3, r2
 8003516:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	2301      	movs	r3, #1
 800351e:	2008      	movs	r0, #8
 8003520:	f7fe fee4 	bl	80022ec <commandRespond1>
 8003524:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
							  total_respond_length += respond_lenght;
 8003528:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800352c:	f103 0308 	add.w	r3, r3, #8
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8003536:	4413      	add	r3, r2
 8003538:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800353c:	f102 0208 	add.w	r2, r2, #8
 8003540:	6013      	str	r3, [r2, #0]
							  detail_array[0] = NONE;
 8003542:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003546:	2225      	movs	r2, #37	; 0x25
 8003548:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800354a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800354e:	6899      	ldr	r1, [r3, #8]
 8003550:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8003554:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003558:	f103 0308 	add.w	r3, r3, #8
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4413      	add	r3, r2
 8003560:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	2301      	movs	r3, #1
 8003568:	2003      	movs	r0, #3
 800356a:	f7fe febf 	bl	80022ec <commandRespond1>
 800356e:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
							  total_respond_length += respond_lenght;
 8003572:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003576:	f103 0308 	add.w	r3, r3, #8
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8003580:	4413      	add	r3, r2
 8003582:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003586:	f102 0208 	add.w	r2, r2, #8
 800358a:	6013      	str	r3, [r2, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
							total_respond_length += respond_lenght;
							  LOG_REPORT("INIT FAIL", __LINE__);
						  }
					  }
				  break;
 800358c:	e13f      	b.n	800380e <StartDefaultTask+0x11c6>
 800358e:	bf00      	nop
 8003590:	2000eab0 	.word	0x2000eab0
 8003594:	2000ec30 	.word	0x2000ec30
 8003598:	0801b344 	.word	0x0801b344
 800359c:	0801b350 	.word	0x0801b350
								  current_duty_state 	= SCARA_DUTY_STATE_READY;
 80035a0:	2300      	movs	r3, #0
 80035a2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80035a6:	f102 0205 	add.w	r2, r2, #5
 80035aa:	7013      	strb	r3, [r2, #0]
								  LOG_REPORT("TEST FAIL", __LINE__);
 80035ac:	f240 2185 	movw	r1, #645	; 0x285
 80035b0:	48c7      	ldr	r0, [pc, #796]	; (80038d0 <StartDefaultTask+0x1288>)
 80035b2:	f7fe ff03 	bl	80023bc <LOG_REPORT>
								detail_array[0] = status2;
 80035b6:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 80035ba:	f897 2fca 	ldrb.w	r2, [r7, #4042]	; 0xfca
 80035be:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80035c0:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80035c4:	6899      	ldr	r1, [r3, #8]
 80035c6:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 80035ca:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80035ce:	f103 0308 	add.w	r3, r3, #8
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4413      	add	r3, r2
 80035d6:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	2301      	movs	r3, #1
 80035de:	2007      	movs	r0, #7
 80035e0:	f7fe fe84 	bl	80022ec <commandRespond1>
 80035e4:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
								total_respond_length += respond_lenght;
 80035e8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80035ec:	f103 0308 	add.w	r3, r3, #8
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80035f6:	4413      	add	r3, r2
 80035f8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80035fc:	f102 0208 	add.w	r2, r2, #8
 8003600:	6013      	str	r3, [r2, #0]
				  break;
 8003602:	e104      	b.n	800380e <StartDefaultTask+0x11c6>
							  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8003604:	2300      	movs	r3, #0
 8003606:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800360a:	f102 0205 	add.w	r2, r2, #5
 800360e:	7013      	strb	r3, [r2, #0]
							detail_array[0] = status1;
 8003610:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003614:	f897 2fcb 	ldrb.w	r2, [r7, #4043]	; 0xfcb
 8003618:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800361a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800361e:	6899      	ldr	r1, [r3, #8]
 8003620:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8003624:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003628:	f103 0308 	add.w	r3, r3, #8
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4413      	add	r3, r2
 8003630:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	2301      	movs	r3, #1
 8003638:	2007      	movs	r0, #7
 800363a:	f7fe fe57 	bl	80022ec <commandRespond1>
 800363e:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
							total_respond_length += respond_lenght;
 8003642:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003646:	f103 0308 	add.w	r3, r3, #8
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8003650:	4413      	add	r3, r2
 8003652:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003656:	f102 0208 	add.w	r2, r2, #8
 800365a:	6013      	str	r3, [r2, #0]
							  LOG_REPORT("INIT FAIL", __LINE__);
 800365c:	f44f 7124 	mov.w	r1, #656	; 0x290
 8003660:	489c      	ldr	r0, [pc, #624]	; (80038d4 <StartDefaultTask+0x128c>)
 8003662:	f7fe feab 	bl	80023bc <LOG_REPORT>
				  break;
 8003666:	e0d2      	b.n	800380e <StartDefaultTask+0x11c6>

				  case SCARA_DUTY_STATE_FLOW:
					  {
						  SCARA_StatusTypeDef status;
						  // Increase run time
						  run_time += T_SAMPLING;
 8003668:	a397      	add	r3, pc, #604	; (adr r3, 80038c8 <StartDefaultTask+0x1280>)
 800366a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366e:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003672:	f101 0110 	add.w	r1, r1, #16
 8003676:	e9d1 0100 	ldrd	r0, r1, [r1]
 800367a:	f7fc fe07 	bl	800028c <__adddf3>
 800367e:	4603      	mov	r3, r0
 8003680:	460c      	mov	r4, r1
 8003682:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003686:	f102 0210 	add.w	r2, r2, #16
 800368a:	e9c2 3400 	strd	r3, r4, [r2]
						  // Check Time Out
						  if (scaraIsFinish(run_time)) {
 800368e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003692:	f103 0310 	add.w	r3, r3, #16
 8003696:	ed93 0b00 	vldr	d0, [r3]
 800369a:	f007 f85b 	bl	800a754 <scaraIsFinish>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d006      	beq.n	80036b2 <StartDefaultTask+0x106a>
							  current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 80036a4:	2303      	movs	r3, #3
 80036a6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80036aa:	f102 0205 	add.w	r2, r2, #5
 80036ae:	7013      	strb	r3, [r2, #0]
								total_respond_length += respond_lenght;
								  LOG_REPORT("STOP DUTY", __LINE__);
							  }
						  }
					  }
				  break;
 80036b0:	e0ad      	b.n	800380e <StartDefaultTask+0x11c6>
							  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 80036b2:	4c89      	ldr	r4, [pc, #548]	; (80038d8 <StartDefaultTask+0x1290>)
 80036b4:	4668      	mov	r0, sp
 80036b6:	f104 0308 	add.w	r3, r4, #8
 80036ba:	22b8      	movs	r2, #184	; 0xb8
 80036bc:	4619      	mov	r1, r3
 80036be:	f012 fb4d 	bl	8015d5c <memcpy>
 80036c2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80036c6:	4885      	ldr	r0, [pc, #532]	; (80038dc <StartDefaultTask+0x1294>)
 80036c8:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80036cc:	f101 0110 	add.w	r1, r1, #16
 80036d0:	ed91 0b00 	vldr	d0, [r1]
 80036d4:	f006 f9a4 	bl	8009a20 <scaraFlowDuty>
 80036d8:	4603      	mov	r3, r0
 80036da:	f887 3fcc 	strb.w	r3, [r7, #4044]	; 0xfcc
							  if ( SCARA_STATUS_OK == status) {
 80036de:	f897 3fcc 	ldrb.w	r3, [r7, #4044]	; 0xfcc
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d113      	bne.n	800370e <StartDefaultTask+0x10c6>
								  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 80036e6:	4c7c      	ldr	r4, [pc, #496]	; (80038d8 <StartDefaultTask+0x1290>)
 80036e8:	4a7c      	ldr	r2, [pc, #496]	; (80038dc <StartDefaultTask+0x1294>)
 80036ea:	ab2c      	add	r3, sp, #176	; 0xb0
 80036ec:	4611      	mov	r1, r2
 80036ee:	22c0      	movs	r2, #192	; 0xc0
 80036f0:	4618      	mov	r0, r3
 80036f2:	f012 fb33 	bl	8015d5c <memcpy>
 80036f6:	4668      	mov	r0, sp
 80036f8:	f104 0310 	add.w	r3, r4, #16
 80036fc:	22b0      	movs	r2, #176	; 0xb0
 80036fe:	4619      	mov	r1, r3
 8003700:	f012 fb2c 	bl	8015d5c <memcpy>
 8003704:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003708:	f002 fd16 	bl	8006138 <lowlayer_computeAndWritePulse>
				  break;
 800370c:	e07f      	b.n	800380e <StartDefaultTask+0x11c6>
								  current_duty_state = SCARA_DUTY_STATE_FINISH;
 800370e:	2303      	movs	r3, #3
 8003710:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003714:	f102 0205 	add.w	r2, r2, #5
 8003718:	7013      	strb	r3, [r2, #0]
								detail_array[0] = status;
 800371a:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 800371e:	f897 2fcc 	ldrb.w	r2, [r7, #4044]	; 0xfcc
 8003722:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003724:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003728:	6899      	ldr	r1, [r3, #8]
 800372a:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 800372e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003732:	f103 0308 	add.w	r3, r3, #8
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4413      	add	r3, r2
 800373a:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	2301      	movs	r3, #1
 8003742:	2006      	movs	r0, #6
 8003744:	f7fe fdd2 	bl	80022ec <commandRespond1>
 8003748:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
								total_respond_length += respond_lenght;
 800374c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003750:	f103 0308 	add.w	r3, r3, #8
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 800375a:	4413      	add	r3, r2
 800375c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003760:	f102 0208 	add.w	r2, r2, #8
 8003764:	6013      	str	r3, [r2, #0]
								  LOG_REPORT("STOP DUTY", __LINE__);
 8003766:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 800376a:	485d      	ldr	r0, [pc, #372]	; (80038e0 <StartDefaultTask+0x1298>)
 800376c:	f7fe fe26 	bl	80023bc <LOG_REPORT>
				  break;
 8003770:	e04d      	b.n	800380e <StartDefaultTask+0x11c6>

				  case SCARA_DUTY_STATE_FINISH:
					  {
						  lowlayer_readTruePosition(&positionNext);
 8003772:	485a      	ldr	r0, [pc, #360]	; (80038dc <StartDefaultTask+0x1294>)
 8003774:	f002 fb50 	bl	8005e18 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 8003778:	4858      	ldr	r0, [pc, #352]	; (80038dc <StartDefaultTask+0x1294>)
 800377a:	f001 fc09 	bl	8004f90 <kinematicForward>
						  current_duty_state = SCARA_DUTY_STATE_READY;
 800377e:	2300      	movs	r3, #0
 8003780:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003784:	f102 0205 	add.w	r2, r2, #5
 8003788:	7013      	strb	r3, [r2, #0]
						  positionNext.t = 0;
 800378a:	4a54      	ldr	r2, [pc, #336]	; (80038dc <StartDefaultTask+0x1294>)
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	f04f 0400 	mov.w	r4, #0
 8003794:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
						  positionNext.total_time = 0;
 8003798:	4a50      	ldr	r2, [pc, #320]	; (80038dc <StartDefaultTask+0x1294>)
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	f04f 0400 	mov.w	r4, #0
 80037a2:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
						  positionNext.q = 0;
 80037a6:	4a4d      	ldr	r2, [pc, #308]	; (80038dc <StartDefaultTask+0x1294>)
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	f04f 0400 	mov.w	r4, #0
 80037b0:	e9c2 3400 	strd	r3, r4, [r2]
						  // Done Inform

					detail_array[0] = NONE;
 80037b4:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 80037b8:	2225      	movs	r2, #37	; 0x25
 80037ba:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80037bc:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80037c0:	6899      	ldr	r1, [r3, #8]
 80037c2:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 80037c6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80037ca:	f103 0308 	add.w	r3, r3, #8
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4413      	add	r3, r2
 80037d2:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	2301      	movs	r3, #1
 80037da:	2005      	movs	r0, #5
 80037dc:	f7fe fd86 	bl	80022ec <commandRespond1>
 80037e0:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
					total_respond_length += respond_lenght;
 80037e4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80037e8:	f103 0308 	add.w	r3, r3, #8
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80037f2:	4413      	add	r3, r2
 80037f4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80037f8:	f102 0208 	add.w	r2, r2, #8
 80037fc:	6013      	str	r3, [r2, #0]
					  }
				  break;
 80037fe:	e006      	b.n	800380e <StartDefaultTask+0x11c6>

				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8003800:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8003804:	4837      	ldr	r0, [pc, #220]	; (80038e4 <StartDefaultTask+0x129c>)
 8003806:	f7fe fdd9 	bl	80023bc <LOG_REPORT>
						  while(1);
 800380a:	e7fe      	b.n	800380a <StartDefaultTask+0x11c2>
				  break;
 800380c:	bf00      	nop
					  }
				  }

			  }
			  break;
 800380e:	e005      	b.n	800381c <StartDefaultTask+0x11d4>

		  default:
			  {
				  LOG_REPORT("ERROR MODE !!!", __LINE__);
 8003810:	f240 21ca 	movw	r1, #714	; 0x2ca
 8003814:	4834      	ldr	r0, [pc, #208]	; (80038e8 <StartDefaultTask+0x12a0>)
 8003816:	f7fe fdd1 	bl	80023bc <LOG_REPORT>
				  while(1);
 800381a:	e7fe      	b.n	800381a <StartDefaultTask+0x11d2>
			  }
		  }
	  }
	  break;
 800381c:	f000 bd75 	b.w	800430a <StartDefaultTask+0x1cc2>

	  case SCARA_METHOD_GCODE:
	  {
		  switch (current_duty_state)
 8003820:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003824:	f103 0305 	add.w	r3, r3, #5
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b04      	cmp	r3, #4
 800382c:	f200 8191 	bhi.w	8003b52 <StartDefaultTask+0x150a>
 8003830:	a201      	add	r2, pc, #4	; (adr r2, 8003838 <StartDefaultTask+0x11f0>)
 8003832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003836:	bf00      	nop
 8003838:	08003b53 	.word	0x08003b53
 800383c:	08003b53 	.word	0x08003b53
 8003840:	080039ef 	.word	0x080039ef
 8003844:	08003b53 	.word	0x08003b53
 8003848:	0800384d 	.word	0x0800384d
		  case SCARA_DUTY_STATE_INIT:{

		  }
		  break;
		  case SCARA_DUTY_STATE_OPERATION:{
			  update_gcode_point(&duty_cmd, Gcode_Cor[run_point], run_point);
 800384c:	4927      	ldr	r1, [pc, #156]	; (80038ec <StartDefaultTask+0x12a4>)
 800384e:	f8d7 2ffc 	ldr.w	r2, [r7, #4092]	; 0xffc
 8003852:	4613      	mov	r3, r2
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	1a9b      	subs	r3, r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	18cc      	adds	r4, r1, r3
 800385c:	f607 56f8 	addw	r6, r7, #3576	; 0xdf8
 8003860:	f8d7 3ffc 	ldr.w	r3, [r7, #4092]	; 0xffc
 8003864:	9304      	str	r3, [sp, #16]
 8003866:	466d      	mov	r5, sp
 8003868:	f104 030c 	add.w	r3, r4, #12
 800386c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800386e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003872:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003876:	4630      	mov	r0, r6
 8003878:	f000 ff36 	bl	80046e8 <update_gcode_point>
			  SCARA_StatusTypeDef status;
			  status = scaraInitDuty(duty_cmd);
 800387c:	f607 54f8 	addw	r4, r7, #3576	; 0xdf8
 8003880:	4668      	mov	r0, sp
 8003882:	f104 0310 	add.w	r3, r4, #16
 8003886:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800388a:	4619      	mov	r1, r3
 800388c:	f012 fa66 	bl	8015d5c <memcpy>
 8003890:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003894:	f002 ffe4 	bl	8006860 <scaraInitDuty>
 8003898:	4603      	mov	r3, r0
 800389a:	f887 3fce 	strb.w	r3, [r7, #4046]	; 0xfce
			  if(status == SCARA_STATUS_OK){
 800389e:	f897 3fce 	ldrb.w	r3, [r7, #4046]	; 0xfce
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d176      	bne.n	8003994 <StartDefaultTask+0x134c>
				  if(Gcode_Mode == GCODE_LINEAR){
 80038a6:	4b12      	ldr	r3, [pc, #72]	; (80038f0 <StartDefaultTask+0x12a8>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2b07      	cmp	r3, #7
 80038ac:	d122      	bne.n	80038f4 <StartDefaultTask+0x12ac>
					  run_time = 0;
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	f04f 0400 	mov.w	r4, #0
 80038b6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80038ba:	f102 0210 	add.w	r2, r2, #16
 80038be:	e9c2 3400 	strd	r3, r4, [r2]
 80038c2:	e024      	b.n	800390e <StartDefaultTask+0x12c6>
 80038c4:	f3af 8000 	nop.w
 80038c8:	40000000 	.word	0x40000000
 80038cc:	3f847ae1 	.word	0x3f847ae1
 80038d0:	0801b360 	.word	0x0801b360
 80038d4:	0801b36c 	.word	0x0801b36c
 80038d8:	2000eab0 	.word	0x2000eab0
 80038dc:	2000ec30 	.word	0x2000ec30
 80038e0:	0801b378 	.word	0x0801b378
 80038e4:	0801b350 	.word	0x0801b350
 80038e8:	0801b384 	.word	0x0801b384
 80038ec:	20006f98 	.word	0x20006f98
 80038f0:	200065c0 	.word	0x200065c0
				  }else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 80038f4:	4bd6      	ldr	r3, [pc, #856]	; (8003c50 <StartDefaultTask+0x1608>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d108      	bne.n	800390e <StartDefaultTask+0x12c6>
					  run_time = last_T;
 80038fc:	4bd5      	ldr	r3, [pc, #852]	; (8003c54 <StartDefaultTask+0x160c>)
 80038fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003902:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003906:	f102 0210 	add.w	r2, r2, #16
 800390a:	e9c2 3400 	strd	r3, r4, [r2]
				  }
				  current_duty_state = SCARA_DUTY_STATE_FLOW;
 800390e:	2302      	movs	r3, #2
 8003910:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003914:	f102 0205 	add.w	r2, r2, #5
 8003918:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = (uint8_t)(run_point * 100.0f / total_num_of_point );
 800391a:	f8d7 3ffc 	ldr.w	r3, [r7, #4092]	; 0xffc
 800391e:	ee07 3a90 	vmov	s15, r3
 8003922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003926:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8003c58 <StartDefaultTask+0x1610>
 800392a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800392e:	4bcb      	ldr	r3, [pc, #812]	; (8003c5c <StartDefaultTask+0x1614>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800393a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800393e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003942:	edc7 7a01 	vstr	s15, [r7, #4]
 8003946:	793b      	ldrb	r3, [r7, #4]
 8003948:	b2da      	uxtb	r2, r3
 800394a:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 800394e:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RDP_GCODE_PROCESS, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003950:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003954:	6899      	ldr	r1, [r3, #8]
 8003956:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 800395a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800395e:	f103 0308 	add.w	r3, r3, #8
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4413      	add	r3, r2
 8003966:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	2301      	movs	r3, #1
 800396e:	200b      	movs	r0, #11
 8003970:	f7fe fcbc 	bl	80022ec <commandRespond1>
 8003974:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
				  total_respond_length += respond_lenght;
 8003978:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800397c:	f103 0308 	add.w	r3, r3, #8
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8003986:	4413      	add	r3, r2
 8003988:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800398c:	f102 0208 	add.w	r2, r2, #8
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	e02c      	b.n	80039ee <StartDefaultTask+0x13a6>
			  }else{
				  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003994:	2303      	movs	r3, #3
 8003996:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800399a:	f102 0205 	add.w	r2, r2, #5
 800399e:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = status;
 80039a0:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 80039a4:	f897 2fce 	ldrb.w	r2, [r7, #4046]	; 0xfce
 80039a8:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80039aa:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80039ae:	6899      	ldr	r1, [r3, #8]
 80039b0:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 80039b4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80039b8:	f103 0308 	add.w	r3, r3, #8
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4413      	add	r3, r2
 80039c0:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	2301      	movs	r3, #1
 80039c8:	2007      	movs	r0, #7
 80039ca:	f7fe fc8f 	bl	80022ec <commandRespond1>
 80039ce:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
				  total_respond_length += respond_lenght;
 80039d2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80039d6:	f103 0308 	add.w	r3, r3, #8
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80039e0:	4413      	add	r3, r2
 80039e2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80039e6:	f102 0208 	add.w	r2, r2, #8
 80039ea:	6013      	str	r3, [r2, #0]
				  break;
 80039ec:	e0b2      	b.n	8003b54 <StartDefaultTask+0x150c>
			  }
		  }
		  //break;

		  case SCARA_DUTY_STATE_FLOW:{
			  run_time += T_SAMPLING;
 80039ee:	a396      	add	r3, pc, #600	; (adr r3, 8003c48 <StartDefaultTask+0x1600>)
 80039f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f4:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80039f8:	f101 0110 	add.w	r1, r1, #16
 80039fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a00:	f7fc fc44 	bl	800028c <__adddf3>
 8003a04:	4603      	mov	r3, r0
 8003a06:	460c      	mov	r4, r1
 8003a08:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003a0c:	f102 0210 	add.w	r2, r2, #16
 8003a10:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8003a14:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003a18:	f103 0310 	add.w	r3, r3, #16
 8003a1c:	ed93 0b00 	vldr	d0, [r3]
 8003a20:	f006 fe98 	bl	800a754 <scaraIsFinish>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d038      	beq.n	8003a9c <StartDefaultTask+0x1454>
				if(run_point >= total_num_of_point){
 8003a2a:	4b8c      	ldr	r3, [pc, #560]	; (8003c5c <StartDefaultTask+0x1614>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f8d7 2ffc 	ldr.w	r2, [r7, #4092]	; 0xffc
 8003a32:	429a      	cmp	r2, r3
 8003a34:	db0c      	blt.n	8003a50 <StartDefaultTask+0x1408>
					current_duty_state = SCARA_DUTY_STATE_READY;
 8003a36:	2300      	movs	r3, #0
 8003a38:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003a3c:	f102 0205 	add.w	r2, r2, #5
 8003a40:	7013      	strb	r3, [r2, #0]
					lowlayer_readTruePosition(&positionNext);
 8003a42:	4887      	ldr	r0, [pc, #540]	; (8003c60 <StartDefaultTask+0x1618>)
 8003a44:	f002 f9e8 	bl	8005e18 <lowlayer_readTruePosition>
				    kinematicForward(&positionNext);
 8003a48:	4885      	ldr	r0, [pc, #532]	; (8003c60 <StartDefaultTask+0x1618>)
 8003a4a:	f001 faa1 	bl	8004f90 <kinematicForward>
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 8003a4e:	e081      	b.n	8003b54 <StartDefaultTask+0x150c>
					accumulate_update(Gcode_Cor[run_point]);
 8003a50:	4984      	ldr	r1, [pc, #528]	; (8003c64 <StartDefaultTask+0x161c>)
 8003a52:	f8d7 2ffc 	ldr.w	r2, [r7, #4092]	; 0xffc
 8003a56:	4613      	mov	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	1a9b      	subs	r3, r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	466c      	mov	r4, sp
 8003a62:	f103 0210 	add.w	r2, r3, #16
 8003a66:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003a6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a6e:	f001 f99f 	bl	8004db0 <accumulate_update>
					current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003a72:	2304      	movs	r3, #4
 8003a74:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003a78:	f102 0205 	add.w	r2, r2, #5
 8003a7c:	7013      	strb	r3, [r2, #0]
					run_point++;
 8003a7e:	f8d7 3ffc 	ldr.w	r3, [r7, #4092]	; 0xffc
 8003a82:	3301      	adds	r3, #1
 8003a84:	f8c7 3ffc 	str.w	r3, [r7, #4092]	; 0xffc
					memcpy(&positionNext, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 8003a88:	4a75      	ldr	r2, [pc, #468]	; (8003c60 <StartDefaultTask+0x1618>)
 8003a8a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003a8e:	4610      	mov	r0, r2
 8003a90:	3328      	adds	r3, #40	; 0x28
 8003a92:	22c0      	movs	r2, #192	; 0xc0
 8003a94:	4619      	mov	r1, r3
 8003a96:	f012 f961 	bl	8015d5c <memcpy>
		  break;
 8003a9a:	e05b      	b.n	8003b54 <StartDefaultTask+0x150c>
				SCARA_StatusTypeDef status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8003a9c:	4c72      	ldr	r4, [pc, #456]	; (8003c68 <StartDefaultTask+0x1620>)
 8003a9e:	4668      	mov	r0, sp
 8003aa0:	f104 0308 	add.w	r3, r4, #8
 8003aa4:	22b8      	movs	r2, #184	; 0xb8
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	f012 f958 	bl	8015d5c <memcpy>
 8003aac:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003ab0:	486b      	ldr	r0, [pc, #428]	; (8003c60 <StartDefaultTask+0x1618>)
 8003ab2:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003ab6:	f101 0110 	add.w	r1, r1, #16
 8003aba:	ed91 0b00 	vldr	d0, [r1]
 8003abe:	f005 ffaf 	bl	8009a20 <scaraFlowDuty>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	f887 3fcd 	strb.w	r3, [r7, #4045]	; 0xfcd
				if ( SCARA_STATUS_OK == status) {
 8003ac8:	f897 3fcd 	ldrb.w	r3, [r7, #4045]	; 0xfcd
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d113      	bne.n	8003af8 <StartDefaultTask+0x14b0>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003ad0:	4c65      	ldr	r4, [pc, #404]	; (8003c68 <StartDefaultTask+0x1620>)
 8003ad2:	4a63      	ldr	r2, [pc, #396]	; (8003c60 <StartDefaultTask+0x1618>)
 8003ad4:	ab2c      	add	r3, sp, #176	; 0xb0
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	22c0      	movs	r2, #192	; 0xc0
 8003ada:	4618      	mov	r0, r3
 8003adc:	f012 f93e 	bl	8015d5c <memcpy>
 8003ae0:	4668      	mov	r0, sp
 8003ae2:	f104 0310 	add.w	r3, r4, #16
 8003ae6:	22b0      	movs	r2, #176	; 0xb0
 8003ae8:	4619      	mov	r1, r3
 8003aea:	f012 f937 	bl	8015d5c <memcpy>
 8003aee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003af2:	f002 fb21 	bl	8006138 <lowlayer_computeAndWritePulse>
		  break;
 8003af6:	e02d      	b.n	8003b54 <StartDefaultTask+0x150c>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003af8:	2303      	movs	r3, #3
 8003afa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003afe:	f102 0205 	add.w	r2, r2, #5
 8003b02:	7013      	strb	r3, [r2, #0]
					  detail_array[0] = status;
 8003b04:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003b08:	f897 2fcd 	ldrb.w	r2, [r7, #4045]	; 0xfcd
 8003b0c:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003b0e:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003b12:	6899      	ldr	r1, [r3, #8]
 8003b14:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8003b18:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003b1c:	f103 0308 	add.w	r3, r3, #8
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4413      	add	r3, r2
 8003b24:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	2007      	movs	r0, #7
 8003b2e:	f7fe fbdd 	bl	80022ec <commandRespond1>
 8003b32:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
					  total_respond_length += respond_lenght;
 8003b36:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003b3a:	f103 0308 	add.w	r3, r3, #8
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8003b44:	4413      	add	r3, r2
 8003b46:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003b4a:	f102 0208 	add.w	r2, r2, #8
 8003b4e:	6013      	str	r3, [r2, #0]
		  break;
 8003b50:	e000      	b.n	8003b54 <StartDefaultTask+0x150c>

		  }
		  break;
		  
		  default:
			  break;
 8003b52:	bf00      	nop
		  }
	  }

	  break;
 8003b54:	e3d9      	b.n	800430a <StartDefaultTask+0x1cc2>
	  case SCARA_METHOD_TEST:
	  {
		  lowlayer_writePulse(test_value[0], test_value[1], test_value[2], test_value[3]);
 8003b56:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8003b5a:	f993 0000 	ldrsb.w	r0, [r3]
 8003b5e:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8003b62:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8003b66:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8003b6a:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8003b6e:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8003b72:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003b76:	f002 fc83 	bl	8006480 <lowlayer_writePulse>
	  }
	  break;
 8003b7a:	e3c6      	b.n	800430a <StartDefaultTask+0x1cc2>


	  case SCARA_METHOD_PICK_AND_PLACE:
	  {
		  switch(current_duty_state) {
 8003b7c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003b80:	f103 0305 	add.w	r3, r3, #5
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	f200 83bd 	bhi.w	8004308 <StartDefaultTask+0x1cc0>
 8003b8e:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <StartDefaultTask+0x154c>)
 8003b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b94:	08003ba5 	.word	0x08003ba5
 8003b98:	0800415d 	.word	0x0800415d
 8003b9c:	080042db 	.word	0x080042db
 8003ba0:	08003bf5 	.word	0x08003bf5
		  case SCARA_DUTY_STATE_INIT:{
			  //Object = calloc(8, sizeof(SCARA_Pick_And_Place_Package));
			  HAL_TIM_Base_Start(&htim2);
 8003ba4:	4831      	ldr	r0, [pc, #196]	; (8003c6c <StartDefaultTask+0x1624>)
 8003ba6:	f00a f9f8 	bl	800df9a <HAL_TIM_Base_Start>
			  object_tail_pointer = 0;
 8003baa:	2300      	movs	r3, #0
 8003bac:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003bb0:	f102 020e 	add.w	r2, r2, #14
 8003bb4:	7013      	strb	r3, [r2, #0]
			  object_head_pointer = 0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003bbc:	f102 020d 	add.w	r2, r2, #13
 8003bc0:	7013      	strb	r3, [r2, #0]
			  operation_state = SCARA_MOVE_TO_TARGET;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003bc8:	f102 020f 	add.w	r2, r2, #15
 8003bcc:	7013      	strb	r3, [r2, #0]
			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003bce:	2304      	movs	r3, #4
 8003bd0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003bd4:	f102 0205 	add.w	r2, r2, #5
 8003bd8:	7013      	strb	r3, [r2, #0]
			  duty_cmd.robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8003bda:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003bde:	2204      	movs	r2, #4
 8003be0:	705a      	strb	r2, [r3, #1]
			  duty_cmd.path_type = DUTY_PATH_LINE;
 8003be2:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003be6:	2200      	movs	r2, #0
 8003be8:	739a      	strb	r2, [r3, #14]
			  duty_cmd.space_type = DUTY_SPACE_TASK;
 8003bea:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003bee:	2200      	movs	r2, #0
 8003bf0:	735a      	strb	r2, [r3, #13]
		  }
		  break;
 8003bf2:	e386      	b.n	8004302 <StartDefaultTask+0x1cba>

		  case SCARA_DUTY_STATE_OPERATION:{
			  if(object_tail_pointer != object_head_pointer){
 8003bf4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003bf8:	f103 030e 	add.w	r3, r3, #14
 8003bfc:	781a      	ldrb	r2, [r3, #0]
 8003bfe:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003c02:	f103 030d 	add.w	r3, r3, #13
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	f000 8377 	beq.w	80042fc <StartDefaultTask+0x1cb4>
				  switch(operation_state){
 8003c0e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003c12:	f103 030f 	add.w	r3, r3, #15
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	2b07      	cmp	r3, #7
 8003c1a:	f200 81d3 	bhi.w	8003fc4 <StartDefaultTask+0x197c>
 8003c1e:	a201      	add	r2, pc, #4	; (adr r2, 8003c24 <StartDefaultTask+0x15dc>)
 8003c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c24:	08003c75 	.word	0x08003c75
 8003c28:	08003d79 	.word	0x08003d79
 8003c2c:	08003dad 	.word	0x08003dad
 8003c30:	08003dc3 	.word	0x08003dc3
 8003c34:	08003df7 	.word	0x08003df7
 8003c38:	08003f1f 	.word	0x08003f1f
 8003c3c:	08003f53 	.word	0x08003f53
 8003c40:	08003f91 	.word	0x08003f91
 8003c44:	f3af 8000 	nop.w
 8003c48:	40000000 	.word	0x40000000
 8003c4c:	3f847ae1 	.word	0x3f847ae1
 8003c50:	200065c0 	.word	0x200065c0
 8003c54:	2000dd10 	.word	0x2000dd10
 8003c58:	42c80000 	.word	0x42c80000
 8003c5c:	20006f88 	.word	0x20006f88
 8003c60:	2000ec30 	.word	0x2000ec30
 8003c64:	20006f98 	.word	0x20006f98
 8003c68:	2000eab0 	.word	0x2000eab0
 8003c6c:	2000ed30 	.word	0x2000ed30
 8003c70:	399c09bf 	.word	0x399c09bf
					  case SCARA_MOVE_TO_TARGET:{
						  double wait_time = TIMER_SCALE*((uint16_t)(TIM2->CNT - Object[object_tail_pointer].timer_value)) + MOVE_TIME + PUT_DOWN_TIME_ON_OBJECT;
 8003c74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003c80:	f103 030e 	add.w	r3, r3, #14
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003c8a:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8003c8e:	fb00 f303 	mul.w	r3, r0, r3
 8003c92:	440b      	add	r3, r1
 8003c94:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	ee07 3a90 	vmov	s15, r3
 8003ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ca6:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 8003c70 <StartDefaultTask+0x1628>
 8003caa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cae:	ee17 0a90 	vmov	r0, s15
 8003cb2:	f7fc fc49 	bl	8000548 <__aeabi_f2d>
 8003cb6:	4bac      	ldr	r3, [pc, #688]	; (8003f68 <StartDefaultTask+0x1920>)
 8003cb8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	4623      	mov	r3, r4
 8003cc0:	f7fc fae4 	bl	800028c <__adddf3>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	460c      	mov	r4, r1
 8003cc8:	4618      	mov	r0, r3
 8003cca:	4621      	mov	r1, r4
 8003ccc:	4ba7      	ldr	r3, [pc, #668]	; (8003f6c <StartDefaultTask+0x1924>)
 8003cce:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	4623      	mov	r3, r4
 8003cd6:	f7fc fad9 	bl	800028c <__adddf3>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	460c      	mov	r4, r1
 8003cde:	f507 627d 	add.w	r2, r7, #4048	; 0xfd0
 8003ce2:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.y -= wait_time*conveyor_speed;
 8003ce6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003cea:	f103 030e 	add.w	r3, r3, #14
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003cf4:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003cf8:	fb01 f303 	mul.w	r3, r1, r3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3350      	adds	r3, #80	; 0x50
 8003d00:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003d04:	4b9a      	ldr	r3, [pc, #616]	; (8003f70 <StartDefaultTask+0x1928>)
 8003d06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d0a:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8003d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d12:	f7fc fc71 	bl	80005f8 <__aeabi_dmul>
 8003d16:	4602      	mov	r2, r0
 8003d18:	460b      	mov	r3, r1
 8003d1a:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003d1e:	f101 010e 	add.w	r1, r1, #14
 8003d22:	780e      	ldrb	r6, [r1, #0]
 8003d24:	4620      	mov	r0, r4
 8003d26:	4629      	mov	r1, r5
 8003d28:	f7fc faae 	bl	8000288 <__aeabi_dsub>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	460c      	mov	r4, r1
 8003d30:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003d34:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8003d38:	fb02 f206 	mul.w	r2, r2, r6
 8003d3c:	440a      	add	r2, r1
 8003d3e:	3250      	adds	r2, #80	; 0x50
 8003d40:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003d44:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003d48:	f103 030e 	add.w	r3, r3, #14
 8003d4c:	781a      	ldrb	r2, [r3, #0]
 8003d4e:	4b89      	ldr	r3, [pc, #548]	; (8003f74 <StartDefaultTask+0x192c>)
 8003d50:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d54:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003d58:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8003d5c:	fb00 f202 	mul.w	r2, r0, r2
 8003d60:	440a      	add	r2, r1
 8003d62:	3258      	adds	r2, #88	; 0x58
 8003d64:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = MOVE_TIME;
 8003d68:	4b7f      	ldr	r3, [pc, #508]	; (8003f68 <StartDefaultTask+0x1920>)
 8003d6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d6e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003d72:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8003d76:	e125      	b.n	8003fc4 <StartDefaultTask+0x197c>

					  case SCARA_MOVE_DOWN_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_OBJECT;
 8003d78:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003d7c:	f103 030e 	add.w	r3, r3, #14
 8003d80:	781a      	ldrb	r2, [r3, #0]
 8003d82:	4b7d      	ldr	r3, [pc, #500]	; (8003f78 <StartDefaultTask+0x1930>)
 8003d84:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d88:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003d8c:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8003d90:	fb00 f202 	mul.w	r2, r0, r2
 8003d94:	440a      	add	r2, r1
 8003d96:	3258      	adds	r2, #88	; 0x58
 8003d98:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = PUT_DOWN_TIME_ON_OBJECT;
 8003d9c:	4b73      	ldr	r3, [pc, #460]	; (8003f6c <StartDefaultTask+0x1924>)
 8003d9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003da2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003da6:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8003daa:	e10b      	b.n	8003fc4 <StartDefaultTask+0x197c>
					  case SCARA_ATTACH:{
						  state_time = ATTACH_TIME;
 8003dac:	4b73      	ldr	r3, [pc, #460]	; (8003f7c <StartDefaultTask+0x1934>)
 8003dae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003db2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003db6:	e9c2 3400 	strd	r3, r4, [r2]
						  scaraSetOutput(1);
 8003dba:	2001      	movs	r0, #1
 8003dbc:	f006 fc38 	bl	800a630 <scaraSetOutput>
					  }
					  break;
 8003dc0:	e100      	b.n	8003fc4 <StartDefaultTask+0x197c>
					  case SCARA_MOVE_UP_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003dc2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003dc6:	f103 030e 	add.w	r3, r3, #14
 8003dca:	781a      	ldrb	r2, [r3, #0]
 8003dcc:	4b69      	ldr	r3, [pc, #420]	; (8003f74 <StartDefaultTask+0x192c>)
 8003dce:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003dd2:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003dd6:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8003dda:	fb00 f202 	mul.w	r2, r0, r2
 8003dde:	440a      	add	r2, r1
 8003de0:	3258      	adds	r2, #88	; 0x58
 8003de2:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = PICK_UP_TIME_ON_OBJECT;
 8003de6:	4b66      	ldr	r3, [pc, #408]	; (8003f80 <StartDefaultTask+0x1938>)
 8003de8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003dec:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003df0:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8003df4:	e0e6      	b.n	8003fc4 <StartDefaultTask+0x197c>
					  case SCARA_MOVE_TO_SLOT :{

						  Object[object_tail_pointer].object_position.x = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].posx;
 8003df6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003dfa:	f103 030e 	add.w	r3, r3, #14
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003e04:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003e08:	fb01 f303 	mul.w	r3, r1, r3
 8003e0c:	4413      	add	r3, r2
 8003e0e:	33b8      	adds	r3, #184	; 0xb8
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	4619      	mov	r1, r3
 8003e14:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003e18:	f103 030e 	add.w	r3, r3, #14
 8003e1c:	7818      	ldrb	r0, [r3, #0]
 8003e1e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003e22:	3a10      	subs	r2, #16
 8003e24:	460b      	mov	r3, r1
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	440b      	add	r3, r1
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e32:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003e36:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8003e3a:	fb02 f200 	mul.w	r2, r2, r0
 8003e3e:	440a      	add	r2, r1
 8003e40:	3248      	adds	r2, #72	; 0x48
 8003e42:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.y = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].posy;
 8003e46:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003e4a:	f103 030e 	add.w	r3, r3, #14
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003e54:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003e58:	fb01 f303 	mul.w	r3, r1, r3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	33b8      	adds	r3, #184	; 0xb8
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	4619      	mov	r1, r3
 8003e64:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003e68:	f103 030e 	add.w	r3, r3, #14
 8003e6c:	7818      	ldrb	r0, [r3, #0]
 8003e6e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003e72:	3a10      	subs	r2, #16
 8003e74:	460b      	mov	r3, r1
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	440b      	add	r3, r1
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	3308      	adds	r3, #8
 8003e80:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e84:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003e88:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8003e8c:	fb02 f200 	mul.w	r2, r2, r0
 8003e90:	440a      	add	r2, r1
 8003e92:	3250      	adds	r2, #80	; 0x50
 8003e94:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.roll = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].roll;
 8003e98:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003e9c:	f103 030e 	add.w	r3, r3, #14
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003ea6:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003eaa:	fb01 f303 	mul.w	r3, r1, r3
 8003eae:	4413      	add	r3, r2
 8003eb0:	33b8      	adds	r3, #184	; 0xb8
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003eba:	f103 030e 	add.w	r3, r3, #14
 8003ebe:	7818      	ldrb	r0, [r3, #0]
 8003ec0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003ec4:	3a10      	subs	r2, #16
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	440b      	add	r3, r1
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	4413      	add	r3, r2
 8003ed0:	3310      	adds	r3, #16
 8003ed2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ed6:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003eda:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8003ede:	fb02 f200 	mul.w	r2, r2, r0
 8003ee2:	440a      	add	r2, r1
 8003ee4:	3260      	adds	r2, #96	; 0x60
 8003ee6:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003eea:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003eee:	f103 030e 	add.w	r3, r3, #14
 8003ef2:	781a      	ldrb	r2, [r3, #0]
 8003ef4:	4b1f      	ldr	r3, [pc, #124]	; (8003f74 <StartDefaultTask+0x192c>)
 8003ef6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003efa:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003efe:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8003f02:	fb00 f202 	mul.w	r2, r0, r2
 8003f06:	440a      	add	r2, r1
 8003f08:	3258      	adds	r2, #88	; 0x58
 8003f0a:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = MOVE_TIME;
 8003f0e:	4b16      	ldr	r3, [pc, #88]	; (8003f68 <StartDefaultTask+0x1920>)
 8003f10:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f14:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003f18:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8003f1c:	e052      	b.n	8003fc4 <StartDefaultTask+0x197c>
					  case SCARA_MOVE_DOWN_ON_SLOT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_SLOT;
 8003f1e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003f22:	f103 030e 	add.w	r3, r3, #14
 8003f26:	781a      	ldrb	r2, [r3, #0]
 8003f28:	4b16      	ldr	r3, [pc, #88]	; (8003f84 <StartDefaultTask+0x193c>)
 8003f2a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f2e:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003f32:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8003f36:	fb00 f202 	mul.w	r2, r0, r2
 8003f3a:	440a      	add	r2, r1
 8003f3c:	3258      	adds	r2, #88	; 0x58
 8003f3e:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = PUT_DOWN_TIME_ON_SLOT;
 8003f42:	4b11      	ldr	r3, [pc, #68]	; (8003f88 <StartDefaultTask+0x1940>)
 8003f44:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f48:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003f4c:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8003f50:	e038      	b.n	8003fc4 <StartDefaultTask+0x197c>
					  case SCARA_RELEASE:{
						  state_time = DETACH_TIME;
 8003f52:	4b0e      	ldr	r3, [pc, #56]	; (8003f8c <StartDefaultTask+0x1944>)
 8003f54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f58:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003f5c:	e9c2 3400 	strd	r3, r4, [r2]
						  scaraSetOutput(0);
 8003f60:	2000      	movs	r0, #0
 8003f62:	f006 fb65 	bl	800a630 <scaraSetOutput>
					  }
					  break;
 8003f66:	e02d      	b.n	8003fc4 <StartDefaultTask+0x197c>
 8003f68:	20000028 	.word	0x20000028
 8003f6c:	20000010 	.word	0x20000010
 8003f70:	20000058 	.word	0x20000058
 8003f74:	20000040 	.word	0x20000040
 8003f78:	20000048 	.word	0x20000048
 8003f7c:	20000030 	.word	0x20000030
 8003f80:	20000018 	.word	0x20000018
 8003f84:	20000050 	.word	0x20000050
 8003f88:	20000008 	.word	0x20000008
 8003f8c:	20000038 	.word	0x20000038
					  case SCARA_MOVE_UP_ON_SLOT:{
						  state_time = PICK_UP_TIME_ON_SLOT;
 8003f90:	4bd5      	ldr	r3, [pc, #852]	; (80042e8 <StartDefaultTask+0x1ca0>)
 8003f92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f96:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003f9a:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003f9e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003fa2:	f103 030e 	add.w	r3, r3, #14
 8003fa6:	781a      	ldrb	r2, [r3, #0]
 8003fa8:	4bd0      	ldr	r3, [pc, #832]	; (80042ec <StartDefaultTask+0x1ca4>)
 8003faa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003fae:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003fb2:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8003fb6:	fb00 f202 	mul.w	r2, r0, r2
 8003fba:	440a      	add	r2, r1
 8003fbc:	3258      	adds	r2, #88	; 0x58
 8003fbe:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8003fc2:	bf00      	nop
				  }
				  memcpy(&duty_cmd.target_point, &Object[object_tail_pointer].object_position, sizeof(SCARA_PositionTypeDef));
 8003fc4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003fc8:	f103 030e 	add.w	r3, r3, #14
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003fd2:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003fd6:	fb01 f303 	mul.w	r3, r1, r3
 8003fda:	18d1      	adds	r1, r2, r3
 8003fdc:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003fe0:	3328      	adds	r3, #40	; 0x28
 8003fe2:	22c0      	movs	r2, #192	; 0xc0
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f011 feb9 	bl	8015d5c <memcpy>
				  duty_cmd.time_total = state_time;
 8003fea:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8003fee:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003ff2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ff6:	e9c2 3408 	strd	r3, r4, [r2, #32]
				  SCARA_StatusTypeDef status1;
				  duty_cmd.v_factor = 0;
 8003ffa:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8003ffe:	f04f 0300 	mov.w	r3, #0
 8004002:	f04f 0400 	mov.w	r4, #0
 8004006:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
				  if(operation_state == SCARA_ATTACH || operation_state == SCARA_RELEASE){
 800400a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800400e:	f103 030f 	add.w	r3, r3, #15
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b02      	cmp	r3, #2
 8004016:	d006      	beq.n	8004026 <StartDefaultTask+0x19de>
 8004018:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800401c:	f103 030f 	add.w	r3, r3, #15
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	2b06      	cmp	r3, #6
 8004024:	d103      	bne.n	800402e <StartDefaultTask+0x19e6>
					  status1 = SCARA_STATUS_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	f887 3ffb 	strb.w	r3, [r7, #4091]	; 0xffb
 800402c:	e03d      	b.n	80040aa <StartDefaultTask+0x1a62>
				  }else{
					  if(operation_state == SCARA_MOVE_DOWN_ON_OBJECT || operation_state == SCARA_MOVE_DOWN_ON_SLOT || operation_state == SCARA_MOVE_UP_ON_OBJECT || operation_state == SCARA_MOVE_UP_ON_SLOT){
 800402e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004032:	f103 030f 	add.w	r3, r3, #15
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d014      	beq.n	8004066 <StartDefaultTask+0x1a1e>
 800403c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004040:	f103 030f 	add.w	r3, r3, #15
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b05      	cmp	r3, #5
 8004048:	d00d      	beq.n	8004066 <StartDefaultTask+0x1a1e>
 800404a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800404e:	f103 030f 	add.w	r3, r3, #15
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2b03      	cmp	r3, #3
 8004056:	d006      	beq.n	8004066 <StartDefaultTask+0x1a1e>
 8004058:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800405c:	f103 030f 	add.w	r3, r3, #15
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	2b07      	cmp	r3, #7
 8004064:	d108      	bne.n	8004078 <StartDefaultTask+0x1a30>
						  duty_cmd.trajec_type = DUTY_TRAJECTORY_LINEAR;
 8004066:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800406a:	2202      	movs	r2, #2
 800406c:	741a      	strb	r2, [r3, #16]
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QT;
 800406e:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8004072:	2203      	movs	r2, #3
 8004074:	745a      	strb	r2, [r3, #17]
 8004076:	e007      	b.n	8004088 <StartDefaultTask+0x1a40>
					  }else{
						  duty_cmd.trajec_type = DUTY_TRAJECTORY_SCURVE;
 8004078:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800407c:	2201      	movs	r2, #1
 800407e:	741a      	strb	r2, [r3, #16]
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 8004080:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8004084:	2201      	movs	r2, #1
 8004086:	745a      	strb	r2, [r3, #17]
					  }
					  status1 = scaraInitDuty(duty_cmd);
 8004088:	f607 54f8 	addw	r4, r7, #3576	; 0xdf8
 800408c:	4668      	mov	r0, sp
 800408e:	f104 0310 	add.w	r3, r4, #16
 8004092:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8004096:	4619      	mov	r1, r3
 8004098:	f011 fe60 	bl	8015d5c <memcpy>
 800409c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80040a0:	f002 fbde 	bl	8006860 <scaraInitDuty>
 80040a4:	4603      	mov	r3, r0
 80040a6:	f887 3ffb 	strb.w	r3, [r7, #4091]	; 0xffb
				  }
				  if ( SCARA_STATUS_OK == status1) {
 80040aa:	f897 3ffb 	ldrb.w	r3, [r7, #4091]	; 0xffb
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d110      	bne.n	80040d4 <StartDefaultTask+0x1a8c>
				  	current_duty_state = SCARA_DUTY_STATE_FLOW;
 80040b2:	2302      	movs	r3, #2
 80040b4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80040b8:	f102 0205 	add.w	r2, r2, #5
 80040bc:	7013      	strb	r3, [r2, #0]
				  	run_time = 0;
 80040be:	f04f 0300 	mov.w	r3, #0
 80040c2:	f04f 0400 	mov.w	r4, #0
 80040c6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80040ca:	f102 0210 	add.w	r2, r2, #16
 80040ce:	e9c2 3400 	strd	r3, r4, [r2]
 80040d2:	e043      	b.n	800415c <StartDefaultTask+0x1b14>
				  } else {
					object_tail_pointer = (object_tail_pointer+1)%8;
 80040d4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80040d8:	f103 030e 	add.w	r3, r3, #14
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	3301      	adds	r3, #1
 80040e0:	425a      	negs	r2, r3
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	f002 0207 	and.w	r2, r2, #7
 80040ea:	bf58      	it	pl
 80040ec:	4253      	negpl	r3, r2
 80040ee:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80040f2:	f102 020e 	add.w	r2, r2, #14
 80040f6:	7013      	strb	r3, [r2, #0]
					operation_state = SCARA_MOVE_TO_TARGET;
 80040f8:	2300      	movs	r3, #0
 80040fa:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80040fe:	f102 020f 	add.w	r2, r2, #15
 8004102:	7013      	strb	r3, [r2, #0]
					detail_array[0] = status1;
 8004104:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8004108:	f897 2ffb 	ldrb.w	r2, [r7, #4091]	; 0xffb
 800410c:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800410e:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8004112:	6899      	ldr	r1, [r3, #8]
 8004114:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8004118:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800411c:	f103 0308 	add.w	r3, r3, #8
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4413      	add	r3, r2
 8004124:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	2301      	movs	r3, #1
 800412c:	2007      	movs	r0, #7
 800412e:	f7fe f8dd 	bl	80022ec <commandRespond1>
 8004132:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
					total_respond_length += respond_lenght;
 8004136:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800413a:	f103 0308 	add.w	r3, r3, #8
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8004144:	4413      	add	r3, r2
 8004146:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800414a:	f102 0208 	add.w	r2, r2, #8
 800414e:	6013      	str	r3, [r2, #0]
					LOG_REPORT("INIT FAIL", __LINE__);
 8004150:	f240 3182 	movw	r1, #898	; 0x382
 8004154:	4866      	ldr	r0, [pc, #408]	; (80042f0 <StartDefaultTask+0x1ca8>)
 8004156:	f7fe f931 	bl	80023bc <LOG_REPORT>
					break;
 800415a:	e0d2      	b.n	8004302 <StartDefaultTask+0x1cba>


		  case SCARA_DUTY_STATE_FLOW:{
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 800415c:	a360      	add	r3, pc, #384	; (adr r3, 80042e0 <StartDefaultTask+0x1c98>)
 800415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004162:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8004166:	f101 0110 	add.w	r1, r1, #16
 800416a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800416e:	f7fc f88d 	bl	800028c <__adddf3>
 8004172:	4603      	mov	r3, r0
 8004174:	460c      	mov	r4, r1
 8004176:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800417a:	f102 0210 	add.w	r2, r2, #16
 800417e:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8004182:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004186:	f103 0310 	add.w	r3, r3, #16
 800418a:	ed93 0b00 	vldr	d0, [r3]
 800418e:	f006 fae1 	bl	800a754 <scaraIsFinish>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d037      	beq.n	8004208 <StartDefaultTask+0x1bc0>
				current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8004198:	2304      	movs	r3, #4
 800419a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800419e:	f102 0205 	add.w	r2, r2, #5
 80041a2:	7013      	strb	r3, [r2, #0]
				if(operation_state == SCARA_MOVE_UP_ON_SLOT){
 80041a4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80041a8:	f103 030f 	add.w	r3, r3, #15
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b07      	cmp	r3, #7
 80041b0:	d118      	bne.n	80041e4 <StartDefaultTask+0x1b9c>
					operation_state = SCARA_MOVE_TO_TARGET;
 80041b2:	2300      	movs	r3, #0
 80041b4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80041b8:	f102 020f 	add.w	r2, r2, #15
 80041bc:	7013      	strb	r3, [r2, #0]
					object_tail_pointer = (object_tail_pointer+1)%8;
 80041be:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80041c2:	f103 030e 	add.w	r3, r3, #14
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	3301      	adds	r3, #1
 80041ca:	425a      	negs	r2, r3
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	f002 0207 	and.w	r2, r2, #7
 80041d4:	bf58      	it	pl
 80041d6:	4253      	negpl	r3, r2
 80041d8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80041dc:	f102 020e 	add.w	r2, r2, #14
 80041e0:	7013      	strb	r3, [r2, #0]
 80041e2:	e00a      	b.n	80041fa <StartDefaultTask+0x1bb2>
				}else{
					operation_state += 1; //next state
 80041e4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80041e8:	f103 030f 	add.w	r3, r3, #15
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	3301      	adds	r3, #1
 80041f0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80041f4:	f102 020f 	add.w	r2, r2, #15
 80041f8:	7013      	strb	r3, [r2, #0]
				}
				lowlayer_readTruePosition(&positionNext);
 80041fa:	483e      	ldr	r0, [pc, #248]	; (80042f4 <StartDefaultTask+0x1cac>)
 80041fc:	f001 fe0c 	bl	8005e18 <lowlayer_readTruePosition>
				kinematicForward(&positionNext);
 8004200:	483c      	ldr	r0, [pc, #240]	; (80042f4 <StartDefaultTask+0x1cac>)
 8004202:	f000 fec5 	bl	8004f90 <kinematicForward>
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 8004206:	e07b      	b.n	8004300 <StartDefaultTask+0x1cb8>
			  } else if(operation_state != SCARA_ATTACH && operation_state != SCARA_RELEASE){
 8004208:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800420c:	f103 030f 	add.w	r3, r3, #15
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b02      	cmp	r3, #2
 8004214:	d074      	beq.n	8004300 <StartDefaultTask+0x1cb8>
 8004216:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800421a:	f103 030f 	add.w	r3, r3, #15
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	2b06      	cmp	r3, #6
 8004222:	d06d      	beq.n	8004300 <StartDefaultTask+0x1cb8>
				status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8004224:	4c34      	ldr	r4, [pc, #208]	; (80042f8 <StartDefaultTask+0x1cb0>)
 8004226:	4668      	mov	r0, sp
 8004228:	f104 0308 	add.w	r3, r4, #8
 800422c:	22b8      	movs	r2, #184	; 0xb8
 800422e:	4619      	mov	r1, r3
 8004230:	f011 fd94 	bl	8015d5c <memcpy>
 8004234:	e894 000c 	ldmia.w	r4, {r2, r3}
 8004238:	482e      	ldr	r0, [pc, #184]	; (80042f4 <StartDefaultTask+0x1cac>)
 800423a:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800423e:	f101 0110 	add.w	r1, r1, #16
 8004242:	ed91 0b00 	vldr	d0, [r1]
 8004246:	f005 fbeb 	bl	8009a20 <scaraFlowDuty>
 800424a:	4603      	mov	r3, r0
 800424c:	f887 3fcf 	strb.w	r3, [r7, #4047]	; 0xfcf
				if ( SCARA_STATUS_OK == status) {
 8004250:	f897 3fcf 	ldrb.w	r3, [r7, #4047]	; 0xfcf
 8004254:	2b00      	cmp	r3, #0
 8004256:	d113      	bne.n	8004280 <StartDefaultTask+0x1c38>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8004258:	4c27      	ldr	r4, [pc, #156]	; (80042f8 <StartDefaultTask+0x1cb0>)
 800425a:	4a26      	ldr	r2, [pc, #152]	; (80042f4 <StartDefaultTask+0x1cac>)
 800425c:	ab2c      	add	r3, sp, #176	; 0xb0
 800425e:	4611      	mov	r1, r2
 8004260:	22c0      	movs	r2, #192	; 0xc0
 8004262:	4618      	mov	r0, r3
 8004264:	f011 fd7a 	bl	8015d5c <memcpy>
 8004268:	4668      	mov	r0, sp
 800426a:	f104 0310 	add.w	r3, r4, #16
 800426e:	22b0      	movs	r2, #176	; 0xb0
 8004270:	4619      	mov	r1, r3
 8004272:	f011 fd73 	bl	8015d5c <memcpy>
 8004276:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800427a:	f001 ff5d 	bl	8006138 <lowlayer_computeAndWritePulse>
		  break;
 800427e:	e03f      	b.n	8004300 <StartDefaultTask+0x1cb8>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8004280:	2303      	movs	r3, #3
 8004282:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004286:	f102 0205 	add.w	r2, r2, #5
 800428a:	7013      	strb	r3, [r2, #0]
					  detail_array[0] = status;
 800428c:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8004290:	f897 2fcf 	ldrb.w	r2, [r7, #4047]	; 0xfcf
 8004294:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8004296:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800429a:	6899      	ldr	r1, [r3, #8]
 800429c:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 80042a0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80042a4:	f103 0308 	add.w	r3, r3, #8
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4413      	add	r3, r2
 80042ac:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	2301      	movs	r3, #1
 80042b4:	2007      	movs	r0, #7
 80042b6:	f7fe f819 	bl	80022ec <commandRespond1>
 80042ba:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
					  total_respond_length += respond_lenght;
 80042be:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80042c2:	f103 0308 	add.w	r3, r3, #8
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80042cc:	4413      	add	r3, r2
 80042ce:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80042d2:	f102 0208 	add.w	r2, r2, #8
 80042d6:	6013      	str	r3, [r2, #0]
		  break;
 80042d8:	e012      	b.n	8004300 <StartDefaultTask+0x1cb8>

		  case SCARA_DUTY_STATE_FINISH:

			  //error
			  //free(Object);
		  break;
 80042da:	bf00      	nop
 80042dc:	e014      	b.n	8004308 <StartDefaultTask+0x1cc0>
 80042de:	bf00      	nop
 80042e0:	40000000 	.word	0x40000000
 80042e4:	3f847ae1 	.word	0x3f847ae1
 80042e8:	20000020 	.word	0x20000020
 80042ec:	20000040 	.word	0x20000040
 80042f0:	0801b36c 	.word	0x0801b36c
 80042f4:	2000ec30 	.word	0x2000ec30
 80042f8:	2000eab0 	.word	0x2000eab0
				  break;
 80042fc:	bf00      	nop
 80042fe:	e003      	b.n	8004308 <StartDefaultTask+0x1cc0>
		  break;
 8004300:	bf00      	nop
		  }
	  }
	  break;
 8004302:	e001      	b.n	8004308 <StartDefaultTask+0x1cc0>
	  break;
 8004304:	bf00      	nop
 8004306:	e000      	b.n	800430a <StartDefaultTask+0x1cc2>
	  break;
 8004308:	bf00      	nop

	  }
	  }

	  /* 4--- Send to PC Phase ---*/
	if(total_respond_length > 0){
 800430a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800430e:	f103 0308 	add.w	r3, r3, #8
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	dd0b      	ble.n	8004330 <StartDefaultTask+0x1ce8>
		CDC_Transmit_FS(respond, total_respond_length);
 8004318:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800431c:	f103 0308 	add.w	r3, r3, #8
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	b29a      	uxth	r2, r3
 8004324:	f607 53cc 	addw	r3, r7, #3532	; 0xdcc
 8004328:	4611      	mov	r1, r2
 800432a:	4618      	mov	r0, r3
 800432c:	f011 f89a 	bl	8015464 <CDC_Transmit_FS>
	}

	  /* 5--- Update ---*/
	  scaraSetMethod(current_method);
 8004330:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004334:	f103 0307 	add.w	r3, r3, #7
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f006 f9aa 	bl	800a694 <scaraSetMethod>
	  scaraSetMode(current_mode);
 8004340:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004344:	f103 0306 	add.w	r3, r3, #6
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f006 f992 	bl	800a674 <scaraSetMode>
	  scaraSetDutyState(current_duty_state);
 8004350:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004354:	f103 0305 	add.w	r3, r3, #5
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f006 f97a 	bl	800a654 <scaraSetDutyState>

    osDelay(1);
 8004360:	2001      	movs	r0, #1
 8004362:	f00e f99d 	bl	80126a0 <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 8004366:	f7fe b9ec 	b.w	8002742 <StartDefaultTask+0xfa>
 800436a:	bf00      	nop

0800436c <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 800436c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800436e:	f2ad 5dd4 	subw	sp, sp, #1492	; 0x5d4
 8004372:	af70      	add	r7, sp, #448	; 0x1c0
 8004374:	1d3b      	adds	r3, r7, #4
 8004376:	6018      	str	r0, [r3, #0]
	int32_t				respond_lenght;
	//int32_t				message_lenght;
	int32_t 			detail_length;

	// Default value
	duty_cmd.key_speed = 1;
 8004378:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800437c:	2201      	movs	r2, #1
 800437e:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 8004380:	4964      	ldr	r1, [pc, #400]	; (8004514 <Start_USB_RX_Task+0x1a8>)
 8004382:	4865      	ldr	r0, [pc, #404]	; (8004518 <Start_USB_RX_Task+0x1ac>)
 8004384:	f001 faad 	bl	80058e2 <ringBuff_DistanceOf>
 8004388:	f8c7 0408 	str.w	r0, [r7, #1032]	; 0x408
		  if (distance != -1) {
 800438c:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004394:	d0f4      	beq.n	8004380 <Start_USB_RX_Task+0x14>
 8004396:	466b      	mov	r3, sp
 8004398:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 800439a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800439e:	1c58      	adds	r0, r3, #1
 80043a0:	1e43      	subs	r3, r0, #1
 80043a2:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80043a6:	4603      	mov	r3, r0
 80043a8:	4619      	mov	r1, r3
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	f04f 0400 	mov.w	r4, #0
 80043b6:	00d4      	lsls	r4, r2, #3
 80043b8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80043bc:	00cb      	lsls	r3, r1, #3
 80043be:	4603      	mov	r3, r0
 80043c0:	4619      	mov	r1, r3
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	f04f 0300 	mov.w	r3, #0
 80043ca:	f04f 0400 	mov.w	r4, #0
 80043ce:	00d4      	lsls	r4, r2, #3
 80043d0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80043d4:	00cb      	lsls	r3, r1, #3
 80043d6:	4603      	mov	r3, r0
 80043d8:	3307      	adds	r3, #7
 80043da:	08db      	lsrs	r3, r3, #3
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	ebad 0d03 	sub.w	sp, sp, r3
 80043e2:	ab70      	add	r3, sp, #448	; 0x1c0
 80043e4:	3300      	adds	r3, #0
 80043e6:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 80043ea:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 80043ee:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80043f2:	3301      	adds	r3, #1
 80043f4:	461a      	mov	r2, r3
 80043f6:	4848      	ldr	r0, [pc, #288]	; (8004518 <Start_USB_RX_Task+0x1ac>)
 80043f8:	f001 fa52 	bl	80058a0 <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1, data_packet);
 80043fc:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
 8004400:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8004404:	3301      	adds	r3, #1
 8004406:	f107 020c 	add.w	r2, r7, #12
 800440a:	4619      	mov	r1, r3
 800440c:	f7fe f81c 	bl	8002448 <unPackPayload>
 8004410:	f8c7 03fc 	str.w	r0, [r7, #1020]	; 0x3fc

			  if( -1 == ret) {
 8004414:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8004418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441c:	d077      	beq.n	800450e <Start_USB_RX_Task+0x1a2>
				  //LOG_REPORT("UNPACK FAIL", __LINE__);
			  } else {
				  //LOG_REPORT((char*) temp, __LINE__);
				  cmd_type = packetRead(data_packet, ret, &id_command, &duty_cmd);
 800441e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8004422:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 8004426:	f107 000c 	add.w	r0, r7, #12
 800442a:	f8d7 13fc 	ldr.w	r1, [r7, #1020]	; 0x3fc
 800442e:	f7fc fdab 	bl	8000f88 <packetRead>
 8004432:	4603      	mov	r3, r0
 8004434:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb
				  memset(detail, 0, sizeof(detail));
 8004438:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800443c:	2287      	movs	r2, #135	; 0x87
 800443e:	2100      	movs	r1, #0
 8004440:	4618      	mov	r0, r3
 8004442:	f011 fcaf 	bl	8015da4 <memset>
				  detail_length = 0;
 8004446:	f107 0308 	add.w	r3, r7, #8
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
				  rpd_type = commandReply(cmd_type, duty_cmd, detail, &detail_length);
 800444e:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8004452:	f897 53fb 	ldrb.w	r5, [r7, #1019]	; 0x3fb
 8004456:	f107 0308 	add.w	r3, r7, #8
 800445a:	936f      	str	r3, [sp, #444]	; 0x1bc
 800445c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004460:	936e      	str	r3, [sp, #440]	; 0x1b8
 8004462:	4668      	mov	r0, sp
 8004464:	f104 0308 	add.w	r3, r4, #8
 8004468:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800446c:	4619      	mov	r1, r3
 800446e:	f011 fc75 	bl	8015d5c <memcpy>
 8004472:	e894 000c 	ldmia.w	r4, {r2, r3}
 8004476:	4628      	mov	r0, r5
 8004478:	f7fd fdac 	bl	8001fd4 <commandReply>
 800447c:	4603      	mov	r3, r0
 800447e:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
				  //LOG_REPORT("tail", usb_rx_ringbuff.tail);
				  if ( RPD_DUTY == rpd_type) {
 8004482:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8004486:	2b09      	cmp	r3, #9
 8004488:	d123      	bne.n	80044d2 <Start_USB_RX_Task+0x166>
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 800448a:	2300      	movs	r3, #0
 800448c:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
					  // Wait allocate
					  while (dataMail == NULL) {
 8004490:	e008      	b.n	80044a4 <Start_USB_RX_Task+0x138>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 8004492:	4b22      	ldr	r3, [pc, #136]	; (800451c <Start_USB_RX_Task+0x1b0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f04f 31ff 	mov.w	r1, #4294967295
 800449a:	4618      	mov	r0, r3
 800449c:	f00e fb10 	bl	8012ac0 <osMailAlloc>
 80044a0:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
					  while (dataMail == NULL) {
 80044a4:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0f2      	beq.n	8004492 <Start_USB_RX_Task+0x126>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 80044ac:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80044b0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80044b4:	4619      	mov	r1, r3
 80044b6:	f8d7 040c 	ldr.w	r0, [r7, #1036]	; 0x40c
 80044ba:	f011 fc4f 	bl	8015d5c <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 80044be:	4b17      	ldr	r3, [pc, #92]	; (800451c <Start_USB_RX_Task+0x1b0>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 80044c6:	4618      	mov	r0, r3
 80044c8:	f00e fb10 	bl	8012aec <osMailPut>
 80044cc:	f8c7 03f0 	str.w	r0, [r7, #1008]	; 0x3f0
 80044d0:	e01d      	b.n	800450e <Start_USB_RX_Task+0x1a2>
						  //LOG_REPORT("DUTY SEND", __LINE__);
					  }

				//   }else if( RPD_POSITION == rpd_type) { 
				// 	  CDC_Transmit_FS(detail, 84);
				  }else if(rpd_type == RPD_TRANSFER){
 80044d2:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 80044d6:	2b0a      	cmp	r3, #10
 80044d8:	d019      	beq.n	800450e <Start_USB_RX_Task+0x1a2>

				  }else {
					//   memset(respond, 0, sizeof(respond));
					//   memset(message, 0, sizeof(message));
					  respond_lenght	= commandRespond1(rpd_type, cmd_type,
 80044da:	f897 13fb 	ldrb.w	r1, [r7, #1019]	; 0x3fb
 80044de:	f107 0308 	add.w	r3, r7, #8
 80044e2:	681c      	ldr	r4, [r3, #0]
 80044e4:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80044e8:	f897 03fa 	ldrb.w	r0, [r7, #1018]	; 0x3fa
 80044ec:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	4623      	mov	r3, r4
 80044f4:	f7fd fefa 	bl	80022ec <commandRespond1>
 80044f8:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
							  	  	  	  (char *)detail, detail_length,
										  (char *)respond);
					  //message_lenght	= packPayload(respond, message, respond_lenght);
					  CDC_Transmit_FS(respond, respond_lenght);
 80044fc:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8004500:	b29a      	uxth	r2, r3
 8004502:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8004506:	4611      	mov	r1, r2
 8004508:	4618      	mov	r0, r3
 800450a:	f010 ffab 	bl	8015464 <CDC_Transmit_FS>
 800450e:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 8004510:	e736      	b.n	8004380 <Start_USB_RX_Task+0x14>
 8004512:	bf00      	nop
 8004514:	0801b428 	.word	0x0801b428
 8004518:	20000064 	.word	0x20000064
 800451c:	2000de2c 	.word	0x2000de2c

08004520 <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	b292      	uxth	r2, r2
 8004530:	801a      	strh	r2, [r3, #0]
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 800453e:	b480      	push	{r7}
 8004540:	b083      	sub	sp, #12
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	881b      	ldrh	r3, [r3, #0]
 800454a:	b29b      	uxth	r3, r3
}
 800454c:	4618      	mov	r0, r3
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b088      	sub	sp, #32
 800455c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800455e:	1d3b      	adds	r3, r7, #4
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	605a      	str	r2, [r3, #4]
 8004566:	609a      	str	r2, [r3, #8]
 8004568:	60da      	str	r2, [r3, #12]
 800456a:	611a      	str	r2, [r3, #16]
 800456c:	615a      	str	r2, [r3, #20]
 800456e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8004570:	4b27      	ldr	r3, [pc, #156]	; (8004610 <MX_FSMC_Init+0xb8>)
 8004572:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8004576:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8004578:	4b25      	ldr	r3, [pc, #148]	; (8004610 <MX_FSMC_Init+0xb8>)
 800457a:	4a26      	ldr	r2, [pc, #152]	; (8004614 <MX_FSMC_Init+0xbc>)
 800457c:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800457e:	4b24      	ldr	r3, [pc, #144]	; (8004610 <MX_FSMC_Init+0xb8>)
 8004580:	2200      	movs	r2, #0
 8004582:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8004584:	4b22      	ldr	r3, [pc, #136]	; (8004610 <MX_FSMC_Init+0xb8>)
 8004586:	2202      	movs	r2, #2
 8004588:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 800458a:	4b21      	ldr	r3, [pc, #132]	; (8004610 <MX_FSMC_Init+0xb8>)
 800458c:	2208      	movs	r2, #8
 800458e:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004590:	4b1f      	ldr	r3, [pc, #124]	; (8004610 <MX_FSMC_Init+0xb8>)
 8004592:	2210      	movs	r2, #16
 8004594:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8004596:	4b1e      	ldr	r3, [pc, #120]	; (8004610 <MX_FSMC_Init+0xb8>)
 8004598:	2200      	movs	r2, #0
 800459a:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800459c:	4b1c      	ldr	r3, [pc, #112]	; (8004610 <MX_FSMC_Init+0xb8>)
 800459e:	2200      	movs	r2, #0
 80045a0:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80045a2:	4b1b      	ldr	r3, [pc, #108]	; (8004610 <MX_FSMC_Init+0xb8>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80045a8:	4b19      	ldr	r3, [pc, #100]	; (8004610 <MX_FSMC_Init+0xb8>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80045ae:	4b18      	ldr	r3, [pc, #96]	; (8004610 <MX_FSMC_Init+0xb8>)
 80045b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80045b4:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80045b6:	4b16      	ldr	r3, [pc, #88]	; (8004610 <MX_FSMC_Init+0xb8>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80045bc:	4b14      	ldr	r3, [pc, #80]	; (8004610 <MX_FSMC_Init+0xb8>)
 80045be:	2200      	movs	r2, #0
 80045c0:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80045c2:	4b13      	ldr	r3, [pc, #76]	; (8004610 <MX_FSMC_Init+0xb8>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80045c8:	4b11      	ldr	r3, [pc, #68]	; (8004610 <MX_FSMC_Init+0xb8>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80045ce:	4b10      	ldr	r3, [pc, #64]	; (8004610 <MX_FSMC_Init+0xb8>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80045d4:	230f      	movs	r3, #15
 80045d6:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80045d8:	230f      	movs	r3, #15
 80045da:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80045dc:	23ff      	movs	r3, #255	; 0xff
 80045de:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80045e0:	230f      	movs	r3, #15
 80045e2:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80045e4:	2310      	movs	r3, #16
 80045e6:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80045e8:	2311      	movs	r3, #17
 80045ea:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80045ec:	2300      	movs	r3, #0
 80045ee:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 80045f0:	1d3b      	adds	r3, r7, #4
 80045f2:	2200      	movs	r2, #0
 80045f4:	4619      	mov	r1, r3
 80045f6:	4806      	ldr	r0, [pc, #24]	; (8004610 <MX_FSMC_Init+0xb8>)
 80045f8:	f007 fe36 	bl	800c268 <HAL_NOR_Init>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8004602:	f001 f893 	bl	800572c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8004606:	bf00      	nop
 8004608:	3720      	adds	r7, #32
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	2000de38 	.word	0x2000de38
 8004614:	a0000104 	.word	0xa0000104

08004618 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800461e:	1d3b      	adds	r3, r7, #4
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	605a      	str	r2, [r3, #4]
 8004626:	609a      	str	r2, [r3, #8]
 8004628:	60da      	str	r2, [r3, #12]
 800462a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800462c:	4b24      	ldr	r3, [pc, #144]	; (80046c0 <HAL_FSMC_MspInit+0xa8>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d140      	bne.n	80046b6 <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 8004634:	4b22      	ldr	r3, [pc, #136]	; (80046c0 <HAL_FSMC_MspInit+0xa8>)
 8004636:	2201      	movs	r2, #1
 8004638:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800463a:	2300      	movs	r3, #0
 800463c:	603b      	str	r3, [r7, #0]
 800463e:	4b21      	ldr	r3, [pc, #132]	; (80046c4 <HAL_FSMC_MspInit+0xac>)
 8004640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004642:	4a20      	ldr	r2, [pc, #128]	; (80046c4 <HAL_FSMC_MspInit+0xac>)
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	6393      	str	r3, [r2, #56]	; 0x38
 800464a:	4b1e      	ldr	r3, [pc, #120]	; (80046c4 <HAL_FSMC_MspInit+0xac>)
 800464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004656:	f64f 7380 	movw	r3, #65408	; 0xff80
 800465a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800465c:	2302      	movs	r3, #2
 800465e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004660:	2300      	movs	r3, #0
 8004662:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004664:	2303      	movs	r3, #3
 8004666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004668:	230c      	movs	r3, #12
 800466a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800466c:	1d3b      	adds	r3, r7, #4
 800466e:	4619      	mov	r1, r3
 8004670:	4815      	ldr	r0, [pc, #84]	; (80046c8 <HAL_FSMC_MspInit+0xb0>)
 8004672:	f007 fc45 	bl	800bf00 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8004676:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800467a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800467c:	2302      	movs	r3, #2
 800467e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004680:	2300      	movs	r3, #0
 8004682:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004684:	2303      	movs	r3, #3
 8004686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004688:	230c      	movs	r3, #12
 800468a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800468c:	1d3b      	adds	r3, r7, #4
 800468e:	4619      	mov	r1, r3
 8004690:	480e      	ldr	r0, [pc, #56]	; (80046cc <HAL_FSMC_MspInit+0xb4>)
 8004692:	f007 fc35 	bl	800bf00 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004696:	2380      	movs	r3, #128	; 0x80
 8004698:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469a:	2302      	movs	r3, #2
 800469c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046a2:	2303      	movs	r3, #3
 80046a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80046a6:	230c      	movs	r3, #12
 80046a8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046aa:	1d3b      	adds	r3, r7, #4
 80046ac:	4619      	mov	r1, r3
 80046ae:	4808      	ldr	r0, [pc, #32]	; (80046d0 <HAL_FSMC_MspInit+0xb8>)
 80046b0:	f007 fc26 	bl	800bf00 <HAL_GPIO_Init>
 80046b4:	e000      	b.n	80046b8 <HAL_FSMC_MspInit+0xa0>
    return;
 80046b6:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	20002854 	.word	0x20002854
 80046c4:	40023800 	.word	0x40023800
 80046c8:	40021000 	.word	0x40021000
 80046cc:	40020c00 	.word	0x40020c00
 80046d0:	40020400 	.word	0x40020400

080046d4 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 80046dc:	f7ff ff9c 	bl	8004618 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 80046e0:	bf00      	nop
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <update_gcode_point>:
extern int16_t 							pre_clutch_index;
extern Gcode_Packet_Command_TypeDef 	pre_height;
extern Gcode_Packet_Command_TypeDef 	Gcode_Mode;

void update_gcode_point(DUTY_Command_TypeDef *duty_cmd, SCARA_Gcode_Cor_TypeDef gcode_point, int32_t run_point)
{
 80046e8:	b084      	sub	sp, #16
 80046ea:	b590      	push	{r4, r7, lr}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	f107 001c 	add.w	r0, r7, #28
 80046f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(Gcode_Mode == GCODE_LINEAR){
 80046fa:	4baf      	ldr	r3, [pc, #700]	; (80049b8 <update_gcode_point+0x2d0>)
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	2b07      	cmp	r3, #7
 8004700:	f040 80e6 	bne.w	80048d0 <update_gcode_point+0x1e8>
		duty_cmd->target_point.x = (double)gcode_point.X * COR_INVERSE_SCALE + offset_x;
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	4618      	mov	r0, r3
 8004708:	f7fb ff0c 	bl	8000524 <__aeabi_i2d>
 800470c:	a3a8      	add	r3, pc, #672	; (adr r3, 80049b0 <update_gcode_point+0x2c8>)
 800470e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004712:	f7fb ff71 	bl	80005f8 <__aeabi_dmul>
 8004716:	4603      	mov	r3, r0
 8004718:	460c      	mov	r4, r1
 800471a:	4618      	mov	r0, r3
 800471c:	4621      	mov	r1, r4
 800471e:	4ba7      	ldr	r3, [pc, #668]	; (80049bc <update_gcode_point+0x2d4>)
 8004720:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004724:	461a      	mov	r2, r3
 8004726:	4623      	mov	r3, r4
 8004728:	f7fb fdb0 	bl	800028c <__adddf3>
 800472c:	4603      	mov	r3, r0
 800472e:	460c      	mov	r4, r1
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		duty_cmd->target_point.y = (double)gcode_point.Y * COR_INVERSE_SCALE + offset_y;
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	4618      	mov	r0, r3
 800473a:	f7fb fef3 	bl	8000524 <__aeabi_i2d>
 800473e:	a39c      	add	r3, pc, #624	; (adr r3, 80049b0 <update_gcode_point+0x2c8>)
 8004740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004744:	f7fb ff58 	bl	80005f8 <__aeabi_dmul>
 8004748:	4603      	mov	r3, r0
 800474a:	460c      	mov	r4, r1
 800474c:	4618      	mov	r0, r3
 800474e:	4621      	mov	r1, r4
 8004750:	4b9b      	ldr	r3, [pc, #620]	; (80049c0 <update_gcode_point+0x2d8>)
 8004752:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004756:	461a      	mov	r2, r3
 8004758:	4623      	mov	r3, r4
 800475a:	f7fb fd97 	bl	800028c <__adddf3>
 800475e:	4603      	mov	r3, r0
 8004760:	460c      	mov	r4, r1
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		if(gcode_point.configure.type_define[1] == UP_Z){
 8004768:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800476c:	2b05      	cmp	r3, #5
 800476e:	d10f      	bne.n	8004790 <update_gcode_point+0xa8>
		  duty_cmd->target_point.z = up_z_height + offset_z;
 8004770:	4b94      	ldr	r3, [pc, #592]	; (80049c4 <update_gcode_point+0x2dc>)
 8004772:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004776:	4b94      	ldr	r3, [pc, #592]	; (80049c8 <update_gcode_point+0x2e0>)
 8004778:	e9d3 3400 	ldrd	r3, r4, [r3]
 800477c:	461a      	mov	r2, r3
 800477e:	4623      	mov	r3, r4
 8004780:	f7fb fd84 	bl	800028c <__adddf3>
 8004784:	4603      	mov	r3, r0
 8004786:	460c      	mov	r4, r1
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
 800478e:	e00e      	b.n	80047ae <update_gcode_point+0xc6>
		}else{
		  duty_cmd->target_point.z = down_z_height + offset_z;
 8004790:	4b8e      	ldr	r3, [pc, #568]	; (80049cc <update_gcode_point+0x2e4>)
 8004792:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004796:	4b8c      	ldr	r3, [pc, #560]	; (80049c8 <update_gcode_point+0x2e0>)
 8004798:	e9d3 3400 	ldrd	r3, r4, [r3]
 800479c:	461a      	mov	r2, r3
 800479e:	4623      	mov	r3, r4
 80047a0:	f7fb fd74 	bl	800028c <__adddf3>
 80047a4:	4603      	mov	r3, r0
 80047a6:	460c      	mov	r4, r1
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		}
		duty_cmd->target_point.roll = roll_angle;
 80047ae:	4b88      	ldr	r3, [pc, #544]	; (80049d0 <update_gcode_point+0x2e8>)
 80047b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		duty_cmd->v_factor = (double)gcode_point.F * COR_INVERSE_SCALE / V_MOVE_MAX;
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fb feb1 	bl	8000524 <__aeabi_i2d>
 80047c2:	a37b      	add	r3, pc, #492	; (adr r3, 80049b0 <update_gcode_point+0x2c8>)
 80047c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c8:	f7fb ff16 	bl	80005f8 <__aeabi_dmul>
 80047cc:	4603      	mov	r3, r0
 80047ce:	460c      	mov	r4, r1
 80047d0:	4618      	mov	r0, r3
 80047d2:	4621      	mov	r1, r4
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	4b7e      	ldr	r3, [pc, #504]	; (80049d4 <update_gcode_point+0x2ec>)
 80047da:	f7fc f837 	bl	800084c <__aeabi_ddiv>
 80047de:	4603      	mov	r3, r0
 80047e0:	460c      	mov	r4, r1
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
		if(run_point == 1){
 80047e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d10d      	bne.n	800480a <update_gcode_point+0x122>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	741a      	strb	r2, [r3, #16]
			duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	745a      	strb	r2, [r3, #17]
			duty_cmd->time_total = 0;
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	f04f 0400 	mov.w	r4, #0
 8004804:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004808:	e005      	b.n	8004816 <update_gcode_point+0x12e>
		}else{
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LINEAR;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2202      	movs	r2, #2
 800480e:	741a      	strb	r2, [r3, #16]
			duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	745a      	strb	r2, [r3, #17]
		}
		duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	731a      	strb	r2, [r3, #12]
		if(gcode_point.configure.type_define[0] == LINEAR_TYPE){
 800481c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004820:	2b01      	cmp	r3, #1
 8004822:	d103      	bne.n	800482c <update_gcode_point+0x144>
		  duty_cmd->path_type = DUTY_PATH_LINE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	739a      	strb	r2, [r3, #14]
 800482a:	e04d      	b.n	80048c8 <update_gcode_point+0x1e0>
		}else if(gcode_point.configure.type_define[0] == ARC_AW_TYPE){
 800482c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004830:	2b03      	cmp	r3, #3
 8004832:	d122      	bne.n	800487a <update_gcode_point+0x192>
		  duty_cmd->sub_point.x = (double)gcode_point.I * COR_INVERSE_SCALE;
 8004834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004836:	4618      	mov	r0, r3
 8004838:	f7fb fe74 	bl	8000524 <__aeabi_i2d>
 800483c:	a35c      	add	r3, pc, #368	; (adr r3, 80049b0 <update_gcode_point+0x2c8>)
 800483e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004842:	f7fb fed9 	bl	80005f8 <__aeabi_dmul>
 8004846:	4603      	mov	r3, r0
 8004848:	460c      	mov	r4, r1
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	e9c2 344c 	strd	r3, r4, [r2, #304]	; 0x130
		  duty_cmd->sub_point.y = (double)gcode_point.J * COR_INVERSE_SCALE;
 8004850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004852:	4618      	mov	r0, r3
 8004854:	f7fb fe66 	bl	8000524 <__aeabi_i2d>
 8004858:	a355      	add	r3, pc, #340	; (adr r3, 80049b0 <update_gcode_point+0x2c8>)
 800485a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485e:	f7fb fecb 	bl	80005f8 <__aeabi_dmul>
 8004862:	4603      	mov	r3, r0
 8004864:	460c      	mov	r4, r1
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	e9c2 344e 	strd	r3, r4, [r2, #312]	; 0x138
		  duty_cmd->path_type = DUTY_PATH_CIRCLE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	739a      	strb	r2, [r3, #14]
		  duty_cmd->arc_dir = 1;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	615a      	str	r2, [r3, #20]
 8004878:	e026      	b.n	80048c8 <update_gcode_point+0x1e0>
		}else if(gcode_point.configure.type_define[0] == ARC_CW_TYPE){
 800487a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800487e:	2b02      	cmp	r3, #2
 8004880:	d122      	bne.n	80048c8 <update_gcode_point+0x1e0>
		  duty_cmd->sub_point.x = (double)gcode_point.I * COR_INVERSE_SCALE;
 8004882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004884:	4618      	mov	r0, r3
 8004886:	f7fb fe4d 	bl	8000524 <__aeabi_i2d>
 800488a:	a349      	add	r3, pc, #292	; (adr r3, 80049b0 <update_gcode_point+0x2c8>)
 800488c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004890:	f7fb feb2 	bl	80005f8 <__aeabi_dmul>
 8004894:	4603      	mov	r3, r0
 8004896:	460c      	mov	r4, r1
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	e9c2 344c 	strd	r3, r4, [r2, #304]	; 0x130
		  duty_cmd->sub_point.y = (double)gcode_point.J * COR_INVERSE_SCALE;
 800489e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fb fe3f 	bl	8000524 <__aeabi_i2d>
 80048a6:	a342      	add	r3, pc, #264	; (adr r3, 80049b0 <update_gcode_point+0x2c8>)
 80048a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ac:	f7fb fea4 	bl	80005f8 <__aeabi_dmul>
 80048b0:	4603      	mov	r3, r0
 80048b2:	460c      	mov	r4, r1
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	e9c2 344e 	strd	r3, r4, [r2, #312]	; 0x138
		  duty_cmd->path_type = DUTY_PATH_CIRCLE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	739a      	strb	r2, [r3, #14]
		  duty_cmd->arc_dir = -1;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f04f 32ff 	mov.w	r2, #4294967295
 80048c6:	615a      	str	r2, [r3, #20]
		}
		duty_cmd->space_type = DUTY_SPACE_TASK;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	735a      	strb	r2, [r3, #13]
			duty_cmd->v_factor = (double)gcode_clutch_configure[gcode_point.configure.clutch_index].Depth_Feed*COR_INVERSE_SCALE;
			pre_height = gcode_point.configure.type_define[1];
		}
	}

}
 80048ce:	e125      	b.n	8004b1c <update_gcode_point+0x434>
	}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 80048d0:	4b39      	ldr	r3, [pc, #228]	; (80049b8 <update_gcode_point+0x2d0>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	f040 8121 	bne.w	8004b1c <update_gcode_point+0x434>
		duty_cmd->target_point.x = (double)gcode_point.X * COR_INVERSE_SCALE + offset_x;
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fb fe21 	bl	8000524 <__aeabi_i2d>
 80048e2:	a333      	add	r3, pc, #204	; (adr r3, 80049b0 <update_gcode_point+0x2c8>)
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	f7fb fe86 	bl	80005f8 <__aeabi_dmul>
 80048ec:	4603      	mov	r3, r0
 80048ee:	460c      	mov	r4, r1
 80048f0:	4618      	mov	r0, r3
 80048f2:	4621      	mov	r1, r4
 80048f4:	4b31      	ldr	r3, [pc, #196]	; (80049bc <update_gcode_point+0x2d4>)
 80048f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80048fa:	461a      	mov	r2, r3
 80048fc:	4623      	mov	r3, r4
 80048fe:	f7fb fcc5 	bl	800028c <__adddf3>
 8004902:	4603      	mov	r3, r0
 8004904:	460c      	mov	r4, r1
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		duty_cmd->target_point.y = (double)gcode_point.Y * COR_INVERSE_SCALE + offset_y;
 800490c:	6a3b      	ldr	r3, [r7, #32]
 800490e:	4618      	mov	r0, r3
 8004910:	f7fb fe08 	bl	8000524 <__aeabi_i2d>
 8004914:	a326      	add	r3, pc, #152	; (adr r3, 80049b0 <update_gcode_point+0x2c8>)
 8004916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491a:	f7fb fe6d 	bl	80005f8 <__aeabi_dmul>
 800491e:	4603      	mov	r3, r0
 8004920:	460c      	mov	r4, r1
 8004922:	4618      	mov	r0, r3
 8004924:	4621      	mov	r1, r4
 8004926:	4b26      	ldr	r3, [pc, #152]	; (80049c0 <update_gcode_point+0x2d8>)
 8004928:	e9d3 3400 	ldrd	r3, r4, [r3]
 800492c:	461a      	mov	r2, r3
 800492e:	4623      	mov	r3, r4
 8004930:	f7fb fcac 	bl	800028c <__adddf3>
 8004934:	4603      	mov	r3, r0
 8004936:	460c      	mov	r4, r1
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		duty_cmd->target_point.roll = roll_angle;
 800493e:	4b24      	ldr	r3, [pc, #144]	; (80049d0 <update_gcode_point+0x2e8>)
 8004940:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	731a      	strb	r2, [r3, #12]
		duty_cmd->space_type = DUTY_SPACE_TASK;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	735a      	strb	r2, [r3, #13]
		if(gcode_point.configure.type_define[1] == UP_Z){
 8004956:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800495a:	2b05      	cmp	r3, #5
 800495c:	d10f      	bne.n	800497e <update_gcode_point+0x296>
		  duty_cmd->target_point.z = up_z_height + offset_z;
 800495e:	4b19      	ldr	r3, [pc, #100]	; (80049c4 <update_gcode_point+0x2dc>)
 8004960:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004964:	4b18      	ldr	r3, [pc, #96]	; (80049c8 <update_gcode_point+0x2e0>)
 8004966:	e9d3 3400 	ldrd	r3, r4, [r3]
 800496a:	461a      	mov	r2, r3
 800496c:	4623      	mov	r3, r4
 800496e:	f7fb fc8d 	bl	800028c <__adddf3>
 8004972:	4603      	mov	r3, r0
 8004974:	460c      	mov	r4, r1
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
 800497c:	e00e      	b.n	800499c <update_gcode_point+0x2b4>
		  duty_cmd->target_point.z = down_z_height + offset_z;
 800497e:	4b13      	ldr	r3, [pc, #76]	; (80049cc <update_gcode_point+0x2e4>)
 8004980:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004984:	4b10      	ldr	r3, [pc, #64]	; (80049c8 <update_gcode_point+0x2e0>)
 8004986:	e9d3 3400 	ldrd	r3, r4, [r3]
 800498a:	461a      	mov	r2, r3
 800498c:	4623      	mov	r3, r4
 800498e:	f7fb fc7d 	bl	800028c <__adddf3>
 8004992:	4603      	mov	r3, r0
 8004994:	460c      	mov	r4, r1
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		if(gcode_point.configure.type_define[0] == LINEAR_TYPE){
 800499c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d119      	bne.n	80049d8 <update_gcode_point+0x2f0>
		  duty_cmd->path_type = DUTY_PATH_LINE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	739a      	strb	r2, [r3, #14]
 80049aa:	e063      	b.n	8004a74 <update_gcode_point+0x38c>
 80049ac:	f3af 8000 	nop.w
 80049b0:	a0000000 	.word	0xa0000000
 80049b4:	3eb0c6f7 	.word	0x3eb0c6f7
 80049b8:	200065c0 	.word	0x200065c0
 80049bc:	20006f80 	.word	0x20006f80
 80049c0:	2000dd18 	.word	0x2000dd18
 80049c4:	200065b8 	.word	0x200065b8
 80049c8:	2000dd08 	.word	0x2000dd08
 80049cc:	20006f30 	.word	0x20006f30
 80049d0:	20006f78 	.word	0x20006f78
 80049d4:	40877000 	.word	0x40877000
		}else if(gcode_point.configure.type_define[0] == ARC_AW_TYPE){
 80049d8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80049dc:	2b03      	cmp	r3, #3
 80049de:	d122      	bne.n	8004a26 <update_gcode_point+0x33e>
		  duty_cmd->sub_point.x = (double)gcode_point.I * COR_INVERSE_SCALE;
 80049e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fb fd9e 	bl	8000524 <__aeabi_i2d>
 80049e8:	a351      	add	r3, pc, #324	; (adr r3, 8004b30 <update_gcode_point+0x448>)
 80049ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ee:	f7fb fe03 	bl	80005f8 <__aeabi_dmul>
 80049f2:	4603      	mov	r3, r0
 80049f4:	460c      	mov	r4, r1
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	e9c2 344c 	strd	r3, r4, [r2, #304]	; 0x130
		  duty_cmd->sub_point.y = (double)gcode_point.J * COR_INVERSE_SCALE;
 80049fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fb fd90 	bl	8000524 <__aeabi_i2d>
 8004a04:	a34a      	add	r3, pc, #296	; (adr r3, 8004b30 <update_gcode_point+0x448>)
 8004a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0a:	f7fb fdf5 	bl	80005f8 <__aeabi_dmul>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	460c      	mov	r4, r1
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	e9c2 344e 	strd	r3, r4, [r2, #312]	; 0x138
		  duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	739a      	strb	r2, [r3, #14]
		  duty_cmd->arc_dir = 1;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	615a      	str	r2, [r3, #20]
 8004a24:	e026      	b.n	8004a74 <update_gcode_point+0x38c>
		}else if(gcode_point.configure.type_define[0] == ARC_CW_TYPE){
 8004a26:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d122      	bne.n	8004a74 <update_gcode_point+0x38c>
		  duty_cmd->sub_point.x = (double)gcode_point.I * COR_INVERSE_SCALE;
 8004a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fb fd77 	bl	8000524 <__aeabi_i2d>
 8004a36:	a33e      	add	r3, pc, #248	; (adr r3, 8004b30 <update_gcode_point+0x448>)
 8004a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3c:	f7fb fddc 	bl	80005f8 <__aeabi_dmul>
 8004a40:	4603      	mov	r3, r0
 8004a42:	460c      	mov	r4, r1
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	e9c2 344c 	strd	r3, r4, [r2, #304]	; 0x130
		  duty_cmd->sub_point.y = (double)gcode_point.J * COR_INVERSE_SCALE;
 8004a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fb fd69 	bl	8000524 <__aeabi_i2d>
 8004a52:	a337      	add	r3, pc, #220	; (adr r3, 8004b30 <update_gcode_point+0x448>)
 8004a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a58:	f7fb fdce 	bl	80005f8 <__aeabi_dmul>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	460c      	mov	r4, r1
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	e9c2 344e 	strd	r3, r4, [r2, #312]	; 0x138
		  duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	739a      	strb	r2, [r3, #14]
		  duty_cmd->arc_dir = -1;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a72:	615a      	str	r2, [r3, #20]
		if(gcode_point.configure.type_define[1] == pre_height){
 8004a74:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004a78:	4b2f      	ldr	r3, [pc, #188]	; (8004b38 <update_gcode_point+0x450>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d12c      	bne.n	8004ada <update_gcode_point+0x3f2>
			if(gcode_point.configure.clutch_index != pre_clutch_index){
 8004a80:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004a82:	461a      	mov	r2, r3
 8004a84:	4b2d      	ldr	r3, [pc, #180]	; (8004b3c <update_gcode_point+0x454>)
 8004a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d00f      	beq.n	8004aae <update_gcode_point+0x3c6>
				LSPB_calculation(gcode_clutch_configure[gcode_point.configure.clutch_index]);
 8004a8e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004a90:	4619      	mov	r1, r3
 8004a92:	4a2b      	ldr	r2, [pc, #172]	; (8004b40 <update_gcode_point+0x458>)
 8004a94:	460b      	mov	r3, r1
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	440b      	add	r3, r1
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004aa2:	f000 f851 	bl	8004b48 <LSPB_calculation>
				pre_clutch_index = gcode_point.configure.clutch_index;
 8004aa6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004aa8:	b21a      	sxth	r2, r3
 8004aaa:	4b24      	ldr	r3, [pc, #144]	; (8004b3c <update_gcode_point+0x454>)
 8004aac:	801a      	strh	r2, [r3, #0]
			duty_cmd->trajec_type = DUTY_TRAJECTORY_GCODE_LSPB;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2203      	movs	r2, #3
 8004ab2:	741a      	strb	r2, [r3, #16]
			duty_cmd->time_total = (double)(gcode_point.T*COR_INVERSE_SCALE);
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab6:	ee07 3a90 	vmov	s15, r3
 8004aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004abe:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004b44 <update_gcode_point+0x45c>
 8004ac2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ac6:	ee17 0a90 	vmov	r0, s15
 8004aca:	f7fb fd3d 	bl	8000548 <__aeabi_f2d>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	460c      	mov	r4, r1
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8004ad8:	e020      	b.n	8004b1c <update_gcode_point+0x434>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LINEAR;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2202      	movs	r2, #2
 8004ade:	741a      	strb	r2, [r3, #16]
			duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	745a      	strb	r2, [r3, #17]
			duty_cmd->v_factor = (double)gcode_clutch_configure[gcode_point.configure.clutch_index].Depth_Feed*COR_INVERSE_SCALE;
 8004ae6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4a15      	ldr	r2, [pc, #84]	; (8004b40 <update_gcode_point+0x458>)
 8004aec:	460b      	mov	r3, r1
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	440b      	add	r3, r1
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	3308      	adds	r3, #8
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fb fd12 	bl	8000524 <__aeabi_i2d>
 8004b00:	a30b      	add	r3, pc, #44	; (adr r3, 8004b30 <update_gcode_point+0x448>)
 8004b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b06:	f7fb fd77 	bl	80005f8 <__aeabi_dmul>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	460c      	mov	r4, r1
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			pre_height = gcode_point.configure.type_define[1];
 8004b14:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004b18:	4b07      	ldr	r3, [pc, #28]	; (8004b38 <update_gcode_point+0x450>)
 8004b1a:	701a      	strb	r2, [r3, #0]
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004b26:	b004      	add	sp, #16
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	f3af 8000 	nop.w
 8004b30:	a0000000 	.word	0xa0000000
 8004b34:	3eb0c6f7 	.word	0x3eb0c6f7
 8004b38:	20006f60 	.word	0x20006f60
 8004b3c:	2000dd02 	.word	0x2000dd02
 8004b40:	200065d0 	.word	0x200065d0
 8004b44:	358637bd 	.word	0x358637bd

08004b48 <LSPB_calculation>:
void LSPB_calculation(SCARA_LSPB_Clutch_TypeDef configure)
{
 8004b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b4a:	b08b      	sub	sp, #44	; 0x2c
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	1d3b      	adds	r3, r7, #4
 8004b50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	double accel = 0;
 8004b54:	f04f 0300 	mov.w	r3, #0
 8004b58:	f04f 0400 	mov.w	r4, #0
 8004b5c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	double total_s = (double)configure.total_s*COR_INVERSE_SCALE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fb fcde 	bl	8000524 <__aeabi_i2d>
 8004b68:	a38e      	add	r3, pc, #568	; (adr r3, 8004da4 <LSPB_calculation+0x25c>)
 8004b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6e:	f7fb fd43 	bl	80005f8 <__aeabi_dmul>
 8004b72:	4603      	mov	r3, r0
 8004b74:	460c      	mov	r4, r1
 8004b76:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double veloc   = (double)configure.veloc*COR_INVERSE_SCALE;
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fb fcd1 	bl	8000524 <__aeabi_i2d>
 8004b82:	a388      	add	r3, pc, #544	; (adr r3, 8004da4 <LSPB_calculation+0x25c>)
 8004b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b88:	f7fb fd36 	bl	80005f8 <__aeabi_dmul>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	460c      	mov	r4, r1
 8004b90:	e9c7 3404 	strd	r3, r4, [r7, #16]
	time_move = 1.2*total_s/veloc;
 8004b94:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8004b98:	4b77      	ldr	r3, [pc, #476]	; (8004d78 <LSPB_calculation+0x230>)
 8004b9a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004b9e:	f7fb fd2b 	bl	80005f8 <__aeabi_dmul>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	460c      	mov	r4, r1
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	4621      	mov	r1, r4
 8004baa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004bae:	f7fb fe4d 	bl	800084c <__aeabi_ddiv>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	460c      	mov	r4, r1
 8004bb6:	4a71      	ldr	r2, [pc, #452]	; (8004d7c <LSPB_calculation+0x234>)
 8004bb8:	e9c2 3400 	strd	r3, r4, [r2]
	time_acc = time_move - total_s/veloc;
 8004bbc:	4b6f      	ldr	r3, [pc, #444]	; (8004d7c <LSPB_calculation+0x234>)
 8004bbe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004bc2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004bc6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004bca:	f7fb fe3f 	bl	800084c <__aeabi_ddiv>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	4629      	mov	r1, r5
 8004bd6:	f7fb fb57 	bl	8000288 <__aeabi_dsub>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	460c      	mov	r4, r1
 8004bde:	4a68      	ldr	r2, [pc, #416]	; (8004d80 <LSPB_calculation+0x238>)
 8004be0:	e9c2 3400 	strd	r3, r4, [r2]
	time_dec = time_move - time_acc;
 8004be4:	4b65      	ldr	r3, [pc, #404]	; (8004d7c <LSPB_calculation+0x234>)
 8004be6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bea:	4b65      	ldr	r3, [pc, #404]	; (8004d80 <LSPB_calculation+0x238>)
 8004bec:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	4623      	mov	r3, r4
 8004bf4:	f7fb fb48 	bl	8000288 <__aeabi_dsub>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	460c      	mov	r4, r1
 8004bfc:	4a61      	ldr	r2, [pc, #388]	; (8004d84 <LSPB_calculation+0x23c>)
 8004bfe:	e9c2 3400 	strd	r3, r4, [r2]
	accel = veloc / time_acc;
 8004c02:	4b5f      	ldr	r3, [pc, #380]	; (8004d80 <LSPB_calculation+0x238>)
 8004c04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	4623      	mov	r3, r4
 8004c0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004c10:	f7fb fe1c 	bl	800084c <__aeabi_ddiv>
 8004c14:	4603      	mov	r3, r0
 8004c16:	460c      	mov	r4, r1
 8004c18:	e9c7 3408 	strd	r3, r4, [r7, #32]
	acc0 = 0.5*accel;
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	4b59      	ldr	r3, [pc, #356]	; (8004d88 <LSPB_calculation+0x240>)
 8004c22:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004c26:	f7fb fce7 	bl	80005f8 <__aeabi_dmul>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	4a57      	ldr	r2, [pc, #348]	; (8004d8c <LSPB_calculation+0x244>)
 8004c30:	e9c2 3400 	strd	r3, r4, [r2]
	constant[0] = veloc;
 8004c34:	4a56      	ldr	r2, [pc, #344]	; (8004d90 <LSPB_calculation+0x248>)
 8004c36:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004c3a:	e9c2 3400 	strd	r3, r4, [r2]
	constant[1] = -0.5*time_acc*veloc;
 8004c3e:	4b50      	ldr	r3, [pc, #320]	; (8004d80 <LSPB_calculation+0x238>)
 8004c40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	4b52      	ldr	r3, [pc, #328]	; (8004d94 <LSPB_calculation+0x24c>)
 8004c4a:	f7fb fcd5 	bl	80005f8 <__aeabi_dmul>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	460c      	mov	r4, r1
 8004c52:	4618      	mov	r0, r3
 8004c54:	4621      	mov	r1, r4
 8004c56:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c5a:	f7fb fccd 	bl	80005f8 <__aeabi_dmul>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	460c      	mov	r4, r1
 8004c62:	4a4b      	ldr	r2, [pc, #300]	; (8004d90 <LSPB_calculation+0x248>)
 8004c64:	e9c2 3402 	strd	r3, r4, [r2, #8]
    deacc[0] 	= -0.5*accel;
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	4b49      	ldr	r3, [pc, #292]	; (8004d94 <LSPB_calculation+0x24c>)
 8004c6e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004c72:	f7fb fcc1 	bl	80005f8 <__aeabi_dmul>
 8004c76:	4603      	mov	r3, r0
 8004c78:	460c      	mov	r4, r1
 8004c7a:	4a47      	ldr	r2, [pc, #284]	; (8004d98 <LSPB_calculation+0x250>)
 8004c7c:	e9c2 3400 	strd	r3, r4, [r2]
    deacc[1]	= veloc + accel*time_dec;
 8004c80:	4b40      	ldr	r3, [pc, #256]	; (8004d84 <LSPB_calculation+0x23c>)
 8004c82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c8a:	f7fb fcb5 	bl	80005f8 <__aeabi_dmul>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	460c      	mov	r4, r1
 8004c92:	4618      	mov	r0, r3
 8004c94:	4621      	mov	r1, r4
 8004c96:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c9a:	f7fb faf7 	bl	800028c <__adddf3>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	460c      	mov	r4, r1
 8004ca2:	4a3d      	ldr	r2, [pc, #244]	; (8004d98 <LSPB_calculation+0x250>)
 8004ca4:	e9c2 3402 	strd	r3, r4, [r2, #8]
    deacc[2]    = total_s - time_move*(2*veloc + 2*accel*time_dec - accel*time_move)/2;
 8004ca8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	f7fb faec 	bl	800028c <__adddf3>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	460c      	mov	r4, r1
 8004cb8:	461d      	mov	r5, r3
 8004cba:	4626      	mov	r6, r4
 8004cbc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	f7fb fae2 	bl	800028c <__adddf3>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	460c      	mov	r4, r1
 8004ccc:	4618      	mov	r0, r3
 8004cce:	4621      	mov	r1, r4
 8004cd0:	4b2c      	ldr	r3, [pc, #176]	; (8004d84 <LSPB_calculation+0x23c>)
 8004cd2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	4623      	mov	r3, r4
 8004cda:	f7fb fc8d 	bl	80005f8 <__aeabi_dmul>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	460c      	mov	r4, r1
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	4623      	mov	r3, r4
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	4631      	mov	r1, r6
 8004cea:	f7fb facf 	bl	800028c <__adddf3>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	460c      	mov	r4, r1
 8004cf2:	4625      	mov	r5, r4
 8004cf4:	461c      	mov	r4, r3
 8004cf6:	4b21      	ldr	r3, [pc, #132]	; (8004d7c <LSPB_calculation+0x234>)
 8004cf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004cfc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d00:	f7fb fc7a 	bl	80005f8 <__aeabi_dmul>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4620      	mov	r0, r4
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	f7fb fabc 	bl	8000288 <__aeabi_dsub>
 8004d10:	4603      	mov	r3, r0
 8004d12:	460c      	mov	r4, r1
 8004d14:	4618      	mov	r0, r3
 8004d16:	4621      	mov	r1, r4
 8004d18:	4b18      	ldr	r3, [pc, #96]	; (8004d7c <LSPB_calculation+0x234>)
 8004d1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	4623      	mov	r3, r4
 8004d22:	f7fb fc69 	bl	80005f8 <__aeabi_dmul>
 8004d26:	4603      	mov	r3, r0
 8004d28:	460c      	mov	r4, r1
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d36:	f7fb fd89 	bl	800084c <__aeabi_ddiv>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	460c      	mov	r4, r1
 8004d3e:	461a      	mov	r2, r3
 8004d40:	4623      	mov	r3, r4
 8004d42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004d46:	f7fb fa9f 	bl	8000288 <__aeabi_dsub>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	460c      	mov	r4, r1
 8004d4e:	4a12      	ldr	r2, [pc, #72]	; (8004d98 <LSPB_calculation+0x250>)
 8004d50:	e9c2 3404 	strd	r3, r4, [r2, #16]
    accumulate_s = 0;
 8004d54:	4a11      	ldr	r2, [pc, #68]	; (8004d9c <LSPB_calculation+0x254>)
 8004d56:	f04f 0300 	mov.w	r3, #0
 8004d5a:	f04f 0400 	mov.w	r4, #0
 8004d5e:	e9c2 3400 	strd	r3, r4, [r2]
    last_T = 0;
 8004d62:	4a0f      	ldr	r2, [pc, #60]	; (8004da0 <LSPB_calculation+0x258>)
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	f04f 0400 	mov.w	r4, #0
 8004d6c:	e9c2 3400 	strd	r3, r4, [r2]
}
 8004d70:	bf00      	nop
 8004d72:	372c      	adds	r7, #44	; 0x2c
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d78:	3ff33333 	.word	0x3ff33333
 8004d7c:	20006f90 	.word	0x20006f90
 8004d80:	20006f38 	.word	0x20006f38
 8004d84:	20006f58 	.word	0x20006f58
 8004d88:	3fe00000 	.word	0x3fe00000
 8004d8c:	2000dcf8 	.word	0x2000dcf8
 8004d90:	20006f68 	.word	0x20006f68
 8004d94:	bfe00000 	.word	0xbfe00000
 8004d98:	20006f40 	.word	0x20006f40
 8004d9c:	200065c8 	.word	0x200065c8
 8004da0:	2000dd10 	.word	0x2000dd10
 8004da4:	a0000000 	.word	0xa0000000
 8004da8:	3eb0c6f7 	.word	0x3eb0c6f7
 8004dac:	00000000 	.word	0x00000000

08004db0 <accumulate_update>:
void accumulate_update(SCARA_Gcode_Cor_TypeDef gcode_point){
 8004db0:	b084      	sub	sp, #16
 8004db2:	b598      	push	{r3, r4, r7, lr}
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	f107 0410 	add.w	r4, r7, #16
 8004dba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//double temper_s;
	scaraFlowGCODE(&accumulate_s, (double)gcode_point.T*COR_INVERSE_SCALE);
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7fb fbaf 	bl	8000524 <__aeabi_i2d>
 8004dc6:	a312      	add	r3, pc, #72	; (adr r3, 8004e10 <accumulate_update+0x60>)
 8004dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dcc:	f7fb fc14 	bl	80005f8 <__aeabi_dmul>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	460c      	mov	r4, r1
 8004dd4:	ec44 3b17 	vmov	d7, r3, r4
 8004dd8:	eeb0 0a47 	vmov.f32	s0, s14
 8004ddc:	eef0 0a67 	vmov.f32	s1, s15
 8004de0:	480d      	ldr	r0, [pc, #52]	; (8004e18 <accumulate_update+0x68>)
 8004de2:	f003 ff4d 	bl	8008c80 <scaraFlowGCODE>
	//accumulate_s += temper_s;
	last_T = (double)gcode_point.T*COR_INVERSE_SCALE;
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fb fb9b 	bl	8000524 <__aeabi_i2d>
 8004dee:	a308      	add	r3, pc, #32	; (adr r3, 8004e10 <accumulate_update+0x60>)
 8004df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df4:	f7fb fc00 	bl	80005f8 <__aeabi_dmul>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	460c      	mov	r4, r1
 8004dfc:	4a07      	ldr	r2, [pc, #28]	; (8004e1c <accumulate_update+0x6c>)
 8004dfe:	e9c2 3400 	strd	r3, r4, [r2]
}
 8004e02:	bf00      	nop
 8004e04:	46bd      	mov	sp, r7
 8004e06:	e8bd 4098 	ldmia.w	sp!, {r3, r4, r7, lr}
 8004e0a:	b004      	add	sp, #16
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	a0000000 	.word	0xa0000000
 8004e14:	3eb0c6f7 	.word	0x3eb0c6f7
 8004e18:	200065c8 	.word	0x200065c8
 8004e1c:	2000dd10 	.word	0x2000dd10

08004e20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b08a      	sub	sp, #40	; 0x28
 8004e24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e26:	f107 0314 	add.w	r3, r7, #20
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	605a      	str	r2, [r3, #4]
 8004e30:	609a      	str	r2, [r3, #8]
 8004e32:	60da      	str	r2, [r3, #12]
 8004e34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004e36:	2300      	movs	r3, #0
 8004e38:	613b      	str	r3, [r7, #16]
 8004e3a:	4b51      	ldr	r3, [pc, #324]	; (8004f80 <MX_GPIO_Init+0x160>)
 8004e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3e:	4a50      	ldr	r2, [pc, #320]	; (8004f80 <MX_GPIO_Init+0x160>)
 8004e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e44:	6313      	str	r3, [r2, #48]	; 0x30
 8004e46:	4b4e      	ldr	r3, [pc, #312]	; (8004f80 <MX_GPIO_Init+0x160>)
 8004e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4e:	613b      	str	r3, [r7, #16]
 8004e50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	4b4a      	ldr	r3, [pc, #296]	; (8004f80 <MX_GPIO_Init+0x160>)
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	4a49      	ldr	r2, [pc, #292]	; (8004f80 <MX_GPIO_Init+0x160>)
 8004e5c:	f043 0301 	orr.w	r3, r3, #1
 8004e60:	6313      	str	r3, [r2, #48]	; 0x30
 8004e62:	4b47      	ldr	r3, [pc, #284]	; (8004f80 <MX_GPIO_Init+0x160>)
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60bb      	str	r3, [r7, #8]
 8004e72:	4b43      	ldr	r3, [pc, #268]	; (8004f80 <MX_GPIO_Init+0x160>)
 8004e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e76:	4a42      	ldr	r2, [pc, #264]	; (8004f80 <MX_GPIO_Init+0x160>)
 8004e78:	f043 0310 	orr.w	r3, r3, #16
 8004e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e7e:	4b40      	ldr	r3, [pc, #256]	; (8004f80 <MX_GPIO_Init+0x160>)
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e82:	f003 0310 	and.w	r3, r3, #16
 8004e86:	60bb      	str	r3, [r7, #8]
 8004e88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	607b      	str	r3, [r7, #4]
 8004e8e:	4b3c      	ldr	r3, [pc, #240]	; (8004f80 <MX_GPIO_Init+0x160>)
 8004e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e92:	4a3b      	ldr	r2, [pc, #236]	; (8004f80 <MX_GPIO_Init+0x160>)
 8004e94:	f043 0302 	orr.w	r3, r3, #2
 8004e98:	6313      	str	r3, [r2, #48]	; 0x30
 8004e9a:	4b39      	ldr	r3, [pc, #228]	; (8004f80 <MX_GPIO_Init+0x160>)
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	607b      	str	r3, [r7, #4]
 8004ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	603b      	str	r3, [r7, #0]
 8004eaa:	4b35      	ldr	r3, [pc, #212]	; (8004f80 <MX_GPIO_Init+0x160>)
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	4a34      	ldr	r2, [pc, #208]	; (8004f80 <MX_GPIO_Init+0x160>)
 8004eb0:	f043 0308 	orr.w	r3, r3, #8
 8004eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8004eb6:	4b32      	ldr	r3, [pc, #200]	; (8004f80 <MX_GPIO_Init+0x160>)
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	603b      	str	r3, [r7, #0]
 8004ec0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 8004ec8:	482e      	ldr	r0, [pc, #184]	; (8004f84 <MX_GPIO_Init+0x164>)
 8004eca:	f007 f9b3 	bl	800c234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|CAPTURE_ENABLE_Pin|STOP_Pin, GPIO_PIN_RESET);
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f641 0148 	movw	r1, #6216	; 0x1848
 8004ed4:	482c      	ldr	r0, [pc, #176]	; (8004f88 <MX_GPIO_Init+0x168>)
 8004ed6:	f007 f9ad 	bl	800c234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8004eda:	2200      	movs	r2, #0
 8004edc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004ee0:	482a      	ldr	r0, [pc, #168]	; (8004f8c <MX_GPIO_Init+0x16c>)
 8004ee2:	f007 f9a7 	bl	800c234 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 8004ee6:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 8004eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004eec:	2301      	movs	r3, #1
 8004eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ef8:	f107 0314 	add.w	r3, r7, #20
 8004efc:	4619      	mov	r1, r3
 8004efe:	4821      	ldr	r0, [pc, #132]	; (8004f84 <MX_GPIO_Init+0x164>)
 8004f00:	f006 fffe 	bl	800bf00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|CAPTURE_ENABLE_Pin|STOP_Pin;
 8004f04:	f640 0348 	movw	r3, #2120	; 0x848
 8004f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f12:	2300      	movs	r3, #0
 8004f14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f16:	f107 0314 	add.w	r3, r7, #20
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	481a      	ldr	r0, [pc, #104]	; (8004f88 <MX_GPIO_Init+0x168>)
 8004f1e:	f006 ffef 	bl	800bf00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_WRITE_Pin;
 8004f22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f30:	2303      	movs	r3, #3
 8004f32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_WRITE_GPIO_Port, &GPIO_InitStruct);
 8004f34:	f107 0314 	add.w	r3, r7, #20
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4813      	ldr	r0, [pc, #76]	; (8004f88 <MX_GPIO_Init+0x168>)
 8004f3c:	f006 ffe0 	bl	800bf00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CPLD_LIMIT_Pin|CPLD_BUSY_Pin;
 8004f40:	f242 0304 	movw	r3, #8196	; 0x2004
 8004f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f46:	2300      	movs	r3, #0
 8004f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f4e:	f107 0314 	add.w	r3, r7, #20
 8004f52:	4619      	mov	r1, r3
 8004f54:	480c      	ldr	r0, [pc, #48]	; (8004f88 <MX_GPIO_Init+0x168>)
 8004f56:	f006 ffd3 	bl	800bf00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin;
 8004f5a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004f5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f60:	2301      	movs	r3, #1
 8004f62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f64:	2300      	movs	r3, #0
 8004f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f6c:	f107 0314 	add.w	r3, r7, #20
 8004f70:	4619      	mov	r1, r3
 8004f72:	4806      	ldr	r0, [pc, #24]	; (8004f8c <MX_GPIO_Init+0x16c>)
 8004f74:	f006 ffc4 	bl	800bf00 <HAL_GPIO_Init>

}
 8004f78:	bf00      	nop
 8004f7a:	3728      	adds	r7, #40	; 0x28
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	40023800 	.word	0x40023800
 8004f84:	40020400 	.word	0x40020400
 8004f88:	40020c00 	.word	0x40020c00
 8004f8c:	40020000 	.word	0x40020000

08004f90 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 8004f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f92:	b08b      	sub	sp, #44	; 0x2c
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8004f9e:	eeb0 0a47 	vmov.f32	s0, s14
 8004fa2:	eef0 0a67 	vmov.f32	s1, s15
 8004fa6:	f014 fcc7 	bl	8019938 <cos>
 8004faa:	ec51 0b10 	vmov	r0, r1, d0
 8004fae:	a38e      	add	r3, pc, #568	; (adr r3, 80051e8 <kinematicForward+0x258>)
 8004fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb4:	f7fb fb20 	bl	80005f8 <__aeabi_dmul>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	460c      	mov	r4, r1
 8004fbc:	461d      	mov	r5, r3
 8004fbe:	4626      	mov	r6, r4
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8004fcc:	461a      	mov	r2, r3
 8004fce:	4623      	mov	r3, r4
 8004fd0:	f7fb f95c 	bl	800028c <__adddf3>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	460c      	mov	r4, r1
 8004fd8:	ec44 3b17 	vmov	d7, r3, r4
 8004fdc:	eeb0 0a47 	vmov.f32	s0, s14
 8004fe0:	eef0 0a67 	vmov.f32	s1, s15
 8004fe4:	f014 fca8 	bl	8019938 <cos>
 8004fe8:	ec51 0b10 	vmov	r0, r1, d0
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	4b83      	ldr	r3, [pc, #524]	; (8005200 <kinematicForward+0x270>)
 8004ff2:	f7fb fb01 	bl	80005f8 <__aeabi_dmul>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	460c      	mov	r4, r1
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	4623      	mov	r3, r4
 8004ffe:	4628      	mov	r0, r5
 8005000:	4631      	mov	r1, r6
 8005002:	f7fb f943 	bl	800028c <__adddf3>
 8005006:	4603      	mov	r3, r0
 8005008:	460c      	mov	r4, r1
 800500a:	461d      	mov	r5, r3
 800500c:	4626      	mov	r6, r4
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800501a:	461a      	mov	r2, r3
 800501c:	4623      	mov	r3, r4
 800501e:	f7fb f935 	bl	800028c <__adddf3>
 8005022:	4603      	mov	r3, r0
 8005024:	460c      	mov	r4, r1
 8005026:	4618      	mov	r0, r3
 8005028:	4621      	mov	r1, r4
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8005030:	461a      	mov	r2, r3
 8005032:	4623      	mov	r3, r4
 8005034:	f7fb f928 	bl	8000288 <__aeabi_dsub>
 8005038:	4603      	mov	r3, r0
 800503a:	460c      	mov	r4, r1
 800503c:	ec44 3b17 	vmov	d7, r3, r4
 8005040:	eeb0 0a47 	vmov.f32	s0, s14
 8005044:	eef0 0a67 	vmov.f32	s1, s15
 8005048:	f014 fc76 	bl	8019938 <cos>
 800504c:	ec51 0b10 	vmov	r0, r1, d0
 8005050:	a363      	add	r3, pc, #396	; (adr r3, 80051e0 <kinematicForward+0x250>)
 8005052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005056:	f7fb facf 	bl	80005f8 <__aeabi_dmul>
 800505a:	4603      	mov	r3, r0
 800505c:	460c      	mov	r4, r1
	x =   a1*cos(pnt->Theta1)
 800505e:	461a      	mov	r2, r3
 8005060:	4623      	mov	r3, r4
 8005062:	4628      	mov	r0, r5
 8005064:	4631      	mov	r1, r6
 8005066:	f7fb f911 	bl	800028c <__adddf3>
 800506a:	4603      	mov	r3, r0
 800506c:	460c      	mov	r4, r1
 800506e:	e9c7 3408 	strd	r3, r4, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8005078:	eeb0 0a47 	vmov.f32	s0, s14
 800507c:	eef0 0a67 	vmov.f32	s1, s15
 8005080:	f014 fcea 	bl	8019a58 <sin>
 8005084:	ec51 0b10 	vmov	r0, r1, d0
 8005088:	a357      	add	r3, pc, #348	; (adr r3, 80051e8 <kinematicForward+0x258>)
 800508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508e:	f7fb fab3 	bl	80005f8 <__aeabi_dmul>
 8005092:	4603      	mov	r3, r0
 8005094:	460c      	mov	r4, r1
 8005096:	461d      	mov	r5, r3
 8005098:	4626      	mov	r6, r4
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80050a6:	461a      	mov	r2, r3
 80050a8:	4623      	mov	r3, r4
 80050aa:	f7fb f8ef 	bl	800028c <__adddf3>
 80050ae:	4603      	mov	r3, r0
 80050b0:	460c      	mov	r4, r1
 80050b2:	ec44 3b17 	vmov	d7, r3, r4
 80050b6:	eeb0 0a47 	vmov.f32	s0, s14
 80050ba:	eef0 0a67 	vmov.f32	s1, s15
 80050be:	f014 fccb 	bl	8019a58 <sin>
 80050c2:	ec51 0b10 	vmov	r0, r1, d0
 80050c6:	f04f 0200 	mov.w	r2, #0
 80050ca:	4b4d      	ldr	r3, [pc, #308]	; (8005200 <kinematicForward+0x270>)
 80050cc:	f7fb fa94 	bl	80005f8 <__aeabi_dmul>
 80050d0:	4603      	mov	r3, r0
 80050d2:	460c      	mov	r4, r1
 80050d4:	461a      	mov	r2, r3
 80050d6:	4623      	mov	r3, r4
 80050d8:	4628      	mov	r0, r5
 80050da:	4631      	mov	r1, r6
 80050dc:	f7fb f8d6 	bl	800028c <__adddf3>
 80050e0:	4603      	mov	r3, r0
 80050e2:	460c      	mov	r4, r1
 80050e4:	461d      	mov	r5, r3
 80050e6:	4626      	mov	r6, r4
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80050f4:	461a      	mov	r2, r3
 80050f6:	4623      	mov	r3, r4
 80050f8:	f7fb f8c8 	bl	800028c <__adddf3>
 80050fc:	4603      	mov	r3, r0
 80050fe:	460c      	mov	r4, r1
 8005100:	4618      	mov	r0, r3
 8005102:	4621      	mov	r1, r4
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 800510a:	461a      	mov	r2, r3
 800510c:	4623      	mov	r3, r4
 800510e:	f7fb f8bb 	bl	8000288 <__aeabi_dsub>
 8005112:	4603      	mov	r3, r0
 8005114:	460c      	mov	r4, r1
 8005116:	ec44 3b17 	vmov	d7, r3, r4
 800511a:	eeb0 0a47 	vmov.f32	s0, s14
 800511e:	eef0 0a67 	vmov.f32	s1, s15
 8005122:	f014 fc99 	bl	8019a58 <sin>
 8005126:	ec51 0b10 	vmov	r0, r1, d0
 800512a:	a32d      	add	r3, pc, #180	; (adr r3, 80051e0 <kinematicForward+0x250>)
 800512c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005130:	f7fb fa62 	bl	80005f8 <__aeabi_dmul>
 8005134:	4603      	mov	r3, r0
 8005136:	460c      	mov	r4, r1
	y =   a1*sin(pnt->Theta1)
 8005138:	461a      	mov	r2, r3
 800513a:	4623      	mov	r3, r4
 800513c:	4628      	mov	r0, r5
 800513e:	4631      	mov	r1, r6
 8005140:	f7fb f8a4 	bl	800028c <__adddf3>
 8005144:	4603      	mov	r3, r0
 8005146:	460c      	mov	r4, r1
 8005148:	e9c7 3406 	strd	r3, r4, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8005152:	461a      	mov	r2, r3
 8005154:	4623      	mov	r3, r4
 8005156:	a126      	add	r1, pc, #152	; (adr r1, 80051f0 <kinematicForward+0x260>)
 8005158:	e9d1 0100 	ldrd	r0, r1, [r1]
 800515c:	f7fb f894 	bl	8000288 <__aeabi_dsub>
 8005160:	4603      	mov	r3, r0
 8005162:	460c      	mov	r4, r1
 8005164:	4618      	mov	r0, r3
 8005166:	4621      	mov	r1, r4
 8005168:	a323      	add	r3, pc, #140	; (adr r3, 80051f8 <kinematicForward+0x268>)
 800516a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516e:	f7fb f88b 	bl	8000288 <__aeabi_dsub>
 8005172:	4603      	mov	r3, r0
 8005174:	460c      	mov	r4, r1
 8005176:	e9c7 3404 	strd	r3, r4, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8005186:	461a      	mov	r2, r3
 8005188:	4623      	mov	r3, r4
 800518a:	f7fb f87f 	bl	800028c <__adddf3>
 800518e:	4603      	mov	r3, r0
 8005190:	460c      	mov	r4, r1
 8005192:	4618      	mov	r0, r3
 8005194:	4621      	mov	r1, r4
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 800519c:	461a      	mov	r2, r3
 800519e:	4623      	mov	r3, r4
 80051a0:	f7fb f872 	bl	8000288 <__aeabi_dsub>
 80051a4:	4603      	mov	r3, r0
 80051a6:	460c      	mov	r4, r1
 80051a8:	e9c7 3402 	strd	r3, r4, [r7, #8]

	pnt->x = x;
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80051b2:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	pnt->y = y;
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80051bc:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	pnt->z = z;
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80051c6:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	pnt->roll = roll;
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80051d0:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	return TRUE;
 80051d4:	2301      	movs	r3, #1
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	372c      	adds	r7, #44	; 0x2c
 80051da:	46bd      	mov	sp, r7
 80051dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051de:	bf00      	nop
 80051e0:	80000000 	.word	0x80000000
 80051e4:	40402e14 	.word	0x40402e14
 80051e8:	00000000 	.word	0x00000000
 80051ec:	4068a000 	.word	0x4068a000
 80051f0:	00000000 	.word	0x00000000
 80051f4:	406a6000 	.word	0x406a6000
 80051f8:	e0000000 	.word	0xe0000000
 80051fc:	40536b22 	.word	0x40536b22
 8005200:	40640000 	.word	0x40640000
 8005204:	00000000 	.word	0x00000000

08005208 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 8005208:	b082      	sub	sp, #8
 800520a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800520e:	b0a0      	sub	sp, #128	; 0x80
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8005218:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8005222:	a1f2      	add	r1, pc, #968	; (adr r1, 80055ec <kinematicInverse+0x3e4>)
 8005224:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005228:	f7fb f82e 	bl	8000288 <__aeabi_dsub>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	; 0x48
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8005240:	eeb0 0a47 	vmov.f32	s0, s14
 8005244:	eef0 0a67 	vmov.f32	s1, s15
 8005248:	f014 fb76 	bl	8019938 <cos>
 800524c:	ec51 0b10 	vmov	r0, r1, d0
 8005250:	a3e8      	add	r3, pc, #928	; (adr r3, 80055f4 <kinematicInverse+0x3ec>)
 8005252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005256:	f7fb f9cf 	bl	80005f8 <__aeabi_dmul>
 800525a:	4602      	mov	r2, r0
 800525c:	460b      	mov	r3, r1
 800525e:	4650      	mov	r0, sl
 8005260:	4659      	mov	r1, fp
 8005262:	f7fb f811 	bl	8000288 <__aeabi_dsub>
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 800527a:	eeb0 0a47 	vmov.f32	s0, s14
 800527e:	eef0 0a67 	vmov.f32	s1, s15
 8005282:	f014 fbe9 	bl	8019a58 <sin>
 8005286:	ec51 0b10 	vmov	r0, r1, d0
 800528a:	a3da      	add	r3, pc, #872	; (adr r3, 80055f4 <kinematicInverse+0x3ec>)
 800528c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005290:	f7fb f9b2 	bl	80005f8 <__aeabi_dmul>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4650      	mov	r0, sl
 800529a:	4659      	mov	r1, fp
 800529c:	f7fa fff4 	bl	8000288 <__aeabi_dsub>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 80052a8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80052ac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80052b0:	f7fb f9a2 	bl	80005f8 <__aeabi_dmul>
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	4692      	mov	sl, r2
 80052ba:	469b      	mov	fp, r3
 80052bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80052c0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80052c4:	f7fb f998 	bl	80005f8 <__aeabi_dmul>
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	4650      	mov	r0, sl
 80052ce:	4659      	mov	r1, fp
 80052d0:	f7fa ffdc 	bl	800028c <__adddf3>
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	4610      	mov	r0, r2
 80052da:	4619      	mov	r1, r3
 80052dc:	a3c7      	add	r3, pc, #796	; (adr r3, 80055fc <kinematicInverse+0x3f4>)
 80052de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e2:	f7fa ffd1 	bl	8000288 <__aeabi_dsub>
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	4610      	mov	r0, r2
 80052ec:	4619      	mov	r1, r3
 80052ee:	f04f 0200 	mov.w	r2, #0
 80052f2:	4bbb      	ldr	r3, [pc, #748]	; (80055e0 <kinematicInverse+0x3d8>)
 80052f4:	f7fa ffc8 	bl	8000288 <__aeabi_dsub>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	4610      	mov	r0, r2
 80052fe:	4619      	mov	r1, r3
 8005300:	a3b3      	add	r3, pc, #716	; (adr r3, 80055d0 <kinematicInverse+0x3c8>)
 8005302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005306:	f7fb faa1 	bl	800084c <__aeabi_ddiv>
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 8005312:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005316:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800531a:	f7fb f96d 	bl	80005f8 <__aeabi_dmul>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	f04f 0000 	mov.w	r0, #0
 8005326:	49af      	ldr	r1, [pc, #700]	; (80055e4 <kinematicInverse+0x3dc>)
 8005328:	f7fa ffae 	bl	8000288 <__aeabi_dsub>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 8005334:	f04f 0200 	mov.w	r2, #0
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005340:	f7fb fbcc 	bl	8000adc <__aeabi_dcmplt>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <kinematicInverse+0x146>
		return FALSE;
 800534a:	2300      	movs	r3, #0
 800534c:	e136      	b.n	80055bc <kinematicInverse+0x3b4>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 800534e:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8005352:	f014 fc0b 	bl	8019b6c <sqrt>
 8005356:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 800535a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800535c:	63bb      	str	r3, [r7, #56]	; 0x38
 800535e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005360:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005364:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 8005366:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 800536a:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800536e:	f014 fbfb 	bl	8019b68 <atan2>
 8005372:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 8005376:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 800537a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800537e:	f014 fbf3 	bl	8019b68 <atan2>
 8005382:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 8005386:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800538a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800538e:	f7fa ff7b 	bl	8000288 <__aeabi_dsub>
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	4614      	mov	r4, r2
 8005398:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800539c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80053a0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80053a4:	f7fa ff70 	bl	8000288 <__aeabi_dsub>
 80053a8:	4602      	mov	r2, r0
 80053aa:	460b      	mov	r3, r1
 80053ac:	4690      	mov	r8, r2
 80053ae:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80053b2:	4642      	mov	r2, r8
 80053b4:	464b      	mov	r3, r9
 80053b6:	4620      	mov	r0, r4
 80053b8:	4629      	mov	r1, r5
 80053ba:	f7fb fb99 	bl	8000af0 <__aeabi_dcmple>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d008      	beq.n	80053d6 <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 80053c4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80053c8:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 80053cc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80053d0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 80053d4:	e007      	b.n	80053e6 <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 80053d6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80053da:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 80053de:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80053e2:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 80053e6:	f04f 0200 	mov.w	r2, #0
 80053ea:	4b7f      	ldr	r3, [pc, #508]	; (80055e8 <kinematicInverse+0x3e0>)
 80053ec:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80053f0:	f7fb f902 	bl	80005f8 <__aeabi_dmul>
 80053f4:	4603      	mov	r3, r0
 80053f6:	460c      	mov	r4, r1
 80053f8:	4618      	mov	r0, r3
 80053fa:	4621      	mov	r1, r4
 80053fc:	a376      	add	r3, pc, #472	; (adr r3, 80055d8 <kinematicInverse+0x3d0>)
 80053fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005402:	f7fa ff43 	bl	800028c <__adddf3>
 8005406:	4603      	mov	r3, r0
 8005408:	460c      	mov	r4, r1
 800540a:	4618      	mov	r0, r3
 800540c:	4621      	mov	r1, r4
 800540e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005412:	f7fb f8f1 	bl	80005f8 <__aeabi_dmul>
 8005416:	4603      	mov	r3, r0
 8005418:	460c      	mov	r4, r1
 800541a:	4625      	mov	r5, r4
 800541c:	461c      	mov	r4, r3
 800541e:	f04f 0200 	mov.w	r2, #0
 8005422:	4b71      	ldr	r3, [pc, #452]	; (80055e8 <kinematicInverse+0x3e0>)
 8005424:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005428:	f7fb f8e6 	bl	80005f8 <__aeabi_dmul>
 800542c:	4602      	mov	r2, r0
 800542e:	460b      	mov	r3, r1
 8005430:	4610      	mov	r0, r2
 8005432:	4619      	mov	r1, r3
 8005434:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005438:	f7fb f8de 	bl	80005f8 <__aeabi_dmul>
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	4620      	mov	r0, r4
 8005442:	4629      	mov	r1, r5
 8005444:	f7fa ff20 	bl	8000288 <__aeabi_dsub>
 8005448:	4603      	mov	r3, r0
 800544a:	460c      	mov	r4, r1
 800544c:	4625      	mov	r5, r4
 800544e:	461c      	mov	r4, r3
 8005450:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005454:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005458:	f7fb f8ce 	bl	80005f8 <__aeabi_dmul>
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	4690      	mov	r8, r2
 8005462:	4699      	mov	r9, r3
 8005464:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005468:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800546c:	f7fb f8c4 	bl	80005f8 <__aeabi_dmul>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	4640      	mov	r0, r8
 8005476:	4649      	mov	r1, r9
 8005478:	f7fa ff08 	bl	800028c <__adddf3>
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	4620      	mov	r0, r4
 8005482:	4629      	mov	r1, r5
 8005484:	f7fb f9e2 	bl	800084c <__aeabi_ddiv>
 8005488:	4603      	mov	r3, r0
 800548a:	460c      	mov	r4, r1
 800548c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 8005490:	f04f 0200 	mov.w	r2, #0
 8005494:	4b54      	ldr	r3, [pc, #336]	; (80055e8 <kinematicInverse+0x3e0>)
 8005496:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800549a:	f7fb f8ad 	bl	80005f8 <__aeabi_dmul>
 800549e:	4603      	mov	r3, r0
 80054a0:	460c      	mov	r4, r1
 80054a2:	4618      	mov	r0, r3
 80054a4:	4621      	mov	r1, r4
 80054a6:	a34c      	add	r3, pc, #304	; (adr r3, 80055d8 <kinematicInverse+0x3d0>)
 80054a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ac:	f7fa feee 	bl	800028c <__adddf3>
 80054b0:	4603      	mov	r3, r0
 80054b2:	460c      	mov	r4, r1
 80054b4:	4618      	mov	r0, r3
 80054b6:	4621      	mov	r1, r4
 80054b8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80054bc:	f7fb f89c 	bl	80005f8 <__aeabi_dmul>
 80054c0:	4603      	mov	r3, r0
 80054c2:	460c      	mov	r4, r1
 80054c4:	4625      	mov	r5, r4
 80054c6:	461c      	mov	r4, r3
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	4b46      	ldr	r3, [pc, #280]	; (80055e8 <kinematicInverse+0x3e0>)
 80054ce:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80054d2:	f7fb f891 	bl	80005f8 <__aeabi_dmul>
 80054d6:	4602      	mov	r2, r0
 80054d8:	460b      	mov	r3, r1
 80054da:	4610      	mov	r0, r2
 80054dc:	4619      	mov	r1, r3
 80054de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80054e2:	f7fb f889 	bl	80005f8 <__aeabi_dmul>
 80054e6:	4602      	mov	r2, r0
 80054e8:	460b      	mov	r3, r1
 80054ea:	4620      	mov	r0, r4
 80054ec:	4629      	mov	r1, r5
 80054ee:	f7fa fecd 	bl	800028c <__adddf3>
 80054f2:	4603      	mov	r3, r0
 80054f4:	460c      	mov	r4, r1
 80054f6:	4625      	mov	r5, r4
 80054f8:	461c      	mov	r4, r3
 80054fa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80054fe:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005502:	f7fb f879 	bl	80005f8 <__aeabi_dmul>
 8005506:	4602      	mov	r2, r0
 8005508:	460b      	mov	r3, r1
 800550a:	4690      	mov	r8, r2
 800550c:	4699      	mov	r9, r3
 800550e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005512:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005516:	f7fb f86f 	bl	80005f8 <__aeabi_dmul>
 800551a:	4602      	mov	r2, r0
 800551c:	460b      	mov	r3, r1
 800551e:	4640      	mov	r0, r8
 8005520:	4649      	mov	r1, r9
 8005522:	f7fa feb3 	bl	800028c <__adddf3>
 8005526:	4602      	mov	r2, r0
 8005528:	460b      	mov	r3, r1
 800552a:	4620      	mov	r0, r4
 800552c:	4629      	mov	r1, r5
 800552e:	f7fb f98d 	bl	800084c <__aeabi_ddiv>
 8005532:	4603      	mov	r3, r0
 8005534:	460c      	mov	r4, r1
 8005536:	e9c7 3406 	strd	r3, r4, [r7, #24]
	theta1 = atan2(s1,c1);
 800553a:	ed97 1b06 	vldr	d1, [r7, #24]
 800553e:	ed97 0b08 	vldr	d0, [r7, #32]
 8005542:	f014 fb11 	bl	8019b68 <atan2>
 8005546:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 800554a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800554e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005552:	f7fa fe9b 	bl	800028c <__adddf3>
 8005556:	4603      	mov	r3, r0
 8005558:	460c      	mov	r4, r1
 800555a:	4618      	mov	r0, r3
 800555c:	4621      	mov	r1, r4
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8005564:	461a      	mov	r2, r3
 8005566:	4623      	mov	r3, r4
 8005568:	f7fa fe8e 	bl	8000288 <__aeabi_dsub>
 800556c:	4603      	mov	r3, r0
 800556e:	460c      	mov	r4, r1
 8005570:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 8005574:	ed97 3b02 	vldr	d3, [r7, #8]
 8005578:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 800557c:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 8005580:	ed97 0b04 	vldr	d0, [r7, #16]
 8005584:	f004 ff44 	bl	800a410 <scaraCheckWorkSpace4>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <kinematicInverse+0x38a>
		return FALSE; // Over workspace !!!
 800558e:	2300      	movs	r3, #0
 8005590:	e014      	b.n	80055bc <kinematicInverse+0x3b4>
	}
	pnt->Theta1 = theta1;
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005598:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	pnt->Theta2 = theta2;
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80055a2:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	pnt->D3		= d3;
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80055ac:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	pnt->Theta4 = theta4;
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80055b6:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	return TRUE; // All is well
 80055ba:	2301      	movs	r3, #1
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3780      	adds	r7, #128	; 0x80
 80055c0:	46bd      	mov	sp, r7
 80055c2:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055c6:	b002      	add	sp, #8
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	f3af 8000 	nop.w
 80055d0:	00000000 	.word	0x00000000
 80055d4:	40eec800 	.word	0x40eec800
 80055d8:	00000000 	.word	0x00000000
 80055dc:	4068a000 	.word	0x4068a000
 80055e0:	40d90000 	.word	0x40d90000
 80055e4:	3ff00000 	.word	0x3ff00000
 80055e8:	40640000 	.word	0x40640000
 80055ec:	80000000 	.word	0x80000000
 80055f0:	4060aa6e 	.word	0x4060aa6e
 80055f4:	80000000 	.word	0x80000000
 80055f8:	40402e14 	.word	0x40402e14
 80055fc:	00000000 	.word	0x00000000
 8005600:	40e2f320 	.word	0x40e2f320

08005604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005608:	f005 ff96 	bl	800b538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800560c:	f000 f812 	bl	8005634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005610:	f7ff fc06 	bl	8004e20 <MX_GPIO_Init>
  MX_DMA_Init();
 8005614:	f7fc ff8a 	bl	800252c <MX_DMA_Init>
  MX_UART4_Init();
 8005618:	f005 fe90 	bl	800b33c <MX_UART4_Init>
  MX_FSMC_Init();
 800561c:	f7fe ff9c 	bl	8004558 <MX_FSMC_Init>
  MX_TIM7_Init();
 8005620:	f005 fe1a 	bl	800b258 <MX_TIM7_Init>
  MX_TIM2_Init();
 8005624:	f005 fdca 	bl	800b1bc <MX_TIM2_Init>
  //lowlayer_writePulse(0, 0, 0, 0);
  //HAL_Delay(10);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8005628:	f7fc ffba 	bl	80025a0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800562c:	f00c ffe5 	bl	80125fa <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 8005630:	e7fe      	b.n	8005630 <main+0x2c>
	...

08005634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b094      	sub	sp, #80	; 0x50
 8005638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800563a:	f107 0320 	add.w	r3, r7, #32
 800563e:	2230      	movs	r2, #48	; 0x30
 8005640:	2100      	movs	r1, #0
 8005642:	4618      	mov	r0, r3
 8005644:	f010 fbae 	bl	8015da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005648:	f107 030c 	add.w	r3, r7, #12
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	605a      	str	r2, [r3, #4]
 8005652:	609a      	str	r2, [r3, #8]
 8005654:	60da      	str	r2, [r3, #12]
 8005656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005658:	2300      	movs	r3, #0
 800565a:	60bb      	str	r3, [r7, #8]
 800565c:	4b28      	ldr	r3, [pc, #160]	; (8005700 <SystemClock_Config+0xcc>)
 800565e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005660:	4a27      	ldr	r2, [pc, #156]	; (8005700 <SystemClock_Config+0xcc>)
 8005662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005666:	6413      	str	r3, [r2, #64]	; 0x40
 8005668:	4b25      	ldr	r3, [pc, #148]	; (8005700 <SystemClock_Config+0xcc>)
 800566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005670:	60bb      	str	r3, [r7, #8]
 8005672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005674:	2300      	movs	r3, #0
 8005676:	607b      	str	r3, [r7, #4]
 8005678:	4b22      	ldr	r3, [pc, #136]	; (8005704 <SystemClock_Config+0xd0>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a21      	ldr	r2, [pc, #132]	; (8005704 <SystemClock_Config+0xd0>)
 800567e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005682:	6013      	str	r3, [r2, #0]
 8005684:	4b1f      	ldr	r3, [pc, #124]	; (8005704 <SystemClock_Config+0xd0>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800568c:	607b      	str	r3, [r7, #4]
 800568e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005690:	2301      	movs	r3, #1
 8005692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005694:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005698:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800569a:	2302      	movs	r3, #2
 800569c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800569e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80056a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80056a4:	2308      	movs	r3, #8
 80056a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80056a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80056ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80056ae:	2302      	movs	r3, #2
 80056b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80056b2:	2307      	movs	r3, #7
 80056b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80056b6:	f107 0320 	add.w	r3, r7, #32
 80056ba:	4618      	mov	r0, r3
 80056bc:	f007 ffae 	bl	800d61c <HAL_RCC_OscConfig>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80056c6:	f000 f831 	bl	800572c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80056ca:	230f      	movs	r3, #15
 80056cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80056ce:	2302      	movs	r3, #2
 80056d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80056d2:	2300      	movs	r3, #0
 80056d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80056d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80056da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80056dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80056e2:	f107 030c 	add.w	r3, r7, #12
 80056e6:	2105      	movs	r1, #5
 80056e8:	4618      	mov	r0, r3
 80056ea:	f008 fa07 	bl	800dafc <HAL_RCC_ClockConfig>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80056f4:	f000 f81a 	bl	800572c <Error_Handler>
  }
}
 80056f8:	bf00      	nop
 80056fa:	3750      	adds	r7, #80	; 0x50
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	40023800 	.word	0x40023800
 8005704:	40007000 	.word	0x40007000

08005708 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a04      	ldr	r2, [pc, #16]	; (8005728 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d101      	bne.n	800571e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800571a:	f005 ff2f 	bl	800b57c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800571e:	bf00      	nop
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	40001000 	.word	0x40001000

0800572c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800572c:	b480      	push	{r7}
 800572e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005730:	bf00      	nop
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	460b      	mov	r3, r1
 8005744:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800574c:	3308      	adds	r3, #8
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <ringBuff_PushChar+0x1e>
		return FALSE;
 8005754:	2300      	movs	r3, #0
 8005756:	e02e      	b.n	80057b6 <ringBuff_PushChar+0x7c>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	78f9      	ldrb	r1, [r7, #3]
 8005764:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3301      	adds	r3, #1
 8005770:	425a      	negs	r2, r3
 8005772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005776:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800577a:	bf58      	it	pl
 800577c:	4253      	negpl	r3, r2
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005784:	6013      	str	r3, [r2, #0]
			if (ringbuff->head == ringbuff->tail) {
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005794:	3304      	adds	r3, #4
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	429a      	cmp	r2, r3
 800579a:	d105      	bne.n	80057a8 <ringBuff_PushChar+0x6e>
				ringbuff->isFull_Flag = TRUE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057a2:	3308      	adds	r3, #8
 80057a4:	2201      	movs	r2, #1
 80057a6:	701a      	strb	r2, [r3, #0]
			}
			ringbuff->isEmpty_Flag = FALSE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ae:	3309      	adds	r3, #9
 80057b0:	2200      	movs	r2, #0
 80057b2:	701a      	strb	r2, [r3, #0]
			return TRUE;
 80057b4:	2301      	movs	r3, #1
	}
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
 80057ca:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057d2:	3309      	adds	r3, #9
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <ringBuff_PopChar+0x1c>
		return FALSE;
 80057da:	2300      	movs	r3, #0
 80057dc:	e032      	b.n	8005844 <ringBuff_PopChar+0x82>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057e4:	3304      	adds	r3, #4
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	5cd2      	ldrb	r2, [r2, r3]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057f6:	3304      	adds	r3, #4
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3301      	adds	r3, #1
 80057fc:	4259      	negs	r1, r3
 80057fe:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8005802:	f3c1 030b 	ubfx	r3, r1, #0, #12
 8005806:	bf58      	it	pl
 8005808:	425a      	negpl	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005810:	3304      	adds	r3, #4
 8005812:	601a      	str	r2, [r3, #0]
			if (ringbuff->head == ringbuff->tail) {
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005822:	3304      	adds	r3, #4
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	429a      	cmp	r2, r3
 8005828:	d105      	bne.n	8005836 <ringBuff_PopChar+0x74>
				ringbuff->isEmpty_Flag = TRUE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005830:	3309      	adds	r3, #9
 8005832:	2201      	movs	r2, #1
 8005834:	701a      	strb	r2, [r3, #0]
			}
			ringbuff->isFull_Flag = FALSE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800583c:	3308      	adds	r3, #8
 800583e:	2200      	movs	r2, #0
 8005840:	701a      	strb	r2, [r3, #0]
			return TRUE;
 8005842:	2301      	movs	r3, #1
	}
}
 8005844:	4618      	mov	r0, r3
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 800585c:	2300      	movs	r3, #0
 800585e:	82fb      	strh	r3, [r7, #22]
 8005860:	e011      	b.n	8005886 <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 8005862:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	4413      	add	r3, r2
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	4619      	mov	r1, r3
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f7ff ff63 	bl	800573a <ringBuff_PushChar>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00b      	beq.n	8005892 <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 800587a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800587e:	b29b      	uxth	r3, r3
 8005880:	3301      	adds	r3, #1
 8005882:	b29b      	uxth	r3, r3
 8005884:	82fb      	strh	r3, [r7, #22]
 8005886:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	429a      	cmp	r2, r3
 800588e:	dce8      	bgt.n	8005862 <ringBuff_PushArray+0x12>
 8005890:	e000      	b.n	8005894 <ringBuff_PushArray+0x44>
			break;
 8005892:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 8005894:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3718      	adds	r7, #24
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 80058ac:	2300      	movs	r3, #0
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	e00c      	b.n	80058cc <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	4413      	add	r3, r2
 80058b8:	4619      	mov	r1, r3
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f7ff ff81 	bl	80057c2 <ringBuff_PopChar>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d007      	beq.n	80058d6 <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	3301      	adds	r3, #1
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	dbee      	blt.n	80058b2 <ringBuff_PopArray+0x12>
 80058d4:	e000      	b.n	80058d8 <ringBuff_PopArray+0x38>
			break;
 80058d6:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 80058d8:	697b      	ldr	r3, [r7, #20]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3718      	adds	r7, #24
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, const char* cmp_char) {
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b088      	sub	sp, #32
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
 80058ea:	6039      	str	r1, [r7, #0]
	int32_t index = ringbuff->tail;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058f2:	3304      	adds	r3, #4
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	61fb      	str	r3, [r7, #28]
	int32_t distance = 0;
 80058f8:	2300      	movs	r3, #0
 80058fa:	61bb      	str	r3, [r7, #24]
	int32_t sync_state = 0;
 80058fc:	2300      	movs	r3, #0
 80058fe:	617b      	str	r3, [r7, #20]
	int32_t head_ptr = ringbuff->head;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	60fb      	str	r3, [r7, #12]
	int32_t number_of_state = strlen(cmp_char);
 800590a:	6838      	ldr	r0, [r7, #0]
 800590c:	f7fa fc60 	bl	80001d0 <strlen>
 8005910:	4603      	mov	r3, r0
 8005912:	60bb      	str	r3, [r7, #8]
	if (ringbuff->isFull_Flag) {
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800591a:	3308      	adds	r3, #8
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d066      	beq.n	80059f0 <ringBuff_DistanceOf+0x10e>
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8005922:	2300      	movs	r3, #0
 8005924:	613b      	str	r3, [r7, #16]
 8005926:	e030      	b.n	800598a <ringBuff_DistanceOf+0xa8>
	            if(ringbuff->Array[index] == cmp_char[sync_state]){
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	4413      	add	r3, r2
 800592e:	781a      	ldrb	r2, [r3, #0]
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	6839      	ldr	r1, [r7, #0]
 8005934:	440b      	add	r3, r1
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	429a      	cmp	r2, r3
 800593a:	d103      	bne.n	8005944 <ringBuff_DistanceOf+0x62>
	                sync_state++;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	3301      	adds	r3, #1
 8005940:	617b      	str	r3, [r7, #20]
 8005942:	e00c      	b.n	800595e <ringBuff_DistanceOf+0x7c>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	4413      	add	r3, r2
 800594a:	781a      	ldrb	r2, [r3, #0]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	429a      	cmp	r2, r3
 8005952:	d102      	bne.n	800595a <ringBuff_DistanceOf+0x78>
	                sync_state = 1;
 8005954:	2301      	movs	r3, #1
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	e001      	b.n	800595e <ringBuff_DistanceOf+0x7c>
	            }else{
	                sync_state = 0;
 800595a:	2300      	movs	r3, #0
 800595c:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	429a      	cmp	r2, r3
 8005964:	d101      	bne.n	800596a <ringBuff_DistanceOf+0x88>
	                return distance;
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	e048      	b.n	80059fc <ringBuff_DistanceOf+0x11a>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	3301      	adds	r3, #1
 800596e:	61bb      	str	r3, [r7, #24]
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	3301      	adds	r3, #1
 8005974:	613b      	str	r3, [r7, #16]
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	3301      	adds	r3, #1
 800597a:	425a      	negs	r2, r3
 800597c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005980:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005984:	bf58      	it	pl
 8005986:	4253      	negpl	r3, r2
 8005988:	61fb      	str	r3, [r7, #28]
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005990:	dbca      	blt.n	8005928 <ringBuff_DistanceOf+0x46>
 8005992:	e031      	b.n	80059f8 <ringBuff_DistanceOf+0x116>
	        }
	} else {
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
	        if(ringbuff->Array[index] == cmp_char[sync_state]){
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	4413      	add	r3, r2
 800599a:	781a      	ldrb	r2, [r3, #0]
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	6839      	ldr	r1, [r7, #0]
 80059a0:	440b      	add	r3, r1
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d103      	bne.n	80059b0 <ringBuff_DistanceOf+0xce>
	                //LOG_REPORT("dis1", ringbuff->.tail);
	                sync_state++;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	3301      	adds	r3, #1
 80059ac:	617b      	str	r3, [r7, #20]
 80059ae:	e00c      	b.n	80059ca <ringBuff_DistanceOf+0xe8>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	4413      	add	r3, r2
 80059b6:	781a      	ldrb	r2, [r3, #0]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d102      	bne.n	80059c6 <ringBuff_DistanceOf+0xe4>
	                sync_state = 1;
 80059c0:	2301      	movs	r3, #1
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	e001      	b.n	80059ca <ringBuff_DistanceOf+0xe8>
	            }else{
	                sync_state = 0;
 80059c6:	2300      	movs	r3, #0
 80059c8:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d101      	bne.n	80059d6 <ringBuff_DistanceOf+0xf4>
	                //LOG_REPORT("dis", distance);
	                return distance;
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	e012      	b.n	80059fc <ringBuff_DistanceOf+0x11a>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	3301      	adds	r3, #1
 80059da:	61bb      	str	r3, [r7, #24]
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	3301      	adds	r3, #1
 80059e0:	425a      	negs	r2, r3
 80059e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059e6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80059ea:	bf58      	it	pl
 80059ec:	4253      	negpl	r3, r2
 80059ee:	61fb      	str	r3, [r7, #28]
 80059f0:	69fa      	ldr	r2, [r7, #28]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d1cd      	bne.n	8005994 <ringBuff_DistanceOf+0xb2>
	        }
	    //LOG_REPORT("hai", 2);
	}

	return -1;
 80059f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3720      	adds	r7, #32
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {3, 5, 5, 10};

void	lowlayer_scanReset(void) {
 8005a04:	b580      	push	{r7, lr}
 8005a06:	af00      	add	r7, sp, #0
	lowlayer_resetEncoder();
 8005a08:	f000 fdfe 	bl	8006608 <lowlayer_resetEncoder>
	pulse_accumulate[0] = 0;
 8005a0c:	4b10      	ldr	r3, [pc, #64]	; (8005a50 <lowlayer_scanReset+0x4c>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]
	pulse_accumulate[1] = 0;
 8005a12:	4b0f      	ldr	r3, [pc, #60]	; (8005a50 <lowlayer_scanReset+0x4c>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	605a      	str	r2, [r3, #4]
	pulse_accumulate[2] = 0;
 8005a18:	4b0d      	ldr	r3, [pc, #52]	; (8005a50 <lowlayer_scanReset+0x4c>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	609a      	str	r2, [r3, #8]
	pulse_accumulate[3] = 0;
 8005a1e:	4b0c      	ldr	r3, [pc, #48]	; (8005a50 <lowlayer_scanReset+0x4c>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	60da      	str	r2, [r3, #12]

	position_encoder[0] = 0;
 8005a24:	4b0b      	ldr	r3, [pc, #44]	; (8005a54 <lowlayer_scanReset+0x50>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]
	position_encoder[1] = 0;
 8005a2a:	4b0a      	ldr	r3, [pc, #40]	; (8005a54 <lowlayer_scanReset+0x50>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	605a      	str	r2, [r3, #4]
	position_encoder[2] = 0;
 8005a30:	4b08      	ldr	r3, [pc, #32]	; (8005a54 <lowlayer_scanReset+0x50>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	609a      	str	r2, [r3, #8]

	scan_flag = 0;
 8005a36:	4b08      	ldr	r3, [pc, #32]	; (8005a58 <lowlayer_scanReset+0x54>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 8005a3c:	4b07      	ldr	r3, [pc, #28]	; (8005a5c <lowlayer_scanReset+0x58>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 8005a42:	2200      	movs	r2, #0
 8005a44:	2108      	movs	r1, #8
 8005a46:	4806      	ldr	r0, [pc, #24]	; (8005a60 <lowlayer_scanReset+0x5c>)
 8005a48:	f006 fbf4 	bl	800c234 <HAL_GPIO_WritePin>
}
 8005a4c:	bf00      	nop
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	2000de88 	.word	0x2000de88
 8005a54:	2000de9c 	.word	0x2000de9c
 8005a58:	2000de98 	.word	0x2000de98
 8005a5c:	2000deb8 	.word	0x2000deb8
 8005a60:	40020c00 	.word	0x40020c00
 8005a64:	00000000 	.word	0x00000000

08005a68 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 8005a68:	b590      	push	{r4, r7, lr}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 8005a6e:	2300      	movs	r3, #0
 8005a70:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 8005a72:	f000 fe87 	bl	8006784 <lowlayer_updateLimit>
	if (state_scan < 4) {
 8005a76:	4b98      	ldr	r3, [pc, #608]	; (8005cd8 <lowlayer_scanFlow+0x270>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b03      	cmp	r3, #3
 8005a7c:	d837      	bhi.n	8005aee <lowlayer_scanFlow+0x86>
		if (limit_switch[3 - state_scan] == 0) {
 8005a7e:	4b96      	ldr	r3, [pc, #600]	; (8005cd8 <lowlayer_scanFlow+0x270>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	f1c3 0303 	rsb	r3, r3, #3
 8005a86:	4a95      	ldr	r2, [pc, #596]	; (8005cdc <lowlayer_scanFlow+0x274>)
 8005a88:	5cd3      	ldrb	r3, [r2, r3]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d121      	bne.n	8005ad2 <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 8005a8e:	4b92      	ldr	r3, [pc, #584]	; (8005cd8 <lowlayer_scanFlow+0x270>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	f1c3 0203 	rsb	r2, r3, #3
 8005a96:	4b90      	ldr	r3, [pc, #576]	; (8005cd8 <lowlayer_scanFlow+0x270>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	f1c3 0303 	rsb	r3, r3, #3
 8005a9e:	4990      	ldr	r1, [pc, #576]	; (8005ce0 <lowlayer_scanFlow+0x278>)
 8005aa0:	568a      	ldrsb	r2, [r1, r2]
 8005aa2:	f107 0108 	add.w	r1, r7, #8
 8005aa6:	440b      	add	r3, r1
 8005aa8:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 8005aac:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	425b      	negs	r3, r3
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	b258      	sxtb	r0, r3
 8005ab8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005abc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	425b      	negs	r3, r3
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	b25a      	sxtb	r2, r3
 8005ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005acc:	f000 fcd8 	bl	8006480 <lowlayer_writePulse>
 8005ad0:	e00b      	b.n	8005aea <lowlayer_scanFlow+0x82>
		} else {
			state_scan++;
 8005ad2:	4b81      	ldr	r3, [pc, #516]	; (8005cd8 <lowlayer_scanFlow+0x270>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	4b7f      	ldr	r3, [pc, #508]	; (8005cd8 <lowlayer_scanFlow+0x270>)
 8005adc:	701a      	strb	r2, [r3, #0]
			lowlayer_writePulse(0, 0, 0, 0);
 8005ade:	2300      	movs	r3, #0
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	f000 fccb 	bl	8006480 <lowlayer_writePulse>
		}

		return FALSE;
 8005aea:	2300      	movs	r3, #0
 8005aec:	e0d8      	b.n	8005ca0 <lowlayer_scanFlow+0x238>
	} else {
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 8005aee:	2201      	movs	r2, #1
 8005af0:	2108      	movs	r1, #8
 8005af2:	487c      	ldr	r0, [pc, #496]	; (8005ce4 <lowlayer_scanFlow+0x27c>)
 8005af4:	f006 fb9e 	bl	800c234 <HAL_GPIO_WritePin>
		lowlayer_updateCapture();
 8005af8:	f000 fe28 	bl	800674c <lowlayer_updateCapture>
		lowlayer_writePulse(0, 0, 0, 0);
 8005afc:	2300      	movs	r3, #0
 8005afe:	2200      	movs	r2, #0
 8005b00:	2100      	movs	r1, #0
 8005b02:	2000      	movs	r0, #0
 8005b04:	f000 fcbc 	bl	8006480 <lowlayer_writePulse>
		scan_flag = 1;
 8005b08:	4b77      	ldr	r3, [pc, #476]	; (8005ce8 <lowlayer_scanFlow+0x280>)
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	701a      	strb	r2, [r3, #0]
		// Update offset
		offset_encoder[0] 	= position_capture[0];
 8005b0e:	4b77      	ldr	r3, [pc, #476]	; (8005cec <lowlayer_scanFlow+0x284>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a77      	ldr	r2, [pc, #476]	; (8005cf0 <lowlayer_scanFlow+0x288>)
 8005b14:	6013      	str	r3, [r2, #0]
		offset_encoder[1] 	= position_capture[1];
 8005b16:	4b75      	ldr	r3, [pc, #468]	; (8005cec <lowlayer_scanFlow+0x284>)
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	4a75      	ldr	r2, [pc, #468]	; (8005cf0 <lowlayer_scanFlow+0x288>)
 8005b1c:	6053      	str	r3, [r2, #4]
		offset_encoder[2] 	= position_capture[2];
 8005b1e:	4b73      	ldr	r3, [pc, #460]	; (8005cec <lowlayer_scanFlow+0x284>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	4a73      	ldr	r2, [pc, #460]	; (8005cf0 <lowlayer_scanFlow+0x288>)
 8005b24:	6093      	str	r3, [r2, #8]
		offset_stepper		= pulse_accumulate[3];
 8005b26:	4b73      	ldr	r3, [pc, #460]	; (8005cf4 <lowlayer_scanFlow+0x28c>)
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	4a73      	ldr	r2, [pc, #460]	; (8005cf8 <lowlayer_scanFlow+0x290>)
 8005b2c:	6013      	str	r3, [r2, #0]
		// LOG offset
		LOG_REPORT("offset encoder 0", offset_encoder[0]);
 8005b2e:	4b70      	ldr	r3, [pc, #448]	; (8005cf0 <lowlayer_scanFlow+0x288>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	4619      	mov	r1, r3
 8005b36:	4871      	ldr	r0, [pc, #452]	; (8005cfc <lowlayer_scanFlow+0x294>)
 8005b38:	f7fc fc40 	bl	80023bc <LOG_REPORT>
		LOG_REPORT("offset encoder 1", offset_encoder[1]);
 8005b3c:	4b6c      	ldr	r3, [pc, #432]	; (8005cf0 <lowlayer_scanFlow+0x288>)
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	4619      	mov	r1, r3
 8005b44:	486e      	ldr	r0, [pc, #440]	; (8005d00 <lowlayer_scanFlow+0x298>)
 8005b46:	f7fc fc39 	bl	80023bc <LOG_REPORT>
		LOG_REPORT("offset encoder 2", offset_encoder[2]);
 8005b4a:	4b69      	ldr	r3, [pc, #420]	; (8005cf0 <lowlayer_scanFlow+0x288>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	4619      	mov	r1, r3
 8005b52:	486c      	ldr	r0, [pc, #432]	; (8005d04 <lowlayer_scanFlow+0x29c>)
 8005b54:	f7fc fc32 	bl	80023bc <LOG_REPORT>
		LOG_REPORT("offset stepper", offset_stepper);
 8005b58:	4b67      	ldr	r3, [pc, #412]	; (8005cf8 <lowlayer_scanFlow+0x290>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4869      	ldr	r0, [pc, #420]	; (8005d08 <lowlayer_scanFlow+0x2a0>)
 8005b62:	f7fc fc2b 	bl	80023bc <LOG_REPORT>

		offset_setpoint[0]	= HARD_LIM0_NEG
				- DIR_ENCODER_0*offset_encoder[0]*2.0*PI/ENCODER_J0;
 8005b66:	4b62      	ldr	r3, [pc, #392]	; (8005cf0 <lowlayer_scanFlow+0x288>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	ee07 3a90 	vmov	s15, r3
 8005b6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b72:	ee17 0a90 	vmov	r0, s15
 8005b76:	f7fa fce7 	bl	8000548 <__aeabi_f2d>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	f7fa fb85 	bl	800028c <__adddf3>
 8005b82:	4603      	mov	r3, r0
 8005b84:	460c      	mov	r4, r1
 8005b86:	4618      	mov	r0, r3
 8005b88:	4621      	mov	r1, r4
 8005b8a:	a347      	add	r3, pc, #284	; (adr r3, 8005ca8 <lowlayer_scanFlow+0x240>)
 8005b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b90:	f7fa fd32 	bl	80005f8 <__aeabi_dmul>
 8005b94:	4603      	mov	r3, r0
 8005b96:	460c      	mov	r4, r1
 8005b98:	4618      	mov	r0, r3
 8005b9a:	4621      	mov	r1, r4
 8005b9c:	a344      	add	r3, pc, #272	; (adr r3, 8005cb0 <lowlayer_scanFlow+0x248>)
 8005b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba2:	f7fa fe53 	bl	800084c <__aeabi_ddiv>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	460c      	mov	r4, r1
 8005baa:	461a      	mov	r2, r3
 8005bac:	4623      	mov	r3, r4
 8005bae:	a142      	add	r1, pc, #264	; (adr r1, 8005cb8 <lowlayer_scanFlow+0x250>)
 8005bb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bb4:	f7fa fb68 	bl	8000288 <__aeabi_dsub>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	460c      	mov	r4, r1
		offset_setpoint[0]	= HARD_LIM0_NEG
 8005bbc:	4a53      	ldr	r2, [pc, #332]	; (8005d0c <lowlayer_scanFlow+0x2a4>)
 8005bbe:	e9c2 3400 	strd	r3, r4, [r2]
		offset_setpoint[1]	= HARD_LIM1_POS
				- DIR_ENCODER_1*offset_encoder[1]*2.0*PI/ENCODER_J1;
 8005bc2:	4b4b      	ldr	r3, [pc, #300]	; (8005cf0 <lowlayer_scanFlow+0x288>)
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	ee07 3a90 	vmov	s15, r3
 8005bca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bce:	ee17 0a90 	vmov	r0, s15
 8005bd2:	f7fa fcb9 	bl	8000548 <__aeabi_f2d>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	460b      	mov	r3, r1
 8005bda:	f7fa fb57 	bl	800028c <__adddf3>
 8005bde:	4603      	mov	r3, r0
 8005be0:	460c      	mov	r4, r1
 8005be2:	4618      	mov	r0, r3
 8005be4:	4621      	mov	r1, r4
 8005be6:	a330      	add	r3, pc, #192	; (adr r3, 8005ca8 <lowlayer_scanFlow+0x240>)
 8005be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bec:	f7fa fd04 	bl	80005f8 <__aeabi_dmul>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	460c      	mov	r4, r1
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	4621      	mov	r1, r4
 8005bf8:	f04f 0200 	mov.w	r2, #0
 8005bfc:	4b44      	ldr	r3, [pc, #272]	; (8005d10 <lowlayer_scanFlow+0x2a8>)
 8005bfe:	f7fa fe25 	bl	800084c <__aeabi_ddiv>
 8005c02:	4603      	mov	r3, r0
 8005c04:	460c      	mov	r4, r1
 8005c06:	461a      	mov	r2, r3
 8005c08:	4623      	mov	r3, r4
 8005c0a:	a12d      	add	r1, pc, #180	; (adr r1, 8005cc0 <lowlayer_scanFlow+0x258>)
 8005c0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c10:	f7fa fb3a 	bl	8000288 <__aeabi_dsub>
 8005c14:	4603      	mov	r3, r0
 8005c16:	460c      	mov	r4, r1
		offset_setpoint[1]	= HARD_LIM1_POS
 8005c18:	4a3c      	ldr	r2, [pc, #240]	; (8005d0c <lowlayer_scanFlow+0x2a4>)
 8005c1a:	e9c2 3402 	strd	r3, r4, [r2, #8]
		offset_setpoint[2]	= HARD_LIM2_NEG
				- DIR_ENCODER_2*offset_encoder[2]/ENCODER_J2;
 8005c1e:	4b34      	ldr	r3, [pc, #208]	; (8005cf0 <lowlayer_scanFlow+0x288>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	ee07 3a90 	vmov	s15, r3
 8005c26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c2a:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8005d14 <lowlayer_scanFlow+0x2ac>
 8005c2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c32:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8005d18 <lowlayer_scanFlow+0x2b0>
 8005c36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c3a:	ee17 0a90 	vmov	r0, s15
 8005c3e:	f7fa fc83 	bl	8000548 <__aeabi_f2d>
 8005c42:	4603      	mov	r3, r0
 8005c44:	460c      	mov	r4, r1
		offset_setpoint[2]	= HARD_LIM2_NEG
 8005c46:	4a31      	ldr	r2, [pc, #196]	; (8005d0c <lowlayer_scanFlow+0x2a4>)
 8005c48:	e9c2 3404 	strd	r3, r4, [r2, #16]
		offset_setpoint[3]  = HARD_LIM3_POS
				- offset_stepper*2.0*PI/GEAR_J3;
 8005c4c:	4b2a      	ldr	r3, [pc, #168]	; (8005cf8 <lowlayer_scanFlow+0x290>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7fa fc67 	bl	8000524 <__aeabi_i2d>
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	f7fa fb17 	bl	800028c <__adddf3>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	460c      	mov	r4, r1
 8005c62:	4618      	mov	r0, r3
 8005c64:	4621      	mov	r1, r4
 8005c66:	a310      	add	r3, pc, #64	; (adr r3, 8005ca8 <lowlayer_scanFlow+0x240>)
 8005c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6c:	f7fa fcc4 	bl	80005f8 <__aeabi_dmul>
 8005c70:	4603      	mov	r3, r0
 8005c72:	460c      	mov	r4, r1
 8005c74:	4618      	mov	r0, r3
 8005c76:	4621      	mov	r1, r4
 8005c78:	a313      	add	r3, pc, #76	; (adr r3, 8005cc8 <lowlayer_scanFlow+0x260>)
 8005c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7e:	f7fa fde5 	bl	800084c <__aeabi_ddiv>
 8005c82:	4603      	mov	r3, r0
 8005c84:	460c      	mov	r4, r1
 8005c86:	461a      	mov	r2, r3
 8005c88:	4623      	mov	r3, r4
 8005c8a:	a111      	add	r1, pc, #68	; (adr r1, 8005cd0 <lowlayer_scanFlow+0x268>)
 8005c8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c90:	f7fa fafa 	bl	8000288 <__aeabi_dsub>
 8005c94:	4603      	mov	r3, r0
 8005c96:	460c      	mov	r4, r1
		offset_setpoint[3]  = HARD_LIM3_POS
 8005c98:	4a1c      	ldr	r2, [pc, #112]	; (8005d0c <lowlayer_scanFlow+0x2a4>)
 8005c9a:	e9c2 3406 	strd	r3, r4, [r2, #24]

		return TRUE;
 8005c9e:	2301      	movs	r3, #1
	}
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd90      	pop	{r4, r7, pc}
 8005ca8:	60000000 	.word	0x60000000
 8005cac:	400921fb 	.word	0x400921fb
 8005cb0:	00000000 	.word	0x00000000
 8005cb4:	40f38800 	.word	0x40f38800
 8005cb8:	40000000 	.word	0x40000000
 8005cbc:	bff9f17a 	.word	0xbff9f17a
 8005cc0:	80000000 	.word	0x80000000
 8005cc4:	40039716 	.word	0x40039716
 8005cc8:	a0000000 	.word	0xa0000000
 8005ccc:	40d3bca1 	.word	0x40d3bca1
 8005cd0:	a0000000 	.word	0xa0000000
 8005cd4:	4008330d 	.word	0x4008330d
 8005cd8:	2000deb8 	.word	0x2000deb8
 8005cdc:	2000dea8 	.word	0x2000dea8
 8005ce0:	0801b504 	.word	0x0801b504
 8005ce4:	40020c00 	.word	0x40020c00
 8005ce8:	2000de98 	.word	0x2000de98
 8005cec:	2000deac 	.word	0x2000deac
 8005cf0:	2000dee0 	.word	0x2000dee0
 8005cf4:	2000de88 	.word	0x2000de88
 8005cf8:	2000debc 	.word	0x2000debc
 8005cfc:	0801b42c 	.word	0x0801b42c
 8005d00:	0801b440 	.word	0x0801b440
 8005d04:	0801b454 	.word	0x0801b454
 8005d08:	0801b468 	.word	0x0801b468
 8005d0c:	2000dec0 	.word	0x2000dec0
 8005d10:	40ff4000 	.word	0x40ff4000
 8005d14:	4426aaab 	.word	0x4426aaab
 8005d18:	400f1aa0 	.word	0x400f1aa0
 8005d1c:	00000000 	.word	0x00000000

08005d20 <lowlayer_goToSoftLimit>:

uint8_t	lowlayer_goToSoftLimit(SCARA_PositionTypeDef *setpoint) {
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
	int8_t pulse[4] = {0, 0, 0 ,0};
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	73fb      	strb	r3, [r7, #15]
	lowlayer_readSetPosition(setpoint);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f94d 	bl	8005fd0 <lowlayer_readSetPosition>
	if (setpoint->Theta1 < LIM_MIN_J0) {
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8005d3c:	a330      	add	r3, pc, #192	; (adr r3, 8005e00 <lowlayer_goToSoftLimit+0xe0>)
 8005d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d42:	f7fa fecb 	bl	8000adc <__aeabi_dcmplt>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d004      	beq.n	8005d56 <lowlayer_goToSoftLimit+0x36>
		pulse[0] = pulse_scan[0];
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	723b      	strb	r3, [r7, #8]
		check++;
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	3301      	adds	r3, #1
 8005d54:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta2 > LIM_MAX_J1) {
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8005d5c:	a32a      	add	r3, pc, #168	; (adr r3, 8005e08 <lowlayer_goToSoftLimit+0xe8>)
 8005d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d62:	f7fa fed9 	bl	8000b18 <__aeabi_dcmpgt>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d004      	beq.n	8005d76 <lowlayer_goToSoftLimit+0x56>
		pulse[1] = pulse_scan[1];
 8005d6c:	2305      	movs	r3, #5
 8005d6e:	727b      	strb	r3, [r7, #9]
		check++;
 8005d70:	7bfb      	ldrb	r3, [r7, #15]
 8005d72:	3301      	adds	r3, #1
 8005d74:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->D3 < LIM_MIN_J2) {
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	f04f 0300 	mov.w	r3, #0
 8005d84:	f7fa feaa 	bl	8000adc <__aeabi_dcmplt>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d004      	beq.n	8005d98 <lowlayer_goToSoftLimit+0x78>
		pulse[2] = pulse_scan[2];
 8005d8e:	2305      	movs	r3, #5
 8005d90:	72bb      	strb	r3, [r7, #10]
		check++;
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
 8005d94:	3301      	adds	r3, #1
 8005d96:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta4 > LIM_MAX_J3) {
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8005d9e:	a31c      	add	r3, pc, #112	; (adr r3, 8005e10 <lowlayer_goToSoftLimit+0xf0>)
 8005da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da4:	f7fa feb8 	bl	8000b18 <__aeabi_dcmpgt>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d004      	beq.n	8005db8 <lowlayer_goToSoftLimit+0x98>
		pulse[3] = pulse_scan[3];
 8005dae:	230a      	movs	r3, #10
 8005db0:	72fb      	strb	r3, [r7, #11]
		check++;
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
 8005db4:	3301      	adds	r3, #1
 8005db6:	73fb      	strb	r3, [r7, #15]
	}

	if (check > 0) {
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d013      	beq.n	8005de6 <lowlayer_goToSoftLimit+0xc6>
		lowlayer_writePulse(pulse[0], -pulse[1], pulse[2], -pulse[3]);
 8005dbe:	f997 0008 	ldrsb.w	r0, [r7, #8]
 8005dc2:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	425b      	negs	r3, r3
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	b259      	sxtb	r1, r3
 8005dce:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8005dd2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	425b      	negs	r3, r3
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	b25b      	sxtb	r3, r3
 8005dde:	f000 fb4f 	bl	8006480 <lowlayer_writePulse>
		return FALSE;
 8005de2:	2300      	movs	r3, #0
 8005de4:	e006      	b.n	8005df4 <lowlayer_goToSoftLimit+0xd4>
	} else {
		lowlayer_writePulse(0, 0, 0, 0);
 8005de6:	2300      	movs	r3, #0
 8005de8:	2200      	movs	r2, #0
 8005dea:	2100      	movs	r1, #0
 8005dec:	2000      	movs	r0, #0
 8005dee:	f000 fb47 	bl	8006480 <lowlayer_writePulse>
		return TRUE;
 8005df2:	2301      	movs	r3, #1
	}
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	f3af 8000 	nop.w
 8005e00:	daaaaaab 	.word	0xdaaaaaab
 8005e04:	bff7bc89 	.word	0xbff7bc89
 8005e08:	88000000 	.word	0x88000000
 8005e0c:	4002d97c 	.word	0x4002d97c
 8005e10:	daaaaaab 	.word	0xdaaaaaab
 8005e14:	4007bc89 	.word	0x4007bc89

08005e18 <lowlayer_readTruePosition>:

void	lowlayer_readTruePosition(SCARA_PositionTypeDef *true) {
 8005e18:	b590      	push	{r4, r7, lr}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
	lowlayer_updateEncoder();
 8005e20:	f000 fc78 	bl	8006714 <lowlayer_updateEncoder>
	true->Theta1 = HARD_LIM0_NEG
			+ DIR_ENCODER_0*(position_encoder[0] - offset_encoder[0])*2.0*PI/ENCODER_J0; // Servo Motor
 8005e24:	4b62      	ldr	r3, [pc, #392]	; (8005fb0 <lowlayer_readTruePosition+0x198>)
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	4b62      	ldr	r3, [pc, #392]	; (8005fb4 <lowlayer_readTruePosition+0x19c>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	ee07 3a90 	vmov	s15, r3
 8005e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e36:	ee17 0a90 	vmov	r0, s15
 8005e3a:	f7fa fb85 	bl	8000548 <__aeabi_f2d>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460b      	mov	r3, r1
 8005e42:	f7fa fa23 	bl	800028c <__adddf3>
 8005e46:	4603      	mov	r3, r0
 8005e48:	460c      	mov	r4, r1
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	4621      	mov	r1, r4
 8005e4e:	a34c      	add	r3, pc, #304	; (adr r3, 8005f80 <lowlayer_readTruePosition+0x168>)
 8005e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e54:	f7fa fbd0 	bl	80005f8 <__aeabi_dmul>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	460c      	mov	r4, r1
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	4621      	mov	r1, r4
 8005e60:	a349      	add	r3, pc, #292	; (adr r3, 8005f88 <lowlayer_readTruePosition+0x170>)
 8005e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e66:	f7fa fcf1 	bl	800084c <__aeabi_ddiv>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	460c      	mov	r4, r1
 8005e6e:	4618      	mov	r0, r3
 8005e70:	4621      	mov	r1, r4
 8005e72:	a347      	add	r3, pc, #284	; (adr r3, 8005f90 <lowlayer_readTruePosition+0x178>)
 8005e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e78:	f7fa fa06 	bl	8000288 <__aeabi_dsub>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	460c      	mov	r4, r1
	true->Theta1 = HARD_LIM0_NEG
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	true->Theta2 = HARD_LIM1_POS
			+ DIR_ENCODER_1*(position_encoder[1] - offset_encoder[1])*2.0*PI/ENCODER_J1; // Servo Motor
 8005e86:	4b4a      	ldr	r3, [pc, #296]	; (8005fb0 <lowlayer_readTruePosition+0x198>)
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	4b4a      	ldr	r3, [pc, #296]	; (8005fb4 <lowlayer_readTruePosition+0x19c>)
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	ee07 3a90 	vmov	s15, r3
 8005e94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e98:	ee17 0a90 	vmov	r0, s15
 8005e9c:	f7fa fb54 	bl	8000548 <__aeabi_f2d>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	f7fa f9f2 	bl	800028c <__adddf3>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	460c      	mov	r4, r1
 8005eac:	4618      	mov	r0, r3
 8005eae:	4621      	mov	r1, r4
 8005eb0:	a333      	add	r3, pc, #204	; (adr r3, 8005f80 <lowlayer_readTruePosition+0x168>)
 8005eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb6:	f7fa fb9f 	bl	80005f8 <__aeabi_dmul>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	460c      	mov	r4, r1
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	f04f 0200 	mov.w	r2, #0
 8005ec6:	4b3c      	ldr	r3, [pc, #240]	; (8005fb8 <lowlayer_readTruePosition+0x1a0>)
 8005ec8:	f7fa fcc0 	bl	800084c <__aeabi_ddiv>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	460c      	mov	r4, r1
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	4621      	mov	r1, r4
 8005ed4:	a330      	add	r3, pc, #192	; (adr r3, 8005f98 <lowlayer_readTruePosition+0x180>)
 8005ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eda:	f7fa f9d7 	bl	800028c <__adddf3>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	460c      	mov	r4, r1
	true->Theta2 = HARD_LIM1_POS
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	true->D3	 = HARD_LIM2_NEG
			+ DIR_ENCODER_2*(position_encoder[2] - offset_encoder[2])/ENCODER_J2; // Servo Motor
 8005ee8:	4b31      	ldr	r3, [pc, #196]	; (8005fb0 <lowlayer_readTruePosition+0x198>)
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	4b31      	ldr	r3, [pc, #196]	; (8005fb4 <lowlayer_readTruePosition+0x19c>)
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	ee07 3a90 	vmov	s15, r3
 8005ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005efa:	eeb1 7a67 	vneg.f32	s14, s15
 8005efe:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8005fbc <lowlayer_readTruePosition+0x1a4>
 8005f02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f06:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8005fc0 <lowlayer_readTruePosition+0x1a8>
 8005f0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f0e:	ee17 0a90 	vmov	r0, s15
 8005f12:	f7fa fb19 	bl	8000548 <__aeabi_f2d>
 8005f16:	4603      	mov	r3, r0
 8005f18:	460c      	mov	r4, r1
	true->D3	 = HARD_LIM2_NEG
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	true->Theta4 = HARD_LIM3_POS
			+ (pulse_accumulate[3] - offset_stepper)*2.0*PI/GEAR_J3; // Stepper Motor
 8005f20:	4b28      	ldr	r3, [pc, #160]	; (8005fc4 <lowlayer_readTruePosition+0x1ac>)
 8005f22:	68da      	ldr	r2, [r3, #12]
 8005f24:	4b28      	ldr	r3, [pc, #160]	; (8005fc8 <lowlayer_readTruePosition+0x1b0>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7fa fafa 	bl	8000524 <__aeabi_i2d>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	f7fa f9aa 	bl	800028c <__adddf3>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	4621      	mov	r1, r4
 8005f40:	a30f      	add	r3, pc, #60	; (adr r3, 8005f80 <lowlayer_readTruePosition+0x168>)
 8005f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f46:	f7fa fb57 	bl	80005f8 <__aeabi_dmul>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	460c      	mov	r4, r1
 8005f4e:	4618      	mov	r0, r3
 8005f50:	4621      	mov	r1, r4
 8005f52:	a313      	add	r3, pc, #76	; (adr r3, 8005fa0 <lowlayer_readTruePosition+0x188>)
 8005f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f58:	f7fa fc78 	bl	800084c <__aeabi_ddiv>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	460c      	mov	r4, r1
 8005f60:	4618      	mov	r0, r3
 8005f62:	4621      	mov	r1, r4
 8005f64:	a310      	add	r3, pc, #64	; (adr r3, 8005fa8 <lowlayer_readTruePosition+0x190>)
 8005f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6a:	f7fa f98f 	bl	800028c <__adddf3>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	460c      	mov	r4, r1
	true->Theta4 = HARD_LIM3_POS
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd90      	pop	{r4, r7, pc}
 8005f80:	60000000 	.word	0x60000000
 8005f84:	400921fb 	.word	0x400921fb
 8005f88:	00000000 	.word	0x00000000
 8005f8c:	40f38800 	.word	0x40f38800
 8005f90:	40000000 	.word	0x40000000
 8005f94:	3ff9f17a 	.word	0x3ff9f17a
 8005f98:	80000000 	.word	0x80000000
 8005f9c:	40039716 	.word	0x40039716
 8005fa0:	a0000000 	.word	0xa0000000
 8005fa4:	40d3bca1 	.word	0x40d3bca1
 8005fa8:	a0000000 	.word	0xa0000000
 8005fac:	4008330d 	.word	0x4008330d
 8005fb0:	2000de9c 	.word	0x2000de9c
 8005fb4:	2000dee0 	.word	0x2000dee0
 8005fb8:	40ff4000 	.word	0x40ff4000
 8005fbc:	4426aaab 	.word	0x4426aaab
 8005fc0:	400f1aa0 	.word	0x400f1aa0
 8005fc4:	2000de88 	.word	0x2000de88
 8005fc8:	2000debc 	.word	0x2000debc
 8005fcc:	00000000 	.word	0x00000000

08005fd0 <lowlayer_readSetPosition>:

void	lowlayer_readSetPosition(SCARA_PositionTypeDef *setpoint) {
 8005fd0:	b5b0      	push	{r4, r5, r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
	setpoint->Theta1 = offset_setpoint[0] + pulse_accumulate[0]*2.0*PI/GEAR_J0;
 8005fd8:	4b53      	ldr	r3, [pc, #332]	; (8006128 <lowlayer_readSetPosition+0x158>)
 8005fda:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005fde:	4b53      	ldr	r3, [pc, #332]	; (800612c <lowlayer_readSetPosition+0x15c>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7fa fa9e 	bl	8000524 <__aeabi_i2d>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	f7fa f94e 	bl	800028c <__adddf3>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4610      	mov	r0, r2
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	a345      	add	r3, pc, #276	; (adr r3, 8006110 <lowlayer_readSetPosition+0x140>)
 8005ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffe:	f7fa fafb 	bl	80005f8 <__aeabi_dmul>
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	4610      	mov	r0, r2
 8006008:	4619      	mov	r1, r3
 800600a:	a343      	add	r3, pc, #268	; (adr r3, 8006118 <lowlayer_readSetPosition+0x148>)
 800600c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006010:	f7fa fc1c 	bl	800084c <__aeabi_ddiv>
 8006014:	4602      	mov	r2, r0
 8006016:	460b      	mov	r3, r1
 8006018:	4620      	mov	r0, r4
 800601a:	4629      	mov	r1, r5
 800601c:	f7fa f936 	bl	800028c <__adddf3>
 8006020:	4603      	mov	r3, r0
 8006022:	460c      	mov	r4, r1
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	setpoint->Theta2 = offset_setpoint[1] + pulse_accumulate[1]*2.0*PI/GEAR_J1;
 800602a:	4b3f      	ldr	r3, [pc, #252]	; (8006128 <lowlayer_readSetPosition+0x158>)
 800602c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8006030:	4b3e      	ldr	r3, [pc, #248]	; (800612c <lowlayer_readSetPosition+0x15c>)
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	4618      	mov	r0, r3
 8006036:	f7fa fa75 	bl	8000524 <__aeabi_i2d>
 800603a:	4602      	mov	r2, r0
 800603c:	460b      	mov	r3, r1
 800603e:	f7fa f925 	bl	800028c <__adddf3>
 8006042:	4602      	mov	r2, r0
 8006044:	460b      	mov	r3, r1
 8006046:	4610      	mov	r0, r2
 8006048:	4619      	mov	r1, r3
 800604a:	a331      	add	r3, pc, #196	; (adr r3, 8006110 <lowlayer_readSetPosition+0x140>)
 800604c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006050:	f7fa fad2 	bl	80005f8 <__aeabi_dmul>
 8006054:	4602      	mov	r2, r0
 8006056:	460b      	mov	r3, r1
 8006058:	4610      	mov	r0, r2
 800605a:	4619      	mov	r1, r3
 800605c:	f04f 0200 	mov.w	r2, #0
 8006060:	4b33      	ldr	r3, [pc, #204]	; (8006130 <lowlayer_readSetPosition+0x160>)
 8006062:	f7fa fbf3 	bl	800084c <__aeabi_ddiv>
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	4620      	mov	r0, r4
 800606c:	4629      	mov	r1, r5
 800606e:	f7fa f90d 	bl	800028c <__adddf3>
 8006072:	4603      	mov	r3, r0
 8006074:	460c      	mov	r4, r1
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	setpoint->D3	 = offset_setpoint[2] + pulse_accumulate[2]/GEAR_J2;
 800607c:	4b2a      	ldr	r3, [pc, #168]	; (8006128 <lowlayer_readSetPosition+0x158>)
 800607e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8006082:	4b2a      	ldr	r3, [pc, #168]	; (800612c <lowlayer_readSetPosition+0x15c>)
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	ee07 3a90 	vmov	s15, r3
 800608a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800608e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8006134 <lowlayer_readSetPosition+0x164>
 8006092:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006096:	ee16 0a90 	vmov	r0, s13
 800609a:	f7fa fa55 	bl	8000548 <__aeabi_f2d>
 800609e:	4602      	mov	r2, r0
 80060a0:	460b      	mov	r3, r1
 80060a2:	4620      	mov	r0, r4
 80060a4:	4629      	mov	r1, r5
 80060a6:	f7fa f8f1 	bl	800028c <__adddf3>
 80060aa:	4603      	mov	r3, r0
 80060ac:	460c      	mov	r4, r1
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	setpoint->Theta4 = offset_setpoint[3] + pulse_accumulate[3]*2.0*PI/GEAR_J3;
 80060b4:	4b1c      	ldr	r3, [pc, #112]	; (8006128 <lowlayer_readSetPosition+0x158>)
 80060b6:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80060ba:	4b1c      	ldr	r3, [pc, #112]	; (800612c <lowlayer_readSetPosition+0x15c>)
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fa fa30 	bl	8000524 <__aeabi_i2d>
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	f7fa f8e0 	bl	800028c <__adddf3>
 80060cc:	4602      	mov	r2, r0
 80060ce:	460b      	mov	r3, r1
 80060d0:	4610      	mov	r0, r2
 80060d2:	4619      	mov	r1, r3
 80060d4:	a30e      	add	r3, pc, #56	; (adr r3, 8006110 <lowlayer_readSetPosition+0x140>)
 80060d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060da:	f7fa fa8d 	bl	80005f8 <__aeabi_dmul>
 80060de:	4602      	mov	r2, r0
 80060e0:	460b      	mov	r3, r1
 80060e2:	4610      	mov	r0, r2
 80060e4:	4619      	mov	r1, r3
 80060e6:	a30e      	add	r3, pc, #56	; (adr r3, 8006120 <lowlayer_readSetPosition+0x150>)
 80060e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ec:	f7fa fbae 	bl	800084c <__aeabi_ddiv>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4620      	mov	r0, r4
 80060f6:	4629      	mov	r1, r5
 80060f8:	f7fa f8c8 	bl	800028c <__adddf3>
 80060fc:	4603      	mov	r3, r0
 80060fe:	460c      	mov	r4, r1
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 8006106:	bf00      	nop
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	bdb0      	pop	{r4, r5, r7, pc}
 800610e:	bf00      	nop
 8006110:	60000000 	.word	0x60000000
 8006114:	400921fb 	.word	0x400921fb
 8006118:	00000000 	.word	0x00000000
 800611c:	40d38800 	.word	0x40d38800
 8006120:	a0000000 	.word	0xa0000000
 8006124:	40d3bca1 	.word	0x40d3bca1
 8006128:	2000dec0 	.word	0x2000dec0
 800612c:	2000de88 	.word	0x2000de88
 8006130:	40df4000 	.word	0x40df4000
 8006134:	42c80000 	.word	0x42c80000

08006138 <lowlayer_computeAndWritePulse>:

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 8006138:	b084      	sub	sp, #16
 800613a:	b590      	push	{r4, r7, lr}
 800613c:	b093      	sub	sp, #76	; 0x4c
 800613e:	af00      	add	r7, sp, #0
 8006140:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8006144:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 8006148:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800614c:	a3c4      	add	r3, pc, #784	; (adr r3, 8006460 <lowlayer_computeAndWritePulse+0x328>)
 800614e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006152:	f7fa f89b 	bl	800028c <__adddf3>
 8006156:	4603      	mov	r3, r0
 8006158:	460c      	mov	r4, r1
 800615a:	4618      	mov	r0, r3
 800615c:	4621      	mov	r1, r4
 800615e:	a3c2      	add	r3, pc, #776	; (adr r3, 8006468 <lowlayer_computeAndWritePulse+0x330>)
 8006160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006164:	f7fa fa48 	bl	80005f8 <__aeabi_dmul>
 8006168:	4603      	mov	r3, r0
 800616a:	460c      	mov	r4, r1
 800616c:	4618      	mov	r0, r3
 800616e:	4621      	mov	r1, r4
 8006170:	a3b5      	add	r3, pc, #724	; (adr r3, 8006448 <lowlayer_computeAndWritePulse+0x310>)
 8006172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006176:	f7fa fb69 	bl	800084c <__aeabi_ddiv>
 800617a:	4603      	mov	r3, r0
 800617c:	460c      	mov	r4, r1
 800617e:	ec44 3b17 	vmov	d7, r3, r4
 8006182:	eeb0 0a47 	vmov.f32	s0, s14
 8006186:	eef0 0a67 	vmov.f32	s1, s15
 800618a:	f013 fc19 	bl	80199c0 <round>
 800618e:	ec54 3b10 	vmov	r3, r4, d0
 8006192:	4618      	mov	r0, r3
 8006194:	4621      	mov	r1, r4
 8006196:	f7fa fd07 	bl	8000ba8 <__aeabi_d2uiz>
 800619a:	4603      	mov	r3, r0
 800619c:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 800619e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80061a2:	a3b3      	add	r3, pc, #716	; (adr r3, 8006470 <lowlayer_computeAndWritePulse+0x338>)
 80061a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a8:	f7fa f870 	bl	800028c <__adddf3>
 80061ac:	4603      	mov	r3, r0
 80061ae:	460c      	mov	r4, r1
 80061b0:	4618      	mov	r0, r3
 80061b2:	4621      	mov	r1, r4
 80061b4:	f04f 0200 	mov.w	r2, #0
 80061b8:	4baf      	ldr	r3, [pc, #700]	; (8006478 <lowlayer_computeAndWritePulse+0x340>)
 80061ba:	f7fa fa1d 	bl	80005f8 <__aeabi_dmul>
 80061be:	4603      	mov	r3, r0
 80061c0:	460c      	mov	r4, r1
 80061c2:	4618      	mov	r0, r3
 80061c4:	4621      	mov	r1, r4
 80061c6:	a3a0      	add	r3, pc, #640	; (adr r3, 8006448 <lowlayer_computeAndWritePulse+0x310>)
 80061c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061cc:	f7fa fb3e 	bl	800084c <__aeabi_ddiv>
 80061d0:	4603      	mov	r3, r0
 80061d2:	460c      	mov	r4, r1
 80061d4:	ec44 3b17 	vmov	d7, r3, r4
 80061d8:	eeb0 0a47 	vmov.f32	s0, s14
 80061dc:	eef0 0a67 	vmov.f32	s1, s15
 80061e0:	f013 fbee 	bl	80199c0 <round>
 80061e4:	ec54 3b10 	vmov	r3, r4, d0
 80061e8:	4618      	mov	r0, r3
 80061ea:	4621      	mov	r1, r4
 80061ec:	f7fa fcdc 	bl	8000ba8 <__aeabi_d2uiz>
 80061f0:	4603      	mov	r3, r0
 80061f2:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 80061f4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80061f8:	f04f 0200 	mov.w	r2, #0
 80061fc:	4b9f      	ldr	r3, [pc, #636]	; (800647c <lowlayer_computeAndWritePulse+0x344>)
 80061fe:	f7fa f9fb 	bl	80005f8 <__aeabi_dmul>
 8006202:	4603      	mov	r3, r0
 8006204:	460c      	mov	r4, r1
 8006206:	ec44 3b17 	vmov	d7, r3, r4
 800620a:	eeb0 0a47 	vmov.f32	s0, s14
 800620e:	eef0 0a67 	vmov.f32	s1, s15
 8006212:	f013 fbd5 	bl	80199c0 <round>
 8006216:	ec54 3b10 	vmov	r3, r4, d0
 800621a:	4618      	mov	r0, r3
 800621c:	4621      	mov	r1, r4
 800621e:	f7fa fcc3 	bl	8000ba8 <__aeabi_d2uiz>
 8006222:	4603      	mov	r3, r0
 8006224:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 8006226:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800622a:	a389      	add	r3, pc, #548	; (adr r3, 8006450 <lowlayer_computeAndWritePulse+0x318>)
 800622c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006230:	f7fa f82c 	bl	800028c <__adddf3>
 8006234:	4603      	mov	r3, r0
 8006236:	460c      	mov	r4, r1
 8006238:	4618      	mov	r0, r3
 800623a:	4621      	mov	r1, r4
 800623c:	a386      	add	r3, pc, #536	; (adr r3, 8006458 <lowlayer_computeAndWritePulse+0x320>)
 800623e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006242:	f7fa f9d9 	bl	80005f8 <__aeabi_dmul>
 8006246:	4603      	mov	r3, r0
 8006248:	460c      	mov	r4, r1
 800624a:	4618      	mov	r0, r3
 800624c:	4621      	mov	r1, r4
 800624e:	a37e      	add	r3, pc, #504	; (adr r3, 8006448 <lowlayer_computeAndWritePulse+0x310>)
 8006250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006254:	f7fa fafa 	bl	800084c <__aeabi_ddiv>
 8006258:	4603      	mov	r3, r0
 800625a:	460c      	mov	r4, r1
 800625c:	ec44 3b17 	vmov	d7, r3, r4
 8006260:	eeb0 0a47 	vmov.f32	s0, s14
 8006264:	eef0 0a67 	vmov.f32	s1, s15
 8006268:	f013 fbaa 	bl	80199c0 <round>
 800626c:	ec54 3b10 	vmov	r3, r4, d0
 8006270:	4618      	mov	r0, r3
 8006272:	4621      	mov	r1, r4
 8006274:	f7fa fc98 	bl	8000ba8 <__aeabi_d2uiz>
 8006278:	4603      	mov	r3, r0
 800627a:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 800627c:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8006280:	a377      	add	r3, pc, #476	; (adr r3, 8006460 <lowlayer_computeAndWritePulse+0x328>)
 8006282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006286:	f7fa f801 	bl	800028c <__adddf3>
 800628a:	4603      	mov	r3, r0
 800628c:	460c      	mov	r4, r1
 800628e:	4618      	mov	r0, r3
 8006290:	4621      	mov	r1, r4
 8006292:	a375      	add	r3, pc, #468	; (adr r3, 8006468 <lowlayer_computeAndWritePulse+0x330>)
 8006294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006298:	f7fa f9ae 	bl	80005f8 <__aeabi_dmul>
 800629c:	4603      	mov	r3, r0
 800629e:	460c      	mov	r4, r1
 80062a0:	4618      	mov	r0, r3
 80062a2:	4621      	mov	r1, r4
 80062a4:	a368      	add	r3, pc, #416	; (adr r3, 8006448 <lowlayer_computeAndWritePulse+0x310>)
 80062a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062aa:	f7fa facf 	bl	800084c <__aeabi_ddiv>
 80062ae:	4603      	mov	r3, r0
 80062b0:	460c      	mov	r4, r1
 80062b2:	ec44 3b17 	vmov	d7, r3, r4
 80062b6:	eeb0 0a47 	vmov.f32	s0, s14
 80062ba:	eef0 0a67 	vmov.f32	s1, s15
 80062be:	f013 fb7f 	bl	80199c0 <round>
 80062c2:	ec54 3b10 	vmov	r3, r4, d0
 80062c6:	4618      	mov	r0, r3
 80062c8:	4621      	mov	r1, r4
 80062ca:	f7fa fc6d 	bl	8000ba8 <__aeabi_d2uiz>
 80062ce:	4603      	mov	r3, r0
 80062d0:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 80062d2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80062d6:	a366      	add	r3, pc, #408	; (adr r3, 8006470 <lowlayer_computeAndWritePulse+0x338>)
 80062d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062dc:	f7f9 ffd6 	bl	800028c <__adddf3>
 80062e0:	4603      	mov	r3, r0
 80062e2:	460c      	mov	r4, r1
 80062e4:	4618      	mov	r0, r3
 80062e6:	4621      	mov	r1, r4
 80062e8:	f04f 0200 	mov.w	r2, #0
 80062ec:	4b62      	ldr	r3, [pc, #392]	; (8006478 <lowlayer_computeAndWritePulse+0x340>)
 80062ee:	f7fa f983 	bl	80005f8 <__aeabi_dmul>
 80062f2:	4603      	mov	r3, r0
 80062f4:	460c      	mov	r4, r1
 80062f6:	4618      	mov	r0, r3
 80062f8:	4621      	mov	r1, r4
 80062fa:	a353      	add	r3, pc, #332	; (adr r3, 8006448 <lowlayer_computeAndWritePulse+0x310>)
 80062fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006300:	f7fa faa4 	bl	800084c <__aeabi_ddiv>
 8006304:	4603      	mov	r3, r0
 8006306:	460c      	mov	r4, r1
 8006308:	ec44 3b17 	vmov	d7, r3, r4
 800630c:	eeb0 0a47 	vmov.f32	s0, s14
 8006310:	eef0 0a67 	vmov.f32	s1, s15
 8006314:	f013 fb54 	bl	80199c0 <round>
 8006318:	ec54 3b10 	vmov	r3, r4, d0
 800631c:	4618      	mov	r0, r3
 800631e:	4621      	mov	r1, r4
 8006320:	f7fa fc42 	bl	8000ba8 <__aeabi_d2uiz>
 8006324:	4603      	mov	r3, r0
 8006326:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 8006328:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800632c:	f04f 0200 	mov.w	r2, #0
 8006330:	4b52      	ldr	r3, [pc, #328]	; (800647c <lowlayer_computeAndWritePulse+0x344>)
 8006332:	f7fa f961 	bl	80005f8 <__aeabi_dmul>
 8006336:	4603      	mov	r3, r0
 8006338:	460c      	mov	r4, r1
 800633a:	ec44 3b17 	vmov	d7, r3, r4
 800633e:	eeb0 0a47 	vmov.f32	s0, s14
 8006342:	eef0 0a67 	vmov.f32	s1, s15
 8006346:	f013 fb3b 	bl	80199c0 <round>
 800634a:	ec54 3b10 	vmov	r3, r4, d0
 800634e:	4618      	mov	r0, r3
 8006350:	4621      	mov	r1, r4
 8006352:	f7fa fc29 	bl	8000ba8 <__aeabi_d2uiz>
 8006356:	4603      	mov	r3, r0
 8006358:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 800635a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800635e:	a33c      	add	r3, pc, #240	; (adr r3, 8006450 <lowlayer_computeAndWritePulse+0x318>)
 8006360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006364:	f7f9 ff92 	bl	800028c <__adddf3>
 8006368:	4603      	mov	r3, r0
 800636a:	460c      	mov	r4, r1
 800636c:	4618      	mov	r0, r3
 800636e:	4621      	mov	r1, r4
 8006370:	a339      	add	r3, pc, #228	; (adr r3, 8006458 <lowlayer_computeAndWritePulse+0x320>)
 8006372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006376:	f7fa f93f 	bl	80005f8 <__aeabi_dmul>
 800637a:	4603      	mov	r3, r0
 800637c:	460c      	mov	r4, r1
 800637e:	4618      	mov	r0, r3
 8006380:	4621      	mov	r1, r4
 8006382:	a331      	add	r3, pc, #196	; (adr r3, 8006448 <lowlayer_computeAndWritePulse+0x310>)
 8006384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006388:	f7fa fa60 	bl	800084c <__aeabi_ddiv>
 800638c:	4603      	mov	r3, r0
 800638e:	460c      	mov	r4, r1
 8006390:	ec44 3b17 	vmov	d7, r3, r4
 8006394:	eeb0 0a47 	vmov.f32	s0, s14
 8006398:	eef0 0a67 	vmov.f32	s1, s15
 800639c:	f013 fb10 	bl	80199c0 <round>
 80063a0:	ec54 3b10 	vmov	r3, r4, d0
 80063a4:	4618      	mov	r0, r3
 80063a6:	4621      	mov	r1, r4
 80063a8:	f7fa fbfe 	bl	8000ba8 <__aeabi_d2uiz>
 80063ac:	4603      	mov	r3, r0
 80063ae:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 80063b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	f04f 0400 	mov.w	r4, #0
 80063ba:	e9c7 3408 	strd	r3, r4, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 80063be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	f04f 0400 	mov.w	r4, #0
 80063c8:	e9c7 3406 	strd	r3, r4, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 80063cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	f04f 0400 	mov.w	r4, #0
 80063d6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 80063da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	f04f 0400 	mov.w	r4, #0
 80063e4:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (abs(delta_var0) > 127
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	bfb8      	it	lt
 80063ee:	425b      	neglt	r3, r3
 80063f0:	2b7f      	cmp	r3, #127	; 0x7f
 80063f2:	dc11      	bgt.n	8006418 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var1) > 127
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	bfb8      	it	lt
 80063fa:	425b      	neglt	r3, r3
 80063fc:	2b7f      	cmp	r3, #127	; 0x7f
 80063fe:	dc0b      	bgt.n	8006418 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var2) > 127
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	2b00      	cmp	r3, #0
 8006404:	bfb8      	it	lt
 8006406:	425b      	neglt	r3, r3
 8006408:	2b7f      	cmp	r3, #127	; 0x7f
 800640a:	dc05      	bgt.n	8006418 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var3) > 127) {
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	bfb8      	it	lt
 8006412:	425b      	neglt	r3, r3
 8006414:	2b7f      	cmp	r3, #127	; 0x7f
 8006416:	dd01      	ble.n	800641c <lowlayer_computeAndWritePulse+0x2e4>
		return FALSE;
 8006418:	2300      	movs	r3, #0
 800641a:	e00c      	b.n	8006436 <lowlayer_computeAndWritePulse+0x2fe>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 800641c:	f997 0020 	ldrsb.w	r0, [r7, #32]
 8006420:	f997 1018 	ldrsb.w	r1, [r7, #24]
 8006424:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8006428:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800642c:	f000 f828 	bl	8006480 <lowlayer_writePulse>
 8006430:	4603      	mov	r3, r0
 8006432:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 8006434:	79fb      	ldrb	r3, [r7, #7]
}
 8006436:	4618      	mov	r0, r3
 8006438:	374c      	adds	r7, #76	; 0x4c
 800643a:	46bd      	mov	sp, r7
 800643c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8006440:	b004      	add	sp, #16
 8006442:	4770      	bx	lr
 8006444:	f3af 8000 	nop.w
 8006448:	60000000 	.word	0x60000000
 800644c:	401921fb 	.word	0x401921fb
 8006450:	daaaaaab 	.word	0xdaaaaaab
 8006454:	4007bc89 	.word	0x4007bc89
 8006458:	a0000000 	.word	0xa0000000
 800645c:	40d3bca1 	.word	0x40d3bca1
 8006460:	daaaaaab 	.word	0xdaaaaaab
 8006464:	3ff7bc89 	.word	0x3ff7bc89
 8006468:	00000000 	.word	0x00000000
 800646c:	40d38800 	.word	0x40d38800
 8006470:	88000000 	.word	0x88000000
 8006474:	4002d97c 	.word	0x4002d97c
 8006478:	40df4000 	.word	0x40df4000
 800647c:	40590000 	.word	0x40590000

08006480 <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 8006480:	b590      	push	{r4, r7, lr}
 8006482:	b087      	sub	sp, #28
 8006484:	af00      	add	r7, sp, #0
 8006486:	4604      	mov	r4, r0
 8006488:	4608      	mov	r0, r1
 800648a:	4611      	mov	r1, r2
 800648c:	461a      	mov	r2, r3
 800648e:	4623      	mov	r3, r4
 8006490:	71fb      	strb	r3, [r7, #7]
 8006492:	4603      	mov	r3, r0
 8006494:	71bb      	strb	r3, [r7, #6]
 8006496:	460b      	mov	r3, r1
 8006498:	717b      	strb	r3, [r7, #5]
 800649a:	4613      	mov	r3, r2
 800649c:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 800649e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	da06      	bge.n	80064b4 <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 80064a6:	79fb      	ldrb	r3, [r7, #7]
 80064a8:	425b      	negs	r3, r3
 80064aa:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 80064ac:	79fb      	ldrb	r3, [r7, #7]
 80064ae:	425b      	negs	r3, r3
 80064b0:	75fb      	strb	r3, [r7, #23]
 80064b2:	e006      	b.n	80064c2 <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 80064b4:	79fb      	ldrb	r3, [r7, #7]
 80064b6:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 80064b8:	79fb      	ldrb	r3, [r7, #7]
 80064ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80064be:	b25b      	sxtb	r3, r3
 80064c0:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 80064c2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	da06      	bge.n	80064d8 <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 80064ca:	79bb      	ldrb	r3, [r7, #6]
 80064cc:	425b      	negs	r3, r3
 80064ce:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 80064d0:	79bb      	ldrb	r3, [r7, #6]
 80064d2:	425b      	negs	r3, r3
 80064d4:	75bb      	strb	r3, [r7, #22]
 80064d6:	e006      	b.n	80064e6 <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 80064d8:	79bb      	ldrb	r3, [r7, #6]
 80064da:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 80064dc:	79bb      	ldrb	r3, [r7, #6]
 80064de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80064e2:	b25b      	sxtb	r3, r3
 80064e4:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 80064e6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	da0b      	bge.n	8006506 <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 80064ee:	797b      	ldrb	r3, [r7, #5]
 80064f0:	425b      	negs	r3, r3
 80064f2:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 80064f4:	797b      	ldrb	r3, [r7, #5]
 80064f6:	425b      	negs	r3, r3
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	b25b      	sxtb	r3, r3
 80064fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006500:	b25b      	sxtb	r3, r3
 8006502:	757b      	strb	r3, [r7, #21]
 8006504:	e003      	b.n	800650e <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 8006506:	797b      	ldrb	r3, [r7, #5]
 8006508:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 800650a:	797b      	ldrb	r3, [r7, #5]
 800650c:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 800650e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	da06      	bge.n	8006524 <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 8006516:	793b      	ldrb	r3, [r7, #4]
 8006518:	425b      	negs	r3, r3
 800651a:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 800651c:	793b      	ldrb	r3, [r7, #4]
 800651e:	425b      	negs	r3, r3
 8006520:	753b      	strb	r3, [r7, #20]
 8006522:	e006      	b.n	8006532 <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 8006524:	793b      	ldrb	r3, [r7, #4]
 8006526:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 8006528:	793b      	ldrb	r3, [r7, #4]
 800652a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800652e:	b25b      	sxtb	r3, r3
 8006530:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 8006532:	7cfb      	ldrb	r3, [r7, #19]
 8006534:	2b4b      	cmp	r3, #75	; 0x4b
 8006536:	d808      	bhi.n	800654a <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 8006538:	7cbb      	ldrb	r3, [r7, #18]
 800653a:	2b78      	cmp	r3, #120	; 0x78
 800653c:	d805      	bhi.n	800654a <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 800653e:	7c7b      	ldrb	r3, [r7, #17]
 8006540:	2b7d      	cmp	r3, #125	; 0x7d
 8006542:	d802      	bhi.n	800654a <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 8006544:	7c3b      	ldrb	r3, [r7, #16]
 8006546:	2b65      	cmp	r3, #101	; 0x65
 8006548:	d901      	bls.n	800654e <lowlayer_writePulse+0xce>
		return FALSE;
 800654a:	2300      	movs	r3, #0
 800654c:	e04b      	b.n	80065e6 <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 800654e:	2200      	movs	r2, #0
 8006550:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006554:	4826      	ldr	r0, [pc, #152]	; (80065f0 <lowlayer_writePulse+0x170>)
 8006556:	f005 fe6d 	bl	800c234 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 800655a:	2200      	movs	r2, #0
 800655c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006560:	4824      	ldr	r0, [pc, #144]	; (80065f4 <lowlayer_writePulse+0x174>)
 8006562:	f005 fe67 	bl	800c234 <HAL_GPIO_WritePin>
	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 8006566:	7dfb      	ldrb	r3, [r7, #23]
 8006568:	4619      	mov	r1, r3
 800656a:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 800656e:	f7fd ffd7 	bl	8004520 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 8006572:	7dbb      	ldrb	r3, [r7, #22]
 8006574:	4619      	mov	r1, r3
 8006576:	4820      	ldr	r0, [pc, #128]	; (80065f8 <lowlayer_writePulse+0x178>)
 8006578:	f7fd ffd2 	bl	8004520 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 800657c:	7d7b      	ldrb	r3, [r7, #21]
 800657e:	4619      	mov	r1, r3
 8006580:	481e      	ldr	r0, [pc, #120]	; (80065fc <lowlayer_writePulse+0x17c>)
 8006582:	f7fd ffcd 	bl	8004520 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 8006586:	7d3b      	ldrb	r3, [r7, #20]
 8006588:	4619      	mov	r1, r3
 800658a:	481d      	ldr	r0, [pc, #116]	; (8006600 <lowlayer_writePulse+0x180>)
 800658c:	f7fd ffc8 	bl	8004520 <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 8006590:	2364      	movs	r3, #100	; 0x64
 8006592:	73fb      	strb	r3, [r7, #15]
	
	 while (delay--);
 8006594:	bf00      	nop
 8006596:	7bfb      	ldrb	r3, [r7, #15]
 8006598:	1e5a      	subs	r2, r3, #1
 800659a:	73fa      	strb	r2, [r7, #15]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1fa      	bne.n	8006596 <lowlayer_writePulse+0x116>

//	int16_t wow = HAL_GPIO_ReadPin(CPLD_BUSY_GPIO_Port, CPLD_BUSY_Pin);
//	LOG_REPORT(" Busy: ", wow);
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 80065a0:	2201      	movs	r2, #1
 80065a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80065a6:	4813      	ldr	r0, [pc, #76]	; (80065f4 <lowlayer_writePulse+0x174>)
 80065a8:	f005 fe44 	bl	800c234 <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 80065ac:	4b15      	ldr	r3, [pc, #84]	; (8006604 <lowlayer_writePulse+0x184>)
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065b4:	4413      	add	r3, r2
 80065b6:	4a13      	ldr	r2, [pc, #76]	; (8006604 <lowlayer_writePulse+0x184>)
 80065b8:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 80065ba:	4b12      	ldr	r3, [pc, #72]	; (8006604 <lowlayer_writePulse+0x184>)
 80065bc:	685a      	ldr	r2, [r3, #4]
 80065be:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80065c2:	4413      	add	r3, r2
 80065c4:	4a0f      	ldr	r2, [pc, #60]	; (8006604 <lowlayer_writePulse+0x184>)
 80065c6:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 80065c8:	4b0e      	ldr	r3, [pc, #56]	; (8006604 <lowlayer_writePulse+0x184>)
 80065ca:	689a      	ldr	r2, [r3, #8]
 80065cc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80065d0:	4413      	add	r3, r2
 80065d2:	4a0c      	ldr	r2, [pc, #48]	; (8006604 <lowlayer_writePulse+0x184>)
 80065d4:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 80065d6:	4b0b      	ldr	r3, [pc, #44]	; (8006604 <lowlayer_writePulse+0x184>)
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80065de:	4413      	add	r3, r2
 80065e0:	4a08      	ldr	r2, [pc, #32]	; (8006604 <lowlayer_writePulse+0x184>)
 80065e2:	60d3      	str	r3, [r2, #12]

	return TRUE;
 80065e4:	2301      	movs	r3, #1
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	371c      	adds	r7, #28
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd90      	pop	{r4, r7, pc}
 80065ee:	bf00      	nop
 80065f0:	40020000 	.word	0x40020000
 80065f4:	40020c00 	.word	0x40020c00
 80065f8:	60000002 	.word	0x60000002
 80065fc:	60000004 	.word	0x60000004
 8006600:	60000006 	.word	0x60000006
 8006604:	2000de88 	.word	0x2000de88

08006608 <lowlayer_resetEncoder>:

void	lowlayer_resetEncoder(void) {
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
	// Trigger
	uint8_t delay = 100;
 800660e:	2364      	movs	r3, #100	; 0x64
 8006610:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
 8006612:	2201      	movs	r2, #1
 8006614:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006618:	4809      	ldr	r0, [pc, #36]	; (8006640 <lowlayer_resetEncoder+0x38>)
 800661a:	f005 fe0b 	bl	800c234 <HAL_GPIO_WritePin>
	while (delay--);
 800661e:	bf00      	nop
 8006620:	79fb      	ldrb	r3, [r7, #7]
 8006622:	1e5a      	subs	r2, r3, #1
 8006624:	71fa      	strb	r2, [r7, #7]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1fa      	bne.n	8006620 <lowlayer_resetEncoder+0x18>
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
 800662a:	2200      	movs	r2, #0
 800662c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006630:	4803      	ldr	r0, [pc, #12]	; (8006640 <lowlayer_resetEncoder+0x38>)
 8006632:	f005 fdff 	bl	800c234 <HAL_GPIO_WritePin>
}
 8006636:	bf00      	nop
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	40020c00 	.word	0x40020c00

08006644 <lowlayer_readLimitSwitch>:

uint8_t lowlayer_readLimitSwitch(void) {
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 800664a:	4805      	ldr	r0, [pc, #20]	; (8006660 <lowlayer_readLimitSwitch+0x1c>)
 800664c:	f7fd ff77 	bl	800453e <FSMC_Read>
 8006650:	4603      	mov	r3, r0
 8006652:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 8006654:	88fb      	ldrh	r3, [r7, #6]
 8006656:	b2db      	uxtb	r3, r3
}
 8006658:	4618      	mov	r0, r3
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	60000020 	.word	0x60000020

08006664 <lowlayer_readEncoder>:

int32_t lowlayer_readEncoder(uint8_t encoder_num) {
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	4603      	mov	r3, r0
 800666c:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (encoder_num <= 2) {
 800666e:	79fb      	ldrb	r3, [r7, #7]
 8006670:	2b02      	cmp	r3, #2
 8006672:	d81c      	bhi.n	80066ae <lowlayer_readEncoder+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4);
 8006674:	79fb      	ldrb	r3, [r7, #7]
 8006676:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 800667a:	3310      	adds	r3, #16
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4618      	mov	r0, r3
 8006680:	f7fd ff5d 	bl	800453e <FSMC_Read>
 8006684:	4603      	mov	r3, r0
 8006686:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4 + 2);
 8006688:	79fb      	ldrb	r3, [r7, #7]
 800668a:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 800668e:	3310      	adds	r3, #16
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	3302      	adds	r3, #2
 8006694:	4618      	mov	r0, r3
 8006696:	f7fd ff52 	bl	800453e <FSMC_Read>
 800669a:	4603      	mov	r3, r0
 800669c:	813b      	strh	r3, [r7, #8]
		data = high_word;
 800669e:	893b      	ldrh	r3, [r7, #8]
 80066a0:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	041a      	lsls	r2, r3, #16
 80066a6:	897b      	ldrh	r3, [r7, #10]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	e001      	b.n	80066b2 <lowlayer_readEncoder+0x4e>
	} else {
		data = 0;
 80066ae:	2300      	movs	r3, #0
 80066b0:	60fb      	str	r3, [r7, #12]
	}
	return data;
 80066b2:	68fb      	ldr	r3, [r7, #12]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <lowlayer_readCapture>:

int32_t lowlayer_readCapture(uint8_t capture_num) {
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	4603      	mov	r3, r0
 80066c4:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 80066c6:	79fb      	ldrb	r3, [r7, #7]
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d81c      	bhi.n	8006706 <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 80066cc:	79fb      	ldrb	r3, [r7, #7]
 80066ce:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80066d2:	3318      	adds	r3, #24
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fd ff31 	bl	800453e <FSMC_Read>
 80066dc:	4603      	mov	r3, r0
 80066de:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 80066e0:	79fb      	ldrb	r3, [r7, #7]
 80066e2:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80066e6:	3318      	adds	r3, #24
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	3302      	adds	r3, #2
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7fd ff26 	bl	800453e <FSMC_Read>
 80066f2:	4603      	mov	r3, r0
 80066f4:	813b      	strh	r3, [r7, #8]
		data = high_word;
 80066f6:	893b      	ldrh	r3, [r7, #8]
 80066f8:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	041a      	lsls	r2, r3, #16
 80066fe:	897b      	ldrh	r3, [r7, #10]
 8006700:	4313      	orrs	r3, r2
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	e001      	b.n	800670a <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 8006706:	2300      	movs	r3, #0
 8006708:	60fb      	str	r3, [r7, #12]
	}
	return data;
 800670a:	68fb      	ldr	r3, [r7, #12]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <lowlayer_updateEncoder>:

void	lowlayer_updateEncoder(void) {
 8006714:	b590      	push	{r4, r7, lr}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 800671a:	2300      	movs	r3, #0
 800671c:	71fb      	strb	r3, [r7, #7]
 800671e:	e00b      	b.n	8006738 <lowlayer_updateEncoder+0x24>
		position_encoder[i] = lowlayer_readEncoder(i);
 8006720:	79fc      	ldrb	r4, [r7, #7]
 8006722:	79fb      	ldrb	r3, [r7, #7]
 8006724:	4618      	mov	r0, r3
 8006726:	f7ff ff9d 	bl	8006664 <lowlayer_readEncoder>
 800672a:	4602      	mov	r2, r0
 800672c:	4b06      	ldr	r3, [pc, #24]	; (8006748 <lowlayer_updateEncoder+0x34>)
 800672e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8006732:	79fb      	ldrb	r3, [r7, #7]
 8006734:	3301      	adds	r3, #1
 8006736:	71fb      	strb	r3, [r7, #7]
 8006738:	79fb      	ldrb	r3, [r7, #7]
 800673a:	2b02      	cmp	r3, #2
 800673c:	d9f0      	bls.n	8006720 <lowlayer_updateEncoder+0xc>
	}
}
 800673e:	bf00      	nop
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	bd90      	pop	{r4, r7, pc}
 8006746:	bf00      	nop
 8006748:	2000de9c 	.word	0x2000de9c

0800674c <lowlayer_updateCapture>:

void	lowlayer_updateCapture(void) {
 800674c:	b590      	push	{r4, r7, lr}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8006752:	2300      	movs	r3, #0
 8006754:	71fb      	strb	r3, [r7, #7]
 8006756:	e00b      	b.n	8006770 <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 8006758:	79fc      	ldrb	r4, [r7, #7]
 800675a:	79fb      	ldrb	r3, [r7, #7]
 800675c:	4618      	mov	r0, r3
 800675e:	f7ff ffad 	bl	80066bc <lowlayer_readCapture>
 8006762:	4602      	mov	r2, r0
 8006764:	4b06      	ldr	r3, [pc, #24]	; (8006780 <lowlayer_updateCapture+0x34>)
 8006766:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 800676a:	79fb      	ldrb	r3, [r7, #7]
 800676c:	3301      	adds	r3, #1
 800676e:	71fb      	strb	r3, [r7, #7]
 8006770:	79fb      	ldrb	r3, [r7, #7]
 8006772:	2b02      	cmp	r3, #2
 8006774:	d9f0      	bls.n	8006758 <lowlayer_updateCapture+0xc>
	}
}
 8006776:	bf00      	nop
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	bd90      	pop	{r4, r7, pc}
 800677e:	bf00      	nop
 8006780:	2000deac 	.word	0x2000deac

08006784 <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 800678a:	f7ff ff5b 	bl	8006644 <lowlayer_readLimitSwitch>
 800678e:	4603      	mov	r3, r0
 8006790:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 8006792:	2300      	movs	r3, #0
 8006794:	71fb      	strb	r3, [r7, #7]
 8006796:	e00d      	b.n	80067b4 <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 8006798:	79ba      	ldrb	r2, [r7, #6]
 800679a:	79fb      	ldrb	r3, [r7, #7]
 800679c:	fa42 f303 	asr.w	r3, r2, r3
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	79fb      	ldrb	r3, [r7, #7]
 80067a4:	f002 0201 	and.w	r2, r2, #1
 80067a8:	b2d1      	uxtb	r1, r2
 80067aa:	4a06      	ldr	r2, [pc, #24]	; (80067c4 <lowlayer_updateLimit+0x40>)
 80067ac:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 80067ae:	79fb      	ldrb	r3, [r7, #7]
 80067b0:	3301      	adds	r3, #1
 80067b2:	71fb      	strb	r3, [r7, #7]
 80067b4:	79fb      	ldrb	r3, [r7, #7]
 80067b6:	2b03      	cmp	r3, #3
 80067b8:	d9ee      	bls.n	8006798 <lowlayer_updateLimit+0x14>
	}
}
 80067ba:	bf00      	nop
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	2000dea8 	.word	0x2000dea8

080067c8 <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	4603      	mov	r3, r0
 80067d0:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 80067d2:	79fb      	ldrb	r3, [r7, #7]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d006      	beq.n	80067e6 <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 80067d8:	2201      	movs	r2, #1
 80067da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80067de:	4807      	ldr	r0, [pc, #28]	; (80067fc <lowlayer_setOutput+0x34>)
 80067e0:	f005 fd28 	bl	800c234 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 80067e4:	e005      	b.n	80067f2 <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 80067e6:	2200      	movs	r2, #0
 80067e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80067ec:	4803      	ldr	r0, [pc, #12]	; (80067fc <lowlayer_setOutput+0x34>)
 80067ee:	f005 fd21 	bl	800c234 <HAL_GPIO_WritePin>
}
 80067f2:	bf00      	nop
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	40020400 	.word	0x40020400

08006800 <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 8006800:	b580      	push	{r7, lr}
 8006802:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 8006804:	2201      	movs	r2, #1
 8006806:	2140      	movs	r1, #64	; 0x40
 8006808:	4802      	ldr	r0, [pc, #8]	; (8006814 <lowlayer_CPLD_Init+0x14>)
 800680a:	f005 fd13 	bl	800c234 <HAL_GPIO_WritePin>
}
 800680e:	bf00      	nop
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	40020c00 	.word	0x40020c00

08006818 <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 8006818:	b580      	push	{r7, lr}
 800681a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 800681c:	2201      	movs	r2, #1
 800681e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006822:	4808      	ldr	r0, [pc, #32]	; (8006844 <lowlayer_stepMotorInit+0x2c>)
 8006824:	f005 fd06 	bl	800c234 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 8006828:	2201      	movs	r2, #1
 800682a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800682e:	4805      	ldr	r0, [pc, #20]	; (8006844 <lowlayer_stepMotorInit+0x2c>)
 8006830:	f005 fd00 	bl	800c234 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 8006834:	2201      	movs	r2, #1
 8006836:	f44f 7180 	mov.w	r1, #256	; 0x100
 800683a:	4802      	ldr	r0, [pc, #8]	; (8006844 <lowlayer_stepMotorInit+0x2c>)
 800683c:	f005 fcfa 	bl	800c234 <HAL_GPIO_WritePin>
}
 8006840:	bf00      	nop
 8006842:	bd80      	pop	{r7, pc}
 8006844:	40020000 	.word	0x40020000

08006848 <scaraStartup>:
//											 "Over Velocity",
//											 "Over Accelerate",
//											 "Wrong Joint Num",
//											 "Wrong Coordinate"
//											};
void				scaraStartup(void) {
 8006848:	b580      	push	{r7, lr}
 800684a:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	scaraSetScanFlag();
#endif
	lowlayer_CPLD_Init();
 800684c:	f7ff ffd8 	bl	8006800 <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 8006850:	f7ff ffe2 	bl	8006818 <lowlayer_stepMotorInit>
	lowlayer_resetEncoder();
 8006854:	f7ff fed8 	bl	8006608 <lowlayer_resetEncoder>
	//lowlayer_writePulse(0, 0, 0, 0);
}
 8006858:	bf00      	nop
 800685a:	bd80      	pop	{r7, pc}
 800685c:	0000      	movs	r0, r0
	...

08006860 <scaraInitDuty>:
	return SCARA_STATUS_OK;
	
}

/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 8006860:	b084      	sub	sp, #16
 8006862:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006864:	ed2d 8b02 	vpush	{d8}
 8006868:	f5ad 7d7d 	sub.w	sp, sp, #1012	; 0x3f4
 800686c:	af90      	add	r7, sp, #576	; 0x240
 800686e:	f507 74e8 	add.w	r4, r7, #464	; 0x1d0
 8006872:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if(DUTY_SPACE_TASK == command.space_type) {
 8006876:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 800687a:	2b00      	cmp	r3, #0
 800687c:	f040 83e6 	bne.w	800704c <scaraInitDuty+0x7ec>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 8006880:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 8006884:	a3c3      	add	r3, pc, #780	; (adr r3, 8006b94 <scaraInitDuty+0x334>)
 8006886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688a:	f7f9 feb5 	bl	80005f8 <__aeabi_dmul>
 800688e:	4603      	mov	r3, r0
 8006890:	460c      	mov	r4, r1
 8006892:	4618      	mov	r0, r3
 8006894:	4621      	mov	r1, r4
 8006896:	f04f 0200 	mov.w	r2, #0
 800689a:	4bb7      	ldr	r3, [pc, #732]	; (8006b78 <scaraInitDuty+0x318>)
 800689c:	f7f9 ffd6 	bl	800084c <__aeabi_ddiv>
 80068a0:	4603      	mov	r3, r0
 80068a2:	460c      	mov	r4, r1
 80068a4:	e9c7 3496 	strd	r3, r4, [r7, #600]	; 0x258
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80068a8:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d13c      	bne.n	800692a <scaraInitDuty+0xca>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 80068b0:	4bb2      	ldr	r3, [pc, #712]	; (8006b7c <scaraInitDuty+0x31c>)
 80068b2:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80068b6:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 80068ba:	461a      	mov	r2, r3
 80068bc:	4623      	mov	r3, r4
 80068be:	f7f9 fce5 	bl	800028c <__adddf3>
 80068c2:	4603      	mov	r3, r0
 80068c4:	460c      	mov	r4, r1
 80068c6:	f107 0208 	add.w	r2, r7, #8
 80068ca:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
			target_point.y 		= positionCurrent.y + command.target_point.y;
 80068ce:	4bab      	ldr	r3, [pc, #684]	; (8006b7c <scaraInitDuty+0x31c>)
 80068d0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80068d4:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 80068d8:	461a      	mov	r2, r3
 80068da:	4623      	mov	r3, r4
 80068dc:	f7f9 fcd6 	bl	800028c <__adddf3>
 80068e0:	4603      	mov	r3, r0
 80068e2:	460c      	mov	r4, r1
 80068e4:	f107 0208 	add.w	r2, r7, #8
 80068e8:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
			target_point.z 		= positionCurrent.z + command.target_point.z;
 80068ec:	4ba3      	ldr	r3, [pc, #652]	; (8006b7c <scaraInitDuty+0x31c>)
 80068ee:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80068f2:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 80068f6:	461a      	mov	r2, r3
 80068f8:	4623      	mov	r3, r4
 80068fa:	f7f9 fcc7 	bl	800028c <__adddf3>
 80068fe:	4603      	mov	r3, r0
 8006900:	460c      	mov	r4, r1
 8006902:	f107 0208 	add.w	r2, r7, #8
 8006906:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 800690a:	4b9c      	ldr	r3, [pc, #624]	; (8006b7c <scaraInitDuty+0x31c>)
 800690c:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8006910:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 8006914:	461a      	mov	r2, r3
 8006916:	4623      	mov	r3, r4
 8006918:	f7f9 fcb8 	bl	800028c <__adddf3>
 800691c:	4603      	mov	r3, r0
 800691e:	460c      	mov	r4, r1
 8006920:	f107 0208 	add.w	r2, r7, #8
 8006924:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
 8006928:	e01f      	b.n	800696a <scaraInitDuty+0x10a>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 800692a:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 800692e:	2b00      	cmp	r3, #0
 8006930:	d118      	bne.n	8006964 <scaraInitDuty+0x104>
			target_point.x 		= command.target_point.x;
 8006932:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8006936:	f107 0208 	add.w	r2, r7, #8
 800693a:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
			target_point.y 		= command.target_point.y;
 800693e:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8006942:	f107 0208 	add.w	r2, r7, #8
 8006946:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
			target_point.z 		= command.target_point.z;
 800694a:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 800694e:	f107 0208 	add.w	r2, r7, #8
 8006952:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
			target_point.roll	= command.target_point.roll;
 8006956:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 800695a:	f107 0208 	add.w	r2, r7, #8
 800695e:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
 8006962:	e002      	b.n	800696a <scaraInitDuty+0x10a>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8006964:	230c      	movs	r3, #12
 8006966:	f000 bf2a 	b.w	80077be <scaraInitDuty+0xf5e>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 800696a:	f107 0308 	add.w	r3, r7, #8
 800696e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8006972:	4b82      	ldr	r3, [pc, #520]	; (8006b7c <scaraInitDuty+0x31c>)
 8006974:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8006978:	461a      	mov	r2, r3
 800697a:	4623      	mov	r3, r4
 800697c:	f7f9 fc84 	bl	8000288 <__aeabi_dsub>
 8006980:	4603      	mov	r3, r0
 8006982:	460c      	mov	r4, r1
 8006984:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
		dir_angle = 1;
 8006988:	2301      	movs	r3, #1
 800698a:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
		if ( angle_s < 0) {
 800698e:	f04f 0200 	mov.w	r2, #0
 8006992:	f04f 0300 	mov.w	r3, #0
 8006996:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800699a:	f7fa f89f 	bl	8000adc <__aeabi_dcmplt>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <scaraInitDuty+0x14a>
			dir_angle = -1;
 80069a4:	23ff      	movs	r3, #255	; 0xff
 80069a6:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
//		if(positionCurrent.roll + angle_s < -3.14 || positionCurrent.roll + angle_s > 3.14){
//			dir_angle = -dir_angle;
//			angle_s = (2*PI - fabs(angle_s))*dir_angle;
//		}

		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 80069aa:	4b75      	ldr	r3, [pc, #468]	; (8006b80 <scaraInitDuty+0x320>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 80069b0:	4b72      	ldr	r3, [pc, #456]	; (8006b7c <scaraInitDuty+0x31c>)
 80069b2:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80069b6:	4a72      	ldr	r2, [pc, #456]	; (8006b80 <scaraInitDuty+0x320>)
 80069b8:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 80069bc:	e9c2 3400 	strd	r3, r4, [r2]
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 80069c0:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d120      	bne.n	8006a0a <scaraInitDuty+0x1aa>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 80069c8:	4b6d      	ldr	r3, [pc, #436]	; (8006b80 <scaraInitDuty+0x320>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 80069ce:	4c6b      	ldr	r4, [pc, #428]	; (8006b7c <scaraInitDuty+0x31c>)
 80069d0:	f107 0308 	add.w	r3, r7, #8
 80069d4:	a82e      	add	r0, sp, #184	; 0xb8
 80069d6:	4619      	mov	r1, r3
 80069d8:	23c0      	movs	r3, #192	; 0xc0
 80069da:	461a      	mov	r2, r3
 80069dc:	f00f f9be 	bl	8015d5c <memcpy>
 80069e0:	4668      	mov	r0, sp
 80069e2:	f104 0308 	add.w	r3, r4, #8
 80069e6:	22b8      	movs	r2, #184	; 0xb8
 80069e8:	4619      	mov	r1, r3
 80069ea:	f00f f9b7 	bl	8015d5c <memcpy>
 80069ee:	e894 000c 	ldmia.w	r4, {r2, r3}
 80069f2:	4864      	ldr	r0, [pc, #400]	; (8006b84 <scaraInitDuty+0x324>)
 80069f4:	f000 fef8 	bl	80077e8 <scaraInitLine>
 80069f8:	4603      	mov	r3, r0
 80069fa:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
			total_s = myDUTY.task.path.line.total_s;
 80069fe:	4b60      	ldr	r3, [pc, #384]	; (8006b80 <scaraInitDuty+0x320>)
 8006a00:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8006a04:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
 8006a08:	e057      	b.n	8006aba <scaraInitDuty+0x25a>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 8006a0a:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d150      	bne.n	8006ab4 <scaraInitDuty+0x254>
			SCARA_PositionTypeDef	center_point;
			target_point.z = positionCurrent.z;
 8006a12:	4b5a      	ldr	r3, [pc, #360]	; (8006b7c <scaraInitDuty+0x31c>)
 8006a14:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8006a18:	f107 0208 	add.w	r2, r7, #8
 8006a1c:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58

			center_point.x 		= positionCurrent.x + command.sub_point.x;
 8006a20:	4b56      	ldr	r3, [pc, #344]	; (8006b7c <scaraInitDuty+0x31c>)
 8006a22:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006a26:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	4623      	mov	r3, r4
 8006a2e:	f7f9 fc2d 	bl	800028c <__adddf3>
 8006a32:	4603      	mov	r3, r0
 8006a34:	460c      	mov	r4, r1
 8006a36:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			center_point.y 		= positionCurrent.y + command.sub_point.y;
 8006a3a:	4b50      	ldr	r3, [pc, #320]	; (8006b7c <scaraInitDuty+0x31c>)
 8006a3c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006a40:	e9d7 34c2 	ldrd	r3, r4, [r7, #776]	; 0x308
 8006a44:	461a      	mov	r2, r3
 8006a46:	4623      	mov	r3, r4
 8006a48:	f7f9 fc20 	bl	800028c <__adddf3>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	460c      	mov	r4, r1
 8006a50:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			center_point.z 		= positionCurrent.z;
 8006a54:	4b49      	ldr	r3, [pc, #292]	; (8006b7c <scaraInitDuty+0x31c>)
 8006a56:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8006a5a:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 8006a5e:	4b48      	ldr	r3, [pc, #288]	; (8006b80 <scaraInitDuty+0x320>)
 8006a60:	2201      	movs	r2, #1
 8006a62:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 8006a64:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006a68:	4c44      	ldr	r4, [pc, #272]	; (8006b7c <scaraInitDuty+0x31c>)
 8006a6a:	938e      	str	r3, [sp, #568]	; 0x238
 8006a6c:	a85e      	add	r0, sp, #376	; 0x178
 8006a6e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006a72:	22c0      	movs	r2, #192	; 0xc0
 8006a74:	4619      	mov	r1, r3
 8006a76:	f00f f971 	bl	8015d5c <memcpy>
 8006a7a:	f107 0308 	add.w	r3, r7, #8
 8006a7e:	a82e      	add	r0, sp, #184	; 0xb8
 8006a80:	4619      	mov	r1, r3
 8006a82:	23c0      	movs	r3, #192	; 0xc0
 8006a84:	461a      	mov	r2, r3
 8006a86:	f00f f969 	bl	8015d5c <memcpy>
 8006a8a:	4668      	mov	r0, sp
 8006a8c:	f104 0308 	add.w	r3, r4, #8
 8006a90:	22b8      	movs	r2, #184	; 0xb8
 8006a92:	4619      	mov	r1, r3
 8006a94:	f00f f962 	bl	8015d5c <memcpy>
 8006a98:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006a9c:	483a      	ldr	r0, [pc, #232]	; (8006b88 <scaraInitDuty+0x328>)
 8006a9e:	f000 ff67 	bl	8007970 <scaraInitCircle>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
										positionCurrent,
										target_point,
										center_point,
										command.arc_dir );
			total_s = myDUTY.task.path.circle.total_s;
 8006aa8:	4b35      	ldr	r3, [pc, #212]	; (8006b80 <scaraInitDuty+0x320>)
 8006aaa:	e9d3 343a 	ldrd	r3, r4, [r3, #232]	; 0xe8
 8006aae:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
 8006ab2:	e002      	b.n	8006aba <scaraInitDuty+0x25a>

		} else {
			return SCARA_STATUS_ERROR_TASK;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	f000 be82 	b.w	80077be <scaraInitDuty+0xf5e>
		}

		if ( SCARA_STATUS_OK != status) {
 8006aba:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <scaraInitDuty+0x26a>
			return status;
 8006ac2:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8006ac6:	f000 be7a 	b.w	80077be <scaraInitDuty+0xf5e>
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 8006aca:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f040 80f7 	bne.w	8006cc2 <scaraInitDuty+0x462>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006ad4:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d15f      	bne.n	8006b9c <scaraInitDuty+0x33c>
				//myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006adc:	4b28      	ldr	r3, [pc, #160]	; (8006b80 <scaraInitDuty+0x320>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB1(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8006ae4:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006ae8:	ed97 6b7c 	vldr	d6, [r7, #496]	; 0x1f0
 8006aec:	eeb0 2a46 	vmov.f32	s4, s12
 8006af0:	eef0 2a66 	vmov.f32	s5, s13
 8006af4:	eeb0 1a47 	vmov.f32	s2, s14
 8006af8:	eef0 1a67 	vmov.f32	s3, s15
 8006afc:	2201      	movs	r2, #1
 8006afe:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8006b02:	2104      	movs	r1, #4
 8006b04:	4821      	ldr	r0, [pc, #132]	; (8006b8c <scaraInitDuty+0x32c>)
 8006b06:	f001 f93f 	bl	8007d88 <scaraInitLSPB1>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006b10:	4a1b      	ldr	r2, [pc, #108]	; (8006b80 <scaraInitDuty+0x320>)
 8006b12:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8006b16:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
				myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8006b1a:	4b19      	ldr	r3, [pc, #100]	; (8006b80 <scaraInitDuty+0x320>)
 8006b1c:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8006b20:	4a17      	ldr	r2, [pc, #92]	; (8006b80 <scaraInitDuty+0x320>)
 8006b22:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006b26:	e9c2 3400 	strd	r3, r4, [r2]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006b2a:	4b15      	ldr	r3, [pc, #84]	; (8006b80 <scaraInitDuty+0x320>)
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8006b32:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7f9 fcf4 	bl	8000524 <__aeabi_i2d>
 8006b3c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8006b40:	f7f9 fd5a 	bl	80005f8 <__aeabi_dmul>
 8006b44:	4603      	mov	r3, r0
 8006b46:	460c      	mov	r4, r1
 8006b48:	ec44 3b16 	vmov	d6, r3, r4
 8006b4c:	4b0c      	ldr	r3, [pc, #48]	; (8006b80 <scaraInitDuty+0x320>)
 8006b4e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006b52:	ed93 7b00 	vldr	d7, [r3]
 8006b56:	eeb0 1a47 	vmov.f32	s2, s14
 8006b5a:	eef0 1a67 	vmov.f32	s3, s15
 8006b5e:	2203      	movs	r2, #3
 8006b60:	eeb0 0a46 	vmov.f32	s0, s12
 8006b64:	eef0 0a66 	vmov.f32	s1, s13
 8006b68:	2105      	movs	r1, #5
 8006b6a:	4809      	ldr	r0, [pc, #36]	; (8006b90 <scaraInitDuty+0x330>)
 8006b6c:	f001 f8ba 	bl	8007ce4 <scaraInitLinear>
 8006b70:	4603      	mov	r3, r0
 8006b72:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8006b76:	e25a      	b.n	800702e <scaraInitDuty+0x7ce>
 8006b78:	40668000 	.word	0x40668000
 8006b7c:	2000eab0 	.word	0x2000eab0
 8006b80:	2000def0 	.word	0x2000def0
 8006b84:	2000df00 	.word	0x2000df00
 8006b88:	2000df70 	.word	0x2000df70
 8006b8c:	2000e008 	.word	0x2000e008
 8006b90:	2000e2d8 	.word	0x2000e2d8
 8006b94:	60000000 	.word	0x60000000
 8006b98:	400921fb 	.word	0x400921fb
			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006b9c:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f040 808b 	bne.w	8006cbc <scaraInitDuty+0x45c>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006ba6:	4bbc      	ldr	r3, [pc, #752]	; (8006e98 <scaraInitDuty+0x638>)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8006bae:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006bb2:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006bb6:	eeb0 2a46 	vmov.f32	s4, s12
 8006bba:	eef0 2a66 	vmov.f32	s5, s13
 8006bbe:	eeb0 1a47 	vmov.f32	s2, s14
 8006bc2:	eef0 1a67 	vmov.f32	s3, s15
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8006bcc:	2104      	movs	r1, #4
 8006bce:	48b3      	ldr	r0, [pc, #716]	; (8006e9c <scaraInitDuty+0x63c>)
 8006bd0:	f002 fb32 	bl	8009238 <scaraInitLSPB>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006bda:	4baf      	ldr	r3, [pc, #700]	; (8006e98 <scaraInitDuty+0x638>)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8006be2:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006be6:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006bea:	eeb0 2a46 	vmov.f32	s4, s12
 8006bee:	eef0 2a66 	vmov.f32	s5, s13
 8006bf2:	eeb0 1a47 	vmov.f32	s2, s14
 8006bf6:	eef0 1a67 	vmov.f32	s3, s15
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 8006c00:	2105      	movs	r1, #5
 8006c02:	48a7      	ldr	r0, [pc, #668]	; (8006ea0 <scaraInitDuty+0x640>)
 8006c04:	f002 fb18 	bl	8009238 <scaraInitLSPB>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// Synchronous time end
				if(myDUTY.task.trajectory_3d.lspb.Tf > myDUTY.task.trajectory_roll.lspb.Tf) {
 8006c0e:	4ba2      	ldr	r3, [pc, #648]	; (8006e98 <scaraInitDuty+0x638>)
 8006c10:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 8006c14:	4ba0      	ldr	r3, [pc, #640]	; (8006e98 <scaraInitDuty+0x638>)
 8006c16:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	4623      	mov	r3, r4
 8006c1e:	f7f9 ff7b 	bl	8000b18 <__aeabi_dcmpgt>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d024      	beq.n	8006c72 <scaraInitDuty+0x412>
					myDUTY.task.trajectory_roll.lspb.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
 8006c28:	4b9b      	ldr	r3, [pc, #620]	; (8006e98 <scaraInitDuty+0x638>)
 8006c2a:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8006c2e:	4a9a      	ldr	r2, [pc, #616]	; (8006e98 <scaraInitDuty+0x638>)
 8006c30:	e9c2 34ba 	strd	r3, r4, [r2, #744]	; 0x2e8
					status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8006c34:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006c38:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006c3c:	eeb0 2a46 	vmov.f32	s4, s12
 8006c40:	eef0 2a66 	vmov.f32	s5, s13
 8006c44:	eeb0 1a47 	vmov.f32	s2, s14
 8006c48:	eef0 1a67 	vmov.f32	s3, s15
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 8006c52:	2105      	movs	r1, #5
 8006c54:	4892      	ldr	r0, [pc, #584]	; (8006ea0 <scaraInitDuty+0x640>)
 8006c56:	f002 faef 	bl	8009238 <scaraInitLSPB>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8006c60:	4b8d      	ldr	r3, [pc, #564]	; (8006e98 <scaraInitDuty+0x638>)
 8006c62:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8006c66:	4a8c      	ldr	r2, [pc, #560]	; (8006e98 <scaraInitDuty+0x638>)
 8006c68:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006c6c:	e9c2 3400 	strd	r3, r4, [r2]
 8006c70:	e1dd      	b.n	800702e <scaraInitDuty+0x7ce>
				} else {
					myDUTY.task.trajectory_3d.lspb.Tf = myDUTY.task.trajectory_roll.lspb.Tf;
 8006c72:	4b89      	ldr	r3, [pc, #548]	; (8006e98 <scaraInitDuty+0x638>)
 8006c74:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8006c78:	4a87      	ldr	r2, [pc, #540]	; (8006e98 <scaraInitDuty+0x638>)
 8006c7a:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
					status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8006c7e:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006c82:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006c86:	eeb0 2a46 	vmov.f32	s4, s12
 8006c8a:	eef0 2a66 	vmov.f32	s5, s13
 8006c8e:	eeb0 1a47 	vmov.f32	s2, s14
 8006c92:	eef0 1a67 	vmov.f32	s3, s15
 8006c96:	2201      	movs	r2, #1
 8006c98:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8006c9c:	2104      	movs	r1, #4
 8006c9e:	487f      	ldr	r0, [pc, #508]	; (8006e9c <scaraInitDuty+0x63c>)
 8006ca0:	f002 faca 	bl	8009238 <scaraInitLSPB>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.lspb.Tf;
 8006caa:	4b7b      	ldr	r3, [pc, #492]	; (8006e98 <scaraInitDuty+0x638>)
 8006cac:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8006cb0:	4a79      	ldr	r2, [pc, #484]	; (8006e98 <scaraInitDuty+0x638>)
 8006cb2:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006cb6:	e9c2 3400 	strd	r3, r4, [r2]
 8006cba:	e1b8      	b.n	800702e <scaraInitDuty+0x7ce>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 8006cbc:	2308      	movs	r3, #8
 8006cbe:	f000 bd7e 	b.w	80077be <scaraInitDuty+0xf5e>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 8006cc2:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	f040 80f2 	bne.w	8006eb0 <scaraInitDuty+0x650>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006ccc:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d14d      	bne.n	8006d70 <scaraInitDuty+0x510>
				//myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006cd4:	4b70      	ldr	r3, [pc, #448]	; (8006e98 <scaraInitDuty+0x638>)
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve1(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8006cdc:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006ce0:	ed97 6b7c 	vldr	d6, [r7, #496]	; 0x1f0
 8006ce4:	eeb0 2a46 	vmov.f32	s4, s12
 8006ce8:	eef0 2a66 	vmov.f32	s5, s13
 8006cec:	eeb0 1a47 	vmov.f32	s2, s14
 8006cf0:	eef0 1a67 	vmov.f32	s3, s15
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8006cfa:	2104      	movs	r1, #4
 8006cfc:	4869      	ldr	r0, [pc, #420]	; (8006ea4 <scaraInitDuty+0x644>)
 8006cfe:	f001 fb0b 	bl	8008318 <scaraInitScurve1>
 8006d02:	4603      	mov	r3, r0
 8006d04:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006d08:	4a63      	ldr	r2, [pc, #396]	; (8006e98 <scaraInitDuty+0x638>)
 8006d0a:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8006d0e:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
				myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8006d12:	4b61      	ldr	r3, [pc, #388]	; (8006e98 <scaraInitDuty+0x638>)
 8006d14:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8006d18:	4a5f      	ldr	r2, [pc, #380]	; (8006e98 <scaraInitDuty+0x638>)
 8006d1a:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006d1e:	e9c2 3400 	strd	r3, r4, [r2]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006d22:	4b5d      	ldr	r3, [pc, #372]	; (8006e98 <scaraInitDuty+0x638>)
 8006d24:	2202      	movs	r2, #2
 8006d26:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8006d2a:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7f9 fbf8 	bl	8000524 <__aeabi_i2d>
 8006d34:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8006d38:	f7f9 fc5e 	bl	80005f8 <__aeabi_dmul>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	460c      	mov	r4, r1
 8006d40:	ec44 3b16 	vmov	d6, r3, r4
 8006d44:	4b54      	ldr	r3, [pc, #336]	; (8006e98 <scaraInitDuty+0x638>)
 8006d46:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006d4a:	ed93 7b00 	vldr	d7, [r3]
 8006d4e:	eeb0 1a47 	vmov.f32	s2, s14
 8006d52:	eef0 1a67 	vmov.f32	s3, s15
 8006d56:	2203      	movs	r2, #3
 8006d58:	eeb0 0a46 	vmov.f32	s0, s12
 8006d5c:	eef0 0a66 	vmov.f32	s1, s13
 8006d60:	2105      	movs	r1, #5
 8006d62:	4851      	ldr	r0, [pc, #324]	; (8006ea8 <scaraInitDuty+0x648>)
 8006d64:	f000 ffbe 	bl	8007ce4 <scaraInitLinear>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8006d6e:	e15e      	b.n	800702e <scaraInitDuty+0x7ce>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006d70:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f040 808b 	bne.w	8006e90 <scaraInitDuty+0x630>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006d7a:	4b47      	ldr	r3, [pc, #284]	; (8006e98 <scaraInitDuty+0x638>)
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8006d82:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006d86:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006d8a:	eeb0 2a46 	vmov.f32	s4, s12
 8006d8e:	eef0 2a66 	vmov.f32	s5, s13
 8006d92:	eeb0 1a47 	vmov.f32	s2, s14
 8006d96:	eef0 1a67 	vmov.f32	s3, s15
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8006da0:	2104      	movs	r1, #4
 8006da2:	4840      	ldr	r0, [pc, #256]	; (8006ea4 <scaraInitDuty+0x644>)
 8006da4:	f002 fe26 	bl	80099f4 <scaraInitScurve>
 8006da8:	4603      	mov	r3, r0
 8006daa:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006dae:	4b3a      	ldr	r3, [pc, #232]	; (8006e98 <scaraInitDuty+0x638>)
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8006db6:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006dba:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006dbe:	eeb0 2a46 	vmov.f32	s4, s12
 8006dc2:	eef0 2a66 	vmov.f32	s5, s13
 8006dc6:	eeb0 1a47 	vmov.f32	s2, s14
 8006dca:	eef0 1a67 	vmov.f32	s3, s15
 8006dce:	2200      	movs	r2, #0
 8006dd0:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 8006dd4:	2105      	movs	r1, #5
 8006dd6:	4835      	ldr	r0, [pc, #212]	; (8006eac <scaraInitDuty+0x64c>)
 8006dd8:	f002 fe0c 	bl	80099f4 <scaraInitScurve>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// synchronous time end
				if(myDUTY.task.trajectory_3d.scurve.Tf > myDUTY.task.trajectory_roll.scurve.Tf) {
 8006de2:	4b2d      	ldr	r3, [pc, #180]	; (8006e98 <scaraInitDuty+0x638>)
 8006de4:	e9d3 017e 	ldrd	r0, r1, [r3, #504]	; 0x1f8
 8006de8:	4b2b      	ldr	r3, [pc, #172]	; (8006e98 <scaraInitDuty+0x638>)
 8006dea:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 8006dee:	461a      	mov	r2, r3
 8006df0:	4623      	mov	r3, r4
 8006df2:	f7f9 fe91 	bl	8000b18 <__aeabi_dcmpgt>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d024      	beq.n	8006e46 <scaraInitDuty+0x5e6>
					myDUTY.task.trajectory_roll.scurve.Tf = myDUTY.task.trajectory_3d.scurve.Tf;
 8006dfc:	4b26      	ldr	r3, [pc, #152]	; (8006e98 <scaraInitDuty+0x638>)
 8006dfe:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8006e02:	4a25      	ldr	r2, [pc, #148]	; (8006e98 <scaraInitDuty+0x638>)
 8006e04:	e9c2 34de 	strd	r3, r4, [r2, #888]	; 0x378
					status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8006e08:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006e0c:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006e10:	eeb0 2a46 	vmov.f32	s4, s12
 8006e14:	eef0 2a66 	vmov.f32	s5, s13
 8006e18:	eeb0 1a47 	vmov.f32	s2, s14
 8006e1c:	eef0 1a67 	vmov.f32	s3, s15
 8006e20:	2201      	movs	r2, #1
 8006e22:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 8006e26:	2105      	movs	r1, #5
 8006e28:	4820      	ldr	r0, [pc, #128]	; (8006eac <scaraInitDuty+0x64c>)
 8006e2a:	f002 fde3 	bl	80099f4 <scaraInitScurve>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8006e34:	4b18      	ldr	r3, [pc, #96]	; (8006e98 <scaraInitDuty+0x638>)
 8006e36:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8006e3a:	4a17      	ldr	r2, [pc, #92]	; (8006e98 <scaraInitDuty+0x638>)
 8006e3c:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006e40:	e9c2 3400 	strd	r3, r4, [r2]
 8006e44:	e0f3      	b.n	800702e <scaraInitDuty+0x7ce>
				} else {
					myDUTY.task.trajectory_3d.scurve.Tf = myDUTY.task.trajectory_roll.scurve.Tf;
 8006e46:	4b14      	ldr	r3, [pc, #80]	; (8006e98 <scaraInitDuty+0x638>)
 8006e48:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 8006e4c:	4a12      	ldr	r2, [pc, #72]	; (8006e98 <scaraInitDuty+0x638>)
 8006e4e:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
					status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8006e52:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006e56:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006e5a:	eeb0 2a46 	vmov.f32	s4, s12
 8006e5e:	eef0 2a66 	vmov.f32	s5, s13
 8006e62:	eeb0 1a47 	vmov.f32	s2, s14
 8006e66:	eef0 1a67 	vmov.f32	s3, s15
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8006e70:	2104      	movs	r1, #4
 8006e72:	480c      	ldr	r0, [pc, #48]	; (8006ea4 <scaraInitDuty+0x644>)
 8006e74:	f002 fdbe 	bl	80099f4 <scaraInitScurve>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.scurve.Tf;
 8006e7e:	4b06      	ldr	r3, [pc, #24]	; (8006e98 <scaraInitDuty+0x638>)
 8006e80:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 8006e84:	4a04      	ldr	r2, [pc, #16]	; (8006e98 <scaraInitDuty+0x638>)
 8006e86:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006e8a:	e9c2 3400 	strd	r3, r4, [r2]
 8006e8e:	e0ce      	b.n	800702e <scaraInitDuty+0x7ce>
				}
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8006e90:	2308      	movs	r3, #8
 8006e92:	f000 bc94 	b.w	80077be <scaraInitDuty+0xf5e>
 8006e96:	bf00      	nop
 8006e98:	2000def0 	.word	0x2000def0
 8006e9c:	2000e008 	.word	0x2000e008
 8006ea0:	2000e188 	.word	0x2000e188
 8006ea4:	2000e088 	.word	0x2000e088
 8006ea8:	2000e2d8 	.word	0x2000e2d8
 8006eac:	2000e208 	.word	0x2000e208
			}
		}else if(DUTY_TRAJECTORY_LINEAR == command.trajec_type){
 8006eb0:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d172      	bne.n	8006f9e <scaraInitDuty+0x73e>
			//myDUTY.time_total = command.time_total;
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006eb8:	4ab7      	ldr	r2, [pc, #732]	; (8007198 <scaraInitDuty+0x938>)
 8006eba:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8006ebe:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006ec2:	4bb5      	ldr	r3, [pc, #724]	; (8007198 <scaraInitDuty+0x938>)
 8006ec4:	2202      	movs	r2, #2
 8006ec6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006eca:	4bb3      	ldr	r3, [pc, #716]	; (8007198 <scaraInitDuty+0x938>)
 8006ecc:	2202      	movs	r2, #2
 8006ece:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			if(command.modeInit_type == DUTY_MODE_INIT_QT){
 8006ed2:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d118      	bne.n	8006f0c <scaraInitDuty+0x6ac>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, fabs(total_s), DUTY_MODE_INIT_QT, command.time_total);
 8006eda:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8006ede:	603b      	str	r3, [r7, #0]
 8006ee0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006ee4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ee8:	607b      	str	r3, [r7, #4]
 8006eea:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 8006eee:	eeb0 1a47 	vmov.f32	s2, s14
 8006ef2:	eef0 1a67 	vmov.f32	s3, s15
 8006ef6:	2203      	movs	r2, #3
 8006ef8:	ed97 0b00 	vldr	d0, [r7]
 8006efc:	2104      	movs	r1, #4
 8006efe:	48a7      	ldr	r0, [pc, #668]	; (800719c <scaraInitDuty+0x93c>)
 8006f00:	f000 fef0 	bl	8007ce4 <scaraInitLinear>
 8006f04:	4603      	mov	r3, r0
 8006f06:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 8006f0a:	e01d      	b.n	8006f48 <scaraInitDuty+0x6e8>
			}else if(command.modeInit_type == DUTY_MODE_INIT_QV){
 8006f0c:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d116      	bne.n	8006f42 <scaraInitDuty+0x6e2>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, fabs(total_s), DUTY_MODE_INIT_QV, command.v_factor);
 8006f14:	f8d7 51a0 	ldr.w	r5, [r7, #416]	; 0x1a0
 8006f18:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006f1c:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8006f20:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006f24:	eeb0 1a47 	vmov.f32	s2, s14
 8006f28:	eef0 1a67 	vmov.f32	s3, s15
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	ec46 5b10 	vmov	d0, r5, r6
 8006f32:	2104      	movs	r1, #4
 8006f34:	4899      	ldr	r0, [pc, #612]	; (800719c <scaraInitDuty+0x93c>)
 8006f36:	f000 fed5 	bl	8007ce4 <scaraInitLinear>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 8006f40:	e002      	b.n	8006f48 <scaraInitDuty+0x6e8>
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8006f42:	2308      	movs	r3, #8
 8006f44:	f000 bc3b 	b.w	80077be <scaraInitDuty+0xf5e>
			}
			myDUTY.time_total = myDUTY.task.trajectory_3d.linear.Tf;
 8006f48:	4b93      	ldr	r3, [pc, #588]	; (8007198 <scaraInitDuty+0x938>)
 8006f4a:	e9d3 34a0 	ldrd	r3, r4, [r3, #640]	; 0x280
 8006f4e:	4a92      	ldr	r2, [pc, #584]	; (8007198 <scaraInitDuty+0x938>)
 8006f50:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006f54:	e9c2 3400 	strd	r3, r4, [r2]
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8006f58:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7f9 fae1 	bl	8000524 <__aeabi_i2d>
 8006f62:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8006f66:	f7f9 fb47 	bl	80005f8 <__aeabi_dmul>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	460c      	mov	r4, r1
 8006f6e:	ec44 3b16 	vmov	d6, r3, r4
 8006f72:	4b89      	ldr	r3, [pc, #548]	; (8007198 <scaraInitDuty+0x938>)
 8006f74:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006f78:	ed93 7b00 	vldr	d7, [r3]
 8006f7c:	eeb0 1a47 	vmov.f32	s2, s14
 8006f80:	eef0 1a67 	vmov.f32	s3, s15
 8006f84:	2203      	movs	r2, #3
 8006f86:	eeb0 0a46 	vmov.f32	s0, s12
 8006f8a:	eef0 0a66 	vmov.f32	s1, s13
 8006f8e:	2105      	movs	r1, #5
 8006f90:	4883      	ldr	r0, [pc, #524]	; (80071a0 <scaraInitDuty+0x940>)
 8006f92:	f000 fea7 	bl	8007ce4 <scaraInitLinear>
 8006f96:	4603      	mov	r3, r0
 8006f98:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8006f9c:	e047      	b.n	800702e <scaraInitDuty+0x7ce>
		}else if(DUTY_TRAJECTORY_GCODE_LSPB == command.trajec_type){
 8006f9e:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006fa2:	2b03      	cmp	r3, #3
 8006fa4:	d141      	bne.n	800702a <scaraInitDuty+0x7ca>
			status1 = SCARA_STATUS_OK;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006fac:	4a7a      	ldr	r2, [pc, #488]	; (8007198 <scaraInitDuty+0x938>)
 8006fae:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8006fb2:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_GCODE_LSPB;
 8006fb6:	4b78      	ldr	r3, [pc, #480]	; (8007198 <scaraInitDuty+0x938>)
 8006fb8:	2203      	movs	r2, #3
 8006fba:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006fbe:	4b76      	ldr	r3, [pc, #472]	; (8007198 <scaraInitDuty+0x938>)
 8006fc0:	2202      	movs	r2, #2
 8006fc2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			myDUTY.time_total = command.time_total;
 8006fc6:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8006fca:	4a73      	ldr	r2, [pc, #460]	; (8007198 <scaraInitDuty+0x938>)
 8006fcc:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006fd0:	e9c2 3400 	strd	r3, r4, [r2]
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total - last_T);
 8006fd4:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7f9 faa3 	bl	8000524 <__aeabi_i2d>
 8006fde:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8006fe2:	f7f9 fb09 	bl	80005f8 <__aeabi_dmul>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	460c      	mov	r4, r1
 8006fea:	ec44 3b18 	vmov	d8, r3, r4
 8006fee:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8006ff2:	4b6c      	ldr	r3, [pc, #432]	; (80071a4 <scaraInitDuty+0x944>)
 8006ff4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	4623      	mov	r3, r4
 8006ffc:	f7f9 f944 	bl	8000288 <__aeabi_dsub>
 8007000:	4603      	mov	r3, r0
 8007002:	460c      	mov	r4, r1
 8007004:	ec44 3b17 	vmov	d7, r3, r4
 8007008:	eeb0 1a47 	vmov.f32	s2, s14
 800700c:	eef0 1a67 	vmov.f32	s3, s15
 8007010:	2203      	movs	r2, #3
 8007012:	eeb0 0a48 	vmov.f32	s0, s16
 8007016:	eef0 0a68 	vmov.f32	s1, s17
 800701a:	2105      	movs	r1, #5
 800701c:	4860      	ldr	r0, [pc, #384]	; (80071a0 <scaraInitDuty+0x940>)
 800701e:	f000 fe61 	bl	8007ce4 <scaraInitLinear>
 8007022:	4603      	mov	r3, r0
 8007024:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8007028:	e001      	b.n	800702e <scaraInitDuty+0x7ce>
		}else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 800702a:	2305      	movs	r3, #5
 800702c:	e3c7      	b.n	80077be <scaraInitDuty+0xf5e>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 800702e:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8007032:	2b00      	cmp	r3, #0
 8007034:	d002      	beq.n	800703c <scaraInitDuty+0x7dc>
			return status1;
 8007036:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800703a:	e3c0      	b.n	80077be <scaraInitDuty+0xf5e>
		}
		if ( SCARA_STATUS_OK != status2) {
 800703c:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 838e 	beq.w	8007762 <scaraInitDuty+0xf02>
			return status2;
 8007046:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 800704a:	e3b8      	b.n	80077be <scaraInitDuty+0xf5e>
		}


	
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 800704c:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 8007050:	2b01      	cmp	r3, #1
 8007052:	f040 8384 	bne.w	800775e <scaraInitDuty+0xefe>
		/*----------- Space Joint ------------*/
		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 8007056:	4b50      	ldr	r3, [pc, #320]	; (8007198 <scaraInitDuty+0x938>)
 8007058:	2201      	movs	r2, #1
 800705a:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 800705c:	4b52      	ldr	r3, [pc, #328]	; (80071a8 <scaraInitDuty+0x948>)
 800705e:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8007062:	4a4d      	ldr	r2, [pc, #308]	; (8007198 <scaraInitDuty+0x938>)
 8007064:	f602 2218 	addw	r2, r2, #2584	; 0xa18
 8007068:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 800706c:	4b4e      	ldr	r3, [pc, #312]	; (80071a8 <scaraInitDuty+0x948>)
 800706e:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8007072:	4a49      	ldr	r2, [pc, #292]	; (8007198 <scaraInitDuty+0x938>)
 8007074:	f502 6222 	add.w	r2, r2, #2592	; 0xa20
 8007078:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 800707c:	4b4a      	ldr	r3, [pc, #296]	; (80071a8 <scaraInitDuty+0x948>)
 800707e:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8007082:	4a45      	ldr	r2, [pc, #276]	; (8007198 <scaraInitDuty+0x938>)
 8007084:	f602 2228 	addw	r2, r2, #2600	; 0xa28
 8007088:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 800708c:	4b46      	ldr	r3, [pc, #280]	; (80071a8 <scaraInitDuty+0x948>)
 800708e:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8007092:	4a41      	ldr	r2, [pc, #260]	; (8007198 <scaraInitDuty+0x938>)
 8007094:	f502 6223 	add.w	r2, r2, #2608	; 0xa30
 8007098:	e9c2 3400 	strd	r3, r4, [r2]

		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 800709c:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 80070a0:	a33b      	add	r3, pc, #236	; (adr r3, 8007190 <scaraInitDuty+0x930>)
 80070a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a6:	f7f9 faa7 	bl	80005f8 <__aeabi_dmul>
 80070aa:	4603      	mov	r3, r0
 80070ac:	460c      	mov	r4, r1
 80070ae:	4618      	mov	r0, r3
 80070b0:	4621      	mov	r1, r4
 80070b2:	f04f 0200 	mov.w	r2, #0
 80070b6:	4b3d      	ldr	r3, [pc, #244]	; (80071ac <scaraInitDuty+0x94c>)
 80070b8:	f7f9 fbc8 	bl	800084c <__aeabi_ddiv>
 80070bc:	4603      	mov	r3, r0
 80070be:	460c      	mov	r4, r1
 80070c0:	e9c7 3496 	strd	r3, r4, [r7, #600]	; 0x258
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80070c4:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d134      	bne.n	8007136 <scaraInitDuty+0x8d6>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 80070cc:	4b36      	ldr	r3, [pc, #216]	; (80071a8 <scaraInitDuty+0x948>)
 80070ce:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80070d2:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 80070d6:	461a      	mov	r2, r3
 80070d8:	4623      	mov	r3, r4
 80070da:	f7f9 f8d7 	bl	800028c <__adddf3>
 80070de:	4603      	mov	r3, r0
 80070e0:	460c      	mov	r4, r1
 80070e2:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			target_point.y 		= positionCurrent.y + command.target_point.y;
 80070e6:	4b30      	ldr	r3, [pc, #192]	; (80071a8 <scaraInitDuty+0x948>)
 80070e8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80070ec:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 80070f0:	461a      	mov	r2, r3
 80070f2:	4623      	mov	r3, r4
 80070f4:	f7f9 f8ca 	bl	800028c <__adddf3>
 80070f8:	4603      	mov	r3, r0
 80070fa:	460c      	mov	r4, r1
 80070fc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8007100:	4b29      	ldr	r3, [pc, #164]	; (80071a8 <scaraInitDuty+0x948>)
 8007102:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8007106:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 800710a:	461a      	mov	r2, r3
 800710c:	4623      	mov	r3, r4
 800710e:	f7f9 f8bd 	bl	800028c <__adddf3>
 8007112:	4603      	mov	r3, r0
 8007114:	460c      	mov	r4, r1
 8007116:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 800711a:	4b23      	ldr	r3, [pc, #140]	; (80071a8 <scaraInitDuty+0x948>)
 800711c:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8007120:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 8007124:	461a      	mov	r2, r3
 8007126:	4623      	mov	r3, r4
 8007128:	f7f9 f8b0 	bl	800028c <__adddf3>
 800712c:	4603      	mov	r3, r0
 800712e:	460c      	mov	r4, r1
 8007130:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 8007134:	e016      	b.n	8007164 <scaraInitDuty+0x904>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8007136:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 800713a:	2b00      	cmp	r3, #0
 800713c:	d110      	bne.n	8007160 <scaraInitDuty+0x900>
			target_point.x 		= command.target_point.x;
 800713e:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8007142:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			target_point.y 		= command.target_point.y;
 8007146:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 800714a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			target_point.z 		= command.target_point.z;
 800714e:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8007152:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			target_point.roll	= command.target_point.roll;
 8007156:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 800715a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 800715e:	e001      	b.n	8007164 <scaraInitDuty+0x904>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8007160:	230c      	movs	r3, #12
 8007162:	e32c      	b.n	80077be <scaraInitDuty+0xf5e>
		}

		if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 8007164:	4c10      	ldr	r4, [pc, #64]	; (80071a8 <scaraInitDuty+0x948>)
 8007166:	f107 05c8 	add.w	r5, r7, #200	; 0xc8
 800716a:	4668      	mov	r0, sp
 800716c:	f104 0308 	add.w	r3, r4, #8
 8007170:	22b8      	movs	r2, #184	; 0xb8
 8007172:	4619      	mov	r1, r3
 8007174:	f00e fdf2 	bl	8015d5c <memcpy>
 8007178:	e894 000c 	ldmia.w	r4, {r2, r3}
 800717c:	4628      	mov	r0, r5
 800717e:	f7fe f843 	bl	8005208 <kinematicInverse>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d113      	bne.n	80071b0 <scaraInitDuty+0x950>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 8007188:	2307      	movs	r3, #7
 800718a:	e318      	b.n	80077be <scaraInitDuty+0xf5e>
 800718c:	f3af 8000 	nop.w
 8007190:	60000000 	.word	0x60000000
 8007194:	400921fb 	.word	0x400921fb
 8007198:	2000def0 	.word	0x2000def0
 800719c:	2000e158 	.word	0x2000e158
 80071a0:	2000e2d8 	.word	0x2000e2d8
 80071a4:	2000dd10 	.word	0x2000dd10
 80071a8:	2000eab0 	.word	0x2000eab0
 80071ac:	40668000 	.word	0x40668000
		}
		// Trajectory 4 profile
		double q[4];
		q[0] = target_point.Theta1 - positionCurrent.Theta1;
 80071b0:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 80071b4:	4bc9      	ldr	r3, [pc, #804]	; (80074dc <scaraInitDuty+0xc7c>)
 80071b6:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 80071ba:	461a      	mov	r2, r3
 80071bc:	4623      	mov	r3, r4
 80071be:	f7f9 f863 	bl	8000288 <__aeabi_dsub>
 80071c2:	4603      	mov	r3, r0
 80071c4:	460c      	mov	r4, r1
 80071c6:	f107 0208 	add.w	r2, r7, #8
 80071ca:	e9c2 3400 	strd	r3, r4, [r2]
		q[1] = target_point.Theta2 - positionCurrent.Theta2;
 80071ce:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 80071d2:	4bc2      	ldr	r3, [pc, #776]	; (80074dc <scaraInitDuty+0xc7c>)
 80071d4:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80071d8:	461a      	mov	r2, r3
 80071da:	4623      	mov	r3, r4
 80071dc:	f7f9 f854 	bl	8000288 <__aeabi_dsub>
 80071e0:	4603      	mov	r3, r0
 80071e2:	460c      	mov	r4, r1
 80071e4:	f107 0208 	add.w	r2, r7, #8
 80071e8:	e9c2 3402 	strd	r3, r4, [r2, #8]
		q[2] = target_point.D3 	   - positionCurrent.D3;
 80071ec:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80071f0:	4bba      	ldr	r3, [pc, #744]	; (80074dc <scaraInitDuty+0xc7c>)
 80071f2:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 80071f6:	461a      	mov	r2, r3
 80071f8:	4623      	mov	r3, r4
 80071fa:	f7f9 f845 	bl	8000288 <__aeabi_dsub>
 80071fe:	4603      	mov	r3, r0
 8007200:	460c      	mov	r4, r1
 8007202:	f107 0208 	add.w	r2, r7, #8
 8007206:	e9c2 3404 	strd	r3, r4, [r2, #16]
		q[3] = target_point.Theta4 - positionCurrent.Theta4;
 800720a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800720e:	4bb3      	ldr	r3, [pc, #716]	; (80074dc <scaraInitDuty+0xc7c>)
 8007210:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8007214:	461a      	mov	r2, r3
 8007216:	4623      	mov	r3, r4
 8007218:	f7f9 f836 	bl	8000288 <__aeabi_dsub>
 800721c:	4603      	mov	r3, r0
 800721e:	460c      	mov	r4, r1
 8007220:	f107 0208 	add.w	r2, r7, #8
 8007224:	e9c2 3406 	strd	r3, r4, [r2, #24]

		// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8007228:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 800722c:	2b00      	cmp	r3, #0
 800722e:	f040 8148 	bne.w	80074c2 <scaraInitDuty+0xc62>
			// Mode Init Time
			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8007232:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8007236:	2b01      	cmp	r3, #1
 8007238:	d161      	bne.n	80072fe <scaraInitDuty+0xa9e>
				for ( uint8_t i = 0; i < 4; i++) {
 800723a:	2300      	movs	r3, #0
 800723c:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 8007240:	e051      	b.n	80072e6 <scaraInitDuty+0xa86>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8007242:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 8007246:	49a6      	ldr	r1, [pc, #664]	; (80074e0 <scaraInitDuty+0xc80>)
 8007248:	4613      	mov	r3, r2
 800724a:	005b      	lsls	r3, r3, #1
 800724c:	4413      	add	r3, r2
 800724e:	01db      	lsls	r3, r3, #7
 8007250:	440b      	add	r3, r1
 8007252:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007256:	2200      	movs	r2, #0
 8007258:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 800725a:	f897 019e 	ldrb.w	r0, [r7, #414]	; 0x19e
 800725e:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8007262:	4c9f      	ldr	r4, [pc, #636]	; (80074e0 <scaraInitDuty+0xc80>)
 8007264:	4603      	mov	r3, r0
 8007266:	005b      	lsls	r3, r3, #1
 8007268:	4403      	add	r3, r0
 800726a:	01db      	lsls	r3, r3, #7
 800726c:	4423      	add	r3, r4
 800726e:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8007272:	e9c3 1200 	strd	r1, r2, [r3]
					status1 = scaraInitLSPB1(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8007276:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 800727a:	4613      	mov	r3, r2
 800727c:	005b      	lsls	r3, r3, #1
 800727e:	4413      	add	r3, r2
 8007280:	01db      	lsls	r3, r3, #7
 8007282:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8007286:	4a96      	ldr	r2, [pc, #600]	; (80074e0 <scaraInitDuty+0xc80>)
 8007288:	1898      	adds	r0, r3, r2
 800728a:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 800728e:	4a95      	ldr	r2, [pc, #596]	; (80074e4 <scaraInitDuty+0xc84>)
 8007290:	5cd1      	ldrb	r1, [r2, r3]
 8007292:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 8007296:	f107 0208 	add.w	r2, r7, #8
 800729a:	00db      	lsls	r3, r3, #3
 800729c:	4413      	add	r3, r2
 800729e:	ed93 7b00 	vldr	d7, [r3]
 80072a2:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80072a6:	ed97 5b7c 	vldr	d5, [r7, #496]	; 0x1f0
 80072aa:	eeb0 2a45 	vmov.f32	s4, s10
 80072ae:	eef0 2a65 	vmov.f32	s5, s11
 80072b2:	eeb0 1a46 	vmov.f32	s2, s12
 80072b6:	eef0 1a66 	vmov.f32	s3, s13
 80072ba:	2201      	movs	r2, #1
 80072bc:	eeb0 0a47 	vmov.f32	s0, s14
 80072c0:	eef0 0a67 	vmov.f32	s1, s15
 80072c4:	f000 fd60 	bl	8007d88 <scaraInitLSPB1>
 80072c8:	4603      	mov	r3, r0
 80072ca:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
					if(status1 != SCARA_STATUS_OK){
 80072ce:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d002      	beq.n	80072dc <scaraInitDuty+0xa7c>
						return status1;
 80072d6:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80072da:	e270      	b.n	80077be <scaraInitDuty+0xf5e>
				for ( uint8_t i = 0; i < 4; i++) {
 80072dc:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 80072e0:	3301      	adds	r3, #1
 80072e2:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 80072e6:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 80072ea:	2b03      	cmp	r3, #3
 80072ec:	d9a9      	bls.n	8007242 <scaraInitDuty+0x9e2>
					}
				}
				myDUTY.time_total = command.time_total;
 80072ee:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80072f2:	4a7b      	ldr	r2, [pc, #492]	; (80074e0 <scaraInitDuty+0xc80>)
 80072f4:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80072f8:	e9c2 3400 	strd	r3, r4, [r2]
 80072fc:	e231      	b.n	8007762 <scaraInitDuty+0xf02>
			// Mode Init Acc
			} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80072fe:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8007302:	2b00      	cmp	r3, #0
 8007304:	f040 80db 	bne.w	80074be <scaraInitDuty+0xc5e>
				for ( uint8_t i = 0; i < 4; i++) {
 8007308:	2300      	movs	r3, #0
 800730a:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
 800730e:	e03c      	b.n	800738a <scaraInitDuty+0xb2a>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8007310:	f897 219d 	ldrb.w	r2, [r7, #413]	; 0x19d
 8007314:	4972      	ldr	r1, [pc, #456]	; (80074e0 <scaraInitDuty+0xc80>)
 8007316:	4613      	mov	r3, r2
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	4413      	add	r3, r2
 800731c:	01db      	lsls	r3, r3, #7
 800731e:	440b      	add	r3, r1
 8007320:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007324:	2200      	movs	r2, #0
 8007326:	701a      	strb	r2, [r3, #0]
					status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8007328:	f897 219d 	ldrb.w	r2, [r7, #413]	; 0x19d
 800732c:	4613      	mov	r3, r2
 800732e:	005b      	lsls	r3, r3, #1
 8007330:	4413      	add	r3, r2
 8007332:	01db      	lsls	r3, r3, #7
 8007334:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8007338:	4a69      	ldr	r2, [pc, #420]	; (80074e0 <scaraInitDuty+0xc80>)
 800733a:	1898      	adds	r0, r3, r2
 800733c:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 8007340:	4a68      	ldr	r2, [pc, #416]	; (80074e4 <scaraInitDuty+0xc84>)
 8007342:	5cd1      	ldrb	r1, [r2, r3]
 8007344:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 8007348:	f107 0208 	add.w	r2, r7, #8
 800734c:	00db      	lsls	r3, r3, #3
 800734e:	4413      	add	r3, r2
 8007350:	ed93 7b00 	vldr	d7, [r3]
 8007354:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8007358:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 800735c:	eeb0 2a45 	vmov.f32	s4, s10
 8007360:	eef0 2a65 	vmov.f32	s5, s11
 8007364:	eeb0 1a46 	vmov.f32	s2, s12
 8007368:	eef0 1a66 	vmov.f32	s3, s13
 800736c:	2200      	movs	r2, #0
 800736e:	eeb0 0a47 	vmov.f32	s0, s14
 8007372:	eef0 0a67 	vmov.f32	s1, s15
 8007376:	f001 ff5f 	bl	8009238 <scaraInitLSPB>
 800737a:	4603      	mov	r3, r0
 800737c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 8007380:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 8007384:	3301      	adds	r3, #1
 8007386:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
 800738a:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 800738e:	2b03      	cmp	r3, #3
 8007390:	d9be      	bls.n	8007310 <scaraInitDuty+0xab0>
										q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				}
				myDUTY.time_total = 0;
 8007392:	4b53      	ldr	r3, [pc, #332]	; (80074e0 <scaraInitDuty+0xc80>)
 8007394:	f603 2238 	addw	r2, r3, #2616	; 0xa38
 8007398:	f04f 0300 	mov.w	r3, #0
 800739c:	f04f 0400 	mov.w	r4, #0
 80073a0:	e9c2 3400 	strd	r3, r4, [r2]
				for ( uint8_t i = 0; i < 4; i++) {
 80073a4:	2300      	movs	r3, #0
 80073a6:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c
 80073aa:	e02d      	b.n	8007408 <scaraInitDuty+0xba8>
					if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 80073ac:	f897 219c 	ldrb.w	r2, [r7, #412]	; 0x19c
 80073b0:	494b      	ldr	r1, [pc, #300]	; (80074e0 <scaraInitDuty+0xc80>)
 80073b2:	4613      	mov	r3, r2
 80073b4:	005b      	lsls	r3, r3, #1
 80073b6:	4413      	add	r3, r2
 80073b8:	01db      	lsls	r3, r3, #7
 80073ba:	440b      	add	r3, r1
 80073bc:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80073c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073c4:	4b46      	ldr	r3, [pc, #280]	; (80074e0 <scaraInitDuty+0xc80>)
 80073c6:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80073ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80073ce:	461a      	mov	r2, r3
 80073d0:	4623      	mov	r3, r4
 80073d2:	f7f9 fba1 	bl	8000b18 <__aeabi_dcmpgt>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d010      	beq.n	80073fe <scaraInitDuty+0xb9e>
						myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 80073dc:	f897 219c 	ldrb.w	r2, [r7, #412]	; 0x19c
 80073e0:	493f      	ldr	r1, [pc, #252]	; (80074e0 <scaraInitDuty+0xc80>)
 80073e2:	4613      	mov	r3, r2
 80073e4:	005b      	lsls	r3, r3, #1
 80073e6:	4413      	add	r3, r2
 80073e8:	01db      	lsls	r3, r3, #7
 80073ea:	440b      	add	r3, r1
 80073ec:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80073f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80073f4:	4a3a      	ldr	r2, [pc, #232]	; (80074e0 <scaraInitDuty+0xc80>)
 80073f6:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80073fa:	e9c2 3400 	strd	r3, r4, [r2]
				for ( uint8_t i = 0; i < 4; i++) {
 80073fe:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 8007402:	3301      	adds	r3, #1
 8007404:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c
 8007408:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 800740c:	2b03      	cmp	r3, #3
 800740e:	d9cd      	bls.n	80073ac <scaraInitDuty+0xb4c>
					}
				}
				for ( uint8_t i = 0; i < 4; i++) {
 8007410:	2300      	movs	r3, #0
 8007412:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
 8007416:	e04d      	b.n	80074b4 <scaraInitDuty+0xc54>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8007418:	f897 219b 	ldrb.w	r2, [r7, #411]	; 0x19b
 800741c:	4930      	ldr	r1, [pc, #192]	; (80074e0 <scaraInitDuty+0xc80>)
 800741e:	4613      	mov	r3, r2
 8007420:	005b      	lsls	r3, r3, #1
 8007422:	4413      	add	r3, r2
 8007424:	01db      	lsls	r3, r3, #7
 8007426:	440b      	add	r3, r1
 8007428:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800742c:	2200      	movs	r2, #0
 800742e:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 8007430:	f897 019b 	ldrb.w	r0, [r7, #411]	; 0x19b
 8007434:	4b2a      	ldr	r3, [pc, #168]	; (80074e0 <scaraInitDuty+0xc80>)
 8007436:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800743a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800743e:	4c28      	ldr	r4, [pc, #160]	; (80074e0 <scaraInitDuty+0xc80>)
 8007440:	4603      	mov	r3, r0
 8007442:	005b      	lsls	r3, r3, #1
 8007444:	4403      	add	r3, r0
 8007446:	01db      	lsls	r3, r3, #7
 8007448:	4423      	add	r3, r4
 800744a:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800744e:	e9c3 1200 	strd	r1, r2, [r3]
					status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8007452:	f897 219b 	ldrb.w	r2, [r7, #411]	; 0x19b
 8007456:	4613      	mov	r3, r2
 8007458:	005b      	lsls	r3, r3, #1
 800745a:	4413      	add	r3, r2
 800745c:	01db      	lsls	r3, r3, #7
 800745e:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8007462:	4a1f      	ldr	r2, [pc, #124]	; (80074e0 <scaraInitDuty+0xc80>)
 8007464:	1898      	adds	r0, r3, r2
 8007466:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 800746a:	4a1e      	ldr	r2, [pc, #120]	; (80074e4 <scaraInitDuty+0xc84>)
 800746c:	5cd1      	ldrb	r1, [r2, r3]
 800746e:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8007472:	f107 0208 	add.w	r2, r7, #8
 8007476:	00db      	lsls	r3, r3, #3
 8007478:	4413      	add	r3, r2
 800747a:	ed93 7b00 	vldr	d7, [r3]
 800747e:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8007482:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8007486:	eeb0 2a45 	vmov.f32	s4, s10
 800748a:	eef0 2a65 	vmov.f32	s5, s11
 800748e:	eeb0 1a46 	vmov.f32	s2, s12
 8007492:	eef0 1a66 	vmov.f32	s3, s13
 8007496:	2201      	movs	r2, #1
 8007498:	eeb0 0a47 	vmov.f32	s0, s14
 800749c:	eef0 0a67 	vmov.f32	s1, s15
 80074a0:	f001 feca 	bl	8009238 <scaraInitLSPB>
 80074a4:	4603      	mov	r3, r0
 80074a6:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 80074aa:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80074ae:	3301      	adds	r3, #1
 80074b0:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
 80074b4:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80074b8:	2b03      	cmp	r3, #3
 80074ba:	d9ad      	bls.n	8007418 <scaraInitDuty+0xbb8>
 80074bc:	e151      	b.n	8007762 <scaraInitDuty+0xf02>
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				}

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 80074be:	2308      	movs	r3, #8
 80074c0:	e17d      	b.n	80077be <scaraInitDuty+0xf5e>
			}
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 80074c2:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	f040 8147 	bne.w	800775a <scaraInitDuty+0xefa>
			// Mode Init Time
			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80074cc:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d160      	bne.n	8007596 <scaraInitDuty+0xd36>
				for ( uint8_t i = 0; i < 4; i++) {
 80074d4:	2300      	movs	r3, #0
 80074d6:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
 80074da:	e050      	b.n	800757e <scaraInitDuty+0xd1e>
 80074dc:	2000eab0 	.word	0x2000eab0
 80074e0:	2000def0 	.word	0x2000def0
 80074e4:	20002084 	.word	0x20002084
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80074e8:	f897 219a 	ldrb.w	r2, [r7, #410]	; 0x19a
 80074ec:	49b9      	ldr	r1, [pc, #740]	; (80077d4 <scaraInitDuty+0xf74>)
 80074ee:	4613      	mov	r3, r2
 80074f0:	005b      	lsls	r3, r3, #1
 80074f2:	4413      	add	r3, r2
 80074f4:	01db      	lsls	r3, r3, #7
 80074f6:	440b      	add	r3, r1
 80074f8:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80074fc:	2201      	movs	r2, #1
 80074fe:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8007500:	f897 019a 	ldrb.w	r0, [r7, #410]	; 0x19a
 8007504:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8007508:	4cb2      	ldr	r4, [pc, #712]	; (80077d4 <scaraInitDuty+0xf74>)
 800750a:	4603      	mov	r3, r0
 800750c:	005b      	lsls	r3, r3, #1
 800750e:	4403      	add	r3, r0
 8007510:	01db      	lsls	r3, r3, #7
 8007512:	4423      	add	r3, r4
 8007514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007518:	e9c3 1200 	strd	r1, r2, [r3]
					status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 800751c:	f897 219a 	ldrb.w	r2, [r7, #410]	; 0x19a
 8007520:	4613      	mov	r3, r2
 8007522:	005b      	lsls	r3, r3, #1
 8007524:	4413      	add	r3, r2
 8007526:	01db      	lsls	r3, r3, #7
 8007528:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800752c:	4aa9      	ldr	r2, [pc, #676]	; (80077d4 <scaraInitDuty+0xf74>)
 800752e:	1898      	adds	r0, r3, r2
 8007530:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 8007534:	4aa8      	ldr	r2, [pc, #672]	; (80077d8 <scaraInitDuty+0xf78>)
 8007536:	5cd1      	ldrb	r1, [r2, r3]
 8007538:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 800753c:	f107 0208 	add.w	r2, r7, #8
 8007540:	00db      	lsls	r3, r3, #3
 8007542:	4413      	add	r3, r2
 8007544:	ed93 7b00 	vldr	d7, [r3]
 8007548:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 800754c:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8007550:	eeb0 2a45 	vmov.f32	s4, s10
 8007554:	eef0 2a65 	vmov.f32	s5, s11
 8007558:	eeb0 1a46 	vmov.f32	s2, s12
 800755c:	eef0 1a66 	vmov.f32	s3, s13
 8007560:	2201      	movs	r2, #1
 8007562:	eeb0 0a47 	vmov.f32	s0, s14
 8007566:	eef0 0a67 	vmov.f32	s1, s15
 800756a:	f002 fa43 	bl	80099f4 <scaraInitScurve>
 800756e:	4603      	mov	r3, r0
 8007570:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 8007574:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 8007578:	3301      	adds	r3, #1
 800757a:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
 800757e:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 8007582:	2b03      	cmp	r3, #3
 8007584:	d9b0      	bls.n	80074e8 <scaraInitDuty+0xc88>
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				}
				myDUTY.time_total = command.time_total;
 8007586:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 800758a:	4a92      	ldr	r2, [pc, #584]	; (80077d4 <scaraInitDuty+0xf74>)
 800758c:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8007590:	e9c2 3400 	strd	r3, r4, [r2]
 8007594:	e0e5      	b.n	8007762 <scaraInitDuty+0xf02>
			// Mode Init Acc
			} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8007596:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800759a:	2b00      	cmp	r3, #0
 800759c:	f040 80db 	bne.w	8007756 <scaraInitDuty+0xef6>
				for ( uint8_t i = 0; i < 4; i++) {
 80075a0:	2300      	movs	r3, #0
 80075a2:	f887 3199 	strb.w	r3, [r7, #409]	; 0x199
 80075a6:	e03c      	b.n	8007622 <scaraInitDuty+0xdc2>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80075a8:	f897 2199 	ldrb.w	r2, [r7, #409]	; 0x199
 80075ac:	4989      	ldr	r1, [pc, #548]	; (80077d4 <scaraInitDuty+0xf74>)
 80075ae:	4613      	mov	r3, r2
 80075b0:	005b      	lsls	r3, r3, #1
 80075b2:	4413      	add	r3, r2
 80075b4:	01db      	lsls	r3, r3, #7
 80075b6:	440b      	add	r3, r1
 80075b8:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80075bc:	2201      	movs	r2, #1
 80075be:	701a      	strb	r2, [r3, #0]
					status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80075c0:	f897 2199 	ldrb.w	r2, [r7, #409]	; 0x199
 80075c4:	4613      	mov	r3, r2
 80075c6:	005b      	lsls	r3, r3, #1
 80075c8:	4413      	add	r3, r2
 80075ca:	01db      	lsls	r3, r3, #7
 80075cc:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80075d0:	4a80      	ldr	r2, [pc, #512]	; (80077d4 <scaraInitDuty+0xf74>)
 80075d2:	1898      	adds	r0, r3, r2
 80075d4:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 80075d8:	4a7f      	ldr	r2, [pc, #508]	; (80077d8 <scaraInitDuty+0xf78>)
 80075da:	5cd1      	ldrb	r1, [r2, r3]
 80075dc:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 80075e0:	f107 0208 	add.w	r2, r7, #8
 80075e4:	00db      	lsls	r3, r3, #3
 80075e6:	4413      	add	r3, r2
 80075e8:	ed93 7b00 	vldr	d7, [r3]
 80075ec:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80075f0:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80075f4:	eeb0 2a45 	vmov.f32	s4, s10
 80075f8:	eef0 2a65 	vmov.f32	s5, s11
 80075fc:	eeb0 1a46 	vmov.f32	s2, s12
 8007600:	eef0 1a66 	vmov.f32	s3, s13
 8007604:	2200      	movs	r2, #0
 8007606:	eeb0 0a47 	vmov.f32	s0, s14
 800760a:	eef0 0a67 	vmov.f32	s1, s15
 800760e:	f002 f9f1 	bl	80099f4 <scaraInitScurve>
 8007612:	4603      	mov	r3, r0
 8007614:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 8007618:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 800761c:	3301      	adds	r3, #1
 800761e:	f887 3199 	strb.w	r3, [r7, #409]	; 0x199
 8007622:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 8007626:	2b03      	cmp	r3, #3
 8007628:	d9be      	bls.n	80075a8 <scaraInitDuty+0xd48>
										q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				}
				myDUTY.time_total = 0;
 800762a:	4b6a      	ldr	r3, [pc, #424]	; (80077d4 <scaraInitDuty+0xf74>)
 800762c:	f603 2238 	addw	r2, r3, #2616	; 0xa38
 8007630:	f04f 0300 	mov.w	r3, #0
 8007634:	f04f 0400 	mov.w	r4, #0
 8007638:	e9c2 3400 	strd	r3, r4, [r2]
				for ( uint8_t i = 0; i < 4; i++) {
 800763c:	2300      	movs	r3, #0
 800763e:	f887 3198 	strb.w	r3, [r7, #408]	; 0x198
 8007642:	e02d      	b.n	80076a0 <scaraInitDuty+0xe40>
					if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 8007644:	f897 2198 	ldrb.w	r2, [r7, #408]	; 0x198
 8007648:	4962      	ldr	r1, [pc, #392]	; (80077d4 <scaraInitDuty+0xf74>)
 800764a:	4613      	mov	r3, r2
 800764c:	005b      	lsls	r3, r3, #1
 800764e:	4413      	add	r3, r2
 8007650:	01db      	lsls	r3, r3, #7
 8007652:	440b      	add	r3, r1
 8007654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007658:	e9d3 0100 	ldrd	r0, r1, [r3]
 800765c:	4b5d      	ldr	r3, [pc, #372]	; (80077d4 <scaraInitDuty+0xf74>)
 800765e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007662:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007666:	461a      	mov	r2, r3
 8007668:	4623      	mov	r3, r4
 800766a:	f7f9 fa55 	bl	8000b18 <__aeabi_dcmpgt>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d010      	beq.n	8007696 <scaraInitDuty+0xe36>
						myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8007674:	f897 2198 	ldrb.w	r2, [r7, #408]	; 0x198
 8007678:	4956      	ldr	r1, [pc, #344]	; (80077d4 <scaraInitDuty+0xf74>)
 800767a:	4613      	mov	r3, r2
 800767c:	005b      	lsls	r3, r3, #1
 800767e:	4413      	add	r3, r2
 8007680:	01db      	lsls	r3, r3, #7
 8007682:	440b      	add	r3, r1
 8007684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007688:	e9d3 3400 	ldrd	r3, r4, [r3]
 800768c:	4a51      	ldr	r2, [pc, #324]	; (80077d4 <scaraInitDuty+0xf74>)
 800768e:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8007692:	e9c2 3400 	strd	r3, r4, [r2]
				for ( uint8_t i = 0; i < 4; i++) {
 8007696:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800769a:	3301      	adds	r3, #1
 800769c:	f887 3198 	strb.w	r3, [r7, #408]	; 0x198
 80076a0:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80076a4:	2b03      	cmp	r3, #3
 80076a6:	d9cd      	bls.n	8007644 <scaraInitDuty+0xde4>
					}
				}
				for ( uint8_t i = 0; i < 4; i++) {
 80076a8:	2300      	movs	r3, #0
 80076aa:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 80076ae:	e04d      	b.n	800774c <scaraInitDuty+0xeec>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80076b0:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 80076b4:	4947      	ldr	r1, [pc, #284]	; (80077d4 <scaraInitDuty+0xf74>)
 80076b6:	4613      	mov	r3, r2
 80076b8:	005b      	lsls	r3, r3, #1
 80076ba:	4413      	add	r3, r2
 80076bc:	01db      	lsls	r3, r3, #7
 80076be:	440b      	add	r3, r1
 80076c0:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80076c4:	2201      	movs	r2, #1
 80076c6:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 80076c8:	f897 0197 	ldrb.w	r0, [r7, #407]	; 0x197
 80076cc:	4b41      	ldr	r3, [pc, #260]	; (80077d4 <scaraInitDuty+0xf74>)
 80076ce:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80076d2:	e9d3 1200 	ldrd	r1, r2, [r3]
 80076d6:	4c3f      	ldr	r4, [pc, #252]	; (80077d4 <scaraInitDuty+0xf74>)
 80076d8:	4603      	mov	r3, r0
 80076da:	005b      	lsls	r3, r3, #1
 80076dc:	4403      	add	r3, r0
 80076de:	01db      	lsls	r3, r3, #7
 80076e0:	4423      	add	r3, r4
 80076e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076e6:	e9c3 1200 	strd	r1, r2, [r3]
					status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80076ea:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 80076ee:	4613      	mov	r3, r2
 80076f0:	005b      	lsls	r3, r3, #1
 80076f2:	4413      	add	r3, r2
 80076f4:	01db      	lsls	r3, r3, #7
 80076f6:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80076fa:	4a36      	ldr	r2, [pc, #216]	; (80077d4 <scaraInitDuty+0xf74>)
 80076fc:	1898      	adds	r0, r3, r2
 80076fe:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007702:	4a35      	ldr	r2, [pc, #212]	; (80077d8 <scaraInitDuty+0xf78>)
 8007704:	5cd1      	ldrb	r1, [r2, r3]
 8007706:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 800770a:	f107 0208 	add.w	r2, r7, #8
 800770e:	00db      	lsls	r3, r3, #3
 8007710:	4413      	add	r3, r2
 8007712:	ed93 7b00 	vldr	d7, [r3]
 8007716:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 800771a:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 800771e:	eeb0 2a45 	vmov.f32	s4, s10
 8007722:	eef0 2a65 	vmov.f32	s5, s11
 8007726:	eeb0 1a46 	vmov.f32	s2, s12
 800772a:	eef0 1a66 	vmov.f32	s3, s13
 800772e:	2201      	movs	r2, #1
 8007730:	eeb0 0a47 	vmov.f32	s0, s14
 8007734:	eef0 0a67 	vmov.f32	s1, s15
 8007738:	f002 f95c 	bl	80099f4 <scaraInitScurve>
 800773c:	4603      	mov	r3, r0
 800773e:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 8007742:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007746:	3301      	adds	r3, #1
 8007748:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 800774c:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007750:	2b03      	cmp	r3, #3
 8007752:	d9ad      	bls.n	80076b0 <scaraInitDuty+0xe50>
 8007754:	e005      	b.n	8007762 <scaraInitDuty+0xf02>
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				}

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8007756:	2308      	movs	r3, #8
 8007758:	e031      	b.n	80077be <scaraInitDuty+0xf5e>
			}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 800775a:	2305      	movs	r3, #5
 800775c:	e02f      	b.n	80077be <scaraInitDuty+0xf5e>
			}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 800775e:	2302      	movs	r3, #2
 8007760:	e02d      	b.n	80077be <scaraInitDuty+0xf5e>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 8007762:	4a1e      	ldr	r2, [pc, #120]	; (80077dc <scaraInitDuty+0xf7c>)
 8007764:	f04f 0300 	mov.w	r3, #0
 8007768:	f04f 0400 	mov.w	r4, #0
 800776c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionCurrent.total_time = myDUTY.time_total;
 8007770:	4b18      	ldr	r3, [pc, #96]	; (80077d4 <scaraInitDuty+0xf74>)
 8007772:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007776:	e9d3 3400 	ldrd	r3, r4, [r3]
 800777a:	4a18      	ldr	r2, [pc, #96]	; (80077dc <scaraInitDuty+0xf7c>)
 800777c:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionNext.t = 0;
 8007780:	4a17      	ldr	r2, [pc, #92]	; (80077e0 <scaraInitDuty+0xf80>)
 8007782:	f04f 0300 	mov.w	r3, #0
 8007786:	f04f 0400 	mov.w	r4, #0
 800778a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionNext.total_time = myDUTY.time_total;
 800778e:	4b11      	ldr	r3, [pc, #68]	; (80077d4 <scaraInitDuty+0xf74>)
 8007790:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007794:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007798:	4a11      	ldr	r2, [pc, #68]	; (80077e0 <scaraInitDuty+0xf80>)
 800779a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionTrue.t = 0;
 800779e:	4a11      	ldr	r2, [pc, #68]	; (80077e4 <scaraInitDuty+0xf84>)
 80077a0:	f04f 0300 	mov.w	r3, #0
 80077a4:	f04f 0400 	mov.w	r4, #0
 80077a8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionTrue.total_time = myDUTY.time_total;
 80077ac:	4b09      	ldr	r3, [pc, #36]	; (80077d4 <scaraInitDuty+0xf74>)
 80077ae:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80077b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80077b6:	4a0b      	ldr	r2, [pc, #44]	; (80077e4 <scaraInitDuty+0xf84>)
 80077b8:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

	return SCARA_STATUS_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 80077c4:	46bd      	mov	sp, r7
 80077c6:	ecbd 8b02 	vpop	{d8}
 80077ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80077ce:	b004      	add	sp, #16
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	2000def0 	.word	0x2000def0
 80077d8:	20002084 	.word	0x20002084
 80077dc:	2000eab0 	.word	0x2000eab0
 80077e0:	2000ec30 	.word	0x2000ec30
 80077e4:	2000eb70 	.word	0x2000eb70

080077e8 <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 80077e8:	b082      	sub	sp, #8
 80077ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077ec:	b0b1      	sub	sp, #196	; 0xc4
 80077ee:	af2e      	add	r7, sp, #184	; 0xb8
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	f107 0120 	add.w	r1, r7, #32
 80077f6:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 80077fa:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 80077fe:	4668      	mov	r0, sp
 8007800:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007804:	22b8      	movs	r2, #184	; 0xb8
 8007806:	4619      	mov	r1, r3
 8007808:	f00e faa8 	bl	8015d5c <memcpy>
 800780c:	f107 0320 	add.w	r3, r7, #32
 8007810:	cb0c      	ldmia	r3, {r2, r3}
 8007812:	4620      	mov	r0, r4
 8007814:	f7fd fcf8 	bl	8005208 <kinematicInverse>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800781e:	2307      	movs	r3, #7
 8007820:	e09e      	b.n	8007960 <scaraInitLine+0x178>
	}
	// Init line params
	line->x1 = end.x;
 8007822:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	e9c2 3402 	strd	r3, r4, [r2, #8]
	line->y1 = end.y;
 800782c:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	e9c2 3406 	strd	r3, r4, [r2, #24]
	line->z1 = end.z;
 8007836:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	line->x0 = start.x;
 8007840:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	e9c2 3400 	strd	r3, r4, [r2]
	line->y0 = start.y;
 800784a:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	e9c2 3404 	strd	r3, r4, [r2, #16]
	line->z0 = start.z;
 8007854:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	e9c2 3408 	strd	r3, r4, [r2, #32]
	line->denta_x = end.x  -  start.x;
 800785e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8007862:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8007866:	461a      	mov	r2, r3
 8007868:	4623      	mov	r3, r4
 800786a:	f7f8 fd0d 	bl	8000288 <__aeabi_dsub>
 800786e:	4603      	mov	r3, r0
 8007870:	460c      	mov	r4, r1
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 8007878:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800787c:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8007880:	461a      	mov	r2, r3
 8007882:	4623      	mov	r3, r4
 8007884:	f7f8 fd00 	bl	8000288 <__aeabi_dsub>
 8007888:	4603      	mov	r3, r0
 800788a:	460c      	mov	r4, r1
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 8007892:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8007896:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800789a:	461a      	mov	r2, r3
 800789c:	4623      	mov	r3, r4
 800789e:	f7f8 fcf3 	bl	8000288 <__aeabi_dsub>
 80078a2:	4603      	mov	r3, r0
 80078a4:	460c      	mov	r4, r1
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80078b8:	461a      	mov	r2, r3
 80078ba:	4623      	mov	r3, r4
 80078bc:	f7f8 fe9c 	bl	80005f8 <__aeabi_dmul>
 80078c0:	4603      	mov	r3, r0
 80078c2:	460c      	mov	r4, r1
 80078c4:	461d      	mov	r5, r3
 80078c6:	4626      	mov	r6, r4
			       +(line->denta_y)*(line->denta_y)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80078d4:	461a      	mov	r2, r3
 80078d6:	4623      	mov	r3, r4
 80078d8:	f7f8 fe8e 	bl	80005f8 <__aeabi_dmul>
 80078dc:	4603      	mov	r3, r0
 80078de:	460c      	mov	r4, r1
 80078e0:	461a      	mov	r2, r3
 80078e2:	4623      	mov	r3, r4
 80078e4:	4628      	mov	r0, r5
 80078e6:	4631      	mov	r1, r6
 80078e8:	f7f8 fcd0 	bl	800028c <__adddf3>
 80078ec:	4603      	mov	r3, r0
 80078ee:	460c      	mov	r4, r1
 80078f0:	461d      	mov	r5, r3
 80078f2:	4626      	mov	r6, r4
				   +(line->denta_z)*(line->denta_z));
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8007900:	461a      	mov	r2, r3
 8007902:	4623      	mov	r3, r4
 8007904:	f7f8 fe78 	bl	80005f8 <__aeabi_dmul>
 8007908:	4603      	mov	r3, r0
 800790a:	460c      	mov	r4, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 800790c:	461a      	mov	r2, r3
 800790e:	4623      	mov	r3, r4
 8007910:	4628      	mov	r0, r5
 8007912:	4631      	mov	r1, r6
 8007914:	f7f8 fcba 	bl	800028c <__adddf3>
 8007918:	4603      	mov	r3, r0
 800791a:	460c      	mov	r4, r1
 800791c:	ec44 3b17 	vmov	d7, r3, r4
 8007920:	eeb0 0a47 	vmov.f32	s0, s14
 8007924:	eef0 0a67 	vmov.f32	s1, s15
 8007928:	f012 f920 	bl	8019b6c <sqrt>
 800792c:	eeb0 7a40 	vmov.f32	s14, s0
 8007930:	eef0 7a60 	vmov.f32	s15, s1
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	line->y_current = line->y0;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	line->z_current = line->z0;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	return SCARA_STATUS_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800796a:	b002      	add	sp, #8
 800796c:	4770      	bx	lr
	...

08007970 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 8007970:	b082      	sub	sp, #8
 8007972:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007976:	b0c5      	sub	sp, #276	; 0x114
 8007978:	af2e      	add	r7, sp, #184	; 0xb8
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8007980:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 8007984:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 8007988:	4668      	mov	r0, sp
 800798a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800798e:	22b8      	movs	r2, #184	; 0xb8
 8007990:	4619      	mov	r1, r3
 8007992:	f00e f9e3 	bl	8015d5c <memcpy>
 8007996:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800799a:	cb0c      	ldmia	r3, {r2, r3}
 800799c:	4620      	mov	r0, r4
 800799e:	f7fd fc33 	bl	8005208 <kinematicInverse>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d101      	bne.n	80079ac <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80079a8:	2307      	movs	r3, #7
 80079aa:	e187      	b.n	8007cbc <scaraInitCircle+0x34c>
	}

//	if( 1 != dir && -1 != dir) {
//		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
//	}
	if(dir != 1 && dir != -1){
 80079ac:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d006      	beq.n	80079c2 <scaraInitCircle+0x52>
 80079b4:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80079b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079bc:	d001      	beq.n	80079c2 <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;
 80079be:	2306      	movs	r3, #6
 80079c0:	e17c      	b.n	8007cbc <scaraInitCircle+0x34c>
	}

	double x_start, y_start, x_stop, y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	x_start = start.x - center.x;
 80079c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80079c6:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 80079ca:	461a      	mov	r2, r3
 80079cc:	4623      	mov	r3, r4
 80079ce:	f7f8 fc5b 	bl	8000288 <__aeabi_dsub>
 80079d2:	4603      	mov	r3, r0
 80079d4:	460c      	mov	r4, r1
 80079d6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	y_start = start.y - center.y;
 80079da:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80079de:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 80079e2:	461a      	mov	r2, r3
 80079e4:	4623      	mov	r3, r4
 80079e6:	f7f8 fc4f 	bl	8000288 <__aeabi_dsub>
 80079ea:	4603      	mov	r3, r0
 80079ec:	460c      	mov	r4, r1
 80079ee:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	x_stop  = end.x  - center.x;
 80079f2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80079f6:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 80079fa:	461a      	mov	r2, r3
 80079fc:	4623      	mov	r3, r4
 80079fe:	f7f8 fc43 	bl	8000288 <__aeabi_dsub>
 8007a02:	4603      	mov	r3, r0
 8007a04:	460c      	mov	r4, r1
 8007a06:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	y_stop  = end.y  - center.y;
 8007a0a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8007a0e:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8007a12:	461a      	mov	r2, r3
 8007a14:	4623      	mov	r3, r4
 8007a16:	f7f8 fc37 	bl	8000288 <__aeabi_dsub>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	460c      	mov	r4, r1
 8007a1e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	r1 = sqrt(x_start*x_start + y_start*y_start);
 8007a22:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007a26:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007a2a:	f7f8 fde5 	bl	80005f8 <__aeabi_dmul>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	460c      	mov	r4, r1
 8007a32:	469a      	mov	sl, r3
 8007a34:	46a3      	mov	fp, r4
 8007a36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007a3a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007a3e:	f7f8 fddb 	bl	80005f8 <__aeabi_dmul>
 8007a42:	4603      	mov	r3, r0
 8007a44:	460c      	mov	r4, r1
 8007a46:	461a      	mov	r2, r3
 8007a48:	4623      	mov	r3, r4
 8007a4a:	4650      	mov	r0, sl
 8007a4c:	4659      	mov	r1, fp
 8007a4e:	f7f8 fc1d 	bl	800028c <__adddf3>
 8007a52:	4603      	mov	r3, r0
 8007a54:	460c      	mov	r4, r1
 8007a56:	ec44 3b17 	vmov	d7, r3, r4
 8007a5a:	eeb0 0a47 	vmov.f32	s0, s14
 8007a5e:	eef0 0a67 	vmov.f32	s1, s15
 8007a62:	f012 f883 	bl	8019b6c <sqrt>
 8007a66:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	r2 = sqrt(x_stop*x_stop + y_stop*y_stop);
 8007a6a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a6e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007a72:	f7f8 fdc1 	bl	80005f8 <__aeabi_dmul>
 8007a76:	4603      	mov	r3, r0
 8007a78:	460c      	mov	r4, r1
 8007a7a:	469a      	mov	sl, r3
 8007a7c:	46a3      	mov	fp, r4
 8007a7e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007a82:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007a86:	f7f8 fdb7 	bl	80005f8 <__aeabi_dmul>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	460c      	mov	r4, r1
 8007a8e:	461a      	mov	r2, r3
 8007a90:	4623      	mov	r3, r4
 8007a92:	4650      	mov	r0, sl
 8007a94:	4659      	mov	r1, fp
 8007a96:	f7f8 fbf9 	bl	800028c <__adddf3>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	460c      	mov	r4, r1
 8007a9e:	ec44 3b17 	vmov	d7, r3, r4
 8007aa2:	eeb0 0a47 	vmov.f32	s0, s14
 8007aa6:	eef0 0a67 	vmov.f32	s1, s15
 8007aaa:	f012 f85f 	bl	8019b6c <sqrt>
 8007aae:	ed87 0b08 	vstr	d0, [r7, #32]

	if( 1.0 < fabs(r1 - r2)) {
 8007ab2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ab6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007aba:	f7f8 fbe5 	bl	8000288 <__aeabi_dsub>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	460c      	mov	r4, r1
 8007ac2:	4698      	mov	r8, r3
 8007ac4:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 8007ac8:	f04f 0200 	mov.w	r2, #0
 8007acc:	4b84      	ldr	r3, [pc, #528]	; (8007ce0 <scaraInitCircle+0x370>)
 8007ace:	4640      	mov	r0, r8
 8007ad0:	4649      	mov	r1, r9
 8007ad2:	f7f9 f821 	bl	8000b18 <__aeabi_dcmpgt>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d001      	beq.n	8007ae0 <scaraInitCircle+0x170>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 8007adc:	2306      	movs	r3, #6
 8007ade:	e0ed      	b.n	8007cbc <scaraInitCircle+0x34c>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 8007ae0:	a37b      	add	r3, pc, #492	; (adr r3, 8007cd0 <scaraInitCircle+0x360>)
 8007ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007aea:	f7f8 fff7 	bl	8000adc <__aeabi_dcmplt>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d109      	bne.n	8007b08 <scaraInitCircle+0x198>
 8007af4:	a376      	add	r3, pc, #472	; (adr r3, 8007cd0 <scaraInitCircle+0x360>)
 8007af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007afe:	f7f8 ffed 	bl	8000adc <__aeabi_dcmplt>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d001      	beq.n	8007b0c <scaraInitCircle+0x19c>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 8007b08:	2306      	movs	r3, #6
 8007b0a:	e0d7      	b.n	8007cbc <scaraInitCircle+0x34c>
	}

	angle_start = atan2(y_start, x_start);
 8007b0c:	ed97 1b12 	vldr	d1, [r7, #72]	; 0x48
 8007b10:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8007b14:	f012 f828 	bl	8019b68 <atan2>
 8007b18:	ed87 0b06 	vstr	d0, [r7, #24]
	angle_stop  = atan2(y_stop, x_stop);
 8007b1c:	ed97 1b0e 	vldr	d1, [r7, #56]	; 0x38
 8007b20:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8007b24:	f012 f820 	bl	8019b68 <atan2>
 8007b28:	ed87 0b04 	vstr	d0, [r7, #16]
	delta_angle = angle_stop - angle_start;
 8007b2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b30:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007b34:	f7f8 fba8 	bl	8000288 <__aeabi_dsub>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	460c      	mov	r4, r1
 8007b3c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

	if (delta_angle < 0 && dir > 0) {
 8007b40:	f04f 0200 	mov.w	r2, #0
 8007b44:	f04f 0300 	mov.w	r3, #0
 8007b48:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007b4c:	f7f8 ffc6 	bl	8000adc <__aeabi_dcmplt>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d015      	beq.n	8007b82 <scaraInitCircle+0x212>
 8007b56:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	dd11      	ble.n	8007b82 <scaraInitCircle+0x212>
		delta_angle = 2*PI - fabs(delta_angle); //this state mean that the arc radius is over 180
 8007b5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b60:	603b      	str	r3, [r7, #0]
 8007b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b68:	607b      	str	r3, [r7, #4]
 8007b6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b6e:	a15a      	add	r1, pc, #360	; (adr r1, 8007cd8 <scaraInitCircle+0x368>)
 8007b70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b74:	f7f8 fb88 	bl	8000288 <__aeabi_dsub>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	460c      	mov	r4, r1
 8007b7c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8007b80:	e01d      	b.n	8007bbe <scaraInitCircle+0x24e>
	}else if(delta_angle > 0 && dir < 0){
 8007b82:	f04f 0200 	mov.w	r2, #0
 8007b86:	f04f 0300 	mov.w	r3, #0
 8007b8a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007b8e:	f7f8 ffc3 	bl	8000b18 <__aeabi_dcmpgt>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d012      	beq.n	8007bbe <scaraInitCircle+0x24e>
 8007b98:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	da0e      	bge.n	8007bbe <scaraInitCircle+0x24e>
		delta_angle = 2*PI - fabs(delta_angle);
 8007ba0:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8007ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ba4:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8007ba8:	462a      	mov	r2, r5
 8007baa:	4633      	mov	r3, r6
 8007bac:	a14a      	add	r1, pc, #296	; (adr r1, 8007cd8 <scaraInitCircle+0x368>)
 8007bae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bb2:	f7f8 fb69 	bl	8000288 <__aeabi_dsub>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	460c      	mov	r4, r1
 8007bba:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	}
	if(delta_angle*dir < 0){
 8007bbe:	f8d7 02c0 	ldr.w	r0, [r7, #704]	; 0x2c0
 8007bc2:	f7f8 fcaf 	bl	8000524 <__aeabi_i2d>
 8007bc6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007bca:	f7f8 fd15 	bl	80005f8 <__aeabi_dmul>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	460c      	mov	r4, r1
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	f04f 0200 	mov.w	r2, #0
 8007bda:	f04f 0300 	mov.w	r3, #0
 8007bde:	f7f8 ff7d 	bl	8000adc <__aeabi_dcmplt>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d005      	beq.n	8007bf4 <scaraInitCircle+0x284>
		delta_angle = fabs(delta_angle);
 8007be8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bea:	653b      	str	r3, [r7, #80]	; 0x50
 8007bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bf2:	657b      	str	r3, [r7, #84]	; 0x54

//	if ( 0 > dir) {
//		delta_angle = 2*PI - delta_angle;
//	}
	// Init circle params
	circle->dir = dir;
 8007bf4:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007bf8:	b25a      	sxtb	r2, r3
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8007c04:	e9c2 3402 	strd	r3, r4, [r2, #8]
	circle->angle_start = angle_start;
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8007c0e:	e9c2 3404 	strd	r3, r4, [r2, #16]
	circle->angle_stop  = angle_stop;
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007c18:	e9c2 3406 	strd	r3, r4, [r2, #24]
	circle->total_angle = delta_angle;
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8007c22:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 8007c26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c2a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007c2e:	f7f8 fce3 	bl	80005f8 <__aeabi_dmul>
 8007c32:	4603      	mov	r3, r0
 8007c34:	460c      	mov	r4, r1
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	circle->x0 = start.x;
 8007c3c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	e9c2 3408 	strd	r3, r4, [r2, #32]
	circle->y0 = start.y;
 8007c46:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	circle->x1 = end.x;
 8007c50:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	circle->y1 = end.y;
 8007c5a:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	circle->xi = center.x;
 8007c64:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	circle->yi = center.y;
 8007c6e:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	circle->z0 = start.z;
 8007c78:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	circle->z1 = start.z;
 8007c82:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	circle->zi = start.z;
 8007c8c:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	circle->x_current = circle->x0;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->y0;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->z0;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	375c      	adds	r7, #92	; 0x5c
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc6:	b002      	add	sp, #8
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	f3af 8000 	nop.w
 8007cd0:	9999999a 	.word	0x9999999a
 8007cd4:	3fb99999 	.word	0x3fb99999
 8007cd8:	60000000 	.word	0x60000000
 8007cdc:	401921fb 	.word	0x401921fb
 8007ce0:	3ff00000 	.word	0x3ff00000

08007ce4 <scaraInitLinear>:

SCARA_StatusTypeDef scaraInitLinear(Trajectory_Linear_TypeDef *linear, Trajectory_TargetTypeDef target, double total_s,
									ModeInitTypeDef modeinit, double additional_factor)
{
 8007ce4:	b590      	push	{r4, r7, lr}
 8007ce6:	b087      	sub	sp, #28
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6178      	str	r0, [r7, #20]
 8007cec:	460b      	mov	r3, r1
 8007cee:	ed87 0b02 	vstr	d0, [r7, #8]
 8007cf2:	ed87 1b00 	vstr	d1, [r7]
 8007cf6:	74fb      	strb	r3, [r7, #19]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	74bb      	strb	r3, [r7, #18]

	if(target == TRAJECTORY_3D){
 8007cfc:	7cfb      	ldrb	r3, [r7, #19]
 8007cfe:	2b04      	cmp	r3, #4
 8007d00:	d004      	beq.n	8007d0c <scaraInitLinear+0x28>

	}else if(target == TRAJECTORY_ROLL){
 8007d02:	7cfb      	ldrb	r3, [r7, #19]
 8007d04:	2b05      	cmp	r3, #5
 8007d06:	d001      	beq.n	8007d0c <scaraInitLinear+0x28>

	}else{
		return SCARA_STATUS_ERROR_PARA;
 8007d08:	2306      	movs	r3, #6
 8007d0a:	e034      	b.n	8007d76 <scaraInitLinear+0x92>
	}

	if(modeinit == DUTY_MODE_INIT_QT){
 8007d0c:	7cbb      	ldrb	r3, [r7, #18]
 8007d0e:	2b03      	cmp	r3, #3
 8007d10:	d110      	bne.n	8007d34 <scaraInitLinear+0x50>
		linear->constant_v = total_s / additional_factor;
 8007d12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d1a:	f7f8 fd97 	bl	800084c <__aeabi_ddiv>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	460c      	mov	r4, r1
 8007d22:	697a      	ldr	r2, [r7, #20]
 8007d24:	e9c2 3402 	strd	r3, r4, [r2, #8]
		linear->Tf = additional_factor;
 8007d28:	697a      	ldr	r2, [r7, #20]
 8007d2a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007d2e:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8007d32:	e01f      	b.n	8007d74 <scaraInitLinear+0x90>
		//linear->number_of_sample = ceilf(additional_factor / T_SAMPLING); // ceiling
	}else if(modeinit == DUTY_MODE_INIT_QV){
 8007d34:	7cbb      	ldrb	r3, [r7, #18]
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d11a      	bne.n	8007d70 <scaraInitLinear+0x8c>
		linear->constant_v = additional_factor * V_MOVE_MAX;
 8007d3a:	f04f 0200 	mov.w	r2, #0
 8007d3e:	4b10      	ldr	r3, [pc, #64]	; (8007d80 <scaraInitLinear+0x9c>)
 8007d40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d44:	f7f8 fc58 	bl	80005f8 <__aeabi_dmul>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	697a      	ldr	r2, [r7, #20]
 8007d4e:	e9c2 3402 	strd	r3, r4, [r2, #8]
		linear->Tf = total_s / linear->constant_v;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8007d58:	461a      	mov	r2, r3
 8007d5a:	4623      	mov	r3, r4
 8007d5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d60:	f7f8 fd74 	bl	800084c <__aeabi_ddiv>
 8007d64:	4603      	mov	r3, r0
 8007d66:	460c      	mov	r4, r1
 8007d68:	697a      	ldr	r2, [r7, #20]
 8007d6a:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8007d6e:	e001      	b.n	8007d74 <scaraInitLinear+0x90>
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8007d70:	2306      	movs	r3, #6
 8007d72:	e000      	b.n	8007d76 <scaraInitLinear+0x92>
	}

	return SCARA_STATUS_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	371c      	adds	r7, #28
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd90      	pop	{r4, r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	40877000 	.word	0x40877000
 8007d84:	00000000 	.word	0x00000000

08007d88 <scaraInitLSPB1>:
SCARA_StatusTypeDef	scaraInitLSPB1		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double additional_factor){
 8007d88:	b5b0      	push	{r4, r5, r7, lr}
 8007d8a:	b096      	sub	sp, #88	; 0x58
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	61f8      	str	r0, [r7, #28]
 8007d90:	460b      	mov	r3, r1
 8007d92:	ed87 0b04 	vstr	d0, [r7, #16]
 8007d96:	ed87 1b02 	vstr	d1, [r7, #8]
 8007d9a:	ed87 2b00 	vstr	d2, [r7]
 8007d9e:	76fb      	strb	r3, [r7, #27]
 8007da0:	4613      	mov	r3, r2
 8007da2:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	if(total_s < 0){
 8007da4:	f04f 0200 	mov.w	r2, #0
 8007da8:	f04f 0300 	mov.w	r3, #0
 8007dac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007db0:	f7f8 fe94 	bl	8000adc <__aeabi_dcmplt>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d009      	beq.n	8007dce <scaraInitLSPB1+0x46>
		total_s = -total_s;
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	613b      	str	r3, [r7, #16]
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007dc4:	617b      	str	r3, [r7, #20]
		lspb->dir= -1;
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	22ff      	movs	r2, #255	; 0xff
 8007dca:	701a      	strb	r2, [r3, #0]
 8007dcc:	e002      	b.n	8007dd4 <scaraInitLSPB1+0x4c>
	}else{
		lspb->dir= 1;
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	701a      	strb	r2, [r3, #0]
	}
	if(target == TRAJECTORY_3D){
 8007dd4:	7efb      	ldrb	r3, [r7, #27]
 8007dd6:	2b04      	cmp	r3, #4
 8007dd8:	d12c      	bne.n	8007e34 <scaraInitLSPB1+0xac>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007dda:	7ebb      	ldrb	r3, [r7, #26]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d10f      	bne.n	8007e00 <scaraInitLSPB1+0x78>
			v_design = V_MOVE_MAX*v_factor;
 8007de0:	f04f 0200 	mov.w	r2, #0
 8007de4:	4b98      	ldr	r3, [pc, #608]	; (8008048 <scaraInitLSPB1+0x2c0>)
 8007de6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007dea:	f7f8 fc05 	bl	80005f8 <__aeabi_dmul>
 8007dee:	4603      	mov	r3, r0
 8007df0:	460c      	mov	r4, r1
 8007df2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 8007df6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007dfa:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8007dfe:	e073      	b.n	8007ee8 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 8007e00:	7ebb      	ldrb	r3, [r7, #26]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d170      	bne.n	8007ee8 <scaraInitLSPB1+0x160>
			a_design = A_MOVE_MAX*additional_factor;
 8007e06:	f04f 0200 	mov.w	r2, #0
 8007e0a:	4b90      	ldr	r3, [pc, #576]	; (800804c <scaraInitLSPB1+0x2c4>)
 8007e0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e10:	f7f8 fbf2 	bl	80005f8 <__aeabi_dmul>
 8007e14:	4603      	mov	r3, r0
 8007e16:	460c      	mov	r4, r1
 8007e18:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			v_design = V_MOVE_MAX*v_factor;
 8007e1c:	f04f 0200 	mov.w	r2, #0
 8007e20:	4b89      	ldr	r3, [pc, #548]	; (8008048 <scaraInitLSPB1+0x2c0>)
 8007e22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e26:	f7f8 fbe7 	bl	80005f8 <__aeabi_dmul>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	460c      	mov	r4, r1
 8007e2e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8007e32:	e059      	b.n	8007ee8 <scaraInitLSPB1+0x160>
		}
	}else if(target == TRAJECTORY_J0){
 8007e34:	7efb      	ldrb	r3, [r7, #27]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d112      	bne.n	8007e60 <scaraInitLSPB1+0xd8>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007e3a:	7ebb      	ldrb	r3, [r7, #26]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d153      	bne.n	8007ee8 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J0*v_factor;
 8007e40:	a373      	add	r3, pc, #460	; (adr r3, 8008010 <scaraInitLSPB1+0x288>)
 8007e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e4a:	f7f8 fbd5 	bl	80005f8 <__aeabi_dmul>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	460c      	mov	r4, r1
 8007e52:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 8007e56:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007e5a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8007e5e:	e043      	b.n	8007ee8 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J1){
 8007e60:	7efb      	ldrb	r3, [r7, #27]
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d112      	bne.n	8007e8c <scaraInitLSPB1+0x104>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007e66:	7ebb      	ldrb	r3, [r7, #26]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d13d      	bne.n	8007ee8 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J1*v_factor;
 8007e6c:	a368      	add	r3, pc, #416	; (adr r3, 8008010 <scaraInitLSPB1+0x288>)
 8007e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e76:	f7f8 fbbf 	bl	80005f8 <__aeabi_dmul>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	460c      	mov	r4, r1
 8007e7e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 8007e82:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007e86:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8007e8a:	e02d      	b.n	8007ee8 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J2){
 8007e8c:	7efb      	ldrb	r3, [r7, #27]
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d112      	bne.n	8007eb8 <scaraInitLSPB1+0x130>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007e92:	7ebb      	ldrb	r3, [r7, #26]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d127      	bne.n	8007ee8 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J2*v_factor;
 8007e98:	a35f      	add	r3, pc, #380	; (adr r3, 8008018 <scaraInitLSPB1+0x290>)
 8007e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ea2:	f7f8 fba9 	bl	80005f8 <__aeabi_dmul>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	460c      	mov	r4, r1
 8007eaa:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 8007eae:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007eb2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8007eb6:	e017      	b.n	8007ee8 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J3){
 8007eb8:	7efb      	ldrb	r3, [r7, #27]
 8007eba:	2b03      	cmp	r3, #3
 8007ebc:	d112      	bne.n	8007ee4 <scaraInitLSPB1+0x15c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007ebe:	7ebb      	ldrb	r3, [r7, #26]
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d111      	bne.n	8007ee8 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J3*v_factor;
 8007ec4:	a356      	add	r3, pc, #344	; (adr r3, 8008020 <scaraInitLSPB1+0x298>)
 8007ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ece:	f7f8 fb93 	bl	80005f8 <__aeabi_dmul>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	460c      	mov	r4, r1
 8007ed6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 8007eda:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007ede:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8007ee2:	e001      	b.n	8007ee8 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8007ee4:	2306      	movs	r3, #6
 8007ee6:	e207      	b.n	80082f8 <scaraInitLSPB1+0x570>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 8007ee8:	7ebb      	ldrb	r3, [r7, #26]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	f040 80f6 	bne.w	80080dc <scaraInitLSPB1+0x354>
		if(tf < 0.1 && v_design > 3){ //check if time valid or not
 8007ef0:	a34d      	add	r3, pc, #308	; (adr r3, 8008028 <scaraInitLSPB1+0x2a0>)
 8007ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007efa:	f7f8 fdef 	bl	8000adc <__aeabi_dcmplt>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d01d      	beq.n	8007f40 <scaraInitLSPB1+0x1b8>
 8007f04:	f04f 0200 	mov.w	r2, #0
 8007f08:	4b51      	ldr	r3, [pc, #324]	; (8008050 <scaraInitLSPB1+0x2c8>)
 8007f0a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007f0e:	f7f8 fe03 	bl	8000b18 <__aeabi_dcmpgt>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d013      	beq.n	8007f40 <scaraInitLSPB1+0x1b8>
			tf = 1.5*total_s/v_design;
 8007f18:	f04f 0200 	mov.w	r2, #0
 8007f1c:	4b4d      	ldr	r3, [pc, #308]	; (8008054 <scaraInitLSPB1+0x2cc>)
 8007f1e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f22:	f7f8 fb69 	bl	80005f8 <__aeabi_dmul>
 8007f26:	4603      	mov	r3, r0
 8007f28:	460c      	mov	r4, r1
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	4621      	mov	r1, r4
 8007f2e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007f32:	f7f8 fc8b 	bl	800084c <__aeabi_ddiv>
 8007f36:	4603      	mov	r3, r0
 8007f38:	460c      	mov	r4, r1
 8007f3a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8007f3e:	e0a6      	b.n	800808e <scaraInitLSPB1+0x306>
			//return SCARA_STATUS_ERROR_OVER_VELOC;
		}else if(v_design < 0.1 && tf > 0.15){ //check if velocity valid or not
 8007f40:	a339      	add	r3, pc, #228	; (adr r3, 8008028 <scaraInitLSPB1+0x2a0>)
 8007f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f46:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007f4a:	f7f8 fdc7 	bl	8000adc <__aeabi_dcmplt>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d01d      	beq.n	8007f90 <scaraInitLSPB1+0x208>
 8007f54:	a336      	add	r3, pc, #216	; (adr r3, 8008030 <scaraInitLSPB1+0x2a8>)
 8007f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007f5e:	f7f8 fddb 	bl	8000b18 <__aeabi_dcmpgt>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d013      	beq.n	8007f90 <scaraInitLSPB1+0x208>
			v_design = 1.5*total_s/tf;
 8007f68:	f04f 0200 	mov.w	r2, #0
 8007f6c:	4b39      	ldr	r3, [pc, #228]	; (8008054 <scaraInitLSPB1+0x2cc>)
 8007f6e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f72:	f7f8 fb41 	bl	80005f8 <__aeabi_dmul>
 8007f76:	4603      	mov	r3, r0
 8007f78:	460c      	mov	r4, r1
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	4621      	mov	r1, r4
 8007f7e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007f82:	f7f8 fc63 	bl	800084c <__aeabi_ddiv>
 8007f86:	4603      	mov	r3, r0
 8007f88:	460c      	mov	r4, r1
 8007f8a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8007f8e:	e07e      	b.n	800808e <scaraInitLSPB1+0x306>
		}else if(v_design < 0.1 && tf < 0.1){
 8007f90:	a325      	add	r3, pc, #148	; (adr r3, 8008028 <scaraInitLSPB1+0x2a0>)
 8007f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f96:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007f9a:	f7f8 fd9f 	bl	8000adc <__aeabi_dcmplt>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00b      	beq.n	8007fbc <scaraInitLSPB1+0x234>
 8007fa4:	a320      	add	r3, pc, #128	; (adr r3, 8008028 <scaraInitLSPB1+0x2a0>)
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007fae:	f7f8 fd95 	bl	8000adc <__aeabi_dcmplt>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <scaraInitLSPB1+0x234>
			return SCARA_STATUS_ERROR_OVER_VELOC;
 8007fb8:	2309      	movs	r3, #9
 8007fba:	e19d      	b.n	80082f8 <scaraInitLSPB1+0x570>
		}
		else{
			if(tf < 0.001){
 8007fbc:	a31e      	add	r3, pc, #120	; (adr r3, 8008038 <scaraInitLSPB1+0x2b0>)
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007fc6:	f7f8 fd89 	bl	8000adc <__aeabi_dcmplt>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d001      	beq.n	8007fd4 <scaraInitLSPB1+0x24c>
				return SCARA_STATUS_ERROR_OVER_VELOC;
 8007fd0:	2309      	movs	r3, #9
 8007fd2:	e191      	b.n	80082f8 <scaraInitLSPB1+0x570>
			}else{
				v_lim = total_s/tf;
 8007fd4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007fd8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007fdc:	f7f8 fc36 	bl	800084c <__aeabi_ddiv>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	460c      	mov	r4, r1
 8007fe4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			}
			if(v_design < 1.1*v_lim){ //the accelaration part is too large
 8007fe8:	a315      	add	r3, pc, #84	; (adr r3, 8008040 <scaraInitLSPB1+0x2b8>)
 8007fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007ff2:	f7f8 fb01 	bl	80005f8 <__aeabi_dmul>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	460c      	mov	r4, r1
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	4623      	mov	r3, r4
 8007ffe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008002:	f7f8 fd6b 	bl	8000adc <__aeabi_dcmplt>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d025      	beq.n	8008058 <scaraInitLSPB1+0x2d0>
				return SCARA_STATUS_ERROR_OVER_ACCEL;
 800800c:	230a      	movs	r3, #10
 800800e:	e173      	b.n	80082f8 <scaraInitLSPB1+0x570>
 8008010:	14000000 	.word	0x14000000
 8008014:	4000f6f0 	.word	0x4000f6f0
 8008018:	00000000 	.word	0x00000000
 800801c:	405c2000 	.word	0x405c2000
 8008020:	6b259425 	.word	0x6b259425
 8008024:	40069b91 	.word	0x40069b91
 8008028:	9999999a 	.word	0x9999999a
 800802c:	3fb99999 	.word	0x3fb99999
 8008030:	33333333 	.word	0x33333333
 8008034:	3fc33333 	.word	0x3fc33333
 8008038:	d2f1a9fc 	.word	0xd2f1a9fc
 800803c:	3f50624d 	.word	0x3f50624d
 8008040:	9999999a 	.word	0x9999999a
 8008044:	3ff19999 	.word	0x3ff19999
 8008048:	40877000 	.word	0x40877000
 800804c:	407f4000 	.word	0x407f4000
 8008050:	40080000 	.word	0x40080000
 8008054:	3ff80000 	.word	0x3ff80000
			}else if(v_design > 2*v_lim){
 8008058:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800805c:	4602      	mov	r2, r0
 800805e:	460b      	mov	r3, r1
 8008060:	f7f8 f914 	bl	800028c <__adddf3>
 8008064:	4603      	mov	r3, r0
 8008066:	460c      	mov	r4, r1
 8008068:	461a      	mov	r2, r3
 800806a:	4623      	mov	r3, r4
 800806c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008070:	f7f8 fd52 	bl	8000b18 <__aeabi_dcmpgt>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d009      	beq.n	800808e <scaraInitLSPB1+0x306>
				v_design = 2*v_lim;
 800807a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800807e:	4602      	mov	r2, r0
 8008080:	460b      	mov	r3, r1
 8008082:	f7f8 f903 	bl	800028c <__adddf3>
 8008086:	4603      	mov	r3, r0
 8008088:	460c      	mov	r4, r1
 800808a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			}else{

			}
		}
		ta = tf - total_s/v_design;
 800808e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008092:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008096:	f7f8 fbd9 	bl	800084c <__aeabi_ddiv>
 800809a:	4603      	mov	r3, r0
 800809c:	460c      	mov	r4, r1
 800809e:	461a      	mov	r2, r3
 80080a0:	4623      	mov	r3, r4
 80080a2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80080a6:	f7f8 f8ef 	bl	8000288 <__aeabi_dsub>
 80080aa:	4603      	mov	r3, r0
 80080ac:	460c      	mov	r4, r1
 80080ae:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		a_design = v_design/ta;
 80080b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80080b6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80080ba:	f7f8 fbc7 	bl	800084c <__aeabi_ddiv>
 80080be:	4603      	mov	r3, r0
 80080c0:	460c      	mov	r4, r1
 80080c2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		td = tf - ta;
 80080c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80080ca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80080ce:	f7f8 f8db 	bl	8000288 <__aeabi_dsub>
 80080d2:	4603      	mov	r3, r0
 80080d4:	460c      	mov	r4, r1
 80080d6:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 80080da:	e0a9      	b.n	8008230 <scaraInitLSPB1+0x4a8>

	}else if(modeinit == DUTY_MODE_INIT_QVA){
 80080dc:	7ebb      	ldrb	r3, [r7, #26]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	f040 80a6 	bne.w	8008230 <scaraInitLSPB1+0x4a8>
		//check qva condition
		if(total_s*a_design < v_design*v_design){ //condition for ta smaller than td
 80080e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80080e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80080ec:	f7f8 fa84 	bl	80005f8 <__aeabi_dmul>
 80080f0:	4603      	mov	r3, r0
 80080f2:	460c      	mov	r4, r1
 80080f4:	4625      	mov	r5, r4
 80080f6:	461c      	mov	r4, r3
 80080f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80080fc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008100:	f7f8 fa7a 	bl	80005f8 <__aeabi_dmul>
 8008104:	4602      	mov	r2, r0
 8008106:	460b      	mov	r3, r1
 8008108:	4620      	mov	r0, r4
 800810a:	4629      	mov	r1, r5
 800810c:	f7f8 fce6 	bl	8000adc <__aeabi_dcmplt>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d058      	beq.n	80081c8 <scaraInitLSPB1+0x440>
			if(total_s/v_design < 0.3){ //td too small
 8008116:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800811a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800811e:	f7f8 fb95 	bl	800084c <__aeabi_ddiv>
 8008122:	4603      	mov	r3, r0
 8008124:	460c      	mov	r4, r1
 8008126:	4618      	mov	r0, r3
 8008128:	4621      	mov	r1, r4
 800812a:	a375      	add	r3, pc, #468	; (adr r3, 8008300 <scaraInitLSPB1+0x578>)
 800812c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008130:	f7f8 fcd4 	bl	8000adc <__aeabi_dcmplt>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00a      	beq.n	8008150 <scaraInitLSPB1+0x3c8>
				//recalculate v_design
				v_design = total_s/0.3;
 800813a:	a371      	add	r3, pc, #452	; (adr r3, 8008300 <scaraInitLSPB1+0x578>)
 800813c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008140:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008144:	f7f8 fb82 	bl	800084c <__aeabi_ddiv>
 8008148:	4603      	mov	r3, r0
 800814a:	460c      	mov	r4, r1
 800814c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			}
			if(v_design/a_design < 0.1){ //ta is too small
 8008150:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008154:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008158:	f7f8 fb78 	bl	800084c <__aeabi_ddiv>
 800815c:	4603      	mov	r3, r0
 800815e:	460c      	mov	r4, r1
 8008160:	4618      	mov	r0, r3
 8008162:	4621      	mov	r1, r4
 8008164:	a368      	add	r3, pc, #416	; (adr r3, 8008308 <scaraInitLSPB1+0x580>)
 8008166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816a:	f7f8 fcb7 	bl	8000adc <__aeabi_dcmplt>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00a      	beq.n	800818a <scaraInitLSPB1+0x402>
				//recalculate a_design
				a_design = v_design/0.1;
 8008174:	a364      	add	r3, pc, #400	; (adr r3, 8008308 <scaraInitLSPB1+0x580>)
 8008176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800817e:	f7f8 fb65 	bl	800084c <__aeabi_ddiv>
 8008182:	4603      	mov	r3, r0
 8008184:	460c      	mov	r4, r1
 8008186:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			}
			ta = v_design/a_design;
 800818a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800818e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008192:	f7f8 fb5b 	bl	800084c <__aeabi_ddiv>
 8008196:	4603      	mov	r3, r0
 8008198:	460c      	mov	r4, r1
 800819a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
			td = total_s/v_design;
 800819e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80081a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80081a6:	f7f8 fb51 	bl	800084c <__aeabi_ddiv>
 80081aa:	4603      	mov	r3, r0
 80081ac:	460c      	mov	r4, r1
 80081ae:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			tf = ta + td;
 80081b2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80081b6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80081ba:	f7f8 f867 	bl	800028c <__adddf3>
 80081be:	4603      	mov	r3, r0
 80081c0:	460c      	mov	r4, r1
 80081c2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 80081c6:	e033      	b.n	8008230 <scaraInitLSPB1+0x4a8>
//				td = total_s/v_design;
//				tf = ta + td;
//			}

		}else{
			tf = 2*total_s/v_design;
 80081c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80081cc:	4602      	mov	r2, r0
 80081ce:	460b      	mov	r3, r1
 80081d0:	f7f8 f85c 	bl	800028c <__adddf3>
 80081d4:	4603      	mov	r3, r0
 80081d6:	460c      	mov	r4, r1
 80081d8:	4618      	mov	r0, r3
 80081da:	4621      	mov	r1, r4
 80081dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80081e0:	f7f8 fb34 	bl	800084c <__aeabi_ddiv>
 80081e4:	4603      	mov	r3, r0
 80081e6:	460c      	mov	r4, r1
 80081e8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			ta = tf/2;
 80081ec:	f04f 0200 	mov.w	r2, #0
 80081f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081f4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80081f8:	f7f8 fb28 	bl	800084c <__aeabi_ddiv>
 80081fc:	4603      	mov	r3, r0
 80081fe:	460c      	mov	r4, r1
 8008200:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
			td = tf/2;
 8008204:	f04f 0200 	mov.w	r2, #0
 8008208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800820c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008210:	f7f8 fb1c 	bl	800084c <__aeabi_ddiv>
 8008214:	4603      	mov	r3, r0
 8008216:	460c      	mov	r4, r1
 8008218:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			a_design = v_design/ta;
 800821c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008220:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008224:	f7f8 fb12 	bl	800084c <__aeabi_ddiv>
 8008228:	4603      	mov	r3, r0
 800822a:	460c      	mov	r4, r1
 800822c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		}
	}
	no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8008230:	a337      	add	r3, pc, #220	; (adr r3, 8008310 <scaraInitLSPB1+0x588>)
 8008232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008236:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800823a:	f7f8 fb07 	bl	800084c <__aeabi_ddiv>
 800823e:	4603      	mov	r3, r0
 8008240:	460c      	mov	r4, r1
 8008242:	4618      	mov	r0, r3
 8008244:	4621      	mov	r1, r4
 8008246:	f7f8 fccf 	bl	8000be8 <__aeabi_d2f>
 800824a:	4603      	mov	r3, r0
 800824c:	ee00 3a10 	vmov	s0, r3
 8008250:	f011 fc4a 	bl	8019ae8 <ceilf>
 8008254:	eef0 7a40 	vmov.f32	s15, s0
 8008258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800825c:	ee17 3a90 	vmov	r3, s15
 8008260:	627b      	str	r3, [r7, #36]	; 0x24
	 // Init lspb params

	 lspb->s0 = 0;
 8008262:	69fa      	ldr	r2, [r7, #28]
 8008264:	f04f 0300 	mov.w	r3, #0
 8008268:	f04f 0400 	mov.w	r4, #0
 800826c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = total_s;
 8008270:	69fa      	ldr	r2, [r7, #28]
 8008272:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008276:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 800827a:	69fa      	ldr	r2, [r7, #28]
 800827c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8008280:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 8008284:	69fa      	ldr	r2, [r7, #28]
 8008286:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800828a:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 800828e:	69fa      	ldr	r2, [r7, #28]
 8008290:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8008294:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 8008298:	69fa      	ldr	r2, [r7, #28]
 800829a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800829e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 80082a2:	69fa      	ldr	r2, [r7, #28]
 80082a4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80082a8:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_design;
 80082ac:	69fa      	ldr	r2, [r7, #28]
 80082ae:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80082b2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = 0;
 80082b6:	69fa      	ldr	r2, [r7, #28]
 80082b8:	f04f 0300 	mov.w	r3, #0
 80082bc:	f04f 0400 	mov.w	r4, #0
 80082c0:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = 0;
 80082c4:	69fa      	ldr	r2, [r7, #28]
 80082c6:	f04f 0300 	mov.w	r3, #0
 80082ca:	f04f 0400 	mov.w	r4, #0
 80082ce:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082d6:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80082e4:	461a      	mov	r2, r3
 80082e6:	4623      	mov	r3, r4
 80082e8:	f7f7 ffce 	bl	8000288 <__aeabi_dsub>
 80082ec:	4603      	mov	r3, r0
 80082ee:	460c      	mov	r4, r1
 80082f0:	69fa      	ldr	r2, [r7, #28]
 80082f2:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3758      	adds	r7, #88	; 0x58
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bdb0      	pop	{r4, r5, r7, pc}
 8008300:	33333333 	.word	0x33333333
 8008304:	3fd33333 	.word	0x3fd33333
 8008308:	9999999a 	.word	0x9999999a
 800830c:	3fb99999 	.word	0x3fb99999
 8008310:	40000000 	.word	0x40000000
 8008314:	3f847ae1 	.word	0x3f847ae1

08008318 <scaraInitScurve1>:
												Trajectory_TargetTypeDef target,
												double total_s,
												ModeInitTypeDef modeinit,
												double v_factor,
												double additional_factor)
{
 8008318:	b5b0      	push	{r4, r5, r7, lr}
 800831a:	b094      	sub	sp, #80	; 0x50
 800831c:	af00      	add	r7, sp, #0
 800831e:	61f8      	str	r0, [r7, #28]
 8008320:	460b      	mov	r3, r1
 8008322:	ed87 0b04 	vstr	d0, [r7, #16]
 8008326:	ed87 1b02 	vstr	d1, [r7, #8]
 800832a:	ed87 2b00 	vstr	d2, [r7]
 800832e:	76fb      	strb	r3, [r7, #27]
 8008330:	4613      	mov	r3, r2
 8008332:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	if(total_s < 0){
 8008334:	f04f 0200 	mov.w	r2, #0
 8008338:	f04f 0300 	mov.w	r3, #0
 800833c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008340:	f7f8 fbcc 	bl	8000adc <__aeabi_dcmplt>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d009      	beq.n	800835e <scaraInitScurve1+0x46>
		total_s = -total_s;
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	613b      	str	r3, [r7, #16]
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008354:	617b      	str	r3, [r7, #20]
		scurve->dir= -1;
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	22ff      	movs	r2, #255	; 0xff
 800835a:	701a      	strb	r2, [r3, #0]
 800835c:	e002      	b.n	8008364 <scaraInitScurve1+0x4c>
	}else{
		scurve->dir= 1;
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	2201      	movs	r2, #1
 8008362:	701a      	strb	r2, [r3, #0]
	}
	if(target == TRAJECTORY_3D){
 8008364:	7efb      	ldrb	r3, [r7, #27]
 8008366:	2b04      	cmp	r3, #4
 8008368:	d12c      	bne.n	80083c4 <scaraInitScurve1+0xac>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800836a:	7ebb      	ldrb	r3, [r7, #26]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d10f      	bne.n	8008390 <scaraInitScurve1+0x78>
			v_design = V_MOVE_MAX*v_factor;
 8008370:	f04f 0200 	mov.w	r2, #0
 8008374:	4b90      	ldr	r3, [pc, #576]	; (80085b8 <scaraInitScurve1+0x2a0>)
 8008376:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800837a:	f7f8 f93d 	bl	80005f8 <__aeabi_dmul>
 800837e:	4603      	mov	r3, r0
 8008380:	460c      	mov	r4, r1
 8008382:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			tf = additional_factor;
 8008386:	e9d7 3400 	ldrd	r3, r4, [r7]
 800838a:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800838e:	e073      	b.n	8008478 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 8008390:	7ebb      	ldrb	r3, [r7, #26]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d170      	bne.n	8008478 <scaraInitScurve1+0x160>
			a_design = A_MOVE_MAX*additional_factor;
 8008396:	f04f 0200 	mov.w	r2, #0
 800839a:	4b88      	ldr	r3, [pc, #544]	; (80085bc <scaraInitScurve1+0x2a4>)
 800839c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083a0:	f7f8 f92a 	bl	80005f8 <__aeabi_dmul>
 80083a4:	4603      	mov	r3, r0
 80083a6:	460c      	mov	r4, r1
 80083a8:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
			v_design = V_MOVE_MAX*v_factor;
 80083ac:	f04f 0200 	mov.w	r2, #0
 80083b0:	4b81      	ldr	r3, [pc, #516]	; (80085b8 <scaraInitScurve1+0x2a0>)
 80083b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80083b6:	f7f8 f91f 	bl	80005f8 <__aeabi_dmul>
 80083ba:	4603      	mov	r3, r0
 80083bc:	460c      	mov	r4, r1
 80083be:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 80083c2:	e059      	b.n	8008478 <scaraInitScurve1+0x160>
		}
	}else if(target == TRAJECTORY_J0){
 80083c4:	7efb      	ldrb	r3, [r7, #27]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d112      	bne.n	80083f0 <scaraInitScurve1+0xd8>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80083ca:	7ebb      	ldrb	r3, [r7, #26]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d153      	bne.n	8008478 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J0*v_factor;
 80083d0:	a36d      	add	r3, pc, #436	; (adr r3, 8008588 <scaraInitScurve1+0x270>)
 80083d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80083da:	f7f8 f90d 	bl	80005f8 <__aeabi_dmul>
 80083de:	4603      	mov	r3, r0
 80083e0:	460c      	mov	r4, r1
 80083e2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			tf = additional_factor;
 80083e6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80083ea:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80083ee:	e043      	b.n	8008478 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J1){
 80083f0:	7efb      	ldrb	r3, [r7, #27]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d112      	bne.n	800841c <scaraInitScurve1+0x104>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80083f6:	7ebb      	ldrb	r3, [r7, #26]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d13d      	bne.n	8008478 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J1*v_factor;
 80083fc:	a362      	add	r3, pc, #392	; (adr r3, 8008588 <scaraInitScurve1+0x270>)
 80083fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008402:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008406:	f7f8 f8f7 	bl	80005f8 <__aeabi_dmul>
 800840a:	4603      	mov	r3, r0
 800840c:	460c      	mov	r4, r1
 800840e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			tf = additional_factor;
 8008412:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008416:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800841a:	e02d      	b.n	8008478 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J2){
 800841c:	7efb      	ldrb	r3, [r7, #27]
 800841e:	2b02      	cmp	r3, #2
 8008420:	d112      	bne.n	8008448 <scaraInitScurve1+0x130>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8008422:	7ebb      	ldrb	r3, [r7, #26]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d127      	bne.n	8008478 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J2*v_factor;
 8008428:	a359      	add	r3, pc, #356	; (adr r3, 8008590 <scaraInitScurve1+0x278>)
 800842a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008432:	f7f8 f8e1 	bl	80005f8 <__aeabi_dmul>
 8008436:	4603      	mov	r3, r0
 8008438:	460c      	mov	r4, r1
 800843a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			tf = additional_factor;
 800843e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008442:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8008446:	e017      	b.n	8008478 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J3){
 8008448:	7efb      	ldrb	r3, [r7, #27]
 800844a:	2b03      	cmp	r3, #3
 800844c:	d112      	bne.n	8008474 <scaraInitScurve1+0x15c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800844e:	7ebb      	ldrb	r3, [r7, #26]
 8008450:	2b01      	cmp	r3, #1
 8008452:	d111      	bne.n	8008478 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J3*v_factor;
 8008454:	a350      	add	r3, pc, #320	; (adr r3, 8008598 <scaraInitScurve1+0x280>)
 8008456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800845e:	f7f8 f8cb 	bl	80005f8 <__aeabi_dmul>
 8008462:	4603      	mov	r3, r0
 8008464:	460c      	mov	r4, r1
 8008466:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			tf = additional_factor;
 800846a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800846e:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8008472:	e001      	b.n	8008478 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8008474:	2306      	movs	r3, #6
 8008476:	e252      	b.n	800891e <scaraInitScurve1+0x606>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 8008478:	7ebb      	ldrb	r3, [r7, #26]
 800847a:	2b01      	cmp	r3, #1
 800847c:	f040 80fe 	bne.w	800867c <scaraInitScurve1+0x364>
		if(tf < 0.1 && v_design > 7.5){ //check if time valid or not
 8008480:	a347      	add	r3, pc, #284	; (adr r3, 80085a0 <scaraInitScurve1+0x288>)
 8008482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008486:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800848a:	f7f8 fb27 	bl	8000adc <__aeabi_dcmplt>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d01d      	beq.n	80084d0 <scaraInitScurve1+0x1b8>
 8008494:	f04f 0200 	mov.w	r2, #0
 8008498:	4b49      	ldr	r3, [pc, #292]	; (80085c0 <scaraInitScurve1+0x2a8>)
 800849a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800849e:	f7f8 fb3b 	bl	8000b18 <__aeabi_dcmpgt>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d013      	beq.n	80084d0 <scaraInitScurve1+0x1b8>
			tf = 1.5*total_s/v_design;
 80084a8:	f04f 0200 	mov.w	r2, #0
 80084ac:	4b45      	ldr	r3, [pc, #276]	; (80085c4 <scaraInitScurve1+0x2ac>)
 80084ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80084b2:	f7f8 f8a1 	bl	80005f8 <__aeabi_dmul>
 80084b6:	4603      	mov	r3, r0
 80084b8:	460c      	mov	r4, r1
 80084ba:	4618      	mov	r0, r3
 80084bc:	4621      	mov	r1, r4
 80084be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80084c2:	f7f8 f9c3 	bl	800084c <__aeabi_ddiv>
 80084c6:	4603      	mov	r3, r0
 80084c8:	460c      	mov	r4, r1
 80084ca:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80084ce:	e096      	b.n	80085fe <scaraInitScurve1+0x2e6>
		}else if(v_design < 0.1 && tf > 0.15){ //check if velocity valid or not
 80084d0:	a333      	add	r3, pc, #204	; (adr r3, 80085a0 <scaraInitScurve1+0x288>)
 80084d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80084da:	f7f8 faff 	bl	8000adc <__aeabi_dcmplt>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d01d      	beq.n	8008520 <scaraInitScurve1+0x208>
 80084e4:	a330      	add	r3, pc, #192	; (adr r3, 80085a8 <scaraInitScurve1+0x290>)
 80084e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80084ee:	f7f8 fb13 	bl	8000b18 <__aeabi_dcmpgt>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d013      	beq.n	8008520 <scaraInitScurve1+0x208>
			v_design = 1.5*total_s/tf;
 80084f8:	f04f 0200 	mov.w	r2, #0
 80084fc:	4b31      	ldr	r3, [pc, #196]	; (80085c4 <scaraInitScurve1+0x2ac>)
 80084fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008502:	f7f8 f879 	bl	80005f8 <__aeabi_dmul>
 8008506:	4603      	mov	r3, r0
 8008508:	460c      	mov	r4, r1
 800850a:	4618      	mov	r0, r3
 800850c:	4621      	mov	r1, r4
 800850e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008512:	f7f8 f99b 	bl	800084c <__aeabi_ddiv>
 8008516:	4603      	mov	r3, r0
 8008518:	460c      	mov	r4, r1
 800851a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 800851e:	e06e      	b.n	80085fe <scaraInitScurve1+0x2e6>
		}else if(tf < 0.1 && v_design < 0.1){
 8008520:	a31f      	add	r3, pc, #124	; (adr r3, 80085a0 <scaraInitScurve1+0x288>)
 8008522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008526:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800852a:	f7f8 fad7 	bl	8000adc <__aeabi_dcmplt>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00b      	beq.n	800854c <scaraInitScurve1+0x234>
 8008534:	a31a      	add	r3, pc, #104	; (adr r3, 80085a0 <scaraInitScurve1+0x288>)
 8008536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800853e:	f7f8 facd 	bl	8000adc <__aeabi_dcmplt>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <scaraInitScurve1+0x234>
			return SCARA_STATUS_ERROR_OVER_VELOC;
 8008548:	2309      	movs	r3, #9
 800854a:	e1e8      	b.n	800891e <scaraInitScurve1+0x606>
		}else{
			v_lim = total_s/tf;
 800854c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008550:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008554:	f7f8 f97a 	bl	800084c <__aeabi_ddiv>
 8008558:	4603      	mov	r3, r0
 800855a:	460c      	mov	r4, r1
 800855c:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			if(v_design < 1.1*v_lim){ // the accelaration part is too large
 8008560:	a313      	add	r3, pc, #76	; (adr r3, 80085b0 <scaraInitScurve1+0x298>)
 8008562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008566:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800856a:	f7f8 f845 	bl	80005f8 <__aeabi_dmul>
 800856e:	4603      	mov	r3, r0
 8008570:	460c      	mov	r4, r1
 8008572:	461a      	mov	r2, r3
 8008574:	4623      	mov	r3, r4
 8008576:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800857a:	f7f8 faaf 	bl	8000adc <__aeabi_dcmplt>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d021      	beq.n	80085c8 <scaraInitScurve1+0x2b0>
				return SCARA_STATUS_ERROR_OVER_ACCEL;
 8008584:	230a      	movs	r3, #10
 8008586:	e1ca      	b.n	800891e <scaraInitScurve1+0x606>
 8008588:	14000000 	.word	0x14000000
 800858c:	4000f6f0 	.word	0x4000f6f0
 8008590:	00000000 	.word	0x00000000
 8008594:	405c2000 	.word	0x405c2000
 8008598:	6b259425 	.word	0x6b259425
 800859c:	40069b91 	.word	0x40069b91
 80085a0:	9999999a 	.word	0x9999999a
 80085a4:	3fb99999 	.word	0x3fb99999
 80085a8:	33333333 	.word	0x33333333
 80085ac:	3fc33333 	.word	0x3fc33333
 80085b0:	9999999a 	.word	0x9999999a
 80085b4:	3ff19999 	.word	0x3ff19999
 80085b8:	40877000 	.word	0x40877000
 80085bc:	407f4000 	.word	0x407f4000
 80085c0:	401e0000 	.word	0x401e0000
 80085c4:	3ff80000 	.word	0x3ff80000
			}else if(v_design > 2*v_lim){
 80085c8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	f7f7 fe5c 	bl	800028c <__adddf3>
 80085d4:	4603      	mov	r3, r0
 80085d6:	460c      	mov	r4, r1
 80085d8:	461a      	mov	r2, r3
 80085da:	4623      	mov	r3, r4
 80085dc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80085e0:	f7f8 fa9a 	bl	8000b18 <__aeabi_dcmpgt>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d009      	beq.n	80085fe <scaraInitScurve1+0x2e6>
				v_design = 2*v_lim;
 80085ea:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80085ee:	4602      	mov	r2, r0
 80085f0:	460b      	mov	r3, r1
 80085f2:	f7f7 fe4b 	bl	800028c <__adddf3>
 80085f6:	4603      	mov	r3, r0
 80085f8:	460c      	mov	r4, r1
 80085fa:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			}else{
	
			}
		}
		a_design = 2*v_design*v_design/(v_design*tf - total_s);
 80085fe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008602:	4602      	mov	r2, r0
 8008604:	460b      	mov	r3, r1
 8008606:	f7f7 fe41 	bl	800028c <__adddf3>
 800860a:	4603      	mov	r3, r0
 800860c:	460c      	mov	r4, r1
 800860e:	4618      	mov	r0, r3
 8008610:	4621      	mov	r1, r4
 8008612:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008616:	f7f7 ffef 	bl	80005f8 <__aeabi_dmul>
 800861a:	4603      	mov	r3, r0
 800861c:	460c      	mov	r4, r1
 800861e:	4625      	mov	r5, r4
 8008620:	461c      	mov	r4, r3
 8008622:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008626:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800862a:	f7f7 ffe5 	bl	80005f8 <__aeabi_dmul>
 800862e:	4602      	mov	r2, r0
 8008630:	460b      	mov	r3, r1
 8008632:	4610      	mov	r0, r2
 8008634:	4619      	mov	r1, r3
 8008636:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800863a:	f7f7 fe25 	bl	8000288 <__aeabi_dsub>
 800863e:	4602      	mov	r2, r0
 8008640:	460b      	mov	r3, r1
 8008642:	4620      	mov	r0, r4
 8008644:	4629      	mov	r1, r5
 8008646:	f7f8 f901 	bl	800084c <__aeabi_ddiv>
 800864a:	4603      	mov	r3, r0
 800864c:	460c      	mov	r4, r1
 800864e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		ta = v_design/a_design;		
 8008652:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008656:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800865a:	f7f8 f8f7 	bl	800084c <__aeabi_ddiv>
 800865e:	4603      	mov	r3, r0
 8008660:	460c      	mov	r4, r1
 8008662:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
		td = tf - ta;
 8008666:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800866a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800866e:	f7f7 fe0b 	bl	8000288 <__aeabi_dsub>
 8008672:	4603      	mov	r3, r0
 8008674:	460c      	mov	r4, r1
 8008676:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 800867a:	e0c0      	b.n	80087fe <scaraInitScurve1+0x4e6>
	
	}else if(modeinit == DUTY_MODE_INIT_QVA){
 800867c:	7ebb      	ldrb	r3, [r7, #26]
 800867e:	2b00      	cmp	r3, #0
 8008680:	f040 80bd 	bne.w	80087fe <scaraInitScurve1+0x4e6>
		//check qva condition
		if(total_s*a_design < 2*v_design*v_design){ //condition for ta smaller than tc
 8008684:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008688:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800868c:	f7f7 ffb4 	bl	80005f8 <__aeabi_dmul>
 8008690:	4603      	mov	r3, r0
 8008692:	460c      	mov	r4, r1
 8008694:	4625      	mov	r5, r4
 8008696:	461c      	mov	r4, r3
 8008698:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800869c:	4602      	mov	r2, r0
 800869e:	460b      	mov	r3, r1
 80086a0:	f7f7 fdf4 	bl	800028c <__adddf3>
 80086a4:	4602      	mov	r2, r0
 80086a6:	460b      	mov	r3, r1
 80086a8:	4610      	mov	r0, r2
 80086aa:	4619      	mov	r1, r3
 80086ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80086b0:	f7f7 ffa2 	bl	80005f8 <__aeabi_dmul>
 80086b4:	4602      	mov	r2, r0
 80086b6:	460b      	mov	r3, r1
 80086b8:	4620      	mov	r0, r4
 80086ba:	4629      	mov	r1, r5
 80086bc:	f7f8 fa0e 	bl	8000adc <__aeabi_dcmplt>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d060      	beq.n	8008788 <scaraInitScurve1+0x470>
			if(total_s/v_design < 0.3){ //tc too small
 80086c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80086ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80086ce:	f7f8 f8bd 	bl	800084c <__aeabi_ddiv>
 80086d2:	4603      	mov	r3, r0
 80086d4:	460c      	mov	r4, r1
 80086d6:	4618      	mov	r0, r3
 80086d8:	4621      	mov	r1, r4
 80086da:	a396      	add	r3, pc, #600	; (adr r3, 8008934 <scaraInitScurve1+0x61c>)
 80086dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e0:	f7f8 f9fc 	bl	8000adc <__aeabi_dcmplt>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00a      	beq.n	8008700 <scaraInitScurve1+0x3e8>
				//recalculate v_design
				v_design = total_s/0.3;
 80086ea:	a392      	add	r3, pc, #584	; (adr r3, 8008934 <scaraInitScurve1+0x61c>)
 80086ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80086f4:	f7f8 f8aa 	bl	800084c <__aeabi_ddiv>
 80086f8:	4603      	mov	r3, r0
 80086fa:	460c      	mov	r4, r1
 80086fc:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			}
			if(v_design/a_design < 0.1){ //ta is too small
 8008700:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008704:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008708:	f7f8 f8a0 	bl	800084c <__aeabi_ddiv>
 800870c:	4603      	mov	r3, r0
 800870e:	460c      	mov	r4, r1
 8008710:	4618      	mov	r0, r3
 8008712:	4621      	mov	r1, r4
 8008714:	a389      	add	r3, pc, #548	; (adr r3, 800893c <scaraInitScurve1+0x624>)
 8008716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871a:	f7f8 f9df 	bl	8000adc <__aeabi_dcmplt>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00a      	beq.n	800873a <scaraInitScurve1+0x422>
				//recalculate a_design
				a_design = v_design/0.1;
 8008724:	a385      	add	r3, pc, #532	; (adr r3, 800893c <scaraInitScurve1+0x624>)
 8008726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800872e:	f7f8 f88d 	bl	800084c <__aeabi_ddiv>
 8008732:	4603      	mov	r3, r0
 8008734:	460c      	mov	r4, r1
 8008736:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
			}
			ta = v_design/a_design;
 800873a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800873e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008742:	f7f8 f883 	bl	800084c <__aeabi_ddiv>
 8008746:	4603      	mov	r3, r0
 8008748:	460c      	mov	r4, r1
 800874a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			td = total_s/v_design + ta;
 800874e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008752:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008756:	f7f8 f879 	bl	800084c <__aeabi_ddiv>
 800875a:	4603      	mov	r3, r0
 800875c:	460c      	mov	r4, r1
 800875e:	461a      	mov	r2, r3
 8008760:	4623      	mov	r3, r4
 8008762:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008766:	f7f7 fd91 	bl	800028c <__adddf3>
 800876a:	4603      	mov	r3, r0
 800876c:	460c      	mov	r4, r1
 800876e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			tf = ta + td;
 8008772:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008776:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800877a:	f7f7 fd87 	bl	800028c <__adddf3>
 800877e:	4603      	mov	r3, r0
 8008780:	460c      	mov	r4, r1
 8008782:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8008786:	e03a      	b.n	80087fe <scaraInitScurve1+0x4e6>
//				td = total_s/v_design;
//				tf = ta + td;
//			}
	
		}else{
			tf = 2*total_s/v_design;
 8008788:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	f7f7 fd7c 	bl	800028c <__adddf3>
 8008794:	4603      	mov	r3, r0
 8008796:	460c      	mov	r4, r1
 8008798:	4618      	mov	r0, r3
 800879a:	4621      	mov	r1, r4
 800879c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80087a0:	f7f8 f854 	bl	800084c <__aeabi_ddiv>
 80087a4:	4603      	mov	r3, r0
 80087a6:	460c      	mov	r4, r1
 80087a8:	e9c7 3408 	strd	r3, r4, [r7, #32]
			ta = tf/4;
 80087ac:	f04f 0200 	mov.w	r2, #0
 80087b0:	4b5d      	ldr	r3, [pc, #372]	; (8008928 <scaraInitScurve1+0x610>)
 80087b2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80087b6:	f7f8 f849 	bl	800084c <__aeabi_ddiv>
 80087ba:	4603      	mov	r3, r0
 80087bc:	460c      	mov	r4, r1
 80087be:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			td = 3*tf/4;
 80087c2:	f04f 0200 	mov.w	r2, #0
 80087c6:	4b59      	ldr	r3, [pc, #356]	; (800892c <scaraInitScurve1+0x614>)
 80087c8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80087cc:	f7f7 ff14 	bl	80005f8 <__aeabi_dmul>
 80087d0:	4603      	mov	r3, r0
 80087d2:	460c      	mov	r4, r1
 80087d4:	4618      	mov	r0, r3
 80087d6:	4621      	mov	r1, r4
 80087d8:	f04f 0200 	mov.w	r2, #0
 80087dc:	4b52      	ldr	r3, [pc, #328]	; (8008928 <scaraInitScurve1+0x610>)
 80087de:	f7f8 f835 	bl	800084c <__aeabi_ddiv>
 80087e2:	4603      	mov	r3, r0
 80087e4:	460c      	mov	r4, r1
 80087e6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			a_design = v_design/ta;
 80087ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80087ee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80087f2:	f7f8 f82b 	bl	800084c <__aeabi_ddiv>
 80087f6:	4603      	mov	r3, r0
 80087f8:	460c      	mov	r4, r1
 80087fa:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		}
	}
	//no_sample = ceilf(tf / T_SAMPLING); // ceiling
	 // Init lspb params
	
	scurve->Ta = ta;
 80087fe:	69fa      	ldr	r2, [r7, #28]
 8008800:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8008804:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	scurve->Tf = tf;
 8008808:	69fa      	ldr	r2, [r7, #28]
 800880a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800880e:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	scurve->Td = td;
 8008812:	69fa      	ldr	r2, [r7, #28]
 8008814:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8008818:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	scurve->a_design = a_design;
 800881c:	69fa      	ldr	r2, [r7, #28]
 800881e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8008822:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	scurve->v_design = v_design;
 8008826:	69fa      	ldr	r2, [r7, #28]
 8008828:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800882c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	scurve->v_lim = v_lim;
 8008830:	69fa      	ldr	r2, [r7, #28]
 8008832:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8008836:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	scurve->total_s = total_s;
 800883a:	69fa      	ldr	r2, [r7, #28]
 800883c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008840:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	scurve->a_current = 0;
 8008844:	69fa      	ldr	r2, [r7, #28]
 8008846:	f04f 0300 	mov.w	r3, #0
 800884a:	f04f 0400 	mov.w	r4, #0
 800884e:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	scurve->v_current = 0;
 8008852:	69fa      	ldr	r2, [r7, #28]
 8008854:	f04f 0300 	mov.w	r3, #0
 8008858:	f04f 0400 	mov.w	r4, #0
 800885c:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	scurve->s_current = 0;
 8008860:	69fa      	ldr	r2, [r7, #28]
 8008862:	f04f 0300 	mov.w	r3, #0
 8008866:	f04f 0400 	mov.w	r4, #0
 800886a:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	//define duplicate value when calculating scurve flow
	scurve->k_1        = v_design/(6*ta*ta);
 800886e:	f04f 0200 	mov.w	r2, #0
 8008872:	4b2f      	ldr	r3, [pc, #188]	; (8008930 <scaraInitScurve1+0x618>)
 8008874:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008878:	f7f7 febe 	bl	80005f8 <__aeabi_dmul>
 800887c:	4603      	mov	r3, r0
 800887e:	460c      	mov	r4, r1
 8008880:	4618      	mov	r0, r3
 8008882:	4621      	mov	r1, r4
 8008884:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008888:	f7f7 feb6 	bl	80005f8 <__aeabi_dmul>
 800888c:	4603      	mov	r3, r0
 800888e:	460c      	mov	r4, r1
 8008890:	461a      	mov	r2, r3
 8008892:	4623      	mov	r3, r4
 8008894:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008898:	f7f7 ffd8 	bl	800084c <__aeabi_ddiv>
 800889c:	4603      	mov	r3, r0
 800889e:	460c      	mov	r4, r1
 80088a0:	69fa      	ldr	r2, [r7, #28]
 80088a2:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	scurve->k_2		   = 2*ta*ta*ta;
 80088a6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80088aa:	4602      	mov	r2, r0
 80088ac:	460b      	mov	r3, r1
 80088ae:	f7f7 fced 	bl	800028c <__adddf3>
 80088b2:	4603      	mov	r3, r0
 80088b4:	460c      	mov	r4, r1
 80088b6:	4618      	mov	r0, r3
 80088b8:	4621      	mov	r1, r4
 80088ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80088be:	f7f7 fe9b 	bl	80005f8 <__aeabi_dmul>
 80088c2:	4603      	mov	r3, r0
 80088c4:	460c      	mov	r4, r1
 80088c6:	4618      	mov	r0, r3
 80088c8:	4621      	mov	r1, r4
 80088ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80088ce:	f7f7 fe93 	bl	80005f8 <__aeabi_dmul>
 80088d2:	4603      	mov	r3, r0
 80088d4:	460c      	mov	r4, r1
 80088d6:	69fa      	ldr	r2, [r7, #28]
 80088d8:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	scurve->k_3        = 6*ta;
 80088dc:	f04f 0200 	mov.w	r2, #0
 80088e0:	4b13      	ldr	r3, [pc, #76]	; (8008930 <scaraInitScurve1+0x618>)
 80088e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80088e6:	f7f7 fe87 	bl	80005f8 <__aeabi_dmul>
 80088ea:	4603      	mov	r3, r0
 80088ec:	460c      	mov	r4, r1
 80088ee:	69fa      	ldr	r2, [r7, #28]
 80088f0:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	scurve->k_4        = 6*ta*ta;
 80088f4:	f04f 0200 	mov.w	r2, #0
 80088f8:	4b0d      	ldr	r3, [pc, #52]	; (8008930 <scaraInitScurve1+0x618>)
 80088fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80088fe:	f7f7 fe7b 	bl	80005f8 <__aeabi_dmul>
 8008902:	4603      	mov	r3, r0
 8008904:	460c      	mov	r4, r1
 8008906:	4618      	mov	r0, r3
 8008908:	4621      	mov	r1, r4
 800890a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800890e:	f7f7 fe73 	bl	80005f8 <__aeabi_dmul>
 8008912:	4603      	mov	r3, r0
 8008914:	460c      	mov	r4, r1
 8008916:	69fa      	ldr	r2, [r7, #28]
 8008918:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	return SCARA_STATUS_OK;
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3750      	adds	r7, #80	; 0x50
 8008922:	46bd      	mov	sp, r7
 8008924:	bdb0      	pop	{r4, r5, r7, pc}
 8008926:	bf00      	nop
 8008928:	40100000 	.word	0x40100000
 800892c:	40080000 	.word	0x40080000
 8008930:	40180000 	.word	0x40180000
 8008934:	33333333 	.word	0x33333333
 8008938:	3fd33333 	.word	0x3fd33333
 800893c:	9999999a 	.word	0x9999999a
 8008940:	3fb99999 	.word	0x3fb99999

08008944 <scaraFlowLSPB1>:
SCARA_StatusTypeDef	scaraFlowLSPB1	(Trajectory_LSPB_TypeDef *lspb, double time){
 8008944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008948:	b08b      	sub	sp, #44	; 0x2c
 800894a:	af00      	add	r7, sp, #0
 800894c:	60f8      	str	r0, [r7, #12]
 800894e:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008958:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008962:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800896c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8008970:	f04f 0200 	mov.w	r2, #0
 8008974:	f04f 0300 	mov.w	r3, #0
 8008978:	e9d7 0100 	ldrd	r0, r1, [r7]
 800897c:	f7f8 f8c2 	bl	8000b04 <__aeabi_dcmpge>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d05b      	beq.n	8008a3e <scaraFlowLSPB1+0xfa>
 8008986:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800898a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800898e:	f7f8 f8af 	bl	8000af0 <__aeabi_dcmple>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d052      	beq.n	8008a3e <scaraFlowLSPB1+0xfa>
		lspb->a_current		=	lspb->a_design;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80089b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089b4:	f7f7 fe20 	bl	80005f8 <__aeabi_dmul>
 80089b8:	4602      	mov	r2, r0
 80089ba:	460b      	mov	r3, r1
 80089bc:	4620      	mov	r0, r4
 80089be:	4629      	mov	r1, r5
 80089c0:	f7f7 fc64 	bl	800028c <__adddf3>
 80089c4:	4603      	mov	r3, r0
 80089c6:	460c      	mov	r4, r1
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80089da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089de:	f7f7 fe0b 	bl	80005f8 <__aeabi_dmul>
 80089e2:	4602      	mov	r2, r0
 80089e4:	460b      	mov	r3, r1
 80089e6:	4620      	mov	r0, r4
 80089e8:	4629      	mov	r1, r5
 80089ea:	f7f7 fc4f 	bl	800028c <__adddf3>
 80089ee:	4603      	mov	r3, r0
 80089f0:	460c      	mov	r4, r1
 80089f2:	4625      	mov	r5, r4
 80089f4:	461c      	mov	r4, r3
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80089fc:	f04f 0200 	mov.w	r2, #0
 8008a00:	4b9e      	ldr	r3, [pc, #632]	; (8008c7c <scaraFlowLSPB1+0x338>)
 8008a02:	f7f7 fdf9 	bl	80005f8 <__aeabi_dmul>
 8008a06:	4602      	mov	r2, r0
 8008a08:	460b      	mov	r3, r1
 8008a0a:	4610      	mov	r0, r2
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a12:	f7f7 fdf1 	bl	80005f8 <__aeabi_dmul>
 8008a16:	4602      	mov	r2, r0
 8008a18:	460b      	mov	r3, r1
 8008a1a:	4610      	mov	r0, r2
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a22:	f7f7 fde9 	bl	80005f8 <__aeabi_dmul>
 8008a26:	4602      	mov	r2, r0
 8008a28:	460b      	mov	r3, r1
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	f7f7 fc2d 	bl	800028c <__adddf3>
 8008a32:	4603      	mov	r3, r0
 8008a34:	460c      	mov	r4, r1
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8008a3c:	e117      	b.n	8008c6e <scaraFlowLSPB1+0x32a>
	// Constant velocity
	} else if (ta < time && time <= td) {
 8008a3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008a46:	f7f8 f849 	bl	8000adc <__aeabi_dcmplt>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d056      	beq.n	8008afe <scaraFlowLSPB1+0x1ba>
 8008a50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a58:	f7f8 f84a 	bl	8000af0 <__aeabi_dcmple>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d04d      	beq.n	8008afe <scaraFlowLSPB1+0x1ba>
		lspb->a_current		=	0;
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	f04f 0300 	mov.w	r3, #0
 8008a68:	f04f 0400 	mov.w	r4, #0
 8008a6c:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta*0.5 + lspb->v_design*(time - ta*0.5);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008a88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008a8c:	f7f7 fdb4 	bl	80005f8 <__aeabi_dmul>
 8008a90:	4602      	mov	r2, r0
 8008a92:	460b      	mov	r3, r1
 8008a94:	4610      	mov	r0, r2
 8008a96:	4619      	mov	r1, r3
 8008a98:	f04f 0200 	mov.w	r2, #0
 8008a9c:	4b77      	ldr	r3, [pc, #476]	; (8008c7c <scaraFlowLSPB1+0x338>)
 8008a9e:	f7f7 fdab 	bl	80005f8 <__aeabi_dmul>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	f7f7 fbef 	bl	800028c <__adddf3>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	460c      	mov	r4, r1
 8008ab2:	4698      	mov	r8, r3
 8008ab4:	46a1      	mov	r9, r4
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8008abc:	f04f 0200 	mov.w	r2, #0
 8008ac0:	4b6e      	ldr	r3, [pc, #440]	; (8008c7c <scaraFlowLSPB1+0x338>)
 8008ac2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008ac6:	f7f7 fd97 	bl	80005f8 <__aeabi_dmul>
 8008aca:	4602      	mov	r2, r0
 8008acc:	460b      	mov	r3, r1
 8008ace:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ad2:	f7f7 fbd9 	bl	8000288 <__aeabi_dsub>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4620      	mov	r0, r4
 8008adc:	4629      	mov	r1, r5
 8008ade:	f7f7 fd8b 	bl	80005f8 <__aeabi_dmul>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	460c      	mov	r4, r1
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	4623      	mov	r3, r4
 8008aea:	4640      	mov	r0, r8
 8008aec:	4649      	mov	r1, r9
 8008aee:	f7f7 fbcd 	bl	800028c <__adddf3>
 8008af2:	4603      	mov	r3, r0
 8008af4:	460c      	mov	r4, r1
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8008afc:	e0b7      	b.n	8008c6e <scaraFlowLSPB1+0x32a>
	// Decelerate
	} else if (td < time && time <= tf) {
 8008afe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008b06:	f7f7 ffe9 	bl	8000adc <__aeabi_dcmplt>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f000 809a 	beq.w	8008c46 <scaraFlowLSPB1+0x302>
 8008b12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b1a:	f7f7 ffe9 	bl	8000af0 <__aeabi_dcmple>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f000 8090 	beq.w	8008c46 <scaraFlowLSPB1+0x302>
		lspb->a_current		=	-lspb->a_design;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008b2c:	4614      	mov	r4, r2
 8008b2e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v_design + lspb->a_design*(td - time);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 8008b44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b48:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008b4c:	f7f7 fb9c 	bl	8000288 <__aeabi_dsub>
 8008b50:	4602      	mov	r2, r0
 8008b52:	460b      	mov	r3, r1
 8008b54:	4640      	mov	r0, r8
 8008b56:	4649      	mov	r1, r9
 8008b58:	f7f7 fd4e 	bl	80005f8 <__aeabi_dmul>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	460b      	mov	r3, r1
 8008b60:	4620      	mov	r0, r4
 8008b62:	4629      	mov	r1, r5
 8008b64:	f7f7 fb92 	bl	800028c <__adddf3>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	460c      	mov	r4, r1
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8008b7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b82:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008b86:	f7f7 fb7f 	bl	8000288 <__aeabi_dsub>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	4640      	mov	r0, r8
 8008b90:	4649      	mov	r1, r9
 8008b92:	f7f7 fd31 	bl	80005f8 <__aeabi_dmul>
 8008b96:	4602      	mov	r2, r0
 8008b98:	460b      	mov	r3, r1
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	4629      	mov	r1, r5
 8008b9e:	f7f7 fb73 	bl	8000288 <__aeabi_dsub>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	460c      	mov	r4, r1
 8008ba6:	461d      	mov	r5, r3
 8008ba8:	4626      	mov	r6, r4
								- (lspb->v_lim - lspb->v0)*(tf - time)*(tf - time)/(2*ta);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	4623      	mov	r3, r4
 8008bba:	f7f7 fb65 	bl	8000288 <__aeabi_dsub>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	460c      	mov	r4, r1
 8008bc2:	4698      	mov	r8, r3
 8008bc4:	46a1      	mov	r9, r4
 8008bc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008bce:	f7f7 fb5b 	bl	8000288 <__aeabi_dsub>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	460c      	mov	r4, r1
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	4623      	mov	r3, r4
 8008bda:	4640      	mov	r0, r8
 8008bdc:	4649      	mov	r1, r9
 8008bde:	f7f7 fd0b 	bl	80005f8 <__aeabi_dmul>
 8008be2:	4603      	mov	r3, r0
 8008be4:	460c      	mov	r4, r1
 8008be6:	4698      	mov	r8, r3
 8008be8:	46a1      	mov	r9, r4
 8008bea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008bf2:	f7f7 fb49 	bl	8000288 <__aeabi_dsub>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	460c      	mov	r4, r1
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	4623      	mov	r3, r4
 8008bfe:	4640      	mov	r0, r8
 8008c00:	4649      	mov	r1, r9
 8008c02:	f7f7 fcf9 	bl	80005f8 <__aeabi_dmul>
 8008c06:	4603      	mov	r3, r0
 8008c08:	460c      	mov	r4, r1
 8008c0a:	4698      	mov	r8, r3
 8008c0c:	46a1      	mov	r9, r4
 8008c0e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008c12:	4602      	mov	r2, r0
 8008c14:	460b      	mov	r3, r1
 8008c16:	f7f7 fb39 	bl	800028c <__adddf3>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	460c      	mov	r4, r1
 8008c1e:	461a      	mov	r2, r3
 8008c20:	4623      	mov	r3, r4
 8008c22:	4640      	mov	r0, r8
 8008c24:	4649      	mov	r1, r9
 8008c26:	f7f7 fe11 	bl	800084c <__aeabi_ddiv>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	460c      	mov	r4, r1
 8008c2e:	461a      	mov	r2, r3
 8008c30:	4623      	mov	r3, r4
 8008c32:	4628      	mov	r0, r5
 8008c34:	4631      	mov	r1, r6
 8008c36:	f7f7 fb27 	bl	8000288 <__aeabi_dsub>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	460c      	mov	r4, r1
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 8008c3e:	68fa      	ldr	r2, [r7, #12]
 8008c40:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8008c44:	e013      	b.n	8008c6e <scaraFlowLSPB1+0x32a>
	} else {
		lspb->a_current 	=	0;
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	f04f 0300 	mov.w	r3, #0
 8008c4c:	f04f 0400 	mov.w	r4, #0
 8008c50:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	0;
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	f04f 0300 	mov.w	r3, #0
 8008c5a:	f04f 0400 	mov.w	r4, #0
 8008c5e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	372c      	adds	r7, #44	; 0x2c
 8008c74:	46bd      	mov	sp, r7
 8008c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c7a:	bf00      	nop
 8008c7c:	3fe00000 	.word	0x3fe00000

08008c80 <scaraFlowGCODE>:
SCARA_StatusTypeDef	scaraFlowGCODE(double *s, double time)
{
 8008c80:	b5b0      	push	{r4, r5, r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	ed87 0b00 	vstr	d0, [r7]
	if ( 0.0f <= time && time <= time_acc) {
 8008c8c:	f04f 0200 	mov.w	r2, #0
 8008c90:	f04f 0300 	mov.w	r3, #0
 8008c94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c98:	f7f7 ff34 	bl	8000b04 <__aeabi_dcmpge>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d020      	beq.n	8008ce4 <scaraFlowGCODE+0x64>
 8008ca2:	4b67      	ldr	r3, [pc, #412]	; (8008e40 <scaraFlowGCODE+0x1c0>)
 8008ca4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ca8:	461a      	mov	r2, r3
 8008caa:	4623      	mov	r3, r4
 8008cac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cb0:	f7f7 ff1e 	bl	8000af0 <__aeabi_dcmple>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d014      	beq.n	8008ce4 <scaraFlowGCODE+0x64>
		*s = acc0*time*time;
 8008cba:	4b62      	ldr	r3, [pc, #392]	; (8008e44 <scaraFlowGCODE+0x1c4>)
 8008cbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cc4:	f7f7 fc98 	bl	80005f8 <__aeabi_dmul>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	460c      	mov	r4, r1
 8008ccc:	4618      	mov	r0, r3
 8008cce:	4621      	mov	r1, r4
 8008cd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cd4:	f7f7 fc90 	bl	80005f8 <__aeabi_dmul>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	460c      	mov	r4, r1
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	e9c2 3400 	strd	r3, r4, [r2]
 8008ce2:	e0a8      	b.n	8008e36 <scaraFlowGCODE+0x1b6>
	// Constant velocity
	} else if (time_acc < time && time <= time_dec) {
 8008ce4:	4b56      	ldr	r3, [pc, #344]	; (8008e40 <scaraFlowGCODE+0x1c0>)
 8008ce6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008cea:	461a      	mov	r2, r3
 8008cec:	4623      	mov	r3, r4
 8008cee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cf2:	f7f7 ff11 	bl	8000b18 <__aeabi_dcmpgt>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d023      	beq.n	8008d44 <scaraFlowGCODE+0xc4>
 8008cfc:	4b52      	ldr	r3, [pc, #328]	; (8008e48 <scaraFlowGCODE+0x1c8>)
 8008cfe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d02:	461a      	mov	r2, r3
 8008d04:	4623      	mov	r3, r4
 8008d06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d0a:	f7f7 fef1 	bl	8000af0 <__aeabi_dcmple>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d017      	beq.n	8008d44 <scaraFlowGCODE+0xc4>
		*s = constant[0]*time + constant[1];
 8008d14:	4b4d      	ldr	r3, [pc, #308]	; (8008e4c <scaraFlowGCODE+0x1cc>)
 8008d16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d1e:	f7f7 fc6b 	bl	80005f8 <__aeabi_dmul>
 8008d22:	4603      	mov	r3, r0
 8008d24:	460c      	mov	r4, r1
 8008d26:	4618      	mov	r0, r3
 8008d28:	4621      	mov	r1, r4
 8008d2a:	4b48      	ldr	r3, [pc, #288]	; (8008e4c <scaraFlowGCODE+0x1cc>)
 8008d2c:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8008d30:	461a      	mov	r2, r3
 8008d32:	4623      	mov	r3, r4
 8008d34:	f7f7 faaa 	bl	800028c <__adddf3>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	e9c2 3400 	strd	r3, r4, [r2]
 8008d42:	e078      	b.n	8008e36 <scaraFlowGCODE+0x1b6>
	// Decelerate
	} else if (time_dec < time && time <= time_move) {
 8008d44:	4b40      	ldr	r3, [pc, #256]	; (8008e48 <scaraFlowGCODE+0x1c8>)
 8008d46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	4623      	mov	r3, r4
 8008d4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d52:	f7f7 fee1 	bl	8000b18 <__aeabi_dcmpgt>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d03c      	beq.n	8008dd6 <scaraFlowGCODE+0x156>
 8008d5c:	4b3c      	ldr	r3, [pc, #240]	; (8008e50 <scaraFlowGCODE+0x1d0>)
 8008d5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d62:	461a      	mov	r2, r3
 8008d64:	4623      	mov	r3, r4
 8008d66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d6a:	f7f7 fec1 	bl	8000af0 <__aeabi_dcmple>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d030      	beq.n	8008dd6 <scaraFlowGCODE+0x156>
		*s = deacc[0]*time*time + deacc[1]*time + deacc[2];
 8008d74:	4b37      	ldr	r3, [pc, #220]	; (8008e54 <scaraFlowGCODE+0x1d4>)
 8008d76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d7e:	f7f7 fc3b 	bl	80005f8 <__aeabi_dmul>
 8008d82:	4603      	mov	r3, r0
 8008d84:	460c      	mov	r4, r1
 8008d86:	4618      	mov	r0, r3
 8008d88:	4621      	mov	r1, r4
 8008d8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d8e:	f7f7 fc33 	bl	80005f8 <__aeabi_dmul>
 8008d92:	4603      	mov	r3, r0
 8008d94:	460c      	mov	r4, r1
 8008d96:	4625      	mov	r5, r4
 8008d98:	461c      	mov	r4, r3
 8008d9a:	4b2e      	ldr	r3, [pc, #184]	; (8008e54 <scaraFlowGCODE+0x1d4>)
 8008d9c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008da0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008da4:	f7f7 fc28 	bl	80005f8 <__aeabi_dmul>
 8008da8:	4602      	mov	r2, r0
 8008daa:	460b      	mov	r3, r1
 8008dac:	4620      	mov	r0, r4
 8008dae:	4629      	mov	r1, r5
 8008db0:	f7f7 fa6c 	bl	800028c <__adddf3>
 8008db4:	4603      	mov	r3, r0
 8008db6:	460c      	mov	r4, r1
 8008db8:	4618      	mov	r0, r3
 8008dba:	4621      	mov	r1, r4
 8008dbc:	4b25      	ldr	r3, [pc, #148]	; (8008e54 <scaraFlowGCODE+0x1d4>)
 8008dbe:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	4623      	mov	r3, r4
 8008dc6:	f7f7 fa61 	bl	800028c <__adddf3>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	460c      	mov	r4, r1
 8008dce:	68fa      	ldr	r2, [r7, #12]
 8008dd0:	e9c2 3400 	strd	r3, r4, [r2]
 8008dd4:	e02f      	b.n	8008e36 <scaraFlowGCODE+0x1b6>
	} else {
		*s = deacc[0]*time*time + deacc[1]*time + deacc[2];
 8008dd6:	4b1f      	ldr	r3, [pc, #124]	; (8008e54 <scaraFlowGCODE+0x1d4>)
 8008dd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008de0:	f7f7 fc0a 	bl	80005f8 <__aeabi_dmul>
 8008de4:	4603      	mov	r3, r0
 8008de6:	460c      	mov	r4, r1
 8008de8:	4618      	mov	r0, r3
 8008dea:	4621      	mov	r1, r4
 8008dec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008df0:	f7f7 fc02 	bl	80005f8 <__aeabi_dmul>
 8008df4:	4603      	mov	r3, r0
 8008df6:	460c      	mov	r4, r1
 8008df8:	4625      	mov	r5, r4
 8008dfa:	461c      	mov	r4, r3
 8008dfc:	4b15      	ldr	r3, [pc, #84]	; (8008e54 <scaraFlowGCODE+0x1d4>)
 8008dfe:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008e02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e06:	f7f7 fbf7 	bl	80005f8 <__aeabi_dmul>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	4620      	mov	r0, r4
 8008e10:	4629      	mov	r1, r5
 8008e12:	f7f7 fa3b 	bl	800028c <__adddf3>
 8008e16:	4603      	mov	r3, r0
 8008e18:	460c      	mov	r4, r1
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	4621      	mov	r1, r4
 8008e1e:	4b0d      	ldr	r3, [pc, #52]	; (8008e54 <scaraFlowGCODE+0x1d4>)
 8008e20:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8008e24:	461a      	mov	r2, r3
 8008e26:	4623      	mov	r3, r4
 8008e28:	f7f7 fa30 	bl	800028c <__adddf3>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	460c      	mov	r4, r1
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	e9c2 3400 	strd	r3, r4, [r2]
	}
	return SCARA_STATUS_OK;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8008e40:	20006f38 	.word	0x20006f38
 8008e44:	2000dcf8 	.word	0x2000dcf8
 8008e48:	20006f58 	.word	0x20006f58
 8008e4c:	20006f68 	.word	0x20006f68
 8008e50:	20006f90 	.word	0x20006f90
 8008e54:	20006f40 	.word	0x20006f40

08008e58 <scaraFLowScurve1>:
SCARA_StatusTypeDef	scaraFLowScurve1(Trajectory_Scurve_TypeDef *scurve, double t)
{
 8008e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e5c:	b08d      	sub	sp, #52	; 0x34
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	60f8      	str	r0, [r7, #12]
 8008e62:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta, vc;
	tf = scurve->Tf;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8008e6c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	ta = scurve->Ta;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8008e76:	e9c7 3408 	strd	r3, r4, [r7, #32]
	td = scurve->Td;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8008e80:	e9c7 3406 	strd	r3, r4, [r7, #24]
	vc = scurve->v_design;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8008e8a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	if ( 0.0f <= t && t <= ta) {
 8008e8e:	f04f 0200 	mov.w	r2, #0
 8008e92:	f04f 0300 	mov.w	r3, #0
 8008e96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e9a:	f7f7 fe33 	bl	8000b04 <__aeabi_dcmpge>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d027      	beq.n	8008ef4 <scaraFLowScurve1+0x9c>
 8008ea4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ea8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008eac:	f7f7 fe20 	bl	8000af0 <__aeabi_dcmple>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d01e      	beq.n	8008ef4 <scaraFLowScurve1+0x9c>
//		lspb->a_current		=	(time*vc)/ta*ta;
//		lspb->v_current		=	(time*time*vc)/(2*ta*ta);
		scurve->s_current	=	t*t*t*scurve->k_1;
 8008eb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008eba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ebe:	f7f7 fb9b 	bl	80005f8 <__aeabi_dmul>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	460c      	mov	r4, r1
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	4621      	mov	r1, r4
 8008eca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ece:	f7f7 fb93 	bl	80005f8 <__aeabi_dmul>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	460c      	mov	r4, r1
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	4621      	mov	r1, r4
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	4623      	mov	r3, r4
 8008ee4:	f7f7 fb88 	bl	80005f8 <__aeabi_dmul>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	460c      	mov	r4, r1
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008ef2:	e196      	b.n	8009222 <scaraFLowScurve1+0x3ca>
	// Constant velocity
	} else if (ta < t && t <= 2*ta) {
 8008ef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ef8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008efc:	f7f7 fdee 	bl	8000adc <__aeabi_dcmplt>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d06d      	beq.n	8008fe2 <scaraFLowScurve1+0x18a>
 8008f06:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	f7f7 f9bd 	bl	800028c <__adddf3>
 8008f12:	4603      	mov	r3, r0
 8008f14:	460c      	mov	r4, r1
 8008f16:	461a      	mov	r2, r3
 8008f18:	4623      	mov	r3, r4
 8008f1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f1e:	f7f7 fde7 	bl	8000af0 <__aeabi_dcmple>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d05c      	beq.n	8008fe2 <scaraFLowScurve1+0x18a>
//		scurve->a_current   =	-(vc*(time - 2*ta))/(ta*ta);
//		scurve->v_current   =	vc/2 - (vc*(time - ta)*(time - 3*ta))/(2*ta*ta);
		scurve->s_current   =	-(t*t*t - t*t*scurve->k_3 + t*scurve->k_4 - scurve->k_2)*scurve->k_1;
 8008f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f30:	f7f7 fb62 	bl	80005f8 <__aeabi_dmul>
 8008f34:	4603      	mov	r3, r0
 8008f36:	460c      	mov	r4, r1
 8008f38:	4618      	mov	r0, r3
 8008f3a:	4621      	mov	r1, r4
 8008f3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f40:	f7f7 fb5a 	bl	80005f8 <__aeabi_dmul>
 8008f44:	4603      	mov	r3, r0
 8008f46:	460c      	mov	r4, r1
 8008f48:	4698      	mov	r8, r3
 8008f4a:	46a1      	mov	r9, r4
 8008f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f54:	f7f7 fb50 	bl	80005f8 <__aeabi_dmul>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	460c      	mov	r4, r1
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	4621      	mov	r1, r4
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8008f66:	461a      	mov	r2, r3
 8008f68:	4623      	mov	r3, r4
 8008f6a:	f7f7 fb45 	bl	80005f8 <__aeabi_dmul>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	460c      	mov	r4, r1
 8008f72:	461a      	mov	r2, r3
 8008f74:	4623      	mov	r3, r4
 8008f76:	4640      	mov	r0, r8
 8008f78:	4649      	mov	r1, r9
 8008f7a:	f7f7 f985 	bl	8000288 <__aeabi_dsub>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	460c      	mov	r4, r1
 8008f82:	4698      	mov	r8, r3
 8008f84:	46a1      	mov	r9, r4
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 8008f8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f90:	f7f7 fb32 	bl	80005f8 <__aeabi_dmul>
 8008f94:	4603      	mov	r3, r0
 8008f96:	460c      	mov	r4, r1
 8008f98:	461a      	mov	r2, r3
 8008f9a:	4623      	mov	r3, r4
 8008f9c:	4640      	mov	r0, r8
 8008f9e:	4649      	mov	r1, r9
 8008fa0:	f7f7 f974 	bl	800028c <__adddf3>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	460c      	mov	r4, r1
 8008fa8:	4618      	mov	r0, r3
 8008faa:	4621      	mov	r1, r4
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	4623      	mov	r3, r4
 8008fb6:	f7f7 f967 	bl	8000288 <__aeabi_dsub>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	460c      	mov	r4, r1
 8008fbe:	461d      	mov	r5, r3
 8008fc0:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8008fca:	461a      	mov	r2, r3
 8008fcc:	4623      	mov	r3, r4
 8008fce:	4628      	mov	r0, r5
 8008fd0:	4631      	mov	r1, r6
 8008fd2:	f7f7 fb11 	bl	80005f8 <__aeabi_dmul>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	460c      	mov	r4, r1
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008fe0:	e11f      	b.n	8009222 <scaraFLowScurve1+0x3ca>
	// Decelerate
	} else if (2*ta < t && t <= td - ta) {
 8008fe2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	460b      	mov	r3, r1
 8008fea:	f7f7 f94f 	bl	800028c <__adddf3>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	460c      	mov	r4, r1
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	4623      	mov	r3, r4
 8008ff6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ffa:	f7f7 fd8d 	bl	8000b18 <__aeabi_dcmpgt>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d024      	beq.n	800904e <scaraFLowScurve1+0x1f6>
 8009004:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009008:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800900c:	f7f7 f93c 	bl	8000288 <__aeabi_dsub>
 8009010:	4603      	mov	r3, r0
 8009012:	460c      	mov	r4, r1
 8009014:	461a      	mov	r2, r3
 8009016:	4623      	mov	r3, r4
 8009018:	e9d7 0100 	ldrd	r0, r1, [r7]
 800901c:	f7f7 fd68 	bl	8000af0 <__aeabi_dcmple>
 8009020:	4603      	mov	r3, r0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d013      	beq.n	800904e <scaraFLowScurve1+0x1f6>
//		scurve->a_current   =	0;
//		scurve->v_current   =	v_design;
		scurve->s_current   =	vc*(t - ta);
 8009026:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800902a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800902e:	f7f7 f92b 	bl	8000288 <__aeabi_dsub>
 8009032:	4603      	mov	r3, r0
 8009034:	460c      	mov	r4, r1
 8009036:	4618      	mov	r0, r3
 8009038:	4621      	mov	r1, r4
 800903a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800903e:	f7f7 fadb 	bl	80005f8 <__aeabi_dmul>
 8009042:	4603      	mov	r3, r0
 8009044:	460c      	mov	r4, r1
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800904c:	e0e9      	b.n	8009222 <scaraFLowScurve1+0x3ca>
	} else if(td-ta < t && t <= td){
 800904e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009052:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009056:	f7f7 f917 	bl	8000288 <__aeabi_dsub>
 800905a:	4603      	mov	r3, r0
 800905c:	460c      	mov	r4, r1
 800905e:	461a      	mov	r2, r3
 8009060:	4623      	mov	r3, r4
 8009062:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009066:	f7f7 fd57 	bl	8000b18 <__aeabi_dcmpgt>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	f000 8089 	beq.w	8009184 <scaraFLowScurve1+0x32c>
 8009072:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009076:	e9d7 0100 	ldrd	r0, r1, [r7]
 800907a:	f7f7 fd39 	bl	8000af0 <__aeabi_dcmple>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d07f      	beq.n	8009184 <scaraFLowScurve1+0x32c>
//		scurve->a_current 	=	-(vc*(t - td + ta))/ta^2;
//		scurve->v_current   =	vc/2 - (vc*(t + ta - tf)*(t + 3*ta - tf))/(2*ta*ta);
		scurve->s_current   =	scurve->total_s - (ta*vc)/3 - vc*(t - tf) - (t-tf)*(t-tf)*(t + scurve->k_3 - tf)*scurve->k_1;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 800908a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800908e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009092:	f7f7 fab1 	bl	80005f8 <__aeabi_dmul>
 8009096:	4602      	mov	r2, r0
 8009098:	460b      	mov	r3, r1
 800909a:	4610      	mov	r0, r2
 800909c:	4619      	mov	r1, r3
 800909e:	f04f 0200 	mov.w	r2, #0
 80090a2:	4b63      	ldr	r3, [pc, #396]	; (8009230 <scaraFLowScurve1+0x3d8>)
 80090a4:	f7f7 fbd2 	bl	800084c <__aeabi_ddiv>
 80090a8:	4602      	mov	r2, r0
 80090aa:	460b      	mov	r3, r1
 80090ac:	4620      	mov	r0, r4
 80090ae:	4629      	mov	r1, r5
 80090b0:	f7f7 f8ea 	bl	8000288 <__aeabi_dsub>
 80090b4:	4603      	mov	r3, r0
 80090b6:	460c      	mov	r4, r1
 80090b8:	4625      	mov	r5, r4
 80090ba:	461c      	mov	r4, r3
 80090bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80090c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090c4:	f7f7 f8e0 	bl	8000288 <__aeabi_dsub>
 80090c8:	4602      	mov	r2, r0
 80090ca:	460b      	mov	r3, r1
 80090cc:	4610      	mov	r0, r2
 80090ce:	4619      	mov	r1, r3
 80090d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80090d4:	f7f7 fa90 	bl	80005f8 <__aeabi_dmul>
 80090d8:	4602      	mov	r2, r0
 80090da:	460b      	mov	r3, r1
 80090dc:	4620      	mov	r0, r4
 80090de:	4629      	mov	r1, r5
 80090e0:	f7f7 f8d2 	bl	8000288 <__aeabi_dsub>
 80090e4:	4603      	mov	r3, r0
 80090e6:	460c      	mov	r4, r1
 80090e8:	461d      	mov	r5, r3
 80090ea:	4626      	mov	r6, r4
 80090ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80090f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090f4:	f7f7 f8c8 	bl	8000288 <__aeabi_dsub>
 80090f8:	4603      	mov	r3, r0
 80090fa:	460c      	mov	r4, r1
 80090fc:	4698      	mov	r8, r3
 80090fe:	46a1      	mov	r9, r4
 8009100:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009104:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009108:	f7f7 f8be 	bl	8000288 <__aeabi_dsub>
 800910c:	4603      	mov	r3, r0
 800910e:	460c      	mov	r4, r1
 8009110:	461a      	mov	r2, r3
 8009112:	4623      	mov	r3, r4
 8009114:	4640      	mov	r0, r8
 8009116:	4649      	mov	r1, r9
 8009118:	f7f7 fa6e 	bl	80005f8 <__aeabi_dmul>
 800911c:	4603      	mov	r3, r0
 800911e:	460c      	mov	r4, r1
 8009120:	4698      	mov	r8, r3
 8009122:	46a1      	mov	r9, r4
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 800912a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800912e:	f7f7 f8ad 	bl	800028c <__adddf3>
 8009132:	4603      	mov	r3, r0
 8009134:	460c      	mov	r4, r1
 8009136:	4618      	mov	r0, r3
 8009138:	4621      	mov	r1, r4
 800913a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800913e:	f7f7 f8a3 	bl	8000288 <__aeabi_dsub>
 8009142:	4603      	mov	r3, r0
 8009144:	460c      	mov	r4, r1
 8009146:	461a      	mov	r2, r3
 8009148:	4623      	mov	r3, r4
 800914a:	4640      	mov	r0, r8
 800914c:	4649      	mov	r1, r9
 800914e:	f7f7 fa53 	bl	80005f8 <__aeabi_dmul>
 8009152:	4603      	mov	r3, r0
 8009154:	460c      	mov	r4, r1
 8009156:	4618      	mov	r0, r3
 8009158:	4621      	mov	r1, r4
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8009160:	461a      	mov	r2, r3
 8009162:	4623      	mov	r3, r4
 8009164:	f7f7 fa48 	bl	80005f8 <__aeabi_dmul>
 8009168:	4603      	mov	r3, r0
 800916a:	460c      	mov	r4, r1
 800916c:	461a      	mov	r2, r3
 800916e:	4623      	mov	r3, r4
 8009170:	4628      	mov	r0, r5
 8009172:	4631      	mov	r1, r6
 8009174:	f7f7 f888 	bl	8000288 <__aeabi_dsub>
 8009178:	4603      	mov	r3, r0
 800917a:	460c      	mov	r4, r1
 800917c:	68fa      	ldr	r2, [r7, #12]
 800917e:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009182:	e04e      	b.n	8009222 <scaraFLowScurve1+0x3ca>
	} else if(td < t && t <= tf){
 8009184:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009188:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800918c:	f7f7 fca6 	bl	8000adc <__aeabi_dcmplt>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d045      	beq.n	8009222 <scaraFLowScurve1+0x3ca>
 8009196:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800919a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800919e:	f7f7 fca7 	bl	8000af0 <__aeabi_dcmple>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d03c      	beq.n	8009222 <scaraFLowScurve1+0x3ca>
//		scurve->a_current 	=	-(vc*(ta - t + td))/(ta*ta);
//		scurve->v_current   =	(vc*(t - tf)*(t-tf))/(2*ta*ta);
		scurve->s_current   =	scurve->total_s + (t-tf)*(t-tf)*(t-tf)*scurve->k_1;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 80091ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80091b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091b6:	f7f7 f867 	bl	8000288 <__aeabi_dsub>
 80091ba:	4602      	mov	r2, r0
 80091bc:	460b      	mov	r3, r1
 80091be:	4690      	mov	r8, r2
 80091c0:	4699      	mov	r9, r3
 80091c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80091c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091ca:	f7f7 f85d 	bl	8000288 <__aeabi_dsub>
 80091ce:	4602      	mov	r2, r0
 80091d0:	460b      	mov	r3, r1
 80091d2:	4640      	mov	r0, r8
 80091d4:	4649      	mov	r1, r9
 80091d6:	f7f7 fa0f 	bl	80005f8 <__aeabi_dmul>
 80091da:	4602      	mov	r2, r0
 80091dc:	460b      	mov	r3, r1
 80091de:	4690      	mov	r8, r2
 80091e0:	4699      	mov	r9, r3
 80091e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80091e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091ea:	f7f7 f84d 	bl	8000288 <__aeabi_dsub>
 80091ee:	4602      	mov	r2, r0
 80091f0:	460b      	mov	r3, r1
 80091f2:	4640      	mov	r0, r8
 80091f4:	4649      	mov	r1, r9
 80091f6:	f7f7 f9ff 	bl	80005f8 <__aeabi_dmul>
 80091fa:	4602      	mov	r2, r0
 80091fc:	460b      	mov	r3, r1
 80091fe:	4610      	mov	r0, r2
 8009200:	4619      	mov	r1, r3
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8009208:	f7f7 f9f6 	bl	80005f8 <__aeabi_dmul>
 800920c:	4602      	mov	r2, r0
 800920e:	460b      	mov	r3, r1
 8009210:	4620      	mov	r0, r4
 8009212:	4629      	mov	r1, r5
 8009214:	f7f7 f83a 	bl	800028c <__adddf3>
 8009218:	4603      	mov	r3, r0
 800921a:	460c      	mov	r4, r1
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	}

	return SCARA_STATUS_OK;
 8009222:	2300      	movs	r3, #0
}
 8009224:	4618      	mov	r0, r3
 8009226:	3734      	adds	r7, #52	; 0x34
 8009228:	46bd      	mov	sp, r7
 800922a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800922e:	bf00      	nop
 8009230:	40080000 	.word	0x40080000
 8009234:	00000000 	.word	0x00000000

08009238 <scaraInitLSPB>:
SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8009238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800923c:	b0ad      	sub	sp, #180	; 0xb4
 800923e:	af00      	add	r7, sp, #0
 8009240:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009242:	460b      	mov	r3, r1
 8009244:	ed87 0b08 	vstr	d0, [r7, #32]
 8009248:	ed87 1b06 	vstr	d1, [r7, #24]
 800924c:	ed87 2b04 	vstr	d2, [r7, #16]
 8009250:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009254:	4613      	mov	r3, r2
 8009256:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 800925a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800925e:	2b04      	cmp	r3, #4
 8009260:	d118      	bne.n	8009294 <scaraInitLSPB+0x5c>
		 v_design = V_DESIGN_3D*v_factor;
 8009262:	f20f 7368 	addw	r3, pc, #1896	; 0x768
 8009266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800926e:	f7f7 f9c3 	bl	80005f8 <__aeabi_dmul>
 8009272:	4603      	mov	r3, r0
 8009274:	460c      	mov	r4, r1
 8009276:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_3D*a_factor;
 800927a:	f20f 7350 	addw	r3, pc, #1872	; 0x750
 800927e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009282:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009286:	f7f7 f9b7 	bl	80005f8 <__aeabi_dmul>
 800928a:	4603      	mov	r3, r0
 800928c:	460c      	mov	r4, r1
 800928e:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8009292:	e092      	b.n	80093ba <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_ROLL == target) {
 8009294:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009298:	2b05      	cmp	r3, #5
 800929a:	d118      	bne.n	80092ce <scaraInitLSPB+0x96>
		 v_design = V_DESIGN_ROLL*v_factor;
 800929c:	f20f 7334 	addw	r3, pc, #1844	; 0x734
 80092a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80092a8:	f7f7 f9a6 	bl	80005f8 <__aeabi_dmul>
 80092ac:	4603      	mov	r3, r0
 80092ae:	460c      	mov	r4, r1
 80092b0:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_ROLL*a_factor;
 80092b4:	f20f 731c 	addw	r3, pc, #1820	; 0x71c
 80092b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80092c0:	f7f7 f99a 	bl	80005f8 <__aeabi_dmul>
 80092c4:	4603      	mov	r3, r0
 80092c6:	460c      	mov	r4, r1
 80092c8:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80092cc:	e075      	b.n	80093ba <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J0 == target) {
 80092ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d118      	bne.n	8009308 <scaraInitLSPB+0xd0>
		 v_design = V_DESIGN_J0*v_factor;
 80092d6:	f20f 63fc 	addw	r3, pc, #1788	; 0x6fc
 80092da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80092e2:	f7f7 f989 	bl	80005f8 <__aeabi_dmul>
 80092e6:	4603      	mov	r3, r0
 80092e8:	460c      	mov	r4, r1
 80092ea:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J0*a_factor;
 80092ee:	f20f 63e4 	addw	r3, pc, #1764	; 0x6e4
 80092f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80092fa:	f7f7 f97d 	bl	80005f8 <__aeabi_dmul>
 80092fe:	4603      	mov	r3, r0
 8009300:	460c      	mov	r4, r1
 8009302:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8009306:	e058      	b.n	80093ba <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J1 == target) {
 8009308:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800930c:	2b01      	cmp	r3, #1
 800930e:	d118      	bne.n	8009342 <scaraInitLSPB+0x10a>
		 v_design = V_DESIGN_J1*v_factor;
 8009310:	f20f 63c0 	addw	r3, pc, #1728	; 0x6c0
 8009314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009318:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800931c:	f7f7 f96c 	bl	80005f8 <__aeabi_dmul>
 8009320:	4603      	mov	r3, r0
 8009322:	460c      	mov	r4, r1
 8009324:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J1*a_factor;
 8009328:	f20f 63a8 	addw	r3, pc, #1704	; 0x6a8
 800932c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009330:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009334:	f7f7 f960 	bl	80005f8 <__aeabi_dmul>
 8009338:	4603      	mov	r3, r0
 800933a:	460c      	mov	r4, r1
 800933c:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8009340:	e03b      	b.n	80093ba <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J2 == target) {
 8009342:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009346:	2b02      	cmp	r3, #2
 8009348:	d118      	bne.n	800937c <scaraInitLSPB+0x144>
		 v_design = V_DESIGN_J2*v_factor;
 800934a:	f20f 6380 	addw	r3, pc, #1664	; 0x680
 800934e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009352:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009356:	f7f7 f94f 	bl	80005f8 <__aeabi_dmul>
 800935a:	4603      	mov	r3, r0
 800935c:	460c      	mov	r4, r1
 800935e:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J2*a_factor;
 8009362:	f20f 6368 	addw	r3, pc, #1640	; 0x668
 8009366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800936e:	f7f7 f943 	bl	80005f8 <__aeabi_dmul>
 8009372:	4603      	mov	r3, r0
 8009374:	460c      	mov	r4, r1
 8009376:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800937a:	e01e      	b.n	80093ba <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J3 == target) {
 800937c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009380:	2b03      	cmp	r3, #3
 8009382:	d118      	bne.n	80093b6 <scaraInitLSPB+0x17e>
		 v_design = V_DESIGN_J3*v_factor;
 8009384:	f20f 6354 	addw	r3, pc, #1620	; 0x654
 8009388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009390:	f7f7 f932 	bl	80005f8 <__aeabi_dmul>
 8009394:	4603      	mov	r3, r0
 8009396:	460c      	mov	r4, r1
 8009398:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J3*a_factor;
 800939c:	f20f 633c 	addw	r3, pc, #1596	; 0x63c
 80093a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80093a8:	f7f7 f926 	bl	80005f8 <__aeabi_dmul>
 80093ac:	4603      	mov	r3, r0
 80093ae:	460c      	mov	r4, r1
 80093b0:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80093b4:	e001      	b.n	80093ba <scaraInitLSPB+0x182>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 80093b6:	2306      	movs	r3, #6
 80093b8:	e2fa      	b.n	80099b0 <scaraInitLSPB+0x778>
	 }

	 q0 = 0;
 80093ba:	f04f 0300 	mov.w	r3, #0
 80093be:	f04f 0400 	mov.w	r4, #0
 80093c2:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	 q1 = total_s;
 80093c6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80093ca:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	 v0 = 0;
 80093ce:	f04f 0300 	mov.w	r3, #0
 80093d2:	f04f 0400 	mov.w	r4, #0
 80093d6:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 v1 = 0;
 80093da:	f04f 0300 	mov.w	r3, #0
 80093de:	f04f 0400 	mov.w	r4, #0
 80093e2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

	 if ( q0 <= q1) {
 80093e6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80093ea:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80093ee:	f7f7 fb7f 	bl	8000af0 <__aeabi_dcmple>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d003      	beq.n	8009400 <scaraInitLSPB+0x1c8>
		 dir = 1;
 80093f8:	2301      	movs	r3, #1
 80093fa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80093fe:	e00c      	b.n	800941a <scaraInitLSPB+0x1e2>
	 } else {
		 dir = -1;
 8009400:	23ff      	movs	r3, #255	; 0xff
 8009402:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		 q1 = -q1;
 8009406:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800940a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800940e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009412:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009416:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 800941a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800941e:	2b01      	cmp	r3, #1
 8009420:	f040 809e 	bne.w	8009560 <scaraInitLSPB+0x328>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 8009424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009426:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 800942a:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 // Avoid division by 0
		 if (tf > 0.001) {
 800942e:	f20f 53b4 	addw	r3, pc, #1460	; 0x5b4
 8009432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009436:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800943a:	f7f7 fb6d 	bl	8000b18 <__aeabi_dcmpgt>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	f000 8081 	beq.w	8009548 <scaraInitLSPB+0x310>
			 v_lower 	= (q1 - q0) / tf;
 8009446:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800944a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800944e:	f7f6 ff1b 	bl	8000288 <__aeabi_dsub>
 8009452:	4603      	mov	r3, r0
 8009454:	460c      	mov	r4, r1
 8009456:	4618      	mov	r0, r3
 8009458:	4621      	mov	r1, r4
 800945a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800945e:	f7f7 f9f5 	bl	800084c <__aeabi_ddiv>
 8009462:	4603      	mov	r3, r0
 8009464:	460c      	mov	r4, r1
 8009466:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			 v_upper 	= 2*(q1 - q0) / tf;
 800946a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800946e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009472:	f7f6 ff09 	bl	8000288 <__aeabi_dsub>
 8009476:	4603      	mov	r3, r0
 8009478:	460c      	mov	r4, r1
 800947a:	4618      	mov	r0, r3
 800947c:	4621      	mov	r1, r4
 800947e:	4602      	mov	r2, r0
 8009480:	460b      	mov	r3, r1
 8009482:	f7f6 ff03 	bl	800028c <__adddf3>
 8009486:	4603      	mov	r3, r0
 8009488:	460c      	mov	r4, r1
 800948a:	4618      	mov	r0, r3
 800948c:	4621      	mov	r1, r4
 800948e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009492:	f7f7 f9db 	bl	800084c <__aeabi_ddiv>
 8009496:	4603      	mov	r3, r0
 8009498:	460c      	mov	r4, r1
 800949a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

			 if ( v_design < v_lower) {
 800949e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80094a2:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80094a6:	f7f7 fb19 	bl	8000adc <__aeabi_dcmplt>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d001      	beq.n	80094b4 <scaraInitLSPB+0x27c>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 80094b0:	2309      	movs	r3, #9
 80094b2:	e27d      	b.n	80099b0 <scaraInitLSPB+0x778>
			 } else {
				 if ( v_upper <= v_design) {
 80094b4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80094b8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80094bc:	f7f7 fb18 	bl	8000af0 <__aeabi_dcmple>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d003      	beq.n	80094ce <scaraInitLSPB+0x296>
					 v_design = v_upper;
 80094c6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80094ca:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 80094ce:	f20f 531c 	addw	r3, pc, #1308	; 0x51c
 80094d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d6:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80094da:	f7f7 fb1d 	bl	8000b18 <__aeabi_dcmpgt>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d01a      	beq.n	800951a <scaraInitLSPB+0x2e2>
					 tc_upper	= tf - (q1 - q0)/v_design;
 80094e4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80094e8:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80094ec:	f7f6 fecc 	bl	8000288 <__aeabi_dsub>
 80094f0:	4603      	mov	r3, r0
 80094f2:	460c      	mov	r4, r1
 80094f4:	4618      	mov	r0, r3
 80094f6:	4621      	mov	r1, r4
 80094f8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80094fc:	f7f7 f9a6 	bl	800084c <__aeabi_ddiv>
 8009500:	4603      	mov	r3, r0
 8009502:	460c      	mov	r4, r1
 8009504:	461a      	mov	r2, r3
 8009506:	4623      	mov	r3, r4
 8009508:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800950c:	f7f6 febc 	bl	8000288 <__aeabi_dsub>
 8009510:	4603      	mov	r3, r0
 8009512:	460c      	mov	r4, r1
 8009514:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
 8009518:	e00b      	b.n	8009532 <scaraInitLSPB+0x2fa>
				 } else {
					 tc_upper = tf / 2;
 800951a:	f04f 0200 	mov.w	r2, #0
 800951e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009522:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009526:	f7f7 f991 	bl	800084c <__aeabi_ddiv>
 800952a:	4603      	mov	r3, r0
 800952c:	460c      	mov	r4, r1
 800952e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				 }
				 a_upper	= v_design/tc_upper;
 8009532:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009536:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800953a:	f7f7 f987 	bl	800084c <__aeabi_ddiv>
 800953e:	4603      	mov	r3, r0
 8009540:	460c      	mov	r4, r1
 8009542:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 8009546:	e00b      	b.n	8009560 <scaraInitLSPB+0x328>
				//  } else {
				// 	 a_design = a_upper;
				//  }
			 }
		 } else {
			 v_design = 0;
 8009548:	f04f 0300 	mov.w	r3, #0
 800954c:	f04f 0400 	mov.w	r4, #0
 8009550:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
			 a_design = 0;
 8009554:	f04f 0300 	mov.w	r3, #0
 8009558:	f04f 0400 	mov.w	r4, #0
 800955c:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8009560:	f20f 4388 	addw	r3, pc, #1160	; 0x488
 8009564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009568:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800956c:	f7f7 fad4 	bl	8000b18 <__aeabi_dcmpgt>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	f000 819c 	beq.w	80098b0 <scaraInitLSPB+0x678>
 8009578:	f20f 4370 	addw	r3, pc, #1136	; 0x470
 800957c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009580:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009584:	f7f7 fac8 	bl	8000b18 <__aeabi_dcmpgt>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	f000 8190 	beq.w	80098b0 <scaraInitLSPB+0x678>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8009590:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009594:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009598:	f7f6 fe76 	bl	8000288 <__aeabi_dsub>
 800959c:	4603      	mov	r3, r0
 800959e:	460c      	mov	r4, r1
 80095a0:	461d      	mov	r5, r3
 80095a2:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 80095a6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80095aa:	4628      	mov	r0, r5
 80095ac:	4631      	mov	r1, r6
 80095ae:	f7f7 f823 	bl	80005f8 <__aeabi_dmul>
 80095b2:	4603      	mov	r3, r0
 80095b4:	460c      	mov	r4, r1
 80095b6:	e9c7 3402 	strd	r3, r4, [r7, #8]
 80095ba:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80095be:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80095c2:	f7f7 f819 	bl	80005f8 <__aeabi_dmul>
 80095c6:	4603      	mov	r3, r0
 80095c8:	460c      	mov	r4, r1
 80095ca:	e9c7 3400 	strd	r3, r4, [r7]
 80095ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80095d2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80095d6:	f7f7 f80f 	bl	80005f8 <__aeabi_dmul>
 80095da:	4603      	mov	r3, r0
 80095dc:	460c      	mov	r4, r1
 80095de:	461d      	mov	r5, r3
 80095e0:	4626      	mov	r6, r4
 80095e2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80095e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80095ea:	f7f7 f805 	bl	80005f8 <__aeabi_dmul>
 80095ee:	4603      	mov	r3, r0
 80095f0:	460c      	mov	r4, r1
 80095f2:	461a      	mov	r2, r3
 80095f4:	4623      	mov	r3, r4
 80095f6:	4628      	mov	r0, r5
 80095f8:	4631      	mov	r1, r6
 80095fa:	f7f6 fe47 	bl	800028c <__adddf3>
 80095fe:	4603      	mov	r3, r0
 8009600:	460c      	mov	r4, r1
 8009602:	4618      	mov	r0, r3
 8009604:	4621      	mov	r1, r4
 8009606:	f04f 0200 	mov.w	r2, #0
 800960a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800960e:	f7f7 f91d 	bl	800084c <__aeabi_ddiv>
 8009612:	4603      	mov	r3, r0
 8009614:	460c      	mov	r4, r1
 8009616:	461a      	mov	r2, r3
 8009618:	4623      	mov	r3, r4
 800961a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800961e:	f7f6 fe33 	bl	8000288 <__aeabi_dsub>
 8009622:	4603      	mov	r3, r0
 8009624:	460c      	mov	r4, r1
 8009626:	461a      	mov	r2, r3
 8009628:	4623      	mov	r3, r4
 800962a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800962e:	f7f7 fa5f 	bl	8000af0 <__aeabi_dcmple>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d075      	beq.n	8009724 <scaraInitLSPB+0x4ec>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 8009638:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800963c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009640:	f7f6 fe22 	bl	8000288 <__aeabi_dsub>
 8009644:	4603      	mov	r3, r0
 8009646:	460c      	mov	r4, r1
 8009648:	469a      	mov	sl, r3
 800964a:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 800964e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009652:	4650      	mov	r0, sl
 8009654:	4659      	mov	r1, fp
 8009656:	f7f6 ffcf 	bl	80005f8 <__aeabi_dmul>
 800965a:	4603      	mov	r3, r0
 800965c:	460c      	mov	r4, r1
 800965e:	4625      	mov	r5, r4
 8009660:	461c      	mov	r4, r3
 8009662:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009666:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800966a:	f7f6 ffc5 	bl	80005f8 <__aeabi_dmul>
 800966e:	4602      	mov	r2, r0
 8009670:	460b      	mov	r3, r1
 8009672:	4690      	mov	r8, r2
 8009674:	4699      	mov	r9, r3
 8009676:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800967a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800967e:	f7f6 ffbb 	bl	80005f8 <__aeabi_dmul>
 8009682:	4602      	mov	r2, r0
 8009684:	460b      	mov	r3, r1
 8009686:	4640      	mov	r0, r8
 8009688:	4649      	mov	r1, r9
 800968a:	f7f6 fdff 	bl	800028c <__adddf3>
 800968e:	4602      	mov	r2, r0
 8009690:	460b      	mov	r3, r1
 8009692:	4610      	mov	r0, r2
 8009694:	4619      	mov	r1, r3
 8009696:	f04f 0200 	mov.w	r2, #0
 800969a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800969e:	f7f7 f8d5 	bl	800084c <__aeabi_ddiv>
 80096a2:	4602      	mov	r2, r0
 80096a4:	460b      	mov	r3, r1
 80096a6:	4620      	mov	r0, r4
 80096a8:	4629      	mov	r1, r5
 80096aa:	f7f6 fdef 	bl	800028c <__adddf3>
 80096ae:	4603      	mov	r3, r0
 80096b0:	460c      	mov	r4, r1
 80096b2:	ec44 3b17 	vmov	d7, r3, r4
 80096b6:	eeb0 0a47 	vmov.f32	s0, s14
 80096ba:	eef0 0a67 	vmov.f32	s1, s15
 80096be:	f010 fa55 	bl	8019b6c <sqrt>
 80096c2:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 80096c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80096ca:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80096ce:	f7f6 fddb 	bl	8000288 <__aeabi_dsub>
 80096d2:	4603      	mov	r3, r0
 80096d4:	460c      	mov	r4, r1
 80096d6:	4618      	mov	r0, r3
 80096d8:	4621      	mov	r1, r4
 80096da:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80096de:	f7f7 f8b5 	bl	800084c <__aeabi_ddiv>
 80096e2:	4603      	mov	r3, r0
 80096e4:	460c      	mov	r4, r1
 80096e6:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 80096ea:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80096ee:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80096f2:	f7f6 fdc9 	bl	8000288 <__aeabi_dsub>
 80096f6:	4603      	mov	r3, r0
 80096f8:	460c      	mov	r4, r1
 80096fa:	4618      	mov	r0, r3
 80096fc:	4621      	mov	r1, r4
 80096fe:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009702:	f7f7 f8a3 	bl	800084c <__aeabi_ddiv>
 8009706:	4603      	mov	r3, r0
 8009708:	460c      	mov	r4, r1
 800970a:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= ta + td;
 800970e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009712:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8009716:	f7f6 fdb9 	bl	800028c <__adddf3>
 800971a:	4603      	mov	r3, r0
 800971c:	460c      	mov	r4, r1
 800971e:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8009722:	e0e3      	b.n	80098ec <scaraInitLSPB+0x6b4>
		 } else {
			 v_lim	= v_design;
 8009724:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8009728:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 800972c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009730:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009734:	f7f6 fda8 	bl	8000288 <__aeabi_dsub>
 8009738:	4603      	mov	r3, r0
 800973a:	460c      	mov	r4, r1
 800973c:	4618      	mov	r0, r3
 800973e:	4621      	mov	r1, r4
 8009740:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009744:	f7f7 f882 	bl	800084c <__aeabi_ddiv>
 8009748:	4603      	mov	r3, r0
 800974a:	460c      	mov	r4, r1
 800974c:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8009750:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009754:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009758:	f7f6 fd96 	bl	8000288 <__aeabi_dsub>
 800975c:	4603      	mov	r3, r0
 800975e:	460c      	mov	r4, r1
 8009760:	4618      	mov	r0, r3
 8009762:	4621      	mov	r1, r4
 8009764:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009768:	f7f7 f870 	bl	800084c <__aeabi_ddiv>
 800976c:	4603      	mov	r3, r0
 800976e:	460c      	mov	r4, r1
 8009770:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8009774:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8009778:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800977c:	f7f6 fd84 	bl	8000288 <__aeabi_dsub>
 8009780:	4603      	mov	r3, r0
 8009782:	460c      	mov	r4, r1
 8009784:	4698      	mov	r8, r3
 8009786:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 800978a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800978e:	4640      	mov	r0, r8
 8009790:	4649      	mov	r1, r9
 8009792:	f7f7 f85b 	bl	800084c <__aeabi_ddiv>
 8009796:	4603      	mov	r3, r0
 8009798:	460c      	mov	r4, r1
 800979a:	4625      	mov	r5, r4
 800979c:	461c      	mov	r4, r3
 800979e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80097a2:	4602      	mov	r2, r0
 80097a4:	460b      	mov	r3, r1
 80097a6:	f7f6 fd71 	bl	800028c <__adddf3>
 80097aa:	4602      	mov	r2, r0
 80097ac:	460b      	mov	r3, r1
 80097ae:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80097b2:	f7f7 f84b 	bl	800084c <__aeabi_ddiv>
 80097b6:	4602      	mov	r2, r0
 80097b8:	460b      	mov	r3, r1
 80097ba:	4690      	mov	r8, r2
 80097bc:	4699      	mov	r9, r3
 80097be:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80097c2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80097c6:	f7f7 f841 	bl	800084c <__aeabi_ddiv>
 80097ca:	4602      	mov	r2, r0
 80097cc:	460b      	mov	r3, r1
 80097ce:	f04f 0000 	mov.w	r0, #0
 80097d2:	497d      	ldr	r1, [pc, #500]	; (80099c8 <scaraInitLSPB+0x790>)
 80097d4:	f7f6 fd58 	bl	8000288 <__aeabi_dsub>
 80097d8:	4602      	mov	r2, r0
 80097da:	460b      	mov	r3, r1
 80097dc:	4640      	mov	r0, r8
 80097de:	4649      	mov	r1, r9
 80097e0:	f7f6 ff0a 	bl	80005f8 <__aeabi_dmul>
 80097e4:	4602      	mov	r2, r0
 80097e6:	460b      	mov	r3, r1
 80097e8:	4690      	mov	r8, r2
 80097ea:	4699      	mov	r9, r3
 80097ec:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80097f0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80097f4:	f7f7 f82a 	bl	800084c <__aeabi_ddiv>
 80097f8:	4602      	mov	r2, r0
 80097fa:	460b      	mov	r3, r1
 80097fc:	f04f 0000 	mov.w	r0, #0
 8009800:	4971      	ldr	r1, [pc, #452]	; (80099c8 <scaraInitLSPB+0x790>)
 8009802:	f7f6 fd41 	bl	8000288 <__aeabi_dsub>
 8009806:	4602      	mov	r2, r0
 8009808:	460b      	mov	r3, r1
 800980a:	4640      	mov	r0, r8
 800980c:	4649      	mov	r1, r9
 800980e:	f7f6 fef3 	bl	80005f8 <__aeabi_dmul>
 8009812:	4602      	mov	r2, r0
 8009814:	460b      	mov	r3, r1
 8009816:	4620      	mov	r0, r4
 8009818:	4629      	mov	r1, r5
 800981a:	f7f6 fd37 	bl	800028c <__adddf3>
 800981e:	4603      	mov	r3, r0
 8009820:	460c      	mov	r4, r1
 8009822:	4625      	mov	r5, r4
 8009824:	461c      	mov	r4, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 8009826:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800982a:	4602      	mov	r2, r0
 800982c:	460b      	mov	r3, r1
 800982e:	f7f6 fd2d 	bl	800028c <__adddf3>
 8009832:	4602      	mov	r2, r0
 8009834:	460b      	mov	r3, r1
 8009836:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800983a:	f7f7 f807 	bl	800084c <__aeabi_ddiv>
 800983e:	4602      	mov	r2, r0
 8009840:	460b      	mov	r3, r1
 8009842:	4690      	mov	r8, r2
 8009844:	4699      	mov	r9, r3
 8009846:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800984a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800984e:	f7f6 fffd 	bl	800084c <__aeabi_ddiv>
 8009852:	4602      	mov	r2, r0
 8009854:	460b      	mov	r3, r1
 8009856:	f04f 0000 	mov.w	r0, #0
 800985a:	495b      	ldr	r1, [pc, #364]	; (80099c8 <scaraInitLSPB+0x790>)
 800985c:	f7f6 fd14 	bl	8000288 <__aeabi_dsub>
 8009860:	4602      	mov	r2, r0
 8009862:	460b      	mov	r3, r1
 8009864:	4640      	mov	r0, r8
 8009866:	4649      	mov	r1, r9
 8009868:	f7f6 fec6 	bl	80005f8 <__aeabi_dmul>
 800986c:	4602      	mov	r2, r0
 800986e:	460b      	mov	r3, r1
 8009870:	4690      	mov	r8, r2
 8009872:	4699      	mov	r9, r3
 8009874:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009878:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800987c:	f7f6 ffe6 	bl	800084c <__aeabi_ddiv>
 8009880:	4602      	mov	r2, r0
 8009882:	460b      	mov	r3, r1
 8009884:	f04f 0000 	mov.w	r0, #0
 8009888:	494f      	ldr	r1, [pc, #316]	; (80099c8 <scaraInitLSPB+0x790>)
 800988a:	f7f6 fcfd 	bl	8000288 <__aeabi_dsub>
 800988e:	4602      	mov	r2, r0
 8009890:	460b      	mov	r3, r1
 8009892:	4640      	mov	r0, r8
 8009894:	4649      	mov	r1, r9
 8009896:	f7f6 feaf 	bl	80005f8 <__aeabi_dmul>
 800989a:	4602      	mov	r2, r0
 800989c:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 800989e:	4620      	mov	r0, r4
 80098a0:	4629      	mov	r1, r5
 80098a2:	f7f6 fcf3 	bl	800028c <__adddf3>
 80098a6:	4603      	mov	r3, r0
 80098a8:	460c      	mov	r4, r1
 80098aa:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80098ae:	e01d      	b.n	80098ec <scaraInitLSPB+0x6b4>
		 }
	 } else {
		 v_lim	= 0;
 80098b0:	f04f 0300 	mov.w	r3, #0
 80098b4:	f04f 0400 	mov.w	r4, #0
 80098b8:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 ta = tf/2;
 80098bc:	f04f 0200 	mov.w	r2, #0
 80098c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80098c4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80098c8:	f7f6 ffc0 	bl	800084c <__aeabi_ddiv>
 80098cc:	4603      	mov	r3, r0
 80098ce:	460c      	mov	r4, r1
 80098d0:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
		 td = tf/2;
 80098d4:	f04f 0200 	mov.w	r2, #0
 80098d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80098dc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80098e0:	f7f6 ffb4 	bl	800084c <__aeabi_ddiv>
 80098e4:	4603      	mov	r3, r0
 80098e6:	460c      	mov	r4, r1
 80098e8:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 80098ec:	a334      	add	r3, pc, #208	; (adr r3, 80099c0 <scaraInitLSPB+0x788>)
 80098ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80098f6:	f7f6 ffa9 	bl	800084c <__aeabi_ddiv>
 80098fa:	4603      	mov	r3, r0
 80098fc:	460c      	mov	r4, r1
 80098fe:	4618      	mov	r0, r3
 8009900:	4621      	mov	r1, r4
 8009902:	f7f7 f971 	bl	8000be8 <__aeabi_d2f>
 8009906:	4603      	mov	r3, r0
 8009908:	ee00 3a10 	vmov	s0, r3
 800990c:	f010 f8ec 	bl	8019ae8 <ceilf>
 8009910:	eef0 7a40 	vmov.f32	s15, s0
 8009914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009918:	ee17 3a90 	vmov	r3, s15
 800991c:	637b      	str	r3, [r7, #52]	; 0x34
	 // Init lspb params
	 lspb->dir= dir;
 800991e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009920:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8009924:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 8009926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009928:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800992c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = q1;
 8009930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009932:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8009936:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 800993a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800993c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8009940:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 8009944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009946:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800994a:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 800994e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009950:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8009954:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 8009958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800995a:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 800995e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 8009962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009964:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8009968:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_lim;
 800996c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800996e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8009972:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = v0;
 8009976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009978:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800997c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = v1;
 8009980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009982:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8009986:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 800998a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800998e:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 8009990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009992:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8009996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009998:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800999c:	461a      	mov	r2, r3
 800999e:	4623      	mov	r3, r4
 80099a0:	f7f6 fc72 	bl	8000288 <__aeabi_dsub>
 80099a4:	4603      	mov	r3, r0
 80099a6:	460c      	mov	r4, r1
 80099a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099aa:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 80099ae:	2300      	movs	r3, #0
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	37b4      	adds	r7, #180	; 0xb4
 80099b4:	46bd      	mov	sp, r7
 80099b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ba:	bf00      	nop
 80099bc:	f3af 8000 	nop.w
 80099c0:	40000000 	.word	0x40000000
 80099c4:	3f847ae1 	.word	0x3f847ae1
 80099c8:	3ff00000 	.word	0x3ff00000
 80099cc:	00000000 	.word	0x00000000
 80099d0:	405c2000 	.word	0x405c2000
 80099d4:	14000000 	.word	0x14000000
 80099d8:	4000f6f0 	.word	0x4000f6f0
 80099dc:	6b259425 	.word	0x6b259425
 80099e0:	40069b91 	.word	0x40069b91
 80099e4:	d2f1a9fc 	.word	0xd2f1a9fc
 80099e8:	3f50624d 	.word	0x3f50624d
 80099ec:	9abcaf48 	.word	0x9abcaf48
 80099f0:	3e7ad7f2 	.word	0x3e7ad7f2

080099f4 <scaraInitScurve>:
SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 80099f4:	b480      	push	{r7}
 80099f6:	b089      	sub	sp, #36	; 0x24
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	61f8      	str	r0, [r7, #28]
 80099fc:	460b      	mov	r3, r1
 80099fe:	ed87 0b04 	vstr	d0, [r7, #16]
 8009a02:	ed87 1b02 	vstr	d1, [r7, #8]
 8009a06:	ed87 2b00 	vstr	d2, [r7]
 8009a0a:	76fb      	strb	r3, [r7, #27]
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	76bb      	strb	r3, [r7, #26]
//	 scurve->s_1 = s_1;
//	 scurve->s_2 = s_2;
//	 scurve->s_3 = s_3;
//	 scurve->s_4 = s_4;

	 return SCARA_STATUS_OK;
 8009a10:	2300      	movs	r3, #0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3724      	adds	r7, #36	; 0x24
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
	...

08009a20 <scaraFlowDuty>:
}

/* Compute new x, y , z, theta1, theta2 , d3, theta4 corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 8009a20:	b082      	sub	sp, #8
 8009a22:	b5b0      	push	{r4, r5, r7, lr}
 8009a24:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8009a28:	af2e      	add	r7, sp, #184	; 0xb8
 8009a2a:	f107 0108 	add.w	r1, r7, #8
 8009a2e:	ed81 0b00 	vstr	d0, [r1]
 8009a32:	1d39      	adds	r1, r7, #4
 8009a34:	6008      	str	r0, [r1, #0]
 8009a36:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8009a3a:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 8009a3e:	f107 0218 	add.w	r2, r7, #24
 8009a42:	f107 0308 	add.w	r3, r7, #8
 8009a46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009a4a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 8009a4e:	4b96      	ldr	r3, [pc, #600]	; (8009ca8 <scaraFlowDuty+0x288>)
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	f040 81a9 	bne.w	8009daa <scaraFlowDuty+0x38a>
		double s, angle, x, y, z, v, v_angle;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 8009a58:	4b93      	ldr	r3, [pc, #588]	; (8009ca8 <scaraFlowDuty+0x288>)
 8009a5a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d12d      	bne.n	8009abe <scaraFlowDuty+0x9e>
//			s = myDUTY.task.trajectory_3d.lspb.s_current;
//			v = myDUTY.task.trajectory_3d.lspb.v_current;
//			angle = myDUTY.task.trajectory_roll.lspb.s_current;
//			v_angle = myDUTY.task.trajectory_roll.lspb.v_current;
//			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
			status1 = scaraFlowLSPB1(&(myDUTY.task.trajectory_3d.lspb), time);
 8009a62:	f107 0308 	add.w	r3, r7, #8
 8009a66:	ed93 0b00 	vldr	d0, [r3]
 8009a6a:	4890      	ldr	r0, [pc, #576]	; (8009cac <scaraFlowDuty+0x28c>)
 8009a6c:	f7fe ff6a 	bl	8008944 <scaraFlowLSPB1>
 8009a70:	4603      	mov	r3, r0
 8009a72:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 8009a76:	4b8c      	ldr	r3, [pc, #560]	; (8009ca8 <scaraFlowDuty+0x288>)
 8009a78:	e9d3 3462 	ldrd	r3, r4, [r3, #392]	; 0x188
 8009a7c:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 8009a80:	4b89      	ldr	r3, [pc, #548]	; (8009ca8 <scaraFlowDuty+0x288>)
 8009a82:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
 8009a86:	f107 0210 	add.w	r2, r7, #16
 8009a8a:	e9c2 3400 	strd	r3, r4, [r2]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8009a8e:	4b86      	ldr	r3, [pc, #536]	; (8009ca8 <scaraFlowDuty+0x288>)
 8009a90:	e9d3 34fc 	ldrd	r3, r4, [r3, #1008]	; 0x3f0
 8009a94:	f107 0108 	add.w	r1, r7, #8
 8009a98:	461a      	mov	r2, r3
 8009a9a:	4623      	mov	r3, r4
 8009a9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009aa0:	f7f6 fdaa 	bl	80005f8 <__aeabi_dmul>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	460c      	mov	r4, r1
 8009aa8:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009aac:	4b7e      	ldr	r3, [pc, #504]	; (8009ca8 <scaraFlowDuty+0x288>)
 8009aae:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009ab2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status2 = SCARA_STATUS_OK;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009abc:	e09f      	b.n	8009bfe <scaraFlowDuty+0x1de>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 8009abe:	4b7a      	ldr	r3, [pc, #488]	; (8009ca8 <scaraFlowDuty+0x288>)
 8009ac0:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d128      	bne.n	8009b1a <scaraFlowDuty+0xfa>
//			s = myDUTY.task.trajectory_3d.scurve.s_current;
//			v = myDUTY.task.trajectory_3d.scurve.v_current;
//			angle = myDUTY.task.trajectory_roll.scurve.s_current;
//			v_angle = myDUTY.task.trajectory_roll.scurve.v_current;
//			dir_roll = myDUTY.task.trajectory_roll.scurve.dir;
			status1 = scaraFLowScurve1(&(myDUTY.task.trajectory_3d.scurve), time);
 8009ac8:	f107 0308 	add.w	r3, r7, #8
 8009acc:	ed93 0b00 	vldr	d0, [r3]
 8009ad0:	4877      	ldr	r0, [pc, #476]	; (8009cb0 <scaraFlowDuty+0x290>)
 8009ad2:	f7ff f9c1 	bl	8008e58 <scaraFLowScurve1>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			//v = myDUTY.task.trajectory_3d.lspb.v_current;
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 8009adc:	4b72      	ldr	r3, [pc, #456]	; (8009ca8 <scaraFlowDuty+0x288>)
 8009ade:	e9d3 3498 	ldrd	r3, r4, [r3, #608]	; 0x260
 8009ae2:	f107 0210 	add.w	r2, r7, #16
 8009ae6:	e9c2 3400 	strd	r3, r4, [r2]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8009aea:	4b6f      	ldr	r3, [pc, #444]	; (8009ca8 <scaraFlowDuty+0x288>)
 8009aec:	e9d3 34fc 	ldrd	r3, r4, [r3, #1008]	; 0x3f0
 8009af0:	f107 0108 	add.w	r1, r7, #8
 8009af4:	461a      	mov	r2, r3
 8009af6:	4623      	mov	r3, r4
 8009af8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009afc:	f7f6 fd7c 	bl	80005f8 <__aeabi_dmul>
 8009b00:	4603      	mov	r3, r0
 8009b02:	460c      	mov	r4, r1
 8009b04:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009b08:	4b67      	ldr	r3, [pc, #412]	; (8009ca8 <scaraFlowDuty+0x288>)
 8009b0a:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009b0e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status2 = SCARA_STATUS_OK;
 8009b12:	2300      	movs	r3, #0
 8009b14:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009b18:	e071      	b.n	8009bfe <scaraFlowDuty+0x1de>
		}else if( DUTY_TRAJECTORY_LINEAR == myDUTY.task.trajectory_3d.trajectory_type){
 8009b1a:	4b63      	ldr	r3, [pc, #396]	; (8009ca8 <scaraFlowDuty+0x288>)
 8009b1c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	d129      	bne.n	8009b78 <scaraFlowDuty+0x158>
			s = time*myDUTY.task.trajectory_3d.linear.constant_v;
 8009b24:	4b60      	ldr	r3, [pc, #384]	; (8009ca8 <scaraFlowDuty+0x288>)
 8009b26:	e9d3 019c 	ldrd	r0, r1, [r3, #624]	; 0x270
 8009b2a:	f107 0308 	add.w	r3, r7, #8
 8009b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b32:	f7f6 fd61 	bl	80005f8 <__aeabi_dmul>
 8009b36:	4603      	mov	r3, r0
 8009b38:	460c      	mov	r4, r1
 8009b3a:	f107 0210 	add.w	r2, r7, #16
 8009b3e:	e9c2 3400 	strd	r3, r4, [r2]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8009b42:	4b59      	ldr	r3, [pc, #356]	; (8009ca8 <scaraFlowDuty+0x288>)
 8009b44:	e9d3 34fc 	ldrd	r3, r4, [r3, #1008]	; 0x3f0
 8009b48:	f107 0108 	add.w	r1, r7, #8
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	4623      	mov	r3, r4
 8009b50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b54:	f7f6 fd50 	bl	80005f8 <__aeabi_dmul>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	460c      	mov	r4, r1
 8009b5c:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009b60:	4b51      	ldr	r3, [pc, #324]	; (8009ca8 <scaraFlowDuty+0x288>)
 8009b62:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009b66:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status1 = SCARA_STATUS_OK;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 8009b70:	2300      	movs	r3, #0
 8009b72:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009b76:	e042      	b.n	8009bfe <scaraFlowDuty+0x1de>
		}else if(DUTY_TRAJECTORY_GCODE_LSPB == myDUTY.task.trajectory_3d.trajectory_type){
 8009b78:	4b4b      	ldr	r3, [pc, #300]	; (8009ca8 <scaraFlowDuty+0x288>)
 8009b7a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009b7e:	2b03      	cmp	r3, #3
 8009b80:	d13b      	bne.n	8009bfa <scaraFlowDuty+0x1da>
			scaraFlowGCODE(&s, time);
 8009b82:	f107 0308 	add.w	r3, r7, #8
 8009b86:	f107 0210 	add.w	r2, r7, #16
 8009b8a:	ed93 0b00 	vldr	d0, [r3]
 8009b8e:	4610      	mov	r0, r2
 8009b90:	f7ff f876 	bl	8008c80 <scaraFlowGCODE>
			s -= accumulate_s;
 8009b94:	f107 0310 	add.w	r3, r7, #16
 8009b98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b9c:	4b45      	ldr	r3, [pc, #276]	; (8009cb4 <scaraFlowDuty+0x294>)
 8009b9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	4623      	mov	r3, r4
 8009ba6:	f7f6 fb6f 	bl	8000288 <__aeabi_dsub>
 8009baa:	4603      	mov	r3, r0
 8009bac:	460c      	mov	r4, r1
 8009bae:	f107 0210 	add.w	r2, r7, #16
 8009bb2:	e9c2 3400 	strd	r3, r4, [r2]
			//LOG_REPORT1("s watcher:", s, time);
			angle = myDUTY.task.trajectory_roll.linear.constant_v*(time - last_T);
 8009bb6:	4b3c      	ldr	r3, [pc, #240]	; (8009ca8 <scaraFlowDuty+0x288>)
 8009bb8:	e9d3 45fc 	ldrd	r4, r5, [r3, #1008]	; 0x3f0
 8009bbc:	4b3e      	ldr	r3, [pc, #248]	; (8009cb8 <scaraFlowDuty+0x298>)
 8009bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc2:	f107 0108 	add.w	r1, r7, #8
 8009bc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bca:	f7f6 fb5d 	bl	8000288 <__aeabi_dsub>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	4629      	mov	r1, r5
 8009bd6:	f7f6 fd0f 	bl	80005f8 <__aeabi_dmul>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	460c      	mov	r4, r1
 8009bde:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009be2:	4b31      	ldr	r3, [pc, #196]	; (8009ca8 <scaraFlowDuty+0x288>)
 8009be4:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009be8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status1 = SCARA_STATUS_OK;
 8009bec:	2300      	movs	r3, #0
 8009bee:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009bf8:	e001      	b.n	8009bfe <scaraFlowDuty+0x1de>

		}else{
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8009bfa:	2305      	movs	r3, #5
 8009bfc:	e2dd      	b.n	800a1ba <scaraFlowDuty+0x79a>
		}

		if ( SCARA_STATUS_OK != status1) {
 8009bfe:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d002      	beq.n	8009c0c <scaraFlowDuty+0x1ec>
			return status1;
 8009c06:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8009c0a:	e2d6      	b.n	800a1ba <scaraFlowDuty+0x79a>
		}
		if ( SCARA_STATUS_OK != status2) {
 8009c0c:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d002      	beq.n	8009c1a <scaraFlowDuty+0x1fa>
			return status2;
 8009c14:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8009c18:	e2cf      	b.n	800a1ba <scaraFlowDuty+0x79a>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 8009c1a:	4b23      	ldr	r3, [pc, #140]	; (8009ca8 <scaraFlowDuty+0x288>)
 8009c1c:	7a1b      	ldrb	r3, [r3, #8]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d11d      	bne.n	8009c5e <scaraFlowDuty+0x23e>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 8009c22:	f107 0310 	add.w	r3, r7, #16
 8009c26:	ed93 7b00 	vldr	d7, [r3]
 8009c2a:	eeb0 0a47 	vmov.f32	s0, s14
 8009c2e:	eef0 0a67 	vmov.f32	s1, s15
 8009c32:	4822      	ldr	r0, [pc, #136]	; (8009cbc <scaraFlowDuty+0x29c>)
 8009c34:	f000 facc 	bl	800a1d0 <scaraFlowLine>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.line.x_current;
 8009c3e:	4b1a      	ldr	r3, [pc, #104]	; (8009ca8 <scaraFlowDuty+0x288>)
 8009c40:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8009c44:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			y = myDUTY.task.path.line.y_current;
 8009c48:	4b17      	ldr	r3, [pc, #92]	; (8009ca8 <scaraFlowDuty+0x288>)
 8009c4a:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8009c4e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			z = myDUTY.task.path.line.z_current;
 8009c52:	4b15      	ldr	r3, [pc, #84]	; (8009ca8 <scaraFlowDuty+0x288>)
 8009c54:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8009c58:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
 8009c5c:	e032      	b.n	8009cc4 <scaraFlowDuty+0x2a4>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 8009c5e:	4b12      	ldr	r3, [pc, #72]	; (8009ca8 <scaraFlowDuty+0x288>)
 8009c60:	7a1b      	ldrb	r3, [r3, #8]
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d11d      	bne.n	8009ca2 <scaraFlowDuty+0x282>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 8009c66:	f107 0310 	add.w	r3, r7, #16
 8009c6a:	ed93 7b00 	vldr	d7, [r3]
 8009c6e:	eeb0 0a47 	vmov.f32	s0, s14
 8009c72:	eef0 0a67 	vmov.f32	s1, s15
 8009c76:	4812      	ldr	r0, [pc, #72]	; (8009cc0 <scaraFlowDuty+0x2a0>)
 8009c78:	f000 fb32 	bl	800a2e0 <scaraFlowCircle>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.circle.x_current;
 8009c82:	4b09      	ldr	r3, [pc, #36]	; (8009ca8 <scaraFlowDuty+0x288>)
 8009c84:	e9d3 343e 	ldrd	r3, r4, [r3, #248]	; 0xf8
 8009c88:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			y = myDUTY.task.path.circle.y_current;
 8009c8c:	4b06      	ldr	r3, [pc, #24]	; (8009ca8 <scaraFlowDuty+0x288>)
 8009c8e:	e9d3 3440 	ldrd	r3, r4, [r3, #256]	; 0x100
 8009c92:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			z = myDUTY.task.path.circle.z_current;
 8009c96:	4b04      	ldr	r3, [pc, #16]	; (8009ca8 <scaraFlowDuty+0x288>)
 8009c98:	e9d3 3442 	ldrd	r3, r4, [r3, #264]	; 0x108
 8009c9c:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
 8009ca0:	e010      	b.n	8009cc4 <scaraFlowDuty+0x2a4>
		} else {
			return SCARA_STATUS_ERROR_TASK;
 8009ca2:	2303      	movs	r3, #3
 8009ca4:	e289      	b.n	800a1ba <scaraFlowDuty+0x79a>
 8009ca6:	bf00      	nop
 8009ca8:	2000def0 	.word	0x2000def0
 8009cac:	2000e008 	.word	0x2000e008
 8009cb0:	2000e088 	.word	0x2000e088
 8009cb4:	200065c8 	.word	0x200065c8
 8009cb8:	2000dd10 	.word	0x2000dd10
 8009cbc:	2000df00 	.word	0x2000df00
 8009cc0:	2000df70 	.word	0x2000df70
		}

		positionCompute.x 		= x;
 8009cc4:	f107 0218 	add.w	r2, r7, #24
 8009cc8:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8009ccc:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
		positionCompute.y		= y;
 8009cd0:	f107 0218 	add.w	r2, r7, #24
 8009cd4:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8009cd8:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		positionCompute.z 		= z;
 8009cdc:	f107 0218 	add.w	r2, r7, #24
 8009ce0:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8009ce4:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 8009ce8:	4bb4      	ldr	r3, [pc, #720]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009cea:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8009cee:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009cf2:	f997 312f 	ldrsb.w	r3, [r7, #303]	; 0x12f
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7f6 fc14 	bl	8000524 <__aeabi_i2d>
 8009cfc:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009d00:	f7f6 fc7a 	bl	80005f8 <__aeabi_dmul>
 8009d04:	4602      	mov	r2, r0
 8009d06:	460b      	mov	r3, r1
 8009d08:	4620      	mov	r0, r4
 8009d0a:	4629      	mov	r1, r5
 8009d0c:	f7f6 fabe 	bl	800028c <__adddf3>
 8009d10:	4603      	mov	r3, r0
 8009d12:	460c      	mov	r4, r1
 8009d14:	f107 0218 	add.w	r2, r7, #24
 8009d18:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

		positionCompute.q		= s;
 8009d1c:	f107 0310 	add.w	r3, r7, #16
 8009d20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d24:	f107 0218 	add.w	r2, r7, #24
 8009d28:	e9c2 3400 	strd	r3, r4, [r2]
		positionCompute.q_roll  = angle;
 8009d2c:	f107 0218 	add.w	r2, r7, #24
 8009d30:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8009d34:	e9c2 3402 	strd	r3, r4, [r2, #8]

		positionCompute.v_3d    = v;
 8009d38:	f107 0218 	add.w	r2, r7, #24
 8009d3c:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8009d40:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 8009d44:	f107 0218 	add.w	r2, r7, #24
 8009d48:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8009d4c:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 8009d50:	4b9a      	ldr	r3, [pc, #616]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009d52:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8009d56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d5a:	f107 0218 	add.w	r2, r7, #24
 8009d5e:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 8009d62:	f107 0218 	add.w	r2, r7, #24
 8009d66:	f107 0308 	add.w	r3, r7, #8
 8009d6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d6e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 8009d72:	f107 0418 	add.w	r4, r7, #24
 8009d76:	4668      	mov	r0, sp
 8009d78:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8009d7c:	22b8      	movs	r2, #184	; 0xb8
 8009d7e:	4619      	mov	r1, r3
 8009d80:	f00b ffec 	bl	8015d5c <memcpy>
 8009d84:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8009d88:	cb0c      	ldmia	r3, {r2, r3}
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	f7fb fa3c 	bl	8005208 <kinematicInverse>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d101      	bne.n	8009d9a <scaraFlowDuty+0x37a>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8009d96:	2307      	movs	r3, #7
 8009d98:	e20f      	b.n	800a1ba <scaraFlowDuty+0x79a>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8009d9a:	f107 0118 	add.w	r1, r7, #24
 8009d9e:	1d3b      	adds	r3, r7, #4
 8009da0:	22c0      	movs	r2, #192	; 0xc0
 8009da2:	6818      	ldr	r0, [r3, #0]
 8009da4:	f00b ffda 	bl	8015d5c <memcpy>
 8009da8:	e206      	b.n	800a1b8 <scaraFlowDuty+0x798>
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 8009daa:	4b84      	ldr	r3, [pc, #528]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	f040 8200 	bne.w	800a1b4 <scaraFlowDuty+0x794>
		double s0, s1, s2, s3;
		double v0, v1, v2, v3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 8009db4:	4b81      	ldr	r3, [pc, #516]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009db6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d174      	bne.n	8009ea8 <scaraFlowDuty+0x488>
			status1 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[0].lspb), time);
 8009dbe:	f107 0308 	add.w	r3, r7, #8
 8009dc2:	ed93 0b00 	vldr	d0, [r3]
 8009dc6:	487e      	ldr	r0, [pc, #504]	; (8009fc0 <scaraFlowDuty+0x5a0>)
 8009dc8:	f7fe fdbc 	bl	8008944 <scaraFlowLSPB1>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[1].lspb), time);
 8009dd2:	f107 0308 	add.w	r3, r7, #8
 8009dd6:	ed93 0b00 	vldr	d0, [r3]
 8009dda:	487a      	ldr	r0, [pc, #488]	; (8009fc4 <scaraFlowDuty+0x5a4>)
 8009ddc:	f7fe fdb2 	bl	8008944 <scaraFlowLSPB1>
 8009de0:	4603      	mov	r3, r0
 8009de2:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[2].lspb), time);
 8009de6:	f107 0308 	add.w	r3, r7, #8
 8009dea:	ed93 0b00 	vldr	d0, [r3]
 8009dee:	4876      	ldr	r0, [pc, #472]	; (8009fc8 <scaraFlowDuty+0x5a8>)
 8009df0:	f7fe fda8 	bl	8008944 <scaraFlowLSPB1>
 8009df4:	4603      	mov	r3, r0
 8009df6:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[3].lspb), time);
 8009dfa:	f107 0308 	add.w	r3, r7, #8
 8009dfe:	ed93 0b00 	vldr	d0, [r3]
 8009e02:	4872      	ldr	r0, [pc, #456]	; (8009fcc <scaraFlowDuty+0x5ac>)
 8009e04:	f7fe fd9e 	bl	8008944 <scaraFlowLSPB1>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 8009e0e:	4b6b      	ldr	r3, [pc, #428]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009e10:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 8009e14:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 8009e18:	4b68      	ldr	r3, [pc, #416]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009e1a:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 8009e1e:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 8009e22:	4b66      	ldr	r3, [pc, #408]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009e24:	f893 3720 	ldrb.w	r3, [r3, #1824]	; 0x720
 8009e28:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 8009e2c:	4b63      	ldr	r3, [pc, #396]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009e2e:	f893 38a0 	ldrb.w	r3, [r3, #2208]	; 0x8a0
 8009e32:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 8009e36:	4b61      	ldr	r3, [pc, #388]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009e38:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8009e3c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e40:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 8009e44:	4b5d      	ldr	r3, [pc, #372]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009e46:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 8009e4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e4e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 8009e52:	4b5a      	ldr	r3, [pc, #360]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009e54:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 8009e58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e5c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 8009e60:	4b56      	ldr	r3, [pc, #344]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009e62:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8009e66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e6a:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 8009e6e:	4b53      	ldr	r3, [pc, #332]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009e70:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8009e74:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e78:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 8009e7c:	4b4f      	ldr	r3, [pc, #316]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009e7e:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8009e82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e86:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 8009e8a:	4b4c      	ldr	r3, [pc, #304]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009e8c:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8009e90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e94:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 8009e98:	4b48      	ldr	r3, [pc, #288]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009e9a:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8009e9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ea2:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8009ea6:	e07b      	b.n	8009fa0 <scaraFlowDuty+0x580>

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 8009ea8:	4b44      	ldr	r3, [pc, #272]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009eaa:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d174      	bne.n	8009f9c <scaraFlowDuty+0x57c>
			status1 = scaraFLowScurve(&(myDUTY.joint.trajectory[0].scurve), time);
 8009eb2:	f107 0308 	add.w	r3, r7, #8
 8009eb6:	ed93 0b00 	vldr	d0, [r3]
 8009eba:	4845      	ldr	r0, [pc, #276]	; (8009fd0 <scaraFlowDuty+0x5b0>)
 8009ebc:	f000 fa98 	bl	800a3f0 <scaraFLowScurve>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFLowScurve(&(myDUTY.joint.trajectory[1].scurve), time);
 8009ec6:	f107 0308 	add.w	r3, r7, #8
 8009eca:	ed93 0b00 	vldr	d0, [r3]
 8009ece:	4841      	ldr	r0, [pc, #260]	; (8009fd4 <scaraFlowDuty+0x5b4>)
 8009ed0:	f000 fa8e 	bl	800a3f0 <scaraFLowScurve>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFLowScurve(&(myDUTY.joint.trajectory[2].scurve), time);
 8009eda:	f107 0308 	add.w	r3, r7, #8
 8009ede:	ed93 0b00 	vldr	d0, [r3]
 8009ee2:	483d      	ldr	r0, [pc, #244]	; (8009fd8 <scaraFlowDuty+0x5b8>)
 8009ee4:	f000 fa84 	bl	800a3f0 <scaraFLowScurve>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFLowScurve(&(myDUTY.joint.trajectory[3].scurve), time);
 8009eee:	f107 0308 	add.w	r3, r7, #8
 8009ef2:	ed93 0b00 	vldr	d0, [r3]
 8009ef6:	4839      	ldr	r0, [pc, #228]	; (8009fdc <scaraFlowDuty+0x5bc>)
 8009ef8:	f000 fa7a 	bl	800a3f0 <scaraFLowScurve>
 8009efc:	4603      	mov	r3, r0
 8009efe:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 8009f02:	4b2e      	ldr	r3, [pc, #184]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009f04:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 8009f08:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 8009f0c:	4b2b      	ldr	r3, [pc, #172]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009f0e:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 8009f12:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 8009f16:	4b29      	ldr	r3, [pc, #164]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009f18:	f893 37a0 	ldrb.w	r3, [r3, #1952]	; 0x7a0
 8009f1c:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 8009f20:	4b26      	ldr	r3, [pc, #152]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009f22:	f893 3920 	ldrb.w	r3, [r3, #2336]	; 0x920
 8009f26:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 8009f2a:	4b24      	ldr	r3, [pc, #144]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009f2c:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8009f30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f34:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 8009f38:	4b20      	ldr	r3, [pc, #128]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009f3a:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 8009f3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f42:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 8009f46:	4b1d      	ldr	r3, [pc, #116]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009f48:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8009f4c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f50:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 8009f54:	4b19      	ldr	r3, [pc, #100]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009f56:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8009f5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f5e:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108

			v0 = myDUTY.joint.trajectory[0].scurve.v_current;
 8009f62:	4b16      	ldr	r3, [pc, #88]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009f64:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 8009f68:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f6c:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			v1 = myDUTY.joint.trajectory[1].scurve.v_current;
 8009f70:	4b12      	ldr	r3, [pc, #72]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009f72:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 8009f76:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f7a:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
			v2 = myDUTY.joint.trajectory[2].scurve.v_current;
 8009f7e:	4b0f      	ldr	r3, [pc, #60]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009f80:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 8009f84:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f88:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
			v3 = myDUTY.joint.trajectory[3].scurve.v_current;
 8009f8c:	4b0b      	ldr	r3, [pc, #44]	; (8009fbc <scaraFlowDuty+0x59c>)
 8009f8e:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8009f92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f96:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8009f9a:	e001      	b.n	8009fa0 <scaraFlowDuty+0x580>

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8009f9c:	2305      	movs	r3, #5
 8009f9e:	e10c      	b.n	800a1ba <scaraFlowDuty+0x79a>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 8009fa0:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d002      	beq.n	8009fae <scaraFlowDuty+0x58e>
			return status1;
 8009fa8:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8009fac:	e105      	b.n	800a1ba <scaraFlowDuty+0x79a>
		}
		if ( SCARA_STATUS_OK != status2) {
 8009fae:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d014      	beq.n	8009fe0 <scaraFlowDuty+0x5c0>
			return status2;
 8009fb6:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8009fba:	e0fe      	b.n	800a1ba <scaraFlowDuty+0x79a>
 8009fbc:	2000def0 	.word	0x2000def0
 8009fc0:	2000e310 	.word	0x2000e310
 8009fc4:	2000e490 	.word	0x2000e490
 8009fc8:	2000e610 	.word	0x2000e610
 8009fcc:	2000e790 	.word	0x2000e790
 8009fd0:	2000e390 	.word	0x2000e390
 8009fd4:	2000e510 	.word	0x2000e510
 8009fd8:	2000e690 	.word	0x2000e690
 8009fdc:	2000e810 	.word	0x2000e810
		}
		if ( SCARA_STATUS_OK != status3) {
 8009fe0:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d002      	beq.n	8009fee <scaraFlowDuty+0x5ce>
			return status3;
 8009fe8:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8009fec:	e0e5      	b.n	800a1ba <scaraFlowDuty+0x79a>
		}
		if ( SCARA_STATUS_OK != status4) {
 8009fee:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d002      	beq.n	8009ffc <scaraFlowDuty+0x5dc>
			return status4;
 8009ff6:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 8009ffa:	e0de      	b.n	800a1ba <scaraFlowDuty+0x79a>
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 8009ffc:	4b73      	ldr	r3, [pc, #460]	; (800a1cc <scaraFlowDuty+0x7ac>)
 8009ffe:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 800a002:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a006:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7f6 fa8a 	bl	8000524 <__aeabi_i2d>
 800a010:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800a014:	f7f6 faf0 	bl	80005f8 <__aeabi_dmul>
 800a018:	4602      	mov	r2, r0
 800a01a:	460b      	mov	r3, r1
 800a01c:	4620      	mov	r0, r4
 800a01e:	4629      	mov	r1, r5
 800a020:	f7f6 f934 	bl	800028c <__adddf3>
 800a024:	4603      	mov	r3, r0
 800a026:	460c      	mov	r4, r1
 800a028:	f107 0218 	add.w	r2, r7, #24
 800a02c:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 800a030:	4b66      	ldr	r3, [pc, #408]	; (800a1cc <scaraFlowDuty+0x7ac>)
 800a032:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 800a036:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a03a:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 800a03e:	4618      	mov	r0, r3
 800a040:	f7f6 fa70 	bl	8000524 <__aeabi_i2d>
 800a044:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800a048:	f7f6 fad6 	bl	80005f8 <__aeabi_dmul>
 800a04c:	4602      	mov	r2, r0
 800a04e:	460b      	mov	r3, r1
 800a050:	4620      	mov	r0, r4
 800a052:	4629      	mov	r1, r5
 800a054:	f7f6 f91a 	bl	800028c <__adddf3>
 800a058:	4603      	mov	r3, r0
 800a05a:	460c      	mov	r4, r1
 800a05c:	f107 0218 	add.w	r2, r7, #24
 800a060:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 800a064:	4b59      	ldr	r3, [pc, #356]	; (800a1cc <scaraFlowDuty+0x7ac>)
 800a066:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800a06a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a06e:	f997 30e5 	ldrsb.w	r3, [r7, #229]	; 0xe5
 800a072:	4618      	mov	r0, r3
 800a074:	f7f6 fa56 	bl	8000524 <__aeabi_i2d>
 800a078:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800a07c:	f7f6 fabc 	bl	80005f8 <__aeabi_dmul>
 800a080:	4602      	mov	r2, r0
 800a082:	460b      	mov	r3, r1
 800a084:	4620      	mov	r0, r4
 800a086:	4629      	mov	r1, r5
 800a088:	f7f6 f900 	bl	800028c <__adddf3>
 800a08c:	4603      	mov	r3, r0
 800a08e:	460c      	mov	r4, r1
 800a090:	f107 0218 	add.w	r2, r7, #24
 800a094:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 800a098:	4b4c      	ldr	r3, [pc, #304]	; (800a1cc <scaraFlowDuty+0x7ac>)
 800a09a:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 800a09e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a0a2:	f997 30e4 	ldrsb.w	r3, [r7, #228]	; 0xe4
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7f6 fa3c 	bl	8000524 <__aeabi_i2d>
 800a0ac:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800a0b0:	f7f6 faa2 	bl	80005f8 <__aeabi_dmul>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	4629      	mov	r1, r5
 800a0bc:	f7f6 f8e6 	bl	800028c <__adddf3>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	460c      	mov	r4, r1
 800a0c4:	f107 0218 	add.w	r2, r7, #24
 800a0c8:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 800a0cc:	f107 0218 	add.w	r2, r7, #24
 800a0d0:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800a0d4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 800a0d8:	f107 0218 	add.w	r2, r7, #24
 800a0dc:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 800a0e0:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 800a0e4:	f107 0218 	add.w	r2, r7, #24
 800a0e8:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800a0ec:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 800a0f0:	f107 0218 	add.w	r2, r7, #24
 800a0f4:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800a0f8:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 800a0fc:	f107 0218 	add.w	r2, r7, #24
 800a100:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800a104:	e9c2 3404 	strd	r3, r4, [r2, #16]
		positionCompute.q_theta2 = s1;
 800a108:	f107 0218 	add.w	r2, r7, #24
 800a10c:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 800a110:	e9c2 3406 	strd	r3, r4, [r2, #24]
		positionCompute.q_d3	 = s2;
 800a114:	f107 0218 	add.w	r2, r7, #24
 800a118:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800a11c:	e9c2 3408 	strd	r3, r4, [r2, #32]
		positionCompute.q_theta4 = s3;
 800a120:	f107 0218 	add.w	r2, r7, #24
 800a124:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 800a128:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 800a12c:	4b27      	ldr	r3, [pc, #156]	; (800a1cc <scaraFlowDuty+0x7ac>)
 800a12e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a132:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a136:	f107 0218 	add.w	r2, r7, #24
 800a13a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 800a13e:	f107 0218 	add.w	r2, r7, #24
 800a142:	f107 0308 	add.w	r3, r7, #8
 800a146:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a14a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 800a14e:	f107 0318 	add.w	r3, r7, #24
 800a152:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800a156:	f107 0318 	add.w	r3, r7, #24
 800a15a:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 800a15e:	f107 0318 	add.w	r3, r7, #24
 800a162:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 800a166:	f107 0318 	add.w	r3, r7, #24
 800a16a:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 800a16e:	eeb0 3a44 	vmov.f32	s6, s8
 800a172:	eef0 3a64 	vmov.f32	s7, s9
 800a176:	eeb0 2a45 	vmov.f32	s4, s10
 800a17a:	eef0 2a65 	vmov.f32	s5, s11
 800a17e:	eeb0 1a46 	vmov.f32	s2, s12
 800a182:	eef0 1a66 	vmov.f32	s3, s13
 800a186:	eeb0 0a47 	vmov.f32	s0, s14
 800a18a:	eef0 0a67 	vmov.f32	s1, s15
 800a18e:	f000 f93f 	bl	800a410 <scaraCheckWorkSpace4>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d001      	beq.n	800a19c <scaraFlowDuty+0x77c>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a198:	2307      	movs	r3, #7
 800a19a:	e00e      	b.n	800a1ba <scaraFlowDuty+0x79a>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800a19c:	f107 0118 	add.w	r1, r7, #24
 800a1a0:	1d3b      	adds	r3, r7, #4
 800a1a2:	22c0      	movs	r2, #192	; 0xc0
 800a1a4:	6818      	ldr	r0, [r3, #0]
 800a1a6:	f00b fdd9 	bl	8015d5c <memcpy>
		}
		kinematicForward(pos_Next);
 800a1aa:	1d3b      	adds	r3, r7, #4
 800a1ac:	6818      	ldr	r0, [r3, #0]
 800a1ae:	f7fa feef 	bl	8004f90 <kinematicForward>
 800a1b2:	e001      	b.n	800a1b8 <scaraFlowDuty+0x798>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	e000      	b.n	800a1ba <scaraFlowDuty+0x79a>
	}

	return SCARA_STATUS_OK;
 800a1b8:	2300      	movs	r3, #0
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a1c6:	b002      	add	sp, #8
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	2000def0 	.word	0x2000def0

0800a1d0 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 800a1d0:	b5b0      	push	{r4, r5, r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800a1e2:	a33d      	add	r3, pc, #244	; (adr r3, 800a2d8 <scaraFlowLine+0x108>)
 800a1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e8:	f7f6 fc96 	bl	8000b18 <__aeabi_dcmpgt>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d05a      	beq.n	800a2a8 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800a1fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a202:	f7f6 f9f9 	bl	80005f8 <__aeabi_dmul>
 800a206:	4602      	mov	r2, r0
 800a208:	460b      	mov	r3, r1
 800a20a:	4610      	mov	r0, r2
 800a20c:	4619      	mov	r1, r3
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a214:	f7f6 fb1a 	bl	800084c <__aeabi_ddiv>
 800a218:	4602      	mov	r2, r0
 800a21a:	460b      	mov	r3, r1
 800a21c:	4620      	mov	r0, r4
 800a21e:	4629      	mov	r1, r5
 800a220:	f7f6 f834 	bl	800028c <__adddf3>
 800a224:	4603      	mov	r3, r0
 800a226:	460c      	mov	r4, r1
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800a23a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a23e:	f7f6 f9db 	bl	80005f8 <__aeabi_dmul>
 800a242:	4602      	mov	r2, r0
 800a244:	460b      	mov	r3, r1
 800a246:	4610      	mov	r0, r2
 800a248:	4619      	mov	r1, r3
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a250:	f7f6 fafc 	bl	800084c <__aeabi_ddiv>
 800a254:	4602      	mov	r2, r0
 800a256:	460b      	mov	r3, r1
 800a258:	4620      	mov	r0, r4
 800a25a:	4629      	mov	r1, r5
 800a25c:	f7f6 f816 	bl	800028c <__adddf3>
 800a260:	4603      	mov	r3, r0
 800a262:	460c      	mov	r4, r1
 800a264:	68fa      	ldr	r2, [r7, #12]
 800a266:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800a276:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a27a:	f7f6 f9bd 	bl	80005f8 <__aeabi_dmul>
 800a27e:	4602      	mov	r2, r0
 800a280:	460b      	mov	r3, r1
 800a282:	4610      	mov	r0, r2
 800a284:	4619      	mov	r1, r3
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a28c:	f7f6 fade 	bl	800084c <__aeabi_ddiv>
 800a290:	4602      	mov	r2, r0
 800a292:	460b      	mov	r3, r1
 800a294:	4620      	mov	r0, r4
 800a296:	4629      	mov	r1, r5
 800a298:	f7f5 fff8 	bl	800028c <__adddf3>
 800a29c:	4603      	mov	r3, r0
 800a29e:	460c      	mov	r4, r1
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
 800a2a6:	e011      	b.n	800a2cc <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800a2ae:	68fa      	ldr	r2, [r7, #12]
 800a2b0:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current = line->y1;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current = line->z1;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bdb0      	pop	{r4, r5, r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	47ae147b 	.word	0x47ae147b
 800a2dc:	3f847ae1 	.word	0x3f847ae1

0800a2e0 <scaraFlowCircle>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 800a2e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a2e4:	b086      	sub	sp, #24
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	60f8      	str	r0, [r7, #12]
 800a2ea:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	4623      	mov	r3, r4
 800a2f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a2fc:	f7f6 faa6 	bl	800084c <__aeabi_ddiv>
 800a300:	4603      	mov	r3, r0
 800a302:	460c      	mov	r4, r1
 800a304:	e9c7 3404 	strd	r3, r4, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f993 3000 	ldrsb.w	r3, [r3]
 800a320:	4618      	mov	r0, r3
 800a322:	f7f6 f8ff 	bl	8000524 <__aeabi_i2d>
 800a326:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a32a:	f7f6 f965 	bl	80005f8 <__aeabi_dmul>
 800a32e:	4602      	mov	r2, r0
 800a330:	460b      	mov	r3, r1
 800a332:	4650      	mov	r0, sl
 800a334:	4659      	mov	r1, fp
 800a336:	f7f5 ffa9 	bl	800028c <__adddf3>
 800a33a:	4602      	mov	r2, r0
 800a33c:	460b      	mov	r3, r1
 800a33e:	ec43 2b17 	vmov	d7, r2, r3
 800a342:	eeb0 0a47 	vmov.f32	s0, s14
 800a346:	eef0 0a67 	vmov.f32	s1, s15
 800a34a:	f00f faf5 	bl	8019938 <cos>
 800a34e:	ec53 2b10 	vmov	r2, r3, d0
 800a352:	4640      	mov	r0, r8
 800a354:	4649      	mov	r1, r9
 800a356:	f7f6 f94f 	bl	80005f8 <__aeabi_dmul>
 800a35a:	4602      	mov	r2, r0
 800a35c:	460b      	mov	r3, r1
 800a35e:	4620      	mov	r0, r4
 800a360:	4629      	mov	r1, r5
 800a362:	f7f5 ff93 	bl	800028c <__adddf3>
 800a366:	4603      	mov	r3, r0
 800a368:	460c      	mov	r4, r1
 800a36a:	68fa      	ldr	r2, [r7, #12]
 800a36c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f993 3000 	ldrsb.w	r3, [r3]
 800a388:	4618      	mov	r0, r3
 800a38a:	f7f6 f8cb 	bl	8000524 <__aeabi_i2d>
 800a38e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a392:	f7f6 f931 	bl	80005f8 <__aeabi_dmul>
 800a396:	4602      	mov	r2, r0
 800a398:	460b      	mov	r3, r1
 800a39a:	4650      	mov	r0, sl
 800a39c:	4659      	mov	r1, fp
 800a39e:	f7f5 ff75 	bl	800028c <__adddf3>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	ec43 2b17 	vmov	d7, r2, r3
 800a3aa:	eeb0 0a47 	vmov.f32	s0, s14
 800a3ae:	eef0 0a67 	vmov.f32	s1, s15
 800a3b2:	f00f fb51 	bl	8019a58 <sin>
 800a3b6:	ec53 2b10 	vmov	r2, r3, d0
 800a3ba:	4640      	mov	r0, r8
 800a3bc:	4649      	mov	r1, r9
 800a3be:	f7f6 f91b 	bl	80005f8 <__aeabi_dmul>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	4629      	mov	r1, r5
 800a3ca:	f7f5 ff5f 	bl	800028c <__adddf3>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	460c      	mov	r4, r1
 800a3d2:	68fa      	ldr	r2, [r7, #12]
 800a3d4:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 800a3de:	68fa      	ldr	r2, [r7, #12]
 800a3e0:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3718      	adds	r7, #24
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a3f0 <scaraFLowScurve>:
	return SCARA_STATUS_OK;
}


/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFLowScurve		(Trajectory_Scurve_TypeDef *scurve, double time) {
 800a3f0:	b480      	push	{r7}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	ed87 0b00 	vstr	d0, [r7]
//
//	 } else {
//		 return SCARA_STATUS_ERROR;
//	 }

	 return SCARA_STATUS_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3714      	adds	r7, #20
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr
 800a40a:	0000      	movs	r0, r0
 800a40c:	0000      	movs	r0, r0
	...

0800a410 <scaraCheckWorkSpace4>:

/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 800a410:	b580      	push	{r7, lr}
 800a412:	b088      	sub	sp, #32
 800a414:	af00      	add	r7, sp, #0
 800a416:	ed87 0b06 	vstr	d0, [r7, #24]
 800a41a:	ed87 1b04 	vstr	d1, [r7, #16]
 800a41e:	ed87 2b02 	vstr	d2, [r7, #8]
 800a422:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0-0.1 || theta1 > LIM_MAX_J0+0.1) {
 800a426:	a335      	add	r3, pc, #212	; (adr r3, 800a4fc <scaraCheckWorkSpace4+0xec>)
 800a428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a430:	f7f6 fb54 	bl	8000adc <__aeabi_dcmplt>
 800a434:	4603      	mov	r3, r0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d109      	bne.n	800a44e <scaraCheckWorkSpace4+0x3e>
 800a43a:	a332      	add	r3, pc, #200	; (adr r3, 800a504 <scaraCheckWorkSpace4+0xf4>)
 800a43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a440:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a444:	f7f6 fb68 	bl	8000b18 <__aeabi_dcmpgt>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d001      	beq.n	800a452 <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a44e:	2307      	movs	r3, #7
 800a450:	e043      	b.n	800a4da <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1-0.1 || theta2 > LIM_MAX_J1+0.1) {
 800a452:	a32e      	add	r3, pc, #184	; (adr r3, 800a50c <scaraCheckWorkSpace4+0xfc>)
 800a454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a458:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a45c:	f7f6 fb3e 	bl	8000adc <__aeabi_dcmplt>
 800a460:	4603      	mov	r3, r0
 800a462:	2b00      	cmp	r3, #0
 800a464:	d109      	bne.n	800a47a <scaraCheckWorkSpace4+0x6a>
 800a466:	a32b      	add	r3, pc, #172	; (adr r3, 800a514 <scaraCheckWorkSpace4+0x104>)
 800a468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a470:	f7f6 fb52 	bl	8000b18 <__aeabi_dcmpgt>
 800a474:	4603      	mov	r3, r0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d001      	beq.n	800a47e <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a47a:	2307      	movs	r3, #7
 800a47c:	e02d      	b.n	800a4da <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 800a47e:	f04f 0200 	mov.w	r2, #0
 800a482:	f04f 0300 	mov.w	r3, #0
 800a486:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a48a:	f7f6 fb27 	bl	8000adc <__aeabi_dcmplt>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d109      	bne.n	800a4a8 <scaraCheckWorkSpace4+0x98>
 800a494:	f04f 0200 	mov.w	r2, #0
 800a498:	4b17      	ldr	r3, [pc, #92]	; (800a4f8 <scaraCheckWorkSpace4+0xe8>)
 800a49a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a49e:	f7f6 fb3b 	bl	8000b18 <__aeabi_dcmpgt>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d001      	beq.n	800a4ac <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a4a8:	2307      	movs	r3, #7
 800a4aa:	e016      	b.n	800a4da <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3-0.1 || theta4 > LIM_MAX_J3+0.1) {
 800a4ac:	a30e      	add	r3, pc, #56	; (adr r3, 800a4e8 <scaraCheckWorkSpace4+0xd8>)
 800a4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4b6:	f7f6 fb11 	bl	8000adc <__aeabi_dcmplt>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d109      	bne.n	800a4d4 <scaraCheckWorkSpace4+0xc4>
 800a4c0:	a30b      	add	r3, pc, #44	; (adr r3, 800a4f0 <scaraCheckWorkSpace4+0xe0>)
 800a4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4ca:	f7f6 fb25 	bl	8000b18 <__aeabi_dcmpgt>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d001      	beq.n	800a4d8 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a4d4:	2307      	movs	r3, #7
 800a4d6:	e000      	b.n	800a4da <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3720      	adds	r7, #32
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	f3af 8000 	nop.w
 800a4e8:	a7777778 	.word	0xa7777778
 800a4ec:	c0088956 	.word	0xc0088956
 800a4f0:	a7777778 	.word	0xa7777778
 800a4f4:	40088956 	.word	0x40088956
 800a4f8:	40590000 	.word	0x40590000
 800a4fc:	74444445 	.word	0x74444445
 800a500:	bff95623 	.word	0xbff95623
 800a504:	74444445 	.word	0x74444445
 800a508:	3ff95623 	.word	0x3ff95623
 800a50c:	54cccccd 	.word	0x54cccccd
 800a510:	c003a649 	.word	0xc003a649
 800a514:	54cccccd 	.word	0x54cccccd
 800a518:	4003a649 	.word	0x4003a649
 800a51c:	00000000 	.word	0x00000000

0800a520 <scaraTestDuty>:
	}
}


/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 800a520:	b5b0      	push	{r4, r5, r7, lr}
 800a522:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800a526:	af2e      	add	r7, sp, #184	; 0xb8
	int32_t sample_count;
	double run_time = 0;
 800a528:	f04f 0300 	mov.w	r3, #0
 800a52c:	f04f 0400 	mov.w	r4, #0
 800a530:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a534:	463b      	mov	r3, r7
 800a536:	4a36      	ldr	r2, [pc, #216]	; (800a610 <scaraTestDuty+0xf0>)
 800a538:	4618      	mov	r0, r3
 800a53a:	4611      	mov	r1, r2
 800a53c:	23c0      	movs	r3, #192	; 0xc0
 800a53e:	461a      	mov	r2, r3
 800a540:	f00b fc0c 	bl	8015d5c <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 800a544:	4b33      	ldr	r3, [pc, #204]	; (800a614 <scaraTestDuty+0xf4>)
 800a546:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a54a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a54e:	a32e      	add	r3, pc, #184	; (adr r3, 800a608 <scaraTestDuty+0xe8>)
 800a550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a554:	f7f6 f97a 	bl	800084c <__aeabi_ddiv>
 800a558:	4603      	mov	r3, r0
 800a55a:	460c      	mov	r4, r1
 800a55c:	ec44 3b17 	vmov	d7, r3, r4
 800a560:	eeb0 0a47 	vmov.f32	s0, s14
 800a564:	eef0 0a67 	vmov.f32	s1, s15
 800a568:	f00f f966 	bl	8019838 <ceil>
 800a56c:	ec54 3b10 	vmov	r3, r4, d0
 800a570:	4618      	mov	r0, r3
 800a572:	4621      	mov	r1, r4
 800a574:	f7f6 faf0 	bl	8000b58 <__aeabi_d2iz>
 800a578:	4603      	mov	r3, r0
 800a57a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	for (int32_t i = 1; i < sample_count; i++) {
 800a57e:	2301      	movs	r3, #1
 800a580:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a584:	e032      	b.n	800a5ec <scaraTestDuty+0xcc>
		run_time += T_SAMPLING;
 800a586:	a320      	add	r3, pc, #128	; (adr r3, 800a608 <scaraTestDuty+0xe8>)
 800a588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800a590:	f7f5 fe7c 	bl	800028c <__adddf3>
 800a594:	4603      	mov	r3, r0
 800a596:	460c      	mov	r4, r1
 800a598:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 800a59c:	463c      	mov	r4, r7
 800a59e:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 800a5a2:	4668      	mov	r0, sp
 800a5a4:	f104 0308 	add.w	r3, r4, #8
 800a5a8:	22b8      	movs	r2, #184	; 0xb8
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	f00b fbd6 	bl	8015d5c <memcpy>
 800a5b0:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a5b4:	4628      	mov	r0, r5
 800a5b6:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 800a5ba:	f7ff fa31 	bl	8009a20 <scaraFlowDuty>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
		if (status != SCARA_STATUS_OK) {
 800a5c4:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d002      	beq.n	800a5d2 <scaraTestDuty+0xb2>
			return status;
 800a5cc:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a5d0:	e013      	b.n	800a5fa <scaraTestDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 800a5d2:	463a      	mov	r2, r7
 800a5d4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800a5d8:	4611      	mov	r1, r2
 800a5da:	22c0      	movs	r2, #192	; 0xc0
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f00b fbbd 	bl	8015d5c <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 800a5e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a5ec:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a5f0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	dbc6      	blt.n	800a586 <scaraTestDuty+0x66>
	}
	return SCARA_STATUS_OK;
 800a5f8:	2300      	movs	r3, #0
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800a600:	46bd      	mov	sp, r7
 800a602:	bdb0      	pop	{r4, r5, r7, pc}
 800a604:	f3af 8000 	nop.w
 800a608:	40000000 	.word	0x40000000
 800a60c:	3f847ae1 	.word	0x3f847ae1
 800a610:	2000eab0 	.word	0x2000eab0
 800a614:	2000def0 	.word	0x2000def0

0800a618 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 800a618:	b480      	push	{r7}
 800a61a:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 800a61c:	4b03      	ldr	r3, [pc, #12]	; (800a62c <scaraSetScanFlag+0x14>)
 800a61e:	2201      	movs	r2, #1
 800a620:	70da      	strb	r2, [r3, #3]
}
 800a622:	bf00      	nop
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr
 800a62c:	2000207c 	.word	0x2000207c

0800a630 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	4603      	mov	r3, r0
 800a638:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 800a63a:	4a05      	ldr	r2, [pc, #20]	; (800a650 <scaraSetOutput+0x20>)
 800a63c:	79fb      	ldrb	r3, [r7, #7]
 800a63e:	7113      	strb	r3, [r2, #4]
	lowlayer_setOutput(level);
 800a640:	79fb      	ldrb	r3, [r7, #7]
 800a642:	4618      	mov	r0, r3
 800a644:	f7fc f8c0 	bl	80067c8 <lowlayer_setOutput>
}
 800a648:	bf00      	nop
 800a64a:	3708      	adds	r7, #8
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	2000207c 	.word	0x2000207c

0800a654 <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	4603      	mov	r3, r0
 800a65c:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 800a65e:	4a04      	ldr	r2, [pc, #16]	; (800a670 <scaraSetDutyState+0x1c>)
 800a660:	79fb      	ldrb	r3, [r7, #7]
 800a662:	7093      	strb	r3, [r2, #2]
}
 800a664:	bf00      	nop
 800a666:	370c      	adds	r7, #12
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr
 800a670:	2000207c 	.word	0x2000207c

0800a674 <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	4603      	mov	r3, r0
 800a67c:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 800a67e:	4a04      	ldr	r2, [pc, #16]	; (800a690 <scaraSetMode+0x1c>)
 800a680:	79fb      	ldrb	r3, [r7, #7]
 800a682:	7053      	strb	r3, [r2, #1]
}
 800a684:	bf00      	nop
 800a686:	370c      	adds	r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr
 800a690:	2000207c 	.word	0x2000207c

0800a694 <scaraSetMethod>:

void				scaraSetMethod(SCARA_MethodTypeDef method) {
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	4603      	mov	r3, r0
 800a69c:	71fb      	strb	r3, [r7, #7]
	mySCARA.method = method;
 800a69e:	4a04      	ldr	r2, [pc, #16]	; (800a6b0 <scaraSetMethod+0x1c>)
 800a6a0:	79fb      	ldrb	r3, [r7, #7]
 800a6a2:	7013      	strb	r3, [r2, #0]
}
 800a6a4:	bf00      	nop
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr
 800a6b0:	2000207c 	.word	0x2000207c

0800a6b4 <scaraGetPosition>:


void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a6bc:	22c0      	movs	r2, #192	; 0xc0
 800a6be:	4904      	ldr	r1, [pc, #16]	; (800a6d0 <scaraGetPosition+0x1c>)
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f00b fb4b 	bl	8015d5c <memcpy>
}
 800a6c6:	bf00      	nop
 800a6c8:	3708      	adds	r7, #8
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	2000eab0 	.word	0x2000eab0

0800a6d4 <scaraUpdatePosition>:

void				scaraUpdatePosition (SCARA_PositionTypeDef *pos) {
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
	memcpy(&positionNext, pos, sizeof(SCARA_PositionTypeDef));
 800a6dc:	22c0      	movs	r2, #192	; 0xc0
 800a6de:	6879      	ldr	r1, [r7, #4]
 800a6e0:	4803      	ldr	r0, [pc, #12]	; (800a6f0 <scaraUpdatePosition+0x1c>)
 800a6e2:	f00b fb3b 	bl	8015d5c <memcpy>
}
 800a6e6:	bf00      	nop
 800a6e8:	3708      	adds	r7, #8
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	2000ec30 	.word	0x2000ec30

0800a6f4 <scaraGetMode>:


SCARA_ModeTypeDef	scaraGetMode(void) {
 800a6f4:	b480      	push	{r7}
 800a6f6:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 800a6f8:	4b03      	ldr	r3, [pc, #12]	; (800a708 <scaraGetMode+0x14>)
 800a6fa:	785b      	ldrb	r3, [r3, #1]
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	46bd      	mov	sp, r7
 800a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a704:	4770      	bx	lr
 800a706:	bf00      	nop
 800a708:	2000207c 	.word	0x2000207c

0800a70c <scaraGetMethod>:

SCARA_MethodTypeDef	scaraGetMethod(void) {
 800a70c:	b480      	push	{r7}
 800a70e:	af00      	add	r7, sp, #0
	return mySCARA.method;
 800a710:	4b03      	ldr	r3, [pc, #12]	; (800a720 <scaraGetMethod+0x14>)
 800a712:	781b      	ldrb	r3, [r3, #0]
}
 800a714:	4618      	mov	r0, r3
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	2000207c 	.word	0x2000207c

0800a724 <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 800a724:	b480      	push	{r7}
 800a726:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 800a728:	4b03      	ldr	r3, [pc, #12]	; (800a738 <scaraGetDutyState+0x14>)
 800a72a:	789b      	ldrb	r3, [r3, #2]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr
 800a736:	bf00      	nop
 800a738:	2000207c 	.word	0x2000207c

0800a73c <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 800a73c:	b480      	push	{r7}
 800a73e:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 800a740:	4b03      	ldr	r3, [pc, #12]	; (800a750 <scaraIsScanLimit+0x14>)
 800a742:	78db      	ldrb	r3, [r3, #3]
}
 800a744:	4618      	mov	r0, r3
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	2000207c 	.word	0x2000207c

0800a754 <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 800a754:	b590      	push	{r4, r7, lr}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
 800a75a:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total  < run_time) {
 800a75e:	4b0a      	ldr	r3, [pc, #40]	; (800a788 <scaraIsFinish+0x34>)
 800a760:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a764:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a768:	461a      	mov	r2, r3
 800a76a:	4623      	mov	r3, r4
 800a76c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a770:	f7f6 f9d2 	bl	8000b18 <__aeabi_dcmpgt>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	d001      	beq.n	800a77e <scaraIsFinish+0x2a>
		return TRUE;
 800a77a:	2301      	movs	r3, #1
 800a77c:	e000      	b.n	800a780 <scaraIsFinish+0x2c>
	} else {
		return FALSE;
 800a77e:	2300      	movs	r3, #0
	}
}
 800a780:	4618      	mov	r0, r3
 800a782:	370c      	adds	r7, #12
 800a784:	46bd      	mov	sp, r7
 800a786:	bd90      	pop	{r4, r7, pc}
 800a788:	2000def0 	.word	0x2000def0
 800a78c:	00000000 	.word	0x00000000

0800a790 <scaraPosition_packaging>:


int32_t scaraPosition_packaging(uint8_t *data_packet, SCARA_PositionTypeDef position)
{
 800a790:	b082      	sub	sp, #8
 800a792:	b590      	push	{r4, r7, lr}
 800a794:	b085      	sub	sp, #20
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
 800a79a:	f107 0120 	add.w	r1, r7, #32
 800a79e:	e881 000c 	stmia.w	r1, {r2, r3}
	int32_t cur_ptr = -4;
 800a7a2:	f06f 0303 	mvn.w	r3, #3
 800a7a6:	60fb      	str	r3, [r7, #12]
	Append_Coordinate_Value((int32_t)(position.x*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a7a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a7ac:	a35c      	add	r3, pc, #368	; (adr r3, 800a920 <scaraPosition_packaging+0x190>)
 800a7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b2:	f7f5 ff21 	bl	80005f8 <__aeabi_dmul>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	460c      	mov	r4, r1
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	4621      	mov	r1, r4
 800a7be:	f7f6 f9cb 	bl	8000b58 <__aeabi_d2iz>
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	3304      	adds	r3, #4
 800a7c6:	60fb      	str	r3, [r7, #12]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	f000 f8aa 	bl	800a928 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.y*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a7d4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800a7d8:	a351      	add	r3, pc, #324	; (adr r3, 800a920 <scaraPosition_packaging+0x190>)
 800a7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7de:	f7f5 ff0b 	bl	80005f8 <__aeabi_dmul>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	460c      	mov	r4, r1
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	4621      	mov	r1, r4
 800a7ea:	f7f6 f9b5 	bl	8000b58 <__aeabi_d2iz>
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	3304      	adds	r3, #4
 800a7f2:	60fb      	str	r3, [r7, #12]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	f000 f894 	bl	800a928 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.z*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a800:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800a804:	a346      	add	r3, pc, #280	; (adr r3, 800a920 <scaraPosition_packaging+0x190>)
 800a806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80a:	f7f5 fef5 	bl	80005f8 <__aeabi_dmul>
 800a80e:	4603      	mov	r3, r0
 800a810:	460c      	mov	r4, r1
 800a812:	4618      	mov	r0, r3
 800a814:	4621      	mov	r1, r4
 800a816:	f7f6 f99f 	bl	8000b58 <__aeabi_d2iz>
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	3304      	adds	r3, #4
 800a81e:	60fb      	str	r3, [r7, #12]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	4413      	add	r3, r2
 800a826:	4619      	mov	r1, r3
 800a828:	f000 f87e 	bl	800a928 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.roll*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a82c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a830:	a33b      	add	r3, pc, #236	; (adr r3, 800a920 <scaraPosition_packaging+0x190>)
 800a832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a836:	f7f5 fedf 	bl	80005f8 <__aeabi_dmul>
 800a83a:	4603      	mov	r3, r0
 800a83c:	460c      	mov	r4, r1
 800a83e:	4618      	mov	r0, r3
 800a840:	4621      	mov	r1, r4
 800a842:	f7f6 f989 	bl	8000b58 <__aeabi_d2iz>
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	3304      	adds	r3, #4
 800a84a:	60fb      	str	r3, [r7, #12]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	4413      	add	r3, r2
 800a852:	4619      	mov	r1, r3
 800a854:	f000 f868 	bl	800a928 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta1*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a858:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800a85c:	a330      	add	r3, pc, #192	; (adr r3, 800a920 <scaraPosition_packaging+0x190>)
 800a85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a862:	f7f5 fec9 	bl	80005f8 <__aeabi_dmul>
 800a866:	4603      	mov	r3, r0
 800a868:	460c      	mov	r4, r1
 800a86a:	4618      	mov	r0, r3
 800a86c:	4621      	mov	r1, r4
 800a86e:	f7f6 f973 	bl	8000b58 <__aeabi_d2iz>
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	3304      	adds	r3, #4
 800a876:	60fb      	str	r3, [r7, #12]
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	4413      	add	r3, r2
 800a87e:	4619      	mov	r1, r3
 800a880:	f000 f852 	bl	800a928 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta2*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a884:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800a888:	a325      	add	r3, pc, #148	; (adr r3, 800a920 <scaraPosition_packaging+0x190>)
 800a88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88e:	f7f5 feb3 	bl	80005f8 <__aeabi_dmul>
 800a892:	4603      	mov	r3, r0
 800a894:	460c      	mov	r4, r1
 800a896:	4618      	mov	r0, r3
 800a898:	4621      	mov	r1, r4
 800a89a:	f7f6 f95d 	bl	8000b58 <__aeabi_d2iz>
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	3304      	adds	r3, #4
 800a8a2:	60fb      	str	r3, [r7, #12]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	4413      	add	r3, r2
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	f000 f83c 	bl	800a928 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.D3*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a8b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a8b4:	a31a      	add	r3, pc, #104	; (adr r3, 800a920 <scaraPosition_packaging+0x190>)
 800a8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ba:	f7f5 fe9d 	bl	80005f8 <__aeabi_dmul>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	460c      	mov	r4, r1
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	4621      	mov	r1, r4
 800a8c6:	f7f6 f947 	bl	8000b58 <__aeabi_d2iz>
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	3304      	adds	r3, #4
 800a8ce:	60fb      	str	r3, [r7, #12]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	f000 f826 	bl	800a928 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta4*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a8dc:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800a8e0:	a30f      	add	r3, pc, #60	; (adr r3, 800a920 <scaraPosition_packaging+0x190>)
 800a8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e6:	f7f5 fe87 	bl	80005f8 <__aeabi_dmul>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	460c      	mov	r4, r1
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	4621      	mov	r1, r4
 800a8f2:	f7f6 f931 	bl	8000b58 <__aeabi_d2iz>
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	3304      	adds	r3, #4
 800a8fa:	60fb      	str	r3, [r7, #12]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	4413      	add	r3, r2
 800a902:	4619      	mov	r1, r3
 800a904:	f000 f810 	bl	800a928 <Append_Coordinate_Value>
	return cur_ptr + 4;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	3304      	adds	r3, #4
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3714      	adds	r7, #20
 800a910:	46bd      	mov	sp, r7
 800a912:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a916:	b002      	add	sp, #8
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	f3af 8000 	nop.w
 800a920:	00000000 	.word	0x00000000
 800a924:	412e8480 	.word	0x412e8480

0800a928 <Append_Coordinate_Value>:

void Append_Coordinate_Value(int32_t append_value, uint8_t* append_position)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
	append_position[0] = (uint8_t)(append_value & 0xff);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	b2da      	uxtb	r2, r3
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	701a      	strb	r2, [r3, #0]
	append_position[1] = (uint8_t)(append_value >> 8 & 0xff);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	121a      	asrs	r2, r3, #8
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	3301      	adds	r3, #1
 800a942:	b2d2      	uxtb	r2, r2
 800a944:	701a      	strb	r2, [r3, #0]
	append_position[2] = (uint8_t)(append_value >> 16 & 0xff);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	141a      	asrs	r2, r3, #16
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	3302      	adds	r3, #2
 800a94e:	b2d2      	uxtb	r2, r2
 800a950:	701a      	strb	r2, [r3, #0]
	append_position[3] = (uint8_t)(append_value >> 24 & 0xff);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	161a      	asrs	r2, r3, #24
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	3303      	adds	r3, #3
 800a95a:	b2d2      	uxtb	r2, r2
 800a95c:	701a      	strb	r2, [r3, #0]
}
 800a95e:	bf00      	nop
 800a960:	370c      	adds	r7, #12
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr
 800a96a:	0000      	movs	r0, r0
 800a96c:	0000      	movs	r0, r0
	...

0800a970 <scaraKeyInit1>:
SCARA_StatusTypeDef  scaraKeyInit1(SCARA_KeyTypeDef key, int32_t speed)
{
 800a970:	b590      	push	{r4, r7, lr}
 800a972:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
 800a976:	af6c      	add	r7, sp, #432	; 0x1b0
 800a978:	4602      	mov	r2, r0
 800a97a:	463b      	mov	r3, r7
 800a97c:	6019      	str	r1, [r3, #0]
 800a97e:	1dfb      	adds	r3, r7, #7
 800a980:	701a      	strb	r2, [r3, #0]
	DUTY_Command_TypeDef cmd;
	SCARA_StatusTypeDef status;
	cmd.coordinate_type = DUTY_COORDINATES_REL;
 800a982:	f107 0308 	add.w	r3, r7, #8
 800a986:	2201      	movs	r2, #1
 800a988:	731a      	strb	r2, [r3, #12]
	cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 800a98a:	f107 0308 	add.w	r3, r7, #8
 800a98e:	2200      	movs	r2, #0
 800a990:	741a      	strb	r2, [r3, #16]
	cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 800a992:	f107 0308 	add.w	r3, r7, #8
 800a996:	2201      	movs	r2, #1
 800a998:	745a      	strb	r2, [r3, #17]
	double v_current = 0;
 800a99a:	f04f 0300 	mov.w	r3, #0
 800a99e:	f04f 0400 	mov.w	r4, #0
 800a9a2:	e9c7 3474 	strd	r3, r4, [r7, #464]	; 0x1d0
	Trajectory_LSPB_TypeDef *lspb;
	if(speed < SHIFT_SPEED_MIN || speed > SHIFT_SPEED_MAX){
 800a9a6:	463b      	mov	r3, r7
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	dd03      	ble.n	800a9b6 <scaraKeyInit1+0x46>
 800a9ae:	463b      	mov	r3, r7
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	2b0e      	cmp	r3, #14
 800a9b4:	dd01      	ble.n	800a9ba <scaraKeyInit1+0x4a>
		return SCARA_STATUS_ERROR_PARA;
 800a9b6:	2306      	movs	r3, #6
 800a9b8:	e2c0      	b.n	800af3c <scaraKeyInit1+0x5cc>
	}
	switch(key){
 800a9ba:	1dfb      	adds	r3, r7, #7
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	2b07      	cmp	r3, #7
 800a9c0:	f200 8298 	bhi.w	800aef4 <scaraKeyInit1+0x584>
 800a9c4:	a201      	add	r2, pc, #4	; (adr r2, 800a9cc <scaraKeyInit1+0x5c>)
 800a9c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ca:	bf00      	nop
 800a9cc:	0800a9ed 	.word	0x0800a9ed
 800a9d0:	0800aa8f 	.word	0x0800aa8f
 800a9d4:	0800ab35 	.word	0x0800ab35
 800a9d8:	0800abd3 	.word	0x0800abd3
 800a9dc:	0800ac75 	.word	0x0800ac75
 800a9e0:	0800ad13 	.word	0x0800ad13
 800a9e4:	0800adb5 	.word	0x0800adb5
 800a9e8:	0800ae53 	.word	0x0800ae53
		case SCARA_KEY_X_INC:{
			cmd.v_factor = 0;
 800a9ec:	f107 0208 	add.w	r2, r7, #8
 800a9f0:	f04f 0300 	mov.w	r3, #0
 800a9f4:	f04f 0400 	mov.w	r4, #0
 800a9f8:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a9fc:	f107 0308 	add.w	r3, r7, #8
 800aa00:	2200      	movs	r2, #0
 800aa02:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800aa04:	f107 0308 	add.w	r3, r7, #8
 800aa08:	2200      	movs	r2, #0
 800aa0a:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= speed*SHIFT_KEY_S;
 800aa0c:	463b      	mov	r3, r7
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	4613      	mov	r3, r2
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	4413      	add	r3, r2
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7f5 fd84 	bl	8000524 <__aeabi_i2d>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	460c      	mov	r4, r1
 800aa20:	f107 0208 	add.w	r2, r7, #8
 800aa24:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800aa28:	f107 0208 	add.w	r2, r7, #8
 800aa2c:	f04f 0300 	mov.w	r3, #0
 800aa30:	f04f 0400 	mov.w	r4, #0
 800aa34:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800aa38:	f107 0208 	add.w	r2, r7, #8
 800aa3c:	f04f 0300 	mov.w	r3, #0
 800aa40:	f04f 0400 	mov.w	r4, #0
 800aa44:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800aa48:	f107 0208 	add.w	r2, r7, #8
 800aa4c:	f04f 0300 	mov.w	r3, #0
 800aa50:	f04f 0400 	mov.w	r4, #0
 800aa54:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800aa58:	463b      	mov	r3, r7
 800aa5a:	6818      	ldr	r0, [r3, #0]
 800aa5c:	f7f5 fd62 	bl	8000524 <__aeabi_i2d>
 800aa60:	f20f 43e4 	addw	r3, pc, #1252	; 0x4e4
 800aa64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa68:	f7f5 fdc6 	bl	80005f8 <__aeabi_dmul>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	460c      	mov	r4, r1
 800aa70:	4618      	mov	r0, r3
 800aa72:	4621      	mov	r1, r4
 800aa74:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 800aa78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7c:	f7f5 fc06 	bl	800028c <__adddf3>
 800aa80:	4603      	mov	r3, r0
 800aa82:	460c      	mov	r4, r1
 800aa84:	f107 0208 	add.w	r2, r7, #8
 800aa88:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800aa8c:	e232      	b.n	800aef4 <scaraKeyInit1+0x584>
		case SCARA_KEY_X_DEC:{
			cmd.v_factor = 0;
 800aa8e:	f107 0208 	add.w	r2, r7, #8
 800aa92:	f04f 0300 	mov.w	r3, #0
 800aa96:	f04f 0400 	mov.w	r4, #0
 800aa9a:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800aa9e:	f107 0308 	add.w	r3, r7, #8
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800aaa6:	f107 0308 	add.w	r3, r7, #8
 800aaaa:	2200      	movs	r2, #0
 800aaac:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= -speed*SHIFT_KEY_S;
 800aaae:	463b      	mov	r3, r7
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	4613      	mov	r3, r2
 800aab4:	079b      	lsls	r3, r3, #30
 800aab6:	1a9b      	subs	r3, r3, r2
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	1a9b      	subs	r3, r3, r2
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7f5 fd31 	bl	8000524 <__aeabi_i2d>
 800aac2:	4603      	mov	r3, r0
 800aac4:	460c      	mov	r4, r1
 800aac6:	f107 0208 	add.w	r2, r7, #8
 800aaca:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800aace:	f107 0208 	add.w	r2, r7, #8
 800aad2:	f04f 0300 	mov.w	r3, #0
 800aad6:	f04f 0400 	mov.w	r4, #0
 800aada:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800aade:	f107 0208 	add.w	r2, r7, #8
 800aae2:	f04f 0300 	mov.w	r3, #0
 800aae6:	f04f 0400 	mov.w	r4, #0
 800aaea:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800aaee:	f107 0208 	add.w	r2, r7, #8
 800aaf2:	f04f 0300 	mov.w	r3, #0
 800aaf6:	f04f 0400 	mov.w	r4, #0
 800aafa:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800aafe:	463b      	mov	r3, r7
 800ab00:	6818      	ldr	r0, [r3, #0]
 800ab02:	f7f5 fd0f 	bl	8000524 <__aeabi_i2d>
 800ab06:	f20f 4340 	addw	r3, pc, #1088	; 0x440
 800ab0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0e:	f7f5 fd73 	bl	80005f8 <__aeabi_dmul>
 800ab12:	4603      	mov	r3, r0
 800ab14:	460c      	mov	r4, r1
 800ab16:	4618      	mov	r0, r3
 800ab18:	4621      	mov	r1, r4
 800ab1a:	f20f 4334 	addw	r3, pc, #1076	; 0x434
 800ab1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab22:	f7f5 fbb3 	bl	800028c <__adddf3>
 800ab26:	4603      	mov	r3, r0
 800ab28:	460c      	mov	r4, r1
 800ab2a:	f107 0208 	add.w	r2, r7, #8
 800ab2e:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800ab32:	e1df      	b.n	800aef4 <scaraKeyInit1+0x584>
		case SCARA_KEY_Y_INC:{
			cmd.v_factor = 0;
 800ab34:	f107 0208 	add.w	r2, r7, #8
 800ab38:	f04f 0300 	mov.w	r3, #0
 800ab3c:	f04f 0400 	mov.w	r4, #0
 800ab40:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ab44:	f107 0308 	add.w	r3, r7, #8
 800ab48:	2200      	movs	r2, #0
 800ab4a:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ab4c:	f107 0308 	add.w	r3, r7, #8
 800ab50:	2200      	movs	r2, #0
 800ab52:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ab54:	f107 0208 	add.w	r2, r7, #8
 800ab58:	f04f 0300 	mov.w	r3, #0
 800ab5c:	f04f 0400 	mov.w	r4, #0
 800ab60:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= speed*SHIFT_KEY_S;
 800ab64:	463b      	mov	r3, r7
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	4613      	mov	r3, r2
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	4413      	add	r3, r2
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7f5 fcd8 	bl	8000524 <__aeabi_i2d>
 800ab74:	4603      	mov	r3, r0
 800ab76:	460c      	mov	r4, r1
 800ab78:	f107 0208 	add.w	r2, r7, #8
 800ab7c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ab80:	f107 0208 	add.w	r2, r7, #8
 800ab84:	f04f 0300 	mov.w	r3, #0
 800ab88:	f04f 0400 	mov.w	r4, #0
 800ab8c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ab90:	f107 0208 	add.w	r2, r7, #8
 800ab94:	f04f 0300 	mov.w	r3, #0
 800ab98:	f04f 0400 	mov.w	r4, #0
 800ab9c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800aba0:	463b      	mov	r3, r7
 800aba2:	6818      	ldr	r0, [r3, #0]
 800aba4:	f7f5 fcbe 	bl	8000524 <__aeabi_i2d>
 800aba8:	a3e7      	add	r3, pc, #924	; (adr r3, 800af48 <scaraKeyInit1+0x5d8>)
 800abaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abae:	f7f5 fd23 	bl	80005f8 <__aeabi_dmul>
 800abb2:	4603      	mov	r3, r0
 800abb4:	460c      	mov	r4, r1
 800abb6:	4618      	mov	r0, r3
 800abb8:	4621      	mov	r1, r4
 800abba:	a3e5      	add	r3, pc, #916	; (adr r3, 800af50 <scaraKeyInit1+0x5e0>)
 800abbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc0:	f7f5 fb64 	bl	800028c <__adddf3>
 800abc4:	4603      	mov	r3, r0
 800abc6:	460c      	mov	r4, r1
 800abc8:	f107 0208 	add.w	r2, r7, #8
 800abcc:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800abd0:	e190      	b.n	800aef4 <scaraKeyInit1+0x584>

		case SCARA_KEY_Y_DEC:{
			cmd.v_factor = 0;
 800abd2:	f107 0208 	add.w	r2, r7, #8
 800abd6:	f04f 0300 	mov.w	r3, #0
 800abda:	f04f 0400 	mov.w	r4, #0
 800abde:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800abe2:	f107 0308 	add.w	r3, r7, #8
 800abe6:	2200      	movs	r2, #0
 800abe8:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800abea:	f107 0308 	add.w	r3, r7, #8
 800abee:	2200      	movs	r2, #0
 800abf0:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800abf2:	f107 0208 	add.w	r2, r7, #8
 800abf6:	f04f 0300 	mov.w	r3, #0
 800abfa:	f04f 0400 	mov.w	r4, #0
 800abfe:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= -speed*SHIFT_KEY_S;
 800ac02:	463b      	mov	r3, r7
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	4613      	mov	r3, r2
 800ac08:	079b      	lsls	r3, r3, #30
 800ac0a:	1a9b      	subs	r3, r3, r2
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	1a9b      	subs	r3, r3, r2
 800ac10:	4618      	mov	r0, r3
 800ac12:	f7f5 fc87 	bl	8000524 <__aeabi_i2d>
 800ac16:	4603      	mov	r3, r0
 800ac18:	460c      	mov	r4, r1
 800ac1a:	f107 0208 	add.w	r2, r7, #8
 800ac1e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ac22:	f107 0208 	add.w	r2, r7, #8
 800ac26:	f04f 0300 	mov.w	r3, #0
 800ac2a:	f04f 0400 	mov.w	r4, #0
 800ac2e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ac32:	f107 0208 	add.w	r2, r7, #8
 800ac36:	f04f 0300 	mov.w	r3, #0
 800ac3a:	f04f 0400 	mov.w	r4, #0
 800ac3e:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ac42:	463b      	mov	r3, r7
 800ac44:	6818      	ldr	r0, [r3, #0]
 800ac46:	f7f5 fc6d 	bl	8000524 <__aeabi_i2d>
 800ac4a:	a3bf      	add	r3, pc, #764	; (adr r3, 800af48 <scaraKeyInit1+0x5d8>)
 800ac4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac50:	f7f5 fcd2 	bl	80005f8 <__aeabi_dmul>
 800ac54:	4603      	mov	r3, r0
 800ac56:	460c      	mov	r4, r1
 800ac58:	4618      	mov	r0, r3
 800ac5a:	4621      	mov	r1, r4
 800ac5c:	a3bc      	add	r3, pc, #752	; (adr r3, 800af50 <scaraKeyInit1+0x5e0>)
 800ac5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac62:	f7f5 fb13 	bl	800028c <__adddf3>
 800ac66:	4603      	mov	r3, r0
 800ac68:	460c      	mov	r4, r1
 800ac6a:	f107 0208 	add.w	r2, r7, #8
 800ac6e:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800ac72:	e13f      	b.n	800aef4 <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_INC:{
			cmd.v_factor = 0;
 800ac74:	f107 0208 	add.w	r2, r7, #8
 800ac78:	f04f 0300 	mov.w	r3, #0
 800ac7c:	f04f 0400 	mov.w	r4, #0
 800ac80:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ac84:	f107 0308 	add.w	r3, r7, #8
 800ac88:	2200      	movs	r2, #0
 800ac8a:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ac8c:	f107 0308 	add.w	r3, r7, #8
 800ac90:	2200      	movs	r2, #0
 800ac92:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ac94:	f107 0208 	add.w	r2, r7, #8
 800ac98:	f04f 0300 	mov.w	r3, #0
 800ac9c:	f04f 0400 	mov.w	r4, #0
 800aca0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800aca4:	f107 0208 	add.w	r2, r7, #8
 800aca8:	f04f 0300 	mov.w	r3, #0
 800acac:	f04f 0400 	mov.w	r4, #0
 800acb0:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= speed*SHIFT_KEY_S;
 800acb4:	463b      	mov	r3, r7
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	4613      	mov	r3, r2
 800acba:	009b      	lsls	r3, r3, #2
 800acbc:	4413      	add	r3, r2
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7f5 fc30 	bl	8000524 <__aeabi_i2d>
 800acc4:	4603      	mov	r3, r0
 800acc6:	460c      	mov	r4, r1
 800acc8:	f107 0208 	add.w	r2, r7, #8
 800accc:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800acd0:	f107 0208 	add.w	r2, r7, #8
 800acd4:	f04f 0300 	mov.w	r3, #0
 800acd8:	f04f 0400 	mov.w	r4, #0
 800acdc:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ace0:	463b      	mov	r3, r7
 800ace2:	6818      	ldr	r0, [r3, #0]
 800ace4:	f7f5 fc1e 	bl	8000524 <__aeabi_i2d>
 800ace8:	a397      	add	r3, pc, #604	; (adr r3, 800af48 <scaraKeyInit1+0x5d8>)
 800acea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acee:	f7f5 fc83 	bl	80005f8 <__aeabi_dmul>
 800acf2:	4603      	mov	r3, r0
 800acf4:	460c      	mov	r4, r1
 800acf6:	4618      	mov	r0, r3
 800acf8:	4621      	mov	r1, r4
 800acfa:	a395      	add	r3, pc, #596	; (adr r3, 800af50 <scaraKeyInit1+0x5e0>)
 800acfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad00:	f7f5 fac4 	bl	800028c <__adddf3>
 800ad04:	4603      	mov	r3, r0
 800ad06:	460c      	mov	r4, r1
 800ad08:	f107 0208 	add.w	r2, r7, #8
 800ad0c:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800ad10:	e0f0      	b.n	800aef4 <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_DEC:{
			cmd.v_factor = 0;
 800ad12:	f107 0208 	add.w	r2, r7, #8
 800ad16:	f04f 0300 	mov.w	r3, #0
 800ad1a:	f04f 0400 	mov.w	r4, #0
 800ad1e:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ad22:	f107 0308 	add.w	r3, r7, #8
 800ad26:	2200      	movs	r2, #0
 800ad28:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ad2a:	f107 0308 	add.w	r3, r7, #8
 800ad2e:	2200      	movs	r2, #0
 800ad30:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ad32:	f107 0208 	add.w	r2, r7, #8
 800ad36:	f04f 0300 	mov.w	r3, #0
 800ad3a:	f04f 0400 	mov.w	r4, #0
 800ad3e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ad42:	f107 0208 	add.w	r2, r7, #8
 800ad46:	f04f 0300 	mov.w	r3, #0
 800ad4a:	f04f 0400 	mov.w	r4, #0
 800ad4e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= -speed*SHIFT_KEY_S;
 800ad52:	463b      	mov	r3, r7
 800ad54:	681a      	ldr	r2, [r3, #0]
 800ad56:	4613      	mov	r3, r2
 800ad58:	079b      	lsls	r3, r3, #30
 800ad5a:	1a9b      	subs	r3, r3, r2
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	1a9b      	subs	r3, r3, r2
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7f5 fbdf 	bl	8000524 <__aeabi_i2d>
 800ad66:	4603      	mov	r3, r0
 800ad68:	460c      	mov	r4, r1
 800ad6a:	f107 0208 	add.w	r2, r7, #8
 800ad6e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ad72:	f107 0208 	add.w	r2, r7, #8
 800ad76:	f04f 0300 	mov.w	r3, #0
 800ad7a:	f04f 0400 	mov.w	r4, #0
 800ad7e:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ad82:	463b      	mov	r3, r7
 800ad84:	6818      	ldr	r0, [r3, #0]
 800ad86:	f7f5 fbcd 	bl	8000524 <__aeabi_i2d>
 800ad8a:	a36f      	add	r3, pc, #444	; (adr r3, 800af48 <scaraKeyInit1+0x5d8>)
 800ad8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad90:	f7f5 fc32 	bl	80005f8 <__aeabi_dmul>
 800ad94:	4603      	mov	r3, r0
 800ad96:	460c      	mov	r4, r1
 800ad98:	4618      	mov	r0, r3
 800ad9a:	4621      	mov	r1, r4
 800ad9c:	a36c      	add	r3, pc, #432	; (adr r3, 800af50 <scaraKeyInit1+0x5e0>)
 800ad9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada2:	f7f5 fa73 	bl	800028c <__adddf3>
 800ada6:	4603      	mov	r3, r0
 800ada8:	460c      	mov	r4, r1
 800adaa:	f107 0208 	add.w	r2, r7, #8
 800adae:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800adb2:	e09f      	b.n	800aef4 <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_INC:{
			cmd.v_factor = 0;
 800adb4:	f107 0208 	add.w	r2, r7, #8
 800adb8:	f04f 0300 	mov.w	r3, #0
 800adbc:	f04f 0400 	mov.w	r4, #0
 800adc0:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800adc4:	f107 0308 	add.w	r3, r7, #8
 800adc8:	2200      	movs	r2, #0
 800adca:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800adcc:	f107 0308 	add.w	r3, r7, #8
 800add0:	2200      	movs	r2, #0
 800add2:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800add4:	f107 0208 	add.w	r2, r7, #8
 800add8:	f04f 0300 	mov.w	r3, #0
 800addc:	f04f 0400 	mov.w	r4, #0
 800ade0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ade4:	f107 0208 	add.w	r2, r7, #8
 800ade8:	f04f 0300 	mov.w	r3, #0
 800adec:	f04f 0400 	mov.w	r4, #0
 800adf0:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800adf4:	f107 0208 	add.w	r2, r7, #8
 800adf8:	f04f 0300 	mov.w	r3, #0
 800adfc:	f04f 0400 	mov.w	r4, #0
 800ae00:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= speed*SHIFT_KEY_S;
 800ae04:	463b      	mov	r3, r7
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	4613      	mov	r3, r2
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	4413      	add	r3, r2
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7f5 fb88 	bl	8000524 <__aeabi_i2d>
 800ae14:	4603      	mov	r3, r0
 800ae16:	460c      	mov	r4, r1
 800ae18:	f107 0208 	add.w	r2, r7, #8
 800ae1c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ae20:	463b      	mov	r3, r7
 800ae22:	6818      	ldr	r0, [r3, #0]
 800ae24:	f7f5 fb7e 	bl	8000524 <__aeabi_i2d>
 800ae28:	a347      	add	r3, pc, #284	; (adr r3, 800af48 <scaraKeyInit1+0x5d8>)
 800ae2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2e:	f7f5 fbe3 	bl	80005f8 <__aeabi_dmul>
 800ae32:	4603      	mov	r3, r0
 800ae34:	460c      	mov	r4, r1
 800ae36:	4618      	mov	r0, r3
 800ae38:	4621      	mov	r1, r4
 800ae3a:	a345      	add	r3, pc, #276	; (adr r3, 800af50 <scaraKeyInit1+0x5e0>)
 800ae3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae40:	f7f5 fa24 	bl	800028c <__adddf3>
 800ae44:	4603      	mov	r3, r0
 800ae46:	460c      	mov	r4, r1
 800ae48:	f107 0208 	add.w	r2, r7, #8
 800ae4c:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800ae50:	e050      	b.n	800aef4 <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_DEC:{
			cmd.v_factor = 0;
 800ae52:	f107 0208 	add.w	r2, r7, #8
 800ae56:	f04f 0300 	mov.w	r3, #0
 800ae5a:	f04f 0400 	mov.w	r4, #0
 800ae5e:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ae62:	f107 0308 	add.w	r3, r7, #8
 800ae66:	2200      	movs	r2, #0
 800ae68:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ae6a:	f107 0308 	add.w	r3, r7, #8
 800ae6e:	2200      	movs	r2, #0
 800ae70:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ae72:	f107 0208 	add.w	r2, r7, #8
 800ae76:	f04f 0300 	mov.w	r3, #0
 800ae7a:	f04f 0400 	mov.w	r4, #0
 800ae7e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ae82:	f107 0208 	add.w	r2, r7, #8
 800ae86:	f04f 0300 	mov.w	r3, #0
 800ae8a:	f04f 0400 	mov.w	r4, #0
 800ae8e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ae92:	f107 0208 	add.w	r2, r7, #8
 800ae96:	f04f 0300 	mov.w	r3, #0
 800ae9a:	f04f 0400 	mov.w	r4, #0
 800ae9e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= -speed*SHIFT_KEY_S;
 800aea2:	463b      	mov	r3, r7
 800aea4:	681a      	ldr	r2, [r3, #0]
 800aea6:	4613      	mov	r3, r2
 800aea8:	079b      	lsls	r3, r3, #30
 800aeaa:	1a9b      	subs	r3, r3, r2
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	1a9b      	subs	r3, r3, r2
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f7f5 fb37 	bl	8000524 <__aeabi_i2d>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	460c      	mov	r4, r1
 800aeba:	f107 0208 	add.w	r2, r7, #8
 800aebe:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800aec2:	463b      	mov	r3, r7
 800aec4:	6818      	ldr	r0, [r3, #0]
 800aec6:	f7f5 fb2d 	bl	8000524 <__aeabi_i2d>
 800aeca:	a31f      	add	r3, pc, #124	; (adr r3, 800af48 <scaraKeyInit1+0x5d8>)
 800aecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed0:	f7f5 fb92 	bl	80005f8 <__aeabi_dmul>
 800aed4:	4603      	mov	r3, r0
 800aed6:	460c      	mov	r4, r1
 800aed8:	4618      	mov	r0, r3
 800aeda:	4621      	mov	r1, r4
 800aedc:	a31c      	add	r3, pc, #112	; (adr r3, 800af50 <scaraKeyInit1+0x5e0>)
 800aede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee2:	f7f5 f9d3 	bl	800028c <__adddf3>
 800aee6:	4603      	mov	r3, r0
 800aee8:	460c      	mov	r4, r1
 800aeea:	f107 0208 	add.w	r2, r7, #8
 800aeee:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800aef2:	bf00      	nop
	}

	status = scaraInitDuty(cmd);
 800aef4:	f107 0408 	add.w	r4, r7, #8
 800aef8:	4668      	mov	r0, sp
 800aefa:	f104 0310 	add.w	r3, r4, #16
 800aefe:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800af02:	4619      	mov	r1, r3
 800af04:	f00a ff2a 	bl	8015d5c <memcpy>
 800af08:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800af0c:	f7fb fca8 	bl	8006860 <scaraInitDuty>
 800af10:	4603      	mov	r3, r0
 800af12:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
	if (status == SCARA_STATUS_OK) {
 800af16:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d10b      	bne.n	800af36 <scaraKeyInit1+0x5c6>
		status = scaraTestDuty();
 800af1e:	f7ff faff 	bl	800a520 <scaraTestDuty>
 800af22:	4603      	mov	r3, r0
 800af24:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		if (status != SCARA_STATUS_OK) {
 800af28:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d005      	beq.n	800af3c <scaraKeyInit1+0x5cc>
			return status;
 800af30:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800af34:	e002      	b.n	800af3c <scaraKeyInit1+0x5cc>
		// tinh lai run time so vs v hien tai
//		*(runtime) = (v_current - lspb->v0)/(lspb->a_design);
//		scaraFlowDuty(*runtime, &positionKeyInit, positionCurrent);
//		return status;
	} else {
		return status;
 800af36:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800af3a:	e7ff      	b.n	800af3c <scaraKeyInit1+0x5cc>
	}
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	f507 77ee 	add.w	r7, r7, #476	; 0x1dc
 800af42:	46bd      	mov	sp, r7
 800af44:	bd90      	pop	{r4, r7, pc}
 800af46:	bf00      	nop
 800af48:	9999999a 	.word	0x9999999a
 800af4c:	3fa99999 	.word	0x3fa99999
 800af50:	9999999a 	.word	0x9999999a
 800af54:	3fe99999 	.word	0x3fe99999

0800af58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800af5e:	2300      	movs	r3, #0
 800af60:	607b      	str	r3, [r7, #4]
 800af62:	4b12      	ldr	r3, [pc, #72]	; (800afac <HAL_MspInit+0x54>)
 800af64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af66:	4a11      	ldr	r2, [pc, #68]	; (800afac <HAL_MspInit+0x54>)
 800af68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af6c:	6453      	str	r3, [r2, #68]	; 0x44
 800af6e:	4b0f      	ldr	r3, [pc, #60]	; (800afac <HAL_MspInit+0x54>)
 800af70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af76:	607b      	str	r3, [r7, #4]
 800af78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800af7a:	2300      	movs	r3, #0
 800af7c:	603b      	str	r3, [r7, #0]
 800af7e:	4b0b      	ldr	r3, [pc, #44]	; (800afac <HAL_MspInit+0x54>)
 800af80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af82:	4a0a      	ldr	r2, [pc, #40]	; (800afac <HAL_MspInit+0x54>)
 800af84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af88:	6413      	str	r3, [r2, #64]	; 0x40
 800af8a:	4b08      	ldr	r3, [pc, #32]	; (800afac <HAL_MspInit+0x54>)
 800af8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af92:	603b      	str	r3, [r7, #0]
 800af94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800af96:	2200      	movs	r2, #0
 800af98:	210f      	movs	r1, #15
 800af9a:	f06f 0001 	mvn.w	r0, #1
 800af9e:	f000 fbe7 	bl	800b770 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800afa2:	bf00      	nop
 800afa4:	3708      	adds	r7, #8
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	40023800 	.word	0x40023800

0800afb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b08c      	sub	sp, #48	; 0x30
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800afb8:	2300      	movs	r3, #0
 800afba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800afbc:	2300      	movs	r3, #0
 800afbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800afc0:	2200      	movs	r2, #0
 800afc2:	6879      	ldr	r1, [r7, #4]
 800afc4:	2036      	movs	r0, #54	; 0x36
 800afc6:	f000 fbd3 	bl	800b770 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800afca:	2036      	movs	r0, #54	; 0x36
 800afcc:	f000 fbec 	bl	800b7a8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800afd0:	2300      	movs	r3, #0
 800afd2:	60fb      	str	r3, [r7, #12]
 800afd4:	4b1f      	ldr	r3, [pc, #124]	; (800b054 <HAL_InitTick+0xa4>)
 800afd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afd8:	4a1e      	ldr	r2, [pc, #120]	; (800b054 <HAL_InitTick+0xa4>)
 800afda:	f043 0310 	orr.w	r3, r3, #16
 800afde:	6413      	str	r3, [r2, #64]	; 0x40
 800afe0:	4b1c      	ldr	r3, [pc, #112]	; (800b054 <HAL_InitTick+0xa4>)
 800afe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afe4:	f003 0310 	and.w	r3, r3, #16
 800afe8:	60fb      	str	r3, [r7, #12]
 800afea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800afec:	f107 0210 	add.w	r2, r7, #16
 800aff0:	f107 0314 	add.w	r3, r7, #20
 800aff4:	4611      	mov	r1, r2
 800aff6:	4618      	mov	r0, r3
 800aff8:	f002 ff72 	bl	800dee0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800affc:	f002 ff48 	bl	800de90 <HAL_RCC_GetPCLK1Freq>
 800b000:	4603      	mov	r3, r0
 800b002:	005b      	lsls	r3, r3, #1
 800b004:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b008:	4a13      	ldr	r2, [pc, #76]	; (800b058 <HAL_InitTick+0xa8>)
 800b00a:	fba2 2303 	umull	r2, r3, r2, r3
 800b00e:	0c9b      	lsrs	r3, r3, #18
 800b010:	3b01      	subs	r3, #1
 800b012:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800b014:	4b11      	ldr	r3, [pc, #68]	; (800b05c <HAL_InitTick+0xac>)
 800b016:	4a12      	ldr	r2, [pc, #72]	; (800b060 <HAL_InitTick+0xb0>)
 800b018:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800b01a:	4b10      	ldr	r3, [pc, #64]	; (800b05c <HAL_InitTick+0xac>)
 800b01c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b020:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800b022:	4a0e      	ldr	r2, [pc, #56]	; (800b05c <HAL_InitTick+0xac>)
 800b024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b026:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800b028:	4b0c      	ldr	r3, [pc, #48]	; (800b05c <HAL_InitTick+0xac>)
 800b02a:	2200      	movs	r2, #0
 800b02c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b02e:	4b0b      	ldr	r3, [pc, #44]	; (800b05c <HAL_InitTick+0xac>)
 800b030:	2200      	movs	r2, #0
 800b032:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800b034:	4809      	ldr	r0, [pc, #36]	; (800b05c <HAL_InitTick+0xac>)
 800b036:	f002 ff85 	bl	800df44 <HAL_TIM_Base_Init>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d104      	bne.n	800b04a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800b040:	4806      	ldr	r0, [pc, #24]	; (800b05c <HAL_InitTick+0xac>)
 800b042:	f002 ffce 	bl	800dfe2 <HAL_TIM_Base_Start_IT>
 800b046:	4603      	mov	r3, r0
 800b048:	e000      	b.n	800b04c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800b04a:	2301      	movs	r3, #1
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3730      	adds	r7, #48	; 0x30
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}
 800b054:	40023800 	.word	0x40023800
 800b058:	431bde83 	.word	0x431bde83
 800b05c:	2000ecf0 	.word	0x2000ecf0
 800b060:	40001000 	.word	0x40001000

0800b064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b064:	b480      	push	{r7}
 800b066:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b068:	bf00      	nop
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr
	...

0800b074 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 800b078:	2162      	movs	r1, #98	; 0x62
 800b07a:	4802      	ldr	r0, [pc, #8]	; (800b084 <HardFault_Handler+0x10>)
 800b07c:	f7f7 f99e 	bl	80023bc <LOG_REPORT>
 800b080:	e7fa      	b.n	800b078 <HardFault_Handler+0x4>
 800b082:	bf00      	nop
 800b084:	0801b478 	.word	0x0801b478

0800b088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 800b08c:	2172      	movs	r1, #114	; 0x72
 800b08e:	4802      	ldr	r0, [pc, #8]	; (800b098 <MemManage_Handler+0x10>)
 800b090:	f7f7 f994 	bl	80023bc <LOG_REPORT>
 800b094:	e7fa      	b.n	800b08c <MemManage_Handler+0x4>
 800b096:	bf00      	nop
 800b098:	0801b490 	.word	0x0801b490

0800b09c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 800b0a0:	2182      	movs	r1, #130	; 0x82
 800b0a2:	4802      	ldr	r0, [pc, #8]	; (800b0ac <BusFault_Handler+0x10>)
 800b0a4:	f7f7 f98a 	bl	80023bc <LOG_REPORT>
 800b0a8:	e7fa      	b.n	800b0a0 <BusFault_Handler+0x4>
 800b0aa:	bf00      	nop
 800b0ac:	0801b4a4 	.word	0x0801b4a4

0800b0b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b0b4:	e7fe      	b.n	800b0b4 <UsageFault_Handler+0x4>

0800b0b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b0b6:	b480      	push	{r7}
 800b0b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b0ba:	bf00      	nop
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr

0800b0c4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800b0c8:	4802      	ldr	r0, [pc, #8]	; (800b0d4 <DMA1_Stream4_IRQHandler+0x10>)
 800b0ca:	f000 fca3 	bl	800ba14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800b0ce:	bf00      	nop
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	2000edf0 	.word	0x2000edf0

0800b0d8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800b0dc:	4802      	ldr	r0, [pc, #8]	; (800b0e8 <UART4_IRQHandler+0x10>)
 800b0de:	f003 fc0f 	bl	800e900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800b0e2:	bf00      	nop
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	2000edb0 	.word	0x2000edb0

0800b0ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b0f0:	4802      	ldr	r0, [pc, #8]	; (800b0fc <TIM6_DAC_IRQHandler+0x10>)
 800b0f2:	f002 ff9a 	bl	800e02a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b0f6:	bf00      	nop
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	2000ecf0 	.word	0x2000ecf0

0800b100 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 800b104:	4b05      	ldr	r3, [pc, #20]	; (800b11c <TIM7_IRQHandler+0x1c>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2101      	movs	r1, #1
 800b10a:	4618      	mov	r0, r3
 800b10c:	f007 fadc 	bl	80126c8 <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800b110:	4803      	ldr	r0, [pc, #12]	; (800b120 <TIM7_IRQHandler+0x20>)
 800b112:	f002 ff8a 	bl	800e02a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 800b116:	bf00      	nop
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	2000de24 	.word	0x2000de24
 800b120:	2000ed70 	.word	0x2000ed70

0800b124 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b128:	4802      	ldr	r0, [pc, #8]	; (800b134 <OTG_FS_IRQHandler+0x10>)
 800b12a:	f001 fa43 	bl	800c5b4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b12e:	bf00      	nop
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	2000f72c 	.word	0x2000f72c

0800b138 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b084      	sub	sp, #16
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b140:	4b11      	ldr	r3, [pc, #68]	; (800b188 <_sbrk+0x50>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d102      	bne.n	800b14e <_sbrk+0x16>
		heap_end = &end;
 800b148:	4b0f      	ldr	r3, [pc, #60]	; (800b188 <_sbrk+0x50>)
 800b14a:	4a10      	ldr	r2, [pc, #64]	; (800b18c <_sbrk+0x54>)
 800b14c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b14e:	4b0e      	ldr	r3, [pc, #56]	; (800b188 <_sbrk+0x50>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b154:	4b0c      	ldr	r3, [pc, #48]	; (800b188 <_sbrk+0x50>)
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	4413      	add	r3, r2
 800b15c:	466a      	mov	r2, sp
 800b15e:	4293      	cmp	r3, r2
 800b160:	d907      	bls.n	800b172 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b162:	f00a fdc1 	bl	8015ce8 <__errno>
 800b166:	4602      	mov	r2, r0
 800b168:	230c      	movs	r3, #12
 800b16a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800b16c:	f04f 33ff 	mov.w	r3, #4294967295
 800b170:	e006      	b.n	800b180 <_sbrk+0x48>
	}

	heap_end += incr;
 800b172:	4b05      	ldr	r3, [pc, #20]	; (800b188 <_sbrk+0x50>)
 800b174:	681a      	ldr	r2, [r3, #0]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	4413      	add	r3, r2
 800b17a:	4a03      	ldr	r2, [pc, #12]	; (800b188 <_sbrk+0x50>)
 800b17c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b17e:	68fb      	ldr	r3, [r7, #12]
}
 800b180:	4618      	mov	r0, r3
 800b182:	3710      	adds	r7, #16
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}
 800b188:	20002858 	.word	0x20002858
 800b18c:	2000fb38 	.word	0x2000fb38

0800b190 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b190:	b480      	push	{r7}
 800b192:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b194:	4b08      	ldr	r3, [pc, #32]	; (800b1b8 <SystemInit+0x28>)
 800b196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b19a:	4a07      	ldr	r2, [pc, #28]	; (800b1b8 <SystemInit+0x28>)
 800b19c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b1a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b1a4:	4b04      	ldr	r3, [pc, #16]	; (800b1b8 <SystemInit+0x28>)
 800b1a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b1aa:	609a      	str	r2, [r3, #8]
#endif
}
 800b1ac:	bf00      	nop
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr
 800b1b6:	bf00      	nop
 800b1b8:	e000ed00 	.word	0xe000ed00

0800b1bc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b086      	sub	sp, #24
 800b1c0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b1c2:	f107 0308 	add.w	r3, r7, #8
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	601a      	str	r2, [r3, #0]
 800b1ca:	605a      	str	r2, [r3, #4]
 800b1cc:	609a      	str	r2, [r3, #8]
 800b1ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b1d0:	463b      	mov	r3, r7
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	601a      	str	r2, [r3, #0]
 800b1d6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800b1d8:	4b1e      	ldr	r3, [pc, #120]	; (800b254 <MX_TIM2_Init+0x98>)
 800b1da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b1de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25000;
 800b1e0:	4b1c      	ldr	r3, [pc, #112]	; (800b254 <MX_TIM2_Init+0x98>)
 800b1e2:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800b1e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b1e8:	4b1a      	ldr	r3, [pc, #104]	; (800b254 <MX_TIM2_Init+0x98>)
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 800b1ee:	4b19      	ldr	r3, [pc, #100]	; (800b254 <MX_TIM2_Init+0x98>)
 800b1f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b1f6:	4b17      	ldr	r3, [pc, #92]	; (800b254 <MX_TIM2_Init+0x98>)
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b1fc:	4b15      	ldr	r3, [pc, #84]	; (800b254 <MX_TIM2_Init+0x98>)
 800b1fe:	2200      	movs	r2, #0
 800b200:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b202:	4814      	ldr	r0, [pc, #80]	; (800b254 <MX_TIM2_Init+0x98>)
 800b204:	f002 fe9e 	bl	800df44 <HAL_TIM_Base_Init>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d001      	beq.n	800b212 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800b20e:	f7fa fa8d 	bl	800572c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b216:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b218:	f107 0308 	add.w	r3, r7, #8
 800b21c:	4619      	mov	r1, r3
 800b21e:	480d      	ldr	r0, [pc, #52]	; (800b254 <MX_TIM2_Init+0x98>)
 800b220:	f003 f80b 	bl	800e23a <HAL_TIM_ConfigClockSource>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d001      	beq.n	800b22e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800b22a:	f7fa fa7f 	bl	800572c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b22e:	2300      	movs	r3, #0
 800b230:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b232:	2300      	movs	r3, #0
 800b234:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b236:	463b      	mov	r3, r7
 800b238:	4619      	mov	r1, r3
 800b23a:	4806      	ldr	r0, [pc, #24]	; (800b254 <MX_TIM2_Init+0x98>)
 800b23c:	f003 fa16 	bl	800e66c <HAL_TIMEx_MasterConfigSynchronization>
 800b240:	4603      	mov	r3, r0
 800b242:	2b00      	cmp	r3, #0
 800b244:	d001      	beq.n	800b24a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800b246:	f7fa fa71 	bl	800572c <Error_Handler>
  }

}
 800b24a:	bf00      	nop
 800b24c:	3718      	adds	r7, #24
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	2000ed30 	.word	0x2000ed30

0800b258 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b25e:	463b      	mov	r3, r7
 800b260:	2200      	movs	r2, #0
 800b262:	601a      	str	r2, [r3, #0]
 800b264:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800b266:	4b15      	ldr	r3, [pc, #84]	; (800b2bc <MX_TIM7_Init+0x64>)
 800b268:	4a15      	ldr	r2, [pc, #84]	; (800b2c0 <MX_TIM7_Init+0x68>)
 800b26a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800b26c:	4b13      	ldr	r3, [pc, #76]	; (800b2bc <MX_TIM7_Init+0x64>)
 800b26e:	2253      	movs	r2, #83	; 0x53
 800b270:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b272:	4b12      	ldr	r3, [pc, #72]	; (800b2bc <MX_TIM7_Init+0x64>)
 800b274:	2200      	movs	r2, #0
 800b276:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800b278:	4b10      	ldr	r3, [pc, #64]	; (800b2bc <MX_TIM7_Init+0x64>)
 800b27a:	f242 720f 	movw	r2, #9999	; 0x270f
 800b27e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b280:	4b0e      	ldr	r3, [pc, #56]	; (800b2bc <MX_TIM7_Init+0x64>)
 800b282:	2200      	movs	r2, #0
 800b284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800b286:	480d      	ldr	r0, [pc, #52]	; (800b2bc <MX_TIM7_Init+0x64>)
 800b288:	f002 fe5c 	bl	800df44 <HAL_TIM_Base_Init>
 800b28c:	4603      	mov	r3, r0
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d001      	beq.n	800b296 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800b292:	f7fa fa4b 	bl	800572c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b296:	2300      	movs	r3, #0
 800b298:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b29a:	2300      	movs	r3, #0
 800b29c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800b29e:	463b      	mov	r3, r7
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	4806      	ldr	r0, [pc, #24]	; (800b2bc <MX_TIM7_Init+0x64>)
 800b2a4:	f003 f9e2 	bl	800e66c <HAL_TIMEx_MasterConfigSynchronization>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d001      	beq.n	800b2b2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800b2ae:	f7fa fa3d 	bl	800572c <Error_Handler>
  }

}
 800b2b2:	bf00      	nop
 800b2b4:	3708      	adds	r7, #8
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	2000ed70 	.word	0x2000ed70
 800b2c0:	40001400 	.word	0x40001400

0800b2c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2d4:	d10e      	bne.n	800b2f4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	60fb      	str	r3, [r7, #12]
 800b2da:	4b16      	ldr	r3, [pc, #88]	; (800b334 <HAL_TIM_Base_MspInit+0x70>)
 800b2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2de:	4a15      	ldr	r2, [pc, #84]	; (800b334 <HAL_TIM_Base_MspInit+0x70>)
 800b2e0:	f043 0301 	orr.w	r3, r3, #1
 800b2e4:	6413      	str	r3, [r2, #64]	; 0x40
 800b2e6:	4b13      	ldr	r3, [pc, #76]	; (800b334 <HAL_TIM_Base_MspInit+0x70>)
 800b2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ea:	f003 0301 	and.w	r3, r3, #1
 800b2ee:	60fb      	str	r3, [r7, #12]
 800b2f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800b2f2:	e01a      	b.n	800b32a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4a0f      	ldr	r2, [pc, #60]	; (800b338 <HAL_TIM_Base_MspInit+0x74>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d115      	bne.n	800b32a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b2fe:	2300      	movs	r3, #0
 800b300:	60bb      	str	r3, [r7, #8]
 800b302:	4b0c      	ldr	r3, [pc, #48]	; (800b334 <HAL_TIM_Base_MspInit+0x70>)
 800b304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b306:	4a0b      	ldr	r2, [pc, #44]	; (800b334 <HAL_TIM_Base_MspInit+0x70>)
 800b308:	f043 0320 	orr.w	r3, r3, #32
 800b30c:	6413      	str	r3, [r2, #64]	; 0x40
 800b30e:	4b09      	ldr	r3, [pc, #36]	; (800b334 <HAL_TIM_Base_MspInit+0x70>)
 800b310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b312:	f003 0320 	and.w	r3, r3, #32
 800b316:	60bb      	str	r3, [r7, #8]
 800b318:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800b31a:	2200      	movs	r2, #0
 800b31c:	2105      	movs	r1, #5
 800b31e:	2037      	movs	r0, #55	; 0x37
 800b320:	f000 fa26 	bl	800b770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800b324:	2037      	movs	r0, #55	; 0x37
 800b326:	f000 fa3f 	bl	800b7a8 <HAL_NVIC_EnableIRQ>
}
 800b32a:	bf00      	nop
 800b32c:	3710      	adds	r7, #16
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	40023800 	.word	0x40023800
 800b338:	40001400 	.word	0x40001400

0800b33c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800b340:	4b11      	ldr	r3, [pc, #68]	; (800b388 <MX_UART4_Init+0x4c>)
 800b342:	4a12      	ldr	r2, [pc, #72]	; (800b38c <MX_UART4_Init+0x50>)
 800b344:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b346:	4b10      	ldr	r3, [pc, #64]	; (800b388 <MX_UART4_Init+0x4c>)
 800b348:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b34c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800b34e:	4b0e      	ldr	r3, [pc, #56]	; (800b388 <MX_UART4_Init+0x4c>)
 800b350:	2200      	movs	r2, #0
 800b352:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b354:	4b0c      	ldr	r3, [pc, #48]	; (800b388 <MX_UART4_Init+0x4c>)
 800b356:	2200      	movs	r2, #0
 800b358:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b35a:	4b0b      	ldr	r3, [pc, #44]	; (800b388 <MX_UART4_Init+0x4c>)
 800b35c:	2200      	movs	r2, #0
 800b35e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b360:	4b09      	ldr	r3, [pc, #36]	; (800b388 <MX_UART4_Init+0x4c>)
 800b362:	220c      	movs	r2, #12
 800b364:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b366:	4b08      	ldr	r3, [pc, #32]	; (800b388 <MX_UART4_Init+0x4c>)
 800b368:	2200      	movs	r2, #0
 800b36a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b36c:	4b06      	ldr	r3, [pc, #24]	; (800b388 <MX_UART4_Init+0x4c>)
 800b36e:	2200      	movs	r2, #0
 800b370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b372:	4805      	ldr	r0, [pc, #20]	; (800b388 <MX_UART4_Init+0x4c>)
 800b374:	f003 fa0a 	bl	800e78c <HAL_UART_Init>
 800b378:	4603      	mov	r3, r0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d001      	beq.n	800b382 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800b37e:	f7fa f9d5 	bl	800572c <Error_Handler>
  }

}
 800b382:	bf00      	nop
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	2000edb0 	.word	0x2000edb0
 800b38c:	40004c00 	.word	0x40004c00

0800b390 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b08a      	sub	sp, #40	; 0x28
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b398:	f107 0314 	add.w	r3, r7, #20
 800b39c:	2200      	movs	r2, #0
 800b39e:	601a      	str	r2, [r3, #0]
 800b3a0:	605a      	str	r2, [r3, #4]
 800b3a2:	609a      	str	r2, [r3, #8]
 800b3a4:	60da      	str	r2, [r3, #12]
 800b3a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a34      	ldr	r2, [pc, #208]	; (800b480 <HAL_UART_MspInit+0xf0>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d161      	bne.n	800b476 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	613b      	str	r3, [r7, #16]
 800b3b6:	4b33      	ldr	r3, [pc, #204]	; (800b484 <HAL_UART_MspInit+0xf4>)
 800b3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ba:	4a32      	ldr	r2, [pc, #200]	; (800b484 <HAL_UART_MspInit+0xf4>)
 800b3bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3c0:	6413      	str	r3, [r2, #64]	; 0x40
 800b3c2:	4b30      	ldr	r3, [pc, #192]	; (800b484 <HAL_UART_MspInit+0xf4>)
 800b3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b3ca:	613b      	str	r3, [r7, #16]
 800b3cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	60fb      	str	r3, [r7, #12]
 800b3d2:	4b2c      	ldr	r3, [pc, #176]	; (800b484 <HAL_UART_MspInit+0xf4>)
 800b3d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d6:	4a2b      	ldr	r2, [pc, #172]	; (800b484 <HAL_UART_MspInit+0xf4>)
 800b3d8:	f043 0301 	orr.w	r3, r3, #1
 800b3dc:	6313      	str	r3, [r2, #48]	; 0x30
 800b3de:	4b29      	ldr	r3, [pc, #164]	; (800b484 <HAL_UART_MspInit+0xf4>)
 800b3e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3e2:	f003 0301 	and.w	r3, r3, #1
 800b3e6:	60fb      	str	r3, [r7, #12]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b3ea:	2303      	movs	r3, #3
 800b3ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3ee:	2302      	movs	r3, #2
 800b3f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3f6:	2303      	movs	r3, #3
 800b3f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800b3fa:	2308      	movs	r3, #8
 800b3fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b3fe:	f107 0314 	add.w	r3, r7, #20
 800b402:	4619      	mov	r1, r3
 800b404:	4820      	ldr	r0, [pc, #128]	; (800b488 <HAL_UART_MspInit+0xf8>)
 800b406:	f000 fd7b 	bl	800bf00 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800b40a:	4b20      	ldr	r3, [pc, #128]	; (800b48c <HAL_UART_MspInit+0xfc>)
 800b40c:	4a20      	ldr	r2, [pc, #128]	; (800b490 <HAL_UART_MspInit+0x100>)
 800b40e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800b410:	4b1e      	ldr	r3, [pc, #120]	; (800b48c <HAL_UART_MspInit+0xfc>)
 800b412:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b416:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b418:	4b1c      	ldr	r3, [pc, #112]	; (800b48c <HAL_UART_MspInit+0xfc>)
 800b41a:	2240      	movs	r2, #64	; 0x40
 800b41c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b41e:	4b1b      	ldr	r3, [pc, #108]	; (800b48c <HAL_UART_MspInit+0xfc>)
 800b420:	2200      	movs	r2, #0
 800b422:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b424:	4b19      	ldr	r3, [pc, #100]	; (800b48c <HAL_UART_MspInit+0xfc>)
 800b426:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b42a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b42c:	4b17      	ldr	r3, [pc, #92]	; (800b48c <HAL_UART_MspInit+0xfc>)
 800b42e:	2200      	movs	r2, #0
 800b430:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b432:	4b16      	ldr	r3, [pc, #88]	; (800b48c <HAL_UART_MspInit+0xfc>)
 800b434:	2200      	movs	r2, #0
 800b436:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800b438:	4b14      	ldr	r3, [pc, #80]	; (800b48c <HAL_UART_MspInit+0xfc>)
 800b43a:	2200      	movs	r2, #0
 800b43c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b43e:	4b13      	ldr	r3, [pc, #76]	; (800b48c <HAL_UART_MspInit+0xfc>)
 800b440:	2200      	movs	r2, #0
 800b442:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b444:	4b11      	ldr	r3, [pc, #68]	; (800b48c <HAL_UART_MspInit+0xfc>)
 800b446:	2200      	movs	r2, #0
 800b448:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800b44a:	4810      	ldr	r0, [pc, #64]	; (800b48c <HAL_UART_MspInit+0xfc>)
 800b44c:	f000 f9ba 	bl	800b7c4 <HAL_DMA_Init>
 800b450:	4603      	mov	r3, r0
 800b452:	2b00      	cmp	r3, #0
 800b454:	d001      	beq.n	800b45a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800b456:	f7fa f969 	bl	800572c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	4a0b      	ldr	r2, [pc, #44]	; (800b48c <HAL_UART_MspInit+0xfc>)
 800b45e:	631a      	str	r2, [r3, #48]	; 0x30
 800b460:	4a0a      	ldr	r2, [pc, #40]	; (800b48c <HAL_UART_MspInit+0xfc>)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800b466:	2200      	movs	r2, #0
 800b468:	2105      	movs	r1, #5
 800b46a:	2034      	movs	r0, #52	; 0x34
 800b46c:	f000 f980 	bl	800b770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800b470:	2034      	movs	r0, #52	; 0x34
 800b472:	f000 f999 	bl	800b7a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800b476:	bf00      	nop
 800b478:	3728      	adds	r7, #40	; 0x28
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	40004c00 	.word	0x40004c00
 800b484:	40023800 	.word	0x40023800
 800b488:	40020000 	.word	0x40020000
 800b48c:	2000edf0 	.word	0x2000edf0
 800b490:	40026070 	.word	0x40026070

0800b494 <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4a0c      	ldr	r2, [pc, #48]	; (800b4d4 <HAL_UART_TxCpltCallback+0x40>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d112      	bne.n	800b4cc <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800b4a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b4aa:	490b      	ldr	r1, [pc, #44]	; (800b4d8 <HAL_UART_TxCpltCallback+0x44>)
 800b4ac:	480b      	ldr	r0, [pc, #44]	; (800b4dc <HAL_UART_TxCpltCallback+0x48>)
 800b4ae:	f7fa f9f7 	bl	80058a0 <ringBuff_PopArray>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 800b4b6:	89fb      	ldrh	r3, [r7, #14]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d006      	beq.n	800b4ca <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800b4bc:	89fb      	ldrh	r3, [r7, #14]
 800b4be:	461a      	mov	r2, r3
 800b4c0:	4905      	ldr	r1, [pc, #20]	; (800b4d8 <HAL_UART_TxCpltCallback+0x44>)
 800b4c2:	4807      	ldr	r0, [pc, #28]	; (800b4e0 <HAL_UART_TxCpltCallback+0x4c>)
 800b4c4:	f003 f9b0 	bl	800e828 <HAL_UART_Transmit_DMA>
 800b4c8:	e000      	b.n	800b4cc <HAL_UART_TxCpltCallback+0x38>
			return;
 800b4ca:	bf00      	nop
	}
}
 800b4cc:	3710      	adds	r7, #16
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	40004c00 	.word	0x40004c00
 800b4d8:	2000dd20 	.word	0x2000dd20
 800b4dc:	20001070 	.word	0x20001070
 800b4e0:	2000edb0 	.word	0x2000edb0

0800b4e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b4e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b51c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b4e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b4ea:	e003      	b.n	800b4f4 <LoopCopyDataInit>

0800b4ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b4ec:	4b0c      	ldr	r3, [pc, #48]	; (800b520 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b4ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b4f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b4f2:	3104      	adds	r1, #4

0800b4f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b4f4:	480b      	ldr	r0, [pc, #44]	; (800b524 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b4f6:	4b0c      	ldr	r3, [pc, #48]	; (800b528 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b4f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b4fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b4fc:	d3f6      	bcc.n	800b4ec <CopyDataInit>
  ldr  r2, =_sbss
 800b4fe:	4a0b      	ldr	r2, [pc, #44]	; (800b52c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b500:	e002      	b.n	800b508 <LoopFillZerobss>

0800b502 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b502:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b504:	f842 3b04 	str.w	r3, [r2], #4

0800b508 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b508:	4b09      	ldr	r3, [pc, #36]	; (800b530 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b50a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b50c:	d3f9      	bcc.n	800b502 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b50e:	f7ff fe3f 	bl	800b190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b512:	f00a fbef 	bl	8015cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b516:	f7fa f875 	bl	8005604 <main>
  bx  lr    
 800b51a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b51c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b520:	0801ba10 	.word	0x0801ba10
  ldr  r0, =_sdata
 800b524:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b528:	200023e0 	.word	0x200023e0
  ldr  r2, =_sbss
 800b52c:	200023e0 	.word	0x200023e0
  ldr  r3, = _ebss
 800b530:	2000fb38 	.word	0x2000fb38

0800b534 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b534:	e7fe      	b.n	800b534 <ADC_IRQHandler>
	...

0800b538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b53c:	4b0e      	ldr	r3, [pc, #56]	; (800b578 <HAL_Init+0x40>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a0d      	ldr	r2, [pc, #52]	; (800b578 <HAL_Init+0x40>)
 800b542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b546:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b548:	4b0b      	ldr	r3, [pc, #44]	; (800b578 <HAL_Init+0x40>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4a0a      	ldr	r2, [pc, #40]	; (800b578 <HAL_Init+0x40>)
 800b54e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b552:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b554:	4b08      	ldr	r3, [pc, #32]	; (800b578 <HAL_Init+0x40>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a07      	ldr	r2, [pc, #28]	; (800b578 <HAL_Init+0x40>)
 800b55a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b55e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b560:	2003      	movs	r0, #3
 800b562:	f000 f8fa 	bl	800b75a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b566:	2000      	movs	r0, #0
 800b568:	f7ff fd22 	bl	800afb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b56c:	f7ff fcf4 	bl	800af58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b570:	2300      	movs	r3, #0
}
 800b572:	4618      	mov	r0, r3
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	40023c00 	.word	0x40023c00

0800b57c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b57c:	b480      	push	{r7}
 800b57e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b580:	4b06      	ldr	r3, [pc, #24]	; (800b59c <HAL_IncTick+0x20>)
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	461a      	mov	r2, r3
 800b586:	4b06      	ldr	r3, [pc, #24]	; (800b5a0 <HAL_IncTick+0x24>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4413      	add	r3, r2
 800b58c:	4a04      	ldr	r2, [pc, #16]	; (800b5a0 <HAL_IncTick+0x24>)
 800b58e:	6013      	str	r3, [r2, #0]
}
 800b590:	bf00      	nop
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	20002090 	.word	0x20002090
 800b5a0:	2000ee50 	.word	0x2000ee50

0800b5a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	af00      	add	r7, sp, #0
  return uwTick;
 800b5a8:	4b03      	ldr	r3, [pc, #12]	; (800b5b8 <HAL_GetTick+0x14>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr
 800b5b6:	bf00      	nop
 800b5b8:	2000ee50 	.word	0x2000ee50

0800b5bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b5c4:	f7ff ffee 	bl	800b5a4 <HAL_GetTick>
 800b5c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5d4:	d005      	beq.n	800b5e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b5d6:	4b09      	ldr	r3, [pc, #36]	; (800b5fc <HAL_Delay+0x40>)
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	461a      	mov	r2, r3
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	4413      	add	r3, r2
 800b5e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b5e2:	bf00      	nop
 800b5e4:	f7ff ffde 	bl	800b5a4 <HAL_GetTick>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	1ad3      	subs	r3, r2, r3
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d8f7      	bhi.n	800b5e4 <HAL_Delay+0x28>
  {
  }
}
 800b5f4:	bf00      	nop
 800b5f6:	3710      	adds	r7, #16
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}
 800b5fc:	20002090 	.word	0x20002090

0800b600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b600:	b480      	push	{r7}
 800b602:	b085      	sub	sp, #20
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f003 0307 	and.w	r3, r3, #7
 800b60e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b610:	4b0c      	ldr	r3, [pc, #48]	; (800b644 <__NVIC_SetPriorityGrouping+0x44>)
 800b612:	68db      	ldr	r3, [r3, #12]
 800b614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b616:	68ba      	ldr	r2, [r7, #8]
 800b618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b61c:	4013      	ands	r3, r2
 800b61e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b62c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b632:	4a04      	ldr	r2, [pc, #16]	; (800b644 <__NVIC_SetPriorityGrouping+0x44>)
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	60d3      	str	r3, [r2, #12]
}
 800b638:	bf00      	nop
 800b63a:	3714      	adds	r7, #20
 800b63c:	46bd      	mov	sp, r7
 800b63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b642:	4770      	bx	lr
 800b644:	e000ed00 	.word	0xe000ed00

0800b648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b648:	b480      	push	{r7}
 800b64a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b64c:	4b04      	ldr	r3, [pc, #16]	; (800b660 <__NVIC_GetPriorityGrouping+0x18>)
 800b64e:	68db      	ldr	r3, [r3, #12]
 800b650:	0a1b      	lsrs	r3, r3, #8
 800b652:	f003 0307 	and.w	r3, r3, #7
}
 800b656:	4618      	mov	r0, r3
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr
 800b660:	e000ed00 	.word	0xe000ed00

0800b664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	4603      	mov	r3, r0
 800b66c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b66e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b672:	2b00      	cmp	r3, #0
 800b674:	db0b      	blt.n	800b68e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b676:	79fb      	ldrb	r3, [r7, #7]
 800b678:	f003 021f 	and.w	r2, r3, #31
 800b67c:	4907      	ldr	r1, [pc, #28]	; (800b69c <__NVIC_EnableIRQ+0x38>)
 800b67e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b682:	095b      	lsrs	r3, r3, #5
 800b684:	2001      	movs	r0, #1
 800b686:	fa00 f202 	lsl.w	r2, r0, r2
 800b68a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b68e:	bf00      	nop
 800b690:	370c      	adds	r7, #12
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr
 800b69a:	bf00      	nop
 800b69c:	e000e100 	.word	0xe000e100

0800b6a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b083      	sub	sp, #12
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	6039      	str	r1, [r7, #0]
 800b6aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b6ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	db0a      	blt.n	800b6ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	b2da      	uxtb	r2, r3
 800b6b8:	490c      	ldr	r1, [pc, #48]	; (800b6ec <__NVIC_SetPriority+0x4c>)
 800b6ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6be:	0112      	lsls	r2, r2, #4
 800b6c0:	b2d2      	uxtb	r2, r2
 800b6c2:	440b      	add	r3, r1
 800b6c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b6c8:	e00a      	b.n	800b6e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	b2da      	uxtb	r2, r3
 800b6ce:	4908      	ldr	r1, [pc, #32]	; (800b6f0 <__NVIC_SetPriority+0x50>)
 800b6d0:	79fb      	ldrb	r3, [r7, #7]
 800b6d2:	f003 030f 	and.w	r3, r3, #15
 800b6d6:	3b04      	subs	r3, #4
 800b6d8:	0112      	lsls	r2, r2, #4
 800b6da:	b2d2      	uxtb	r2, r2
 800b6dc:	440b      	add	r3, r1
 800b6de:	761a      	strb	r2, [r3, #24]
}
 800b6e0:	bf00      	nop
 800b6e2:	370c      	adds	r7, #12
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr
 800b6ec:	e000e100 	.word	0xe000e100
 800b6f0:	e000ed00 	.word	0xe000ed00

0800b6f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b089      	sub	sp, #36	; 0x24
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f003 0307 	and.w	r3, r3, #7
 800b706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b708:	69fb      	ldr	r3, [r7, #28]
 800b70a:	f1c3 0307 	rsb	r3, r3, #7
 800b70e:	2b04      	cmp	r3, #4
 800b710:	bf28      	it	cs
 800b712:	2304      	movcs	r3, #4
 800b714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b716:	69fb      	ldr	r3, [r7, #28]
 800b718:	3304      	adds	r3, #4
 800b71a:	2b06      	cmp	r3, #6
 800b71c:	d902      	bls.n	800b724 <NVIC_EncodePriority+0x30>
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	3b03      	subs	r3, #3
 800b722:	e000      	b.n	800b726 <NVIC_EncodePriority+0x32>
 800b724:	2300      	movs	r3, #0
 800b726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b728:	f04f 32ff 	mov.w	r2, #4294967295
 800b72c:	69bb      	ldr	r3, [r7, #24]
 800b72e:	fa02 f303 	lsl.w	r3, r2, r3
 800b732:	43da      	mvns	r2, r3
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	401a      	ands	r2, r3
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b73c:	f04f 31ff 	mov.w	r1, #4294967295
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	fa01 f303 	lsl.w	r3, r1, r3
 800b746:	43d9      	mvns	r1, r3
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b74c:	4313      	orrs	r3, r2
         );
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3724      	adds	r7, #36	; 0x24
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr

0800b75a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b75a:	b580      	push	{r7, lr}
 800b75c:	b082      	sub	sp, #8
 800b75e:	af00      	add	r7, sp, #0
 800b760:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f7ff ff4c 	bl	800b600 <__NVIC_SetPriorityGrouping>
}
 800b768:	bf00      	nop
 800b76a:	3708      	adds	r7, #8
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b770:	b580      	push	{r7, lr}
 800b772:	b086      	sub	sp, #24
 800b774:	af00      	add	r7, sp, #0
 800b776:	4603      	mov	r3, r0
 800b778:	60b9      	str	r1, [r7, #8]
 800b77a:	607a      	str	r2, [r7, #4]
 800b77c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b77e:	2300      	movs	r3, #0
 800b780:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b782:	f7ff ff61 	bl	800b648 <__NVIC_GetPriorityGrouping>
 800b786:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	68b9      	ldr	r1, [r7, #8]
 800b78c:	6978      	ldr	r0, [r7, #20]
 800b78e:	f7ff ffb1 	bl	800b6f4 <NVIC_EncodePriority>
 800b792:	4602      	mov	r2, r0
 800b794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b798:	4611      	mov	r1, r2
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7ff ff80 	bl	800b6a0 <__NVIC_SetPriority>
}
 800b7a0:	bf00      	nop
 800b7a2:	3718      	adds	r7, #24
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b7b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7ff ff54 	bl	800b664 <__NVIC_EnableIRQ>
}
 800b7bc:	bf00      	nop
 800b7be:	3708      	adds	r7, #8
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b086      	sub	sp, #24
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b7d0:	f7ff fee8 	bl	800b5a4 <HAL_GetTick>
 800b7d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d101      	bne.n	800b7e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	e099      	b.n	800b914 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2202      	movs	r2, #2
 800b7ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	681a      	ldr	r2, [r3, #0]
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f022 0201 	bic.w	r2, r2, #1
 800b7fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b800:	e00f      	b.n	800b822 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b802:	f7ff fecf 	bl	800b5a4 <HAL_GetTick>
 800b806:	4602      	mov	r2, r0
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	1ad3      	subs	r3, r2, r3
 800b80c:	2b05      	cmp	r3, #5
 800b80e:	d908      	bls.n	800b822 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2220      	movs	r2, #32
 800b814:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2203      	movs	r2, #3
 800b81a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b81e:	2303      	movs	r3, #3
 800b820:	e078      	b.n	800b914 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f003 0301 	and.w	r3, r3, #1
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d1e8      	bne.n	800b802 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b838:	697a      	ldr	r2, [r7, #20]
 800b83a:	4b38      	ldr	r3, [pc, #224]	; (800b91c <HAL_DMA_Init+0x158>)
 800b83c:	4013      	ands	r3, r2
 800b83e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	685a      	ldr	r2, [r3, #4]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	689b      	ldr	r3, [r3, #8]
 800b848:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b84e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	691b      	ldr	r3, [r3, #16]
 800b854:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b85a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	699b      	ldr	r3, [r3, #24]
 800b860:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b866:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6a1b      	ldr	r3, [r3, #32]
 800b86c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b86e:	697a      	ldr	r2, [r7, #20]
 800b870:	4313      	orrs	r3, r2
 800b872:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b878:	2b04      	cmp	r3, #4
 800b87a:	d107      	bne.n	800b88c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b884:	4313      	orrs	r3, r2
 800b886:	697a      	ldr	r2, [r7, #20]
 800b888:	4313      	orrs	r3, r2
 800b88a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	697a      	ldr	r2, [r7, #20]
 800b892:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	695b      	ldr	r3, [r3, #20]
 800b89a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	f023 0307 	bic.w	r3, r3, #7
 800b8a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a8:	697a      	ldr	r2, [r7, #20]
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b2:	2b04      	cmp	r3, #4
 800b8b4:	d117      	bne.n	800b8e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ba:	697a      	ldr	r2, [r7, #20]
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d00e      	beq.n	800b8e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 fa9f 	bl	800be0c <DMA_CheckFifoParam>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d008      	beq.n	800b8e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2240      	movs	r2, #64	; 0x40
 800b8d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2201      	movs	r2, #1
 800b8de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	e016      	b.n	800b914 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	697a      	ldr	r2, [r7, #20]
 800b8ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f000 fa56 	bl	800bda0 <DMA_CalcBaseAndBitshift>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8fc:	223f      	movs	r2, #63	; 0x3f
 800b8fe:	409a      	lsls	r2, r3
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2200      	movs	r2, #0
 800b908:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2201      	movs	r2, #1
 800b90e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b912:	2300      	movs	r3, #0
}
 800b914:	4618      	mov	r0, r3
 800b916:	3718      	adds	r7, #24
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}
 800b91c:	f010803f 	.word	0xf010803f

0800b920 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b086      	sub	sp, #24
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	60b9      	str	r1, [r7, #8]
 800b92a:	607a      	str	r2, [r7, #4]
 800b92c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b92e:	2300      	movs	r3, #0
 800b930:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b936:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b93e:	2b01      	cmp	r3, #1
 800b940:	d101      	bne.n	800b946 <HAL_DMA_Start_IT+0x26>
 800b942:	2302      	movs	r3, #2
 800b944:	e040      	b.n	800b9c8 <HAL_DMA_Start_IT+0xa8>
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2201      	movs	r2, #1
 800b94a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b954:	b2db      	uxtb	r3, r3
 800b956:	2b01      	cmp	r3, #1
 800b958:	d12f      	bne.n	800b9ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2202      	movs	r2, #2
 800b95e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2200      	movs	r2, #0
 800b966:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	68b9      	ldr	r1, [r7, #8]
 800b96e:	68f8      	ldr	r0, [r7, #12]
 800b970:	f000 f9e8 	bl	800bd44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b978:	223f      	movs	r2, #63	; 0x3f
 800b97a:	409a      	lsls	r2, r3
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	681a      	ldr	r2, [r3, #0]
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f042 0216 	orr.w	r2, r2, #22
 800b98e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b994:	2b00      	cmp	r3, #0
 800b996:	d007      	beq.n	800b9a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f042 0208 	orr.w	r2, r2, #8
 800b9a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f042 0201 	orr.w	r2, r2, #1
 800b9b6:	601a      	str	r2, [r3, #0]
 800b9b8:	e005      	b.n	800b9c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b9c2:	2302      	movs	r3, #2
 800b9c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b9c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3718      	adds	r7, #24
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b083      	sub	sp, #12
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	2b02      	cmp	r3, #2
 800b9e2:	d004      	beq.n	800b9ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2280      	movs	r2, #128	; 0x80
 800b9e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	e00c      	b.n	800ba08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2205      	movs	r2, #5
 800b9f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	681a      	ldr	r2, [r3, #0]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f022 0201 	bic.w	r2, r2, #1
 800ba04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800ba06:	2300      	movs	r3, #0
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	370c      	adds	r7, #12
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr

0800ba14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b086      	sub	sp, #24
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ba20:	4b92      	ldr	r3, [pc, #584]	; (800bc6c <HAL_DMA_IRQHandler+0x258>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4a92      	ldr	r2, [pc, #584]	; (800bc70 <HAL_DMA_IRQHandler+0x25c>)
 800ba26:	fba2 2303 	umull	r2, r3, r2, r3
 800ba2a:	0a9b      	lsrs	r3, r3, #10
 800ba2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba3e:	2208      	movs	r2, #8
 800ba40:	409a      	lsls	r2, r3
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	4013      	ands	r3, r2
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d01a      	beq.n	800ba80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f003 0304 	and.w	r3, r3, #4
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d013      	beq.n	800ba80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f022 0204 	bic.w	r2, r2, #4
 800ba66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba6c:	2208      	movs	r2, #8
 800ba6e:	409a      	lsls	r2, r3
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba78:	f043 0201 	orr.w	r2, r3, #1
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba84:	2201      	movs	r2, #1
 800ba86:	409a      	lsls	r2, r3
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	4013      	ands	r3, r2
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d012      	beq.n	800bab6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	695b      	ldr	r3, [r3, #20]
 800ba96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d00b      	beq.n	800bab6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800baa2:	2201      	movs	r2, #1
 800baa4:	409a      	lsls	r2, r3
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baae:	f043 0202 	orr.w	r2, r3, #2
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800baba:	2204      	movs	r2, #4
 800babc:	409a      	lsls	r2, r3
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	4013      	ands	r3, r2
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d012      	beq.n	800baec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f003 0302 	and.w	r3, r3, #2
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d00b      	beq.n	800baec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bad8:	2204      	movs	r2, #4
 800bada:	409a      	lsls	r2, r3
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bae4:	f043 0204 	orr.w	r2, r3, #4
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800baf0:	2210      	movs	r2, #16
 800baf2:	409a      	lsls	r2, r3
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	4013      	ands	r3, r2
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d043      	beq.n	800bb84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f003 0308 	and.w	r3, r3, #8
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d03c      	beq.n	800bb84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb0e:	2210      	movs	r2, #16
 800bb10:	409a      	lsls	r2, r3
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d018      	beq.n	800bb56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d108      	bne.n	800bb44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d024      	beq.n	800bb84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	4798      	blx	r3
 800bb42:	e01f      	b.n	800bb84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d01b      	beq.n	800bb84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	4798      	blx	r3
 800bb54:	e016      	b.n	800bb84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d107      	bne.n	800bb74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	681a      	ldr	r2, [r3, #0]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f022 0208 	bic.w	r2, r2, #8
 800bb72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d003      	beq.n	800bb84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb88:	2220      	movs	r2, #32
 800bb8a:	409a      	lsls	r2, r3
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	4013      	ands	r3, r2
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	f000 808e 	beq.w	800bcb2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f003 0310 	and.w	r3, r3, #16
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	f000 8086 	beq.w	800bcb2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbaa:	2220      	movs	r2, #32
 800bbac:	409a      	lsls	r2, r3
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bbb8:	b2db      	uxtb	r3, r3
 800bbba:	2b05      	cmp	r3, #5
 800bbbc:	d136      	bne.n	800bc2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	681a      	ldr	r2, [r3, #0]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f022 0216 	bic.w	r2, r2, #22
 800bbcc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	695a      	ldr	r2, [r3, #20]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bbdc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d103      	bne.n	800bbee <HAL_DMA_IRQHandler+0x1da>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d007      	beq.n	800bbfe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	681a      	ldr	r2, [r3, #0]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f022 0208 	bic.w	r2, r2, #8
 800bbfc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc02:	223f      	movs	r2, #63	; 0x3f
 800bc04:	409a      	lsls	r2, r3
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2201      	movs	r2, #1
 800bc16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d07d      	beq.n	800bd1e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	4798      	blx	r3
        }
        return;
 800bc2a:	e078      	b.n	800bd1e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d01c      	beq.n	800bc74 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d108      	bne.n	800bc5a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d030      	beq.n	800bcb2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	4798      	blx	r3
 800bc58:	e02b      	b.n	800bcb2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d027      	beq.n	800bcb2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	4798      	blx	r3
 800bc6a:	e022      	b.n	800bcb2 <HAL_DMA_IRQHandler+0x29e>
 800bc6c:	20002088 	.word	0x20002088
 800bc70:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d10f      	bne.n	800bca2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f022 0210 	bic.w	r2, r2, #16
 800bc90:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2200      	movs	r2, #0
 800bc96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d003      	beq.n	800bcb2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d032      	beq.n	800bd20 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcbe:	f003 0301 	and.w	r3, r3, #1
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d022      	beq.n	800bd0c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2205      	movs	r2, #5
 800bcca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	681a      	ldr	r2, [r3, #0]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f022 0201 	bic.w	r2, r2, #1
 800bcdc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	3301      	adds	r3, #1
 800bce2:	60bb      	str	r3, [r7, #8]
 800bce4:	697a      	ldr	r2, [r7, #20]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d307      	bcc.n	800bcfa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f003 0301 	and.w	r3, r3, #1
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d1f2      	bne.n	800bcde <HAL_DMA_IRQHandler+0x2ca>
 800bcf8:	e000      	b.n	800bcfc <HAL_DMA_IRQHandler+0x2e8>
          break;
 800bcfa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2201      	movs	r2, #1
 800bd08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d005      	beq.n	800bd20 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	4798      	blx	r3
 800bd1c:	e000      	b.n	800bd20 <HAL_DMA_IRQHandler+0x30c>
        return;
 800bd1e:	bf00      	nop
    }
  }
}
 800bd20:	3718      	adds	r7, #24
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
 800bd26:	bf00      	nop

0800bd28 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b083      	sub	sp, #12
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bd36:	b2db      	uxtb	r3, r3
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	370c      	adds	r7, #12
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr

0800bd44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b085      	sub	sp, #20
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	60f8      	str	r0, [r7, #12]
 800bd4c:	60b9      	str	r1, [r7, #8]
 800bd4e:	607a      	str	r2, [r7, #4]
 800bd50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	681a      	ldr	r2, [r3, #0]
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bd60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	683a      	ldr	r2, [r7, #0]
 800bd68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	689b      	ldr	r3, [r3, #8]
 800bd6e:	2b40      	cmp	r3, #64	; 0x40
 800bd70:	d108      	bne.n	800bd84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	687a      	ldr	r2, [r7, #4]
 800bd78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	68ba      	ldr	r2, [r7, #8]
 800bd80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800bd82:	e007      	b.n	800bd94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	68ba      	ldr	r2, [r7, #8]
 800bd8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	60da      	str	r2, [r3, #12]
}
 800bd94:	bf00      	nop
 800bd96:	3714      	adds	r7, #20
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	3b10      	subs	r3, #16
 800bdb0:	4a14      	ldr	r2, [pc, #80]	; (800be04 <DMA_CalcBaseAndBitshift+0x64>)
 800bdb2:	fba2 2303 	umull	r2, r3, r2, r3
 800bdb6:	091b      	lsrs	r3, r3, #4
 800bdb8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800bdba:	4a13      	ldr	r2, [pc, #76]	; (800be08 <DMA_CalcBaseAndBitshift+0x68>)
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	4413      	add	r3, r2
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2b03      	cmp	r3, #3
 800bdcc:	d909      	bls.n	800bde2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bdd6:	f023 0303 	bic.w	r3, r3, #3
 800bdda:	1d1a      	adds	r2, r3, #4
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	659a      	str	r2, [r3, #88]	; 0x58
 800bde0:	e007      	b.n	800bdf2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bdea:	f023 0303 	bic.w	r3, r3, #3
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3714      	adds	r7, #20
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be00:	4770      	bx	lr
 800be02:	bf00      	nop
 800be04:	aaaaaaab 	.word	0xaaaaaaab
 800be08:	0801b520 	.word	0x0801b520

0800be0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b085      	sub	sp, #20
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800be14:	2300      	movs	r3, #0
 800be16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	699b      	ldr	r3, [r3, #24]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d11f      	bne.n	800be66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	2b03      	cmp	r3, #3
 800be2a:	d855      	bhi.n	800bed8 <DMA_CheckFifoParam+0xcc>
 800be2c:	a201      	add	r2, pc, #4	; (adr r2, 800be34 <DMA_CheckFifoParam+0x28>)
 800be2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be32:	bf00      	nop
 800be34:	0800be45 	.word	0x0800be45
 800be38:	0800be57 	.word	0x0800be57
 800be3c:	0800be45 	.word	0x0800be45
 800be40:	0800bed9 	.word	0x0800bed9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d045      	beq.n	800bedc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800be50:	2301      	movs	r3, #1
 800be52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800be54:	e042      	b.n	800bedc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800be5e:	d13f      	bne.n	800bee0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800be60:	2301      	movs	r3, #1
 800be62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800be64:	e03c      	b.n	800bee0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	699b      	ldr	r3, [r3, #24]
 800be6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be6e:	d121      	bne.n	800beb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	2b03      	cmp	r3, #3
 800be74:	d836      	bhi.n	800bee4 <DMA_CheckFifoParam+0xd8>
 800be76:	a201      	add	r2, pc, #4	; (adr r2, 800be7c <DMA_CheckFifoParam+0x70>)
 800be78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be7c:	0800be8d 	.word	0x0800be8d
 800be80:	0800be93 	.word	0x0800be93
 800be84:	0800be8d 	.word	0x0800be8d
 800be88:	0800bea5 	.word	0x0800bea5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800be8c:	2301      	movs	r3, #1
 800be8e:	73fb      	strb	r3, [r7, #15]
      break;
 800be90:	e02f      	b.n	800bef2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d024      	beq.n	800bee8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800be9e:	2301      	movs	r3, #1
 800bea0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bea2:	e021      	b.n	800bee8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800beac:	d11e      	bne.n	800beec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800beae:	2301      	movs	r3, #1
 800beb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800beb2:	e01b      	b.n	800beec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	2b02      	cmp	r3, #2
 800beb8:	d902      	bls.n	800bec0 <DMA_CheckFifoParam+0xb4>
 800beba:	2b03      	cmp	r3, #3
 800bebc:	d003      	beq.n	800bec6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800bebe:	e018      	b.n	800bef2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800bec0:	2301      	movs	r3, #1
 800bec2:	73fb      	strb	r3, [r7, #15]
      break;
 800bec4:	e015      	b.n	800bef2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d00e      	beq.n	800bef0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800bed2:	2301      	movs	r3, #1
 800bed4:	73fb      	strb	r3, [r7, #15]
      break;
 800bed6:	e00b      	b.n	800bef0 <DMA_CheckFifoParam+0xe4>
      break;
 800bed8:	bf00      	nop
 800beda:	e00a      	b.n	800bef2 <DMA_CheckFifoParam+0xe6>
      break;
 800bedc:	bf00      	nop
 800bede:	e008      	b.n	800bef2 <DMA_CheckFifoParam+0xe6>
      break;
 800bee0:	bf00      	nop
 800bee2:	e006      	b.n	800bef2 <DMA_CheckFifoParam+0xe6>
      break;
 800bee4:	bf00      	nop
 800bee6:	e004      	b.n	800bef2 <DMA_CheckFifoParam+0xe6>
      break;
 800bee8:	bf00      	nop
 800beea:	e002      	b.n	800bef2 <DMA_CheckFifoParam+0xe6>
      break;   
 800beec:	bf00      	nop
 800beee:	e000      	b.n	800bef2 <DMA_CheckFifoParam+0xe6>
      break;
 800bef0:	bf00      	nop
    }
  } 
  
  return status; 
 800bef2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3714      	adds	r7, #20
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr

0800bf00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b089      	sub	sp, #36	; 0x24
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800bf12:	2300      	movs	r3, #0
 800bf14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bf16:	2300      	movs	r3, #0
 800bf18:	61fb      	str	r3, [r7, #28]
 800bf1a:	e16b      	b.n	800c1f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	69fb      	ldr	r3, [r7, #28]
 800bf20:	fa02 f303 	lsl.w	r3, r2, r3
 800bf24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	697a      	ldr	r2, [r7, #20]
 800bf2c:	4013      	ands	r3, r2
 800bf2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bf30:	693a      	ldr	r2, [r7, #16]
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	f040 815a 	bne.w	800c1ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d00b      	beq.n	800bf5a <HAL_GPIO_Init+0x5a>
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	2b02      	cmp	r3, #2
 800bf48:	d007      	beq.n	800bf5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bf4e:	2b11      	cmp	r3, #17
 800bf50:	d003      	beq.n	800bf5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	2b12      	cmp	r3, #18
 800bf58:	d130      	bne.n	800bfbc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	689b      	ldr	r3, [r3, #8]
 800bf5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	005b      	lsls	r3, r3, #1
 800bf64:	2203      	movs	r2, #3
 800bf66:	fa02 f303 	lsl.w	r3, r2, r3
 800bf6a:	43db      	mvns	r3, r3
 800bf6c:	69ba      	ldr	r2, [r7, #24]
 800bf6e:	4013      	ands	r3, r2
 800bf70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	68da      	ldr	r2, [r3, #12]
 800bf76:	69fb      	ldr	r3, [r7, #28]
 800bf78:	005b      	lsls	r3, r3, #1
 800bf7a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf7e:	69ba      	ldr	r2, [r7, #24]
 800bf80:	4313      	orrs	r3, r2
 800bf82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	69ba      	ldr	r2, [r7, #24]
 800bf88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bf90:	2201      	movs	r2, #1
 800bf92:	69fb      	ldr	r3, [r7, #28]
 800bf94:	fa02 f303 	lsl.w	r3, r2, r3
 800bf98:	43db      	mvns	r3, r3
 800bf9a:	69ba      	ldr	r2, [r7, #24]
 800bf9c:	4013      	ands	r3, r2
 800bf9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	091b      	lsrs	r3, r3, #4
 800bfa6:	f003 0201 	and.w	r2, r3, #1
 800bfaa:	69fb      	ldr	r3, [r7, #28]
 800bfac:	fa02 f303 	lsl.w	r3, r2, r3
 800bfb0:	69ba      	ldr	r2, [r7, #24]
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	69ba      	ldr	r2, [r7, #24]
 800bfba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800bfc2:	69fb      	ldr	r3, [r7, #28]
 800bfc4:	005b      	lsls	r3, r3, #1
 800bfc6:	2203      	movs	r2, #3
 800bfc8:	fa02 f303 	lsl.w	r3, r2, r3
 800bfcc:	43db      	mvns	r3, r3
 800bfce:	69ba      	ldr	r2, [r7, #24]
 800bfd0:	4013      	ands	r3, r2
 800bfd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	689a      	ldr	r2, [r3, #8]
 800bfd8:	69fb      	ldr	r3, [r7, #28]
 800bfda:	005b      	lsls	r3, r3, #1
 800bfdc:	fa02 f303 	lsl.w	r3, r2, r3
 800bfe0:	69ba      	ldr	r2, [r7, #24]
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	69ba      	ldr	r2, [r7, #24]
 800bfea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	685b      	ldr	r3, [r3, #4]
 800bff0:	2b02      	cmp	r3, #2
 800bff2:	d003      	beq.n	800bffc <HAL_GPIO_Init+0xfc>
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	2b12      	cmp	r3, #18
 800bffa:	d123      	bne.n	800c044 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bffc:	69fb      	ldr	r3, [r7, #28]
 800bffe:	08da      	lsrs	r2, r3, #3
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	3208      	adds	r2, #8
 800c004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c008:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	f003 0307 	and.w	r3, r3, #7
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	220f      	movs	r2, #15
 800c014:	fa02 f303 	lsl.w	r3, r2, r3
 800c018:	43db      	mvns	r3, r3
 800c01a:	69ba      	ldr	r2, [r7, #24]
 800c01c:	4013      	ands	r3, r2
 800c01e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	691a      	ldr	r2, [r3, #16]
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	f003 0307 	and.w	r3, r3, #7
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	fa02 f303 	lsl.w	r3, r2, r3
 800c030:	69ba      	ldr	r2, [r7, #24]
 800c032:	4313      	orrs	r3, r2
 800c034:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c036:	69fb      	ldr	r3, [r7, #28]
 800c038:	08da      	lsrs	r2, r3, #3
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	3208      	adds	r2, #8
 800c03e:	69b9      	ldr	r1, [r7, #24]
 800c040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c04a:	69fb      	ldr	r3, [r7, #28]
 800c04c:	005b      	lsls	r3, r3, #1
 800c04e:	2203      	movs	r2, #3
 800c050:	fa02 f303 	lsl.w	r3, r2, r3
 800c054:	43db      	mvns	r3, r3
 800c056:	69ba      	ldr	r2, [r7, #24]
 800c058:	4013      	ands	r3, r2
 800c05a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	f003 0203 	and.w	r2, r3, #3
 800c064:	69fb      	ldr	r3, [r7, #28]
 800c066:	005b      	lsls	r3, r3, #1
 800c068:	fa02 f303 	lsl.w	r3, r2, r3
 800c06c:	69ba      	ldr	r2, [r7, #24]
 800c06e:	4313      	orrs	r3, r2
 800c070:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	69ba      	ldr	r2, [r7, #24]
 800c076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c080:	2b00      	cmp	r3, #0
 800c082:	f000 80b4 	beq.w	800c1ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c086:	2300      	movs	r3, #0
 800c088:	60fb      	str	r3, [r7, #12]
 800c08a:	4b5f      	ldr	r3, [pc, #380]	; (800c208 <HAL_GPIO_Init+0x308>)
 800c08c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c08e:	4a5e      	ldr	r2, [pc, #376]	; (800c208 <HAL_GPIO_Init+0x308>)
 800c090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c094:	6453      	str	r3, [r2, #68]	; 0x44
 800c096:	4b5c      	ldr	r3, [pc, #368]	; (800c208 <HAL_GPIO_Init+0x308>)
 800c098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c09a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c09e:	60fb      	str	r3, [r7, #12]
 800c0a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c0a2:	4a5a      	ldr	r2, [pc, #360]	; (800c20c <HAL_GPIO_Init+0x30c>)
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	089b      	lsrs	r3, r3, #2
 800c0a8:	3302      	adds	r3, #2
 800c0aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c0b0:	69fb      	ldr	r3, [r7, #28]
 800c0b2:	f003 0303 	and.w	r3, r3, #3
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	220f      	movs	r2, #15
 800c0ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c0be:	43db      	mvns	r3, r3
 800c0c0:	69ba      	ldr	r2, [r7, #24]
 800c0c2:	4013      	ands	r3, r2
 800c0c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	4a51      	ldr	r2, [pc, #324]	; (800c210 <HAL_GPIO_Init+0x310>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d02b      	beq.n	800c126 <HAL_GPIO_Init+0x226>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	4a50      	ldr	r2, [pc, #320]	; (800c214 <HAL_GPIO_Init+0x314>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d025      	beq.n	800c122 <HAL_GPIO_Init+0x222>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	4a4f      	ldr	r2, [pc, #316]	; (800c218 <HAL_GPIO_Init+0x318>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d01f      	beq.n	800c11e <HAL_GPIO_Init+0x21e>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	4a4e      	ldr	r2, [pc, #312]	; (800c21c <HAL_GPIO_Init+0x31c>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d019      	beq.n	800c11a <HAL_GPIO_Init+0x21a>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	4a4d      	ldr	r2, [pc, #308]	; (800c220 <HAL_GPIO_Init+0x320>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d013      	beq.n	800c116 <HAL_GPIO_Init+0x216>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	4a4c      	ldr	r2, [pc, #304]	; (800c224 <HAL_GPIO_Init+0x324>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d00d      	beq.n	800c112 <HAL_GPIO_Init+0x212>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	4a4b      	ldr	r2, [pc, #300]	; (800c228 <HAL_GPIO_Init+0x328>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d007      	beq.n	800c10e <HAL_GPIO_Init+0x20e>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	4a4a      	ldr	r2, [pc, #296]	; (800c22c <HAL_GPIO_Init+0x32c>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d101      	bne.n	800c10a <HAL_GPIO_Init+0x20a>
 800c106:	2307      	movs	r3, #7
 800c108:	e00e      	b.n	800c128 <HAL_GPIO_Init+0x228>
 800c10a:	2308      	movs	r3, #8
 800c10c:	e00c      	b.n	800c128 <HAL_GPIO_Init+0x228>
 800c10e:	2306      	movs	r3, #6
 800c110:	e00a      	b.n	800c128 <HAL_GPIO_Init+0x228>
 800c112:	2305      	movs	r3, #5
 800c114:	e008      	b.n	800c128 <HAL_GPIO_Init+0x228>
 800c116:	2304      	movs	r3, #4
 800c118:	e006      	b.n	800c128 <HAL_GPIO_Init+0x228>
 800c11a:	2303      	movs	r3, #3
 800c11c:	e004      	b.n	800c128 <HAL_GPIO_Init+0x228>
 800c11e:	2302      	movs	r3, #2
 800c120:	e002      	b.n	800c128 <HAL_GPIO_Init+0x228>
 800c122:	2301      	movs	r3, #1
 800c124:	e000      	b.n	800c128 <HAL_GPIO_Init+0x228>
 800c126:	2300      	movs	r3, #0
 800c128:	69fa      	ldr	r2, [r7, #28]
 800c12a:	f002 0203 	and.w	r2, r2, #3
 800c12e:	0092      	lsls	r2, r2, #2
 800c130:	4093      	lsls	r3, r2
 800c132:	69ba      	ldr	r2, [r7, #24]
 800c134:	4313      	orrs	r3, r2
 800c136:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c138:	4934      	ldr	r1, [pc, #208]	; (800c20c <HAL_GPIO_Init+0x30c>)
 800c13a:	69fb      	ldr	r3, [r7, #28]
 800c13c:	089b      	lsrs	r3, r3, #2
 800c13e:	3302      	adds	r3, #2
 800c140:	69ba      	ldr	r2, [r7, #24]
 800c142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c146:	4b3a      	ldr	r3, [pc, #232]	; (800c230 <HAL_GPIO_Init+0x330>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	43db      	mvns	r3, r3
 800c150:	69ba      	ldr	r2, [r7, #24]
 800c152:	4013      	ands	r3, r2
 800c154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d003      	beq.n	800c16a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800c162:	69ba      	ldr	r2, [r7, #24]
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	4313      	orrs	r3, r2
 800c168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c16a:	4a31      	ldr	r2, [pc, #196]	; (800c230 <HAL_GPIO_Init+0x330>)
 800c16c:	69bb      	ldr	r3, [r7, #24]
 800c16e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c170:	4b2f      	ldr	r3, [pc, #188]	; (800c230 <HAL_GPIO_Init+0x330>)
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	43db      	mvns	r3, r3
 800c17a:	69ba      	ldr	r2, [r7, #24]
 800c17c:	4013      	ands	r3, r2
 800c17e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d003      	beq.n	800c194 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800c18c:	69ba      	ldr	r2, [r7, #24]
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	4313      	orrs	r3, r2
 800c192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c194:	4a26      	ldr	r2, [pc, #152]	; (800c230 <HAL_GPIO_Init+0x330>)
 800c196:	69bb      	ldr	r3, [r7, #24]
 800c198:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c19a:	4b25      	ldr	r3, [pc, #148]	; (800c230 <HAL_GPIO_Init+0x330>)
 800c19c:	689b      	ldr	r3, [r3, #8]
 800c19e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	43db      	mvns	r3, r3
 800c1a4:	69ba      	ldr	r2, [r7, #24]
 800c1a6:	4013      	ands	r3, r2
 800c1a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	685b      	ldr	r3, [r3, #4]
 800c1ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d003      	beq.n	800c1be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800c1b6:	69ba      	ldr	r2, [r7, #24]
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c1be:	4a1c      	ldr	r2, [pc, #112]	; (800c230 <HAL_GPIO_Init+0x330>)
 800c1c0:	69bb      	ldr	r3, [r7, #24]
 800c1c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c1c4:	4b1a      	ldr	r3, [pc, #104]	; (800c230 <HAL_GPIO_Init+0x330>)
 800c1c6:	68db      	ldr	r3, [r3, #12]
 800c1c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	43db      	mvns	r3, r3
 800c1ce:	69ba      	ldr	r2, [r7, #24]
 800c1d0:	4013      	ands	r3, r2
 800c1d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	685b      	ldr	r3, [r3, #4]
 800c1d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d003      	beq.n	800c1e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800c1e0:	69ba      	ldr	r2, [r7, #24]
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	4313      	orrs	r3, r2
 800c1e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c1e8:	4a11      	ldr	r2, [pc, #68]	; (800c230 <HAL_GPIO_Init+0x330>)
 800c1ea:	69bb      	ldr	r3, [r7, #24]
 800c1ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c1ee:	69fb      	ldr	r3, [r7, #28]
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	61fb      	str	r3, [r7, #28]
 800c1f4:	69fb      	ldr	r3, [r7, #28]
 800c1f6:	2b0f      	cmp	r3, #15
 800c1f8:	f67f ae90 	bls.w	800bf1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c1fc:	bf00      	nop
 800c1fe:	3724      	adds	r7, #36	; 0x24
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr
 800c208:	40023800 	.word	0x40023800
 800c20c:	40013800 	.word	0x40013800
 800c210:	40020000 	.word	0x40020000
 800c214:	40020400 	.word	0x40020400
 800c218:	40020800 	.word	0x40020800
 800c21c:	40020c00 	.word	0x40020c00
 800c220:	40021000 	.word	0x40021000
 800c224:	40021400 	.word	0x40021400
 800c228:	40021800 	.word	0x40021800
 800c22c:	40021c00 	.word	0x40021c00
 800c230:	40013c00 	.word	0x40013c00

0800c234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	460b      	mov	r3, r1
 800c23e:	807b      	strh	r3, [r7, #2]
 800c240:	4613      	mov	r3, r2
 800c242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c244:	787b      	ldrb	r3, [r7, #1]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d003      	beq.n	800c252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c24a:	887a      	ldrh	r2, [r7, #2]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c250:	e003      	b.n	800c25a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c252:	887b      	ldrh	r3, [r7, #2]
 800c254:	041a      	lsls	r2, r3, #16
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	619a      	str	r2, [r3, #24]
}
 800c25a:	bf00      	nop
 800c25c:	370c      	adds	r7, #12
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr
	...

0800c268 <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	60b9      	str	r1, [r7, #8]
 800c272:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d101      	bne.n	800c27e <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800c27a:	2301      	movs	r3, #1
 800c27c:	e043      	b.n	800c306 <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800c284:	b2db      	uxtb	r3, r3
 800c286:	2b00      	cmp	r3, #0
 800c288:	d106      	bne.n	800c298 <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2200      	movs	r2, #0
 800c28e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800c292:	68f8      	ldr	r0, [r7, #12]
 800c294:	f7f8 fa1e 	bl	80046d4 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681a      	ldr	r2, [r3, #0]
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	3308      	adds	r3, #8
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	4610      	mov	r0, r2
 800c2a4:	f003 f97e 	bl	800f5a4 <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	6818      	ldr	r0, [r3, #0]
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	689b      	ldr	r3, [r3, #8]
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	68b9      	ldr	r1, [r7, #8]
 800c2b4:	f003 f9c8 	bl	800f648 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	6858      	ldr	r0, [r3, #4]
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	689a      	ldr	r2, [r3, #8]
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2c4:	6879      	ldr	r1, [r7, #4]
 800c2c6:	f003 f9fd 	bl	800f6c4 <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	68fa      	ldr	r2, [r7, #12]
 800c2d0:	6892      	ldr	r2, [r2, #8]
 800c2d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	68fa      	ldr	r2, [r7, #12]
 800c2dc:	6892      	ldr	r2, [r2, #8]
 800c2de:	f041 0101 	orr.w	r1, r1, #1
 800c2e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	695b      	ldr	r3, [r3, #20]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d103      	bne.n	800c2f6 <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800c2ee:	4b08      	ldr	r3, [pc, #32]	; (800c310 <HAL_NOR_Init+0xa8>)
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	601a      	str	r2, [r3, #0]
 800c2f4:	e002      	b.n	800c2fc <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800c2f6:	4b06      	ldr	r3, [pc, #24]	; (800c310 <HAL_NOR_Init+0xa8>)
 800c2f8:	2201      	movs	r2, #1
 800c2fa:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2201      	movs	r2, #1
 800c300:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 800c304:	2300      	movs	r3, #0
}
 800c306:	4618      	mov	r0, r3
 800c308:	3710      	adds	r7, #16
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	2000285c 	.word	0x2000285c

0800c314 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c314:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c316:	b08f      	sub	sp, #60	; 0x3c
 800c318:	af0a      	add	r7, sp, #40	; 0x28
 800c31a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d101      	bne.n	800c326 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c322:	2301      	movs	r3, #1
 800c324:	e10f      	b.n	800c546 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800c332:	b2db      	uxtb	r3, r3
 800c334:	2b00      	cmp	r3, #0
 800c336:	d106      	bne.n	800c346 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f009 f9d5 	bl	80156f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2203      	movs	r2, #3
 800c34a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c356:	2b00      	cmp	r3, #0
 800c358:	d102      	bne.n	800c360 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2200      	movs	r2, #0
 800c35e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4618      	mov	r0, r3
 800c366:	f003 fb02 	bl	800f96e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	603b      	str	r3, [r7, #0]
 800c370:	687e      	ldr	r6, [r7, #4]
 800c372:	466d      	mov	r5, sp
 800c374:	f106 0410 	add.w	r4, r6, #16
 800c378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c37a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c37c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c37e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c380:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c384:	e885 0003 	stmia.w	r5, {r0, r1}
 800c388:	1d33      	adds	r3, r6, #4
 800c38a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c38c:	6838      	ldr	r0, [r7, #0]
 800c38e:	f003 f9d9 	bl	800f744 <USB_CoreInit>
 800c392:	4603      	mov	r3, r0
 800c394:	2b00      	cmp	r3, #0
 800c396:	d005      	beq.n	800c3a4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2202      	movs	r2, #2
 800c39c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	e0d0      	b.n	800c546 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	2100      	movs	r1, #0
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f003 faf0 	bl	800f990 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	73fb      	strb	r3, [r7, #15]
 800c3b4:	e04a      	b.n	800c44c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c3b6:	7bfa      	ldrb	r2, [r7, #15]
 800c3b8:	6879      	ldr	r1, [r7, #4]
 800c3ba:	4613      	mov	r3, r2
 800c3bc:	00db      	lsls	r3, r3, #3
 800c3be:	1a9b      	subs	r3, r3, r2
 800c3c0:	009b      	lsls	r3, r3, #2
 800c3c2:	440b      	add	r3, r1
 800c3c4:	333d      	adds	r3, #61	; 0x3d
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c3ca:	7bfa      	ldrb	r2, [r7, #15]
 800c3cc:	6879      	ldr	r1, [r7, #4]
 800c3ce:	4613      	mov	r3, r2
 800c3d0:	00db      	lsls	r3, r3, #3
 800c3d2:	1a9b      	subs	r3, r3, r2
 800c3d4:	009b      	lsls	r3, r3, #2
 800c3d6:	440b      	add	r3, r1
 800c3d8:	333c      	adds	r3, #60	; 0x3c
 800c3da:	7bfa      	ldrb	r2, [r7, #15]
 800c3dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c3de:	7bfa      	ldrb	r2, [r7, #15]
 800c3e0:	7bfb      	ldrb	r3, [r7, #15]
 800c3e2:	b298      	uxth	r0, r3
 800c3e4:	6879      	ldr	r1, [r7, #4]
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	00db      	lsls	r3, r3, #3
 800c3ea:	1a9b      	subs	r3, r3, r2
 800c3ec:	009b      	lsls	r3, r3, #2
 800c3ee:	440b      	add	r3, r1
 800c3f0:	3342      	adds	r3, #66	; 0x42
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c3f6:	7bfa      	ldrb	r2, [r7, #15]
 800c3f8:	6879      	ldr	r1, [r7, #4]
 800c3fa:	4613      	mov	r3, r2
 800c3fc:	00db      	lsls	r3, r3, #3
 800c3fe:	1a9b      	subs	r3, r3, r2
 800c400:	009b      	lsls	r3, r3, #2
 800c402:	440b      	add	r3, r1
 800c404:	333f      	adds	r3, #63	; 0x3f
 800c406:	2200      	movs	r2, #0
 800c408:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c40a:	7bfa      	ldrb	r2, [r7, #15]
 800c40c:	6879      	ldr	r1, [r7, #4]
 800c40e:	4613      	mov	r3, r2
 800c410:	00db      	lsls	r3, r3, #3
 800c412:	1a9b      	subs	r3, r3, r2
 800c414:	009b      	lsls	r3, r3, #2
 800c416:	440b      	add	r3, r1
 800c418:	3344      	adds	r3, #68	; 0x44
 800c41a:	2200      	movs	r2, #0
 800c41c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c41e:	7bfa      	ldrb	r2, [r7, #15]
 800c420:	6879      	ldr	r1, [r7, #4]
 800c422:	4613      	mov	r3, r2
 800c424:	00db      	lsls	r3, r3, #3
 800c426:	1a9b      	subs	r3, r3, r2
 800c428:	009b      	lsls	r3, r3, #2
 800c42a:	440b      	add	r3, r1
 800c42c:	3348      	adds	r3, #72	; 0x48
 800c42e:	2200      	movs	r2, #0
 800c430:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c432:	7bfa      	ldrb	r2, [r7, #15]
 800c434:	6879      	ldr	r1, [r7, #4]
 800c436:	4613      	mov	r3, r2
 800c438:	00db      	lsls	r3, r3, #3
 800c43a:	1a9b      	subs	r3, r3, r2
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	440b      	add	r3, r1
 800c440:	3350      	adds	r3, #80	; 0x50
 800c442:	2200      	movs	r2, #0
 800c444:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c446:	7bfb      	ldrb	r3, [r7, #15]
 800c448:	3301      	adds	r3, #1
 800c44a:	73fb      	strb	r3, [r7, #15]
 800c44c:	7bfa      	ldrb	r2, [r7, #15]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	429a      	cmp	r2, r3
 800c454:	d3af      	bcc.n	800c3b6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c456:	2300      	movs	r3, #0
 800c458:	73fb      	strb	r3, [r7, #15]
 800c45a:	e044      	b.n	800c4e6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c45c:	7bfa      	ldrb	r2, [r7, #15]
 800c45e:	6879      	ldr	r1, [r7, #4]
 800c460:	4613      	mov	r3, r2
 800c462:	00db      	lsls	r3, r3, #3
 800c464:	1a9b      	subs	r3, r3, r2
 800c466:	009b      	lsls	r3, r3, #2
 800c468:	440b      	add	r3, r1
 800c46a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800c46e:	2200      	movs	r2, #0
 800c470:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c472:	7bfa      	ldrb	r2, [r7, #15]
 800c474:	6879      	ldr	r1, [r7, #4]
 800c476:	4613      	mov	r3, r2
 800c478:	00db      	lsls	r3, r3, #3
 800c47a:	1a9b      	subs	r3, r3, r2
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	440b      	add	r3, r1
 800c480:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c484:	7bfa      	ldrb	r2, [r7, #15]
 800c486:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c488:	7bfa      	ldrb	r2, [r7, #15]
 800c48a:	6879      	ldr	r1, [r7, #4]
 800c48c:	4613      	mov	r3, r2
 800c48e:	00db      	lsls	r3, r3, #3
 800c490:	1a9b      	subs	r3, r3, r2
 800c492:	009b      	lsls	r3, r3, #2
 800c494:	440b      	add	r3, r1
 800c496:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c49a:	2200      	movs	r2, #0
 800c49c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c49e:	7bfa      	ldrb	r2, [r7, #15]
 800c4a0:	6879      	ldr	r1, [r7, #4]
 800c4a2:	4613      	mov	r3, r2
 800c4a4:	00db      	lsls	r3, r3, #3
 800c4a6:	1a9b      	subs	r3, r3, r2
 800c4a8:	009b      	lsls	r3, r3, #2
 800c4aa:	440b      	add	r3, r1
 800c4ac:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c4b4:	7bfa      	ldrb	r2, [r7, #15]
 800c4b6:	6879      	ldr	r1, [r7, #4]
 800c4b8:	4613      	mov	r3, r2
 800c4ba:	00db      	lsls	r3, r3, #3
 800c4bc:	1a9b      	subs	r3, r3, r2
 800c4be:	009b      	lsls	r3, r3, #2
 800c4c0:	440b      	add	r3, r1
 800c4c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c4ca:	7bfa      	ldrb	r2, [r7, #15]
 800c4cc:	6879      	ldr	r1, [r7, #4]
 800c4ce:	4613      	mov	r3, r2
 800c4d0:	00db      	lsls	r3, r3, #3
 800c4d2:	1a9b      	subs	r3, r3, r2
 800c4d4:	009b      	lsls	r3, r3, #2
 800c4d6:	440b      	add	r3, r1
 800c4d8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c4dc:	2200      	movs	r2, #0
 800c4de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c4e0:	7bfb      	ldrb	r3, [r7, #15]
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	73fb      	strb	r3, [r7, #15]
 800c4e6:	7bfa      	ldrb	r2, [r7, #15]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	d3b5      	bcc.n	800c45c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	603b      	str	r3, [r7, #0]
 800c4f6:	687e      	ldr	r6, [r7, #4]
 800c4f8:	466d      	mov	r5, sp
 800c4fa:	f106 0410 	add.w	r4, r6, #16
 800c4fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c500:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c506:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c50a:	e885 0003 	stmia.w	r5, {r0, r1}
 800c50e:	1d33      	adds	r3, r6, #4
 800c510:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c512:	6838      	ldr	r0, [r7, #0]
 800c514:	f003 fa66 	bl	800f9e4 <USB_DevInit>
 800c518:	4603      	mov	r3, r0
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d005      	beq.n	800c52a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2202      	movs	r2, #2
 800c522:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c526:	2301      	movs	r3, #1
 800c528:	e00d      	b.n	800c546 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2200      	movs	r2, #0
 800c52e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2201      	movs	r2, #1
 800c536:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	4618      	mov	r0, r3
 800c540:	f004 faae 	bl	8010aa0 <USB_DevDisconnect>

  return HAL_OK;
 800c544:	2300      	movs	r3, #0
}
 800c546:	4618      	mov	r0, r3
 800c548:	3714      	adds	r7, #20
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c54e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c54e:	b580      	push	{r7, lr}
 800c550:	b084      	sub	sp, #16
 800c552:	af00      	add	r7, sp, #0
 800c554:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c562:	2b01      	cmp	r3, #1
 800c564:	d101      	bne.n	800c56a <HAL_PCD_Start+0x1c>
 800c566:	2302      	movs	r3, #2
 800c568:	e020      	b.n	800c5ac <HAL_PCD_Start+0x5e>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2201      	movs	r2, #1
 800c56e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c576:	2b01      	cmp	r3, #1
 800c578:	d109      	bne.n	800c58e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c57e:	2b01      	cmp	r3, #1
 800c580:	d005      	beq.n	800c58e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c586:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	4618      	mov	r0, r3
 800c594:	f003 f9da 	bl	800f94c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4618      	mov	r0, r3
 800c59e:	f004 fa5e 	bl	8010a5e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c5aa:	2300      	movs	r3, #0
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3710      	adds	r7, #16
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c5b4:	b590      	push	{r4, r7, lr}
 800c5b6:	b08d      	sub	sp, #52	; 0x34
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5c2:	6a3b      	ldr	r3, [r7, #32]
 800c5c4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f004 fb1c 	bl	8010c08 <USB_GetMode>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	f040 839d 	bne.w	800cd12 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f004 fa80 	bl	8010ae2 <USB_ReadInterrupts>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	f000 8393 	beq.w	800cd10 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f004 fa77 	bl	8010ae2 <USB_ReadInterrupts>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	f003 0302 	and.w	r3, r3, #2
 800c5fa:	2b02      	cmp	r3, #2
 800c5fc:	d107      	bne.n	800c60e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	695a      	ldr	r2, [r3, #20]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f002 0202 	and.w	r2, r2, #2
 800c60c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	4618      	mov	r0, r3
 800c614:	f004 fa65 	bl	8010ae2 <USB_ReadInterrupts>
 800c618:	4603      	mov	r3, r0
 800c61a:	f003 0310 	and.w	r3, r3, #16
 800c61e:	2b10      	cmp	r3, #16
 800c620:	d161      	bne.n	800c6e6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	699a      	ldr	r2, [r3, #24]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f022 0210 	bic.w	r2, r2, #16
 800c630:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800c632:	6a3b      	ldr	r3, [r7, #32]
 800c634:	6a1b      	ldr	r3, [r3, #32]
 800c636:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	f003 020f 	and.w	r2, r3, #15
 800c63e:	4613      	mov	r3, r2
 800c640:	00db      	lsls	r3, r3, #3
 800c642:	1a9b      	subs	r3, r3, r2
 800c644:	009b      	lsls	r3, r3, #2
 800c646:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c64a:	687a      	ldr	r2, [r7, #4]
 800c64c:	4413      	add	r3, r2
 800c64e:	3304      	adds	r3, #4
 800c650:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c652:	69bb      	ldr	r3, [r7, #24]
 800c654:	0c5b      	lsrs	r3, r3, #17
 800c656:	f003 030f 	and.w	r3, r3, #15
 800c65a:	2b02      	cmp	r3, #2
 800c65c:	d124      	bne.n	800c6a8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c65e:	69ba      	ldr	r2, [r7, #24]
 800c660:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800c664:	4013      	ands	r3, r2
 800c666:	2b00      	cmp	r3, #0
 800c668:	d035      	beq.n	800c6d6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c66e:	69bb      	ldr	r3, [r7, #24]
 800c670:	091b      	lsrs	r3, r3, #4
 800c672:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c674:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c678:	b29b      	uxth	r3, r3
 800c67a:	461a      	mov	r2, r3
 800c67c:	6a38      	ldr	r0, [r7, #32]
 800c67e:	f004 f8cb 	bl	8010818 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	68da      	ldr	r2, [r3, #12]
 800c686:	69bb      	ldr	r3, [r7, #24]
 800c688:	091b      	lsrs	r3, r3, #4
 800c68a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c68e:	441a      	add	r2, r3
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	699a      	ldr	r2, [r3, #24]
 800c698:	69bb      	ldr	r3, [r7, #24]
 800c69a:	091b      	lsrs	r3, r3, #4
 800c69c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6a0:	441a      	add	r2, r3
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	619a      	str	r2, [r3, #24]
 800c6a6:	e016      	b.n	800c6d6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800c6a8:	69bb      	ldr	r3, [r7, #24]
 800c6aa:	0c5b      	lsrs	r3, r3, #17
 800c6ac:	f003 030f 	and.w	r3, r3, #15
 800c6b0:	2b06      	cmp	r3, #6
 800c6b2:	d110      	bne.n	800c6d6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c6ba:	2208      	movs	r2, #8
 800c6bc:	4619      	mov	r1, r3
 800c6be:	6a38      	ldr	r0, [r7, #32]
 800c6c0:	f004 f8aa 	bl	8010818 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	699a      	ldr	r2, [r3, #24]
 800c6c8:	69bb      	ldr	r3, [r7, #24]
 800c6ca:	091b      	lsrs	r3, r3, #4
 800c6cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6d0:	441a      	add	r2, r3
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	699a      	ldr	r2, [r3, #24]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f042 0210 	orr.w	r2, r2, #16
 800c6e4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f004 f9f9 	bl	8010ae2 <USB_ReadInterrupts>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c6f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c6fa:	d16e      	bne.n	800c7da <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	4618      	mov	r0, r3
 800c706:	f004 f9ff 	bl	8010b08 <USB_ReadDevAllOutEpInterrupt>
 800c70a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800c70c:	e062      	b.n	800c7d4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c710:	f003 0301 	and.w	r3, r3, #1
 800c714:	2b00      	cmp	r3, #0
 800c716:	d057      	beq.n	800c7c8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c71e:	b2d2      	uxtb	r2, r2
 800c720:	4611      	mov	r1, r2
 800c722:	4618      	mov	r0, r3
 800c724:	f004 fa24 	bl	8010b70 <USB_ReadDevOutEPInterrupt>
 800c728:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	f003 0301 	and.w	r3, r3, #1
 800c730:	2b00      	cmp	r3, #0
 800c732:	d00c      	beq.n	800c74e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c736:	015a      	lsls	r2, r3, #5
 800c738:	69fb      	ldr	r3, [r7, #28]
 800c73a:	4413      	add	r3, r2
 800c73c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c740:	461a      	mov	r2, r3
 800c742:	2301      	movs	r3, #1
 800c744:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c746:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f000 fdb1 	bl	800d2b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	f003 0308 	and.w	r3, r3, #8
 800c754:	2b00      	cmp	r3, #0
 800c756:	d00c      	beq.n	800c772 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c75a:	015a      	lsls	r2, r3, #5
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	4413      	add	r3, r2
 800c760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c764:	461a      	mov	r2, r3
 800c766:	2308      	movs	r3, #8
 800c768:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c76a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f000 feab 	bl	800d4c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	f003 0310 	and.w	r3, r3, #16
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d008      	beq.n	800c78e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c77e:	015a      	lsls	r2, r3, #5
 800c780:	69fb      	ldr	r3, [r7, #28]
 800c782:	4413      	add	r3, r2
 800c784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c788:	461a      	mov	r2, r3
 800c78a:	2310      	movs	r3, #16
 800c78c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	f003 0320 	and.w	r3, r3, #32
 800c794:	2b00      	cmp	r3, #0
 800c796:	d008      	beq.n	800c7aa <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79a:	015a      	lsls	r2, r3, #5
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	4413      	add	r3, r2
 800c7a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	2320      	movs	r3, #32
 800c7a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d009      	beq.n	800c7c8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b6:	015a      	lsls	r2, r3, #5
 800c7b8:	69fb      	ldr	r3, [r7, #28]
 800c7ba:	4413      	add	r3, r2
 800c7bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c7c6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d0:	085b      	lsrs	r3, r3, #1
 800c7d2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d199      	bne.n	800c70e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f004 f97f 	bl	8010ae2 <USB_ReadInterrupts>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c7ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c7ee:	f040 80c0 	bne.w	800c972 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f004 f9a0 	bl	8010b3c <USB_ReadDevAllInEpInterrupt>
 800c7fc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800c7fe:	2300      	movs	r3, #0
 800c800:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800c802:	e0b2      	b.n	800c96a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c806:	f003 0301 	and.w	r3, r3, #1
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f000 80a7 	beq.w	800c95e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c816:	b2d2      	uxtb	r2, r2
 800c818:	4611      	mov	r1, r2
 800c81a:	4618      	mov	r0, r3
 800c81c:	f004 f9c6 	bl	8010bac <USB_ReadDevInEPInterrupt>
 800c820:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	f003 0301 	and.w	r3, r3, #1
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d057      	beq.n	800c8dc <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82e:	f003 030f 	and.w	r3, r3, #15
 800c832:	2201      	movs	r2, #1
 800c834:	fa02 f303 	lsl.w	r3, r2, r3
 800c838:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c83a:	69fb      	ldr	r3, [r7, #28]
 800c83c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	43db      	mvns	r3, r3
 800c846:	69f9      	ldr	r1, [r7, #28]
 800c848:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c84c:	4013      	ands	r3, r2
 800c84e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c852:	015a      	lsls	r2, r3, #5
 800c854:	69fb      	ldr	r3, [r7, #28]
 800c856:	4413      	add	r3, r2
 800c858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c85c:	461a      	mov	r2, r3
 800c85e:	2301      	movs	r3, #1
 800c860:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	691b      	ldr	r3, [r3, #16]
 800c866:	2b01      	cmp	r3, #1
 800c868:	d132      	bne.n	800c8d0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c86a:	6879      	ldr	r1, [r7, #4]
 800c86c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c86e:	4613      	mov	r3, r2
 800c870:	00db      	lsls	r3, r3, #3
 800c872:	1a9b      	subs	r3, r3, r2
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	440b      	add	r3, r1
 800c878:	3348      	adds	r3, #72	; 0x48
 800c87a:	6819      	ldr	r1, [r3, #0]
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c880:	4613      	mov	r3, r2
 800c882:	00db      	lsls	r3, r3, #3
 800c884:	1a9b      	subs	r3, r3, r2
 800c886:	009b      	lsls	r3, r3, #2
 800c888:	4403      	add	r3, r0
 800c88a:	3344      	adds	r3, #68	; 0x44
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	4419      	add	r1, r3
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c894:	4613      	mov	r3, r2
 800c896:	00db      	lsls	r3, r3, #3
 800c898:	1a9b      	subs	r3, r3, r2
 800c89a:	009b      	lsls	r3, r3, #2
 800c89c:	4403      	add	r3, r0
 800c89e:	3348      	adds	r3, #72	; 0x48
 800c8a0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d113      	bne.n	800c8d0 <HAL_PCD_IRQHandler+0x31c>
 800c8a8:	6879      	ldr	r1, [r7, #4]
 800c8aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8ac:	4613      	mov	r3, r2
 800c8ae:	00db      	lsls	r3, r3, #3
 800c8b0:	1a9b      	subs	r3, r3, r2
 800c8b2:	009b      	lsls	r3, r3, #2
 800c8b4:	440b      	add	r3, r1
 800c8b6:	3350      	adds	r3, #80	; 0x50
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d108      	bne.n	800c8d0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6818      	ldr	r0, [r3, #0]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c8c8:	461a      	mov	r2, r3
 800c8ca:	2101      	movs	r1, #1
 800c8cc:	f004 f9ce 	bl	8010c6c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f008 ff8b 	bl	80157f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	f003 0308 	and.w	r3, r3, #8
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d008      	beq.n	800c8f8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e8:	015a      	lsls	r2, r3, #5
 800c8ea:	69fb      	ldr	r3, [r7, #28]
 800c8ec:	4413      	add	r3, r2
 800c8ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	2308      	movs	r3, #8
 800c8f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	f003 0310 	and.w	r3, r3, #16
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d008      	beq.n	800c914 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c904:	015a      	lsls	r2, r3, #5
 800c906:	69fb      	ldr	r3, [r7, #28]
 800c908:	4413      	add	r3, r2
 800c90a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c90e:	461a      	mov	r2, r3
 800c910:	2310      	movs	r3, #16
 800c912:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d008      	beq.n	800c930 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c920:	015a      	lsls	r2, r3, #5
 800c922:	69fb      	ldr	r3, [r7, #28]
 800c924:	4413      	add	r3, r2
 800c926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c92a:	461a      	mov	r2, r3
 800c92c:	2340      	movs	r3, #64	; 0x40
 800c92e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	f003 0302 	and.w	r3, r3, #2
 800c936:	2b00      	cmp	r3, #0
 800c938:	d008      	beq.n	800c94c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93c:	015a      	lsls	r2, r3, #5
 800c93e:	69fb      	ldr	r3, [r7, #28]
 800c940:	4413      	add	r3, r2
 800c942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c946:	461a      	mov	r2, r3
 800c948:	2302      	movs	r3, #2
 800c94a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c952:	2b00      	cmp	r3, #0
 800c954:	d003      	beq.n	800c95e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c956:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 fc1b 	bl	800d194 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c960:	3301      	adds	r3, #1
 800c962:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c966:	085b      	lsrs	r3, r3, #1
 800c968:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	f47f af49 	bne.w	800c804 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	4618      	mov	r0, r3
 800c978:	f004 f8b3 	bl	8010ae2 <USB_ReadInterrupts>
 800c97c:	4603      	mov	r3, r0
 800c97e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c982:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c986:	d122      	bne.n	800c9ce <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	69fa      	ldr	r2, [r7, #28]
 800c992:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c996:	f023 0301 	bic.w	r3, r3, #1
 800c99a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d108      	bne.n	800c9b8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c9ae:	2100      	movs	r1, #0
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f000 fe27 	bl	800d604 <HAL_PCDEx_LPM_Callback>
 800c9b6:	e002      	b.n	800c9be <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f008 ff91 	bl	80158e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	695a      	ldr	r2, [r3, #20]
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800c9cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f004 f885 	bl	8010ae2 <USB_ReadInterrupts>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c9de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c9e2:	d112      	bne.n	800ca0a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c9e4:	69fb      	ldr	r3, [r7, #28]
 800c9e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9ea:	689b      	ldr	r3, [r3, #8]
 800c9ec:	f003 0301 	and.w	r3, r3, #1
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	d102      	bne.n	800c9fa <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f008 ff4d 	bl	8015894 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	695a      	ldr	r2, [r3, #20]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800ca08:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f004 f867 	bl	8010ae2 <USB_ReadInterrupts>
 800ca14:	4603      	mov	r3, r0
 800ca16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ca1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca1e:	f040 80c7 	bne.w	800cbb0 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ca22:	69fb      	ldr	r3, [r7, #28]
 800ca24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca28:	685b      	ldr	r3, [r3, #4]
 800ca2a:	69fa      	ldr	r2, [r7, #28]
 800ca2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca30:	f023 0301 	bic.w	r3, r3, #1
 800ca34:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	2110      	movs	r1, #16
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f003 f935 	bl	800fcac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ca42:	2300      	movs	r3, #0
 800ca44:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca46:	e056      	b.n	800caf6 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800ca48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca4a:	015a      	lsls	r2, r3, #5
 800ca4c:	69fb      	ldr	r3, [r7, #28]
 800ca4e:	4413      	add	r3, r2
 800ca50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca54:	461a      	mov	r2, r3
 800ca56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ca5a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ca5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca5e:	015a      	lsls	r2, r3, #5
 800ca60:	69fb      	ldr	r3, [r7, #28]
 800ca62:	4413      	add	r3, r2
 800ca64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca6c:	0151      	lsls	r1, r2, #5
 800ca6e:	69fa      	ldr	r2, [r7, #28]
 800ca70:	440a      	add	r2, r1
 800ca72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ca7a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ca7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7e:	015a      	lsls	r2, r3, #5
 800ca80:	69fb      	ldr	r3, [r7, #28]
 800ca82:	4413      	add	r3, r2
 800ca84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca8c:	0151      	lsls	r1, r2, #5
 800ca8e:	69fa      	ldr	r2, [r7, #28]
 800ca90:	440a      	add	r2, r1
 800ca92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ca9a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800ca9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca9e:	015a      	lsls	r2, r3, #5
 800caa0:	69fb      	ldr	r3, [r7, #28]
 800caa2:	4413      	add	r3, r2
 800caa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caa8:	461a      	mov	r2, r3
 800caaa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800caae:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab2:	015a      	lsls	r2, r3, #5
 800cab4:	69fb      	ldr	r3, [r7, #28]
 800cab6:	4413      	add	r3, r2
 800cab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cac0:	0151      	lsls	r1, r2, #5
 800cac2:	69fa      	ldr	r2, [r7, #28]
 800cac4:	440a      	add	r2, r1
 800cac6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800caca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cace:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad2:	015a      	lsls	r2, r3, #5
 800cad4:	69fb      	ldr	r3, [r7, #28]
 800cad6:	4413      	add	r3, r2
 800cad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cae0:	0151      	lsls	r1, r2, #5
 800cae2:	69fa      	ldr	r2, [r7, #28]
 800cae4:	440a      	add	r2, r1
 800cae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800caea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800caee:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800caf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf2:	3301      	adds	r3, #1
 800caf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d3a3      	bcc.n	800ca48 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800cb00:	69fb      	ldr	r3, [r7, #28]
 800cb02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb06:	69db      	ldr	r3, [r3, #28]
 800cb08:	69fa      	ldr	r2, [r7, #28]
 800cb0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb0e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800cb12:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d016      	beq.n	800cb4a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800cb1c:	69fb      	ldr	r3, [r7, #28]
 800cb1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb26:	69fa      	ldr	r2, [r7, #28]
 800cb28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb2c:	f043 030b 	orr.w	r3, r3, #11
 800cb30:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800cb34:	69fb      	ldr	r3, [r7, #28]
 800cb36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb3c:	69fa      	ldr	r2, [r7, #28]
 800cb3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb42:	f043 030b 	orr.w	r3, r3, #11
 800cb46:	6453      	str	r3, [r2, #68]	; 0x44
 800cb48:	e015      	b.n	800cb76 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800cb4a:	69fb      	ldr	r3, [r7, #28]
 800cb4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb50:	695b      	ldr	r3, [r3, #20]
 800cb52:	69fa      	ldr	r2, [r7, #28]
 800cb54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cb5c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800cb60:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800cb62:	69fb      	ldr	r3, [r7, #28]
 800cb64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb68:	691b      	ldr	r3, [r3, #16]
 800cb6a:	69fa      	ldr	r2, [r7, #28]
 800cb6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb70:	f043 030b 	orr.w	r3, r3, #11
 800cb74:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800cb76:	69fb      	ldr	r3, [r7, #28]
 800cb78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	69fa      	ldr	r2, [r7, #28]
 800cb80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb84:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cb88:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6818      	ldr	r0, [r3, #0]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	691b      	ldr	r3, [r3, #16]
 800cb92:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cb9a:	461a      	mov	r2, r3
 800cb9c:	f004 f866 	bl	8010c6c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	695a      	ldr	r2, [r3, #20]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800cbae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f003 ff94 	bl	8010ae2 <USB_ReadInterrupts>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cbc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cbc4:	d124      	bne.n	800cc10 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f004 f82a 	bl	8010c24 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f003 f8ca 	bl	800fd6e <USB_GetDevSpeed>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	461a      	mov	r2, r3
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681c      	ldr	r4, [r3, #0]
 800cbe6:	f001 f947 	bl	800de78 <HAL_RCC_GetHCLKFreq>
 800cbea:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800cbf0:	b2db      	uxtb	r3, r3
 800cbf2:	461a      	mov	r2, r3
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	f002 fe07 	bl	800f808 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f008 fe21 	bl	8015842 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	695a      	ldr	r2, [r3, #20]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800cc0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4618      	mov	r0, r3
 800cc16:	f003 ff64 	bl	8010ae2 <USB_ReadInterrupts>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	f003 0308 	and.w	r3, r3, #8
 800cc20:	2b08      	cmp	r3, #8
 800cc22:	d10a      	bne.n	800cc3a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f008 fdfe 	bl	8015826 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	695a      	ldr	r2, [r3, #20]
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f002 0208 	and.w	r2, r2, #8
 800cc38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f003 ff4f 	bl	8010ae2 <USB_ReadInterrupts>
 800cc44:	4603      	mov	r3, r0
 800cc46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cc4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc4e:	d10f      	bne.n	800cc70 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800cc50:	2300      	movs	r3, #0
 800cc52:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800cc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc56:	b2db      	uxtb	r3, r3
 800cc58:	4619      	mov	r1, r3
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f008 fe60 	bl	8015920 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	695a      	ldr	r2, [r3, #20]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800cc6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	4618      	mov	r0, r3
 800cc76:	f003 ff34 	bl	8010ae2 <USB_ReadInterrupts>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cc80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc84:	d10f      	bne.n	800cca6 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800cc86:	2300      	movs	r3, #0
 800cc88:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800cc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8c:	b2db      	uxtb	r3, r3
 800cc8e:	4619      	mov	r1, r3
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f008 fe33 	bl	80158fc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	695a      	ldr	r2, [r3, #20]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800cca4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f003 ff19 	bl	8010ae2 <USB_ReadInterrupts>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ccb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccba:	d10a      	bne.n	800ccd2 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	f008 fe41 	bl	8015944 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	695a      	ldr	r2, [r3, #20]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800ccd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f003 ff03 	bl	8010ae2 <USB_ReadInterrupts>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	f003 0304 	and.w	r3, r3, #4
 800cce2:	2b04      	cmp	r3, #4
 800cce4:	d115      	bne.n	800cd12 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	685b      	ldr	r3, [r3, #4]
 800ccec:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800ccee:	69bb      	ldr	r3, [r7, #24]
 800ccf0:	f003 0304 	and.w	r3, r3, #4
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d002      	beq.n	800ccfe <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f008 fe31 	bl	8015960 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	6859      	ldr	r1, [r3, #4]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	69ba      	ldr	r2, [r7, #24]
 800cd0a:	430a      	orrs	r2, r1
 800cd0c:	605a      	str	r2, [r3, #4]
 800cd0e:	e000      	b.n	800cd12 <HAL_PCD_IRQHandler+0x75e>
      return;
 800cd10:	bf00      	nop
    }
  }
}
 800cd12:	3734      	adds	r7, #52	; 0x34
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd90      	pop	{r4, r7, pc}

0800cd18 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	460b      	mov	r3, r1
 800cd22:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d101      	bne.n	800cd32 <HAL_PCD_SetAddress+0x1a>
 800cd2e:	2302      	movs	r3, #2
 800cd30:	e013      	b.n	800cd5a <HAL_PCD_SetAddress+0x42>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2201      	movs	r2, #1
 800cd36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	78fa      	ldrb	r2, [r7, #3]
 800cd3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	78fa      	ldrb	r2, [r7, #3]
 800cd48:	4611      	mov	r1, r2
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f003 fe61 	bl	8010a12 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2200      	movs	r2, #0
 800cd54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cd58:	2300      	movs	r3, #0
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3708      	adds	r7, #8
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}

0800cd62 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800cd62:	b580      	push	{r7, lr}
 800cd64:	b084      	sub	sp, #16
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	6078      	str	r0, [r7, #4]
 800cd6a:	4608      	mov	r0, r1
 800cd6c:	4611      	mov	r1, r2
 800cd6e:	461a      	mov	r2, r3
 800cd70:	4603      	mov	r3, r0
 800cd72:	70fb      	strb	r3, [r7, #3]
 800cd74:	460b      	mov	r3, r1
 800cd76:	803b      	strh	r3, [r7, #0]
 800cd78:	4613      	mov	r3, r2
 800cd7a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cd80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	da0f      	bge.n	800cda8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cd88:	78fb      	ldrb	r3, [r7, #3]
 800cd8a:	f003 020f 	and.w	r2, r3, #15
 800cd8e:	4613      	mov	r3, r2
 800cd90:	00db      	lsls	r3, r3, #3
 800cd92:	1a9b      	subs	r3, r3, r2
 800cd94:	009b      	lsls	r3, r3, #2
 800cd96:	3338      	adds	r3, #56	; 0x38
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	4413      	add	r3, r2
 800cd9c:	3304      	adds	r3, #4
 800cd9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	2201      	movs	r2, #1
 800cda4:	705a      	strb	r2, [r3, #1]
 800cda6:	e00f      	b.n	800cdc8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cda8:	78fb      	ldrb	r3, [r7, #3]
 800cdaa:	f003 020f 	and.w	r2, r3, #15
 800cdae:	4613      	mov	r3, r2
 800cdb0:	00db      	lsls	r3, r3, #3
 800cdb2:	1a9b      	subs	r3, r3, r2
 800cdb4:	009b      	lsls	r3, r3, #2
 800cdb6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cdba:	687a      	ldr	r2, [r7, #4]
 800cdbc:	4413      	add	r3, r2
 800cdbe:	3304      	adds	r3, #4
 800cdc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800cdc8:	78fb      	ldrb	r3, [r7, #3]
 800cdca:	f003 030f 	and.w	r3, r3, #15
 800cdce:	b2da      	uxtb	r2, r3
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800cdd4:	883a      	ldrh	r2, [r7, #0]
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	78ba      	ldrb	r2, [r7, #2]
 800cdde:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	785b      	ldrb	r3, [r3, #1]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d004      	beq.n	800cdf2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	b29a      	uxth	r2, r3
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800cdf2:	78bb      	ldrb	r3, [r7, #2]
 800cdf4:	2b02      	cmp	r3, #2
 800cdf6:	d102      	bne.n	800cdfe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ce04:	2b01      	cmp	r3, #1
 800ce06:	d101      	bne.n	800ce0c <HAL_PCD_EP_Open+0xaa>
 800ce08:	2302      	movs	r3, #2
 800ce0a:	e00e      	b.n	800ce2a <HAL_PCD_EP_Open+0xc8>
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2201      	movs	r2, #1
 800ce10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	68f9      	ldr	r1, [r7, #12]
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f002 ffcc 	bl	800fdb8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2200      	movs	r2, #0
 800ce24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800ce28:	7afb      	ldrb	r3, [r7, #11]
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}

0800ce32 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ce32:	b580      	push	{r7, lr}
 800ce34:	b084      	sub	sp, #16
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	6078      	str	r0, [r7, #4]
 800ce3a:	460b      	mov	r3, r1
 800ce3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ce3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	da0f      	bge.n	800ce66 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ce46:	78fb      	ldrb	r3, [r7, #3]
 800ce48:	f003 020f 	and.w	r2, r3, #15
 800ce4c:	4613      	mov	r3, r2
 800ce4e:	00db      	lsls	r3, r3, #3
 800ce50:	1a9b      	subs	r3, r3, r2
 800ce52:	009b      	lsls	r3, r3, #2
 800ce54:	3338      	adds	r3, #56	; 0x38
 800ce56:	687a      	ldr	r2, [r7, #4]
 800ce58:	4413      	add	r3, r2
 800ce5a:	3304      	adds	r3, #4
 800ce5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2201      	movs	r2, #1
 800ce62:	705a      	strb	r2, [r3, #1]
 800ce64:	e00f      	b.n	800ce86 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ce66:	78fb      	ldrb	r3, [r7, #3]
 800ce68:	f003 020f 	and.w	r2, r3, #15
 800ce6c:	4613      	mov	r3, r2
 800ce6e:	00db      	lsls	r3, r3, #3
 800ce70:	1a9b      	subs	r3, r3, r2
 800ce72:	009b      	lsls	r3, r3, #2
 800ce74:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ce78:	687a      	ldr	r2, [r7, #4]
 800ce7a:	4413      	add	r3, r2
 800ce7c:	3304      	adds	r3, #4
 800ce7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2200      	movs	r2, #0
 800ce84:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800ce86:	78fb      	ldrb	r3, [r7, #3]
 800ce88:	f003 030f 	and.w	r3, r3, #15
 800ce8c:	b2da      	uxtb	r2, r3
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ce98:	2b01      	cmp	r3, #1
 800ce9a:	d101      	bne.n	800cea0 <HAL_PCD_EP_Close+0x6e>
 800ce9c:	2302      	movs	r3, #2
 800ce9e:	e00e      	b.n	800cebe <HAL_PCD_EP_Close+0x8c>
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2201      	movs	r2, #1
 800cea4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	68f9      	ldr	r1, [r7, #12]
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f003 f80a 	bl	800fec8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800cebc:	2300      	movs	r3, #0
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3710      	adds	r7, #16
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}

0800cec6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cec6:	b580      	push	{r7, lr}
 800cec8:	b086      	sub	sp, #24
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	60f8      	str	r0, [r7, #12]
 800cece:	607a      	str	r2, [r7, #4]
 800ced0:	603b      	str	r3, [r7, #0]
 800ced2:	460b      	mov	r3, r1
 800ced4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ced6:	7afb      	ldrb	r3, [r7, #11]
 800ced8:	f003 020f 	and.w	r2, r3, #15
 800cedc:	4613      	mov	r3, r2
 800cede:	00db      	lsls	r3, r3, #3
 800cee0:	1a9b      	subs	r3, r3, r2
 800cee2:	009b      	lsls	r3, r3, #2
 800cee4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cee8:	68fa      	ldr	r2, [r7, #12]
 800ceea:	4413      	add	r3, r2
 800ceec:	3304      	adds	r3, #4
 800ceee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cef0:	697b      	ldr	r3, [r7, #20]
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	683a      	ldr	r2, [r7, #0]
 800cefa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	2200      	movs	r2, #0
 800cf00:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	2200      	movs	r2, #0
 800cf06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cf08:	7afb      	ldrb	r3, [r7, #11]
 800cf0a:	f003 030f 	and.w	r3, r3, #15
 800cf0e:	b2da      	uxtb	r2, r3
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	691b      	ldr	r3, [r3, #16]
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	d102      	bne.n	800cf22 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800cf1c:	687a      	ldr	r2, [r7, #4]
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cf22:	7afb      	ldrb	r3, [r7, #11]
 800cf24:	f003 030f 	and.w	r3, r3, #15
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d109      	bne.n	800cf40 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	6818      	ldr	r0, [r3, #0]
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	691b      	ldr	r3, [r3, #16]
 800cf34:	b2db      	uxtb	r3, r3
 800cf36:	461a      	mov	r2, r3
 800cf38:	6979      	ldr	r1, [r7, #20]
 800cf3a:	f003 fae5 	bl	8010508 <USB_EP0StartXfer>
 800cf3e:	e008      	b.n	800cf52 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	6818      	ldr	r0, [r3, #0]
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	691b      	ldr	r3, [r3, #16]
 800cf48:	b2db      	uxtb	r3, r3
 800cf4a:	461a      	mov	r2, r3
 800cf4c:	6979      	ldr	r1, [r7, #20]
 800cf4e:	f003 f897 	bl	8010080 <USB_EPStartXfer>
  }

  return HAL_OK;
 800cf52:	2300      	movs	r3, #0
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3718      	adds	r7, #24
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cf5c:	b480      	push	{r7}
 800cf5e:	b083      	sub	sp, #12
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	460b      	mov	r3, r1
 800cf66:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800cf68:	78fb      	ldrb	r3, [r7, #3]
 800cf6a:	f003 020f 	and.w	r2, r3, #15
 800cf6e:	6879      	ldr	r1, [r7, #4]
 800cf70:	4613      	mov	r3, r2
 800cf72:	00db      	lsls	r3, r3, #3
 800cf74:	1a9b      	subs	r3, r3, r2
 800cf76:	009b      	lsls	r3, r3, #2
 800cf78:	440b      	add	r3, r1
 800cf7a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800cf7e:	681b      	ldr	r3, [r3, #0]
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	370c      	adds	r7, #12
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr

0800cf8c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b086      	sub	sp, #24
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	60f8      	str	r0, [r7, #12]
 800cf94:	607a      	str	r2, [r7, #4]
 800cf96:	603b      	str	r3, [r7, #0]
 800cf98:	460b      	mov	r3, r1
 800cf9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cf9c:	7afb      	ldrb	r3, [r7, #11]
 800cf9e:	f003 020f 	and.w	r2, r3, #15
 800cfa2:	4613      	mov	r3, r2
 800cfa4:	00db      	lsls	r3, r3, #3
 800cfa6:	1a9b      	subs	r3, r3, r2
 800cfa8:	009b      	lsls	r3, r3, #2
 800cfaa:	3338      	adds	r3, #56	; 0x38
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	4413      	add	r3, r2
 800cfb0:	3304      	adds	r3, #4
 800cfb2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	687a      	ldr	r2, [r7, #4]
 800cfb8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	683a      	ldr	r2, [r7, #0]
 800cfbe:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	2201      	movs	r2, #1
 800cfca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cfcc:	7afb      	ldrb	r3, [r7, #11]
 800cfce:	f003 030f 	and.w	r3, r3, #15
 800cfd2:	b2da      	uxtb	r2, r3
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	691b      	ldr	r3, [r3, #16]
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d102      	bne.n	800cfe6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800cfe0:	687a      	ldr	r2, [r7, #4]
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cfe6:	7afb      	ldrb	r3, [r7, #11]
 800cfe8:	f003 030f 	and.w	r3, r3, #15
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d109      	bne.n	800d004 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	6818      	ldr	r0, [r3, #0]
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	691b      	ldr	r3, [r3, #16]
 800cff8:	b2db      	uxtb	r3, r3
 800cffa:	461a      	mov	r2, r3
 800cffc:	6979      	ldr	r1, [r7, #20]
 800cffe:	f003 fa83 	bl	8010508 <USB_EP0StartXfer>
 800d002:	e008      	b.n	800d016 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	6818      	ldr	r0, [r3, #0]
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	691b      	ldr	r3, [r3, #16]
 800d00c:	b2db      	uxtb	r3, r3
 800d00e:	461a      	mov	r2, r3
 800d010:	6979      	ldr	r1, [r7, #20]
 800d012:	f003 f835 	bl	8010080 <USB_EPStartXfer>
  }

  return HAL_OK;
 800d016:	2300      	movs	r3, #0
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3718      	adds	r7, #24
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}

0800d020 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b084      	sub	sp, #16
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	460b      	mov	r3, r1
 800d02a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d02c:	78fb      	ldrb	r3, [r7, #3]
 800d02e:	f003 020f 	and.w	r2, r3, #15
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	685b      	ldr	r3, [r3, #4]
 800d036:	429a      	cmp	r2, r3
 800d038:	d901      	bls.n	800d03e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800d03a:	2301      	movs	r3, #1
 800d03c:	e050      	b.n	800d0e0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d03e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d042:	2b00      	cmp	r3, #0
 800d044:	da0f      	bge.n	800d066 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d046:	78fb      	ldrb	r3, [r7, #3]
 800d048:	f003 020f 	and.w	r2, r3, #15
 800d04c:	4613      	mov	r3, r2
 800d04e:	00db      	lsls	r3, r3, #3
 800d050:	1a9b      	subs	r3, r3, r2
 800d052:	009b      	lsls	r3, r3, #2
 800d054:	3338      	adds	r3, #56	; 0x38
 800d056:	687a      	ldr	r2, [r7, #4]
 800d058:	4413      	add	r3, r2
 800d05a:	3304      	adds	r3, #4
 800d05c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2201      	movs	r2, #1
 800d062:	705a      	strb	r2, [r3, #1]
 800d064:	e00d      	b.n	800d082 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d066:	78fa      	ldrb	r2, [r7, #3]
 800d068:	4613      	mov	r3, r2
 800d06a:	00db      	lsls	r3, r3, #3
 800d06c:	1a9b      	subs	r3, r3, r2
 800d06e:	009b      	lsls	r3, r3, #2
 800d070:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	4413      	add	r3, r2
 800d078:	3304      	adds	r3, #4
 800d07a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2200      	movs	r2, #0
 800d080:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2201      	movs	r2, #1
 800d086:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d088:	78fb      	ldrb	r3, [r7, #3]
 800d08a:	f003 030f 	and.w	r3, r3, #15
 800d08e:	b2da      	uxtb	r2, r3
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d09a:	2b01      	cmp	r3, #1
 800d09c:	d101      	bne.n	800d0a2 <HAL_PCD_EP_SetStall+0x82>
 800d09e:	2302      	movs	r3, #2
 800d0a0:	e01e      	b.n	800d0e0 <HAL_PCD_EP_SetStall+0xc0>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	68f9      	ldr	r1, [r7, #12]
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f003 fbda 	bl	801086a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d0b6:	78fb      	ldrb	r3, [r7, #3]
 800d0b8:	f003 030f 	and.w	r3, r3, #15
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d10a      	bne.n	800d0d6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6818      	ldr	r0, [r3, #0]
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	691b      	ldr	r3, [r3, #16]
 800d0c8:	b2d9      	uxtb	r1, r3
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d0d0:	461a      	mov	r2, r3
 800d0d2:	f003 fdcb 	bl	8010c6c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d0de:	2300      	movs	r3, #0
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3710      	adds	r7, #16
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b084      	sub	sp, #16
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d0f4:	78fb      	ldrb	r3, [r7, #3]
 800d0f6:	f003 020f 	and.w	r2, r3, #15
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	685b      	ldr	r3, [r3, #4]
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d901      	bls.n	800d106 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800d102:	2301      	movs	r3, #1
 800d104:	e042      	b.n	800d18c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d106:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	da0f      	bge.n	800d12e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d10e:	78fb      	ldrb	r3, [r7, #3]
 800d110:	f003 020f 	and.w	r2, r3, #15
 800d114:	4613      	mov	r3, r2
 800d116:	00db      	lsls	r3, r3, #3
 800d118:	1a9b      	subs	r3, r3, r2
 800d11a:	009b      	lsls	r3, r3, #2
 800d11c:	3338      	adds	r3, #56	; 0x38
 800d11e:	687a      	ldr	r2, [r7, #4]
 800d120:	4413      	add	r3, r2
 800d122:	3304      	adds	r3, #4
 800d124:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	2201      	movs	r2, #1
 800d12a:	705a      	strb	r2, [r3, #1]
 800d12c:	e00f      	b.n	800d14e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d12e:	78fb      	ldrb	r3, [r7, #3]
 800d130:	f003 020f 	and.w	r2, r3, #15
 800d134:	4613      	mov	r3, r2
 800d136:	00db      	lsls	r3, r3, #3
 800d138:	1a9b      	subs	r3, r3, r2
 800d13a:	009b      	lsls	r3, r3, #2
 800d13c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d140:	687a      	ldr	r2, [r7, #4]
 800d142:	4413      	add	r3, r2
 800d144:	3304      	adds	r3, #4
 800d146:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2200      	movs	r2, #0
 800d14c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2200      	movs	r2, #0
 800d152:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d154:	78fb      	ldrb	r3, [r7, #3]
 800d156:	f003 030f 	and.w	r3, r3, #15
 800d15a:	b2da      	uxtb	r2, r3
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d166:	2b01      	cmp	r3, #1
 800d168:	d101      	bne.n	800d16e <HAL_PCD_EP_ClrStall+0x86>
 800d16a:	2302      	movs	r3, #2
 800d16c:	e00e      	b.n	800d18c <HAL_PCD_EP_ClrStall+0xa4>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2201      	movs	r2, #1
 800d172:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	68f9      	ldr	r1, [r7, #12]
 800d17c:	4618      	mov	r0, r3
 800d17e:	f003 fbe2 	bl	8010946 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2200      	movs	r2, #0
 800d186:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d18a:	2300      	movs	r3, #0
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3710      	adds	r7, #16
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b08a      	sub	sp, #40	; 0x28
 800d198:	af02      	add	r7, sp, #8
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800d1a8:	683a      	ldr	r2, [r7, #0]
 800d1aa:	4613      	mov	r3, r2
 800d1ac:	00db      	lsls	r3, r3, #3
 800d1ae:	1a9b      	subs	r3, r3, r2
 800d1b0:	009b      	lsls	r3, r3, #2
 800d1b2:	3338      	adds	r3, #56	; 0x38
 800d1b4:	687a      	ldr	r2, [r7, #4]
 800d1b6:	4413      	add	r3, r2
 800d1b8:	3304      	adds	r3, #4
 800d1ba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	699a      	ldr	r2, [r3, #24]
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	695b      	ldr	r3, [r3, #20]
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d901      	bls.n	800d1cc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	e06c      	b.n	800d2a6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	695a      	ldr	r2, [r3, #20]
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	699b      	ldr	r3, [r3, #24]
 800d1d4:	1ad3      	subs	r3, r2, r3
 800d1d6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	689b      	ldr	r3, [r3, #8]
 800d1dc:	69fa      	ldr	r2, [r7, #28]
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d902      	bls.n	800d1e8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	689b      	ldr	r3, [r3, #8]
 800d1e6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800d1e8:	69fb      	ldr	r3, [r7, #28]
 800d1ea:	3303      	adds	r3, #3
 800d1ec:	089b      	lsrs	r3, r3, #2
 800d1ee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d1f0:	e02b      	b.n	800d24a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	695a      	ldr	r2, [r3, #20]
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	699b      	ldr	r3, [r3, #24]
 800d1fa:	1ad3      	subs	r3, r2, r3
 800d1fc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	689b      	ldr	r3, [r3, #8]
 800d202:	69fa      	ldr	r2, [r7, #28]
 800d204:	429a      	cmp	r2, r3
 800d206:	d902      	bls.n	800d20e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	689b      	ldr	r3, [r3, #8]
 800d20c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800d20e:	69fb      	ldr	r3, [r7, #28]
 800d210:	3303      	adds	r3, #3
 800d212:	089b      	lsrs	r3, r3, #2
 800d214:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	68d9      	ldr	r1, [r3, #12]
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	b2da      	uxtb	r2, r3
 800d21e:	69fb      	ldr	r3, [r7, #28]
 800d220:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d226:	b2db      	uxtb	r3, r3
 800d228:	9300      	str	r3, [sp, #0]
 800d22a:	4603      	mov	r3, r0
 800d22c:	6978      	ldr	r0, [r7, #20]
 800d22e:	f003 fabe 	bl	80107ae <USB_WritePacket>

    ep->xfer_buff  += len;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	68da      	ldr	r2, [r3, #12]
 800d236:	69fb      	ldr	r3, [r7, #28]
 800d238:	441a      	add	r2, r3
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	699a      	ldr	r2, [r3, #24]
 800d242:	69fb      	ldr	r3, [r7, #28]
 800d244:	441a      	add	r2, r3
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	015a      	lsls	r2, r3, #5
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	4413      	add	r3, r2
 800d252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d256:	699b      	ldr	r3, [r3, #24]
 800d258:	b29b      	uxth	r3, r3
 800d25a:	69ba      	ldr	r2, [r7, #24]
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d809      	bhi.n	800d274 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	699a      	ldr	r2, [r3, #24]
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d268:	429a      	cmp	r2, r3
 800d26a:	d203      	bcs.n	800d274 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	695b      	ldr	r3, [r3, #20]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d1be      	bne.n	800d1f2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	695a      	ldr	r2, [r3, #20]
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	699b      	ldr	r3, [r3, #24]
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d811      	bhi.n	800d2a4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	f003 030f 	and.w	r3, r3, #15
 800d286:	2201      	movs	r2, #1
 800d288:	fa02 f303 	lsl.w	r3, r2, r3
 800d28c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	43db      	mvns	r3, r3
 800d29a:	6939      	ldr	r1, [r7, #16]
 800d29c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d2a0:	4013      	ands	r3, r2
 800d2a2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800d2a4:	2300      	movs	r3, #0
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3720      	adds	r7, #32
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
	...

0800d2b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b086      	sub	sp, #24
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
 800d2b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	333c      	adds	r3, #60	; 0x3c
 800d2c8:	3304      	adds	r3, #4
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	015a      	lsls	r2, r3, #5
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	4413      	add	r3, r2
 800d2d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2da:	689b      	ldr	r3, [r3, #8]
 800d2dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	691b      	ldr	r3, [r3, #16]
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	f040 80a0 	bne.w	800d428 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	f003 0308 	and.w	r3, r3, #8
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d015      	beq.n	800d31e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	4a72      	ldr	r2, [pc, #456]	; (800d4c0 <PCD_EP_OutXfrComplete_int+0x210>)
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	f240 80dd 	bls.w	800d4b6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d302:	2b00      	cmp	r3, #0
 800d304:	f000 80d7 	beq.w	800d4b6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	015a      	lsls	r2, r3, #5
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	4413      	add	r3, r2
 800d310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d314:	461a      	mov	r2, r3
 800d316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d31a:	6093      	str	r3, [r2, #8]
 800d31c:	e0cb      	b.n	800d4b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	f003 0320 	and.w	r3, r3, #32
 800d324:	2b00      	cmp	r3, #0
 800d326:	d009      	beq.n	800d33c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	015a      	lsls	r2, r3, #5
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	4413      	add	r3, r2
 800d330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d334:	461a      	mov	r2, r3
 800d336:	2320      	movs	r3, #32
 800d338:	6093      	str	r3, [r2, #8]
 800d33a:	e0bc      	b.n	800d4b6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d342:	2b00      	cmp	r3, #0
 800d344:	f040 80b7 	bne.w	800d4b6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	4a5d      	ldr	r2, [pc, #372]	; (800d4c0 <PCD_EP_OutXfrComplete_int+0x210>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d90f      	bls.n	800d370 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d356:	2b00      	cmp	r3, #0
 800d358:	d00a      	beq.n	800d370 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	015a      	lsls	r2, r3, #5
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	4413      	add	r3, r2
 800d362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d366:	461a      	mov	r2, r3
 800d368:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d36c:	6093      	str	r3, [r2, #8]
 800d36e:	e0a2      	b.n	800d4b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800d370:	6879      	ldr	r1, [r7, #4]
 800d372:	683a      	ldr	r2, [r7, #0]
 800d374:	4613      	mov	r3, r2
 800d376:	00db      	lsls	r3, r3, #3
 800d378:	1a9b      	subs	r3, r3, r2
 800d37a:	009b      	lsls	r3, r3, #2
 800d37c:	440b      	add	r3, r1
 800d37e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d382:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	0159      	lsls	r1, r3, #5
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	440b      	add	r3, r1
 800d38c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d390:	691b      	ldr	r3, [r3, #16]
 800d392:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800d396:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	683a      	ldr	r2, [r7, #0]
 800d39c:	4613      	mov	r3, r2
 800d39e:	00db      	lsls	r3, r3, #3
 800d3a0:	1a9b      	subs	r3, r3, r2
 800d3a2:	009b      	lsls	r3, r3, #2
 800d3a4:	4403      	add	r3, r0
 800d3a6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d3aa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800d3ac:	6879      	ldr	r1, [r7, #4]
 800d3ae:	683a      	ldr	r2, [r7, #0]
 800d3b0:	4613      	mov	r3, r2
 800d3b2:	00db      	lsls	r3, r3, #3
 800d3b4:	1a9b      	subs	r3, r3, r2
 800d3b6:	009b      	lsls	r3, r3, #2
 800d3b8:	440b      	add	r3, r1
 800d3ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d3be:	6819      	ldr	r1, [r3, #0]
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	683a      	ldr	r2, [r7, #0]
 800d3c4:	4613      	mov	r3, r2
 800d3c6:	00db      	lsls	r3, r3, #3
 800d3c8:	1a9b      	subs	r3, r3, r2
 800d3ca:	009b      	lsls	r3, r3, #2
 800d3cc:	4403      	add	r3, r0
 800d3ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	4419      	add	r1, r3
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	683a      	ldr	r2, [r7, #0]
 800d3da:	4613      	mov	r3, r2
 800d3dc:	00db      	lsls	r3, r3, #3
 800d3de:	1a9b      	subs	r3, r3, r2
 800d3e0:	009b      	lsls	r3, r3, #2
 800d3e2:	4403      	add	r3, r0
 800d3e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d3e8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d114      	bne.n	800d41a <PCD_EP_OutXfrComplete_int+0x16a>
 800d3f0:	6879      	ldr	r1, [r7, #4]
 800d3f2:	683a      	ldr	r2, [r7, #0]
 800d3f4:	4613      	mov	r3, r2
 800d3f6:	00db      	lsls	r3, r3, #3
 800d3f8:	1a9b      	subs	r3, r3, r2
 800d3fa:	009b      	lsls	r3, r3, #2
 800d3fc:	440b      	add	r3, r1
 800d3fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d108      	bne.n	800d41a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6818      	ldr	r0, [r3, #0]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d412:	461a      	mov	r2, r3
 800d414:	2101      	movs	r1, #1
 800d416:	f003 fc29 	bl	8010c6c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	b2db      	uxtb	r3, r3
 800d41e:	4619      	mov	r1, r3
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f008 f9cb 	bl	80157bc <HAL_PCD_DataOutStageCallback>
 800d426:	e046      	b.n	800d4b6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	4a26      	ldr	r2, [pc, #152]	; (800d4c4 <PCD_EP_OutXfrComplete_int+0x214>)
 800d42c:	4293      	cmp	r3, r2
 800d42e:	d124      	bne.n	800d47a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d436:	2b00      	cmp	r3, #0
 800d438:	d00a      	beq.n	800d450 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	015a      	lsls	r2, r3, #5
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	4413      	add	r3, r2
 800d442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d446:	461a      	mov	r2, r3
 800d448:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d44c:	6093      	str	r3, [r2, #8]
 800d44e:	e032      	b.n	800d4b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	f003 0320 	and.w	r3, r3, #32
 800d456:	2b00      	cmp	r3, #0
 800d458:	d008      	beq.n	800d46c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	015a      	lsls	r2, r3, #5
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	4413      	add	r3, r2
 800d462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d466:	461a      	mov	r2, r3
 800d468:	2320      	movs	r3, #32
 800d46a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	b2db      	uxtb	r3, r3
 800d470:	4619      	mov	r1, r3
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f008 f9a2 	bl	80157bc <HAL_PCD_DataOutStageCallback>
 800d478:	e01d      	b.n	800d4b6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d114      	bne.n	800d4aa <PCD_EP_OutXfrComplete_int+0x1fa>
 800d480:	6879      	ldr	r1, [r7, #4]
 800d482:	683a      	ldr	r2, [r7, #0]
 800d484:	4613      	mov	r3, r2
 800d486:	00db      	lsls	r3, r3, #3
 800d488:	1a9b      	subs	r3, r3, r2
 800d48a:	009b      	lsls	r3, r3, #2
 800d48c:	440b      	add	r3, r1
 800d48e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d108      	bne.n	800d4aa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6818      	ldr	r0, [r3, #0]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	2100      	movs	r1, #0
 800d4a6:	f003 fbe1 	bl	8010c6c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	b2db      	uxtb	r3, r3
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f008 f983 	bl	80157bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d4b6:	2300      	movs	r3, #0
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3718      	adds	r7, #24
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}
 800d4c0:	4f54300a 	.word	0x4f54300a
 800d4c4:	4f54310a 	.word	0x4f54310a

0800d4c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b086      	sub	sp, #24
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
 800d4d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	333c      	adds	r3, #60	; 0x3c
 800d4e0:	3304      	adds	r3, #4
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	015a      	lsls	r2, r3, #5
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	4413      	add	r3, r2
 800d4ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4f2:	689b      	ldr	r3, [r3, #8]
 800d4f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	4a15      	ldr	r2, [pc, #84]	; (800d550 <PCD_EP_OutSetupPacket_int+0x88>)
 800d4fa:	4293      	cmp	r3, r2
 800d4fc:	d90e      	bls.n	800d51c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d504:	2b00      	cmp	r3, #0
 800d506:	d009      	beq.n	800d51c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	015a      	lsls	r2, r3, #5
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	4413      	add	r3, r2
 800d510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d514:	461a      	mov	r2, r3
 800d516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d51a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f008 f93b 	bl	8015798 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	4a0a      	ldr	r2, [pc, #40]	; (800d550 <PCD_EP_OutSetupPacket_int+0x88>)
 800d526:	4293      	cmp	r3, r2
 800d528:	d90c      	bls.n	800d544 <PCD_EP_OutSetupPacket_int+0x7c>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	691b      	ldr	r3, [r3, #16]
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d108      	bne.n	800d544 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6818      	ldr	r0, [r3, #0]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d53c:	461a      	mov	r2, r3
 800d53e:	2101      	movs	r1, #1
 800d540:	f003 fb94 	bl	8010c6c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d544:	2300      	movs	r3, #0
}
 800d546:	4618      	mov	r0, r3
 800d548:	3718      	adds	r7, #24
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}
 800d54e:	bf00      	nop
 800d550:	4f54300a 	.word	0x4f54300a

0800d554 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d554:	b480      	push	{r7}
 800d556:	b085      	sub	sp, #20
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	460b      	mov	r3, r1
 800d55e:	70fb      	strb	r3, [r7, #3]
 800d560:	4613      	mov	r3, r2
 800d562:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d56a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d56c:	78fb      	ldrb	r3, [r7, #3]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d107      	bne.n	800d582 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d572:	883b      	ldrh	r3, [r7, #0]
 800d574:	0419      	lsls	r1, r3, #16
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	68ba      	ldr	r2, [r7, #8]
 800d57c:	430a      	orrs	r2, r1
 800d57e:	629a      	str	r2, [r3, #40]	; 0x28
 800d580:	e028      	b.n	800d5d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d588:	0c1b      	lsrs	r3, r3, #16
 800d58a:	68ba      	ldr	r2, [r7, #8]
 800d58c:	4413      	add	r3, r2
 800d58e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d590:	2300      	movs	r3, #0
 800d592:	73fb      	strb	r3, [r7, #15]
 800d594:	e00d      	b.n	800d5b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	7bfb      	ldrb	r3, [r7, #15]
 800d59c:	3340      	adds	r3, #64	; 0x40
 800d59e:	009b      	lsls	r3, r3, #2
 800d5a0:	4413      	add	r3, r2
 800d5a2:	685b      	ldr	r3, [r3, #4]
 800d5a4:	0c1b      	lsrs	r3, r3, #16
 800d5a6:	68ba      	ldr	r2, [r7, #8]
 800d5a8:	4413      	add	r3, r2
 800d5aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d5ac:	7bfb      	ldrb	r3, [r7, #15]
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	73fb      	strb	r3, [r7, #15]
 800d5b2:	7bfa      	ldrb	r2, [r7, #15]
 800d5b4:	78fb      	ldrb	r3, [r7, #3]
 800d5b6:	3b01      	subs	r3, #1
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d3ec      	bcc.n	800d596 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d5bc:	883b      	ldrh	r3, [r7, #0]
 800d5be:	0418      	lsls	r0, r3, #16
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	6819      	ldr	r1, [r3, #0]
 800d5c4:	78fb      	ldrb	r3, [r7, #3]
 800d5c6:	3b01      	subs	r3, #1
 800d5c8:	68ba      	ldr	r2, [r7, #8]
 800d5ca:	4302      	orrs	r2, r0
 800d5cc:	3340      	adds	r3, #64	; 0x40
 800d5ce:	009b      	lsls	r3, r3, #2
 800d5d0:	440b      	add	r3, r1
 800d5d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d5d4:	2300      	movs	r3, #0
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3714      	adds	r7, #20
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e0:	4770      	bx	lr

0800d5e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d5e2:	b480      	push	{r7}
 800d5e4:	b083      	sub	sp, #12
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	6078      	str	r0, [r7, #4]
 800d5ea:	460b      	mov	r3, r1
 800d5ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	887a      	ldrh	r2, [r7, #2]
 800d5f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800d5f6:	2300      	movs	r3, #0
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	370c      	adds	r7, #12
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d602:	4770      	bx	lr

0800d604 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d604:	b480      	push	{r7}
 800d606:	b083      	sub	sp, #12
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	460b      	mov	r3, r1
 800d60e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d610:	bf00      	nop
 800d612:	370c      	adds	r7, #12
 800d614:	46bd      	mov	sp, r7
 800d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61a:	4770      	bx	lr

0800d61c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b086      	sub	sp, #24
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d101      	bne.n	800d62e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d62a:	2301      	movs	r3, #1
 800d62c:	e25b      	b.n	800dae6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	f003 0301 	and.w	r3, r3, #1
 800d636:	2b00      	cmp	r3, #0
 800d638:	d075      	beq.n	800d726 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d63a:	4ba3      	ldr	r3, [pc, #652]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d63c:	689b      	ldr	r3, [r3, #8]
 800d63e:	f003 030c 	and.w	r3, r3, #12
 800d642:	2b04      	cmp	r3, #4
 800d644:	d00c      	beq.n	800d660 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d646:	4ba0      	ldr	r3, [pc, #640]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d648:	689b      	ldr	r3, [r3, #8]
 800d64a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d64e:	2b08      	cmp	r3, #8
 800d650:	d112      	bne.n	800d678 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d652:	4b9d      	ldr	r3, [pc, #628]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d654:	685b      	ldr	r3, [r3, #4]
 800d656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d65a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d65e:	d10b      	bne.n	800d678 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d660:	4b99      	ldr	r3, [pc, #612]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d05b      	beq.n	800d724 <HAL_RCC_OscConfig+0x108>
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d157      	bne.n	800d724 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d674:	2301      	movs	r3, #1
 800d676:	e236      	b.n	800dae6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	685b      	ldr	r3, [r3, #4]
 800d67c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d680:	d106      	bne.n	800d690 <HAL_RCC_OscConfig+0x74>
 800d682:	4b91      	ldr	r3, [pc, #580]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	4a90      	ldr	r2, [pc, #576]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d68c:	6013      	str	r3, [r2, #0]
 800d68e:	e01d      	b.n	800d6cc <HAL_RCC_OscConfig+0xb0>
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	685b      	ldr	r3, [r3, #4]
 800d694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d698:	d10c      	bne.n	800d6b4 <HAL_RCC_OscConfig+0x98>
 800d69a:	4b8b      	ldr	r3, [pc, #556]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	4a8a      	ldr	r2, [pc, #552]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d6a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d6a4:	6013      	str	r3, [r2, #0]
 800d6a6:	4b88      	ldr	r3, [pc, #544]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	4a87      	ldr	r2, [pc, #540]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d6ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d6b0:	6013      	str	r3, [r2, #0]
 800d6b2:	e00b      	b.n	800d6cc <HAL_RCC_OscConfig+0xb0>
 800d6b4:	4b84      	ldr	r3, [pc, #528]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4a83      	ldr	r2, [pc, #524]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d6ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d6be:	6013      	str	r3, [r2, #0]
 800d6c0:	4b81      	ldr	r3, [pc, #516]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4a80      	ldr	r2, [pc, #512]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d6c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d6ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d013      	beq.n	800d6fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d6d4:	f7fd ff66 	bl	800b5a4 <HAL_GetTick>
 800d6d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d6da:	e008      	b.n	800d6ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d6dc:	f7fd ff62 	bl	800b5a4 <HAL_GetTick>
 800d6e0:	4602      	mov	r2, r0
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	1ad3      	subs	r3, r2, r3
 800d6e6:	2b64      	cmp	r3, #100	; 0x64
 800d6e8:	d901      	bls.n	800d6ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d6ea:	2303      	movs	r3, #3
 800d6ec:	e1fb      	b.n	800dae6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d6ee:	4b76      	ldr	r3, [pc, #472]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d0f0      	beq.n	800d6dc <HAL_RCC_OscConfig+0xc0>
 800d6fa:	e014      	b.n	800d726 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d6fc:	f7fd ff52 	bl	800b5a4 <HAL_GetTick>
 800d700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d702:	e008      	b.n	800d716 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d704:	f7fd ff4e 	bl	800b5a4 <HAL_GetTick>
 800d708:	4602      	mov	r2, r0
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	1ad3      	subs	r3, r2, r3
 800d70e:	2b64      	cmp	r3, #100	; 0x64
 800d710:	d901      	bls.n	800d716 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d712:	2303      	movs	r3, #3
 800d714:	e1e7      	b.n	800dae6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d716:	4b6c      	ldr	r3, [pc, #432]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d1f0      	bne.n	800d704 <HAL_RCC_OscConfig+0xe8>
 800d722:	e000      	b.n	800d726 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f003 0302 	and.w	r3, r3, #2
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d063      	beq.n	800d7fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d732:	4b65      	ldr	r3, [pc, #404]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d734:	689b      	ldr	r3, [r3, #8]
 800d736:	f003 030c 	and.w	r3, r3, #12
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d00b      	beq.n	800d756 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d73e:	4b62      	ldr	r3, [pc, #392]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d740:	689b      	ldr	r3, [r3, #8]
 800d742:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d746:	2b08      	cmp	r3, #8
 800d748:	d11c      	bne.n	800d784 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d74a:	4b5f      	ldr	r3, [pc, #380]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d752:	2b00      	cmp	r3, #0
 800d754:	d116      	bne.n	800d784 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d756:	4b5c      	ldr	r3, [pc, #368]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f003 0302 	and.w	r3, r3, #2
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d005      	beq.n	800d76e <HAL_RCC_OscConfig+0x152>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	68db      	ldr	r3, [r3, #12]
 800d766:	2b01      	cmp	r3, #1
 800d768:	d001      	beq.n	800d76e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d76a:	2301      	movs	r3, #1
 800d76c:	e1bb      	b.n	800dae6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d76e:	4b56      	ldr	r3, [pc, #344]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	691b      	ldr	r3, [r3, #16]
 800d77a:	00db      	lsls	r3, r3, #3
 800d77c:	4952      	ldr	r1, [pc, #328]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d77e:	4313      	orrs	r3, r2
 800d780:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d782:	e03a      	b.n	800d7fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	68db      	ldr	r3, [r3, #12]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d020      	beq.n	800d7ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d78c:	4b4f      	ldr	r3, [pc, #316]	; (800d8cc <HAL_RCC_OscConfig+0x2b0>)
 800d78e:	2201      	movs	r2, #1
 800d790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d792:	f7fd ff07 	bl	800b5a4 <HAL_GetTick>
 800d796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d798:	e008      	b.n	800d7ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d79a:	f7fd ff03 	bl	800b5a4 <HAL_GetTick>
 800d79e:	4602      	mov	r2, r0
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	1ad3      	subs	r3, r2, r3
 800d7a4:	2b02      	cmp	r3, #2
 800d7a6:	d901      	bls.n	800d7ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d7a8:	2303      	movs	r3, #3
 800d7aa:	e19c      	b.n	800dae6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d7ac:	4b46      	ldr	r3, [pc, #280]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f003 0302 	and.w	r3, r3, #2
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d0f0      	beq.n	800d79a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d7b8:	4b43      	ldr	r3, [pc, #268]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	691b      	ldr	r3, [r3, #16]
 800d7c4:	00db      	lsls	r3, r3, #3
 800d7c6:	4940      	ldr	r1, [pc, #256]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d7c8:	4313      	orrs	r3, r2
 800d7ca:	600b      	str	r3, [r1, #0]
 800d7cc:	e015      	b.n	800d7fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d7ce:	4b3f      	ldr	r3, [pc, #252]	; (800d8cc <HAL_RCC_OscConfig+0x2b0>)
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7d4:	f7fd fee6 	bl	800b5a4 <HAL_GetTick>
 800d7d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d7da:	e008      	b.n	800d7ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d7dc:	f7fd fee2 	bl	800b5a4 <HAL_GetTick>
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	1ad3      	subs	r3, r2, r3
 800d7e6:	2b02      	cmp	r3, #2
 800d7e8:	d901      	bls.n	800d7ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d7ea:	2303      	movs	r3, #3
 800d7ec:	e17b      	b.n	800dae6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d7ee:	4b36      	ldr	r3, [pc, #216]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f003 0302 	and.w	r3, r3, #2
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d1f0      	bne.n	800d7dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f003 0308 	and.w	r3, r3, #8
 800d802:	2b00      	cmp	r3, #0
 800d804:	d030      	beq.n	800d868 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	695b      	ldr	r3, [r3, #20]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d016      	beq.n	800d83c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d80e:	4b30      	ldr	r3, [pc, #192]	; (800d8d0 <HAL_RCC_OscConfig+0x2b4>)
 800d810:	2201      	movs	r2, #1
 800d812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d814:	f7fd fec6 	bl	800b5a4 <HAL_GetTick>
 800d818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d81a:	e008      	b.n	800d82e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d81c:	f7fd fec2 	bl	800b5a4 <HAL_GetTick>
 800d820:	4602      	mov	r2, r0
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	1ad3      	subs	r3, r2, r3
 800d826:	2b02      	cmp	r3, #2
 800d828:	d901      	bls.n	800d82e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d82a:	2303      	movs	r3, #3
 800d82c:	e15b      	b.n	800dae6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d82e:	4b26      	ldr	r3, [pc, #152]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d832:	f003 0302 	and.w	r3, r3, #2
 800d836:	2b00      	cmp	r3, #0
 800d838:	d0f0      	beq.n	800d81c <HAL_RCC_OscConfig+0x200>
 800d83a:	e015      	b.n	800d868 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d83c:	4b24      	ldr	r3, [pc, #144]	; (800d8d0 <HAL_RCC_OscConfig+0x2b4>)
 800d83e:	2200      	movs	r2, #0
 800d840:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d842:	f7fd feaf 	bl	800b5a4 <HAL_GetTick>
 800d846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d848:	e008      	b.n	800d85c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d84a:	f7fd feab 	bl	800b5a4 <HAL_GetTick>
 800d84e:	4602      	mov	r2, r0
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	1ad3      	subs	r3, r2, r3
 800d854:	2b02      	cmp	r3, #2
 800d856:	d901      	bls.n	800d85c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d858:	2303      	movs	r3, #3
 800d85a:	e144      	b.n	800dae6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d85c:	4b1a      	ldr	r3, [pc, #104]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d85e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d860:	f003 0302 	and.w	r3, r3, #2
 800d864:	2b00      	cmp	r3, #0
 800d866:	d1f0      	bne.n	800d84a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	f003 0304 	and.w	r3, r3, #4
 800d870:	2b00      	cmp	r3, #0
 800d872:	f000 80a0 	beq.w	800d9b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d876:	2300      	movs	r3, #0
 800d878:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d87a:	4b13      	ldr	r3, [pc, #76]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d87c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d87e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d882:	2b00      	cmp	r3, #0
 800d884:	d10f      	bne.n	800d8a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d886:	2300      	movs	r3, #0
 800d888:	60bb      	str	r3, [r7, #8]
 800d88a:	4b0f      	ldr	r3, [pc, #60]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d88c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d88e:	4a0e      	ldr	r2, [pc, #56]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d894:	6413      	str	r3, [r2, #64]	; 0x40
 800d896:	4b0c      	ldr	r3, [pc, #48]	; (800d8c8 <HAL_RCC_OscConfig+0x2ac>)
 800d898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d89a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d89e:	60bb      	str	r3, [r7, #8]
 800d8a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d8a6:	4b0b      	ldr	r3, [pc, #44]	; (800d8d4 <HAL_RCC_OscConfig+0x2b8>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d121      	bne.n	800d8f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d8b2:	4b08      	ldr	r3, [pc, #32]	; (800d8d4 <HAL_RCC_OscConfig+0x2b8>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	4a07      	ldr	r2, [pc, #28]	; (800d8d4 <HAL_RCC_OscConfig+0x2b8>)
 800d8b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d8bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d8be:	f7fd fe71 	bl	800b5a4 <HAL_GetTick>
 800d8c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d8c4:	e011      	b.n	800d8ea <HAL_RCC_OscConfig+0x2ce>
 800d8c6:	bf00      	nop
 800d8c8:	40023800 	.word	0x40023800
 800d8cc:	42470000 	.word	0x42470000
 800d8d0:	42470e80 	.word	0x42470e80
 800d8d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d8d8:	f7fd fe64 	bl	800b5a4 <HAL_GetTick>
 800d8dc:	4602      	mov	r2, r0
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	1ad3      	subs	r3, r2, r3
 800d8e2:	2b02      	cmp	r3, #2
 800d8e4:	d901      	bls.n	800d8ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800d8e6:	2303      	movs	r3, #3
 800d8e8:	e0fd      	b.n	800dae6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d8ea:	4b81      	ldr	r3, [pc, #516]	; (800daf0 <HAL_RCC_OscConfig+0x4d4>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d0f0      	beq.n	800d8d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	689b      	ldr	r3, [r3, #8]
 800d8fa:	2b01      	cmp	r3, #1
 800d8fc:	d106      	bne.n	800d90c <HAL_RCC_OscConfig+0x2f0>
 800d8fe:	4b7d      	ldr	r3, [pc, #500]	; (800daf4 <HAL_RCC_OscConfig+0x4d8>)
 800d900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d902:	4a7c      	ldr	r2, [pc, #496]	; (800daf4 <HAL_RCC_OscConfig+0x4d8>)
 800d904:	f043 0301 	orr.w	r3, r3, #1
 800d908:	6713      	str	r3, [r2, #112]	; 0x70
 800d90a:	e01c      	b.n	800d946 <HAL_RCC_OscConfig+0x32a>
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	689b      	ldr	r3, [r3, #8]
 800d910:	2b05      	cmp	r3, #5
 800d912:	d10c      	bne.n	800d92e <HAL_RCC_OscConfig+0x312>
 800d914:	4b77      	ldr	r3, [pc, #476]	; (800daf4 <HAL_RCC_OscConfig+0x4d8>)
 800d916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d918:	4a76      	ldr	r2, [pc, #472]	; (800daf4 <HAL_RCC_OscConfig+0x4d8>)
 800d91a:	f043 0304 	orr.w	r3, r3, #4
 800d91e:	6713      	str	r3, [r2, #112]	; 0x70
 800d920:	4b74      	ldr	r3, [pc, #464]	; (800daf4 <HAL_RCC_OscConfig+0x4d8>)
 800d922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d924:	4a73      	ldr	r2, [pc, #460]	; (800daf4 <HAL_RCC_OscConfig+0x4d8>)
 800d926:	f043 0301 	orr.w	r3, r3, #1
 800d92a:	6713      	str	r3, [r2, #112]	; 0x70
 800d92c:	e00b      	b.n	800d946 <HAL_RCC_OscConfig+0x32a>
 800d92e:	4b71      	ldr	r3, [pc, #452]	; (800daf4 <HAL_RCC_OscConfig+0x4d8>)
 800d930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d932:	4a70      	ldr	r2, [pc, #448]	; (800daf4 <HAL_RCC_OscConfig+0x4d8>)
 800d934:	f023 0301 	bic.w	r3, r3, #1
 800d938:	6713      	str	r3, [r2, #112]	; 0x70
 800d93a:	4b6e      	ldr	r3, [pc, #440]	; (800daf4 <HAL_RCC_OscConfig+0x4d8>)
 800d93c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d93e:	4a6d      	ldr	r2, [pc, #436]	; (800daf4 <HAL_RCC_OscConfig+0x4d8>)
 800d940:	f023 0304 	bic.w	r3, r3, #4
 800d944:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	689b      	ldr	r3, [r3, #8]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d015      	beq.n	800d97a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d94e:	f7fd fe29 	bl	800b5a4 <HAL_GetTick>
 800d952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d954:	e00a      	b.n	800d96c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d956:	f7fd fe25 	bl	800b5a4 <HAL_GetTick>
 800d95a:	4602      	mov	r2, r0
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	1ad3      	subs	r3, r2, r3
 800d960:	f241 3288 	movw	r2, #5000	; 0x1388
 800d964:	4293      	cmp	r3, r2
 800d966:	d901      	bls.n	800d96c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800d968:	2303      	movs	r3, #3
 800d96a:	e0bc      	b.n	800dae6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d96c:	4b61      	ldr	r3, [pc, #388]	; (800daf4 <HAL_RCC_OscConfig+0x4d8>)
 800d96e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d970:	f003 0302 	and.w	r3, r3, #2
 800d974:	2b00      	cmp	r3, #0
 800d976:	d0ee      	beq.n	800d956 <HAL_RCC_OscConfig+0x33a>
 800d978:	e014      	b.n	800d9a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d97a:	f7fd fe13 	bl	800b5a4 <HAL_GetTick>
 800d97e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d980:	e00a      	b.n	800d998 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d982:	f7fd fe0f 	bl	800b5a4 <HAL_GetTick>
 800d986:	4602      	mov	r2, r0
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	1ad3      	subs	r3, r2, r3
 800d98c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d990:	4293      	cmp	r3, r2
 800d992:	d901      	bls.n	800d998 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800d994:	2303      	movs	r3, #3
 800d996:	e0a6      	b.n	800dae6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d998:	4b56      	ldr	r3, [pc, #344]	; (800daf4 <HAL_RCC_OscConfig+0x4d8>)
 800d99a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d99c:	f003 0302 	and.w	r3, r3, #2
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d1ee      	bne.n	800d982 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d9a4:	7dfb      	ldrb	r3, [r7, #23]
 800d9a6:	2b01      	cmp	r3, #1
 800d9a8:	d105      	bne.n	800d9b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d9aa:	4b52      	ldr	r3, [pc, #328]	; (800daf4 <HAL_RCC_OscConfig+0x4d8>)
 800d9ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9ae:	4a51      	ldr	r2, [pc, #324]	; (800daf4 <HAL_RCC_OscConfig+0x4d8>)
 800d9b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d9b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	699b      	ldr	r3, [r3, #24]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	f000 8092 	beq.w	800dae4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d9c0:	4b4c      	ldr	r3, [pc, #304]	; (800daf4 <HAL_RCC_OscConfig+0x4d8>)
 800d9c2:	689b      	ldr	r3, [r3, #8]
 800d9c4:	f003 030c 	and.w	r3, r3, #12
 800d9c8:	2b08      	cmp	r3, #8
 800d9ca:	d05c      	beq.n	800da86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	699b      	ldr	r3, [r3, #24]
 800d9d0:	2b02      	cmp	r3, #2
 800d9d2:	d141      	bne.n	800da58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d9d4:	4b48      	ldr	r3, [pc, #288]	; (800daf8 <HAL_RCC_OscConfig+0x4dc>)
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d9da:	f7fd fde3 	bl	800b5a4 <HAL_GetTick>
 800d9de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d9e0:	e008      	b.n	800d9f4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d9e2:	f7fd fddf 	bl	800b5a4 <HAL_GetTick>
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	1ad3      	subs	r3, r2, r3
 800d9ec:	2b02      	cmp	r3, #2
 800d9ee:	d901      	bls.n	800d9f4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800d9f0:	2303      	movs	r3, #3
 800d9f2:	e078      	b.n	800dae6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d9f4:	4b3f      	ldr	r3, [pc, #252]	; (800daf4 <HAL_RCC_OscConfig+0x4d8>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d1f0      	bne.n	800d9e2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	69da      	ldr	r2, [r3, #28]
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6a1b      	ldr	r3, [r3, #32]
 800da08:	431a      	orrs	r2, r3
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da0e:	019b      	lsls	r3, r3, #6
 800da10:	431a      	orrs	r2, r3
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da16:	085b      	lsrs	r3, r3, #1
 800da18:	3b01      	subs	r3, #1
 800da1a:	041b      	lsls	r3, r3, #16
 800da1c:	431a      	orrs	r2, r3
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da22:	061b      	lsls	r3, r3, #24
 800da24:	4933      	ldr	r1, [pc, #204]	; (800daf4 <HAL_RCC_OscConfig+0x4d8>)
 800da26:	4313      	orrs	r3, r2
 800da28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800da2a:	4b33      	ldr	r3, [pc, #204]	; (800daf8 <HAL_RCC_OscConfig+0x4dc>)
 800da2c:	2201      	movs	r2, #1
 800da2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800da30:	f7fd fdb8 	bl	800b5a4 <HAL_GetTick>
 800da34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800da36:	e008      	b.n	800da4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800da38:	f7fd fdb4 	bl	800b5a4 <HAL_GetTick>
 800da3c:	4602      	mov	r2, r0
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	1ad3      	subs	r3, r2, r3
 800da42:	2b02      	cmp	r3, #2
 800da44:	d901      	bls.n	800da4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800da46:	2303      	movs	r3, #3
 800da48:	e04d      	b.n	800dae6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800da4a:	4b2a      	ldr	r3, [pc, #168]	; (800daf4 <HAL_RCC_OscConfig+0x4d8>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da52:	2b00      	cmp	r3, #0
 800da54:	d0f0      	beq.n	800da38 <HAL_RCC_OscConfig+0x41c>
 800da56:	e045      	b.n	800dae4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800da58:	4b27      	ldr	r3, [pc, #156]	; (800daf8 <HAL_RCC_OscConfig+0x4dc>)
 800da5a:	2200      	movs	r2, #0
 800da5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800da5e:	f7fd fda1 	bl	800b5a4 <HAL_GetTick>
 800da62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800da64:	e008      	b.n	800da78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800da66:	f7fd fd9d 	bl	800b5a4 <HAL_GetTick>
 800da6a:	4602      	mov	r2, r0
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	1ad3      	subs	r3, r2, r3
 800da70:	2b02      	cmp	r3, #2
 800da72:	d901      	bls.n	800da78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800da74:	2303      	movs	r3, #3
 800da76:	e036      	b.n	800dae6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800da78:	4b1e      	ldr	r3, [pc, #120]	; (800daf4 <HAL_RCC_OscConfig+0x4d8>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da80:	2b00      	cmp	r3, #0
 800da82:	d1f0      	bne.n	800da66 <HAL_RCC_OscConfig+0x44a>
 800da84:	e02e      	b.n	800dae4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	699b      	ldr	r3, [r3, #24]
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	d101      	bne.n	800da92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800da8e:	2301      	movs	r3, #1
 800da90:	e029      	b.n	800dae6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800da92:	4b18      	ldr	r3, [pc, #96]	; (800daf4 <HAL_RCC_OscConfig+0x4d8>)
 800da94:	685b      	ldr	r3, [r3, #4]
 800da96:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	69db      	ldr	r3, [r3, #28]
 800daa2:	429a      	cmp	r2, r3
 800daa4:	d11c      	bne.n	800dae0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d115      	bne.n	800dae0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800dab4:	68fa      	ldr	r2, [r7, #12]
 800dab6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800daba:	4013      	ands	r3, r2
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dac0:	4293      	cmp	r3, r2
 800dac2:	d10d      	bne.n	800dae0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800dace:	429a      	cmp	r2, r3
 800dad0:	d106      	bne.n	800dae0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800dadc:	429a      	cmp	r2, r3
 800dade:	d001      	beq.n	800dae4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800dae0:	2301      	movs	r3, #1
 800dae2:	e000      	b.n	800dae6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800dae4:	2300      	movs	r3, #0
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	3718      	adds	r7, #24
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}
 800daee:	bf00      	nop
 800daf0:	40007000 	.word	0x40007000
 800daf4:	40023800 	.word	0x40023800
 800daf8:	42470060 	.word	0x42470060

0800dafc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b084      	sub	sp, #16
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d101      	bne.n	800db10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800db0c:	2301      	movs	r3, #1
 800db0e:	e0cc      	b.n	800dcaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800db10:	4b68      	ldr	r3, [pc, #416]	; (800dcb4 <HAL_RCC_ClockConfig+0x1b8>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	f003 030f 	and.w	r3, r3, #15
 800db18:	683a      	ldr	r2, [r7, #0]
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d90c      	bls.n	800db38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800db1e:	4b65      	ldr	r3, [pc, #404]	; (800dcb4 <HAL_RCC_ClockConfig+0x1b8>)
 800db20:	683a      	ldr	r2, [r7, #0]
 800db22:	b2d2      	uxtb	r2, r2
 800db24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800db26:	4b63      	ldr	r3, [pc, #396]	; (800dcb4 <HAL_RCC_ClockConfig+0x1b8>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	f003 030f 	and.w	r3, r3, #15
 800db2e:	683a      	ldr	r2, [r7, #0]
 800db30:	429a      	cmp	r2, r3
 800db32:	d001      	beq.n	800db38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800db34:	2301      	movs	r3, #1
 800db36:	e0b8      	b.n	800dcaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	f003 0302 	and.w	r3, r3, #2
 800db40:	2b00      	cmp	r3, #0
 800db42:	d020      	beq.n	800db86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	f003 0304 	and.w	r3, r3, #4
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d005      	beq.n	800db5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800db50:	4b59      	ldr	r3, [pc, #356]	; (800dcb8 <HAL_RCC_ClockConfig+0x1bc>)
 800db52:	689b      	ldr	r3, [r3, #8]
 800db54:	4a58      	ldr	r2, [pc, #352]	; (800dcb8 <HAL_RCC_ClockConfig+0x1bc>)
 800db56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800db5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	f003 0308 	and.w	r3, r3, #8
 800db64:	2b00      	cmp	r3, #0
 800db66:	d005      	beq.n	800db74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800db68:	4b53      	ldr	r3, [pc, #332]	; (800dcb8 <HAL_RCC_ClockConfig+0x1bc>)
 800db6a:	689b      	ldr	r3, [r3, #8]
 800db6c:	4a52      	ldr	r2, [pc, #328]	; (800dcb8 <HAL_RCC_ClockConfig+0x1bc>)
 800db6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800db72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800db74:	4b50      	ldr	r3, [pc, #320]	; (800dcb8 <HAL_RCC_ClockConfig+0x1bc>)
 800db76:	689b      	ldr	r3, [r3, #8]
 800db78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	689b      	ldr	r3, [r3, #8]
 800db80:	494d      	ldr	r1, [pc, #308]	; (800dcb8 <HAL_RCC_ClockConfig+0x1bc>)
 800db82:	4313      	orrs	r3, r2
 800db84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f003 0301 	and.w	r3, r3, #1
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d044      	beq.n	800dc1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	2b01      	cmp	r3, #1
 800db98:	d107      	bne.n	800dbaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800db9a:	4b47      	ldr	r3, [pc, #284]	; (800dcb8 <HAL_RCC_ClockConfig+0x1bc>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d119      	bne.n	800dbda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dba6:	2301      	movs	r3, #1
 800dba8:	e07f      	b.n	800dcaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	685b      	ldr	r3, [r3, #4]
 800dbae:	2b02      	cmp	r3, #2
 800dbb0:	d003      	beq.n	800dbba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dbb6:	2b03      	cmp	r3, #3
 800dbb8:	d107      	bne.n	800dbca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dbba:	4b3f      	ldr	r3, [pc, #252]	; (800dcb8 <HAL_RCC_ClockConfig+0x1bc>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d109      	bne.n	800dbda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	e06f      	b.n	800dcaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dbca:	4b3b      	ldr	r3, [pc, #236]	; (800dcb8 <HAL_RCC_ClockConfig+0x1bc>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	f003 0302 	and.w	r3, r3, #2
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d101      	bne.n	800dbda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	e067      	b.n	800dcaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dbda:	4b37      	ldr	r3, [pc, #220]	; (800dcb8 <HAL_RCC_ClockConfig+0x1bc>)
 800dbdc:	689b      	ldr	r3, [r3, #8]
 800dbde:	f023 0203 	bic.w	r2, r3, #3
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	685b      	ldr	r3, [r3, #4]
 800dbe6:	4934      	ldr	r1, [pc, #208]	; (800dcb8 <HAL_RCC_ClockConfig+0x1bc>)
 800dbe8:	4313      	orrs	r3, r2
 800dbea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800dbec:	f7fd fcda 	bl	800b5a4 <HAL_GetTick>
 800dbf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dbf2:	e00a      	b.n	800dc0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dbf4:	f7fd fcd6 	bl	800b5a4 <HAL_GetTick>
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	1ad3      	subs	r3, r2, r3
 800dbfe:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc02:	4293      	cmp	r3, r2
 800dc04:	d901      	bls.n	800dc0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800dc06:	2303      	movs	r3, #3
 800dc08:	e04f      	b.n	800dcaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dc0a:	4b2b      	ldr	r3, [pc, #172]	; (800dcb8 <HAL_RCC_ClockConfig+0x1bc>)
 800dc0c:	689b      	ldr	r3, [r3, #8]
 800dc0e:	f003 020c 	and.w	r2, r3, #12
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	685b      	ldr	r3, [r3, #4]
 800dc16:	009b      	lsls	r3, r3, #2
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d1eb      	bne.n	800dbf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800dc1c:	4b25      	ldr	r3, [pc, #148]	; (800dcb4 <HAL_RCC_ClockConfig+0x1b8>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	f003 030f 	and.w	r3, r3, #15
 800dc24:	683a      	ldr	r2, [r7, #0]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d20c      	bcs.n	800dc44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dc2a:	4b22      	ldr	r3, [pc, #136]	; (800dcb4 <HAL_RCC_ClockConfig+0x1b8>)
 800dc2c:	683a      	ldr	r2, [r7, #0]
 800dc2e:	b2d2      	uxtb	r2, r2
 800dc30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dc32:	4b20      	ldr	r3, [pc, #128]	; (800dcb4 <HAL_RCC_ClockConfig+0x1b8>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f003 030f 	and.w	r3, r3, #15
 800dc3a:	683a      	ldr	r2, [r7, #0]
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d001      	beq.n	800dc44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800dc40:	2301      	movs	r3, #1
 800dc42:	e032      	b.n	800dcaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f003 0304 	and.w	r3, r3, #4
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d008      	beq.n	800dc62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800dc50:	4b19      	ldr	r3, [pc, #100]	; (800dcb8 <HAL_RCC_ClockConfig+0x1bc>)
 800dc52:	689b      	ldr	r3, [r3, #8]
 800dc54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	68db      	ldr	r3, [r3, #12]
 800dc5c:	4916      	ldr	r1, [pc, #88]	; (800dcb8 <HAL_RCC_ClockConfig+0x1bc>)
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f003 0308 	and.w	r3, r3, #8
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d009      	beq.n	800dc82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800dc6e:	4b12      	ldr	r3, [pc, #72]	; (800dcb8 <HAL_RCC_ClockConfig+0x1bc>)
 800dc70:	689b      	ldr	r3, [r3, #8]
 800dc72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	691b      	ldr	r3, [r3, #16]
 800dc7a:	00db      	lsls	r3, r3, #3
 800dc7c:	490e      	ldr	r1, [pc, #56]	; (800dcb8 <HAL_RCC_ClockConfig+0x1bc>)
 800dc7e:	4313      	orrs	r3, r2
 800dc80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800dc82:	f000 f821 	bl	800dcc8 <HAL_RCC_GetSysClockFreq>
 800dc86:	4601      	mov	r1, r0
 800dc88:	4b0b      	ldr	r3, [pc, #44]	; (800dcb8 <HAL_RCC_ClockConfig+0x1bc>)
 800dc8a:	689b      	ldr	r3, [r3, #8]
 800dc8c:	091b      	lsrs	r3, r3, #4
 800dc8e:	f003 030f 	and.w	r3, r3, #15
 800dc92:	4a0a      	ldr	r2, [pc, #40]	; (800dcbc <HAL_RCC_ClockConfig+0x1c0>)
 800dc94:	5cd3      	ldrb	r3, [r2, r3]
 800dc96:	fa21 f303 	lsr.w	r3, r1, r3
 800dc9a:	4a09      	ldr	r2, [pc, #36]	; (800dcc0 <HAL_RCC_ClockConfig+0x1c4>)
 800dc9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800dc9e:	4b09      	ldr	r3, [pc, #36]	; (800dcc4 <HAL_RCC_ClockConfig+0x1c8>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	4618      	mov	r0, r3
 800dca4:	f7fd f984 	bl	800afb0 <HAL_InitTick>

  return HAL_OK;
 800dca8:	2300      	movs	r3, #0
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3710      	adds	r7, #16
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
 800dcb2:	bf00      	nop
 800dcb4:	40023c00 	.word	0x40023c00
 800dcb8:	40023800 	.word	0x40023800
 800dcbc:	0801b508 	.word	0x0801b508
 800dcc0:	20002088 	.word	0x20002088
 800dcc4:	2000208c 	.word	0x2000208c

0800dcc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dcc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcca:	b085      	sub	sp, #20
 800dccc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	607b      	str	r3, [r7, #4]
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	60fb      	str	r3, [r7, #12]
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dcde:	4b63      	ldr	r3, [pc, #396]	; (800de6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dce0:	689b      	ldr	r3, [r3, #8]
 800dce2:	f003 030c 	and.w	r3, r3, #12
 800dce6:	2b04      	cmp	r3, #4
 800dce8:	d007      	beq.n	800dcfa <HAL_RCC_GetSysClockFreq+0x32>
 800dcea:	2b08      	cmp	r3, #8
 800dcec:	d008      	beq.n	800dd00 <HAL_RCC_GetSysClockFreq+0x38>
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	f040 80b4 	bne.w	800de5c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800dcf4:	4b5e      	ldr	r3, [pc, #376]	; (800de70 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800dcf6:	60bb      	str	r3, [r7, #8]
       break;
 800dcf8:	e0b3      	b.n	800de62 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800dcfa:	4b5e      	ldr	r3, [pc, #376]	; (800de74 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800dcfc:	60bb      	str	r3, [r7, #8]
      break;
 800dcfe:	e0b0      	b.n	800de62 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800dd00:	4b5a      	ldr	r3, [pc, #360]	; (800de6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dd02:	685b      	ldr	r3, [r3, #4]
 800dd04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd08:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800dd0a:	4b58      	ldr	r3, [pc, #352]	; (800de6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dd0c:	685b      	ldr	r3, [r3, #4]
 800dd0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d04a      	beq.n	800ddac <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dd16:	4b55      	ldr	r3, [pc, #340]	; (800de6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dd18:	685b      	ldr	r3, [r3, #4]
 800dd1a:	099b      	lsrs	r3, r3, #6
 800dd1c:	f04f 0400 	mov.w	r4, #0
 800dd20:	f240 11ff 	movw	r1, #511	; 0x1ff
 800dd24:	f04f 0200 	mov.w	r2, #0
 800dd28:	ea03 0501 	and.w	r5, r3, r1
 800dd2c:	ea04 0602 	and.w	r6, r4, r2
 800dd30:	4629      	mov	r1, r5
 800dd32:	4632      	mov	r2, r6
 800dd34:	f04f 0300 	mov.w	r3, #0
 800dd38:	f04f 0400 	mov.w	r4, #0
 800dd3c:	0154      	lsls	r4, r2, #5
 800dd3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800dd42:	014b      	lsls	r3, r1, #5
 800dd44:	4619      	mov	r1, r3
 800dd46:	4622      	mov	r2, r4
 800dd48:	1b49      	subs	r1, r1, r5
 800dd4a:	eb62 0206 	sbc.w	r2, r2, r6
 800dd4e:	f04f 0300 	mov.w	r3, #0
 800dd52:	f04f 0400 	mov.w	r4, #0
 800dd56:	0194      	lsls	r4, r2, #6
 800dd58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800dd5c:	018b      	lsls	r3, r1, #6
 800dd5e:	1a5b      	subs	r3, r3, r1
 800dd60:	eb64 0402 	sbc.w	r4, r4, r2
 800dd64:	f04f 0100 	mov.w	r1, #0
 800dd68:	f04f 0200 	mov.w	r2, #0
 800dd6c:	00e2      	lsls	r2, r4, #3
 800dd6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800dd72:	00d9      	lsls	r1, r3, #3
 800dd74:	460b      	mov	r3, r1
 800dd76:	4614      	mov	r4, r2
 800dd78:	195b      	adds	r3, r3, r5
 800dd7a:	eb44 0406 	adc.w	r4, r4, r6
 800dd7e:	f04f 0100 	mov.w	r1, #0
 800dd82:	f04f 0200 	mov.w	r2, #0
 800dd86:	0262      	lsls	r2, r4, #9
 800dd88:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800dd8c:	0259      	lsls	r1, r3, #9
 800dd8e:	460b      	mov	r3, r1
 800dd90:	4614      	mov	r4, r2
 800dd92:	4618      	mov	r0, r3
 800dd94:	4621      	mov	r1, r4
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	f04f 0400 	mov.w	r4, #0
 800dd9c:	461a      	mov	r2, r3
 800dd9e:	4623      	mov	r3, r4
 800dda0:	f7f2 ff72 	bl	8000c88 <__aeabi_uldivmod>
 800dda4:	4603      	mov	r3, r0
 800dda6:	460c      	mov	r4, r1
 800dda8:	60fb      	str	r3, [r7, #12]
 800ddaa:	e049      	b.n	800de40 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ddac:	4b2f      	ldr	r3, [pc, #188]	; (800de6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	099b      	lsrs	r3, r3, #6
 800ddb2:	f04f 0400 	mov.w	r4, #0
 800ddb6:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ddba:	f04f 0200 	mov.w	r2, #0
 800ddbe:	ea03 0501 	and.w	r5, r3, r1
 800ddc2:	ea04 0602 	and.w	r6, r4, r2
 800ddc6:	4629      	mov	r1, r5
 800ddc8:	4632      	mov	r2, r6
 800ddca:	f04f 0300 	mov.w	r3, #0
 800ddce:	f04f 0400 	mov.w	r4, #0
 800ddd2:	0154      	lsls	r4, r2, #5
 800ddd4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800ddd8:	014b      	lsls	r3, r1, #5
 800ddda:	4619      	mov	r1, r3
 800dddc:	4622      	mov	r2, r4
 800ddde:	1b49      	subs	r1, r1, r5
 800dde0:	eb62 0206 	sbc.w	r2, r2, r6
 800dde4:	f04f 0300 	mov.w	r3, #0
 800dde8:	f04f 0400 	mov.w	r4, #0
 800ddec:	0194      	lsls	r4, r2, #6
 800ddee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800ddf2:	018b      	lsls	r3, r1, #6
 800ddf4:	1a5b      	subs	r3, r3, r1
 800ddf6:	eb64 0402 	sbc.w	r4, r4, r2
 800ddfa:	f04f 0100 	mov.w	r1, #0
 800ddfe:	f04f 0200 	mov.w	r2, #0
 800de02:	00e2      	lsls	r2, r4, #3
 800de04:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800de08:	00d9      	lsls	r1, r3, #3
 800de0a:	460b      	mov	r3, r1
 800de0c:	4614      	mov	r4, r2
 800de0e:	195b      	adds	r3, r3, r5
 800de10:	eb44 0406 	adc.w	r4, r4, r6
 800de14:	f04f 0100 	mov.w	r1, #0
 800de18:	f04f 0200 	mov.w	r2, #0
 800de1c:	02a2      	lsls	r2, r4, #10
 800de1e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800de22:	0299      	lsls	r1, r3, #10
 800de24:	460b      	mov	r3, r1
 800de26:	4614      	mov	r4, r2
 800de28:	4618      	mov	r0, r3
 800de2a:	4621      	mov	r1, r4
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f04f 0400 	mov.w	r4, #0
 800de32:	461a      	mov	r2, r3
 800de34:	4623      	mov	r3, r4
 800de36:	f7f2 ff27 	bl	8000c88 <__aeabi_uldivmod>
 800de3a:	4603      	mov	r3, r0
 800de3c:	460c      	mov	r4, r1
 800de3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800de40:	4b0a      	ldr	r3, [pc, #40]	; (800de6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800de42:	685b      	ldr	r3, [r3, #4]
 800de44:	0c1b      	lsrs	r3, r3, #16
 800de46:	f003 0303 	and.w	r3, r3, #3
 800de4a:	3301      	adds	r3, #1
 800de4c:	005b      	lsls	r3, r3, #1
 800de4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800de50:	68fa      	ldr	r2, [r7, #12]
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	fbb2 f3f3 	udiv	r3, r2, r3
 800de58:	60bb      	str	r3, [r7, #8]
      break;
 800de5a:	e002      	b.n	800de62 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800de5c:	4b04      	ldr	r3, [pc, #16]	; (800de70 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800de5e:	60bb      	str	r3, [r7, #8]
      break;
 800de60:	bf00      	nop
    }
  }
  return sysclockfreq;
 800de62:	68bb      	ldr	r3, [r7, #8]
}
 800de64:	4618      	mov	r0, r3
 800de66:	3714      	adds	r7, #20
 800de68:	46bd      	mov	sp, r7
 800de6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de6c:	40023800 	.word	0x40023800
 800de70:	00f42400 	.word	0x00f42400
 800de74:	007a1200 	.word	0x007a1200

0800de78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800de78:	b480      	push	{r7}
 800de7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800de7c:	4b03      	ldr	r3, [pc, #12]	; (800de8c <HAL_RCC_GetHCLKFreq+0x14>)
 800de7e:	681b      	ldr	r3, [r3, #0]
}
 800de80:	4618      	mov	r0, r3
 800de82:	46bd      	mov	sp, r7
 800de84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de88:	4770      	bx	lr
 800de8a:	bf00      	nop
 800de8c:	20002088 	.word	0x20002088

0800de90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800de94:	f7ff fff0 	bl	800de78 <HAL_RCC_GetHCLKFreq>
 800de98:	4601      	mov	r1, r0
 800de9a:	4b05      	ldr	r3, [pc, #20]	; (800deb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800de9c:	689b      	ldr	r3, [r3, #8]
 800de9e:	0a9b      	lsrs	r3, r3, #10
 800dea0:	f003 0307 	and.w	r3, r3, #7
 800dea4:	4a03      	ldr	r2, [pc, #12]	; (800deb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800dea6:	5cd3      	ldrb	r3, [r2, r3]
 800dea8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800deac:	4618      	mov	r0, r3
 800deae:	bd80      	pop	{r7, pc}
 800deb0:	40023800 	.word	0x40023800
 800deb4:	0801b518 	.word	0x0801b518

0800deb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800debc:	f7ff ffdc 	bl	800de78 <HAL_RCC_GetHCLKFreq>
 800dec0:	4601      	mov	r1, r0
 800dec2:	4b05      	ldr	r3, [pc, #20]	; (800ded8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800dec4:	689b      	ldr	r3, [r3, #8]
 800dec6:	0b5b      	lsrs	r3, r3, #13
 800dec8:	f003 0307 	and.w	r3, r3, #7
 800decc:	4a03      	ldr	r2, [pc, #12]	; (800dedc <HAL_RCC_GetPCLK2Freq+0x24>)
 800dece:	5cd3      	ldrb	r3, [r2, r3]
 800ded0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	bd80      	pop	{r7, pc}
 800ded8:	40023800 	.word	0x40023800
 800dedc:	0801b518 	.word	0x0801b518

0800dee0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800dee0:	b480      	push	{r7}
 800dee2:	b083      	sub	sp, #12
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	220f      	movs	r2, #15
 800deee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800def0:	4b12      	ldr	r3, [pc, #72]	; (800df3c <HAL_RCC_GetClockConfig+0x5c>)
 800def2:	689b      	ldr	r3, [r3, #8]
 800def4:	f003 0203 	and.w	r2, r3, #3
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800defc:	4b0f      	ldr	r3, [pc, #60]	; (800df3c <HAL_RCC_GetClockConfig+0x5c>)
 800defe:	689b      	ldr	r3, [r3, #8]
 800df00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800df08:	4b0c      	ldr	r3, [pc, #48]	; (800df3c <HAL_RCC_GetClockConfig+0x5c>)
 800df0a:	689b      	ldr	r3, [r3, #8]
 800df0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800df14:	4b09      	ldr	r3, [pc, #36]	; (800df3c <HAL_RCC_GetClockConfig+0x5c>)
 800df16:	689b      	ldr	r3, [r3, #8]
 800df18:	08db      	lsrs	r3, r3, #3
 800df1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800df22:	4b07      	ldr	r3, [pc, #28]	; (800df40 <HAL_RCC_GetClockConfig+0x60>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	f003 020f 	and.w	r2, r3, #15
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	601a      	str	r2, [r3, #0]
}
 800df2e:	bf00      	nop
 800df30:	370c      	adds	r7, #12
 800df32:	46bd      	mov	sp, r7
 800df34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df38:	4770      	bx	lr
 800df3a:	bf00      	nop
 800df3c:	40023800 	.word	0x40023800
 800df40:	40023c00 	.word	0x40023c00

0800df44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b082      	sub	sp, #8
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d101      	bne.n	800df56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800df52:	2301      	movs	r3, #1
 800df54:	e01d      	b.n	800df92 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df5c:	b2db      	uxtb	r3, r3
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d106      	bne.n	800df70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2200      	movs	r2, #0
 800df66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f7fd f9aa 	bl	800b2c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2202      	movs	r2, #2
 800df74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681a      	ldr	r2, [r3, #0]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	3304      	adds	r3, #4
 800df80:	4619      	mov	r1, r3
 800df82:	4610      	mov	r0, r2
 800df84:	f000 fa38 	bl	800e3f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2201      	movs	r2, #1
 800df8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800df90:	2300      	movs	r3, #0
}
 800df92:	4618      	mov	r0, r3
 800df94:	3708      	adds	r7, #8
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}

0800df9a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800df9a:	b480      	push	{r7}
 800df9c:	b085      	sub	sp, #20
 800df9e:	af00      	add	r7, sp, #0
 800dfa0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	2202      	movs	r2, #2
 800dfa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	689b      	ldr	r3, [r3, #8]
 800dfb0:	f003 0307 	and.w	r3, r3, #7
 800dfb4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	2b06      	cmp	r3, #6
 800dfba:	d007      	beq.n	800dfcc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	681a      	ldr	r2, [r3, #0]
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f042 0201 	orr.w	r2, r2, #1
 800dfca:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2201      	movs	r2, #1
 800dfd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800dfd4:	2300      	movs	r3, #0
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3714      	adds	r7, #20
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr

0800dfe2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dfe2:	b480      	push	{r7}
 800dfe4:	b085      	sub	sp, #20
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	68da      	ldr	r2, [r3, #12]
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	f042 0201 	orr.w	r2, r2, #1
 800dff8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	689b      	ldr	r3, [r3, #8]
 800e000:	f003 0307 	and.w	r3, r3, #7
 800e004:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	2b06      	cmp	r3, #6
 800e00a:	d007      	beq.n	800e01c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	681a      	ldr	r2, [r3, #0]
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	f042 0201 	orr.w	r2, r2, #1
 800e01a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e01c:	2300      	movs	r3, #0
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3714      	adds	r7, #20
 800e022:	46bd      	mov	sp, r7
 800e024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e028:	4770      	bx	lr

0800e02a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e02a:	b580      	push	{r7, lr}
 800e02c:	b082      	sub	sp, #8
 800e02e:	af00      	add	r7, sp, #0
 800e030:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	691b      	ldr	r3, [r3, #16]
 800e038:	f003 0302 	and.w	r3, r3, #2
 800e03c:	2b02      	cmp	r3, #2
 800e03e:	d122      	bne.n	800e086 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	68db      	ldr	r3, [r3, #12]
 800e046:	f003 0302 	and.w	r3, r3, #2
 800e04a:	2b02      	cmp	r3, #2
 800e04c:	d11b      	bne.n	800e086 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f06f 0202 	mvn.w	r2, #2
 800e056:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2201      	movs	r2, #1
 800e05c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	699b      	ldr	r3, [r3, #24]
 800e064:	f003 0303 	and.w	r3, r3, #3
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d003      	beq.n	800e074 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f000 f9a5 	bl	800e3bc <HAL_TIM_IC_CaptureCallback>
 800e072:	e005      	b.n	800e080 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f000 f997 	bl	800e3a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f000 f9a8 	bl	800e3d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2200      	movs	r2, #0
 800e084:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	691b      	ldr	r3, [r3, #16]
 800e08c:	f003 0304 	and.w	r3, r3, #4
 800e090:	2b04      	cmp	r3, #4
 800e092:	d122      	bne.n	800e0da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	68db      	ldr	r3, [r3, #12]
 800e09a:	f003 0304 	and.w	r3, r3, #4
 800e09e:	2b04      	cmp	r3, #4
 800e0a0:	d11b      	bne.n	800e0da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	f06f 0204 	mvn.w	r2, #4
 800e0aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2202      	movs	r2, #2
 800e0b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	699b      	ldr	r3, [r3, #24]
 800e0b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d003      	beq.n	800e0c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f000 f97b 	bl	800e3bc <HAL_TIM_IC_CaptureCallback>
 800e0c6:	e005      	b.n	800e0d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	f000 f96d 	bl	800e3a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f000 f97e 	bl	800e3d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	691b      	ldr	r3, [r3, #16]
 800e0e0:	f003 0308 	and.w	r3, r3, #8
 800e0e4:	2b08      	cmp	r3, #8
 800e0e6:	d122      	bne.n	800e12e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	68db      	ldr	r3, [r3, #12]
 800e0ee:	f003 0308 	and.w	r3, r3, #8
 800e0f2:	2b08      	cmp	r3, #8
 800e0f4:	d11b      	bne.n	800e12e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	f06f 0208 	mvn.w	r2, #8
 800e0fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2204      	movs	r2, #4
 800e104:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	69db      	ldr	r3, [r3, #28]
 800e10c:	f003 0303 	and.w	r3, r3, #3
 800e110:	2b00      	cmp	r3, #0
 800e112:	d003      	beq.n	800e11c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f000 f951 	bl	800e3bc <HAL_TIM_IC_CaptureCallback>
 800e11a:	e005      	b.n	800e128 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f000 f943 	bl	800e3a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f000 f954 	bl	800e3d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2200      	movs	r2, #0
 800e12c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	691b      	ldr	r3, [r3, #16]
 800e134:	f003 0310 	and.w	r3, r3, #16
 800e138:	2b10      	cmp	r3, #16
 800e13a:	d122      	bne.n	800e182 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	68db      	ldr	r3, [r3, #12]
 800e142:	f003 0310 	and.w	r3, r3, #16
 800e146:	2b10      	cmp	r3, #16
 800e148:	d11b      	bne.n	800e182 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	f06f 0210 	mvn.w	r2, #16
 800e152:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2208      	movs	r2, #8
 800e158:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	69db      	ldr	r3, [r3, #28]
 800e160:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e164:	2b00      	cmp	r3, #0
 800e166:	d003      	beq.n	800e170 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f000 f927 	bl	800e3bc <HAL_TIM_IC_CaptureCallback>
 800e16e:	e005      	b.n	800e17c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f000 f919 	bl	800e3a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f000 f92a 	bl	800e3d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2200      	movs	r2, #0
 800e180:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	691b      	ldr	r3, [r3, #16]
 800e188:	f003 0301 	and.w	r3, r3, #1
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	d10e      	bne.n	800e1ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	68db      	ldr	r3, [r3, #12]
 800e196:	f003 0301 	and.w	r3, r3, #1
 800e19a:	2b01      	cmp	r3, #1
 800e19c:	d107      	bne.n	800e1ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	f06f 0201 	mvn.w	r2, #1
 800e1a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f7f7 faad 	bl	8005708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	691b      	ldr	r3, [r3, #16]
 800e1b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1b8:	2b80      	cmp	r3, #128	; 0x80
 800e1ba:	d10e      	bne.n	800e1da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	68db      	ldr	r3, [r3, #12]
 800e1c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1c6:	2b80      	cmp	r3, #128	; 0x80
 800e1c8:	d107      	bne.n	800e1da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e1d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f000 facf 	bl	800e778 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	691b      	ldr	r3, [r3, #16]
 800e1e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1e4:	2b40      	cmp	r3, #64	; 0x40
 800e1e6:	d10e      	bne.n	800e206 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	68db      	ldr	r3, [r3, #12]
 800e1ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1f2:	2b40      	cmp	r3, #64	; 0x40
 800e1f4:	d107      	bne.n	800e206 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e1fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f000 f8ef 	bl	800e3e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	691b      	ldr	r3, [r3, #16]
 800e20c:	f003 0320 	and.w	r3, r3, #32
 800e210:	2b20      	cmp	r3, #32
 800e212:	d10e      	bne.n	800e232 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	68db      	ldr	r3, [r3, #12]
 800e21a:	f003 0320 	and.w	r3, r3, #32
 800e21e:	2b20      	cmp	r3, #32
 800e220:	d107      	bne.n	800e232 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	f06f 0220 	mvn.w	r2, #32
 800e22a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f000 fa99 	bl	800e764 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e232:	bf00      	nop
 800e234:	3708      	adds	r7, #8
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}

0800e23a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e23a:	b580      	push	{r7, lr}
 800e23c:	b084      	sub	sp, #16
 800e23e:	af00      	add	r7, sp, #0
 800e240:	6078      	str	r0, [r7, #4]
 800e242:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e24a:	2b01      	cmp	r3, #1
 800e24c:	d101      	bne.n	800e252 <HAL_TIM_ConfigClockSource+0x18>
 800e24e:	2302      	movs	r3, #2
 800e250:	e0a6      	b.n	800e3a0 <HAL_TIM_ConfigClockSource+0x166>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2201      	movs	r2, #1
 800e256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2202      	movs	r2, #2
 800e25e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	689b      	ldr	r3, [r3, #8]
 800e268:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e270:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e278:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	68fa      	ldr	r2, [r7, #12]
 800e280:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	2b40      	cmp	r3, #64	; 0x40
 800e288:	d067      	beq.n	800e35a <HAL_TIM_ConfigClockSource+0x120>
 800e28a:	2b40      	cmp	r3, #64	; 0x40
 800e28c:	d80b      	bhi.n	800e2a6 <HAL_TIM_ConfigClockSource+0x6c>
 800e28e:	2b10      	cmp	r3, #16
 800e290:	d073      	beq.n	800e37a <HAL_TIM_ConfigClockSource+0x140>
 800e292:	2b10      	cmp	r3, #16
 800e294:	d802      	bhi.n	800e29c <HAL_TIM_ConfigClockSource+0x62>
 800e296:	2b00      	cmp	r3, #0
 800e298:	d06f      	beq.n	800e37a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e29a:	e078      	b.n	800e38e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e29c:	2b20      	cmp	r3, #32
 800e29e:	d06c      	beq.n	800e37a <HAL_TIM_ConfigClockSource+0x140>
 800e2a0:	2b30      	cmp	r3, #48	; 0x30
 800e2a2:	d06a      	beq.n	800e37a <HAL_TIM_ConfigClockSource+0x140>
      break;
 800e2a4:	e073      	b.n	800e38e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e2a6:	2b70      	cmp	r3, #112	; 0x70
 800e2a8:	d00d      	beq.n	800e2c6 <HAL_TIM_ConfigClockSource+0x8c>
 800e2aa:	2b70      	cmp	r3, #112	; 0x70
 800e2ac:	d804      	bhi.n	800e2b8 <HAL_TIM_ConfigClockSource+0x7e>
 800e2ae:	2b50      	cmp	r3, #80	; 0x50
 800e2b0:	d033      	beq.n	800e31a <HAL_TIM_ConfigClockSource+0xe0>
 800e2b2:	2b60      	cmp	r3, #96	; 0x60
 800e2b4:	d041      	beq.n	800e33a <HAL_TIM_ConfigClockSource+0x100>
      break;
 800e2b6:	e06a      	b.n	800e38e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e2b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e2bc:	d066      	beq.n	800e38c <HAL_TIM_ConfigClockSource+0x152>
 800e2be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e2c2:	d017      	beq.n	800e2f4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800e2c4:	e063      	b.n	800e38e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6818      	ldr	r0, [r3, #0]
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	6899      	ldr	r1, [r3, #8]
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	685a      	ldr	r2, [r3, #4]
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	68db      	ldr	r3, [r3, #12]
 800e2d6:	f000 f9a9 	bl	800e62c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	689b      	ldr	r3, [r3, #8]
 800e2e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e2e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	68fa      	ldr	r2, [r7, #12]
 800e2f0:	609a      	str	r2, [r3, #8]
      break;
 800e2f2:	e04c      	b.n	800e38e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	6818      	ldr	r0, [r3, #0]
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	6899      	ldr	r1, [r3, #8]
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	685a      	ldr	r2, [r3, #4]
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	68db      	ldr	r3, [r3, #12]
 800e304:	f000 f992 	bl	800e62c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	689a      	ldr	r2, [r3, #8]
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e316:	609a      	str	r2, [r3, #8]
      break;
 800e318:	e039      	b.n	800e38e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6818      	ldr	r0, [r3, #0]
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	6859      	ldr	r1, [r3, #4]
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	68db      	ldr	r3, [r3, #12]
 800e326:	461a      	mov	r2, r3
 800e328:	f000 f906 	bl	800e538 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	2150      	movs	r1, #80	; 0x50
 800e332:	4618      	mov	r0, r3
 800e334:	f000 f95f 	bl	800e5f6 <TIM_ITRx_SetConfig>
      break;
 800e338:	e029      	b.n	800e38e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6818      	ldr	r0, [r3, #0]
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	6859      	ldr	r1, [r3, #4]
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	68db      	ldr	r3, [r3, #12]
 800e346:	461a      	mov	r2, r3
 800e348:	f000 f925 	bl	800e596 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	2160      	movs	r1, #96	; 0x60
 800e352:	4618      	mov	r0, r3
 800e354:	f000 f94f 	bl	800e5f6 <TIM_ITRx_SetConfig>
      break;
 800e358:	e019      	b.n	800e38e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6818      	ldr	r0, [r3, #0]
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	6859      	ldr	r1, [r3, #4]
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	68db      	ldr	r3, [r3, #12]
 800e366:	461a      	mov	r2, r3
 800e368:	f000 f8e6 	bl	800e538 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	2140      	movs	r1, #64	; 0x40
 800e372:	4618      	mov	r0, r3
 800e374:	f000 f93f 	bl	800e5f6 <TIM_ITRx_SetConfig>
      break;
 800e378:	e009      	b.n	800e38e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681a      	ldr	r2, [r3, #0]
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	4619      	mov	r1, r3
 800e384:	4610      	mov	r0, r2
 800e386:	f000 f936 	bl	800e5f6 <TIM_ITRx_SetConfig>
      break;
 800e38a:	e000      	b.n	800e38e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800e38c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2201      	movs	r2, #1
 800e392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2200      	movs	r2, #0
 800e39a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e39e:	2300      	movs	r3, #0
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3710      	adds	r7, #16
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}

0800e3a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b083      	sub	sp, #12
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e3b0:	bf00      	nop
 800e3b2:	370c      	adds	r7, #12
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr

0800e3bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e3bc:	b480      	push	{r7}
 800e3be:	b083      	sub	sp, #12
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e3c4:	bf00      	nop
 800e3c6:	370c      	adds	r7, #12
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ce:	4770      	bx	lr

0800e3d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b083      	sub	sp, #12
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e3d8:	bf00      	nop
 800e3da:	370c      	adds	r7, #12
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr

0800e3e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b083      	sub	sp, #12
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e3ec:	bf00      	nop
 800e3ee:	370c      	adds	r7, #12
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f6:	4770      	bx	lr

0800e3f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e3f8:	b480      	push	{r7}
 800e3fa:	b085      	sub	sp, #20
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
 800e400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	4a40      	ldr	r2, [pc, #256]	; (800e50c <TIM_Base_SetConfig+0x114>)
 800e40c:	4293      	cmp	r3, r2
 800e40e:	d013      	beq.n	800e438 <TIM_Base_SetConfig+0x40>
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e416:	d00f      	beq.n	800e438 <TIM_Base_SetConfig+0x40>
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	4a3d      	ldr	r2, [pc, #244]	; (800e510 <TIM_Base_SetConfig+0x118>)
 800e41c:	4293      	cmp	r3, r2
 800e41e:	d00b      	beq.n	800e438 <TIM_Base_SetConfig+0x40>
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	4a3c      	ldr	r2, [pc, #240]	; (800e514 <TIM_Base_SetConfig+0x11c>)
 800e424:	4293      	cmp	r3, r2
 800e426:	d007      	beq.n	800e438 <TIM_Base_SetConfig+0x40>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	4a3b      	ldr	r2, [pc, #236]	; (800e518 <TIM_Base_SetConfig+0x120>)
 800e42c:	4293      	cmp	r3, r2
 800e42e:	d003      	beq.n	800e438 <TIM_Base_SetConfig+0x40>
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	4a3a      	ldr	r2, [pc, #232]	; (800e51c <TIM_Base_SetConfig+0x124>)
 800e434:	4293      	cmp	r3, r2
 800e436:	d108      	bne.n	800e44a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e43e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	685b      	ldr	r3, [r3, #4]
 800e444:	68fa      	ldr	r2, [r7, #12]
 800e446:	4313      	orrs	r3, r2
 800e448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	4a2f      	ldr	r2, [pc, #188]	; (800e50c <TIM_Base_SetConfig+0x114>)
 800e44e:	4293      	cmp	r3, r2
 800e450:	d02b      	beq.n	800e4aa <TIM_Base_SetConfig+0xb2>
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e458:	d027      	beq.n	800e4aa <TIM_Base_SetConfig+0xb2>
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	4a2c      	ldr	r2, [pc, #176]	; (800e510 <TIM_Base_SetConfig+0x118>)
 800e45e:	4293      	cmp	r3, r2
 800e460:	d023      	beq.n	800e4aa <TIM_Base_SetConfig+0xb2>
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	4a2b      	ldr	r2, [pc, #172]	; (800e514 <TIM_Base_SetConfig+0x11c>)
 800e466:	4293      	cmp	r3, r2
 800e468:	d01f      	beq.n	800e4aa <TIM_Base_SetConfig+0xb2>
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	4a2a      	ldr	r2, [pc, #168]	; (800e518 <TIM_Base_SetConfig+0x120>)
 800e46e:	4293      	cmp	r3, r2
 800e470:	d01b      	beq.n	800e4aa <TIM_Base_SetConfig+0xb2>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	4a29      	ldr	r2, [pc, #164]	; (800e51c <TIM_Base_SetConfig+0x124>)
 800e476:	4293      	cmp	r3, r2
 800e478:	d017      	beq.n	800e4aa <TIM_Base_SetConfig+0xb2>
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	4a28      	ldr	r2, [pc, #160]	; (800e520 <TIM_Base_SetConfig+0x128>)
 800e47e:	4293      	cmp	r3, r2
 800e480:	d013      	beq.n	800e4aa <TIM_Base_SetConfig+0xb2>
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	4a27      	ldr	r2, [pc, #156]	; (800e524 <TIM_Base_SetConfig+0x12c>)
 800e486:	4293      	cmp	r3, r2
 800e488:	d00f      	beq.n	800e4aa <TIM_Base_SetConfig+0xb2>
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	4a26      	ldr	r2, [pc, #152]	; (800e528 <TIM_Base_SetConfig+0x130>)
 800e48e:	4293      	cmp	r3, r2
 800e490:	d00b      	beq.n	800e4aa <TIM_Base_SetConfig+0xb2>
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	4a25      	ldr	r2, [pc, #148]	; (800e52c <TIM_Base_SetConfig+0x134>)
 800e496:	4293      	cmp	r3, r2
 800e498:	d007      	beq.n	800e4aa <TIM_Base_SetConfig+0xb2>
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	4a24      	ldr	r2, [pc, #144]	; (800e530 <TIM_Base_SetConfig+0x138>)
 800e49e:	4293      	cmp	r3, r2
 800e4a0:	d003      	beq.n	800e4aa <TIM_Base_SetConfig+0xb2>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	4a23      	ldr	r2, [pc, #140]	; (800e534 <TIM_Base_SetConfig+0x13c>)
 800e4a6:	4293      	cmp	r3, r2
 800e4a8:	d108      	bne.n	800e4bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e4b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	68db      	ldr	r3, [r3, #12]
 800e4b6:	68fa      	ldr	r2, [r7, #12]
 800e4b8:	4313      	orrs	r3, r2
 800e4ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	695b      	ldr	r3, [r3, #20]
 800e4c6:	4313      	orrs	r3, r2
 800e4c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	68fa      	ldr	r2, [r7, #12]
 800e4ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	689a      	ldr	r2, [r3, #8]
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	681a      	ldr	r2, [r3, #0]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	4a0a      	ldr	r2, [pc, #40]	; (800e50c <TIM_Base_SetConfig+0x114>)
 800e4e4:	4293      	cmp	r3, r2
 800e4e6:	d003      	beq.n	800e4f0 <TIM_Base_SetConfig+0xf8>
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	4a0c      	ldr	r2, [pc, #48]	; (800e51c <TIM_Base_SetConfig+0x124>)
 800e4ec:	4293      	cmp	r3, r2
 800e4ee:	d103      	bne.n	800e4f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	691a      	ldr	r2, [r3, #16]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2201      	movs	r2, #1
 800e4fc:	615a      	str	r2, [r3, #20]
}
 800e4fe:	bf00      	nop
 800e500:	3714      	adds	r7, #20
 800e502:	46bd      	mov	sp, r7
 800e504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e508:	4770      	bx	lr
 800e50a:	bf00      	nop
 800e50c:	40010000 	.word	0x40010000
 800e510:	40000400 	.word	0x40000400
 800e514:	40000800 	.word	0x40000800
 800e518:	40000c00 	.word	0x40000c00
 800e51c:	40010400 	.word	0x40010400
 800e520:	40014000 	.word	0x40014000
 800e524:	40014400 	.word	0x40014400
 800e528:	40014800 	.word	0x40014800
 800e52c:	40001800 	.word	0x40001800
 800e530:	40001c00 	.word	0x40001c00
 800e534:	40002000 	.word	0x40002000

0800e538 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e538:	b480      	push	{r7}
 800e53a:	b087      	sub	sp, #28
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	60f8      	str	r0, [r7, #12]
 800e540:	60b9      	str	r1, [r7, #8]
 800e542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	6a1b      	ldr	r3, [r3, #32]
 800e548:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	6a1b      	ldr	r3, [r3, #32]
 800e54e:	f023 0201 	bic.w	r2, r3, #1
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	699b      	ldr	r3, [r3, #24]
 800e55a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	011b      	lsls	r3, r3, #4
 800e568:	693a      	ldr	r2, [r7, #16]
 800e56a:	4313      	orrs	r3, r2
 800e56c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e56e:	697b      	ldr	r3, [r7, #20]
 800e570:	f023 030a 	bic.w	r3, r3, #10
 800e574:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e576:	697a      	ldr	r2, [r7, #20]
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	4313      	orrs	r3, r2
 800e57c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	693a      	ldr	r2, [r7, #16]
 800e582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	697a      	ldr	r2, [r7, #20]
 800e588:	621a      	str	r2, [r3, #32]
}
 800e58a:	bf00      	nop
 800e58c:	371c      	adds	r7, #28
 800e58e:	46bd      	mov	sp, r7
 800e590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e594:	4770      	bx	lr

0800e596 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e596:	b480      	push	{r7}
 800e598:	b087      	sub	sp, #28
 800e59a:	af00      	add	r7, sp, #0
 800e59c:	60f8      	str	r0, [r7, #12]
 800e59e:	60b9      	str	r1, [r7, #8]
 800e5a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	6a1b      	ldr	r3, [r3, #32]
 800e5a6:	f023 0210 	bic.w	r2, r3, #16
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	699b      	ldr	r3, [r3, #24]
 800e5b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	6a1b      	ldr	r3, [r3, #32]
 800e5b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e5c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	031b      	lsls	r3, r3, #12
 800e5c6:	697a      	ldr	r2, [r7, #20]
 800e5c8:	4313      	orrs	r3, r2
 800e5ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e5cc:	693b      	ldr	r3, [r7, #16]
 800e5ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e5d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	011b      	lsls	r3, r3, #4
 800e5d8:	693a      	ldr	r2, [r7, #16]
 800e5da:	4313      	orrs	r3, r2
 800e5dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	697a      	ldr	r2, [r7, #20]
 800e5e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	693a      	ldr	r2, [r7, #16]
 800e5e8:	621a      	str	r2, [r3, #32]
}
 800e5ea:	bf00      	nop
 800e5ec:	371c      	adds	r7, #28
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f4:	4770      	bx	lr

0800e5f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e5f6:	b480      	push	{r7}
 800e5f8:	b085      	sub	sp, #20
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	6078      	str	r0, [r7, #4]
 800e5fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	689b      	ldr	r3, [r3, #8]
 800e604:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e60c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e60e:	683a      	ldr	r2, [r7, #0]
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	4313      	orrs	r3, r2
 800e614:	f043 0307 	orr.w	r3, r3, #7
 800e618:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	68fa      	ldr	r2, [r7, #12]
 800e61e:	609a      	str	r2, [r3, #8]
}
 800e620:	bf00      	nop
 800e622:	3714      	adds	r7, #20
 800e624:	46bd      	mov	sp, r7
 800e626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62a:	4770      	bx	lr

0800e62c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e62c:	b480      	push	{r7}
 800e62e:	b087      	sub	sp, #28
 800e630:	af00      	add	r7, sp, #0
 800e632:	60f8      	str	r0, [r7, #12]
 800e634:	60b9      	str	r1, [r7, #8]
 800e636:	607a      	str	r2, [r7, #4]
 800e638:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	689b      	ldr	r3, [r3, #8]
 800e63e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e646:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	021a      	lsls	r2, r3, #8
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	431a      	orrs	r2, r3
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	4313      	orrs	r3, r2
 800e654:	697a      	ldr	r2, [r7, #20]
 800e656:	4313      	orrs	r3, r2
 800e658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	697a      	ldr	r2, [r7, #20]
 800e65e:	609a      	str	r2, [r3, #8]
}
 800e660:	bf00      	nop
 800e662:	371c      	adds	r7, #28
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr

0800e66c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e66c:	b480      	push	{r7}
 800e66e:	b085      	sub	sp, #20
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e67c:	2b01      	cmp	r3, #1
 800e67e:	d101      	bne.n	800e684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e680:	2302      	movs	r3, #2
 800e682:	e05a      	b.n	800e73a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2201      	movs	r2, #1
 800e688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2202      	movs	r2, #2
 800e690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	685b      	ldr	r3, [r3, #4]
 800e69a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	689b      	ldr	r3, [r3, #8]
 800e6a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e6aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	68fa      	ldr	r2, [r7, #12]
 800e6b2:	4313      	orrs	r3, r2
 800e6b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	68fa      	ldr	r2, [r7, #12]
 800e6bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	4a21      	ldr	r2, [pc, #132]	; (800e748 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e6c4:	4293      	cmp	r3, r2
 800e6c6:	d022      	beq.n	800e70e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6d0:	d01d      	beq.n	800e70e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	4a1d      	ldr	r2, [pc, #116]	; (800e74c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e6d8:	4293      	cmp	r3, r2
 800e6da:	d018      	beq.n	800e70e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4a1b      	ldr	r2, [pc, #108]	; (800e750 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	d013      	beq.n	800e70e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	4a1a      	ldr	r2, [pc, #104]	; (800e754 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e6ec:	4293      	cmp	r3, r2
 800e6ee:	d00e      	beq.n	800e70e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	4a18      	ldr	r2, [pc, #96]	; (800e758 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e6f6:	4293      	cmp	r3, r2
 800e6f8:	d009      	beq.n	800e70e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	4a17      	ldr	r2, [pc, #92]	; (800e75c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e700:	4293      	cmp	r3, r2
 800e702:	d004      	beq.n	800e70e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	4a15      	ldr	r2, [pc, #84]	; (800e760 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e70a:	4293      	cmp	r3, r2
 800e70c:	d10c      	bne.n	800e728 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e714:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	685b      	ldr	r3, [r3, #4]
 800e71a:	68ba      	ldr	r2, [r7, #8]
 800e71c:	4313      	orrs	r3, r2
 800e71e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	68ba      	ldr	r2, [r7, #8]
 800e726:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2201      	movs	r2, #1
 800e72c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2200      	movs	r2, #0
 800e734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e738:	2300      	movs	r3, #0
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	3714      	adds	r7, #20
 800e73e:	46bd      	mov	sp, r7
 800e740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e744:	4770      	bx	lr
 800e746:	bf00      	nop
 800e748:	40010000 	.word	0x40010000
 800e74c:	40000400 	.word	0x40000400
 800e750:	40000800 	.word	0x40000800
 800e754:	40000c00 	.word	0x40000c00
 800e758:	40010400 	.word	0x40010400
 800e75c:	40014000 	.word	0x40014000
 800e760:	40001800 	.word	0x40001800

0800e764 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e764:	b480      	push	{r7}
 800e766:	b083      	sub	sp, #12
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e76c:	bf00      	nop
 800e76e:	370c      	adds	r7, #12
 800e770:	46bd      	mov	sp, r7
 800e772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e776:	4770      	bx	lr

0800e778 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e778:	b480      	push	{r7}
 800e77a:	b083      	sub	sp, #12
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e780:	bf00      	nop
 800e782:	370c      	adds	r7, #12
 800e784:	46bd      	mov	sp, r7
 800e786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78a:	4770      	bx	lr

0800e78c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b082      	sub	sp, #8
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d101      	bne.n	800e79e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e79a:	2301      	movs	r3, #1
 800e79c:	e03f      	b.n	800e81e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e7a4:	b2db      	uxtb	r3, r3
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d106      	bne.n	800e7b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f7fc fdec 	bl	800b390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2224      	movs	r2, #36	; 0x24
 800e7bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	68da      	ldr	r2, [r3, #12]
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e7ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f000 fb6b 	bl	800eeac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	691a      	ldr	r2, [r3, #16]
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e7e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	695a      	ldr	r2, [r3, #20]
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e7f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	68da      	ldr	r2, [r3, #12]
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e804:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	2200      	movs	r2, #0
 800e80a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2220      	movs	r2, #32
 800e810:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2220      	movs	r2, #32
 800e818:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800e81c:	2300      	movs	r3, #0
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3708      	adds	r7, #8
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
	...

0800e828 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b086      	sub	sp, #24
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	60f8      	str	r0, [r7, #12]
 800e830:	60b9      	str	r1, [r7, #8]
 800e832:	4613      	mov	r3, r2
 800e834:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e83c:	b2db      	uxtb	r3, r3
 800e83e:	2b20      	cmp	r3, #32
 800e840:	d153      	bne.n	800e8ea <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d002      	beq.n	800e84e <HAL_UART_Transmit_DMA+0x26>
 800e848:	88fb      	ldrh	r3, [r7, #6]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d101      	bne.n	800e852 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800e84e:	2301      	movs	r3, #1
 800e850:	e04c      	b.n	800e8ec <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e858:	2b01      	cmp	r3, #1
 800e85a:	d101      	bne.n	800e860 <HAL_UART_Transmit_DMA+0x38>
 800e85c:	2302      	movs	r3, #2
 800e85e:	e045      	b.n	800e8ec <HAL_UART_Transmit_DMA+0xc4>
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	2201      	movs	r2, #1
 800e864:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800e868:	68ba      	ldr	r2, [r7, #8]
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	88fa      	ldrh	r2, [r7, #6]
 800e872:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	88fa      	ldrh	r2, [r7, #6]
 800e878:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	2200      	movs	r2, #0
 800e87e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	2221      	movs	r2, #33	; 0x21
 800e884:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e88c:	4a19      	ldr	r2, [pc, #100]	; (800e8f4 <HAL_UART_Transmit_DMA+0xcc>)
 800e88e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e894:	4a18      	ldr	r2, [pc, #96]	; (800e8f8 <HAL_UART_Transmit_DMA+0xd0>)
 800e896:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e89c:	4a17      	ldr	r2, [pc, #92]	; (800e8fc <HAL_UART_Transmit_DMA+0xd4>)
 800e89e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800e8a8:	f107 0308 	add.w	r3, r7, #8
 800e8ac:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	6819      	ldr	r1, [r3, #0]
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	3304      	adds	r3, #4
 800e8bc:	461a      	mov	r2, r3
 800e8be:	88fb      	ldrh	r3, [r7, #6]
 800e8c0:	f7fd f82e 	bl	800b920 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e8cc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	695a      	ldr	r2, [r3, #20]
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e8e4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	e000      	b.n	800e8ec <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800e8ea:	2302      	movs	r3, #2
  }
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3718      	adds	r7, #24
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}
 800e8f4:	0800eb3d 	.word	0x0800eb3d
 800e8f8:	0800eb8f 	.word	0x0800eb8f
 800e8fc:	0800ebab 	.word	0x0800ebab

0800e900 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b088      	sub	sp, #32
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	68db      	ldr	r3, [r3, #12]
 800e916:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	695b      	ldr	r3, [r3, #20]
 800e91e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800e920:	2300      	movs	r3, #0
 800e922:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800e924:	2300      	movs	r3, #0
 800e926:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e928:	69fb      	ldr	r3, [r7, #28]
 800e92a:	f003 030f 	and.w	r3, r3, #15
 800e92e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800e930:	693b      	ldr	r3, [r7, #16]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d10d      	bne.n	800e952 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e936:	69fb      	ldr	r3, [r7, #28]
 800e938:	f003 0320 	and.w	r3, r3, #32
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d008      	beq.n	800e952 <HAL_UART_IRQHandler+0x52>
 800e940:	69bb      	ldr	r3, [r7, #24]
 800e942:	f003 0320 	and.w	r3, r3, #32
 800e946:	2b00      	cmp	r3, #0
 800e948:	d003      	beq.n	800e952 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f000 fa2d 	bl	800edaa <UART_Receive_IT>
      return;
 800e950:	e0d1      	b.n	800eaf6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e952:	693b      	ldr	r3, [r7, #16]
 800e954:	2b00      	cmp	r3, #0
 800e956:	f000 80b0 	beq.w	800eaba <HAL_UART_IRQHandler+0x1ba>
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	f003 0301 	and.w	r3, r3, #1
 800e960:	2b00      	cmp	r3, #0
 800e962:	d105      	bne.n	800e970 <HAL_UART_IRQHandler+0x70>
 800e964:	69bb      	ldr	r3, [r7, #24]
 800e966:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	f000 80a5 	beq.w	800eaba <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e970:	69fb      	ldr	r3, [r7, #28]
 800e972:	f003 0301 	and.w	r3, r3, #1
 800e976:	2b00      	cmp	r3, #0
 800e978:	d00a      	beq.n	800e990 <HAL_UART_IRQHandler+0x90>
 800e97a:	69bb      	ldr	r3, [r7, #24]
 800e97c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e980:	2b00      	cmp	r3, #0
 800e982:	d005      	beq.n	800e990 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e988:	f043 0201 	orr.w	r2, r3, #1
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e990:	69fb      	ldr	r3, [r7, #28]
 800e992:	f003 0304 	and.w	r3, r3, #4
 800e996:	2b00      	cmp	r3, #0
 800e998:	d00a      	beq.n	800e9b0 <HAL_UART_IRQHandler+0xb0>
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	f003 0301 	and.w	r3, r3, #1
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d005      	beq.n	800e9b0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9a8:	f043 0202 	orr.w	r2, r3, #2
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e9b0:	69fb      	ldr	r3, [r7, #28]
 800e9b2:	f003 0302 	and.w	r3, r3, #2
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d00a      	beq.n	800e9d0 <HAL_UART_IRQHandler+0xd0>
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	f003 0301 	and.w	r3, r3, #1
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d005      	beq.n	800e9d0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9c8:	f043 0204 	orr.w	r2, r3, #4
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800e9d0:	69fb      	ldr	r3, [r7, #28]
 800e9d2:	f003 0308 	and.w	r3, r3, #8
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d00f      	beq.n	800e9fa <HAL_UART_IRQHandler+0xfa>
 800e9da:	69bb      	ldr	r3, [r7, #24]
 800e9dc:	f003 0320 	and.w	r3, r3, #32
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d104      	bne.n	800e9ee <HAL_UART_IRQHandler+0xee>
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	f003 0301 	and.w	r3, r3, #1
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d005      	beq.n	800e9fa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9f2:	f043 0208 	orr.w	r2, r3, #8
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d078      	beq.n	800eaf4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ea02:	69fb      	ldr	r3, [r7, #28]
 800ea04:	f003 0320 	and.w	r3, r3, #32
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d007      	beq.n	800ea1c <HAL_UART_IRQHandler+0x11c>
 800ea0c:	69bb      	ldr	r3, [r7, #24]
 800ea0e:	f003 0320 	and.w	r3, r3, #32
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d002      	beq.n	800ea1c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800ea16:	6878      	ldr	r0, [r7, #4]
 800ea18:	f000 f9c7 	bl	800edaa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	695b      	ldr	r3, [r3, #20]
 800ea22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea26:	2b40      	cmp	r3, #64	; 0x40
 800ea28:	bf0c      	ite	eq
 800ea2a:	2301      	moveq	r3, #1
 800ea2c:	2300      	movne	r3, #0
 800ea2e:	b2db      	uxtb	r3, r3
 800ea30:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea36:	f003 0308 	and.w	r3, r3, #8
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d102      	bne.n	800ea44 <HAL_UART_IRQHandler+0x144>
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d031      	beq.n	800eaa8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f000 f910 	bl	800ec6a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	695b      	ldr	r3, [r3, #20]
 800ea50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea54:	2b40      	cmp	r3, #64	; 0x40
 800ea56:	d123      	bne.n	800eaa0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	695a      	ldr	r2, [r3, #20]
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea66:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d013      	beq.n	800ea98 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea74:	4a21      	ldr	r2, [pc, #132]	; (800eafc <HAL_UART_IRQHandler+0x1fc>)
 800ea76:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f7fc ffa7 	bl	800b9d0 <HAL_DMA_Abort_IT>
 800ea82:	4603      	mov	r3, r0
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d016      	beq.n	800eab6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea8e:	687a      	ldr	r2, [r7, #4]
 800ea90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ea92:	4610      	mov	r0, r2
 800ea94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea96:	e00e      	b.n	800eab6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f000 f845 	bl	800eb28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea9e:	e00a      	b.n	800eab6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800eaa0:	6878      	ldr	r0, [r7, #4]
 800eaa2:	f000 f841 	bl	800eb28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eaa6:	e006      	b.n	800eab6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f000 f83d 	bl	800eb28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2200      	movs	r2, #0
 800eab2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800eab4:	e01e      	b.n	800eaf4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eab6:	bf00      	nop
    return;
 800eab8:	e01c      	b.n	800eaf4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800eaba:	69fb      	ldr	r3, [r7, #28]
 800eabc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d008      	beq.n	800ead6 <HAL_UART_IRQHandler+0x1d6>
 800eac4:	69bb      	ldr	r3, [r7, #24]
 800eac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d003      	beq.n	800ead6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f000 f8fd 	bl	800ecce <UART_Transmit_IT>
    return;
 800ead4:	e00f      	b.n	800eaf6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ead6:	69fb      	ldr	r3, [r7, #28]
 800ead8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d00a      	beq.n	800eaf6 <HAL_UART_IRQHandler+0x1f6>
 800eae0:	69bb      	ldr	r3, [r7, #24]
 800eae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d005      	beq.n	800eaf6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f000 f945 	bl	800ed7a <UART_EndTransmit_IT>
    return;
 800eaf0:	bf00      	nop
 800eaf2:	e000      	b.n	800eaf6 <HAL_UART_IRQHandler+0x1f6>
    return;
 800eaf4:	bf00      	nop
  }
}
 800eaf6:	3720      	adds	r7, #32
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}
 800eafc:	0800eca7 	.word	0x0800eca7

0800eb00 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800eb00:	b480      	push	{r7}
 800eb02:	b083      	sub	sp, #12
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800eb08:	bf00      	nop
 800eb0a:	370c      	adds	r7, #12
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb12:	4770      	bx	lr

0800eb14 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800eb14:	b480      	push	{r7}
 800eb16:	b083      	sub	sp, #12
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800eb1c:	bf00      	nop
 800eb1e:	370c      	adds	r7, #12
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr

0800eb28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b083      	sub	sp, #12
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800eb30:	bf00      	nop
 800eb32:	370c      	adds	r7, #12
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr

0800eb3c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b084      	sub	sp, #16
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb48:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d113      	bne.n	800eb80 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	695a      	ldr	r2, [r3, #20]
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eb6c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	68da      	ldr	r2, [r3, #12]
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb7c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800eb7e:	e002      	b.n	800eb86 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800eb80:	68f8      	ldr	r0, [r7, #12]
 800eb82:	f7fc fc87 	bl	800b494 <HAL_UART_TxCpltCallback>
}
 800eb86:	bf00      	nop
 800eb88:	3710      	adds	r7, #16
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}

0800eb8e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eb8e:	b580      	push	{r7, lr}
 800eb90:	b084      	sub	sp, #16
 800eb92:	af00      	add	r7, sp, #0
 800eb94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb9a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800eb9c:	68f8      	ldr	r0, [r7, #12]
 800eb9e:	f7ff ffaf 	bl	800eb00 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eba2:	bf00      	nop
 800eba4:	3710      	adds	r7, #16
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}

0800ebaa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ebaa:	b580      	push	{r7, lr}
 800ebac:	b084      	sub	sp, #16
 800ebae:	af00      	add	r7, sp, #0
 800ebb0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	695b      	ldr	r3, [r3, #20]
 800ebc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebc6:	2b80      	cmp	r3, #128	; 0x80
 800ebc8:	bf0c      	ite	eq
 800ebca:	2301      	moveq	r3, #1
 800ebcc:	2300      	movne	r3, #0
 800ebce:	b2db      	uxtb	r3, r3
 800ebd0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ebd8:	b2db      	uxtb	r3, r3
 800ebda:	2b21      	cmp	r3, #33	; 0x21
 800ebdc:	d108      	bne.n	800ebf0 <UART_DMAError+0x46>
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d005      	beq.n	800ebf0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ebea:	68b8      	ldr	r0, [r7, #8]
 800ebec:	f000 f827 	bl	800ec3e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	695b      	ldr	r3, [r3, #20]
 800ebf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebfa:	2b40      	cmp	r3, #64	; 0x40
 800ebfc:	bf0c      	ite	eq
 800ebfe:	2301      	moveq	r3, #1
 800ec00:	2300      	movne	r3, #0
 800ec02:	b2db      	uxtb	r3, r3
 800ec04:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ec0c:	b2db      	uxtb	r3, r3
 800ec0e:	2b22      	cmp	r3, #34	; 0x22
 800ec10:	d108      	bne.n	800ec24 <UART_DMAError+0x7a>
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d005      	beq.n	800ec24 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ec1e:	68b8      	ldr	r0, [r7, #8]
 800ec20:	f000 f823 	bl	800ec6a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ec24:	68bb      	ldr	r3, [r7, #8]
 800ec26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec28:	f043 0210 	orr.w	r2, r3, #16
 800ec2c:	68bb      	ldr	r3, [r7, #8]
 800ec2e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ec30:	68b8      	ldr	r0, [r7, #8]
 800ec32:	f7ff ff79 	bl	800eb28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec36:	bf00      	nop
 800ec38:	3710      	adds	r7, #16
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}

0800ec3e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ec3e:	b480      	push	{r7}
 800ec40:	b083      	sub	sp, #12
 800ec42:	af00      	add	r7, sp, #0
 800ec44:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	68da      	ldr	r2, [r3, #12]
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ec54:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2220      	movs	r2, #32
 800ec5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800ec5e:	bf00      	nop
 800ec60:	370c      	adds	r7, #12
 800ec62:	46bd      	mov	sp, r7
 800ec64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec68:	4770      	bx	lr

0800ec6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ec6a:	b480      	push	{r7}
 800ec6c:	b083      	sub	sp, #12
 800ec6e:	af00      	add	r7, sp, #0
 800ec70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	68da      	ldr	r2, [r3, #12]
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ec80:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	695a      	ldr	r2, [r3, #20]
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	f022 0201 	bic.w	r2, r2, #1
 800ec90:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2220      	movs	r2, #32
 800ec96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800ec9a:	bf00      	nop
 800ec9c:	370c      	adds	r7, #12
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca4:	4770      	bx	lr

0800eca6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eca6:	b580      	push	{r7, lr}
 800eca8:	b084      	sub	sp, #16
 800ecaa:	af00      	add	r7, sp, #0
 800ecac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ecc0:	68f8      	ldr	r0, [r7, #12]
 800ecc2:	f7ff ff31 	bl	800eb28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ecc6:	bf00      	nop
 800ecc8:	3710      	adds	r7, #16
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}

0800ecce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ecce:	b480      	push	{r7}
 800ecd0:	b085      	sub	sp, #20
 800ecd2:	af00      	add	r7, sp, #0
 800ecd4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ecdc:	b2db      	uxtb	r3, r3
 800ecde:	2b21      	cmp	r3, #33	; 0x21
 800ece0:	d144      	bne.n	800ed6c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	689b      	ldr	r3, [r3, #8]
 800ece6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ecea:	d11a      	bne.n	800ed22 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	6a1b      	ldr	r3, [r3, #32]
 800ecf0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	881b      	ldrh	r3, [r3, #0]
 800ecf6:	461a      	mov	r2, r3
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ed00:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	691b      	ldr	r3, [r3, #16]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d105      	bne.n	800ed16 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6a1b      	ldr	r3, [r3, #32]
 800ed0e:	1c9a      	adds	r2, r3, #2
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	621a      	str	r2, [r3, #32]
 800ed14:	e00e      	b.n	800ed34 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6a1b      	ldr	r3, [r3, #32]
 800ed1a:	1c5a      	adds	r2, r3, #1
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	621a      	str	r2, [r3, #32]
 800ed20:	e008      	b.n	800ed34 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6a1b      	ldr	r3, [r3, #32]
 800ed26:	1c59      	adds	r1, r3, #1
 800ed28:	687a      	ldr	r2, [r7, #4]
 800ed2a:	6211      	str	r1, [r2, #32]
 800ed2c:	781a      	ldrb	r2, [r3, #0]
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ed38:	b29b      	uxth	r3, r3
 800ed3a:	3b01      	subs	r3, #1
 800ed3c:	b29b      	uxth	r3, r3
 800ed3e:	687a      	ldr	r2, [r7, #4]
 800ed40:	4619      	mov	r1, r3
 800ed42:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d10f      	bne.n	800ed68 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	68da      	ldr	r2, [r3, #12]
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ed56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	68da      	ldr	r2, [r3, #12]
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ed66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	e000      	b.n	800ed6e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ed6c:	2302      	movs	r3, #2
  }
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3714      	adds	r7, #20
 800ed72:	46bd      	mov	sp, r7
 800ed74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed78:	4770      	bx	lr

0800ed7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ed7a:	b580      	push	{r7, lr}
 800ed7c:	b082      	sub	sp, #8
 800ed7e:	af00      	add	r7, sp, #0
 800ed80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	68da      	ldr	r2, [r3, #12]
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ed90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2220      	movs	r2, #32
 800ed96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f7fc fb7a 	bl	800b494 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800eda0:	2300      	movs	r3, #0
}
 800eda2:	4618      	mov	r0, r3
 800eda4:	3708      	adds	r7, #8
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}

0800edaa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800edaa:	b580      	push	{r7, lr}
 800edac:	b084      	sub	sp, #16
 800edae:	af00      	add	r7, sp, #0
 800edb0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800edb8:	b2db      	uxtb	r3, r3
 800edba:	2b22      	cmp	r3, #34	; 0x22
 800edbc:	d171      	bne.n	800eea2 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	689b      	ldr	r3, [r3, #8]
 800edc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800edc6:	d123      	bne.n	800ee10 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edcc:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	691b      	ldr	r3, [r3, #16]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d10e      	bne.n	800edf4 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	685b      	ldr	r3, [r3, #4]
 800eddc:	b29b      	uxth	r3, r3
 800edde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ede2:	b29a      	uxth	r2, r3
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edec:	1c9a      	adds	r2, r3, #2
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	629a      	str	r2, [r3, #40]	; 0x28
 800edf2:	e029      	b.n	800ee48 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	685b      	ldr	r3, [r3, #4]
 800edfa:	b29b      	uxth	r3, r3
 800edfc:	b2db      	uxtb	r3, r3
 800edfe:	b29a      	uxth	r2, r3
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee08:	1c5a      	adds	r2, r3, #1
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	629a      	str	r2, [r3, #40]	; 0x28
 800ee0e:	e01b      	b.n	800ee48 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	691b      	ldr	r3, [r3, #16]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d10a      	bne.n	800ee2e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	6858      	ldr	r0, [r3, #4]
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee22:	1c59      	adds	r1, r3, #1
 800ee24:	687a      	ldr	r2, [r7, #4]
 800ee26:	6291      	str	r1, [r2, #40]	; 0x28
 800ee28:	b2c2      	uxtb	r2, r0
 800ee2a:	701a      	strb	r2, [r3, #0]
 800ee2c:	e00c      	b.n	800ee48 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	b2da      	uxtb	r2, r3
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee3a:	1c58      	adds	r0, r3, #1
 800ee3c:	6879      	ldr	r1, [r7, #4]
 800ee3e:	6288      	str	r0, [r1, #40]	; 0x28
 800ee40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ee44:	b2d2      	uxtb	r2, r2
 800ee46:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ee4c:	b29b      	uxth	r3, r3
 800ee4e:	3b01      	subs	r3, #1
 800ee50:	b29b      	uxth	r3, r3
 800ee52:	687a      	ldr	r2, [r7, #4]
 800ee54:	4619      	mov	r1, r3
 800ee56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d120      	bne.n	800ee9e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	68da      	ldr	r2, [r3, #12]
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	f022 0220 	bic.w	r2, r2, #32
 800ee6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	68da      	ldr	r2, [r3, #12]
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ee7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	695a      	ldr	r2, [r3, #20]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	f022 0201 	bic.w	r2, r2, #1
 800ee8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2220      	movs	r2, #32
 800ee90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f7ff fe3d 	bl	800eb14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	e002      	b.n	800eea4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	e000      	b.n	800eea4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800eea2:	2302      	movs	r3, #2
  }
}
 800eea4:	4618      	mov	r0, r3
 800eea6:	3710      	adds	r7, #16
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}

0800eeac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eeac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeb0:	b085      	sub	sp, #20
 800eeb2:	af00      	add	r7, sp, #0
 800eeb4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	691b      	ldr	r3, [r3, #16]
 800eebc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	68da      	ldr	r2, [r3, #12]
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	430a      	orrs	r2, r1
 800eeca:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	689a      	ldr	r2, [r3, #8]
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	691b      	ldr	r3, [r3, #16]
 800eed4:	431a      	orrs	r2, r3
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	695b      	ldr	r3, [r3, #20]
 800eeda:	431a      	orrs	r2, r3
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	69db      	ldr	r3, [r3, #28]
 800eee0:	4313      	orrs	r3, r2
 800eee2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	68db      	ldr	r3, [r3, #12]
 800eeea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800eeee:	f023 030c 	bic.w	r3, r3, #12
 800eef2:	687a      	ldr	r2, [r7, #4]
 800eef4:	6812      	ldr	r2, [r2, #0]
 800eef6:	68f9      	ldr	r1, [r7, #12]
 800eef8:	430b      	orrs	r3, r1
 800eefa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	695b      	ldr	r3, [r3, #20]
 800ef02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	699a      	ldr	r2, [r3, #24]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	430a      	orrs	r2, r1
 800ef10:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	69db      	ldr	r3, [r3, #28]
 800ef16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef1a:	f040 818b 	bne.w	800f234 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	4ac1      	ldr	r2, [pc, #772]	; (800f228 <UART_SetConfig+0x37c>)
 800ef24:	4293      	cmp	r3, r2
 800ef26:	d005      	beq.n	800ef34 <UART_SetConfig+0x88>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	4abf      	ldr	r2, [pc, #764]	; (800f22c <UART_SetConfig+0x380>)
 800ef2e:	4293      	cmp	r3, r2
 800ef30:	f040 80bd 	bne.w	800f0ae <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ef34:	f7fe ffc0 	bl	800deb8 <HAL_RCC_GetPCLK2Freq>
 800ef38:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	461d      	mov	r5, r3
 800ef3e:	f04f 0600 	mov.w	r6, #0
 800ef42:	46a8      	mov	r8, r5
 800ef44:	46b1      	mov	r9, r6
 800ef46:	eb18 0308 	adds.w	r3, r8, r8
 800ef4a:	eb49 0409 	adc.w	r4, r9, r9
 800ef4e:	4698      	mov	r8, r3
 800ef50:	46a1      	mov	r9, r4
 800ef52:	eb18 0805 	adds.w	r8, r8, r5
 800ef56:	eb49 0906 	adc.w	r9, r9, r6
 800ef5a:	f04f 0100 	mov.w	r1, #0
 800ef5e:	f04f 0200 	mov.w	r2, #0
 800ef62:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ef66:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ef6a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ef6e:	4688      	mov	r8, r1
 800ef70:	4691      	mov	r9, r2
 800ef72:	eb18 0005 	adds.w	r0, r8, r5
 800ef76:	eb49 0106 	adc.w	r1, r9, r6
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	685b      	ldr	r3, [r3, #4]
 800ef7e:	461d      	mov	r5, r3
 800ef80:	f04f 0600 	mov.w	r6, #0
 800ef84:	196b      	adds	r3, r5, r5
 800ef86:	eb46 0406 	adc.w	r4, r6, r6
 800ef8a:	461a      	mov	r2, r3
 800ef8c:	4623      	mov	r3, r4
 800ef8e:	f7f1 fe7b 	bl	8000c88 <__aeabi_uldivmod>
 800ef92:	4603      	mov	r3, r0
 800ef94:	460c      	mov	r4, r1
 800ef96:	461a      	mov	r2, r3
 800ef98:	4ba5      	ldr	r3, [pc, #660]	; (800f230 <UART_SetConfig+0x384>)
 800ef9a:	fba3 2302 	umull	r2, r3, r3, r2
 800ef9e:	095b      	lsrs	r3, r3, #5
 800efa0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	461d      	mov	r5, r3
 800efa8:	f04f 0600 	mov.w	r6, #0
 800efac:	46a9      	mov	r9, r5
 800efae:	46b2      	mov	sl, r6
 800efb0:	eb19 0309 	adds.w	r3, r9, r9
 800efb4:	eb4a 040a 	adc.w	r4, sl, sl
 800efb8:	4699      	mov	r9, r3
 800efba:	46a2      	mov	sl, r4
 800efbc:	eb19 0905 	adds.w	r9, r9, r5
 800efc0:	eb4a 0a06 	adc.w	sl, sl, r6
 800efc4:	f04f 0100 	mov.w	r1, #0
 800efc8:	f04f 0200 	mov.w	r2, #0
 800efcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800efd0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800efd4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800efd8:	4689      	mov	r9, r1
 800efda:	4692      	mov	sl, r2
 800efdc:	eb19 0005 	adds.w	r0, r9, r5
 800efe0:	eb4a 0106 	adc.w	r1, sl, r6
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	685b      	ldr	r3, [r3, #4]
 800efe8:	461d      	mov	r5, r3
 800efea:	f04f 0600 	mov.w	r6, #0
 800efee:	196b      	adds	r3, r5, r5
 800eff0:	eb46 0406 	adc.w	r4, r6, r6
 800eff4:	461a      	mov	r2, r3
 800eff6:	4623      	mov	r3, r4
 800eff8:	f7f1 fe46 	bl	8000c88 <__aeabi_uldivmod>
 800effc:	4603      	mov	r3, r0
 800effe:	460c      	mov	r4, r1
 800f000:	461a      	mov	r2, r3
 800f002:	4b8b      	ldr	r3, [pc, #556]	; (800f230 <UART_SetConfig+0x384>)
 800f004:	fba3 1302 	umull	r1, r3, r3, r2
 800f008:	095b      	lsrs	r3, r3, #5
 800f00a:	2164      	movs	r1, #100	; 0x64
 800f00c:	fb01 f303 	mul.w	r3, r1, r3
 800f010:	1ad3      	subs	r3, r2, r3
 800f012:	00db      	lsls	r3, r3, #3
 800f014:	3332      	adds	r3, #50	; 0x32
 800f016:	4a86      	ldr	r2, [pc, #536]	; (800f230 <UART_SetConfig+0x384>)
 800f018:	fba2 2303 	umull	r2, r3, r2, r3
 800f01c:	095b      	lsrs	r3, r3, #5
 800f01e:	005b      	lsls	r3, r3, #1
 800f020:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f024:	4498      	add	r8, r3
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	461d      	mov	r5, r3
 800f02a:	f04f 0600 	mov.w	r6, #0
 800f02e:	46a9      	mov	r9, r5
 800f030:	46b2      	mov	sl, r6
 800f032:	eb19 0309 	adds.w	r3, r9, r9
 800f036:	eb4a 040a 	adc.w	r4, sl, sl
 800f03a:	4699      	mov	r9, r3
 800f03c:	46a2      	mov	sl, r4
 800f03e:	eb19 0905 	adds.w	r9, r9, r5
 800f042:	eb4a 0a06 	adc.w	sl, sl, r6
 800f046:	f04f 0100 	mov.w	r1, #0
 800f04a:	f04f 0200 	mov.w	r2, #0
 800f04e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f052:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f056:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f05a:	4689      	mov	r9, r1
 800f05c:	4692      	mov	sl, r2
 800f05e:	eb19 0005 	adds.w	r0, r9, r5
 800f062:	eb4a 0106 	adc.w	r1, sl, r6
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	685b      	ldr	r3, [r3, #4]
 800f06a:	461d      	mov	r5, r3
 800f06c:	f04f 0600 	mov.w	r6, #0
 800f070:	196b      	adds	r3, r5, r5
 800f072:	eb46 0406 	adc.w	r4, r6, r6
 800f076:	461a      	mov	r2, r3
 800f078:	4623      	mov	r3, r4
 800f07a:	f7f1 fe05 	bl	8000c88 <__aeabi_uldivmod>
 800f07e:	4603      	mov	r3, r0
 800f080:	460c      	mov	r4, r1
 800f082:	461a      	mov	r2, r3
 800f084:	4b6a      	ldr	r3, [pc, #424]	; (800f230 <UART_SetConfig+0x384>)
 800f086:	fba3 1302 	umull	r1, r3, r3, r2
 800f08a:	095b      	lsrs	r3, r3, #5
 800f08c:	2164      	movs	r1, #100	; 0x64
 800f08e:	fb01 f303 	mul.w	r3, r1, r3
 800f092:	1ad3      	subs	r3, r2, r3
 800f094:	00db      	lsls	r3, r3, #3
 800f096:	3332      	adds	r3, #50	; 0x32
 800f098:	4a65      	ldr	r2, [pc, #404]	; (800f230 <UART_SetConfig+0x384>)
 800f09a:	fba2 2303 	umull	r2, r3, r2, r3
 800f09e:	095b      	lsrs	r3, r3, #5
 800f0a0:	f003 0207 	and.w	r2, r3, #7
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	4442      	add	r2, r8
 800f0aa:	609a      	str	r2, [r3, #8]
 800f0ac:	e26f      	b.n	800f58e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f0ae:	f7fe feef 	bl	800de90 <HAL_RCC_GetPCLK1Freq>
 800f0b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	461d      	mov	r5, r3
 800f0b8:	f04f 0600 	mov.w	r6, #0
 800f0bc:	46a8      	mov	r8, r5
 800f0be:	46b1      	mov	r9, r6
 800f0c0:	eb18 0308 	adds.w	r3, r8, r8
 800f0c4:	eb49 0409 	adc.w	r4, r9, r9
 800f0c8:	4698      	mov	r8, r3
 800f0ca:	46a1      	mov	r9, r4
 800f0cc:	eb18 0805 	adds.w	r8, r8, r5
 800f0d0:	eb49 0906 	adc.w	r9, r9, r6
 800f0d4:	f04f 0100 	mov.w	r1, #0
 800f0d8:	f04f 0200 	mov.w	r2, #0
 800f0dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f0e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f0e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f0e8:	4688      	mov	r8, r1
 800f0ea:	4691      	mov	r9, r2
 800f0ec:	eb18 0005 	adds.w	r0, r8, r5
 800f0f0:	eb49 0106 	adc.w	r1, r9, r6
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	685b      	ldr	r3, [r3, #4]
 800f0f8:	461d      	mov	r5, r3
 800f0fa:	f04f 0600 	mov.w	r6, #0
 800f0fe:	196b      	adds	r3, r5, r5
 800f100:	eb46 0406 	adc.w	r4, r6, r6
 800f104:	461a      	mov	r2, r3
 800f106:	4623      	mov	r3, r4
 800f108:	f7f1 fdbe 	bl	8000c88 <__aeabi_uldivmod>
 800f10c:	4603      	mov	r3, r0
 800f10e:	460c      	mov	r4, r1
 800f110:	461a      	mov	r2, r3
 800f112:	4b47      	ldr	r3, [pc, #284]	; (800f230 <UART_SetConfig+0x384>)
 800f114:	fba3 2302 	umull	r2, r3, r3, r2
 800f118:	095b      	lsrs	r3, r3, #5
 800f11a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	461d      	mov	r5, r3
 800f122:	f04f 0600 	mov.w	r6, #0
 800f126:	46a9      	mov	r9, r5
 800f128:	46b2      	mov	sl, r6
 800f12a:	eb19 0309 	adds.w	r3, r9, r9
 800f12e:	eb4a 040a 	adc.w	r4, sl, sl
 800f132:	4699      	mov	r9, r3
 800f134:	46a2      	mov	sl, r4
 800f136:	eb19 0905 	adds.w	r9, r9, r5
 800f13a:	eb4a 0a06 	adc.w	sl, sl, r6
 800f13e:	f04f 0100 	mov.w	r1, #0
 800f142:	f04f 0200 	mov.w	r2, #0
 800f146:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f14a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f14e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f152:	4689      	mov	r9, r1
 800f154:	4692      	mov	sl, r2
 800f156:	eb19 0005 	adds.w	r0, r9, r5
 800f15a:	eb4a 0106 	adc.w	r1, sl, r6
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	685b      	ldr	r3, [r3, #4]
 800f162:	461d      	mov	r5, r3
 800f164:	f04f 0600 	mov.w	r6, #0
 800f168:	196b      	adds	r3, r5, r5
 800f16a:	eb46 0406 	adc.w	r4, r6, r6
 800f16e:	461a      	mov	r2, r3
 800f170:	4623      	mov	r3, r4
 800f172:	f7f1 fd89 	bl	8000c88 <__aeabi_uldivmod>
 800f176:	4603      	mov	r3, r0
 800f178:	460c      	mov	r4, r1
 800f17a:	461a      	mov	r2, r3
 800f17c:	4b2c      	ldr	r3, [pc, #176]	; (800f230 <UART_SetConfig+0x384>)
 800f17e:	fba3 1302 	umull	r1, r3, r3, r2
 800f182:	095b      	lsrs	r3, r3, #5
 800f184:	2164      	movs	r1, #100	; 0x64
 800f186:	fb01 f303 	mul.w	r3, r1, r3
 800f18a:	1ad3      	subs	r3, r2, r3
 800f18c:	00db      	lsls	r3, r3, #3
 800f18e:	3332      	adds	r3, #50	; 0x32
 800f190:	4a27      	ldr	r2, [pc, #156]	; (800f230 <UART_SetConfig+0x384>)
 800f192:	fba2 2303 	umull	r2, r3, r2, r3
 800f196:	095b      	lsrs	r3, r3, #5
 800f198:	005b      	lsls	r3, r3, #1
 800f19a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f19e:	4498      	add	r8, r3
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	461d      	mov	r5, r3
 800f1a4:	f04f 0600 	mov.w	r6, #0
 800f1a8:	46a9      	mov	r9, r5
 800f1aa:	46b2      	mov	sl, r6
 800f1ac:	eb19 0309 	adds.w	r3, r9, r9
 800f1b0:	eb4a 040a 	adc.w	r4, sl, sl
 800f1b4:	4699      	mov	r9, r3
 800f1b6:	46a2      	mov	sl, r4
 800f1b8:	eb19 0905 	adds.w	r9, r9, r5
 800f1bc:	eb4a 0a06 	adc.w	sl, sl, r6
 800f1c0:	f04f 0100 	mov.w	r1, #0
 800f1c4:	f04f 0200 	mov.w	r2, #0
 800f1c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f1cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f1d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f1d4:	4689      	mov	r9, r1
 800f1d6:	4692      	mov	sl, r2
 800f1d8:	eb19 0005 	adds.w	r0, r9, r5
 800f1dc:	eb4a 0106 	adc.w	r1, sl, r6
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	461d      	mov	r5, r3
 800f1e6:	f04f 0600 	mov.w	r6, #0
 800f1ea:	196b      	adds	r3, r5, r5
 800f1ec:	eb46 0406 	adc.w	r4, r6, r6
 800f1f0:	461a      	mov	r2, r3
 800f1f2:	4623      	mov	r3, r4
 800f1f4:	f7f1 fd48 	bl	8000c88 <__aeabi_uldivmod>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	460c      	mov	r4, r1
 800f1fc:	461a      	mov	r2, r3
 800f1fe:	4b0c      	ldr	r3, [pc, #48]	; (800f230 <UART_SetConfig+0x384>)
 800f200:	fba3 1302 	umull	r1, r3, r3, r2
 800f204:	095b      	lsrs	r3, r3, #5
 800f206:	2164      	movs	r1, #100	; 0x64
 800f208:	fb01 f303 	mul.w	r3, r1, r3
 800f20c:	1ad3      	subs	r3, r2, r3
 800f20e:	00db      	lsls	r3, r3, #3
 800f210:	3332      	adds	r3, #50	; 0x32
 800f212:	4a07      	ldr	r2, [pc, #28]	; (800f230 <UART_SetConfig+0x384>)
 800f214:	fba2 2303 	umull	r2, r3, r2, r3
 800f218:	095b      	lsrs	r3, r3, #5
 800f21a:	f003 0207 	and.w	r2, r3, #7
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	4442      	add	r2, r8
 800f224:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f226:	e1b2      	b.n	800f58e <UART_SetConfig+0x6e2>
 800f228:	40011000 	.word	0x40011000
 800f22c:	40011400 	.word	0x40011400
 800f230:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	4ad7      	ldr	r2, [pc, #860]	; (800f598 <UART_SetConfig+0x6ec>)
 800f23a:	4293      	cmp	r3, r2
 800f23c:	d005      	beq.n	800f24a <UART_SetConfig+0x39e>
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	4ad6      	ldr	r2, [pc, #856]	; (800f59c <UART_SetConfig+0x6f0>)
 800f244:	4293      	cmp	r3, r2
 800f246:	f040 80d1 	bne.w	800f3ec <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f24a:	f7fe fe35 	bl	800deb8 <HAL_RCC_GetPCLK2Freq>
 800f24e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	469a      	mov	sl, r3
 800f254:	f04f 0b00 	mov.w	fp, #0
 800f258:	46d0      	mov	r8, sl
 800f25a:	46d9      	mov	r9, fp
 800f25c:	eb18 0308 	adds.w	r3, r8, r8
 800f260:	eb49 0409 	adc.w	r4, r9, r9
 800f264:	4698      	mov	r8, r3
 800f266:	46a1      	mov	r9, r4
 800f268:	eb18 080a 	adds.w	r8, r8, sl
 800f26c:	eb49 090b 	adc.w	r9, r9, fp
 800f270:	f04f 0100 	mov.w	r1, #0
 800f274:	f04f 0200 	mov.w	r2, #0
 800f278:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f27c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f280:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f284:	4688      	mov	r8, r1
 800f286:	4691      	mov	r9, r2
 800f288:	eb1a 0508 	adds.w	r5, sl, r8
 800f28c:	eb4b 0609 	adc.w	r6, fp, r9
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	685b      	ldr	r3, [r3, #4]
 800f294:	4619      	mov	r1, r3
 800f296:	f04f 0200 	mov.w	r2, #0
 800f29a:	f04f 0300 	mov.w	r3, #0
 800f29e:	f04f 0400 	mov.w	r4, #0
 800f2a2:	0094      	lsls	r4, r2, #2
 800f2a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f2a8:	008b      	lsls	r3, r1, #2
 800f2aa:	461a      	mov	r2, r3
 800f2ac:	4623      	mov	r3, r4
 800f2ae:	4628      	mov	r0, r5
 800f2b0:	4631      	mov	r1, r6
 800f2b2:	f7f1 fce9 	bl	8000c88 <__aeabi_uldivmod>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	460c      	mov	r4, r1
 800f2ba:	461a      	mov	r2, r3
 800f2bc:	4bb8      	ldr	r3, [pc, #736]	; (800f5a0 <UART_SetConfig+0x6f4>)
 800f2be:	fba3 2302 	umull	r2, r3, r3, r2
 800f2c2:	095b      	lsrs	r3, r3, #5
 800f2c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	469b      	mov	fp, r3
 800f2cc:	f04f 0c00 	mov.w	ip, #0
 800f2d0:	46d9      	mov	r9, fp
 800f2d2:	46e2      	mov	sl, ip
 800f2d4:	eb19 0309 	adds.w	r3, r9, r9
 800f2d8:	eb4a 040a 	adc.w	r4, sl, sl
 800f2dc:	4699      	mov	r9, r3
 800f2de:	46a2      	mov	sl, r4
 800f2e0:	eb19 090b 	adds.w	r9, r9, fp
 800f2e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f2e8:	f04f 0100 	mov.w	r1, #0
 800f2ec:	f04f 0200 	mov.w	r2, #0
 800f2f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f2f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f2f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f2fc:	4689      	mov	r9, r1
 800f2fe:	4692      	mov	sl, r2
 800f300:	eb1b 0509 	adds.w	r5, fp, r9
 800f304:	eb4c 060a 	adc.w	r6, ip, sl
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	685b      	ldr	r3, [r3, #4]
 800f30c:	4619      	mov	r1, r3
 800f30e:	f04f 0200 	mov.w	r2, #0
 800f312:	f04f 0300 	mov.w	r3, #0
 800f316:	f04f 0400 	mov.w	r4, #0
 800f31a:	0094      	lsls	r4, r2, #2
 800f31c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f320:	008b      	lsls	r3, r1, #2
 800f322:	461a      	mov	r2, r3
 800f324:	4623      	mov	r3, r4
 800f326:	4628      	mov	r0, r5
 800f328:	4631      	mov	r1, r6
 800f32a:	f7f1 fcad 	bl	8000c88 <__aeabi_uldivmod>
 800f32e:	4603      	mov	r3, r0
 800f330:	460c      	mov	r4, r1
 800f332:	461a      	mov	r2, r3
 800f334:	4b9a      	ldr	r3, [pc, #616]	; (800f5a0 <UART_SetConfig+0x6f4>)
 800f336:	fba3 1302 	umull	r1, r3, r3, r2
 800f33a:	095b      	lsrs	r3, r3, #5
 800f33c:	2164      	movs	r1, #100	; 0x64
 800f33e:	fb01 f303 	mul.w	r3, r1, r3
 800f342:	1ad3      	subs	r3, r2, r3
 800f344:	011b      	lsls	r3, r3, #4
 800f346:	3332      	adds	r3, #50	; 0x32
 800f348:	4a95      	ldr	r2, [pc, #596]	; (800f5a0 <UART_SetConfig+0x6f4>)
 800f34a:	fba2 2303 	umull	r2, r3, r2, r3
 800f34e:	095b      	lsrs	r3, r3, #5
 800f350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f354:	4498      	add	r8, r3
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	469b      	mov	fp, r3
 800f35a:	f04f 0c00 	mov.w	ip, #0
 800f35e:	46d9      	mov	r9, fp
 800f360:	46e2      	mov	sl, ip
 800f362:	eb19 0309 	adds.w	r3, r9, r9
 800f366:	eb4a 040a 	adc.w	r4, sl, sl
 800f36a:	4699      	mov	r9, r3
 800f36c:	46a2      	mov	sl, r4
 800f36e:	eb19 090b 	adds.w	r9, r9, fp
 800f372:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f376:	f04f 0100 	mov.w	r1, #0
 800f37a:	f04f 0200 	mov.w	r2, #0
 800f37e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f382:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f386:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f38a:	4689      	mov	r9, r1
 800f38c:	4692      	mov	sl, r2
 800f38e:	eb1b 0509 	adds.w	r5, fp, r9
 800f392:	eb4c 060a 	adc.w	r6, ip, sl
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	685b      	ldr	r3, [r3, #4]
 800f39a:	4619      	mov	r1, r3
 800f39c:	f04f 0200 	mov.w	r2, #0
 800f3a0:	f04f 0300 	mov.w	r3, #0
 800f3a4:	f04f 0400 	mov.w	r4, #0
 800f3a8:	0094      	lsls	r4, r2, #2
 800f3aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f3ae:	008b      	lsls	r3, r1, #2
 800f3b0:	461a      	mov	r2, r3
 800f3b2:	4623      	mov	r3, r4
 800f3b4:	4628      	mov	r0, r5
 800f3b6:	4631      	mov	r1, r6
 800f3b8:	f7f1 fc66 	bl	8000c88 <__aeabi_uldivmod>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	460c      	mov	r4, r1
 800f3c0:	461a      	mov	r2, r3
 800f3c2:	4b77      	ldr	r3, [pc, #476]	; (800f5a0 <UART_SetConfig+0x6f4>)
 800f3c4:	fba3 1302 	umull	r1, r3, r3, r2
 800f3c8:	095b      	lsrs	r3, r3, #5
 800f3ca:	2164      	movs	r1, #100	; 0x64
 800f3cc:	fb01 f303 	mul.w	r3, r1, r3
 800f3d0:	1ad3      	subs	r3, r2, r3
 800f3d2:	011b      	lsls	r3, r3, #4
 800f3d4:	3332      	adds	r3, #50	; 0x32
 800f3d6:	4a72      	ldr	r2, [pc, #456]	; (800f5a0 <UART_SetConfig+0x6f4>)
 800f3d8:	fba2 2303 	umull	r2, r3, r2, r3
 800f3dc:	095b      	lsrs	r3, r3, #5
 800f3de:	f003 020f 	and.w	r2, r3, #15
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	4442      	add	r2, r8
 800f3e8:	609a      	str	r2, [r3, #8]
 800f3ea:	e0d0      	b.n	800f58e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800f3ec:	f7fe fd50 	bl	800de90 <HAL_RCC_GetPCLK1Freq>
 800f3f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f3f2:	68bb      	ldr	r3, [r7, #8]
 800f3f4:	469a      	mov	sl, r3
 800f3f6:	f04f 0b00 	mov.w	fp, #0
 800f3fa:	46d0      	mov	r8, sl
 800f3fc:	46d9      	mov	r9, fp
 800f3fe:	eb18 0308 	adds.w	r3, r8, r8
 800f402:	eb49 0409 	adc.w	r4, r9, r9
 800f406:	4698      	mov	r8, r3
 800f408:	46a1      	mov	r9, r4
 800f40a:	eb18 080a 	adds.w	r8, r8, sl
 800f40e:	eb49 090b 	adc.w	r9, r9, fp
 800f412:	f04f 0100 	mov.w	r1, #0
 800f416:	f04f 0200 	mov.w	r2, #0
 800f41a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f41e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f422:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f426:	4688      	mov	r8, r1
 800f428:	4691      	mov	r9, r2
 800f42a:	eb1a 0508 	adds.w	r5, sl, r8
 800f42e:	eb4b 0609 	adc.w	r6, fp, r9
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	685b      	ldr	r3, [r3, #4]
 800f436:	4619      	mov	r1, r3
 800f438:	f04f 0200 	mov.w	r2, #0
 800f43c:	f04f 0300 	mov.w	r3, #0
 800f440:	f04f 0400 	mov.w	r4, #0
 800f444:	0094      	lsls	r4, r2, #2
 800f446:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f44a:	008b      	lsls	r3, r1, #2
 800f44c:	461a      	mov	r2, r3
 800f44e:	4623      	mov	r3, r4
 800f450:	4628      	mov	r0, r5
 800f452:	4631      	mov	r1, r6
 800f454:	f7f1 fc18 	bl	8000c88 <__aeabi_uldivmod>
 800f458:	4603      	mov	r3, r0
 800f45a:	460c      	mov	r4, r1
 800f45c:	461a      	mov	r2, r3
 800f45e:	4b50      	ldr	r3, [pc, #320]	; (800f5a0 <UART_SetConfig+0x6f4>)
 800f460:	fba3 2302 	umull	r2, r3, r3, r2
 800f464:	095b      	lsrs	r3, r3, #5
 800f466:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	469b      	mov	fp, r3
 800f46e:	f04f 0c00 	mov.w	ip, #0
 800f472:	46d9      	mov	r9, fp
 800f474:	46e2      	mov	sl, ip
 800f476:	eb19 0309 	adds.w	r3, r9, r9
 800f47a:	eb4a 040a 	adc.w	r4, sl, sl
 800f47e:	4699      	mov	r9, r3
 800f480:	46a2      	mov	sl, r4
 800f482:	eb19 090b 	adds.w	r9, r9, fp
 800f486:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f48a:	f04f 0100 	mov.w	r1, #0
 800f48e:	f04f 0200 	mov.w	r2, #0
 800f492:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f496:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f49a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f49e:	4689      	mov	r9, r1
 800f4a0:	4692      	mov	sl, r2
 800f4a2:	eb1b 0509 	adds.w	r5, fp, r9
 800f4a6:	eb4c 060a 	adc.w	r6, ip, sl
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	685b      	ldr	r3, [r3, #4]
 800f4ae:	4619      	mov	r1, r3
 800f4b0:	f04f 0200 	mov.w	r2, #0
 800f4b4:	f04f 0300 	mov.w	r3, #0
 800f4b8:	f04f 0400 	mov.w	r4, #0
 800f4bc:	0094      	lsls	r4, r2, #2
 800f4be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f4c2:	008b      	lsls	r3, r1, #2
 800f4c4:	461a      	mov	r2, r3
 800f4c6:	4623      	mov	r3, r4
 800f4c8:	4628      	mov	r0, r5
 800f4ca:	4631      	mov	r1, r6
 800f4cc:	f7f1 fbdc 	bl	8000c88 <__aeabi_uldivmod>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	460c      	mov	r4, r1
 800f4d4:	461a      	mov	r2, r3
 800f4d6:	4b32      	ldr	r3, [pc, #200]	; (800f5a0 <UART_SetConfig+0x6f4>)
 800f4d8:	fba3 1302 	umull	r1, r3, r3, r2
 800f4dc:	095b      	lsrs	r3, r3, #5
 800f4de:	2164      	movs	r1, #100	; 0x64
 800f4e0:	fb01 f303 	mul.w	r3, r1, r3
 800f4e4:	1ad3      	subs	r3, r2, r3
 800f4e6:	011b      	lsls	r3, r3, #4
 800f4e8:	3332      	adds	r3, #50	; 0x32
 800f4ea:	4a2d      	ldr	r2, [pc, #180]	; (800f5a0 <UART_SetConfig+0x6f4>)
 800f4ec:	fba2 2303 	umull	r2, r3, r2, r3
 800f4f0:	095b      	lsrs	r3, r3, #5
 800f4f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f4f6:	4498      	add	r8, r3
 800f4f8:	68bb      	ldr	r3, [r7, #8]
 800f4fa:	469b      	mov	fp, r3
 800f4fc:	f04f 0c00 	mov.w	ip, #0
 800f500:	46d9      	mov	r9, fp
 800f502:	46e2      	mov	sl, ip
 800f504:	eb19 0309 	adds.w	r3, r9, r9
 800f508:	eb4a 040a 	adc.w	r4, sl, sl
 800f50c:	4699      	mov	r9, r3
 800f50e:	46a2      	mov	sl, r4
 800f510:	eb19 090b 	adds.w	r9, r9, fp
 800f514:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f518:	f04f 0100 	mov.w	r1, #0
 800f51c:	f04f 0200 	mov.w	r2, #0
 800f520:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f524:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f528:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f52c:	4689      	mov	r9, r1
 800f52e:	4692      	mov	sl, r2
 800f530:	eb1b 0509 	adds.w	r5, fp, r9
 800f534:	eb4c 060a 	adc.w	r6, ip, sl
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	685b      	ldr	r3, [r3, #4]
 800f53c:	4619      	mov	r1, r3
 800f53e:	f04f 0200 	mov.w	r2, #0
 800f542:	f04f 0300 	mov.w	r3, #0
 800f546:	f04f 0400 	mov.w	r4, #0
 800f54a:	0094      	lsls	r4, r2, #2
 800f54c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f550:	008b      	lsls	r3, r1, #2
 800f552:	461a      	mov	r2, r3
 800f554:	4623      	mov	r3, r4
 800f556:	4628      	mov	r0, r5
 800f558:	4631      	mov	r1, r6
 800f55a:	f7f1 fb95 	bl	8000c88 <__aeabi_uldivmod>
 800f55e:	4603      	mov	r3, r0
 800f560:	460c      	mov	r4, r1
 800f562:	461a      	mov	r2, r3
 800f564:	4b0e      	ldr	r3, [pc, #56]	; (800f5a0 <UART_SetConfig+0x6f4>)
 800f566:	fba3 1302 	umull	r1, r3, r3, r2
 800f56a:	095b      	lsrs	r3, r3, #5
 800f56c:	2164      	movs	r1, #100	; 0x64
 800f56e:	fb01 f303 	mul.w	r3, r1, r3
 800f572:	1ad3      	subs	r3, r2, r3
 800f574:	011b      	lsls	r3, r3, #4
 800f576:	3332      	adds	r3, #50	; 0x32
 800f578:	4a09      	ldr	r2, [pc, #36]	; (800f5a0 <UART_SetConfig+0x6f4>)
 800f57a:	fba2 2303 	umull	r2, r3, r2, r3
 800f57e:	095b      	lsrs	r3, r3, #5
 800f580:	f003 020f 	and.w	r2, r3, #15
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	4442      	add	r2, r8
 800f58a:	609a      	str	r2, [r3, #8]
}
 800f58c:	e7ff      	b.n	800f58e <UART_SetConfig+0x6e2>
 800f58e:	bf00      	nop
 800f590:	3714      	adds	r7, #20
 800f592:	46bd      	mov	sp, r7
 800f594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f598:	40011000 	.word	0x40011000
 800f59c:	40011400 	.word	0x40011400
 800f5a0:	51eb851f 	.word	0x51eb851f

0800f5a4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800f5a4:	b480      	push	{r7}
 800f5a6:	b085      	sub	sp, #20
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
 800f5ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800f5b2:	683b      	ldr	r3, [r7, #0]
 800f5b4:	681a      	ldr	r2, [r3, #0]
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5bc:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800f5be:	68fa      	ldr	r2, [r7, #12]
 800f5c0:	4b20      	ldr	r3, [pc, #128]	; (800f644 <FSMC_NORSRAM_Init+0xa0>)
 800f5c2:	4013      	ands	r3, r2
 800f5c4:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f5ce:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800f5d4:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800f5d6:	683b      	ldr	r3, [r7, #0]
 800f5d8:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800f5da:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800f5e0:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800f5e6:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800f5ec:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800f5f2:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800f5f8:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800f5fe:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800f604:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800f60a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800f610:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f612:	68fa      	ldr	r2, [r7, #12]
 800f614:	4313      	orrs	r3, r2
 800f616:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	689b      	ldr	r3, [r3, #8]
 800f61c:	2b08      	cmp	r3, #8
 800f61e:	d103      	bne.n	800f628 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f626:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	681a      	ldr	r2, [r3, #0]
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	68f9      	ldr	r1, [r7, #12]
 800f630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f634:	2300      	movs	r3, #0
}
 800f636:	4618      	mov	r0, r3
 800f638:	3714      	adds	r7, #20
 800f63a:	46bd      	mov	sp, r7
 800f63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f640:	4770      	bx	lr
 800f642:	bf00      	nop
 800f644:	fff00080 	.word	0xfff00080

0800f648 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f648:	b480      	push	{r7}
 800f64a:	b087      	sub	sp, #28
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	60f8      	str	r0, [r7, #12]
 800f650:	60b9      	str	r1, [r7, #8]
 800f652:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800f654:	2300      	movs	r3, #0
 800f656:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	1c5a      	adds	r2, r3, #1
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f662:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800f66a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f670:	68bb      	ldr	r3, [r7, #8]
 800f672:	685b      	ldr	r3, [r3, #4]
 800f674:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f676:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	689b      	ldr	r3, [r3, #8]
 800f67c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f67e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	68db      	ldr	r3, [r3, #12]
 800f684:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800f686:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	691b      	ldr	r3, [r3, #16]
 800f68c:	3b01      	subs	r3, #1
 800f68e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f690:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	695b      	ldr	r3, [r3, #20]
 800f696:	3b02      	subs	r3, #2
 800f698:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f69a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f6a0:	4313      	orrs	r3, r2
 800f6a2:	697a      	ldr	r2, [r7, #20]
 800f6a4:	4313      	orrs	r3, r2
 800f6a6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	1c5a      	adds	r2, r3, #1
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	6979      	ldr	r1, [r7, #20]
 800f6b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f6b4:	2300      	movs	r3, #0
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	371c      	adds	r7, #28
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c0:	4770      	bx	lr
	...

0800f6c4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b087      	sub	sp, #28
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	60f8      	str	r0, [r7, #12]
 800f6cc:	60b9      	str	r1, [r7, #8]
 800f6ce:	607a      	str	r2, [r7, #4]
 800f6d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f6dc:	d122      	bne.n	800f724 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	687a      	ldr	r2, [r7, #4]
 800f6e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6e6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800f6e8:	697a      	ldr	r2, [r7, #20]
 800f6ea:	4b15      	ldr	r3, [pc, #84]	; (800f740 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800f6ec:	4013      	ands	r3, r2
 800f6ee:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	685b      	ldr	r3, [r3, #4]
 800f6f8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f6fa:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	689b      	ldr	r3, [r3, #8]
 800f700:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f702:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f704:	68bb      	ldr	r3, [r7, #8]
 800f706:	68db      	ldr	r3, [r3, #12]
 800f708:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800f70a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f710:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f712:	697a      	ldr	r2, [r7, #20]
 800f714:	4313      	orrs	r3, r2
 800f716:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	687a      	ldr	r2, [r7, #4]
 800f71c:	6979      	ldr	r1, [r7, #20]
 800f71e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f722:	e005      	b.n	800f730 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	687a      	ldr	r2, [r7, #4]
 800f728:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f72c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800f730:	2300      	movs	r3, #0
}
 800f732:	4618      	mov	r0, r3
 800f734:	371c      	adds	r7, #28
 800f736:	46bd      	mov	sp, r7
 800f738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73c:	4770      	bx	lr
 800f73e:	bf00      	nop
 800f740:	cff00000 	.word	0xcff00000

0800f744 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f744:	b084      	sub	sp, #16
 800f746:	b580      	push	{r7, lr}
 800f748:	b084      	sub	sp, #16
 800f74a:	af00      	add	r7, sp, #0
 800f74c:	6078      	str	r0, [r7, #4]
 800f74e:	f107 001c 	add.w	r0, r7, #28
 800f752:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f758:	2b01      	cmp	r3, #1
 800f75a:	d122      	bne.n	800f7a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f760:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	68db      	ldr	r3, [r3, #12]
 800f76c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800f770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f774:	687a      	ldr	r2, [r7, #4]
 800f776:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	68db      	ldr	r3, [r3, #12]
 800f77c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f786:	2b01      	cmp	r3, #1
 800f788:	d105      	bne.n	800f796 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	68db      	ldr	r3, [r3, #12]
 800f78e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f001 fac6 	bl	8010d28 <USB_CoreReset>
 800f79c:	4603      	mov	r3, r0
 800f79e:	73fb      	strb	r3, [r7, #15]
 800f7a0:	e01a      	b.n	800f7d8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	68db      	ldr	r3, [r3, #12]
 800f7a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f7ae:	6878      	ldr	r0, [r7, #4]
 800f7b0:	f001 faba 	bl	8010d28 <USB_CoreReset>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f7b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d106      	bne.n	800f7cc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	639a      	str	r2, [r3, #56]	; 0x38
 800f7ca:	e005      	b.n	800f7d8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7da:	2b01      	cmp	r3, #1
 800f7dc:	d10b      	bne.n	800f7f6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	689b      	ldr	r3, [r3, #8]
 800f7e2:	f043 0206 	orr.w	r2, r3, #6
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	689b      	ldr	r3, [r3, #8]
 800f7ee:	f043 0220 	orr.w	r2, r3, #32
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	3710      	adds	r7, #16
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f802:	b004      	add	sp, #16
 800f804:	4770      	bx	lr
	...

0800f808 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f808:	b480      	push	{r7}
 800f80a:	b087      	sub	sp, #28
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	60f8      	str	r0, [r7, #12]
 800f810:	60b9      	str	r1, [r7, #8]
 800f812:	4613      	mov	r3, r2
 800f814:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f816:	79fb      	ldrb	r3, [r7, #7]
 800f818:	2b02      	cmp	r3, #2
 800f81a:	d165      	bne.n	800f8e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	4a41      	ldr	r2, [pc, #260]	; (800f924 <USB_SetTurnaroundTime+0x11c>)
 800f820:	4293      	cmp	r3, r2
 800f822:	d906      	bls.n	800f832 <USB_SetTurnaroundTime+0x2a>
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	4a40      	ldr	r2, [pc, #256]	; (800f928 <USB_SetTurnaroundTime+0x120>)
 800f828:	4293      	cmp	r3, r2
 800f82a:	d802      	bhi.n	800f832 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f82c:	230f      	movs	r3, #15
 800f82e:	617b      	str	r3, [r7, #20]
 800f830:	e062      	b.n	800f8f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f832:	68bb      	ldr	r3, [r7, #8]
 800f834:	4a3c      	ldr	r2, [pc, #240]	; (800f928 <USB_SetTurnaroundTime+0x120>)
 800f836:	4293      	cmp	r3, r2
 800f838:	d906      	bls.n	800f848 <USB_SetTurnaroundTime+0x40>
 800f83a:	68bb      	ldr	r3, [r7, #8]
 800f83c:	4a3b      	ldr	r2, [pc, #236]	; (800f92c <USB_SetTurnaroundTime+0x124>)
 800f83e:	4293      	cmp	r3, r2
 800f840:	d802      	bhi.n	800f848 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f842:	230e      	movs	r3, #14
 800f844:	617b      	str	r3, [r7, #20]
 800f846:	e057      	b.n	800f8f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	4a38      	ldr	r2, [pc, #224]	; (800f92c <USB_SetTurnaroundTime+0x124>)
 800f84c:	4293      	cmp	r3, r2
 800f84e:	d906      	bls.n	800f85e <USB_SetTurnaroundTime+0x56>
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	4a37      	ldr	r2, [pc, #220]	; (800f930 <USB_SetTurnaroundTime+0x128>)
 800f854:	4293      	cmp	r3, r2
 800f856:	d802      	bhi.n	800f85e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f858:	230d      	movs	r3, #13
 800f85a:	617b      	str	r3, [r7, #20]
 800f85c:	e04c      	b.n	800f8f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	4a33      	ldr	r2, [pc, #204]	; (800f930 <USB_SetTurnaroundTime+0x128>)
 800f862:	4293      	cmp	r3, r2
 800f864:	d906      	bls.n	800f874 <USB_SetTurnaroundTime+0x6c>
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	4a32      	ldr	r2, [pc, #200]	; (800f934 <USB_SetTurnaroundTime+0x12c>)
 800f86a:	4293      	cmp	r3, r2
 800f86c:	d802      	bhi.n	800f874 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f86e:	230c      	movs	r3, #12
 800f870:	617b      	str	r3, [r7, #20]
 800f872:	e041      	b.n	800f8f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	4a2f      	ldr	r2, [pc, #188]	; (800f934 <USB_SetTurnaroundTime+0x12c>)
 800f878:	4293      	cmp	r3, r2
 800f87a:	d906      	bls.n	800f88a <USB_SetTurnaroundTime+0x82>
 800f87c:	68bb      	ldr	r3, [r7, #8]
 800f87e:	4a2e      	ldr	r2, [pc, #184]	; (800f938 <USB_SetTurnaroundTime+0x130>)
 800f880:	4293      	cmp	r3, r2
 800f882:	d802      	bhi.n	800f88a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f884:	230b      	movs	r3, #11
 800f886:	617b      	str	r3, [r7, #20]
 800f888:	e036      	b.n	800f8f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	4a2a      	ldr	r2, [pc, #168]	; (800f938 <USB_SetTurnaroundTime+0x130>)
 800f88e:	4293      	cmp	r3, r2
 800f890:	d906      	bls.n	800f8a0 <USB_SetTurnaroundTime+0x98>
 800f892:	68bb      	ldr	r3, [r7, #8]
 800f894:	4a29      	ldr	r2, [pc, #164]	; (800f93c <USB_SetTurnaroundTime+0x134>)
 800f896:	4293      	cmp	r3, r2
 800f898:	d802      	bhi.n	800f8a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f89a:	230a      	movs	r3, #10
 800f89c:	617b      	str	r3, [r7, #20]
 800f89e:	e02b      	b.n	800f8f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f8a0:	68bb      	ldr	r3, [r7, #8]
 800f8a2:	4a26      	ldr	r2, [pc, #152]	; (800f93c <USB_SetTurnaroundTime+0x134>)
 800f8a4:	4293      	cmp	r3, r2
 800f8a6:	d906      	bls.n	800f8b6 <USB_SetTurnaroundTime+0xae>
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	4a25      	ldr	r2, [pc, #148]	; (800f940 <USB_SetTurnaroundTime+0x138>)
 800f8ac:	4293      	cmp	r3, r2
 800f8ae:	d802      	bhi.n	800f8b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f8b0:	2309      	movs	r3, #9
 800f8b2:	617b      	str	r3, [r7, #20]
 800f8b4:	e020      	b.n	800f8f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	4a21      	ldr	r2, [pc, #132]	; (800f940 <USB_SetTurnaroundTime+0x138>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d906      	bls.n	800f8cc <USB_SetTurnaroundTime+0xc4>
 800f8be:	68bb      	ldr	r3, [r7, #8]
 800f8c0:	4a20      	ldr	r2, [pc, #128]	; (800f944 <USB_SetTurnaroundTime+0x13c>)
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d802      	bhi.n	800f8cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f8c6:	2308      	movs	r3, #8
 800f8c8:	617b      	str	r3, [r7, #20]
 800f8ca:	e015      	b.n	800f8f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	4a1d      	ldr	r2, [pc, #116]	; (800f944 <USB_SetTurnaroundTime+0x13c>)
 800f8d0:	4293      	cmp	r3, r2
 800f8d2:	d906      	bls.n	800f8e2 <USB_SetTurnaroundTime+0xda>
 800f8d4:	68bb      	ldr	r3, [r7, #8]
 800f8d6:	4a1c      	ldr	r2, [pc, #112]	; (800f948 <USB_SetTurnaroundTime+0x140>)
 800f8d8:	4293      	cmp	r3, r2
 800f8da:	d802      	bhi.n	800f8e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f8dc:	2307      	movs	r3, #7
 800f8de:	617b      	str	r3, [r7, #20]
 800f8e0:	e00a      	b.n	800f8f8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f8e2:	2306      	movs	r3, #6
 800f8e4:	617b      	str	r3, [r7, #20]
 800f8e6:	e007      	b.n	800f8f8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f8e8:	79fb      	ldrb	r3, [r7, #7]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d102      	bne.n	800f8f4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f8ee:	2309      	movs	r3, #9
 800f8f0:	617b      	str	r3, [r7, #20]
 800f8f2:	e001      	b.n	800f8f8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f8f4:	2309      	movs	r3, #9
 800f8f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	68db      	ldr	r3, [r3, #12]
 800f8fc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	68da      	ldr	r2, [r3, #12]
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	029b      	lsls	r3, r3, #10
 800f90c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f910:	431a      	orrs	r2, r3
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f916:	2300      	movs	r3, #0
}
 800f918:	4618      	mov	r0, r3
 800f91a:	371c      	adds	r7, #28
 800f91c:	46bd      	mov	sp, r7
 800f91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f922:	4770      	bx	lr
 800f924:	00d8acbf 	.word	0x00d8acbf
 800f928:	00e4e1bf 	.word	0x00e4e1bf
 800f92c:	00f423ff 	.word	0x00f423ff
 800f930:	0106737f 	.word	0x0106737f
 800f934:	011a499f 	.word	0x011a499f
 800f938:	01312cff 	.word	0x01312cff
 800f93c:	014ca43f 	.word	0x014ca43f
 800f940:	016e35ff 	.word	0x016e35ff
 800f944:	01a6ab1f 	.word	0x01a6ab1f
 800f948:	01e847ff 	.word	0x01e847ff

0800f94c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f94c:	b480      	push	{r7}
 800f94e:	b083      	sub	sp, #12
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	689b      	ldr	r3, [r3, #8]
 800f958:	f043 0201 	orr.w	r2, r3, #1
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f960:	2300      	movs	r3, #0
}
 800f962:	4618      	mov	r0, r3
 800f964:	370c      	adds	r7, #12
 800f966:	46bd      	mov	sp, r7
 800f968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96c:	4770      	bx	lr

0800f96e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f96e:	b480      	push	{r7}
 800f970:	b083      	sub	sp, #12
 800f972:	af00      	add	r7, sp, #0
 800f974:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	689b      	ldr	r3, [r3, #8]
 800f97a:	f023 0201 	bic.w	r2, r3, #1
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f982:	2300      	movs	r3, #0
}
 800f984:	4618      	mov	r0, r3
 800f986:	370c      	adds	r7, #12
 800f988:	46bd      	mov	sp, r7
 800f98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98e:	4770      	bx	lr

0800f990 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b082      	sub	sp, #8
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
 800f998:	460b      	mov	r3, r1
 800f99a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	68db      	ldr	r3, [r3, #12]
 800f9a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f9a8:	78fb      	ldrb	r3, [r7, #3]
 800f9aa:	2b01      	cmp	r3, #1
 800f9ac:	d106      	bne.n	800f9bc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	68db      	ldr	r3, [r3, #12]
 800f9b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	60da      	str	r2, [r3, #12]
 800f9ba:	e00b      	b.n	800f9d4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800f9bc:	78fb      	ldrb	r3, [r7, #3]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d106      	bne.n	800f9d0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	68db      	ldr	r3, [r3, #12]
 800f9c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	60da      	str	r2, [r3, #12]
 800f9ce:	e001      	b.n	800f9d4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800f9d0:	2301      	movs	r3, #1
 800f9d2:	e003      	b.n	800f9dc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800f9d4:	2032      	movs	r0, #50	; 0x32
 800f9d6:	f7fb fdf1 	bl	800b5bc <HAL_Delay>

  return HAL_OK;
 800f9da:	2300      	movs	r3, #0
}
 800f9dc:	4618      	mov	r0, r3
 800f9de:	3708      	adds	r7, #8
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	bd80      	pop	{r7, pc}

0800f9e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f9e4:	b084      	sub	sp, #16
 800f9e6:	b580      	push	{r7, lr}
 800f9e8:	b086      	sub	sp, #24
 800f9ea:	af00      	add	r7, sp, #0
 800f9ec:	6078      	str	r0, [r7, #4]
 800f9ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f9f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f9fe:	2300      	movs	r3, #0
 800fa00:	613b      	str	r3, [r7, #16]
 800fa02:	e009      	b.n	800fa18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fa04:	687a      	ldr	r2, [r7, #4]
 800fa06:	693b      	ldr	r3, [r7, #16]
 800fa08:	3340      	adds	r3, #64	; 0x40
 800fa0a:	009b      	lsls	r3, r3, #2
 800fa0c:	4413      	add	r3, r2
 800fa0e:	2200      	movs	r2, #0
 800fa10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fa12:	693b      	ldr	r3, [r7, #16]
 800fa14:	3301      	adds	r3, #1
 800fa16:	613b      	str	r3, [r7, #16]
 800fa18:	693b      	ldr	r3, [r7, #16]
 800fa1a:	2b0e      	cmp	r3, #14
 800fa1c:	d9f2      	bls.n	800fa04 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fa1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d11c      	bne.n	800fa5e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa2a:	685b      	ldr	r3, [r3, #4]
 800fa2c:	68fa      	ldr	r2, [r7, #12]
 800fa2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fa32:	f043 0302 	orr.w	r3, r3, #2
 800fa36:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa3c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa48:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa54:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	639a      	str	r2, [r3, #56]	; 0x38
 800fa5c:	e00b      	b.n	800fa76 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa62:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa6e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fa7c:	461a      	mov	r2, r3
 800fa7e:	2300      	movs	r3, #0
 800fa80:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa88:	4619      	mov	r1, r3
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa90:	461a      	mov	r2, r3
 800fa92:	680b      	ldr	r3, [r1, #0]
 800fa94:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fa96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa98:	2b01      	cmp	r3, #1
 800fa9a:	d10c      	bne.n	800fab6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fa9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d104      	bne.n	800faac <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800faa2:	2100      	movs	r1, #0
 800faa4:	6878      	ldr	r0, [r7, #4]
 800faa6:	f000 f949 	bl	800fd3c <USB_SetDevSpeed>
 800faaa:	e008      	b.n	800fabe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800faac:	2101      	movs	r1, #1
 800faae:	6878      	ldr	r0, [r7, #4]
 800fab0:	f000 f944 	bl	800fd3c <USB_SetDevSpeed>
 800fab4:	e003      	b.n	800fabe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fab6:	2103      	movs	r1, #3
 800fab8:	6878      	ldr	r0, [r7, #4]
 800faba:	f000 f93f 	bl	800fd3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fabe:	2110      	movs	r1, #16
 800fac0:	6878      	ldr	r0, [r7, #4]
 800fac2:	f000 f8f3 	bl	800fcac <USB_FlushTxFifo>
 800fac6:	4603      	mov	r3, r0
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d001      	beq.n	800fad0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800facc:	2301      	movs	r3, #1
 800face:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fad0:	6878      	ldr	r0, [r7, #4]
 800fad2:	f000 f911 	bl	800fcf8 <USB_FlushRxFifo>
 800fad6:	4603      	mov	r3, r0
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d001      	beq.n	800fae0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800fadc:	2301      	movs	r3, #1
 800fade:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fae6:	461a      	mov	r2, r3
 800fae8:	2300      	movs	r3, #0
 800faea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800faf2:	461a      	mov	r2, r3
 800faf4:	2300      	movs	r3, #0
 800faf6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fafe:	461a      	mov	r2, r3
 800fb00:	2300      	movs	r3, #0
 800fb02:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fb04:	2300      	movs	r3, #0
 800fb06:	613b      	str	r3, [r7, #16]
 800fb08:	e043      	b.n	800fb92 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fb0a:	693b      	ldr	r3, [r7, #16]
 800fb0c:	015a      	lsls	r2, r3, #5
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	4413      	add	r3, r2
 800fb12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fb1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fb20:	d118      	bne.n	800fb54 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800fb22:	693b      	ldr	r3, [r7, #16]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d10a      	bne.n	800fb3e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fb28:	693b      	ldr	r3, [r7, #16]
 800fb2a:	015a      	lsls	r2, r3, #5
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	4413      	add	r3, r2
 800fb30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb34:	461a      	mov	r2, r3
 800fb36:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fb3a:	6013      	str	r3, [r2, #0]
 800fb3c:	e013      	b.n	800fb66 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fb3e:	693b      	ldr	r3, [r7, #16]
 800fb40:	015a      	lsls	r2, r3, #5
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	4413      	add	r3, r2
 800fb46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fb50:	6013      	str	r3, [r2, #0]
 800fb52:	e008      	b.n	800fb66 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fb54:	693b      	ldr	r3, [r7, #16]
 800fb56:	015a      	lsls	r2, r3, #5
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	4413      	add	r3, r2
 800fb5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb60:	461a      	mov	r2, r3
 800fb62:	2300      	movs	r3, #0
 800fb64:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fb66:	693b      	ldr	r3, [r7, #16]
 800fb68:	015a      	lsls	r2, r3, #5
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	4413      	add	r3, r2
 800fb6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb72:	461a      	mov	r2, r3
 800fb74:	2300      	movs	r3, #0
 800fb76:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	015a      	lsls	r2, r3, #5
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	4413      	add	r3, r2
 800fb80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb84:	461a      	mov	r2, r3
 800fb86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fb8a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fb8c:	693b      	ldr	r3, [r7, #16]
 800fb8e:	3301      	adds	r3, #1
 800fb90:	613b      	str	r3, [r7, #16]
 800fb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb94:	693a      	ldr	r2, [r7, #16]
 800fb96:	429a      	cmp	r2, r3
 800fb98:	d3b7      	bcc.n	800fb0a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	613b      	str	r3, [r7, #16]
 800fb9e:	e043      	b.n	800fc28 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	015a      	lsls	r2, r3, #5
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	4413      	add	r3, r2
 800fba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fbb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fbb6:	d118      	bne.n	800fbea <USB_DevInit+0x206>
    {
      if (i == 0U)
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d10a      	bne.n	800fbd4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fbbe:	693b      	ldr	r3, [r7, #16]
 800fbc0:	015a      	lsls	r2, r3, #5
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	4413      	add	r3, r2
 800fbc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbca:	461a      	mov	r2, r3
 800fbcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fbd0:	6013      	str	r3, [r2, #0]
 800fbd2:	e013      	b.n	800fbfc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fbd4:	693b      	ldr	r3, [r7, #16]
 800fbd6:	015a      	lsls	r2, r3, #5
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	4413      	add	r3, r2
 800fbdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbe0:	461a      	mov	r2, r3
 800fbe2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fbe6:	6013      	str	r3, [r2, #0]
 800fbe8:	e008      	b.n	800fbfc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fbea:	693b      	ldr	r3, [r7, #16]
 800fbec:	015a      	lsls	r2, r3, #5
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	4413      	add	r3, r2
 800fbf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbf6:	461a      	mov	r2, r3
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fbfc:	693b      	ldr	r3, [r7, #16]
 800fbfe:	015a      	lsls	r2, r3, #5
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	4413      	add	r3, r2
 800fc04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc08:	461a      	mov	r2, r3
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fc0e:	693b      	ldr	r3, [r7, #16]
 800fc10:	015a      	lsls	r2, r3, #5
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	4413      	add	r3, r2
 800fc16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc1a:	461a      	mov	r2, r3
 800fc1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fc20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fc22:	693b      	ldr	r3, [r7, #16]
 800fc24:	3301      	adds	r3, #1
 800fc26:	613b      	str	r3, [r7, #16]
 800fc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc2a:	693a      	ldr	r2, [r7, #16]
 800fc2c:	429a      	cmp	r2, r3
 800fc2e:	d3b7      	bcc.n	800fba0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc36:	691b      	ldr	r3, [r3, #16]
 800fc38:	68fa      	ldr	r2, [r7, #12]
 800fc3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fc3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fc42:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	2200      	movs	r2, #0
 800fc48:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fc50:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d105      	bne.n	800fc64 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	699b      	ldr	r3, [r3, #24]
 800fc5c:	f043 0210 	orr.w	r2, r3, #16
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	699a      	ldr	r2, [r3, #24]
 800fc68:	4b0f      	ldr	r3, [pc, #60]	; (800fca8 <USB_DevInit+0x2c4>)
 800fc6a:	4313      	orrs	r3, r2
 800fc6c:	687a      	ldr	r2, [r7, #4]
 800fc6e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fc70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d005      	beq.n	800fc82 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	699b      	ldr	r3, [r3, #24]
 800fc7a:	f043 0208 	orr.w	r2, r3, #8
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fc82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc84:	2b01      	cmp	r3, #1
 800fc86:	d107      	bne.n	800fc98 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	699b      	ldr	r3, [r3, #24]
 800fc8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fc90:	f043 0304 	orr.w	r3, r3, #4
 800fc94:	687a      	ldr	r2, [r7, #4]
 800fc96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fc98:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	3718      	adds	r7, #24
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fca4:	b004      	add	sp, #16
 800fca6:	4770      	bx	lr
 800fca8:	803c3800 	.word	0x803c3800

0800fcac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fcac:	b480      	push	{r7}
 800fcae:	b085      	sub	sp, #20
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	019b      	lsls	r3, r3, #6
 800fcbe:	f043 0220 	orr.w	r2, r3, #32
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	3301      	adds	r3, #1
 800fcca:	60fb      	str	r3, [r7, #12]
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	4a09      	ldr	r2, [pc, #36]	; (800fcf4 <USB_FlushTxFifo+0x48>)
 800fcd0:	4293      	cmp	r3, r2
 800fcd2:	d901      	bls.n	800fcd8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800fcd4:	2303      	movs	r3, #3
 800fcd6:	e006      	b.n	800fce6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	691b      	ldr	r3, [r3, #16]
 800fcdc:	f003 0320 	and.w	r3, r3, #32
 800fce0:	2b20      	cmp	r3, #32
 800fce2:	d0f0      	beq.n	800fcc6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800fce4:	2300      	movs	r3, #0
}
 800fce6:	4618      	mov	r0, r3
 800fce8:	3714      	adds	r7, #20
 800fcea:	46bd      	mov	sp, r7
 800fcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf0:	4770      	bx	lr
 800fcf2:	bf00      	nop
 800fcf4:	00030d40 	.word	0x00030d40

0800fcf8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	b085      	sub	sp, #20
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800fd00:	2300      	movs	r3, #0
 800fd02:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2210      	movs	r2, #16
 800fd08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	3301      	adds	r3, #1
 800fd0e:	60fb      	str	r3, [r7, #12]
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	4a09      	ldr	r2, [pc, #36]	; (800fd38 <USB_FlushRxFifo+0x40>)
 800fd14:	4293      	cmp	r3, r2
 800fd16:	d901      	bls.n	800fd1c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800fd18:	2303      	movs	r3, #3
 800fd1a:	e006      	b.n	800fd2a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	691b      	ldr	r3, [r3, #16]
 800fd20:	f003 0310 	and.w	r3, r3, #16
 800fd24:	2b10      	cmp	r3, #16
 800fd26:	d0f0      	beq.n	800fd0a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800fd28:	2300      	movs	r3, #0
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3714      	adds	r7, #20
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd34:	4770      	bx	lr
 800fd36:	bf00      	nop
 800fd38:	00030d40 	.word	0x00030d40

0800fd3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fd3c:	b480      	push	{r7}
 800fd3e:	b085      	sub	sp, #20
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
 800fd44:	460b      	mov	r3, r1
 800fd46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd52:	681a      	ldr	r2, [r3, #0]
 800fd54:	78fb      	ldrb	r3, [r7, #3]
 800fd56:	68f9      	ldr	r1, [r7, #12]
 800fd58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd5c:	4313      	orrs	r3, r2
 800fd5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fd60:	2300      	movs	r3, #0
}
 800fd62:	4618      	mov	r0, r3
 800fd64:	3714      	adds	r7, #20
 800fd66:	46bd      	mov	sp, r7
 800fd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6c:	4770      	bx	lr

0800fd6e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800fd6e:	b480      	push	{r7}
 800fd70:	b087      	sub	sp, #28
 800fd72:	af00      	add	r7, sp, #0
 800fd74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fd7a:	693b      	ldr	r3, [r7, #16]
 800fd7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd80:	689b      	ldr	r3, [r3, #8]
 800fd82:	f003 0306 	and.w	r3, r3, #6
 800fd86:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d102      	bne.n	800fd94 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fd8e:	2300      	movs	r3, #0
 800fd90:	75fb      	strb	r3, [r7, #23]
 800fd92:	e00a      	b.n	800fdaa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	2b02      	cmp	r3, #2
 800fd98:	d002      	beq.n	800fda0 <USB_GetDevSpeed+0x32>
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	2b06      	cmp	r3, #6
 800fd9e:	d102      	bne.n	800fda6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fda0:	2302      	movs	r3, #2
 800fda2:	75fb      	strb	r3, [r7, #23]
 800fda4:	e001      	b.n	800fdaa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fda6:	230f      	movs	r3, #15
 800fda8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fdaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdac:	4618      	mov	r0, r3
 800fdae:	371c      	adds	r7, #28
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb6:	4770      	bx	lr

0800fdb8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fdb8:	b480      	push	{r7}
 800fdba:	b085      	sub	sp, #20
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
 800fdc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	781b      	ldrb	r3, [r3, #0]
 800fdca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	785b      	ldrb	r3, [r3, #1]
 800fdd0:	2b01      	cmp	r3, #1
 800fdd2:	d13a      	bne.n	800fe4a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fdda:	69da      	ldr	r2, [r3, #28]
 800fddc:	683b      	ldr	r3, [r7, #0]
 800fdde:	781b      	ldrb	r3, [r3, #0]
 800fde0:	f003 030f 	and.w	r3, r3, #15
 800fde4:	2101      	movs	r1, #1
 800fde6:	fa01 f303 	lsl.w	r3, r1, r3
 800fdea:	b29b      	uxth	r3, r3
 800fdec:	68f9      	ldr	r1, [r7, #12]
 800fdee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fdf2:	4313      	orrs	r3, r2
 800fdf4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800fdf6:	68bb      	ldr	r3, [r7, #8]
 800fdf8:	015a      	lsls	r2, r3, #5
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	4413      	add	r3, r2
 800fdfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d155      	bne.n	800feb8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	015a      	lsls	r2, r3, #5
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	4413      	add	r3, r2
 800fe14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe18:	681a      	ldr	r2, [r3, #0]
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	689b      	ldr	r3, [r3, #8]
 800fe1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fe22:	683b      	ldr	r3, [r7, #0]
 800fe24:	78db      	ldrb	r3, [r3, #3]
 800fe26:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fe28:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	059b      	lsls	r3, r3, #22
 800fe2e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fe30:	4313      	orrs	r3, r2
 800fe32:	68ba      	ldr	r2, [r7, #8]
 800fe34:	0151      	lsls	r1, r2, #5
 800fe36:	68fa      	ldr	r2, [r7, #12]
 800fe38:	440a      	add	r2, r1
 800fe3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fe42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fe46:	6013      	str	r3, [r2, #0]
 800fe48:	e036      	b.n	800feb8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe50:	69da      	ldr	r2, [r3, #28]
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	781b      	ldrb	r3, [r3, #0]
 800fe56:	f003 030f 	and.w	r3, r3, #15
 800fe5a:	2101      	movs	r1, #1
 800fe5c:	fa01 f303 	lsl.w	r3, r1, r3
 800fe60:	041b      	lsls	r3, r3, #16
 800fe62:	68f9      	ldr	r1, [r7, #12]
 800fe64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe68:	4313      	orrs	r3, r2
 800fe6a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	015a      	lsls	r2, r3, #5
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	4413      	add	r3, r2
 800fe74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d11a      	bne.n	800feb8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fe82:	68bb      	ldr	r3, [r7, #8]
 800fe84:	015a      	lsls	r2, r3, #5
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	4413      	add	r3, r2
 800fe8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe8e:	681a      	ldr	r2, [r3, #0]
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	689b      	ldr	r3, [r3, #8]
 800fe94:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	78db      	ldrb	r3, [r3, #3]
 800fe9c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fe9e:	430b      	orrs	r3, r1
 800fea0:	4313      	orrs	r3, r2
 800fea2:	68ba      	ldr	r2, [r7, #8]
 800fea4:	0151      	lsls	r1, r2, #5
 800fea6:	68fa      	ldr	r2, [r7, #12]
 800fea8:	440a      	add	r2, r1
 800feaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800feae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800feb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800feb6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800feb8:	2300      	movs	r3, #0
}
 800feba:	4618      	mov	r0, r3
 800febc:	3714      	adds	r7, #20
 800febe:	46bd      	mov	sp, r7
 800fec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec4:	4770      	bx	lr
	...

0800fec8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fec8:	b480      	push	{r7}
 800feca:	b085      	sub	sp, #20
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fed6:	683b      	ldr	r3, [r7, #0]
 800fed8:	781b      	ldrb	r3, [r3, #0]
 800feda:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	785b      	ldrb	r3, [r3, #1]
 800fee0:	2b01      	cmp	r3, #1
 800fee2:	d161      	bne.n	800ffa8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fee4:	68bb      	ldr	r3, [r7, #8]
 800fee6:	015a      	lsls	r2, r3, #5
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	4413      	add	r3, r2
 800feec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fef6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fefa:	d11f      	bne.n	800ff3c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800fefc:	68bb      	ldr	r3, [r7, #8]
 800fefe:	015a      	lsls	r2, r3, #5
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	4413      	add	r3, r2
 800ff04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	68ba      	ldr	r2, [r7, #8]
 800ff0c:	0151      	lsls	r1, r2, #5
 800ff0e:	68fa      	ldr	r2, [r7, #12]
 800ff10:	440a      	add	r2, r1
 800ff12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ff1a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ff1c:	68bb      	ldr	r3, [r7, #8]
 800ff1e:	015a      	lsls	r2, r3, #5
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	4413      	add	r3, r2
 800ff24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	68ba      	ldr	r2, [r7, #8]
 800ff2c:	0151      	lsls	r1, r2, #5
 800ff2e:	68fa      	ldr	r2, [r7, #12]
 800ff30:	440a      	add	r2, r1
 800ff32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ff3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	781b      	ldrb	r3, [r3, #0]
 800ff48:	f003 030f 	and.w	r3, r3, #15
 800ff4c:	2101      	movs	r1, #1
 800ff4e:	fa01 f303 	lsl.w	r3, r1, r3
 800ff52:	b29b      	uxth	r3, r3
 800ff54:	43db      	mvns	r3, r3
 800ff56:	68f9      	ldr	r1, [r7, #12]
 800ff58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff5c:	4013      	ands	r3, r2
 800ff5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff66:	69da      	ldr	r2, [r3, #28]
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	781b      	ldrb	r3, [r3, #0]
 800ff6c:	f003 030f 	and.w	r3, r3, #15
 800ff70:	2101      	movs	r1, #1
 800ff72:	fa01 f303 	lsl.w	r3, r1, r3
 800ff76:	b29b      	uxth	r3, r3
 800ff78:	43db      	mvns	r3, r3
 800ff7a:	68f9      	ldr	r1, [r7, #12]
 800ff7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff80:	4013      	ands	r3, r2
 800ff82:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	015a      	lsls	r2, r3, #5
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	4413      	add	r3, r2
 800ff8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff90:	681a      	ldr	r2, [r3, #0]
 800ff92:	68bb      	ldr	r3, [r7, #8]
 800ff94:	0159      	lsls	r1, r3, #5
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	440b      	add	r3, r1
 800ff9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff9e:	4619      	mov	r1, r3
 800ffa0:	4b35      	ldr	r3, [pc, #212]	; (8010078 <USB_DeactivateEndpoint+0x1b0>)
 800ffa2:	4013      	ands	r3, r2
 800ffa4:	600b      	str	r3, [r1, #0]
 800ffa6:	e060      	b.n	801006a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	015a      	lsls	r2, r3, #5
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	4413      	add	r3, r2
 800ffb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ffba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ffbe:	d11f      	bne.n	8010000 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	015a      	lsls	r2, r3, #5
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	4413      	add	r3, r2
 800ffc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	68ba      	ldr	r2, [r7, #8]
 800ffd0:	0151      	lsls	r1, r2, #5
 800ffd2:	68fa      	ldr	r2, [r7, #12]
 800ffd4:	440a      	add	r2, r1
 800ffd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ffda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ffde:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	015a      	lsls	r2, r3, #5
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	4413      	add	r3, r2
 800ffe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	68ba      	ldr	r2, [r7, #8]
 800fff0:	0151      	lsls	r1, r2, #5
 800fff2:	68fa      	ldr	r2, [r7, #12]
 800fff4:	440a      	add	r2, r1
 800fff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fffa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fffe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010006:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	781b      	ldrb	r3, [r3, #0]
 801000c:	f003 030f 	and.w	r3, r3, #15
 8010010:	2101      	movs	r1, #1
 8010012:	fa01 f303 	lsl.w	r3, r1, r3
 8010016:	041b      	lsls	r3, r3, #16
 8010018:	43db      	mvns	r3, r3
 801001a:	68f9      	ldr	r1, [r7, #12]
 801001c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010020:	4013      	ands	r3, r2
 8010022:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801002a:	69da      	ldr	r2, [r3, #28]
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	781b      	ldrb	r3, [r3, #0]
 8010030:	f003 030f 	and.w	r3, r3, #15
 8010034:	2101      	movs	r1, #1
 8010036:	fa01 f303 	lsl.w	r3, r1, r3
 801003a:	041b      	lsls	r3, r3, #16
 801003c:	43db      	mvns	r3, r3
 801003e:	68f9      	ldr	r1, [r7, #12]
 8010040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010044:	4013      	ands	r3, r2
 8010046:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010048:	68bb      	ldr	r3, [r7, #8]
 801004a:	015a      	lsls	r2, r3, #5
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	4413      	add	r3, r2
 8010050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010054:	681a      	ldr	r2, [r3, #0]
 8010056:	68bb      	ldr	r3, [r7, #8]
 8010058:	0159      	lsls	r1, r3, #5
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	440b      	add	r3, r1
 801005e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010062:	4619      	mov	r1, r3
 8010064:	4b05      	ldr	r3, [pc, #20]	; (801007c <USB_DeactivateEndpoint+0x1b4>)
 8010066:	4013      	ands	r3, r2
 8010068:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801006a:	2300      	movs	r3, #0
}
 801006c:	4618      	mov	r0, r3
 801006e:	3714      	adds	r7, #20
 8010070:	46bd      	mov	sp, r7
 8010072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010076:	4770      	bx	lr
 8010078:	ec337800 	.word	0xec337800
 801007c:	eff37800 	.word	0xeff37800

08010080 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b08a      	sub	sp, #40	; 0x28
 8010084:	af02      	add	r7, sp, #8
 8010086:	60f8      	str	r0, [r7, #12]
 8010088:	60b9      	str	r1, [r7, #8]
 801008a:	4613      	mov	r3, r2
 801008c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	781b      	ldrb	r3, [r3, #0]
 8010096:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	785b      	ldrb	r3, [r3, #1]
 801009c:	2b01      	cmp	r3, #1
 801009e:	f040 815c 	bne.w	801035a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	695b      	ldr	r3, [r3, #20]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d132      	bne.n	8010110 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80100aa:	69bb      	ldr	r3, [r7, #24]
 80100ac:	015a      	lsls	r2, r3, #5
 80100ae:	69fb      	ldr	r3, [r7, #28]
 80100b0:	4413      	add	r3, r2
 80100b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100b6:	691b      	ldr	r3, [r3, #16]
 80100b8:	69ba      	ldr	r2, [r7, #24]
 80100ba:	0151      	lsls	r1, r2, #5
 80100bc:	69fa      	ldr	r2, [r7, #28]
 80100be:	440a      	add	r2, r1
 80100c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80100c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80100cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80100ce:	69bb      	ldr	r3, [r7, #24]
 80100d0:	015a      	lsls	r2, r3, #5
 80100d2:	69fb      	ldr	r3, [r7, #28]
 80100d4:	4413      	add	r3, r2
 80100d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100da:	691b      	ldr	r3, [r3, #16]
 80100dc:	69ba      	ldr	r2, [r7, #24]
 80100de:	0151      	lsls	r1, r2, #5
 80100e0:	69fa      	ldr	r2, [r7, #28]
 80100e2:	440a      	add	r2, r1
 80100e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80100ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80100ee:	69bb      	ldr	r3, [r7, #24]
 80100f0:	015a      	lsls	r2, r3, #5
 80100f2:	69fb      	ldr	r3, [r7, #28]
 80100f4:	4413      	add	r3, r2
 80100f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100fa:	691b      	ldr	r3, [r3, #16]
 80100fc:	69ba      	ldr	r2, [r7, #24]
 80100fe:	0151      	lsls	r1, r2, #5
 8010100:	69fa      	ldr	r2, [r7, #28]
 8010102:	440a      	add	r2, r1
 8010104:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010108:	0cdb      	lsrs	r3, r3, #19
 801010a:	04db      	lsls	r3, r3, #19
 801010c:	6113      	str	r3, [r2, #16]
 801010e:	e074      	b.n	80101fa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010110:	69bb      	ldr	r3, [r7, #24]
 8010112:	015a      	lsls	r2, r3, #5
 8010114:	69fb      	ldr	r3, [r7, #28]
 8010116:	4413      	add	r3, r2
 8010118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801011c:	691b      	ldr	r3, [r3, #16]
 801011e:	69ba      	ldr	r2, [r7, #24]
 8010120:	0151      	lsls	r1, r2, #5
 8010122:	69fa      	ldr	r2, [r7, #28]
 8010124:	440a      	add	r2, r1
 8010126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801012a:	0cdb      	lsrs	r3, r3, #19
 801012c:	04db      	lsls	r3, r3, #19
 801012e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010130:	69bb      	ldr	r3, [r7, #24]
 8010132:	015a      	lsls	r2, r3, #5
 8010134:	69fb      	ldr	r3, [r7, #28]
 8010136:	4413      	add	r3, r2
 8010138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801013c:	691b      	ldr	r3, [r3, #16]
 801013e:	69ba      	ldr	r2, [r7, #24]
 8010140:	0151      	lsls	r1, r2, #5
 8010142:	69fa      	ldr	r2, [r7, #28]
 8010144:	440a      	add	r2, r1
 8010146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801014a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801014e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010152:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8010154:	69bb      	ldr	r3, [r7, #24]
 8010156:	015a      	lsls	r2, r3, #5
 8010158:	69fb      	ldr	r3, [r7, #28]
 801015a:	4413      	add	r3, r2
 801015c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010160:	691a      	ldr	r2, [r3, #16]
 8010162:	68bb      	ldr	r3, [r7, #8]
 8010164:	6959      	ldr	r1, [r3, #20]
 8010166:	68bb      	ldr	r3, [r7, #8]
 8010168:	689b      	ldr	r3, [r3, #8]
 801016a:	440b      	add	r3, r1
 801016c:	1e59      	subs	r1, r3, #1
 801016e:	68bb      	ldr	r3, [r7, #8]
 8010170:	689b      	ldr	r3, [r3, #8]
 8010172:	fbb1 f3f3 	udiv	r3, r1, r3
 8010176:	04d9      	lsls	r1, r3, #19
 8010178:	4b9d      	ldr	r3, [pc, #628]	; (80103f0 <USB_EPStartXfer+0x370>)
 801017a:	400b      	ands	r3, r1
 801017c:	69b9      	ldr	r1, [r7, #24]
 801017e:	0148      	lsls	r0, r1, #5
 8010180:	69f9      	ldr	r1, [r7, #28]
 8010182:	4401      	add	r1, r0
 8010184:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010188:	4313      	orrs	r3, r2
 801018a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801018c:	69bb      	ldr	r3, [r7, #24]
 801018e:	015a      	lsls	r2, r3, #5
 8010190:	69fb      	ldr	r3, [r7, #28]
 8010192:	4413      	add	r3, r2
 8010194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010198:	691a      	ldr	r2, [r3, #16]
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	695b      	ldr	r3, [r3, #20]
 801019e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80101a2:	69b9      	ldr	r1, [r7, #24]
 80101a4:	0148      	lsls	r0, r1, #5
 80101a6:	69f9      	ldr	r1, [r7, #28]
 80101a8:	4401      	add	r1, r0
 80101aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80101ae:	4313      	orrs	r3, r2
 80101b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	78db      	ldrb	r3, [r3, #3]
 80101b6:	2b01      	cmp	r3, #1
 80101b8:	d11f      	bne.n	80101fa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80101ba:	69bb      	ldr	r3, [r7, #24]
 80101bc:	015a      	lsls	r2, r3, #5
 80101be:	69fb      	ldr	r3, [r7, #28]
 80101c0:	4413      	add	r3, r2
 80101c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101c6:	691b      	ldr	r3, [r3, #16]
 80101c8:	69ba      	ldr	r2, [r7, #24]
 80101ca:	0151      	lsls	r1, r2, #5
 80101cc:	69fa      	ldr	r2, [r7, #28]
 80101ce:	440a      	add	r2, r1
 80101d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80101d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80101da:	69bb      	ldr	r3, [r7, #24]
 80101dc:	015a      	lsls	r2, r3, #5
 80101de:	69fb      	ldr	r3, [r7, #28]
 80101e0:	4413      	add	r3, r2
 80101e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101e6:	691b      	ldr	r3, [r3, #16]
 80101e8:	69ba      	ldr	r2, [r7, #24]
 80101ea:	0151      	lsls	r1, r2, #5
 80101ec:	69fa      	ldr	r2, [r7, #28]
 80101ee:	440a      	add	r2, r1
 80101f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80101f8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80101fa:	79fb      	ldrb	r3, [r7, #7]
 80101fc:	2b01      	cmp	r3, #1
 80101fe:	d14b      	bne.n	8010298 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	691b      	ldr	r3, [r3, #16]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d009      	beq.n	801021c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010208:	69bb      	ldr	r3, [r7, #24]
 801020a:	015a      	lsls	r2, r3, #5
 801020c:	69fb      	ldr	r3, [r7, #28]
 801020e:	4413      	add	r3, r2
 8010210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010214:	461a      	mov	r2, r3
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	691b      	ldr	r3, [r3, #16]
 801021a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801021c:	68bb      	ldr	r3, [r7, #8]
 801021e:	78db      	ldrb	r3, [r3, #3]
 8010220:	2b01      	cmp	r3, #1
 8010222:	d128      	bne.n	8010276 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010224:	69fb      	ldr	r3, [r7, #28]
 8010226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801022a:	689b      	ldr	r3, [r3, #8]
 801022c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010230:	2b00      	cmp	r3, #0
 8010232:	d110      	bne.n	8010256 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010234:	69bb      	ldr	r3, [r7, #24]
 8010236:	015a      	lsls	r2, r3, #5
 8010238:	69fb      	ldr	r3, [r7, #28]
 801023a:	4413      	add	r3, r2
 801023c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	69ba      	ldr	r2, [r7, #24]
 8010244:	0151      	lsls	r1, r2, #5
 8010246:	69fa      	ldr	r2, [r7, #28]
 8010248:	440a      	add	r2, r1
 801024a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801024e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010252:	6013      	str	r3, [r2, #0]
 8010254:	e00f      	b.n	8010276 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010256:	69bb      	ldr	r3, [r7, #24]
 8010258:	015a      	lsls	r2, r3, #5
 801025a:	69fb      	ldr	r3, [r7, #28]
 801025c:	4413      	add	r3, r2
 801025e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	69ba      	ldr	r2, [r7, #24]
 8010266:	0151      	lsls	r1, r2, #5
 8010268:	69fa      	ldr	r2, [r7, #28]
 801026a:	440a      	add	r2, r1
 801026c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010274:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010276:	69bb      	ldr	r3, [r7, #24]
 8010278:	015a      	lsls	r2, r3, #5
 801027a:	69fb      	ldr	r3, [r7, #28]
 801027c:	4413      	add	r3, r2
 801027e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	69ba      	ldr	r2, [r7, #24]
 8010286:	0151      	lsls	r1, r2, #5
 8010288:	69fa      	ldr	r2, [r7, #28]
 801028a:	440a      	add	r2, r1
 801028c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010290:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010294:	6013      	str	r3, [r2, #0]
 8010296:	e12f      	b.n	80104f8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010298:	69bb      	ldr	r3, [r7, #24]
 801029a:	015a      	lsls	r2, r3, #5
 801029c:	69fb      	ldr	r3, [r7, #28]
 801029e:	4413      	add	r3, r2
 80102a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	69ba      	ldr	r2, [r7, #24]
 80102a8:	0151      	lsls	r1, r2, #5
 80102aa:	69fa      	ldr	r2, [r7, #28]
 80102ac:	440a      	add	r2, r1
 80102ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80102b6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	78db      	ldrb	r3, [r3, #3]
 80102bc:	2b01      	cmp	r3, #1
 80102be:	d015      	beq.n	80102ec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80102c0:	68bb      	ldr	r3, [r7, #8]
 80102c2:	695b      	ldr	r3, [r3, #20]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	f000 8117 	beq.w	80104f8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80102ca:	69fb      	ldr	r3, [r7, #28]
 80102cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80102d2:	68bb      	ldr	r3, [r7, #8]
 80102d4:	781b      	ldrb	r3, [r3, #0]
 80102d6:	f003 030f 	and.w	r3, r3, #15
 80102da:	2101      	movs	r1, #1
 80102dc:	fa01 f303 	lsl.w	r3, r1, r3
 80102e0:	69f9      	ldr	r1, [r7, #28]
 80102e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80102e6:	4313      	orrs	r3, r2
 80102e8:	634b      	str	r3, [r1, #52]	; 0x34
 80102ea:	e105      	b.n	80104f8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80102ec:	69fb      	ldr	r3, [r7, #28]
 80102ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102f2:	689b      	ldr	r3, [r3, #8]
 80102f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d110      	bne.n	801031e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80102fc:	69bb      	ldr	r3, [r7, #24]
 80102fe:	015a      	lsls	r2, r3, #5
 8010300:	69fb      	ldr	r3, [r7, #28]
 8010302:	4413      	add	r3, r2
 8010304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	69ba      	ldr	r2, [r7, #24]
 801030c:	0151      	lsls	r1, r2, #5
 801030e:	69fa      	ldr	r2, [r7, #28]
 8010310:	440a      	add	r2, r1
 8010312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010316:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801031a:	6013      	str	r3, [r2, #0]
 801031c:	e00f      	b.n	801033e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801031e:	69bb      	ldr	r3, [r7, #24]
 8010320:	015a      	lsls	r2, r3, #5
 8010322:	69fb      	ldr	r3, [r7, #28]
 8010324:	4413      	add	r3, r2
 8010326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	69ba      	ldr	r2, [r7, #24]
 801032e:	0151      	lsls	r1, r2, #5
 8010330:	69fa      	ldr	r2, [r7, #28]
 8010332:	440a      	add	r2, r1
 8010334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801033c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801033e:	68bb      	ldr	r3, [r7, #8]
 8010340:	68d9      	ldr	r1, [r3, #12]
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	781a      	ldrb	r2, [r3, #0]
 8010346:	68bb      	ldr	r3, [r7, #8]
 8010348:	695b      	ldr	r3, [r3, #20]
 801034a:	b298      	uxth	r0, r3
 801034c:	79fb      	ldrb	r3, [r7, #7]
 801034e:	9300      	str	r3, [sp, #0]
 8010350:	4603      	mov	r3, r0
 8010352:	68f8      	ldr	r0, [r7, #12]
 8010354:	f000 fa2b 	bl	80107ae <USB_WritePacket>
 8010358:	e0ce      	b.n	80104f8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801035a:	69bb      	ldr	r3, [r7, #24]
 801035c:	015a      	lsls	r2, r3, #5
 801035e:	69fb      	ldr	r3, [r7, #28]
 8010360:	4413      	add	r3, r2
 8010362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010366:	691b      	ldr	r3, [r3, #16]
 8010368:	69ba      	ldr	r2, [r7, #24]
 801036a:	0151      	lsls	r1, r2, #5
 801036c:	69fa      	ldr	r2, [r7, #28]
 801036e:	440a      	add	r2, r1
 8010370:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010374:	0cdb      	lsrs	r3, r3, #19
 8010376:	04db      	lsls	r3, r3, #19
 8010378:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801037a:	69bb      	ldr	r3, [r7, #24]
 801037c:	015a      	lsls	r2, r3, #5
 801037e:	69fb      	ldr	r3, [r7, #28]
 8010380:	4413      	add	r3, r2
 8010382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010386:	691b      	ldr	r3, [r3, #16]
 8010388:	69ba      	ldr	r2, [r7, #24]
 801038a:	0151      	lsls	r1, r2, #5
 801038c:	69fa      	ldr	r2, [r7, #28]
 801038e:	440a      	add	r2, r1
 8010390:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010394:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010398:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801039c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	695b      	ldr	r3, [r3, #20]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d126      	bne.n	80103f4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80103a6:	69bb      	ldr	r3, [r7, #24]
 80103a8:	015a      	lsls	r2, r3, #5
 80103aa:	69fb      	ldr	r3, [r7, #28]
 80103ac:	4413      	add	r3, r2
 80103ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103b2:	691a      	ldr	r2, [r3, #16]
 80103b4:	68bb      	ldr	r3, [r7, #8]
 80103b6:	689b      	ldr	r3, [r3, #8]
 80103b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80103bc:	69b9      	ldr	r1, [r7, #24]
 80103be:	0148      	lsls	r0, r1, #5
 80103c0:	69f9      	ldr	r1, [r7, #28]
 80103c2:	4401      	add	r1, r0
 80103c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80103c8:	4313      	orrs	r3, r2
 80103ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80103cc:	69bb      	ldr	r3, [r7, #24]
 80103ce:	015a      	lsls	r2, r3, #5
 80103d0:	69fb      	ldr	r3, [r7, #28]
 80103d2:	4413      	add	r3, r2
 80103d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103d8:	691b      	ldr	r3, [r3, #16]
 80103da:	69ba      	ldr	r2, [r7, #24]
 80103dc:	0151      	lsls	r1, r2, #5
 80103de:	69fa      	ldr	r2, [r7, #28]
 80103e0:	440a      	add	r2, r1
 80103e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80103ea:	6113      	str	r3, [r2, #16]
 80103ec:	e036      	b.n	801045c <USB_EPStartXfer+0x3dc>
 80103ee:	bf00      	nop
 80103f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80103f4:	68bb      	ldr	r3, [r7, #8]
 80103f6:	695a      	ldr	r2, [r3, #20]
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	689b      	ldr	r3, [r3, #8]
 80103fc:	4413      	add	r3, r2
 80103fe:	1e5a      	subs	r2, r3, #1
 8010400:	68bb      	ldr	r3, [r7, #8]
 8010402:	689b      	ldr	r3, [r3, #8]
 8010404:	fbb2 f3f3 	udiv	r3, r2, r3
 8010408:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801040a:	69bb      	ldr	r3, [r7, #24]
 801040c:	015a      	lsls	r2, r3, #5
 801040e:	69fb      	ldr	r3, [r7, #28]
 8010410:	4413      	add	r3, r2
 8010412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010416:	691a      	ldr	r2, [r3, #16]
 8010418:	8afb      	ldrh	r3, [r7, #22]
 801041a:	04d9      	lsls	r1, r3, #19
 801041c:	4b39      	ldr	r3, [pc, #228]	; (8010504 <USB_EPStartXfer+0x484>)
 801041e:	400b      	ands	r3, r1
 8010420:	69b9      	ldr	r1, [r7, #24]
 8010422:	0148      	lsls	r0, r1, #5
 8010424:	69f9      	ldr	r1, [r7, #28]
 8010426:	4401      	add	r1, r0
 8010428:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801042c:	4313      	orrs	r3, r2
 801042e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8010430:	69bb      	ldr	r3, [r7, #24]
 8010432:	015a      	lsls	r2, r3, #5
 8010434:	69fb      	ldr	r3, [r7, #28]
 8010436:	4413      	add	r3, r2
 8010438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801043c:	691a      	ldr	r2, [r3, #16]
 801043e:	68bb      	ldr	r3, [r7, #8]
 8010440:	689b      	ldr	r3, [r3, #8]
 8010442:	8af9      	ldrh	r1, [r7, #22]
 8010444:	fb01 f303 	mul.w	r3, r1, r3
 8010448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801044c:	69b9      	ldr	r1, [r7, #24]
 801044e:	0148      	lsls	r0, r1, #5
 8010450:	69f9      	ldr	r1, [r7, #28]
 8010452:	4401      	add	r1, r0
 8010454:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010458:	4313      	orrs	r3, r2
 801045a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801045c:	79fb      	ldrb	r3, [r7, #7]
 801045e:	2b01      	cmp	r3, #1
 8010460:	d10d      	bne.n	801047e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010462:	68bb      	ldr	r3, [r7, #8]
 8010464:	68db      	ldr	r3, [r3, #12]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d009      	beq.n	801047e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801046a:	68bb      	ldr	r3, [r7, #8]
 801046c:	68d9      	ldr	r1, [r3, #12]
 801046e:	69bb      	ldr	r3, [r7, #24]
 8010470:	015a      	lsls	r2, r3, #5
 8010472:	69fb      	ldr	r3, [r7, #28]
 8010474:	4413      	add	r3, r2
 8010476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801047a:	460a      	mov	r2, r1
 801047c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801047e:	68bb      	ldr	r3, [r7, #8]
 8010480:	78db      	ldrb	r3, [r3, #3]
 8010482:	2b01      	cmp	r3, #1
 8010484:	d128      	bne.n	80104d8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010486:	69fb      	ldr	r3, [r7, #28]
 8010488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801048c:	689b      	ldr	r3, [r3, #8]
 801048e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010492:	2b00      	cmp	r3, #0
 8010494:	d110      	bne.n	80104b8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010496:	69bb      	ldr	r3, [r7, #24]
 8010498:	015a      	lsls	r2, r3, #5
 801049a:	69fb      	ldr	r3, [r7, #28]
 801049c:	4413      	add	r3, r2
 801049e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	69ba      	ldr	r2, [r7, #24]
 80104a6:	0151      	lsls	r1, r2, #5
 80104a8:	69fa      	ldr	r2, [r7, #28]
 80104aa:	440a      	add	r2, r1
 80104ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80104b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80104b4:	6013      	str	r3, [r2, #0]
 80104b6:	e00f      	b.n	80104d8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80104b8:	69bb      	ldr	r3, [r7, #24]
 80104ba:	015a      	lsls	r2, r3, #5
 80104bc:	69fb      	ldr	r3, [r7, #28]
 80104be:	4413      	add	r3, r2
 80104c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	69ba      	ldr	r2, [r7, #24]
 80104c8:	0151      	lsls	r1, r2, #5
 80104ca:	69fa      	ldr	r2, [r7, #28]
 80104cc:	440a      	add	r2, r1
 80104ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80104d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80104d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80104d8:	69bb      	ldr	r3, [r7, #24]
 80104da:	015a      	lsls	r2, r3, #5
 80104dc:	69fb      	ldr	r3, [r7, #28]
 80104de:	4413      	add	r3, r2
 80104e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	69ba      	ldr	r2, [r7, #24]
 80104e8:	0151      	lsls	r1, r2, #5
 80104ea:	69fa      	ldr	r2, [r7, #28]
 80104ec:	440a      	add	r2, r1
 80104ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80104f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80104f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80104f8:	2300      	movs	r3, #0
}
 80104fa:	4618      	mov	r0, r3
 80104fc:	3720      	adds	r7, #32
 80104fe:	46bd      	mov	sp, r7
 8010500:	bd80      	pop	{r7, pc}
 8010502:	bf00      	nop
 8010504:	1ff80000 	.word	0x1ff80000

08010508 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010508:	b480      	push	{r7}
 801050a:	b087      	sub	sp, #28
 801050c:	af00      	add	r7, sp, #0
 801050e:	60f8      	str	r0, [r7, #12]
 8010510:	60b9      	str	r1, [r7, #8]
 8010512:	4613      	mov	r3, r2
 8010514:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801051a:	68bb      	ldr	r3, [r7, #8]
 801051c:	781b      	ldrb	r3, [r3, #0]
 801051e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010520:	68bb      	ldr	r3, [r7, #8]
 8010522:	785b      	ldrb	r3, [r3, #1]
 8010524:	2b01      	cmp	r3, #1
 8010526:	f040 80cd 	bne.w	80106c4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801052a:	68bb      	ldr	r3, [r7, #8]
 801052c:	695b      	ldr	r3, [r3, #20]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d132      	bne.n	8010598 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	015a      	lsls	r2, r3, #5
 8010536:	697b      	ldr	r3, [r7, #20]
 8010538:	4413      	add	r3, r2
 801053a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801053e:	691b      	ldr	r3, [r3, #16]
 8010540:	693a      	ldr	r2, [r7, #16]
 8010542:	0151      	lsls	r1, r2, #5
 8010544:	697a      	ldr	r2, [r7, #20]
 8010546:	440a      	add	r2, r1
 8010548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801054c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010550:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010554:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010556:	693b      	ldr	r3, [r7, #16]
 8010558:	015a      	lsls	r2, r3, #5
 801055a:	697b      	ldr	r3, [r7, #20]
 801055c:	4413      	add	r3, r2
 801055e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010562:	691b      	ldr	r3, [r3, #16]
 8010564:	693a      	ldr	r2, [r7, #16]
 8010566:	0151      	lsls	r1, r2, #5
 8010568:	697a      	ldr	r2, [r7, #20]
 801056a:	440a      	add	r2, r1
 801056c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010570:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010574:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010576:	693b      	ldr	r3, [r7, #16]
 8010578:	015a      	lsls	r2, r3, #5
 801057a:	697b      	ldr	r3, [r7, #20]
 801057c:	4413      	add	r3, r2
 801057e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010582:	691b      	ldr	r3, [r3, #16]
 8010584:	693a      	ldr	r2, [r7, #16]
 8010586:	0151      	lsls	r1, r2, #5
 8010588:	697a      	ldr	r2, [r7, #20]
 801058a:	440a      	add	r2, r1
 801058c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010590:	0cdb      	lsrs	r3, r3, #19
 8010592:	04db      	lsls	r3, r3, #19
 8010594:	6113      	str	r3, [r2, #16]
 8010596:	e04e      	b.n	8010636 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010598:	693b      	ldr	r3, [r7, #16]
 801059a:	015a      	lsls	r2, r3, #5
 801059c:	697b      	ldr	r3, [r7, #20]
 801059e:	4413      	add	r3, r2
 80105a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105a4:	691b      	ldr	r3, [r3, #16]
 80105a6:	693a      	ldr	r2, [r7, #16]
 80105a8:	0151      	lsls	r1, r2, #5
 80105aa:	697a      	ldr	r2, [r7, #20]
 80105ac:	440a      	add	r2, r1
 80105ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105b2:	0cdb      	lsrs	r3, r3, #19
 80105b4:	04db      	lsls	r3, r3, #19
 80105b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80105b8:	693b      	ldr	r3, [r7, #16]
 80105ba:	015a      	lsls	r2, r3, #5
 80105bc:	697b      	ldr	r3, [r7, #20]
 80105be:	4413      	add	r3, r2
 80105c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105c4:	691b      	ldr	r3, [r3, #16]
 80105c6:	693a      	ldr	r2, [r7, #16]
 80105c8:	0151      	lsls	r1, r2, #5
 80105ca:	697a      	ldr	r2, [r7, #20]
 80105cc:	440a      	add	r2, r1
 80105ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80105d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80105da:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80105dc:	68bb      	ldr	r3, [r7, #8]
 80105de:	695a      	ldr	r2, [r3, #20]
 80105e0:	68bb      	ldr	r3, [r7, #8]
 80105e2:	689b      	ldr	r3, [r3, #8]
 80105e4:	429a      	cmp	r2, r3
 80105e6:	d903      	bls.n	80105f0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	689a      	ldr	r2, [r3, #8]
 80105ec:	68bb      	ldr	r3, [r7, #8]
 80105ee:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80105f0:	693b      	ldr	r3, [r7, #16]
 80105f2:	015a      	lsls	r2, r3, #5
 80105f4:	697b      	ldr	r3, [r7, #20]
 80105f6:	4413      	add	r3, r2
 80105f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105fc:	691b      	ldr	r3, [r3, #16]
 80105fe:	693a      	ldr	r2, [r7, #16]
 8010600:	0151      	lsls	r1, r2, #5
 8010602:	697a      	ldr	r2, [r7, #20]
 8010604:	440a      	add	r2, r1
 8010606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801060a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801060e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	015a      	lsls	r2, r3, #5
 8010614:	697b      	ldr	r3, [r7, #20]
 8010616:	4413      	add	r3, r2
 8010618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801061c:	691a      	ldr	r2, [r3, #16]
 801061e:	68bb      	ldr	r3, [r7, #8]
 8010620:	695b      	ldr	r3, [r3, #20]
 8010622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010626:	6939      	ldr	r1, [r7, #16]
 8010628:	0148      	lsls	r0, r1, #5
 801062a:	6979      	ldr	r1, [r7, #20]
 801062c:	4401      	add	r1, r0
 801062e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010632:	4313      	orrs	r3, r2
 8010634:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010636:	79fb      	ldrb	r3, [r7, #7]
 8010638:	2b01      	cmp	r3, #1
 801063a:	d11e      	bne.n	801067a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	691b      	ldr	r3, [r3, #16]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d009      	beq.n	8010658 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010644:	693b      	ldr	r3, [r7, #16]
 8010646:	015a      	lsls	r2, r3, #5
 8010648:	697b      	ldr	r3, [r7, #20]
 801064a:	4413      	add	r3, r2
 801064c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010650:	461a      	mov	r2, r3
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	691b      	ldr	r3, [r3, #16]
 8010656:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010658:	693b      	ldr	r3, [r7, #16]
 801065a:	015a      	lsls	r2, r3, #5
 801065c:	697b      	ldr	r3, [r7, #20]
 801065e:	4413      	add	r3, r2
 8010660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	693a      	ldr	r2, [r7, #16]
 8010668:	0151      	lsls	r1, r2, #5
 801066a:	697a      	ldr	r2, [r7, #20]
 801066c:	440a      	add	r2, r1
 801066e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010672:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010676:	6013      	str	r3, [r2, #0]
 8010678:	e092      	b.n	80107a0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801067a:	693b      	ldr	r3, [r7, #16]
 801067c:	015a      	lsls	r2, r3, #5
 801067e:	697b      	ldr	r3, [r7, #20]
 8010680:	4413      	add	r3, r2
 8010682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	693a      	ldr	r2, [r7, #16]
 801068a:	0151      	lsls	r1, r2, #5
 801068c:	697a      	ldr	r2, [r7, #20]
 801068e:	440a      	add	r2, r1
 8010690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010694:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010698:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	695b      	ldr	r3, [r3, #20]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d07e      	beq.n	80107a0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80106a2:	697b      	ldr	r3, [r7, #20]
 80106a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80106aa:	68bb      	ldr	r3, [r7, #8]
 80106ac:	781b      	ldrb	r3, [r3, #0]
 80106ae:	f003 030f 	and.w	r3, r3, #15
 80106b2:	2101      	movs	r1, #1
 80106b4:	fa01 f303 	lsl.w	r3, r1, r3
 80106b8:	6979      	ldr	r1, [r7, #20]
 80106ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80106be:	4313      	orrs	r3, r2
 80106c0:	634b      	str	r3, [r1, #52]	; 0x34
 80106c2:	e06d      	b.n	80107a0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80106c4:	693b      	ldr	r3, [r7, #16]
 80106c6:	015a      	lsls	r2, r3, #5
 80106c8:	697b      	ldr	r3, [r7, #20]
 80106ca:	4413      	add	r3, r2
 80106cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106d0:	691b      	ldr	r3, [r3, #16]
 80106d2:	693a      	ldr	r2, [r7, #16]
 80106d4:	0151      	lsls	r1, r2, #5
 80106d6:	697a      	ldr	r2, [r7, #20]
 80106d8:	440a      	add	r2, r1
 80106da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106de:	0cdb      	lsrs	r3, r3, #19
 80106e0:	04db      	lsls	r3, r3, #19
 80106e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80106e4:	693b      	ldr	r3, [r7, #16]
 80106e6:	015a      	lsls	r2, r3, #5
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	4413      	add	r3, r2
 80106ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106f0:	691b      	ldr	r3, [r3, #16]
 80106f2:	693a      	ldr	r2, [r7, #16]
 80106f4:	0151      	lsls	r1, r2, #5
 80106f6:	697a      	ldr	r2, [r7, #20]
 80106f8:	440a      	add	r2, r1
 80106fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010702:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010706:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	695b      	ldr	r3, [r3, #20]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d003      	beq.n	8010718 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8010710:	68bb      	ldr	r3, [r7, #8]
 8010712:	689a      	ldr	r2, [r3, #8]
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010718:	693b      	ldr	r3, [r7, #16]
 801071a:	015a      	lsls	r2, r3, #5
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	4413      	add	r3, r2
 8010720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010724:	691b      	ldr	r3, [r3, #16]
 8010726:	693a      	ldr	r2, [r7, #16]
 8010728:	0151      	lsls	r1, r2, #5
 801072a:	697a      	ldr	r2, [r7, #20]
 801072c:	440a      	add	r2, r1
 801072e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010732:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010736:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8010738:	693b      	ldr	r3, [r7, #16]
 801073a:	015a      	lsls	r2, r3, #5
 801073c:	697b      	ldr	r3, [r7, #20]
 801073e:	4413      	add	r3, r2
 8010740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010744:	691a      	ldr	r2, [r3, #16]
 8010746:	68bb      	ldr	r3, [r7, #8]
 8010748:	689b      	ldr	r3, [r3, #8]
 801074a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801074e:	6939      	ldr	r1, [r7, #16]
 8010750:	0148      	lsls	r0, r1, #5
 8010752:	6979      	ldr	r1, [r7, #20]
 8010754:	4401      	add	r1, r0
 8010756:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801075a:	4313      	orrs	r3, r2
 801075c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801075e:	79fb      	ldrb	r3, [r7, #7]
 8010760:	2b01      	cmp	r3, #1
 8010762:	d10d      	bne.n	8010780 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010764:	68bb      	ldr	r3, [r7, #8]
 8010766:	68db      	ldr	r3, [r3, #12]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d009      	beq.n	8010780 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801076c:	68bb      	ldr	r3, [r7, #8]
 801076e:	68d9      	ldr	r1, [r3, #12]
 8010770:	693b      	ldr	r3, [r7, #16]
 8010772:	015a      	lsls	r2, r3, #5
 8010774:	697b      	ldr	r3, [r7, #20]
 8010776:	4413      	add	r3, r2
 8010778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801077c:	460a      	mov	r2, r1
 801077e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010780:	693b      	ldr	r3, [r7, #16]
 8010782:	015a      	lsls	r2, r3, #5
 8010784:	697b      	ldr	r3, [r7, #20]
 8010786:	4413      	add	r3, r2
 8010788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	693a      	ldr	r2, [r7, #16]
 8010790:	0151      	lsls	r1, r2, #5
 8010792:	697a      	ldr	r2, [r7, #20]
 8010794:	440a      	add	r2, r1
 8010796:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801079a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801079e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80107a0:	2300      	movs	r3, #0
}
 80107a2:	4618      	mov	r0, r3
 80107a4:	371c      	adds	r7, #28
 80107a6:	46bd      	mov	sp, r7
 80107a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ac:	4770      	bx	lr

080107ae <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80107ae:	b480      	push	{r7}
 80107b0:	b089      	sub	sp, #36	; 0x24
 80107b2:	af00      	add	r7, sp, #0
 80107b4:	60f8      	str	r0, [r7, #12]
 80107b6:	60b9      	str	r1, [r7, #8]
 80107b8:	4611      	mov	r1, r2
 80107ba:	461a      	mov	r2, r3
 80107bc:	460b      	mov	r3, r1
 80107be:	71fb      	strb	r3, [r7, #7]
 80107c0:	4613      	mov	r3, r2
 80107c2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80107c8:	68bb      	ldr	r3, [r7, #8]
 80107ca:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80107cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d11a      	bne.n	801080a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80107d4:	88bb      	ldrh	r3, [r7, #4]
 80107d6:	3303      	adds	r3, #3
 80107d8:	089b      	lsrs	r3, r3, #2
 80107da:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80107dc:	2300      	movs	r3, #0
 80107de:	61bb      	str	r3, [r7, #24]
 80107e0:	e00f      	b.n	8010802 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80107e2:	79fb      	ldrb	r3, [r7, #7]
 80107e4:	031a      	lsls	r2, r3, #12
 80107e6:	697b      	ldr	r3, [r7, #20]
 80107e8:	4413      	add	r3, r2
 80107ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107ee:	461a      	mov	r2, r3
 80107f0:	69fb      	ldr	r3, [r7, #28]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80107f6:	69fb      	ldr	r3, [r7, #28]
 80107f8:	3304      	adds	r3, #4
 80107fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80107fc:	69bb      	ldr	r3, [r7, #24]
 80107fe:	3301      	adds	r3, #1
 8010800:	61bb      	str	r3, [r7, #24]
 8010802:	69ba      	ldr	r2, [r7, #24]
 8010804:	693b      	ldr	r3, [r7, #16]
 8010806:	429a      	cmp	r2, r3
 8010808:	d3eb      	bcc.n	80107e2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801080a:	2300      	movs	r3, #0
}
 801080c:	4618      	mov	r0, r3
 801080e:	3724      	adds	r7, #36	; 0x24
 8010810:	46bd      	mov	sp, r7
 8010812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010816:	4770      	bx	lr

08010818 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010818:	b480      	push	{r7}
 801081a:	b089      	sub	sp, #36	; 0x24
 801081c:	af00      	add	r7, sp, #0
 801081e:	60f8      	str	r0, [r7, #12]
 8010820:	60b9      	str	r1, [r7, #8]
 8010822:	4613      	mov	r3, r2
 8010824:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 801082a:	68bb      	ldr	r3, [r7, #8]
 801082c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 801082e:	88fb      	ldrh	r3, [r7, #6]
 8010830:	3303      	adds	r3, #3
 8010832:	089b      	lsrs	r3, r3, #2
 8010834:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8010836:	2300      	movs	r3, #0
 8010838:	61bb      	str	r3, [r7, #24]
 801083a:	e00b      	b.n	8010854 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801083c:	697b      	ldr	r3, [r7, #20]
 801083e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010842:	681a      	ldr	r2, [r3, #0]
 8010844:	69fb      	ldr	r3, [r7, #28]
 8010846:	601a      	str	r2, [r3, #0]
    pDest++;
 8010848:	69fb      	ldr	r3, [r7, #28]
 801084a:	3304      	adds	r3, #4
 801084c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 801084e:	69bb      	ldr	r3, [r7, #24]
 8010850:	3301      	adds	r3, #1
 8010852:	61bb      	str	r3, [r7, #24]
 8010854:	69ba      	ldr	r2, [r7, #24]
 8010856:	693b      	ldr	r3, [r7, #16]
 8010858:	429a      	cmp	r2, r3
 801085a:	d3ef      	bcc.n	801083c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 801085c:	69fb      	ldr	r3, [r7, #28]
}
 801085e:	4618      	mov	r0, r3
 8010860:	3724      	adds	r7, #36	; 0x24
 8010862:	46bd      	mov	sp, r7
 8010864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010868:	4770      	bx	lr

0801086a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801086a:	b480      	push	{r7}
 801086c:	b085      	sub	sp, #20
 801086e:	af00      	add	r7, sp, #0
 8010870:	6078      	str	r0, [r7, #4]
 8010872:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010878:	683b      	ldr	r3, [r7, #0]
 801087a:	781b      	ldrb	r3, [r3, #0]
 801087c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	785b      	ldrb	r3, [r3, #1]
 8010882:	2b01      	cmp	r3, #1
 8010884:	d12c      	bne.n	80108e0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010886:	68bb      	ldr	r3, [r7, #8]
 8010888:	015a      	lsls	r2, r3, #5
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	4413      	add	r3, r2
 801088e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	2b00      	cmp	r3, #0
 8010896:	db12      	blt.n	80108be <USB_EPSetStall+0x54>
 8010898:	68bb      	ldr	r3, [r7, #8]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d00f      	beq.n	80108be <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	015a      	lsls	r2, r3, #5
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	4413      	add	r3, r2
 80108a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	68ba      	ldr	r2, [r7, #8]
 80108ae:	0151      	lsls	r1, r2, #5
 80108b0:	68fa      	ldr	r2, [r7, #12]
 80108b2:	440a      	add	r2, r1
 80108b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80108bc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80108be:	68bb      	ldr	r3, [r7, #8]
 80108c0:	015a      	lsls	r2, r3, #5
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	4413      	add	r3, r2
 80108c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	68ba      	ldr	r2, [r7, #8]
 80108ce:	0151      	lsls	r1, r2, #5
 80108d0:	68fa      	ldr	r2, [r7, #12]
 80108d2:	440a      	add	r2, r1
 80108d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80108dc:	6013      	str	r3, [r2, #0]
 80108de:	e02b      	b.n	8010938 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80108e0:	68bb      	ldr	r3, [r7, #8]
 80108e2:	015a      	lsls	r2, r3, #5
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	4413      	add	r3, r2
 80108e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	db12      	blt.n	8010918 <USB_EPSetStall+0xae>
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d00f      	beq.n	8010918 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80108f8:	68bb      	ldr	r3, [r7, #8]
 80108fa:	015a      	lsls	r2, r3, #5
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	4413      	add	r3, r2
 8010900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	68ba      	ldr	r2, [r7, #8]
 8010908:	0151      	lsls	r1, r2, #5
 801090a:	68fa      	ldr	r2, [r7, #12]
 801090c:	440a      	add	r2, r1
 801090e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010912:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010916:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010918:	68bb      	ldr	r3, [r7, #8]
 801091a:	015a      	lsls	r2, r3, #5
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	4413      	add	r3, r2
 8010920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	68ba      	ldr	r2, [r7, #8]
 8010928:	0151      	lsls	r1, r2, #5
 801092a:	68fa      	ldr	r2, [r7, #12]
 801092c:	440a      	add	r2, r1
 801092e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010932:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010936:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010938:	2300      	movs	r3, #0
}
 801093a:	4618      	mov	r0, r3
 801093c:	3714      	adds	r7, #20
 801093e:	46bd      	mov	sp, r7
 8010940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010944:	4770      	bx	lr

08010946 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010946:	b480      	push	{r7}
 8010948:	b085      	sub	sp, #20
 801094a:	af00      	add	r7, sp, #0
 801094c:	6078      	str	r0, [r7, #4]
 801094e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010954:	683b      	ldr	r3, [r7, #0]
 8010956:	781b      	ldrb	r3, [r3, #0]
 8010958:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801095a:	683b      	ldr	r3, [r7, #0]
 801095c:	785b      	ldrb	r3, [r3, #1]
 801095e:	2b01      	cmp	r3, #1
 8010960:	d128      	bne.n	80109b4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010962:	68bb      	ldr	r3, [r7, #8]
 8010964:	015a      	lsls	r2, r3, #5
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	4413      	add	r3, r2
 801096a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	68ba      	ldr	r2, [r7, #8]
 8010972:	0151      	lsls	r1, r2, #5
 8010974:	68fa      	ldr	r2, [r7, #12]
 8010976:	440a      	add	r2, r1
 8010978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801097c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010980:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	78db      	ldrb	r3, [r3, #3]
 8010986:	2b03      	cmp	r3, #3
 8010988:	d003      	beq.n	8010992 <USB_EPClearStall+0x4c>
 801098a:	683b      	ldr	r3, [r7, #0]
 801098c:	78db      	ldrb	r3, [r3, #3]
 801098e:	2b02      	cmp	r3, #2
 8010990:	d138      	bne.n	8010a04 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010992:	68bb      	ldr	r3, [r7, #8]
 8010994:	015a      	lsls	r2, r3, #5
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	4413      	add	r3, r2
 801099a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	68ba      	ldr	r2, [r7, #8]
 80109a2:	0151      	lsls	r1, r2, #5
 80109a4:	68fa      	ldr	r2, [r7, #12]
 80109a6:	440a      	add	r2, r1
 80109a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80109b0:	6013      	str	r3, [r2, #0]
 80109b2:	e027      	b.n	8010a04 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80109b4:	68bb      	ldr	r3, [r7, #8]
 80109b6:	015a      	lsls	r2, r3, #5
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	4413      	add	r3, r2
 80109bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	68ba      	ldr	r2, [r7, #8]
 80109c4:	0151      	lsls	r1, r2, #5
 80109c6:	68fa      	ldr	r2, [r7, #12]
 80109c8:	440a      	add	r2, r1
 80109ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80109ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80109d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80109d4:	683b      	ldr	r3, [r7, #0]
 80109d6:	78db      	ldrb	r3, [r3, #3]
 80109d8:	2b03      	cmp	r3, #3
 80109da:	d003      	beq.n	80109e4 <USB_EPClearStall+0x9e>
 80109dc:	683b      	ldr	r3, [r7, #0]
 80109de:	78db      	ldrb	r3, [r3, #3]
 80109e0:	2b02      	cmp	r3, #2
 80109e2:	d10f      	bne.n	8010a04 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80109e4:	68bb      	ldr	r3, [r7, #8]
 80109e6:	015a      	lsls	r2, r3, #5
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	4413      	add	r3, r2
 80109ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	68ba      	ldr	r2, [r7, #8]
 80109f4:	0151      	lsls	r1, r2, #5
 80109f6:	68fa      	ldr	r2, [r7, #12]
 80109f8:	440a      	add	r2, r1
 80109fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80109fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010a02:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010a04:	2300      	movs	r3, #0
}
 8010a06:	4618      	mov	r0, r3
 8010a08:	3714      	adds	r7, #20
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a10:	4770      	bx	lr

08010a12 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010a12:	b480      	push	{r7}
 8010a14:	b085      	sub	sp, #20
 8010a16:	af00      	add	r7, sp, #0
 8010a18:	6078      	str	r0, [r7, #4]
 8010a1a:	460b      	mov	r3, r1
 8010a1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	68fa      	ldr	r2, [r7, #12]
 8010a2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010a30:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010a34:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a3c:	681a      	ldr	r2, [r3, #0]
 8010a3e:	78fb      	ldrb	r3, [r7, #3]
 8010a40:	011b      	lsls	r3, r3, #4
 8010a42:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010a46:	68f9      	ldr	r1, [r7, #12]
 8010a48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010a4c:	4313      	orrs	r3, r2
 8010a4e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010a50:	2300      	movs	r3, #0
}
 8010a52:	4618      	mov	r0, r3
 8010a54:	3714      	adds	r7, #20
 8010a56:	46bd      	mov	sp, r7
 8010a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5c:	4770      	bx	lr

08010a5e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010a5e:	b480      	push	{r7}
 8010a60:	b085      	sub	sp, #20
 8010a62:	af00      	add	r7, sp, #0
 8010a64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	68fa      	ldr	r2, [r7, #12]
 8010a74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010a78:	f023 0303 	bic.w	r3, r3, #3
 8010a7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a84:	685b      	ldr	r3, [r3, #4]
 8010a86:	68fa      	ldr	r2, [r7, #12]
 8010a88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010a8c:	f023 0302 	bic.w	r3, r3, #2
 8010a90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010a92:	2300      	movs	r3, #0
}
 8010a94:	4618      	mov	r0, r3
 8010a96:	3714      	adds	r7, #20
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9e:	4770      	bx	lr

08010aa0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010aa0:	b480      	push	{r7}
 8010aa2:	b085      	sub	sp, #20
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	68fa      	ldr	r2, [r7, #12]
 8010ab6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010aba:	f023 0303 	bic.w	r3, r3, #3
 8010abe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ac6:	685b      	ldr	r3, [r3, #4]
 8010ac8:	68fa      	ldr	r2, [r7, #12]
 8010aca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ace:	f043 0302 	orr.w	r3, r3, #2
 8010ad2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010ad4:	2300      	movs	r3, #0
}
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	3714      	adds	r7, #20
 8010ada:	46bd      	mov	sp, r7
 8010adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae0:	4770      	bx	lr

08010ae2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010ae2:	b480      	push	{r7}
 8010ae4:	b085      	sub	sp, #20
 8010ae6:	af00      	add	r7, sp, #0
 8010ae8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	695b      	ldr	r3, [r3, #20]
 8010aee:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	699b      	ldr	r3, [r3, #24]
 8010af4:	68fa      	ldr	r2, [r7, #12]
 8010af6:	4013      	ands	r3, r2
 8010af8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010afa:	68fb      	ldr	r3, [r7, #12]
}
 8010afc:	4618      	mov	r0, r3
 8010afe:	3714      	adds	r7, #20
 8010b00:	46bd      	mov	sp, r7
 8010b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b06:	4770      	bx	lr

08010b08 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010b08:	b480      	push	{r7}
 8010b0a:	b085      	sub	sp, #20
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b1a:	699b      	ldr	r3, [r3, #24]
 8010b1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b24:	69db      	ldr	r3, [r3, #28]
 8010b26:	68ba      	ldr	r2, [r7, #8]
 8010b28:	4013      	ands	r3, r2
 8010b2a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	0c1b      	lsrs	r3, r3, #16
}
 8010b30:	4618      	mov	r0, r3
 8010b32:	3714      	adds	r7, #20
 8010b34:	46bd      	mov	sp, r7
 8010b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3a:	4770      	bx	lr

08010b3c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010b3c:	b480      	push	{r7}
 8010b3e:	b085      	sub	sp, #20
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b4e:	699b      	ldr	r3, [r3, #24]
 8010b50:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b58:	69db      	ldr	r3, [r3, #28]
 8010b5a:	68ba      	ldr	r2, [r7, #8]
 8010b5c:	4013      	ands	r3, r2
 8010b5e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	b29b      	uxth	r3, r3
}
 8010b64:	4618      	mov	r0, r3
 8010b66:	3714      	adds	r7, #20
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6e:	4770      	bx	lr

08010b70 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010b70:	b480      	push	{r7}
 8010b72:	b085      	sub	sp, #20
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
 8010b78:	460b      	mov	r3, r1
 8010b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010b80:	78fb      	ldrb	r3, [r7, #3]
 8010b82:	015a      	lsls	r2, r3, #5
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	4413      	add	r3, r2
 8010b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b8c:	689b      	ldr	r3, [r3, #8]
 8010b8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b96:	695b      	ldr	r3, [r3, #20]
 8010b98:	68ba      	ldr	r2, [r7, #8]
 8010b9a:	4013      	ands	r3, r2
 8010b9c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010b9e:	68bb      	ldr	r3, [r7, #8]
}
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	3714      	adds	r7, #20
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010baa:	4770      	bx	lr

08010bac <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010bac:	b480      	push	{r7}
 8010bae:	b087      	sub	sp, #28
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
 8010bb4:	460b      	mov	r3, r1
 8010bb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010bbc:	697b      	ldr	r3, [r7, #20]
 8010bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010bc2:	691b      	ldr	r3, [r3, #16]
 8010bc4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bce:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010bd0:	78fb      	ldrb	r3, [r7, #3]
 8010bd2:	f003 030f 	and.w	r3, r3, #15
 8010bd6:	68fa      	ldr	r2, [r7, #12]
 8010bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8010bdc:	01db      	lsls	r3, r3, #7
 8010bde:	b2db      	uxtb	r3, r3
 8010be0:	693a      	ldr	r2, [r7, #16]
 8010be2:	4313      	orrs	r3, r2
 8010be4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010be6:	78fb      	ldrb	r3, [r7, #3]
 8010be8:	015a      	lsls	r2, r3, #5
 8010bea:	697b      	ldr	r3, [r7, #20]
 8010bec:	4413      	add	r3, r2
 8010bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010bf2:	689b      	ldr	r3, [r3, #8]
 8010bf4:	693a      	ldr	r2, [r7, #16]
 8010bf6:	4013      	ands	r3, r2
 8010bf8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010bfa:	68bb      	ldr	r3, [r7, #8]
}
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	371c      	adds	r7, #28
 8010c00:	46bd      	mov	sp, r7
 8010c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c06:	4770      	bx	lr

08010c08 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010c08:	b480      	push	{r7}
 8010c0a:	b083      	sub	sp, #12
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	695b      	ldr	r3, [r3, #20]
 8010c14:	f003 0301 	and.w	r3, r3, #1
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	370c      	adds	r7, #12
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c22:	4770      	bx	lr

08010c24 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010c24:	b480      	push	{r7}
 8010c26:	b085      	sub	sp, #20
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	68fa      	ldr	r2, [r7, #12]
 8010c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c3e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010c42:	f023 0307 	bic.w	r3, r3, #7
 8010c46:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c4e:	685b      	ldr	r3, [r3, #4]
 8010c50:	68fa      	ldr	r2, [r7, #12]
 8010c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010c5a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010c5c:	2300      	movs	r3, #0
}
 8010c5e:	4618      	mov	r0, r3
 8010c60:	3714      	adds	r7, #20
 8010c62:	46bd      	mov	sp, r7
 8010c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c68:	4770      	bx	lr
	...

08010c6c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010c6c:	b480      	push	{r7}
 8010c6e:	b087      	sub	sp, #28
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	60f8      	str	r0, [r7, #12]
 8010c74:	460b      	mov	r3, r1
 8010c76:	607a      	str	r2, [r7, #4]
 8010c78:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	333c      	adds	r3, #60	; 0x3c
 8010c82:	3304      	adds	r3, #4
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010c88:	693b      	ldr	r3, [r7, #16]
 8010c8a:	4a26      	ldr	r2, [pc, #152]	; (8010d24 <USB_EP0_OutStart+0xb8>)
 8010c8c:	4293      	cmp	r3, r2
 8010c8e:	d90a      	bls.n	8010ca6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010c90:	697b      	ldr	r3, [r7, #20]
 8010c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010c9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010ca0:	d101      	bne.n	8010ca6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	e037      	b.n	8010d16 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010ca6:	697b      	ldr	r3, [r7, #20]
 8010ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010cac:	461a      	mov	r2, r3
 8010cae:	2300      	movs	r3, #0
 8010cb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010cb2:	697b      	ldr	r3, [r7, #20]
 8010cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010cb8:	691b      	ldr	r3, [r3, #16]
 8010cba:	697a      	ldr	r2, [r7, #20]
 8010cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010cc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010cc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010cc6:	697b      	ldr	r3, [r7, #20]
 8010cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ccc:	691b      	ldr	r3, [r3, #16]
 8010cce:	697a      	ldr	r2, [r7, #20]
 8010cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010cd4:	f043 0318 	orr.w	r3, r3, #24
 8010cd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010cda:	697b      	ldr	r3, [r7, #20]
 8010cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ce0:	691b      	ldr	r3, [r3, #16]
 8010ce2:	697a      	ldr	r2, [r7, #20]
 8010ce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ce8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010cec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010cee:	7afb      	ldrb	r3, [r7, #11]
 8010cf0:	2b01      	cmp	r3, #1
 8010cf2:	d10f      	bne.n	8010d14 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010cf4:	697b      	ldr	r3, [r7, #20]
 8010cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010cfa:	461a      	mov	r2, r3
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010d00:	697b      	ldr	r3, [r7, #20]
 8010d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	697a      	ldr	r2, [r7, #20]
 8010d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d0e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010d12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010d14:	2300      	movs	r3, #0
}
 8010d16:	4618      	mov	r0, r3
 8010d18:	371c      	adds	r7, #28
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d20:	4770      	bx	lr
 8010d22:	bf00      	nop
 8010d24:	4f54300a 	.word	0x4f54300a

08010d28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010d28:	b480      	push	{r7}
 8010d2a:	b085      	sub	sp, #20
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8010d30:	2300      	movs	r3, #0
 8010d32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	3301      	adds	r3, #1
 8010d38:	60fb      	str	r3, [r7, #12]
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	4a13      	ldr	r2, [pc, #76]	; (8010d8c <USB_CoreReset+0x64>)
 8010d3e:	4293      	cmp	r3, r2
 8010d40:	d901      	bls.n	8010d46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010d42:	2303      	movs	r3, #3
 8010d44:	e01b      	b.n	8010d7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	691b      	ldr	r3, [r3, #16]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	daf2      	bge.n	8010d34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010d4e:	2300      	movs	r3, #0
 8010d50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	691b      	ldr	r3, [r3, #16]
 8010d56:	f043 0201 	orr.w	r2, r3, #1
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	3301      	adds	r3, #1
 8010d62:	60fb      	str	r3, [r7, #12]
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	4a09      	ldr	r2, [pc, #36]	; (8010d8c <USB_CoreReset+0x64>)
 8010d68:	4293      	cmp	r3, r2
 8010d6a:	d901      	bls.n	8010d70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010d6c:	2303      	movs	r3, #3
 8010d6e:	e006      	b.n	8010d7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	691b      	ldr	r3, [r3, #16]
 8010d74:	f003 0301 	and.w	r3, r3, #1
 8010d78:	2b01      	cmp	r3, #1
 8010d7a:	d0f0      	beq.n	8010d5e <USB_CoreReset+0x36>

  return HAL_OK;
 8010d7c:	2300      	movs	r3, #0
}
 8010d7e:	4618      	mov	r0, r3
 8010d80:	3714      	adds	r7, #20
 8010d82:	46bd      	mov	sp, r7
 8010d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d88:	4770      	bx	lr
 8010d8a:	bf00      	nop
 8010d8c:	00030d40 	.word	0x00030d40

08010d90 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b084      	sub	sp, #16
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
 8010d98:	460b      	mov	r3, r1
 8010d9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010d9c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010da0:	f004 ffcc 	bl	8015d3c <malloc>
 8010da4:	4603      	mov	r3, r0
 8010da6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d105      	bne.n	8010dba <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	2200      	movs	r2, #0
 8010db2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8010db6:	2302      	movs	r3, #2
 8010db8:	e066      	b.n	8010e88 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	68fa      	ldr	r2, [r7, #12]
 8010dbe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	7c1b      	ldrb	r3, [r3, #16]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d119      	bne.n	8010dfe <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010dca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010dce:	2202      	movs	r2, #2
 8010dd0:	2181      	movs	r1, #129	; 0x81
 8010dd2:	6878      	ldr	r0, [r7, #4]
 8010dd4:	f004 fe39 	bl	8015a4a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	2201      	movs	r2, #1
 8010ddc:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010dde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010de2:	2202      	movs	r2, #2
 8010de4:	2101      	movs	r1, #1
 8010de6:	6878      	ldr	r0, [r7, #4]
 8010de8:	f004 fe2f 	bl	8015a4a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	2201      	movs	r2, #1
 8010df0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	2210      	movs	r2, #16
 8010df8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8010dfc:	e016      	b.n	8010e2c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010dfe:	2340      	movs	r3, #64	; 0x40
 8010e00:	2202      	movs	r2, #2
 8010e02:	2181      	movs	r1, #129	; 0x81
 8010e04:	6878      	ldr	r0, [r7, #4]
 8010e06:	f004 fe20 	bl	8015a4a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	2201      	movs	r2, #1
 8010e0e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010e10:	2340      	movs	r3, #64	; 0x40
 8010e12:	2202      	movs	r2, #2
 8010e14:	2101      	movs	r1, #1
 8010e16:	6878      	ldr	r0, [r7, #4]
 8010e18:	f004 fe17 	bl	8015a4a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	2201      	movs	r2, #1
 8010e20:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	2210      	movs	r2, #16
 8010e28:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010e2c:	2308      	movs	r3, #8
 8010e2e:	2203      	movs	r2, #3
 8010e30:	2182      	movs	r1, #130	; 0x82
 8010e32:	6878      	ldr	r0, [r7, #4]
 8010e34:	f004 fe09 	bl	8015a4a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	2201      	movs	r2, #1
 8010e3c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	2200      	movs	r2, #0
 8010e56:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	7c1b      	ldrb	r3, [r3, #16]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d109      	bne.n	8010e76 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010e6c:	2101      	movs	r1, #1
 8010e6e:	6878      	ldr	r0, [r7, #4]
 8010e70:	f004 feda 	bl	8015c28 <USBD_LL_PrepareReceive>
 8010e74:	e007      	b.n	8010e86 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010e7c:	2340      	movs	r3, #64	; 0x40
 8010e7e:	2101      	movs	r1, #1
 8010e80:	6878      	ldr	r0, [r7, #4]
 8010e82:	f004 fed1 	bl	8015c28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010e86:	2300      	movs	r3, #0
}
 8010e88:	4618      	mov	r0, r3
 8010e8a:	3710      	adds	r7, #16
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd80      	pop	{r7, pc}

08010e90 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b084      	sub	sp, #16
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
 8010e98:	460b      	mov	r3, r1
 8010e9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8010ea0:	2181      	movs	r1, #129	; 0x81
 8010ea2:	6878      	ldr	r0, [r7, #4]
 8010ea4:	f004 fdf7 	bl	8015a96 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2200      	movs	r2, #0
 8010eac:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8010eae:	2101      	movs	r1, #1
 8010eb0:	6878      	ldr	r0, [r7, #4]
 8010eb2:	f004 fdf0 	bl	8015a96 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	2200      	movs	r2, #0
 8010eba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8010ebe:	2182      	movs	r1, #130	; 0x82
 8010ec0:	6878      	ldr	r0, [r7, #4]
 8010ec2:	f004 fde8 	bl	8015a96 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	2200      	movs	r2, #0
 8010eca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d00e      	beq.n	8010efe <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010ee6:	685b      	ldr	r3, [r3, #4]
 8010ee8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	f004 ff2b 	bl	8015d4c <free>
    pdev->pClassData = NULL;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2200      	movs	r2, #0
 8010efa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8010efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f00:	4618      	mov	r0, r3
 8010f02:	3710      	adds	r7, #16
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd80      	pop	{r7, pc}

08010f08 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b086      	sub	sp, #24
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
 8010f10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f18:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8010f1e:	2300      	movs	r3, #0
 8010f20:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8010f22:	2300      	movs	r3, #0
 8010f24:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	781b      	ldrb	r3, [r3, #0]
 8010f2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d03a      	beq.n	8010fa8 <USBD_CDC_Setup+0xa0>
 8010f32:	2b20      	cmp	r3, #32
 8010f34:	f040 8097 	bne.w	8011066 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8010f38:	683b      	ldr	r3, [r7, #0]
 8010f3a:	88db      	ldrh	r3, [r3, #6]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d029      	beq.n	8010f94 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	781b      	ldrb	r3, [r3, #0]
 8010f44:	b25b      	sxtb	r3, r3
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	da11      	bge.n	8010f6e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010f50:	689b      	ldr	r3, [r3, #8]
 8010f52:	683a      	ldr	r2, [r7, #0]
 8010f54:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8010f56:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010f58:	683a      	ldr	r2, [r7, #0]
 8010f5a:	88d2      	ldrh	r2, [r2, #6]
 8010f5c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010f5e:	6939      	ldr	r1, [r7, #16]
 8010f60:	683b      	ldr	r3, [r7, #0]
 8010f62:	88db      	ldrh	r3, [r3, #6]
 8010f64:	461a      	mov	r2, r3
 8010f66:	6878      	ldr	r0, [r7, #4]
 8010f68:	f001 fa9d 	bl	80124a6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8010f6c:	e082      	b.n	8011074 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	785a      	ldrb	r2, [r3, #1]
 8010f72:	693b      	ldr	r3, [r7, #16]
 8010f74:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	88db      	ldrh	r3, [r3, #6]
 8010f7c:	b2da      	uxtb	r2, r3
 8010f7e:	693b      	ldr	r3, [r7, #16]
 8010f80:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010f84:	6939      	ldr	r1, [r7, #16]
 8010f86:	683b      	ldr	r3, [r7, #0]
 8010f88:	88db      	ldrh	r3, [r3, #6]
 8010f8a:	461a      	mov	r2, r3
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f001 fab6 	bl	80124fe <USBD_CtlPrepareRx>
    break;
 8010f92:	e06f      	b.n	8011074 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010f9a:	689b      	ldr	r3, [r3, #8]
 8010f9c:	683a      	ldr	r2, [r7, #0]
 8010f9e:	7850      	ldrb	r0, [r2, #1]
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	6839      	ldr	r1, [r7, #0]
 8010fa4:	4798      	blx	r3
    break;
 8010fa6:	e065      	b.n	8011074 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	785b      	ldrb	r3, [r3, #1]
 8010fac:	2b0b      	cmp	r3, #11
 8010fae:	d84f      	bhi.n	8011050 <USBD_CDC_Setup+0x148>
 8010fb0:	a201      	add	r2, pc, #4	; (adr r2, 8010fb8 <USBD_CDC_Setup+0xb0>)
 8010fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fb6:	bf00      	nop
 8010fb8:	08010fe9 	.word	0x08010fe9
 8010fbc:	0801105f 	.word	0x0801105f
 8010fc0:	08011051 	.word	0x08011051
 8010fc4:	08011051 	.word	0x08011051
 8010fc8:	08011051 	.word	0x08011051
 8010fcc:	08011051 	.word	0x08011051
 8010fd0:	08011051 	.word	0x08011051
 8010fd4:	08011051 	.word	0x08011051
 8010fd8:	08011051 	.word	0x08011051
 8010fdc:	08011051 	.word	0x08011051
 8010fe0:	08011011 	.word	0x08011011
 8010fe4:	08011039 	.word	0x08011039
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010fee:	2b03      	cmp	r3, #3
 8010ff0:	d107      	bne.n	8011002 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010ff2:	f107 030c 	add.w	r3, r7, #12
 8010ff6:	2202      	movs	r2, #2
 8010ff8:	4619      	mov	r1, r3
 8010ffa:	6878      	ldr	r0, [r7, #4]
 8010ffc:	f001 fa53 	bl	80124a6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8011000:	e030      	b.n	8011064 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8011002:	6839      	ldr	r1, [r7, #0]
 8011004:	6878      	ldr	r0, [r7, #4]
 8011006:	f001 f9dd 	bl	80123c4 <USBD_CtlError>
        ret = USBD_FAIL;
 801100a:	2303      	movs	r3, #3
 801100c:	75fb      	strb	r3, [r7, #23]
      break;
 801100e:	e029      	b.n	8011064 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011016:	2b03      	cmp	r3, #3
 8011018:	d107      	bne.n	801102a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801101a:	f107 030f 	add.w	r3, r7, #15
 801101e:	2201      	movs	r2, #1
 8011020:	4619      	mov	r1, r3
 8011022:	6878      	ldr	r0, [r7, #4]
 8011024:	f001 fa3f 	bl	80124a6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8011028:	e01c      	b.n	8011064 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 801102a:	6839      	ldr	r1, [r7, #0]
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f001 f9c9 	bl	80123c4 <USBD_CtlError>
        ret = USBD_FAIL;
 8011032:	2303      	movs	r3, #3
 8011034:	75fb      	strb	r3, [r7, #23]
      break;
 8011036:	e015      	b.n	8011064 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801103e:	2b03      	cmp	r3, #3
 8011040:	d00f      	beq.n	8011062 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8011042:	6839      	ldr	r1, [r7, #0]
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f001 f9bd 	bl	80123c4 <USBD_CtlError>
        ret = USBD_FAIL;
 801104a:	2303      	movs	r3, #3
 801104c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 801104e:	e008      	b.n	8011062 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8011050:	6839      	ldr	r1, [r7, #0]
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f001 f9b6 	bl	80123c4 <USBD_CtlError>
      ret = USBD_FAIL;
 8011058:	2303      	movs	r3, #3
 801105a:	75fb      	strb	r3, [r7, #23]
      break;
 801105c:	e002      	b.n	8011064 <USBD_CDC_Setup+0x15c>
      break;
 801105e:	bf00      	nop
 8011060:	e008      	b.n	8011074 <USBD_CDC_Setup+0x16c>
      break;
 8011062:	bf00      	nop
    }
    break;
 8011064:	e006      	b.n	8011074 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8011066:	6839      	ldr	r1, [r7, #0]
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f001 f9ab 	bl	80123c4 <USBD_CtlError>
    ret = USBD_FAIL;
 801106e:	2303      	movs	r3, #3
 8011070:	75fb      	strb	r3, [r7, #23]
    break;
 8011072:	bf00      	nop
  }

  return (uint8_t)ret;
 8011074:	7dfb      	ldrb	r3, [r7, #23]
}
 8011076:	4618      	mov	r0, r3
 8011078:	3718      	adds	r7, #24
 801107a:	46bd      	mov	sp, r7
 801107c:	bd80      	pop	{r7, pc}
 801107e:	bf00      	nop

08011080 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b084      	sub	sp, #16
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
 8011088:	460b      	mov	r3, r1
 801108a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011092:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801109a:	2b00      	cmp	r3, #0
 801109c:	d101      	bne.n	80110a2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801109e:	2303      	movs	r3, #3
 80110a0:	e049      	b.n	8011136 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80110a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80110aa:	78fa      	ldrb	r2, [r7, #3]
 80110ac:	6879      	ldr	r1, [r7, #4]
 80110ae:	4613      	mov	r3, r2
 80110b0:	009b      	lsls	r3, r3, #2
 80110b2:	4413      	add	r3, r2
 80110b4:	009b      	lsls	r3, r3, #2
 80110b6:	440b      	add	r3, r1
 80110b8:	3318      	adds	r3, #24
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d029      	beq.n	8011114 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80110c0:	78fa      	ldrb	r2, [r7, #3]
 80110c2:	6879      	ldr	r1, [r7, #4]
 80110c4:	4613      	mov	r3, r2
 80110c6:	009b      	lsls	r3, r3, #2
 80110c8:	4413      	add	r3, r2
 80110ca:	009b      	lsls	r3, r3, #2
 80110cc:	440b      	add	r3, r1
 80110ce:	3318      	adds	r3, #24
 80110d0:	681a      	ldr	r2, [r3, #0]
 80110d2:	78f9      	ldrb	r1, [r7, #3]
 80110d4:	68f8      	ldr	r0, [r7, #12]
 80110d6:	460b      	mov	r3, r1
 80110d8:	00db      	lsls	r3, r3, #3
 80110da:	1a5b      	subs	r3, r3, r1
 80110dc:	009b      	lsls	r3, r3, #2
 80110de:	4403      	add	r3, r0
 80110e0:	3344      	adds	r3, #68	; 0x44
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	fbb2 f1f3 	udiv	r1, r2, r3
 80110e8:	fb03 f301 	mul.w	r3, r3, r1
 80110ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d110      	bne.n	8011114 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80110f2:	78fa      	ldrb	r2, [r7, #3]
 80110f4:	6879      	ldr	r1, [r7, #4]
 80110f6:	4613      	mov	r3, r2
 80110f8:	009b      	lsls	r3, r3, #2
 80110fa:	4413      	add	r3, r2
 80110fc:	009b      	lsls	r3, r3, #2
 80110fe:	440b      	add	r3, r1
 8011100:	3318      	adds	r3, #24
 8011102:	2200      	movs	r2, #0
 8011104:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011106:	78f9      	ldrb	r1, [r7, #3]
 8011108:	2300      	movs	r3, #0
 801110a:	2200      	movs	r2, #0
 801110c:	6878      	ldr	r0, [r7, #4]
 801110e:	f004 fd6a 	bl	8015be6 <USBD_LL_Transmit>
 8011112:	e00f      	b.n	8011134 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8011114:	68bb      	ldr	r3, [r7, #8]
 8011116:	2200      	movs	r2, #0
 8011118:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011122:	691b      	ldr	r3, [r3, #16]
 8011124:	68ba      	ldr	r2, [r7, #8]
 8011126:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801112a:	68ba      	ldr	r2, [r7, #8]
 801112c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8011130:	78fa      	ldrb	r2, [r7, #3]
 8011132:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8011134:	2300      	movs	r3, #0
}
 8011136:	4618      	mov	r0, r3
 8011138:	3710      	adds	r7, #16
 801113a:	46bd      	mov	sp, r7
 801113c:	bd80      	pop	{r7, pc}

0801113e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801113e:	b580      	push	{r7, lr}
 8011140:	b084      	sub	sp, #16
 8011142:	af00      	add	r7, sp, #0
 8011144:	6078      	str	r0, [r7, #4]
 8011146:	460b      	mov	r3, r1
 8011148:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011150:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011158:	2b00      	cmp	r3, #0
 801115a:	d101      	bne.n	8011160 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801115c:	2303      	movs	r3, #3
 801115e:	e015      	b.n	801118c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011160:	78fb      	ldrb	r3, [r7, #3]
 8011162:	4619      	mov	r1, r3
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	f004 fd80 	bl	8015c6a <USBD_LL_GetRxDataSize>
 801116a:	4602      	mov	r2, r0
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011178:	68db      	ldr	r3, [r3, #12]
 801117a:	68fa      	ldr	r2, [r7, #12]
 801117c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8011180:	68fa      	ldr	r2, [r7, #12]
 8011182:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011186:	4611      	mov	r1, r2
 8011188:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801118a:	2300      	movs	r3, #0
}
 801118c:	4618      	mov	r0, r3
 801118e:	3710      	adds	r7, #16
 8011190:	46bd      	mov	sp, r7
 8011192:	bd80      	pop	{r7, pc}

08011194 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011194:	b580      	push	{r7, lr}
 8011196:	b084      	sub	sp, #16
 8011198:	af00      	add	r7, sp, #0
 801119a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80111a2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d015      	beq.n	80111da <USBD_CDC_EP0_RxReady+0x46>
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80111b4:	2bff      	cmp	r3, #255	; 0xff
 80111b6:	d010      	beq.n	80111da <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80111be:	689b      	ldr	r3, [r3, #8]
 80111c0:	68fa      	ldr	r2, [r7, #12]
 80111c2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80111c6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80111c8:	68fa      	ldr	r2, [r7, #12]
 80111ca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80111ce:	b292      	uxth	r2, r2
 80111d0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	22ff      	movs	r2, #255	; 0xff
 80111d6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80111da:	2300      	movs	r3, #0
}
 80111dc:	4618      	mov	r0, r3
 80111de:	3710      	adds	r7, #16
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}

080111e4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80111e4:	b480      	push	{r7}
 80111e6:	b083      	sub	sp, #12
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	2243      	movs	r2, #67	; 0x43
 80111f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80111f2:	4b03      	ldr	r3, [pc, #12]	; (8011200 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80111f4:	4618      	mov	r0, r3
 80111f6:	370c      	adds	r7, #12
 80111f8:	46bd      	mov	sp, r7
 80111fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fe:	4770      	bx	lr
 8011200:	2000211c 	.word	0x2000211c

08011204 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011204:	b480      	push	{r7}
 8011206:	b083      	sub	sp, #12
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	2243      	movs	r2, #67	; 0x43
 8011210:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8011212:	4b03      	ldr	r3, [pc, #12]	; (8011220 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011214:	4618      	mov	r0, r3
 8011216:	370c      	adds	r7, #12
 8011218:	46bd      	mov	sp, r7
 801121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121e:	4770      	bx	lr
 8011220:	200020d8 	.word	0x200020d8

08011224 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011224:	b480      	push	{r7}
 8011226:	b083      	sub	sp, #12
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	2243      	movs	r2, #67	; 0x43
 8011230:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8011232:	4b03      	ldr	r3, [pc, #12]	; (8011240 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011234:	4618      	mov	r0, r3
 8011236:	370c      	adds	r7, #12
 8011238:	46bd      	mov	sp, r7
 801123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123e:	4770      	bx	lr
 8011240:	20002160 	.word	0x20002160

08011244 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011244:	b480      	push	{r7}
 8011246:	b083      	sub	sp, #12
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	220a      	movs	r2, #10
 8011250:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011252:	4b03      	ldr	r3, [pc, #12]	; (8011260 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011254:	4618      	mov	r0, r3
 8011256:	370c      	adds	r7, #12
 8011258:	46bd      	mov	sp, r7
 801125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125e:	4770      	bx	lr
 8011260:	20002094 	.word	0x20002094

08011264 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011264:	b480      	push	{r7}
 8011266:	b083      	sub	sp, #12
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
 801126c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801126e:	683b      	ldr	r3, [r7, #0]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d101      	bne.n	8011278 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011274:	2303      	movs	r3, #3
 8011276:	e004      	b.n	8011282 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	683a      	ldr	r2, [r7, #0]
 801127c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011280:	2300      	movs	r3, #0
}
 8011282:	4618      	mov	r0, r3
 8011284:	370c      	adds	r7, #12
 8011286:	46bd      	mov	sp, r7
 8011288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128c:	4770      	bx	lr

0801128e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801128e:	b480      	push	{r7}
 8011290:	b087      	sub	sp, #28
 8011292:	af00      	add	r7, sp, #0
 8011294:	60f8      	str	r0, [r7, #12]
 8011296:	60b9      	str	r1, [r7, #8]
 8011298:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80112a0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80112a2:	697b      	ldr	r3, [r7, #20]
 80112a4:	68ba      	ldr	r2, [r7, #8]
 80112a6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80112aa:	697b      	ldr	r3, [r7, #20]
 80112ac:	687a      	ldr	r2, [r7, #4]
 80112ae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80112b2:	2300      	movs	r3, #0
}
 80112b4:	4618      	mov	r0, r3
 80112b6:	371c      	adds	r7, #28
 80112b8:	46bd      	mov	sp, r7
 80112ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112be:	4770      	bx	lr

080112c0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80112c0:	b480      	push	{r7}
 80112c2:	b085      	sub	sp, #20
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
 80112c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80112d0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	683a      	ldr	r2, [r7, #0]
 80112d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80112da:	2300      	movs	r3, #0
}
 80112dc:	4618      	mov	r0, r3
 80112de:	3714      	adds	r7, #20
 80112e0:	46bd      	mov	sp, r7
 80112e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e6:	4770      	bx	lr

080112e8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b084      	sub	sp, #16
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80112f6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80112f8:	2301      	movs	r3, #1
 80112fa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011302:	2b00      	cmp	r3, #0
 8011304:	d101      	bne.n	801130a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011306:	2303      	movs	r3, #3
 8011308:	e01a      	b.n	8011340 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011310:	2b00      	cmp	r3, #0
 8011312:	d114      	bne.n	801133e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011314:	68bb      	ldr	r3, [r7, #8]
 8011316:	2201      	movs	r2, #1
 8011318:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801131c:	68bb      	ldr	r3, [r7, #8]
 801131e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8011326:	68bb      	ldr	r3, [r7, #8]
 8011328:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801132c:	68bb      	ldr	r3, [r7, #8]
 801132e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011332:	2181      	movs	r1, #129	; 0x81
 8011334:	6878      	ldr	r0, [r7, #4]
 8011336:	f004 fc56 	bl	8015be6 <USBD_LL_Transmit>

    ret = USBD_OK;
 801133a:	2300      	movs	r3, #0
 801133c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801133e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011340:	4618      	mov	r0, r3
 8011342:	3710      	adds	r7, #16
 8011344:	46bd      	mov	sp, r7
 8011346:	bd80      	pop	{r7, pc}

08011348 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b084      	sub	sp, #16
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011356:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801135e:	2b00      	cmp	r3, #0
 8011360:	d101      	bne.n	8011366 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011362:	2303      	movs	r3, #3
 8011364:	e016      	b.n	8011394 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	7c1b      	ldrb	r3, [r3, #16]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d109      	bne.n	8011382 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011374:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011378:	2101      	movs	r1, #1
 801137a:	6878      	ldr	r0, [r7, #4]
 801137c:	f004 fc54 	bl	8015c28 <USBD_LL_PrepareReceive>
 8011380:	e007      	b.n	8011392 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011388:	2340      	movs	r3, #64	; 0x40
 801138a:	2101      	movs	r1, #1
 801138c:	6878      	ldr	r0, [r7, #4]
 801138e:	f004 fc4b 	bl	8015c28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011392:	2300      	movs	r3, #0
}
 8011394:	4618      	mov	r0, r3
 8011396:	3710      	adds	r7, #16
 8011398:	46bd      	mov	sp, r7
 801139a:	bd80      	pop	{r7, pc}

0801139c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b086      	sub	sp, #24
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	60f8      	str	r0, [r7, #12]
 80113a4:	60b9      	str	r1, [r7, #8]
 80113a6:	4613      	mov	r3, r2
 80113a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d101      	bne.n	80113b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80113b0:	2303      	movs	r3, #3
 80113b2:	e025      	b.n	8011400 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d003      	beq.n	80113c6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	2200      	movs	r2, #0
 80113c2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d003      	beq.n	80113d8 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	2200      	movs	r2, #0
 80113d4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80113d8:	68bb      	ldr	r3, [r7, #8]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d003      	beq.n	80113e6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	68ba      	ldr	r2, [r7, #8]
 80113e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	2201      	movs	r2, #1
 80113ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	79fa      	ldrb	r2, [r7, #7]
 80113f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80113f4:	68f8      	ldr	r0, [r7, #12]
 80113f6:	f004 fac1 	bl	801597c <USBD_LL_Init>
 80113fa:	4603      	mov	r3, r0
 80113fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80113fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8011400:	4618      	mov	r0, r3
 8011402:	3718      	adds	r7, #24
 8011404:	46bd      	mov	sp, r7
 8011406:	bd80      	pop	{r7, pc}

08011408 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b084      	sub	sp, #16
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
 8011410:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011412:	2300      	movs	r3, #0
 8011414:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011416:	683b      	ldr	r3, [r7, #0]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d101      	bne.n	8011420 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801141c:	2303      	movs	r3, #3
 801141e:	e010      	b.n	8011442 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	683a      	ldr	r2, [r7, #0]
 8011424:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801142e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011430:	f107 020e 	add.w	r2, r7, #14
 8011434:	4610      	mov	r0, r2
 8011436:	4798      	blx	r3
 8011438:	4602      	mov	r2, r0
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8011440:	2300      	movs	r3, #0
}
 8011442:	4618      	mov	r0, r3
 8011444:	3710      	adds	r7, #16
 8011446:	46bd      	mov	sp, r7
 8011448:	bd80      	pop	{r7, pc}

0801144a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801144a:	b580      	push	{r7, lr}
 801144c:	b082      	sub	sp, #8
 801144e:	af00      	add	r7, sp, #0
 8011450:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011452:	6878      	ldr	r0, [r7, #4]
 8011454:	f004 fade 	bl	8015a14 <USBD_LL_Start>
 8011458:	4603      	mov	r3, r0
}
 801145a:	4618      	mov	r0, r3
 801145c:	3708      	adds	r7, #8
 801145e:	46bd      	mov	sp, r7
 8011460:	bd80      	pop	{r7, pc}

08011462 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011462:	b480      	push	{r7}
 8011464:	b083      	sub	sp, #12
 8011466:	af00      	add	r7, sp, #0
 8011468:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801146a:	2300      	movs	r3, #0
}
 801146c:	4618      	mov	r0, r3
 801146e:	370c      	adds	r7, #12
 8011470:	46bd      	mov	sp, r7
 8011472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011476:	4770      	bx	lr

08011478 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b084      	sub	sp, #16
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
 8011480:	460b      	mov	r3, r1
 8011482:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011484:	2303      	movs	r3, #3
 8011486:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801148e:	2b00      	cmp	r3, #0
 8011490:	d009      	beq.n	80114a6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	78fa      	ldrb	r2, [r7, #3]
 801149c:	4611      	mov	r1, r2
 801149e:	6878      	ldr	r0, [r7, #4]
 80114a0:	4798      	blx	r3
 80114a2:	4603      	mov	r3, r0
 80114a4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80114a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80114a8:	4618      	mov	r0, r3
 80114aa:	3710      	adds	r7, #16
 80114ac:	46bd      	mov	sp, r7
 80114ae:	bd80      	pop	{r7, pc}

080114b0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b082      	sub	sp, #8
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
 80114b8:	460b      	mov	r3, r1
 80114ba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d007      	beq.n	80114d6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114cc:	685b      	ldr	r3, [r3, #4]
 80114ce:	78fa      	ldrb	r2, [r7, #3]
 80114d0:	4611      	mov	r1, r2
 80114d2:	6878      	ldr	r0, [r7, #4]
 80114d4:	4798      	blx	r3
  }

  return USBD_OK;
 80114d6:	2300      	movs	r3, #0
}
 80114d8:	4618      	mov	r0, r3
 80114da:	3708      	adds	r7, #8
 80114dc:	46bd      	mov	sp, r7
 80114de:	bd80      	pop	{r7, pc}

080114e0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b084      	sub	sp, #16
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
 80114e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80114f0:	6839      	ldr	r1, [r7, #0]
 80114f2:	4618      	mov	r0, r3
 80114f4:	f000 ff2c 	bl	8012350 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	2201      	movs	r2, #1
 80114fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011506:	461a      	mov	r2, r3
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011514:	f003 031f 	and.w	r3, r3, #31
 8011518:	2b01      	cmp	r3, #1
 801151a:	d00e      	beq.n	801153a <USBD_LL_SetupStage+0x5a>
 801151c:	2b01      	cmp	r3, #1
 801151e:	d302      	bcc.n	8011526 <USBD_LL_SetupStage+0x46>
 8011520:	2b02      	cmp	r3, #2
 8011522:	d014      	beq.n	801154e <USBD_LL_SetupStage+0x6e>
 8011524:	e01d      	b.n	8011562 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801152c:	4619      	mov	r1, r3
 801152e:	6878      	ldr	r0, [r7, #4]
 8011530:	f000 fa18 	bl	8011964 <USBD_StdDevReq>
 8011534:	4603      	mov	r3, r0
 8011536:	73fb      	strb	r3, [r7, #15]
      break;
 8011538:	e020      	b.n	801157c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011540:	4619      	mov	r1, r3
 8011542:	6878      	ldr	r0, [r7, #4]
 8011544:	f000 fa7c 	bl	8011a40 <USBD_StdItfReq>
 8011548:	4603      	mov	r3, r0
 801154a:	73fb      	strb	r3, [r7, #15]
      break;
 801154c:	e016      	b.n	801157c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011554:	4619      	mov	r1, r3
 8011556:	6878      	ldr	r0, [r7, #4]
 8011558:	f000 fab8 	bl	8011acc <USBD_StdEPReq>
 801155c:	4603      	mov	r3, r0
 801155e:	73fb      	strb	r3, [r7, #15]
      break;
 8011560:	e00c      	b.n	801157c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011568:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801156c:	b2db      	uxtb	r3, r3
 801156e:	4619      	mov	r1, r3
 8011570:	6878      	ldr	r0, [r7, #4]
 8011572:	f004 faaf 	bl	8015ad4 <USBD_LL_StallEP>
 8011576:	4603      	mov	r3, r0
 8011578:	73fb      	strb	r3, [r7, #15]
      break;
 801157a:	bf00      	nop
  }

  return ret;
 801157c:	7bfb      	ldrb	r3, [r7, #15]
}
 801157e:	4618      	mov	r0, r3
 8011580:	3710      	adds	r7, #16
 8011582:	46bd      	mov	sp, r7
 8011584:	bd80      	pop	{r7, pc}

08011586 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011586:	b580      	push	{r7, lr}
 8011588:	b086      	sub	sp, #24
 801158a:	af00      	add	r7, sp, #0
 801158c:	60f8      	str	r0, [r7, #12]
 801158e:	460b      	mov	r3, r1
 8011590:	607a      	str	r2, [r7, #4]
 8011592:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011594:	7afb      	ldrb	r3, [r7, #11]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d137      	bne.n	801160a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80115a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80115a8:	2b03      	cmp	r3, #3
 80115aa:	d14a      	bne.n	8011642 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80115ac:	693b      	ldr	r3, [r7, #16]
 80115ae:	689a      	ldr	r2, [r3, #8]
 80115b0:	693b      	ldr	r3, [r7, #16]
 80115b2:	68db      	ldr	r3, [r3, #12]
 80115b4:	429a      	cmp	r2, r3
 80115b6:	d913      	bls.n	80115e0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80115b8:	693b      	ldr	r3, [r7, #16]
 80115ba:	689a      	ldr	r2, [r3, #8]
 80115bc:	693b      	ldr	r3, [r7, #16]
 80115be:	68db      	ldr	r3, [r3, #12]
 80115c0:	1ad2      	subs	r2, r2, r3
 80115c2:	693b      	ldr	r3, [r7, #16]
 80115c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80115c6:	693b      	ldr	r3, [r7, #16]
 80115c8:	68da      	ldr	r2, [r3, #12]
 80115ca:	693b      	ldr	r3, [r7, #16]
 80115cc:	689b      	ldr	r3, [r3, #8]
 80115ce:	4293      	cmp	r3, r2
 80115d0:	bf28      	it	cs
 80115d2:	4613      	movcs	r3, r2
 80115d4:	461a      	mov	r2, r3
 80115d6:	6879      	ldr	r1, [r7, #4]
 80115d8:	68f8      	ldr	r0, [r7, #12]
 80115da:	f000 ffad 	bl	8012538 <USBD_CtlContinueRx>
 80115de:	e030      	b.n	8011642 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115e6:	691b      	ldr	r3, [r3, #16]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d00a      	beq.n	8011602 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80115f2:	2b03      	cmp	r3, #3
 80115f4:	d105      	bne.n	8011602 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115fc:	691b      	ldr	r3, [r3, #16]
 80115fe:	68f8      	ldr	r0, [r7, #12]
 8011600:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8011602:	68f8      	ldr	r0, [r7, #12]
 8011604:	f000 ffa9 	bl	801255a <USBD_CtlSendStatus>
 8011608:	e01b      	b.n	8011642 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011610:	699b      	ldr	r3, [r3, #24]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d013      	beq.n	801163e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 801161c:	2b03      	cmp	r3, #3
 801161e:	d10e      	bne.n	801163e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011626:	699b      	ldr	r3, [r3, #24]
 8011628:	7afa      	ldrb	r2, [r7, #11]
 801162a:	4611      	mov	r1, r2
 801162c:	68f8      	ldr	r0, [r7, #12]
 801162e:	4798      	blx	r3
 8011630:	4603      	mov	r3, r0
 8011632:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011634:	7dfb      	ldrb	r3, [r7, #23]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d003      	beq.n	8011642 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 801163a:	7dfb      	ldrb	r3, [r7, #23]
 801163c:	e002      	b.n	8011644 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801163e:	2303      	movs	r3, #3
 8011640:	e000      	b.n	8011644 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8011642:	2300      	movs	r3, #0
}
 8011644:	4618      	mov	r0, r3
 8011646:	3718      	adds	r7, #24
 8011648:	46bd      	mov	sp, r7
 801164a:	bd80      	pop	{r7, pc}

0801164c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b086      	sub	sp, #24
 8011650:	af00      	add	r7, sp, #0
 8011652:	60f8      	str	r0, [r7, #12]
 8011654:	460b      	mov	r3, r1
 8011656:	607a      	str	r2, [r7, #4]
 8011658:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801165a:	7afb      	ldrb	r3, [r7, #11]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d16a      	bne.n	8011736 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	3314      	adds	r3, #20
 8011664:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801166c:	2b02      	cmp	r3, #2
 801166e:	d155      	bne.n	801171c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8011670:	693b      	ldr	r3, [r7, #16]
 8011672:	689a      	ldr	r2, [r3, #8]
 8011674:	693b      	ldr	r3, [r7, #16]
 8011676:	68db      	ldr	r3, [r3, #12]
 8011678:	429a      	cmp	r2, r3
 801167a:	d914      	bls.n	80116a6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801167c:	693b      	ldr	r3, [r7, #16]
 801167e:	689a      	ldr	r2, [r3, #8]
 8011680:	693b      	ldr	r3, [r7, #16]
 8011682:	68db      	ldr	r3, [r3, #12]
 8011684:	1ad2      	subs	r2, r2, r3
 8011686:	693b      	ldr	r3, [r7, #16]
 8011688:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801168a:	693b      	ldr	r3, [r7, #16]
 801168c:	689b      	ldr	r3, [r3, #8]
 801168e:	461a      	mov	r2, r3
 8011690:	6879      	ldr	r1, [r7, #4]
 8011692:	68f8      	ldr	r0, [r7, #12]
 8011694:	f000 ff22 	bl	80124dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011698:	2300      	movs	r3, #0
 801169a:	2200      	movs	r2, #0
 801169c:	2100      	movs	r1, #0
 801169e:	68f8      	ldr	r0, [r7, #12]
 80116a0:	f004 fac2 	bl	8015c28 <USBD_LL_PrepareReceive>
 80116a4:	e03a      	b.n	801171c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80116a6:	693b      	ldr	r3, [r7, #16]
 80116a8:	68da      	ldr	r2, [r3, #12]
 80116aa:	693b      	ldr	r3, [r7, #16]
 80116ac:	689b      	ldr	r3, [r3, #8]
 80116ae:	429a      	cmp	r2, r3
 80116b0:	d11c      	bne.n	80116ec <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80116b2:	693b      	ldr	r3, [r7, #16]
 80116b4:	685a      	ldr	r2, [r3, #4]
 80116b6:	693b      	ldr	r3, [r7, #16]
 80116b8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d316      	bcc.n	80116ec <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80116be:	693b      	ldr	r3, [r7, #16]
 80116c0:	685a      	ldr	r2, [r3, #4]
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80116c8:	429a      	cmp	r2, r3
 80116ca:	d20f      	bcs.n	80116ec <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80116cc:	2200      	movs	r2, #0
 80116ce:	2100      	movs	r1, #0
 80116d0:	68f8      	ldr	r0, [r7, #12]
 80116d2:	f000 ff03 	bl	80124dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	2200      	movs	r2, #0
 80116da:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80116de:	2300      	movs	r3, #0
 80116e0:	2200      	movs	r2, #0
 80116e2:	2100      	movs	r1, #0
 80116e4:	68f8      	ldr	r0, [r7, #12]
 80116e6:	f004 fa9f 	bl	8015c28 <USBD_LL_PrepareReceive>
 80116ea:	e017      	b.n	801171c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116f2:	68db      	ldr	r3, [r3, #12]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d00a      	beq.n	801170e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80116fe:	2b03      	cmp	r3, #3
 8011700:	d105      	bne.n	801170e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011708:	68db      	ldr	r3, [r3, #12]
 801170a:	68f8      	ldr	r0, [r7, #12]
 801170c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801170e:	2180      	movs	r1, #128	; 0x80
 8011710:	68f8      	ldr	r0, [r7, #12]
 8011712:	f004 f9df 	bl	8015ad4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011716:	68f8      	ldr	r0, [r7, #12]
 8011718:	f000 ff32 	bl	8012580 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011722:	2b01      	cmp	r3, #1
 8011724:	d123      	bne.n	801176e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011726:	68f8      	ldr	r0, [r7, #12]
 8011728:	f7ff fe9b 	bl	8011462 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	2200      	movs	r2, #0
 8011730:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011734:	e01b      	b.n	801176e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801173c:	695b      	ldr	r3, [r3, #20]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d013      	beq.n	801176a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8011748:	2b03      	cmp	r3, #3
 801174a:	d10e      	bne.n	801176a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011752:	695b      	ldr	r3, [r3, #20]
 8011754:	7afa      	ldrb	r2, [r7, #11]
 8011756:	4611      	mov	r1, r2
 8011758:	68f8      	ldr	r0, [r7, #12]
 801175a:	4798      	blx	r3
 801175c:	4603      	mov	r3, r0
 801175e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011760:	7dfb      	ldrb	r3, [r7, #23]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d003      	beq.n	801176e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8011766:	7dfb      	ldrb	r3, [r7, #23]
 8011768:	e002      	b.n	8011770 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801176a:	2303      	movs	r3, #3
 801176c:	e000      	b.n	8011770 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 801176e:	2300      	movs	r3, #0
}
 8011770:	4618      	mov	r0, r3
 8011772:	3718      	adds	r7, #24
 8011774:	46bd      	mov	sp, r7
 8011776:	bd80      	pop	{r7, pc}

08011778 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b082      	sub	sp, #8
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	2201      	movs	r2, #1
 8011784:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2200      	movs	r2, #0
 801178c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	2200      	movs	r2, #0
 8011794:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	2200      	movs	r2, #0
 801179a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d009      	beq.n	80117bc <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117ae:	685b      	ldr	r3, [r3, #4]
 80117b0:	687a      	ldr	r2, [r7, #4]
 80117b2:	6852      	ldr	r2, [r2, #4]
 80117b4:	b2d2      	uxtb	r2, r2
 80117b6:	4611      	mov	r1, r2
 80117b8:	6878      	ldr	r0, [r7, #4]
 80117ba:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80117bc:	2340      	movs	r3, #64	; 0x40
 80117be:	2200      	movs	r2, #0
 80117c0:	2100      	movs	r1, #0
 80117c2:	6878      	ldr	r0, [r7, #4]
 80117c4:	f004 f941 	bl	8015a4a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	2201      	movs	r2, #1
 80117cc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	2240      	movs	r2, #64	; 0x40
 80117d4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80117d8:	2340      	movs	r3, #64	; 0x40
 80117da:	2200      	movs	r2, #0
 80117dc:	2180      	movs	r1, #128	; 0x80
 80117de:	6878      	ldr	r0, [r7, #4]
 80117e0:	f004 f933 	bl	8015a4a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2201      	movs	r2, #1
 80117e8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	2240      	movs	r2, #64	; 0x40
 80117ee:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80117f0:	2300      	movs	r3, #0
}
 80117f2:	4618      	mov	r0, r3
 80117f4:	3708      	adds	r7, #8
 80117f6:	46bd      	mov	sp, r7
 80117f8:	bd80      	pop	{r7, pc}

080117fa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80117fa:	b480      	push	{r7}
 80117fc:	b083      	sub	sp, #12
 80117fe:	af00      	add	r7, sp, #0
 8011800:	6078      	str	r0, [r7, #4]
 8011802:	460b      	mov	r3, r1
 8011804:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	78fa      	ldrb	r2, [r7, #3]
 801180a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801180c:	2300      	movs	r3, #0
}
 801180e:	4618      	mov	r0, r3
 8011810:	370c      	adds	r7, #12
 8011812:	46bd      	mov	sp, r7
 8011814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011818:	4770      	bx	lr

0801181a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801181a:	b480      	push	{r7}
 801181c:	b083      	sub	sp, #12
 801181e:	af00      	add	r7, sp, #0
 8011820:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	2204      	movs	r2, #4
 8011832:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011836:	2300      	movs	r3, #0
}
 8011838:	4618      	mov	r0, r3
 801183a:	370c      	adds	r7, #12
 801183c:	46bd      	mov	sp, r7
 801183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011842:	4770      	bx	lr

08011844 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011844:	b480      	push	{r7}
 8011846:	b083      	sub	sp, #12
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011852:	2b04      	cmp	r3, #4
 8011854:	d105      	bne.n	8011862 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011862:	2300      	movs	r3, #0
}
 8011864:	4618      	mov	r0, r3
 8011866:	370c      	adds	r7, #12
 8011868:	46bd      	mov	sp, r7
 801186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186e:	4770      	bx	lr

08011870 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b082      	sub	sp, #8
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801187e:	2b03      	cmp	r3, #3
 8011880:	d10b      	bne.n	801189a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011888:	69db      	ldr	r3, [r3, #28]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d005      	beq.n	801189a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011894:	69db      	ldr	r3, [r3, #28]
 8011896:	6878      	ldr	r0, [r7, #4]
 8011898:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801189a:	2300      	movs	r3, #0
}
 801189c:	4618      	mov	r0, r3
 801189e:	3708      	adds	r7, #8
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd80      	pop	{r7, pc}

080118a4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80118a4:	b480      	push	{r7}
 80118a6:	b083      	sub	sp, #12
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
 80118ac:	460b      	mov	r3, r1
 80118ae:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80118b0:	2300      	movs	r3, #0
}
 80118b2:	4618      	mov	r0, r3
 80118b4:	370c      	adds	r7, #12
 80118b6:	46bd      	mov	sp, r7
 80118b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118bc:	4770      	bx	lr

080118be <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80118be:	b480      	push	{r7}
 80118c0:	b083      	sub	sp, #12
 80118c2:	af00      	add	r7, sp, #0
 80118c4:	6078      	str	r0, [r7, #4]
 80118c6:	460b      	mov	r3, r1
 80118c8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80118ca:	2300      	movs	r3, #0
}
 80118cc:	4618      	mov	r0, r3
 80118ce:	370c      	adds	r7, #12
 80118d0:	46bd      	mov	sp, r7
 80118d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d6:	4770      	bx	lr

080118d8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80118d8:	b480      	push	{r7}
 80118da:	b083      	sub	sp, #12
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80118e0:	2300      	movs	r3, #0
}
 80118e2:	4618      	mov	r0, r3
 80118e4:	370c      	adds	r7, #12
 80118e6:	46bd      	mov	sp, r7
 80118e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ec:	4770      	bx	lr

080118ee <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80118ee:	b580      	push	{r7, lr}
 80118f0:	b082      	sub	sp, #8
 80118f2:	af00      	add	r7, sp, #0
 80118f4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	2201      	movs	r2, #1
 80118fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011904:	2b00      	cmp	r3, #0
 8011906:	d009      	beq.n	801191c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801190e:	685b      	ldr	r3, [r3, #4]
 8011910:	687a      	ldr	r2, [r7, #4]
 8011912:	6852      	ldr	r2, [r2, #4]
 8011914:	b2d2      	uxtb	r2, r2
 8011916:	4611      	mov	r1, r2
 8011918:	6878      	ldr	r0, [r7, #4]
 801191a:	4798      	blx	r3
  }

  return USBD_OK;
 801191c:	2300      	movs	r3, #0
}
 801191e:	4618      	mov	r0, r3
 8011920:	3708      	adds	r7, #8
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}

08011926 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011926:	b480      	push	{r7}
 8011928:	b087      	sub	sp, #28
 801192a:	af00      	add	r7, sp, #0
 801192c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011932:	697b      	ldr	r3, [r7, #20]
 8011934:	781b      	ldrb	r3, [r3, #0]
 8011936:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011938:	697b      	ldr	r3, [r7, #20]
 801193a:	3301      	adds	r3, #1
 801193c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801193e:	697b      	ldr	r3, [r7, #20]
 8011940:	781b      	ldrb	r3, [r3, #0]
 8011942:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011944:	8a3b      	ldrh	r3, [r7, #16]
 8011946:	021b      	lsls	r3, r3, #8
 8011948:	b21a      	sxth	r2, r3
 801194a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801194e:	4313      	orrs	r3, r2
 8011950:	b21b      	sxth	r3, r3
 8011952:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011954:	89fb      	ldrh	r3, [r7, #14]
}
 8011956:	4618      	mov	r0, r3
 8011958:	371c      	adds	r7, #28
 801195a:	46bd      	mov	sp, r7
 801195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011960:	4770      	bx	lr
	...

08011964 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b084      	sub	sp, #16
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
 801196c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801196e:	2300      	movs	r3, #0
 8011970:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	781b      	ldrb	r3, [r3, #0]
 8011976:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801197a:	2b20      	cmp	r3, #32
 801197c:	d004      	beq.n	8011988 <USBD_StdDevReq+0x24>
 801197e:	2b40      	cmp	r3, #64	; 0x40
 8011980:	d002      	beq.n	8011988 <USBD_StdDevReq+0x24>
 8011982:	2b00      	cmp	r3, #0
 8011984:	d00a      	beq.n	801199c <USBD_StdDevReq+0x38>
 8011986:	e050      	b.n	8011a2a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801198e:	689b      	ldr	r3, [r3, #8]
 8011990:	6839      	ldr	r1, [r7, #0]
 8011992:	6878      	ldr	r0, [r7, #4]
 8011994:	4798      	blx	r3
 8011996:	4603      	mov	r3, r0
 8011998:	73fb      	strb	r3, [r7, #15]
    break;
 801199a:	e04b      	b.n	8011a34 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801199c:	683b      	ldr	r3, [r7, #0]
 801199e:	785b      	ldrb	r3, [r3, #1]
 80119a0:	2b09      	cmp	r3, #9
 80119a2:	d83c      	bhi.n	8011a1e <USBD_StdDevReq+0xba>
 80119a4:	a201      	add	r2, pc, #4	; (adr r2, 80119ac <USBD_StdDevReq+0x48>)
 80119a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119aa:	bf00      	nop
 80119ac:	08011a01 	.word	0x08011a01
 80119b0:	08011a15 	.word	0x08011a15
 80119b4:	08011a1f 	.word	0x08011a1f
 80119b8:	08011a0b 	.word	0x08011a0b
 80119bc:	08011a1f 	.word	0x08011a1f
 80119c0:	080119df 	.word	0x080119df
 80119c4:	080119d5 	.word	0x080119d5
 80119c8:	08011a1f 	.word	0x08011a1f
 80119cc:	080119f7 	.word	0x080119f7
 80119d0:	080119e9 	.word	0x080119e9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80119d4:	6839      	ldr	r1, [r7, #0]
 80119d6:	6878      	ldr	r0, [r7, #4]
 80119d8:	f000 f9ce 	bl	8011d78 <USBD_GetDescriptor>
      break;
 80119dc:	e024      	b.n	8011a28 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80119de:	6839      	ldr	r1, [r7, #0]
 80119e0:	6878      	ldr	r0, [r7, #4]
 80119e2:	f000 fb33 	bl	801204c <USBD_SetAddress>
      break;
 80119e6:	e01f      	b.n	8011a28 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80119e8:	6839      	ldr	r1, [r7, #0]
 80119ea:	6878      	ldr	r0, [r7, #4]
 80119ec:	f000 fb70 	bl	80120d0 <USBD_SetConfig>
 80119f0:	4603      	mov	r3, r0
 80119f2:	73fb      	strb	r3, [r7, #15]
      break;
 80119f4:	e018      	b.n	8011a28 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80119f6:	6839      	ldr	r1, [r7, #0]
 80119f8:	6878      	ldr	r0, [r7, #4]
 80119fa:	f000 fc0d 	bl	8012218 <USBD_GetConfig>
      break;
 80119fe:	e013      	b.n	8011a28 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8011a00:	6839      	ldr	r1, [r7, #0]
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	f000 fc3c 	bl	8012280 <USBD_GetStatus>
      break;
 8011a08:	e00e      	b.n	8011a28 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8011a0a:	6839      	ldr	r1, [r7, #0]
 8011a0c:	6878      	ldr	r0, [r7, #4]
 8011a0e:	f000 fc6a 	bl	80122e6 <USBD_SetFeature>
      break;
 8011a12:	e009      	b.n	8011a28 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8011a14:	6839      	ldr	r1, [r7, #0]
 8011a16:	6878      	ldr	r0, [r7, #4]
 8011a18:	f000 fc79 	bl	801230e <USBD_ClrFeature>
      break;
 8011a1c:	e004      	b.n	8011a28 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8011a1e:	6839      	ldr	r1, [r7, #0]
 8011a20:	6878      	ldr	r0, [r7, #4]
 8011a22:	f000 fccf 	bl	80123c4 <USBD_CtlError>
      break;
 8011a26:	bf00      	nop
    }
    break;
 8011a28:	e004      	b.n	8011a34 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8011a2a:	6839      	ldr	r1, [r7, #0]
 8011a2c:	6878      	ldr	r0, [r7, #4]
 8011a2e:	f000 fcc9 	bl	80123c4 <USBD_CtlError>
    break;
 8011a32:	bf00      	nop
  }

  return ret;
 8011a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a36:	4618      	mov	r0, r3
 8011a38:	3710      	adds	r7, #16
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	bd80      	pop	{r7, pc}
 8011a3e:	bf00      	nop

08011a40 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b084      	sub	sp, #16
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	6078      	str	r0, [r7, #4]
 8011a48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011a4e:	683b      	ldr	r3, [r7, #0]
 8011a50:	781b      	ldrb	r3, [r3, #0]
 8011a52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011a56:	2b20      	cmp	r3, #32
 8011a58:	d003      	beq.n	8011a62 <USBD_StdItfReq+0x22>
 8011a5a:	2b40      	cmp	r3, #64	; 0x40
 8011a5c:	d001      	beq.n	8011a62 <USBD_StdItfReq+0x22>
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d12a      	bne.n	8011ab8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a68:	3b01      	subs	r3, #1
 8011a6a:	2b02      	cmp	r3, #2
 8011a6c:	d81d      	bhi.n	8011aaa <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011a6e:	683b      	ldr	r3, [r7, #0]
 8011a70:	889b      	ldrh	r3, [r3, #4]
 8011a72:	b2db      	uxtb	r3, r3
 8011a74:	2b01      	cmp	r3, #1
 8011a76:	d813      	bhi.n	8011aa0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a7e:	689b      	ldr	r3, [r3, #8]
 8011a80:	6839      	ldr	r1, [r7, #0]
 8011a82:	6878      	ldr	r0, [r7, #4]
 8011a84:	4798      	blx	r3
 8011a86:	4603      	mov	r3, r0
 8011a88:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8011a8a:	683b      	ldr	r3, [r7, #0]
 8011a8c:	88db      	ldrh	r3, [r3, #6]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d110      	bne.n	8011ab4 <USBD_StdItfReq+0x74>
 8011a92:	7bfb      	ldrb	r3, [r7, #15]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d10d      	bne.n	8011ab4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8011a98:	6878      	ldr	r0, [r7, #4]
 8011a9a:	f000 fd5e 	bl	801255a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8011a9e:	e009      	b.n	8011ab4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8011aa0:	6839      	ldr	r1, [r7, #0]
 8011aa2:	6878      	ldr	r0, [r7, #4]
 8011aa4:	f000 fc8e 	bl	80123c4 <USBD_CtlError>
      break;
 8011aa8:	e004      	b.n	8011ab4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8011aaa:	6839      	ldr	r1, [r7, #0]
 8011aac:	6878      	ldr	r0, [r7, #4]
 8011aae:	f000 fc89 	bl	80123c4 <USBD_CtlError>
      break;
 8011ab2:	e000      	b.n	8011ab6 <USBD_StdItfReq+0x76>
      break;
 8011ab4:	bf00      	nop
    }
    break;
 8011ab6:	e004      	b.n	8011ac2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8011ab8:	6839      	ldr	r1, [r7, #0]
 8011aba:	6878      	ldr	r0, [r7, #4]
 8011abc:	f000 fc82 	bl	80123c4 <USBD_CtlError>
    break;
 8011ac0:	bf00      	nop
  }

  return ret;
 8011ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	3710      	adds	r7, #16
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bd80      	pop	{r7, pc}

08011acc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b084      	sub	sp, #16
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
 8011ad4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8011ada:	683b      	ldr	r3, [r7, #0]
 8011adc:	889b      	ldrh	r3, [r3, #4]
 8011ade:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	781b      	ldrb	r3, [r3, #0]
 8011ae4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011ae8:	2b20      	cmp	r3, #32
 8011aea:	d004      	beq.n	8011af6 <USBD_StdEPReq+0x2a>
 8011aec:	2b40      	cmp	r3, #64	; 0x40
 8011aee:	d002      	beq.n	8011af6 <USBD_StdEPReq+0x2a>
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d00a      	beq.n	8011b0a <USBD_StdEPReq+0x3e>
 8011af4:	e135      	b.n	8011d62 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011afc:	689b      	ldr	r3, [r3, #8]
 8011afe:	6839      	ldr	r1, [r7, #0]
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	4798      	blx	r3
 8011b04:	4603      	mov	r3, r0
 8011b06:	73fb      	strb	r3, [r7, #15]
    break;
 8011b08:	e130      	b.n	8011d6c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	785b      	ldrb	r3, [r3, #1]
 8011b0e:	2b01      	cmp	r3, #1
 8011b10:	d03e      	beq.n	8011b90 <USBD_StdEPReq+0xc4>
 8011b12:	2b03      	cmp	r3, #3
 8011b14:	d002      	beq.n	8011b1c <USBD_StdEPReq+0x50>
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d077      	beq.n	8011c0a <USBD_StdEPReq+0x13e>
 8011b1a:	e11c      	b.n	8011d56 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b22:	2b02      	cmp	r3, #2
 8011b24:	d002      	beq.n	8011b2c <USBD_StdEPReq+0x60>
 8011b26:	2b03      	cmp	r3, #3
 8011b28:	d015      	beq.n	8011b56 <USBD_StdEPReq+0x8a>
 8011b2a:	e02b      	b.n	8011b84 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011b2c:	7bbb      	ldrb	r3, [r7, #14]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d00c      	beq.n	8011b4c <USBD_StdEPReq+0x80>
 8011b32:	7bbb      	ldrb	r3, [r7, #14]
 8011b34:	2b80      	cmp	r3, #128	; 0x80
 8011b36:	d009      	beq.n	8011b4c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011b38:	7bbb      	ldrb	r3, [r7, #14]
 8011b3a:	4619      	mov	r1, r3
 8011b3c:	6878      	ldr	r0, [r7, #4]
 8011b3e:	f003 ffc9 	bl	8015ad4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011b42:	2180      	movs	r1, #128	; 0x80
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	f003 ffc5 	bl	8015ad4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011b4a:	e020      	b.n	8011b8e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8011b4c:	6839      	ldr	r1, [r7, #0]
 8011b4e:	6878      	ldr	r0, [r7, #4]
 8011b50:	f000 fc38 	bl	80123c4 <USBD_CtlError>
        break;
 8011b54:	e01b      	b.n	8011b8e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011b56:	683b      	ldr	r3, [r7, #0]
 8011b58:	885b      	ldrh	r3, [r3, #2]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d10e      	bne.n	8011b7c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011b5e:	7bbb      	ldrb	r3, [r7, #14]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d00b      	beq.n	8011b7c <USBD_StdEPReq+0xb0>
 8011b64:	7bbb      	ldrb	r3, [r7, #14]
 8011b66:	2b80      	cmp	r3, #128	; 0x80
 8011b68:	d008      	beq.n	8011b7c <USBD_StdEPReq+0xb0>
 8011b6a:	683b      	ldr	r3, [r7, #0]
 8011b6c:	88db      	ldrh	r3, [r3, #6]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d104      	bne.n	8011b7c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8011b72:	7bbb      	ldrb	r3, [r7, #14]
 8011b74:	4619      	mov	r1, r3
 8011b76:	6878      	ldr	r0, [r7, #4]
 8011b78:	f003 ffac 	bl	8015ad4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8011b7c:	6878      	ldr	r0, [r7, #4]
 8011b7e:	f000 fcec 	bl	801255a <USBD_CtlSendStatus>

        break;
 8011b82:	e004      	b.n	8011b8e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8011b84:	6839      	ldr	r1, [r7, #0]
 8011b86:	6878      	ldr	r0, [r7, #4]
 8011b88:	f000 fc1c 	bl	80123c4 <USBD_CtlError>
        break;
 8011b8c:	bf00      	nop
      }
      break;
 8011b8e:	e0e7      	b.n	8011d60 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b96:	2b02      	cmp	r3, #2
 8011b98:	d002      	beq.n	8011ba0 <USBD_StdEPReq+0xd4>
 8011b9a:	2b03      	cmp	r3, #3
 8011b9c:	d015      	beq.n	8011bca <USBD_StdEPReq+0xfe>
 8011b9e:	e02d      	b.n	8011bfc <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011ba0:	7bbb      	ldrb	r3, [r7, #14]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d00c      	beq.n	8011bc0 <USBD_StdEPReq+0xf4>
 8011ba6:	7bbb      	ldrb	r3, [r7, #14]
 8011ba8:	2b80      	cmp	r3, #128	; 0x80
 8011baa:	d009      	beq.n	8011bc0 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011bac:	7bbb      	ldrb	r3, [r7, #14]
 8011bae:	4619      	mov	r1, r3
 8011bb0:	6878      	ldr	r0, [r7, #4]
 8011bb2:	f003 ff8f 	bl	8015ad4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011bb6:	2180      	movs	r1, #128	; 0x80
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	f003 ff8b 	bl	8015ad4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011bbe:	e023      	b.n	8011c08 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8011bc0:	6839      	ldr	r1, [r7, #0]
 8011bc2:	6878      	ldr	r0, [r7, #4]
 8011bc4:	f000 fbfe 	bl	80123c4 <USBD_CtlError>
        break;
 8011bc8:	e01e      	b.n	8011c08 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011bca:	683b      	ldr	r3, [r7, #0]
 8011bcc:	885b      	ldrh	r3, [r3, #2]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d119      	bne.n	8011c06 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8011bd2:	7bbb      	ldrb	r3, [r7, #14]
 8011bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d004      	beq.n	8011be6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011bdc:	7bbb      	ldrb	r3, [r7, #14]
 8011bde:	4619      	mov	r1, r3
 8011be0:	6878      	ldr	r0, [r7, #4]
 8011be2:	f003 ff96 	bl	8015b12 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8011be6:	6878      	ldr	r0, [r7, #4]
 8011be8:	f000 fcb7 	bl	801255a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bf2:	689b      	ldr	r3, [r3, #8]
 8011bf4:	6839      	ldr	r1, [r7, #0]
 8011bf6:	6878      	ldr	r0, [r7, #4]
 8011bf8:	4798      	blx	r3
        }
        break;
 8011bfa:	e004      	b.n	8011c06 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8011bfc:	6839      	ldr	r1, [r7, #0]
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	f000 fbe0 	bl	80123c4 <USBD_CtlError>
        break;
 8011c04:	e000      	b.n	8011c08 <USBD_StdEPReq+0x13c>
        break;
 8011c06:	bf00      	nop
      }
      break;
 8011c08:	e0aa      	b.n	8011d60 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c10:	2b02      	cmp	r3, #2
 8011c12:	d002      	beq.n	8011c1a <USBD_StdEPReq+0x14e>
 8011c14:	2b03      	cmp	r3, #3
 8011c16:	d032      	beq.n	8011c7e <USBD_StdEPReq+0x1b2>
 8011c18:	e097      	b.n	8011d4a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011c1a:	7bbb      	ldrb	r3, [r7, #14]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d007      	beq.n	8011c30 <USBD_StdEPReq+0x164>
 8011c20:	7bbb      	ldrb	r3, [r7, #14]
 8011c22:	2b80      	cmp	r3, #128	; 0x80
 8011c24:	d004      	beq.n	8011c30 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8011c26:	6839      	ldr	r1, [r7, #0]
 8011c28:	6878      	ldr	r0, [r7, #4]
 8011c2a:	f000 fbcb 	bl	80123c4 <USBD_CtlError>
          break;
 8011c2e:	e091      	b.n	8011d54 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011c30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	da0b      	bge.n	8011c50 <USBD_StdEPReq+0x184>
 8011c38:	7bbb      	ldrb	r3, [r7, #14]
 8011c3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011c3e:	4613      	mov	r3, r2
 8011c40:	009b      	lsls	r3, r3, #2
 8011c42:	4413      	add	r3, r2
 8011c44:	009b      	lsls	r3, r3, #2
 8011c46:	3310      	adds	r3, #16
 8011c48:	687a      	ldr	r2, [r7, #4]
 8011c4a:	4413      	add	r3, r2
 8011c4c:	3304      	adds	r3, #4
 8011c4e:	e00b      	b.n	8011c68 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011c50:	7bbb      	ldrb	r3, [r7, #14]
 8011c52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011c56:	4613      	mov	r3, r2
 8011c58:	009b      	lsls	r3, r3, #2
 8011c5a:	4413      	add	r3, r2
 8011c5c:	009b      	lsls	r3, r3, #2
 8011c5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011c62:	687a      	ldr	r2, [r7, #4]
 8011c64:	4413      	add	r3, r2
 8011c66:	3304      	adds	r3, #4
 8011c68:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	2202      	movs	r2, #2
 8011c74:	4619      	mov	r1, r3
 8011c76:	6878      	ldr	r0, [r7, #4]
 8011c78:	f000 fc15 	bl	80124a6 <USBD_CtlSendData>
        break;
 8011c7c:	e06a      	b.n	8011d54 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8011c7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	da11      	bge.n	8011caa <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011c86:	7bbb      	ldrb	r3, [r7, #14]
 8011c88:	f003 020f 	and.w	r2, r3, #15
 8011c8c:	6879      	ldr	r1, [r7, #4]
 8011c8e:	4613      	mov	r3, r2
 8011c90:	009b      	lsls	r3, r3, #2
 8011c92:	4413      	add	r3, r2
 8011c94:	009b      	lsls	r3, r3, #2
 8011c96:	440b      	add	r3, r1
 8011c98:	3324      	adds	r3, #36	; 0x24
 8011c9a:	881b      	ldrh	r3, [r3, #0]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d117      	bne.n	8011cd0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8011ca0:	6839      	ldr	r1, [r7, #0]
 8011ca2:	6878      	ldr	r0, [r7, #4]
 8011ca4:	f000 fb8e 	bl	80123c4 <USBD_CtlError>
            break;
 8011ca8:	e054      	b.n	8011d54 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011caa:	7bbb      	ldrb	r3, [r7, #14]
 8011cac:	f003 020f 	and.w	r2, r3, #15
 8011cb0:	6879      	ldr	r1, [r7, #4]
 8011cb2:	4613      	mov	r3, r2
 8011cb4:	009b      	lsls	r3, r3, #2
 8011cb6:	4413      	add	r3, r2
 8011cb8:	009b      	lsls	r3, r3, #2
 8011cba:	440b      	add	r3, r1
 8011cbc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011cc0:	881b      	ldrh	r3, [r3, #0]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d104      	bne.n	8011cd0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8011cc6:	6839      	ldr	r1, [r7, #0]
 8011cc8:	6878      	ldr	r0, [r7, #4]
 8011cca:	f000 fb7b 	bl	80123c4 <USBD_CtlError>
            break;
 8011cce:	e041      	b.n	8011d54 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011cd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	da0b      	bge.n	8011cf0 <USBD_StdEPReq+0x224>
 8011cd8:	7bbb      	ldrb	r3, [r7, #14]
 8011cda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011cde:	4613      	mov	r3, r2
 8011ce0:	009b      	lsls	r3, r3, #2
 8011ce2:	4413      	add	r3, r2
 8011ce4:	009b      	lsls	r3, r3, #2
 8011ce6:	3310      	adds	r3, #16
 8011ce8:	687a      	ldr	r2, [r7, #4]
 8011cea:	4413      	add	r3, r2
 8011cec:	3304      	adds	r3, #4
 8011cee:	e00b      	b.n	8011d08 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011cf0:	7bbb      	ldrb	r3, [r7, #14]
 8011cf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011cf6:	4613      	mov	r3, r2
 8011cf8:	009b      	lsls	r3, r3, #2
 8011cfa:	4413      	add	r3, r2
 8011cfc:	009b      	lsls	r3, r3, #2
 8011cfe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011d02:	687a      	ldr	r2, [r7, #4]
 8011d04:	4413      	add	r3, r2
 8011d06:	3304      	adds	r3, #4
 8011d08:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011d0a:	7bbb      	ldrb	r3, [r7, #14]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d002      	beq.n	8011d16 <USBD_StdEPReq+0x24a>
 8011d10:	7bbb      	ldrb	r3, [r7, #14]
 8011d12:	2b80      	cmp	r3, #128	; 0x80
 8011d14:	d103      	bne.n	8011d1e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8011d16:	68bb      	ldr	r3, [r7, #8]
 8011d18:	2200      	movs	r2, #0
 8011d1a:	601a      	str	r2, [r3, #0]
 8011d1c:	e00e      	b.n	8011d3c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011d1e:	7bbb      	ldrb	r3, [r7, #14]
 8011d20:	4619      	mov	r1, r3
 8011d22:	6878      	ldr	r0, [r7, #4]
 8011d24:	f003 ff14 	bl	8015b50 <USBD_LL_IsStallEP>
 8011d28:	4603      	mov	r3, r0
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d003      	beq.n	8011d36 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8011d2e:	68bb      	ldr	r3, [r7, #8]
 8011d30:	2201      	movs	r2, #1
 8011d32:	601a      	str	r2, [r3, #0]
 8011d34:	e002      	b.n	8011d3c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8011d36:	68bb      	ldr	r3, [r7, #8]
 8011d38:	2200      	movs	r2, #0
 8011d3a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011d3c:	68bb      	ldr	r3, [r7, #8]
 8011d3e:	2202      	movs	r2, #2
 8011d40:	4619      	mov	r1, r3
 8011d42:	6878      	ldr	r0, [r7, #4]
 8011d44:	f000 fbaf 	bl	80124a6 <USBD_CtlSendData>
          break;
 8011d48:	e004      	b.n	8011d54 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8011d4a:	6839      	ldr	r1, [r7, #0]
 8011d4c:	6878      	ldr	r0, [r7, #4]
 8011d4e:	f000 fb39 	bl	80123c4 <USBD_CtlError>
        break;
 8011d52:	bf00      	nop
      }
      break;
 8011d54:	e004      	b.n	8011d60 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8011d56:	6839      	ldr	r1, [r7, #0]
 8011d58:	6878      	ldr	r0, [r7, #4]
 8011d5a:	f000 fb33 	bl	80123c4 <USBD_CtlError>
      break;
 8011d5e:	bf00      	nop
    }
    break;
 8011d60:	e004      	b.n	8011d6c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8011d62:	6839      	ldr	r1, [r7, #0]
 8011d64:	6878      	ldr	r0, [r7, #4]
 8011d66:	f000 fb2d 	bl	80123c4 <USBD_CtlError>
    break;
 8011d6a:	bf00      	nop
  }

  return ret;
 8011d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d6e:	4618      	mov	r0, r3
 8011d70:	3710      	adds	r7, #16
 8011d72:	46bd      	mov	sp, r7
 8011d74:	bd80      	pop	{r7, pc}
	...

08011d78 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b084      	sub	sp, #16
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
 8011d80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011d82:	2300      	movs	r3, #0
 8011d84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011d86:	2300      	movs	r3, #0
 8011d88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011d8e:	683b      	ldr	r3, [r7, #0]
 8011d90:	885b      	ldrh	r3, [r3, #2]
 8011d92:	0a1b      	lsrs	r3, r3, #8
 8011d94:	b29b      	uxth	r3, r3
 8011d96:	3b01      	subs	r3, #1
 8011d98:	2b06      	cmp	r3, #6
 8011d9a:	f200 8128 	bhi.w	8011fee <USBD_GetDescriptor+0x276>
 8011d9e:	a201      	add	r2, pc, #4	; (adr r2, 8011da4 <USBD_GetDescriptor+0x2c>)
 8011da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011da4:	08011dc1 	.word	0x08011dc1
 8011da8:	08011dd9 	.word	0x08011dd9
 8011dac:	08011e19 	.word	0x08011e19
 8011db0:	08011fef 	.word	0x08011fef
 8011db4:	08011fef 	.word	0x08011fef
 8011db8:	08011f8f 	.word	0x08011f8f
 8011dbc:	08011fbb 	.word	0x08011fbb
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	687a      	ldr	r2, [r7, #4]
 8011dca:	7c12      	ldrb	r2, [r2, #16]
 8011dcc:	f107 0108 	add.w	r1, r7, #8
 8011dd0:	4610      	mov	r0, r2
 8011dd2:	4798      	blx	r3
 8011dd4:	60f8      	str	r0, [r7, #12]
    break;
 8011dd6:	e112      	b.n	8011ffe <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	7c1b      	ldrb	r3, [r3, #16]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d10d      	bne.n	8011dfc <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011de8:	f107 0208 	add.w	r2, r7, #8
 8011dec:	4610      	mov	r0, r2
 8011dee:	4798      	blx	r3
 8011df0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	3301      	adds	r3, #1
 8011df6:	2202      	movs	r2, #2
 8011df8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8011dfa:	e100      	b.n	8011ffe <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e04:	f107 0208 	add.w	r2, r7, #8
 8011e08:	4610      	mov	r0, r2
 8011e0a:	4798      	blx	r3
 8011e0c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	3301      	adds	r3, #1
 8011e12:	2202      	movs	r2, #2
 8011e14:	701a      	strb	r2, [r3, #0]
    break;
 8011e16:	e0f2      	b.n	8011ffe <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	885b      	ldrh	r3, [r3, #2]
 8011e1c:	b2db      	uxtb	r3, r3
 8011e1e:	2b05      	cmp	r3, #5
 8011e20:	f200 80ac 	bhi.w	8011f7c <USBD_GetDescriptor+0x204>
 8011e24:	a201      	add	r2, pc, #4	; (adr r2, 8011e2c <USBD_GetDescriptor+0xb4>)
 8011e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e2a:	bf00      	nop
 8011e2c:	08011e45 	.word	0x08011e45
 8011e30:	08011e79 	.word	0x08011e79
 8011e34:	08011ead 	.word	0x08011ead
 8011e38:	08011ee1 	.word	0x08011ee1
 8011e3c:	08011f15 	.word	0x08011f15
 8011e40:	08011f49 	.word	0x08011f49
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e4a:	685b      	ldr	r3, [r3, #4]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d00b      	beq.n	8011e68 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e56:	685b      	ldr	r3, [r3, #4]
 8011e58:	687a      	ldr	r2, [r7, #4]
 8011e5a:	7c12      	ldrb	r2, [r2, #16]
 8011e5c:	f107 0108 	add.w	r1, r7, #8
 8011e60:	4610      	mov	r0, r2
 8011e62:	4798      	blx	r3
 8011e64:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011e66:	e091      	b.n	8011f8c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011e68:	6839      	ldr	r1, [r7, #0]
 8011e6a:	6878      	ldr	r0, [r7, #4]
 8011e6c:	f000 faaa 	bl	80123c4 <USBD_CtlError>
        err++;
 8011e70:	7afb      	ldrb	r3, [r7, #11]
 8011e72:	3301      	adds	r3, #1
 8011e74:	72fb      	strb	r3, [r7, #11]
      break;
 8011e76:	e089      	b.n	8011f8c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e7e:	689b      	ldr	r3, [r3, #8]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d00b      	beq.n	8011e9c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e8a:	689b      	ldr	r3, [r3, #8]
 8011e8c:	687a      	ldr	r2, [r7, #4]
 8011e8e:	7c12      	ldrb	r2, [r2, #16]
 8011e90:	f107 0108 	add.w	r1, r7, #8
 8011e94:	4610      	mov	r0, r2
 8011e96:	4798      	blx	r3
 8011e98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011e9a:	e077      	b.n	8011f8c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011e9c:	6839      	ldr	r1, [r7, #0]
 8011e9e:	6878      	ldr	r0, [r7, #4]
 8011ea0:	f000 fa90 	bl	80123c4 <USBD_CtlError>
        err++;
 8011ea4:	7afb      	ldrb	r3, [r7, #11]
 8011ea6:	3301      	adds	r3, #1
 8011ea8:	72fb      	strb	r3, [r7, #11]
      break;
 8011eaa:	e06f      	b.n	8011f8c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011eb2:	68db      	ldr	r3, [r3, #12]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d00b      	beq.n	8011ed0 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ebe:	68db      	ldr	r3, [r3, #12]
 8011ec0:	687a      	ldr	r2, [r7, #4]
 8011ec2:	7c12      	ldrb	r2, [r2, #16]
 8011ec4:	f107 0108 	add.w	r1, r7, #8
 8011ec8:	4610      	mov	r0, r2
 8011eca:	4798      	blx	r3
 8011ecc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011ece:	e05d      	b.n	8011f8c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011ed0:	6839      	ldr	r1, [r7, #0]
 8011ed2:	6878      	ldr	r0, [r7, #4]
 8011ed4:	f000 fa76 	bl	80123c4 <USBD_CtlError>
        err++;
 8011ed8:	7afb      	ldrb	r3, [r7, #11]
 8011eda:	3301      	adds	r3, #1
 8011edc:	72fb      	strb	r3, [r7, #11]
      break;
 8011ede:	e055      	b.n	8011f8c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ee6:	691b      	ldr	r3, [r3, #16]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d00b      	beq.n	8011f04 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ef2:	691b      	ldr	r3, [r3, #16]
 8011ef4:	687a      	ldr	r2, [r7, #4]
 8011ef6:	7c12      	ldrb	r2, [r2, #16]
 8011ef8:	f107 0108 	add.w	r1, r7, #8
 8011efc:	4610      	mov	r0, r2
 8011efe:	4798      	blx	r3
 8011f00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011f02:	e043      	b.n	8011f8c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011f04:	6839      	ldr	r1, [r7, #0]
 8011f06:	6878      	ldr	r0, [r7, #4]
 8011f08:	f000 fa5c 	bl	80123c4 <USBD_CtlError>
        err++;
 8011f0c:	7afb      	ldrb	r3, [r7, #11]
 8011f0e:	3301      	adds	r3, #1
 8011f10:	72fb      	strb	r3, [r7, #11]
      break;
 8011f12:	e03b      	b.n	8011f8c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f1a:	695b      	ldr	r3, [r3, #20]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d00b      	beq.n	8011f38 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f26:	695b      	ldr	r3, [r3, #20]
 8011f28:	687a      	ldr	r2, [r7, #4]
 8011f2a:	7c12      	ldrb	r2, [r2, #16]
 8011f2c:	f107 0108 	add.w	r1, r7, #8
 8011f30:	4610      	mov	r0, r2
 8011f32:	4798      	blx	r3
 8011f34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011f36:	e029      	b.n	8011f8c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011f38:	6839      	ldr	r1, [r7, #0]
 8011f3a:	6878      	ldr	r0, [r7, #4]
 8011f3c:	f000 fa42 	bl	80123c4 <USBD_CtlError>
        err++;
 8011f40:	7afb      	ldrb	r3, [r7, #11]
 8011f42:	3301      	adds	r3, #1
 8011f44:	72fb      	strb	r3, [r7, #11]
      break;
 8011f46:	e021      	b.n	8011f8c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f4e:	699b      	ldr	r3, [r3, #24]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d00b      	beq.n	8011f6c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f5a:	699b      	ldr	r3, [r3, #24]
 8011f5c:	687a      	ldr	r2, [r7, #4]
 8011f5e:	7c12      	ldrb	r2, [r2, #16]
 8011f60:	f107 0108 	add.w	r1, r7, #8
 8011f64:	4610      	mov	r0, r2
 8011f66:	4798      	blx	r3
 8011f68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011f6a:	e00f      	b.n	8011f8c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011f6c:	6839      	ldr	r1, [r7, #0]
 8011f6e:	6878      	ldr	r0, [r7, #4]
 8011f70:	f000 fa28 	bl	80123c4 <USBD_CtlError>
        err++;
 8011f74:	7afb      	ldrb	r3, [r7, #11]
 8011f76:	3301      	adds	r3, #1
 8011f78:	72fb      	strb	r3, [r7, #11]
      break;
 8011f7a:	e007      	b.n	8011f8c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8011f7c:	6839      	ldr	r1, [r7, #0]
 8011f7e:	6878      	ldr	r0, [r7, #4]
 8011f80:	f000 fa20 	bl	80123c4 <USBD_CtlError>
      err++;
 8011f84:	7afb      	ldrb	r3, [r7, #11]
 8011f86:	3301      	adds	r3, #1
 8011f88:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8011f8a:	bf00      	nop
    }
    break;
 8011f8c:	e037      	b.n	8011ffe <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	7c1b      	ldrb	r3, [r3, #16]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d109      	bne.n	8011faa <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f9e:	f107 0208 	add.w	r2, r7, #8
 8011fa2:	4610      	mov	r0, r2
 8011fa4:	4798      	blx	r3
 8011fa6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011fa8:	e029      	b.n	8011ffe <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8011faa:	6839      	ldr	r1, [r7, #0]
 8011fac:	6878      	ldr	r0, [r7, #4]
 8011fae:	f000 fa09 	bl	80123c4 <USBD_CtlError>
      err++;
 8011fb2:	7afb      	ldrb	r3, [r7, #11]
 8011fb4:	3301      	adds	r3, #1
 8011fb6:	72fb      	strb	r3, [r7, #11]
    break;
 8011fb8:	e021      	b.n	8011ffe <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	7c1b      	ldrb	r3, [r3, #16]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d10d      	bne.n	8011fde <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fca:	f107 0208 	add.w	r2, r7, #8
 8011fce:	4610      	mov	r0, r2
 8011fd0:	4798      	blx	r3
 8011fd2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	3301      	adds	r3, #1
 8011fd8:	2207      	movs	r2, #7
 8011fda:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011fdc:	e00f      	b.n	8011ffe <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8011fde:	6839      	ldr	r1, [r7, #0]
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	f000 f9ef 	bl	80123c4 <USBD_CtlError>
      err++;
 8011fe6:	7afb      	ldrb	r3, [r7, #11]
 8011fe8:	3301      	adds	r3, #1
 8011fea:	72fb      	strb	r3, [r7, #11]
    break;
 8011fec:	e007      	b.n	8011ffe <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8011fee:	6839      	ldr	r1, [r7, #0]
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f000 f9e7 	bl	80123c4 <USBD_CtlError>
    err++;
 8011ff6:	7afb      	ldrb	r3, [r7, #11]
 8011ff8:	3301      	adds	r3, #1
 8011ffa:	72fb      	strb	r3, [r7, #11]
    break;
 8011ffc:	bf00      	nop
  }

  if (err != 0U)
 8011ffe:	7afb      	ldrb	r3, [r7, #11]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d11e      	bne.n	8012042 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8012004:	683b      	ldr	r3, [r7, #0]
 8012006:	88db      	ldrh	r3, [r3, #6]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d016      	beq.n	801203a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 801200c:	893b      	ldrh	r3, [r7, #8]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d00e      	beq.n	8012030 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8012012:	683b      	ldr	r3, [r7, #0]
 8012014:	88da      	ldrh	r2, [r3, #6]
 8012016:	893b      	ldrh	r3, [r7, #8]
 8012018:	4293      	cmp	r3, r2
 801201a:	bf28      	it	cs
 801201c:	4613      	movcs	r3, r2
 801201e:	b29b      	uxth	r3, r3
 8012020:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8012022:	893b      	ldrh	r3, [r7, #8]
 8012024:	461a      	mov	r2, r3
 8012026:	68f9      	ldr	r1, [r7, #12]
 8012028:	6878      	ldr	r0, [r7, #4]
 801202a:	f000 fa3c 	bl	80124a6 <USBD_CtlSendData>
 801202e:	e009      	b.n	8012044 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8012030:	6839      	ldr	r1, [r7, #0]
 8012032:	6878      	ldr	r0, [r7, #4]
 8012034:	f000 f9c6 	bl	80123c4 <USBD_CtlError>
 8012038:	e004      	b.n	8012044 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 801203a:	6878      	ldr	r0, [r7, #4]
 801203c:	f000 fa8d 	bl	801255a <USBD_CtlSendStatus>
 8012040:	e000      	b.n	8012044 <USBD_GetDescriptor+0x2cc>
    return;
 8012042:	bf00      	nop
    }
  }
}
 8012044:	3710      	adds	r7, #16
 8012046:	46bd      	mov	sp, r7
 8012048:	bd80      	pop	{r7, pc}
 801204a:	bf00      	nop

0801204c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b084      	sub	sp, #16
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
 8012054:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	889b      	ldrh	r3, [r3, #4]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d130      	bne.n	80120c0 <USBD_SetAddress+0x74>
 801205e:	683b      	ldr	r3, [r7, #0]
 8012060:	88db      	ldrh	r3, [r3, #6]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d12c      	bne.n	80120c0 <USBD_SetAddress+0x74>
 8012066:	683b      	ldr	r3, [r7, #0]
 8012068:	885b      	ldrh	r3, [r3, #2]
 801206a:	2b7f      	cmp	r3, #127	; 0x7f
 801206c:	d828      	bhi.n	80120c0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801206e:	683b      	ldr	r3, [r7, #0]
 8012070:	885b      	ldrh	r3, [r3, #2]
 8012072:	b2db      	uxtb	r3, r3
 8012074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012078:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012080:	2b03      	cmp	r3, #3
 8012082:	d104      	bne.n	801208e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8012084:	6839      	ldr	r1, [r7, #0]
 8012086:	6878      	ldr	r0, [r7, #4]
 8012088:	f000 f99c 	bl	80123c4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801208c:	e01c      	b.n	80120c8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	7bfa      	ldrb	r2, [r7, #15]
 8012092:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012096:	7bfb      	ldrb	r3, [r7, #15]
 8012098:	4619      	mov	r1, r3
 801209a:	6878      	ldr	r0, [r7, #4]
 801209c:	f003 fd84 	bl	8015ba8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80120a0:	6878      	ldr	r0, [r7, #4]
 80120a2:	f000 fa5a 	bl	801255a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80120a6:	7bfb      	ldrb	r3, [r7, #15]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d004      	beq.n	80120b6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	2202      	movs	r2, #2
 80120b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80120b4:	e008      	b.n	80120c8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	2201      	movs	r2, #1
 80120ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80120be:	e003      	b.n	80120c8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80120c0:	6839      	ldr	r1, [r7, #0]
 80120c2:	6878      	ldr	r0, [r7, #4]
 80120c4:	f000 f97e 	bl	80123c4 <USBD_CtlError>
  }
}
 80120c8:	bf00      	nop
 80120ca:	3710      	adds	r7, #16
 80120cc:	46bd      	mov	sp, r7
 80120ce:	bd80      	pop	{r7, pc}

080120d0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b084      	sub	sp, #16
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
 80120d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80120da:	2300      	movs	r3, #0
 80120dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80120de:	683b      	ldr	r3, [r7, #0]
 80120e0:	885b      	ldrh	r3, [r3, #2]
 80120e2:	b2da      	uxtb	r2, r3
 80120e4:	4b4b      	ldr	r3, [pc, #300]	; (8012214 <USBD_SetConfig+0x144>)
 80120e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80120e8:	4b4a      	ldr	r3, [pc, #296]	; (8012214 <USBD_SetConfig+0x144>)
 80120ea:	781b      	ldrb	r3, [r3, #0]
 80120ec:	2b01      	cmp	r3, #1
 80120ee:	d905      	bls.n	80120fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80120f0:	6839      	ldr	r1, [r7, #0]
 80120f2:	6878      	ldr	r0, [r7, #4]
 80120f4:	f000 f966 	bl	80123c4 <USBD_CtlError>
    return USBD_FAIL;
 80120f8:	2303      	movs	r3, #3
 80120fa:	e087      	b.n	801220c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012102:	2b02      	cmp	r3, #2
 8012104:	d002      	beq.n	801210c <USBD_SetConfig+0x3c>
 8012106:	2b03      	cmp	r3, #3
 8012108:	d025      	beq.n	8012156 <USBD_SetConfig+0x86>
 801210a:	e071      	b.n	80121f0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 801210c:	4b41      	ldr	r3, [pc, #260]	; (8012214 <USBD_SetConfig+0x144>)
 801210e:	781b      	ldrb	r3, [r3, #0]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d01c      	beq.n	801214e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8012114:	4b3f      	ldr	r3, [pc, #252]	; (8012214 <USBD_SetConfig+0x144>)
 8012116:	781b      	ldrb	r3, [r3, #0]
 8012118:	461a      	mov	r2, r3
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 801211e:	4b3d      	ldr	r3, [pc, #244]	; (8012214 <USBD_SetConfig+0x144>)
 8012120:	781b      	ldrb	r3, [r3, #0]
 8012122:	4619      	mov	r1, r3
 8012124:	6878      	ldr	r0, [r7, #4]
 8012126:	f7ff f9a7 	bl	8011478 <USBD_SetClassConfig>
 801212a:	4603      	mov	r3, r0
 801212c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 801212e:	7bfb      	ldrb	r3, [r7, #15]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d004      	beq.n	801213e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8012134:	6839      	ldr	r1, [r7, #0]
 8012136:	6878      	ldr	r0, [r7, #4]
 8012138:	f000 f944 	bl	80123c4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801213c:	e065      	b.n	801220a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 801213e:	6878      	ldr	r0, [r7, #4]
 8012140:	f000 fa0b 	bl	801255a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	2203      	movs	r2, #3
 8012148:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801214c:	e05d      	b.n	801220a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 801214e:	6878      	ldr	r0, [r7, #4]
 8012150:	f000 fa03 	bl	801255a <USBD_CtlSendStatus>
    break;
 8012154:	e059      	b.n	801220a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8012156:	4b2f      	ldr	r3, [pc, #188]	; (8012214 <USBD_SetConfig+0x144>)
 8012158:	781b      	ldrb	r3, [r3, #0]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d112      	bne.n	8012184 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	2202      	movs	r2, #2
 8012162:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8012166:	4b2b      	ldr	r3, [pc, #172]	; (8012214 <USBD_SetConfig+0x144>)
 8012168:	781b      	ldrb	r3, [r3, #0]
 801216a:	461a      	mov	r2, r3
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012170:	4b28      	ldr	r3, [pc, #160]	; (8012214 <USBD_SetConfig+0x144>)
 8012172:	781b      	ldrb	r3, [r3, #0]
 8012174:	4619      	mov	r1, r3
 8012176:	6878      	ldr	r0, [r7, #4]
 8012178:	f7ff f99a 	bl	80114b0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 801217c:	6878      	ldr	r0, [r7, #4]
 801217e:	f000 f9ec 	bl	801255a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8012182:	e042      	b.n	801220a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8012184:	4b23      	ldr	r3, [pc, #140]	; (8012214 <USBD_SetConfig+0x144>)
 8012186:	781b      	ldrb	r3, [r3, #0]
 8012188:	461a      	mov	r2, r3
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	685b      	ldr	r3, [r3, #4]
 801218e:	429a      	cmp	r2, r3
 8012190:	d02a      	beq.n	80121e8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	685b      	ldr	r3, [r3, #4]
 8012196:	b2db      	uxtb	r3, r3
 8012198:	4619      	mov	r1, r3
 801219a:	6878      	ldr	r0, [r7, #4]
 801219c:	f7ff f988 	bl	80114b0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80121a0:	4b1c      	ldr	r3, [pc, #112]	; (8012214 <USBD_SetConfig+0x144>)
 80121a2:	781b      	ldrb	r3, [r3, #0]
 80121a4:	461a      	mov	r2, r3
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80121aa:	4b1a      	ldr	r3, [pc, #104]	; (8012214 <USBD_SetConfig+0x144>)
 80121ac:	781b      	ldrb	r3, [r3, #0]
 80121ae:	4619      	mov	r1, r3
 80121b0:	6878      	ldr	r0, [r7, #4]
 80121b2:	f7ff f961 	bl	8011478 <USBD_SetClassConfig>
 80121b6:	4603      	mov	r3, r0
 80121b8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80121ba:	7bfb      	ldrb	r3, [r7, #15]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d00f      	beq.n	80121e0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80121c0:	6839      	ldr	r1, [r7, #0]
 80121c2:	6878      	ldr	r0, [r7, #4]
 80121c4:	f000 f8fe 	bl	80123c4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	685b      	ldr	r3, [r3, #4]
 80121cc:	b2db      	uxtb	r3, r3
 80121ce:	4619      	mov	r1, r3
 80121d0:	6878      	ldr	r0, [r7, #4]
 80121d2:	f7ff f96d 	bl	80114b0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	2202      	movs	r2, #2
 80121da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80121de:	e014      	b.n	801220a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80121e0:	6878      	ldr	r0, [r7, #4]
 80121e2:	f000 f9ba 	bl	801255a <USBD_CtlSendStatus>
    break;
 80121e6:	e010      	b.n	801220a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80121e8:	6878      	ldr	r0, [r7, #4]
 80121ea:	f000 f9b6 	bl	801255a <USBD_CtlSendStatus>
    break;
 80121ee:	e00c      	b.n	801220a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80121f0:	6839      	ldr	r1, [r7, #0]
 80121f2:	6878      	ldr	r0, [r7, #4]
 80121f4:	f000 f8e6 	bl	80123c4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80121f8:	4b06      	ldr	r3, [pc, #24]	; (8012214 <USBD_SetConfig+0x144>)
 80121fa:	781b      	ldrb	r3, [r3, #0]
 80121fc:	4619      	mov	r1, r3
 80121fe:	6878      	ldr	r0, [r7, #4]
 8012200:	f7ff f956 	bl	80114b0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8012204:	2303      	movs	r3, #3
 8012206:	73fb      	strb	r3, [r7, #15]
    break;
 8012208:	bf00      	nop
  }

  return ret;
 801220a:	7bfb      	ldrb	r3, [r7, #15]
}
 801220c:	4618      	mov	r0, r3
 801220e:	3710      	adds	r7, #16
 8012210:	46bd      	mov	sp, r7
 8012212:	bd80      	pop	{r7, pc}
 8012214:	20002860 	.word	0x20002860

08012218 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b082      	sub	sp, #8
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
 8012220:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012222:	683b      	ldr	r3, [r7, #0]
 8012224:	88db      	ldrh	r3, [r3, #6]
 8012226:	2b01      	cmp	r3, #1
 8012228:	d004      	beq.n	8012234 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801222a:	6839      	ldr	r1, [r7, #0]
 801222c:	6878      	ldr	r0, [r7, #4]
 801222e:	f000 f8c9 	bl	80123c4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8012232:	e021      	b.n	8012278 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801223a:	2b01      	cmp	r3, #1
 801223c:	db17      	blt.n	801226e <USBD_GetConfig+0x56>
 801223e:	2b02      	cmp	r3, #2
 8012240:	dd02      	ble.n	8012248 <USBD_GetConfig+0x30>
 8012242:	2b03      	cmp	r3, #3
 8012244:	d00b      	beq.n	801225e <USBD_GetConfig+0x46>
 8012246:	e012      	b.n	801226e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	2200      	movs	r2, #0
 801224c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	3308      	adds	r3, #8
 8012252:	2201      	movs	r2, #1
 8012254:	4619      	mov	r1, r3
 8012256:	6878      	ldr	r0, [r7, #4]
 8012258:	f000 f925 	bl	80124a6 <USBD_CtlSendData>
      break;
 801225c:	e00c      	b.n	8012278 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	3304      	adds	r3, #4
 8012262:	2201      	movs	r2, #1
 8012264:	4619      	mov	r1, r3
 8012266:	6878      	ldr	r0, [r7, #4]
 8012268:	f000 f91d 	bl	80124a6 <USBD_CtlSendData>
      break;
 801226c:	e004      	b.n	8012278 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 801226e:	6839      	ldr	r1, [r7, #0]
 8012270:	6878      	ldr	r0, [r7, #4]
 8012272:	f000 f8a7 	bl	80123c4 <USBD_CtlError>
      break;
 8012276:	bf00      	nop
}
 8012278:	bf00      	nop
 801227a:	3708      	adds	r7, #8
 801227c:	46bd      	mov	sp, r7
 801227e:	bd80      	pop	{r7, pc}

08012280 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b082      	sub	sp, #8
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
 8012288:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012290:	3b01      	subs	r3, #1
 8012292:	2b02      	cmp	r3, #2
 8012294:	d81e      	bhi.n	80122d4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8012296:	683b      	ldr	r3, [r7, #0]
 8012298:	88db      	ldrh	r3, [r3, #6]
 801229a:	2b02      	cmp	r3, #2
 801229c:	d004      	beq.n	80122a8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 801229e:	6839      	ldr	r1, [r7, #0]
 80122a0:	6878      	ldr	r0, [r7, #4]
 80122a2:	f000 f88f 	bl	80123c4 <USBD_CtlError>
      break;
 80122a6:	e01a      	b.n	80122de <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	2201      	movs	r2, #1
 80122ac:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d005      	beq.n	80122c4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	68db      	ldr	r3, [r3, #12]
 80122bc:	f043 0202 	orr.w	r2, r3, #2
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	330c      	adds	r3, #12
 80122c8:	2202      	movs	r2, #2
 80122ca:	4619      	mov	r1, r3
 80122cc:	6878      	ldr	r0, [r7, #4]
 80122ce:	f000 f8ea 	bl	80124a6 <USBD_CtlSendData>
    break;
 80122d2:	e004      	b.n	80122de <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80122d4:	6839      	ldr	r1, [r7, #0]
 80122d6:	6878      	ldr	r0, [r7, #4]
 80122d8:	f000 f874 	bl	80123c4 <USBD_CtlError>
    break;
 80122dc:	bf00      	nop
  }
}
 80122de:	bf00      	nop
 80122e0:	3708      	adds	r7, #8
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}

080122e6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122e6:	b580      	push	{r7, lr}
 80122e8:	b082      	sub	sp, #8
 80122ea:	af00      	add	r7, sp, #0
 80122ec:	6078      	str	r0, [r7, #4]
 80122ee:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	885b      	ldrh	r3, [r3, #2]
 80122f4:	2b01      	cmp	r3, #1
 80122f6:	d106      	bne.n	8012306 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	2201      	movs	r2, #1
 80122fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012300:	6878      	ldr	r0, [r7, #4]
 8012302:	f000 f92a 	bl	801255a <USBD_CtlSendStatus>
  }
}
 8012306:	bf00      	nop
 8012308:	3708      	adds	r7, #8
 801230a:	46bd      	mov	sp, r7
 801230c:	bd80      	pop	{r7, pc}

0801230e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801230e:	b580      	push	{r7, lr}
 8012310:	b082      	sub	sp, #8
 8012312:	af00      	add	r7, sp, #0
 8012314:	6078      	str	r0, [r7, #4]
 8012316:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801231e:	3b01      	subs	r3, #1
 8012320:	2b02      	cmp	r3, #2
 8012322:	d80b      	bhi.n	801233c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012324:	683b      	ldr	r3, [r7, #0]
 8012326:	885b      	ldrh	r3, [r3, #2]
 8012328:	2b01      	cmp	r3, #1
 801232a:	d10c      	bne.n	8012346 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	2200      	movs	r2, #0
 8012330:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012334:	6878      	ldr	r0, [r7, #4]
 8012336:	f000 f910 	bl	801255a <USBD_CtlSendStatus>
      }
      break;
 801233a:	e004      	b.n	8012346 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801233c:	6839      	ldr	r1, [r7, #0]
 801233e:	6878      	ldr	r0, [r7, #4]
 8012340:	f000 f840 	bl	80123c4 <USBD_CtlError>
      break;
 8012344:	e000      	b.n	8012348 <USBD_ClrFeature+0x3a>
      break;
 8012346:	bf00      	nop
  }
}
 8012348:	bf00      	nop
 801234a:	3708      	adds	r7, #8
 801234c:	46bd      	mov	sp, r7
 801234e:	bd80      	pop	{r7, pc}

08012350 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b084      	sub	sp, #16
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]
 8012358:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801235a:	683b      	ldr	r3, [r7, #0]
 801235c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	781a      	ldrb	r2, [r3, #0]
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	3301      	adds	r3, #1
 801236a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	781a      	ldrb	r2, [r3, #0]
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	3301      	adds	r3, #1
 8012378:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801237a:	68f8      	ldr	r0, [r7, #12]
 801237c:	f7ff fad3 	bl	8011926 <SWAPBYTE>
 8012380:	4603      	mov	r3, r0
 8012382:	461a      	mov	r2, r3
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	3301      	adds	r3, #1
 801238c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	3301      	adds	r3, #1
 8012392:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012394:	68f8      	ldr	r0, [r7, #12]
 8012396:	f7ff fac6 	bl	8011926 <SWAPBYTE>
 801239a:	4603      	mov	r3, r0
 801239c:	461a      	mov	r2, r3
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	3301      	adds	r3, #1
 80123a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	3301      	adds	r3, #1
 80123ac:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80123ae:	68f8      	ldr	r0, [r7, #12]
 80123b0:	f7ff fab9 	bl	8011926 <SWAPBYTE>
 80123b4:	4603      	mov	r3, r0
 80123b6:	461a      	mov	r2, r3
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	80da      	strh	r2, [r3, #6]
}
 80123bc:	bf00      	nop
 80123be:	3710      	adds	r7, #16
 80123c0:	46bd      	mov	sp, r7
 80123c2:	bd80      	pop	{r7, pc}

080123c4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80123c4:	b580      	push	{r7, lr}
 80123c6:	b082      	sub	sp, #8
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	6078      	str	r0, [r7, #4]
 80123cc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80123ce:	2180      	movs	r1, #128	; 0x80
 80123d0:	6878      	ldr	r0, [r7, #4]
 80123d2:	f003 fb7f 	bl	8015ad4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80123d6:	2100      	movs	r1, #0
 80123d8:	6878      	ldr	r0, [r7, #4]
 80123da:	f003 fb7b 	bl	8015ad4 <USBD_LL_StallEP>
}
 80123de:	bf00      	nop
 80123e0:	3708      	adds	r7, #8
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}

080123e6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80123e6:	b580      	push	{r7, lr}
 80123e8:	b086      	sub	sp, #24
 80123ea:	af00      	add	r7, sp, #0
 80123ec:	60f8      	str	r0, [r7, #12]
 80123ee:	60b9      	str	r1, [r7, #8]
 80123f0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80123f2:	2300      	movs	r3, #0
 80123f4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d036      	beq.n	801246a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012400:	6938      	ldr	r0, [r7, #16]
 8012402:	f000 f836 	bl	8012472 <USBD_GetLen>
 8012406:	4603      	mov	r3, r0
 8012408:	3301      	adds	r3, #1
 801240a:	b29b      	uxth	r3, r3
 801240c:	005b      	lsls	r3, r3, #1
 801240e:	b29a      	uxth	r2, r3
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012414:	7dfb      	ldrb	r3, [r7, #23]
 8012416:	68ba      	ldr	r2, [r7, #8]
 8012418:	4413      	add	r3, r2
 801241a:	687a      	ldr	r2, [r7, #4]
 801241c:	7812      	ldrb	r2, [r2, #0]
 801241e:	701a      	strb	r2, [r3, #0]
  idx++;
 8012420:	7dfb      	ldrb	r3, [r7, #23]
 8012422:	3301      	adds	r3, #1
 8012424:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012426:	7dfb      	ldrb	r3, [r7, #23]
 8012428:	68ba      	ldr	r2, [r7, #8]
 801242a:	4413      	add	r3, r2
 801242c:	2203      	movs	r2, #3
 801242e:	701a      	strb	r2, [r3, #0]
  idx++;
 8012430:	7dfb      	ldrb	r3, [r7, #23]
 8012432:	3301      	adds	r3, #1
 8012434:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012436:	e013      	b.n	8012460 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012438:	7dfb      	ldrb	r3, [r7, #23]
 801243a:	68ba      	ldr	r2, [r7, #8]
 801243c:	4413      	add	r3, r2
 801243e:	693a      	ldr	r2, [r7, #16]
 8012440:	7812      	ldrb	r2, [r2, #0]
 8012442:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012444:	693b      	ldr	r3, [r7, #16]
 8012446:	3301      	adds	r3, #1
 8012448:	613b      	str	r3, [r7, #16]
    idx++;
 801244a:	7dfb      	ldrb	r3, [r7, #23]
 801244c:	3301      	adds	r3, #1
 801244e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012450:	7dfb      	ldrb	r3, [r7, #23]
 8012452:	68ba      	ldr	r2, [r7, #8]
 8012454:	4413      	add	r3, r2
 8012456:	2200      	movs	r2, #0
 8012458:	701a      	strb	r2, [r3, #0]
    idx++;
 801245a:	7dfb      	ldrb	r3, [r7, #23]
 801245c:	3301      	adds	r3, #1
 801245e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012460:	693b      	ldr	r3, [r7, #16]
 8012462:	781b      	ldrb	r3, [r3, #0]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d1e7      	bne.n	8012438 <USBD_GetString+0x52>
 8012468:	e000      	b.n	801246c <USBD_GetString+0x86>
    return;
 801246a:	bf00      	nop
  }
}
 801246c:	3718      	adds	r7, #24
 801246e:	46bd      	mov	sp, r7
 8012470:	bd80      	pop	{r7, pc}

08012472 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012472:	b480      	push	{r7}
 8012474:	b085      	sub	sp, #20
 8012476:	af00      	add	r7, sp, #0
 8012478:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801247a:	2300      	movs	r3, #0
 801247c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012482:	e005      	b.n	8012490 <USBD_GetLen+0x1e>
  {
    len++;
 8012484:	7bfb      	ldrb	r3, [r7, #15]
 8012486:	3301      	adds	r3, #1
 8012488:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801248a:	68bb      	ldr	r3, [r7, #8]
 801248c:	3301      	adds	r3, #1
 801248e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012490:	68bb      	ldr	r3, [r7, #8]
 8012492:	781b      	ldrb	r3, [r3, #0]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d1f5      	bne.n	8012484 <USBD_GetLen+0x12>
  }

  return len;
 8012498:	7bfb      	ldrb	r3, [r7, #15]
}
 801249a:	4618      	mov	r0, r3
 801249c:	3714      	adds	r7, #20
 801249e:	46bd      	mov	sp, r7
 80124a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a4:	4770      	bx	lr

080124a6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80124a6:	b580      	push	{r7, lr}
 80124a8:	b084      	sub	sp, #16
 80124aa:	af00      	add	r7, sp, #0
 80124ac:	60f8      	str	r0, [r7, #12]
 80124ae:	60b9      	str	r1, [r7, #8]
 80124b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	2202      	movs	r2, #2
 80124b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	687a      	ldr	r2, [r7, #4]
 80124be:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	687a      	ldr	r2, [r7, #4]
 80124c4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	68ba      	ldr	r2, [r7, #8]
 80124ca:	2100      	movs	r1, #0
 80124cc:	68f8      	ldr	r0, [r7, #12]
 80124ce:	f003 fb8a 	bl	8015be6 <USBD_LL_Transmit>

  return USBD_OK;
 80124d2:	2300      	movs	r3, #0
}
 80124d4:	4618      	mov	r0, r3
 80124d6:	3710      	adds	r7, #16
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}

080124dc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b084      	sub	sp, #16
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	60f8      	str	r0, [r7, #12]
 80124e4:	60b9      	str	r1, [r7, #8]
 80124e6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	68ba      	ldr	r2, [r7, #8]
 80124ec:	2100      	movs	r1, #0
 80124ee:	68f8      	ldr	r0, [r7, #12]
 80124f0:	f003 fb79 	bl	8015be6 <USBD_LL_Transmit>

  return USBD_OK;
 80124f4:	2300      	movs	r3, #0
}
 80124f6:	4618      	mov	r0, r3
 80124f8:	3710      	adds	r7, #16
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}

080124fe <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80124fe:	b580      	push	{r7, lr}
 8012500:	b084      	sub	sp, #16
 8012502:	af00      	add	r7, sp, #0
 8012504:	60f8      	str	r0, [r7, #12]
 8012506:	60b9      	str	r1, [r7, #8]
 8012508:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	2203      	movs	r2, #3
 801250e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	687a      	ldr	r2, [r7, #4]
 8012516:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	687a      	ldr	r2, [r7, #4]
 801251e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	68ba      	ldr	r2, [r7, #8]
 8012526:	2100      	movs	r1, #0
 8012528:	68f8      	ldr	r0, [r7, #12]
 801252a:	f003 fb7d 	bl	8015c28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801252e:	2300      	movs	r3, #0
}
 8012530:	4618      	mov	r0, r3
 8012532:	3710      	adds	r7, #16
 8012534:	46bd      	mov	sp, r7
 8012536:	bd80      	pop	{r7, pc}

08012538 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b084      	sub	sp, #16
 801253c:	af00      	add	r7, sp, #0
 801253e:	60f8      	str	r0, [r7, #12]
 8012540:	60b9      	str	r1, [r7, #8]
 8012542:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	68ba      	ldr	r2, [r7, #8]
 8012548:	2100      	movs	r1, #0
 801254a:	68f8      	ldr	r0, [r7, #12]
 801254c:	f003 fb6c 	bl	8015c28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012550:	2300      	movs	r3, #0
}
 8012552:	4618      	mov	r0, r3
 8012554:	3710      	adds	r7, #16
 8012556:	46bd      	mov	sp, r7
 8012558:	bd80      	pop	{r7, pc}

0801255a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801255a:	b580      	push	{r7, lr}
 801255c:	b082      	sub	sp, #8
 801255e:	af00      	add	r7, sp, #0
 8012560:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	2204      	movs	r2, #4
 8012566:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801256a:	2300      	movs	r3, #0
 801256c:	2200      	movs	r2, #0
 801256e:	2100      	movs	r1, #0
 8012570:	6878      	ldr	r0, [r7, #4]
 8012572:	f003 fb38 	bl	8015be6 <USBD_LL_Transmit>

  return USBD_OK;
 8012576:	2300      	movs	r3, #0
}
 8012578:	4618      	mov	r0, r3
 801257a:	3708      	adds	r7, #8
 801257c:	46bd      	mov	sp, r7
 801257e:	bd80      	pop	{r7, pc}

08012580 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b082      	sub	sp, #8
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	2205      	movs	r2, #5
 801258c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012590:	2300      	movs	r3, #0
 8012592:	2200      	movs	r2, #0
 8012594:	2100      	movs	r1, #0
 8012596:	6878      	ldr	r0, [r7, #4]
 8012598:	f003 fb46 	bl	8015c28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801259c:	2300      	movs	r3, #0
}
 801259e:	4618      	mov	r0, r3
 80125a0:	3708      	adds	r7, #8
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}

080125a6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80125a6:	b480      	push	{r7}
 80125a8:	b085      	sub	sp, #20
 80125aa:	af00      	add	r7, sp, #0
 80125ac:	4603      	mov	r3, r0
 80125ae:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80125b0:	2300      	movs	r3, #0
 80125b2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80125b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80125b8:	2b84      	cmp	r3, #132	; 0x84
 80125ba:	d005      	beq.n	80125c8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80125bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	4413      	add	r3, r2
 80125c4:	3303      	adds	r3, #3
 80125c6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80125c8:	68fb      	ldr	r3, [r7, #12]
}
 80125ca:	4618      	mov	r0, r3
 80125cc:	3714      	adds	r7, #20
 80125ce:	46bd      	mov	sp, r7
 80125d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d4:	4770      	bx	lr

080125d6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80125d6:	b480      	push	{r7}
 80125d8:	b083      	sub	sp, #12
 80125da:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80125dc:	f3ef 8305 	mrs	r3, IPSR
 80125e0:	607b      	str	r3, [r7, #4]
  return(result);
 80125e2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	bf14      	ite	ne
 80125e8:	2301      	movne	r3, #1
 80125ea:	2300      	moveq	r3, #0
 80125ec:	b2db      	uxtb	r3, r3
}
 80125ee:	4618      	mov	r0, r3
 80125f0:	370c      	adds	r7, #12
 80125f2:	46bd      	mov	sp, r7
 80125f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f8:	4770      	bx	lr

080125fa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80125fa:	b580      	push	{r7, lr}
 80125fc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80125fe:	f001 fb31 	bl	8013c64 <vTaskStartScheduler>
  
  return osOK;
 8012602:	2300      	movs	r3, #0
}
 8012604:	4618      	mov	r0, r3
 8012606:	bd80      	pop	{r7, pc}

08012608 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012608:	b5f0      	push	{r4, r5, r6, r7, lr}
 801260a:	b089      	sub	sp, #36	; 0x24
 801260c:	af04      	add	r7, sp, #16
 801260e:	6078      	str	r0, [r7, #4]
 8012610:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	695b      	ldr	r3, [r3, #20]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d020      	beq.n	801265c <osThreadCreate+0x54>
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	699b      	ldr	r3, [r3, #24]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d01c      	beq.n	801265c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	685c      	ldr	r4, [r3, #4]
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	681d      	ldr	r5, [r3, #0]
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	691e      	ldr	r6, [r3, #16]
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012634:	4618      	mov	r0, r3
 8012636:	f7ff ffb6 	bl	80125a6 <makeFreeRtosPriority>
 801263a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	695b      	ldr	r3, [r3, #20]
 8012640:	687a      	ldr	r2, [r7, #4]
 8012642:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012644:	9202      	str	r2, [sp, #8]
 8012646:	9301      	str	r3, [sp, #4]
 8012648:	9100      	str	r1, [sp, #0]
 801264a:	683b      	ldr	r3, [r7, #0]
 801264c:	4632      	mov	r2, r6
 801264e:	4629      	mov	r1, r5
 8012650:	4620      	mov	r0, r4
 8012652:	f001 f944 	bl	80138de <xTaskCreateStatic>
 8012656:	4603      	mov	r3, r0
 8012658:	60fb      	str	r3, [r7, #12]
 801265a:	e01c      	b.n	8012696 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	685c      	ldr	r4, [r3, #4]
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012668:	b29e      	uxth	r6, r3
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012670:	4618      	mov	r0, r3
 8012672:	f7ff ff98 	bl	80125a6 <makeFreeRtosPriority>
 8012676:	4602      	mov	r2, r0
 8012678:	f107 030c 	add.w	r3, r7, #12
 801267c:	9301      	str	r3, [sp, #4]
 801267e:	9200      	str	r2, [sp, #0]
 8012680:	683b      	ldr	r3, [r7, #0]
 8012682:	4632      	mov	r2, r6
 8012684:	4629      	mov	r1, r5
 8012686:	4620      	mov	r0, r4
 8012688:	f001 f983 	bl	8013992 <xTaskCreate>
 801268c:	4603      	mov	r3, r0
 801268e:	2b01      	cmp	r3, #1
 8012690:	d001      	beq.n	8012696 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8012692:	2300      	movs	r3, #0
 8012694:	e000      	b.n	8012698 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8012696:	68fb      	ldr	r3, [r7, #12]
}
 8012698:	4618      	mov	r0, r3
 801269a:	3714      	adds	r7, #20
 801269c:	46bd      	mov	sp, r7
 801269e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080126a0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b084      	sub	sp, #16
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d001      	beq.n	80126b6 <osDelay+0x16>
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	e000      	b.n	80126b8 <osDelay+0x18>
 80126b6:	2301      	movs	r3, #1
 80126b8:	4618      	mov	r0, r3
 80126ba:	f001 fa9f 	bl	8013bfc <vTaskDelay>
  
  return osOK;
 80126be:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80126c0:	4618      	mov	r0, r3
 80126c2:	3710      	adds	r7, #16
 80126c4:	46bd      	mov	sp, r7
 80126c6:	bd80      	pop	{r7, pc}

080126c8 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b086      	sub	sp, #24
 80126cc:	af02      	add	r7, sp, #8
 80126ce:	6078      	str	r0, [r7, #4]
 80126d0:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80126d2:	2300      	movs	r3, #0
 80126d4:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80126d6:	2300      	movs	r3, #0
 80126d8:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80126da:	f7ff ff7c 	bl	80125d6 <inHandlerMode>
 80126de:	4603      	mov	r3, r0
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d01c      	beq.n	801271e <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80126e4:	6839      	ldr	r1, [r7, #0]
 80126e6:	f107 0208 	add.w	r2, r7, #8
 80126ea:	f107 030c 	add.w	r3, r7, #12
 80126ee:	9300      	str	r3, [sp, #0]
 80126f0:	4613      	mov	r3, r2
 80126f2:	2201      	movs	r2, #1
 80126f4:	6878      	ldr	r0, [r7, #4]
 80126f6:	f002 f857 	bl	80147a8 <xTaskGenericNotifyFromISR>
 80126fa:	4603      	mov	r3, r0
 80126fc:	2b01      	cmp	r3, #1
 80126fe:	d002      	beq.n	8012706 <osSignalSet+0x3e>
      return 0x80000000;
 8012700:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012704:	e019      	b.n	801273a <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d015      	beq.n	8012738 <osSignalSet+0x70>
 801270c:	4b0d      	ldr	r3, [pc, #52]	; (8012744 <osSignalSet+0x7c>)
 801270e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012712:	601a      	str	r2, [r3, #0]
 8012714:	f3bf 8f4f 	dsb	sy
 8012718:	f3bf 8f6f 	isb	sy
 801271c:	e00c      	b.n	8012738 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 801271e:	6839      	ldr	r1, [r7, #0]
 8012720:	f107 0308 	add.w	r3, r7, #8
 8012724:	2201      	movs	r2, #1
 8012726:	6878      	ldr	r0, [r7, #4]
 8012728:	f001 ff8c 	bl	8014644 <xTaskGenericNotify>
 801272c:	4603      	mov	r3, r0
 801272e:	2b01      	cmp	r3, #1
 8012730:	d002      	beq.n	8012738 <osSignalSet+0x70>
    return 0x80000000;
 8012732:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012736:	e000      	b.n	801273a <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8012738:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 801273a:	4618      	mov	r0, r3
 801273c:	3710      	adds	r7, #16
 801273e:	46bd      	mov	sp, r7
 8012740:	bd80      	pop	{r7, pc}
 8012742:	bf00      	nop
 8012744:	e000ed04 	.word	0xe000ed04

08012748 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8012748:	b590      	push	{r4, r7, lr}
 801274a:	b089      	sub	sp, #36	; 0x24
 801274c:	af00      	add	r7, sp, #0
 801274e:	60f8      	str	r0, [r7, #12]
 8012750:	60b9      	str	r1, [r7, #8]
 8012752:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8012754:	2300      	movs	r3, #0
 8012756:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8012758:	2300      	movs	r3, #0
 801275a:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012762:	d103      	bne.n	801276c <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8012764:	f04f 33ff 	mov.w	r3, #4294967295
 8012768:	61fb      	str	r3, [r7, #28]
 801276a:	e009      	b.n	8012780 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d006      	beq.n	8012780 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8012776:	69fb      	ldr	r3, [r7, #28]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d101      	bne.n	8012780 <osSignalWait+0x38>
      ticks = 1;
 801277c:	2301      	movs	r3, #1
 801277e:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8012780:	f7ff ff29 	bl	80125d6 <inHandlerMode>
 8012784:	4603      	mov	r3, r0
 8012786:	2b00      	cmp	r3, #0
 8012788:	d002      	beq.n	8012790 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 801278a:	2382      	movs	r3, #130	; 0x82
 801278c:	613b      	str	r3, [r7, #16]
 801278e:	e01b      	b.n	80127c8 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8012790:	68b9      	ldr	r1, [r7, #8]
 8012792:	f107 0310 	add.w	r3, r7, #16
 8012796:	1d1a      	adds	r2, r3, #4
 8012798:	69fb      	ldr	r3, [r7, #28]
 801279a:	2000      	movs	r0, #0
 801279c:	f001 fef8 	bl	8014590 <xTaskNotifyWait>
 80127a0:	4603      	mov	r3, r0
 80127a2:	2b01      	cmp	r3, #1
 80127a4:	d008      	beq.n	80127b8 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80127a6:	69fb      	ldr	r3, [r7, #28]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d102      	bne.n	80127b2 <osSignalWait+0x6a>
 80127ac:	2300      	movs	r3, #0
 80127ae:	613b      	str	r3, [r7, #16]
 80127b0:	e00a      	b.n	80127c8 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80127b2:	2340      	movs	r3, #64	; 0x40
 80127b4:	613b      	str	r3, [r7, #16]
 80127b6:	e007      	b.n	80127c8 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80127b8:	697b      	ldr	r3, [r7, #20]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	da02      	bge.n	80127c4 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80127be:	2386      	movs	r3, #134	; 0x86
 80127c0:	613b      	str	r3, [r7, #16]
 80127c2:	e001      	b.n	80127c8 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80127c4:	2308      	movs	r3, #8
 80127c6:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	461c      	mov	r4, r3
 80127cc:	f107 0310 	add.w	r3, r7, #16
 80127d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80127d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80127d8:	68f8      	ldr	r0, [r7, #12]
 80127da:	3724      	adds	r7, #36	; 0x24
 80127dc:	46bd      	mov	sp, r7
 80127de:	bd90      	pop	{r4, r7, pc}

080127e0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b082      	sub	sp, #8
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	685b      	ldr	r3, [r3, #4]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d007      	beq.n	8012800 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	685b      	ldr	r3, [r3, #4]
 80127f4:	4619      	mov	r1, r3
 80127f6:	2001      	movs	r0, #1
 80127f8:	f000 fc5f 	bl	80130ba <xQueueCreateMutexStatic>
 80127fc:	4603      	mov	r3, r0
 80127fe:	e003      	b.n	8012808 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8012800:	2001      	movs	r0, #1
 8012802:	f000 fc42 	bl	801308a <xQueueCreateMutex>
 8012806:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8012808:	4618      	mov	r0, r3
 801280a:	3708      	adds	r7, #8
 801280c:	46bd      	mov	sp, r7
 801280e:	bd80      	pop	{r7, pc}

08012810 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8012810:	b580      	push	{r7, lr}
 8012812:	b086      	sub	sp, #24
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	685b      	ldr	r3, [r3, #4]
 801281c:	3303      	adds	r3, #3
 801281e:	f023 0303 	bic.w	r3, r3, #3
 8012822:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8012824:	2014      	movs	r0, #20
 8012826:	f002 fb3b 	bl	8014ea0 <pvPortMalloc>
 801282a:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 801282c:	697b      	ldr	r3, [r7, #20]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d046      	beq.n	80128c0 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	681a      	ldr	r2, [r3, #0]
 8012836:	697b      	ldr	r3, [r7, #20]
 8012838:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 801283a:	68fa      	ldr	r2, [r7, #12]
 801283c:	697b      	ldr	r3, [r7, #20]
 801283e:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8012840:	697b      	ldr	r3, [r7, #20]
 8012842:	2200      	movs	r2, #0
 8012844:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	4618      	mov	r0, r3
 801284c:	f002 fb28 	bl	8014ea0 <pvPortMalloc>
 8012850:	4602      	mov	r2, r0
 8012852:	697b      	ldr	r3, [r7, #20]
 8012854:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8012856:	697b      	ldr	r3, [r7, #20]
 8012858:	685b      	ldr	r3, [r3, #4]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d02b      	beq.n	80128b6 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	68fa      	ldr	r2, [r7, #12]
 8012864:	fb02 f303 	mul.w	r3, r2, r3
 8012868:	4618      	mov	r0, r3
 801286a:	f002 fb19 	bl	8014ea0 <pvPortMalloc>
 801286e:	4602      	mov	r2, r0
 8012870:	697b      	ldr	r3, [r7, #20]
 8012872:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8012874:	697b      	ldr	r3, [r7, #20]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d011      	beq.n	80128a0 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 801287c:	2300      	movs	r3, #0
 801287e:	613b      	str	r3, [r7, #16]
 8012880:	e008      	b.n	8012894 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8012882:	697b      	ldr	r3, [r7, #20]
 8012884:	685a      	ldr	r2, [r3, #4]
 8012886:	693b      	ldr	r3, [r7, #16]
 8012888:	4413      	add	r3, r2
 801288a:	2200      	movs	r2, #0
 801288c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 801288e:	693b      	ldr	r3, [r7, #16]
 8012890:	3301      	adds	r3, #1
 8012892:	613b      	str	r3, [r7, #16]
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	693a      	ldr	r2, [r7, #16]
 801289a:	429a      	cmp	r2, r3
 801289c:	d3f1      	bcc.n	8012882 <osPoolCreate+0x72>
 801289e:	e00f      	b.n	80128c0 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80128a0:	697b      	ldr	r3, [r7, #20]
 80128a2:	685b      	ldr	r3, [r3, #4]
 80128a4:	4618      	mov	r0, r3
 80128a6:	f002 fbbd 	bl	8015024 <vPortFree>
        vPortFree(thePool);
 80128aa:	6978      	ldr	r0, [r7, #20]
 80128ac:	f002 fbba 	bl	8015024 <vPortFree>
        thePool = NULL;
 80128b0:	2300      	movs	r3, #0
 80128b2:	617b      	str	r3, [r7, #20]
 80128b4:	e004      	b.n	80128c0 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80128b6:	6978      	ldr	r0, [r7, #20]
 80128b8:	f002 fbb4 	bl	8015024 <vPortFree>
      thePool = NULL;
 80128bc:	2300      	movs	r3, #0
 80128be:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 80128c0:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 80128c2:	4618      	mov	r0, r3
 80128c4:	3718      	adds	r7, #24
 80128c6:	46bd      	mov	sp, r7
 80128c8:	bd80      	pop	{r7, pc}

080128ca <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 80128ca:	b580      	push	{r7, lr}
 80128cc:	b08a      	sub	sp, #40	; 0x28
 80128ce:	af00      	add	r7, sp, #0
 80128d0:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 80128d2:	2300      	movs	r3, #0
 80128d4:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 80128d6:	2300      	movs	r3, #0
 80128d8:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 80128da:	f7ff fe7c 	bl	80125d6 <inHandlerMode>
 80128de:	4603      	mov	r3, r0
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d00e      	beq.n	8012902 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80128e4:	f3ef 8211 	mrs	r2, BASEPRI
 80128e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128ec:	f383 8811 	msr	BASEPRI, r3
 80128f0:	f3bf 8f6f 	isb	sy
 80128f4:	f3bf 8f4f 	dsb	sy
 80128f8:	617a      	str	r2, [r7, #20]
 80128fa:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80128fc:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80128fe:	627b      	str	r3, [r7, #36]	; 0x24
 8012900:	e001      	b.n	8012906 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8012902:	f002 f9b3 	bl	8014c6c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8012906:	2300      	movs	r3, #0
 8012908:	61fb      	str	r3, [r7, #28]
 801290a:	e029      	b.n	8012960 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	691a      	ldr	r2, [r3, #16]
 8012910:	69fb      	ldr	r3, [r7, #28]
 8012912:	4413      	add	r3, r2
 8012914:	687a      	ldr	r2, [r7, #4]
 8012916:	6892      	ldr	r2, [r2, #8]
 8012918:	fbb3 f1f2 	udiv	r1, r3, r2
 801291c:	fb02 f201 	mul.w	r2, r2, r1
 8012920:	1a9b      	subs	r3, r3, r2
 8012922:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	685a      	ldr	r2, [r3, #4]
 8012928:	69bb      	ldr	r3, [r7, #24]
 801292a:	4413      	add	r3, r2
 801292c:	781b      	ldrb	r3, [r3, #0]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d113      	bne.n	801295a <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	685a      	ldr	r2, [r3, #4]
 8012936:	69bb      	ldr	r3, [r7, #24]
 8012938:	4413      	add	r3, r2
 801293a:	2201      	movs	r2, #1
 801293c:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	4619      	mov	r1, r3
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	68db      	ldr	r3, [r3, #12]
 8012948:	69ba      	ldr	r2, [r7, #24]
 801294a:	fb02 f303 	mul.w	r3, r2, r3
 801294e:	440b      	add	r3, r1
 8012950:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	69ba      	ldr	r2, [r7, #24]
 8012956:	611a      	str	r2, [r3, #16]
      break;
 8012958:	e007      	b.n	801296a <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 801295a:	69fb      	ldr	r3, [r7, #28]
 801295c:	3301      	adds	r3, #1
 801295e:	61fb      	str	r3, [r7, #28]
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	689b      	ldr	r3, [r3, #8]
 8012964:	69fa      	ldr	r2, [r7, #28]
 8012966:	429a      	cmp	r2, r3
 8012968:	d3d0      	bcc.n	801290c <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 801296a:	f7ff fe34 	bl	80125d6 <inHandlerMode>
 801296e:	4603      	mov	r3, r0
 8012970:	2b00      	cmp	r3, #0
 8012972:	d005      	beq.n	8012980 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8012974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012976:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	f383 8811 	msr	BASEPRI, r3
 801297e:	e001      	b.n	8012984 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8012980:	f002 f9a2 	bl	8014cc8 <vPortExitCritical>
  }
  
  return p;
 8012984:	6a3b      	ldr	r3, [r7, #32]
}
 8012986:	4618      	mov	r0, r3
 8012988:	3728      	adds	r7, #40	; 0x28
 801298a:	46bd      	mov	sp, r7
 801298c:	bd80      	pop	{r7, pc}

0801298e <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 801298e:	b480      	push	{r7}
 8012990:	b085      	sub	sp, #20
 8012992:	af00      	add	r7, sp, #0
 8012994:	6078      	str	r0, [r7, #4]
 8012996:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d101      	bne.n	80129a2 <osPoolFree+0x14>
    return osErrorParameter;
 801299e:	2380      	movs	r3, #128	; 0x80
 80129a0:	e030      	b.n	8012a04 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80129a2:	683b      	ldr	r3, [r7, #0]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d101      	bne.n	80129ac <osPoolFree+0x1e>
    return osErrorParameter;
 80129a8:	2380      	movs	r3, #128	; 0x80
 80129aa:	e02b      	b.n	8012a04 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	683a      	ldr	r2, [r7, #0]
 80129b2:	429a      	cmp	r2, r3
 80129b4:	d201      	bcs.n	80129ba <osPoolFree+0x2c>
    return osErrorParameter;
 80129b6:	2380      	movs	r3, #128	; 0x80
 80129b8:	e024      	b.n	8012a04 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80129ba:	683b      	ldr	r3, [r7, #0]
 80129bc:	687a      	ldr	r2, [r7, #4]
 80129be:	6812      	ldr	r2, [r2, #0]
 80129c0:	1a9b      	subs	r3, r3, r2
 80129c2:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	68da      	ldr	r2, [r3, #12]
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80129ce:	fb02 f201 	mul.w	r2, r2, r1
 80129d2:	1a9b      	subs	r3, r3, r2
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d001      	beq.n	80129dc <osPoolFree+0x4e>
    return osErrorParameter;
 80129d8:	2380      	movs	r3, #128	; 0x80
 80129da:	e013      	b.n	8012a04 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	68db      	ldr	r3, [r3, #12]
 80129e0:	68fa      	ldr	r2, [r7, #12]
 80129e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80129e6:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	689b      	ldr	r3, [r3, #8]
 80129ec:	68fa      	ldr	r2, [r7, #12]
 80129ee:	429a      	cmp	r2, r3
 80129f0:	d301      	bcc.n	80129f6 <osPoolFree+0x68>
    return osErrorParameter;
 80129f2:	2380      	movs	r3, #128	; 0x80
 80129f4:	e006      	b.n	8012a04 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	685a      	ldr	r2, [r3, #4]
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	4413      	add	r3, r2
 80129fe:	2200      	movs	r2, #0
 8012a00:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8012a02:	2300      	movs	r3, #0
}
 8012a04:	4618      	mov	r0, r3
 8012a06:	3714      	adds	r7, #20
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0e:	4770      	bx	lr

08012a10 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8012a10:	b590      	push	{r4, r7, lr}
 8012a12:	b087      	sub	sp, #28
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
 8012a18:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	60fb      	str	r3, [r7, #12]
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	685b      	ldr	r3, [r3, #4]
 8012a24:	613b      	str	r3, [r7, #16]
 8012a26:	2300      	movs	r3, #0
 8012a28:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	689c      	ldr	r4, [r3, #8]
 8012a2e:	200c      	movs	r0, #12
 8012a30:	f002 fa36 	bl	8014ea0 <pvPortMalloc>
 8012a34:	4603      	mov	r3, r0
 8012a36:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	689b      	ldr	r3, [r3, #8]
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d101      	bne.n	8012a46 <osMailCreate+0x36>
    return NULL;
 8012a42:	2300      	movs	r3, #0
 8012a44:	e038      	b.n	8012ab8 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	689b      	ldr	r3, [r3, #8]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	687a      	ldr	r2, [r7, #4]
 8012a4e:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	6818      	ldr	r0, [r3, #0]
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	689b      	ldr	r3, [r3, #8]
 8012a58:	681c      	ldr	r4, [r3, #0]
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	2104      	movs	r1, #4
 8012a5e:	f000 fa9c 	bl	8012f9a <xQueueGenericCreate>
 8012a62:	4603      	mov	r3, r0
 8012a64:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	689b      	ldr	r3, [r3, #8]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	685b      	ldr	r3, [r3, #4]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d107      	bne.n	8012a82 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	689b      	ldr	r3, [r3, #8]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	4618      	mov	r0, r3
 8012a7a:	f002 fad3 	bl	8015024 <vPortFree>
    return NULL;
 8012a7e:	2300      	movs	r3, #0
 8012a80:	e01a      	b.n	8012ab8 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	689b      	ldr	r3, [r3, #8]
 8012a86:	681c      	ldr	r4, [r3, #0]
 8012a88:	f107 030c 	add.w	r3, r7, #12
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	f7ff febf 	bl	8012810 <osPoolCreate>
 8012a92:	4603      	mov	r3, r0
 8012a94:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	689b      	ldr	r3, [r3, #8]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	689b      	ldr	r3, [r3, #8]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d107      	bne.n	8012ab2 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	689b      	ldr	r3, [r3, #8]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f002 fabb 	bl	8015024 <vPortFree>
    return NULL;
 8012aae:	2300      	movs	r3, #0
 8012ab0:	e002      	b.n	8012ab8 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	689b      	ldr	r3, [r3, #8]
 8012ab6:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8012ab8:	4618      	mov	r0, r3
 8012aba:	371c      	adds	r7, #28
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd90      	pop	{r4, r7, pc}

08012ac0 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	b084      	sub	sp, #16
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
 8012ac8:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d101      	bne.n	8012ad4 <osMailAlloc+0x14>
    return NULL;
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	e006      	b.n	8012ae2 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	689b      	ldr	r3, [r3, #8]
 8012ad8:	4618      	mov	r0, r3
 8012ada:	f7ff fef6 	bl	80128ca <osPoolAlloc>
 8012ade:	60f8      	str	r0, [r7, #12]
  
  return p;
 8012ae0:	68fb      	ldr	r3, [r7, #12]
}
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	3710      	adds	r7, #16
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	bd80      	pop	{r7, pc}
	...

08012aec <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b084      	sub	sp, #16
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
 8012af4:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d101      	bne.n	8012b00 <osMailPut+0x14>
    return osErrorParameter;
 8012afc:	2380      	movs	r3, #128	; 0x80
 8012afe:	e02c      	b.n	8012b5a <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8012b00:	2300      	movs	r3, #0
 8012b02:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8012b04:	f7ff fd67 	bl	80125d6 <inHandlerMode>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d018      	beq.n	8012b40 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	6858      	ldr	r0, [r3, #4]
 8012b12:	f107 020c 	add.w	r2, r7, #12
 8012b16:	4639      	mov	r1, r7
 8012b18:	2300      	movs	r3, #0
 8012b1a:	f000 fbe3 	bl	80132e4 <xQueueGenericSendFromISR>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	2b01      	cmp	r3, #1
 8012b22:	d001      	beq.n	8012b28 <osMailPut+0x3c>
      return osErrorOS;
 8012b24:	23ff      	movs	r3, #255	; 0xff
 8012b26:	e018      	b.n	8012b5a <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d014      	beq.n	8012b58 <osMailPut+0x6c>
 8012b2e:	4b0d      	ldr	r3, [pc, #52]	; (8012b64 <osMailPut+0x78>)
 8012b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b34:	601a      	str	r2, [r3, #0]
 8012b36:	f3bf 8f4f 	dsb	sy
 8012b3a:	f3bf 8f6f 	isb	sy
 8012b3e:	e00b      	b.n	8012b58 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	6858      	ldr	r0, [r3, #4]
 8012b44:	4639      	mov	r1, r7
 8012b46:	2300      	movs	r3, #0
 8012b48:	2200      	movs	r2, #0
 8012b4a:	f000 fad1 	bl	80130f0 <xQueueGenericSend>
 8012b4e:	4603      	mov	r3, r0
 8012b50:	2b01      	cmp	r3, #1
 8012b52:	d001      	beq.n	8012b58 <osMailPut+0x6c>
      return osErrorOS;
 8012b54:	23ff      	movs	r3, #255	; 0xff
 8012b56:	e000      	b.n	8012b5a <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8012b58:	2300      	movs	r3, #0
}
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	3710      	adds	r7, #16
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	bd80      	pop	{r7, pc}
 8012b62:	bf00      	nop
 8012b64:	e000ed04 	.word	0xe000ed04

08012b68 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8012b68:	b590      	push	{r4, r7, lr}
 8012b6a:	b08b      	sub	sp, #44	; 0x2c
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	60f8      	str	r0, [r7, #12]
 8012b70:	60b9      	str	r1, [r7, #8]
 8012b72:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8012b74:	68bb      	ldr	r3, [r7, #8]
 8012b76:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8012b78:	68bb      	ldr	r3, [r7, #8]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d10a      	bne.n	8012b94 <osMailGet+0x2c>
    event.status = osErrorParameter;
 8012b7e:	2380      	movs	r3, #128	; 0x80
 8012b80:	617b      	str	r3, [r7, #20]
    return event;
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	461c      	mov	r4, r3
 8012b86:	f107 0314 	add.w	r3, r7, #20
 8012b8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012b8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012b92:	e056      	b.n	8012c42 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8012b94:	2300      	movs	r3, #0
 8012b96:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012b98:	2300      	movs	r3, #0
 8012b9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ba2:	d103      	bne.n	8012bac <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8012ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8012baa:	e009      	b.n	8012bc0 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d006      	beq.n	8012bc0 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8012bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d101      	bne.n	8012bc0 <osMailGet+0x58>
      ticks = 1;
 8012bbc:	2301      	movs	r3, #1
 8012bbe:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012bc0:	f7ff fd09 	bl	80125d6 <inHandlerMode>
 8012bc4:	4603      	mov	r3, r0
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d01d      	beq.n	8012c06 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8012bca:	68bb      	ldr	r3, [r7, #8]
 8012bcc:	6858      	ldr	r0, [r3, #4]
 8012bce:	f107 0220 	add.w	r2, r7, #32
 8012bd2:	f107 0314 	add.w	r3, r7, #20
 8012bd6:	3304      	adds	r3, #4
 8012bd8:	4619      	mov	r1, r3
 8012bda:	f000 fcf3 	bl	80135c4 <xQueueReceiveFromISR>
 8012bde:	4603      	mov	r3, r0
 8012be0:	2b01      	cmp	r3, #1
 8012be2:	d102      	bne.n	8012bea <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8012be4:	2320      	movs	r3, #32
 8012be6:	617b      	str	r3, [r7, #20]
 8012be8:	e001      	b.n	8012bee <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8012bea:	2300      	movs	r3, #0
 8012bec:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012bee:	6a3b      	ldr	r3, [r7, #32]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d01e      	beq.n	8012c32 <osMailGet+0xca>
 8012bf4:	4b15      	ldr	r3, [pc, #84]	; (8012c4c <osMailGet+0xe4>)
 8012bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bfa:	601a      	str	r2, [r3, #0]
 8012bfc:	f3bf 8f4f 	dsb	sy
 8012c00:	f3bf 8f6f 	isb	sy
 8012c04:	e015      	b.n	8012c32 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8012c06:	68bb      	ldr	r3, [r7, #8]
 8012c08:	6858      	ldr	r0, [r3, #4]
 8012c0a:	f107 0314 	add.w	r3, r7, #20
 8012c0e:	3304      	adds	r3, #4
 8012c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c12:	4619      	mov	r1, r3
 8012c14:	f000 fbfa 	bl	801340c <xQueueReceive>
 8012c18:	4603      	mov	r3, r0
 8012c1a:	2b01      	cmp	r3, #1
 8012c1c:	d102      	bne.n	8012c24 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8012c1e:	2320      	movs	r3, #32
 8012c20:	617b      	str	r3, [r7, #20]
 8012c22:	e006      	b.n	8012c32 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d101      	bne.n	8012c2e <osMailGet+0xc6>
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	e000      	b.n	8012c30 <osMailGet+0xc8>
 8012c2e:	2340      	movs	r3, #64	; 0x40
 8012c30:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	461c      	mov	r4, r3
 8012c36:	f107 0314 	add.w	r3, r7, #20
 8012c3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012c3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012c42:	68f8      	ldr	r0, [r7, #12]
 8012c44:	372c      	adds	r7, #44	; 0x2c
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bd90      	pop	{r4, r7, pc}
 8012c4a:	bf00      	nop
 8012c4c:	e000ed04 	.word	0xe000ed04

08012c50 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8012c50:	b580      	push	{r7, lr}
 8012c52:	b082      	sub	sp, #8
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	6078      	str	r0, [r7, #4]
 8012c58:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d101      	bne.n	8012c64 <osMailFree+0x14>
    return osErrorParameter;
 8012c60:	2380      	movs	r3, #128	; 0x80
 8012c62:	e006      	b.n	8012c72 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	689b      	ldr	r3, [r3, #8]
 8012c68:	6839      	ldr	r1, [r7, #0]
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	f7ff fe8f 	bl	801298e <osPoolFree>
 8012c70:	4603      	mov	r3, r0
}
 8012c72:	4618      	mov	r0, r3
 8012c74:	3708      	adds	r7, #8
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd80      	pop	{r7, pc}

08012c7a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012c7a:	b480      	push	{r7}
 8012c7c:	b083      	sub	sp, #12
 8012c7e:	af00      	add	r7, sp, #0
 8012c80:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	f103 0208 	add.w	r2, r3, #8
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8012c92:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	f103 0208 	add.w	r2, r3, #8
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	f103 0208 	add.w	r2, r3, #8
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	2200      	movs	r2, #0
 8012cac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012cae:	bf00      	nop
 8012cb0:	370c      	adds	r7, #12
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb8:	4770      	bx	lr

08012cba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012cba:	b480      	push	{r7}
 8012cbc:	b083      	sub	sp, #12
 8012cbe:	af00      	add	r7, sp, #0
 8012cc0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	2200      	movs	r2, #0
 8012cc6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012cc8:	bf00      	nop
 8012cca:	370c      	adds	r7, #12
 8012ccc:	46bd      	mov	sp, r7
 8012cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd2:	4770      	bx	lr

08012cd4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012cd4:	b480      	push	{r7}
 8012cd6:	b085      	sub	sp, #20
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
 8012cdc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	685b      	ldr	r3, [r3, #4]
 8012ce2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012ce4:	683b      	ldr	r3, [r7, #0]
 8012ce6:	68fa      	ldr	r2, [r7, #12]
 8012ce8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	689a      	ldr	r2, [r3, #8]
 8012cee:	683b      	ldr	r3, [r7, #0]
 8012cf0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	689b      	ldr	r3, [r3, #8]
 8012cf6:	683a      	ldr	r2, [r7, #0]
 8012cf8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	683a      	ldr	r2, [r7, #0]
 8012cfe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012d00:	683b      	ldr	r3, [r7, #0]
 8012d02:	687a      	ldr	r2, [r7, #4]
 8012d04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	1c5a      	adds	r2, r3, #1
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	601a      	str	r2, [r3, #0]
}
 8012d10:	bf00      	nop
 8012d12:	3714      	adds	r7, #20
 8012d14:	46bd      	mov	sp, r7
 8012d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1a:	4770      	bx	lr

08012d1c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012d1c:	b480      	push	{r7}
 8012d1e:	b085      	sub	sp, #20
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
 8012d24:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012d26:	683b      	ldr	r3, [r7, #0]
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012d2c:	68bb      	ldr	r3, [r7, #8]
 8012d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d32:	d103      	bne.n	8012d3c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	691b      	ldr	r3, [r3, #16]
 8012d38:	60fb      	str	r3, [r7, #12]
 8012d3a:	e00c      	b.n	8012d56 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	3308      	adds	r3, #8
 8012d40:	60fb      	str	r3, [r7, #12]
 8012d42:	e002      	b.n	8012d4a <vListInsert+0x2e>
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	685b      	ldr	r3, [r3, #4]
 8012d48:	60fb      	str	r3, [r7, #12]
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	685b      	ldr	r3, [r3, #4]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	68ba      	ldr	r2, [r7, #8]
 8012d52:	429a      	cmp	r2, r3
 8012d54:	d2f6      	bcs.n	8012d44 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	685a      	ldr	r2, [r3, #4]
 8012d5a:	683b      	ldr	r3, [r7, #0]
 8012d5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012d5e:	683b      	ldr	r3, [r7, #0]
 8012d60:	685b      	ldr	r3, [r3, #4]
 8012d62:	683a      	ldr	r2, [r7, #0]
 8012d64:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012d66:	683b      	ldr	r3, [r7, #0]
 8012d68:	68fa      	ldr	r2, [r7, #12]
 8012d6a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	683a      	ldr	r2, [r7, #0]
 8012d70:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012d72:	683b      	ldr	r3, [r7, #0]
 8012d74:	687a      	ldr	r2, [r7, #4]
 8012d76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	1c5a      	adds	r2, r3, #1
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	601a      	str	r2, [r3, #0]
}
 8012d82:	bf00      	nop
 8012d84:	3714      	adds	r7, #20
 8012d86:	46bd      	mov	sp, r7
 8012d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8c:	4770      	bx	lr

08012d8e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012d8e:	b480      	push	{r7}
 8012d90:	b085      	sub	sp, #20
 8012d92:	af00      	add	r7, sp, #0
 8012d94:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	691b      	ldr	r3, [r3, #16]
 8012d9a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	685b      	ldr	r3, [r3, #4]
 8012da0:	687a      	ldr	r2, [r7, #4]
 8012da2:	6892      	ldr	r2, [r2, #8]
 8012da4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	689b      	ldr	r3, [r3, #8]
 8012daa:	687a      	ldr	r2, [r7, #4]
 8012dac:	6852      	ldr	r2, [r2, #4]
 8012dae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	685b      	ldr	r3, [r3, #4]
 8012db4:	687a      	ldr	r2, [r7, #4]
 8012db6:	429a      	cmp	r2, r3
 8012db8:	d103      	bne.n	8012dc2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	689a      	ldr	r2, [r3, #8]
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	1e5a      	subs	r2, r3, #1
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	681b      	ldr	r3, [r3, #0]
}
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	3714      	adds	r7, #20
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de0:	4770      	bx	lr
	...

08012de4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b084      	sub	sp, #16
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
 8012dec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d109      	bne.n	8012e0c <xQueueGenericReset+0x28>
	__asm volatile
 8012df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dfc:	f383 8811 	msr	BASEPRI, r3
 8012e00:	f3bf 8f6f 	isb	sy
 8012e04:	f3bf 8f4f 	dsb	sy
 8012e08:	60bb      	str	r3, [r7, #8]
 8012e0a:	e7fe      	b.n	8012e0a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8012e0c:	f001 ff2e 	bl	8014c6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	681a      	ldr	r2, [r3, #0]
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e18:	68f9      	ldr	r1, [r7, #12]
 8012e1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012e1c:	fb01 f303 	mul.w	r3, r1, r3
 8012e20:	441a      	add	r2, r3
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	2200      	movs	r2, #0
 8012e2a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	681a      	ldr	r2, [r3, #0]
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	681a      	ldr	r2, [r3, #0]
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e3c:	3b01      	subs	r3, #1
 8012e3e:	68f9      	ldr	r1, [r7, #12]
 8012e40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012e42:	fb01 f303 	mul.w	r3, r1, r3
 8012e46:	441a      	add	r2, r3
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	22ff      	movs	r2, #255	; 0xff
 8012e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	22ff      	movs	r2, #255	; 0xff
 8012e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012e5c:	683b      	ldr	r3, [r7, #0]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d114      	bne.n	8012e8c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	691b      	ldr	r3, [r3, #16]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d01a      	beq.n	8012ea0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	3310      	adds	r3, #16
 8012e6e:	4618      	mov	r0, r3
 8012e70:	f001 f936 	bl	80140e0 <xTaskRemoveFromEventList>
 8012e74:	4603      	mov	r3, r0
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d012      	beq.n	8012ea0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012e7a:	4b0d      	ldr	r3, [pc, #52]	; (8012eb0 <xQueueGenericReset+0xcc>)
 8012e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e80:	601a      	str	r2, [r3, #0]
 8012e82:	f3bf 8f4f 	dsb	sy
 8012e86:	f3bf 8f6f 	isb	sy
 8012e8a:	e009      	b.n	8012ea0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	3310      	adds	r3, #16
 8012e90:	4618      	mov	r0, r3
 8012e92:	f7ff fef2 	bl	8012c7a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	3324      	adds	r3, #36	; 0x24
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f7ff feed 	bl	8012c7a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012ea0:	f001 ff12 	bl	8014cc8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012ea4:	2301      	movs	r3, #1
}
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	3710      	adds	r7, #16
 8012eaa:	46bd      	mov	sp, r7
 8012eac:	bd80      	pop	{r7, pc}
 8012eae:	bf00      	nop
 8012eb0:	e000ed04 	.word	0xe000ed04

08012eb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b08e      	sub	sp, #56	; 0x38
 8012eb8:	af02      	add	r7, sp, #8
 8012eba:	60f8      	str	r0, [r7, #12]
 8012ebc:	60b9      	str	r1, [r7, #8]
 8012ebe:	607a      	str	r2, [r7, #4]
 8012ec0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d109      	bne.n	8012edc <xQueueGenericCreateStatic+0x28>
 8012ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ecc:	f383 8811 	msr	BASEPRI, r3
 8012ed0:	f3bf 8f6f 	isb	sy
 8012ed4:	f3bf 8f4f 	dsb	sy
 8012ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8012eda:	e7fe      	b.n	8012eda <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012edc:	683b      	ldr	r3, [r7, #0]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d109      	bne.n	8012ef6 <xQueueGenericCreateStatic+0x42>
 8012ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ee6:	f383 8811 	msr	BASEPRI, r3
 8012eea:	f3bf 8f6f 	isb	sy
 8012eee:	f3bf 8f4f 	dsb	sy
 8012ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8012ef4:	e7fe      	b.n	8012ef4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d002      	beq.n	8012f02 <xQueueGenericCreateStatic+0x4e>
 8012efc:	68bb      	ldr	r3, [r7, #8]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d001      	beq.n	8012f06 <xQueueGenericCreateStatic+0x52>
 8012f02:	2301      	movs	r3, #1
 8012f04:	e000      	b.n	8012f08 <xQueueGenericCreateStatic+0x54>
 8012f06:	2300      	movs	r3, #0
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d109      	bne.n	8012f20 <xQueueGenericCreateStatic+0x6c>
 8012f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f10:	f383 8811 	msr	BASEPRI, r3
 8012f14:	f3bf 8f6f 	isb	sy
 8012f18:	f3bf 8f4f 	dsb	sy
 8012f1c:	623b      	str	r3, [r7, #32]
 8012f1e:	e7fe      	b.n	8012f1e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d102      	bne.n	8012f2c <xQueueGenericCreateStatic+0x78>
 8012f26:	68bb      	ldr	r3, [r7, #8]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d101      	bne.n	8012f30 <xQueueGenericCreateStatic+0x7c>
 8012f2c:	2301      	movs	r3, #1
 8012f2e:	e000      	b.n	8012f32 <xQueueGenericCreateStatic+0x7e>
 8012f30:	2300      	movs	r3, #0
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d109      	bne.n	8012f4a <xQueueGenericCreateStatic+0x96>
 8012f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f3a:	f383 8811 	msr	BASEPRI, r3
 8012f3e:	f3bf 8f6f 	isb	sy
 8012f42:	f3bf 8f4f 	dsb	sy
 8012f46:	61fb      	str	r3, [r7, #28]
 8012f48:	e7fe      	b.n	8012f48 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012f4a:	2348      	movs	r3, #72	; 0x48
 8012f4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012f4e:	697b      	ldr	r3, [r7, #20]
 8012f50:	2b48      	cmp	r3, #72	; 0x48
 8012f52:	d009      	beq.n	8012f68 <xQueueGenericCreateStatic+0xb4>
 8012f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f58:	f383 8811 	msr	BASEPRI, r3
 8012f5c:	f3bf 8f6f 	isb	sy
 8012f60:	f3bf 8f4f 	dsb	sy
 8012f64:	61bb      	str	r3, [r7, #24]
 8012f66:	e7fe      	b.n	8012f66 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012f68:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012f6a:	683b      	ldr	r3, [r7, #0]
 8012f6c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d00d      	beq.n	8012f90 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f76:	2201      	movs	r2, #1
 8012f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012f7c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f82:	9300      	str	r3, [sp, #0]
 8012f84:	4613      	mov	r3, r2
 8012f86:	687a      	ldr	r2, [r7, #4]
 8012f88:	68b9      	ldr	r1, [r7, #8]
 8012f8a:	68f8      	ldr	r0, [r7, #12]
 8012f8c:	f000 f844 	bl	8013018 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012f92:	4618      	mov	r0, r3
 8012f94:	3730      	adds	r7, #48	; 0x30
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd80      	pop	{r7, pc}

08012f9a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012f9a:	b580      	push	{r7, lr}
 8012f9c:	b08a      	sub	sp, #40	; 0x28
 8012f9e:	af02      	add	r7, sp, #8
 8012fa0:	60f8      	str	r0, [r7, #12]
 8012fa2:	60b9      	str	r1, [r7, #8]
 8012fa4:	4613      	mov	r3, r2
 8012fa6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d109      	bne.n	8012fc2 <xQueueGenericCreate+0x28>
 8012fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fb2:	f383 8811 	msr	BASEPRI, r3
 8012fb6:	f3bf 8f6f 	isb	sy
 8012fba:	f3bf 8f4f 	dsb	sy
 8012fbe:	613b      	str	r3, [r7, #16]
 8012fc0:	e7fe      	b.n	8012fc0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012fc2:	68bb      	ldr	r3, [r7, #8]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d102      	bne.n	8012fce <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012fc8:	2300      	movs	r3, #0
 8012fca:	61fb      	str	r3, [r7, #28]
 8012fcc:	e004      	b.n	8012fd8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	68ba      	ldr	r2, [r7, #8]
 8012fd2:	fb02 f303 	mul.w	r3, r2, r3
 8012fd6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012fd8:	69fb      	ldr	r3, [r7, #28]
 8012fda:	3348      	adds	r3, #72	; 0x48
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f001 ff5f 	bl	8014ea0 <pvPortMalloc>
 8012fe2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012fe4:	69bb      	ldr	r3, [r7, #24]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d011      	beq.n	801300e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012fea:	69bb      	ldr	r3, [r7, #24]
 8012fec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012fee:	697b      	ldr	r3, [r7, #20]
 8012ff0:	3348      	adds	r3, #72	; 0x48
 8012ff2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012ff4:	69bb      	ldr	r3, [r7, #24]
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012ffc:	79fa      	ldrb	r2, [r7, #7]
 8012ffe:	69bb      	ldr	r3, [r7, #24]
 8013000:	9300      	str	r3, [sp, #0]
 8013002:	4613      	mov	r3, r2
 8013004:	697a      	ldr	r2, [r7, #20]
 8013006:	68b9      	ldr	r1, [r7, #8]
 8013008:	68f8      	ldr	r0, [r7, #12]
 801300a:	f000 f805 	bl	8013018 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801300e:	69bb      	ldr	r3, [r7, #24]
	}
 8013010:	4618      	mov	r0, r3
 8013012:	3720      	adds	r7, #32
 8013014:	46bd      	mov	sp, r7
 8013016:	bd80      	pop	{r7, pc}

08013018 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013018:	b580      	push	{r7, lr}
 801301a:	b084      	sub	sp, #16
 801301c:	af00      	add	r7, sp, #0
 801301e:	60f8      	str	r0, [r7, #12]
 8013020:	60b9      	str	r1, [r7, #8]
 8013022:	607a      	str	r2, [r7, #4]
 8013024:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013026:	68bb      	ldr	r3, [r7, #8]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d103      	bne.n	8013034 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801302c:	69bb      	ldr	r3, [r7, #24]
 801302e:	69ba      	ldr	r2, [r7, #24]
 8013030:	601a      	str	r2, [r3, #0]
 8013032:	e002      	b.n	801303a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013034:	69bb      	ldr	r3, [r7, #24]
 8013036:	687a      	ldr	r2, [r7, #4]
 8013038:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801303a:	69bb      	ldr	r3, [r7, #24]
 801303c:	68fa      	ldr	r2, [r7, #12]
 801303e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013040:	69bb      	ldr	r3, [r7, #24]
 8013042:	68ba      	ldr	r2, [r7, #8]
 8013044:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013046:	2101      	movs	r1, #1
 8013048:	69b8      	ldr	r0, [r7, #24]
 801304a:	f7ff fecb 	bl	8012de4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801304e:	bf00      	nop
 8013050:	3710      	adds	r7, #16
 8013052:	46bd      	mov	sp, r7
 8013054:	bd80      	pop	{r7, pc}

08013056 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8013056:	b580      	push	{r7, lr}
 8013058:	b082      	sub	sp, #8
 801305a:	af00      	add	r7, sp, #0
 801305c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d00e      	beq.n	8013082 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	2200      	movs	r2, #0
 8013068:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	2200      	movs	r2, #0
 801306e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	2200      	movs	r2, #0
 8013074:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8013076:	2300      	movs	r3, #0
 8013078:	2200      	movs	r2, #0
 801307a:	2100      	movs	r1, #0
 801307c:	6878      	ldr	r0, [r7, #4]
 801307e:	f000 f837 	bl	80130f0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8013082:	bf00      	nop
 8013084:	3708      	adds	r7, #8
 8013086:	46bd      	mov	sp, r7
 8013088:	bd80      	pop	{r7, pc}

0801308a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801308a:	b580      	push	{r7, lr}
 801308c:	b086      	sub	sp, #24
 801308e:	af00      	add	r7, sp, #0
 8013090:	4603      	mov	r3, r0
 8013092:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8013094:	2301      	movs	r3, #1
 8013096:	617b      	str	r3, [r7, #20]
 8013098:	2300      	movs	r3, #0
 801309a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801309c:	79fb      	ldrb	r3, [r7, #7]
 801309e:	461a      	mov	r2, r3
 80130a0:	6939      	ldr	r1, [r7, #16]
 80130a2:	6978      	ldr	r0, [r7, #20]
 80130a4:	f7ff ff79 	bl	8012f9a <xQueueGenericCreate>
 80130a8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80130aa:	68f8      	ldr	r0, [r7, #12]
 80130ac:	f7ff ffd3 	bl	8013056 <prvInitialiseMutex>

		return xNewQueue;
 80130b0:	68fb      	ldr	r3, [r7, #12]
	}
 80130b2:	4618      	mov	r0, r3
 80130b4:	3718      	adds	r7, #24
 80130b6:	46bd      	mov	sp, r7
 80130b8:	bd80      	pop	{r7, pc}

080130ba <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80130ba:	b580      	push	{r7, lr}
 80130bc:	b088      	sub	sp, #32
 80130be:	af02      	add	r7, sp, #8
 80130c0:	4603      	mov	r3, r0
 80130c2:	6039      	str	r1, [r7, #0]
 80130c4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80130c6:	2301      	movs	r3, #1
 80130c8:	617b      	str	r3, [r7, #20]
 80130ca:	2300      	movs	r3, #0
 80130cc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80130ce:	79fb      	ldrb	r3, [r7, #7]
 80130d0:	9300      	str	r3, [sp, #0]
 80130d2:	683b      	ldr	r3, [r7, #0]
 80130d4:	2200      	movs	r2, #0
 80130d6:	6939      	ldr	r1, [r7, #16]
 80130d8:	6978      	ldr	r0, [r7, #20]
 80130da:	f7ff feeb 	bl	8012eb4 <xQueueGenericCreateStatic>
 80130de:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80130e0:	68f8      	ldr	r0, [r7, #12]
 80130e2:	f7ff ffb8 	bl	8013056 <prvInitialiseMutex>

		return xNewQueue;
 80130e6:	68fb      	ldr	r3, [r7, #12]
	}
 80130e8:	4618      	mov	r0, r3
 80130ea:	3718      	adds	r7, #24
 80130ec:	46bd      	mov	sp, r7
 80130ee:	bd80      	pop	{r7, pc}

080130f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b08e      	sub	sp, #56	; 0x38
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	60f8      	str	r0, [r7, #12]
 80130f8:	60b9      	str	r1, [r7, #8]
 80130fa:	607a      	str	r2, [r7, #4]
 80130fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80130fe:	2300      	movs	r3, #0
 8013100:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013108:	2b00      	cmp	r3, #0
 801310a:	d109      	bne.n	8013120 <xQueueGenericSend+0x30>
 801310c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013110:	f383 8811 	msr	BASEPRI, r3
 8013114:	f3bf 8f6f 	isb	sy
 8013118:	f3bf 8f4f 	dsb	sy
 801311c:	62bb      	str	r3, [r7, #40]	; 0x28
 801311e:	e7fe      	b.n	801311e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013120:	68bb      	ldr	r3, [r7, #8]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d103      	bne.n	801312e <xQueueGenericSend+0x3e>
 8013126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801312a:	2b00      	cmp	r3, #0
 801312c:	d101      	bne.n	8013132 <xQueueGenericSend+0x42>
 801312e:	2301      	movs	r3, #1
 8013130:	e000      	b.n	8013134 <xQueueGenericSend+0x44>
 8013132:	2300      	movs	r3, #0
 8013134:	2b00      	cmp	r3, #0
 8013136:	d109      	bne.n	801314c <xQueueGenericSend+0x5c>
 8013138:	f04f 0350 	mov.w	r3, #80	; 0x50
 801313c:	f383 8811 	msr	BASEPRI, r3
 8013140:	f3bf 8f6f 	isb	sy
 8013144:	f3bf 8f4f 	dsb	sy
 8013148:	627b      	str	r3, [r7, #36]	; 0x24
 801314a:	e7fe      	b.n	801314a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801314c:	683b      	ldr	r3, [r7, #0]
 801314e:	2b02      	cmp	r3, #2
 8013150:	d103      	bne.n	801315a <xQueueGenericSend+0x6a>
 8013152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013156:	2b01      	cmp	r3, #1
 8013158:	d101      	bne.n	801315e <xQueueGenericSend+0x6e>
 801315a:	2301      	movs	r3, #1
 801315c:	e000      	b.n	8013160 <xQueueGenericSend+0x70>
 801315e:	2300      	movs	r3, #0
 8013160:	2b00      	cmp	r3, #0
 8013162:	d109      	bne.n	8013178 <xQueueGenericSend+0x88>
 8013164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013168:	f383 8811 	msr	BASEPRI, r3
 801316c:	f3bf 8f6f 	isb	sy
 8013170:	f3bf 8f4f 	dsb	sy
 8013174:	623b      	str	r3, [r7, #32]
 8013176:	e7fe      	b.n	8013176 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013178:	f001 f968 	bl	801444c <xTaskGetSchedulerState>
 801317c:	4603      	mov	r3, r0
 801317e:	2b00      	cmp	r3, #0
 8013180:	d102      	bne.n	8013188 <xQueueGenericSend+0x98>
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d101      	bne.n	801318c <xQueueGenericSend+0x9c>
 8013188:	2301      	movs	r3, #1
 801318a:	e000      	b.n	801318e <xQueueGenericSend+0x9e>
 801318c:	2300      	movs	r3, #0
 801318e:	2b00      	cmp	r3, #0
 8013190:	d109      	bne.n	80131a6 <xQueueGenericSend+0xb6>
 8013192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013196:	f383 8811 	msr	BASEPRI, r3
 801319a:	f3bf 8f6f 	isb	sy
 801319e:	f3bf 8f4f 	dsb	sy
 80131a2:	61fb      	str	r3, [r7, #28]
 80131a4:	e7fe      	b.n	80131a4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80131a6:	f001 fd61 	bl	8014c6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80131aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80131ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80131b2:	429a      	cmp	r2, r3
 80131b4:	d302      	bcc.n	80131bc <xQueueGenericSend+0xcc>
 80131b6:	683b      	ldr	r3, [r7, #0]
 80131b8:	2b02      	cmp	r3, #2
 80131ba:	d129      	bne.n	8013210 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80131bc:	683a      	ldr	r2, [r7, #0]
 80131be:	68b9      	ldr	r1, [r7, #8]
 80131c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131c2:	f000 fa7c 	bl	80136be <prvCopyDataToQueue>
 80131c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80131c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d010      	beq.n	80131f2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80131d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131d2:	3324      	adds	r3, #36	; 0x24
 80131d4:	4618      	mov	r0, r3
 80131d6:	f000 ff83 	bl	80140e0 <xTaskRemoveFromEventList>
 80131da:	4603      	mov	r3, r0
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d013      	beq.n	8013208 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80131e0:	4b3f      	ldr	r3, [pc, #252]	; (80132e0 <xQueueGenericSend+0x1f0>)
 80131e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131e6:	601a      	str	r2, [r3, #0]
 80131e8:	f3bf 8f4f 	dsb	sy
 80131ec:	f3bf 8f6f 	isb	sy
 80131f0:	e00a      	b.n	8013208 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80131f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d007      	beq.n	8013208 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80131f8:	4b39      	ldr	r3, [pc, #228]	; (80132e0 <xQueueGenericSend+0x1f0>)
 80131fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131fe:	601a      	str	r2, [r3, #0]
 8013200:	f3bf 8f4f 	dsb	sy
 8013204:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013208:	f001 fd5e 	bl	8014cc8 <vPortExitCritical>
				return pdPASS;
 801320c:	2301      	movs	r3, #1
 801320e:	e063      	b.n	80132d8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d103      	bne.n	801321e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013216:	f001 fd57 	bl	8014cc8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801321a:	2300      	movs	r3, #0
 801321c:	e05c      	b.n	80132d8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801321e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013220:	2b00      	cmp	r3, #0
 8013222:	d106      	bne.n	8013232 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013224:	f107 0314 	add.w	r3, r7, #20
 8013228:	4618      	mov	r0, r3
 801322a:	f000 ffbb 	bl	80141a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801322e:	2301      	movs	r3, #1
 8013230:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013232:	f001 fd49 	bl	8014cc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013236:	f000 fd73 	bl	8013d20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801323a:	f001 fd17 	bl	8014c6c <vPortEnterCritical>
 801323e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013240:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013244:	b25b      	sxtb	r3, r3
 8013246:	f1b3 3fff 	cmp.w	r3, #4294967295
 801324a:	d103      	bne.n	8013254 <xQueueGenericSend+0x164>
 801324c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801324e:	2200      	movs	r2, #0
 8013250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013256:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801325a:	b25b      	sxtb	r3, r3
 801325c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013260:	d103      	bne.n	801326a <xQueueGenericSend+0x17a>
 8013262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013264:	2200      	movs	r2, #0
 8013266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801326a:	f001 fd2d 	bl	8014cc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801326e:	1d3a      	adds	r2, r7, #4
 8013270:	f107 0314 	add.w	r3, r7, #20
 8013274:	4611      	mov	r1, r2
 8013276:	4618      	mov	r0, r3
 8013278:	f000 ffaa 	bl	80141d0 <xTaskCheckForTimeOut>
 801327c:	4603      	mov	r3, r0
 801327e:	2b00      	cmp	r3, #0
 8013280:	d124      	bne.n	80132cc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013282:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013284:	f000 fb13 	bl	80138ae <prvIsQueueFull>
 8013288:	4603      	mov	r3, r0
 801328a:	2b00      	cmp	r3, #0
 801328c:	d018      	beq.n	80132c0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013290:	3310      	adds	r3, #16
 8013292:	687a      	ldr	r2, [r7, #4]
 8013294:	4611      	mov	r1, r2
 8013296:	4618      	mov	r0, r3
 8013298:	f000 fefe 	bl	8014098 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801329c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801329e:	f000 fa9e 	bl	80137de <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80132a2:	f000 fd4b 	bl	8013d3c <xTaskResumeAll>
 80132a6:	4603      	mov	r3, r0
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	f47f af7c 	bne.w	80131a6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80132ae:	4b0c      	ldr	r3, [pc, #48]	; (80132e0 <xQueueGenericSend+0x1f0>)
 80132b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132b4:	601a      	str	r2, [r3, #0]
 80132b6:	f3bf 8f4f 	dsb	sy
 80132ba:	f3bf 8f6f 	isb	sy
 80132be:	e772      	b.n	80131a6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80132c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80132c2:	f000 fa8c 	bl	80137de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80132c6:	f000 fd39 	bl	8013d3c <xTaskResumeAll>
 80132ca:	e76c      	b.n	80131a6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80132cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80132ce:	f000 fa86 	bl	80137de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80132d2:	f000 fd33 	bl	8013d3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80132d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80132d8:	4618      	mov	r0, r3
 80132da:	3738      	adds	r7, #56	; 0x38
 80132dc:	46bd      	mov	sp, r7
 80132de:	bd80      	pop	{r7, pc}
 80132e0:	e000ed04 	.word	0xe000ed04

080132e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b08e      	sub	sp, #56	; 0x38
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	60f8      	str	r0, [r7, #12]
 80132ec:	60b9      	str	r1, [r7, #8]
 80132ee:	607a      	str	r2, [r7, #4]
 80132f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80132f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d109      	bne.n	8013310 <xQueueGenericSendFromISR+0x2c>
 80132fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013300:	f383 8811 	msr	BASEPRI, r3
 8013304:	f3bf 8f6f 	isb	sy
 8013308:	f3bf 8f4f 	dsb	sy
 801330c:	627b      	str	r3, [r7, #36]	; 0x24
 801330e:	e7fe      	b.n	801330e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013310:	68bb      	ldr	r3, [r7, #8]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d103      	bne.n	801331e <xQueueGenericSendFromISR+0x3a>
 8013316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801331a:	2b00      	cmp	r3, #0
 801331c:	d101      	bne.n	8013322 <xQueueGenericSendFromISR+0x3e>
 801331e:	2301      	movs	r3, #1
 8013320:	e000      	b.n	8013324 <xQueueGenericSendFromISR+0x40>
 8013322:	2300      	movs	r3, #0
 8013324:	2b00      	cmp	r3, #0
 8013326:	d109      	bne.n	801333c <xQueueGenericSendFromISR+0x58>
 8013328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801332c:	f383 8811 	msr	BASEPRI, r3
 8013330:	f3bf 8f6f 	isb	sy
 8013334:	f3bf 8f4f 	dsb	sy
 8013338:	623b      	str	r3, [r7, #32]
 801333a:	e7fe      	b.n	801333a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801333c:	683b      	ldr	r3, [r7, #0]
 801333e:	2b02      	cmp	r3, #2
 8013340:	d103      	bne.n	801334a <xQueueGenericSendFromISR+0x66>
 8013342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013346:	2b01      	cmp	r3, #1
 8013348:	d101      	bne.n	801334e <xQueueGenericSendFromISR+0x6a>
 801334a:	2301      	movs	r3, #1
 801334c:	e000      	b.n	8013350 <xQueueGenericSendFromISR+0x6c>
 801334e:	2300      	movs	r3, #0
 8013350:	2b00      	cmp	r3, #0
 8013352:	d109      	bne.n	8013368 <xQueueGenericSendFromISR+0x84>
 8013354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013358:	f383 8811 	msr	BASEPRI, r3
 801335c:	f3bf 8f6f 	isb	sy
 8013360:	f3bf 8f4f 	dsb	sy
 8013364:	61fb      	str	r3, [r7, #28]
 8013366:	e7fe      	b.n	8013366 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013368:	f001 fd5c 	bl	8014e24 <vPortValidateInterruptPriority>
	__asm volatile
 801336c:	f3ef 8211 	mrs	r2, BASEPRI
 8013370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013374:	f383 8811 	msr	BASEPRI, r3
 8013378:	f3bf 8f6f 	isb	sy
 801337c:	f3bf 8f4f 	dsb	sy
 8013380:	61ba      	str	r2, [r7, #24]
 8013382:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013384:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013386:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801338a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801338c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801338e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013390:	429a      	cmp	r2, r3
 8013392:	d302      	bcc.n	801339a <xQueueGenericSendFromISR+0xb6>
 8013394:	683b      	ldr	r3, [r7, #0]
 8013396:	2b02      	cmp	r3, #2
 8013398:	d12c      	bne.n	80133f4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801339a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801339c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80133a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80133a4:	683a      	ldr	r2, [r7, #0]
 80133a6:	68b9      	ldr	r1, [r7, #8]
 80133a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80133aa:	f000 f988 	bl	80136be <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80133ae:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80133b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133b6:	d112      	bne.n	80133de <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80133b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d016      	beq.n	80133ee <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80133c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133c2:	3324      	adds	r3, #36	; 0x24
 80133c4:	4618      	mov	r0, r3
 80133c6:	f000 fe8b 	bl	80140e0 <xTaskRemoveFromEventList>
 80133ca:	4603      	mov	r3, r0
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d00e      	beq.n	80133ee <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d00b      	beq.n	80133ee <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	2201      	movs	r2, #1
 80133da:	601a      	str	r2, [r3, #0]
 80133dc:	e007      	b.n	80133ee <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80133de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80133e2:	3301      	adds	r3, #1
 80133e4:	b2db      	uxtb	r3, r3
 80133e6:	b25a      	sxtb	r2, r3
 80133e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80133ee:	2301      	movs	r3, #1
 80133f0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80133f2:	e001      	b.n	80133f8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80133f4:	2300      	movs	r3, #0
 80133f6:	637b      	str	r3, [r7, #52]	; 0x34
 80133f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133fa:	613b      	str	r3, [r7, #16]
	__asm volatile
 80133fc:	693b      	ldr	r3, [r7, #16]
 80133fe:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013404:	4618      	mov	r0, r3
 8013406:	3738      	adds	r7, #56	; 0x38
 8013408:	46bd      	mov	sp, r7
 801340a:	bd80      	pop	{r7, pc}

0801340c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801340c:	b580      	push	{r7, lr}
 801340e:	b08c      	sub	sp, #48	; 0x30
 8013410:	af00      	add	r7, sp, #0
 8013412:	60f8      	str	r0, [r7, #12]
 8013414:	60b9      	str	r1, [r7, #8]
 8013416:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013418:	2300      	movs	r3, #0
 801341a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013422:	2b00      	cmp	r3, #0
 8013424:	d109      	bne.n	801343a <xQueueReceive+0x2e>
	__asm volatile
 8013426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801342a:	f383 8811 	msr	BASEPRI, r3
 801342e:	f3bf 8f6f 	isb	sy
 8013432:	f3bf 8f4f 	dsb	sy
 8013436:	623b      	str	r3, [r7, #32]
 8013438:	e7fe      	b.n	8013438 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801343a:	68bb      	ldr	r3, [r7, #8]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d103      	bne.n	8013448 <xQueueReceive+0x3c>
 8013440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013444:	2b00      	cmp	r3, #0
 8013446:	d101      	bne.n	801344c <xQueueReceive+0x40>
 8013448:	2301      	movs	r3, #1
 801344a:	e000      	b.n	801344e <xQueueReceive+0x42>
 801344c:	2300      	movs	r3, #0
 801344e:	2b00      	cmp	r3, #0
 8013450:	d109      	bne.n	8013466 <xQueueReceive+0x5a>
 8013452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013456:	f383 8811 	msr	BASEPRI, r3
 801345a:	f3bf 8f6f 	isb	sy
 801345e:	f3bf 8f4f 	dsb	sy
 8013462:	61fb      	str	r3, [r7, #28]
 8013464:	e7fe      	b.n	8013464 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013466:	f000 fff1 	bl	801444c <xTaskGetSchedulerState>
 801346a:	4603      	mov	r3, r0
 801346c:	2b00      	cmp	r3, #0
 801346e:	d102      	bne.n	8013476 <xQueueReceive+0x6a>
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d101      	bne.n	801347a <xQueueReceive+0x6e>
 8013476:	2301      	movs	r3, #1
 8013478:	e000      	b.n	801347c <xQueueReceive+0x70>
 801347a:	2300      	movs	r3, #0
 801347c:	2b00      	cmp	r3, #0
 801347e:	d109      	bne.n	8013494 <xQueueReceive+0x88>
 8013480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013484:	f383 8811 	msr	BASEPRI, r3
 8013488:	f3bf 8f6f 	isb	sy
 801348c:	f3bf 8f4f 	dsb	sy
 8013490:	61bb      	str	r3, [r7, #24]
 8013492:	e7fe      	b.n	8013492 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013494:	f001 fbea 	bl	8014c6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801349a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801349c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d01f      	beq.n	80134e4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80134a4:	68b9      	ldr	r1, [r7, #8]
 80134a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134a8:	f000 f973 	bl	8013792 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80134ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ae:	1e5a      	subs	r2, r3, #1
 80134b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134b2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80134b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134b6:	691b      	ldr	r3, [r3, #16]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d00f      	beq.n	80134dc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80134bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134be:	3310      	adds	r3, #16
 80134c0:	4618      	mov	r0, r3
 80134c2:	f000 fe0d 	bl	80140e0 <xTaskRemoveFromEventList>
 80134c6:	4603      	mov	r3, r0
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d007      	beq.n	80134dc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80134cc:	4b3c      	ldr	r3, [pc, #240]	; (80135c0 <xQueueReceive+0x1b4>)
 80134ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134d2:	601a      	str	r2, [r3, #0]
 80134d4:	f3bf 8f4f 	dsb	sy
 80134d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80134dc:	f001 fbf4 	bl	8014cc8 <vPortExitCritical>
				return pdPASS;
 80134e0:	2301      	movs	r3, #1
 80134e2:	e069      	b.n	80135b8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d103      	bne.n	80134f2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80134ea:	f001 fbed 	bl	8014cc8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80134ee:	2300      	movs	r3, #0
 80134f0:	e062      	b.n	80135b8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80134f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d106      	bne.n	8013506 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80134f8:	f107 0310 	add.w	r3, r7, #16
 80134fc:	4618      	mov	r0, r3
 80134fe:	f000 fe51 	bl	80141a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013502:	2301      	movs	r3, #1
 8013504:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013506:	f001 fbdf 	bl	8014cc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801350a:	f000 fc09 	bl	8013d20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801350e:	f001 fbad 	bl	8014c6c <vPortEnterCritical>
 8013512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013514:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013518:	b25b      	sxtb	r3, r3
 801351a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801351e:	d103      	bne.n	8013528 <xQueueReceive+0x11c>
 8013520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013522:	2200      	movs	r2, #0
 8013524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801352a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801352e:	b25b      	sxtb	r3, r3
 8013530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013534:	d103      	bne.n	801353e <xQueueReceive+0x132>
 8013536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013538:	2200      	movs	r2, #0
 801353a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801353e:	f001 fbc3 	bl	8014cc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013542:	1d3a      	adds	r2, r7, #4
 8013544:	f107 0310 	add.w	r3, r7, #16
 8013548:	4611      	mov	r1, r2
 801354a:	4618      	mov	r0, r3
 801354c:	f000 fe40 	bl	80141d0 <xTaskCheckForTimeOut>
 8013550:	4603      	mov	r3, r0
 8013552:	2b00      	cmp	r3, #0
 8013554:	d123      	bne.n	801359e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013558:	f000 f993 	bl	8013882 <prvIsQueueEmpty>
 801355c:	4603      	mov	r3, r0
 801355e:	2b00      	cmp	r3, #0
 8013560:	d017      	beq.n	8013592 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013564:	3324      	adds	r3, #36	; 0x24
 8013566:	687a      	ldr	r2, [r7, #4]
 8013568:	4611      	mov	r1, r2
 801356a:	4618      	mov	r0, r3
 801356c:	f000 fd94 	bl	8014098 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013572:	f000 f934 	bl	80137de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013576:	f000 fbe1 	bl	8013d3c <xTaskResumeAll>
 801357a:	4603      	mov	r3, r0
 801357c:	2b00      	cmp	r3, #0
 801357e:	d189      	bne.n	8013494 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8013580:	4b0f      	ldr	r3, [pc, #60]	; (80135c0 <xQueueReceive+0x1b4>)
 8013582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013586:	601a      	str	r2, [r3, #0]
 8013588:	f3bf 8f4f 	dsb	sy
 801358c:	f3bf 8f6f 	isb	sy
 8013590:	e780      	b.n	8013494 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013594:	f000 f923 	bl	80137de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013598:	f000 fbd0 	bl	8013d3c <xTaskResumeAll>
 801359c:	e77a      	b.n	8013494 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801359e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135a0:	f000 f91d 	bl	80137de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80135a4:	f000 fbca 	bl	8013d3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80135a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135aa:	f000 f96a 	bl	8013882 <prvIsQueueEmpty>
 80135ae:	4603      	mov	r3, r0
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	f43f af6f 	beq.w	8013494 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80135b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80135b8:	4618      	mov	r0, r3
 80135ba:	3730      	adds	r7, #48	; 0x30
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}
 80135c0:	e000ed04 	.word	0xe000ed04

080135c4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b08e      	sub	sp, #56	; 0x38
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	60f8      	str	r0, [r7, #12]
 80135cc:	60b9      	str	r1, [r7, #8]
 80135ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80135d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d109      	bne.n	80135ee <xQueueReceiveFromISR+0x2a>
 80135da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135de:	f383 8811 	msr	BASEPRI, r3
 80135e2:	f3bf 8f6f 	isb	sy
 80135e6:	f3bf 8f4f 	dsb	sy
 80135ea:	623b      	str	r3, [r7, #32]
 80135ec:	e7fe      	b.n	80135ec <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80135ee:	68bb      	ldr	r3, [r7, #8]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d103      	bne.n	80135fc <xQueueReceiveFromISR+0x38>
 80135f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d101      	bne.n	8013600 <xQueueReceiveFromISR+0x3c>
 80135fc:	2301      	movs	r3, #1
 80135fe:	e000      	b.n	8013602 <xQueueReceiveFromISR+0x3e>
 8013600:	2300      	movs	r3, #0
 8013602:	2b00      	cmp	r3, #0
 8013604:	d109      	bne.n	801361a <xQueueReceiveFromISR+0x56>
 8013606:	f04f 0350 	mov.w	r3, #80	; 0x50
 801360a:	f383 8811 	msr	BASEPRI, r3
 801360e:	f3bf 8f6f 	isb	sy
 8013612:	f3bf 8f4f 	dsb	sy
 8013616:	61fb      	str	r3, [r7, #28]
 8013618:	e7fe      	b.n	8013618 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801361a:	f001 fc03 	bl	8014e24 <vPortValidateInterruptPriority>
	__asm volatile
 801361e:	f3ef 8211 	mrs	r2, BASEPRI
 8013622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013626:	f383 8811 	msr	BASEPRI, r3
 801362a:	f3bf 8f6f 	isb	sy
 801362e:	f3bf 8f4f 	dsb	sy
 8013632:	61ba      	str	r2, [r7, #24]
 8013634:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013636:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013638:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801363a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801363c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801363e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013642:	2b00      	cmp	r3, #0
 8013644:	d02f      	beq.n	80136a6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013648:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801364c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013650:	68b9      	ldr	r1, [r7, #8]
 8013652:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013654:	f000 f89d 	bl	8013792 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801365a:	1e5a      	subs	r2, r3, #1
 801365c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801365e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013660:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013668:	d112      	bne.n	8013690 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801366a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801366c:	691b      	ldr	r3, [r3, #16]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d016      	beq.n	80136a0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013674:	3310      	adds	r3, #16
 8013676:	4618      	mov	r0, r3
 8013678:	f000 fd32 	bl	80140e0 <xTaskRemoveFromEventList>
 801367c:	4603      	mov	r3, r0
 801367e:	2b00      	cmp	r3, #0
 8013680:	d00e      	beq.n	80136a0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d00b      	beq.n	80136a0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	2201      	movs	r2, #1
 801368c:	601a      	str	r2, [r3, #0]
 801368e:	e007      	b.n	80136a0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013694:	3301      	adds	r3, #1
 8013696:	b2db      	uxtb	r3, r3
 8013698:	b25a      	sxtb	r2, r3
 801369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801369c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80136a0:	2301      	movs	r3, #1
 80136a2:	637b      	str	r3, [r7, #52]	; 0x34
 80136a4:	e001      	b.n	80136aa <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80136a6:	2300      	movs	r3, #0
 80136a8:	637b      	str	r3, [r7, #52]	; 0x34
 80136aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ac:	613b      	str	r3, [r7, #16]
	__asm volatile
 80136ae:	693b      	ldr	r3, [r7, #16]
 80136b0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80136b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80136b6:	4618      	mov	r0, r3
 80136b8:	3738      	adds	r7, #56	; 0x38
 80136ba:	46bd      	mov	sp, r7
 80136bc:	bd80      	pop	{r7, pc}

080136be <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80136be:	b580      	push	{r7, lr}
 80136c0:	b086      	sub	sp, #24
 80136c2:	af00      	add	r7, sp, #0
 80136c4:	60f8      	str	r0, [r7, #12]
 80136c6:	60b9      	str	r1, [r7, #8]
 80136c8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80136ca:	2300      	movs	r3, #0
 80136cc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136d2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d10d      	bne.n	80136f8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d14d      	bne.n	8013780 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	689b      	ldr	r3, [r3, #8]
 80136e8:	4618      	mov	r0, r3
 80136ea:	f000 fecd 	bl	8014488 <xTaskPriorityDisinherit>
 80136ee:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	2200      	movs	r2, #0
 80136f4:	609a      	str	r2, [r3, #8]
 80136f6:	e043      	b.n	8013780 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d119      	bne.n	8013732 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	6858      	ldr	r0, [r3, #4]
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013706:	461a      	mov	r2, r3
 8013708:	68b9      	ldr	r1, [r7, #8]
 801370a:	f002 fb27 	bl	8015d5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	685a      	ldr	r2, [r3, #4]
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013716:	441a      	add	r2, r3
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	685a      	ldr	r2, [r3, #4]
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	689b      	ldr	r3, [r3, #8]
 8013724:	429a      	cmp	r2, r3
 8013726:	d32b      	bcc.n	8013780 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	681a      	ldr	r2, [r3, #0]
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	605a      	str	r2, [r3, #4]
 8013730:	e026      	b.n	8013780 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	68d8      	ldr	r0, [r3, #12]
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801373a:	461a      	mov	r2, r3
 801373c:	68b9      	ldr	r1, [r7, #8]
 801373e:	f002 fb0d 	bl	8015d5c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	68da      	ldr	r2, [r3, #12]
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801374a:	425b      	negs	r3, r3
 801374c:	441a      	add	r2, r3
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	68da      	ldr	r2, [r3, #12]
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	429a      	cmp	r2, r3
 801375c:	d207      	bcs.n	801376e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	689a      	ldr	r2, [r3, #8]
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013766:	425b      	negs	r3, r3
 8013768:	441a      	add	r2, r3
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	2b02      	cmp	r3, #2
 8013772:	d105      	bne.n	8013780 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013774:	693b      	ldr	r3, [r7, #16]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d002      	beq.n	8013780 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801377a:	693b      	ldr	r3, [r7, #16]
 801377c:	3b01      	subs	r3, #1
 801377e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013780:	693b      	ldr	r3, [r7, #16]
 8013782:	1c5a      	adds	r2, r3, #1
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013788:	697b      	ldr	r3, [r7, #20]
}
 801378a:	4618      	mov	r0, r3
 801378c:	3718      	adds	r7, #24
 801378e:	46bd      	mov	sp, r7
 8013790:	bd80      	pop	{r7, pc}

08013792 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013792:	b580      	push	{r7, lr}
 8013794:	b082      	sub	sp, #8
 8013796:	af00      	add	r7, sp, #0
 8013798:	6078      	str	r0, [r7, #4]
 801379a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d018      	beq.n	80137d6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	68da      	ldr	r2, [r3, #12]
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137ac:	441a      	add	r2, r3
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	68da      	ldr	r2, [r3, #12]
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	689b      	ldr	r3, [r3, #8]
 80137ba:	429a      	cmp	r2, r3
 80137bc:	d303      	bcc.n	80137c6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	681a      	ldr	r2, [r3, #0]
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	68d9      	ldr	r1, [r3, #12]
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137ce:	461a      	mov	r2, r3
 80137d0:	6838      	ldr	r0, [r7, #0]
 80137d2:	f002 fac3 	bl	8015d5c <memcpy>
	}
}
 80137d6:	bf00      	nop
 80137d8:	3708      	adds	r7, #8
 80137da:	46bd      	mov	sp, r7
 80137dc:	bd80      	pop	{r7, pc}

080137de <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80137de:	b580      	push	{r7, lr}
 80137e0:	b084      	sub	sp, #16
 80137e2:	af00      	add	r7, sp, #0
 80137e4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80137e6:	f001 fa41 	bl	8014c6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80137f0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80137f2:	e011      	b.n	8013818 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d012      	beq.n	8013822 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	3324      	adds	r3, #36	; 0x24
 8013800:	4618      	mov	r0, r3
 8013802:	f000 fc6d 	bl	80140e0 <xTaskRemoveFromEventList>
 8013806:	4603      	mov	r3, r0
 8013808:	2b00      	cmp	r3, #0
 801380a:	d001      	beq.n	8013810 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801380c:	f000 fd40 	bl	8014290 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013810:	7bfb      	ldrb	r3, [r7, #15]
 8013812:	3b01      	subs	r3, #1
 8013814:	b2db      	uxtb	r3, r3
 8013816:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801381c:	2b00      	cmp	r3, #0
 801381e:	dce9      	bgt.n	80137f4 <prvUnlockQueue+0x16>
 8013820:	e000      	b.n	8013824 <prvUnlockQueue+0x46>
					break;
 8013822:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	22ff      	movs	r2, #255	; 0xff
 8013828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801382c:	f001 fa4c 	bl	8014cc8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013830:	f001 fa1c 	bl	8014c6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801383a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801383c:	e011      	b.n	8013862 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	691b      	ldr	r3, [r3, #16]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d012      	beq.n	801386c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	3310      	adds	r3, #16
 801384a:	4618      	mov	r0, r3
 801384c:	f000 fc48 	bl	80140e0 <xTaskRemoveFromEventList>
 8013850:	4603      	mov	r3, r0
 8013852:	2b00      	cmp	r3, #0
 8013854:	d001      	beq.n	801385a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013856:	f000 fd1b 	bl	8014290 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801385a:	7bbb      	ldrb	r3, [r7, #14]
 801385c:	3b01      	subs	r3, #1
 801385e:	b2db      	uxtb	r3, r3
 8013860:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013862:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013866:	2b00      	cmp	r3, #0
 8013868:	dce9      	bgt.n	801383e <prvUnlockQueue+0x60>
 801386a:	e000      	b.n	801386e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801386c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	22ff      	movs	r2, #255	; 0xff
 8013872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013876:	f001 fa27 	bl	8014cc8 <vPortExitCritical>
}
 801387a:	bf00      	nop
 801387c:	3710      	adds	r7, #16
 801387e:	46bd      	mov	sp, r7
 8013880:	bd80      	pop	{r7, pc}

08013882 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013882:	b580      	push	{r7, lr}
 8013884:	b084      	sub	sp, #16
 8013886:	af00      	add	r7, sp, #0
 8013888:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801388a:	f001 f9ef 	bl	8014c6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013892:	2b00      	cmp	r3, #0
 8013894:	d102      	bne.n	801389c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013896:	2301      	movs	r3, #1
 8013898:	60fb      	str	r3, [r7, #12]
 801389a:	e001      	b.n	80138a0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801389c:	2300      	movs	r3, #0
 801389e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80138a0:	f001 fa12 	bl	8014cc8 <vPortExitCritical>

	return xReturn;
 80138a4:	68fb      	ldr	r3, [r7, #12]
}
 80138a6:	4618      	mov	r0, r3
 80138a8:	3710      	adds	r7, #16
 80138aa:	46bd      	mov	sp, r7
 80138ac:	bd80      	pop	{r7, pc}

080138ae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80138ae:	b580      	push	{r7, lr}
 80138b0:	b084      	sub	sp, #16
 80138b2:	af00      	add	r7, sp, #0
 80138b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80138b6:	f001 f9d9 	bl	8014c6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80138c2:	429a      	cmp	r2, r3
 80138c4:	d102      	bne.n	80138cc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80138c6:	2301      	movs	r3, #1
 80138c8:	60fb      	str	r3, [r7, #12]
 80138ca:	e001      	b.n	80138d0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80138cc:	2300      	movs	r3, #0
 80138ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80138d0:	f001 f9fa 	bl	8014cc8 <vPortExitCritical>

	return xReturn;
 80138d4:	68fb      	ldr	r3, [r7, #12]
}
 80138d6:	4618      	mov	r0, r3
 80138d8:	3710      	adds	r7, #16
 80138da:	46bd      	mov	sp, r7
 80138dc:	bd80      	pop	{r7, pc}

080138de <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80138de:	b580      	push	{r7, lr}
 80138e0:	b08e      	sub	sp, #56	; 0x38
 80138e2:	af04      	add	r7, sp, #16
 80138e4:	60f8      	str	r0, [r7, #12]
 80138e6:	60b9      	str	r1, [r7, #8]
 80138e8:	607a      	str	r2, [r7, #4]
 80138ea:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80138ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d109      	bne.n	8013906 <xTaskCreateStatic+0x28>
	__asm volatile
 80138f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138f6:	f383 8811 	msr	BASEPRI, r3
 80138fa:	f3bf 8f6f 	isb	sy
 80138fe:	f3bf 8f4f 	dsb	sy
 8013902:	623b      	str	r3, [r7, #32]
 8013904:	e7fe      	b.n	8013904 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8013906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013908:	2b00      	cmp	r3, #0
 801390a:	d109      	bne.n	8013920 <xTaskCreateStatic+0x42>
 801390c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013910:	f383 8811 	msr	BASEPRI, r3
 8013914:	f3bf 8f6f 	isb	sy
 8013918:	f3bf 8f4f 	dsb	sy
 801391c:	61fb      	str	r3, [r7, #28]
 801391e:	e7fe      	b.n	801391e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013920:	2354      	movs	r3, #84	; 0x54
 8013922:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013924:	693b      	ldr	r3, [r7, #16]
 8013926:	2b54      	cmp	r3, #84	; 0x54
 8013928:	d009      	beq.n	801393e <xTaskCreateStatic+0x60>
 801392a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801392e:	f383 8811 	msr	BASEPRI, r3
 8013932:	f3bf 8f6f 	isb	sy
 8013936:	f3bf 8f4f 	dsb	sy
 801393a:	61bb      	str	r3, [r7, #24]
 801393c:	e7fe      	b.n	801393c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801393e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013942:	2b00      	cmp	r3, #0
 8013944:	d01e      	beq.n	8013984 <xTaskCreateStatic+0xa6>
 8013946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013948:	2b00      	cmp	r3, #0
 801394a:	d01b      	beq.n	8013984 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801394c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801394e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013952:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013954:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013958:	2202      	movs	r2, #2
 801395a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801395e:	2300      	movs	r3, #0
 8013960:	9303      	str	r3, [sp, #12]
 8013962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013964:	9302      	str	r3, [sp, #8]
 8013966:	f107 0314 	add.w	r3, r7, #20
 801396a:	9301      	str	r3, [sp, #4]
 801396c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801396e:	9300      	str	r3, [sp, #0]
 8013970:	683b      	ldr	r3, [r7, #0]
 8013972:	687a      	ldr	r2, [r7, #4]
 8013974:	68b9      	ldr	r1, [r7, #8]
 8013976:	68f8      	ldr	r0, [r7, #12]
 8013978:	f000 f850 	bl	8013a1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801397c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801397e:	f000 f8d3 	bl	8013b28 <prvAddNewTaskToReadyList>
 8013982:	e001      	b.n	8013988 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8013984:	2300      	movs	r3, #0
 8013986:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013988:	697b      	ldr	r3, [r7, #20]
	}
 801398a:	4618      	mov	r0, r3
 801398c:	3728      	adds	r7, #40	; 0x28
 801398e:	46bd      	mov	sp, r7
 8013990:	bd80      	pop	{r7, pc}

08013992 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013992:	b580      	push	{r7, lr}
 8013994:	b08c      	sub	sp, #48	; 0x30
 8013996:	af04      	add	r7, sp, #16
 8013998:	60f8      	str	r0, [r7, #12]
 801399a:	60b9      	str	r1, [r7, #8]
 801399c:	603b      	str	r3, [r7, #0]
 801399e:	4613      	mov	r3, r2
 80139a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80139a2:	88fb      	ldrh	r3, [r7, #6]
 80139a4:	009b      	lsls	r3, r3, #2
 80139a6:	4618      	mov	r0, r3
 80139a8:	f001 fa7a 	bl	8014ea0 <pvPortMalloc>
 80139ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80139ae:	697b      	ldr	r3, [r7, #20]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d00e      	beq.n	80139d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80139b4:	2054      	movs	r0, #84	; 0x54
 80139b6:	f001 fa73 	bl	8014ea0 <pvPortMalloc>
 80139ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80139bc:	69fb      	ldr	r3, [r7, #28]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d003      	beq.n	80139ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80139c2:	69fb      	ldr	r3, [r7, #28]
 80139c4:	697a      	ldr	r2, [r7, #20]
 80139c6:	631a      	str	r2, [r3, #48]	; 0x30
 80139c8:	e005      	b.n	80139d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80139ca:	6978      	ldr	r0, [r7, #20]
 80139cc:	f001 fb2a 	bl	8015024 <vPortFree>
 80139d0:	e001      	b.n	80139d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80139d2:	2300      	movs	r3, #0
 80139d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80139d6:	69fb      	ldr	r3, [r7, #28]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d017      	beq.n	8013a0c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80139dc:	69fb      	ldr	r3, [r7, #28]
 80139de:	2200      	movs	r2, #0
 80139e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80139e4:	88fa      	ldrh	r2, [r7, #6]
 80139e6:	2300      	movs	r3, #0
 80139e8:	9303      	str	r3, [sp, #12]
 80139ea:	69fb      	ldr	r3, [r7, #28]
 80139ec:	9302      	str	r3, [sp, #8]
 80139ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139f0:	9301      	str	r3, [sp, #4]
 80139f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139f4:	9300      	str	r3, [sp, #0]
 80139f6:	683b      	ldr	r3, [r7, #0]
 80139f8:	68b9      	ldr	r1, [r7, #8]
 80139fa:	68f8      	ldr	r0, [r7, #12]
 80139fc:	f000 f80e 	bl	8013a1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013a00:	69f8      	ldr	r0, [r7, #28]
 8013a02:	f000 f891 	bl	8013b28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013a06:	2301      	movs	r3, #1
 8013a08:	61bb      	str	r3, [r7, #24]
 8013a0a:	e002      	b.n	8013a12 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8013a10:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013a12:	69bb      	ldr	r3, [r7, #24]
	}
 8013a14:	4618      	mov	r0, r3
 8013a16:	3720      	adds	r7, #32
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	bd80      	pop	{r7, pc}

08013a1c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	b088      	sub	sp, #32
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	60f8      	str	r0, [r7, #12]
 8013a24:	60b9      	str	r1, [r7, #8]
 8013a26:	607a      	str	r2, [r7, #4]
 8013a28:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013a34:	3b01      	subs	r3, #1
 8013a36:	009b      	lsls	r3, r3, #2
 8013a38:	4413      	add	r3, r2
 8013a3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013a3c:	69bb      	ldr	r3, [r7, #24]
 8013a3e:	f023 0307 	bic.w	r3, r3, #7
 8013a42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013a44:	69bb      	ldr	r3, [r7, #24]
 8013a46:	f003 0307 	and.w	r3, r3, #7
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d009      	beq.n	8013a62 <prvInitialiseNewTask+0x46>
 8013a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a52:	f383 8811 	msr	BASEPRI, r3
 8013a56:	f3bf 8f6f 	isb	sy
 8013a5a:	f3bf 8f4f 	dsb	sy
 8013a5e:	617b      	str	r3, [r7, #20]
 8013a60:	e7fe      	b.n	8013a60 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013a62:	68bb      	ldr	r3, [r7, #8]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d01f      	beq.n	8013aa8 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013a68:	2300      	movs	r3, #0
 8013a6a:	61fb      	str	r3, [r7, #28]
 8013a6c:	e012      	b.n	8013a94 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013a6e:	68ba      	ldr	r2, [r7, #8]
 8013a70:	69fb      	ldr	r3, [r7, #28]
 8013a72:	4413      	add	r3, r2
 8013a74:	7819      	ldrb	r1, [r3, #0]
 8013a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a78:	69fb      	ldr	r3, [r7, #28]
 8013a7a:	4413      	add	r3, r2
 8013a7c:	3334      	adds	r3, #52	; 0x34
 8013a7e:	460a      	mov	r2, r1
 8013a80:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013a82:	68ba      	ldr	r2, [r7, #8]
 8013a84:	69fb      	ldr	r3, [r7, #28]
 8013a86:	4413      	add	r3, r2
 8013a88:	781b      	ldrb	r3, [r3, #0]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d006      	beq.n	8013a9c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013a8e:	69fb      	ldr	r3, [r7, #28]
 8013a90:	3301      	adds	r3, #1
 8013a92:	61fb      	str	r3, [r7, #28]
 8013a94:	69fb      	ldr	r3, [r7, #28]
 8013a96:	2b0f      	cmp	r3, #15
 8013a98:	d9e9      	bls.n	8013a6e <prvInitialiseNewTask+0x52>
 8013a9a:	e000      	b.n	8013a9e <prvInitialiseNewTask+0x82>
			{
				break;
 8013a9c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aa0:	2200      	movs	r2, #0
 8013aa2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013aa6:	e003      	b.n	8013ab0 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aaa:	2200      	movs	r2, #0
 8013aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ab2:	2b06      	cmp	r3, #6
 8013ab4:	d901      	bls.n	8013aba <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013ab6:	2306      	movs	r3, #6
 8013ab8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013abe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ac4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ac8:	2200      	movs	r2, #0
 8013aca:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ace:	3304      	adds	r3, #4
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	f7ff f8f2 	bl	8012cba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ad8:	3318      	adds	r3, #24
 8013ada:	4618      	mov	r0, r3
 8013adc:	f7ff f8ed 	bl	8012cba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ae4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ae8:	f1c3 0207 	rsb	r2, r3, #7
 8013aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013af4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013af8:	2200      	movs	r2, #0
 8013afa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013afe:	2200      	movs	r2, #0
 8013b00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013b04:	683a      	ldr	r2, [r7, #0]
 8013b06:	68f9      	ldr	r1, [r7, #12]
 8013b08:	69b8      	ldr	r0, [r7, #24]
 8013b0a:	f000 ff8b 	bl	8014a24 <pxPortInitialiseStack>
 8013b0e:	4602      	mov	r2, r0
 8013b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b12:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d002      	beq.n	8013b20 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b1e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013b20:	bf00      	nop
 8013b22:	3720      	adds	r7, #32
 8013b24:	46bd      	mov	sp, r7
 8013b26:	bd80      	pop	{r7, pc}

08013b28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b082      	sub	sp, #8
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013b30:	f001 f89c 	bl	8014c6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013b34:	4b2a      	ldr	r3, [pc, #168]	; (8013be0 <prvAddNewTaskToReadyList+0xb8>)
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	3301      	adds	r3, #1
 8013b3a:	4a29      	ldr	r2, [pc, #164]	; (8013be0 <prvAddNewTaskToReadyList+0xb8>)
 8013b3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013b3e:	4b29      	ldr	r3, [pc, #164]	; (8013be4 <prvAddNewTaskToReadyList+0xbc>)
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d109      	bne.n	8013b5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013b46:	4a27      	ldr	r2, [pc, #156]	; (8013be4 <prvAddNewTaskToReadyList+0xbc>)
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013b4c:	4b24      	ldr	r3, [pc, #144]	; (8013be0 <prvAddNewTaskToReadyList+0xb8>)
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	2b01      	cmp	r3, #1
 8013b52:	d110      	bne.n	8013b76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013b54:	f000 fbc0 	bl	80142d8 <prvInitialiseTaskLists>
 8013b58:	e00d      	b.n	8013b76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013b5a:	4b23      	ldr	r3, [pc, #140]	; (8013be8 <prvAddNewTaskToReadyList+0xc0>)
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d109      	bne.n	8013b76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013b62:	4b20      	ldr	r3, [pc, #128]	; (8013be4 <prvAddNewTaskToReadyList+0xbc>)
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b6c:	429a      	cmp	r2, r3
 8013b6e:	d802      	bhi.n	8013b76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013b70:	4a1c      	ldr	r2, [pc, #112]	; (8013be4 <prvAddNewTaskToReadyList+0xbc>)
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013b76:	4b1d      	ldr	r3, [pc, #116]	; (8013bec <prvAddNewTaskToReadyList+0xc4>)
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	3301      	adds	r3, #1
 8013b7c:	4a1b      	ldr	r2, [pc, #108]	; (8013bec <prvAddNewTaskToReadyList+0xc4>)
 8013b7e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b84:	2201      	movs	r2, #1
 8013b86:	409a      	lsls	r2, r3
 8013b88:	4b19      	ldr	r3, [pc, #100]	; (8013bf0 <prvAddNewTaskToReadyList+0xc8>)
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	4313      	orrs	r3, r2
 8013b8e:	4a18      	ldr	r2, [pc, #96]	; (8013bf0 <prvAddNewTaskToReadyList+0xc8>)
 8013b90:	6013      	str	r3, [r2, #0]
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b96:	4613      	mov	r3, r2
 8013b98:	009b      	lsls	r3, r3, #2
 8013b9a:	4413      	add	r3, r2
 8013b9c:	009b      	lsls	r3, r3, #2
 8013b9e:	4a15      	ldr	r2, [pc, #84]	; (8013bf4 <prvAddNewTaskToReadyList+0xcc>)
 8013ba0:	441a      	add	r2, r3
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	3304      	adds	r3, #4
 8013ba6:	4619      	mov	r1, r3
 8013ba8:	4610      	mov	r0, r2
 8013baa:	f7ff f893 	bl	8012cd4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013bae:	f001 f88b 	bl	8014cc8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013bb2:	4b0d      	ldr	r3, [pc, #52]	; (8013be8 <prvAddNewTaskToReadyList+0xc0>)
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d00e      	beq.n	8013bd8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013bba:	4b0a      	ldr	r3, [pc, #40]	; (8013be4 <prvAddNewTaskToReadyList+0xbc>)
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bc4:	429a      	cmp	r2, r3
 8013bc6:	d207      	bcs.n	8013bd8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013bc8:	4b0b      	ldr	r3, [pc, #44]	; (8013bf8 <prvAddNewTaskToReadyList+0xd0>)
 8013bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013bce:	601a      	str	r2, [r3, #0]
 8013bd0:	f3bf 8f4f 	dsb	sy
 8013bd4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013bd8:	bf00      	nop
 8013bda:	3708      	adds	r7, #8
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	bd80      	pop	{r7, pc}
 8013be0:	20002964 	.word	0x20002964
 8013be4:	20002864 	.word	0x20002864
 8013be8:	20002970 	.word	0x20002970
 8013bec:	20002980 	.word	0x20002980
 8013bf0:	2000296c 	.word	0x2000296c
 8013bf4:	20002868 	.word	0x20002868
 8013bf8:	e000ed04 	.word	0xe000ed04

08013bfc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b084      	sub	sp, #16
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013c04:	2300      	movs	r3, #0
 8013c06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d016      	beq.n	8013c3c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013c0e:	4b13      	ldr	r3, [pc, #76]	; (8013c5c <vTaskDelay+0x60>)
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d009      	beq.n	8013c2a <vTaskDelay+0x2e>
 8013c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c1a:	f383 8811 	msr	BASEPRI, r3
 8013c1e:	f3bf 8f6f 	isb	sy
 8013c22:	f3bf 8f4f 	dsb	sy
 8013c26:	60bb      	str	r3, [r7, #8]
 8013c28:	e7fe      	b.n	8013c28 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8013c2a:	f000 f879 	bl	8013d20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013c2e:	2100      	movs	r1, #0
 8013c30:	6878      	ldr	r0, [r7, #4]
 8013c32:	f000 fe91 	bl	8014958 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013c36:	f000 f881 	bl	8013d3c <xTaskResumeAll>
 8013c3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d107      	bne.n	8013c52 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8013c42:	4b07      	ldr	r3, [pc, #28]	; (8013c60 <vTaskDelay+0x64>)
 8013c44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c48:	601a      	str	r2, [r3, #0]
 8013c4a:	f3bf 8f4f 	dsb	sy
 8013c4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013c52:	bf00      	nop
 8013c54:	3710      	adds	r7, #16
 8013c56:	46bd      	mov	sp, r7
 8013c58:	bd80      	pop	{r7, pc}
 8013c5a:	bf00      	nop
 8013c5c:	2000298c 	.word	0x2000298c
 8013c60:	e000ed04 	.word	0xe000ed04

08013c64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b08a      	sub	sp, #40	; 0x28
 8013c68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013c6e:	2300      	movs	r3, #0
 8013c70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013c72:	463a      	mov	r2, r7
 8013c74:	1d39      	adds	r1, r7, #4
 8013c76:	f107 0308 	add.w	r3, r7, #8
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	f7ee fc76 	bl	800256c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013c80:	6839      	ldr	r1, [r7, #0]
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	68ba      	ldr	r2, [r7, #8]
 8013c86:	9202      	str	r2, [sp, #8]
 8013c88:	9301      	str	r3, [sp, #4]
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	9300      	str	r3, [sp, #0]
 8013c8e:	2300      	movs	r3, #0
 8013c90:	460a      	mov	r2, r1
 8013c92:	491d      	ldr	r1, [pc, #116]	; (8013d08 <vTaskStartScheduler+0xa4>)
 8013c94:	481d      	ldr	r0, [pc, #116]	; (8013d0c <vTaskStartScheduler+0xa8>)
 8013c96:	f7ff fe22 	bl	80138de <xTaskCreateStatic>
 8013c9a:	4602      	mov	r2, r0
 8013c9c:	4b1c      	ldr	r3, [pc, #112]	; (8013d10 <vTaskStartScheduler+0xac>)
 8013c9e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013ca0:	4b1b      	ldr	r3, [pc, #108]	; (8013d10 <vTaskStartScheduler+0xac>)
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d002      	beq.n	8013cae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013ca8:	2301      	movs	r3, #1
 8013caa:	617b      	str	r3, [r7, #20]
 8013cac:	e001      	b.n	8013cb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013cae:	2300      	movs	r3, #0
 8013cb0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013cb2:	697b      	ldr	r3, [r7, #20]
 8013cb4:	2b01      	cmp	r3, #1
 8013cb6:	d115      	bne.n	8013ce4 <vTaskStartScheduler+0x80>
 8013cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cbc:	f383 8811 	msr	BASEPRI, r3
 8013cc0:	f3bf 8f6f 	isb	sy
 8013cc4:	f3bf 8f4f 	dsb	sy
 8013cc8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013cca:	4b12      	ldr	r3, [pc, #72]	; (8013d14 <vTaskStartScheduler+0xb0>)
 8013ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8013cd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013cd2:	4b11      	ldr	r3, [pc, #68]	; (8013d18 <vTaskStartScheduler+0xb4>)
 8013cd4:	2201      	movs	r2, #1
 8013cd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013cd8:	4b10      	ldr	r3, [pc, #64]	; (8013d1c <vTaskStartScheduler+0xb8>)
 8013cda:	2200      	movs	r2, #0
 8013cdc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013cde:	f000 ff27 	bl	8014b30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013ce2:	e00d      	b.n	8013d00 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013ce4:	697b      	ldr	r3, [r7, #20]
 8013ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cea:	d109      	bne.n	8013d00 <vTaskStartScheduler+0x9c>
 8013cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cf0:	f383 8811 	msr	BASEPRI, r3
 8013cf4:	f3bf 8f6f 	isb	sy
 8013cf8:	f3bf 8f4f 	dsb	sy
 8013cfc:	60fb      	str	r3, [r7, #12]
 8013cfe:	e7fe      	b.n	8013cfe <vTaskStartScheduler+0x9a>
}
 8013d00:	bf00      	nop
 8013d02:	3718      	adds	r7, #24
 8013d04:	46bd      	mov	sp, r7
 8013d06:	bd80      	pop	{r7, pc}
 8013d08:	0801b4b4 	.word	0x0801b4b4
 8013d0c:	080142a9 	.word	0x080142a9
 8013d10:	20002988 	.word	0x20002988
 8013d14:	20002984 	.word	0x20002984
 8013d18:	20002970 	.word	0x20002970
 8013d1c:	20002968 	.word	0x20002968

08013d20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013d20:	b480      	push	{r7}
 8013d22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013d24:	4b04      	ldr	r3, [pc, #16]	; (8013d38 <vTaskSuspendAll+0x18>)
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	3301      	adds	r3, #1
 8013d2a:	4a03      	ldr	r2, [pc, #12]	; (8013d38 <vTaskSuspendAll+0x18>)
 8013d2c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013d2e:	bf00      	nop
 8013d30:	46bd      	mov	sp, r7
 8013d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d36:	4770      	bx	lr
 8013d38:	2000298c 	.word	0x2000298c

08013d3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	b084      	sub	sp, #16
 8013d40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013d42:	2300      	movs	r3, #0
 8013d44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013d46:	2300      	movs	r3, #0
 8013d48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013d4a:	4b41      	ldr	r3, [pc, #260]	; (8013e50 <xTaskResumeAll+0x114>)
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d109      	bne.n	8013d66 <xTaskResumeAll+0x2a>
 8013d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d56:	f383 8811 	msr	BASEPRI, r3
 8013d5a:	f3bf 8f6f 	isb	sy
 8013d5e:	f3bf 8f4f 	dsb	sy
 8013d62:	603b      	str	r3, [r7, #0]
 8013d64:	e7fe      	b.n	8013d64 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013d66:	f000 ff81 	bl	8014c6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013d6a:	4b39      	ldr	r3, [pc, #228]	; (8013e50 <xTaskResumeAll+0x114>)
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	3b01      	subs	r3, #1
 8013d70:	4a37      	ldr	r2, [pc, #220]	; (8013e50 <xTaskResumeAll+0x114>)
 8013d72:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013d74:	4b36      	ldr	r3, [pc, #216]	; (8013e50 <xTaskResumeAll+0x114>)
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d161      	bne.n	8013e40 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013d7c:	4b35      	ldr	r3, [pc, #212]	; (8013e54 <xTaskResumeAll+0x118>)
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d05d      	beq.n	8013e40 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013d84:	e02e      	b.n	8013de4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d86:	4b34      	ldr	r3, [pc, #208]	; (8013e58 <xTaskResumeAll+0x11c>)
 8013d88:	68db      	ldr	r3, [r3, #12]
 8013d8a:	68db      	ldr	r3, [r3, #12]
 8013d8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	3318      	adds	r3, #24
 8013d92:	4618      	mov	r0, r3
 8013d94:	f7fe fffb 	bl	8012d8e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	3304      	adds	r3, #4
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	f7fe fff6 	bl	8012d8e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013da6:	2201      	movs	r2, #1
 8013da8:	409a      	lsls	r2, r3
 8013daa:	4b2c      	ldr	r3, [pc, #176]	; (8013e5c <xTaskResumeAll+0x120>)
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	4313      	orrs	r3, r2
 8013db0:	4a2a      	ldr	r2, [pc, #168]	; (8013e5c <xTaskResumeAll+0x120>)
 8013db2:	6013      	str	r3, [r2, #0]
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013db8:	4613      	mov	r3, r2
 8013dba:	009b      	lsls	r3, r3, #2
 8013dbc:	4413      	add	r3, r2
 8013dbe:	009b      	lsls	r3, r3, #2
 8013dc0:	4a27      	ldr	r2, [pc, #156]	; (8013e60 <xTaskResumeAll+0x124>)
 8013dc2:	441a      	add	r2, r3
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	3304      	adds	r3, #4
 8013dc8:	4619      	mov	r1, r3
 8013dca:	4610      	mov	r0, r2
 8013dcc:	f7fe ff82 	bl	8012cd4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dd4:	4b23      	ldr	r3, [pc, #140]	; (8013e64 <xTaskResumeAll+0x128>)
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dda:	429a      	cmp	r2, r3
 8013ddc:	d302      	bcc.n	8013de4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8013dde:	4b22      	ldr	r3, [pc, #136]	; (8013e68 <xTaskResumeAll+0x12c>)
 8013de0:	2201      	movs	r2, #1
 8013de2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013de4:	4b1c      	ldr	r3, [pc, #112]	; (8013e58 <xTaskResumeAll+0x11c>)
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d1cc      	bne.n	8013d86 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d001      	beq.n	8013df6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013df2:	f000 fb0b 	bl	801440c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013df6:	4b1d      	ldr	r3, [pc, #116]	; (8013e6c <xTaskResumeAll+0x130>)
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d010      	beq.n	8013e24 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013e02:	f000 f837 	bl	8013e74 <xTaskIncrementTick>
 8013e06:	4603      	mov	r3, r0
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d002      	beq.n	8013e12 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8013e0c:	4b16      	ldr	r3, [pc, #88]	; (8013e68 <xTaskResumeAll+0x12c>)
 8013e0e:	2201      	movs	r2, #1
 8013e10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	3b01      	subs	r3, #1
 8013e16:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d1f1      	bne.n	8013e02 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8013e1e:	4b13      	ldr	r3, [pc, #76]	; (8013e6c <xTaskResumeAll+0x130>)
 8013e20:	2200      	movs	r2, #0
 8013e22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013e24:	4b10      	ldr	r3, [pc, #64]	; (8013e68 <xTaskResumeAll+0x12c>)
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d009      	beq.n	8013e40 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013e2c:	2301      	movs	r3, #1
 8013e2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013e30:	4b0f      	ldr	r3, [pc, #60]	; (8013e70 <xTaskResumeAll+0x134>)
 8013e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e36:	601a      	str	r2, [r3, #0]
 8013e38:	f3bf 8f4f 	dsb	sy
 8013e3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013e40:	f000 ff42 	bl	8014cc8 <vPortExitCritical>

	return xAlreadyYielded;
 8013e44:	68bb      	ldr	r3, [r7, #8]
}
 8013e46:	4618      	mov	r0, r3
 8013e48:	3710      	adds	r7, #16
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	bd80      	pop	{r7, pc}
 8013e4e:	bf00      	nop
 8013e50:	2000298c 	.word	0x2000298c
 8013e54:	20002964 	.word	0x20002964
 8013e58:	20002924 	.word	0x20002924
 8013e5c:	2000296c 	.word	0x2000296c
 8013e60:	20002868 	.word	0x20002868
 8013e64:	20002864 	.word	0x20002864
 8013e68:	20002978 	.word	0x20002978
 8013e6c:	20002974 	.word	0x20002974
 8013e70:	e000ed04 	.word	0xe000ed04

08013e74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b086      	sub	sp, #24
 8013e78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013e7e:	4b4e      	ldr	r3, [pc, #312]	; (8013fb8 <xTaskIncrementTick+0x144>)
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	f040 8087 	bne.w	8013f96 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013e88:	4b4c      	ldr	r3, [pc, #304]	; (8013fbc <xTaskIncrementTick+0x148>)
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	3301      	adds	r3, #1
 8013e8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013e90:	4a4a      	ldr	r2, [pc, #296]	; (8013fbc <xTaskIncrementTick+0x148>)
 8013e92:	693b      	ldr	r3, [r7, #16]
 8013e94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013e96:	693b      	ldr	r3, [r7, #16]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d11f      	bne.n	8013edc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8013e9c:	4b48      	ldr	r3, [pc, #288]	; (8013fc0 <xTaskIncrementTick+0x14c>)
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d009      	beq.n	8013eba <xTaskIncrementTick+0x46>
 8013ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eaa:	f383 8811 	msr	BASEPRI, r3
 8013eae:	f3bf 8f6f 	isb	sy
 8013eb2:	f3bf 8f4f 	dsb	sy
 8013eb6:	603b      	str	r3, [r7, #0]
 8013eb8:	e7fe      	b.n	8013eb8 <xTaskIncrementTick+0x44>
 8013eba:	4b41      	ldr	r3, [pc, #260]	; (8013fc0 <xTaskIncrementTick+0x14c>)
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	60fb      	str	r3, [r7, #12]
 8013ec0:	4b40      	ldr	r3, [pc, #256]	; (8013fc4 <xTaskIncrementTick+0x150>)
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	4a3e      	ldr	r2, [pc, #248]	; (8013fc0 <xTaskIncrementTick+0x14c>)
 8013ec6:	6013      	str	r3, [r2, #0]
 8013ec8:	4a3e      	ldr	r2, [pc, #248]	; (8013fc4 <xTaskIncrementTick+0x150>)
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	6013      	str	r3, [r2, #0]
 8013ece:	4b3e      	ldr	r3, [pc, #248]	; (8013fc8 <xTaskIncrementTick+0x154>)
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	3301      	adds	r3, #1
 8013ed4:	4a3c      	ldr	r2, [pc, #240]	; (8013fc8 <xTaskIncrementTick+0x154>)
 8013ed6:	6013      	str	r3, [r2, #0]
 8013ed8:	f000 fa98 	bl	801440c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013edc:	4b3b      	ldr	r3, [pc, #236]	; (8013fcc <xTaskIncrementTick+0x158>)
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	693a      	ldr	r2, [r7, #16]
 8013ee2:	429a      	cmp	r2, r3
 8013ee4:	d348      	bcc.n	8013f78 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013ee6:	4b36      	ldr	r3, [pc, #216]	; (8013fc0 <xTaskIncrementTick+0x14c>)
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d104      	bne.n	8013efa <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013ef0:	4b36      	ldr	r3, [pc, #216]	; (8013fcc <xTaskIncrementTick+0x158>)
 8013ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8013ef6:	601a      	str	r2, [r3, #0]
					break;
 8013ef8:	e03e      	b.n	8013f78 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013efa:	4b31      	ldr	r3, [pc, #196]	; (8013fc0 <xTaskIncrementTick+0x14c>)
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	68db      	ldr	r3, [r3, #12]
 8013f00:	68db      	ldr	r3, [r3, #12]
 8013f02:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013f04:	68bb      	ldr	r3, [r7, #8]
 8013f06:	685b      	ldr	r3, [r3, #4]
 8013f08:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013f0a:	693a      	ldr	r2, [r7, #16]
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	429a      	cmp	r2, r3
 8013f10:	d203      	bcs.n	8013f1a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013f12:	4a2e      	ldr	r2, [pc, #184]	; (8013fcc <xTaskIncrementTick+0x158>)
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013f18:	e02e      	b.n	8013f78 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013f1a:	68bb      	ldr	r3, [r7, #8]
 8013f1c:	3304      	adds	r3, #4
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f7fe ff35 	bl	8012d8e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013f24:	68bb      	ldr	r3, [r7, #8]
 8013f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d004      	beq.n	8013f36 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013f2c:	68bb      	ldr	r3, [r7, #8]
 8013f2e:	3318      	adds	r3, #24
 8013f30:	4618      	mov	r0, r3
 8013f32:	f7fe ff2c 	bl	8012d8e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013f36:	68bb      	ldr	r3, [r7, #8]
 8013f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f3a:	2201      	movs	r2, #1
 8013f3c:	409a      	lsls	r2, r3
 8013f3e:	4b24      	ldr	r3, [pc, #144]	; (8013fd0 <xTaskIncrementTick+0x15c>)
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	4313      	orrs	r3, r2
 8013f44:	4a22      	ldr	r2, [pc, #136]	; (8013fd0 <xTaskIncrementTick+0x15c>)
 8013f46:	6013      	str	r3, [r2, #0]
 8013f48:	68bb      	ldr	r3, [r7, #8]
 8013f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f4c:	4613      	mov	r3, r2
 8013f4e:	009b      	lsls	r3, r3, #2
 8013f50:	4413      	add	r3, r2
 8013f52:	009b      	lsls	r3, r3, #2
 8013f54:	4a1f      	ldr	r2, [pc, #124]	; (8013fd4 <xTaskIncrementTick+0x160>)
 8013f56:	441a      	add	r2, r3
 8013f58:	68bb      	ldr	r3, [r7, #8]
 8013f5a:	3304      	adds	r3, #4
 8013f5c:	4619      	mov	r1, r3
 8013f5e:	4610      	mov	r0, r2
 8013f60:	f7fe feb8 	bl	8012cd4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013f64:	68bb      	ldr	r3, [r7, #8]
 8013f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f68:	4b1b      	ldr	r3, [pc, #108]	; (8013fd8 <xTaskIncrementTick+0x164>)
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f6e:	429a      	cmp	r2, r3
 8013f70:	d3b9      	bcc.n	8013ee6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8013f72:	2301      	movs	r3, #1
 8013f74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013f76:	e7b6      	b.n	8013ee6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013f78:	4b17      	ldr	r3, [pc, #92]	; (8013fd8 <xTaskIncrementTick+0x164>)
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f7e:	4915      	ldr	r1, [pc, #84]	; (8013fd4 <xTaskIncrementTick+0x160>)
 8013f80:	4613      	mov	r3, r2
 8013f82:	009b      	lsls	r3, r3, #2
 8013f84:	4413      	add	r3, r2
 8013f86:	009b      	lsls	r3, r3, #2
 8013f88:	440b      	add	r3, r1
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	2b01      	cmp	r3, #1
 8013f8e:	d907      	bls.n	8013fa0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8013f90:	2301      	movs	r3, #1
 8013f92:	617b      	str	r3, [r7, #20]
 8013f94:	e004      	b.n	8013fa0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013f96:	4b11      	ldr	r3, [pc, #68]	; (8013fdc <xTaskIncrementTick+0x168>)
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	3301      	adds	r3, #1
 8013f9c:	4a0f      	ldr	r2, [pc, #60]	; (8013fdc <xTaskIncrementTick+0x168>)
 8013f9e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013fa0:	4b0f      	ldr	r3, [pc, #60]	; (8013fe0 <xTaskIncrementTick+0x16c>)
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d001      	beq.n	8013fac <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8013fa8:	2301      	movs	r3, #1
 8013faa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013fac:	697b      	ldr	r3, [r7, #20]
}
 8013fae:	4618      	mov	r0, r3
 8013fb0:	3718      	adds	r7, #24
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bd80      	pop	{r7, pc}
 8013fb6:	bf00      	nop
 8013fb8:	2000298c 	.word	0x2000298c
 8013fbc:	20002968 	.word	0x20002968
 8013fc0:	2000291c 	.word	0x2000291c
 8013fc4:	20002920 	.word	0x20002920
 8013fc8:	2000297c 	.word	0x2000297c
 8013fcc:	20002984 	.word	0x20002984
 8013fd0:	2000296c 	.word	0x2000296c
 8013fd4:	20002868 	.word	0x20002868
 8013fd8:	20002864 	.word	0x20002864
 8013fdc:	20002974 	.word	0x20002974
 8013fe0:	20002978 	.word	0x20002978

08013fe4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013fe4:	b480      	push	{r7}
 8013fe6:	b087      	sub	sp, #28
 8013fe8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013fea:	4b26      	ldr	r3, [pc, #152]	; (8014084 <vTaskSwitchContext+0xa0>)
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d003      	beq.n	8013ffa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013ff2:	4b25      	ldr	r3, [pc, #148]	; (8014088 <vTaskSwitchContext+0xa4>)
 8013ff4:	2201      	movs	r2, #1
 8013ff6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013ff8:	e03e      	b.n	8014078 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8013ffa:	4b23      	ldr	r3, [pc, #140]	; (8014088 <vTaskSwitchContext+0xa4>)
 8013ffc:	2200      	movs	r2, #0
 8013ffe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014000:	4b22      	ldr	r3, [pc, #136]	; (801408c <vTaskSwitchContext+0xa8>)
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	fab3 f383 	clz	r3, r3
 801400c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801400e:	7afb      	ldrb	r3, [r7, #11]
 8014010:	f1c3 031f 	rsb	r3, r3, #31
 8014014:	617b      	str	r3, [r7, #20]
 8014016:	491e      	ldr	r1, [pc, #120]	; (8014090 <vTaskSwitchContext+0xac>)
 8014018:	697a      	ldr	r2, [r7, #20]
 801401a:	4613      	mov	r3, r2
 801401c:	009b      	lsls	r3, r3, #2
 801401e:	4413      	add	r3, r2
 8014020:	009b      	lsls	r3, r3, #2
 8014022:	440b      	add	r3, r1
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d109      	bne.n	801403e <vTaskSwitchContext+0x5a>
	__asm volatile
 801402a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801402e:	f383 8811 	msr	BASEPRI, r3
 8014032:	f3bf 8f6f 	isb	sy
 8014036:	f3bf 8f4f 	dsb	sy
 801403a:	607b      	str	r3, [r7, #4]
 801403c:	e7fe      	b.n	801403c <vTaskSwitchContext+0x58>
 801403e:	697a      	ldr	r2, [r7, #20]
 8014040:	4613      	mov	r3, r2
 8014042:	009b      	lsls	r3, r3, #2
 8014044:	4413      	add	r3, r2
 8014046:	009b      	lsls	r3, r3, #2
 8014048:	4a11      	ldr	r2, [pc, #68]	; (8014090 <vTaskSwitchContext+0xac>)
 801404a:	4413      	add	r3, r2
 801404c:	613b      	str	r3, [r7, #16]
 801404e:	693b      	ldr	r3, [r7, #16]
 8014050:	685b      	ldr	r3, [r3, #4]
 8014052:	685a      	ldr	r2, [r3, #4]
 8014054:	693b      	ldr	r3, [r7, #16]
 8014056:	605a      	str	r2, [r3, #4]
 8014058:	693b      	ldr	r3, [r7, #16]
 801405a:	685a      	ldr	r2, [r3, #4]
 801405c:	693b      	ldr	r3, [r7, #16]
 801405e:	3308      	adds	r3, #8
 8014060:	429a      	cmp	r2, r3
 8014062:	d104      	bne.n	801406e <vTaskSwitchContext+0x8a>
 8014064:	693b      	ldr	r3, [r7, #16]
 8014066:	685b      	ldr	r3, [r3, #4]
 8014068:	685a      	ldr	r2, [r3, #4]
 801406a:	693b      	ldr	r3, [r7, #16]
 801406c:	605a      	str	r2, [r3, #4]
 801406e:	693b      	ldr	r3, [r7, #16]
 8014070:	685b      	ldr	r3, [r3, #4]
 8014072:	68db      	ldr	r3, [r3, #12]
 8014074:	4a07      	ldr	r2, [pc, #28]	; (8014094 <vTaskSwitchContext+0xb0>)
 8014076:	6013      	str	r3, [r2, #0]
}
 8014078:	bf00      	nop
 801407a:	371c      	adds	r7, #28
 801407c:	46bd      	mov	sp, r7
 801407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014082:	4770      	bx	lr
 8014084:	2000298c 	.word	0x2000298c
 8014088:	20002978 	.word	0x20002978
 801408c:	2000296c 	.word	0x2000296c
 8014090:	20002868 	.word	0x20002868
 8014094:	20002864 	.word	0x20002864

08014098 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014098:	b580      	push	{r7, lr}
 801409a:	b084      	sub	sp, #16
 801409c:	af00      	add	r7, sp, #0
 801409e:	6078      	str	r0, [r7, #4]
 80140a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d109      	bne.n	80140bc <vTaskPlaceOnEventList+0x24>
 80140a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140ac:	f383 8811 	msr	BASEPRI, r3
 80140b0:	f3bf 8f6f 	isb	sy
 80140b4:	f3bf 8f4f 	dsb	sy
 80140b8:	60fb      	str	r3, [r7, #12]
 80140ba:	e7fe      	b.n	80140ba <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80140bc:	4b07      	ldr	r3, [pc, #28]	; (80140dc <vTaskPlaceOnEventList+0x44>)
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	3318      	adds	r3, #24
 80140c2:	4619      	mov	r1, r3
 80140c4:	6878      	ldr	r0, [r7, #4]
 80140c6:	f7fe fe29 	bl	8012d1c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80140ca:	2101      	movs	r1, #1
 80140cc:	6838      	ldr	r0, [r7, #0]
 80140ce:	f000 fc43 	bl	8014958 <prvAddCurrentTaskToDelayedList>
}
 80140d2:	bf00      	nop
 80140d4:	3710      	adds	r7, #16
 80140d6:	46bd      	mov	sp, r7
 80140d8:	bd80      	pop	{r7, pc}
 80140da:	bf00      	nop
 80140dc:	20002864 	.word	0x20002864

080140e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80140e0:	b580      	push	{r7, lr}
 80140e2:	b086      	sub	sp, #24
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	68db      	ldr	r3, [r3, #12]
 80140ec:	68db      	ldr	r3, [r3, #12]
 80140ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80140f0:	693b      	ldr	r3, [r7, #16]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d109      	bne.n	801410a <xTaskRemoveFromEventList+0x2a>
 80140f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140fa:	f383 8811 	msr	BASEPRI, r3
 80140fe:	f3bf 8f6f 	isb	sy
 8014102:	f3bf 8f4f 	dsb	sy
 8014106:	60fb      	str	r3, [r7, #12]
 8014108:	e7fe      	b.n	8014108 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801410a:	693b      	ldr	r3, [r7, #16]
 801410c:	3318      	adds	r3, #24
 801410e:	4618      	mov	r0, r3
 8014110:	f7fe fe3d 	bl	8012d8e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014114:	4b1d      	ldr	r3, [pc, #116]	; (801418c <xTaskRemoveFromEventList+0xac>)
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d11c      	bne.n	8014156 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801411c:	693b      	ldr	r3, [r7, #16]
 801411e:	3304      	adds	r3, #4
 8014120:	4618      	mov	r0, r3
 8014122:	f7fe fe34 	bl	8012d8e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014126:	693b      	ldr	r3, [r7, #16]
 8014128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801412a:	2201      	movs	r2, #1
 801412c:	409a      	lsls	r2, r3
 801412e:	4b18      	ldr	r3, [pc, #96]	; (8014190 <xTaskRemoveFromEventList+0xb0>)
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	4313      	orrs	r3, r2
 8014134:	4a16      	ldr	r2, [pc, #88]	; (8014190 <xTaskRemoveFromEventList+0xb0>)
 8014136:	6013      	str	r3, [r2, #0]
 8014138:	693b      	ldr	r3, [r7, #16]
 801413a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801413c:	4613      	mov	r3, r2
 801413e:	009b      	lsls	r3, r3, #2
 8014140:	4413      	add	r3, r2
 8014142:	009b      	lsls	r3, r3, #2
 8014144:	4a13      	ldr	r2, [pc, #76]	; (8014194 <xTaskRemoveFromEventList+0xb4>)
 8014146:	441a      	add	r2, r3
 8014148:	693b      	ldr	r3, [r7, #16]
 801414a:	3304      	adds	r3, #4
 801414c:	4619      	mov	r1, r3
 801414e:	4610      	mov	r0, r2
 8014150:	f7fe fdc0 	bl	8012cd4 <vListInsertEnd>
 8014154:	e005      	b.n	8014162 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014156:	693b      	ldr	r3, [r7, #16]
 8014158:	3318      	adds	r3, #24
 801415a:	4619      	mov	r1, r3
 801415c:	480e      	ldr	r0, [pc, #56]	; (8014198 <xTaskRemoveFromEventList+0xb8>)
 801415e:	f7fe fdb9 	bl	8012cd4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014162:	693b      	ldr	r3, [r7, #16]
 8014164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014166:	4b0d      	ldr	r3, [pc, #52]	; (801419c <xTaskRemoveFromEventList+0xbc>)
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801416c:	429a      	cmp	r2, r3
 801416e:	d905      	bls.n	801417c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014170:	2301      	movs	r3, #1
 8014172:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014174:	4b0a      	ldr	r3, [pc, #40]	; (80141a0 <xTaskRemoveFromEventList+0xc0>)
 8014176:	2201      	movs	r2, #1
 8014178:	601a      	str	r2, [r3, #0]
 801417a:	e001      	b.n	8014180 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 801417c:	2300      	movs	r3, #0
 801417e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014180:	697b      	ldr	r3, [r7, #20]
}
 8014182:	4618      	mov	r0, r3
 8014184:	3718      	adds	r7, #24
 8014186:	46bd      	mov	sp, r7
 8014188:	bd80      	pop	{r7, pc}
 801418a:	bf00      	nop
 801418c:	2000298c 	.word	0x2000298c
 8014190:	2000296c 	.word	0x2000296c
 8014194:	20002868 	.word	0x20002868
 8014198:	20002924 	.word	0x20002924
 801419c:	20002864 	.word	0x20002864
 80141a0:	20002978 	.word	0x20002978

080141a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80141a4:	b480      	push	{r7}
 80141a6:	b083      	sub	sp, #12
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80141ac:	4b06      	ldr	r3, [pc, #24]	; (80141c8 <vTaskInternalSetTimeOutState+0x24>)
 80141ae:	681a      	ldr	r2, [r3, #0]
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80141b4:	4b05      	ldr	r3, [pc, #20]	; (80141cc <vTaskInternalSetTimeOutState+0x28>)
 80141b6:	681a      	ldr	r2, [r3, #0]
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	605a      	str	r2, [r3, #4]
}
 80141bc:	bf00      	nop
 80141be:	370c      	adds	r7, #12
 80141c0:	46bd      	mov	sp, r7
 80141c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c6:	4770      	bx	lr
 80141c8:	2000297c 	.word	0x2000297c
 80141cc:	20002968 	.word	0x20002968

080141d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b088      	sub	sp, #32
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
 80141d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d109      	bne.n	80141f4 <xTaskCheckForTimeOut+0x24>
 80141e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141e4:	f383 8811 	msr	BASEPRI, r3
 80141e8:	f3bf 8f6f 	isb	sy
 80141ec:	f3bf 8f4f 	dsb	sy
 80141f0:	613b      	str	r3, [r7, #16]
 80141f2:	e7fe      	b.n	80141f2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80141f4:	683b      	ldr	r3, [r7, #0]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d109      	bne.n	801420e <xTaskCheckForTimeOut+0x3e>
 80141fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141fe:	f383 8811 	msr	BASEPRI, r3
 8014202:	f3bf 8f6f 	isb	sy
 8014206:	f3bf 8f4f 	dsb	sy
 801420a:	60fb      	str	r3, [r7, #12]
 801420c:	e7fe      	b.n	801420c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801420e:	f000 fd2d 	bl	8014c6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014212:	4b1d      	ldr	r3, [pc, #116]	; (8014288 <xTaskCheckForTimeOut+0xb8>)
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	685b      	ldr	r3, [r3, #4]
 801421c:	69ba      	ldr	r2, [r7, #24]
 801421e:	1ad3      	subs	r3, r2, r3
 8014220:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014222:	683b      	ldr	r3, [r7, #0]
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	f1b3 3fff 	cmp.w	r3, #4294967295
 801422a:	d102      	bne.n	8014232 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801422c:	2300      	movs	r3, #0
 801422e:	61fb      	str	r3, [r7, #28]
 8014230:	e023      	b.n	801427a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	681a      	ldr	r2, [r3, #0]
 8014236:	4b15      	ldr	r3, [pc, #84]	; (801428c <xTaskCheckForTimeOut+0xbc>)
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	429a      	cmp	r2, r3
 801423c:	d007      	beq.n	801424e <xTaskCheckForTimeOut+0x7e>
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	685b      	ldr	r3, [r3, #4]
 8014242:	69ba      	ldr	r2, [r7, #24]
 8014244:	429a      	cmp	r2, r3
 8014246:	d302      	bcc.n	801424e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014248:	2301      	movs	r3, #1
 801424a:	61fb      	str	r3, [r7, #28]
 801424c:	e015      	b.n	801427a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801424e:	683b      	ldr	r3, [r7, #0]
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	697a      	ldr	r2, [r7, #20]
 8014254:	429a      	cmp	r2, r3
 8014256:	d20b      	bcs.n	8014270 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014258:	683b      	ldr	r3, [r7, #0]
 801425a:	681a      	ldr	r2, [r3, #0]
 801425c:	697b      	ldr	r3, [r7, #20]
 801425e:	1ad2      	subs	r2, r2, r3
 8014260:	683b      	ldr	r3, [r7, #0]
 8014262:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014264:	6878      	ldr	r0, [r7, #4]
 8014266:	f7ff ff9d 	bl	80141a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801426a:	2300      	movs	r3, #0
 801426c:	61fb      	str	r3, [r7, #28]
 801426e:	e004      	b.n	801427a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8014270:	683b      	ldr	r3, [r7, #0]
 8014272:	2200      	movs	r2, #0
 8014274:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014276:	2301      	movs	r3, #1
 8014278:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801427a:	f000 fd25 	bl	8014cc8 <vPortExitCritical>

	return xReturn;
 801427e:	69fb      	ldr	r3, [r7, #28]
}
 8014280:	4618      	mov	r0, r3
 8014282:	3720      	adds	r7, #32
 8014284:	46bd      	mov	sp, r7
 8014286:	bd80      	pop	{r7, pc}
 8014288:	20002968 	.word	0x20002968
 801428c:	2000297c 	.word	0x2000297c

08014290 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014290:	b480      	push	{r7}
 8014292:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014294:	4b03      	ldr	r3, [pc, #12]	; (80142a4 <vTaskMissedYield+0x14>)
 8014296:	2201      	movs	r2, #1
 8014298:	601a      	str	r2, [r3, #0]
}
 801429a:	bf00      	nop
 801429c:	46bd      	mov	sp, r7
 801429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a2:	4770      	bx	lr
 80142a4:	20002978 	.word	0x20002978

080142a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b082      	sub	sp, #8
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80142b0:	f000 f852 	bl	8014358 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80142b4:	4b06      	ldr	r3, [pc, #24]	; (80142d0 <prvIdleTask+0x28>)
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	2b01      	cmp	r3, #1
 80142ba:	d9f9      	bls.n	80142b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80142bc:	4b05      	ldr	r3, [pc, #20]	; (80142d4 <prvIdleTask+0x2c>)
 80142be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142c2:	601a      	str	r2, [r3, #0]
 80142c4:	f3bf 8f4f 	dsb	sy
 80142c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80142cc:	e7f0      	b.n	80142b0 <prvIdleTask+0x8>
 80142ce:	bf00      	nop
 80142d0:	20002868 	.word	0x20002868
 80142d4:	e000ed04 	.word	0xe000ed04

080142d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b082      	sub	sp, #8
 80142dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80142de:	2300      	movs	r3, #0
 80142e0:	607b      	str	r3, [r7, #4]
 80142e2:	e00c      	b.n	80142fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80142e4:	687a      	ldr	r2, [r7, #4]
 80142e6:	4613      	mov	r3, r2
 80142e8:	009b      	lsls	r3, r3, #2
 80142ea:	4413      	add	r3, r2
 80142ec:	009b      	lsls	r3, r3, #2
 80142ee:	4a12      	ldr	r2, [pc, #72]	; (8014338 <prvInitialiseTaskLists+0x60>)
 80142f0:	4413      	add	r3, r2
 80142f2:	4618      	mov	r0, r3
 80142f4:	f7fe fcc1 	bl	8012c7a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	3301      	adds	r3, #1
 80142fc:	607b      	str	r3, [r7, #4]
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	2b06      	cmp	r3, #6
 8014302:	d9ef      	bls.n	80142e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014304:	480d      	ldr	r0, [pc, #52]	; (801433c <prvInitialiseTaskLists+0x64>)
 8014306:	f7fe fcb8 	bl	8012c7a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801430a:	480d      	ldr	r0, [pc, #52]	; (8014340 <prvInitialiseTaskLists+0x68>)
 801430c:	f7fe fcb5 	bl	8012c7a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014310:	480c      	ldr	r0, [pc, #48]	; (8014344 <prvInitialiseTaskLists+0x6c>)
 8014312:	f7fe fcb2 	bl	8012c7a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014316:	480c      	ldr	r0, [pc, #48]	; (8014348 <prvInitialiseTaskLists+0x70>)
 8014318:	f7fe fcaf 	bl	8012c7a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801431c:	480b      	ldr	r0, [pc, #44]	; (801434c <prvInitialiseTaskLists+0x74>)
 801431e:	f7fe fcac 	bl	8012c7a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014322:	4b0b      	ldr	r3, [pc, #44]	; (8014350 <prvInitialiseTaskLists+0x78>)
 8014324:	4a05      	ldr	r2, [pc, #20]	; (801433c <prvInitialiseTaskLists+0x64>)
 8014326:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014328:	4b0a      	ldr	r3, [pc, #40]	; (8014354 <prvInitialiseTaskLists+0x7c>)
 801432a:	4a05      	ldr	r2, [pc, #20]	; (8014340 <prvInitialiseTaskLists+0x68>)
 801432c:	601a      	str	r2, [r3, #0]
}
 801432e:	bf00      	nop
 8014330:	3708      	adds	r7, #8
 8014332:	46bd      	mov	sp, r7
 8014334:	bd80      	pop	{r7, pc}
 8014336:	bf00      	nop
 8014338:	20002868 	.word	0x20002868
 801433c:	200028f4 	.word	0x200028f4
 8014340:	20002908 	.word	0x20002908
 8014344:	20002924 	.word	0x20002924
 8014348:	20002938 	.word	0x20002938
 801434c:	20002950 	.word	0x20002950
 8014350:	2000291c 	.word	0x2000291c
 8014354:	20002920 	.word	0x20002920

08014358 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014358:	b580      	push	{r7, lr}
 801435a:	b082      	sub	sp, #8
 801435c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801435e:	e019      	b.n	8014394 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014360:	f000 fc84 	bl	8014c6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014364:	4b0f      	ldr	r3, [pc, #60]	; (80143a4 <prvCheckTasksWaitingTermination+0x4c>)
 8014366:	68db      	ldr	r3, [r3, #12]
 8014368:	68db      	ldr	r3, [r3, #12]
 801436a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	3304      	adds	r3, #4
 8014370:	4618      	mov	r0, r3
 8014372:	f7fe fd0c 	bl	8012d8e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014376:	4b0c      	ldr	r3, [pc, #48]	; (80143a8 <prvCheckTasksWaitingTermination+0x50>)
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	3b01      	subs	r3, #1
 801437c:	4a0a      	ldr	r2, [pc, #40]	; (80143a8 <prvCheckTasksWaitingTermination+0x50>)
 801437e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014380:	4b0a      	ldr	r3, [pc, #40]	; (80143ac <prvCheckTasksWaitingTermination+0x54>)
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	3b01      	subs	r3, #1
 8014386:	4a09      	ldr	r2, [pc, #36]	; (80143ac <prvCheckTasksWaitingTermination+0x54>)
 8014388:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801438a:	f000 fc9d 	bl	8014cc8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801438e:	6878      	ldr	r0, [r7, #4]
 8014390:	f000 f80e 	bl	80143b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014394:	4b05      	ldr	r3, [pc, #20]	; (80143ac <prvCheckTasksWaitingTermination+0x54>)
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	2b00      	cmp	r3, #0
 801439a:	d1e1      	bne.n	8014360 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801439c:	bf00      	nop
 801439e:	3708      	adds	r7, #8
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bd80      	pop	{r7, pc}
 80143a4:	20002938 	.word	0x20002938
 80143a8:	20002964 	.word	0x20002964
 80143ac:	2000294c 	.word	0x2000294c

080143b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b084      	sub	sp, #16
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d108      	bne.n	80143d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143c6:	4618      	mov	r0, r3
 80143c8:	f000 fe2c 	bl	8015024 <vPortFree>
				vPortFree( pxTCB );
 80143cc:	6878      	ldr	r0, [r7, #4]
 80143ce:	f000 fe29 	bl	8015024 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80143d2:	e017      	b.n	8014404 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80143da:	2b01      	cmp	r3, #1
 80143dc:	d103      	bne.n	80143e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80143de:	6878      	ldr	r0, [r7, #4]
 80143e0:	f000 fe20 	bl	8015024 <vPortFree>
	}
 80143e4:	e00e      	b.n	8014404 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80143ec:	2b02      	cmp	r3, #2
 80143ee:	d009      	beq.n	8014404 <prvDeleteTCB+0x54>
 80143f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143f4:	f383 8811 	msr	BASEPRI, r3
 80143f8:	f3bf 8f6f 	isb	sy
 80143fc:	f3bf 8f4f 	dsb	sy
 8014400:	60fb      	str	r3, [r7, #12]
 8014402:	e7fe      	b.n	8014402 <prvDeleteTCB+0x52>
	}
 8014404:	bf00      	nop
 8014406:	3710      	adds	r7, #16
 8014408:	46bd      	mov	sp, r7
 801440a:	bd80      	pop	{r7, pc}

0801440c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801440c:	b480      	push	{r7}
 801440e:	b083      	sub	sp, #12
 8014410:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014412:	4b0c      	ldr	r3, [pc, #48]	; (8014444 <prvResetNextTaskUnblockTime+0x38>)
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d104      	bne.n	8014426 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801441c:	4b0a      	ldr	r3, [pc, #40]	; (8014448 <prvResetNextTaskUnblockTime+0x3c>)
 801441e:	f04f 32ff 	mov.w	r2, #4294967295
 8014422:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014424:	e008      	b.n	8014438 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014426:	4b07      	ldr	r3, [pc, #28]	; (8014444 <prvResetNextTaskUnblockTime+0x38>)
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	68db      	ldr	r3, [r3, #12]
 801442c:	68db      	ldr	r3, [r3, #12]
 801442e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	685b      	ldr	r3, [r3, #4]
 8014434:	4a04      	ldr	r2, [pc, #16]	; (8014448 <prvResetNextTaskUnblockTime+0x3c>)
 8014436:	6013      	str	r3, [r2, #0]
}
 8014438:	bf00      	nop
 801443a:	370c      	adds	r7, #12
 801443c:	46bd      	mov	sp, r7
 801443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014442:	4770      	bx	lr
 8014444:	2000291c 	.word	0x2000291c
 8014448:	20002984 	.word	0x20002984

0801444c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801444c:	b480      	push	{r7}
 801444e:	b083      	sub	sp, #12
 8014450:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014452:	4b0b      	ldr	r3, [pc, #44]	; (8014480 <xTaskGetSchedulerState+0x34>)
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d102      	bne.n	8014460 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801445a:	2301      	movs	r3, #1
 801445c:	607b      	str	r3, [r7, #4]
 801445e:	e008      	b.n	8014472 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014460:	4b08      	ldr	r3, [pc, #32]	; (8014484 <xTaskGetSchedulerState+0x38>)
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d102      	bne.n	801446e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014468:	2302      	movs	r3, #2
 801446a:	607b      	str	r3, [r7, #4]
 801446c:	e001      	b.n	8014472 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801446e:	2300      	movs	r3, #0
 8014470:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014472:	687b      	ldr	r3, [r7, #4]
	}
 8014474:	4618      	mov	r0, r3
 8014476:	370c      	adds	r7, #12
 8014478:	46bd      	mov	sp, r7
 801447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801447e:	4770      	bx	lr
 8014480:	20002970 	.word	0x20002970
 8014484:	2000298c 	.word	0x2000298c

08014488 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014488:	b580      	push	{r7, lr}
 801448a:	b086      	sub	sp, #24
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014494:	2300      	movs	r3, #0
 8014496:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d06c      	beq.n	8014578 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801449e:	4b39      	ldr	r3, [pc, #228]	; (8014584 <xTaskPriorityDisinherit+0xfc>)
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	693a      	ldr	r2, [r7, #16]
 80144a4:	429a      	cmp	r2, r3
 80144a6:	d009      	beq.n	80144bc <xTaskPriorityDisinherit+0x34>
 80144a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144ac:	f383 8811 	msr	BASEPRI, r3
 80144b0:	f3bf 8f6f 	isb	sy
 80144b4:	f3bf 8f4f 	dsb	sy
 80144b8:	60fb      	str	r3, [r7, #12]
 80144ba:	e7fe      	b.n	80144ba <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80144bc:	693b      	ldr	r3, [r7, #16]
 80144be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d109      	bne.n	80144d8 <xTaskPriorityDisinherit+0x50>
 80144c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144c8:	f383 8811 	msr	BASEPRI, r3
 80144cc:	f3bf 8f6f 	isb	sy
 80144d0:	f3bf 8f4f 	dsb	sy
 80144d4:	60bb      	str	r3, [r7, #8]
 80144d6:	e7fe      	b.n	80144d6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80144d8:	693b      	ldr	r3, [r7, #16]
 80144da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80144dc:	1e5a      	subs	r2, r3, #1
 80144de:	693b      	ldr	r3, [r7, #16]
 80144e0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80144e2:	693b      	ldr	r3, [r7, #16]
 80144e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144e6:	693b      	ldr	r3, [r7, #16]
 80144e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80144ea:	429a      	cmp	r2, r3
 80144ec:	d044      	beq.n	8014578 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80144ee:	693b      	ldr	r3, [r7, #16]
 80144f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d140      	bne.n	8014578 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80144f6:	693b      	ldr	r3, [r7, #16]
 80144f8:	3304      	adds	r3, #4
 80144fa:	4618      	mov	r0, r3
 80144fc:	f7fe fc47 	bl	8012d8e <uxListRemove>
 8014500:	4603      	mov	r3, r0
 8014502:	2b00      	cmp	r3, #0
 8014504:	d115      	bne.n	8014532 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014506:	693b      	ldr	r3, [r7, #16]
 8014508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801450a:	491f      	ldr	r1, [pc, #124]	; (8014588 <xTaskPriorityDisinherit+0x100>)
 801450c:	4613      	mov	r3, r2
 801450e:	009b      	lsls	r3, r3, #2
 8014510:	4413      	add	r3, r2
 8014512:	009b      	lsls	r3, r3, #2
 8014514:	440b      	add	r3, r1
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d10a      	bne.n	8014532 <xTaskPriorityDisinherit+0xaa>
 801451c:	693b      	ldr	r3, [r7, #16]
 801451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014520:	2201      	movs	r2, #1
 8014522:	fa02 f303 	lsl.w	r3, r2, r3
 8014526:	43da      	mvns	r2, r3
 8014528:	4b18      	ldr	r3, [pc, #96]	; (801458c <xTaskPriorityDisinherit+0x104>)
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	4013      	ands	r3, r2
 801452e:	4a17      	ldr	r2, [pc, #92]	; (801458c <xTaskPriorityDisinherit+0x104>)
 8014530:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014532:	693b      	ldr	r3, [r7, #16]
 8014534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014536:	693b      	ldr	r3, [r7, #16]
 8014538:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801453a:	693b      	ldr	r3, [r7, #16]
 801453c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801453e:	f1c3 0207 	rsb	r2, r3, #7
 8014542:	693b      	ldr	r3, [r7, #16]
 8014544:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014546:	693b      	ldr	r3, [r7, #16]
 8014548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801454a:	2201      	movs	r2, #1
 801454c:	409a      	lsls	r2, r3
 801454e:	4b0f      	ldr	r3, [pc, #60]	; (801458c <xTaskPriorityDisinherit+0x104>)
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	4313      	orrs	r3, r2
 8014554:	4a0d      	ldr	r2, [pc, #52]	; (801458c <xTaskPriorityDisinherit+0x104>)
 8014556:	6013      	str	r3, [r2, #0]
 8014558:	693b      	ldr	r3, [r7, #16]
 801455a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801455c:	4613      	mov	r3, r2
 801455e:	009b      	lsls	r3, r3, #2
 8014560:	4413      	add	r3, r2
 8014562:	009b      	lsls	r3, r3, #2
 8014564:	4a08      	ldr	r2, [pc, #32]	; (8014588 <xTaskPriorityDisinherit+0x100>)
 8014566:	441a      	add	r2, r3
 8014568:	693b      	ldr	r3, [r7, #16]
 801456a:	3304      	adds	r3, #4
 801456c:	4619      	mov	r1, r3
 801456e:	4610      	mov	r0, r2
 8014570:	f7fe fbb0 	bl	8012cd4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014574:	2301      	movs	r3, #1
 8014576:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014578:	697b      	ldr	r3, [r7, #20]
	}
 801457a:	4618      	mov	r0, r3
 801457c:	3718      	adds	r7, #24
 801457e:	46bd      	mov	sp, r7
 8014580:	bd80      	pop	{r7, pc}
 8014582:	bf00      	nop
 8014584:	20002864 	.word	0x20002864
 8014588:	20002868 	.word	0x20002868
 801458c:	2000296c 	.word	0x2000296c

08014590 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8014590:	b580      	push	{r7, lr}
 8014592:	b086      	sub	sp, #24
 8014594:	af00      	add	r7, sp, #0
 8014596:	60f8      	str	r0, [r7, #12]
 8014598:	60b9      	str	r1, [r7, #8]
 801459a:	607a      	str	r2, [r7, #4]
 801459c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801459e:	f000 fb65 	bl	8014c6c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80145a2:	4b26      	ldr	r3, [pc, #152]	; (801463c <xTaskNotifyWait+0xac>)
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80145aa:	b2db      	uxtb	r3, r3
 80145ac:	2b02      	cmp	r3, #2
 80145ae:	d01a      	beq.n	80145e6 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80145b0:	4b22      	ldr	r3, [pc, #136]	; (801463c <xTaskNotifyWait+0xac>)
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80145b6:	68fa      	ldr	r2, [r7, #12]
 80145b8:	43d2      	mvns	r2, r2
 80145ba:	400a      	ands	r2, r1
 80145bc:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80145be:	4b1f      	ldr	r3, [pc, #124]	; (801463c <xTaskNotifyWait+0xac>)
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	2201      	movs	r2, #1
 80145c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80145c8:	683b      	ldr	r3, [r7, #0]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d00b      	beq.n	80145e6 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80145ce:	2101      	movs	r1, #1
 80145d0:	6838      	ldr	r0, [r7, #0]
 80145d2:	f000 f9c1 	bl	8014958 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80145d6:	4b1a      	ldr	r3, [pc, #104]	; (8014640 <xTaskNotifyWait+0xb0>)
 80145d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80145dc:	601a      	str	r2, [r3, #0]
 80145de:	f3bf 8f4f 	dsb	sy
 80145e2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80145e6:	f000 fb6f 	bl	8014cc8 <vPortExitCritical>

		taskENTER_CRITICAL();
 80145ea:	f000 fb3f 	bl	8014c6c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d004      	beq.n	80145fe <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80145f4:	4b11      	ldr	r3, [pc, #68]	; (801463c <xTaskNotifyWait+0xac>)
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80145fe:	4b0f      	ldr	r3, [pc, #60]	; (801463c <xTaskNotifyWait+0xac>)
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014606:	b2db      	uxtb	r3, r3
 8014608:	2b02      	cmp	r3, #2
 801460a:	d002      	beq.n	8014612 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801460c:	2300      	movs	r3, #0
 801460e:	617b      	str	r3, [r7, #20]
 8014610:	e008      	b.n	8014624 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8014612:	4b0a      	ldr	r3, [pc, #40]	; (801463c <xTaskNotifyWait+0xac>)
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014618:	68ba      	ldr	r2, [r7, #8]
 801461a:	43d2      	mvns	r2, r2
 801461c:	400a      	ands	r2, r1
 801461e:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8014620:	2301      	movs	r3, #1
 8014622:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014624:	4b05      	ldr	r3, [pc, #20]	; (801463c <xTaskNotifyWait+0xac>)
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	2200      	movs	r2, #0
 801462a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 801462e:	f000 fb4b 	bl	8014cc8 <vPortExitCritical>

		return xReturn;
 8014632:	697b      	ldr	r3, [r7, #20]
	}
 8014634:	4618      	mov	r0, r3
 8014636:	3718      	adds	r7, #24
 8014638:	46bd      	mov	sp, r7
 801463a:	bd80      	pop	{r7, pc}
 801463c:	20002864 	.word	0x20002864
 8014640:	e000ed04 	.word	0xe000ed04

08014644 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8014644:	b580      	push	{r7, lr}
 8014646:	b08a      	sub	sp, #40	; 0x28
 8014648:	af00      	add	r7, sp, #0
 801464a:	60f8      	str	r0, [r7, #12]
 801464c:	60b9      	str	r1, [r7, #8]
 801464e:	603b      	str	r3, [r7, #0]
 8014650:	4613      	mov	r3, r2
 8014652:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8014654:	2301      	movs	r3, #1
 8014656:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d109      	bne.n	8014672 <xTaskGenericNotify+0x2e>
 801465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014662:	f383 8811 	msr	BASEPRI, r3
 8014666:	f3bf 8f6f 	isb	sy
 801466a:	f3bf 8f4f 	dsb	sy
 801466e:	61bb      	str	r3, [r7, #24]
 8014670:	e7fe      	b.n	8014670 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8014676:	f000 faf9 	bl	8014c6c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801467a:	683b      	ldr	r3, [r7, #0]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d003      	beq.n	8014688 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014680:	6a3b      	ldr	r3, [r7, #32]
 8014682:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014684:	683b      	ldr	r3, [r7, #0]
 8014686:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014688:	6a3b      	ldr	r3, [r7, #32]
 801468a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801468e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014690:	6a3b      	ldr	r3, [r7, #32]
 8014692:	2202      	movs	r2, #2
 8014694:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8014698:	79fb      	ldrb	r3, [r7, #7]
 801469a:	2b04      	cmp	r3, #4
 801469c:	d827      	bhi.n	80146ee <xTaskGenericNotify+0xaa>
 801469e:	a201      	add	r2, pc, #4	; (adr r2, 80146a4 <xTaskGenericNotify+0x60>)
 80146a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146a4:	0801470d 	.word	0x0801470d
 80146a8:	080146b9 	.word	0x080146b9
 80146ac:	080146c7 	.word	0x080146c7
 80146b0:	080146d3 	.word	0x080146d3
 80146b4:	080146db 	.word	0x080146db
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80146b8:	6a3b      	ldr	r3, [r7, #32]
 80146ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80146bc:	68bb      	ldr	r3, [r7, #8]
 80146be:	431a      	orrs	r2, r3
 80146c0:	6a3b      	ldr	r3, [r7, #32]
 80146c2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80146c4:	e025      	b.n	8014712 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80146c6:	6a3b      	ldr	r3, [r7, #32]
 80146c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80146ca:	1c5a      	adds	r2, r3, #1
 80146cc:	6a3b      	ldr	r3, [r7, #32]
 80146ce:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80146d0:	e01f      	b.n	8014712 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80146d2:	6a3b      	ldr	r3, [r7, #32]
 80146d4:	68ba      	ldr	r2, [r7, #8]
 80146d6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80146d8:	e01b      	b.n	8014712 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80146da:	7ffb      	ldrb	r3, [r7, #31]
 80146dc:	2b02      	cmp	r3, #2
 80146de:	d003      	beq.n	80146e8 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80146e0:	6a3b      	ldr	r3, [r7, #32]
 80146e2:	68ba      	ldr	r2, [r7, #8]
 80146e4:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80146e6:	e014      	b.n	8014712 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 80146e8:	2300      	movs	r3, #0
 80146ea:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80146ec:	e011      	b.n	8014712 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80146ee:	6a3b      	ldr	r3, [r7, #32]
 80146f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80146f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146f6:	d00b      	beq.n	8014710 <xTaskGenericNotify+0xcc>
 80146f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146fc:	f383 8811 	msr	BASEPRI, r3
 8014700:	f3bf 8f6f 	isb	sy
 8014704:	f3bf 8f4f 	dsb	sy
 8014708:	617b      	str	r3, [r7, #20]
 801470a:	e7fe      	b.n	801470a <xTaskGenericNotify+0xc6>
					break;
 801470c:	bf00      	nop
 801470e:	e000      	b.n	8014712 <xTaskGenericNotify+0xce>

					break;
 8014710:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014712:	7ffb      	ldrb	r3, [r7, #31]
 8014714:	2b01      	cmp	r3, #1
 8014716:	d138      	bne.n	801478a <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014718:	6a3b      	ldr	r3, [r7, #32]
 801471a:	3304      	adds	r3, #4
 801471c:	4618      	mov	r0, r3
 801471e:	f7fe fb36 	bl	8012d8e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8014722:	6a3b      	ldr	r3, [r7, #32]
 8014724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014726:	2201      	movs	r2, #1
 8014728:	409a      	lsls	r2, r3
 801472a:	4b1b      	ldr	r3, [pc, #108]	; (8014798 <xTaskGenericNotify+0x154>)
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	4313      	orrs	r3, r2
 8014730:	4a19      	ldr	r2, [pc, #100]	; (8014798 <xTaskGenericNotify+0x154>)
 8014732:	6013      	str	r3, [r2, #0]
 8014734:	6a3b      	ldr	r3, [r7, #32]
 8014736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014738:	4613      	mov	r3, r2
 801473a:	009b      	lsls	r3, r3, #2
 801473c:	4413      	add	r3, r2
 801473e:	009b      	lsls	r3, r3, #2
 8014740:	4a16      	ldr	r2, [pc, #88]	; (801479c <xTaskGenericNotify+0x158>)
 8014742:	441a      	add	r2, r3
 8014744:	6a3b      	ldr	r3, [r7, #32]
 8014746:	3304      	adds	r3, #4
 8014748:	4619      	mov	r1, r3
 801474a:	4610      	mov	r0, r2
 801474c:	f7fe fac2 	bl	8012cd4 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014750:	6a3b      	ldr	r3, [r7, #32]
 8014752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014754:	2b00      	cmp	r3, #0
 8014756:	d009      	beq.n	801476c <xTaskGenericNotify+0x128>
 8014758:	f04f 0350 	mov.w	r3, #80	; 0x50
 801475c:	f383 8811 	msr	BASEPRI, r3
 8014760:	f3bf 8f6f 	isb	sy
 8014764:	f3bf 8f4f 	dsb	sy
 8014768:	613b      	str	r3, [r7, #16]
 801476a:	e7fe      	b.n	801476a <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801476c:	6a3b      	ldr	r3, [r7, #32]
 801476e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014770:	4b0b      	ldr	r3, [pc, #44]	; (80147a0 <xTaskGenericNotify+0x15c>)
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014776:	429a      	cmp	r2, r3
 8014778:	d907      	bls.n	801478a <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801477a:	4b0a      	ldr	r3, [pc, #40]	; (80147a4 <xTaskGenericNotify+0x160>)
 801477c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014780:	601a      	str	r2, [r3, #0]
 8014782:	f3bf 8f4f 	dsb	sy
 8014786:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801478a:	f000 fa9d 	bl	8014cc8 <vPortExitCritical>

		return xReturn;
 801478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014790:	4618      	mov	r0, r3
 8014792:	3728      	adds	r7, #40	; 0x28
 8014794:	46bd      	mov	sp, r7
 8014796:	bd80      	pop	{r7, pc}
 8014798:	2000296c 	.word	0x2000296c
 801479c:	20002868 	.word	0x20002868
 80147a0:	20002864 	.word	0x20002864
 80147a4:	e000ed04 	.word	0xe000ed04

080147a8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b08e      	sub	sp, #56	; 0x38
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	60f8      	str	r0, [r7, #12]
 80147b0:	60b9      	str	r1, [r7, #8]
 80147b2:	603b      	str	r3, [r7, #0]
 80147b4:	4613      	mov	r3, r2
 80147b6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80147b8:	2301      	movs	r3, #1
 80147ba:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d109      	bne.n	80147d6 <xTaskGenericNotifyFromISR+0x2e>
 80147c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147c6:	f383 8811 	msr	BASEPRI, r3
 80147ca:	f3bf 8f6f 	isb	sy
 80147ce:	f3bf 8f4f 	dsb	sy
 80147d2:	627b      	str	r3, [r7, #36]	; 0x24
 80147d4:	e7fe      	b.n	80147d4 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80147d6:	f000 fb25 	bl	8014e24 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80147de:	f3ef 8211 	mrs	r2, BASEPRI
 80147e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147e6:	f383 8811 	msr	BASEPRI, r3
 80147ea:	f3bf 8f6f 	isb	sy
 80147ee:	f3bf 8f4f 	dsb	sy
 80147f2:	623a      	str	r2, [r7, #32]
 80147f4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80147f6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80147f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80147fa:	683b      	ldr	r3, [r7, #0]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d003      	beq.n	8014808 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014802:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014804:	683b      	ldr	r3, [r7, #0]
 8014806:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801480a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801480e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014814:	2202      	movs	r2, #2
 8014816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 801481a:	79fb      	ldrb	r3, [r7, #7]
 801481c:	2b04      	cmp	r3, #4
 801481e:	d829      	bhi.n	8014874 <xTaskGenericNotifyFromISR+0xcc>
 8014820:	a201      	add	r2, pc, #4	; (adr r2, 8014828 <xTaskGenericNotifyFromISR+0x80>)
 8014822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014826:	bf00      	nop
 8014828:	08014893 	.word	0x08014893
 801482c:	0801483d 	.word	0x0801483d
 8014830:	0801484b 	.word	0x0801484b
 8014834:	08014857 	.word	0x08014857
 8014838:	0801485f 	.word	0x0801485f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801483c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801483e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014840:	68bb      	ldr	r3, [r7, #8]
 8014842:	431a      	orrs	r2, r3
 8014844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014846:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014848:	e026      	b.n	8014898 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801484a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801484c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801484e:	1c5a      	adds	r2, r3, #1
 8014850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014852:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014854:	e020      	b.n	8014898 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8014856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014858:	68ba      	ldr	r2, [r7, #8]
 801485a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801485c:	e01c      	b.n	8014898 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801485e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014862:	2b02      	cmp	r3, #2
 8014864:	d003      	beq.n	801486e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014868:	68ba      	ldr	r2, [r7, #8]
 801486a:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801486c:	e014      	b.n	8014898 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 801486e:	2300      	movs	r3, #0
 8014870:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8014872:	e011      	b.n	8014898 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014878:	f1b3 3fff 	cmp.w	r3, #4294967295
 801487c:	d00b      	beq.n	8014896 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 801487e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014882:	f383 8811 	msr	BASEPRI, r3
 8014886:	f3bf 8f6f 	isb	sy
 801488a:	f3bf 8f4f 	dsb	sy
 801488e:	61bb      	str	r3, [r7, #24]
 8014890:	e7fe      	b.n	8014890 <xTaskGenericNotifyFromISR+0xe8>
					break;
 8014892:	bf00      	nop
 8014894:	e000      	b.n	8014898 <xTaskGenericNotifyFromISR+0xf0>
					break;
 8014896:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014898:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801489c:	2b01      	cmp	r3, #1
 801489e:	d144      	bne.n	801492a <xTaskGenericNotifyFromISR+0x182>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80148a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d009      	beq.n	80148bc <xTaskGenericNotifyFromISR+0x114>
 80148a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148ac:	f383 8811 	msr	BASEPRI, r3
 80148b0:	f3bf 8f6f 	isb	sy
 80148b4:	f3bf 8f4f 	dsb	sy
 80148b8:	617b      	str	r3, [r7, #20]
 80148ba:	e7fe      	b.n	80148ba <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80148bc:	4b20      	ldr	r3, [pc, #128]	; (8014940 <xTaskGenericNotifyFromISR+0x198>)
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d11c      	bne.n	80148fe <xTaskGenericNotifyFromISR+0x156>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80148c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148c6:	3304      	adds	r3, #4
 80148c8:	4618      	mov	r0, r3
 80148ca:	f7fe fa60 	bl	8012d8e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80148ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148d2:	2201      	movs	r2, #1
 80148d4:	409a      	lsls	r2, r3
 80148d6:	4b1b      	ldr	r3, [pc, #108]	; (8014944 <xTaskGenericNotifyFromISR+0x19c>)
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	4313      	orrs	r3, r2
 80148dc:	4a19      	ldr	r2, [pc, #100]	; (8014944 <xTaskGenericNotifyFromISR+0x19c>)
 80148de:	6013      	str	r3, [r2, #0]
 80148e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148e4:	4613      	mov	r3, r2
 80148e6:	009b      	lsls	r3, r3, #2
 80148e8:	4413      	add	r3, r2
 80148ea:	009b      	lsls	r3, r3, #2
 80148ec:	4a16      	ldr	r2, [pc, #88]	; (8014948 <xTaskGenericNotifyFromISR+0x1a0>)
 80148ee:	441a      	add	r2, r3
 80148f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148f2:	3304      	adds	r3, #4
 80148f4:	4619      	mov	r1, r3
 80148f6:	4610      	mov	r0, r2
 80148f8:	f7fe f9ec 	bl	8012cd4 <vListInsertEnd>
 80148fc:	e005      	b.n	801490a <xTaskGenericNotifyFromISR+0x162>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80148fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014900:	3318      	adds	r3, #24
 8014902:	4619      	mov	r1, r3
 8014904:	4811      	ldr	r0, [pc, #68]	; (801494c <xTaskGenericNotifyFromISR+0x1a4>)
 8014906:	f7fe f9e5 	bl	8012cd4 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801490a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801490c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801490e:	4b10      	ldr	r3, [pc, #64]	; (8014950 <xTaskGenericNotifyFromISR+0x1a8>)
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014914:	429a      	cmp	r2, r3
 8014916:	d908      	bls.n	801492a <xTaskGenericNotifyFromISR+0x182>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8014918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801491a:	2b00      	cmp	r3, #0
 801491c:	d002      	beq.n	8014924 <xTaskGenericNotifyFromISR+0x17c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801491e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014920:	2201      	movs	r2, #1
 8014922:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8014924:	4b0b      	ldr	r3, [pc, #44]	; (8014954 <xTaskGenericNotifyFromISR+0x1ac>)
 8014926:	2201      	movs	r2, #1
 8014928:	601a      	str	r2, [r3, #0]
 801492a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801492c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801492e:	693b      	ldr	r3, [r7, #16]
 8014930:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8014934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8014936:	4618      	mov	r0, r3
 8014938:	3738      	adds	r7, #56	; 0x38
 801493a:	46bd      	mov	sp, r7
 801493c:	bd80      	pop	{r7, pc}
 801493e:	bf00      	nop
 8014940:	2000298c 	.word	0x2000298c
 8014944:	2000296c 	.word	0x2000296c
 8014948:	20002868 	.word	0x20002868
 801494c:	20002924 	.word	0x20002924
 8014950:	20002864 	.word	0x20002864
 8014954:	20002978 	.word	0x20002978

08014958 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014958:	b580      	push	{r7, lr}
 801495a:	b084      	sub	sp, #16
 801495c:	af00      	add	r7, sp, #0
 801495e:	6078      	str	r0, [r7, #4]
 8014960:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014962:	4b29      	ldr	r3, [pc, #164]	; (8014a08 <prvAddCurrentTaskToDelayedList+0xb0>)
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014968:	4b28      	ldr	r3, [pc, #160]	; (8014a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	3304      	adds	r3, #4
 801496e:	4618      	mov	r0, r3
 8014970:	f7fe fa0d 	bl	8012d8e <uxListRemove>
 8014974:	4603      	mov	r3, r0
 8014976:	2b00      	cmp	r3, #0
 8014978:	d10b      	bne.n	8014992 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801497a:	4b24      	ldr	r3, [pc, #144]	; (8014a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014980:	2201      	movs	r2, #1
 8014982:	fa02 f303 	lsl.w	r3, r2, r3
 8014986:	43da      	mvns	r2, r3
 8014988:	4b21      	ldr	r3, [pc, #132]	; (8014a10 <prvAddCurrentTaskToDelayedList+0xb8>)
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	4013      	ands	r3, r2
 801498e:	4a20      	ldr	r2, [pc, #128]	; (8014a10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014990:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014998:	d10a      	bne.n	80149b0 <prvAddCurrentTaskToDelayedList+0x58>
 801499a:	683b      	ldr	r3, [r7, #0]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d007      	beq.n	80149b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80149a0:	4b1a      	ldr	r3, [pc, #104]	; (8014a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	3304      	adds	r3, #4
 80149a6:	4619      	mov	r1, r3
 80149a8:	481a      	ldr	r0, [pc, #104]	; (8014a14 <prvAddCurrentTaskToDelayedList+0xbc>)
 80149aa:	f7fe f993 	bl	8012cd4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80149ae:	e026      	b.n	80149fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80149b0:	68fa      	ldr	r2, [r7, #12]
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	4413      	add	r3, r2
 80149b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80149b8:	4b14      	ldr	r3, [pc, #80]	; (8014a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	68ba      	ldr	r2, [r7, #8]
 80149be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80149c0:	68ba      	ldr	r2, [r7, #8]
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	429a      	cmp	r2, r3
 80149c6:	d209      	bcs.n	80149dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80149c8:	4b13      	ldr	r3, [pc, #76]	; (8014a18 <prvAddCurrentTaskToDelayedList+0xc0>)
 80149ca:	681a      	ldr	r2, [r3, #0]
 80149cc:	4b0f      	ldr	r3, [pc, #60]	; (8014a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	3304      	adds	r3, #4
 80149d2:	4619      	mov	r1, r3
 80149d4:	4610      	mov	r0, r2
 80149d6:	f7fe f9a1 	bl	8012d1c <vListInsert>
}
 80149da:	e010      	b.n	80149fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80149dc:	4b0f      	ldr	r3, [pc, #60]	; (8014a1c <prvAddCurrentTaskToDelayedList+0xc4>)
 80149de:	681a      	ldr	r2, [r3, #0]
 80149e0:	4b0a      	ldr	r3, [pc, #40]	; (8014a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	3304      	adds	r3, #4
 80149e6:	4619      	mov	r1, r3
 80149e8:	4610      	mov	r0, r2
 80149ea:	f7fe f997 	bl	8012d1c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80149ee:	4b0c      	ldr	r3, [pc, #48]	; (8014a20 <prvAddCurrentTaskToDelayedList+0xc8>)
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	68ba      	ldr	r2, [r7, #8]
 80149f4:	429a      	cmp	r2, r3
 80149f6:	d202      	bcs.n	80149fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80149f8:	4a09      	ldr	r2, [pc, #36]	; (8014a20 <prvAddCurrentTaskToDelayedList+0xc8>)
 80149fa:	68bb      	ldr	r3, [r7, #8]
 80149fc:	6013      	str	r3, [r2, #0]
}
 80149fe:	bf00      	nop
 8014a00:	3710      	adds	r7, #16
 8014a02:	46bd      	mov	sp, r7
 8014a04:	bd80      	pop	{r7, pc}
 8014a06:	bf00      	nop
 8014a08:	20002968 	.word	0x20002968
 8014a0c:	20002864 	.word	0x20002864
 8014a10:	2000296c 	.word	0x2000296c
 8014a14:	20002950 	.word	0x20002950
 8014a18:	20002920 	.word	0x20002920
 8014a1c:	2000291c 	.word	0x2000291c
 8014a20:	20002984 	.word	0x20002984

08014a24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014a24:	b480      	push	{r7}
 8014a26:	b085      	sub	sp, #20
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	60f8      	str	r0, [r7, #12]
 8014a2c:	60b9      	str	r1, [r7, #8]
 8014a2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	3b04      	subs	r3, #4
 8014a34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014a3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	3b04      	subs	r3, #4
 8014a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014a44:	68bb      	ldr	r3, [r7, #8]
 8014a46:	f023 0201 	bic.w	r2, r3, #1
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	3b04      	subs	r3, #4
 8014a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014a54:	4a0c      	ldr	r2, [pc, #48]	; (8014a88 <pxPortInitialiseStack+0x64>)
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	3b14      	subs	r3, #20
 8014a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014a60:	687a      	ldr	r2, [r7, #4]
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	3b04      	subs	r3, #4
 8014a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	f06f 0202 	mvn.w	r2, #2
 8014a72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	3b20      	subs	r3, #32
 8014a78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014a7a:	68fb      	ldr	r3, [r7, #12]
}
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	3714      	adds	r7, #20
 8014a80:	46bd      	mov	sp, r7
 8014a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a86:	4770      	bx	lr
 8014a88:	08014a8d 	.word	0x08014a8d

08014a8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014a8c:	b480      	push	{r7}
 8014a8e:	b085      	sub	sp, #20
 8014a90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014a92:	2300      	movs	r3, #0
 8014a94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014a96:	4b11      	ldr	r3, [pc, #68]	; (8014adc <prvTaskExitError+0x50>)
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a9e:	d009      	beq.n	8014ab4 <prvTaskExitError+0x28>
	__asm volatile
 8014aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014aa4:	f383 8811 	msr	BASEPRI, r3
 8014aa8:	f3bf 8f6f 	isb	sy
 8014aac:	f3bf 8f4f 	dsb	sy
 8014ab0:	60fb      	str	r3, [r7, #12]
 8014ab2:	e7fe      	b.n	8014ab2 <prvTaskExitError+0x26>
 8014ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ab8:	f383 8811 	msr	BASEPRI, r3
 8014abc:	f3bf 8f6f 	isb	sy
 8014ac0:	f3bf 8f4f 	dsb	sy
 8014ac4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014ac6:	bf00      	nop
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d0fc      	beq.n	8014ac8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014ace:	bf00      	nop
 8014ad0:	3714      	adds	r7, #20
 8014ad2:	46bd      	mov	sp, r7
 8014ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad8:	4770      	bx	lr
 8014ada:	bf00      	nop
 8014adc:	200021a4 	.word	0x200021a4

08014ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014ae0:	4b07      	ldr	r3, [pc, #28]	; (8014b00 <pxCurrentTCBConst2>)
 8014ae2:	6819      	ldr	r1, [r3, #0]
 8014ae4:	6808      	ldr	r0, [r1, #0]
 8014ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014aea:	f380 8809 	msr	PSP, r0
 8014aee:	f3bf 8f6f 	isb	sy
 8014af2:	f04f 0000 	mov.w	r0, #0
 8014af6:	f380 8811 	msr	BASEPRI, r0
 8014afa:	4770      	bx	lr
 8014afc:	f3af 8000 	nop.w

08014b00 <pxCurrentTCBConst2>:
 8014b00:	20002864 	.word	0x20002864
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014b04:	bf00      	nop
 8014b06:	bf00      	nop

08014b08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014b08:	4808      	ldr	r0, [pc, #32]	; (8014b2c <prvPortStartFirstTask+0x24>)
 8014b0a:	6800      	ldr	r0, [r0, #0]
 8014b0c:	6800      	ldr	r0, [r0, #0]
 8014b0e:	f380 8808 	msr	MSP, r0
 8014b12:	f04f 0000 	mov.w	r0, #0
 8014b16:	f380 8814 	msr	CONTROL, r0
 8014b1a:	b662      	cpsie	i
 8014b1c:	b661      	cpsie	f
 8014b1e:	f3bf 8f4f 	dsb	sy
 8014b22:	f3bf 8f6f 	isb	sy
 8014b26:	df00      	svc	0
 8014b28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014b2a:	bf00      	nop
 8014b2c:	e000ed08 	.word	0xe000ed08

08014b30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014b30:	b580      	push	{r7, lr}
 8014b32:	b086      	sub	sp, #24
 8014b34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014b36:	4b44      	ldr	r3, [pc, #272]	; (8014c48 <xPortStartScheduler+0x118>)
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	4a44      	ldr	r2, [pc, #272]	; (8014c4c <xPortStartScheduler+0x11c>)
 8014b3c:	4293      	cmp	r3, r2
 8014b3e:	d109      	bne.n	8014b54 <xPortStartScheduler+0x24>
 8014b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b44:	f383 8811 	msr	BASEPRI, r3
 8014b48:	f3bf 8f6f 	isb	sy
 8014b4c:	f3bf 8f4f 	dsb	sy
 8014b50:	613b      	str	r3, [r7, #16]
 8014b52:	e7fe      	b.n	8014b52 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014b54:	4b3c      	ldr	r3, [pc, #240]	; (8014c48 <xPortStartScheduler+0x118>)
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	4a3d      	ldr	r2, [pc, #244]	; (8014c50 <xPortStartScheduler+0x120>)
 8014b5a:	4293      	cmp	r3, r2
 8014b5c:	d109      	bne.n	8014b72 <xPortStartScheduler+0x42>
 8014b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b62:	f383 8811 	msr	BASEPRI, r3
 8014b66:	f3bf 8f6f 	isb	sy
 8014b6a:	f3bf 8f4f 	dsb	sy
 8014b6e:	60fb      	str	r3, [r7, #12]
 8014b70:	e7fe      	b.n	8014b70 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014b72:	4b38      	ldr	r3, [pc, #224]	; (8014c54 <xPortStartScheduler+0x124>)
 8014b74:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014b76:	697b      	ldr	r3, [r7, #20]
 8014b78:	781b      	ldrb	r3, [r3, #0]
 8014b7a:	b2db      	uxtb	r3, r3
 8014b7c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014b7e:	697b      	ldr	r3, [r7, #20]
 8014b80:	22ff      	movs	r2, #255	; 0xff
 8014b82:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014b84:	697b      	ldr	r3, [r7, #20]
 8014b86:	781b      	ldrb	r3, [r3, #0]
 8014b88:	b2db      	uxtb	r3, r3
 8014b8a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014b8c:	78fb      	ldrb	r3, [r7, #3]
 8014b8e:	b2db      	uxtb	r3, r3
 8014b90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014b94:	b2da      	uxtb	r2, r3
 8014b96:	4b30      	ldr	r3, [pc, #192]	; (8014c58 <xPortStartScheduler+0x128>)
 8014b98:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014b9a:	4b30      	ldr	r3, [pc, #192]	; (8014c5c <xPortStartScheduler+0x12c>)
 8014b9c:	2207      	movs	r2, #7
 8014b9e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014ba0:	e009      	b.n	8014bb6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8014ba2:	4b2e      	ldr	r3, [pc, #184]	; (8014c5c <xPortStartScheduler+0x12c>)
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	3b01      	subs	r3, #1
 8014ba8:	4a2c      	ldr	r2, [pc, #176]	; (8014c5c <xPortStartScheduler+0x12c>)
 8014baa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014bac:	78fb      	ldrb	r3, [r7, #3]
 8014bae:	b2db      	uxtb	r3, r3
 8014bb0:	005b      	lsls	r3, r3, #1
 8014bb2:	b2db      	uxtb	r3, r3
 8014bb4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014bb6:	78fb      	ldrb	r3, [r7, #3]
 8014bb8:	b2db      	uxtb	r3, r3
 8014bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014bbe:	2b80      	cmp	r3, #128	; 0x80
 8014bc0:	d0ef      	beq.n	8014ba2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014bc2:	4b26      	ldr	r3, [pc, #152]	; (8014c5c <xPortStartScheduler+0x12c>)
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	f1c3 0307 	rsb	r3, r3, #7
 8014bca:	2b04      	cmp	r3, #4
 8014bcc:	d009      	beq.n	8014be2 <xPortStartScheduler+0xb2>
 8014bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bd2:	f383 8811 	msr	BASEPRI, r3
 8014bd6:	f3bf 8f6f 	isb	sy
 8014bda:	f3bf 8f4f 	dsb	sy
 8014bde:	60bb      	str	r3, [r7, #8]
 8014be0:	e7fe      	b.n	8014be0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014be2:	4b1e      	ldr	r3, [pc, #120]	; (8014c5c <xPortStartScheduler+0x12c>)
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	021b      	lsls	r3, r3, #8
 8014be8:	4a1c      	ldr	r2, [pc, #112]	; (8014c5c <xPortStartScheduler+0x12c>)
 8014bea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014bec:	4b1b      	ldr	r3, [pc, #108]	; (8014c5c <xPortStartScheduler+0x12c>)
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014bf4:	4a19      	ldr	r2, [pc, #100]	; (8014c5c <xPortStartScheduler+0x12c>)
 8014bf6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	b2da      	uxtb	r2, r3
 8014bfc:	697b      	ldr	r3, [r7, #20]
 8014bfe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014c00:	4b17      	ldr	r3, [pc, #92]	; (8014c60 <xPortStartScheduler+0x130>)
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	4a16      	ldr	r2, [pc, #88]	; (8014c60 <xPortStartScheduler+0x130>)
 8014c06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014c0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014c0c:	4b14      	ldr	r3, [pc, #80]	; (8014c60 <xPortStartScheduler+0x130>)
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	4a13      	ldr	r2, [pc, #76]	; (8014c60 <xPortStartScheduler+0x130>)
 8014c12:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014c16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014c18:	f000 f8d6 	bl	8014dc8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014c1c:	4b11      	ldr	r3, [pc, #68]	; (8014c64 <xPortStartScheduler+0x134>)
 8014c1e:	2200      	movs	r2, #0
 8014c20:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014c22:	f000 f8f5 	bl	8014e10 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014c26:	4b10      	ldr	r3, [pc, #64]	; (8014c68 <xPortStartScheduler+0x138>)
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	4a0f      	ldr	r2, [pc, #60]	; (8014c68 <xPortStartScheduler+0x138>)
 8014c2c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014c30:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014c32:	f7ff ff69 	bl	8014b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014c36:	f7ff f9d5 	bl	8013fe4 <vTaskSwitchContext>
	prvTaskExitError();
 8014c3a:	f7ff ff27 	bl	8014a8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014c3e:	2300      	movs	r3, #0
}
 8014c40:	4618      	mov	r0, r3
 8014c42:	3718      	adds	r7, #24
 8014c44:	46bd      	mov	sp, r7
 8014c46:	bd80      	pop	{r7, pc}
 8014c48:	e000ed00 	.word	0xe000ed00
 8014c4c:	410fc271 	.word	0x410fc271
 8014c50:	410fc270 	.word	0x410fc270
 8014c54:	e000e400 	.word	0xe000e400
 8014c58:	20002990 	.word	0x20002990
 8014c5c:	20002994 	.word	0x20002994
 8014c60:	e000ed20 	.word	0xe000ed20
 8014c64:	200021a4 	.word	0x200021a4
 8014c68:	e000ef34 	.word	0xe000ef34

08014c6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014c6c:	b480      	push	{r7}
 8014c6e:	b083      	sub	sp, #12
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c76:	f383 8811 	msr	BASEPRI, r3
 8014c7a:	f3bf 8f6f 	isb	sy
 8014c7e:	f3bf 8f4f 	dsb	sy
 8014c82:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014c84:	4b0e      	ldr	r3, [pc, #56]	; (8014cc0 <vPortEnterCritical+0x54>)
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	3301      	adds	r3, #1
 8014c8a:	4a0d      	ldr	r2, [pc, #52]	; (8014cc0 <vPortEnterCritical+0x54>)
 8014c8c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014c8e:	4b0c      	ldr	r3, [pc, #48]	; (8014cc0 <vPortEnterCritical+0x54>)
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	2b01      	cmp	r3, #1
 8014c94:	d10e      	bne.n	8014cb4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014c96:	4b0b      	ldr	r3, [pc, #44]	; (8014cc4 <vPortEnterCritical+0x58>)
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	b2db      	uxtb	r3, r3
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d009      	beq.n	8014cb4 <vPortEnterCritical+0x48>
 8014ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ca4:	f383 8811 	msr	BASEPRI, r3
 8014ca8:	f3bf 8f6f 	isb	sy
 8014cac:	f3bf 8f4f 	dsb	sy
 8014cb0:	603b      	str	r3, [r7, #0]
 8014cb2:	e7fe      	b.n	8014cb2 <vPortEnterCritical+0x46>
	}
}
 8014cb4:	bf00      	nop
 8014cb6:	370c      	adds	r7, #12
 8014cb8:	46bd      	mov	sp, r7
 8014cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cbe:	4770      	bx	lr
 8014cc0:	200021a4 	.word	0x200021a4
 8014cc4:	e000ed04 	.word	0xe000ed04

08014cc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014cc8:	b480      	push	{r7}
 8014cca:	b083      	sub	sp, #12
 8014ccc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014cce:	4b11      	ldr	r3, [pc, #68]	; (8014d14 <vPortExitCritical+0x4c>)
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d109      	bne.n	8014cea <vPortExitCritical+0x22>
 8014cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cda:	f383 8811 	msr	BASEPRI, r3
 8014cde:	f3bf 8f6f 	isb	sy
 8014ce2:	f3bf 8f4f 	dsb	sy
 8014ce6:	607b      	str	r3, [r7, #4]
 8014ce8:	e7fe      	b.n	8014ce8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8014cea:	4b0a      	ldr	r3, [pc, #40]	; (8014d14 <vPortExitCritical+0x4c>)
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	3b01      	subs	r3, #1
 8014cf0:	4a08      	ldr	r2, [pc, #32]	; (8014d14 <vPortExitCritical+0x4c>)
 8014cf2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014cf4:	4b07      	ldr	r3, [pc, #28]	; (8014d14 <vPortExitCritical+0x4c>)
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d104      	bne.n	8014d06 <vPortExitCritical+0x3e>
 8014cfc:	2300      	movs	r3, #0
 8014cfe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014d00:	683b      	ldr	r3, [r7, #0]
 8014d02:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8014d06:	bf00      	nop
 8014d08:	370c      	adds	r7, #12
 8014d0a:	46bd      	mov	sp, r7
 8014d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d10:	4770      	bx	lr
 8014d12:	bf00      	nop
 8014d14:	200021a4 	.word	0x200021a4
	...

08014d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014d20:	f3ef 8009 	mrs	r0, PSP
 8014d24:	f3bf 8f6f 	isb	sy
 8014d28:	4b15      	ldr	r3, [pc, #84]	; (8014d80 <pxCurrentTCBConst>)
 8014d2a:	681a      	ldr	r2, [r3, #0]
 8014d2c:	f01e 0f10 	tst.w	lr, #16
 8014d30:	bf08      	it	eq
 8014d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d3a:	6010      	str	r0, [r2, #0]
 8014d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014d40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014d44:	f380 8811 	msr	BASEPRI, r0
 8014d48:	f3bf 8f4f 	dsb	sy
 8014d4c:	f3bf 8f6f 	isb	sy
 8014d50:	f7ff f948 	bl	8013fe4 <vTaskSwitchContext>
 8014d54:	f04f 0000 	mov.w	r0, #0
 8014d58:	f380 8811 	msr	BASEPRI, r0
 8014d5c:	bc09      	pop	{r0, r3}
 8014d5e:	6819      	ldr	r1, [r3, #0]
 8014d60:	6808      	ldr	r0, [r1, #0]
 8014d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d66:	f01e 0f10 	tst.w	lr, #16
 8014d6a:	bf08      	it	eq
 8014d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014d70:	f380 8809 	msr	PSP, r0
 8014d74:	f3bf 8f6f 	isb	sy
 8014d78:	4770      	bx	lr
 8014d7a:	bf00      	nop
 8014d7c:	f3af 8000 	nop.w

08014d80 <pxCurrentTCBConst>:
 8014d80:	20002864 	.word	0x20002864
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014d84:	bf00      	nop
 8014d86:	bf00      	nop

08014d88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014d88:	b580      	push	{r7, lr}
 8014d8a:	b082      	sub	sp, #8
 8014d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8014d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d92:	f383 8811 	msr	BASEPRI, r3
 8014d96:	f3bf 8f6f 	isb	sy
 8014d9a:	f3bf 8f4f 	dsb	sy
 8014d9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014da0:	f7ff f868 	bl	8013e74 <xTaskIncrementTick>
 8014da4:	4603      	mov	r3, r0
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d003      	beq.n	8014db2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014daa:	4b06      	ldr	r3, [pc, #24]	; (8014dc4 <SysTick_Handler+0x3c>)
 8014dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014db0:	601a      	str	r2, [r3, #0]
 8014db2:	2300      	movs	r3, #0
 8014db4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014db6:	683b      	ldr	r3, [r7, #0]
 8014db8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8014dbc:	bf00      	nop
 8014dbe:	3708      	adds	r7, #8
 8014dc0:	46bd      	mov	sp, r7
 8014dc2:	bd80      	pop	{r7, pc}
 8014dc4:	e000ed04 	.word	0xe000ed04

08014dc8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014dc8:	b480      	push	{r7}
 8014dca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014dcc:	4b0b      	ldr	r3, [pc, #44]	; (8014dfc <vPortSetupTimerInterrupt+0x34>)
 8014dce:	2200      	movs	r2, #0
 8014dd0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014dd2:	4b0b      	ldr	r3, [pc, #44]	; (8014e00 <vPortSetupTimerInterrupt+0x38>)
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014dd8:	4b0a      	ldr	r3, [pc, #40]	; (8014e04 <vPortSetupTimerInterrupt+0x3c>)
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	4a0a      	ldr	r2, [pc, #40]	; (8014e08 <vPortSetupTimerInterrupt+0x40>)
 8014dde:	fba2 2303 	umull	r2, r3, r2, r3
 8014de2:	099b      	lsrs	r3, r3, #6
 8014de4:	4a09      	ldr	r2, [pc, #36]	; (8014e0c <vPortSetupTimerInterrupt+0x44>)
 8014de6:	3b01      	subs	r3, #1
 8014de8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014dea:	4b04      	ldr	r3, [pc, #16]	; (8014dfc <vPortSetupTimerInterrupt+0x34>)
 8014dec:	2207      	movs	r2, #7
 8014dee:	601a      	str	r2, [r3, #0]
}
 8014df0:	bf00      	nop
 8014df2:	46bd      	mov	sp, r7
 8014df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df8:	4770      	bx	lr
 8014dfa:	bf00      	nop
 8014dfc:	e000e010 	.word	0xe000e010
 8014e00:	e000e018 	.word	0xe000e018
 8014e04:	20002088 	.word	0x20002088
 8014e08:	10624dd3 	.word	0x10624dd3
 8014e0c:	e000e014 	.word	0xe000e014

08014e10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014e10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014e20 <vPortEnableVFP+0x10>
 8014e14:	6801      	ldr	r1, [r0, #0]
 8014e16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014e1a:	6001      	str	r1, [r0, #0]
 8014e1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014e1e:	bf00      	nop
 8014e20:	e000ed88 	.word	0xe000ed88

08014e24 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014e24:	b480      	push	{r7}
 8014e26:	b085      	sub	sp, #20
 8014e28:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014e2a:	f3ef 8305 	mrs	r3, IPSR
 8014e2e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	2b0f      	cmp	r3, #15
 8014e34:	d913      	bls.n	8014e5e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014e36:	4a16      	ldr	r2, [pc, #88]	; (8014e90 <vPortValidateInterruptPriority+0x6c>)
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	4413      	add	r3, r2
 8014e3c:	781b      	ldrb	r3, [r3, #0]
 8014e3e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014e40:	4b14      	ldr	r3, [pc, #80]	; (8014e94 <vPortValidateInterruptPriority+0x70>)
 8014e42:	781b      	ldrb	r3, [r3, #0]
 8014e44:	7afa      	ldrb	r2, [r7, #11]
 8014e46:	429a      	cmp	r2, r3
 8014e48:	d209      	bcs.n	8014e5e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8014e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e4e:	f383 8811 	msr	BASEPRI, r3
 8014e52:	f3bf 8f6f 	isb	sy
 8014e56:	f3bf 8f4f 	dsb	sy
 8014e5a:	607b      	str	r3, [r7, #4]
 8014e5c:	e7fe      	b.n	8014e5c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014e5e:	4b0e      	ldr	r3, [pc, #56]	; (8014e98 <vPortValidateInterruptPriority+0x74>)
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014e66:	4b0d      	ldr	r3, [pc, #52]	; (8014e9c <vPortValidateInterruptPriority+0x78>)
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	429a      	cmp	r2, r3
 8014e6c:	d909      	bls.n	8014e82 <vPortValidateInterruptPriority+0x5e>
 8014e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e72:	f383 8811 	msr	BASEPRI, r3
 8014e76:	f3bf 8f6f 	isb	sy
 8014e7a:	f3bf 8f4f 	dsb	sy
 8014e7e:	603b      	str	r3, [r7, #0]
 8014e80:	e7fe      	b.n	8014e80 <vPortValidateInterruptPriority+0x5c>
	}
 8014e82:	bf00      	nop
 8014e84:	3714      	adds	r7, #20
 8014e86:	46bd      	mov	sp, r7
 8014e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e8c:	4770      	bx	lr
 8014e8e:	bf00      	nop
 8014e90:	e000e3f0 	.word	0xe000e3f0
 8014e94:	20002990 	.word	0x20002990
 8014e98:	e000ed0c 	.word	0xe000ed0c
 8014e9c:	20002994 	.word	0x20002994

08014ea0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b08a      	sub	sp, #40	; 0x28
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014ea8:	2300      	movs	r3, #0
 8014eaa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014eac:	f7fe ff38 	bl	8013d20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014eb0:	4b57      	ldr	r3, [pc, #348]	; (8015010 <pvPortMalloc+0x170>)
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d101      	bne.n	8014ebc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014eb8:	f000 f90c 	bl	80150d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014ebc:	4b55      	ldr	r3, [pc, #340]	; (8015014 <pvPortMalloc+0x174>)
 8014ebe:	681a      	ldr	r2, [r3, #0]
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	4013      	ands	r3, r2
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	f040 808c 	bne.w	8014fe2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d01c      	beq.n	8014f0a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8014ed0:	2208      	movs	r2, #8
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	4413      	add	r3, r2
 8014ed6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	f003 0307 	and.w	r3, r3, #7
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d013      	beq.n	8014f0a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	f023 0307 	bic.w	r3, r3, #7
 8014ee8:	3308      	adds	r3, #8
 8014eea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	f003 0307 	and.w	r3, r3, #7
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d009      	beq.n	8014f0a <pvPortMalloc+0x6a>
 8014ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014efa:	f383 8811 	msr	BASEPRI, r3
 8014efe:	f3bf 8f6f 	isb	sy
 8014f02:	f3bf 8f4f 	dsb	sy
 8014f06:	617b      	str	r3, [r7, #20]
 8014f08:	e7fe      	b.n	8014f08 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d068      	beq.n	8014fe2 <pvPortMalloc+0x142>
 8014f10:	4b41      	ldr	r3, [pc, #260]	; (8015018 <pvPortMalloc+0x178>)
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	687a      	ldr	r2, [r7, #4]
 8014f16:	429a      	cmp	r2, r3
 8014f18:	d863      	bhi.n	8014fe2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014f1a:	4b40      	ldr	r3, [pc, #256]	; (801501c <pvPortMalloc+0x17c>)
 8014f1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014f1e:	4b3f      	ldr	r3, [pc, #252]	; (801501c <pvPortMalloc+0x17c>)
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014f24:	e004      	b.n	8014f30 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8014f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f32:	685b      	ldr	r3, [r3, #4]
 8014f34:	687a      	ldr	r2, [r7, #4]
 8014f36:	429a      	cmp	r2, r3
 8014f38:	d903      	bls.n	8014f42 <pvPortMalloc+0xa2>
 8014f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d1f1      	bne.n	8014f26 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014f42:	4b33      	ldr	r3, [pc, #204]	; (8015010 <pvPortMalloc+0x170>)
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f48:	429a      	cmp	r2, r3
 8014f4a:	d04a      	beq.n	8014fe2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014f4c:	6a3b      	ldr	r3, [r7, #32]
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	2208      	movs	r2, #8
 8014f52:	4413      	add	r3, r2
 8014f54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f58:	681a      	ldr	r2, [r3, #0]
 8014f5a:	6a3b      	ldr	r3, [r7, #32]
 8014f5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f60:	685a      	ldr	r2, [r3, #4]
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	1ad2      	subs	r2, r2, r3
 8014f66:	2308      	movs	r3, #8
 8014f68:	005b      	lsls	r3, r3, #1
 8014f6a:	429a      	cmp	r2, r3
 8014f6c:	d91e      	bls.n	8014fac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	4413      	add	r3, r2
 8014f74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014f76:	69bb      	ldr	r3, [r7, #24]
 8014f78:	f003 0307 	and.w	r3, r3, #7
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d009      	beq.n	8014f94 <pvPortMalloc+0xf4>
 8014f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f84:	f383 8811 	msr	BASEPRI, r3
 8014f88:	f3bf 8f6f 	isb	sy
 8014f8c:	f3bf 8f4f 	dsb	sy
 8014f90:	613b      	str	r3, [r7, #16]
 8014f92:	e7fe      	b.n	8014f92 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f96:	685a      	ldr	r2, [r3, #4]
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	1ad2      	subs	r2, r2, r3
 8014f9c:	69bb      	ldr	r3, [r7, #24]
 8014f9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fa2:	687a      	ldr	r2, [r7, #4]
 8014fa4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014fa6:	69b8      	ldr	r0, [r7, #24]
 8014fa8:	f000 f8f6 	bl	8015198 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014fac:	4b1a      	ldr	r3, [pc, #104]	; (8015018 <pvPortMalloc+0x178>)
 8014fae:	681a      	ldr	r2, [r3, #0]
 8014fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fb2:	685b      	ldr	r3, [r3, #4]
 8014fb4:	1ad3      	subs	r3, r2, r3
 8014fb6:	4a18      	ldr	r2, [pc, #96]	; (8015018 <pvPortMalloc+0x178>)
 8014fb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014fba:	4b17      	ldr	r3, [pc, #92]	; (8015018 <pvPortMalloc+0x178>)
 8014fbc:	681a      	ldr	r2, [r3, #0]
 8014fbe:	4b18      	ldr	r3, [pc, #96]	; (8015020 <pvPortMalloc+0x180>)
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	429a      	cmp	r2, r3
 8014fc4:	d203      	bcs.n	8014fce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014fc6:	4b14      	ldr	r3, [pc, #80]	; (8015018 <pvPortMalloc+0x178>)
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	4a15      	ldr	r2, [pc, #84]	; (8015020 <pvPortMalloc+0x180>)
 8014fcc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fd0:	685a      	ldr	r2, [r3, #4]
 8014fd2:	4b10      	ldr	r3, [pc, #64]	; (8015014 <pvPortMalloc+0x174>)
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	431a      	orrs	r2, r3
 8014fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fde:	2200      	movs	r2, #0
 8014fe0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014fe2:	f7fe feab 	bl	8013d3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014fe6:	69fb      	ldr	r3, [r7, #28]
 8014fe8:	f003 0307 	and.w	r3, r3, #7
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d009      	beq.n	8015004 <pvPortMalloc+0x164>
 8014ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ff4:	f383 8811 	msr	BASEPRI, r3
 8014ff8:	f3bf 8f6f 	isb	sy
 8014ffc:	f3bf 8f4f 	dsb	sy
 8015000:	60fb      	str	r3, [r7, #12]
 8015002:	e7fe      	b.n	8015002 <pvPortMalloc+0x162>
	return pvReturn;
 8015004:	69fb      	ldr	r3, [r7, #28]
}
 8015006:	4618      	mov	r0, r3
 8015008:	3728      	adds	r7, #40	; 0x28
 801500a:	46bd      	mov	sp, r7
 801500c:	bd80      	pop	{r7, pc}
 801500e:	bf00      	nop
 8015010:	200065a0 	.word	0x200065a0
 8015014:	200065ac 	.word	0x200065ac
 8015018:	200065a4 	.word	0x200065a4
 801501c:	20006598 	.word	0x20006598
 8015020:	200065a8 	.word	0x200065a8

08015024 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015024:	b580      	push	{r7, lr}
 8015026:	b086      	sub	sp, #24
 8015028:	af00      	add	r7, sp, #0
 801502a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d046      	beq.n	80150c4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015036:	2308      	movs	r3, #8
 8015038:	425b      	negs	r3, r3
 801503a:	697a      	ldr	r2, [r7, #20]
 801503c:	4413      	add	r3, r2
 801503e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015040:	697b      	ldr	r3, [r7, #20]
 8015042:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015044:	693b      	ldr	r3, [r7, #16]
 8015046:	685a      	ldr	r2, [r3, #4]
 8015048:	4b20      	ldr	r3, [pc, #128]	; (80150cc <vPortFree+0xa8>)
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	4013      	ands	r3, r2
 801504e:	2b00      	cmp	r3, #0
 8015050:	d109      	bne.n	8015066 <vPortFree+0x42>
 8015052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015056:	f383 8811 	msr	BASEPRI, r3
 801505a:	f3bf 8f6f 	isb	sy
 801505e:	f3bf 8f4f 	dsb	sy
 8015062:	60fb      	str	r3, [r7, #12]
 8015064:	e7fe      	b.n	8015064 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015066:	693b      	ldr	r3, [r7, #16]
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d009      	beq.n	8015082 <vPortFree+0x5e>
 801506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015072:	f383 8811 	msr	BASEPRI, r3
 8015076:	f3bf 8f6f 	isb	sy
 801507a:	f3bf 8f4f 	dsb	sy
 801507e:	60bb      	str	r3, [r7, #8]
 8015080:	e7fe      	b.n	8015080 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015082:	693b      	ldr	r3, [r7, #16]
 8015084:	685a      	ldr	r2, [r3, #4]
 8015086:	4b11      	ldr	r3, [pc, #68]	; (80150cc <vPortFree+0xa8>)
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	4013      	ands	r3, r2
 801508c:	2b00      	cmp	r3, #0
 801508e:	d019      	beq.n	80150c4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015090:	693b      	ldr	r3, [r7, #16]
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	2b00      	cmp	r3, #0
 8015096:	d115      	bne.n	80150c4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015098:	693b      	ldr	r3, [r7, #16]
 801509a:	685a      	ldr	r2, [r3, #4]
 801509c:	4b0b      	ldr	r3, [pc, #44]	; (80150cc <vPortFree+0xa8>)
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	43db      	mvns	r3, r3
 80150a2:	401a      	ands	r2, r3
 80150a4:	693b      	ldr	r3, [r7, #16]
 80150a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80150a8:	f7fe fe3a 	bl	8013d20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80150ac:	693b      	ldr	r3, [r7, #16]
 80150ae:	685a      	ldr	r2, [r3, #4]
 80150b0:	4b07      	ldr	r3, [pc, #28]	; (80150d0 <vPortFree+0xac>)
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	4413      	add	r3, r2
 80150b6:	4a06      	ldr	r2, [pc, #24]	; (80150d0 <vPortFree+0xac>)
 80150b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80150ba:	6938      	ldr	r0, [r7, #16]
 80150bc:	f000 f86c 	bl	8015198 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80150c0:	f7fe fe3c 	bl	8013d3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80150c4:	bf00      	nop
 80150c6:	3718      	adds	r7, #24
 80150c8:	46bd      	mov	sp, r7
 80150ca:	bd80      	pop	{r7, pc}
 80150cc:	200065ac 	.word	0x200065ac
 80150d0:	200065a4 	.word	0x200065a4

080150d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80150d4:	b480      	push	{r7}
 80150d6:	b085      	sub	sp, #20
 80150d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80150da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80150de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80150e0:	4b27      	ldr	r3, [pc, #156]	; (8015180 <prvHeapInit+0xac>)
 80150e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	f003 0307 	and.w	r3, r3, #7
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d00c      	beq.n	8015108 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	3307      	adds	r3, #7
 80150f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	f023 0307 	bic.w	r3, r3, #7
 80150fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80150fc:	68ba      	ldr	r2, [r7, #8]
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	1ad3      	subs	r3, r2, r3
 8015102:	4a1f      	ldr	r2, [pc, #124]	; (8015180 <prvHeapInit+0xac>)
 8015104:	4413      	add	r3, r2
 8015106:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801510c:	4a1d      	ldr	r2, [pc, #116]	; (8015184 <prvHeapInit+0xb0>)
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015112:	4b1c      	ldr	r3, [pc, #112]	; (8015184 <prvHeapInit+0xb0>)
 8015114:	2200      	movs	r2, #0
 8015116:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	68ba      	ldr	r2, [r7, #8]
 801511c:	4413      	add	r3, r2
 801511e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015120:	2208      	movs	r2, #8
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	1a9b      	subs	r3, r3, r2
 8015126:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	f023 0307 	bic.w	r3, r3, #7
 801512e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	4a15      	ldr	r2, [pc, #84]	; (8015188 <prvHeapInit+0xb4>)
 8015134:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015136:	4b14      	ldr	r3, [pc, #80]	; (8015188 <prvHeapInit+0xb4>)
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	2200      	movs	r2, #0
 801513c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801513e:	4b12      	ldr	r3, [pc, #72]	; (8015188 <prvHeapInit+0xb4>)
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	2200      	movs	r2, #0
 8015144:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801514a:	683b      	ldr	r3, [r7, #0]
 801514c:	68fa      	ldr	r2, [r7, #12]
 801514e:	1ad2      	subs	r2, r2, r3
 8015150:	683b      	ldr	r3, [r7, #0]
 8015152:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015154:	4b0c      	ldr	r3, [pc, #48]	; (8015188 <prvHeapInit+0xb4>)
 8015156:	681a      	ldr	r2, [r3, #0]
 8015158:	683b      	ldr	r3, [r7, #0]
 801515a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801515c:	683b      	ldr	r3, [r7, #0]
 801515e:	685b      	ldr	r3, [r3, #4]
 8015160:	4a0a      	ldr	r2, [pc, #40]	; (801518c <prvHeapInit+0xb8>)
 8015162:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015164:	683b      	ldr	r3, [r7, #0]
 8015166:	685b      	ldr	r3, [r3, #4]
 8015168:	4a09      	ldr	r2, [pc, #36]	; (8015190 <prvHeapInit+0xbc>)
 801516a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801516c:	4b09      	ldr	r3, [pc, #36]	; (8015194 <prvHeapInit+0xc0>)
 801516e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015172:	601a      	str	r2, [r3, #0]
}
 8015174:	bf00      	nop
 8015176:	3714      	adds	r7, #20
 8015178:	46bd      	mov	sp, r7
 801517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801517e:	4770      	bx	lr
 8015180:	20002998 	.word	0x20002998
 8015184:	20006598 	.word	0x20006598
 8015188:	200065a0 	.word	0x200065a0
 801518c:	200065a8 	.word	0x200065a8
 8015190:	200065a4 	.word	0x200065a4
 8015194:	200065ac 	.word	0x200065ac

08015198 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015198:	b480      	push	{r7}
 801519a:	b085      	sub	sp, #20
 801519c:	af00      	add	r7, sp, #0
 801519e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80151a0:	4b28      	ldr	r3, [pc, #160]	; (8015244 <prvInsertBlockIntoFreeList+0xac>)
 80151a2:	60fb      	str	r3, [r7, #12]
 80151a4:	e002      	b.n	80151ac <prvInsertBlockIntoFreeList+0x14>
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	60fb      	str	r3, [r7, #12]
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	687a      	ldr	r2, [r7, #4]
 80151b2:	429a      	cmp	r2, r3
 80151b4:	d8f7      	bhi.n	80151a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	685b      	ldr	r3, [r3, #4]
 80151be:	68ba      	ldr	r2, [r7, #8]
 80151c0:	4413      	add	r3, r2
 80151c2:	687a      	ldr	r2, [r7, #4]
 80151c4:	429a      	cmp	r2, r3
 80151c6:	d108      	bne.n	80151da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	685a      	ldr	r2, [r3, #4]
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	685b      	ldr	r3, [r3, #4]
 80151d0:	441a      	add	r2, r3
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	685b      	ldr	r3, [r3, #4]
 80151e2:	68ba      	ldr	r2, [r7, #8]
 80151e4:	441a      	add	r2, r3
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	429a      	cmp	r2, r3
 80151ec:	d118      	bne.n	8015220 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	681a      	ldr	r2, [r3, #0]
 80151f2:	4b15      	ldr	r3, [pc, #84]	; (8015248 <prvInsertBlockIntoFreeList+0xb0>)
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	429a      	cmp	r2, r3
 80151f8:	d00d      	beq.n	8015216 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	685a      	ldr	r2, [r3, #4]
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	685b      	ldr	r3, [r3, #4]
 8015204:	441a      	add	r2, r3
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	681a      	ldr	r2, [r3, #0]
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	601a      	str	r2, [r3, #0]
 8015214:	e008      	b.n	8015228 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015216:	4b0c      	ldr	r3, [pc, #48]	; (8015248 <prvInsertBlockIntoFreeList+0xb0>)
 8015218:	681a      	ldr	r2, [r3, #0]
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	601a      	str	r2, [r3, #0]
 801521e:	e003      	b.n	8015228 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	681a      	ldr	r2, [r3, #0]
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015228:	68fa      	ldr	r2, [r7, #12]
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	429a      	cmp	r2, r3
 801522e:	d002      	beq.n	8015236 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	687a      	ldr	r2, [r7, #4]
 8015234:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015236:	bf00      	nop
 8015238:	3714      	adds	r7, #20
 801523a:	46bd      	mov	sp, r7
 801523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015240:	4770      	bx	lr
 8015242:	bf00      	nop
 8015244:	20006598 	.word	0x20006598
 8015248:	200065a0 	.word	0x200065a0

0801524c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801524c:	b580      	push	{r7, lr}
 801524e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015250:	2200      	movs	r2, #0
 8015252:	4912      	ldr	r1, [pc, #72]	; (801529c <MX_USB_DEVICE_Init+0x50>)
 8015254:	4812      	ldr	r0, [pc, #72]	; (80152a0 <MX_USB_DEVICE_Init+0x54>)
 8015256:	f7fc f8a1 	bl	801139c <USBD_Init>
 801525a:	4603      	mov	r3, r0
 801525c:	2b00      	cmp	r3, #0
 801525e:	d001      	beq.n	8015264 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015260:	f7f0 fa64 	bl	800572c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015264:	490f      	ldr	r1, [pc, #60]	; (80152a4 <MX_USB_DEVICE_Init+0x58>)
 8015266:	480e      	ldr	r0, [pc, #56]	; (80152a0 <MX_USB_DEVICE_Init+0x54>)
 8015268:	f7fc f8ce 	bl	8011408 <USBD_RegisterClass>
 801526c:	4603      	mov	r3, r0
 801526e:	2b00      	cmp	r3, #0
 8015270:	d001      	beq.n	8015276 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015272:	f7f0 fa5b 	bl	800572c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015276:	490c      	ldr	r1, [pc, #48]	; (80152a8 <MX_USB_DEVICE_Init+0x5c>)
 8015278:	4809      	ldr	r0, [pc, #36]	; (80152a0 <MX_USB_DEVICE_Init+0x54>)
 801527a:	f7fb fff3 	bl	8011264 <USBD_CDC_RegisterInterface>
 801527e:	4603      	mov	r3, r0
 8015280:	2b00      	cmp	r3, #0
 8015282:	d001      	beq.n	8015288 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015284:	f7f0 fa52 	bl	800572c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015288:	4805      	ldr	r0, [pc, #20]	; (80152a0 <MX_USB_DEVICE_Init+0x54>)
 801528a:	f7fc f8de 	bl	801144a <USBD_Start>
 801528e:	4603      	mov	r3, r0
 8015290:	2b00      	cmp	r3, #0
 8015292:	d001      	beq.n	8015298 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015294:	f7f0 fa4a 	bl	800572c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015298:	bf00      	nop
 801529a:	bd80      	pop	{r7, pc}
 801529c:	200021bc 	.word	0x200021bc
 80152a0:	2000ee54 	.word	0x2000ee54
 80152a4:	200020a0 	.word	0x200020a0
 80152a8:	200021a8 	.word	0x200021a8

080152ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80152ac:	b580      	push	{r7, lr}
 80152ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80152b0:	2200      	movs	r2, #0
 80152b2:	4905      	ldr	r1, [pc, #20]	; (80152c8 <CDC_Init_FS+0x1c>)
 80152b4:	4805      	ldr	r0, [pc, #20]	; (80152cc <CDC_Init_FS+0x20>)
 80152b6:	f7fb ffea 	bl	801128e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80152ba:	4905      	ldr	r1, [pc, #20]	; (80152d0 <CDC_Init_FS+0x24>)
 80152bc:	4803      	ldr	r0, [pc, #12]	; (80152cc <CDC_Init_FS+0x20>)
 80152be:	f7fb ffff 	bl	80112c0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80152c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80152c4:	4618      	mov	r0, r3
 80152c6:	bd80      	pop	{r7, pc}
 80152c8:	2000f324 	.word	0x2000f324
 80152cc:	2000ee54 	.word	0x2000ee54
 80152d0:	2000f124 	.word	0x2000f124

080152d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80152d4:	b480      	push	{r7}
 80152d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80152d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80152da:	4618      	mov	r0, r3
 80152dc:	46bd      	mov	sp, r7
 80152de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e2:	4770      	bx	lr

080152e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80152e4:	b480      	push	{r7}
 80152e6:	b083      	sub	sp, #12
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	4603      	mov	r3, r0
 80152ec:	6039      	str	r1, [r7, #0]
 80152ee:	71fb      	strb	r3, [r7, #7]
 80152f0:	4613      	mov	r3, r2
 80152f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80152f4:	79fb      	ldrb	r3, [r7, #7]
 80152f6:	2b23      	cmp	r3, #35	; 0x23
 80152f8:	f200 808c 	bhi.w	8015414 <CDC_Control_FS+0x130>
 80152fc:	a201      	add	r2, pc, #4	; (adr r2, 8015304 <CDC_Control_FS+0x20>)
 80152fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015302:	bf00      	nop
 8015304:	08015415 	.word	0x08015415
 8015308:	08015415 	.word	0x08015415
 801530c:	08015415 	.word	0x08015415
 8015310:	08015415 	.word	0x08015415
 8015314:	08015415 	.word	0x08015415
 8015318:	08015415 	.word	0x08015415
 801531c:	08015415 	.word	0x08015415
 8015320:	08015415 	.word	0x08015415
 8015324:	08015415 	.word	0x08015415
 8015328:	08015415 	.word	0x08015415
 801532c:	08015415 	.word	0x08015415
 8015330:	08015415 	.word	0x08015415
 8015334:	08015415 	.word	0x08015415
 8015338:	08015415 	.word	0x08015415
 801533c:	08015415 	.word	0x08015415
 8015340:	08015415 	.word	0x08015415
 8015344:	08015415 	.word	0x08015415
 8015348:	08015415 	.word	0x08015415
 801534c:	08015415 	.word	0x08015415
 8015350:	08015415 	.word	0x08015415
 8015354:	08015415 	.word	0x08015415
 8015358:	08015415 	.word	0x08015415
 801535c:	08015415 	.word	0x08015415
 8015360:	08015415 	.word	0x08015415
 8015364:	08015415 	.word	0x08015415
 8015368:	08015415 	.word	0x08015415
 801536c:	08015415 	.word	0x08015415
 8015370:	08015415 	.word	0x08015415
 8015374:	08015415 	.word	0x08015415
 8015378:	08015415 	.word	0x08015415
 801537c:	08015415 	.word	0x08015415
 8015380:	08015415 	.word	0x08015415
 8015384:	08015395 	.word	0x08015395
 8015388:	080153cf 	.word	0x080153cf
 801538c:	08015415 	.word	0x08015415
 8015390:	08015415 	.word	0x08015415
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 8015394:	683b      	ldr	r3, [r7, #0]
 8015396:	781a      	ldrb	r2, [r3, #0]
 8015398:	4b22      	ldr	r3, [pc, #136]	; (8015424 <CDC_Control_FS+0x140>)
 801539a:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 801539c:	683b      	ldr	r3, [r7, #0]
 801539e:	785a      	ldrb	r2, [r3, #1]
 80153a0:	4b20      	ldr	r3, [pc, #128]	; (8015424 <CDC_Control_FS+0x140>)
 80153a2:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 80153a4:	683b      	ldr	r3, [r7, #0]
 80153a6:	789a      	ldrb	r2, [r3, #2]
 80153a8:	4b1e      	ldr	r3, [pc, #120]	; (8015424 <CDC_Control_FS+0x140>)
 80153aa:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 80153ac:	683b      	ldr	r3, [r7, #0]
 80153ae:	78da      	ldrb	r2, [r3, #3]
 80153b0:	4b1c      	ldr	r3, [pc, #112]	; (8015424 <CDC_Control_FS+0x140>)
 80153b2:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 80153b4:	683b      	ldr	r3, [r7, #0]
 80153b6:	791a      	ldrb	r2, [r3, #4]
 80153b8:	4b1a      	ldr	r3, [pc, #104]	; (8015424 <CDC_Control_FS+0x140>)
 80153ba:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 80153bc:	683b      	ldr	r3, [r7, #0]
 80153be:	795a      	ldrb	r2, [r3, #5]
 80153c0:	4b18      	ldr	r3, [pc, #96]	; (8015424 <CDC_Control_FS+0x140>)
 80153c2:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 80153c4:	683b      	ldr	r3, [r7, #0]
 80153c6:	799a      	ldrb	r2, [r3, #6]
 80153c8:	4b16      	ldr	r3, [pc, #88]	; (8015424 <CDC_Control_FS+0x140>)
 80153ca:	719a      	strb	r2, [r3, #6]
    	break;
 80153cc:	e023      	b.n	8015416 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 80153ce:	4b15      	ldr	r3, [pc, #84]	; (8015424 <CDC_Control_FS+0x140>)
 80153d0:	781a      	ldrb	r2, [r3, #0]
 80153d2:	683b      	ldr	r3, [r7, #0]
 80153d4:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 80153d6:	683b      	ldr	r3, [r7, #0]
 80153d8:	3301      	adds	r3, #1
 80153da:	4a12      	ldr	r2, [pc, #72]	; (8015424 <CDC_Control_FS+0x140>)
 80153dc:	7852      	ldrb	r2, [r2, #1]
 80153de:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 80153e0:	683b      	ldr	r3, [r7, #0]
 80153e2:	3302      	adds	r3, #2
 80153e4:	4a0f      	ldr	r2, [pc, #60]	; (8015424 <CDC_Control_FS+0x140>)
 80153e6:	7892      	ldrb	r2, [r2, #2]
 80153e8:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 80153ea:	683b      	ldr	r3, [r7, #0]
 80153ec:	3303      	adds	r3, #3
 80153ee:	4a0d      	ldr	r2, [pc, #52]	; (8015424 <CDC_Control_FS+0x140>)
 80153f0:	78d2      	ldrb	r2, [r2, #3]
 80153f2:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 80153f4:	683b      	ldr	r3, [r7, #0]
 80153f6:	3304      	adds	r3, #4
 80153f8:	4a0a      	ldr	r2, [pc, #40]	; (8015424 <CDC_Control_FS+0x140>)
 80153fa:	7912      	ldrb	r2, [r2, #4]
 80153fc:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 80153fe:	683b      	ldr	r3, [r7, #0]
 8015400:	3305      	adds	r3, #5
 8015402:	4a08      	ldr	r2, [pc, #32]	; (8015424 <CDC_Control_FS+0x140>)
 8015404:	7952      	ldrb	r2, [r2, #5]
 8015406:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 8015408:	683b      	ldr	r3, [r7, #0]
 801540a:	3306      	adds	r3, #6
 801540c:	4a05      	ldr	r2, [pc, #20]	; (8015424 <CDC_Control_FS+0x140>)
 801540e:	7992      	ldrb	r2, [r2, #6]
 8015410:	701a      	strb	r2, [r3, #0]
    break;
 8015412:	e000      	b.n	8015416 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015414:	bf00      	nop
  }

  return (USBD_OK);
 8015416:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015418:	4618      	mov	r0, r3
 801541a:	370c      	adds	r7, #12
 801541c:	46bd      	mov	sp, r7
 801541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015422:	4770      	bx	lr
 8015424:	2000f524 	.word	0x2000f524

08015428 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015428:	b580      	push	{r7, lr}
 801542a:	b082      	sub	sp, #8
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
 8015430:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 8015432:	683b      	ldr	r3, [r7, #0]
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	b29b      	uxth	r3, r3
 8015438:	461a      	mov	r2, r3
 801543a:	6879      	ldr	r1, [r7, #4]
 801543c:	4807      	ldr	r0, [pc, #28]	; (801545c <CDC_Receive_FS+0x34>)
 801543e:	f7f0 fa07 	bl	8005850 <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015442:	6879      	ldr	r1, [r7, #4]
 8015444:	4806      	ldr	r0, [pc, #24]	; (8015460 <CDC_Receive_FS+0x38>)
 8015446:	f7fb ff3b 	bl	80112c0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801544a:	4805      	ldr	r0, [pc, #20]	; (8015460 <CDC_Receive_FS+0x38>)
 801544c:	f7fb ff7c 	bl	8011348 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015450:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015452:	4618      	mov	r0, r3
 8015454:	3708      	adds	r7, #8
 8015456:	46bd      	mov	sp, r7
 8015458:	bd80      	pop	{r7, pc}
 801545a:	bf00      	nop
 801545c:	20000064 	.word	0x20000064
 8015460:	2000ee54 	.word	0x2000ee54

08015464 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015464:	b580      	push	{r7, lr}
 8015466:	b084      	sub	sp, #16
 8015468:	af00      	add	r7, sp, #0
 801546a:	6078      	str	r0, [r7, #4]
 801546c:	460b      	mov	r3, r1
 801546e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015470:	2300      	movs	r3, #0
 8015472:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015474:	4b0d      	ldr	r3, [pc, #52]	; (80154ac <CDC_Transmit_FS+0x48>)
 8015476:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801547a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801547c:	68bb      	ldr	r3, [r7, #8]
 801547e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015482:	2b00      	cmp	r3, #0
 8015484:	d001      	beq.n	801548a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015486:	2301      	movs	r3, #1
 8015488:	e00b      	b.n	80154a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801548a:	887b      	ldrh	r3, [r7, #2]
 801548c:	461a      	mov	r2, r3
 801548e:	6879      	ldr	r1, [r7, #4]
 8015490:	4806      	ldr	r0, [pc, #24]	; (80154ac <CDC_Transmit_FS+0x48>)
 8015492:	f7fb fefc 	bl	801128e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015496:	4805      	ldr	r0, [pc, #20]	; (80154ac <CDC_Transmit_FS+0x48>)
 8015498:	f7fb ff26 	bl	80112e8 <USBD_CDC_TransmitPacket>
 801549c:	4603      	mov	r3, r0
 801549e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80154a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80154a2:	4618      	mov	r0, r3
 80154a4:	3710      	adds	r7, #16
 80154a6:	46bd      	mov	sp, r7
 80154a8:	bd80      	pop	{r7, pc}
 80154aa:	bf00      	nop
 80154ac:	2000ee54 	.word	0x2000ee54

080154b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80154b0:	b480      	push	{r7}
 80154b2:	b087      	sub	sp, #28
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	60f8      	str	r0, [r7, #12]
 80154b8:	60b9      	str	r1, [r7, #8]
 80154ba:	4613      	mov	r3, r2
 80154bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80154be:	2300      	movs	r3, #0
 80154c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80154c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80154c6:	4618      	mov	r0, r3
 80154c8:	371c      	adds	r7, #28
 80154ca:	46bd      	mov	sp, r7
 80154cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d0:	4770      	bx	lr
	...

080154d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154d4:	b480      	push	{r7}
 80154d6:	b083      	sub	sp, #12
 80154d8:	af00      	add	r7, sp, #0
 80154da:	4603      	mov	r3, r0
 80154dc:	6039      	str	r1, [r7, #0]
 80154de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80154e0:	683b      	ldr	r3, [r7, #0]
 80154e2:	2212      	movs	r2, #18
 80154e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80154e6:	4b03      	ldr	r3, [pc, #12]	; (80154f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80154e8:	4618      	mov	r0, r3
 80154ea:	370c      	adds	r7, #12
 80154ec:	46bd      	mov	sp, r7
 80154ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f2:	4770      	bx	lr
 80154f4:	200021d8 	.word	0x200021d8

080154f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154f8:	b480      	push	{r7}
 80154fa:	b083      	sub	sp, #12
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	4603      	mov	r3, r0
 8015500:	6039      	str	r1, [r7, #0]
 8015502:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015504:	683b      	ldr	r3, [r7, #0]
 8015506:	2204      	movs	r2, #4
 8015508:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801550a:	4b03      	ldr	r3, [pc, #12]	; (8015518 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801550c:	4618      	mov	r0, r3
 801550e:	370c      	adds	r7, #12
 8015510:	46bd      	mov	sp, r7
 8015512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015516:	4770      	bx	lr
 8015518:	200021ec 	.word	0x200021ec

0801551c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801551c:	b580      	push	{r7, lr}
 801551e:	b082      	sub	sp, #8
 8015520:	af00      	add	r7, sp, #0
 8015522:	4603      	mov	r3, r0
 8015524:	6039      	str	r1, [r7, #0]
 8015526:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015528:	79fb      	ldrb	r3, [r7, #7]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d105      	bne.n	801553a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801552e:	683a      	ldr	r2, [r7, #0]
 8015530:	4907      	ldr	r1, [pc, #28]	; (8015550 <USBD_FS_ProductStrDescriptor+0x34>)
 8015532:	4808      	ldr	r0, [pc, #32]	; (8015554 <USBD_FS_ProductStrDescriptor+0x38>)
 8015534:	f7fc ff57 	bl	80123e6 <USBD_GetString>
 8015538:	e004      	b.n	8015544 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801553a:	683a      	ldr	r2, [r7, #0]
 801553c:	4904      	ldr	r1, [pc, #16]	; (8015550 <USBD_FS_ProductStrDescriptor+0x34>)
 801553e:	4805      	ldr	r0, [pc, #20]	; (8015554 <USBD_FS_ProductStrDescriptor+0x38>)
 8015540:	f7fc ff51 	bl	80123e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015544:	4b02      	ldr	r3, [pc, #8]	; (8015550 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015546:	4618      	mov	r0, r3
 8015548:	3708      	adds	r7, #8
 801554a:	46bd      	mov	sp, r7
 801554c:	bd80      	pop	{r7, pc}
 801554e:	bf00      	nop
 8015550:	2000f52c 	.word	0x2000f52c
 8015554:	0801b4bc 	.word	0x0801b4bc

08015558 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015558:	b580      	push	{r7, lr}
 801555a:	b082      	sub	sp, #8
 801555c:	af00      	add	r7, sp, #0
 801555e:	4603      	mov	r3, r0
 8015560:	6039      	str	r1, [r7, #0]
 8015562:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015564:	683a      	ldr	r2, [r7, #0]
 8015566:	4904      	ldr	r1, [pc, #16]	; (8015578 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015568:	4804      	ldr	r0, [pc, #16]	; (801557c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801556a:	f7fc ff3c 	bl	80123e6 <USBD_GetString>
  return USBD_StrDesc;
 801556e:	4b02      	ldr	r3, [pc, #8]	; (8015578 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015570:	4618      	mov	r0, r3
 8015572:	3708      	adds	r7, #8
 8015574:	46bd      	mov	sp, r7
 8015576:	bd80      	pop	{r7, pc}
 8015578:	2000f52c 	.word	0x2000f52c
 801557c:	0801b4d4 	.word	0x0801b4d4

08015580 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015580:	b580      	push	{r7, lr}
 8015582:	b082      	sub	sp, #8
 8015584:	af00      	add	r7, sp, #0
 8015586:	4603      	mov	r3, r0
 8015588:	6039      	str	r1, [r7, #0]
 801558a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801558c:	683b      	ldr	r3, [r7, #0]
 801558e:	221a      	movs	r2, #26
 8015590:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015592:	f000 f843 	bl	801561c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015596:	4b02      	ldr	r3, [pc, #8]	; (80155a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015598:	4618      	mov	r0, r3
 801559a:	3708      	adds	r7, #8
 801559c:	46bd      	mov	sp, r7
 801559e:	bd80      	pop	{r7, pc}
 80155a0:	200021f0 	.word	0x200021f0

080155a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155a4:	b580      	push	{r7, lr}
 80155a6:	b082      	sub	sp, #8
 80155a8:	af00      	add	r7, sp, #0
 80155aa:	4603      	mov	r3, r0
 80155ac:	6039      	str	r1, [r7, #0]
 80155ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80155b0:	79fb      	ldrb	r3, [r7, #7]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d105      	bne.n	80155c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80155b6:	683a      	ldr	r2, [r7, #0]
 80155b8:	4907      	ldr	r1, [pc, #28]	; (80155d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80155ba:	4808      	ldr	r0, [pc, #32]	; (80155dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80155bc:	f7fc ff13 	bl	80123e6 <USBD_GetString>
 80155c0:	e004      	b.n	80155cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80155c2:	683a      	ldr	r2, [r7, #0]
 80155c4:	4904      	ldr	r1, [pc, #16]	; (80155d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80155c6:	4805      	ldr	r0, [pc, #20]	; (80155dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80155c8:	f7fc ff0d 	bl	80123e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80155cc:	4b02      	ldr	r3, [pc, #8]	; (80155d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80155ce:	4618      	mov	r0, r3
 80155d0:	3708      	adds	r7, #8
 80155d2:	46bd      	mov	sp, r7
 80155d4:	bd80      	pop	{r7, pc}
 80155d6:	bf00      	nop
 80155d8:	2000f52c 	.word	0x2000f52c
 80155dc:	0801b4e8 	.word	0x0801b4e8

080155e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b082      	sub	sp, #8
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	4603      	mov	r3, r0
 80155e8:	6039      	str	r1, [r7, #0]
 80155ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80155ec:	79fb      	ldrb	r3, [r7, #7]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d105      	bne.n	80155fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80155f2:	683a      	ldr	r2, [r7, #0]
 80155f4:	4907      	ldr	r1, [pc, #28]	; (8015614 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80155f6:	4808      	ldr	r0, [pc, #32]	; (8015618 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80155f8:	f7fc fef5 	bl	80123e6 <USBD_GetString>
 80155fc:	e004      	b.n	8015608 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80155fe:	683a      	ldr	r2, [r7, #0]
 8015600:	4904      	ldr	r1, [pc, #16]	; (8015614 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015602:	4805      	ldr	r0, [pc, #20]	; (8015618 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015604:	f7fc feef 	bl	80123e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015608:	4b02      	ldr	r3, [pc, #8]	; (8015614 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801560a:	4618      	mov	r0, r3
 801560c:	3708      	adds	r7, #8
 801560e:	46bd      	mov	sp, r7
 8015610:	bd80      	pop	{r7, pc}
 8015612:	bf00      	nop
 8015614:	2000f52c 	.word	0x2000f52c
 8015618:	0801b4f4 	.word	0x0801b4f4

0801561c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801561c:	b580      	push	{r7, lr}
 801561e:	b084      	sub	sp, #16
 8015620:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015622:	4b0f      	ldr	r3, [pc, #60]	; (8015660 <Get_SerialNum+0x44>)
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015628:	4b0e      	ldr	r3, [pc, #56]	; (8015664 <Get_SerialNum+0x48>)
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801562e:	4b0e      	ldr	r3, [pc, #56]	; (8015668 <Get_SerialNum+0x4c>)
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015634:	68fa      	ldr	r2, [r7, #12]
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	4413      	add	r3, r2
 801563a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	2b00      	cmp	r3, #0
 8015640:	d009      	beq.n	8015656 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015642:	2208      	movs	r2, #8
 8015644:	4909      	ldr	r1, [pc, #36]	; (801566c <Get_SerialNum+0x50>)
 8015646:	68f8      	ldr	r0, [r7, #12]
 8015648:	f000 f814 	bl	8015674 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801564c:	2204      	movs	r2, #4
 801564e:	4908      	ldr	r1, [pc, #32]	; (8015670 <Get_SerialNum+0x54>)
 8015650:	68b8      	ldr	r0, [r7, #8]
 8015652:	f000 f80f 	bl	8015674 <IntToUnicode>
  }
}
 8015656:	bf00      	nop
 8015658:	3710      	adds	r7, #16
 801565a:	46bd      	mov	sp, r7
 801565c:	bd80      	pop	{r7, pc}
 801565e:	bf00      	nop
 8015660:	1fff7a10 	.word	0x1fff7a10
 8015664:	1fff7a14 	.word	0x1fff7a14
 8015668:	1fff7a18 	.word	0x1fff7a18
 801566c:	200021f2 	.word	0x200021f2
 8015670:	20002202 	.word	0x20002202

08015674 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015674:	b480      	push	{r7}
 8015676:	b087      	sub	sp, #28
 8015678:	af00      	add	r7, sp, #0
 801567a:	60f8      	str	r0, [r7, #12]
 801567c:	60b9      	str	r1, [r7, #8]
 801567e:	4613      	mov	r3, r2
 8015680:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015682:	2300      	movs	r3, #0
 8015684:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015686:	2300      	movs	r3, #0
 8015688:	75fb      	strb	r3, [r7, #23]
 801568a:	e027      	b.n	80156dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	0f1b      	lsrs	r3, r3, #28
 8015690:	2b09      	cmp	r3, #9
 8015692:	d80b      	bhi.n	80156ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	0f1b      	lsrs	r3, r3, #28
 8015698:	b2da      	uxtb	r2, r3
 801569a:	7dfb      	ldrb	r3, [r7, #23]
 801569c:	005b      	lsls	r3, r3, #1
 801569e:	4619      	mov	r1, r3
 80156a0:	68bb      	ldr	r3, [r7, #8]
 80156a2:	440b      	add	r3, r1
 80156a4:	3230      	adds	r2, #48	; 0x30
 80156a6:	b2d2      	uxtb	r2, r2
 80156a8:	701a      	strb	r2, [r3, #0]
 80156aa:	e00a      	b.n	80156c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	0f1b      	lsrs	r3, r3, #28
 80156b0:	b2da      	uxtb	r2, r3
 80156b2:	7dfb      	ldrb	r3, [r7, #23]
 80156b4:	005b      	lsls	r3, r3, #1
 80156b6:	4619      	mov	r1, r3
 80156b8:	68bb      	ldr	r3, [r7, #8]
 80156ba:	440b      	add	r3, r1
 80156bc:	3237      	adds	r2, #55	; 0x37
 80156be:	b2d2      	uxtb	r2, r2
 80156c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	011b      	lsls	r3, r3, #4
 80156c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80156c8:	7dfb      	ldrb	r3, [r7, #23]
 80156ca:	005b      	lsls	r3, r3, #1
 80156cc:	3301      	adds	r3, #1
 80156ce:	68ba      	ldr	r2, [r7, #8]
 80156d0:	4413      	add	r3, r2
 80156d2:	2200      	movs	r2, #0
 80156d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80156d6:	7dfb      	ldrb	r3, [r7, #23]
 80156d8:	3301      	adds	r3, #1
 80156da:	75fb      	strb	r3, [r7, #23]
 80156dc:	7dfa      	ldrb	r2, [r7, #23]
 80156de:	79fb      	ldrb	r3, [r7, #7]
 80156e0:	429a      	cmp	r2, r3
 80156e2:	d3d3      	bcc.n	801568c <IntToUnicode+0x18>
  }
}
 80156e4:	bf00      	nop
 80156e6:	371c      	adds	r7, #28
 80156e8:	46bd      	mov	sp, r7
 80156ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ee:	4770      	bx	lr

080156f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b08a      	sub	sp, #40	; 0x28
 80156f4:	af00      	add	r7, sp, #0
 80156f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80156f8:	f107 0314 	add.w	r3, r7, #20
 80156fc:	2200      	movs	r2, #0
 80156fe:	601a      	str	r2, [r3, #0]
 8015700:	605a      	str	r2, [r3, #4]
 8015702:	609a      	str	r2, [r3, #8]
 8015704:	60da      	str	r2, [r3, #12]
 8015706:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015710:	d13a      	bne.n	8015788 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015712:	2300      	movs	r3, #0
 8015714:	613b      	str	r3, [r7, #16]
 8015716:	4b1e      	ldr	r3, [pc, #120]	; (8015790 <HAL_PCD_MspInit+0xa0>)
 8015718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801571a:	4a1d      	ldr	r2, [pc, #116]	; (8015790 <HAL_PCD_MspInit+0xa0>)
 801571c:	f043 0301 	orr.w	r3, r3, #1
 8015720:	6313      	str	r3, [r2, #48]	; 0x30
 8015722:	4b1b      	ldr	r3, [pc, #108]	; (8015790 <HAL_PCD_MspInit+0xa0>)
 8015724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015726:	f003 0301 	and.w	r3, r3, #1
 801572a:	613b      	str	r3, [r7, #16]
 801572c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801572e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015734:	2302      	movs	r3, #2
 8015736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015738:	2300      	movs	r3, #0
 801573a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801573c:	2303      	movs	r3, #3
 801573e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015740:	230a      	movs	r3, #10
 8015742:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015744:	f107 0314 	add.w	r3, r7, #20
 8015748:	4619      	mov	r1, r3
 801574a:	4812      	ldr	r0, [pc, #72]	; (8015794 <HAL_PCD_MspInit+0xa4>)
 801574c:	f7f6 fbd8 	bl	800bf00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015750:	4b0f      	ldr	r3, [pc, #60]	; (8015790 <HAL_PCD_MspInit+0xa0>)
 8015752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015754:	4a0e      	ldr	r2, [pc, #56]	; (8015790 <HAL_PCD_MspInit+0xa0>)
 8015756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801575a:	6353      	str	r3, [r2, #52]	; 0x34
 801575c:	2300      	movs	r3, #0
 801575e:	60fb      	str	r3, [r7, #12]
 8015760:	4b0b      	ldr	r3, [pc, #44]	; (8015790 <HAL_PCD_MspInit+0xa0>)
 8015762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015764:	4a0a      	ldr	r2, [pc, #40]	; (8015790 <HAL_PCD_MspInit+0xa0>)
 8015766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801576a:	6453      	str	r3, [r2, #68]	; 0x44
 801576c:	4b08      	ldr	r3, [pc, #32]	; (8015790 <HAL_PCD_MspInit+0xa0>)
 801576e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015774:	60fb      	str	r3, [r7, #12]
 8015776:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015778:	2200      	movs	r2, #0
 801577a:	2105      	movs	r1, #5
 801577c:	2043      	movs	r0, #67	; 0x43
 801577e:	f7f5 fff7 	bl	800b770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015782:	2043      	movs	r0, #67	; 0x43
 8015784:	f7f6 f810 	bl	800b7a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015788:	bf00      	nop
 801578a:	3728      	adds	r7, #40	; 0x28
 801578c:	46bd      	mov	sp, r7
 801578e:	bd80      	pop	{r7, pc}
 8015790:	40023800 	.word	0x40023800
 8015794:	40020000 	.word	0x40020000

08015798 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015798:	b580      	push	{r7, lr}
 801579a:	b082      	sub	sp, #8
 801579c:	af00      	add	r7, sp, #0
 801579e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80157ac:	4619      	mov	r1, r3
 80157ae:	4610      	mov	r0, r2
 80157b0:	f7fb fe96 	bl	80114e0 <USBD_LL_SetupStage>
}
 80157b4:	bf00      	nop
 80157b6:	3708      	adds	r7, #8
 80157b8:	46bd      	mov	sp, r7
 80157ba:	bd80      	pop	{r7, pc}

080157bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157bc:	b580      	push	{r7, lr}
 80157be:	b082      	sub	sp, #8
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	6078      	str	r0, [r7, #4]
 80157c4:	460b      	mov	r3, r1
 80157c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80157ce:	78fa      	ldrb	r2, [r7, #3]
 80157d0:	6879      	ldr	r1, [r7, #4]
 80157d2:	4613      	mov	r3, r2
 80157d4:	00db      	lsls	r3, r3, #3
 80157d6:	1a9b      	subs	r3, r3, r2
 80157d8:	009b      	lsls	r3, r3, #2
 80157da:	440b      	add	r3, r1
 80157dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80157e0:	681a      	ldr	r2, [r3, #0]
 80157e2:	78fb      	ldrb	r3, [r7, #3]
 80157e4:	4619      	mov	r1, r3
 80157e6:	f7fb fece 	bl	8011586 <USBD_LL_DataOutStage>
}
 80157ea:	bf00      	nop
 80157ec:	3708      	adds	r7, #8
 80157ee:	46bd      	mov	sp, r7
 80157f0:	bd80      	pop	{r7, pc}

080157f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157f2:	b580      	push	{r7, lr}
 80157f4:	b082      	sub	sp, #8
 80157f6:	af00      	add	r7, sp, #0
 80157f8:	6078      	str	r0, [r7, #4]
 80157fa:	460b      	mov	r3, r1
 80157fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015804:	78fa      	ldrb	r2, [r7, #3]
 8015806:	6879      	ldr	r1, [r7, #4]
 8015808:	4613      	mov	r3, r2
 801580a:	00db      	lsls	r3, r3, #3
 801580c:	1a9b      	subs	r3, r3, r2
 801580e:	009b      	lsls	r3, r3, #2
 8015810:	440b      	add	r3, r1
 8015812:	3348      	adds	r3, #72	; 0x48
 8015814:	681a      	ldr	r2, [r3, #0]
 8015816:	78fb      	ldrb	r3, [r7, #3]
 8015818:	4619      	mov	r1, r3
 801581a:	f7fb ff17 	bl	801164c <USBD_LL_DataInStage>
}
 801581e:	bf00      	nop
 8015820:	3708      	adds	r7, #8
 8015822:	46bd      	mov	sp, r7
 8015824:	bd80      	pop	{r7, pc}

08015826 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015826:	b580      	push	{r7, lr}
 8015828:	b082      	sub	sp, #8
 801582a:	af00      	add	r7, sp, #0
 801582c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015834:	4618      	mov	r0, r3
 8015836:	f7fc f81b 	bl	8011870 <USBD_LL_SOF>
}
 801583a:	bf00      	nop
 801583c:	3708      	adds	r7, #8
 801583e:	46bd      	mov	sp, r7
 8015840:	bd80      	pop	{r7, pc}

08015842 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015842:	b580      	push	{r7, lr}
 8015844:	b084      	sub	sp, #16
 8015846:	af00      	add	r7, sp, #0
 8015848:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801584a:	2301      	movs	r3, #1
 801584c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	68db      	ldr	r3, [r3, #12]
 8015852:	2b00      	cmp	r3, #0
 8015854:	d102      	bne.n	801585c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015856:	2300      	movs	r3, #0
 8015858:	73fb      	strb	r3, [r7, #15]
 801585a:	e008      	b.n	801586e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	68db      	ldr	r3, [r3, #12]
 8015860:	2b02      	cmp	r3, #2
 8015862:	d102      	bne.n	801586a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015864:	2301      	movs	r3, #1
 8015866:	73fb      	strb	r3, [r7, #15]
 8015868:	e001      	b.n	801586e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801586a:	f7ef ff5f 	bl	800572c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015874:	7bfa      	ldrb	r2, [r7, #15]
 8015876:	4611      	mov	r1, r2
 8015878:	4618      	mov	r0, r3
 801587a:	f7fb ffbe 	bl	80117fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015884:	4618      	mov	r0, r3
 8015886:	f7fb ff77 	bl	8011778 <USBD_LL_Reset>
}
 801588a:	bf00      	nop
 801588c:	3710      	adds	r7, #16
 801588e:	46bd      	mov	sp, r7
 8015890:	bd80      	pop	{r7, pc}
	...

08015894 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015894:	b580      	push	{r7, lr}
 8015896:	b082      	sub	sp, #8
 8015898:	af00      	add	r7, sp, #0
 801589a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80158a2:	4618      	mov	r0, r3
 80158a4:	f7fb ffb9 	bl	801181a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	687a      	ldr	r2, [r7, #4]
 80158b4:	6812      	ldr	r2, [r2, #0]
 80158b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80158ba:	f043 0301 	orr.w	r3, r3, #1
 80158be:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	6a1b      	ldr	r3, [r3, #32]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d005      	beq.n	80158d4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80158c8:	4b04      	ldr	r3, [pc, #16]	; (80158dc <HAL_PCD_SuspendCallback+0x48>)
 80158ca:	691b      	ldr	r3, [r3, #16]
 80158cc:	4a03      	ldr	r2, [pc, #12]	; (80158dc <HAL_PCD_SuspendCallback+0x48>)
 80158ce:	f043 0306 	orr.w	r3, r3, #6
 80158d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80158d4:	bf00      	nop
 80158d6:	3708      	adds	r7, #8
 80158d8:	46bd      	mov	sp, r7
 80158da:	bd80      	pop	{r7, pc}
 80158dc:	e000ed00 	.word	0xe000ed00

080158e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b082      	sub	sp, #8
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80158ee:	4618      	mov	r0, r3
 80158f0:	f7fb ffa8 	bl	8011844 <USBD_LL_Resume>
}
 80158f4:	bf00      	nop
 80158f6:	3708      	adds	r7, #8
 80158f8:	46bd      	mov	sp, r7
 80158fa:	bd80      	pop	{r7, pc}

080158fc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158fc:	b580      	push	{r7, lr}
 80158fe:	b082      	sub	sp, #8
 8015900:	af00      	add	r7, sp, #0
 8015902:	6078      	str	r0, [r7, #4]
 8015904:	460b      	mov	r3, r1
 8015906:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801590e:	78fa      	ldrb	r2, [r7, #3]
 8015910:	4611      	mov	r1, r2
 8015912:	4618      	mov	r0, r3
 8015914:	f7fb ffd3 	bl	80118be <USBD_LL_IsoOUTIncomplete>
}
 8015918:	bf00      	nop
 801591a:	3708      	adds	r7, #8
 801591c:	46bd      	mov	sp, r7
 801591e:	bd80      	pop	{r7, pc}

08015920 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015920:	b580      	push	{r7, lr}
 8015922:	b082      	sub	sp, #8
 8015924:	af00      	add	r7, sp, #0
 8015926:	6078      	str	r0, [r7, #4]
 8015928:	460b      	mov	r3, r1
 801592a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015932:	78fa      	ldrb	r2, [r7, #3]
 8015934:	4611      	mov	r1, r2
 8015936:	4618      	mov	r0, r3
 8015938:	f7fb ffb4 	bl	80118a4 <USBD_LL_IsoINIncomplete>
}
 801593c:	bf00      	nop
 801593e:	3708      	adds	r7, #8
 8015940:	46bd      	mov	sp, r7
 8015942:	bd80      	pop	{r7, pc}

08015944 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015944:	b580      	push	{r7, lr}
 8015946:	b082      	sub	sp, #8
 8015948:	af00      	add	r7, sp, #0
 801594a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015952:	4618      	mov	r0, r3
 8015954:	f7fb ffc0 	bl	80118d8 <USBD_LL_DevConnected>
}
 8015958:	bf00      	nop
 801595a:	3708      	adds	r7, #8
 801595c:	46bd      	mov	sp, r7
 801595e:	bd80      	pop	{r7, pc}

08015960 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015960:	b580      	push	{r7, lr}
 8015962:	b082      	sub	sp, #8
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801596e:	4618      	mov	r0, r3
 8015970:	f7fb ffbd 	bl	80118ee <USBD_LL_DevDisconnected>
}
 8015974:	bf00      	nop
 8015976:	3708      	adds	r7, #8
 8015978:	46bd      	mov	sp, r7
 801597a:	bd80      	pop	{r7, pc}

0801597c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801597c:	b580      	push	{r7, lr}
 801597e:	b082      	sub	sp, #8
 8015980:	af00      	add	r7, sp, #0
 8015982:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	781b      	ldrb	r3, [r3, #0]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d13c      	bne.n	8015a06 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801598c:	4a20      	ldr	r2, [pc, #128]	; (8015a10 <USBD_LL_Init+0x94>)
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	4a1e      	ldr	r2, [pc, #120]	; (8015a10 <USBD_LL_Init+0x94>)
 8015998:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801599c:	4b1c      	ldr	r3, [pc, #112]	; (8015a10 <USBD_LL_Init+0x94>)
 801599e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80159a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80159a4:	4b1a      	ldr	r3, [pc, #104]	; (8015a10 <USBD_LL_Init+0x94>)
 80159a6:	2204      	movs	r2, #4
 80159a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80159aa:	4b19      	ldr	r3, [pc, #100]	; (8015a10 <USBD_LL_Init+0x94>)
 80159ac:	2202      	movs	r2, #2
 80159ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80159b0:	4b17      	ldr	r3, [pc, #92]	; (8015a10 <USBD_LL_Init+0x94>)
 80159b2:	2200      	movs	r2, #0
 80159b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80159b6:	4b16      	ldr	r3, [pc, #88]	; (8015a10 <USBD_LL_Init+0x94>)
 80159b8:	2202      	movs	r2, #2
 80159ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80159bc:	4b14      	ldr	r3, [pc, #80]	; (8015a10 <USBD_LL_Init+0x94>)
 80159be:	2200      	movs	r2, #0
 80159c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80159c2:	4b13      	ldr	r3, [pc, #76]	; (8015a10 <USBD_LL_Init+0x94>)
 80159c4:	2200      	movs	r2, #0
 80159c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80159c8:	4b11      	ldr	r3, [pc, #68]	; (8015a10 <USBD_LL_Init+0x94>)
 80159ca:	2200      	movs	r2, #0
 80159cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80159ce:	4b10      	ldr	r3, [pc, #64]	; (8015a10 <USBD_LL_Init+0x94>)
 80159d0:	2200      	movs	r2, #0
 80159d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80159d4:	4b0e      	ldr	r3, [pc, #56]	; (8015a10 <USBD_LL_Init+0x94>)
 80159d6:	2200      	movs	r2, #0
 80159d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80159da:	480d      	ldr	r0, [pc, #52]	; (8015a10 <USBD_LL_Init+0x94>)
 80159dc:	f7f6 fc9a 	bl	800c314 <HAL_PCD_Init>
 80159e0:	4603      	mov	r3, r0
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d001      	beq.n	80159ea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80159e6:	f7ef fea1 	bl	800572c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80159ea:	2180      	movs	r1, #128	; 0x80
 80159ec:	4808      	ldr	r0, [pc, #32]	; (8015a10 <USBD_LL_Init+0x94>)
 80159ee:	f7f7 fdf8 	bl	800d5e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80159f2:	2240      	movs	r2, #64	; 0x40
 80159f4:	2100      	movs	r1, #0
 80159f6:	4806      	ldr	r0, [pc, #24]	; (8015a10 <USBD_LL_Init+0x94>)
 80159f8:	f7f7 fdac 	bl	800d554 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80159fc:	2280      	movs	r2, #128	; 0x80
 80159fe:	2101      	movs	r1, #1
 8015a00:	4803      	ldr	r0, [pc, #12]	; (8015a10 <USBD_LL_Init+0x94>)
 8015a02:	f7f7 fda7 	bl	800d554 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015a06:	2300      	movs	r3, #0
}
 8015a08:	4618      	mov	r0, r3
 8015a0a:	3708      	adds	r7, #8
 8015a0c:	46bd      	mov	sp, r7
 8015a0e:	bd80      	pop	{r7, pc}
 8015a10:	2000f72c 	.word	0x2000f72c

08015a14 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015a14:	b580      	push	{r7, lr}
 8015a16:	b084      	sub	sp, #16
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a1c:	2300      	movs	r3, #0
 8015a1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a20:	2300      	movs	r3, #0
 8015a22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	f7f6 fd8f 	bl	800c54e <HAL_PCD_Start>
 8015a30:	4603      	mov	r3, r0
 8015a32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a34:	7bfb      	ldrb	r3, [r7, #15]
 8015a36:	4618      	mov	r0, r3
 8015a38:	f000 f92a 	bl	8015c90 <USBD_Get_USB_Status>
 8015a3c:	4603      	mov	r3, r0
 8015a3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a40:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a42:	4618      	mov	r0, r3
 8015a44:	3710      	adds	r7, #16
 8015a46:	46bd      	mov	sp, r7
 8015a48:	bd80      	pop	{r7, pc}

08015a4a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015a4a:	b580      	push	{r7, lr}
 8015a4c:	b084      	sub	sp, #16
 8015a4e:	af00      	add	r7, sp, #0
 8015a50:	6078      	str	r0, [r7, #4]
 8015a52:	4608      	mov	r0, r1
 8015a54:	4611      	mov	r1, r2
 8015a56:	461a      	mov	r2, r3
 8015a58:	4603      	mov	r3, r0
 8015a5a:	70fb      	strb	r3, [r7, #3]
 8015a5c:	460b      	mov	r3, r1
 8015a5e:	70bb      	strb	r3, [r7, #2]
 8015a60:	4613      	mov	r3, r2
 8015a62:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a64:	2300      	movs	r3, #0
 8015a66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a68:	2300      	movs	r3, #0
 8015a6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015a72:	78bb      	ldrb	r3, [r7, #2]
 8015a74:	883a      	ldrh	r2, [r7, #0]
 8015a76:	78f9      	ldrb	r1, [r7, #3]
 8015a78:	f7f7 f973 	bl	800cd62 <HAL_PCD_EP_Open>
 8015a7c:	4603      	mov	r3, r0
 8015a7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a80:	7bfb      	ldrb	r3, [r7, #15]
 8015a82:	4618      	mov	r0, r3
 8015a84:	f000 f904 	bl	8015c90 <USBD_Get_USB_Status>
 8015a88:	4603      	mov	r3, r0
 8015a8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a8e:	4618      	mov	r0, r3
 8015a90:	3710      	adds	r7, #16
 8015a92:	46bd      	mov	sp, r7
 8015a94:	bd80      	pop	{r7, pc}

08015a96 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a96:	b580      	push	{r7, lr}
 8015a98:	b084      	sub	sp, #16
 8015a9a:	af00      	add	r7, sp, #0
 8015a9c:	6078      	str	r0, [r7, #4]
 8015a9e:	460b      	mov	r3, r1
 8015aa0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015aa2:	2300      	movs	r3, #0
 8015aa4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015ab0:	78fa      	ldrb	r2, [r7, #3]
 8015ab2:	4611      	mov	r1, r2
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	f7f7 f9bc 	bl	800ce32 <HAL_PCD_EP_Close>
 8015aba:	4603      	mov	r3, r0
 8015abc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015abe:	7bfb      	ldrb	r3, [r7, #15]
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	f000 f8e5 	bl	8015c90 <USBD_Get_USB_Status>
 8015ac6:	4603      	mov	r3, r0
 8015ac8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015aca:	7bbb      	ldrb	r3, [r7, #14]
}
 8015acc:	4618      	mov	r0, r3
 8015ace:	3710      	adds	r7, #16
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	bd80      	pop	{r7, pc}

08015ad4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	b084      	sub	sp, #16
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	6078      	str	r0, [r7, #4]
 8015adc:	460b      	mov	r3, r1
 8015ade:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ae0:	2300      	movs	r3, #0
 8015ae2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015aee:	78fa      	ldrb	r2, [r7, #3]
 8015af0:	4611      	mov	r1, r2
 8015af2:	4618      	mov	r0, r3
 8015af4:	f7f7 fa94 	bl	800d020 <HAL_PCD_EP_SetStall>
 8015af8:	4603      	mov	r3, r0
 8015afa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015afc:	7bfb      	ldrb	r3, [r7, #15]
 8015afe:	4618      	mov	r0, r3
 8015b00:	f000 f8c6 	bl	8015c90 <USBD_Get_USB_Status>
 8015b04:	4603      	mov	r3, r0
 8015b06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b08:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	3710      	adds	r7, #16
 8015b0e:	46bd      	mov	sp, r7
 8015b10:	bd80      	pop	{r7, pc}

08015b12 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b12:	b580      	push	{r7, lr}
 8015b14:	b084      	sub	sp, #16
 8015b16:	af00      	add	r7, sp, #0
 8015b18:	6078      	str	r0, [r7, #4]
 8015b1a:	460b      	mov	r3, r1
 8015b1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b1e:	2300      	movs	r3, #0
 8015b20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b22:	2300      	movs	r3, #0
 8015b24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015b2c:	78fa      	ldrb	r2, [r7, #3]
 8015b2e:	4611      	mov	r1, r2
 8015b30:	4618      	mov	r0, r3
 8015b32:	f7f7 fad9 	bl	800d0e8 <HAL_PCD_EP_ClrStall>
 8015b36:	4603      	mov	r3, r0
 8015b38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b3a:	7bfb      	ldrb	r3, [r7, #15]
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	f000 f8a7 	bl	8015c90 <USBD_Get_USB_Status>
 8015b42:	4603      	mov	r3, r0
 8015b44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b46:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b48:	4618      	mov	r0, r3
 8015b4a:	3710      	adds	r7, #16
 8015b4c:	46bd      	mov	sp, r7
 8015b4e:	bd80      	pop	{r7, pc}

08015b50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b50:	b480      	push	{r7}
 8015b52:	b085      	sub	sp, #20
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	6078      	str	r0, [r7, #4]
 8015b58:	460b      	mov	r3, r1
 8015b5a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015b62:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015b64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	da0b      	bge.n	8015b84 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015b6c:	78fb      	ldrb	r3, [r7, #3]
 8015b6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015b72:	68f9      	ldr	r1, [r7, #12]
 8015b74:	4613      	mov	r3, r2
 8015b76:	00db      	lsls	r3, r3, #3
 8015b78:	1a9b      	subs	r3, r3, r2
 8015b7a:	009b      	lsls	r3, r3, #2
 8015b7c:	440b      	add	r3, r1
 8015b7e:	333e      	adds	r3, #62	; 0x3e
 8015b80:	781b      	ldrb	r3, [r3, #0]
 8015b82:	e00b      	b.n	8015b9c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015b84:	78fb      	ldrb	r3, [r7, #3]
 8015b86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015b8a:	68f9      	ldr	r1, [r7, #12]
 8015b8c:	4613      	mov	r3, r2
 8015b8e:	00db      	lsls	r3, r3, #3
 8015b90:	1a9b      	subs	r3, r3, r2
 8015b92:	009b      	lsls	r3, r3, #2
 8015b94:	440b      	add	r3, r1
 8015b96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015b9a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	3714      	adds	r7, #20
 8015ba0:	46bd      	mov	sp, r7
 8015ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba6:	4770      	bx	lr

08015ba8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015ba8:	b580      	push	{r7, lr}
 8015baa:	b084      	sub	sp, #16
 8015bac:	af00      	add	r7, sp, #0
 8015bae:	6078      	str	r0, [r7, #4]
 8015bb0:	460b      	mov	r3, r1
 8015bb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bb8:	2300      	movs	r3, #0
 8015bba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015bc2:	78fa      	ldrb	r2, [r7, #3]
 8015bc4:	4611      	mov	r1, r2
 8015bc6:	4618      	mov	r0, r3
 8015bc8:	f7f7 f8a6 	bl	800cd18 <HAL_PCD_SetAddress>
 8015bcc:	4603      	mov	r3, r0
 8015bce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015bd0:	7bfb      	ldrb	r3, [r7, #15]
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	f000 f85c 	bl	8015c90 <USBD_Get_USB_Status>
 8015bd8:	4603      	mov	r3, r0
 8015bda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015bdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8015bde:	4618      	mov	r0, r3
 8015be0:	3710      	adds	r7, #16
 8015be2:	46bd      	mov	sp, r7
 8015be4:	bd80      	pop	{r7, pc}

08015be6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015be6:	b580      	push	{r7, lr}
 8015be8:	b086      	sub	sp, #24
 8015bea:	af00      	add	r7, sp, #0
 8015bec:	60f8      	str	r0, [r7, #12]
 8015bee:	607a      	str	r2, [r7, #4]
 8015bf0:	603b      	str	r3, [r7, #0]
 8015bf2:	460b      	mov	r3, r1
 8015bf4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015bf6:	2300      	movs	r3, #0
 8015bf8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015c04:	7af9      	ldrb	r1, [r7, #11]
 8015c06:	683b      	ldr	r3, [r7, #0]
 8015c08:	687a      	ldr	r2, [r7, #4]
 8015c0a:	f7f7 f9bf 	bl	800cf8c <HAL_PCD_EP_Transmit>
 8015c0e:	4603      	mov	r3, r0
 8015c10:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c12:	7dfb      	ldrb	r3, [r7, #23]
 8015c14:	4618      	mov	r0, r3
 8015c16:	f000 f83b 	bl	8015c90 <USBD_Get_USB_Status>
 8015c1a:	4603      	mov	r3, r0
 8015c1c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015c1e:	7dbb      	ldrb	r3, [r7, #22]
}
 8015c20:	4618      	mov	r0, r3
 8015c22:	3718      	adds	r7, #24
 8015c24:	46bd      	mov	sp, r7
 8015c26:	bd80      	pop	{r7, pc}

08015c28 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015c28:	b580      	push	{r7, lr}
 8015c2a:	b086      	sub	sp, #24
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	60f8      	str	r0, [r7, #12]
 8015c30:	607a      	str	r2, [r7, #4]
 8015c32:	603b      	str	r3, [r7, #0]
 8015c34:	460b      	mov	r3, r1
 8015c36:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c38:	2300      	movs	r3, #0
 8015c3a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015c46:	7af9      	ldrb	r1, [r7, #11]
 8015c48:	683b      	ldr	r3, [r7, #0]
 8015c4a:	687a      	ldr	r2, [r7, #4]
 8015c4c:	f7f7 f93b 	bl	800cec6 <HAL_PCD_EP_Receive>
 8015c50:	4603      	mov	r3, r0
 8015c52:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c54:	7dfb      	ldrb	r3, [r7, #23]
 8015c56:	4618      	mov	r0, r3
 8015c58:	f000 f81a 	bl	8015c90 <USBD_Get_USB_Status>
 8015c5c:	4603      	mov	r3, r0
 8015c5e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015c60:	7dbb      	ldrb	r3, [r7, #22]
}
 8015c62:	4618      	mov	r0, r3
 8015c64:	3718      	adds	r7, #24
 8015c66:	46bd      	mov	sp, r7
 8015c68:	bd80      	pop	{r7, pc}

08015c6a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015c6a:	b580      	push	{r7, lr}
 8015c6c:	b082      	sub	sp, #8
 8015c6e:	af00      	add	r7, sp, #0
 8015c70:	6078      	str	r0, [r7, #4]
 8015c72:	460b      	mov	r3, r1
 8015c74:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015c7c:	78fa      	ldrb	r2, [r7, #3]
 8015c7e:	4611      	mov	r1, r2
 8015c80:	4618      	mov	r0, r3
 8015c82:	f7f7 f96b 	bl	800cf5c <HAL_PCD_EP_GetRxCount>
 8015c86:	4603      	mov	r3, r0
}
 8015c88:	4618      	mov	r0, r3
 8015c8a:	3708      	adds	r7, #8
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	bd80      	pop	{r7, pc}

08015c90 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015c90:	b480      	push	{r7}
 8015c92:	b085      	sub	sp, #20
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	4603      	mov	r3, r0
 8015c98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015c9e:	79fb      	ldrb	r3, [r7, #7]
 8015ca0:	2b03      	cmp	r3, #3
 8015ca2:	d817      	bhi.n	8015cd4 <USBD_Get_USB_Status+0x44>
 8015ca4:	a201      	add	r2, pc, #4	; (adr r2, 8015cac <USBD_Get_USB_Status+0x1c>)
 8015ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015caa:	bf00      	nop
 8015cac:	08015cbd 	.word	0x08015cbd
 8015cb0:	08015cc3 	.word	0x08015cc3
 8015cb4:	08015cc9 	.word	0x08015cc9
 8015cb8:	08015ccf 	.word	0x08015ccf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	73fb      	strb	r3, [r7, #15]
    break;
 8015cc0:	e00b      	b.n	8015cda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015cc2:	2303      	movs	r3, #3
 8015cc4:	73fb      	strb	r3, [r7, #15]
    break;
 8015cc6:	e008      	b.n	8015cda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015cc8:	2301      	movs	r3, #1
 8015cca:	73fb      	strb	r3, [r7, #15]
    break;
 8015ccc:	e005      	b.n	8015cda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015cce:	2303      	movs	r3, #3
 8015cd0:	73fb      	strb	r3, [r7, #15]
    break;
 8015cd2:	e002      	b.n	8015cda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015cd4:	2303      	movs	r3, #3
 8015cd6:	73fb      	strb	r3, [r7, #15]
    break;
 8015cd8:	bf00      	nop
  }
  return usb_status;
 8015cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cdc:	4618      	mov	r0, r3
 8015cde:	3714      	adds	r7, #20
 8015ce0:	46bd      	mov	sp, r7
 8015ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce6:	4770      	bx	lr

08015ce8 <__errno>:
 8015ce8:	4b01      	ldr	r3, [pc, #4]	; (8015cf0 <__errno+0x8>)
 8015cea:	6818      	ldr	r0, [r3, #0]
 8015cec:	4770      	bx	lr
 8015cee:	bf00      	nop
 8015cf0:	2000220c 	.word	0x2000220c

08015cf4 <__libc_init_array>:
 8015cf4:	b570      	push	{r4, r5, r6, lr}
 8015cf6:	4e0d      	ldr	r6, [pc, #52]	; (8015d2c <__libc_init_array+0x38>)
 8015cf8:	4c0d      	ldr	r4, [pc, #52]	; (8015d30 <__libc_init_array+0x3c>)
 8015cfa:	1ba4      	subs	r4, r4, r6
 8015cfc:	10a4      	asrs	r4, r4, #2
 8015cfe:	2500      	movs	r5, #0
 8015d00:	42a5      	cmp	r5, r4
 8015d02:	d109      	bne.n	8015d18 <__libc_init_array+0x24>
 8015d04:	4e0b      	ldr	r6, [pc, #44]	; (8015d34 <__libc_init_array+0x40>)
 8015d06:	4c0c      	ldr	r4, [pc, #48]	; (8015d38 <__libc_init_array+0x44>)
 8015d08:	f005 fa8c 	bl	801b224 <_init>
 8015d0c:	1ba4      	subs	r4, r4, r6
 8015d0e:	10a4      	asrs	r4, r4, #2
 8015d10:	2500      	movs	r5, #0
 8015d12:	42a5      	cmp	r5, r4
 8015d14:	d105      	bne.n	8015d22 <__libc_init_array+0x2e>
 8015d16:	bd70      	pop	{r4, r5, r6, pc}
 8015d18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015d1c:	4798      	blx	r3
 8015d1e:	3501      	adds	r5, #1
 8015d20:	e7ee      	b.n	8015d00 <__libc_init_array+0xc>
 8015d22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015d26:	4798      	blx	r3
 8015d28:	3501      	adds	r5, #1
 8015d2a:	e7f2      	b.n	8015d12 <__libc_init_array+0x1e>
 8015d2c:	0801ba08 	.word	0x0801ba08
 8015d30:	0801ba08 	.word	0x0801ba08
 8015d34:	0801ba08 	.word	0x0801ba08
 8015d38:	0801ba0c 	.word	0x0801ba0c

08015d3c <malloc>:
 8015d3c:	4b02      	ldr	r3, [pc, #8]	; (8015d48 <malloc+0xc>)
 8015d3e:	4601      	mov	r1, r0
 8015d40:	6818      	ldr	r0, [r3, #0]
 8015d42:	f000 b885 	b.w	8015e50 <_malloc_r>
 8015d46:	bf00      	nop
 8015d48:	2000220c 	.word	0x2000220c

08015d4c <free>:
 8015d4c:	4b02      	ldr	r3, [pc, #8]	; (8015d58 <free+0xc>)
 8015d4e:	4601      	mov	r1, r0
 8015d50:	6818      	ldr	r0, [r3, #0]
 8015d52:	f000 b82f 	b.w	8015db4 <_free_r>
 8015d56:	bf00      	nop
 8015d58:	2000220c 	.word	0x2000220c

08015d5c <memcpy>:
 8015d5c:	b510      	push	{r4, lr}
 8015d5e:	1e43      	subs	r3, r0, #1
 8015d60:	440a      	add	r2, r1
 8015d62:	4291      	cmp	r1, r2
 8015d64:	d100      	bne.n	8015d68 <memcpy+0xc>
 8015d66:	bd10      	pop	{r4, pc}
 8015d68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015d6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015d70:	e7f7      	b.n	8015d62 <memcpy+0x6>

08015d72 <memmove>:
 8015d72:	4288      	cmp	r0, r1
 8015d74:	b510      	push	{r4, lr}
 8015d76:	eb01 0302 	add.w	r3, r1, r2
 8015d7a:	d807      	bhi.n	8015d8c <memmove+0x1a>
 8015d7c:	1e42      	subs	r2, r0, #1
 8015d7e:	4299      	cmp	r1, r3
 8015d80:	d00a      	beq.n	8015d98 <memmove+0x26>
 8015d82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015d86:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015d8a:	e7f8      	b.n	8015d7e <memmove+0xc>
 8015d8c:	4283      	cmp	r3, r0
 8015d8e:	d9f5      	bls.n	8015d7c <memmove+0xa>
 8015d90:	1881      	adds	r1, r0, r2
 8015d92:	1ad2      	subs	r2, r2, r3
 8015d94:	42d3      	cmn	r3, r2
 8015d96:	d100      	bne.n	8015d9a <memmove+0x28>
 8015d98:	bd10      	pop	{r4, pc}
 8015d9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015d9e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015da2:	e7f7      	b.n	8015d94 <memmove+0x22>

08015da4 <memset>:
 8015da4:	4402      	add	r2, r0
 8015da6:	4603      	mov	r3, r0
 8015da8:	4293      	cmp	r3, r2
 8015daa:	d100      	bne.n	8015dae <memset+0xa>
 8015dac:	4770      	bx	lr
 8015dae:	f803 1b01 	strb.w	r1, [r3], #1
 8015db2:	e7f9      	b.n	8015da8 <memset+0x4>

08015db4 <_free_r>:
 8015db4:	b538      	push	{r3, r4, r5, lr}
 8015db6:	4605      	mov	r5, r0
 8015db8:	2900      	cmp	r1, #0
 8015dba:	d045      	beq.n	8015e48 <_free_r+0x94>
 8015dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015dc0:	1f0c      	subs	r4, r1, #4
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	bfb8      	it	lt
 8015dc6:	18e4      	addlt	r4, r4, r3
 8015dc8:	f002 ff86 	bl	8018cd8 <__malloc_lock>
 8015dcc:	4a1f      	ldr	r2, [pc, #124]	; (8015e4c <_free_r+0x98>)
 8015dce:	6813      	ldr	r3, [r2, #0]
 8015dd0:	4610      	mov	r0, r2
 8015dd2:	b933      	cbnz	r3, 8015de2 <_free_r+0x2e>
 8015dd4:	6063      	str	r3, [r4, #4]
 8015dd6:	6014      	str	r4, [r2, #0]
 8015dd8:	4628      	mov	r0, r5
 8015dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015dde:	f002 bf7c 	b.w	8018cda <__malloc_unlock>
 8015de2:	42a3      	cmp	r3, r4
 8015de4:	d90c      	bls.n	8015e00 <_free_r+0x4c>
 8015de6:	6821      	ldr	r1, [r4, #0]
 8015de8:	1862      	adds	r2, r4, r1
 8015dea:	4293      	cmp	r3, r2
 8015dec:	bf04      	itt	eq
 8015dee:	681a      	ldreq	r2, [r3, #0]
 8015df0:	685b      	ldreq	r3, [r3, #4]
 8015df2:	6063      	str	r3, [r4, #4]
 8015df4:	bf04      	itt	eq
 8015df6:	1852      	addeq	r2, r2, r1
 8015df8:	6022      	streq	r2, [r4, #0]
 8015dfa:	6004      	str	r4, [r0, #0]
 8015dfc:	e7ec      	b.n	8015dd8 <_free_r+0x24>
 8015dfe:	4613      	mov	r3, r2
 8015e00:	685a      	ldr	r2, [r3, #4]
 8015e02:	b10a      	cbz	r2, 8015e08 <_free_r+0x54>
 8015e04:	42a2      	cmp	r2, r4
 8015e06:	d9fa      	bls.n	8015dfe <_free_r+0x4a>
 8015e08:	6819      	ldr	r1, [r3, #0]
 8015e0a:	1858      	adds	r0, r3, r1
 8015e0c:	42a0      	cmp	r0, r4
 8015e0e:	d10b      	bne.n	8015e28 <_free_r+0x74>
 8015e10:	6820      	ldr	r0, [r4, #0]
 8015e12:	4401      	add	r1, r0
 8015e14:	1858      	adds	r0, r3, r1
 8015e16:	4282      	cmp	r2, r0
 8015e18:	6019      	str	r1, [r3, #0]
 8015e1a:	d1dd      	bne.n	8015dd8 <_free_r+0x24>
 8015e1c:	6810      	ldr	r0, [r2, #0]
 8015e1e:	6852      	ldr	r2, [r2, #4]
 8015e20:	605a      	str	r2, [r3, #4]
 8015e22:	4401      	add	r1, r0
 8015e24:	6019      	str	r1, [r3, #0]
 8015e26:	e7d7      	b.n	8015dd8 <_free_r+0x24>
 8015e28:	d902      	bls.n	8015e30 <_free_r+0x7c>
 8015e2a:	230c      	movs	r3, #12
 8015e2c:	602b      	str	r3, [r5, #0]
 8015e2e:	e7d3      	b.n	8015dd8 <_free_r+0x24>
 8015e30:	6820      	ldr	r0, [r4, #0]
 8015e32:	1821      	adds	r1, r4, r0
 8015e34:	428a      	cmp	r2, r1
 8015e36:	bf04      	itt	eq
 8015e38:	6811      	ldreq	r1, [r2, #0]
 8015e3a:	6852      	ldreq	r2, [r2, #4]
 8015e3c:	6062      	str	r2, [r4, #4]
 8015e3e:	bf04      	itt	eq
 8015e40:	1809      	addeq	r1, r1, r0
 8015e42:	6021      	streq	r1, [r4, #0]
 8015e44:	605c      	str	r4, [r3, #4]
 8015e46:	e7c7      	b.n	8015dd8 <_free_r+0x24>
 8015e48:	bd38      	pop	{r3, r4, r5, pc}
 8015e4a:	bf00      	nop
 8015e4c:	200065b0 	.word	0x200065b0

08015e50 <_malloc_r>:
 8015e50:	b570      	push	{r4, r5, r6, lr}
 8015e52:	1ccd      	adds	r5, r1, #3
 8015e54:	f025 0503 	bic.w	r5, r5, #3
 8015e58:	3508      	adds	r5, #8
 8015e5a:	2d0c      	cmp	r5, #12
 8015e5c:	bf38      	it	cc
 8015e5e:	250c      	movcc	r5, #12
 8015e60:	2d00      	cmp	r5, #0
 8015e62:	4606      	mov	r6, r0
 8015e64:	db01      	blt.n	8015e6a <_malloc_r+0x1a>
 8015e66:	42a9      	cmp	r1, r5
 8015e68:	d903      	bls.n	8015e72 <_malloc_r+0x22>
 8015e6a:	230c      	movs	r3, #12
 8015e6c:	6033      	str	r3, [r6, #0]
 8015e6e:	2000      	movs	r0, #0
 8015e70:	bd70      	pop	{r4, r5, r6, pc}
 8015e72:	f002 ff31 	bl	8018cd8 <__malloc_lock>
 8015e76:	4a21      	ldr	r2, [pc, #132]	; (8015efc <_malloc_r+0xac>)
 8015e78:	6814      	ldr	r4, [r2, #0]
 8015e7a:	4621      	mov	r1, r4
 8015e7c:	b991      	cbnz	r1, 8015ea4 <_malloc_r+0x54>
 8015e7e:	4c20      	ldr	r4, [pc, #128]	; (8015f00 <_malloc_r+0xb0>)
 8015e80:	6823      	ldr	r3, [r4, #0]
 8015e82:	b91b      	cbnz	r3, 8015e8c <_malloc_r+0x3c>
 8015e84:	4630      	mov	r0, r6
 8015e86:	f000 fe7b 	bl	8016b80 <_sbrk_r>
 8015e8a:	6020      	str	r0, [r4, #0]
 8015e8c:	4629      	mov	r1, r5
 8015e8e:	4630      	mov	r0, r6
 8015e90:	f000 fe76 	bl	8016b80 <_sbrk_r>
 8015e94:	1c43      	adds	r3, r0, #1
 8015e96:	d124      	bne.n	8015ee2 <_malloc_r+0x92>
 8015e98:	230c      	movs	r3, #12
 8015e9a:	6033      	str	r3, [r6, #0]
 8015e9c:	4630      	mov	r0, r6
 8015e9e:	f002 ff1c 	bl	8018cda <__malloc_unlock>
 8015ea2:	e7e4      	b.n	8015e6e <_malloc_r+0x1e>
 8015ea4:	680b      	ldr	r3, [r1, #0]
 8015ea6:	1b5b      	subs	r3, r3, r5
 8015ea8:	d418      	bmi.n	8015edc <_malloc_r+0x8c>
 8015eaa:	2b0b      	cmp	r3, #11
 8015eac:	d90f      	bls.n	8015ece <_malloc_r+0x7e>
 8015eae:	600b      	str	r3, [r1, #0]
 8015eb0:	50cd      	str	r5, [r1, r3]
 8015eb2:	18cc      	adds	r4, r1, r3
 8015eb4:	4630      	mov	r0, r6
 8015eb6:	f002 ff10 	bl	8018cda <__malloc_unlock>
 8015eba:	f104 000b 	add.w	r0, r4, #11
 8015ebe:	1d23      	adds	r3, r4, #4
 8015ec0:	f020 0007 	bic.w	r0, r0, #7
 8015ec4:	1ac3      	subs	r3, r0, r3
 8015ec6:	d0d3      	beq.n	8015e70 <_malloc_r+0x20>
 8015ec8:	425a      	negs	r2, r3
 8015eca:	50e2      	str	r2, [r4, r3]
 8015ecc:	e7d0      	b.n	8015e70 <_malloc_r+0x20>
 8015ece:	428c      	cmp	r4, r1
 8015ed0:	684b      	ldr	r3, [r1, #4]
 8015ed2:	bf16      	itet	ne
 8015ed4:	6063      	strne	r3, [r4, #4]
 8015ed6:	6013      	streq	r3, [r2, #0]
 8015ed8:	460c      	movne	r4, r1
 8015eda:	e7eb      	b.n	8015eb4 <_malloc_r+0x64>
 8015edc:	460c      	mov	r4, r1
 8015ede:	6849      	ldr	r1, [r1, #4]
 8015ee0:	e7cc      	b.n	8015e7c <_malloc_r+0x2c>
 8015ee2:	1cc4      	adds	r4, r0, #3
 8015ee4:	f024 0403 	bic.w	r4, r4, #3
 8015ee8:	42a0      	cmp	r0, r4
 8015eea:	d005      	beq.n	8015ef8 <_malloc_r+0xa8>
 8015eec:	1a21      	subs	r1, r4, r0
 8015eee:	4630      	mov	r0, r6
 8015ef0:	f000 fe46 	bl	8016b80 <_sbrk_r>
 8015ef4:	3001      	adds	r0, #1
 8015ef6:	d0cf      	beq.n	8015e98 <_malloc_r+0x48>
 8015ef8:	6025      	str	r5, [r4, #0]
 8015efa:	e7db      	b.n	8015eb4 <_malloc_r+0x64>
 8015efc:	200065b0 	.word	0x200065b0
 8015f00:	200065b4 	.word	0x200065b4

08015f04 <__cvt>:
 8015f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015f08:	ec55 4b10 	vmov	r4, r5, d0
 8015f0c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015f0e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015f12:	2d00      	cmp	r5, #0
 8015f14:	460e      	mov	r6, r1
 8015f16:	4691      	mov	r9, r2
 8015f18:	4619      	mov	r1, r3
 8015f1a:	bfb8      	it	lt
 8015f1c:	4622      	movlt	r2, r4
 8015f1e:	462b      	mov	r3, r5
 8015f20:	f027 0720 	bic.w	r7, r7, #32
 8015f24:	bfbb      	ittet	lt
 8015f26:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015f2a:	461d      	movlt	r5, r3
 8015f2c:	2300      	movge	r3, #0
 8015f2e:	232d      	movlt	r3, #45	; 0x2d
 8015f30:	bfb8      	it	lt
 8015f32:	4614      	movlt	r4, r2
 8015f34:	2f46      	cmp	r7, #70	; 0x46
 8015f36:	700b      	strb	r3, [r1, #0]
 8015f38:	d004      	beq.n	8015f44 <__cvt+0x40>
 8015f3a:	2f45      	cmp	r7, #69	; 0x45
 8015f3c:	d100      	bne.n	8015f40 <__cvt+0x3c>
 8015f3e:	3601      	adds	r6, #1
 8015f40:	2102      	movs	r1, #2
 8015f42:	e000      	b.n	8015f46 <__cvt+0x42>
 8015f44:	2103      	movs	r1, #3
 8015f46:	ab03      	add	r3, sp, #12
 8015f48:	9301      	str	r3, [sp, #4]
 8015f4a:	ab02      	add	r3, sp, #8
 8015f4c:	9300      	str	r3, [sp, #0]
 8015f4e:	4632      	mov	r2, r6
 8015f50:	4653      	mov	r3, sl
 8015f52:	ec45 4b10 	vmov	d0, r4, r5
 8015f56:	f001 fdbb 	bl	8017ad0 <_dtoa_r>
 8015f5a:	2f47      	cmp	r7, #71	; 0x47
 8015f5c:	4680      	mov	r8, r0
 8015f5e:	d102      	bne.n	8015f66 <__cvt+0x62>
 8015f60:	f019 0f01 	tst.w	r9, #1
 8015f64:	d026      	beq.n	8015fb4 <__cvt+0xb0>
 8015f66:	2f46      	cmp	r7, #70	; 0x46
 8015f68:	eb08 0906 	add.w	r9, r8, r6
 8015f6c:	d111      	bne.n	8015f92 <__cvt+0x8e>
 8015f6e:	f898 3000 	ldrb.w	r3, [r8]
 8015f72:	2b30      	cmp	r3, #48	; 0x30
 8015f74:	d10a      	bne.n	8015f8c <__cvt+0x88>
 8015f76:	2200      	movs	r2, #0
 8015f78:	2300      	movs	r3, #0
 8015f7a:	4620      	mov	r0, r4
 8015f7c:	4629      	mov	r1, r5
 8015f7e:	f7ea fda3 	bl	8000ac8 <__aeabi_dcmpeq>
 8015f82:	b918      	cbnz	r0, 8015f8c <__cvt+0x88>
 8015f84:	f1c6 0601 	rsb	r6, r6, #1
 8015f88:	f8ca 6000 	str.w	r6, [sl]
 8015f8c:	f8da 3000 	ldr.w	r3, [sl]
 8015f90:	4499      	add	r9, r3
 8015f92:	2200      	movs	r2, #0
 8015f94:	2300      	movs	r3, #0
 8015f96:	4620      	mov	r0, r4
 8015f98:	4629      	mov	r1, r5
 8015f9a:	f7ea fd95 	bl	8000ac8 <__aeabi_dcmpeq>
 8015f9e:	b938      	cbnz	r0, 8015fb0 <__cvt+0xac>
 8015fa0:	2230      	movs	r2, #48	; 0x30
 8015fa2:	9b03      	ldr	r3, [sp, #12]
 8015fa4:	454b      	cmp	r3, r9
 8015fa6:	d205      	bcs.n	8015fb4 <__cvt+0xb0>
 8015fa8:	1c59      	adds	r1, r3, #1
 8015faa:	9103      	str	r1, [sp, #12]
 8015fac:	701a      	strb	r2, [r3, #0]
 8015fae:	e7f8      	b.n	8015fa2 <__cvt+0x9e>
 8015fb0:	f8cd 900c 	str.w	r9, [sp, #12]
 8015fb4:	9b03      	ldr	r3, [sp, #12]
 8015fb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015fb8:	eba3 0308 	sub.w	r3, r3, r8
 8015fbc:	4640      	mov	r0, r8
 8015fbe:	6013      	str	r3, [r2, #0]
 8015fc0:	b004      	add	sp, #16
 8015fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015fc6 <__exponent>:
 8015fc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015fc8:	2900      	cmp	r1, #0
 8015fca:	4604      	mov	r4, r0
 8015fcc:	bfba      	itte	lt
 8015fce:	4249      	neglt	r1, r1
 8015fd0:	232d      	movlt	r3, #45	; 0x2d
 8015fd2:	232b      	movge	r3, #43	; 0x2b
 8015fd4:	2909      	cmp	r1, #9
 8015fd6:	f804 2b02 	strb.w	r2, [r4], #2
 8015fda:	7043      	strb	r3, [r0, #1]
 8015fdc:	dd20      	ble.n	8016020 <__exponent+0x5a>
 8015fde:	f10d 0307 	add.w	r3, sp, #7
 8015fe2:	461f      	mov	r7, r3
 8015fe4:	260a      	movs	r6, #10
 8015fe6:	fb91 f5f6 	sdiv	r5, r1, r6
 8015fea:	fb06 1115 	mls	r1, r6, r5, r1
 8015fee:	3130      	adds	r1, #48	; 0x30
 8015ff0:	2d09      	cmp	r5, #9
 8015ff2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015ff6:	f103 32ff 	add.w	r2, r3, #4294967295
 8015ffa:	4629      	mov	r1, r5
 8015ffc:	dc09      	bgt.n	8016012 <__exponent+0x4c>
 8015ffe:	3130      	adds	r1, #48	; 0x30
 8016000:	3b02      	subs	r3, #2
 8016002:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016006:	42bb      	cmp	r3, r7
 8016008:	4622      	mov	r2, r4
 801600a:	d304      	bcc.n	8016016 <__exponent+0x50>
 801600c:	1a10      	subs	r0, r2, r0
 801600e:	b003      	add	sp, #12
 8016010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016012:	4613      	mov	r3, r2
 8016014:	e7e7      	b.n	8015fe6 <__exponent+0x20>
 8016016:	f813 2b01 	ldrb.w	r2, [r3], #1
 801601a:	f804 2b01 	strb.w	r2, [r4], #1
 801601e:	e7f2      	b.n	8016006 <__exponent+0x40>
 8016020:	2330      	movs	r3, #48	; 0x30
 8016022:	4419      	add	r1, r3
 8016024:	7083      	strb	r3, [r0, #2]
 8016026:	1d02      	adds	r2, r0, #4
 8016028:	70c1      	strb	r1, [r0, #3]
 801602a:	e7ef      	b.n	801600c <__exponent+0x46>

0801602c <_printf_float>:
 801602c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016030:	b08d      	sub	sp, #52	; 0x34
 8016032:	460c      	mov	r4, r1
 8016034:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8016038:	4616      	mov	r6, r2
 801603a:	461f      	mov	r7, r3
 801603c:	4605      	mov	r5, r0
 801603e:	f002 fe2b 	bl	8018c98 <_localeconv_r>
 8016042:	6803      	ldr	r3, [r0, #0]
 8016044:	9304      	str	r3, [sp, #16]
 8016046:	4618      	mov	r0, r3
 8016048:	f7ea f8c2 	bl	80001d0 <strlen>
 801604c:	2300      	movs	r3, #0
 801604e:	930a      	str	r3, [sp, #40]	; 0x28
 8016050:	f8d8 3000 	ldr.w	r3, [r8]
 8016054:	9005      	str	r0, [sp, #20]
 8016056:	3307      	adds	r3, #7
 8016058:	f023 0307 	bic.w	r3, r3, #7
 801605c:	f103 0208 	add.w	r2, r3, #8
 8016060:	f894 a018 	ldrb.w	sl, [r4, #24]
 8016064:	f8d4 b000 	ldr.w	fp, [r4]
 8016068:	f8c8 2000 	str.w	r2, [r8]
 801606c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016070:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8016074:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8016078:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801607c:	9307      	str	r3, [sp, #28]
 801607e:	f8cd 8018 	str.w	r8, [sp, #24]
 8016082:	f04f 32ff 	mov.w	r2, #4294967295
 8016086:	4ba7      	ldr	r3, [pc, #668]	; (8016324 <_printf_float+0x2f8>)
 8016088:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801608c:	f7ea fd4e 	bl	8000b2c <__aeabi_dcmpun>
 8016090:	bb70      	cbnz	r0, 80160f0 <_printf_float+0xc4>
 8016092:	f04f 32ff 	mov.w	r2, #4294967295
 8016096:	4ba3      	ldr	r3, [pc, #652]	; (8016324 <_printf_float+0x2f8>)
 8016098:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801609c:	f7ea fd28 	bl	8000af0 <__aeabi_dcmple>
 80160a0:	bb30      	cbnz	r0, 80160f0 <_printf_float+0xc4>
 80160a2:	2200      	movs	r2, #0
 80160a4:	2300      	movs	r3, #0
 80160a6:	4640      	mov	r0, r8
 80160a8:	4649      	mov	r1, r9
 80160aa:	f7ea fd17 	bl	8000adc <__aeabi_dcmplt>
 80160ae:	b110      	cbz	r0, 80160b6 <_printf_float+0x8a>
 80160b0:	232d      	movs	r3, #45	; 0x2d
 80160b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80160b6:	4a9c      	ldr	r2, [pc, #624]	; (8016328 <_printf_float+0x2fc>)
 80160b8:	4b9c      	ldr	r3, [pc, #624]	; (801632c <_printf_float+0x300>)
 80160ba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80160be:	bf8c      	ite	hi
 80160c0:	4690      	movhi	r8, r2
 80160c2:	4698      	movls	r8, r3
 80160c4:	2303      	movs	r3, #3
 80160c6:	f02b 0204 	bic.w	r2, fp, #4
 80160ca:	6123      	str	r3, [r4, #16]
 80160cc:	6022      	str	r2, [r4, #0]
 80160ce:	f04f 0900 	mov.w	r9, #0
 80160d2:	9700      	str	r7, [sp, #0]
 80160d4:	4633      	mov	r3, r6
 80160d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80160d8:	4621      	mov	r1, r4
 80160da:	4628      	mov	r0, r5
 80160dc:	f000 f9e6 	bl	80164ac <_printf_common>
 80160e0:	3001      	adds	r0, #1
 80160e2:	f040 808d 	bne.w	8016200 <_printf_float+0x1d4>
 80160e6:	f04f 30ff 	mov.w	r0, #4294967295
 80160ea:	b00d      	add	sp, #52	; 0x34
 80160ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160f0:	4642      	mov	r2, r8
 80160f2:	464b      	mov	r3, r9
 80160f4:	4640      	mov	r0, r8
 80160f6:	4649      	mov	r1, r9
 80160f8:	f7ea fd18 	bl	8000b2c <__aeabi_dcmpun>
 80160fc:	b110      	cbz	r0, 8016104 <_printf_float+0xd8>
 80160fe:	4a8c      	ldr	r2, [pc, #560]	; (8016330 <_printf_float+0x304>)
 8016100:	4b8c      	ldr	r3, [pc, #560]	; (8016334 <_printf_float+0x308>)
 8016102:	e7da      	b.n	80160ba <_printf_float+0x8e>
 8016104:	6861      	ldr	r1, [r4, #4]
 8016106:	1c4b      	adds	r3, r1, #1
 8016108:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801610c:	a80a      	add	r0, sp, #40	; 0x28
 801610e:	d13e      	bne.n	801618e <_printf_float+0x162>
 8016110:	2306      	movs	r3, #6
 8016112:	6063      	str	r3, [r4, #4]
 8016114:	2300      	movs	r3, #0
 8016116:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801611a:	ab09      	add	r3, sp, #36	; 0x24
 801611c:	9300      	str	r3, [sp, #0]
 801611e:	ec49 8b10 	vmov	d0, r8, r9
 8016122:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016126:	6022      	str	r2, [r4, #0]
 8016128:	f8cd a004 	str.w	sl, [sp, #4]
 801612c:	6861      	ldr	r1, [r4, #4]
 801612e:	4628      	mov	r0, r5
 8016130:	f7ff fee8 	bl	8015f04 <__cvt>
 8016134:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8016138:	2b47      	cmp	r3, #71	; 0x47
 801613a:	4680      	mov	r8, r0
 801613c:	d109      	bne.n	8016152 <_printf_float+0x126>
 801613e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016140:	1cd8      	adds	r0, r3, #3
 8016142:	db02      	blt.n	801614a <_printf_float+0x11e>
 8016144:	6862      	ldr	r2, [r4, #4]
 8016146:	4293      	cmp	r3, r2
 8016148:	dd47      	ble.n	80161da <_printf_float+0x1ae>
 801614a:	f1aa 0a02 	sub.w	sl, sl, #2
 801614e:	fa5f fa8a 	uxtb.w	sl, sl
 8016152:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8016156:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016158:	d824      	bhi.n	80161a4 <_printf_float+0x178>
 801615a:	3901      	subs	r1, #1
 801615c:	4652      	mov	r2, sl
 801615e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016162:	9109      	str	r1, [sp, #36]	; 0x24
 8016164:	f7ff ff2f 	bl	8015fc6 <__exponent>
 8016168:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801616a:	1813      	adds	r3, r2, r0
 801616c:	2a01      	cmp	r2, #1
 801616e:	4681      	mov	r9, r0
 8016170:	6123      	str	r3, [r4, #16]
 8016172:	dc02      	bgt.n	801617a <_printf_float+0x14e>
 8016174:	6822      	ldr	r2, [r4, #0]
 8016176:	07d1      	lsls	r1, r2, #31
 8016178:	d501      	bpl.n	801617e <_printf_float+0x152>
 801617a:	3301      	adds	r3, #1
 801617c:	6123      	str	r3, [r4, #16]
 801617e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016182:	2b00      	cmp	r3, #0
 8016184:	d0a5      	beq.n	80160d2 <_printf_float+0xa6>
 8016186:	232d      	movs	r3, #45	; 0x2d
 8016188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801618c:	e7a1      	b.n	80160d2 <_printf_float+0xa6>
 801618e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8016192:	f000 8177 	beq.w	8016484 <_printf_float+0x458>
 8016196:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801619a:	d1bb      	bne.n	8016114 <_printf_float+0xe8>
 801619c:	2900      	cmp	r1, #0
 801619e:	d1b9      	bne.n	8016114 <_printf_float+0xe8>
 80161a0:	2301      	movs	r3, #1
 80161a2:	e7b6      	b.n	8016112 <_printf_float+0xe6>
 80161a4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80161a8:	d119      	bne.n	80161de <_printf_float+0x1b2>
 80161aa:	2900      	cmp	r1, #0
 80161ac:	6863      	ldr	r3, [r4, #4]
 80161ae:	dd0c      	ble.n	80161ca <_printf_float+0x19e>
 80161b0:	6121      	str	r1, [r4, #16]
 80161b2:	b913      	cbnz	r3, 80161ba <_printf_float+0x18e>
 80161b4:	6822      	ldr	r2, [r4, #0]
 80161b6:	07d2      	lsls	r2, r2, #31
 80161b8:	d502      	bpl.n	80161c0 <_printf_float+0x194>
 80161ba:	3301      	adds	r3, #1
 80161bc:	440b      	add	r3, r1
 80161be:	6123      	str	r3, [r4, #16]
 80161c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161c2:	65a3      	str	r3, [r4, #88]	; 0x58
 80161c4:	f04f 0900 	mov.w	r9, #0
 80161c8:	e7d9      	b.n	801617e <_printf_float+0x152>
 80161ca:	b913      	cbnz	r3, 80161d2 <_printf_float+0x1a6>
 80161cc:	6822      	ldr	r2, [r4, #0]
 80161ce:	07d0      	lsls	r0, r2, #31
 80161d0:	d501      	bpl.n	80161d6 <_printf_float+0x1aa>
 80161d2:	3302      	adds	r3, #2
 80161d4:	e7f3      	b.n	80161be <_printf_float+0x192>
 80161d6:	2301      	movs	r3, #1
 80161d8:	e7f1      	b.n	80161be <_printf_float+0x192>
 80161da:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80161de:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80161e2:	4293      	cmp	r3, r2
 80161e4:	db05      	blt.n	80161f2 <_printf_float+0x1c6>
 80161e6:	6822      	ldr	r2, [r4, #0]
 80161e8:	6123      	str	r3, [r4, #16]
 80161ea:	07d1      	lsls	r1, r2, #31
 80161ec:	d5e8      	bpl.n	80161c0 <_printf_float+0x194>
 80161ee:	3301      	adds	r3, #1
 80161f0:	e7e5      	b.n	80161be <_printf_float+0x192>
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	bfd4      	ite	le
 80161f6:	f1c3 0302 	rsble	r3, r3, #2
 80161fa:	2301      	movgt	r3, #1
 80161fc:	4413      	add	r3, r2
 80161fe:	e7de      	b.n	80161be <_printf_float+0x192>
 8016200:	6823      	ldr	r3, [r4, #0]
 8016202:	055a      	lsls	r2, r3, #21
 8016204:	d407      	bmi.n	8016216 <_printf_float+0x1ea>
 8016206:	6923      	ldr	r3, [r4, #16]
 8016208:	4642      	mov	r2, r8
 801620a:	4631      	mov	r1, r6
 801620c:	4628      	mov	r0, r5
 801620e:	47b8      	blx	r7
 8016210:	3001      	adds	r0, #1
 8016212:	d12b      	bne.n	801626c <_printf_float+0x240>
 8016214:	e767      	b.n	80160e6 <_printf_float+0xba>
 8016216:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801621a:	f240 80dc 	bls.w	80163d6 <_printf_float+0x3aa>
 801621e:	2200      	movs	r2, #0
 8016220:	2300      	movs	r3, #0
 8016222:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016226:	f7ea fc4f 	bl	8000ac8 <__aeabi_dcmpeq>
 801622a:	2800      	cmp	r0, #0
 801622c:	d033      	beq.n	8016296 <_printf_float+0x26a>
 801622e:	2301      	movs	r3, #1
 8016230:	4a41      	ldr	r2, [pc, #260]	; (8016338 <_printf_float+0x30c>)
 8016232:	4631      	mov	r1, r6
 8016234:	4628      	mov	r0, r5
 8016236:	47b8      	blx	r7
 8016238:	3001      	adds	r0, #1
 801623a:	f43f af54 	beq.w	80160e6 <_printf_float+0xba>
 801623e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016242:	429a      	cmp	r2, r3
 8016244:	db02      	blt.n	801624c <_printf_float+0x220>
 8016246:	6823      	ldr	r3, [r4, #0]
 8016248:	07d8      	lsls	r0, r3, #31
 801624a:	d50f      	bpl.n	801626c <_printf_float+0x240>
 801624c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016250:	4631      	mov	r1, r6
 8016252:	4628      	mov	r0, r5
 8016254:	47b8      	blx	r7
 8016256:	3001      	adds	r0, #1
 8016258:	f43f af45 	beq.w	80160e6 <_printf_float+0xba>
 801625c:	f04f 0800 	mov.w	r8, #0
 8016260:	f104 091a 	add.w	r9, r4, #26
 8016264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016266:	3b01      	subs	r3, #1
 8016268:	4543      	cmp	r3, r8
 801626a:	dc09      	bgt.n	8016280 <_printf_float+0x254>
 801626c:	6823      	ldr	r3, [r4, #0]
 801626e:	079b      	lsls	r3, r3, #30
 8016270:	f100 8103 	bmi.w	801647a <_printf_float+0x44e>
 8016274:	68e0      	ldr	r0, [r4, #12]
 8016276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016278:	4298      	cmp	r0, r3
 801627a:	bfb8      	it	lt
 801627c:	4618      	movlt	r0, r3
 801627e:	e734      	b.n	80160ea <_printf_float+0xbe>
 8016280:	2301      	movs	r3, #1
 8016282:	464a      	mov	r2, r9
 8016284:	4631      	mov	r1, r6
 8016286:	4628      	mov	r0, r5
 8016288:	47b8      	blx	r7
 801628a:	3001      	adds	r0, #1
 801628c:	f43f af2b 	beq.w	80160e6 <_printf_float+0xba>
 8016290:	f108 0801 	add.w	r8, r8, #1
 8016294:	e7e6      	b.n	8016264 <_printf_float+0x238>
 8016296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016298:	2b00      	cmp	r3, #0
 801629a:	dc2b      	bgt.n	80162f4 <_printf_float+0x2c8>
 801629c:	2301      	movs	r3, #1
 801629e:	4a26      	ldr	r2, [pc, #152]	; (8016338 <_printf_float+0x30c>)
 80162a0:	4631      	mov	r1, r6
 80162a2:	4628      	mov	r0, r5
 80162a4:	47b8      	blx	r7
 80162a6:	3001      	adds	r0, #1
 80162a8:	f43f af1d 	beq.w	80160e6 <_printf_float+0xba>
 80162ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162ae:	b923      	cbnz	r3, 80162ba <_printf_float+0x28e>
 80162b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80162b2:	b913      	cbnz	r3, 80162ba <_printf_float+0x28e>
 80162b4:	6823      	ldr	r3, [r4, #0]
 80162b6:	07d9      	lsls	r1, r3, #31
 80162b8:	d5d8      	bpl.n	801626c <_printf_float+0x240>
 80162ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80162be:	4631      	mov	r1, r6
 80162c0:	4628      	mov	r0, r5
 80162c2:	47b8      	blx	r7
 80162c4:	3001      	adds	r0, #1
 80162c6:	f43f af0e 	beq.w	80160e6 <_printf_float+0xba>
 80162ca:	f04f 0900 	mov.w	r9, #0
 80162ce:	f104 0a1a 	add.w	sl, r4, #26
 80162d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162d4:	425b      	negs	r3, r3
 80162d6:	454b      	cmp	r3, r9
 80162d8:	dc01      	bgt.n	80162de <_printf_float+0x2b2>
 80162da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80162dc:	e794      	b.n	8016208 <_printf_float+0x1dc>
 80162de:	2301      	movs	r3, #1
 80162e0:	4652      	mov	r2, sl
 80162e2:	4631      	mov	r1, r6
 80162e4:	4628      	mov	r0, r5
 80162e6:	47b8      	blx	r7
 80162e8:	3001      	adds	r0, #1
 80162ea:	f43f aefc 	beq.w	80160e6 <_printf_float+0xba>
 80162ee:	f109 0901 	add.w	r9, r9, #1
 80162f2:	e7ee      	b.n	80162d2 <_printf_float+0x2a6>
 80162f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80162f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80162f8:	429a      	cmp	r2, r3
 80162fa:	bfa8      	it	ge
 80162fc:	461a      	movge	r2, r3
 80162fe:	2a00      	cmp	r2, #0
 8016300:	4691      	mov	r9, r2
 8016302:	dd07      	ble.n	8016314 <_printf_float+0x2e8>
 8016304:	4613      	mov	r3, r2
 8016306:	4631      	mov	r1, r6
 8016308:	4642      	mov	r2, r8
 801630a:	4628      	mov	r0, r5
 801630c:	47b8      	blx	r7
 801630e:	3001      	adds	r0, #1
 8016310:	f43f aee9 	beq.w	80160e6 <_printf_float+0xba>
 8016314:	f104 031a 	add.w	r3, r4, #26
 8016318:	f04f 0b00 	mov.w	fp, #0
 801631c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016320:	9306      	str	r3, [sp, #24]
 8016322:	e015      	b.n	8016350 <_printf_float+0x324>
 8016324:	7fefffff 	.word	0x7fefffff
 8016328:	0801b52c 	.word	0x0801b52c
 801632c:	0801b528 	.word	0x0801b528
 8016330:	0801b534 	.word	0x0801b534
 8016334:	0801b530 	.word	0x0801b530
 8016338:	0801b538 	.word	0x0801b538
 801633c:	2301      	movs	r3, #1
 801633e:	9a06      	ldr	r2, [sp, #24]
 8016340:	4631      	mov	r1, r6
 8016342:	4628      	mov	r0, r5
 8016344:	47b8      	blx	r7
 8016346:	3001      	adds	r0, #1
 8016348:	f43f aecd 	beq.w	80160e6 <_printf_float+0xba>
 801634c:	f10b 0b01 	add.w	fp, fp, #1
 8016350:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8016354:	ebaa 0309 	sub.w	r3, sl, r9
 8016358:	455b      	cmp	r3, fp
 801635a:	dcef      	bgt.n	801633c <_printf_float+0x310>
 801635c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016360:	429a      	cmp	r2, r3
 8016362:	44d0      	add	r8, sl
 8016364:	db15      	blt.n	8016392 <_printf_float+0x366>
 8016366:	6823      	ldr	r3, [r4, #0]
 8016368:	07da      	lsls	r2, r3, #31
 801636a:	d412      	bmi.n	8016392 <_printf_float+0x366>
 801636c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801636e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016370:	eba3 020a 	sub.w	r2, r3, sl
 8016374:	eba3 0a01 	sub.w	sl, r3, r1
 8016378:	4592      	cmp	sl, r2
 801637a:	bfa8      	it	ge
 801637c:	4692      	movge	sl, r2
 801637e:	f1ba 0f00 	cmp.w	sl, #0
 8016382:	dc0e      	bgt.n	80163a2 <_printf_float+0x376>
 8016384:	f04f 0800 	mov.w	r8, #0
 8016388:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801638c:	f104 091a 	add.w	r9, r4, #26
 8016390:	e019      	b.n	80163c6 <_printf_float+0x39a>
 8016392:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016396:	4631      	mov	r1, r6
 8016398:	4628      	mov	r0, r5
 801639a:	47b8      	blx	r7
 801639c:	3001      	adds	r0, #1
 801639e:	d1e5      	bne.n	801636c <_printf_float+0x340>
 80163a0:	e6a1      	b.n	80160e6 <_printf_float+0xba>
 80163a2:	4653      	mov	r3, sl
 80163a4:	4642      	mov	r2, r8
 80163a6:	4631      	mov	r1, r6
 80163a8:	4628      	mov	r0, r5
 80163aa:	47b8      	blx	r7
 80163ac:	3001      	adds	r0, #1
 80163ae:	d1e9      	bne.n	8016384 <_printf_float+0x358>
 80163b0:	e699      	b.n	80160e6 <_printf_float+0xba>
 80163b2:	2301      	movs	r3, #1
 80163b4:	464a      	mov	r2, r9
 80163b6:	4631      	mov	r1, r6
 80163b8:	4628      	mov	r0, r5
 80163ba:	47b8      	blx	r7
 80163bc:	3001      	adds	r0, #1
 80163be:	f43f ae92 	beq.w	80160e6 <_printf_float+0xba>
 80163c2:	f108 0801 	add.w	r8, r8, #1
 80163c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80163ca:	1a9b      	subs	r3, r3, r2
 80163cc:	eba3 030a 	sub.w	r3, r3, sl
 80163d0:	4543      	cmp	r3, r8
 80163d2:	dcee      	bgt.n	80163b2 <_printf_float+0x386>
 80163d4:	e74a      	b.n	801626c <_printf_float+0x240>
 80163d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80163d8:	2a01      	cmp	r2, #1
 80163da:	dc01      	bgt.n	80163e0 <_printf_float+0x3b4>
 80163dc:	07db      	lsls	r3, r3, #31
 80163de:	d53a      	bpl.n	8016456 <_printf_float+0x42a>
 80163e0:	2301      	movs	r3, #1
 80163e2:	4642      	mov	r2, r8
 80163e4:	4631      	mov	r1, r6
 80163e6:	4628      	mov	r0, r5
 80163e8:	47b8      	blx	r7
 80163ea:	3001      	adds	r0, #1
 80163ec:	f43f ae7b 	beq.w	80160e6 <_printf_float+0xba>
 80163f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80163f4:	4631      	mov	r1, r6
 80163f6:	4628      	mov	r0, r5
 80163f8:	47b8      	blx	r7
 80163fa:	3001      	adds	r0, #1
 80163fc:	f108 0801 	add.w	r8, r8, #1
 8016400:	f43f ae71 	beq.w	80160e6 <_printf_float+0xba>
 8016404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016406:	2200      	movs	r2, #0
 8016408:	f103 3aff 	add.w	sl, r3, #4294967295
 801640c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016410:	2300      	movs	r3, #0
 8016412:	f7ea fb59 	bl	8000ac8 <__aeabi_dcmpeq>
 8016416:	b9c8      	cbnz	r0, 801644c <_printf_float+0x420>
 8016418:	4653      	mov	r3, sl
 801641a:	4642      	mov	r2, r8
 801641c:	4631      	mov	r1, r6
 801641e:	4628      	mov	r0, r5
 8016420:	47b8      	blx	r7
 8016422:	3001      	adds	r0, #1
 8016424:	d10e      	bne.n	8016444 <_printf_float+0x418>
 8016426:	e65e      	b.n	80160e6 <_printf_float+0xba>
 8016428:	2301      	movs	r3, #1
 801642a:	4652      	mov	r2, sl
 801642c:	4631      	mov	r1, r6
 801642e:	4628      	mov	r0, r5
 8016430:	47b8      	blx	r7
 8016432:	3001      	adds	r0, #1
 8016434:	f43f ae57 	beq.w	80160e6 <_printf_float+0xba>
 8016438:	f108 0801 	add.w	r8, r8, #1
 801643c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801643e:	3b01      	subs	r3, #1
 8016440:	4543      	cmp	r3, r8
 8016442:	dcf1      	bgt.n	8016428 <_printf_float+0x3fc>
 8016444:	464b      	mov	r3, r9
 8016446:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801644a:	e6de      	b.n	801620a <_printf_float+0x1de>
 801644c:	f04f 0800 	mov.w	r8, #0
 8016450:	f104 0a1a 	add.w	sl, r4, #26
 8016454:	e7f2      	b.n	801643c <_printf_float+0x410>
 8016456:	2301      	movs	r3, #1
 8016458:	e7df      	b.n	801641a <_printf_float+0x3ee>
 801645a:	2301      	movs	r3, #1
 801645c:	464a      	mov	r2, r9
 801645e:	4631      	mov	r1, r6
 8016460:	4628      	mov	r0, r5
 8016462:	47b8      	blx	r7
 8016464:	3001      	adds	r0, #1
 8016466:	f43f ae3e 	beq.w	80160e6 <_printf_float+0xba>
 801646a:	f108 0801 	add.w	r8, r8, #1
 801646e:	68e3      	ldr	r3, [r4, #12]
 8016470:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016472:	1a9b      	subs	r3, r3, r2
 8016474:	4543      	cmp	r3, r8
 8016476:	dcf0      	bgt.n	801645a <_printf_float+0x42e>
 8016478:	e6fc      	b.n	8016274 <_printf_float+0x248>
 801647a:	f04f 0800 	mov.w	r8, #0
 801647e:	f104 0919 	add.w	r9, r4, #25
 8016482:	e7f4      	b.n	801646e <_printf_float+0x442>
 8016484:	2900      	cmp	r1, #0
 8016486:	f43f ae8b 	beq.w	80161a0 <_printf_float+0x174>
 801648a:	2300      	movs	r3, #0
 801648c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8016490:	ab09      	add	r3, sp, #36	; 0x24
 8016492:	9300      	str	r3, [sp, #0]
 8016494:	ec49 8b10 	vmov	d0, r8, r9
 8016498:	6022      	str	r2, [r4, #0]
 801649a:	f8cd a004 	str.w	sl, [sp, #4]
 801649e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80164a2:	4628      	mov	r0, r5
 80164a4:	f7ff fd2e 	bl	8015f04 <__cvt>
 80164a8:	4680      	mov	r8, r0
 80164aa:	e648      	b.n	801613e <_printf_float+0x112>

080164ac <_printf_common>:
 80164ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164b0:	4691      	mov	r9, r2
 80164b2:	461f      	mov	r7, r3
 80164b4:	688a      	ldr	r2, [r1, #8]
 80164b6:	690b      	ldr	r3, [r1, #16]
 80164b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80164bc:	4293      	cmp	r3, r2
 80164be:	bfb8      	it	lt
 80164c0:	4613      	movlt	r3, r2
 80164c2:	f8c9 3000 	str.w	r3, [r9]
 80164c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80164ca:	4606      	mov	r6, r0
 80164cc:	460c      	mov	r4, r1
 80164ce:	b112      	cbz	r2, 80164d6 <_printf_common+0x2a>
 80164d0:	3301      	adds	r3, #1
 80164d2:	f8c9 3000 	str.w	r3, [r9]
 80164d6:	6823      	ldr	r3, [r4, #0]
 80164d8:	0699      	lsls	r1, r3, #26
 80164da:	bf42      	ittt	mi
 80164dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80164e0:	3302      	addmi	r3, #2
 80164e2:	f8c9 3000 	strmi.w	r3, [r9]
 80164e6:	6825      	ldr	r5, [r4, #0]
 80164e8:	f015 0506 	ands.w	r5, r5, #6
 80164ec:	d107      	bne.n	80164fe <_printf_common+0x52>
 80164ee:	f104 0a19 	add.w	sl, r4, #25
 80164f2:	68e3      	ldr	r3, [r4, #12]
 80164f4:	f8d9 2000 	ldr.w	r2, [r9]
 80164f8:	1a9b      	subs	r3, r3, r2
 80164fa:	42ab      	cmp	r3, r5
 80164fc:	dc28      	bgt.n	8016550 <_printf_common+0xa4>
 80164fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016502:	6822      	ldr	r2, [r4, #0]
 8016504:	3300      	adds	r3, #0
 8016506:	bf18      	it	ne
 8016508:	2301      	movne	r3, #1
 801650a:	0692      	lsls	r2, r2, #26
 801650c:	d42d      	bmi.n	801656a <_printf_common+0xbe>
 801650e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016512:	4639      	mov	r1, r7
 8016514:	4630      	mov	r0, r6
 8016516:	47c0      	blx	r8
 8016518:	3001      	adds	r0, #1
 801651a:	d020      	beq.n	801655e <_printf_common+0xb2>
 801651c:	6823      	ldr	r3, [r4, #0]
 801651e:	68e5      	ldr	r5, [r4, #12]
 8016520:	f8d9 2000 	ldr.w	r2, [r9]
 8016524:	f003 0306 	and.w	r3, r3, #6
 8016528:	2b04      	cmp	r3, #4
 801652a:	bf08      	it	eq
 801652c:	1aad      	subeq	r5, r5, r2
 801652e:	68a3      	ldr	r3, [r4, #8]
 8016530:	6922      	ldr	r2, [r4, #16]
 8016532:	bf0c      	ite	eq
 8016534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016538:	2500      	movne	r5, #0
 801653a:	4293      	cmp	r3, r2
 801653c:	bfc4      	itt	gt
 801653e:	1a9b      	subgt	r3, r3, r2
 8016540:	18ed      	addgt	r5, r5, r3
 8016542:	f04f 0900 	mov.w	r9, #0
 8016546:	341a      	adds	r4, #26
 8016548:	454d      	cmp	r5, r9
 801654a:	d11a      	bne.n	8016582 <_printf_common+0xd6>
 801654c:	2000      	movs	r0, #0
 801654e:	e008      	b.n	8016562 <_printf_common+0xb6>
 8016550:	2301      	movs	r3, #1
 8016552:	4652      	mov	r2, sl
 8016554:	4639      	mov	r1, r7
 8016556:	4630      	mov	r0, r6
 8016558:	47c0      	blx	r8
 801655a:	3001      	adds	r0, #1
 801655c:	d103      	bne.n	8016566 <_printf_common+0xba>
 801655e:	f04f 30ff 	mov.w	r0, #4294967295
 8016562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016566:	3501      	adds	r5, #1
 8016568:	e7c3      	b.n	80164f2 <_printf_common+0x46>
 801656a:	18e1      	adds	r1, r4, r3
 801656c:	1c5a      	adds	r2, r3, #1
 801656e:	2030      	movs	r0, #48	; 0x30
 8016570:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016574:	4422      	add	r2, r4
 8016576:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801657a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801657e:	3302      	adds	r3, #2
 8016580:	e7c5      	b.n	801650e <_printf_common+0x62>
 8016582:	2301      	movs	r3, #1
 8016584:	4622      	mov	r2, r4
 8016586:	4639      	mov	r1, r7
 8016588:	4630      	mov	r0, r6
 801658a:	47c0      	blx	r8
 801658c:	3001      	adds	r0, #1
 801658e:	d0e6      	beq.n	801655e <_printf_common+0xb2>
 8016590:	f109 0901 	add.w	r9, r9, #1
 8016594:	e7d8      	b.n	8016548 <_printf_common+0x9c>
	...

08016598 <_printf_i>:
 8016598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801659c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80165a0:	460c      	mov	r4, r1
 80165a2:	7e09      	ldrb	r1, [r1, #24]
 80165a4:	b085      	sub	sp, #20
 80165a6:	296e      	cmp	r1, #110	; 0x6e
 80165a8:	4617      	mov	r7, r2
 80165aa:	4606      	mov	r6, r0
 80165ac:	4698      	mov	r8, r3
 80165ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80165b0:	f000 80b3 	beq.w	801671a <_printf_i+0x182>
 80165b4:	d822      	bhi.n	80165fc <_printf_i+0x64>
 80165b6:	2963      	cmp	r1, #99	; 0x63
 80165b8:	d036      	beq.n	8016628 <_printf_i+0x90>
 80165ba:	d80a      	bhi.n	80165d2 <_printf_i+0x3a>
 80165bc:	2900      	cmp	r1, #0
 80165be:	f000 80b9 	beq.w	8016734 <_printf_i+0x19c>
 80165c2:	2958      	cmp	r1, #88	; 0x58
 80165c4:	f000 8083 	beq.w	80166ce <_printf_i+0x136>
 80165c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80165cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80165d0:	e032      	b.n	8016638 <_printf_i+0xa0>
 80165d2:	2964      	cmp	r1, #100	; 0x64
 80165d4:	d001      	beq.n	80165da <_printf_i+0x42>
 80165d6:	2969      	cmp	r1, #105	; 0x69
 80165d8:	d1f6      	bne.n	80165c8 <_printf_i+0x30>
 80165da:	6820      	ldr	r0, [r4, #0]
 80165dc:	6813      	ldr	r3, [r2, #0]
 80165de:	0605      	lsls	r5, r0, #24
 80165e0:	f103 0104 	add.w	r1, r3, #4
 80165e4:	d52a      	bpl.n	801663c <_printf_i+0xa4>
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	6011      	str	r1, [r2, #0]
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	da03      	bge.n	80165f6 <_printf_i+0x5e>
 80165ee:	222d      	movs	r2, #45	; 0x2d
 80165f0:	425b      	negs	r3, r3
 80165f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80165f6:	486f      	ldr	r0, [pc, #444]	; (80167b4 <_printf_i+0x21c>)
 80165f8:	220a      	movs	r2, #10
 80165fa:	e039      	b.n	8016670 <_printf_i+0xd8>
 80165fc:	2973      	cmp	r1, #115	; 0x73
 80165fe:	f000 809d 	beq.w	801673c <_printf_i+0x1a4>
 8016602:	d808      	bhi.n	8016616 <_printf_i+0x7e>
 8016604:	296f      	cmp	r1, #111	; 0x6f
 8016606:	d020      	beq.n	801664a <_printf_i+0xb2>
 8016608:	2970      	cmp	r1, #112	; 0x70
 801660a:	d1dd      	bne.n	80165c8 <_printf_i+0x30>
 801660c:	6823      	ldr	r3, [r4, #0]
 801660e:	f043 0320 	orr.w	r3, r3, #32
 8016612:	6023      	str	r3, [r4, #0]
 8016614:	e003      	b.n	801661e <_printf_i+0x86>
 8016616:	2975      	cmp	r1, #117	; 0x75
 8016618:	d017      	beq.n	801664a <_printf_i+0xb2>
 801661a:	2978      	cmp	r1, #120	; 0x78
 801661c:	d1d4      	bne.n	80165c8 <_printf_i+0x30>
 801661e:	2378      	movs	r3, #120	; 0x78
 8016620:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016624:	4864      	ldr	r0, [pc, #400]	; (80167b8 <_printf_i+0x220>)
 8016626:	e055      	b.n	80166d4 <_printf_i+0x13c>
 8016628:	6813      	ldr	r3, [r2, #0]
 801662a:	1d19      	adds	r1, r3, #4
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	6011      	str	r1, [r2, #0]
 8016630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016634:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016638:	2301      	movs	r3, #1
 801663a:	e08c      	b.n	8016756 <_printf_i+0x1be>
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	6011      	str	r1, [r2, #0]
 8016640:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016644:	bf18      	it	ne
 8016646:	b21b      	sxthne	r3, r3
 8016648:	e7cf      	b.n	80165ea <_printf_i+0x52>
 801664a:	6813      	ldr	r3, [r2, #0]
 801664c:	6825      	ldr	r5, [r4, #0]
 801664e:	1d18      	adds	r0, r3, #4
 8016650:	6010      	str	r0, [r2, #0]
 8016652:	0628      	lsls	r0, r5, #24
 8016654:	d501      	bpl.n	801665a <_printf_i+0xc2>
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	e002      	b.n	8016660 <_printf_i+0xc8>
 801665a:	0668      	lsls	r0, r5, #25
 801665c:	d5fb      	bpl.n	8016656 <_printf_i+0xbe>
 801665e:	881b      	ldrh	r3, [r3, #0]
 8016660:	4854      	ldr	r0, [pc, #336]	; (80167b4 <_printf_i+0x21c>)
 8016662:	296f      	cmp	r1, #111	; 0x6f
 8016664:	bf14      	ite	ne
 8016666:	220a      	movne	r2, #10
 8016668:	2208      	moveq	r2, #8
 801666a:	2100      	movs	r1, #0
 801666c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016670:	6865      	ldr	r5, [r4, #4]
 8016672:	60a5      	str	r5, [r4, #8]
 8016674:	2d00      	cmp	r5, #0
 8016676:	f2c0 8095 	blt.w	80167a4 <_printf_i+0x20c>
 801667a:	6821      	ldr	r1, [r4, #0]
 801667c:	f021 0104 	bic.w	r1, r1, #4
 8016680:	6021      	str	r1, [r4, #0]
 8016682:	2b00      	cmp	r3, #0
 8016684:	d13d      	bne.n	8016702 <_printf_i+0x16a>
 8016686:	2d00      	cmp	r5, #0
 8016688:	f040 808e 	bne.w	80167a8 <_printf_i+0x210>
 801668c:	4665      	mov	r5, ip
 801668e:	2a08      	cmp	r2, #8
 8016690:	d10b      	bne.n	80166aa <_printf_i+0x112>
 8016692:	6823      	ldr	r3, [r4, #0]
 8016694:	07db      	lsls	r3, r3, #31
 8016696:	d508      	bpl.n	80166aa <_printf_i+0x112>
 8016698:	6923      	ldr	r3, [r4, #16]
 801669a:	6862      	ldr	r2, [r4, #4]
 801669c:	429a      	cmp	r2, r3
 801669e:	bfde      	ittt	le
 80166a0:	2330      	movle	r3, #48	; 0x30
 80166a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80166a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80166aa:	ebac 0305 	sub.w	r3, ip, r5
 80166ae:	6123      	str	r3, [r4, #16]
 80166b0:	f8cd 8000 	str.w	r8, [sp]
 80166b4:	463b      	mov	r3, r7
 80166b6:	aa03      	add	r2, sp, #12
 80166b8:	4621      	mov	r1, r4
 80166ba:	4630      	mov	r0, r6
 80166bc:	f7ff fef6 	bl	80164ac <_printf_common>
 80166c0:	3001      	adds	r0, #1
 80166c2:	d14d      	bne.n	8016760 <_printf_i+0x1c8>
 80166c4:	f04f 30ff 	mov.w	r0, #4294967295
 80166c8:	b005      	add	sp, #20
 80166ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80166ce:	4839      	ldr	r0, [pc, #228]	; (80167b4 <_printf_i+0x21c>)
 80166d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80166d4:	6813      	ldr	r3, [r2, #0]
 80166d6:	6821      	ldr	r1, [r4, #0]
 80166d8:	1d1d      	adds	r5, r3, #4
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	6015      	str	r5, [r2, #0]
 80166de:	060a      	lsls	r2, r1, #24
 80166e0:	d50b      	bpl.n	80166fa <_printf_i+0x162>
 80166e2:	07ca      	lsls	r2, r1, #31
 80166e4:	bf44      	itt	mi
 80166e6:	f041 0120 	orrmi.w	r1, r1, #32
 80166ea:	6021      	strmi	r1, [r4, #0]
 80166ec:	b91b      	cbnz	r3, 80166f6 <_printf_i+0x15e>
 80166ee:	6822      	ldr	r2, [r4, #0]
 80166f0:	f022 0220 	bic.w	r2, r2, #32
 80166f4:	6022      	str	r2, [r4, #0]
 80166f6:	2210      	movs	r2, #16
 80166f8:	e7b7      	b.n	801666a <_printf_i+0xd2>
 80166fa:	064d      	lsls	r5, r1, #25
 80166fc:	bf48      	it	mi
 80166fe:	b29b      	uxthmi	r3, r3
 8016700:	e7ef      	b.n	80166e2 <_printf_i+0x14a>
 8016702:	4665      	mov	r5, ip
 8016704:	fbb3 f1f2 	udiv	r1, r3, r2
 8016708:	fb02 3311 	mls	r3, r2, r1, r3
 801670c:	5cc3      	ldrb	r3, [r0, r3]
 801670e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016712:	460b      	mov	r3, r1
 8016714:	2900      	cmp	r1, #0
 8016716:	d1f5      	bne.n	8016704 <_printf_i+0x16c>
 8016718:	e7b9      	b.n	801668e <_printf_i+0xf6>
 801671a:	6813      	ldr	r3, [r2, #0]
 801671c:	6825      	ldr	r5, [r4, #0]
 801671e:	6961      	ldr	r1, [r4, #20]
 8016720:	1d18      	adds	r0, r3, #4
 8016722:	6010      	str	r0, [r2, #0]
 8016724:	0628      	lsls	r0, r5, #24
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	d501      	bpl.n	801672e <_printf_i+0x196>
 801672a:	6019      	str	r1, [r3, #0]
 801672c:	e002      	b.n	8016734 <_printf_i+0x19c>
 801672e:	066a      	lsls	r2, r5, #25
 8016730:	d5fb      	bpl.n	801672a <_printf_i+0x192>
 8016732:	8019      	strh	r1, [r3, #0]
 8016734:	2300      	movs	r3, #0
 8016736:	6123      	str	r3, [r4, #16]
 8016738:	4665      	mov	r5, ip
 801673a:	e7b9      	b.n	80166b0 <_printf_i+0x118>
 801673c:	6813      	ldr	r3, [r2, #0]
 801673e:	1d19      	adds	r1, r3, #4
 8016740:	6011      	str	r1, [r2, #0]
 8016742:	681d      	ldr	r5, [r3, #0]
 8016744:	6862      	ldr	r2, [r4, #4]
 8016746:	2100      	movs	r1, #0
 8016748:	4628      	mov	r0, r5
 801674a:	f7e9 fd49 	bl	80001e0 <memchr>
 801674e:	b108      	cbz	r0, 8016754 <_printf_i+0x1bc>
 8016750:	1b40      	subs	r0, r0, r5
 8016752:	6060      	str	r0, [r4, #4]
 8016754:	6863      	ldr	r3, [r4, #4]
 8016756:	6123      	str	r3, [r4, #16]
 8016758:	2300      	movs	r3, #0
 801675a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801675e:	e7a7      	b.n	80166b0 <_printf_i+0x118>
 8016760:	6923      	ldr	r3, [r4, #16]
 8016762:	462a      	mov	r2, r5
 8016764:	4639      	mov	r1, r7
 8016766:	4630      	mov	r0, r6
 8016768:	47c0      	blx	r8
 801676a:	3001      	adds	r0, #1
 801676c:	d0aa      	beq.n	80166c4 <_printf_i+0x12c>
 801676e:	6823      	ldr	r3, [r4, #0]
 8016770:	079b      	lsls	r3, r3, #30
 8016772:	d413      	bmi.n	801679c <_printf_i+0x204>
 8016774:	68e0      	ldr	r0, [r4, #12]
 8016776:	9b03      	ldr	r3, [sp, #12]
 8016778:	4298      	cmp	r0, r3
 801677a:	bfb8      	it	lt
 801677c:	4618      	movlt	r0, r3
 801677e:	e7a3      	b.n	80166c8 <_printf_i+0x130>
 8016780:	2301      	movs	r3, #1
 8016782:	464a      	mov	r2, r9
 8016784:	4639      	mov	r1, r7
 8016786:	4630      	mov	r0, r6
 8016788:	47c0      	blx	r8
 801678a:	3001      	adds	r0, #1
 801678c:	d09a      	beq.n	80166c4 <_printf_i+0x12c>
 801678e:	3501      	adds	r5, #1
 8016790:	68e3      	ldr	r3, [r4, #12]
 8016792:	9a03      	ldr	r2, [sp, #12]
 8016794:	1a9b      	subs	r3, r3, r2
 8016796:	42ab      	cmp	r3, r5
 8016798:	dcf2      	bgt.n	8016780 <_printf_i+0x1e8>
 801679a:	e7eb      	b.n	8016774 <_printf_i+0x1dc>
 801679c:	2500      	movs	r5, #0
 801679e:	f104 0919 	add.w	r9, r4, #25
 80167a2:	e7f5      	b.n	8016790 <_printf_i+0x1f8>
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d1ac      	bne.n	8016702 <_printf_i+0x16a>
 80167a8:	7803      	ldrb	r3, [r0, #0]
 80167aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80167ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80167b2:	e76c      	b.n	801668e <_printf_i+0xf6>
 80167b4:	0801b53a 	.word	0x0801b53a
 80167b8:	0801b54b 	.word	0x0801b54b

080167bc <_scanf_float>:
 80167bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167c0:	469a      	mov	sl, r3
 80167c2:	688b      	ldr	r3, [r1, #8]
 80167c4:	4616      	mov	r6, r2
 80167c6:	1e5a      	subs	r2, r3, #1
 80167c8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80167cc:	b087      	sub	sp, #28
 80167ce:	bf83      	ittte	hi
 80167d0:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80167d4:	189b      	addhi	r3, r3, r2
 80167d6:	9301      	strhi	r3, [sp, #4]
 80167d8:	2300      	movls	r3, #0
 80167da:	bf86      	itte	hi
 80167dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80167e0:	608b      	strhi	r3, [r1, #8]
 80167e2:	9301      	strls	r3, [sp, #4]
 80167e4:	680b      	ldr	r3, [r1, #0]
 80167e6:	4688      	mov	r8, r1
 80167e8:	f04f 0b00 	mov.w	fp, #0
 80167ec:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80167f0:	f848 3b1c 	str.w	r3, [r8], #28
 80167f4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80167f8:	4607      	mov	r7, r0
 80167fa:	460c      	mov	r4, r1
 80167fc:	4645      	mov	r5, r8
 80167fe:	465a      	mov	r2, fp
 8016800:	46d9      	mov	r9, fp
 8016802:	f8cd b008 	str.w	fp, [sp, #8]
 8016806:	68a1      	ldr	r1, [r4, #8]
 8016808:	b181      	cbz	r1, 801682c <_scanf_float+0x70>
 801680a:	6833      	ldr	r3, [r6, #0]
 801680c:	781b      	ldrb	r3, [r3, #0]
 801680e:	2b49      	cmp	r3, #73	; 0x49
 8016810:	d071      	beq.n	80168f6 <_scanf_float+0x13a>
 8016812:	d84d      	bhi.n	80168b0 <_scanf_float+0xf4>
 8016814:	2b39      	cmp	r3, #57	; 0x39
 8016816:	d840      	bhi.n	801689a <_scanf_float+0xde>
 8016818:	2b31      	cmp	r3, #49	; 0x31
 801681a:	f080 8088 	bcs.w	801692e <_scanf_float+0x172>
 801681e:	2b2d      	cmp	r3, #45	; 0x2d
 8016820:	f000 8090 	beq.w	8016944 <_scanf_float+0x188>
 8016824:	d815      	bhi.n	8016852 <_scanf_float+0x96>
 8016826:	2b2b      	cmp	r3, #43	; 0x2b
 8016828:	f000 808c 	beq.w	8016944 <_scanf_float+0x188>
 801682c:	f1b9 0f00 	cmp.w	r9, #0
 8016830:	d003      	beq.n	801683a <_scanf_float+0x7e>
 8016832:	6823      	ldr	r3, [r4, #0]
 8016834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016838:	6023      	str	r3, [r4, #0]
 801683a:	3a01      	subs	r2, #1
 801683c:	2a01      	cmp	r2, #1
 801683e:	f200 80ea 	bhi.w	8016a16 <_scanf_float+0x25a>
 8016842:	4545      	cmp	r5, r8
 8016844:	f200 80dc 	bhi.w	8016a00 <_scanf_float+0x244>
 8016848:	2601      	movs	r6, #1
 801684a:	4630      	mov	r0, r6
 801684c:	b007      	add	sp, #28
 801684e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016852:	2b2e      	cmp	r3, #46	; 0x2e
 8016854:	f000 809f 	beq.w	8016996 <_scanf_float+0x1da>
 8016858:	2b30      	cmp	r3, #48	; 0x30
 801685a:	d1e7      	bne.n	801682c <_scanf_float+0x70>
 801685c:	6820      	ldr	r0, [r4, #0]
 801685e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8016862:	d064      	beq.n	801692e <_scanf_float+0x172>
 8016864:	9b01      	ldr	r3, [sp, #4]
 8016866:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801686a:	6020      	str	r0, [r4, #0]
 801686c:	f109 0901 	add.w	r9, r9, #1
 8016870:	b11b      	cbz	r3, 801687a <_scanf_float+0xbe>
 8016872:	3b01      	subs	r3, #1
 8016874:	3101      	adds	r1, #1
 8016876:	9301      	str	r3, [sp, #4]
 8016878:	60a1      	str	r1, [r4, #8]
 801687a:	68a3      	ldr	r3, [r4, #8]
 801687c:	3b01      	subs	r3, #1
 801687e:	60a3      	str	r3, [r4, #8]
 8016880:	6923      	ldr	r3, [r4, #16]
 8016882:	3301      	adds	r3, #1
 8016884:	6123      	str	r3, [r4, #16]
 8016886:	6873      	ldr	r3, [r6, #4]
 8016888:	3b01      	subs	r3, #1
 801688a:	2b00      	cmp	r3, #0
 801688c:	6073      	str	r3, [r6, #4]
 801688e:	f340 80ac 	ble.w	80169ea <_scanf_float+0x22e>
 8016892:	6833      	ldr	r3, [r6, #0]
 8016894:	3301      	adds	r3, #1
 8016896:	6033      	str	r3, [r6, #0]
 8016898:	e7b5      	b.n	8016806 <_scanf_float+0x4a>
 801689a:	2b45      	cmp	r3, #69	; 0x45
 801689c:	f000 8085 	beq.w	80169aa <_scanf_float+0x1ee>
 80168a0:	2b46      	cmp	r3, #70	; 0x46
 80168a2:	d06a      	beq.n	801697a <_scanf_float+0x1be>
 80168a4:	2b41      	cmp	r3, #65	; 0x41
 80168a6:	d1c1      	bne.n	801682c <_scanf_float+0x70>
 80168a8:	2a01      	cmp	r2, #1
 80168aa:	d1bf      	bne.n	801682c <_scanf_float+0x70>
 80168ac:	2202      	movs	r2, #2
 80168ae:	e046      	b.n	801693e <_scanf_float+0x182>
 80168b0:	2b65      	cmp	r3, #101	; 0x65
 80168b2:	d07a      	beq.n	80169aa <_scanf_float+0x1ee>
 80168b4:	d818      	bhi.n	80168e8 <_scanf_float+0x12c>
 80168b6:	2b54      	cmp	r3, #84	; 0x54
 80168b8:	d066      	beq.n	8016988 <_scanf_float+0x1cc>
 80168ba:	d811      	bhi.n	80168e0 <_scanf_float+0x124>
 80168bc:	2b4e      	cmp	r3, #78	; 0x4e
 80168be:	d1b5      	bne.n	801682c <_scanf_float+0x70>
 80168c0:	2a00      	cmp	r2, #0
 80168c2:	d146      	bne.n	8016952 <_scanf_float+0x196>
 80168c4:	f1b9 0f00 	cmp.w	r9, #0
 80168c8:	d145      	bne.n	8016956 <_scanf_float+0x19a>
 80168ca:	6821      	ldr	r1, [r4, #0]
 80168cc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80168d0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80168d4:	d13f      	bne.n	8016956 <_scanf_float+0x19a>
 80168d6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80168da:	6021      	str	r1, [r4, #0]
 80168dc:	2201      	movs	r2, #1
 80168de:	e02e      	b.n	801693e <_scanf_float+0x182>
 80168e0:	2b59      	cmp	r3, #89	; 0x59
 80168e2:	d01e      	beq.n	8016922 <_scanf_float+0x166>
 80168e4:	2b61      	cmp	r3, #97	; 0x61
 80168e6:	e7de      	b.n	80168a6 <_scanf_float+0xea>
 80168e8:	2b6e      	cmp	r3, #110	; 0x6e
 80168ea:	d0e9      	beq.n	80168c0 <_scanf_float+0x104>
 80168ec:	d815      	bhi.n	801691a <_scanf_float+0x15e>
 80168ee:	2b66      	cmp	r3, #102	; 0x66
 80168f0:	d043      	beq.n	801697a <_scanf_float+0x1be>
 80168f2:	2b69      	cmp	r3, #105	; 0x69
 80168f4:	d19a      	bne.n	801682c <_scanf_float+0x70>
 80168f6:	f1bb 0f00 	cmp.w	fp, #0
 80168fa:	d138      	bne.n	801696e <_scanf_float+0x1b2>
 80168fc:	f1b9 0f00 	cmp.w	r9, #0
 8016900:	d197      	bne.n	8016832 <_scanf_float+0x76>
 8016902:	6821      	ldr	r1, [r4, #0]
 8016904:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016908:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801690c:	d195      	bne.n	801683a <_scanf_float+0x7e>
 801690e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016912:	6021      	str	r1, [r4, #0]
 8016914:	f04f 0b01 	mov.w	fp, #1
 8016918:	e011      	b.n	801693e <_scanf_float+0x182>
 801691a:	2b74      	cmp	r3, #116	; 0x74
 801691c:	d034      	beq.n	8016988 <_scanf_float+0x1cc>
 801691e:	2b79      	cmp	r3, #121	; 0x79
 8016920:	d184      	bne.n	801682c <_scanf_float+0x70>
 8016922:	f1bb 0f07 	cmp.w	fp, #7
 8016926:	d181      	bne.n	801682c <_scanf_float+0x70>
 8016928:	f04f 0b08 	mov.w	fp, #8
 801692c:	e007      	b.n	801693e <_scanf_float+0x182>
 801692e:	eb12 0f0b 	cmn.w	r2, fp
 8016932:	f47f af7b 	bne.w	801682c <_scanf_float+0x70>
 8016936:	6821      	ldr	r1, [r4, #0]
 8016938:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 801693c:	6021      	str	r1, [r4, #0]
 801693e:	702b      	strb	r3, [r5, #0]
 8016940:	3501      	adds	r5, #1
 8016942:	e79a      	b.n	801687a <_scanf_float+0xbe>
 8016944:	6821      	ldr	r1, [r4, #0]
 8016946:	0608      	lsls	r0, r1, #24
 8016948:	f57f af70 	bpl.w	801682c <_scanf_float+0x70>
 801694c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016950:	e7f4      	b.n	801693c <_scanf_float+0x180>
 8016952:	2a02      	cmp	r2, #2
 8016954:	d047      	beq.n	80169e6 <_scanf_float+0x22a>
 8016956:	f1bb 0f01 	cmp.w	fp, #1
 801695a:	d003      	beq.n	8016964 <_scanf_float+0x1a8>
 801695c:	f1bb 0f04 	cmp.w	fp, #4
 8016960:	f47f af64 	bne.w	801682c <_scanf_float+0x70>
 8016964:	f10b 0b01 	add.w	fp, fp, #1
 8016968:	fa5f fb8b 	uxtb.w	fp, fp
 801696c:	e7e7      	b.n	801693e <_scanf_float+0x182>
 801696e:	f1bb 0f03 	cmp.w	fp, #3
 8016972:	d0f7      	beq.n	8016964 <_scanf_float+0x1a8>
 8016974:	f1bb 0f05 	cmp.w	fp, #5
 8016978:	e7f2      	b.n	8016960 <_scanf_float+0x1a4>
 801697a:	f1bb 0f02 	cmp.w	fp, #2
 801697e:	f47f af55 	bne.w	801682c <_scanf_float+0x70>
 8016982:	f04f 0b03 	mov.w	fp, #3
 8016986:	e7da      	b.n	801693e <_scanf_float+0x182>
 8016988:	f1bb 0f06 	cmp.w	fp, #6
 801698c:	f47f af4e 	bne.w	801682c <_scanf_float+0x70>
 8016990:	f04f 0b07 	mov.w	fp, #7
 8016994:	e7d3      	b.n	801693e <_scanf_float+0x182>
 8016996:	6821      	ldr	r1, [r4, #0]
 8016998:	0588      	lsls	r0, r1, #22
 801699a:	f57f af47 	bpl.w	801682c <_scanf_float+0x70>
 801699e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80169a2:	6021      	str	r1, [r4, #0]
 80169a4:	f8cd 9008 	str.w	r9, [sp, #8]
 80169a8:	e7c9      	b.n	801693e <_scanf_float+0x182>
 80169aa:	6821      	ldr	r1, [r4, #0]
 80169ac:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80169b0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80169b4:	d006      	beq.n	80169c4 <_scanf_float+0x208>
 80169b6:	0548      	lsls	r0, r1, #21
 80169b8:	f57f af38 	bpl.w	801682c <_scanf_float+0x70>
 80169bc:	f1b9 0f00 	cmp.w	r9, #0
 80169c0:	f43f af3b 	beq.w	801683a <_scanf_float+0x7e>
 80169c4:	0588      	lsls	r0, r1, #22
 80169c6:	bf58      	it	pl
 80169c8:	9802      	ldrpl	r0, [sp, #8]
 80169ca:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80169ce:	bf58      	it	pl
 80169d0:	eba9 0000 	subpl.w	r0, r9, r0
 80169d4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80169d8:	bf58      	it	pl
 80169da:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80169de:	6021      	str	r1, [r4, #0]
 80169e0:	f04f 0900 	mov.w	r9, #0
 80169e4:	e7ab      	b.n	801693e <_scanf_float+0x182>
 80169e6:	2203      	movs	r2, #3
 80169e8:	e7a9      	b.n	801693e <_scanf_float+0x182>
 80169ea:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80169ee:	9205      	str	r2, [sp, #20]
 80169f0:	4631      	mov	r1, r6
 80169f2:	4638      	mov	r0, r7
 80169f4:	4798      	blx	r3
 80169f6:	9a05      	ldr	r2, [sp, #20]
 80169f8:	2800      	cmp	r0, #0
 80169fa:	f43f af04 	beq.w	8016806 <_scanf_float+0x4a>
 80169fe:	e715      	b.n	801682c <_scanf_float+0x70>
 8016a00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a04:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016a08:	4632      	mov	r2, r6
 8016a0a:	4638      	mov	r0, r7
 8016a0c:	4798      	blx	r3
 8016a0e:	6923      	ldr	r3, [r4, #16]
 8016a10:	3b01      	subs	r3, #1
 8016a12:	6123      	str	r3, [r4, #16]
 8016a14:	e715      	b.n	8016842 <_scanf_float+0x86>
 8016a16:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016a1a:	2b06      	cmp	r3, #6
 8016a1c:	d80a      	bhi.n	8016a34 <_scanf_float+0x278>
 8016a1e:	f1bb 0f02 	cmp.w	fp, #2
 8016a22:	d968      	bls.n	8016af6 <_scanf_float+0x33a>
 8016a24:	f1ab 0b03 	sub.w	fp, fp, #3
 8016a28:	fa5f fb8b 	uxtb.w	fp, fp
 8016a2c:	eba5 0b0b 	sub.w	fp, r5, fp
 8016a30:	455d      	cmp	r5, fp
 8016a32:	d14b      	bne.n	8016acc <_scanf_float+0x310>
 8016a34:	6823      	ldr	r3, [r4, #0]
 8016a36:	05da      	lsls	r2, r3, #23
 8016a38:	d51f      	bpl.n	8016a7a <_scanf_float+0x2be>
 8016a3a:	055b      	lsls	r3, r3, #21
 8016a3c:	d468      	bmi.n	8016b10 <_scanf_float+0x354>
 8016a3e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016a42:	6923      	ldr	r3, [r4, #16]
 8016a44:	2965      	cmp	r1, #101	; 0x65
 8016a46:	f103 33ff 	add.w	r3, r3, #4294967295
 8016a4a:	f105 3bff 	add.w	fp, r5, #4294967295
 8016a4e:	6123      	str	r3, [r4, #16]
 8016a50:	d00d      	beq.n	8016a6e <_scanf_float+0x2b2>
 8016a52:	2945      	cmp	r1, #69	; 0x45
 8016a54:	d00b      	beq.n	8016a6e <_scanf_float+0x2b2>
 8016a56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a5a:	4632      	mov	r2, r6
 8016a5c:	4638      	mov	r0, r7
 8016a5e:	4798      	blx	r3
 8016a60:	6923      	ldr	r3, [r4, #16]
 8016a62:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8016a66:	3b01      	subs	r3, #1
 8016a68:	f1a5 0b02 	sub.w	fp, r5, #2
 8016a6c:	6123      	str	r3, [r4, #16]
 8016a6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a72:	4632      	mov	r2, r6
 8016a74:	4638      	mov	r0, r7
 8016a76:	4798      	blx	r3
 8016a78:	465d      	mov	r5, fp
 8016a7a:	6826      	ldr	r6, [r4, #0]
 8016a7c:	f016 0610 	ands.w	r6, r6, #16
 8016a80:	d17a      	bne.n	8016b78 <_scanf_float+0x3bc>
 8016a82:	702e      	strb	r6, [r5, #0]
 8016a84:	6823      	ldr	r3, [r4, #0]
 8016a86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016a8e:	d142      	bne.n	8016b16 <_scanf_float+0x35a>
 8016a90:	9b02      	ldr	r3, [sp, #8]
 8016a92:	eba9 0303 	sub.w	r3, r9, r3
 8016a96:	425a      	negs	r2, r3
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d149      	bne.n	8016b30 <_scanf_float+0x374>
 8016a9c:	2200      	movs	r2, #0
 8016a9e:	4641      	mov	r1, r8
 8016aa0:	4638      	mov	r0, r7
 8016aa2:	f000 fee9 	bl	8017878 <_strtod_r>
 8016aa6:	6825      	ldr	r5, [r4, #0]
 8016aa8:	f8da 3000 	ldr.w	r3, [sl]
 8016aac:	f015 0f02 	tst.w	r5, #2
 8016ab0:	f103 0204 	add.w	r2, r3, #4
 8016ab4:	ec59 8b10 	vmov	r8, r9, d0
 8016ab8:	f8ca 2000 	str.w	r2, [sl]
 8016abc:	d043      	beq.n	8016b46 <_scanf_float+0x38a>
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	e9c3 8900 	strd	r8, r9, [r3]
 8016ac4:	68e3      	ldr	r3, [r4, #12]
 8016ac6:	3301      	adds	r3, #1
 8016ac8:	60e3      	str	r3, [r4, #12]
 8016aca:	e6be      	b.n	801684a <_scanf_float+0x8e>
 8016acc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016ad0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016ad4:	4632      	mov	r2, r6
 8016ad6:	4638      	mov	r0, r7
 8016ad8:	4798      	blx	r3
 8016ada:	6923      	ldr	r3, [r4, #16]
 8016adc:	3b01      	subs	r3, #1
 8016ade:	6123      	str	r3, [r4, #16]
 8016ae0:	e7a6      	b.n	8016a30 <_scanf_float+0x274>
 8016ae2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016ae6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016aea:	4632      	mov	r2, r6
 8016aec:	4638      	mov	r0, r7
 8016aee:	4798      	blx	r3
 8016af0:	6923      	ldr	r3, [r4, #16]
 8016af2:	3b01      	subs	r3, #1
 8016af4:	6123      	str	r3, [r4, #16]
 8016af6:	4545      	cmp	r5, r8
 8016af8:	d8f3      	bhi.n	8016ae2 <_scanf_float+0x326>
 8016afa:	e6a5      	b.n	8016848 <_scanf_float+0x8c>
 8016afc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016b00:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016b04:	4632      	mov	r2, r6
 8016b06:	4638      	mov	r0, r7
 8016b08:	4798      	blx	r3
 8016b0a:	6923      	ldr	r3, [r4, #16]
 8016b0c:	3b01      	subs	r3, #1
 8016b0e:	6123      	str	r3, [r4, #16]
 8016b10:	4545      	cmp	r5, r8
 8016b12:	d8f3      	bhi.n	8016afc <_scanf_float+0x340>
 8016b14:	e698      	b.n	8016848 <_scanf_float+0x8c>
 8016b16:	9b03      	ldr	r3, [sp, #12]
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d0bf      	beq.n	8016a9c <_scanf_float+0x2e0>
 8016b1c:	9904      	ldr	r1, [sp, #16]
 8016b1e:	230a      	movs	r3, #10
 8016b20:	4632      	mov	r2, r6
 8016b22:	3101      	adds	r1, #1
 8016b24:	4638      	mov	r0, r7
 8016b26:	f000 ff33 	bl	8017990 <_strtol_r>
 8016b2a:	9b03      	ldr	r3, [sp, #12]
 8016b2c:	9d04      	ldr	r5, [sp, #16]
 8016b2e:	1ac2      	subs	r2, r0, r3
 8016b30:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016b34:	429d      	cmp	r5, r3
 8016b36:	bf28      	it	cs
 8016b38:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016b3c:	490f      	ldr	r1, [pc, #60]	; (8016b7c <_scanf_float+0x3c0>)
 8016b3e:	4628      	mov	r0, r5
 8016b40:	f000 f868 	bl	8016c14 <siprintf>
 8016b44:	e7aa      	b.n	8016a9c <_scanf_float+0x2e0>
 8016b46:	f015 0504 	ands.w	r5, r5, #4
 8016b4a:	d1b8      	bne.n	8016abe <_scanf_float+0x302>
 8016b4c:	681f      	ldr	r7, [r3, #0]
 8016b4e:	ee10 2a10 	vmov	r2, s0
 8016b52:	464b      	mov	r3, r9
 8016b54:	ee10 0a10 	vmov	r0, s0
 8016b58:	4649      	mov	r1, r9
 8016b5a:	f7e9 ffe7 	bl	8000b2c <__aeabi_dcmpun>
 8016b5e:	b128      	cbz	r0, 8016b6c <_scanf_float+0x3b0>
 8016b60:	4628      	mov	r0, r5
 8016b62:	f000 f81d 	bl	8016ba0 <nanf>
 8016b66:	ed87 0a00 	vstr	s0, [r7]
 8016b6a:	e7ab      	b.n	8016ac4 <_scanf_float+0x308>
 8016b6c:	4640      	mov	r0, r8
 8016b6e:	4649      	mov	r1, r9
 8016b70:	f7ea f83a 	bl	8000be8 <__aeabi_d2f>
 8016b74:	6038      	str	r0, [r7, #0]
 8016b76:	e7a5      	b.n	8016ac4 <_scanf_float+0x308>
 8016b78:	2600      	movs	r6, #0
 8016b7a:	e666      	b.n	801684a <_scanf_float+0x8e>
 8016b7c:	0801b55c 	.word	0x0801b55c

08016b80 <_sbrk_r>:
 8016b80:	b538      	push	{r3, r4, r5, lr}
 8016b82:	4c06      	ldr	r4, [pc, #24]	; (8016b9c <_sbrk_r+0x1c>)
 8016b84:	2300      	movs	r3, #0
 8016b86:	4605      	mov	r5, r0
 8016b88:	4608      	mov	r0, r1
 8016b8a:	6023      	str	r3, [r4, #0]
 8016b8c:	f7f4 fad4 	bl	800b138 <_sbrk>
 8016b90:	1c43      	adds	r3, r0, #1
 8016b92:	d102      	bne.n	8016b9a <_sbrk_r+0x1a>
 8016b94:	6823      	ldr	r3, [r4, #0]
 8016b96:	b103      	cbz	r3, 8016b9a <_sbrk_r+0x1a>
 8016b98:	602b      	str	r3, [r5, #0]
 8016b9a:	bd38      	pop	{r3, r4, r5, pc}
 8016b9c:	2000fb34 	.word	0x2000fb34

08016ba0 <nanf>:
 8016ba0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016ba8 <nanf+0x8>
 8016ba4:	4770      	bx	lr
 8016ba6:	bf00      	nop
 8016ba8:	7fc00000 	.word	0x7fc00000

08016bac <sniprintf>:
 8016bac:	b40c      	push	{r2, r3}
 8016bae:	b530      	push	{r4, r5, lr}
 8016bb0:	4b17      	ldr	r3, [pc, #92]	; (8016c10 <sniprintf+0x64>)
 8016bb2:	1e0c      	subs	r4, r1, #0
 8016bb4:	b09d      	sub	sp, #116	; 0x74
 8016bb6:	681d      	ldr	r5, [r3, #0]
 8016bb8:	da08      	bge.n	8016bcc <sniprintf+0x20>
 8016bba:	238b      	movs	r3, #139	; 0x8b
 8016bbc:	602b      	str	r3, [r5, #0]
 8016bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8016bc2:	b01d      	add	sp, #116	; 0x74
 8016bc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016bc8:	b002      	add	sp, #8
 8016bca:	4770      	bx	lr
 8016bcc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016bd0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016bd4:	bf14      	ite	ne
 8016bd6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016bda:	4623      	moveq	r3, r4
 8016bdc:	9304      	str	r3, [sp, #16]
 8016bde:	9307      	str	r3, [sp, #28]
 8016be0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016be4:	9002      	str	r0, [sp, #8]
 8016be6:	9006      	str	r0, [sp, #24]
 8016be8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016bec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016bee:	ab21      	add	r3, sp, #132	; 0x84
 8016bf0:	a902      	add	r1, sp, #8
 8016bf2:	4628      	mov	r0, r5
 8016bf4:	9301      	str	r3, [sp, #4]
 8016bf6:	f002 fcd9 	bl	80195ac <_svfiprintf_r>
 8016bfa:	1c43      	adds	r3, r0, #1
 8016bfc:	bfbc      	itt	lt
 8016bfe:	238b      	movlt	r3, #139	; 0x8b
 8016c00:	602b      	strlt	r3, [r5, #0]
 8016c02:	2c00      	cmp	r4, #0
 8016c04:	d0dd      	beq.n	8016bc2 <sniprintf+0x16>
 8016c06:	9b02      	ldr	r3, [sp, #8]
 8016c08:	2200      	movs	r2, #0
 8016c0a:	701a      	strb	r2, [r3, #0]
 8016c0c:	e7d9      	b.n	8016bc2 <sniprintf+0x16>
 8016c0e:	bf00      	nop
 8016c10:	2000220c 	.word	0x2000220c

08016c14 <siprintf>:
 8016c14:	b40e      	push	{r1, r2, r3}
 8016c16:	b500      	push	{lr}
 8016c18:	b09c      	sub	sp, #112	; 0x70
 8016c1a:	ab1d      	add	r3, sp, #116	; 0x74
 8016c1c:	9002      	str	r0, [sp, #8]
 8016c1e:	9006      	str	r0, [sp, #24]
 8016c20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016c24:	4809      	ldr	r0, [pc, #36]	; (8016c4c <siprintf+0x38>)
 8016c26:	9107      	str	r1, [sp, #28]
 8016c28:	9104      	str	r1, [sp, #16]
 8016c2a:	4909      	ldr	r1, [pc, #36]	; (8016c50 <siprintf+0x3c>)
 8016c2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c30:	9105      	str	r1, [sp, #20]
 8016c32:	6800      	ldr	r0, [r0, #0]
 8016c34:	9301      	str	r3, [sp, #4]
 8016c36:	a902      	add	r1, sp, #8
 8016c38:	f002 fcb8 	bl	80195ac <_svfiprintf_r>
 8016c3c:	9b02      	ldr	r3, [sp, #8]
 8016c3e:	2200      	movs	r2, #0
 8016c40:	701a      	strb	r2, [r3, #0]
 8016c42:	b01c      	add	sp, #112	; 0x70
 8016c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8016c48:	b003      	add	sp, #12
 8016c4a:	4770      	bx	lr
 8016c4c:	2000220c 	.word	0x2000220c
 8016c50:	ffff0208 	.word	0xffff0208

08016c54 <sulp>:
 8016c54:	b570      	push	{r4, r5, r6, lr}
 8016c56:	4604      	mov	r4, r0
 8016c58:	460d      	mov	r5, r1
 8016c5a:	ec45 4b10 	vmov	d0, r4, r5
 8016c5e:	4616      	mov	r6, r2
 8016c60:	f002 fb08 	bl	8019274 <__ulp>
 8016c64:	ec51 0b10 	vmov	r0, r1, d0
 8016c68:	b17e      	cbz	r6, 8016c8a <sulp+0x36>
 8016c6a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016c6e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	dd09      	ble.n	8016c8a <sulp+0x36>
 8016c76:	051b      	lsls	r3, r3, #20
 8016c78:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016c7c:	2400      	movs	r4, #0
 8016c7e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016c82:	4622      	mov	r2, r4
 8016c84:	462b      	mov	r3, r5
 8016c86:	f7e9 fcb7 	bl	80005f8 <__aeabi_dmul>
 8016c8a:	bd70      	pop	{r4, r5, r6, pc}
 8016c8c:	0000      	movs	r0, r0
	...

08016c90 <_strtod_l>:
 8016c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c94:	461f      	mov	r7, r3
 8016c96:	b0a1      	sub	sp, #132	; 0x84
 8016c98:	2300      	movs	r3, #0
 8016c9a:	4681      	mov	r9, r0
 8016c9c:	4638      	mov	r0, r7
 8016c9e:	460e      	mov	r6, r1
 8016ca0:	9217      	str	r2, [sp, #92]	; 0x5c
 8016ca2:	931c      	str	r3, [sp, #112]	; 0x70
 8016ca4:	f001 fff5 	bl	8018c92 <__localeconv_l>
 8016ca8:	4680      	mov	r8, r0
 8016caa:	6800      	ldr	r0, [r0, #0]
 8016cac:	f7e9 fa90 	bl	80001d0 <strlen>
 8016cb0:	f04f 0a00 	mov.w	sl, #0
 8016cb4:	4604      	mov	r4, r0
 8016cb6:	f04f 0b00 	mov.w	fp, #0
 8016cba:	961b      	str	r6, [sp, #108]	; 0x6c
 8016cbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016cbe:	781a      	ldrb	r2, [r3, #0]
 8016cc0:	2a0d      	cmp	r2, #13
 8016cc2:	d832      	bhi.n	8016d2a <_strtod_l+0x9a>
 8016cc4:	2a09      	cmp	r2, #9
 8016cc6:	d236      	bcs.n	8016d36 <_strtod_l+0xa6>
 8016cc8:	2a00      	cmp	r2, #0
 8016cca:	d03e      	beq.n	8016d4a <_strtod_l+0xba>
 8016ccc:	2300      	movs	r3, #0
 8016cce:	930d      	str	r3, [sp, #52]	; 0x34
 8016cd0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8016cd2:	782b      	ldrb	r3, [r5, #0]
 8016cd4:	2b30      	cmp	r3, #48	; 0x30
 8016cd6:	f040 80ac 	bne.w	8016e32 <_strtod_l+0x1a2>
 8016cda:	786b      	ldrb	r3, [r5, #1]
 8016cdc:	2b58      	cmp	r3, #88	; 0x58
 8016cde:	d001      	beq.n	8016ce4 <_strtod_l+0x54>
 8016ce0:	2b78      	cmp	r3, #120	; 0x78
 8016ce2:	d167      	bne.n	8016db4 <_strtod_l+0x124>
 8016ce4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016ce6:	9301      	str	r3, [sp, #4]
 8016ce8:	ab1c      	add	r3, sp, #112	; 0x70
 8016cea:	9300      	str	r3, [sp, #0]
 8016cec:	9702      	str	r7, [sp, #8]
 8016cee:	ab1d      	add	r3, sp, #116	; 0x74
 8016cf0:	4a88      	ldr	r2, [pc, #544]	; (8016f14 <_strtod_l+0x284>)
 8016cf2:	a91b      	add	r1, sp, #108	; 0x6c
 8016cf4:	4648      	mov	r0, r9
 8016cf6:	f001 fcf2 	bl	80186de <__gethex>
 8016cfa:	f010 0407 	ands.w	r4, r0, #7
 8016cfe:	4606      	mov	r6, r0
 8016d00:	d005      	beq.n	8016d0e <_strtod_l+0x7e>
 8016d02:	2c06      	cmp	r4, #6
 8016d04:	d12b      	bne.n	8016d5e <_strtod_l+0xce>
 8016d06:	3501      	adds	r5, #1
 8016d08:	2300      	movs	r3, #0
 8016d0a:	951b      	str	r5, [sp, #108]	; 0x6c
 8016d0c:	930d      	str	r3, [sp, #52]	; 0x34
 8016d0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	f040 859a 	bne.w	801784a <_strtod_l+0xbba>
 8016d16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d18:	b1e3      	cbz	r3, 8016d54 <_strtod_l+0xc4>
 8016d1a:	4652      	mov	r2, sl
 8016d1c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016d20:	ec43 2b10 	vmov	d0, r2, r3
 8016d24:	b021      	add	sp, #132	; 0x84
 8016d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d2a:	2a2b      	cmp	r2, #43	; 0x2b
 8016d2c:	d015      	beq.n	8016d5a <_strtod_l+0xca>
 8016d2e:	2a2d      	cmp	r2, #45	; 0x2d
 8016d30:	d004      	beq.n	8016d3c <_strtod_l+0xac>
 8016d32:	2a20      	cmp	r2, #32
 8016d34:	d1ca      	bne.n	8016ccc <_strtod_l+0x3c>
 8016d36:	3301      	adds	r3, #1
 8016d38:	931b      	str	r3, [sp, #108]	; 0x6c
 8016d3a:	e7bf      	b.n	8016cbc <_strtod_l+0x2c>
 8016d3c:	2201      	movs	r2, #1
 8016d3e:	920d      	str	r2, [sp, #52]	; 0x34
 8016d40:	1c5a      	adds	r2, r3, #1
 8016d42:	921b      	str	r2, [sp, #108]	; 0x6c
 8016d44:	785b      	ldrb	r3, [r3, #1]
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d1c2      	bne.n	8016cd0 <_strtod_l+0x40>
 8016d4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016d4c:	961b      	str	r6, [sp, #108]	; 0x6c
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	f040 8579 	bne.w	8017846 <_strtod_l+0xbb6>
 8016d54:	4652      	mov	r2, sl
 8016d56:	465b      	mov	r3, fp
 8016d58:	e7e2      	b.n	8016d20 <_strtod_l+0x90>
 8016d5a:	2200      	movs	r2, #0
 8016d5c:	e7ef      	b.n	8016d3e <_strtod_l+0xae>
 8016d5e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016d60:	b13a      	cbz	r2, 8016d72 <_strtod_l+0xe2>
 8016d62:	2135      	movs	r1, #53	; 0x35
 8016d64:	a81e      	add	r0, sp, #120	; 0x78
 8016d66:	f002 fb7d 	bl	8019464 <__copybits>
 8016d6a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016d6c:	4648      	mov	r0, r9
 8016d6e:	f001 ffe9 	bl	8018d44 <_Bfree>
 8016d72:	3c01      	subs	r4, #1
 8016d74:	2c04      	cmp	r4, #4
 8016d76:	d806      	bhi.n	8016d86 <_strtod_l+0xf6>
 8016d78:	e8df f004 	tbb	[pc, r4]
 8016d7c:	1714030a 	.word	0x1714030a
 8016d80:	0a          	.byte	0x0a
 8016d81:	00          	.byte	0x00
 8016d82:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8016d86:	0730      	lsls	r0, r6, #28
 8016d88:	d5c1      	bpl.n	8016d0e <_strtod_l+0x7e>
 8016d8a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016d8e:	e7be      	b.n	8016d0e <_strtod_l+0x7e>
 8016d90:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8016d94:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016d96:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016d9a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016d9e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016da2:	e7f0      	b.n	8016d86 <_strtod_l+0xf6>
 8016da4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016f18 <_strtod_l+0x288>
 8016da8:	e7ed      	b.n	8016d86 <_strtod_l+0xf6>
 8016daa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016dae:	f04f 3aff 	mov.w	sl, #4294967295
 8016db2:	e7e8      	b.n	8016d86 <_strtod_l+0xf6>
 8016db4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016db6:	1c5a      	adds	r2, r3, #1
 8016db8:	921b      	str	r2, [sp, #108]	; 0x6c
 8016dba:	785b      	ldrb	r3, [r3, #1]
 8016dbc:	2b30      	cmp	r3, #48	; 0x30
 8016dbe:	d0f9      	beq.n	8016db4 <_strtod_l+0x124>
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d0a4      	beq.n	8016d0e <_strtod_l+0x7e>
 8016dc4:	2301      	movs	r3, #1
 8016dc6:	2500      	movs	r5, #0
 8016dc8:	9306      	str	r3, [sp, #24]
 8016dca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016dcc:	9308      	str	r3, [sp, #32]
 8016dce:	9507      	str	r5, [sp, #28]
 8016dd0:	9505      	str	r5, [sp, #20]
 8016dd2:	220a      	movs	r2, #10
 8016dd4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016dd6:	7807      	ldrb	r7, [r0, #0]
 8016dd8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016ddc:	b2d9      	uxtb	r1, r3
 8016dde:	2909      	cmp	r1, #9
 8016de0:	d929      	bls.n	8016e36 <_strtod_l+0x1a6>
 8016de2:	4622      	mov	r2, r4
 8016de4:	f8d8 1000 	ldr.w	r1, [r8]
 8016de8:	f002 fcd8 	bl	801979c <strncmp>
 8016dec:	2800      	cmp	r0, #0
 8016dee:	d031      	beq.n	8016e54 <_strtod_l+0x1c4>
 8016df0:	2000      	movs	r0, #0
 8016df2:	9c05      	ldr	r4, [sp, #20]
 8016df4:	9004      	str	r0, [sp, #16]
 8016df6:	463b      	mov	r3, r7
 8016df8:	4602      	mov	r2, r0
 8016dfa:	2b65      	cmp	r3, #101	; 0x65
 8016dfc:	d001      	beq.n	8016e02 <_strtod_l+0x172>
 8016dfe:	2b45      	cmp	r3, #69	; 0x45
 8016e00:	d114      	bne.n	8016e2c <_strtod_l+0x19c>
 8016e02:	b924      	cbnz	r4, 8016e0e <_strtod_l+0x17e>
 8016e04:	b910      	cbnz	r0, 8016e0c <_strtod_l+0x17c>
 8016e06:	9b06      	ldr	r3, [sp, #24]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d09e      	beq.n	8016d4a <_strtod_l+0xba>
 8016e0c:	2400      	movs	r4, #0
 8016e0e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016e10:	1c73      	adds	r3, r6, #1
 8016e12:	931b      	str	r3, [sp, #108]	; 0x6c
 8016e14:	7873      	ldrb	r3, [r6, #1]
 8016e16:	2b2b      	cmp	r3, #43	; 0x2b
 8016e18:	d078      	beq.n	8016f0c <_strtod_l+0x27c>
 8016e1a:	2b2d      	cmp	r3, #45	; 0x2d
 8016e1c:	d070      	beq.n	8016f00 <_strtod_l+0x270>
 8016e1e:	f04f 0c00 	mov.w	ip, #0
 8016e22:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8016e26:	2f09      	cmp	r7, #9
 8016e28:	d97c      	bls.n	8016f24 <_strtod_l+0x294>
 8016e2a:	961b      	str	r6, [sp, #108]	; 0x6c
 8016e2c:	f04f 0e00 	mov.w	lr, #0
 8016e30:	e09a      	b.n	8016f68 <_strtod_l+0x2d8>
 8016e32:	2300      	movs	r3, #0
 8016e34:	e7c7      	b.n	8016dc6 <_strtod_l+0x136>
 8016e36:	9905      	ldr	r1, [sp, #20]
 8016e38:	2908      	cmp	r1, #8
 8016e3a:	bfdd      	ittte	le
 8016e3c:	9907      	ldrle	r1, [sp, #28]
 8016e3e:	fb02 3301 	mlale	r3, r2, r1, r3
 8016e42:	9307      	strle	r3, [sp, #28]
 8016e44:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016e48:	9b05      	ldr	r3, [sp, #20]
 8016e4a:	3001      	adds	r0, #1
 8016e4c:	3301      	adds	r3, #1
 8016e4e:	9305      	str	r3, [sp, #20]
 8016e50:	901b      	str	r0, [sp, #108]	; 0x6c
 8016e52:	e7bf      	b.n	8016dd4 <_strtod_l+0x144>
 8016e54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016e56:	191a      	adds	r2, r3, r4
 8016e58:	921b      	str	r2, [sp, #108]	; 0x6c
 8016e5a:	9a05      	ldr	r2, [sp, #20]
 8016e5c:	5d1b      	ldrb	r3, [r3, r4]
 8016e5e:	2a00      	cmp	r2, #0
 8016e60:	d037      	beq.n	8016ed2 <_strtod_l+0x242>
 8016e62:	9c05      	ldr	r4, [sp, #20]
 8016e64:	4602      	mov	r2, r0
 8016e66:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016e6a:	2909      	cmp	r1, #9
 8016e6c:	d913      	bls.n	8016e96 <_strtod_l+0x206>
 8016e6e:	2101      	movs	r1, #1
 8016e70:	9104      	str	r1, [sp, #16]
 8016e72:	e7c2      	b.n	8016dfa <_strtod_l+0x16a>
 8016e74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016e76:	1c5a      	adds	r2, r3, #1
 8016e78:	921b      	str	r2, [sp, #108]	; 0x6c
 8016e7a:	785b      	ldrb	r3, [r3, #1]
 8016e7c:	3001      	adds	r0, #1
 8016e7e:	2b30      	cmp	r3, #48	; 0x30
 8016e80:	d0f8      	beq.n	8016e74 <_strtod_l+0x1e4>
 8016e82:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016e86:	2a08      	cmp	r2, #8
 8016e88:	f200 84e4 	bhi.w	8017854 <_strtod_l+0xbc4>
 8016e8c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016e8e:	9208      	str	r2, [sp, #32]
 8016e90:	4602      	mov	r2, r0
 8016e92:	2000      	movs	r0, #0
 8016e94:	4604      	mov	r4, r0
 8016e96:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8016e9a:	f100 0101 	add.w	r1, r0, #1
 8016e9e:	d012      	beq.n	8016ec6 <_strtod_l+0x236>
 8016ea0:	440a      	add	r2, r1
 8016ea2:	eb00 0c04 	add.w	ip, r0, r4
 8016ea6:	4621      	mov	r1, r4
 8016ea8:	270a      	movs	r7, #10
 8016eaa:	458c      	cmp	ip, r1
 8016eac:	d113      	bne.n	8016ed6 <_strtod_l+0x246>
 8016eae:	1821      	adds	r1, r4, r0
 8016eb0:	2908      	cmp	r1, #8
 8016eb2:	f104 0401 	add.w	r4, r4, #1
 8016eb6:	4404      	add	r4, r0
 8016eb8:	dc19      	bgt.n	8016eee <_strtod_l+0x25e>
 8016eba:	9b07      	ldr	r3, [sp, #28]
 8016ebc:	210a      	movs	r1, #10
 8016ebe:	fb01 e303 	mla	r3, r1, r3, lr
 8016ec2:	9307      	str	r3, [sp, #28]
 8016ec4:	2100      	movs	r1, #0
 8016ec6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ec8:	1c58      	adds	r0, r3, #1
 8016eca:	901b      	str	r0, [sp, #108]	; 0x6c
 8016ecc:	785b      	ldrb	r3, [r3, #1]
 8016ece:	4608      	mov	r0, r1
 8016ed0:	e7c9      	b.n	8016e66 <_strtod_l+0x1d6>
 8016ed2:	9805      	ldr	r0, [sp, #20]
 8016ed4:	e7d3      	b.n	8016e7e <_strtod_l+0x1ee>
 8016ed6:	2908      	cmp	r1, #8
 8016ed8:	f101 0101 	add.w	r1, r1, #1
 8016edc:	dc03      	bgt.n	8016ee6 <_strtod_l+0x256>
 8016ede:	9b07      	ldr	r3, [sp, #28]
 8016ee0:	437b      	muls	r3, r7
 8016ee2:	9307      	str	r3, [sp, #28]
 8016ee4:	e7e1      	b.n	8016eaa <_strtod_l+0x21a>
 8016ee6:	2910      	cmp	r1, #16
 8016ee8:	bfd8      	it	le
 8016eea:	437d      	mulle	r5, r7
 8016eec:	e7dd      	b.n	8016eaa <_strtod_l+0x21a>
 8016eee:	2c10      	cmp	r4, #16
 8016ef0:	bfdc      	itt	le
 8016ef2:	210a      	movle	r1, #10
 8016ef4:	fb01 e505 	mlale	r5, r1, r5, lr
 8016ef8:	e7e4      	b.n	8016ec4 <_strtod_l+0x234>
 8016efa:	2301      	movs	r3, #1
 8016efc:	9304      	str	r3, [sp, #16]
 8016efe:	e781      	b.n	8016e04 <_strtod_l+0x174>
 8016f00:	f04f 0c01 	mov.w	ip, #1
 8016f04:	1cb3      	adds	r3, r6, #2
 8016f06:	931b      	str	r3, [sp, #108]	; 0x6c
 8016f08:	78b3      	ldrb	r3, [r6, #2]
 8016f0a:	e78a      	b.n	8016e22 <_strtod_l+0x192>
 8016f0c:	f04f 0c00 	mov.w	ip, #0
 8016f10:	e7f8      	b.n	8016f04 <_strtod_l+0x274>
 8016f12:	bf00      	nop
 8016f14:	0801b564 	.word	0x0801b564
 8016f18:	7ff00000 	.word	0x7ff00000
 8016f1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f1e:	1c5f      	adds	r7, r3, #1
 8016f20:	971b      	str	r7, [sp, #108]	; 0x6c
 8016f22:	785b      	ldrb	r3, [r3, #1]
 8016f24:	2b30      	cmp	r3, #48	; 0x30
 8016f26:	d0f9      	beq.n	8016f1c <_strtod_l+0x28c>
 8016f28:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016f2c:	2f08      	cmp	r7, #8
 8016f2e:	f63f af7d 	bhi.w	8016e2c <_strtod_l+0x19c>
 8016f32:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016f36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f38:	930a      	str	r3, [sp, #40]	; 0x28
 8016f3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f3c:	1c5f      	adds	r7, r3, #1
 8016f3e:	971b      	str	r7, [sp, #108]	; 0x6c
 8016f40:	785b      	ldrb	r3, [r3, #1]
 8016f42:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8016f46:	f1b8 0f09 	cmp.w	r8, #9
 8016f4a:	d937      	bls.n	8016fbc <_strtod_l+0x32c>
 8016f4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016f4e:	1a7f      	subs	r7, r7, r1
 8016f50:	2f08      	cmp	r7, #8
 8016f52:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016f56:	dc37      	bgt.n	8016fc8 <_strtod_l+0x338>
 8016f58:	45be      	cmp	lr, r7
 8016f5a:	bfa8      	it	ge
 8016f5c:	46be      	movge	lr, r7
 8016f5e:	f1bc 0f00 	cmp.w	ip, #0
 8016f62:	d001      	beq.n	8016f68 <_strtod_l+0x2d8>
 8016f64:	f1ce 0e00 	rsb	lr, lr, #0
 8016f68:	2c00      	cmp	r4, #0
 8016f6a:	d151      	bne.n	8017010 <_strtod_l+0x380>
 8016f6c:	2800      	cmp	r0, #0
 8016f6e:	f47f aece 	bne.w	8016d0e <_strtod_l+0x7e>
 8016f72:	9a06      	ldr	r2, [sp, #24]
 8016f74:	2a00      	cmp	r2, #0
 8016f76:	f47f aeca 	bne.w	8016d0e <_strtod_l+0x7e>
 8016f7a:	9a04      	ldr	r2, [sp, #16]
 8016f7c:	2a00      	cmp	r2, #0
 8016f7e:	f47f aee4 	bne.w	8016d4a <_strtod_l+0xba>
 8016f82:	2b4e      	cmp	r3, #78	; 0x4e
 8016f84:	d027      	beq.n	8016fd6 <_strtod_l+0x346>
 8016f86:	dc21      	bgt.n	8016fcc <_strtod_l+0x33c>
 8016f88:	2b49      	cmp	r3, #73	; 0x49
 8016f8a:	f47f aede 	bne.w	8016d4a <_strtod_l+0xba>
 8016f8e:	49a0      	ldr	r1, [pc, #640]	; (8017210 <_strtod_l+0x580>)
 8016f90:	a81b      	add	r0, sp, #108	; 0x6c
 8016f92:	f001 fdd7 	bl	8018b44 <__match>
 8016f96:	2800      	cmp	r0, #0
 8016f98:	f43f aed7 	beq.w	8016d4a <_strtod_l+0xba>
 8016f9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f9e:	499d      	ldr	r1, [pc, #628]	; (8017214 <_strtod_l+0x584>)
 8016fa0:	3b01      	subs	r3, #1
 8016fa2:	a81b      	add	r0, sp, #108	; 0x6c
 8016fa4:	931b      	str	r3, [sp, #108]	; 0x6c
 8016fa6:	f001 fdcd 	bl	8018b44 <__match>
 8016faa:	b910      	cbnz	r0, 8016fb2 <_strtod_l+0x322>
 8016fac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016fae:	3301      	adds	r3, #1
 8016fb0:	931b      	str	r3, [sp, #108]	; 0x6c
 8016fb2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8017228 <_strtod_l+0x598>
 8016fb6:	f04f 0a00 	mov.w	sl, #0
 8016fba:	e6a8      	b.n	8016d0e <_strtod_l+0x7e>
 8016fbc:	210a      	movs	r1, #10
 8016fbe:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016fc2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016fc6:	e7b8      	b.n	8016f3a <_strtod_l+0x2aa>
 8016fc8:	46be      	mov	lr, r7
 8016fca:	e7c8      	b.n	8016f5e <_strtod_l+0x2ce>
 8016fcc:	2b69      	cmp	r3, #105	; 0x69
 8016fce:	d0de      	beq.n	8016f8e <_strtod_l+0x2fe>
 8016fd0:	2b6e      	cmp	r3, #110	; 0x6e
 8016fd2:	f47f aeba 	bne.w	8016d4a <_strtod_l+0xba>
 8016fd6:	4990      	ldr	r1, [pc, #576]	; (8017218 <_strtod_l+0x588>)
 8016fd8:	a81b      	add	r0, sp, #108	; 0x6c
 8016fda:	f001 fdb3 	bl	8018b44 <__match>
 8016fde:	2800      	cmp	r0, #0
 8016fe0:	f43f aeb3 	beq.w	8016d4a <_strtod_l+0xba>
 8016fe4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016fe6:	781b      	ldrb	r3, [r3, #0]
 8016fe8:	2b28      	cmp	r3, #40	; 0x28
 8016fea:	d10e      	bne.n	801700a <_strtod_l+0x37a>
 8016fec:	aa1e      	add	r2, sp, #120	; 0x78
 8016fee:	498b      	ldr	r1, [pc, #556]	; (801721c <_strtod_l+0x58c>)
 8016ff0:	a81b      	add	r0, sp, #108	; 0x6c
 8016ff2:	f001 fdbb 	bl	8018b6c <__hexnan>
 8016ff6:	2805      	cmp	r0, #5
 8016ff8:	d107      	bne.n	801700a <_strtod_l+0x37a>
 8016ffa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016ffc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8017000:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8017004:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8017008:	e681      	b.n	8016d0e <_strtod_l+0x7e>
 801700a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8017230 <_strtod_l+0x5a0>
 801700e:	e7d2      	b.n	8016fb6 <_strtod_l+0x326>
 8017010:	ebae 0302 	sub.w	r3, lr, r2
 8017014:	9306      	str	r3, [sp, #24]
 8017016:	9b05      	ldr	r3, [sp, #20]
 8017018:	9807      	ldr	r0, [sp, #28]
 801701a:	2b00      	cmp	r3, #0
 801701c:	bf08      	it	eq
 801701e:	4623      	moveq	r3, r4
 8017020:	2c10      	cmp	r4, #16
 8017022:	9305      	str	r3, [sp, #20]
 8017024:	46a0      	mov	r8, r4
 8017026:	bfa8      	it	ge
 8017028:	f04f 0810 	movge.w	r8, #16
 801702c:	f7e9 fa6a 	bl	8000504 <__aeabi_ui2d>
 8017030:	2c09      	cmp	r4, #9
 8017032:	4682      	mov	sl, r0
 8017034:	468b      	mov	fp, r1
 8017036:	dc13      	bgt.n	8017060 <_strtod_l+0x3d0>
 8017038:	9b06      	ldr	r3, [sp, #24]
 801703a:	2b00      	cmp	r3, #0
 801703c:	f43f ae67 	beq.w	8016d0e <_strtod_l+0x7e>
 8017040:	9b06      	ldr	r3, [sp, #24]
 8017042:	dd7a      	ble.n	801713a <_strtod_l+0x4aa>
 8017044:	2b16      	cmp	r3, #22
 8017046:	dc61      	bgt.n	801710c <_strtod_l+0x47c>
 8017048:	4a75      	ldr	r2, [pc, #468]	; (8017220 <_strtod_l+0x590>)
 801704a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801704e:	e9de 0100 	ldrd	r0, r1, [lr]
 8017052:	4652      	mov	r2, sl
 8017054:	465b      	mov	r3, fp
 8017056:	f7e9 facf 	bl	80005f8 <__aeabi_dmul>
 801705a:	4682      	mov	sl, r0
 801705c:	468b      	mov	fp, r1
 801705e:	e656      	b.n	8016d0e <_strtod_l+0x7e>
 8017060:	4b6f      	ldr	r3, [pc, #444]	; (8017220 <_strtod_l+0x590>)
 8017062:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8017066:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801706a:	f7e9 fac5 	bl	80005f8 <__aeabi_dmul>
 801706e:	4606      	mov	r6, r0
 8017070:	4628      	mov	r0, r5
 8017072:	460f      	mov	r7, r1
 8017074:	f7e9 fa46 	bl	8000504 <__aeabi_ui2d>
 8017078:	4602      	mov	r2, r0
 801707a:	460b      	mov	r3, r1
 801707c:	4630      	mov	r0, r6
 801707e:	4639      	mov	r1, r7
 8017080:	f7e9 f904 	bl	800028c <__adddf3>
 8017084:	2c0f      	cmp	r4, #15
 8017086:	4682      	mov	sl, r0
 8017088:	468b      	mov	fp, r1
 801708a:	ddd5      	ble.n	8017038 <_strtod_l+0x3a8>
 801708c:	9b06      	ldr	r3, [sp, #24]
 801708e:	eba4 0808 	sub.w	r8, r4, r8
 8017092:	4498      	add	r8, r3
 8017094:	f1b8 0f00 	cmp.w	r8, #0
 8017098:	f340 8096 	ble.w	80171c8 <_strtod_l+0x538>
 801709c:	f018 030f 	ands.w	r3, r8, #15
 80170a0:	d00a      	beq.n	80170b8 <_strtod_l+0x428>
 80170a2:	495f      	ldr	r1, [pc, #380]	; (8017220 <_strtod_l+0x590>)
 80170a4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80170a8:	4652      	mov	r2, sl
 80170aa:	465b      	mov	r3, fp
 80170ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80170b0:	f7e9 faa2 	bl	80005f8 <__aeabi_dmul>
 80170b4:	4682      	mov	sl, r0
 80170b6:	468b      	mov	fp, r1
 80170b8:	f038 080f 	bics.w	r8, r8, #15
 80170bc:	d073      	beq.n	80171a6 <_strtod_l+0x516>
 80170be:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80170c2:	dd47      	ble.n	8017154 <_strtod_l+0x4c4>
 80170c4:	2400      	movs	r4, #0
 80170c6:	46a0      	mov	r8, r4
 80170c8:	9407      	str	r4, [sp, #28]
 80170ca:	9405      	str	r4, [sp, #20]
 80170cc:	2322      	movs	r3, #34	; 0x22
 80170ce:	f8df b158 	ldr.w	fp, [pc, #344]	; 8017228 <_strtod_l+0x598>
 80170d2:	f8c9 3000 	str.w	r3, [r9]
 80170d6:	f04f 0a00 	mov.w	sl, #0
 80170da:	9b07      	ldr	r3, [sp, #28]
 80170dc:	2b00      	cmp	r3, #0
 80170de:	f43f ae16 	beq.w	8016d0e <_strtod_l+0x7e>
 80170e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80170e4:	4648      	mov	r0, r9
 80170e6:	f001 fe2d 	bl	8018d44 <_Bfree>
 80170ea:	9905      	ldr	r1, [sp, #20]
 80170ec:	4648      	mov	r0, r9
 80170ee:	f001 fe29 	bl	8018d44 <_Bfree>
 80170f2:	4641      	mov	r1, r8
 80170f4:	4648      	mov	r0, r9
 80170f6:	f001 fe25 	bl	8018d44 <_Bfree>
 80170fa:	9907      	ldr	r1, [sp, #28]
 80170fc:	4648      	mov	r0, r9
 80170fe:	f001 fe21 	bl	8018d44 <_Bfree>
 8017102:	4621      	mov	r1, r4
 8017104:	4648      	mov	r0, r9
 8017106:	f001 fe1d 	bl	8018d44 <_Bfree>
 801710a:	e600      	b.n	8016d0e <_strtod_l+0x7e>
 801710c:	9a06      	ldr	r2, [sp, #24]
 801710e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8017112:	4293      	cmp	r3, r2
 8017114:	dbba      	blt.n	801708c <_strtod_l+0x3fc>
 8017116:	4d42      	ldr	r5, [pc, #264]	; (8017220 <_strtod_l+0x590>)
 8017118:	f1c4 040f 	rsb	r4, r4, #15
 801711c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8017120:	4652      	mov	r2, sl
 8017122:	465b      	mov	r3, fp
 8017124:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017128:	f7e9 fa66 	bl	80005f8 <__aeabi_dmul>
 801712c:	9b06      	ldr	r3, [sp, #24]
 801712e:	1b1c      	subs	r4, r3, r4
 8017130:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8017134:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017138:	e78d      	b.n	8017056 <_strtod_l+0x3c6>
 801713a:	f113 0f16 	cmn.w	r3, #22
 801713e:	dba5      	blt.n	801708c <_strtod_l+0x3fc>
 8017140:	4a37      	ldr	r2, [pc, #220]	; (8017220 <_strtod_l+0x590>)
 8017142:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8017146:	e9d2 2300 	ldrd	r2, r3, [r2]
 801714a:	4650      	mov	r0, sl
 801714c:	4659      	mov	r1, fp
 801714e:	f7e9 fb7d 	bl	800084c <__aeabi_ddiv>
 8017152:	e782      	b.n	801705a <_strtod_l+0x3ca>
 8017154:	2300      	movs	r3, #0
 8017156:	4e33      	ldr	r6, [pc, #204]	; (8017224 <_strtod_l+0x594>)
 8017158:	ea4f 1828 	mov.w	r8, r8, asr #4
 801715c:	4650      	mov	r0, sl
 801715e:	4659      	mov	r1, fp
 8017160:	461d      	mov	r5, r3
 8017162:	f1b8 0f01 	cmp.w	r8, #1
 8017166:	dc21      	bgt.n	80171ac <_strtod_l+0x51c>
 8017168:	b10b      	cbz	r3, 801716e <_strtod_l+0x4de>
 801716a:	4682      	mov	sl, r0
 801716c:	468b      	mov	fp, r1
 801716e:	4b2d      	ldr	r3, [pc, #180]	; (8017224 <_strtod_l+0x594>)
 8017170:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8017174:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8017178:	4652      	mov	r2, sl
 801717a:	465b      	mov	r3, fp
 801717c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017180:	f7e9 fa3a 	bl	80005f8 <__aeabi_dmul>
 8017184:	4b28      	ldr	r3, [pc, #160]	; (8017228 <_strtod_l+0x598>)
 8017186:	460a      	mov	r2, r1
 8017188:	400b      	ands	r3, r1
 801718a:	4928      	ldr	r1, [pc, #160]	; (801722c <_strtod_l+0x59c>)
 801718c:	428b      	cmp	r3, r1
 801718e:	4682      	mov	sl, r0
 8017190:	d898      	bhi.n	80170c4 <_strtod_l+0x434>
 8017192:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8017196:	428b      	cmp	r3, r1
 8017198:	bf86      	itte	hi
 801719a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8017234 <_strtod_l+0x5a4>
 801719e:	f04f 3aff 	movhi.w	sl, #4294967295
 80171a2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80171a6:	2300      	movs	r3, #0
 80171a8:	9304      	str	r3, [sp, #16]
 80171aa:	e077      	b.n	801729c <_strtod_l+0x60c>
 80171ac:	f018 0f01 	tst.w	r8, #1
 80171b0:	d006      	beq.n	80171c0 <_strtod_l+0x530>
 80171b2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80171b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171ba:	f7e9 fa1d 	bl	80005f8 <__aeabi_dmul>
 80171be:	2301      	movs	r3, #1
 80171c0:	3501      	adds	r5, #1
 80171c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80171c6:	e7cc      	b.n	8017162 <_strtod_l+0x4d2>
 80171c8:	d0ed      	beq.n	80171a6 <_strtod_l+0x516>
 80171ca:	f1c8 0800 	rsb	r8, r8, #0
 80171ce:	f018 020f 	ands.w	r2, r8, #15
 80171d2:	d00a      	beq.n	80171ea <_strtod_l+0x55a>
 80171d4:	4b12      	ldr	r3, [pc, #72]	; (8017220 <_strtod_l+0x590>)
 80171d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80171da:	4650      	mov	r0, sl
 80171dc:	4659      	mov	r1, fp
 80171de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171e2:	f7e9 fb33 	bl	800084c <__aeabi_ddiv>
 80171e6:	4682      	mov	sl, r0
 80171e8:	468b      	mov	fp, r1
 80171ea:	ea5f 1828 	movs.w	r8, r8, asr #4
 80171ee:	d0da      	beq.n	80171a6 <_strtod_l+0x516>
 80171f0:	f1b8 0f1f 	cmp.w	r8, #31
 80171f4:	dd20      	ble.n	8017238 <_strtod_l+0x5a8>
 80171f6:	2400      	movs	r4, #0
 80171f8:	46a0      	mov	r8, r4
 80171fa:	9407      	str	r4, [sp, #28]
 80171fc:	9405      	str	r4, [sp, #20]
 80171fe:	2322      	movs	r3, #34	; 0x22
 8017200:	f04f 0a00 	mov.w	sl, #0
 8017204:	f04f 0b00 	mov.w	fp, #0
 8017208:	f8c9 3000 	str.w	r3, [r9]
 801720c:	e765      	b.n	80170da <_strtod_l+0x44a>
 801720e:	bf00      	nop
 8017210:	0801b52d 	.word	0x0801b52d
 8017214:	0801b5bb 	.word	0x0801b5bb
 8017218:	0801b535 	.word	0x0801b535
 801721c:	0801b578 	.word	0x0801b578
 8017220:	0801b5f8 	.word	0x0801b5f8
 8017224:	0801b5d0 	.word	0x0801b5d0
 8017228:	7ff00000 	.word	0x7ff00000
 801722c:	7ca00000 	.word	0x7ca00000
 8017230:	fff80000 	.word	0xfff80000
 8017234:	7fefffff 	.word	0x7fefffff
 8017238:	f018 0310 	ands.w	r3, r8, #16
 801723c:	bf18      	it	ne
 801723e:	236a      	movne	r3, #106	; 0x6a
 8017240:	4da0      	ldr	r5, [pc, #640]	; (80174c4 <_strtod_l+0x834>)
 8017242:	9304      	str	r3, [sp, #16]
 8017244:	4650      	mov	r0, sl
 8017246:	4659      	mov	r1, fp
 8017248:	2300      	movs	r3, #0
 801724a:	f1b8 0f00 	cmp.w	r8, #0
 801724e:	f300 810a 	bgt.w	8017466 <_strtod_l+0x7d6>
 8017252:	b10b      	cbz	r3, 8017258 <_strtod_l+0x5c8>
 8017254:	4682      	mov	sl, r0
 8017256:	468b      	mov	fp, r1
 8017258:	9b04      	ldr	r3, [sp, #16]
 801725a:	b1bb      	cbz	r3, 801728c <_strtod_l+0x5fc>
 801725c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8017260:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017264:	2b00      	cmp	r3, #0
 8017266:	4659      	mov	r1, fp
 8017268:	dd10      	ble.n	801728c <_strtod_l+0x5fc>
 801726a:	2b1f      	cmp	r3, #31
 801726c:	f340 8107 	ble.w	801747e <_strtod_l+0x7ee>
 8017270:	2b34      	cmp	r3, #52	; 0x34
 8017272:	bfde      	ittt	le
 8017274:	3b20      	suble	r3, #32
 8017276:	f04f 32ff 	movle.w	r2, #4294967295
 801727a:	fa02 f303 	lslle.w	r3, r2, r3
 801727e:	f04f 0a00 	mov.w	sl, #0
 8017282:	bfcc      	ite	gt
 8017284:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8017288:	ea03 0b01 	andle.w	fp, r3, r1
 801728c:	2200      	movs	r2, #0
 801728e:	2300      	movs	r3, #0
 8017290:	4650      	mov	r0, sl
 8017292:	4659      	mov	r1, fp
 8017294:	f7e9 fc18 	bl	8000ac8 <__aeabi_dcmpeq>
 8017298:	2800      	cmp	r0, #0
 801729a:	d1ac      	bne.n	80171f6 <_strtod_l+0x566>
 801729c:	9b07      	ldr	r3, [sp, #28]
 801729e:	9300      	str	r3, [sp, #0]
 80172a0:	9a05      	ldr	r2, [sp, #20]
 80172a2:	9908      	ldr	r1, [sp, #32]
 80172a4:	4623      	mov	r3, r4
 80172a6:	4648      	mov	r0, r9
 80172a8:	f001 fd9e 	bl	8018de8 <__s2b>
 80172ac:	9007      	str	r0, [sp, #28]
 80172ae:	2800      	cmp	r0, #0
 80172b0:	f43f af08 	beq.w	80170c4 <_strtod_l+0x434>
 80172b4:	9a06      	ldr	r2, [sp, #24]
 80172b6:	9b06      	ldr	r3, [sp, #24]
 80172b8:	2a00      	cmp	r2, #0
 80172ba:	f1c3 0300 	rsb	r3, r3, #0
 80172be:	bfa8      	it	ge
 80172c0:	2300      	movge	r3, #0
 80172c2:	930e      	str	r3, [sp, #56]	; 0x38
 80172c4:	2400      	movs	r4, #0
 80172c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80172ca:	9316      	str	r3, [sp, #88]	; 0x58
 80172cc:	46a0      	mov	r8, r4
 80172ce:	9b07      	ldr	r3, [sp, #28]
 80172d0:	4648      	mov	r0, r9
 80172d2:	6859      	ldr	r1, [r3, #4]
 80172d4:	f001 fd02 	bl	8018cdc <_Balloc>
 80172d8:	9005      	str	r0, [sp, #20]
 80172da:	2800      	cmp	r0, #0
 80172dc:	f43f aef6 	beq.w	80170cc <_strtod_l+0x43c>
 80172e0:	9b07      	ldr	r3, [sp, #28]
 80172e2:	691a      	ldr	r2, [r3, #16]
 80172e4:	3202      	adds	r2, #2
 80172e6:	f103 010c 	add.w	r1, r3, #12
 80172ea:	0092      	lsls	r2, r2, #2
 80172ec:	300c      	adds	r0, #12
 80172ee:	f7fe fd35 	bl	8015d5c <memcpy>
 80172f2:	aa1e      	add	r2, sp, #120	; 0x78
 80172f4:	a91d      	add	r1, sp, #116	; 0x74
 80172f6:	ec4b ab10 	vmov	d0, sl, fp
 80172fa:	4648      	mov	r0, r9
 80172fc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8017300:	f002 f82e 	bl	8019360 <__d2b>
 8017304:	901c      	str	r0, [sp, #112]	; 0x70
 8017306:	2800      	cmp	r0, #0
 8017308:	f43f aee0 	beq.w	80170cc <_strtod_l+0x43c>
 801730c:	2101      	movs	r1, #1
 801730e:	4648      	mov	r0, r9
 8017310:	f001 fdf6 	bl	8018f00 <__i2b>
 8017314:	4680      	mov	r8, r0
 8017316:	2800      	cmp	r0, #0
 8017318:	f43f aed8 	beq.w	80170cc <_strtod_l+0x43c>
 801731c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801731e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017320:	2e00      	cmp	r6, #0
 8017322:	bfab      	itete	ge
 8017324:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8017326:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8017328:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801732a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801732c:	bfac      	ite	ge
 801732e:	18f7      	addge	r7, r6, r3
 8017330:	1b9d      	sublt	r5, r3, r6
 8017332:	9b04      	ldr	r3, [sp, #16]
 8017334:	1af6      	subs	r6, r6, r3
 8017336:	4416      	add	r6, r2
 8017338:	4b63      	ldr	r3, [pc, #396]	; (80174c8 <_strtod_l+0x838>)
 801733a:	3e01      	subs	r6, #1
 801733c:	429e      	cmp	r6, r3
 801733e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017342:	f280 80af 	bge.w	80174a4 <_strtod_l+0x814>
 8017346:	1b9b      	subs	r3, r3, r6
 8017348:	2b1f      	cmp	r3, #31
 801734a:	eba2 0203 	sub.w	r2, r2, r3
 801734e:	f04f 0101 	mov.w	r1, #1
 8017352:	f300 809b 	bgt.w	801748c <_strtod_l+0x7fc>
 8017356:	fa01 f303 	lsl.w	r3, r1, r3
 801735a:	930f      	str	r3, [sp, #60]	; 0x3c
 801735c:	2300      	movs	r3, #0
 801735e:	930a      	str	r3, [sp, #40]	; 0x28
 8017360:	18be      	adds	r6, r7, r2
 8017362:	9b04      	ldr	r3, [sp, #16]
 8017364:	42b7      	cmp	r7, r6
 8017366:	4415      	add	r5, r2
 8017368:	441d      	add	r5, r3
 801736a:	463b      	mov	r3, r7
 801736c:	bfa8      	it	ge
 801736e:	4633      	movge	r3, r6
 8017370:	42ab      	cmp	r3, r5
 8017372:	bfa8      	it	ge
 8017374:	462b      	movge	r3, r5
 8017376:	2b00      	cmp	r3, #0
 8017378:	bfc2      	ittt	gt
 801737a:	1af6      	subgt	r6, r6, r3
 801737c:	1aed      	subgt	r5, r5, r3
 801737e:	1aff      	subgt	r7, r7, r3
 8017380:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017382:	b1bb      	cbz	r3, 80173b4 <_strtod_l+0x724>
 8017384:	4641      	mov	r1, r8
 8017386:	461a      	mov	r2, r3
 8017388:	4648      	mov	r0, r9
 801738a:	f001 fe59 	bl	8019040 <__pow5mult>
 801738e:	4680      	mov	r8, r0
 8017390:	2800      	cmp	r0, #0
 8017392:	f43f ae9b 	beq.w	80170cc <_strtod_l+0x43c>
 8017396:	4601      	mov	r1, r0
 8017398:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801739a:	4648      	mov	r0, r9
 801739c:	f001 fdb9 	bl	8018f12 <__multiply>
 80173a0:	900c      	str	r0, [sp, #48]	; 0x30
 80173a2:	2800      	cmp	r0, #0
 80173a4:	f43f ae92 	beq.w	80170cc <_strtod_l+0x43c>
 80173a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80173aa:	4648      	mov	r0, r9
 80173ac:	f001 fcca 	bl	8018d44 <_Bfree>
 80173b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80173b2:	931c      	str	r3, [sp, #112]	; 0x70
 80173b4:	2e00      	cmp	r6, #0
 80173b6:	dc7a      	bgt.n	80174ae <_strtod_l+0x81e>
 80173b8:	9b06      	ldr	r3, [sp, #24]
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	dd08      	ble.n	80173d0 <_strtod_l+0x740>
 80173be:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80173c0:	9905      	ldr	r1, [sp, #20]
 80173c2:	4648      	mov	r0, r9
 80173c4:	f001 fe3c 	bl	8019040 <__pow5mult>
 80173c8:	9005      	str	r0, [sp, #20]
 80173ca:	2800      	cmp	r0, #0
 80173cc:	f43f ae7e 	beq.w	80170cc <_strtod_l+0x43c>
 80173d0:	2d00      	cmp	r5, #0
 80173d2:	dd08      	ble.n	80173e6 <_strtod_l+0x756>
 80173d4:	462a      	mov	r2, r5
 80173d6:	9905      	ldr	r1, [sp, #20]
 80173d8:	4648      	mov	r0, r9
 80173da:	f001 fe7f 	bl	80190dc <__lshift>
 80173de:	9005      	str	r0, [sp, #20]
 80173e0:	2800      	cmp	r0, #0
 80173e2:	f43f ae73 	beq.w	80170cc <_strtod_l+0x43c>
 80173e6:	2f00      	cmp	r7, #0
 80173e8:	dd08      	ble.n	80173fc <_strtod_l+0x76c>
 80173ea:	4641      	mov	r1, r8
 80173ec:	463a      	mov	r2, r7
 80173ee:	4648      	mov	r0, r9
 80173f0:	f001 fe74 	bl	80190dc <__lshift>
 80173f4:	4680      	mov	r8, r0
 80173f6:	2800      	cmp	r0, #0
 80173f8:	f43f ae68 	beq.w	80170cc <_strtod_l+0x43c>
 80173fc:	9a05      	ldr	r2, [sp, #20]
 80173fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017400:	4648      	mov	r0, r9
 8017402:	f001 fed9 	bl	80191b8 <__mdiff>
 8017406:	4604      	mov	r4, r0
 8017408:	2800      	cmp	r0, #0
 801740a:	f43f ae5f 	beq.w	80170cc <_strtod_l+0x43c>
 801740e:	68c3      	ldr	r3, [r0, #12]
 8017410:	930c      	str	r3, [sp, #48]	; 0x30
 8017412:	2300      	movs	r3, #0
 8017414:	60c3      	str	r3, [r0, #12]
 8017416:	4641      	mov	r1, r8
 8017418:	f001 feb4 	bl	8019184 <__mcmp>
 801741c:	2800      	cmp	r0, #0
 801741e:	da55      	bge.n	80174cc <_strtod_l+0x83c>
 8017420:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017422:	b9e3      	cbnz	r3, 801745e <_strtod_l+0x7ce>
 8017424:	f1ba 0f00 	cmp.w	sl, #0
 8017428:	d119      	bne.n	801745e <_strtod_l+0x7ce>
 801742a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801742e:	b9b3      	cbnz	r3, 801745e <_strtod_l+0x7ce>
 8017430:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017434:	0d1b      	lsrs	r3, r3, #20
 8017436:	051b      	lsls	r3, r3, #20
 8017438:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801743c:	d90f      	bls.n	801745e <_strtod_l+0x7ce>
 801743e:	6963      	ldr	r3, [r4, #20]
 8017440:	b913      	cbnz	r3, 8017448 <_strtod_l+0x7b8>
 8017442:	6923      	ldr	r3, [r4, #16]
 8017444:	2b01      	cmp	r3, #1
 8017446:	dd0a      	ble.n	801745e <_strtod_l+0x7ce>
 8017448:	4621      	mov	r1, r4
 801744a:	2201      	movs	r2, #1
 801744c:	4648      	mov	r0, r9
 801744e:	f001 fe45 	bl	80190dc <__lshift>
 8017452:	4641      	mov	r1, r8
 8017454:	4604      	mov	r4, r0
 8017456:	f001 fe95 	bl	8019184 <__mcmp>
 801745a:	2800      	cmp	r0, #0
 801745c:	dc67      	bgt.n	801752e <_strtod_l+0x89e>
 801745e:	9b04      	ldr	r3, [sp, #16]
 8017460:	2b00      	cmp	r3, #0
 8017462:	d171      	bne.n	8017548 <_strtod_l+0x8b8>
 8017464:	e63d      	b.n	80170e2 <_strtod_l+0x452>
 8017466:	f018 0f01 	tst.w	r8, #1
 801746a:	d004      	beq.n	8017476 <_strtod_l+0x7e6>
 801746c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017470:	f7e9 f8c2 	bl	80005f8 <__aeabi_dmul>
 8017474:	2301      	movs	r3, #1
 8017476:	ea4f 0868 	mov.w	r8, r8, asr #1
 801747a:	3508      	adds	r5, #8
 801747c:	e6e5      	b.n	801724a <_strtod_l+0x5ba>
 801747e:	f04f 32ff 	mov.w	r2, #4294967295
 8017482:	fa02 f303 	lsl.w	r3, r2, r3
 8017486:	ea03 0a0a 	and.w	sl, r3, sl
 801748a:	e6ff      	b.n	801728c <_strtod_l+0x5fc>
 801748c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8017490:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8017494:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8017498:	36e2      	adds	r6, #226	; 0xe2
 801749a:	fa01 f306 	lsl.w	r3, r1, r6
 801749e:	930a      	str	r3, [sp, #40]	; 0x28
 80174a0:	910f      	str	r1, [sp, #60]	; 0x3c
 80174a2:	e75d      	b.n	8017360 <_strtod_l+0x6d0>
 80174a4:	2300      	movs	r3, #0
 80174a6:	930a      	str	r3, [sp, #40]	; 0x28
 80174a8:	2301      	movs	r3, #1
 80174aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80174ac:	e758      	b.n	8017360 <_strtod_l+0x6d0>
 80174ae:	4632      	mov	r2, r6
 80174b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80174b2:	4648      	mov	r0, r9
 80174b4:	f001 fe12 	bl	80190dc <__lshift>
 80174b8:	901c      	str	r0, [sp, #112]	; 0x70
 80174ba:	2800      	cmp	r0, #0
 80174bc:	f47f af7c 	bne.w	80173b8 <_strtod_l+0x728>
 80174c0:	e604      	b.n	80170cc <_strtod_l+0x43c>
 80174c2:	bf00      	nop
 80174c4:	0801b590 	.word	0x0801b590
 80174c8:	fffffc02 	.word	0xfffffc02
 80174cc:	465d      	mov	r5, fp
 80174ce:	f040 8086 	bne.w	80175de <_strtod_l+0x94e>
 80174d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80174d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80174d8:	b32a      	cbz	r2, 8017526 <_strtod_l+0x896>
 80174da:	4aaf      	ldr	r2, [pc, #700]	; (8017798 <_strtod_l+0xb08>)
 80174dc:	4293      	cmp	r3, r2
 80174de:	d153      	bne.n	8017588 <_strtod_l+0x8f8>
 80174e0:	9b04      	ldr	r3, [sp, #16]
 80174e2:	4650      	mov	r0, sl
 80174e4:	b1d3      	cbz	r3, 801751c <_strtod_l+0x88c>
 80174e6:	4aad      	ldr	r2, [pc, #692]	; (801779c <_strtod_l+0xb0c>)
 80174e8:	402a      	ands	r2, r5
 80174ea:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80174ee:	f04f 31ff 	mov.w	r1, #4294967295
 80174f2:	d816      	bhi.n	8017522 <_strtod_l+0x892>
 80174f4:	0d12      	lsrs	r2, r2, #20
 80174f6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80174fa:	fa01 f303 	lsl.w	r3, r1, r3
 80174fe:	4298      	cmp	r0, r3
 8017500:	d142      	bne.n	8017588 <_strtod_l+0x8f8>
 8017502:	4ba7      	ldr	r3, [pc, #668]	; (80177a0 <_strtod_l+0xb10>)
 8017504:	429d      	cmp	r5, r3
 8017506:	d102      	bne.n	801750e <_strtod_l+0x87e>
 8017508:	3001      	adds	r0, #1
 801750a:	f43f addf 	beq.w	80170cc <_strtod_l+0x43c>
 801750e:	4ba3      	ldr	r3, [pc, #652]	; (801779c <_strtod_l+0xb0c>)
 8017510:	402b      	ands	r3, r5
 8017512:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8017516:	f04f 0a00 	mov.w	sl, #0
 801751a:	e7a0      	b.n	801745e <_strtod_l+0x7ce>
 801751c:	f04f 33ff 	mov.w	r3, #4294967295
 8017520:	e7ed      	b.n	80174fe <_strtod_l+0x86e>
 8017522:	460b      	mov	r3, r1
 8017524:	e7eb      	b.n	80174fe <_strtod_l+0x86e>
 8017526:	bb7b      	cbnz	r3, 8017588 <_strtod_l+0x8f8>
 8017528:	f1ba 0f00 	cmp.w	sl, #0
 801752c:	d12c      	bne.n	8017588 <_strtod_l+0x8f8>
 801752e:	9904      	ldr	r1, [sp, #16]
 8017530:	4a9a      	ldr	r2, [pc, #616]	; (801779c <_strtod_l+0xb0c>)
 8017532:	465b      	mov	r3, fp
 8017534:	b1f1      	cbz	r1, 8017574 <_strtod_l+0x8e4>
 8017536:	ea02 010b 	and.w	r1, r2, fp
 801753a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801753e:	dc19      	bgt.n	8017574 <_strtod_l+0x8e4>
 8017540:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017544:	f77f ae5b 	ble.w	80171fe <_strtod_l+0x56e>
 8017548:	4a96      	ldr	r2, [pc, #600]	; (80177a4 <_strtod_l+0xb14>)
 801754a:	2300      	movs	r3, #0
 801754c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8017550:	4650      	mov	r0, sl
 8017552:	4659      	mov	r1, fp
 8017554:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017558:	f7e9 f84e 	bl	80005f8 <__aeabi_dmul>
 801755c:	4682      	mov	sl, r0
 801755e:	468b      	mov	fp, r1
 8017560:	2900      	cmp	r1, #0
 8017562:	f47f adbe 	bne.w	80170e2 <_strtod_l+0x452>
 8017566:	2800      	cmp	r0, #0
 8017568:	f47f adbb 	bne.w	80170e2 <_strtod_l+0x452>
 801756c:	2322      	movs	r3, #34	; 0x22
 801756e:	f8c9 3000 	str.w	r3, [r9]
 8017572:	e5b6      	b.n	80170e2 <_strtod_l+0x452>
 8017574:	4013      	ands	r3, r2
 8017576:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801757a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801757e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017582:	f04f 3aff 	mov.w	sl, #4294967295
 8017586:	e76a      	b.n	801745e <_strtod_l+0x7ce>
 8017588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801758a:	b193      	cbz	r3, 80175b2 <_strtod_l+0x922>
 801758c:	422b      	tst	r3, r5
 801758e:	f43f af66 	beq.w	801745e <_strtod_l+0x7ce>
 8017592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017594:	9a04      	ldr	r2, [sp, #16]
 8017596:	4650      	mov	r0, sl
 8017598:	4659      	mov	r1, fp
 801759a:	b173      	cbz	r3, 80175ba <_strtod_l+0x92a>
 801759c:	f7ff fb5a 	bl	8016c54 <sulp>
 80175a0:	4602      	mov	r2, r0
 80175a2:	460b      	mov	r3, r1
 80175a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80175a8:	f7e8 fe70 	bl	800028c <__adddf3>
 80175ac:	4682      	mov	sl, r0
 80175ae:	468b      	mov	fp, r1
 80175b0:	e755      	b.n	801745e <_strtod_l+0x7ce>
 80175b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80175b4:	ea13 0f0a 	tst.w	r3, sl
 80175b8:	e7e9      	b.n	801758e <_strtod_l+0x8fe>
 80175ba:	f7ff fb4b 	bl	8016c54 <sulp>
 80175be:	4602      	mov	r2, r0
 80175c0:	460b      	mov	r3, r1
 80175c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80175c6:	f7e8 fe5f 	bl	8000288 <__aeabi_dsub>
 80175ca:	2200      	movs	r2, #0
 80175cc:	2300      	movs	r3, #0
 80175ce:	4682      	mov	sl, r0
 80175d0:	468b      	mov	fp, r1
 80175d2:	f7e9 fa79 	bl	8000ac8 <__aeabi_dcmpeq>
 80175d6:	2800      	cmp	r0, #0
 80175d8:	f47f ae11 	bne.w	80171fe <_strtod_l+0x56e>
 80175dc:	e73f      	b.n	801745e <_strtod_l+0x7ce>
 80175de:	4641      	mov	r1, r8
 80175e0:	4620      	mov	r0, r4
 80175e2:	f001 ff0c 	bl	80193fe <__ratio>
 80175e6:	ec57 6b10 	vmov	r6, r7, d0
 80175ea:	2200      	movs	r2, #0
 80175ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80175f0:	ee10 0a10 	vmov	r0, s0
 80175f4:	4639      	mov	r1, r7
 80175f6:	f7e9 fa7b 	bl	8000af0 <__aeabi_dcmple>
 80175fa:	2800      	cmp	r0, #0
 80175fc:	d077      	beq.n	80176ee <_strtod_l+0xa5e>
 80175fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017600:	2b00      	cmp	r3, #0
 8017602:	d04a      	beq.n	801769a <_strtod_l+0xa0a>
 8017604:	4b68      	ldr	r3, [pc, #416]	; (80177a8 <_strtod_l+0xb18>)
 8017606:	2200      	movs	r2, #0
 8017608:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801760c:	4f66      	ldr	r7, [pc, #408]	; (80177a8 <_strtod_l+0xb18>)
 801760e:	2600      	movs	r6, #0
 8017610:	4b62      	ldr	r3, [pc, #392]	; (801779c <_strtod_l+0xb0c>)
 8017612:	402b      	ands	r3, r5
 8017614:	930f      	str	r3, [sp, #60]	; 0x3c
 8017616:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017618:	4b64      	ldr	r3, [pc, #400]	; (80177ac <_strtod_l+0xb1c>)
 801761a:	429a      	cmp	r2, r3
 801761c:	f040 80ce 	bne.w	80177bc <_strtod_l+0xb2c>
 8017620:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017624:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017628:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801762c:	ec4b ab10 	vmov	d0, sl, fp
 8017630:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8017634:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017638:	f001 fe1c 	bl	8019274 <__ulp>
 801763c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017640:	ec53 2b10 	vmov	r2, r3, d0
 8017644:	f7e8 ffd8 	bl	80005f8 <__aeabi_dmul>
 8017648:	4652      	mov	r2, sl
 801764a:	465b      	mov	r3, fp
 801764c:	f7e8 fe1e 	bl	800028c <__adddf3>
 8017650:	460b      	mov	r3, r1
 8017652:	4952      	ldr	r1, [pc, #328]	; (801779c <_strtod_l+0xb0c>)
 8017654:	4a56      	ldr	r2, [pc, #344]	; (80177b0 <_strtod_l+0xb20>)
 8017656:	4019      	ands	r1, r3
 8017658:	4291      	cmp	r1, r2
 801765a:	4682      	mov	sl, r0
 801765c:	d95b      	bls.n	8017716 <_strtod_l+0xa86>
 801765e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017660:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017664:	4293      	cmp	r3, r2
 8017666:	d103      	bne.n	8017670 <_strtod_l+0x9e0>
 8017668:	9b08      	ldr	r3, [sp, #32]
 801766a:	3301      	adds	r3, #1
 801766c:	f43f ad2e 	beq.w	80170cc <_strtod_l+0x43c>
 8017670:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80177a0 <_strtod_l+0xb10>
 8017674:	f04f 3aff 	mov.w	sl, #4294967295
 8017678:	991c      	ldr	r1, [sp, #112]	; 0x70
 801767a:	4648      	mov	r0, r9
 801767c:	f001 fb62 	bl	8018d44 <_Bfree>
 8017680:	9905      	ldr	r1, [sp, #20]
 8017682:	4648      	mov	r0, r9
 8017684:	f001 fb5e 	bl	8018d44 <_Bfree>
 8017688:	4641      	mov	r1, r8
 801768a:	4648      	mov	r0, r9
 801768c:	f001 fb5a 	bl	8018d44 <_Bfree>
 8017690:	4621      	mov	r1, r4
 8017692:	4648      	mov	r0, r9
 8017694:	f001 fb56 	bl	8018d44 <_Bfree>
 8017698:	e619      	b.n	80172ce <_strtod_l+0x63e>
 801769a:	f1ba 0f00 	cmp.w	sl, #0
 801769e:	d11a      	bne.n	80176d6 <_strtod_l+0xa46>
 80176a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80176a4:	b9eb      	cbnz	r3, 80176e2 <_strtod_l+0xa52>
 80176a6:	2200      	movs	r2, #0
 80176a8:	4b3f      	ldr	r3, [pc, #252]	; (80177a8 <_strtod_l+0xb18>)
 80176aa:	4630      	mov	r0, r6
 80176ac:	4639      	mov	r1, r7
 80176ae:	f7e9 fa15 	bl	8000adc <__aeabi_dcmplt>
 80176b2:	b9c8      	cbnz	r0, 80176e8 <_strtod_l+0xa58>
 80176b4:	4630      	mov	r0, r6
 80176b6:	4639      	mov	r1, r7
 80176b8:	2200      	movs	r2, #0
 80176ba:	4b3e      	ldr	r3, [pc, #248]	; (80177b4 <_strtod_l+0xb24>)
 80176bc:	f7e8 ff9c 	bl	80005f8 <__aeabi_dmul>
 80176c0:	4606      	mov	r6, r0
 80176c2:	460f      	mov	r7, r1
 80176c4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80176c8:	9618      	str	r6, [sp, #96]	; 0x60
 80176ca:	9319      	str	r3, [sp, #100]	; 0x64
 80176cc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80176d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80176d4:	e79c      	b.n	8017610 <_strtod_l+0x980>
 80176d6:	f1ba 0f01 	cmp.w	sl, #1
 80176da:	d102      	bne.n	80176e2 <_strtod_l+0xa52>
 80176dc:	2d00      	cmp	r5, #0
 80176de:	f43f ad8e 	beq.w	80171fe <_strtod_l+0x56e>
 80176e2:	2200      	movs	r2, #0
 80176e4:	4b34      	ldr	r3, [pc, #208]	; (80177b8 <_strtod_l+0xb28>)
 80176e6:	e78f      	b.n	8017608 <_strtod_l+0x978>
 80176e8:	2600      	movs	r6, #0
 80176ea:	4f32      	ldr	r7, [pc, #200]	; (80177b4 <_strtod_l+0xb24>)
 80176ec:	e7ea      	b.n	80176c4 <_strtod_l+0xa34>
 80176ee:	4b31      	ldr	r3, [pc, #196]	; (80177b4 <_strtod_l+0xb24>)
 80176f0:	4630      	mov	r0, r6
 80176f2:	4639      	mov	r1, r7
 80176f4:	2200      	movs	r2, #0
 80176f6:	f7e8 ff7f 	bl	80005f8 <__aeabi_dmul>
 80176fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80176fc:	4606      	mov	r6, r0
 80176fe:	460f      	mov	r7, r1
 8017700:	b933      	cbnz	r3, 8017710 <_strtod_l+0xa80>
 8017702:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017706:	9010      	str	r0, [sp, #64]	; 0x40
 8017708:	9311      	str	r3, [sp, #68]	; 0x44
 801770a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801770e:	e7df      	b.n	80176d0 <_strtod_l+0xa40>
 8017710:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8017714:	e7f9      	b.n	801770a <_strtod_l+0xa7a>
 8017716:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801771a:	9b04      	ldr	r3, [sp, #16]
 801771c:	2b00      	cmp	r3, #0
 801771e:	d1ab      	bne.n	8017678 <_strtod_l+0x9e8>
 8017720:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017724:	0d1b      	lsrs	r3, r3, #20
 8017726:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017728:	051b      	lsls	r3, r3, #20
 801772a:	429a      	cmp	r2, r3
 801772c:	465d      	mov	r5, fp
 801772e:	d1a3      	bne.n	8017678 <_strtod_l+0x9e8>
 8017730:	4639      	mov	r1, r7
 8017732:	4630      	mov	r0, r6
 8017734:	f7e9 fa10 	bl	8000b58 <__aeabi_d2iz>
 8017738:	f7e8 fef4 	bl	8000524 <__aeabi_i2d>
 801773c:	460b      	mov	r3, r1
 801773e:	4602      	mov	r2, r0
 8017740:	4639      	mov	r1, r7
 8017742:	4630      	mov	r0, r6
 8017744:	f7e8 fda0 	bl	8000288 <__aeabi_dsub>
 8017748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801774a:	4606      	mov	r6, r0
 801774c:	460f      	mov	r7, r1
 801774e:	b933      	cbnz	r3, 801775e <_strtod_l+0xace>
 8017750:	f1ba 0f00 	cmp.w	sl, #0
 8017754:	d103      	bne.n	801775e <_strtod_l+0xace>
 8017756:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801775a:	2d00      	cmp	r5, #0
 801775c:	d06d      	beq.n	801783a <_strtod_l+0xbaa>
 801775e:	a30a      	add	r3, pc, #40	; (adr r3, 8017788 <_strtod_l+0xaf8>)
 8017760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017764:	4630      	mov	r0, r6
 8017766:	4639      	mov	r1, r7
 8017768:	f7e9 f9b8 	bl	8000adc <__aeabi_dcmplt>
 801776c:	2800      	cmp	r0, #0
 801776e:	f47f acb8 	bne.w	80170e2 <_strtod_l+0x452>
 8017772:	a307      	add	r3, pc, #28	; (adr r3, 8017790 <_strtod_l+0xb00>)
 8017774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017778:	4630      	mov	r0, r6
 801777a:	4639      	mov	r1, r7
 801777c:	f7e9 f9cc 	bl	8000b18 <__aeabi_dcmpgt>
 8017780:	2800      	cmp	r0, #0
 8017782:	f43f af79 	beq.w	8017678 <_strtod_l+0x9e8>
 8017786:	e4ac      	b.n	80170e2 <_strtod_l+0x452>
 8017788:	94a03595 	.word	0x94a03595
 801778c:	3fdfffff 	.word	0x3fdfffff
 8017790:	35afe535 	.word	0x35afe535
 8017794:	3fe00000 	.word	0x3fe00000
 8017798:	000fffff 	.word	0x000fffff
 801779c:	7ff00000 	.word	0x7ff00000
 80177a0:	7fefffff 	.word	0x7fefffff
 80177a4:	39500000 	.word	0x39500000
 80177a8:	3ff00000 	.word	0x3ff00000
 80177ac:	7fe00000 	.word	0x7fe00000
 80177b0:	7c9fffff 	.word	0x7c9fffff
 80177b4:	3fe00000 	.word	0x3fe00000
 80177b8:	bff00000 	.word	0xbff00000
 80177bc:	9b04      	ldr	r3, [sp, #16]
 80177be:	b333      	cbz	r3, 801780e <_strtod_l+0xb7e>
 80177c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80177c2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80177c6:	d822      	bhi.n	801780e <_strtod_l+0xb7e>
 80177c8:	a327      	add	r3, pc, #156	; (adr r3, 8017868 <_strtod_l+0xbd8>)
 80177ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177ce:	4630      	mov	r0, r6
 80177d0:	4639      	mov	r1, r7
 80177d2:	f7e9 f98d 	bl	8000af0 <__aeabi_dcmple>
 80177d6:	b1a0      	cbz	r0, 8017802 <_strtod_l+0xb72>
 80177d8:	4639      	mov	r1, r7
 80177da:	4630      	mov	r0, r6
 80177dc:	f7e9 f9e4 	bl	8000ba8 <__aeabi_d2uiz>
 80177e0:	2800      	cmp	r0, #0
 80177e2:	bf08      	it	eq
 80177e4:	2001      	moveq	r0, #1
 80177e6:	f7e8 fe8d 	bl	8000504 <__aeabi_ui2d>
 80177ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80177ec:	4606      	mov	r6, r0
 80177ee:	460f      	mov	r7, r1
 80177f0:	bb03      	cbnz	r3, 8017834 <_strtod_l+0xba4>
 80177f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80177f6:	9012      	str	r0, [sp, #72]	; 0x48
 80177f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80177fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80177fe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017804:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017806:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801780a:	1a9b      	subs	r3, r3, r2
 801780c:	930b      	str	r3, [sp, #44]	; 0x2c
 801780e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8017812:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8017816:	f001 fd2d 	bl	8019274 <__ulp>
 801781a:	4650      	mov	r0, sl
 801781c:	ec53 2b10 	vmov	r2, r3, d0
 8017820:	4659      	mov	r1, fp
 8017822:	f7e8 fee9 	bl	80005f8 <__aeabi_dmul>
 8017826:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801782a:	f7e8 fd2f 	bl	800028c <__adddf3>
 801782e:	4682      	mov	sl, r0
 8017830:	468b      	mov	fp, r1
 8017832:	e772      	b.n	801771a <_strtod_l+0xa8a>
 8017834:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8017838:	e7df      	b.n	80177fa <_strtod_l+0xb6a>
 801783a:	a30d      	add	r3, pc, #52	; (adr r3, 8017870 <_strtod_l+0xbe0>)
 801783c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017840:	f7e9 f94c 	bl	8000adc <__aeabi_dcmplt>
 8017844:	e79c      	b.n	8017780 <_strtod_l+0xaf0>
 8017846:	2300      	movs	r3, #0
 8017848:	930d      	str	r3, [sp, #52]	; 0x34
 801784a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801784c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801784e:	6013      	str	r3, [r2, #0]
 8017850:	f7ff ba61 	b.w	8016d16 <_strtod_l+0x86>
 8017854:	2b65      	cmp	r3, #101	; 0x65
 8017856:	f04f 0200 	mov.w	r2, #0
 801785a:	f43f ab4e 	beq.w	8016efa <_strtod_l+0x26a>
 801785e:	2101      	movs	r1, #1
 8017860:	4614      	mov	r4, r2
 8017862:	9104      	str	r1, [sp, #16]
 8017864:	f7ff bacb 	b.w	8016dfe <_strtod_l+0x16e>
 8017868:	ffc00000 	.word	0xffc00000
 801786c:	41dfffff 	.word	0x41dfffff
 8017870:	94a03595 	.word	0x94a03595
 8017874:	3fcfffff 	.word	0x3fcfffff

08017878 <_strtod_r>:
 8017878:	4b05      	ldr	r3, [pc, #20]	; (8017890 <_strtod_r+0x18>)
 801787a:	681b      	ldr	r3, [r3, #0]
 801787c:	b410      	push	{r4}
 801787e:	6a1b      	ldr	r3, [r3, #32]
 8017880:	4c04      	ldr	r4, [pc, #16]	; (8017894 <_strtod_r+0x1c>)
 8017882:	2b00      	cmp	r3, #0
 8017884:	bf08      	it	eq
 8017886:	4623      	moveq	r3, r4
 8017888:	f85d 4b04 	ldr.w	r4, [sp], #4
 801788c:	f7ff ba00 	b.w	8016c90 <_strtod_l>
 8017890:	2000220c 	.word	0x2000220c
 8017894:	20002270 	.word	0x20002270

08017898 <_strtol_l.isra.0>:
 8017898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801789c:	4680      	mov	r8, r0
 801789e:	4689      	mov	r9, r1
 80178a0:	4692      	mov	sl, r2
 80178a2:	461e      	mov	r6, r3
 80178a4:	460f      	mov	r7, r1
 80178a6:	463d      	mov	r5, r7
 80178a8:	9808      	ldr	r0, [sp, #32]
 80178aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80178ae:	f001 f9ed 	bl	8018c8c <__locale_ctype_ptr_l>
 80178b2:	4420      	add	r0, r4
 80178b4:	7843      	ldrb	r3, [r0, #1]
 80178b6:	f013 0308 	ands.w	r3, r3, #8
 80178ba:	d132      	bne.n	8017922 <_strtol_l.isra.0+0x8a>
 80178bc:	2c2d      	cmp	r4, #45	; 0x2d
 80178be:	d132      	bne.n	8017926 <_strtol_l.isra.0+0x8e>
 80178c0:	787c      	ldrb	r4, [r7, #1]
 80178c2:	1cbd      	adds	r5, r7, #2
 80178c4:	2201      	movs	r2, #1
 80178c6:	2e00      	cmp	r6, #0
 80178c8:	d05d      	beq.n	8017986 <_strtol_l.isra.0+0xee>
 80178ca:	2e10      	cmp	r6, #16
 80178cc:	d109      	bne.n	80178e2 <_strtol_l.isra.0+0x4a>
 80178ce:	2c30      	cmp	r4, #48	; 0x30
 80178d0:	d107      	bne.n	80178e2 <_strtol_l.isra.0+0x4a>
 80178d2:	782b      	ldrb	r3, [r5, #0]
 80178d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80178d8:	2b58      	cmp	r3, #88	; 0x58
 80178da:	d14f      	bne.n	801797c <_strtol_l.isra.0+0xe4>
 80178dc:	786c      	ldrb	r4, [r5, #1]
 80178de:	2610      	movs	r6, #16
 80178e0:	3502      	adds	r5, #2
 80178e2:	2a00      	cmp	r2, #0
 80178e4:	bf14      	ite	ne
 80178e6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80178ea:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80178ee:	2700      	movs	r7, #0
 80178f0:	fbb1 fcf6 	udiv	ip, r1, r6
 80178f4:	4638      	mov	r0, r7
 80178f6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80178fa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80178fe:	2b09      	cmp	r3, #9
 8017900:	d817      	bhi.n	8017932 <_strtol_l.isra.0+0x9a>
 8017902:	461c      	mov	r4, r3
 8017904:	42a6      	cmp	r6, r4
 8017906:	dd23      	ble.n	8017950 <_strtol_l.isra.0+0xb8>
 8017908:	1c7b      	adds	r3, r7, #1
 801790a:	d007      	beq.n	801791c <_strtol_l.isra.0+0x84>
 801790c:	4584      	cmp	ip, r0
 801790e:	d31c      	bcc.n	801794a <_strtol_l.isra.0+0xb2>
 8017910:	d101      	bne.n	8017916 <_strtol_l.isra.0+0x7e>
 8017912:	45a6      	cmp	lr, r4
 8017914:	db19      	blt.n	801794a <_strtol_l.isra.0+0xb2>
 8017916:	fb00 4006 	mla	r0, r0, r6, r4
 801791a:	2701      	movs	r7, #1
 801791c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017920:	e7eb      	b.n	80178fa <_strtol_l.isra.0+0x62>
 8017922:	462f      	mov	r7, r5
 8017924:	e7bf      	b.n	80178a6 <_strtol_l.isra.0+0xe>
 8017926:	2c2b      	cmp	r4, #43	; 0x2b
 8017928:	bf04      	itt	eq
 801792a:	1cbd      	addeq	r5, r7, #2
 801792c:	787c      	ldrbeq	r4, [r7, #1]
 801792e:	461a      	mov	r2, r3
 8017930:	e7c9      	b.n	80178c6 <_strtol_l.isra.0+0x2e>
 8017932:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8017936:	2b19      	cmp	r3, #25
 8017938:	d801      	bhi.n	801793e <_strtol_l.isra.0+0xa6>
 801793a:	3c37      	subs	r4, #55	; 0x37
 801793c:	e7e2      	b.n	8017904 <_strtol_l.isra.0+0x6c>
 801793e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8017942:	2b19      	cmp	r3, #25
 8017944:	d804      	bhi.n	8017950 <_strtol_l.isra.0+0xb8>
 8017946:	3c57      	subs	r4, #87	; 0x57
 8017948:	e7dc      	b.n	8017904 <_strtol_l.isra.0+0x6c>
 801794a:	f04f 37ff 	mov.w	r7, #4294967295
 801794e:	e7e5      	b.n	801791c <_strtol_l.isra.0+0x84>
 8017950:	1c7b      	adds	r3, r7, #1
 8017952:	d108      	bne.n	8017966 <_strtol_l.isra.0+0xce>
 8017954:	2322      	movs	r3, #34	; 0x22
 8017956:	f8c8 3000 	str.w	r3, [r8]
 801795a:	4608      	mov	r0, r1
 801795c:	f1ba 0f00 	cmp.w	sl, #0
 8017960:	d107      	bne.n	8017972 <_strtol_l.isra.0+0xda>
 8017962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017966:	b102      	cbz	r2, 801796a <_strtol_l.isra.0+0xd2>
 8017968:	4240      	negs	r0, r0
 801796a:	f1ba 0f00 	cmp.w	sl, #0
 801796e:	d0f8      	beq.n	8017962 <_strtol_l.isra.0+0xca>
 8017970:	b10f      	cbz	r7, 8017976 <_strtol_l.isra.0+0xde>
 8017972:	f105 39ff 	add.w	r9, r5, #4294967295
 8017976:	f8ca 9000 	str.w	r9, [sl]
 801797a:	e7f2      	b.n	8017962 <_strtol_l.isra.0+0xca>
 801797c:	2430      	movs	r4, #48	; 0x30
 801797e:	2e00      	cmp	r6, #0
 8017980:	d1af      	bne.n	80178e2 <_strtol_l.isra.0+0x4a>
 8017982:	2608      	movs	r6, #8
 8017984:	e7ad      	b.n	80178e2 <_strtol_l.isra.0+0x4a>
 8017986:	2c30      	cmp	r4, #48	; 0x30
 8017988:	d0a3      	beq.n	80178d2 <_strtol_l.isra.0+0x3a>
 801798a:	260a      	movs	r6, #10
 801798c:	e7a9      	b.n	80178e2 <_strtol_l.isra.0+0x4a>
	...

08017990 <_strtol_r>:
 8017990:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017992:	4c06      	ldr	r4, [pc, #24]	; (80179ac <_strtol_r+0x1c>)
 8017994:	4d06      	ldr	r5, [pc, #24]	; (80179b0 <_strtol_r+0x20>)
 8017996:	6824      	ldr	r4, [r4, #0]
 8017998:	6a24      	ldr	r4, [r4, #32]
 801799a:	2c00      	cmp	r4, #0
 801799c:	bf08      	it	eq
 801799e:	462c      	moveq	r4, r5
 80179a0:	9400      	str	r4, [sp, #0]
 80179a2:	f7ff ff79 	bl	8017898 <_strtol_l.isra.0>
 80179a6:	b003      	add	sp, #12
 80179a8:	bd30      	pop	{r4, r5, pc}
 80179aa:	bf00      	nop
 80179ac:	2000220c 	.word	0x2000220c
 80179b0:	20002270 	.word	0x20002270

080179b4 <quorem>:
 80179b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179b8:	6903      	ldr	r3, [r0, #16]
 80179ba:	690c      	ldr	r4, [r1, #16]
 80179bc:	42a3      	cmp	r3, r4
 80179be:	4680      	mov	r8, r0
 80179c0:	f2c0 8082 	blt.w	8017ac8 <quorem+0x114>
 80179c4:	3c01      	subs	r4, #1
 80179c6:	f101 0714 	add.w	r7, r1, #20
 80179ca:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80179ce:	f100 0614 	add.w	r6, r0, #20
 80179d2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80179d6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80179da:	eb06 030c 	add.w	r3, r6, ip
 80179de:	3501      	adds	r5, #1
 80179e0:	eb07 090c 	add.w	r9, r7, ip
 80179e4:	9301      	str	r3, [sp, #4]
 80179e6:	fbb0 f5f5 	udiv	r5, r0, r5
 80179ea:	b395      	cbz	r5, 8017a52 <quorem+0x9e>
 80179ec:	f04f 0a00 	mov.w	sl, #0
 80179f0:	4638      	mov	r0, r7
 80179f2:	46b6      	mov	lr, r6
 80179f4:	46d3      	mov	fp, sl
 80179f6:	f850 2b04 	ldr.w	r2, [r0], #4
 80179fa:	b293      	uxth	r3, r2
 80179fc:	fb05 a303 	mla	r3, r5, r3, sl
 8017a00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017a04:	b29b      	uxth	r3, r3
 8017a06:	ebab 0303 	sub.w	r3, fp, r3
 8017a0a:	0c12      	lsrs	r2, r2, #16
 8017a0c:	f8de b000 	ldr.w	fp, [lr]
 8017a10:	fb05 a202 	mla	r2, r5, r2, sl
 8017a14:	fa13 f38b 	uxtah	r3, r3, fp
 8017a18:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8017a1c:	fa1f fb82 	uxth.w	fp, r2
 8017a20:	f8de 2000 	ldr.w	r2, [lr]
 8017a24:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017a28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017a2c:	b29b      	uxth	r3, r3
 8017a2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017a32:	4581      	cmp	r9, r0
 8017a34:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017a38:	f84e 3b04 	str.w	r3, [lr], #4
 8017a3c:	d2db      	bcs.n	80179f6 <quorem+0x42>
 8017a3e:	f856 300c 	ldr.w	r3, [r6, ip]
 8017a42:	b933      	cbnz	r3, 8017a52 <quorem+0x9e>
 8017a44:	9b01      	ldr	r3, [sp, #4]
 8017a46:	3b04      	subs	r3, #4
 8017a48:	429e      	cmp	r6, r3
 8017a4a:	461a      	mov	r2, r3
 8017a4c:	d330      	bcc.n	8017ab0 <quorem+0xfc>
 8017a4e:	f8c8 4010 	str.w	r4, [r8, #16]
 8017a52:	4640      	mov	r0, r8
 8017a54:	f001 fb96 	bl	8019184 <__mcmp>
 8017a58:	2800      	cmp	r0, #0
 8017a5a:	db25      	blt.n	8017aa8 <quorem+0xf4>
 8017a5c:	3501      	adds	r5, #1
 8017a5e:	4630      	mov	r0, r6
 8017a60:	f04f 0c00 	mov.w	ip, #0
 8017a64:	f857 2b04 	ldr.w	r2, [r7], #4
 8017a68:	f8d0 e000 	ldr.w	lr, [r0]
 8017a6c:	b293      	uxth	r3, r2
 8017a6e:	ebac 0303 	sub.w	r3, ip, r3
 8017a72:	0c12      	lsrs	r2, r2, #16
 8017a74:	fa13 f38e 	uxtah	r3, r3, lr
 8017a78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017a7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017a80:	b29b      	uxth	r3, r3
 8017a82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017a86:	45b9      	cmp	r9, r7
 8017a88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017a8c:	f840 3b04 	str.w	r3, [r0], #4
 8017a90:	d2e8      	bcs.n	8017a64 <quorem+0xb0>
 8017a92:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8017a96:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017a9a:	b92a      	cbnz	r2, 8017aa8 <quorem+0xf4>
 8017a9c:	3b04      	subs	r3, #4
 8017a9e:	429e      	cmp	r6, r3
 8017aa0:	461a      	mov	r2, r3
 8017aa2:	d30b      	bcc.n	8017abc <quorem+0x108>
 8017aa4:	f8c8 4010 	str.w	r4, [r8, #16]
 8017aa8:	4628      	mov	r0, r5
 8017aaa:	b003      	add	sp, #12
 8017aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ab0:	6812      	ldr	r2, [r2, #0]
 8017ab2:	3b04      	subs	r3, #4
 8017ab4:	2a00      	cmp	r2, #0
 8017ab6:	d1ca      	bne.n	8017a4e <quorem+0x9a>
 8017ab8:	3c01      	subs	r4, #1
 8017aba:	e7c5      	b.n	8017a48 <quorem+0x94>
 8017abc:	6812      	ldr	r2, [r2, #0]
 8017abe:	3b04      	subs	r3, #4
 8017ac0:	2a00      	cmp	r2, #0
 8017ac2:	d1ef      	bne.n	8017aa4 <quorem+0xf0>
 8017ac4:	3c01      	subs	r4, #1
 8017ac6:	e7ea      	b.n	8017a9e <quorem+0xea>
 8017ac8:	2000      	movs	r0, #0
 8017aca:	e7ee      	b.n	8017aaa <quorem+0xf6>
 8017acc:	0000      	movs	r0, r0
	...

08017ad0 <_dtoa_r>:
 8017ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ad4:	ec57 6b10 	vmov	r6, r7, d0
 8017ad8:	b097      	sub	sp, #92	; 0x5c
 8017ada:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017adc:	9106      	str	r1, [sp, #24]
 8017ade:	4604      	mov	r4, r0
 8017ae0:	920b      	str	r2, [sp, #44]	; 0x2c
 8017ae2:	9312      	str	r3, [sp, #72]	; 0x48
 8017ae4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017ae8:	e9cd 6700 	strd	r6, r7, [sp]
 8017aec:	b93d      	cbnz	r5, 8017afe <_dtoa_r+0x2e>
 8017aee:	2010      	movs	r0, #16
 8017af0:	f7fe f924 	bl	8015d3c <malloc>
 8017af4:	6260      	str	r0, [r4, #36]	; 0x24
 8017af6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017afa:	6005      	str	r5, [r0, #0]
 8017afc:	60c5      	str	r5, [r0, #12]
 8017afe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017b00:	6819      	ldr	r1, [r3, #0]
 8017b02:	b151      	cbz	r1, 8017b1a <_dtoa_r+0x4a>
 8017b04:	685a      	ldr	r2, [r3, #4]
 8017b06:	604a      	str	r2, [r1, #4]
 8017b08:	2301      	movs	r3, #1
 8017b0a:	4093      	lsls	r3, r2
 8017b0c:	608b      	str	r3, [r1, #8]
 8017b0e:	4620      	mov	r0, r4
 8017b10:	f001 f918 	bl	8018d44 <_Bfree>
 8017b14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017b16:	2200      	movs	r2, #0
 8017b18:	601a      	str	r2, [r3, #0]
 8017b1a:	1e3b      	subs	r3, r7, #0
 8017b1c:	bfbb      	ittet	lt
 8017b1e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017b22:	9301      	strlt	r3, [sp, #4]
 8017b24:	2300      	movge	r3, #0
 8017b26:	2201      	movlt	r2, #1
 8017b28:	bfac      	ite	ge
 8017b2a:	f8c8 3000 	strge.w	r3, [r8]
 8017b2e:	f8c8 2000 	strlt.w	r2, [r8]
 8017b32:	4baf      	ldr	r3, [pc, #700]	; (8017df0 <_dtoa_r+0x320>)
 8017b34:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017b38:	ea33 0308 	bics.w	r3, r3, r8
 8017b3c:	d114      	bne.n	8017b68 <_dtoa_r+0x98>
 8017b3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017b40:	f242 730f 	movw	r3, #9999	; 0x270f
 8017b44:	6013      	str	r3, [r2, #0]
 8017b46:	9b00      	ldr	r3, [sp, #0]
 8017b48:	b923      	cbnz	r3, 8017b54 <_dtoa_r+0x84>
 8017b4a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8017b4e:	2800      	cmp	r0, #0
 8017b50:	f000 8542 	beq.w	80185d8 <_dtoa_r+0xb08>
 8017b54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017b56:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8017e04 <_dtoa_r+0x334>
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	f000 8544 	beq.w	80185e8 <_dtoa_r+0xb18>
 8017b60:	f10b 0303 	add.w	r3, fp, #3
 8017b64:	f000 bd3e 	b.w	80185e4 <_dtoa_r+0xb14>
 8017b68:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017b6c:	2200      	movs	r2, #0
 8017b6e:	2300      	movs	r3, #0
 8017b70:	4630      	mov	r0, r6
 8017b72:	4639      	mov	r1, r7
 8017b74:	f7e8 ffa8 	bl	8000ac8 <__aeabi_dcmpeq>
 8017b78:	4681      	mov	r9, r0
 8017b7a:	b168      	cbz	r0, 8017b98 <_dtoa_r+0xc8>
 8017b7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017b7e:	2301      	movs	r3, #1
 8017b80:	6013      	str	r3, [r2, #0]
 8017b82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	f000 8524 	beq.w	80185d2 <_dtoa_r+0xb02>
 8017b8a:	4b9a      	ldr	r3, [pc, #616]	; (8017df4 <_dtoa_r+0x324>)
 8017b8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017b8e:	f103 3bff 	add.w	fp, r3, #4294967295
 8017b92:	6013      	str	r3, [r2, #0]
 8017b94:	f000 bd28 	b.w	80185e8 <_dtoa_r+0xb18>
 8017b98:	aa14      	add	r2, sp, #80	; 0x50
 8017b9a:	a915      	add	r1, sp, #84	; 0x54
 8017b9c:	ec47 6b10 	vmov	d0, r6, r7
 8017ba0:	4620      	mov	r0, r4
 8017ba2:	f001 fbdd 	bl	8019360 <__d2b>
 8017ba6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017baa:	9004      	str	r0, [sp, #16]
 8017bac:	2d00      	cmp	r5, #0
 8017bae:	d07c      	beq.n	8017caa <_dtoa_r+0x1da>
 8017bb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017bb4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8017bb8:	46b2      	mov	sl, r6
 8017bba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8017bbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017bc2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8017bc6:	2200      	movs	r2, #0
 8017bc8:	4b8b      	ldr	r3, [pc, #556]	; (8017df8 <_dtoa_r+0x328>)
 8017bca:	4650      	mov	r0, sl
 8017bcc:	4659      	mov	r1, fp
 8017bce:	f7e8 fb5b 	bl	8000288 <__aeabi_dsub>
 8017bd2:	a381      	add	r3, pc, #516	; (adr r3, 8017dd8 <_dtoa_r+0x308>)
 8017bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bd8:	f7e8 fd0e 	bl	80005f8 <__aeabi_dmul>
 8017bdc:	a380      	add	r3, pc, #512	; (adr r3, 8017de0 <_dtoa_r+0x310>)
 8017bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017be2:	f7e8 fb53 	bl	800028c <__adddf3>
 8017be6:	4606      	mov	r6, r0
 8017be8:	4628      	mov	r0, r5
 8017bea:	460f      	mov	r7, r1
 8017bec:	f7e8 fc9a 	bl	8000524 <__aeabi_i2d>
 8017bf0:	a37d      	add	r3, pc, #500	; (adr r3, 8017de8 <_dtoa_r+0x318>)
 8017bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bf6:	f7e8 fcff 	bl	80005f8 <__aeabi_dmul>
 8017bfa:	4602      	mov	r2, r0
 8017bfc:	460b      	mov	r3, r1
 8017bfe:	4630      	mov	r0, r6
 8017c00:	4639      	mov	r1, r7
 8017c02:	f7e8 fb43 	bl	800028c <__adddf3>
 8017c06:	4606      	mov	r6, r0
 8017c08:	460f      	mov	r7, r1
 8017c0a:	f7e8 ffa5 	bl	8000b58 <__aeabi_d2iz>
 8017c0e:	2200      	movs	r2, #0
 8017c10:	4682      	mov	sl, r0
 8017c12:	2300      	movs	r3, #0
 8017c14:	4630      	mov	r0, r6
 8017c16:	4639      	mov	r1, r7
 8017c18:	f7e8 ff60 	bl	8000adc <__aeabi_dcmplt>
 8017c1c:	b148      	cbz	r0, 8017c32 <_dtoa_r+0x162>
 8017c1e:	4650      	mov	r0, sl
 8017c20:	f7e8 fc80 	bl	8000524 <__aeabi_i2d>
 8017c24:	4632      	mov	r2, r6
 8017c26:	463b      	mov	r3, r7
 8017c28:	f7e8 ff4e 	bl	8000ac8 <__aeabi_dcmpeq>
 8017c2c:	b908      	cbnz	r0, 8017c32 <_dtoa_r+0x162>
 8017c2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017c32:	f1ba 0f16 	cmp.w	sl, #22
 8017c36:	d859      	bhi.n	8017cec <_dtoa_r+0x21c>
 8017c38:	4970      	ldr	r1, [pc, #448]	; (8017dfc <_dtoa_r+0x32c>)
 8017c3a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8017c3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017c42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017c46:	f7e8 ff67 	bl	8000b18 <__aeabi_dcmpgt>
 8017c4a:	2800      	cmp	r0, #0
 8017c4c:	d050      	beq.n	8017cf0 <_dtoa_r+0x220>
 8017c4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017c52:	2300      	movs	r3, #0
 8017c54:	930f      	str	r3, [sp, #60]	; 0x3c
 8017c56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017c58:	1b5d      	subs	r5, r3, r5
 8017c5a:	f1b5 0801 	subs.w	r8, r5, #1
 8017c5e:	bf49      	itett	mi
 8017c60:	f1c5 0301 	rsbmi	r3, r5, #1
 8017c64:	2300      	movpl	r3, #0
 8017c66:	9305      	strmi	r3, [sp, #20]
 8017c68:	f04f 0800 	movmi.w	r8, #0
 8017c6c:	bf58      	it	pl
 8017c6e:	9305      	strpl	r3, [sp, #20]
 8017c70:	f1ba 0f00 	cmp.w	sl, #0
 8017c74:	db3e      	blt.n	8017cf4 <_dtoa_r+0x224>
 8017c76:	2300      	movs	r3, #0
 8017c78:	44d0      	add	r8, sl
 8017c7a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8017c7e:	9307      	str	r3, [sp, #28]
 8017c80:	9b06      	ldr	r3, [sp, #24]
 8017c82:	2b09      	cmp	r3, #9
 8017c84:	f200 8090 	bhi.w	8017da8 <_dtoa_r+0x2d8>
 8017c88:	2b05      	cmp	r3, #5
 8017c8a:	bfc4      	itt	gt
 8017c8c:	3b04      	subgt	r3, #4
 8017c8e:	9306      	strgt	r3, [sp, #24]
 8017c90:	9b06      	ldr	r3, [sp, #24]
 8017c92:	f1a3 0302 	sub.w	r3, r3, #2
 8017c96:	bfcc      	ite	gt
 8017c98:	2500      	movgt	r5, #0
 8017c9a:	2501      	movle	r5, #1
 8017c9c:	2b03      	cmp	r3, #3
 8017c9e:	f200 808f 	bhi.w	8017dc0 <_dtoa_r+0x2f0>
 8017ca2:	e8df f003 	tbb	[pc, r3]
 8017ca6:	7f7d      	.short	0x7f7d
 8017ca8:	7131      	.short	0x7131
 8017caa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8017cae:	441d      	add	r5, r3
 8017cb0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8017cb4:	2820      	cmp	r0, #32
 8017cb6:	dd13      	ble.n	8017ce0 <_dtoa_r+0x210>
 8017cb8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8017cbc:	9b00      	ldr	r3, [sp, #0]
 8017cbe:	fa08 f800 	lsl.w	r8, r8, r0
 8017cc2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8017cc6:	fa23 f000 	lsr.w	r0, r3, r0
 8017cca:	ea48 0000 	orr.w	r0, r8, r0
 8017cce:	f7e8 fc19 	bl	8000504 <__aeabi_ui2d>
 8017cd2:	2301      	movs	r3, #1
 8017cd4:	4682      	mov	sl, r0
 8017cd6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8017cda:	3d01      	subs	r5, #1
 8017cdc:	9313      	str	r3, [sp, #76]	; 0x4c
 8017cde:	e772      	b.n	8017bc6 <_dtoa_r+0xf6>
 8017ce0:	9b00      	ldr	r3, [sp, #0]
 8017ce2:	f1c0 0020 	rsb	r0, r0, #32
 8017ce6:	fa03 f000 	lsl.w	r0, r3, r0
 8017cea:	e7f0      	b.n	8017cce <_dtoa_r+0x1fe>
 8017cec:	2301      	movs	r3, #1
 8017cee:	e7b1      	b.n	8017c54 <_dtoa_r+0x184>
 8017cf0:	900f      	str	r0, [sp, #60]	; 0x3c
 8017cf2:	e7b0      	b.n	8017c56 <_dtoa_r+0x186>
 8017cf4:	9b05      	ldr	r3, [sp, #20]
 8017cf6:	eba3 030a 	sub.w	r3, r3, sl
 8017cfa:	9305      	str	r3, [sp, #20]
 8017cfc:	f1ca 0300 	rsb	r3, sl, #0
 8017d00:	9307      	str	r3, [sp, #28]
 8017d02:	2300      	movs	r3, #0
 8017d04:	930e      	str	r3, [sp, #56]	; 0x38
 8017d06:	e7bb      	b.n	8017c80 <_dtoa_r+0x1b0>
 8017d08:	2301      	movs	r3, #1
 8017d0a:	930a      	str	r3, [sp, #40]	; 0x28
 8017d0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	dd59      	ble.n	8017dc6 <_dtoa_r+0x2f6>
 8017d12:	9302      	str	r3, [sp, #8]
 8017d14:	4699      	mov	r9, r3
 8017d16:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017d18:	2200      	movs	r2, #0
 8017d1a:	6072      	str	r2, [r6, #4]
 8017d1c:	2204      	movs	r2, #4
 8017d1e:	f102 0014 	add.w	r0, r2, #20
 8017d22:	4298      	cmp	r0, r3
 8017d24:	6871      	ldr	r1, [r6, #4]
 8017d26:	d953      	bls.n	8017dd0 <_dtoa_r+0x300>
 8017d28:	4620      	mov	r0, r4
 8017d2a:	f000 ffd7 	bl	8018cdc <_Balloc>
 8017d2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017d30:	6030      	str	r0, [r6, #0]
 8017d32:	f1b9 0f0e 	cmp.w	r9, #14
 8017d36:	f8d3 b000 	ldr.w	fp, [r3]
 8017d3a:	f200 80e6 	bhi.w	8017f0a <_dtoa_r+0x43a>
 8017d3e:	2d00      	cmp	r5, #0
 8017d40:	f000 80e3 	beq.w	8017f0a <_dtoa_r+0x43a>
 8017d44:	ed9d 7b00 	vldr	d7, [sp]
 8017d48:	f1ba 0f00 	cmp.w	sl, #0
 8017d4c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017d50:	dd74      	ble.n	8017e3c <_dtoa_r+0x36c>
 8017d52:	4a2a      	ldr	r2, [pc, #168]	; (8017dfc <_dtoa_r+0x32c>)
 8017d54:	f00a 030f 	and.w	r3, sl, #15
 8017d58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017d5c:	ed93 7b00 	vldr	d7, [r3]
 8017d60:	ea4f 162a 	mov.w	r6, sl, asr #4
 8017d64:	06f0      	lsls	r0, r6, #27
 8017d66:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017d6a:	d565      	bpl.n	8017e38 <_dtoa_r+0x368>
 8017d6c:	4b24      	ldr	r3, [pc, #144]	; (8017e00 <_dtoa_r+0x330>)
 8017d6e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017d72:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017d76:	f7e8 fd69 	bl	800084c <__aeabi_ddiv>
 8017d7a:	e9cd 0100 	strd	r0, r1, [sp]
 8017d7e:	f006 060f 	and.w	r6, r6, #15
 8017d82:	2503      	movs	r5, #3
 8017d84:	4f1e      	ldr	r7, [pc, #120]	; (8017e00 <_dtoa_r+0x330>)
 8017d86:	e04c      	b.n	8017e22 <_dtoa_r+0x352>
 8017d88:	2301      	movs	r3, #1
 8017d8a:	930a      	str	r3, [sp, #40]	; 0x28
 8017d8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017d8e:	4453      	add	r3, sl
 8017d90:	f103 0901 	add.w	r9, r3, #1
 8017d94:	9302      	str	r3, [sp, #8]
 8017d96:	464b      	mov	r3, r9
 8017d98:	2b01      	cmp	r3, #1
 8017d9a:	bfb8      	it	lt
 8017d9c:	2301      	movlt	r3, #1
 8017d9e:	e7ba      	b.n	8017d16 <_dtoa_r+0x246>
 8017da0:	2300      	movs	r3, #0
 8017da2:	e7b2      	b.n	8017d0a <_dtoa_r+0x23a>
 8017da4:	2300      	movs	r3, #0
 8017da6:	e7f0      	b.n	8017d8a <_dtoa_r+0x2ba>
 8017da8:	2501      	movs	r5, #1
 8017daa:	2300      	movs	r3, #0
 8017dac:	9306      	str	r3, [sp, #24]
 8017dae:	950a      	str	r5, [sp, #40]	; 0x28
 8017db0:	f04f 33ff 	mov.w	r3, #4294967295
 8017db4:	9302      	str	r3, [sp, #8]
 8017db6:	4699      	mov	r9, r3
 8017db8:	2200      	movs	r2, #0
 8017dba:	2312      	movs	r3, #18
 8017dbc:	920b      	str	r2, [sp, #44]	; 0x2c
 8017dbe:	e7aa      	b.n	8017d16 <_dtoa_r+0x246>
 8017dc0:	2301      	movs	r3, #1
 8017dc2:	930a      	str	r3, [sp, #40]	; 0x28
 8017dc4:	e7f4      	b.n	8017db0 <_dtoa_r+0x2e0>
 8017dc6:	2301      	movs	r3, #1
 8017dc8:	9302      	str	r3, [sp, #8]
 8017dca:	4699      	mov	r9, r3
 8017dcc:	461a      	mov	r2, r3
 8017dce:	e7f5      	b.n	8017dbc <_dtoa_r+0x2ec>
 8017dd0:	3101      	adds	r1, #1
 8017dd2:	6071      	str	r1, [r6, #4]
 8017dd4:	0052      	lsls	r2, r2, #1
 8017dd6:	e7a2      	b.n	8017d1e <_dtoa_r+0x24e>
 8017dd8:	636f4361 	.word	0x636f4361
 8017ddc:	3fd287a7 	.word	0x3fd287a7
 8017de0:	8b60c8b3 	.word	0x8b60c8b3
 8017de4:	3fc68a28 	.word	0x3fc68a28
 8017de8:	509f79fb 	.word	0x509f79fb
 8017dec:	3fd34413 	.word	0x3fd34413
 8017df0:	7ff00000 	.word	0x7ff00000
 8017df4:	0801b539 	.word	0x0801b539
 8017df8:	3ff80000 	.word	0x3ff80000
 8017dfc:	0801b5f8 	.word	0x0801b5f8
 8017e00:	0801b5d0 	.word	0x0801b5d0
 8017e04:	0801b5c1 	.word	0x0801b5c1
 8017e08:	07f1      	lsls	r1, r6, #31
 8017e0a:	d508      	bpl.n	8017e1e <_dtoa_r+0x34e>
 8017e0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017e10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017e14:	f7e8 fbf0 	bl	80005f8 <__aeabi_dmul>
 8017e18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017e1c:	3501      	adds	r5, #1
 8017e1e:	1076      	asrs	r6, r6, #1
 8017e20:	3708      	adds	r7, #8
 8017e22:	2e00      	cmp	r6, #0
 8017e24:	d1f0      	bne.n	8017e08 <_dtoa_r+0x338>
 8017e26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017e2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017e2e:	f7e8 fd0d 	bl	800084c <__aeabi_ddiv>
 8017e32:	e9cd 0100 	strd	r0, r1, [sp]
 8017e36:	e01a      	b.n	8017e6e <_dtoa_r+0x39e>
 8017e38:	2502      	movs	r5, #2
 8017e3a:	e7a3      	b.n	8017d84 <_dtoa_r+0x2b4>
 8017e3c:	f000 80a0 	beq.w	8017f80 <_dtoa_r+0x4b0>
 8017e40:	f1ca 0600 	rsb	r6, sl, #0
 8017e44:	4b9f      	ldr	r3, [pc, #636]	; (80180c4 <_dtoa_r+0x5f4>)
 8017e46:	4fa0      	ldr	r7, [pc, #640]	; (80180c8 <_dtoa_r+0x5f8>)
 8017e48:	f006 020f 	and.w	r2, r6, #15
 8017e4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017e58:	f7e8 fbce 	bl	80005f8 <__aeabi_dmul>
 8017e5c:	e9cd 0100 	strd	r0, r1, [sp]
 8017e60:	1136      	asrs	r6, r6, #4
 8017e62:	2300      	movs	r3, #0
 8017e64:	2502      	movs	r5, #2
 8017e66:	2e00      	cmp	r6, #0
 8017e68:	d17f      	bne.n	8017f6a <_dtoa_r+0x49a>
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d1e1      	bne.n	8017e32 <_dtoa_r+0x362>
 8017e6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	f000 8087 	beq.w	8017f84 <_dtoa_r+0x4b4>
 8017e76:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017e7a:	2200      	movs	r2, #0
 8017e7c:	4b93      	ldr	r3, [pc, #588]	; (80180cc <_dtoa_r+0x5fc>)
 8017e7e:	4630      	mov	r0, r6
 8017e80:	4639      	mov	r1, r7
 8017e82:	f7e8 fe2b 	bl	8000adc <__aeabi_dcmplt>
 8017e86:	2800      	cmp	r0, #0
 8017e88:	d07c      	beq.n	8017f84 <_dtoa_r+0x4b4>
 8017e8a:	f1b9 0f00 	cmp.w	r9, #0
 8017e8e:	d079      	beq.n	8017f84 <_dtoa_r+0x4b4>
 8017e90:	9b02      	ldr	r3, [sp, #8]
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	dd35      	ble.n	8017f02 <_dtoa_r+0x432>
 8017e96:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017e9a:	9308      	str	r3, [sp, #32]
 8017e9c:	4639      	mov	r1, r7
 8017e9e:	2200      	movs	r2, #0
 8017ea0:	4b8b      	ldr	r3, [pc, #556]	; (80180d0 <_dtoa_r+0x600>)
 8017ea2:	4630      	mov	r0, r6
 8017ea4:	f7e8 fba8 	bl	80005f8 <__aeabi_dmul>
 8017ea8:	e9cd 0100 	strd	r0, r1, [sp]
 8017eac:	9f02      	ldr	r7, [sp, #8]
 8017eae:	3501      	adds	r5, #1
 8017eb0:	4628      	mov	r0, r5
 8017eb2:	f7e8 fb37 	bl	8000524 <__aeabi_i2d>
 8017eb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017eba:	f7e8 fb9d 	bl	80005f8 <__aeabi_dmul>
 8017ebe:	2200      	movs	r2, #0
 8017ec0:	4b84      	ldr	r3, [pc, #528]	; (80180d4 <_dtoa_r+0x604>)
 8017ec2:	f7e8 f9e3 	bl	800028c <__adddf3>
 8017ec6:	4605      	mov	r5, r0
 8017ec8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017ecc:	2f00      	cmp	r7, #0
 8017ece:	d15d      	bne.n	8017f8c <_dtoa_r+0x4bc>
 8017ed0:	2200      	movs	r2, #0
 8017ed2:	4b81      	ldr	r3, [pc, #516]	; (80180d8 <_dtoa_r+0x608>)
 8017ed4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017ed8:	f7e8 f9d6 	bl	8000288 <__aeabi_dsub>
 8017edc:	462a      	mov	r2, r5
 8017ede:	4633      	mov	r3, r6
 8017ee0:	e9cd 0100 	strd	r0, r1, [sp]
 8017ee4:	f7e8 fe18 	bl	8000b18 <__aeabi_dcmpgt>
 8017ee8:	2800      	cmp	r0, #0
 8017eea:	f040 8288 	bne.w	80183fe <_dtoa_r+0x92e>
 8017eee:	462a      	mov	r2, r5
 8017ef0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017ef4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017ef8:	f7e8 fdf0 	bl	8000adc <__aeabi_dcmplt>
 8017efc:	2800      	cmp	r0, #0
 8017efe:	f040 827c 	bne.w	80183fa <_dtoa_r+0x92a>
 8017f02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017f06:	e9cd 2300 	strd	r2, r3, [sp]
 8017f0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	f2c0 8150 	blt.w	80181b2 <_dtoa_r+0x6e2>
 8017f12:	f1ba 0f0e 	cmp.w	sl, #14
 8017f16:	f300 814c 	bgt.w	80181b2 <_dtoa_r+0x6e2>
 8017f1a:	4b6a      	ldr	r3, [pc, #424]	; (80180c4 <_dtoa_r+0x5f4>)
 8017f1c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017f20:	ed93 7b00 	vldr	d7, [r3]
 8017f24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017f2c:	f280 80d8 	bge.w	80180e0 <_dtoa_r+0x610>
 8017f30:	f1b9 0f00 	cmp.w	r9, #0
 8017f34:	f300 80d4 	bgt.w	80180e0 <_dtoa_r+0x610>
 8017f38:	f040 825e 	bne.w	80183f8 <_dtoa_r+0x928>
 8017f3c:	2200      	movs	r2, #0
 8017f3e:	4b66      	ldr	r3, [pc, #408]	; (80180d8 <_dtoa_r+0x608>)
 8017f40:	ec51 0b17 	vmov	r0, r1, d7
 8017f44:	f7e8 fb58 	bl	80005f8 <__aeabi_dmul>
 8017f48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017f4c:	f7e8 fdda 	bl	8000b04 <__aeabi_dcmpge>
 8017f50:	464f      	mov	r7, r9
 8017f52:	464e      	mov	r6, r9
 8017f54:	2800      	cmp	r0, #0
 8017f56:	f040 8234 	bne.w	80183c2 <_dtoa_r+0x8f2>
 8017f5a:	2331      	movs	r3, #49	; 0x31
 8017f5c:	f10b 0501 	add.w	r5, fp, #1
 8017f60:	f88b 3000 	strb.w	r3, [fp]
 8017f64:	f10a 0a01 	add.w	sl, sl, #1
 8017f68:	e22f      	b.n	80183ca <_dtoa_r+0x8fa>
 8017f6a:	07f2      	lsls	r2, r6, #31
 8017f6c:	d505      	bpl.n	8017f7a <_dtoa_r+0x4aa>
 8017f6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017f72:	f7e8 fb41 	bl	80005f8 <__aeabi_dmul>
 8017f76:	3501      	adds	r5, #1
 8017f78:	2301      	movs	r3, #1
 8017f7a:	1076      	asrs	r6, r6, #1
 8017f7c:	3708      	adds	r7, #8
 8017f7e:	e772      	b.n	8017e66 <_dtoa_r+0x396>
 8017f80:	2502      	movs	r5, #2
 8017f82:	e774      	b.n	8017e6e <_dtoa_r+0x39e>
 8017f84:	f8cd a020 	str.w	sl, [sp, #32]
 8017f88:	464f      	mov	r7, r9
 8017f8a:	e791      	b.n	8017eb0 <_dtoa_r+0x3e0>
 8017f8c:	4b4d      	ldr	r3, [pc, #308]	; (80180c4 <_dtoa_r+0x5f4>)
 8017f8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017f92:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8017f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d047      	beq.n	801802c <_dtoa_r+0x55c>
 8017f9c:	4602      	mov	r2, r0
 8017f9e:	460b      	mov	r3, r1
 8017fa0:	2000      	movs	r0, #0
 8017fa2:	494e      	ldr	r1, [pc, #312]	; (80180dc <_dtoa_r+0x60c>)
 8017fa4:	f7e8 fc52 	bl	800084c <__aeabi_ddiv>
 8017fa8:	462a      	mov	r2, r5
 8017faa:	4633      	mov	r3, r6
 8017fac:	f7e8 f96c 	bl	8000288 <__aeabi_dsub>
 8017fb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017fb4:	465d      	mov	r5, fp
 8017fb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017fba:	f7e8 fdcd 	bl	8000b58 <__aeabi_d2iz>
 8017fbe:	4606      	mov	r6, r0
 8017fc0:	f7e8 fab0 	bl	8000524 <__aeabi_i2d>
 8017fc4:	4602      	mov	r2, r0
 8017fc6:	460b      	mov	r3, r1
 8017fc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017fcc:	f7e8 f95c 	bl	8000288 <__aeabi_dsub>
 8017fd0:	3630      	adds	r6, #48	; 0x30
 8017fd2:	f805 6b01 	strb.w	r6, [r5], #1
 8017fd6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017fda:	e9cd 0100 	strd	r0, r1, [sp]
 8017fde:	f7e8 fd7d 	bl	8000adc <__aeabi_dcmplt>
 8017fe2:	2800      	cmp	r0, #0
 8017fe4:	d163      	bne.n	80180ae <_dtoa_r+0x5de>
 8017fe6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017fea:	2000      	movs	r0, #0
 8017fec:	4937      	ldr	r1, [pc, #220]	; (80180cc <_dtoa_r+0x5fc>)
 8017fee:	f7e8 f94b 	bl	8000288 <__aeabi_dsub>
 8017ff2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017ff6:	f7e8 fd71 	bl	8000adc <__aeabi_dcmplt>
 8017ffa:	2800      	cmp	r0, #0
 8017ffc:	f040 80b7 	bne.w	801816e <_dtoa_r+0x69e>
 8018000:	eba5 030b 	sub.w	r3, r5, fp
 8018004:	429f      	cmp	r7, r3
 8018006:	f77f af7c 	ble.w	8017f02 <_dtoa_r+0x432>
 801800a:	2200      	movs	r2, #0
 801800c:	4b30      	ldr	r3, [pc, #192]	; (80180d0 <_dtoa_r+0x600>)
 801800e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018012:	f7e8 faf1 	bl	80005f8 <__aeabi_dmul>
 8018016:	2200      	movs	r2, #0
 8018018:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801801c:	4b2c      	ldr	r3, [pc, #176]	; (80180d0 <_dtoa_r+0x600>)
 801801e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018022:	f7e8 fae9 	bl	80005f8 <__aeabi_dmul>
 8018026:	e9cd 0100 	strd	r0, r1, [sp]
 801802a:	e7c4      	b.n	8017fb6 <_dtoa_r+0x4e6>
 801802c:	462a      	mov	r2, r5
 801802e:	4633      	mov	r3, r6
 8018030:	f7e8 fae2 	bl	80005f8 <__aeabi_dmul>
 8018034:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018038:	eb0b 0507 	add.w	r5, fp, r7
 801803c:	465e      	mov	r6, fp
 801803e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018042:	f7e8 fd89 	bl	8000b58 <__aeabi_d2iz>
 8018046:	4607      	mov	r7, r0
 8018048:	f7e8 fa6c 	bl	8000524 <__aeabi_i2d>
 801804c:	3730      	adds	r7, #48	; 0x30
 801804e:	4602      	mov	r2, r0
 8018050:	460b      	mov	r3, r1
 8018052:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018056:	f7e8 f917 	bl	8000288 <__aeabi_dsub>
 801805a:	f806 7b01 	strb.w	r7, [r6], #1
 801805e:	42ae      	cmp	r6, r5
 8018060:	e9cd 0100 	strd	r0, r1, [sp]
 8018064:	f04f 0200 	mov.w	r2, #0
 8018068:	d126      	bne.n	80180b8 <_dtoa_r+0x5e8>
 801806a:	4b1c      	ldr	r3, [pc, #112]	; (80180dc <_dtoa_r+0x60c>)
 801806c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018070:	f7e8 f90c 	bl	800028c <__adddf3>
 8018074:	4602      	mov	r2, r0
 8018076:	460b      	mov	r3, r1
 8018078:	e9dd 0100 	ldrd	r0, r1, [sp]
 801807c:	f7e8 fd4c 	bl	8000b18 <__aeabi_dcmpgt>
 8018080:	2800      	cmp	r0, #0
 8018082:	d174      	bne.n	801816e <_dtoa_r+0x69e>
 8018084:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8018088:	2000      	movs	r0, #0
 801808a:	4914      	ldr	r1, [pc, #80]	; (80180dc <_dtoa_r+0x60c>)
 801808c:	f7e8 f8fc 	bl	8000288 <__aeabi_dsub>
 8018090:	4602      	mov	r2, r0
 8018092:	460b      	mov	r3, r1
 8018094:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018098:	f7e8 fd20 	bl	8000adc <__aeabi_dcmplt>
 801809c:	2800      	cmp	r0, #0
 801809e:	f43f af30 	beq.w	8017f02 <_dtoa_r+0x432>
 80180a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80180a6:	2b30      	cmp	r3, #48	; 0x30
 80180a8:	f105 32ff 	add.w	r2, r5, #4294967295
 80180ac:	d002      	beq.n	80180b4 <_dtoa_r+0x5e4>
 80180ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 80180b2:	e04a      	b.n	801814a <_dtoa_r+0x67a>
 80180b4:	4615      	mov	r5, r2
 80180b6:	e7f4      	b.n	80180a2 <_dtoa_r+0x5d2>
 80180b8:	4b05      	ldr	r3, [pc, #20]	; (80180d0 <_dtoa_r+0x600>)
 80180ba:	f7e8 fa9d 	bl	80005f8 <__aeabi_dmul>
 80180be:	e9cd 0100 	strd	r0, r1, [sp]
 80180c2:	e7bc      	b.n	801803e <_dtoa_r+0x56e>
 80180c4:	0801b5f8 	.word	0x0801b5f8
 80180c8:	0801b5d0 	.word	0x0801b5d0
 80180cc:	3ff00000 	.word	0x3ff00000
 80180d0:	40240000 	.word	0x40240000
 80180d4:	401c0000 	.word	0x401c0000
 80180d8:	40140000 	.word	0x40140000
 80180dc:	3fe00000 	.word	0x3fe00000
 80180e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80180e4:	465d      	mov	r5, fp
 80180e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80180ea:	4630      	mov	r0, r6
 80180ec:	4639      	mov	r1, r7
 80180ee:	f7e8 fbad 	bl	800084c <__aeabi_ddiv>
 80180f2:	f7e8 fd31 	bl	8000b58 <__aeabi_d2iz>
 80180f6:	4680      	mov	r8, r0
 80180f8:	f7e8 fa14 	bl	8000524 <__aeabi_i2d>
 80180fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018100:	f7e8 fa7a 	bl	80005f8 <__aeabi_dmul>
 8018104:	4602      	mov	r2, r0
 8018106:	460b      	mov	r3, r1
 8018108:	4630      	mov	r0, r6
 801810a:	4639      	mov	r1, r7
 801810c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8018110:	f7e8 f8ba 	bl	8000288 <__aeabi_dsub>
 8018114:	f805 6b01 	strb.w	r6, [r5], #1
 8018118:	eba5 060b 	sub.w	r6, r5, fp
 801811c:	45b1      	cmp	r9, r6
 801811e:	4602      	mov	r2, r0
 8018120:	460b      	mov	r3, r1
 8018122:	d139      	bne.n	8018198 <_dtoa_r+0x6c8>
 8018124:	f7e8 f8b2 	bl	800028c <__adddf3>
 8018128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801812c:	4606      	mov	r6, r0
 801812e:	460f      	mov	r7, r1
 8018130:	f7e8 fcf2 	bl	8000b18 <__aeabi_dcmpgt>
 8018134:	b9c8      	cbnz	r0, 801816a <_dtoa_r+0x69a>
 8018136:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801813a:	4630      	mov	r0, r6
 801813c:	4639      	mov	r1, r7
 801813e:	f7e8 fcc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8018142:	b110      	cbz	r0, 801814a <_dtoa_r+0x67a>
 8018144:	f018 0f01 	tst.w	r8, #1
 8018148:	d10f      	bne.n	801816a <_dtoa_r+0x69a>
 801814a:	9904      	ldr	r1, [sp, #16]
 801814c:	4620      	mov	r0, r4
 801814e:	f000 fdf9 	bl	8018d44 <_Bfree>
 8018152:	2300      	movs	r3, #0
 8018154:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018156:	702b      	strb	r3, [r5, #0]
 8018158:	f10a 0301 	add.w	r3, sl, #1
 801815c:	6013      	str	r3, [r2, #0]
 801815e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018160:	2b00      	cmp	r3, #0
 8018162:	f000 8241 	beq.w	80185e8 <_dtoa_r+0xb18>
 8018166:	601d      	str	r5, [r3, #0]
 8018168:	e23e      	b.n	80185e8 <_dtoa_r+0xb18>
 801816a:	f8cd a020 	str.w	sl, [sp, #32]
 801816e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018172:	2a39      	cmp	r2, #57	; 0x39
 8018174:	f105 33ff 	add.w	r3, r5, #4294967295
 8018178:	d108      	bne.n	801818c <_dtoa_r+0x6bc>
 801817a:	459b      	cmp	fp, r3
 801817c:	d10a      	bne.n	8018194 <_dtoa_r+0x6c4>
 801817e:	9b08      	ldr	r3, [sp, #32]
 8018180:	3301      	adds	r3, #1
 8018182:	9308      	str	r3, [sp, #32]
 8018184:	2330      	movs	r3, #48	; 0x30
 8018186:	f88b 3000 	strb.w	r3, [fp]
 801818a:	465b      	mov	r3, fp
 801818c:	781a      	ldrb	r2, [r3, #0]
 801818e:	3201      	adds	r2, #1
 8018190:	701a      	strb	r2, [r3, #0]
 8018192:	e78c      	b.n	80180ae <_dtoa_r+0x5de>
 8018194:	461d      	mov	r5, r3
 8018196:	e7ea      	b.n	801816e <_dtoa_r+0x69e>
 8018198:	2200      	movs	r2, #0
 801819a:	4b9b      	ldr	r3, [pc, #620]	; (8018408 <_dtoa_r+0x938>)
 801819c:	f7e8 fa2c 	bl	80005f8 <__aeabi_dmul>
 80181a0:	2200      	movs	r2, #0
 80181a2:	2300      	movs	r3, #0
 80181a4:	4606      	mov	r6, r0
 80181a6:	460f      	mov	r7, r1
 80181a8:	f7e8 fc8e 	bl	8000ac8 <__aeabi_dcmpeq>
 80181ac:	2800      	cmp	r0, #0
 80181ae:	d09a      	beq.n	80180e6 <_dtoa_r+0x616>
 80181b0:	e7cb      	b.n	801814a <_dtoa_r+0x67a>
 80181b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80181b4:	2a00      	cmp	r2, #0
 80181b6:	f000 808b 	beq.w	80182d0 <_dtoa_r+0x800>
 80181ba:	9a06      	ldr	r2, [sp, #24]
 80181bc:	2a01      	cmp	r2, #1
 80181be:	dc6e      	bgt.n	801829e <_dtoa_r+0x7ce>
 80181c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80181c2:	2a00      	cmp	r2, #0
 80181c4:	d067      	beq.n	8018296 <_dtoa_r+0x7c6>
 80181c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80181ca:	9f07      	ldr	r7, [sp, #28]
 80181cc:	9d05      	ldr	r5, [sp, #20]
 80181ce:	9a05      	ldr	r2, [sp, #20]
 80181d0:	2101      	movs	r1, #1
 80181d2:	441a      	add	r2, r3
 80181d4:	4620      	mov	r0, r4
 80181d6:	9205      	str	r2, [sp, #20]
 80181d8:	4498      	add	r8, r3
 80181da:	f000 fe91 	bl	8018f00 <__i2b>
 80181de:	4606      	mov	r6, r0
 80181e0:	2d00      	cmp	r5, #0
 80181e2:	dd0c      	ble.n	80181fe <_dtoa_r+0x72e>
 80181e4:	f1b8 0f00 	cmp.w	r8, #0
 80181e8:	dd09      	ble.n	80181fe <_dtoa_r+0x72e>
 80181ea:	4545      	cmp	r5, r8
 80181ec:	9a05      	ldr	r2, [sp, #20]
 80181ee:	462b      	mov	r3, r5
 80181f0:	bfa8      	it	ge
 80181f2:	4643      	movge	r3, r8
 80181f4:	1ad2      	subs	r2, r2, r3
 80181f6:	9205      	str	r2, [sp, #20]
 80181f8:	1aed      	subs	r5, r5, r3
 80181fa:	eba8 0803 	sub.w	r8, r8, r3
 80181fe:	9b07      	ldr	r3, [sp, #28]
 8018200:	b1eb      	cbz	r3, 801823e <_dtoa_r+0x76e>
 8018202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018204:	2b00      	cmp	r3, #0
 8018206:	d067      	beq.n	80182d8 <_dtoa_r+0x808>
 8018208:	b18f      	cbz	r7, 801822e <_dtoa_r+0x75e>
 801820a:	4631      	mov	r1, r6
 801820c:	463a      	mov	r2, r7
 801820e:	4620      	mov	r0, r4
 8018210:	f000 ff16 	bl	8019040 <__pow5mult>
 8018214:	9a04      	ldr	r2, [sp, #16]
 8018216:	4601      	mov	r1, r0
 8018218:	4606      	mov	r6, r0
 801821a:	4620      	mov	r0, r4
 801821c:	f000 fe79 	bl	8018f12 <__multiply>
 8018220:	9904      	ldr	r1, [sp, #16]
 8018222:	9008      	str	r0, [sp, #32]
 8018224:	4620      	mov	r0, r4
 8018226:	f000 fd8d 	bl	8018d44 <_Bfree>
 801822a:	9b08      	ldr	r3, [sp, #32]
 801822c:	9304      	str	r3, [sp, #16]
 801822e:	9b07      	ldr	r3, [sp, #28]
 8018230:	1bda      	subs	r2, r3, r7
 8018232:	d004      	beq.n	801823e <_dtoa_r+0x76e>
 8018234:	9904      	ldr	r1, [sp, #16]
 8018236:	4620      	mov	r0, r4
 8018238:	f000 ff02 	bl	8019040 <__pow5mult>
 801823c:	9004      	str	r0, [sp, #16]
 801823e:	2101      	movs	r1, #1
 8018240:	4620      	mov	r0, r4
 8018242:	f000 fe5d 	bl	8018f00 <__i2b>
 8018246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018248:	4607      	mov	r7, r0
 801824a:	2b00      	cmp	r3, #0
 801824c:	f000 81d0 	beq.w	80185f0 <_dtoa_r+0xb20>
 8018250:	461a      	mov	r2, r3
 8018252:	4601      	mov	r1, r0
 8018254:	4620      	mov	r0, r4
 8018256:	f000 fef3 	bl	8019040 <__pow5mult>
 801825a:	9b06      	ldr	r3, [sp, #24]
 801825c:	2b01      	cmp	r3, #1
 801825e:	4607      	mov	r7, r0
 8018260:	dc40      	bgt.n	80182e4 <_dtoa_r+0x814>
 8018262:	9b00      	ldr	r3, [sp, #0]
 8018264:	2b00      	cmp	r3, #0
 8018266:	d139      	bne.n	80182dc <_dtoa_r+0x80c>
 8018268:	9b01      	ldr	r3, [sp, #4]
 801826a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801826e:	2b00      	cmp	r3, #0
 8018270:	d136      	bne.n	80182e0 <_dtoa_r+0x810>
 8018272:	9b01      	ldr	r3, [sp, #4]
 8018274:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018278:	0d1b      	lsrs	r3, r3, #20
 801827a:	051b      	lsls	r3, r3, #20
 801827c:	b12b      	cbz	r3, 801828a <_dtoa_r+0x7ba>
 801827e:	9b05      	ldr	r3, [sp, #20]
 8018280:	3301      	adds	r3, #1
 8018282:	9305      	str	r3, [sp, #20]
 8018284:	f108 0801 	add.w	r8, r8, #1
 8018288:	2301      	movs	r3, #1
 801828a:	9307      	str	r3, [sp, #28]
 801828c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801828e:	2b00      	cmp	r3, #0
 8018290:	d12a      	bne.n	80182e8 <_dtoa_r+0x818>
 8018292:	2001      	movs	r0, #1
 8018294:	e030      	b.n	80182f8 <_dtoa_r+0x828>
 8018296:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018298:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801829c:	e795      	b.n	80181ca <_dtoa_r+0x6fa>
 801829e:	9b07      	ldr	r3, [sp, #28]
 80182a0:	f109 37ff 	add.w	r7, r9, #4294967295
 80182a4:	42bb      	cmp	r3, r7
 80182a6:	bfbf      	itttt	lt
 80182a8:	9b07      	ldrlt	r3, [sp, #28]
 80182aa:	9707      	strlt	r7, [sp, #28]
 80182ac:	1afa      	sublt	r2, r7, r3
 80182ae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80182b0:	bfbb      	ittet	lt
 80182b2:	189b      	addlt	r3, r3, r2
 80182b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80182b6:	1bdf      	subge	r7, r3, r7
 80182b8:	2700      	movlt	r7, #0
 80182ba:	f1b9 0f00 	cmp.w	r9, #0
 80182be:	bfb5      	itete	lt
 80182c0:	9b05      	ldrlt	r3, [sp, #20]
 80182c2:	9d05      	ldrge	r5, [sp, #20]
 80182c4:	eba3 0509 	sublt.w	r5, r3, r9
 80182c8:	464b      	movge	r3, r9
 80182ca:	bfb8      	it	lt
 80182cc:	2300      	movlt	r3, #0
 80182ce:	e77e      	b.n	80181ce <_dtoa_r+0x6fe>
 80182d0:	9f07      	ldr	r7, [sp, #28]
 80182d2:	9d05      	ldr	r5, [sp, #20]
 80182d4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80182d6:	e783      	b.n	80181e0 <_dtoa_r+0x710>
 80182d8:	9a07      	ldr	r2, [sp, #28]
 80182da:	e7ab      	b.n	8018234 <_dtoa_r+0x764>
 80182dc:	2300      	movs	r3, #0
 80182de:	e7d4      	b.n	801828a <_dtoa_r+0x7ba>
 80182e0:	9b00      	ldr	r3, [sp, #0]
 80182e2:	e7d2      	b.n	801828a <_dtoa_r+0x7ba>
 80182e4:	2300      	movs	r3, #0
 80182e6:	9307      	str	r3, [sp, #28]
 80182e8:	693b      	ldr	r3, [r7, #16]
 80182ea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80182ee:	6918      	ldr	r0, [r3, #16]
 80182f0:	f000 fdb8 	bl	8018e64 <__hi0bits>
 80182f4:	f1c0 0020 	rsb	r0, r0, #32
 80182f8:	4440      	add	r0, r8
 80182fa:	f010 001f 	ands.w	r0, r0, #31
 80182fe:	d047      	beq.n	8018390 <_dtoa_r+0x8c0>
 8018300:	f1c0 0320 	rsb	r3, r0, #32
 8018304:	2b04      	cmp	r3, #4
 8018306:	dd3b      	ble.n	8018380 <_dtoa_r+0x8b0>
 8018308:	9b05      	ldr	r3, [sp, #20]
 801830a:	f1c0 001c 	rsb	r0, r0, #28
 801830e:	4403      	add	r3, r0
 8018310:	9305      	str	r3, [sp, #20]
 8018312:	4405      	add	r5, r0
 8018314:	4480      	add	r8, r0
 8018316:	9b05      	ldr	r3, [sp, #20]
 8018318:	2b00      	cmp	r3, #0
 801831a:	dd05      	ble.n	8018328 <_dtoa_r+0x858>
 801831c:	461a      	mov	r2, r3
 801831e:	9904      	ldr	r1, [sp, #16]
 8018320:	4620      	mov	r0, r4
 8018322:	f000 fedb 	bl	80190dc <__lshift>
 8018326:	9004      	str	r0, [sp, #16]
 8018328:	f1b8 0f00 	cmp.w	r8, #0
 801832c:	dd05      	ble.n	801833a <_dtoa_r+0x86a>
 801832e:	4639      	mov	r1, r7
 8018330:	4642      	mov	r2, r8
 8018332:	4620      	mov	r0, r4
 8018334:	f000 fed2 	bl	80190dc <__lshift>
 8018338:	4607      	mov	r7, r0
 801833a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801833c:	b353      	cbz	r3, 8018394 <_dtoa_r+0x8c4>
 801833e:	4639      	mov	r1, r7
 8018340:	9804      	ldr	r0, [sp, #16]
 8018342:	f000 ff1f 	bl	8019184 <__mcmp>
 8018346:	2800      	cmp	r0, #0
 8018348:	da24      	bge.n	8018394 <_dtoa_r+0x8c4>
 801834a:	2300      	movs	r3, #0
 801834c:	220a      	movs	r2, #10
 801834e:	9904      	ldr	r1, [sp, #16]
 8018350:	4620      	mov	r0, r4
 8018352:	f000 fd0e 	bl	8018d72 <__multadd>
 8018356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018358:	9004      	str	r0, [sp, #16]
 801835a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801835e:	2b00      	cmp	r3, #0
 8018360:	f000 814d 	beq.w	80185fe <_dtoa_r+0xb2e>
 8018364:	2300      	movs	r3, #0
 8018366:	4631      	mov	r1, r6
 8018368:	220a      	movs	r2, #10
 801836a:	4620      	mov	r0, r4
 801836c:	f000 fd01 	bl	8018d72 <__multadd>
 8018370:	9b02      	ldr	r3, [sp, #8]
 8018372:	2b00      	cmp	r3, #0
 8018374:	4606      	mov	r6, r0
 8018376:	dc4f      	bgt.n	8018418 <_dtoa_r+0x948>
 8018378:	9b06      	ldr	r3, [sp, #24]
 801837a:	2b02      	cmp	r3, #2
 801837c:	dd4c      	ble.n	8018418 <_dtoa_r+0x948>
 801837e:	e011      	b.n	80183a4 <_dtoa_r+0x8d4>
 8018380:	d0c9      	beq.n	8018316 <_dtoa_r+0x846>
 8018382:	9a05      	ldr	r2, [sp, #20]
 8018384:	331c      	adds	r3, #28
 8018386:	441a      	add	r2, r3
 8018388:	9205      	str	r2, [sp, #20]
 801838a:	441d      	add	r5, r3
 801838c:	4498      	add	r8, r3
 801838e:	e7c2      	b.n	8018316 <_dtoa_r+0x846>
 8018390:	4603      	mov	r3, r0
 8018392:	e7f6      	b.n	8018382 <_dtoa_r+0x8b2>
 8018394:	f1b9 0f00 	cmp.w	r9, #0
 8018398:	dc38      	bgt.n	801840c <_dtoa_r+0x93c>
 801839a:	9b06      	ldr	r3, [sp, #24]
 801839c:	2b02      	cmp	r3, #2
 801839e:	dd35      	ble.n	801840c <_dtoa_r+0x93c>
 80183a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80183a4:	9b02      	ldr	r3, [sp, #8]
 80183a6:	b963      	cbnz	r3, 80183c2 <_dtoa_r+0x8f2>
 80183a8:	4639      	mov	r1, r7
 80183aa:	2205      	movs	r2, #5
 80183ac:	4620      	mov	r0, r4
 80183ae:	f000 fce0 	bl	8018d72 <__multadd>
 80183b2:	4601      	mov	r1, r0
 80183b4:	4607      	mov	r7, r0
 80183b6:	9804      	ldr	r0, [sp, #16]
 80183b8:	f000 fee4 	bl	8019184 <__mcmp>
 80183bc:	2800      	cmp	r0, #0
 80183be:	f73f adcc 	bgt.w	8017f5a <_dtoa_r+0x48a>
 80183c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80183c4:	465d      	mov	r5, fp
 80183c6:	ea6f 0a03 	mvn.w	sl, r3
 80183ca:	f04f 0900 	mov.w	r9, #0
 80183ce:	4639      	mov	r1, r7
 80183d0:	4620      	mov	r0, r4
 80183d2:	f000 fcb7 	bl	8018d44 <_Bfree>
 80183d6:	2e00      	cmp	r6, #0
 80183d8:	f43f aeb7 	beq.w	801814a <_dtoa_r+0x67a>
 80183dc:	f1b9 0f00 	cmp.w	r9, #0
 80183e0:	d005      	beq.n	80183ee <_dtoa_r+0x91e>
 80183e2:	45b1      	cmp	r9, r6
 80183e4:	d003      	beq.n	80183ee <_dtoa_r+0x91e>
 80183e6:	4649      	mov	r1, r9
 80183e8:	4620      	mov	r0, r4
 80183ea:	f000 fcab 	bl	8018d44 <_Bfree>
 80183ee:	4631      	mov	r1, r6
 80183f0:	4620      	mov	r0, r4
 80183f2:	f000 fca7 	bl	8018d44 <_Bfree>
 80183f6:	e6a8      	b.n	801814a <_dtoa_r+0x67a>
 80183f8:	2700      	movs	r7, #0
 80183fa:	463e      	mov	r6, r7
 80183fc:	e7e1      	b.n	80183c2 <_dtoa_r+0x8f2>
 80183fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8018402:	463e      	mov	r6, r7
 8018404:	e5a9      	b.n	8017f5a <_dtoa_r+0x48a>
 8018406:	bf00      	nop
 8018408:	40240000 	.word	0x40240000
 801840c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801840e:	f8cd 9008 	str.w	r9, [sp, #8]
 8018412:	2b00      	cmp	r3, #0
 8018414:	f000 80fa 	beq.w	801860c <_dtoa_r+0xb3c>
 8018418:	2d00      	cmp	r5, #0
 801841a:	dd05      	ble.n	8018428 <_dtoa_r+0x958>
 801841c:	4631      	mov	r1, r6
 801841e:	462a      	mov	r2, r5
 8018420:	4620      	mov	r0, r4
 8018422:	f000 fe5b 	bl	80190dc <__lshift>
 8018426:	4606      	mov	r6, r0
 8018428:	9b07      	ldr	r3, [sp, #28]
 801842a:	2b00      	cmp	r3, #0
 801842c:	d04c      	beq.n	80184c8 <_dtoa_r+0x9f8>
 801842e:	6871      	ldr	r1, [r6, #4]
 8018430:	4620      	mov	r0, r4
 8018432:	f000 fc53 	bl	8018cdc <_Balloc>
 8018436:	6932      	ldr	r2, [r6, #16]
 8018438:	3202      	adds	r2, #2
 801843a:	4605      	mov	r5, r0
 801843c:	0092      	lsls	r2, r2, #2
 801843e:	f106 010c 	add.w	r1, r6, #12
 8018442:	300c      	adds	r0, #12
 8018444:	f7fd fc8a 	bl	8015d5c <memcpy>
 8018448:	2201      	movs	r2, #1
 801844a:	4629      	mov	r1, r5
 801844c:	4620      	mov	r0, r4
 801844e:	f000 fe45 	bl	80190dc <__lshift>
 8018452:	9b00      	ldr	r3, [sp, #0]
 8018454:	f8cd b014 	str.w	fp, [sp, #20]
 8018458:	f003 0301 	and.w	r3, r3, #1
 801845c:	46b1      	mov	r9, r6
 801845e:	9307      	str	r3, [sp, #28]
 8018460:	4606      	mov	r6, r0
 8018462:	4639      	mov	r1, r7
 8018464:	9804      	ldr	r0, [sp, #16]
 8018466:	f7ff faa5 	bl	80179b4 <quorem>
 801846a:	4649      	mov	r1, r9
 801846c:	4605      	mov	r5, r0
 801846e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8018472:	9804      	ldr	r0, [sp, #16]
 8018474:	f000 fe86 	bl	8019184 <__mcmp>
 8018478:	4632      	mov	r2, r6
 801847a:	9000      	str	r0, [sp, #0]
 801847c:	4639      	mov	r1, r7
 801847e:	4620      	mov	r0, r4
 8018480:	f000 fe9a 	bl	80191b8 <__mdiff>
 8018484:	68c3      	ldr	r3, [r0, #12]
 8018486:	4602      	mov	r2, r0
 8018488:	bb03      	cbnz	r3, 80184cc <_dtoa_r+0x9fc>
 801848a:	4601      	mov	r1, r0
 801848c:	9008      	str	r0, [sp, #32]
 801848e:	9804      	ldr	r0, [sp, #16]
 8018490:	f000 fe78 	bl	8019184 <__mcmp>
 8018494:	9a08      	ldr	r2, [sp, #32]
 8018496:	4603      	mov	r3, r0
 8018498:	4611      	mov	r1, r2
 801849a:	4620      	mov	r0, r4
 801849c:	9308      	str	r3, [sp, #32]
 801849e:	f000 fc51 	bl	8018d44 <_Bfree>
 80184a2:	9b08      	ldr	r3, [sp, #32]
 80184a4:	b9a3      	cbnz	r3, 80184d0 <_dtoa_r+0xa00>
 80184a6:	9a06      	ldr	r2, [sp, #24]
 80184a8:	b992      	cbnz	r2, 80184d0 <_dtoa_r+0xa00>
 80184aa:	9a07      	ldr	r2, [sp, #28]
 80184ac:	b982      	cbnz	r2, 80184d0 <_dtoa_r+0xa00>
 80184ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80184b2:	d029      	beq.n	8018508 <_dtoa_r+0xa38>
 80184b4:	9b00      	ldr	r3, [sp, #0]
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	dd01      	ble.n	80184be <_dtoa_r+0x9ee>
 80184ba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80184be:	9b05      	ldr	r3, [sp, #20]
 80184c0:	1c5d      	adds	r5, r3, #1
 80184c2:	f883 8000 	strb.w	r8, [r3]
 80184c6:	e782      	b.n	80183ce <_dtoa_r+0x8fe>
 80184c8:	4630      	mov	r0, r6
 80184ca:	e7c2      	b.n	8018452 <_dtoa_r+0x982>
 80184cc:	2301      	movs	r3, #1
 80184ce:	e7e3      	b.n	8018498 <_dtoa_r+0x9c8>
 80184d0:	9a00      	ldr	r2, [sp, #0]
 80184d2:	2a00      	cmp	r2, #0
 80184d4:	db04      	blt.n	80184e0 <_dtoa_r+0xa10>
 80184d6:	d125      	bne.n	8018524 <_dtoa_r+0xa54>
 80184d8:	9a06      	ldr	r2, [sp, #24]
 80184da:	bb1a      	cbnz	r2, 8018524 <_dtoa_r+0xa54>
 80184dc:	9a07      	ldr	r2, [sp, #28]
 80184de:	bb0a      	cbnz	r2, 8018524 <_dtoa_r+0xa54>
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	ddec      	ble.n	80184be <_dtoa_r+0x9ee>
 80184e4:	2201      	movs	r2, #1
 80184e6:	9904      	ldr	r1, [sp, #16]
 80184e8:	4620      	mov	r0, r4
 80184ea:	f000 fdf7 	bl	80190dc <__lshift>
 80184ee:	4639      	mov	r1, r7
 80184f0:	9004      	str	r0, [sp, #16]
 80184f2:	f000 fe47 	bl	8019184 <__mcmp>
 80184f6:	2800      	cmp	r0, #0
 80184f8:	dc03      	bgt.n	8018502 <_dtoa_r+0xa32>
 80184fa:	d1e0      	bne.n	80184be <_dtoa_r+0x9ee>
 80184fc:	f018 0f01 	tst.w	r8, #1
 8018500:	d0dd      	beq.n	80184be <_dtoa_r+0x9ee>
 8018502:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018506:	d1d8      	bne.n	80184ba <_dtoa_r+0x9ea>
 8018508:	9b05      	ldr	r3, [sp, #20]
 801850a:	9a05      	ldr	r2, [sp, #20]
 801850c:	1c5d      	adds	r5, r3, #1
 801850e:	2339      	movs	r3, #57	; 0x39
 8018510:	7013      	strb	r3, [r2, #0]
 8018512:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018516:	2b39      	cmp	r3, #57	; 0x39
 8018518:	f105 32ff 	add.w	r2, r5, #4294967295
 801851c:	d04f      	beq.n	80185be <_dtoa_r+0xaee>
 801851e:	3301      	adds	r3, #1
 8018520:	7013      	strb	r3, [r2, #0]
 8018522:	e754      	b.n	80183ce <_dtoa_r+0x8fe>
 8018524:	9a05      	ldr	r2, [sp, #20]
 8018526:	2b00      	cmp	r3, #0
 8018528:	f102 0501 	add.w	r5, r2, #1
 801852c:	dd06      	ble.n	801853c <_dtoa_r+0xa6c>
 801852e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018532:	d0e9      	beq.n	8018508 <_dtoa_r+0xa38>
 8018534:	f108 0801 	add.w	r8, r8, #1
 8018538:	9b05      	ldr	r3, [sp, #20]
 801853a:	e7c2      	b.n	80184c2 <_dtoa_r+0x9f2>
 801853c:	9a02      	ldr	r2, [sp, #8]
 801853e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8018542:	eba5 030b 	sub.w	r3, r5, fp
 8018546:	4293      	cmp	r3, r2
 8018548:	d021      	beq.n	801858e <_dtoa_r+0xabe>
 801854a:	2300      	movs	r3, #0
 801854c:	220a      	movs	r2, #10
 801854e:	9904      	ldr	r1, [sp, #16]
 8018550:	4620      	mov	r0, r4
 8018552:	f000 fc0e 	bl	8018d72 <__multadd>
 8018556:	45b1      	cmp	r9, r6
 8018558:	9004      	str	r0, [sp, #16]
 801855a:	f04f 0300 	mov.w	r3, #0
 801855e:	f04f 020a 	mov.w	r2, #10
 8018562:	4649      	mov	r1, r9
 8018564:	4620      	mov	r0, r4
 8018566:	d105      	bne.n	8018574 <_dtoa_r+0xaa4>
 8018568:	f000 fc03 	bl	8018d72 <__multadd>
 801856c:	4681      	mov	r9, r0
 801856e:	4606      	mov	r6, r0
 8018570:	9505      	str	r5, [sp, #20]
 8018572:	e776      	b.n	8018462 <_dtoa_r+0x992>
 8018574:	f000 fbfd 	bl	8018d72 <__multadd>
 8018578:	4631      	mov	r1, r6
 801857a:	4681      	mov	r9, r0
 801857c:	2300      	movs	r3, #0
 801857e:	220a      	movs	r2, #10
 8018580:	4620      	mov	r0, r4
 8018582:	f000 fbf6 	bl	8018d72 <__multadd>
 8018586:	4606      	mov	r6, r0
 8018588:	e7f2      	b.n	8018570 <_dtoa_r+0xaa0>
 801858a:	f04f 0900 	mov.w	r9, #0
 801858e:	2201      	movs	r2, #1
 8018590:	9904      	ldr	r1, [sp, #16]
 8018592:	4620      	mov	r0, r4
 8018594:	f000 fda2 	bl	80190dc <__lshift>
 8018598:	4639      	mov	r1, r7
 801859a:	9004      	str	r0, [sp, #16]
 801859c:	f000 fdf2 	bl	8019184 <__mcmp>
 80185a0:	2800      	cmp	r0, #0
 80185a2:	dcb6      	bgt.n	8018512 <_dtoa_r+0xa42>
 80185a4:	d102      	bne.n	80185ac <_dtoa_r+0xadc>
 80185a6:	f018 0f01 	tst.w	r8, #1
 80185aa:	d1b2      	bne.n	8018512 <_dtoa_r+0xa42>
 80185ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80185b0:	2b30      	cmp	r3, #48	; 0x30
 80185b2:	f105 32ff 	add.w	r2, r5, #4294967295
 80185b6:	f47f af0a 	bne.w	80183ce <_dtoa_r+0x8fe>
 80185ba:	4615      	mov	r5, r2
 80185bc:	e7f6      	b.n	80185ac <_dtoa_r+0xadc>
 80185be:	4593      	cmp	fp, r2
 80185c0:	d105      	bne.n	80185ce <_dtoa_r+0xafe>
 80185c2:	2331      	movs	r3, #49	; 0x31
 80185c4:	f10a 0a01 	add.w	sl, sl, #1
 80185c8:	f88b 3000 	strb.w	r3, [fp]
 80185cc:	e6ff      	b.n	80183ce <_dtoa_r+0x8fe>
 80185ce:	4615      	mov	r5, r2
 80185d0:	e79f      	b.n	8018512 <_dtoa_r+0xa42>
 80185d2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8018638 <_dtoa_r+0xb68>
 80185d6:	e007      	b.n	80185e8 <_dtoa_r+0xb18>
 80185d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80185da:	f8df b060 	ldr.w	fp, [pc, #96]	; 801863c <_dtoa_r+0xb6c>
 80185de:	b11b      	cbz	r3, 80185e8 <_dtoa_r+0xb18>
 80185e0:	f10b 0308 	add.w	r3, fp, #8
 80185e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80185e6:	6013      	str	r3, [r2, #0]
 80185e8:	4658      	mov	r0, fp
 80185ea:	b017      	add	sp, #92	; 0x5c
 80185ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185f0:	9b06      	ldr	r3, [sp, #24]
 80185f2:	2b01      	cmp	r3, #1
 80185f4:	f77f ae35 	ble.w	8018262 <_dtoa_r+0x792>
 80185f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80185fa:	9307      	str	r3, [sp, #28]
 80185fc:	e649      	b.n	8018292 <_dtoa_r+0x7c2>
 80185fe:	9b02      	ldr	r3, [sp, #8]
 8018600:	2b00      	cmp	r3, #0
 8018602:	dc03      	bgt.n	801860c <_dtoa_r+0xb3c>
 8018604:	9b06      	ldr	r3, [sp, #24]
 8018606:	2b02      	cmp	r3, #2
 8018608:	f73f aecc 	bgt.w	80183a4 <_dtoa_r+0x8d4>
 801860c:	465d      	mov	r5, fp
 801860e:	4639      	mov	r1, r7
 8018610:	9804      	ldr	r0, [sp, #16]
 8018612:	f7ff f9cf 	bl	80179b4 <quorem>
 8018616:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801861a:	f805 8b01 	strb.w	r8, [r5], #1
 801861e:	9a02      	ldr	r2, [sp, #8]
 8018620:	eba5 030b 	sub.w	r3, r5, fp
 8018624:	429a      	cmp	r2, r3
 8018626:	ddb0      	ble.n	801858a <_dtoa_r+0xaba>
 8018628:	2300      	movs	r3, #0
 801862a:	220a      	movs	r2, #10
 801862c:	9904      	ldr	r1, [sp, #16]
 801862e:	4620      	mov	r0, r4
 8018630:	f000 fb9f 	bl	8018d72 <__multadd>
 8018634:	9004      	str	r0, [sp, #16]
 8018636:	e7ea      	b.n	801860e <_dtoa_r+0xb3e>
 8018638:	0801b538 	.word	0x0801b538
 801863c:	0801b5b8 	.word	0x0801b5b8

08018640 <rshift>:
 8018640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018642:	6906      	ldr	r6, [r0, #16]
 8018644:	114b      	asrs	r3, r1, #5
 8018646:	429e      	cmp	r6, r3
 8018648:	f100 0414 	add.w	r4, r0, #20
 801864c:	dd30      	ble.n	80186b0 <rshift+0x70>
 801864e:	f011 011f 	ands.w	r1, r1, #31
 8018652:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8018656:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801865a:	d108      	bne.n	801866e <rshift+0x2e>
 801865c:	4621      	mov	r1, r4
 801865e:	42b2      	cmp	r2, r6
 8018660:	460b      	mov	r3, r1
 8018662:	d211      	bcs.n	8018688 <rshift+0x48>
 8018664:	f852 3b04 	ldr.w	r3, [r2], #4
 8018668:	f841 3b04 	str.w	r3, [r1], #4
 801866c:	e7f7      	b.n	801865e <rshift+0x1e>
 801866e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8018672:	f1c1 0c20 	rsb	ip, r1, #32
 8018676:	40cd      	lsrs	r5, r1
 8018678:	3204      	adds	r2, #4
 801867a:	4623      	mov	r3, r4
 801867c:	42b2      	cmp	r2, r6
 801867e:	4617      	mov	r7, r2
 8018680:	d30c      	bcc.n	801869c <rshift+0x5c>
 8018682:	601d      	str	r5, [r3, #0]
 8018684:	b105      	cbz	r5, 8018688 <rshift+0x48>
 8018686:	3304      	adds	r3, #4
 8018688:	1b1a      	subs	r2, r3, r4
 801868a:	42a3      	cmp	r3, r4
 801868c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018690:	bf08      	it	eq
 8018692:	2300      	moveq	r3, #0
 8018694:	6102      	str	r2, [r0, #16]
 8018696:	bf08      	it	eq
 8018698:	6143      	streq	r3, [r0, #20]
 801869a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801869c:	683f      	ldr	r7, [r7, #0]
 801869e:	fa07 f70c 	lsl.w	r7, r7, ip
 80186a2:	433d      	orrs	r5, r7
 80186a4:	f843 5b04 	str.w	r5, [r3], #4
 80186a8:	f852 5b04 	ldr.w	r5, [r2], #4
 80186ac:	40cd      	lsrs	r5, r1
 80186ae:	e7e5      	b.n	801867c <rshift+0x3c>
 80186b0:	4623      	mov	r3, r4
 80186b2:	e7e9      	b.n	8018688 <rshift+0x48>

080186b4 <__hexdig_fun>:
 80186b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80186b8:	2b09      	cmp	r3, #9
 80186ba:	d802      	bhi.n	80186c2 <__hexdig_fun+0xe>
 80186bc:	3820      	subs	r0, #32
 80186be:	b2c0      	uxtb	r0, r0
 80186c0:	4770      	bx	lr
 80186c2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80186c6:	2b05      	cmp	r3, #5
 80186c8:	d801      	bhi.n	80186ce <__hexdig_fun+0x1a>
 80186ca:	3847      	subs	r0, #71	; 0x47
 80186cc:	e7f7      	b.n	80186be <__hexdig_fun+0xa>
 80186ce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80186d2:	2b05      	cmp	r3, #5
 80186d4:	d801      	bhi.n	80186da <__hexdig_fun+0x26>
 80186d6:	3827      	subs	r0, #39	; 0x27
 80186d8:	e7f1      	b.n	80186be <__hexdig_fun+0xa>
 80186da:	2000      	movs	r0, #0
 80186dc:	4770      	bx	lr

080186de <__gethex>:
 80186de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186e2:	b08b      	sub	sp, #44	; 0x2c
 80186e4:	468a      	mov	sl, r1
 80186e6:	9002      	str	r0, [sp, #8]
 80186e8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80186ea:	9306      	str	r3, [sp, #24]
 80186ec:	4690      	mov	r8, r2
 80186ee:	f000 fad0 	bl	8018c92 <__localeconv_l>
 80186f2:	6803      	ldr	r3, [r0, #0]
 80186f4:	9303      	str	r3, [sp, #12]
 80186f6:	4618      	mov	r0, r3
 80186f8:	f7e7 fd6a 	bl	80001d0 <strlen>
 80186fc:	9b03      	ldr	r3, [sp, #12]
 80186fe:	9001      	str	r0, [sp, #4]
 8018700:	4403      	add	r3, r0
 8018702:	f04f 0b00 	mov.w	fp, #0
 8018706:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801870a:	9307      	str	r3, [sp, #28]
 801870c:	f8da 3000 	ldr.w	r3, [sl]
 8018710:	3302      	adds	r3, #2
 8018712:	461f      	mov	r7, r3
 8018714:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018718:	2830      	cmp	r0, #48	; 0x30
 801871a:	d06c      	beq.n	80187f6 <__gethex+0x118>
 801871c:	f7ff ffca 	bl	80186b4 <__hexdig_fun>
 8018720:	4604      	mov	r4, r0
 8018722:	2800      	cmp	r0, #0
 8018724:	d16a      	bne.n	80187fc <__gethex+0x11e>
 8018726:	9a01      	ldr	r2, [sp, #4]
 8018728:	9903      	ldr	r1, [sp, #12]
 801872a:	4638      	mov	r0, r7
 801872c:	f001 f836 	bl	801979c <strncmp>
 8018730:	2800      	cmp	r0, #0
 8018732:	d166      	bne.n	8018802 <__gethex+0x124>
 8018734:	9b01      	ldr	r3, [sp, #4]
 8018736:	5cf8      	ldrb	r0, [r7, r3]
 8018738:	18fe      	adds	r6, r7, r3
 801873a:	f7ff ffbb 	bl	80186b4 <__hexdig_fun>
 801873e:	2800      	cmp	r0, #0
 8018740:	d062      	beq.n	8018808 <__gethex+0x12a>
 8018742:	4633      	mov	r3, r6
 8018744:	7818      	ldrb	r0, [r3, #0]
 8018746:	2830      	cmp	r0, #48	; 0x30
 8018748:	461f      	mov	r7, r3
 801874a:	f103 0301 	add.w	r3, r3, #1
 801874e:	d0f9      	beq.n	8018744 <__gethex+0x66>
 8018750:	f7ff ffb0 	bl	80186b4 <__hexdig_fun>
 8018754:	fab0 f580 	clz	r5, r0
 8018758:	096d      	lsrs	r5, r5, #5
 801875a:	4634      	mov	r4, r6
 801875c:	f04f 0b01 	mov.w	fp, #1
 8018760:	463a      	mov	r2, r7
 8018762:	4616      	mov	r6, r2
 8018764:	3201      	adds	r2, #1
 8018766:	7830      	ldrb	r0, [r6, #0]
 8018768:	f7ff ffa4 	bl	80186b4 <__hexdig_fun>
 801876c:	2800      	cmp	r0, #0
 801876e:	d1f8      	bne.n	8018762 <__gethex+0x84>
 8018770:	9a01      	ldr	r2, [sp, #4]
 8018772:	9903      	ldr	r1, [sp, #12]
 8018774:	4630      	mov	r0, r6
 8018776:	f001 f811 	bl	801979c <strncmp>
 801877a:	b950      	cbnz	r0, 8018792 <__gethex+0xb4>
 801877c:	b954      	cbnz	r4, 8018794 <__gethex+0xb6>
 801877e:	9b01      	ldr	r3, [sp, #4]
 8018780:	18f4      	adds	r4, r6, r3
 8018782:	4622      	mov	r2, r4
 8018784:	4616      	mov	r6, r2
 8018786:	3201      	adds	r2, #1
 8018788:	7830      	ldrb	r0, [r6, #0]
 801878a:	f7ff ff93 	bl	80186b4 <__hexdig_fun>
 801878e:	2800      	cmp	r0, #0
 8018790:	d1f8      	bne.n	8018784 <__gethex+0xa6>
 8018792:	b10c      	cbz	r4, 8018798 <__gethex+0xba>
 8018794:	1ba4      	subs	r4, r4, r6
 8018796:	00a4      	lsls	r4, r4, #2
 8018798:	7833      	ldrb	r3, [r6, #0]
 801879a:	2b50      	cmp	r3, #80	; 0x50
 801879c:	d001      	beq.n	80187a2 <__gethex+0xc4>
 801879e:	2b70      	cmp	r3, #112	; 0x70
 80187a0:	d140      	bne.n	8018824 <__gethex+0x146>
 80187a2:	7873      	ldrb	r3, [r6, #1]
 80187a4:	2b2b      	cmp	r3, #43	; 0x2b
 80187a6:	d031      	beq.n	801880c <__gethex+0x12e>
 80187a8:	2b2d      	cmp	r3, #45	; 0x2d
 80187aa:	d033      	beq.n	8018814 <__gethex+0x136>
 80187ac:	1c71      	adds	r1, r6, #1
 80187ae:	f04f 0900 	mov.w	r9, #0
 80187b2:	7808      	ldrb	r0, [r1, #0]
 80187b4:	f7ff ff7e 	bl	80186b4 <__hexdig_fun>
 80187b8:	1e43      	subs	r3, r0, #1
 80187ba:	b2db      	uxtb	r3, r3
 80187bc:	2b18      	cmp	r3, #24
 80187be:	d831      	bhi.n	8018824 <__gethex+0x146>
 80187c0:	f1a0 0210 	sub.w	r2, r0, #16
 80187c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80187c8:	f7ff ff74 	bl	80186b4 <__hexdig_fun>
 80187cc:	1e43      	subs	r3, r0, #1
 80187ce:	b2db      	uxtb	r3, r3
 80187d0:	2b18      	cmp	r3, #24
 80187d2:	d922      	bls.n	801881a <__gethex+0x13c>
 80187d4:	f1b9 0f00 	cmp.w	r9, #0
 80187d8:	d000      	beq.n	80187dc <__gethex+0xfe>
 80187da:	4252      	negs	r2, r2
 80187dc:	4414      	add	r4, r2
 80187de:	f8ca 1000 	str.w	r1, [sl]
 80187e2:	b30d      	cbz	r5, 8018828 <__gethex+0x14a>
 80187e4:	f1bb 0f00 	cmp.w	fp, #0
 80187e8:	bf0c      	ite	eq
 80187ea:	2706      	moveq	r7, #6
 80187ec:	2700      	movne	r7, #0
 80187ee:	4638      	mov	r0, r7
 80187f0:	b00b      	add	sp, #44	; 0x2c
 80187f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187f6:	f10b 0b01 	add.w	fp, fp, #1
 80187fa:	e78a      	b.n	8018712 <__gethex+0x34>
 80187fc:	2500      	movs	r5, #0
 80187fe:	462c      	mov	r4, r5
 8018800:	e7ae      	b.n	8018760 <__gethex+0x82>
 8018802:	463e      	mov	r6, r7
 8018804:	2501      	movs	r5, #1
 8018806:	e7c7      	b.n	8018798 <__gethex+0xba>
 8018808:	4604      	mov	r4, r0
 801880a:	e7fb      	b.n	8018804 <__gethex+0x126>
 801880c:	f04f 0900 	mov.w	r9, #0
 8018810:	1cb1      	adds	r1, r6, #2
 8018812:	e7ce      	b.n	80187b2 <__gethex+0xd4>
 8018814:	f04f 0901 	mov.w	r9, #1
 8018818:	e7fa      	b.n	8018810 <__gethex+0x132>
 801881a:	230a      	movs	r3, #10
 801881c:	fb03 0202 	mla	r2, r3, r2, r0
 8018820:	3a10      	subs	r2, #16
 8018822:	e7cf      	b.n	80187c4 <__gethex+0xe6>
 8018824:	4631      	mov	r1, r6
 8018826:	e7da      	b.n	80187de <__gethex+0x100>
 8018828:	1bf3      	subs	r3, r6, r7
 801882a:	3b01      	subs	r3, #1
 801882c:	4629      	mov	r1, r5
 801882e:	2b07      	cmp	r3, #7
 8018830:	dc49      	bgt.n	80188c6 <__gethex+0x1e8>
 8018832:	9802      	ldr	r0, [sp, #8]
 8018834:	f000 fa52 	bl	8018cdc <_Balloc>
 8018838:	9b01      	ldr	r3, [sp, #4]
 801883a:	f100 0914 	add.w	r9, r0, #20
 801883e:	f04f 0b00 	mov.w	fp, #0
 8018842:	f1c3 0301 	rsb	r3, r3, #1
 8018846:	4605      	mov	r5, r0
 8018848:	f8cd 9010 	str.w	r9, [sp, #16]
 801884c:	46da      	mov	sl, fp
 801884e:	9308      	str	r3, [sp, #32]
 8018850:	42b7      	cmp	r7, r6
 8018852:	d33b      	bcc.n	80188cc <__gethex+0x1ee>
 8018854:	9804      	ldr	r0, [sp, #16]
 8018856:	f840 ab04 	str.w	sl, [r0], #4
 801885a:	eba0 0009 	sub.w	r0, r0, r9
 801885e:	1080      	asrs	r0, r0, #2
 8018860:	6128      	str	r0, [r5, #16]
 8018862:	0147      	lsls	r7, r0, #5
 8018864:	4650      	mov	r0, sl
 8018866:	f000 fafd 	bl	8018e64 <__hi0bits>
 801886a:	f8d8 6000 	ldr.w	r6, [r8]
 801886e:	1a3f      	subs	r7, r7, r0
 8018870:	42b7      	cmp	r7, r6
 8018872:	dd64      	ble.n	801893e <__gethex+0x260>
 8018874:	1bbf      	subs	r7, r7, r6
 8018876:	4639      	mov	r1, r7
 8018878:	4628      	mov	r0, r5
 801887a:	f000 fe0d 	bl	8019498 <__any_on>
 801887e:	4682      	mov	sl, r0
 8018880:	b178      	cbz	r0, 80188a2 <__gethex+0x1c4>
 8018882:	1e7b      	subs	r3, r7, #1
 8018884:	1159      	asrs	r1, r3, #5
 8018886:	f003 021f 	and.w	r2, r3, #31
 801888a:	f04f 0a01 	mov.w	sl, #1
 801888e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018892:	fa0a f202 	lsl.w	r2, sl, r2
 8018896:	420a      	tst	r2, r1
 8018898:	d003      	beq.n	80188a2 <__gethex+0x1c4>
 801889a:	4553      	cmp	r3, sl
 801889c:	dc46      	bgt.n	801892c <__gethex+0x24e>
 801889e:	f04f 0a02 	mov.w	sl, #2
 80188a2:	4639      	mov	r1, r7
 80188a4:	4628      	mov	r0, r5
 80188a6:	f7ff fecb 	bl	8018640 <rshift>
 80188aa:	443c      	add	r4, r7
 80188ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80188b0:	42a3      	cmp	r3, r4
 80188b2:	da52      	bge.n	801895a <__gethex+0x27c>
 80188b4:	4629      	mov	r1, r5
 80188b6:	9802      	ldr	r0, [sp, #8]
 80188b8:	f000 fa44 	bl	8018d44 <_Bfree>
 80188bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80188be:	2300      	movs	r3, #0
 80188c0:	6013      	str	r3, [r2, #0]
 80188c2:	27a3      	movs	r7, #163	; 0xa3
 80188c4:	e793      	b.n	80187ee <__gethex+0x110>
 80188c6:	3101      	adds	r1, #1
 80188c8:	105b      	asrs	r3, r3, #1
 80188ca:	e7b0      	b.n	801882e <__gethex+0x150>
 80188cc:	1e73      	subs	r3, r6, #1
 80188ce:	9305      	str	r3, [sp, #20]
 80188d0:	9a07      	ldr	r2, [sp, #28]
 80188d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80188d6:	4293      	cmp	r3, r2
 80188d8:	d018      	beq.n	801890c <__gethex+0x22e>
 80188da:	f1bb 0f20 	cmp.w	fp, #32
 80188de:	d107      	bne.n	80188f0 <__gethex+0x212>
 80188e0:	9b04      	ldr	r3, [sp, #16]
 80188e2:	f8c3 a000 	str.w	sl, [r3]
 80188e6:	3304      	adds	r3, #4
 80188e8:	f04f 0a00 	mov.w	sl, #0
 80188ec:	9304      	str	r3, [sp, #16]
 80188ee:	46d3      	mov	fp, sl
 80188f0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80188f4:	f7ff fede 	bl	80186b4 <__hexdig_fun>
 80188f8:	f000 000f 	and.w	r0, r0, #15
 80188fc:	fa00 f00b 	lsl.w	r0, r0, fp
 8018900:	ea4a 0a00 	orr.w	sl, sl, r0
 8018904:	f10b 0b04 	add.w	fp, fp, #4
 8018908:	9b05      	ldr	r3, [sp, #20]
 801890a:	e00d      	b.n	8018928 <__gethex+0x24a>
 801890c:	9b05      	ldr	r3, [sp, #20]
 801890e:	9a08      	ldr	r2, [sp, #32]
 8018910:	4413      	add	r3, r2
 8018912:	42bb      	cmp	r3, r7
 8018914:	d3e1      	bcc.n	80188da <__gethex+0x1fc>
 8018916:	4618      	mov	r0, r3
 8018918:	9a01      	ldr	r2, [sp, #4]
 801891a:	9903      	ldr	r1, [sp, #12]
 801891c:	9309      	str	r3, [sp, #36]	; 0x24
 801891e:	f000 ff3d 	bl	801979c <strncmp>
 8018922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018924:	2800      	cmp	r0, #0
 8018926:	d1d8      	bne.n	80188da <__gethex+0x1fc>
 8018928:	461e      	mov	r6, r3
 801892a:	e791      	b.n	8018850 <__gethex+0x172>
 801892c:	1eb9      	subs	r1, r7, #2
 801892e:	4628      	mov	r0, r5
 8018930:	f000 fdb2 	bl	8019498 <__any_on>
 8018934:	2800      	cmp	r0, #0
 8018936:	d0b2      	beq.n	801889e <__gethex+0x1c0>
 8018938:	f04f 0a03 	mov.w	sl, #3
 801893c:	e7b1      	b.n	80188a2 <__gethex+0x1c4>
 801893e:	da09      	bge.n	8018954 <__gethex+0x276>
 8018940:	1bf7      	subs	r7, r6, r7
 8018942:	4629      	mov	r1, r5
 8018944:	463a      	mov	r2, r7
 8018946:	9802      	ldr	r0, [sp, #8]
 8018948:	f000 fbc8 	bl	80190dc <__lshift>
 801894c:	1be4      	subs	r4, r4, r7
 801894e:	4605      	mov	r5, r0
 8018950:	f100 0914 	add.w	r9, r0, #20
 8018954:	f04f 0a00 	mov.w	sl, #0
 8018958:	e7a8      	b.n	80188ac <__gethex+0x1ce>
 801895a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801895e:	42a0      	cmp	r0, r4
 8018960:	dd6a      	ble.n	8018a38 <__gethex+0x35a>
 8018962:	1b04      	subs	r4, r0, r4
 8018964:	42a6      	cmp	r6, r4
 8018966:	dc2e      	bgt.n	80189c6 <__gethex+0x2e8>
 8018968:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801896c:	2b02      	cmp	r3, #2
 801896e:	d022      	beq.n	80189b6 <__gethex+0x2d8>
 8018970:	2b03      	cmp	r3, #3
 8018972:	d024      	beq.n	80189be <__gethex+0x2e0>
 8018974:	2b01      	cmp	r3, #1
 8018976:	d115      	bne.n	80189a4 <__gethex+0x2c6>
 8018978:	42a6      	cmp	r6, r4
 801897a:	d113      	bne.n	80189a4 <__gethex+0x2c6>
 801897c:	2e01      	cmp	r6, #1
 801897e:	dc0b      	bgt.n	8018998 <__gethex+0x2ba>
 8018980:	9a06      	ldr	r2, [sp, #24]
 8018982:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018986:	6013      	str	r3, [r2, #0]
 8018988:	2301      	movs	r3, #1
 801898a:	612b      	str	r3, [r5, #16]
 801898c:	f8c9 3000 	str.w	r3, [r9]
 8018990:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018992:	2762      	movs	r7, #98	; 0x62
 8018994:	601d      	str	r5, [r3, #0]
 8018996:	e72a      	b.n	80187ee <__gethex+0x110>
 8018998:	1e71      	subs	r1, r6, #1
 801899a:	4628      	mov	r0, r5
 801899c:	f000 fd7c 	bl	8019498 <__any_on>
 80189a0:	2800      	cmp	r0, #0
 80189a2:	d1ed      	bne.n	8018980 <__gethex+0x2a2>
 80189a4:	4629      	mov	r1, r5
 80189a6:	9802      	ldr	r0, [sp, #8]
 80189a8:	f000 f9cc 	bl	8018d44 <_Bfree>
 80189ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80189ae:	2300      	movs	r3, #0
 80189b0:	6013      	str	r3, [r2, #0]
 80189b2:	2750      	movs	r7, #80	; 0x50
 80189b4:	e71b      	b.n	80187ee <__gethex+0x110>
 80189b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	d0e1      	beq.n	8018980 <__gethex+0x2a2>
 80189bc:	e7f2      	b.n	80189a4 <__gethex+0x2c6>
 80189be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d1dd      	bne.n	8018980 <__gethex+0x2a2>
 80189c4:	e7ee      	b.n	80189a4 <__gethex+0x2c6>
 80189c6:	1e67      	subs	r7, r4, #1
 80189c8:	f1ba 0f00 	cmp.w	sl, #0
 80189cc:	d131      	bne.n	8018a32 <__gethex+0x354>
 80189ce:	b127      	cbz	r7, 80189da <__gethex+0x2fc>
 80189d0:	4639      	mov	r1, r7
 80189d2:	4628      	mov	r0, r5
 80189d4:	f000 fd60 	bl	8019498 <__any_on>
 80189d8:	4682      	mov	sl, r0
 80189da:	117a      	asrs	r2, r7, #5
 80189dc:	2301      	movs	r3, #1
 80189de:	f007 071f 	and.w	r7, r7, #31
 80189e2:	fa03 f707 	lsl.w	r7, r3, r7
 80189e6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80189ea:	4621      	mov	r1, r4
 80189ec:	421f      	tst	r7, r3
 80189ee:	4628      	mov	r0, r5
 80189f0:	bf18      	it	ne
 80189f2:	f04a 0a02 	orrne.w	sl, sl, #2
 80189f6:	1b36      	subs	r6, r6, r4
 80189f8:	f7ff fe22 	bl	8018640 <rshift>
 80189fc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018a00:	2702      	movs	r7, #2
 8018a02:	f1ba 0f00 	cmp.w	sl, #0
 8018a06:	d048      	beq.n	8018a9a <__gethex+0x3bc>
 8018a08:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018a0c:	2b02      	cmp	r3, #2
 8018a0e:	d015      	beq.n	8018a3c <__gethex+0x35e>
 8018a10:	2b03      	cmp	r3, #3
 8018a12:	d017      	beq.n	8018a44 <__gethex+0x366>
 8018a14:	2b01      	cmp	r3, #1
 8018a16:	d109      	bne.n	8018a2c <__gethex+0x34e>
 8018a18:	f01a 0f02 	tst.w	sl, #2
 8018a1c:	d006      	beq.n	8018a2c <__gethex+0x34e>
 8018a1e:	f8d9 3000 	ldr.w	r3, [r9]
 8018a22:	ea4a 0a03 	orr.w	sl, sl, r3
 8018a26:	f01a 0f01 	tst.w	sl, #1
 8018a2a:	d10e      	bne.n	8018a4a <__gethex+0x36c>
 8018a2c:	f047 0710 	orr.w	r7, r7, #16
 8018a30:	e033      	b.n	8018a9a <__gethex+0x3bc>
 8018a32:	f04f 0a01 	mov.w	sl, #1
 8018a36:	e7d0      	b.n	80189da <__gethex+0x2fc>
 8018a38:	2701      	movs	r7, #1
 8018a3a:	e7e2      	b.n	8018a02 <__gethex+0x324>
 8018a3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018a3e:	f1c3 0301 	rsb	r3, r3, #1
 8018a42:	9315      	str	r3, [sp, #84]	; 0x54
 8018a44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d0f0      	beq.n	8018a2c <__gethex+0x34e>
 8018a4a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8018a4e:	f105 0314 	add.w	r3, r5, #20
 8018a52:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8018a56:	eb03 010a 	add.w	r1, r3, sl
 8018a5a:	f04f 0c00 	mov.w	ip, #0
 8018a5e:	4618      	mov	r0, r3
 8018a60:	f853 2b04 	ldr.w	r2, [r3], #4
 8018a64:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018a68:	d01c      	beq.n	8018aa4 <__gethex+0x3c6>
 8018a6a:	3201      	adds	r2, #1
 8018a6c:	6002      	str	r2, [r0, #0]
 8018a6e:	2f02      	cmp	r7, #2
 8018a70:	f105 0314 	add.w	r3, r5, #20
 8018a74:	d138      	bne.n	8018ae8 <__gethex+0x40a>
 8018a76:	f8d8 2000 	ldr.w	r2, [r8]
 8018a7a:	3a01      	subs	r2, #1
 8018a7c:	42b2      	cmp	r2, r6
 8018a7e:	d10a      	bne.n	8018a96 <__gethex+0x3b8>
 8018a80:	1171      	asrs	r1, r6, #5
 8018a82:	2201      	movs	r2, #1
 8018a84:	f006 061f 	and.w	r6, r6, #31
 8018a88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018a8c:	fa02 f606 	lsl.w	r6, r2, r6
 8018a90:	421e      	tst	r6, r3
 8018a92:	bf18      	it	ne
 8018a94:	4617      	movne	r7, r2
 8018a96:	f047 0720 	orr.w	r7, r7, #32
 8018a9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018a9c:	601d      	str	r5, [r3, #0]
 8018a9e:	9b06      	ldr	r3, [sp, #24]
 8018aa0:	601c      	str	r4, [r3, #0]
 8018aa2:	e6a4      	b.n	80187ee <__gethex+0x110>
 8018aa4:	4299      	cmp	r1, r3
 8018aa6:	f843 cc04 	str.w	ip, [r3, #-4]
 8018aaa:	d8d8      	bhi.n	8018a5e <__gethex+0x380>
 8018aac:	68ab      	ldr	r3, [r5, #8]
 8018aae:	4599      	cmp	r9, r3
 8018ab0:	db12      	blt.n	8018ad8 <__gethex+0x3fa>
 8018ab2:	6869      	ldr	r1, [r5, #4]
 8018ab4:	9802      	ldr	r0, [sp, #8]
 8018ab6:	3101      	adds	r1, #1
 8018ab8:	f000 f910 	bl	8018cdc <_Balloc>
 8018abc:	692a      	ldr	r2, [r5, #16]
 8018abe:	3202      	adds	r2, #2
 8018ac0:	f105 010c 	add.w	r1, r5, #12
 8018ac4:	4683      	mov	fp, r0
 8018ac6:	0092      	lsls	r2, r2, #2
 8018ac8:	300c      	adds	r0, #12
 8018aca:	f7fd f947 	bl	8015d5c <memcpy>
 8018ace:	4629      	mov	r1, r5
 8018ad0:	9802      	ldr	r0, [sp, #8]
 8018ad2:	f000 f937 	bl	8018d44 <_Bfree>
 8018ad6:	465d      	mov	r5, fp
 8018ad8:	692b      	ldr	r3, [r5, #16]
 8018ada:	1c5a      	adds	r2, r3, #1
 8018adc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018ae0:	612a      	str	r2, [r5, #16]
 8018ae2:	2201      	movs	r2, #1
 8018ae4:	615a      	str	r2, [r3, #20]
 8018ae6:	e7c2      	b.n	8018a6e <__gethex+0x390>
 8018ae8:	692a      	ldr	r2, [r5, #16]
 8018aea:	454a      	cmp	r2, r9
 8018aec:	dd0b      	ble.n	8018b06 <__gethex+0x428>
 8018aee:	2101      	movs	r1, #1
 8018af0:	4628      	mov	r0, r5
 8018af2:	f7ff fda5 	bl	8018640 <rshift>
 8018af6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018afa:	3401      	adds	r4, #1
 8018afc:	42a3      	cmp	r3, r4
 8018afe:	f6ff aed9 	blt.w	80188b4 <__gethex+0x1d6>
 8018b02:	2701      	movs	r7, #1
 8018b04:	e7c7      	b.n	8018a96 <__gethex+0x3b8>
 8018b06:	f016 061f 	ands.w	r6, r6, #31
 8018b0a:	d0fa      	beq.n	8018b02 <__gethex+0x424>
 8018b0c:	449a      	add	sl, r3
 8018b0e:	f1c6 0620 	rsb	r6, r6, #32
 8018b12:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018b16:	f000 f9a5 	bl	8018e64 <__hi0bits>
 8018b1a:	42b0      	cmp	r0, r6
 8018b1c:	dbe7      	blt.n	8018aee <__gethex+0x410>
 8018b1e:	e7f0      	b.n	8018b02 <__gethex+0x424>

08018b20 <L_shift>:
 8018b20:	f1c2 0208 	rsb	r2, r2, #8
 8018b24:	0092      	lsls	r2, r2, #2
 8018b26:	b570      	push	{r4, r5, r6, lr}
 8018b28:	f1c2 0620 	rsb	r6, r2, #32
 8018b2c:	6843      	ldr	r3, [r0, #4]
 8018b2e:	6804      	ldr	r4, [r0, #0]
 8018b30:	fa03 f506 	lsl.w	r5, r3, r6
 8018b34:	432c      	orrs	r4, r5
 8018b36:	40d3      	lsrs	r3, r2
 8018b38:	6004      	str	r4, [r0, #0]
 8018b3a:	f840 3f04 	str.w	r3, [r0, #4]!
 8018b3e:	4288      	cmp	r0, r1
 8018b40:	d3f4      	bcc.n	8018b2c <L_shift+0xc>
 8018b42:	bd70      	pop	{r4, r5, r6, pc}

08018b44 <__match>:
 8018b44:	b530      	push	{r4, r5, lr}
 8018b46:	6803      	ldr	r3, [r0, #0]
 8018b48:	3301      	adds	r3, #1
 8018b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018b4e:	b914      	cbnz	r4, 8018b56 <__match+0x12>
 8018b50:	6003      	str	r3, [r0, #0]
 8018b52:	2001      	movs	r0, #1
 8018b54:	bd30      	pop	{r4, r5, pc}
 8018b56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018b5a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018b5e:	2d19      	cmp	r5, #25
 8018b60:	bf98      	it	ls
 8018b62:	3220      	addls	r2, #32
 8018b64:	42a2      	cmp	r2, r4
 8018b66:	d0f0      	beq.n	8018b4a <__match+0x6>
 8018b68:	2000      	movs	r0, #0
 8018b6a:	e7f3      	b.n	8018b54 <__match+0x10>

08018b6c <__hexnan>:
 8018b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b70:	680b      	ldr	r3, [r1, #0]
 8018b72:	6801      	ldr	r1, [r0, #0]
 8018b74:	115f      	asrs	r7, r3, #5
 8018b76:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8018b7a:	f013 031f 	ands.w	r3, r3, #31
 8018b7e:	b087      	sub	sp, #28
 8018b80:	bf18      	it	ne
 8018b82:	3704      	addne	r7, #4
 8018b84:	2500      	movs	r5, #0
 8018b86:	1f3e      	subs	r6, r7, #4
 8018b88:	4682      	mov	sl, r0
 8018b8a:	4690      	mov	r8, r2
 8018b8c:	9301      	str	r3, [sp, #4]
 8018b8e:	f847 5c04 	str.w	r5, [r7, #-4]
 8018b92:	46b1      	mov	r9, r6
 8018b94:	4634      	mov	r4, r6
 8018b96:	9502      	str	r5, [sp, #8]
 8018b98:	46ab      	mov	fp, r5
 8018b9a:	784a      	ldrb	r2, [r1, #1]
 8018b9c:	1c4b      	adds	r3, r1, #1
 8018b9e:	9303      	str	r3, [sp, #12]
 8018ba0:	b342      	cbz	r2, 8018bf4 <__hexnan+0x88>
 8018ba2:	4610      	mov	r0, r2
 8018ba4:	9105      	str	r1, [sp, #20]
 8018ba6:	9204      	str	r2, [sp, #16]
 8018ba8:	f7ff fd84 	bl	80186b4 <__hexdig_fun>
 8018bac:	2800      	cmp	r0, #0
 8018bae:	d143      	bne.n	8018c38 <__hexnan+0xcc>
 8018bb0:	9a04      	ldr	r2, [sp, #16]
 8018bb2:	9905      	ldr	r1, [sp, #20]
 8018bb4:	2a20      	cmp	r2, #32
 8018bb6:	d818      	bhi.n	8018bea <__hexnan+0x7e>
 8018bb8:	9b02      	ldr	r3, [sp, #8]
 8018bba:	459b      	cmp	fp, r3
 8018bbc:	dd13      	ble.n	8018be6 <__hexnan+0x7a>
 8018bbe:	454c      	cmp	r4, r9
 8018bc0:	d206      	bcs.n	8018bd0 <__hexnan+0x64>
 8018bc2:	2d07      	cmp	r5, #7
 8018bc4:	dc04      	bgt.n	8018bd0 <__hexnan+0x64>
 8018bc6:	462a      	mov	r2, r5
 8018bc8:	4649      	mov	r1, r9
 8018bca:	4620      	mov	r0, r4
 8018bcc:	f7ff ffa8 	bl	8018b20 <L_shift>
 8018bd0:	4544      	cmp	r4, r8
 8018bd2:	d944      	bls.n	8018c5e <__hexnan+0xf2>
 8018bd4:	2300      	movs	r3, #0
 8018bd6:	f1a4 0904 	sub.w	r9, r4, #4
 8018bda:	f844 3c04 	str.w	r3, [r4, #-4]
 8018bde:	f8cd b008 	str.w	fp, [sp, #8]
 8018be2:	464c      	mov	r4, r9
 8018be4:	461d      	mov	r5, r3
 8018be6:	9903      	ldr	r1, [sp, #12]
 8018be8:	e7d7      	b.n	8018b9a <__hexnan+0x2e>
 8018bea:	2a29      	cmp	r2, #41	; 0x29
 8018bec:	d14a      	bne.n	8018c84 <__hexnan+0x118>
 8018bee:	3102      	adds	r1, #2
 8018bf0:	f8ca 1000 	str.w	r1, [sl]
 8018bf4:	f1bb 0f00 	cmp.w	fp, #0
 8018bf8:	d044      	beq.n	8018c84 <__hexnan+0x118>
 8018bfa:	454c      	cmp	r4, r9
 8018bfc:	d206      	bcs.n	8018c0c <__hexnan+0xa0>
 8018bfe:	2d07      	cmp	r5, #7
 8018c00:	dc04      	bgt.n	8018c0c <__hexnan+0xa0>
 8018c02:	462a      	mov	r2, r5
 8018c04:	4649      	mov	r1, r9
 8018c06:	4620      	mov	r0, r4
 8018c08:	f7ff ff8a 	bl	8018b20 <L_shift>
 8018c0c:	4544      	cmp	r4, r8
 8018c0e:	d928      	bls.n	8018c62 <__hexnan+0xf6>
 8018c10:	4643      	mov	r3, r8
 8018c12:	f854 2b04 	ldr.w	r2, [r4], #4
 8018c16:	f843 2b04 	str.w	r2, [r3], #4
 8018c1a:	42a6      	cmp	r6, r4
 8018c1c:	d2f9      	bcs.n	8018c12 <__hexnan+0xa6>
 8018c1e:	2200      	movs	r2, #0
 8018c20:	f843 2b04 	str.w	r2, [r3], #4
 8018c24:	429e      	cmp	r6, r3
 8018c26:	d2fb      	bcs.n	8018c20 <__hexnan+0xb4>
 8018c28:	6833      	ldr	r3, [r6, #0]
 8018c2a:	b91b      	cbnz	r3, 8018c34 <__hexnan+0xc8>
 8018c2c:	4546      	cmp	r6, r8
 8018c2e:	d127      	bne.n	8018c80 <__hexnan+0x114>
 8018c30:	2301      	movs	r3, #1
 8018c32:	6033      	str	r3, [r6, #0]
 8018c34:	2005      	movs	r0, #5
 8018c36:	e026      	b.n	8018c86 <__hexnan+0x11a>
 8018c38:	3501      	adds	r5, #1
 8018c3a:	2d08      	cmp	r5, #8
 8018c3c:	f10b 0b01 	add.w	fp, fp, #1
 8018c40:	dd06      	ble.n	8018c50 <__hexnan+0xe4>
 8018c42:	4544      	cmp	r4, r8
 8018c44:	d9cf      	bls.n	8018be6 <__hexnan+0x7a>
 8018c46:	2300      	movs	r3, #0
 8018c48:	f844 3c04 	str.w	r3, [r4, #-4]
 8018c4c:	2501      	movs	r5, #1
 8018c4e:	3c04      	subs	r4, #4
 8018c50:	6822      	ldr	r2, [r4, #0]
 8018c52:	f000 000f 	and.w	r0, r0, #15
 8018c56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018c5a:	6020      	str	r0, [r4, #0]
 8018c5c:	e7c3      	b.n	8018be6 <__hexnan+0x7a>
 8018c5e:	2508      	movs	r5, #8
 8018c60:	e7c1      	b.n	8018be6 <__hexnan+0x7a>
 8018c62:	9b01      	ldr	r3, [sp, #4]
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d0df      	beq.n	8018c28 <__hexnan+0xbc>
 8018c68:	f04f 32ff 	mov.w	r2, #4294967295
 8018c6c:	f1c3 0320 	rsb	r3, r3, #32
 8018c70:	fa22 f303 	lsr.w	r3, r2, r3
 8018c74:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018c78:	401a      	ands	r2, r3
 8018c7a:	f847 2c04 	str.w	r2, [r7, #-4]
 8018c7e:	e7d3      	b.n	8018c28 <__hexnan+0xbc>
 8018c80:	3e04      	subs	r6, #4
 8018c82:	e7d1      	b.n	8018c28 <__hexnan+0xbc>
 8018c84:	2004      	movs	r0, #4
 8018c86:	b007      	add	sp, #28
 8018c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018c8c <__locale_ctype_ptr_l>:
 8018c8c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018c90:	4770      	bx	lr

08018c92 <__localeconv_l>:
 8018c92:	30f0      	adds	r0, #240	; 0xf0
 8018c94:	4770      	bx	lr
	...

08018c98 <_localeconv_r>:
 8018c98:	4b04      	ldr	r3, [pc, #16]	; (8018cac <_localeconv_r+0x14>)
 8018c9a:	681b      	ldr	r3, [r3, #0]
 8018c9c:	6a18      	ldr	r0, [r3, #32]
 8018c9e:	4b04      	ldr	r3, [pc, #16]	; (8018cb0 <_localeconv_r+0x18>)
 8018ca0:	2800      	cmp	r0, #0
 8018ca2:	bf08      	it	eq
 8018ca4:	4618      	moveq	r0, r3
 8018ca6:	30f0      	adds	r0, #240	; 0xf0
 8018ca8:	4770      	bx	lr
 8018caa:	bf00      	nop
 8018cac:	2000220c 	.word	0x2000220c
 8018cb0:	20002270 	.word	0x20002270

08018cb4 <__ascii_mbtowc>:
 8018cb4:	b082      	sub	sp, #8
 8018cb6:	b901      	cbnz	r1, 8018cba <__ascii_mbtowc+0x6>
 8018cb8:	a901      	add	r1, sp, #4
 8018cba:	b142      	cbz	r2, 8018cce <__ascii_mbtowc+0x1a>
 8018cbc:	b14b      	cbz	r3, 8018cd2 <__ascii_mbtowc+0x1e>
 8018cbe:	7813      	ldrb	r3, [r2, #0]
 8018cc0:	600b      	str	r3, [r1, #0]
 8018cc2:	7812      	ldrb	r2, [r2, #0]
 8018cc4:	1c10      	adds	r0, r2, #0
 8018cc6:	bf18      	it	ne
 8018cc8:	2001      	movne	r0, #1
 8018cca:	b002      	add	sp, #8
 8018ccc:	4770      	bx	lr
 8018cce:	4610      	mov	r0, r2
 8018cd0:	e7fb      	b.n	8018cca <__ascii_mbtowc+0x16>
 8018cd2:	f06f 0001 	mvn.w	r0, #1
 8018cd6:	e7f8      	b.n	8018cca <__ascii_mbtowc+0x16>

08018cd8 <__malloc_lock>:
 8018cd8:	4770      	bx	lr

08018cda <__malloc_unlock>:
 8018cda:	4770      	bx	lr

08018cdc <_Balloc>:
 8018cdc:	b570      	push	{r4, r5, r6, lr}
 8018cde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018ce0:	4604      	mov	r4, r0
 8018ce2:	460e      	mov	r6, r1
 8018ce4:	b93d      	cbnz	r5, 8018cf6 <_Balloc+0x1a>
 8018ce6:	2010      	movs	r0, #16
 8018ce8:	f7fd f828 	bl	8015d3c <malloc>
 8018cec:	6260      	str	r0, [r4, #36]	; 0x24
 8018cee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018cf2:	6005      	str	r5, [r0, #0]
 8018cf4:	60c5      	str	r5, [r0, #12]
 8018cf6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018cf8:	68eb      	ldr	r3, [r5, #12]
 8018cfa:	b183      	cbz	r3, 8018d1e <_Balloc+0x42>
 8018cfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018cfe:	68db      	ldr	r3, [r3, #12]
 8018d00:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018d04:	b9b8      	cbnz	r0, 8018d36 <_Balloc+0x5a>
 8018d06:	2101      	movs	r1, #1
 8018d08:	fa01 f506 	lsl.w	r5, r1, r6
 8018d0c:	1d6a      	adds	r2, r5, #5
 8018d0e:	0092      	lsls	r2, r2, #2
 8018d10:	4620      	mov	r0, r4
 8018d12:	f000 fbe2 	bl	80194da <_calloc_r>
 8018d16:	b160      	cbz	r0, 8018d32 <_Balloc+0x56>
 8018d18:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8018d1c:	e00e      	b.n	8018d3c <_Balloc+0x60>
 8018d1e:	2221      	movs	r2, #33	; 0x21
 8018d20:	2104      	movs	r1, #4
 8018d22:	4620      	mov	r0, r4
 8018d24:	f000 fbd9 	bl	80194da <_calloc_r>
 8018d28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018d2a:	60e8      	str	r0, [r5, #12]
 8018d2c:	68db      	ldr	r3, [r3, #12]
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d1e4      	bne.n	8018cfc <_Balloc+0x20>
 8018d32:	2000      	movs	r0, #0
 8018d34:	bd70      	pop	{r4, r5, r6, pc}
 8018d36:	6802      	ldr	r2, [r0, #0]
 8018d38:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018d3c:	2300      	movs	r3, #0
 8018d3e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018d42:	e7f7      	b.n	8018d34 <_Balloc+0x58>

08018d44 <_Bfree>:
 8018d44:	b570      	push	{r4, r5, r6, lr}
 8018d46:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018d48:	4606      	mov	r6, r0
 8018d4a:	460d      	mov	r5, r1
 8018d4c:	b93c      	cbnz	r4, 8018d5e <_Bfree+0x1a>
 8018d4e:	2010      	movs	r0, #16
 8018d50:	f7fc fff4 	bl	8015d3c <malloc>
 8018d54:	6270      	str	r0, [r6, #36]	; 0x24
 8018d56:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018d5a:	6004      	str	r4, [r0, #0]
 8018d5c:	60c4      	str	r4, [r0, #12]
 8018d5e:	b13d      	cbz	r5, 8018d70 <_Bfree+0x2c>
 8018d60:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018d62:	686a      	ldr	r2, [r5, #4]
 8018d64:	68db      	ldr	r3, [r3, #12]
 8018d66:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018d6a:	6029      	str	r1, [r5, #0]
 8018d6c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018d70:	bd70      	pop	{r4, r5, r6, pc}

08018d72 <__multadd>:
 8018d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d76:	690d      	ldr	r5, [r1, #16]
 8018d78:	461f      	mov	r7, r3
 8018d7a:	4606      	mov	r6, r0
 8018d7c:	460c      	mov	r4, r1
 8018d7e:	f101 0c14 	add.w	ip, r1, #20
 8018d82:	2300      	movs	r3, #0
 8018d84:	f8dc 0000 	ldr.w	r0, [ip]
 8018d88:	b281      	uxth	r1, r0
 8018d8a:	fb02 7101 	mla	r1, r2, r1, r7
 8018d8e:	0c0f      	lsrs	r7, r1, #16
 8018d90:	0c00      	lsrs	r0, r0, #16
 8018d92:	fb02 7000 	mla	r0, r2, r0, r7
 8018d96:	b289      	uxth	r1, r1
 8018d98:	3301      	adds	r3, #1
 8018d9a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018d9e:	429d      	cmp	r5, r3
 8018da0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018da4:	f84c 1b04 	str.w	r1, [ip], #4
 8018da8:	dcec      	bgt.n	8018d84 <__multadd+0x12>
 8018daa:	b1d7      	cbz	r7, 8018de2 <__multadd+0x70>
 8018dac:	68a3      	ldr	r3, [r4, #8]
 8018dae:	42ab      	cmp	r3, r5
 8018db0:	dc12      	bgt.n	8018dd8 <__multadd+0x66>
 8018db2:	6861      	ldr	r1, [r4, #4]
 8018db4:	4630      	mov	r0, r6
 8018db6:	3101      	adds	r1, #1
 8018db8:	f7ff ff90 	bl	8018cdc <_Balloc>
 8018dbc:	6922      	ldr	r2, [r4, #16]
 8018dbe:	3202      	adds	r2, #2
 8018dc0:	f104 010c 	add.w	r1, r4, #12
 8018dc4:	4680      	mov	r8, r0
 8018dc6:	0092      	lsls	r2, r2, #2
 8018dc8:	300c      	adds	r0, #12
 8018dca:	f7fc ffc7 	bl	8015d5c <memcpy>
 8018dce:	4621      	mov	r1, r4
 8018dd0:	4630      	mov	r0, r6
 8018dd2:	f7ff ffb7 	bl	8018d44 <_Bfree>
 8018dd6:	4644      	mov	r4, r8
 8018dd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018ddc:	3501      	adds	r5, #1
 8018dde:	615f      	str	r7, [r3, #20]
 8018de0:	6125      	str	r5, [r4, #16]
 8018de2:	4620      	mov	r0, r4
 8018de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018de8 <__s2b>:
 8018de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018dec:	460c      	mov	r4, r1
 8018dee:	4615      	mov	r5, r2
 8018df0:	461f      	mov	r7, r3
 8018df2:	2209      	movs	r2, #9
 8018df4:	3308      	adds	r3, #8
 8018df6:	4606      	mov	r6, r0
 8018df8:	fb93 f3f2 	sdiv	r3, r3, r2
 8018dfc:	2100      	movs	r1, #0
 8018dfe:	2201      	movs	r2, #1
 8018e00:	429a      	cmp	r2, r3
 8018e02:	db20      	blt.n	8018e46 <__s2b+0x5e>
 8018e04:	4630      	mov	r0, r6
 8018e06:	f7ff ff69 	bl	8018cdc <_Balloc>
 8018e0a:	9b08      	ldr	r3, [sp, #32]
 8018e0c:	6143      	str	r3, [r0, #20]
 8018e0e:	2d09      	cmp	r5, #9
 8018e10:	f04f 0301 	mov.w	r3, #1
 8018e14:	6103      	str	r3, [r0, #16]
 8018e16:	dd19      	ble.n	8018e4c <__s2b+0x64>
 8018e18:	f104 0809 	add.w	r8, r4, #9
 8018e1c:	46c1      	mov	r9, r8
 8018e1e:	442c      	add	r4, r5
 8018e20:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018e24:	4601      	mov	r1, r0
 8018e26:	3b30      	subs	r3, #48	; 0x30
 8018e28:	220a      	movs	r2, #10
 8018e2a:	4630      	mov	r0, r6
 8018e2c:	f7ff ffa1 	bl	8018d72 <__multadd>
 8018e30:	45a1      	cmp	r9, r4
 8018e32:	d1f5      	bne.n	8018e20 <__s2b+0x38>
 8018e34:	eb08 0405 	add.w	r4, r8, r5
 8018e38:	3c08      	subs	r4, #8
 8018e3a:	1b2d      	subs	r5, r5, r4
 8018e3c:	1963      	adds	r3, r4, r5
 8018e3e:	42bb      	cmp	r3, r7
 8018e40:	db07      	blt.n	8018e52 <__s2b+0x6a>
 8018e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018e46:	0052      	lsls	r2, r2, #1
 8018e48:	3101      	adds	r1, #1
 8018e4a:	e7d9      	b.n	8018e00 <__s2b+0x18>
 8018e4c:	340a      	adds	r4, #10
 8018e4e:	2509      	movs	r5, #9
 8018e50:	e7f3      	b.n	8018e3a <__s2b+0x52>
 8018e52:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018e56:	4601      	mov	r1, r0
 8018e58:	3b30      	subs	r3, #48	; 0x30
 8018e5a:	220a      	movs	r2, #10
 8018e5c:	4630      	mov	r0, r6
 8018e5e:	f7ff ff88 	bl	8018d72 <__multadd>
 8018e62:	e7eb      	b.n	8018e3c <__s2b+0x54>

08018e64 <__hi0bits>:
 8018e64:	0c02      	lsrs	r2, r0, #16
 8018e66:	0412      	lsls	r2, r2, #16
 8018e68:	4603      	mov	r3, r0
 8018e6a:	b9b2      	cbnz	r2, 8018e9a <__hi0bits+0x36>
 8018e6c:	0403      	lsls	r3, r0, #16
 8018e6e:	2010      	movs	r0, #16
 8018e70:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018e74:	bf04      	itt	eq
 8018e76:	021b      	lsleq	r3, r3, #8
 8018e78:	3008      	addeq	r0, #8
 8018e7a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018e7e:	bf04      	itt	eq
 8018e80:	011b      	lsleq	r3, r3, #4
 8018e82:	3004      	addeq	r0, #4
 8018e84:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018e88:	bf04      	itt	eq
 8018e8a:	009b      	lsleq	r3, r3, #2
 8018e8c:	3002      	addeq	r0, #2
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	db06      	blt.n	8018ea0 <__hi0bits+0x3c>
 8018e92:	005b      	lsls	r3, r3, #1
 8018e94:	d503      	bpl.n	8018e9e <__hi0bits+0x3a>
 8018e96:	3001      	adds	r0, #1
 8018e98:	4770      	bx	lr
 8018e9a:	2000      	movs	r0, #0
 8018e9c:	e7e8      	b.n	8018e70 <__hi0bits+0xc>
 8018e9e:	2020      	movs	r0, #32
 8018ea0:	4770      	bx	lr

08018ea2 <__lo0bits>:
 8018ea2:	6803      	ldr	r3, [r0, #0]
 8018ea4:	f013 0207 	ands.w	r2, r3, #7
 8018ea8:	4601      	mov	r1, r0
 8018eaa:	d00b      	beq.n	8018ec4 <__lo0bits+0x22>
 8018eac:	07da      	lsls	r2, r3, #31
 8018eae:	d423      	bmi.n	8018ef8 <__lo0bits+0x56>
 8018eb0:	0798      	lsls	r0, r3, #30
 8018eb2:	bf49      	itett	mi
 8018eb4:	085b      	lsrmi	r3, r3, #1
 8018eb6:	089b      	lsrpl	r3, r3, #2
 8018eb8:	2001      	movmi	r0, #1
 8018eba:	600b      	strmi	r3, [r1, #0]
 8018ebc:	bf5c      	itt	pl
 8018ebe:	600b      	strpl	r3, [r1, #0]
 8018ec0:	2002      	movpl	r0, #2
 8018ec2:	4770      	bx	lr
 8018ec4:	b298      	uxth	r0, r3
 8018ec6:	b9a8      	cbnz	r0, 8018ef4 <__lo0bits+0x52>
 8018ec8:	0c1b      	lsrs	r3, r3, #16
 8018eca:	2010      	movs	r0, #16
 8018ecc:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018ed0:	bf04      	itt	eq
 8018ed2:	0a1b      	lsreq	r3, r3, #8
 8018ed4:	3008      	addeq	r0, #8
 8018ed6:	071a      	lsls	r2, r3, #28
 8018ed8:	bf04      	itt	eq
 8018eda:	091b      	lsreq	r3, r3, #4
 8018edc:	3004      	addeq	r0, #4
 8018ede:	079a      	lsls	r2, r3, #30
 8018ee0:	bf04      	itt	eq
 8018ee2:	089b      	lsreq	r3, r3, #2
 8018ee4:	3002      	addeq	r0, #2
 8018ee6:	07da      	lsls	r2, r3, #31
 8018ee8:	d402      	bmi.n	8018ef0 <__lo0bits+0x4e>
 8018eea:	085b      	lsrs	r3, r3, #1
 8018eec:	d006      	beq.n	8018efc <__lo0bits+0x5a>
 8018eee:	3001      	adds	r0, #1
 8018ef0:	600b      	str	r3, [r1, #0]
 8018ef2:	4770      	bx	lr
 8018ef4:	4610      	mov	r0, r2
 8018ef6:	e7e9      	b.n	8018ecc <__lo0bits+0x2a>
 8018ef8:	2000      	movs	r0, #0
 8018efa:	4770      	bx	lr
 8018efc:	2020      	movs	r0, #32
 8018efe:	4770      	bx	lr

08018f00 <__i2b>:
 8018f00:	b510      	push	{r4, lr}
 8018f02:	460c      	mov	r4, r1
 8018f04:	2101      	movs	r1, #1
 8018f06:	f7ff fee9 	bl	8018cdc <_Balloc>
 8018f0a:	2201      	movs	r2, #1
 8018f0c:	6144      	str	r4, [r0, #20]
 8018f0e:	6102      	str	r2, [r0, #16]
 8018f10:	bd10      	pop	{r4, pc}

08018f12 <__multiply>:
 8018f12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f16:	4614      	mov	r4, r2
 8018f18:	690a      	ldr	r2, [r1, #16]
 8018f1a:	6923      	ldr	r3, [r4, #16]
 8018f1c:	429a      	cmp	r2, r3
 8018f1e:	bfb8      	it	lt
 8018f20:	460b      	movlt	r3, r1
 8018f22:	4688      	mov	r8, r1
 8018f24:	bfbc      	itt	lt
 8018f26:	46a0      	movlt	r8, r4
 8018f28:	461c      	movlt	r4, r3
 8018f2a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018f2e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018f32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018f36:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018f3a:	eb07 0609 	add.w	r6, r7, r9
 8018f3e:	42b3      	cmp	r3, r6
 8018f40:	bfb8      	it	lt
 8018f42:	3101      	addlt	r1, #1
 8018f44:	f7ff feca 	bl	8018cdc <_Balloc>
 8018f48:	f100 0514 	add.w	r5, r0, #20
 8018f4c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018f50:	462b      	mov	r3, r5
 8018f52:	2200      	movs	r2, #0
 8018f54:	4573      	cmp	r3, lr
 8018f56:	d316      	bcc.n	8018f86 <__multiply+0x74>
 8018f58:	f104 0214 	add.w	r2, r4, #20
 8018f5c:	f108 0114 	add.w	r1, r8, #20
 8018f60:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018f64:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018f68:	9300      	str	r3, [sp, #0]
 8018f6a:	9b00      	ldr	r3, [sp, #0]
 8018f6c:	9201      	str	r2, [sp, #4]
 8018f6e:	4293      	cmp	r3, r2
 8018f70:	d80c      	bhi.n	8018f8c <__multiply+0x7a>
 8018f72:	2e00      	cmp	r6, #0
 8018f74:	dd03      	ble.n	8018f7e <__multiply+0x6c>
 8018f76:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	d05d      	beq.n	801903a <__multiply+0x128>
 8018f7e:	6106      	str	r6, [r0, #16]
 8018f80:	b003      	add	sp, #12
 8018f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f86:	f843 2b04 	str.w	r2, [r3], #4
 8018f8a:	e7e3      	b.n	8018f54 <__multiply+0x42>
 8018f8c:	f8b2 b000 	ldrh.w	fp, [r2]
 8018f90:	f1bb 0f00 	cmp.w	fp, #0
 8018f94:	d023      	beq.n	8018fde <__multiply+0xcc>
 8018f96:	4689      	mov	r9, r1
 8018f98:	46ac      	mov	ip, r5
 8018f9a:	f04f 0800 	mov.w	r8, #0
 8018f9e:	f859 4b04 	ldr.w	r4, [r9], #4
 8018fa2:	f8dc a000 	ldr.w	sl, [ip]
 8018fa6:	b2a3      	uxth	r3, r4
 8018fa8:	fa1f fa8a 	uxth.w	sl, sl
 8018fac:	fb0b a303 	mla	r3, fp, r3, sl
 8018fb0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018fb4:	f8dc 4000 	ldr.w	r4, [ip]
 8018fb8:	4443      	add	r3, r8
 8018fba:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018fbe:	fb0b 840a 	mla	r4, fp, sl, r8
 8018fc2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018fc6:	46e2      	mov	sl, ip
 8018fc8:	b29b      	uxth	r3, r3
 8018fca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018fce:	454f      	cmp	r7, r9
 8018fd0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018fd4:	f84a 3b04 	str.w	r3, [sl], #4
 8018fd8:	d82b      	bhi.n	8019032 <__multiply+0x120>
 8018fda:	f8cc 8004 	str.w	r8, [ip, #4]
 8018fde:	9b01      	ldr	r3, [sp, #4]
 8018fe0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018fe4:	3204      	adds	r2, #4
 8018fe6:	f1ba 0f00 	cmp.w	sl, #0
 8018fea:	d020      	beq.n	801902e <__multiply+0x11c>
 8018fec:	682b      	ldr	r3, [r5, #0]
 8018fee:	4689      	mov	r9, r1
 8018ff0:	46a8      	mov	r8, r5
 8018ff2:	f04f 0b00 	mov.w	fp, #0
 8018ff6:	f8b9 c000 	ldrh.w	ip, [r9]
 8018ffa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018ffe:	fb0a 440c 	mla	r4, sl, ip, r4
 8019002:	445c      	add	r4, fp
 8019004:	46c4      	mov	ip, r8
 8019006:	b29b      	uxth	r3, r3
 8019008:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801900c:	f84c 3b04 	str.w	r3, [ip], #4
 8019010:	f859 3b04 	ldr.w	r3, [r9], #4
 8019014:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8019018:	0c1b      	lsrs	r3, r3, #16
 801901a:	fb0a b303 	mla	r3, sl, r3, fp
 801901e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8019022:	454f      	cmp	r7, r9
 8019024:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8019028:	d805      	bhi.n	8019036 <__multiply+0x124>
 801902a:	f8c8 3004 	str.w	r3, [r8, #4]
 801902e:	3504      	adds	r5, #4
 8019030:	e79b      	b.n	8018f6a <__multiply+0x58>
 8019032:	46d4      	mov	ip, sl
 8019034:	e7b3      	b.n	8018f9e <__multiply+0x8c>
 8019036:	46e0      	mov	r8, ip
 8019038:	e7dd      	b.n	8018ff6 <__multiply+0xe4>
 801903a:	3e01      	subs	r6, #1
 801903c:	e799      	b.n	8018f72 <__multiply+0x60>
	...

08019040 <__pow5mult>:
 8019040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019044:	4615      	mov	r5, r2
 8019046:	f012 0203 	ands.w	r2, r2, #3
 801904a:	4606      	mov	r6, r0
 801904c:	460f      	mov	r7, r1
 801904e:	d007      	beq.n	8019060 <__pow5mult+0x20>
 8019050:	3a01      	subs	r2, #1
 8019052:	4c21      	ldr	r4, [pc, #132]	; (80190d8 <__pow5mult+0x98>)
 8019054:	2300      	movs	r3, #0
 8019056:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801905a:	f7ff fe8a 	bl	8018d72 <__multadd>
 801905e:	4607      	mov	r7, r0
 8019060:	10ad      	asrs	r5, r5, #2
 8019062:	d035      	beq.n	80190d0 <__pow5mult+0x90>
 8019064:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019066:	b93c      	cbnz	r4, 8019078 <__pow5mult+0x38>
 8019068:	2010      	movs	r0, #16
 801906a:	f7fc fe67 	bl	8015d3c <malloc>
 801906e:	6270      	str	r0, [r6, #36]	; 0x24
 8019070:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019074:	6004      	str	r4, [r0, #0]
 8019076:	60c4      	str	r4, [r0, #12]
 8019078:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801907c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019080:	b94c      	cbnz	r4, 8019096 <__pow5mult+0x56>
 8019082:	f240 2171 	movw	r1, #625	; 0x271
 8019086:	4630      	mov	r0, r6
 8019088:	f7ff ff3a 	bl	8018f00 <__i2b>
 801908c:	2300      	movs	r3, #0
 801908e:	f8c8 0008 	str.w	r0, [r8, #8]
 8019092:	4604      	mov	r4, r0
 8019094:	6003      	str	r3, [r0, #0]
 8019096:	f04f 0800 	mov.w	r8, #0
 801909a:	07eb      	lsls	r3, r5, #31
 801909c:	d50a      	bpl.n	80190b4 <__pow5mult+0x74>
 801909e:	4639      	mov	r1, r7
 80190a0:	4622      	mov	r2, r4
 80190a2:	4630      	mov	r0, r6
 80190a4:	f7ff ff35 	bl	8018f12 <__multiply>
 80190a8:	4639      	mov	r1, r7
 80190aa:	4681      	mov	r9, r0
 80190ac:	4630      	mov	r0, r6
 80190ae:	f7ff fe49 	bl	8018d44 <_Bfree>
 80190b2:	464f      	mov	r7, r9
 80190b4:	106d      	asrs	r5, r5, #1
 80190b6:	d00b      	beq.n	80190d0 <__pow5mult+0x90>
 80190b8:	6820      	ldr	r0, [r4, #0]
 80190ba:	b938      	cbnz	r0, 80190cc <__pow5mult+0x8c>
 80190bc:	4622      	mov	r2, r4
 80190be:	4621      	mov	r1, r4
 80190c0:	4630      	mov	r0, r6
 80190c2:	f7ff ff26 	bl	8018f12 <__multiply>
 80190c6:	6020      	str	r0, [r4, #0]
 80190c8:	f8c0 8000 	str.w	r8, [r0]
 80190cc:	4604      	mov	r4, r0
 80190ce:	e7e4      	b.n	801909a <__pow5mult+0x5a>
 80190d0:	4638      	mov	r0, r7
 80190d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80190d6:	bf00      	nop
 80190d8:	0801b6c0 	.word	0x0801b6c0

080190dc <__lshift>:
 80190dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80190e0:	460c      	mov	r4, r1
 80190e2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80190e6:	6923      	ldr	r3, [r4, #16]
 80190e8:	6849      	ldr	r1, [r1, #4]
 80190ea:	eb0a 0903 	add.w	r9, sl, r3
 80190ee:	68a3      	ldr	r3, [r4, #8]
 80190f0:	4607      	mov	r7, r0
 80190f2:	4616      	mov	r6, r2
 80190f4:	f109 0501 	add.w	r5, r9, #1
 80190f8:	42ab      	cmp	r3, r5
 80190fa:	db32      	blt.n	8019162 <__lshift+0x86>
 80190fc:	4638      	mov	r0, r7
 80190fe:	f7ff fded 	bl	8018cdc <_Balloc>
 8019102:	2300      	movs	r3, #0
 8019104:	4680      	mov	r8, r0
 8019106:	f100 0114 	add.w	r1, r0, #20
 801910a:	461a      	mov	r2, r3
 801910c:	4553      	cmp	r3, sl
 801910e:	db2b      	blt.n	8019168 <__lshift+0x8c>
 8019110:	6920      	ldr	r0, [r4, #16]
 8019112:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019116:	f104 0314 	add.w	r3, r4, #20
 801911a:	f016 021f 	ands.w	r2, r6, #31
 801911e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019122:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019126:	d025      	beq.n	8019174 <__lshift+0x98>
 8019128:	f1c2 0e20 	rsb	lr, r2, #32
 801912c:	2000      	movs	r0, #0
 801912e:	681e      	ldr	r6, [r3, #0]
 8019130:	468a      	mov	sl, r1
 8019132:	4096      	lsls	r6, r2
 8019134:	4330      	orrs	r0, r6
 8019136:	f84a 0b04 	str.w	r0, [sl], #4
 801913a:	f853 0b04 	ldr.w	r0, [r3], #4
 801913e:	459c      	cmp	ip, r3
 8019140:	fa20 f00e 	lsr.w	r0, r0, lr
 8019144:	d814      	bhi.n	8019170 <__lshift+0x94>
 8019146:	6048      	str	r0, [r1, #4]
 8019148:	b108      	cbz	r0, 801914e <__lshift+0x72>
 801914a:	f109 0502 	add.w	r5, r9, #2
 801914e:	3d01      	subs	r5, #1
 8019150:	4638      	mov	r0, r7
 8019152:	f8c8 5010 	str.w	r5, [r8, #16]
 8019156:	4621      	mov	r1, r4
 8019158:	f7ff fdf4 	bl	8018d44 <_Bfree>
 801915c:	4640      	mov	r0, r8
 801915e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019162:	3101      	adds	r1, #1
 8019164:	005b      	lsls	r3, r3, #1
 8019166:	e7c7      	b.n	80190f8 <__lshift+0x1c>
 8019168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801916c:	3301      	adds	r3, #1
 801916e:	e7cd      	b.n	801910c <__lshift+0x30>
 8019170:	4651      	mov	r1, sl
 8019172:	e7dc      	b.n	801912e <__lshift+0x52>
 8019174:	3904      	subs	r1, #4
 8019176:	f853 2b04 	ldr.w	r2, [r3], #4
 801917a:	f841 2f04 	str.w	r2, [r1, #4]!
 801917e:	459c      	cmp	ip, r3
 8019180:	d8f9      	bhi.n	8019176 <__lshift+0x9a>
 8019182:	e7e4      	b.n	801914e <__lshift+0x72>

08019184 <__mcmp>:
 8019184:	6903      	ldr	r3, [r0, #16]
 8019186:	690a      	ldr	r2, [r1, #16]
 8019188:	1a9b      	subs	r3, r3, r2
 801918a:	b530      	push	{r4, r5, lr}
 801918c:	d10c      	bne.n	80191a8 <__mcmp+0x24>
 801918e:	0092      	lsls	r2, r2, #2
 8019190:	3014      	adds	r0, #20
 8019192:	3114      	adds	r1, #20
 8019194:	1884      	adds	r4, r0, r2
 8019196:	4411      	add	r1, r2
 8019198:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801919c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80191a0:	4295      	cmp	r5, r2
 80191a2:	d003      	beq.n	80191ac <__mcmp+0x28>
 80191a4:	d305      	bcc.n	80191b2 <__mcmp+0x2e>
 80191a6:	2301      	movs	r3, #1
 80191a8:	4618      	mov	r0, r3
 80191aa:	bd30      	pop	{r4, r5, pc}
 80191ac:	42a0      	cmp	r0, r4
 80191ae:	d3f3      	bcc.n	8019198 <__mcmp+0x14>
 80191b0:	e7fa      	b.n	80191a8 <__mcmp+0x24>
 80191b2:	f04f 33ff 	mov.w	r3, #4294967295
 80191b6:	e7f7      	b.n	80191a8 <__mcmp+0x24>

080191b8 <__mdiff>:
 80191b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80191bc:	460d      	mov	r5, r1
 80191be:	4607      	mov	r7, r0
 80191c0:	4611      	mov	r1, r2
 80191c2:	4628      	mov	r0, r5
 80191c4:	4614      	mov	r4, r2
 80191c6:	f7ff ffdd 	bl	8019184 <__mcmp>
 80191ca:	1e06      	subs	r6, r0, #0
 80191cc:	d108      	bne.n	80191e0 <__mdiff+0x28>
 80191ce:	4631      	mov	r1, r6
 80191d0:	4638      	mov	r0, r7
 80191d2:	f7ff fd83 	bl	8018cdc <_Balloc>
 80191d6:	2301      	movs	r3, #1
 80191d8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80191dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80191e0:	bfa4      	itt	ge
 80191e2:	4623      	movge	r3, r4
 80191e4:	462c      	movge	r4, r5
 80191e6:	4638      	mov	r0, r7
 80191e8:	6861      	ldr	r1, [r4, #4]
 80191ea:	bfa6      	itte	ge
 80191ec:	461d      	movge	r5, r3
 80191ee:	2600      	movge	r6, #0
 80191f0:	2601      	movlt	r6, #1
 80191f2:	f7ff fd73 	bl	8018cdc <_Balloc>
 80191f6:	692b      	ldr	r3, [r5, #16]
 80191f8:	60c6      	str	r6, [r0, #12]
 80191fa:	6926      	ldr	r6, [r4, #16]
 80191fc:	f105 0914 	add.w	r9, r5, #20
 8019200:	f104 0214 	add.w	r2, r4, #20
 8019204:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8019208:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801920c:	f100 0514 	add.w	r5, r0, #20
 8019210:	f04f 0e00 	mov.w	lr, #0
 8019214:	f852 ab04 	ldr.w	sl, [r2], #4
 8019218:	f859 4b04 	ldr.w	r4, [r9], #4
 801921c:	fa1e f18a 	uxtah	r1, lr, sl
 8019220:	b2a3      	uxth	r3, r4
 8019222:	1ac9      	subs	r1, r1, r3
 8019224:	0c23      	lsrs	r3, r4, #16
 8019226:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801922a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801922e:	b289      	uxth	r1, r1
 8019230:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8019234:	45c8      	cmp	r8, r9
 8019236:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801923a:	4694      	mov	ip, r2
 801923c:	f845 3b04 	str.w	r3, [r5], #4
 8019240:	d8e8      	bhi.n	8019214 <__mdiff+0x5c>
 8019242:	45bc      	cmp	ip, r7
 8019244:	d304      	bcc.n	8019250 <__mdiff+0x98>
 8019246:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801924a:	b183      	cbz	r3, 801926e <__mdiff+0xb6>
 801924c:	6106      	str	r6, [r0, #16]
 801924e:	e7c5      	b.n	80191dc <__mdiff+0x24>
 8019250:	f85c 1b04 	ldr.w	r1, [ip], #4
 8019254:	fa1e f381 	uxtah	r3, lr, r1
 8019258:	141a      	asrs	r2, r3, #16
 801925a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801925e:	b29b      	uxth	r3, r3
 8019260:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019264:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8019268:	f845 3b04 	str.w	r3, [r5], #4
 801926c:	e7e9      	b.n	8019242 <__mdiff+0x8a>
 801926e:	3e01      	subs	r6, #1
 8019270:	e7e9      	b.n	8019246 <__mdiff+0x8e>
	...

08019274 <__ulp>:
 8019274:	4b12      	ldr	r3, [pc, #72]	; (80192c0 <__ulp+0x4c>)
 8019276:	ee10 2a90 	vmov	r2, s1
 801927a:	401a      	ands	r2, r3
 801927c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8019280:	2b00      	cmp	r3, #0
 8019282:	dd04      	ble.n	801928e <__ulp+0x1a>
 8019284:	2000      	movs	r0, #0
 8019286:	4619      	mov	r1, r3
 8019288:	ec41 0b10 	vmov	d0, r0, r1
 801928c:	4770      	bx	lr
 801928e:	425b      	negs	r3, r3
 8019290:	151b      	asrs	r3, r3, #20
 8019292:	2b13      	cmp	r3, #19
 8019294:	f04f 0000 	mov.w	r0, #0
 8019298:	f04f 0100 	mov.w	r1, #0
 801929c:	dc04      	bgt.n	80192a8 <__ulp+0x34>
 801929e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80192a2:	fa42 f103 	asr.w	r1, r2, r3
 80192a6:	e7ef      	b.n	8019288 <__ulp+0x14>
 80192a8:	3b14      	subs	r3, #20
 80192aa:	2b1e      	cmp	r3, #30
 80192ac:	f04f 0201 	mov.w	r2, #1
 80192b0:	bfda      	itte	le
 80192b2:	f1c3 031f 	rsble	r3, r3, #31
 80192b6:	fa02 f303 	lslle.w	r3, r2, r3
 80192ba:	4613      	movgt	r3, r2
 80192bc:	4618      	mov	r0, r3
 80192be:	e7e3      	b.n	8019288 <__ulp+0x14>
 80192c0:	7ff00000 	.word	0x7ff00000

080192c4 <__b2d>:
 80192c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192c6:	6905      	ldr	r5, [r0, #16]
 80192c8:	f100 0714 	add.w	r7, r0, #20
 80192cc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80192d0:	1f2e      	subs	r6, r5, #4
 80192d2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80192d6:	4620      	mov	r0, r4
 80192d8:	f7ff fdc4 	bl	8018e64 <__hi0bits>
 80192dc:	f1c0 0320 	rsb	r3, r0, #32
 80192e0:	280a      	cmp	r0, #10
 80192e2:	600b      	str	r3, [r1, #0]
 80192e4:	f8df c074 	ldr.w	ip, [pc, #116]	; 801935c <__b2d+0x98>
 80192e8:	dc14      	bgt.n	8019314 <__b2d+0x50>
 80192ea:	f1c0 0e0b 	rsb	lr, r0, #11
 80192ee:	fa24 f10e 	lsr.w	r1, r4, lr
 80192f2:	42b7      	cmp	r7, r6
 80192f4:	ea41 030c 	orr.w	r3, r1, ip
 80192f8:	bf34      	ite	cc
 80192fa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80192fe:	2100      	movcs	r1, #0
 8019300:	3015      	adds	r0, #21
 8019302:	fa04 f000 	lsl.w	r0, r4, r0
 8019306:	fa21 f10e 	lsr.w	r1, r1, lr
 801930a:	ea40 0201 	orr.w	r2, r0, r1
 801930e:	ec43 2b10 	vmov	d0, r2, r3
 8019312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019314:	42b7      	cmp	r7, r6
 8019316:	bf3a      	itte	cc
 8019318:	f1a5 0608 	subcc.w	r6, r5, #8
 801931c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019320:	2100      	movcs	r1, #0
 8019322:	380b      	subs	r0, #11
 8019324:	d015      	beq.n	8019352 <__b2d+0x8e>
 8019326:	4084      	lsls	r4, r0
 8019328:	f1c0 0520 	rsb	r5, r0, #32
 801932c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8019330:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8019334:	42be      	cmp	r6, r7
 8019336:	fa21 fc05 	lsr.w	ip, r1, r5
 801933a:	ea44 030c 	orr.w	r3, r4, ip
 801933e:	bf8c      	ite	hi
 8019340:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019344:	2400      	movls	r4, #0
 8019346:	fa01 f000 	lsl.w	r0, r1, r0
 801934a:	40ec      	lsrs	r4, r5
 801934c:	ea40 0204 	orr.w	r2, r0, r4
 8019350:	e7dd      	b.n	801930e <__b2d+0x4a>
 8019352:	ea44 030c 	orr.w	r3, r4, ip
 8019356:	460a      	mov	r2, r1
 8019358:	e7d9      	b.n	801930e <__b2d+0x4a>
 801935a:	bf00      	nop
 801935c:	3ff00000 	.word	0x3ff00000

08019360 <__d2b>:
 8019360:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019364:	460e      	mov	r6, r1
 8019366:	2101      	movs	r1, #1
 8019368:	ec59 8b10 	vmov	r8, r9, d0
 801936c:	4615      	mov	r5, r2
 801936e:	f7ff fcb5 	bl	8018cdc <_Balloc>
 8019372:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8019376:	4607      	mov	r7, r0
 8019378:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801937c:	bb34      	cbnz	r4, 80193cc <__d2b+0x6c>
 801937e:	9301      	str	r3, [sp, #4]
 8019380:	f1b8 0300 	subs.w	r3, r8, #0
 8019384:	d027      	beq.n	80193d6 <__d2b+0x76>
 8019386:	a802      	add	r0, sp, #8
 8019388:	f840 3d08 	str.w	r3, [r0, #-8]!
 801938c:	f7ff fd89 	bl	8018ea2 <__lo0bits>
 8019390:	9900      	ldr	r1, [sp, #0]
 8019392:	b1f0      	cbz	r0, 80193d2 <__d2b+0x72>
 8019394:	9a01      	ldr	r2, [sp, #4]
 8019396:	f1c0 0320 	rsb	r3, r0, #32
 801939a:	fa02 f303 	lsl.w	r3, r2, r3
 801939e:	430b      	orrs	r3, r1
 80193a0:	40c2      	lsrs	r2, r0
 80193a2:	617b      	str	r3, [r7, #20]
 80193a4:	9201      	str	r2, [sp, #4]
 80193a6:	9b01      	ldr	r3, [sp, #4]
 80193a8:	61bb      	str	r3, [r7, #24]
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	bf14      	ite	ne
 80193ae:	2102      	movne	r1, #2
 80193b0:	2101      	moveq	r1, #1
 80193b2:	6139      	str	r1, [r7, #16]
 80193b4:	b1c4      	cbz	r4, 80193e8 <__d2b+0x88>
 80193b6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80193ba:	4404      	add	r4, r0
 80193bc:	6034      	str	r4, [r6, #0]
 80193be:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80193c2:	6028      	str	r0, [r5, #0]
 80193c4:	4638      	mov	r0, r7
 80193c6:	b003      	add	sp, #12
 80193c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80193cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80193d0:	e7d5      	b.n	801937e <__d2b+0x1e>
 80193d2:	6179      	str	r1, [r7, #20]
 80193d4:	e7e7      	b.n	80193a6 <__d2b+0x46>
 80193d6:	a801      	add	r0, sp, #4
 80193d8:	f7ff fd63 	bl	8018ea2 <__lo0bits>
 80193dc:	9b01      	ldr	r3, [sp, #4]
 80193de:	617b      	str	r3, [r7, #20]
 80193e0:	2101      	movs	r1, #1
 80193e2:	6139      	str	r1, [r7, #16]
 80193e4:	3020      	adds	r0, #32
 80193e6:	e7e5      	b.n	80193b4 <__d2b+0x54>
 80193e8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80193ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80193f0:	6030      	str	r0, [r6, #0]
 80193f2:	6918      	ldr	r0, [r3, #16]
 80193f4:	f7ff fd36 	bl	8018e64 <__hi0bits>
 80193f8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80193fc:	e7e1      	b.n	80193c2 <__d2b+0x62>

080193fe <__ratio>:
 80193fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019402:	4688      	mov	r8, r1
 8019404:	4669      	mov	r1, sp
 8019406:	4681      	mov	r9, r0
 8019408:	f7ff ff5c 	bl	80192c4 <__b2d>
 801940c:	a901      	add	r1, sp, #4
 801940e:	4640      	mov	r0, r8
 8019410:	ec57 6b10 	vmov	r6, r7, d0
 8019414:	f7ff ff56 	bl	80192c4 <__b2d>
 8019418:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801941c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019420:	eba3 0c02 	sub.w	ip, r3, r2
 8019424:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019428:	1a9b      	subs	r3, r3, r2
 801942a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801942e:	ec5b ab10 	vmov	sl, fp, d0
 8019432:	2b00      	cmp	r3, #0
 8019434:	bfce      	itee	gt
 8019436:	463a      	movgt	r2, r7
 8019438:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801943c:	465a      	movle	r2, fp
 801943e:	4659      	mov	r1, fp
 8019440:	463d      	mov	r5, r7
 8019442:	bfd4      	ite	le
 8019444:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8019448:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801944c:	4630      	mov	r0, r6
 801944e:	ee10 2a10 	vmov	r2, s0
 8019452:	460b      	mov	r3, r1
 8019454:	4629      	mov	r1, r5
 8019456:	f7e7 f9f9 	bl	800084c <__aeabi_ddiv>
 801945a:	ec41 0b10 	vmov	d0, r0, r1
 801945e:	b003      	add	sp, #12
 8019460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019464 <__copybits>:
 8019464:	3901      	subs	r1, #1
 8019466:	b510      	push	{r4, lr}
 8019468:	1149      	asrs	r1, r1, #5
 801946a:	6914      	ldr	r4, [r2, #16]
 801946c:	3101      	adds	r1, #1
 801946e:	f102 0314 	add.w	r3, r2, #20
 8019472:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019476:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801947a:	42a3      	cmp	r3, r4
 801947c:	4602      	mov	r2, r0
 801947e:	d303      	bcc.n	8019488 <__copybits+0x24>
 8019480:	2300      	movs	r3, #0
 8019482:	428a      	cmp	r2, r1
 8019484:	d305      	bcc.n	8019492 <__copybits+0x2e>
 8019486:	bd10      	pop	{r4, pc}
 8019488:	f853 2b04 	ldr.w	r2, [r3], #4
 801948c:	f840 2b04 	str.w	r2, [r0], #4
 8019490:	e7f3      	b.n	801947a <__copybits+0x16>
 8019492:	f842 3b04 	str.w	r3, [r2], #4
 8019496:	e7f4      	b.n	8019482 <__copybits+0x1e>

08019498 <__any_on>:
 8019498:	f100 0214 	add.w	r2, r0, #20
 801949c:	6900      	ldr	r0, [r0, #16]
 801949e:	114b      	asrs	r3, r1, #5
 80194a0:	4298      	cmp	r0, r3
 80194a2:	b510      	push	{r4, lr}
 80194a4:	db11      	blt.n	80194ca <__any_on+0x32>
 80194a6:	dd0a      	ble.n	80194be <__any_on+0x26>
 80194a8:	f011 011f 	ands.w	r1, r1, #31
 80194ac:	d007      	beq.n	80194be <__any_on+0x26>
 80194ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80194b2:	fa24 f001 	lsr.w	r0, r4, r1
 80194b6:	fa00 f101 	lsl.w	r1, r0, r1
 80194ba:	428c      	cmp	r4, r1
 80194bc:	d10b      	bne.n	80194d6 <__any_on+0x3e>
 80194be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80194c2:	4293      	cmp	r3, r2
 80194c4:	d803      	bhi.n	80194ce <__any_on+0x36>
 80194c6:	2000      	movs	r0, #0
 80194c8:	bd10      	pop	{r4, pc}
 80194ca:	4603      	mov	r3, r0
 80194cc:	e7f7      	b.n	80194be <__any_on+0x26>
 80194ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80194d2:	2900      	cmp	r1, #0
 80194d4:	d0f5      	beq.n	80194c2 <__any_on+0x2a>
 80194d6:	2001      	movs	r0, #1
 80194d8:	e7f6      	b.n	80194c8 <__any_on+0x30>

080194da <_calloc_r>:
 80194da:	b538      	push	{r3, r4, r5, lr}
 80194dc:	fb02 f401 	mul.w	r4, r2, r1
 80194e0:	4621      	mov	r1, r4
 80194e2:	f7fc fcb5 	bl	8015e50 <_malloc_r>
 80194e6:	4605      	mov	r5, r0
 80194e8:	b118      	cbz	r0, 80194f2 <_calloc_r+0x18>
 80194ea:	4622      	mov	r2, r4
 80194ec:	2100      	movs	r1, #0
 80194ee:	f7fc fc59 	bl	8015da4 <memset>
 80194f2:	4628      	mov	r0, r5
 80194f4:	bd38      	pop	{r3, r4, r5, pc}

080194f6 <__ssputs_r>:
 80194f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80194fa:	688e      	ldr	r6, [r1, #8]
 80194fc:	429e      	cmp	r6, r3
 80194fe:	4682      	mov	sl, r0
 8019500:	460c      	mov	r4, r1
 8019502:	4690      	mov	r8, r2
 8019504:	4699      	mov	r9, r3
 8019506:	d837      	bhi.n	8019578 <__ssputs_r+0x82>
 8019508:	898a      	ldrh	r2, [r1, #12]
 801950a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801950e:	d031      	beq.n	8019574 <__ssputs_r+0x7e>
 8019510:	6825      	ldr	r5, [r4, #0]
 8019512:	6909      	ldr	r1, [r1, #16]
 8019514:	1a6f      	subs	r7, r5, r1
 8019516:	6965      	ldr	r5, [r4, #20]
 8019518:	2302      	movs	r3, #2
 801951a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801951e:	fb95 f5f3 	sdiv	r5, r5, r3
 8019522:	f109 0301 	add.w	r3, r9, #1
 8019526:	443b      	add	r3, r7
 8019528:	429d      	cmp	r5, r3
 801952a:	bf38      	it	cc
 801952c:	461d      	movcc	r5, r3
 801952e:	0553      	lsls	r3, r2, #21
 8019530:	d530      	bpl.n	8019594 <__ssputs_r+0x9e>
 8019532:	4629      	mov	r1, r5
 8019534:	f7fc fc8c 	bl	8015e50 <_malloc_r>
 8019538:	4606      	mov	r6, r0
 801953a:	b950      	cbnz	r0, 8019552 <__ssputs_r+0x5c>
 801953c:	230c      	movs	r3, #12
 801953e:	f8ca 3000 	str.w	r3, [sl]
 8019542:	89a3      	ldrh	r3, [r4, #12]
 8019544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019548:	81a3      	strh	r3, [r4, #12]
 801954a:	f04f 30ff 	mov.w	r0, #4294967295
 801954e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019552:	463a      	mov	r2, r7
 8019554:	6921      	ldr	r1, [r4, #16]
 8019556:	f7fc fc01 	bl	8015d5c <memcpy>
 801955a:	89a3      	ldrh	r3, [r4, #12]
 801955c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019564:	81a3      	strh	r3, [r4, #12]
 8019566:	6126      	str	r6, [r4, #16]
 8019568:	6165      	str	r5, [r4, #20]
 801956a:	443e      	add	r6, r7
 801956c:	1bed      	subs	r5, r5, r7
 801956e:	6026      	str	r6, [r4, #0]
 8019570:	60a5      	str	r5, [r4, #8]
 8019572:	464e      	mov	r6, r9
 8019574:	454e      	cmp	r6, r9
 8019576:	d900      	bls.n	801957a <__ssputs_r+0x84>
 8019578:	464e      	mov	r6, r9
 801957a:	4632      	mov	r2, r6
 801957c:	4641      	mov	r1, r8
 801957e:	6820      	ldr	r0, [r4, #0]
 8019580:	f7fc fbf7 	bl	8015d72 <memmove>
 8019584:	68a3      	ldr	r3, [r4, #8]
 8019586:	1b9b      	subs	r3, r3, r6
 8019588:	60a3      	str	r3, [r4, #8]
 801958a:	6823      	ldr	r3, [r4, #0]
 801958c:	441e      	add	r6, r3
 801958e:	6026      	str	r6, [r4, #0]
 8019590:	2000      	movs	r0, #0
 8019592:	e7dc      	b.n	801954e <__ssputs_r+0x58>
 8019594:	462a      	mov	r2, r5
 8019596:	f000 f920 	bl	80197da <_realloc_r>
 801959a:	4606      	mov	r6, r0
 801959c:	2800      	cmp	r0, #0
 801959e:	d1e2      	bne.n	8019566 <__ssputs_r+0x70>
 80195a0:	6921      	ldr	r1, [r4, #16]
 80195a2:	4650      	mov	r0, sl
 80195a4:	f7fc fc06 	bl	8015db4 <_free_r>
 80195a8:	e7c8      	b.n	801953c <__ssputs_r+0x46>
	...

080195ac <_svfiprintf_r>:
 80195ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195b0:	461d      	mov	r5, r3
 80195b2:	898b      	ldrh	r3, [r1, #12]
 80195b4:	061f      	lsls	r7, r3, #24
 80195b6:	b09d      	sub	sp, #116	; 0x74
 80195b8:	4680      	mov	r8, r0
 80195ba:	460c      	mov	r4, r1
 80195bc:	4616      	mov	r6, r2
 80195be:	d50f      	bpl.n	80195e0 <_svfiprintf_r+0x34>
 80195c0:	690b      	ldr	r3, [r1, #16]
 80195c2:	b96b      	cbnz	r3, 80195e0 <_svfiprintf_r+0x34>
 80195c4:	2140      	movs	r1, #64	; 0x40
 80195c6:	f7fc fc43 	bl	8015e50 <_malloc_r>
 80195ca:	6020      	str	r0, [r4, #0]
 80195cc:	6120      	str	r0, [r4, #16]
 80195ce:	b928      	cbnz	r0, 80195dc <_svfiprintf_r+0x30>
 80195d0:	230c      	movs	r3, #12
 80195d2:	f8c8 3000 	str.w	r3, [r8]
 80195d6:	f04f 30ff 	mov.w	r0, #4294967295
 80195da:	e0c8      	b.n	801976e <_svfiprintf_r+0x1c2>
 80195dc:	2340      	movs	r3, #64	; 0x40
 80195de:	6163      	str	r3, [r4, #20]
 80195e0:	2300      	movs	r3, #0
 80195e2:	9309      	str	r3, [sp, #36]	; 0x24
 80195e4:	2320      	movs	r3, #32
 80195e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80195ea:	2330      	movs	r3, #48	; 0x30
 80195ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80195f0:	9503      	str	r5, [sp, #12]
 80195f2:	f04f 0b01 	mov.w	fp, #1
 80195f6:	4637      	mov	r7, r6
 80195f8:	463d      	mov	r5, r7
 80195fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80195fe:	b10b      	cbz	r3, 8019604 <_svfiprintf_r+0x58>
 8019600:	2b25      	cmp	r3, #37	; 0x25
 8019602:	d13e      	bne.n	8019682 <_svfiprintf_r+0xd6>
 8019604:	ebb7 0a06 	subs.w	sl, r7, r6
 8019608:	d00b      	beq.n	8019622 <_svfiprintf_r+0x76>
 801960a:	4653      	mov	r3, sl
 801960c:	4632      	mov	r2, r6
 801960e:	4621      	mov	r1, r4
 8019610:	4640      	mov	r0, r8
 8019612:	f7ff ff70 	bl	80194f6 <__ssputs_r>
 8019616:	3001      	adds	r0, #1
 8019618:	f000 80a4 	beq.w	8019764 <_svfiprintf_r+0x1b8>
 801961c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801961e:	4453      	add	r3, sl
 8019620:	9309      	str	r3, [sp, #36]	; 0x24
 8019622:	783b      	ldrb	r3, [r7, #0]
 8019624:	2b00      	cmp	r3, #0
 8019626:	f000 809d 	beq.w	8019764 <_svfiprintf_r+0x1b8>
 801962a:	2300      	movs	r3, #0
 801962c:	f04f 32ff 	mov.w	r2, #4294967295
 8019630:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019634:	9304      	str	r3, [sp, #16]
 8019636:	9307      	str	r3, [sp, #28]
 8019638:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801963c:	931a      	str	r3, [sp, #104]	; 0x68
 801963e:	462f      	mov	r7, r5
 8019640:	2205      	movs	r2, #5
 8019642:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019646:	4850      	ldr	r0, [pc, #320]	; (8019788 <_svfiprintf_r+0x1dc>)
 8019648:	f7e6 fdca 	bl	80001e0 <memchr>
 801964c:	9b04      	ldr	r3, [sp, #16]
 801964e:	b9d0      	cbnz	r0, 8019686 <_svfiprintf_r+0xda>
 8019650:	06d9      	lsls	r1, r3, #27
 8019652:	bf44      	itt	mi
 8019654:	2220      	movmi	r2, #32
 8019656:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801965a:	071a      	lsls	r2, r3, #28
 801965c:	bf44      	itt	mi
 801965e:	222b      	movmi	r2, #43	; 0x2b
 8019660:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019664:	782a      	ldrb	r2, [r5, #0]
 8019666:	2a2a      	cmp	r2, #42	; 0x2a
 8019668:	d015      	beq.n	8019696 <_svfiprintf_r+0xea>
 801966a:	9a07      	ldr	r2, [sp, #28]
 801966c:	462f      	mov	r7, r5
 801966e:	2000      	movs	r0, #0
 8019670:	250a      	movs	r5, #10
 8019672:	4639      	mov	r1, r7
 8019674:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019678:	3b30      	subs	r3, #48	; 0x30
 801967a:	2b09      	cmp	r3, #9
 801967c:	d94d      	bls.n	801971a <_svfiprintf_r+0x16e>
 801967e:	b1b8      	cbz	r0, 80196b0 <_svfiprintf_r+0x104>
 8019680:	e00f      	b.n	80196a2 <_svfiprintf_r+0xf6>
 8019682:	462f      	mov	r7, r5
 8019684:	e7b8      	b.n	80195f8 <_svfiprintf_r+0x4c>
 8019686:	4a40      	ldr	r2, [pc, #256]	; (8019788 <_svfiprintf_r+0x1dc>)
 8019688:	1a80      	subs	r0, r0, r2
 801968a:	fa0b f000 	lsl.w	r0, fp, r0
 801968e:	4318      	orrs	r0, r3
 8019690:	9004      	str	r0, [sp, #16]
 8019692:	463d      	mov	r5, r7
 8019694:	e7d3      	b.n	801963e <_svfiprintf_r+0x92>
 8019696:	9a03      	ldr	r2, [sp, #12]
 8019698:	1d11      	adds	r1, r2, #4
 801969a:	6812      	ldr	r2, [r2, #0]
 801969c:	9103      	str	r1, [sp, #12]
 801969e:	2a00      	cmp	r2, #0
 80196a0:	db01      	blt.n	80196a6 <_svfiprintf_r+0xfa>
 80196a2:	9207      	str	r2, [sp, #28]
 80196a4:	e004      	b.n	80196b0 <_svfiprintf_r+0x104>
 80196a6:	4252      	negs	r2, r2
 80196a8:	f043 0302 	orr.w	r3, r3, #2
 80196ac:	9207      	str	r2, [sp, #28]
 80196ae:	9304      	str	r3, [sp, #16]
 80196b0:	783b      	ldrb	r3, [r7, #0]
 80196b2:	2b2e      	cmp	r3, #46	; 0x2e
 80196b4:	d10c      	bne.n	80196d0 <_svfiprintf_r+0x124>
 80196b6:	787b      	ldrb	r3, [r7, #1]
 80196b8:	2b2a      	cmp	r3, #42	; 0x2a
 80196ba:	d133      	bne.n	8019724 <_svfiprintf_r+0x178>
 80196bc:	9b03      	ldr	r3, [sp, #12]
 80196be:	1d1a      	adds	r2, r3, #4
 80196c0:	681b      	ldr	r3, [r3, #0]
 80196c2:	9203      	str	r2, [sp, #12]
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	bfb8      	it	lt
 80196c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80196cc:	3702      	adds	r7, #2
 80196ce:	9305      	str	r3, [sp, #20]
 80196d0:	4d2e      	ldr	r5, [pc, #184]	; (801978c <_svfiprintf_r+0x1e0>)
 80196d2:	7839      	ldrb	r1, [r7, #0]
 80196d4:	2203      	movs	r2, #3
 80196d6:	4628      	mov	r0, r5
 80196d8:	f7e6 fd82 	bl	80001e0 <memchr>
 80196dc:	b138      	cbz	r0, 80196ee <_svfiprintf_r+0x142>
 80196de:	2340      	movs	r3, #64	; 0x40
 80196e0:	1b40      	subs	r0, r0, r5
 80196e2:	fa03 f000 	lsl.w	r0, r3, r0
 80196e6:	9b04      	ldr	r3, [sp, #16]
 80196e8:	4303      	orrs	r3, r0
 80196ea:	3701      	adds	r7, #1
 80196ec:	9304      	str	r3, [sp, #16]
 80196ee:	7839      	ldrb	r1, [r7, #0]
 80196f0:	4827      	ldr	r0, [pc, #156]	; (8019790 <_svfiprintf_r+0x1e4>)
 80196f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80196f6:	2206      	movs	r2, #6
 80196f8:	1c7e      	adds	r6, r7, #1
 80196fa:	f7e6 fd71 	bl	80001e0 <memchr>
 80196fe:	2800      	cmp	r0, #0
 8019700:	d038      	beq.n	8019774 <_svfiprintf_r+0x1c8>
 8019702:	4b24      	ldr	r3, [pc, #144]	; (8019794 <_svfiprintf_r+0x1e8>)
 8019704:	bb13      	cbnz	r3, 801974c <_svfiprintf_r+0x1a0>
 8019706:	9b03      	ldr	r3, [sp, #12]
 8019708:	3307      	adds	r3, #7
 801970a:	f023 0307 	bic.w	r3, r3, #7
 801970e:	3308      	adds	r3, #8
 8019710:	9303      	str	r3, [sp, #12]
 8019712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019714:	444b      	add	r3, r9
 8019716:	9309      	str	r3, [sp, #36]	; 0x24
 8019718:	e76d      	b.n	80195f6 <_svfiprintf_r+0x4a>
 801971a:	fb05 3202 	mla	r2, r5, r2, r3
 801971e:	2001      	movs	r0, #1
 8019720:	460f      	mov	r7, r1
 8019722:	e7a6      	b.n	8019672 <_svfiprintf_r+0xc6>
 8019724:	2300      	movs	r3, #0
 8019726:	3701      	adds	r7, #1
 8019728:	9305      	str	r3, [sp, #20]
 801972a:	4619      	mov	r1, r3
 801972c:	250a      	movs	r5, #10
 801972e:	4638      	mov	r0, r7
 8019730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019734:	3a30      	subs	r2, #48	; 0x30
 8019736:	2a09      	cmp	r2, #9
 8019738:	d903      	bls.n	8019742 <_svfiprintf_r+0x196>
 801973a:	2b00      	cmp	r3, #0
 801973c:	d0c8      	beq.n	80196d0 <_svfiprintf_r+0x124>
 801973e:	9105      	str	r1, [sp, #20]
 8019740:	e7c6      	b.n	80196d0 <_svfiprintf_r+0x124>
 8019742:	fb05 2101 	mla	r1, r5, r1, r2
 8019746:	2301      	movs	r3, #1
 8019748:	4607      	mov	r7, r0
 801974a:	e7f0      	b.n	801972e <_svfiprintf_r+0x182>
 801974c:	ab03      	add	r3, sp, #12
 801974e:	9300      	str	r3, [sp, #0]
 8019750:	4622      	mov	r2, r4
 8019752:	4b11      	ldr	r3, [pc, #68]	; (8019798 <_svfiprintf_r+0x1ec>)
 8019754:	a904      	add	r1, sp, #16
 8019756:	4640      	mov	r0, r8
 8019758:	f7fc fc68 	bl	801602c <_printf_float>
 801975c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019760:	4681      	mov	r9, r0
 8019762:	d1d6      	bne.n	8019712 <_svfiprintf_r+0x166>
 8019764:	89a3      	ldrh	r3, [r4, #12]
 8019766:	065b      	lsls	r3, r3, #25
 8019768:	f53f af35 	bmi.w	80195d6 <_svfiprintf_r+0x2a>
 801976c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801976e:	b01d      	add	sp, #116	; 0x74
 8019770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019774:	ab03      	add	r3, sp, #12
 8019776:	9300      	str	r3, [sp, #0]
 8019778:	4622      	mov	r2, r4
 801977a:	4b07      	ldr	r3, [pc, #28]	; (8019798 <_svfiprintf_r+0x1ec>)
 801977c:	a904      	add	r1, sp, #16
 801977e:	4640      	mov	r0, r8
 8019780:	f7fc ff0a 	bl	8016598 <_printf_i>
 8019784:	e7ea      	b.n	801975c <_svfiprintf_r+0x1b0>
 8019786:	bf00      	nop
 8019788:	0801b6cc 	.word	0x0801b6cc
 801978c:	0801b6d2 	.word	0x0801b6d2
 8019790:	0801b6d6 	.word	0x0801b6d6
 8019794:	0801602d 	.word	0x0801602d
 8019798:	080194f7 	.word	0x080194f7

0801979c <strncmp>:
 801979c:	b510      	push	{r4, lr}
 801979e:	b16a      	cbz	r2, 80197bc <strncmp+0x20>
 80197a0:	3901      	subs	r1, #1
 80197a2:	1884      	adds	r4, r0, r2
 80197a4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80197a8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80197ac:	4293      	cmp	r3, r2
 80197ae:	d103      	bne.n	80197b8 <strncmp+0x1c>
 80197b0:	42a0      	cmp	r0, r4
 80197b2:	d001      	beq.n	80197b8 <strncmp+0x1c>
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	d1f5      	bne.n	80197a4 <strncmp+0x8>
 80197b8:	1a98      	subs	r0, r3, r2
 80197ba:	bd10      	pop	{r4, pc}
 80197bc:	4610      	mov	r0, r2
 80197be:	e7fc      	b.n	80197ba <strncmp+0x1e>

080197c0 <__ascii_wctomb>:
 80197c0:	b149      	cbz	r1, 80197d6 <__ascii_wctomb+0x16>
 80197c2:	2aff      	cmp	r2, #255	; 0xff
 80197c4:	bf85      	ittet	hi
 80197c6:	238a      	movhi	r3, #138	; 0x8a
 80197c8:	6003      	strhi	r3, [r0, #0]
 80197ca:	700a      	strbls	r2, [r1, #0]
 80197cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80197d0:	bf98      	it	ls
 80197d2:	2001      	movls	r0, #1
 80197d4:	4770      	bx	lr
 80197d6:	4608      	mov	r0, r1
 80197d8:	4770      	bx	lr

080197da <_realloc_r>:
 80197da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197dc:	4607      	mov	r7, r0
 80197de:	4614      	mov	r4, r2
 80197e0:	460e      	mov	r6, r1
 80197e2:	b921      	cbnz	r1, 80197ee <_realloc_r+0x14>
 80197e4:	4611      	mov	r1, r2
 80197e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80197ea:	f7fc bb31 	b.w	8015e50 <_malloc_r>
 80197ee:	b922      	cbnz	r2, 80197fa <_realloc_r+0x20>
 80197f0:	f7fc fae0 	bl	8015db4 <_free_r>
 80197f4:	4625      	mov	r5, r4
 80197f6:	4628      	mov	r0, r5
 80197f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80197fa:	f000 f814 	bl	8019826 <_malloc_usable_size_r>
 80197fe:	42a0      	cmp	r0, r4
 8019800:	d20f      	bcs.n	8019822 <_realloc_r+0x48>
 8019802:	4621      	mov	r1, r4
 8019804:	4638      	mov	r0, r7
 8019806:	f7fc fb23 	bl	8015e50 <_malloc_r>
 801980a:	4605      	mov	r5, r0
 801980c:	2800      	cmp	r0, #0
 801980e:	d0f2      	beq.n	80197f6 <_realloc_r+0x1c>
 8019810:	4631      	mov	r1, r6
 8019812:	4622      	mov	r2, r4
 8019814:	f7fc faa2 	bl	8015d5c <memcpy>
 8019818:	4631      	mov	r1, r6
 801981a:	4638      	mov	r0, r7
 801981c:	f7fc faca 	bl	8015db4 <_free_r>
 8019820:	e7e9      	b.n	80197f6 <_realloc_r+0x1c>
 8019822:	4635      	mov	r5, r6
 8019824:	e7e7      	b.n	80197f6 <_realloc_r+0x1c>

08019826 <_malloc_usable_size_r>:
 8019826:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801982a:	1f18      	subs	r0, r3, #4
 801982c:	2b00      	cmp	r3, #0
 801982e:	bfbc      	itt	lt
 8019830:	580b      	ldrlt	r3, [r1, r0]
 8019832:	18c0      	addlt	r0, r0, r3
 8019834:	4770      	bx	lr
	...

08019838 <ceil>:
 8019838:	ec51 0b10 	vmov	r0, r1, d0
 801983c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019840:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8019844:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8019848:	2e13      	cmp	r6, #19
 801984a:	460c      	mov	r4, r1
 801984c:	ee10 5a10 	vmov	r5, s0
 8019850:	4680      	mov	r8, r0
 8019852:	dc30      	bgt.n	80198b6 <ceil+0x7e>
 8019854:	2e00      	cmp	r6, #0
 8019856:	da12      	bge.n	801987e <ceil+0x46>
 8019858:	a333      	add	r3, pc, #204	; (adr r3, 8019928 <ceil+0xf0>)
 801985a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801985e:	f7e6 fd15 	bl	800028c <__adddf3>
 8019862:	2200      	movs	r2, #0
 8019864:	2300      	movs	r3, #0
 8019866:	f7e7 f957 	bl	8000b18 <__aeabi_dcmpgt>
 801986a:	b128      	cbz	r0, 8019878 <ceil+0x40>
 801986c:	2c00      	cmp	r4, #0
 801986e:	db55      	blt.n	801991c <ceil+0xe4>
 8019870:	432c      	orrs	r4, r5
 8019872:	d057      	beq.n	8019924 <ceil+0xec>
 8019874:	4c2e      	ldr	r4, [pc, #184]	; (8019930 <ceil+0xf8>)
 8019876:	2500      	movs	r5, #0
 8019878:	4621      	mov	r1, r4
 801987a:	4628      	mov	r0, r5
 801987c:	e025      	b.n	80198ca <ceil+0x92>
 801987e:	4f2d      	ldr	r7, [pc, #180]	; (8019934 <ceil+0xfc>)
 8019880:	4137      	asrs	r7, r6
 8019882:	ea01 0307 	and.w	r3, r1, r7
 8019886:	4303      	orrs	r3, r0
 8019888:	d01f      	beq.n	80198ca <ceil+0x92>
 801988a:	a327      	add	r3, pc, #156	; (adr r3, 8019928 <ceil+0xf0>)
 801988c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019890:	f7e6 fcfc 	bl	800028c <__adddf3>
 8019894:	2200      	movs	r2, #0
 8019896:	2300      	movs	r3, #0
 8019898:	f7e7 f93e 	bl	8000b18 <__aeabi_dcmpgt>
 801989c:	2800      	cmp	r0, #0
 801989e:	d0eb      	beq.n	8019878 <ceil+0x40>
 80198a0:	2c00      	cmp	r4, #0
 80198a2:	bfc2      	ittt	gt
 80198a4:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80198a8:	fa43 f606 	asrgt.w	r6, r3, r6
 80198ac:	19a4      	addgt	r4, r4, r6
 80198ae:	ea24 0407 	bic.w	r4, r4, r7
 80198b2:	2500      	movs	r5, #0
 80198b4:	e7e0      	b.n	8019878 <ceil+0x40>
 80198b6:	2e33      	cmp	r6, #51	; 0x33
 80198b8:	dd0b      	ble.n	80198d2 <ceil+0x9a>
 80198ba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80198be:	d104      	bne.n	80198ca <ceil+0x92>
 80198c0:	ee10 2a10 	vmov	r2, s0
 80198c4:	460b      	mov	r3, r1
 80198c6:	f7e6 fce1 	bl	800028c <__adddf3>
 80198ca:	ec41 0b10 	vmov	d0, r0, r1
 80198ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198d2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80198d6:	f04f 33ff 	mov.w	r3, #4294967295
 80198da:	fa23 f707 	lsr.w	r7, r3, r7
 80198de:	4207      	tst	r7, r0
 80198e0:	d0f3      	beq.n	80198ca <ceil+0x92>
 80198e2:	a311      	add	r3, pc, #68	; (adr r3, 8019928 <ceil+0xf0>)
 80198e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198e8:	f7e6 fcd0 	bl	800028c <__adddf3>
 80198ec:	2200      	movs	r2, #0
 80198ee:	2300      	movs	r3, #0
 80198f0:	f7e7 f912 	bl	8000b18 <__aeabi_dcmpgt>
 80198f4:	2800      	cmp	r0, #0
 80198f6:	d0bf      	beq.n	8019878 <ceil+0x40>
 80198f8:	2c00      	cmp	r4, #0
 80198fa:	dd02      	ble.n	8019902 <ceil+0xca>
 80198fc:	2e14      	cmp	r6, #20
 80198fe:	d103      	bne.n	8019908 <ceil+0xd0>
 8019900:	3401      	adds	r4, #1
 8019902:	ea25 0507 	bic.w	r5, r5, r7
 8019906:	e7b7      	b.n	8019878 <ceil+0x40>
 8019908:	2301      	movs	r3, #1
 801990a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801990e:	fa03 f606 	lsl.w	r6, r3, r6
 8019912:	4435      	add	r5, r6
 8019914:	4545      	cmp	r5, r8
 8019916:	bf38      	it	cc
 8019918:	18e4      	addcc	r4, r4, r3
 801991a:	e7f2      	b.n	8019902 <ceil+0xca>
 801991c:	2500      	movs	r5, #0
 801991e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8019922:	e7a9      	b.n	8019878 <ceil+0x40>
 8019924:	4625      	mov	r5, r4
 8019926:	e7a7      	b.n	8019878 <ceil+0x40>
 8019928:	8800759c 	.word	0x8800759c
 801992c:	7e37e43c 	.word	0x7e37e43c
 8019930:	3ff00000 	.word	0x3ff00000
 8019934:	000fffff 	.word	0x000fffff

08019938 <cos>:
 8019938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801993a:	ec51 0b10 	vmov	r0, r1, d0
 801993e:	4a1e      	ldr	r2, [pc, #120]	; (80199b8 <cos+0x80>)
 8019940:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019944:	4293      	cmp	r3, r2
 8019946:	dc06      	bgt.n	8019956 <cos+0x1e>
 8019948:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80199b0 <cos+0x78>
 801994c:	f000 fcec 	bl	801a328 <__kernel_cos>
 8019950:	ec51 0b10 	vmov	r0, r1, d0
 8019954:	e007      	b.n	8019966 <cos+0x2e>
 8019956:	4a19      	ldr	r2, [pc, #100]	; (80199bc <cos+0x84>)
 8019958:	4293      	cmp	r3, r2
 801995a:	dd09      	ble.n	8019970 <cos+0x38>
 801995c:	ee10 2a10 	vmov	r2, s0
 8019960:	460b      	mov	r3, r1
 8019962:	f7e6 fc91 	bl	8000288 <__aeabi_dsub>
 8019966:	ec41 0b10 	vmov	d0, r0, r1
 801996a:	b005      	add	sp, #20
 801996c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019970:	4668      	mov	r0, sp
 8019972:	f000 fa35 	bl	8019de0 <__ieee754_rem_pio2>
 8019976:	f000 0003 	and.w	r0, r0, #3
 801997a:	2801      	cmp	r0, #1
 801997c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019980:	ed9d 0b00 	vldr	d0, [sp]
 8019984:	d007      	beq.n	8019996 <cos+0x5e>
 8019986:	2802      	cmp	r0, #2
 8019988:	d00e      	beq.n	80199a8 <cos+0x70>
 801998a:	2800      	cmp	r0, #0
 801998c:	d0de      	beq.n	801994c <cos+0x14>
 801998e:	2001      	movs	r0, #1
 8019990:	f001 f8d2 	bl	801ab38 <__kernel_sin>
 8019994:	e7dc      	b.n	8019950 <cos+0x18>
 8019996:	f001 f8cf 	bl	801ab38 <__kernel_sin>
 801999a:	ec53 2b10 	vmov	r2, r3, d0
 801999e:	ee10 0a10 	vmov	r0, s0
 80199a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80199a6:	e7de      	b.n	8019966 <cos+0x2e>
 80199a8:	f000 fcbe 	bl	801a328 <__kernel_cos>
 80199ac:	e7f5      	b.n	801999a <cos+0x62>
 80199ae:	bf00      	nop
	...
 80199b8:	3fe921fb 	.word	0x3fe921fb
 80199bc:	7fefffff 	.word	0x7fefffff

080199c0 <round>:
 80199c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199c2:	ec57 6b10 	vmov	r6, r7, d0
 80199c6:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80199ca:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80199ce:	2c13      	cmp	r4, #19
 80199d0:	463b      	mov	r3, r7
 80199d2:	463d      	mov	r5, r7
 80199d4:	dc17      	bgt.n	8019a06 <round+0x46>
 80199d6:	2c00      	cmp	r4, #0
 80199d8:	da09      	bge.n	80199ee <round+0x2e>
 80199da:	3401      	adds	r4, #1
 80199dc:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80199e0:	d103      	bne.n	80199ea <round+0x2a>
 80199e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80199e6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80199ea:	2100      	movs	r1, #0
 80199ec:	e02c      	b.n	8019a48 <round+0x88>
 80199ee:	4a18      	ldr	r2, [pc, #96]	; (8019a50 <round+0x90>)
 80199f0:	4122      	asrs	r2, r4
 80199f2:	4217      	tst	r7, r2
 80199f4:	d100      	bne.n	80199f8 <round+0x38>
 80199f6:	b19e      	cbz	r6, 8019a20 <round+0x60>
 80199f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80199fc:	4123      	asrs	r3, r4
 80199fe:	442b      	add	r3, r5
 8019a00:	ea23 0302 	bic.w	r3, r3, r2
 8019a04:	e7f1      	b.n	80199ea <round+0x2a>
 8019a06:	2c33      	cmp	r4, #51	; 0x33
 8019a08:	dd0d      	ble.n	8019a26 <round+0x66>
 8019a0a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8019a0e:	d107      	bne.n	8019a20 <round+0x60>
 8019a10:	4630      	mov	r0, r6
 8019a12:	4639      	mov	r1, r7
 8019a14:	ee10 2a10 	vmov	r2, s0
 8019a18:	f7e6 fc38 	bl	800028c <__adddf3>
 8019a1c:	4606      	mov	r6, r0
 8019a1e:	460f      	mov	r7, r1
 8019a20:	ec47 6b10 	vmov	d0, r6, r7
 8019a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a26:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8019a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8019a2e:	40d0      	lsrs	r0, r2
 8019a30:	4206      	tst	r6, r0
 8019a32:	d0f5      	beq.n	8019a20 <round+0x60>
 8019a34:	2201      	movs	r2, #1
 8019a36:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8019a3a:	fa02 f404 	lsl.w	r4, r2, r4
 8019a3e:	1931      	adds	r1, r6, r4
 8019a40:	bf28      	it	cs
 8019a42:	189b      	addcs	r3, r3, r2
 8019a44:	ea21 0100 	bic.w	r1, r1, r0
 8019a48:	461f      	mov	r7, r3
 8019a4a:	460e      	mov	r6, r1
 8019a4c:	e7e8      	b.n	8019a20 <round+0x60>
 8019a4e:	bf00      	nop
 8019a50:	000fffff 	.word	0x000fffff
 8019a54:	00000000 	.word	0x00000000

08019a58 <sin>:
 8019a58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019a5a:	ec51 0b10 	vmov	r0, r1, d0
 8019a5e:	4a20      	ldr	r2, [pc, #128]	; (8019ae0 <sin+0x88>)
 8019a60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019a64:	4293      	cmp	r3, r2
 8019a66:	dc07      	bgt.n	8019a78 <sin+0x20>
 8019a68:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8019ad8 <sin+0x80>
 8019a6c:	2000      	movs	r0, #0
 8019a6e:	f001 f863 	bl	801ab38 <__kernel_sin>
 8019a72:	ec51 0b10 	vmov	r0, r1, d0
 8019a76:	e007      	b.n	8019a88 <sin+0x30>
 8019a78:	4a1a      	ldr	r2, [pc, #104]	; (8019ae4 <sin+0x8c>)
 8019a7a:	4293      	cmp	r3, r2
 8019a7c:	dd09      	ble.n	8019a92 <sin+0x3a>
 8019a7e:	ee10 2a10 	vmov	r2, s0
 8019a82:	460b      	mov	r3, r1
 8019a84:	f7e6 fc00 	bl	8000288 <__aeabi_dsub>
 8019a88:	ec41 0b10 	vmov	d0, r0, r1
 8019a8c:	b005      	add	sp, #20
 8019a8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8019a92:	4668      	mov	r0, sp
 8019a94:	f000 f9a4 	bl	8019de0 <__ieee754_rem_pio2>
 8019a98:	f000 0003 	and.w	r0, r0, #3
 8019a9c:	2801      	cmp	r0, #1
 8019a9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019aa2:	ed9d 0b00 	vldr	d0, [sp]
 8019aa6:	d004      	beq.n	8019ab2 <sin+0x5a>
 8019aa8:	2802      	cmp	r0, #2
 8019aaa:	d005      	beq.n	8019ab8 <sin+0x60>
 8019aac:	b970      	cbnz	r0, 8019acc <sin+0x74>
 8019aae:	2001      	movs	r0, #1
 8019ab0:	e7dd      	b.n	8019a6e <sin+0x16>
 8019ab2:	f000 fc39 	bl	801a328 <__kernel_cos>
 8019ab6:	e7dc      	b.n	8019a72 <sin+0x1a>
 8019ab8:	2001      	movs	r0, #1
 8019aba:	f001 f83d 	bl	801ab38 <__kernel_sin>
 8019abe:	ec53 2b10 	vmov	r2, r3, d0
 8019ac2:	ee10 0a10 	vmov	r0, s0
 8019ac6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019aca:	e7dd      	b.n	8019a88 <sin+0x30>
 8019acc:	f000 fc2c 	bl	801a328 <__kernel_cos>
 8019ad0:	e7f5      	b.n	8019abe <sin+0x66>
 8019ad2:	bf00      	nop
 8019ad4:	f3af 8000 	nop.w
	...
 8019ae0:	3fe921fb 	.word	0x3fe921fb
 8019ae4:	7fefffff 	.word	0x7fefffff

08019ae8 <ceilf>:
 8019ae8:	ee10 3a10 	vmov	r3, s0
 8019aec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019af0:	0dca      	lsrs	r2, r1, #23
 8019af2:	3a7f      	subs	r2, #127	; 0x7f
 8019af4:	2a16      	cmp	r2, #22
 8019af6:	dc2a      	bgt.n	8019b4e <ceilf+0x66>
 8019af8:	2a00      	cmp	r2, #0
 8019afa:	da11      	bge.n	8019b20 <ceilf+0x38>
 8019afc:	eddf 7a18 	vldr	s15, [pc, #96]	; 8019b60 <ceilf+0x78>
 8019b00:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019b04:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b0c:	dd05      	ble.n	8019b1a <ceilf+0x32>
 8019b0e:	2b00      	cmp	r3, #0
 8019b10:	db23      	blt.n	8019b5a <ceilf+0x72>
 8019b12:	2900      	cmp	r1, #0
 8019b14:	bf18      	it	ne
 8019b16:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8019b1a:	ee00 3a10 	vmov	s0, r3
 8019b1e:	4770      	bx	lr
 8019b20:	4910      	ldr	r1, [pc, #64]	; (8019b64 <ceilf+0x7c>)
 8019b22:	4111      	asrs	r1, r2
 8019b24:	420b      	tst	r3, r1
 8019b26:	d0fa      	beq.n	8019b1e <ceilf+0x36>
 8019b28:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8019b60 <ceilf+0x78>
 8019b2c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019b30:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b38:	ddef      	ble.n	8019b1a <ceilf+0x32>
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	bfc2      	ittt	gt
 8019b3e:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8019b42:	fa40 f202 	asrgt.w	r2, r0, r2
 8019b46:	189b      	addgt	r3, r3, r2
 8019b48:	ea23 0301 	bic.w	r3, r3, r1
 8019b4c:	e7e5      	b.n	8019b1a <ceilf+0x32>
 8019b4e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019b52:	d3e4      	bcc.n	8019b1e <ceilf+0x36>
 8019b54:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019b58:	4770      	bx	lr
 8019b5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8019b5e:	e7dc      	b.n	8019b1a <ceilf+0x32>
 8019b60:	7149f2ca 	.word	0x7149f2ca
 8019b64:	007fffff 	.word	0x007fffff

08019b68 <atan2>:
 8019b68:	f000 b85a 	b.w	8019c20 <__ieee754_atan2>

08019b6c <sqrt>:
 8019b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019b70:	ed2d 8b02 	vpush	{d8}
 8019b74:	b08b      	sub	sp, #44	; 0x2c
 8019b76:	ec55 4b10 	vmov	r4, r5, d0
 8019b7a:	f000 fb23 	bl	801a1c4 <__ieee754_sqrt>
 8019b7e:	4b26      	ldr	r3, [pc, #152]	; (8019c18 <sqrt+0xac>)
 8019b80:	eeb0 8a40 	vmov.f32	s16, s0
 8019b84:	eef0 8a60 	vmov.f32	s17, s1
 8019b88:	f993 6000 	ldrsb.w	r6, [r3]
 8019b8c:	1c73      	adds	r3, r6, #1
 8019b8e:	d02a      	beq.n	8019be6 <sqrt+0x7a>
 8019b90:	4622      	mov	r2, r4
 8019b92:	462b      	mov	r3, r5
 8019b94:	4620      	mov	r0, r4
 8019b96:	4629      	mov	r1, r5
 8019b98:	f7e6 ffc8 	bl	8000b2c <__aeabi_dcmpun>
 8019b9c:	4607      	mov	r7, r0
 8019b9e:	bb10      	cbnz	r0, 8019be6 <sqrt+0x7a>
 8019ba0:	f04f 0800 	mov.w	r8, #0
 8019ba4:	f04f 0900 	mov.w	r9, #0
 8019ba8:	4642      	mov	r2, r8
 8019baa:	464b      	mov	r3, r9
 8019bac:	4620      	mov	r0, r4
 8019bae:	4629      	mov	r1, r5
 8019bb0:	f7e6 ff94 	bl	8000adc <__aeabi_dcmplt>
 8019bb4:	b1b8      	cbz	r0, 8019be6 <sqrt+0x7a>
 8019bb6:	2301      	movs	r3, #1
 8019bb8:	9300      	str	r3, [sp, #0]
 8019bba:	4b18      	ldr	r3, [pc, #96]	; (8019c1c <sqrt+0xb0>)
 8019bbc:	9301      	str	r3, [sp, #4]
 8019bbe:	9708      	str	r7, [sp, #32]
 8019bc0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8019bc4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8019bc8:	b9b6      	cbnz	r6, 8019bf8 <sqrt+0x8c>
 8019bca:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8019bce:	4668      	mov	r0, sp
 8019bd0:	f001 fa9e 	bl	801b110 <matherr>
 8019bd4:	b1d0      	cbz	r0, 8019c0c <sqrt+0xa0>
 8019bd6:	9b08      	ldr	r3, [sp, #32]
 8019bd8:	b11b      	cbz	r3, 8019be2 <sqrt+0x76>
 8019bda:	f7fc f885 	bl	8015ce8 <__errno>
 8019bde:	9b08      	ldr	r3, [sp, #32]
 8019be0:	6003      	str	r3, [r0, #0]
 8019be2:	ed9d 8b06 	vldr	d8, [sp, #24]
 8019be6:	eeb0 0a48 	vmov.f32	s0, s16
 8019bea:	eef0 0a68 	vmov.f32	s1, s17
 8019bee:	b00b      	add	sp, #44	; 0x2c
 8019bf0:	ecbd 8b02 	vpop	{d8}
 8019bf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019bf8:	4642      	mov	r2, r8
 8019bfa:	464b      	mov	r3, r9
 8019bfc:	4640      	mov	r0, r8
 8019bfe:	4649      	mov	r1, r9
 8019c00:	f7e6 fe24 	bl	800084c <__aeabi_ddiv>
 8019c04:	2e02      	cmp	r6, #2
 8019c06:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019c0a:	d1e0      	bne.n	8019bce <sqrt+0x62>
 8019c0c:	f7fc f86c 	bl	8015ce8 <__errno>
 8019c10:	2321      	movs	r3, #33	; 0x21
 8019c12:	6003      	str	r3, [r0, #0]
 8019c14:	e7df      	b.n	8019bd6 <sqrt+0x6a>
 8019c16:	bf00      	nop
 8019c18:	200023dc 	.word	0x200023dc
 8019c1c:	0801b7de 	.word	0x0801b7de

08019c20 <__ieee754_atan2>:
 8019c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c24:	ec57 6b11 	vmov	r6, r7, d1
 8019c28:	4273      	negs	r3, r6
 8019c2a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8019c2e:	4333      	orrs	r3, r6
 8019c30:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8019dd8 <__ieee754_atan2+0x1b8>
 8019c34:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8019c38:	4573      	cmp	r3, lr
 8019c3a:	ec51 0b10 	vmov	r0, r1, d0
 8019c3e:	ee11 8a10 	vmov	r8, s2
 8019c42:	d80a      	bhi.n	8019c5a <__ieee754_atan2+0x3a>
 8019c44:	4244      	negs	r4, r0
 8019c46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019c4a:	4304      	orrs	r4, r0
 8019c4c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8019c50:	4574      	cmp	r4, lr
 8019c52:	468c      	mov	ip, r1
 8019c54:	ee10 9a10 	vmov	r9, s0
 8019c58:	d907      	bls.n	8019c6a <__ieee754_atan2+0x4a>
 8019c5a:	4632      	mov	r2, r6
 8019c5c:	463b      	mov	r3, r7
 8019c5e:	f7e6 fb15 	bl	800028c <__adddf3>
 8019c62:	ec41 0b10 	vmov	d0, r0, r1
 8019c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c6a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8019c6e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019c72:	4334      	orrs	r4, r6
 8019c74:	d103      	bne.n	8019c7e <__ieee754_atan2+0x5e>
 8019c76:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c7a:	f001 b819 	b.w	801acb0 <atan>
 8019c7e:	17bc      	asrs	r4, r7, #30
 8019c80:	f004 0402 	and.w	r4, r4, #2
 8019c84:	ea53 0909 	orrs.w	r9, r3, r9
 8019c88:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8019c8c:	d107      	bne.n	8019c9e <__ieee754_atan2+0x7e>
 8019c8e:	2c02      	cmp	r4, #2
 8019c90:	d073      	beq.n	8019d7a <__ieee754_atan2+0x15a>
 8019c92:	2c03      	cmp	r4, #3
 8019c94:	d1e5      	bne.n	8019c62 <__ieee754_atan2+0x42>
 8019c96:	a13e      	add	r1, pc, #248	; (adr r1, 8019d90 <__ieee754_atan2+0x170>)
 8019c98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019c9c:	e7e1      	b.n	8019c62 <__ieee754_atan2+0x42>
 8019c9e:	ea52 0808 	orrs.w	r8, r2, r8
 8019ca2:	d106      	bne.n	8019cb2 <__ieee754_atan2+0x92>
 8019ca4:	f1bc 0f00 	cmp.w	ip, #0
 8019ca8:	da6b      	bge.n	8019d82 <__ieee754_atan2+0x162>
 8019caa:	a13b      	add	r1, pc, #236	; (adr r1, 8019d98 <__ieee754_atan2+0x178>)
 8019cac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cb0:	e7d7      	b.n	8019c62 <__ieee754_atan2+0x42>
 8019cb2:	4572      	cmp	r2, lr
 8019cb4:	d120      	bne.n	8019cf8 <__ieee754_atan2+0xd8>
 8019cb6:	4293      	cmp	r3, r2
 8019cb8:	d111      	bne.n	8019cde <__ieee754_atan2+0xbe>
 8019cba:	2c02      	cmp	r4, #2
 8019cbc:	d007      	beq.n	8019cce <__ieee754_atan2+0xae>
 8019cbe:	2c03      	cmp	r4, #3
 8019cc0:	d009      	beq.n	8019cd6 <__ieee754_atan2+0xb6>
 8019cc2:	2c01      	cmp	r4, #1
 8019cc4:	d155      	bne.n	8019d72 <__ieee754_atan2+0x152>
 8019cc6:	a136      	add	r1, pc, #216	; (adr r1, 8019da0 <__ieee754_atan2+0x180>)
 8019cc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ccc:	e7c9      	b.n	8019c62 <__ieee754_atan2+0x42>
 8019cce:	a136      	add	r1, pc, #216	; (adr r1, 8019da8 <__ieee754_atan2+0x188>)
 8019cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cd4:	e7c5      	b.n	8019c62 <__ieee754_atan2+0x42>
 8019cd6:	a136      	add	r1, pc, #216	; (adr r1, 8019db0 <__ieee754_atan2+0x190>)
 8019cd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cdc:	e7c1      	b.n	8019c62 <__ieee754_atan2+0x42>
 8019cde:	2c02      	cmp	r4, #2
 8019ce0:	d04b      	beq.n	8019d7a <__ieee754_atan2+0x15a>
 8019ce2:	2c03      	cmp	r4, #3
 8019ce4:	d0d7      	beq.n	8019c96 <__ieee754_atan2+0x76>
 8019ce6:	2c01      	cmp	r4, #1
 8019ce8:	f04f 0000 	mov.w	r0, #0
 8019cec:	d102      	bne.n	8019cf4 <__ieee754_atan2+0xd4>
 8019cee:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8019cf2:	e7b6      	b.n	8019c62 <__ieee754_atan2+0x42>
 8019cf4:	2100      	movs	r1, #0
 8019cf6:	e7b4      	b.n	8019c62 <__ieee754_atan2+0x42>
 8019cf8:	4573      	cmp	r3, lr
 8019cfa:	d0d3      	beq.n	8019ca4 <__ieee754_atan2+0x84>
 8019cfc:	1a9b      	subs	r3, r3, r2
 8019cfe:	151b      	asrs	r3, r3, #20
 8019d00:	2b3c      	cmp	r3, #60	; 0x3c
 8019d02:	dc1e      	bgt.n	8019d42 <__ieee754_atan2+0x122>
 8019d04:	2f00      	cmp	r7, #0
 8019d06:	da01      	bge.n	8019d0c <__ieee754_atan2+0xec>
 8019d08:	333c      	adds	r3, #60	; 0x3c
 8019d0a:	db1e      	blt.n	8019d4a <__ieee754_atan2+0x12a>
 8019d0c:	4632      	mov	r2, r6
 8019d0e:	463b      	mov	r3, r7
 8019d10:	f7e6 fd9c 	bl	800084c <__aeabi_ddiv>
 8019d14:	ec41 0b10 	vmov	d0, r0, r1
 8019d18:	f001 f96a 	bl	801aff0 <fabs>
 8019d1c:	f000 ffc8 	bl	801acb0 <atan>
 8019d20:	ec51 0b10 	vmov	r0, r1, d0
 8019d24:	2c01      	cmp	r4, #1
 8019d26:	d013      	beq.n	8019d50 <__ieee754_atan2+0x130>
 8019d28:	2c02      	cmp	r4, #2
 8019d2a:	d015      	beq.n	8019d58 <__ieee754_atan2+0x138>
 8019d2c:	2c00      	cmp	r4, #0
 8019d2e:	d098      	beq.n	8019c62 <__ieee754_atan2+0x42>
 8019d30:	a321      	add	r3, pc, #132	; (adr r3, 8019db8 <__ieee754_atan2+0x198>)
 8019d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d36:	f7e6 faa7 	bl	8000288 <__aeabi_dsub>
 8019d3a:	a321      	add	r3, pc, #132	; (adr r3, 8019dc0 <__ieee754_atan2+0x1a0>)
 8019d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d40:	e014      	b.n	8019d6c <__ieee754_atan2+0x14c>
 8019d42:	a121      	add	r1, pc, #132	; (adr r1, 8019dc8 <__ieee754_atan2+0x1a8>)
 8019d44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d48:	e7ec      	b.n	8019d24 <__ieee754_atan2+0x104>
 8019d4a:	2000      	movs	r0, #0
 8019d4c:	2100      	movs	r1, #0
 8019d4e:	e7e9      	b.n	8019d24 <__ieee754_atan2+0x104>
 8019d50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019d54:	4619      	mov	r1, r3
 8019d56:	e784      	b.n	8019c62 <__ieee754_atan2+0x42>
 8019d58:	a317      	add	r3, pc, #92	; (adr r3, 8019db8 <__ieee754_atan2+0x198>)
 8019d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d5e:	f7e6 fa93 	bl	8000288 <__aeabi_dsub>
 8019d62:	4602      	mov	r2, r0
 8019d64:	460b      	mov	r3, r1
 8019d66:	a116      	add	r1, pc, #88	; (adr r1, 8019dc0 <__ieee754_atan2+0x1a0>)
 8019d68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d6c:	f7e6 fa8c 	bl	8000288 <__aeabi_dsub>
 8019d70:	e777      	b.n	8019c62 <__ieee754_atan2+0x42>
 8019d72:	a117      	add	r1, pc, #92	; (adr r1, 8019dd0 <__ieee754_atan2+0x1b0>)
 8019d74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d78:	e773      	b.n	8019c62 <__ieee754_atan2+0x42>
 8019d7a:	a111      	add	r1, pc, #68	; (adr r1, 8019dc0 <__ieee754_atan2+0x1a0>)
 8019d7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d80:	e76f      	b.n	8019c62 <__ieee754_atan2+0x42>
 8019d82:	a111      	add	r1, pc, #68	; (adr r1, 8019dc8 <__ieee754_atan2+0x1a8>)
 8019d84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d88:	e76b      	b.n	8019c62 <__ieee754_atan2+0x42>
 8019d8a:	bf00      	nop
 8019d8c:	f3af 8000 	nop.w
 8019d90:	54442d18 	.word	0x54442d18
 8019d94:	c00921fb 	.word	0xc00921fb
 8019d98:	54442d18 	.word	0x54442d18
 8019d9c:	bff921fb 	.word	0xbff921fb
 8019da0:	54442d18 	.word	0x54442d18
 8019da4:	bfe921fb 	.word	0xbfe921fb
 8019da8:	7f3321d2 	.word	0x7f3321d2
 8019dac:	4002d97c 	.word	0x4002d97c
 8019db0:	7f3321d2 	.word	0x7f3321d2
 8019db4:	c002d97c 	.word	0xc002d97c
 8019db8:	33145c07 	.word	0x33145c07
 8019dbc:	3ca1a626 	.word	0x3ca1a626
 8019dc0:	54442d18 	.word	0x54442d18
 8019dc4:	400921fb 	.word	0x400921fb
 8019dc8:	54442d18 	.word	0x54442d18
 8019dcc:	3ff921fb 	.word	0x3ff921fb
 8019dd0:	54442d18 	.word	0x54442d18
 8019dd4:	3fe921fb 	.word	0x3fe921fb
 8019dd8:	7ff00000 	.word	0x7ff00000
 8019ddc:	00000000 	.word	0x00000000

08019de0 <__ieee754_rem_pio2>:
 8019de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019de4:	ec57 6b10 	vmov	r6, r7, d0
 8019de8:	4bc3      	ldr	r3, [pc, #780]	; (801a0f8 <__ieee754_rem_pio2+0x318>)
 8019dea:	b08d      	sub	sp, #52	; 0x34
 8019dec:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8019df0:	4598      	cmp	r8, r3
 8019df2:	4604      	mov	r4, r0
 8019df4:	9704      	str	r7, [sp, #16]
 8019df6:	dc07      	bgt.n	8019e08 <__ieee754_rem_pio2+0x28>
 8019df8:	2200      	movs	r2, #0
 8019dfa:	2300      	movs	r3, #0
 8019dfc:	ed84 0b00 	vstr	d0, [r4]
 8019e00:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019e04:	2500      	movs	r5, #0
 8019e06:	e027      	b.n	8019e58 <__ieee754_rem_pio2+0x78>
 8019e08:	4bbc      	ldr	r3, [pc, #752]	; (801a0fc <__ieee754_rem_pio2+0x31c>)
 8019e0a:	4598      	cmp	r8, r3
 8019e0c:	dc75      	bgt.n	8019efa <__ieee754_rem_pio2+0x11a>
 8019e0e:	9b04      	ldr	r3, [sp, #16]
 8019e10:	4dbb      	ldr	r5, [pc, #748]	; (801a100 <__ieee754_rem_pio2+0x320>)
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	ee10 0a10 	vmov	r0, s0
 8019e18:	a3a9      	add	r3, pc, #676	; (adr r3, 801a0c0 <__ieee754_rem_pio2+0x2e0>)
 8019e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e1e:	4639      	mov	r1, r7
 8019e20:	dd36      	ble.n	8019e90 <__ieee754_rem_pio2+0xb0>
 8019e22:	f7e6 fa31 	bl	8000288 <__aeabi_dsub>
 8019e26:	45a8      	cmp	r8, r5
 8019e28:	4606      	mov	r6, r0
 8019e2a:	460f      	mov	r7, r1
 8019e2c:	d018      	beq.n	8019e60 <__ieee754_rem_pio2+0x80>
 8019e2e:	a3a6      	add	r3, pc, #664	; (adr r3, 801a0c8 <__ieee754_rem_pio2+0x2e8>)
 8019e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e34:	f7e6 fa28 	bl	8000288 <__aeabi_dsub>
 8019e38:	4602      	mov	r2, r0
 8019e3a:	460b      	mov	r3, r1
 8019e3c:	e9c4 2300 	strd	r2, r3, [r4]
 8019e40:	4630      	mov	r0, r6
 8019e42:	4639      	mov	r1, r7
 8019e44:	f7e6 fa20 	bl	8000288 <__aeabi_dsub>
 8019e48:	a39f      	add	r3, pc, #636	; (adr r3, 801a0c8 <__ieee754_rem_pio2+0x2e8>)
 8019e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e4e:	f7e6 fa1b 	bl	8000288 <__aeabi_dsub>
 8019e52:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019e56:	2501      	movs	r5, #1
 8019e58:	4628      	mov	r0, r5
 8019e5a:	b00d      	add	sp, #52	; 0x34
 8019e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e60:	a39b      	add	r3, pc, #620	; (adr r3, 801a0d0 <__ieee754_rem_pio2+0x2f0>)
 8019e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e66:	f7e6 fa0f 	bl	8000288 <__aeabi_dsub>
 8019e6a:	a39b      	add	r3, pc, #620	; (adr r3, 801a0d8 <__ieee754_rem_pio2+0x2f8>)
 8019e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e70:	4606      	mov	r6, r0
 8019e72:	460f      	mov	r7, r1
 8019e74:	f7e6 fa08 	bl	8000288 <__aeabi_dsub>
 8019e78:	4602      	mov	r2, r0
 8019e7a:	460b      	mov	r3, r1
 8019e7c:	e9c4 2300 	strd	r2, r3, [r4]
 8019e80:	4630      	mov	r0, r6
 8019e82:	4639      	mov	r1, r7
 8019e84:	f7e6 fa00 	bl	8000288 <__aeabi_dsub>
 8019e88:	a393      	add	r3, pc, #588	; (adr r3, 801a0d8 <__ieee754_rem_pio2+0x2f8>)
 8019e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e8e:	e7de      	b.n	8019e4e <__ieee754_rem_pio2+0x6e>
 8019e90:	f7e6 f9fc 	bl	800028c <__adddf3>
 8019e94:	45a8      	cmp	r8, r5
 8019e96:	4606      	mov	r6, r0
 8019e98:	460f      	mov	r7, r1
 8019e9a:	d016      	beq.n	8019eca <__ieee754_rem_pio2+0xea>
 8019e9c:	a38a      	add	r3, pc, #552	; (adr r3, 801a0c8 <__ieee754_rem_pio2+0x2e8>)
 8019e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ea2:	f7e6 f9f3 	bl	800028c <__adddf3>
 8019ea6:	4602      	mov	r2, r0
 8019ea8:	460b      	mov	r3, r1
 8019eaa:	e9c4 2300 	strd	r2, r3, [r4]
 8019eae:	4630      	mov	r0, r6
 8019eb0:	4639      	mov	r1, r7
 8019eb2:	f7e6 f9e9 	bl	8000288 <__aeabi_dsub>
 8019eb6:	a384      	add	r3, pc, #528	; (adr r3, 801a0c8 <__ieee754_rem_pio2+0x2e8>)
 8019eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ebc:	f7e6 f9e6 	bl	800028c <__adddf3>
 8019ec0:	f04f 35ff 	mov.w	r5, #4294967295
 8019ec4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019ec8:	e7c6      	b.n	8019e58 <__ieee754_rem_pio2+0x78>
 8019eca:	a381      	add	r3, pc, #516	; (adr r3, 801a0d0 <__ieee754_rem_pio2+0x2f0>)
 8019ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ed0:	f7e6 f9dc 	bl	800028c <__adddf3>
 8019ed4:	a380      	add	r3, pc, #512	; (adr r3, 801a0d8 <__ieee754_rem_pio2+0x2f8>)
 8019ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019eda:	4606      	mov	r6, r0
 8019edc:	460f      	mov	r7, r1
 8019ede:	f7e6 f9d5 	bl	800028c <__adddf3>
 8019ee2:	4602      	mov	r2, r0
 8019ee4:	460b      	mov	r3, r1
 8019ee6:	e9c4 2300 	strd	r2, r3, [r4]
 8019eea:	4630      	mov	r0, r6
 8019eec:	4639      	mov	r1, r7
 8019eee:	f7e6 f9cb 	bl	8000288 <__aeabi_dsub>
 8019ef2:	a379      	add	r3, pc, #484	; (adr r3, 801a0d8 <__ieee754_rem_pio2+0x2f8>)
 8019ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ef8:	e7e0      	b.n	8019ebc <__ieee754_rem_pio2+0xdc>
 8019efa:	4b82      	ldr	r3, [pc, #520]	; (801a104 <__ieee754_rem_pio2+0x324>)
 8019efc:	4598      	cmp	r8, r3
 8019efe:	f300 80d0 	bgt.w	801a0a2 <__ieee754_rem_pio2+0x2c2>
 8019f02:	f001 f875 	bl	801aff0 <fabs>
 8019f06:	ec57 6b10 	vmov	r6, r7, d0
 8019f0a:	ee10 0a10 	vmov	r0, s0
 8019f0e:	a374      	add	r3, pc, #464	; (adr r3, 801a0e0 <__ieee754_rem_pio2+0x300>)
 8019f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f14:	4639      	mov	r1, r7
 8019f16:	f7e6 fb6f 	bl	80005f8 <__aeabi_dmul>
 8019f1a:	2200      	movs	r2, #0
 8019f1c:	4b7a      	ldr	r3, [pc, #488]	; (801a108 <__ieee754_rem_pio2+0x328>)
 8019f1e:	f7e6 f9b5 	bl	800028c <__adddf3>
 8019f22:	f7e6 fe19 	bl	8000b58 <__aeabi_d2iz>
 8019f26:	4605      	mov	r5, r0
 8019f28:	f7e6 fafc 	bl	8000524 <__aeabi_i2d>
 8019f2c:	a364      	add	r3, pc, #400	; (adr r3, 801a0c0 <__ieee754_rem_pio2+0x2e0>)
 8019f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019f36:	f7e6 fb5f 	bl	80005f8 <__aeabi_dmul>
 8019f3a:	4602      	mov	r2, r0
 8019f3c:	460b      	mov	r3, r1
 8019f3e:	4630      	mov	r0, r6
 8019f40:	4639      	mov	r1, r7
 8019f42:	f7e6 f9a1 	bl	8000288 <__aeabi_dsub>
 8019f46:	a360      	add	r3, pc, #384	; (adr r3, 801a0c8 <__ieee754_rem_pio2+0x2e8>)
 8019f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f4c:	4682      	mov	sl, r0
 8019f4e:	468b      	mov	fp, r1
 8019f50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019f54:	f7e6 fb50 	bl	80005f8 <__aeabi_dmul>
 8019f58:	2d1f      	cmp	r5, #31
 8019f5a:	4606      	mov	r6, r0
 8019f5c:	460f      	mov	r7, r1
 8019f5e:	dc0c      	bgt.n	8019f7a <__ieee754_rem_pio2+0x19a>
 8019f60:	1e6a      	subs	r2, r5, #1
 8019f62:	4b6a      	ldr	r3, [pc, #424]	; (801a10c <__ieee754_rem_pio2+0x32c>)
 8019f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019f68:	4543      	cmp	r3, r8
 8019f6a:	d006      	beq.n	8019f7a <__ieee754_rem_pio2+0x19a>
 8019f6c:	4632      	mov	r2, r6
 8019f6e:	463b      	mov	r3, r7
 8019f70:	4650      	mov	r0, sl
 8019f72:	4659      	mov	r1, fp
 8019f74:	f7e6 f988 	bl	8000288 <__aeabi_dsub>
 8019f78:	e00e      	b.n	8019f98 <__ieee754_rem_pio2+0x1b8>
 8019f7a:	4632      	mov	r2, r6
 8019f7c:	463b      	mov	r3, r7
 8019f7e:	4650      	mov	r0, sl
 8019f80:	4659      	mov	r1, fp
 8019f82:	f7e6 f981 	bl	8000288 <__aeabi_dsub>
 8019f86:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019f8a:	9305      	str	r3, [sp, #20]
 8019f8c:	9a05      	ldr	r2, [sp, #20]
 8019f8e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019f92:	1ad3      	subs	r3, r2, r3
 8019f94:	2b10      	cmp	r3, #16
 8019f96:	dc02      	bgt.n	8019f9e <__ieee754_rem_pio2+0x1be>
 8019f98:	e9c4 0100 	strd	r0, r1, [r4]
 8019f9c:	e039      	b.n	801a012 <__ieee754_rem_pio2+0x232>
 8019f9e:	a34c      	add	r3, pc, #304	; (adr r3, 801a0d0 <__ieee754_rem_pio2+0x2f0>)
 8019fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019fa8:	f7e6 fb26 	bl	80005f8 <__aeabi_dmul>
 8019fac:	4606      	mov	r6, r0
 8019fae:	460f      	mov	r7, r1
 8019fb0:	4602      	mov	r2, r0
 8019fb2:	460b      	mov	r3, r1
 8019fb4:	4650      	mov	r0, sl
 8019fb6:	4659      	mov	r1, fp
 8019fb8:	f7e6 f966 	bl	8000288 <__aeabi_dsub>
 8019fbc:	4602      	mov	r2, r0
 8019fbe:	460b      	mov	r3, r1
 8019fc0:	4680      	mov	r8, r0
 8019fc2:	4689      	mov	r9, r1
 8019fc4:	4650      	mov	r0, sl
 8019fc6:	4659      	mov	r1, fp
 8019fc8:	f7e6 f95e 	bl	8000288 <__aeabi_dsub>
 8019fcc:	4632      	mov	r2, r6
 8019fce:	463b      	mov	r3, r7
 8019fd0:	f7e6 f95a 	bl	8000288 <__aeabi_dsub>
 8019fd4:	a340      	add	r3, pc, #256	; (adr r3, 801a0d8 <__ieee754_rem_pio2+0x2f8>)
 8019fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fda:	4606      	mov	r6, r0
 8019fdc:	460f      	mov	r7, r1
 8019fde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019fe2:	f7e6 fb09 	bl	80005f8 <__aeabi_dmul>
 8019fe6:	4632      	mov	r2, r6
 8019fe8:	463b      	mov	r3, r7
 8019fea:	f7e6 f94d 	bl	8000288 <__aeabi_dsub>
 8019fee:	4602      	mov	r2, r0
 8019ff0:	460b      	mov	r3, r1
 8019ff2:	4606      	mov	r6, r0
 8019ff4:	460f      	mov	r7, r1
 8019ff6:	4640      	mov	r0, r8
 8019ff8:	4649      	mov	r1, r9
 8019ffa:	f7e6 f945 	bl	8000288 <__aeabi_dsub>
 8019ffe:	9a05      	ldr	r2, [sp, #20]
 801a000:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a004:	1ad3      	subs	r3, r2, r3
 801a006:	2b31      	cmp	r3, #49	; 0x31
 801a008:	dc20      	bgt.n	801a04c <__ieee754_rem_pio2+0x26c>
 801a00a:	e9c4 0100 	strd	r0, r1, [r4]
 801a00e:	46c2      	mov	sl, r8
 801a010:	46cb      	mov	fp, r9
 801a012:	e9d4 8900 	ldrd	r8, r9, [r4]
 801a016:	4650      	mov	r0, sl
 801a018:	4642      	mov	r2, r8
 801a01a:	464b      	mov	r3, r9
 801a01c:	4659      	mov	r1, fp
 801a01e:	f7e6 f933 	bl	8000288 <__aeabi_dsub>
 801a022:	463b      	mov	r3, r7
 801a024:	4632      	mov	r2, r6
 801a026:	f7e6 f92f 	bl	8000288 <__aeabi_dsub>
 801a02a:	9b04      	ldr	r3, [sp, #16]
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a032:	f6bf af11 	bge.w	8019e58 <__ieee754_rem_pio2+0x78>
 801a036:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a03a:	6063      	str	r3, [r4, #4]
 801a03c:	f8c4 8000 	str.w	r8, [r4]
 801a040:	60a0      	str	r0, [r4, #8]
 801a042:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a046:	60e3      	str	r3, [r4, #12]
 801a048:	426d      	negs	r5, r5
 801a04a:	e705      	b.n	8019e58 <__ieee754_rem_pio2+0x78>
 801a04c:	a326      	add	r3, pc, #152	; (adr r3, 801a0e8 <__ieee754_rem_pio2+0x308>)
 801a04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a052:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a056:	f7e6 facf 	bl	80005f8 <__aeabi_dmul>
 801a05a:	4606      	mov	r6, r0
 801a05c:	460f      	mov	r7, r1
 801a05e:	4602      	mov	r2, r0
 801a060:	460b      	mov	r3, r1
 801a062:	4640      	mov	r0, r8
 801a064:	4649      	mov	r1, r9
 801a066:	f7e6 f90f 	bl	8000288 <__aeabi_dsub>
 801a06a:	4602      	mov	r2, r0
 801a06c:	460b      	mov	r3, r1
 801a06e:	4682      	mov	sl, r0
 801a070:	468b      	mov	fp, r1
 801a072:	4640      	mov	r0, r8
 801a074:	4649      	mov	r1, r9
 801a076:	f7e6 f907 	bl	8000288 <__aeabi_dsub>
 801a07a:	4632      	mov	r2, r6
 801a07c:	463b      	mov	r3, r7
 801a07e:	f7e6 f903 	bl	8000288 <__aeabi_dsub>
 801a082:	a31b      	add	r3, pc, #108	; (adr r3, 801a0f0 <__ieee754_rem_pio2+0x310>)
 801a084:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a088:	4606      	mov	r6, r0
 801a08a:	460f      	mov	r7, r1
 801a08c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a090:	f7e6 fab2 	bl	80005f8 <__aeabi_dmul>
 801a094:	4632      	mov	r2, r6
 801a096:	463b      	mov	r3, r7
 801a098:	f7e6 f8f6 	bl	8000288 <__aeabi_dsub>
 801a09c:	4606      	mov	r6, r0
 801a09e:	460f      	mov	r7, r1
 801a0a0:	e764      	b.n	8019f6c <__ieee754_rem_pio2+0x18c>
 801a0a2:	4b1b      	ldr	r3, [pc, #108]	; (801a110 <__ieee754_rem_pio2+0x330>)
 801a0a4:	4598      	cmp	r8, r3
 801a0a6:	dd35      	ble.n	801a114 <__ieee754_rem_pio2+0x334>
 801a0a8:	ee10 2a10 	vmov	r2, s0
 801a0ac:	463b      	mov	r3, r7
 801a0ae:	4630      	mov	r0, r6
 801a0b0:	4639      	mov	r1, r7
 801a0b2:	f7e6 f8e9 	bl	8000288 <__aeabi_dsub>
 801a0b6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a0ba:	e9c4 0100 	strd	r0, r1, [r4]
 801a0be:	e6a1      	b.n	8019e04 <__ieee754_rem_pio2+0x24>
 801a0c0:	54400000 	.word	0x54400000
 801a0c4:	3ff921fb 	.word	0x3ff921fb
 801a0c8:	1a626331 	.word	0x1a626331
 801a0cc:	3dd0b461 	.word	0x3dd0b461
 801a0d0:	1a600000 	.word	0x1a600000
 801a0d4:	3dd0b461 	.word	0x3dd0b461
 801a0d8:	2e037073 	.word	0x2e037073
 801a0dc:	3ba3198a 	.word	0x3ba3198a
 801a0e0:	6dc9c883 	.word	0x6dc9c883
 801a0e4:	3fe45f30 	.word	0x3fe45f30
 801a0e8:	2e000000 	.word	0x2e000000
 801a0ec:	3ba3198a 	.word	0x3ba3198a
 801a0f0:	252049c1 	.word	0x252049c1
 801a0f4:	397b839a 	.word	0x397b839a
 801a0f8:	3fe921fb 	.word	0x3fe921fb
 801a0fc:	4002d97b 	.word	0x4002d97b
 801a100:	3ff921fb 	.word	0x3ff921fb
 801a104:	413921fb 	.word	0x413921fb
 801a108:	3fe00000 	.word	0x3fe00000
 801a10c:	0801b7e4 	.word	0x0801b7e4
 801a110:	7fefffff 	.word	0x7fefffff
 801a114:	ea4f 5528 	mov.w	r5, r8, asr #20
 801a118:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801a11c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801a120:	4630      	mov	r0, r6
 801a122:	460f      	mov	r7, r1
 801a124:	f7e6 fd18 	bl	8000b58 <__aeabi_d2iz>
 801a128:	f7e6 f9fc 	bl	8000524 <__aeabi_i2d>
 801a12c:	4602      	mov	r2, r0
 801a12e:	460b      	mov	r3, r1
 801a130:	4630      	mov	r0, r6
 801a132:	4639      	mov	r1, r7
 801a134:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a138:	f7e6 f8a6 	bl	8000288 <__aeabi_dsub>
 801a13c:	2200      	movs	r2, #0
 801a13e:	4b1f      	ldr	r3, [pc, #124]	; (801a1bc <__ieee754_rem_pio2+0x3dc>)
 801a140:	f7e6 fa5a 	bl	80005f8 <__aeabi_dmul>
 801a144:	460f      	mov	r7, r1
 801a146:	4606      	mov	r6, r0
 801a148:	f7e6 fd06 	bl	8000b58 <__aeabi_d2iz>
 801a14c:	f7e6 f9ea 	bl	8000524 <__aeabi_i2d>
 801a150:	4602      	mov	r2, r0
 801a152:	460b      	mov	r3, r1
 801a154:	4630      	mov	r0, r6
 801a156:	4639      	mov	r1, r7
 801a158:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a15c:	f7e6 f894 	bl	8000288 <__aeabi_dsub>
 801a160:	2200      	movs	r2, #0
 801a162:	4b16      	ldr	r3, [pc, #88]	; (801a1bc <__ieee754_rem_pio2+0x3dc>)
 801a164:	f7e6 fa48 	bl	80005f8 <__aeabi_dmul>
 801a168:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801a16c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 801a170:	f04f 0803 	mov.w	r8, #3
 801a174:	2600      	movs	r6, #0
 801a176:	2700      	movs	r7, #0
 801a178:	4632      	mov	r2, r6
 801a17a:	463b      	mov	r3, r7
 801a17c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801a180:	f108 3aff 	add.w	sl, r8, #4294967295
 801a184:	f7e6 fca0 	bl	8000ac8 <__aeabi_dcmpeq>
 801a188:	b9b0      	cbnz	r0, 801a1b8 <__ieee754_rem_pio2+0x3d8>
 801a18a:	4b0d      	ldr	r3, [pc, #52]	; (801a1c0 <__ieee754_rem_pio2+0x3e0>)
 801a18c:	9301      	str	r3, [sp, #4]
 801a18e:	2302      	movs	r3, #2
 801a190:	9300      	str	r3, [sp, #0]
 801a192:	462a      	mov	r2, r5
 801a194:	4643      	mov	r3, r8
 801a196:	4621      	mov	r1, r4
 801a198:	a806      	add	r0, sp, #24
 801a19a:	f000 f98d 	bl	801a4b8 <__kernel_rem_pio2>
 801a19e:	9b04      	ldr	r3, [sp, #16]
 801a1a0:	2b00      	cmp	r3, #0
 801a1a2:	4605      	mov	r5, r0
 801a1a4:	f6bf ae58 	bge.w	8019e58 <__ieee754_rem_pio2+0x78>
 801a1a8:	6863      	ldr	r3, [r4, #4]
 801a1aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a1ae:	6063      	str	r3, [r4, #4]
 801a1b0:	68e3      	ldr	r3, [r4, #12]
 801a1b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a1b6:	e746      	b.n	801a046 <__ieee754_rem_pio2+0x266>
 801a1b8:	46d0      	mov	r8, sl
 801a1ba:	e7dd      	b.n	801a178 <__ieee754_rem_pio2+0x398>
 801a1bc:	41700000 	.word	0x41700000
 801a1c0:	0801b864 	.word	0x0801b864

0801a1c4 <__ieee754_sqrt>:
 801a1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1c8:	4955      	ldr	r1, [pc, #340]	; (801a320 <__ieee754_sqrt+0x15c>)
 801a1ca:	ec55 4b10 	vmov	r4, r5, d0
 801a1ce:	43a9      	bics	r1, r5
 801a1d0:	462b      	mov	r3, r5
 801a1d2:	462a      	mov	r2, r5
 801a1d4:	d112      	bne.n	801a1fc <__ieee754_sqrt+0x38>
 801a1d6:	ee10 2a10 	vmov	r2, s0
 801a1da:	ee10 0a10 	vmov	r0, s0
 801a1de:	4629      	mov	r1, r5
 801a1e0:	f7e6 fa0a 	bl	80005f8 <__aeabi_dmul>
 801a1e4:	4602      	mov	r2, r0
 801a1e6:	460b      	mov	r3, r1
 801a1e8:	4620      	mov	r0, r4
 801a1ea:	4629      	mov	r1, r5
 801a1ec:	f7e6 f84e 	bl	800028c <__adddf3>
 801a1f0:	4604      	mov	r4, r0
 801a1f2:	460d      	mov	r5, r1
 801a1f4:	ec45 4b10 	vmov	d0, r4, r5
 801a1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a1fc:	2d00      	cmp	r5, #0
 801a1fe:	ee10 0a10 	vmov	r0, s0
 801a202:	4621      	mov	r1, r4
 801a204:	dc0f      	bgt.n	801a226 <__ieee754_sqrt+0x62>
 801a206:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a20a:	4330      	orrs	r0, r6
 801a20c:	d0f2      	beq.n	801a1f4 <__ieee754_sqrt+0x30>
 801a20e:	b155      	cbz	r5, 801a226 <__ieee754_sqrt+0x62>
 801a210:	ee10 2a10 	vmov	r2, s0
 801a214:	4620      	mov	r0, r4
 801a216:	4629      	mov	r1, r5
 801a218:	f7e6 f836 	bl	8000288 <__aeabi_dsub>
 801a21c:	4602      	mov	r2, r0
 801a21e:	460b      	mov	r3, r1
 801a220:	f7e6 fb14 	bl	800084c <__aeabi_ddiv>
 801a224:	e7e4      	b.n	801a1f0 <__ieee754_sqrt+0x2c>
 801a226:	151b      	asrs	r3, r3, #20
 801a228:	d073      	beq.n	801a312 <__ieee754_sqrt+0x14e>
 801a22a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a22e:	07dd      	lsls	r5, r3, #31
 801a230:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801a234:	bf48      	it	mi
 801a236:	0fc8      	lsrmi	r0, r1, #31
 801a238:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801a23c:	bf44      	itt	mi
 801a23e:	0049      	lslmi	r1, r1, #1
 801a240:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801a244:	2500      	movs	r5, #0
 801a246:	1058      	asrs	r0, r3, #1
 801a248:	0fcb      	lsrs	r3, r1, #31
 801a24a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801a24e:	0049      	lsls	r1, r1, #1
 801a250:	2316      	movs	r3, #22
 801a252:	462c      	mov	r4, r5
 801a254:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801a258:	19a7      	adds	r7, r4, r6
 801a25a:	4297      	cmp	r7, r2
 801a25c:	bfde      	ittt	le
 801a25e:	19bc      	addle	r4, r7, r6
 801a260:	1bd2      	suble	r2, r2, r7
 801a262:	19ad      	addle	r5, r5, r6
 801a264:	0fcf      	lsrs	r7, r1, #31
 801a266:	3b01      	subs	r3, #1
 801a268:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801a26c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a270:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801a274:	d1f0      	bne.n	801a258 <__ieee754_sqrt+0x94>
 801a276:	f04f 0c20 	mov.w	ip, #32
 801a27a:	469e      	mov	lr, r3
 801a27c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801a280:	42a2      	cmp	r2, r4
 801a282:	eb06 070e 	add.w	r7, r6, lr
 801a286:	dc02      	bgt.n	801a28e <__ieee754_sqrt+0xca>
 801a288:	d112      	bne.n	801a2b0 <__ieee754_sqrt+0xec>
 801a28a:	428f      	cmp	r7, r1
 801a28c:	d810      	bhi.n	801a2b0 <__ieee754_sqrt+0xec>
 801a28e:	2f00      	cmp	r7, #0
 801a290:	eb07 0e06 	add.w	lr, r7, r6
 801a294:	da42      	bge.n	801a31c <__ieee754_sqrt+0x158>
 801a296:	f1be 0f00 	cmp.w	lr, #0
 801a29a:	db3f      	blt.n	801a31c <__ieee754_sqrt+0x158>
 801a29c:	f104 0801 	add.w	r8, r4, #1
 801a2a0:	1b12      	subs	r2, r2, r4
 801a2a2:	428f      	cmp	r7, r1
 801a2a4:	bf88      	it	hi
 801a2a6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801a2aa:	1bc9      	subs	r1, r1, r7
 801a2ac:	4433      	add	r3, r6
 801a2ae:	4644      	mov	r4, r8
 801a2b0:	0052      	lsls	r2, r2, #1
 801a2b2:	f1bc 0c01 	subs.w	ip, ip, #1
 801a2b6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801a2ba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801a2be:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a2c2:	d1dd      	bne.n	801a280 <__ieee754_sqrt+0xbc>
 801a2c4:	430a      	orrs	r2, r1
 801a2c6:	d006      	beq.n	801a2d6 <__ieee754_sqrt+0x112>
 801a2c8:	1c5c      	adds	r4, r3, #1
 801a2ca:	bf13      	iteet	ne
 801a2cc:	3301      	addne	r3, #1
 801a2ce:	3501      	addeq	r5, #1
 801a2d0:	4663      	moveq	r3, ip
 801a2d2:	f023 0301 	bicne.w	r3, r3, #1
 801a2d6:	106a      	asrs	r2, r5, #1
 801a2d8:	085b      	lsrs	r3, r3, #1
 801a2da:	07e9      	lsls	r1, r5, #31
 801a2dc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801a2e0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801a2e4:	bf48      	it	mi
 801a2e6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801a2ea:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801a2ee:	461c      	mov	r4, r3
 801a2f0:	e780      	b.n	801a1f4 <__ieee754_sqrt+0x30>
 801a2f2:	0aca      	lsrs	r2, r1, #11
 801a2f4:	3815      	subs	r0, #21
 801a2f6:	0549      	lsls	r1, r1, #21
 801a2f8:	2a00      	cmp	r2, #0
 801a2fa:	d0fa      	beq.n	801a2f2 <__ieee754_sqrt+0x12e>
 801a2fc:	02d6      	lsls	r6, r2, #11
 801a2fe:	d50a      	bpl.n	801a316 <__ieee754_sqrt+0x152>
 801a300:	f1c3 0420 	rsb	r4, r3, #32
 801a304:	fa21 f404 	lsr.w	r4, r1, r4
 801a308:	1e5d      	subs	r5, r3, #1
 801a30a:	4099      	lsls	r1, r3
 801a30c:	4322      	orrs	r2, r4
 801a30e:	1b43      	subs	r3, r0, r5
 801a310:	e78b      	b.n	801a22a <__ieee754_sqrt+0x66>
 801a312:	4618      	mov	r0, r3
 801a314:	e7f0      	b.n	801a2f8 <__ieee754_sqrt+0x134>
 801a316:	0052      	lsls	r2, r2, #1
 801a318:	3301      	adds	r3, #1
 801a31a:	e7ef      	b.n	801a2fc <__ieee754_sqrt+0x138>
 801a31c:	46a0      	mov	r8, r4
 801a31e:	e7bf      	b.n	801a2a0 <__ieee754_sqrt+0xdc>
 801a320:	7ff00000 	.word	0x7ff00000
 801a324:	00000000 	.word	0x00000000

0801a328 <__kernel_cos>:
 801a328:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a32c:	ec59 8b10 	vmov	r8, r9, d0
 801a330:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801a334:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 801a338:	ed2d 8b02 	vpush	{d8}
 801a33c:	eeb0 8a41 	vmov.f32	s16, s2
 801a340:	eef0 8a61 	vmov.f32	s17, s3
 801a344:	da07      	bge.n	801a356 <__kernel_cos+0x2e>
 801a346:	ee10 0a10 	vmov	r0, s0
 801a34a:	4649      	mov	r1, r9
 801a34c:	f7e6 fc04 	bl	8000b58 <__aeabi_d2iz>
 801a350:	2800      	cmp	r0, #0
 801a352:	f000 8089 	beq.w	801a468 <__kernel_cos+0x140>
 801a356:	4642      	mov	r2, r8
 801a358:	464b      	mov	r3, r9
 801a35a:	4640      	mov	r0, r8
 801a35c:	4649      	mov	r1, r9
 801a35e:	f7e6 f94b 	bl	80005f8 <__aeabi_dmul>
 801a362:	2200      	movs	r2, #0
 801a364:	4b4e      	ldr	r3, [pc, #312]	; (801a4a0 <__kernel_cos+0x178>)
 801a366:	4604      	mov	r4, r0
 801a368:	460d      	mov	r5, r1
 801a36a:	f7e6 f945 	bl	80005f8 <__aeabi_dmul>
 801a36e:	a340      	add	r3, pc, #256	; (adr r3, 801a470 <__kernel_cos+0x148>)
 801a370:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a374:	4682      	mov	sl, r0
 801a376:	468b      	mov	fp, r1
 801a378:	4620      	mov	r0, r4
 801a37a:	4629      	mov	r1, r5
 801a37c:	f7e6 f93c 	bl	80005f8 <__aeabi_dmul>
 801a380:	a33d      	add	r3, pc, #244	; (adr r3, 801a478 <__kernel_cos+0x150>)
 801a382:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a386:	f7e5 ff81 	bl	800028c <__adddf3>
 801a38a:	4622      	mov	r2, r4
 801a38c:	462b      	mov	r3, r5
 801a38e:	f7e6 f933 	bl	80005f8 <__aeabi_dmul>
 801a392:	a33b      	add	r3, pc, #236	; (adr r3, 801a480 <__kernel_cos+0x158>)
 801a394:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a398:	f7e5 ff76 	bl	8000288 <__aeabi_dsub>
 801a39c:	4622      	mov	r2, r4
 801a39e:	462b      	mov	r3, r5
 801a3a0:	f7e6 f92a 	bl	80005f8 <__aeabi_dmul>
 801a3a4:	a338      	add	r3, pc, #224	; (adr r3, 801a488 <__kernel_cos+0x160>)
 801a3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3aa:	f7e5 ff6f 	bl	800028c <__adddf3>
 801a3ae:	4622      	mov	r2, r4
 801a3b0:	462b      	mov	r3, r5
 801a3b2:	f7e6 f921 	bl	80005f8 <__aeabi_dmul>
 801a3b6:	a336      	add	r3, pc, #216	; (adr r3, 801a490 <__kernel_cos+0x168>)
 801a3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3bc:	f7e5 ff64 	bl	8000288 <__aeabi_dsub>
 801a3c0:	4622      	mov	r2, r4
 801a3c2:	462b      	mov	r3, r5
 801a3c4:	f7e6 f918 	bl	80005f8 <__aeabi_dmul>
 801a3c8:	a333      	add	r3, pc, #204	; (adr r3, 801a498 <__kernel_cos+0x170>)
 801a3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3ce:	f7e5 ff5d 	bl	800028c <__adddf3>
 801a3d2:	4622      	mov	r2, r4
 801a3d4:	462b      	mov	r3, r5
 801a3d6:	f7e6 f90f 	bl	80005f8 <__aeabi_dmul>
 801a3da:	4622      	mov	r2, r4
 801a3dc:	462b      	mov	r3, r5
 801a3de:	f7e6 f90b 	bl	80005f8 <__aeabi_dmul>
 801a3e2:	ec53 2b18 	vmov	r2, r3, d8
 801a3e6:	4604      	mov	r4, r0
 801a3e8:	460d      	mov	r5, r1
 801a3ea:	4640      	mov	r0, r8
 801a3ec:	4649      	mov	r1, r9
 801a3ee:	f7e6 f903 	bl	80005f8 <__aeabi_dmul>
 801a3f2:	460b      	mov	r3, r1
 801a3f4:	4602      	mov	r2, r0
 801a3f6:	4629      	mov	r1, r5
 801a3f8:	4620      	mov	r0, r4
 801a3fa:	f7e5 ff45 	bl	8000288 <__aeabi_dsub>
 801a3fe:	4b29      	ldr	r3, [pc, #164]	; (801a4a4 <__kernel_cos+0x17c>)
 801a400:	429e      	cmp	r6, r3
 801a402:	4680      	mov	r8, r0
 801a404:	4689      	mov	r9, r1
 801a406:	dc11      	bgt.n	801a42c <__kernel_cos+0x104>
 801a408:	4602      	mov	r2, r0
 801a40a:	460b      	mov	r3, r1
 801a40c:	4650      	mov	r0, sl
 801a40e:	4659      	mov	r1, fp
 801a410:	f7e5 ff3a 	bl	8000288 <__aeabi_dsub>
 801a414:	460b      	mov	r3, r1
 801a416:	4924      	ldr	r1, [pc, #144]	; (801a4a8 <__kernel_cos+0x180>)
 801a418:	4602      	mov	r2, r0
 801a41a:	2000      	movs	r0, #0
 801a41c:	f7e5 ff34 	bl	8000288 <__aeabi_dsub>
 801a420:	ecbd 8b02 	vpop	{d8}
 801a424:	ec41 0b10 	vmov	d0, r0, r1
 801a428:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a42c:	4b1f      	ldr	r3, [pc, #124]	; (801a4ac <__kernel_cos+0x184>)
 801a42e:	491e      	ldr	r1, [pc, #120]	; (801a4a8 <__kernel_cos+0x180>)
 801a430:	429e      	cmp	r6, r3
 801a432:	bfcc      	ite	gt
 801a434:	4d1e      	ldrgt	r5, [pc, #120]	; (801a4b0 <__kernel_cos+0x188>)
 801a436:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801a43a:	2400      	movs	r4, #0
 801a43c:	4622      	mov	r2, r4
 801a43e:	462b      	mov	r3, r5
 801a440:	2000      	movs	r0, #0
 801a442:	f7e5 ff21 	bl	8000288 <__aeabi_dsub>
 801a446:	4622      	mov	r2, r4
 801a448:	4606      	mov	r6, r0
 801a44a:	460f      	mov	r7, r1
 801a44c:	462b      	mov	r3, r5
 801a44e:	4650      	mov	r0, sl
 801a450:	4659      	mov	r1, fp
 801a452:	f7e5 ff19 	bl	8000288 <__aeabi_dsub>
 801a456:	4642      	mov	r2, r8
 801a458:	464b      	mov	r3, r9
 801a45a:	f7e5 ff15 	bl	8000288 <__aeabi_dsub>
 801a45e:	4602      	mov	r2, r0
 801a460:	460b      	mov	r3, r1
 801a462:	4630      	mov	r0, r6
 801a464:	4639      	mov	r1, r7
 801a466:	e7d9      	b.n	801a41c <__kernel_cos+0xf4>
 801a468:	2000      	movs	r0, #0
 801a46a:	490f      	ldr	r1, [pc, #60]	; (801a4a8 <__kernel_cos+0x180>)
 801a46c:	e7d8      	b.n	801a420 <__kernel_cos+0xf8>
 801a46e:	bf00      	nop
 801a470:	be8838d4 	.word	0xbe8838d4
 801a474:	bda8fae9 	.word	0xbda8fae9
 801a478:	bdb4b1c4 	.word	0xbdb4b1c4
 801a47c:	3e21ee9e 	.word	0x3e21ee9e
 801a480:	809c52ad 	.word	0x809c52ad
 801a484:	3e927e4f 	.word	0x3e927e4f
 801a488:	19cb1590 	.word	0x19cb1590
 801a48c:	3efa01a0 	.word	0x3efa01a0
 801a490:	16c15177 	.word	0x16c15177
 801a494:	3f56c16c 	.word	0x3f56c16c
 801a498:	5555554c 	.word	0x5555554c
 801a49c:	3fa55555 	.word	0x3fa55555
 801a4a0:	3fe00000 	.word	0x3fe00000
 801a4a4:	3fd33332 	.word	0x3fd33332
 801a4a8:	3ff00000 	.word	0x3ff00000
 801a4ac:	3fe90000 	.word	0x3fe90000
 801a4b0:	3fd20000 	.word	0x3fd20000
 801a4b4:	00000000 	.word	0x00000000

0801a4b8 <__kernel_rem_pio2>:
 801a4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4bc:	ed2d 8b02 	vpush	{d8}
 801a4c0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801a4c4:	1ed4      	subs	r4, r2, #3
 801a4c6:	9308      	str	r3, [sp, #32]
 801a4c8:	9101      	str	r1, [sp, #4]
 801a4ca:	4bc5      	ldr	r3, [pc, #788]	; (801a7e0 <__kernel_rem_pio2+0x328>)
 801a4cc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801a4ce:	9009      	str	r0, [sp, #36]	; 0x24
 801a4d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a4d4:	9304      	str	r3, [sp, #16]
 801a4d6:	9b08      	ldr	r3, [sp, #32]
 801a4d8:	3b01      	subs	r3, #1
 801a4da:	9307      	str	r3, [sp, #28]
 801a4dc:	2318      	movs	r3, #24
 801a4de:	fb94 f4f3 	sdiv	r4, r4, r3
 801a4e2:	f06f 0317 	mvn.w	r3, #23
 801a4e6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801a4ea:	fb04 3303 	mla	r3, r4, r3, r3
 801a4ee:	eb03 0a02 	add.w	sl, r3, r2
 801a4f2:	9b04      	ldr	r3, [sp, #16]
 801a4f4:	9a07      	ldr	r2, [sp, #28]
 801a4f6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801a7d0 <__kernel_rem_pio2+0x318>
 801a4fa:	eb03 0802 	add.w	r8, r3, r2
 801a4fe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a500:	1aa7      	subs	r7, r4, r2
 801a502:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801a506:	ae22      	add	r6, sp, #136	; 0x88
 801a508:	2500      	movs	r5, #0
 801a50a:	4545      	cmp	r5, r8
 801a50c:	dd13      	ble.n	801a536 <__kernel_rem_pio2+0x7e>
 801a50e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 801a7d0 <__kernel_rem_pio2+0x318>
 801a512:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801a516:	2600      	movs	r6, #0
 801a518:	9b04      	ldr	r3, [sp, #16]
 801a51a:	429e      	cmp	r6, r3
 801a51c:	dc32      	bgt.n	801a584 <__kernel_rem_pio2+0xcc>
 801a51e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a520:	9302      	str	r3, [sp, #8]
 801a522:	9b08      	ldr	r3, [sp, #32]
 801a524:	199d      	adds	r5, r3, r6
 801a526:	ab22      	add	r3, sp, #136	; 0x88
 801a528:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a52c:	9306      	str	r3, [sp, #24]
 801a52e:	ec59 8b18 	vmov	r8, r9, d8
 801a532:	2700      	movs	r7, #0
 801a534:	e01f      	b.n	801a576 <__kernel_rem_pio2+0xbe>
 801a536:	42ef      	cmn	r7, r5
 801a538:	d407      	bmi.n	801a54a <__kernel_rem_pio2+0x92>
 801a53a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801a53e:	f7e5 fff1 	bl	8000524 <__aeabi_i2d>
 801a542:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a546:	3501      	adds	r5, #1
 801a548:	e7df      	b.n	801a50a <__kernel_rem_pio2+0x52>
 801a54a:	ec51 0b18 	vmov	r0, r1, d8
 801a54e:	e7f8      	b.n	801a542 <__kernel_rem_pio2+0x8a>
 801a550:	9906      	ldr	r1, [sp, #24]
 801a552:	9d02      	ldr	r5, [sp, #8]
 801a554:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 801a558:	9106      	str	r1, [sp, #24]
 801a55a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801a55e:	9502      	str	r5, [sp, #8]
 801a560:	f7e6 f84a 	bl	80005f8 <__aeabi_dmul>
 801a564:	4602      	mov	r2, r0
 801a566:	460b      	mov	r3, r1
 801a568:	4640      	mov	r0, r8
 801a56a:	4649      	mov	r1, r9
 801a56c:	f7e5 fe8e 	bl	800028c <__adddf3>
 801a570:	3701      	adds	r7, #1
 801a572:	4680      	mov	r8, r0
 801a574:	4689      	mov	r9, r1
 801a576:	9b07      	ldr	r3, [sp, #28]
 801a578:	429f      	cmp	r7, r3
 801a57a:	dde9      	ble.n	801a550 <__kernel_rem_pio2+0x98>
 801a57c:	e8eb 8902 	strd	r8, r9, [fp], #8
 801a580:	3601      	adds	r6, #1
 801a582:	e7c9      	b.n	801a518 <__kernel_rem_pio2+0x60>
 801a584:	9b04      	ldr	r3, [sp, #16]
 801a586:	aa0e      	add	r2, sp, #56	; 0x38
 801a588:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a58c:	930c      	str	r3, [sp, #48]	; 0x30
 801a58e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a590:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a594:	9c04      	ldr	r4, [sp, #16]
 801a596:	930b      	str	r3, [sp, #44]	; 0x2c
 801a598:	ab9a      	add	r3, sp, #616	; 0x268
 801a59a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801a59e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a5a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a5a6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801a5aa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801a5ae:	ab9a      	add	r3, sp, #616	; 0x268
 801a5b0:	445b      	add	r3, fp
 801a5b2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801a5b6:	2500      	movs	r5, #0
 801a5b8:	1b63      	subs	r3, r4, r5
 801a5ba:	2b00      	cmp	r3, #0
 801a5bc:	dc78      	bgt.n	801a6b0 <__kernel_rem_pio2+0x1f8>
 801a5be:	4650      	mov	r0, sl
 801a5c0:	ec49 8b10 	vmov	d0, r8, r9
 801a5c4:	f000 fda8 	bl	801b118 <scalbn>
 801a5c8:	ec57 6b10 	vmov	r6, r7, d0
 801a5cc:	2200      	movs	r2, #0
 801a5ce:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801a5d2:	ee10 0a10 	vmov	r0, s0
 801a5d6:	4639      	mov	r1, r7
 801a5d8:	f7e6 f80e 	bl	80005f8 <__aeabi_dmul>
 801a5dc:	ec41 0b10 	vmov	d0, r0, r1
 801a5e0:	f000 fd12 	bl	801b008 <floor>
 801a5e4:	2200      	movs	r2, #0
 801a5e6:	ec51 0b10 	vmov	r0, r1, d0
 801a5ea:	4b7e      	ldr	r3, [pc, #504]	; (801a7e4 <__kernel_rem_pio2+0x32c>)
 801a5ec:	f7e6 f804 	bl	80005f8 <__aeabi_dmul>
 801a5f0:	4602      	mov	r2, r0
 801a5f2:	460b      	mov	r3, r1
 801a5f4:	4630      	mov	r0, r6
 801a5f6:	4639      	mov	r1, r7
 801a5f8:	f7e5 fe46 	bl	8000288 <__aeabi_dsub>
 801a5fc:	460f      	mov	r7, r1
 801a5fe:	4606      	mov	r6, r0
 801a600:	f7e6 faaa 	bl	8000b58 <__aeabi_d2iz>
 801a604:	9006      	str	r0, [sp, #24]
 801a606:	f7e5 ff8d 	bl	8000524 <__aeabi_i2d>
 801a60a:	4602      	mov	r2, r0
 801a60c:	460b      	mov	r3, r1
 801a60e:	4630      	mov	r0, r6
 801a610:	4639      	mov	r1, r7
 801a612:	f7e5 fe39 	bl	8000288 <__aeabi_dsub>
 801a616:	f1ba 0f00 	cmp.w	sl, #0
 801a61a:	4606      	mov	r6, r0
 801a61c:	460f      	mov	r7, r1
 801a61e:	dd6c      	ble.n	801a6fa <__kernel_rem_pio2+0x242>
 801a620:	1e62      	subs	r2, r4, #1
 801a622:	ab0e      	add	r3, sp, #56	; 0x38
 801a624:	f1ca 0118 	rsb	r1, sl, #24
 801a628:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a62c:	9d06      	ldr	r5, [sp, #24]
 801a62e:	fa40 f301 	asr.w	r3, r0, r1
 801a632:	441d      	add	r5, r3
 801a634:	408b      	lsls	r3, r1
 801a636:	1ac0      	subs	r0, r0, r3
 801a638:	ab0e      	add	r3, sp, #56	; 0x38
 801a63a:	9506      	str	r5, [sp, #24]
 801a63c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801a640:	f1ca 0317 	rsb	r3, sl, #23
 801a644:	fa40 f303 	asr.w	r3, r0, r3
 801a648:	9302      	str	r3, [sp, #8]
 801a64a:	9b02      	ldr	r3, [sp, #8]
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	dd62      	ble.n	801a716 <__kernel_rem_pio2+0x25e>
 801a650:	9b06      	ldr	r3, [sp, #24]
 801a652:	2200      	movs	r2, #0
 801a654:	3301      	adds	r3, #1
 801a656:	9306      	str	r3, [sp, #24]
 801a658:	4615      	mov	r5, r2
 801a65a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801a65e:	4294      	cmp	r4, r2
 801a660:	f300 8095 	bgt.w	801a78e <__kernel_rem_pio2+0x2d6>
 801a664:	f1ba 0f00 	cmp.w	sl, #0
 801a668:	dd07      	ble.n	801a67a <__kernel_rem_pio2+0x1c2>
 801a66a:	f1ba 0f01 	cmp.w	sl, #1
 801a66e:	f000 80a2 	beq.w	801a7b6 <__kernel_rem_pio2+0x2fe>
 801a672:	f1ba 0f02 	cmp.w	sl, #2
 801a676:	f000 80c1 	beq.w	801a7fc <__kernel_rem_pio2+0x344>
 801a67a:	9b02      	ldr	r3, [sp, #8]
 801a67c:	2b02      	cmp	r3, #2
 801a67e:	d14a      	bne.n	801a716 <__kernel_rem_pio2+0x25e>
 801a680:	4632      	mov	r2, r6
 801a682:	463b      	mov	r3, r7
 801a684:	2000      	movs	r0, #0
 801a686:	4958      	ldr	r1, [pc, #352]	; (801a7e8 <__kernel_rem_pio2+0x330>)
 801a688:	f7e5 fdfe 	bl	8000288 <__aeabi_dsub>
 801a68c:	4606      	mov	r6, r0
 801a68e:	460f      	mov	r7, r1
 801a690:	2d00      	cmp	r5, #0
 801a692:	d040      	beq.n	801a716 <__kernel_rem_pio2+0x25e>
 801a694:	4650      	mov	r0, sl
 801a696:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801a7d8 <__kernel_rem_pio2+0x320>
 801a69a:	f000 fd3d 	bl	801b118 <scalbn>
 801a69e:	4630      	mov	r0, r6
 801a6a0:	4639      	mov	r1, r7
 801a6a2:	ec53 2b10 	vmov	r2, r3, d0
 801a6a6:	f7e5 fdef 	bl	8000288 <__aeabi_dsub>
 801a6aa:	4606      	mov	r6, r0
 801a6ac:	460f      	mov	r7, r1
 801a6ae:	e032      	b.n	801a716 <__kernel_rem_pio2+0x25e>
 801a6b0:	2200      	movs	r2, #0
 801a6b2:	4b4e      	ldr	r3, [pc, #312]	; (801a7ec <__kernel_rem_pio2+0x334>)
 801a6b4:	4640      	mov	r0, r8
 801a6b6:	4649      	mov	r1, r9
 801a6b8:	f7e5 ff9e 	bl	80005f8 <__aeabi_dmul>
 801a6bc:	f7e6 fa4c 	bl	8000b58 <__aeabi_d2iz>
 801a6c0:	f7e5 ff30 	bl	8000524 <__aeabi_i2d>
 801a6c4:	2200      	movs	r2, #0
 801a6c6:	4b4a      	ldr	r3, [pc, #296]	; (801a7f0 <__kernel_rem_pio2+0x338>)
 801a6c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a6cc:	f7e5 ff94 	bl	80005f8 <__aeabi_dmul>
 801a6d0:	4602      	mov	r2, r0
 801a6d2:	460b      	mov	r3, r1
 801a6d4:	4640      	mov	r0, r8
 801a6d6:	4649      	mov	r1, r9
 801a6d8:	f7e5 fdd6 	bl	8000288 <__aeabi_dsub>
 801a6dc:	f7e6 fa3c 	bl	8000b58 <__aeabi_d2iz>
 801a6e0:	ab0e      	add	r3, sp, #56	; 0x38
 801a6e2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801a6e6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801a6ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a6ee:	f7e5 fdcd 	bl	800028c <__adddf3>
 801a6f2:	3501      	adds	r5, #1
 801a6f4:	4680      	mov	r8, r0
 801a6f6:	4689      	mov	r9, r1
 801a6f8:	e75e      	b.n	801a5b8 <__kernel_rem_pio2+0x100>
 801a6fa:	d105      	bne.n	801a708 <__kernel_rem_pio2+0x250>
 801a6fc:	1e63      	subs	r3, r4, #1
 801a6fe:	aa0e      	add	r2, sp, #56	; 0x38
 801a700:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a704:	15c3      	asrs	r3, r0, #23
 801a706:	e79f      	b.n	801a648 <__kernel_rem_pio2+0x190>
 801a708:	2200      	movs	r2, #0
 801a70a:	4b3a      	ldr	r3, [pc, #232]	; (801a7f4 <__kernel_rem_pio2+0x33c>)
 801a70c:	f7e6 f9fa 	bl	8000b04 <__aeabi_dcmpge>
 801a710:	2800      	cmp	r0, #0
 801a712:	d139      	bne.n	801a788 <__kernel_rem_pio2+0x2d0>
 801a714:	9002      	str	r0, [sp, #8]
 801a716:	2200      	movs	r2, #0
 801a718:	2300      	movs	r3, #0
 801a71a:	4630      	mov	r0, r6
 801a71c:	4639      	mov	r1, r7
 801a71e:	f7e6 f9d3 	bl	8000ac8 <__aeabi_dcmpeq>
 801a722:	2800      	cmp	r0, #0
 801a724:	f000 80c7 	beq.w	801a8b6 <__kernel_rem_pio2+0x3fe>
 801a728:	1e65      	subs	r5, r4, #1
 801a72a:	462b      	mov	r3, r5
 801a72c:	2200      	movs	r2, #0
 801a72e:	9904      	ldr	r1, [sp, #16]
 801a730:	428b      	cmp	r3, r1
 801a732:	da6a      	bge.n	801a80a <__kernel_rem_pio2+0x352>
 801a734:	2a00      	cmp	r2, #0
 801a736:	f000 8088 	beq.w	801a84a <__kernel_rem_pio2+0x392>
 801a73a:	ab0e      	add	r3, sp, #56	; 0x38
 801a73c:	f1aa 0a18 	sub.w	sl, sl, #24
 801a740:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801a744:	2b00      	cmp	r3, #0
 801a746:	f000 80b4 	beq.w	801a8b2 <__kernel_rem_pio2+0x3fa>
 801a74a:	4650      	mov	r0, sl
 801a74c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 801a7d8 <__kernel_rem_pio2+0x320>
 801a750:	f000 fce2 	bl	801b118 <scalbn>
 801a754:	00ec      	lsls	r4, r5, #3
 801a756:	ab72      	add	r3, sp, #456	; 0x1c8
 801a758:	191e      	adds	r6, r3, r4
 801a75a:	ec59 8b10 	vmov	r8, r9, d0
 801a75e:	f106 0a08 	add.w	sl, r6, #8
 801a762:	462f      	mov	r7, r5
 801a764:	2f00      	cmp	r7, #0
 801a766:	f280 80df 	bge.w	801a928 <__kernel_rem_pio2+0x470>
 801a76a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 801a7d0 <__kernel_rem_pio2+0x318>
 801a76e:	f04f 0a00 	mov.w	sl, #0
 801a772:	eba5 030a 	sub.w	r3, r5, sl
 801a776:	2b00      	cmp	r3, #0
 801a778:	f2c0 810a 	blt.w	801a990 <__kernel_rem_pio2+0x4d8>
 801a77c:	f8df b078 	ldr.w	fp, [pc, #120]	; 801a7f8 <__kernel_rem_pio2+0x340>
 801a780:	ec59 8b18 	vmov	r8, r9, d8
 801a784:	2700      	movs	r7, #0
 801a786:	e0f5      	b.n	801a974 <__kernel_rem_pio2+0x4bc>
 801a788:	2302      	movs	r3, #2
 801a78a:	9302      	str	r3, [sp, #8]
 801a78c:	e760      	b.n	801a650 <__kernel_rem_pio2+0x198>
 801a78e:	ab0e      	add	r3, sp, #56	; 0x38
 801a790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a794:	b94d      	cbnz	r5, 801a7aa <__kernel_rem_pio2+0x2f2>
 801a796:	b12b      	cbz	r3, 801a7a4 <__kernel_rem_pio2+0x2ec>
 801a798:	a80e      	add	r0, sp, #56	; 0x38
 801a79a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801a79e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a7a2:	2301      	movs	r3, #1
 801a7a4:	3201      	adds	r2, #1
 801a7a6:	461d      	mov	r5, r3
 801a7a8:	e759      	b.n	801a65e <__kernel_rem_pio2+0x1a6>
 801a7aa:	a80e      	add	r0, sp, #56	; 0x38
 801a7ac:	1acb      	subs	r3, r1, r3
 801a7ae:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a7b2:	462b      	mov	r3, r5
 801a7b4:	e7f6      	b.n	801a7a4 <__kernel_rem_pio2+0x2ec>
 801a7b6:	1e62      	subs	r2, r4, #1
 801a7b8:	ab0e      	add	r3, sp, #56	; 0x38
 801a7ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a7be:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801a7c2:	a90e      	add	r1, sp, #56	; 0x38
 801a7c4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801a7c8:	e757      	b.n	801a67a <__kernel_rem_pio2+0x1c2>
 801a7ca:	bf00      	nop
 801a7cc:	f3af 8000 	nop.w
	...
 801a7dc:	3ff00000 	.word	0x3ff00000
 801a7e0:	0801b9b0 	.word	0x0801b9b0
 801a7e4:	40200000 	.word	0x40200000
 801a7e8:	3ff00000 	.word	0x3ff00000
 801a7ec:	3e700000 	.word	0x3e700000
 801a7f0:	41700000 	.word	0x41700000
 801a7f4:	3fe00000 	.word	0x3fe00000
 801a7f8:	0801b970 	.word	0x0801b970
 801a7fc:	1e62      	subs	r2, r4, #1
 801a7fe:	ab0e      	add	r3, sp, #56	; 0x38
 801a800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a804:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a808:	e7db      	b.n	801a7c2 <__kernel_rem_pio2+0x30a>
 801a80a:	a90e      	add	r1, sp, #56	; 0x38
 801a80c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801a810:	3b01      	subs	r3, #1
 801a812:	430a      	orrs	r2, r1
 801a814:	e78b      	b.n	801a72e <__kernel_rem_pio2+0x276>
 801a816:	3301      	adds	r3, #1
 801a818:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801a81c:	2900      	cmp	r1, #0
 801a81e:	d0fa      	beq.n	801a816 <__kernel_rem_pio2+0x35e>
 801a820:	9a08      	ldr	r2, [sp, #32]
 801a822:	4422      	add	r2, r4
 801a824:	00d2      	lsls	r2, r2, #3
 801a826:	a922      	add	r1, sp, #136	; 0x88
 801a828:	18e3      	adds	r3, r4, r3
 801a82a:	9206      	str	r2, [sp, #24]
 801a82c:	440a      	add	r2, r1
 801a82e:	9302      	str	r3, [sp, #8]
 801a830:	f10b 0108 	add.w	r1, fp, #8
 801a834:	f102 0308 	add.w	r3, r2, #8
 801a838:	1c66      	adds	r6, r4, #1
 801a83a:	910a      	str	r1, [sp, #40]	; 0x28
 801a83c:	2500      	movs	r5, #0
 801a83e:	930d      	str	r3, [sp, #52]	; 0x34
 801a840:	9b02      	ldr	r3, [sp, #8]
 801a842:	42b3      	cmp	r3, r6
 801a844:	da04      	bge.n	801a850 <__kernel_rem_pio2+0x398>
 801a846:	461c      	mov	r4, r3
 801a848:	e6a6      	b.n	801a598 <__kernel_rem_pio2+0xe0>
 801a84a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a84c:	2301      	movs	r3, #1
 801a84e:	e7e3      	b.n	801a818 <__kernel_rem_pio2+0x360>
 801a850:	9b06      	ldr	r3, [sp, #24]
 801a852:	18ef      	adds	r7, r5, r3
 801a854:	ab22      	add	r3, sp, #136	; 0x88
 801a856:	441f      	add	r7, r3
 801a858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a85a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801a85e:	f7e5 fe61 	bl	8000524 <__aeabi_i2d>
 801a862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a864:	461c      	mov	r4, r3
 801a866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a868:	e9c7 0100 	strd	r0, r1, [r7]
 801a86c:	eb03 0b05 	add.w	fp, r3, r5
 801a870:	2700      	movs	r7, #0
 801a872:	f04f 0800 	mov.w	r8, #0
 801a876:	f04f 0900 	mov.w	r9, #0
 801a87a:	9b07      	ldr	r3, [sp, #28]
 801a87c:	429f      	cmp	r7, r3
 801a87e:	dd08      	ble.n	801a892 <__kernel_rem_pio2+0x3da>
 801a880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a882:	aa72      	add	r2, sp, #456	; 0x1c8
 801a884:	18eb      	adds	r3, r5, r3
 801a886:	4413      	add	r3, r2
 801a888:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801a88c:	3601      	adds	r6, #1
 801a88e:	3508      	adds	r5, #8
 801a890:	e7d6      	b.n	801a840 <__kernel_rem_pio2+0x388>
 801a892:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801a896:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801a89a:	f7e5 fead 	bl	80005f8 <__aeabi_dmul>
 801a89e:	4602      	mov	r2, r0
 801a8a0:	460b      	mov	r3, r1
 801a8a2:	4640      	mov	r0, r8
 801a8a4:	4649      	mov	r1, r9
 801a8a6:	f7e5 fcf1 	bl	800028c <__adddf3>
 801a8aa:	3701      	adds	r7, #1
 801a8ac:	4680      	mov	r8, r0
 801a8ae:	4689      	mov	r9, r1
 801a8b0:	e7e3      	b.n	801a87a <__kernel_rem_pio2+0x3c2>
 801a8b2:	3d01      	subs	r5, #1
 801a8b4:	e741      	b.n	801a73a <__kernel_rem_pio2+0x282>
 801a8b6:	f1ca 0000 	rsb	r0, sl, #0
 801a8ba:	ec47 6b10 	vmov	d0, r6, r7
 801a8be:	f000 fc2b 	bl	801b118 <scalbn>
 801a8c2:	ec57 6b10 	vmov	r6, r7, d0
 801a8c6:	2200      	movs	r2, #0
 801a8c8:	4b99      	ldr	r3, [pc, #612]	; (801ab30 <__kernel_rem_pio2+0x678>)
 801a8ca:	ee10 0a10 	vmov	r0, s0
 801a8ce:	4639      	mov	r1, r7
 801a8d0:	f7e6 f918 	bl	8000b04 <__aeabi_dcmpge>
 801a8d4:	b1f8      	cbz	r0, 801a916 <__kernel_rem_pio2+0x45e>
 801a8d6:	2200      	movs	r2, #0
 801a8d8:	4b96      	ldr	r3, [pc, #600]	; (801ab34 <__kernel_rem_pio2+0x67c>)
 801a8da:	4630      	mov	r0, r6
 801a8dc:	4639      	mov	r1, r7
 801a8de:	f7e5 fe8b 	bl	80005f8 <__aeabi_dmul>
 801a8e2:	f7e6 f939 	bl	8000b58 <__aeabi_d2iz>
 801a8e6:	4680      	mov	r8, r0
 801a8e8:	f7e5 fe1c 	bl	8000524 <__aeabi_i2d>
 801a8ec:	2200      	movs	r2, #0
 801a8ee:	4b90      	ldr	r3, [pc, #576]	; (801ab30 <__kernel_rem_pio2+0x678>)
 801a8f0:	f7e5 fe82 	bl	80005f8 <__aeabi_dmul>
 801a8f4:	460b      	mov	r3, r1
 801a8f6:	4602      	mov	r2, r0
 801a8f8:	4639      	mov	r1, r7
 801a8fa:	4630      	mov	r0, r6
 801a8fc:	f7e5 fcc4 	bl	8000288 <__aeabi_dsub>
 801a900:	f7e6 f92a 	bl	8000b58 <__aeabi_d2iz>
 801a904:	1c65      	adds	r5, r4, #1
 801a906:	ab0e      	add	r3, sp, #56	; 0x38
 801a908:	f10a 0a18 	add.w	sl, sl, #24
 801a90c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a910:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801a914:	e719      	b.n	801a74a <__kernel_rem_pio2+0x292>
 801a916:	4630      	mov	r0, r6
 801a918:	4639      	mov	r1, r7
 801a91a:	f7e6 f91d 	bl	8000b58 <__aeabi_d2iz>
 801a91e:	ab0e      	add	r3, sp, #56	; 0x38
 801a920:	4625      	mov	r5, r4
 801a922:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a926:	e710      	b.n	801a74a <__kernel_rem_pio2+0x292>
 801a928:	ab0e      	add	r3, sp, #56	; 0x38
 801a92a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801a92e:	f7e5 fdf9 	bl	8000524 <__aeabi_i2d>
 801a932:	4642      	mov	r2, r8
 801a934:	464b      	mov	r3, r9
 801a936:	f7e5 fe5f 	bl	80005f8 <__aeabi_dmul>
 801a93a:	2200      	movs	r2, #0
 801a93c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801a940:	4b7c      	ldr	r3, [pc, #496]	; (801ab34 <__kernel_rem_pio2+0x67c>)
 801a942:	4640      	mov	r0, r8
 801a944:	4649      	mov	r1, r9
 801a946:	f7e5 fe57 	bl	80005f8 <__aeabi_dmul>
 801a94a:	3f01      	subs	r7, #1
 801a94c:	4680      	mov	r8, r0
 801a94e:	4689      	mov	r9, r1
 801a950:	e708      	b.n	801a764 <__kernel_rem_pio2+0x2ac>
 801a952:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801a956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a95a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801a95e:	f7e5 fe4b 	bl	80005f8 <__aeabi_dmul>
 801a962:	4602      	mov	r2, r0
 801a964:	460b      	mov	r3, r1
 801a966:	4640      	mov	r0, r8
 801a968:	4649      	mov	r1, r9
 801a96a:	f7e5 fc8f 	bl	800028c <__adddf3>
 801a96e:	3701      	adds	r7, #1
 801a970:	4680      	mov	r8, r0
 801a972:	4689      	mov	r9, r1
 801a974:	9b04      	ldr	r3, [sp, #16]
 801a976:	429f      	cmp	r7, r3
 801a978:	dc01      	bgt.n	801a97e <__kernel_rem_pio2+0x4c6>
 801a97a:	45ba      	cmp	sl, r7
 801a97c:	dae9      	bge.n	801a952 <__kernel_rem_pio2+0x49a>
 801a97e:	ab4a      	add	r3, sp, #296	; 0x128
 801a980:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a984:	e9c3 8900 	strd	r8, r9, [r3]
 801a988:	f10a 0a01 	add.w	sl, sl, #1
 801a98c:	3e08      	subs	r6, #8
 801a98e:	e6f0      	b.n	801a772 <__kernel_rem_pio2+0x2ba>
 801a990:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801a992:	2b03      	cmp	r3, #3
 801a994:	d85b      	bhi.n	801aa4e <__kernel_rem_pio2+0x596>
 801a996:	e8df f003 	tbb	[pc, r3]
 801a99a:	264a      	.short	0x264a
 801a99c:	0226      	.short	0x0226
 801a99e:	ab9a      	add	r3, sp, #616	; 0x268
 801a9a0:	441c      	add	r4, r3
 801a9a2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801a9a6:	46a2      	mov	sl, r4
 801a9a8:	46ab      	mov	fp, r5
 801a9aa:	f1bb 0f00 	cmp.w	fp, #0
 801a9ae:	dc6c      	bgt.n	801aa8a <__kernel_rem_pio2+0x5d2>
 801a9b0:	46a2      	mov	sl, r4
 801a9b2:	46ab      	mov	fp, r5
 801a9b4:	f1bb 0f01 	cmp.w	fp, #1
 801a9b8:	f300 8086 	bgt.w	801aac8 <__kernel_rem_pio2+0x610>
 801a9bc:	2000      	movs	r0, #0
 801a9be:	2100      	movs	r1, #0
 801a9c0:	2d01      	cmp	r5, #1
 801a9c2:	f300 80a0 	bgt.w	801ab06 <__kernel_rem_pio2+0x64e>
 801a9c6:	9b02      	ldr	r3, [sp, #8]
 801a9c8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801a9cc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 801a9d0:	2b00      	cmp	r3, #0
 801a9d2:	f040 809e 	bne.w	801ab12 <__kernel_rem_pio2+0x65a>
 801a9d6:	9b01      	ldr	r3, [sp, #4]
 801a9d8:	e9c3 7800 	strd	r7, r8, [r3]
 801a9dc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801a9e0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801a9e4:	e033      	b.n	801aa4e <__kernel_rem_pio2+0x596>
 801a9e6:	3408      	adds	r4, #8
 801a9e8:	ab4a      	add	r3, sp, #296	; 0x128
 801a9ea:	441c      	add	r4, r3
 801a9ec:	462e      	mov	r6, r5
 801a9ee:	2000      	movs	r0, #0
 801a9f0:	2100      	movs	r1, #0
 801a9f2:	2e00      	cmp	r6, #0
 801a9f4:	da3a      	bge.n	801aa6c <__kernel_rem_pio2+0x5b4>
 801a9f6:	9b02      	ldr	r3, [sp, #8]
 801a9f8:	2b00      	cmp	r3, #0
 801a9fa:	d03d      	beq.n	801aa78 <__kernel_rem_pio2+0x5c0>
 801a9fc:	4602      	mov	r2, r0
 801a9fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aa02:	9c01      	ldr	r4, [sp, #4]
 801aa04:	e9c4 2300 	strd	r2, r3, [r4]
 801aa08:	4602      	mov	r2, r0
 801aa0a:	460b      	mov	r3, r1
 801aa0c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801aa10:	f7e5 fc3a 	bl	8000288 <__aeabi_dsub>
 801aa14:	ae4c      	add	r6, sp, #304	; 0x130
 801aa16:	2401      	movs	r4, #1
 801aa18:	42a5      	cmp	r5, r4
 801aa1a:	da30      	bge.n	801aa7e <__kernel_rem_pio2+0x5c6>
 801aa1c:	9b02      	ldr	r3, [sp, #8]
 801aa1e:	b113      	cbz	r3, 801aa26 <__kernel_rem_pio2+0x56e>
 801aa20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aa24:	4619      	mov	r1, r3
 801aa26:	9b01      	ldr	r3, [sp, #4]
 801aa28:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801aa2c:	e00f      	b.n	801aa4e <__kernel_rem_pio2+0x596>
 801aa2e:	ab9a      	add	r3, sp, #616	; 0x268
 801aa30:	441c      	add	r4, r3
 801aa32:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801aa36:	2000      	movs	r0, #0
 801aa38:	2100      	movs	r1, #0
 801aa3a:	2d00      	cmp	r5, #0
 801aa3c:	da10      	bge.n	801aa60 <__kernel_rem_pio2+0x5a8>
 801aa3e:	9b02      	ldr	r3, [sp, #8]
 801aa40:	b113      	cbz	r3, 801aa48 <__kernel_rem_pio2+0x590>
 801aa42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aa46:	4619      	mov	r1, r3
 801aa48:	9b01      	ldr	r3, [sp, #4]
 801aa4a:	e9c3 0100 	strd	r0, r1, [r3]
 801aa4e:	9b06      	ldr	r3, [sp, #24]
 801aa50:	f003 0007 	and.w	r0, r3, #7
 801aa54:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801aa58:	ecbd 8b02 	vpop	{d8}
 801aa5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa60:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801aa64:	f7e5 fc12 	bl	800028c <__adddf3>
 801aa68:	3d01      	subs	r5, #1
 801aa6a:	e7e6      	b.n	801aa3a <__kernel_rem_pio2+0x582>
 801aa6c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801aa70:	f7e5 fc0c 	bl	800028c <__adddf3>
 801aa74:	3e01      	subs	r6, #1
 801aa76:	e7bc      	b.n	801a9f2 <__kernel_rem_pio2+0x53a>
 801aa78:	4602      	mov	r2, r0
 801aa7a:	460b      	mov	r3, r1
 801aa7c:	e7c1      	b.n	801aa02 <__kernel_rem_pio2+0x54a>
 801aa7e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801aa82:	f7e5 fc03 	bl	800028c <__adddf3>
 801aa86:	3401      	adds	r4, #1
 801aa88:	e7c6      	b.n	801aa18 <__kernel_rem_pio2+0x560>
 801aa8a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801aa8e:	ed3a 7b02 	vldmdb	sl!, {d7}
 801aa92:	4640      	mov	r0, r8
 801aa94:	ec53 2b17 	vmov	r2, r3, d7
 801aa98:	4649      	mov	r1, r9
 801aa9a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801aa9e:	f7e5 fbf5 	bl	800028c <__adddf3>
 801aaa2:	4602      	mov	r2, r0
 801aaa4:	460b      	mov	r3, r1
 801aaa6:	4606      	mov	r6, r0
 801aaa8:	460f      	mov	r7, r1
 801aaaa:	4640      	mov	r0, r8
 801aaac:	4649      	mov	r1, r9
 801aaae:	f7e5 fbeb 	bl	8000288 <__aeabi_dsub>
 801aab2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801aab6:	f7e5 fbe9 	bl	800028c <__adddf3>
 801aaba:	f10b 3bff 	add.w	fp, fp, #4294967295
 801aabe:	e9ca 0100 	strd	r0, r1, [sl]
 801aac2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801aac6:	e770      	b.n	801a9aa <__kernel_rem_pio2+0x4f2>
 801aac8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801aacc:	ed3a 7b02 	vldmdb	sl!, {d7}
 801aad0:	4630      	mov	r0, r6
 801aad2:	ec53 2b17 	vmov	r2, r3, d7
 801aad6:	4639      	mov	r1, r7
 801aad8:	ed8d 7b04 	vstr	d7, [sp, #16]
 801aadc:	f7e5 fbd6 	bl	800028c <__adddf3>
 801aae0:	4602      	mov	r2, r0
 801aae2:	460b      	mov	r3, r1
 801aae4:	4680      	mov	r8, r0
 801aae6:	4689      	mov	r9, r1
 801aae8:	4630      	mov	r0, r6
 801aaea:	4639      	mov	r1, r7
 801aaec:	f7e5 fbcc 	bl	8000288 <__aeabi_dsub>
 801aaf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801aaf4:	f7e5 fbca 	bl	800028c <__adddf3>
 801aaf8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801aafc:	e9ca 0100 	strd	r0, r1, [sl]
 801ab00:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801ab04:	e756      	b.n	801a9b4 <__kernel_rem_pio2+0x4fc>
 801ab06:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801ab0a:	f7e5 fbbf 	bl	800028c <__adddf3>
 801ab0e:	3d01      	subs	r5, #1
 801ab10:	e756      	b.n	801a9c0 <__kernel_rem_pio2+0x508>
 801ab12:	9b01      	ldr	r3, [sp, #4]
 801ab14:	9a01      	ldr	r2, [sp, #4]
 801ab16:	601f      	str	r7, [r3, #0]
 801ab18:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801ab1c:	605c      	str	r4, [r3, #4]
 801ab1e:	609d      	str	r5, [r3, #8]
 801ab20:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801ab24:	60d3      	str	r3, [r2, #12]
 801ab26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ab2a:	6110      	str	r0, [r2, #16]
 801ab2c:	6153      	str	r3, [r2, #20]
 801ab2e:	e78e      	b.n	801aa4e <__kernel_rem_pio2+0x596>
 801ab30:	41700000 	.word	0x41700000
 801ab34:	3e700000 	.word	0x3e700000

0801ab38 <__kernel_sin>:
 801ab38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab3c:	ec55 4b10 	vmov	r4, r5, d0
 801ab40:	b085      	sub	sp, #20
 801ab42:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801ab46:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801ab4a:	ed8d 1b00 	vstr	d1, [sp]
 801ab4e:	9002      	str	r0, [sp, #8]
 801ab50:	da06      	bge.n	801ab60 <__kernel_sin+0x28>
 801ab52:	ee10 0a10 	vmov	r0, s0
 801ab56:	4629      	mov	r1, r5
 801ab58:	f7e5 fffe 	bl	8000b58 <__aeabi_d2iz>
 801ab5c:	2800      	cmp	r0, #0
 801ab5e:	d051      	beq.n	801ac04 <__kernel_sin+0xcc>
 801ab60:	4622      	mov	r2, r4
 801ab62:	462b      	mov	r3, r5
 801ab64:	4620      	mov	r0, r4
 801ab66:	4629      	mov	r1, r5
 801ab68:	f7e5 fd46 	bl	80005f8 <__aeabi_dmul>
 801ab6c:	4682      	mov	sl, r0
 801ab6e:	468b      	mov	fp, r1
 801ab70:	4602      	mov	r2, r0
 801ab72:	460b      	mov	r3, r1
 801ab74:	4620      	mov	r0, r4
 801ab76:	4629      	mov	r1, r5
 801ab78:	f7e5 fd3e 	bl	80005f8 <__aeabi_dmul>
 801ab7c:	a341      	add	r3, pc, #260	; (adr r3, 801ac84 <__kernel_sin+0x14c>)
 801ab7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab82:	4680      	mov	r8, r0
 801ab84:	4689      	mov	r9, r1
 801ab86:	4650      	mov	r0, sl
 801ab88:	4659      	mov	r1, fp
 801ab8a:	f7e5 fd35 	bl	80005f8 <__aeabi_dmul>
 801ab8e:	a33f      	add	r3, pc, #252	; (adr r3, 801ac8c <__kernel_sin+0x154>)
 801ab90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab94:	f7e5 fb78 	bl	8000288 <__aeabi_dsub>
 801ab98:	4652      	mov	r2, sl
 801ab9a:	465b      	mov	r3, fp
 801ab9c:	f7e5 fd2c 	bl	80005f8 <__aeabi_dmul>
 801aba0:	a33c      	add	r3, pc, #240	; (adr r3, 801ac94 <__kernel_sin+0x15c>)
 801aba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aba6:	f7e5 fb71 	bl	800028c <__adddf3>
 801abaa:	4652      	mov	r2, sl
 801abac:	465b      	mov	r3, fp
 801abae:	f7e5 fd23 	bl	80005f8 <__aeabi_dmul>
 801abb2:	a33a      	add	r3, pc, #232	; (adr r3, 801ac9c <__kernel_sin+0x164>)
 801abb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abb8:	f7e5 fb66 	bl	8000288 <__aeabi_dsub>
 801abbc:	4652      	mov	r2, sl
 801abbe:	465b      	mov	r3, fp
 801abc0:	f7e5 fd1a 	bl	80005f8 <__aeabi_dmul>
 801abc4:	a337      	add	r3, pc, #220	; (adr r3, 801aca4 <__kernel_sin+0x16c>)
 801abc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abca:	f7e5 fb5f 	bl	800028c <__adddf3>
 801abce:	9b02      	ldr	r3, [sp, #8]
 801abd0:	4606      	mov	r6, r0
 801abd2:	460f      	mov	r7, r1
 801abd4:	b9db      	cbnz	r3, 801ac0e <__kernel_sin+0xd6>
 801abd6:	4602      	mov	r2, r0
 801abd8:	460b      	mov	r3, r1
 801abda:	4650      	mov	r0, sl
 801abdc:	4659      	mov	r1, fp
 801abde:	f7e5 fd0b 	bl	80005f8 <__aeabi_dmul>
 801abe2:	a325      	add	r3, pc, #148	; (adr r3, 801ac78 <__kernel_sin+0x140>)
 801abe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abe8:	f7e5 fb4e 	bl	8000288 <__aeabi_dsub>
 801abec:	4642      	mov	r2, r8
 801abee:	464b      	mov	r3, r9
 801abf0:	f7e5 fd02 	bl	80005f8 <__aeabi_dmul>
 801abf4:	4602      	mov	r2, r0
 801abf6:	460b      	mov	r3, r1
 801abf8:	4620      	mov	r0, r4
 801abfa:	4629      	mov	r1, r5
 801abfc:	f7e5 fb46 	bl	800028c <__adddf3>
 801ac00:	4604      	mov	r4, r0
 801ac02:	460d      	mov	r5, r1
 801ac04:	ec45 4b10 	vmov	d0, r4, r5
 801ac08:	b005      	add	sp, #20
 801ac0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac0e:	2200      	movs	r2, #0
 801ac10:	4b1b      	ldr	r3, [pc, #108]	; (801ac80 <__kernel_sin+0x148>)
 801ac12:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ac16:	f7e5 fcef 	bl	80005f8 <__aeabi_dmul>
 801ac1a:	4632      	mov	r2, r6
 801ac1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ac20:	463b      	mov	r3, r7
 801ac22:	4640      	mov	r0, r8
 801ac24:	4649      	mov	r1, r9
 801ac26:	f7e5 fce7 	bl	80005f8 <__aeabi_dmul>
 801ac2a:	4602      	mov	r2, r0
 801ac2c:	460b      	mov	r3, r1
 801ac2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ac32:	f7e5 fb29 	bl	8000288 <__aeabi_dsub>
 801ac36:	4652      	mov	r2, sl
 801ac38:	465b      	mov	r3, fp
 801ac3a:	f7e5 fcdd 	bl	80005f8 <__aeabi_dmul>
 801ac3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ac42:	f7e5 fb21 	bl	8000288 <__aeabi_dsub>
 801ac46:	a30c      	add	r3, pc, #48	; (adr r3, 801ac78 <__kernel_sin+0x140>)
 801ac48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac4c:	4606      	mov	r6, r0
 801ac4e:	460f      	mov	r7, r1
 801ac50:	4640      	mov	r0, r8
 801ac52:	4649      	mov	r1, r9
 801ac54:	f7e5 fcd0 	bl	80005f8 <__aeabi_dmul>
 801ac58:	4602      	mov	r2, r0
 801ac5a:	460b      	mov	r3, r1
 801ac5c:	4630      	mov	r0, r6
 801ac5e:	4639      	mov	r1, r7
 801ac60:	f7e5 fb14 	bl	800028c <__adddf3>
 801ac64:	4602      	mov	r2, r0
 801ac66:	460b      	mov	r3, r1
 801ac68:	4620      	mov	r0, r4
 801ac6a:	4629      	mov	r1, r5
 801ac6c:	f7e5 fb0c 	bl	8000288 <__aeabi_dsub>
 801ac70:	e7c6      	b.n	801ac00 <__kernel_sin+0xc8>
 801ac72:	bf00      	nop
 801ac74:	f3af 8000 	nop.w
 801ac78:	55555549 	.word	0x55555549
 801ac7c:	3fc55555 	.word	0x3fc55555
 801ac80:	3fe00000 	.word	0x3fe00000
 801ac84:	5acfd57c 	.word	0x5acfd57c
 801ac88:	3de5d93a 	.word	0x3de5d93a
 801ac8c:	8a2b9ceb 	.word	0x8a2b9ceb
 801ac90:	3e5ae5e6 	.word	0x3e5ae5e6
 801ac94:	57b1fe7d 	.word	0x57b1fe7d
 801ac98:	3ec71de3 	.word	0x3ec71de3
 801ac9c:	19c161d5 	.word	0x19c161d5
 801aca0:	3f2a01a0 	.word	0x3f2a01a0
 801aca4:	1110f8a6 	.word	0x1110f8a6
 801aca8:	3f811111 	.word	0x3f811111
 801acac:	00000000 	.word	0x00000000

0801acb0 <atan>:
 801acb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acb4:	ec55 4b10 	vmov	r4, r5, d0
 801acb8:	4bc3      	ldr	r3, [pc, #780]	; (801afc8 <atan+0x318>)
 801acba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801acbe:	429e      	cmp	r6, r3
 801acc0:	46ab      	mov	fp, r5
 801acc2:	dd18      	ble.n	801acf6 <atan+0x46>
 801acc4:	4bc1      	ldr	r3, [pc, #772]	; (801afcc <atan+0x31c>)
 801acc6:	429e      	cmp	r6, r3
 801acc8:	dc01      	bgt.n	801acce <atan+0x1e>
 801acca:	d109      	bne.n	801ace0 <atan+0x30>
 801accc:	b144      	cbz	r4, 801ace0 <atan+0x30>
 801acce:	4622      	mov	r2, r4
 801acd0:	462b      	mov	r3, r5
 801acd2:	4620      	mov	r0, r4
 801acd4:	4629      	mov	r1, r5
 801acd6:	f7e5 fad9 	bl	800028c <__adddf3>
 801acda:	4604      	mov	r4, r0
 801acdc:	460d      	mov	r5, r1
 801acde:	e006      	b.n	801acee <atan+0x3e>
 801ace0:	f1bb 0f00 	cmp.w	fp, #0
 801ace4:	f340 8131 	ble.w	801af4a <atan+0x29a>
 801ace8:	a59b      	add	r5, pc, #620	; (adr r5, 801af58 <atan+0x2a8>)
 801acea:	e9d5 4500 	ldrd	r4, r5, [r5]
 801acee:	ec45 4b10 	vmov	d0, r4, r5
 801acf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acf6:	4bb6      	ldr	r3, [pc, #728]	; (801afd0 <atan+0x320>)
 801acf8:	429e      	cmp	r6, r3
 801acfa:	dc14      	bgt.n	801ad26 <atan+0x76>
 801acfc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801ad00:	429e      	cmp	r6, r3
 801ad02:	dc0d      	bgt.n	801ad20 <atan+0x70>
 801ad04:	a396      	add	r3, pc, #600	; (adr r3, 801af60 <atan+0x2b0>)
 801ad06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad0a:	ee10 0a10 	vmov	r0, s0
 801ad0e:	4629      	mov	r1, r5
 801ad10:	f7e5 fabc 	bl	800028c <__adddf3>
 801ad14:	2200      	movs	r2, #0
 801ad16:	4baf      	ldr	r3, [pc, #700]	; (801afd4 <atan+0x324>)
 801ad18:	f7e5 fefe 	bl	8000b18 <__aeabi_dcmpgt>
 801ad1c:	2800      	cmp	r0, #0
 801ad1e:	d1e6      	bne.n	801acee <atan+0x3e>
 801ad20:	f04f 3aff 	mov.w	sl, #4294967295
 801ad24:	e02b      	b.n	801ad7e <atan+0xce>
 801ad26:	f000 f963 	bl	801aff0 <fabs>
 801ad2a:	4bab      	ldr	r3, [pc, #684]	; (801afd8 <atan+0x328>)
 801ad2c:	429e      	cmp	r6, r3
 801ad2e:	ec55 4b10 	vmov	r4, r5, d0
 801ad32:	f300 80bf 	bgt.w	801aeb4 <atan+0x204>
 801ad36:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801ad3a:	429e      	cmp	r6, r3
 801ad3c:	f300 80a0 	bgt.w	801ae80 <atan+0x1d0>
 801ad40:	ee10 2a10 	vmov	r2, s0
 801ad44:	ee10 0a10 	vmov	r0, s0
 801ad48:	462b      	mov	r3, r5
 801ad4a:	4629      	mov	r1, r5
 801ad4c:	f7e5 fa9e 	bl	800028c <__adddf3>
 801ad50:	2200      	movs	r2, #0
 801ad52:	4ba0      	ldr	r3, [pc, #640]	; (801afd4 <atan+0x324>)
 801ad54:	f7e5 fa98 	bl	8000288 <__aeabi_dsub>
 801ad58:	2200      	movs	r2, #0
 801ad5a:	4606      	mov	r6, r0
 801ad5c:	460f      	mov	r7, r1
 801ad5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ad62:	4620      	mov	r0, r4
 801ad64:	4629      	mov	r1, r5
 801ad66:	f7e5 fa91 	bl	800028c <__adddf3>
 801ad6a:	4602      	mov	r2, r0
 801ad6c:	460b      	mov	r3, r1
 801ad6e:	4630      	mov	r0, r6
 801ad70:	4639      	mov	r1, r7
 801ad72:	f7e5 fd6b 	bl	800084c <__aeabi_ddiv>
 801ad76:	f04f 0a00 	mov.w	sl, #0
 801ad7a:	4604      	mov	r4, r0
 801ad7c:	460d      	mov	r5, r1
 801ad7e:	4622      	mov	r2, r4
 801ad80:	462b      	mov	r3, r5
 801ad82:	4620      	mov	r0, r4
 801ad84:	4629      	mov	r1, r5
 801ad86:	f7e5 fc37 	bl	80005f8 <__aeabi_dmul>
 801ad8a:	4602      	mov	r2, r0
 801ad8c:	460b      	mov	r3, r1
 801ad8e:	4680      	mov	r8, r0
 801ad90:	4689      	mov	r9, r1
 801ad92:	f7e5 fc31 	bl	80005f8 <__aeabi_dmul>
 801ad96:	a374      	add	r3, pc, #464	; (adr r3, 801af68 <atan+0x2b8>)
 801ad98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad9c:	4606      	mov	r6, r0
 801ad9e:	460f      	mov	r7, r1
 801ada0:	f7e5 fc2a 	bl	80005f8 <__aeabi_dmul>
 801ada4:	a372      	add	r3, pc, #456	; (adr r3, 801af70 <atan+0x2c0>)
 801ada6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adaa:	f7e5 fa6f 	bl	800028c <__adddf3>
 801adae:	4632      	mov	r2, r6
 801adb0:	463b      	mov	r3, r7
 801adb2:	f7e5 fc21 	bl	80005f8 <__aeabi_dmul>
 801adb6:	a370      	add	r3, pc, #448	; (adr r3, 801af78 <atan+0x2c8>)
 801adb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adbc:	f7e5 fa66 	bl	800028c <__adddf3>
 801adc0:	4632      	mov	r2, r6
 801adc2:	463b      	mov	r3, r7
 801adc4:	f7e5 fc18 	bl	80005f8 <__aeabi_dmul>
 801adc8:	a36d      	add	r3, pc, #436	; (adr r3, 801af80 <atan+0x2d0>)
 801adca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adce:	f7e5 fa5d 	bl	800028c <__adddf3>
 801add2:	4632      	mov	r2, r6
 801add4:	463b      	mov	r3, r7
 801add6:	f7e5 fc0f 	bl	80005f8 <__aeabi_dmul>
 801adda:	a36b      	add	r3, pc, #428	; (adr r3, 801af88 <atan+0x2d8>)
 801addc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ade0:	f7e5 fa54 	bl	800028c <__adddf3>
 801ade4:	4632      	mov	r2, r6
 801ade6:	463b      	mov	r3, r7
 801ade8:	f7e5 fc06 	bl	80005f8 <__aeabi_dmul>
 801adec:	a368      	add	r3, pc, #416	; (adr r3, 801af90 <atan+0x2e0>)
 801adee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adf2:	f7e5 fa4b 	bl	800028c <__adddf3>
 801adf6:	4642      	mov	r2, r8
 801adf8:	464b      	mov	r3, r9
 801adfa:	f7e5 fbfd 	bl	80005f8 <__aeabi_dmul>
 801adfe:	a366      	add	r3, pc, #408	; (adr r3, 801af98 <atan+0x2e8>)
 801ae00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae04:	4680      	mov	r8, r0
 801ae06:	4689      	mov	r9, r1
 801ae08:	4630      	mov	r0, r6
 801ae0a:	4639      	mov	r1, r7
 801ae0c:	f7e5 fbf4 	bl	80005f8 <__aeabi_dmul>
 801ae10:	a363      	add	r3, pc, #396	; (adr r3, 801afa0 <atan+0x2f0>)
 801ae12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae16:	f7e5 fa37 	bl	8000288 <__aeabi_dsub>
 801ae1a:	4632      	mov	r2, r6
 801ae1c:	463b      	mov	r3, r7
 801ae1e:	f7e5 fbeb 	bl	80005f8 <__aeabi_dmul>
 801ae22:	a361      	add	r3, pc, #388	; (adr r3, 801afa8 <atan+0x2f8>)
 801ae24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae28:	f7e5 fa2e 	bl	8000288 <__aeabi_dsub>
 801ae2c:	4632      	mov	r2, r6
 801ae2e:	463b      	mov	r3, r7
 801ae30:	f7e5 fbe2 	bl	80005f8 <__aeabi_dmul>
 801ae34:	a35e      	add	r3, pc, #376	; (adr r3, 801afb0 <atan+0x300>)
 801ae36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae3a:	f7e5 fa25 	bl	8000288 <__aeabi_dsub>
 801ae3e:	4632      	mov	r2, r6
 801ae40:	463b      	mov	r3, r7
 801ae42:	f7e5 fbd9 	bl	80005f8 <__aeabi_dmul>
 801ae46:	a35c      	add	r3, pc, #368	; (adr r3, 801afb8 <atan+0x308>)
 801ae48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae4c:	f7e5 fa1c 	bl	8000288 <__aeabi_dsub>
 801ae50:	4632      	mov	r2, r6
 801ae52:	463b      	mov	r3, r7
 801ae54:	f7e5 fbd0 	bl	80005f8 <__aeabi_dmul>
 801ae58:	4602      	mov	r2, r0
 801ae5a:	460b      	mov	r3, r1
 801ae5c:	4640      	mov	r0, r8
 801ae5e:	4649      	mov	r1, r9
 801ae60:	f7e5 fa14 	bl	800028c <__adddf3>
 801ae64:	4622      	mov	r2, r4
 801ae66:	462b      	mov	r3, r5
 801ae68:	f7e5 fbc6 	bl	80005f8 <__aeabi_dmul>
 801ae6c:	f1ba 3fff 	cmp.w	sl, #4294967295
 801ae70:	4602      	mov	r2, r0
 801ae72:	460b      	mov	r3, r1
 801ae74:	d14b      	bne.n	801af0e <atan+0x25e>
 801ae76:	4620      	mov	r0, r4
 801ae78:	4629      	mov	r1, r5
 801ae7a:	f7e5 fa05 	bl	8000288 <__aeabi_dsub>
 801ae7e:	e72c      	b.n	801acda <atan+0x2a>
 801ae80:	ee10 0a10 	vmov	r0, s0
 801ae84:	2200      	movs	r2, #0
 801ae86:	4b53      	ldr	r3, [pc, #332]	; (801afd4 <atan+0x324>)
 801ae88:	4629      	mov	r1, r5
 801ae8a:	f7e5 f9fd 	bl	8000288 <__aeabi_dsub>
 801ae8e:	2200      	movs	r2, #0
 801ae90:	4606      	mov	r6, r0
 801ae92:	460f      	mov	r7, r1
 801ae94:	4b4f      	ldr	r3, [pc, #316]	; (801afd4 <atan+0x324>)
 801ae96:	4620      	mov	r0, r4
 801ae98:	4629      	mov	r1, r5
 801ae9a:	f7e5 f9f7 	bl	800028c <__adddf3>
 801ae9e:	4602      	mov	r2, r0
 801aea0:	460b      	mov	r3, r1
 801aea2:	4630      	mov	r0, r6
 801aea4:	4639      	mov	r1, r7
 801aea6:	f7e5 fcd1 	bl	800084c <__aeabi_ddiv>
 801aeaa:	f04f 0a01 	mov.w	sl, #1
 801aeae:	4604      	mov	r4, r0
 801aeb0:	460d      	mov	r5, r1
 801aeb2:	e764      	b.n	801ad7e <atan+0xce>
 801aeb4:	4b49      	ldr	r3, [pc, #292]	; (801afdc <atan+0x32c>)
 801aeb6:	429e      	cmp	r6, r3
 801aeb8:	dc1d      	bgt.n	801aef6 <atan+0x246>
 801aeba:	ee10 0a10 	vmov	r0, s0
 801aebe:	2200      	movs	r2, #0
 801aec0:	4b47      	ldr	r3, [pc, #284]	; (801afe0 <atan+0x330>)
 801aec2:	4629      	mov	r1, r5
 801aec4:	f7e5 f9e0 	bl	8000288 <__aeabi_dsub>
 801aec8:	2200      	movs	r2, #0
 801aeca:	4606      	mov	r6, r0
 801aecc:	460f      	mov	r7, r1
 801aece:	4b44      	ldr	r3, [pc, #272]	; (801afe0 <atan+0x330>)
 801aed0:	4620      	mov	r0, r4
 801aed2:	4629      	mov	r1, r5
 801aed4:	f7e5 fb90 	bl	80005f8 <__aeabi_dmul>
 801aed8:	2200      	movs	r2, #0
 801aeda:	4b3e      	ldr	r3, [pc, #248]	; (801afd4 <atan+0x324>)
 801aedc:	f7e5 f9d6 	bl	800028c <__adddf3>
 801aee0:	4602      	mov	r2, r0
 801aee2:	460b      	mov	r3, r1
 801aee4:	4630      	mov	r0, r6
 801aee6:	4639      	mov	r1, r7
 801aee8:	f7e5 fcb0 	bl	800084c <__aeabi_ddiv>
 801aeec:	f04f 0a02 	mov.w	sl, #2
 801aef0:	4604      	mov	r4, r0
 801aef2:	460d      	mov	r5, r1
 801aef4:	e743      	b.n	801ad7e <atan+0xce>
 801aef6:	462b      	mov	r3, r5
 801aef8:	ee10 2a10 	vmov	r2, s0
 801aefc:	2000      	movs	r0, #0
 801aefe:	4939      	ldr	r1, [pc, #228]	; (801afe4 <atan+0x334>)
 801af00:	f7e5 fca4 	bl	800084c <__aeabi_ddiv>
 801af04:	f04f 0a03 	mov.w	sl, #3
 801af08:	4604      	mov	r4, r0
 801af0a:	460d      	mov	r5, r1
 801af0c:	e737      	b.n	801ad7e <atan+0xce>
 801af0e:	4b36      	ldr	r3, [pc, #216]	; (801afe8 <atan+0x338>)
 801af10:	4e36      	ldr	r6, [pc, #216]	; (801afec <atan+0x33c>)
 801af12:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801af16:	4456      	add	r6, sl
 801af18:	449a      	add	sl, r3
 801af1a:	e9da 2300 	ldrd	r2, r3, [sl]
 801af1e:	f7e5 f9b3 	bl	8000288 <__aeabi_dsub>
 801af22:	4622      	mov	r2, r4
 801af24:	462b      	mov	r3, r5
 801af26:	f7e5 f9af 	bl	8000288 <__aeabi_dsub>
 801af2a:	4602      	mov	r2, r0
 801af2c:	460b      	mov	r3, r1
 801af2e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801af32:	f7e5 f9a9 	bl	8000288 <__aeabi_dsub>
 801af36:	f1bb 0f00 	cmp.w	fp, #0
 801af3a:	4604      	mov	r4, r0
 801af3c:	460d      	mov	r5, r1
 801af3e:	f6bf aed6 	bge.w	801acee <atan+0x3e>
 801af42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801af46:	461d      	mov	r5, r3
 801af48:	e6d1      	b.n	801acee <atan+0x3e>
 801af4a:	a51d      	add	r5, pc, #116	; (adr r5, 801afc0 <atan+0x310>)
 801af4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801af50:	e6cd      	b.n	801acee <atan+0x3e>
 801af52:	bf00      	nop
 801af54:	f3af 8000 	nop.w
 801af58:	54442d18 	.word	0x54442d18
 801af5c:	3ff921fb 	.word	0x3ff921fb
 801af60:	8800759c 	.word	0x8800759c
 801af64:	7e37e43c 	.word	0x7e37e43c
 801af68:	e322da11 	.word	0xe322da11
 801af6c:	3f90ad3a 	.word	0x3f90ad3a
 801af70:	24760deb 	.word	0x24760deb
 801af74:	3fa97b4b 	.word	0x3fa97b4b
 801af78:	a0d03d51 	.word	0xa0d03d51
 801af7c:	3fb10d66 	.word	0x3fb10d66
 801af80:	c54c206e 	.word	0xc54c206e
 801af84:	3fb745cd 	.word	0x3fb745cd
 801af88:	920083ff 	.word	0x920083ff
 801af8c:	3fc24924 	.word	0x3fc24924
 801af90:	5555550d 	.word	0x5555550d
 801af94:	3fd55555 	.word	0x3fd55555
 801af98:	2c6a6c2f 	.word	0x2c6a6c2f
 801af9c:	bfa2b444 	.word	0xbfa2b444
 801afa0:	52defd9a 	.word	0x52defd9a
 801afa4:	3fadde2d 	.word	0x3fadde2d
 801afa8:	af749a6d 	.word	0xaf749a6d
 801afac:	3fb3b0f2 	.word	0x3fb3b0f2
 801afb0:	fe231671 	.word	0xfe231671
 801afb4:	3fbc71c6 	.word	0x3fbc71c6
 801afb8:	9998ebc4 	.word	0x9998ebc4
 801afbc:	3fc99999 	.word	0x3fc99999
 801afc0:	54442d18 	.word	0x54442d18
 801afc4:	bff921fb 	.word	0xbff921fb
 801afc8:	440fffff 	.word	0x440fffff
 801afcc:	7ff00000 	.word	0x7ff00000
 801afd0:	3fdbffff 	.word	0x3fdbffff
 801afd4:	3ff00000 	.word	0x3ff00000
 801afd8:	3ff2ffff 	.word	0x3ff2ffff
 801afdc:	40037fff 	.word	0x40037fff
 801afe0:	3ff80000 	.word	0x3ff80000
 801afe4:	bff00000 	.word	0xbff00000
 801afe8:	0801b9e0 	.word	0x0801b9e0
 801afec:	0801b9c0 	.word	0x0801b9c0

0801aff0 <fabs>:
 801aff0:	ec51 0b10 	vmov	r0, r1, d0
 801aff4:	ee10 2a10 	vmov	r2, s0
 801aff8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801affc:	ec43 2b10 	vmov	d0, r2, r3
 801b000:	4770      	bx	lr
 801b002:	0000      	movs	r0, r0
 801b004:	0000      	movs	r0, r0
	...

0801b008 <floor>:
 801b008:	ec51 0b10 	vmov	r0, r1, d0
 801b00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b010:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801b014:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801b018:	2e13      	cmp	r6, #19
 801b01a:	460c      	mov	r4, r1
 801b01c:	ee10 5a10 	vmov	r5, s0
 801b020:	4680      	mov	r8, r0
 801b022:	dc34      	bgt.n	801b08e <floor+0x86>
 801b024:	2e00      	cmp	r6, #0
 801b026:	da16      	bge.n	801b056 <floor+0x4e>
 801b028:	a335      	add	r3, pc, #212	; (adr r3, 801b100 <floor+0xf8>)
 801b02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b02e:	f7e5 f92d 	bl	800028c <__adddf3>
 801b032:	2200      	movs	r2, #0
 801b034:	2300      	movs	r3, #0
 801b036:	f7e5 fd6f 	bl	8000b18 <__aeabi_dcmpgt>
 801b03a:	b148      	cbz	r0, 801b050 <floor+0x48>
 801b03c:	2c00      	cmp	r4, #0
 801b03e:	da59      	bge.n	801b0f4 <floor+0xec>
 801b040:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801b044:	4a30      	ldr	r2, [pc, #192]	; (801b108 <floor+0x100>)
 801b046:	432b      	orrs	r3, r5
 801b048:	2500      	movs	r5, #0
 801b04a:	42ab      	cmp	r3, r5
 801b04c:	bf18      	it	ne
 801b04e:	4614      	movne	r4, r2
 801b050:	4621      	mov	r1, r4
 801b052:	4628      	mov	r0, r5
 801b054:	e025      	b.n	801b0a2 <floor+0x9a>
 801b056:	4f2d      	ldr	r7, [pc, #180]	; (801b10c <floor+0x104>)
 801b058:	4137      	asrs	r7, r6
 801b05a:	ea01 0307 	and.w	r3, r1, r7
 801b05e:	4303      	orrs	r3, r0
 801b060:	d01f      	beq.n	801b0a2 <floor+0x9a>
 801b062:	a327      	add	r3, pc, #156	; (adr r3, 801b100 <floor+0xf8>)
 801b064:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b068:	f7e5 f910 	bl	800028c <__adddf3>
 801b06c:	2200      	movs	r2, #0
 801b06e:	2300      	movs	r3, #0
 801b070:	f7e5 fd52 	bl	8000b18 <__aeabi_dcmpgt>
 801b074:	2800      	cmp	r0, #0
 801b076:	d0eb      	beq.n	801b050 <floor+0x48>
 801b078:	2c00      	cmp	r4, #0
 801b07a:	bfbe      	ittt	lt
 801b07c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b080:	fa43 f606 	asrlt.w	r6, r3, r6
 801b084:	19a4      	addlt	r4, r4, r6
 801b086:	ea24 0407 	bic.w	r4, r4, r7
 801b08a:	2500      	movs	r5, #0
 801b08c:	e7e0      	b.n	801b050 <floor+0x48>
 801b08e:	2e33      	cmp	r6, #51	; 0x33
 801b090:	dd0b      	ble.n	801b0aa <floor+0xa2>
 801b092:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b096:	d104      	bne.n	801b0a2 <floor+0x9a>
 801b098:	ee10 2a10 	vmov	r2, s0
 801b09c:	460b      	mov	r3, r1
 801b09e:	f7e5 f8f5 	bl	800028c <__adddf3>
 801b0a2:	ec41 0b10 	vmov	d0, r0, r1
 801b0a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0aa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801b0ae:	f04f 33ff 	mov.w	r3, #4294967295
 801b0b2:	fa23 f707 	lsr.w	r7, r3, r7
 801b0b6:	4207      	tst	r7, r0
 801b0b8:	d0f3      	beq.n	801b0a2 <floor+0x9a>
 801b0ba:	a311      	add	r3, pc, #68	; (adr r3, 801b100 <floor+0xf8>)
 801b0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0c0:	f7e5 f8e4 	bl	800028c <__adddf3>
 801b0c4:	2200      	movs	r2, #0
 801b0c6:	2300      	movs	r3, #0
 801b0c8:	f7e5 fd26 	bl	8000b18 <__aeabi_dcmpgt>
 801b0cc:	2800      	cmp	r0, #0
 801b0ce:	d0bf      	beq.n	801b050 <floor+0x48>
 801b0d0:	2c00      	cmp	r4, #0
 801b0d2:	da02      	bge.n	801b0da <floor+0xd2>
 801b0d4:	2e14      	cmp	r6, #20
 801b0d6:	d103      	bne.n	801b0e0 <floor+0xd8>
 801b0d8:	3401      	adds	r4, #1
 801b0da:	ea25 0507 	bic.w	r5, r5, r7
 801b0de:	e7b7      	b.n	801b050 <floor+0x48>
 801b0e0:	2301      	movs	r3, #1
 801b0e2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b0e6:	fa03 f606 	lsl.w	r6, r3, r6
 801b0ea:	4435      	add	r5, r6
 801b0ec:	4545      	cmp	r5, r8
 801b0ee:	bf38      	it	cc
 801b0f0:	18e4      	addcc	r4, r4, r3
 801b0f2:	e7f2      	b.n	801b0da <floor+0xd2>
 801b0f4:	2500      	movs	r5, #0
 801b0f6:	462c      	mov	r4, r5
 801b0f8:	e7aa      	b.n	801b050 <floor+0x48>
 801b0fa:	bf00      	nop
 801b0fc:	f3af 8000 	nop.w
 801b100:	8800759c 	.word	0x8800759c
 801b104:	7e37e43c 	.word	0x7e37e43c
 801b108:	bff00000 	.word	0xbff00000
 801b10c:	000fffff 	.word	0x000fffff

0801b110 <matherr>:
 801b110:	2000      	movs	r0, #0
 801b112:	4770      	bx	lr
 801b114:	0000      	movs	r0, r0
	...

0801b118 <scalbn>:
 801b118:	b570      	push	{r4, r5, r6, lr}
 801b11a:	ec55 4b10 	vmov	r4, r5, d0
 801b11e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801b122:	4606      	mov	r6, r0
 801b124:	462b      	mov	r3, r5
 801b126:	b9aa      	cbnz	r2, 801b154 <scalbn+0x3c>
 801b128:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b12c:	4323      	orrs	r3, r4
 801b12e:	d03b      	beq.n	801b1a8 <scalbn+0x90>
 801b130:	4b31      	ldr	r3, [pc, #196]	; (801b1f8 <scalbn+0xe0>)
 801b132:	4629      	mov	r1, r5
 801b134:	2200      	movs	r2, #0
 801b136:	ee10 0a10 	vmov	r0, s0
 801b13a:	f7e5 fa5d 	bl	80005f8 <__aeabi_dmul>
 801b13e:	4b2f      	ldr	r3, [pc, #188]	; (801b1fc <scalbn+0xe4>)
 801b140:	429e      	cmp	r6, r3
 801b142:	4604      	mov	r4, r0
 801b144:	460d      	mov	r5, r1
 801b146:	da12      	bge.n	801b16e <scalbn+0x56>
 801b148:	a327      	add	r3, pc, #156	; (adr r3, 801b1e8 <scalbn+0xd0>)
 801b14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b14e:	f7e5 fa53 	bl	80005f8 <__aeabi_dmul>
 801b152:	e009      	b.n	801b168 <scalbn+0x50>
 801b154:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801b158:	428a      	cmp	r2, r1
 801b15a:	d10c      	bne.n	801b176 <scalbn+0x5e>
 801b15c:	ee10 2a10 	vmov	r2, s0
 801b160:	4620      	mov	r0, r4
 801b162:	4629      	mov	r1, r5
 801b164:	f7e5 f892 	bl	800028c <__adddf3>
 801b168:	4604      	mov	r4, r0
 801b16a:	460d      	mov	r5, r1
 801b16c:	e01c      	b.n	801b1a8 <scalbn+0x90>
 801b16e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b172:	460b      	mov	r3, r1
 801b174:	3a36      	subs	r2, #54	; 0x36
 801b176:	4432      	add	r2, r6
 801b178:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b17c:	428a      	cmp	r2, r1
 801b17e:	dd0b      	ble.n	801b198 <scalbn+0x80>
 801b180:	ec45 4b11 	vmov	d1, r4, r5
 801b184:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801b1f0 <scalbn+0xd8>
 801b188:	f000 f83c 	bl	801b204 <copysign>
 801b18c:	a318      	add	r3, pc, #96	; (adr r3, 801b1f0 <scalbn+0xd8>)
 801b18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b192:	ec51 0b10 	vmov	r0, r1, d0
 801b196:	e7da      	b.n	801b14e <scalbn+0x36>
 801b198:	2a00      	cmp	r2, #0
 801b19a:	dd08      	ble.n	801b1ae <scalbn+0x96>
 801b19c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b1a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b1a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b1a8:	ec45 4b10 	vmov	d0, r4, r5
 801b1ac:	bd70      	pop	{r4, r5, r6, pc}
 801b1ae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b1b2:	da0d      	bge.n	801b1d0 <scalbn+0xb8>
 801b1b4:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b1b8:	429e      	cmp	r6, r3
 801b1ba:	ec45 4b11 	vmov	d1, r4, r5
 801b1be:	dce1      	bgt.n	801b184 <scalbn+0x6c>
 801b1c0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801b1e8 <scalbn+0xd0>
 801b1c4:	f000 f81e 	bl	801b204 <copysign>
 801b1c8:	a307      	add	r3, pc, #28	; (adr r3, 801b1e8 <scalbn+0xd0>)
 801b1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1ce:	e7e0      	b.n	801b192 <scalbn+0x7a>
 801b1d0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b1d4:	3236      	adds	r2, #54	; 0x36
 801b1d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b1da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b1de:	4620      	mov	r0, r4
 801b1e0:	4629      	mov	r1, r5
 801b1e2:	2200      	movs	r2, #0
 801b1e4:	4b06      	ldr	r3, [pc, #24]	; (801b200 <scalbn+0xe8>)
 801b1e6:	e7b2      	b.n	801b14e <scalbn+0x36>
 801b1e8:	c2f8f359 	.word	0xc2f8f359
 801b1ec:	01a56e1f 	.word	0x01a56e1f
 801b1f0:	8800759c 	.word	0x8800759c
 801b1f4:	7e37e43c 	.word	0x7e37e43c
 801b1f8:	43500000 	.word	0x43500000
 801b1fc:	ffff3cb0 	.word	0xffff3cb0
 801b200:	3c900000 	.word	0x3c900000

0801b204 <copysign>:
 801b204:	ec51 0b10 	vmov	r0, r1, d0
 801b208:	ee11 0a90 	vmov	r0, s3
 801b20c:	ee10 2a10 	vmov	r2, s0
 801b210:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b214:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801b218:	ea41 0300 	orr.w	r3, r1, r0
 801b21c:	ec43 2b10 	vmov	d0, r2, r3
 801b220:	4770      	bx	lr
	...

0801b224 <_init>:
 801b224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b226:	bf00      	nop
 801b228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b22a:	bc08      	pop	{r3}
 801b22c:	469e      	mov	lr, r3
 801b22e:	4770      	bx	lr

0801b230 <_fini>:
 801b230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b232:	bf00      	nop
 801b234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b236:	bc08      	pop	{r3}
 801b238:	469e      	mov	lr, r3
 801b23a:	4770      	bx	lr
