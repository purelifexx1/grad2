
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aecc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  0801b060  0801b060  0002b060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b780  0801b780  00030b80  2**0
                  CONTENTS
  4 .ARM          00000008  0801b780  0801b780  0002b780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b788  0801b788  00030b80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b788  0801b788  0002b788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b78c  0801b78c  0002b78c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b80  20000000  0801b790  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ff0  20000b80  0801c310  00030b80  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006b70  0801c310  00036b70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030b80  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f8ca  00000000  00000000  00030bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006339  00000000  00000000  0006047a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001db0  00000000  00000000  000667b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001bd0  00000000  00000000  00068568  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029c30  00000000  00000000  0006a138  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f604  00000000  00000000  00093d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ddb24  00000000  00000000  000b336c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00190e90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008bc0  00000000  00000000  00190f0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000b80 	.word	0x20000b80
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b044 	.word	0x0801b044

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000b84 	.word	0x20000b84
 80001cc:	0801b044 	.word	0x0801b044

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <commandRead>:
												"STOP",
												"ERRO",
												"OKAY"};

Position_DataType position_type;
Robot_CommandTypedef 	commandRead	(uint8_t *message, int32_t length, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b08d      	sub	sp, #52	; 0x34
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	603b      	str	r3, [r7, #0]
	Transfer_Protocol protocol_id = message[0];
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    Robot_CommandTypedef command_id = message[1];
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	785b      	ldrb	r3, [r3, #1]
 8000fa2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    duty_cmd->id_command = command_id;
 8000fa6:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	609a      	str	r2, [r3, #8]
	int32_t temp_pointer = 2;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch(protocol_id) 
 8000fb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 8334 	beq.w	8001624 <commandRead+0x69c>
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	f040 832f 	bne.w	8001620 <commandRead+0x698>
        break;

        // command control from pc
        case COMMAND_TRANSMISION:
        {
            switch(command_id)
 8000fc2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000fc6:	2b19      	cmp	r3, #25
 8000fc8:	f200 8328 	bhi.w	800161c <commandRead+0x694>
 8000fcc:	a201      	add	r2, pc, #4	; (adr r2, 8000fd4 <commandRead+0x4c>)
 8000fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd2:	bf00      	nop
 8000fd4:	0800103d 	.word	0x0800103d
 8000fd8:	08001053 	.word	0x08001053
 8000fdc:	08001069 	.word	0x08001069
 8000fe0:	0800112d 	.word	0x0800112d
 8000fe4:	08001303 	.word	0x08001303
 8000fe8:	08001307 	.word	0x08001307
 8000fec:	0800130b 	.word	0x0800130b
 8000ff0:	0800130f 	.word	0x0800130f
 8000ff4:	0800161d 	.word	0x0800161d
 8000ff8:	08001349 	.word	0x08001349
 8000ffc:	08001367 	.word	0x08001367
 8001000:	080013d3 	.word	0x080013d3
 8001004:	08001493 	.word	0x08001493
 8001008:	0800161d 	.word	0x0800161d
 800100c:	0800161d 	.word	0x0800161d
 8001010:	0800161d 	.word	0x0800161d
 8001014:	0800161d 	.word	0x0800161d
 8001018:	0800161d 	.word	0x0800161d
 800101c:	0800161d 	.word	0x0800161d
 8001020:	0800161d 	.word	0x0800161d
 8001024:	08001431 	.word	0x08001431
 8001028:	0800145b 	.word	0x0800145b
 800102c:	0800161d 	.word	0x0800161d
 8001030:	0800161d 	.word	0x0800161d
 8001034:	080014cd 	.word	0x080014cd
 8001038:	080015e9 	.word	0x080015e9
            {
                // Stop now
                case CMD_STOPNOW:
                {
                    duty_cmd->robot_mode = SCARA_MODE_STOP;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	2200      	movs	r2, #0
 8001040:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	2201      	movs	r2, #1
 8001046:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
                    return CMD_STOPNOW;
 800104e:	2300      	movs	r3, #0
 8001050:	e2e9      	b.n	8001626 <commandRead+0x69e>
                break;

                // Scan limit
                case CMD_SCAN_LIMIT:
                {
                    duty_cmd->robot_mode = SCARA_MODE_SCAN;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	2201      	movs	r2, #1
 8001056:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	2201      	movs	r2, #1
 800105c:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
                    return CMD_SCAN_LIMIT;
 8001064:	2301      	movs	r3, #1
 8001066:	e2de      	b.n	8001626 <commandRead+0x69e>
                break;

                // Move home
                case CMD_MOVE_HOME:
                {
                    if (length == 10){ // 2 int32_t number + 2 define byte
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	2b0a      	cmp	r3, #10
 800106c:	d15c      	bne.n	8001128 <commandRead+0x1a0>
                        // memcpy(&duty_cmd->v_factor, &message[temp_pointer+=8], 8);
						// memcpy(&duty_cmd->a_factor, &message[temp_pointer], 8); 
						temp_pointer = -2;
 800106e:	f06f 0301 	mvn.w	r3, #1
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->v_factor = (*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001076:	3304      	adds	r3, #4
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
 800107a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	ee07 3a90 	vmov	s15, r3
 8001086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800108a:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8001338 <commandRead+0x3b0>
 800108e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001092:	ee17 0a90 	vmov	r0, s15
 8001096:	f7ff fa57 	bl	8000548 <__aeabi_f2d>
 800109a:	4603      	mov	r3, r0
 800109c:	460c      	mov	r4, r1
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
						duty_cmd->a_factor = (*(int32_t*)(&message[temp_pointer]))*COR_INVERSE_SCALE;
 80010a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	4413      	add	r3, r2
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	ee07 3a90 	vmov	s15, r3
 80010b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b4:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8001338 <commandRead+0x3b0>
 80010b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010bc:	ee17 0a90 	vmov	r0, s15
 80010c0:	f7ff fa42 	bl	8000548 <__aeabi_f2d>
 80010c4:	4603      	mov	r3, r0
 80010c6:	460c      	mov	r4, r1
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0
                    }else{
                        return CMD_ERROR;
                    }
                    duty_cmd->target_point.x = 250;
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	4c99      	ldr	r4, [pc, #612]	; (800133c <commandRead+0x3b4>)
 80010d6:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
                    duty_cmd->target_point.y = -200;
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	4c97      	ldr	r4, [pc, #604]	; (8001340 <commandRead+0x3b8>)
 80010e2:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
                    duty_cmd->target_point.z = 120;
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	f04f 0300 	mov.w	r3, #0
 80010ec:	4c95      	ldr	r4, [pc, #596]	; (8001344 <commandRead+0x3bc>)
 80010ee:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
                    duty_cmd->target_point.roll = 0;
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	f04f 0300 	mov.w	r3, #0
 80010f8:	f04f 0400 	mov.w	r4, #0
 80010fc:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

                    duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	2200      	movs	r2, #0
 8001104:	745a      	strb	r2, [r3, #17]
                    duty_cmd->space_type = DUTY_SPACE_JOINT;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2201      	movs	r2, #1
 800110a:	735a      	strb	r2, [r3, #13]
                    duty_cmd->joint_type = DUTY_JOINT_4DOF;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	2201      	movs	r2, #1
 8001110:	73da      	strb	r2, [r3, #15]
                    duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	2202      	movs	r2, #2
 8001116:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	2201      	movs	r2, #1
 800111c:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
                    return CMD_MOVE_HOME;
 8001124:	2302      	movs	r3, #2
 8001126:	e27e      	b.n	8001626 <commandRead+0x69e>
                        return CMD_ERROR;
 8001128:	2316      	movs	r3, #22
 800112a:	e27c      	b.n	8001626 <commandRead+0x69e>
                break;

                // Move line
                case CMD_MOVE_LINE:
                {
                    if (length == 29){ // 6 int32_t number + 3 byte number + 2 define byte
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	2b1d      	cmp	r3, #29
 8001130:	f040 80e5 	bne.w	80012fe <commandRead+0x376>
						//scaraSetScanFlag();
						uint8_t mode_init;
						temp_pointer = -2;
 8001134:	f06f 0301 	mvn.w	r3, #1
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c

						duty_cmd->target_point.x = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 800113a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113c:	3304      	adds	r3, #4
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	4413      	add	r3, r2
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f9eb 	bl	8000524 <__aeabi_i2d>
 800114e:	a378      	add	r3, pc, #480	; (adr r3, 8001330 <commandRead+0x3a8>)
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	f7ff fa50 	bl	80005f8 <__aeabi_dmul>
 8001158:	4603      	mov	r3, r0
 800115a:	460c      	mov	r4, r1
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
						duty_cmd->target_point.y = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001164:	3304      	adds	r3, #4
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	4413      	add	r3, r2
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f9d7 	bl	8000524 <__aeabi_i2d>
 8001176:	a36e      	add	r3, pc, #440	; (adr r3, 8001330 <commandRead+0x3a8>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	f7ff fa3c 	bl	80005f8 <__aeabi_dmul>
 8001180:	4603      	mov	r3, r0
 8001182:	460c      	mov	r4, r1
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
						duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 800118a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118c:	3304      	adds	r3, #4
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	4413      	add	r3, r2
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9c3 	bl	8000524 <__aeabi_i2d>
 800119e:	a364      	add	r3, pc, #400	; (adr r3, 8001330 <commandRead+0x3a8>)
 80011a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a4:	f7ff fa28 	bl	80005f8 <__aeabi_dmul>
 80011a8:	4603      	mov	r3, r0
 80011aa:	460c      	mov	r4, r1
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
						duty_cmd->target_point.roll = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 80011b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b4:	3304      	adds	r3, #4
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	4413      	add	r3, r2
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f9af 	bl	8000524 <__aeabi_i2d>
 80011c6:	a35a      	add	r3, pc, #360	; (adr r3, 8001330 <commandRead+0x3a8>)
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	f7ff fa14 	bl	80005f8 <__aeabi_dmul>
 80011d0:	4603      	mov	r3, r0
 80011d2:	460c      	mov	r4, r1
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
						duty_cmd->v_factor = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 80011da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011dc:	3304      	adds	r3, #4
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	4413      	add	r3, r2
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f99b 	bl	8000524 <__aeabi_i2d>
 80011ee:	a350      	add	r3, pc, #320	; (adr r3, 8001330 <commandRead+0x3a8>)
 80011f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f4:	f7ff fa00 	bl	80005f8 <__aeabi_dmul>
 80011f8:	4603      	mov	r3, r0
 80011fa:	460c      	mov	r4, r1
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
						mode_init = message[temp_pointer+=4];
 8001202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001204:	3304      	adds	r3, #4
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	4413      	add	r3, r2
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	74fb      	strb	r3, [r7, #19]

						if(mode_init == DUTY_MODE_INIT_QVA){
 8001212:	7cfb      	ldrb	r3, [r7, #19]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d117      	bne.n	8001248 <commandRead+0x2c0>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	2200      	movs	r2, #0
 800121c:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 800121e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001220:	3301      	adds	r3, #1
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	4413      	add	r3, r2
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff f979 	bl	8000524 <__aeabi_i2d>
 8001232:	a33f      	add	r3, pc, #252	; (adr r3, 8001330 <commandRead+0x3a8>)
 8001234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001238:	f7ff f9de 	bl	80005f8 <__aeabi_dmul>
 800123c:	4603      	mov	r3, r0
 800123e:	460c      	mov	r4, r1
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0
 8001246:	e037      	b.n	80012b8 <commandRead+0x330>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 8001248:	7cfb      	ldrb	r3, [r7, #19]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d117      	bne.n	800127e <commandRead+0x2f6>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	2201      	movs	r2, #1
 8001252:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	3301      	adds	r3, #1
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800125a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	4413      	add	r3, r2
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f95e 	bl	8000524 <__aeabi_i2d>
 8001268:	a331      	add	r3, pc, #196	; (adr r3, 8001330 <commandRead+0x3a8>)
 800126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126e:	f7ff f9c3 	bl	80005f8 <__aeabi_dmul>
 8001272:	4603      	mov	r3, r0
 8001274:	460c      	mov	r4, r1
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800127c:	e01c      	b.n	80012b8 <commandRead+0x330>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 800127e:	7cfb      	ldrb	r3, [r7, #19]
 8001280:	2b03      	cmp	r3, #3
 8001282:	d117      	bne.n	80012b4 <commandRead+0x32c>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	2203      	movs	r2, #3
 8001288:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 800128a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800128c:	3301      	adds	r3, #1
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	4413      	add	r3, r2
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f943 	bl	8000524 <__aeabi_i2d>
 800129e:	a324      	add	r3, pc, #144	; (adr r3, 8001330 <commandRead+0x3a8>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	f7ff f9a8 	bl	80005f8 <__aeabi_dmul>
 80012a8:	4603      	mov	r3, r0
 80012aa:	460c      	mov	r4, r1
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80012b2:	e001      	b.n	80012b8 <commandRead+0x330>
						}else{
							return CMD_ERROR;
 80012b4:	2316      	movs	r3, #22
 80012b6:	e1b6      	b.n	8001626 <commandRead+0x69e>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 80012b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ba:	3304      	adds	r3, #4
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	4413      	add	r3, r2
 80012c4:	781a      	ldrb	r2, [r3, #0]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 80012ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012cc:	3301      	adds	r3, #1
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	4413      	add	r3, r2
 80012d6:	781a      	ldrb	r2, [r3, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	741a      	strb	r2, [r3, #16]
						duty_cmd->path_type = DUTY_PATH_LINE;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	2200      	movs	r2, #0
 80012e0:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	2200      	movs	r2, #0
 80012e6:	735a      	strb	r2, [r3, #13]
					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	2202      	movs	r2, #2
 80012ec:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	2201      	movs	r2, #1
 80012f2:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
					return CMD_MOVE_LINE;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e193      	b.n	8001626 <commandRead+0x69e>
						return CMD_ERROR;
 80012fe:	2316      	movs	r3, #22
 8001300:	e191      	b.n	8001626 <commandRead+0x69e>
				break;

				// Move circle
				case CMD_MOVE_CIRCLE:
				{
					return CMD_MOVE_CIRCLE;
 8001302:	2304      	movs	r3, #4
 8001304:	e18f      	b.n	8001626 <commandRead+0x69e>
				break;

				// Move joint
				case CMD_MOVE_JOINT:
				{
					return CMD_MOVE_JOINT;
 8001306:	2305      	movs	r3, #5
 8001308:	e18d      	b.n	8001626 <commandRead+0x69e>
				break;

				// Rotate Single
				case CMD_ROTATE_SINGLE:
				{
					return CMD_ROTATE_SINGLE;
 800130a:	2306      	movs	r3, #6
 800130c:	e18b      	b.n	8001626 <commandRead+0x69e>
				break;

				// Set output
				case CMD_OUTPUT:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	2b03      	cmp	r3, #3
 8001312:	d10a      	bne.n	800132a <commandRead+0x3a2>
						temp_pointer = 2;
 8001314:	2302      	movs	r3, #2
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->sub_para_int = message[temp_pointer];
 8001318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	4413      	add	r3, r2
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	615a      	str	r2, [r3, #20]
						return CMD_OUTPUT;
 8001326:	2307      	movs	r3, #7
 8001328:	e17d      	b.n	8001626 <commandRead+0x69e>
					}else{
						return CMD_ERROR;
 800132a:	2316      	movs	r3, #22
 800132c:	e17b      	b.n	8001626 <commandRead+0x69e>
 800132e:	bf00      	nop
 8001330:	a0000000 	.word	0xa0000000
 8001334:	3eb0c6f7 	.word	0x3eb0c6f7
 8001338:	358637bd 	.word	0x358637bd
 800133c:	406f4000 	.word	0x406f4000
 8001340:	c0690000 	.word	0xc0690000
 8001344:	405e0000 	.word	0x405e0000
				break;

				// Read position
				case CMD_READ_POSITION:
				{
					if(length == 3){ // 1 byte categorize read type + 2 byte define
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	2b03      	cmp	r3, #3
 800134c:	d109      	bne.n	8001362 <commandRead+0x3da>
						temp_pointer = 2;
 800134e:	2302      	movs	r3, #2
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
						position_type = message[temp_pointer];
 8001352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	4413      	add	r3, r2
 8001358:	781a      	ldrb	r2, [r3, #0]
 800135a:	4ba1      	ldr	r3, [pc, #644]	; (80015e0 <commandRead+0x658>)
 800135c:	701a      	strb	r2, [r3, #0]
						return CMD_READ_POSITION;
 800135e:	2309      	movs	r3, #9
 8001360:	e161      	b.n	8001626 <commandRead+0x69e>
					}else{
						return CMD_ERROR;
 8001362:	2316      	movs	r3, #22
 8001364:	e15f      	b.n	8001626 <commandRead+0x69e>
				break;			

				// Setting
				case CMD_SETTING:
				{
					if (length == 4){ // 2 byte configure + 2 byte define
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	2b04      	cmp	r3, #4
 800136a:	d130      	bne.n	80013ce <commandRead+0x446>
						uint8_t mode_traject;
						uint8_t mode_coordinate;
						temp_pointer = 2;
 800136c:	2302      	movs	r3, #2
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c
						mode_coordinate = message[temp_pointer++];
 8001370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001372:	1c5a      	adds	r2, r3, #1
 8001374:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001376:	461a      	mov	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4413      	add	r3, r2
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	757b      	strb	r3, [r7, #21]
						mode_traject = message[temp_pointer];
 8001380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	4413      	add	r3, r2
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	753b      	strb	r3, [r7, #20]

						if (mode_coordinate == DUTY_COORDINATES_ABS) {
 800138a:	7d7b      	ldrb	r3, [r7, #21]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d103      	bne.n	8001398 <commandRead+0x410>
							duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	2200      	movs	r2, #0
 8001394:	731a      	strb	r2, [r3, #12]
 8001396:	e008      	b.n	80013aa <commandRead+0x422>
						} else if (mode_coordinate == DUTY_COORDINATES_REL) {
 8001398:	7d7b      	ldrb	r3, [r7, #21]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d103      	bne.n	80013a6 <commandRead+0x41e>
							duty_cmd->coordinate_type = DUTY_COORDINATES_REL;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	2201      	movs	r2, #1
 80013a2:	731a      	strb	r2, [r3, #12]
 80013a4:	e001      	b.n	80013aa <commandRead+0x422>
						} else {
							return CMD_ERROR;
 80013a6:	2316      	movs	r3, #22
 80013a8:	e13d      	b.n	8001626 <commandRead+0x69e>
						}

						if (mode_traject == DUTY_TRAJECTORY_LSPB) {
 80013aa:	7d3b      	ldrb	r3, [r7, #20]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d103      	bne.n	80013b8 <commandRead+0x430>
							duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	2200      	movs	r2, #0
 80013b4:	741a      	strb	r2, [r3, #16]
 80013b6:	e008      	b.n	80013ca <commandRead+0x442>
						} else if (mode_traject == DUTY_TRAJECTORY_SCURVE) {
 80013b8:	7d3b      	ldrb	r3, [r7, #20]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d103      	bne.n	80013c6 <commandRead+0x43e>
							duty_cmd->trajec_type = DUTY_TRAJECTORY_SCURVE;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	2201      	movs	r2, #1
 80013c2:	741a      	strb	r2, [r3, #16]
 80013c4:	e001      	b.n	80013ca <commandRead+0x442>
						} else {
							return CMD_ERROR;
 80013c6:	2316      	movs	r3, #22
 80013c8:	e12d      	b.n	8001626 <commandRead+0x69e>
						}
						return CMD_SETTING;
 80013ca:	230a      	movs	r3, #10
 80013cc:	e12b      	b.n	8001626 <commandRead+0x69e>
					}else{
						return CMD_ERROR;
 80013ce:	2316      	movs	r3, #22
 80013d0:	e129      	b.n	8001626 <commandRead+0x69e>
				break;

				// Change method
				case CMD_METHOD_CHANGE:
				{
					if(length == 3){ // 1 byte configure + 2 byte define
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d129      	bne.n	800142c <commandRead+0x4a4>
						uint8_t method;
						temp_pointer = 2;
 80013d8:	2302      	movs	r3, #2
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
						method = message[temp_pointer];
 80013dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	4413      	add	r3, r2
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	75bb      	strb	r3, [r7, #22]
						if (SCARA_METHOD_MANUAL == method) {
 80013e6:	7dbb      	ldrb	r3, [r7, #22]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d103      	bne.n	80013f4 <commandRead+0x46c>
							duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	2200      	movs	r2, #0
 80013f0:	705a      	strb	r2, [r3, #1]
 80013f2:	e016      	b.n	8001422 <commandRead+0x49a>
						} else if (SCARA_METHOD_SEMI_AUTO == method) {
 80013f4:	7dbb      	ldrb	r3, [r7, #22]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d103      	bne.n	8001402 <commandRead+0x47a>
							duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	2201      	movs	r2, #1
 80013fe:	705a      	strb	r2, [r3, #1]
 8001400:	e00f      	b.n	8001422 <commandRead+0x49a>
						} else if (SCARA_METHOD_AUTO == method) {
 8001402:	7dbb      	ldrb	r3, [r7, #22]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d103      	bne.n	8001410 <commandRead+0x488>
							duty_cmd->robot_method = SCARA_METHOD_AUTO;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	2202      	movs	r2, #2
 800140c:	705a      	strb	r2, [r3, #1]
 800140e:	e008      	b.n	8001422 <commandRead+0x49a>
						}else if(SCARA_METHOD_TEST == method){
 8001410:	7dbb      	ldrb	r3, [r7, #22]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d103      	bne.n	800141e <commandRead+0x496>
							duty_cmd->robot_method = SCARA_METHOD_TEST;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	2203      	movs	r2, #3
 800141a:	705a      	strb	r2, [r3, #1]
 800141c:	e001      	b.n	8001422 <commandRead+0x49a>
						}
						 else {
							return CMD_ERROR;
 800141e:	2316      	movs	r3, #22
 8001420:	e101      	b.n	8001626 <commandRead+0x69e>
						}
						duty_cmd->change_method = TRUE;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	2201      	movs	r2, #1
 8001426:	701a      	strb	r2, [r3, #0]
						return CMD_METHOD_CHANGE;
 8001428:	230b      	movs	r3, #11
 800142a:	e0fc      	b.n	8001626 <commandRead+0x69e>
					}else{
						return CMD_ERROR;
 800142c:	2316      	movs	r3, #22
 800142e:	e0fa      	b.n	8001626 <commandRead+0x69e>
				break;

				// Set manual key
				case CMD_KEYBOARD:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	2b03      	cmp	r3, #3
 8001434:	d10f      	bne.n	8001456 <commandRead+0x4ce>
						int temp_pointer = 2;
 8001436:	2302      	movs	r3, #2
 8001438:	61fb      	str	r3, [r7, #28]
						duty_cmd->keyboard = (SCARA_KeyTypeDef)message[temp_pointer];
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	4413      	add	r3, r2
 8001440:	781a      	ldrb	r2, [r3, #0]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	70da      	strb	r2, [r3, #3]
						duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	2200      	movs	r2, #0
 800144a:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
						return CMD_KEYBOARD;
 8001452:	2314      	movs	r3, #20
 8001454:	e0e7      	b.n	8001626 <commandRead+0x69e>
					}else{
						return CMD_ERROR;
 8001456:	2316      	movs	r3, #22
 8001458:	e0e5      	b.n	8001626 <commandRead+0x69e>
				break;

				// Set manual key speed
				case CMD_KEY_SPEED:
				{
					if(length == 3){ // 1 byte key value + 2 byte define
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	2b03      	cmp	r3, #3
 800145e:	d116      	bne.n	800148e <commandRead+0x506>
						int temp_pointer = 2;
 8001460:	2302      	movs	r3, #2
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
						int32_t speed = (int32_t)message[temp_pointer];
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	4413      	add	r3, r2
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	623b      	str	r3, [r7, #32]
						// check limit
						if ((speed < SHIFT_SPEED_MIN) || (speed > SHIFT_SPEED_MAX)) {
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	2b00      	cmp	r3, #0
 8001472:	dd02      	ble.n	800147a <commandRead+0x4f2>
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	2b0e      	cmp	r3, #14
 8001478:	dd01      	ble.n	800147e <commandRead+0x4f6>
							return CMD_ERROR;
 800147a:	2316      	movs	r3, #22
 800147c:	e0d3      	b.n	8001626 <commandRead+0x69e>
						}
						duty_cmd->key_speed = speed;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	6a3a      	ldr	r2, [r7, #32]
 8001482:	605a      	str	r2, [r3, #4]
						current_key_speed1 = speed;
 8001484:	4a57      	ldr	r2, [pc, #348]	; (80015e4 <commandRead+0x65c>)
 8001486:	6a3b      	ldr	r3, [r7, #32]
 8001488:	6013      	str	r3, [r2, #0]
						return CMD_KEY_SPEED;
 800148a:	2315      	movs	r3, #21
 800148c:	e0cb      	b.n	8001626 <commandRead+0x69e>
					}else{
						return CMD_ERROR;
 800148e:	2316      	movs	r3, #22
 8001490:	e0c9      	b.n	8001626 <commandRead+0x69e>
				break;

				// Set test mode
				case CMD_MOTOR_TEST:
				{
					if(length == 3){ // 1byte key mode + 2 byte define
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	2b03      	cmp	r3, #3
 8001496:	d117      	bne.n	80014c8 <commandRead+0x540>
						int temp_pointer = 2;
 8001498:	2302      	movs	r3, #2
 800149a:	61bb      	str	r3, [r7, #24]
						uint8_t test_key = message[temp_pointer];
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	4413      	add	r3, r2
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	75fb      	strb	r3, [r7, #23]
						if(test_key < 0 || test_key > 8){
 80014a6:	7dfb      	ldrb	r3, [r7, #23]
 80014a8:	2b08      	cmp	r3, #8
 80014aa:	d901      	bls.n	80014b0 <commandRead+0x528>
							return CMD_ERROR;
 80014ac:	2316      	movs	r3, #22
 80014ae:	e0ba      	b.n	8001626 <commandRead+0x69e>
						}
						duty_cmd->test_key = test_key;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	7dfa      	ldrb	r2, [r7, #23]
 80014b4:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
						duty_cmd->robot_method = SCARA_METHOD_TEST;	
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	2203      	movs	r2, #3
 80014bc:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
						return CMD_MOTOR_TEST;
 80014c4:	230c      	movs	r3, #12
 80014c6:	e0ae      	b.n	8001626 <commandRead+0x69e>
					}else{
						return CMD_ERROR;
 80014c8:	2316      	movs	r3, #22
 80014ca:	e0ac      	b.n	8001626 <commandRead+0x69e>
				}
				break;

				case CMD_OBJECT_DETECTED:
				{
					if (length == 19){ // 4 int32_t number + 1 byte object type + 2 define byte
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	2b13      	cmp	r3, #19
 80014d0:	d17e      	bne.n	80015d0 <commandRead+0x648>
						temp_pointer = -2;
 80014d2:	f06f 0301 	mvn.w	r3, #1
 80014d6:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->target_point.x = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 80014d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014da:	3304      	adds	r3, #4
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e0:	68fa      	ldr	r2, [r7, #12]
 80014e2:	4413      	add	r3, r2
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f81c 	bl	8000524 <__aeabi_i2d>
 80014ec:	a33a      	add	r3, pc, #232	; (adr r3, 80015d8 <commandRead+0x650>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f7ff f881 	bl	80005f8 <__aeabi_dmul>
 80014f6:	4603      	mov	r3, r0
 80014f8:	460c      	mov	r4, r1
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
						duty_cmd->target_point.y = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001502:	3304      	adds	r3, #4
 8001504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	4413      	add	r3, r2
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f808 	bl	8000524 <__aeabi_i2d>
 8001514:	a330      	add	r3, pc, #192	; (adr r3, 80015d8 <commandRead+0x650>)
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	f7ff f86d 	bl	80005f8 <__aeabi_dmul>
 800151e:	4603      	mov	r3, r0
 8001520:	460c      	mov	r4, r1
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
						duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152a:	3304      	adds	r3, #4
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800152e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7fe fff4 	bl	8000524 <__aeabi_i2d>
 800153c:	a326      	add	r3, pc, #152	; (adr r3, 80015d8 <commandRead+0x650>)
 800153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001542:	f7ff f859 	bl	80005f8 <__aeabi_dmul>
 8001546:	4603      	mov	r3, r0
 8001548:	460c      	mov	r4, r1
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
						duty_cmd->target_point.roll = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001552:	3304      	adds	r3, #4
 8001554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	4413      	add	r3, r2
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe ffe0 	bl	8000524 <__aeabi_i2d>
 8001564:	a31c      	add	r3, pc, #112	; (adr r3, 80015d8 <commandRead+0x650>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	f7ff f845 	bl	80005f8 <__aeabi_dmul>
 800156e:	4603      	mov	r3, r0
 8001570:	460c      	mov	r4, r1
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
						duty_cmd->target_point.object_type = message[temp_pointer+=4];
 8001578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157a:	3304      	adds	r3, #4
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800157e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	781a      	ldrb	r2, [r3, #0]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
						duty_cmd->target_point.t = (double)(TIM2->CNT);
 800158c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe ffb6 	bl	8000504 <__aeabi_ui2d>
 8001598:	4603      	mov	r3, r0
 800159a:	460c      	mov	r4, r1
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
						duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	2201      	movs	r2, #1
 80015a6:	745a      	strb	r2, [r3, #17]
						duty_cmd->path_type = DUTY_PATH_LINE;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	2200      	movs	r2, #0
 80015ac:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	2200      	movs	r2, #0
 80015b2:	735a      	strb	r2, [r3, #13]
						duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2200      	movs	r2, #0
 80015b8:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2200      	movs	r2, #0
 80015be:	741a      	strb	r2, [r3, #16]
					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	2204      	movs	r2, #4
 80015c4:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
					return CMD_OBJECT_DETECTED;
 80015cc:	2318      	movs	r3, #24
 80015ce:	e02a      	b.n	8001626 <commandRead+0x69e>
						return CMD_ERROR;
 80015d0:	2316      	movs	r3, #22
 80015d2:	e028      	b.n	8001626 <commandRead+0x69e>
 80015d4:	f3af 8000 	nop.w
 80015d8:	a0000000 	.word	0xa0000000
 80015dc:	3eb0c6f7 	.word	0x3eb0c6f7
 80015e0:	20004d60 	.word	0x20004d60
 80015e4:	20000000 	.word	0x20000000
				}
				break;

				case CMD_SETUP_CONVEYOR_SPEED:
				{
					if (length == 6) { // 1 int32_t number + 2 define byte
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	2b06      	cmp	r3, #6
 80015ec:	d114      	bne.n	8001618 <commandRead+0x690>
						temp_pointer = 2;
 80015ee:	2302      	movs	r3, #2
 80015f0:	62fb      	str	r3, [r7, #44]	; 0x2c
						conveyor_speed = (double)(*(int32_t*)(&message[temp_pointer]))*COR_INVERSE_SCALE;
 80015f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	4413      	add	r3, r2
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff92 	bl	8000524 <__aeabi_i2d>
 8001600:	a30c      	add	r3, pc, #48	; (adr r3, 8001634 <commandRead+0x6ac>)
 8001602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001606:	f7fe fff7 	bl	80005f8 <__aeabi_dmul>
 800160a:	4603      	mov	r3, r0
 800160c:	460c      	mov	r4, r1
 800160e:	4a08      	ldr	r2, [pc, #32]	; (8001630 <commandRead+0x6a8>)
 8001610:	e9c2 3400 	strd	r3, r4, [r2]
						return CMD_SETUP_CONVEYOR_SPEED;
 8001614:	2319      	movs	r3, #25
 8001616:	e006      	b.n	8001626 <commandRead+0x69e>
					}else{
						return CMD_ERROR;
 8001618:	2316      	movs	r3, #22
 800161a:	e004      	b.n	8001626 <commandRead+0x69e>
				break;

				//Unknow command id
				default:
				{
					return CMD_ERROR;
 800161c:	2316      	movs	r3, #22
 800161e:	e002      	b.n	8001626 <commandRead+0x69e>
        break;

        //unknow protocol id
        default:
        {
            return PROTOCOL_ERROR;
 8001620:	2317      	movs	r3, #23
 8001622:	e000      	b.n	8001626 <commandRead+0x69e>
        break;
 8001624:	bf00      	nop
        }
    }
}
 8001626:	4618      	mov	r0, r3
 8001628:	3734      	adds	r7, #52	; 0x34
 800162a:	46bd      	mov	sp, r7
 800162c:	bd90      	pop	{r4, r7, pc}
 800162e:	bf00      	nop
 8001630:	20000ba0 	.word	0x20000ba0
 8001634:	a0000000 	.word	0xa0000000
 8001638:	3eb0c6f7 	.word	0x3eb0c6f7

0800163c <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail, int32_t *detail_length) {
 800163c:	b082      	sub	sp, #8
 800163e:	b580      	push	{r7, lr}
 8001640:	b0e2      	sub	sp, #392	; 0x188
 8001642:	af2e      	add	r7, sp, #184	; 0xb8
 8001644:	4601      	mov	r1, r0
 8001646:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 800164a:	e880 000c 	stmia.w	r0, {r2, r3}
 800164e:	460b      	mov	r3, r1
 8001650:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2b19      	cmp	r3, #25
 8001656:	f200 8188 	bhi.w	800196a <commandReply+0x32e>
 800165a:	a201      	add	r2, pc, #4	; (adr r2, 8001660 <commandReply+0x24>)
 800165c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001660:	080016c9 	.word	0x080016c9
 8001664:	080016c9 	.word	0x080016c9
 8001668:	080016c9 	.word	0x080016c9
 800166c:	080016c9 	.word	0x080016c9
 8001670:	080016c9 	.word	0x080016c9
 8001674:	080016c9 	.word	0x080016c9
 8001678:	080016c9 	.word	0x080016c9
 800167c:	080016d1 	.word	0x080016d1
 8001680:	0800174b 	.word	0x0800174b
 8001684:	0800177f 	.word	0x0800177f
 8001688:	08001815 	.word	0x08001815
 800168c:	080018f1 	.word	0x080018f1
 8001690:	080016c9 	.word	0x080016c9
 8001694:	0800198d 	.word	0x0800198d
 8001698:	0800198d 	.word	0x0800198d
 800169c:	0800198d 	.word	0x0800198d
 80016a0:	0800198d 	.word	0x0800198d
 80016a4:	0800198d 	.word	0x0800198d
 80016a8:	0800198d 	.word	0x0800198d
 80016ac:	080018f9 	.word	0x080018f9
 80016b0:	08001901 	.word	0x08001901
 80016b4:	08001909 	.word	0x08001909
 80016b8:	08001949 	.word	0x08001949
 80016bc:	0800196b 	.word	0x0800196b
 80016c0:	080016c9 	.word	0x080016c9
 80016c4:	080018e9 	.word	0x080018e9
	case CMD_MOTOR_TEST:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_OBJECT_DETECTED:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 80016c8:	2309      	movs	r3, #9
 80016ca:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80016ce:	e15e      	b.n	800198e <commandReply+0x352>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.sub_para_int) {
 80016d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d110      	bne.n	80016fa <commandReply+0xbe>
				scaraSetOutput(1);
 80016d8:	2001      	movs	r0, #1
 80016da:	f008 fed1 	bl	800a480 <scaraSetOutput>
				// strcpy( (char *)detail, "Output ON");
				// detail_length += 9;
				detail[(*detail_length)++] = OUTPUT_ON;
 80016de:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	1c59      	adds	r1, r3, #1
 80016e6:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80016ea:	6011      	str	r1, [r2, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80016f2:	4413      	add	r3, r2
 80016f4:	220d      	movs	r2, #13
 80016f6:	701a      	strb	r2, [r3, #0]
 80016f8:	e023      	b.n	8001742 <commandReply+0x106>
			} else if (0 == duty_cmd.sub_para_int) {
 80016fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d110      	bne.n	8001724 <commandReply+0xe8>
				scaraSetOutput(0);
 8001702:	2000      	movs	r0, #0
 8001704:	f008 febc 	bl	800a480 <scaraSetOutput>
				detail[(*detail_length)++] = OUTPUT_OFF;
 8001708:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	1c59      	adds	r1, r3, #1
 8001710:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001714:	6011      	str	r1, [r2, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800171c:	4413      	add	r3, r2
 800171e:	220e      	movs	r2, #14
 8001720:	701a      	strb	r2, [r3, #0]
 8001722:	e00e      	b.n	8001742 <commandReply+0x106>
			} else {
				// strcpy( (char *)detail, "Wrong Value");
				// detail_length += 11;
				detail[(*detail_length)++] = WRONG_OUTPUT_VALUE ;
 8001724:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	1c59      	adds	r1, r3, #1
 800172c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001730:	6011      	str	r1, [r2, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001738:	4413      	add	r3, r2
 800173a:	220f      	movs	r2, #15
 800173c:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 800173e:	2307      	movs	r3, #7
 8001740:	e127      	b.n	8001992 <commandReply+0x356>
			}
			ret = RPD_OK;
 8001742:	2308      	movs	r3, #8
 8001744:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 8001748:	e121      	b.n	800198e <commandReply+0x352>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 800174a:	f008 fefb 	bl	800a544 <scaraGetMode>
 800174e:	4603      	mov	r3, r0
 8001750:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			current_state	 = scaraGetDutyState();
 8001754:	f008 ff0e 	bl	800a574 <scaraGetDutyState>
 8001758:	4603      	mov	r3, r0
 800175a:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 800175e:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001762:	2b02      	cmp	r3, #2
 8001764:	d107      	bne.n	8001776 <commandReply+0x13a>
 8001766:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 800176a:	2b00      	cmp	r3, #0
 800176c:	d103      	bne.n	8001776 <commandReply+0x13a>
				ret = RPD_IDLE;
 800176e:	2300      	movs	r3, #0
 8001770:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 8001774:	e10b      	b.n	800198e <commandReply+0x352>
				ret = RPD_BUSY;
 8001776:	2301      	movs	r3, #1
 8001778:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 800177c:	e107      	b.n	800198e <commandReply+0x352>
	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			if(position_type == REAL_POSITION_DATA || position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 800177e:	4b88      	ldr	r3, [pc, #544]	; (80019a0 <commandReply+0x364>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <commandReply+0x152>
 8001786:	4b86      	ldr	r3, [pc, #536]	; (80019a0 <commandReply+0x364>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d113      	bne.n	80017b6 <commandReply+0x17a>
				lowlayer_readTruePosition(&position);
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	4618      	mov	r0, r3
 8001794:	f002 fef0 	bl	8004578 <lowlayer_readTruePosition>
				kinematicForward(&position);
 8001798:	f107 0308 	add.w	r3, r7, #8
 800179c:	4618      	mov	r0, r3
 800179e:	f001 fff7 	bl	8003790 <kinematicForward>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 80017a2:	4b7f      	ldr	r3, [pc, #508]	; (80019a0 <commandReply+0x364>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d11e      	bne.n	80017e8 <commandReply+0x1ac>
					scaraUpdatePosition(&position);
 80017aa:	f107 0308 	add.w	r3, r7, #8
 80017ae:	4618      	mov	r0, r3
 80017b0:	f008 feb8 	bl	800a524 <scaraUpdatePosition>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 80017b4:	e018      	b.n	80017e8 <commandReply+0x1ac>
				}
			}else if(position_type == ESTIMATE_POSITION_DATA){
 80017b6:	4b7a      	ldr	r3, [pc, #488]	; (80019a0 <commandReply+0x364>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d105      	bne.n	80017ca <commandReply+0x18e>
				scaraGetPosition(&position);
 80017be:	f107 0308 	add.w	r3, r7, #8
 80017c2:	4618      	mov	r0, r3
 80017c4:	f008 fe9e 	bl	800a504 <scaraGetPosition>
 80017c8:	e00e      	b.n	80017e8 <commandReply+0x1ac>
			}else{
				detail[(*detail_length)++] = WRONG_READ_POSITION_TYPE;
 80017ca:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	1c59      	adds	r1, r3, #1
 80017d2:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80017d6:	6011      	str	r1, [r2, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80017de:	4413      	add	r3, r2
 80017e0:	2210      	movs	r2, #16
 80017e2:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 80017e4:	2307      	movs	r3, #7
 80017e6:	e0d4      	b.n	8001992 <commandReply+0x356>
			}
			*detail_length = scaraPosition_packaging(detail, position);
 80017e8:	4668      	mov	r0, sp
 80017ea:	f107 0310 	add.w	r3, r7, #16
 80017ee:	22b8      	movs	r2, #184	; 0xb8
 80017f0:	4619      	mov	r1, r3
 80017f2:	f014 f9c3 	bl	8015b7c <memcpy>
 80017f6:	f107 0308 	add.w	r3, r7, #8
 80017fa:	cb0c      	ldmia	r3, {r2, r3}
 80017fc:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 8001800:	f008 feee 	bl	800a5e0 <scaraPosition_packaging>
 8001804:	4602      	mov	r2, r0
 8001806:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800180a:	601a      	str	r2, [r3, #0]
			ret =  RPD_POSITION;
 800180c:	2302      	movs	r3, #2
 800180e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 8001812:	e0bc      	b.n	800198e <commandReply+0x352>
	case CMD_SETTING:
		if ( DUTY_COORDINATES_ABS == duty_cmd.coordinate_type) {
 8001814:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d10d      	bne.n	8001838 <commandReply+0x1fc>
			// strcpy( (char *)detail, "ABSOLUTE.");
			// detail_length += 9;
			detail[(*detail_length)++] = ABSOLUTE;
 800181c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	1c59      	adds	r1, r3, #1
 8001824:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001828:	6011      	str	r1, [r2, #0]
 800182a:	461a      	mov	r2, r3
 800182c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001830:	4413      	add	r3, r2
 8001832:	2211      	movs	r2, #17
 8001834:	701a      	strb	r2, [r3, #0]
 8001836:	e020      	b.n	800187a <commandReply+0x23e>
		} else if ( DUTY_COORDINATES_REL == duty_cmd.coordinate_type) {
 8001838:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 800183c:	2b01      	cmp	r3, #1
 800183e:	d10d      	bne.n	800185c <commandReply+0x220>
			detail[(*detail_length)++] = RELATIVE;
 8001840:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	1c59      	adds	r1, r3, #1
 8001848:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800184c:	6011      	str	r1, [r2, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001854:	4413      	add	r3, r2
 8001856:	2212      	movs	r2, #18
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	e00e      	b.n	800187a <commandReply+0x23e>
		} else {
			detail[(*detail_length)++] = WRONG_COORDINATE;
 800185c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	1c59      	adds	r1, r3, #1
 8001864:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001868:	6011      	str	r1, [r2, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001870:	4413      	add	r3, r2
 8001872:	220c      	movs	r2, #12
 8001874:	701a      	strb	r2, [r3, #0]
			return RPD_ERROR;
 8001876:	2307      	movs	r3, #7
 8001878:	e08b      	b.n	8001992 <commandReply+0x356>
		}

		if ( DUTY_TRAJECTORY_LSPB == duty_cmd.trajec_type) {
 800187a:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10d      	bne.n	800189e <commandReply+0x262>
			detail[(*detail_length)++] = LSPB;
 8001882:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	1c59      	adds	r1, r3, #1
 800188a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800188e:	6011      	str	r1, [r2, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001896:	4413      	add	r3, r2
 8001898:	2213      	movs	r2, #19
 800189a:	701a      	strb	r2, [r3, #0]
 800189c:	e020      	b.n	80018e0 <commandReply+0x2a4>
		} else if ( DUTY_TRAJECTORY_SCURVE == duty_cmd.trajec_type) {
 800189e:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d10d      	bne.n	80018c2 <commandReply+0x286>
			detail[(*detail_length)++] = S_CURVE;
 80018a6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	1c59      	adds	r1, r3, #1
 80018ae:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80018b2:	6011      	str	r1, [r2, #0]
 80018b4:	461a      	mov	r2, r3
 80018b6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80018ba:	4413      	add	r3, r2
 80018bc:	2214      	movs	r2, #20
 80018be:	701a      	strb	r2, [r3, #0]
 80018c0:	e00e      	b.n	80018e0 <commandReply+0x2a4>
		} else {
			detail[(*detail_length)++] = WRONG_TRAJECTORY_TYPE;
 80018c2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	1c59      	adds	r1, r3, #1
 80018ca:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80018ce:	6011      	str	r1, [r2, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80018d6:	4413      	add	r3, r2
 80018d8:	2205      	movs	r2, #5
 80018da:	701a      	strb	r2, [r3, #0]
			return RPD_ERROR;
 80018dc:	2307      	movs	r3, #7
 80018de:	e058      	b.n	8001992 <commandReply+0x356>
		}		
		ret = RPD_OK;
 80018e0:	2308      	movs	r3, #8
 80018e2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80018e6:	e052      	b.n	800198e <commandReply+0x352>
	case CMD_SETUP_CONVEYOR_SPEED:
		ret = RPD_OK;
 80018e8:	2308      	movs	r3, #8
 80018ea:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80018ee:	e04e      	b.n	800198e <commandReply+0x352>
	case CMD_METHOD_CHANGE:
		ret = RPD_DUTY;
 80018f0:	2309      	movs	r3, #9
 80018f2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80018f6:	e04a      	b.n	800198e <commandReply+0x352>
	case CMD_JOB_PUSH_OUTPUT:
		break;
	case CMD_JOB_TEST:
		break;
	case CMD_JOB_RUN:
		ret = RPD_DUTY;
 80018f8:	2309      	movs	r3, #9
 80018fa:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80018fe:	e046      	b.n	800198e <commandReply+0x352>
	case CMD_KEYBOARD:
		ret = RPD_DUTY;
 8001900:	2309      	movs	r3, #9
 8001902:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001906:	e042      	b.n	800198e <commandReply+0x352>
	case CMD_KEY_SPEED:
		// sprintf((char*) detail, "MANUAL SPEED = %d", duty_cmd.key_speed);
		detail[(*detail_length)++] = MANUAL_SPEED;
 8001908:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	1c59      	adds	r1, r3, #1
 8001910:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001914:	6011      	str	r1, [r2, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800191c:	4413      	add	r3, r2
 800191e:	2216      	movs	r2, #22
 8001920:	701a      	strb	r2, [r3, #0]
		detail[(*detail_length)++] = (uint8_t)(duty_cmd.key_speed);
 8001922:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001926:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	1c59      	adds	r1, r3, #1
 800192e:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001932:	6011      	str	r1, [r2, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800193a:	4413      	add	r3, r2
 800193c:	b2c2      	uxtb	r2, r0
 800193e:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8001940:	2308      	movs	r3, #8
 8001942:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001946:	e022      	b.n	800198e <commandReply+0x352>
	case CMD_ERROR:
		// strcpy( (char *)detail, "Check parameters");
		detail[(*detail_length)++] = CHECK_PARAMETER;
 8001948:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	1c59      	adds	r1, r3, #1
 8001950:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001954:	6011      	str	r1, [r2, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800195c:	4413      	add	r3, r2
 800195e:	2215      	movs	r2, #21
 8001960:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 8001962:	2307      	movs	r3, #7
 8001964:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001968:	e011      	b.n	800198e <commandReply+0x352>
	default:
		// strcpy( (char *)detail, "Unknown command");
		detail[(*detail_length)++] = UNKNOW_COMMAND;
 800196a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	1c59      	adds	r1, r3, #1
 8001972:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001976:	6011      	str	r1, [r2, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800197e:	4413      	add	r3, r2
 8001980:	2217      	movs	r2, #23
 8001982:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 8001984:	2307      	movs	r3, #7
 8001986:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 800198a:	e000      	b.n	800198e <commandReply+0x352>
		break;
 800198c:	bf00      	nop
	}
	return ret;
 800198e:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 8001992:	4618      	mov	r0, r3
 8001994:	37d0      	adds	r7, #208	; 0xd0
 8001996:	46bd      	mov	sp, r7
 8001998:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800199c:	b002      	add	sp, #8
 800199e:	4770      	bx	lr
 80019a0:	20004d60 	.word	0x20004d60

080019a4 <commandRespond1>:

int32_t				commandRespond1	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										int32_t detail_length,
										char *respond) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	4603      	mov	r3, r0
 80019b2:	73fb      	strb	r3, [r7, #15]
	int32_t out_length = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
	respond[out_length++] = 0x28;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	617a      	str	r2, [r7, #20]
 80019be:	461a      	mov	r2, r3
 80019c0:	6a3b      	ldr	r3, [r7, #32]
 80019c2:	4413      	add	r3, r2
 80019c4:	2228      	movs	r2, #40	; 0x28
 80019c6:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = RESPONSE_TRANSMISION;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	617a      	str	r2, [r7, #20]
 80019ce:	461a      	mov	r2, r3
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	4413      	add	r3, r2
 80019d4:	2202      	movs	r2, #2
 80019d6:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = rpd;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	617a      	str	r2, [r7, #20]
 80019de:	461a      	mov	r2, r3
 80019e0:	6a3b      	ldr	r3, [r7, #32]
 80019e2:	4413      	add	r3, r2
 80019e4:	7bfa      	ldrb	r2, [r7, #15]
 80019e6:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = id_command;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	617a      	str	r2, [r7, #20]
 80019ee:	461a      	mov	r2, r3
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	4413      	add	r3, r2
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	701a      	strb	r2, [r3, #0]
	if(detail_length != 0){
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d00c      	beq.n	8001a1a <commandRespond1+0x76>
		memcpy(&respond[out_length], detail, detail_length);
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	6a3a      	ldr	r2, [r7, #32]
 8001a04:	4413      	add	r3, r2
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f014 f8b6 	bl	8015b7c <memcpy>
		out_length += detail_length;
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	4413      	add	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	e007      	b.n	8001a2a <commandRespond1+0x86>
	}else{
		respond[out_length++] = NONE;
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	1c5a      	adds	r2, r3, #1
 8001a1e:	617a      	str	r2, [r7, #20]
 8001a20:	461a      	mov	r2, r3
 8001a22:	6a3b      	ldr	r3, [r7, #32]
 8001a24:	4413      	add	r3, r2
 8001a26:	2222      	movs	r2, #34	; 0x22
 8001a28:	701a      	strb	r2, [r3, #0]
	}
	respond[out_length++] = 0x29;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	1c5a      	adds	r2, r3, #1
 8001a2e:	617a      	str	r2, [r7, #20]
 8001a30:	461a      	mov	r2, r3
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	4413      	add	r3, r2
 8001a36:	2229      	movs	r2, #41	; 0x29
 8001a38:	701a      	strb	r2, [r3, #0]

	return out_length;
 8001a3a:	697b      	ldr	r3, [r7, #20]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b096      	sub	sp, #88	; 0x58
 8001a48:	af02      	add	r7, sp, #8
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "%d, %s \r\n", line, message);
 8001a50:	887a      	ldrh	r2, [r7, #2]
 8001a52:	f107 0008 	add.w	r0, r7, #8
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	4a17      	ldr	r2, [pc, #92]	; (8001abc <LOG_REPORT+0x78>)
 8001a5e:	213f      	movs	r1, #63	; 0x3f
 8001a60:	f014 ffc2 	bl	80169e8 <sniprintf>
 8001a64:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 8001a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a6c:	d101      	bne.n	8001a72 <LOG_REPORT+0x2e>
		return FALSE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e01f      	b.n	8001ab2 <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 8001a72:	f107 0308 	add.w	r3, r7, #8
 8001a76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4811      	ldr	r0, [pc, #68]	; (8001ac0 <LOG_REPORT+0x7c>)
 8001a7c:	f002 facd 	bl	800401a <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 8001a80:	4810      	ldr	r0, [pc, #64]	; (8001ac4 <LOG_REPORT+0x80>)
 8001a82:	f00a f879 	bl	800bb78 <HAL_DMA_GetState>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d101      	bne.n	8001a90 <LOG_REPORT+0x4c>
		return TRUE;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e010      	b.n	8001ab2 <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 8001a90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a94:	490c      	ldr	r1, [pc, #48]	; (8001ac8 <LOG_REPORT+0x84>)
 8001a96:	480a      	ldr	r0, [pc, #40]	; (8001ac0 <LOG_REPORT+0x7c>)
 8001a98:	f002 fae7 	bl	800406a <ringBuff_PopArray>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 8001aa2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4907      	ldr	r1, [pc, #28]	; (8001ac8 <LOG_REPORT+0x84>)
 8001aaa:	4808      	ldr	r0, [pc, #32]	; (8001acc <LOG_REPORT+0x88>)
 8001aac:	f00c fdc0 	bl	800e630 <HAL_UART_Transmit_DMA>
	return TRUE;
 8001ab0:	2301      	movs	r3, #1
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3750      	adds	r7, #80	; 0x50
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	0801b060 	.word	0x0801b060
 8001ac0:	20000410 	.word	0x20000410
 8001ac4:	20005e28 	.word	0x20005e28
 8001ac8:	20004d64 	.word	0x20004d64
 8001acc:	20005de8 	.word	0x20005de8

08001ad0 <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_lenght) {
 8001ad0:	b5b0      	push	{r4, r5, r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	466b      	mov	r3, sp
 8001adc:	461d      	mov	r5, r3
	if (in_lenght < MIN_MESSAGE_LENGHT) {
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	dc02      	bgt.n	8001aea <unPackPayload+0x1a>
		return -1;
 8001ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae8:	e063      	b.n	8001bb2 <unPackPayload+0xe2>
	}// check minimum lenght

	if ( (START_CHAR != message_buff[0]) || (END_CHAR != message_buff[in_lenght - 1]) ) {
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b28      	cmp	r3, #40	; 0x28
 8001af0:	d106      	bne.n	8001b00 <unPackPayload+0x30>
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	3b01      	subs	r3, #1
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b29      	cmp	r3, #41	; 0x29
 8001afe:	d002      	beq.n	8001b06 <unPackPayload+0x36>
		return -1;
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295
 8001b04:	e055      	b.n	8001bb2 <unPackPayload+0xe2>
	}// check start char and end char

	int32_t out_lenght = in_lenght - 2;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	3b02      	subs	r3, #2
 8001b0a:	613b      	str	r3, [r7, #16]
//		if ( (START_CHAR == message_buff[i]) || (END_CHAR == message_buff[i]) || (ADD_CHAR == message_buff[i]) ) {
//			out_lenght--;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 8001b0c:	6938      	ldr	r0, [r7, #16]
 8001b0e:	1e43      	subs	r3, r0, #1
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	4603      	mov	r3, r0
 8001b14:	4619      	mov	r1, r3
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	f04f 0400 	mov.w	r4, #0
 8001b22:	00d4      	lsls	r4, r2, #3
 8001b24:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001b28:	00cb      	lsls	r3, r1, #3
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	f04f 0400 	mov.w	r4, #0
 8001b3a:	00d4      	lsls	r4, r2, #3
 8001b3c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001b40:	00cb      	lsls	r3, r1, #3
 8001b42:	4603      	mov	r3, r0
 8001b44:	3307      	adds	r3, #7
 8001b46:	08db      	lsrs	r3, r3, #3
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	ebad 0d03 	sub.w	sp, sp, r3
 8001b4e:	466b      	mov	r3, sp
 8001b50:	3300      	adds	r3, #0
 8001b52:	60bb      	str	r3, [r7, #8]

	out_lenght = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	613b      	str	r3, [r7, #16]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	e017      	b.n	8001b8e <unPackPayload+0xbe>
		if ( (START_CHAR == message_buff[i]) ||	(END_CHAR == message_buff[i]) ) {
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b28      	cmp	r3, #40	; 0x28
 8001b68:	d00e      	beq.n	8001b88 <unPackPayload+0xb8>
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	4413      	add	r3, r2
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b29      	cmp	r3, #41	; 0x29
 8001b74:	d008      	beq.n	8001b88 <unPackPayload+0xb8>
			;
//		} else if ( (ADD_CHAR == message_buff[i]) ) {
//			temp_buff[out_lenght++] = message_buff[++i] ^ XOR_CHAR;
		}
		else {
			temp_buff[out_lenght++] = message_buff[i];
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	441a      	add	r2, r3
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1c59      	adds	r1, r3, #1
 8001b80:	6139      	str	r1, [r7, #16]
 8001b82:	7811      	ldrb	r1, [r2, #0]
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	3b01      	subs	r3, #1
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	dbe2      	blt.n	8001b5e <unPackPayload+0x8e>
		}
	}
	memset((uint8_t*)message_buff, 0, in_lenght);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f014 f810 	bl	8015bc4 <memset>
	memmove(message_buff, temp_buff, out_lenght);
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f013 fff1 	bl	8015b92 <memmove>

	return out_lenght;
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	46ad      	mov	sp, r5
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bdb0      	pop	{r4, r5, r7, pc}

08001bbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <MX_DMA_Init+0x3c>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <MX_DMA_Init+0x3c>)
 8001bcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <MX_DMA_Init+0x3c>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2105      	movs	r1, #5
 8001be2:	200f      	movs	r0, #15
 8001be4:	f009 fcec 	bl	800b5c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001be8:	200f      	movs	r0, #15
 8001bea:	f009 fd05 	bl	800b5f8 <HAL_NVIC_EnableIRQ>

}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800

08001bfc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4a07      	ldr	r2, [pc, #28]	; (8001c28 <vApplicationGetIdleTaskMemory+0x2c>)
 8001c0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	4a06      	ldr	r2, [pc, #24]	; (8001c2c <vApplicationGetIdleTaskMemory+0x30>)
 8001c12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c1a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	20000ba8 	.word	0x20000ba8
 8001c2c:	20000bfc 	.word	0x20000bfc

08001c30 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001c30:	b5b0      	push	{r4, r5, r7, lr}
 8001c32:	b094      	sub	sp, #80	; 0x50
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 8001c36:	2300      	movs	r3, #0
 8001c38:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 8001c3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c42:	4618      	mov	r0, r3
 8001c44:	f010 fcd0 	bl	80125e8 <osMutexCreate>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <MX_FREERTOS_Init+0x90>)
 8001c4c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 8001c4e:	2301      	movs	r3, #1
 8001c50:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c52:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c58:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c5c:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 8001c5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f010 fdd7 	bl	8012818 <osMailCreate>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <MX_FREERTOS_Init+0x94>)
 8001c6e:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2048);
 8001c70:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <MX_FREERTOS_Init+0x98>)
 8001c72:	f107 041c 	add.w	r4, r7, #28
 8001c76:	461d      	mov	r5, r3
 8001c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001c84:	f107 031c 	add.w	r3, r7, #28
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f010 fbc0 	bl	8012410 <osThreadCreate>
 8001c90:	4602      	mov	r2, r0
 8001c92:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <MX_FREERTOS_Init+0x9c>)
 8001c94:	601a      	str	r2, [r3, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <MX_FREERTOS_Init+0xa0>)
 8001c98:	463c      	mov	r4, r7
 8001c9a:	461d      	mov	r5, r3
 8001c9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ca0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ca4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 8001ca8:	463b      	mov	r3, r7
 8001caa:	2100      	movs	r1, #0
 8001cac:	4618      	mov	r0, r3
 8001cae:	f010 fbaf 	bl	8012410 <osThreadCreate>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <MX_FREERTOS_Init+0xa4>)
 8001cb6:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001cb8:	bf00      	nop
 8001cba:	3750      	adds	r7, #80	; 0x50
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc0:	20004e68 	.word	0x20004e68
 8001cc4:	20004e6c 	.word	0x20004e6c
 8001cc8:	0801b078 	.word	0x0801b078
 8001ccc:	20004e64 	.word	0x20004e64
 8001cd0:	0801b0a4 	.word	0x0801b0a4
 8001cd4:	20004e70 	.word	0x20004e70

08001cd8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cda:	f6ad 0da4 	subw	sp, sp, #2212	; 0x8a4
 8001cde:	af6c      	add	r7, sp, #432	; 0x1b0
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001ce6:	f013 f9b9 	bl	801505c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 8001cea:	2201      	movs	r2, #1
 8001cec:	2110      	movs	r1, #16
 8001cee:	48d4      	ldr	r0, [pc, #848]	; (8002040 <StartDefaultTask+0x368>)
 8001cf0:	f00a f9c8 	bl	800c084 <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f887 36ef 	strb.w	r3, [r7, #1775]	; 0x6ef
  int32_t					current_key_speed;
  double						run_time;

  SCARA_Pick_And_Place_Package *Object;
  SCARA_Pick_And_Place_State  operation_state;
  uint8_t object_tail_pointer = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f887 36ca 	strb.w	r3, [r7, #1738]	; 0x6ca
  uint8_t object_head_pointer = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f887 36c9 	strb.w	r3, [r7, #1737]	; 0x6c9
  double state_time = 0;
 8001d06:	f04f 0300 	mov.w	r3, #0
 8001d0a:	f04f 0400 	mov.w	r4, #0
 8001d0e:	f507 62d8 	add.w	r2, r7, #1728	; 0x6c0
 8001d12:	e9c2 3400 	strd	r3, r4, [r2]
  const SCARA_Slot_TypeDef SLot_Cordinate[NUM_OF_OBJECT] = {
 8001d16:	f107 0318 	add.w	r3, r7, #24
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	2390      	movs	r3, #144	; 0x90
 8001d1e:	461a      	mov	r2, r3
 8001d20:	2100      	movs	r1, #0
 8001d22:	f013 ff4f 	bl	8015bc4 <memset>
 8001d26:	f107 0218 	add.w	r2, r7, #24
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	4cc5      	ldr	r4, [pc, #788]	; (8002044 <StartDefaultTask+0x36c>)
 8001d30:	e9c2 3400 	strd	r3, r4, [r2]
 8001d34:	f107 0218 	add.w	r2, r7, #24
 8001d38:	f04f 0300 	mov.w	r3, #0
 8001d3c:	4cc1      	ldr	r4, [pc, #772]	; (8002044 <StartDefaultTask+0x36c>)
 8001d3e:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001d42:	f107 0218 	add.w	r2, r7, #24
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	4cbe      	ldr	r4, [pc, #760]	; (8002044 <StartDefaultTask+0x36c>)
 8001d4c:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8001d50:	f107 0218 	add.w	r2, r7, #24
 8001d54:	f04f 0300 	mov.w	r3, #0
 8001d58:	4cba      	ldr	r4, [pc, #744]	; (8002044 <StartDefaultTask+0x36c>)
 8001d5a:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001d5e:	f107 0218 	add.w	r2, r7, #24
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	4cb7      	ldr	r4, [pc, #732]	; (8002044 <StartDefaultTask+0x36c>)
 8001d68:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
 8001d6c:	f107 0218 	add.w	r2, r7, #24
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	4cb3      	ldr	r4, [pc, #716]	; (8002044 <StartDefaultTask+0x36c>)
 8001d76:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 8001d7a:	f107 0218 	add.w	r2, r7, #24
 8001d7e:	f04f 0300 	mov.w	r3, #0
 8001d82:	4cb0      	ldr	r4, [pc, #704]	; (8002044 <StartDefaultTask+0x36c>)
 8001d84:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
 8001d88:	f107 0218 	add.w	r2, r7, #24
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	4cac      	ldr	r4, [pc, #688]	; (8002044 <StartDefaultTask+0x36c>)
 8001d92:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
  		{200.0f, 200.0f, 0.0f} ,
  		{200.0f, 200.0f, 0.0f} ,
  		{200.0f, 200.0f, 0.0f}
  };

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 8001d96:	21e0      	movs	r1, #224	; 0xe0
 8001d98:	48ab      	ldr	r0, [pc, #684]	; (8002048 <StartDefaultTask+0x370>)
 8001d9a:	f7ff fe53 	bl	8001a44 <LOG_REPORT>

  // Init value
  current_method = scaraGetMethod();
 8001d9e:	f008 fbdd 	bl	800a55c <scaraGetMethod>
 8001da2:	4603      	mov	r3, r0
 8001da4:	f887 36e7 	strb.w	r3, [r7, #1767]	; 0x6e7
  current_mode	 = scaraGetMode();
 8001da8:	f008 fbcc 	bl	800a544 <scaraGetMode>
 8001dac:	4603      	mov	r3, r0
 8001dae:	f887 36e6 	strb.w	r3, [r7, #1766]	; 0x6e6
  current_duty_state	 = scaraGetDutyState();
 8001db2:	f008 fbdf 	bl	800a574 <scaraGetDutyState>
 8001db6:	4603      	mov	r3, r0
 8001db8:	f887 36e5 	strb.w	r3, [r7, #1765]	; 0x6e5

  // Start up robot
  scaraStartup();
 8001dbc:	f003 f8f4 	bl	8004fa8 <scaraStartup>
  osDelay(10);
 8001dc0:	200a      	movs	r0, #10
 8001dc2:	f010 fb71 	bl	80124a8 <osDelay>
//   positionNext.Theta2 = PI/3;
//   positionNext.D3 = 10;
//   positionNext.Theta4 = 0;
//   positionNext.t = 0;

  positionNext.Theta1 = -1.48267f;
 8001dc6:	4aa1      	ldr	r2, [pc, #644]	; (800204c <StartDefaultTask+0x374>)
 8001dc8:	a495      	add	r4, pc, #596	; (adr r4, 8002020 <StartDefaultTask+0x348>)
 8001dca:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001dce:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
  positionNext.Theta2 = 2.35575f;
 8001dd2:	4a9e      	ldr	r2, [pc, #632]	; (800204c <StartDefaultTask+0x374>)
 8001dd4:	a494      	add	r4, pc, #592	; (adr r4, 8002028 <StartDefaultTask+0x350>)
 8001dd6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001dda:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
  positionNext.D3 = 0.034999;
 8001dde:	4a9b      	ldr	r2, [pc, #620]	; (800204c <StartDefaultTask+0x374>)
 8001de0:	a493      	add	r4, pc, #588	; (adr r4, 8002030 <StartDefaultTask+0x358>)
 8001de2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001de6:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
  positionNext.Theta4 = 2.96586;
 8001dea:	4a98      	ldr	r2, [pc, #608]	; (800204c <StartDefaultTask+0x374>)
 8001dec:	a492      	add	r4, pc, #584	; (adr r4, 8002038 <StartDefaultTask+0x360>)
 8001dee:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001df2:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
  positionNext.t = 0;
 8001df6:	4a95      	ldr	r2, [pc, #596]	; (800204c <StartDefaultTask+0x374>)
 8001df8:	f04f 0300 	mov.w	r3, #0
 8001dfc:	f04f 0400 	mov.w	r4, #0
 8001e00:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

  kinematicForward(&positionNext);
 8001e04:	4891      	ldr	r0, [pc, #580]	; (800204c <StartDefaultTask+0x374>)
 8001e06:	f001 fcc3 	bl	8003790 <kinematicForward>
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 8001e0a:	4891      	ldr	r0, [pc, #580]	; (8002050 <StartDefaultTask+0x378>)
 8001e0c:	f00b ffed 	bl	800ddea <HAL_TIM_Base_Start_IT>

  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 8001e10:	463b      	mov	r3, r7
 8001e12:	f04f 32ff 	mov.w	r2, #4294967295
 8001e16:	2101      	movs	r1, #1
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f010 fb99 	bl	8012550 <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
	  respond_packed_lenght = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
	  infor_lenght			= 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
	  infor_packed_lenght	= 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f8c7 36b0 	str.w	r3, [r7, #1712]	; 0x6b0
	  task_usb_lenght		= 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
	  usb_lenght			= 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f8c7 36a8 	str.w	r3, [r7, #1704]	; 0x6a8
	  total_respond_length  = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
	  detail_ptr 			= 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
	  // Update new position
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8001e4e:	4a81      	ldr	r2, [pc, #516]	; (8002054 <StartDefaultTask+0x37c>)
 8001e50:	4b81      	ldr	r3, [pc, #516]	; (8002058 <StartDefaultTask+0x380>)
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	23c0      	movs	r3, #192	; 0xc0
 8001e58:	461a      	mov	r2, r3
 8001e5a:	f013 fe8f 	bl	8015b7c <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 8001e5e:	4a7e      	ldr	r2, [pc, #504]	; (8002058 <StartDefaultTask+0x380>)
 8001e60:	4b7a      	ldr	r3, [pc, #488]	; (800204c <StartDefaultTask+0x374>)
 8001e62:	4610      	mov	r0, r2
 8001e64:	4619      	mov	r1, r3
 8001e66:	23c0      	movs	r3, #192	; 0xc0
 8001e68:	461a      	mov	r2, r3
 8001e6a:	f013 fe87 	bl	8015b7c <memcpy>
//		  positionTrue.q = positionCurrent.q;
//	  }
//#endif
	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 8001e6e:	4b7b      	ldr	r3, [pc, #492]	; (800205c <StartDefaultTask+0x384>)
 8001e70:	6819      	ldr	r1, [r3, #0]
 8001e72:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8001e76:	2200      	movs	r2, #0
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f010 fd79 	bl	8012970 <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 8001e7e:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8001e82:	2b20      	cmp	r3, #32
 8001e84:	d116      	bne.n	8001eb4 <StartDefaultTask+0x1dc>
		   dataMail = ret_mail.value.p;
 8001e86:	f8d7 3684 	ldr.w	r3, [r7, #1668]	; 0x684
 8001e8a:	f8c7 36a0 	str.w	r3, [r7, #1696]	; 0x6a0
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 8001e8e:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001e92:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8001e96:	f8d7 16a0 	ldr.w	r1, [r7, #1696]	; 0x6a0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f013 fe6e 	bl	8015b7c <memcpy>
		   isNewDuty = TRUE;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	f887 36ef 	strb.w	r3, [r7, #1775]	; 0x6ef
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 8001ea6:	4b6d      	ldr	r3, [pc, #436]	; (800205c <StartDefaultTask+0x384>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f8d7 16a0 	ldr.w	r1, [r7, #1696]	; 0x6a0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f010 fdd2 	bl	8012a58 <osMailFree>
	  }
	  if(isNewDuty) {
 8001eb4:	f897 36ef 	ldrb.w	r3, [r7, #1775]	; 0x6ef
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 8301 	beq.w	80024c0 <StartDefaultTask+0x7e8>
		  //memset(respond, 0, 40);
		  // Check change method
		  if (duty_cmd.change_method == TRUE) {
 8001ebe:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	f040 80f4 	bne.w	80020b2 <StartDefaultTask+0x3da>
			  free(Object);
 8001eca:	f8d7 06cc 	ldr.w	r0, [r7, #1740]	; 0x6cc
 8001ece:	f013 fe4d 	bl	8015b6c <free>
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 8001ed2:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001ed6:	785b      	ldrb	r3, [r3, #1]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d11f      	bne.n	8001f1c <StartDefaultTask+0x244>
				  // Need add check condition idle in each method
				  current_method = SCARA_METHOD_MANUAL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f887 36e7 	strb.w	r3, [r7, #1767]	; 0x6e7
				//   respond_lenght = commandRespond(RPD_OK,
				// 								duty_cmd.id_command,
				// 								"Changed MANUAL Method",
				// 								(char *)respond);
				detail_array[0] = MANUAL_METHOD;
 8001ee2:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8001ee6:	2218      	movs	r2, #24
 8001ee8:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8001eea:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001eee:	6899      	ldr	r1, [r3, #8]
 8001ef0:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8001ef4:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 8001ef8:	4413      	add	r3, r2
 8001efa:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	2301      	movs	r3, #1
 8001f02:	2008      	movs	r0, #8
 8001f04:	f7ff fd4e 	bl	80019a4 <commandRespond1>
 8001f08:	f8c7 06bc 	str.w	r0, [r7, #1724]	; 0x6bc
				total_respond_length += respond_lenght;
 8001f0c:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 8001f10:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8001f14:	4413      	add	r3, r2
 8001f16:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
 8001f1a:	e2ce      	b.n	80024ba <StartDefaultTask+0x7e2>
			  } else if (SCARA_METHOD_SEMI_AUTO == duty_cmd.robot_method) {
 8001f1c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001f20:	785b      	ldrb	r3, [r3, #1]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d11f      	bne.n	8001f66 <StartDefaultTask+0x28e>
				  current_method = SCARA_METHOD_SEMI_AUTO;
 8001f26:	2301      	movs	r3, #1
 8001f28:	f887 36e7 	strb.w	r3, [r7, #1767]	; 0x6e7
				//   respond_lenght = commandRespond(RPD_OK,
				// 								duty_cmd.id_command,
				// 								"Changed SEMI AUTO Method",
				// 								(char *)respond);
				detail_array[0] = SEMI_AUTO_METHOD;
 8001f2c:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8001f30:	2219      	movs	r2, #25
 8001f32:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8001f34:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001f38:	6899      	ldr	r1, [r3, #8]
 8001f3a:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8001f3e:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 8001f42:	4413      	add	r3, r2
 8001f44:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	2008      	movs	r0, #8
 8001f4e:	f7ff fd29 	bl	80019a4 <commandRespond1>
 8001f52:	f8c7 06bc 	str.w	r0, [r7, #1724]	; 0x6bc
				total_respond_length += respond_lenght;
 8001f56:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 8001f5a:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8001f5e:	4413      	add	r3, r2
 8001f60:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
 8001f64:	e2a9      	b.n	80024ba <StartDefaultTask+0x7e2>
			  } else if (SCARA_METHOD_AUTO == duty_cmd.robot_method) {
 8001f66:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001f6a:	785b      	ldrb	r3, [r3, #1]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d11f      	bne.n	8001fb0 <StartDefaultTask+0x2d8>
				  current_method = SCARA_METHOD_AUTO;
 8001f70:	2302      	movs	r3, #2
 8001f72:	f887 36e7 	strb.w	r3, [r7, #1767]	; 0x6e7
				//   respond_lenght = commandRespond(RPD_OK,
				// 								duty_cmd.id_command,
				// 								"Changed AUTO Method",
				// 								(char *)respond);
				detail_array[0] = AUTO_METHOD;
 8001f76:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8001f7a:	221a      	movs	r2, #26
 8001f7c:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8001f7e:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001f82:	6899      	ldr	r1, [r3, #8]
 8001f84:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8001f88:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	2301      	movs	r3, #1
 8001f96:	2008      	movs	r0, #8
 8001f98:	f7ff fd04 	bl	80019a4 <commandRespond1>
 8001f9c:	f8c7 06bc 	str.w	r0, [r7, #1724]	; 0x6bc
				total_respond_length += respond_lenght;
 8001fa0:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 8001fa4:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8001fa8:	4413      	add	r3, r2
 8001faa:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
 8001fae:	e284      	b.n	80024ba <StartDefaultTask+0x7e2>
			  }else if(SCARA_METHOD_TEST == duty_cmd.robot_method){
 8001fb0:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001fb4:	785b      	ldrb	r3, [r3, #1]
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d152      	bne.n	8002060 <StartDefaultTask+0x388>
				  test_value[0] = 0;
 8001fba:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
				  test_value[1] = 0;
 8001fc2:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	705a      	strb	r2, [r3, #1]
				  test_value[2] = 0;
 8001fca:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 8001fce:	2200      	movs	r2, #0
 8001fd0:	709a      	strb	r2, [r3, #2]
				  test_value[3] = 0;
 8001fd2:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	70da      	strb	r2, [r3, #3]
				  current_method = SCARA_METHOD_TEST;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	f887 36e7 	strb.w	r3, [r7, #1767]	; 0x6e7
				  detail_array[0] = TEST_METHOD;
 8001fe0:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8001fe4:	221b      	movs	r2, #27
 8001fe6:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8001fe8:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001fec:	6899      	ldr	r1, [r3, #8]
 8001fee:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8001ff2:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2301      	movs	r3, #1
 8002000:	2008      	movs	r0, #8
 8002002:	f7ff fccf 	bl	80019a4 <commandRespond1>
 8002006:	f8c7 06bc 	str.w	r0, [r7, #1724]	; 0x6bc
				  total_respond_length += respond_lenght;
 800200a:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 800200e:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8002012:	4413      	add	r3, r2
 8002014:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
 8002018:	e24f      	b.n	80024ba <StartDefaultTask+0x7e2>
 800201a:	bf00      	nop
 800201c:	f3af 8000 	nop.w
 8002020:	20000000 	.word	0x20000000
 8002024:	bff7b904 	.word	0xbff7b904
 8002028:	80000000 	.word	0x80000000
 800202c:	4002d893 	.word	0x4002d893
 8002030:	90c91080 	.word	0x90c91080
 8002034:	3fa1eb63 	.word	0x3fa1eb63
 8002038:	cec41dd2 	.word	0xcec41dd2
 800203c:	4007ba14 	.word	0x4007ba14
 8002040:	40020400 	.word	0x40020400
 8002044:	40690000 	.word	0x40690000
 8002048:	0801b0c0 	.word	0x0801b0c0
 800204c:	20005c68 	.word	0x20005c68
 8002050:	20005da8 	.word	0x20005da8
 8002054:	20005968 	.word	0x20005968
 8002058:	20005ae8 	.word	0x20005ae8
 800205c:	20004e6c 	.word	0x20004e6c
			  }else if(SCARA_METHOD_PICK_AND_PLACE == duty_cmd.robot_method){
 8002060:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8002064:	785b      	ldrb	r3, [r3, #1]
 8002066:	2b04      	cmp	r3, #4
 8002068:	f040 8227 	bne.w	80024ba <StartDefaultTask+0x7e2>
				  current_method = SCARA_METHOD_PICK_AND_PLACE;
 800206c:	2304      	movs	r3, #4
 800206e:	f887 36e7 	strb.w	r3, [r7, #1767]	; 0x6e7
				  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002072:	2301      	movs	r3, #1
 8002074:	f887 36e5 	strb.w	r3, [r7, #1765]	; 0x6e5
				  detail_array[0] = PICK_AND_PLACE_METHOD;
 8002078:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 800207c:	221c      	movs	r2, #28
 800207e:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002080:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8002084:	6899      	ldr	r1, [r3, #8]
 8002086:	f207 4294 	addw	r2, r7, #1172	; 0x494
 800208a:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 800208e:	4413      	add	r3, r2
 8002090:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	2301      	movs	r3, #1
 8002098:	2008      	movs	r0, #8
 800209a:	f7ff fc83 	bl	80019a4 <commandRespond1>
 800209e:	f8c7 06bc 	str.w	r0, [r7, #1724]	; 0x6bc
				  total_respond_length += respond_lenght;
 80020a2:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 80020a6:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 80020aa:	4413      	add	r3, r2
 80020ac:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
 80020b0:	e203      	b.n	80024ba <StartDefaultTask+0x7e2>
			  }
		  } else {
			  	  // Check current method & cmd method
			  	  if (current_method == duty_cmd.robot_method) {
 80020b2:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80020b6:	785b      	ldrb	r3, [r3, #1]
 80020b8:	f897 26e7 	ldrb.w	r2, [r7, #1767]	; 0x6e7
 80020bc:	429a      	cmp	r2, r3
 80020be:	f040 81dc 	bne.w	800247a <StartDefaultTask+0x7a2>
				  	  switch( duty_cmd.robot_method) {
 80020c2:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80020c6:	785b      	ldrb	r3, [r3, #1]
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	f200 81d0 	bhi.w	800246e <StartDefaultTask+0x796>
 80020ce:	a201      	add	r2, pc, #4	; (adr r2, 80020d4 <StartDefaultTask+0x3fc>)
 80020d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d4:	080020e9 	.word	0x080020e9
 80020d8:	0800213f 	.word	0x0800213f
 80020dc:	080024b5 	.word	0x080024b5
 80020e0:	080022f7 	.word	0x080022f7
 80020e4:	0800240d 	.word	0x0800240d
				  	  case SCARA_METHOD_MANUAL:
				  	  {
				  		  if (current_key_state == SCARA_KEY_STATE_READY) {
 80020e8:	f897 36e3 	ldrb.w	r3, [r7, #1763]	; 0x6e3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10d      	bne.n	800210c <StartDefaultTask+0x434>
				  			  current_key = duty_cmd.keyboard;
 80020f0:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80020f4:	78db      	ldrb	r3, [r3, #3]
 80020f6:	f887 36e2 	strb.w	r3, [r7, #1762]	; 0x6e2
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Init new path
 80020fa:	2301      	movs	r3, #1
 80020fc:	f887 36e3 	strb.w	r3, [r7, #1763]	; 0x6e3
				  			  current_key_speed = duty_cmd.key_speed;
 8002100:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f8c7 36dc 	str.w	r3, [r7, #1756]	; 0x6dc
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
									  && current_key_speed == duty_cmd.key_speed) {
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
				  		  }
				  	  }
				  	  break;
 800210a:	e1d5      	b.n	80024b8 <StartDefaultTask+0x7e0>
				  		  } else if (current_key == duty_cmd.keyboard
 800210c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8002110:	78db      	ldrb	r3, [r3, #3]
 8002112:	f897 26e2 	ldrb.w	r2, [r7, #1762]	; 0x6e2
 8002116:	429a      	cmp	r2, r3
 8002118:	f040 81ce 	bne.w	80024b8 <StartDefaultTask+0x7e0>
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
 800211c:	f897 36e3 	ldrb.w	r3, [r7, #1763]	; 0x6e3
 8002120:	2b02      	cmp	r3, #2
 8002122:	f040 81c9 	bne.w	80024b8 <StartDefaultTask+0x7e0>
									  && current_key_speed == duty_cmd.key_speed) {
 8002126:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f8d7 26dc 	ldr.w	r2, [r7, #1756]	; 0x6dc
 8002130:	429a      	cmp	r2, r3
 8002132:	f040 81c1 	bne.w	80024b8 <StartDefaultTask+0x7e0>
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
 8002136:	2301      	movs	r3, #1
 8002138:	f887 36e3 	strb.w	r3, [r7, #1763]	; 0x6e3
				  	  break;
 800213c:	e1bc      	b.n	80024b8 <StartDefaultTask+0x7e0>
				  	  case SCARA_METHOD_SEMI_AUTO:
				  	  {
						  switch( duty_cmd.robot_mode) {
 800213e:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8002142:	789b      	ldrb	r3, [r3, #2]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d029      	beq.n	800219c <StartDefaultTask+0x4c4>
 8002148:	2b02      	cmp	r3, #2
 800214a:	d074      	beq.n	8002236 <StartDefaultTask+0x55e>
 800214c:	2b00      	cmp	r3, #0
 800214e:	f040 80cb 	bne.w	80022e8 <StartDefaultTask+0x610>
						  case SCARA_MODE_STOP:
							  {
								  current_mode	 = SCARA_MODE_STOP;
 8002152:	2300      	movs	r3, #0
 8002154:	f887 36e6 	strb.w	r3, [r7, #1766]	; 0x6e6
								//   respond_lenght = commandRespond(RPD_OK,
								// 								  duty_cmd.id_command,
								// 								  "Stop Now",
								// 								  (char *)respond);
								detail_array[0] = STOP_NOW;
 8002158:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 800215c:	221d      	movs	r2, #29
 800215e:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002160:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8002164:	6899      	ldr	r1, [r3, #8]
 8002166:	f207 4294 	addw	r2, r7, #1172	; 0x494
 800216a:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 800216e:	4413      	add	r3, r2
 8002170:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	2301      	movs	r3, #1
 8002178:	2008      	movs	r0, #8
 800217a:	f7ff fc13 	bl	80019a4 <commandRespond1>
 800217e:	f8c7 06bc 	str.w	r0, [r7, #1724]	; 0x6bc
								total_respond_length += respond_lenght;
 8002182:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 8002186:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 800218a:	4413      	add	r3, r2
 800218c:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
								  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 8002190:	f240 116d 	movw	r1, #365	; 0x16d
 8002194:	48db      	ldr	r0, [pc, #876]	; (8002504 <StartDefaultTask+0x82c>)
 8002196:	f7ff fc55 	bl	8001a44 <LOG_REPORT>
							  }
							  break;
 800219a:	e0ab      	b.n	80022f4 <StartDefaultTask+0x61c>

						  case SCARA_MODE_SCAN:
							  {
								  if (SCARA_MODE_DUTY == current_mode
 800219c:	f897 36e6 	ldrb.w	r3, [r7, #1766]	; 0x6e6
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d126      	bne.n	80021f2 <StartDefaultTask+0x51a>
									  && SCARA_DUTY_STATE_READY == current_duty_state) {
 80021a4:	f897 36e5 	ldrb.w	r3, [r7, #1765]	; 0x6e5
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d122      	bne.n	80021f2 <StartDefaultTask+0x51a>
									  current_mode = SCARA_MODE_SCAN;
 80021ac:	2301      	movs	r3, #1
 80021ae:	f887 36e6 	strb.w	r3, [r7, #1766]	; 0x6e6
									  current_scan_state = SCARA_SCAN_STATE_INIT;
 80021b2:	2300      	movs	r3, #0
 80021b4:	f887 36e4 	strb.w	r3, [r7, #1764]	; 0x6e4
									//   respond_lenght = commandRespond(RPD_OK,
									// 								  duty_cmd.id_command,
									// 								  "Start Scan",
									// 								  (char *)respond);
									detail_array[0] = START_SCAN;
 80021b8:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 80021bc:	221e      	movs	r2, #30
 80021be:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80021c0:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80021c4:	6899      	ldr	r1, [r3, #8]
 80021c6:	f207 4294 	addw	r2, r7, #1172	; 0x494
 80021ca:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 80021ce:	4413      	add	r3, r2
 80021d0:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2301      	movs	r3, #1
 80021d8:	2008      	movs	r0, #8
 80021da:	f7ff fbe3 	bl	80019a4 <commandRespond1>
 80021de:	f8c7 06bc 	str.w	r0, [r7, #1724]	; 0x6bc
									total_respond_length += respond_lenght;
 80021e2:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 80021e6:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 80021ea:	4413      	add	r3, r2
 80021ec:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
									total_respond_length += respond_lenght;
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
								  }
							  }
							  break;
 80021f0:	e080      	b.n	80022f4 <StartDefaultTask+0x61c>
									detail_array[0] = BUSY;
 80021f2:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 80021f6:	221f      	movs	r2, #31
 80021f8:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80021fa:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80021fe:	6899      	ldr	r1, [r3, #8]
 8002200:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8002204:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 8002208:	4413      	add	r3, r2
 800220a:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2301      	movs	r3, #1
 8002212:	2007      	movs	r0, #7
 8002214:	f7ff fbc6 	bl	80019a4 <commandRespond1>
 8002218:	f8c7 06bc 	str.w	r0, [r7, #1724]	; 0x6bc
									total_respond_length += respond_lenght;
 800221c:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 8002220:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8002224:	4413      	add	r3, r2
 8002226:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 800222a:	f44f 71c3 	mov.w	r1, #390	; 0x186
 800222e:	48b6      	ldr	r0, [pc, #728]	; (8002508 <StartDefaultTask+0x830>)
 8002230:	f7ff fc08 	bl	8001a44 <LOG_REPORT>
							  break;
 8002234:	e05e      	b.n	80022f4 <StartDefaultTask+0x61c>

						  case SCARA_MODE_DUTY:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002236:	f897 36e6 	ldrb.w	r3, [r7, #1766]	; 0x6e6
 800223a:	2b02      	cmp	r3, #2
 800223c:	d131      	bne.n	80022a2 <StartDefaultTask+0x5ca>
 800223e:	f897 36e5 	ldrb.w	r3, [r7, #1765]	; 0x6e5
 8002242:	2b00      	cmp	r3, #0
 8002244:	d12d      	bne.n	80022a2 <StartDefaultTask+0x5ca>
									  //scaraSetScanFlag();
//									  if(duty_cmd.modeInit_type == DUTY_MODE_INIT_LINEAR){
//										  current_method = SCARA_METHOD_AUTO;
//									  }
									  if (scaraIsScanLimit()) {
 8002246:	f008 f9a1 	bl	800a58c <scaraIsScanLimit>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d006      	beq.n	800225e <StartDefaultTask+0x586>
										  current_mode	 = SCARA_MODE_DUTY;
 8002250:	2302      	movs	r3, #2
 8002252:	f887 36e6 	strb.w	r3, [r7, #1766]	; 0x6e6
										  current_duty_state	 = SCARA_DUTY_STATE_INIT;
 8002256:	2301      	movs	r3, #1
 8002258:	f887 36e5 	strb.w	r3, [r7, #1765]	; 0x6e5
									  if (scaraIsScanLimit()) {
 800225c:	e043      	b.n	80022e6 <StartDefaultTask+0x60e>
									  } else {
										//   respond_lenght = commandRespond(RPD_ERROR,
										// 								  duty_cmd.id_command,
										// 								  "Has Not Scan Yet.",
										// 								  (char *)respond);
										detail_array[0] = NOT_SCAN;
 800225e:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8002262:	2220      	movs	r2, #32
 8002264:	701a      	strb	r2, [r3, #0]
										respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002266:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800226a:	6899      	ldr	r1, [r3, #8]
 800226c:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8002270:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 8002274:	4413      	add	r3, r2
 8002276:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	2301      	movs	r3, #1
 800227e:	2007      	movs	r0, #7
 8002280:	f7ff fb90 	bl	80019a4 <commandRespond1>
 8002284:	f8c7 06bc 	str.w	r0, [r7, #1724]	; 0x6bc
										total_respond_length += respond_lenght;
 8002288:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 800228c:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8002290:	4413      	add	r3, r2
 8002292:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
										  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 8002296:	f240 119d 	movw	r1, #413	; 0x19d
 800229a:	489c      	ldr	r0, [pc, #624]	; (800250c <StartDefaultTask+0x834>)
 800229c:	f7ff fbd2 	bl	8001a44 <LOG_REPORT>
									  if (scaraIsScanLimit()) {
 80022a0:	e021      	b.n	80022e6 <StartDefaultTask+0x60e>
								  } else {
									//   respond_lenght	= commandRespond(RPD_ERROR,
									// 									  duty_cmd.id_command,
									// 									  "Busy.",
									// 									  (char *)respond);
									detail_array[0] = BUSY;
 80022a2:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 80022a6:	221f      	movs	r2, #31
 80022a8:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80022aa:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80022ae:	6899      	ldr	r1, [r3, #8]
 80022b0:	f207 4294 	addw	r2, r7, #1172	; 0x494
 80022b4:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 80022b8:	4413      	add	r3, r2
 80022ba:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	2301      	movs	r3, #1
 80022c2:	2007      	movs	r0, #7
 80022c4:	f7ff fb6e 	bl	80019a4 <commandRespond1>
 80022c8:	f8c7 06bc 	str.w	r0, [r7, #1724]	; 0x6bc
									total_respond_length += respond_lenght;
 80022cc:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 80022d0:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 80022d4:	4413      	add	r3, r2
 80022d6:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
									  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 80022da:	f240 11a7 	movw	r1, #423	; 0x1a7
 80022de:	488c      	ldr	r0, [pc, #560]	; (8002510 <StartDefaultTask+0x838>)
 80022e0:	f7ff fbb0 	bl	8001a44 <LOG_REPORT>
								  }
							  }
							  break;
 80022e4:	e006      	b.n	80022f4 <StartDefaultTask+0x61c>
 80022e6:	e005      	b.n	80022f4 <StartDefaultTask+0x61c>
						  default:
							  {
								  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 80022e8:	f240 11ad 	movw	r1, #429	; 0x1ad
 80022ec:	4889      	ldr	r0, [pc, #548]	; (8002514 <StartDefaultTask+0x83c>)
 80022ee:	f7ff fba9 	bl	8001a44 <LOG_REPORT>
							  }
						  }
					  }
					  break;
 80022f2:	e0e2      	b.n	80024ba <StartDefaultTask+0x7e2>
 80022f4:	e0e1      	b.n	80024ba <StartDefaultTask+0x7e2>
					  case SCARA_METHOD_TEST:
					  {
						  test_value[0] = 0;
 80022f6:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 80022fa:	2200      	movs	r2, #0
 80022fc:	701a      	strb	r2, [r3, #0]
						  test_value[1] = 0;
 80022fe:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 8002302:	2200      	movs	r2, #0
 8002304:	705a      	strb	r2, [r3, #1]
						  test_value[2] = 0;
 8002306:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 800230a:	2200      	movs	r2, #0
 800230c:	709a      	strb	r2, [r3, #2]
						  test_value[3] = 0;
 800230e:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 8002312:	2200      	movs	r2, #0
 8002314:	70da      	strb	r2, [r3, #3]
						  switch (duty_cmd.test_key)
 8002316:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800231a:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 800231e:	2b07      	cmp	r3, #7
 8002320:	d872      	bhi.n	8002408 <StartDefaultTask+0x730>
 8002322:	a201      	add	r2, pc, #4	; (adr r2, 8002328 <StartDefaultTask+0x650>)
 8002324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002328:	08002349 	.word	0x08002349
 800232c:	08002361 	.word	0x08002361
 8002330:	08002379 	.word	0x08002379
 8002334:	08002391 	.word	0x08002391
 8002338:	080023a9 	.word	0x080023a9
 800233c:	080023c1 	.word	0x080023c1
 8002340:	080023d9 	.word	0x080023d9
 8002344:	080023f1 	.word	0x080023f1
						  {
						  case SCARA_TEST_MOTOR1_POS:
							 test_value[duty_cmd.test_key/2] = 5;
 8002348:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800234c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002350:	085b      	lsrs	r3, r3, #1
 8002352:	b2db      	uxtb	r3, r3
 8002354:	461a      	mov	r2, r3
 8002356:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 800235a:	2105      	movs	r1, #5
 800235c:	5499      	strb	r1, [r3, r2]
						  break;
 800235e:	e054      	b.n	800240a <StartDefaultTask+0x732>
						  case SCARA_TEST_MOTOR1_NEG:
							 test_value[duty_cmd.test_key/2] = -5;
 8002360:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8002364:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002368:	085b      	lsrs	r3, r3, #1
 800236a:	b2db      	uxtb	r3, r3
 800236c:	461a      	mov	r2, r3
 800236e:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 8002372:	21fb      	movs	r1, #251	; 0xfb
 8002374:	5499      	strb	r1, [r3, r2]
						  break;
 8002376:	e048      	b.n	800240a <StartDefaultTask+0x732>
						  case SCARA_TEST_MOTOR2_POS:
							 test_value[duty_cmd.test_key/2] = 5;
 8002378:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800237c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002380:	085b      	lsrs	r3, r3, #1
 8002382:	b2db      	uxtb	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 800238a:	2105      	movs	r1, #5
 800238c:	5499      	strb	r1, [r3, r2]
						  break;
 800238e:	e03c      	b.n	800240a <StartDefaultTask+0x732>
						  case SCARA_TEST_MOTOR2_NEG:
							 test_value[duty_cmd.test_key/2] = -5;
 8002390:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8002394:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002398:	085b      	lsrs	r3, r3, #1
 800239a:	b2db      	uxtb	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 80023a2:	21fb      	movs	r1, #251	; 0xfb
 80023a4:	5499      	strb	r1, [r3, r2]
						  break;
 80023a6:	e030      	b.n	800240a <StartDefaultTask+0x732>
						  case SCARA_TEST_MOTOR3_POS:
							 test_value[duty_cmd.test_key/2] = 5;
 80023a8:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80023ac:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80023b0:	085b      	lsrs	r3, r3, #1
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	461a      	mov	r2, r3
 80023b6:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 80023ba:	2105      	movs	r1, #5
 80023bc:	5499      	strb	r1, [r3, r2]
						  break;
 80023be:	e024      	b.n	800240a <StartDefaultTask+0x732>
						  case SCARA_TEST_MOTOR3_NEG:
							 test_value[duty_cmd.test_key/2] = -5;
 80023c0:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80023c4:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80023c8:	085b      	lsrs	r3, r3, #1
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	461a      	mov	r2, r3
 80023ce:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 80023d2:	21fb      	movs	r1, #251	; 0xfb
 80023d4:	5499      	strb	r1, [r3, r2]
						  break;
 80023d6:	e018      	b.n	800240a <StartDefaultTask+0x732>
						  case SCARA_TEST_MOTOR4_POS:
							 test_value[duty_cmd.test_key/2] = 10;
 80023d8:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80023dc:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80023e0:	085b      	lsrs	r3, r3, #1
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	461a      	mov	r2, r3
 80023e6:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 80023ea:	210a      	movs	r1, #10
 80023ec:	5499      	strb	r1, [r3, r2]
						  break;
 80023ee:	e00c      	b.n	800240a <StartDefaultTask+0x732>
						  case SCARA_TEST_MOTOR4_NEG:
							 test_value[duty_cmd.test_key/2] = -10;
 80023f0:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80023f4:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80023f8:	085b      	lsrs	r3, r3, #1
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 8002402:	21f6      	movs	r1, #246	; 0xf6
 8002404:	5499      	strb	r1, [r3, r2]
						  break;						  
 8002406:	e000      	b.n	800240a <StartDefaultTask+0x732>
						  default:
							  break;
 8002408:	bf00      	nop
						  }
					  }
					  break;
 800240a:	e056      	b.n	80024ba <StartDefaultTask+0x7e2>
				  	  {

				  	  }
				  	  break;
				  	  case SCARA_METHOD_PICK_AND_PLACE:{
				  		  memcpy(&Object[object_head_pointer].object_position, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 800240c:	f897 36c9 	ldrb.w	r3, [r7, #1737]	; 0x6c9
 8002410:	22c8      	movs	r2, #200	; 0xc8
 8002412:	fb02 f303 	mul.w	r3, r2, r3
 8002416:	f8d7 26cc 	ldr.w	r2, [r7, #1740]	; 0x6cc
 800241a:	4413      	add	r3, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8002422:	3328      	adds	r3, #40	; 0x28
 8002424:	22c0      	movs	r2, #192	; 0xc0
 8002426:	4619      	mov	r1, r3
 8002428:	f013 fba8 	bl	8015b7c <memcpy>
				  		  Object[object_head_pointer].timer_value = (uint16_t)duty_cmd.target_point.t;
 800242c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8002430:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8002434:	f897 26c9 	ldrb.w	r2, [r7, #1737]	; 0x6c9
 8002438:	21c8      	movs	r1, #200	; 0xc8
 800243a:	fb01 f202 	mul.w	r2, r1, r2
 800243e:	f8d7 16cc 	ldr.w	r1, [r7, #1740]	; 0x6cc
 8002442:	188d      	adds	r5, r1, r2
 8002444:	4618      	mov	r0, r3
 8002446:	4621      	mov	r1, r4
 8002448:	f7fe fbae 	bl	8000ba8 <__aeabi_d2uiz>
 800244c:	4603      	mov	r3, r0
 800244e:	b29b      	uxth	r3, r3
 8002450:	f8a5 30c0 	strh.w	r3, [r5, #192]	; 0xc0
				  		  object_head_pointer = (object_head_pointer+1)%8;
 8002454:	f897 36c9 	ldrb.w	r3, [r7, #1737]	; 0x6c9
 8002458:	3301      	adds	r3, #1
 800245a:	425a      	negs	r2, r3
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	f002 0207 	and.w	r2, r2, #7
 8002464:	bf58      	it	pl
 8002466:	4253      	negpl	r3, r2
 8002468:	f887 36c9 	strb.w	r3, [r7, #1737]	; 0x6c9
				  	  }
				  	  break;
 800246c:	e025      	b.n	80024ba <StartDefaultTask+0x7e2>
				  	  default:
				  	  {
				  		  LOG_REPORT("CMD Error Method !!!", __LINE__);
 800246e:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8002472:	4829      	ldr	r0, [pc, #164]	; (8002518 <StartDefaultTask+0x840>)
 8002474:	f7ff fae6 	bl	8001a44 <LOG_REPORT>
 8002478:	e01f      	b.n	80024ba <StartDefaultTask+0x7e2>
			  	  } else {
					//   respond_lenght = commandRespond(RPD_ERROR,
					// 								duty_cmd.id_command,
					// 								"METHOD isn't correct",
					// 								(char *)respond);
					detail_array[0] = INCORRECT_METHOD;
 800247a:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 800247e:	2221      	movs	r2, #33	; 0x21
 8002480:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002482:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8002486:	6899      	ldr	r1, [r3, #8]
 8002488:	f207 4294 	addw	r2, r7, #1172	; 0x494
 800248c:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 8002490:	4413      	add	r3, r2
 8002492:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	2301      	movs	r3, #1
 800249a:	2007      	movs	r0, #7
 800249c:	f7ff fa82 	bl	80019a4 <commandRespond1>
 80024a0:	f8c7 06bc 	str.w	r0, [r7, #1724]	; 0x6bc
					total_respond_length += respond_lenght;
 80024a4:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 80024a8:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 80024ac:	4413      	add	r3, r2
 80024ae:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
 80024b2:	e002      	b.n	80024ba <StartDefaultTask+0x7e2>
				  	  break;
 80024b4:	bf00      	nop
 80024b6:	e000      	b.n	80024ba <StartDefaultTask+0x7e2>
				  	  break;
 80024b8:	bf00      	nop
			  	  }

			  }
		  isNewDuty = FALSE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	f887 36ef 	strb.w	r3, [r7, #1775]	; 0x6ef
	  }

	  /* 3--- Execute Phase ---*/
	  switch(current_method) {
 80024c0:	f897 36e7 	ldrb.w	r3, [r7, #1767]	; 0x6e7
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	f200 86ac 	bhi.w	8003222 <StartDefaultTask+0x154a>
 80024ca:	a201      	add	r2, pc, #4	; (adr r2, 80024d0 <StartDefaultTask+0x7f8>)
 80024cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d0:	080024e5 	.word	0x080024e5
 80024d4:	080026ab 	.word	0x080026ab
 80024d8:	08002a93 	.word	0x08002a93
 80024dc:	08002d47 	.word	0x08002d47
 80024e0:	08002d6d 	.word	0x08002d6d
	  case SCARA_METHOD_MANUAL:
	  {
		  switch( current_key_state) {
 80024e4:	f897 36e3 	ldrb.w	r3, [r7, #1763]	; 0x6e3
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	f200 8697 	bhi.w	800321c <StartDefaultTask+0x1544>
 80024ee:	a201      	add	r2, pc, #4	; (adr r2, 80024f4 <StartDefaultTask+0x81c>)
 80024f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f4:	080026a5 	.word	0x080026a5
 80024f8:	0800251d 	.word	0x0800251d
 80024fc:	0800258b 	.word	0x0800258b
 8002500:	08002667 	.word	0x08002667
 8002504:	0801b0e0 	.word	0x0801b0e0
 8002508:	0801b0f0 	.word	0x0801b0f0
 800250c:	0801b100 	.word	0x0801b100
 8002510:	0801b114 	.word	0x0801b114
 8002514:	0801b124 	.word	0x0801b124
 8002518:	0801b138 	.word	0x0801b138
		  case SCARA_KEY_STATE_READY:
			  /* Wait for application keyboard , do nothing*/
		  break;
		  case SCARA_KEY_STATE_INIT:
		  {
			  if (scaraKeyInit1(current_key, current_key_speed1) == SCARA_STATUS_OK) {
 800251c:	4bd6      	ldr	r3, [pc, #856]	; (8002878 <StartDefaultTask+0xba0>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	f897 36e2 	ldrb.w	r3, [r7, #1762]	; 0x6e2
 8002524:	4611      	mov	r1, r2
 8002526:	4618      	mov	r0, r3
 8002528:	f008 f94a 	bl	800a7c0 <scaraKeyInit1>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d127      	bne.n	8002582 <StartDefaultTask+0x8aa>
				  run_time = 0;
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	f04f 0400 	mov.w	r4, #0
 800253a:	f507 62da 	add.w	r2, r7, #1744	; 0x6d0
 800253e:	e9c2 3400 	strd	r3, r4, [r2]
				  current_key_state = SCARA_KEY_STATE_FLOW;
 8002542:	2302      	movs	r3, #2
 8002544:	f887 36e3 	strb.w	r3, [r7, #1763]	; 0x6e3
// #endif
// 				  infor_lenght 		= commandRespond(RPD_START,
// 													  0,
// 													  (char *)position,
// 													  (char *)infor);
					detail_array[0] = NONE;
 8002548:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 800254c:	2222      	movs	r2, #34	; 0x22
 800254e:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002550:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8002554:	6899      	ldr	r1, [r3, #8]
 8002556:	f207 4294 	addw	r2, r7, #1172	; 0x494
 800255a:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 800255e:	4413      	add	r3, r2
 8002560:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	2301      	movs	r3, #1
 8002568:	2003      	movs	r0, #3
 800256a:	f7ff fa1b 	bl	80019a4 <commandRespond1>
 800256e:	f8c7 06bc 	str.w	r0, [r7, #1724]	; 0x6bc
					total_respond_length += respond_lenght;
 8002572:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 8002576:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 800257a:	4413      	add	r3, r2
 800257c:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
			  } else {
				  current_key_state = SCARA_KEY_STATE_READY;
			  }
		  }
		  break;
 8002580:	e091      	b.n	80026a6 <StartDefaultTask+0x9ce>
				  current_key_state = SCARA_KEY_STATE_READY;
 8002582:	2300      	movs	r3, #0
 8002584:	f887 36e3 	strb.w	r3, [r7, #1763]	; 0x6e3
		  break;
 8002588:	e08d      	b.n	80026a6 <StartDefaultTask+0x9ce>
		  case SCARA_KEY_STATE_FLOW:
		  {
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 800258a:	a3b9      	add	r3, pc, #740	; (adr r3, 8002870 <StartDefaultTask+0xb98>)
 800258c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002590:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 8002594:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002598:	f7fd fe78 	bl	800028c <__adddf3>
 800259c:	4603      	mov	r3, r0
 800259e:	460c      	mov	r4, r1
 80025a0:	f507 62da 	add.w	r2, r7, #1744	; 0x6d0
 80025a4:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 80025a8:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 80025ac:	ed93 0b00 	vldr	d0, [r3]
 80025b0:	f007 fff8 	bl	800a5a4 <scaraIsFinish>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <StartDefaultTask+0x8ea>
				  current_key_state = SCARA_KEY_STATE_FINISH;// Key Done
 80025ba:	2303      	movs	r3, #3
 80025bc:	f887 36e3 	strb.w	r3, [r7, #1763]	; 0x6e3
					total_respond_length += respond_lenght;
					  LOG_REPORT("STOP KEY", __LINE__);
				  }
			  }
		  }
		  break;
 80025c0:	e071      	b.n	80026a6 <StartDefaultTask+0x9ce>
				  status = scaraFlowDuty(run_time, &positionNext, positionCurrent);
 80025c2:	4cae      	ldr	r4, [pc, #696]	; (800287c <StartDefaultTask+0xba4>)
 80025c4:	4668      	mov	r0, sp
 80025c6:	f104 0308 	add.w	r3, r4, #8
 80025ca:	22b8      	movs	r2, #184	; 0xb8
 80025cc:	4619      	mov	r1, r3
 80025ce:	f013 fad5 	bl	8015b7c <memcpy>
 80025d2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80025d6:	48aa      	ldr	r0, [pc, #680]	; (8002880 <StartDefaultTask+0xba8>)
 80025d8:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 80025dc:	ed91 0b00 	vldr	d0, [r1]
 80025e0:	f005 fe60 	bl	80082a4 <scaraFlowDuty>
 80025e4:	4603      	mov	r3, r0
 80025e6:	f887 368f 	strb.w	r3, [r7, #1679]	; 0x68f
				  if ( SCARA_STATUS_OK == status) {
 80025ea:	f897 368f 	ldrb.w	r3, [r7, #1679]	; 0x68f
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d113      	bne.n	800261a <StartDefaultTask+0x942>
					  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 80025f2:	4ca2      	ldr	r4, [pc, #648]	; (800287c <StartDefaultTask+0xba4>)
 80025f4:	4aa2      	ldr	r2, [pc, #648]	; (8002880 <StartDefaultTask+0xba8>)
 80025f6:	ab2c      	add	r3, sp, #176	; 0xb0
 80025f8:	4611      	mov	r1, r2
 80025fa:	22c0      	movs	r2, #192	; 0xc0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f013 fabd 	bl	8015b7c <memcpy>
 8002602:	4668      	mov	r0, sp
 8002604:	f104 0310 	add.w	r3, r4, #16
 8002608:	22b0      	movs	r2, #176	; 0xb0
 800260a:	4619      	mov	r1, r3
 800260c:	f013 fab6 	bl	8015b7c <memcpy>
 8002610:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002614:	f002 f940 	bl	8004898 <lowlayer_computeAndWritePulse>
		  break;
 8002618:	e045      	b.n	80026a6 <StartDefaultTask+0x9ce>
					  current_key_state = SCARA_KEY_STATE_FINISH;
 800261a:	2303      	movs	r3, #3
 800261c:	f887 36e3 	strb.w	r3, [r7, #1763]	; 0x6e3
					detail_array[0] = status;
 8002620:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8002624:	f897 268f 	ldrb.w	r2, [r7, #1679]	; 0x68f
 8002628:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800262a:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800262e:	6899      	ldr	r1, [r3, #8]
 8002630:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8002634:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 8002638:	4413      	add	r3, r2
 800263a:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	2301      	movs	r3, #1
 8002642:	2006      	movs	r0, #6
 8002644:	f7ff f9ae 	bl	80019a4 <commandRespond1>
 8002648:	f8c7 06bc 	str.w	r0, [r7, #1724]	; 0x6bc
					total_respond_length += respond_lenght;
 800264c:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 8002650:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8002654:	4413      	add	r3, r2
 8002656:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
					  LOG_REPORT("STOP KEY", __LINE__);
 800265a:	f240 2139 	movw	r1, #569	; 0x239
 800265e:	4889      	ldr	r0, [pc, #548]	; (8002884 <StartDefaultTask+0xbac>)
 8002660:	f7ff f9f0 	bl	8001a44 <LOG_REPORT>
		  break;
 8002664:	e01f      	b.n	80026a6 <StartDefaultTask+0x9ce>
		  case SCARA_KEY_STATE_FINISH:
		  {
			  lowlayer_readTruePosition(&positionNext);
 8002666:	4886      	ldr	r0, [pc, #536]	; (8002880 <StartDefaultTask+0xba8>)
 8002668:	f001 ff86 	bl	8004578 <lowlayer_readTruePosition>
			  kinematicForward(&positionNext);
 800266c:	4884      	ldr	r0, [pc, #528]	; (8002880 <StartDefaultTask+0xba8>)
 800266e:	f001 f88f 	bl	8003790 <kinematicForward>
			  current_key_state = SCARA_KEY_STATE_READY;
 8002672:	2300      	movs	r3, #0
 8002674:	f887 36e3 	strb.w	r3, [r7, #1763]	; 0x6e3
			  positionNext.t = 0;
 8002678:	4a81      	ldr	r2, [pc, #516]	; (8002880 <StartDefaultTask+0xba8>)
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	f04f 0400 	mov.w	r4, #0
 8002682:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
			  positionNext.total_time = 0;
 8002686:	4a7e      	ldr	r2, [pc, #504]	; (8002880 <StartDefaultTask+0xba8>)
 8002688:	f04f 0300 	mov.w	r3, #0
 800268c:	f04f 0400 	mov.w	r4, #0
 8002690:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
			  positionNext.q = 0;
 8002694:	4a7a      	ldr	r2, [pc, #488]	; (8002880 <StartDefaultTask+0xba8>)
 8002696:	f04f 0300 	mov.w	r3, #0
 800269a:	f04f 0400 	mov.w	r4, #0
 800269e:	e9c2 3400 	strd	r3, r4, [r2]
		  }
		  break;
 80026a2:	e000      	b.n	80026a6 <StartDefaultTask+0x9ce>
		  break;
 80026a4:	bf00      	nop
		  }
	  }
	  break;
 80026a6:	f000 bdb9 	b.w	800321c <StartDefaultTask+0x1544>

	  case SCARA_METHOD_SEMI_AUTO:
	  {
		  switch( current_mode) {
 80026aa:	f897 36e6 	ldrb.w	r3, [r7, #1766]	; 0x6e6
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d00b      	beq.n	80026ca <StartDefaultTask+0x9f2>
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d066      	beq.n	8002784 <StartDefaultTask+0xaac>
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f040 81e4 	bne.w	8002a84 <StartDefaultTask+0xdac>
		  case SCARA_MODE_STOP:
			  {
				  current_mode 	= SCARA_MODE_DUTY;
 80026bc:	2302      	movs	r3, #2
 80026be:	f887 36e6 	strb.w	r3, [r7, #1766]	; 0x6e6
				  current_duty_state = SCARA_DUTY_STATE_READY;
 80026c2:	2300      	movs	r3, #0
 80026c4:	f887 36e5 	strb.w	r3, [r7, #1765]	; 0x6e5
			  }
			  break;
 80026c8:	e1e2      	b.n	8002a90 <StartDefaultTask+0xdb8>

		  case SCARA_MODE_SCAN:
			  {
				  switch (current_scan_state) {
 80026ca:	f897 36e4 	ldrb.w	r3, [r7, #1764]	; 0x6e4
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	d84e      	bhi.n	8002770 <StartDefaultTask+0xa98>
 80026d2:	a201      	add	r2, pc, #4	; (adr r2, 80026d8 <StartDefaultTask+0xa00>)
 80026d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d8:	080026e9 	.word	0x080026e9
 80026dc:	080026f5 	.word	0x080026f5
 80026e0:	08002707 	.word	0x08002707
 80026e4:	0800271b 	.word	0x0800271b
				  case SCARA_SCAN_STATE_INIT:
					  {
						  lowlayer_scanReset();
 80026e8:	f001 fd3c 	bl	8004164 <lowlayer_scanReset>
						  current_scan_state = SCARA_SCAN_STATE_HARD;
 80026ec:	2301      	movs	r3, #1
 80026ee:	f887 36e4 	strb.w	r3, [r7, #1764]	; 0x6e4
					  }
					  break;
 80026f2:	e046      	b.n	8002782 <StartDefaultTask+0xaaa>
				  case SCARA_SCAN_STATE_HARD:
					  {
						  if(lowlayer_scanFlow()) {
 80026f4:	f001 fd68 	bl	80041c8 <lowlayer_scanFlow>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d03e      	beq.n	800277c <StartDefaultTask+0xaa4>
							  current_scan_state = SCARA_SCAN_STATE_SOFT;
 80026fe:	2302      	movs	r3, #2
 8002700:	f887 36e4 	strb.w	r3, [r7, #1764]	; 0x6e4
						  }
					  }
					  break;
 8002704:	e03a      	b.n	800277c <StartDefaultTask+0xaa4>
				  case SCARA_SCAN_STATE_SOFT:
					  {
						  if(lowlayer_goToSoftLimit(&positionNext)) {
 8002706:	485e      	ldr	r0, [pc, #376]	; (8002880 <StartDefaultTask+0xba8>)
 8002708:	f001 feba 	bl	8004480 <lowlayer_goToSoftLimit>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d036      	beq.n	8002780 <StartDefaultTask+0xaa8>
							  current_scan_state = SCARA_SCAN_STATE_FINISH;
 8002712:	2303      	movs	r3, #3
 8002714:	f887 36e4 	strb.w	r3, [r7, #1764]	; 0x6e4
							}
					  }
					  break;
 8002718:	e032      	b.n	8002780 <StartDefaultTask+0xaa8>
				  case SCARA_SCAN_STATE_FINISH:
					  {
						  lowlayer_readSetPosition(&positionNext);
 800271a:	4859      	ldr	r0, [pc, #356]	; (8002880 <StartDefaultTask+0xba8>)
 800271c:	f002 f808 	bl	8004730 <lowlayer_readSetPosition>
						  current_mode 	= SCARA_MODE_DUTY;
 8002720:	2302      	movs	r3, #2
 8002722:	f887 36e6 	strb.w	r3, [r7, #1766]	; 0x6e6
						  current_duty_state = SCARA_DUTY_STATE_READY;
 8002726:	2300      	movs	r3, #0
 8002728:	f887 36e5 	strb.w	r3, [r7, #1765]	; 0x6e5
						  kinematicForward(&positionNext);
 800272c:	4854      	ldr	r0, [pc, #336]	; (8002880 <StartDefaultTask+0xba8>)
 800272e:	f001 f82f 	bl	8003790 <kinematicForward>
						  scaraSetScanFlag();
 8002732:	f007 fe99 	bl	800a468 <scaraSetScanFlag>
						//   scaraPosition2String((char *)position, positionNext);
						//   infor_lenght 		= commandRespond(RPD_DONE,
						// 									 0,
						// 									(char *)position,
						// 									(char *)infor);
						detail_array[0] = NONE;
 8002736:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 800273a:	2222      	movs	r2, #34	; 0x22
 800273c:	701a      	strb	r2, [r3, #0]
						respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800273e:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8002742:	6899      	ldr	r1, [r3, #8]
 8002744:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8002748:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 800274c:	4413      	add	r3, r2
 800274e:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	2301      	movs	r3, #1
 8002756:	2005      	movs	r0, #5
 8002758:	f7ff f924 	bl	80019a4 <commandRespond1>
 800275c:	f8c7 06bc 	str.w	r0, [r7, #1724]	; 0x6bc
						total_respond_length += respond_lenght;
 8002760:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 8002764:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8002768:	4413      	add	r3, r2
 800276a:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
					  }
					  break;
 800276e:	e008      	b.n	8002782 <StartDefaultTask+0xaaa>
				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8002770:	f240 2181 	movw	r1, #641	; 0x281
 8002774:	4844      	ldr	r0, [pc, #272]	; (8002888 <StartDefaultTask+0xbb0>)
 8002776:	f7ff f965 	bl	8001a44 <LOG_REPORT>
						  while(1);
 800277a:	e7fe      	b.n	800277a <StartDefaultTask+0xaa2>
					  break;
 800277c:	bf00      	nop
 800277e:	e187      	b.n	8002a90 <StartDefaultTask+0xdb8>
					  break;
 8002780:	bf00      	nop
					  }
				  }

			  }
			  break;
 8002782:	e185      	b.n	8002a90 <StartDefaultTask+0xdb8>

		  case SCARA_MODE_DUTY:
			  {
				  switch (current_duty_state) {
 8002784:	f897 36e5 	ldrb.w	r3, [r7, #1765]	; 0x6e5
 8002788:	2b03      	cmp	r3, #3
 800278a:	f200 8174 	bhi.w	8002a76 <StartDefaultTask+0xd9e>
 800278e:	a201      	add	r2, pc, #4	; (adr r2, 8002794 <StartDefaultTask+0xabc>)
 8002790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002794:	080027a5 	.word	0x080027a5
 8002798:	080027a9 	.word	0x080027a9
 800279c:	08002925 	.word	0x08002925
 80027a0:	08002a01 	.word	0x08002a01
				  case SCARA_DUTY_STATE_READY:
					  {
						  // Do nothing();
						  __NOP();
 80027a4:	bf00      	nop

					  }
				  break;
 80027a6:	e16c      	b.n	8002a82 <StartDefaultTask+0xdaa>

				  case SCARA_DUTY_STATE_INIT:
					  {

						  SCARA_StatusTypeDef status1, status2;
						  status1 = scaraInitDuty(duty_cmd);
 80027a8:	f507 6498 	add.w	r4, r7, #1216	; 0x4c0
 80027ac:	4668      	mov	r0, sp
 80027ae:	f104 0310 	add.w	r3, r4, #16
 80027b2:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80027b6:	4619      	mov	r1, r3
 80027b8:	f013 f9e0 	bl	8015b7c <memcpy>
 80027bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80027c0:	f002 fd32 	bl	8005228 <scaraInitDuty>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f887 3691 	strb.w	r3, [r7, #1681]	; 0x691
						  if ( SCARA_STATUS_OK == status1) {
 80027ca:	f897 3691 	ldrb.w	r3, [r7, #1681]	; 0x691
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f040 8082 	bne.w	80028d8 <StartDefaultTask+0xc00>
							  status2 = scaraTestDuty();
 80027d4:	f007 fdcc 	bl	800a370 <scaraTestDuty>
 80027d8:	4603      	mov	r3, r0
 80027da:	f887 3690 	strb.w	r3, [r7, #1680]	; 0x690
							  if (SCARA_STATUS_OK == status2) {
 80027de:	f897 3690 	ldrb.w	r3, [r7, #1680]	; 0x690
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d152      	bne.n	800288c <StartDefaultTask+0xbb4>
							  current_duty_state = SCARA_DUTY_STATE_FLOW;
 80027e6:	2302      	movs	r3, #2
 80027e8:	f887 36e5 	strb.w	r3, [r7, #1765]	; 0x6e5
							  //current_duty_state = SCARA_DUTY_STATE_FINISH;
							  run_time			= 0;
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	f04f 0400 	mov.w	r4, #0
 80027f4:	f507 62da 	add.w	r2, r7, #1744	; 0x6d0
 80027f8:	e9c2 3400 	strd	r3, r4, [r2]
							  // Respond
							  detail_array[0] = status1;
 80027fc:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8002800:	f897 2691 	ldrb.w	r2, [r7, #1681]	; 0x691
 8002804:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002806:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800280a:	6899      	ldr	r1, [r3, #8]
 800280c:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8002810:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 8002814:	4413      	add	r3, r2
 8002816:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	2301      	movs	r3, #1
 800281e:	2008      	movs	r0, #8
 8002820:	f7ff f8c0 	bl	80019a4 <commandRespond1>
 8002824:	f8c7 06bc 	str.w	r0, [r7, #1724]	; 0x6bc
							  total_respond_length += respond_lenght;
 8002828:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 800282c:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8002830:	4413      	add	r3, r2
 8002832:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
							  detail_array[0] = NONE;
 8002836:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 800283a:	2222      	movs	r2, #34	; 0x22
 800283c:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800283e:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8002842:	6899      	ldr	r1, [r3, #8]
 8002844:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8002848:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 800284c:	4413      	add	r3, r2
 800284e:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	2301      	movs	r3, #1
 8002856:	2003      	movs	r0, #3
 8002858:	f7ff f8a4 	bl	80019a4 <commandRespond1>
 800285c:	f8c7 06bc 	str.w	r0, [r7, #1724]	; 0x6bc
							  total_respond_length += respond_lenght;
 8002860:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 8002864:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8002868:	4413      	add	r3, r2
 800286a:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
							total_respond_length += respond_lenght;
							  LOG_REPORT("INIT FAIL", __LINE__);
						  }
					  }
				  break;
 800286e:	e108      	b.n	8002a82 <StartDefaultTask+0xdaa>
 8002870:	40000000 	.word	0x40000000
 8002874:	3f847ae1 	.word	0x3f847ae1
 8002878:	20000000 	.word	0x20000000
 800287c:	20005ae8 	.word	0x20005ae8
 8002880:	20005c68 	.word	0x20005c68
 8002884:	0801b150 	.word	0x0801b150
 8002888:	0801b15c 	.word	0x0801b15c
								  current_duty_state 	= SCARA_DUTY_STATE_READY;
 800288c:	2300      	movs	r3, #0
 800288e:	f887 36e5 	strb.w	r3, [r7, #1765]	; 0x6e5
								  LOG_REPORT("TEST FAIL", __LINE__);
 8002892:	f240 21ba 	movw	r1, #698	; 0x2ba
 8002896:	48d0      	ldr	r0, [pc, #832]	; (8002bd8 <StartDefaultTask+0xf00>)
 8002898:	f7ff f8d4 	bl	8001a44 <LOG_REPORT>
								detail_array[0] = status2;
 800289c:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 80028a0:	f897 2690 	ldrb.w	r2, [r7, #1680]	; 0x690
 80028a4:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80028a6:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80028aa:	6899      	ldr	r1, [r3, #8]
 80028ac:	f207 4294 	addw	r2, r7, #1172	; 0x494
 80028b0:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 80028b4:	4413      	add	r3, r2
 80028b6:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	2301      	movs	r3, #1
 80028be:	2007      	movs	r0, #7
 80028c0:	f7ff f870 	bl	80019a4 <commandRespond1>
 80028c4:	f8c7 06bc 	str.w	r0, [r7, #1724]	; 0x6bc
								total_respond_length += respond_lenght;
 80028c8:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 80028cc:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 80028d0:	4413      	add	r3, r2
 80028d2:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
				  break;
 80028d6:	e0d4      	b.n	8002a82 <StartDefaultTask+0xdaa>
							  current_duty_state 	= SCARA_DUTY_STATE_READY;
 80028d8:	2300      	movs	r3, #0
 80028da:	f887 36e5 	strb.w	r3, [r7, #1765]	; 0x6e5
							detail_array[0] = status1;
 80028de:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 80028e2:	f897 2691 	ldrb.w	r2, [r7, #1681]	; 0x691
 80028e6:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80028e8:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80028ec:	6899      	ldr	r1, [r3, #8]
 80028ee:	f207 4294 	addw	r2, r7, #1172	; 0x494
 80028f2:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 80028f6:	4413      	add	r3, r2
 80028f8:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	2301      	movs	r3, #1
 8002900:	2007      	movs	r0, #7
 8002902:	f7ff f84f 	bl	80019a4 <commandRespond1>
 8002906:	f8c7 06bc 	str.w	r0, [r7, #1724]	; 0x6bc
							total_respond_length += respond_lenght;
 800290a:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 800290e:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8002912:	4413      	add	r3, r2
 8002914:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
							  LOG_REPORT("INIT FAIL", __LINE__);
 8002918:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 800291c:	48af      	ldr	r0, [pc, #700]	; (8002bdc <StartDefaultTask+0xf04>)
 800291e:	f7ff f891 	bl	8001a44 <LOG_REPORT>
				  break;
 8002922:	e0ae      	b.n	8002a82 <StartDefaultTask+0xdaa>

				  case SCARA_DUTY_STATE_FLOW:
					  {
						  SCARA_StatusTypeDef status;
						  // Increase run time
						  run_time += T_SAMPLING;
 8002924:	a3aa      	add	r3, pc, #680	; (adr r3, 8002bd0 <StartDefaultTask+0xef8>)
 8002926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292a:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 800292e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002932:	f7fd fcab 	bl	800028c <__adddf3>
 8002936:	4603      	mov	r3, r0
 8002938:	460c      	mov	r4, r1
 800293a:	f507 62da 	add.w	r2, r7, #1744	; 0x6d0
 800293e:	e9c2 3400 	strd	r3, r4, [r2]
						  // Check Time Out
						  if (scaraIsFinish(run_time)) {
 8002942:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 8002946:	ed93 0b00 	vldr	d0, [r3]
 800294a:	f007 fe2b 	bl	800a5a4 <scaraIsFinish>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <StartDefaultTask+0xc84>
							  current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 8002954:	2303      	movs	r3, #3
 8002956:	f887 36e5 	strb.w	r3, [r7, #1765]	; 0x6e5
								total_respond_length += respond_lenght;
								  LOG_REPORT("STOP DUTY", __LINE__);
							  }
						  }
					  }
				  break;
 800295a:	e092      	b.n	8002a82 <StartDefaultTask+0xdaa>
							  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 800295c:	4ca0      	ldr	r4, [pc, #640]	; (8002be0 <StartDefaultTask+0xf08>)
 800295e:	4668      	mov	r0, sp
 8002960:	f104 0308 	add.w	r3, r4, #8
 8002964:	22b8      	movs	r2, #184	; 0xb8
 8002966:	4619      	mov	r1, r3
 8002968:	f013 f908 	bl	8015b7c <memcpy>
 800296c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002970:	489c      	ldr	r0, [pc, #624]	; (8002be4 <StartDefaultTask+0xf0c>)
 8002972:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 8002976:	ed91 0b00 	vldr	d0, [r1]
 800297a:	f005 fc93 	bl	80082a4 <scaraFlowDuty>
 800297e:	4603      	mov	r3, r0
 8002980:	f887 3692 	strb.w	r3, [r7, #1682]	; 0x692
							  if ( SCARA_STATUS_OK == status) {
 8002984:	f897 3692 	ldrb.w	r3, [r7, #1682]	; 0x692
 8002988:	2b00      	cmp	r3, #0
 800298a:	d113      	bne.n	80029b4 <StartDefaultTask+0xcdc>
								  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 800298c:	4c94      	ldr	r4, [pc, #592]	; (8002be0 <StartDefaultTask+0xf08>)
 800298e:	4a95      	ldr	r2, [pc, #596]	; (8002be4 <StartDefaultTask+0xf0c>)
 8002990:	ab2c      	add	r3, sp, #176	; 0xb0
 8002992:	4611      	mov	r1, r2
 8002994:	22c0      	movs	r2, #192	; 0xc0
 8002996:	4618      	mov	r0, r3
 8002998:	f013 f8f0 	bl	8015b7c <memcpy>
 800299c:	4668      	mov	r0, sp
 800299e:	f104 0310 	add.w	r3, r4, #16
 80029a2:	22b0      	movs	r2, #176	; 0xb0
 80029a4:	4619      	mov	r1, r3
 80029a6:	f013 f8e9 	bl	8015b7c <memcpy>
 80029aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80029ae:	f001 ff73 	bl	8004898 <lowlayer_computeAndWritePulse>
				  break;
 80029b2:	e066      	b.n	8002a82 <StartDefaultTask+0xdaa>
								  current_duty_state = SCARA_DUTY_STATE_FINISH;
 80029b4:	2303      	movs	r3, #3
 80029b6:	f887 36e5 	strb.w	r3, [r7, #1765]	; 0x6e5
								detail_array[0] = status;
 80029ba:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 80029be:	f897 2692 	ldrb.w	r2, [r7, #1682]	; 0x692
 80029c2:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80029c4:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80029c8:	6899      	ldr	r1, [r3, #8]
 80029ca:	f207 4294 	addw	r2, r7, #1172	; 0x494
 80029ce:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 80029d2:	4413      	add	r3, r2
 80029d4:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	2301      	movs	r3, #1
 80029dc:	2006      	movs	r0, #6
 80029de:	f7fe ffe1 	bl	80019a4 <commandRespond1>
 80029e2:	f8c7 06bc 	str.w	r0, [r7, #1724]	; 0x6bc
								total_respond_length += respond_lenght;
 80029e6:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 80029ea:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 80029ee:	4413      	add	r3, r2
 80029f0:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
								  LOG_REPORT("STOP DUTY", __LINE__);
 80029f4:	f240 21ee 	movw	r1, #750	; 0x2ee
 80029f8:	487b      	ldr	r0, [pc, #492]	; (8002be8 <StartDefaultTask+0xf10>)
 80029fa:	f7ff f823 	bl	8001a44 <LOG_REPORT>
				  break;
 80029fe:	e040      	b.n	8002a82 <StartDefaultTask+0xdaa>

				  case SCARA_DUTY_STATE_FINISH:
					  {
						  lowlayer_readTruePosition(&positionNext);
 8002a00:	4878      	ldr	r0, [pc, #480]	; (8002be4 <StartDefaultTask+0xf0c>)
 8002a02:	f001 fdb9 	bl	8004578 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 8002a06:	4877      	ldr	r0, [pc, #476]	; (8002be4 <StartDefaultTask+0xf0c>)
 8002a08:	f000 fec2 	bl	8003790 <kinematicForward>
						  current_duty_state = SCARA_DUTY_STATE_READY;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f887 36e5 	strb.w	r3, [r7, #1765]	; 0x6e5
						  positionNext.t = 0;
 8002a12:	4a74      	ldr	r2, [pc, #464]	; (8002be4 <StartDefaultTask+0xf0c>)
 8002a14:	f04f 0300 	mov.w	r3, #0
 8002a18:	f04f 0400 	mov.w	r4, #0
 8002a1c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
						  positionNext.total_time = 0;
 8002a20:	4a70      	ldr	r2, [pc, #448]	; (8002be4 <StartDefaultTask+0xf0c>)
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	f04f 0400 	mov.w	r4, #0
 8002a2a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
						  positionNext.q = 0;
 8002a2e:	4a6d      	ldr	r2, [pc, #436]	; (8002be4 <StartDefaultTask+0xf0c>)
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	f04f 0400 	mov.w	r4, #0
 8002a38:	e9c2 3400 	strd	r3, r4, [r2]
// #endif
// 						  infor_lenght 		= commandRespond(RPD_DONE,
// 															 0,
// 															 (char *)position,
// 															 (char *)infor);
					detail_array[0] = NONE;
 8002a3c:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8002a40:	2222      	movs	r2, #34	; 0x22
 8002a42:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002a44:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8002a48:	6899      	ldr	r1, [r3, #8]
 8002a4a:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8002a4e:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 8002a52:	4413      	add	r3, r2
 8002a54:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	2005      	movs	r0, #5
 8002a5e:	f7fe ffa1 	bl	80019a4 <commandRespond1>
 8002a62:	f8c7 06bc 	str.w	r0, [r7, #1724]	; 0x6bc
					total_respond_length += respond_lenght;
 8002a66:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 8002a6a:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8002a6e:	4413      	add	r3, r2
 8002a70:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
					  }
				  break;
 8002a74:	e005      	b.n	8002a82 <StartDefaultTask+0xdaa>

				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8002a76:	f240 310e 	movw	r1, #782	; 0x30e
 8002a7a:	485c      	ldr	r0, [pc, #368]	; (8002bec <StartDefaultTask+0xf14>)
 8002a7c:	f7fe ffe2 	bl	8001a44 <LOG_REPORT>
						  while(1);
 8002a80:	e7fe      	b.n	8002a80 <StartDefaultTask+0xda8>
					  }
				  }

			  }
			  break;
 8002a82:	e005      	b.n	8002a90 <StartDefaultTask+0xdb8>

		  default:
			  {
				  LOG_REPORT("ERROR MODE !!!", __LINE__);
 8002a84:	f44f 7146 	mov.w	r1, #792	; 0x318
 8002a88:	4859      	ldr	r0, [pc, #356]	; (8002bf0 <StartDefaultTask+0xf18>)
 8002a8a:	f7fe ffdb 	bl	8001a44 <LOG_REPORT>
				  while(1);
 8002a8e:	e7fe      	b.n	8002a8e <StartDefaultTask+0xdb6>
			  }
		  }
	  }
	  break;
 8002a90:	e3c7      	b.n	8003222 <StartDefaultTask+0x154a>

	  case SCARA_METHOD_AUTO:
	  {
		  switch (current_duty_state)
 8002a92:	f897 36e5 	ldrb.w	r3, [r7, #1765]	; 0x6e5
 8002a96:	2b03      	cmp	r3, #3
 8002a98:	f200 8153 	bhi.w	8002d42 <StartDefaultTask+0x106a>
 8002a9c:	a201      	add	r2, pc, #4	; (adr r2, 8002aa4 <StartDefaultTask+0xdcc>)
 8002a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa2:	bf00      	nop
 8002aa4:	08002d43 	.word	0x08002d43
 8002aa8:	08002ab5 	.word	0x08002ab5
 8002aac:	08002c41 	.word	0x08002c41
 8002ab0:	08002cd9 	.word	0x08002cd9
		  case SCARA_DUTY_STATE_READY:
			  
		  break;
		  case SCARA_DUTY_STATE_INIT:{
			  SCARA_StatusTypeDef status1, status2;
			  status1 = scara_test_InitDuty(duty_cmd);
 8002ab4:	f507 6498 	add.w	r4, r7, #1216	; 0x4c0
 8002ab8:	4668      	mov	r0, sp
 8002aba:	f104 0310 	add.w	r3, r4, #16
 8002abe:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	f013 f85a 	bl	8015b7c <memcpy>
 8002ac8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002acc:	f002 fa78 	bl	8004fc0 <scara_test_InitDuty>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f887 3694 	strb.w	r3, [r7, #1684]	; 0x694
			  if ( SCARA_STATUS_OK == status1) {
 8002ad6:	f897 3694 	ldrb.w	r3, [r7, #1684]	; 0x694
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f040 808a 	bne.w	8002bf4 <StartDefaultTask+0xf1c>
				  current_duty_state = SCARA_DUTY_STATE_FLOW;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	f887 36e5 	strb.w	r3, [r7, #1765]	; 0x6e5
			  	status2 = scaraTestLinearDuty();
 8002ae6:	f007 fbc7 	bl	800a278 <scaraTestLinearDuty>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f887 3693 	strb.w	r3, [r7, #1683]	; 0x693
			  	if (SCARA_STATUS_OK == status2) {
 8002af0:	f897 3693 	ldrb.w	r3, [r7, #1683]	; 0x693
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d144      	bne.n	8002b82 <StartDefaultTask+0xeaa>
			  		current_duty_state = SCARA_DUTY_STATE_FLOW;
 8002af8:	2302      	movs	r3, #2
 8002afa:	f887 36e5 	strb.w	r3, [r7, #1765]	; 0x6e5
			  		run_time			= 0;
 8002afe:	f04f 0300 	mov.w	r3, #0
 8002b02:	f04f 0400 	mov.w	r4, #0
 8002b06:	f507 62da 	add.w	r2, r7, #1744	; 0x6d0
 8002b0a:	e9c2 3400 	strd	r3, r4, [r2]
			  		// Respond
			  		detail_array[0] = status1;
 8002b0e:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8002b12:	f897 2694 	ldrb.w	r2, [r7, #1684]	; 0x694
 8002b16:	701a      	strb	r2, [r3, #0]
			  		respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002b18:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8002b1c:	6899      	ldr	r1, [r3, #8]
 8002b1e:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8002b22:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 8002b26:	4413      	add	r3, r2
 8002b28:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	2301      	movs	r3, #1
 8002b30:	2008      	movs	r0, #8
 8002b32:	f7fe ff37 	bl	80019a4 <commandRespond1>
 8002b36:	f8c7 06bc 	str.w	r0, [r7, #1724]	; 0x6bc
			  		total_respond_length += respond_lenght;
 8002b3a:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 8002b3e:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8002b42:	4413      	add	r3, r2
 8002b44:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
			  		detail_array[0] = NONE;
 8002b48:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8002b4c:	2222      	movs	r2, #34	; 0x22
 8002b4e:	701a      	strb	r2, [r3, #0]
			  		respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002b50:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8002b54:	6899      	ldr	r1, [r3, #8]
 8002b56:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8002b5a:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 8002b5e:	4413      	add	r3, r2
 8002b60:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	2301      	movs	r3, #1
 8002b68:	2003      	movs	r0, #3
 8002b6a:	f7fe ff1b 	bl	80019a4 <commandRespond1>
 8002b6e:	f8c7 06bc 	str.w	r0, [r7, #1724]	; 0x6bc
			  		total_respond_length += respond_lenght;
 8002b72:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 8002b76:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
			    respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
			    total_respond_length += respond_lenght;
			  	LOG_REPORT("INIT FAIL", __LINE__);
			  }
			}
		  break;
 8002b80:	e0e0      	b.n	8002d44 <StartDefaultTask+0x106c>
					current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002b82:	2300      	movs	r3, #0
 8002b84:	f887 36e5 	strb.w	r3, [r7, #1765]	; 0x6e5
					LOG_REPORT("TEST FAIL", __LINE__);
 8002b88:	f44f 714e 	mov.w	r1, #824	; 0x338
 8002b8c:	4812      	ldr	r0, [pc, #72]	; (8002bd8 <StartDefaultTask+0xf00>)
 8002b8e:	f7fe ff59 	bl	8001a44 <LOG_REPORT>
					detail_array[0] = status2;
 8002b92:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8002b96:	f897 2693 	ldrb.w	r2, [r7, #1683]	; 0x693
 8002b9a:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002b9c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8002ba0:	6899      	ldr	r1, [r3, #8]
 8002ba2:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8002ba6:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 8002baa:	4413      	add	r3, r2
 8002bac:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	2007      	movs	r0, #7
 8002bb6:	f7fe fef5 	bl	80019a4 <commandRespond1>
 8002bba:	f8c7 06bc 	str.w	r0, [r7, #1724]	; 0x6bc
					total_respond_length += respond_lenght;
 8002bbe:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 8002bc2:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
		  break;
 8002bcc:	e0ba      	b.n	8002d44 <StartDefaultTask+0x106c>
 8002bce:	bf00      	nop
 8002bd0:	40000000 	.word	0x40000000
 8002bd4:	3f847ae1 	.word	0x3f847ae1
 8002bd8:	0801b16c 	.word	0x0801b16c
 8002bdc:	0801b178 	.word	0x0801b178
 8002be0:	20005ae8 	.word	0x20005ae8
 8002be4:	20005c68 	.word	0x20005c68
 8002be8:	0801b184 	.word	0x0801b184
 8002bec:	0801b15c 	.word	0x0801b15c
 8002bf0:	0801b190 	.word	0x0801b190
			  	current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f887 36e5 	strb.w	r3, [r7, #1765]	; 0x6e5
			    detail_array[0] = status1;
 8002bfa:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8002bfe:	f897 2694 	ldrb.w	r2, [r7, #1684]	; 0x694
 8002c02:	701a      	strb	r2, [r3, #0]
			    respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002c04:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8002c08:	6899      	ldr	r1, [r3, #8]
 8002c0a:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8002c0e:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 8002c12:	4413      	add	r3, r2
 8002c14:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	2007      	movs	r0, #7
 8002c1e:	f7fe fec1 	bl	80019a4 <commandRespond1>
 8002c22:	f8c7 06bc 	str.w	r0, [r7, #1724]	; 0x6bc
			    total_respond_length += respond_lenght;
 8002c26:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 8002c2a:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8002c2e:	4413      	add	r3, r2
 8002c30:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
			  	LOG_REPORT("INIT FAIL", __LINE__);
 8002c34:	f240 3142 	movw	r1, #834	; 0x342
 8002c38:	48bd      	ldr	r0, [pc, #756]	; (8002f30 <StartDefaultTask+0x1258>)
 8002c3a:	f7fe ff03 	bl	8001a44 <LOG_REPORT>
		  break;
 8002c3e:	e081      	b.n	8002d44 <StartDefaultTask+0x106c>

		  case SCARA_DUTY_STATE_FLOW:{
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 8002c40:	a3b7      	add	r3, pc, #732	; (adr r3, 8002f20 <StartDefaultTask+0x1248>)
 8002c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c46:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 8002c4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c4e:	f7fd fb1d 	bl	800028c <__adddf3>
 8002c52:	4603      	mov	r3, r0
 8002c54:	460c      	mov	r4, r1
 8002c56:	f507 62da 	add.w	r2, r7, #1744	; 0x6d0
 8002c5a:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8002c5e:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 8002c62:	ed93 0b00 	vldr	d0, [r3]
 8002c66:	f007 fc9d 	bl	800a5a4 <scaraIsFinish>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <StartDefaultTask+0xfa0>
			  	current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 8002c70:	2303      	movs	r3, #3
 8002c72:	f887 36e5 	strb.w	r3, [r7, #1765]	; 0x6e5
				  }else{
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
				  }
			  }
		  }
		  break;
 8002c76:	e065      	b.n	8002d44 <StartDefaultTask+0x106c>
			  	status = scaraTestFlowDuty(run_time , &positionNext, positionCurrent);
 8002c78:	4cae      	ldr	r4, [pc, #696]	; (8002f34 <StartDefaultTask+0x125c>)
 8002c7a:	4668      	mov	r0, sp
 8002c7c:	f104 0308 	add.w	r3, r4, #8
 8002c80:	22b8      	movs	r2, #184	; 0xb8
 8002c82:	4619      	mov	r1, r3
 8002c84:	f012 ff7a 	bl	8015b7c <memcpy>
 8002c88:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002c8c:	48aa      	ldr	r0, [pc, #680]	; (8002f38 <StartDefaultTask+0x1260>)
 8002c8e:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 8002c92:	ed91 0b00 	vldr	d0, [r1]
 8002c96:	f005 fa99 	bl	80081cc <scaraTestFlowDuty>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f887 3695 	strb.w	r3, [r7, #1685]	; 0x695
			  	if ( SCARA_STATUS_OK == status) {
 8002ca0:	f897 3695 	ldrb.w	r3, [r7, #1685]	; 0x695
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d113      	bne.n	8002cd0 <StartDefaultTask+0xff8>
			  		lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8002ca8:	4ca2      	ldr	r4, [pc, #648]	; (8002f34 <StartDefaultTask+0x125c>)
 8002caa:	4aa3      	ldr	r2, [pc, #652]	; (8002f38 <StartDefaultTask+0x1260>)
 8002cac:	ab2c      	add	r3, sp, #176	; 0xb0
 8002cae:	4611      	mov	r1, r2
 8002cb0:	22c0      	movs	r2, #192	; 0xc0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f012 ff62 	bl	8015b7c <memcpy>
 8002cb8:	4668      	mov	r0, sp
 8002cba:	f104 0310 	add.w	r3, r4, #16
 8002cbe:	22b0      	movs	r2, #176	; 0xb0
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	f012 ff5b 	bl	8015b7c <memcpy>
 8002cc6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002cca:	f001 fde5 	bl	8004898 <lowlayer_computeAndWritePulse>
		  break;
 8002cce:	e039      	b.n	8002d44 <StartDefaultTask+0x106c>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	f887 36e5 	strb.w	r3, [r7, #1765]	; 0x6e5
		  break;
 8002cd6:	e035      	b.n	8002d44 <StartDefaultTask+0x106c>

		  case SCARA_DUTY_STATE_FINISH:{
		  	current_duty_state = SCARA_DUTY_STATE_READY;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f887 36e5 	strb.w	r3, [r7, #1765]	; 0x6e5
			positionNext.t = 0;
 8002cde:	4a96      	ldr	r2, [pc, #600]	; (8002f38 <StartDefaultTask+0x1260>)
 8002ce0:	f04f 0300 	mov.w	r3, #0
 8002ce4:	f04f 0400 	mov.w	r4, #0
 8002ce8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
			positionNext.total_time = 0;
 8002cec:	4a92      	ldr	r2, [pc, #584]	; (8002f38 <StartDefaultTask+0x1260>)
 8002cee:	f04f 0300 	mov.w	r3, #0
 8002cf2:	f04f 0400 	mov.w	r4, #0
 8002cf6:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
			positionNext.q = 0;
 8002cfa:	4a8f      	ldr	r2, [pc, #572]	; (8002f38 <StartDefaultTask+0x1260>)
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	f04f 0400 	mov.w	r4, #0
 8002d04:	e9c2 3400 	strd	r3, r4, [r2]

			detail_array[0] = NONE;
 8002d08:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8002d0c:	2222      	movs	r2, #34	; 0x22
 8002d0e:	701a      	strb	r2, [r3, #0]
			respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002d10:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8002d14:	6899      	ldr	r1, [r3, #8]
 8002d16:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8002d1a:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 8002d1e:	4413      	add	r3, r2
 8002d20:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	2301      	movs	r3, #1
 8002d28:	2005      	movs	r0, #5
 8002d2a:	f7fe fe3b 	bl	80019a4 <commandRespond1>
 8002d2e:	f8c7 06bc 	str.w	r0, [r7, #1724]	; 0x6bc
			total_respond_length += respond_lenght;
 8002d32:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 8002d36:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
		  }
		  break;
 8002d40:	e000      	b.n	8002d44 <StartDefaultTask+0x106c>
		  
		  default:
			  break;
 8002d42:	bf00      	nop
		  }
	  }

	  break;
 8002d44:	e26d      	b.n	8003222 <StartDefaultTask+0x154a>
	  case SCARA_METHOD_TEST:
	  {
		  lowlayer_writePulse(test_value[0], test_value[1], test_value[2], test_value[3]);
 8002d46:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 8002d4a:	f993 0000 	ldrsb.w	r0, [r3]
 8002d4e:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 8002d52:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8002d56:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 8002d5a:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8002d5e:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 8002d62:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002d66:	f001 ff3b 	bl	8004be0 <lowlayer_writePulse>
	  }
	  break;
 8002d6a:	e25a      	b.n	8003222 <StartDefaultTask+0x154a>


	  case SCARA_METHOD_PICK_AND_PLACE:
	  {
		  switch(current_duty_state) {
 8002d6c:	f897 36e5 	ldrb.w	r3, [r7, #1765]	; 0x6e5
 8002d70:	3b01      	subs	r3, #1
 8002d72:	2b03      	cmp	r3, #3
 8002d74:	f200 8254 	bhi.w	8003220 <StartDefaultTask+0x1548>
 8002d78:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <StartDefaultTask+0x10a8>)
 8002d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7e:	bf00      	nop
 8002d80:	08002d91 	.word	0x08002d91
 8002d84:	08003139 	.word	0x08003139
 8002d88:	0800320f 	.word	0x0800320f
 8002d8c:	08002dd1 	.word	0x08002dd1
		  case SCARA_DUTY_STATE_INIT:{
			  Object = calloc(8, sizeof(SCARA_Pick_And_Place_Package));
 8002d90:	21c8      	movs	r1, #200	; 0xc8
 8002d92:	2008      	movs	r0, #8
 8002d94:	f012 feb0 	bl	8015af8 <calloc>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
			  object_tail_pointer = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f887 36ca 	strb.w	r3, [r7, #1738]	; 0x6ca
			  object_head_pointer = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	f887 36c9 	strb.w	r3, [r7, #1737]	; 0x6c9
			  operation_state = SCARA_MOVE_TO_TARGET;
 8002daa:	2300      	movs	r3, #0
 8002dac:	f887 36cb 	strb.w	r3, [r7, #1739]	; 0x6cb
			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8002db0:	2304      	movs	r3, #4
 8002db2:	f887 36e5 	strb.w	r3, [r7, #1765]	; 0x6e5
			  duty_cmd.robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8002db6:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8002dba:	2204      	movs	r2, #4
 8002dbc:	705a      	strb	r2, [r3, #1]
			  duty_cmd.path_type = DUTY_PATH_LINE;
 8002dbe:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	739a      	strb	r2, [r3, #14]
			  duty_cmd.space_type = DUTY_SPACE_TASK;
 8002dc6:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8002dca:	2200      	movs	r2, #0
 8002dcc:	735a      	strb	r2, [r3, #13]
		  }
		  break;
 8002dce:	e224      	b.n	800321a <StartDefaultTask+0x1542>

		  case SCARA_DUTY_STATE_OPERATION:{
			  if(object_tail_pointer != object_head_pointer){
 8002dd0:	f897 26ca 	ldrb.w	r2, [r7, #1738]	; 0x6ca
 8002dd4:	f897 36c9 	ldrb.w	r3, [r7, #1737]	; 0x6c9
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	f000 821d 	beq.w	8003218 <StartDefaultTask+0x1540>
				  switch(operation_state){
 8002dde:	f897 36cb 	ldrb.w	r3, [r7, #1739]	; 0x6cb
 8002de2:	2b06      	cmp	r3, #6
 8002de4:	f200 813d 	bhi.w	8003062 <StartDefaultTask+0x138a>
 8002de8:	a201      	add	r2, pc, #4	; (adr r2, 8002df0 <StartDefaultTask+0x1118>)
 8002dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dee:	bf00      	nop
 8002df0:	08002e0d 	.word	0x08002e0d
 8002df4:	08002edd 	.word	0x08002edd
 8002df8:	08002f07 	.word	0x08002f07
 8002dfc:	08002f55 	.word	0x08002f55
 8002e00:	08002ff9 	.word	0x08002ff9
 8002e04:	08003023 	.word	0x08003023
 8002e08:	08003039 	.word	0x08003039
					  case SCARA_MOVE_TO_TARGET:{
						  double wait_time = TIMER_SCALE*((uint16_t)(TIM2->CNT - Object[object_tail_pointer].timer_value)) + MOVE_TIME + PUT_DOWN_TIME;
 8002e0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	f897 36ca 	ldrb.w	r3, [r7, #1738]	; 0x6ca
 8002e18:	21c8      	movs	r1, #200	; 0xc8
 8002e1a:	fb01 f303 	mul.w	r3, r1, r3
 8002e1e:	f8d7 16cc 	ldr.w	r1, [r7, #1740]	; 0x6cc
 8002e22:	440b      	add	r3, r1
 8002e24:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	ee07 3a90 	vmov	s15, r3
 8002e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e34:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002f3c <StartDefaultTask+0x1264>
 8002e38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e3c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002f40 <StartDefaultTask+0x1268>
 8002e40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e4c:	ee17 0a90 	vmov	r0, s15
 8002e50:	f7fd fb7a 	bl	8000548 <__aeabi_f2d>
 8002e54:	4603      	mov	r3, r0
 8002e56:	460c      	mov	r4, r1
 8002e58:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8002e5c:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.y += wait_time*conveyor_speed;
 8002e60:	f897 36ca 	ldrb.w	r3, [r7, #1738]	; 0x6ca
 8002e64:	22c8      	movs	r2, #200	; 0xc8
 8002e66:	fb02 f303 	mul.w	r3, r2, r3
 8002e6a:	f8d7 26cc 	ldr.w	r2, [r7, #1740]	; 0x6cc
 8002e6e:	4413      	add	r3, r2
 8002e70:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002e74:	4b33      	ldr	r3, [pc, #204]	; (8002f44 <StartDefaultTask+0x126c>)
 8002e76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e7a:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8002e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e82:	f7fd fbb9 	bl	80005f8 <__aeabi_dmul>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	f897 36ca 	ldrb.w	r3, [r7, #1738]	; 0x6ca
 8002e92:	22c8      	movs	r2, #200	; 0xc8
 8002e94:	fb02 f303 	mul.w	r3, r2, r3
 8002e98:	f8d7 26cc 	ldr.w	r2, [r7, #1740]	; 0x6cc
 8002e9c:	18d6      	adds	r6, r2, r3
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	f7fd f9f1 	bl	800028c <__adddf3>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	460c      	mov	r4, r1
 8002eae:	e9c6 3414 	strd	r3, r4, [r6, #80]	; 0x50
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8002eb2:	f897 36ca 	ldrb.w	r3, [r7, #1738]	; 0x6ca
 8002eb6:	22c8      	movs	r2, #200	; 0xc8
 8002eb8:	fb02 f303 	mul.w	r3, r2, r3
 8002ebc:	f8d7 26cc 	ldr.w	r2, [r7, #1740]	; 0x6cc
 8002ec0:	441a      	add	r2, r3
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	4c20      	ldr	r4, [pc, #128]	; (8002f48 <StartDefaultTask+0x1270>)
 8002ec8:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
						  state_time = MOVE_TIME;
 8002ecc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ed0:	4c1e      	ldr	r4, [pc, #120]	; (8002f4c <StartDefaultTask+0x1274>)
 8002ed2:	f507 62d8 	add.w	r2, r7, #1728	; 0x6c0
 8002ed6:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8002eda:	e0c2      	b.n	8003062 <StartDefaultTask+0x138a>

					  case SCARA_MOVE_DOWN_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_OBJECT;
 8002edc:	f897 36ca 	ldrb.w	r3, [r7, #1738]	; 0x6ca
 8002ee0:	22c8      	movs	r2, #200	; 0xc8
 8002ee2:	fb02 f303 	mul.w	r3, r2, r3
 8002ee6:	f8d7 26cc 	ldr.w	r2, [r7, #1740]	; 0x6cc
 8002eea:	441a      	add	r2, r3
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	4c17      	ldr	r4, [pc, #92]	; (8002f50 <StartDefaultTask+0x1278>)
 8002ef2:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
						  state_time = DOWN_HEIGHT_ON_OBJECT;
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	4c15      	ldr	r4, [pc, #84]	; (8002f50 <StartDefaultTask+0x1278>)
 8002efc:	f507 62d8 	add.w	r2, r7, #1728	; 0x6c0
 8002f00:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8002f04:	e0ad      	b.n	8003062 <StartDefaultTask+0x138a>
					  case SCARA_ATTACH:{
						  state_time = ATTACH_TIME;
 8002f06:	a408      	add	r4, pc, #32	; (adr r4, 8002f28 <StartDefaultTask+0x1250>)
 8002f08:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002f0c:	f507 62d8 	add.w	r2, r7, #1728	; 0x6c0
 8002f10:	e9c2 3400 	strd	r3, r4, [r2]
						  scaraSetOutput(1);
 8002f14:	2001      	movs	r0, #1
 8002f16:	f007 fab3 	bl	800a480 <scaraSetOutput>
					  }
					  break;
 8002f1a:	e0a2      	b.n	8003062 <StartDefaultTask+0x138a>
 8002f1c:	f3af 8000 	nop.w
 8002f20:	40000000 	.word	0x40000000
 8002f24:	3f847ae1 	.word	0x3f847ae1
 8002f28:	a0000000 	.word	0xa0000000
 8002f2c:	3fb99999 	.word	0x3fb99999
 8002f30:	0801b178 	.word	0x0801b178
 8002f34:	20005ae8 	.word	0x20005ae8
 8002f38:	20005c68 	.word	0x20005c68
 8002f3c:	399c09bf 	.word	0x399c09bf
 8002f40:	3f99999a 	.word	0x3f99999a
 8002f44:	20000ba0 	.word	0x20000ba0
 8002f48:	40590000 	.word	0x40590000
 8002f4c:	3ff33333 	.word	0x3ff33333
 8002f50:	40440000 	.word	0x40440000
					  case SCARA_MOVE_TO_SLOT :{
						  // handle later when define the slot cordinate
						  Object[object_tail_pointer].object_position.x = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].posx;
 8002f54:	f897 36ca 	ldrb.w	r3, [r7, #1738]	; 0x6ca
 8002f58:	22c8      	movs	r2, #200	; 0xc8
 8002f5a:	fb02 f303 	mul.w	r3, r2, r3
 8002f5e:	f8d7 26cc 	ldr.w	r2, [r7, #1740]	; 0x6cc
 8002f62:	4413      	add	r3, r2
 8002f64:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f897 36ca 	ldrb.w	r3, [r7, #1738]	; 0x6ca
 8002f6e:	22c8      	movs	r2, #200	; 0xc8
 8002f70:	fb02 f303 	mul.w	r3, r2, r3
 8002f74:	f8d7 26cc 	ldr.w	r2, [r7, #1740]	; 0x6cc
 8002f78:	441a      	add	r2, r3
 8002f7a:	f107 0118 	add.w	r1, r7, #24
 8002f7e:	4603      	mov	r3, r0
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	4403      	add	r3, r0
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	440b      	add	r3, r1
 8002f88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f8c:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
						  Object[object_tail_pointer].object_position.y = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].posy;;
 8002f90:	f897 36ca 	ldrb.w	r3, [r7, #1738]	; 0x6ca
 8002f94:	22c8      	movs	r2, #200	; 0xc8
 8002f96:	fb02 f303 	mul.w	r3, r2, r3
 8002f9a:	f8d7 26cc 	ldr.w	r2, [r7, #1740]	; 0x6cc
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f897 36ca 	ldrb.w	r3, [r7, #1738]	; 0x6ca
 8002faa:	22c8      	movs	r2, #200	; 0xc8
 8002fac:	fb02 f303 	mul.w	r3, r2, r3
 8002fb0:	f8d7 26cc 	ldr.w	r2, [r7, #1740]	; 0x6cc
 8002fb4:	441a      	add	r2, r3
 8002fb6:	f107 0118 	add.w	r1, r7, #24
 8002fba:	4603      	mov	r3, r0
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	4403      	add	r3, r0
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	440b      	add	r3, r1
 8002fc4:	3308      	adds	r3, #8
 8002fc6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002fca:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8002fce:	f897 36ca 	ldrb.w	r3, [r7, #1738]	; 0x6ca
 8002fd2:	22c8      	movs	r2, #200	; 0xc8
 8002fd4:	fb02 f303 	mul.w	r3, r2, r3
 8002fd8:	f8d7 26cc 	ldr.w	r2, [r7, #1740]	; 0x6cc
 8002fdc:	441a      	add	r2, r3
 8002fde:	f04f 0300 	mov.w	r3, #0
 8002fe2:	4ca5      	ldr	r4, [pc, #660]	; (8003278 <StartDefaultTask+0x15a0>)
 8002fe4:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
						  state_time = MOVE_TIME;
 8002fe8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fec:	4ca3      	ldr	r4, [pc, #652]	; (800327c <StartDefaultTask+0x15a4>)
 8002fee:	f507 62d8 	add.w	r2, r7, #1728	; 0x6c0
 8002ff2:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8002ff6:	e034      	b.n	8003062 <StartDefaultTask+0x138a>
					  case SCARA_MOVE_DOWN_ON_SLOT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_SLOT;
 8002ff8:	f897 36ca 	ldrb.w	r3, [r7, #1738]	; 0x6ca
 8002ffc:	22c8      	movs	r2, #200	; 0xc8
 8002ffe:	fb02 f303 	mul.w	r3, r2, r3
 8003002:	f8d7 26cc 	ldr.w	r2, [r7, #1740]	; 0x6cc
 8003006:	441a      	add	r2, r3
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	4c9c      	ldr	r4, [pc, #624]	; (8003280 <StartDefaultTask+0x15a8>)
 800300e:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
						  state_time = DOWN_HEIGHT_ON_OBJECT;
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	4c9a      	ldr	r4, [pc, #616]	; (8003280 <StartDefaultTask+0x15a8>)
 8003018:	f507 62d8 	add.w	r2, r7, #1728	; 0x6c0
 800301c:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8003020:	e01f      	b.n	8003062 <StartDefaultTask+0x138a>
					  case SCARA_RELEASE:{
						  state_time = DETACH_TIME;
 8003022:	a491      	add	r4, pc, #580	; (adr r4, 8003268 <StartDefaultTask+0x1590>)
 8003024:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003028:	f507 62d8 	add.w	r2, r7, #1728	; 0x6c0
 800302c:	e9c2 3400 	strd	r3, r4, [r2]
						  scaraSetOutput(0);
 8003030:	2000      	movs	r0, #0
 8003032:	f007 fa25 	bl	800a480 <scaraSetOutput>
					  }
					  break;
 8003036:	e014      	b.n	8003062 <StartDefaultTask+0x138a>
					  case SCARA_MOVE_UP:{
						  state_time = PICK_UP_TIME;
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	4c91      	ldr	r4, [pc, #580]	; (8003284 <StartDefaultTask+0x15ac>)
 800303e:	f507 62d8 	add.w	r2, r7, #1728	; 0x6c0
 8003042:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003046:	f897 36ca 	ldrb.w	r3, [r7, #1738]	; 0x6ca
 800304a:	22c8      	movs	r2, #200	; 0xc8
 800304c:	fb02 f303 	mul.w	r3, r2, r3
 8003050:	f8d7 26cc 	ldr.w	r2, [r7, #1740]	; 0x6cc
 8003054:	441a      	add	r2, r3
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	4c87      	ldr	r4, [pc, #540]	; (8003278 <StartDefaultTask+0x15a0>)
 800305c:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
					  }
					  break;
 8003060:	bf00      	nop
				  }
				  memcpy(&duty_cmd.target_point, &Object[object_tail_pointer].object_position, sizeof(SCARA_PositionTypeDef));
 8003062:	f897 36ca 	ldrb.w	r3, [r7, #1738]	; 0x6ca
 8003066:	22c8      	movs	r2, #200	; 0xc8
 8003068:	fb02 f303 	mul.w	r3, r2, r3
 800306c:	f8d7 26cc 	ldr.w	r2, [r7, #1740]	; 0x6cc
 8003070:	4413      	add	r3, r2
 8003072:	4619      	mov	r1, r3
 8003074:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8003078:	3328      	adds	r3, #40	; 0x28
 800307a:	22c0      	movs	r2, #192	; 0xc0
 800307c:	4618      	mov	r0, r3
 800307e:	f012 fd7d 	bl	8015b7c <memcpy>
				  duty_cmd.time_total = state_time;
 8003082:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8003086:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800308a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800308e:	e9c2 3408 	strd	r3, r4, [r2, #32]
				  SCARA_StatusTypeDef status1;
				  status1 = scaraInitDuty(duty_cmd);
 8003092:	f507 6498 	add.w	r4, r7, #1216	; 0x4c0
 8003096:	4668      	mov	r0, sp
 8003098:	f104 0310 	add.w	r3, r4, #16
 800309c:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80030a0:	4619      	mov	r1, r3
 80030a2:	f012 fd6b 	bl	8015b7c <memcpy>
 80030a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80030aa:	f002 f8bd 	bl	8005228 <scaraInitDuty>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f887 3697 	strb.w	r3, [r7, #1687]	; 0x697
				  if ( SCARA_STATUS_OK == status1) {
 80030b4:	f897 3697 	ldrb.w	r3, [r7, #1687]	; 0x697
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10b      	bne.n	80030d4 <StartDefaultTask+0x13fc>
				  	current_duty_state = SCARA_DUTY_STATE_FLOW;
 80030bc:	2302      	movs	r3, #2
 80030be:	f887 36e5 	strb.w	r3, [r7, #1765]	; 0x6e5
				  	run_time = 0;
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	f04f 0400 	mov.w	r4, #0
 80030ca:	f507 62da 	add.w	r2, r7, #1744	; 0x6d0
 80030ce:	e9c2 3400 	strd	r3, r4, [r2]
 80030d2:	e031      	b.n	8003138 <StartDefaultTask+0x1460>
				  } else {
					object_tail_pointer = (object_tail_pointer+1)%8;
 80030d4:	f897 36ca 	ldrb.w	r3, [r7, #1738]	; 0x6ca
 80030d8:	3301      	adds	r3, #1
 80030da:	425a      	negs	r2, r3
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	f002 0207 	and.w	r2, r2, #7
 80030e4:	bf58      	it	pl
 80030e6:	4253      	negpl	r3, r2
 80030e8:	f887 36ca 	strb.w	r3, [r7, #1738]	; 0x6ca
					operation_state = SCARA_MOVE_TO_TARGET;
 80030ec:	2300      	movs	r3, #0
 80030ee:	f887 36cb 	strb.w	r3, [r7, #1739]	; 0x6cb
					detail_array[0] = status1;
 80030f2:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 80030f6:	f897 2697 	ldrb.w	r2, [r7, #1687]	; 0x697
 80030fa:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80030fc:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8003100:	6899      	ldr	r1, [r3, #8]
 8003102:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8003106:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 800310a:	4413      	add	r3, r2
 800310c:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	2301      	movs	r3, #1
 8003114:	2007      	movs	r0, #7
 8003116:	f7fe fc45 	bl	80019a4 <commandRespond1>
 800311a:	f8c7 06bc 	str.w	r0, [r7, #1724]	; 0x6bc
					total_respond_length += respond_lenght;
 800311e:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 8003122:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8003126:	4413      	add	r3, r2
 8003128:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
					LOG_REPORT("INIT FAIL", __LINE__);
 800312c:	f240 31bb 	movw	r1, #955	; 0x3bb
 8003130:	4855      	ldr	r0, [pc, #340]	; (8003288 <StartDefaultTask+0x15b0>)
 8003132:	f7fe fc87 	bl	8001a44 <LOG_REPORT>
					break;
 8003136:	e070      	b.n	800321a <StartDefaultTask+0x1542>


		  case SCARA_DUTY_STATE_FLOW:{
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 8003138:	a34d      	add	r3, pc, #308	; (adr r3, 8003270 <StartDefaultTask+0x1598>)
 800313a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313e:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 8003142:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003146:	f7fd f8a1 	bl	800028c <__adddf3>
 800314a:	4603      	mov	r3, r0
 800314c:	460c      	mov	r4, r1
 800314e:	f507 62da 	add.w	r2, r7, #1744	; 0x6d0
 8003152:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8003156:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800315a:	ed93 0b00 	vldr	d0, [r3]
 800315e:	f007 fa21 	bl	800a5a4 <scaraIsFinish>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d022      	beq.n	80031ae <StartDefaultTask+0x14d6>
				current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003168:	2304      	movs	r3, #4
 800316a:	f887 36e5 	strb.w	r3, [r7, #1765]	; 0x6e5
				if(operation_state == SCARA_MOVE_UP){
 800316e:	f897 36cb 	ldrb.w	r3, [r7, #1739]	; 0x6cb
 8003172:	2b06      	cmp	r3, #6
 8003174:	d10f      	bne.n	8003196 <StartDefaultTask+0x14be>
					operation_state = SCARA_MOVE_TO_TARGET;
 8003176:	2300      	movs	r3, #0
 8003178:	f887 36cb 	strb.w	r3, [r7, #1739]	; 0x6cb
					object_tail_pointer = (object_tail_pointer+1)%8;
 800317c:	f897 36ca 	ldrb.w	r3, [r7, #1738]	; 0x6ca
 8003180:	3301      	adds	r3, #1
 8003182:	425a      	negs	r2, r3
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	f002 0207 	and.w	r2, r2, #7
 800318c:	bf58      	it	pl
 800318e:	4253      	negpl	r3, r2
 8003190:	f887 36ca 	strb.w	r3, [r7, #1738]	; 0x6ca
 8003194:	e004      	b.n	80031a0 <StartDefaultTask+0x14c8>
				}else{
					operation_state += 1; //next state
 8003196:	f897 36cb 	ldrb.w	r3, [r7, #1739]	; 0x6cb
 800319a:	3301      	adds	r3, #1
 800319c:	f887 36cb 	strb.w	r3, [r7, #1739]	; 0x6cb
				}
				lowlayer_readTruePosition(&positionNext);
 80031a0:	483a      	ldr	r0, [pc, #232]	; (800328c <StartDefaultTask+0x15b4>)
 80031a2:	f001 f9e9 	bl	8004578 <lowlayer_readTruePosition>
				kinematicForward(&positionNext);
 80031a6:	4839      	ldr	r0, [pc, #228]	; (800328c <StartDefaultTask+0x15b4>)
 80031a8:	f000 faf2 	bl	8003790 <kinematicForward>
				  }else{
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
				  }
			  }
		  }
		  break;
 80031ac:	e035      	b.n	800321a <StartDefaultTask+0x1542>
				status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 80031ae:	4c38      	ldr	r4, [pc, #224]	; (8003290 <StartDefaultTask+0x15b8>)
 80031b0:	4668      	mov	r0, sp
 80031b2:	f104 0308 	add.w	r3, r4, #8
 80031b6:	22b8      	movs	r2, #184	; 0xb8
 80031b8:	4619      	mov	r1, r3
 80031ba:	f012 fcdf 	bl	8015b7c <memcpy>
 80031be:	e894 000c 	ldmia.w	r4, {r2, r3}
 80031c2:	4832      	ldr	r0, [pc, #200]	; (800328c <StartDefaultTask+0x15b4>)
 80031c4:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 80031c8:	ed91 0b00 	vldr	d0, [r1]
 80031cc:	f005 f86a 	bl	80082a4 <scaraFlowDuty>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f887 3696 	strb.w	r3, [r7, #1686]	; 0x696
				if ( SCARA_STATUS_OK == status) {
 80031d6:	f897 3696 	ldrb.w	r3, [r7, #1686]	; 0x696
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d113      	bne.n	8003206 <StartDefaultTask+0x152e>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 80031de:	4c2c      	ldr	r4, [pc, #176]	; (8003290 <StartDefaultTask+0x15b8>)
 80031e0:	4a2a      	ldr	r2, [pc, #168]	; (800328c <StartDefaultTask+0x15b4>)
 80031e2:	ab2c      	add	r3, sp, #176	; 0xb0
 80031e4:	4611      	mov	r1, r2
 80031e6:	22c0      	movs	r2, #192	; 0xc0
 80031e8:	4618      	mov	r0, r3
 80031ea:	f012 fcc7 	bl	8015b7c <memcpy>
 80031ee:	4668      	mov	r0, sp
 80031f0:	f104 0310 	add.w	r3, r4, #16
 80031f4:	22b0      	movs	r2, #176	; 0xb0
 80031f6:	4619      	mov	r1, r3
 80031f8:	f012 fcc0 	bl	8015b7c <memcpy>
 80031fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003200:	f001 fb4a 	bl	8004898 <lowlayer_computeAndWritePulse>
		  break;
 8003204:	e009      	b.n	800321a <StartDefaultTask+0x1542>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003206:	2303      	movs	r3, #3
 8003208:	f887 36e5 	strb.w	r3, [r7, #1765]	; 0x6e5
		  break;
 800320c:	e005      	b.n	800321a <StartDefaultTask+0x1542>

		  case SCARA_DUTY_STATE_FINISH:
			  //error
			  free(Object);
 800320e:	f8d7 06cc 	ldr.w	r0, [r7, #1740]	; 0x6cc
 8003212:	f012 fcab 	bl	8015b6c <free>
		  break;
 8003216:	e000      	b.n	800321a <StartDefaultTask+0x1542>
				  break;
 8003218:	bf00      	nop
		  }
	  }
	  break;
 800321a:	e001      	b.n	8003220 <StartDefaultTask+0x1548>
	  break;
 800321c:	bf00      	nop
 800321e:	e000      	b.n	8003222 <StartDefaultTask+0x154a>
	  break;
 8003220:	bf00      	nop
	//   // Send through USB
	//   if (usb_lenght > 0) {
	// 	  CDC_Transmit_FS(usb_buff, (uint16_t)usb_lenght);
	//   }

	if(total_respond_length > 0){
 8003222:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 8003226:	2b00      	cmp	r3, #0
 8003228:	dd08      	ble.n	800323c <StartDefaultTask+0x1564>
		CDC_Transmit_FS(respond, total_respond_length);
 800322a:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 800322e:	b29a      	uxth	r2, r3
 8003230:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8003234:	4611      	mov	r1, r2
 8003236:	4618      	mov	r0, r3
 8003238:	f012 f81c 	bl	8015274 <CDC_Transmit_FS>
	}

	  /* 5--- Update ---*/
	  scaraSetMethod(current_method);
 800323c:	f897 36e7 	ldrb.w	r3, [r7, #1767]	; 0x6e7
 8003240:	4618      	mov	r0, r3
 8003242:	f007 f94f 	bl	800a4e4 <scaraSetMethod>
	  scaraSetMode(current_mode);
 8003246:	f897 36e6 	ldrb.w	r3, [r7, #1766]	; 0x6e6
 800324a:	4618      	mov	r0, r3
 800324c:	f007 f93a 	bl	800a4c4 <scaraSetMode>
	  scaraSetDutyState(current_duty_state);
 8003250:	f897 36e5 	ldrb.w	r3, [r7, #1765]	; 0x6e5
 8003254:	4618      	mov	r0, r3
 8003256:	f007 f925 	bl	800a4a4 <scaraSetDutyState>

    osDelay(1);
 800325a:	2001      	movs	r0, #1
 800325c:	f00f f924 	bl	80124a8 <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 8003260:	f7fe bdd6 	b.w	8001e10 <StartDefaultTask+0x138>
 8003264:	f3af 8000 	nop.w
 8003268:	a0000000 	.word	0xa0000000
 800326c:	3fb99999 	.word	0x3fb99999
 8003270:	40000000 	.word	0x40000000
 8003274:	3f847ae1 	.word	0x3f847ae1
 8003278:	40590000 	.word	0x40590000
 800327c:	3ff33333 	.word	0x3ff33333
 8003280:	40440000 	.word	0x40440000
 8003284:	3ff00000 	.word	0x3ff00000
 8003288:	0801b178 	.word	0x0801b178
 800328c:	20005c68 	.word	0x20005c68
 8003290:	20005ae8 	.word	0x20005ae8

08003294 <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 8003294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003296:	f2ad 5d6c 	subw	sp, sp, #1388	; 0x56c
 800329a:	af70      	add	r7, sp, #448	; 0x1c0
 800329c:	1d3b      	adds	r3, r7, #4
 800329e:	6018      	str	r0, [r3, #0]
	int32_t				respond_lenght;
	int32_t				message_lenght;
	int32_t 			detail_length;

	// Default value
	duty_cmd.key_speed = 1;
 80032a0:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80032a4:	2201      	movs	r2, #1
 80032a6:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 80032a8:	2129      	movs	r1, #41	; 0x29
 80032aa:	4868      	ldr	r0, [pc, #416]	; (800344c <Start_USB_RX_Task+0x1b8>)
 80032ac:	f000 fefe 	bl	80040ac <ringBuff_DistanceOf>
 80032b0:	f8c7 03a0 	str.w	r0, [r7, #928]	; 0x3a0
		  if ( -1 != distance ) {
 80032b4:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d0f4      	beq.n	80032a8 <Start_USB_RX_Task+0x14>
 80032be:	466b      	mov	r3, sp
 80032c0:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 80032c2:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80032c6:	1c58      	adds	r0, r3, #1
 80032c8:	1e43      	subs	r3, r0, #1
 80032ca:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 80032ce:	4603      	mov	r3, r0
 80032d0:	4619      	mov	r1, r3
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	f04f 0400 	mov.w	r4, #0
 80032de:	00d4      	lsls	r4, r2, #3
 80032e0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80032e4:	00cb      	lsls	r3, r1, #3
 80032e6:	4603      	mov	r3, r0
 80032e8:	4619      	mov	r1, r3
 80032ea:	f04f 0200 	mov.w	r2, #0
 80032ee:	f04f 0300 	mov.w	r3, #0
 80032f2:	f04f 0400 	mov.w	r4, #0
 80032f6:	00d4      	lsls	r4, r2, #3
 80032f8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80032fc:	00cb      	lsls	r3, r1, #3
 80032fe:	4603      	mov	r3, r0
 8003300:	3307      	adds	r3, #7
 8003302:	08db      	lsrs	r3, r3, #3
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	ebad 0d03 	sub.w	sp, sp, r3
 800330a:	ab70      	add	r3, sp, #448	; 0x1c0
 800330c:	3300      	adds	r3, #0
 800330e:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 8003312:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 8003316:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800331a:	3301      	adds	r3, #1
 800331c:	461a      	mov	r2, r3
 800331e:	484b      	ldr	r0, [pc, #300]	; (800344c <Start_USB_RX_Task+0x1b8>)
 8003320:	f000 fea3 	bl	800406a <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1);
 8003324:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 8003328:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800332c:	3301      	adds	r3, #1
 800332e:	4619      	mov	r1, r3
 8003330:	4610      	mov	r0, r2
 8003332:	f7fe fbcd 	bl	8001ad0 <unPackPayload>
 8003336:	f8c7 0394 	str.w	r0, [r7, #916]	; 0x394
			  if( -1 == ret) {
 800333a:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 800333e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003342:	d105      	bne.n	8003350 <Start_USB_RX_Task+0xbc>
				  LOG_REPORT("UNPACK FAIL", __LINE__);
 8003344:	f240 4135 	movw	r1, #1077	; 0x435
 8003348:	4841      	ldr	r0, [pc, #260]	; (8003450 <Start_USB_RX_Task+0x1bc>)
 800334a:	f7fe fb7b 	bl	8001a44 <LOG_REPORT>
 800334e:	e07a      	b.n	8003446 <Start_USB_RX_Task+0x1b2>
			  } else {
				  LOG_REPORT((char*) temp, __LINE__);
 8003350:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 8003354:	f240 4137 	movw	r1, #1079	; 0x437
 8003358:	4618      	mov	r0, r3
 800335a:	f7fe fb73 	bl	8001a44 <LOG_REPORT>
				  cmd_type = commandRead(temp, ret, &id_command, &duty_cmd);
 800335e:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 8003362:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8003366:	f507 7261 	add.w	r2, r7, #900	; 0x384
 800336a:	f8d7 1394 	ldr.w	r1, [r7, #916]	; 0x394
 800336e:	f7fd fe0b 	bl	8000f88 <commandRead>
 8003372:	4603      	mov	r3, r0
 8003374:	f887 3393 	strb.w	r3, [r7, #915]	; 0x393
				  memset(detail, 0, sizeof(detail));
 8003378:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800337c:	2287      	movs	r2, #135	; 0x87
 800337e:	2100      	movs	r1, #0
 8003380:	4618      	mov	r0, r3
 8003382:	f012 fc1f 	bl	8015bc4 <memset>
				  detail_length = 0;
 8003386:	f107 0308 	add.w	r3, r7, #8
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]
				  rpd_type = commandReply(cmd_type, duty_cmd, detail, &detail_length);
 800338e:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
 8003392:	f897 5393 	ldrb.w	r5, [r7, #915]	; 0x393
 8003396:	f107 0308 	add.w	r3, r7, #8
 800339a:	936f      	str	r3, [sp, #444]	; 0x1bc
 800339c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80033a0:	936e      	str	r3, [sp, #440]	; 0x1b8
 80033a2:	4668      	mov	r0, sp
 80033a4:	f104 0308 	add.w	r3, r4, #8
 80033a8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80033ac:	4619      	mov	r1, r3
 80033ae:	f012 fbe5 	bl	8015b7c <memcpy>
 80033b2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80033b6:	4628      	mov	r0, r5
 80033b8:	f7fe f940 	bl	800163c <commandReply>
 80033bc:	4603      	mov	r3, r0
 80033be:	f887 3392 	strb.w	r3, [r7, #914]	; 0x392

				  if ( RPD_DUTY == rpd_type) {
 80033c2:	f897 3392 	ldrb.w	r3, [r7, #914]	; 0x392
 80033c6:	2b09      	cmp	r3, #9
 80033c8:	d123      	bne.n	8003412 <Start_USB_RX_Task+0x17e>
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
					  // Wait allocate
					  while (dataMail == NULL) {
 80033d0:	e008      	b.n	80033e4 <Start_USB_RX_Task+0x150>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 80033d2:	4b20      	ldr	r3, [pc, #128]	; (8003454 <Start_USB_RX_Task+0x1c0>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f04f 31ff 	mov.w	r1, #4294967295
 80033da:	4618      	mov	r0, r3
 80033dc:	f00f fa74 	bl	80128c8 <osMailAlloc>
 80033e0:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
					  while (dataMail == NULL) {
 80033e4:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0f2      	beq.n	80033d2 <Start_USB_RX_Task+0x13e>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 80033ec:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80033f0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80033f4:	4619      	mov	r1, r3
 80033f6:	f8d7 03a4 	ldr.w	r0, [r7, #932]	; 0x3a4
 80033fa:	f012 fbbf 	bl	8015b7c <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 80033fe:	4b15      	ldr	r3, [pc, #84]	; (8003454 <Start_USB_RX_Task+0x1c0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f8d7 13a4 	ldr.w	r1, [r7, #932]	; 0x3a4
 8003406:	4618      	mov	r0, r3
 8003408:	f00f fa74 	bl	80128f4 <osMailPut>
 800340c:	f8c7 0388 	str.w	r0, [r7, #904]	; 0x388
 8003410:	e019      	b.n	8003446 <Start_USB_RX_Task+0x1b2>
				//   }else if( RPD_POSITION == rpd_type) { 
				// 	  CDC_Transmit_FS(detail, 84);
				  }else {
					//   memset(respond, 0, sizeof(respond));
					//   memset(message, 0, sizeof(message));
					  respond_lenght	= commandRespond1(rpd_type, cmd_type,
 8003412:	f897 1393 	ldrb.w	r1, [r7, #915]	; 0x393
 8003416:	f107 0308 	add.w	r3, r7, #8
 800341a:	681c      	ldr	r4, [r3, #0]
 800341c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003420:	f897 0392 	ldrb.w	r0, [r7, #914]	; 0x392
 8003424:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	4623      	mov	r3, r4
 800342c:	f7fe faba 	bl	80019a4 <commandRespond1>
 8003430:	f8c7 038c 	str.w	r0, [r7, #908]	; 0x38c
							  	  	  	  (char *)detail, detail_length,
										  (char *)respond);
					  //message_lenght	= packPayload(respond, message, respond_lenght);
					  CDC_Transmit_FS(respond, respond_lenght);
 8003434:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8003438:	b29a      	uxth	r2, r3
 800343a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800343e:	4611      	mov	r1, r2
 8003440:	4618      	mov	r0, r3
 8003442:	f011 ff17 	bl	8015274 <CDC_Transmit_FS>
 8003446:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 8003448:	e72e      	b.n	80032a8 <Start_USB_RX_Task+0x14>
 800344a:	bf00      	nop
 800344c:	20000004 	.word	0x20000004
 8003450:	0801b1a0 	.word	0x0801b1a0
 8003454:	20004e6c 	.word	0x20004e6c

08003458 <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	b292      	uxth	r2, r2
 8003468:	801a      	strh	r2, [r3, #0]
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	b29b      	uxth	r3, r3
}
 8003484:	4618      	mov	r0, r3
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8003496:	1d3b      	adds	r3, r7, #4
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	60da      	str	r2, [r3, #12]
 80034a2:	611a      	str	r2, [r3, #16]
 80034a4:	615a      	str	r2, [r3, #20]
 80034a6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 80034a8:	4b27      	ldr	r3, [pc, #156]	; (8003548 <MX_FSMC_Init+0xb8>)
 80034aa:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80034ae:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80034b0:	4b25      	ldr	r3, [pc, #148]	; (8003548 <MX_FSMC_Init+0xb8>)
 80034b2:	4a26      	ldr	r2, [pc, #152]	; (800354c <MX_FSMC_Init+0xbc>)
 80034b4:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80034b6:	4b24      	ldr	r3, [pc, #144]	; (8003548 <MX_FSMC_Init+0xb8>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 80034bc:	4b22      	ldr	r3, [pc, #136]	; (8003548 <MX_FSMC_Init+0xb8>)
 80034be:	2202      	movs	r2, #2
 80034c0:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 80034c2:	4b21      	ldr	r3, [pc, #132]	; (8003548 <MX_FSMC_Init+0xb8>)
 80034c4:	2208      	movs	r2, #8
 80034c6:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80034c8:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <MX_FSMC_Init+0xb8>)
 80034ca:	2210      	movs	r2, #16
 80034cc:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80034ce:	4b1e      	ldr	r3, [pc, #120]	; (8003548 <MX_FSMC_Init+0xb8>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80034d4:	4b1c      	ldr	r3, [pc, #112]	; (8003548 <MX_FSMC_Init+0xb8>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80034da:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <MX_FSMC_Init+0xb8>)
 80034dc:	2200      	movs	r2, #0
 80034de:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80034e0:	4b19      	ldr	r3, [pc, #100]	; (8003548 <MX_FSMC_Init+0xb8>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80034e6:	4b18      	ldr	r3, [pc, #96]	; (8003548 <MX_FSMC_Init+0xb8>)
 80034e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034ec:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80034ee:	4b16      	ldr	r3, [pc, #88]	; (8003548 <MX_FSMC_Init+0xb8>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80034f4:	4b14      	ldr	r3, [pc, #80]	; (8003548 <MX_FSMC_Init+0xb8>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80034fa:	4b13      	ldr	r3, [pc, #76]	; (8003548 <MX_FSMC_Init+0xb8>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8003500:	4b11      	ldr	r3, [pc, #68]	; (8003548 <MX_FSMC_Init+0xb8>)
 8003502:	2200      	movs	r2, #0
 8003504:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8003506:	4b10      	ldr	r3, [pc, #64]	; (8003548 <MX_FSMC_Init+0xb8>)
 8003508:	2200      	movs	r2, #0
 800350a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800350c:	230f      	movs	r3, #15
 800350e:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8003510:	230f      	movs	r3, #15
 8003512:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8003514:	23ff      	movs	r3, #255	; 0xff
 8003516:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8003518:	230f      	movs	r3, #15
 800351a:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800351c:	2310      	movs	r3, #16
 800351e:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8003520:	2311      	movs	r3, #17
 8003522:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8003524:	2300      	movs	r3, #0
 8003526:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8003528:	1d3b      	adds	r3, r7, #4
 800352a:	2200      	movs	r2, #0
 800352c:	4619      	mov	r1, r3
 800352e:	4806      	ldr	r0, [pc, #24]	; (8003548 <MX_FSMC_Init+0xb8>)
 8003530:	f008 fdc2 	bl	800c0b8 <HAL_NOR_Init>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 800353a:	f000 fcf7 	bl	8003f2c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800353e:	bf00      	nop
 8003540:	3720      	adds	r7, #32
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20004e74 	.word	0x20004e74
 800354c:	a0000104 	.word	0xa0000104

08003550 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003556:	1d3b      	adds	r3, r7, #4
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	605a      	str	r2, [r3, #4]
 800355e:	609a      	str	r2, [r3, #8]
 8003560:	60da      	str	r2, [r3, #12]
 8003562:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8003564:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <HAL_FSMC_MspInit+0xa8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d140      	bne.n	80035ee <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 800356c:	4b22      	ldr	r3, [pc, #136]	; (80035f8 <HAL_FSMC_MspInit+0xa8>)
 800356e:	2201      	movs	r2, #1
 8003570:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	603b      	str	r3, [r7, #0]
 8003576:	4b21      	ldr	r3, [pc, #132]	; (80035fc <HAL_FSMC_MspInit+0xac>)
 8003578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357a:	4a20      	ldr	r2, [pc, #128]	; (80035fc <HAL_FSMC_MspInit+0xac>)
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	6393      	str	r3, [r2, #56]	; 0x38
 8003582:	4b1e      	ldr	r3, [pc, #120]	; (80035fc <HAL_FSMC_MspInit+0xac>)
 8003584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800358e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003592:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003594:	2302      	movs	r3, #2
 8003596:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003598:	2300      	movs	r3, #0
 800359a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800359c:	2303      	movs	r3, #3
 800359e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80035a0:	230c      	movs	r3, #12
 80035a2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035a4:	1d3b      	adds	r3, r7, #4
 80035a6:	4619      	mov	r1, r3
 80035a8:	4815      	ldr	r0, [pc, #84]	; (8003600 <HAL_FSMC_MspInit+0xb0>)
 80035aa:	f008 fbd1 	bl	800bd50 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80035ae:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80035b2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b4:	2302      	movs	r3, #2
 80035b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035bc:	2303      	movs	r3, #3
 80035be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80035c0:	230c      	movs	r3, #12
 80035c2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035c4:	1d3b      	adds	r3, r7, #4
 80035c6:	4619      	mov	r1, r3
 80035c8:	480e      	ldr	r0, [pc, #56]	; (8003604 <HAL_FSMC_MspInit+0xb4>)
 80035ca:	f008 fbc1 	bl	800bd50 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80035ce:	2380      	movs	r3, #128	; 0x80
 80035d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d2:	2302      	movs	r3, #2
 80035d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035da:	2303      	movs	r3, #3
 80035dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80035de:	230c      	movs	r3, #12
 80035e0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e2:	1d3b      	adds	r3, r7, #4
 80035e4:	4619      	mov	r1, r3
 80035e6:	4808      	ldr	r0, [pc, #32]	; (8003608 <HAL_FSMC_MspInit+0xb8>)
 80035e8:	f008 fbb2 	bl	800bd50 <HAL_GPIO_Init>
 80035ec:	e000      	b.n	80035f0 <HAL_FSMC_MspInit+0xa0>
    return;
 80035ee:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000ffc 	.word	0x20000ffc
 80035fc:	40023800 	.word	0x40023800
 8003600:	40021000 	.word	0x40021000
 8003604:	40020c00 	.word	0x40020c00
 8003608:	40020400 	.word	0x40020400

0800360c <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 8003614:	f7ff ff9c 	bl	8003550 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8003618:	bf00      	nop
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08a      	sub	sp, #40	; 0x28
 8003624:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003626:	f107 0314 	add.w	r3, r7, #20
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	605a      	str	r2, [r3, #4]
 8003630:	609a      	str	r2, [r3, #8]
 8003632:	60da      	str	r2, [r3, #12]
 8003634:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	4b51      	ldr	r3, [pc, #324]	; (8003780 <MX_GPIO_Init+0x160>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	4a50      	ldr	r2, [pc, #320]	; (8003780 <MX_GPIO_Init+0x160>)
 8003640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003644:	6313      	str	r3, [r2, #48]	; 0x30
 8003646:	4b4e      	ldr	r3, [pc, #312]	; (8003780 <MX_GPIO_Init+0x160>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	4b4a      	ldr	r3, [pc, #296]	; (8003780 <MX_GPIO_Init+0x160>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	4a49      	ldr	r2, [pc, #292]	; (8003780 <MX_GPIO_Init+0x160>)
 800365c:	f043 0301 	orr.w	r3, r3, #1
 8003660:	6313      	str	r3, [r2, #48]	; 0x30
 8003662:	4b47      	ldr	r3, [pc, #284]	; (8003780 <MX_GPIO_Init+0x160>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	4b43      	ldr	r3, [pc, #268]	; (8003780 <MX_GPIO_Init+0x160>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	4a42      	ldr	r2, [pc, #264]	; (8003780 <MX_GPIO_Init+0x160>)
 8003678:	f043 0310 	orr.w	r3, r3, #16
 800367c:	6313      	str	r3, [r2, #48]	; 0x30
 800367e:	4b40      	ldr	r3, [pc, #256]	; (8003780 <MX_GPIO_Init+0x160>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	60bb      	str	r3, [r7, #8]
 8003688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	607b      	str	r3, [r7, #4]
 800368e:	4b3c      	ldr	r3, [pc, #240]	; (8003780 <MX_GPIO_Init+0x160>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	4a3b      	ldr	r2, [pc, #236]	; (8003780 <MX_GPIO_Init+0x160>)
 8003694:	f043 0302 	orr.w	r3, r3, #2
 8003698:	6313      	str	r3, [r2, #48]	; 0x30
 800369a:	4b39      	ldr	r3, [pc, #228]	; (8003780 <MX_GPIO_Init+0x160>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	607b      	str	r3, [r7, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80036a6:	2300      	movs	r3, #0
 80036a8:	603b      	str	r3, [r7, #0]
 80036aa:	4b35      	ldr	r3, [pc, #212]	; (8003780 <MX_GPIO_Init+0x160>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	4a34      	ldr	r2, [pc, #208]	; (8003780 <MX_GPIO_Init+0x160>)
 80036b0:	f043 0308 	orr.w	r3, r3, #8
 80036b4:	6313      	str	r3, [r2, #48]	; 0x30
 80036b6:	4b32      	ldr	r3, [pc, #200]	; (8003780 <MX_GPIO_Init+0x160>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	603b      	str	r3, [r7, #0]
 80036c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 80036c2:	2200      	movs	r2, #0
 80036c4:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 80036c8:	482e      	ldr	r0, [pc, #184]	; (8003784 <MX_GPIO_Init+0x164>)
 80036ca:	f008 fcdb 	bl	800c084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|CAPTURE_ENABLE_Pin|STOP_Pin, GPIO_PIN_RESET);
 80036ce:	2200      	movs	r2, #0
 80036d0:	f641 0148 	movw	r1, #6216	; 0x1848
 80036d4:	482c      	ldr	r0, [pc, #176]	; (8003788 <MX_GPIO_Init+0x168>)
 80036d6:	f008 fcd5 	bl	800c084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 80036da:	2200      	movs	r2, #0
 80036dc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80036e0:	482a      	ldr	r0, [pc, #168]	; (800378c <MX_GPIO_Init+0x16c>)
 80036e2:	f008 fccf 	bl	800c084 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 80036e6:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 80036ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036ec:	2301      	movs	r3, #1
 80036ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f4:	2300      	movs	r3, #0
 80036f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036f8:	f107 0314 	add.w	r3, r7, #20
 80036fc:	4619      	mov	r1, r3
 80036fe:	4821      	ldr	r0, [pc, #132]	; (8003784 <MX_GPIO_Init+0x164>)
 8003700:	f008 fb26 	bl	800bd50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|CAPTURE_ENABLE_Pin|STOP_Pin;
 8003704:	f640 0348 	movw	r3, #2120	; 0x848
 8003708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800370a:	2301      	movs	r3, #1
 800370c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003712:	2300      	movs	r3, #0
 8003714:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003716:	f107 0314 	add.w	r3, r7, #20
 800371a:	4619      	mov	r1, r3
 800371c:	481a      	ldr	r0, [pc, #104]	; (8003788 <MX_GPIO_Init+0x168>)
 800371e:	f008 fb17 	bl	800bd50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_WRITE_Pin;
 8003722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003728:	2301      	movs	r3, #1
 800372a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372c:	2300      	movs	r3, #0
 800372e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003730:	2303      	movs	r3, #3
 8003732:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_WRITE_GPIO_Port, &GPIO_InitStruct);
 8003734:	f107 0314 	add.w	r3, r7, #20
 8003738:	4619      	mov	r1, r3
 800373a:	4813      	ldr	r0, [pc, #76]	; (8003788 <MX_GPIO_Init+0x168>)
 800373c:	f008 fb08 	bl	800bd50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CPLD_LIMIT_Pin|CPLD_BUSY_Pin;
 8003740:	f242 0304 	movw	r3, #8196	; 0x2004
 8003744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003746:	2300      	movs	r3, #0
 8003748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800374a:	2301      	movs	r3, #1
 800374c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800374e:	f107 0314 	add.w	r3, r7, #20
 8003752:	4619      	mov	r1, r3
 8003754:	480c      	ldr	r0, [pc, #48]	; (8003788 <MX_GPIO_Init+0x168>)
 8003756:	f008 fafb 	bl	800bd50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin;
 800375a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800375e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003760:	2301      	movs	r3, #1
 8003762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003764:	2300      	movs	r3, #0
 8003766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003768:	2300      	movs	r3, #0
 800376a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800376c:	f107 0314 	add.w	r3, r7, #20
 8003770:	4619      	mov	r1, r3
 8003772:	4806      	ldr	r0, [pc, #24]	; (800378c <MX_GPIO_Init+0x16c>)
 8003774:	f008 faec 	bl	800bd50 <HAL_GPIO_Init>

}
 8003778:	bf00      	nop
 800377a:	3728      	adds	r7, #40	; 0x28
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40023800 	.word	0x40023800
 8003784:	40020400 	.word	0x40020400
 8003788:	40020c00 	.word	0x40020c00
 800378c:	40020000 	.word	0x40020000

08003790 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 8003790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003792:	b08b      	sub	sp, #44	; 0x2c
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800379e:	eeb0 0a47 	vmov.f32	s0, s14
 80037a2:	eef0 0a67 	vmov.f32	s1, s15
 80037a6:	f015 ffd7 	bl	8019758 <cos>
 80037aa:	ec51 0b10 	vmov	r0, r1, d0
 80037ae:	a38e      	add	r3, pc, #568	; (adr r3, 80039e8 <kinematicForward+0x258>)
 80037b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b4:	f7fc ff20 	bl	80005f8 <__aeabi_dmul>
 80037b8:	4603      	mov	r3, r0
 80037ba:	460c      	mov	r4, r1
 80037bc:	461d      	mov	r5, r3
 80037be:	4626      	mov	r6, r4
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80037cc:	461a      	mov	r2, r3
 80037ce:	4623      	mov	r3, r4
 80037d0:	f7fc fd5c 	bl	800028c <__adddf3>
 80037d4:	4603      	mov	r3, r0
 80037d6:	460c      	mov	r4, r1
 80037d8:	ec44 3b17 	vmov	d7, r3, r4
 80037dc:	eeb0 0a47 	vmov.f32	s0, s14
 80037e0:	eef0 0a67 	vmov.f32	s1, s15
 80037e4:	f015 ffb8 	bl	8019758 <cos>
 80037e8:	ec51 0b10 	vmov	r0, r1, d0
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	4b83      	ldr	r3, [pc, #524]	; (8003a00 <kinematicForward+0x270>)
 80037f2:	f7fc ff01 	bl	80005f8 <__aeabi_dmul>
 80037f6:	4603      	mov	r3, r0
 80037f8:	460c      	mov	r4, r1
 80037fa:	461a      	mov	r2, r3
 80037fc:	4623      	mov	r3, r4
 80037fe:	4628      	mov	r0, r5
 8003800:	4631      	mov	r1, r6
 8003802:	f7fc fd43 	bl	800028c <__adddf3>
 8003806:	4603      	mov	r3, r0
 8003808:	460c      	mov	r4, r1
 800380a:	461d      	mov	r5, r3
 800380c:	4626      	mov	r6, r4
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800381a:	461a      	mov	r2, r3
 800381c:	4623      	mov	r3, r4
 800381e:	f7fc fd35 	bl	800028c <__adddf3>
 8003822:	4603      	mov	r3, r0
 8003824:	460c      	mov	r4, r1
 8003826:	4618      	mov	r0, r3
 8003828:	4621      	mov	r1, r4
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8003830:	461a      	mov	r2, r3
 8003832:	4623      	mov	r3, r4
 8003834:	f7fc fd28 	bl	8000288 <__aeabi_dsub>
 8003838:	4603      	mov	r3, r0
 800383a:	460c      	mov	r4, r1
 800383c:	ec44 3b17 	vmov	d7, r3, r4
 8003840:	eeb0 0a47 	vmov.f32	s0, s14
 8003844:	eef0 0a67 	vmov.f32	s1, s15
 8003848:	f015 ff86 	bl	8019758 <cos>
 800384c:	ec51 0b10 	vmov	r0, r1, d0
 8003850:	a363      	add	r3, pc, #396	; (adr r3, 80039e0 <kinematicForward+0x250>)
 8003852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003856:	f7fc fecf 	bl	80005f8 <__aeabi_dmul>
 800385a:	4603      	mov	r3, r0
 800385c:	460c      	mov	r4, r1
	x =   a1*cos(pnt->Theta1)
 800385e:	461a      	mov	r2, r3
 8003860:	4623      	mov	r3, r4
 8003862:	4628      	mov	r0, r5
 8003864:	4631      	mov	r1, r6
 8003866:	f7fc fd11 	bl	800028c <__adddf3>
 800386a:	4603      	mov	r3, r0
 800386c:	460c      	mov	r4, r1
 800386e:	e9c7 3408 	strd	r3, r4, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8003878:	eeb0 0a47 	vmov.f32	s0, s14
 800387c:	eef0 0a67 	vmov.f32	s1, s15
 8003880:	f015 fffa 	bl	8019878 <sin>
 8003884:	ec51 0b10 	vmov	r0, r1, d0
 8003888:	a357      	add	r3, pc, #348	; (adr r3, 80039e8 <kinematicForward+0x258>)
 800388a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388e:	f7fc feb3 	bl	80005f8 <__aeabi_dmul>
 8003892:	4603      	mov	r3, r0
 8003894:	460c      	mov	r4, r1
 8003896:	461d      	mov	r5, r3
 8003898:	4626      	mov	r6, r4
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80038a6:	461a      	mov	r2, r3
 80038a8:	4623      	mov	r3, r4
 80038aa:	f7fc fcef 	bl	800028c <__adddf3>
 80038ae:	4603      	mov	r3, r0
 80038b0:	460c      	mov	r4, r1
 80038b2:	ec44 3b17 	vmov	d7, r3, r4
 80038b6:	eeb0 0a47 	vmov.f32	s0, s14
 80038ba:	eef0 0a67 	vmov.f32	s1, s15
 80038be:	f015 ffdb 	bl	8019878 <sin>
 80038c2:	ec51 0b10 	vmov	r0, r1, d0
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	4b4d      	ldr	r3, [pc, #308]	; (8003a00 <kinematicForward+0x270>)
 80038cc:	f7fc fe94 	bl	80005f8 <__aeabi_dmul>
 80038d0:	4603      	mov	r3, r0
 80038d2:	460c      	mov	r4, r1
 80038d4:	461a      	mov	r2, r3
 80038d6:	4623      	mov	r3, r4
 80038d8:	4628      	mov	r0, r5
 80038da:	4631      	mov	r1, r6
 80038dc:	f7fc fcd6 	bl	800028c <__adddf3>
 80038e0:	4603      	mov	r3, r0
 80038e2:	460c      	mov	r4, r1
 80038e4:	461d      	mov	r5, r3
 80038e6:	4626      	mov	r6, r4
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80038f4:	461a      	mov	r2, r3
 80038f6:	4623      	mov	r3, r4
 80038f8:	f7fc fcc8 	bl	800028c <__adddf3>
 80038fc:	4603      	mov	r3, r0
 80038fe:	460c      	mov	r4, r1
 8003900:	4618      	mov	r0, r3
 8003902:	4621      	mov	r1, r4
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 800390a:	461a      	mov	r2, r3
 800390c:	4623      	mov	r3, r4
 800390e:	f7fc fcbb 	bl	8000288 <__aeabi_dsub>
 8003912:	4603      	mov	r3, r0
 8003914:	460c      	mov	r4, r1
 8003916:	ec44 3b17 	vmov	d7, r3, r4
 800391a:	eeb0 0a47 	vmov.f32	s0, s14
 800391e:	eef0 0a67 	vmov.f32	s1, s15
 8003922:	f015 ffa9 	bl	8019878 <sin>
 8003926:	ec51 0b10 	vmov	r0, r1, d0
 800392a:	a32d      	add	r3, pc, #180	; (adr r3, 80039e0 <kinematicForward+0x250>)
 800392c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003930:	f7fc fe62 	bl	80005f8 <__aeabi_dmul>
 8003934:	4603      	mov	r3, r0
 8003936:	460c      	mov	r4, r1
	y =   a1*sin(pnt->Theta1)
 8003938:	461a      	mov	r2, r3
 800393a:	4623      	mov	r3, r4
 800393c:	4628      	mov	r0, r5
 800393e:	4631      	mov	r1, r6
 8003940:	f7fc fca4 	bl	800028c <__adddf3>
 8003944:	4603      	mov	r3, r0
 8003946:	460c      	mov	r4, r1
 8003948:	e9c7 3406 	strd	r3, r4, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8003952:	461a      	mov	r2, r3
 8003954:	4623      	mov	r3, r4
 8003956:	a126      	add	r1, pc, #152	; (adr r1, 80039f0 <kinematicForward+0x260>)
 8003958:	e9d1 0100 	ldrd	r0, r1, [r1]
 800395c:	f7fc fc94 	bl	8000288 <__aeabi_dsub>
 8003960:	4603      	mov	r3, r0
 8003962:	460c      	mov	r4, r1
 8003964:	4618      	mov	r0, r3
 8003966:	4621      	mov	r1, r4
 8003968:	a323      	add	r3, pc, #140	; (adr r3, 80039f8 <kinematicForward+0x268>)
 800396a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396e:	f7fc fc8b 	bl	8000288 <__aeabi_dsub>
 8003972:	4603      	mov	r3, r0
 8003974:	460c      	mov	r4, r1
 8003976:	e9c7 3404 	strd	r3, r4, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8003986:	461a      	mov	r2, r3
 8003988:	4623      	mov	r3, r4
 800398a:	f7fc fc7f 	bl	800028c <__adddf3>
 800398e:	4603      	mov	r3, r0
 8003990:	460c      	mov	r4, r1
 8003992:	4618      	mov	r0, r3
 8003994:	4621      	mov	r1, r4
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 800399c:	461a      	mov	r2, r3
 800399e:	4623      	mov	r3, r4
 80039a0:	f7fc fc72 	bl	8000288 <__aeabi_dsub>
 80039a4:	4603      	mov	r3, r0
 80039a6:	460c      	mov	r4, r1
 80039a8:	e9c7 3402 	strd	r3, r4, [r7, #8]

	pnt->x = x;
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80039b2:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	pnt->y = y;
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80039bc:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	pnt->z = z;
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80039c6:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	pnt->roll = roll;
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80039d0:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	return TRUE;
 80039d4:	2301      	movs	r3, #1
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	372c      	adds	r7, #44	; 0x2c
 80039da:	46bd      	mov	sp, r7
 80039dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039de:	bf00      	nop
 80039e0:	80000000 	.word	0x80000000
 80039e4:	40402e14 	.word	0x40402e14
 80039e8:	00000000 	.word	0x00000000
 80039ec:	4068a000 	.word	0x4068a000
 80039f0:	00000000 	.word	0x00000000
 80039f4:	406a6000 	.word	0x406a6000
 80039f8:	e0000000 	.word	0xe0000000
 80039fc:	40536b22 	.word	0x40536b22
 8003a00:	40640000 	.word	0x40640000
 8003a04:	00000000 	.word	0x00000000

08003a08 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 8003a08:	b082      	sub	sp, #8
 8003a0a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a0e:	b0a0      	sub	sp, #128	; 0x80
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8003a18:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8003a22:	a1f2      	add	r1, pc, #968	; (adr r1, 8003dec <kinematicInverse+0x3e4>)
 8003a24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a28:	f7fc fc2e 	bl	8000288 <__aeabi_dsub>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	; 0x48
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8003a40:	eeb0 0a47 	vmov.f32	s0, s14
 8003a44:	eef0 0a67 	vmov.f32	s1, s15
 8003a48:	f015 fe86 	bl	8019758 <cos>
 8003a4c:	ec51 0b10 	vmov	r0, r1, d0
 8003a50:	a3e8      	add	r3, pc, #928	; (adr r3, 8003df4 <kinematicInverse+0x3ec>)
 8003a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a56:	f7fc fdcf 	bl	80005f8 <__aeabi_dmul>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	4650      	mov	r0, sl
 8003a60:	4659      	mov	r1, fp
 8003a62:	f7fc fc11 	bl	8000288 <__aeabi_dsub>
 8003a66:	4602      	mov	r2, r0
 8003a68:	460b      	mov	r3, r1
 8003a6a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8003a7a:	eeb0 0a47 	vmov.f32	s0, s14
 8003a7e:	eef0 0a67 	vmov.f32	s1, s15
 8003a82:	f015 fef9 	bl	8019878 <sin>
 8003a86:	ec51 0b10 	vmov	r0, r1, d0
 8003a8a:	a3da      	add	r3, pc, #872	; (adr r3, 8003df4 <kinematicInverse+0x3ec>)
 8003a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a90:	f7fc fdb2 	bl	80005f8 <__aeabi_dmul>
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4650      	mov	r0, sl
 8003a9a:	4659      	mov	r1, fp
 8003a9c:	f7fc fbf4 	bl	8000288 <__aeabi_dsub>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 8003aa8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003aac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003ab0:	f7fc fda2 	bl	80005f8 <__aeabi_dmul>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4692      	mov	sl, r2
 8003aba:	469b      	mov	fp, r3
 8003abc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ac0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003ac4:	f7fc fd98 	bl	80005f8 <__aeabi_dmul>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4650      	mov	r0, sl
 8003ace:	4659      	mov	r1, fp
 8003ad0:	f7fc fbdc 	bl	800028c <__adddf3>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4610      	mov	r0, r2
 8003ada:	4619      	mov	r1, r3
 8003adc:	a3c7      	add	r3, pc, #796	; (adr r3, 8003dfc <kinematicInverse+0x3f4>)
 8003ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae2:	f7fc fbd1 	bl	8000288 <__aeabi_dsub>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4610      	mov	r0, r2
 8003aec:	4619      	mov	r1, r3
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	4bbb      	ldr	r3, [pc, #748]	; (8003de0 <kinematicInverse+0x3d8>)
 8003af4:	f7fc fbc8 	bl	8000288 <__aeabi_dsub>
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	4610      	mov	r0, r2
 8003afe:	4619      	mov	r1, r3
 8003b00:	a3b3      	add	r3, pc, #716	; (adr r3, 8003dd0 <kinematicInverse+0x3c8>)
 8003b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b06:	f7fc fea1 	bl	800084c <__aeabi_ddiv>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 8003b12:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b16:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003b1a:	f7fc fd6d 	bl	80005f8 <__aeabi_dmul>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	f04f 0000 	mov.w	r0, #0
 8003b26:	49af      	ldr	r1, [pc, #700]	; (8003de4 <kinematicInverse+0x3dc>)
 8003b28:	f7fc fbae 	bl	8000288 <__aeabi_dsub>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	f04f 0300 	mov.w	r3, #0
 8003b3c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003b40:	f7fc ffcc 	bl	8000adc <__aeabi_dcmplt>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <kinematicInverse+0x146>
		return FALSE;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	e136      	b.n	8003dbc <kinematicInverse+0x3b4>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 8003b4e:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8003b52:	f015 ff1b 	bl	801998c <sqrt>
 8003b56:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 8003b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b60:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003b64:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 8003b66:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8003b6a:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8003b6e:	f015 ff0b 	bl	8019988 <atan2>
 8003b72:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 8003b76:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8003b7a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8003b7e:	f015 ff03 	bl	8019988 <atan2>
 8003b82:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 8003b86:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8003b8a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003b8e:	f7fc fb7b 	bl	8000288 <__aeabi_dsub>
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	4614      	mov	r4, r2
 8003b98:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003b9c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8003ba0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ba4:	f7fc fb70 	bl	8000288 <__aeabi_dsub>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4690      	mov	r8, r2
 8003bae:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003bb2:	4642      	mov	r2, r8
 8003bb4:	464b      	mov	r3, r9
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	4629      	mov	r1, r5
 8003bba:	f7fc ff99 	bl	8000af0 <__aeabi_dcmple>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 8003bc4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003bc8:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 8003bcc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003bd0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8003bd4:	e007      	b.n	8003be6 <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 8003bd6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8003bda:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 8003bde:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003be2:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	4b7f      	ldr	r3, [pc, #508]	; (8003de8 <kinematicInverse+0x3e0>)
 8003bec:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003bf0:	f7fc fd02 	bl	80005f8 <__aeabi_dmul>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	460c      	mov	r4, r1
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	a376      	add	r3, pc, #472	; (adr r3, 8003dd8 <kinematicInverse+0x3d0>)
 8003bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c02:	f7fc fb43 	bl	800028c <__adddf3>
 8003c06:	4603      	mov	r3, r0
 8003c08:	460c      	mov	r4, r1
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c12:	f7fc fcf1 	bl	80005f8 <__aeabi_dmul>
 8003c16:	4603      	mov	r3, r0
 8003c18:	460c      	mov	r4, r1
 8003c1a:	4625      	mov	r5, r4
 8003c1c:	461c      	mov	r4, r3
 8003c1e:	f04f 0200 	mov.w	r2, #0
 8003c22:	4b71      	ldr	r3, [pc, #452]	; (8003de8 <kinematicInverse+0x3e0>)
 8003c24:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003c28:	f7fc fce6 	bl	80005f8 <__aeabi_dmul>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4610      	mov	r0, r2
 8003c32:	4619      	mov	r1, r3
 8003c34:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003c38:	f7fc fcde 	bl	80005f8 <__aeabi_dmul>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4620      	mov	r0, r4
 8003c42:	4629      	mov	r1, r5
 8003c44:	f7fc fb20 	bl	8000288 <__aeabi_dsub>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	460c      	mov	r4, r1
 8003c4c:	4625      	mov	r5, r4
 8003c4e:	461c      	mov	r4, r3
 8003c50:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003c54:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003c58:	f7fc fcce 	bl	80005f8 <__aeabi_dmul>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4690      	mov	r8, r2
 8003c62:	4699      	mov	r9, r3
 8003c64:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c68:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003c6c:	f7fc fcc4 	bl	80005f8 <__aeabi_dmul>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4640      	mov	r0, r8
 8003c76:	4649      	mov	r1, r9
 8003c78:	f7fc fb08 	bl	800028c <__adddf3>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4620      	mov	r0, r4
 8003c82:	4629      	mov	r1, r5
 8003c84:	f7fc fde2 	bl	800084c <__aeabi_ddiv>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	460c      	mov	r4, r1
 8003c8c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	4b54      	ldr	r3, [pc, #336]	; (8003de8 <kinematicInverse+0x3e0>)
 8003c96:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003c9a:	f7fc fcad 	bl	80005f8 <__aeabi_dmul>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	460c      	mov	r4, r1
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	4621      	mov	r1, r4
 8003ca6:	a34c      	add	r3, pc, #304	; (adr r3, 8003dd8 <kinematicInverse+0x3d0>)
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	f7fc faee 	bl	800028c <__adddf3>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	4621      	mov	r1, r4
 8003cb8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003cbc:	f7fc fc9c 	bl	80005f8 <__aeabi_dmul>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	460c      	mov	r4, r1
 8003cc4:	4625      	mov	r5, r4
 8003cc6:	461c      	mov	r4, r3
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	4b46      	ldr	r3, [pc, #280]	; (8003de8 <kinematicInverse+0x3e0>)
 8003cce:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003cd2:	f7fc fc91 	bl	80005f8 <__aeabi_dmul>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4610      	mov	r0, r2
 8003cdc:	4619      	mov	r1, r3
 8003cde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ce2:	f7fc fc89 	bl	80005f8 <__aeabi_dmul>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4620      	mov	r0, r4
 8003cec:	4629      	mov	r1, r5
 8003cee:	f7fc facd 	bl	800028c <__adddf3>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	460c      	mov	r4, r1
 8003cf6:	4625      	mov	r5, r4
 8003cf8:	461c      	mov	r4, r3
 8003cfa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003cfe:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003d02:	f7fc fc79 	bl	80005f8 <__aeabi_dmul>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4690      	mov	r8, r2
 8003d0c:	4699      	mov	r9, r3
 8003d0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d12:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003d16:	f7fc fc6f 	bl	80005f8 <__aeabi_dmul>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4640      	mov	r0, r8
 8003d20:	4649      	mov	r1, r9
 8003d22:	f7fc fab3 	bl	800028c <__adddf3>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	4629      	mov	r1, r5
 8003d2e:	f7fc fd8d 	bl	800084c <__aeabi_ddiv>
 8003d32:	4603      	mov	r3, r0
 8003d34:	460c      	mov	r4, r1
 8003d36:	e9c7 3406 	strd	r3, r4, [r7, #24]
	theta1 = atan2(s1,c1);
 8003d3a:	ed97 1b06 	vldr	d1, [r7, #24]
 8003d3e:	ed97 0b08 	vldr	d0, [r7, #32]
 8003d42:	f015 fe21 	bl	8019988 <atan2>
 8003d46:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 8003d4a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003d4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d52:	f7fc fa9b 	bl	800028c <__adddf3>
 8003d56:	4603      	mov	r3, r0
 8003d58:	460c      	mov	r4, r1
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	4621      	mov	r1, r4
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8003d64:	461a      	mov	r2, r3
 8003d66:	4623      	mov	r3, r4
 8003d68:	f7fc fa8e 	bl	8000288 <__aeabi_dsub>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	460c      	mov	r4, r1
 8003d70:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 8003d74:	ed97 3b02 	vldr	d3, [r7, #8]
 8003d78:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 8003d7c:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 8003d80:	ed97 0b04 	vldr	d0, [r7, #16]
 8003d84:	f006 f958 	bl	800a038 <scaraCheckWorkSpace4>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <kinematicInverse+0x38a>
		return FALSE; // Over workspace !!!
 8003d8e:	2300      	movs	r3, #0
 8003d90:	e014      	b.n	8003dbc <kinematicInverse+0x3b4>
	}
	pnt->Theta1 = theta1;
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003d98:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	pnt->Theta2 = theta2;
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003da2:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	pnt->D3		= d3;
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003dac:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	pnt->Theta4 = theta4;
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003db6:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	return TRUE; // All is well
 8003dba:	2301      	movs	r3, #1
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3780      	adds	r7, #128	; 0x80
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dc6:	b002      	add	sp, #8
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	f3af 8000 	nop.w
 8003dd0:	00000000 	.word	0x00000000
 8003dd4:	40eec800 	.word	0x40eec800
 8003dd8:	00000000 	.word	0x00000000
 8003ddc:	4068a000 	.word	0x4068a000
 8003de0:	40d90000 	.word	0x40d90000
 8003de4:	3ff00000 	.word	0x3ff00000
 8003de8:	40640000 	.word	0x40640000
 8003dec:	80000000 	.word	0x80000000
 8003df0:	4060aa6e 	.word	0x4060aa6e
 8003df4:	80000000 	.word	0x80000000
 8003df8:	40402e14 	.word	0x40402e14
 8003dfc:	00000000 	.word	0x00000000
 8003e00:	40e2f320 	.word	0x40e2f320

08003e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e08:	f007 fabe 	bl	800b388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e0c:	f000 f812 	bl	8003e34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e10:	f7ff fc06 	bl	8003620 <MX_GPIO_Init>
  MX_DMA_Init();
 8003e14:	f7fd fed2 	bl	8001bbc <MX_DMA_Init>
  MX_UART4_Init();
 8003e18:	f007 f9b8 	bl	800b18c <MX_UART4_Init>
  MX_FSMC_Init();
 8003e1c:	f7ff fb38 	bl	8003490 <MX_FSMC_Init>
  MX_TIM7_Init();
 8003e20:	f007 f942 	bl	800b0a8 <MX_TIM7_Init>
  MX_TIM2_Init();
 8003e24:	f007 f8f2 	bl	800b00c <MX_TIM2_Init>
  //lowlayer_writePulse(0, 0, 0, 0);
  //HAL_Delay(10);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003e28:	f7fd ff02 	bl	8001c30 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8003e2c:	f00e fae9 	bl	8012402 <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 8003e30:	e7fe      	b.n	8003e30 <main+0x2c>
	...

08003e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b094      	sub	sp, #80	; 0x50
 8003e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e3a:	f107 0320 	add.w	r3, r7, #32
 8003e3e:	2230      	movs	r2, #48	; 0x30
 8003e40:	2100      	movs	r1, #0
 8003e42:	4618      	mov	r0, r3
 8003e44:	f011 febe 	bl	8015bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e48:	f107 030c 	add.w	r3, r7, #12
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	605a      	str	r2, [r3, #4]
 8003e52:	609a      	str	r2, [r3, #8]
 8003e54:	60da      	str	r2, [r3, #12]
 8003e56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e58:	2300      	movs	r3, #0
 8003e5a:	60bb      	str	r3, [r7, #8]
 8003e5c:	4b28      	ldr	r3, [pc, #160]	; (8003f00 <SystemClock_Config+0xcc>)
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	4a27      	ldr	r2, [pc, #156]	; (8003f00 <SystemClock_Config+0xcc>)
 8003e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e66:	6413      	str	r3, [r2, #64]	; 0x40
 8003e68:	4b25      	ldr	r3, [pc, #148]	; (8003f00 <SystemClock_Config+0xcc>)
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e70:	60bb      	str	r3, [r7, #8]
 8003e72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e74:	2300      	movs	r3, #0
 8003e76:	607b      	str	r3, [r7, #4]
 8003e78:	4b22      	ldr	r3, [pc, #136]	; (8003f04 <SystemClock_Config+0xd0>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a21      	ldr	r2, [pc, #132]	; (8003f04 <SystemClock_Config+0xd0>)
 8003e7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	4b1f      	ldr	r3, [pc, #124]	; (8003f04 <SystemClock_Config+0xd0>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e8c:	607b      	str	r3, [r7, #4]
 8003e8e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003e90:	2301      	movs	r3, #1
 8003e92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003ea4:	2308      	movs	r3, #8
 8003ea6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003ea8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003eac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003eae:	2302      	movs	r3, #2
 8003eb0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003eb2:	2307      	movs	r3, #7
 8003eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003eb6:	f107 0320 	add.w	r3, r7, #32
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f009 fad6 	bl	800d46c <HAL_RCC_OscConfig>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003ec6:	f000 f831 	bl	8003f2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003eca:	230f      	movs	r3, #15
 8003ecc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ece:	2302      	movs	r3, #2
 8003ed0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003ed6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003eda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ee0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003ee2:	f107 030c 	add.w	r3, r7, #12
 8003ee6:	2105      	movs	r1, #5
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f009 fd2f 	bl	800d94c <HAL_RCC_ClockConfig>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003ef4:	f000 f81a 	bl	8003f2c <Error_Handler>
  }
}
 8003ef8:	bf00      	nop
 8003efa:	3750      	adds	r7, #80	; 0x50
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40023800 	.word	0x40023800
 8003f04:	40007000 	.word	0x40007000

08003f08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a04      	ldr	r2, [pc, #16]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d101      	bne.n	8003f1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003f1a:	f007 fa57 	bl	800b3cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003f1e:	bf00      	nop
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40001000 	.word	0x40001000

08003f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003f30:	bf00      	nop
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	460b      	mov	r3, r1
 8003f44:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <ringBuff_PushChar+0x1a>
		return FALSE;
 8003f50:	2300      	movs	r3, #0
 8003f52:	e024      	b.n	8003f9e <ringBuff_PushChar+0x64>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	78f9      	ldrb	r1, [r7, #3]
 8003f5e:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003f66:	3301      	adds	r3, #1
 8003f68:	425a      	negs	r2, r3
 8003f6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f6e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003f72:	bf58      	it	pl
 8003f74:	4253      	negpl	r3, r2
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
			if (ringbuff->head == ringbuff->tail) {
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d103      	bne.n	8003f94 <ringBuff_PushChar+0x5a>
				ringbuff->isFull_Flag = TRUE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			}
			ringbuff->isEmpty_Flag = FALSE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			return TRUE;
 8003f9c:	2301      	movs	r3, #1
	}
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <ringBuff_PopChar+0x18>
		return FALSE;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e025      	b.n	800400e <ringBuff_PopChar+0x64>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	5cd2      	ldrb	r2, [r2, r3]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	425a      	negs	r2, r3
 8003fda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fde:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003fe2:	bf58      	it	pl
 8003fe4:	4253      	negpl	r3, r2
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			if (ringbuff->head == ringbuff->tail) {
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d103      	bne.n	8004004 <ringBuff_PopChar+0x5a>
				ringbuff->isEmpty_Flag = TRUE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			}
			ringbuff->isFull_Flag = FALSE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			return TRUE;
 800400c:	2301      	movs	r3, #1
	}
}
 800400e:	4618      	mov	r0, r3
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 800401a:	b580      	push	{r7, lr}
 800401c:	b086      	sub	sp, #24
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8004026:	2300      	movs	r3, #0
 8004028:	82fb      	strh	r3, [r7, #22]
 800402a:	e011      	b.n	8004050 <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 800402c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	4413      	add	r3, r2
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	4619      	mov	r1, r3
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f7ff ff7e 	bl	8003f3a <ringBuff_PushChar>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00b      	beq.n	800405c <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 8004044:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004048:	b29b      	uxth	r3, r3
 800404a:	3301      	adds	r3, #1
 800404c:	b29b      	uxth	r3, r3
 800404e:	82fb      	strh	r3, [r7, #22]
 8004050:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	429a      	cmp	r2, r3
 8004058:	dce8      	bgt.n	800402c <ringBuff_PushArray+0x12>
 800405a:	e000      	b.n	800405e <ringBuff_PushArray+0x44>
			break;
 800405c:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 800405e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 800406a:	b580      	push	{r7, lr}
 800406c:	b086      	sub	sp, #24
 800406e:	af00      	add	r7, sp, #0
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8004076:	2300      	movs	r3, #0
 8004078:	617b      	str	r3, [r7, #20]
 800407a:	e00c      	b.n	8004096 <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	4413      	add	r3, r2
 8004082:	4619      	mov	r1, r3
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f7ff ff90 	bl	8003faa <ringBuff_PopChar>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d007      	beq.n	80040a0 <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	3301      	adds	r3, #1
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	429a      	cmp	r2, r3
 800409c:	dbee      	blt.n	800407c <ringBuff_PopArray+0x12>
 800409e:	e000      	b.n	80040a2 <ringBuff_PopArray+0x38>
			break;
 80040a0:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 80040a2:	697b      	ldr	r3, [r7, #20]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3718      	adds	r7, #24
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, uint8_t cmp_char) {
 80040ac:	b480      	push	{r7}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	70fb      	strb	r3, [r7, #3]
	int32_t index;
	int32_t distance = 0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	613b      	str	r3, [r7, #16]

	index = ringbuff->tail;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80040c2:	617b      	str	r3, [r7, #20]
	if (ringbuff->isFull_Flag) {
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d036      	beq.n	800413c <ringBuff_DistanceOf+0x90>
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 80040ce:	2300      	movs	r3, #0
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	e018      	b.n	8004106 <ringBuff_DistanceOf+0x5a>
				if ( cmp_char == ringbuff->Array[index]) {
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	4413      	add	r3, r2
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	78fa      	ldrb	r2, [r7, #3]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d101      	bne.n	80040e6 <ringBuff_DistanceOf+0x3a>
					return distance;
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	e037      	b.n	8004156 <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	3301      	adds	r3, #1
 80040ea:	613b      	str	r3, [r7, #16]
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	3301      	adds	r3, #1
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	3301      	adds	r3, #1
 80040f6:	425a      	negs	r2, r3
 80040f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040fc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004100:	bf58      	it	pl
 8004102:	4253      	negpl	r3, r2
 8004104:	617b      	str	r3, [r7, #20]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800410c:	dbe2      	blt.n	80040d4 <ringBuff_DistanceOf+0x28>
 800410e:	e020      	b.n	8004152 <ringBuff_DistanceOf+0xa6>
			}

	} else {
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
				if ( cmp_char == ringbuff->Array[index]) {
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	4413      	add	r3, r2
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	78fa      	ldrb	r2, [r7, #3]
 800411a:	429a      	cmp	r2, r3
 800411c:	d101      	bne.n	8004122 <ringBuff_DistanceOf+0x76>
					return distance;
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	e019      	b.n	8004156 <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	3301      	adds	r3, #1
 8004126:	613b      	str	r3, [r7, #16]
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	3301      	adds	r3, #1
 800412c:	425a      	negs	r2, r3
 800412e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004132:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004136:	bf58      	it	pl
 8004138:	4253      	negpl	r3, r2
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	429a      	cmp	r2, r3
 8004146:	d1e3      	bne.n	8004110 <ringBuff_DistanceOf+0x64>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0de      	beq.n	8004110 <ringBuff_DistanceOf+0x64>
			}
	}
	return -1;
 8004152:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004156:	4618      	mov	r0, r3
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
	...

08004164 <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {3, 5, 5, 10};

void	lowlayer_scanReset(void) {
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
	lowlayer_resetEncoder();
 8004168:	f000 fdfe 	bl	8004d68 <lowlayer_resetEncoder>
	pulse_accumulate[0] = 0;
 800416c:	4b10      	ldr	r3, [pc, #64]	; (80041b0 <lowlayer_scanReset+0x4c>)
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]
	pulse_accumulate[1] = 0;
 8004172:	4b0f      	ldr	r3, [pc, #60]	; (80041b0 <lowlayer_scanReset+0x4c>)
 8004174:	2200      	movs	r2, #0
 8004176:	605a      	str	r2, [r3, #4]
	pulse_accumulate[2] = 0;
 8004178:	4b0d      	ldr	r3, [pc, #52]	; (80041b0 <lowlayer_scanReset+0x4c>)
 800417a:	2200      	movs	r2, #0
 800417c:	609a      	str	r2, [r3, #8]
	pulse_accumulate[3] = 0;
 800417e:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <lowlayer_scanReset+0x4c>)
 8004180:	2200      	movs	r2, #0
 8004182:	60da      	str	r2, [r3, #12]

	position_encoder[0] = 0;
 8004184:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <lowlayer_scanReset+0x50>)
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
	position_encoder[1] = 0;
 800418a:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <lowlayer_scanReset+0x50>)
 800418c:	2200      	movs	r2, #0
 800418e:	605a      	str	r2, [r3, #4]
	position_encoder[2] = 0;
 8004190:	4b08      	ldr	r3, [pc, #32]	; (80041b4 <lowlayer_scanReset+0x50>)
 8004192:	2200      	movs	r2, #0
 8004194:	609a      	str	r2, [r3, #8]

	scan_flag = 0;
 8004196:	4b08      	ldr	r3, [pc, #32]	; (80041b8 <lowlayer_scanReset+0x54>)
 8004198:	2200      	movs	r2, #0
 800419a:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 800419c:	4b07      	ldr	r3, [pc, #28]	; (80041bc <lowlayer_scanReset+0x58>)
 800419e:	2200      	movs	r2, #0
 80041a0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 80041a2:	2200      	movs	r2, #0
 80041a4:	2108      	movs	r1, #8
 80041a6:	4806      	ldr	r0, [pc, #24]	; (80041c0 <lowlayer_scanReset+0x5c>)
 80041a8:	f007 ff6c 	bl	800c084 <HAL_GPIO_WritePin>
}
 80041ac:	bf00      	nop
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	20004ec0 	.word	0x20004ec0
 80041b4:	20004ed4 	.word	0x20004ed4
 80041b8:	20004ed0 	.word	0x20004ed0
 80041bc:	20004ef0 	.word	0x20004ef0
 80041c0:	40020c00 	.word	0x40020c00
 80041c4:	00000000 	.word	0x00000000

080041c8 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 80041c8:	b590      	push	{r4, r7, lr}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 80041ce:	2300      	movs	r3, #0
 80041d0:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 80041d2:	f000 fe87 	bl	8004ee4 <lowlayer_updateLimit>
	if (state_scan < 4) {
 80041d6:	4b98      	ldr	r3, [pc, #608]	; (8004438 <lowlayer_scanFlow+0x270>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d837      	bhi.n	800424e <lowlayer_scanFlow+0x86>
		if (limit_switch[3 - state_scan] == 0) {
 80041de:	4b96      	ldr	r3, [pc, #600]	; (8004438 <lowlayer_scanFlow+0x270>)
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	f1c3 0303 	rsb	r3, r3, #3
 80041e6:	4a95      	ldr	r2, [pc, #596]	; (800443c <lowlayer_scanFlow+0x274>)
 80041e8:	5cd3      	ldrb	r3, [r2, r3]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d121      	bne.n	8004232 <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 80041ee:	4b92      	ldr	r3, [pc, #584]	; (8004438 <lowlayer_scanFlow+0x270>)
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	f1c3 0203 	rsb	r2, r3, #3
 80041f6:	4b90      	ldr	r3, [pc, #576]	; (8004438 <lowlayer_scanFlow+0x270>)
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	f1c3 0303 	rsb	r3, r3, #3
 80041fe:	4990      	ldr	r1, [pc, #576]	; (8004440 <lowlayer_scanFlow+0x278>)
 8004200:	568a      	ldrsb	r2, [r1, r2]
 8004202:	f107 0108 	add.w	r1, r7, #8
 8004206:	440b      	add	r3, r1
 8004208:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 800420c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004210:	b2db      	uxtb	r3, r3
 8004212:	425b      	negs	r3, r3
 8004214:	b2db      	uxtb	r3, r3
 8004216:	b258      	sxtb	r0, r3
 8004218:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800421c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004220:	b2db      	uxtb	r3, r3
 8004222:	425b      	negs	r3, r3
 8004224:	b2db      	uxtb	r3, r3
 8004226:	b25a      	sxtb	r2, r3
 8004228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422c:	f000 fcd8 	bl	8004be0 <lowlayer_writePulse>
 8004230:	e00b      	b.n	800424a <lowlayer_scanFlow+0x82>
		} else {
			state_scan++;
 8004232:	4b81      	ldr	r3, [pc, #516]	; (8004438 <lowlayer_scanFlow+0x270>)
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	3301      	adds	r3, #1
 8004238:	b2da      	uxtb	r2, r3
 800423a:	4b7f      	ldr	r3, [pc, #508]	; (8004438 <lowlayer_scanFlow+0x270>)
 800423c:	701a      	strb	r2, [r3, #0]
			lowlayer_writePulse(0, 0, 0, 0);
 800423e:	2300      	movs	r3, #0
 8004240:	2200      	movs	r2, #0
 8004242:	2100      	movs	r1, #0
 8004244:	2000      	movs	r0, #0
 8004246:	f000 fccb 	bl	8004be0 <lowlayer_writePulse>
		}

		return FALSE;
 800424a:	2300      	movs	r3, #0
 800424c:	e0d8      	b.n	8004400 <lowlayer_scanFlow+0x238>
	} else {
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 800424e:	2201      	movs	r2, #1
 8004250:	2108      	movs	r1, #8
 8004252:	487c      	ldr	r0, [pc, #496]	; (8004444 <lowlayer_scanFlow+0x27c>)
 8004254:	f007 ff16 	bl	800c084 <HAL_GPIO_WritePin>
		lowlayer_updateCapture();
 8004258:	f000 fe28 	bl	8004eac <lowlayer_updateCapture>
		lowlayer_writePulse(0, 0, 0, 0);
 800425c:	2300      	movs	r3, #0
 800425e:	2200      	movs	r2, #0
 8004260:	2100      	movs	r1, #0
 8004262:	2000      	movs	r0, #0
 8004264:	f000 fcbc 	bl	8004be0 <lowlayer_writePulse>
		scan_flag = 1;
 8004268:	4b77      	ldr	r3, [pc, #476]	; (8004448 <lowlayer_scanFlow+0x280>)
 800426a:	2201      	movs	r2, #1
 800426c:	701a      	strb	r2, [r3, #0]
		// Update offset
		offset_encoder[0] 	= position_capture[0];
 800426e:	4b77      	ldr	r3, [pc, #476]	; (800444c <lowlayer_scanFlow+0x284>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a77      	ldr	r2, [pc, #476]	; (8004450 <lowlayer_scanFlow+0x288>)
 8004274:	6013      	str	r3, [r2, #0]
		offset_encoder[1] 	= position_capture[1];
 8004276:	4b75      	ldr	r3, [pc, #468]	; (800444c <lowlayer_scanFlow+0x284>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	4a75      	ldr	r2, [pc, #468]	; (8004450 <lowlayer_scanFlow+0x288>)
 800427c:	6053      	str	r3, [r2, #4]
		offset_encoder[2] 	= position_capture[2];
 800427e:	4b73      	ldr	r3, [pc, #460]	; (800444c <lowlayer_scanFlow+0x284>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	4a73      	ldr	r2, [pc, #460]	; (8004450 <lowlayer_scanFlow+0x288>)
 8004284:	6093      	str	r3, [r2, #8]
		offset_stepper		= pulse_accumulate[3];
 8004286:	4b73      	ldr	r3, [pc, #460]	; (8004454 <lowlayer_scanFlow+0x28c>)
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	4a73      	ldr	r2, [pc, #460]	; (8004458 <lowlayer_scanFlow+0x290>)
 800428c:	6013      	str	r3, [r2, #0]
		// LOG offset
		LOG_REPORT("offset encoder 0", offset_encoder[0]);
 800428e:	4b70      	ldr	r3, [pc, #448]	; (8004450 <lowlayer_scanFlow+0x288>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	b29b      	uxth	r3, r3
 8004294:	4619      	mov	r1, r3
 8004296:	4871      	ldr	r0, [pc, #452]	; (800445c <lowlayer_scanFlow+0x294>)
 8004298:	f7fd fbd4 	bl	8001a44 <LOG_REPORT>
		LOG_REPORT("offset encoder 1", offset_encoder[1]);
 800429c:	4b6c      	ldr	r3, [pc, #432]	; (8004450 <lowlayer_scanFlow+0x288>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	4619      	mov	r1, r3
 80042a4:	486e      	ldr	r0, [pc, #440]	; (8004460 <lowlayer_scanFlow+0x298>)
 80042a6:	f7fd fbcd 	bl	8001a44 <LOG_REPORT>
		LOG_REPORT("offset encoder 2", offset_encoder[2]);
 80042aa:	4b69      	ldr	r3, [pc, #420]	; (8004450 <lowlayer_scanFlow+0x288>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	4619      	mov	r1, r3
 80042b2:	486c      	ldr	r0, [pc, #432]	; (8004464 <lowlayer_scanFlow+0x29c>)
 80042b4:	f7fd fbc6 	bl	8001a44 <LOG_REPORT>
		LOG_REPORT("offset stepper", offset_stepper);
 80042b8:	4b67      	ldr	r3, [pc, #412]	; (8004458 <lowlayer_scanFlow+0x290>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	b29b      	uxth	r3, r3
 80042be:	4619      	mov	r1, r3
 80042c0:	4869      	ldr	r0, [pc, #420]	; (8004468 <lowlayer_scanFlow+0x2a0>)
 80042c2:	f7fd fbbf 	bl	8001a44 <LOG_REPORT>

		offset_setpoint[0]	= HARD_LIM0_NEG
				- DIR_ENCODER_0*offset_encoder[0]*2.0*PI/ENCODER_J0;
 80042c6:	4b62      	ldr	r3, [pc, #392]	; (8004450 <lowlayer_scanFlow+0x288>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	ee07 3a90 	vmov	s15, r3
 80042ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042d2:	ee17 0a90 	vmov	r0, s15
 80042d6:	f7fc f937 	bl	8000548 <__aeabi_f2d>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	f7fb ffd5 	bl	800028c <__adddf3>
 80042e2:	4603      	mov	r3, r0
 80042e4:	460c      	mov	r4, r1
 80042e6:	4618      	mov	r0, r3
 80042e8:	4621      	mov	r1, r4
 80042ea:	a347      	add	r3, pc, #284	; (adr r3, 8004408 <lowlayer_scanFlow+0x240>)
 80042ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f0:	f7fc f982 	bl	80005f8 <__aeabi_dmul>
 80042f4:	4603      	mov	r3, r0
 80042f6:	460c      	mov	r4, r1
 80042f8:	4618      	mov	r0, r3
 80042fa:	4621      	mov	r1, r4
 80042fc:	a344      	add	r3, pc, #272	; (adr r3, 8004410 <lowlayer_scanFlow+0x248>)
 80042fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004302:	f7fc faa3 	bl	800084c <__aeabi_ddiv>
 8004306:	4603      	mov	r3, r0
 8004308:	460c      	mov	r4, r1
 800430a:	461a      	mov	r2, r3
 800430c:	4623      	mov	r3, r4
 800430e:	a142      	add	r1, pc, #264	; (adr r1, 8004418 <lowlayer_scanFlow+0x250>)
 8004310:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004314:	f7fb ffb8 	bl	8000288 <__aeabi_dsub>
 8004318:	4603      	mov	r3, r0
 800431a:	460c      	mov	r4, r1
		offset_setpoint[0]	= HARD_LIM0_NEG
 800431c:	4a53      	ldr	r2, [pc, #332]	; (800446c <lowlayer_scanFlow+0x2a4>)
 800431e:	e9c2 3400 	strd	r3, r4, [r2]
		offset_setpoint[1]	= HARD_LIM1_POS
				- DIR_ENCODER_1*offset_encoder[1]*2.0*PI/ENCODER_J1;
 8004322:	4b4b      	ldr	r3, [pc, #300]	; (8004450 <lowlayer_scanFlow+0x288>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	ee07 3a90 	vmov	s15, r3
 800432a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800432e:	ee17 0a90 	vmov	r0, s15
 8004332:	f7fc f909 	bl	8000548 <__aeabi_f2d>
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	f7fb ffa7 	bl	800028c <__adddf3>
 800433e:	4603      	mov	r3, r0
 8004340:	460c      	mov	r4, r1
 8004342:	4618      	mov	r0, r3
 8004344:	4621      	mov	r1, r4
 8004346:	a330      	add	r3, pc, #192	; (adr r3, 8004408 <lowlayer_scanFlow+0x240>)
 8004348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434c:	f7fc f954 	bl	80005f8 <__aeabi_dmul>
 8004350:	4603      	mov	r3, r0
 8004352:	460c      	mov	r4, r1
 8004354:	4618      	mov	r0, r3
 8004356:	4621      	mov	r1, r4
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	4b44      	ldr	r3, [pc, #272]	; (8004470 <lowlayer_scanFlow+0x2a8>)
 800435e:	f7fc fa75 	bl	800084c <__aeabi_ddiv>
 8004362:	4603      	mov	r3, r0
 8004364:	460c      	mov	r4, r1
 8004366:	461a      	mov	r2, r3
 8004368:	4623      	mov	r3, r4
 800436a:	a12d      	add	r1, pc, #180	; (adr r1, 8004420 <lowlayer_scanFlow+0x258>)
 800436c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004370:	f7fb ff8a 	bl	8000288 <__aeabi_dsub>
 8004374:	4603      	mov	r3, r0
 8004376:	460c      	mov	r4, r1
		offset_setpoint[1]	= HARD_LIM1_POS
 8004378:	4a3c      	ldr	r2, [pc, #240]	; (800446c <lowlayer_scanFlow+0x2a4>)
 800437a:	e9c2 3402 	strd	r3, r4, [r2, #8]
		offset_setpoint[2]	= HARD_LIM2_NEG
				- DIR_ENCODER_2*offset_encoder[2]/ENCODER_J2;
 800437e:	4b34      	ldr	r3, [pc, #208]	; (8004450 <lowlayer_scanFlow+0x288>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	ee07 3a90 	vmov	s15, r3
 8004386:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800438a:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8004474 <lowlayer_scanFlow+0x2ac>
 800438e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004392:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004478 <lowlayer_scanFlow+0x2b0>
 8004396:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800439a:	ee17 0a90 	vmov	r0, s15
 800439e:	f7fc f8d3 	bl	8000548 <__aeabi_f2d>
 80043a2:	4603      	mov	r3, r0
 80043a4:	460c      	mov	r4, r1
		offset_setpoint[2]	= HARD_LIM2_NEG
 80043a6:	4a31      	ldr	r2, [pc, #196]	; (800446c <lowlayer_scanFlow+0x2a4>)
 80043a8:	e9c2 3404 	strd	r3, r4, [r2, #16]
		offset_setpoint[3]  = HARD_LIM3_POS
				- offset_stepper*2.0*PI/GEAR_J3;
 80043ac:	4b2a      	ldr	r3, [pc, #168]	; (8004458 <lowlayer_scanFlow+0x290>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7fc f8b7 	bl	8000524 <__aeabi_i2d>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	f7fb ff67 	bl	800028c <__adddf3>
 80043be:	4603      	mov	r3, r0
 80043c0:	460c      	mov	r4, r1
 80043c2:	4618      	mov	r0, r3
 80043c4:	4621      	mov	r1, r4
 80043c6:	a310      	add	r3, pc, #64	; (adr r3, 8004408 <lowlayer_scanFlow+0x240>)
 80043c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043cc:	f7fc f914 	bl	80005f8 <__aeabi_dmul>
 80043d0:	4603      	mov	r3, r0
 80043d2:	460c      	mov	r4, r1
 80043d4:	4618      	mov	r0, r3
 80043d6:	4621      	mov	r1, r4
 80043d8:	a313      	add	r3, pc, #76	; (adr r3, 8004428 <lowlayer_scanFlow+0x260>)
 80043da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043de:	f7fc fa35 	bl	800084c <__aeabi_ddiv>
 80043e2:	4603      	mov	r3, r0
 80043e4:	460c      	mov	r4, r1
 80043e6:	461a      	mov	r2, r3
 80043e8:	4623      	mov	r3, r4
 80043ea:	a111      	add	r1, pc, #68	; (adr r1, 8004430 <lowlayer_scanFlow+0x268>)
 80043ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043f0:	f7fb ff4a 	bl	8000288 <__aeabi_dsub>
 80043f4:	4603      	mov	r3, r0
 80043f6:	460c      	mov	r4, r1
		offset_setpoint[3]  = HARD_LIM3_POS
 80043f8:	4a1c      	ldr	r2, [pc, #112]	; (800446c <lowlayer_scanFlow+0x2a4>)
 80043fa:	e9c2 3406 	strd	r3, r4, [r2, #24]

		return TRUE;
 80043fe:	2301      	movs	r3, #1
	}
}
 8004400:	4618      	mov	r0, r3
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	bd90      	pop	{r4, r7, pc}
 8004408:	60000000 	.word	0x60000000
 800440c:	400921fb 	.word	0x400921fb
 8004410:	00000000 	.word	0x00000000
 8004414:	40f38800 	.word	0x40f38800
 8004418:	40000000 	.word	0x40000000
 800441c:	bff9f17a 	.word	0xbff9f17a
 8004420:	80000000 	.word	0x80000000
 8004424:	40039716 	.word	0x40039716
 8004428:	a0000000 	.word	0xa0000000
 800442c:	40d3bca1 	.word	0x40d3bca1
 8004430:	a0000000 	.word	0xa0000000
 8004434:	4008330d 	.word	0x4008330d
 8004438:	20004ef0 	.word	0x20004ef0
 800443c:	20004ee0 	.word	0x20004ee0
 8004440:	0801b284 	.word	0x0801b284
 8004444:	40020c00 	.word	0x40020c00
 8004448:	20004ed0 	.word	0x20004ed0
 800444c:	20004ee4 	.word	0x20004ee4
 8004450:	20004f18 	.word	0x20004f18
 8004454:	20004ec0 	.word	0x20004ec0
 8004458:	20004ef4 	.word	0x20004ef4
 800445c:	0801b1ac 	.word	0x0801b1ac
 8004460:	0801b1c0 	.word	0x0801b1c0
 8004464:	0801b1d4 	.word	0x0801b1d4
 8004468:	0801b1e8 	.word	0x0801b1e8
 800446c:	20004ef8 	.word	0x20004ef8
 8004470:	40ff4000 	.word	0x40ff4000
 8004474:	4426aaab 	.word	0x4426aaab
 8004478:	400f1aa0 	.word	0x400f1aa0
 800447c:	00000000 	.word	0x00000000

08004480 <lowlayer_goToSoftLimit>:

uint8_t	lowlayer_goToSoftLimit(SCARA_PositionTypeDef *setpoint) {
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
	int8_t pulse[4] = {0, 0, 0 ,0};
 8004488:	2300      	movs	r3, #0
 800448a:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0;
 800448c:	2300      	movs	r3, #0
 800448e:	73fb      	strb	r3, [r7, #15]
	lowlayer_readSetPosition(setpoint);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f94d 	bl	8004730 <lowlayer_readSetPosition>
	if (setpoint->Theta1 < LIM_MIN_J0) {
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800449c:	a330      	add	r3, pc, #192	; (adr r3, 8004560 <lowlayer_goToSoftLimit+0xe0>)
 800449e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a2:	f7fc fb1b 	bl	8000adc <__aeabi_dcmplt>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d004      	beq.n	80044b6 <lowlayer_goToSoftLimit+0x36>
		pulse[0] = pulse_scan[0];
 80044ac:	2303      	movs	r3, #3
 80044ae:	723b      	strb	r3, [r7, #8]
		check++;
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
 80044b2:	3301      	adds	r3, #1
 80044b4:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta2 > LIM_MAX_J1) {
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 80044bc:	a32a      	add	r3, pc, #168	; (adr r3, 8004568 <lowlayer_goToSoftLimit+0xe8>)
 80044be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c2:	f7fc fb29 	bl	8000b18 <__aeabi_dcmpgt>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d004      	beq.n	80044d6 <lowlayer_goToSoftLimit+0x56>
		pulse[1] = pulse_scan[1];
 80044cc:	2305      	movs	r3, #5
 80044ce:	727b      	strb	r3, [r7, #9]
		check++;
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	3301      	adds	r3, #1
 80044d4:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->D3 < LIM_MIN_J2) {
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	f7fc fafa 	bl	8000adc <__aeabi_dcmplt>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d004      	beq.n	80044f8 <lowlayer_goToSoftLimit+0x78>
		pulse[2] = pulse_scan[2];
 80044ee:	2305      	movs	r3, #5
 80044f0:	72bb      	strb	r3, [r7, #10]
		check++;
 80044f2:	7bfb      	ldrb	r3, [r7, #15]
 80044f4:	3301      	adds	r3, #1
 80044f6:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta4 > LIM_MAX_J3) {
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 80044fe:	a31c      	add	r3, pc, #112	; (adr r3, 8004570 <lowlayer_goToSoftLimit+0xf0>)
 8004500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004504:	f7fc fb08 	bl	8000b18 <__aeabi_dcmpgt>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d004      	beq.n	8004518 <lowlayer_goToSoftLimit+0x98>
		pulse[3] = pulse_scan[3];
 800450e:	230a      	movs	r3, #10
 8004510:	72fb      	strb	r3, [r7, #11]
		check++;
 8004512:	7bfb      	ldrb	r3, [r7, #15]
 8004514:	3301      	adds	r3, #1
 8004516:	73fb      	strb	r3, [r7, #15]
	}

	if (check > 0) {
 8004518:	7bfb      	ldrb	r3, [r7, #15]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d013      	beq.n	8004546 <lowlayer_goToSoftLimit+0xc6>
		lowlayer_writePulse(pulse[0], -pulse[1], pulse[2], -pulse[3]);
 800451e:	f997 0008 	ldrsb.w	r0, [r7, #8]
 8004522:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8004526:	b2db      	uxtb	r3, r3
 8004528:	425b      	negs	r3, r3
 800452a:	b2db      	uxtb	r3, r3
 800452c:	b259      	sxtb	r1, r3
 800452e:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8004532:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004536:	b2db      	uxtb	r3, r3
 8004538:	425b      	negs	r3, r3
 800453a:	b2db      	uxtb	r3, r3
 800453c:	b25b      	sxtb	r3, r3
 800453e:	f000 fb4f 	bl	8004be0 <lowlayer_writePulse>
		return FALSE;
 8004542:	2300      	movs	r3, #0
 8004544:	e006      	b.n	8004554 <lowlayer_goToSoftLimit+0xd4>
	} else {
		lowlayer_writePulse(0, 0, 0, 0);
 8004546:	2300      	movs	r3, #0
 8004548:	2200      	movs	r2, #0
 800454a:	2100      	movs	r1, #0
 800454c:	2000      	movs	r0, #0
 800454e:	f000 fb47 	bl	8004be0 <lowlayer_writePulse>
		return TRUE;
 8004552:	2301      	movs	r3, #1
	}
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	f3af 8000 	nop.w
 8004560:	daaaaaab 	.word	0xdaaaaaab
 8004564:	bff7bc89 	.word	0xbff7bc89
 8004568:	88000000 	.word	0x88000000
 800456c:	4002d97c 	.word	0x4002d97c
 8004570:	daaaaaab 	.word	0xdaaaaaab
 8004574:	4007bc89 	.word	0x4007bc89

08004578 <lowlayer_readTruePosition>:

void	lowlayer_readTruePosition(SCARA_PositionTypeDef *true) {
 8004578:	b590      	push	{r4, r7, lr}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
	lowlayer_updateEncoder();
 8004580:	f000 fc78 	bl	8004e74 <lowlayer_updateEncoder>
	true->Theta1 = HARD_LIM0_NEG
			+ DIR_ENCODER_0*(position_encoder[0] - offset_encoder[0])*2.0*PI/ENCODER_J0; // Servo Motor
 8004584:	4b62      	ldr	r3, [pc, #392]	; (8004710 <lowlayer_readTruePosition+0x198>)
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	4b62      	ldr	r3, [pc, #392]	; (8004714 <lowlayer_readTruePosition+0x19c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	ee07 3a90 	vmov	s15, r3
 8004592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004596:	ee17 0a90 	vmov	r0, s15
 800459a:	f7fb ffd5 	bl	8000548 <__aeabi_f2d>
 800459e:	4602      	mov	r2, r0
 80045a0:	460b      	mov	r3, r1
 80045a2:	f7fb fe73 	bl	800028c <__adddf3>
 80045a6:	4603      	mov	r3, r0
 80045a8:	460c      	mov	r4, r1
 80045aa:	4618      	mov	r0, r3
 80045ac:	4621      	mov	r1, r4
 80045ae:	a34c      	add	r3, pc, #304	; (adr r3, 80046e0 <lowlayer_readTruePosition+0x168>)
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	f7fc f820 	bl	80005f8 <__aeabi_dmul>
 80045b8:	4603      	mov	r3, r0
 80045ba:	460c      	mov	r4, r1
 80045bc:	4618      	mov	r0, r3
 80045be:	4621      	mov	r1, r4
 80045c0:	a349      	add	r3, pc, #292	; (adr r3, 80046e8 <lowlayer_readTruePosition+0x170>)
 80045c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c6:	f7fc f941 	bl	800084c <__aeabi_ddiv>
 80045ca:	4603      	mov	r3, r0
 80045cc:	460c      	mov	r4, r1
 80045ce:	4618      	mov	r0, r3
 80045d0:	4621      	mov	r1, r4
 80045d2:	a347      	add	r3, pc, #284	; (adr r3, 80046f0 <lowlayer_readTruePosition+0x178>)
 80045d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d8:	f7fb fe56 	bl	8000288 <__aeabi_dsub>
 80045dc:	4603      	mov	r3, r0
 80045de:	460c      	mov	r4, r1
	true->Theta1 = HARD_LIM0_NEG
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	true->Theta2 = HARD_LIM1_POS
			+ DIR_ENCODER_1*(position_encoder[1] - offset_encoder[1])*2.0*PI/ENCODER_J1; // Servo Motor
 80045e6:	4b4a      	ldr	r3, [pc, #296]	; (8004710 <lowlayer_readTruePosition+0x198>)
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	4b4a      	ldr	r3, [pc, #296]	; (8004714 <lowlayer_readTruePosition+0x19c>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	ee07 3a90 	vmov	s15, r3
 80045f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045f8:	ee17 0a90 	vmov	r0, s15
 80045fc:	f7fb ffa4 	bl	8000548 <__aeabi_f2d>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	f7fb fe42 	bl	800028c <__adddf3>
 8004608:	4603      	mov	r3, r0
 800460a:	460c      	mov	r4, r1
 800460c:	4618      	mov	r0, r3
 800460e:	4621      	mov	r1, r4
 8004610:	a333      	add	r3, pc, #204	; (adr r3, 80046e0 <lowlayer_readTruePosition+0x168>)
 8004612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004616:	f7fb ffef 	bl	80005f8 <__aeabi_dmul>
 800461a:	4603      	mov	r3, r0
 800461c:	460c      	mov	r4, r1
 800461e:	4618      	mov	r0, r3
 8004620:	4621      	mov	r1, r4
 8004622:	f04f 0200 	mov.w	r2, #0
 8004626:	4b3c      	ldr	r3, [pc, #240]	; (8004718 <lowlayer_readTruePosition+0x1a0>)
 8004628:	f7fc f910 	bl	800084c <__aeabi_ddiv>
 800462c:	4603      	mov	r3, r0
 800462e:	460c      	mov	r4, r1
 8004630:	4618      	mov	r0, r3
 8004632:	4621      	mov	r1, r4
 8004634:	a330      	add	r3, pc, #192	; (adr r3, 80046f8 <lowlayer_readTruePosition+0x180>)
 8004636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463a:	f7fb fe27 	bl	800028c <__adddf3>
 800463e:	4603      	mov	r3, r0
 8004640:	460c      	mov	r4, r1
	true->Theta2 = HARD_LIM1_POS
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	true->D3	 = HARD_LIM2_NEG
			+ DIR_ENCODER_2*(position_encoder[2] - offset_encoder[2])/ENCODER_J2; // Servo Motor
 8004648:	4b31      	ldr	r3, [pc, #196]	; (8004710 <lowlayer_readTruePosition+0x198>)
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	4b31      	ldr	r3, [pc, #196]	; (8004714 <lowlayer_readTruePosition+0x19c>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800465a:	eeb1 7a67 	vneg.f32	s14, s15
 800465e:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800471c <lowlayer_readTruePosition+0x1a4>
 8004662:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004666:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8004720 <lowlayer_readTruePosition+0x1a8>
 800466a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800466e:	ee17 0a90 	vmov	r0, s15
 8004672:	f7fb ff69 	bl	8000548 <__aeabi_f2d>
 8004676:	4603      	mov	r3, r0
 8004678:	460c      	mov	r4, r1
	true->D3	 = HARD_LIM2_NEG
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	true->Theta4 = HARD_LIM3_POS
			+ (pulse_accumulate[3] - offset_stepper)*2.0*PI/GEAR_J3; // Stepper Motor
 8004680:	4b28      	ldr	r3, [pc, #160]	; (8004724 <lowlayer_readTruePosition+0x1ac>)
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	4b28      	ldr	r3, [pc, #160]	; (8004728 <lowlayer_readTruePosition+0x1b0>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	4618      	mov	r0, r3
 800468c:	f7fb ff4a 	bl	8000524 <__aeabi_i2d>
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	f7fb fdfa 	bl	800028c <__adddf3>
 8004698:	4603      	mov	r3, r0
 800469a:	460c      	mov	r4, r1
 800469c:	4618      	mov	r0, r3
 800469e:	4621      	mov	r1, r4
 80046a0:	a30f      	add	r3, pc, #60	; (adr r3, 80046e0 <lowlayer_readTruePosition+0x168>)
 80046a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a6:	f7fb ffa7 	bl	80005f8 <__aeabi_dmul>
 80046aa:	4603      	mov	r3, r0
 80046ac:	460c      	mov	r4, r1
 80046ae:	4618      	mov	r0, r3
 80046b0:	4621      	mov	r1, r4
 80046b2:	a313      	add	r3, pc, #76	; (adr r3, 8004700 <lowlayer_readTruePosition+0x188>)
 80046b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b8:	f7fc f8c8 	bl	800084c <__aeabi_ddiv>
 80046bc:	4603      	mov	r3, r0
 80046be:	460c      	mov	r4, r1
 80046c0:	4618      	mov	r0, r3
 80046c2:	4621      	mov	r1, r4
 80046c4:	a310      	add	r3, pc, #64	; (adr r3, 8004708 <lowlayer_readTruePosition+0x190>)
 80046c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ca:	f7fb fddf 	bl	800028c <__adddf3>
 80046ce:	4603      	mov	r3, r0
 80046d0:	460c      	mov	r4, r1
	true->Theta4 = HARD_LIM3_POS
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd90      	pop	{r4, r7, pc}
 80046e0:	60000000 	.word	0x60000000
 80046e4:	400921fb 	.word	0x400921fb
 80046e8:	00000000 	.word	0x00000000
 80046ec:	40f38800 	.word	0x40f38800
 80046f0:	40000000 	.word	0x40000000
 80046f4:	3ff9f17a 	.word	0x3ff9f17a
 80046f8:	80000000 	.word	0x80000000
 80046fc:	40039716 	.word	0x40039716
 8004700:	a0000000 	.word	0xa0000000
 8004704:	40d3bca1 	.word	0x40d3bca1
 8004708:	a0000000 	.word	0xa0000000
 800470c:	4008330d 	.word	0x4008330d
 8004710:	20004ed4 	.word	0x20004ed4
 8004714:	20004f18 	.word	0x20004f18
 8004718:	40ff4000 	.word	0x40ff4000
 800471c:	4426aaab 	.word	0x4426aaab
 8004720:	400f1aa0 	.word	0x400f1aa0
 8004724:	20004ec0 	.word	0x20004ec0
 8004728:	20004ef4 	.word	0x20004ef4
 800472c:	00000000 	.word	0x00000000

08004730 <lowlayer_readSetPosition>:

void	lowlayer_readSetPosition(SCARA_PositionTypeDef *setpoint) {
 8004730:	b5b0      	push	{r4, r5, r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
	setpoint->Theta1 = offset_setpoint[0] + pulse_accumulate[0]*2.0*PI/GEAR_J0;
 8004738:	4b53      	ldr	r3, [pc, #332]	; (8004888 <lowlayer_readSetPosition+0x158>)
 800473a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800473e:	4b53      	ldr	r3, [pc, #332]	; (800488c <lowlayer_readSetPosition+0x15c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f7fb feee 	bl	8000524 <__aeabi_i2d>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	f7fb fd9e 	bl	800028c <__adddf3>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	4610      	mov	r0, r2
 8004756:	4619      	mov	r1, r3
 8004758:	a345      	add	r3, pc, #276	; (adr r3, 8004870 <lowlayer_readSetPosition+0x140>)
 800475a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475e:	f7fb ff4b 	bl	80005f8 <__aeabi_dmul>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	4610      	mov	r0, r2
 8004768:	4619      	mov	r1, r3
 800476a:	a343      	add	r3, pc, #268	; (adr r3, 8004878 <lowlayer_readSetPosition+0x148>)
 800476c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004770:	f7fc f86c 	bl	800084c <__aeabi_ddiv>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4620      	mov	r0, r4
 800477a:	4629      	mov	r1, r5
 800477c:	f7fb fd86 	bl	800028c <__adddf3>
 8004780:	4603      	mov	r3, r0
 8004782:	460c      	mov	r4, r1
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	setpoint->Theta2 = offset_setpoint[1] + pulse_accumulate[1]*2.0*PI/GEAR_J1;
 800478a:	4b3f      	ldr	r3, [pc, #252]	; (8004888 <lowlayer_readSetPosition+0x158>)
 800478c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004790:	4b3e      	ldr	r3, [pc, #248]	; (800488c <lowlayer_readSetPosition+0x15c>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	4618      	mov	r0, r3
 8004796:	f7fb fec5 	bl	8000524 <__aeabi_i2d>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	f7fb fd75 	bl	800028c <__adddf3>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4610      	mov	r0, r2
 80047a8:	4619      	mov	r1, r3
 80047aa:	a331      	add	r3, pc, #196	; (adr r3, 8004870 <lowlayer_readSetPosition+0x140>)
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	f7fb ff22 	bl	80005f8 <__aeabi_dmul>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4610      	mov	r0, r2
 80047ba:	4619      	mov	r1, r3
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	4b33      	ldr	r3, [pc, #204]	; (8004890 <lowlayer_readSetPosition+0x160>)
 80047c2:	f7fc f843 	bl	800084c <__aeabi_ddiv>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4620      	mov	r0, r4
 80047cc:	4629      	mov	r1, r5
 80047ce:	f7fb fd5d 	bl	800028c <__adddf3>
 80047d2:	4603      	mov	r3, r0
 80047d4:	460c      	mov	r4, r1
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	setpoint->D3	 = offset_setpoint[2] + pulse_accumulate[2]/GEAR_J2;
 80047dc:	4b2a      	ldr	r3, [pc, #168]	; (8004888 <lowlayer_readSetPosition+0x158>)
 80047de:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80047e2:	4b2a      	ldr	r3, [pc, #168]	; (800488c <lowlayer_readSetPosition+0x15c>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	ee07 3a90 	vmov	s15, r3
 80047ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047ee:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8004894 <lowlayer_readSetPosition+0x164>
 80047f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80047f6:	ee16 0a90 	vmov	r0, s13
 80047fa:	f7fb fea5 	bl	8000548 <__aeabi_f2d>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	4620      	mov	r0, r4
 8004804:	4629      	mov	r1, r5
 8004806:	f7fb fd41 	bl	800028c <__adddf3>
 800480a:	4603      	mov	r3, r0
 800480c:	460c      	mov	r4, r1
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	setpoint->Theta4 = offset_setpoint[3] + pulse_accumulate[3]*2.0*PI/GEAR_J3;
 8004814:	4b1c      	ldr	r3, [pc, #112]	; (8004888 <lowlayer_readSetPosition+0x158>)
 8004816:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800481a:	4b1c      	ldr	r3, [pc, #112]	; (800488c <lowlayer_readSetPosition+0x15c>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	4618      	mov	r0, r3
 8004820:	f7fb fe80 	bl	8000524 <__aeabi_i2d>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	f7fb fd30 	bl	800028c <__adddf3>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	4610      	mov	r0, r2
 8004832:	4619      	mov	r1, r3
 8004834:	a30e      	add	r3, pc, #56	; (adr r3, 8004870 <lowlayer_readSetPosition+0x140>)
 8004836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483a:	f7fb fedd 	bl	80005f8 <__aeabi_dmul>
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	4610      	mov	r0, r2
 8004844:	4619      	mov	r1, r3
 8004846:	a30e      	add	r3, pc, #56	; (adr r3, 8004880 <lowlayer_readSetPosition+0x150>)
 8004848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484c:	f7fb fffe 	bl	800084c <__aeabi_ddiv>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4620      	mov	r0, r4
 8004856:	4629      	mov	r1, r5
 8004858:	f7fb fd18 	bl	800028c <__adddf3>
 800485c:	4603      	mov	r3, r0
 800485e:	460c      	mov	r4, r1
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 8004866:	bf00      	nop
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bdb0      	pop	{r4, r5, r7, pc}
 800486e:	bf00      	nop
 8004870:	60000000 	.word	0x60000000
 8004874:	400921fb 	.word	0x400921fb
 8004878:	00000000 	.word	0x00000000
 800487c:	40d38800 	.word	0x40d38800
 8004880:	a0000000 	.word	0xa0000000
 8004884:	40d3bca1 	.word	0x40d3bca1
 8004888:	20004ef8 	.word	0x20004ef8
 800488c:	20004ec0 	.word	0x20004ec0
 8004890:	40df4000 	.word	0x40df4000
 8004894:	42c80000 	.word	0x42c80000

08004898 <lowlayer_computeAndWritePulse>:

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 8004898:	b084      	sub	sp, #16
 800489a:	b590      	push	{r4, r7, lr}
 800489c:	b093      	sub	sp, #76	; 0x4c
 800489e:	af00      	add	r7, sp, #0
 80048a0:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80048a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 80048a8:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80048ac:	a3c4      	add	r3, pc, #784	; (adr r3, 8004bc0 <lowlayer_computeAndWritePulse+0x328>)
 80048ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b2:	f7fb fceb 	bl	800028c <__adddf3>
 80048b6:	4603      	mov	r3, r0
 80048b8:	460c      	mov	r4, r1
 80048ba:	4618      	mov	r0, r3
 80048bc:	4621      	mov	r1, r4
 80048be:	a3c2      	add	r3, pc, #776	; (adr r3, 8004bc8 <lowlayer_computeAndWritePulse+0x330>)
 80048c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c4:	f7fb fe98 	bl	80005f8 <__aeabi_dmul>
 80048c8:	4603      	mov	r3, r0
 80048ca:	460c      	mov	r4, r1
 80048cc:	4618      	mov	r0, r3
 80048ce:	4621      	mov	r1, r4
 80048d0:	a3b5      	add	r3, pc, #724	; (adr r3, 8004ba8 <lowlayer_computeAndWritePulse+0x310>)
 80048d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d6:	f7fb ffb9 	bl	800084c <__aeabi_ddiv>
 80048da:	4603      	mov	r3, r0
 80048dc:	460c      	mov	r4, r1
 80048de:	ec44 3b17 	vmov	d7, r3, r4
 80048e2:	eeb0 0a47 	vmov.f32	s0, s14
 80048e6:	eef0 0a67 	vmov.f32	s1, s15
 80048ea:	f014 ff79 	bl	80197e0 <round>
 80048ee:	ec54 3b10 	vmov	r3, r4, d0
 80048f2:	4618      	mov	r0, r3
 80048f4:	4621      	mov	r1, r4
 80048f6:	f7fc f957 	bl	8000ba8 <__aeabi_d2uiz>
 80048fa:	4603      	mov	r3, r0
 80048fc:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 80048fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004902:	a3b3      	add	r3, pc, #716	; (adr r3, 8004bd0 <lowlayer_computeAndWritePulse+0x338>)
 8004904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004908:	f7fb fcc0 	bl	800028c <__adddf3>
 800490c:	4603      	mov	r3, r0
 800490e:	460c      	mov	r4, r1
 8004910:	4618      	mov	r0, r3
 8004912:	4621      	mov	r1, r4
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	4baf      	ldr	r3, [pc, #700]	; (8004bd8 <lowlayer_computeAndWritePulse+0x340>)
 800491a:	f7fb fe6d 	bl	80005f8 <__aeabi_dmul>
 800491e:	4603      	mov	r3, r0
 8004920:	460c      	mov	r4, r1
 8004922:	4618      	mov	r0, r3
 8004924:	4621      	mov	r1, r4
 8004926:	a3a0      	add	r3, pc, #640	; (adr r3, 8004ba8 <lowlayer_computeAndWritePulse+0x310>)
 8004928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492c:	f7fb ff8e 	bl	800084c <__aeabi_ddiv>
 8004930:	4603      	mov	r3, r0
 8004932:	460c      	mov	r4, r1
 8004934:	ec44 3b17 	vmov	d7, r3, r4
 8004938:	eeb0 0a47 	vmov.f32	s0, s14
 800493c:	eef0 0a67 	vmov.f32	s1, s15
 8004940:	f014 ff4e 	bl	80197e0 <round>
 8004944:	ec54 3b10 	vmov	r3, r4, d0
 8004948:	4618      	mov	r0, r3
 800494a:	4621      	mov	r1, r4
 800494c:	f7fc f92c 	bl	8000ba8 <__aeabi_d2uiz>
 8004950:	4603      	mov	r3, r0
 8004952:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 8004954:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	4b9f      	ldr	r3, [pc, #636]	; (8004bdc <lowlayer_computeAndWritePulse+0x344>)
 800495e:	f7fb fe4b 	bl	80005f8 <__aeabi_dmul>
 8004962:	4603      	mov	r3, r0
 8004964:	460c      	mov	r4, r1
 8004966:	ec44 3b17 	vmov	d7, r3, r4
 800496a:	eeb0 0a47 	vmov.f32	s0, s14
 800496e:	eef0 0a67 	vmov.f32	s1, s15
 8004972:	f014 ff35 	bl	80197e0 <round>
 8004976:	ec54 3b10 	vmov	r3, r4, d0
 800497a:	4618      	mov	r0, r3
 800497c:	4621      	mov	r1, r4
 800497e:	f7fc f913 	bl	8000ba8 <__aeabi_d2uiz>
 8004982:	4603      	mov	r3, r0
 8004984:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 8004986:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800498a:	a389      	add	r3, pc, #548	; (adr r3, 8004bb0 <lowlayer_computeAndWritePulse+0x318>)
 800498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004990:	f7fb fc7c 	bl	800028c <__adddf3>
 8004994:	4603      	mov	r3, r0
 8004996:	460c      	mov	r4, r1
 8004998:	4618      	mov	r0, r3
 800499a:	4621      	mov	r1, r4
 800499c:	a386      	add	r3, pc, #536	; (adr r3, 8004bb8 <lowlayer_computeAndWritePulse+0x320>)
 800499e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a2:	f7fb fe29 	bl	80005f8 <__aeabi_dmul>
 80049a6:	4603      	mov	r3, r0
 80049a8:	460c      	mov	r4, r1
 80049aa:	4618      	mov	r0, r3
 80049ac:	4621      	mov	r1, r4
 80049ae:	a37e      	add	r3, pc, #504	; (adr r3, 8004ba8 <lowlayer_computeAndWritePulse+0x310>)
 80049b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b4:	f7fb ff4a 	bl	800084c <__aeabi_ddiv>
 80049b8:	4603      	mov	r3, r0
 80049ba:	460c      	mov	r4, r1
 80049bc:	ec44 3b17 	vmov	d7, r3, r4
 80049c0:	eeb0 0a47 	vmov.f32	s0, s14
 80049c4:	eef0 0a67 	vmov.f32	s1, s15
 80049c8:	f014 ff0a 	bl	80197e0 <round>
 80049cc:	ec54 3b10 	vmov	r3, r4, d0
 80049d0:	4618      	mov	r0, r3
 80049d2:	4621      	mov	r1, r4
 80049d4:	f7fc f8e8 	bl	8000ba8 <__aeabi_d2uiz>
 80049d8:	4603      	mov	r3, r0
 80049da:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 80049dc:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 80049e0:	a377      	add	r3, pc, #476	; (adr r3, 8004bc0 <lowlayer_computeAndWritePulse+0x328>)
 80049e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e6:	f7fb fc51 	bl	800028c <__adddf3>
 80049ea:	4603      	mov	r3, r0
 80049ec:	460c      	mov	r4, r1
 80049ee:	4618      	mov	r0, r3
 80049f0:	4621      	mov	r1, r4
 80049f2:	a375      	add	r3, pc, #468	; (adr r3, 8004bc8 <lowlayer_computeAndWritePulse+0x330>)
 80049f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f8:	f7fb fdfe 	bl	80005f8 <__aeabi_dmul>
 80049fc:	4603      	mov	r3, r0
 80049fe:	460c      	mov	r4, r1
 8004a00:	4618      	mov	r0, r3
 8004a02:	4621      	mov	r1, r4
 8004a04:	a368      	add	r3, pc, #416	; (adr r3, 8004ba8 <lowlayer_computeAndWritePulse+0x310>)
 8004a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0a:	f7fb ff1f 	bl	800084c <__aeabi_ddiv>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	460c      	mov	r4, r1
 8004a12:	ec44 3b17 	vmov	d7, r3, r4
 8004a16:	eeb0 0a47 	vmov.f32	s0, s14
 8004a1a:	eef0 0a67 	vmov.f32	s1, s15
 8004a1e:	f014 fedf 	bl	80197e0 <round>
 8004a22:	ec54 3b10 	vmov	r3, r4, d0
 8004a26:	4618      	mov	r0, r3
 8004a28:	4621      	mov	r1, r4
 8004a2a:	f7fc f8bd 	bl	8000ba8 <__aeabi_d2uiz>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 8004a32:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004a36:	a366      	add	r3, pc, #408	; (adr r3, 8004bd0 <lowlayer_computeAndWritePulse+0x338>)
 8004a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3c:	f7fb fc26 	bl	800028c <__adddf3>
 8004a40:	4603      	mov	r3, r0
 8004a42:	460c      	mov	r4, r1
 8004a44:	4618      	mov	r0, r3
 8004a46:	4621      	mov	r1, r4
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	4b62      	ldr	r3, [pc, #392]	; (8004bd8 <lowlayer_computeAndWritePulse+0x340>)
 8004a4e:	f7fb fdd3 	bl	80005f8 <__aeabi_dmul>
 8004a52:	4603      	mov	r3, r0
 8004a54:	460c      	mov	r4, r1
 8004a56:	4618      	mov	r0, r3
 8004a58:	4621      	mov	r1, r4
 8004a5a:	a353      	add	r3, pc, #332	; (adr r3, 8004ba8 <lowlayer_computeAndWritePulse+0x310>)
 8004a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a60:	f7fb fef4 	bl	800084c <__aeabi_ddiv>
 8004a64:	4603      	mov	r3, r0
 8004a66:	460c      	mov	r4, r1
 8004a68:	ec44 3b17 	vmov	d7, r3, r4
 8004a6c:	eeb0 0a47 	vmov.f32	s0, s14
 8004a70:	eef0 0a67 	vmov.f32	s1, s15
 8004a74:	f014 feb4 	bl	80197e0 <round>
 8004a78:	ec54 3b10 	vmov	r3, r4, d0
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	4621      	mov	r1, r4
 8004a80:	f7fc f892 	bl	8000ba8 <__aeabi_d2uiz>
 8004a84:	4603      	mov	r3, r0
 8004a86:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 8004a88:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8004a8c:	f04f 0200 	mov.w	r2, #0
 8004a90:	4b52      	ldr	r3, [pc, #328]	; (8004bdc <lowlayer_computeAndWritePulse+0x344>)
 8004a92:	f7fb fdb1 	bl	80005f8 <__aeabi_dmul>
 8004a96:	4603      	mov	r3, r0
 8004a98:	460c      	mov	r4, r1
 8004a9a:	ec44 3b17 	vmov	d7, r3, r4
 8004a9e:	eeb0 0a47 	vmov.f32	s0, s14
 8004aa2:	eef0 0a67 	vmov.f32	s1, s15
 8004aa6:	f014 fe9b 	bl	80197e0 <round>
 8004aaa:	ec54 3b10 	vmov	r3, r4, d0
 8004aae:	4618      	mov	r0, r3
 8004ab0:	4621      	mov	r1, r4
 8004ab2:	f7fc f879 	bl	8000ba8 <__aeabi_d2uiz>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 8004aba:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004abe:	a33c      	add	r3, pc, #240	; (adr r3, 8004bb0 <lowlayer_computeAndWritePulse+0x318>)
 8004ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac4:	f7fb fbe2 	bl	800028c <__adddf3>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	460c      	mov	r4, r1
 8004acc:	4618      	mov	r0, r3
 8004ace:	4621      	mov	r1, r4
 8004ad0:	a339      	add	r3, pc, #228	; (adr r3, 8004bb8 <lowlayer_computeAndWritePulse+0x320>)
 8004ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad6:	f7fb fd8f 	bl	80005f8 <__aeabi_dmul>
 8004ada:	4603      	mov	r3, r0
 8004adc:	460c      	mov	r4, r1
 8004ade:	4618      	mov	r0, r3
 8004ae0:	4621      	mov	r1, r4
 8004ae2:	a331      	add	r3, pc, #196	; (adr r3, 8004ba8 <lowlayer_computeAndWritePulse+0x310>)
 8004ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae8:	f7fb feb0 	bl	800084c <__aeabi_ddiv>
 8004aec:	4603      	mov	r3, r0
 8004aee:	460c      	mov	r4, r1
 8004af0:	ec44 3b17 	vmov	d7, r3, r4
 8004af4:	eeb0 0a47 	vmov.f32	s0, s14
 8004af8:	eef0 0a67 	vmov.f32	s1, s15
 8004afc:	f014 fe70 	bl	80197e0 <round>
 8004b00:	ec54 3b10 	vmov	r3, r4, d0
 8004b04:	4618      	mov	r0, r3
 8004b06:	4621      	mov	r1, r4
 8004b08:	f7fc f84e 	bl	8000ba8 <__aeabi_d2uiz>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 8004b10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	f04f 0400 	mov.w	r4, #0
 8004b1a:	e9c7 3408 	strd	r3, r4, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 8004b1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	f04f 0400 	mov.w	r4, #0
 8004b28:	e9c7 3406 	strd	r3, r4, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 8004b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	f04f 0400 	mov.w	r4, #0
 8004b36:	e9c7 3404 	strd	r3, r4, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 8004b3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	f04f 0400 	mov.w	r4, #0
 8004b44:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (abs(delta_var0) > 127
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	bfb8      	it	lt
 8004b4e:	425b      	neglt	r3, r3
 8004b50:	2b7f      	cmp	r3, #127	; 0x7f
 8004b52:	dc11      	bgt.n	8004b78 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var1) > 127
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	bfb8      	it	lt
 8004b5a:	425b      	neglt	r3, r3
 8004b5c:	2b7f      	cmp	r3, #127	; 0x7f
 8004b5e:	dc0b      	bgt.n	8004b78 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var2) > 127
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	bfb8      	it	lt
 8004b66:	425b      	neglt	r3, r3
 8004b68:	2b7f      	cmp	r3, #127	; 0x7f
 8004b6a:	dc05      	bgt.n	8004b78 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var3) > 127) {
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	bfb8      	it	lt
 8004b72:	425b      	neglt	r3, r3
 8004b74:	2b7f      	cmp	r3, #127	; 0x7f
 8004b76:	dd01      	ble.n	8004b7c <lowlayer_computeAndWritePulse+0x2e4>
		return FALSE;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	e00c      	b.n	8004b96 <lowlayer_computeAndWritePulse+0x2fe>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 8004b7c:	f997 0020 	ldrsb.w	r0, [r7, #32]
 8004b80:	f997 1018 	ldrsb.w	r1, [r7, #24]
 8004b84:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8004b88:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8004b8c:	f000 f828 	bl	8004be0 <lowlayer_writePulse>
 8004b90:	4603      	mov	r3, r0
 8004b92:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 8004b94:	79fb      	ldrb	r3, [r7, #7]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	374c      	adds	r7, #76	; 0x4c
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004ba0:	b004      	add	sp, #16
 8004ba2:	4770      	bx	lr
 8004ba4:	f3af 8000 	nop.w
 8004ba8:	60000000 	.word	0x60000000
 8004bac:	401921fb 	.word	0x401921fb
 8004bb0:	daaaaaab 	.word	0xdaaaaaab
 8004bb4:	4007bc89 	.word	0x4007bc89
 8004bb8:	a0000000 	.word	0xa0000000
 8004bbc:	40d3bca1 	.word	0x40d3bca1
 8004bc0:	daaaaaab 	.word	0xdaaaaaab
 8004bc4:	3ff7bc89 	.word	0x3ff7bc89
 8004bc8:	00000000 	.word	0x00000000
 8004bcc:	40d38800 	.word	0x40d38800
 8004bd0:	88000000 	.word	0x88000000
 8004bd4:	4002d97c 	.word	0x4002d97c
 8004bd8:	40df4000 	.word	0x40df4000
 8004bdc:	40590000 	.word	0x40590000

08004be0 <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 8004be0:	b590      	push	{r4, r7, lr}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4604      	mov	r4, r0
 8004be8:	4608      	mov	r0, r1
 8004bea:	4611      	mov	r1, r2
 8004bec:	461a      	mov	r2, r3
 8004bee:	4623      	mov	r3, r4
 8004bf0:	71fb      	strb	r3, [r7, #7]
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	71bb      	strb	r3, [r7, #6]
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	717b      	strb	r3, [r7, #5]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 8004bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	da06      	bge.n	8004c14 <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 8004c06:	79fb      	ldrb	r3, [r7, #7]
 8004c08:	425b      	negs	r3, r3
 8004c0a:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 8004c0c:	79fb      	ldrb	r3, [r7, #7]
 8004c0e:	425b      	negs	r3, r3
 8004c10:	75fb      	strb	r3, [r7, #23]
 8004c12:	e006      	b.n	8004c22 <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 8004c14:	79fb      	ldrb	r3, [r7, #7]
 8004c16:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 8004c18:	79fb      	ldrb	r3, [r7, #7]
 8004c1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c1e:	b25b      	sxtb	r3, r3
 8004c20:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 8004c22:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	da06      	bge.n	8004c38 <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 8004c2a:	79bb      	ldrb	r3, [r7, #6]
 8004c2c:	425b      	negs	r3, r3
 8004c2e:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 8004c30:	79bb      	ldrb	r3, [r7, #6]
 8004c32:	425b      	negs	r3, r3
 8004c34:	75bb      	strb	r3, [r7, #22]
 8004c36:	e006      	b.n	8004c46 <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 8004c38:	79bb      	ldrb	r3, [r7, #6]
 8004c3a:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 8004c3c:	79bb      	ldrb	r3, [r7, #6]
 8004c3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c42:	b25b      	sxtb	r3, r3
 8004c44:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 8004c46:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	da0b      	bge.n	8004c66 <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 8004c4e:	797b      	ldrb	r3, [r7, #5]
 8004c50:	425b      	negs	r3, r3
 8004c52:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 8004c54:	797b      	ldrb	r3, [r7, #5]
 8004c56:	425b      	negs	r3, r3
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	b25b      	sxtb	r3, r3
 8004c5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c60:	b25b      	sxtb	r3, r3
 8004c62:	757b      	strb	r3, [r7, #21]
 8004c64:	e003      	b.n	8004c6e <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 8004c66:	797b      	ldrb	r3, [r7, #5]
 8004c68:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 8004c6a:	797b      	ldrb	r3, [r7, #5]
 8004c6c:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 8004c6e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	da06      	bge.n	8004c84 <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 8004c76:	793b      	ldrb	r3, [r7, #4]
 8004c78:	425b      	negs	r3, r3
 8004c7a:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 8004c7c:	793b      	ldrb	r3, [r7, #4]
 8004c7e:	425b      	negs	r3, r3
 8004c80:	753b      	strb	r3, [r7, #20]
 8004c82:	e006      	b.n	8004c92 <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 8004c84:	793b      	ldrb	r3, [r7, #4]
 8004c86:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 8004c88:	793b      	ldrb	r3, [r7, #4]
 8004c8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c8e:	b25b      	sxtb	r3, r3
 8004c90:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 8004c92:	7cfb      	ldrb	r3, [r7, #19]
 8004c94:	2b4b      	cmp	r3, #75	; 0x4b
 8004c96:	d808      	bhi.n	8004caa <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 8004c98:	7cbb      	ldrb	r3, [r7, #18]
 8004c9a:	2b78      	cmp	r3, #120	; 0x78
 8004c9c:	d805      	bhi.n	8004caa <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 8004c9e:	7c7b      	ldrb	r3, [r7, #17]
 8004ca0:	2b7d      	cmp	r3, #125	; 0x7d
 8004ca2:	d802      	bhi.n	8004caa <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 8004ca4:	7c3b      	ldrb	r3, [r7, #16]
 8004ca6:	2b65      	cmp	r3, #101	; 0x65
 8004ca8:	d901      	bls.n	8004cae <lowlayer_writePulse+0xce>
		return FALSE;
 8004caa:	2300      	movs	r3, #0
 8004cac:	e04b      	b.n	8004d46 <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004cb4:	4826      	ldr	r0, [pc, #152]	; (8004d50 <lowlayer_writePulse+0x170>)
 8004cb6:	f007 f9e5 	bl	800c084 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004cc0:	4824      	ldr	r0, [pc, #144]	; (8004d54 <lowlayer_writePulse+0x174>)
 8004cc2:	f007 f9df 	bl	800c084 <HAL_GPIO_WritePin>
	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 8004cc6:	7dfb      	ldrb	r3, [r7, #23]
 8004cc8:	4619      	mov	r1, r3
 8004cca:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8004cce:	f7fe fbc3 	bl	8003458 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 8004cd2:	7dbb      	ldrb	r3, [r7, #22]
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4820      	ldr	r0, [pc, #128]	; (8004d58 <lowlayer_writePulse+0x178>)
 8004cd8:	f7fe fbbe 	bl	8003458 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 8004cdc:	7d7b      	ldrb	r3, [r7, #21]
 8004cde:	4619      	mov	r1, r3
 8004ce0:	481e      	ldr	r0, [pc, #120]	; (8004d5c <lowlayer_writePulse+0x17c>)
 8004ce2:	f7fe fbb9 	bl	8003458 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 8004ce6:	7d3b      	ldrb	r3, [r7, #20]
 8004ce8:	4619      	mov	r1, r3
 8004cea:	481d      	ldr	r0, [pc, #116]	; (8004d60 <lowlayer_writePulse+0x180>)
 8004cec:	f7fe fbb4 	bl	8003458 <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 8004cf0:	2364      	movs	r3, #100	; 0x64
 8004cf2:	73fb      	strb	r3, [r7, #15]
	
	 while (delay--);
 8004cf4:	bf00      	nop
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
 8004cf8:	1e5a      	subs	r2, r3, #1
 8004cfa:	73fa      	strb	r2, [r7, #15]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1fa      	bne.n	8004cf6 <lowlayer_writePulse+0x116>

//	int16_t wow = HAL_GPIO_ReadPin(CPLD_BUSY_GPIO_Port, CPLD_BUSY_Pin);
//	LOG_REPORT(" Busy: ", wow);
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 8004d00:	2201      	movs	r2, #1
 8004d02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d06:	4813      	ldr	r0, [pc, #76]	; (8004d54 <lowlayer_writePulse+0x174>)
 8004d08:	f007 f9bc 	bl	800c084 <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 8004d0c:	4b15      	ldr	r3, [pc, #84]	; (8004d64 <lowlayer_writePulse+0x184>)
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d14:	4413      	add	r3, r2
 8004d16:	4a13      	ldr	r2, [pc, #76]	; (8004d64 <lowlayer_writePulse+0x184>)
 8004d18:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 8004d1a:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <lowlayer_writePulse+0x184>)
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004d22:	4413      	add	r3, r2
 8004d24:	4a0f      	ldr	r2, [pc, #60]	; (8004d64 <lowlayer_writePulse+0x184>)
 8004d26:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 8004d28:	4b0e      	ldr	r3, [pc, #56]	; (8004d64 <lowlayer_writePulse+0x184>)
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004d30:	4413      	add	r3, r2
 8004d32:	4a0c      	ldr	r2, [pc, #48]	; (8004d64 <lowlayer_writePulse+0x184>)
 8004d34:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 8004d36:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <lowlayer_writePulse+0x184>)
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004d3e:	4413      	add	r3, r2
 8004d40:	4a08      	ldr	r2, [pc, #32]	; (8004d64 <lowlayer_writePulse+0x184>)
 8004d42:	60d3      	str	r3, [r2, #12]

	return TRUE;
 8004d44:	2301      	movs	r3, #1
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	371c      	adds	r7, #28
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd90      	pop	{r4, r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	40020000 	.word	0x40020000
 8004d54:	40020c00 	.word	0x40020c00
 8004d58:	60000002 	.word	0x60000002
 8004d5c:	60000004 	.word	0x60000004
 8004d60:	60000006 	.word	0x60000006
 8004d64:	20004ec0 	.word	0x20004ec0

08004d68 <lowlayer_resetEncoder>:

void	lowlayer_resetEncoder(void) {
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
	// Trigger
	uint8_t delay = 100;
 8004d6e:	2364      	movs	r3, #100	; 0x64
 8004d70:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
 8004d72:	2201      	movs	r2, #1
 8004d74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d78:	4809      	ldr	r0, [pc, #36]	; (8004da0 <lowlayer_resetEncoder+0x38>)
 8004d7a:	f007 f983 	bl	800c084 <HAL_GPIO_WritePin>
	while (delay--);
 8004d7e:	bf00      	nop
 8004d80:	79fb      	ldrb	r3, [r7, #7]
 8004d82:	1e5a      	subs	r2, r3, #1
 8004d84:	71fa      	strb	r2, [r7, #7]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1fa      	bne.n	8004d80 <lowlayer_resetEncoder+0x18>
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d90:	4803      	ldr	r0, [pc, #12]	; (8004da0 <lowlayer_resetEncoder+0x38>)
 8004d92:	f007 f977 	bl	800c084 <HAL_GPIO_WritePin>
}
 8004d96:	bf00      	nop
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	40020c00 	.word	0x40020c00

08004da4 <lowlayer_readLimitSwitch>:

uint8_t lowlayer_readLimitSwitch(void) {
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 8004daa:	4805      	ldr	r0, [pc, #20]	; (8004dc0 <lowlayer_readLimitSwitch+0x1c>)
 8004dac:	f7fe fb63 	bl	8003476 <FSMC_Read>
 8004db0:	4603      	mov	r3, r0
 8004db2:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 8004db4:	88fb      	ldrh	r3, [r7, #6]
 8004db6:	b2db      	uxtb	r3, r3
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	60000020 	.word	0x60000020

08004dc4 <lowlayer_readEncoder>:

int32_t lowlayer_readEncoder(uint8_t encoder_num) {
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	4603      	mov	r3, r0
 8004dcc:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (encoder_num <= 2) {
 8004dce:	79fb      	ldrb	r3, [r7, #7]
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d81c      	bhi.n	8004e0e <lowlayer_readEncoder+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4);
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8004dda:	3310      	adds	r3, #16
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fe fb49 	bl	8003476 <FSMC_Read>
 8004de4:	4603      	mov	r3, r0
 8004de6:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4 + 2);
 8004de8:	79fb      	ldrb	r3, [r7, #7]
 8004dea:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8004dee:	3310      	adds	r3, #16
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	3302      	adds	r3, #2
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7fe fb3e 	bl	8003476 <FSMC_Read>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8004dfe:	893b      	ldrh	r3, [r7, #8]
 8004e00:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	041a      	lsls	r2, r3, #16
 8004e06:	897b      	ldrh	r3, [r7, #10]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	e001      	b.n	8004e12 <lowlayer_readEncoder+0x4e>
	} else {
		data = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8004e12:	68fb      	ldr	r3, [r7, #12]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <lowlayer_readCapture>:

int32_t lowlayer_readCapture(uint8_t capture_num) {
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	4603      	mov	r3, r0
 8004e24:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 8004e26:	79fb      	ldrb	r3, [r7, #7]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d81c      	bhi.n	8004e66 <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 8004e2c:	79fb      	ldrb	r3, [r7, #7]
 8004e2e:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8004e32:	3318      	adds	r3, #24
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fe fb1d 	bl	8003476 <FSMC_Read>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 8004e40:	79fb      	ldrb	r3, [r7, #7]
 8004e42:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8004e46:	3318      	adds	r3, #24
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	3302      	adds	r3, #2
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fe fb12 	bl	8003476 <FSMC_Read>
 8004e52:	4603      	mov	r3, r0
 8004e54:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8004e56:	893b      	ldrh	r3, [r7, #8]
 8004e58:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	041a      	lsls	r2, r3, #16
 8004e5e:	897b      	ldrh	r3, [r7, #10]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	e001      	b.n	8004e6a <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <lowlayer_updateEncoder>:

void	lowlayer_updateEncoder(void) {
 8004e74:	b590      	push	{r4, r7, lr}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	71fb      	strb	r3, [r7, #7]
 8004e7e:	e00b      	b.n	8004e98 <lowlayer_updateEncoder+0x24>
		position_encoder[i] = lowlayer_readEncoder(i);
 8004e80:	79fc      	ldrb	r4, [r7, #7]
 8004e82:	79fb      	ldrb	r3, [r7, #7]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7ff ff9d 	bl	8004dc4 <lowlayer_readEncoder>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <lowlayer_updateEncoder+0x34>)
 8004e8e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8004e92:	79fb      	ldrb	r3, [r7, #7]
 8004e94:	3301      	adds	r3, #1
 8004e96:	71fb      	strb	r3, [r7, #7]
 8004e98:	79fb      	ldrb	r3, [r7, #7]
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d9f0      	bls.n	8004e80 <lowlayer_updateEncoder+0xc>
	}
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd90      	pop	{r4, r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	20004ed4 	.word	0x20004ed4

08004eac <lowlayer_updateCapture>:

void	lowlayer_updateCapture(void) {
 8004eac:	b590      	push	{r4, r7, lr}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	71fb      	strb	r3, [r7, #7]
 8004eb6:	e00b      	b.n	8004ed0 <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 8004eb8:	79fc      	ldrb	r4, [r7, #7]
 8004eba:	79fb      	ldrb	r3, [r7, #7]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7ff ffad 	bl	8004e1c <lowlayer_readCapture>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	4b06      	ldr	r3, [pc, #24]	; (8004ee0 <lowlayer_updateCapture+0x34>)
 8004ec6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8004eca:	79fb      	ldrb	r3, [r7, #7]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	71fb      	strb	r3, [r7, #7]
 8004ed0:	79fb      	ldrb	r3, [r7, #7]
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d9f0      	bls.n	8004eb8 <lowlayer_updateCapture+0xc>
	}
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd90      	pop	{r4, r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	20004ee4 	.word	0x20004ee4

08004ee4 <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 8004eea:	f7ff ff5b 	bl	8004da4 <lowlayer_readLimitSwitch>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	71fb      	strb	r3, [r7, #7]
 8004ef6:	e00d      	b.n	8004f14 <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 8004ef8:	79ba      	ldrb	r2, [r7, #6]
 8004efa:	79fb      	ldrb	r3, [r7, #7]
 8004efc:	fa42 f303 	asr.w	r3, r2, r3
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	79fb      	ldrb	r3, [r7, #7]
 8004f04:	f002 0201 	and.w	r2, r2, #1
 8004f08:	b2d1      	uxtb	r1, r2
 8004f0a:	4a06      	ldr	r2, [pc, #24]	; (8004f24 <lowlayer_updateLimit+0x40>)
 8004f0c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 8004f0e:	79fb      	ldrb	r3, [r7, #7]
 8004f10:	3301      	adds	r3, #1
 8004f12:	71fb      	strb	r3, [r7, #7]
 8004f14:	79fb      	ldrb	r3, [r7, #7]
 8004f16:	2b03      	cmp	r3, #3
 8004f18:	d9ee      	bls.n	8004ef8 <lowlayer_updateLimit+0x14>
	}
}
 8004f1a:	bf00      	nop
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20004ee0 	.word	0x20004ee0

08004f28 <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 8004f32:	79fb      	ldrb	r3, [r7, #7]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d006      	beq.n	8004f46 <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f3e:	4807      	ldr	r0, [pc, #28]	; (8004f5c <lowlayer_setOutput+0x34>)
 8004f40:	f007 f8a0 	bl	800c084 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 8004f44:	e005      	b.n	8004f52 <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 8004f46:	2200      	movs	r2, #0
 8004f48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f4c:	4803      	ldr	r0, [pc, #12]	; (8004f5c <lowlayer_setOutput+0x34>)
 8004f4e:	f007 f899 	bl	800c084 <HAL_GPIO_WritePin>
}
 8004f52:	bf00      	nop
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40020400 	.word	0x40020400

08004f60 <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 8004f60:	b580      	push	{r7, lr}
 8004f62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 8004f64:	2201      	movs	r2, #1
 8004f66:	2140      	movs	r1, #64	; 0x40
 8004f68:	4802      	ldr	r0, [pc, #8]	; (8004f74 <lowlayer_CPLD_Init+0x14>)
 8004f6a:	f007 f88b 	bl	800c084 <HAL_GPIO_WritePin>
}
 8004f6e:	bf00      	nop
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	40020c00 	.word	0x40020c00

08004f78 <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f82:	4808      	ldr	r0, [pc, #32]	; (8004fa4 <lowlayer_stepMotorInit+0x2c>)
 8004f84:	f007 f87e 	bl	800c084 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f8e:	4805      	ldr	r0, [pc, #20]	; (8004fa4 <lowlayer_stepMotorInit+0x2c>)
 8004f90:	f007 f878 	bl	800c084 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 8004f94:	2201      	movs	r2, #1
 8004f96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f9a:	4802      	ldr	r0, [pc, #8]	; (8004fa4 <lowlayer_stepMotorInit+0x2c>)
 8004f9c:	f007 f872 	bl	800c084 <HAL_GPIO_WritePin>
}
 8004fa0:	bf00      	nop
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	40020000 	.word	0x40020000

08004fa8 <scaraStartup>:
//											 "Over Velocity",
//											 "Over Accelerate",
//											 "Wrong Joint Num",
//											 "Wrong Coordinate"
//											};
void				scaraStartup(void) {
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	scaraSetScanFlag();
#endif
	lowlayer_CPLD_Init();
 8004fac:	f7ff ffd8 	bl	8004f60 <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 8004fb0:	f7ff ffe2 	bl	8004f78 <lowlayer_stepMotorInit>
	lowlayer_resetEncoder();
 8004fb4:	f7ff fed8 	bl	8004d68 <lowlayer_resetEncoder>
	//lowlayer_writePulse(0, 0, 0, 0);
}
 8004fb8:	bf00      	nop
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	0000      	movs	r0, r0
	...

08004fc0 <scara_test_InitDuty>:

SCARA_StatusTypeDef scara_test_InitDuty(DUTY_Command_TypeDef command)
{
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	b5b0      	push	{r4, r5, r7, lr}
 8004fc4:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8004fc8:	af5e      	add	r7, sp, #376	; 0x178
 8004fca:	f107 0ce8 	add.w	ip, r7, #232	; 0xe8
 8004fce:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;
	double total_s, angle_s;
	int8_t dir_angle;
	SCARA_PositionTypeDef target_point;
	command.target_point.roll = command.target_point.roll*PI/180.0;
 8004fd2:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8004fd6:	a38c      	add	r3, pc, #560	; (adr r3, 8005208 <scara_test_InitDuty+0x248>)
 8004fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fdc:	f7fb fb0c 	bl	80005f8 <__aeabi_dmul>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	4b88      	ldr	r3, [pc, #544]	; (8005210 <scara_test_InitDuty+0x250>)
 8004fee:	f7fb fc2d 	bl	800084c <__aeabi_ddiv>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
	if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8004ffa:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d12c      	bne.n	800505c <scara_test_InitDuty+0x9c>
		target_point.x 		= positionCurrent.x + command.target_point.x;
 8005002:	4b84      	ldr	r3, [pc, #528]	; (8005214 <scara_test_InitDuty+0x254>)
 8005004:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005008:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 800500c:	f7fb f93e 	bl	800028c <__adddf3>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		target_point.y 		= positionCurrent.y + command.target_point.y;
 8005018:	4b7e      	ldr	r3, [pc, #504]	; (8005214 <scara_test_InitDuty+0x254>)
 800501a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800501e:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8005022:	f7fb f933 	bl	800028c <__adddf3>
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		target_point.z 		= positionCurrent.z + command.target_point.z;
 800502e:	4b79      	ldr	r3, [pc, #484]	; (8005214 <scara_test_InitDuty+0x254>)
 8005030:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8005034:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8005038:	f7fb f928 	bl	800028c <__adddf3>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8005044:	4b73      	ldr	r3, [pc, #460]	; (8005214 <scara_test_InitDuty+0x254>)
 8005046:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800504a:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800504e:	f7fb f91d 	bl	800028c <__adddf3>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 800505a:	e016      	b.n	800508a <scara_test_InitDuty+0xca>
	} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 800505c:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 8005060:	2b00      	cmp	r3, #0
 8005062:	d110      	bne.n	8005086 <scara_test_InitDuty+0xc6>
		target_point.x 		= command.target_point.x;
 8005064:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8005068:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		target_point.y 		= command.target_point.y;
 800506c:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8005070:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		target_point.z 		= command.target_point.z;
 8005074:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8005078:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		target_point.roll	= command.target_point.roll;
 800507c:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8005080:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8005084:	e001      	b.n	800508a <scara_test_InitDuty+0xca>
	} else {
		return SCARA_STATUS_ERROR_COORDINATE;
 8005086:	230c      	movs	r3, #12
 8005088:	e0b7      	b.n	80051fa <scara_test_InitDuty+0x23a>
	}
	angle_s = target_point.roll - positionCurrent.roll;
 800508a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800508e:	4b61      	ldr	r3, [pc, #388]	; (8005214 <scara_test_InitDuty+0x254>)
 8005090:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8005094:	f7fb f8f8 	bl	8000288 <__aeabi_dsub>
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	dir_angle = 1;
 80050a0:	2301      	movs	r3, #1
 80050a2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	if ( angle_s < 0) {
 80050a6:	f04f 0200 	mov.w	r2, #0
 80050aa:	f04f 0300 	mov.w	r3, #0
 80050ae:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80050b2:	f7fb fd13 	bl	8000adc <__aeabi_dcmplt>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <scara_test_InitDuty+0x102>
		dir_angle = -1;
 80050bc:	23ff      	movs	r3, #255	; 0xff
 80050be:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	if ( fabs(angle_s) > PI) {
 80050c2:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 80050c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050ca:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80050ce:	a34e      	add	r3, pc, #312	; (adr r3, 8005208 <scara_test_InitDuty+0x248>)
 80050d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d4:	4620      	mov	r0, r4
 80050d6:	4629      	mov	r1, r5
 80050d8:	f7fb fd1e 	bl	8000b18 <__aeabi_dcmpgt>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d021      	beq.n	8005126 <scara_test_InitDuty+0x166>
		dir_angle = -dir_angle;
 80050e2:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80050e6:	425b      	negs	r3, r3
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		angle_s = (2*PI - fabsf(angle_s))*dir_angle;
 80050ee:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80050f2:	f7fb fd79 	bl	8000be8 <__aeabi_d2f>
 80050f6:	ee07 0a90 	vmov	s15, r0
 80050fa:	eef0 7ae7 	vabs.f32	s15, s15
 80050fe:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8005218 <scara_test_InitDuty+0x258>
 8005102:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005106:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 800510a:	ee07 3a90 	vmov	s15, r3
 800510e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005116:	ee17 0a90 	vmov	r0, s15
 800511a:	f7fb fa15 	bl	8000548 <__aeabi_f2d>
 800511e:	4603      	mov	r3, r0
 8005120:	460c      	mov	r4, r1
 8005122:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
	}
	myDUTY.time_total = command.time_total;
 8005126:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 800512a:	4a3c      	ldr	r2, [pc, #240]	; (800521c <scara_test_InitDuty+0x25c>)
 800512c:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005130:	e9c2 3400 	strd	r3, r4, [r2]
	myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 8005134:	4b39      	ldr	r3, [pc, #228]	; (800521c <scara_test_InitDuty+0x25c>)
 8005136:	2200      	movs	r2, #0
 8005138:	701a      	strb	r2, [r3, #0]
	myDUTY.task.roll_start = positionCurrent.roll;
 800513a:	4b36      	ldr	r3, [pc, #216]	; (8005214 <scara_test_InitDuty+0x254>)
 800513c:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8005140:	4a36      	ldr	r2, [pc, #216]	; (800521c <scara_test_InitDuty+0x25c>)
 8005142:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8005146:	e9c2 3400 	strd	r3, r4, [r2]
	myDUTY.task.path.path_type = DUTY_PATH_LINE;
 800514a:	4b34      	ldr	r3, [pc, #208]	; (800521c <scara_test_InitDuty+0x25c>)
 800514c:	2200      	movs	r2, #0
 800514e:	721a      	strb	r2, [r3, #8]
	myDUTY.task.trajectory_roll.lspb.total_s = angle_s;
 8005150:	4a32      	ldr	r2, [pc, #200]	; (800521c <scara_test_InitDuty+0x25c>)
 8005152:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8005156:	e9c2 34be 	strd	r3, r4, [r2, #760]	; 0x2f8
	myDUTY.task.trajectory_roll.lspb.dir = dir_angle;
 800515a:	4a30      	ldr	r2, [pc, #192]	; (800521c <scara_test_InitDuty+0x25c>)
 800515c:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8005160:	f882 3298 	strb.w	r3, [r2, #664]	; 0x298
	myDUTY.task.trajectory_roll.lspb.v_design = angle_s/command.time_total;
 8005164:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8005168:	461a      	mov	r2, r3
 800516a:	4623      	mov	r3, r4
 800516c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005170:	f7fb fb6c 	bl	800084c <__aeabi_ddiv>
 8005174:	4603      	mov	r3, r0
 8005176:	460c      	mov	r4, r1
 8005178:	4a28      	ldr	r2, [pc, #160]	; (800521c <scara_test_InitDuty+0x25c>)
 800517a:	e9c2 34b0 	strd	r3, r4, [r2, #704]	; 0x2c0
	myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 800517e:	4b27      	ldr	r3, [pc, #156]	; (800521c <scara_test_InitDuty+0x25c>)
 8005180:	2202      	movs	r2, #2
 8005182:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 8005186:	4c23      	ldr	r4, [pc, #140]	; (8005214 <scara_test_InitDuty+0x254>)
 8005188:	a82e      	add	r0, sp, #184	; 0xb8
 800518a:	463b      	mov	r3, r7
 800518c:	22c0      	movs	r2, #192	; 0xc0
 800518e:	4619      	mov	r1, r3
 8005190:	f010 fcf4 	bl	8015b7c <memcpy>
 8005194:	4668      	mov	r0, sp
 8005196:	f104 0308 	add.w	r3, r4, #8
 800519a:	22b8      	movs	r2, #184	; 0xb8
 800519c:	4619      	mov	r1, r3
 800519e:	f010 fced 	bl	8015b7c <memcpy>
 80051a2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80051a6:	481e      	ldr	r0, [pc, #120]	; (8005220 <scara_test_InitDuty+0x260>)
 80051a8:	f001 fbc6 	bl	8006938 <scaraInitLine>
 80051ac:	4603      	mov	r3, r0
 80051ae:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
	total_s = myDUTY.task.path.line.total_s;
 80051b2:	4b1a      	ldr	r3, [pc, #104]	; (800521c <scara_test_InitDuty+0x25c>)
 80051b4:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 80051b8:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
	if(status != SCARA_STATUS_OK){
 80051bc:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <scara_test_InitDuty+0x20a>
		return status;
 80051c4:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80051c8:	e017      	b.n	80051fa <scara_test_InitDuty+0x23a>
	}
	status = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, total_s, DUTY_MODE_INIT_QT, command.time_total);
 80051ca:	ed97 7b42 	vldr	d7, [r7, #264]	; 0x108
 80051ce:	eeb0 1a47 	vmov.f32	s2, s14
 80051d2:	eef0 1a67 	vmov.f32	s3, s15
 80051d6:	2203      	movs	r2, #3
 80051d8:	ed97 0b30 	vldr	d0, [r7, #192]	; 0xc0
 80051dc:	2104      	movs	r1, #4
 80051de:	4811      	ldr	r0, [pc, #68]	; (8005224 <scara_test_InitDuty+0x264>)
 80051e0:	f001 fde6 	bl	8006db0 <scaraInitLinear>
 80051e4:	4603      	mov	r3, r0
 80051e6:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
	if(status != SCARA_STATUS_OK){
 80051ea:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <scara_test_InitDuty+0x238>
		return status;
 80051f2:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80051f6:	e000      	b.n	80051fa <scara_test_InitDuty+0x23a>
	}

	return SCARA_STATUS_OK;
 80051f8:	2300      	movs	r3, #0
	
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	37d8      	adds	r7, #216	; 0xd8
 80051fe:	46bd      	mov	sp, r7
 8005200:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8005204:	b004      	add	sp, #16
 8005206:	4770      	bx	lr
 8005208:	60000000 	.word	0x60000000
 800520c:	400921fb 	.word	0x400921fb
 8005210:	40668000 	.word	0x40668000
 8005214:	20005ae8 	.word	0x20005ae8
 8005218:	40c90fdb 	.word	0x40c90fdb
 800521c:	20004f28 	.word	0x20004f28
 8005220:	20004f38 	.word	0x20004f38
 8005224:	20005190 	.word	0x20005190

08005228 <scaraInitDuty>:

/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 8005228:	b084      	sub	sp, #16
 800522a:	b5b0      	push	{r4, r5, r7, lr}
 800522c:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8005230:	af90      	add	r7, sp, #576	; 0x240
 8005232:	f507 7ce8 	add.w	ip, r7, #464	; 0x1d0
 8005236:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if(DUTY_SPACE_TASK == command.space_type) {
 800523a:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 800523e:	2b00      	cmp	r3, #0
 8005240:	f040 83b7 	bne.w	80059b2 <scaraInitDuty+0x78a>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 8005244:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 8005248:	a3b3      	add	r3, pc, #716	; (adr r3, 8005518 <scaraInitDuty+0x2f0>)
 800524a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524e:	f7fb f9d3 	bl	80005f8 <__aeabi_dmul>
 8005252:	4602      	mov	r2, r0
 8005254:	460b      	mov	r3, r1
 8005256:	4610      	mov	r0, r2
 8005258:	4619      	mov	r1, r3
 800525a:	f04f 0200 	mov.w	r2, #0
 800525e:	4bb0      	ldr	r3, [pc, #704]	; (8005520 <scaraInitDuty+0x2f8>)
 8005260:	f7fb faf4 	bl	800084c <__aeabi_ddiv>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 800526c:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005270:	2b01      	cmp	r3, #1
 8005272:	d130      	bne.n	80052d6 <scaraInitDuty+0xae>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 8005274:	4bab      	ldr	r3, [pc, #684]	; (8005524 <scaraInitDuty+0x2fc>)
 8005276:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800527a:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 800527e:	f7fb f805 	bl	800028c <__adddf3>
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	4639      	mov	r1, r7
 8005288:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= positionCurrent.y + command.target_point.y;
 800528c:	4ba5      	ldr	r3, [pc, #660]	; (8005524 <scaraInitDuty+0x2fc>)
 800528e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005292:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8005296:	f7fa fff9 	bl	800028c <__adddf3>
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	4639      	mov	r1, r7
 80052a0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= positionCurrent.z + command.target_point.z;
 80052a4:	4b9f      	ldr	r3, [pc, #636]	; (8005524 <scaraInitDuty+0x2fc>)
 80052a6:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80052aa:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 80052ae:	f7fa ffed 	bl	800028c <__adddf3>
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	4639      	mov	r1, r7
 80052b8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 80052bc:	4b99      	ldr	r3, [pc, #612]	; (8005524 <scaraInitDuty+0x2fc>)
 80052be:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80052c2:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80052c6:	f7fa ffe1 	bl	800028c <__adddf3>
 80052ca:	4602      	mov	r2, r0
 80052cc:	460b      	mov	r3, r1
 80052ce:	4639      	mov	r1, r7
 80052d0:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 80052d4:	e01b      	b.n	800530e <scaraInitDuty+0xe6>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80052d6:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d114      	bne.n	8005308 <scaraInitDuty+0xe0>
			target_point.x 		= command.target_point.x;
 80052de:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 80052e2:	4639      	mov	r1, r7
 80052e4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= command.target_point.y;
 80052e8:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80052ec:	4639      	mov	r1, r7
 80052ee:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= command.target_point.z;
 80052f2:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 80052f6:	4639      	mov	r1, r7
 80052f8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= command.target_point.roll;
 80052fc:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8005300:	4639      	mov	r1, r7
 8005302:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8005306:	e002      	b.n	800530e <scaraInitDuty+0xe6>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8005308:	230c      	movs	r3, #12
 800530a:	f001 bb02 	b.w	8006912 <scaraInitDuty+0x16ea>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 800530e:	463b      	mov	r3, r7
 8005310:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8005314:	4b83      	ldr	r3, [pc, #524]	; (8005524 <scaraInitDuty+0x2fc>)
 8005316:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800531a:	f7fa ffb5 	bl	8000288 <__aeabi_dsub>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
		dir_angle = 1;
 8005326:	2301      	movs	r3, #1
 8005328:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
		if ( angle_s < 0) {
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	f04f 0300 	mov.w	r3, #0
 8005334:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 8005338:	f7fb fbd0 	bl	8000adc <__aeabi_dcmplt>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <scaraInitDuty+0x120>
			dir_angle = -1;
 8005342:	23ff      	movs	r3, #255	; 0xff
 8005344:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
		}
		if ( fabs(angle_s) > PI) {
 8005348:	f8d7 41a8 	ldr.w	r4, [r7, #424]	; 0x1a8
 800534c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005350:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8005354:	a370      	add	r3, pc, #448	; (adr r3, 8005518 <scaraInitDuty+0x2f0>)
 8005356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535a:	4620      	mov	r0, r4
 800535c:	4629      	mov	r1, r5
 800535e:	f7fb fbdb 	bl	8000b18 <__aeabi_dcmpgt>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d021      	beq.n	80053ac <scaraInitDuty+0x184>
			dir_angle = -dir_angle;
 8005368:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 800536c:	425b      	negs	r3, r3
 800536e:	b2db      	uxtb	r3, r3
 8005370:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
			angle_s = (2*PI - fabsf(angle_s))*dir_angle;
 8005374:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 8005378:	f7fb fc36 	bl	8000be8 <__aeabi_d2f>
 800537c:	ee07 0a90 	vmov	s15, r0
 8005380:	eef0 7ae7 	vabs.f32	s15, s15
 8005384:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8005528 <scaraInitDuty+0x300>
 8005388:	ee37 7a67 	vsub.f32	s14, s14, s15
 800538c:	f997 31a7 	ldrsb.w	r3, [r7, #423]	; 0x1a7
 8005390:	ee07 3a90 	vmov	s15, r3
 8005394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800539c:	ee17 0a90 	vmov	r0, s15
 80053a0:	f7fb f8d2 	bl	8000548 <__aeabi_f2d>
 80053a4:	4603      	mov	r3, r0
 80053a6:	460c      	mov	r4, r1
 80053a8:	e9c7 346a 	strd	r3, r4, [r7, #424]	; 0x1a8
		}


		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 80053ac:	4b5f      	ldr	r3, [pc, #380]	; (800552c <scaraInitDuty+0x304>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 80053b2:	4b5c      	ldr	r3, [pc, #368]	; (8005524 <scaraInitDuty+0x2fc>)
 80053b4:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80053b8:	4a5c      	ldr	r2, [pc, #368]	; (800552c <scaraInitDuty+0x304>)
 80053ba:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 80053be:	e9c2 3400 	strd	r3, r4, [r2]
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 80053c2:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d11f      	bne.n	800540a <scaraInitDuty+0x1e2>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 80053ca:	4b58      	ldr	r3, [pc, #352]	; (800552c <scaraInitDuty+0x304>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 80053d0:	4c54      	ldr	r4, [pc, #336]	; (8005524 <scaraInitDuty+0x2fc>)
 80053d2:	463b      	mov	r3, r7
 80053d4:	a82e      	add	r0, sp, #184	; 0xb8
 80053d6:	4619      	mov	r1, r3
 80053d8:	23c0      	movs	r3, #192	; 0xc0
 80053da:	461a      	mov	r2, r3
 80053dc:	f010 fbce 	bl	8015b7c <memcpy>
 80053e0:	4668      	mov	r0, sp
 80053e2:	f104 0308 	add.w	r3, r4, #8
 80053e6:	22b8      	movs	r2, #184	; 0xb8
 80053e8:	4619      	mov	r1, r3
 80053ea:	f010 fbc7 	bl	8015b7c <memcpy>
 80053ee:	e894 000c 	ldmia.w	r4, {r2, r3}
 80053f2:	484f      	ldr	r0, [pc, #316]	; (8005530 <scaraInitDuty+0x308>)
 80053f4:	f001 faa0 	bl	8006938 <scaraInitLine>
 80053f8:	4603      	mov	r3, r0
 80053fa:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
			total_s = myDUTY.task.path.line.total_s;
 80053fe:	4b4b      	ldr	r3, [pc, #300]	; (800552c <scaraInitDuty+0x304>)
 8005400:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8005404:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
 8005408:	e07d      	b.n	8005506 <scaraInitDuty+0x2de>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 800540a:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 800540e:	2b01      	cmp	r3, #1
 8005410:	d176      	bne.n	8005500 <scaraInitDuty+0x2d8>
			SCARA_PositionTypeDef	center_point;
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005412:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005416:	2b01      	cmp	r3, #1
 8005418:	d12d      	bne.n	8005476 <scaraInitDuty+0x24e>
				center_point.x 		= positionCurrent.x + command.sub_point.x;
 800541a:	4b42      	ldr	r3, [pc, #264]	; (8005524 <scaraInitDuty+0x2fc>)
 800541c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005420:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 8005424:	461a      	mov	r2, r3
 8005426:	4623      	mov	r3, r4
 8005428:	f7fa ff30 	bl	800028c <__adddf3>
 800542c:	4603      	mov	r3, r0
 800542e:	460c      	mov	r4, r1
 8005430:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8005434:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
				center_point.y 		= positionCurrent.y + command.sub_point.y;
 8005438:	4b3a      	ldr	r3, [pc, #232]	; (8005524 <scaraInitDuty+0x2fc>)
 800543a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800543e:	e9d7 34c2 	ldrd	r3, r4, [r7, #776]	; 0x308
 8005442:	461a      	mov	r2, r3
 8005444:	4623      	mov	r3, r4
 8005446:	f7fa ff21 	bl	800028c <__adddf3>
 800544a:	4603      	mov	r3, r0
 800544c:	460c      	mov	r4, r1
 800544e:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8005452:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
				center_point.z 		= positionCurrent.z + command.sub_point.z;
 8005456:	4b33      	ldr	r3, [pc, #204]	; (8005524 <scaraInitDuty+0x2fc>)
 8005458:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800545c:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 8005460:	461a      	mov	r2, r3
 8005462:	4623      	mov	r3, r4
 8005464:	f7fa ff12 	bl	800028c <__adddf3>
 8005468:	4603      	mov	r3, r0
 800546a:	460c      	mov	r4, r1
 800546c:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8005470:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
 8005474:	e019      	b.n	80054aa <scaraInitDuty+0x282>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005476:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 800547a:	2b00      	cmp	r3, #0
 800547c:	d112      	bne.n	80054a4 <scaraInitDuty+0x27c>
				center_point.x 		= command.target_point.x;
 800547e:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8005482:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8005486:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
				center_point.y 		= command.target_point.y;
 800548a:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 800548e:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8005492:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
				center_point.z 		= command.target_point.z;
 8005496:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 800549a:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800549e:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
 80054a2:	e002      	b.n	80054aa <scaraInitDuty+0x282>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 80054a4:	230c      	movs	r3, #12
			return SCARA_STATUS_ERROR_COORDINATE;
 80054a6:	f001 ba34 	b.w	8006912 <scaraInitDuty+0x16ea>
			}

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 80054aa:	4b20      	ldr	r3, [pc, #128]	; (800552c <scaraInitDuty+0x304>)
 80054ac:	2201      	movs	r2, #1
 80054ae:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 80054b0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80054b4:	4c1b      	ldr	r4, [pc, #108]	; (8005524 <scaraInitDuty+0x2fc>)
 80054b6:	938e      	str	r3, [sp, #568]	; 0x238
 80054b8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80054bc:	a85e      	add	r0, sp, #376	; 0x178
 80054be:	4619      	mov	r1, r3
 80054c0:	23c0      	movs	r3, #192	; 0xc0
 80054c2:	461a      	mov	r2, r3
 80054c4:	f010 fb5a 	bl	8015b7c <memcpy>
 80054c8:	463b      	mov	r3, r7
 80054ca:	a82e      	add	r0, sp, #184	; 0xb8
 80054cc:	4619      	mov	r1, r3
 80054ce:	23c0      	movs	r3, #192	; 0xc0
 80054d0:	461a      	mov	r2, r3
 80054d2:	f010 fb53 	bl	8015b7c <memcpy>
 80054d6:	4668      	mov	r0, sp
 80054d8:	f104 0308 	add.w	r3, r4, #8
 80054dc:	22b8      	movs	r2, #184	; 0xb8
 80054de:	4619      	mov	r1, r3
 80054e0:	f010 fb4c 	bl	8015b7c <memcpy>
 80054e4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80054e8:	4812      	ldr	r0, [pc, #72]	; (8005534 <scaraInitDuty+0x30c>)
 80054ea:	f001 fae9 	bl	8006ac0 <scaraInitCircle>
 80054ee:	4603      	mov	r3, r0
 80054f0:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
										positionCurrent,
										target_point,
										center_point,
										command.sub_para_int );
			total_s = myDUTY.task.path.circle.total_s;
 80054f4:	4b0d      	ldr	r3, [pc, #52]	; (800552c <scaraInitDuty+0x304>)
 80054f6:	e9d3 343a 	ldrd	r3, r4, [r3, #232]	; 0xe8
 80054fa:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
 80054fe:	e002      	b.n	8005506 <scaraInitDuty+0x2de>

		} else {
			return SCARA_STATUS_ERROR_TASK;
 8005500:	2303      	movs	r3, #3
 8005502:	f001 ba06 	b.w	8006912 <scaraInitDuty+0x16ea>
		}

		if ( SCARA_STATUS_OK != status) {
 8005506:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 800550a:	2b00      	cmp	r3, #0
 800550c:	d014      	beq.n	8005538 <scaraInitDuty+0x310>
			return status;
 800550e:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 8005512:	f001 b9fe 	b.w	8006912 <scaraInitDuty+0x16ea>
 8005516:	bf00      	nop
 8005518:	60000000 	.word	0x60000000
 800551c:	400921fb 	.word	0x400921fb
 8005520:	40668000 	.word	0x40668000
 8005524:	20005ae8 	.word	0x20005ae8
 8005528:	40c90fdb 	.word	0x40c90fdb
 800552c:	20004f28 	.word	0x20004f28
 8005530:	20004f38 	.word	0x20004f38
 8005534:	20004fa8 	.word	0x20004fa8
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 8005538:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 800553c:	2b00      	cmp	r3, #0
 800553e:	f040 80ed 	bne.w	800571c <scaraInitDuty+0x4f4>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005542:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005546:	2b01      	cmp	r3, #1
 8005548:	d155      	bne.n	80055f6 <scaraInitDuty+0x3ce>
//				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
//				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
//						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
//				myDUTY.time_total = command.time_total;

				myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
 800554a:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 800554e:	4a9b      	ldr	r2, [pc, #620]	; (80057bc <scaraInitDuty+0x594>)
 8005550:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005554:	4b99      	ldr	r3, [pc, #612]	; (80057bc <scaraInitDuty+0x594>)
 8005556:	2200      	movs	r2, #0
 8005558:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB1(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 800555c:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005560:	ed97 6b7c 	vldr	d6, [r7, #496]	; 0x1f0
 8005564:	eeb0 2a46 	vmov.f32	s4, s12
 8005568:	eef0 2a66 	vmov.f32	s5, s13
 800556c:	eeb0 1a47 	vmov.f32	s2, s14
 8005570:	eef0 1a67 	vmov.f32	s3, s15
 8005574:	2201      	movs	r2, #1
 8005576:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 800557a:	2104      	movs	r1, #4
 800557c:	4890      	ldr	r0, [pc, #576]	; (80057c0 <scaraInitDuty+0x598>)
 800557e:	f001 fc63 	bl	8006e48 <scaraInitLSPB1>
 8005582:	4603      	mov	r3, r0
 8005584:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);

				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8005588:	4a8c      	ldr	r2, [pc, #560]	; (80057bc <scaraInitDuty+0x594>)
 800558a:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 800558e:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
 8005592:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005596:	4a89      	ldr	r2, [pc, #548]	; (80057bc <scaraInitDuty+0x594>)
 8005598:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800559c:	e9c2 3400 	strd	r3, r4, [r2]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 80055a0:	4b86      	ldr	r3, [pc, #536]	; (80057bc <scaraInitDuty+0x594>)
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total);
 80055a8:	f997 31a7 	ldrsb.w	r3, [r7, #423]	; 0x1a7
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7fa ffb9 	bl	8000524 <__aeabi_i2d>
 80055b2:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 80055b6:	f7fb f81f 	bl	80005f8 <__aeabi_dmul>
 80055ba:	4603      	mov	r3, r0
 80055bc:	460c      	mov	r4, r1
 80055be:	ec44 3b16 	vmov	d6, r3, r4
 80055c2:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 80055c6:	eeb0 1a47 	vmov.f32	s2, s14
 80055ca:	eef0 1a67 	vmov.f32	s3, s15
 80055ce:	2203      	movs	r2, #3
 80055d0:	eeb0 0a46 	vmov.f32	s0, s12
 80055d4:	eef0 0a66 	vmov.f32	s1, s13
 80055d8:	2105      	movs	r1, #5
 80055da:	487a      	ldr	r0, [pc, #488]	; (80057c4 <scaraInitDuty+0x59c>)
 80055dc:	f001 fbe8 	bl	8006db0 <scaraInitLinear>
 80055e0:	4603      	mov	r3, r0
 80055e2:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
				myDUTY.time_total = command.time_total;
 80055e6:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80055ea:	4a74      	ldr	r2, [pc, #464]	; (80057bc <scaraInitDuty+0x594>)
 80055ec:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80055f0:	e9c2 3400 	strd	r3, r4, [r2]
 80055f4:	e1cc      	b.n	8005990 <scaraInitDuty+0x768>
			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80055f6:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f040 808b 	bne.w	8005716 <scaraInitDuty+0x4ee>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005600:	4b6e      	ldr	r3, [pc, #440]	; (80057bc <scaraInitDuty+0x594>)
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8005608:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 800560c:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005610:	eeb0 2a46 	vmov.f32	s4, s12
 8005614:	eef0 2a66 	vmov.f32	s5, s13
 8005618:	eeb0 1a47 	vmov.f32	s2, s14
 800561c:	eef0 1a67 	vmov.f32	s3, s15
 8005620:	2200      	movs	r2, #0
 8005622:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005626:	2104      	movs	r1, #4
 8005628:	4865      	ldr	r0, [pc, #404]	; (80057c0 <scaraInitDuty+0x598>)
 800562a:	f001 fe69 	bl	8007300 <scaraInitLSPB>
 800562e:	4603      	mov	r3, r0
 8005630:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005634:	4b61      	ldr	r3, [pc, #388]	; (80057bc <scaraInitDuty+0x594>)
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 800563c:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005640:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005644:	eeb0 2a46 	vmov.f32	s4, s12
 8005648:	eef0 2a66 	vmov.f32	s5, s13
 800564c:	eeb0 1a47 	vmov.f32	s2, s14
 8005650:	eef0 1a67 	vmov.f32	s3, s15
 8005654:	2200      	movs	r2, #0
 8005656:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 800565a:	2105      	movs	r1, #5
 800565c:	485a      	ldr	r0, [pc, #360]	; (80057c8 <scaraInitDuty+0x5a0>)
 800565e:	f001 fe4f 	bl	8007300 <scaraInitLSPB>
 8005662:	4603      	mov	r3, r0
 8005664:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// Synchronous time end
				if(myDUTY.task.trajectory_3d.lspb.Tf > myDUTY.task.trajectory_roll.lspb.Tf) {
 8005668:	4b54      	ldr	r3, [pc, #336]	; (80057bc <scaraInitDuty+0x594>)
 800566a:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 800566e:	4b53      	ldr	r3, [pc, #332]	; (80057bc <scaraInitDuty+0x594>)
 8005670:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8005674:	461a      	mov	r2, r3
 8005676:	4623      	mov	r3, r4
 8005678:	f7fb fa4e 	bl	8000b18 <__aeabi_dcmpgt>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d024      	beq.n	80056cc <scaraInitDuty+0x4a4>
					myDUTY.task.trajectory_roll.lspb.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
 8005682:	4b4e      	ldr	r3, [pc, #312]	; (80057bc <scaraInitDuty+0x594>)
 8005684:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8005688:	4a4c      	ldr	r2, [pc, #304]	; (80057bc <scaraInitDuty+0x594>)
 800568a:	e9c2 34ba 	strd	r3, r4, [r2, #744]	; 0x2e8
					status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 800568e:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005692:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005696:	eeb0 2a46 	vmov.f32	s4, s12
 800569a:	eef0 2a66 	vmov.f32	s5, s13
 800569e:	eeb0 1a47 	vmov.f32	s2, s14
 80056a2:	eef0 1a67 	vmov.f32	s3, s15
 80056a6:	2201      	movs	r2, #1
 80056a8:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 80056ac:	2105      	movs	r1, #5
 80056ae:	4846      	ldr	r0, [pc, #280]	; (80057c8 <scaraInitDuty+0x5a0>)
 80056b0:	f001 fe26 	bl	8007300 <scaraInitLSPB>
 80056b4:	4603      	mov	r3, r0
 80056b6:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 80056ba:	4b40      	ldr	r3, [pc, #256]	; (80057bc <scaraInitDuty+0x594>)
 80056bc:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 80056c0:	4a3e      	ldr	r2, [pc, #248]	; (80057bc <scaraInitDuty+0x594>)
 80056c2:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80056c6:	e9c2 3400 	strd	r3, r4, [r2]
 80056ca:	e161      	b.n	8005990 <scaraInitDuty+0x768>
				} else {
					myDUTY.task.trajectory_3d.lspb.Tf = myDUTY.task.trajectory_roll.lspb.Tf;
 80056cc:	4b3b      	ldr	r3, [pc, #236]	; (80057bc <scaraInitDuty+0x594>)
 80056ce:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 80056d2:	4a3a      	ldr	r2, [pc, #232]	; (80057bc <scaraInitDuty+0x594>)
 80056d4:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
					status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 80056d8:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80056dc:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80056e0:	eeb0 2a46 	vmov.f32	s4, s12
 80056e4:	eef0 2a66 	vmov.f32	s5, s13
 80056e8:	eeb0 1a47 	vmov.f32	s2, s14
 80056ec:	eef0 1a67 	vmov.f32	s3, s15
 80056f0:	2201      	movs	r2, #1
 80056f2:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 80056f6:	2104      	movs	r1, #4
 80056f8:	4831      	ldr	r0, [pc, #196]	; (80057c0 <scaraInitDuty+0x598>)
 80056fa:	f001 fe01 	bl	8007300 <scaraInitLSPB>
 80056fe:	4603      	mov	r3, r0
 8005700:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.lspb.Tf;
 8005704:	4b2d      	ldr	r3, [pc, #180]	; (80057bc <scaraInitDuty+0x594>)
 8005706:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 800570a:	4a2c      	ldr	r2, [pc, #176]	; (80057bc <scaraInitDuty+0x594>)
 800570c:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005710:	e9c2 3400 	strd	r3, r4, [r2]
 8005714:	e13c      	b.n	8005990 <scaraInitDuty+0x768>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 8005716:	2308      	movs	r3, #8
 8005718:	f001 b8fb 	b.w	8006912 <scaraInitDuty+0x16ea>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 800571c:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8005720:	2b01      	cmp	r3, #1
 8005722:	f040 80ea 	bne.w	80058fa <scaraInitDuty+0x6d2>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005726:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800572a:	2b01      	cmp	r3, #1
 800572c:	d152      	bne.n	80057d4 <scaraInitDuty+0x5ac>
				myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
 800572e:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005732:	4a22      	ldr	r2, [pc, #136]	; (80057bc <scaraInitDuty+0x594>)
 8005734:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005738:	4b20      	ldr	r3, [pc, #128]	; (80057bc <scaraInitDuty+0x594>)
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8005740:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005744:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005748:	eeb0 2a46 	vmov.f32	s4, s12
 800574c:	eef0 2a66 	vmov.f32	s5, s13
 8005750:	eeb0 1a47 	vmov.f32	s2, s14
 8005754:	eef0 1a67 	vmov.f32	s3, s15
 8005758:	2201      	movs	r2, #1
 800575a:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 800575e:	2104      	movs	r1, #4
 8005760:	481a      	ldr	r0, [pc, #104]	; (80057cc <scaraInitDuty+0x5a4>)
 8005762:	f002 f9ad 	bl	8007ac0 <scaraInitScurve>
 8005766:	4603      	mov	r3, r0
 8005768:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
						 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				myDUTY.task.trajectory_roll.scurve.Tf = command.time_total;
 800576c:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005770:	4a12      	ldr	r2, [pc, #72]	; (80057bc <scaraInitDuty+0x594>)
 8005772:	e9c2 34de 	strd	r3, r4, [r2, #888]	; 0x378
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005776:	4b11      	ldr	r3, [pc, #68]	; (80057bc <scaraInitDuty+0x594>)
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 800577e:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005782:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005786:	eeb0 2a46 	vmov.f32	s4, s12
 800578a:	eef0 2a66 	vmov.f32	s5, s13
 800578e:	eeb0 1a47 	vmov.f32	s2, s14
 8005792:	eef0 1a67 	vmov.f32	s3, s15
 8005796:	2201      	movs	r2, #1
 8005798:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 800579c:	2105      	movs	r1, #5
 800579e:	480c      	ldr	r0, [pc, #48]	; (80057d0 <scaraInitDuty+0x5a8>)
 80057a0:	f002 f98e 	bl	8007ac0 <scaraInitScurve>
 80057a4:	4603      	mov	r3, r0
 80057a6:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				myDUTY.time_total = command.time_total;
 80057aa:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80057ae:	4a03      	ldr	r2, [pc, #12]	; (80057bc <scaraInitDuty+0x594>)
 80057b0:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80057b4:	e9c2 3400 	strd	r3, r4, [r2]
 80057b8:	e0ea      	b.n	8005990 <scaraInitDuty+0x768>
 80057ba:	bf00      	nop
 80057bc:	20004f28 	.word	0x20004f28
 80057c0:	20005040 	.word	0x20005040
 80057c4:	20005310 	.word	0x20005310
 80057c8:	200051c0 	.word	0x200051c0
 80057cc:	200050c0 	.word	0x200050c0
 80057d0:	20005240 	.word	0x20005240

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80057d4:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f040 808b 	bne.w	80058f4 <scaraInitDuty+0x6cc>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80057de:	4bc0      	ldr	r3, [pc, #768]	; (8005ae0 <scaraInitDuty+0x8b8>)
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 80057e6:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80057ea:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80057ee:	eeb0 2a46 	vmov.f32	s4, s12
 80057f2:	eef0 2a66 	vmov.f32	s5, s13
 80057f6:	eeb0 1a47 	vmov.f32	s2, s14
 80057fa:	eef0 1a67 	vmov.f32	s3, s15
 80057fe:	2200      	movs	r2, #0
 8005800:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005804:	2104      	movs	r1, #4
 8005806:	48b7      	ldr	r0, [pc, #732]	; (8005ae4 <scaraInitDuty+0x8bc>)
 8005808:	f002 f95a 	bl	8007ac0 <scaraInitScurve>
 800580c:	4603      	mov	r3, r0
 800580e:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005812:	4bb3      	ldr	r3, [pc, #716]	; (8005ae0 <scaraInitDuty+0x8b8>)
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 800581a:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 800581e:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005822:	eeb0 2a46 	vmov.f32	s4, s12
 8005826:	eef0 2a66 	vmov.f32	s5, s13
 800582a:	eeb0 1a47 	vmov.f32	s2, s14
 800582e:	eef0 1a67 	vmov.f32	s3, s15
 8005832:	2200      	movs	r2, #0
 8005834:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 8005838:	2105      	movs	r1, #5
 800583a:	48ab      	ldr	r0, [pc, #684]	; (8005ae8 <scaraInitDuty+0x8c0>)
 800583c:	f002 f940 	bl	8007ac0 <scaraInitScurve>
 8005840:	4603      	mov	r3, r0
 8005842:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// synchronous time end
				if(myDUTY.task.trajectory_3d.scurve.Tf > myDUTY.task.trajectory_roll.scurve.Tf) {
 8005846:	4ba6      	ldr	r3, [pc, #664]	; (8005ae0 <scaraInitDuty+0x8b8>)
 8005848:	e9d3 017e 	ldrd	r0, r1, [r3, #504]	; 0x1f8
 800584c:	4ba4      	ldr	r3, [pc, #656]	; (8005ae0 <scaraInitDuty+0x8b8>)
 800584e:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 8005852:	461a      	mov	r2, r3
 8005854:	4623      	mov	r3, r4
 8005856:	f7fb f95f 	bl	8000b18 <__aeabi_dcmpgt>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d024      	beq.n	80058aa <scaraInitDuty+0x682>
					myDUTY.task.trajectory_roll.scurve.Tf = myDUTY.task.trajectory_3d.scurve.Tf;
 8005860:	4b9f      	ldr	r3, [pc, #636]	; (8005ae0 <scaraInitDuty+0x8b8>)
 8005862:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8005866:	4a9e      	ldr	r2, [pc, #632]	; (8005ae0 <scaraInitDuty+0x8b8>)
 8005868:	e9c2 34de 	strd	r3, r4, [r2, #888]	; 0x378
					status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 800586c:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005870:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005874:	eeb0 2a46 	vmov.f32	s4, s12
 8005878:	eef0 2a66 	vmov.f32	s5, s13
 800587c:	eeb0 1a47 	vmov.f32	s2, s14
 8005880:	eef0 1a67 	vmov.f32	s3, s15
 8005884:	2201      	movs	r2, #1
 8005886:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 800588a:	2105      	movs	r1, #5
 800588c:	4896      	ldr	r0, [pc, #600]	; (8005ae8 <scaraInitDuty+0x8c0>)
 800588e:	f002 f917 	bl	8007ac0 <scaraInitScurve>
 8005892:	4603      	mov	r3, r0
 8005894:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8005898:	4b91      	ldr	r3, [pc, #580]	; (8005ae0 <scaraInitDuty+0x8b8>)
 800589a:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 800589e:	4a90      	ldr	r2, [pc, #576]	; (8005ae0 <scaraInitDuty+0x8b8>)
 80058a0:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80058a4:	e9c2 3400 	strd	r3, r4, [r2]
 80058a8:	e072      	b.n	8005990 <scaraInitDuty+0x768>
				} else {
					myDUTY.task.trajectory_3d.scurve.Tf = myDUTY.task.trajectory_roll.scurve.Tf;
 80058aa:	4b8d      	ldr	r3, [pc, #564]	; (8005ae0 <scaraInitDuty+0x8b8>)
 80058ac:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 80058b0:	4a8b      	ldr	r2, [pc, #556]	; (8005ae0 <scaraInitDuty+0x8b8>)
 80058b2:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
					status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 80058b6:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80058ba:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80058be:	eeb0 2a46 	vmov.f32	s4, s12
 80058c2:	eef0 2a66 	vmov.f32	s5, s13
 80058c6:	eeb0 1a47 	vmov.f32	s2, s14
 80058ca:	eef0 1a67 	vmov.f32	s3, s15
 80058ce:	2201      	movs	r2, #1
 80058d0:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 80058d4:	2104      	movs	r1, #4
 80058d6:	4883      	ldr	r0, [pc, #524]	; (8005ae4 <scaraInitDuty+0x8bc>)
 80058d8:	f002 f8f2 	bl	8007ac0 <scaraInitScurve>
 80058dc:	4603      	mov	r3, r0
 80058de:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.scurve.Tf;
 80058e2:	4b7f      	ldr	r3, [pc, #508]	; (8005ae0 <scaraInitDuty+0x8b8>)
 80058e4:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 80058e8:	4a7d      	ldr	r2, [pc, #500]	; (8005ae0 <scaraInitDuty+0x8b8>)
 80058ea:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80058ee:	e9c2 3400 	strd	r3, r4, [r2]
 80058f2:	e04d      	b.n	8005990 <scaraInitDuty+0x768>
				}
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 80058f4:	2308      	movs	r3, #8
 80058f6:	f001 b80c 	b.w	8006912 <scaraInitDuty+0x16ea>
			}
		}else if(DUTY_TRAJECTORY_LINEAR == command.trajec_type){
 80058fa:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d143      	bne.n	800598a <scaraInitDuty+0x762>
			myDUTY.time_total = command.time_total;
 8005902:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005906:	4a76      	ldr	r2, [pc, #472]	; (8005ae0 <scaraInitDuty+0x8b8>)
 8005908:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 800590c:	e9c2 3400 	strd	r3, r4, [r2]
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8005910:	4a73      	ldr	r2, [pc, #460]	; (8005ae0 <scaraInitDuty+0x8b8>)
 8005912:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8005916:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 800591a:	4b71      	ldr	r3, [pc, #452]	; (8005ae0 <scaraInitDuty+0x8b8>)
 800591c:	2202      	movs	r2, #2
 800591e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8005922:	4b6f      	ldr	r3, [pc, #444]	; (8005ae0 <scaraInitDuty+0x8b8>)
 8005924:	2202      	movs	r2, #2
 8005926:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, total_s, DUTY_MODE_INIT_QT, command.time_total);
 800592a:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 800592e:	eeb0 1a47 	vmov.f32	s2, s14
 8005932:	eef0 1a67 	vmov.f32	s3, s15
 8005936:	2203      	movs	r2, #3
 8005938:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 800593c:	2104      	movs	r1, #4
 800593e:	486b      	ldr	r0, [pc, #428]	; (8005aec <scaraInitDuty+0x8c4>)
 8005940:	f001 fa36 	bl	8006db0 <scaraInitLinear>
 8005944:	4603      	mov	r3, r0
 8005946:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total);
 800594a:	f997 31a7 	ldrsb.w	r3, [r7, #423]	; 0x1a7
 800594e:	4618      	mov	r0, r3
 8005950:	f7fa fde8 	bl	8000524 <__aeabi_i2d>
 8005954:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 8005958:	f7fa fe4e 	bl	80005f8 <__aeabi_dmul>
 800595c:	4603      	mov	r3, r0
 800595e:	460c      	mov	r4, r1
 8005960:	ec44 3b16 	vmov	d6, r3, r4
 8005964:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 8005968:	eeb0 1a47 	vmov.f32	s2, s14
 800596c:	eef0 1a67 	vmov.f32	s3, s15
 8005970:	2203      	movs	r2, #3
 8005972:	eeb0 0a46 	vmov.f32	s0, s12
 8005976:	eef0 0a66 	vmov.f32	s1, s13
 800597a:	2105      	movs	r1, #5
 800597c:	485c      	ldr	r0, [pc, #368]	; (8005af0 <scaraInitDuty+0x8c8>)
 800597e:	f001 fa17 	bl	8006db0 <scaraInitLinear>
 8005982:	4603      	mov	r3, r0
 8005984:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
 8005988:	e002      	b.n	8005990 <scaraInitDuty+0x768>
		}else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 800598a:	2305      	movs	r3, #5
 800598c:	f000 bfc1 	b.w	8006912 <scaraInitDuty+0x16ea>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 8005990:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <scaraInitDuty+0x778>
			return status1;
 8005998:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 800599c:	f000 bfb9 	b.w	8006912 <scaraInitDuty+0x16ea>
		}
		if ( SCARA_STATUS_OK != status2) {
 80059a0:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 8786 	beq.w	80068b6 <scaraInitDuty+0x168e>
			return status2;
 80059aa:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 80059ae:	f000 bfb0 	b.w	8006912 <scaraInitDuty+0x16ea>
		}


	
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 80059b2:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	f040 877b 	bne.w	80068b2 <scaraInitDuty+0x168a>
		/*----------- Space Joint ------------*/
		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 80059bc:	4b48      	ldr	r3, [pc, #288]	; (8005ae0 <scaraInitDuty+0x8b8>)
 80059be:	2201      	movs	r2, #1
 80059c0:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 80059c2:	4b4c      	ldr	r3, [pc, #304]	; (8005af4 <scaraInitDuty+0x8cc>)
 80059c4:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 80059c8:	4a45      	ldr	r2, [pc, #276]	; (8005ae0 <scaraInitDuty+0x8b8>)
 80059ca:	f602 2218 	addw	r2, r2, #2584	; 0xa18
 80059ce:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 80059d2:	4b48      	ldr	r3, [pc, #288]	; (8005af4 <scaraInitDuty+0x8cc>)
 80059d4:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80059d8:	4a41      	ldr	r2, [pc, #260]	; (8005ae0 <scaraInitDuty+0x8b8>)
 80059da:	f502 6222 	add.w	r2, r2, #2592	; 0xa20
 80059de:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 80059e2:	4b44      	ldr	r3, [pc, #272]	; (8005af4 <scaraInitDuty+0x8cc>)
 80059e4:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 80059e8:	4a3d      	ldr	r2, [pc, #244]	; (8005ae0 <scaraInitDuty+0x8b8>)
 80059ea:	f602 2228 	addw	r2, r2, #2600	; 0xa28
 80059ee:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 80059f2:	4b40      	ldr	r3, [pc, #256]	; (8005af4 <scaraInitDuty+0x8cc>)
 80059f4:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 80059f8:	4a39      	ldr	r2, [pc, #228]	; (8005ae0 <scaraInitDuty+0x8b8>)
 80059fa:	f502 6223 	add.w	r2, r2, #2608	; 0xa30
 80059fe:	e9c2 3400 	strd	r3, r4, [r2]

		//-----Joint Single
		if ( DUTY_JOINT_SINGLE == command.joint_type) {
 8005a02:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f040 83e5 	bne.w	80061d6 <scaraInitDuty+0xfae>
			// Trajectory 1 profile
			double s, abs_position;
			switch(command.sub_para_int) {
 8005a0c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005a10:	2b03      	cmp	r3, #3
 8005a12:	f200 8156 	bhi.w	8005cc2 <scaraInitDuty+0xa9a>
 8005a16:	a201      	add	r2, pc, #4	; (adr r2, 8005a1c <scaraInitDuty+0x7f4>)
 8005a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1c:	08005a2d 	.word	0x08005a2d
 8005a20:	08005afd 	.word	0x08005afd
 8005a24:	08005ba3 	.word	0x08005ba3
 8005a28:	08005c1f 	.word	0x08005c1f
			case 0:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8005a2c:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005a30:	a329      	add	r3, pc, #164	; (adr r3, 8005ad8 <scaraInitDuty+0x8b0>)
 8005a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a36:	f7fa fddf 	bl	80005f8 <__aeabi_dmul>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	460c      	mov	r4, r1
 8005a3e:	4618      	mov	r0, r3
 8005a40:	4621      	mov	r1, r4
 8005a42:	f04f 0200 	mov.w	r2, #0
 8005a46:	4b2c      	ldr	r3, [pc, #176]	; (8005af8 <scaraInitDuty+0x8d0>)
 8005a48:	f7fa ff00 	bl	800084c <__aeabi_ddiv>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	460c      	mov	r4, r1
 8005a50:	e9c7 347a 	strd	r3, r4, [r7, #488]	; 0x1e8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005a54:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d113      	bne.n	8005a84 <scaraInitDuty+0x85c>
					abs_position = myDUTY.joint.theta1_start + command.sub_para_double;
 8005a5c:	4b20      	ldr	r3, [pc, #128]	; (8005ae0 <scaraInitDuty+0x8b8>)
 8005a5e:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8005a62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a66:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	4623      	mov	r3, r4
 8005a6e:	f7fa fc0d 	bl	800028c <__adddf3>
 8005a72:	4603      	mov	r3, r0
 8005a74:	460c      	mov	r4, r1
 8005a76:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8005a7a:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005a7e:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005a82:	e01a      	b.n	8005aba <scaraInitDuty+0x892>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005a84:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d113      	bne.n	8005ab4 <scaraInitDuty+0x88c>
					abs_position = command.sub_para_double;
 8005a8c:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005a90:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.theta1_start;
 8005a94:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005a98:	4b11      	ldr	r3, [pc, #68]	; (8005ae0 <scaraInitDuty+0x8b8>)
 8005a9a:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8005a9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	4623      	mov	r3, r4
 8005aa6:	f7fa fbef 	bl	8000288 <__aeabi_dsub>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	460c      	mov	r4, r1
 8005aae:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005ab2:	e002      	b.n	8005aba <scaraInitDuty+0x892>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005ab4:	230c      	movs	r3, #12
 8005ab6:	f000 bf2c 	b.w	8006912 <scaraInitDuty+0x16ea>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J0, abs_position)) {
 8005aba:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8005abe:	2000      	movs	r0, #0
 8005ac0:	f004 fb42 	bl	800a148 <scaraCheckWorkSpace1>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 80fe 	beq.w	8005cc8 <scaraInitDuty+0xaa0>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005acc:	2307      	movs	r3, #7
 8005ace:	f000 bf20 	b.w	8006912 <scaraInitDuty+0x16ea>
 8005ad2:	bf00      	nop
 8005ad4:	f3af 8000 	nop.w
 8005ad8:	60000000 	.word	0x60000000
 8005adc:	400921fb 	.word	0x400921fb
 8005ae0:	20004f28 	.word	0x20004f28
 8005ae4:	200050c0 	.word	0x200050c0
 8005ae8:	20005240 	.word	0x20005240
 8005aec:	20005190 	.word	0x20005190
 8005af0:	20005310 	.word	0x20005310
 8005af4:	20005ae8 	.word	0x20005ae8
 8005af8:	40668000 	.word	0x40668000
				}
				break;
			case 1:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8005afc:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005b00:	a39f      	add	r3, pc, #636	; (adr r3, 8005d80 <scaraInitDuty+0xb58>)
 8005b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b06:	f7fa fd77 	bl	80005f8 <__aeabi_dmul>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	460c      	mov	r4, r1
 8005b0e:	4618      	mov	r0, r3
 8005b10:	4621      	mov	r1, r4
 8005b12:	f04f 0200 	mov.w	r2, #0
 8005b16:	4b9c      	ldr	r3, [pc, #624]	; (8005d88 <scaraInitDuty+0xb60>)
 8005b18:	f7fa fe98 	bl	800084c <__aeabi_ddiv>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	460c      	mov	r4, r1
 8005b20:	e9c7 347a 	strd	r3, r4, [r7, #488]	; 0x1e8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005b24:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d113      	bne.n	8005b54 <scaraInitDuty+0x92c>
					abs_position = myDUTY.joint.theta2_start + command.sub_para_double;
 8005b2c:	4b97      	ldr	r3, [pc, #604]	; (8005d8c <scaraInitDuty+0xb64>)
 8005b2e:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8005b32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b36:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	4623      	mov	r3, r4
 8005b3e:	f7fa fba5 	bl	800028c <__adddf3>
 8005b42:	4603      	mov	r3, r0
 8005b44:	460c      	mov	r4, r1
 8005b46:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8005b4a:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005b4e:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005b52:	e01a      	b.n	8005b8a <scaraInitDuty+0x962>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005b54:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d113      	bne.n	8005b84 <scaraInitDuty+0x95c>
					abs_position = command.sub_para_double;
 8005b5c:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005b60:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.theta2_start;
 8005b64:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005b68:	4b88      	ldr	r3, [pc, #544]	; (8005d8c <scaraInitDuty+0xb64>)
 8005b6a:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8005b6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b72:	461a      	mov	r2, r3
 8005b74:	4623      	mov	r3, r4
 8005b76:	f7fa fb87 	bl	8000288 <__aeabi_dsub>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	460c      	mov	r4, r1
 8005b7e:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005b82:	e002      	b.n	8005b8a <scaraInitDuty+0x962>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005b84:	230c      	movs	r3, #12
 8005b86:	f000 bec4 	b.w	8006912 <scaraInitDuty+0x16ea>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J1, abs_position)) {
 8005b8a:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8005b8e:	2001      	movs	r0, #1
 8005b90:	f004 fada 	bl	800a148 <scaraCheckWorkSpace1>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 8098 	beq.w	8005ccc <scaraInitDuty+0xaa4>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005b9c:	2307      	movs	r3, #7
 8005b9e:	f000 beb8 	b.w	8006912 <scaraInitDuty+0x16ea>
				}
				break;
			case 2:
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005ba2:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d113      	bne.n	8005bd2 <scaraInitDuty+0x9aa>
					abs_position = myDUTY.joint.d3_start + command.sub_para_double;
 8005baa:	4b78      	ldr	r3, [pc, #480]	; (8005d8c <scaraInitDuty+0xb64>)
 8005bac:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8005bb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005bb4:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005bb8:	461a      	mov	r2, r3
 8005bba:	4623      	mov	r3, r4
 8005bbc:	f7fa fb66 	bl	800028c <__adddf3>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8005bc8:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005bcc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005bd0:	e01a      	b.n	8005c08 <scaraInitDuty+0x9e0>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005bd2:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d113      	bne.n	8005c02 <scaraInitDuty+0x9da>
					abs_position = command.sub_para_double;
 8005bda:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005bde:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.d3_start;
 8005be2:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005be6:	4b69      	ldr	r3, [pc, #420]	; (8005d8c <scaraInitDuty+0xb64>)
 8005be8:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8005bec:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	4623      	mov	r3, r4
 8005bf4:	f7fa fb48 	bl	8000288 <__aeabi_dsub>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	460c      	mov	r4, r1
 8005bfc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005c00:	e002      	b.n	8005c08 <scaraInitDuty+0x9e0>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005c02:	230c      	movs	r3, #12
 8005c04:	f000 be85 	b.w	8006912 <scaraInitDuty+0x16ea>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J2, abs_position)) {
 8005c08:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8005c0c:	2002      	movs	r0, #2
 8005c0e:	f004 fa9b 	bl	800a148 <scaraCheckWorkSpace1>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d05b      	beq.n	8005cd0 <scaraInitDuty+0xaa8>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005c18:	2307      	movs	r3, #7
 8005c1a:	f000 be7a 	b.w	8006912 <scaraInitDuty+0x16ea>
				}
				break;
			case 3:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8005c1e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005c22:	a357      	add	r3, pc, #348	; (adr r3, 8005d80 <scaraInitDuty+0xb58>)
 8005c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c28:	f7fa fce6 	bl	80005f8 <__aeabi_dmul>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	460c      	mov	r4, r1
 8005c30:	4618      	mov	r0, r3
 8005c32:	4621      	mov	r1, r4
 8005c34:	f04f 0200 	mov.w	r2, #0
 8005c38:	4b53      	ldr	r3, [pc, #332]	; (8005d88 <scaraInitDuty+0xb60>)
 8005c3a:	f7fa fe07 	bl	800084c <__aeabi_ddiv>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	460c      	mov	r4, r1
 8005c42:	e9c7 347a 	strd	r3, r4, [r7, #488]	; 0x1e8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005c46:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d113      	bne.n	8005c76 <scaraInitDuty+0xa4e>
					abs_position = myDUTY.joint.theta4_start + command.sub_para_double;
 8005c4e:	4b4f      	ldr	r3, [pc, #316]	; (8005d8c <scaraInitDuty+0xb64>)
 8005c50:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8005c54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c58:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4623      	mov	r3, r4
 8005c60:	f7fa fb14 	bl	800028c <__adddf3>
 8005c64:	4603      	mov	r3, r0
 8005c66:	460c      	mov	r4, r1
 8005c68:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8005c6c:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005c70:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005c74:	e01a      	b.n	8005cac <scaraInitDuty+0xa84>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005c76:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d113      	bne.n	8005ca6 <scaraInitDuty+0xa7e>
					abs_position = command.sub_para_double;
 8005c7e:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005c82:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.theta4_start;
 8005c86:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005c8a:	4b40      	ldr	r3, [pc, #256]	; (8005d8c <scaraInitDuty+0xb64>)
 8005c8c:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8005c90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c94:	461a      	mov	r2, r3
 8005c96:	4623      	mov	r3, r4
 8005c98:	f7fa faf6 	bl	8000288 <__aeabi_dsub>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	460c      	mov	r4, r1
 8005ca0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005ca4:	e002      	b.n	8005cac <scaraInitDuty+0xa84>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005ca6:	230c      	movs	r3, #12
 8005ca8:	f000 be33 	b.w	8006912 <scaraInitDuty+0x16ea>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J3, abs_position)) {
 8005cac:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8005cb0:	2003      	movs	r0, #3
 8005cb2:	f004 fa49 	bl	800a148 <scaraCheckWorkSpace1>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00b      	beq.n	8005cd4 <scaraInitDuty+0xaac>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005cbc:	2307      	movs	r3, #7
 8005cbe:	f000 be28 	b.w	8006912 <scaraInitDuty+0x16ea>
				}
				break;
			default:
				return SCARA_STATUS_ERROR_JOINT_NUM;
 8005cc2:	230b      	movs	r3, #11
 8005cc4:	f000 be25 	b.w	8006912 <scaraInitDuty+0x16ea>
				break;
 8005cc8:	bf00      	nop
 8005cca:	e004      	b.n	8005cd6 <scaraInitDuty+0xaae>
				break;
 8005ccc:	bf00      	nop
 8005cce:	e002      	b.n	8005cd6 <scaraInitDuty+0xaae>
				break;
 8005cd0:	bf00      	nop
 8005cd2:	e000      	b.n	8005cd6 <scaraInitDuty+0xaae>
				break;
 8005cd4:	bf00      	nop
			}

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8005cd6:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f040 8135 	bne.w	8005f4a <scaraInitDuty+0xd22>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005ce0:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	f040 80a4 	bne.w	8005e32 <scaraInitDuty+0xc0a>
					for ( uint8_t i = 0; i < 4; i++) {
 8005cea:	2300      	movs	r3, #0
 8005cec:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8005cf0:	e099      	b.n	8005e26 <scaraInitDuty+0xbfe>
						if ( i == command.sub_para_int) {
 8005cf2:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8005cf6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d14a      	bne.n	8005d94 <scaraInitDuty+0xb6c>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005cfe:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8005d02:	4922      	ldr	r1, [pc, #136]	; (8005d8c <scaraInitDuty+0xb64>)
 8005d04:	4613      	mov	r3, r2
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	4413      	add	r3, r2
 8005d0a:	01db      	lsls	r3, r3, #7
 8005d0c:	440b      	add	r3, r1
 8005d0e:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005d12:	2200      	movs	r2, #0
 8005d14:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8005d16:	f897 018f 	ldrb.w	r0, [r7, #399]	; 0x18f
 8005d1a:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8005d1e:	4c1b      	ldr	r4, [pc, #108]	; (8005d8c <scaraInitDuty+0xb64>)
 8005d20:	4603      	mov	r3, r0
 8005d22:	005b      	lsls	r3, r3, #1
 8005d24:	4403      	add	r3, r0
 8005d26:	01db      	lsls	r3, r3, #7
 8005d28:	4423      	add	r3, r4
 8005d2a:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8005d2e:	e9c3 1200 	strd	r1, r2, [r3]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005d32:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8005d36:	4613      	mov	r3, r2
 8005d38:	005b      	lsls	r3, r3, #1
 8005d3a:	4413      	add	r3, r2
 8005d3c:	01db      	lsls	r3, r3, #7
 8005d3e:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005d42:	4a12      	ldr	r2, [pc, #72]	; (8005d8c <scaraInitDuty+0xb64>)
 8005d44:	1898      	adds	r0, r3, r2
 8005d46:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8005d4a:	4a11      	ldr	r2, [pc, #68]	; (8005d90 <scaraInitDuty+0xb68>)
 8005d4c:	5cd3      	ldrb	r3, [r2, r3]
 8005d4e:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005d52:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005d56:	eeb0 2a46 	vmov.f32	s4, s12
 8005d5a:	eef0 2a66 	vmov.f32	s5, s13
 8005d5e:	eeb0 1a47 	vmov.f32	s2, s14
 8005d62:	eef0 1a67 	vmov.f32	s3, s15
 8005d66:	2201      	movs	r2, #1
 8005d68:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	f001 fac7 	bl	8007300 <scaraInitLSPB>
 8005d72:	4603      	mov	r3, r0
 8005d74:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
 8005d78:	e049      	b.n	8005e0e <scaraInitDuty+0xbe6>
 8005d7a:	bf00      	nop
 8005d7c:	f3af 8000 	nop.w
 8005d80:	60000000 	.word	0x60000000
 8005d84:	400921fb 	.word	0x400921fb
 8005d88:	40668000 	.word	0x40668000
 8005d8c:	20004f28 	.word	0x20004f28
 8005d90:	20000824 	.word	0x20000824
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005d94:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8005d98:	49c3      	ldr	r1, [pc, #780]	; (80060a8 <scaraInitDuty+0xe80>)
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	4413      	add	r3, r2
 8005da0:	01db      	lsls	r3, r3, #7
 8005da2:	440b      	add	r3, r1
 8005da4:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005da8:	2200      	movs	r2, #0
 8005daa:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8005dac:	f897 018f 	ldrb.w	r0, [r7, #399]	; 0x18f
 8005db0:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8005db4:	4cbc      	ldr	r4, [pc, #752]	; (80060a8 <scaraInitDuty+0xe80>)
 8005db6:	4603      	mov	r3, r0
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	4403      	add	r3, r0
 8005dbc:	01db      	lsls	r3, r3, #7
 8005dbe:	4423      	add	r3, r4
 8005dc0:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8005dc4:	e9c3 1200 	strd	r1, r2, [r3]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005dc8:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8005dcc:	4613      	mov	r3, r2
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	4413      	add	r3, r2
 8005dd2:	01db      	lsls	r3, r3, #7
 8005dd4:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005dd8:	4ab3      	ldr	r2, [pc, #716]	; (80060a8 <scaraInitDuty+0xe80>)
 8005dda:	1898      	adds	r0, r3, r2
 8005ddc:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8005de0:	4ab2      	ldr	r2, [pc, #712]	; (80060ac <scaraInitDuty+0xe84>)
 8005de2:	5cd3      	ldrb	r3, [r2, r3]
 8005de4:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005de8:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005dec:	eeb0 2a46 	vmov.f32	s4, s12
 8005df0:	eef0 2a66 	vmov.f32	s5, s13
 8005df4:	eeb0 1a47 	vmov.f32	s2, s14
 8005df8:	eef0 1a67 	vmov.f32	s3, s15
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	ed9f 0ba8 	vldr	d0, [pc, #672]	; 80060a0 <scaraInitDuty+0xe78>
 8005e02:	4619      	mov	r1, r3
 8005e04:	f001 fa7c 	bl	8007300 <scaraInitLSPB>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						}
						myDUTY.time_total = command.time_total;
 8005e0e:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005e12:	4aa5      	ldr	r2, [pc, #660]	; (80060a8 <scaraInitDuty+0xe80>)
 8005e14:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005e18:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005e1c:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8005e20:	3301      	adds	r3, #1
 8005e22:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8005e26:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	f67f af61 	bls.w	8005cf2 <scaraInitDuty+0xaca>
 8005e30:	e1c2      	b.n	80061b8 <scaraInitDuty+0xf90>
					}
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005e32:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f040 8084 	bne.w	8005f44 <scaraInitDuty+0xd1c>
					for ( uint8_t i = 0; i < 4; i++) {
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
 8005e42:	e07a      	b.n	8005f3a <scaraInitDuty+0xd12>
						if ( i == command.sub_para_int) {
 8005e44:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005e48:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d140      	bne.n	8005ed2 <scaraInitDuty+0xcaa>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005e50:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005e54:	4994      	ldr	r1, [pc, #592]	; (80060a8 <scaraInitDuty+0xe80>)
 8005e56:	4613      	mov	r3, r2
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	4413      	add	r3, r2
 8005e5c:	01db      	lsls	r3, r3, #7
 8005e5e:	440b      	add	r3, r1
 8005e60:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005e64:	2200      	movs	r2, #0
 8005e66:	701a      	strb	r2, [r3, #0]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005e68:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	4413      	add	r3, r2
 8005e72:	01db      	lsls	r3, r3, #7
 8005e74:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005e78:	4a8b      	ldr	r2, [pc, #556]	; (80060a8 <scaraInitDuty+0xe80>)
 8005e7a:	1898      	adds	r0, r3, r2
 8005e7c:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8005e80:	4a8a      	ldr	r2, [pc, #552]	; (80060ac <scaraInitDuty+0xe84>)
 8005e82:	5cd3      	ldrb	r3, [r2, r3]
 8005e84:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005e88:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005e8c:	eeb0 2a46 	vmov.f32	s4, s12
 8005e90:	eef0 2a66 	vmov.f32	s5, s13
 8005e94:	eeb0 1a47 	vmov.f32	s2, s14
 8005e98:	eef0 1a67 	vmov.f32	s3, s15
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	f001 fa2c 	bl	8007300 <scaraInitLSPB>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8005eae:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005eb2:	497d      	ldr	r1, [pc, #500]	; (80060a8 <scaraInitDuty+0xe80>)
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	4413      	add	r3, r2
 8005eba:	01db      	lsls	r3, r3, #7
 8005ebc:	440b      	add	r3, r1
 8005ebe:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8005ec2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ec6:	4a78      	ldr	r2, [pc, #480]	; (80060a8 <scaraInitDuty+0xe80>)
 8005ec8:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005ecc:	e9c2 3400 	strd	r3, r4, [r2]
 8005ed0:	e02e      	b.n	8005f30 <scaraInitDuty+0xd08>
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005ed2:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005ed6:	4974      	ldr	r1, [pc, #464]	; (80060a8 <scaraInitDuty+0xe80>)
 8005ed8:	4613      	mov	r3, r2
 8005eda:	005b      	lsls	r3, r3, #1
 8005edc:	4413      	add	r3, r2
 8005ede:	01db      	lsls	r3, r3, #7
 8005ee0:	440b      	add	r3, r1
 8005ee2:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	701a      	strb	r2, [r3, #0]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005eea:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005eee:	4613      	mov	r3, r2
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	4413      	add	r3, r2
 8005ef4:	01db      	lsls	r3, r3, #7
 8005ef6:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005efa:	4a6b      	ldr	r2, [pc, #428]	; (80060a8 <scaraInitDuty+0xe80>)
 8005efc:	1898      	adds	r0, r3, r2
 8005efe:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8005f02:	4a6a      	ldr	r2, [pc, #424]	; (80060ac <scaraInitDuty+0xe84>)
 8005f04:	5cd3      	ldrb	r3, [r2, r3]
 8005f06:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005f0a:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005f0e:	eeb0 2a46 	vmov.f32	s4, s12
 8005f12:	eef0 2a66 	vmov.f32	s5, s13
 8005f16:	eeb0 1a47 	vmov.f32	s2, s14
 8005f1a:	eef0 1a67 	vmov.f32	s3, s15
 8005f1e:	2200      	movs	r2, #0
 8005f20:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 80060a0 <scaraInitDuty+0xe78>
 8005f24:	4619      	mov	r1, r3
 8005f26:	f001 f9eb 	bl	8007300 <scaraInitLSPB>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
					for ( uint8_t i = 0; i < 4; i++) {
 8005f30:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8005f34:	3301      	adds	r3, #1
 8005f36:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
 8005f3a:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8005f3e:	2b03      	cmp	r3, #3
 8005f40:	d980      	bls.n	8005e44 <scaraInitDuty+0xc1c>
 8005f42:	e139      	b.n	80061b8 <scaraInitDuty+0xf90>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
						}
					}
				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8005f44:	2308      	movs	r3, #8
 8005f46:	f000 bce4 	b.w	8006912 <scaraInitDuty+0x16ea>
				}
			// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8005f4a:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	f040 8130 	bne.w	80061b4 <scaraInitDuty+0xf8c>
					// Mode Init Time
					if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005f54:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	f040 8097 	bne.w	800608c <scaraInitDuty+0xe64>
						for ( uint8_t i = 0; i < 4; i++) {
 8005f5e:	2300      	movs	r3, #0
 8005f60:	f887 318d 	strb.w	r3, [r7, #397]	; 0x18d
 8005f64:	e08c      	b.n	8006080 <scaraInitDuty+0xe58>
							if ( i == command.sub_para_int) {
 8005f66:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8005f6a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d13d      	bne.n	8005fee <scaraInitDuty+0xdc6>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005f72:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8005f76:	494c      	ldr	r1, [pc, #304]	; (80060a8 <scaraInitDuty+0xe80>)
 8005f78:	4613      	mov	r3, r2
 8005f7a:	005b      	lsls	r3, r3, #1
 8005f7c:	4413      	add	r3, r2
 8005f7e:	01db      	lsls	r3, r3, #7
 8005f80:	440b      	add	r3, r1
 8005f82:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005f86:	2201      	movs	r2, #1
 8005f88:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8005f8a:	f897 018d 	ldrb.w	r0, [r7, #397]	; 0x18d
 8005f8e:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8005f92:	4c45      	ldr	r4, [pc, #276]	; (80060a8 <scaraInitDuty+0xe80>)
 8005f94:	4603      	mov	r3, r0
 8005f96:	005b      	lsls	r3, r3, #1
 8005f98:	4403      	add	r3, r0
 8005f9a:	01db      	lsls	r3, r3, #7
 8005f9c:	4423      	add	r3, r4
 8005f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa2:	e9c3 1200 	strd	r1, r2, [r3]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8005fa6:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8005faa:	4613      	mov	r3, r2
 8005fac:	005b      	lsls	r3, r3, #1
 8005fae:	4413      	add	r3, r2
 8005fb0:	01db      	lsls	r3, r3, #7
 8005fb2:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8005fb6:	4a3c      	ldr	r2, [pc, #240]	; (80060a8 <scaraInitDuty+0xe80>)
 8005fb8:	1898      	adds	r0, r3, r2
 8005fba:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 8005fbe:	4a3b      	ldr	r2, [pc, #236]	; (80060ac <scaraInitDuty+0xe84>)
 8005fc0:	5cd3      	ldrb	r3, [r2, r3]
 8005fc2:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005fc6:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005fca:	eeb0 2a46 	vmov.f32	s4, s12
 8005fce:	eef0 2a66 	vmov.f32	s5, s13
 8005fd2:	eeb0 1a47 	vmov.f32	s2, s14
 8005fd6:	eef0 1a67 	vmov.f32	s3, s15
 8005fda:	2201      	movs	r2, #1
 8005fdc:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	f001 fd6d 	bl	8007ac0 <scaraInitScurve>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
 8005fec:	e03c      	b.n	8006068 <scaraInitDuty+0xe40>
											joint_taget[i],
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005fee:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8005ff2:	492d      	ldr	r1, [pc, #180]	; (80060a8 <scaraInitDuty+0xe80>)
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	4413      	add	r3, r2
 8005ffa:	01db      	lsls	r3, r3, #7
 8005ffc:	440b      	add	r3, r1
 8005ffe:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006002:	2201      	movs	r2, #1
 8006004:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8006006:	f897 018d 	ldrb.w	r0, [r7, #397]	; 0x18d
 800600a:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 800600e:	4c26      	ldr	r4, [pc, #152]	; (80060a8 <scaraInitDuty+0xe80>)
 8006010:	4603      	mov	r3, r0
 8006012:	005b      	lsls	r3, r3, #1
 8006014:	4403      	add	r3, r0
 8006016:	01db      	lsls	r3, r3, #7
 8006018:	4423      	add	r3, r4
 800601a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800601e:	e9c3 1200 	strd	r1, r2, [r3]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8006022:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8006026:	4613      	mov	r3, r2
 8006028:	005b      	lsls	r3, r3, #1
 800602a:	4413      	add	r3, r2
 800602c:	01db      	lsls	r3, r3, #7
 800602e:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006032:	4a1d      	ldr	r2, [pc, #116]	; (80060a8 <scaraInitDuty+0xe80>)
 8006034:	1898      	adds	r0, r3, r2
 8006036:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 800603a:	4a1c      	ldr	r2, [pc, #112]	; (80060ac <scaraInitDuty+0xe84>)
 800603c:	5cd3      	ldrb	r3, [r2, r3]
 800603e:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006042:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006046:	eeb0 2a46 	vmov.f32	s4, s12
 800604a:	eef0 2a66 	vmov.f32	s5, s13
 800604e:	eeb0 1a47 	vmov.f32	s2, s14
 8006052:	eef0 1a67 	vmov.f32	s3, s15
 8006056:	2201      	movs	r2, #1
 8006058:	ed9f 0b11 	vldr	d0, [pc, #68]	; 80060a0 <scaraInitDuty+0xe78>
 800605c:	4619      	mov	r1, r3
 800605e:	f001 fd2f 	bl	8007ac0 <scaraInitScurve>
 8006062:	4603      	mov	r3, r0
 8006064:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
											joint_taget[i],
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							}
							myDUTY.time_total = command.time_total;
 8006068:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 800606c:	4a0e      	ldr	r2, [pc, #56]	; (80060a8 <scaraInitDuty+0xe80>)
 800606e:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006072:	e9c2 3400 	strd	r3, r4, [r2]
						for ( uint8_t i = 0; i < 4; i++) {
 8006076:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 800607a:	3301      	adds	r3, #1
 800607c:	f887 318d 	strb.w	r3, [r7, #397]	; 0x18d
 8006080:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 8006084:	2b03      	cmp	r3, #3
 8006086:	f67f af6e 	bls.w	8005f66 <scaraInitDuty+0xd3e>
 800608a:	e095      	b.n	80061b8 <scaraInitDuty+0xf90>
						}
					// Mode Init Acc
					} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 800608c:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006090:	2b00      	cmp	r3, #0
 8006092:	f040 808d 	bne.w	80061b0 <scaraInitDuty+0xf88>
						for ( uint8_t i = 0; i < 4; i++) {
 8006096:	2300      	movs	r3, #0
 8006098:	f887 318c 	strb.w	r3, [r7, #396]	; 0x18c
 800609c:	e083      	b.n	80061a6 <scaraInitDuty+0xf7e>
 800609e:	bf00      	nop
	...
 80060a8:	20004f28 	.word	0x20004f28
 80060ac:	20000824 	.word	0x20000824
							if ( i == command.sub_para_int) {
 80060b0:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 80060b4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d140      	bne.n	800613e <scaraInitDuty+0xf16>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80060bc:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 80060c0:	49b7      	ldr	r1, [pc, #732]	; (80063a0 <scaraInitDuty+0x1178>)
 80060c2:	4613      	mov	r3, r2
 80060c4:	005b      	lsls	r3, r3, #1
 80060c6:	4413      	add	r3, r2
 80060c8:	01db      	lsls	r3, r3, #7
 80060ca:	440b      	add	r3, r1
 80060cc:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80060d0:	2201      	movs	r2, #1
 80060d2:	701a      	strb	r2, [r3, #0]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 80060d4:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 80060d8:	4613      	mov	r3, r2
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	4413      	add	r3, r2
 80060de:	01db      	lsls	r3, r3, #7
 80060e0:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80060e4:	4aae      	ldr	r2, [pc, #696]	; (80063a0 <scaraInitDuty+0x1178>)
 80060e6:	1898      	adds	r0, r3, r2
 80060e8:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 80060ec:	4aad      	ldr	r2, [pc, #692]	; (80063a4 <scaraInitDuty+0x117c>)
 80060ee:	5cd3      	ldrb	r3, [r2, r3]
 80060f0:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80060f4:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80060f8:	eeb0 2a46 	vmov.f32	s4, s12
 80060fc:	eef0 2a66 	vmov.f32	s5, s13
 8006100:	eeb0 1a47 	vmov.f32	s2, s14
 8006104:	eef0 1a67 	vmov.f32	s3, s15
 8006108:	2200      	movs	r2, #0
 800610a:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 800610e:	4619      	mov	r1, r3
 8006110:	f001 fcd6 	bl	8007ac0 <scaraInitScurve>
 8006114:	4603      	mov	r3, r0
 8006116:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
											joint_taget[i],
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
								myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 800611a:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 800611e:	49a0      	ldr	r1, [pc, #640]	; (80063a0 <scaraInitDuty+0x1178>)
 8006120:	4613      	mov	r3, r2
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	4413      	add	r3, r2
 8006126:	01db      	lsls	r3, r3, #7
 8006128:	440b      	add	r3, r1
 800612a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800612e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006132:	4a9b      	ldr	r2, [pc, #620]	; (80063a0 <scaraInitDuty+0x1178>)
 8006134:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006138:	e9c2 3400 	strd	r3, r4, [r2]
 800613c:	e02e      	b.n	800619c <scaraInitDuty+0xf74>
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800613e:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006142:	4997      	ldr	r1, [pc, #604]	; (80063a0 <scaraInitDuty+0x1178>)
 8006144:	4613      	mov	r3, r2
 8006146:	005b      	lsls	r3, r3, #1
 8006148:	4413      	add	r3, r2
 800614a:	01db      	lsls	r3, r3, #7
 800614c:	440b      	add	r3, r1
 800614e:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006152:	2201      	movs	r2, #1
 8006154:	701a      	strb	r2, [r3, #0]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8006156:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 800615a:	4613      	mov	r3, r2
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	4413      	add	r3, r2
 8006160:	01db      	lsls	r3, r3, #7
 8006162:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006166:	4a8e      	ldr	r2, [pc, #568]	; (80063a0 <scaraInitDuty+0x1178>)
 8006168:	1898      	adds	r0, r3, r2
 800616a:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 800616e:	4a8d      	ldr	r2, [pc, #564]	; (80063a4 <scaraInitDuty+0x117c>)
 8006170:	5cd3      	ldrb	r3, [r2, r3]
 8006172:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006176:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 800617a:	eeb0 2a46 	vmov.f32	s4, s12
 800617e:	eef0 2a66 	vmov.f32	s5, s13
 8006182:	eeb0 1a47 	vmov.f32	s2, s14
 8006186:	eef0 1a67 	vmov.f32	s3, s15
 800618a:	2200      	movs	r2, #0
 800618c:	ed9f 0b80 	vldr	d0, [pc, #512]	; 8006390 <scaraInitDuty+0x1168>
 8006190:	4619      	mov	r1, r3
 8006192:	f001 fc95 	bl	8007ac0 <scaraInitScurve>
 8006196:	4603      	mov	r3, r0
 8006198:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						for ( uint8_t i = 0; i < 4; i++) {
 800619c:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 80061a0:	3301      	adds	r3, #1
 80061a2:	f887 318c 	strb.w	r3, [r7, #396]	; 0x18c
 80061a6:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	d980      	bls.n	80060b0 <scaraInitDuty+0xe88>
 80061ae:	e003      	b.n	80061b8 <scaraInitDuty+0xf90>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							}
						}

					} else {
						return SCARA_STATUS_ERROR_MODE_INIT;
 80061b0:	2308      	movs	r3, #8
 80061b2:	e3ae      	b.n	8006912 <scaraInitDuty+0x16ea>
					}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 80061b4:	2305      	movs	r3, #5
 80061b6:	e3ac      	b.n	8006912 <scaraInitDuty+0x16ea>
			}
		// Check Init Status
			if ( SCARA_STATUS_OK != status1) {
 80061b8:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d002      	beq.n	80061c6 <scaraInitDuty+0xf9e>
				return status1;
 80061c0:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 80061c4:	e3a5      	b.n	8006912 <scaraInitDuty+0x16ea>
			}
			if ( SCARA_STATUS_OK != status2) {
 80061c6:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f000 8373 	beq.w	80068b6 <scaraInitDuty+0x168e>
				return status2;
 80061d0:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 80061d4:	e39d      	b.n	8006912 <scaraInitDuty+0x16ea>
			}

		//----Joint Quadra
		} else if 	( DUTY_JOINT_4DOF == command.joint_type) {
 80061d6:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 80061da:	2b01      	cmp	r3, #1
 80061dc:	f040 8367 	bne.w	80068ae <scaraInitDuty+0x1686>
			SCARA_PositionTypeDef	target_point;
			// Change Degree --> Radian
			command.target_point.roll = command.target_point.roll*PI/180.0;
 80061e0:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 80061e4:	a36c      	add	r3, pc, #432	; (adr r3, 8006398 <scaraInitDuty+0x1170>)
 80061e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ea:	f7fa fa05 	bl	80005f8 <__aeabi_dmul>
 80061ee:	4603      	mov	r3, r0
 80061f0:	460c      	mov	r4, r1
 80061f2:	4618      	mov	r0, r3
 80061f4:	4621      	mov	r1, r4
 80061f6:	f04f 0200 	mov.w	r2, #0
 80061fa:	4b6b      	ldr	r3, [pc, #428]	; (80063a8 <scaraInitDuty+0x1180>)
 80061fc:	f7fa fb26 	bl	800084c <__aeabi_ddiv>
 8006200:	4603      	mov	r3, r0
 8006202:	460c      	mov	r4, r1
 8006204:	e9c7 3496 	strd	r3, r4, [r7, #600]	; 0x258
			// Coordinate
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8006208:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 800620c:	2b01      	cmp	r3, #1
 800620e:	d13c      	bne.n	800628a <scaraInitDuty+0x1062>
				target_point.x 		= positionCurrent.x + command.target_point.x;
 8006210:	4b66      	ldr	r3, [pc, #408]	; (80063ac <scaraInitDuty+0x1184>)
 8006212:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006216:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 800621a:	461a      	mov	r2, r3
 800621c:	4623      	mov	r3, r4
 800621e:	f7fa f835 	bl	800028c <__adddf3>
 8006222:	4603      	mov	r3, r0
 8006224:	460c      	mov	r4, r1
 8006226:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800622a:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
				target_point.y 		= positionCurrent.y + command.target_point.y;
 800622e:	4b5f      	ldr	r3, [pc, #380]	; (80063ac <scaraInitDuty+0x1184>)
 8006230:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006234:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8006238:	461a      	mov	r2, r3
 800623a:	4623      	mov	r3, r4
 800623c:	f7fa f826 	bl	800028c <__adddf3>
 8006240:	4603      	mov	r3, r0
 8006242:	460c      	mov	r4, r1
 8006244:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006248:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
				target_point.z 		= positionCurrent.z + command.target_point.z;
 800624c:	4b57      	ldr	r3, [pc, #348]	; (80063ac <scaraInitDuty+0x1184>)
 800624e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8006252:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8006256:	461a      	mov	r2, r3
 8006258:	4623      	mov	r3, r4
 800625a:	f7fa f817 	bl	800028c <__adddf3>
 800625e:	4603      	mov	r3, r0
 8006260:	460c      	mov	r4, r1
 8006262:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006266:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
				target_point.roll	= positionCurrent.roll + command.target_point.roll;
 800626a:	4b50      	ldr	r3, [pc, #320]	; (80063ac <scaraInitDuty+0x1184>)
 800626c:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8006270:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 8006274:	461a      	mov	r2, r3
 8006276:	4623      	mov	r3, r4
 8006278:	f7fa f808 	bl	800028c <__adddf3>
 800627c:	4603      	mov	r3, r0
 800627e:	460c      	mov	r4, r1
 8006280:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006284:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
 8006288:	e01e      	b.n	80062c8 <scaraInitDuty+0x10a0>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 800628a:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 800628e:	2b00      	cmp	r3, #0
 8006290:	d118      	bne.n	80062c4 <scaraInitDuty+0x109c>
				target_point.x 		= command.target_point.x;
 8006292:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8006296:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800629a:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
				target_point.y 		= command.target_point.y;
 800629e:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 80062a2:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80062a6:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
				target_point.z 		= command.target_point.z;
 80062aa:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 80062ae:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80062b2:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
				target_point.roll	= command.target_point.roll;
 80062b6:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 80062ba:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80062be:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
 80062c2:	e001      	b.n	80062c8 <scaraInitDuty+0x10a0>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 80062c4:	230c      	movs	r3, #12
 80062c6:	e324      	b.n	8006912 <scaraInitDuty+0x16ea>
			}

			if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 80062c8:	4c38      	ldr	r4, [pc, #224]	; (80063ac <scaraInitDuty+0x1184>)
 80062ca:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 80062ce:	4668      	mov	r0, sp
 80062d0:	f104 0308 	add.w	r3, r4, #8
 80062d4:	22b8      	movs	r2, #184	; 0xb8
 80062d6:	4619      	mov	r1, r3
 80062d8:	f00f fc50 	bl	8015b7c <memcpy>
 80062dc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80062e0:	4628      	mov	r0, r5
 80062e2:	f7fd fb91 	bl	8003a08 <kinematicInverse>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <scaraInitDuty+0x10c8>
				return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 80062ec:	2307      	movs	r3, #7
 80062ee:	e310      	b.n	8006912 <scaraInitDuty+0x16ea>
			}
			// Trajectory 4 profile
			double q[4];
			q[0] = target_point.Theta1 - positionCurrent.Theta1;
 80062f0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80062f4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80062f8:	4b2c      	ldr	r3, [pc, #176]	; (80063ac <scaraInitDuty+0x1184>)
 80062fa:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 80062fe:	461a      	mov	r2, r3
 8006300:	4623      	mov	r3, r4
 8006302:	f7f9 ffc1 	bl	8000288 <__aeabi_dsub>
 8006306:	4603      	mov	r3, r0
 8006308:	460c      	mov	r4, r1
 800630a:	463a      	mov	r2, r7
 800630c:	e9c2 3400 	strd	r3, r4, [r2]
			q[1] = target_point.Theta2 - positionCurrent.Theta2;
 8006310:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006314:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8006318:	4b24      	ldr	r3, [pc, #144]	; (80063ac <scaraInitDuty+0x1184>)
 800631a:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800631e:	461a      	mov	r2, r3
 8006320:	4623      	mov	r3, r4
 8006322:	f7f9 ffb1 	bl	8000288 <__aeabi_dsub>
 8006326:	4603      	mov	r3, r0
 8006328:	460c      	mov	r4, r1
 800632a:	463a      	mov	r2, r7
 800632c:	e9c2 3402 	strd	r3, r4, [r2, #8]
			q[2] = target_point.D3 	   - positionCurrent.D3;
 8006330:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006334:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8006338:	4b1c      	ldr	r3, [pc, #112]	; (80063ac <scaraInitDuty+0x1184>)
 800633a:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 800633e:	461a      	mov	r2, r3
 8006340:	4623      	mov	r3, r4
 8006342:	f7f9 ffa1 	bl	8000288 <__aeabi_dsub>
 8006346:	4603      	mov	r3, r0
 8006348:	460c      	mov	r4, r1
 800634a:	463a      	mov	r2, r7
 800634c:	e9c2 3404 	strd	r3, r4, [r2, #16]
			q[3] = target_point.Theta4 - positionCurrent.Theta4;
 8006350:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006354:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8006358:	4b14      	ldr	r3, [pc, #80]	; (80063ac <scaraInitDuty+0x1184>)
 800635a:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 800635e:	461a      	mov	r2, r3
 8006360:	4623      	mov	r3, r4
 8006362:	f7f9 ff91 	bl	8000288 <__aeabi_dsub>
 8006366:	4603      	mov	r3, r0
 8006368:	460c      	mov	r4, r1
 800636a:	463a      	mov	r2, r7
 800636c:	e9c2 3406 	strd	r3, r4, [r2, #24]

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8006370:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006374:	2b00      	cmp	r3, #0
 8006376:	f040 8151 	bne.w	800661c <scaraInitDuty+0x13f4>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800637a:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800637e:	2b01      	cmp	r3, #1
 8006380:	d16c      	bne.n	800645c <scaraInitDuty+0x1234>
					for ( uint8_t i = 0; i < 4; i++) {
 8006382:	2300      	movs	r3, #0
 8006384:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
 8006388:	e05c      	b.n	8006444 <scaraInitDuty+0x121c>
 800638a:	bf00      	nop
 800638c:	f3af 8000 	nop.w
	...
 8006398:	60000000 	.word	0x60000000
 800639c:	400921fb 	.word	0x400921fb
 80063a0:	20004f28 	.word	0x20004f28
 80063a4:	20000824 	.word	0x20000824
 80063a8:	40668000 	.word	0x40668000
 80063ac:	20005ae8 	.word	0x20005ae8
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80063b0:	f897 218b 	ldrb.w	r2, [r7, #395]	; 0x18b
 80063b4:	49cf      	ldr	r1, [pc, #828]	; (80066f4 <scaraInitDuty+0x14cc>)
 80063b6:	4613      	mov	r3, r2
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	4413      	add	r3, r2
 80063bc:	01db      	lsls	r3, r3, #7
 80063be:	440b      	add	r3, r1
 80063c0:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80063c4:	2200      	movs	r2, #0
 80063c6:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 80063c8:	f897 018b 	ldrb.w	r0, [r7, #395]	; 0x18b
 80063cc:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 80063d0:	4cc8      	ldr	r4, [pc, #800]	; (80066f4 <scaraInitDuty+0x14cc>)
 80063d2:	4603      	mov	r3, r0
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	4403      	add	r3, r0
 80063d8:	01db      	lsls	r3, r3, #7
 80063da:	4423      	add	r3, r4
 80063dc:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80063e0:	e9c3 1200 	strd	r1, r2, [r3]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80063e4:	f897 218b 	ldrb.w	r2, [r7, #395]	; 0x18b
 80063e8:	4613      	mov	r3, r2
 80063ea:	005b      	lsls	r3, r3, #1
 80063ec:	4413      	add	r3, r2
 80063ee:	01db      	lsls	r3, r3, #7
 80063f0:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80063f4:	4abf      	ldr	r2, [pc, #764]	; (80066f4 <scaraInitDuty+0x14cc>)
 80063f6:	1898      	adds	r0, r3, r2
 80063f8:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 80063fc:	4abe      	ldr	r2, [pc, #760]	; (80066f8 <scaraInitDuty+0x14d0>)
 80063fe:	5cd1      	ldrb	r1, [r2, r3]
 8006400:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 8006404:	463a      	mov	r2, r7
 8006406:	00db      	lsls	r3, r3, #3
 8006408:	4413      	add	r3, r2
 800640a:	ed93 7b00 	vldr	d7, [r3]
 800640e:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8006412:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8006416:	eeb0 2a45 	vmov.f32	s4, s10
 800641a:	eef0 2a65 	vmov.f32	s5, s11
 800641e:	eeb0 1a46 	vmov.f32	s2, s12
 8006422:	eef0 1a66 	vmov.f32	s3, s13
 8006426:	2201      	movs	r2, #1
 8006428:	eeb0 0a47 	vmov.f32	s0, s14
 800642c:	eef0 0a67 	vmov.f32	s1, s15
 8006430:	f000 ff66 	bl	8007300 <scaraInitLSPB>
 8006434:	4603      	mov	r3, r0
 8006436:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 800643a:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 800643e:	3301      	adds	r3, #1
 8006440:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
 8006444:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 8006448:	2b03      	cmp	r3, #3
 800644a:	d9b1      	bls.n	80063b0 <scaraInitDuty+0x1188>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 800644c:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8006450:	4aa8      	ldr	r2, [pc, #672]	; (80066f4 <scaraInitDuty+0x14cc>)
 8006452:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006456:	e9c2 3400 	strd	r3, r4, [r2]
 800645a:	e22c      	b.n	80068b6 <scaraInitDuty+0x168e>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 800645c:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006460:	2b00      	cmp	r3, #0
 8006462:	f040 80d9 	bne.w	8006618 <scaraInitDuty+0x13f0>
					for ( uint8_t i = 0; i < 4; i++) {
 8006466:	2300      	movs	r3, #0
 8006468:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
 800646c:	e03b      	b.n	80064e6 <scaraInitDuty+0x12be>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 800646e:	f897 218a 	ldrb.w	r2, [r7, #394]	; 0x18a
 8006472:	49a0      	ldr	r1, [pc, #640]	; (80066f4 <scaraInitDuty+0x14cc>)
 8006474:	4613      	mov	r3, r2
 8006476:	005b      	lsls	r3, r3, #1
 8006478:	4413      	add	r3, r2
 800647a:	01db      	lsls	r3, r3, #7
 800647c:	440b      	add	r3, r1
 800647e:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006482:	2200      	movs	r2, #0
 8006484:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8006486:	f897 218a 	ldrb.w	r2, [r7, #394]	; 0x18a
 800648a:	4613      	mov	r3, r2
 800648c:	005b      	lsls	r3, r3, #1
 800648e:	4413      	add	r3, r2
 8006490:	01db      	lsls	r3, r3, #7
 8006492:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006496:	4a97      	ldr	r2, [pc, #604]	; (80066f4 <scaraInitDuty+0x14cc>)
 8006498:	1898      	adds	r0, r3, r2
 800649a:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 800649e:	4a96      	ldr	r2, [pc, #600]	; (80066f8 <scaraInitDuty+0x14d0>)
 80064a0:	5cd1      	ldrb	r1, [r2, r3]
 80064a2:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 80064a6:	463a      	mov	r2, r7
 80064a8:	00db      	lsls	r3, r3, #3
 80064aa:	4413      	add	r3, r2
 80064ac:	ed93 7b00 	vldr	d7, [r3]
 80064b0:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80064b4:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80064b8:	eeb0 2a45 	vmov.f32	s4, s10
 80064bc:	eef0 2a65 	vmov.f32	s5, s11
 80064c0:	eeb0 1a46 	vmov.f32	s2, s12
 80064c4:	eef0 1a66 	vmov.f32	s3, s13
 80064c8:	2200      	movs	r2, #0
 80064ca:	eeb0 0a47 	vmov.f32	s0, s14
 80064ce:	eef0 0a67 	vmov.f32	s1, s15
 80064d2:	f000 ff15 	bl	8007300 <scaraInitLSPB>
 80064d6:	4603      	mov	r3, r0
 80064d8:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 80064dc:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 80064e0:	3301      	adds	r3, #1
 80064e2:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
 80064e6:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 80064ea:	2b03      	cmp	r3, #3
 80064ec:	d9bf      	bls.n	800646e <scaraInitDuty+0x1246>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 80064ee:	4b81      	ldr	r3, [pc, #516]	; (80066f4 <scaraInitDuty+0x14cc>)
 80064f0:	f603 2238 	addw	r2, r3, #2616	; 0xa38
 80064f4:	f04f 0300 	mov.w	r3, #0
 80064f8:	f04f 0400 	mov.w	r4, #0
 80064fc:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8006500:	2300      	movs	r3, #0
 8006502:	f887 3189 	strb.w	r3, [r7, #393]	; 0x189
 8006506:	e02d      	b.n	8006564 <scaraInitDuty+0x133c>
						if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 8006508:	f897 2189 	ldrb.w	r2, [r7, #393]	; 0x189
 800650c:	4979      	ldr	r1, [pc, #484]	; (80066f4 <scaraInitDuty+0x14cc>)
 800650e:	4613      	mov	r3, r2
 8006510:	005b      	lsls	r3, r3, #1
 8006512:	4413      	add	r3, r2
 8006514:	01db      	lsls	r3, r3, #7
 8006516:	440b      	add	r3, r1
 8006518:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800651c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006520:	4b74      	ldr	r3, [pc, #464]	; (80066f4 <scaraInitDuty+0x14cc>)
 8006522:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006526:	e9d3 3400 	ldrd	r3, r4, [r3]
 800652a:	461a      	mov	r2, r3
 800652c:	4623      	mov	r3, r4
 800652e:	f7fa faf3 	bl	8000b18 <__aeabi_dcmpgt>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d010      	beq.n	800655a <scaraInitDuty+0x1332>
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8006538:	f897 2189 	ldrb.w	r2, [r7, #393]	; 0x189
 800653c:	496d      	ldr	r1, [pc, #436]	; (80066f4 <scaraInitDuty+0x14cc>)
 800653e:	4613      	mov	r3, r2
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	4413      	add	r3, r2
 8006544:	01db      	lsls	r3, r3, #7
 8006546:	440b      	add	r3, r1
 8006548:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800654c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006550:	4a68      	ldr	r2, [pc, #416]	; (80066f4 <scaraInitDuty+0x14cc>)
 8006552:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006556:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 800655a:	f897 3189 	ldrb.w	r3, [r7, #393]	; 0x189
 800655e:	3301      	adds	r3, #1
 8006560:	f887 3189 	strb.w	r3, [r7, #393]	; 0x189
 8006564:	f897 3189 	ldrb.w	r3, [r7, #393]	; 0x189
 8006568:	2b03      	cmp	r3, #3
 800656a:	d9cd      	bls.n	8006508 <scaraInitDuty+0x12e0>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 800656c:	2300      	movs	r3, #0
 800656e:	f887 3188 	strb.w	r3, [r7, #392]	; 0x188
 8006572:	e04c      	b.n	800660e <scaraInitDuty+0x13e6>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006574:	f897 2188 	ldrb.w	r2, [r7, #392]	; 0x188
 8006578:	495e      	ldr	r1, [pc, #376]	; (80066f4 <scaraInitDuty+0x14cc>)
 800657a:	4613      	mov	r3, r2
 800657c:	005b      	lsls	r3, r3, #1
 800657e:	4413      	add	r3, r2
 8006580:	01db      	lsls	r3, r3, #7
 8006582:	440b      	add	r3, r1
 8006584:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006588:	2200      	movs	r2, #0
 800658a:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 800658c:	f897 0188 	ldrb.w	r0, [r7, #392]	; 0x188
 8006590:	4b58      	ldr	r3, [pc, #352]	; (80066f4 <scaraInitDuty+0x14cc>)
 8006592:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006596:	e9d3 1200 	ldrd	r1, r2, [r3]
 800659a:	4c56      	ldr	r4, [pc, #344]	; (80066f4 <scaraInitDuty+0x14cc>)
 800659c:	4603      	mov	r3, r0
 800659e:	005b      	lsls	r3, r3, #1
 80065a0:	4403      	add	r3, r0
 80065a2:	01db      	lsls	r3, r3, #7
 80065a4:	4423      	add	r3, r4
 80065a6:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80065aa:	e9c3 1200 	strd	r1, r2, [r3]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80065ae:	f897 2188 	ldrb.w	r2, [r7, #392]	; 0x188
 80065b2:	4613      	mov	r3, r2
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	4413      	add	r3, r2
 80065b8:	01db      	lsls	r3, r3, #7
 80065ba:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80065be:	4a4d      	ldr	r2, [pc, #308]	; (80066f4 <scaraInitDuty+0x14cc>)
 80065c0:	1898      	adds	r0, r3, r2
 80065c2:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 80065c6:	4a4c      	ldr	r2, [pc, #304]	; (80066f8 <scaraInitDuty+0x14d0>)
 80065c8:	5cd1      	ldrb	r1, [r2, r3]
 80065ca:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 80065ce:	463a      	mov	r2, r7
 80065d0:	00db      	lsls	r3, r3, #3
 80065d2:	4413      	add	r3, r2
 80065d4:	ed93 7b00 	vldr	d7, [r3]
 80065d8:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80065dc:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80065e0:	eeb0 2a45 	vmov.f32	s4, s10
 80065e4:	eef0 2a65 	vmov.f32	s5, s11
 80065e8:	eeb0 1a46 	vmov.f32	s2, s12
 80065ec:	eef0 1a66 	vmov.f32	s3, s13
 80065f0:	2201      	movs	r2, #1
 80065f2:	eeb0 0a47 	vmov.f32	s0, s14
 80065f6:	eef0 0a67 	vmov.f32	s1, s15
 80065fa:	f000 fe81 	bl	8007300 <scaraInitLSPB>
 80065fe:	4603      	mov	r3, r0
 8006600:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 8006604:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 8006608:	3301      	adds	r3, #1
 800660a:	f887 3188 	strb.w	r3, [r7, #392]	; 0x188
 800660e:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 8006612:	2b03      	cmp	r3, #3
 8006614:	d9ae      	bls.n	8006574 <scaraInitDuty+0x134c>
 8006616:	e14e      	b.n	80068b6 <scaraInitDuty+0x168e>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8006618:	2308      	movs	r3, #8
 800661a:	e17a      	b.n	8006912 <scaraInitDuty+0x16ea>
				}
				// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 800661c:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006620:	2b01      	cmp	r3, #1
 8006622:	f040 8142 	bne.w	80068aa <scaraInitDuty+0x1682>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006626:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800662a:	2b01      	cmp	r3, #1
 800662c:	d159      	bne.n	80066e2 <scaraInitDuty+0x14ba>
					for ( uint8_t i = 0; i < 4; i++) {
 800662e:	2300      	movs	r3, #0
 8006630:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8006634:	e049      	b.n	80066ca <scaraInitDuty+0x14a2>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006636:	f897 2187 	ldrb.w	r2, [r7, #391]	; 0x187
 800663a:	492e      	ldr	r1, [pc, #184]	; (80066f4 <scaraInitDuty+0x14cc>)
 800663c:	4613      	mov	r3, r2
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	4413      	add	r3, r2
 8006642:	01db      	lsls	r3, r3, #7
 8006644:	440b      	add	r3, r1
 8006646:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800664a:	2201      	movs	r2, #1
 800664c:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 800664e:	f897 0187 	ldrb.w	r0, [r7, #391]	; 0x187
 8006652:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8006656:	4c27      	ldr	r4, [pc, #156]	; (80066f4 <scaraInitDuty+0x14cc>)
 8006658:	4603      	mov	r3, r0
 800665a:	005b      	lsls	r3, r3, #1
 800665c:	4403      	add	r3, r0
 800665e:	01db      	lsls	r3, r3, #7
 8006660:	4423      	add	r3, r4
 8006662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006666:	e9c3 1200 	strd	r1, r2, [r3]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 800666a:	f897 2187 	ldrb.w	r2, [r7, #391]	; 0x187
 800666e:	4613      	mov	r3, r2
 8006670:	005b      	lsls	r3, r3, #1
 8006672:	4413      	add	r3, r2
 8006674:	01db      	lsls	r3, r3, #7
 8006676:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800667a:	4a1e      	ldr	r2, [pc, #120]	; (80066f4 <scaraInitDuty+0x14cc>)
 800667c:	1898      	adds	r0, r3, r2
 800667e:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8006682:	4a1d      	ldr	r2, [pc, #116]	; (80066f8 <scaraInitDuty+0x14d0>)
 8006684:	5cd1      	ldrb	r1, [r2, r3]
 8006686:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800668a:	463a      	mov	r2, r7
 800668c:	00db      	lsls	r3, r3, #3
 800668e:	4413      	add	r3, r2
 8006690:	ed93 7b00 	vldr	d7, [r3]
 8006694:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8006698:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 800669c:	eeb0 2a45 	vmov.f32	s4, s10
 80066a0:	eef0 2a65 	vmov.f32	s5, s11
 80066a4:	eeb0 1a46 	vmov.f32	s2, s12
 80066a8:	eef0 1a66 	vmov.f32	s3, s13
 80066ac:	2201      	movs	r2, #1
 80066ae:	eeb0 0a47 	vmov.f32	s0, s14
 80066b2:	eef0 0a67 	vmov.f32	s1, s15
 80066b6:	f001 fa03 	bl	8007ac0 <scaraInitScurve>
 80066ba:	4603      	mov	r3, r0
 80066bc:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 80066c0:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 80066c4:	3301      	adds	r3, #1
 80066c6:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 80066ca:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 80066ce:	2b03      	cmp	r3, #3
 80066d0:	d9b1      	bls.n	8006636 <scaraInitDuty+0x140e>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 80066d2:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80066d6:	4a07      	ldr	r2, [pc, #28]	; (80066f4 <scaraInitDuty+0x14cc>)
 80066d8:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80066dc:	e9c2 3400 	strd	r3, r4, [r2]
 80066e0:	e0e9      	b.n	80068b6 <scaraInitDuty+0x168e>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80066e2:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f040 80dd 	bne.w	80068a6 <scaraInitDuty+0x167e>
					for ( uint8_t i = 0; i < 4; i++) {
 80066ec:	2300      	movs	r3, #0
 80066ee:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 80066f2:	e03f      	b.n	8006774 <scaraInitDuty+0x154c>
 80066f4:	20004f28 	.word	0x20004f28
 80066f8:	20000824 	.word	0x20000824
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80066fc:	f897 2186 	ldrb.w	r2, [r7, #390]	; 0x186
 8006700:	4988      	ldr	r1, [pc, #544]	; (8006924 <scaraInitDuty+0x16fc>)
 8006702:	4613      	mov	r3, r2
 8006704:	005b      	lsls	r3, r3, #1
 8006706:	4413      	add	r3, r2
 8006708:	01db      	lsls	r3, r3, #7
 800670a:	440b      	add	r3, r1
 800670c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006710:	2201      	movs	r2, #1
 8006712:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8006714:	f897 2186 	ldrb.w	r2, [r7, #390]	; 0x186
 8006718:	4613      	mov	r3, r2
 800671a:	005b      	lsls	r3, r3, #1
 800671c:	4413      	add	r3, r2
 800671e:	01db      	lsls	r3, r3, #7
 8006720:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006724:	4a7f      	ldr	r2, [pc, #508]	; (8006924 <scaraInitDuty+0x16fc>)
 8006726:	1898      	adds	r0, r3, r2
 8006728:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800672c:	4a7e      	ldr	r2, [pc, #504]	; (8006928 <scaraInitDuty+0x1700>)
 800672e:	5cd1      	ldrb	r1, [r2, r3]
 8006730:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8006734:	463a      	mov	r2, r7
 8006736:	00db      	lsls	r3, r3, #3
 8006738:	4413      	add	r3, r2
 800673a:	ed93 7b00 	vldr	d7, [r3]
 800673e:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8006742:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8006746:	eeb0 2a45 	vmov.f32	s4, s10
 800674a:	eef0 2a65 	vmov.f32	s5, s11
 800674e:	eeb0 1a46 	vmov.f32	s2, s12
 8006752:	eef0 1a66 	vmov.f32	s3, s13
 8006756:	2200      	movs	r2, #0
 8006758:	eeb0 0a47 	vmov.f32	s0, s14
 800675c:	eef0 0a67 	vmov.f32	s1, s15
 8006760:	f001 f9ae 	bl	8007ac0 <scaraInitScurve>
 8006764:	4603      	mov	r3, r0
 8006766:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 800676a:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800676e:	3301      	adds	r3, #1
 8006770:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8006774:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8006778:	2b03      	cmp	r3, #3
 800677a:	d9bf      	bls.n	80066fc <scaraInitDuty+0x14d4>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 800677c:	4b69      	ldr	r3, [pc, #420]	; (8006924 <scaraInitDuty+0x16fc>)
 800677e:	f603 2238 	addw	r2, r3, #2616	; 0xa38
 8006782:	f04f 0300 	mov.w	r3, #0
 8006786:	f04f 0400 	mov.w	r4, #0
 800678a:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 800678e:	2300      	movs	r3, #0
 8006790:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8006794:	e02d      	b.n	80067f2 <scaraInitDuty+0x15ca>
						if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 8006796:	f897 2185 	ldrb.w	r2, [r7, #389]	; 0x185
 800679a:	4962      	ldr	r1, [pc, #392]	; (8006924 <scaraInitDuty+0x16fc>)
 800679c:	4613      	mov	r3, r2
 800679e:	005b      	lsls	r3, r3, #1
 80067a0:	4413      	add	r3, r2
 80067a2:	01db      	lsls	r3, r3, #7
 80067a4:	440b      	add	r3, r1
 80067a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80067ae:	4b5d      	ldr	r3, [pc, #372]	; (8006924 <scaraInitDuty+0x16fc>)
 80067b0:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80067b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80067b8:	461a      	mov	r2, r3
 80067ba:	4623      	mov	r3, r4
 80067bc:	f7fa f9ac 	bl	8000b18 <__aeabi_dcmpgt>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d010      	beq.n	80067e8 <scaraInitDuty+0x15c0>
							myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 80067c6:	f897 2185 	ldrb.w	r2, [r7, #389]	; 0x185
 80067ca:	4956      	ldr	r1, [pc, #344]	; (8006924 <scaraInitDuty+0x16fc>)
 80067cc:	4613      	mov	r3, r2
 80067ce:	005b      	lsls	r3, r3, #1
 80067d0:	4413      	add	r3, r2
 80067d2:	01db      	lsls	r3, r3, #7
 80067d4:	440b      	add	r3, r1
 80067d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80067de:	4a51      	ldr	r2, [pc, #324]	; (8006924 <scaraInitDuty+0x16fc>)
 80067e0:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80067e4:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 80067e8:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 80067ec:	3301      	adds	r3, #1
 80067ee:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 80067f2:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 80067f6:	2b03      	cmp	r3, #3
 80067f8:	d9cd      	bls.n	8006796 <scaraInitDuty+0x156e>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 80067fa:	2300      	movs	r3, #0
 80067fc:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8006800:	e04c      	b.n	800689c <scaraInitDuty+0x1674>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006802:	f897 2184 	ldrb.w	r2, [r7, #388]	; 0x184
 8006806:	4947      	ldr	r1, [pc, #284]	; (8006924 <scaraInitDuty+0x16fc>)
 8006808:	4613      	mov	r3, r2
 800680a:	005b      	lsls	r3, r3, #1
 800680c:	4413      	add	r3, r2
 800680e:	01db      	lsls	r3, r3, #7
 8006810:	440b      	add	r3, r1
 8006812:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006816:	2201      	movs	r2, #1
 8006818:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 800681a:	f897 0184 	ldrb.w	r0, [r7, #388]	; 0x184
 800681e:	4b41      	ldr	r3, [pc, #260]	; (8006924 <scaraInitDuty+0x16fc>)
 8006820:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006824:	e9d3 1200 	ldrd	r1, r2, [r3]
 8006828:	4c3e      	ldr	r4, [pc, #248]	; (8006924 <scaraInitDuty+0x16fc>)
 800682a:	4603      	mov	r3, r0
 800682c:	005b      	lsls	r3, r3, #1
 800682e:	4403      	add	r3, r0
 8006830:	01db      	lsls	r3, r3, #7
 8006832:	4423      	add	r3, r4
 8006834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006838:	e9c3 1200 	strd	r1, r2, [r3]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 800683c:	f897 2184 	ldrb.w	r2, [r7, #388]	; 0x184
 8006840:	4613      	mov	r3, r2
 8006842:	005b      	lsls	r3, r3, #1
 8006844:	4413      	add	r3, r2
 8006846:	01db      	lsls	r3, r3, #7
 8006848:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800684c:	4a35      	ldr	r2, [pc, #212]	; (8006924 <scaraInitDuty+0x16fc>)
 800684e:	1898      	adds	r0, r3, r2
 8006850:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8006854:	4a34      	ldr	r2, [pc, #208]	; (8006928 <scaraInitDuty+0x1700>)
 8006856:	5cd1      	ldrb	r1, [r2, r3]
 8006858:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800685c:	463a      	mov	r2, r7
 800685e:	00db      	lsls	r3, r3, #3
 8006860:	4413      	add	r3, r2
 8006862:	ed93 7b00 	vldr	d7, [r3]
 8006866:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 800686a:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 800686e:	eeb0 2a45 	vmov.f32	s4, s10
 8006872:	eef0 2a65 	vmov.f32	s5, s11
 8006876:	eeb0 1a46 	vmov.f32	s2, s12
 800687a:	eef0 1a66 	vmov.f32	s3, s13
 800687e:	2201      	movs	r2, #1
 8006880:	eeb0 0a47 	vmov.f32	s0, s14
 8006884:	eef0 0a67 	vmov.f32	s1, s15
 8006888:	f001 f91a 	bl	8007ac0 <scaraInitScurve>
 800688c:	4603      	mov	r3, r0
 800688e:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 8006892:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8006896:	3301      	adds	r3, #1
 8006898:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 800689c:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 80068a0:	2b03      	cmp	r3, #3
 80068a2:	d9ae      	bls.n	8006802 <scaraInitDuty+0x15da>
 80068a4:	e007      	b.n	80068b6 <scaraInitDuty+0x168e>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 80068a6:	2308      	movs	r3, #8
 80068a8:	e033      	b.n	8006912 <scaraInitDuty+0x16ea>
				}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 80068aa:	2305      	movs	r3, #5
 80068ac:	e031      	b.n	8006912 <scaraInitDuty+0x16ea>
			}

		} else {
			return SCARA_STATUS_ERROR_JOINT;
 80068ae:	2304      	movs	r3, #4
 80068b0:	e02f      	b.n	8006912 <scaraInitDuty+0x16ea>
		}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 80068b2:	2302      	movs	r3, #2
 80068b4:	e02d      	b.n	8006912 <scaraInitDuty+0x16ea>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 80068b6:	4a1d      	ldr	r2, [pc, #116]	; (800692c <scaraInitDuty+0x1704>)
 80068b8:	f04f 0300 	mov.w	r3, #0
 80068bc:	f04f 0400 	mov.w	r4, #0
 80068c0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionCurrent.total_time = myDUTY.time_total;
 80068c4:	4b17      	ldr	r3, [pc, #92]	; (8006924 <scaraInitDuty+0x16fc>)
 80068c6:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80068ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80068ce:	4a17      	ldr	r2, [pc, #92]	; (800692c <scaraInitDuty+0x1704>)
 80068d0:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionNext.t = 0;
 80068d4:	4a16      	ldr	r2, [pc, #88]	; (8006930 <scaraInitDuty+0x1708>)
 80068d6:	f04f 0300 	mov.w	r3, #0
 80068da:	f04f 0400 	mov.w	r4, #0
 80068de:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionNext.total_time = myDUTY.time_total;
 80068e2:	4b10      	ldr	r3, [pc, #64]	; (8006924 <scaraInitDuty+0x16fc>)
 80068e4:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80068e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80068ec:	4a10      	ldr	r2, [pc, #64]	; (8006930 <scaraInitDuty+0x1708>)
 80068ee:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionTrue.t = 0;
 80068f2:	4a10      	ldr	r2, [pc, #64]	; (8006934 <scaraInitDuty+0x170c>)
 80068f4:	f04f 0300 	mov.w	r3, #0
 80068f8:	f04f 0400 	mov.w	r4, #0
 80068fc:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionTrue.total_time = myDUTY.time_total;
 8006900:	4b08      	ldr	r3, [pc, #32]	; (8006924 <scaraInitDuty+0x16fc>)
 8006902:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006906:	e9d3 3400 	ldrd	r3, r4, [r3]
 800690a:	4a0a      	ldr	r2, [pc, #40]	; (8006934 <scaraInitDuty+0x170c>)
 800690c:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

	return SCARA_STATUS_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 8006918:	46bd      	mov	sp, r7
 800691a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800691e:	b004      	add	sp, #16
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	20004f28 	.word	0x20004f28
 8006928:	20000824 	.word	0x20000824
 800692c:	20005ae8 	.word	0x20005ae8
 8006930:	20005c68 	.word	0x20005c68
 8006934:	20005ba8 	.word	0x20005ba8

08006938 <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 8006938:	b082      	sub	sp, #8
 800693a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800693c:	b0b1      	sub	sp, #196	; 0xc4
 800693e:	af2e      	add	r7, sp, #184	; 0xb8
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	f107 0120 	add.w	r1, r7, #32
 8006946:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 800694a:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 800694e:	4668      	mov	r0, sp
 8006950:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006954:	22b8      	movs	r2, #184	; 0xb8
 8006956:	4619      	mov	r1, r3
 8006958:	f00f f910 	bl	8015b7c <memcpy>
 800695c:	f107 0320 	add.w	r3, r7, #32
 8006960:	cb0c      	ldmia	r3, {r2, r3}
 8006962:	4620      	mov	r0, r4
 8006964:	f7fd f850 	bl	8003a08 <kinematicInverse>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800696e:	2307      	movs	r3, #7
 8006970:	e09e      	b.n	8006ab0 <scaraInitLine+0x178>
	}
	// Init line params
	line->x1 = end.x;
 8006972:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	e9c2 3402 	strd	r3, r4, [r2, #8]
	line->y1 = end.y;
 800697c:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	e9c2 3406 	strd	r3, r4, [r2, #24]
	line->z1 = end.z;
 8006986:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	line->x0 = start.x;
 8006990:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	e9c2 3400 	strd	r3, r4, [r2]
	line->y0 = start.y;
 800699a:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	e9c2 3404 	strd	r3, r4, [r2, #16]
	line->z0 = start.z;
 80069a4:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	e9c2 3408 	strd	r3, r4, [r2, #32]
	line->denta_x = end.x  -  start.x;
 80069ae:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80069b2:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80069b6:	461a      	mov	r2, r3
 80069b8:	4623      	mov	r3, r4
 80069ba:	f7f9 fc65 	bl	8000288 <__aeabi_dsub>
 80069be:	4603      	mov	r3, r0
 80069c0:	460c      	mov	r4, r1
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 80069c8:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 80069cc:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80069d0:	461a      	mov	r2, r3
 80069d2:	4623      	mov	r3, r4
 80069d4:	f7f9 fc58 	bl	8000288 <__aeabi_dsub>
 80069d8:	4603      	mov	r3, r0
 80069da:	460c      	mov	r4, r1
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 80069e2:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 80069e6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80069ea:	461a      	mov	r2, r3
 80069ec:	4623      	mov	r3, r4
 80069ee:	f7f9 fc4b 	bl	8000288 <__aeabi_dsub>
 80069f2:	4603      	mov	r3, r0
 80069f4:	460c      	mov	r4, r1
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8006a08:	461a      	mov	r2, r3
 8006a0a:	4623      	mov	r3, r4
 8006a0c:	f7f9 fdf4 	bl	80005f8 <__aeabi_dmul>
 8006a10:	4603      	mov	r3, r0
 8006a12:	460c      	mov	r4, r1
 8006a14:	461d      	mov	r5, r3
 8006a16:	4626      	mov	r6, r4
			       +(line->denta_y)*(line->denta_y)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8006a24:	461a      	mov	r2, r3
 8006a26:	4623      	mov	r3, r4
 8006a28:	f7f9 fde6 	bl	80005f8 <__aeabi_dmul>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	460c      	mov	r4, r1
 8006a30:	461a      	mov	r2, r3
 8006a32:	4623      	mov	r3, r4
 8006a34:	4628      	mov	r0, r5
 8006a36:	4631      	mov	r1, r6
 8006a38:	f7f9 fc28 	bl	800028c <__adddf3>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	460c      	mov	r4, r1
 8006a40:	461d      	mov	r5, r3
 8006a42:	4626      	mov	r6, r4
				   +(line->denta_z)*(line->denta_z));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8006a50:	461a      	mov	r2, r3
 8006a52:	4623      	mov	r3, r4
 8006a54:	f7f9 fdd0 	bl	80005f8 <__aeabi_dmul>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	460c      	mov	r4, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	4623      	mov	r3, r4
 8006a60:	4628      	mov	r0, r5
 8006a62:	4631      	mov	r1, r6
 8006a64:	f7f9 fc12 	bl	800028c <__adddf3>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	460c      	mov	r4, r1
 8006a6c:	ec44 3b17 	vmov	d7, r3, r4
 8006a70:	eeb0 0a47 	vmov.f32	s0, s14
 8006a74:	eef0 0a67 	vmov.f32	s1, s15
 8006a78:	f012 ff88 	bl	801998c <sqrt>
 8006a7c:	eeb0 7a40 	vmov.f32	s14, s0
 8006a80:	eef0 7a60 	vmov.f32	s15, s1
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	line->y_current = line->y0;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	line->z_current = line->z0;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	return SCARA_STATUS_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006aba:	b002      	add	sp, #8
 8006abc:	4770      	bx	lr
	...

08006ac0 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 8006ac0:	b082      	sub	sp, #8
 8006ac2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ac6:	b0c3      	sub	sp, #268	; 0x10c
 8006ac8:	af2e      	add	r7, sp, #184	; 0xb8
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8006ad0:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 8006ad4:	f507 7698 	add.w	r6, r7, #304	; 0x130
 8006ad8:	4668      	mov	r0, sp
 8006ada:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006ade:	22b8      	movs	r2, #184	; 0xb8
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	f00f f84b 	bl	8015b7c <memcpy>
 8006ae6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006aea:	cb0c      	ldmia	r3, {r2, r3}
 8006aec:	4630      	mov	r0, r6
 8006aee:	f7fc ff8b 	bl	8003a08 <kinematicInverse>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d101      	bne.n	8006afc <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8006af8:	2307      	movs	r3, #7
 8006afa:	e146      	b.n	8006d8a <scaraInitCircle+0x2ca>
	}

	if( 1 != dir && -1 != dir) {
 8006afc:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d006      	beq.n	8006b12 <scaraInitCircle+0x52>
 8006b04:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8006b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0c:	d001      	beq.n	8006b12 <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
 8006b0e:	2306      	movs	r3, #6
 8006b10:	e13b      	b.n	8006d8a <scaraInitCircle+0x2ca>
	}

	double v_x_start, v_y_start, v_x_stop, v_y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	v_x_start = start.x - center.x;
 8006b12:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006b16:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8006b1a:	f7f9 fbb5 	bl	8000288 <__aeabi_dsub>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	460b      	mov	r3, r1
 8006b22:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	v_y_start = start.y - center.y;
 8006b26:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006b2a:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006b2e:	f7f9 fbab 	bl	8000288 <__aeabi_dsub>
 8006b32:	4602      	mov	r2, r0
 8006b34:	460b      	mov	r3, r1
 8006b36:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	v_x_stop  = end.x  - center.x;
 8006b3a:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006b3e:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8006b42:	f7f9 fba1 	bl	8000288 <__aeabi_dsub>
 8006b46:	4602      	mov	r2, r0
 8006b48:	460b      	mov	r3, r1
 8006b4a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	v_y_stop  = end.y  - center.y;
 8006b4e:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8006b52:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006b56:	f7f9 fb97 	bl	8000288 <__aeabi_dsub>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	r1 = sqrt(v_x_start*v_x_start + v_y_start*v_y_start);
 8006b62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b66:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006b6a:	f7f9 fd45 	bl	80005f8 <__aeabi_dmul>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	460b      	mov	r3, r1
 8006b72:	4690      	mov	r8, r2
 8006b74:	4699      	mov	r9, r3
 8006b76:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b7a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006b7e:	f7f9 fd3b 	bl	80005f8 <__aeabi_dmul>
 8006b82:	4602      	mov	r2, r0
 8006b84:	460b      	mov	r3, r1
 8006b86:	4640      	mov	r0, r8
 8006b88:	4649      	mov	r1, r9
 8006b8a:	f7f9 fb7f 	bl	800028c <__adddf3>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	460b      	mov	r3, r1
 8006b92:	ec43 2b17 	vmov	d7, r2, r3
 8006b96:	eeb0 0a47 	vmov.f32	s0, s14
 8006b9a:	eef0 0a67 	vmov.f32	s1, s15
 8006b9e:	f012 fef5 	bl	801998c <sqrt>
 8006ba2:	ed87 0b08 	vstr	d0, [r7, #32]
	r2 = sqrt(v_x_stop*v_x_stop + v_y_stop*v_y_stop);
 8006ba6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006baa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006bae:	f7f9 fd23 	bl	80005f8 <__aeabi_dmul>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	4690      	mov	r8, r2
 8006bb8:	4699      	mov	r9, r3
 8006bba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006bbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006bc2:	f7f9 fd19 	bl	80005f8 <__aeabi_dmul>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4640      	mov	r0, r8
 8006bcc:	4649      	mov	r1, r9
 8006bce:	f7f9 fb5d 	bl	800028c <__adddf3>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	ec43 2b17 	vmov	d7, r2, r3
 8006bda:	eeb0 0a47 	vmov.f32	s0, s14
 8006bde:	eef0 0a67 	vmov.f32	s1, s15
 8006be2:	f012 fed3 	bl	801998c <sqrt>
 8006be6:	ed87 0b06 	vstr	d0, [r7, #24]

	if( 1.0 < fabs(r1 - r2)) {
 8006bea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006bf2:	f7f9 fb49 	bl	8000288 <__aeabi_dsub>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	4614      	mov	r4, r2
 8006bfc:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8006c00:	f04f 0200 	mov.w	r2, #0
 8006c04:	4b68      	ldr	r3, [pc, #416]	; (8006da8 <scaraInitCircle+0x2e8>)
 8006c06:	4620      	mov	r0, r4
 8006c08:	4629      	mov	r1, r5
 8006c0a:	f7f9 ff85 	bl	8000b18 <__aeabi_dcmpgt>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d001      	beq.n	8006c18 <scaraInitCircle+0x158>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 8006c14:	2306      	movs	r3, #6
 8006c16:	e0b8      	b.n	8006d8a <scaraInitCircle+0x2ca>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 8006c18:	a35f      	add	r3, pc, #380	; (adr r3, 8006d98 <scaraInitCircle+0x2d8>)
 8006c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006c22:	f7f9 ff5b 	bl	8000adc <__aeabi_dcmplt>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d109      	bne.n	8006c40 <scaraInitCircle+0x180>
 8006c2c:	a35a      	add	r3, pc, #360	; (adr r3, 8006d98 <scaraInitCircle+0x2d8>)
 8006c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c32:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006c36:	f7f9 ff51 	bl	8000adc <__aeabi_dcmplt>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d001      	beq.n	8006c44 <scaraInitCircle+0x184>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 8006c40:	2306      	movs	r3, #6
 8006c42:	e0a2      	b.n	8006d8a <scaraInitCircle+0x2ca>
	}

	angle_start = atan2(v_y_start, v_x_start);
 8006c44:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 8006c48:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8006c4c:	f012 fe9c 	bl	8019988 <atan2>
 8006c50:	ed87 0b04 	vstr	d0, [r7, #16]
	angle_stop  = atan2(v_y_stop, v_x_stop);
 8006c54:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8006c58:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8006c5c:	f012 fe94 	bl	8019988 <atan2>
 8006c60:	ed87 0b02 	vstr	d0, [r7, #8]
	delta_angle = angle_stop - angle_start;
 8006c64:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006c68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c6c:	f7f9 fb0c 	bl	8000288 <__aeabi_dsub>
 8006c70:	4603      	mov	r3, r0
 8006c72:	460c      	mov	r4, r1
 8006c74:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

	if ( 0 > delta_angle) {
 8006c78:	f04f 0200 	mov.w	r2, #0
 8006c7c:	f04f 0300 	mov.w	r3, #0
 8006c80:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006c84:	f7f9 ff2a 	bl	8000adc <__aeabi_dcmplt>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00a      	beq.n	8006ca4 <scaraInitCircle+0x1e4>
		delta_angle += 2*PI;
 8006c8e:	a344      	add	r3, pc, #272	; (adr r3, 8006da0 <scaraInitCircle+0x2e0>)
 8006c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c94:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006c98:	f7f9 faf8 	bl	800028c <__adddf3>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	460c      	mov	r4, r1
 8006ca0:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	} // atan2 range : -PI --> PI

	if ( 0 > dir) {
 8006ca4:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	da0a      	bge.n	8006cc2 <scaraInitCircle+0x202>
		delta_angle = 2*PI - delta_angle;
 8006cac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006cb0:	a13b      	add	r1, pc, #236	; (adr r1, 8006da0 <scaraInitCircle+0x2e0>)
 8006cb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cb6:	f7f9 fae7 	bl	8000288 <__aeabi_dsub>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	460c      	mov	r4, r1
 8006cbe:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	}
	// Init circle params
	circle->dir = dir;
 8006cc2:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8006cc6:	b25a      	sxtb	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8006cd2:	e9c2 3402 	strd	r3, r4, [r2, #8]
	circle->angle_start = angle_start;
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006cdc:	e9c2 3404 	strd	r3, r4, [r2, #16]
	circle->angle_stop  = angle_stop;
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006ce6:	e9c2 3406 	strd	r3, r4, [r2, #24]
	circle->total_angle = delta_angle;
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8006cf0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 8006cf4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cf8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006cfc:	f7f9 fc7c 	bl	80005f8 <__aeabi_dmul>
 8006d00:	4603      	mov	r3, r0
 8006d02:	460c      	mov	r4, r1
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	circle->x0 = start.x;
 8006d0a:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	e9c2 3408 	strd	r3, r4, [r2, #32]
	circle->y0 = start.y;
 8006d14:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	circle->x1 = end.x;
 8006d1e:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	circle->y1 = end.y;
 8006d28:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	circle->xi = center.x;
 8006d32:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	circle->yi = center.y;
 8006d3c:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	circle->z0 = start.z;
 8006d46:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	circle->z1 = start.z;
 8006d50:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	circle->zi = start.z;
 8006d5a:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	circle->x_current = circle->x0;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->y0;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->z0;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3754      	adds	r7, #84	; 0x54
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d94:	b002      	add	sp, #8
 8006d96:	4770      	bx	lr
 8006d98:	9999999a 	.word	0x9999999a
 8006d9c:	3fb99999 	.word	0x3fb99999
 8006da0:	60000000 	.word	0x60000000
 8006da4:	401921fb 	.word	0x401921fb
 8006da8:	3ff00000 	.word	0x3ff00000
 8006dac:	00000000 	.word	0x00000000

08006db0 <scaraInitLinear>:

SCARA_StatusTypeDef scaraInitLinear(Trajectory_Linear_TypeDef *linear, Trajectory_TargetTypeDef target, double total_s,
									ModeInitTypeDef modeinit, double time)
{
 8006db0:	b590      	push	{r4, r7, lr}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6178      	str	r0, [r7, #20]
 8006db8:	460b      	mov	r3, r1
 8006dba:	ed87 0b02 	vstr	d0, [r7, #8]
 8006dbe:	ed87 1b00 	vstr	d1, [r7]
 8006dc2:	74fb      	strb	r3, [r7, #19]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	74bb      	strb	r3, [r7, #18]

	if(target == TRAJECTORY_3D){
 8006dc8:	7cfb      	ldrb	r3, [r7, #19]
 8006dca:	2b04      	cmp	r3, #4
 8006dcc:	d004      	beq.n	8006dd8 <scaraInitLinear+0x28>

	}else if(target == TRAJECTORY_ROLL){
 8006dce:	7cfb      	ldrb	r3, [r7, #19]
 8006dd0:	2b05      	cmp	r3, #5
 8006dd2:	d001      	beq.n	8006dd8 <scaraInitLinear+0x28>

	}else{
		return SCARA_STATUS_ERROR_PARA;
 8006dd4:	2306      	movs	r3, #6
 8006dd6:	e02e      	b.n	8006e36 <scaraInitLinear+0x86>
	}

	if(modeinit == DUTY_MODE_INIT_QT){
 8006dd8:	7cbb      	ldrb	r3, [r7, #18]
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d125      	bne.n	8006e2a <scaraInitLinear+0x7a>
		linear->constant_v = total_s / time;
 8006dde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006de2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006de6:	f7f9 fd31 	bl	800084c <__aeabi_ddiv>
 8006dea:	4603      	mov	r3, r0
 8006dec:	460c      	mov	r4, r1
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	e9c2 3402 	strd	r3, r4, [r2, #8]
		linear->number_of_sample = ceilf(time / T_SAMPLING); // ceiling
 8006df4:	a312      	add	r3, pc, #72	; (adr r3, 8006e40 <scaraInitLinear+0x90>)
 8006df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dfe:	f7f9 fd25 	bl	800084c <__aeabi_ddiv>
 8006e02:	4603      	mov	r3, r0
 8006e04:	460c      	mov	r4, r1
 8006e06:	4618      	mov	r0, r3
 8006e08:	4621      	mov	r1, r4
 8006e0a:	f7f9 feed 	bl	8000be8 <__aeabi_d2f>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	ee00 3a10 	vmov	s0, r3
 8006e14:	f012 fd78 	bl	8019908 <ceilf>
 8006e18:	eef0 7a40 	vmov.f32	s15, s0
 8006e1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e20:	ee17 2a90 	vmov	r2, s15
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	621a      	str	r2, [r3, #32]
 8006e28:	e004      	b.n	8006e34 <scaraInitLinear+0x84>
	}else if(modeinit == DUTY_MODE_INIT_QV){
 8006e2a:	7cbb      	ldrb	r3, [r7, #18]
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d001      	beq.n	8006e34 <scaraInitLinear+0x84>

	}else{
		return SCARA_STATUS_ERROR_PARA;
 8006e30:	2306      	movs	r3, #6
 8006e32:	e000      	b.n	8006e36 <scaraInitLinear+0x86>
	}

	return SCARA_STATUS_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	371c      	adds	r7, #28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd90      	pop	{r4, r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	40000000 	.word	0x40000000
 8006e44:	3f847ae1 	.word	0x3f847ae1

08006e48 <scaraInitLSPB1>:
SCARA_StatusTypeDef	scaraInitLSPB1		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double additional_factor){
 8006e48:	b5b0      	push	{r4, r5, r7, lr}
 8006e4a:	b096      	sub	sp, #88	; 0x58
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	61f8      	str	r0, [r7, #28]
 8006e50:	460b      	mov	r3, r1
 8006e52:	ed87 0b04 	vstr	d0, [r7, #16]
 8006e56:	ed87 1b02 	vstr	d1, [r7, #8]
 8006e5a:	ed87 2b00 	vstr	d2, [r7]
 8006e5e:	76fb      	strb	r3, [r7, #27]
 8006e60:	4613      	mov	r3, r2
 8006e62:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	int8_t dir;
	if(target == TRAJECTORY_3D){
 8006e64:	7efb      	ldrb	r3, [r7, #27]
 8006e66:	2b04      	cmp	r3, #4
 8006e68:	d12c      	bne.n	8006ec4 <scaraInitLSPB1+0x7c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8006e6a:	7ebb      	ldrb	r3, [r7, #26]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d10f      	bne.n	8006e90 <scaraInitLSPB1+0x48>
			v_design = V_MOVE_MAX*v_factor;
 8006e70:	f04f 0200 	mov.w	r2, #0
 8006e74:	4b72      	ldr	r3, [pc, #456]	; (8007040 <scaraInitLSPB1+0x1f8>)
 8006e76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e7a:	f7f9 fbbd 	bl	80005f8 <__aeabi_dmul>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	460c      	mov	r4, r1
 8006e82:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 8006e86:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006e8a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8006e8e:	e01b      	b.n	8006ec8 <scaraInitLSPB1+0x80>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 8006e90:	7ebb      	ldrb	r3, [r7, #26]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d118      	bne.n	8006ec8 <scaraInitLSPB1+0x80>
			a_design = A_MOVE_MAX*additional_factor;
 8006e96:	f04f 0200 	mov.w	r2, #0
 8006e9a:	4b6a      	ldr	r3, [pc, #424]	; (8007044 <scaraInitLSPB1+0x1fc>)
 8006e9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ea0:	f7f9 fbaa 	bl	80005f8 <__aeabi_dmul>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	460c      	mov	r4, r1
 8006ea8:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			v_design = V_MOVE_MAX*v_factor;
 8006eac:	f04f 0200 	mov.w	r2, #0
 8006eb0:	4b63      	ldr	r3, [pc, #396]	; (8007040 <scaraInitLSPB1+0x1f8>)
 8006eb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006eb6:	f7f9 fb9f 	bl	80005f8 <__aeabi_dmul>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	460c      	mov	r4, r1
 8006ebe:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8006ec2:	e001      	b.n	8006ec8 <scaraInitLSPB1+0x80>
		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8006ec4:	2306      	movs	r3, #6
 8006ec6:	e209      	b.n	80072dc <scaraInitLSPB1+0x494>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 8006ec8:	7ebb      	ldrb	r3, [r7, #26]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	f040 80c4 	bne.w	8007058 <scaraInitLSPB1+0x210>
		//check if time valid or not
		if(tf < 0.1 && v_design > 7.5){
 8006ed0:	a357      	add	r3, pc, #348	; (adr r3, 8007030 <scaraInitLSPB1+0x1e8>)
 8006ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006eda:	f7f9 fdff 	bl	8000adc <__aeabi_dcmplt>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d01d      	beq.n	8006f20 <scaraInitLSPB1+0xd8>
 8006ee4:	f04f 0200 	mov.w	r2, #0
 8006ee8:	4b57      	ldr	r3, [pc, #348]	; (8007048 <scaraInitLSPB1+0x200>)
 8006eea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006eee:	f7f9 fe13 	bl	8000b18 <__aeabi_dcmpgt>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d013      	beq.n	8006f20 <scaraInitLSPB1+0xd8>
			tf = 1.5*total_s/v_design;
 8006ef8:	f04f 0200 	mov.w	r2, #0
 8006efc:	4b53      	ldr	r3, [pc, #332]	; (800704c <scaraInitLSPB1+0x204>)
 8006efe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006f02:	f7f9 fb79 	bl	80005f8 <__aeabi_dmul>
 8006f06:	4603      	mov	r3, r0
 8006f08:	460c      	mov	r4, r1
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	4621      	mov	r1, r4
 8006f0e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006f12:	f7f9 fc9b 	bl	800084c <__aeabi_ddiv>
 8006f16:	4603      	mov	r3, r0
 8006f18:	460c      	mov	r4, r1
 8006f1a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8006f1e:	e060      	b.n	8006fe2 <scaraInitLSPB1+0x19a>
		}else if(v_design < 0.0001 && tf > 0.5){ //check if velocity valid or not
 8006f20:	a345      	add	r3, pc, #276	; (adr r3, 8007038 <scaraInitLSPB1+0x1f0>)
 8006f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f26:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006f2a:	f7f9 fdd7 	bl	8000adc <__aeabi_dcmplt>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d01d      	beq.n	8006f70 <scaraInitLSPB1+0x128>
 8006f34:	f04f 0200 	mov.w	r2, #0
 8006f38:	4b45      	ldr	r3, [pc, #276]	; (8007050 <scaraInitLSPB1+0x208>)
 8006f3a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006f3e:	f7f9 fdeb 	bl	8000b18 <__aeabi_dcmpgt>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d013      	beq.n	8006f70 <scaraInitLSPB1+0x128>
			v_design = 1.5*total_s/tf;
 8006f48:	f04f 0200 	mov.w	r2, #0
 8006f4c:	4b3f      	ldr	r3, [pc, #252]	; (800704c <scaraInitLSPB1+0x204>)
 8006f4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006f52:	f7f9 fb51 	bl	80005f8 <__aeabi_dmul>
 8006f56:	4603      	mov	r3, r0
 8006f58:	460c      	mov	r4, r1
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	4621      	mov	r1, r4
 8006f5e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006f62:	f7f9 fc73 	bl	800084c <__aeabi_ddiv>
 8006f66:	4603      	mov	r3, r0
 8006f68:	460c      	mov	r4, r1
 8006f6a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8006f6e:	e038      	b.n	8006fe2 <scaraInitLSPB1+0x19a>
		}else{
			v_lim = total_s/tf;
 8006f70:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006f74:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006f78:	f7f9 fc68 	bl	800084c <__aeabi_ddiv>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	460c      	mov	r4, r1
 8006f80:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			if(v_design < 1.2*v_lim){
 8006f84:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8006f88:	4b32      	ldr	r3, [pc, #200]	; (8007054 <scaraInitLSPB1+0x20c>)
 8006f8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006f8e:	f7f9 fb33 	bl	80005f8 <__aeabi_dmul>
 8006f92:	4603      	mov	r3, r0
 8006f94:	460c      	mov	r4, r1
 8006f96:	461a      	mov	r2, r3
 8006f98:	4623      	mov	r3, r4
 8006f9a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006f9e:	f7f9 fd9d 	bl	8000adc <__aeabi_dcmplt>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d001      	beq.n	8006fac <scaraInitLSPB1+0x164>
				return SCARA_STATUS_ERROR_OVER_VELOC;
 8006fa8:	2309      	movs	r3, #9
 8006faa:	e197      	b.n	80072dc <scaraInitLSPB1+0x494>
			}else if(v_design > 2*v_lim){
 8006fac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	f7f9 f96a 	bl	800028c <__adddf3>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	460c      	mov	r4, r1
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	4623      	mov	r3, r4
 8006fc0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006fc4:	f7f9 fda8 	bl	8000b18 <__aeabi_dcmpgt>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d009      	beq.n	8006fe2 <scaraInitLSPB1+0x19a>
				v_design = 2*v_lim;
 8006fce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	f7f9 f959 	bl	800028c <__adddf3>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	460c      	mov	r4, r1
 8006fde:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			}else{

			}
		}
		ta = tf - total_s/v_design;
 8006fe2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006fe6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006fea:	f7f9 fc2f 	bl	800084c <__aeabi_ddiv>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	460c      	mov	r4, r1
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	4623      	mov	r3, r4
 8006ff6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006ffa:	f7f9 f945 	bl	8000288 <__aeabi_dsub>
 8006ffe:	4603      	mov	r3, r0
 8007000:	460c      	mov	r4, r1
 8007002:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		a_design = v_design/ta;
 8007006:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800700a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800700e:	f7f9 fc1d 	bl	800084c <__aeabi_ddiv>
 8007012:	4603      	mov	r3, r0
 8007014:	460c      	mov	r4, r1
 8007016:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		td = tf - ta;
 800701a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800701e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007022:	f7f9 f931 	bl	8000288 <__aeabi_dsub>
 8007026:	4603      	mov	r3, r0
 8007028:	460c      	mov	r4, r1
 800702a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 800702e:	e0ed      	b.n	800720c <scaraInitLSPB1+0x3c4>
 8007030:	9999999a 	.word	0x9999999a
 8007034:	3fb99999 	.word	0x3fb99999
 8007038:	eb1c432d 	.word	0xeb1c432d
 800703c:	3f1a36e2 	.word	0x3f1a36e2
 8007040:	40877000 	.word	0x40877000
 8007044:	407f4000 	.word	0x407f4000
 8007048:	401e0000 	.word	0x401e0000
 800704c:	3ff80000 	.word	0x3ff80000
 8007050:	3fe00000 	.word	0x3fe00000
 8007054:	3ff33333 	.word	0x3ff33333

	}else if(modeinit == DUTY_MODE_INIT_QVA){
 8007058:	7ebb      	ldrb	r3, [r7, #26]
 800705a:	2b00      	cmp	r3, #0
 800705c:	f040 80d6 	bne.w	800720c <scaraInitLSPB1+0x3c4>
		//check qva condition
		if(total_s*a_design < v_design*v_design){ //condition for ta smaller than td
 8007060:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007064:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007068:	f7f9 fac6 	bl	80005f8 <__aeabi_dmul>
 800706c:	4603      	mov	r3, r0
 800706e:	460c      	mov	r4, r1
 8007070:	4625      	mov	r5, r4
 8007072:	461c      	mov	r4, r3
 8007074:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007078:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800707c:	f7f9 fabc 	bl	80005f8 <__aeabi_dmul>
 8007080:	4602      	mov	r2, r0
 8007082:	460b      	mov	r3, r1
 8007084:	4620      	mov	r0, r4
 8007086:	4629      	mov	r1, r5
 8007088:	f7f9 fd28 	bl	8000adc <__aeabi_dcmplt>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 8088 	beq.w	80071a4 <scaraInitLSPB1+0x35c>
			if(total_s/v_design < 0.8){ //td too small
 8007094:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007098:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800709c:	f7f9 fbd6 	bl	800084c <__aeabi_ddiv>
 80070a0:	4603      	mov	r3, r0
 80070a2:	460c      	mov	r4, r1
 80070a4:	4618      	mov	r0, r3
 80070a6:	4621      	mov	r1, r4
 80070a8:	a393      	add	r3, pc, #588	; (adr r3, 80072f8 <scaraInitLSPB1+0x4b0>)
 80070aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ae:	f7f9 fd15 	bl	8000adc <__aeabi_dcmplt>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00a      	beq.n	80070ce <scaraInitLSPB1+0x286>
				//recalculate v_design
				v_design = 0.8*total_s;
 80070b8:	a38f      	add	r3, pc, #572	; (adr r3, 80072f8 <scaraInitLSPB1+0x4b0>)
 80070ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80070c2:	f7f9 fa99 	bl	80005f8 <__aeabi_dmul>
 80070c6:	4603      	mov	r3, r0
 80070c8:	460c      	mov	r4, r1
 80070ca:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			}
			if(v_design/a_design < 0.5){ //ta is too small
 80070ce:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80070d2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80070d6:	f7f9 fbb9 	bl	800084c <__aeabi_ddiv>
 80070da:	4603      	mov	r3, r0
 80070dc:	460c      	mov	r4, r1
 80070de:	4618      	mov	r0, r3
 80070e0:	4621      	mov	r1, r4
 80070e2:	f04f 0200 	mov.w	r2, #0
 80070e6:	4b82      	ldr	r3, [pc, #520]	; (80072f0 <scaraInitLSPB1+0x4a8>)
 80070e8:	f7f9 fcf8 	bl	8000adc <__aeabi_dcmplt>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00a      	beq.n	8007108 <scaraInitLSPB1+0x2c0>
				//recalculate a_design
				a_design = v_design/0.5;
 80070f2:	f04f 0200 	mov.w	r2, #0
 80070f6:	4b7e      	ldr	r3, [pc, #504]	; (80072f0 <scaraInitLSPB1+0x4a8>)
 80070f8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80070fc:	f7f9 fba6 	bl	800084c <__aeabi_ddiv>
 8007100:	4603      	mov	r3, r0
 8007102:	460c      	mov	r4, r1
 8007104:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			}
			ta = v_design/a_design;
 8007108:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800710c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007110:	f7f9 fb9c 	bl	800084c <__aeabi_ddiv>
 8007114:	4603      	mov	r3, r0
 8007116:	460c      	mov	r4, r1
 8007118:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
			td = total_s/v_design;
 800711c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007120:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007124:	f7f9 fb92 	bl	800084c <__aeabi_ddiv>
 8007128:	4603      	mov	r3, r0
 800712a:	460c      	mov	r4, r1
 800712c:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			tf = ta + td;
 8007130:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007134:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007138:	f7f9 f8a8 	bl	800028c <__adddf3>
 800713c:	4603      	mov	r3, r0
 800713e:	460c      	mov	r4, r1
 8007140:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			if(v_design/a_design < 1){ //ta is too small
 8007144:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007148:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800714c:	f7f9 fb7e 	bl	800084c <__aeabi_ddiv>
 8007150:	4603      	mov	r3, r0
 8007152:	460c      	mov	r4, r1
 8007154:	4618      	mov	r0, r3
 8007156:	4621      	mov	r1, r4
 8007158:	f04f 0200 	mov.w	r2, #0
 800715c:	4b65      	ldr	r3, [pc, #404]	; (80072f4 <scaraInitLSPB1+0x4ac>)
 800715e:	f7f9 fcbd 	bl	8000adc <__aeabi_dcmplt>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d051      	beq.n	800720c <scaraInitLSPB1+0x3c4>
				//recalculate a_design
				a_design = v_design;
 8007168:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800716c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
				ta = 1;
 8007170:	f04f 0300 	mov.w	r3, #0
 8007174:	4c5f      	ldr	r4, [pc, #380]	; (80072f4 <scaraInitLSPB1+0x4ac>)
 8007176:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
				td = total_s/v_design;
 800717a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800717e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007182:	f7f9 fb63 	bl	800084c <__aeabi_ddiv>
 8007186:	4603      	mov	r3, r0
 8007188:	460c      	mov	r4, r1
 800718a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
				tf = ta + td;
 800718e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007192:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007196:	f7f9 f879 	bl	800028c <__adddf3>
 800719a:	4603      	mov	r3, r0
 800719c:	460c      	mov	r4, r1
 800719e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 80071a2:	e033      	b.n	800720c <scaraInitLSPB1+0x3c4>
			}

		}else{
			tf = 2*total_s/v_design;
 80071a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80071a8:	4602      	mov	r2, r0
 80071aa:	460b      	mov	r3, r1
 80071ac:	f7f9 f86e 	bl	800028c <__adddf3>
 80071b0:	4603      	mov	r3, r0
 80071b2:	460c      	mov	r4, r1
 80071b4:	4618      	mov	r0, r3
 80071b6:	4621      	mov	r1, r4
 80071b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80071bc:	f7f9 fb46 	bl	800084c <__aeabi_ddiv>
 80071c0:	4603      	mov	r3, r0
 80071c2:	460c      	mov	r4, r1
 80071c4:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			ta = tf/2;
 80071c8:	f04f 0200 	mov.w	r2, #0
 80071cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80071d0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80071d4:	f7f9 fb3a 	bl	800084c <__aeabi_ddiv>
 80071d8:	4603      	mov	r3, r0
 80071da:	460c      	mov	r4, r1
 80071dc:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
			td = tf/2;
 80071e0:	f04f 0200 	mov.w	r2, #0
 80071e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80071e8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80071ec:	f7f9 fb2e 	bl	800084c <__aeabi_ddiv>
 80071f0:	4603      	mov	r3, r0
 80071f2:	460c      	mov	r4, r1
 80071f4:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			a_design = v_design/ta;
 80071f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80071fc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007200:	f7f9 fb24 	bl	800084c <__aeabi_ddiv>
 8007204:	4603      	mov	r3, r0
 8007206:	460c      	mov	r4, r1
 8007208:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		}
	}
	no_sample = ceilf(tf / T_SAMPLING); // ceiling
 800720c:	a336      	add	r3, pc, #216	; (adr r3, 80072e8 <scaraInitLSPB1+0x4a0>)
 800720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007212:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007216:	f7f9 fb19 	bl	800084c <__aeabi_ddiv>
 800721a:	4603      	mov	r3, r0
 800721c:	460c      	mov	r4, r1
 800721e:	4618      	mov	r0, r3
 8007220:	4621      	mov	r1, r4
 8007222:	f7f9 fce1 	bl	8000be8 <__aeabi_d2f>
 8007226:	4603      	mov	r3, r0
 8007228:	ee00 3a10 	vmov	s0, r3
 800722c:	f012 fb6c 	bl	8019908 <ceilf>
 8007230:	eef0 7a40 	vmov.f32	s15, s0
 8007234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007238:	ee17 3a90 	vmov	r3, s15
 800723c:	627b      	str	r3, [r7, #36]	; 0x24
	 // Init lspb params
	 lspb->dir= dir;
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007244:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = 0;
 8007246:	69fa      	ldr	r2, [r7, #28]
 8007248:	f04f 0300 	mov.w	r3, #0
 800724c:	f04f 0400 	mov.w	r4, #0
 8007250:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = total_s;
 8007254:	69fa      	ldr	r2, [r7, #28]
 8007256:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800725a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 800725e:	69fa      	ldr	r2, [r7, #28]
 8007260:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8007264:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 8007268:	69fa      	ldr	r2, [r7, #28]
 800726a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800726e:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 8007272:	69fa      	ldr	r2, [r7, #28]
 8007274:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8007278:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 800727c:	69fa      	ldr	r2, [r7, #28]
 800727e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8007282:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 8007286:	69fa      	ldr	r2, [r7, #28]
 8007288:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800728c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_design;
 8007290:	69fa      	ldr	r2, [r7, #28]
 8007292:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8007296:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = 0;
 800729a:	69fa      	ldr	r2, [r7, #28]
 800729c:	f04f 0300 	mov.w	r3, #0
 80072a0:	f04f 0400 	mov.w	r4, #0
 80072a4:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = 0;
 80072a8:	69fa      	ldr	r2, [r7, #28]
 80072aa:	f04f 0300 	mov.w	r3, #0
 80072ae:	f04f 0400 	mov.w	r4, #0
 80072b2:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ba:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80072c8:	461a      	mov	r2, r3
 80072ca:	4623      	mov	r3, r4
 80072cc:	f7f8 ffdc 	bl	8000288 <__aeabi_dsub>
 80072d0:	4603      	mov	r3, r0
 80072d2:	460c      	mov	r4, r1
 80072d4:	69fa      	ldr	r2, [r7, #28]
 80072d6:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3758      	adds	r7, #88	; 0x58
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bdb0      	pop	{r4, r5, r7, pc}
 80072e4:	f3af 8000 	nop.w
 80072e8:	40000000 	.word	0x40000000
 80072ec:	3f847ae1 	.word	0x3f847ae1
 80072f0:	3fe00000 	.word	0x3fe00000
 80072f4:	3ff00000 	.word	0x3ff00000
 80072f8:	9999999a 	.word	0x9999999a
 80072fc:	3fe99999 	.word	0x3fe99999

08007300 <scaraInitLSPB>:
SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8007300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007304:	b0ad      	sub	sp, #180	; 0xb4
 8007306:	af00      	add	r7, sp, #0
 8007308:	62f8      	str	r0, [r7, #44]	; 0x2c
 800730a:	460b      	mov	r3, r1
 800730c:	ed87 0b08 	vstr	d0, [r7, #32]
 8007310:	ed87 1b06 	vstr	d1, [r7, #24]
 8007314:	ed87 2b04 	vstr	d2, [r7, #16]
 8007318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800731c:	4613      	mov	r3, r2
 800731e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 8007322:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007326:	2b04      	cmp	r3, #4
 8007328:	d118      	bne.n	800735c <scaraInitLSPB+0x5c>
		 v_design = V_DESIGN_3D*v_factor;
 800732a:	f20f 7368 	addw	r3, pc, #1896	; 0x768
 800732e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007332:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007336:	f7f9 f95f 	bl	80005f8 <__aeabi_dmul>
 800733a:	4603      	mov	r3, r0
 800733c:	460c      	mov	r4, r1
 800733e:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_3D*a_factor;
 8007342:	f20f 7350 	addw	r3, pc, #1872	; 0x750
 8007346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800734e:	f7f9 f953 	bl	80005f8 <__aeabi_dmul>
 8007352:	4603      	mov	r3, r0
 8007354:	460c      	mov	r4, r1
 8007356:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800735a:	e092      	b.n	8007482 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_ROLL == target) {
 800735c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007360:	2b05      	cmp	r3, #5
 8007362:	d118      	bne.n	8007396 <scaraInitLSPB+0x96>
		 v_design = V_DESIGN_ROLL*v_factor;
 8007364:	f20f 7334 	addw	r3, pc, #1844	; 0x734
 8007368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007370:	f7f9 f942 	bl	80005f8 <__aeabi_dmul>
 8007374:	4603      	mov	r3, r0
 8007376:	460c      	mov	r4, r1
 8007378:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_ROLL*a_factor;
 800737c:	f20f 731c 	addw	r3, pc, #1820	; 0x71c
 8007380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007384:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007388:	f7f9 f936 	bl	80005f8 <__aeabi_dmul>
 800738c:	4603      	mov	r3, r0
 800738e:	460c      	mov	r4, r1
 8007390:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8007394:	e075      	b.n	8007482 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J0 == target) {
 8007396:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800739a:	2b00      	cmp	r3, #0
 800739c:	d118      	bne.n	80073d0 <scaraInitLSPB+0xd0>
		 v_design = V_DESIGN_J0*v_factor;
 800739e:	f20f 63fc 	addw	r3, pc, #1788	; 0x6fc
 80073a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80073aa:	f7f9 f925 	bl	80005f8 <__aeabi_dmul>
 80073ae:	4603      	mov	r3, r0
 80073b0:	460c      	mov	r4, r1
 80073b2:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J0*a_factor;
 80073b6:	f20f 63e4 	addw	r3, pc, #1764	; 0x6e4
 80073ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80073c2:	f7f9 f919 	bl	80005f8 <__aeabi_dmul>
 80073c6:	4603      	mov	r3, r0
 80073c8:	460c      	mov	r4, r1
 80073ca:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80073ce:	e058      	b.n	8007482 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J1 == target) {
 80073d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d118      	bne.n	800740a <scaraInitLSPB+0x10a>
		 v_design = V_DESIGN_J1*v_factor;
 80073d8:	f20f 63c0 	addw	r3, pc, #1728	; 0x6c0
 80073dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80073e4:	f7f9 f908 	bl	80005f8 <__aeabi_dmul>
 80073e8:	4603      	mov	r3, r0
 80073ea:	460c      	mov	r4, r1
 80073ec:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J1*a_factor;
 80073f0:	f20f 63a8 	addw	r3, pc, #1704	; 0x6a8
 80073f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80073fc:	f7f9 f8fc 	bl	80005f8 <__aeabi_dmul>
 8007400:	4603      	mov	r3, r0
 8007402:	460c      	mov	r4, r1
 8007404:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8007408:	e03b      	b.n	8007482 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J2 == target) {
 800740a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800740e:	2b02      	cmp	r3, #2
 8007410:	d118      	bne.n	8007444 <scaraInitLSPB+0x144>
		 v_design = V_DESIGN_J2*v_factor;
 8007412:	f20f 6380 	addw	r3, pc, #1664	; 0x680
 8007416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800741e:	f7f9 f8eb 	bl	80005f8 <__aeabi_dmul>
 8007422:	4603      	mov	r3, r0
 8007424:	460c      	mov	r4, r1
 8007426:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J2*a_factor;
 800742a:	f20f 6368 	addw	r3, pc, #1640	; 0x668
 800742e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007432:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007436:	f7f9 f8df 	bl	80005f8 <__aeabi_dmul>
 800743a:	4603      	mov	r3, r0
 800743c:	460c      	mov	r4, r1
 800743e:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8007442:	e01e      	b.n	8007482 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J3 == target) {
 8007444:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007448:	2b03      	cmp	r3, #3
 800744a:	d118      	bne.n	800747e <scaraInitLSPB+0x17e>
		 v_design = V_DESIGN_J3*v_factor;
 800744c:	f20f 6354 	addw	r3, pc, #1620	; 0x654
 8007450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007454:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007458:	f7f9 f8ce 	bl	80005f8 <__aeabi_dmul>
 800745c:	4603      	mov	r3, r0
 800745e:	460c      	mov	r4, r1
 8007460:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J3*a_factor;
 8007464:	f20f 633c 	addw	r3, pc, #1596	; 0x63c
 8007468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007470:	f7f9 f8c2 	bl	80005f8 <__aeabi_dmul>
 8007474:	4603      	mov	r3, r0
 8007476:	460c      	mov	r4, r1
 8007478:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800747c:	e001      	b.n	8007482 <scaraInitLSPB+0x182>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 800747e:	2306      	movs	r3, #6
 8007480:	e2fa      	b.n	8007a78 <scaraInitLSPB+0x778>
	 }

	 q0 = 0;
 8007482:	f04f 0300 	mov.w	r3, #0
 8007486:	f04f 0400 	mov.w	r4, #0
 800748a:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	 q1 = total_s;
 800748e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8007492:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	 v0 = 0;
 8007496:	f04f 0300 	mov.w	r3, #0
 800749a:	f04f 0400 	mov.w	r4, #0
 800749e:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 v1 = 0;
 80074a2:	f04f 0300 	mov.w	r3, #0
 80074a6:	f04f 0400 	mov.w	r4, #0
 80074aa:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

	 if ( q0 <= q1) {
 80074ae:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80074b2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80074b6:	f7f9 fb1b 	bl	8000af0 <__aeabi_dcmple>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d003      	beq.n	80074c8 <scaraInitLSPB+0x1c8>
		 dir = 1;
 80074c0:	2301      	movs	r3, #1
 80074c2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80074c6:	e00c      	b.n	80074e2 <scaraInitLSPB+0x1e2>
	 } else {
		 dir = -1;
 80074c8:	23ff      	movs	r3, #255	; 0xff
 80074ca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		 q1 = -q1;
 80074ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80074d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80074da:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80074de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 80074e2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	f040 809e 	bne.w	8007628 <scaraInitLSPB+0x328>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 80074ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ee:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 80074f2:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 // Avoid division by 0
		 if (tf > 0.001) {
 80074f6:	f20f 53b4 	addw	r3, pc, #1460	; 0x5b4
 80074fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fe:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007502:	f7f9 fb09 	bl	8000b18 <__aeabi_dcmpgt>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	f000 8081 	beq.w	8007610 <scaraInitLSPB+0x310>
			 v_lower 	= (q1 - q0) / tf;
 800750e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007512:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007516:	f7f8 feb7 	bl	8000288 <__aeabi_dsub>
 800751a:	4603      	mov	r3, r0
 800751c:	460c      	mov	r4, r1
 800751e:	4618      	mov	r0, r3
 8007520:	4621      	mov	r1, r4
 8007522:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007526:	f7f9 f991 	bl	800084c <__aeabi_ddiv>
 800752a:	4603      	mov	r3, r0
 800752c:	460c      	mov	r4, r1
 800752e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			 v_upper 	= 2*(q1 - q0) / tf;
 8007532:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007536:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800753a:	f7f8 fea5 	bl	8000288 <__aeabi_dsub>
 800753e:	4603      	mov	r3, r0
 8007540:	460c      	mov	r4, r1
 8007542:	4618      	mov	r0, r3
 8007544:	4621      	mov	r1, r4
 8007546:	4602      	mov	r2, r0
 8007548:	460b      	mov	r3, r1
 800754a:	f7f8 fe9f 	bl	800028c <__adddf3>
 800754e:	4603      	mov	r3, r0
 8007550:	460c      	mov	r4, r1
 8007552:	4618      	mov	r0, r3
 8007554:	4621      	mov	r1, r4
 8007556:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800755a:	f7f9 f977 	bl	800084c <__aeabi_ddiv>
 800755e:	4603      	mov	r3, r0
 8007560:	460c      	mov	r4, r1
 8007562:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

			 if ( v_design < v_lower) {
 8007566:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800756a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800756e:	f7f9 fab5 	bl	8000adc <__aeabi_dcmplt>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d001      	beq.n	800757c <scaraInitLSPB+0x27c>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 8007578:	2309      	movs	r3, #9
 800757a:	e27d      	b.n	8007a78 <scaraInitLSPB+0x778>
			 } else {
				 if ( v_upper <= v_design) {
 800757c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007580:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007584:	f7f9 fab4 	bl	8000af0 <__aeabi_dcmple>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d003      	beq.n	8007596 <scaraInitLSPB+0x296>
					 v_design = v_upper;
 800758e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8007592:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 8007596:	f20f 531c 	addw	r3, pc, #1308	; 0x51c
 800759a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80075a2:	f7f9 fab9 	bl	8000b18 <__aeabi_dcmpgt>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d01a      	beq.n	80075e2 <scaraInitLSPB+0x2e2>
					 tc_upper	= tf - (q1 - q0)/v_design;
 80075ac:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80075b0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80075b4:	f7f8 fe68 	bl	8000288 <__aeabi_dsub>
 80075b8:	4603      	mov	r3, r0
 80075ba:	460c      	mov	r4, r1
 80075bc:	4618      	mov	r0, r3
 80075be:	4621      	mov	r1, r4
 80075c0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80075c4:	f7f9 f942 	bl	800084c <__aeabi_ddiv>
 80075c8:	4603      	mov	r3, r0
 80075ca:	460c      	mov	r4, r1
 80075cc:	461a      	mov	r2, r3
 80075ce:	4623      	mov	r3, r4
 80075d0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80075d4:	f7f8 fe58 	bl	8000288 <__aeabi_dsub>
 80075d8:	4603      	mov	r3, r0
 80075da:	460c      	mov	r4, r1
 80075dc:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
 80075e0:	e00b      	b.n	80075fa <scaraInitLSPB+0x2fa>
				 } else {
					 tc_upper = tf / 2;
 80075e2:	f04f 0200 	mov.w	r2, #0
 80075e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80075ea:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80075ee:	f7f9 f92d 	bl	800084c <__aeabi_ddiv>
 80075f2:	4603      	mov	r3, r0
 80075f4:	460c      	mov	r4, r1
 80075f6:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				 }
				 a_upper	= v_design/tc_upper;
 80075fa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80075fe:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007602:	f7f9 f923 	bl	800084c <__aeabi_ddiv>
 8007606:	4603      	mov	r3, r0
 8007608:	460c      	mov	r4, r1
 800760a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 800760e:	e00b      	b.n	8007628 <scaraInitLSPB+0x328>
				//  } else {
				// 	 a_design = a_upper;
				//  }
			 }
		 } else {
			 v_design = 0;
 8007610:	f04f 0300 	mov.w	r3, #0
 8007614:	f04f 0400 	mov.w	r4, #0
 8007618:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
			 a_design = 0;
 800761c:	f04f 0300 	mov.w	r3, #0
 8007620:	f04f 0400 	mov.w	r4, #0
 8007624:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8007628:	f20f 4388 	addw	r3, pc, #1160	; 0x488
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8007634:	f7f9 fa70 	bl	8000b18 <__aeabi_dcmpgt>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	f000 819c 	beq.w	8007978 <scaraInitLSPB+0x678>
 8007640:	f20f 4370 	addw	r3, pc, #1136	; 0x470
 8007644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007648:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800764c:	f7f9 fa64 	bl	8000b18 <__aeabi_dcmpgt>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	f000 8190 	beq.w	8007978 <scaraInitLSPB+0x678>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8007658:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800765c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007660:	f7f8 fe12 	bl	8000288 <__aeabi_dsub>
 8007664:	4603      	mov	r3, r0
 8007666:	460c      	mov	r4, r1
 8007668:	461d      	mov	r5, r3
 800766a:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 800766e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8007672:	4628      	mov	r0, r5
 8007674:	4631      	mov	r1, r6
 8007676:	f7f8 ffbf 	bl	80005f8 <__aeabi_dmul>
 800767a:	4603      	mov	r3, r0
 800767c:	460c      	mov	r4, r1
 800767e:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8007682:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007686:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800768a:	f7f8 ffb5 	bl	80005f8 <__aeabi_dmul>
 800768e:	4603      	mov	r3, r0
 8007690:	460c      	mov	r4, r1
 8007692:	e9c7 3400 	strd	r3, r4, [r7]
 8007696:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800769a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800769e:	f7f8 ffab 	bl	80005f8 <__aeabi_dmul>
 80076a2:	4603      	mov	r3, r0
 80076a4:	460c      	mov	r4, r1
 80076a6:	461d      	mov	r5, r3
 80076a8:	4626      	mov	r6, r4
 80076aa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80076ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80076b2:	f7f8 ffa1 	bl	80005f8 <__aeabi_dmul>
 80076b6:	4603      	mov	r3, r0
 80076b8:	460c      	mov	r4, r1
 80076ba:	461a      	mov	r2, r3
 80076bc:	4623      	mov	r3, r4
 80076be:	4628      	mov	r0, r5
 80076c0:	4631      	mov	r1, r6
 80076c2:	f7f8 fde3 	bl	800028c <__adddf3>
 80076c6:	4603      	mov	r3, r0
 80076c8:	460c      	mov	r4, r1
 80076ca:	4618      	mov	r0, r3
 80076cc:	4621      	mov	r1, r4
 80076ce:	f04f 0200 	mov.w	r2, #0
 80076d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80076d6:	f7f9 f8b9 	bl	800084c <__aeabi_ddiv>
 80076da:	4603      	mov	r3, r0
 80076dc:	460c      	mov	r4, r1
 80076de:	461a      	mov	r2, r3
 80076e0:	4623      	mov	r3, r4
 80076e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076e6:	f7f8 fdcf 	bl	8000288 <__aeabi_dsub>
 80076ea:	4603      	mov	r3, r0
 80076ec:	460c      	mov	r4, r1
 80076ee:	461a      	mov	r2, r3
 80076f0:	4623      	mov	r3, r4
 80076f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076f6:	f7f9 f9fb 	bl	8000af0 <__aeabi_dcmple>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d075      	beq.n	80077ec <scaraInitLSPB+0x4ec>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 8007700:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007704:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007708:	f7f8 fdbe 	bl	8000288 <__aeabi_dsub>
 800770c:	4603      	mov	r3, r0
 800770e:	460c      	mov	r4, r1
 8007710:	469a      	mov	sl, r3
 8007712:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 8007716:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800771a:	4650      	mov	r0, sl
 800771c:	4659      	mov	r1, fp
 800771e:	f7f8 ff6b 	bl	80005f8 <__aeabi_dmul>
 8007722:	4603      	mov	r3, r0
 8007724:	460c      	mov	r4, r1
 8007726:	4625      	mov	r5, r4
 8007728:	461c      	mov	r4, r3
 800772a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800772e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007732:	f7f8 ff61 	bl	80005f8 <__aeabi_dmul>
 8007736:	4602      	mov	r2, r0
 8007738:	460b      	mov	r3, r1
 800773a:	4690      	mov	r8, r2
 800773c:	4699      	mov	r9, r3
 800773e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007742:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007746:	f7f8 ff57 	bl	80005f8 <__aeabi_dmul>
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	4640      	mov	r0, r8
 8007750:	4649      	mov	r1, r9
 8007752:	f7f8 fd9b 	bl	800028c <__adddf3>
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	4610      	mov	r0, r2
 800775c:	4619      	mov	r1, r3
 800775e:	f04f 0200 	mov.w	r2, #0
 8007762:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007766:	f7f9 f871 	bl	800084c <__aeabi_ddiv>
 800776a:	4602      	mov	r2, r0
 800776c:	460b      	mov	r3, r1
 800776e:	4620      	mov	r0, r4
 8007770:	4629      	mov	r1, r5
 8007772:	f7f8 fd8b 	bl	800028c <__adddf3>
 8007776:	4603      	mov	r3, r0
 8007778:	460c      	mov	r4, r1
 800777a:	ec44 3b17 	vmov	d7, r3, r4
 800777e:	eeb0 0a47 	vmov.f32	s0, s14
 8007782:	eef0 0a67 	vmov.f32	s1, s15
 8007786:	f012 f901 	bl	801998c <sqrt>
 800778a:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 800778e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007792:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007796:	f7f8 fd77 	bl	8000288 <__aeabi_dsub>
 800779a:	4603      	mov	r3, r0
 800779c:	460c      	mov	r4, r1
 800779e:	4618      	mov	r0, r3
 80077a0:	4621      	mov	r1, r4
 80077a2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80077a6:	f7f9 f851 	bl	800084c <__aeabi_ddiv>
 80077aa:	4603      	mov	r3, r0
 80077ac:	460c      	mov	r4, r1
 80077ae:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 80077b2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80077b6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80077ba:	f7f8 fd65 	bl	8000288 <__aeabi_dsub>
 80077be:	4603      	mov	r3, r0
 80077c0:	460c      	mov	r4, r1
 80077c2:	4618      	mov	r0, r3
 80077c4:	4621      	mov	r1, r4
 80077c6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80077ca:	f7f9 f83f 	bl	800084c <__aeabi_ddiv>
 80077ce:	4603      	mov	r3, r0
 80077d0:	460c      	mov	r4, r1
 80077d2:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= ta + td;
 80077d6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80077da:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80077de:	f7f8 fd55 	bl	800028c <__adddf3>
 80077e2:	4603      	mov	r3, r0
 80077e4:	460c      	mov	r4, r1
 80077e6:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80077ea:	e0e3      	b.n	80079b4 <scaraInitLSPB+0x6b4>
		 } else {
			 v_lim	= v_design;
 80077ec:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80077f0:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 80077f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80077f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80077fc:	f7f8 fd44 	bl	8000288 <__aeabi_dsub>
 8007800:	4603      	mov	r3, r0
 8007802:	460c      	mov	r4, r1
 8007804:	4618      	mov	r0, r3
 8007806:	4621      	mov	r1, r4
 8007808:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800780c:	f7f9 f81e 	bl	800084c <__aeabi_ddiv>
 8007810:	4603      	mov	r3, r0
 8007812:	460c      	mov	r4, r1
 8007814:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8007818:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800781c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007820:	f7f8 fd32 	bl	8000288 <__aeabi_dsub>
 8007824:	4603      	mov	r3, r0
 8007826:	460c      	mov	r4, r1
 8007828:	4618      	mov	r0, r3
 800782a:	4621      	mov	r1, r4
 800782c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8007830:	f7f9 f80c 	bl	800084c <__aeabi_ddiv>
 8007834:	4603      	mov	r3, r0
 8007836:	460c      	mov	r4, r1
 8007838:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 800783c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8007840:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007844:	f7f8 fd20 	bl	8000288 <__aeabi_dsub>
 8007848:	4603      	mov	r3, r0
 800784a:	460c      	mov	r4, r1
 800784c:	4698      	mov	r8, r3
 800784e:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 8007852:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8007856:	4640      	mov	r0, r8
 8007858:	4649      	mov	r1, r9
 800785a:	f7f8 fff7 	bl	800084c <__aeabi_ddiv>
 800785e:	4603      	mov	r3, r0
 8007860:	460c      	mov	r4, r1
 8007862:	4625      	mov	r5, r4
 8007864:	461c      	mov	r4, r3
 8007866:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800786a:	4602      	mov	r2, r0
 800786c:	460b      	mov	r3, r1
 800786e:	f7f8 fd0d 	bl	800028c <__adddf3>
 8007872:	4602      	mov	r2, r0
 8007874:	460b      	mov	r3, r1
 8007876:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800787a:	f7f8 ffe7 	bl	800084c <__aeabi_ddiv>
 800787e:	4602      	mov	r2, r0
 8007880:	460b      	mov	r3, r1
 8007882:	4690      	mov	r8, r2
 8007884:	4699      	mov	r9, r3
 8007886:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800788a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800788e:	f7f8 ffdd 	bl	800084c <__aeabi_ddiv>
 8007892:	4602      	mov	r2, r0
 8007894:	460b      	mov	r3, r1
 8007896:	f04f 0000 	mov.w	r0, #0
 800789a:	497d      	ldr	r1, [pc, #500]	; (8007a90 <scaraInitLSPB+0x790>)
 800789c:	f7f8 fcf4 	bl	8000288 <__aeabi_dsub>
 80078a0:	4602      	mov	r2, r0
 80078a2:	460b      	mov	r3, r1
 80078a4:	4640      	mov	r0, r8
 80078a6:	4649      	mov	r1, r9
 80078a8:	f7f8 fea6 	bl	80005f8 <__aeabi_dmul>
 80078ac:	4602      	mov	r2, r0
 80078ae:	460b      	mov	r3, r1
 80078b0:	4690      	mov	r8, r2
 80078b2:	4699      	mov	r9, r3
 80078b4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80078b8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80078bc:	f7f8 ffc6 	bl	800084c <__aeabi_ddiv>
 80078c0:	4602      	mov	r2, r0
 80078c2:	460b      	mov	r3, r1
 80078c4:	f04f 0000 	mov.w	r0, #0
 80078c8:	4971      	ldr	r1, [pc, #452]	; (8007a90 <scaraInitLSPB+0x790>)
 80078ca:	f7f8 fcdd 	bl	8000288 <__aeabi_dsub>
 80078ce:	4602      	mov	r2, r0
 80078d0:	460b      	mov	r3, r1
 80078d2:	4640      	mov	r0, r8
 80078d4:	4649      	mov	r1, r9
 80078d6:	f7f8 fe8f 	bl	80005f8 <__aeabi_dmul>
 80078da:	4602      	mov	r2, r0
 80078dc:	460b      	mov	r3, r1
 80078de:	4620      	mov	r0, r4
 80078e0:	4629      	mov	r1, r5
 80078e2:	f7f8 fcd3 	bl	800028c <__adddf3>
 80078e6:	4603      	mov	r3, r0
 80078e8:	460c      	mov	r4, r1
 80078ea:	4625      	mov	r5, r4
 80078ec:	461c      	mov	r4, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 80078ee:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80078f2:	4602      	mov	r2, r0
 80078f4:	460b      	mov	r3, r1
 80078f6:	f7f8 fcc9 	bl	800028c <__adddf3>
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007902:	f7f8 ffa3 	bl	800084c <__aeabi_ddiv>
 8007906:	4602      	mov	r2, r0
 8007908:	460b      	mov	r3, r1
 800790a:	4690      	mov	r8, r2
 800790c:	4699      	mov	r9, r3
 800790e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8007912:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007916:	f7f8 ff99 	bl	800084c <__aeabi_ddiv>
 800791a:	4602      	mov	r2, r0
 800791c:	460b      	mov	r3, r1
 800791e:	f04f 0000 	mov.w	r0, #0
 8007922:	495b      	ldr	r1, [pc, #364]	; (8007a90 <scaraInitLSPB+0x790>)
 8007924:	f7f8 fcb0 	bl	8000288 <__aeabi_dsub>
 8007928:	4602      	mov	r2, r0
 800792a:	460b      	mov	r3, r1
 800792c:	4640      	mov	r0, r8
 800792e:	4649      	mov	r1, r9
 8007930:	f7f8 fe62 	bl	80005f8 <__aeabi_dmul>
 8007934:	4602      	mov	r2, r0
 8007936:	460b      	mov	r3, r1
 8007938:	4690      	mov	r8, r2
 800793a:	4699      	mov	r9, r3
 800793c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8007940:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007944:	f7f8 ff82 	bl	800084c <__aeabi_ddiv>
 8007948:	4602      	mov	r2, r0
 800794a:	460b      	mov	r3, r1
 800794c:	f04f 0000 	mov.w	r0, #0
 8007950:	494f      	ldr	r1, [pc, #316]	; (8007a90 <scaraInitLSPB+0x790>)
 8007952:	f7f8 fc99 	bl	8000288 <__aeabi_dsub>
 8007956:	4602      	mov	r2, r0
 8007958:	460b      	mov	r3, r1
 800795a:	4640      	mov	r0, r8
 800795c:	4649      	mov	r1, r9
 800795e:	f7f8 fe4b 	bl	80005f8 <__aeabi_dmul>
 8007962:	4602      	mov	r2, r0
 8007964:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8007966:	4620      	mov	r0, r4
 8007968:	4629      	mov	r1, r5
 800796a:	f7f8 fc8f 	bl	800028c <__adddf3>
 800796e:	4603      	mov	r3, r0
 8007970:	460c      	mov	r4, r1
 8007972:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8007976:	e01d      	b.n	80079b4 <scaraInitLSPB+0x6b4>
		 }
	 } else {
		 v_lim	= 0;
 8007978:	f04f 0300 	mov.w	r3, #0
 800797c:	f04f 0400 	mov.w	r4, #0
 8007980:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 ta = tf/2;
 8007984:	f04f 0200 	mov.w	r2, #0
 8007988:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800798c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007990:	f7f8 ff5c 	bl	800084c <__aeabi_ddiv>
 8007994:	4603      	mov	r3, r0
 8007996:	460c      	mov	r4, r1
 8007998:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
		 td = tf/2;
 800799c:	f04f 0200 	mov.w	r2, #0
 80079a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80079a4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80079a8:	f7f8 ff50 	bl	800084c <__aeabi_ddiv>
 80079ac:	4603      	mov	r3, r0
 80079ae:	460c      	mov	r4, r1
 80079b0:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 80079b4:	a334      	add	r3, pc, #208	; (adr r3, 8007a88 <scaraInitLSPB+0x788>)
 80079b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ba:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80079be:	f7f8 ff45 	bl	800084c <__aeabi_ddiv>
 80079c2:	4603      	mov	r3, r0
 80079c4:	460c      	mov	r4, r1
 80079c6:	4618      	mov	r0, r3
 80079c8:	4621      	mov	r1, r4
 80079ca:	f7f9 f90d 	bl	8000be8 <__aeabi_d2f>
 80079ce:	4603      	mov	r3, r0
 80079d0:	ee00 3a10 	vmov	s0, r3
 80079d4:	f011 ff98 	bl	8019908 <ceilf>
 80079d8:	eef0 7a40 	vmov.f32	s15, s0
 80079dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079e0:	ee17 3a90 	vmov	r3, s15
 80079e4:	637b      	str	r3, [r7, #52]	; 0x34
	 // Init lspb params
	 lspb->dir= dir;
 80079e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e8:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80079ec:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 80079ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079f0:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80079f4:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = q1;
 80079f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079fa:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80079fe:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 8007a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a04:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8007a08:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 8007a0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a0e:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8007a12:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 8007a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a18:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8007a1c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 8007a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a22:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8007a26:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 8007a2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a2c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8007a30:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_lim;
 8007a34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a36:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8007a3a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = v0;
 8007a3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a40:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8007a44:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = v1;
 8007a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a4a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8007a4e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 8007a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a56:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 8007a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a60:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8007a64:	461a      	mov	r2, r3
 8007a66:	4623      	mov	r3, r4
 8007a68:	f7f8 fc0e 	bl	8000288 <__aeabi_dsub>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	460c      	mov	r4, r1
 8007a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a72:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	37b4      	adds	r7, #180	; 0xb4
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a82:	bf00      	nop
 8007a84:	f3af 8000 	nop.w
 8007a88:	40000000 	.word	0x40000000
 8007a8c:	3f847ae1 	.word	0x3f847ae1
 8007a90:	3ff00000 	.word	0x3ff00000
 8007a94:	00000000 	.word	0x00000000
 8007a98:	405c2000 	.word	0x405c2000
 8007a9c:	14000000 	.word	0x14000000
 8007aa0:	4000f6f0 	.word	0x4000f6f0
 8007aa4:	6b259425 	.word	0x6b259425
 8007aa8:	40069b91 	.word	0x40069b91
 8007aac:	d2f1a9fc 	.word	0xd2f1a9fc
 8007ab0:	3f50624d 	.word	0x3f50624d
 8007ab4:	9abcaf48 	.word	0x9abcaf48
 8007ab8:	3e7ad7f2 	.word	0x3e7ad7f2
 8007abc:	00000000 	.word	0x00000000

08007ac0 <scaraInitScurve>:
SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8007ac0:	b5b0      	push	{r4, r5, r7, lr}
 8007ac2:	b0ba      	sub	sp, #232	; 0xe8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	61f8      	str	r0, [r7, #28]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	ed87 0b04 	vstr	d0, [r7, #16]
 8007ace:	ed87 1b02 	vstr	d1, [r7, #8]
 8007ad2:	ed87 2b00 	vstr	d2, [r7]
 8007ad6:	76fb      	strb	r3, [r7, #27]
 8007ad8:	4613      	mov	r3, r2
 8007ada:	76bb      	strb	r3, [r7, #26]
	 double v_design, a_design, q0, q1, v0, v1, v_lim, j_max, tm, tc, tf, dir;
	 double v_1, s_1, v_2, s_2, v_3, s_3, v_4, s_4;
	 uint32_t	 no_sample;
	 uint8_t	 no_phases;

	 if ( TRAJECTORY_3D == target) {
 8007adc:	7efb      	ldrb	r3, [r7, #27]
 8007ade:	2b04      	cmp	r3, #4
 8007ae0:	d118      	bne.n	8007b14 <scaraInitScurve+0x54>
		 v_design = V_DESIGN_3D*v_factor;
 8007ae2:	f20f 4320 	addw	r3, pc, #1056	; 0x420
 8007ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007aee:	f7f8 fd83 	bl	80005f8 <__aeabi_dmul>
 8007af2:	4603      	mov	r3, r0
 8007af4:	460c      	mov	r4, r1
 8007af6:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_3D*a_factor;
 8007afa:	f20f 4308 	addw	r3, pc, #1032	; 0x408
 8007afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b06:	f7f8 fd77 	bl	80005f8 <__aeabi_dmul>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	460c      	mov	r4, r1
 8007b0e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007b12:	e083      	b.n	8007c1c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_ROLL == target) {
 8007b14:	7efb      	ldrb	r3, [r7, #27]
 8007b16:	2b05      	cmp	r3, #5
 8007b18:	d116      	bne.n	8007b48 <scaraInitScurve+0x88>
		 v_design = V_DESIGN_ROLL*v_factor;
 8007b1a:	a3fc      	add	r3, pc, #1008	; (adr r3, 8007f0c <scaraInitScurve+0x44c>)
 8007b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b24:	f7f8 fd68 	bl	80005f8 <__aeabi_dmul>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	460c      	mov	r4, r1
 8007b2c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_ROLL*a_factor;
 8007b30:	a3f6      	add	r3, pc, #984	; (adr r3, 8007f0c <scaraInitScurve+0x44c>)
 8007b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b3a:	f7f8 fd5d 	bl	80005f8 <__aeabi_dmul>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	460c      	mov	r4, r1
 8007b42:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007b46:	e069      	b.n	8007c1c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J0 == target) {
 8007b48:	7efb      	ldrb	r3, [r7, #27]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d116      	bne.n	8007b7c <scaraInitScurve+0xbc>
		 v_design = V_DESIGN_J0*v_factor;
 8007b4e:	a3ef      	add	r3, pc, #956	; (adr r3, 8007f0c <scaraInitScurve+0x44c>)
 8007b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b58:	f7f8 fd4e 	bl	80005f8 <__aeabi_dmul>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	460c      	mov	r4, r1
 8007b60:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J0*a_factor;
 8007b64:	a3e9      	add	r3, pc, #932	; (adr r3, 8007f0c <scaraInitScurve+0x44c>)
 8007b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b6e:	f7f8 fd43 	bl	80005f8 <__aeabi_dmul>
 8007b72:	4603      	mov	r3, r0
 8007b74:	460c      	mov	r4, r1
 8007b76:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007b7a:	e04f      	b.n	8007c1c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J1 == target) {
 8007b7c:	7efb      	ldrb	r3, [r7, #27]
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d116      	bne.n	8007bb0 <scaraInitScurve+0xf0>
		 v_design = V_DESIGN_J1*v_factor;
 8007b82:	a3e2      	add	r3, pc, #904	; (adr r3, 8007f0c <scaraInitScurve+0x44c>)
 8007b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b8c:	f7f8 fd34 	bl	80005f8 <__aeabi_dmul>
 8007b90:	4603      	mov	r3, r0
 8007b92:	460c      	mov	r4, r1
 8007b94:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J1*a_factor;
 8007b98:	a3dc      	add	r3, pc, #880	; (adr r3, 8007f0c <scaraInitScurve+0x44c>)
 8007b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ba2:	f7f8 fd29 	bl	80005f8 <__aeabi_dmul>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	460c      	mov	r4, r1
 8007baa:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007bae:	e035      	b.n	8007c1c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J2 == target) {
 8007bb0:	7efb      	ldrb	r3, [r7, #27]
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d116      	bne.n	8007be4 <scaraInitScurve+0x124>
		 v_design = V_DESIGN_J2*v_factor;
 8007bb6:	a3d3      	add	r3, pc, #844	; (adr r3, 8007f04 <scaraInitScurve+0x444>)
 8007bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007bc0:	f7f8 fd1a 	bl	80005f8 <__aeabi_dmul>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	460c      	mov	r4, r1
 8007bc8:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J2*a_factor;
 8007bcc:	a3cd      	add	r3, pc, #820	; (adr r3, 8007f04 <scaraInitScurve+0x444>)
 8007bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bd6:	f7f8 fd0f 	bl	80005f8 <__aeabi_dmul>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	460c      	mov	r4, r1
 8007bde:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007be2:	e01b      	b.n	8007c1c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J3 == target) {
 8007be4:	7efb      	ldrb	r3, [r7, #27]
 8007be6:	2b03      	cmp	r3, #3
 8007be8:	d116      	bne.n	8007c18 <scaraInitScurve+0x158>
		 v_design = V_DESIGN_J3*v_factor;
 8007bea:	a3ca      	add	r3, pc, #808	; (adr r3, 8007f14 <scaraInitScurve+0x454>)
 8007bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007bf4:	f7f8 fd00 	bl	80005f8 <__aeabi_dmul>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	460c      	mov	r4, r1
 8007bfc:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J3*a_factor;
 8007c00:	a3c4      	add	r3, pc, #784	; (adr r3, 8007f14 <scaraInitScurve+0x454>)
 8007c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c0a:	f7f8 fcf5 	bl	80005f8 <__aeabi_dmul>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	460c      	mov	r4, r1
 8007c12:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007c16:	e001      	b.n	8007c1c <scaraInitScurve+0x15c>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8007c18:	2306      	movs	r3, #6
 8007c1a:	e2c8      	b.n	80081ae <scaraInitScurve+0x6ee>
	 }

	 v0 = 0;
 8007c1c:	f04f 0300 	mov.w	r3, #0
 8007c20:	f04f 0400 	mov.w	r4, #0
 8007c24:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
	 v1 = 0;
 8007c28:	f04f 0300 	mov.w	r3, #0
 8007c2c:	f04f 0400 	mov.w	r4, #0
 8007c30:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 q0 = 0;
 8007c34:	f04f 0300 	mov.w	r3, #0
 8007c38:	f04f 0400 	mov.w	r4, #0
 8007c3c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	 q1 = total_s;
 8007c40:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007c44:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0

	 if ( total_s < 0) {
 8007c48:	f04f 0200 	mov.w	r2, #0
 8007c4c:	f04f 0300 	mov.w	r3, #0
 8007c50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007c54:	f7f8 ff42 	bl	8000adc <__aeabi_dcmplt>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d015      	beq.n	8007c8a <scaraInitScurve+0x1ca>
		 dir = -1;
 8007c5e:	f04f 0300 	mov.w	r3, #0
 8007c62:	4ca5      	ldr	r4, [pc, #660]	; (8007ef8 <scaraInitScurve+0x438>)
 8007c64:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 q1 = -q1;
 8007c68:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c74:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007c78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		 total_s = -total_s;
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	613b      	str	r3, [r7, #16]
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007c86:	617b      	str	r3, [r7, #20]
 8007c88:	e004      	b.n	8007c94 <scaraInitScurve+0x1d4>
	 } else {
		 dir = 1;
 8007c8a:	f04f 0300 	mov.w	r3, #0
 8007c8e:	4c9b      	ldr	r4, [pc, #620]	; (8007efc <scaraInitScurve+0x43c>)
 8007c90:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
	 }


	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8007c94:	7ebb      	ldrb	r3, [r7, #26]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	f040 8082 	bne.w	8007da0 <scaraInitScurve+0x2e0>
		 double t_upper, v_upper, a_upper;
		 tf = scurve->Tf;
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8007ca2:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 // Avoid division by 0
		 if (tf > 0.001) {
 8007ca6:	a390      	add	r3, pc, #576	; (adr r3, 8007ee8 <scaraInitScurve+0x428>)
 8007ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cac:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007cb0:	f7f8 ff32 	bl	8000b18 <__aeabi_dcmpgt>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d066      	beq.n	8007d88 <scaraInitScurve+0x2c8>
			 // Assume 4 phase
			 t_upper = tf / 4;
 8007cba:	f04f 0200 	mov.w	r2, #0
 8007cbe:	4b90      	ldr	r3, [pc, #576]	; (8007f00 <scaraInitScurve+0x440>)
 8007cc0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007cc4:	f7f8 fdc2 	bl	800084c <__aeabi_ddiv>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	460c      	mov	r4, r1
 8007ccc:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			 v_upper = total_s / (2*t_upper);
 8007cd0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	f7f8 fad8 	bl	800028c <__adddf3>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	460c      	mov	r4, r1
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	4623      	mov	r3, r4
 8007ce4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007ce8:	f7f8 fdb0 	bl	800084c <__aeabi_ddiv>
 8007cec:	4603      	mov	r3, r0
 8007cee:	460c      	mov	r4, r1
 8007cf0:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			 // Check 4 phase --> 5 phase
			 if ( v_upper > v_design) {
 8007cf4:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8007cf8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007cfc:	f7f8 ff0c 	bl	8000b18 <__aeabi_dcmpgt>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d022      	beq.n	8007d4c <scaraInitScurve+0x28c>
				 t_upper = tf/2 - total_s/(2*v_design);
 8007d06:	f04f 0200 	mov.w	r2, #0
 8007d0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d0e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007d12:	f7f8 fd9b 	bl	800084c <__aeabi_ddiv>
 8007d16:	4603      	mov	r3, r0
 8007d18:	460c      	mov	r4, r1
 8007d1a:	4625      	mov	r5, r4
 8007d1c:	461c      	mov	r4, r3
 8007d1e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007d22:	4602      	mov	r2, r0
 8007d24:	460b      	mov	r3, r1
 8007d26:	f7f8 fab1 	bl	800028c <__adddf3>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007d32:	f7f8 fd8b 	bl	800084c <__aeabi_ddiv>
 8007d36:	4602      	mov	r2, r0
 8007d38:	460b      	mov	r3, r1
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	4629      	mov	r1, r5
 8007d3e:	f7f8 faa3 	bl	8000288 <__aeabi_dsub>
 8007d42:	4603      	mov	r3, r0
 8007d44:	460c      	mov	r4, r1
 8007d46:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8007d4a:	e003      	b.n	8007d54 <scaraInitScurve+0x294>
			 } else {
				 v_design = v_upper;
 8007d4c:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8007d50:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 }
			 a_upper  = v_design / t_upper;
 8007d54:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8007d58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007d5c:	f7f8 fd76 	bl	800084c <__aeabi_ddiv>
 8007d60:	4603      	mov	r3, r0
 8007d62:	460c      	mov	r4, r1
 8007d64:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
			 if ( a_upper > a_design) {
 8007d68:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007d6c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007d70:	f7f8 fed2 	bl	8000b18 <__aeabi_dcmpgt>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d001      	beq.n	8007d7e <scaraInitScurve+0x2be>
				 return SCARA_STATUS_ERROR_OVER_ACCEL;
 8007d7a:	230a      	movs	r3, #10
 8007d7c:	e217      	b.n	80081ae <scaraInitScurve+0x6ee>
			 } else {
				 a_design = a_upper;
 8007d7e:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8007d82:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007d86:	e00b      	b.n	8007da0 <scaraInitScurve+0x2e0>
			 }
		 } else {
			 v_design = 0;
 8007d88:	f04f 0300 	mov.w	r3, #0
 8007d8c:	f04f 0400 	mov.w	r4, #0
 8007d90:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 a_design = 0;
 8007d94:	f04f 0300 	mov.w	r3, #0
 8007d98:	f04f 0400 	mov.w	r4, #0
 8007d9c:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
		 }
	 }
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8007da0:	a353      	add	r3, pc, #332	; (adr r3, 8007ef0 <scaraInitScurve+0x430>)
 8007da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da6:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007daa:	f7f8 feb5 	bl	8000b18 <__aeabi_dcmpgt>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f000 80b3 	beq.w	8007f1c <scaraInitScurve+0x45c>
 8007db6:	a34e      	add	r3, pc, #312	; (adr r3, 8007ef0 <scaraInitScurve+0x430>)
 8007db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007dc0:	f7f8 feaa 	bl	8000b18 <__aeabi_dcmpgt>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f000 80a8 	beq.w	8007f1c <scaraInitScurve+0x45c>
		 no_phases = 5;
 8007dcc:	2305      	movs	r3, #5
 8007dce:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = v_design/a_design;
 8007dd2:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007dd6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007dda:	f7f8 fd37 	bl	800084c <__aeabi_ddiv>
 8007dde:	4603      	mov	r3, r0
 8007de0:	460c      	mov	r4, r1
 8007de2:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 tc = total_s/v_design - 2*tm;
 8007de6:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8007dea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007dee:	f7f8 fd2d 	bl	800084c <__aeabi_ddiv>
 8007df2:	4603      	mov	r3, r0
 8007df4:	460c      	mov	r4, r1
 8007df6:	4625      	mov	r5, r4
 8007df8:	461c      	mov	r4, r3
 8007dfa:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007dfe:	4602      	mov	r2, r0
 8007e00:	460b      	mov	r3, r1
 8007e02:	f7f8 fa43 	bl	800028c <__adddf3>
 8007e06:	4602      	mov	r2, r0
 8007e08:	460b      	mov	r3, r1
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	4629      	mov	r1, r5
 8007e0e:	f7f8 fa3b 	bl	8000288 <__aeabi_dsub>
 8007e12:	4603      	mov	r3, r0
 8007e14:	460c      	mov	r4, r1
 8007e16:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 // Check condition 5 phase ---> 4 phase
		 if (tc < 0.0) {
 8007e1a:	f04f 0200 	mov.w	r2, #0
 8007e1e:	f04f 0300 	mov.w	r3, #0
 8007e22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007e26:	f7f8 fe59 	bl	8000adc <__aeabi_dcmplt>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d022      	beq.n	8007e76 <scaraInitScurve+0x3b6>
			 tc = 0;
 8007e30:	f04f 0300 	mov.w	r3, #0
 8007e34:	f04f 0400 	mov.w	r4, #0
 8007e38:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
			 no_phases = 4;
 8007e3c:	2304      	movs	r3, #4
 8007e3e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			 tm = sqrt(total_s/(2*a_design));
 8007e42:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007e46:	4602      	mov	r2, r0
 8007e48:	460b      	mov	r3, r1
 8007e4a:	f7f8 fa1f 	bl	800028c <__adddf3>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	460c      	mov	r4, r1
 8007e52:	461a      	mov	r2, r3
 8007e54:	4623      	mov	r3, r4
 8007e56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007e5a:	f7f8 fcf7 	bl	800084c <__aeabi_ddiv>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	460c      	mov	r4, r1
 8007e62:	ec44 3b17 	vmov	d7, r3, r4
 8007e66:	eeb0 0a47 	vmov.f32	s0, s14
 8007e6a:	eef0 0a67 	vmov.f32	s1, s15
 8007e6e:	f011 fd8d 	bl	801998c <sqrt>
 8007e72:	ed87 0b2e 	vstr	d0, [r7, #184]	; 0xb8
		 }
		 if (tm < 0.001) {
 8007e76:	a31c      	add	r3, pc, #112	; (adr r3, 8007ee8 <scaraInitScurve+0x428>)
 8007e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007e80:	f7f8 fe2c 	bl	8000adc <__aeabi_dcmplt>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d006      	beq.n	8007e98 <scaraInitScurve+0x3d8>
			 j_max = 0;
 8007e8a:	f04f 0300 	mov.w	r3, #0
 8007e8e:	f04f 0400 	mov.w	r4, #0
 8007e92:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
 8007e96:	e009      	b.n	8007eac <scaraInitScurve+0x3ec>
		 } else {
			 j_max = a_design/tm;
 8007e98:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007e9c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007ea0:	f7f8 fcd4 	bl	800084c <__aeabi_ddiv>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 }
		 v_lim = a_design*tm;
 8007eac:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007eb0:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007eb4:	f7f8 fba0 	bl	80005f8 <__aeabi_dmul>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	460c      	mov	r4, r1
 8007ebc:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
		 tf    = 4*tm + tc;
 8007ec0:	f04f 0200 	mov.w	r2, #0
 8007ec4:	4b0e      	ldr	r3, [pc, #56]	; (8007f00 <scaraInitScurve+0x440>)
 8007ec6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007eca:	f7f8 fb95 	bl	80005f8 <__aeabi_dmul>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	460c      	mov	r4, r1
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	4623      	mov	r3, r4
 8007ed6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007eda:	f7f8 f9d7 	bl	800028c <__adddf3>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	460c      	mov	r4, r1
 8007ee2:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 8007ee6:	e039      	b.n	8007f5c <scaraInitScurve+0x49c>
 8007ee8:	d2f1a9fc 	.word	0xd2f1a9fc
 8007eec:	3f50624d 	.word	0x3f50624d
 8007ef0:	9abcaf48 	.word	0x9abcaf48
 8007ef4:	3e7ad7f2 	.word	0x3e7ad7f2
 8007ef8:	bff00000 	.word	0xbff00000
 8007efc:	3ff00000 	.word	0x3ff00000
 8007f00:	40100000 	.word	0x40100000
 8007f04:	00000000 	.word	0x00000000
 8007f08:	405c2000 	.word	0x405c2000
 8007f0c:	14000000 	.word	0x14000000
 8007f10:	4000f6f0 	.word	0x4000f6f0
 8007f14:	6b259425 	.word	0x6b259425
 8007f18:	40069b91 	.word	0x40069b91
	 } else {
		 j_max = 0;
 8007f1c:	f04f 0300 	mov.w	r3, #0
 8007f20:	f04f 0400 	mov.w	r4, #0
 8007f24:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 tc = 0;
 8007f28:	f04f 0300 	mov.w	r3, #0
 8007f2c:	f04f 0400 	mov.w	r4, #0
 8007f30:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 no_phases = 4;
 8007f34:	2304      	movs	r3, #4
 8007f36:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = tf / 4;
 8007f3a:	f04f 0200 	mov.w	r2, #0
 8007f3e:	4ba0      	ldr	r3, [pc, #640]	; (80081c0 <scaraInitScurve+0x700>)
 8007f40:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007f44:	f7f8 fc82 	bl	800084c <__aeabi_ddiv>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	460c      	mov	r4, r1
 8007f4c:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 v_lim = 0;
 8007f50:	f04f 0300 	mov.w	r3, #0
 8007f54:	f04f 0400 	mov.w	r4, #0
 8007f58:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	 }

	 no_sample = ceil(tf / T_SAMPLING);
 8007f5c:	a396      	add	r3, pc, #600	; (adr r3, 80081b8 <scaraInitScurve+0x6f8>)
 8007f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f62:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007f66:	f7f8 fc71 	bl	800084c <__aeabi_ddiv>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	460c      	mov	r4, r1
 8007f6e:	ec44 3b17 	vmov	d7, r3, r4
 8007f72:	eeb0 0a47 	vmov.f32	s0, s14
 8007f76:	eef0 0a67 	vmov.f32	s1, s15
 8007f7a:	f011 fb6d 	bl	8019658 <ceil>
 8007f7e:	ec54 3b10 	vmov	r3, r4, d0
 8007f82:	4618      	mov	r0, r3
 8007f84:	4621      	mov	r1, r4
 8007f86:	f7f8 fe0f 	bl	8000ba8 <__aeabi_d2uiz>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	667b      	str	r3, [r7, #100]	; 0x64
	 v_1 = 0.5*j_max*tm*tm;
 8007f8e:	f04f 0200 	mov.w	r2, #0
 8007f92:	4b8c      	ldr	r3, [pc, #560]	; (80081c4 <scaraInitScurve+0x704>)
 8007f94:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8007f98:	f7f8 fb2e 	bl	80005f8 <__aeabi_dmul>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	460c      	mov	r4, r1
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	4621      	mov	r1, r4
 8007fa4:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007fa8:	f7f8 fb26 	bl	80005f8 <__aeabi_dmul>
 8007fac:	4603      	mov	r3, r0
 8007fae:	460c      	mov	r4, r1
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	4623      	mov	r3, r4
 8007fb4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007fb8:	f7f8 fb1e 	bl	80005f8 <__aeabi_dmul>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	460c      	mov	r4, r1
 8007fc0:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 s_1 = j_max*tm*tm*tm/6;
 8007fc4:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007fc8:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8007fcc:	f7f8 fb14 	bl	80005f8 <__aeabi_dmul>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	460c      	mov	r4, r1
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	4621      	mov	r1, r4
 8007fd8:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007fdc:	f7f8 fb0c 	bl	80005f8 <__aeabi_dmul>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	460c      	mov	r4, r1
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	4621      	mov	r1, r4
 8007fe8:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007fec:	f7f8 fb04 	bl	80005f8 <__aeabi_dmul>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	460c      	mov	r4, r1
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	4621      	mov	r1, r4
 8007ff8:	f04f 0200 	mov.w	r2, #0
 8007ffc:	4b72      	ldr	r3, [pc, #456]	; (80081c8 <scaraInitScurve+0x708>)
 8007ffe:	f7f8 fc25 	bl	800084c <__aeabi_ddiv>
 8008002:	4603      	mov	r3, r0
 8008004:	460c      	mov	r4, r1
 8008006:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	 v_2 = j_max*tm*tm;
 800800a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800800e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8008012:	f7f8 faf1 	bl	80005f8 <__aeabi_dmul>
 8008016:	4603      	mov	r3, r0
 8008018:	460c      	mov	r4, r1
 800801a:	461a      	mov	r2, r3
 800801c:	4623      	mov	r3, r4
 800801e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008022:	f7f8 fae9 	bl	80005f8 <__aeabi_dmul>
 8008026:	4603      	mov	r3, r0
 8008028:	460c      	mov	r4, r1
 800802a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	 s_2 = v_2*tm;
 800802e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8008032:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008036:	f7f8 fadf 	bl	80005f8 <__aeabi_dmul>
 800803a:	4603      	mov	r3, r0
 800803c:	460c      	mov	r4, r1
 800803e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	 v_3 = v_2;
 8008042:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8008046:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	 s_3 = s_2 + v_2*tc;
 800804a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800804e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008052:	f7f8 fad1 	bl	80005f8 <__aeabi_dmul>
 8008056:	4603      	mov	r3, r0
 8008058:	460c      	mov	r4, r1
 800805a:	461a      	mov	r2, r3
 800805c:	4623      	mov	r3, r4
 800805e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008062:	f7f8 f913 	bl	800028c <__adddf3>
 8008066:	4603      	mov	r3, r0
 8008068:	460c      	mov	r4, r1
 800806a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	 v_4 = v_1;
 800806e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8008072:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	 s_4 = s_3 + s_2 - s_1;
 8008076:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800807a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800807e:	f7f8 f905 	bl	800028c <__adddf3>
 8008082:	4603      	mov	r3, r0
 8008084:	460c      	mov	r4, r1
 8008086:	4618      	mov	r0, r3
 8008088:	4621      	mov	r1, r4
 800808a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800808e:	f7f8 f8fb 	bl	8000288 <__aeabi_dsub>
 8008092:	4603      	mov	r3, r0
 8008094:	460c      	mov	r4, r1
 8008096:	e9c7 3408 	strd	r3, r4, [r7, #32]

	 scurve->Tc = tc;
 800809a:	69fa      	ldr	r2, [r7, #28]
 800809c:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 80080a0:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	 scurve->Tf = tf;
 80080a4:	69fa      	ldr	r2, [r7, #28]
 80080a6:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80080aa:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	 scurve->Tm = tm;
 80080ae:	69fa      	ldr	r2, [r7, #28]
 80080b0:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80080b4:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 scurve->a_design = a_design;
 80080b8:	69fa      	ldr	r2, [r7, #28]
 80080ba:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 80080be:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 scurve->v_design = v_design;
 80080c2:	69fa      	ldr	r2, [r7, #28]
 80080c4:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80080c8:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 scurve->v_lim = v_lim;
 80080cc:	69fa      	ldr	r2, [r7, #28]
 80080ce:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80080d2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 scurve->v0 = v0;
 80080d6:	69fa      	ldr	r2, [r7, #28]
 80080d8:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80080dc:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 scurve->v1 = v1;
 80080e0:	69fa      	ldr	r2, [r7, #28]
 80080e2:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80080e6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 scurve->j_max = j_max;
 80080ea:	69fa      	ldr	r2, [r7, #28]
 80080ec:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80080f0:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 scurve->s0   = q0;
 80080f4:	69fa      	ldr	r2, [r7, #28]
 80080f6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80080fa:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 scurve->s1   = q1;
 80080fe:	69fa      	ldr	r2, [r7, #28]
 8008100:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8008104:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 scurve->num_of_phase = no_phases;
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 800810e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	 scurve->num_of_sampling = no_sample;
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008116:	669a      	str	r2, [r3, #104]	; 0x68
	 scurve->total_s = total_s;
 8008118:	69fa      	ldr	r2, [r7, #28]
 800811a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800811e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	 scurve->dir = dir;
 8008122:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8008126:	f7f8 fd17 	bl	8000b58 <__aeabi_d2iz>
 800812a:	4603      	mov	r3, r0
 800812c:	b25a      	sxtb	r2, r3
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	701a      	strb	r2, [r3, #0]

	 scurve->a_current = 0;
 8008132:	69fa      	ldr	r2, [r7, #28]
 8008134:	f04f 0300 	mov.w	r3, #0
 8008138:	f04f 0400 	mov.w	r4, #0
 800813c:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	 scurve->v_current = 0;
 8008140:	69fa      	ldr	r2, [r7, #28]
 8008142:	f04f 0300 	mov.w	r3, #0
 8008146:	f04f 0400 	mov.w	r4, #0
 800814a:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	 scurve->s_current = 0;
 800814e:	69fa      	ldr	r2, [r7, #28]
 8008150:	f04f 0300 	mov.w	r3, #0
 8008154:	f04f 0400 	mov.w	r4, #0
 8008158:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	 scurve->v_1 = v_1;
 800815c:	69fa      	ldr	r2, [r7, #28]
 800815e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8008162:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	 scurve->v_2 = v_2;
 8008166:	69fa      	ldr	r2, [r7, #28]
 8008168:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800816c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	 scurve->v_3 = v_3;
 8008170:	69fa      	ldr	r2, [r7, #28]
 8008172:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8008176:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	 scurve->v_4 = v_4;
 800817a:	69fa      	ldr	r2, [r7, #28]
 800817c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8008180:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
	 scurve->s_1 = s_1;
 8008184:	69fa      	ldr	r2, [r7, #28]
 8008186:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800818a:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	 scurve->s_2 = s_2;
 800818e:	69fa      	ldr	r2, [r7, #28]
 8008190:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8008194:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	 scurve->s_3 = s_3;
 8008198:	69fa      	ldr	r2, [r7, #28]
 800819a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800819e:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	 scurve->s_4 = s_4;
 80081a2:	69fa      	ldr	r2, [r7, #28]
 80081a4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80081a8:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

	 return SCARA_STATUS_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	37e8      	adds	r7, #232	; 0xe8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bdb0      	pop	{r4, r5, r7, pc}
 80081b6:	bf00      	nop
 80081b8:	40000000 	.word	0x40000000
 80081bc:	3f847ae1 	.word	0x3f847ae1
 80081c0:	40100000 	.word	0x40100000
 80081c4:	3fe00000 	.word	0x3fe00000
 80081c8:	40180000 	.word	0x40180000

080081cc <scaraTestFlowDuty>:

SCARA_StatusTypeDef scaraTestFlowDuty(double time, SCARA_PositionTypeDef *pos_Next, SCARA_PositionTypeDef pos_Current)
{
 80081cc:	b082      	sub	sp, #8
 80081ce:	b5b0      	push	{r4, r5, r7, lr}
 80081d0:	b0e6      	sub	sp, #408	; 0x198
 80081d2:	af2e      	add	r7, sp, #184	; 0xb8
 80081d4:	ed87 0b02 	vstr	d0, [r7, #8]
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 80081de:	e881 000c 	stmia.w	r1, {r2, r3}
	double current_s;
	SCARA_StatusTypeDef status1;
	SCARA_PositionTypeDef positionCompute;
	current_s = time*myDUTY.task.trajectory_3d.lspb.v_design;
 80081e2:	4b2e      	ldr	r3, [pc, #184]	; (800829c <scaraTestFlowDuty+0xd0>)
 80081e4:	e9d3 3450 	ldrd	r3, r4, [r3, #320]	; 0x140
 80081e8:	461a      	mov	r2, r3
 80081ea:	4623      	mov	r3, r4
 80081ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081f0:	f7f8 fa02 	bl	80005f8 <__aeabi_dmul>
 80081f4:	4603      	mov	r3, r0
 80081f6:	460c      	mov	r4, r1
 80081f8:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
	status1 = scaraFlowLine(&(myDUTY.task.path.line), current_s);
 80081fc:	ed97 0b36 	vldr	d0, [r7, #216]	; 0xd8
 8008200:	4827      	ldr	r0, [pc, #156]	; (80082a0 <scaraTestFlowDuty+0xd4>)
 8008202:	f000 fbd9 	bl	80089b8 <scaraFlowLine>
 8008206:	4603      	mov	r3, r0
 8008208:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	positionCompute.x = myDUTY.task.path.line.x_current;
 800820c:	4b23      	ldr	r3, [pc, #140]	; (800829c <scaraTestFlowDuty+0xd0>)
 800820e:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8008212:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	positionCompute.y = myDUTY.task.path.line.y_current;
 8008216:	4b21      	ldr	r3, [pc, #132]	; (800829c <scaraTestFlowDuty+0xd0>)
 8008218:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800821c:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	positionCompute.z = myDUTY.task.path.line.z_current;
 8008220:	4b1e      	ldr	r3, [pc, #120]	; (800829c <scaraTestFlowDuty+0xd0>)
 8008222:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8008226:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	positionCompute.roll = myDUTY.task.roll_start + myDUTY.task.trajectory_roll.lspb.v_design*time;
 800822a:	4b1c      	ldr	r3, [pc, #112]	; (800829c <scaraTestFlowDuty+0xd0>)
 800822c:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8008230:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008234:	4b19      	ldr	r3, [pc, #100]	; (800829c <scaraTestFlowDuty+0xd0>)
 8008236:	e9d3 01b0 	ldrd	r0, r1, [r3, #704]	; 0x2c0
 800823a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800823e:	f7f8 f9db 	bl	80005f8 <__aeabi_dmul>
 8008242:	4602      	mov	r2, r0
 8008244:	460b      	mov	r3, r1
 8008246:	4620      	mov	r0, r4
 8008248:	4629      	mov	r1, r5
 800824a:	f7f8 f81f 	bl	800028c <__adddf3>
 800824e:	4603      	mov	r3, r0
 8008250:	460c      	mov	r4, r1
 8008252:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 8008256:	f107 0410 	add.w	r4, r7, #16
 800825a:	4668      	mov	r0, sp
 800825c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8008260:	22b8      	movs	r2, #184	; 0xb8
 8008262:	4619      	mov	r1, r3
 8008264:	f00d fc8a 	bl	8015b7c <memcpy>
 8008268:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800826c:	cb0c      	ldmia	r3, {r2, r3}
 800826e:	4620      	mov	r0, r4
 8008270:	f7fb fbca 	bl	8003a08 <kinematicInverse>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d101      	bne.n	800827e <scaraTestFlowDuty+0xb2>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800827a:	2307      	movs	r3, #7
 800827c:	e007      	b.n	800828e <scaraTestFlowDuty+0xc2>
	} else {
		memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800827e:	f107 0310 	add.w	r3, r7, #16
 8008282:	22c0      	movs	r2, #192	; 0xc0
 8008284:	4619      	mov	r1, r3
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f00d fc78 	bl	8015b7c <memcpy>
	}
	return SCARA_STATUS_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	37e0      	adds	r7, #224	; 0xe0
 8008292:	46bd      	mov	sp, r7
 8008294:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8008298:	b002      	add	sp, #8
 800829a:	4770      	bx	lr
 800829c:	20004f28 	.word	0x20004f28
 80082a0:	20004f38 	.word	0x20004f38

080082a4 <scaraFlowDuty>:

/* Compute new x, y , z, theta1, theta2 , d3, theta4 corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 80082a4:	b082      	sub	sp, #8
 80082a6:	b5b0      	push	{r4, r5, r7, lr}
 80082a8:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80082ac:	af2e      	add	r7, sp, #184	; 0xb8
 80082ae:	f107 0108 	add.w	r1, r7, #8
 80082b2:	ed81 0b00 	vstr	d0, [r1]
 80082b6:	1d39      	adds	r1, r7, #4
 80082b8:	6008      	str	r0, [r1, #0]
 80082ba:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 80082be:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 80082c2:	f107 0210 	add.w	r2, r7, #16
 80082c6:	f107 0308 	add.w	r3, r7, #8
 80082ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80082ce:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 80082d2:	4ba9      	ldr	r3, [pc, #676]	; (8008578 <scaraFlowDuty+0x2d4>)
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f040 815a 	bne.w	8008590 <scaraFlowDuty+0x2ec>
		double s, angle, x, y, z, v, v_angle;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 80082dc:	4ba6      	ldr	r3, [pc, #664]	; (8008578 <scaraFlowDuty+0x2d4>)
 80082de:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d12b      	bne.n	800833e <scaraFlowDuty+0x9a>
//			s = myDUTY.task.trajectory_3d.lspb.s_current;
//			v = myDUTY.task.trajectory_3d.lspb.v_current;
//			angle = myDUTY.task.trajectory_roll.lspb.s_current;
//			v_angle = myDUTY.task.trajectory_roll.lspb.v_current;
//			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
			status1 = scaraFlowLSPB1(&(myDUTY.task.trajectory_3d.lspb), time);
 80082e6:	f107 0308 	add.w	r3, r7, #8
 80082ea:	ed93 0b00 	vldr	d0, [r3]
 80082ee:	48a3      	ldr	r0, [pc, #652]	; (800857c <scaraFlowDuty+0x2d8>)
 80082f0:	f000 fc72 	bl	8008bd8 <scaraFlowLSPB1>
 80082f4:	4603      	mov	r3, r0
 80082f6:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 80082fa:	4b9f      	ldr	r3, [pc, #636]	; (8008578 <scaraFlowDuty+0x2d4>)
 80082fc:	e9d3 3462 	ldrd	r3, r4, [r3, #392]	; 0x188
 8008300:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 8008304:	4b9c      	ldr	r3, [pc, #624]	; (8008578 <scaraFlowDuty+0x2d4>)
 8008306:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
 800830a:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 800830e:	4b9a      	ldr	r3, [pc, #616]	; (8008578 <scaraFlowDuty+0x2d4>)
 8008310:	e9d3 34fc 	ldrd	r3, r4, [r3, #1008]	; 0x3f0
 8008314:	f107 0108 	add.w	r1, r7, #8
 8008318:	461a      	mov	r2, r3
 800831a:	4623      	mov	r3, r4
 800831c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008320:	f7f8 f96a 	bl	80005f8 <__aeabi_dmul>
 8008324:	4603      	mov	r3, r0
 8008326:	460c      	mov	r4, r1
 8008328:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 800832c:	4b92      	ldr	r3, [pc, #584]	; (8008578 <scaraFlowDuty+0x2d4>)
 800832e:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8008332:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			status2 = SCARA_STATUS_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 800833c:	e063      	b.n	8008406 <scaraFlowDuty+0x162>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 800833e:	4b8e      	ldr	r3, [pc, #568]	; (8008578 <scaraFlowDuty+0x2d4>)
 8008340:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8008344:	2b01      	cmp	r3, #1
 8008346:	d12d      	bne.n	80083a4 <scaraFlowDuty+0x100>
			status1 = scaraFLowScurve(&(myDUTY.task.trajectory_3d.scurve), time);
 8008348:	f107 0308 	add.w	r3, r7, #8
 800834c:	ed93 0b00 	vldr	d0, [r3]
 8008350:	488b      	ldr	r0, [pc, #556]	; (8008580 <scaraFlowDuty+0x2dc>)
 8008352:	f000 ff8b 	bl	800926c <scaraFLowScurve>
 8008356:	4603      	mov	r3, r0
 8008358:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFLowScurve(&(myDUTY.task.trajectory_roll.scurve), time);
 800835c:	f107 0308 	add.w	r3, r7, #8
 8008360:	ed93 0b00 	vldr	d0, [r3]
 8008364:	4887      	ldr	r0, [pc, #540]	; (8008584 <scaraFlowDuty+0x2e0>)
 8008366:	f000 ff81 	bl	800926c <scaraFLowScurve>
 800836a:	4603      	mov	r3, r0
 800836c:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 8008370:	4b81      	ldr	r3, [pc, #516]	; (8008578 <scaraFlowDuty+0x2d4>)
 8008372:	e9d3 3498 	ldrd	r3, r4, [r3, #608]	; 0x260
 8008376:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			v = myDUTY.task.trajectory_3d.scurve.v_current;
 800837a:	4b7f      	ldr	r3, [pc, #508]	; (8008578 <scaraFlowDuty+0x2d4>)
 800837c:	e9d3 3496 	ldrd	r3, r4, [r3, #600]	; 0x258
 8008380:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			angle = myDUTY.task.trajectory_roll.scurve.s_current;
 8008384:	4b7c      	ldr	r3, [pc, #496]	; (8008578 <scaraFlowDuty+0x2d4>)
 8008386:	e9d3 34f8 	ldrd	r3, r4, [r3, #992]	; 0x3e0
 800838a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			v_angle = myDUTY.task.trajectory_roll.scurve.v_current;
 800838e:	4b7a      	ldr	r3, [pc, #488]	; (8008578 <scaraFlowDuty+0x2d4>)
 8008390:	e9d3 34f6 	ldrd	r3, r4, [r3, #984]	; 0x3d8
 8008394:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			dir_roll = myDUTY.task.trajectory_roll.scurve.dir;
 8008398:	4b77      	ldr	r3, [pc, #476]	; (8008578 <scaraFlowDuty+0x2d4>)
 800839a:	f893 3318 	ldrb.w	r3, [r3, #792]	; 0x318
 800839e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 80083a2:	e030      	b.n	8008406 <scaraFlowDuty+0x162>
		}else if( DUTY_TRAJECTORY_LINEAR == myDUTY.task.trajectory_3d.trajectory_type){
 80083a4:	4b74      	ldr	r3, [pc, #464]	; (8008578 <scaraFlowDuty+0x2d4>)
 80083a6:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d129      	bne.n	8008402 <scaraFlowDuty+0x15e>
			s = time*myDUTY.task.trajectory_3d.linear.constant_v;
 80083ae:	4b72      	ldr	r3, [pc, #456]	; (8008578 <scaraFlowDuty+0x2d4>)
 80083b0:	e9d3 349c 	ldrd	r3, r4, [r3, #624]	; 0x270
 80083b4:	f107 0108 	add.w	r1, r7, #8
 80083b8:	461a      	mov	r2, r3
 80083ba:	4623      	mov	r3, r4
 80083bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083c0:	f7f8 f91a 	bl	80005f8 <__aeabi_dmul>
 80083c4:	4603      	mov	r3, r0
 80083c6:	460c      	mov	r4, r1
 80083c8:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 80083cc:	4b6a      	ldr	r3, [pc, #424]	; (8008578 <scaraFlowDuty+0x2d4>)
 80083ce:	e9d3 34fc 	ldrd	r3, r4, [r3, #1008]	; 0x3f0
 80083d2:	f107 0108 	add.w	r1, r7, #8
 80083d6:	461a      	mov	r2, r3
 80083d8:	4623      	mov	r3, r4
 80083da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083de:	f7f8 f90b 	bl	80005f8 <__aeabi_dmul>
 80083e2:	4603      	mov	r3, r0
 80083e4:	460c      	mov	r4, r1
 80083e6:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 80083ea:	4b63      	ldr	r3, [pc, #396]	; (8008578 <scaraFlowDuty+0x2d4>)
 80083ec:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 80083f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			status1 = SCARA_STATUS_OK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 80083fa:	2300      	movs	r3, #0
 80083fc:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8008400:	e001      	b.n	8008406 <scaraFlowDuty+0x162>
		}else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8008402:	2305      	movs	r3, #5
 8008404:	e2cd      	b.n	80089a2 <scaraFlowDuty+0x6fe>
		}

		if ( SCARA_STATUS_OK != status1) {
 8008406:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 800840a:	2b00      	cmp	r3, #0
 800840c:	d002      	beq.n	8008414 <scaraFlowDuty+0x170>
			return status1;
 800840e:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8008412:	e2c6      	b.n	80089a2 <scaraFlowDuty+0x6fe>
		}
		if ( SCARA_STATUS_OK != status2) {
 8008414:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008418:	2b00      	cmp	r3, #0
 800841a:	d002      	beq.n	8008422 <scaraFlowDuty+0x17e>
			return status2;
 800841c:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008420:	e2bf      	b.n	80089a2 <scaraFlowDuty+0x6fe>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 8008422:	4b55      	ldr	r3, [pc, #340]	; (8008578 <scaraFlowDuty+0x2d4>)
 8008424:	7a1b      	ldrb	r3, [r3, #8]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d117      	bne.n	800845a <scaraFlowDuty+0x1b6>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 800842a:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 800842e:	4856      	ldr	r0, [pc, #344]	; (8008588 <scaraFlowDuty+0x2e4>)
 8008430:	f000 fac2 	bl	80089b8 <scaraFlowLine>
 8008434:	4603      	mov	r3, r0
 8008436:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.line.x_current;
 800843a:	4b4f      	ldr	r3, [pc, #316]	; (8008578 <scaraFlowDuty+0x2d4>)
 800843c:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8008440:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			y = myDUTY.task.path.line.y_current;
 8008444:	4b4c      	ldr	r3, [pc, #304]	; (8008578 <scaraFlowDuty+0x2d4>)
 8008446:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800844a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			z = myDUTY.task.path.line.z_current;
 800844e:	4b4a      	ldr	r3, [pc, #296]	; (8008578 <scaraFlowDuty+0x2d4>)
 8008450:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8008454:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 8008458:	e01d      	b.n	8008496 <scaraFlowDuty+0x1f2>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 800845a:	4b47      	ldr	r3, [pc, #284]	; (8008578 <scaraFlowDuty+0x2d4>)
 800845c:	7a1b      	ldrb	r3, [r3, #8]
 800845e:	2b01      	cmp	r3, #1
 8008460:	d117      	bne.n	8008492 <scaraFlowDuty+0x1ee>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 8008462:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 8008466:	4849      	ldr	r0, [pc, #292]	; (800858c <scaraFlowDuty+0x2e8>)
 8008468:	f000 fb2e 	bl	8008ac8 <scaraFlowCircle>
 800846c:	4603      	mov	r3, r0
 800846e:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.circle.x_current;
 8008472:	4b41      	ldr	r3, [pc, #260]	; (8008578 <scaraFlowDuty+0x2d4>)
 8008474:	e9d3 343e 	ldrd	r3, r4, [r3, #248]	; 0xf8
 8008478:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			y = myDUTY.task.path.circle.y_current;
 800847c:	4b3e      	ldr	r3, [pc, #248]	; (8008578 <scaraFlowDuty+0x2d4>)
 800847e:	e9d3 3440 	ldrd	r3, r4, [r3, #256]	; 0x100
 8008482:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			z = myDUTY.task.path.circle.z_current;
 8008486:	4b3c      	ldr	r3, [pc, #240]	; (8008578 <scaraFlowDuty+0x2d4>)
 8008488:	e9d3 3442 	ldrd	r3, r4, [r3, #264]	; 0x108
 800848c:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 8008490:	e001      	b.n	8008496 <scaraFlowDuty+0x1f2>
		} else {
			return SCARA_STATUS_ERROR_TASK;
 8008492:	2303      	movs	r3, #3
 8008494:	e285      	b.n	80089a2 <scaraFlowDuty+0x6fe>
		}

		positionCompute.x 		= x;
 8008496:	f107 0210 	add.w	r2, r7, #16
 800849a:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800849e:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
		positionCompute.y		= y;
 80084a2:	f107 0210 	add.w	r2, r7, #16
 80084a6:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 80084aa:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		positionCompute.z 		= z;
 80084ae:	f107 0210 	add.w	r2, r7, #16
 80084b2:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80084b6:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 80084ba:	4b2f      	ldr	r3, [pc, #188]	; (8008578 <scaraFlowDuty+0x2d4>)
 80084bc:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80084c0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80084c4:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7f8 f82b 	bl	8000524 <__aeabi_i2d>
 80084ce:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80084d2:	f7f8 f891 	bl	80005f8 <__aeabi_dmul>
 80084d6:	4602      	mov	r2, r0
 80084d8:	460b      	mov	r3, r1
 80084da:	4620      	mov	r0, r4
 80084dc:	4629      	mov	r1, r5
 80084de:	f7f7 fed5 	bl	800028c <__adddf3>
 80084e2:	4603      	mov	r3, r0
 80084e4:	460c      	mov	r4, r1
 80084e6:	f107 0210 	add.w	r2, r7, #16
 80084ea:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

		positionCompute.q		= s;
 80084ee:	f107 0210 	add.w	r2, r7, #16
 80084f2:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80084f6:	e9c2 3400 	strd	r3, r4, [r2]
		positionCompute.q_roll  = angle;
 80084fa:	f107 0210 	add.w	r2, r7, #16
 80084fe:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8008502:	e9c2 3402 	strd	r3, r4, [r2, #8]

		positionCompute.v_3d    = v;
 8008506:	f107 0210 	add.w	r2, r7, #16
 800850a:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 800850e:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 8008512:	f107 0210 	add.w	r2, r7, #16
 8008516:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800851a:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 800851e:	4b16      	ldr	r3, [pc, #88]	; (8008578 <scaraFlowDuty+0x2d4>)
 8008520:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8008524:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008528:	f107 0210 	add.w	r2, r7, #16
 800852c:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 8008530:	f107 0210 	add.w	r2, r7, #16
 8008534:	f107 0308 	add.w	r3, r7, #8
 8008538:	e9d3 3400 	ldrd	r3, r4, [r3]
 800853c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 8008540:	f107 0410 	add.w	r4, r7, #16
 8008544:	4668      	mov	r0, sp
 8008546:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800854a:	22b8      	movs	r2, #184	; 0xb8
 800854c:	4619      	mov	r1, r3
 800854e:	f00d fb15 	bl	8015b7c <memcpy>
 8008552:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8008556:	cb0c      	ldmia	r3, {r2, r3}
 8008558:	4620      	mov	r0, r4
 800855a:	f7fb fa55 	bl	8003a08 <kinematicInverse>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d101      	bne.n	8008568 <scaraFlowDuty+0x2c4>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008564:	2307      	movs	r3, #7
 8008566:	e21c      	b.n	80089a2 <scaraFlowDuty+0x6fe>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8008568:	f107 0110 	add.w	r1, r7, #16
 800856c:	1d3b      	adds	r3, r7, #4
 800856e:	22c0      	movs	r2, #192	; 0xc0
 8008570:	6818      	ldr	r0, [r3, #0]
 8008572:	f00d fb03 	bl	8015b7c <memcpy>
 8008576:	e213      	b.n	80089a0 <scaraFlowDuty+0x6fc>
 8008578:	20004f28 	.word	0x20004f28
 800857c:	20005040 	.word	0x20005040
 8008580:	200050c0 	.word	0x200050c0
 8008584:	20005240 	.word	0x20005240
 8008588:	20004f38 	.word	0x20004f38
 800858c:	20004fa8 	.word	0x20004fa8
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 8008590:	4b8b      	ldr	r3, [pc, #556]	; (80087c0 <scaraFlowDuty+0x51c>)
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	2b01      	cmp	r3, #1
 8008596:	f040 8201 	bne.w	800899c <scaraFlowDuty+0x6f8>
		double s0, s1, s2, s3;
		double v0, v1, v2, v3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 800859a:	4b89      	ldr	r3, [pc, #548]	; (80087c0 <scaraFlowDuty+0x51c>)
 800859c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d174      	bne.n	800868e <scaraFlowDuty+0x3ea>
			status1 = scaraFlowLSPB(&(myDUTY.joint.trajectory[0].lspb), time);
 80085a4:	f107 0308 	add.w	r3, r7, #8
 80085a8:	ed93 0b00 	vldr	d0, [r3]
 80085ac:	4885      	ldr	r0, [pc, #532]	; (80087c4 <scaraFlowDuty+0x520>)
 80085ae:	f000 fcb1 	bl	8008f14 <scaraFlowLSPB>
 80085b2:	4603      	mov	r3, r0
 80085b4:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFlowLSPB(&(myDUTY.joint.trajectory[1].lspb), time);
 80085b8:	f107 0308 	add.w	r3, r7, #8
 80085bc:	ed93 0b00 	vldr	d0, [r3]
 80085c0:	4881      	ldr	r0, [pc, #516]	; (80087c8 <scaraFlowDuty+0x524>)
 80085c2:	f000 fca7 	bl	8008f14 <scaraFlowLSPB>
 80085c6:	4603      	mov	r3, r0
 80085c8:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFlowLSPB(&(myDUTY.joint.trajectory[2].lspb), time);
 80085cc:	f107 0308 	add.w	r3, r7, #8
 80085d0:	ed93 0b00 	vldr	d0, [r3]
 80085d4:	487d      	ldr	r0, [pc, #500]	; (80087cc <scaraFlowDuty+0x528>)
 80085d6:	f000 fc9d 	bl	8008f14 <scaraFlowLSPB>
 80085da:	4603      	mov	r3, r0
 80085dc:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFlowLSPB(&(myDUTY.joint.trajectory[3].lspb), time);
 80085e0:	f107 0308 	add.w	r3, r7, #8
 80085e4:	ed93 0b00 	vldr	d0, [r3]
 80085e8:	4879      	ldr	r0, [pc, #484]	; (80087d0 <scaraFlowDuty+0x52c>)
 80085ea:	f000 fc93 	bl	8008f14 <scaraFlowLSPB>
 80085ee:	4603      	mov	r3, r0
 80085f0:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 80085f4:	4b72      	ldr	r3, [pc, #456]	; (80087c0 <scaraFlowDuty+0x51c>)
 80085f6:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 80085fa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 80085fe:	4b70      	ldr	r3, [pc, #448]	; (80087c0 <scaraFlowDuty+0x51c>)
 8008600:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 8008604:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 8008608:	4b6d      	ldr	r3, [pc, #436]	; (80087c0 <scaraFlowDuty+0x51c>)
 800860a:	f893 3720 	ldrb.w	r3, [r3, #1824]	; 0x720
 800860e:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 8008612:	4b6b      	ldr	r3, [pc, #428]	; (80087c0 <scaraFlowDuty+0x51c>)
 8008614:	f893 38a0 	ldrb.w	r3, [r3, #2208]	; 0x8a0
 8008618:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 800861c:	4b68      	ldr	r3, [pc, #416]	; (80087c0 <scaraFlowDuty+0x51c>)
 800861e:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008622:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008626:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 800862a:	4b65      	ldr	r3, [pc, #404]	; (80087c0 <scaraFlowDuty+0x51c>)
 800862c:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 8008630:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008634:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 8008638:	4b61      	ldr	r3, [pc, #388]	; (80087c0 <scaraFlowDuty+0x51c>)
 800863a:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 800863e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008642:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 8008646:	4b5e      	ldr	r3, [pc, #376]	; (80087c0 <scaraFlowDuty+0x51c>)
 8008648:	f603 1318 	addw	r3, r3, #2328	; 0x918
 800864c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008650:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 8008654:	4b5a      	ldr	r3, [pc, #360]	; (80087c0 <scaraFlowDuty+0x51c>)
 8008656:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 800865a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800865e:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 8008662:	4b57      	ldr	r3, [pc, #348]	; (80087c0 <scaraFlowDuty+0x51c>)
 8008664:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8008668:	e9d3 3400 	ldrd	r3, r4, [r3]
 800866c:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 8008670:	4b53      	ldr	r3, [pc, #332]	; (80087c0 <scaraFlowDuty+0x51c>)
 8008672:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8008676:	e9d3 3400 	ldrd	r3, r4, [r3]
 800867a:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 800867e:	4b50      	ldr	r3, [pc, #320]	; (80087c0 <scaraFlowDuty+0x51c>)
 8008680:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8008684:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008688:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 800868c:	e07b      	b.n	8008786 <scaraFlowDuty+0x4e2>

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 800868e:	4b4c      	ldr	r3, [pc, #304]	; (80087c0 <scaraFlowDuty+0x51c>)
 8008690:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008694:	2b01      	cmp	r3, #1
 8008696:	d174      	bne.n	8008782 <scaraFlowDuty+0x4de>
			status1 = scaraFLowScurve(&(myDUTY.joint.trajectory[0].scurve), time);
 8008698:	f107 0308 	add.w	r3, r7, #8
 800869c:	ed93 0b00 	vldr	d0, [r3]
 80086a0:	484c      	ldr	r0, [pc, #304]	; (80087d4 <scaraFlowDuty+0x530>)
 80086a2:	f000 fde3 	bl	800926c <scaraFLowScurve>
 80086a6:	4603      	mov	r3, r0
 80086a8:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFLowScurve(&(myDUTY.joint.trajectory[1].scurve), time);
 80086ac:	f107 0308 	add.w	r3, r7, #8
 80086b0:	ed93 0b00 	vldr	d0, [r3]
 80086b4:	4848      	ldr	r0, [pc, #288]	; (80087d8 <scaraFlowDuty+0x534>)
 80086b6:	f000 fdd9 	bl	800926c <scaraFLowScurve>
 80086ba:	4603      	mov	r3, r0
 80086bc:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFLowScurve(&(myDUTY.joint.trajectory[2].scurve), time);
 80086c0:	f107 0308 	add.w	r3, r7, #8
 80086c4:	ed93 0b00 	vldr	d0, [r3]
 80086c8:	4844      	ldr	r0, [pc, #272]	; (80087dc <scaraFlowDuty+0x538>)
 80086ca:	f000 fdcf 	bl	800926c <scaraFLowScurve>
 80086ce:	4603      	mov	r3, r0
 80086d0:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFLowScurve(&(myDUTY.joint.trajectory[3].scurve), time);
 80086d4:	f107 0308 	add.w	r3, r7, #8
 80086d8:	ed93 0b00 	vldr	d0, [r3]
 80086dc:	4840      	ldr	r0, [pc, #256]	; (80087e0 <scaraFlowDuty+0x53c>)
 80086de:	f000 fdc5 	bl	800926c <scaraFLowScurve>
 80086e2:	4603      	mov	r3, r0
 80086e4:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 80086e8:	4b35      	ldr	r3, [pc, #212]	; (80087c0 <scaraFlowDuty+0x51c>)
 80086ea:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 80086ee:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 80086f2:	4b33      	ldr	r3, [pc, #204]	; (80087c0 <scaraFlowDuty+0x51c>)
 80086f4:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 80086f8:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 80086fc:	4b30      	ldr	r3, [pc, #192]	; (80087c0 <scaraFlowDuty+0x51c>)
 80086fe:	f893 37a0 	ldrb.w	r3, [r3, #1952]	; 0x7a0
 8008702:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 8008706:	4b2e      	ldr	r3, [pc, #184]	; (80087c0 <scaraFlowDuty+0x51c>)
 8008708:	f893 3920 	ldrb.w	r3, [r3, #2336]	; 0x920
 800870c:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 8008710:	4b2b      	ldr	r3, [pc, #172]	; (80087c0 <scaraFlowDuty+0x51c>)
 8008712:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8008716:	e9d3 3400 	ldrd	r3, r4, [r3]
 800871a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 800871e:	4b28      	ldr	r3, [pc, #160]	; (80087c0 <scaraFlowDuty+0x51c>)
 8008720:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 8008724:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008728:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 800872c:	4b24      	ldr	r3, [pc, #144]	; (80087c0 <scaraFlowDuty+0x51c>)
 800872e:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8008732:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008736:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 800873a:	4b21      	ldr	r3, [pc, #132]	; (80087c0 <scaraFlowDuty+0x51c>)
 800873c:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8008740:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008744:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8

			v0 = myDUTY.joint.trajectory[0].scurve.v_current;
 8008748:	4b1d      	ldr	r3, [pc, #116]	; (80087c0 <scaraFlowDuty+0x51c>)
 800874a:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 800874e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008752:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
			v1 = myDUTY.joint.trajectory[1].scurve.v_current;
 8008756:	4b1a      	ldr	r3, [pc, #104]	; (80087c0 <scaraFlowDuty+0x51c>)
 8008758:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 800875c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008760:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
			v2 = myDUTY.joint.trajectory[2].scurve.v_current;
 8008764:	4b16      	ldr	r3, [pc, #88]	; (80087c0 <scaraFlowDuty+0x51c>)
 8008766:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 800876a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800876e:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			v3 = myDUTY.joint.trajectory[3].scurve.v_current;
 8008772:	4b13      	ldr	r3, [pc, #76]	; (80087c0 <scaraFlowDuty+0x51c>)
 8008774:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8008778:	e9d3 3400 	ldrd	r3, r4, [r3]
 800877c:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8008780:	e001      	b.n	8008786 <scaraFlowDuty+0x4e2>

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8008782:	2305      	movs	r3, #5
 8008784:	e10d      	b.n	80089a2 <scaraFlowDuty+0x6fe>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 8008786:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 800878a:	2b00      	cmp	r3, #0
 800878c:	d002      	beq.n	8008794 <scaraFlowDuty+0x4f0>
			return status1;
 800878e:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8008792:	e106      	b.n	80089a2 <scaraFlowDuty+0x6fe>
		}
		if ( SCARA_STATUS_OK != status2) {
 8008794:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008798:	2b00      	cmp	r3, #0
 800879a:	d002      	beq.n	80087a2 <scaraFlowDuty+0x4fe>
			return status2;
 800879c:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 80087a0:	e0ff      	b.n	80089a2 <scaraFlowDuty+0x6fe>
		}
		if ( SCARA_STATUS_OK != status3) {
 80087a2:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d002      	beq.n	80087b0 <scaraFlowDuty+0x50c>
			return status3;
 80087aa:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 80087ae:	e0f8      	b.n	80089a2 <scaraFlowDuty+0x6fe>
		}
		if ( SCARA_STATUS_OK != status4) {
 80087b0:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d015      	beq.n	80087e4 <scaraFlowDuty+0x540>
			return status4;
 80087b8:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 80087bc:	e0f1      	b.n	80089a2 <scaraFlowDuty+0x6fe>
 80087be:	bf00      	nop
 80087c0:	20004f28 	.word	0x20004f28
 80087c4:	20005348 	.word	0x20005348
 80087c8:	200054c8 	.word	0x200054c8
 80087cc:	20005648 	.word	0x20005648
 80087d0:	200057c8 	.word	0x200057c8
 80087d4:	200053c8 	.word	0x200053c8
 80087d8:	20005548 	.word	0x20005548
 80087dc:	200056c8 	.word	0x200056c8
 80087e0:	20005848 	.word	0x20005848
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 80087e4:	4b73      	ldr	r3, [pc, #460]	; (80089b4 <scaraFlowDuty+0x710>)
 80087e6:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 80087ea:	e9d3 4500 	ldrd	r4, r5, [r3]
 80087ee:	f997 30d7 	ldrsb.w	r3, [r7, #215]	; 0xd7
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7f7 fe96 	bl	8000524 <__aeabi_i2d>
 80087f8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80087fc:	f7f7 fefc 	bl	80005f8 <__aeabi_dmul>
 8008800:	4602      	mov	r2, r0
 8008802:	460b      	mov	r3, r1
 8008804:	4620      	mov	r0, r4
 8008806:	4629      	mov	r1, r5
 8008808:	f7f7 fd40 	bl	800028c <__adddf3>
 800880c:	4603      	mov	r3, r0
 800880e:	460c      	mov	r4, r1
 8008810:	f107 0210 	add.w	r2, r7, #16
 8008814:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 8008818:	4b66      	ldr	r3, [pc, #408]	; (80089b4 <scaraFlowDuty+0x710>)
 800881a:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 800881e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008822:	f997 30d6 	ldrsb.w	r3, [r7, #214]	; 0xd6
 8008826:	4618      	mov	r0, r3
 8008828:	f7f7 fe7c 	bl	8000524 <__aeabi_i2d>
 800882c:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8008830:	f7f7 fee2 	bl	80005f8 <__aeabi_dmul>
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	4620      	mov	r0, r4
 800883a:	4629      	mov	r1, r5
 800883c:	f7f7 fd26 	bl	800028c <__adddf3>
 8008840:	4603      	mov	r3, r0
 8008842:	460c      	mov	r4, r1
 8008844:	f107 0210 	add.w	r2, r7, #16
 8008848:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 800884c:	4b59      	ldr	r3, [pc, #356]	; (80089b4 <scaraFlowDuty+0x710>)
 800884e:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8008852:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008856:	f997 30d5 	ldrsb.w	r3, [r7, #213]	; 0xd5
 800885a:	4618      	mov	r0, r3
 800885c:	f7f7 fe62 	bl	8000524 <__aeabi_i2d>
 8008860:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8008864:	f7f7 fec8 	bl	80005f8 <__aeabi_dmul>
 8008868:	4602      	mov	r2, r0
 800886a:	460b      	mov	r3, r1
 800886c:	4620      	mov	r0, r4
 800886e:	4629      	mov	r1, r5
 8008870:	f7f7 fd0c 	bl	800028c <__adddf3>
 8008874:	4603      	mov	r3, r0
 8008876:	460c      	mov	r4, r1
 8008878:	f107 0210 	add.w	r2, r7, #16
 800887c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 8008880:	4b4c      	ldr	r3, [pc, #304]	; (80089b4 <scaraFlowDuty+0x710>)
 8008882:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8008886:	e9d3 4500 	ldrd	r4, r5, [r3]
 800888a:	f997 30d4 	ldrsb.w	r3, [r7, #212]	; 0xd4
 800888e:	4618      	mov	r0, r3
 8008890:	f7f7 fe48 	bl	8000524 <__aeabi_i2d>
 8008894:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8008898:	f7f7 feae 	bl	80005f8 <__aeabi_dmul>
 800889c:	4602      	mov	r2, r0
 800889e:	460b      	mov	r3, r1
 80088a0:	4620      	mov	r0, r4
 80088a2:	4629      	mov	r1, r5
 80088a4:	f7f7 fcf2 	bl	800028c <__adddf3>
 80088a8:	4603      	mov	r3, r0
 80088aa:	460c      	mov	r4, r1
 80088ac:	f107 0210 	add.w	r2, r7, #16
 80088b0:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 80088b4:	f107 0210 	add.w	r2, r7, #16
 80088b8:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80088bc:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 80088c0:	f107 0210 	add.w	r2, r7, #16
 80088c4:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 80088c8:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 80088cc:	f107 0210 	add.w	r2, r7, #16
 80088d0:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80088d4:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 80088d8:	f107 0210 	add.w	r2, r7, #16
 80088dc:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 80088e0:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 80088e4:	f107 0210 	add.w	r2, r7, #16
 80088e8:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80088ec:	e9c2 3404 	strd	r3, r4, [r2, #16]
		positionCompute.q_theta2 = s1;
 80088f0:	f107 0210 	add.w	r2, r7, #16
 80088f4:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 80088f8:	e9c2 3406 	strd	r3, r4, [r2, #24]
		positionCompute.q_d3	 = s2;
 80088fc:	f107 0210 	add.w	r2, r7, #16
 8008900:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8008904:	e9c2 3408 	strd	r3, r4, [r2, #32]
		positionCompute.q_theta4 = s3;
 8008908:	f107 0210 	add.w	r2, r7, #16
 800890c:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8008910:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 8008914:	4b27      	ldr	r3, [pc, #156]	; (80089b4 <scaraFlowDuty+0x710>)
 8008916:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800891a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800891e:	f107 0210 	add.w	r2, r7, #16
 8008922:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 8008926:	f107 0210 	add.w	r2, r7, #16
 800892a:	f107 0308 	add.w	r3, r7, #8
 800892e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008932:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 8008936:	f107 0310 	add.w	r3, r7, #16
 800893a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800893e:	f107 0310 	add.w	r3, r7, #16
 8008942:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 8008946:	f107 0310 	add.w	r3, r7, #16
 800894a:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 800894e:	f107 0310 	add.w	r3, r7, #16
 8008952:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 8008956:	eeb0 3a44 	vmov.f32	s6, s8
 800895a:	eef0 3a64 	vmov.f32	s7, s9
 800895e:	eeb0 2a45 	vmov.f32	s4, s10
 8008962:	eef0 2a65 	vmov.f32	s5, s11
 8008966:	eeb0 1a46 	vmov.f32	s2, s12
 800896a:	eef0 1a66 	vmov.f32	s3, s13
 800896e:	eeb0 0a47 	vmov.f32	s0, s14
 8008972:	eef0 0a67 	vmov.f32	s1, s15
 8008976:	f001 fb5f 	bl	800a038 <scaraCheckWorkSpace4>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d001      	beq.n	8008984 <scaraFlowDuty+0x6e0>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008980:	2307      	movs	r3, #7
 8008982:	e00e      	b.n	80089a2 <scaraFlowDuty+0x6fe>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8008984:	f107 0110 	add.w	r1, r7, #16
 8008988:	1d3b      	adds	r3, r7, #4
 800898a:	22c0      	movs	r2, #192	; 0xc0
 800898c:	6818      	ldr	r0, [r3, #0]
 800898e:	f00d f8f5 	bl	8015b7c <memcpy>
		}
		kinematicForward(pos_Next);
 8008992:	1d3b      	adds	r3, r7, #4
 8008994:	6818      	ldr	r0, [r3, #0]
 8008996:	f7fa fefb 	bl	8003790 <kinematicForward>
 800899a:	e001      	b.n	80089a0 <scaraFlowDuty+0x6fc>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 800899c:	2302      	movs	r3, #2
 800899e:	e000      	b.n	80089a2 <scaraFlowDuty+0x6fe>
	}

	return SCARA_STATUS_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 80089a8:	46bd      	mov	sp, r7
 80089aa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80089ae:	b002      	add	sp, #8
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	20004f28 	.word	0x20004f28

080089b8 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 80089b8:	b5b0      	push	{r4, r5, r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80089ca:	a33d      	add	r3, pc, #244	; (adr r3, 8008ac0 <scaraFlowLine+0x108>)
 80089cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d0:	f7f8 f8a2 	bl	8000b18 <__aeabi_dcmpgt>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d05a      	beq.n	8008a90 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80089e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089ea:	f7f7 fe05 	bl	80005f8 <__aeabi_dmul>
 80089ee:	4602      	mov	r2, r0
 80089f0:	460b      	mov	r3, r1
 80089f2:	4610      	mov	r0, r2
 80089f4:	4619      	mov	r1, r3
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80089fc:	f7f7 ff26 	bl	800084c <__aeabi_ddiv>
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	4620      	mov	r0, r4
 8008a06:	4629      	mov	r1, r5
 8008a08:	f7f7 fc40 	bl	800028c <__adddf3>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	460c      	mov	r4, r1
 8008a10:	68fa      	ldr	r2, [r7, #12]
 8008a12:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008a22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a26:	f7f7 fde7 	bl	80005f8 <__aeabi_dmul>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	4610      	mov	r0, r2
 8008a30:	4619      	mov	r1, r3
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008a38:	f7f7 ff08 	bl	800084c <__aeabi_ddiv>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	460b      	mov	r3, r1
 8008a40:	4620      	mov	r0, r4
 8008a42:	4629      	mov	r1, r5
 8008a44:	f7f7 fc22 	bl	800028c <__adddf3>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	460c      	mov	r4, r1
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8008a5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a62:	f7f7 fdc9 	bl	80005f8 <__aeabi_dmul>
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	4610      	mov	r0, r2
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008a74:	f7f7 feea 	bl	800084c <__aeabi_ddiv>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	4629      	mov	r1, r5
 8008a80:	f7f7 fc04 	bl	800028c <__adddf3>
 8008a84:	4603      	mov	r3, r0
 8008a86:	460c      	mov	r4, r1
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
 8008a8e:	e011      	b.n	8008ab4 <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current = line->y1;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current = line->z1;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8008aae:	68fa      	ldr	r2, [r7, #12]
 8008ab0:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bdb0      	pop	{r4, r5, r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	47ae147b 	.word	0x47ae147b
 8008ac4:	3f847ae1 	.word	0x3f847ae1

08008ac8 <scaraFlowCircle>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 8008ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008acc:	b086      	sub	sp, #24
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	60f8      	str	r0, [r7, #12]
 8008ad2:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8008adc:	461a      	mov	r2, r3
 8008ade:	4623      	mov	r3, r4
 8008ae0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ae4:	f7f7 feb2 	bl	800084c <__aeabi_ddiv>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	460c      	mov	r4, r1
 8008aec:	e9c7 3404 	strd	r3, r4, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f993 3000 	ldrsb.w	r3, [r3]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7f7 fd0b 	bl	8000524 <__aeabi_i2d>
 8008b0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008b12:	f7f7 fd71 	bl	80005f8 <__aeabi_dmul>
 8008b16:	4602      	mov	r2, r0
 8008b18:	460b      	mov	r3, r1
 8008b1a:	4650      	mov	r0, sl
 8008b1c:	4659      	mov	r1, fp
 8008b1e:	f7f7 fbb5 	bl	800028c <__adddf3>
 8008b22:	4602      	mov	r2, r0
 8008b24:	460b      	mov	r3, r1
 8008b26:	ec43 2b17 	vmov	d7, r2, r3
 8008b2a:	eeb0 0a47 	vmov.f32	s0, s14
 8008b2e:	eef0 0a67 	vmov.f32	s1, s15
 8008b32:	f010 fe11 	bl	8019758 <cos>
 8008b36:	ec53 2b10 	vmov	r2, r3, d0
 8008b3a:	4640      	mov	r0, r8
 8008b3c:	4649      	mov	r1, r9
 8008b3e:	f7f7 fd5b 	bl	80005f8 <__aeabi_dmul>
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	4620      	mov	r0, r4
 8008b48:	4629      	mov	r1, r5
 8008b4a:	f7f7 fb9f 	bl	800028c <__adddf3>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	460c      	mov	r4, r1
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f993 3000 	ldrsb.w	r3, [r3]
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7f7 fcd7 	bl	8000524 <__aeabi_i2d>
 8008b76:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008b7a:	f7f7 fd3d 	bl	80005f8 <__aeabi_dmul>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	460b      	mov	r3, r1
 8008b82:	4650      	mov	r0, sl
 8008b84:	4659      	mov	r1, fp
 8008b86:	f7f7 fb81 	bl	800028c <__adddf3>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	ec43 2b17 	vmov	d7, r2, r3
 8008b92:	eeb0 0a47 	vmov.f32	s0, s14
 8008b96:	eef0 0a67 	vmov.f32	s1, s15
 8008b9a:	f010 fe6d 	bl	8019878 <sin>
 8008b9e:	ec53 2b10 	vmov	r2, r3, d0
 8008ba2:	4640      	mov	r0, r8
 8008ba4:	4649      	mov	r1, r9
 8008ba6:	f7f7 fd27 	bl	80005f8 <__aeabi_dmul>
 8008baa:	4602      	mov	r2, r0
 8008bac:	460b      	mov	r3, r1
 8008bae:	4620      	mov	r0, r4
 8008bb0:	4629      	mov	r1, r5
 8008bb2:	f7f7 fb6b 	bl	800028c <__adddf3>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	460c      	mov	r4, r1
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3718      	adds	r7, #24
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008bd8 <scaraFlowLSPB1>:
SCARA_StatusTypeDef	scaraFlowLSPB1	(Trajectory_LSPB_TypeDef *lspb, double time){
 8008bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008bdc:	b08b      	sub	sp, #44	; 0x2c
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	60f8      	str	r0, [r7, #12]
 8008be2:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008bec:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008bf6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8008c00:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8008c04:	f04f 0200 	mov.w	r2, #0
 8008c08:	f04f 0300 	mov.w	r3, #0
 8008c0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c10:	f7f7 ff78 	bl	8000b04 <__aeabi_dcmpge>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d05b      	beq.n	8008cd2 <scaraFlowLSPB1+0xfa>
 8008c1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008c1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c22:	f7f7 ff65 	bl	8000af0 <__aeabi_dcmple>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d052      	beq.n	8008cd2 <scaraFlowLSPB1+0xfa>
		lspb->a_current		=	lspb->a_design;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008c44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c48:	f7f7 fcd6 	bl	80005f8 <__aeabi_dmul>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	460b      	mov	r3, r1
 8008c50:	4620      	mov	r0, r4
 8008c52:	4629      	mov	r1, r5
 8008c54:	f7f7 fb1a 	bl	800028c <__adddf3>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	460c      	mov	r4, r1
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008c6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c72:	f7f7 fcc1 	bl	80005f8 <__aeabi_dmul>
 8008c76:	4602      	mov	r2, r0
 8008c78:	460b      	mov	r3, r1
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	4629      	mov	r1, r5
 8008c7e:	f7f7 fb05 	bl	800028c <__adddf3>
 8008c82:	4603      	mov	r3, r0
 8008c84:	460c      	mov	r4, r1
 8008c86:	4625      	mov	r5, r4
 8008c88:	461c      	mov	r4, r3
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008c90:	f04f 0200 	mov.w	r2, #0
 8008c94:	4b9e      	ldr	r3, [pc, #632]	; (8008f10 <scaraFlowLSPB1+0x338>)
 8008c96:	f7f7 fcaf 	bl	80005f8 <__aeabi_dmul>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	4610      	mov	r0, r2
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ca6:	f7f7 fca7 	bl	80005f8 <__aeabi_dmul>
 8008caa:	4602      	mov	r2, r0
 8008cac:	460b      	mov	r3, r1
 8008cae:	4610      	mov	r0, r2
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cb6:	f7f7 fc9f 	bl	80005f8 <__aeabi_dmul>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	4629      	mov	r1, r5
 8008cc2:	f7f7 fae3 	bl	800028c <__adddf3>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	460c      	mov	r4, r1
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8008cd0:	e117      	b.n	8008f02 <scaraFlowLSPB1+0x32a>
	// Constant velocity
	} else if (ta <= time && time <= td) {
 8008cd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cd6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008cda:	f7f7 ff09 	bl	8000af0 <__aeabi_dcmple>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d056      	beq.n	8008d92 <scaraFlowLSPB1+0x1ba>
 8008ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ce8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cec:	f7f7 ff00 	bl	8000af0 <__aeabi_dcmple>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d04d      	beq.n	8008d92 <scaraFlowLSPB1+0x1ba>
		lspb->a_current		=	0;
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	f04f 0300 	mov.w	r3, #0
 8008cfc:	f04f 0400 	mov.w	r4, #0
 8008d00:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta*0.5 + lspb->v_design*(time - ta*0.5);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008d1c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008d20:	f7f7 fc6a 	bl	80005f8 <__aeabi_dmul>
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
 8008d28:	4610      	mov	r0, r2
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	f04f 0200 	mov.w	r2, #0
 8008d30:	4b77      	ldr	r3, [pc, #476]	; (8008f10 <scaraFlowLSPB1+0x338>)
 8008d32:	f7f7 fc61 	bl	80005f8 <__aeabi_dmul>
 8008d36:	4602      	mov	r2, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	4629      	mov	r1, r5
 8008d3e:	f7f7 faa5 	bl	800028c <__adddf3>
 8008d42:	4603      	mov	r3, r0
 8008d44:	460c      	mov	r4, r1
 8008d46:	4698      	mov	r8, r3
 8008d48:	46a1      	mov	r9, r4
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8008d50:	f04f 0200 	mov.w	r2, #0
 8008d54:	4b6e      	ldr	r3, [pc, #440]	; (8008f10 <scaraFlowLSPB1+0x338>)
 8008d56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008d5a:	f7f7 fc4d 	bl	80005f8 <__aeabi_dmul>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	460b      	mov	r3, r1
 8008d62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d66:	f7f7 fa8f 	bl	8000288 <__aeabi_dsub>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	4620      	mov	r0, r4
 8008d70:	4629      	mov	r1, r5
 8008d72:	f7f7 fc41 	bl	80005f8 <__aeabi_dmul>
 8008d76:	4603      	mov	r3, r0
 8008d78:	460c      	mov	r4, r1
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	4623      	mov	r3, r4
 8008d7e:	4640      	mov	r0, r8
 8008d80:	4649      	mov	r1, r9
 8008d82:	f7f7 fa83 	bl	800028c <__adddf3>
 8008d86:	4603      	mov	r3, r0
 8008d88:	460c      	mov	r4, r1
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8008d90:	e0b7      	b.n	8008f02 <scaraFlowLSPB1+0x32a>
	// Decelerate
	} else if (td <= time && time <= tf) {
 8008d92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d96:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008d9a:	f7f7 fea9 	bl	8000af0 <__aeabi_dcmple>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f000 809a 	beq.w	8008eda <scaraFlowLSPB1+0x302>
 8008da6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008daa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008dae:	f7f7 fe9f 	bl	8000af0 <__aeabi_dcmple>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f000 8090 	beq.w	8008eda <scaraFlowLSPB1+0x302>
		lspb->a_current		=	-lspb->a_design;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008dc0:	4614      	mov	r4, r2
 8008dc2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v_design + lspb->a_design*(td - time);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 8008dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ddc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008de0:	f7f7 fa52 	bl	8000288 <__aeabi_dsub>
 8008de4:	4602      	mov	r2, r0
 8008de6:	460b      	mov	r3, r1
 8008de8:	4640      	mov	r0, r8
 8008dea:	4649      	mov	r1, r9
 8008dec:	f7f7 fc04 	bl	80005f8 <__aeabi_dmul>
 8008df0:	4602      	mov	r2, r0
 8008df2:	460b      	mov	r3, r1
 8008df4:	4620      	mov	r0, r4
 8008df6:	4629      	mov	r1, r5
 8008df8:	f7f7 fa48 	bl	800028c <__adddf3>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	460c      	mov	r4, r1
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8008e12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e16:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008e1a:	f7f7 fa35 	bl	8000288 <__aeabi_dsub>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	460b      	mov	r3, r1
 8008e22:	4640      	mov	r0, r8
 8008e24:	4649      	mov	r1, r9
 8008e26:	f7f7 fbe7 	bl	80005f8 <__aeabi_dmul>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	4620      	mov	r0, r4
 8008e30:	4629      	mov	r1, r5
 8008e32:	f7f7 fa29 	bl	8000288 <__aeabi_dsub>
 8008e36:	4603      	mov	r3, r0
 8008e38:	460c      	mov	r4, r1
 8008e3a:	461d      	mov	r5, r3
 8008e3c:	4626      	mov	r6, r4
								- (lspb->v_lim - lspb->v0)*(tf - time)*(tf - time)/(2*ta);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	4623      	mov	r3, r4
 8008e4e:	f7f7 fa1b 	bl	8000288 <__aeabi_dsub>
 8008e52:	4603      	mov	r3, r0
 8008e54:	460c      	mov	r4, r1
 8008e56:	4698      	mov	r8, r3
 8008e58:	46a1      	mov	r9, r4
 8008e5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e5e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008e62:	f7f7 fa11 	bl	8000288 <__aeabi_dsub>
 8008e66:	4603      	mov	r3, r0
 8008e68:	460c      	mov	r4, r1
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	4623      	mov	r3, r4
 8008e6e:	4640      	mov	r0, r8
 8008e70:	4649      	mov	r1, r9
 8008e72:	f7f7 fbc1 	bl	80005f8 <__aeabi_dmul>
 8008e76:	4603      	mov	r3, r0
 8008e78:	460c      	mov	r4, r1
 8008e7a:	4698      	mov	r8, r3
 8008e7c:	46a1      	mov	r9, r4
 8008e7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e82:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008e86:	f7f7 f9ff 	bl	8000288 <__aeabi_dsub>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	460c      	mov	r4, r1
 8008e8e:	461a      	mov	r2, r3
 8008e90:	4623      	mov	r3, r4
 8008e92:	4640      	mov	r0, r8
 8008e94:	4649      	mov	r1, r9
 8008e96:	f7f7 fbaf 	bl	80005f8 <__aeabi_dmul>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	460c      	mov	r4, r1
 8008e9e:	4698      	mov	r8, r3
 8008ea0:	46a1      	mov	r9, r4
 8008ea2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	f7f7 f9ef 	bl	800028c <__adddf3>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	460c      	mov	r4, r1
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	4623      	mov	r3, r4
 8008eb6:	4640      	mov	r0, r8
 8008eb8:	4649      	mov	r1, r9
 8008eba:	f7f7 fcc7 	bl	800084c <__aeabi_ddiv>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	460c      	mov	r4, r1
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	4623      	mov	r3, r4
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	4631      	mov	r1, r6
 8008eca:	f7f7 f9dd 	bl	8000288 <__aeabi_dsub>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	460c      	mov	r4, r1
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8008ed8:	e013      	b.n	8008f02 <scaraFlowLSPB1+0x32a>
	} else {
		lspb->a_current 	=	0;
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	f04f 0300 	mov.w	r3, #0
 8008ee0:	f04f 0400 	mov.w	r4, #0
 8008ee4:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	0;
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	f04f 0300 	mov.w	r3, #0
 8008eee:	f04f 0400 	mov.w	r4, #0
 8008ef2:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8008efc:	68fa      	ldr	r2, [r7, #12]
 8008efe:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	372c      	adds	r7, #44	; 0x2c
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f0e:	bf00      	nop
 8008f10:	3fe00000 	.word	0x3fe00000

08008f14 <scaraFlowLSPB>:
/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFlowLSPB		(Trajectory_LSPB_TypeDef *lspb, double time) {
 8008f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f18:	b08b      	sub	sp, #44	; 0x2c
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	60f8      	str	r0, [r7, #12]
 8008f1e:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008f28:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008f32:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8008f3c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8008f40:	f04f 0200 	mov.w	r2, #0
 8008f44:	f04f 0300 	mov.w	r3, #0
 8008f48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f4c:	f7f7 fdda 	bl	8000b04 <__aeabi_dcmpge>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d05b      	beq.n	800900e <scaraFlowLSPB+0xfa>
 8008f56:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008f5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f5e:	f7f7 fdc7 	bl	8000af0 <__aeabi_dcmple>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d052      	beq.n	800900e <scaraFlowLSPB+0xfa>
		lspb->a_current		=	lspb->a_design;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f84:	f7f7 fb38 	bl	80005f8 <__aeabi_dmul>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	4629      	mov	r1, r5
 8008f90:	f7f7 f97c 	bl	800028c <__adddf3>
 8008f94:	4603      	mov	r3, r0
 8008f96:	460c      	mov	r4, r1
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008faa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fae:	f7f7 fb23 	bl	80005f8 <__aeabi_dmul>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	4629      	mov	r1, r5
 8008fba:	f7f7 f967 	bl	800028c <__adddf3>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	460c      	mov	r4, r1
 8008fc2:	4625      	mov	r5, r4
 8008fc4:	461c      	mov	r4, r3
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008fcc:	f04f 0200 	mov.w	r2, #0
 8008fd0:	4ba5      	ldr	r3, [pc, #660]	; (8009268 <scaraFlowLSPB+0x354>)
 8008fd2:	f7f7 fb11 	bl	80005f8 <__aeabi_dmul>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	4610      	mov	r0, r2
 8008fdc:	4619      	mov	r1, r3
 8008fde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fe2:	f7f7 fb09 	bl	80005f8 <__aeabi_dmul>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	460b      	mov	r3, r1
 8008fea:	4610      	mov	r0, r2
 8008fec:	4619      	mov	r1, r3
 8008fee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ff2:	f7f7 fb01 	bl	80005f8 <__aeabi_dmul>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	4629      	mov	r1, r5
 8008ffe:	f7f7 f945 	bl	800028c <__adddf3>
 8009002:	4603      	mov	r3, r0
 8009004:	460c      	mov	r4, r1
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 800900c:	e125      	b.n	800925a <scaraFlowLSPB+0x346>
	// Constant velocity
	} else if (ta <= time && time <= (tf - td)) {
 800900e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009012:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009016:	f7f7 fd6b 	bl	8000af0 <__aeabi_dcmple>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d05e      	beq.n	80090de <scaraFlowLSPB+0x1ca>
 8009020:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009024:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009028:	f7f7 f92e 	bl	8000288 <__aeabi_dsub>
 800902c:	4602      	mov	r2, r0
 800902e:	460b      	mov	r3, r1
 8009030:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009034:	f7f7 fd5c 	bl	8000af0 <__aeabi_dcmple>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d04f      	beq.n	80090de <scaraFlowLSPB+0x1ca>
		lspb->a_current		=	0;
 800903e:	68fa      	ldr	r2, [r7, #12]
 8009040:	f04f 0300 	mov.w	r3, #0
 8009044:	f04f 0400 	mov.w	r4, #0
 8009048:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta/2 + lspb->v_lim*(time - ta/2);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8009064:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009068:	f7f7 fac6 	bl	80005f8 <__aeabi_dmul>
 800906c:	4602      	mov	r2, r0
 800906e:	460b      	mov	r3, r1
 8009070:	4610      	mov	r0, r2
 8009072:	4619      	mov	r1, r3
 8009074:	f04f 0200 	mov.w	r2, #0
 8009078:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800907c:	f7f7 fbe6 	bl	800084c <__aeabi_ddiv>
 8009080:	4602      	mov	r2, r0
 8009082:	460b      	mov	r3, r1
 8009084:	4620      	mov	r0, r4
 8009086:	4629      	mov	r1, r5
 8009088:	f7f7 f900 	bl	800028c <__adddf3>
 800908c:	4603      	mov	r3, r0
 800908e:	460c      	mov	r4, r1
 8009090:	4698      	mov	r8, r3
 8009092:	46a1      	mov	r9, r4
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800909a:	f04f 0200 	mov.w	r2, #0
 800909e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80090a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80090a6:	f7f7 fbd1 	bl	800084c <__aeabi_ddiv>
 80090aa:	4602      	mov	r2, r0
 80090ac:	460b      	mov	r3, r1
 80090ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090b2:	f7f7 f8e9 	bl	8000288 <__aeabi_dsub>
 80090b6:	4602      	mov	r2, r0
 80090b8:	460b      	mov	r3, r1
 80090ba:	4620      	mov	r0, r4
 80090bc:	4629      	mov	r1, r5
 80090be:	f7f7 fa9b 	bl	80005f8 <__aeabi_dmul>
 80090c2:	4603      	mov	r3, r0
 80090c4:	460c      	mov	r4, r1
 80090c6:	461a      	mov	r2, r3
 80090c8:	4623      	mov	r3, r4
 80090ca:	4640      	mov	r0, r8
 80090cc:	4649      	mov	r1, r9
 80090ce:	f7f7 f8dd 	bl	800028c <__adddf3>
 80090d2:	4603      	mov	r3, r0
 80090d4:	460c      	mov	r4, r1
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 80090dc:	e0bd      	b.n	800925a <scaraFlowLSPB+0x346>
	// Decelerate
	} else if ((tf - td) <= time && time <= tf) {
 80090de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80090e6:	f7f7 f8cf 	bl	8000288 <__aeabi_dsub>
 80090ea:	4602      	mov	r2, r0
 80090ec:	460b      	mov	r3, r1
 80090ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090f2:	f7f7 fd07 	bl	8000b04 <__aeabi_dcmpge>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f000 809a 	beq.w	8009232 <scaraFlowLSPB+0x31e>
 80090fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009102:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009106:	f7f7 fcf3 	bl	8000af0 <__aeabi_dcmple>
 800910a:	4603      	mov	r3, r0
 800910c:	2b00      	cmp	r3, #0
 800910e:	f000 8090 	beq.w	8009232 <scaraFlowLSPB+0x31e>
		lspb->a_current		=	-lspb->a_design;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8009118:	4614      	mov	r4, r2
 800911a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v1 + lspb->a_design*(tf - time);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 8009130:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009134:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009138:	f7f7 f8a6 	bl	8000288 <__aeabi_dsub>
 800913c:	4602      	mov	r2, r0
 800913e:	460b      	mov	r3, r1
 8009140:	4640      	mov	r0, r8
 8009142:	4649      	mov	r1, r9
 8009144:	f7f7 fa58 	bl	80005f8 <__aeabi_dmul>
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	4620      	mov	r0, r4
 800914e:	4629      	mov	r1, r5
 8009150:	f7f7 f89c 	bl	800028c <__adddf3>
 8009154:	4603      	mov	r3, r0
 8009156:	460c      	mov	r4, r1
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 800916a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800916e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009172:	f7f7 f889 	bl	8000288 <__aeabi_dsub>
 8009176:	4602      	mov	r2, r0
 8009178:	460b      	mov	r3, r1
 800917a:	4640      	mov	r0, r8
 800917c:	4649      	mov	r1, r9
 800917e:	f7f7 fa3b 	bl	80005f8 <__aeabi_dmul>
 8009182:	4602      	mov	r2, r0
 8009184:	460b      	mov	r3, r1
 8009186:	4620      	mov	r0, r4
 8009188:	4629      	mov	r1, r5
 800918a:	f7f7 f87d 	bl	8000288 <__aeabi_dsub>
 800918e:	4603      	mov	r3, r0
 8009190:	460c      	mov	r4, r1
 8009192:	461d      	mov	r5, r3
 8009194:	4626      	mov	r6, r4
								- (lspb->v_lim - lspb->v1)*(tf - time)*(tf - time)/(2*td);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80091a2:	461a      	mov	r2, r3
 80091a4:	4623      	mov	r3, r4
 80091a6:	f7f7 f86f 	bl	8000288 <__aeabi_dsub>
 80091aa:	4603      	mov	r3, r0
 80091ac:	460c      	mov	r4, r1
 80091ae:	4698      	mov	r8, r3
 80091b0:	46a1      	mov	r9, r4
 80091b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091b6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80091ba:	f7f7 f865 	bl	8000288 <__aeabi_dsub>
 80091be:	4603      	mov	r3, r0
 80091c0:	460c      	mov	r4, r1
 80091c2:	461a      	mov	r2, r3
 80091c4:	4623      	mov	r3, r4
 80091c6:	4640      	mov	r0, r8
 80091c8:	4649      	mov	r1, r9
 80091ca:	f7f7 fa15 	bl	80005f8 <__aeabi_dmul>
 80091ce:	4603      	mov	r3, r0
 80091d0:	460c      	mov	r4, r1
 80091d2:	4698      	mov	r8, r3
 80091d4:	46a1      	mov	r9, r4
 80091d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091da:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80091de:	f7f7 f853 	bl	8000288 <__aeabi_dsub>
 80091e2:	4603      	mov	r3, r0
 80091e4:	460c      	mov	r4, r1
 80091e6:	461a      	mov	r2, r3
 80091e8:	4623      	mov	r3, r4
 80091ea:	4640      	mov	r0, r8
 80091ec:	4649      	mov	r1, r9
 80091ee:	f7f7 fa03 	bl	80005f8 <__aeabi_dmul>
 80091f2:	4603      	mov	r3, r0
 80091f4:	460c      	mov	r4, r1
 80091f6:	4698      	mov	r8, r3
 80091f8:	46a1      	mov	r9, r4
 80091fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80091fe:	4602      	mov	r2, r0
 8009200:	460b      	mov	r3, r1
 8009202:	f7f7 f843 	bl	800028c <__adddf3>
 8009206:	4603      	mov	r3, r0
 8009208:	460c      	mov	r4, r1
 800920a:	461a      	mov	r2, r3
 800920c:	4623      	mov	r3, r4
 800920e:	4640      	mov	r0, r8
 8009210:	4649      	mov	r1, r9
 8009212:	f7f7 fb1b 	bl	800084c <__aeabi_ddiv>
 8009216:	4603      	mov	r3, r0
 8009218:	460c      	mov	r4, r1
 800921a:	461a      	mov	r2, r3
 800921c:	4623      	mov	r3, r4
 800921e:	4628      	mov	r0, r5
 8009220:	4631      	mov	r1, r6
 8009222:	f7f7 f831 	bl	8000288 <__aeabi_dsub>
 8009226:	4603      	mov	r3, r0
 8009228:	460c      	mov	r4, r1
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8009230:	e013      	b.n	800925a <scaraFlowLSPB+0x346>
	} else {
		lspb->a_current 	=	0;
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	f04f 0300 	mov.w	r3, #0
 8009238:	f04f 0400 	mov.w	r4, #0
 800923c:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	0;
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	f04f 0300 	mov.w	r3, #0
 8009246:	f04f 0400 	mov.w	r4, #0
 800924a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8009254:	68fa      	ldr	r2, [r7, #12]
 8009256:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 800925a:	2300      	movs	r3, #0
}
 800925c:	4618      	mov	r0, r3
 800925e:	372c      	adds	r7, #44	; 0x2c
 8009260:	46bd      	mov	sp, r7
 8009262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009266:	bf00      	nop
 8009268:	3fe00000 	.word	0x3fe00000

0800926c <scaraFLowScurve>:


/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFLowScurve		(Trajectory_Scurve_TypeDef *scurve, double time) {
 800926c:	b5b0      	push	{r4, r5, r7, lr}
 800926e:	b092      	sub	sp, #72	; 0x48
 8009270:	af00      	add	r7, sp, #0
 8009272:	6278      	str	r0, [r7, #36]	; 0x24
 8009274:	ed87 0b06 	vstr	d0, [r7, #24]
	double j_max, tm, tc, t;

	j_max = scurve->j_max;
 8009278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800927e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	tm	  = scurve->Tm;
 8009282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009284:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8009288:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	tc	  = scurve->Tc;
 800928c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8009292:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	 // SCURVE 4 PHASE: tc = 0;
	 if ( 4 == scurve->num_of_phase) {
 8009296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009298:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800929c:	2b04      	cmp	r3, #4
 800929e:	f040 8321 	bne.w	80098e4 <scaraFLowScurve+0x678>
		 // Phase 1
		 if ( (0.0f <= time) && ( time < tm)) {
 80092a2:	f04f 0200 	mov.w	r2, #0
 80092a6:	f04f 0300 	mov.w	r3, #0
 80092aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80092ae:	f7f7 fc29 	bl	8000b04 <__aeabi_dcmpge>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d059      	beq.n	800936c <scaraFLowScurve+0x100>
 80092b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80092bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80092c0:	f7f7 fc0c 	bl	8000adc <__aeabi_dcmplt>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d050      	beq.n	800936c <scaraFLowScurve+0x100>
			 t = time;
 80092ca:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80092ce:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 80092d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80092d6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80092da:	f7f7 f98d 	bl	80005f8 <__aeabi_dmul>
 80092de:	4603      	mov	r3, r0
 80092e0:	460c      	mov	r4, r1
 80092e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092e4:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 80092e8:	f04f 0200 	mov.w	r2, #0
 80092ec:	4b93      	ldr	r3, [pc, #588]	; (800953c <scaraFLowScurve+0x2d0>)
 80092ee:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80092f2:	f7f7 f981 	bl	80005f8 <__aeabi_dmul>
 80092f6:	4603      	mov	r3, r0
 80092f8:	460c      	mov	r4, r1
 80092fa:	4618      	mov	r0, r3
 80092fc:	4621      	mov	r1, r4
 80092fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009302:	f7f7 f979 	bl	80005f8 <__aeabi_dmul>
 8009306:	4603      	mov	r3, r0
 8009308:	460c      	mov	r4, r1
 800930a:	4618      	mov	r0, r3
 800930c:	4621      	mov	r1, r4
 800930e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009312:	f7f7 f971 	bl	80005f8 <__aeabi_dmul>
 8009316:	4603      	mov	r3, r0
 8009318:	460c      	mov	r4, r1
 800931a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800931c:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 8009320:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009324:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009328:	f7f7 f966 	bl	80005f8 <__aeabi_dmul>
 800932c:	4603      	mov	r3, r0
 800932e:	460c      	mov	r4, r1
 8009330:	4618      	mov	r0, r3
 8009332:	4621      	mov	r1, r4
 8009334:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009338:	f7f7 f95e 	bl	80005f8 <__aeabi_dmul>
 800933c:	4603      	mov	r3, r0
 800933e:	460c      	mov	r4, r1
 8009340:	4618      	mov	r0, r3
 8009342:	4621      	mov	r1, r4
 8009344:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009348:	f7f7 f956 	bl	80005f8 <__aeabi_dmul>
 800934c:	4603      	mov	r3, r0
 800934e:	460c      	mov	r4, r1
 8009350:	4618      	mov	r0, r3
 8009352:	4621      	mov	r1, r4
 8009354:	f04f 0200 	mov.w	r2, #0
 8009358:	4b79      	ldr	r3, [pc, #484]	; (8009540 <scaraFLowScurve+0x2d4>)
 800935a:	f7f7 fa77 	bl	800084c <__aeabi_ddiv>
 800935e:	4603      	mov	r3, r0
 8009360:	460c      	mov	r4, r1
 8009362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009364:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009368:	f000 be56 	b.w	800a018 <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 800936c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009370:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009374:	f7f7 fbbc 	bl	8000af0 <__aeabi_dcmple>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	f000 80e2 	beq.w	8009544 <scaraFLowScurve+0x2d8>
 8009380:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009384:	4602      	mov	r2, r0
 8009386:	460b      	mov	r3, r1
 8009388:	f7f6 ff80 	bl	800028c <__adddf3>
 800938c:	4603      	mov	r3, r0
 800938e:	460c      	mov	r4, r1
 8009390:	461a      	mov	r2, r3
 8009392:	4623      	mov	r3, r4
 8009394:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009398:	f7f7 fba0 	bl	8000adc <__aeabi_dcmplt>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f000 80d0 	beq.w	8009544 <scaraFLowScurve+0x2d8>
			 t = time - tm;
 80093a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80093a8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80093ac:	f7f6 ff6c 	bl	8000288 <__aeabi_dsub>
 80093b0:	4603      	mov	r3, r0
 80093b2:	460c      	mov	r4, r1
 80093b4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 80093b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80093bc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80093c0:	f7f7 f91a 	bl	80005f8 <__aeabi_dmul>
 80093c4:	4603      	mov	r3, r0
 80093c6:	460c      	mov	r4, r1
 80093c8:	4625      	mov	r5, r4
 80093ca:	461c      	mov	r4, r3
 80093cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093d0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80093d4:	f7f7 f910 	bl	80005f8 <__aeabi_dmul>
 80093d8:	4602      	mov	r2, r0
 80093da:	460b      	mov	r3, r1
 80093dc:	4620      	mov	r0, r4
 80093de:	4629      	mov	r1, r5
 80093e0:	f7f6 ff52 	bl	8000288 <__aeabi_dsub>
 80093e4:	4603      	mov	r3, r0
 80093e6:	460c      	mov	r4, r1
 80093e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093ea:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 80093ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f0:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 80093f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80093f8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80093fc:	f7f7 f8fc 	bl	80005f8 <__aeabi_dmul>
 8009400:	4602      	mov	r2, r0
 8009402:	460b      	mov	r3, r1
 8009404:	4610      	mov	r0, r2
 8009406:	4619      	mov	r1, r3
 8009408:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800940c:	f7f7 f8f4 	bl	80005f8 <__aeabi_dmul>
 8009410:	4602      	mov	r2, r0
 8009412:	460b      	mov	r3, r1
 8009414:	4620      	mov	r0, r4
 8009416:	4629      	mov	r1, r5
 8009418:	f7f6 ff38 	bl	800028c <__adddf3>
 800941c:	4603      	mov	r3, r0
 800941e:	460c      	mov	r4, r1
 8009420:	4625      	mov	r5, r4
 8009422:	461c      	mov	r4, r3
 8009424:	f04f 0200 	mov.w	r2, #0
 8009428:	4b44      	ldr	r3, [pc, #272]	; (800953c <scaraFLowScurve+0x2d0>)
 800942a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800942e:	f7f7 f8e3 	bl	80005f8 <__aeabi_dmul>
 8009432:	4602      	mov	r2, r0
 8009434:	460b      	mov	r3, r1
 8009436:	4610      	mov	r0, r2
 8009438:	4619      	mov	r1, r3
 800943a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800943e:	f7f7 f8db 	bl	80005f8 <__aeabi_dmul>
 8009442:	4602      	mov	r2, r0
 8009444:	460b      	mov	r3, r1
 8009446:	4610      	mov	r0, r2
 8009448:	4619      	mov	r1, r3
 800944a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800944e:	f7f7 f8d3 	bl	80005f8 <__aeabi_dmul>
 8009452:	4602      	mov	r2, r0
 8009454:	460b      	mov	r3, r1
 8009456:	4620      	mov	r0, r4
 8009458:	4629      	mov	r1, r5
 800945a:	f7f6 ff15 	bl	8000288 <__aeabi_dsub>
 800945e:	4603      	mov	r3, r0
 8009460:	460c      	mov	r4, r1
 8009462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009464:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8009468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946a:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 800946e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009470:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8009474:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009478:	f7f7 f8be 	bl	80005f8 <__aeabi_dmul>
 800947c:	4602      	mov	r2, r0
 800947e:	460b      	mov	r3, r1
 8009480:	4620      	mov	r0, r4
 8009482:	4629      	mov	r1, r5
 8009484:	f7f6 ff02 	bl	800028c <__adddf3>
 8009488:	4603      	mov	r3, r0
 800948a:	460c      	mov	r4, r1
 800948c:	4625      	mov	r5, r4
 800948e:	461c      	mov	r4, r3
 8009490:	f04f 0200 	mov.w	r2, #0
 8009494:	4b29      	ldr	r3, [pc, #164]	; (800953c <scaraFLowScurve+0x2d0>)
 8009496:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800949a:	f7f7 f8ad 	bl	80005f8 <__aeabi_dmul>
 800949e:	4602      	mov	r2, r0
 80094a0:	460b      	mov	r3, r1
 80094a2:	4610      	mov	r0, r2
 80094a4:	4619      	mov	r1, r3
 80094a6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80094aa:	f7f7 f8a5 	bl	80005f8 <__aeabi_dmul>
 80094ae:	4602      	mov	r2, r0
 80094b0:	460b      	mov	r3, r1
 80094b2:	4610      	mov	r0, r2
 80094b4:	4619      	mov	r1, r3
 80094b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094ba:	f7f7 f89d 	bl	80005f8 <__aeabi_dmul>
 80094be:	4602      	mov	r2, r0
 80094c0:	460b      	mov	r3, r1
 80094c2:	4610      	mov	r0, r2
 80094c4:	4619      	mov	r1, r3
 80094c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094ca:	f7f7 f895 	bl	80005f8 <__aeabi_dmul>
 80094ce:	4602      	mov	r2, r0
 80094d0:	460b      	mov	r3, r1
 80094d2:	4620      	mov	r0, r4
 80094d4:	4629      	mov	r1, r5
 80094d6:	f7f6 fed9 	bl	800028c <__adddf3>
 80094da:	4603      	mov	r3, r0
 80094dc:	460c      	mov	r4, r1
 80094de:	4625      	mov	r5, r4
 80094e0:	461c      	mov	r4, r3
 80094e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094e6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80094ea:	f7f7 f885 	bl	80005f8 <__aeabi_dmul>
 80094ee:	4602      	mov	r2, r0
 80094f0:	460b      	mov	r3, r1
 80094f2:	4610      	mov	r0, r2
 80094f4:	4619      	mov	r1, r3
 80094f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094fa:	f7f7 f87d 	bl	80005f8 <__aeabi_dmul>
 80094fe:	4602      	mov	r2, r0
 8009500:	460b      	mov	r3, r1
 8009502:	4610      	mov	r0, r2
 8009504:	4619      	mov	r1, r3
 8009506:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800950a:	f7f7 f875 	bl	80005f8 <__aeabi_dmul>
 800950e:	4602      	mov	r2, r0
 8009510:	460b      	mov	r3, r1
 8009512:	4610      	mov	r0, r2
 8009514:	4619      	mov	r1, r3
 8009516:	f04f 0200 	mov.w	r2, #0
 800951a:	4b09      	ldr	r3, [pc, #36]	; (8009540 <scaraFLowScurve+0x2d4>)
 800951c:	f7f7 f996 	bl	800084c <__aeabi_ddiv>
 8009520:	4602      	mov	r2, r0
 8009522:	460b      	mov	r3, r1
 8009524:	4620      	mov	r0, r4
 8009526:	4629      	mov	r1, r5
 8009528:	f7f6 feae 	bl	8000288 <__aeabi_dsub>
 800952c:	4603      	mov	r3, r0
 800952e:	460c      	mov	r4, r1
 8009530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009532:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009536:	f000 bd6f 	b.w	800a018 <scaraFLowScurve+0xdac>
 800953a:	bf00      	nop
 800953c:	3fe00000 	.word	0x3fe00000
 8009540:	40180000 	.word	0x40180000
		 // Phase 3: does not exist
		 // Phase 4
		 } else if ( ((2*tm) <= time) && ( time < (3*tm)) ) {
 8009544:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009548:	4602      	mov	r2, r0
 800954a:	460b      	mov	r3, r1
 800954c:	f7f6 fe9e 	bl	800028c <__adddf3>
 8009550:	4603      	mov	r3, r0
 8009552:	460c      	mov	r4, r1
 8009554:	461a      	mov	r2, r3
 8009556:	4623      	mov	r3, r4
 8009558:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800955c:	f7f7 fad2 	bl	8000b04 <__aeabi_dcmpge>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	f000 80a2 	beq.w	80096ac <scaraFLowScurve+0x440>
 8009568:	f04f 0200 	mov.w	r2, #0
 800956c:	4b4c      	ldr	r3, [pc, #304]	; (80096a0 <scaraFLowScurve+0x434>)
 800956e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009572:	f7f7 f841 	bl	80005f8 <__aeabi_dmul>
 8009576:	4603      	mov	r3, r0
 8009578:	460c      	mov	r4, r1
 800957a:	461a      	mov	r2, r3
 800957c:	4623      	mov	r3, r4
 800957e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009582:	f7f7 faab 	bl	8000adc <__aeabi_dcmplt>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	f000 808f 	beq.w	80096ac <scaraFLowScurve+0x440>
			 t = time - 2*tm;
 800958e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009592:	4602      	mov	r2, r0
 8009594:	460b      	mov	r3, r1
 8009596:	f7f6 fe79 	bl	800028c <__adddf3>
 800959a:	4603      	mov	r3, r0
 800959c:	460c      	mov	r4, r1
 800959e:	461a      	mov	r2, r3
 80095a0:	4623      	mov	r3, r4
 80095a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80095a6:	f7f6 fe6f 	bl	8000288 <__aeabi_dsub>
 80095aa:	4603      	mov	r3, r0
 80095ac:	460c      	mov	r4, r1
 80095ae:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 80095b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095b4:	613b      	str	r3, [r7, #16]
 80095b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80095bc:	617b      	str	r3, [r7, #20]
 80095be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80095c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80095c6:	f7f7 f817 	bl	80005f8 <__aeabi_dmul>
 80095ca:	4603      	mov	r3, r0
 80095cc:	460c      	mov	r4, r1
 80095ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095d0:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2 - 0.5*j_max*t*t;
 80095d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d6:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 80095da:	f04f 0200 	mov.w	r2, #0
 80095de:	4b31      	ldr	r3, [pc, #196]	; (80096a4 <scaraFLowScurve+0x438>)
 80095e0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80095e4:	f7f7 f808 	bl	80005f8 <__aeabi_dmul>
 80095e8:	4602      	mov	r2, r0
 80095ea:	460b      	mov	r3, r1
 80095ec:	4610      	mov	r0, r2
 80095ee:	4619      	mov	r1, r3
 80095f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80095f4:	f7f7 f800 	bl	80005f8 <__aeabi_dmul>
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	4610      	mov	r0, r2
 80095fe:	4619      	mov	r1, r3
 8009600:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009604:	f7f6 fff8 	bl	80005f8 <__aeabi_dmul>
 8009608:	4602      	mov	r2, r0
 800960a:	460b      	mov	r3, r1
 800960c:	4620      	mov	r0, r4
 800960e:	4629      	mov	r1, r5
 8009610:	f7f6 fe3a 	bl	8000288 <__aeabi_dsub>
 8009614:	4603      	mov	r3, r0
 8009616:	460c      	mov	r4, r1
 8009618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800961a:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t - j_max*t*t*t/6;
 800961e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009620:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8009624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009626:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 800962a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800962e:	f7f6 ffe3 	bl	80005f8 <__aeabi_dmul>
 8009632:	4602      	mov	r2, r0
 8009634:	460b      	mov	r3, r1
 8009636:	4620      	mov	r0, r4
 8009638:	4629      	mov	r1, r5
 800963a:	f7f6 fe27 	bl	800028c <__adddf3>
 800963e:	4603      	mov	r3, r0
 8009640:	460c      	mov	r4, r1
 8009642:	4625      	mov	r5, r4
 8009644:	461c      	mov	r4, r3
 8009646:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800964a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800964e:	f7f6 ffd3 	bl	80005f8 <__aeabi_dmul>
 8009652:	4602      	mov	r2, r0
 8009654:	460b      	mov	r3, r1
 8009656:	4610      	mov	r0, r2
 8009658:	4619      	mov	r1, r3
 800965a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800965e:	f7f6 ffcb 	bl	80005f8 <__aeabi_dmul>
 8009662:	4602      	mov	r2, r0
 8009664:	460b      	mov	r3, r1
 8009666:	4610      	mov	r0, r2
 8009668:	4619      	mov	r1, r3
 800966a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800966e:	f7f6 ffc3 	bl	80005f8 <__aeabi_dmul>
 8009672:	4602      	mov	r2, r0
 8009674:	460b      	mov	r3, r1
 8009676:	4610      	mov	r0, r2
 8009678:	4619      	mov	r1, r3
 800967a:	f04f 0200 	mov.w	r2, #0
 800967e:	4b0a      	ldr	r3, [pc, #40]	; (80096a8 <scaraFLowScurve+0x43c>)
 8009680:	f7f7 f8e4 	bl	800084c <__aeabi_ddiv>
 8009684:	4602      	mov	r2, r0
 8009686:	460b      	mov	r3, r1
 8009688:	4620      	mov	r0, r4
 800968a:	4629      	mov	r1, r5
 800968c:	f7f6 fdfc 	bl	8000288 <__aeabi_dsub>
 8009690:	4603      	mov	r3, r0
 8009692:	460c      	mov	r4, r1
 8009694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009696:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800969a:	f000 bcbd 	b.w	800a018 <scaraFLowScurve+0xdac>
 800969e:	bf00      	nop
 80096a0:	40080000 	.word	0x40080000
 80096a4:	3fe00000 	.word	0x3fe00000
 80096a8:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm) <= time) && ( time < (4*tm)) ) {
 80096ac:	f04f 0200 	mov.w	r2, #0
 80096b0:	4b88      	ldr	r3, [pc, #544]	; (80098d4 <scaraFLowScurve+0x668>)
 80096b2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80096b6:	f7f6 ff9f 	bl	80005f8 <__aeabi_dmul>
 80096ba:	4603      	mov	r3, r0
 80096bc:	460c      	mov	r4, r1
 80096be:	461a      	mov	r2, r3
 80096c0:	4623      	mov	r3, r4
 80096c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80096c6:	f7f7 fa1d 	bl	8000b04 <__aeabi_dcmpge>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f000 80ec 	beq.w	80098aa <scaraFLowScurve+0x63e>
 80096d2:	f04f 0200 	mov.w	r2, #0
 80096d6:	4b80      	ldr	r3, [pc, #512]	; (80098d8 <scaraFLowScurve+0x66c>)
 80096d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80096dc:	f7f6 ff8c 	bl	80005f8 <__aeabi_dmul>
 80096e0:	4603      	mov	r3, r0
 80096e2:	460c      	mov	r4, r1
 80096e4:	461a      	mov	r2, r3
 80096e6:	4623      	mov	r3, r4
 80096e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80096ec:	f7f7 f9f6 	bl	8000adc <__aeabi_dcmplt>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f000 80d9 	beq.w	80098aa <scaraFLowScurve+0x63e>
			 t = time - 3*tm;
 80096f8:	f04f 0200 	mov.w	r2, #0
 80096fc:	4b75      	ldr	r3, [pc, #468]	; (80098d4 <scaraFLowScurve+0x668>)
 80096fe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009702:	f7f6 ff79 	bl	80005f8 <__aeabi_dmul>
 8009706:	4603      	mov	r3, r0
 8009708:	460c      	mov	r4, r1
 800970a:	461a      	mov	r2, r3
 800970c:	4623      	mov	r3, r4
 800970e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009712:	f7f6 fdb9 	bl	8000288 <__aeabi_dsub>
 8009716:	4603      	mov	r3, r0
 8009718:	460c      	mov	r4, r1
 800971a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 800971e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009720:	60bb      	str	r3, [r7, #8]
 8009722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009724:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009728:	60fb      	str	r3, [r7, #12]
 800972a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800972e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009732:	f7f6 ff61 	bl	80005f8 <__aeabi_dmul>
 8009736:	4603      	mov	r3, r0
 8009738:	460c      	mov	r4, r1
 800973a:	4625      	mov	r5, r4
 800973c:	461c      	mov	r4, r3
 800973e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009742:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009746:	f7f6 ff57 	bl	80005f8 <__aeabi_dmul>
 800974a:	4602      	mov	r2, r0
 800974c:	460b      	mov	r3, r1
 800974e:	4620      	mov	r0, r4
 8009750:	4629      	mov	r1, r5
 8009752:	f7f6 fd9b 	bl	800028c <__adddf3>
 8009756:	4603      	mov	r3, r0
 8009758:	460c      	mov	r4, r1
 800975a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800975c:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 8009760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009762:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 8009766:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800976a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800976e:	f7f6 ff43 	bl	80005f8 <__aeabi_dmul>
 8009772:	4602      	mov	r2, r0
 8009774:	460b      	mov	r3, r1
 8009776:	4610      	mov	r0, r2
 8009778:	4619      	mov	r1, r3
 800977a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800977e:	f7f6 ff3b 	bl	80005f8 <__aeabi_dmul>
 8009782:	4602      	mov	r2, r0
 8009784:	460b      	mov	r3, r1
 8009786:	4620      	mov	r0, r4
 8009788:	4629      	mov	r1, r5
 800978a:	f7f6 fd7d 	bl	8000288 <__aeabi_dsub>
 800978e:	4603      	mov	r3, r0
 8009790:	460c      	mov	r4, r1
 8009792:	4625      	mov	r5, r4
 8009794:	461c      	mov	r4, r3
 8009796:	f04f 0200 	mov.w	r2, #0
 800979a:	4b50      	ldr	r3, [pc, #320]	; (80098dc <scaraFLowScurve+0x670>)
 800979c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80097a0:	f7f6 ff2a 	bl	80005f8 <__aeabi_dmul>
 80097a4:	4602      	mov	r2, r0
 80097a6:	460b      	mov	r3, r1
 80097a8:	4610      	mov	r0, r2
 80097aa:	4619      	mov	r1, r3
 80097ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097b0:	f7f6 ff22 	bl	80005f8 <__aeabi_dmul>
 80097b4:	4602      	mov	r2, r0
 80097b6:	460b      	mov	r3, r1
 80097b8:	4610      	mov	r0, r2
 80097ba:	4619      	mov	r1, r3
 80097bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097c0:	f7f6 ff1a 	bl	80005f8 <__aeabi_dmul>
 80097c4:	4602      	mov	r2, r0
 80097c6:	460b      	mov	r3, r1
 80097c8:	4620      	mov	r0, r4
 80097ca:	4629      	mov	r1, r5
 80097cc:	f7f6 fd5e 	bl	800028c <__adddf3>
 80097d0:	4603      	mov	r3, r0
 80097d2:	460c      	mov	r4, r1
 80097d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097d6:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 80097da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097dc:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 80097e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e2:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 80097e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097ea:	f7f6 ff05 	bl	80005f8 <__aeabi_dmul>
 80097ee:	4602      	mov	r2, r0
 80097f0:	460b      	mov	r3, r1
 80097f2:	4620      	mov	r0, r4
 80097f4:	4629      	mov	r1, r5
 80097f6:	f7f6 fd49 	bl	800028c <__adddf3>
 80097fa:	4603      	mov	r3, r0
 80097fc:	460c      	mov	r4, r1
 80097fe:	4625      	mov	r5, r4
 8009800:	461c      	mov	r4, r3
									- 0.5*j_max*tm*t*t
 8009802:	f04f 0200 	mov.w	r2, #0
 8009806:	4b35      	ldr	r3, [pc, #212]	; (80098dc <scaraFLowScurve+0x670>)
 8009808:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800980c:	f7f6 fef4 	bl	80005f8 <__aeabi_dmul>
 8009810:	4602      	mov	r2, r0
 8009812:	460b      	mov	r3, r1
 8009814:	4610      	mov	r0, r2
 8009816:	4619      	mov	r1, r3
 8009818:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800981c:	f7f6 feec 	bl	80005f8 <__aeabi_dmul>
 8009820:	4602      	mov	r2, r0
 8009822:	460b      	mov	r3, r1
 8009824:	4610      	mov	r0, r2
 8009826:	4619      	mov	r1, r3
 8009828:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800982c:	f7f6 fee4 	bl	80005f8 <__aeabi_dmul>
 8009830:	4602      	mov	r2, r0
 8009832:	460b      	mov	r3, r1
 8009834:	4610      	mov	r0, r2
 8009836:	4619      	mov	r1, r3
 8009838:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800983c:	f7f6 fedc 	bl	80005f8 <__aeabi_dmul>
 8009840:	4602      	mov	r2, r0
 8009842:	460b      	mov	r3, r1
 8009844:	4620      	mov	r0, r4
 8009846:	4629      	mov	r1, r5
 8009848:	f7f6 fd1e 	bl	8000288 <__aeabi_dsub>
 800984c:	4603      	mov	r3, r0
 800984e:	460c      	mov	r4, r1
 8009850:	4625      	mov	r5, r4
 8009852:	461c      	mov	r4, r3
									+ j_max*t*t*t/6;
 8009854:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009858:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800985c:	f7f6 fecc 	bl	80005f8 <__aeabi_dmul>
 8009860:	4602      	mov	r2, r0
 8009862:	460b      	mov	r3, r1
 8009864:	4610      	mov	r0, r2
 8009866:	4619      	mov	r1, r3
 8009868:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800986c:	f7f6 fec4 	bl	80005f8 <__aeabi_dmul>
 8009870:	4602      	mov	r2, r0
 8009872:	460b      	mov	r3, r1
 8009874:	4610      	mov	r0, r2
 8009876:	4619      	mov	r1, r3
 8009878:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800987c:	f7f6 febc 	bl	80005f8 <__aeabi_dmul>
 8009880:	4602      	mov	r2, r0
 8009882:	460b      	mov	r3, r1
 8009884:	4610      	mov	r0, r2
 8009886:	4619      	mov	r1, r3
 8009888:	f04f 0200 	mov.w	r2, #0
 800988c:	4b14      	ldr	r3, [pc, #80]	; (80098e0 <scaraFLowScurve+0x674>)
 800988e:	f7f6 ffdd 	bl	800084c <__aeabi_ddiv>
 8009892:	4602      	mov	r2, r0
 8009894:	460b      	mov	r3, r1
 8009896:	4620      	mov	r0, r4
 8009898:	4629      	mov	r1, r5
 800989a:	f7f6 fcf7 	bl	800028c <__adddf3>
 800989e:	4603      	mov	r3, r0
 80098a0:	460c      	mov	r4, r1
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 80098a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098a4:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80098a8:	e3b6      	b.n	800a018 <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 80098aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ac:	f04f 0300 	mov.w	r3, #0
 80098b0:	f04f 0400 	mov.w	r4, #0
 80098b4:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 80098b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ba:	f04f 0300 	mov.w	r3, #0
 80098be:	f04f 0400 	mov.w	r4, #0
 80098c2:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 80098c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c8:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80098cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ce:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80098d2:	e3a1      	b.n	800a018 <scaraFLowScurve+0xdac>
 80098d4:	40080000 	.word	0x40080000
 80098d8:	40100000 	.word	0x40100000
 80098dc:	3fe00000 	.word	0x3fe00000
 80098e0:	40180000 	.word	0x40180000
		 }

	 // SCURVE 5 PHASE: tc > 0
	 } else if ( 5 == scurve->num_of_phase) {
 80098e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098ea:	2b05      	cmp	r3, #5
 80098ec:	f040 8392 	bne.w	800a014 <scaraFLowScurve+0xda8>
		 // Phase 1
		 if ( (0 <= time) && ( time < tm)) {
 80098f0:	f04f 0200 	mov.w	r2, #0
 80098f4:	f04f 0300 	mov.w	r3, #0
 80098f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80098fc:	f7f7 f902 	bl	8000b04 <__aeabi_dcmpge>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d058      	beq.n	80099b8 <scaraFLowScurve+0x74c>
 8009906:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800990a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800990e:	f7f7 f8e5 	bl	8000adc <__aeabi_dcmplt>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d04f      	beq.n	80099b8 <scaraFLowScurve+0x74c>
			 t = time;
 8009918:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800991c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 8009920:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009924:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009928:	f7f6 fe66 	bl	80005f8 <__aeabi_dmul>
 800992c:	4603      	mov	r3, r0
 800992e:	460c      	mov	r4, r1
 8009930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009932:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 8009936:	f04f 0200 	mov.w	r2, #0
 800993a:	4b91      	ldr	r3, [pc, #580]	; (8009b80 <scaraFLowScurve+0x914>)
 800993c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009940:	f7f6 fe5a 	bl	80005f8 <__aeabi_dmul>
 8009944:	4603      	mov	r3, r0
 8009946:	460c      	mov	r4, r1
 8009948:	4618      	mov	r0, r3
 800994a:	4621      	mov	r1, r4
 800994c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009950:	f7f6 fe52 	bl	80005f8 <__aeabi_dmul>
 8009954:	4603      	mov	r3, r0
 8009956:	460c      	mov	r4, r1
 8009958:	4618      	mov	r0, r3
 800995a:	4621      	mov	r1, r4
 800995c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009960:	f7f6 fe4a 	bl	80005f8 <__aeabi_dmul>
 8009964:	4603      	mov	r3, r0
 8009966:	460c      	mov	r4, r1
 8009968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800996a:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 800996e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009972:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009976:	f7f6 fe3f 	bl	80005f8 <__aeabi_dmul>
 800997a:	4603      	mov	r3, r0
 800997c:	460c      	mov	r4, r1
 800997e:	4618      	mov	r0, r3
 8009980:	4621      	mov	r1, r4
 8009982:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009986:	f7f6 fe37 	bl	80005f8 <__aeabi_dmul>
 800998a:	4603      	mov	r3, r0
 800998c:	460c      	mov	r4, r1
 800998e:	4618      	mov	r0, r3
 8009990:	4621      	mov	r1, r4
 8009992:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009996:	f7f6 fe2f 	bl	80005f8 <__aeabi_dmul>
 800999a:	4603      	mov	r3, r0
 800999c:	460c      	mov	r4, r1
 800999e:	4618      	mov	r0, r3
 80099a0:	4621      	mov	r1, r4
 80099a2:	f04f 0200 	mov.w	r2, #0
 80099a6:	4b77      	ldr	r3, [pc, #476]	; (8009b84 <scaraFLowScurve+0x918>)
 80099a8:	f7f6 ff50 	bl	800084c <__aeabi_ddiv>
 80099ac:	4603      	mov	r3, r0
 80099ae:	460c      	mov	r4, r1
 80099b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099b2:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80099b6:	e32f      	b.n	800a018 <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 80099b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80099bc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80099c0:	f7f7 f896 	bl	8000af0 <__aeabi_dcmple>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	f000 80de 	beq.w	8009b88 <scaraFLowScurve+0x91c>
 80099cc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80099d0:	4602      	mov	r2, r0
 80099d2:	460b      	mov	r3, r1
 80099d4:	f7f6 fc5a 	bl	800028c <__adddf3>
 80099d8:	4602      	mov	r2, r0
 80099da:	460b      	mov	r3, r1
 80099dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80099e0:	f7f7 f87c 	bl	8000adc <__aeabi_dcmplt>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	f000 80ce 	beq.w	8009b88 <scaraFLowScurve+0x91c>
			 t = time - tm;
 80099ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80099f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80099f4:	f7f6 fc48 	bl	8000288 <__aeabi_dsub>
 80099f8:	4603      	mov	r3, r0
 80099fa:	460c      	mov	r4, r1
 80099fc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 8009a00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009a04:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009a08:	f7f6 fdf6 	bl	80005f8 <__aeabi_dmul>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	460c      	mov	r4, r1
 8009a10:	4625      	mov	r5, r4
 8009a12:	461c      	mov	r4, r3
 8009a14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a18:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009a1c:	f7f6 fdec 	bl	80005f8 <__aeabi_dmul>
 8009a20:	4602      	mov	r2, r0
 8009a22:	460b      	mov	r3, r1
 8009a24:	4620      	mov	r0, r4
 8009a26:	4629      	mov	r1, r5
 8009a28:	f7f6 fc2e 	bl	8000288 <__aeabi_dsub>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	460c      	mov	r4, r1
 8009a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a32:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 8009a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a38:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 8009a3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009a40:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009a44:	f7f6 fdd8 	bl	80005f8 <__aeabi_dmul>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	4610      	mov	r0, r2
 8009a4e:	4619      	mov	r1, r3
 8009a50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a54:	f7f6 fdd0 	bl	80005f8 <__aeabi_dmul>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	4629      	mov	r1, r5
 8009a60:	f7f6 fc14 	bl	800028c <__adddf3>
 8009a64:	4603      	mov	r3, r0
 8009a66:	460c      	mov	r4, r1
 8009a68:	4625      	mov	r5, r4
 8009a6a:	461c      	mov	r4, r3
 8009a6c:	f04f 0200 	mov.w	r2, #0
 8009a70:	4b43      	ldr	r3, [pc, #268]	; (8009b80 <scaraFLowScurve+0x914>)
 8009a72:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009a76:	f7f6 fdbf 	bl	80005f8 <__aeabi_dmul>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	4610      	mov	r0, r2
 8009a80:	4619      	mov	r1, r3
 8009a82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a86:	f7f6 fdb7 	bl	80005f8 <__aeabi_dmul>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	4610      	mov	r0, r2
 8009a90:	4619      	mov	r1, r3
 8009a92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a96:	f7f6 fdaf 	bl	80005f8 <__aeabi_dmul>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	4629      	mov	r1, r5
 8009aa2:	f7f6 fbf1 	bl	8000288 <__aeabi_dsub>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	460c      	mov	r4, r1
 8009aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aac:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8009ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab2:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 8009ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab8:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8009abc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ac0:	f7f6 fd9a 	bl	80005f8 <__aeabi_dmul>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	4620      	mov	r0, r4
 8009aca:	4629      	mov	r1, r5
 8009acc:	f7f6 fbde 	bl	800028c <__adddf3>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	460c      	mov	r4, r1
 8009ad4:	4625      	mov	r5, r4
 8009ad6:	461c      	mov	r4, r3
 8009ad8:	f04f 0200 	mov.w	r2, #0
 8009adc:	4b28      	ldr	r3, [pc, #160]	; (8009b80 <scaraFLowScurve+0x914>)
 8009ade:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009ae2:	f7f6 fd89 	bl	80005f8 <__aeabi_dmul>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	460b      	mov	r3, r1
 8009aea:	4610      	mov	r0, r2
 8009aec:	4619      	mov	r1, r3
 8009aee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009af2:	f7f6 fd81 	bl	80005f8 <__aeabi_dmul>
 8009af6:	4602      	mov	r2, r0
 8009af8:	460b      	mov	r3, r1
 8009afa:	4610      	mov	r0, r2
 8009afc:	4619      	mov	r1, r3
 8009afe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b02:	f7f6 fd79 	bl	80005f8 <__aeabi_dmul>
 8009b06:	4602      	mov	r2, r0
 8009b08:	460b      	mov	r3, r1
 8009b0a:	4610      	mov	r0, r2
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b12:	f7f6 fd71 	bl	80005f8 <__aeabi_dmul>
 8009b16:	4602      	mov	r2, r0
 8009b18:	460b      	mov	r3, r1
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	4629      	mov	r1, r5
 8009b1e:	f7f6 fbb5 	bl	800028c <__adddf3>
 8009b22:	4603      	mov	r3, r0
 8009b24:	460c      	mov	r4, r1
 8009b26:	4625      	mov	r5, r4
 8009b28:	461c      	mov	r4, r3
 8009b2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b2e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009b32:	f7f6 fd61 	bl	80005f8 <__aeabi_dmul>
 8009b36:	4602      	mov	r2, r0
 8009b38:	460b      	mov	r3, r1
 8009b3a:	4610      	mov	r0, r2
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b42:	f7f6 fd59 	bl	80005f8 <__aeabi_dmul>
 8009b46:	4602      	mov	r2, r0
 8009b48:	460b      	mov	r3, r1
 8009b4a:	4610      	mov	r0, r2
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b52:	f7f6 fd51 	bl	80005f8 <__aeabi_dmul>
 8009b56:	4602      	mov	r2, r0
 8009b58:	460b      	mov	r3, r1
 8009b5a:	4610      	mov	r0, r2
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	f04f 0200 	mov.w	r2, #0
 8009b62:	4b08      	ldr	r3, [pc, #32]	; (8009b84 <scaraFLowScurve+0x918>)
 8009b64:	f7f6 fe72 	bl	800084c <__aeabi_ddiv>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	4629      	mov	r1, r5
 8009b70:	f7f6 fb8a 	bl	8000288 <__aeabi_dsub>
 8009b74:	4603      	mov	r3, r0
 8009b76:	460c      	mov	r4, r1
 8009b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b7a:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009b7e:	e24b      	b.n	800a018 <scaraFLowScurve+0xdac>
 8009b80:	3fe00000 	.word	0x3fe00000
 8009b84:	40180000 	.word	0x40180000
		 // Phase 3
		 } else if ( ((2*tm) <= time) && ( time < (2*tm + tc)) ) {
 8009b88:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	f7f6 fb7c 	bl	800028c <__adddf3>
 8009b94:	4602      	mov	r2, r0
 8009b96:	460b      	mov	r3, r1
 8009b98:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009b9c:	f7f6 ffb2 	bl	8000b04 <__aeabi_dcmpge>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d04b      	beq.n	8009c3e <scaraFLowScurve+0x9d2>
 8009ba6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009baa:	4602      	mov	r2, r0
 8009bac:	460b      	mov	r3, r1
 8009bae:	f7f6 fb6d 	bl	800028c <__adddf3>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	4610      	mov	r0, r2
 8009bb8:	4619      	mov	r1, r3
 8009bba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009bbe:	f7f6 fb65 	bl	800028c <__adddf3>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009bca:	f7f6 ff87 	bl	8000adc <__aeabi_dcmplt>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d034      	beq.n	8009c3e <scaraFLowScurve+0x9d2>
			 t = time - 2*tm;
 8009bd4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009bd8:	4602      	mov	r2, r0
 8009bda:	460b      	mov	r3, r1
 8009bdc:	f7f6 fb56 	bl	800028c <__adddf3>
 8009be0:	4603      	mov	r3, r0
 8009be2:	460c      	mov	r4, r1
 8009be4:	461a      	mov	r2, r3
 8009be6:	4623      	mov	r3, r4
 8009be8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009bec:	f7f6 fb4c 	bl	8000288 <__aeabi_dsub>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	460c      	mov	r4, r1
 8009bf4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	0;
 8009bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bfa:	f04f 0300 	mov.w	r3, #0
 8009bfe:	f04f 0400 	mov.w	r4, #0
 8009c02:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2;
 8009c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c08:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8009c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c0e:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t;
 8009c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c14:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8009c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1a:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8009c1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c22:	f7f6 fce9 	bl	80005f8 <__aeabi_dmul>
 8009c26:	4602      	mov	r2, r0
 8009c28:	460b      	mov	r3, r1
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	4629      	mov	r1, r5
 8009c2e:	f7f6 fb2d 	bl	800028c <__adddf3>
 8009c32:	4603      	mov	r3, r0
 8009c34:	460c      	mov	r4, r1
 8009c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c38:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009c3c:	e1ec      	b.n	800a018 <scaraFLowScurve+0xdac>
		 // Phase 4
		 } else if ( ((2*tm + tc) <= time) && ( time < (3*tm + tc)) ) {
 8009c3e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009c42:	4602      	mov	r2, r0
 8009c44:	460b      	mov	r3, r1
 8009c46:	f7f6 fb21 	bl	800028c <__adddf3>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	4610      	mov	r0, r2
 8009c50:	4619      	mov	r1, r3
 8009c52:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009c56:	f7f6 fb19 	bl	800028c <__adddf3>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009c62:	f7f6 ff4f 	bl	8000b04 <__aeabi_dcmpge>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	f000 80af 	beq.w	8009dcc <scaraFLowScurve+0xb60>
 8009c6e:	f04f 0200 	mov.w	r2, #0
 8009c72:	4b53      	ldr	r3, [pc, #332]	; (8009dc0 <scaraFLowScurve+0xb54>)
 8009c74:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009c78:	f7f6 fcbe 	bl	80005f8 <__aeabi_dmul>
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	460b      	mov	r3, r1
 8009c80:	4610      	mov	r0, r2
 8009c82:	4619      	mov	r1, r3
 8009c84:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009c88:	f7f6 fb00 	bl	800028c <__adddf3>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	460b      	mov	r3, r1
 8009c90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009c94:	f7f6 ff22 	bl	8000adc <__aeabi_dcmplt>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	f000 8096 	beq.w	8009dcc <scaraFLowScurve+0xb60>
			 t = time - (2*tm + tc);
 8009ca0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	f7f6 faf0 	bl	800028c <__adddf3>
 8009cac:	4603      	mov	r3, r0
 8009cae:	460c      	mov	r4, r1
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	4621      	mov	r1, r4
 8009cb4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009cb8:	f7f6 fae8 	bl	800028c <__adddf3>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	460c      	mov	r4, r1
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	4623      	mov	r3, r4
 8009cc4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009cc8:	f7f6 fade 	bl	8000288 <__aeabi_dsub>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	460c      	mov	r4, r1
 8009cd0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 8009cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cd6:	603b      	str	r3, [r7, #0]
 8009cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cda:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009cde:	607b      	str	r3, [r7, #4]
 8009ce0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ce4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ce8:	f7f6 fc86 	bl	80005f8 <__aeabi_dmul>
 8009cec:	4603      	mov	r3, r0
 8009cee:	460c      	mov	r4, r1
 8009cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cf2:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_3 - 0.5*j_max*t*t;
 8009cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf8:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 8009cfc:	f04f 0200 	mov.w	r2, #0
 8009d00:	4b30      	ldr	r3, [pc, #192]	; (8009dc4 <scaraFLowScurve+0xb58>)
 8009d02:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009d06:	f7f6 fc77 	bl	80005f8 <__aeabi_dmul>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	4610      	mov	r0, r2
 8009d10:	4619      	mov	r1, r3
 8009d12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d16:	f7f6 fc6f 	bl	80005f8 <__aeabi_dmul>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	4610      	mov	r0, r2
 8009d20:	4619      	mov	r1, r3
 8009d22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d26:	f7f6 fc67 	bl	80005f8 <__aeabi_dmul>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	4620      	mov	r0, r4
 8009d30:	4629      	mov	r1, r5
 8009d32:	f7f6 faa9 	bl	8000288 <__aeabi_dsub>
 8009d36:	4603      	mov	r3, r0
 8009d38:	460c      	mov	r4, r1
 8009d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d3c:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_3 + scurve->v_3*t - j_max*t*t*t/6;
 8009d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d42:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
 8009d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d48:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8009d4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d50:	f7f6 fc52 	bl	80005f8 <__aeabi_dmul>
 8009d54:	4602      	mov	r2, r0
 8009d56:	460b      	mov	r3, r1
 8009d58:	4620      	mov	r0, r4
 8009d5a:	4629      	mov	r1, r5
 8009d5c:	f7f6 fa96 	bl	800028c <__adddf3>
 8009d60:	4603      	mov	r3, r0
 8009d62:	460c      	mov	r4, r1
 8009d64:	4625      	mov	r5, r4
 8009d66:	461c      	mov	r4, r3
 8009d68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d6c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009d70:	f7f6 fc42 	bl	80005f8 <__aeabi_dmul>
 8009d74:	4602      	mov	r2, r0
 8009d76:	460b      	mov	r3, r1
 8009d78:	4610      	mov	r0, r2
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d80:	f7f6 fc3a 	bl	80005f8 <__aeabi_dmul>
 8009d84:	4602      	mov	r2, r0
 8009d86:	460b      	mov	r3, r1
 8009d88:	4610      	mov	r0, r2
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d90:	f7f6 fc32 	bl	80005f8 <__aeabi_dmul>
 8009d94:	4602      	mov	r2, r0
 8009d96:	460b      	mov	r3, r1
 8009d98:	4610      	mov	r0, r2
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	f04f 0200 	mov.w	r2, #0
 8009da0:	4b09      	ldr	r3, [pc, #36]	; (8009dc8 <scaraFLowScurve+0xb5c>)
 8009da2:	f7f6 fd53 	bl	800084c <__aeabi_ddiv>
 8009da6:	4602      	mov	r2, r0
 8009da8:	460b      	mov	r3, r1
 8009daa:	4620      	mov	r0, r4
 8009dac:	4629      	mov	r1, r5
 8009dae:	f7f6 fa6b 	bl	8000288 <__aeabi_dsub>
 8009db2:	4603      	mov	r3, r0
 8009db4:	460c      	mov	r4, r1
 8009db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009db8:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009dbc:	e12c      	b.n	800a018 <scaraFLowScurve+0xdac>
 8009dbe:	bf00      	nop
 8009dc0:	40080000 	.word	0x40080000
 8009dc4:	3fe00000 	.word	0x3fe00000
 8009dc8:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm + tc) <= time) && ( time < (4*tm + tc)) ) {
 8009dcc:	f04f 0200 	mov.w	r2, #0
 8009dd0:	4b94      	ldr	r3, [pc, #592]	; (800a024 <scaraFLowScurve+0xdb8>)
 8009dd2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009dd6:	f7f6 fc0f 	bl	80005f8 <__aeabi_dmul>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	460b      	mov	r3, r1
 8009dde:	4610      	mov	r0, r2
 8009de0:	4619      	mov	r1, r3
 8009de2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009de6:	f7f6 fa51 	bl	800028c <__adddf3>
 8009dea:	4602      	mov	r2, r0
 8009dec:	460b      	mov	r3, r1
 8009dee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009df2:	f7f6 fe87 	bl	8000b04 <__aeabi_dcmpge>
 8009df6:	4603      	mov	r3, r0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f000 80f6 	beq.w	8009fea <scaraFLowScurve+0xd7e>
 8009dfe:	f04f 0200 	mov.w	r2, #0
 8009e02:	4b89      	ldr	r3, [pc, #548]	; (800a028 <scaraFLowScurve+0xdbc>)
 8009e04:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009e08:	f7f6 fbf6 	bl	80005f8 <__aeabi_dmul>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	460b      	mov	r3, r1
 8009e10:	4610      	mov	r0, r2
 8009e12:	4619      	mov	r1, r3
 8009e14:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009e18:	f7f6 fa38 	bl	800028c <__adddf3>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	460b      	mov	r3, r1
 8009e20:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009e24:	f7f6 fe5a 	bl	8000adc <__aeabi_dcmplt>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	f000 80dd 	beq.w	8009fea <scaraFLowScurve+0xd7e>
			 t = time - (3*tm + tc);
 8009e30:	f04f 0200 	mov.w	r2, #0
 8009e34:	4b7b      	ldr	r3, [pc, #492]	; (800a024 <scaraFLowScurve+0xdb8>)
 8009e36:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009e3a:	f7f6 fbdd 	bl	80005f8 <__aeabi_dmul>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	460b      	mov	r3, r1
 8009e42:	4610      	mov	r0, r2
 8009e44:	4619      	mov	r1, r3
 8009e46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009e4a:	f7f6 fa1f 	bl	800028c <__adddf3>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	460b      	mov	r3, r1
 8009e52:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009e56:	f7f6 fa17 	bl	8000288 <__aeabi_dsub>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 8009e62:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8009e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e66:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8009e6a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009e6e:	4620      	mov	r0, r4
 8009e70:	4629      	mov	r1, r5
 8009e72:	f7f6 fbc1 	bl	80005f8 <__aeabi_dmul>
 8009e76:	4603      	mov	r3, r0
 8009e78:	460c      	mov	r4, r1
 8009e7a:	4625      	mov	r5, r4
 8009e7c:	461c      	mov	r4, r3
 8009e7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e82:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009e86:	f7f6 fbb7 	bl	80005f8 <__aeabi_dmul>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	4620      	mov	r0, r4
 8009e90:	4629      	mov	r1, r5
 8009e92:	f7f6 f9fb 	bl	800028c <__adddf3>
 8009e96:	4603      	mov	r3, r0
 8009e98:	460c      	mov	r4, r1
 8009e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e9c:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea2:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 8009ea6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009eaa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009eae:	f7f6 fba3 	bl	80005f8 <__aeabi_dmul>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	4610      	mov	r0, r2
 8009eb8:	4619      	mov	r1, r3
 8009eba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ebe:	f7f6 fb9b 	bl	80005f8 <__aeabi_dmul>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	4629      	mov	r1, r5
 8009eca:	f7f6 f9dd 	bl	8000288 <__aeabi_dsub>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	460c      	mov	r4, r1
 8009ed2:	4625      	mov	r5, r4
 8009ed4:	461c      	mov	r4, r3
 8009ed6:	f04f 0200 	mov.w	r2, #0
 8009eda:	4b54      	ldr	r3, [pc, #336]	; (800a02c <scaraFLowScurve+0xdc0>)
 8009edc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009ee0:	f7f6 fb8a 	bl	80005f8 <__aeabi_dmul>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	4610      	mov	r0, r2
 8009eea:	4619      	mov	r1, r3
 8009eec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ef0:	f7f6 fb82 	bl	80005f8 <__aeabi_dmul>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	4610      	mov	r0, r2
 8009efa:	4619      	mov	r1, r3
 8009efc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f00:	f7f6 fb7a 	bl	80005f8 <__aeabi_dmul>
 8009f04:	4602      	mov	r2, r0
 8009f06:	460b      	mov	r3, r1
 8009f08:	4620      	mov	r0, r4
 8009f0a:	4629      	mov	r1, r5
 8009f0c:	f7f6 f9be 	bl	800028c <__adddf3>
 8009f10:	4603      	mov	r3, r0
 8009f12:	460c      	mov	r4, r1
 8009f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f16:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t - 0.5*j_max*tm*t*t + j_max*t*t*t/6;
 8009f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1c:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8009f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f22:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8009f26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f2a:	f7f6 fb65 	bl	80005f8 <__aeabi_dmul>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	460b      	mov	r3, r1
 8009f32:	4620      	mov	r0, r4
 8009f34:	4629      	mov	r1, r5
 8009f36:	f7f6 f9a9 	bl	800028c <__adddf3>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	460c      	mov	r4, r1
 8009f3e:	4625      	mov	r5, r4
 8009f40:	461c      	mov	r4, r3
 8009f42:	f04f 0200 	mov.w	r2, #0
 8009f46:	4b39      	ldr	r3, [pc, #228]	; (800a02c <scaraFLowScurve+0xdc0>)
 8009f48:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009f4c:	f7f6 fb54 	bl	80005f8 <__aeabi_dmul>
 8009f50:	4602      	mov	r2, r0
 8009f52:	460b      	mov	r3, r1
 8009f54:	4610      	mov	r0, r2
 8009f56:	4619      	mov	r1, r3
 8009f58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009f5c:	f7f6 fb4c 	bl	80005f8 <__aeabi_dmul>
 8009f60:	4602      	mov	r2, r0
 8009f62:	460b      	mov	r3, r1
 8009f64:	4610      	mov	r0, r2
 8009f66:	4619      	mov	r1, r3
 8009f68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f6c:	f7f6 fb44 	bl	80005f8 <__aeabi_dmul>
 8009f70:	4602      	mov	r2, r0
 8009f72:	460b      	mov	r3, r1
 8009f74:	4610      	mov	r0, r2
 8009f76:	4619      	mov	r1, r3
 8009f78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f7c:	f7f6 fb3c 	bl	80005f8 <__aeabi_dmul>
 8009f80:	4602      	mov	r2, r0
 8009f82:	460b      	mov	r3, r1
 8009f84:	4620      	mov	r0, r4
 8009f86:	4629      	mov	r1, r5
 8009f88:	f7f6 f97e 	bl	8000288 <__aeabi_dsub>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	460c      	mov	r4, r1
 8009f90:	4625      	mov	r5, r4
 8009f92:	461c      	mov	r4, r3
 8009f94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f98:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009f9c:	f7f6 fb2c 	bl	80005f8 <__aeabi_dmul>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	4610      	mov	r0, r2
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009fac:	f7f6 fb24 	bl	80005f8 <__aeabi_dmul>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	4610      	mov	r0, r2
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009fbc:	f7f6 fb1c 	bl	80005f8 <__aeabi_dmul>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	4610      	mov	r0, r2
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	f04f 0200 	mov.w	r2, #0
 8009fcc:	4b18      	ldr	r3, [pc, #96]	; (800a030 <scaraFLowScurve+0xdc4>)
 8009fce:	f7f6 fc3d 	bl	800084c <__aeabi_ddiv>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	4629      	mov	r1, r5
 8009fda:	f7f6 f957 	bl	800028c <__adddf3>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	460c      	mov	r4, r1
 8009fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fe4:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009fe8:	e016      	b.n	800a018 <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 8009fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fec:	f04f 0300 	mov.w	r3, #0
 8009ff0:	f04f 0400 	mov.w	r4, #0
 8009ff4:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 8009ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ffa:	f04f 0300 	mov.w	r3, #0
 8009ffe:	f04f 0400 	mov.w	r4, #0
 800a002:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 800a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a008:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800a00c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a00e:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800a012:	e001      	b.n	800a018 <scaraFLowScurve+0xdac>
		 }

	 } else {
		 return SCARA_STATUS_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	e000      	b.n	800a01a <scaraFLowScurve+0xdae>
	 }

	 return SCARA_STATUS_OK;
 800a018:	2300      	movs	r3, #0
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3748      	adds	r7, #72	; 0x48
 800a01e:	46bd      	mov	sp, r7
 800a020:	bdb0      	pop	{r4, r5, r7, pc}
 800a022:	bf00      	nop
 800a024:	40080000 	.word	0x40080000
 800a028:	40100000 	.word	0x40100000
 800a02c:	3fe00000 	.word	0x3fe00000
 800a030:	40180000 	.word	0x40180000
 800a034:	00000000 	.word	0x00000000

0800a038 <scaraCheckWorkSpace4>:

/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 800a038:	b580      	push	{r7, lr}
 800a03a:	b088      	sub	sp, #32
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	ed87 0b06 	vstr	d0, [r7, #24]
 800a042:	ed87 1b04 	vstr	d1, [r7, #16]
 800a046:	ed87 2b02 	vstr	d2, [r7, #8]
 800a04a:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0-0.1 || theta1 > LIM_MAX_J0+0.1) {
 800a04e:	a335      	add	r3, pc, #212	; (adr r3, 800a124 <scaraCheckWorkSpace4+0xec>)
 800a050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a054:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a058:	f7f6 fd40 	bl	8000adc <__aeabi_dcmplt>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d109      	bne.n	800a076 <scaraCheckWorkSpace4+0x3e>
 800a062:	a332      	add	r3, pc, #200	; (adr r3, 800a12c <scaraCheckWorkSpace4+0xf4>)
 800a064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a068:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a06c:	f7f6 fd54 	bl	8000b18 <__aeabi_dcmpgt>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d001      	beq.n	800a07a <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a076:	2307      	movs	r3, #7
 800a078:	e043      	b.n	800a102 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1-0.1 || theta2 > LIM_MAX_J1+0.1) {
 800a07a:	a32e      	add	r3, pc, #184	; (adr r3, 800a134 <scaraCheckWorkSpace4+0xfc>)
 800a07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a080:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a084:	f7f6 fd2a 	bl	8000adc <__aeabi_dcmplt>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d109      	bne.n	800a0a2 <scaraCheckWorkSpace4+0x6a>
 800a08e:	a32b      	add	r3, pc, #172	; (adr r3, 800a13c <scaraCheckWorkSpace4+0x104>)
 800a090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a094:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a098:	f7f6 fd3e 	bl	8000b18 <__aeabi_dcmpgt>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d001      	beq.n	800a0a6 <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a0a2:	2307      	movs	r3, #7
 800a0a4:	e02d      	b.n	800a102 <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 800a0a6:	f04f 0200 	mov.w	r2, #0
 800a0aa:	f04f 0300 	mov.w	r3, #0
 800a0ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a0b2:	f7f6 fd13 	bl	8000adc <__aeabi_dcmplt>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d109      	bne.n	800a0d0 <scaraCheckWorkSpace4+0x98>
 800a0bc:	f04f 0200 	mov.w	r2, #0
 800a0c0:	4b17      	ldr	r3, [pc, #92]	; (800a120 <scaraCheckWorkSpace4+0xe8>)
 800a0c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a0c6:	f7f6 fd27 	bl	8000b18 <__aeabi_dcmpgt>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d001      	beq.n	800a0d4 <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a0d0:	2307      	movs	r3, #7
 800a0d2:	e016      	b.n	800a102 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3-0.1 || theta4 > LIM_MAX_J3+0.1) {
 800a0d4:	a30e      	add	r3, pc, #56	; (adr r3, 800a110 <scaraCheckWorkSpace4+0xd8>)
 800a0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0da:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0de:	f7f6 fcfd 	bl	8000adc <__aeabi_dcmplt>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d109      	bne.n	800a0fc <scaraCheckWorkSpace4+0xc4>
 800a0e8:	a30b      	add	r3, pc, #44	; (adr r3, 800a118 <scaraCheckWorkSpace4+0xe0>)
 800a0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0f2:	f7f6 fd11 	bl	8000b18 <__aeabi_dcmpgt>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d001      	beq.n	800a100 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a0fc:	2307      	movs	r3, #7
 800a0fe:	e000      	b.n	800a102 <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3720      	adds	r7, #32
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	f3af 8000 	nop.w
 800a110:	a7777778 	.word	0xa7777778
 800a114:	c0088956 	.word	0xc0088956
 800a118:	a7777778 	.word	0xa7777778
 800a11c:	40088956 	.word	0x40088956
 800a120:	40590000 	.word	0x40590000
 800a124:	74444445 	.word	0x74444445
 800a128:	bff95623 	.word	0xbff95623
 800a12c:	74444445 	.word	0x74444445
 800a130:	3ff95623 	.word	0x3ff95623
 800a134:	54cccccd 	.word	0x54cccccd
 800a138:	c003a649 	.word	0xc003a649
 800a13c:	54cccccd 	.word	0x54cccccd
 800a140:	4003a649 	.word	0x4003a649
 800a144:	00000000 	.word	0x00000000

0800a148 <scaraCheckWorkSpace1>:

/* Check limit 1 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace1 (Trajectory_TargetTypeDef target, double value) {
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	4603      	mov	r3, r0
 800a150:	ed87 0b00 	vstr	d0, [r7]
 800a154:	73fb      	strb	r3, [r7, #15]
	if ( TRAJECTORY_J0 == target) {
 800a156:	7bfb      	ldrb	r3, [r7, #15]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d117      	bne.n	800a18c <scaraCheckWorkSpace1+0x44>
		if ( (LIM_MIN_J0 <= value) && ( value <= LIM_MAX_J0)) {
 800a15c:	a33d      	add	r3, pc, #244	; (adr r3, 800a254 <scaraCheckWorkSpace1+0x10c>)
 800a15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a162:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a166:	f7f6 fccd 	bl	8000b04 <__aeabi_dcmpge>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d00b      	beq.n	800a188 <scaraCheckWorkSpace1+0x40>
 800a170:	a33a      	add	r3, pc, #232	; (adr r3, 800a25c <scaraCheckWorkSpace1+0x114>)
 800a172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a176:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a17a:	f7f6 fcb9 	bl	8000af0 <__aeabi_dcmple>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d001      	beq.n	800a188 <scaraCheckWorkSpace1+0x40>
			return SCARA_STATUS_OK;
 800a184:	2300      	movs	r3, #0
 800a186:	e054      	b.n	800a232 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a188:	2307      	movs	r3, #7
 800a18a:	e052      	b.n	800a232 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J1 == target) {
 800a18c:	7bfb      	ldrb	r3, [r7, #15]
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d117      	bne.n	800a1c2 <scaraCheckWorkSpace1+0x7a>
		if ( (LIM_MIN_J1 <= value) && ( value <= LIM_MAX_J1)) {
 800a192:	a334      	add	r3, pc, #208	; (adr r3, 800a264 <scaraCheckWorkSpace1+0x11c>)
 800a194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a198:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a19c:	f7f6 fcb2 	bl	8000b04 <__aeabi_dcmpge>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00b      	beq.n	800a1be <scaraCheckWorkSpace1+0x76>
 800a1a6:	a331      	add	r3, pc, #196	; (adr r3, 800a26c <scaraCheckWorkSpace1+0x124>)
 800a1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a1b0:	f7f6 fc9e 	bl	8000af0 <__aeabi_dcmple>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d001      	beq.n	800a1be <scaraCheckWorkSpace1+0x76>
			return SCARA_STATUS_OK;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	e039      	b.n	800a232 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a1be:	2307      	movs	r3, #7
 800a1c0:	e037      	b.n	800a232 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J2 == target) {
 800a1c2:	7bfb      	ldrb	r3, [r7, #15]
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	d118      	bne.n	800a1fa <scaraCheckWorkSpace1+0xb2>
		if ( (LIM_MIN_J2 <= value) && ( value <= LIM_MAX_J2)) {
 800a1c8:	f04f 0200 	mov.w	r2, #0
 800a1cc:	f04f 0300 	mov.w	r3, #0
 800a1d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a1d4:	f7f6 fc96 	bl	8000b04 <__aeabi_dcmpge>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00b      	beq.n	800a1f6 <scaraCheckWorkSpace1+0xae>
 800a1de:	f04f 0200 	mov.w	r2, #0
 800a1e2:	4b1b      	ldr	r3, [pc, #108]	; (800a250 <scaraCheckWorkSpace1+0x108>)
 800a1e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a1e8:	f7f6 fc82 	bl	8000af0 <__aeabi_dcmple>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d001      	beq.n	800a1f6 <scaraCheckWorkSpace1+0xae>
			return SCARA_STATUS_OK;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	e01d      	b.n	800a232 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a1f6:	2307      	movs	r3, #7
 800a1f8:	e01b      	b.n	800a232 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J3 == target) {
 800a1fa:	7bfb      	ldrb	r3, [r7, #15]
 800a1fc:	2b03      	cmp	r3, #3
 800a1fe:	d117      	bne.n	800a230 <scaraCheckWorkSpace1+0xe8>
		if ( (LIM_MIN_J3 <= value) && ( value <= LIM_MAX_J3)) {
 800a200:	a30f      	add	r3, pc, #60	; (adr r3, 800a240 <scaraCheckWorkSpace1+0xf8>)
 800a202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a206:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a20a:	f7f6 fc7b 	bl	8000b04 <__aeabi_dcmpge>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d00b      	beq.n	800a22c <scaraCheckWorkSpace1+0xe4>
 800a214:	a30c      	add	r3, pc, #48	; (adr r3, 800a248 <scaraCheckWorkSpace1+0x100>)
 800a216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a21e:	f7f6 fc67 	bl	8000af0 <__aeabi_dcmple>
 800a222:	4603      	mov	r3, r0
 800a224:	2b00      	cmp	r3, #0
 800a226:	d001      	beq.n	800a22c <scaraCheckWorkSpace1+0xe4>
			return SCARA_STATUS_OK;
 800a228:	2300      	movs	r3, #0
 800a22a:	e002      	b.n	800a232 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a22c:	2307      	movs	r3, #7
 800a22e:	e000      	b.n	800a232 <scaraCheckWorkSpace1+0xea>
		}
	} else {
		return SCARA_STATUS_ERROR;
 800a230:	2301      	movs	r3, #1
	}
}
 800a232:	4618      	mov	r0, r3
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	f3af 8000 	nop.w
 800a240:	daaaaaab 	.word	0xdaaaaaab
 800a244:	c007bc89 	.word	0xc007bc89
 800a248:	daaaaaab 	.word	0xdaaaaaab
 800a24c:	4007bc89 	.word	0x4007bc89
 800a250:	40590000 	.word	0x40590000
 800a254:	daaaaaab 	.word	0xdaaaaaab
 800a258:	bff7bc89 	.word	0xbff7bc89
 800a25c:	daaaaaab 	.word	0xdaaaaaab
 800a260:	3ff7bc89 	.word	0x3ff7bc89
 800a264:	88000000 	.word	0x88000000
 800a268:	c002d97c 	.word	0xc002d97c
 800a26c:	88000000 	.word	0x88000000
 800a270:	4002d97c 	.word	0x4002d97c
 800a274:	00000000 	.word	0x00000000

0800a278 <scaraTestLinearDuty>:

SCARA_StatusTypeDef scaraTestLinearDuty()
{
 800a278:	b5b0      	push	{r4, r5, r7, lr}
 800a27a:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800a27e:	af2e      	add	r7, sp, #184	; 0xb8
	int32_t sample_count;
	double run_time = 0;
 800a280:	f04f 0300 	mov.w	r3, #0
 800a284:	f04f 0400 	mov.w	r4, #0
 800a288:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a28c:	463b      	mov	r3, r7
 800a28e:	4a36      	ldr	r2, [pc, #216]	; (800a368 <scaraTestLinearDuty+0xf0>)
 800a290:	4618      	mov	r0, r3
 800a292:	4611      	mov	r1, r2
 800a294:	23c0      	movs	r3, #192	; 0xc0
 800a296:	461a      	mov	r2, r3
 800a298:	f00b fc70 	bl	8015b7c <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 800a29c:	4b33      	ldr	r3, [pc, #204]	; (800a36c <scaraTestLinearDuty+0xf4>)
 800a29e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a2a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a2a6:	a32e      	add	r3, pc, #184	; (adr r3, 800a360 <scaraTestLinearDuty+0xe8>)
 800a2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ac:	f7f6 face 	bl	800084c <__aeabi_ddiv>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	460c      	mov	r4, r1
 800a2b4:	ec44 3b17 	vmov	d7, r3, r4
 800a2b8:	eeb0 0a47 	vmov.f32	s0, s14
 800a2bc:	eef0 0a67 	vmov.f32	s1, s15
 800a2c0:	f00f f9ca 	bl	8019658 <ceil>
 800a2c4:	ec54 3b10 	vmov	r3, r4, d0
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	4621      	mov	r1, r4
 800a2cc:	f7f6 fc44 	bl	8000b58 <__aeabi_d2iz>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	for (int32_t i = 1; i < sample_count; i++) {
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a2dc:	e032      	b.n	800a344 <scaraTestLinearDuty+0xcc>
		run_time += T_SAMPLING;
 800a2de:	a320      	add	r3, pc, #128	; (adr r3, 800a360 <scaraTestLinearDuty+0xe8>)
 800a2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800a2e8:	f7f5 ffd0 	bl	800028c <__adddf3>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	460c      	mov	r4, r1
 800a2f0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
		status = scaraTestFlowDuty(run_time, &test_Next, test_Current);
 800a2f4:	463c      	mov	r4, r7
 800a2f6:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 800a2fa:	4668      	mov	r0, sp
 800a2fc:	f104 0308 	add.w	r3, r4, #8
 800a300:	22b8      	movs	r2, #184	; 0xb8
 800a302:	4619      	mov	r1, r3
 800a304:	f00b fc3a 	bl	8015b7c <memcpy>
 800a308:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a30c:	4628      	mov	r0, r5
 800a30e:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 800a312:	f7fd ff5b 	bl	80081cc <scaraTestFlowDuty>
 800a316:	4603      	mov	r3, r0
 800a318:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
		if (status != SCARA_STATUS_OK) {
 800a31c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a320:	2b00      	cmp	r3, #0
 800a322:	d002      	beq.n	800a32a <scaraTestLinearDuty+0xb2>
			return status;
 800a324:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a328:	e013      	b.n	800a352 <scaraTestLinearDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 800a32a:	463a      	mov	r2, r7
 800a32c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800a330:	4611      	mov	r1, r2
 800a332:	22c0      	movs	r2, #192	; 0xc0
 800a334:	4618      	mov	r0, r3
 800a336:	f00b fc21 	bl	8015b7c <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 800a33a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a33e:	3301      	adds	r3, #1
 800a340:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a344:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a348:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800a34c:	429a      	cmp	r2, r3
 800a34e:	dbc6      	blt.n	800a2de <scaraTestLinearDuty+0x66>
	}
	return SCARA_STATUS_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800a358:	46bd      	mov	sp, r7
 800a35a:	bdb0      	pop	{r4, r5, r7, pc}
 800a35c:	f3af 8000 	nop.w
 800a360:	40000000 	.word	0x40000000
 800a364:	3f847ae1 	.word	0x3f847ae1
 800a368:	20005ae8 	.word	0x20005ae8
 800a36c:	20004f28 	.word	0x20004f28

0800a370 <scaraTestDuty>:

/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 800a370:	b5b0      	push	{r4, r5, r7, lr}
 800a372:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800a376:	af2e      	add	r7, sp, #184	; 0xb8
	int32_t sample_count;
	double run_time = 0;
 800a378:	f04f 0300 	mov.w	r3, #0
 800a37c:	f04f 0400 	mov.w	r4, #0
 800a380:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a384:	463b      	mov	r3, r7
 800a386:	4a36      	ldr	r2, [pc, #216]	; (800a460 <scaraTestDuty+0xf0>)
 800a388:	4618      	mov	r0, r3
 800a38a:	4611      	mov	r1, r2
 800a38c:	23c0      	movs	r3, #192	; 0xc0
 800a38e:	461a      	mov	r2, r3
 800a390:	f00b fbf4 	bl	8015b7c <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 800a394:	4b33      	ldr	r3, [pc, #204]	; (800a464 <scaraTestDuty+0xf4>)
 800a396:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a39a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a39e:	a32e      	add	r3, pc, #184	; (adr r3, 800a458 <scaraTestDuty+0xe8>)
 800a3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a4:	f7f6 fa52 	bl	800084c <__aeabi_ddiv>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	460c      	mov	r4, r1
 800a3ac:	ec44 3b17 	vmov	d7, r3, r4
 800a3b0:	eeb0 0a47 	vmov.f32	s0, s14
 800a3b4:	eef0 0a67 	vmov.f32	s1, s15
 800a3b8:	f00f f94e 	bl	8019658 <ceil>
 800a3bc:	ec54 3b10 	vmov	r3, r4, d0
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	4621      	mov	r1, r4
 800a3c4:	f7f6 fbc8 	bl	8000b58 <__aeabi_d2iz>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	for (int32_t i = 1; i < sample_count; i++) {
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a3d4:	e032      	b.n	800a43c <scaraTestDuty+0xcc>
		run_time += T_SAMPLING;
 800a3d6:	a320      	add	r3, pc, #128	; (adr r3, 800a458 <scaraTestDuty+0xe8>)
 800a3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3dc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800a3e0:	f7f5 ff54 	bl	800028c <__adddf3>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	460c      	mov	r4, r1
 800a3e8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 800a3ec:	463c      	mov	r4, r7
 800a3ee:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 800a3f2:	4668      	mov	r0, sp
 800a3f4:	f104 0308 	add.w	r3, r4, #8
 800a3f8:	22b8      	movs	r2, #184	; 0xb8
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	f00b fbbe 	bl	8015b7c <memcpy>
 800a400:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a404:	4628      	mov	r0, r5
 800a406:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 800a40a:	f7fd ff4b 	bl	80082a4 <scaraFlowDuty>
 800a40e:	4603      	mov	r3, r0
 800a410:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
		if (status != SCARA_STATUS_OK) {
 800a414:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d002      	beq.n	800a422 <scaraTestDuty+0xb2>
			return status;
 800a41c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a420:	e013      	b.n	800a44a <scaraTestDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 800a422:	463a      	mov	r2, r7
 800a424:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800a428:	4611      	mov	r1, r2
 800a42a:	22c0      	movs	r2, #192	; 0xc0
 800a42c:	4618      	mov	r0, r3
 800a42e:	f00b fba5 	bl	8015b7c <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 800a432:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a436:	3301      	adds	r3, #1
 800a438:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a43c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a440:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800a444:	429a      	cmp	r2, r3
 800a446:	dbc6      	blt.n	800a3d6 <scaraTestDuty+0x66>
	}
	return SCARA_STATUS_OK;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800a450:	46bd      	mov	sp, r7
 800a452:	bdb0      	pop	{r4, r5, r7, pc}
 800a454:	f3af 8000 	nop.w
 800a458:	40000000 	.word	0x40000000
 800a45c:	3f847ae1 	.word	0x3f847ae1
 800a460:	20005ae8 	.word	0x20005ae8
 800a464:	20004f28 	.word	0x20004f28

0800a468 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 800a468:	b480      	push	{r7}
 800a46a:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 800a46c:	4b03      	ldr	r3, [pc, #12]	; (800a47c <scaraSetScanFlag+0x14>)
 800a46e:	2201      	movs	r2, #1
 800a470:	70da      	strb	r2, [r3, #3]
}
 800a472:	bf00      	nop
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr
 800a47c:	2000081c 	.word	0x2000081c

0800a480 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	4603      	mov	r3, r0
 800a488:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 800a48a:	4a05      	ldr	r2, [pc, #20]	; (800a4a0 <scaraSetOutput+0x20>)
 800a48c:	79fb      	ldrb	r3, [r7, #7]
 800a48e:	7113      	strb	r3, [r2, #4]
	lowlayer_setOutput(level);
 800a490:	79fb      	ldrb	r3, [r7, #7]
 800a492:	4618      	mov	r0, r3
 800a494:	f7fa fd48 	bl	8004f28 <lowlayer_setOutput>
}
 800a498:	bf00      	nop
 800a49a:	3708      	adds	r7, #8
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	2000081c 	.word	0x2000081c

0800a4a4 <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 800a4ae:	4a04      	ldr	r2, [pc, #16]	; (800a4c0 <scaraSetDutyState+0x1c>)
 800a4b0:	79fb      	ldrb	r3, [r7, #7]
 800a4b2:	7093      	strb	r3, [r2, #2]
}
 800a4b4:	bf00      	nop
 800a4b6:	370c      	adds	r7, #12
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr
 800a4c0:	2000081c 	.word	0x2000081c

0800a4c4 <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 800a4ce:	4a04      	ldr	r2, [pc, #16]	; (800a4e0 <scaraSetMode+0x1c>)
 800a4d0:	79fb      	ldrb	r3, [r7, #7]
 800a4d2:	7053      	strb	r3, [r2, #1]
}
 800a4d4:	bf00      	nop
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr
 800a4e0:	2000081c 	.word	0x2000081c

0800a4e4 <scaraSetMethod>:

void				scaraSetMethod(SCARA_MethodTypeDef method) {
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	71fb      	strb	r3, [r7, #7]
	mySCARA.method = method;
 800a4ee:	4a04      	ldr	r2, [pc, #16]	; (800a500 <scaraSetMethod+0x1c>)
 800a4f0:	79fb      	ldrb	r3, [r7, #7]
 800a4f2:	7013      	strb	r3, [r2, #0]
}
 800a4f4:	bf00      	nop
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr
 800a500:	2000081c 	.word	0x2000081c

0800a504 <scaraGetPosition>:


void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a50c:	22c0      	movs	r2, #192	; 0xc0
 800a50e:	4904      	ldr	r1, [pc, #16]	; (800a520 <scaraGetPosition+0x1c>)
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f00b fb33 	bl	8015b7c <memcpy>
}
 800a516:	bf00      	nop
 800a518:	3708      	adds	r7, #8
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	20005ae8 	.word	0x20005ae8

0800a524 <scaraUpdatePosition>:

void				scaraUpdatePosition (SCARA_PositionTypeDef *pos) {
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
	memcpy(&positionNext, pos, sizeof(SCARA_PositionTypeDef));
 800a52c:	22c0      	movs	r2, #192	; 0xc0
 800a52e:	6879      	ldr	r1, [r7, #4]
 800a530:	4803      	ldr	r0, [pc, #12]	; (800a540 <scaraUpdatePosition+0x1c>)
 800a532:	f00b fb23 	bl	8015b7c <memcpy>
}
 800a536:	bf00      	nop
 800a538:	3708      	adds	r7, #8
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	20005c68 	.word	0x20005c68

0800a544 <scaraGetMode>:


SCARA_ModeTypeDef	scaraGetMode(void) {
 800a544:	b480      	push	{r7}
 800a546:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 800a548:	4b03      	ldr	r3, [pc, #12]	; (800a558 <scaraGetMode+0x14>)
 800a54a:	785b      	ldrb	r3, [r3, #1]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr
 800a556:	bf00      	nop
 800a558:	2000081c 	.word	0x2000081c

0800a55c <scaraGetMethod>:

SCARA_MethodTypeDef	scaraGetMethod(void) {
 800a55c:	b480      	push	{r7}
 800a55e:	af00      	add	r7, sp, #0
	return mySCARA.method;
 800a560:	4b03      	ldr	r3, [pc, #12]	; (800a570 <scaraGetMethod+0x14>)
 800a562:	781b      	ldrb	r3, [r3, #0]
}
 800a564:	4618      	mov	r0, r3
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr
 800a56e:	bf00      	nop
 800a570:	2000081c 	.word	0x2000081c

0800a574 <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 800a574:	b480      	push	{r7}
 800a576:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 800a578:	4b03      	ldr	r3, [pc, #12]	; (800a588 <scaraGetDutyState+0x14>)
 800a57a:	789b      	ldrb	r3, [r3, #2]
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	2000081c 	.word	0x2000081c

0800a58c <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 800a58c:	b480      	push	{r7}
 800a58e:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 800a590:	4b03      	ldr	r3, [pc, #12]	; (800a5a0 <scaraIsScanLimit+0x14>)
 800a592:	78db      	ldrb	r3, [r3, #3]
}
 800a594:	4618      	mov	r0, r3
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr
 800a59e:	bf00      	nop
 800a5a0:	2000081c 	.word	0x2000081c

0800a5a4 <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 800a5a4:	b590      	push	{r4, r7, lr}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total  < run_time) {
 800a5ae:	4b0a      	ldr	r3, [pc, #40]	; (800a5d8 <scaraIsFinish+0x34>)
 800a5b0:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a5b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	4623      	mov	r3, r4
 800a5bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5c0:	f7f6 faaa 	bl	8000b18 <__aeabi_dcmpgt>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d001      	beq.n	800a5ce <scaraIsFinish+0x2a>
		return TRUE;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e000      	b.n	800a5d0 <scaraIsFinish+0x2c>
	} else {
		return FALSE;
 800a5ce:	2300      	movs	r3, #0
	}
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd90      	pop	{r4, r7, pc}
 800a5d8:	20004f28 	.word	0x20004f28
 800a5dc:	00000000 	.word	0x00000000

0800a5e0 <scaraPosition_packaging>:
						time);
	return lenght_buff;
}

int32_t scaraPosition_packaging(uint8_t *data_packet, SCARA_PositionTypeDef position)
{
 800a5e0:	b082      	sub	sp, #8
 800a5e2:	b590      	push	{r4, r7, lr}
 800a5e4:	b085      	sub	sp, #20
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
 800a5ea:	f107 0120 	add.w	r1, r7, #32
 800a5ee:	e881 000c 	stmia.w	r1, {r2, r3}
	int32_t cur_ptr = -4;
 800a5f2:	f06f 0303 	mvn.w	r3, #3
 800a5f6:	60fb      	str	r3, [r7, #12]
	Append_Coordinate_Value((int32_t)(position.x*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a5f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a5fc:	a35c      	add	r3, pc, #368	; (adr r3, 800a770 <scaraPosition_packaging+0x190>)
 800a5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a602:	f7f5 fff9 	bl	80005f8 <__aeabi_dmul>
 800a606:	4603      	mov	r3, r0
 800a608:	460c      	mov	r4, r1
 800a60a:	4618      	mov	r0, r3
 800a60c:	4621      	mov	r1, r4
 800a60e:	f7f6 faa3 	bl	8000b58 <__aeabi_d2iz>
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	3304      	adds	r3, #4
 800a616:	60fb      	str	r3, [r7, #12]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	4413      	add	r3, r2
 800a61e:	4619      	mov	r1, r3
 800a620:	f000 f8aa 	bl	800a778 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.y*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a624:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800a628:	a351      	add	r3, pc, #324	; (adr r3, 800a770 <scaraPosition_packaging+0x190>)
 800a62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62e:	f7f5 ffe3 	bl	80005f8 <__aeabi_dmul>
 800a632:	4603      	mov	r3, r0
 800a634:	460c      	mov	r4, r1
 800a636:	4618      	mov	r0, r3
 800a638:	4621      	mov	r1, r4
 800a63a:	f7f6 fa8d 	bl	8000b58 <__aeabi_d2iz>
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	3304      	adds	r3, #4
 800a642:	60fb      	str	r3, [r7, #12]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	4413      	add	r3, r2
 800a64a:	4619      	mov	r1, r3
 800a64c:	f000 f894 	bl	800a778 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.z*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a650:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800a654:	a346      	add	r3, pc, #280	; (adr r3, 800a770 <scaraPosition_packaging+0x190>)
 800a656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65a:	f7f5 ffcd 	bl	80005f8 <__aeabi_dmul>
 800a65e:	4603      	mov	r3, r0
 800a660:	460c      	mov	r4, r1
 800a662:	4618      	mov	r0, r3
 800a664:	4621      	mov	r1, r4
 800a666:	f7f6 fa77 	bl	8000b58 <__aeabi_d2iz>
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	3304      	adds	r3, #4
 800a66e:	60fb      	str	r3, [r7, #12]
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	4413      	add	r3, r2
 800a676:	4619      	mov	r1, r3
 800a678:	f000 f87e 	bl	800a778 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.roll*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a67c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a680:	a33b      	add	r3, pc, #236	; (adr r3, 800a770 <scaraPosition_packaging+0x190>)
 800a682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a686:	f7f5 ffb7 	bl	80005f8 <__aeabi_dmul>
 800a68a:	4603      	mov	r3, r0
 800a68c:	460c      	mov	r4, r1
 800a68e:	4618      	mov	r0, r3
 800a690:	4621      	mov	r1, r4
 800a692:	f7f6 fa61 	bl	8000b58 <__aeabi_d2iz>
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	3304      	adds	r3, #4
 800a69a:	60fb      	str	r3, [r7, #12]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	f000 f868 	bl	800a778 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta1*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a6a8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800a6ac:	a330      	add	r3, pc, #192	; (adr r3, 800a770 <scaraPosition_packaging+0x190>)
 800a6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b2:	f7f5 ffa1 	bl	80005f8 <__aeabi_dmul>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	460c      	mov	r4, r1
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	4621      	mov	r1, r4
 800a6be:	f7f6 fa4b 	bl	8000b58 <__aeabi_d2iz>
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	3304      	adds	r3, #4
 800a6c6:	60fb      	str	r3, [r7, #12]
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	f000 f852 	bl	800a778 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta2*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a6d4:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800a6d8:	a325      	add	r3, pc, #148	; (adr r3, 800a770 <scaraPosition_packaging+0x190>)
 800a6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6de:	f7f5 ff8b 	bl	80005f8 <__aeabi_dmul>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	460c      	mov	r4, r1
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	4621      	mov	r1, r4
 800a6ea:	f7f6 fa35 	bl	8000b58 <__aeabi_d2iz>
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	3304      	adds	r3, #4
 800a6f2:	60fb      	str	r3, [r7, #12]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	f000 f83c 	bl	800a778 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.D3*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a700:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a704:	a31a      	add	r3, pc, #104	; (adr r3, 800a770 <scaraPosition_packaging+0x190>)
 800a706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70a:	f7f5 ff75 	bl	80005f8 <__aeabi_dmul>
 800a70e:	4603      	mov	r3, r0
 800a710:	460c      	mov	r4, r1
 800a712:	4618      	mov	r0, r3
 800a714:	4621      	mov	r1, r4
 800a716:	f7f6 fa1f 	bl	8000b58 <__aeabi_d2iz>
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	3304      	adds	r3, #4
 800a71e:	60fb      	str	r3, [r7, #12]
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	4413      	add	r3, r2
 800a726:	4619      	mov	r1, r3
 800a728:	f000 f826 	bl	800a778 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta4*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a72c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800a730:	a30f      	add	r3, pc, #60	; (adr r3, 800a770 <scaraPosition_packaging+0x190>)
 800a732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a736:	f7f5 ff5f 	bl	80005f8 <__aeabi_dmul>
 800a73a:	4603      	mov	r3, r0
 800a73c:	460c      	mov	r4, r1
 800a73e:	4618      	mov	r0, r3
 800a740:	4621      	mov	r1, r4
 800a742:	f7f6 fa09 	bl	8000b58 <__aeabi_d2iz>
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	3304      	adds	r3, #4
 800a74a:	60fb      	str	r3, [r7, #12]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	4413      	add	r3, r2
 800a752:	4619      	mov	r1, r3
 800a754:	f000 f810 	bl	800a778 <Append_Coordinate_Value>
	return cur_ptr + 4;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	3304      	adds	r3, #4
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3714      	adds	r7, #20
 800a760:	46bd      	mov	sp, r7
 800a762:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a766:	b002      	add	sp, #8
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	f3af 8000 	nop.w
 800a770:	00000000 	.word	0x00000000
 800a774:	412e8480 	.word	0x412e8480

0800a778 <Append_Coordinate_Value>:

void Append_Coordinate_Value(int32_t append_value, uint8_t* append_position)
{
 800a778:	b480      	push	{r7}
 800a77a:	b083      	sub	sp, #12
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
	append_position[0] = (uint8_t)(append_value & 0xff);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	b2da      	uxtb	r2, r3
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	701a      	strb	r2, [r3, #0]
	append_position[1] = (uint8_t)(append_value >> 8 & 0xff);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	121a      	asrs	r2, r3, #8
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	3301      	adds	r3, #1
 800a792:	b2d2      	uxtb	r2, r2
 800a794:	701a      	strb	r2, [r3, #0]
	append_position[2] = (uint8_t)(append_value >> 16 & 0xff);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	141a      	asrs	r2, r3, #16
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	3302      	adds	r3, #2
 800a79e:	b2d2      	uxtb	r2, r2
 800a7a0:	701a      	strb	r2, [r3, #0]
	append_position[3] = (uint8_t)(append_value >> 24 & 0xff);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	161a      	asrs	r2, r3, #24
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	3303      	adds	r3, #3
 800a7aa:	b2d2      	uxtb	r2, r2
 800a7ac:	701a      	strb	r2, [r3, #0]
}
 800a7ae:	bf00      	nop
 800a7b0:	370c      	adds	r7, #12
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr
 800a7ba:	0000      	movs	r0, r0
 800a7bc:	0000      	movs	r0, r0
	...

0800a7c0 <scaraKeyInit1>:
SCARA_StatusTypeDef  scaraKeyInit1(SCARA_KeyTypeDef key, int32_t speed)
{
 800a7c0:	b590      	push	{r4, r7, lr}
 800a7c2:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
 800a7c6:	af6c      	add	r7, sp, #432	; 0x1b0
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	463b      	mov	r3, r7
 800a7cc:	6019      	str	r1, [r3, #0]
 800a7ce:	1dfb      	adds	r3, r7, #7
 800a7d0:	701a      	strb	r2, [r3, #0]
	DUTY_Command_TypeDef cmd;
	SCARA_StatusTypeDef status;
	cmd.coordinate_type = DUTY_COORDINATES_REL;
 800a7d2:	f107 0308 	add.w	r3, r7, #8
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	731a      	strb	r2, [r3, #12]
	cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 800a7da:	f107 0308 	add.w	r3, r7, #8
 800a7de:	2200      	movs	r2, #0
 800a7e0:	741a      	strb	r2, [r3, #16]
	cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 800a7e2:	f107 0308 	add.w	r3, r7, #8
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	745a      	strb	r2, [r3, #17]
	double v_current = 0;
 800a7ea:	f04f 0300 	mov.w	r3, #0
 800a7ee:	f04f 0400 	mov.w	r4, #0
 800a7f2:	e9c7 3474 	strd	r3, r4, [r7, #464]	; 0x1d0
	Trajectory_LSPB_TypeDef *lspb;
	if(speed < SHIFT_SPEED_MIN || speed > SHIFT_SPEED_MAX){
 800a7f6:	463b      	mov	r3, r7
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	dd03      	ble.n	800a806 <scaraKeyInit1+0x46>
 800a7fe:	463b      	mov	r3, r7
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2b0e      	cmp	r3, #14
 800a804:	dd01      	ble.n	800a80a <scaraKeyInit1+0x4a>
		return SCARA_STATUS_ERROR_PARA;
 800a806:	2306      	movs	r3, #6
 800a808:	e2c0      	b.n	800ad8c <scaraKeyInit1+0x5cc>
	}
	switch(key){
 800a80a:	1dfb      	adds	r3, r7, #7
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	2b07      	cmp	r3, #7
 800a810:	f200 8298 	bhi.w	800ad44 <scaraKeyInit1+0x584>
 800a814:	a201      	add	r2, pc, #4	; (adr r2, 800a81c <scaraKeyInit1+0x5c>)
 800a816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a81a:	bf00      	nop
 800a81c:	0800a83d 	.word	0x0800a83d
 800a820:	0800a8df 	.word	0x0800a8df
 800a824:	0800a985 	.word	0x0800a985
 800a828:	0800aa23 	.word	0x0800aa23
 800a82c:	0800aac5 	.word	0x0800aac5
 800a830:	0800ab63 	.word	0x0800ab63
 800a834:	0800ac05 	.word	0x0800ac05
 800a838:	0800aca3 	.word	0x0800aca3
		case SCARA_KEY_X_INC:{
			cmd.v_factor = 0;
 800a83c:	f107 0208 	add.w	r2, r7, #8
 800a840:	f04f 0300 	mov.w	r3, #0
 800a844:	f04f 0400 	mov.w	r4, #0
 800a848:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a84c:	f107 0308 	add.w	r3, r7, #8
 800a850:	2200      	movs	r2, #0
 800a852:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a854:	f107 0308 	add.w	r3, r7, #8
 800a858:	2200      	movs	r2, #0
 800a85a:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= speed*SHIFT_KEY_S;
 800a85c:	463b      	mov	r3, r7
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	4613      	mov	r3, r2
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	4413      	add	r3, r2
 800a866:	4618      	mov	r0, r3
 800a868:	f7f5 fe5c 	bl	8000524 <__aeabi_i2d>
 800a86c:	4603      	mov	r3, r0
 800a86e:	460c      	mov	r4, r1
 800a870:	f107 0208 	add.w	r2, r7, #8
 800a874:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800a878:	f107 0208 	add.w	r2, r7, #8
 800a87c:	f04f 0300 	mov.w	r3, #0
 800a880:	f04f 0400 	mov.w	r4, #0
 800a884:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800a888:	f107 0208 	add.w	r2, r7, #8
 800a88c:	f04f 0300 	mov.w	r3, #0
 800a890:	f04f 0400 	mov.w	r4, #0
 800a894:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800a898:	f107 0208 	add.w	r2, r7, #8
 800a89c:	f04f 0300 	mov.w	r3, #0
 800a8a0:	f04f 0400 	mov.w	r4, #0
 800a8a4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a8a8:	463b      	mov	r3, r7
 800a8aa:	6818      	ldr	r0, [r3, #0]
 800a8ac:	f7f5 fe3a 	bl	8000524 <__aeabi_i2d>
 800a8b0:	f20f 43e4 	addw	r3, pc, #1252	; 0x4e4
 800a8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b8:	f7f5 fe9e 	bl	80005f8 <__aeabi_dmul>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	460c      	mov	r4, r1
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	4621      	mov	r1, r4
 800a8c4:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 800a8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8cc:	f7f5 fcde 	bl	800028c <__adddf3>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	460c      	mov	r4, r1
 800a8d4:	f107 0208 	add.w	r2, r7, #8
 800a8d8:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800a8dc:	e232      	b.n	800ad44 <scaraKeyInit1+0x584>
		case SCARA_KEY_X_DEC:{
			cmd.v_factor = 0;
 800a8de:	f107 0208 	add.w	r2, r7, #8
 800a8e2:	f04f 0300 	mov.w	r3, #0
 800a8e6:	f04f 0400 	mov.w	r4, #0
 800a8ea:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a8ee:	f107 0308 	add.w	r3, r7, #8
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a8f6:	f107 0308 	add.w	r3, r7, #8
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= -speed*SHIFT_KEY_S;
 800a8fe:	463b      	mov	r3, r7
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	4613      	mov	r3, r2
 800a904:	079b      	lsls	r3, r3, #30
 800a906:	1a9b      	subs	r3, r3, r2
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	1a9b      	subs	r3, r3, r2
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7f5 fe09 	bl	8000524 <__aeabi_i2d>
 800a912:	4603      	mov	r3, r0
 800a914:	460c      	mov	r4, r1
 800a916:	f107 0208 	add.w	r2, r7, #8
 800a91a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800a91e:	f107 0208 	add.w	r2, r7, #8
 800a922:	f04f 0300 	mov.w	r3, #0
 800a926:	f04f 0400 	mov.w	r4, #0
 800a92a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800a92e:	f107 0208 	add.w	r2, r7, #8
 800a932:	f04f 0300 	mov.w	r3, #0
 800a936:	f04f 0400 	mov.w	r4, #0
 800a93a:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800a93e:	f107 0208 	add.w	r2, r7, #8
 800a942:	f04f 0300 	mov.w	r3, #0
 800a946:	f04f 0400 	mov.w	r4, #0
 800a94a:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a94e:	463b      	mov	r3, r7
 800a950:	6818      	ldr	r0, [r3, #0]
 800a952:	f7f5 fde7 	bl	8000524 <__aeabi_i2d>
 800a956:	f20f 4340 	addw	r3, pc, #1088	; 0x440
 800a95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95e:	f7f5 fe4b 	bl	80005f8 <__aeabi_dmul>
 800a962:	4603      	mov	r3, r0
 800a964:	460c      	mov	r4, r1
 800a966:	4618      	mov	r0, r3
 800a968:	4621      	mov	r1, r4
 800a96a:	f20f 4334 	addw	r3, pc, #1076	; 0x434
 800a96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a972:	f7f5 fc8b 	bl	800028c <__adddf3>
 800a976:	4603      	mov	r3, r0
 800a978:	460c      	mov	r4, r1
 800a97a:	f107 0208 	add.w	r2, r7, #8
 800a97e:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800a982:	e1df      	b.n	800ad44 <scaraKeyInit1+0x584>
		case SCARA_KEY_Y_INC:{
			cmd.v_factor = 0;
 800a984:	f107 0208 	add.w	r2, r7, #8
 800a988:	f04f 0300 	mov.w	r3, #0
 800a98c:	f04f 0400 	mov.w	r4, #0
 800a990:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a994:	f107 0308 	add.w	r3, r7, #8
 800a998:	2200      	movs	r2, #0
 800a99a:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a99c:	f107 0308 	add.w	r3, r7, #8
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800a9a4:	f107 0208 	add.w	r2, r7, #8
 800a9a8:	f04f 0300 	mov.w	r3, #0
 800a9ac:	f04f 0400 	mov.w	r4, #0
 800a9b0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= speed*SHIFT_KEY_S;
 800a9b4:	463b      	mov	r3, r7
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	4613      	mov	r3, r2
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	4413      	add	r3, r2
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7f5 fdb0 	bl	8000524 <__aeabi_i2d>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	460c      	mov	r4, r1
 800a9c8:	f107 0208 	add.w	r2, r7, #8
 800a9cc:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800a9d0:	f107 0208 	add.w	r2, r7, #8
 800a9d4:	f04f 0300 	mov.w	r3, #0
 800a9d8:	f04f 0400 	mov.w	r4, #0
 800a9dc:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800a9e0:	f107 0208 	add.w	r2, r7, #8
 800a9e4:	f04f 0300 	mov.w	r3, #0
 800a9e8:	f04f 0400 	mov.w	r4, #0
 800a9ec:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a9f0:	463b      	mov	r3, r7
 800a9f2:	6818      	ldr	r0, [r3, #0]
 800a9f4:	f7f5 fd96 	bl	8000524 <__aeabi_i2d>
 800a9f8:	a3e7      	add	r3, pc, #924	; (adr r3, 800ad98 <scaraKeyInit1+0x5d8>)
 800a9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fe:	f7f5 fdfb 	bl	80005f8 <__aeabi_dmul>
 800aa02:	4603      	mov	r3, r0
 800aa04:	460c      	mov	r4, r1
 800aa06:	4618      	mov	r0, r3
 800aa08:	4621      	mov	r1, r4
 800aa0a:	a3e5      	add	r3, pc, #916	; (adr r3, 800ada0 <scaraKeyInit1+0x5e0>)
 800aa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa10:	f7f5 fc3c 	bl	800028c <__adddf3>
 800aa14:	4603      	mov	r3, r0
 800aa16:	460c      	mov	r4, r1
 800aa18:	f107 0208 	add.w	r2, r7, #8
 800aa1c:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800aa20:	e190      	b.n	800ad44 <scaraKeyInit1+0x584>

		case SCARA_KEY_Y_DEC:{
			cmd.v_factor = 0;
 800aa22:	f107 0208 	add.w	r2, r7, #8
 800aa26:	f04f 0300 	mov.w	r3, #0
 800aa2a:	f04f 0400 	mov.w	r4, #0
 800aa2e:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800aa32:	f107 0308 	add.w	r3, r7, #8
 800aa36:	2200      	movs	r2, #0
 800aa38:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800aa3a:	f107 0308 	add.w	r3, r7, #8
 800aa3e:	2200      	movs	r2, #0
 800aa40:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800aa42:	f107 0208 	add.w	r2, r7, #8
 800aa46:	f04f 0300 	mov.w	r3, #0
 800aa4a:	f04f 0400 	mov.w	r4, #0
 800aa4e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= -speed*SHIFT_KEY_S;
 800aa52:	463b      	mov	r3, r7
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	4613      	mov	r3, r2
 800aa58:	079b      	lsls	r3, r3, #30
 800aa5a:	1a9b      	subs	r3, r3, r2
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	1a9b      	subs	r3, r3, r2
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7f5 fd5f 	bl	8000524 <__aeabi_i2d>
 800aa66:	4603      	mov	r3, r0
 800aa68:	460c      	mov	r4, r1
 800aa6a:	f107 0208 	add.w	r2, r7, #8
 800aa6e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800aa72:	f107 0208 	add.w	r2, r7, #8
 800aa76:	f04f 0300 	mov.w	r3, #0
 800aa7a:	f04f 0400 	mov.w	r4, #0
 800aa7e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800aa82:	f107 0208 	add.w	r2, r7, #8
 800aa86:	f04f 0300 	mov.w	r3, #0
 800aa8a:	f04f 0400 	mov.w	r4, #0
 800aa8e:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800aa92:	463b      	mov	r3, r7
 800aa94:	6818      	ldr	r0, [r3, #0]
 800aa96:	f7f5 fd45 	bl	8000524 <__aeabi_i2d>
 800aa9a:	a3bf      	add	r3, pc, #764	; (adr r3, 800ad98 <scaraKeyInit1+0x5d8>)
 800aa9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa0:	f7f5 fdaa 	bl	80005f8 <__aeabi_dmul>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	460c      	mov	r4, r1
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	4621      	mov	r1, r4
 800aaac:	a3bc      	add	r3, pc, #752	; (adr r3, 800ada0 <scaraKeyInit1+0x5e0>)
 800aaae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab2:	f7f5 fbeb 	bl	800028c <__adddf3>
 800aab6:	4603      	mov	r3, r0
 800aab8:	460c      	mov	r4, r1
 800aaba:	f107 0208 	add.w	r2, r7, #8
 800aabe:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800aac2:	e13f      	b.n	800ad44 <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_INC:{
			cmd.v_factor = 0;
 800aac4:	f107 0208 	add.w	r2, r7, #8
 800aac8:	f04f 0300 	mov.w	r3, #0
 800aacc:	f04f 0400 	mov.w	r4, #0
 800aad0:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800aad4:	f107 0308 	add.w	r3, r7, #8
 800aad8:	2200      	movs	r2, #0
 800aada:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800aadc:	f107 0308 	add.w	r3, r7, #8
 800aae0:	2200      	movs	r2, #0
 800aae2:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800aae4:	f107 0208 	add.w	r2, r7, #8
 800aae8:	f04f 0300 	mov.w	r3, #0
 800aaec:	f04f 0400 	mov.w	r4, #0
 800aaf0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800aaf4:	f107 0208 	add.w	r2, r7, #8
 800aaf8:	f04f 0300 	mov.w	r3, #0
 800aafc:	f04f 0400 	mov.w	r4, #0
 800ab00:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= speed*SHIFT_KEY_S;
 800ab04:	463b      	mov	r3, r7
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	4613      	mov	r3, r2
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	4413      	add	r3, r2
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f7f5 fd08 	bl	8000524 <__aeabi_i2d>
 800ab14:	4603      	mov	r3, r0
 800ab16:	460c      	mov	r4, r1
 800ab18:	f107 0208 	add.w	r2, r7, #8
 800ab1c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ab20:	f107 0208 	add.w	r2, r7, #8
 800ab24:	f04f 0300 	mov.w	r3, #0
 800ab28:	f04f 0400 	mov.w	r4, #0
 800ab2c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ab30:	463b      	mov	r3, r7
 800ab32:	6818      	ldr	r0, [r3, #0]
 800ab34:	f7f5 fcf6 	bl	8000524 <__aeabi_i2d>
 800ab38:	a397      	add	r3, pc, #604	; (adr r3, 800ad98 <scaraKeyInit1+0x5d8>)
 800ab3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3e:	f7f5 fd5b 	bl	80005f8 <__aeabi_dmul>
 800ab42:	4603      	mov	r3, r0
 800ab44:	460c      	mov	r4, r1
 800ab46:	4618      	mov	r0, r3
 800ab48:	4621      	mov	r1, r4
 800ab4a:	a395      	add	r3, pc, #596	; (adr r3, 800ada0 <scaraKeyInit1+0x5e0>)
 800ab4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab50:	f7f5 fb9c 	bl	800028c <__adddf3>
 800ab54:	4603      	mov	r3, r0
 800ab56:	460c      	mov	r4, r1
 800ab58:	f107 0208 	add.w	r2, r7, #8
 800ab5c:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800ab60:	e0f0      	b.n	800ad44 <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_DEC:{
			cmd.v_factor = 0;
 800ab62:	f107 0208 	add.w	r2, r7, #8
 800ab66:	f04f 0300 	mov.w	r3, #0
 800ab6a:	f04f 0400 	mov.w	r4, #0
 800ab6e:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ab72:	f107 0308 	add.w	r3, r7, #8
 800ab76:	2200      	movs	r2, #0
 800ab78:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ab7a:	f107 0308 	add.w	r3, r7, #8
 800ab7e:	2200      	movs	r2, #0
 800ab80:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ab82:	f107 0208 	add.w	r2, r7, #8
 800ab86:	f04f 0300 	mov.w	r3, #0
 800ab8a:	f04f 0400 	mov.w	r4, #0
 800ab8e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ab92:	f107 0208 	add.w	r2, r7, #8
 800ab96:	f04f 0300 	mov.w	r3, #0
 800ab9a:	f04f 0400 	mov.w	r4, #0
 800ab9e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= -speed*SHIFT_KEY_S;
 800aba2:	463b      	mov	r3, r7
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	4613      	mov	r3, r2
 800aba8:	079b      	lsls	r3, r3, #30
 800abaa:	1a9b      	subs	r3, r3, r2
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	1a9b      	subs	r3, r3, r2
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7f5 fcb7 	bl	8000524 <__aeabi_i2d>
 800abb6:	4603      	mov	r3, r0
 800abb8:	460c      	mov	r4, r1
 800abba:	f107 0208 	add.w	r2, r7, #8
 800abbe:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800abc2:	f107 0208 	add.w	r2, r7, #8
 800abc6:	f04f 0300 	mov.w	r3, #0
 800abca:	f04f 0400 	mov.w	r4, #0
 800abce:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800abd2:	463b      	mov	r3, r7
 800abd4:	6818      	ldr	r0, [r3, #0]
 800abd6:	f7f5 fca5 	bl	8000524 <__aeabi_i2d>
 800abda:	a36f      	add	r3, pc, #444	; (adr r3, 800ad98 <scaraKeyInit1+0x5d8>)
 800abdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe0:	f7f5 fd0a 	bl	80005f8 <__aeabi_dmul>
 800abe4:	4603      	mov	r3, r0
 800abe6:	460c      	mov	r4, r1
 800abe8:	4618      	mov	r0, r3
 800abea:	4621      	mov	r1, r4
 800abec:	a36c      	add	r3, pc, #432	; (adr r3, 800ada0 <scaraKeyInit1+0x5e0>)
 800abee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf2:	f7f5 fb4b 	bl	800028c <__adddf3>
 800abf6:	4603      	mov	r3, r0
 800abf8:	460c      	mov	r4, r1
 800abfa:	f107 0208 	add.w	r2, r7, #8
 800abfe:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800ac02:	e09f      	b.n	800ad44 <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_INC:{
			cmd.v_factor = 0;
 800ac04:	f107 0208 	add.w	r2, r7, #8
 800ac08:	f04f 0300 	mov.w	r3, #0
 800ac0c:	f04f 0400 	mov.w	r4, #0
 800ac10:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ac14:	f107 0308 	add.w	r3, r7, #8
 800ac18:	2200      	movs	r2, #0
 800ac1a:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ac1c:	f107 0308 	add.w	r3, r7, #8
 800ac20:	2200      	movs	r2, #0
 800ac22:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ac24:	f107 0208 	add.w	r2, r7, #8
 800ac28:	f04f 0300 	mov.w	r3, #0
 800ac2c:	f04f 0400 	mov.w	r4, #0
 800ac30:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ac34:	f107 0208 	add.w	r2, r7, #8
 800ac38:	f04f 0300 	mov.w	r3, #0
 800ac3c:	f04f 0400 	mov.w	r4, #0
 800ac40:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ac44:	f107 0208 	add.w	r2, r7, #8
 800ac48:	f04f 0300 	mov.w	r3, #0
 800ac4c:	f04f 0400 	mov.w	r4, #0
 800ac50:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= speed*SHIFT_KEY_S;
 800ac54:	463b      	mov	r3, r7
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	4613      	mov	r3, r2
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	4413      	add	r3, r2
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7f5 fc60 	bl	8000524 <__aeabi_i2d>
 800ac64:	4603      	mov	r3, r0
 800ac66:	460c      	mov	r4, r1
 800ac68:	f107 0208 	add.w	r2, r7, #8
 800ac6c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ac70:	463b      	mov	r3, r7
 800ac72:	6818      	ldr	r0, [r3, #0]
 800ac74:	f7f5 fc56 	bl	8000524 <__aeabi_i2d>
 800ac78:	a347      	add	r3, pc, #284	; (adr r3, 800ad98 <scaraKeyInit1+0x5d8>)
 800ac7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7e:	f7f5 fcbb 	bl	80005f8 <__aeabi_dmul>
 800ac82:	4603      	mov	r3, r0
 800ac84:	460c      	mov	r4, r1
 800ac86:	4618      	mov	r0, r3
 800ac88:	4621      	mov	r1, r4
 800ac8a:	a345      	add	r3, pc, #276	; (adr r3, 800ada0 <scaraKeyInit1+0x5e0>)
 800ac8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac90:	f7f5 fafc 	bl	800028c <__adddf3>
 800ac94:	4603      	mov	r3, r0
 800ac96:	460c      	mov	r4, r1
 800ac98:	f107 0208 	add.w	r2, r7, #8
 800ac9c:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800aca0:	e050      	b.n	800ad44 <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_DEC:{
			cmd.v_factor = 0;
 800aca2:	f107 0208 	add.w	r2, r7, #8
 800aca6:	f04f 0300 	mov.w	r3, #0
 800acaa:	f04f 0400 	mov.w	r4, #0
 800acae:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800acb2:	f107 0308 	add.w	r3, r7, #8
 800acb6:	2200      	movs	r2, #0
 800acb8:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800acba:	f107 0308 	add.w	r3, r7, #8
 800acbe:	2200      	movs	r2, #0
 800acc0:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800acc2:	f107 0208 	add.w	r2, r7, #8
 800acc6:	f04f 0300 	mov.w	r3, #0
 800acca:	f04f 0400 	mov.w	r4, #0
 800acce:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800acd2:	f107 0208 	add.w	r2, r7, #8
 800acd6:	f04f 0300 	mov.w	r3, #0
 800acda:	f04f 0400 	mov.w	r4, #0
 800acde:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ace2:	f107 0208 	add.w	r2, r7, #8
 800ace6:	f04f 0300 	mov.w	r3, #0
 800acea:	f04f 0400 	mov.w	r4, #0
 800acee:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= -speed*SHIFT_KEY_S;
 800acf2:	463b      	mov	r3, r7
 800acf4:	681a      	ldr	r2, [r3, #0]
 800acf6:	4613      	mov	r3, r2
 800acf8:	079b      	lsls	r3, r3, #30
 800acfa:	1a9b      	subs	r3, r3, r2
 800acfc:	009b      	lsls	r3, r3, #2
 800acfe:	1a9b      	subs	r3, r3, r2
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7f5 fc0f 	bl	8000524 <__aeabi_i2d>
 800ad06:	4603      	mov	r3, r0
 800ad08:	460c      	mov	r4, r1
 800ad0a:	f107 0208 	add.w	r2, r7, #8
 800ad0e:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ad12:	463b      	mov	r3, r7
 800ad14:	6818      	ldr	r0, [r3, #0]
 800ad16:	f7f5 fc05 	bl	8000524 <__aeabi_i2d>
 800ad1a:	a31f      	add	r3, pc, #124	; (adr r3, 800ad98 <scaraKeyInit1+0x5d8>)
 800ad1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad20:	f7f5 fc6a 	bl	80005f8 <__aeabi_dmul>
 800ad24:	4603      	mov	r3, r0
 800ad26:	460c      	mov	r4, r1
 800ad28:	4618      	mov	r0, r3
 800ad2a:	4621      	mov	r1, r4
 800ad2c:	a31c      	add	r3, pc, #112	; (adr r3, 800ada0 <scaraKeyInit1+0x5e0>)
 800ad2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad32:	f7f5 faab 	bl	800028c <__adddf3>
 800ad36:	4603      	mov	r3, r0
 800ad38:	460c      	mov	r4, r1
 800ad3a:	f107 0208 	add.w	r2, r7, #8
 800ad3e:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800ad42:	bf00      	nop
	}

	status = scaraInitDuty(cmd);
 800ad44:	f107 0408 	add.w	r4, r7, #8
 800ad48:	4668      	mov	r0, sp
 800ad4a:	f104 0310 	add.w	r3, r4, #16
 800ad4e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800ad52:	4619      	mov	r1, r3
 800ad54:	f00a ff12 	bl	8015b7c <memcpy>
 800ad58:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ad5c:	f7fa fa64 	bl	8005228 <scaraInitDuty>
 800ad60:	4603      	mov	r3, r0
 800ad62:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
	if (status == SCARA_STATUS_OK) {
 800ad66:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d10b      	bne.n	800ad86 <scaraKeyInit1+0x5c6>
		status = scaraTestDuty();
 800ad6e:	f7ff faff 	bl	800a370 <scaraTestDuty>
 800ad72:	4603      	mov	r3, r0
 800ad74:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		if (status != SCARA_STATUS_OK) {
 800ad78:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d005      	beq.n	800ad8c <scaraKeyInit1+0x5cc>
			return status;
 800ad80:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800ad84:	e002      	b.n	800ad8c <scaraKeyInit1+0x5cc>
		// tinh lai run time so vs v hien tai
//		*(runtime) = (v_current - lspb->v0)/(lspb->a_design);
//		scaraFlowDuty(*runtime, &positionKeyInit, positionCurrent);
//		return status;
	} else {
		return status;
 800ad86:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800ad8a:	e7ff      	b.n	800ad8c <scaraKeyInit1+0x5cc>
	}
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f507 77ee 	add.w	r7, r7, #476	; 0x1dc
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd90      	pop	{r4, r7, pc}
 800ad96:	bf00      	nop
 800ad98:	9999999a 	.word	0x9999999a
 800ad9c:	3fa99999 	.word	0x3fa99999
 800ada0:	9999999a 	.word	0x9999999a
 800ada4:	3fe99999 	.word	0x3fe99999

0800ada8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800adae:	2300      	movs	r3, #0
 800adb0:	607b      	str	r3, [r7, #4]
 800adb2:	4b12      	ldr	r3, [pc, #72]	; (800adfc <HAL_MspInit+0x54>)
 800adb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adb6:	4a11      	ldr	r2, [pc, #68]	; (800adfc <HAL_MspInit+0x54>)
 800adb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800adbc:	6453      	str	r3, [r2, #68]	; 0x44
 800adbe:	4b0f      	ldr	r3, [pc, #60]	; (800adfc <HAL_MspInit+0x54>)
 800adc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800adc6:	607b      	str	r3, [r7, #4]
 800adc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800adca:	2300      	movs	r3, #0
 800adcc:	603b      	str	r3, [r7, #0]
 800adce:	4b0b      	ldr	r3, [pc, #44]	; (800adfc <HAL_MspInit+0x54>)
 800add0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800add2:	4a0a      	ldr	r2, [pc, #40]	; (800adfc <HAL_MspInit+0x54>)
 800add4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800add8:	6413      	str	r3, [r2, #64]	; 0x40
 800adda:	4b08      	ldr	r3, [pc, #32]	; (800adfc <HAL_MspInit+0x54>)
 800addc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ade2:	603b      	str	r3, [r7, #0]
 800ade4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800ade6:	2200      	movs	r2, #0
 800ade8:	210f      	movs	r1, #15
 800adea:	f06f 0001 	mvn.w	r0, #1
 800adee:	f000 fbe7 	bl	800b5c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800adf2:	bf00      	nop
 800adf4:	3708      	adds	r7, #8
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	40023800 	.word	0x40023800

0800ae00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b08c      	sub	sp, #48	; 0x30
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800ae10:	2200      	movs	r2, #0
 800ae12:	6879      	ldr	r1, [r7, #4]
 800ae14:	2036      	movs	r0, #54	; 0x36
 800ae16:	f000 fbd3 	bl	800b5c0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800ae1a:	2036      	movs	r0, #54	; 0x36
 800ae1c:	f000 fbec 	bl	800b5f8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800ae20:	2300      	movs	r3, #0
 800ae22:	60fb      	str	r3, [r7, #12]
 800ae24:	4b1f      	ldr	r3, [pc, #124]	; (800aea4 <HAL_InitTick+0xa4>)
 800ae26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae28:	4a1e      	ldr	r2, [pc, #120]	; (800aea4 <HAL_InitTick+0xa4>)
 800ae2a:	f043 0310 	orr.w	r3, r3, #16
 800ae2e:	6413      	str	r3, [r2, #64]	; 0x40
 800ae30:	4b1c      	ldr	r3, [pc, #112]	; (800aea4 <HAL_InitTick+0xa4>)
 800ae32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae34:	f003 0310 	and.w	r3, r3, #16
 800ae38:	60fb      	str	r3, [r7, #12]
 800ae3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800ae3c:	f107 0210 	add.w	r2, r7, #16
 800ae40:	f107 0314 	add.w	r3, r7, #20
 800ae44:	4611      	mov	r1, r2
 800ae46:	4618      	mov	r0, r3
 800ae48:	f002 ff72 	bl	800dd30 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800ae4c:	f002 ff48 	bl	800dce0 <HAL_RCC_GetPCLK1Freq>
 800ae50:	4603      	mov	r3, r0
 800ae52:	005b      	lsls	r3, r3, #1
 800ae54:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800ae56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae58:	4a13      	ldr	r2, [pc, #76]	; (800aea8 <HAL_InitTick+0xa8>)
 800ae5a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae5e:	0c9b      	lsrs	r3, r3, #18
 800ae60:	3b01      	subs	r3, #1
 800ae62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800ae64:	4b11      	ldr	r3, [pc, #68]	; (800aeac <HAL_InitTick+0xac>)
 800ae66:	4a12      	ldr	r2, [pc, #72]	; (800aeb0 <HAL_InitTick+0xb0>)
 800ae68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800ae6a:	4b10      	ldr	r3, [pc, #64]	; (800aeac <HAL_InitTick+0xac>)
 800ae6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ae70:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800ae72:	4a0e      	ldr	r2, [pc, #56]	; (800aeac <HAL_InitTick+0xac>)
 800ae74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae76:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800ae78:	4b0c      	ldr	r3, [pc, #48]	; (800aeac <HAL_InitTick+0xac>)
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ae7e:	4b0b      	ldr	r3, [pc, #44]	; (800aeac <HAL_InitTick+0xac>)
 800ae80:	2200      	movs	r2, #0
 800ae82:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800ae84:	4809      	ldr	r0, [pc, #36]	; (800aeac <HAL_InitTick+0xac>)
 800ae86:	f002 ff85 	bl	800dd94 <HAL_TIM_Base_Init>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d104      	bne.n	800ae9a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800ae90:	4806      	ldr	r0, [pc, #24]	; (800aeac <HAL_InitTick+0xac>)
 800ae92:	f002 ffaa 	bl	800ddea <HAL_TIM_Base_Start_IT>
 800ae96:	4603      	mov	r3, r0
 800ae98:	e000      	b.n	800ae9c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800ae9a:	2301      	movs	r3, #1
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3730      	adds	r7, #48	; 0x30
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	40023800 	.word	0x40023800
 800aea8:	431bde83 	.word	0x431bde83
 800aeac:	20005d28 	.word	0x20005d28
 800aeb0:	40001000 	.word	0x40001000

0800aeb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800aeb8:	bf00      	nop
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr
	...

0800aec4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 800aec8:	2162      	movs	r1, #98	; 0x62
 800aeca:	4802      	ldr	r0, [pc, #8]	; (800aed4 <HardFault_Handler+0x10>)
 800aecc:	f7f6 fdba 	bl	8001a44 <LOG_REPORT>
 800aed0:	e7fa      	b.n	800aec8 <HardFault_Handler+0x4>
 800aed2:	bf00      	nop
 800aed4:	0801b1f8 	.word	0x0801b1f8

0800aed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 800aedc:	2172      	movs	r1, #114	; 0x72
 800aede:	4802      	ldr	r0, [pc, #8]	; (800aee8 <MemManage_Handler+0x10>)
 800aee0:	f7f6 fdb0 	bl	8001a44 <LOG_REPORT>
 800aee4:	e7fa      	b.n	800aedc <MemManage_Handler+0x4>
 800aee6:	bf00      	nop
 800aee8:	0801b210 	.word	0x0801b210

0800aeec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 800aef0:	2182      	movs	r1, #130	; 0x82
 800aef2:	4802      	ldr	r0, [pc, #8]	; (800aefc <BusFault_Handler+0x10>)
 800aef4:	f7f6 fda6 	bl	8001a44 <LOG_REPORT>
 800aef8:	e7fa      	b.n	800aef0 <BusFault_Handler+0x4>
 800aefa:	bf00      	nop
 800aefc:	0801b224 	.word	0x0801b224

0800af00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800af00:	b480      	push	{r7}
 800af02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800af04:	e7fe      	b.n	800af04 <UsageFault_Handler+0x4>

0800af06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800af06:	b480      	push	{r7}
 800af08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800af0a:	bf00      	nop
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800af18:	4802      	ldr	r0, [pc, #8]	; (800af24 <DMA1_Stream4_IRQHandler+0x10>)
 800af1a:	f000 fca3 	bl	800b864 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800af1e:	bf00      	nop
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	20005e28 	.word	0x20005e28

0800af28 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800af2c:	4802      	ldr	r0, [pc, #8]	; (800af38 <UART4_IRQHandler+0x10>)
 800af2e:	f003 fbeb 	bl	800e708 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800af32:	bf00      	nop
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	20005de8 	.word	0x20005de8

0800af3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800af40:	4802      	ldr	r0, [pc, #8]	; (800af4c <TIM6_DAC_IRQHandler+0x10>)
 800af42:	f002 ff76 	bl	800de32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800af46:	bf00      	nop
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	20005d28 	.word	0x20005d28

0800af50 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 800af54:	4b05      	ldr	r3, [pc, #20]	; (800af6c <TIM7_IRQHandler+0x1c>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2101      	movs	r1, #1
 800af5a:	4618      	mov	r0, r3
 800af5c:	f007 fab8 	bl	80124d0 <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800af60:	4803      	ldr	r0, [pc, #12]	; (800af70 <TIM7_IRQHandler+0x20>)
 800af62:	f002 ff66 	bl	800de32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 800af66:	bf00      	nop
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	20004e64 	.word	0x20004e64
 800af70:	20005da8 	.word	0x20005da8

0800af74 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800af78:	4802      	ldr	r0, [pc, #8]	; (800af84 <OTG_FS_IRQHandler+0x10>)
 800af7a:	f001 fa43 	bl	800c404 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800af7e:	bf00      	nop
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	20006764 	.word	0x20006764

0800af88 <_sbrk>:
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	4b11      	ldr	r3, [pc, #68]	; (800afd8 <_sbrk+0x50>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d102      	bne.n	800af9e <_sbrk+0x16>
 800af98:	4b0f      	ldr	r3, [pc, #60]	; (800afd8 <_sbrk+0x50>)
 800af9a:	4a10      	ldr	r2, [pc, #64]	; (800afdc <_sbrk+0x54>)
 800af9c:	601a      	str	r2, [r3, #0]
 800af9e:	4b0e      	ldr	r3, [pc, #56]	; (800afd8 <_sbrk+0x50>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	60fb      	str	r3, [r7, #12]
 800afa4:	4b0c      	ldr	r3, [pc, #48]	; (800afd8 <_sbrk+0x50>)
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	4413      	add	r3, r2
 800afac:	466a      	mov	r2, sp
 800afae:	4293      	cmp	r3, r2
 800afb0:	d907      	bls.n	800afc2 <_sbrk+0x3a>
 800afb2:	f00a fda9 	bl	8015b08 <__errno>
 800afb6:	4602      	mov	r2, r0
 800afb8:	230c      	movs	r3, #12
 800afba:	6013      	str	r3, [r2, #0]
 800afbc:	f04f 33ff 	mov.w	r3, #4294967295
 800afc0:	e006      	b.n	800afd0 <_sbrk+0x48>
 800afc2:	4b05      	ldr	r3, [pc, #20]	; (800afd8 <_sbrk+0x50>)
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	4413      	add	r3, r2
 800afca:	4a03      	ldr	r2, [pc, #12]	; (800afd8 <_sbrk+0x50>)
 800afcc:	6013      	str	r3, [r2, #0]
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	4618      	mov	r0, r3
 800afd2:	3710      	adds	r7, #16
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	20001000 	.word	0x20001000
 800afdc:	20006b70 	.word	0x20006b70

0800afe0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800afe0:	b480      	push	{r7}
 800afe2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800afe4:	4b08      	ldr	r3, [pc, #32]	; (800b008 <SystemInit+0x28>)
 800afe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afea:	4a07      	ldr	r2, [pc, #28]	; (800b008 <SystemInit+0x28>)
 800afec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aff0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800aff4:	4b04      	ldr	r3, [pc, #16]	; (800b008 <SystemInit+0x28>)
 800aff6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800affa:	609a      	str	r2, [r3, #8]
#endif
}
 800affc:	bf00      	nop
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr
 800b006:	bf00      	nop
 800b008:	e000ed00 	.word	0xe000ed00

0800b00c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b086      	sub	sp, #24
 800b010:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b012:	f107 0308 	add.w	r3, r7, #8
 800b016:	2200      	movs	r2, #0
 800b018:	601a      	str	r2, [r3, #0]
 800b01a:	605a      	str	r2, [r3, #4]
 800b01c:	609a      	str	r2, [r3, #8]
 800b01e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b020:	463b      	mov	r3, r7
 800b022:	2200      	movs	r2, #0
 800b024:	601a      	str	r2, [r3, #0]
 800b026:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800b028:	4b1e      	ldr	r3, [pc, #120]	; (800b0a4 <MX_TIM2_Init+0x98>)
 800b02a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b02e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25000;
 800b030:	4b1c      	ldr	r3, [pc, #112]	; (800b0a4 <MX_TIM2_Init+0x98>)
 800b032:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800b036:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b038:	4b1a      	ldr	r3, [pc, #104]	; (800b0a4 <MX_TIM2_Init+0x98>)
 800b03a:	2200      	movs	r2, #0
 800b03c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 800b03e:	4b19      	ldr	r3, [pc, #100]	; (800b0a4 <MX_TIM2_Init+0x98>)
 800b040:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b044:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b046:	4b17      	ldr	r3, [pc, #92]	; (800b0a4 <MX_TIM2_Init+0x98>)
 800b048:	2200      	movs	r2, #0
 800b04a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b04c:	4b15      	ldr	r3, [pc, #84]	; (800b0a4 <MX_TIM2_Init+0x98>)
 800b04e:	2200      	movs	r2, #0
 800b050:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b052:	4814      	ldr	r0, [pc, #80]	; (800b0a4 <MX_TIM2_Init+0x98>)
 800b054:	f002 fe9e 	bl	800dd94 <HAL_TIM_Base_Init>
 800b058:	4603      	mov	r3, r0
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d001      	beq.n	800b062 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800b05e:	f7f8 ff65 	bl	8003f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b066:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b068:	f107 0308 	add.w	r3, r7, #8
 800b06c:	4619      	mov	r1, r3
 800b06e:	480d      	ldr	r0, [pc, #52]	; (800b0a4 <MX_TIM2_Init+0x98>)
 800b070:	f002 ffe7 	bl	800e042 <HAL_TIM_ConfigClockSource>
 800b074:	4603      	mov	r3, r0
 800b076:	2b00      	cmp	r3, #0
 800b078:	d001      	beq.n	800b07e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800b07a:	f7f8 ff57 	bl	8003f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b07e:	2300      	movs	r3, #0
 800b080:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b082:	2300      	movs	r3, #0
 800b084:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b086:	463b      	mov	r3, r7
 800b088:	4619      	mov	r1, r3
 800b08a:	4806      	ldr	r0, [pc, #24]	; (800b0a4 <MX_TIM2_Init+0x98>)
 800b08c:	f003 f9f2 	bl	800e474 <HAL_TIMEx_MasterConfigSynchronization>
 800b090:	4603      	mov	r3, r0
 800b092:	2b00      	cmp	r3, #0
 800b094:	d001      	beq.n	800b09a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800b096:	f7f8 ff49 	bl	8003f2c <Error_Handler>
  }

}
 800b09a:	bf00      	nop
 800b09c:	3718      	adds	r7, #24
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}
 800b0a2:	bf00      	nop
 800b0a4:	20005d68 	.word	0x20005d68

0800b0a8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b0ae:	463b      	mov	r3, r7
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	601a      	str	r2, [r3, #0]
 800b0b4:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800b0b6:	4b15      	ldr	r3, [pc, #84]	; (800b10c <MX_TIM7_Init+0x64>)
 800b0b8:	4a15      	ldr	r2, [pc, #84]	; (800b110 <MX_TIM7_Init+0x68>)
 800b0ba:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800b0bc:	4b13      	ldr	r3, [pc, #76]	; (800b10c <MX_TIM7_Init+0x64>)
 800b0be:	2253      	movs	r2, #83	; 0x53
 800b0c0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b0c2:	4b12      	ldr	r3, [pc, #72]	; (800b10c <MX_TIM7_Init+0x64>)
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800b0c8:	4b10      	ldr	r3, [pc, #64]	; (800b10c <MX_TIM7_Init+0x64>)
 800b0ca:	f242 720f 	movw	r2, #9999	; 0x270f
 800b0ce:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b0d0:	4b0e      	ldr	r3, [pc, #56]	; (800b10c <MX_TIM7_Init+0x64>)
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800b0d6:	480d      	ldr	r0, [pc, #52]	; (800b10c <MX_TIM7_Init+0x64>)
 800b0d8:	f002 fe5c 	bl	800dd94 <HAL_TIM_Base_Init>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d001      	beq.n	800b0e6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800b0e2:	f7f8 ff23 	bl	8003f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800b0ee:	463b      	mov	r3, r7
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	4806      	ldr	r0, [pc, #24]	; (800b10c <MX_TIM7_Init+0x64>)
 800b0f4:	f003 f9be 	bl	800e474 <HAL_TIMEx_MasterConfigSynchronization>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d001      	beq.n	800b102 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800b0fe:	f7f8 ff15 	bl	8003f2c <Error_Handler>
  }

}
 800b102:	bf00      	nop
 800b104:	3708      	adds	r7, #8
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	20005da8 	.word	0x20005da8
 800b110:	40001400 	.word	0x40001400

0800b114 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b124:	d10e      	bne.n	800b144 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b126:	2300      	movs	r3, #0
 800b128:	60fb      	str	r3, [r7, #12]
 800b12a:	4b16      	ldr	r3, [pc, #88]	; (800b184 <HAL_TIM_Base_MspInit+0x70>)
 800b12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b12e:	4a15      	ldr	r2, [pc, #84]	; (800b184 <HAL_TIM_Base_MspInit+0x70>)
 800b130:	f043 0301 	orr.w	r3, r3, #1
 800b134:	6413      	str	r3, [r2, #64]	; 0x40
 800b136:	4b13      	ldr	r3, [pc, #76]	; (800b184 <HAL_TIM_Base_MspInit+0x70>)
 800b138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b13a:	f003 0301 	and.w	r3, r3, #1
 800b13e:	60fb      	str	r3, [r7, #12]
 800b140:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800b142:	e01a      	b.n	800b17a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4a0f      	ldr	r2, [pc, #60]	; (800b188 <HAL_TIM_Base_MspInit+0x74>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d115      	bne.n	800b17a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b14e:	2300      	movs	r3, #0
 800b150:	60bb      	str	r3, [r7, #8]
 800b152:	4b0c      	ldr	r3, [pc, #48]	; (800b184 <HAL_TIM_Base_MspInit+0x70>)
 800b154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b156:	4a0b      	ldr	r2, [pc, #44]	; (800b184 <HAL_TIM_Base_MspInit+0x70>)
 800b158:	f043 0320 	orr.w	r3, r3, #32
 800b15c:	6413      	str	r3, [r2, #64]	; 0x40
 800b15e:	4b09      	ldr	r3, [pc, #36]	; (800b184 <HAL_TIM_Base_MspInit+0x70>)
 800b160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b162:	f003 0320 	and.w	r3, r3, #32
 800b166:	60bb      	str	r3, [r7, #8]
 800b168:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800b16a:	2200      	movs	r2, #0
 800b16c:	2105      	movs	r1, #5
 800b16e:	2037      	movs	r0, #55	; 0x37
 800b170:	f000 fa26 	bl	800b5c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800b174:	2037      	movs	r0, #55	; 0x37
 800b176:	f000 fa3f 	bl	800b5f8 <HAL_NVIC_EnableIRQ>
}
 800b17a:	bf00      	nop
 800b17c:	3710      	adds	r7, #16
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop
 800b184:	40023800 	.word	0x40023800
 800b188:	40001400 	.word	0x40001400

0800b18c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800b190:	4b11      	ldr	r3, [pc, #68]	; (800b1d8 <MX_UART4_Init+0x4c>)
 800b192:	4a12      	ldr	r2, [pc, #72]	; (800b1dc <MX_UART4_Init+0x50>)
 800b194:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b196:	4b10      	ldr	r3, [pc, #64]	; (800b1d8 <MX_UART4_Init+0x4c>)
 800b198:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b19c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800b19e:	4b0e      	ldr	r3, [pc, #56]	; (800b1d8 <MX_UART4_Init+0x4c>)
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b1a4:	4b0c      	ldr	r3, [pc, #48]	; (800b1d8 <MX_UART4_Init+0x4c>)
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b1aa:	4b0b      	ldr	r3, [pc, #44]	; (800b1d8 <MX_UART4_Init+0x4c>)
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b1b0:	4b09      	ldr	r3, [pc, #36]	; (800b1d8 <MX_UART4_Init+0x4c>)
 800b1b2:	220c      	movs	r2, #12
 800b1b4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b1b6:	4b08      	ldr	r3, [pc, #32]	; (800b1d8 <MX_UART4_Init+0x4c>)
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b1bc:	4b06      	ldr	r3, [pc, #24]	; (800b1d8 <MX_UART4_Init+0x4c>)
 800b1be:	2200      	movs	r2, #0
 800b1c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b1c2:	4805      	ldr	r0, [pc, #20]	; (800b1d8 <MX_UART4_Init+0x4c>)
 800b1c4:	f003 f9e6 	bl	800e594 <HAL_UART_Init>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d001      	beq.n	800b1d2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800b1ce:	f7f8 fead 	bl	8003f2c <Error_Handler>
  }

}
 800b1d2:	bf00      	nop
 800b1d4:	bd80      	pop	{r7, pc}
 800b1d6:	bf00      	nop
 800b1d8:	20005de8 	.word	0x20005de8
 800b1dc:	40004c00 	.word	0x40004c00

0800b1e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b08a      	sub	sp, #40	; 0x28
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b1e8:	f107 0314 	add.w	r3, r7, #20
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	601a      	str	r2, [r3, #0]
 800b1f0:	605a      	str	r2, [r3, #4]
 800b1f2:	609a      	str	r2, [r3, #8]
 800b1f4:	60da      	str	r2, [r3, #12]
 800b1f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a34      	ldr	r2, [pc, #208]	; (800b2d0 <HAL_UART_MspInit+0xf0>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d161      	bne.n	800b2c6 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800b202:	2300      	movs	r3, #0
 800b204:	613b      	str	r3, [r7, #16]
 800b206:	4b33      	ldr	r3, [pc, #204]	; (800b2d4 <HAL_UART_MspInit+0xf4>)
 800b208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b20a:	4a32      	ldr	r2, [pc, #200]	; (800b2d4 <HAL_UART_MspInit+0xf4>)
 800b20c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b210:	6413      	str	r3, [r2, #64]	; 0x40
 800b212:	4b30      	ldr	r3, [pc, #192]	; (800b2d4 <HAL_UART_MspInit+0xf4>)
 800b214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b216:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b21a:	613b      	str	r3, [r7, #16]
 800b21c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b21e:	2300      	movs	r3, #0
 800b220:	60fb      	str	r3, [r7, #12]
 800b222:	4b2c      	ldr	r3, [pc, #176]	; (800b2d4 <HAL_UART_MspInit+0xf4>)
 800b224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b226:	4a2b      	ldr	r2, [pc, #172]	; (800b2d4 <HAL_UART_MspInit+0xf4>)
 800b228:	f043 0301 	orr.w	r3, r3, #1
 800b22c:	6313      	str	r3, [r2, #48]	; 0x30
 800b22e:	4b29      	ldr	r3, [pc, #164]	; (800b2d4 <HAL_UART_MspInit+0xf4>)
 800b230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b232:	f003 0301 	and.w	r3, r3, #1
 800b236:	60fb      	str	r3, [r7, #12]
 800b238:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b23a:	2303      	movs	r3, #3
 800b23c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b23e:	2302      	movs	r3, #2
 800b240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b242:	2301      	movs	r3, #1
 800b244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b246:	2303      	movs	r3, #3
 800b248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800b24a:	2308      	movs	r3, #8
 800b24c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b24e:	f107 0314 	add.w	r3, r7, #20
 800b252:	4619      	mov	r1, r3
 800b254:	4820      	ldr	r0, [pc, #128]	; (800b2d8 <HAL_UART_MspInit+0xf8>)
 800b256:	f000 fd7b 	bl	800bd50 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800b25a:	4b20      	ldr	r3, [pc, #128]	; (800b2dc <HAL_UART_MspInit+0xfc>)
 800b25c:	4a20      	ldr	r2, [pc, #128]	; (800b2e0 <HAL_UART_MspInit+0x100>)
 800b25e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800b260:	4b1e      	ldr	r3, [pc, #120]	; (800b2dc <HAL_UART_MspInit+0xfc>)
 800b262:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b266:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b268:	4b1c      	ldr	r3, [pc, #112]	; (800b2dc <HAL_UART_MspInit+0xfc>)
 800b26a:	2240      	movs	r2, #64	; 0x40
 800b26c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b26e:	4b1b      	ldr	r3, [pc, #108]	; (800b2dc <HAL_UART_MspInit+0xfc>)
 800b270:	2200      	movs	r2, #0
 800b272:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b274:	4b19      	ldr	r3, [pc, #100]	; (800b2dc <HAL_UART_MspInit+0xfc>)
 800b276:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b27a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b27c:	4b17      	ldr	r3, [pc, #92]	; (800b2dc <HAL_UART_MspInit+0xfc>)
 800b27e:	2200      	movs	r2, #0
 800b280:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b282:	4b16      	ldr	r3, [pc, #88]	; (800b2dc <HAL_UART_MspInit+0xfc>)
 800b284:	2200      	movs	r2, #0
 800b286:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800b288:	4b14      	ldr	r3, [pc, #80]	; (800b2dc <HAL_UART_MspInit+0xfc>)
 800b28a:	2200      	movs	r2, #0
 800b28c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b28e:	4b13      	ldr	r3, [pc, #76]	; (800b2dc <HAL_UART_MspInit+0xfc>)
 800b290:	2200      	movs	r2, #0
 800b292:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b294:	4b11      	ldr	r3, [pc, #68]	; (800b2dc <HAL_UART_MspInit+0xfc>)
 800b296:	2200      	movs	r2, #0
 800b298:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800b29a:	4810      	ldr	r0, [pc, #64]	; (800b2dc <HAL_UART_MspInit+0xfc>)
 800b29c:	f000 f9ba 	bl	800b614 <HAL_DMA_Init>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d001      	beq.n	800b2aa <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800b2a6:	f7f8 fe41 	bl	8003f2c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	4a0b      	ldr	r2, [pc, #44]	; (800b2dc <HAL_UART_MspInit+0xfc>)
 800b2ae:	631a      	str	r2, [r3, #48]	; 0x30
 800b2b0:	4a0a      	ldr	r2, [pc, #40]	; (800b2dc <HAL_UART_MspInit+0xfc>)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	2105      	movs	r1, #5
 800b2ba:	2034      	movs	r0, #52	; 0x34
 800b2bc:	f000 f980 	bl	800b5c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800b2c0:	2034      	movs	r0, #52	; 0x34
 800b2c2:	f000 f999 	bl	800b5f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800b2c6:	bf00      	nop
 800b2c8:	3728      	adds	r7, #40	; 0x28
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	40004c00 	.word	0x40004c00
 800b2d4:	40023800 	.word	0x40023800
 800b2d8:	40020000 	.word	0x40020000
 800b2dc:	20005e28 	.word	0x20005e28
 800b2e0:	40026070 	.word	0x40026070

0800b2e4 <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4a0c      	ldr	r2, [pc, #48]	; (800b324 <HAL_UART_TxCpltCallback+0x40>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d112      	bne.n	800b31c <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800b2f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b2fa:	490b      	ldr	r1, [pc, #44]	; (800b328 <HAL_UART_TxCpltCallback+0x44>)
 800b2fc:	480b      	ldr	r0, [pc, #44]	; (800b32c <HAL_UART_TxCpltCallback+0x48>)
 800b2fe:	f7f8 feb4 	bl	800406a <ringBuff_PopArray>
 800b302:	4603      	mov	r3, r0
 800b304:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 800b306:	89fb      	ldrh	r3, [r7, #14]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d006      	beq.n	800b31a <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800b30c:	89fb      	ldrh	r3, [r7, #14]
 800b30e:	461a      	mov	r2, r3
 800b310:	4905      	ldr	r1, [pc, #20]	; (800b328 <HAL_UART_TxCpltCallback+0x44>)
 800b312:	4807      	ldr	r0, [pc, #28]	; (800b330 <HAL_UART_TxCpltCallback+0x4c>)
 800b314:	f003 f98c 	bl	800e630 <HAL_UART_Transmit_DMA>
 800b318:	e000      	b.n	800b31c <HAL_UART_TxCpltCallback+0x38>
			return;
 800b31a:	bf00      	nop
	}
}
 800b31c:	3710      	adds	r7, #16
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	40004c00 	.word	0x40004c00
 800b328:	20004d64 	.word	0x20004d64
 800b32c:	20000410 	.word	0x20000410
 800b330:	20005de8 	.word	0x20005de8

0800b334 <Reset_Handler>:
 800b334:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b36c <LoopFillZerobss+0x14>
 800b338:	2100      	movs	r1, #0
 800b33a:	e003      	b.n	800b344 <LoopCopyDataInit>

0800b33c <CopyDataInit>:
 800b33c:	4b0c      	ldr	r3, [pc, #48]	; (800b370 <LoopFillZerobss+0x18>)
 800b33e:	585b      	ldr	r3, [r3, r1]
 800b340:	5043      	str	r3, [r0, r1]
 800b342:	3104      	adds	r1, #4

0800b344 <LoopCopyDataInit>:
 800b344:	480b      	ldr	r0, [pc, #44]	; (800b374 <LoopFillZerobss+0x1c>)
 800b346:	4b0c      	ldr	r3, [pc, #48]	; (800b378 <LoopFillZerobss+0x20>)
 800b348:	1842      	adds	r2, r0, r1
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d3f6      	bcc.n	800b33c <CopyDataInit>
 800b34e:	4a0b      	ldr	r2, [pc, #44]	; (800b37c <LoopFillZerobss+0x24>)
 800b350:	e002      	b.n	800b358 <LoopFillZerobss>

0800b352 <FillZerobss>:
 800b352:	2300      	movs	r3, #0
 800b354:	f842 3b04 	str.w	r3, [r2], #4

0800b358 <LoopFillZerobss>:
 800b358:	4b09      	ldr	r3, [pc, #36]	; (800b380 <LoopFillZerobss+0x28>)
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d3f9      	bcc.n	800b352 <FillZerobss>
 800b35e:	f7ff fe3f 	bl	800afe0 <SystemInit>
 800b362:	f00a fbd7 	bl	8015b14 <__libc_init_array>
 800b366:	f7f8 fd4d 	bl	8003e04 <main>
 800b36a:	4770      	bx	lr
 800b36c:	20020000 	.word	0x20020000
 800b370:	0801b790 	.word	0x0801b790
 800b374:	20000000 	.word	0x20000000
 800b378:	20000b80 	.word	0x20000b80
 800b37c:	20000b80 	.word	0x20000b80
 800b380:	20006b70 	.word	0x20006b70

0800b384 <ADC_IRQHandler>:
 800b384:	e7fe      	b.n	800b384 <ADC_IRQHandler>
	...

0800b388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b38c:	4b0e      	ldr	r3, [pc, #56]	; (800b3c8 <HAL_Init+0x40>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4a0d      	ldr	r2, [pc, #52]	; (800b3c8 <HAL_Init+0x40>)
 800b392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b396:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b398:	4b0b      	ldr	r3, [pc, #44]	; (800b3c8 <HAL_Init+0x40>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4a0a      	ldr	r2, [pc, #40]	; (800b3c8 <HAL_Init+0x40>)
 800b39e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b3a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b3a4:	4b08      	ldr	r3, [pc, #32]	; (800b3c8 <HAL_Init+0x40>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4a07      	ldr	r2, [pc, #28]	; (800b3c8 <HAL_Init+0x40>)
 800b3aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b3b0:	2003      	movs	r0, #3
 800b3b2:	f000 f8fa 	bl	800b5aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b3b6:	2000      	movs	r0, #0
 800b3b8:	f7ff fd22 	bl	800ae00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b3bc:	f7ff fcf4 	bl	800ada8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b3c0:	2300      	movs	r3, #0
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	40023c00 	.word	0x40023c00

0800b3cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b3d0:	4b06      	ldr	r3, [pc, #24]	; (800b3ec <HAL_IncTick+0x20>)
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	4b06      	ldr	r3, [pc, #24]	; (800b3f0 <HAL_IncTick+0x24>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4413      	add	r3, r2
 800b3dc:	4a04      	ldr	r2, [pc, #16]	; (800b3f0 <HAL_IncTick+0x24>)
 800b3de:	6013      	str	r3, [r2, #0]
}
 800b3e0:	bf00      	nop
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr
 800b3ea:	bf00      	nop
 800b3ec:	20000830 	.word	0x20000830
 800b3f0:	20005e88 	.word	0x20005e88

0800b3f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	af00      	add	r7, sp, #0
  return uwTick;
 800b3f8:	4b03      	ldr	r3, [pc, #12]	; (800b408 <HAL_GetTick+0x14>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	20005e88 	.word	0x20005e88

0800b40c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b414:	f7ff ffee 	bl	800b3f4 <HAL_GetTick>
 800b418:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b424:	d005      	beq.n	800b432 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b426:	4b09      	ldr	r3, [pc, #36]	; (800b44c <HAL_Delay+0x40>)
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	461a      	mov	r2, r3
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	4413      	add	r3, r2
 800b430:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b432:	bf00      	nop
 800b434:	f7ff ffde 	bl	800b3f4 <HAL_GetTick>
 800b438:	4602      	mov	r2, r0
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	1ad3      	subs	r3, r2, r3
 800b43e:	68fa      	ldr	r2, [r7, #12]
 800b440:	429a      	cmp	r2, r3
 800b442:	d8f7      	bhi.n	800b434 <HAL_Delay+0x28>
  {
  }
}
 800b444:	bf00      	nop
 800b446:	3710      	adds	r7, #16
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	20000830 	.word	0x20000830

0800b450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b450:	b480      	push	{r7}
 800b452:	b085      	sub	sp, #20
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f003 0307 	and.w	r3, r3, #7
 800b45e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b460:	4b0c      	ldr	r3, [pc, #48]	; (800b494 <__NVIC_SetPriorityGrouping+0x44>)
 800b462:	68db      	ldr	r3, [r3, #12]
 800b464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b466:	68ba      	ldr	r2, [r7, #8]
 800b468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b46c:	4013      	ands	r3, r2
 800b46e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b47c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b482:	4a04      	ldr	r2, [pc, #16]	; (800b494 <__NVIC_SetPriorityGrouping+0x44>)
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	60d3      	str	r3, [r2, #12]
}
 800b488:	bf00      	nop
 800b48a:	3714      	adds	r7, #20
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr
 800b494:	e000ed00 	.word	0xe000ed00

0800b498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b498:	b480      	push	{r7}
 800b49a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b49c:	4b04      	ldr	r3, [pc, #16]	; (800b4b0 <__NVIC_GetPriorityGrouping+0x18>)
 800b49e:	68db      	ldr	r3, [r3, #12]
 800b4a0:	0a1b      	lsrs	r3, r3, #8
 800b4a2:	f003 0307 	and.w	r3, r3, #7
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr
 800b4b0:	e000ed00 	.word	0xe000ed00

0800b4b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b4be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	db0b      	blt.n	800b4de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b4c6:	79fb      	ldrb	r3, [r7, #7]
 800b4c8:	f003 021f 	and.w	r2, r3, #31
 800b4cc:	4907      	ldr	r1, [pc, #28]	; (800b4ec <__NVIC_EnableIRQ+0x38>)
 800b4ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4d2:	095b      	lsrs	r3, r3, #5
 800b4d4:	2001      	movs	r0, #1
 800b4d6:	fa00 f202 	lsl.w	r2, r0, r2
 800b4da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b4de:	bf00      	nop
 800b4e0:	370c      	adds	r7, #12
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr
 800b4ea:	bf00      	nop
 800b4ec:	e000e100 	.word	0xe000e100

0800b4f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b083      	sub	sp, #12
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	6039      	str	r1, [r7, #0]
 800b4fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b4fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b500:	2b00      	cmp	r3, #0
 800b502:	db0a      	blt.n	800b51a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	b2da      	uxtb	r2, r3
 800b508:	490c      	ldr	r1, [pc, #48]	; (800b53c <__NVIC_SetPriority+0x4c>)
 800b50a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b50e:	0112      	lsls	r2, r2, #4
 800b510:	b2d2      	uxtb	r2, r2
 800b512:	440b      	add	r3, r1
 800b514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b518:	e00a      	b.n	800b530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	b2da      	uxtb	r2, r3
 800b51e:	4908      	ldr	r1, [pc, #32]	; (800b540 <__NVIC_SetPriority+0x50>)
 800b520:	79fb      	ldrb	r3, [r7, #7]
 800b522:	f003 030f 	and.w	r3, r3, #15
 800b526:	3b04      	subs	r3, #4
 800b528:	0112      	lsls	r2, r2, #4
 800b52a:	b2d2      	uxtb	r2, r2
 800b52c:	440b      	add	r3, r1
 800b52e:	761a      	strb	r2, [r3, #24]
}
 800b530:	bf00      	nop
 800b532:	370c      	adds	r7, #12
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr
 800b53c:	e000e100 	.word	0xe000e100
 800b540:	e000ed00 	.word	0xe000ed00

0800b544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b544:	b480      	push	{r7}
 800b546:	b089      	sub	sp, #36	; 0x24
 800b548:	af00      	add	r7, sp, #0
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	60b9      	str	r1, [r7, #8]
 800b54e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f003 0307 	and.w	r3, r3, #7
 800b556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b558:	69fb      	ldr	r3, [r7, #28]
 800b55a:	f1c3 0307 	rsb	r3, r3, #7
 800b55e:	2b04      	cmp	r3, #4
 800b560:	bf28      	it	cs
 800b562:	2304      	movcs	r3, #4
 800b564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	3304      	adds	r3, #4
 800b56a:	2b06      	cmp	r3, #6
 800b56c:	d902      	bls.n	800b574 <NVIC_EncodePriority+0x30>
 800b56e:	69fb      	ldr	r3, [r7, #28]
 800b570:	3b03      	subs	r3, #3
 800b572:	e000      	b.n	800b576 <NVIC_EncodePriority+0x32>
 800b574:	2300      	movs	r3, #0
 800b576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b578:	f04f 32ff 	mov.w	r2, #4294967295
 800b57c:	69bb      	ldr	r3, [r7, #24]
 800b57e:	fa02 f303 	lsl.w	r3, r2, r3
 800b582:	43da      	mvns	r2, r3
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	401a      	ands	r2, r3
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b58c:	f04f 31ff 	mov.w	r1, #4294967295
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	fa01 f303 	lsl.w	r3, r1, r3
 800b596:	43d9      	mvns	r1, r3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b59c:	4313      	orrs	r3, r2
         );
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3724      	adds	r7, #36	; 0x24
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr

0800b5aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b082      	sub	sp, #8
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f7ff ff4c 	bl	800b450 <__NVIC_SetPriorityGrouping>
}
 800b5b8:	bf00      	nop
 800b5ba:	3708      	adds	r7, #8
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b086      	sub	sp, #24
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	60b9      	str	r1, [r7, #8]
 800b5ca:	607a      	str	r2, [r7, #4]
 800b5cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b5d2:	f7ff ff61 	bl	800b498 <__NVIC_GetPriorityGrouping>
 800b5d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	68b9      	ldr	r1, [r7, #8]
 800b5dc:	6978      	ldr	r0, [r7, #20]
 800b5de:	f7ff ffb1 	bl	800b544 <NVIC_EncodePriority>
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5e8:	4611      	mov	r1, r2
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7ff ff80 	bl	800b4f0 <__NVIC_SetPriority>
}
 800b5f0:	bf00      	nop
 800b5f2:	3718      	adds	r7, #24
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	4603      	mov	r3, r0
 800b600:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b606:	4618      	mov	r0, r3
 800b608:	f7ff ff54 	bl	800b4b4 <__NVIC_EnableIRQ>
}
 800b60c:	bf00      	nop
 800b60e:	3708      	adds	r7, #8
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b086      	sub	sp, #24
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b61c:	2300      	movs	r3, #0
 800b61e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b620:	f7ff fee8 	bl	800b3f4 <HAL_GetTick>
 800b624:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d101      	bne.n	800b630 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b62c:	2301      	movs	r3, #1
 800b62e:	e099      	b.n	800b764 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2202      	movs	r2, #2
 800b63c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	681a      	ldr	r2, [r3, #0]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f022 0201 	bic.w	r2, r2, #1
 800b64e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b650:	e00f      	b.n	800b672 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b652:	f7ff fecf 	bl	800b3f4 <HAL_GetTick>
 800b656:	4602      	mov	r2, r0
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	1ad3      	subs	r3, r2, r3
 800b65c:	2b05      	cmp	r3, #5
 800b65e:	d908      	bls.n	800b672 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2220      	movs	r2, #32
 800b664:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2203      	movs	r2, #3
 800b66a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b66e:	2303      	movs	r3, #3
 800b670:	e078      	b.n	800b764 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f003 0301 	and.w	r3, r3, #1
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d1e8      	bne.n	800b652 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b688:	697a      	ldr	r2, [r7, #20]
 800b68a:	4b38      	ldr	r3, [pc, #224]	; (800b76c <HAL_DMA_Init+0x158>)
 800b68c:	4013      	ands	r3, r2
 800b68e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	685a      	ldr	r2, [r3, #4]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	689b      	ldr	r3, [r3, #8]
 800b698:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b69e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	691b      	ldr	r3, [r3, #16]
 800b6a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b6aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	699b      	ldr	r3, [r3, #24]
 800b6b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b6b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6a1b      	ldr	r3, [r3, #32]
 800b6bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b6be:	697a      	ldr	r2, [r7, #20]
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c8:	2b04      	cmp	r3, #4
 800b6ca:	d107      	bne.n	800b6dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	697a      	ldr	r2, [r7, #20]
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	697a      	ldr	r2, [r7, #20]
 800b6e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	695b      	ldr	r3, [r3, #20]
 800b6ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	f023 0307 	bic.w	r3, r3, #7
 800b6f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f8:	697a      	ldr	r2, [r7, #20]
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b702:	2b04      	cmp	r3, #4
 800b704:	d117      	bne.n	800b736 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b70a:	697a      	ldr	r2, [r7, #20]
 800b70c:	4313      	orrs	r3, r2
 800b70e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b714:	2b00      	cmp	r3, #0
 800b716:	d00e      	beq.n	800b736 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 fa9f 	bl	800bc5c <DMA_CheckFifoParam>
 800b71e:	4603      	mov	r3, r0
 800b720:	2b00      	cmp	r3, #0
 800b722:	d008      	beq.n	800b736 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2240      	movs	r2, #64	; 0x40
 800b728:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2201      	movs	r2, #1
 800b72e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b732:	2301      	movs	r3, #1
 800b734:	e016      	b.n	800b764 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	697a      	ldr	r2, [r7, #20]
 800b73c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 fa56 	bl	800bbf0 <DMA_CalcBaseAndBitshift>
 800b744:	4603      	mov	r3, r0
 800b746:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b74c:	223f      	movs	r2, #63	; 0x3f
 800b74e:	409a      	lsls	r2, r3
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2200      	movs	r2, #0
 800b758:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2201      	movs	r2, #1
 800b75e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b762:	2300      	movs	r3, #0
}
 800b764:	4618      	mov	r0, r3
 800b766:	3718      	adds	r7, #24
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}
 800b76c:	f010803f 	.word	0xf010803f

0800b770 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b086      	sub	sp, #24
 800b774:	af00      	add	r7, sp, #0
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	60b9      	str	r1, [r7, #8]
 800b77a:	607a      	str	r2, [r7, #4]
 800b77c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b77e:	2300      	movs	r3, #0
 800b780:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b786:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d101      	bne.n	800b796 <HAL_DMA_Start_IT+0x26>
 800b792:	2302      	movs	r3, #2
 800b794:	e040      	b.n	800b818 <HAL_DMA_Start_IT+0xa8>
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2201      	movs	r2, #1
 800b79a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	d12f      	bne.n	800b80a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2202      	movs	r2, #2
 800b7ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	68b9      	ldr	r1, [r7, #8]
 800b7be:	68f8      	ldr	r0, [r7, #12]
 800b7c0:	f000 f9e8 	bl	800bb94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7c8:	223f      	movs	r2, #63	; 0x3f
 800b7ca:	409a      	lsls	r2, r3
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	681a      	ldr	r2, [r3, #0]
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f042 0216 	orr.w	r2, r2, #22
 800b7de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d007      	beq.n	800b7f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f042 0208 	orr.w	r2, r2, #8
 800b7f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	681a      	ldr	r2, [r3, #0]
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f042 0201 	orr.w	r2, r2, #1
 800b806:	601a      	str	r2, [r3, #0]
 800b808:	e005      	b.n	800b816 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2200      	movs	r2, #0
 800b80e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b812:	2302      	movs	r3, #2
 800b814:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b816:	7dfb      	ldrb	r3, [r7, #23]
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3718      	adds	r7, #24
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	2b02      	cmp	r3, #2
 800b832:	d004      	beq.n	800b83e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2280      	movs	r2, #128	; 0x80
 800b838:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b83a:	2301      	movs	r3, #1
 800b83c:	e00c      	b.n	800b858 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2205      	movs	r2, #5
 800b842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f022 0201 	bic.w	r2, r2, #1
 800b854:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b856:	2300      	movs	r3, #0
}
 800b858:	4618      	mov	r0, r3
 800b85a:	370c      	adds	r7, #12
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr

0800b864 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b086      	sub	sp, #24
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b86c:	2300      	movs	r3, #0
 800b86e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b870:	4b92      	ldr	r3, [pc, #584]	; (800babc <HAL_DMA_IRQHandler+0x258>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	4a92      	ldr	r2, [pc, #584]	; (800bac0 <HAL_DMA_IRQHandler+0x25c>)
 800b876:	fba2 2303 	umull	r2, r3, r2, r3
 800b87a:	0a9b      	lsrs	r3, r3, #10
 800b87c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b882:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b88e:	2208      	movs	r2, #8
 800b890:	409a      	lsls	r2, r3
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	4013      	ands	r3, r2
 800b896:	2b00      	cmp	r3, #0
 800b898:	d01a      	beq.n	800b8d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f003 0304 	and.w	r3, r3, #4
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d013      	beq.n	800b8d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f022 0204 	bic.w	r2, r2, #4
 800b8b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8bc:	2208      	movs	r2, #8
 800b8be:	409a      	lsls	r2, r3
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8c8:	f043 0201 	orr.w	r2, r3, #1
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	409a      	lsls	r2, r3
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	4013      	ands	r3, r2
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d012      	beq.n	800b906 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	695b      	ldr	r3, [r3, #20]
 800b8e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d00b      	beq.n	800b906 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	409a      	lsls	r2, r3
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8fe:	f043 0202 	orr.w	r2, r3, #2
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b90a:	2204      	movs	r2, #4
 800b90c:	409a      	lsls	r2, r3
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	4013      	ands	r3, r2
 800b912:	2b00      	cmp	r3, #0
 800b914:	d012      	beq.n	800b93c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f003 0302 	and.w	r3, r3, #2
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00b      	beq.n	800b93c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b928:	2204      	movs	r2, #4
 800b92a:	409a      	lsls	r2, r3
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b934:	f043 0204 	orr.w	r2, r3, #4
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b940:	2210      	movs	r2, #16
 800b942:	409a      	lsls	r2, r3
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	4013      	ands	r3, r2
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d043      	beq.n	800b9d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f003 0308 	and.w	r3, r3, #8
 800b956:	2b00      	cmp	r3, #0
 800b958:	d03c      	beq.n	800b9d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b95e:	2210      	movs	r2, #16
 800b960:	409a      	lsls	r2, r3
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b970:	2b00      	cmp	r3, #0
 800b972:	d018      	beq.n	800b9a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d108      	bne.n	800b994 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b986:	2b00      	cmp	r3, #0
 800b988:	d024      	beq.n	800b9d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	4798      	blx	r3
 800b992:	e01f      	b.n	800b9d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d01b      	beq.n	800b9d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	4798      	blx	r3
 800b9a4:	e016      	b.n	800b9d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d107      	bne.n	800b9c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f022 0208 	bic.w	r2, r2, #8
 800b9c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d003      	beq.n	800b9d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9d8:	2220      	movs	r2, #32
 800b9da:	409a      	lsls	r2, r3
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	4013      	ands	r3, r2
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	f000 808e 	beq.w	800bb02 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f003 0310 	and.w	r3, r3, #16
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	f000 8086 	beq.w	800bb02 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9fa:	2220      	movs	r2, #32
 800b9fc:	409a      	lsls	r2, r3
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	2b05      	cmp	r3, #5
 800ba0c:	d136      	bne.n	800ba7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	681a      	ldr	r2, [r3, #0]
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f022 0216 	bic.w	r2, r2, #22
 800ba1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	695a      	ldr	r2, [r3, #20]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d103      	bne.n	800ba3e <HAL_DMA_IRQHandler+0x1da>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d007      	beq.n	800ba4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	681a      	ldr	r2, [r3, #0]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f022 0208 	bic.w	r2, r2, #8
 800ba4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba52:	223f      	movs	r2, #63	; 0x3f
 800ba54:	409a      	lsls	r2, r3
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2201      	movs	r2, #1
 800ba66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d07d      	beq.n	800bb6e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	4798      	blx	r3
        }
        return;
 800ba7a:	e078      	b.n	800bb6e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d01c      	beq.n	800bac4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d108      	bne.n	800baaa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d030      	beq.n	800bb02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	4798      	blx	r3
 800baa8:	e02b      	b.n	800bb02 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d027      	beq.n	800bb02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	4798      	blx	r3
 800baba:	e022      	b.n	800bb02 <HAL_DMA_IRQHandler+0x29e>
 800babc:	20000828 	.word	0x20000828
 800bac0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d10f      	bne.n	800baf2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	681a      	ldr	r2, [r3, #0]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f022 0210 	bic.w	r2, r2, #16
 800bae0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2200      	movs	r2, #0
 800bae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2201      	movs	r2, #1
 800baee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d003      	beq.n	800bb02 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d032      	beq.n	800bb70 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb0e:	f003 0301 	and.w	r3, r3, #1
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d022      	beq.n	800bb5c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2205      	movs	r2, #5
 800bb1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f022 0201 	bic.w	r2, r2, #1
 800bb2c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	3301      	adds	r3, #1
 800bb32:	60bb      	str	r3, [r7, #8]
 800bb34:	697a      	ldr	r2, [r7, #20]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d307      	bcc.n	800bb4a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f003 0301 	and.w	r3, r3, #1
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d1f2      	bne.n	800bb2e <HAL_DMA_IRQHandler+0x2ca>
 800bb48:	e000      	b.n	800bb4c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800bb4a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2201      	movs	r2, #1
 800bb58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d005      	beq.n	800bb70 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	4798      	blx	r3
 800bb6c:	e000      	b.n	800bb70 <HAL_DMA_IRQHandler+0x30c>
        return;
 800bb6e:	bf00      	nop
    }
  }
}
 800bb70:	3718      	adds	r7, #24
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop

0800bb78 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b083      	sub	sp, #12
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bb86:	b2db      	uxtb	r3, r3
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	370c      	adds	r7, #12
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b085      	sub	sp, #20
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	60f8      	str	r0, [r7, #12]
 800bb9c:	60b9      	str	r1, [r7, #8]
 800bb9e:	607a      	str	r2, [r7, #4]
 800bba0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bbb0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	683a      	ldr	r2, [r7, #0]
 800bbb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	689b      	ldr	r3, [r3, #8]
 800bbbe:	2b40      	cmp	r3, #64	; 0x40
 800bbc0:	d108      	bne.n	800bbd4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	68ba      	ldr	r2, [r7, #8]
 800bbd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800bbd2:	e007      	b.n	800bbe4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	68ba      	ldr	r2, [r7, #8]
 800bbda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	60da      	str	r2, [r3, #12]
}
 800bbe4:	bf00      	nop
 800bbe6:	3714      	adds	r7, #20
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr

0800bbf0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b085      	sub	sp, #20
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	3b10      	subs	r3, #16
 800bc00:	4a14      	ldr	r2, [pc, #80]	; (800bc54 <DMA_CalcBaseAndBitshift+0x64>)
 800bc02:	fba2 2303 	umull	r2, r3, r2, r3
 800bc06:	091b      	lsrs	r3, r3, #4
 800bc08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800bc0a:	4a13      	ldr	r2, [pc, #76]	; (800bc58 <DMA_CalcBaseAndBitshift+0x68>)
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	4413      	add	r3, r2
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	461a      	mov	r2, r3
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2b03      	cmp	r3, #3
 800bc1c:	d909      	bls.n	800bc32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bc26:	f023 0303 	bic.w	r3, r3, #3
 800bc2a:	1d1a      	adds	r2, r3, #4
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	659a      	str	r2, [r3, #88]	; 0x58
 800bc30:	e007      	b.n	800bc42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bc3a:	f023 0303 	bic.w	r3, r3, #3
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3714      	adds	r7, #20
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr
 800bc52:	bf00      	nop
 800bc54:	aaaaaaab 	.word	0xaaaaaaab
 800bc58:	0801b2a0 	.word	0x0801b2a0

0800bc5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b085      	sub	sp, #20
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc64:	2300      	movs	r3, #0
 800bc66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	699b      	ldr	r3, [r3, #24]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d11f      	bne.n	800bcb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	2b03      	cmp	r3, #3
 800bc7a:	d855      	bhi.n	800bd28 <DMA_CheckFifoParam+0xcc>
 800bc7c:	a201      	add	r2, pc, #4	; (adr r2, 800bc84 <DMA_CheckFifoParam+0x28>)
 800bc7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc82:	bf00      	nop
 800bc84:	0800bc95 	.word	0x0800bc95
 800bc88:	0800bca7 	.word	0x0800bca7
 800bc8c:	0800bc95 	.word	0x0800bc95
 800bc90:	0800bd29 	.word	0x0800bd29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d045      	beq.n	800bd2c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800bca0:	2301      	movs	r3, #1
 800bca2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bca4:	e042      	b.n	800bd2c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcaa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bcae:	d13f      	bne.n	800bd30 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bcb4:	e03c      	b.n	800bd30 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	699b      	ldr	r3, [r3, #24]
 800bcba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcbe:	d121      	bne.n	800bd04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	2b03      	cmp	r3, #3
 800bcc4:	d836      	bhi.n	800bd34 <DMA_CheckFifoParam+0xd8>
 800bcc6:	a201      	add	r2, pc, #4	; (adr r2, 800bccc <DMA_CheckFifoParam+0x70>)
 800bcc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bccc:	0800bcdd 	.word	0x0800bcdd
 800bcd0:	0800bce3 	.word	0x0800bce3
 800bcd4:	0800bcdd 	.word	0x0800bcdd
 800bcd8:	0800bcf5 	.word	0x0800bcf5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	73fb      	strb	r3, [r7, #15]
      break;
 800bce0:	e02f      	b.n	800bd42 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bce6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d024      	beq.n	800bd38 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bcf2:	e021      	b.n	800bd38 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcf8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bcfc:	d11e      	bne.n	800bd3c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800bcfe:	2301      	movs	r3, #1
 800bd00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800bd02:	e01b      	b.n	800bd3c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	2b02      	cmp	r3, #2
 800bd08:	d902      	bls.n	800bd10 <DMA_CheckFifoParam+0xb4>
 800bd0a:	2b03      	cmp	r3, #3
 800bd0c:	d003      	beq.n	800bd16 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800bd0e:	e018      	b.n	800bd42 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800bd10:	2301      	movs	r3, #1
 800bd12:	73fb      	strb	r3, [r7, #15]
      break;
 800bd14:	e015      	b.n	800bd42 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d00e      	beq.n	800bd40 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800bd22:	2301      	movs	r3, #1
 800bd24:	73fb      	strb	r3, [r7, #15]
      break;
 800bd26:	e00b      	b.n	800bd40 <DMA_CheckFifoParam+0xe4>
      break;
 800bd28:	bf00      	nop
 800bd2a:	e00a      	b.n	800bd42 <DMA_CheckFifoParam+0xe6>
      break;
 800bd2c:	bf00      	nop
 800bd2e:	e008      	b.n	800bd42 <DMA_CheckFifoParam+0xe6>
      break;
 800bd30:	bf00      	nop
 800bd32:	e006      	b.n	800bd42 <DMA_CheckFifoParam+0xe6>
      break;
 800bd34:	bf00      	nop
 800bd36:	e004      	b.n	800bd42 <DMA_CheckFifoParam+0xe6>
      break;
 800bd38:	bf00      	nop
 800bd3a:	e002      	b.n	800bd42 <DMA_CheckFifoParam+0xe6>
      break;   
 800bd3c:	bf00      	nop
 800bd3e:	e000      	b.n	800bd42 <DMA_CheckFifoParam+0xe6>
      break;
 800bd40:	bf00      	nop
    }
  } 
  
  return status; 
 800bd42:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3714      	adds	r7, #20
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr

0800bd50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b089      	sub	sp, #36	; 0x24
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800bd62:	2300      	movs	r3, #0
 800bd64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bd66:	2300      	movs	r3, #0
 800bd68:	61fb      	str	r3, [r7, #28]
 800bd6a:	e16b      	b.n	800c044 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	69fb      	ldr	r3, [r7, #28]
 800bd70:	fa02 f303 	lsl.w	r3, r2, r3
 800bd74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	697a      	ldr	r2, [r7, #20]
 800bd7c:	4013      	ands	r3, r2
 800bd7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bd80:	693a      	ldr	r2, [r7, #16]
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	f040 815a 	bne.w	800c03e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	d00b      	beq.n	800bdaa <HAL_GPIO_Init+0x5a>
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	2b02      	cmp	r3, #2
 800bd98:	d007      	beq.n	800bdaa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bd9e:	2b11      	cmp	r3, #17
 800bda0:	d003      	beq.n	800bdaa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	2b12      	cmp	r3, #18
 800bda8:	d130      	bne.n	800be0c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	689b      	ldr	r3, [r3, #8]
 800bdae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800bdb0:	69fb      	ldr	r3, [r7, #28]
 800bdb2:	005b      	lsls	r3, r3, #1
 800bdb4:	2203      	movs	r2, #3
 800bdb6:	fa02 f303 	lsl.w	r3, r2, r3
 800bdba:	43db      	mvns	r3, r3
 800bdbc:	69ba      	ldr	r2, [r7, #24]
 800bdbe:	4013      	ands	r3, r2
 800bdc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	68da      	ldr	r2, [r3, #12]
 800bdc6:	69fb      	ldr	r3, [r7, #28]
 800bdc8:	005b      	lsls	r3, r3, #1
 800bdca:	fa02 f303 	lsl.w	r3, r2, r3
 800bdce:	69ba      	ldr	r2, [r7, #24]
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	69ba      	ldr	r2, [r7, #24]
 800bdd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bde0:	2201      	movs	r2, #1
 800bde2:	69fb      	ldr	r3, [r7, #28]
 800bde4:	fa02 f303 	lsl.w	r3, r2, r3
 800bde8:	43db      	mvns	r3, r3
 800bdea:	69ba      	ldr	r2, [r7, #24]
 800bdec:	4013      	ands	r3, r2
 800bdee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	091b      	lsrs	r3, r3, #4
 800bdf6:	f003 0201 	and.w	r2, r3, #1
 800bdfa:	69fb      	ldr	r3, [r7, #28]
 800bdfc:	fa02 f303 	lsl.w	r3, r2, r3
 800be00:	69ba      	ldr	r2, [r7, #24]
 800be02:	4313      	orrs	r3, r2
 800be04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	69ba      	ldr	r2, [r7, #24]
 800be0a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800be12:	69fb      	ldr	r3, [r7, #28]
 800be14:	005b      	lsls	r3, r3, #1
 800be16:	2203      	movs	r2, #3
 800be18:	fa02 f303 	lsl.w	r3, r2, r3
 800be1c:	43db      	mvns	r3, r3
 800be1e:	69ba      	ldr	r2, [r7, #24]
 800be20:	4013      	ands	r3, r2
 800be22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	689a      	ldr	r2, [r3, #8]
 800be28:	69fb      	ldr	r3, [r7, #28]
 800be2a:	005b      	lsls	r3, r3, #1
 800be2c:	fa02 f303 	lsl.w	r3, r2, r3
 800be30:	69ba      	ldr	r2, [r7, #24]
 800be32:	4313      	orrs	r3, r2
 800be34:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	69ba      	ldr	r2, [r7, #24]
 800be3a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	2b02      	cmp	r3, #2
 800be42:	d003      	beq.n	800be4c <HAL_GPIO_Init+0xfc>
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	2b12      	cmp	r3, #18
 800be4a:	d123      	bne.n	800be94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800be4c:	69fb      	ldr	r3, [r7, #28]
 800be4e:	08da      	lsrs	r2, r3, #3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	3208      	adds	r2, #8
 800be54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800be5a:	69fb      	ldr	r3, [r7, #28]
 800be5c:	f003 0307 	and.w	r3, r3, #7
 800be60:	009b      	lsls	r3, r3, #2
 800be62:	220f      	movs	r2, #15
 800be64:	fa02 f303 	lsl.w	r3, r2, r3
 800be68:	43db      	mvns	r3, r3
 800be6a:	69ba      	ldr	r2, [r7, #24]
 800be6c:	4013      	ands	r3, r2
 800be6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	691a      	ldr	r2, [r3, #16]
 800be74:	69fb      	ldr	r3, [r7, #28]
 800be76:	f003 0307 	and.w	r3, r3, #7
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	fa02 f303 	lsl.w	r3, r2, r3
 800be80:	69ba      	ldr	r2, [r7, #24]
 800be82:	4313      	orrs	r3, r2
 800be84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800be86:	69fb      	ldr	r3, [r7, #28]
 800be88:	08da      	lsrs	r2, r3, #3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	3208      	adds	r2, #8
 800be8e:	69b9      	ldr	r1, [r7, #24]
 800be90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800be9a:	69fb      	ldr	r3, [r7, #28]
 800be9c:	005b      	lsls	r3, r3, #1
 800be9e:	2203      	movs	r2, #3
 800bea0:	fa02 f303 	lsl.w	r3, r2, r3
 800bea4:	43db      	mvns	r3, r3
 800bea6:	69ba      	ldr	r2, [r7, #24]
 800bea8:	4013      	ands	r3, r2
 800beaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	685b      	ldr	r3, [r3, #4]
 800beb0:	f003 0203 	and.w	r2, r3, #3
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	005b      	lsls	r3, r3, #1
 800beb8:	fa02 f303 	lsl.w	r3, r2, r3
 800bebc:	69ba      	ldr	r2, [r7, #24]
 800bebe:	4313      	orrs	r3, r2
 800bec0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	69ba      	ldr	r2, [r7, #24]
 800bec6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	f000 80b4 	beq.w	800c03e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bed6:	2300      	movs	r3, #0
 800bed8:	60fb      	str	r3, [r7, #12]
 800beda:	4b5f      	ldr	r3, [pc, #380]	; (800c058 <HAL_GPIO_Init+0x308>)
 800bedc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bede:	4a5e      	ldr	r2, [pc, #376]	; (800c058 <HAL_GPIO_Init+0x308>)
 800bee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bee4:	6453      	str	r3, [r2, #68]	; 0x44
 800bee6:	4b5c      	ldr	r3, [pc, #368]	; (800c058 <HAL_GPIO_Init+0x308>)
 800bee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800beea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800beee:	60fb      	str	r3, [r7, #12]
 800bef0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bef2:	4a5a      	ldr	r2, [pc, #360]	; (800c05c <HAL_GPIO_Init+0x30c>)
 800bef4:	69fb      	ldr	r3, [r7, #28]
 800bef6:	089b      	lsrs	r3, r3, #2
 800bef8:	3302      	adds	r3, #2
 800befa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800befe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800bf00:	69fb      	ldr	r3, [r7, #28]
 800bf02:	f003 0303 	and.w	r3, r3, #3
 800bf06:	009b      	lsls	r3, r3, #2
 800bf08:	220f      	movs	r2, #15
 800bf0a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf0e:	43db      	mvns	r3, r3
 800bf10:	69ba      	ldr	r2, [r7, #24]
 800bf12:	4013      	ands	r3, r2
 800bf14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	4a51      	ldr	r2, [pc, #324]	; (800c060 <HAL_GPIO_Init+0x310>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d02b      	beq.n	800bf76 <HAL_GPIO_Init+0x226>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	4a50      	ldr	r2, [pc, #320]	; (800c064 <HAL_GPIO_Init+0x314>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d025      	beq.n	800bf72 <HAL_GPIO_Init+0x222>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	4a4f      	ldr	r2, [pc, #316]	; (800c068 <HAL_GPIO_Init+0x318>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d01f      	beq.n	800bf6e <HAL_GPIO_Init+0x21e>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	4a4e      	ldr	r2, [pc, #312]	; (800c06c <HAL_GPIO_Init+0x31c>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d019      	beq.n	800bf6a <HAL_GPIO_Init+0x21a>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	4a4d      	ldr	r2, [pc, #308]	; (800c070 <HAL_GPIO_Init+0x320>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d013      	beq.n	800bf66 <HAL_GPIO_Init+0x216>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	4a4c      	ldr	r2, [pc, #304]	; (800c074 <HAL_GPIO_Init+0x324>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d00d      	beq.n	800bf62 <HAL_GPIO_Init+0x212>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	4a4b      	ldr	r2, [pc, #300]	; (800c078 <HAL_GPIO_Init+0x328>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d007      	beq.n	800bf5e <HAL_GPIO_Init+0x20e>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	4a4a      	ldr	r2, [pc, #296]	; (800c07c <HAL_GPIO_Init+0x32c>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d101      	bne.n	800bf5a <HAL_GPIO_Init+0x20a>
 800bf56:	2307      	movs	r3, #7
 800bf58:	e00e      	b.n	800bf78 <HAL_GPIO_Init+0x228>
 800bf5a:	2308      	movs	r3, #8
 800bf5c:	e00c      	b.n	800bf78 <HAL_GPIO_Init+0x228>
 800bf5e:	2306      	movs	r3, #6
 800bf60:	e00a      	b.n	800bf78 <HAL_GPIO_Init+0x228>
 800bf62:	2305      	movs	r3, #5
 800bf64:	e008      	b.n	800bf78 <HAL_GPIO_Init+0x228>
 800bf66:	2304      	movs	r3, #4
 800bf68:	e006      	b.n	800bf78 <HAL_GPIO_Init+0x228>
 800bf6a:	2303      	movs	r3, #3
 800bf6c:	e004      	b.n	800bf78 <HAL_GPIO_Init+0x228>
 800bf6e:	2302      	movs	r3, #2
 800bf70:	e002      	b.n	800bf78 <HAL_GPIO_Init+0x228>
 800bf72:	2301      	movs	r3, #1
 800bf74:	e000      	b.n	800bf78 <HAL_GPIO_Init+0x228>
 800bf76:	2300      	movs	r3, #0
 800bf78:	69fa      	ldr	r2, [r7, #28]
 800bf7a:	f002 0203 	and.w	r2, r2, #3
 800bf7e:	0092      	lsls	r2, r2, #2
 800bf80:	4093      	lsls	r3, r2
 800bf82:	69ba      	ldr	r2, [r7, #24]
 800bf84:	4313      	orrs	r3, r2
 800bf86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bf88:	4934      	ldr	r1, [pc, #208]	; (800c05c <HAL_GPIO_Init+0x30c>)
 800bf8a:	69fb      	ldr	r3, [r7, #28]
 800bf8c:	089b      	lsrs	r3, r3, #2
 800bf8e:	3302      	adds	r3, #2
 800bf90:	69ba      	ldr	r2, [r7, #24]
 800bf92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800bf96:	4b3a      	ldr	r3, [pc, #232]	; (800c080 <HAL_GPIO_Init+0x330>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	43db      	mvns	r3, r3
 800bfa0:	69ba      	ldr	r2, [r7, #24]
 800bfa2:	4013      	ands	r3, r2
 800bfa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	685b      	ldr	r3, [r3, #4]
 800bfaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d003      	beq.n	800bfba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800bfb2:	69ba      	ldr	r2, [r7, #24]
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800bfba:	4a31      	ldr	r2, [pc, #196]	; (800c080 <HAL_GPIO_Init+0x330>)
 800bfbc:	69bb      	ldr	r3, [r7, #24]
 800bfbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800bfc0:	4b2f      	ldr	r3, [pc, #188]	; (800c080 <HAL_GPIO_Init+0x330>)
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	43db      	mvns	r3, r3
 800bfca:	69ba      	ldr	r2, [r7, #24]
 800bfcc:	4013      	ands	r3, r2
 800bfce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	685b      	ldr	r3, [r3, #4]
 800bfd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d003      	beq.n	800bfe4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800bfdc:	69ba      	ldr	r2, [r7, #24]
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	4313      	orrs	r3, r2
 800bfe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800bfe4:	4a26      	ldr	r2, [pc, #152]	; (800c080 <HAL_GPIO_Init+0x330>)
 800bfe6:	69bb      	ldr	r3, [r7, #24]
 800bfe8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800bfea:	4b25      	ldr	r3, [pc, #148]	; (800c080 <HAL_GPIO_Init+0x330>)
 800bfec:	689b      	ldr	r3, [r3, #8]
 800bfee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	43db      	mvns	r3, r3
 800bff4:	69ba      	ldr	r2, [r7, #24]
 800bff6:	4013      	ands	r3, r2
 800bff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c002:	2b00      	cmp	r3, #0
 800c004:	d003      	beq.n	800c00e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800c006:	69ba      	ldr	r2, [r7, #24]
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	4313      	orrs	r3, r2
 800c00c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c00e:	4a1c      	ldr	r2, [pc, #112]	; (800c080 <HAL_GPIO_Init+0x330>)
 800c010:	69bb      	ldr	r3, [r7, #24]
 800c012:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c014:	4b1a      	ldr	r3, [pc, #104]	; (800c080 <HAL_GPIO_Init+0x330>)
 800c016:	68db      	ldr	r3, [r3, #12]
 800c018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	43db      	mvns	r3, r3
 800c01e:	69ba      	ldr	r2, [r7, #24]
 800c020:	4013      	ands	r3, r2
 800c022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d003      	beq.n	800c038 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800c030:	69ba      	ldr	r2, [r7, #24]
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	4313      	orrs	r3, r2
 800c036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c038:	4a11      	ldr	r2, [pc, #68]	; (800c080 <HAL_GPIO_Init+0x330>)
 800c03a:	69bb      	ldr	r3, [r7, #24]
 800c03c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c03e:	69fb      	ldr	r3, [r7, #28]
 800c040:	3301      	adds	r3, #1
 800c042:	61fb      	str	r3, [r7, #28]
 800c044:	69fb      	ldr	r3, [r7, #28]
 800c046:	2b0f      	cmp	r3, #15
 800c048:	f67f ae90 	bls.w	800bd6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c04c:	bf00      	nop
 800c04e:	3724      	adds	r7, #36	; 0x24
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr
 800c058:	40023800 	.word	0x40023800
 800c05c:	40013800 	.word	0x40013800
 800c060:	40020000 	.word	0x40020000
 800c064:	40020400 	.word	0x40020400
 800c068:	40020800 	.word	0x40020800
 800c06c:	40020c00 	.word	0x40020c00
 800c070:	40021000 	.word	0x40021000
 800c074:	40021400 	.word	0x40021400
 800c078:	40021800 	.word	0x40021800
 800c07c:	40021c00 	.word	0x40021c00
 800c080:	40013c00 	.word	0x40013c00

0800c084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	460b      	mov	r3, r1
 800c08e:	807b      	strh	r3, [r7, #2]
 800c090:	4613      	mov	r3, r2
 800c092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c094:	787b      	ldrb	r3, [r7, #1]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d003      	beq.n	800c0a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c09a:	887a      	ldrh	r2, [r7, #2]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c0a0:	e003      	b.n	800c0aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c0a2:	887b      	ldrh	r3, [r7, #2]
 800c0a4:	041a      	lsls	r2, r3, #16
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	619a      	str	r2, [r3, #24]
}
 800c0aa:	bf00      	nop
 800c0ac:	370c      	adds	r7, #12
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b4:	4770      	bx	lr
	...

0800c0b8 <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	60b9      	str	r1, [r7, #8]
 800c0c2:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d101      	bne.n	800c0ce <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	e043      	b.n	800c156 <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800c0d4:	b2db      	uxtb	r3, r3
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d106      	bne.n	800c0e8 <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800c0e2:	68f8      	ldr	r0, [r7, #12]
 800c0e4:	f7f7 fa92 	bl	800360c <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681a      	ldr	r2, [r3, #0]
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	3308      	adds	r3, #8
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	4610      	mov	r0, r2
 800c0f4:	f003 f95a 	bl	800f3ac <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	6818      	ldr	r0, [r3, #0]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	689b      	ldr	r3, [r3, #8]
 800c100:	461a      	mov	r2, r3
 800c102:	68b9      	ldr	r1, [r7, #8]
 800c104:	f003 f9a4 	bl	800f450 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	6858      	ldr	r0, [r3, #4]
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	689a      	ldr	r2, [r3, #8]
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c114:	6879      	ldr	r1, [r7, #4]
 800c116:	f003 f9d9 	bl	800f4cc <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	68fa      	ldr	r2, [r7, #12]
 800c120:	6892      	ldr	r2, [r2, #8]
 800c122:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	68fa      	ldr	r2, [r7, #12]
 800c12c:	6892      	ldr	r2, [r2, #8]
 800c12e:	f041 0101 	orr.w	r1, r1, #1
 800c132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	695b      	ldr	r3, [r3, #20]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d103      	bne.n	800c146 <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800c13e:	4b08      	ldr	r3, [pc, #32]	; (800c160 <HAL_NOR_Init+0xa8>)
 800c140:	2200      	movs	r2, #0
 800c142:	601a      	str	r2, [r3, #0]
 800c144:	e002      	b.n	800c14c <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800c146:	4b06      	ldr	r3, [pc, #24]	; (800c160 <HAL_NOR_Init+0xa8>)
 800c148:	2201      	movs	r2, #1
 800c14a:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2201      	movs	r2, #1
 800c150:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 800c154:	2300      	movs	r3, #0
}
 800c156:	4618      	mov	r0, r3
 800c158:	3710      	adds	r7, #16
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
 800c15e:	bf00      	nop
 800c160:	20001004 	.word	0x20001004

0800c164 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c164:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c166:	b08f      	sub	sp, #60	; 0x3c
 800c168:	af0a      	add	r7, sp, #40	; 0x28
 800c16a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d101      	bne.n	800c176 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c172:	2301      	movs	r3, #1
 800c174:	e10f      	b.n	800c396 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800c182:	b2db      	uxtb	r3, r3
 800c184:	2b00      	cmp	r3, #0
 800c186:	d106      	bne.n	800c196 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2200      	movs	r2, #0
 800c18c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f009 f9b5 	bl	8015500 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2203      	movs	r2, #3
 800c19a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d102      	bne.n	800c1b0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f003 fade 	bl	800f776 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	603b      	str	r3, [r7, #0]
 800c1c0:	687e      	ldr	r6, [r7, #4]
 800c1c2:	466d      	mov	r5, sp
 800c1c4:	f106 0410 	add.w	r4, r6, #16
 800c1c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c1ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c1cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c1ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c1d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c1d4:	e885 0003 	stmia.w	r5, {r0, r1}
 800c1d8:	1d33      	adds	r3, r6, #4
 800c1da:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c1dc:	6838      	ldr	r0, [r7, #0]
 800c1de:	f003 f9b5 	bl	800f54c <USB_CoreInit>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d005      	beq.n	800c1f4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2202      	movs	r2, #2
 800c1ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	e0d0      	b.n	800c396 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	2100      	movs	r1, #0
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f003 facc 	bl	800f798 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c200:	2300      	movs	r3, #0
 800c202:	73fb      	strb	r3, [r7, #15]
 800c204:	e04a      	b.n	800c29c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c206:	7bfa      	ldrb	r2, [r7, #15]
 800c208:	6879      	ldr	r1, [r7, #4]
 800c20a:	4613      	mov	r3, r2
 800c20c:	00db      	lsls	r3, r3, #3
 800c20e:	1a9b      	subs	r3, r3, r2
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	440b      	add	r3, r1
 800c214:	333d      	adds	r3, #61	; 0x3d
 800c216:	2201      	movs	r2, #1
 800c218:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c21a:	7bfa      	ldrb	r2, [r7, #15]
 800c21c:	6879      	ldr	r1, [r7, #4]
 800c21e:	4613      	mov	r3, r2
 800c220:	00db      	lsls	r3, r3, #3
 800c222:	1a9b      	subs	r3, r3, r2
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	440b      	add	r3, r1
 800c228:	333c      	adds	r3, #60	; 0x3c
 800c22a:	7bfa      	ldrb	r2, [r7, #15]
 800c22c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c22e:	7bfa      	ldrb	r2, [r7, #15]
 800c230:	7bfb      	ldrb	r3, [r7, #15]
 800c232:	b298      	uxth	r0, r3
 800c234:	6879      	ldr	r1, [r7, #4]
 800c236:	4613      	mov	r3, r2
 800c238:	00db      	lsls	r3, r3, #3
 800c23a:	1a9b      	subs	r3, r3, r2
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	440b      	add	r3, r1
 800c240:	3342      	adds	r3, #66	; 0x42
 800c242:	4602      	mov	r2, r0
 800c244:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c246:	7bfa      	ldrb	r2, [r7, #15]
 800c248:	6879      	ldr	r1, [r7, #4]
 800c24a:	4613      	mov	r3, r2
 800c24c:	00db      	lsls	r3, r3, #3
 800c24e:	1a9b      	subs	r3, r3, r2
 800c250:	009b      	lsls	r3, r3, #2
 800c252:	440b      	add	r3, r1
 800c254:	333f      	adds	r3, #63	; 0x3f
 800c256:	2200      	movs	r2, #0
 800c258:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c25a:	7bfa      	ldrb	r2, [r7, #15]
 800c25c:	6879      	ldr	r1, [r7, #4]
 800c25e:	4613      	mov	r3, r2
 800c260:	00db      	lsls	r3, r3, #3
 800c262:	1a9b      	subs	r3, r3, r2
 800c264:	009b      	lsls	r3, r3, #2
 800c266:	440b      	add	r3, r1
 800c268:	3344      	adds	r3, #68	; 0x44
 800c26a:	2200      	movs	r2, #0
 800c26c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c26e:	7bfa      	ldrb	r2, [r7, #15]
 800c270:	6879      	ldr	r1, [r7, #4]
 800c272:	4613      	mov	r3, r2
 800c274:	00db      	lsls	r3, r3, #3
 800c276:	1a9b      	subs	r3, r3, r2
 800c278:	009b      	lsls	r3, r3, #2
 800c27a:	440b      	add	r3, r1
 800c27c:	3348      	adds	r3, #72	; 0x48
 800c27e:	2200      	movs	r2, #0
 800c280:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c282:	7bfa      	ldrb	r2, [r7, #15]
 800c284:	6879      	ldr	r1, [r7, #4]
 800c286:	4613      	mov	r3, r2
 800c288:	00db      	lsls	r3, r3, #3
 800c28a:	1a9b      	subs	r3, r3, r2
 800c28c:	009b      	lsls	r3, r3, #2
 800c28e:	440b      	add	r3, r1
 800c290:	3350      	adds	r3, #80	; 0x50
 800c292:	2200      	movs	r2, #0
 800c294:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c296:	7bfb      	ldrb	r3, [r7, #15]
 800c298:	3301      	adds	r3, #1
 800c29a:	73fb      	strb	r3, [r7, #15]
 800c29c:	7bfa      	ldrb	r2, [r7, #15]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d3af      	bcc.n	800c206 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	73fb      	strb	r3, [r7, #15]
 800c2aa:	e044      	b.n	800c336 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c2ac:	7bfa      	ldrb	r2, [r7, #15]
 800c2ae:	6879      	ldr	r1, [r7, #4]
 800c2b0:	4613      	mov	r3, r2
 800c2b2:	00db      	lsls	r3, r3, #3
 800c2b4:	1a9b      	subs	r3, r3, r2
 800c2b6:	009b      	lsls	r3, r3, #2
 800c2b8:	440b      	add	r3, r1
 800c2ba:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800c2be:	2200      	movs	r2, #0
 800c2c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c2c2:	7bfa      	ldrb	r2, [r7, #15]
 800c2c4:	6879      	ldr	r1, [r7, #4]
 800c2c6:	4613      	mov	r3, r2
 800c2c8:	00db      	lsls	r3, r3, #3
 800c2ca:	1a9b      	subs	r3, r3, r2
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	440b      	add	r3, r1
 800c2d0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c2d4:	7bfa      	ldrb	r2, [r7, #15]
 800c2d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c2d8:	7bfa      	ldrb	r2, [r7, #15]
 800c2da:	6879      	ldr	r1, [r7, #4]
 800c2dc:	4613      	mov	r3, r2
 800c2de:	00db      	lsls	r3, r3, #3
 800c2e0:	1a9b      	subs	r3, r3, r2
 800c2e2:	009b      	lsls	r3, r3, #2
 800c2e4:	440b      	add	r3, r1
 800c2e6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c2ee:	7bfa      	ldrb	r2, [r7, #15]
 800c2f0:	6879      	ldr	r1, [r7, #4]
 800c2f2:	4613      	mov	r3, r2
 800c2f4:	00db      	lsls	r3, r3, #3
 800c2f6:	1a9b      	subs	r3, r3, r2
 800c2f8:	009b      	lsls	r3, r3, #2
 800c2fa:	440b      	add	r3, r1
 800c2fc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c300:	2200      	movs	r2, #0
 800c302:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c304:	7bfa      	ldrb	r2, [r7, #15]
 800c306:	6879      	ldr	r1, [r7, #4]
 800c308:	4613      	mov	r3, r2
 800c30a:	00db      	lsls	r3, r3, #3
 800c30c:	1a9b      	subs	r3, r3, r2
 800c30e:	009b      	lsls	r3, r3, #2
 800c310:	440b      	add	r3, r1
 800c312:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c316:	2200      	movs	r2, #0
 800c318:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c31a:	7bfa      	ldrb	r2, [r7, #15]
 800c31c:	6879      	ldr	r1, [r7, #4]
 800c31e:	4613      	mov	r3, r2
 800c320:	00db      	lsls	r3, r3, #3
 800c322:	1a9b      	subs	r3, r3, r2
 800c324:	009b      	lsls	r3, r3, #2
 800c326:	440b      	add	r3, r1
 800c328:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c32c:	2200      	movs	r2, #0
 800c32e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c330:	7bfb      	ldrb	r3, [r7, #15]
 800c332:	3301      	adds	r3, #1
 800c334:	73fb      	strb	r3, [r7, #15]
 800c336:	7bfa      	ldrb	r2, [r7, #15]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	429a      	cmp	r2, r3
 800c33e:	d3b5      	bcc.n	800c2ac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	603b      	str	r3, [r7, #0]
 800c346:	687e      	ldr	r6, [r7, #4]
 800c348:	466d      	mov	r5, sp
 800c34a:	f106 0410 	add.w	r4, r6, #16
 800c34e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c350:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c352:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c354:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c356:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c35a:	e885 0003 	stmia.w	r5, {r0, r1}
 800c35e:	1d33      	adds	r3, r6, #4
 800c360:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c362:	6838      	ldr	r0, [r7, #0]
 800c364:	f003 fa42 	bl	800f7ec <USB_DevInit>
 800c368:	4603      	mov	r3, r0
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d005      	beq.n	800c37a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2202      	movs	r2, #2
 800c372:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c376:	2301      	movs	r3, #1
 800c378:	e00d      	b.n	800c396 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2200      	movs	r2, #0
 800c37e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2201      	movs	r2, #1
 800c386:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4618      	mov	r0, r3
 800c390:	f004 fa8a 	bl	80108a8 <USB_DevDisconnect>

  return HAL_OK;
 800c394:	2300      	movs	r3, #0
}
 800c396:	4618      	mov	r0, r3
 800c398:	3714      	adds	r7, #20
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c39e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	b084      	sub	sp, #16
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c3b2:	2b01      	cmp	r3, #1
 800c3b4:	d101      	bne.n	800c3ba <HAL_PCD_Start+0x1c>
 800c3b6:	2302      	movs	r3, #2
 800c3b8:	e020      	b.n	800c3fc <HAL_PCD_Start+0x5e>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2201      	movs	r2, #1
 800c3be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3c6:	2b01      	cmp	r3, #1
 800c3c8:	d109      	bne.n	800c3de <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	d005      	beq.n	800c3de <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f003 f9b6 	bl	800f754 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f004 fa3a 	bl	8010866 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c3fa:	2300      	movs	r3, #0
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3710      	adds	r7, #16
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c404:	b590      	push	{r4, r7, lr}
 800c406:	b08d      	sub	sp, #52	; 0x34
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c412:	6a3b      	ldr	r3, [r7, #32]
 800c414:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4618      	mov	r0, r3
 800c41c:	f004 faf8 	bl	8010a10 <USB_GetMode>
 800c420:	4603      	mov	r3, r0
 800c422:	2b00      	cmp	r3, #0
 800c424:	f040 839d 	bne.w	800cb62 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4618      	mov	r0, r3
 800c42e:	f004 fa5c 	bl	80108ea <USB_ReadInterrupts>
 800c432:	4603      	mov	r3, r0
 800c434:	2b00      	cmp	r3, #0
 800c436:	f000 8393 	beq.w	800cb60 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4618      	mov	r0, r3
 800c440:	f004 fa53 	bl	80108ea <USB_ReadInterrupts>
 800c444:	4603      	mov	r3, r0
 800c446:	f003 0302 	and.w	r3, r3, #2
 800c44a:	2b02      	cmp	r3, #2
 800c44c:	d107      	bne.n	800c45e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	695a      	ldr	r2, [r3, #20]
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f002 0202 	and.w	r2, r2, #2
 800c45c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	4618      	mov	r0, r3
 800c464:	f004 fa41 	bl	80108ea <USB_ReadInterrupts>
 800c468:	4603      	mov	r3, r0
 800c46a:	f003 0310 	and.w	r3, r3, #16
 800c46e:	2b10      	cmp	r3, #16
 800c470:	d161      	bne.n	800c536 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	699a      	ldr	r2, [r3, #24]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f022 0210 	bic.w	r2, r2, #16
 800c480:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800c482:	6a3b      	ldr	r3, [r7, #32]
 800c484:	6a1b      	ldr	r3, [r3, #32]
 800c486:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800c488:	69bb      	ldr	r3, [r7, #24]
 800c48a:	f003 020f 	and.w	r2, r3, #15
 800c48e:	4613      	mov	r3, r2
 800c490:	00db      	lsls	r3, r3, #3
 800c492:	1a9b      	subs	r3, r3, r2
 800c494:	009b      	lsls	r3, r3, #2
 800c496:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c49a:	687a      	ldr	r2, [r7, #4]
 800c49c:	4413      	add	r3, r2
 800c49e:	3304      	adds	r3, #4
 800c4a0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c4a2:	69bb      	ldr	r3, [r7, #24]
 800c4a4:	0c5b      	lsrs	r3, r3, #17
 800c4a6:	f003 030f 	and.w	r3, r3, #15
 800c4aa:	2b02      	cmp	r3, #2
 800c4ac:	d124      	bne.n	800c4f8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c4ae:	69ba      	ldr	r2, [r7, #24]
 800c4b0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800c4b4:	4013      	ands	r3, r2
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d035      	beq.n	800c526 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c4be:	69bb      	ldr	r3, [r7, #24]
 800c4c0:	091b      	lsrs	r3, r3, #4
 800c4c2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c4c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c4c8:	b29b      	uxth	r3, r3
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	6a38      	ldr	r0, [r7, #32]
 800c4ce:	f004 f8a7 	bl	8010620 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	68da      	ldr	r2, [r3, #12]
 800c4d6:	69bb      	ldr	r3, [r7, #24]
 800c4d8:	091b      	lsrs	r3, r3, #4
 800c4da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c4de:	441a      	add	r2, r3
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	699a      	ldr	r2, [r3, #24]
 800c4e8:	69bb      	ldr	r3, [r7, #24]
 800c4ea:	091b      	lsrs	r3, r3, #4
 800c4ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c4f0:	441a      	add	r2, r3
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	619a      	str	r2, [r3, #24]
 800c4f6:	e016      	b.n	800c526 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800c4f8:	69bb      	ldr	r3, [r7, #24]
 800c4fa:	0c5b      	lsrs	r3, r3, #17
 800c4fc:	f003 030f 	and.w	r3, r3, #15
 800c500:	2b06      	cmp	r3, #6
 800c502:	d110      	bne.n	800c526 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c50a:	2208      	movs	r2, #8
 800c50c:	4619      	mov	r1, r3
 800c50e:	6a38      	ldr	r0, [r7, #32]
 800c510:	f004 f886 	bl	8010620 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	699a      	ldr	r2, [r3, #24]
 800c518:	69bb      	ldr	r3, [r7, #24]
 800c51a:	091b      	lsrs	r3, r3, #4
 800c51c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c520:	441a      	add	r2, r3
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	699a      	ldr	r2, [r3, #24]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f042 0210 	orr.w	r2, r2, #16
 800c534:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4618      	mov	r0, r3
 800c53c:	f004 f9d5 	bl	80108ea <USB_ReadInterrupts>
 800c540:	4603      	mov	r3, r0
 800c542:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c546:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c54a:	d16e      	bne.n	800c62a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800c54c:	2300      	movs	r3, #0
 800c54e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	4618      	mov	r0, r3
 800c556:	f004 f9db 	bl	8010910 <USB_ReadDevAllOutEpInterrupt>
 800c55a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800c55c:	e062      	b.n	800c624 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c560:	f003 0301 	and.w	r3, r3, #1
 800c564:	2b00      	cmp	r3, #0
 800c566:	d057      	beq.n	800c618 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c56e:	b2d2      	uxtb	r2, r2
 800c570:	4611      	mov	r1, r2
 800c572:	4618      	mov	r0, r3
 800c574:	f004 fa00 	bl	8010978 <USB_ReadDevOutEPInterrupt>
 800c578:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	f003 0301 	and.w	r3, r3, #1
 800c580:	2b00      	cmp	r3, #0
 800c582:	d00c      	beq.n	800c59e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c586:	015a      	lsls	r2, r3, #5
 800c588:	69fb      	ldr	r3, [r7, #28]
 800c58a:	4413      	add	r3, r2
 800c58c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c590:	461a      	mov	r2, r3
 800c592:	2301      	movs	r3, #1
 800c594:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c596:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f000 fdb1 	bl	800d100 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	f003 0308 	and.w	r3, r3, #8
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d00c      	beq.n	800c5c2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5aa:	015a      	lsls	r2, r3, #5
 800c5ac:	69fb      	ldr	r3, [r7, #28]
 800c5ae:	4413      	add	r3, r2
 800c5b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	2308      	movs	r3, #8
 800c5b8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c5ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f000 feab 	bl	800d318 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	f003 0310 	and.w	r3, r3, #16
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d008      	beq.n	800c5de <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ce:	015a      	lsls	r2, r3, #5
 800c5d0:	69fb      	ldr	r3, [r7, #28]
 800c5d2:	4413      	add	r3, r2
 800c5d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5d8:	461a      	mov	r2, r3
 800c5da:	2310      	movs	r3, #16
 800c5dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	f003 0320 	and.w	r3, r3, #32
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d008      	beq.n	800c5fa <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ea:	015a      	lsls	r2, r3, #5
 800c5ec:	69fb      	ldr	r3, [r7, #28]
 800c5ee:	4413      	add	r3, r2
 800c5f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	2320      	movs	r3, #32
 800c5f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c600:	2b00      	cmp	r3, #0
 800c602:	d009      	beq.n	800c618 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c606:	015a      	lsls	r2, r3, #5
 800c608:	69fb      	ldr	r3, [r7, #28]
 800c60a:	4413      	add	r3, r2
 800c60c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c610:	461a      	mov	r2, r3
 800c612:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c616:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61a:	3301      	adds	r3, #1
 800c61c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c620:	085b      	lsrs	r3, r3, #1
 800c622:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c626:	2b00      	cmp	r3, #0
 800c628:	d199      	bne.n	800c55e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	4618      	mov	r0, r3
 800c630:	f004 f95b 	bl	80108ea <USB_ReadInterrupts>
 800c634:	4603      	mov	r3, r0
 800c636:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c63a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c63e:	f040 80c0 	bne.w	800c7c2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	4618      	mov	r0, r3
 800c648:	f004 f97c 	bl	8010944 <USB_ReadDevAllInEpInterrupt>
 800c64c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800c64e:	2300      	movs	r3, #0
 800c650:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800c652:	e0b2      	b.n	800c7ba <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c656:	f003 0301 	and.w	r3, r3, #1
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	f000 80a7 	beq.w	800c7ae <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c666:	b2d2      	uxtb	r2, r2
 800c668:	4611      	mov	r1, r2
 800c66a:	4618      	mov	r0, r3
 800c66c:	f004 f9a2 	bl	80109b4 <USB_ReadDevInEPInterrupt>
 800c670:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	f003 0301 	and.w	r3, r3, #1
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d057      	beq.n	800c72c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67e:	f003 030f 	and.w	r3, r3, #15
 800c682:	2201      	movs	r2, #1
 800c684:	fa02 f303 	lsl.w	r3, r2, r3
 800c688:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c68a:	69fb      	ldr	r3, [r7, #28]
 800c68c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	43db      	mvns	r3, r3
 800c696:	69f9      	ldr	r1, [r7, #28]
 800c698:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c69c:	4013      	ands	r3, r2
 800c69e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a2:	015a      	lsls	r2, r3, #5
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	4413      	add	r3, r2
 800c6a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	691b      	ldr	r3, [r3, #16]
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d132      	bne.n	800c720 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c6ba:	6879      	ldr	r1, [r7, #4]
 800c6bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6be:	4613      	mov	r3, r2
 800c6c0:	00db      	lsls	r3, r3, #3
 800c6c2:	1a9b      	subs	r3, r3, r2
 800c6c4:	009b      	lsls	r3, r3, #2
 800c6c6:	440b      	add	r3, r1
 800c6c8:	3348      	adds	r3, #72	; 0x48
 800c6ca:	6819      	ldr	r1, [r3, #0]
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6d0:	4613      	mov	r3, r2
 800c6d2:	00db      	lsls	r3, r3, #3
 800c6d4:	1a9b      	subs	r3, r3, r2
 800c6d6:	009b      	lsls	r3, r3, #2
 800c6d8:	4403      	add	r3, r0
 800c6da:	3344      	adds	r3, #68	; 0x44
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	4419      	add	r1, r3
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6e4:	4613      	mov	r3, r2
 800c6e6:	00db      	lsls	r3, r3, #3
 800c6e8:	1a9b      	subs	r3, r3, r2
 800c6ea:	009b      	lsls	r3, r3, #2
 800c6ec:	4403      	add	r3, r0
 800c6ee:	3348      	adds	r3, #72	; 0x48
 800c6f0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d113      	bne.n	800c720 <HAL_PCD_IRQHandler+0x31c>
 800c6f8:	6879      	ldr	r1, [r7, #4]
 800c6fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6fc:	4613      	mov	r3, r2
 800c6fe:	00db      	lsls	r3, r3, #3
 800c700:	1a9b      	subs	r3, r3, r2
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	440b      	add	r3, r1
 800c706:	3350      	adds	r3, #80	; 0x50
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d108      	bne.n	800c720 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6818      	ldr	r0, [r3, #0]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c718:	461a      	mov	r2, r3
 800c71a:	2101      	movs	r1, #1
 800c71c:	f004 f9aa 	bl	8010a74 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c722:	b2db      	uxtb	r3, r3
 800c724:	4619      	mov	r1, r3
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f008 ff6b 	bl	8015602 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	f003 0308 	and.w	r3, r3, #8
 800c732:	2b00      	cmp	r3, #0
 800c734:	d008      	beq.n	800c748 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c738:	015a      	lsls	r2, r3, #5
 800c73a:	69fb      	ldr	r3, [r7, #28]
 800c73c:	4413      	add	r3, r2
 800c73e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c742:	461a      	mov	r2, r3
 800c744:	2308      	movs	r3, #8
 800c746:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	f003 0310 	and.w	r3, r3, #16
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d008      	beq.n	800c764 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c754:	015a      	lsls	r2, r3, #5
 800c756:	69fb      	ldr	r3, [r7, #28]
 800c758:	4413      	add	r3, r2
 800c75a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c75e:	461a      	mov	r2, r3
 800c760:	2310      	movs	r3, #16
 800c762:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d008      	beq.n	800c780 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c770:	015a      	lsls	r2, r3, #5
 800c772:	69fb      	ldr	r3, [r7, #28]
 800c774:	4413      	add	r3, r2
 800c776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c77a:	461a      	mov	r2, r3
 800c77c:	2340      	movs	r3, #64	; 0x40
 800c77e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	f003 0302 	and.w	r3, r3, #2
 800c786:	2b00      	cmp	r3, #0
 800c788:	d008      	beq.n	800c79c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c78c:	015a      	lsls	r2, r3, #5
 800c78e:	69fb      	ldr	r3, [r7, #28]
 800c790:	4413      	add	r3, r2
 800c792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c796:	461a      	mov	r2, r3
 800c798:	2302      	movs	r3, #2
 800c79a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d003      	beq.n	800c7ae <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c7a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 fc1b 	bl	800cfe4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b0:	3301      	adds	r3, #1
 800c7b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b6:	085b      	lsrs	r3, r3, #1
 800c7b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	f47f af49 	bne.w	800c654 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f004 f88f 	bl	80108ea <USB_ReadInterrupts>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c7d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c7d6:	d122      	bne.n	800c81e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c7d8:	69fb      	ldr	r3, [r7, #28]
 800c7da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	69fa      	ldr	r2, [r7, #28]
 800c7e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c7e6:	f023 0301 	bic.w	r3, r3, #1
 800c7ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	d108      	bne.n	800c808 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c7fe:	2100      	movs	r1, #0
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 fe27 	bl	800d454 <HAL_PCDEx_LPM_Callback>
 800c806:	e002      	b.n	800c80e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f008 ff71 	bl	80156f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	695a      	ldr	r2, [r3, #20]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800c81c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	4618      	mov	r0, r3
 800c824:	f004 f861 	bl	80108ea <USB_ReadInterrupts>
 800c828:	4603      	mov	r3, r0
 800c82a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c82e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c832:	d112      	bne.n	800c85a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c83a:	689b      	ldr	r3, [r3, #8]
 800c83c:	f003 0301 	and.w	r3, r3, #1
 800c840:	2b01      	cmp	r3, #1
 800c842:	d102      	bne.n	800c84a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f008 ff2d 	bl	80156a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	695a      	ldr	r2, [r3, #20]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800c858:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	4618      	mov	r0, r3
 800c860:	f004 f843 	bl	80108ea <USB_ReadInterrupts>
 800c864:	4603      	mov	r3, r0
 800c866:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c86a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c86e:	f040 80c7 	bne.w	800ca00 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c878:	685b      	ldr	r3, [r3, #4]
 800c87a:	69fa      	ldr	r2, [r7, #28]
 800c87c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c880:	f023 0301 	bic.w	r3, r3, #1
 800c884:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2110      	movs	r1, #16
 800c88c:	4618      	mov	r0, r3
 800c88e:	f003 f911 	bl	800fab4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c892:	2300      	movs	r3, #0
 800c894:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c896:	e056      	b.n	800c946 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89a:	015a      	lsls	r2, r3, #5
 800c89c:	69fb      	ldr	r3, [r7, #28]
 800c89e:	4413      	add	r3, r2
 800c8a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c8aa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ae:	015a      	lsls	r2, r3, #5
 800c8b0:	69fb      	ldr	r3, [r7, #28]
 800c8b2:	4413      	add	r3, r2
 800c8b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8bc:	0151      	lsls	r1, r2, #5
 800c8be:	69fa      	ldr	r2, [r7, #28]
 800c8c0:	440a      	add	r2, r1
 800c8c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c8ca:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ce:	015a      	lsls	r2, r3, #5
 800c8d0:	69fb      	ldr	r3, [r7, #28]
 800c8d2:	4413      	add	r3, r2
 800c8d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8dc:	0151      	lsls	r1, r2, #5
 800c8de:	69fa      	ldr	r2, [r7, #28]
 800c8e0:	440a      	add	r2, r1
 800c8e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c8ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ee:	015a      	lsls	r2, r3, #5
 800c8f0:	69fb      	ldr	r3, [r7, #28]
 800c8f2:	4413      	add	r3, r2
 800c8f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c8fe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c902:	015a      	lsls	r2, r3, #5
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	4413      	add	r3, r2
 800c908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c910:	0151      	lsls	r1, r2, #5
 800c912:	69fa      	ldr	r2, [r7, #28]
 800c914:	440a      	add	r2, r1
 800c916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c91a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c91e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c922:	015a      	lsls	r2, r3, #5
 800c924:	69fb      	ldr	r3, [r7, #28]
 800c926:	4413      	add	r3, r2
 800c928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c930:	0151      	lsls	r1, r2, #5
 800c932:	69fa      	ldr	r2, [r7, #28]
 800c934:	440a      	add	r2, r1
 800c936:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c93a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c93e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c942:	3301      	adds	r3, #1
 800c944:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d3a3      	bcc.n	800c898 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c950:	69fb      	ldr	r3, [r7, #28]
 800c952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c956:	69db      	ldr	r3, [r3, #28]
 800c958:	69fa      	ldr	r2, [r7, #28]
 800c95a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c95e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800c962:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d016      	beq.n	800c99a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c976:	69fa      	ldr	r2, [r7, #28]
 800c978:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c97c:	f043 030b 	orr.w	r3, r3, #11
 800c980:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c984:	69fb      	ldr	r3, [r7, #28]
 800c986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c98a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c98c:	69fa      	ldr	r2, [r7, #28]
 800c98e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c992:	f043 030b 	orr.w	r3, r3, #11
 800c996:	6453      	str	r3, [r2, #68]	; 0x44
 800c998:	e015      	b.n	800c9c6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c99a:	69fb      	ldr	r3, [r7, #28]
 800c99c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9a0:	695b      	ldr	r3, [r3, #20]
 800c9a2:	69fa      	ldr	r2, [r7, #28]
 800c9a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c9a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c9ac:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800c9b0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c9b2:	69fb      	ldr	r3, [r7, #28]
 800c9b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9b8:	691b      	ldr	r3, [r3, #16]
 800c9ba:	69fa      	ldr	r2, [r7, #28]
 800c9bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c9c0:	f043 030b 	orr.w	r3, r3, #11
 800c9c4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	69fa      	ldr	r2, [r7, #28]
 800c9d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c9d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c9d8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6818      	ldr	r0, [r3, #0]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	691b      	ldr	r3, [r3, #16]
 800c9e2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	f004 f842 	bl	8010a74 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	695a      	ldr	r2, [r3, #20]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800c9fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4618      	mov	r0, r3
 800ca06:	f003 ff70 	bl	80108ea <USB_ReadInterrupts>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ca10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca14:	d124      	bne.n	800ca60 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f004 f806 	bl	8010a2c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4618      	mov	r0, r3
 800ca26:	f003 f8a6 	bl	800fb76 <USB_GetDevSpeed>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681c      	ldr	r4, [r3, #0]
 800ca36:	f001 f947 	bl	800dcc8 <HAL_RCC_GetHCLKFreq>
 800ca3a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ca40:	b2db      	uxtb	r3, r3
 800ca42:	461a      	mov	r2, r3
 800ca44:	4620      	mov	r0, r4
 800ca46:	f002 fde3 	bl	800f610 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f008 fe01 	bl	8015652 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	695a      	ldr	r2, [r3, #20]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800ca5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4618      	mov	r0, r3
 800ca66:	f003 ff40 	bl	80108ea <USB_ReadInterrupts>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	f003 0308 	and.w	r3, r3, #8
 800ca70:	2b08      	cmp	r3, #8
 800ca72:	d10a      	bne.n	800ca8a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f008 fdde 	bl	8015636 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	695a      	ldr	r2, [r3, #20]
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f002 0208 	and.w	r2, r2, #8
 800ca88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f003 ff2b 	bl	80108ea <USB_ReadInterrupts>
 800ca94:	4603      	mov	r3, r0
 800ca96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca9e:	d10f      	bne.n	800cac0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800caa0:	2300      	movs	r3, #0
 800caa2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800caa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa6:	b2db      	uxtb	r3, r3
 800caa8:	4619      	mov	r1, r3
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f008 fe40 	bl	8015730 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	695a      	ldr	r2, [r3, #20]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800cabe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4618      	mov	r0, r3
 800cac6:	f003 ff10 	bl	80108ea <USB_ReadInterrupts>
 800caca:	4603      	mov	r3, r0
 800cacc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cad0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cad4:	d10f      	bne.n	800caf6 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800cad6:	2300      	movs	r3, #0
 800cad8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800cada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cadc:	b2db      	uxtb	r3, r3
 800cade:	4619      	mov	r1, r3
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f008 fe13 	bl	801570c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	695a      	ldr	r2, [r3, #20]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800caf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4618      	mov	r0, r3
 800cafc:	f003 fef5 	bl	80108ea <USB_ReadInterrupts>
 800cb00:	4603      	mov	r3, r0
 800cb02:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cb06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb0a:	d10a      	bne.n	800cb22 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f008 fe21 	bl	8015754 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	695a      	ldr	r2, [r3, #20]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800cb20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	4618      	mov	r0, r3
 800cb28:	f003 fedf 	bl	80108ea <USB_ReadInterrupts>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	f003 0304 	and.w	r3, r3, #4
 800cb32:	2b04      	cmp	r3, #4
 800cb34:	d115      	bne.n	800cb62 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	685b      	ldr	r3, [r3, #4]
 800cb3c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800cb3e:	69bb      	ldr	r3, [r7, #24]
 800cb40:	f003 0304 	and.w	r3, r3, #4
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d002      	beq.n	800cb4e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f008 fe11 	bl	8015770 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	6859      	ldr	r1, [r3, #4]
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	69ba      	ldr	r2, [r7, #24]
 800cb5a:	430a      	orrs	r2, r1
 800cb5c:	605a      	str	r2, [r3, #4]
 800cb5e:	e000      	b.n	800cb62 <HAL_PCD_IRQHandler+0x75e>
      return;
 800cb60:	bf00      	nop
    }
  }
}
 800cb62:	3734      	adds	r7, #52	; 0x34
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd90      	pop	{r4, r7, pc}

0800cb68 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b082      	sub	sp, #8
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	460b      	mov	r3, r1
 800cb72:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cb7a:	2b01      	cmp	r3, #1
 800cb7c:	d101      	bne.n	800cb82 <HAL_PCD_SetAddress+0x1a>
 800cb7e:	2302      	movs	r3, #2
 800cb80:	e013      	b.n	800cbaa <HAL_PCD_SetAddress+0x42>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2201      	movs	r2, #1
 800cb86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	78fa      	ldrb	r2, [r7, #3]
 800cb8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	78fa      	ldrb	r2, [r7, #3]
 800cb98:	4611      	mov	r1, r2
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f003 fe3d 	bl	801081a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2200      	movs	r2, #0
 800cba4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cba8:	2300      	movs	r3, #0
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3708      	adds	r7, #8
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}

0800cbb2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800cbb2:	b580      	push	{r7, lr}
 800cbb4:	b084      	sub	sp, #16
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	6078      	str	r0, [r7, #4]
 800cbba:	4608      	mov	r0, r1
 800cbbc:	4611      	mov	r1, r2
 800cbbe:	461a      	mov	r2, r3
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	70fb      	strb	r3, [r7, #3]
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	803b      	strh	r3, [r7, #0]
 800cbc8:	4613      	mov	r3, r2
 800cbca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cbd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	da0f      	bge.n	800cbf8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cbd8:	78fb      	ldrb	r3, [r7, #3]
 800cbda:	f003 020f 	and.w	r2, r3, #15
 800cbde:	4613      	mov	r3, r2
 800cbe0:	00db      	lsls	r3, r3, #3
 800cbe2:	1a9b      	subs	r3, r3, r2
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	3338      	adds	r3, #56	; 0x38
 800cbe8:	687a      	ldr	r2, [r7, #4]
 800cbea:	4413      	add	r3, r2
 800cbec:	3304      	adds	r3, #4
 800cbee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	705a      	strb	r2, [r3, #1]
 800cbf6:	e00f      	b.n	800cc18 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cbf8:	78fb      	ldrb	r3, [r7, #3]
 800cbfa:	f003 020f 	and.w	r2, r3, #15
 800cbfe:	4613      	mov	r3, r2
 800cc00:	00db      	lsls	r3, r3, #3
 800cc02:	1a9b      	subs	r3, r3, r2
 800cc04:	009b      	lsls	r3, r3, #2
 800cc06:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cc0a:	687a      	ldr	r2, [r7, #4]
 800cc0c:	4413      	add	r3, r2
 800cc0e:	3304      	adds	r3, #4
 800cc10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	2200      	movs	r2, #0
 800cc16:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800cc18:	78fb      	ldrb	r3, [r7, #3]
 800cc1a:	f003 030f 	and.w	r3, r3, #15
 800cc1e:	b2da      	uxtb	r2, r3
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800cc24:	883a      	ldrh	r2, [r7, #0]
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	78ba      	ldrb	r2, [r7, #2]
 800cc2e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	785b      	ldrb	r3, [r3, #1]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d004      	beq.n	800cc42 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	b29a      	uxth	r2, r3
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800cc42:	78bb      	ldrb	r3, [r7, #2]
 800cc44:	2b02      	cmp	r3, #2
 800cc46:	d102      	bne.n	800cc4e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cc54:	2b01      	cmp	r3, #1
 800cc56:	d101      	bne.n	800cc5c <HAL_PCD_EP_Open+0xaa>
 800cc58:	2302      	movs	r3, #2
 800cc5a:	e00e      	b.n	800cc7a <HAL_PCD_EP_Open+0xc8>
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2201      	movs	r2, #1
 800cc60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	68f9      	ldr	r1, [r7, #12]
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f002 ffa8 	bl	800fbc0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2200      	movs	r2, #0
 800cc74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800cc78:	7afb      	ldrb	r3, [r7, #11]
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3710      	adds	r7, #16
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}

0800cc82 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cc82:	b580      	push	{r7, lr}
 800cc84:	b084      	sub	sp, #16
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
 800cc8a:	460b      	mov	r3, r1
 800cc8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cc8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	da0f      	bge.n	800ccb6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cc96:	78fb      	ldrb	r3, [r7, #3]
 800cc98:	f003 020f 	and.w	r2, r3, #15
 800cc9c:	4613      	mov	r3, r2
 800cc9e:	00db      	lsls	r3, r3, #3
 800cca0:	1a9b      	subs	r3, r3, r2
 800cca2:	009b      	lsls	r3, r3, #2
 800cca4:	3338      	adds	r3, #56	; 0x38
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	4413      	add	r3, r2
 800ccaa:	3304      	adds	r3, #4
 800ccac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	705a      	strb	r2, [r3, #1]
 800ccb4:	e00f      	b.n	800ccd6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ccb6:	78fb      	ldrb	r3, [r7, #3]
 800ccb8:	f003 020f 	and.w	r2, r3, #15
 800ccbc:	4613      	mov	r3, r2
 800ccbe:	00db      	lsls	r3, r3, #3
 800ccc0:	1a9b      	subs	r3, r3, r2
 800ccc2:	009b      	lsls	r3, r3, #2
 800ccc4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	4413      	add	r3, r2
 800cccc:	3304      	adds	r3, #4
 800ccce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800ccd6:	78fb      	ldrb	r3, [r7, #3]
 800ccd8:	f003 030f 	and.w	r3, r3, #15
 800ccdc:	b2da      	uxtb	r2, r3
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	d101      	bne.n	800ccf0 <HAL_PCD_EP_Close+0x6e>
 800ccec:	2302      	movs	r3, #2
 800ccee:	e00e      	b.n	800cd0e <HAL_PCD_EP_Close+0x8c>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	68f9      	ldr	r1, [r7, #12]
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f002 ffe6 	bl	800fcd0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2200      	movs	r2, #0
 800cd08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800cd0c:	2300      	movs	r3, #0
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3710      	adds	r7, #16
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}

0800cd16 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cd16:	b580      	push	{r7, lr}
 800cd18:	b086      	sub	sp, #24
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	60f8      	str	r0, [r7, #12]
 800cd1e:	607a      	str	r2, [r7, #4]
 800cd20:	603b      	str	r3, [r7, #0]
 800cd22:	460b      	mov	r3, r1
 800cd24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cd26:	7afb      	ldrb	r3, [r7, #11]
 800cd28:	f003 020f 	and.w	r2, r3, #15
 800cd2c:	4613      	mov	r3, r2
 800cd2e:	00db      	lsls	r3, r3, #3
 800cd30:	1a9b      	subs	r3, r3, r2
 800cd32:	009b      	lsls	r3, r3, #2
 800cd34:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cd38:	68fa      	ldr	r2, [r7, #12]
 800cd3a:	4413      	add	r3, r2
 800cd3c:	3304      	adds	r3, #4
 800cd3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	683a      	ldr	r2, [r7, #0]
 800cd4a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	2200      	movs	r2, #0
 800cd56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cd58:	7afb      	ldrb	r3, [r7, #11]
 800cd5a:	f003 030f 	and.w	r3, r3, #15
 800cd5e:	b2da      	uxtb	r2, r3
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	691b      	ldr	r3, [r3, #16]
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d102      	bne.n	800cd72 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800cd6c:	687a      	ldr	r2, [r7, #4]
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cd72:	7afb      	ldrb	r3, [r7, #11]
 800cd74:	f003 030f 	and.w	r3, r3, #15
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d109      	bne.n	800cd90 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	6818      	ldr	r0, [r3, #0]
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	691b      	ldr	r3, [r3, #16]
 800cd84:	b2db      	uxtb	r3, r3
 800cd86:	461a      	mov	r2, r3
 800cd88:	6979      	ldr	r1, [r7, #20]
 800cd8a:	f003 fac1 	bl	8010310 <USB_EP0StartXfer>
 800cd8e:	e008      	b.n	800cda2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	6818      	ldr	r0, [r3, #0]
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	691b      	ldr	r3, [r3, #16]
 800cd98:	b2db      	uxtb	r3, r3
 800cd9a:	461a      	mov	r2, r3
 800cd9c:	6979      	ldr	r1, [r7, #20]
 800cd9e:	f003 f873 	bl	800fe88 <USB_EPStartXfer>
  }

  return HAL_OK;
 800cda2:	2300      	movs	r3, #0
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3718      	adds	r7, #24
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b083      	sub	sp, #12
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	460b      	mov	r3, r1
 800cdb6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800cdb8:	78fb      	ldrb	r3, [r7, #3]
 800cdba:	f003 020f 	and.w	r2, r3, #15
 800cdbe:	6879      	ldr	r1, [r7, #4]
 800cdc0:	4613      	mov	r3, r2
 800cdc2:	00db      	lsls	r3, r3, #3
 800cdc4:	1a9b      	subs	r3, r3, r2
 800cdc6:	009b      	lsls	r3, r3, #2
 800cdc8:	440b      	add	r3, r1
 800cdca:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800cdce:	681b      	ldr	r3, [r3, #0]
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	370c      	adds	r7, #12
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdda:	4770      	bx	lr

0800cddc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b086      	sub	sp, #24
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	60f8      	str	r0, [r7, #12]
 800cde4:	607a      	str	r2, [r7, #4]
 800cde6:	603b      	str	r3, [r7, #0]
 800cde8:	460b      	mov	r3, r1
 800cdea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cdec:	7afb      	ldrb	r3, [r7, #11]
 800cdee:	f003 020f 	and.w	r2, r3, #15
 800cdf2:	4613      	mov	r3, r2
 800cdf4:	00db      	lsls	r3, r3, #3
 800cdf6:	1a9b      	subs	r3, r3, r2
 800cdf8:	009b      	lsls	r3, r3, #2
 800cdfa:	3338      	adds	r3, #56	; 0x38
 800cdfc:	68fa      	ldr	r2, [r7, #12]
 800cdfe:	4413      	add	r3, r2
 800ce00:	3304      	adds	r3, #4
 800ce02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	687a      	ldr	r2, [r7, #4]
 800ce08:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	683a      	ldr	r2, [r7, #0]
 800ce0e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	2200      	movs	r2, #0
 800ce14:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	2201      	movs	r2, #1
 800ce1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ce1c:	7afb      	ldrb	r3, [r7, #11]
 800ce1e:	f003 030f 	and.w	r3, r3, #15
 800ce22:	b2da      	uxtb	r2, r3
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	691b      	ldr	r3, [r3, #16]
 800ce2c:	2b01      	cmp	r3, #1
 800ce2e:	d102      	bne.n	800ce36 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ce30:	687a      	ldr	r2, [r7, #4]
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ce36:	7afb      	ldrb	r3, [r7, #11]
 800ce38:	f003 030f 	and.w	r3, r3, #15
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d109      	bne.n	800ce54 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	6818      	ldr	r0, [r3, #0]
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	691b      	ldr	r3, [r3, #16]
 800ce48:	b2db      	uxtb	r3, r3
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	6979      	ldr	r1, [r7, #20]
 800ce4e:	f003 fa5f 	bl	8010310 <USB_EP0StartXfer>
 800ce52:	e008      	b.n	800ce66 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	6818      	ldr	r0, [r3, #0]
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	691b      	ldr	r3, [r3, #16]
 800ce5c:	b2db      	uxtb	r3, r3
 800ce5e:	461a      	mov	r2, r3
 800ce60:	6979      	ldr	r1, [r7, #20]
 800ce62:	f003 f811 	bl	800fe88 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ce66:	2300      	movs	r3, #0
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3718      	adds	r7, #24
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b084      	sub	sp, #16
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	460b      	mov	r3, r1
 800ce7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ce7c:	78fb      	ldrb	r3, [r7, #3]
 800ce7e:	f003 020f 	and.w	r2, r3, #15
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	685b      	ldr	r3, [r3, #4]
 800ce86:	429a      	cmp	r2, r3
 800ce88:	d901      	bls.n	800ce8e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	e050      	b.n	800cf30 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ce8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	da0f      	bge.n	800ceb6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ce96:	78fb      	ldrb	r3, [r7, #3]
 800ce98:	f003 020f 	and.w	r2, r3, #15
 800ce9c:	4613      	mov	r3, r2
 800ce9e:	00db      	lsls	r3, r3, #3
 800cea0:	1a9b      	subs	r3, r3, r2
 800cea2:	009b      	lsls	r3, r3, #2
 800cea4:	3338      	adds	r3, #56	; 0x38
 800cea6:	687a      	ldr	r2, [r7, #4]
 800cea8:	4413      	add	r3, r2
 800ceaa:	3304      	adds	r3, #4
 800ceac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	705a      	strb	r2, [r3, #1]
 800ceb4:	e00d      	b.n	800ced2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ceb6:	78fa      	ldrb	r2, [r7, #3]
 800ceb8:	4613      	mov	r3, r2
 800ceba:	00db      	lsls	r3, r3, #3
 800cebc:	1a9b      	subs	r3, r3, r2
 800cebe:	009b      	lsls	r3, r3, #2
 800cec0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cec4:	687a      	ldr	r2, [r7, #4]
 800cec6:	4413      	add	r3, r2
 800cec8:	3304      	adds	r3, #4
 800ceca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2200      	movs	r2, #0
 800ced0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2201      	movs	r2, #1
 800ced6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ced8:	78fb      	ldrb	r3, [r7, #3]
 800ceda:	f003 030f 	and.w	r3, r3, #15
 800cede:	b2da      	uxtb	r2, r3
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ceea:	2b01      	cmp	r3, #1
 800ceec:	d101      	bne.n	800cef2 <HAL_PCD_EP_SetStall+0x82>
 800ceee:	2302      	movs	r3, #2
 800cef0:	e01e      	b.n	800cf30 <HAL_PCD_EP_SetStall+0xc0>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2201      	movs	r2, #1
 800cef6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	68f9      	ldr	r1, [r7, #12]
 800cf00:	4618      	mov	r0, r3
 800cf02:	f003 fbb6 	bl	8010672 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cf06:	78fb      	ldrb	r3, [r7, #3]
 800cf08:	f003 030f 	and.w	r3, r3, #15
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d10a      	bne.n	800cf26 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6818      	ldr	r0, [r3, #0]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	691b      	ldr	r3, [r3, #16]
 800cf18:	b2d9      	uxtb	r1, r3
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cf20:	461a      	mov	r2, r3
 800cf22:	f003 fda7 	bl	8010a74 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cf2e:	2300      	movs	r3, #0
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3710      	adds	r7, #16
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}

0800cf38 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b084      	sub	sp, #16
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	460b      	mov	r3, r1
 800cf42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800cf44:	78fb      	ldrb	r3, [r7, #3]
 800cf46:	f003 020f 	and.w	r2, r3, #15
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d901      	bls.n	800cf56 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800cf52:	2301      	movs	r3, #1
 800cf54:	e042      	b.n	800cfdc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cf56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	da0f      	bge.n	800cf7e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cf5e:	78fb      	ldrb	r3, [r7, #3]
 800cf60:	f003 020f 	and.w	r2, r3, #15
 800cf64:	4613      	mov	r3, r2
 800cf66:	00db      	lsls	r3, r3, #3
 800cf68:	1a9b      	subs	r3, r3, r2
 800cf6a:	009b      	lsls	r3, r3, #2
 800cf6c:	3338      	adds	r3, #56	; 0x38
 800cf6e:	687a      	ldr	r2, [r7, #4]
 800cf70:	4413      	add	r3, r2
 800cf72:	3304      	adds	r3, #4
 800cf74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	705a      	strb	r2, [r3, #1]
 800cf7c:	e00f      	b.n	800cf9e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cf7e:	78fb      	ldrb	r3, [r7, #3]
 800cf80:	f003 020f 	and.w	r2, r3, #15
 800cf84:	4613      	mov	r3, r2
 800cf86:	00db      	lsls	r3, r3, #3
 800cf88:	1a9b      	subs	r3, r3, r2
 800cf8a:	009b      	lsls	r3, r3, #2
 800cf8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cf90:	687a      	ldr	r2, [r7, #4]
 800cf92:	4413      	add	r3, r2
 800cf94:	3304      	adds	r3, #4
 800cf96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cfa4:	78fb      	ldrb	r3, [r7, #3]
 800cfa6:	f003 030f 	and.w	r3, r3, #15
 800cfaa:	b2da      	uxtb	r2, r3
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cfb6:	2b01      	cmp	r3, #1
 800cfb8:	d101      	bne.n	800cfbe <HAL_PCD_EP_ClrStall+0x86>
 800cfba:	2302      	movs	r3, #2
 800cfbc:	e00e      	b.n	800cfdc <HAL_PCD_EP_ClrStall+0xa4>
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	68f9      	ldr	r1, [r7, #12]
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f003 fbbe 	bl	801074e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cfda:	2300      	movs	r3, #0
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3710      	adds	r7, #16
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b08a      	sub	sp, #40	; 0x28
 800cfe8:	af02      	add	r7, sp, #8
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800cff8:	683a      	ldr	r2, [r7, #0]
 800cffa:	4613      	mov	r3, r2
 800cffc:	00db      	lsls	r3, r3, #3
 800cffe:	1a9b      	subs	r3, r3, r2
 800d000:	009b      	lsls	r3, r3, #2
 800d002:	3338      	adds	r3, #56	; 0x38
 800d004:	687a      	ldr	r2, [r7, #4]
 800d006:	4413      	add	r3, r2
 800d008:	3304      	adds	r3, #4
 800d00a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	699a      	ldr	r2, [r3, #24]
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	695b      	ldr	r3, [r3, #20]
 800d014:	429a      	cmp	r2, r3
 800d016:	d901      	bls.n	800d01c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800d018:	2301      	movs	r3, #1
 800d01a:	e06c      	b.n	800d0f6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	695a      	ldr	r2, [r3, #20]
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	699b      	ldr	r3, [r3, #24]
 800d024:	1ad3      	subs	r3, r2, r3
 800d026:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	689b      	ldr	r3, [r3, #8]
 800d02c:	69fa      	ldr	r2, [r7, #28]
 800d02e:	429a      	cmp	r2, r3
 800d030:	d902      	bls.n	800d038 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800d038:	69fb      	ldr	r3, [r7, #28]
 800d03a:	3303      	adds	r3, #3
 800d03c:	089b      	lsrs	r3, r3, #2
 800d03e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d040:	e02b      	b.n	800d09a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	695a      	ldr	r2, [r3, #20]
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	699b      	ldr	r3, [r3, #24]
 800d04a:	1ad3      	subs	r3, r2, r3
 800d04c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	689b      	ldr	r3, [r3, #8]
 800d052:	69fa      	ldr	r2, [r7, #28]
 800d054:	429a      	cmp	r2, r3
 800d056:	d902      	bls.n	800d05e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	689b      	ldr	r3, [r3, #8]
 800d05c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800d05e:	69fb      	ldr	r3, [r7, #28]
 800d060:	3303      	adds	r3, #3
 800d062:	089b      	lsrs	r3, r3, #2
 800d064:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	68d9      	ldr	r1, [r3, #12]
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	b2da      	uxtb	r2, r3
 800d06e:	69fb      	ldr	r3, [r7, #28]
 800d070:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d076:	b2db      	uxtb	r3, r3
 800d078:	9300      	str	r3, [sp, #0]
 800d07a:	4603      	mov	r3, r0
 800d07c:	6978      	ldr	r0, [r7, #20]
 800d07e:	f003 fa9a 	bl	80105b6 <USB_WritePacket>

    ep->xfer_buff  += len;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	68da      	ldr	r2, [r3, #12]
 800d086:	69fb      	ldr	r3, [r7, #28]
 800d088:	441a      	add	r2, r3
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	699a      	ldr	r2, [r3, #24]
 800d092:	69fb      	ldr	r3, [r7, #28]
 800d094:	441a      	add	r2, r3
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	015a      	lsls	r2, r3, #5
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	4413      	add	r3, r2
 800d0a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0a6:	699b      	ldr	r3, [r3, #24]
 800d0a8:	b29b      	uxth	r3, r3
 800d0aa:	69ba      	ldr	r2, [r7, #24]
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d809      	bhi.n	800d0c4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	699a      	ldr	r2, [r3, #24]
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d203      	bcs.n	800d0c4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	695b      	ldr	r3, [r3, #20]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d1be      	bne.n	800d042 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	695a      	ldr	r2, [r3, #20]
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	699b      	ldr	r3, [r3, #24]
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d811      	bhi.n	800d0f4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	f003 030f 	and.w	r3, r3, #15
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	fa02 f303 	lsl.w	r3, r2, r3
 800d0dc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d0de:	693b      	ldr	r3, [r7, #16]
 800d0e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	43db      	mvns	r3, r3
 800d0ea:	6939      	ldr	r1, [r7, #16]
 800d0ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d0f0:	4013      	ands	r3, r2
 800d0f2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800d0f4:	2300      	movs	r3, #0
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3720      	adds	r7, #32
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
	...

0800d100 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b086      	sub	sp, #24
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	333c      	adds	r3, #60	; 0x3c
 800d118:	3304      	adds	r3, #4
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	015a      	lsls	r2, r3, #5
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	4413      	add	r3, r2
 800d126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d12a:	689b      	ldr	r3, [r3, #8]
 800d12c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	691b      	ldr	r3, [r3, #16]
 800d132:	2b01      	cmp	r3, #1
 800d134:	f040 80a0 	bne.w	800d278 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	f003 0308 	and.w	r3, r3, #8
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d015      	beq.n	800d16e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	4a72      	ldr	r2, [pc, #456]	; (800d310 <PCD_EP_OutXfrComplete_int+0x210>)
 800d146:	4293      	cmp	r3, r2
 800d148:	f240 80dd 	bls.w	800d306 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d152:	2b00      	cmp	r3, #0
 800d154:	f000 80d7 	beq.w	800d306 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	015a      	lsls	r2, r3, #5
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	4413      	add	r3, r2
 800d160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d164:	461a      	mov	r2, r3
 800d166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d16a:	6093      	str	r3, [r2, #8]
 800d16c:	e0cb      	b.n	800d306 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	f003 0320 	and.w	r3, r3, #32
 800d174:	2b00      	cmp	r3, #0
 800d176:	d009      	beq.n	800d18c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	015a      	lsls	r2, r3, #5
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	4413      	add	r3, r2
 800d180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d184:	461a      	mov	r2, r3
 800d186:	2320      	movs	r3, #32
 800d188:	6093      	str	r3, [r2, #8]
 800d18a:	e0bc      	b.n	800d306 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d192:	2b00      	cmp	r3, #0
 800d194:	f040 80b7 	bne.w	800d306 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	4a5d      	ldr	r2, [pc, #372]	; (800d310 <PCD_EP_OutXfrComplete_int+0x210>)
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d90f      	bls.n	800d1c0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d00a      	beq.n	800d1c0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	015a      	lsls	r2, r3, #5
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	4413      	add	r3, r2
 800d1b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1b6:	461a      	mov	r2, r3
 800d1b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d1bc:	6093      	str	r3, [r2, #8]
 800d1be:	e0a2      	b.n	800d306 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800d1c0:	6879      	ldr	r1, [r7, #4]
 800d1c2:	683a      	ldr	r2, [r7, #0]
 800d1c4:	4613      	mov	r3, r2
 800d1c6:	00db      	lsls	r3, r3, #3
 800d1c8:	1a9b      	subs	r3, r3, r2
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	440b      	add	r3, r1
 800d1ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d1d2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	0159      	lsls	r1, r3, #5
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	440b      	add	r3, r1
 800d1dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1e0:	691b      	ldr	r3, [r3, #16]
 800d1e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800d1e6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	683a      	ldr	r2, [r7, #0]
 800d1ec:	4613      	mov	r3, r2
 800d1ee:	00db      	lsls	r3, r3, #3
 800d1f0:	1a9b      	subs	r3, r3, r2
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	4403      	add	r3, r0
 800d1f6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d1fa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800d1fc:	6879      	ldr	r1, [r7, #4]
 800d1fe:	683a      	ldr	r2, [r7, #0]
 800d200:	4613      	mov	r3, r2
 800d202:	00db      	lsls	r3, r3, #3
 800d204:	1a9b      	subs	r3, r3, r2
 800d206:	009b      	lsls	r3, r3, #2
 800d208:	440b      	add	r3, r1
 800d20a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d20e:	6819      	ldr	r1, [r3, #0]
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	683a      	ldr	r2, [r7, #0]
 800d214:	4613      	mov	r3, r2
 800d216:	00db      	lsls	r3, r3, #3
 800d218:	1a9b      	subs	r3, r3, r2
 800d21a:	009b      	lsls	r3, r3, #2
 800d21c:	4403      	add	r3, r0
 800d21e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	4419      	add	r1, r3
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	683a      	ldr	r2, [r7, #0]
 800d22a:	4613      	mov	r3, r2
 800d22c:	00db      	lsls	r3, r3, #3
 800d22e:	1a9b      	subs	r3, r3, r2
 800d230:	009b      	lsls	r3, r3, #2
 800d232:	4403      	add	r3, r0
 800d234:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d238:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d114      	bne.n	800d26a <PCD_EP_OutXfrComplete_int+0x16a>
 800d240:	6879      	ldr	r1, [r7, #4]
 800d242:	683a      	ldr	r2, [r7, #0]
 800d244:	4613      	mov	r3, r2
 800d246:	00db      	lsls	r3, r3, #3
 800d248:	1a9b      	subs	r3, r3, r2
 800d24a:	009b      	lsls	r3, r3, #2
 800d24c:	440b      	add	r3, r1
 800d24e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d108      	bne.n	800d26a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	6818      	ldr	r0, [r3, #0]
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d262:	461a      	mov	r2, r3
 800d264:	2101      	movs	r1, #1
 800d266:	f003 fc05 	bl	8010a74 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	b2db      	uxtb	r3, r3
 800d26e:	4619      	mov	r1, r3
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f008 f9ab 	bl	80155cc <HAL_PCD_DataOutStageCallback>
 800d276:	e046      	b.n	800d306 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	4a26      	ldr	r2, [pc, #152]	; (800d314 <PCD_EP_OutXfrComplete_int+0x214>)
 800d27c:	4293      	cmp	r3, r2
 800d27e:	d124      	bne.n	800d2ca <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d286:	2b00      	cmp	r3, #0
 800d288:	d00a      	beq.n	800d2a0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	015a      	lsls	r2, r3, #5
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	4413      	add	r3, r2
 800d292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d296:	461a      	mov	r2, r3
 800d298:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d29c:	6093      	str	r3, [r2, #8]
 800d29e:	e032      	b.n	800d306 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	f003 0320 	and.w	r3, r3, #32
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d008      	beq.n	800d2bc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	015a      	lsls	r2, r3, #5
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	4413      	add	r3, r2
 800d2b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2b6:	461a      	mov	r2, r3
 800d2b8:	2320      	movs	r3, #32
 800d2ba:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	b2db      	uxtb	r3, r3
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f008 f982 	bl	80155cc <HAL_PCD_DataOutStageCallback>
 800d2c8:	e01d      	b.n	800d306 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d114      	bne.n	800d2fa <PCD_EP_OutXfrComplete_int+0x1fa>
 800d2d0:	6879      	ldr	r1, [r7, #4]
 800d2d2:	683a      	ldr	r2, [r7, #0]
 800d2d4:	4613      	mov	r3, r2
 800d2d6:	00db      	lsls	r3, r3, #3
 800d2d8:	1a9b      	subs	r3, r3, r2
 800d2da:	009b      	lsls	r3, r3, #2
 800d2dc:	440b      	add	r3, r1
 800d2de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d108      	bne.n	800d2fa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6818      	ldr	r0, [r3, #0]
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d2f2:	461a      	mov	r2, r3
 800d2f4:	2100      	movs	r1, #0
 800d2f6:	f003 fbbd 	bl	8010a74 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	b2db      	uxtb	r3, r3
 800d2fe:	4619      	mov	r1, r3
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f008 f963 	bl	80155cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d306:	2300      	movs	r3, #0
}
 800d308:	4618      	mov	r0, r3
 800d30a:	3718      	adds	r7, #24
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}
 800d310:	4f54300a 	.word	0x4f54300a
 800d314:	4f54310a 	.word	0x4f54310a

0800d318 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b086      	sub	sp, #24
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	333c      	adds	r3, #60	; 0x3c
 800d330:	3304      	adds	r3, #4
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	015a      	lsls	r2, r3, #5
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	4413      	add	r3, r2
 800d33e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d342:	689b      	ldr	r3, [r3, #8]
 800d344:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	4a15      	ldr	r2, [pc, #84]	; (800d3a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800d34a:	4293      	cmp	r3, r2
 800d34c:	d90e      	bls.n	800d36c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d354:	2b00      	cmp	r3, #0
 800d356:	d009      	beq.n	800d36c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	015a      	lsls	r2, r3, #5
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	4413      	add	r3, r2
 800d360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d364:	461a      	mov	r2, r3
 800d366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d36a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f008 f91b 	bl	80155a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	4a0a      	ldr	r2, [pc, #40]	; (800d3a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800d376:	4293      	cmp	r3, r2
 800d378:	d90c      	bls.n	800d394 <PCD_EP_OutSetupPacket_int+0x7c>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	691b      	ldr	r3, [r3, #16]
 800d37e:	2b01      	cmp	r3, #1
 800d380:	d108      	bne.n	800d394 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6818      	ldr	r0, [r3, #0]
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d38c:	461a      	mov	r2, r3
 800d38e:	2101      	movs	r1, #1
 800d390:	f003 fb70 	bl	8010a74 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d394:	2300      	movs	r3, #0
}
 800d396:	4618      	mov	r0, r3
 800d398:	3718      	adds	r7, #24
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}
 800d39e:	bf00      	nop
 800d3a0:	4f54300a 	.word	0x4f54300a

0800d3a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b085      	sub	sp, #20
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	460b      	mov	r3, r1
 800d3ae:	70fb      	strb	r3, [r7, #3]
 800d3b0:	4613      	mov	r3, r2
 800d3b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d3bc:	78fb      	ldrb	r3, [r7, #3]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d107      	bne.n	800d3d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d3c2:	883b      	ldrh	r3, [r7, #0]
 800d3c4:	0419      	lsls	r1, r3, #16
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	68ba      	ldr	r2, [r7, #8]
 800d3cc:	430a      	orrs	r2, r1
 800d3ce:	629a      	str	r2, [r3, #40]	; 0x28
 800d3d0:	e028      	b.n	800d424 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3d8:	0c1b      	lsrs	r3, r3, #16
 800d3da:	68ba      	ldr	r2, [r7, #8]
 800d3dc:	4413      	add	r3, r2
 800d3de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	73fb      	strb	r3, [r7, #15]
 800d3e4:	e00d      	b.n	800d402 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681a      	ldr	r2, [r3, #0]
 800d3ea:	7bfb      	ldrb	r3, [r7, #15]
 800d3ec:	3340      	adds	r3, #64	; 0x40
 800d3ee:	009b      	lsls	r3, r3, #2
 800d3f0:	4413      	add	r3, r2
 800d3f2:	685b      	ldr	r3, [r3, #4]
 800d3f4:	0c1b      	lsrs	r3, r3, #16
 800d3f6:	68ba      	ldr	r2, [r7, #8]
 800d3f8:	4413      	add	r3, r2
 800d3fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d3fc:	7bfb      	ldrb	r3, [r7, #15]
 800d3fe:	3301      	adds	r3, #1
 800d400:	73fb      	strb	r3, [r7, #15]
 800d402:	7bfa      	ldrb	r2, [r7, #15]
 800d404:	78fb      	ldrb	r3, [r7, #3]
 800d406:	3b01      	subs	r3, #1
 800d408:	429a      	cmp	r2, r3
 800d40a:	d3ec      	bcc.n	800d3e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d40c:	883b      	ldrh	r3, [r7, #0]
 800d40e:	0418      	lsls	r0, r3, #16
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6819      	ldr	r1, [r3, #0]
 800d414:	78fb      	ldrb	r3, [r7, #3]
 800d416:	3b01      	subs	r3, #1
 800d418:	68ba      	ldr	r2, [r7, #8]
 800d41a:	4302      	orrs	r2, r0
 800d41c:	3340      	adds	r3, #64	; 0x40
 800d41e:	009b      	lsls	r3, r3, #2
 800d420:	440b      	add	r3, r1
 800d422:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d424:	2300      	movs	r3, #0
}
 800d426:	4618      	mov	r0, r3
 800d428:	3714      	adds	r7, #20
 800d42a:	46bd      	mov	sp, r7
 800d42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d430:	4770      	bx	lr

0800d432 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d432:	b480      	push	{r7}
 800d434:	b083      	sub	sp, #12
 800d436:	af00      	add	r7, sp, #0
 800d438:	6078      	str	r0, [r7, #4]
 800d43a:	460b      	mov	r3, r1
 800d43c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	887a      	ldrh	r2, [r7, #2]
 800d444:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800d446:	2300      	movs	r3, #0
}
 800d448:	4618      	mov	r0, r3
 800d44a:	370c      	adds	r7, #12
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr

0800d454 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d454:	b480      	push	{r7}
 800d456:	b083      	sub	sp, #12
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
 800d45c:	460b      	mov	r3, r1
 800d45e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d460:	bf00      	nop
 800d462:	370c      	adds	r7, #12
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr

0800d46c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b086      	sub	sp, #24
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d101      	bne.n	800d47e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d47a:	2301      	movs	r3, #1
 800d47c:	e25b      	b.n	800d936 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	f003 0301 	and.w	r3, r3, #1
 800d486:	2b00      	cmp	r3, #0
 800d488:	d075      	beq.n	800d576 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d48a:	4ba3      	ldr	r3, [pc, #652]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d48c:	689b      	ldr	r3, [r3, #8]
 800d48e:	f003 030c 	and.w	r3, r3, #12
 800d492:	2b04      	cmp	r3, #4
 800d494:	d00c      	beq.n	800d4b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d496:	4ba0      	ldr	r3, [pc, #640]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d498:	689b      	ldr	r3, [r3, #8]
 800d49a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d49e:	2b08      	cmp	r3, #8
 800d4a0:	d112      	bne.n	800d4c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d4a2:	4b9d      	ldr	r3, [pc, #628]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d4aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d4ae:	d10b      	bne.n	800d4c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d4b0:	4b99      	ldr	r3, [pc, #612]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d05b      	beq.n	800d574 <HAL_RCC_OscConfig+0x108>
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	685b      	ldr	r3, [r3, #4]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d157      	bne.n	800d574 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	e236      	b.n	800d936 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d4d0:	d106      	bne.n	800d4e0 <HAL_RCC_OscConfig+0x74>
 800d4d2:	4b91      	ldr	r3, [pc, #580]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	4a90      	ldr	r2, [pc, #576]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d4d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d4dc:	6013      	str	r3, [r2, #0]
 800d4de:	e01d      	b.n	800d51c <HAL_RCC_OscConfig+0xb0>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d4e8:	d10c      	bne.n	800d504 <HAL_RCC_OscConfig+0x98>
 800d4ea:	4b8b      	ldr	r3, [pc, #556]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	4a8a      	ldr	r2, [pc, #552]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d4f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d4f4:	6013      	str	r3, [r2, #0]
 800d4f6:	4b88      	ldr	r3, [pc, #544]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	4a87      	ldr	r2, [pc, #540]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d4fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d500:	6013      	str	r3, [r2, #0]
 800d502:	e00b      	b.n	800d51c <HAL_RCC_OscConfig+0xb0>
 800d504:	4b84      	ldr	r3, [pc, #528]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	4a83      	ldr	r2, [pc, #524]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d50a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d50e:	6013      	str	r3, [r2, #0]
 800d510:	4b81      	ldr	r3, [pc, #516]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	4a80      	ldr	r2, [pc, #512]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d51a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	685b      	ldr	r3, [r3, #4]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d013      	beq.n	800d54c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d524:	f7fd ff66 	bl	800b3f4 <HAL_GetTick>
 800d528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d52a:	e008      	b.n	800d53e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d52c:	f7fd ff62 	bl	800b3f4 <HAL_GetTick>
 800d530:	4602      	mov	r2, r0
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	1ad3      	subs	r3, r2, r3
 800d536:	2b64      	cmp	r3, #100	; 0x64
 800d538:	d901      	bls.n	800d53e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d53a:	2303      	movs	r3, #3
 800d53c:	e1fb      	b.n	800d936 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d53e:	4b76      	ldr	r3, [pc, #472]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d546:	2b00      	cmp	r3, #0
 800d548:	d0f0      	beq.n	800d52c <HAL_RCC_OscConfig+0xc0>
 800d54a:	e014      	b.n	800d576 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d54c:	f7fd ff52 	bl	800b3f4 <HAL_GetTick>
 800d550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d552:	e008      	b.n	800d566 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d554:	f7fd ff4e 	bl	800b3f4 <HAL_GetTick>
 800d558:	4602      	mov	r2, r0
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	1ad3      	subs	r3, r2, r3
 800d55e:	2b64      	cmp	r3, #100	; 0x64
 800d560:	d901      	bls.n	800d566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d562:	2303      	movs	r3, #3
 800d564:	e1e7      	b.n	800d936 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d566:	4b6c      	ldr	r3, [pc, #432]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d1f0      	bne.n	800d554 <HAL_RCC_OscConfig+0xe8>
 800d572:	e000      	b.n	800d576 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f003 0302 	and.w	r3, r3, #2
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d063      	beq.n	800d64a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d582:	4b65      	ldr	r3, [pc, #404]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d584:	689b      	ldr	r3, [r3, #8]
 800d586:	f003 030c 	and.w	r3, r3, #12
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d00b      	beq.n	800d5a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d58e:	4b62      	ldr	r3, [pc, #392]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d590:	689b      	ldr	r3, [r3, #8]
 800d592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d596:	2b08      	cmp	r3, #8
 800d598:	d11c      	bne.n	800d5d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d59a:	4b5f      	ldr	r3, [pc, #380]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d59c:	685b      	ldr	r3, [r3, #4]
 800d59e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d116      	bne.n	800d5d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d5a6:	4b5c      	ldr	r3, [pc, #368]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f003 0302 	and.w	r3, r3, #2
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d005      	beq.n	800d5be <HAL_RCC_OscConfig+0x152>
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	68db      	ldr	r3, [r3, #12]
 800d5b6:	2b01      	cmp	r3, #1
 800d5b8:	d001      	beq.n	800d5be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	e1bb      	b.n	800d936 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d5be:	4b56      	ldr	r3, [pc, #344]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	691b      	ldr	r3, [r3, #16]
 800d5ca:	00db      	lsls	r3, r3, #3
 800d5cc:	4952      	ldr	r1, [pc, #328]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d5ce:	4313      	orrs	r3, r2
 800d5d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d5d2:	e03a      	b.n	800d64a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	68db      	ldr	r3, [r3, #12]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d020      	beq.n	800d61e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d5dc:	4b4f      	ldr	r3, [pc, #316]	; (800d71c <HAL_RCC_OscConfig+0x2b0>)
 800d5de:	2201      	movs	r2, #1
 800d5e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d5e2:	f7fd ff07 	bl	800b3f4 <HAL_GetTick>
 800d5e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d5e8:	e008      	b.n	800d5fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d5ea:	f7fd ff03 	bl	800b3f4 <HAL_GetTick>
 800d5ee:	4602      	mov	r2, r0
 800d5f0:	693b      	ldr	r3, [r7, #16]
 800d5f2:	1ad3      	subs	r3, r2, r3
 800d5f4:	2b02      	cmp	r3, #2
 800d5f6:	d901      	bls.n	800d5fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d5f8:	2303      	movs	r3, #3
 800d5fa:	e19c      	b.n	800d936 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d5fc:	4b46      	ldr	r3, [pc, #280]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f003 0302 	and.w	r3, r3, #2
 800d604:	2b00      	cmp	r3, #0
 800d606:	d0f0      	beq.n	800d5ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d608:	4b43      	ldr	r3, [pc, #268]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	691b      	ldr	r3, [r3, #16]
 800d614:	00db      	lsls	r3, r3, #3
 800d616:	4940      	ldr	r1, [pc, #256]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d618:	4313      	orrs	r3, r2
 800d61a:	600b      	str	r3, [r1, #0]
 800d61c:	e015      	b.n	800d64a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d61e:	4b3f      	ldr	r3, [pc, #252]	; (800d71c <HAL_RCC_OscConfig+0x2b0>)
 800d620:	2200      	movs	r2, #0
 800d622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d624:	f7fd fee6 	bl	800b3f4 <HAL_GetTick>
 800d628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d62a:	e008      	b.n	800d63e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d62c:	f7fd fee2 	bl	800b3f4 <HAL_GetTick>
 800d630:	4602      	mov	r2, r0
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	1ad3      	subs	r3, r2, r3
 800d636:	2b02      	cmp	r3, #2
 800d638:	d901      	bls.n	800d63e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d63a:	2303      	movs	r3, #3
 800d63c:	e17b      	b.n	800d936 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d63e:	4b36      	ldr	r3, [pc, #216]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f003 0302 	and.w	r3, r3, #2
 800d646:	2b00      	cmp	r3, #0
 800d648:	d1f0      	bne.n	800d62c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	f003 0308 	and.w	r3, r3, #8
 800d652:	2b00      	cmp	r3, #0
 800d654:	d030      	beq.n	800d6b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	695b      	ldr	r3, [r3, #20]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d016      	beq.n	800d68c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d65e:	4b30      	ldr	r3, [pc, #192]	; (800d720 <HAL_RCC_OscConfig+0x2b4>)
 800d660:	2201      	movs	r2, #1
 800d662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d664:	f7fd fec6 	bl	800b3f4 <HAL_GetTick>
 800d668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d66a:	e008      	b.n	800d67e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d66c:	f7fd fec2 	bl	800b3f4 <HAL_GetTick>
 800d670:	4602      	mov	r2, r0
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	1ad3      	subs	r3, r2, r3
 800d676:	2b02      	cmp	r3, #2
 800d678:	d901      	bls.n	800d67e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d67a:	2303      	movs	r3, #3
 800d67c:	e15b      	b.n	800d936 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d67e:	4b26      	ldr	r3, [pc, #152]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d682:	f003 0302 	and.w	r3, r3, #2
 800d686:	2b00      	cmp	r3, #0
 800d688:	d0f0      	beq.n	800d66c <HAL_RCC_OscConfig+0x200>
 800d68a:	e015      	b.n	800d6b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d68c:	4b24      	ldr	r3, [pc, #144]	; (800d720 <HAL_RCC_OscConfig+0x2b4>)
 800d68e:	2200      	movs	r2, #0
 800d690:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d692:	f7fd feaf 	bl	800b3f4 <HAL_GetTick>
 800d696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d698:	e008      	b.n	800d6ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d69a:	f7fd feab 	bl	800b3f4 <HAL_GetTick>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	1ad3      	subs	r3, r2, r3
 800d6a4:	2b02      	cmp	r3, #2
 800d6a6:	d901      	bls.n	800d6ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d6a8:	2303      	movs	r3, #3
 800d6aa:	e144      	b.n	800d936 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d6ac:	4b1a      	ldr	r3, [pc, #104]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d6ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6b0:	f003 0302 	and.w	r3, r3, #2
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d1f0      	bne.n	800d69a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	f003 0304 	and.w	r3, r3, #4
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	f000 80a0 	beq.w	800d806 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d6ca:	4b13      	ldr	r3, [pc, #76]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d10f      	bne.n	800d6f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	60bb      	str	r3, [r7, #8]
 800d6da:	4b0f      	ldr	r3, [pc, #60]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d6dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6de:	4a0e      	ldr	r2, [pc, #56]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d6e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d6e4:	6413      	str	r3, [r2, #64]	; 0x40
 800d6e6:	4b0c      	ldr	r3, [pc, #48]	; (800d718 <HAL_RCC_OscConfig+0x2ac>)
 800d6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d6ee:	60bb      	str	r3, [r7, #8]
 800d6f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d6f6:	4b0b      	ldr	r3, [pc, #44]	; (800d724 <HAL_RCC_OscConfig+0x2b8>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d121      	bne.n	800d746 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d702:	4b08      	ldr	r3, [pc, #32]	; (800d724 <HAL_RCC_OscConfig+0x2b8>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	4a07      	ldr	r2, [pc, #28]	; (800d724 <HAL_RCC_OscConfig+0x2b8>)
 800d708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d70c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d70e:	f7fd fe71 	bl	800b3f4 <HAL_GetTick>
 800d712:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d714:	e011      	b.n	800d73a <HAL_RCC_OscConfig+0x2ce>
 800d716:	bf00      	nop
 800d718:	40023800 	.word	0x40023800
 800d71c:	42470000 	.word	0x42470000
 800d720:	42470e80 	.word	0x42470e80
 800d724:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d728:	f7fd fe64 	bl	800b3f4 <HAL_GetTick>
 800d72c:	4602      	mov	r2, r0
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	1ad3      	subs	r3, r2, r3
 800d732:	2b02      	cmp	r3, #2
 800d734:	d901      	bls.n	800d73a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800d736:	2303      	movs	r3, #3
 800d738:	e0fd      	b.n	800d936 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d73a:	4b81      	ldr	r3, [pc, #516]	; (800d940 <HAL_RCC_OscConfig+0x4d4>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d742:	2b00      	cmp	r3, #0
 800d744:	d0f0      	beq.n	800d728 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	689b      	ldr	r3, [r3, #8]
 800d74a:	2b01      	cmp	r3, #1
 800d74c:	d106      	bne.n	800d75c <HAL_RCC_OscConfig+0x2f0>
 800d74e:	4b7d      	ldr	r3, [pc, #500]	; (800d944 <HAL_RCC_OscConfig+0x4d8>)
 800d750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d752:	4a7c      	ldr	r2, [pc, #496]	; (800d944 <HAL_RCC_OscConfig+0x4d8>)
 800d754:	f043 0301 	orr.w	r3, r3, #1
 800d758:	6713      	str	r3, [r2, #112]	; 0x70
 800d75a:	e01c      	b.n	800d796 <HAL_RCC_OscConfig+0x32a>
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	689b      	ldr	r3, [r3, #8]
 800d760:	2b05      	cmp	r3, #5
 800d762:	d10c      	bne.n	800d77e <HAL_RCC_OscConfig+0x312>
 800d764:	4b77      	ldr	r3, [pc, #476]	; (800d944 <HAL_RCC_OscConfig+0x4d8>)
 800d766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d768:	4a76      	ldr	r2, [pc, #472]	; (800d944 <HAL_RCC_OscConfig+0x4d8>)
 800d76a:	f043 0304 	orr.w	r3, r3, #4
 800d76e:	6713      	str	r3, [r2, #112]	; 0x70
 800d770:	4b74      	ldr	r3, [pc, #464]	; (800d944 <HAL_RCC_OscConfig+0x4d8>)
 800d772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d774:	4a73      	ldr	r2, [pc, #460]	; (800d944 <HAL_RCC_OscConfig+0x4d8>)
 800d776:	f043 0301 	orr.w	r3, r3, #1
 800d77a:	6713      	str	r3, [r2, #112]	; 0x70
 800d77c:	e00b      	b.n	800d796 <HAL_RCC_OscConfig+0x32a>
 800d77e:	4b71      	ldr	r3, [pc, #452]	; (800d944 <HAL_RCC_OscConfig+0x4d8>)
 800d780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d782:	4a70      	ldr	r2, [pc, #448]	; (800d944 <HAL_RCC_OscConfig+0x4d8>)
 800d784:	f023 0301 	bic.w	r3, r3, #1
 800d788:	6713      	str	r3, [r2, #112]	; 0x70
 800d78a:	4b6e      	ldr	r3, [pc, #440]	; (800d944 <HAL_RCC_OscConfig+0x4d8>)
 800d78c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d78e:	4a6d      	ldr	r2, [pc, #436]	; (800d944 <HAL_RCC_OscConfig+0x4d8>)
 800d790:	f023 0304 	bic.w	r3, r3, #4
 800d794:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	689b      	ldr	r3, [r3, #8]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d015      	beq.n	800d7ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d79e:	f7fd fe29 	bl	800b3f4 <HAL_GetTick>
 800d7a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d7a4:	e00a      	b.n	800d7bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d7a6:	f7fd fe25 	bl	800b3f4 <HAL_GetTick>
 800d7aa:	4602      	mov	r2, r0
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	1ad3      	subs	r3, r2, r3
 800d7b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7b4:	4293      	cmp	r3, r2
 800d7b6:	d901      	bls.n	800d7bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800d7b8:	2303      	movs	r3, #3
 800d7ba:	e0bc      	b.n	800d936 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d7bc:	4b61      	ldr	r3, [pc, #388]	; (800d944 <HAL_RCC_OscConfig+0x4d8>)
 800d7be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7c0:	f003 0302 	and.w	r3, r3, #2
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d0ee      	beq.n	800d7a6 <HAL_RCC_OscConfig+0x33a>
 800d7c8:	e014      	b.n	800d7f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d7ca:	f7fd fe13 	bl	800b3f4 <HAL_GetTick>
 800d7ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d7d0:	e00a      	b.n	800d7e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d7d2:	f7fd fe0f 	bl	800b3f4 <HAL_GetTick>
 800d7d6:	4602      	mov	r2, r0
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	1ad3      	subs	r3, r2, r3
 800d7dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d901      	bls.n	800d7e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800d7e4:	2303      	movs	r3, #3
 800d7e6:	e0a6      	b.n	800d936 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d7e8:	4b56      	ldr	r3, [pc, #344]	; (800d944 <HAL_RCC_OscConfig+0x4d8>)
 800d7ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7ec:	f003 0302 	and.w	r3, r3, #2
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d1ee      	bne.n	800d7d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d7f4:	7dfb      	ldrb	r3, [r7, #23]
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d105      	bne.n	800d806 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d7fa:	4b52      	ldr	r3, [pc, #328]	; (800d944 <HAL_RCC_OscConfig+0x4d8>)
 800d7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7fe:	4a51      	ldr	r2, [pc, #324]	; (800d944 <HAL_RCC_OscConfig+0x4d8>)
 800d800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d804:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	699b      	ldr	r3, [r3, #24]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	f000 8092 	beq.w	800d934 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d810:	4b4c      	ldr	r3, [pc, #304]	; (800d944 <HAL_RCC_OscConfig+0x4d8>)
 800d812:	689b      	ldr	r3, [r3, #8]
 800d814:	f003 030c 	and.w	r3, r3, #12
 800d818:	2b08      	cmp	r3, #8
 800d81a:	d05c      	beq.n	800d8d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	699b      	ldr	r3, [r3, #24]
 800d820:	2b02      	cmp	r3, #2
 800d822:	d141      	bne.n	800d8a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d824:	4b48      	ldr	r3, [pc, #288]	; (800d948 <HAL_RCC_OscConfig+0x4dc>)
 800d826:	2200      	movs	r2, #0
 800d828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d82a:	f7fd fde3 	bl	800b3f4 <HAL_GetTick>
 800d82e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d830:	e008      	b.n	800d844 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d832:	f7fd fddf 	bl	800b3f4 <HAL_GetTick>
 800d836:	4602      	mov	r2, r0
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	1ad3      	subs	r3, r2, r3
 800d83c:	2b02      	cmp	r3, #2
 800d83e:	d901      	bls.n	800d844 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800d840:	2303      	movs	r3, #3
 800d842:	e078      	b.n	800d936 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d844:	4b3f      	ldr	r3, [pc, #252]	; (800d944 <HAL_RCC_OscConfig+0x4d8>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d1f0      	bne.n	800d832 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	69da      	ldr	r2, [r3, #28]
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	6a1b      	ldr	r3, [r3, #32]
 800d858:	431a      	orrs	r2, r3
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d85e:	019b      	lsls	r3, r3, #6
 800d860:	431a      	orrs	r2, r3
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d866:	085b      	lsrs	r3, r3, #1
 800d868:	3b01      	subs	r3, #1
 800d86a:	041b      	lsls	r3, r3, #16
 800d86c:	431a      	orrs	r2, r3
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d872:	061b      	lsls	r3, r3, #24
 800d874:	4933      	ldr	r1, [pc, #204]	; (800d944 <HAL_RCC_OscConfig+0x4d8>)
 800d876:	4313      	orrs	r3, r2
 800d878:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d87a:	4b33      	ldr	r3, [pc, #204]	; (800d948 <HAL_RCC_OscConfig+0x4dc>)
 800d87c:	2201      	movs	r2, #1
 800d87e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d880:	f7fd fdb8 	bl	800b3f4 <HAL_GetTick>
 800d884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d886:	e008      	b.n	800d89a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d888:	f7fd fdb4 	bl	800b3f4 <HAL_GetTick>
 800d88c:	4602      	mov	r2, r0
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	1ad3      	subs	r3, r2, r3
 800d892:	2b02      	cmp	r3, #2
 800d894:	d901      	bls.n	800d89a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800d896:	2303      	movs	r3, #3
 800d898:	e04d      	b.n	800d936 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d89a:	4b2a      	ldr	r3, [pc, #168]	; (800d944 <HAL_RCC_OscConfig+0x4d8>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d0f0      	beq.n	800d888 <HAL_RCC_OscConfig+0x41c>
 800d8a6:	e045      	b.n	800d934 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d8a8:	4b27      	ldr	r3, [pc, #156]	; (800d948 <HAL_RCC_OscConfig+0x4dc>)
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d8ae:	f7fd fda1 	bl	800b3f4 <HAL_GetTick>
 800d8b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d8b4:	e008      	b.n	800d8c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d8b6:	f7fd fd9d 	bl	800b3f4 <HAL_GetTick>
 800d8ba:	4602      	mov	r2, r0
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	1ad3      	subs	r3, r2, r3
 800d8c0:	2b02      	cmp	r3, #2
 800d8c2:	d901      	bls.n	800d8c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800d8c4:	2303      	movs	r3, #3
 800d8c6:	e036      	b.n	800d936 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d8c8:	4b1e      	ldr	r3, [pc, #120]	; (800d944 <HAL_RCC_OscConfig+0x4d8>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d1f0      	bne.n	800d8b6 <HAL_RCC_OscConfig+0x44a>
 800d8d4:	e02e      	b.n	800d934 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	699b      	ldr	r3, [r3, #24]
 800d8da:	2b01      	cmp	r3, #1
 800d8dc:	d101      	bne.n	800d8e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800d8de:	2301      	movs	r3, #1
 800d8e0:	e029      	b.n	800d936 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d8e2:	4b18      	ldr	r3, [pc, #96]	; (800d944 <HAL_RCC_OscConfig+0x4d8>)
 800d8e4:	685b      	ldr	r3, [r3, #4]
 800d8e6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	69db      	ldr	r3, [r3, #28]
 800d8f2:	429a      	cmp	r2, r3
 800d8f4:	d11c      	bne.n	800d930 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d900:	429a      	cmp	r2, r3
 800d902:	d115      	bne.n	800d930 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d904:	68fa      	ldr	r2, [r7, #12]
 800d906:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d90a:	4013      	ands	r3, r2
 800d90c:	687a      	ldr	r2, [r7, #4]
 800d90e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d910:	4293      	cmp	r3, r2
 800d912:	d10d      	bne.n	800d930 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d91e:	429a      	cmp	r2, r3
 800d920:	d106      	bne.n	800d930 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d92c:	429a      	cmp	r2, r3
 800d92e:	d001      	beq.n	800d934 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800d930:	2301      	movs	r3, #1
 800d932:	e000      	b.n	800d936 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800d934:	2300      	movs	r3, #0
}
 800d936:	4618      	mov	r0, r3
 800d938:	3718      	adds	r7, #24
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}
 800d93e:	bf00      	nop
 800d940:	40007000 	.word	0x40007000
 800d944:	40023800 	.word	0x40023800
 800d948:	42470060 	.word	0x42470060

0800d94c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b084      	sub	sp, #16
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d101      	bne.n	800d960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d95c:	2301      	movs	r3, #1
 800d95e:	e0cc      	b.n	800dafa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d960:	4b68      	ldr	r3, [pc, #416]	; (800db04 <HAL_RCC_ClockConfig+0x1b8>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f003 030f 	and.w	r3, r3, #15
 800d968:	683a      	ldr	r2, [r7, #0]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d90c      	bls.n	800d988 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d96e:	4b65      	ldr	r3, [pc, #404]	; (800db04 <HAL_RCC_ClockConfig+0x1b8>)
 800d970:	683a      	ldr	r2, [r7, #0]
 800d972:	b2d2      	uxtb	r2, r2
 800d974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d976:	4b63      	ldr	r3, [pc, #396]	; (800db04 <HAL_RCC_ClockConfig+0x1b8>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f003 030f 	and.w	r3, r3, #15
 800d97e:	683a      	ldr	r2, [r7, #0]
 800d980:	429a      	cmp	r2, r3
 800d982:	d001      	beq.n	800d988 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d984:	2301      	movs	r3, #1
 800d986:	e0b8      	b.n	800dafa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	f003 0302 	and.w	r3, r3, #2
 800d990:	2b00      	cmp	r3, #0
 800d992:	d020      	beq.n	800d9d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f003 0304 	and.w	r3, r3, #4
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d005      	beq.n	800d9ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d9a0:	4b59      	ldr	r3, [pc, #356]	; (800db08 <HAL_RCC_ClockConfig+0x1bc>)
 800d9a2:	689b      	ldr	r3, [r3, #8]
 800d9a4:	4a58      	ldr	r2, [pc, #352]	; (800db08 <HAL_RCC_ClockConfig+0x1bc>)
 800d9a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d9aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	f003 0308 	and.w	r3, r3, #8
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d005      	beq.n	800d9c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d9b8:	4b53      	ldr	r3, [pc, #332]	; (800db08 <HAL_RCC_ClockConfig+0x1bc>)
 800d9ba:	689b      	ldr	r3, [r3, #8]
 800d9bc:	4a52      	ldr	r2, [pc, #328]	; (800db08 <HAL_RCC_ClockConfig+0x1bc>)
 800d9be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d9c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d9c4:	4b50      	ldr	r3, [pc, #320]	; (800db08 <HAL_RCC_ClockConfig+0x1bc>)
 800d9c6:	689b      	ldr	r3, [r3, #8]
 800d9c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	689b      	ldr	r3, [r3, #8]
 800d9d0:	494d      	ldr	r1, [pc, #308]	; (800db08 <HAL_RCC_ClockConfig+0x1bc>)
 800d9d2:	4313      	orrs	r3, r2
 800d9d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f003 0301 	and.w	r3, r3, #1
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d044      	beq.n	800da6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	685b      	ldr	r3, [r3, #4]
 800d9e6:	2b01      	cmp	r3, #1
 800d9e8:	d107      	bne.n	800d9fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d9ea:	4b47      	ldr	r3, [pc, #284]	; (800db08 <HAL_RCC_ClockConfig+0x1bc>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d119      	bne.n	800da2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	e07f      	b.n	800dafa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	685b      	ldr	r3, [r3, #4]
 800d9fe:	2b02      	cmp	r3, #2
 800da00:	d003      	beq.n	800da0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800da06:	2b03      	cmp	r3, #3
 800da08:	d107      	bne.n	800da1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800da0a:	4b3f      	ldr	r3, [pc, #252]	; (800db08 <HAL_RCC_ClockConfig+0x1bc>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da12:	2b00      	cmp	r3, #0
 800da14:	d109      	bne.n	800da2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800da16:	2301      	movs	r3, #1
 800da18:	e06f      	b.n	800dafa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800da1a:	4b3b      	ldr	r3, [pc, #236]	; (800db08 <HAL_RCC_ClockConfig+0x1bc>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f003 0302 	and.w	r3, r3, #2
 800da22:	2b00      	cmp	r3, #0
 800da24:	d101      	bne.n	800da2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800da26:	2301      	movs	r3, #1
 800da28:	e067      	b.n	800dafa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800da2a:	4b37      	ldr	r3, [pc, #220]	; (800db08 <HAL_RCC_ClockConfig+0x1bc>)
 800da2c:	689b      	ldr	r3, [r3, #8]
 800da2e:	f023 0203 	bic.w	r2, r3, #3
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	685b      	ldr	r3, [r3, #4]
 800da36:	4934      	ldr	r1, [pc, #208]	; (800db08 <HAL_RCC_ClockConfig+0x1bc>)
 800da38:	4313      	orrs	r3, r2
 800da3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800da3c:	f7fd fcda 	bl	800b3f4 <HAL_GetTick>
 800da40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800da42:	e00a      	b.n	800da5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800da44:	f7fd fcd6 	bl	800b3f4 <HAL_GetTick>
 800da48:	4602      	mov	r2, r0
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	1ad3      	subs	r3, r2, r3
 800da4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800da52:	4293      	cmp	r3, r2
 800da54:	d901      	bls.n	800da5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800da56:	2303      	movs	r3, #3
 800da58:	e04f      	b.n	800dafa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800da5a:	4b2b      	ldr	r3, [pc, #172]	; (800db08 <HAL_RCC_ClockConfig+0x1bc>)
 800da5c:	689b      	ldr	r3, [r3, #8]
 800da5e:	f003 020c 	and.w	r2, r3, #12
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	685b      	ldr	r3, [r3, #4]
 800da66:	009b      	lsls	r3, r3, #2
 800da68:	429a      	cmp	r2, r3
 800da6a:	d1eb      	bne.n	800da44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800da6c:	4b25      	ldr	r3, [pc, #148]	; (800db04 <HAL_RCC_ClockConfig+0x1b8>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f003 030f 	and.w	r3, r3, #15
 800da74:	683a      	ldr	r2, [r7, #0]
 800da76:	429a      	cmp	r2, r3
 800da78:	d20c      	bcs.n	800da94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800da7a:	4b22      	ldr	r3, [pc, #136]	; (800db04 <HAL_RCC_ClockConfig+0x1b8>)
 800da7c:	683a      	ldr	r2, [r7, #0]
 800da7e:	b2d2      	uxtb	r2, r2
 800da80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800da82:	4b20      	ldr	r3, [pc, #128]	; (800db04 <HAL_RCC_ClockConfig+0x1b8>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	f003 030f 	and.w	r3, r3, #15
 800da8a:	683a      	ldr	r2, [r7, #0]
 800da8c:	429a      	cmp	r2, r3
 800da8e:	d001      	beq.n	800da94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800da90:	2301      	movs	r3, #1
 800da92:	e032      	b.n	800dafa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	f003 0304 	and.w	r3, r3, #4
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d008      	beq.n	800dab2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800daa0:	4b19      	ldr	r3, [pc, #100]	; (800db08 <HAL_RCC_ClockConfig+0x1bc>)
 800daa2:	689b      	ldr	r3, [r3, #8]
 800daa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	68db      	ldr	r3, [r3, #12]
 800daac:	4916      	ldr	r1, [pc, #88]	; (800db08 <HAL_RCC_ClockConfig+0x1bc>)
 800daae:	4313      	orrs	r3, r2
 800dab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	f003 0308 	and.w	r3, r3, #8
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d009      	beq.n	800dad2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800dabe:	4b12      	ldr	r3, [pc, #72]	; (800db08 <HAL_RCC_ClockConfig+0x1bc>)
 800dac0:	689b      	ldr	r3, [r3, #8]
 800dac2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	691b      	ldr	r3, [r3, #16]
 800daca:	00db      	lsls	r3, r3, #3
 800dacc:	490e      	ldr	r1, [pc, #56]	; (800db08 <HAL_RCC_ClockConfig+0x1bc>)
 800dace:	4313      	orrs	r3, r2
 800dad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800dad2:	f000 f821 	bl	800db18 <HAL_RCC_GetSysClockFreq>
 800dad6:	4601      	mov	r1, r0
 800dad8:	4b0b      	ldr	r3, [pc, #44]	; (800db08 <HAL_RCC_ClockConfig+0x1bc>)
 800dada:	689b      	ldr	r3, [r3, #8]
 800dadc:	091b      	lsrs	r3, r3, #4
 800dade:	f003 030f 	and.w	r3, r3, #15
 800dae2:	4a0a      	ldr	r2, [pc, #40]	; (800db0c <HAL_RCC_ClockConfig+0x1c0>)
 800dae4:	5cd3      	ldrb	r3, [r2, r3]
 800dae6:	fa21 f303 	lsr.w	r3, r1, r3
 800daea:	4a09      	ldr	r2, [pc, #36]	; (800db10 <HAL_RCC_ClockConfig+0x1c4>)
 800daec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800daee:	4b09      	ldr	r3, [pc, #36]	; (800db14 <HAL_RCC_ClockConfig+0x1c8>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	4618      	mov	r0, r3
 800daf4:	f7fd f984 	bl	800ae00 <HAL_InitTick>

  return HAL_OK;
 800daf8:	2300      	movs	r3, #0
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3710      	adds	r7, #16
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	40023c00 	.word	0x40023c00
 800db08:	40023800 	.word	0x40023800
 800db0c:	0801b288 	.word	0x0801b288
 800db10:	20000828 	.word	0x20000828
 800db14:	2000082c 	.word	0x2000082c

0800db18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800db18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db1a:	b085      	sub	sp, #20
 800db1c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800db1e:	2300      	movs	r3, #0
 800db20:	607b      	str	r3, [r7, #4]
 800db22:	2300      	movs	r3, #0
 800db24:	60fb      	str	r3, [r7, #12]
 800db26:	2300      	movs	r3, #0
 800db28:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800db2a:	2300      	movs	r3, #0
 800db2c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800db2e:	4b63      	ldr	r3, [pc, #396]	; (800dcbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800db30:	689b      	ldr	r3, [r3, #8]
 800db32:	f003 030c 	and.w	r3, r3, #12
 800db36:	2b04      	cmp	r3, #4
 800db38:	d007      	beq.n	800db4a <HAL_RCC_GetSysClockFreq+0x32>
 800db3a:	2b08      	cmp	r3, #8
 800db3c:	d008      	beq.n	800db50 <HAL_RCC_GetSysClockFreq+0x38>
 800db3e:	2b00      	cmp	r3, #0
 800db40:	f040 80b4 	bne.w	800dcac <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800db44:	4b5e      	ldr	r3, [pc, #376]	; (800dcc0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800db46:	60bb      	str	r3, [r7, #8]
       break;
 800db48:	e0b3      	b.n	800dcb2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800db4a:	4b5e      	ldr	r3, [pc, #376]	; (800dcc4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800db4c:	60bb      	str	r3, [r7, #8]
      break;
 800db4e:	e0b0      	b.n	800dcb2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800db50:	4b5a      	ldr	r3, [pc, #360]	; (800dcbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800db52:	685b      	ldr	r3, [r3, #4]
 800db54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db58:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800db5a:	4b58      	ldr	r3, [pc, #352]	; (800dcbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db62:	2b00      	cmp	r3, #0
 800db64:	d04a      	beq.n	800dbfc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800db66:	4b55      	ldr	r3, [pc, #340]	; (800dcbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800db68:	685b      	ldr	r3, [r3, #4]
 800db6a:	099b      	lsrs	r3, r3, #6
 800db6c:	f04f 0400 	mov.w	r4, #0
 800db70:	f240 11ff 	movw	r1, #511	; 0x1ff
 800db74:	f04f 0200 	mov.w	r2, #0
 800db78:	ea03 0501 	and.w	r5, r3, r1
 800db7c:	ea04 0602 	and.w	r6, r4, r2
 800db80:	4629      	mov	r1, r5
 800db82:	4632      	mov	r2, r6
 800db84:	f04f 0300 	mov.w	r3, #0
 800db88:	f04f 0400 	mov.w	r4, #0
 800db8c:	0154      	lsls	r4, r2, #5
 800db8e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800db92:	014b      	lsls	r3, r1, #5
 800db94:	4619      	mov	r1, r3
 800db96:	4622      	mov	r2, r4
 800db98:	1b49      	subs	r1, r1, r5
 800db9a:	eb62 0206 	sbc.w	r2, r2, r6
 800db9e:	f04f 0300 	mov.w	r3, #0
 800dba2:	f04f 0400 	mov.w	r4, #0
 800dba6:	0194      	lsls	r4, r2, #6
 800dba8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800dbac:	018b      	lsls	r3, r1, #6
 800dbae:	1a5b      	subs	r3, r3, r1
 800dbb0:	eb64 0402 	sbc.w	r4, r4, r2
 800dbb4:	f04f 0100 	mov.w	r1, #0
 800dbb8:	f04f 0200 	mov.w	r2, #0
 800dbbc:	00e2      	lsls	r2, r4, #3
 800dbbe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800dbc2:	00d9      	lsls	r1, r3, #3
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	4614      	mov	r4, r2
 800dbc8:	195b      	adds	r3, r3, r5
 800dbca:	eb44 0406 	adc.w	r4, r4, r6
 800dbce:	f04f 0100 	mov.w	r1, #0
 800dbd2:	f04f 0200 	mov.w	r2, #0
 800dbd6:	0262      	lsls	r2, r4, #9
 800dbd8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800dbdc:	0259      	lsls	r1, r3, #9
 800dbde:	460b      	mov	r3, r1
 800dbe0:	4614      	mov	r4, r2
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	4621      	mov	r1, r4
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f04f 0400 	mov.w	r4, #0
 800dbec:	461a      	mov	r2, r3
 800dbee:	4623      	mov	r3, r4
 800dbf0:	f7f3 f84a 	bl	8000c88 <__aeabi_uldivmod>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	460c      	mov	r4, r1
 800dbf8:	60fb      	str	r3, [r7, #12]
 800dbfa:	e049      	b.n	800dc90 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dbfc:	4b2f      	ldr	r3, [pc, #188]	; (800dcbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dbfe:	685b      	ldr	r3, [r3, #4]
 800dc00:	099b      	lsrs	r3, r3, #6
 800dc02:	f04f 0400 	mov.w	r4, #0
 800dc06:	f240 11ff 	movw	r1, #511	; 0x1ff
 800dc0a:	f04f 0200 	mov.w	r2, #0
 800dc0e:	ea03 0501 	and.w	r5, r3, r1
 800dc12:	ea04 0602 	and.w	r6, r4, r2
 800dc16:	4629      	mov	r1, r5
 800dc18:	4632      	mov	r2, r6
 800dc1a:	f04f 0300 	mov.w	r3, #0
 800dc1e:	f04f 0400 	mov.w	r4, #0
 800dc22:	0154      	lsls	r4, r2, #5
 800dc24:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800dc28:	014b      	lsls	r3, r1, #5
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	4622      	mov	r2, r4
 800dc2e:	1b49      	subs	r1, r1, r5
 800dc30:	eb62 0206 	sbc.w	r2, r2, r6
 800dc34:	f04f 0300 	mov.w	r3, #0
 800dc38:	f04f 0400 	mov.w	r4, #0
 800dc3c:	0194      	lsls	r4, r2, #6
 800dc3e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800dc42:	018b      	lsls	r3, r1, #6
 800dc44:	1a5b      	subs	r3, r3, r1
 800dc46:	eb64 0402 	sbc.w	r4, r4, r2
 800dc4a:	f04f 0100 	mov.w	r1, #0
 800dc4e:	f04f 0200 	mov.w	r2, #0
 800dc52:	00e2      	lsls	r2, r4, #3
 800dc54:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800dc58:	00d9      	lsls	r1, r3, #3
 800dc5a:	460b      	mov	r3, r1
 800dc5c:	4614      	mov	r4, r2
 800dc5e:	195b      	adds	r3, r3, r5
 800dc60:	eb44 0406 	adc.w	r4, r4, r6
 800dc64:	f04f 0100 	mov.w	r1, #0
 800dc68:	f04f 0200 	mov.w	r2, #0
 800dc6c:	02a2      	lsls	r2, r4, #10
 800dc6e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800dc72:	0299      	lsls	r1, r3, #10
 800dc74:	460b      	mov	r3, r1
 800dc76:	4614      	mov	r4, r2
 800dc78:	4618      	mov	r0, r3
 800dc7a:	4621      	mov	r1, r4
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f04f 0400 	mov.w	r4, #0
 800dc82:	461a      	mov	r2, r3
 800dc84:	4623      	mov	r3, r4
 800dc86:	f7f2 ffff 	bl	8000c88 <__aeabi_uldivmod>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	460c      	mov	r4, r1
 800dc8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800dc90:	4b0a      	ldr	r3, [pc, #40]	; (800dcbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dc92:	685b      	ldr	r3, [r3, #4]
 800dc94:	0c1b      	lsrs	r3, r3, #16
 800dc96:	f003 0303 	and.w	r3, r3, #3
 800dc9a:	3301      	adds	r3, #1
 800dc9c:	005b      	lsls	r3, r3, #1
 800dc9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800dca0:	68fa      	ldr	r2, [r7, #12]
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dca8:	60bb      	str	r3, [r7, #8]
      break;
 800dcaa:	e002      	b.n	800dcb2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800dcac:	4b04      	ldr	r3, [pc, #16]	; (800dcc0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800dcae:	60bb      	str	r3, [r7, #8]
      break;
 800dcb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800dcb2:	68bb      	ldr	r3, [r7, #8]
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	3714      	adds	r7, #20
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcbc:	40023800 	.word	0x40023800
 800dcc0:	00f42400 	.word	0x00f42400
 800dcc4:	007a1200 	.word	0x007a1200

0800dcc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dcc8:	b480      	push	{r7}
 800dcca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800dccc:	4b03      	ldr	r3, [pc, #12]	; (800dcdc <HAL_RCC_GetHCLKFreq+0x14>)
 800dcce:	681b      	ldr	r3, [r3, #0]
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd8:	4770      	bx	lr
 800dcda:	bf00      	nop
 800dcdc:	20000828 	.word	0x20000828

0800dce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800dce4:	f7ff fff0 	bl	800dcc8 <HAL_RCC_GetHCLKFreq>
 800dce8:	4601      	mov	r1, r0
 800dcea:	4b05      	ldr	r3, [pc, #20]	; (800dd00 <HAL_RCC_GetPCLK1Freq+0x20>)
 800dcec:	689b      	ldr	r3, [r3, #8]
 800dcee:	0a9b      	lsrs	r3, r3, #10
 800dcf0:	f003 0307 	and.w	r3, r3, #7
 800dcf4:	4a03      	ldr	r2, [pc, #12]	; (800dd04 <HAL_RCC_GetPCLK1Freq+0x24>)
 800dcf6:	5cd3      	ldrb	r3, [r2, r3]
 800dcf8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	bd80      	pop	{r7, pc}
 800dd00:	40023800 	.word	0x40023800
 800dd04:	0801b298 	.word	0x0801b298

0800dd08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800dd0c:	f7ff ffdc 	bl	800dcc8 <HAL_RCC_GetHCLKFreq>
 800dd10:	4601      	mov	r1, r0
 800dd12:	4b05      	ldr	r3, [pc, #20]	; (800dd28 <HAL_RCC_GetPCLK2Freq+0x20>)
 800dd14:	689b      	ldr	r3, [r3, #8]
 800dd16:	0b5b      	lsrs	r3, r3, #13
 800dd18:	f003 0307 	and.w	r3, r3, #7
 800dd1c:	4a03      	ldr	r2, [pc, #12]	; (800dd2c <HAL_RCC_GetPCLK2Freq+0x24>)
 800dd1e:	5cd3      	ldrb	r3, [r2, r3]
 800dd20:	fa21 f303 	lsr.w	r3, r1, r3
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	bd80      	pop	{r7, pc}
 800dd28:	40023800 	.word	0x40023800
 800dd2c:	0801b298 	.word	0x0801b298

0800dd30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800dd30:	b480      	push	{r7}
 800dd32:	b083      	sub	sp, #12
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
 800dd38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	220f      	movs	r2, #15
 800dd3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800dd40:	4b12      	ldr	r3, [pc, #72]	; (800dd8c <HAL_RCC_GetClockConfig+0x5c>)
 800dd42:	689b      	ldr	r3, [r3, #8]
 800dd44:	f003 0203 	and.w	r2, r3, #3
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800dd4c:	4b0f      	ldr	r3, [pc, #60]	; (800dd8c <HAL_RCC_GetClockConfig+0x5c>)
 800dd4e:	689b      	ldr	r3, [r3, #8]
 800dd50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800dd58:	4b0c      	ldr	r3, [pc, #48]	; (800dd8c <HAL_RCC_GetClockConfig+0x5c>)
 800dd5a:	689b      	ldr	r3, [r3, #8]
 800dd5c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800dd64:	4b09      	ldr	r3, [pc, #36]	; (800dd8c <HAL_RCC_GetClockConfig+0x5c>)
 800dd66:	689b      	ldr	r3, [r3, #8]
 800dd68:	08db      	lsrs	r3, r3, #3
 800dd6a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800dd72:	4b07      	ldr	r3, [pc, #28]	; (800dd90 <HAL_RCC_GetClockConfig+0x60>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	f003 020f 	and.w	r2, r3, #15
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	601a      	str	r2, [r3, #0]
}
 800dd7e:	bf00      	nop
 800dd80:	370c      	adds	r7, #12
 800dd82:	46bd      	mov	sp, r7
 800dd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd88:	4770      	bx	lr
 800dd8a:	bf00      	nop
 800dd8c:	40023800 	.word	0x40023800
 800dd90:	40023c00 	.word	0x40023c00

0800dd94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b082      	sub	sp, #8
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d101      	bne.n	800dda6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dda2:	2301      	movs	r3, #1
 800dda4:	e01d      	b.n	800dde2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ddac:	b2db      	uxtb	r3, r3
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d106      	bne.n	800ddc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f7fd f9aa 	bl	800b114 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2202      	movs	r2, #2
 800ddc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681a      	ldr	r2, [r3, #0]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	3304      	adds	r3, #4
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	4610      	mov	r0, r2
 800ddd4:	f000 fa14 	bl	800e200 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2201      	movs	r2, #1
 800dddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dde0:	2300      	movs	r3, #0
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	3708      	adds	r7, #8
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}

0800ddea <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ddea:	b480      	push	{r7}
 800ddec:	b085      	sub	sp, #20
 800ddee:	af00      	add	r7, sp, #0
 800ddf0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	68da      	ldr	r2, [r3, #12]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	f042 0201 	orr.w	r2, r2, #1
 800de00:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	689b      	ldr	r3, [r3, #8]
 800de08:	f003 0307 	and.w	r3, r3, #7
 800de0c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2b06      	cmp	r3, #6
 800de12:	d007      	beq.n	800de24 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	681a      	ldr	r2, [r3, #0]
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f042 0201 	orr.w	r2, r2, #1
 800de22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800de24:	2300      	movs	r3, #0
}
 800de26:	4618      	mov	r0, r3
 800de28:	3714      	adds	r7, #20
 800de2a:	46bd      	mov	sp, r7
 800de2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de30:	4770      	bx	lr

0800de32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800de32:	b580      	push	{r7, lr}
 800de34:	b082      	sub	sp, #8
 800de36:	af00      	add	r7, sp, #0
 800de38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	691b      	ldr	r3, [r3, #16]
 800de40:	f003 0302 	and.w	r3, r3, #2
 800de44:	2b02      	cmp	r3, #2
 800de46:	d122      	bne.n	800de8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	68db      	ldr	r3, [r3, #12]
 800de4e:	f003 0302 	and.w	r3, r3, #2
 800de52:	2b02      	cmp	r3, #2
 800de54:	d11b      	bne.n	800de8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	f06f 0202 	mvn.w	r2, #2
 800de5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2201      	movs	r2, #1
 800de64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	699b      	ldr	r3, [r3, #24]
 800de6c:	f003 0303 	and.w	r3, r3, #3
 800de70:	2b00      	cmp	r3, #0
 800de72:	d003      	beq.n	800de7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f000 f9a5 	bl	800e1c4 <HAL_TIM_IC_CaptureCallback>
 800de7a:	e005      	b.n	800de88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f000 f997 	bl	800e1b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f000 f9a8 	bl	800e1d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2200      	movs	r2, #0
 800de8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	691b      	ldr	r3, [r3, #16]
 800de94:	f003 0304 	and.w	r3, r3, #4
 800de98:	2b04      	cmp	r3, #4
 800de9a:	d122      	bne.n	800dee2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	68db      	ldr	r3, [r3, #12]
 800dea2:	f003 0304 	and.w	r3, r3, #4
 800dea6:	2b04      	cmp	r3, #4
 800dea8:	d11b      	bne.n	800dee2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f06f 0204 	mvn.w	r2, #4
 800deb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2202      	movs	r2, #2
 800deb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	699b      	ldr	r3, [r3, #24]
 800dec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d003      	beq.n	800ded0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f000 f97b 	bl	800e1c4 <HAL_TIM_IC_CaptureCallback>
 800dece:	e005      	b.n	800dedc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f000 f96d 	bl	800e1b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f000 f97e 	bl	800e1d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2200      	movs	r2, #0
 800dee0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	691b      	ldr	r3, [r3, #16]
 800dee8:	f003 0308 	and.w	r3, r3, #8
 800deec:	2b08      	cmp	r3, #8
 800deee:	d122      	bne.n	800df36 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	68db      	ldr	r3, [r3, #12]
 800def6:	f003 0308 	and.w	r3, r3, #8
 800defa:	2b08      	cmp	r3, #8
 800defc:	d11b      	bne.n	800df36 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f06f 0208 	mvn.w	r2, #8
 800df06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2204      	movs	r2, #4
 800df0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	69db      	ldr	r3, [r3, #28]
 800df14:	f003 0303 	and.w	r3, r3, #3
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d003      	beq.n	800df24 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f000 f951 	bl	800e1c4 <HAL_TIM_IC_CaptureCallback>
 800df22:	e005      	b.n	800df30 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f000 f943 	bl	800e1b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f000 f954 	bl	800e1d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2200      	movs	r2, #0
 800df34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	691b      	ldr	r3, [r3, #16]
 800df3c:	f003 0310 	and.w	r3, r3, #16
 800df40:	2b10      	cmp	r3, #16
 800df42:	d122      	bne.n	800df8a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	68db      	ldr	r3, [r3, #12]
 800df4a:	f003 0310 	and.w	r3, r3, #16
 800df4e:	2b10      	cmp	r3, #16
 800df50:	d11b      	bne.n	800df8a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	f06f 0210 	mvn.w	r2, #16
 800df5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2208      	movs	r2, #8
 800df60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	69db      	ldr	r3, [r3, #28]
 800df68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d003      	beq.n	800df78 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f000 f927 	bl	800e1c4 <HAL_TIM_IC_CaptureCallback>
 800df76:	e005      	b.n	800df84 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f000 f919 	bl	800e1b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f000 f92a 	bl	800e1d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2200      	movs	r2, #0
 800df88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	691b      	ldr	r3, [r3, #16]
 800df90:	f003 0301 	and.w	r3, r3, #1
 800df94:	2b01      	cmp	r3, #1
 800df96:	d10e      	bne.n	800dfb6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	68db      	ldr	r3, [r3, #12]
 800df9e:	f003 0301 	and.w	r3, r3, #1
 800dfa2:	2b01      	cmp	r3, #1
 800dfa4:	d107      	bne.n	800dfb6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	f06f 0201 	mvn.w	r2, #1
 800dfae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f7f5 ffa9 	bl	8003f08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	691b      	ldr	r3, [r3, #16]
 800dfbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfc0:	2b80      	cmp	r3, #128	; 0x80
 800dfc2:	d10e      	bne.n	800dfe2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	68db      	ldr	r3, [r3, #12]
 800dfca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfce:	2b80      	cmp	r3, #128	; 0x80
 800dfd0:	d107      	bne.n	800dfe2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dfda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f000 facf 	bl	800e580 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	691b      	ldr	r3, [r3, #16]
 800dfe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfec:	2b40      	cmp	r3, #64	; 0x40
 800dfee:	d10e      	bne.n	800e00e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	68db      	ldr	r3, [r3, #12]
 800dff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dffa:	2b40      	cmp	r3, #64	; 0x40
 800dffc:	d107      	bne.n	800e00e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f000 f8ef 	bl	800e1ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	691b      	ldr	r3, [r3, #16]
 800e014:	f003 0320 	and.w	r3, r3, #32
 800e018:	2b20      	cmp	r3, #32
 800e01a:	d10e      	bne.n	800e03a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	68db      	ldr	r3, [r3, #12]
 800e022:	f003 0320 	and.w	r3, r3, #32
 800e026:	2b20      	cmp	r3, #32
 800e028:	d107      	bne.n	800e03a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	f06f 0220 	mvn.w	r2, #32
 800e032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f000 fa99 	bl	800e56c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e03a:	bf00      	nop
 800e03c:	3708      	adds	r7, #8
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}

0800e042 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e042:	b580      	push	{r7, lr}
 800e044:	b084      	sub	sp, #16
 800e046:	af00      	add	r7, sp, #0
 800e048:	6078      	str	r0, [r7, #4]
 800e04a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e052:	2b01      	cmp	r3, #1
 800e054:	d101      	bne.n	800e05a <HAL_TIM_ConfigClockSource+0x18>
 800e056:	2302      	movs	r3, #2
 800e058:	e0a6      	b.n	800e1a8 <HAL_TIM_ConfigClockSource+0x166>
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2201      	movs	r2, #1
 800e05e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2202      	movs	r2, #2
 800e066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	689b      	ldr	r3, [r3, #8]
 800e070:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e078:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e080:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	68fa      	ldr	r2, [r7, #12]
 800e088:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	2b40      	cmp	r3, #64	; 0x40
 800e090:	d067      	beq.n	800e162 <HAL_TIM_ConfigClockSource+0x120>
 800e092:	2b40      	cmp	r3, #64	; 0x40
 800e094:	d80b      	bhi.n	800e0ae <HAL_TIM_ConfigClockSource+0x6c>
 800e096:	2b10      	cmp	r3, #16
 800e098:	d073      	beq.n	800e182 <HAL_TIM_ConfigClockSource+0x140>
 800e09a:	2b10      	cmp	r3, #16
 800e09c:	d802      	bhi.n	800e0a4 <HAL_TIM_ConfigClockSource+0x62>
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d06f      	beq.n	800e182 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e0a2:	e078      	b.n	800e196 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e0a4:	2b20      	cmp	r3, #32
 800e0a6:	d06c      	beq.n	800e182 <HAL_TIM_ConfigClockSource+0x140>
 800e0a8:	2b30      	cmp	r3, #48	; 0x30
 800e0aa:	d06a      	beq.n	800e182 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800e0ac:	e073      	b.n	800e196 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e0ae:	2b70      	cmp	r3, #112	; 0x70
 800e0b0:	d00d      	beq.n	800e0ce <HAL_TIM_ConfigClockSource+0x8c>
 800e0b2:	2b70      	cmp	r3, #112	; 0x70
 800e0b4:	d804      	bhi.n	800e0c0 <HAL_TIM_ConfigClockSource+0x7e>
 800e0b6:	2b50      	cmp	r3, #80	; 0x50
 800e0b8:	d033      	beq.n	800e122 <HAL_TIM_ConfigClockSource+0xe0>
 800e0ba:	2b60      	cmp	r3, #96	; 0x60
 800e0bc:	d041      	beq.n	800e142 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800e0be:	e06a      	b.n	800e196 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e0c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e0c4:	d066      	beq.n	800e194 <HAL_TIM_ConfigClockSource+0x152>
 800e0c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e0ca:	d017      	beq.n	800e0fc <HAL_TIM_ConfigClockSource+0xba>
      break;
 800e0cc:	e063      	b.n	800e196 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6818      	ldr	r0, [r3, #0]
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	6899      	ldr	r1, [r3, #8]
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	685a      	ldr	r2, [r3, #4]
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	68db      	ldr	r3, [r3, #12]
 800e0de:	f000 f9a9 	bl	800e434 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	689b      	ldr	r3, [r3, #8]
 800e0e8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e0f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	68fa      	ldr	r2, [r7, #12]
 800e0f8:	609a      	str	r2, [r3, #8]
      break;
 800e0fa:	e04c      	b.n	800e196 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6818      	ldr	r0, [r3, #0]
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	6899      	ldr	r1, [r3, #8]
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	685a      	ldr	r2, [r3, #4]
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	68db      	ldr	r3, [r3, #12]
 800e10c:	f000 f992 	bl	800e434 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	689a      	ldr	r2, [r3, #8]
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e11e:	609a      	str	r2, [r3, #8]
      break;
 800e120:	e039      	b.n	800e196 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6818      	ldr	r0, [r3, #0]
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	6859      	ldr	r1, [r3, #4]
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	68db      	ldr	r3, [r3, #12]
 800e12e:	461a      	mov	r2, r3
 800e130:	f000 f906 	bl	800e340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	2150      	movs	r1, #80	; 0x50
 800e13a:	4618      	mov	r0, r3
 800e13c:	f000 f95f 	bl	800e3fe <TIM_ITRx_SetConfig>
      break;
 800e140:	e029      	b.n	800e196 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6818      	ldr	r0, [r3, #0]
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	6859      	ldr	r1, [r3, #4]
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	68db      	ldr	r3, [r3, #12]
 800e14e:	461a      	mov	r2, r3
 800e150:	f000 f925 	bl	800e39e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	2160      	movs	r1, #96	; 0x60
 800e15a:	4618      	mov	r0, r3
 800e15c:	f000 f94f 	bl	800e3fe <TIM_ITRx_SetConfig>
      break;
 800e160:	e019      	b.n	800e196 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6818      	ldr	r0, [r3, #0]
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	6859      	ldr	r1, [r3, #4]
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	68db      	ldr	r3, [r3, #12]
 800e16e:	461a      	mov	r2, r3
 800e170:	f000 f8e6 	bl	800e340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	2140      	movs	r1, #64	; 0x40
 800e17a:	4618      	mov	r0, r3
 800e17c:	f000 f93f 	bl	800e3fe <TIM_ITRx_SetConfig>
      break;
 800e180:	e009      	b.n	800e196 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681a      	ldr	r2, [r3, #0]
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	4619      	mov	r1, r3
 800e18c:	4610      	mov	r0, r2
 800e18e:	f000 f936 	bl	800e3fe <TIM_ITRx_SetConfig>
      break;
 800e192:	e000      	b.n	800e196 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800e194:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2201      	movs	r2, #1
 800e19a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e1a6:	2300      	movs	r3, #0
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3710      	adds	r7, #16
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}

0800e1b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e1b0:	b480      	push	{r7}
 800e1b2:	b083      	sub	sp, #12
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e1b8:	bf00      	nop
 800e1ba:	370c      	adds	r7, #12
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c2:	4770      	bx	lr

0800e1c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b083      	sub	sp, #12
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e1cc:	bf00      	nop
 800e1ce:	370c      	adds	r7, #12
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d6:	4770      	bx	lr

0800e1d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e1d8:	b480      	push	{r7}
 800e1da:	b083      	sub	sp, #12
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e1e0:	bf00      	nop
 800e1e2:	370c      	adds	r7, #12
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr

0800e1ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b083      	sub	sp, #12
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e1f4:	bf00      	nop
 800e1f6:	370c      	adds	r7, #12
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fe:	4770      	bx	lr

0800e200 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e200:	b480      	push	{r7}
 800e202:	b085      	sub	sp, #20
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
 800e208:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	4a40      	ldr	r2, [pc, #256]	; (800e314 <TIM_Base_SetConfig+0x114>)
 800e214:	4293      	cmp	r3, r2
 800e216:	d013      	beq.n	800e240 <TIM_Base_SetConfig+0x40>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e21e:	d00f      	beq.n	800e240 <TIM_Base_SetConfig+0x40>
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	4a3d      	ldr	r2, [pc, #244]	; (800e318 <TIM_Base_SetConfig+0x118>)
 800e224:	4293      	cmp	r3, r2
 800e226:	d00b      	beq.n	800e240 <TIM_Base_SetConfig+0x40>
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	4a3c      	ldr	r2, [pc, #240]	; (800e31c <TIM_Base_SetConfig+0x11c>)
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d007      	beq.n	800e240 <TIM_Base_SetConfig+0x40>
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	4a3b      	ldr	r2, [pc, #236]	; (800e320 <TIM_Base_SetConfig+0x120>)
 800e234:	4293      	cmp	r3, r2
 800e236:	d003      	beq.n	800e240 <TIM_Base_SetConfig+0x40>
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	4a3a      	ldr	r2, [pc, #232]	; (800e324 <TIM_Base_SetConfig+0x124>)
 800e23c:	4293      	cmp	r3, r2
 800e23e:	d108      	bne.n	800e252 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	685b      	ldr	r3, [r3, #4]
 800e24c:	68fa      	ldr	r2, [r7, #12]
 800e24e:	4313      	orrs	r3, r2
 800e250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	4a2f      	ldr	r2, [pc, #188]	; (800e314 <TIM_Base_SetConfig+0x114>)
 800e256:	4293      	cmp	r3, r2
 800e258:	d02b      	beq.n	800e2b2 <TIM_Base_SetConfig+0xb2>
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e260:	d027      	beq.n	800e2b2 <TIM_Base_SetConfig+0xb2>
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	4a2c      	ldr	r2, [pc, #176]	; (800e318 <TIM_Base_SetConfig+0x118>)
 800e266:	4293      	cmp	r3, r2
 800e268:	d023      	beq.n	800e2b2 <TIM_Base_SetConfig+0xb2>
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	4a2b      	ldr	r2, [pc, #172]	; (800e31c <TIM_Base_SetConfig+0x11c>)
 800e26e:	4293      	cmp	r3, r2
 800e270:	d01f      	beq.n	800e2b2 <TIM_Base_SetConfig+0xb2>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	4a2a      	ldr	r2, [pc, #168]	; (800e320 <TIM_Base_SetConfig+0x120>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d01b      	beq.n	800e2b2 <TIM_Base_SetConfig+0xb2>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	4a29      	ldr	r2, [pc, #164]	; (800e324 <TIM_Base_SetConfig+0x124>)
 800e27e:	4293      	cmp	r3, r2
 800e280:	d017      	beq.n	800e2b2 <TIM_Base_SetConfig+0xb2>
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	4a28      	ldr	r2, [pc, #160]	; (800e328 <TIM_Base_SetConfig+0x128>)
 800e286:	4293      	cmp	r3, r2
 800e288:	d013      	beq.n	800e2b2 <TIM_Base_SetConfig+0xb2>
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	4a27      	ldr	r2, [pc, #156]	; (800e32c <TIM_Base_SetConfig+0x12c>)
 800e28e:	4293      	cmp	r3, r2
 800e290:	d00f      	beq.n	800e2b2 <TIM_Base_SetConfig+0xb2>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	4a26      	ldr	r2, [pc, #152]	; (800e330 <TIM_Base_SetConfig+0x130>)
 800e296:	4293      	cmp	r3, r2
 800e298:	d00b      	beq.n	800e2b2 <TIM_Base_SetConfig+0xb2>
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	4a25      	ldr	r2, [pc, #148]	; (800e334 <TIM_Base_SetConfig+0x134>)
 800e29e:	4293      	cmp	r3, r2
 800e2a0:	d007      	beq.n	800e2b2 <TIM_Base_SetConfig+0xb2>
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	4a24      	ldr	r2, [pc, #144]	; (800e338 <TIM_Base_SetConfig+0x138>)
 800e2a6:	4293      	cmp	r3, r2
 800e2a8:	d003      	beq.n	800e2b2 <TIM_Base_SetConfig+0xb2>
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	4a23      	ldr	r2, [pc, #140]	; (800e33c <TIM_Base_SetConfig+0x13c>)
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	d108      	bne.n	800e2c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e2b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	68db      	ldr	r3, [r3, #12]
 800e2be:	68fa      	ldr	r2, [r7, #12]
 800e2c0:	4313      	orrs	r3, r2
 800e2c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	695b      	ldr	r3, [r3, #20]
 800e2ce:	4313      	orrs	r3, r2
 800e2d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	68fa      	ldr	r2, [r7, #12]
 800e2d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	689a      	ldr	r2, [r3, #8]
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	681a      	ldr	r2, [r3, #0]
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	4a0a      	ldr	r2, [pc, #40]	; (800e314 <TIM_Base_SetConfig+0x114>)
 800e2ec:	4293      	cmp	r3, r2
 800e2ee:	d003      	beq.n	800e2f8 <TIM_Base_SetConfig+0xf8>
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	4a0c      	ldr	r2, [pc, #48]	; (800e324 <TIM_Base_SetConfig+0x124>)
 800e2f4:	4293      	cmp	r3, r2
 800e2f6:	d103      	bne.n	800e300 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	691a      	ldr	r2, [r3, #16]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2201      	movs	r2, #1
 800e304:	615a      	str	r2, [r3, #20]
}
 800e306:	bf00      	nop
 800e308:	3714      	adds	r7, #20
 800e30a:	46bd      	mov	sp, r7
 800e30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e310:	4770      	bx	lr
 800e312:	bf00      	nop
 800e314:	40010000 	.word	0x40010000
 800e318:	40000400 	.word	0x40000400
 800e31c:	40000800 	.word	0x40000800
 800e320:	40000c00 	.word	0x40000c00
 800e324:	40010400 	.word	0x40010400
 800e328:	40014000 	.word	0x40014000
 800e32c:	40014400 	.word	0x40014400
 800e330:	40014800 	.word	0x40014800
 800e334:	40001800 	.word	0x40001800
 800e338:	40001c00 	.word	0x40001c00
 800e33c:	40002000 	.word	0x40002000

0800e340 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e340:	b480      	push	{r7}
 800e342:	b087      	sub	sp, #28
 800e344:	af00      	add	r7, sp, #0
 800e346:	60f8      	str	r0, [r7, #12]
 800e348:	60b9      	str	r1, [r7, #8]
 800e34a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	6a1b      	ldr	r3, [r3, #32]
 800e350:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	6a1b      	ldr	r3, [r3, #32]
 800e356:	f023 0201 	bic.w	r2, r3, #1
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	699b      	ldr	r3, [r3, #24]
 800e362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e36a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	011b      	lsls	r3, r3, #4
 800e370:	693a      	ldr	r2, [r7, #16]
 800e372:	4313      	orrs	r3, r2
 800e374:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e376:	697b      	ldr	r3, [r7, #20]
 800e378:	f023 030a 	bic.w	r3, r3, #10
 800e37c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e37e:	697a      	ldr	r2, [r7, #20]
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	4313      	orrs	r3, r2
 800e384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	693a      	ldr	r2, [r7, #16]
 800e38a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	697a      	ldr	r2, [r7, #20]
 800e390:	621a      	str	r2, [r3, #32]
}
 800e392:	bf00      	nop
 800e394:	371c      	adds	r7, #28
 800e396:	46bd      	mov	sp, r7
 800e398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39c:	4770      	bx	lr

0800e39e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e39e:	b480      	push	{r7}
 800e3a0:	b087      	sub	sp, #28
 800e3a2:	af00      	add	r7, sp, #0
 800e3a4:	60f8      	str	r0, [r7, #12]
 800e3a6:	60b9      	str	r1, [r7, #8]
 800e3a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	6a1b      	ldr	r3, [r3, #32]
 800e3ae:	f023 0210 	bic.w	r2, r3, #16
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	699b      	ldr	r3, [r3, #24]
 800e3ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	6a1b      	ldr	r3, [r3, #32]
 800e3c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e3c2:	697b      	ldr	r3, [r7, #20]
 800e3c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e3c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	031b      	lsls	r3, r3, #12
 800e3ce:	697a      	ldr	r2, [r7, #20]
 800e3d0:	4313      	orrs	r3, r2
 800e3d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e3da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	011b      	lsls	r3, r3, #4
 800e3e0:	693a      	ldr	r2, [r7, #16]
 800e3e2:	4313      	orrs	r3, r2
 800e3e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	697a      	ldr	r2, [r7, #20]
 800e3ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	693a      	ldr	r2, [r7, #16]
 800e3f0:	621a      	str	r2, [r3, #32]
}
 800e3f2:	bf00      	nop
 800e3f4:	371c      	adds	r7, #28
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fc:	4770      	bx	lr

0800e3fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e3fe:	b480      	push	{r7}
 800e400:	b085      	sub	sp, #20
 800e402:	af00      	add	r7, sp, #0
 800e404:	6078      	str	r0, [r7, #4]
 800e406:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	689b      	ldr	r3, [r3, #8]
 800e40c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e414:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e416:	683a      	ldr	r2, [r7, #0]
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	4313      	orrs	r3, r2
 800e41c:	f043 0307 	orr.w	r3, r3, #7
 800e420:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	68fa      	ldr	r2, [r7, #12]
 800e426:	609a      	str	r2, [r3, #8]
}
 800e428:	bf00      	nop
 800e42a:	3714      	adds	r7, #20
 800e42c:	46bd      	mov	sp, r7
 800e42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e432:	4770      	bx	lr

0800e434 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e434:	b480      	push	{r7}
 800e436:	b087      	sub	sp, #28
 800e438:	af00      	add	r7, sp, #0
 800e43a:	60f8      	str	r0, [r7, #12]
 800e43c:	60b9      	str	r1, [r7, #8]
 800e43e:	607a      	str	r2, [r7, #4]
 800e440:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	689b      	ldr	r3, [r3, #8]
 800e446:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e44e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	021a      	lsls	r2, r3, #8
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	431a      	orrs	r2, r3
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	4313      	orrs	r3, r2
 800e45c:	697a      	ldr	r2, [r7, #20]
 800e45e:	4313      	orrs	r3, r2
 800e460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	697a      	ldr	r2, [r7, #20]
 800e466:	609a      	str	r2, [r3, #8]
}
 800e468:	bf00      	nop
 800e46a:	371c      	adds	r7, #28
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr

0800e474 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e474:	b480      	push	{r7}
 800e476:	b085      	sub	sp, #20
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
 800e47c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e484:	2b01      	cmp	r3, #1
 800e486:	d101      	bne.n	800e48c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e488:	2302      	movs	r3, #2
 800e48a:	e05a      	b.n	800e542 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2201      	movs	r2, #1
 800e490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2202      	movs	r2, #2
 800e498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	685b      	ldr	r3, [r3, #4]
 800e4a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	689b      	ldr	r3, [r3, #8]
 800e4aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e4b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	68fa      	ldr	r2, [r7, #12]
 800e4ba:	4313      	orrs	r3, r2
 800e4bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	68fa      	ldr	r2, [r7, #12]
 800e4c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	4a21      	ldr	r2, [pc, #132]	; (800e550 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	d022      	beq.n	800e516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4d8:	d01d      	beq.n	800e516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	4a1d      	ldr	r2, [pc, #116]	; (800e554 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e4e0:	4293      	cmp	r3, r2
 800e4e2:	d018      	beq.n	800e516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	4a1b      	ldr	r2, [pc, #108]	; (800e558 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	d013      	beq.n	800e516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	4a1a      	ldr	r2, [pc, #104]	; (800e55c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	d00e      	beq.n	800e516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	4a18      	ldr	r2, [pc, #96]	; (800e560 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d009      	beq.n	800e516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	4a17      	ldr	r2, [pc, #92]	; (800e564 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e508:	4293      	cmp	r3, r2
 800e50a:	d004      	beq.n	800e516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	4a15      	ldr	r2, [pc, #84]	; (800e568 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e512:	4293      	cmp	r3, r2
 800e514:	d10c      	bne.n	800e530 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e51c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	685b      	ldr	r3, [r3, #4]
 800e522:	68ba      	ldr	r2, [r7, #8]
 800e524:	4313      	orrs	r3, r2
 800e526:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	68ba      	ldr	r2, [r7, #8]
 800e52e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2201      	movs	r2, #1
 800e534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2200      	movs	r2, #0
 800e53c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e540:	2300      	movs	r3, #0
}
 800e542:	4618      	mov	r0, r3
 800e544:	3714      	adds	r7, #20
 800e546:	46bd      	mov	sp, r7
 800e548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54c:	4770      	bx	lr
 800e54e:	bf00      	nop
 800e550:	40010000 	.word	0x40010000
 800e554:	40000400 	.word	0x40000400
 800e558:	40000800 	.word	0x40000800
 800e55c:	40000c00 	.word	0x40000c00
 800e560:	40010400 	.word	0x40010400
 800e564:	40014000 	.word	0x40014000
 800e568:	40001800 	.word	0x40001800

0800e56c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e56c:	b480      	push	{r7}
 800e56e:	b083      	sub	sp, #12
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e574:	bf00      	nop
 800e576:	370c      	adds	r7, #12
 800e578:	46bd      	mov	sp, r7
 800e57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57e:	4770      	bx	lr

0800e580 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e580:	b480      	push	{r7}
 800e582:	b083      	sub	sp, #12
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e588:	bf00      	nop
 800e58a:	370c      	adds	r7, #12
 800e58c:	46bd      	mov	sp, r7
 800e58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e592:	4770      	bx	lr

0800e594 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b082      	sub	sp, #8
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d101      	bne.n	800e5a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	e03f      	b.n	800e626 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e5ac:	b2db      	uxtb	r3, r3
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d106      	bne.n	800e5c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f7fc fe10 	bl	800b1e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2224      	movs	r2, #36	; 0x24
 800e5c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	68da      	ldr	r2, [r3, #12]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e5d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f000 fb6b 	bl	800ecb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	691a      	ldr	r2, [r3, #16]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e5ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	695a      	ldr	r2, [r3, #20]
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e5fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	68da      	ldr	r2, [r3, #12]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e60c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2200      	movs	r2, #0
 800e612:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2220      	movs	r2, #32
 800e618:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2220      	movs	r2, #32
 800e620:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800e624:	2300      	movs	r3, #0
}
 800e626:	4618      	mov	r0, r3
 800e628:	3708      	adds	r7, #8
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}
	...

0800e630 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b086      	sub	sp, #24
 800e634:	af00      	add	r7, sp, #0
 800e636:	60f8      	str	r0, [r7, #12]
 800e638:	60b9      	str	r1, [r7, #8]
 800e63a:	4613      	mov	r3, r2
 800e63c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e644:	b2db      	uxtb	r3, r3
 800e646:	2b20      	cmp	r3, #32
 800e648:	d153      	bne.n	800e6f2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d002      	beq.n	800e656 <HAL_UART_Transmit_DMA+0x26>
 800e650:	88fb      	ldrh	r3, [r7, #6]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d101      	bne.n	800e65a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800e656:	2301      	movs	r3, #1
 800e658:	e04c      	b.n	800e6f4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e660:	2b01      	cmp	r3, #1
 800e662:	d101      	bne.n	800e668 <HAL_UART_Transmit_DMA+0x38>
 800e664:	2302      	movs	r3, #2
 800e666:	e045      	b.n	800e6f4 <HAL_UART_Transmit_DMA+0xc4>
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	2201      	movs	r2, #1
 800e66c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800e670:	68ba      	ldr	r2, [r7, #8]
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	88fa      	ldrh	r2, [r7, #6]
 800e67a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	88fa      	ldrh	r2, [r7, #6]
 800e680:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	2200      	movs	r2, #0
 800e686:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	2221      	movs	r2, #33	; 0x21
 800e68c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e694:	4a19      	ldr	r2, [pc, #100]	; (800e6fc <HAL_UART_Transmit_DMA+0xcc>)
 800e696:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e69c:	4a18      	ldr	r2, [pc, #96]	; (800e700 <HAL_UART_Transmit_DMA+0xd0>)
 800e69e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6a4:	4a17      	ldr	r2, [pc, #92]	; (800e704 <HAL_UART_Transmit_DMA+0xd4>)
 800e6a6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800e6b0:	f107 0308 	add.w	r3, r7, #8
 800e6b4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e6ba:	697b      	ldr	r3, [r7, #20]
 800e6bc:	6819      	ldr	r1, [r3, #0]
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	3304      	adds	r3, #4
 800e6c4:	461a      	mov	r2, r3
 800e6c6:	88fb      	ldrh	r3, [r7, #6]
 800e6c8:	f7fd f852 	bl	800b770 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e6d4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	695a      	ldr	r2, [r3, #20]
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e6ec:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	e000      	b.n	800e6f4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800e6f2:	2302      	movs	r3, #2
  }
}
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	3718      	adds	r7, #24
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}
 800e6fc:	0800e945 	.word	0x0800e945
 800e700:	0800e997 	.word	0x0800e997
 800e704:	0800e9b3 	.word	0x0800e9b3

0800e708 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b088      	sub	sp, #32
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	68db      	ldr	r3, [r3, #12]
 800e71e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	695b      	ldr	r3, [r3, #20]
 800e726:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800e728:	2300      	movs	r3, #0
 800e72a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800e72c:	2300      	movs	r3, #0
 800e72e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e730:	69fb      	ldr	r3, [r7, #28]
 800e732:	f003 030f 	and.w	r3, r3, #15
 800e736:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d10d      	bne.n	800e75a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e73e:	69fb      	ldr	r3, [r7, #28]
 800e740:	f003 0320 	and.w	r3, r3, #32
 800e744:	2b00      	cmp	r3, #0
 800e746:	d008      	beq.n	800e75a <HAL_UART_IRQHandler+0x52>
 800e748:	69bb      	ldr	r3, [r7, #24]
 800e74a:	f003 0320 	and.w	r3, r3, #32
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d003      	beq.n	800e75a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f000 fa2d 	bl	800ebb2 <UART_Receive_IT>
      return;
 800e758:	e0d1      	b.n	800e8fe <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	f000 80b0 	beq.w	800e8c2 <HAL_UART_IRQHandler+0x1ba>
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	f003 0301 	and.w	r3, r3, #1
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d105      	bne.n	800e778 <HAL_UART_IRQHandler+0x70>
 800e76c:	69bb      	ldr	r3, [r7, #24]
 800e76e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e772:	2b00      	cmp	r3, #0
 800e774:	f000 80a5 	beq.w	800e8c2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e778:	69fb      	ldr	r3, [r7, #28]
 800e77a:	f003 0301 	and.w	r3, r3, #1
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d00a      	beq.n	800e798 <HAL_UART_IRQHandler+0x90>
 800e782:	69bb      	ldr	r3, [r7, #24]
 800e784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d005      	beq.n	800e798 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e790:	f043 0201 	orr.w	r2, r3, #1
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e798:	69fb      	ldr	r3, [r7, #28]
 800e79a:	f003 0304 	and.w	r3, r3, #4
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d00a      	beq.n	800e7b8 <HAL_UART_IRQHandler+0xb0>
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	f003 0301 	and.w	r3, r3, #1
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d005      	beq.n	800e7b8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7b0:	f043 0202 	orr.w	r2, r3, #2
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e7b8:	69fb      	ldr	r3, [r7, #28]
 800e7ba:	f003 0302 	and.w	r3, r3, #2
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d00a      	beq.n	800e7d8 <HAL_UART_IRQHandler+0xd0>
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	f003 0301 	and.w	r3, r3, #1
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d005      	beq.n	800e7d8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7d0:	f043 0204 	orr.w	r2, r3, #4
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800e7d8:	69fb      	ldr	r3, [r7, #28]
 800e7da:	f003 0308 	and.w	r3, r3, #8
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d00f      	beq.n	800e802 <HAL_UART_IRQHandler+0xfa>
 800e7e2:	69bb      	ldr	r3, [r7, #24]
 800e7e4:	f003 0320 	and.w	r3, r3, #32
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d104      	bne.n	800e7f6 <HAL_UART_IRQHandler+0xee>
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	f003 0301 	and.w	r3, r3, #1
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d005      	beq.n	800e802 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7fa:	f043 0208 	orr.w	r2, r3, #8
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e806:	2b00      	cmp	r3, #0
 800e808:	d078      	beq.n	800e8fc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e80a:	69fb      	ldr	r3, [r7, #28]
 800e80c:	f003 0320 	and.w	r3, r3, #32
 800e810:	2b00      	cmp	r3, #0
 800e812:	d007      	beq.n	800e824 <HAL_UART_IRQHandler+0x11c>
 800e814:	69bb      	ldr	r3, [r7, #24]
 800e816:	f003 0320 	and.w	r3, r3, #32
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d002      	beq.n	800e824 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f000 f9c7 	bl	800ebb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	695b      	ldr	r3, [r3, #20]
 800e82a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e82e:	2b40      	cmp	r3, #64	; 0x40
 800e830:	bf0c      	ite	eq
 800e832:	2301      	moveq	r3, #1
 800e834:	2300      	movne	r3, #0
 800e836:	b2db      	uxtb	r3, r3
 800e838:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e83e:	f003 0308 	and.w	r3, r3, #8
 800e842:	2b00      	cmp	r3, #0
 800e844:	d102      	bne.n	800e84c <HAL_UART_IRQHandler+0x144>
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d031      	beq.n	800e8b0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f000 f910 	bl	800ea72 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	695b      	ldr	r3, [r3, #20]
 800e858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e85c:	2b40      	cmp	r3, #64	; 0x40
 800e85e:	d123      	bne.n	800e8a8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	695a      	ldr	r2, [r3, #20]
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e86e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e874:	2b00      	cmp	r3, #0
 800e876:	d013      	beq.n	800e8a0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e87c:	4a21      	ldr	r2, [pc, #132]	; (800e904 <HAL_UART_IRQHandler+0x1fc>)
 800e87e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e884:	4618      	mov	r0, r3
 800e886:	f7fc ffcb 	bl	800b820 <HAL_DMA_Abort_IT>
 800e88a:	4603      	mov	r3, r0
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d016      	beq.n	800e8be <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e896:	687a      	ldr	r2, [r7, #4]
 800e898:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e89a:	4610      	mov	r0, r2
 800e89c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e89e:	e00e      	b.n	800e8be <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f000 f845 	bl	800e930 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8a6:	e00a      	b.n	800e8be <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f000 f841 	bl	800e930 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8ae:	e006      	b.n	800e8be <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f000 f83d 	bl	800e930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800e8bc:	e01e      	b.n	800e8fc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8be:	bf00      	nop
    return;
 800e8c0:	e01c      	b.n	800e8fc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e8c2:	69fb      	ldr	r3, [r7, #28]
 800e8c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d008      	beq.n	800e8de <HAL_UART_IRQHandler+0x1d6>
 800e8cc:	69bb      	ldr	r3, [r7, #24]
 800e8ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d003      	beq.n	800e8de <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f000 f8fd 	bl	800ead6 <UART_Transmit_IT>
    return;
 800e8dc:	e00f      	b.n	800e8fe <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e8de:	69fb      	ldr	r3, [r7, #28]
 800e8e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d00a      	beq.n	800e8fe <HAL_UART_IRQHandler+0x1f6>
 800e8e8:	69bb      	ldr	r3, [r7, #24]
 800e8ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d005      	beq.n	800e8fe <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f000 f945 	bl	800eb82 <UART_EndTransmit_IT>
    return;
 800e8f8:	bf00      	nop
 800e8fa:	e000      	b.n	800e8fe <HAL_UART_IRQHandler+0x1f6>
    return;
 800e8fc:	bf00      	nop
  }
}
 800e8fe:	3720      	adds	r7, #32
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}
 800e904:	0800eaaf 	.word	0x0800eaaf

0800e908 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e908:	b480      	push	{r7}
 800e90a:	b083      	sub	sp, #12
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800e910:	bf00      	nop
 800e912:	370c      	adds	r7, #12
 800e914:	46bd      	mov	sp, r7
 800e916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91a:	4770      	bx	lr

0800e91c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e91c:	b480      	push	{r7}
 800e91e:	b083      	sub	sp, #12
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800e924:	bf00      	nop
 800e926:	370c      	adds	r7, #12
 800e928:	46bd      	mov	sp, r7
 800e92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92e:	4770      	bx	lr

0800e930 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e930:	b480      	push	{r7}
 800e932:	b083      	sub	sp, #12
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e938:	bf00      	nop
 800e93a:	370c      	adds	r7, #12
 800e93c:	46bd      	mov	sp, r7
 800e93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e942:	4770      	bx	lr

0800e944 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b084      	sub	sp, #16
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e950:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d113      	bne.n	800e988 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	2200      	movs	r2, #0
 800e964:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	695a      	ldr	r2, [r3, #20]
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e974:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	68da      	ldr	r2, [r3, #12]
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e984:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e986:	e002      	b.n	800e98e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800e988:	68f8      	ldr	r0, [r7, #12]
 800e98a:	f7fc fcab 	bl	800b2e4 <HAL_UART_TxCpltCallback>
}
 800e98e:	bf00      	nop
 800e990:	3710      	adds	r7, #16
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}

0800e996 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e996:	b580      	push	{r7, lr}
 800e998:	b084      	sub	sp, #16
 800e99a:	af00      	add	r7, sp, #0
 800e99c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9a2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e9a4:	68f8      	ldr	r0, [r7, #12]
 800e9a6:	f7ff ffaf 	bl	800e908 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e9aa:	bf00      	nop
 800e9ac:	3710      	adds	r7, #16
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}

0800e9b2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e9b2:	b580      	push	{r7, lr}
 800e9b4:	b084      	sub	sp, #16
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9c2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e9c4:	68bb      	ldr	r3, [r7, #8]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	695b      	ldr	r3, [r3, #20]
 800e9ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9ce:	2b80      	cmp	r3, #128	; 0x80
 800e9d0:	bf0c      	ite	eq
 800e9d2:	2301      	moveq	r3, #1
 800e9d4:	2300      	movne	r3, #0
 800e9d6:	b2db      	uxtb	r3, r3
 800e9d8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e9e0:	b2db      	uxtb	r3, r3
 800e9e2:	2b21      	cmp	r3, #33	; 0x21
 800e9e4:	d108      	bne.n	800e9f8 <UART_DMAError+0x46>
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d005      	beq.n	800e9f8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800e9f2:	68b8      	ldr	r0, [r7, #8]
 800e9f4:	f000 f827 	bl	800ea46 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	695b      	ldr	r3, [r3, #20]
 800e9fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea02:	2b40      	cmp	r3, #64	; 0x40
 800ea04:	bf0c      	ite	eq
 800ea06:	2301      	moveq	r3, #1
 800ea08:	2300      	movne	r3, #0
 800ea0a:	b2db      	uxtb	r3, r3
 800ea0c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ea14:	b2db      	uxtb	r3, r3
 800ea16:	2b22      	cmp	r3, #34	; 0x22
 800ea18:	d108      	bne.n	800ea2c <UART_DMAError+0x7a>
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d005      	beq.n	800ea2c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	2200      	movs	r2, #0
 800ea24:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ea26:	68b8      	ldr	r0, [r7, #8]
 800ea28:	f000 f823 	bl	800ea72 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea30:	f043 0210 	orr.w	r2, r3, #16
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ea38:	68b8      	ldr	r0, [r7, #8]
 800ea3a:	f7ff ff79 	bl	800e930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea3e:	bf00      	nop
 800ea40:	3710      	adds	r7, #16
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd80      	pop	{r7, pc}

0800ea46 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ea46:	b480      	push	{r7}
 800ea48:	b083      	sub	sp, #12
 800ea4a:	af00      	add	r7, sp, #0
 800ea4c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	68da      	ldr	r2, [r3, #12]
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ea5c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2220      	movs	r2, #32
 800ea62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800ea66:	bf00      	nop
 800ea68:	370c      	adds	r7, #12
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea70:	4770      	bx	lr

0800ea72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ea72:	b480      	push	{r7}
 800ea74:	b083      	sub	sp, #12
 800ea76:	af00      	add	r7, sp, #0
 800ea78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	68da      	ldr	r2, [r3, #12]
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ea88:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	695a      	ldr	r2, [r3, #20]
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	f022 0201 	bic.w	r2, r2, #1
 800ea98:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2220      	movs	r2, #32
 800ea9e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800eaa2:	bf00      	nop
 800eaa4:	370c      	adds	r7, #12
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaac:	4770      	bx	lr

0800eaae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eaae:	b580      	push	{r7, lr}
 800eab0:	b084      	sub	sp, #16
 800eab2:	af00      	add	r7, sp, #0
 800eab4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	2200      	movs	r2, #0
 800eac0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	2200      	movs	r2, #0
 800eac6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eac8:	68f8      	ldr	r0, [r7, #12]
 800eaca:	f7ff ff31 	bl	800e930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eace:	bf00      	nop
 800ead0:	3710      	adds	r7, #16
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}

0800ead6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ead6:	b480      	push	{r7}
 800ead8:	b085      	sub	sp, #20
 800eada:	af00      	add	r7, sp, #0
 800eadc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800eae4:	b2db      	uxtb	r3, r3
 800eae6:	2b21      	cmp	r3, #33	; 0x21
 800eae8:	d144      	bne.n	800eb74 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	689b      	ldr	r3, [r3, #8]
 800eaee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eaf2:	d11a      	bne.n	800eb2a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	6a1b      	ldr	r3, [r3, #32]
 800eaf8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	881b      	ldrh	r3, [r3, #0]
 800eafe:	461a      	mov	r2, r3
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800eb08:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	691b      	ldr	r3, [r3, #16]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d105      	bne.n	800eb1e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6a1b      	ldr	r3, [r3, #32]
 800eb16:	1c9a      	adds	r2, r3, #2
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	621a      	str	r2, [r3, #32]
 800eb1c:	e00e      	b.n	800eb3c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	6a1b      	ldr	r3, [r3, #32]
 800eb22:	1c5a      	adds	r2, r3, #1
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	621a      	str	r2, [r3, #32]
 800eb28:	e008      	b.n	800eb3c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	6a1b      	ldr	r3, [r3, #32]
 800eb2e:	1c59      	adds	r1, r3, #1
 800eb30:	687a      	ldr	r2, [r7, #4]
 800eb32:	6211      	str	r1, [r2, #32]
 800eb34:	781a      	ldrb	r2, [r3, #0]
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800eb40:	b29b      	uxth	r3, r3
 800eb42:	3b01      	subs	r3, #1
 800eb44:	b29b      	uxth	r3, r3
 800eb46:	687a      	ldr	r2, [r7, #4]
 800eb48:	4619      	mov	r1, r3
 800eb4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d10f      	bne.n	800eb70 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	68da      	ldr	r2, [r3, #12]
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eb5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	68da      	ldr	r2, [r3, #12]
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800eb70:	2300      	movs	r3, #0
 800eb72:	e000      	b.n	800eb76 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800eb74:	2302      	movs	r3, #2
  }
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3714      	adds	r7, #20
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr

0800eb82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eb82:	b580      	push	{r7, lr}
 800eb84:	b082      	sub	sp, #8
 800eb86:	af00      	add	r7, sp, #0
 800eb88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	68da      	ldr	r2, [r3, #12]
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eb98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2220      	movs	r2, #32
 800eb9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f7fc fb9e 	bl	800b2e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800eba8:	2300      	movs	r3, #0
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	3708      	adds	r7, #8
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}

0800ebb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ebb2:	b580      	push	{r7, lr}
 800ebb4:	b084      	sub	sp, #16
 800ebb6:	af00      	add	r7, sp, #0
 800ebb8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ebc0:	b2db      	uxtb	r3, r3
 800ebc2:	2b22      	cmp	r3, #34	; 0x22
 800ebc4:	d171      	bne.n	800ecaa <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	689b      	ldr	r3, [r3, #8]
 800ebca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebce:	d123      	bne.n	800ec18 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebd4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	691b      	ldr	r3, [r3, #16]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d10e      	bne.n	800ebfc <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	685b      	ldr	r3, [r3, #4]
 800ebe4:	b29b      	uxth	r3, r3
 800ebe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebea:	b29a      	uxth	r2, r3
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebf4:	1c9a      	adds	r2, r3, #2
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	629a      	str	r2, [r3, #40]	; 0x28
 800ebfa:	e029      	b.n	800ec50 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	685b      	ldr	r3, [r3, #4]
 800ec02:	b29b      	uxth	r3, r3
 800ec04:	b2db      	uxtb	r3, r3
 800ec06:	b29a      	uxth	r2, r3
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec10:	1c5a      	adds	r2, r3, #1
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	629a      	str	r2, [r3, #40]	; 0x28
 800ec16:	e01b      	b.n	800ec50 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	691b      	ldr	r3, [r3, #16]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d10a      	bne.n	800ec36 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	6858      	ldr	r0, [r3, #4]
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec2a:	1c59      	adds	r1, r3, #1
 800ec2c:	687a      	ldr	r2, [r7, #4]
 800ec2e:	6291      	str	r1, [r2, #40]	; 0x28
 800ec30:	b2c2      	uxtb	r2, r0
 800ec32:	701a      	strb	r2, [r3, #0]
 800ec34:	e00c      	b.n	800ec50 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	685b      	ldr	r3, [r3, #4]
 800ec3c:	b2da      	uxtb	r2, r3
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec42:	1c58      	adds	r0, r3, #1
 800ec44:	6879      	ldr	r1, [r7, #4]
 800ec46:	6288      	str	r0, [r1, #40]	; 0x28
 800ec48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ec4c:	b2d2      	uxtb	r2, r2
 800ec4e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ec54:	b29b      	uxth	r3, r3
 800ec56:	3b01      	subs	r3, #1
 800ec58:	b29b      	uxth	r3, r3
 800ec5a:	687a      	ldr	r2, [r7, #4]
 800ec5c:	4619      	mov	r1, r3
 800ec5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d120      	bne.n	800eca6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	68da      	ldr	r2, [r3, #12]
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	f022 0220 	bic.w	r2, r2, #32
 800ec72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	68da      	ldr	r2, [r3, #12]
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ec82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	695a      	ldr	r2, [r3, #20]
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	f022 0201 	bic.w	r2, r2, #1
 800ec92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2220      	movs	r2, #32
 800ec98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f7ff fe3d 	bl	800e91c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800eca2:	2300      	movs	r3, #0
 800eca4:	e002      	b.n	800ecac <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800eca6:	2300      	movs	r3, #0
 800eca8:	e000      	b.n	800ecac <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800ecaa:	2302      	movs	r3, #2
  }
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3710      	adds	r7, #16
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ecb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecb8:	b085      	sub	sp, #20
 800ecba:	af00      	add	r7, sp, #0
 800ecbc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	691b      	ldr	r3, [r3, #16]
 800ecc4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	68da      	ldr	r2, [r3, #12]
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	430a      	orrs	r2, r1
 800ecd2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	689a      	ldr	r2, [r3, #8]
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	691b      	ldr	r3, [r3, #16]
 800ecdc:	431a      	orrs	r2, r3
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	695b      	ldr	r3, [r3, #20]
 800ece2:	431a      	orrs	r2, r3
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	69db      	ldr	r3, [r3, #28]
 800ece8:	4313      	orrs	r3, r2
 800ecea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	68db      	ldr	r3, [r3, #12]
 800ecf2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ecf6:	f023 030c 	bic.w	r3, r3, #12
 800ecfa:	687a      	ldr	r2, [r7, #4]
 800ecfc:	6812      	ldr	r2, [r2, #0]
 800ecfe:	68f9      	ldr	r1, [r7, #12]
 800ed00:	430b      	orrs	r3, r1
 800ed02:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	695b      	ldr	r3, [r3, #20]
 800ed0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	699a      	ldr	r2, [r3, #24]
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	430a      	orrs	r2, r1
 800ed18:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	69db      	ldr	r3, [r3, #28]
 800ed1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed22:	f040 818b 	bne.w	800f03c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	4ac1      	ldr	r2, [pc, #772]	; (800f030 <UART_SetConfig+0x37c>)
 800ed2c:	4293      	cmp	r3, r2
 800ed2e:	d005      	beq.n	800ed3c <UART_SetConfig+0x88>
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	4abf      	ldr	r2, [pc, #764]	; (800f034 <UART_SetConfig+0x380>)
 800ed36:	4293      	cmp	r3, r2
 800ed38:	f040 80bd 	bne.w	800eeb6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ed3c:	f7fe ffe4 	bl	800dd08 <HAL_RCC_GetPCLK2Freq>
 800ed40:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	461d      	mov	r5, r3
 800ed46:	f04f 0600 	mov.w	r6, #0
 800ed4a:	46a8      	mov	r8, r5
 800ed4c:	46b1      	mov	r9, r6
 800ed4e:	eb18 0308 	adds.w	r3, r8, r8
 800ed52:	eb49 0409 	adc.w	r4, r9, r9
 800ed56:	4698      	mov	r8, r3
 800ed58:	46a1      	mov	r9, r4
 800ed5a:	eb18 0805 	adds.w	r8, r8, r5
 800ed5e:	eb49 0906 	adc.w	r9, r9, r6
 800ed62:	f04f 0100 	mov.w	r1, #0
 800ed66:	f04f 0200 	mov.w	r2, #0
 800ed6a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ed6e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ed72:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ed76:	4688      	mov	r8, r1
 800ed78:	4691      	mov	r9, r2
 800ed7a:	eb18 0005 	adds.w	r0, r8, r5
 800ed7e:	eb49 0106 	adc.w	r1, r9, r6
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	685b      	ldr	r3, [r3, #4]
 800ed86:	461d      	mov	r5, r3
 800ed88:	f04f 0600 	mov.w	r6, #0
 800ed8c:	196b      	adds	r3, r5, r5
 800ed8e:	eb46 0406 	adc.w	r4, r6, r6
 800ed92:	461a      	mov	r2, r3
 800ed94:	4623      	mov	r3, r4
 800ed96:	f7f1 ff77 	bl	8000c88 <__aeabi_uldivmod>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	460c      	mov	r4, r1
 800ed9e:	461a      	mov	r2, r3
 800eda0:	4ba5      	ldr	r3, [pc, #660]	; (800f038 <UART_SetConfig+0x384>)
 800eda2:	fba3 2302 	umull	r2, r3, r3, r2
 800eda6:	095b      	lsrs	r3, r3, #5
 800eda8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	461d      	mov	r5, r3
 800edb0:	f04f 0600 	mov.w	r6, #0
 800edb4:	46a9      	mov	r9, r5
 800edb6:	46b2      	mov	sl, r6
 800edb8:	eb19 0309 	adds.w	r3, r9, r9
 800edbc:	eb4a 040a 	adc.w	r4, sl, sl
 800edc0:	4699      	mov	r9, r3
 800edc2:	46a2      	mov	sl, r4
 800edc4:	eb19 0905 	adds.w	r9, r9, r5
 800edc8:	eb4a 0a06 	adc.w	sl, sl, r6
 800edcc:	f04f 0100 	mov.w	r1, #0
 800edd0:	f04f 0200 	mov.w	r2, #0
 800edd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800edd8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800eddc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ede0:	4689      	mov	r9, r1
 800ede2:	4692      	mov	sl, r2
 800ede4:	eb19 0005 	adds.w	r0, r9, r5
 800ede8:	eb4a 0106 	adc.w	r1, sl, r6
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	461d      	mov	r5, r3
 800edf2:	f04f 0600 	mov.w	r6, #0
 800edf6:	196b      	adds	r3, r5, r5
 800edf8:	eb46 0406 	adc.w	r4, r6, r6
 800edfc:	461a      	mov	r2, r3
 800edfe:	4623      	mov	r3, r4
 800ee00:	f7f1 ff42 	bl	8000c88 <__aeabi_uldivmod>
 800ee04:	4603      	mov	r3, r0
 800ee06:	460c      	mov	r4, r1
 800ee08:	461a      	mov	r2, r3
 800ee0a:	4b8b      	ldr	r3, [pc, #556]	; (800f038 <UART_SetConfig+0x384>)
 800ee0c:	fba3 1302 	umull	r1, r3, r3, r2
 800ee10:	095b      	lsrs	r3, r3, #5
 800ee12:	2164      	movs	r1, #100	; 0x64
 800ee14:	fb01 f303 	mul.w	r3, r1, r3
 800ee18:	1ad3      	subs	r3, r2, r3
 800ee1a:	00db      	lsls	r3, r3, #3
 800ee1c:	3332      	adds	r3, #50	; 0x32
 800ee1e:	4a86      	ldr	r2, [pc, #536]	; (800f038 <UART_SetConfig+0x384>)
 800ee20:	fba2 2303 	umull	r2, r3, r2, r3
 800ee24:	095b      	lsrs	r3, r3, #5
 800ee26:	005b      	lsls	r3, r3, #1
 800ee28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ee2c:	4498      	add	r8, r3
 800ee2e:	68bb      	ldr	r3, [r7, #8]
 800ee30:	461d      	mov	r5, r3
 800ee32:	f04f 0600 	mov.w	r6, #0
 800ee36:	46a9      	mov	r9, r5
 800ee38:	46b2      	mov	sl, r6
 800ee3a:	eb19 0309 	adds.w	r3, r9, r9
 800ee3e:	eb4a 040a 	adc.w	r4, sl, sl
 800ee42:	4699      	mov	r9, r3
 800ee44:	46a2      	mov	sl, r4
 800ee46:	eb19 0905 	adds.w	r9, r9, r5
 800ee4a:	eb4a 0a06 	adc.w	sl, sl, r6
 800ee4e:	f04f 0100 	mov.w	r1, #0
 800ee52:	f04f 0200 	mov.w	r2, #0
 800ee56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ee5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ee5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ee62:	4689      	mov	r9, r1
 800ee64:	4692      	mov	sl, r2
 800ee66:	eb19 0005 	adds.w	r0, r9, r5
 800ee6a:	eb4a 0106 	adc.w	r1, sl, r6
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	685b      	ldr	r3, [r3, #4]
 800ee72:	461d      	mov	r5, r3
 800ee74:	f04f 0600 	mov.w	r6, #0
 800ee78:	196b      	adds	r3, r5, r5
 800ee7a:	eb46 0406 	adc.w	r4, r6, r6
 800ee7e:	461a      	mov	r2, r3
 800ee80:	4623      	mov	r3, r4
 800ee82:	f7f1 ff01 	bl	8000c88 <__aeabi_uldivmod>
 800ee86:	4603      	mov	r3, r0
 800ee88:	460c      	mov	r4, r1
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	4b6a      	ldr	r3, [pc, #424]	; (800f038 <UART_SetConfig+0x384>)
 800ee8e:	fba3 1302 	umull	r1, r3, r3, r2
 800ee92:	095b      	lsrs	r3, r3, #5
 800ee94:	2164      	movs	r1, #100	; 0x64
 800ee96:	fb01 f303 	mul.w	r3, r1, r3
 800ee9a:	1ad3      	subs	r3, r2, r3
 800ee9c:	00db      	lsls	r3, r3, #3
 800ee9e:	3332      	adds	r3, #50	; 0x32
 800eea0:	4a65      	ldr	r2, [pc, #404]	; (800f038 <UART_SetConfig+0x384>)
 800eea2:	fba2 2303 	umull	r2, r3, r2, r3
 800eea6:	095b      	lsrs	r3, r3, #5
 800eea8:	f003 0207 	and.w	r2, r3, #7
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	4442      	add	r2, r8
 800eeb2:	609a      	str	r2, [r3, #8]
 800eeb4:	e26f      	b.n	800f396 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800eeb6:	f7fe ff13 	bl	800dce0 <HAL_RCC_GetPCLK1Freq>
 800eeba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	461d      	mov	r5, r3
 800eec0:	f04f 0600 	mov.w	r6, #0
 800eec4:	46a8      	mov	r8, r5
 800eec6:	46b1      	mov	r9, r6
 800eec8:	eb18 0308 	adds.w	r3, r8, r8
 800eecc:	eb49 0409 	adc.w	r4, r9, r9
 800eed0:	4698      	mov	r8, r3
 800eed2:	46a1      	mov	r9, r4
 800eed4:	eb18 0805 	adds.w	r8, r8, r5
 800eed8:	eb49 0906 	adc.w	r9, r9, r6
 800eedc:	f04f 0100 	mov.w	r1, #0
 800eee0:	f04f 0200 	mov.w	r2, #0
 800eee4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800eee8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800eeec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800eef0:	4688      	mov	r8, r1
 800eef2:	4691      	mov	r9, r2
 800eef4:	eb18 0005 	adds.w	r0, r8, r5
 800eef8:	eb49 0106 	adc.w	r1, r9, r6
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	685b      	ldr	r3, [r3, #4]
 800ef00:	461d      	mov	r5, r3
 800ef02:	f04f 0600 	mov.w	r6, #0
 800ef06:	196b      	adds	r3, r5, r5
 800ef08:	eb46 0406 	adc.w	r4, r6, r6
 800ef0c:	461a      	mov	r2, r3
 800ef0e:	4623      	mov	r3, r4
 800ef10:	f7f1 feba 	bl	8000c88 <__aeabi_uldivmod>
 800ef14:	4603      	mov	r3, r0
 800ef16:	460c      	mov	r4, r1
 800ef18:	461a      	mov	r2, r3
 800ef1a:	4b47      	ldr	r3, [pc, #284]	; (800f038 <UART_SetConfig+0x384>)
 800ef1c:	fba3 2302 	umull	r2, r3, r3, r2
 800ef20:	095b      	lsrs	r3, r3, #5
 800ef22:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	461d      	mov	r5, r3
 800ef2a:	f04f 0600 	mov.w	r6, #0
 800ef2e:	46a9      	mov	r9, r5
 800ef30:	46b2      	mov	sl, r6
 800ef32:	eb19 0309 	adds.w	r3, r9, r9
 800ef36:	eb4a 040a 	adc.w	r4, sl, sl
 800ef3a:	4699      	mov	r9, r3
 800ef3c:	46a2      	mov	sl, r4
 800ef3e:	eb19 0905 	adds.w	r9, r9, r5
 800ef42:	eb4a 0a06 	adc.w	sl, sl, r6
 800ef46:	f04f 0100 	mov.w	r1, #0
 800ef4a:	f04f 0200 	mov.w	r2, #0
 800ef4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ef52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ef56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ef5a:	4689      	mov	r9, r1
 800ef5c:	4692      	mov	sl, r2
 800ef5e:	eb19 0005 	adds.w	r0, r9, r5
 800ef62:	eb4a 0106 	adc.w	r1, sl, r6
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	461d      	mov	r5, r3
 800ef6c:	f04f 0600 	mov.w	r6, #0
 800ef70:	196b      	adds	r3, r5, r5
 800ef72:	eb46 0406 	adc.w	r4, r6, r6
 800ef76:	461a      	mov	r2, r3
 800ef78:	4623      	mov	r3, r4
 800ef7a:	f7f1 fe85 	bl	8000c88 <__aeabi_uldivmod>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	460c      	mov	r4, r1
 800ef82:	461a      	mov	r2, r3
 800ef84:	4b2c      	ldr	r3, [pc, #176]	; (800f038 <UART_SetConfig+0x384>)
 800ef86:	fba3 1302 	umull	r1, r3, r3, r2
 800ef8a:	095b      	lsrs	r3, r3, #5
 800ef8c:	2164      	movs	r1, #100	; 0x64
 800ef8e:	fb01 f303 	mul.w	r3, r1, r3
 800ef92:	1ad3      	subs	r3, r2, r3
 800ef94:	00db      	lsls	r3, r3, #3
 800ef96:	3332      	adds	r3, #50	; 0x32
 800ef98:	4a27      	ldr	r2, [pc, #156]	; (800f038 <UART_SetConfig+0x384>)
 800ef9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ef9e:	095b      	lsrs	r3, r3, #5
 800efa0:	005b      	lsls	r3, r3, #1
 800efa2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800efa6:	4498      	add	r8, r3
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	461d      	mov	r5, r3
 800efac:	f04f 0600 	mov.w	r6, #0
 800efb0:	46a9      	mov	r9, r5
 800efb2:	46b2      	mov	sl, r6
 800efb4:	eb19 0309 	adds.w	r3, r9, r9
 800efb8:	eb4a 040a 	adc.w	r4, sl, sl
 800efbc:	4699      	mov	r9, r3
 800efbe:	46a2      	mov	sl, r4
 800efc0:	eb19 0905 	adds.w	r9, r9, r5
 800efc4:	eb4a 0a06 	adc.w	sl, sl, r6
 800efc8:	f04f 0100 	mov.w	r1, #0
 800efcc:	f04f 0200 	mov.w	r2, #0
 800efd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800efd4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800efd8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800efdc:	4689      	mov	r9, r1
 800efde:	4692      	mov	sl, r2
 800efe0:	eb19 0005 	adds.w	r0, r9, r5
 800efe4:	eb4a 0106 	adc.w	r1, sl, r6
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	461d      	mov	r5, r3
 800efee:	f04f 0600 	mov.w	r6, #0
 800eff2:	196b      	adds	r3, r5, r5
 800eff4:	eb46 0406 	adc.w	r4, r6, r6
 800eff8:	461a      	mov	r2, r3
 800effa:	4623      	mov	r3, r4
 800effc:	f7f1 fe44 	bl	8000c88 <__aeabi_uldivmod>
 800f000:	4603      	mov	r3, r0
 800f002:	460c      	mov	r4, r1
 800f004:	461a      	mov	r2, r3
 800f006:	4b0c      	ldr	r3, [pc, #48]	; (800f038 <UART_SetConfig+0x384>)
 800f008:	fba3 1302 	umull	r1, r3, r3, r2
 800f00c:	095b      	lsrs	r3, r3, #5
 800f00e:	2164      	movs	r1, #100	; 0x64
 800f010:	fb01 f303 	mul.w	r3, r1, r3
 800f014:	1ad3      	subs	r3, r2, r3
 800f016:	00db      	lsls	r3, r3, #3
 800f018:	3332      	adds	r3, #50	; 0x32
 800f01a:	4a07      	ldr	r2, [pc, #28]	; (800f038 <UART_SetConfig+0x384>)
 800f01c:	fba2 2303 	umull	r2, r3, r2, r3
 800f020:	095b      	lsrs	r3, r3, #5
 800f022:	f003 0207 	and.w	r2, r3, #7
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	4442      	add	r2, r8
 800f02c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f02e:	e1b2      	b.n	800f396 <UART_SetConfig+0x6e2>
 800f030:	40011000 	.word	0x40011000
 800f034:	40011400 	.word	0x40011400
 800f038:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	4ad7      	ldr	r2, [pc, #860]	; (800f3a0 <UART_SetConfig+0x6ec>)
 800f042:	4293      	cmp	r3, r2
 800f044:	d005      	beq.n	800f052 <UART_SetConfig+0x39e>
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	4ad6      	ldr	r2, [pc, #856]	; (800f3a4 <UART_SetConfig+0x6f0>)
 800f04c:	4293      	cmp	r3, r2
 800f04e:	f040 80d1 	bne.w	800f1f4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f052:	f7fe fe59 	bl	800dd08 <HAL_RCC_GetPCLK2Freq>
 800f056:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	469a      	mov	sl, r3
 800f05c:	f04f 0b00 	mov.w	fp, #0
 800f060:	46d0      	mov	r8, sl
 800f062:	46d9      	mov	r9, fp
 800f064:	eb18 0308 	adds.w	r3, r8, r8
 800f068:	eb49 0409 	adc.w	r4, r9, r9
 800f06c:	4698      	mov	r8, r3
 800f06e:	46a1      	mov	r9, r4
 800f070:	eb18 080a 	adds.w	r8, r8, sl
 800f074:	eb49 090b 	adc.w	r9, r9, fp
 800f078:	f04f 0100 	mov.w	r1, #0
 800f07c:	f04f 0200 	mov.w	r2, #0
 800f080:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f084:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f088:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f08c:	4688      	mov	r8, r1
 800f08e:	4691      	mov	r9, r2
 800f090:	eb1a 0508 	adds.w	r5, sl, r8
 800f094:	eb4b 0609 	adc.w	r6, fp, r9
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	685b      	ldr	r3, [r3, #4]
 800f09c:	4619      	mov	r1, r3
 800f09e:	f04f 0200 	mov.w	r2, #0
 800f0a2:	f04f 0300 	mov.w	r3, #0
 800f0a6:	f04f 0400 	mov.w	r4, #0
 800f0aa:	0094      	lsls	r4, r2, #2
 800f0ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f0b0:	008b      	lsls	r3, r1, #2
 800f0b2:	461a      	mov	r2, r3
 800f0b4:	4623      	mov	r3, r4
 800f0b6:	4628      	mov	r0, r5
 800f0b8:	4631      	mov	r1, r6
 800f0ba:	f7f1 fde5 	bl	8000c88 <__aeabi_uldivmod>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	460c      	mov	r4, r1
 800f0c2:	461a      	mov	r2, r3
 800f0c4:	4bb8      	ldr	r3, [pc, #736]	; (800f3a8 <UART_SetConfig+0x6f4>)
 800f0c6:	fba3 2302 	umull	r2, r3, r3, r2
 800f0ca:	095b      	lsrs	r3, r3, #5
 800f0cc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f0d0:	68bb      	ldr	r3, [r7, #8]
 800f0d2:	469b      	mov	fp, r3
 800f0d4:	f04f 0c00 	mov.w	ip, #0
 800f0d8:	46d9      	mov	r9, fp
 800f0da:	46e2      	mov	sl, ip
 800f0dc:	eb19 0309 	adds.w	r3, r9, r9
 800f0e0:	eb4a 040a 	adc.w	r4, sl, sl
 800f0e4:	4699      	mov	r9, r3
 800f0e6:	46a2      	mov	sl, r4
 800f0e8:	eb19 090b 	adds.w	r9, r9, fp
 800f0ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f0f0:	f04f 0100 	mov.w	r1, #0
 800f0f4:	f04f 0200 	mov.w	r2, #0
 800f0f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f0fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f100:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f104:	4689      	mov	r9, r1
 800f106:	4692      	mov	sl, r2
 800f108:	eb1b 0509 	adds.w	r5, fp, r9
 800f10c:	eb4c 060a 	adc.w	r6, ip, sl
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	685b      	ldr	r3, [r3, #4]
 800f114:	4619      	mov	r1, r3
 800f116:	f04f 0200 	mov.w	r2, #0
 800f11a:	f04f 0300 	mov.w	r3, #0
 800f11e:	f04f 0400 	mov.w	r4, #0
 800f122:	0094      	lsls	r4, r2, #2
 800f124:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f128:	008b      	lsls	r3, r1, #2
 800f12a:	461a      	mov	r2, r3
 800f12c:	4623      	mov	r3, r4
 800f12e:	4628      	mov	r0, r5
 800f130:	4631      	mov	r1, r6
 800f132:	f7f1 fda9 	bl	8000c88 <__aeabi_uldivmod>
 800f136:	4603      	mov	r3, r0
 800f138:	460c      	mov	r4, r1
 800f13a:	461a      	mov	r2, r3
 800f13c:	4b9a      	ldr	r3, [pc, #616]	; (800f3a8 <UART_SetConfig+0x6f4>)
 800f13e:	fba3 1302 	umull	r1, r3, r3, r2
 800f142:	095b      	lsrs	r3, r3, #5
 800f144:	2164      	movs	r1, #100	; 0x64
 800f146:	fb01 f303 	mul.w	r3, r1, r3
 800f14a:	1ad3      	subs	r3, r2, r3
 800f14c:	011b      	lsls	r3, r3, #4
 800f14e:	3332      	adds	r3, #50	; 0x32
 800f150:	4a95      	ldr	r2, [pc, #596]	; (800f3a8 <UART_SetConfig+0x6f4>)
 800f152:	fba2 2303 	umull	r2, r3, r2, r3
 800f156:	095b      	lsrs	r3, r3, #5
 800f158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f15c:	4498      	add	r8, r3
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	469b      	mov	fp, r3
 800f162:	f04f 0c00 	mov.w	ip, #0
 800f166:	46d9      	mov	r9, fp
 800f168:	46e2      	mov	sl, ip
 800f16a:	eb19 0309 	adds.w	r3, r9, r9
 800f16e:	eb4a 040a 	adc.w	r4, sl, sl
 800f172:	4699      	mov	r9, r3
 800f174:	46a2      	mov	sl, r4
 800f176:	eb19 090b 	adds.w	r9, r9, fp
 800f17a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f17e:	f04f 0100 	mov.w	r1, #0
 800f182:	f04f 0200 	mov.w	r2, #0
 800f186:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f18a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f18e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f192:	4689      	mov	r9, r1
 800f194:	4692      	mov	sl, r2
 800f196:	eb1b 0509 	adds.w	r5, fp, r9
 800f19a:	eb4c 060a 	adc.w	r6, ip, sl
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	685b      	ldr	r3, [r3, #4]
 800f1a2:	4619      	mov	r1, r3
 800f1a4:	f04f 0200 	mov.w	r2, #0
 800f1a8:	f04f 0300 	mov.w	r3, #0
 800f1ac:	f04f 0400 	mov.w	r4, #0
 800f1b0:	0094      	lsls	r4, r2, #2
 800f1b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f1b6:	008b      	lsls	r3, r1, #2
 800f1b8:	461a      	mov	r2, r3
 800f1ba:	4623      	mov	r3, r4
 800f1bc:	4628      	mov	r0, r5
 800f1be:	4631      	mov	r1, r6
 800f1c0:	f7f1 fd62 	bl	8000c88 <__aeabi_uldivmod>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	460c      	mov	r4, r1
 800f1c8:	461a      	mov	r2, r3
 800f1ca:	4b77      	ldr	r3, [pc, #476]	; (800f3a8 <UART_SetConfig+0x6f4>)
 800f1cc:	fba3 1302 	umull	r1, r3, r3, r2
 800f1d0:	095b      	lsrs	r3, r3, #5
 800f1d2:	2164      	movs	r1, #100	; 0x64
 800f1d4:	fb01 f303 	mul.w	r3, r1, r3
 800f1d8:	1ad3      	subs	r3, r2, r3
 800f1da:	011b      	lsls	r3, r3, #4
 800f1dc:	3332      	adds	r3, #50	; 0x32
 800f1de:	4a72      	ldr	r2, [pc, #456]	; (800f3a8 <UART_SetConfig+0x6f4>)
 800f1e0:	fba2 2303 	umull	r2, r3, r2, r3
 800f1e4:	095b      	lsrs	r3, r3, #5
 800f1e6:	f003 020f 	and.w	r2, r3, #15
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	4442      	add	r2, r8
 800f1f0:	609a      	str	r2, [r3, #8]
 800f1f2:	e0d0      	b.n	800f396 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800f1f4:	f7fe fd74 	bl	800dce0 <HAL_RCC_GetPCLK1Freq>
 800f1f8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	469a      	mov	sl, r3
 800f1fe:	f04f 0b00 	mov.w	fp, #0
 800f202:	46d0      	mov	r8, sl
 800f204:	46d9      	mov	r9, fp
 800f206:	eb18 0308 	adds.w	r3, r8, r8
 800f20a:	eb49 0409 	adc.w	r4, r9, r9
 800f20e:	4698      	mov	r8, r3
 800f210:	46a1      	mov	r9, r4
 800f212:	eb18 080a 	adds.w	r8, r8, sl
 800f216:	eb49 090b 	adc.w	r9, r9, fp
 800f21a:	f04f 0100 	mov.w	r1, #0
 800f21e:	f04f 0200 	mov.w	r2, #0
 800f222:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f226:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f22a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f22e:	4688      	mov	r8, r1
 800f230:	4691      	mov	r9, r2
 800f232:	eb1a 0508 	adds.w	r5, sl, r8
 800f236:	eb4b 0609 	adc.w	r6, fp, r9
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	685b      	ldr	r3, [r3, #4]
 800f23e:	4619      	mov	r1, r3
 800f240:	f04f 0200 	mov.w	r2, #0
 800f244:	f04f 0300 	mov.w	r3, #0
 800f248:	f04f 0400 	mov.w	r4, #0
 800f24c:	0094      	lsls	r4, r2, #2
 800f24e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f252:	008b      	lsls	r3, r1, #2
 800f254:	461a      	mov	r2, r3
 800f256:	4623      	mov	r3, r4
 800f258:	4628      	mov	r0, r5
 800f25a:	4631      	mov	r1, r6
 800f25c:	f7f1 fd14 	bl	8000c88 <__aeabi_uldivmod>
 800f260:	4603      	mov	r3, r0
 800f262:	460c      	mov	r4, r1
 800f264:	461a      	mov	r2, r3
 800f266:	4b50      	ldr	r3, [pc, #320]	; (800f3a8 <UART_SetConfig+0x6f4>)
 800f268:	fba3 2302 	umull	r2, r3, r3, r2
 800f26c:	095b      	lsrs	r3, r3, #5
 800f26e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	469b      	mov	fp, r3
 800f276:	f04f 0c00 	mov.w	ip, #0
 800f27a:	46d9      	mov	r9, fp
 800f27c:	46e2      	mov	sl, ip
 800f27e:	eb19 0309 	adds.w	r3, r9, r9
 800f282:	eb4a 040a 	adc.w	r4, sl, sl
 800f286:	4699      	mov	r9, r3
 800f288:	46a2      	mov	sl, r4
 800f28a:	eb19 090b 	adds.w	r9, r9, fp
 800f28e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f292:	f04f 0100 	mov.w	r1, #0
 800f296:	f04f 0200 	mov.w	r2, #0
 800f29a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f29e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f2a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f2a6:	4689      	mov	r9, r1
 800f2a8:	4692      	mov	sl, r2
 800f2aa:	eb1b 0509 	adds.w	r5, fp, r9
 800f2ae:	eb4c 060a 	adc.w	r6, ip, sl
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	685b      	ldr	r3, [r3, #4]
 800f2b6:	4619      	mov	r1, r3
 800f2b8:	f04f 0200 	mov.w	r2, #0
 800f2bc:	f04f 0300 	mov.w	r3, #0
 800f2c0:	f04f 0400 	mov.w	r4, #0
 800f2c4:	0094      	lsls	r4, r2, #2
 800f2c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f2ca:	008b      	lsls	r3, r1, #2
 800f2cc:	461a      	mov	r2, r3
 800f2ce:	4623      	mov	r3, r4
 800f2d0:	4628      	mov	r0, r5
 800f2d2:	4631      	mov	r1, r6
 800f2d4:	f7f1 fcd8 	bl	8000c88 <__aeabi_uldivmod>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	460c      	mov	r4, r1
 800f2dc:	461a      	mov	r2, r3
 800f2de:	4b32      	ldr	r3, [pc, #200]	; (800f3a8 <UART_SetConfig+0x6f4>)
 800f2e0:	fba3 1302 	umull	r1, r3, r3, r2
 800f2e4:	095b      	lsrs	r3, r3, #5
 800f2e6:	2164      	movs	r1, #100	; 0x64
 800f2e8:	fb01 f303 	mul.w	r3, r1, r3
 800f2ec:	1ad3      	subs	r3, r2, r3
 800f2ee:	011b      	lsls	r3, r3, #4
 800f2f0:	3332      	adds	r3, #50	; 0x32
 800f2f2:	4a2d      	ldr	r2, [pc, #180]	; (800f3a8 <UART_SetConfig+0x6f4>)
 800f2f4:	fba2 2303 	umull	r2, r3, r2, r3
 800f2f8:	095b      	lsrs	r3, r3, #5
 800f2fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f2fe:	4498      	add	r8, r3
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	469b      	mov	fp, r3
 800f304:	f04f 0c00 	mov.w	ip, #0
 800f308:	46d9      	mov	r9, fp
 800f30a:	46e2      	mov	sl, ip
 800f30c:	eb19 0309 	adds.w	r3, r9, r9
 800f310:	eb4a 040a 	adc.w	r4, sl, sl
 800f314:	4699      	mov	r9, r3
 800f316:	46a2      	mov	sl, r4
 800f318:	eb19 090b 	adds.w	r9, r9, fp
 800f31c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f320:	f04f 0100 	mov.w	r1, #0
 800f324:	f04f 0200 	mov.w	r2, #0
 800f328:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f32c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f330:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f334:	4689      	mov	r9, r1
 800f336:	4692      	mov	sl, r2
 800f338:	eb1b 0509 	adds.w	r5, fp, r9
 800f33c:	eb4c 060a 	adc.w	r6, ip, sl
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	685b      	ldr	r3, [r3, #4]
 800f344:	4619      	mov	r1, r3
 800f346:	f04f 0200 	mov.w	r2, #0
 800f34a:	f04f 0300 	mov.w	r3, #0
 800f34e:	f04f 0400 	mov.w	r4, #0
 800f352:	0094      	lsls	r4, r2, #2
 800f354:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f358:	008b      	lsls	r3, r1, #2
 800f35a:	461a      	mov	r2, r3
 800f35c:	4623      	mov	r3, r4
 800f35e:	4628      	mov	r0, r5
 800f360:	4631      	mov	r1, r6
 800f362:	f7f1 fc91 	bl	8000c88 <__aeabi_uldivmod>
 800f366:	4603      	mov	r3, r0
 800f368:	460c      	mov	r4, r1
 800f36a:	461a      	mov	r2, r3
 800f36c:	4b0e      	ldr	r3, [pc, #56]	; (800f3a8 <UART_SetConfig+0x6f4>)
 800f36e:	fba3 1302 	umull	r1, r3, r3, r2
 800f372:	095b      	lsrs	r3, r3, #5
 800f374:	2164      	movs	r1, #100	; 0x64
 800f376:	fb01 f303 	mul.w	r3, r1, r3
 800f37a:	1ad3      	subs	r3, r2, r3
 800f37c:	011b      	lsls	r3, r3, #4
 800f37e:	3332      	adds	r3, #50	; 0x32
 800f380:	4a09      	ldr	r2, [pc, #36]	; (800f3a8 <UART_SetConfig+0x6f4>)
 800f382:	fba2 2303 	umull	r2, r3, r2, r3
 800f386:	095b      	lsrs	r3, r3, #5
 800f388:	f003 020f 	and.w	r2, r3, #15
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	4442      	add	r2, r8
 800f392:	609a      	str	r2, [r3, #8]
}
 800f394:	e7ff      	b.n	800f396 <UART_SetConfig+0x6e2>
 800f396:	bf00      	nop
 800f398:	3714      	adds	r7, #20
 800f39a:	46bd      	mov	sp, r7
 800f39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3a0:	40011000 	.word	0x40011000
 800f3a4:	40011400 	.word	0x40011400
 800f3a8:	51eb851f 	.word	0x51eb851f

0800f3ac <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800f3ac:	b480      	push	{r7}
 800f3ae:	b085      	sub	sp, #20
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
 800f3b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	681a      	ldr	r2, [r3, #0]
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3c4:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800f3c6:	68fa      	ldr	r2, [r7, #12]
 800f3c8:	4b20      	ldr	r3, [pc, #128]	; (800f44c <FSMC_NORSRAM_Init+0xa0>)
 800f3ca:	4013      	ands	r3, r2
 800f3cc:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f3d6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800f3dc:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800f3e2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800f3e8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800f3ee:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800f3f4:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800f3fa:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800f400:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800f406:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800f40c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800f412:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800f418:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f41a:	68fa      	ldr	r2, [r7, #12]
 800f41c:	4313      	orrs	r3, r2
 800f41e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	689b      	ldr	r3, [r3, #8]
 800f424:	2b08      	cmp	r3, #8
 800f426:	d103      	bne.n	800f430 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f42e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	681a      	ldr	r2, [r3, #0]
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	68f9      	ldr	r1, [r7, #12]
 800f438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f43c:	2300      	movs	r3, #0
}
 800f43e:	4618      	mov	r0, r3
 800f440:	3714      	adds	r7, #20
 800f442:	46bd      	mov	sp, r7
 800f444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f448:	4770      	bx	lr
 800f44a:	bf00      	nop
 800f44c:	fff00080 	.word	0xfff00080

0800f450 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f450:	b480      	push	{r7}
 800f452:	b087      	sub	sp, #28
 800f454:	af00      	add	r7, sp, #0
 800f456:	60f8      	str	r0, [r7, #12]
 800f458:	60b9      	str	r1, [r7, #8]
 800f45a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800f45c:	2300      	movs	r3, #0
 800f45e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	1c5a      	adds	r2, r3, #1
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f46a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800f472:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	685b      	ldr	r3, [r3, #4]
 800f47c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f47e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	689b      	ldr	r3, [r3, #8]
 800f484:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f486:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	68db      	ldr	r3, [r3, #12]
 800f48c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800f48e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	691b      	ldr	r3, [r3, #16]
 800f494:	3b01      	subs	r3, #1
 800f496:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f498:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	695b      	ldr	r3, [r3, #20]
 800f49e:	3b02      	subs	r3, #2
 800f4a0:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f4a2:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f4a8:	4313      	orrs	r3, r2
 800f4aa:	697a      	ldr	r2, [r7, #20]
 800f4ac:	4313      	orrs	r3, r2
 800f4ae:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	1c5a      	adds	r2, r3, #1
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	6979      	ldr	r1, [r7, #20]
 800f4b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f4bc:	2300      	movs	r3, #0
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	371c      	adds	r7, #28
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c8:	4770      	bx	lr
	...

0800f4cc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b087      	sub	sp, #28
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	60f8      	str	r0, [r7, #12]
 800f4d4:	60b9      	str	r1, [r7, #8]
 800f4d6:	607a      	str	r2, [r7, #4]
 800f4d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800f4da:	2300      	movs	r3, #0
 800f4dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f4e4:	d122      	bne.n	800f52c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	687a      	ldr	r2, [r7, #4]
 800f4ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4ee:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800f4f0:	697a      	ldr	r2, [r7, #20]
 800f4f2:	4b15      	ldr	r3, [pc, #84]	; (800f548 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800f4f4:	4013      	ands	r3, r2
 800f4f6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f4f8:	68bb      	ldr	r3, [r7, #8]
 800f4fa:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	685b      	ldr	r3, [r3, #4]
 800f500:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f502:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	689b      	ldr	r3, [r3, #8]
 800f508:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f50a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	68db      	ldr	r3, [r3, #12]
 800f510:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800f512:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f518:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f51a:	697a      	ldr	r2, [r7, #20]
 800f51c:	4313      	orrs	r3, r2
 800f51e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	687a      	ldr	r2, [r7, #4]
 800f524:	6979      	ldr	r1, [r7, #20]
 800f526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f52a:	e005      	b.n	800f538 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	687a      	ldr	r2, [r7, #4]
 800f530:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800f538:	2300      	movs	r3, #0
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	371c      	adds	r7, #28
 800f53e:	46bd      	mov	sp, r7
 800f540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f544:	4770      	bx	lr
 800f546:	bf00      	nop
 800f548:	cff00000 	.word	0xcff00000

0800f54c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f54c:	b084      	sub	sp, #16
 800f54e:	b580      	push	{r7, lr}
 800f550:	b084      	sub	sp, #16
 800f552:	af00      	add	r7, sp, #0
 800f554:	6078      	str	r0, [r7, #4]
 800f556:	f107 001c 	add.w	r0, r7, #28
 800f55a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f560:	2b01      	cmp	r3, #1
 800f562:	d122      	bne.n	800f5aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f568:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	68db      	ldr	r3, [r3, #12]
 800f574:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800f578:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f57c:	687a      	ldr	r2, [r7, #4]
 800f57e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	68db      	ldr	r3, [r3, #12]
 800f584:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f58c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f58e:	2b01      	cmp	r3, #1
 800f590:	d105      	bne.n	800f59e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	68db      	ldr	r3, [r3, #12]
 800f596:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f001 fac6 	bl	8010b30 <USB_CoreReset>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	73fb      	strb	r3, [r7, #15]
 800f5a8:	e01a      	b.n	800f5e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	68db      	ldr	r3, [r3, #12]
 800f5ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f5b6:	6878      	ldr	r0, [r7, #4]
 800f5b8:	f001 faba 	bl	8010b30 <USB_CoreReset>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f5c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d106      	bne.n	800f5d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	639a      	str	r2, [r3, #56]	; 0x38
 800f5d2:	e005      	b.n	800f5e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e2:	2b01      	cmp	r3, #1
 800f5e4:	d10b      	bne.n	800f5fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	689b      	ldr	r3, [r3, #8]
 800f5ea:	f043 0206 	orr.w	r2, r3, #6
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	689b      	ldr	r3, [r3, #8]
 800f5f6:	f043 0220 	orr.w	r2, r3, #32
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f5fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800f600:	4618      	mov	r0, r3
 800f602:	3710      	adds	r7, #16
 800f604:	46bd      	mov	sp, r7
 800f606:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f60a:	b004      	add	sp, #16
 800f60c:	4770      	bx	lr
	...

0800f610 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f610:	b480      	push	{r7}
 800f612:	b087      	sub	sp, #28
 800f614:	af00      	add	r7, sp, #0
 800f616:	60f8      	str	r0, [r7, #12]
 800f618:	60b9      	str	r1, [r7, #8]
 800f61a:	4613      	mov	r3, r2
 800f61c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f61e:	79fb      	ldrb	r3, [r7, #7]
 800f620:	2b02      	cmp	r3, #2
 800f622:	d165      	bne.n	800f6f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	4a41      	ldr	r2, [pc, #260]	; (800f72c <USB_SetTurnaroundTime+0x11c>)
 800f628:	4293      	cmp	r3, r2
 800f62a:	d906      	bls.n	800f63a <USB_SetTurnaroundTime+0x2a>
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	4a40      	ldr	r2, [pc, #256]	; (800f730 <USB_SetTurnaroundTime+0x120>)
 800f630:	4293      	cmp	r3, r2
 800f632:	d802      	bhi.n	800f63a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f634:	230f      	movs	r3, #15
 800f636:	617b      	str	r3, [r7, #20]
 800f638:	e062      	b.n	800f700 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	4a3c      	ldr	r2, [pc, #240]	; (800f730 <USB_SetTurnaroundTime+0x120>)
 800f63e:	4293      	cmp	r3, r2
 800f640:	d906      	bls.n	800f650 <USB_SetTurnaroundTime+0x40>
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	4a3b      	ldr	r2, [pc, #236]	; (800f734 <USB_SetTurnaroundTime+0x124>)
 800f646:	4293      	cmp	r3, r2
 800f648:	d802      	bhi.n	800f650 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f64a:	230e      	movs	r3, #14
 800f64c:	617b      	str	r3, [r7, #20]
 800f64e:	e057      	b.n	800f700 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	4a38      	ldr	r2, [pc, #224]	; (800f734 <USB_SetTurnaroundTime+0x124>)
 800f654:	4293      	cmp	r3, r2
 800f656:	d906      	bls.n	800f666 <USB_SetTurnaroundTime+0x56>
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	4a37      	ldr	r2, [pc, #220]	; (800f738 <USB_SetTurnaroundTime+0x128>)
 800f65c:	4293      	cmp	r3, r2
 800f65e:	d802      	bhi.n	800f666 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f660:	230d      	movs	r3, #13
 800f662:	617b      	str	r3, [r7, #20]
 800f664:	e04c      	b.n	800f700 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	4a33      	ldr	r2, [pc, #204]	; (800f738 <USB_SetTurnaroundTime+0x128>)
 800f66a:	4293      	cmp	r3, r2
 800f66c:	d906      	bls.n	800f67c <USB_SetTurnaroundTime+0x6c>
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	4a32      	ldr	r2, [pc, #200]	; (800f73c <USB_SetTurnaroundTime+0x12c>)
 800f672:	4293      	cmp	r3, r2
 800f674:	d802      	bhi.n	800f67c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f676:	230c      	movs	r3, #12
 800f678:	617b      	str	r3, [r7, #20]
 800f67a:	e041      	b.n	800f700 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	4a2f      	ldr	r2, [pc, #188]	; (800f73c <USB_SetTurnaroundTime+0x12c>)
 800f680:	4293      	cmp	r3, r2
 800f682:	d906      	bls.n	800f692 <USB_SetTurnaroundTime+0x82>
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	4a2e      	ldr	r2, [pc, #184]	; (800f740 <USB_SetTurnaroundTime+0x130>)
 800f688:	4293      	cmp	r3, r2
 800f68a:	d802      	bhi.n	800f692 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f68c:	230b      	movs	r3, #11
 800f68e:	617b      	str	r3, [r7, #20]
 800f690:	e036      	b.n	800f700 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	4a2a      	ldr	r2, [pc, #168]	; (800f740 <USB_SetTurnaroundTime+0x130>)
 800f696:	4293      	cmp	r3, r2
 800f698:	d906      	bls.n	800f6a8 <USB_SetTurnaroundTime+0x98>
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	4a29      	ldr	r2, [pc, #164]	; (800f744 <USB_SetTurnaroundTime+0x134>)
 800f69e:	4293      	cmp	r3, r2
 800f6a0:	d802      	bhi.n	800f6a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f6a2:	230a      	movs	r3, #10
 800f6a4:	617b      	str	r3, [r7, #20]
 800f6a6:	e02b      	b.n	800f700 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	4a26      	ldr	r2, [pc, #152]	; (800f744 <USB_SetTurnaroundTime+0x134>)
 800f6ac:	4293      	cmp	r3, r2
 800f6ae:	d906      	bls.n	800f6be <USB_SetTurnaroundTime+0xae>
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	4a25      	ldr	r2, [pc, #148]	; (800f748 <USB_SetTurnaroundTime+0x138>)
 800f6b4:	4293      	cmp	r3, r2
 800f6b6:	d802      	bhi.n	800f6be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f6b8:	2309      	movs	r3, #9
 800f6ba:	617b      	str	r3, [r7, #20]
 800f6bc:	e020      	b.n	800f700 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	4a21      	ldr	r2, [pc, #132]	; (800f748 <USB_SetTurnaroundTime+0x138>)
 800f6c2:	4293      	cmp	r3, r2
 800f6c4:	d906      	bls.n	800f6d4 <USB_SetTurnaroundTime+0xc4>
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	4a20      	ldr	r2, [pc, #128]	; (800f74c <USB_SetTurnaroundTime+0x13c>)
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	d802      	bhi.n	800f6d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f6ce:	2308      	movs	r3, #8
 800f6d0:	617b      	str	r3, [r7, #20]
 800f6d2:	e015      	b.n	800f700 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	4a1d      	ldr	r2, [pc, #116]	; (800f74c <USB_SetTurnaroundTime+0x13c>)
 800f6d8:	4293      	cmp	r3, r2
 800f6da:	d906      	bls.n	800f6ea <USB_SetTurnaroundTime+0xda>
 800f6dc:	68bb      	ldr	r3, [r7, #8]
 800f6de:	4a1c      	ldr	r2, [pc, #112]	; (800f750 <USB_SetTurnaroundTime+0x140>)
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	d802      	bhi.n	800f6ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f6e4:	2307      	movs	r3, #7
 800f6e6:	617b      	str	r3, [r7, #20]
 800f6e8:	e00a      	b.n	800f700 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f6ea:	2306      	movs	r3, #6
 800f6ec:	617b      	str	r3, [r7, #20]
 800f6ee:	e007      	b.n	800f700 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f6f0:	79fb      	ldrb	r3, [r7, #7]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d102      	bne.n	800f6fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f6f6:	2309      	movs	r3, #9
 800f6f8:	617b      	str	r3, [r7, #20]
 800f6fa:	e001      	b.n	800f700 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f6fc:	2309      	movs	r3, #9
 800f6fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	68db      	ldr	r3, [r3, #12]
 800f704:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	68da      	ldr	r2, [r3, #12]
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	029b      	lsls	r3, r3, #10
 800f714:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f718:	431a      	orrs	r2, r3
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f71e:	2300      	movs	r3, #0
}
 800f720:	4618      	mov	r0, r3
 800f722:	371c      	adds	r7, #28
 800f724:	46bd      	mov	sp, r7
 800f726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72a:	4770      	bx	lr
 800f72c:	00d8acbf 	.word	0x00d8acbf
 800f730:	00e4e1bf 	.word	0x00e4e1bf
 800f734:	00f423ff 	.word	0x00f423ff
 800f738:	0106737f 	.word	0x0106737f
 800f73c:	011a499f 	.word	0x011a499f
 800f740:	01312cff 	.word	0x01312cff
 800f744:	014ca43f 	.word	0x014ca43f
 800f748:	016e35ff 	.word	0x016e35ff
 800f74c:	01a6ab1f 	.word	0x01a6ab1f
 800f750:	01e847ff 	.word	0x01e847ff

0800f754 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f754:	b480      	push	{r7}
 800f756:	b083      	sub	sp, #12
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	689b      	ldr	r3, [r3, #8]
 800f760:	f043 0201 	orr.w	r2, r3, #1
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f768:	2300      	movs	r3, #0
}
 800f76a:	4618      	mov	r0, r3
 800f76c:	370c      	adds	r7, #12
 800f76e:	46bd      	mov	sp, r7
 800f770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f774:	4770      	bx	lr

0800f776 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f776:	b480      	push	{r7}
 800f778:	b083      	sub	sp, #12
 800f77a:	af00      	add	r7, sp, #0
 800f77c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	689b      	ldr	r3, [r3, #8]
 800f782:	f023 0201 	bic.w	r2, r3, #1
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f78a:	2300      	movs	r3, #0
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	370c      	adds	r7, #12
 800f790:	46bd      	mov	sp, r7
 800f792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f796:	4770      	bx	lr

0800f798 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b082      	sub	sp, #8
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
 800f7a0:	460b      	mov	r3, r1
 800f7a2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	68db      	ldr	r3, [r3, #12]
 800f7a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f7b0:	78fb      	ldrb	r3, [r7, #3]
 800f7b2:	2b01      	cmp	r3, #1
 800f7b4:	d106      	bne.n	800f7c4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	68db      	ldr	r3, [r3, #12]
 800f7ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	60da      	str	r2, [r3, #12]
 800f7c2:	e00b      	b.n	800f7dc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800f7c4:	78fb      	ldrb	r3, [r7, #3]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d106      	bne.n	800f7d8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	68db      	ldr	r3, [r3, #12]
 800f7ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	60da      	str	r2, [r3, #12]
 800f7d6:	e001      	b.n	800f7dc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800f7d8:	2301      	movs	r3, #1
 800f7da:	e003      	b.n	800f7e4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800f7dc:	2032      	movs	r0, #50	; 0x32
 800f7de:	f7fb fe15 	bl	800b40c <HAL_Delay>

  return HAL_OK;
 800f7e2:	2300      	movs	r3, #0
}
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	3708      	adds	r7, #8
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd80      	pop	{r7, pc}

0800f7ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f7ec:	b084      	sub	sp, #16
 800f7ee:	b580      	push	{r7, lr}
 800f7f0:	b086      	sub	sp, #24
 800f7f2:	af00      	add	r7, sp, #0
 800f7f4:	6078      	str	r0, [r7, #4]
 800f7f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f7fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f7fe:	2300      	movs	r3, #0
 800f800:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f806:	2300      	movs	r3, #0
 800f808:	613b      	str	r3, [r7, #16]
 800f80a:	e009      	b.n	800f820 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f80c:	687a      	ldr	r2, [r7, #4]
 800f80e:	693b      	ldr	r3, [r7, #16]
 800f810:	3340      	adds	r3, #64	; 0x40
 800f812:	009b      	lsls	r3, r3, #2
 800f814:	4413      	add	r3, r2
 800f816:	2200      	movs	r2, #0
 800f818:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f81a:	693b      	ldr	r3, [r7, #16]
 800f81c:	3301      	adds	r3, #1
 800f81e:	613b      	str	r3, [r7, #16]
 800f820:	693b      	ldr	r3, [r7, #16]
 800f822:	2b0e      	cmp	r3, #14
 800f824:	d9f2      	bls.n	800f80c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d11c      	bne.n	800f866 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f832:	685b      	ldr	r3, [r3, #4]
 800f834:	68fa      	ldr	r2, [r7, #12]
 800f836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f83a:	f043 0302 	orr.w	r3, r3, #2
 800f83e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f844:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f850:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f85c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	639a      	str	r2, [r3, #56]	; 0x38
 800f864:	e00b      	b.n	800f87e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f86a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f876:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f884:	461a      	mov	r2, r3
 800f886:	2300      	movs	r3, #0
 800f888:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f890:	4619      	mov	r1, r3
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f898:	461a      	mov	r2, r3
 800f89a:	680b      	ldr	r3, [r1, #0]
 800f89c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a0:	2b01      	cmp	r3, #1
 800f8a2:	d10c      	bne.n	800f8be <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d104      	bne.n	800f8b4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f8aa:	2100      	movs	r1, #0
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f000 f949 	bl	800fb44 <USB_SetDevSpeed>
 800f8b2:	e008      	b.n	800f8c6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f8b4:	2101      	movs	r1, #1
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f000 f944 	bl	800fb44 <USB_SetDevSpeed>
 800f8bc:	e003      	b.n	800f8c6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f8be:	2103      	movs	r1, #3
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	f000 f93f 	bl	800fb44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f8c6:	2110      	movs	r1, #16
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	f000 f8f3 	bl	800fab4 <USB_FlushTxFifo>
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d001      	beq.n	800f8d8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800f8d4:	2301      	movs	r3, #1
 800f8d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f000 f911 	bl	800fb00 <USB_FlushRxFifo>
 800f8de:	4603      	mov	r3, r0
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d001      	beq.n	800f8e8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800f8e4:	2301      	movs	r3, #1
 800f8e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8ee:	461a      	mov	r2, r3
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8fa:	461a      	mov	r2, r3
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f906:	461a      	mov	r2, r3
 800f908:	2300      	movs	r3, #0
 800f90a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f90c:	2300      	movs	r3, #0
 800f90e:	613b      	str	r3, [r7, #16]
 800f910:	e043      	b.n	800f99a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f912:	693b      	ldr	r3, [r7, #16]
 800f914:	015a      	lsls	r2, r3, #5
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	4413      	add	r3, r2
 800f91a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f924:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f928:	d118      	bne.n	800f95c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800f92a:	693b      	ldr	r3, [r7, #16]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d10a      	bne.n	800f946 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	015a      	lsls	r2, r3, #5
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	4413      	add	r3, r2
 800f938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f93c:	461a      	mov	r2, r3
 800f93e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f942:	6013      	str	r3, [r2, #0]
 800f944:	e013      	b.n	800f96e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f946:	693b      	ldr	r3, [r7, #16]
 800f948:	015a      	lsls	r2, r3, #5
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	4413      	add	r3, r2
 800f94e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f952:	461a      	mov	r2, r3
 800f954:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f958:	6013      	str	r3, [r2, #0]
 800f95a:	e008      	b.n	800f96e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f95c:	693b      	ldr	r3, [r7, #16]
 800f95e:	015a      	lsls	r2, r3, #5
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	4413      	add	r3, r2
 800f964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f968:	461a      	mov	r2, r3
 800f96a:	2300      	movs	r3, #0
 800f96c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f96e:	693b      	ldr	r3, [r7, #16]
 800f970:	015a      	lsls	r2, r3, #5
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	4413      	add	r3, r2
 800f976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f97a:	461a      	mov	r2, r3
 800f97c:	2300      	movs	r3, #0
 800f97e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f980:	693b      	ldr	r3, [r7, #16]
 800f982:	015a      	lsls	r2, r3, #5
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	4413      	add	r3, r2
 800f988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f98c:	461a      	mov	r2, r3
 800f98e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f992:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f994:	693b      	ldr	r3, [r7, #16]
 800f996:	3301      	adds	r3, #1
 800f998:	613b      	str	r3, [r7, #16]
 800f99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f99c:	693a      	ldr	r2, [r7, #16]
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	d3b7      	bcc.n	800f912 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	613b      	str	r3, [r7, #16]
 800f9a6:	e043      	b.n	800fa30 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f9a8:	693b      	ldr	r3, [r7, #16]
 800f9aa:	015a      	lsls	r2, r3, #5
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	4413      	add	r3, r2
 800f9b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f9ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f9be:	d118      	bne.n	800f9f2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800f9c0:	693b      	ldr	r3, [r7, #16]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d10a      	bne.n	800f9dc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f9c6:	693b      	ldr	r3, [r7, #16]
 800f9c8:	015a      	lsls	r2, r3, #5
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	4413      	add	r3, r2
 800f9ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9d2:	461a      	mov	r2, r3
 800f9d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f9d8:	6013      	str	r3, [r2, #0]
 800f9da:	e013      	b.n	800fa04 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f9dc:	693b      	ldr	r3, [r7, #16]
 800f9de:	015a      	lsls	r2, r3, #5
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	4413      	add	r3, r2
 800f9e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9e8:	461a      	mov	r2, r3
 800f9ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f9ee:	6013      	str	r3, [r2, #0]
 800f9f0:	e008      	b.n	800fa04 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f9f2:	693b      	ldr	r3, [r7, #16]
 800f9f4:	015a      	lsls	r2, r3, #5
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	4413      	add	r3, r2
 800f9fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9fe:	461a      	mov	r2, r3
 800fa00:	2300      	movs	r3, #0
 800fa02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fa04:	693b      	ldr	r3, [r7, #16]
 800fa06:	015a      	lsls	r2, r3, #5
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	4413      	add	r3, r2
 800fa0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa10:	461a      	mov	r2, r3
 800fa12:	2300      	movs	r3, #0
 800fa14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fa16:	693b      	ldr	r3, [r7, #16]
 800fa18:	015a      	lsls	r2, r3, #5
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	4413      	add	r3, r2
 800fa1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa22:	461a      	mov	r2, r3
 800fa24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fa28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fa2a:	693b      	ldr	r3, [r7, #16]
 800fa2c:	3301      	adds	r3, #1
 800fa2e:	613b      	str	r3, [r7, #16]
 800fa30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa32:	693a      	ldr	r2, [r7, #16]
 800fa34:	429a      	cmp	r2, r3
 800fa36:	d3b7      	bcc.n	800f9a8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa3e:	691b      	ldr	r3, [r3, #16]
 800fa40:	68fa      	ldr	r2, [r7, #12]
 800fa42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fa46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fa4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2200      	movs	r2, #0
 800fa50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fa58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fa5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d105      	bne.n	800fa6c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	699b      	ldr	r3, [r3, #24]
 800fa64:	f043 0210 	orr.w	r2, r3, #16
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	699a      	ldr	r2, [r3, #24]
 800fa70:	4b0f      	ldr	r3, [pc, #60]	; (800fab0 <USB_DevInit+0x2c4>)
 800fa72:	4313      	orrs	r3, r2
 800fa74:	687a      	ldr	r2, [r7, #4]
 800fa76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fa78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d005      	beq.n	800fa8a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	699b      	ldr	r3, [r3, #24]
 800fa82:	f043 0208 	orr.w	r2, r3, #8
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fa8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa8c:	2b01      	cmp	r3, #1
 800fa8e:	d107      	bne.n	800faa0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	699b      	ldr	r3, [r3, #24]
 800fa94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fa98:	f043 0304 	orr.w	r3, r3, #4
 800fa9c:	687a      	ldr	r2, [r7, #4]
 800fa9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800faa0:	7dfb      	ldrb	r3, [r7, #23]
}
 800faa2:	4618      	mov	r0, r3
 800faa4:	3718      	adds	r7, #24
 800faa6:	46bd      	mov	sp, r7
 800faa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800faac:	b004      	add	sp, #16
 800faae:	4770      	bx	lr
 800fab0:	803c3800 	.word	0x803c3800

0800fab4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fab4:	b480      	push	{r7}
 800fab6:	b085      	sub	sp, #20
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
 800fabc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800fabe:	2300      	movs	r3, #0
 800fac0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fac2:	683b      	ldr	r3, [r7, #0]
 800fac4:	019b      	lsls	r3, r3, #6
 800fac6:	f043 0220 	orr.w	r2, r3, #32
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	3301      	adds	r3, #1
 800fad2:	60fb      	str	r3, [r7, #12]
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	4a09      	ldr	r2, [pc, #36]	; (800fafc <USB_FlushTxFifo+0x48>)
 800fad8:	4293      	cmp	r3, r2
 800fada:	d901      	bls.n	800fae0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800fadc:	2303      	movs	r3, #3
 800fade:	e006      	b.n	800faee <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	691b      	ldr	r3, [r3, #16]
 800fae4:	f003 0320 	and.w	r3, r3, #32
 800fae8:	2b20      	cmp	r3, #32
 800faea:	d0f0      	beq.n	800face <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800faec:	2300      	movs	r3, #0
}
 800faee:	4618      	mov	r0, r3
 800faf0:	3714      	adds	r7, #20
 800faf2:	46bd      	mov	sp, r7
 800faf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf8:	4770      	bx	lr
 800fafa:	bf00      	nop
 800fafc:	00030d40 	.word	0x00030d40

0800fb00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fb00:	b480      	push	{r7}
 800fb02:	b085      	sub	sp, #20
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800fb08:	2300      	movs	r3, #0
 800fb0a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2210      	movs	r2, #16
 800fb10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	3301      	adds	r3, #1
 800fb16:	60fb      	str	r3, [r7, #12]
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	4a09      	ldr	r2, [pc, #36]	; (800fb40 <USB_FlushRxFifo+0x40>)
 800fb1c:	4293      	cmp	r3, r2
 800fb1e:	d901      	bls.n	800fb24 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800fb20:	2303      	movs	r3, #3
 800fb22:	e006      	b.n	800fb32 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	691b      	ldr	r3, [r3, #16]
 800fb28:	f003 0310 	and.w	r3, r3, #16
 800fb2c:	2b10      	cmp	r3, #16
 800fb2e:	d0f0      	beq.n	800fb12 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800fb30:	2300      	movs	r3, #0
}
 800fb32:	4618      	mov	r0, r3
 800fb34:	3714      	adds	r7, #20
 800fb36:	46bd      	mov	sp, r7
 800fb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3c:	4770      	bx	lr
 800fb3e:	bf00      	nop
 800fb40:	00030d40 	.word	0x00030d40

0800fb44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fb44:	b480      	push	{r7}
 800fb46:	b085      	sub	sp, #20
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
 800fb4c:	460b      	mov	r3, r1
 800fb4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb5a:	681a      	ldr	r2, [r3, #0]
 800fb5c:	78fb      	ldrb	r3, [r7, #3]
 800fb5e:	68f9      	ldr	r1, [r7, #12]
 800fb60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fb64:	4313      	orrs	r3, r2
 800fb66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fb68:	2300      	movs	r3, #0
}
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	3714      	adds	r7, #20
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb74:	4770      	bx	lr

0800fb76 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800fb76:	b480      	push	{r7}
 800fb78:	b087      	sub	sp, #28
 800fb7a:	af00      	add	r7, sp, #0
 800fb7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fb82:	693b      	ldr	r3, [r7, #16]
 800fb84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb88:	689b      	ldr	r3, [r3, #8]
 800fb8a:	f003 0306 	and.w	r3, r3, #6
 800fb8e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d102      	bne.n	800fb9c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fb96:	2300      	movs	r3, #0
 800fb98:	75fb      	strb	r3, [r7, #23]
 800fb9a:	e00a      	b.n	800fbb2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	2b02      	cmp	r3, #2
 800fba0:	d002      	beq.n	800fba8 <USB_GetDevSpeed+0x32>
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	2b06      	cmp	r3, #6
 800fba6:	d102      	bne.n	800fbae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fba8:	2302      	movs	r3, #2
 800fbaa:	75fb      	strb	r3, [r7, #23]
 800fbac:	e001      	b.n	800fbb2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fbae:	230f      	movs	r3, #15
 800fbb0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fbb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	371c      	adds	r7, #28
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbe:	4770      	bx	lr

0800fbc0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fbc0:	b480      	push	{r7}
 800fbc2:	b085      	sub	sp, #20
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	781b      	ldrb	r3, [r3, #0]
 800fbd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	785b      	ldrb	r3, [r3, #1]
 800fbd8:	2b01      	cmp	r3, #1
 800fbda:	d13a      	bne.n	800fc52 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbe2:	69da      	ldr	r2, [r3, #28]
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	781b      	ldrb	r3, [r3, #0]
 800fbe8:	f003 030f 	and.w	r3, r3, #15
 800fbec:	2101      	movs	r1, #1
 800fbee:	fa01 f303 	lsl.w	r3, r1, r3
 800fbf2:	b29b      	uxth	r3, r3
 800fbf4:	68f9      	ldr	r1, [r7, #12]
 800fbf6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fbfa:	4313      	orrs	r3, r2
 800fbfc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800fbfe:	68bb      	ldr	r3, [r7, #8]
 800fc00:	015a      	lsls	r2, r3, #5
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	4413      	add	r3, r2
 800fc06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d155      	bne.n	800fcc0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	015a      	lsls	r2, r3, #5
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	4413      	add	r3, r2
 800fc1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc20:	681a      	ldr	r2, [r3, #0]
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	689b      	ldr	r3, [r3, #8]
 800fc26:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	78db      	ldrb	r3, [r3, #3]
 800fc2e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fc30:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fc32:	68bb      	ldr	r3, [r7, #8]
 800fc34:	059b      	lsls	r3, r3, #22
 800fc36:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fc38:	4313      	orrs	r3, r2
 800fc3a:	68ba      	ldr	r2, [r7, #8]
 800fc3c:	0151      	lsls	r1, r2, #5
 800fc3e:	68fa      	ldr	r2, [r7, #12]
 800fc40:	440a      	add	r2, r1
 800fc42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fc4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fc4e:	6013      	str	r3, [r2, #0]
 800fc50:	e036      	b.n	800fcc0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc58:	69da      	ldr	r2, [r3, #28]
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	781b      	ldrb	r3, [r3, #0]
 800fc5e:	f003 030f 	and.w	r3, r3, #15
 800fc62:	2101      	movs	r1, #1
 800fc64:	fa01 f303 	lsl.w	r3, r1, r3
 800fc68:	041b      	lsls	r3, r3, #16
 800fc6a:	68f9      	ldr	r1, [r7, #12]
 800fc6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fc70:	4313      	orrs	r3, r2
 800fc72:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800fc74:	68bb      	ldr	r3, [r7, #8]
 800fc76:	015a      	lsls	r2, r3, #5
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	4413      	add	r3, r2
 800fc7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d11a      	bne.n	800fcc0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fc8a:	68bb      	ldr	r3, [r7, #8]
 800fc8c:	015a      	lsls	r2, r3, #5
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	4413      	add	r3, r2
 800fc92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc96:	681a      	ldr	r2, [r3, #0]
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	689b      	ldr	r3, [r3, #8]
 800fc9c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	78db      	ldrb	r3, [r3, #3]
 800fca4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fca6:	430b      	orrs	r3, r1
 800fca8:	4313      	orrs	r3, r2
 800fcaa:	68ba      	ldr	r2, [r7, #8]
 800fcac:	0151      	lsls	r1, r2, #5
 800fcae:	68fa      	ldr	r2, [r7, #12]
 800fcb0:	440a      	add	r2, r1
 800fcb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fcb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fcba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fcbe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800fcc0:	2300      	movs	r3, #0
}
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	3714      	adds	r7, #20
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fccc:	4770      	bx	lr
	...

0800fcd0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fcd0:	b480      	push	{r7}
 800fcd2:	b085      	sub	sp, #20
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
 800fcd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	781b      	ldrb	r3, [r3, #0]
 800fce2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	785b      	ldrb	r3, [r3, #1]
 800fce8:	2b01      	cmp	r3, #1
 800fcea:	d161      	bne.n	800fdb0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	015a      	lsls	r2, r3, #5
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	4413      	add	r3, r2
 800fcf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fcfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fd02:	d11f      	bne.n	800fd44 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	015a      	lsls	r2, r3, #5
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	4413      	add	r3, r2
 800fd0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	68ba      	ldr	r2, [r7, #8]
 800fd14:	0151      	lsls	r1, r2, #5
 800fd16:	68fa      	ldr	r2, [r7, #12]
 800fd18:	440a      	add	r2, r1
 800fd1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fd22:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	015a      	lsls	r2, r3, #5
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	4413      	add	r3, r2
 800fd2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	68ba      	ldr	r2, [r7, #8]
 800fd34:	0151      	lsls	r1, r2, #5
 800fd36:	68fa      	ldr	r2, [r7, #12]
 800fd38:	440a      	add	r2, r1
 800fd3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fd42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	781b      	ldrb	r3, [r3, #0]
 800fd50:	f003 030f 	and.w	r3, r3, #15
 800fd54:	2101      	movs	r1, #1
 800fd56:	fa01 f303 	lsl.w	r3, r1, r3
 800fd5a:	b29b      	uxth	r3, r3
 800fd5c:	43db      	mvns	r3, r3
 800fd5e:	68f9      	ldr	r1, [r7, #12]
 800fd60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd64:	4013      	ands	r3, r2
 800fd66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd6e:	69da      	ldr	r2, [r3, #28]
 800fd70:	683b      	ldr	r3, [r7, #0]
 800fd72:	781b      	ldrb	r3, [r3, #0]
 800fd74:	f003 030f 	and.w	r3, r3, #15
 800fd78:	2101      	movs	r1, #1
 800fd7a:	fa01 f303 	lsl.w	r3, r1, r3
 800fd7e:	b29b      	uxth	r3, r3
 800fd80:	43db      	mvns	r3, r3
 800fd82:	68f9      	ldr	r1, [r7, #12]
 800fd84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd88:	4013      	ands	r3, r2
 800fd8a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	015a      	lsls	r2, r3, #5
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	4413      	add	r3, r2
 800fd94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd98:	681a      	ldr	r2, [r3, #0]
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	0159      	lsls	r1, r3, #5
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	440b      	add	r3, r1
 800fda2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fda6:	4619      	mov	r1, r3
 800fda8:	4b35      	ldr	r3, [pc, #212]	; (800fe80 <USB_DeactivateEndpoint+0x1b0>)
 800fdaa:	4013      	ands	r3, r2
 800fdac:	600b      	str	r3, [r1, #0]
 800fdae:	e060      	b.n	800fe72 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fdb0:	68bb      	ldr	r3, [r7, #8]
 800fdb2:	015a      	lsls	r2, r3, #5
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	4413      	add	r3, r2
 800fdb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fdc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fdc6:	d11f      	bne.n	800fe08 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800fdc8:	68bb      	ldr	r3, [r7, #8]
 800fdca:	015a      	lsls	r2, r3, #5
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	4413      	add	r3, r2
 800fdd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	68ba      	ldr	r2, [r7, #8]
 800fdd8:	0151      	lsls	r1, r2, #5
 800fdda:	68fa      	ldr	r2, [r7, #12]
 800fddc:	440a      	add	r2, r1
 800fdde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fde2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fde6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800fde8:	68bb      	ldr	r3, [r7, #8]
 800fdea:	015a      	lsls	r2, r3, #5
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	4413      	add	r3, r2
 800fdf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	68ba      	ldr	r2, [r7, #8]
 800fdf8:	0151      	lsls	r1, r2, #5
 800fdfa:	68fa      	ldr	r2, [r7, #12]
 800fdfc:	440a      	add	r2, r1
 800fdfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fe06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	781b      	ldrb	r3, [r3, #0]
 800fe14:	f003 030f 	and.w	r3, r3, #15
 800fe18:	2101      	movs	r1, #1
 800fe1a:	fa01 f303 	lsl.w	r3, r1, r3
 800fe1e:	041b      	lsls	r3, r3, #16
 800fe20:	43db      	mvns	r3, r3
 800fe22:	68f9      	ldr	r1, [r7, #12]
 800fe24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe28:	4013      	ands	r3, r2
 800fe2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe32:	69da      	ldr	r2, [r3, #28]
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	781b      	ldrb	r3, [r3, #0]
 800fe38:	f003 030f 	and.w	r3, r3, #15
 800fe3c:	2101      	movs	r1, #1
 800fe3e:	fa01 f303 	lsl.w	r3, r1, r3
 800fe42:	041b      	lsls	r3, r3, #16
 800fe44:	43db      	mvns	r3, r3
 800fe46:	68f9      	ldr	r1, [r7, #12]
 800fe48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe4c:	4013      	ands	r3, r2
 800fe4e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	015a      	lsls	r2, r3, #5
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	4413      	add	r3, r2
 800fe58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe5c:	681a      	ldr	r2, [r3, #0]
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	0159      	lsls	r1, r3, #5
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	440b      	add	r3, r1
 800fe66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe6a:	4619      	mov	r1, r3
 800fe6c:	4b05      	ldr	r3, [pc, #20]	; (800fe84 <USB_DeactivateEndpoint+0x1b4>)
 800fe6e:	4013      	ands	r3, r2
 800fe70:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800fe72:	2300      	movs	r3, #0
}
 800fe74:	4618      	mov	r0, r3
 800fe76:	3714      	adds	r7, #20
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7e:	4770      	bx	lr
 800fe80:	ec337800 	.word	0xec337800
 800fe84:	eff37800 	.word	0xeff37800

0800fe88 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b08a      	sub	sp, #40	; 0x28
 800fe8c:	af02      	add	r7, sp, #8
 800fe8e:	60f8      	str	r0, [r7, #12]
 800fe90:	60b9      	str	r1, [r7, #8]
 800fe92:	4613      	mov	r3, r2
 800fe94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800fe9a:	68bb      	ldr	r3, [r7, #8]
 800fe9c:	781b      	ldrb	r3, [r3, #0]
 800fe9e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fea0:	68bb      	ldr	r3, [r7, #8]
 800fea2:	785b      	ldrb	r3, [r3, #1]
 800fea4:	2b01      	cmp	r3, #1
 800fea6:	f040 815c 	bne.w	8010162 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800feaa:	68bb      	ldr	r3, [r7, #8]
 800feac:	695b      	ldr	r3, [r3, #20]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d132      	bne.n	800ff18 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800feb2:	69bb      	ldr	r3, [r7, #24]
 800feb4:	015a      	lsls	r2, r3, #5
 800feb6:	69fb      	ldr	r3, [r7, #28]
 800feb8:	4413      	add	r3, r2
 800feba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800febe:	691b      	ldr	r3, [r3, #16]
 800fec0:	69ba      	ldr	r2, [r7, #24]
 800fec2:	0151      	lsls	r1, r2, #5
 800fec4:	69fa      	ldr	r2, [r7, #28]
 800fec6:	440a      	add	r2, r1
 800fec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fecc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fed0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fed4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fed6:	69bb      	ldr	r3, [r7, #24]
 800fed8:	015a      	lsls	r2, r3, #5
 800feda:	69fb      	ldr	r3, [r7, #28]
 800fedc:	4413      	add	r3, r2
 800fede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fee2:	691b      	ldr	r3, [r3, #16]
 800fee4:	69ba      	ldr	r2, [r7, #24]
 800fee6:	0151      	lsls	r1, r2, #5
 800fee8:	69fa      	ldr	r2, [r7, #28]
 800feea:	440a      	add	r2, r1
 800feec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fef0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fef4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fef6:	69bb      	ldr	r3, [r7, #24]
 800fef8:	015a      	lsls	r2, r3, #5
 800fefa:	69fb      	ldr	r3, [r7, #28]
 800fefc:	4413      	add	r3, r2
 800fefe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff02:	691b      	ldr	r3, [r3, #16]
 800ff04:	69ba      	ldr	r2, [r7, #24]
 800ff06:	0151      	lsls	r1, r2, #5
 800ff08:	69fa      	ldr	r2, [r7, #28]
 800ff0a:	440a      	add	r2, r1
 800ff0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff10:	0cdb      	lsrs	r3, r3, #19
 800ff12:	04db      	lsls	r3, r3, #19
 800ff14:	6113      	str	r3, [r2, #16]
 800ff16:	e074      	b.n	8010002 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ff18:	69bb      	ldr	r3, [r7, #24]
 800ff1a:	015a      	lsls	r2, r3, #5
 800ff1c:	69fb      	ldr	r3, [r7, #28]
 800ff1e:	4413      	add	r3, r2
 800ff20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff24:	691b      	ldr	r3, [r3, #16]
 800ff26:	69ba      	ldr	r2, [r7, #24]
 800ff28:	0151      	lsls	r1, r2, #5
 800ff2a:	69fa      	ldr	r2, [r7, #28]
 800ff2c:	440a      	add	r2, r1
 800ff2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff32:	0cdb      	lsrs	r3, r3, #19
 800ff34:	04db      	lsls	r3, r3, #19
 800ff36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ff38:	69bb      	ldr	r3, [r7, #24]
 800ff3a:	015a      	lsls	r2, r3, #5
 800ff3c:	69fb      	ldr	r3, [r7, #28]
 800ff3e:	4413      	add	r3, r2
 800ff40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff44:	691b      	ldr	r3, [r3, #16]
 800ff46:	69ba      	ldr	r2, [r7, #24]
 800ff48:	0151      	lsls	r1, r2, #5
 800ff4a:	69fa      	ldr	r2, [r7, #28]
 800ff4c:	440a      	add	r2, r1
 800ff4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ff56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ff5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ff5c:	69bb      	ldr	r3, [r7, #24]
 800ff5e:	015a      	lsls	r2, r3, #5
 800ff60:	69fb      	ldr	r3, [r7, #28]
 800ff62:	4413      	add	r3, r2
 800ff64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff68:	691a      	ldr	r2, [r3, #16]
 800ff6a:	68bb      	ldr	r3, [r7, #8]
 800ff6c:	6959      	ldr	r1, [r3, #20]
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	689b      	ldr	r3, [r3, #8]
 800ff72:	440b      	add	r3, r1
 800ff74:	1e59      	subs	r1, r3, #1
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	689b      	ldr	r3, [r3, #8]
 800ff7a:	fbb1 f3f3 	udiv	r3, r1, r3
 800ff7e:	04d9      	lsls	r1, r3, #19
 800ff80:	4b9d      	ldr	r3, [pc, #628]	; (80101f8 <USB_EPStartXfer+0x370>)
 800ff82:	400b      	ands	r3, r1
 800ff84:	69b9      	ldr	r1, [r7, #24]
 800ff86:	0148      	lsls	r0, r1, #5
 800ff88:	69f9      	ldr	r1, [r7, #28]
 800ff8a:	4401      	add	r1, r0
 800ff8c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ff90:	4313      	orrs	r3, r2
 800ff92:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ff94:	69bb      	ldr	r3, [r7, #24]
 800ff96:	015a      	lsls	r2, r3, #5
 800ff98:	69fb      	ldr	r3, [r7, #28]
 800ff9a:	4413      	add	r3, r2
 800ff9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffa0:	691a      	ldr	r2, [r3, #16]
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	695b      	ldr	r3, [r3, #20]
 800ffa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ffaa:	69b9      	ldr	r1, [r7, #24]
 800ffac:	0148      	lsls	r0, r1, #5
 800ffae:	69f9      	ldr	r1, [r7, #28]
 800ffb0:	4401      	add	r1, r0
 800ffb2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ffb6:	4313      	orrs	r3, r2
 800ffb8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	78db      	ldrb	r3, [r3, #3]
 800ffbe:	2b01      	cmp	r3, #1
 800ffc0:	d11f      	bne.n	8010002 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ffc2:	69bb      	ldr	r3, [r7, #24]
 800ffc4:	015a      	lsls	r2, r3, #5
 800ffc6:	69fb      	ldr	r3, [r7, #28]
 800ffc8:	4413      	add	r3, r2
 800ffca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffce:	691b      	ldr	r3, [r3, #16]
 800ffd0:	69ba      	ldr	r2, [r7, #24]
 800ffd2:	0151      	lsls	r1, r2, #5
 800ffd4:	69fa      	ldr	r2, [r7, #28]
 800ffd6:	440a      	add	r2, r1
 800ffd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffdc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ffe0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ffe2:	69bb      	ldr	r3, [r7, #24]
 800ffe4:	015a      	lsls	r2, r3, #5
 800ffe6:	69fb      	ldr	r3, [r7, #28]
 800ffe8:	4413      	add	r3, r2
 800ffea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffee:	691b      	ldr	r3, [r3, #16]
 800fff0:	69ba      	ldr	r2, [r7, #24]
 800fff2:	0151      	lsls	r1, r2, #5
 800fff4:	69fa      	ldr	r2, [r7, #28]
 800fff6:	440a      	add	r2, r1
 800fff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fffc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010000:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8010002:	79fb      	ldrb	r3, [r7, #7]
 8010004:	2b01      	cmp	r3, #1
 8010006:	d14b      	bne.n	80100a0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	691b      	ldr	r3, [r3, #16]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d009      	beq.n	8010024 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010010:	69bb      	ldr	r3, [r7, #24]
 8010012:	015a      	lsls	r2, r3, #5
 8010014:	69fb      	ldr	r3, [r7, #28]
 8010016:	4413      	add	r3, r2
 8010018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801001c:	461a      	mov	r2, r3
 801001e:	68bb      	ldr	r3, [r7, #8]
 8010020:	691b      	ldr	r3, [r3, #16]
 8010022:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	78db      	ldrb	r3, [r3, #3]
 8010028:	2b01      	cmp	r3, #1
 801002a:	d128      	bne.n	801007e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801002c:	69fb      	ldr	r3, [r7, #28]
 801002e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010032:	689b      	ldr	r3, [r3, #8]
 8010034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010038:	2b00      	cmp	r3, #0
 801003a:	d110      	bne.n	801005e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801003c:	69bb      	ldr	r3, [r7, #24]
 801003e:	015a      	lsls	r2, r3, #5
 8010040:	69fb      	ldr	r3, [r7, #28]
 8010042:	4413      	add	r3, r2
 8010044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	69ba      	ldr	r2, [r7, #24]
 801004c:	0151      	lsls	r1, r2, #5
 801004e:	69fa      	ldr	r2, [r7, #28]
 8010050:	440a      	add	r2, r1
 8010052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010056:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801005a:	6013      	str	r3, [r2, #0]
 801005c:	e00f      	b.n	801007e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801005e:	69bb      	ldr	r3, [r7, #24]
 8010060:	015a      	lsls	r2, r3, #5
 8010062:	69fb      	ldr	r3, [r7, #28]
 8010064:	4413      	add	r3, r2
 8010066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	69ba      	ldr	r2, [r7, #24]
 801006e:	0151      	lsls	r1, r2, #5
 8010070:	69fa      	ldr	r2, [r7, #28]
 8010072:	440a      	add	r2, r1
 8010074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801007c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801007e:	69bb      	ldr	r3, [r7, #24]
 8010080:	015a      	lsls	r2, r3, #5
 8010082:	69fb      	ldr	r3, [r7, #28]
 8010084:	4413      	add	r3, r2
 8010086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	69ba      	ldr	r2, [r7, #24]
 801008e:	0151      	lsls	r1, r2, #5
 8010090:	69fa      	ldr	r2, [r7, #28]
 8010092:	440a      	add	r2, r1
 8010094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010098:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801009c:	6013      	str	r3, [r2, #0]
 801009e:	e12f      	b.n	8010300 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80100a0:	69bb      	ldr	r3, [r7, #24]
 80100a2:	015a      	lsls	r2, r3, #5
 80100a4:	69fb      	ldr	r3, [r7, #28]
 80100a6:	4413      	add	r3, r2
 80100a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	69ba      	ldr	r2, [r7, #24]
 80100b0:	0151      	lsls	r1, r2, #5
 80100b2:	69fa      	ldr	r2, [r7, #28]
 80100b4:	440a      	add	r2, r1
 80100b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80100be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80100c0:	68bb      	ldr	r3, [r7, #8]
 80100c2:	78db      	ldrb	r3, [r3, #3]
 80100c4:	2b01      	cmp	r3, #1
 80100c6:	d015      	beq.n	80100f4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	695b      	ldr	r3, [r3, #20]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	f000 8117 	beq.w	8010300 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80100d2:	69fb      	ldr	r3, [r7, #28]
 80100d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	781b      	ldrb	r3, [r3, #0]
 80100de:	f003 030f 	and.w	r3, r3, #15
 80100e2:	2101      	movs	r1, #1
 80100e4:	fa01 f303 	lsl.w	r3, r1, r3
 80100e8:	69f9      	ldr	r1, [r7, #28]
 80100ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80100ee:	4313      	orrs	r3, r2
 80100f0:	634b      	str	r3, [r1, #52]	; 0x34
 80100f2:	e105      	b.n	8010300 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80100f4:	69fb      	ldr	r3, [r7, #28]
 80100f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100fa:	689b      	ldr	r3, [r3, #8]
 80100fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010100:	2b00      	cmp	r3, #0
 8010102:	d110      	bne.n	8010126 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010104:	69bb      	ldr	r3, [r7, #24]
 8010106:	015a      	lsls	r2, r3, #5
 8010108:	69fb      	ldr	r3, [r7, #28]
 801010a:	4413      	add	r3, r2
 801010c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	69ba      	ldr	r2, [r7, #24]
 8010114:	0151      	lsls	r1, r2, #5
 8010116:	69fa      	ldr	r2, [r7, #28]
 8010118:	440a      	add	r2, r1
 801011a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801011e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010122:	6013      	str	r3, [r2, #0]
 8010124:	e00f      	b.n	8010146 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010126:	69bb      	ldr	r3, [r7, #24]
 8010128:	015a      	lsls	r2, r3, #5
 801012a:	69fb      	ldr	r3, [r7, #28]
 801012c:	4413      	add	r3, r2
 801012e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	69ba      	ldr	r2, [r7, #24]
 8010136:	0151      	lsls	r1, r2, #5
 8010138:	69fa      	ldr	r2, [r7, #28]
 801013a:	440a      	add	r2, r1
 801013c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010144:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	68d9      	ldr	r1, [r3, #12]
 801014a:	68bb      	ldr	r3, [r7, #8]
 801014c:	781a      	ldrb	r2, [r3, #0]
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	695b      	ldr	r3, [r3, #20]
 8010152:	b298      	uxth	r0, r3
 8010154:	79fb      	ldrb	r3, [r7, #7]
 8010156:	9300      	str	r3, [sp, #0]
 8010158:	4603      	mov	r3, r0
 801015a:	68f8      	ldr	r0, [r7, #12]
 801015c:	f000 fa2b 	bl	80105b6 <USB_WritePacket>
 8010160:	e0ce      	b.n	8010300 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010162:	69bb      	ldr	r3, [r7, #24]
 8010164:	015a      	lsls	r2, r3, #5
 8010166:	69fb      	ldr	r3, [r7, #28]
 8010168:	4413      	add	r3, r2
 801016a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801016e:	691b      	ldr	r3, [r3, #16]
 8010170:	69ba      	ldr	r2, [r7, #24]
 8010172:	0151      	lsls	r1, r2, #5
 8010174:	69fa      	ldr	r2, [r7, #28]
 8010176:	440a      	add	r2, r1
 8010178:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801017c:	0cdb      	lsrs	r3, r3, #19
 801017e:	04db      	lsls	r3, r3, #19
 8010180:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010182:	69bb      	ldr	r3, [r7, #24]
 8010184:	015a      	lsls	r2, r3, #5
 8010186:	69fb      	ldr	r3, [r7, #28]
 8010188:	4413      	add	r3, r2
 801018a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801018e:	691b      	ldr	r3, [r3, #16]
 8010190:	69ba      	ldr	r2, [r7, #24]
 8010192:	0151      	lsls	r1, r2, #5
 8010194:	69fa      	ldr	r2, [r7, #28]
 8010196:	440a      	add	r2, r1
 8010198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801019c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80101a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80101a4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80101a6:	68bb      	ldr	r3, [r7, #8]
 80101a8:	695b      	ldr	r3, [r3, #20]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d126      	bne.n	80101fc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80101ae:	69bb      	ldr	r3, [r7, #24]
 80101b0:	015a      	lsls	r2, r3, #5
 80101b2:	69fb      	ldr	r3, [r7, #28]
 80101b4:	4413      	add	r3, r2
 80101b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101ba:	691a      	ldr	r2, [r3, #16]
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	689b      	ldr	r3, [r3, #8]
 80101c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80101c4:	69b9      	ldr	r1, [r7, #24]
 80101c6:	0148      	lsls	r0, r1, #5
 80101c8:	69f9      	ldr	r1, [r7, #28]
 80101ca:	4401      	add	r1, r0
 80101cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80101d0:	4313      	orrs	r3, r2
 80101d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80101d4:	69bb      	ldr	r3, [r7, #24]
 80101d6:	015a      	lsls	r2, r3, #5
 80101d8:	69fb      	ldr	r3, [r7, #28]
 80101da:	4413      	add	r3, r2
 80101dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101e0:	691b      	ldr	r3, [r3, #16]
 80101e2:	69ba      	ldr	r2, [r7, #24]
 80101e4:	0151      	lsls	r1, r2, #5
 80101e6:	69fa      	ldr	r2, [r7, #28]
 80101e8:	440a      	add	r2, r1
 80101ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80101ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80101f2:	6113      	str	r3, [r2, #16]
 80101f4:	e036      	b.n	8010264 <USB_EPStartXfer+0x3dc>
 80101f6:	bf00      	nop
 80101f8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80101fc:	68bb      	ldr	r3, [r7, #8]
 80101fe:	695a      	ldr	r2, [r3, #20]
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	689b      	ldr	r3, [r3, #8]
 8010204:	4413      	add	r3, r2
 8010206:	1e5a      	subs	r2, r3, #1
 8010208:	68bb      	ldr	r3, [r7, #8]
 801020a:	689b      	ldr	r3, [r3, #8]
 801020c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010210:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010212:	69bb      	ldr	r3, [r7, #24]
 8010214:	015a      	lsls	r2, r3, #5
 8010216:	69fb      	ldr	r3, [r7, #28]
 8010218:	4413      	add	r3, r2
 801021a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801021e:	691a      	ldr	r2, [r3, #16]
 8010220:	8afb      	ldrh	r3, [r7, #22]
 8010222:	04d9      	lsls	r1, r3, #19
 8010224:	4b39      	ldr	r3, [pc, #228]	; (801030c <USB_EPStartXfer+0x484>)
 8010226:	400b      	ands	r3, r1
 8010228:	69b9      	ldr	r1, [r7, #24]
 801022a:	0148      	lsls	r0, r1, #5
 801022c:	69f9      	ldr	r1, [r7, #28]
 801022e:	4401      	add	r1, r0
 8010230:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010234:	4313      	orrs	r3, r2
 8010236:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8010238:	69bb      	ldr	r3, [r7, #24]
 801023a:	015a      	lsls	r2, r3, #5
 801023c:	69fb      	ldr	r3, [r7, #28]
 801023e:	4413      	add	r3, r2
 8010240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010244:	691a      	ldr	r2, [r3, #16]
 8010246:	68bb      	ldr	r3, [r7, #8]
 8010248:	689b      	ldr	r3, [r3, #8]
 801024a:	8af9      	ldrh	r1, [r7, #22]
 801024c:	fb01 f303 	mul.w	r3, r1, r3
 8010250:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010254:	69b9      	ldr	r1, [r7, #24]
 8010256:	0148      	lsls	r0, r1, #5
 8010258:	69f9      	ldr	r1, [r7, #28]
 801025a:	4401      	add	r1, r0
 801025c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010260:	4313      	orrs	r3, r2
 8010262:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010264:	79fb      	ldrb	r3, [r7, #7]
 8010266:	2b01      	cmp	r3, #1
 8010268:	d10d      	bne.n	8010286 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	68db      	ldr	r3, [r3, #12]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d009      	beq.n	8010286 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	68d9      	ldr	r1, [r3, #12]
 8010276:	69bb      	ldr	r3, [r7, #24]
 8010278:	015a      	lsls	r2, r3, #5
 801027a:	69fb      	ldr	r3, [r7, #28]
 801027c:	4413      	add	r3, r2
 801027e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010282:	460a      	mov	r2, r1
 8010284:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	78db      	ldrb	r3, [r3, #3]
 801028a:	2b01      	cmp	r3, #1
 801028c:	d128      	bne.n	80102e0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801028e:	69fb      	ldr	r3, [r7, #28]
 8010290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010294:	689b      	ldr	r3, [r3, #8]
 8010296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801029a:	2b00      	cmp	r3, #0
 801029c:	d110      	bne.n	80102c0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801029e:	69bb      	ldr	r3, [r7, #24]
 80102a0:	015a      	lsls	r2, r3, #5
 80102a2:	69fb      	ldr	r3, [r7, #28]
 80102a4:	4413      	add	r3, r2
 80102a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	69ba      	ldr	r2, [r7, #24]
 80102ae:	0151      	lsls	r1, r2, #5
 80102b0:	69fa      	ldr	r2, [r7, #28]
 80102b2:	440a      	add	r2, r1
 80102b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80102bc:	6013      	str	r3, [r2, #0]
 80102be:	e00f      	b.n	80102e0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80102c0:	69bb      	ldr	r3, [r7, #24]
 80102c2:	015a      	lsls	r2, r3, #5
 80102c4:	69fb      	ldr	r3, [r7, #28]
 80102c6:	4413      	add	r3, r2
 80102c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	69ba      	ldr	r2, [r7, #24]
 80102d0:	0151      	lsls	r1, r2, #5
 80102d2:	69fa      	ldr	r2, [r7, #28]
 80102d4:	440a      	add	r2, r1
 80102d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80102de:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80102e0:	69bb      	ldr	r3, [r7, #24]
 80102e2:	015a      	lsls	r2, r3, #5
 80102e4:	69fb      	ldr	r3, [r7, #28]
 80102e6:	4413      	add	r3, r2
 80102e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	69ba      	ldr	r2, [r7, #24]
 80102f0:	0151      	lsls	r1, r2, #5
 80102f2:	69fa      	ldr	r2, [r7, #28]
 80102f4:	440a      	add	r2, r1
 80102f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80102fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010300:	2300      	movs	r3, #0
}
 8010302:	4618      	mov	r0, r3
 8010304:	3720      	adds	r7, #32
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}
 801030a:	bf00      	nop
 801030c:	1ff80000 	.word	0x1ff80000

08010310 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010310:	b480      	push	{r7}
 8010312:	b087      	sub	sp, #28
 8010314:	af00      	add	r7, sp, #0
 8010316:	60f8      	str	r0, [r7, #12]
 8010318:	60b9      	str	r1, [r7, #8]
 801031a:	4613      	mov	r3, r2
 801031c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8010322:	68bb      	ldr	r3, [r7, #8]
 8010324:	781b      	ldrb	r3, [r3, #0]
 8010326:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	785b      	ldrb	r3, [r3, #1]
 801032c:	2b01      	cmp	r3, #1
 801032e:	f040 80cd 	bne.w	80104cc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010332:	68bb      	ldr	r3, [r7, #8]
 8010334:	695b      	ldr	r3, [r3, #20]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d132      	bne.n	80103a0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801033a:	693b      	ldr	r3, [r7, #16]
 801033c:	015a      	lsls	r2, r3, #5
 801033e:	697b      	ldr	r3, [r7, #20]
 8010340:	4413      	add	r3, r2
 8010342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010346:	691b      	ldr	r3, [r3, #16]
 8010348:	693a      	ldr	r2, [r7, #16]
 801034a:	0151      	lsls	r1, r2, #5
 801034c:	697a      	ldr	r2, [r7, #20]
 801034e:	440a      	add	r2, r1
 8010350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010354:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010358:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801035c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801035e:	693b      	ldr	r3, [r7, #16]
 8010360:	015a      	lsls	r2, r3, #5
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	4413      	add	r3, r2
 8010366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801036a:	691b      	ldr	r3, [r3, #16]
 801036c:	693a      	ldr	r2, [r7, #16]
 801036e:	0151      	lsls	r1, r2, #5
 8010370:	697a      	ldr	r2, [r7, #20]
 8010372:	440a      	add	r2, r1
 8010374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010378:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801037c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801037e:	693b      	ldr	r3, [r7, #16]
 8010380:	015a      	lsls	r2, r3, #5
 8010382:	697b      	ldr	r3, [r7, #20]
 8010384:	4413      	add	r3, r2
 8010386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801038a:	691b      	ldr	r3, [r3, #16]
 801038c:	693a      	ldr	r2, [r7, #16]
 801038e:	0151      	lsls	r1, r2, #5
 8010390:	697a      	ldr	r2, [r7, #20]
 8010392:	440a      	add	r2, r1
 8010394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010398:	0cdb      	lsrs	r3, r3, #19
 801039a:	04db      	lsls	r3, r3, #19
 801039c:	6113      	str	r3, [r2, #16]
 801039e:	e04e      	b.n	801043e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80103a0:	693b      	ldr	r3, [r7, #16]
 80103a2:	015a      	lsls	r2, r3, #5
 80103a4:	697b      	ldr	r3, [r7, #20]
 80103a6:	4413      	add	r3, r2
 80103a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103ac:	691b      	ldr	r3, [r3, #16]
 80103ae:	693a      	ldr	r2, [r7, #16]
 80103b0:	0151      	lsls	r1, r2, #5
 80103b2:	697a      	ldr	r2, [r7, #20]
 80103b4:	440a      	add	r2, r1
 80103b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103ba:	0cdb      	lsrs	r3, r3, #19
 80103bc:	04db      	lsls	r3, r3, #19
 80103be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80103c0:	693b      	ldr	r3, [r7, #16]
 80103c2:	015a      	lsls	r2, r3, #5
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	4413      	add	r3, r2
 80103c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103cc:	691b      	ldr	r3, [r3, #16]
 80103ce:	693a      	ldr	r2, [r7, #16]
 80103d0:	0151      	lsls	r1, r2, #5
 80103d2:	697a      	ldr	r2, [r7, #20]
 80103d4:	440a      	add	r2, r1
 80103d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80103de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80103e2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80103e4:	68bb      	ldr	r3, [r7, #8]
 80103e6:	695a      	ldr	r2, [r3, #20]
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	689b      	ldr	r3, [r3, #8]
 80103ec:	429a      	cmp	r2, r3
 80103ee:	d903      	bls.n	80103f8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	689a      	ldr	r2, [r3, #8]
 80103f4:	68bb      	ldr	r3, [r7, #8]
 80103f6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80103f8:	693b      	ldr	r3, [r7, #16]
 80103fa:	015a      	lsls	r2, r3, #5
 80103fc:	697b      	ldr	r3, [r7, #20]
 80103fe:	4413      	add	r3, r2
 8010400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010404:	691b      	ldr	r3, [r3, #16]
 8010406:	693a      	ldr	r2, [r7, #16]
 8010408:	0151      	lsls	r1, r2, #5
 801040a:	697a      	ldr	r2, [r7, #20]
 801040c:	440a      	add	r2, r1
 801040e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010412:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010416:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010418:	693b      	ldr	r3, [r7, #16]
 801041a:	015a      	lsls	r2, r3, #5
 801041c:	697b      	ldr	r3, [r7, #20]
 801041e:	4413      	add	r3, r2
 8010420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010424:	691a      	ldr	r2, [r3, #16]
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	695b      	ldr	r3, [r3, #20]
 801042a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801042e:	6939      	ldr	r1, [r7, #16]
 8010430:	0148      	lsls	r0, r1, #5
 8010432:	6979      	ldr	r1, [r7, #20]
 8010434:	4401      	add	r1, r0
 8010436:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801043a:	4313      	orrs	r3, r2
 801043c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801043e:	79fb      	ldrb	r3, [r7, #7]
 8010440:	2b01      	cmp	r3, #1
 8010442:	d11e      	bne.n	8010482 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	691b      	ldr	r3, [r3, #16]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d009      	beq.n	8010460 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801044c:	693b      	ldr	r3, [r7, #16]
 801044e:	015a      	lsls	r2, r3, #5
 8010450:	697b      	ldr	r3, [r7, #20]
 8010452:	4413      	add	r3, r2
 8010454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010458:	461a      	mov	r2, r3
 801045a:	68bb      	ldr	r3, [r7, #8]
 801045c:	691b      	ldr	r3, [r3, #16]
 801045e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010460:	693b      	ldr	r3, [r7, #16]
 8010462:	015a      	lsls	r2, r3, #5
 8010464:	697b      	ldr	r3, [r7, #20]
 8010466:	4413      	add	r3, r2
 8010468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	693a      	ldr	r2, [r7, #16]
 8010470:	0151      	lsls	r1, r2, #5
 8010472:	697a      	ldr	r2, [r7, #20]
 8010474:	440a      	add	r2, r1
 8010476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801047a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801047e:	6013      	str	r3, [r2, #0]
 8010480:	e092      	b.n	80105a8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010482:	693b      	ldr	r3, [r7, #16]
 8010484:	015a      	lsls	r2, r3, #5
 8010486:	697b      	ldr	r3, [r7, #20]
 8010488:	4413      	add	r3, r2
 801048a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	693a      	ldr	r2, [r7, #16]
 8010492:	0151      	lsls	r1, r2, #5
 8010494:	697a      	ldr	r2, [r7, #20]
 8010496:	440a      	add	r2, r1
 8010498:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801049c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80104a0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	695b      	ldr	r3, [r3, #20]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d07e      	beq.n	80105a8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80104aa:	697b      	ldr	r3, [r7, #20]
 80104ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	781b      	ldrb	r3, [r3, #0]
 80104b6:	f003 030f 	and.w	r3, r3, #15
 80104ba:	2101      	movs	r1, #1
 80104bc:	fa01 f303 	lsl.w	r3, r1, r3
 80104c0:	6979      	ldr	r1, [r7, #20]
 80104c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80104c6:	4313      	orrs	r3, r2
 80104c8:	634b      	str	r3, [r1, #52]	; 0x34
 80104ca:	e06d      	b.n	80105a8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80104cc:	693b      	ldr	r3, [r7, #16]
 80104ce:	015a      	lsls	r2, r3, #5
 80104d0:	697b      	ldr	r3, [r7, #20]
 80104d2:	4413      	add	r3, r2
 80104d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104d8:	691b      	ldr	r3, [r3, #16]
 80104da:	693a      	ldr	r2, [r7, #16]
 80104dc:	0151      	lsls	r1, r2, #5
 80104de:	697a      	ldr	r2, [r7, #20]
 80104e0:	440a      	add	r2, r1
 80104e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80104e6:	0cdb      	lsrs	r3, r3, #19
 80104e8:	04db      	lsls	r3, r3, #19
 80104ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80104ec:	693b      	ldr	r3, [r7, #16]
 80104ee:	015a      	lsls	r2, r3, #5
 80104f0:	697b      	ldr	r3, [r7, #20]
 80104f2:	4413      	add	r3, r2
 80104f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104f8:	691b      	ldr	r3, [r3, #16]
 80104fa:	693a      	ldr	r2, [r7, #16]
 80104fc:	0151      	lsls	r1, r2, #5
 80104fe:	697a      	ldr	r2, [r7, #20]
 8010500:	440a      	add	r2, r1
 8010502:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010506:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801050a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801050e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010510:	68bb      	ldr	r3, [r7, #8]
 8010512:	695b      	ldr	r3, [r3, #20]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d003      	beq.n	8010520 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8010518:	68bb      	ldr	r3, [r7, #8]
 801051a:	689a      	ldr	r2, [r3, #8]
 801051c:	68bb      	ldr	r3, [r7, #8]
 801051e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010520:	693b      	ldr	r3, [r7, #16]
 8010522:	015a      	lsls	r2, r3, #5
 8010524:	697b      	ldr	r3, [r7, #20]
 8010526:	4413      	add	r3, r2
 8010528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801052c:	691b      	ldr	r3, [r3, #16]
 801052e:	693a      	ldr	r2, [r7, #16]
 8010530:	0151      	lsls	r1, r2, #5
 8010532:	697a      	ldr	r2, [r7, #20]
 8010534:	440a      	add	r2, r1
 8010536:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801053a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801053e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8010540:	693b      	ldr	r3, [r7, #16]
 8010542:	015a      	lsls	r2, r3, #5
 8010544:	697b      	ldr	r3, [r7, #20]
 8010546:	4413      	add	r3, r2
 8010548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801054c:	691a      	ldr	r2, [r3, #16]
 801054e:	68bb      	ldr	r3, [r7, #8]
 8010550:	689b      	ldr	r3, [r3, #8]
 8010552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010556:	6939      	ldr	r1, [r7, #16]
 8010558:	0148      	lsls	r0, r1, #5
 801055a:	6979      	ldr	r1, [r7, #20]
 801055c:	4401      	add	r1, r0
 801055e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010562:	4313      	orrs	r3, r2
 8010564:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8010566:	79fb      	ldrb	r3, [r7, #7]
 8010568:	2b01      	cmp	r3, #1
 801056a:	d10d      	bne.n	8010588 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	68db      	ldr	r3, [r3, #12]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d009      	beq.n	8010588 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	68d9      	ldr	r1, [r3, #12]
 8010578:	693b      	ldr	r3, [r7, #16]
 801057a:	015a      	lsls	r2, r3, #5
 801057c:	697b      	ldr	r3, [r7, #20]
 801057e:	4413      	add	r3, r2
 8010580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010584:	460a      	mov	r2, r1
 8010586:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010588:	693b      	ldr	r3, [r7, #16]
 801058a:	015a      	lsls	r2, r3, #5
 801058c:	697b      	ldr	r3, [r7, #20]
 801058e:	4413      	add	r3, r2
 8010590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	693a      	ldr	r2, [r7, #16]
 8010598:	0151      	lsls	r1, r2, #5
 801059a:	697a      	ldr	r2, [r7, #20]
 801059c:	440a      	add	r2, r1
 801059e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80105a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80105a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80105a8:	2300      	movs	r3, #0
}
 80105aa:	4618      	mov	r0, r3
 80105ac:	371c      	adds	r7, #28
 80105ae:	46bd      	mov	sp, r7
 80105b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b4:	4770      	bx	lr

080105b6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80105b6:	b480      	push	{r7}
 80105b8:	b089      	sub	sp, #36	; 0x24
 80105ba:	af00      	add	r7, sp, #0
 80105bc:	60f8      	str	r0, [r7, #12]
 80105be:	60b9      	str	r1, [r7, #8]
 80105c0:	4611      	mov	r1, r2
 80105c2:	461a      	mov	r2, r3
 80105c4:	460b      	mov	r3, r1
 80105c6:	71fb      	strb	r3, [r7, #7]
 80105c8:	4613      	mov	r3, r2
 80105ca:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80105d0:	68bb      	ldr	r3, [r7, #8]
 80105d2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80105d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d11a      	bne.n	8010612 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80105dc:	88bb      	ldrh	r3, [r7, #4]
 80105de:	3303      	adds	r3, #3
 80105e0:	089b      	lsrs	r3, r3, #2
 80105e2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80105e4:	2300      	movs	r3, #0
 80105e6:	61bb      	str	r3, [r7, #24]
 80105e8:	e00f      	b.n	801060a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80105ea:	79fb      	ldrb	r3, [r7, #7]
 80105ec:	031a      	lsls	r2, r3, #12
 80105ee:	697b      	ldr	r3, [r7, #20]
 80105f0:	4413      	add	r3, r2
 80105f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80105f6:	461a      	mov	r2, r3
 80105f8:	69fb      	ldr	r3, [r7, #28]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	6013      	str	r3, [r2, #0]
      pSrc++;
 80105fe:	69fb      	ldr	r3, [r7, #28]
 8010600:	3304      	adds	r3, #4
 8010602:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010604:	69bb      	ldr	r3, [r7, #24]
 8010606:	3301      	adds	r3, #1
 8010608:	61bb      	str	r3, [r7, #24]
 801060a:	69ba      	ldr	r2, [r7, #24]
 801060c:	693b      	ldr	r3, [r7, #16]
 801060e:	429a      	cmp	r2, r3
 8010610:	d3eb      	bcc.n	80105ea <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010612:	2300      	movs	r3, #0
}
 8010614:	4618      	mov	r0, r3
 8010616:	3724      	adds	r7, #36	; 0x24
 8010618:	46bd      	mov	sp, r7
 801061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061e:	4770      	bx	lr

08010620 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010620:	b480      	push	{r7}
 8010622:	b089      	sub	sp, #36	; 0x24
 8010624:	af00      	add	r7, sp, #0
 8010626:	60f8      	str	r0, [r7, #12]
 8010628:	60b9      	str	r1, [r7, #8]
 801062a:	4613      	mov	r3, r2
 801062c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8010632:	68bb      	ldr	r3, [r7, #8]
 8010634:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8010636:	88fb      	ldrh	r3, [r7, #6]
 8010638:	3303      	adds	r3, #3
 801063a:	089b      	lsrs	r3, r3, #2
 801063c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 801063e:	2300      	movs	r3, #0
 8010640:	61bb      	str	r3, [r7, #24]
 8010642:	e00b      	b.n	801065c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010644:	697b      	ldr	r3, [r7, #20]
 8010646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801064a:	681a      	ldr	r2, [r3, #0]
 801064c:	69fb      	ldr	r3, [r7, #28]
 801064e:	601a      	str	r2, [r3, #0]
    pDest++;
 8010650:	69fb      	ldr	r3, [r7, #28]
 8010652:	3304      	adds	r3, #4
 8010654:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8010656:	69bb      	ldr	r3, [r7, #24]
 8010658:	3301      	adds	r3, #1
 801065a:	61bb      	str	r3, [r7, #24]
 801065c:	69ba      	ldr	r2, [r7, #24]
 801065e:	693b      	ldr	r3, [r7, #16]
 8010660:	429a      	cmp	r2, r3
 8010662:	d3ef      	bcc.n	8010644 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8010664:	69fb      	ldr	r3, [r7, #28]
}
 8010666:	4618      	mov	r0, r3
 8010668:	3724      	adds	r7, #36	; 0x24
 801066a:	46bd      	mov	sp, r7
 801066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010670:	4770      	bx	lr

08010672 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010672:	b480      	push	{r7}
 8010674:	b085      	sub	sp, #20
 8010676:	af00      	add	r7, sp, #0
 8010678:	6078      	str	r0, [r7, #4]
 801067a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	781b      	ldrb	r3, [r3, #0]
 8010684:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010686:	683b      	ldr	r3, [r7, #0]
 8010688:	785b      	ldrb	r3, [r3, #1]
 801068a:	2b01      	cmp	r3, #1
 801068c:	d12c      	bne.n	80106e8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	015a      	lsls	r2, r3, #5
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	4413      	add	r3, r2
 8010696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	2b00      	cmp	r3, #0
 801069e:	db12      	blt.n	80106c6 <USB_EPSetStall+0x54>
 80106a0:	68bb      	ldr	r3, [r7, #8]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d00f      	beq.n	80106c6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80106a6:	68bb      	ldr	r3, [r7, #8]
 80106a8:	015a      	lsls	r2, r3, #5
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	4413      	add	r3, r2
 80106ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	68ba      	ldr	r2, [r7, #8]
 80106b6:	0151      	lsls	r1, r2, #5
 80106b8:	68fa      	ldr	r2, [r7, #12]
 80106ba:	440a      	add	r2, r1
 80106bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80106c4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	015a      	lsls	r2, r3, #5
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	4413      	add	r3, r2
 80106ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	68ba      	ldr	r2, [r7, #8]
 80106d6:	0151      	lsls	r1, r2, #5
 80106d8:	68fa      	ldr	r2, [r7, #12]
 80106da:	440a      	add	r2, r1
 80106dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80106e4:	6013      	str	r3, [r2, #0]
 80106e6:	e02b      	b.n	8010740 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80106e8:	68bb      	ldr	r3, [r7, #8]
 80106ea:	015a      	lsls	r2, r3, #5
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	4413      	add	r3, r2
 80106f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	db12      	blt.n	8010720 <USB_EPSetStall+0xae>
 80106fa:	68bb      	ldr	r3, [r7, #8]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d00f      	beq.n	8010720 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	015a      	lsls	r2, r3, #5
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	4413      	add	r3, r2
 8010708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	68ba      	ldr	r2, [r7, #8]
 8010710:	0151      	lsls	r1, r2, #5
 8010712:	68fa      	ldr	r2, [r7, #12]
 8010714:	440a      	add	r2, r1
 8010716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801071a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801071e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010720:	68bb      	ldr	r3, [r7, #8]
 8010722:	015a      	lsls	r2, r3, #5
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	4413      	add	r3, r2
 8010728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	68ba      	ldr	r2, [r7, #8]
 8010730:	0151      	lsls	r1, r2, #5
 8010732:	68fa      	ldr	r2, [r7, #12]
 8010734:	440a      	add	r2, r1
 8010736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801073a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801073e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010740:	2300      	movs	r3, #0
}
 8010742:	4618      	mov	r0, r3
 8010744:	3714      	adds	r7, #20
 8010746:	46bd      	mov	sp, r7
 8010748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074c:	4770      	bx	lr

0801074e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801074e:	b480      	push	{r7}
 8010750:	b085      	sub	sp, #20
 8010752:	af00      	add	r7, sp, #0
 8010754:	6078      	str	r0, [r7, #4]
 8010756:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801075c:	683b      	ldr	r3, [r7, #0]
 801075e:	781b      	ldrb	r3, [r3, #0]
 8010760:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	785b      	ldrb	r3, [r3, #1]
 8010766:	2b01      	cmp	r3, #1
 8010768:	d128      	bne.n	80107bc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	015a      	lsls	r2, r3, #5
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	4413      	add	r3, r2
 8010772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	68ba      	ldr	r2, [r7, #8]
 801077a:	0151      	lsls	r1, r2, #5
 801077c:	68fa      	ldr	r2, [r7, #12]
 801077e:	440a      	add	r2, r1
 8010780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010784:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010788:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	78db      	ldrb	r3, [r3, #3]
 801078e:	2b03      	cmp	r3, #3
 8010790:	d003      	beq.n	801079a <USB_EPClearStall+0x4c>
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	78db      	ldrb	r3, [r3, #3]
 8010796:	2b02      	cmp	r3, #2
 8010798:	d138      	bne.n	801080c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	015a      	lsls	r2, r3, #5
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	4413      	add	r3, r2
 80107a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	68ba      	ldr	r2, [r7, #8]
 80107aa:	0151      	lsls	r1, r2, #5
 80107ac:	68fa      	ldr	r2, [r7, #12]
 80107ae:	440a      	add	r2, r1
 80107b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80107b8:	6013      	str	r3, [r2, #0]
 80107ba:	e027      	b.n	801080c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	015a      	lsls	r2, r3, #5
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	4413      	add	r3, r2
 80107c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	68ba      	ldr	r2, [r7, #8]
 80107cc:	0151      	lsls	r1, r2, #5
 80107ce:	68fa      	ldr	r2, [r7, #12]
 80107d0:	440a      	add	r2, r1
 80107d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80107d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80107da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	78db      	ldrb	r3, [r3, #3]
 80107e0:	2b03      	cmp	r3, #3
 80107e2:	d003      	beq.n	80107ec <USB_EPClearStall+0x9e>
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	78db      	ldrb	r3, [r3, #3]
 80107e8:	2b02      	cmp	r3, #2
 80107ea:	d10f      	bne.n	801080c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80107ec:	68bb      	ldr	r3, [r7, #8]
 80107ee:	015a      	lsls	r2, r3, #5
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	4413      	add	r3, r2
 80107f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	68ba      	ldr	r2, [r7, #8]
 80107fc:	0151      	lsls	r1, r2, #5
 80107fe:	68fa      	ldr	r2, [r7, #12]
 8010800:	440a      	add	r2, r1
 8010802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801080a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801080c:	2300      	movs	r3, #0
}
 801080e:	4618      	mov	r0, r3
 8010810:	3714      	adds	r7, #20
 8010812:	46bd      	mov	sp, r7
 8010814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010818:	4770      	bx	lr

0801081a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801081a:	b480      	push	{r7}
 801081c:	b085      	sub	sp, #20
 801081e:	af00      	add	r7, sp, #0
 8010820:	6078      	str	r0, [r7, #4]
 8010822:	460b      	mov	r3, r1
 8010824:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	68fa      	ldr	r2, [r7, #12]
 8010834:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010838:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801083c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010844:	681a      	ldr	r2, [r3, #0]
 8010846:	78fb      	ldrb	r3, [r7, #3]
 8010848:	011b      	lsls	r3, r3, #4
 801084a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801084e:	68f9      	ldr	r1, [r7, #12]
 8010850:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010854:	4313      	orrs	r3, r2
 8010856:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010858:	2300      	movs	r3, #0
}
 801085a:	4618      	mov	r0, r3
 801085c:	3714      	adds	r7, #20
 801085e:	46bd      	mov	sp, r7
 8010860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010864:	4770      	bx	lr

08010866 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010866:	b480      	push	{r7}
 8010868:	b085      	sub	sp, #20
 801086a:	af00      	add	r7, sp, #0
 801086c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	68fa      	ldr	r2, [r7, #12]
 801087c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010880:	f023 0303 	bic.w	r3, r3, #3
 8010884:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801088c:	685b      	ldr	r3, [r3, #4]
 801088e:	68fa      	ldr	r2, [r7, #12]
 8010890:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010894:	f023 0302 	bic.w	r3, r3, #2
 8010898:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801089a:	2300      	movs	r3, #0
}
 801089c:	4618      	mov	r0, r3
 801089e:	3714      	adds	r7, #20
 80108a0:	46bd      	mov	sp, r7
 80108a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a6:	4770      	bx	lr

080108a8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80108a8:	b480      	push	{r7}
 80108aa:	b085      	sub	sp, #20
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	68fa      	ldr	r2, [r7, #12]
 80108be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80108c2:	f023 0303 	bic.w	r3, r3, #3
 80108c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80108ce:	685b      	ldr	r3, [r3, #4]
 80108d0:	68fa      	ldr	r2, [r7, #12]
 80108d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80108d6:	f043 0302 	orr.w	r3, r3, #2
 80108da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80108dc:	2300      	movs	r3, #0
}
 80108de:	4618      	mov	r0, r3
 80108e0:	3714      	adds	r7, #20
 80108e2:	46bd      	mov	sp, r7
 80108e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e8:	4770      	bx	lr

080108ea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80108ea:	b480      	push	{r7}
 80108ec:	b085      	sub	sp, #20
 80108ee:	af00      	add	r7, sp, #0
 80108f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	695b      	ldr	r3, [r3, #20]
 80108f6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	699b      	ldr	r3, [r3, #24]
 80108fc:	68fa      	ldr	r2, [r7, #12]
 80108fe:	4013      	ands	r3, r2
 8010900:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010902:	68fb      	ldr	r3, [r7, #12]
}
 8010904:	4618      	mov	r0, r3
 8010906:	3714      	adds	r7, #20
 8010908:	46bd      	mov	sp, r7
 801090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090e:	4770      	bx	lr

08010910 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010910:	b480      	push	{r7}
 8010912:	b085      	sub	sp, #20
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010922:	699b      	ldr	r3, [r3, #24]
 8010924:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801092c:	69db      	ldr	r3, [r3, #28]
 801092e:	68ba      	ldr	r2, [r7, #8]
 8010930:	4013      	ands	r3, r2
 8010932:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	0c1b      	lsrs	r3, r3, #16
}
 8010938:	4618      	mov	r0, r3
 801093a:	3714      	adds	r7, #20
 801093c:	46bd      	mov	sp, r7
 801093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010942:	4770      	bx	lr

08010944 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010944:	b480      	push	{r7}
 8010946:	b085      	sub	sp, #20
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010956:	699b      	ldr	r3, [r3, #24]
 8010958:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010960:	69db      	ldr	r3, [r3, #28]
 8010962:	68ba      	ldr	r2, [r7, #8]
 8010964:	4013      	ands	r3, r2
 8010966:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010968:	68bb      	ldr	r3, [r7, #8]
 801096a:	b29b      	uxth	r3, r3
}
 801096c:	4618      	mov	r0, r3
 801096e:	3714      	adds	r7, #20
 8010970:	46bd      	mov	sp, r7
 8010972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010976:	4770      	bx	lr

08010978 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010978:	b480      	push	{r7}
 801097a:	b085      	sub	sp, #20
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
 8010980:	460b      	mov	r3, r1
 8010982:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010988:	78fb      	ldrb	r3, [r7, #3]
 801098a:	015a      	lsls	r2, r3, #5
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	4413      	add	r3, r2
 8010990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010994:	689b      	ldr	r3, [r3, #8]
 8010996:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801099e:	695b      	ldr	r3, [r3, #20]
 80109a0:	68ba      	ldr	r2, [r7, #8]
 80109a2:	4013      	ands	r3, r2
 80109a4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80109a6:	68bb      	ldr	r3, [r7, #8]
}
 80109a8:	4618      	mov	r0, r3
 80109aa:	3714      	adds	r7, #20
 80109ac:	46bd      	mov	sp, r7
 80109ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b2:	4770      	bx	lr

080109b4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80109b4:	b480      	push	{r7}
 80109b6:	b087      	sub	sp, #28
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
 80109bc:	460b      	mov	r3, r1
 80109be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80109c4:	697b      	ldr	r3, [r7, #20]
 80109c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109ca:	691b      	ldr	r3, [r3, #16]
 80109cc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80109ce:	697b      	ldr	r3, [r7, #20]
 80109d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109d6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80109d8:	78fb      	ldrb	r3, [r7, #3]
 80109da:	f003 030f 	and.w	r3, r3, #15
 80109de:	68fa      	ldr	r2, [r7, #12]
 80109e0:	fa22 f303 	lsr.w	r3, r2, r3
 80109e4:	01db      	lsls	r3, r3, #7
 80109e6:	b2db      	uxtb	r3, r3
 80109e8:	693a      	ldr	r2, [r7, #16]
 80109ea:	4313      	orrs	r3, r2
 80109ec:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80109ee:	78fb      	ldrb	r3, [r7, #3]
 80109f0:	015a      	lsls	r2, r3, #5
 80109f2:	697b      	ldr	r3, [r7, #20]
 80109f4:	4413      	add	r3, r2
 80109f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109fa:	689b      	ldr	r3, [r3, #8]
 80109fc:	693a      	ldr	r2, [r7, #16]
 80109fe:	4013      	ands	r3, r2
 8010a00:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010a02:	68bb      	ldr	r3, [r7, #8]
}
 8010a04:	4618      	mov	r0, r3
 8010a06:	371c      	adds	r7, #28
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0e:	4770      	bx	lr

08010a10 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010a10:	b480      	push	{r7}
 8010a12:	b083      	sub	sp, #12
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	695b      	ldr	r3, [r3, #20]
 8010a1c:	f003 0301 	and.w	r3, r3, #1
}
 8010a20:	4618      	mov	r0, r3
 8010a22:	370c      	adds	r7, #12
 8010a24:	46bd      	mov	sp, r7
 8010a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2a:	4770      	bx	lr

08010a2c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010a2c:	b480      	push	{r7}
 8010a2e:	b085      	sub	sp, #20
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	68fa      	ldr	r2, [r7, #12]
 8010a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a46:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010a4a:	f023 0307 	bic.w	r3, r3, #7
 8010a4e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a56:	685b      	ldr	r3, [r3, #4]
 8010a58:	68fa      	ldr	r2, [r7, #12]
 8010a5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010a62:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010a64:	2300      	movs	r3, #0
}
 8010a66:	4618      	mov	r0, r3
 8010a68:	3714      	adds	r7, #20
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a70:	4770      	bx	lr
	...

08010a74 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010a74:	b480      	push	{r7}
 8010a76:	b087      	sub	sp, #28
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	60f8      	str	r0, [r7, #12]
 8010a7c:	460b      	mov	r3, r1
 8010a7e:	607a      	str	r2, [r7, #4]
 8010a80:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	333c      	adds	r3, #60	; 0x3c
 8010a8a:	3304      	adds	r3, #4
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010a90:	693b      	ldr	r3, [r7, #16]
 8010a92:	4a26      	ldr	r2, [pc, #152]	; (8010b2c <USB_EP0_OutStart+0xb8>)
 8010a94:	4293      	cmp	r3, r2
 8010a96:	d90a      	bls.n	8010aae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010a98:	697b      	ldr	r3, [r7, #20]
 8010a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010aa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010aa8:	d101      	bne.n	8010aae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010aaa:	2300      	movs	r3, #0
 8010aac:	e037      	b.n	8010b1e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010aae:	697b      	ldr	r3, [r7, #20]
 8010ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ab4:	461a      	mov	r2, r3
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010aba:	697b      	ldr	r3, [r7, #20]
 8010abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ac0:	691b      	ldr	r3, [r3, #16]
 8010ac2:	697a      	ldr	r2, [r7, #20]
 8010ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ac8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010acc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010ace:	697b      	ldr	r3, [r7, #20]
 8010ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ad4:	691b      	ldr	r3, [r3, #16]
 8010ad6:	697a      	ldr	r2, [r7, #20]
 8010ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010adc:	f043 0318 	orr.w	r3, r3, #24
 8010ae0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010ae2:	697b      	ldr	r3, [r7, #20]
 8010ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ae8:	691b      	ldr	r3, [r3, #16]
 8010aea:	697a      	ldr	r2, [r7, #20]
 8010aec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010af0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010af4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010af6:	7afb      	ldrb	r3, [r7, #11]
 8010af8:	2b01      	cmp	r3, #1
 8010afa:	d10f      	bne.n	8010b1c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010afc:	697b      	ldr	r3, [r7, #20]
 8010afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b02:	461a      	mov	r2, r3
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010b08:	697b      	ldr	r3, [r7, #20]
 8010b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	697a      	ldr	r2, [r7, #20]
 8010b12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b16:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010b1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010b1c:	2300      	movs	r3, #0
}
 8010b1e:	4618      	mov	r0, r3
 8010b20:	371c      	adds	r7, #28
 8010b22:	46bd      	mov	sp, r7
 8010b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b28:	4770      	bx	lr
 8010b2a:	bf00      	nop
 8010b2c:	4f54300a 	.word	0x4f54300a

08010b30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010b30:	b480      	push	{r7}
 8010b32:	b085      	sub	sp, #20
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8010b38:	2300      	movs	r3, #0
 8010b3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	3301      	adds	r3, #1
 8010b40:	60fb      	str	r3, [r7, #12]
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	4a13      	ldr	r2, [pc, #76]	; (8010b94 <USB_CoreReset+0x64>)
 8010b46:	4293      	cmp	r3, r2
 8010b48:	d901      	bls.n	8010b4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010b4a:	2303      	movs	r3, #3
 8010b4c:	e01b      	b.n	8010b86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	691b      	ldr	r3, [r3, #16]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	daf2      	bge.n	8010b3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010b56:	2300      	movs	r3, #0
 8010b58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	691b      	ldr	r3, [r3, #16]
 8010b5e:	f043 0201 	orr.w	r2, r3, #1
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	3301      	adds	r3, #1
 8010b6a:	60fb      	str	r3, [r7, #12]
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	4a09      	ldr	r2, [pc, #36]	; (8010b94 <USB_CoreReset+0x64>)
 8010b70:	4293      	cmp	r3, r2
 8010b72:	d901      	bls.n	8010b78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010b74:	2303      	movs	r3, #3
 8010b76:	e006      	b.n	8010b86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	691b      	ldr	r3, [r3, #16]
 8010b7c:	f003 0301 	and.w	r3, r3, #1
 8010b80:	2b01      	cmp	r3, #1
 8010b82:	d0f0      	beq.n	8010b66 <USB_CoreReset+0x36>

  return HAL_OK;
 8010b84:	2300      	movs	r3, #0
}
 8010b86:	4618      	mov	r0, r3
 8010b88:	3714      	adds	r7, #20
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b90:	4770      	bx	lr
 8010b92:	bf00      	nop
 8010b94:	00030d40 	.word	0x00030d40

08010b98 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b084      	sub	sp, #16
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
 8010ba0:	460b      	mov	r3, r1
 8010ba2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010ba4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010ba8:	f004 ffd8 	bl	8015b5c <malloc>
 8010bac:	4603      	mov	r3, r0
 8010bae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d105      	bne.n	8010bc2 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	2200      	movs	r2, #0
 8010bba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8010bbe:	2302      	movs	r3, #2
 8010bc0:	e066      	b.n	8010c90 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	68fa      	ldr	r2, [r7, #12]
 8010bc6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	7c1b      	ldrb	r3, [r3, #16]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d119      	bne.n	8010c06 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010bd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010bd6:	2202      	movs	r2, #2
 8010bd8:	2181      	movs	r1, #129	; 0x81
 8010bda:	6878      	ldr	r0, [r7, #4]
 8010bdc:	f004 fe3d 	bl	801585a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	2201      	movs	r2, #1
 8010be4:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010bea:	2202      	movs	r2, #2
 8010bec:	2101      	movs	r1, #1
 8010bee:	6878      	ldr	r0, [r7, #4]
 8010bf0:	f004 fe33 	bl	801585a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	2201      	movs	r2, #1
 8010bf8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2210      	movs	r2, #16
 8010c00:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8010c04:	e016      	b.n	8010c34 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010c06:	2340      	movs	r3, #64	; 0x40
 8010c08:	2202      	movs	r2, #2
 8010c0a:	2181      	movs	r1, #129	; 0x81
 8010c0c:	6878      	ldr	r0, [r7, #4]
 8010c0e:	f004 fe24 	bl	801585a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	2201      	movs	r2, #1
 8010c16:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010c18:	2340      	movs	r3, #64	; 0x40
 8010c1a:	2202      	movs	r2, #2
 8010c1c:	2101      	movs	r1, #1
 8010c1e:	6878      	ldr	r0, [r7, #4]
 8010c20:	f004 fe1b 	bl	801585a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	2201      	movs	r2, #1
 8010c28:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2210      	movs	r2, #16
 8010c30:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010c34:	2308      	movs	r3, #8
 8010c36:	2203      	movs	r2, #3
 8010c38:	2182      	movs	r1, #130	; 0x82
 8010c3a:	6878      	ldr	r0, [r7, #4]
 8010c3c:	f004 fe0d 	bl	801585a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	2201      	movs	r2, #1
 8010c44:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	2200      	movs	r2, #0
 8010c56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	7c1b      	ldrb	r3, [r3, #16]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d109      	bne.n	8010c7e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010c70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010c74:	2101      	movs	r1, #1
 8010c76:	6878      	ldr	r0, [r7, #4]
 8010c78:	f004 fede 	bl	8015a38 <USBD_LL_PrepareReceive>
 8010c7c:	e007      	b.n	8010c8e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010c84:	2340      	movs	r3, #64	; 0x40
 8010c86:	2101      	movs	r1, #1
 8010c88:	6878      	ldr	r0, [r7, #4]
 8010c8a:	f004 fed5 	bl	8015a38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010c8e:	2300      	movs	r3, #0
}
 8010c90:	4618      	mov	r0, r3
 8010c92:	3710      	adds	r7, #16
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}

08010c98 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b084      	sub	sp, #16
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
 8010ca0:	460b      	mov	r3, r1
 8010ca2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8010ca8:	2181      	movs	r1, #129	; 0x81
 8010caa:	6878      	ldr	r0, [r7, #4]
 8010cac:	f004 fdfb 	bl	80158a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8010cb6:	2101      	movs	r1, #1
 8010cb8:	6878      	ldr	r0, [r7, #4]
 8010cba:	f004 fdf4 	bl	80158a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8010cc6:	2182      	movs	r1, #130	; 0x82
 8010cc8:	6878      	ldr	r0, [r7, #4]
 8010cca:	f004 fdec 	bl	80158a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	2200      	movs	r2, #0
 8010cda:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d00e      	beq.n	8010d06 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010cee:	685b      	ldr	r3, [r3, #4]
 8010cf0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f004 ff37 	bl	8015b6c <free>
    pdev->pClassData = NULL;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	2200      	movs	r2, #0
 8010d02:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8010d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d08:	4618      	mov	r0, r3
 8010d0a:	3710      	adds	r7, #16
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	bd80      	pop	{r7, pc}

08010d10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b086      	sub	sp, #24
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
 8010d18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010d20:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8010d22:	2300      	movs	r3, #0
 8010d24:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8010d26:	2300      	movs	r3, #0
 8010d28:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010d2e:	683b      	ldr	r3, [r7, #0]
 8010d30:	781b      	ldrb	r3, [r3, #0]
 8010d32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d03a      	beq.n	8010db0 <USBD_CDC_Setup+0xa0>
 8010d3a:	2b20      	cmp	r3, #32
 8010d3c:	f040 8097 	bne.w	8010e6e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8010d40:	683b      	ldr	r3, [r7, #0]
 8010d42:	88db      	ldrh	r3, [r3, #6]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d029      	beq.n	8010d9c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	781b      	ldrb	r3, [r3, #0]
 8010d4c:	b25b      	sxtb	r3, r3
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	da11      	bge.n	8010d76 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010d58:	689b      	ldr	r3, [r3, #8]
 8010d5a:	683a      	ldr	r2, [r7, #0]
 8010d5c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8010d5e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010d60:	683a      	ldr	r2, [r7, #0]
 8010d62:	88d2      	ldrh	r2, [r2, #6]
 8010d64:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010d66:	6939      	ldr	r1, [r7, #16]
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	88db      	ldrh	r3, [r3, #6]
 8010d6c:	461a      	mov	r2, r3
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f001 fa9d 	bl	80122ae <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8010d74:	e082      	b.n	8010e7c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	785a      	ldrb	r2, [r3, #1]
 8010d7a:	693b      	ldr	r3, [r7, #16]
 8010d7c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8010d80:	683b      	ldr	r3, [r7, #0]
 8010d82:	88db      	ldrh	r3, [r3, #6]
 8010d84:	b2da      	uxtb	r2, r3
 8010d86:	693b      	ldr	r3, [r7, #16]
 8010d88:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010d8c:	6939      	ldr	r1, [r7, #16]
 8010d8e:	683b      	ldr	r3, [r7, #0]
 8010d90:	88db      	ldrh	r3, [r3, #6]
 8010d92:	461a      	mov	r2, r3
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f001 fab6 	bl	8012306 <USBD_CtlPrepareRx>
    break;
 8010d9a:	e06f      	b.n	8010e7c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010da2:	689b      	ldr	r3, [r3, #8]
 8010da4:	683a      	ldr	r2, [r7, #0]
 8010da6:	7850      	ldrb	r0, [r2, #1]
 8010da8:	2200      	movs	r2, #0
 8010daa:	6839      	ldr	r1, [r7, #0]
 8010dac:	4798      	blx	r3
    break;
 8010dae:	e065      	b.n	8010e7c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	785b      	ldrb	r3, [r3, #1]
 8010db4:	2b0b      	cmp	r3, #11
 8010db6:	d84f      	bhi.n	8010e58 <USBD_CDC_Setup+0x148>
 8010db8:	a201      	add	r2, pc, #4	; (adr r2, 8010dc0 <USBD_CDC_Setup+0xb0>)
 8010dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dbe:	bf00      	nop
 8010dc0:	08010df1 	.word	0x08010df1
 8010dc4:	08010e67 	.word	0x08010e67
 8010dc8:	08010e59 	.word	0x08010e59
 8010dcc:	08010e59 	.word	0x08010e59
 8010dd0:	08010e59 	.word	0x08010e59
 8010dd4:	08010e59 	.word	0x08010e59
 8010dd8:	08010e59 	.word	0x08010e59
 8010ddc:	08010e59 	.word	0x08010e59
 8010de0:	08010e59 	.word	0x08010e59
 8010de4:	08010e59 	.word	0x08010e59
 8010de8:	08010e19 	.word	0x08010e19
 8010dec:	08010e41 	.word	0x08010e41
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010df6:	2b03      	cmp	r3, #3
 8010df8:	d107      	bne.n	8010e0a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010dfa:	f107 030c 	add.w	r3, r7, #12
 8010dfe:	2202      	movs	r2, #2
 8010e00:	4619      	mov	r1, r3
 8010e02:	6878      	ldr	r0, [r7, #4]
 8010e04:	f001 fa53 	bl	80122ae <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010e08:	e030      	b.n	8010e6c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8010e0a:	6839      	ldr	r1, [r7, #0]
 8010e0c:	6878      	ldr	r0, [r7, #4]
 8010e0e:	f001 f9dd 	bl	80121cc <USBD_CtlError>
        ret = USBD_FAIL;
 8010e12:	2303      	movs	r3, #3
 8010e14:	75fb      	strb	r3, [r7, #23]
      break;
 8010e16:	e029      	b.n	8010e6c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e1e:	2b03      	cmp	r3, #3
 8010e20:	d107      	bne.n	8010e32 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010e22:	f107 030f 	add.w	r3, r7, #15
 8010e26:	2201      	movs	r2, #1
 8010e28:	4619      	mov	r1, r3
 8010e2a:	6878      	ldr	r0, [r7, #4]
 8010e2c:	f001 fa3f 	bl	80122ae <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010e30:	e01c      	b.n	8010e6c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8010e32:	6839      	ldr	r1, [r7, #0]
 8010e34:	6878      	ldr	r0, [r7, #4]
 8010e36:	f001 f9c9 	bl	80121cc <USBD_CtlError>
        ret = USBD_FAIL;
 8010e3a:	2303      	movs	r3, #3
 8010e3c:	75fb      	strb	r3, [r7, #23]
      break;
 8010e3e:	e015      	b.n	8010e6c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e46:	2b03      	cmp	r3, #3
 8010e48:	d00f      	beq.n	8010e6a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8010e4a:	6839      	ldr	r1, [r7, #0]
 8010e4c:	6878      	ldr	r0, [r7, #4]
 8010e4e:	f001 f9bd 	bl	80121cc <USBD_CtlError>
        ret = USBD_FAIL;
 8010e52:	2303      	movs	r3, #3
 8010e54:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8010e56:	e008      	b.n	8010e6a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8010e58:	6839      	ldr	r1, [r7, #0]
 8010e5a:	6878      	ldr	r0, [r7, #4]
 8010e5c:	f001 f9b6 	bl	80121cc <USBD_CtlError>
      ret = USBD_FAIL;
 8010e60:	2303      	movs	r3, #3
 8010e62:	75fb      	strb	r3, [r7, #23]
      break;
 8010e64:	e002      	b.n	8010e6c <USBD_CDC_Setup+0x15c>
      break;
 8010e66:	bf00      	nop
 8010e68:	e008      	b.n	8010e7c <USBD_CDC_Setup+0x16c>
      break;
 8010e6a:	bf00      	nop
    }
    break;
 8010e6c:	e006      	b.n	8010e7c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8010e6e:	6839      	ldr	r1, [r7, #0]
 8010e70:	6878      	ldr	r0, [r7, #4]
 8010e72:	f001 f9ab 	bl	80121cc <USBD_CtlError>
    ret = USBD_FAIL;
 8010e76:	2303      	movs	r3, #3
 8010e78:	75fb      	strb	r3, [r7, #23]
    break;
 8010e7a:	bf00      	nop
  }

  return (uint8_t)ret;
 8010e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e7e:	4618      	mov	r0, r3
 8010e80:	3718      	adds	r7, #24
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd80      	pop	{r7, pc}
 8010e86:	bf00      	nop

08010e88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b084      	sub	sp, #16
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
 8010e90:	460b      	mov	r3, r1
 8010e92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010e9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d101      	bne.n	8010eaa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010ea6:	2303      	movs	r3, #3
 8010ea8:	e049      	b.n	8010f3e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010eb0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010eb2:	78fa      	ldrb	r2, [r7, #3]
 8010eb4:	6879      	ldr	r1, [r7, #4]
 8010eb6:	4613      	mov	r3, r2
 8010eb8:	009b      	lsls	r3, r3, #2
 8010eba:	4413      	add	r3, r2
 8010ebc:	009b      	lsls	r3, r3, #2
 8010ebe:	440b      	add	r3, r1
 8010ec0:	3318      	adds	r3, #24
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d029      	beq.n	8010f1c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010ec8:	78fa      	ldrb	r2, [r7, #3]
 8010eca:	6879      	ldr	r1, [r7, #4]
 8010ecc:	4613      	mov	r3, r2
 8010ece:	009b      	lsls	r3, r3, #2
 8010ed0:	4413      	add	r3, r2
 8010ed2:	009b      	lsls	r3, r3, #2
 8010ed4:	440b      	add	r3, r1
 8010ed6:	3318      	adds	r3, #24
 8010ed8:	681a      	ldr	r2, [r3, #0]
 8010eda:	78f9      	ldrb	r1, [r7, #3]
 8010edc:	68f8      	ldr	r0, [r7, #12]
 8010ede:	460b      	mov	r3, r1
 8010ee0:	00db      	lsls	r3, r3, #3
 8010ee2:	1a5b      	subs	r3, r3, r1
 8010ee4:	009b      	lsls	r3, r3, #2
 8010ee6:	4403      	add	r3, r0
 8010ee8:	3344      	adds	r3, #68	; 0x44
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	fbb2 f1f3 	udiv	r1, r2, r3
 8010ef0:	fb03 f301 	mul.w	r3, r3, r1
 8010ef4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d110      	bne.n	8010f1c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8010efa:	78fa      	ldrb	r2, [r7, #3]
 8010efc:	6879      	ldr	r1, [r7, #4]
 8010efe:	4613      	mov	r3, r2
 8010f00:	009b      	lsls	r3, r3, #2
 8010f02:	4413      	add	r3, r2
 8010f04:	009b      	lsls	r3, r3, #2
 8010f06:	440b      	add	r3, r1
 8010f08:	3318      	adds	r3, #24
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010f0e:	78f9      	ldrb	r1, [r7, #3]
 8010f10:	2300      	movs	r3, #0
 8010f12:	2200      	movs	r2, #0
 8010f14:	6878      	ldr	r0, [r7, #4]
 8010f16:	f004 fd6e 	bl	80159f6 <USBD_LL_Transmit>
 8010f1a:	e00f      	b.n	8010f3c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010f1c:	68bb      	ldr	r3, [r7, #8]
 8010f1e:	2200      	movs	r2, #0
 8010f20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010f2a:	691b      	ldr	r3, [r3, #16]
 8010f2c:	68ba      	ldr	r2, [r7, #8]
 8010f2e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010f32:	68ba      	ldr	r2, [r7, #8]
 8010f34:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010f38:	78fa      	ldrb	r2, [r7, #3]
 8010f3a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8010f3c:	2300      	movs	r3, #0
}
 8010f3e:	4618      	mov	r0, r3
 8010f40:	3710      	adds	r7, #16
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}

08010f46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010f46:	b580      	push	{r7, lr}
 8010f48:	b084      	sub	sp, #16
 8010f4a:	af00      	add	r7, sp, #0
 8010f4c:	6078      	str	r0, [r7, #4]
 8010f4e:	460b      	mov	r3, r1
 8010f50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f58:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d101      	bne.n	8010f68 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010f64:	2303      	movs	r3, #3
 8010f66:	e015      	b.n	8010f94 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010f68:	78fb      	ldrb	r3, [r7, #3]
 8010f6a:	4619      	mov	r1, r3
 8010f6c:	6878      	ldr	r0, [r7, #4]
 8010f6e:	f004 fd84 	bl	8015a7a <USBD_LL_GetRxDataSize>
 8010f72:	4602      	mov	r2, r0
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010f80:	68db      	ldr	r3, [r3, #12]
 8010f82:	68fa      	ldr	r2, [r7, #12]
 8010f84:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010f88:	68fa      	ldr	r2, [r7, #12]
 8010f8a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010f8e:	4611      	mov	r1, r2
 8010f90:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010f92:	2300      	movs	r3, #0
}
 8010f94:	4618      	mov	r0, r3
 8010f96:	3710      	adds	r7, #16
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd80      	pop	{r7, pc}

08010f9c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b084      	sub	sp, #16
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010faa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d015      	beq.n	8010fe2 <USBD_CDC_EP0_RxReady+0x46>
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010fbc:	2bff      	cmp	r3, #255	; 0xff
 8010fbe:	d010      	beq.n	8010fe2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010fc6:	689b      	ldr	r3, [r3, #8]
 8010fc8:	68fa      	ldr	r2, [r7, #12]
 8010fca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8010fce:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8010fd0:	68fa      	ldr	r2, [r7, #12]
 8010fd2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010fd6:	b292      	uxth	r2, r2
 8010fd8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	22ff      	movs	r2, #255	; 0xff
 8010fde:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8010fe2:	2300      	movs	r3, #0
}
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	3710      	adds	r7, #16
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	bd80      	pop	{r7, pc}

08010fec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010fec:	b480      	push	{r7}
 8010fee:	b083      	sub	sp, #12
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	2243      	movs	r2, #67	; 0x43
 8010ff8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8010ffa:	4b03      	ldr	r3, [pc, #12]	; (8011008 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	370c      	adds	r7, #12
 8011000:	46bd      	mov	sp, r7
 8011002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011006:	4770      	bx	lr
 8011008:	200008bc 	.word	0x200008bc

0801100c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801100c:	b480      	push	{r7}
 801100e:	b083      	sub	sp, #12
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2243      	movs	r2, #67	; 0x43
 8011018:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801101a:	4b03      	ldr	r3, [pc, #12]	; (8011028 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801101c:	4618      	mov	r0, r3
 801101e:	370c      	adds	r7, #12
 8011020:	46bd      	mov	sp, r7
 8011022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011026:	4770      	bx	lr
 8011028:	20000878 	.word	0x20000878

0801102c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801102c:	b480      	push	{r7}
 801102e:	b083      	sub	sp, #12
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2243      	movs	r2, #67	; 0x43
 8011038:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801103a:	4b03      	ldr	r3, [pc, #12]	; (8011048 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801103c:	4618      	mov	r0, r3
 801103e:	370c      	adds	r7, #12
 8011040:	46bd      	mov	sp, r7
 8011042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011046:	4770      	bx	lr
 8011048:	20000900 	.word	0x20000900

0801104c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801104c:	b480      	push	{r7}
 801104e:	b083      	sub	sp, #12
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	220a      	movs	r2, #10
 8011058:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801105a:	4b03      	ldr	r3, [pc, #12]	; (8011068 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801105c:	4618      	mov	r0, r3
 801105e:	370c      	adds	r7, #12
 8011060:	46bd      	mov	sp, r7
 8011062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011066:	4770      	bx	lr
 8011068:	20000834 	.word	0x20000834

0801106c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801106c:	b480      	push	{r7}
 801106e:	b083      	sub	sp, #12
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
 8011074:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011076:	683b      	ldr	r3, [r7, #0]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d101      	bne.n	8011080 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801107c:	2303      	movs	r3, #3
 801107e:	e004      	b.n	801108a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	683a      	ldr	r2, [r7, #0]
 8011084:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011088:	2300      	movs	r3, #0
}
 801108a:	4618      	mov	r0, r3
 801108c:	370c      	adds	r7, #12
 801108e:	46bd      	mov	sp, r7
 8011090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011094:	4770      	bx	lr

08011096 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011096:	b480      	push	{r7}
 8011098:	b087      	sub	sp, #28
 801109a:	af00      	add	r7, sp, #0
 801109c:	60f8      	str	r0, [r7, #12]
 801109e:	60b9      	str	r1, [r7, #8]
 80110a0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80110a8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80110aa:	697b      	ldr	r3, [r7, #20]
 80110ac:	68ba      	ldr	r2, [r7, #8]
 80110ae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80110b2:	697b      	ldr	r3, [r7, #20]
 80110b4:	687a      	ldr	r2, [r7, #4]
 80110b6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80110ba:	2300      	movs	r3, #0
}
 80110bc:	4618      	mov	r0, r3
 80110be:	371c      	adds	r7, #28
 80110c0:	46bd      	mov	sp, r7
 80110c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c6:	4770      	bx	lr

080110c8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80110c8:	b480      	push	{r7}
 80110ca:	b085      	sub	sp, #20
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
 80110d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80110d8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	683a      	ldr	r2, [r7, #0]
 80110de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80110e2:	2300      	movs	r3, #0
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	3714      	adds	r7, #20
 80110e8:	46bd      	mov	sp, r7
 80110ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ee:	4770      	bx	lr

080110f0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b084      	sub	sp, #16
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80110fe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8011100:	2301      	movs	r3, #1
 8011102:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801110a:	2b00      	cmp	r3, #0
 801110c:	d101      	bne.n	8011112 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801110e:	2303      	movs	r3, #3
 8011110:	e01a      	b.n	8011148 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8011112:	68bb      	ldr	r3, [r7, #8]
 8011114:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011118:	2b00      	cmp	r3, #0
 801111a:	d114      	bne.n	8011146 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801111c:	68bb      	ldr	r3, [r7, #8]
 801111e:	2201      	movs	r2, #1
 8011120:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8011124:	68bb      	ldr	r3, [r7, #8]
 8011126:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 801112e:	68bb      	ldr	r3, [r7, #8]
 8011130:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011134:	68bb      	ldr	r3, [r7, #8]
 8011136:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801113a:	2181      	movs	r1, #129	; 0x81
 801113c:	6878      	ldr	r0, [r7, #4]
 801113e:	f004 fc5a 	bl	80159f6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8011142:	2300      	movs	r3, #0
 8011144:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011146:	7bfb      	ldrb	r3, [r7, #15]
}
 8011148:	4618      	mov	r0, r3
 801114a:	3710      	adds	r7, #16
 801114c:	46bd      	mov	sp, r7
 801114e:	bd80      	pop	{r7, pc}

08011150 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b084      	sub	sp, #16
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801115e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011166:	2b00      	cmp	r3, #0
 8011168:	d101      	bne.n	801116e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801116a:	2303      	movs	r3, #3
 801116c:	e016      	b.n	801119c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	7c1b      	ldrb	r3, [r3, #16]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d109      	bne.n	801118a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801117c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011180:	2101      	movs	r1, #1
 8011182:	6878      	ldr	r0, [r7, #4]
 8011184:	f004 fc58 	bl	8015a38 <USBD_LL_PrepareReceive>
 8011188:	e007      	b.n	801119a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011190:	2340      	movs	r3, #64	; 0x40
 8011192:	2101      	movs	r1, #1
 8011194:	6878      	ldr	r0, [r7, #4]
 8011196:	f004 fc4f 	bl	8015a38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801119a:	2300      	movs	r3, #0
}
 801119c:	4618      	mov	r0, r3
 801119e:	3710      	adds	r7, #16
 80111a0:	46bd      	mov	sp, r7
 80111a2:	bd80      	pop	{r7, pc}

080111a4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b086      	sub	sp, #24
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	60f8      	str	r0, [r7, #12]
 80111ac:	60b9      	str	r1, [r7, #8]
 80111ae:	4613      	mov	r3, r2
 80111b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d101      	bne.n	80111bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80111b8:	2303      	movs	r3, #3
 80111ba:	e025      	b.n	8011208 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d003      	beq.n	80111ce <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	2200      	movs	r2, #0
 80111ca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d003      	beq.n	80111e0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	2200      	movs	r2, #0
 80111dc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80111e0:	68bb      	ldr	r3, [r7, #8]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d003      	beq.n	80111ee <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	68ba      	ldr	r2, [r7, #8]
 80111ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	2201      	movs	r2, #1
 80111f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	79fa      	ldrb	r2, [r7, #7]
 80111fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80111fc:	68f8      	ldr	r0, [r7, #12]
 80111fe:	f004 fac5 	bl	801578c <USBD_LL_Init>
 8011202:	4603      	mov	r3, r0
 8011204:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011206:	7dfb      	ldrb	r3, [r7, #23]
}
 8011208:	4618      	mov	r0, r3
 801120a:	3718      	adds	r7, #24
 801120c:	46bd      	mov	sp, r7
 801120e:	bd80      	pop	{r7, pc}

08011210 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011210:	b580      	push	{r7, lr}
 8011212:	b084      	sub	sp, #16
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
 8011218:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801121a:	2300      	movs	r3, #0
 801121c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801121e:	683b      	ldr	r3, [r7, #0]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d101      	bne.n	8011228 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011224:	2303      	movs	r3, #3
 8011226:	e010      	b.n	801124a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	683a      	ldr	r2, [r7, #0]
 801122c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011238:	f107 020e 	add.w	r2, r7, #14
 801123c:	4610      	mov	r0, r2
 801123e:	4798      	blx	r3
 8011240:	4602      	mov	r2, r0
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8011248:	2300      	movs	r3, #0
}
 801124a:	4618      	mov	r0, r3
 801124c:	3710      	adds	r7, #16
 801124e:	46bd      	mov	sp, r7
 8011250:	bd80      	pop	{r7, pc}

08011252 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011252:	b580      	push	{r7, lr}
 8011254:	b082      	sub	sp, #8
 8011256:	af00      	add	r7, sp, #0
 8011258:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801125a:	6878      	ldr	r0, [r7, #4]
 801125c:	f004 fae2 	bl	8015824 <USBD_LL_Start>
 8011260:	4603      	mov	r3, r0
}
 8011262:	4618      	mov	r0, r3
 8011264:	3708      	adds	r7, #8
 8011266:	46bd      	mov	sp, r7
 8011268:	bd80      	pop	{r7, pc}

0801126a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801126a:	b480      	push	{r7}
 801126c:	b083      	sub	sp, #12
 801126e:	af00      	add	r7, sp, #0
 8011270:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011272:	2300      	movs	r3, #0
}
 8011274:	4618      	mov	r0, r3
 8011276:	370c      	adds	r7, #12
 8011278:	46bd      	mov	sp, r7
 801127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127e:	4770      	bx	lr

08011280 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b084      	sub	sp, #16
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
 8011288:	460b      	mov	r3, r1
 801128a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801128c:	2303      	movs	r3, #3
 801128e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011296:	2b00      	cmp	r3, #0
 8011298:	d009      	beq.n	80112ae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	78fa      	ldrb	r2, [r7, #3]
 80112a4:	4611      	mov	r1, r2
 80112a6:	6878      	ldr	r0, [r7, #4]
 80112a8:	4798      	blx	r3
 80112aa:	4603      	mov	r3, r0
 80112ac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80112ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80112b0:	4618      	mov	r0, r3
 80112b2:	3710      	adds	r7, #16
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd80      	pop	{r7, pc}

080112b8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b082      	sub	sp, #8
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
 80112c0:	460b      	mov	r3, r1
 80112c2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d007      	beq.n	80112de <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112d4:	685b      	ldr	r3, [r3, #4]
 80112d6:	78fa      	ldrb	r2, [r7, #3]
 80112d8:	4611      	mov	r1, r2
 80112da:	6878      	ldr	r0, [r7, #4]
 80112dc:	4798      	blx	r3
  }

  return USBD_OK;
 80112de:	2300      	movs	r3, #0
}
 80112e0:	4618      	mov	r0, r3
 80112e2:	3708      	adds	r7, #8
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bd80      	pop	{r7, pc}

080112e8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b084      	sub	sp, #16
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
 80112f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80112f8:	6839      	ldr	r1, [r7, #0]
 80112fa:	4618      	mov	r0, r3
 80112fc:	f000 ff2c 	bl	8012158 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2201      	movs	r2, #1
 8011304:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801130e:	461a      	mov	r2, r3
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801131c:	f003 031f 	and.w	r3, r3, #31
 8011320:	2b01      	cmp	r3, #1
 8011322:	d00e      	beq.n	8011342 <USBD_LL_SetupStage+0x5a>
 8011324:	2b01      	cmp	r3, #1
 8011326:	d302      	bcc.n	801132e <USBD_LL_SetupStage+0x46>
 8011328:	2b02      	cmp	r3, #2
 801132a:	d014      	beq.n	8011356 <USBD_LL_SetupStage+0x6e>
 801132c:	e01d      	b.n	801136a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011334:	4619      	mov	r1, r3
 8011336:	6878      	ldr	r0, [r7, #4]
 8011338:	f000 fa18 	bl	801176c <USBD_StdDevReq>
 801133c:	4603      	mov	r3, r0
 801133e:	73fb      	strb	r3, [r7, #15]
      break;
 8011340:	e020      	b.n	8011384 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011348:	4619      	mov	r1, r3
 801134a:	6878      	ldr	r0, [r7, #4]
 801134c:	f000 fa7c 	bl	8011848 <USBD_StdItfReq>
 8011350:	4603      	mov	r3, r0
 8011352:	73fb      	strb	r3, [r7, #15]
      break;
 8011354:	e016      	b.n	8011384 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801135c:	4619      	mov	r1, r3
 801135e:	6878      	ldr	r0, [r7, #4]
 8011360:	f000 fab8 	bl	80118d4 <USBD_StdEPReq>
 8011364:	4603      	mov	r3, r0
 8011366:	73fb      	strb	r3, [r7, #15]
      break;
 8011368:	e00c      	b.n	8011384 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011370:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011374:	b2db      	uxtb	r3, r3
 8011376:	4619      	mov	r1, r3
 8011378:	6878      	ldr	r0, [r7, #4]
 801137a:	f004 fab3 	bl	80158e4 <USBD_LL_StallEP>
 801137e:	4603      	mov	r3, r0
 8011380:	73fb      	strb	r3, [r7, #15]
      break;
 8011382:	bf00      	nop
  }

  return ret;
 8011384:	7bfb      	ldrb	r3, [r7, #15]
}
 8011386:	4618      	mov	r0, r3
 8011388:	3710      	adds	r7, #16
 801138a:	46bd      	mov	sp, r7
 801138c:	bd80      	pop	{r7, pc}

0801138e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801138e:	b580      	push	{r7, lr}
 8011390:	b086      	sub	sp, #24
 8011392:	af00      	add	r7, sp, #0
 8011394:	60f8      	str	r0, [r7, #12]
 8011396:	460b      	mov	r3, r1
 8011398:	607a      	str	r2, [r7, #4]
 801139a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801139c:	7afb      	ldrb	r3, [r7, #11]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d137      	bne.n	8011412 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80113a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80113b0:	2b03      	cmp	r3, #3
 80113b2:	d14a      	bne.n	801144a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80113b4:	693b      	ldr	r3, [r7, #16]
 80113b6:	689a      	ldr	r2, [r3, #8]
 80113b8:	693b      	ldr	r3, [r7, #16]
 80113ba:	68db      	ldr	r3, [r3, #12]
 80113bc:	429a      	cmp	r2, r3
 80113be:	d913      	bls.n	80113e8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80113c0:	693b      	ldr	r3, [r7, #16]
 80113c2:	689a      	ldr	r2, [r3, #8]
 80113c4:	693b      	ldr	r3, [r7, #16]
 80113c6:	68db      	ldr	r3, [r3, #12]
 80113c8:	1ad2      	subs	r2, r2, r3
 80113ca:	693b      	ldr	r3, [r7, #16]
 80113cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80113ce:	693b      	ldr	r3, [r7, #16]
 80113d0:	68da      	ldr	r2, [r3, #12]
 80113d2:	693b      	ldr	r3, [r7, #16]
 80113d4:	689b      	ldr	r3, [r3, #8]
 80113d6:	4293      	cmp	r3, r2
 80113d8:	bf28      	it	cs
 80113da:	4613      	movcs	r3, r2
 80113dc:	461a      	mov	r2, r3
 80113de:	6879      	ldr	r1, [r7, #4]
 80113e0:	68f8      	ldr	r0, [r7, #12]
 80113e2:	f000 ffad 	bl	8012340 <USBD_CtlContinueRx>
 80113e6:	e030      	b.n	801144a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113ee:	691b      	ldr	r3, [r3, #16]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d00a      	beq.n	801140a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80113fa:	2b03      	cmp	r3, #3
 80113fc:	d105      	bne.n	801140a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011404:	691b      	ldr	r3, [r3, #16]
 8011406:	68f8      	ldr	r0, [r7, #12]
 8011408:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 801140a:	68f8      	ldr	r0, [r7, #12]
 801140c:	f000 ffa9 	bl	8012362 <USBD_CtlSendStatus>
 8011410:	e01b      	b.n	801144a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011418:	699b      	ldr	r3, [r3, #24]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d013      	beq.n	8011446 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8011424:	2b03      	cmp	r3, #3
 8011426:	d10e      	bne.n	8011446 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801142e:	699b      	ldr	r3, [r3, #24]
 8011430:	7afa      	ldrb	r2, [r7, #11]
 8011432:	4611      	mov	r1, r2
 8011434:	68f8      	ldr	r0, [r7, #12]
 8011436:	4798      	blx	r3
 8011438:	4603      	mov	r3, r0
 801143a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 801143c:	7dfb      	ldrb	r3, [r7, #23]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d003      	beq.n	801144a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8011442:	7dfb      	ldrb	r3, [r7, #23]
 8011444:	e002      	b.n	801144c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011446:	2303      	movs	r3, #3
 8011448:	e000      	b.n	801144c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 801144a:	2300      	movs	r3, #0
}
 801144c:	4618      	mov	r0, r3
 801144e:	3718      	adds	r7, #24
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}

08011454 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b086      	sub	sp, #24
 8011458:	af00      	add	r7, sp, #0
 801145a:	60f8      	str	r0, [r7, #12]
 801145c:	460b      	mov	r3, r1
 801145e:	607a      	str	r2, [r7, #4]
 8011460:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011462:	7afb      	ldrb	r3, [r7, #11]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d16a      	bne.n	801153e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	3314      	adds	r3, #20
 801146c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011474:	2b02      	cmp	r3, #2
 8011476:	d155      	bne.n	8011524 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8011478:	693b      	ldr	r3, [r7, #16]
 801147a:	689a      	ldr	r2, [r3, #8]
 801147c:	693b      	ldr	r3, [r7, #16]
 801147e:	68db      	ldr	r3, [r3, #12]
 8011480:	429a      	cmp	r2, r3
 8011482:	d914      	bls.n	80114ae <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011484:	693b      	ldr	r3, [r7, #16]
 8011486:	689a      	ldr	r2, [r3, #8]
 8011488:	693b      	ldr	r3, [r7, #16]
 801148a:	68db      	ldr	r3, [r3, #12]
 801148c:	1ad2      	subs	r2, r2, r3
 801148e:	693b      	ldr	r3, [r7, #16]
 8011490:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011492:	693b      	ldr	r3, [r7, #16]
 8011494:	689b      	ldr	r3, [r3, #8]
 8011496:	461a      	mov	r2, r3
 8011498:	6879      	ldr	r1, [r7, #4]
 801149a:	68f8      	ldr	r0, [r7, #12]
 801149c:	f000 ff22 	bl	80122e4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80114a0:	2300      	movs	r3, #0
 80114a2:	2200      	movs	r2, #0
 80114a4:	2100      	movs	r1, #0
 80114a6:	68f8      	ldr	r0, [r7, #12]
 80114a8:	f004 fac6 	bl	8015a38 <USBD_LL_PrepareReceive>
 80114ac:	e03a      	b.n	8011524 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80114ae:	693b      	ldr	r3, [r7, #16]
 80114b0:	68da      	ldr	r2, [r3, #12]
 80114b2:	693b      	ldr	r3, [r7, #16]
 80114b4:	689b      	ldr	r3, [r3, #8]
 80114b6:	429a      	cmp	r2, r3
 80114b8:	d11c      	bne.n	80114f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80114ba:	693b      	ldr	r3, [r7, #16]
 80114bc:	685a      	ldr	r2, [r3, #4]
 80114be:	693b      	ldr	r3, [r7, #16]
 80114c0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80114c2:	429a      	cmp	r2, r3
 80114c4:	d316      	bcc.n	80114f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80114c6:	693b      	ldr	r3, [r7, #16]
 80114c8:	685a      	ldr	r2, [r3, #4]
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80114d0:	429a      	cmp	r2, r3
 80114d2:	d20f      	bcs.n	80114f4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80114d4:	2200      	movs	r2, #0
 80114d6:	2100      	movs	r1, #0
 80114d8:	68f8      	ldr	r0, [r7, #12]
 80114da:	f000 ff03 	bl	80122e4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	2200      	movs	r2, #0
 80114e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80114e6:	2300      	movs	r3, #0
 80114e8:	2200      	movs	r2, #0
 80114ea:	2100      	movs	r1, #0
 80114ec:	68f8      	ldr	r0, [r7, #12]
 80114ee:	f004 faa3 	bl	8015a38 <USBD_LL_PrepareReceive>
 80114f2:	e017      	b.n	8011524 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114fa:	68db      	ldr	r3, [r3, #12]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d00a      	beq.n	8011516 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011506:	2b03      	cmp	r3, #3
 8011508:	d105      	bne.n	8011516 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011510:	68db      	ldr	r3, [r3, #12]
 8011512:	68f8      	ldr	r0, [r7, #12]
 8011514:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011516:	2180      	movs	r1, #128	; 0x80
 8011518:	68f8      	ldr	r0, [r7, #12]
 801151a:	f004 f9e3 	bl	80158e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801151e:	68f8      	ldr	r0, [r7, #12]
 8011520:	f000 ff32 	bl	8012388 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801152a:	2b01      	cmp	r3, #1
 801152c:	d123      	bne.n	8011576 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801152e:	68f8      	ldr	r0, [r7, #12]
 8011530:	f7ff fe9b 	bl	801126a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	2200      	movs	r2, #0
 8011538:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801153c:	e01b      	b.n	8011576 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011544:	695b      	ldr	r3, [r3, #20]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d013      	beq.n	8011572 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8011550:	2b03      	cmp	r3, #3
 8011552:	d10e      	bne.n	8011572 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801155a:	695b      	ldr	r3, [r3, #20]
 801155c:	7afa      	ldrb	r2, [r7, #11]
 801155e:	4611      	mov	r1, r2
 8011560:	68f8      	ldr	r0, [r7, #12]
 8011562:	4798      	blx	r3
 8011564:	4603      	mov	r3, r0
 8011566:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011568:	7dfb      	ldrb	r3, [r7, #23]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d003      	beq.n	8011576 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 801156e:	7dfb      	ldrb	r3, [r7, #23]
 8011570:	e002      	b.n	8011578 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011572:	2303      	movs	r3, #3
 8011574:	e000      	b.n	8011578 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8011576:	2300      	movs	r3, #0
}
 8011578:	4618      	mov	r0, r3
 801157a:	3718      	adds	r7, #24
 801157c:	46bd      	mov	sp, r7
 801157e:	bd80      	pop	{r7, pc}

08011580 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b082      	sub	sp, #8
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	2201      	movs	r2, #1
 801158c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2200      	movs	r2, #0
 8011594:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	2200      	movs	r2, #0
 801159c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	2200      	movs	r2, #0
 80115a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d009      	beq.n	80115c4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115b6:	685b      	ldr	r3, [r3, #4]
 80115b8:	687a      	ldr	r2, [r7, #4]
 80115ba:	6852      	ldr	r2, [r2, #4]
 80115bc:	b2d2      	uxtb	r2, r2
 80115be:	4611      	mov	r1, r2
 80115c0:	6878      	ldr	r0, [r7, #4]
 80115c2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80115c4:	2340      	movs	r3, #64	; 0x40
 80115c6:	2200      	movs	r2, #0
 80115c8:	2100      	movs	r1, #0
 80115ca:	6878      	ldr	r0, [r7, #4]
 80115cc:	f004 f945 	bl	801585a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	2201      	movs	r2, #1
 80115d4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	2240      	movs	r2, #64	; 0x40
 80115dc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80115e0:	2340      	movs	r3, #64	; 0x40
 80115e2:	2200      	movs	r2, #0
 80115e4:	2180      	movs	r1, #128	; 0x80
 80115e6:	6878      	ldr	r0, [r7, #4]
 80115e8:	f004 f937 	bl	801585a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	2201      	movs	r2, #1
 80115f0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	2240      	movs	r2, #64	; 0x40
 80115f6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80115f8:	2300      	movs	r3, #0
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	3708      	adds	r7, #8
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd80      	pop	{r7, pc}

08011602 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011602:	b480      	push	{r7}
 8011604:	b083      	sub	sp, #12
 8011606:	af00      	add	r7, sp, #0
 8011608:	6078      	str	r0, [r7, #4]
 801160a:	460b      	mov	r3, r1
 801160c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	78fa      	ldrb	r2, [r7, #3]
 8011612:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011614:	2300      	movs	r3, #0
}
 8011616:	4618      	mov	r0, r3
 8011618:	370c      	adds	r7, #12
 801161a:	46bd      	mov	sp, r7
 801161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011620:	4770      	bx	lr

08011622 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011622:	b480      	push	{r7}
 8011624:	b083      	sub	sp, #12
 8011626:	af00      	add	r7, sp, #0
 8011628:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	2204      	movs	r2, #4
 801163a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801163e:	2300      	movs	r3, #0
}
 8011640:	4618      	mov	r0, r3
 8011642:	370c      	adds	r7, #12
 8011644:	46bd      	mov	sp, r7
 8011646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164a:	4770      	bx	lr

0801164c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801164c:	b480      	push	{r7}
 801164e:	b083      	sub	sp, #12
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801165a:	2b04      	cmp	r3, #4
 801165c:	d105      	bne.n	801166a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801166a:	2300      	movs	r3, #0
}
 801166c:	4618      	mov	r0, r3
 801166e:	370c      	adds	r7, #12
 8011670:	46bd      	mov	sp, r7
 8011672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011676:	4770      	bx	lr

08011678 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b082      	sub	sp, #8
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011686:	2b03      	cmp	r3, #3
 8011688:	d10b      	bne.n	80116a2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011690:	69db      	ldr	r3, [r3, #28]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d005      	beq.n	80116a2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801169c:	69db      	ldr	r3, [r3, #28]
 801169e:	6878      	ldr	r0, [r7, #4]
 80116a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80116a2:	2300      	movs	r3, #0
}
 80116a4:	4618      	mov	r0, r3
 80116a6:	3708      	adds	r7, #8
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}

080116ac <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80116ac:	b480      	push	{r7}
 80116ae:	b083      	sub	sp, #12
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
 80116b4:	460b      	mov	r3, r1
 80116b6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80116b8:	2300      	movs	r3, #0
}
 80116ba:	4618      	mov	r0, r3
 80116bc:	370c      	adds	r7, #12
 80116be:	46bd      	mov	sp, r7
 80116c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c4:	4770      	bx	lr

080116c6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80116c6:	b480      	push	{r7}
 80116c8:	b083      	sub	sp, #12
 80116ca:	af00      	add	r7, sp, #0
 80116cc:	6078      	str	r0, [r7, #4]
 80116ce:	460b      	mov	r3, r1
 80116d0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80116d2:	2300      	movs	r3, #0
}
 80116d4:	4618      	mov	r0, r3
 80116d6:	370c      	adds	r7, #12
 80116d8:	46bd      	mov	sp, r7
 80116da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116de:	4770      	bx	lr

080116e0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80116e0:	b480      	push	{r7}
 80116e2:	b083      	sub	sp, #12
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80116e8:	2300      	movs	r3, #0
}
 80116ea:	4618      	mov	r0, r3
 80116ec:	370c      	adds	r7, #12
 80116ee:	46bd      	mov	sp, r7
 80116f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f4:	4770      	bx	lr

080116f6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80116f6:	b580      	push	{r7, lr}
 80116f8:	b082      	sub	sp, #8
 80116fa:	af00      	add	r7, sp, #0
 80116fc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2201      	movs	r2, #1
 8011702:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801170c:	2b00      	cmp	r3, #0
 801170e:	d009      	beq.n	8011724 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011716:	685b      	ldr	r3, [r3, #4]
 8011718:	687a      	ldr	r2, [r7, #4]
 801171a:	6852      	ldr	r2, [r2, #4]
 801171c:	b2d2      	uxtb	r2, r2
 801171e:	4611      	mov	r1, r2
 8011720:	6878      	ldr	r0, [r7, #4]
 8011722:	4798      	blx	r3
  }

  return USBD_OK;
 8011724:	2300      	movs	r3, #0
}
 8011726:	4618      	mov	r0, r3
 8011728:	3708      	adds	r7, #8
 801172a:	46bd      	mov	sp, r7
 801172c:	bd80      	pop	{r7, pc}

0801172e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801172e:	b480      	push	{r7}
 8011730:	b087      	sub	sp, #28
 8011732:	af00      	add	r7, sp, #0
 8011734:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801173a:	697b      	ldr	r3, [r7, #20]
 801173c:	781b      	ldrb	r3, [r3, #0]
 801173e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011740:	697b      	ldr	r3, [r7, #20]
 8011742:	3301      	adds	r3, #1
 8011744:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011746:	697b      	ldr	r3, [r7, #20]
 8011748:	781b      	ldrb	r3, [r3, #0]
 801174a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801174c:	8a3b      	ldrh	r3, [r7, #16]
 801174e:	021b      	lsls	r3, r3, #8
 8011750:	b21a      	sxth	r2, r3
 8011752:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011756:	4313      	orrs	r3, r2
 8011758:	b21b      	sxth	r3, r3
 801175a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801175c:	89fb      	ldrh	r3, [r7, #14]
}
 801175e:	4618      	mov	r0, r3
 8011760:	371c      	adds	r7, #28
 8011762:	46bd      	mov	sp, r7
 8011764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011768:	4770      	bx	lr
	...

0801176c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801176c:	b580      	push	{r7, lr}
 801176e:	b084      	sub	sp, #16
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
 8011774:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011776:	2300      	movs	r3, #0
 8011778:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801177a:	683b      	ldr	r3, [r7, #0]
 801177c:	781b      	ldrb	r3, [r3, #0]
 801177e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011782:	2b20      	cmp	r3, #32
 8011784:	d004      	beq.n	8011790 <USBD_StdDevReq+0x24>
 8011786:	2b40      	cmp	r3, #64	; 0x40
 8011788:	d002      	beq.n	8011790 <USBD_StdDevReq+0x24>
 801178a:	2b00      	cmp	r3, #0
 801178c:	d00a      	beq.n	80117a4 <USBD_StdDevReq+0x38>
 801178e:	e050      	b.n	8011832 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011796:	689b      	ldr	r3, [r3, #8]
 8011798:	6839      	ldr	r1, [r7, #0]
 801179a:	6878      	ldr	r0, [r7, #4]
 801179c:	4798      	blx	r3
 801179e:	4603      	mov	r3, r0
 80117a0:	73fb      	strb	r3, [r7, #15]
    break;
 80117a2:	e04b      	b.n	801183c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80117a4:	683b      	ldr	r3, [r7, #0]
 80117a6:	785b      	ldrb	r3, [r3, #1]
 80117a8:	2b09      	cmp	r3, #9
 80117aa:	d83c      	bhi.n	8011826 <USBD_StdDevReq+0xba>
 80117ac:	a201      	add	r2, pc, #4	; (adr r2, 80117b4 <USBD_StdDevReq+0x48>)
 80117ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117b2:	bf00      	nop
 80117b4:	08011809 	.word	0x08011809
 80117b8:	0801181d 	.word	0x0801181d
 80117bc:	08011827 	.word	0x08011827
 80117c0:	08011813 	.word	0x08011813
 80117c4:	08011827 	.word	0x08011827
 80117c8:	080117e7 	.word	0x080117e7
 80117cc:	080117dd 	.word	0x080117dd
 80117d0:	08011827 	.word	0x08011827
 80117d4:	080117ff 	.word	0x080117ff
 80117d8:	080117f1 	.word	0x080117f1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80117dc:	6839      	ldr	r1, [r7, #0]
 80117de:	6878      	ldr	r0, [r7, #4]
 80117e0:	f000 f9ce 	bl	8011b80 <USBD_GetDescriptor>
      break;
 80117e4:	e024      	b.n	8011830 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80117e6:	6839      	ldr	r1, [r7, #0]
 80117e8:	6878      	ldr	r0, [r7, #4]
 80117ea:	f000 fb33 	bl	8011e54 <USBD_SetAddress>
      break;
 80117ee:	e01f      	b.n	8011830 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80117f0:	6839      	ldr	r1, [r7, #0]
 80117f2:	6878      	ldr	r0, [r7, #4]
 80117f4:	f000 fb70 	bl	8011ed8 <USBD_SetConfig>
 80117f8:	4603      	mov	r3, r0
 80117fa:	73fb      	strb	r3, [r7, #15]
      break;
 80117fc:	e018      	b.n	8011830 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80117fe:	6839      	ldr	r1, [r7, #0]
 8011800:	6878      	ldr	r0, [r7, #4]
 8011802:	f000 fc0d 	bl	8012020 <USBD_GetConfig>
      break;
 8011806:	e013      	b.n	8011830 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8011808:	6839      	ldr	r1, [r7, #0]
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f000 fc3c 	bl	8012088 <USBD_GetStatus>
      break;
 8011810:	e00e      	b.n	8011830 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8011812:	6839      	ldr	r1, [r7, #0]
 8011814:	6878      	ldr	r0, [r7, #4]
 8011816:	f000 fc6a 	bl	80120ee <USBD_SetFeature>
      break;
 801181a:	e009      	b.n	8011830 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 801181c:	6839      	ldr	r1, [r7, #0]
 801181e:	6878      	ldr	r0, [r7, #4]
 8011820:	f000 fc79 	bl	8012116 <USBD_ClrFeature>
      break;
 8011824:	e004      	b.n	8011830 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8011826:	6839      	ldr	r1, [r7, #0]
 8011828:	6878      	ldr	r0, [r7, #4]
 801182a:	f000 fccf 	bl	80121cc <USBD_CtlError>
      break;
 801182e:	bf00      	nop
    }
    break;
 8011830:	e004      	b.n	801183c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8011832:	6839      	ldr	r1, [r7, #0]
 8011834:	6878      	ldr	r0, [r7, #4]
 8011836:	f000 fcc9 	bl	80121cc <USBD_CtlError>
    break;
 801183a:	bf00      	nop
  }

  return ret;
 801183c:	7bfb      	ldrb	r3, [r7, #15]
}
 801183e:	4618      	mov	r0, r3
 8011840:	3710      	adds	r7, #16
 8011842:	46bd      	mov	sp, r7
 8011844:	bd80      	pop	{r7, pc}
 8011846:	bf00      	nop

08011848 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011848:	b580      	push	{r7, lr}
 801184a:	b084      	sub	sp, #16
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
 8011850:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011852:	2300      	movs	r3, #0
 8011854:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011856:	683b      	ldr	r3, [r7, #0]
 8011858:	781b      	ldrb	r3, [r3, #0]
 801185a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801185e:	2b20      	cmp	r3, #32
 8011860:	d003      	beq.n	801186a <USBD_StdItfReq+0x22>
 8011862:	2b40      	cmp	r3, #64	; 0x40
 8011864:	d001      	beq.n	801186a <USBD_StdItfReq+0x22>
 8011866:	2b00      	cmp	r3, #0
 8011868:	d12a      	bne.n	80118c0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011870:	3b01      	subs	r3, #1
 8011872:	2b02      	cmp	r3, #2
 8011874:	d81d      	bhi.n	80118b2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011876:	683b      	ldr	r3, [r7, #0]
 8011878:	889b      	ldrh	r3, [r3, #4]
 801187a:	b2db      	uxtb	r3, r3
 801187c:	2b01      	cmp	r3, #1
 801187e:	d813      	bhi.n	80118a8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011886:	689b      	ldr	r3, [r3, #8]
 8011888:	6839      	ldr	r1, [r7, #0]
 801188a:	6878      	ldr	r0, [r7, #4]
 801188c:	4798      	blx	r3
 801188e:	4603      	mov	r3, r0
 8011890:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8011892:	683b      	ldr	r3, [r7, #0]
 8011894:	88db      	ldrh	r3, [r3, #6]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d110      	bne.n	80118bc <USBD_StdItfReq+0x74>
 801189a:	7bfb      	ldrb	r3, [r7, #15]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d10d      	bne.n	80118bc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80118a0:	6878      	ldr	r0, [r7, #4]
 80118a2:	f000 fd5e 	bl	8012362 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80118a6:	e009      	b.n	80118bc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80118a8:	6839      	ldr	r1, [r7, #0]
 80118aa:	6878      	ldr	r0, [r7, #4]
 80118ac:	f000 fc8e 	bl	80121cc <USBD_CtlError>
      break;
 80118b0:	e004      	b.n	80118bc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80118b2:	6839      	ldr	r1, [r7, #0]
 80118b4:	6878      	ldr	r0, [r7, #4]
 80118b6:	f000 fc89 	bl	80121cc <USBD_CtlError>
      break;
 80118ba:	e000      	b.n	80118be <USBD_StdItfReq+0x76>
      break;
 80118bc:	bf00      	nop
    }
    break;
 80118be:	e004      	b.n	80118ca <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80118c0:	6839      	ldr	r1, [r7, #0]
 80118c2:	6878      	ldr	r0, [r7, #4]
 80118c4:	f000 fc82 	bl	80121cc <USBD_CtlError>
    break;
 80118c8:	bf00      	nop
  }

  return ret;
 80118ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80118cc:	4618      	mov	r0, r3
 80118ce:	3710      	adds	r7, #16
 80118d0:	46bd      	mov	sp, r7
 80118d2:	bd80      	pop	{r7, pc}

080118d4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b084      	sub	sp, #16
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
 80118dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80118de:	2300      	movs	r3, #0
 80118e0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80118e2:	683b      	ldr	r3, [r7, #0]
 80118e4:	889b      	ldrh	r3, [r3, #4]
 80118e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80118e8:	683b      	ldr	r3, [r7, #0]
 80118ea:	781b      	ldrb	r3, [r3, #0]
 80118ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80118f0:	2b20      	cmp	r3, #32
 80118f2:	d004      	beq.n	80118fe <USBD_StdEPReq+0x2a>
 80118f4:	2b40      	cmp	r3, #64	; 0x40
 80118f6:	d002      	beq.n	80118fe <USBD_StdEPReq+0x2a>
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d00a      	beq.n	8011912 <USBD_StdEPReq+0x3e>
 80118fc:	e135      	b.n	8011b6a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011904:	689b      	ldr	r3, [r3, #8]
 8011906:	6839      	ldr	r1, [r7, #0]
 8011908:	6878      	ldr	r0, [r7, #4]
 801190a:	4798      	blx	r3
 801190c:	4603      	mov	r3, r0
 801190e:	73fb      	strb	r3, [r7, #15]
    break;
 8011910:	e130      	b.n	8011b74 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011912:	683b      	ldr	r3, [r7, #0]
 8011914:	785b      	ldrb	r3, [r3, #1]
 8011916:	2b01      	cmp	r3, #1
 8011918:	d03e      	beq.n	8011998 <USBD_StdEPReq+0xc4>
 801191a:	2b03      	cmp	r3, #3
 801191c:	d002      	beq.n	8011924 <USBD_StdEPReq+0x50>
 801191e:	2b00      	cmp	r3, #0
 8011920:	d077      	beq.n	8011a12 <USBD_StdEPReq+0x13e>
 8011922:	e11c      	b.n	8011b5e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801192a:	2b02      	cmp	r3, #2
 801192c:	d002      	beq.n	8011934 <USBD_StdEPReq+0x60>
 801192e:	2b03      	cmp	r3, #3
 8011930:	d015      	beq.n	801195e <USBD_StdEPReq+0x8a>
 8011932:	e02b      	b.n	801198c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011934:	7bbb      	ldrb	r3, [r7, #14]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d00c      	beq.n	8011954 <USBD_StdEPReq+0x80>
 801193a:	7bbb      	ldrb	r3, [r7, #14]
 801193c:	2b80      	cmp	r3, #128	; 0x80
 801193e:	d009      	beq.n	8011954 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011940:	7bbb      	ldrb	r3, [r7, #14]
 8011942:	4619      	mov	r1, r3
 8011944:	6878      	ldr	r0, [r7, #4]
 8011946:	f003 ffcd 	bl	80158e4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801194a:	2180      	movs	r1, #128	; 0x80
 801194c:	6878      	ldr	r0, [r7, #4]
 801194e:	f003 ffc9 	bl	80158e4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011952:	e020      	b.n	8011996 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8011954:	6839      	ldr	r1, [r7, #0]
 8011956:	6878      	ldr	r0, [r7, #4]
 8011958:	f000 fc38 	bl	80121cc <USBD_CtlError>
        break;
 801195c:	e01b      	b.n	8011996 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 801195e:	683b      	ldr	r3, [r7, #0]
 8011960:	885b      	ldrh	r3, [r3, #2]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d10e      	bne.n	8011984 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011966:	7bbb      	ldrb	r3, [r7, #14]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d00b      	beq.n	8011984 <USBD_StdEPReq+0xb0>
 801196c:	7bbb      	ldrb	r3, [r7, #14]
 801196e:	2b80      	cmp	r3, #128	; 0x80
 8011970:	d008      	beq.n	8011984 <USBD_StdEPReq+0xb0>
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	88db      	ldrh	r3, [r3, #6]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d104      	bne.n	8011984 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 801197a:	7bbb      	ldrb	r3, [r7, #14]
 801197c:	4619      	mov	r1, r3
 801197e:	6878      	ldr	r0, [r7, #4]
 8011980:	f003 ffb0 	bl	80158e4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8011984:	6878      	ldr	r0, [r7, #4]
 8011986:	f000 fcec 	bl	8012362 <USBD_CtlSendStatus>

        break;
 801198a:	e004      	b.n	8011996 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 801198c:	6839      	ldr	r1, [r7, #0]
 801198e:	6878      	ldr	r0, [r7, #4]
 8011990:	f000 fc1c 	bl	80121cc <USBD_CtlError>
        break;
 8011994:	bf00      	nop
      }
      break;
 8011996:	e0e7      	b.n	8011b68 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801199e:	2b02      	cmp	r3, #2
 80119a0:	d002      	beq.n	80119a8 <USBD_StdEPReq+0xd4>
 80119a2:	2b03      	cmp	r3, #3
 80119a4:	d015      	beq.n	80119d2 <USBD_StdEPReq+0xfe>
 80119a6:	e02d      	b.n	8011a04 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80119a8:	7bbb      	ldrb	r3, [r7, #14]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d00c      	beq.n	80119c8 <USBD_StdEPReq+0xf4>
 80119ae:	7bbb      	ldrb	r3, [r7, #14]
 80119b0:	2b80      	cmp	r3, #128	; 0x80
 80119b2:	d009      	beq.n	80119c8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80119b4:	7bbb      	ldrb	r3, [r7, #14]
 80119b6:	4619      	mov	r1, r3
 80119b8:	6878      	ldr	r0, [r7, #4]
 80119ba:	f003 ff93 	bl	80158e4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80119be:	2180      	movs	r1, #128	; 0x80
 80119c0:	6878      	ldr	r0, [r7, #4]
 80119c2:	f003 ff8f 	bl	80158e4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80119c6:	e023      	b.n	8011a10 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80119c8:	6839      	ldr	r1, [r7, #0]
 80119ca:	6878      	ldr	r0, [r7, #4]
 80119cc:	f000 fbfe 	bl	80121cc <USBD_CtlError>
        break;
 80119d0:	e01e      	b.n	8011a10 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80119d2:	683b      	ldr	r3, [r7, #0]
 80119d4:	885b      	ldrh	r3, [r3, #2]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d119      	bne.n	8011a0e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80119da:	7bbb      	ldrb	r3, [r7, #14]
 80119dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d004      	beq.n	80119ee <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80119e4:	7bbb      	ldrb	r3, [r7, #14]
 80119e6:	4619      	mov	r1, r3
 80119e8:	6878      	ldr	r0, [r7, #4]
 80119ea:	f003 ff9a 	bl	8015922 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80119ee:	6878      	ldr	r0, [r7, #4]
 80119f0:	f000 fcb7 	bl	8012362 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119fa:	689b      	ldr	r3, [r3, #8]
 80119fc:	6839      	ldr	r1, [r7, #0]
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	4798      	blx	r3
        }
        break;
 8011a02:	e004      	b.n	8011a0e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8011a04:	6839      	ldr	r1, [r7, #0]
 8011a06:	6878      	ldr	r0, [r7, #4]
 8011a08:	f000 fbe0 	bl	80121cc <USBD_CtlError>
        break;
 8011a0c:	e000      	b.n	8011a10 <USBD_StdEPReq+0x13c>
        break;
 8011a0e:	bf00      	nop
      }
      break;
 8011a10:	e0aa      	b.n	8011b68 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a18:	2b02      	cmp	r3, #2
 8011a1a:	d002      	beq.n	8011a22 <USBD_StdEPReq+0x14e>
 8011a1c:	2b03      	cmp	r3, #3
 8011a1e:	d032      	beq.n	8011a86 <USBD_StdEPReq+0x1b2>
 8011a20:	e097      	b.n	8011b52 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011a22:	7bbb      	ldrb	r3, [r7, #14]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d007      	beq.n	8011a38 <USBD_StdEPReq+0x164>
 8011a28:	7bbb      	ldrb	r3, [r7, #14]
 8011a2a:	2b80      	cmp	r3, #128	; 0x80
 8011a2c:	d004      	beq.n	8011a38 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8011a2e:	6839      	ldr	r1, [r7, #0]
 8011a30:	6878      	ldr	r0, [r7, #4]
 8011a32:	f000 fbcb 	bl	80121cc <USBD_CtlError>
          break;
 8011a36:	e091      	b.n	8011b5c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011a38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	da0b      	bge.n	8011a58 <USBD_StdEPReq+0x184>
 8011a40:	7bbb      	ldrb	r3, [r7, #14]
 8011a42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011a46:	4613      	mov	r3, r2
 8011a48:	009b      	lsls	r3, r3, #2
 8011a4a:	4413      	add	r3, r2
 8011a4c:	009b      	lsls	r3, r3, #2
 8011a4e:	3310      	adds	r3, #16
 8011a50:	687a      	ldr	r2, [r7, #4]
 8011a52:	4413      	add	r3, r2
 8011a54:	3304      	adds	r3, #4
 8011a56:	e00b      	b.n	8011a70 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011a58:	7bbb      	ldrb	r3, [r7, #14]
 8011a5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011a5e:	4613      	mov	r3, r2
 8011a60:	009b      	lsls	r3, r3, #2
 8011a62:	4413      	add	r3, r2
 8011a64:	009b      	lsls	r3, r3, #2
 8011a66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011a6a:	687a      	ldr	r2, [r7, #4]
 8011a6c:	4413      	add	r3, r2
 8011a6e:	3304      	adds	r3, #4
 8011a70:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8011a72:	68bb      	ldr	r3, [r7, #8]
 8011a74:	2200      	movs	r2, #0
 8011a76:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	2202      	movs	r2, #2
 8011a7c:	4619      	mov	r1, r3
 8011a7e:	6878      	ldr	r0, [r7, #4]
 8011a80:	f000 fc15 	bl	80122ae <USBD_CtlSendData>
        break;
 8011a84:	e06a      	b.n	8011b5c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8011a86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	da11      	bge.n	8011ab2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011a8e:	7bbb      	ldrb	r3, [r7, #14]
 8011a90:	f003 020f 	and.w	r2, r3, #15
 8011a94:	6879      	ldr	r1, [r7, #4]
 8011a96:	4613      	mov	r3, r2
 8011a98:	009b      	lsls	r3, r3, #2
 8011a9a:	4413      	add	r3, r2
 8011a9c:	009b      	lsls	r3, r3, #2
 8011a9e:	440b      	add	r3, r1
 8011aa0:	3324      	adds	r3, #36	; 0x24
 8011aa2:	881b      	ldrh	r3, [r3, #0]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d117      	bne.n	8011ad8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8011aa8:	6839      	ldr	r1, [r7, #0]
 8011aaa:	6878      	ldr	r0, [r7, #4]
 8011aac:	f000 fb8e 	bl	80121cc <USBD_CtlError>
            break;
 8011ab0:	e054      	b.n	8011b5c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011ab2:	7bbb      	ldrb	r3, [r7, #14]
 8011ab4:	f003 020f 	and.w	r2, r3, #15
 8011ab8:	6879      	ldr	r1, [r7, #4]
 8011aba:	4613      	mov	r3, r2
 8011abc:	009b      	lsls	r3, r3, #2
 8011abe:	4413      	add	r3, r2
 8011ac0:	009b      	lsls	r3, r3, #2
 8011ac2:	440b      	add	r3, r1
 8011ac4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011ac8:	881b      	ldrh	r3, [r3, #0]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d104      	bne.n	8011ad8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8011ace:	6839      	ldr	r1, [r7, #0]
 8011ad0:	6878      	ldr	r0, [r7, #4]
 8011ad2:	f000 fb7b 	bl	80121cc <USBD_CtlError>
            break;
 8011ad6:	e041      	b.n	8011b5c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011ad8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	da0b      	bge.n	8011af8 <USBD_StdEPReq+0x224>
 8011ae0:	7bbb      	ldrb	r3, [r7, #14]
 8011ae2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011ae6:	4613      	mov	r3, r2
 8011ae8:	009b      	lsls	r3, r3, #2
 8011aea:	4413      	add	r3, r2
 8011aec:	009b      	lsls	r3, r3, #2
 8011aee:	3310      	adds	r3, #16
 8011af0:	687a      	ldr	r2, [r7, #4]
 8011af2:	4413      	add	r3, r2
 8011af4:	3304      	adds	r3, #4
 8011af6:	e00b      	b.n	8011b10 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011af8:	7bbb      	ldrb	r3, [r7, #14]
 8011afa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011afe:	4613      	mov	r3, r2
 8011b00:	009b      	lsls	r3, r3, #2
 8011b02:	4413      	add	r3, r2
 8011b04:	009b      	lsls	r3, r3, #2
 8011b06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011b0a:	687a      	ldr	r2, [r7, #4]
 8011b0c:	4413      	add	r3, r2
 8011b0e:	3304      	adds	r3, #4
 8011b10:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011b12:	7bbb      	ldrb	r3, [r7, #14]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d002      	beq.n	8011b1e <USBD_StdEPReq+0x24a>
 8011b18:	7bbb      	ldrb	r3, [r7, #14]
 8011b1a:	2b80      	cmp	r3, #128	; 0x80
 8011b1c:	d103      	bne.n	8011b26 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8011b1e:	68bb      	ldr	r3, [r7, #8]
 8011b20:	2200      	movs	r2, #0
 8011b22:	601a      	str	r2, [r3, #0]
 8011b24:	e00e      	b.n	8011b44 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011b26:	7bbb      	ldrb	r3, [r7, #14]
 8011b28:	4619      	mov	r1, r3
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	f003 ff18 	bl	8015960 <USBD_LL_IsStallEP>
 8011b30:	4603      	mov	r3, r0
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d003      	beq.n	8011b3e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8011b36:	68bb      	ldr	r3, [r7, #8]
 8011b38:	2201      	movs	r2, #1
 8011b3a:	601a      	str	r2, [r3, #0]
 8011b3c:	e002      	b.n	8011b44 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8011b3e:	68bb      	ldr	r3, [r7, #8]
 8011b40:	2200      	movs	r2, #0
 8011b42:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011b44:	68bb      	ldr	r3, [r7, #8]
 8011b46:	2202      	movs	r2, #2
 8011b48:	4619      	mov	r1, r3
 8011b4a:	6878      	ldr	r0, [r7, #4]
 8011b4c:	f000 fbaf 	bl	80122ae <USBD_CtlSendData>
          break;
 8011b50:	e004      	b.n	8011b5c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8011b52:	6839      	ldr	r1, [r7, #0]
 8011b54:	6878      	ldr	r0, [r7, #4]
 8011b56:	f000 fb39 	bl	80121cc <USBD_CtlError>
        break;
 8011b5a:	bf00      	nop
      }
      break;
 8011b5c:	e004      	b.n	8011b68 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8011b5e:	6839      	ldr	r1, [r7, #0]
 8011b60:	6878      	ldr	r0, [r7, #4]
 8011b62:	f000 fb33 	bl	80121cc <USBD_CtlError>
      break;
 8011b66:	bf00      	nop
    }
    break;
 8011b68:	e004      	b.n	8011b74 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8011b6a:	6839      	ldr	r1, [r7, #0]
 8011b6c:	6878      	ldr	r0, [r7, #4]
 8011b6e:	f000 fb2d 	bl	80121cc <USBD_CtlError>
    break;
 8011b72:	bf00      	nop
  }

  return ret;
 8011b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b76:	4618      	mov	r0, r3
 8011b78:	3710      	adds	r7, #16
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd80      	pop	{r7, pc}
	...

08011b80 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b084      	sub	sp, #16
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
 8011b88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011b8e:	2300      	movs	r3, #0
 8011b90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011b92:	2300      	movs	r3, #0
 8011b94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	885b      	ldrh	r3, [r3, #2]
 8011b9a:	0a1b      	lsrs	r3, r3, #8
 8011b9c:	b29b      	uxth	r3, r3
 8011b9e:	3b01      	subs	r3, #1
 8011ba0:	2b06      	cmp	r3, #6
 8011ba2:	f200 8128 	bhi.w	8011df6 <USBD_GetDescriptor+0x276>
 8011ba6:	a201      	add	r2, pc, #4	; (adr r2, 8011bac <USBD_GetDescriptor+0x2c>)
 8011ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bac:	08011bc9 	.word	0x08011bc9
 8011bb0:	08011be1 	.word	0x08011be1
 8011bb4:	08011c21 	.word	0x08011c21
 8011bb8:	08011df7 	.word	0x08011df7
 8011bbc:	08011df7 	.word	0x08011df7
 8011bc0:	08011d97 	.word	0x08011d97
 8011bc4:	08011dc3 	.word	0x08011dc3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	687a      	ldr	r2, [r7, #4]
 8011bd2:	7c12      	ldrb	r2, [r2, #16]
 8011bd4:	f107 0108 	add.w	r1, r7, #8
 8011bd8:	4610      	mov	r0, r2
 8011bda:	4798      	blx	r3
 8011bdc:	60f8      	str	r0, [r7, #12]
    break;
 8011bde:	e112      	b.n	8011e06 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	7c1b      	ldrb	r3, [r3, #16]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d10d      	bne.n	8011c04 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bf0:	f107 0208 	add.w	r2, r7, #8
 8011bf4:	4610      	mov	r0, r2
 8011bf6:	4798      	blx	r3
 8011bf8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	3301      	adds	r3, #1
 8011bfe:	2202      	movs	r2, #2
 8011c00:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8011c02:	e100      	b.n	8011e06 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c0c:	f107 0208 	add.w	r2, r7, #8
 8011c10:	4610      	mov	r0, r2
 8011c12:	4798      	blx	r3
 8011c14:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	3301      	adds	r3, #1
 8011c1a:	2202      	movs	r2, #2
 8011c1c:	701a      	strb	r2, [r3, #0]
    break;
 8011c1e:	e0f2      	b.n	8011e06 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8011c20:	683b      	ldr	r3, [r7, #0]
 8011c22:	885b      	ldrh	r3, [r3, #2]
 8011c24:	b2db      	uxtb	r3, r3
 8011c26:	2b05      	cmp	r3, #5
 8011c28:	f200 80ac 	bhi.w	8011d84 <USBD_GetDescriptor+0x204>
 8011c2c:	a201      	add	r2, pc, #4	; (adr r2, 8011c34 <USBD_GetDescriptor+0xb4>)
 8011c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c32:	bf00      	nop
 8011c34:	08011c4d 	.word	0x08011c4d
 8011c38:	08011c81 	.word	0x08011c81
 8011c3c:	08011cb5 	.word	0x08011cb5
 8011c40:	08011ce9 	.word	0x08011ce9
 8011c44:	08011d1d 	.word	0x08011d1d
 8011c48:	08011d51 	.word	0x08011d51
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c52:	685b      	ldr	r3, [r3, #4]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d00b      	beq.n	8011c70 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c5e:	685b      	ldr	r3, [r3, #4]
 8011c60:	687a      	ldr	r2, [r7, #4]
 8011c62:	7c12      	ldrb	r2, [r2, #16]
 8011c64:	f107 0108 	add.w	r1, r7, #8
 8011c68:	4610      	mov	r0, r2
 8011c6a:	4798      	blx	r3
 8011c6c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011c6e:	e091      	b.n	8011d94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011c70:	6839      	ldr	r1, [r7, #0]
 8011c72:	6878      	ldr	r0, [r7, #4]
 8011c74:	f000 faaa 	bl	80121cc <USBD_CtlError>
        err++;
 8011c78:	7afb      	ldrb	r3, [r7, #11]
 8011c7a:	3301      	adds	r3, #1
 8011c7c:	72fb      	strb	r3, [r7, #11]
      break;
 8011c7e:	e089      	b.n	8011d94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c86:	689b      	ldr	r3, [r3, #8]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d00b      	beq.n	8011ca4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c92:	689b      	ldr	r3, [r3, #8]
 8011c94:	687a      	ldr	r2, [r7, #4]
 8011c96:	7c12      	ldrb	r2, [r2, #16]
 8011c98:	f107 0108 	add.w	r1, r7, #8
 8011c9c:	4610      	mov	r0, r2
 8011c9e:	4798      	blx	r3
 8011ca0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011ca2:	e077      	b.n	8011d94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011ca4:	6839      	ldr	r1, [r7, #0]
 8011ca6:	6878      	ldr	r0, [r7, #4]
 8011ca8:	f000 fa90 	bl	80121cc <USBD_CtlError>
        err++;
 8011cac:	7afb      	ldrb	r3, [r7, #11]
 8011cae:	3301      	adds	r3, #1
 8011cb0:	72fb      	strb	r3, [r7, #11]
      break;
 8011cb2:	e06f      	b.n	8011d94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011cba:	68db      	ldr	r3, [r3, #12]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d00b      	beq.n	8011cd8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011cc6:	68db      	ldr	r3, [r3, #12]
 8011cc8:	687a      	ldr	r2, [r7, #4]
 8011cca:	7c12      	ldrb	r2, [r2, #16]
 8011ccc:	f107 0108 	add.w	r1, r7, #8
 8011cd0:	4610      	mov	r0, r2
 8011cd2:	4798      	blx	r3
 8011cd4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011cd6:	e05d      	b.n	8011d94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011cd8:	6839      	ldr	r1, [r7, #0]
 8011cda:	6878      	ldr	r0, [r7, #4]
 8011cdc:	f000 fa76 	bl	80121cc <USBD_CtlError>
        err++;
 8011ce0:	7afb      	ldrb	r3, [r7, #11]
 8011ce2:	3301      	adds	r3, #1
 8011ce4:	72fb      	strb	r3, [r7, #11]
      break;
 8011ce6:	e055      	b.n	8011d94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011cee:	691b      	ldr	r3, [r3, #16]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d00b      	beq.n	8011d0c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011cfa:	691b      	ldr	r3, [r3, #16]
 8011cfc:	687a      	ldr	r2, [r7, #4]
 8011cfe:	7c12      	ldrb	r2, [r2, #16]
 8011d00:	f107 0108 	add.w	r1, r7, #8
 8011d04:	4610      	mov	r0, r2
 8011d06:	4798      	blx	r3
 8011d08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011d0a:	e043      	b.n	8011d94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011d0c:	6839      	ldr	r1, [r7, #0]
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f000 fa5c 	bl	80121cc <USBD_CtlError>
        err++;
 8011d14:	7afb      	ldrb	r3, [r7, #11]
 8011d16:	3301      	adds	r3, #1
 8011d18:	72fb      	strb	r3, [r7, #11]
      break;
 8011d1a:	e03b      	b.n	8011d94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d22:	695b      	ldr	r3, [r3, #20]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d00b      	beq.n	8011d40 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d2e:	695b      	ldr	r3, [r3, #20]
 8011d30:	687a      	ldr	r2, [r7, #4]
 8011d32:	7c12      	ldrb	r2, [r2, #16]
 8011d34:	f107 0108 	add.w	r1, r7, #8
 8011d38:	4610      	mov	r0, r2
 8011d3a:	4798      	blx	r3
 8011d3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011d3e:	e029      	b.n	8011d94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011d40:	6839      	ldr	r1, [r7, #0]
 8011d42:	6878      	ldr	r0, [r7, #4]
 8011d44:	f000 fa42 	bl	80121cc <USBD_CtlError>
        err++;
 8011d48:	7afb      	ldrb	r3, [r7, #11]
 8011d4a:	3301      	adds	r3, #1
 8011d4c:	72fb      	strb	r3, [r7, #11]
      break;
 8011d4e:	e021      	b.n	8011d94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d56:	699b      	ldr	r3, [r3, #24]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d00b      	beq.n	8011d74 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d62:	699b      	ldr	r3, [r3, #24]
 8011d64:	687a      	ldr	r2, [r7, #4]
 8011d66:	7c12      	ldrb	r2, [r2, #16]
 8011d68:	f107 0108 	add.w	r1, r7, #8
 8011d6c:	4610      	mov	r0, r2
 8011d6e:	4798      	blx	r3
 8011d70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011d72:	e00f      	b.n	8011d94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011d74:	6839      	ldr	r1, [r7, #0]
 8011d76:	6878      	ldr	r0, [r7, #4]
 8011d78:	f000 fa28 	bl	80121cc <USBD_CtlError>
        err++;
 8011d7c:	7afb      	ldrb	r3, [r7, #11]
 8011d7e:	3301      	adds	r3, #1
 8011d80:	72fb      	strb	r3, [r7, #11]
      break;
 8011d82:	e007      	b.n	8011d94 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8011d84:	6839      	ldr	r1, [r7, #0]
 8011d86:	6878      	ldr	r0, [r7, #4]
 8011d88:	f000 fa20 	bl	80121cc <USBD_CtlError>
      err++;
 8011d8c:	7afb      	ldrb	r3, [r7, #11]
 8011d8e:	3301      	adds	r3, #1
 8011d90:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8011d92:	bf00      	nop
    }
    break;
 8011d94:	e037      	b.n	8011e06 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	7c1b      	ldrb	r3, [r3, #16]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d109      	bne.n	8011db2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011da6:	f107 0208 	add.w	r2, r7, #8
 8011daa:	4610      	mov	r0, r2
 8011dac:	4798      	blx	r3
 8011dae:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011db0:	e029      	b.n	8011e06 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8011db2:	6839      	ldr	r1, [r7, #0]
 8011db4:	6878      	ldr	r0, [r7, #4]
 8011db6:	f000 fa09 	bl	80121cc <USBD_CtlError>
      err++;
 8011dba:	7afb      	ldrb	r3, [r7, #11]
 8011dbc:	3301      	adds	r3, #1
 8011dbe:	72fb      	strb	r3, [r7, #11]
    break;
 8011dc0:	e021      	b.n	8011e06 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	7c1b      	ldrb	r3, [r3, #16]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d10d      	bne.n	8011de6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011dd2:	f107 0208 	add.w	r2, r7, #8
 8011dd6:	4610      	mov	r0, r2
 8011dd8:	4798      	blx	r3
 8011dda:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	3301      	adds	r3, #1
 8011de0:	2207      	movs	r2, #7
 8011de2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011de4:	e00f      	b.n	8011e06 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8011de6:	6839      	ldr	r1, [r7, #0]
 8011de8:	6878      	ldr	r0, [r7, #4]
 8011dea:	f000 f9ef 	bl	80121cc <USBD_CtlError>
      err++;
 8011dee:	7afb      	ldrb	r3, [r7, #11]
 8011df0:	3301      	adds	r3, #1
 8011df2:	72fb      	strb	r3, [r7, #11]
    break;
 8011df4:	e007      	b.n	8011e06 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8011df6:	6839      	ldr	r1, [r7, #0]
 8011df8:	6878      	ldr	r0, [r7, #4]
 8011dfa:	f000 f9e7 	bl	80121cc <USBD_CtlError>
    err++;
 8011dfe:	7afb      	ldrb	r3, [r7, #11]
 8011e00:	3301      	adds	r3, #1
 8011e02:	72fb      	strb	r3, [r7, #11]
    break;
 8011e04:	bf00      	nop
  }

  if (err != 0U)
 8011e06:	7afb      	ldrb	r3, [r7, #11]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d11e      	bne.n	8011e4a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8011e0c:	683b      	ldr	r3, [r7, #0]
 8011e0e:	88db      	ldrh	r3, [r3, #6]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d016      	beq.n	8011e42 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8011e14:	893b      	ldrh	r3, [r7, #8]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d00e      	beq.n	8011e38 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8011e1a:	683b      	ldr	r3, [r7, #0]
 8011e1c:	88da      	ldrh	r2, [r3, #6]
 8011e1e:	893b      	ldrh	r3, [r7, #8]
 8011e20:	4293      	cmp	r3, r2
 8011e22:	bf28      	it	cs
 8011e24:	4613      	movcs	r3, r2
 8011e26:	b29b      	uxth	r3, r3
 8011e28:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8011e2a:	893b      	ldrh	r3, [r7, #8]
 8011e2c:	461a      	mov	r2, r3
 8011e2e:	68f9      	ldr	r1, [r7, #12]
 8011e30:	6878      	ldr	r0, [r7, #4]
 8011e32:	f000 fa3c 	bl	80122ae <USBD_CtlSendData>
 8011e36:	e009      	b.n	8011e4c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8011e38:	6839      	ldr	r1, [r7, #0]
 8011e3a:	6878      	ldr	r0, [r7, #4]
 8011e3c:	f000 f9c6 	bl	80121cc <USBD_CtlError>
 8011e40:	e004      	b.n	8011e4c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8011e42:	6878      	ldr	r0, [r7, #4]
 8011e44:	f000 fa8d 	bl	8012362 <USBD_CtlSendStatus>
 8011e48:	e000      	b.n	8011e4c <USBD_GetDescriptor+0x2cc>
    return;
 8011e4a:	bf00      	nop
    }
  }
}
 8011e4c:	3710      	adds	r7, #16
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	bd80      	pop	{r7, pc}
 8011e52:	bf00      	nop

08011e54 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b084      	sub	sp, #16
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
 8011e5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011e5e:	683b      	ldr	r3, [r7, #0]
 8011e60:	889b      	ldrh	r3, [r3, #4]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d130      	bne.n	8011ec8 <USBD_SetAddress+0x74>
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	88db      	ldrh	r3, [r3, #6]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d12c      	bne.n	8011ec8 <USBD_SetAddress+0x74>
 8011e6e:	683b      	ldr	r3, [r7, #0]
 8011e70:	885b      	ldrh	r3, [r3, #2]
 8011e72:	2b7f      	cmp	r3, #127	; 0x7f
 8011e74:	d828      	bhi.n	8011ec8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011e76:	683b      	ldr	r3, [r7, #0]
 8011e78:	885b      	ldrh	r3, [r3, #2]
 8011e7a:	b2db      	uxtb	r3, r3
 8011e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e88:	2b03      	cmp	r3, #3
 8011e8a:	d104      	bne.n	8011e96 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8011e8c:	6839      	ldr	r1, [r7, #0]
 8011e8e:	6878      	ldr	r0, [r7, #4]
 8011e90:	f000 f99c 	bl	80121cc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e94:	e01c      	b.n	8011ed0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	7bfa      	ldrb	r2, [r7, #15]
 8011e9a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011e9e:	7bfb      	ldrb	r3, [r7, #15]
 8011ea0:	4619      	mov	r1, r3
 8011ea2:	6878      	ldr	r0, [r7, #4]
 8011ea4:	f003 fd88 	bl	80159b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011ea8:	6878      	ldr	r0, [r7, #4]
 8011eaa:	f000 fa5a 	bl	8012362 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011eae:	7bfb      	ldrb	r3, [r7, #15]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d004      	beq.n	8011ebe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	2202      	movs	r2, #2
 8011eb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ebc:	e008      	b.n	8011ed0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	2201      	movs	r2, #1
 8011ec2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ec6:	e003      	b.n	8011ed0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011ec8:	6839      	ldr	r1, [r7, #0]
 8011eca:	6878      	ldr	r0, [r7, #4]
 8011ecc:	f000 f97e 	bl	80121cc <USBD_CtlError>
  }
}
 8011ed0:	bf00      	nop
 8011ed2:	3710      	adds	r7, #16
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bd80      	pop	{r7, pc}

08011ed8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b084      	sub	sp, #16
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
 8011ee0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011ee6:	683b      	ldr	r3, [r7, #0]
 8011ee8:	885b      	ldrh	r3, [r3, #2]
 8011eea:	b2da      	uxtb	r2, r3
 8011eec:	4b4b      	ldr	r3, [pc, #300]	; (801201c <USBD_SetConfig+0x144>)
 8011eee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011ef0:	4b4a      	ldr	r3, [pc, #296]	; (801201c <USBD_SetConfig+0x144>)
 8011ef2:	781b      	ldrb	r3, [r3, #0]
 8011ef4:	2b01      	cmp	r3, #1
 8011ef6:	d905      	bls.n	8011f04 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011ef8:	6839      	ldr	r1, [r7, #0]
 8011efa:	6878      	ldr	r0, [r7, #4]
 8011efc:	f000 f966 	bl	80121cc <USBD_CtlError>
    return USBD_FAIL;
 8011f00:	2303      	movs	r3, #3
 8011f02:	e087      	b.n	8012014 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f0a:	2b02      	cmp	r3, #2
 8011f0c:	d002      	beq.n	8011f14 <USBD_SetConfig+0x3c>
 8011f0e:	2b03      	cmp	r3, #3
 8011f10:	d025      	beq.n	8011f5e <USBD_SetConfig+0x86>
 8011f12:	e071      	b.n	8011ff8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8011f14:	4b41      	ldr	r3, [pc, #260]	; (801201c <USBD_SetConfig+0x144>)
 8011f16:	781b      	ldrb	r3, [r3, #0]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d01c      	beq.n	8011f56 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8011f1c:	4b3f      	ldr	r3, [pc, #252]	; (801201c <USBD_SetConfig+0x144>)
 8011f1e:	781b      	ldrb	r3, [r3, #0]
 8011f20:	461a      	mov	r2, r3
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8011f26:	4b3d      	ldr	r3, [pc, #244]	; (801201c <USBD_SetConfig+0x144>)
 8011f28:	781b      	ldrb	r3, [r3, #0]
 8011f2a:	4619      	mov	r1, r3
 8011f2c:	6878      	ldr	r0, [r7, #4]
 8011f2e:	f7ff f9a7 	bl	8011280 <USBD_SetClassConfig>
 8011f32:	4603      	mov	r3, r0
 8011f34:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8011f36:	7bfb      	ldrb	r3, [r7, #15]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d004      	beq.n	8011f46 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8011f3c:	6839      	ldr	r1, [r7, #0]
 8011f3e:	6878      	ldr	r0, [r7, #4]
 8011f40:	f000 f944 	bl	80121cc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8011f44:	e065      	b.n	8012012 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8011f46:	6878      	ldr	r0, [r7, #4]
 8011f48:	f000 fa0b 	bl	8012362 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	2203      	movs	r2, #3
 8011f50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8011f54:	e05d      	b.n	8012012 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8011f56:	6878      	ldr	r0, [r7, #4]
 8011f58:	f000 fa03 	bl	8012362 <USBD_CtlSendStatus>
    break;
 8011f5c:	e059      	b.n	8012012 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8011f5e:	4b2f      	ldr	r3, [pc, #188]	; (801201c <USBD_SetConfig+0x144>)
 8011f60:	781b      	ldrb	r3, [r3, #0]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d112      	bne.n	8011f8c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	2202      	movs	r2, #2
 8011f6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8011f6e:	4b2b      	ldr	r3, [pc, #172]	; (801201c <USBD_SetConfig+0x144>)
 8011f70:	781b      	ldrb	r3, [r3, #0]
 8011f72:	461a      	mov	r2, r3
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011f78:	4b28      	ldr	r3, [pc, #160]	; (801201c <USBD_SetConfig+0x144>)
 8011f7a:	781b      	ldrb	r3, [r3, #0]
 8011f7c:	4619      	mov	r1, r3
 8011f7e:	6878      	ldr	r0, [r7, #4]
 8011f80:	f7ff f99a 	bl	80112b8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8011f84:	6878      	ldr	r0, [r7, #4]
 8011f86:	f000 f9ec 	bl	8012362 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8011f8a:	e042      	b.n	8012012 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8011f8c:	4b23      	ldr	r3, [pc, #140]	; (801201c <USBD_SetConfig+0x144>)
 8011f8e:	781b      	ldrb	r3, [r3, #0]
 8011f90:	461a      	mov	r2, r3
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	685b      	ldr	r3, [r3, #4]
 8011f96:	429a      	cmp	r2, r3
 8011f98:	d02a      	beq.n	8011ff0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	685b      	ldr	r3, [r3, #4]
 8011f9e:	b2db      	uxtb	r3, r3
 8011fa0:	4619      	mov	r1, r3
 8011fa2:	6878      	ldr	r0, [r7, #4]
 8011fa4:	f7ff f988 	bl	80112b8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8011fa8:	4b1c      	ldr	r3, [pc, #112]	; (801201c <USBD_SetConfig+0x144>)
 8011faa:	781b      	ldrb	r3, [r3, #0]
 8011fac:	461a      	mov	r2, r3
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8011fb2:	4b1a      	ldr	r3, [pc, #104]	; (801201c <USBD_SetConfig+0x144>)
 8011fb4:	781b      	ldrb	r3, [r3, #0]
 8011fb6:	4619      	mov	r1, r3
 8011fb8:	6878      	ldr	r0, [r7, #4]
 8011fba:	f7ff f961 	bl	8011280 <USBD_SetClassConfig>
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8011fc2:	7bfb      	ldrb	r3, [r7, #15]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d00f      	beq.n	8011fe8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8011fc8:	6839      	ldr	r1, [r7, #0]
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f000 f8fe 	bl	80121cc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	685b      	ldr	r3, [r3, #4]
 8011fd4:	b2db      	uxtb	r3, r3
 8011fd6:	4619      	mov	r1, r3
 8011fd8:	6878      	ldr	r0, [r7, #4]
 8011fda:	f7ff f96d 	bl	80112b8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	2202      	movs	r2, #2
 8011fe2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8011fe6:	e014      	b.n	8012012 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8011fe8:	6878      	ldr	r0, [r7, #4]
 8011fea:	f000 f9ba 	bl	8012362 <USBD_CtlSendStatus>
    break;
 8011fee:	e010      	b.n	8012012 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f000 f9b6 	bl	8012362 <USBD_CtlSendStatus>
    break;
 8011ff6:	e00c      	b.n	8012012 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8011ff8:	6839      	ldr	r1, [r7, #0]
 8011ffa:	6878      	ldr	r0, [r7, #4]
 8011ffc:	f000 f8e6 	bl	80121cc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012000:	4b06      	ldr	r3, [pc, #24]	; (801201c <USBD_SetConfig+0x144>)
 8012002:	781b      	ldrb	r3, [r3, #0]
 8012004:	4619      	mov	r1, r3
 8012006:	6878      	ldr	r0, [r7, #4]
 8012008:	f7ff f956 	bl	80112b8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 801200c:	2303      	movs	r3, #3
 801200e:	73fb      	strb	r3, [r7, #15]
    break;
 8012010:	bf00      	nop
  }

  return ret;
 8012012:	7bfb      	ldrb	r3, [r7, #15]
}
 8012014:	4618      	mov	r0, r3
 8012016:	3710      	adds	r7, #16
 8012018:	46bd      	mov	sp, r7
 801201a:	bd80      	pop	{r7, pc}
 801201c:	20001008 	.word	0x20001008

08012020 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b082      	sub	sp, #8
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
 8012028:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801202a:	683b      	ldr	r3, [r7, #0]
 801202c:	88db      	ldrh	r3, [r3, #6]
 801202e:	2b01      	cmp	r3, #1
 8012030:	d004      	beq.n	801203c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012032:	6839      	ldr	r1, [r7, #0]
 8012034:	6878      	ldr	r0, [r7, #4]
 8012036:	f000 f8c9 	bl	80121cc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 801203a:	e021      	b.n	8012080 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012042:	2b01      	cmp	r3, #1
 8012044:	db17      	blt.n	8012076 <USBD_GetConfig+0x56>
 8012046:	2b02      	cmp	r3, #2
 8012048:	dd02      	ble.n	8012050 <USBD_GetConfig+0x30>
 801204a:	2b03      	cmp	r3, #3
 801204c:	d00b      	beq.n	8012066 <USBD_GetConfig+0x46>
 801204e:	e012      	b.n	8012076 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	2200      	movs	r2, #0
 8012054:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	3308      	adds	r3, #8
 801205a:	2201      	movs	r2, #1
 801205c:	4619      	mov	r1, r3
 801205e:	6878      	ldr	r0, [r7, #4]
 8012060:	f000 f925 	bl	80122ae <USBD_CtlSendData>
      break;
 8012064:	e00c      	b.n	8012080 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	3304      	adds	r3, #4
 801206a:	2201      	movs	r2, #1
 801206c:	4619      	mov	r1, r3
 801206e:	6878      	ldr	r0, [r7, #4]
 8012070:	f000 f91d 	bl	80122ae <USBD_CtlSendData>
      break;
 8012074:	e004      	b.n	8012080 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8012076:	6839      	ldr	r1, [r7, #0]
 8012078:	6878      	ldr	r0, [r7, #4]
 801207a:	f000 f8a7 	bl	80121cc <USBD_CtlError>
      break;
 801207e:	bf00      	nop
}
 8012080:	bf00      	nop
 8012082:	3708      	adds	r7, #8
 8012084:	46bd      	mov	sp, r7
 8012086:	bd80      	pop	{r7, pc}

08012088 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b082      	sub	sp, #8
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
 8012090:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012098:	3b01      	subs	r3, #1
 801209a:	2b02      	cmp	r3, #2
 801209c:	d81e      	bhi.n	80120dc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	88db      	ldrh	r3, [r3, #6]
 80120a2:	2b02      	cmp	r3, #2
 80120a4:	d004      	beq.n	80120b0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80120a6:	6839      	ldr	r1, [r7, #0]
 80120a8:	6878      	ldr	r0, [r7, #4]
 80120aa:	f000 f88f 	bl	80121cc <USBD_CtlError>
      break;
 80120ae:	e01a      	b.n	80120e6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	2201      	movs	r2, #1
 80120b4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d005      	beq.n	80120cc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	68db      	ldr	r3, [r3, #12]
 80120c4:	f043 0202 	orr.w	r2, r3, #2
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	330c      	adds	r3, #12
 80120d0:	2202      	movs	r2, #2
 80120d2:	4619      	mov	r1, r3
 80120d4:	6878      	ldr	r0, [r7, #4]
 80120d6:	f000 f8ea 	bl	80122ae <USBD_CtlSendData>
    break;
 80120da:	e004      	b.n	80120e6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80120dc:	6839      	ldr	r1, [r7, #0]
 80120de:	6878      	ldr	r0, [r7, #4]
 80120e0:	f000 f874 	bl	80121cc <USBD_CtlError>
    break;
 80120e4:	bf00      	nop
  }
}
 80120e6:	bf00      	nop
 80120e8:	3708      	adds	r7, #8
 80120ea:	46bd      	mov	sp, r7
 80120ec:	bd80      	pop	{r7, pc}

080120ee <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80120ee:	b580      	push	{r7, lr}
 80120f0:	b082      	sub	sp, #8
 80120f2:	af00      	add	r7, sp, #0
 80120f4:	6078      	str	r0, [r7, #4]
 80120f6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80120f8:	683b      	ldr	r3, [r7, #0]
 80120fa:	885b      	ldrh	r3, [r3, #2]
 80120fc:	2b01      	cmp	r3, #1
 80120fe:	d106      	bne.n	801210e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	2201      	movs	r2, #1
 8012104:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012108:	6878      	ldr	r0, [r7, #4]
 801210a:	f000 f92a 	bl	8012362 <USBD_CtlSendStatus>
  }
}
 801210e:	bf00      	nop
 8012110:	3708      	adds	r7, #8
 8012112:	46bd      	mov	sp, r7
 8012114:	bd80      	pop	{r7, pc}

08012116 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012116:	b580      	push	{r7, lr}
 8012118:	b082      	sub	sp, #8
 801211a:	af00      	add	r7, sp, #0
 801211c:	6078      	str	r0, [r7, #4]
 801211e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012126:	3b01      	subs	r3, #1
 8012128:	2b02      	cmp	r3, #2
 801212a:	d80b      	bhi.n	8012144 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801212c:	683b      	ldr	r3, [r7, #0]
 801212e:	885b      	ldrh	r3, [r3, #2]
 8012130:	2b01      	cmp	r3, #1
 8012132:	d10c      	bne.n	801214e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	2200      	movs	r2, #0
 8012138:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801213c:	6878      	ldr	r0, [r7, #4]
 801213e:	f000 f910 	bl	8012362 <USBD_CtlSendStatus>
      }
      break;
 8012142:	e004      	b.n	801214e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8012144:	6839      	ldr	r1, [r7, #0]
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	f000 f840 	bl	80121cc <USBD_CtlError>
      break;
 801214c:	e000      	b.n	8012150 <USBD_ClrFeature+0x3a>
      break;
 801214e:	bf00      	nop
  }
}
 8012150:	bf00      	nop
 8012152:	3708      	adds	r7, #8
 8012154:	46bd      	mov	sp, r7
 8012156:	bd80      	pop	{r7, pc}

08012158 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b084      	sub	sp, #16
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
 8012160:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012162:	683b      	ldr	r3, [r7, #0]
 8012164:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	781a      	ldrb	r2, [r3, #0]
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	3301      	adds	r3, #1
 8012172:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	781a      	ldrb	r2, [r3, #0]
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	3301      	adds	r3, #1
 8012180:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012182:	68f8      	ldr	r0, [r7, #12]
 8012184:	f7ff fad3 	bl	801172e <SWAPBYTE>
 8012188:	4603      	mov	r3, r0
 801218a:	461a      	mov	r2, r3
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	3301      	adds	r3, #1
 8012194:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	3301      	adds	r3, #1
 801219a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801219c:	68f8      	ldr	r0, [r7, #12]
 801219e:	f7ff fac6 	bl	801172e <SWAPBYTE>
 80121a2:	4603      	mov	r3, r0
 80121a4:	461a      	mov	r2, r3
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	3301      	adds	r3, #1
 80121ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	3301      	adds	r3, #1
 80121b4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80121b6:	68f8      	ldr	r0, [r7, #12]
 80121b8:	f7ff fab9 	bl	801172e <SWAPBYTE>
 80121bc:	4603      	mov	r3, r0
 80121be:	461a      	mov	r2, r3
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	80da      	strh	r2, [r3, #6]
}
 80121c4:	bf00      	nop
 80121c6:	3710      	adds	r7, #16
 80121c8:	46bd      	mov	sp, r7
 80121ca:	bd80      	pop	{r7, pc}

080121cc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80121cc:	b580      	push	{r7, lr}
 80121ce:	b082      	sub	sp, #8
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
 80121d4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80121d6:	2180      	movs	r1, #128	; 0x80
 80121d8:	6878      	ldr	r0, [r7, #4]
 80121da:	f003 fb83 	bl	80158e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80121de:	2100      	movs	r1, #0
 80121e0:	6878      	ldr	r0, [r7, #4]
 80121e2:	f003 fb7f 	bl	80158e4 <USBD_LL_StallEP>
}
 80121e6:	bf00      	nop
 80121e8:	3708      	adds	r7, #8
 80121ea:	46bd      	mov	sp, r7
 80121ec:	bd80      	pop	{r7, pc}

080121ee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80121ee:	b580      	push	{r7, lr}
 80121f0:	b086      	sub	sp, #24
 80121f2:	af00      	add	r7, sp, #0
 80121f4:	60f8      	str	r0, [r7, #12]
 80121f6:	60b9      	str	r1, [r7, #8]
 80121f8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80121fa:	2300      	movs	r3, #0
 80121fc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d036      	beq.n	8012272 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012208:	6938      	ldr	r0, [r7, #16]
 801220a:	f000 f836 	bl	801227a <USBD_GetLen>
 801220e:	4603      	mov	r3, r0
 8012210:	3301      	adds	r3, #1
 8012212:	b29b      	uxth	r3, r3
 8012214:	005b      	lsls	r3, r3, #1
 8012216:	b29a      	uxth	r2, r3
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801221c:	7dfb      	ldrb	r3, [r7, #23]
 801221e:	68ba      	ldr	r2, [r7, #8]
 8012220:	4413      	add	r3, r2
 8012222:	687a      	ldr	r2, [r7, #4]
 8012224:	7812      	ldrb	r2, [r2, #0]
 8012226:	701a      	strb	r2, [r3, #0]
  idx++;
 8012228:	7dfb      	ldrb	r3, [r7, #23]
 801222a:	3301      	adds	r3, #1
 801222c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801222e:	7dfb      	ldrb	r3, [r7, #23]
 8012230:	68ba      	ldr	r2, [r7, #8]
 8012232:	4413      	add	r3, r2
 8012234:	2203      	movs	r2, #3
 8012236:	701a      	strb	r2, [r3, #0]
  idx++;
 8012238:	7dfb      	ldrb	r3, [r7, #23]
 801223a:	3301      	adds	r3, #1
 801223c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801223e:	e013      	b.n	8012268 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012240:	7dfb      	ldrb	r3, [r7, #23]
 8012242:	68ba      	ldr	r2, [r7, #8]
 8012244:	4413      	add	r3, r2
 8012246:	693a      	ldr	r2, [r7, #16]
 8012248:	7812      	ldrb	r2, [r2, #0]
 801224a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801224c:	693b      	ldr	r3, [r7, #16]
 801224e:	3301      	adds	r3, #1
 8012250:	613b      	str	r3, [r7, #16]
    idx++;
 8012252:	7dfb      	ldrb	r3, [r7, #23]
 8012254:	3301      	adds	r3, #1
 8012256:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012258:	7dfb      	ldrb	r3, [r7, #23]
 801225a:	68ba      	ldr	r2, [r7, #8]
 801225c:	4413      	add	r3, r2
 801225e:	2200      	movs	r2, #0
 8012260:	701a      	strb	r2, [r3, #0]
    idx++;
 8012262:	7dfb      	ldrb	r3, [r7, #23]
 8012264:	3301      	adds	r3, #1
 8012266:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012268:	693b      	ldr	r3, [r7, #16]
 801226a:	781b      	ldrb	r3, [r3, #0]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d1e7      	bne.n	8012240 <USBD_GetString+0x52>
 8012270:	e000      	b.n	8012274 <USBD_GetString+0x86>
    return;
 8012272:	bf00      	nop
  }
}
 8012274:	3718      	adds	r7, #24
 8012276:	46bd      	mov	sp, r7
 8012278:	bd80      	pop	{r7, pc}

0801227a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801227a:	b480      	push	{r7}
 801227c:	b085      	sub	sp, #20
 801227e:	af00      	add	r7, sp, #0
 8012280:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012282:	2300      	movs	r3, #0
 8012284:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801228a:	e005      	b.n	8012298 <USBD_GetLen+0x1e>
  {
    len++;
 801228c:	7bfb      	ldrb	r3, [r7, #15]
 801228e:	3301      	adds	r3, #1
 8012290:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012292:	68bb      	ldr	r3, [r7, #8]
 8012294:	3301      	adds	r3, #1
 8012296:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012298:	68bb      	ldr	r3, [r7, #8]
 801229a:	781b      	ldrb	r3, [r3, #0]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d1f5      	bne.n	801228c <USBD_GetLen+0x12>
  }

  return len;
 80122a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80122a2:	4618      	mov	r0, r3
 80122a4:	3714      	adds	r7, #20
 80122a6:	46bd      	mov	sp, r7
 80122a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ac:	4770      	bx	lr

080122ae <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80122ae:	b580      	push	{r7, lr}
 80122b0:	b084      	sub	sp, #16
 80122b2:	af00      	add	r7, sp, #0
 80122b4:	60f8      	str	r0, [r7, #12]
 80122b6:	60b9      	str	r1, [r7, #8]
 80122b8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	2202      	movs	r2, #2
 80122be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	687a      	ldr	r2, [r7, #4]
 80122c6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	687a      	ldr	r2, [r7, #4]
 80122cc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	68ba      	ldr	r2, [r7, #8]
 80122d2:	2100      	movs	r1, #0
 80122d4:	68f8      	ldr	r0, [r7, #12]
 80122d6:	f003 fb8e 	bl	80159f6 <USBD_LL_Transmit>

  return USBD_OK;
 80122da:	2300      	movs	r3, #0
}
 80122dc:	4618      	mov	r0, r3
 80122de:	3710      	adds	r7, #16
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bd80      	pop	{r7, pc}

080122e4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b084      	sub	sp, #16
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	60f8      	str	r0, [r7, #12]
 80122ec:	60b9      	str	r1, [r7, #8]
 80122ee:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	68ba      	ldr	r2, [r7, #8]
 80122f4:	2100      	movs	r1, #0
 80122f6:	68f8      	ldr	r0, [r7, #12]
 80122f8:	f003 fb7d 	bl	80159f6 <USBD_LL_Transmit>

  return USBD_OK;
 80122fc:	2300      	movs	r3, #0
}
 80122fe:	4618      	mov	r0, r3
 8012300:	3710      	adds	r7, #16
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}

08012306 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012306:	b580      	push	{r7, lr}
 8012308:	b084      	sub	sp, #16
 801230a:	af00      	add	r7, sp, #0
 801230c:	60f8      	str	r0, [r7, #12]
 801230e:	60b9      	str	r1, [r7, #8]
 8012310:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	2203      	movs	r2, #3
 8012316:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	687a      	ldr	r2, [r7, #4]
 801231e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	687a      	ldr	r2, [r7, #4]
 8012326:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	68ba      	ldr	r2, [r7, #8]
 801232e:	2100      	movs	r1, #0
 8012330:	68f8      	ldr	r0, [r7, #12]
 8012332:	f003 fb81 	bl	8015a38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012336:	2300      	movs	r3, #0
}
 8012338:	4618      	mov	r0, r3
 801233a:	3710      	adds	r7, #16
 801233c:	46bd      	mov	sp, r7
 801233e:	bd80      	pop	{r7, pc}

08012340 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012340:	b580      	push	{r7, lr}
 8012342:	b084      	sub	sp, #16
 8012344:	af00      	add	r7, sp, #0
 8012346:	60f8      	str	r0, [r7, #12]
 8012348:	60b9      	str	r1, [r7, #8]
 801234a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	68ba      	ldr	r2, [r7, #8]
 8012350:	2100      	movs	r1, #0
 8012352:	68f8      	ldr	r0, [r7, #12]
 8012354:	f003 fb70 	bl	8015a38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012358:	2300      	movs	r3, #0
}
 801235a:	4618      	mov	r0, r3
 801235c:	3710      	adds	r7, #16
 801235e:	46bd      	mov	sp, r7
 8012360:	bd80      	pop	{r7, pc}

08012362 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012362:	b580      	push	{r7, lr}
 8012364:	b082      	sub	sp, #8
 8012366:	af00      	add	r7, sp, #0
 8012368:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	2204      	movs	r2, #4
 801236e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012372:	2300      	movs	r3, #0
 8012374:	2200      	movs	r2, #0
 8012376:	2100      	movs	r1, #0
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	f003 fb3c 	bl	80159f6 <USBD_LL_Transmit>

  return USBD_OK;
 801237e:	2300      	movs	r3, #0
}
 8012380:	4618      	mov	r0, r3
 8012382:	3708      	adds	r7, #8
 8012384:	46bd      	mov	sp, r7
 8012386:	bd80      	pop	{r7, pc}

08012388 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012388:	b580      	push	{r7, lr}
 801238a:	b082      	sub	sp, #8
 801238c:	af00      	add	r7, sp, #0
 801238e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	2205      	movs	r2, #5
 8012394:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012398:	2300      	movs	r3, #0
 801239a:	2200      	movs	r2, #0
 801239c:	2100      	movs	r1, #0
 801239e:	6878      	ldr	r0, [r7, #4]
 80123a0:	f003 fb4a 	bl	8015a38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80123a4:	2300      	movs	r3, #0
}
 80123a6:	4618      	mov	r0, r3
 80123a8:	3708      	adds	r7, #8
 80123aa:	46bd      	mov	sp, r7
 80123ac:	bd80      	pop	{r7, pc}

080123ae <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80123ae:	b480      	push	{r7}
 80123b0:	b085      	sub	sp, #20
 80123b2:	af00      	add	r7, sp, #0
 80123b4:	4603      	mov	r3, r0
 80123b6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80123b8:	2300      	movs	r3, #0
 80123ba:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80123bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80123c0:	2b84      	cmp	r3, #132	; 0x84
 80123c2:	d005      	beq.n	80123d0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80123c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	4413      	add	r3, r2
 80123cc:	3303      	adds	r3, #3
 80123ce:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80123d0:	68fb      	ldr	r3, [r7, #12]
}
 80123d2:	4618      	mov	r0, r3
 80123d4:	3714      	adds	r7, #20
 80123d6:	46bd      	mov	sp, r7
 80123d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123dc:	4770      	bx	lr

080123de <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80123de:	b480      	push	{r7}
 80123e0:	b083      	sub	sp, #12
 80123e2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80123e4:	f3ef 8305 	mrs	r3, IPSR
 80123e8:	607b      	str	r3, [r7, #4]
  return(result);
 80123ea:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	bf14      	ite	ne
 80123f0:	2301      	movne	r3, #1
 80123f2:	2300      	moveq	r3, #0
 80123f4:	b2db      	uxtb	r3, r3
}
 80123f6:	4618      	mov	r0, r3
 80123f8:	370c      	adds	r7, #12
 80123fa:	46bd      	mov	sp, r7
 80123fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012400:	4770      	bx	lr

08012402 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012402:	b580      	push	{r7, lr}
 8012404:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012406:	f001 fb31 	bl	8013a6c <vTaskStartScheduler>
  
  return osOK;
 801240a:	2300      	movs	r3, #0
}
 801240c:	4618      	mov	r0, r3
 801240e:	bd80      	pop	{r7, pc}

08012410 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012412:	b089      	sub	sp, #36	; 0x24
 8012414:	af04      	add	r7, sp, #16
 8012416:	6078      	str	r0, [r7, #4]
 8012418:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	695b      	ldr	r3, [r3, #20]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d020      	beq.n	8012464 <osThreadCreate+0x54>
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	699b      	ldr	r3, [r3, #24]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d01c      	beq.n	8012464 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	685c      	ldr	r4, [r3, #4]
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	681d      	ldr	r5, [r3, #0]
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	691e      	ldr	r6, [r3, #16]
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801243c:	4618      	mov	r0, r3
 801243e:	f7ff ffb6 	bl	80123ae <makeFreeRtosPriority>
 8012442:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	695b      	ldr	r3, [r3, #20]
 8012448:	687a      	ldr	r2, [r7, #4]
 801244a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801244c:	9202      	str	r2, [sp, #8]
 801244e:	9301      	str	r3, [sp, #4]
 8012450:	9100      	str	r1, [sp, #0]
 8012452:	683b      	ldr	r3, [r7, #0]
 8012454:	4632      	mov	r2, r6
 8012456:	4629      	mov	r1, r5
 8012458:	4620      	mov	r0, r4
 801245a:	f001 f944 	bl	80136e6 <xTaskCreateStatic>
 801245e:	4603      	mov	r3, r0
 8012460:	60fb      	str	r3, [r7, #12]
 8012462:	e01c      	b.n	801249e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	685c      	ldr	r4, [r3, #4]
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012470:	b29e      	uxth	r6, r3
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012478:	4618      	mov	r0, r3
 801247a:	f7ff ff98 	bl	80123ae <makeFreeRtosPriority>
 801247e:	4602      	mov	r2, r0
 8012480:	f107 030c 	add.w	r3, r7, #12
 8012484:	9301      	str	r3, [sp, #4]
 8012486:	9200      	str	r2, [sp, #0]
 8012488:	683b      	ldr	r3, [r7, #0]
 801248a:	4632      	mov	r2, r6
 801248c:	4629      	mov	r1, r5
 801248e:	4620      	mov	r0, r4
 8012490:	f001 f983 	bl	801379a <xTaskCreate>
 8012494:	4603      	mov	r3, r0
 8012496:	2b01      	cmp	r3, #1
 8012498:	d001      	beq.n	801249e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801249a:	2300      	movs	r3, #0
 801249c:	e000      	b.n	80124a0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801249e:	68fb      	ldr	r3, [r7, #12]
}
 80124a0:	4618      	mov	r0, r3
 80124a2:	3714      	adds	r7, #20
 80124a4:	46bd      	mov	sp, r7
 80124a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080124a8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b084      	sub	sp, #16
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d001      	beq.n	80124be <osDelay+0x16>
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	e000      	b.n	80124c0 <osDelay+0x18>
 80124be:	2301      	movs	r3, #1
 80124c0:	4618      	mov	r0, r3
 80124c2:	f001 fa9f 	bl	8013a04 <vTaskDelay>
  
  return osOK;
 80124c6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80124c8:	4618      	mov	r0, r3
 80124ca:	3710      	adds	r7, #16
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}

080124d0 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b086      	sub	sp, #24
 80124d4:	af02      	add	r7, sp, #8
 80124d6:	6078      	str	r0, [r7, #4]
 80124d8:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80124da:	2300      	movs	r3, #0
 80124dc:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80124de:	2300      	movs	r3, #0
 80124e0:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80124e2:	f7ff ff7c 	bl	80123de <inHandlerMode>
 80124e6:	4603      	mov	r3, r0
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d01c      	beq.n	8012526 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80124ec:	6839      	ldr	r1, [r7, #0]
 80124ee:	f107 0208 	add.w	r2, r7, #8
 80124f2:	f107 030c 	add.w	r3, r7, #12
 80124f6:	9300      	str	r3, [sp, #0]
 80124f8:	4613      	mov	r3, r2
 80124fa:	2201      	movs	r2, #1
 80124fc:	6878      	ldr	r0, [r7, #4]
 80124fe:	f002 f857 	bl	80145b0 <xTaskGenericNotifyFromISR>
 8012502:	4603      	mov	r3, r0
 8012504:	2b01      	cmp	r3, #1
 8012506:	d002      	beq.n	801250e <osSignalSet+0x3e>
      return 0x80000000;
 8012508:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801250c:	e019      	b.n	8012542 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d015      	beq.n	8012540 <osSignalSet+0x70>
 8012514:	4b0d      	ldr	r3, [pc, #52]	; (801254c <osSignalSet+0x7c>)
 8012516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801251a:	601a      	str	r2, [r3, #0]
 801251c:	f3bf 8f4f 	dsb	sy
 8012520:	f3bf 8f6f 	isb	sy
 8012524:	e00c      	b.n	8012540 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8012526:	6839      	ldr	r1, [r7, #0]
 8012528:	f107 0308 	add.w	r3, r7, #8
 801252c:	2201      	movs	r2, #1
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f001 ff8c 	bl	801444c <xTaskGenericNotify>
 8012534:	4603      	mov	r3, r0
 8012536:	2b01      	cmp	r3, #1
 8012538:	d002      	beq.n	8012540 <osSignalSet+0x70>
    return 0x80000000;
 801253a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801253e:	e000      	b.n	8012542 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8012540:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8012542:	4618      	mov	r0, r3
 8012544:	3710      	adds	r7, #16
 8012546:	46bd      	mov	sp, r7
 8012548:	bd80      	pop	{r7, pc}
 801254a:	bf00      	nop
 801254c:	e000ed04 	.word	0xe000ed04

08012550 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8012550:	b590      	push	{r4, r7, lr}
 8012552:	b089      	sub	sp, #36	; 0x24
 8012554:	af00      	add	r7, sp, #0
 8012556:	60f8      	str	r0, [r7, #12]
 8012558:	60b9      	str	r1, [r7, #8]
 801255a:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 801255c:	2300      	movs	r3, #0
 801255e:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8012560:	2300      	movs	r3, #0
 8012562:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	f1b3 3fff 	cmp.w	r3, #4294967295
 801256a:	d103      	bne.n	8012574 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 801256c:	f04f 33ff 	mov.w	r3, #4294967295
 8012570:	61fb      	str	r3, [r7, #28]
 8012572:	e009      	b.n	8012588 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d006      	beq.n	8012588 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 801257e:	69fb      	ldr	r3, [r7, #28]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d101      	bne.n	8012588 <osSignalWait+0x38>
      ticks = 1;
 8012584:	2301      	movs	r3, #1
 8012586:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8012588:	f7ff ff29 	bl	80123de <inHandlerMode>
 801258c:	4603      	mov	r3, r0
 801258e:	2b00      	cmp	r3, #0
 8012590:	d002      	beq.n	8012598 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8012592:	2382      	movs	r3, #130	; 0x82
 8012594:	613b      	str	r3, [r7, #16]
 8012596:	e01b      	b.n	80125d0 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8012598:	68b9      	ldr	r1, [r7, #8]
 801259a:	f107 0310 	add.w	r3, r7, #16
 801259e:	1d1a      	adds	r2, r3, #4
 80125a0:	69fb      	ldr	r3, [r7, #28]
 80125a2:	2000      	movs	r0, #0
 80125a4:	f001 fef8 	bl	8014398 <xTaskNotifyWait>
 80125a8:	4603      	mov	r3, r0
 80125aa:	2b01      	cmp	r3, #1
 80125ac:	d008      	beq.n	80125c0 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80125ae:	69fb      	ldr	r3, [r7, #28]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d102      	bne.n	80125ba <osSignalWait+0x6a>
 80125b4:	2300      	movs	r3, #0
 80125b6:	613b      	str	r3, [r7, #16]
 80125b8:	e00a      	b.n	80125d0 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80125ba:	2340      	movs	r3, #64	; 0x40
 80125bc:	613b      	str	r3, [r7, #16]
 80125be:	e007      	b.n	80125d0 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80125c0:	697b      	ldr	r3, [r7, #20]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	da02      	bge.n	80125cc <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80125c6:	2386      	movs	r3, #134	; 0x86
 80125c8:	613b      	str	r3, [r7, #16]
 80125ca:	e001      	b.n	80125d0 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80125cc:	2308      	movs	r3, #8
 80125ce:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	461c      	mov	r4, r3
 80125d4:	f107 0310 	add.w	r3, r7, #16
 80125d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80125dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80125e0:	68f8      	ldr	r0, [r7, #12]
 80125e2:	3724      	adds	r7, #36	; 0x24
 80125e4:	46bd      	mov	sp, r7
 80125e6:	bd90      	pop	{r4, r7, pc}

080125e8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b082      	sub	sp, #8
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	685b      	ldr	r3, [r3, #4]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d007      	beq.n	8012608 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	685b      	ldr	r3, [r3, #4]
 80125fc:	4619      	mov	r1, r3
 80125fe:	2001      	movs	r0, #1
 8012600:	f000 fc5f 	bl	8012ec2 <xQueueCreateMutexStatic>
 8012604:	4603      	mov	r3, r0
 8012606:	e003      	b.n	8012610 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8012608:	2001      	movs	r0, #1
 801260a:	f000 fc42 	bl	8012e92 <xQueueCreateMutex>
 801260e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8012610:	4618      	mov	r0, r3
 8012612:	3708      	adds	r7, #8
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}

08012618 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b086      	sub	sp, #24
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	685b      	ldr	r3, [r3, #4]
 8012624:	3303      	adds	r3, #3
 8012626:	f023 0303 	bic.w	r3, r3, #3
 801262a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 801262c:	2014      	movs	r0, #20
 801262e:	f002 fb3f 	bl	8014cb0 <pvPortMalloc>
 8012632:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8012634:	697b      	ldr	r3, [r7, #20]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d046      	beq.n	80126c8 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	681a      	ldr	r2, [r3, #0]
 801263e:	697b      	ldr	r3, [r7, #20]
 8012640:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8012642:	68fa      	ldr	r2, [r7, #12]
 8012644:	697b      	ldr	r3, [r7, #20]
 8012646:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8012648:	697b      	ldr	r3, [r7, #20]
 801264a:	2200      	movs	r2, #0
 801264c:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	4618      	mov	r0, r3
 8012654:	f002 fb2c 	bl	8014cb0 <pvPortMalloc>
 8012658:	4602      	mov	r2, r0
 801265a:	697b      	ldr	r3, [r7, #20]
 801265c:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 801265e:	697b      	ldr	r3, [r7, #20]
 8012660:	685b      	ldr	r3, [r3, #4]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d02b      	beq.n	80126be <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	68fa      	ldr	r2, [r7, #12]
 801266c:	fb02 f303 	mul.w	r3, r2, r3
 8012670:	4618      	mov	r0, r3
 8012672:	f002 fb1d 	bl	8014cb0 <pvPortMalloc>
 8012676:	4602      	mov	r2, r0
 8012678:	697b      	ldr	r3, [r7, #20]
 801267a:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 801267c:	697b      	ldr	r3, [r7, #20]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d011      	beq.n	80126a8 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8012684:	2300      	movs	r3, #0
 8012686:	613b      	str	r3, [r7, #16]
 8012688:	e008      	b.n	801269c <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 801268a:	697b      	ldr	r3, [r7, #20]
 801268c:	685a      	ldr	r2, [r3, #4]
 801268e:	693b      	ldr	r3, [r7, #16]
 8012690:	4413      	add	r3, r2
 8012692:	2200      	movs	r2, #0
 8012694:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8012696:	693b      	ldr	r3, [r7, #16]
 8012698:	3301      	adds	r3, #1
 801269a:	613b      	str	r3, [r7, #16]
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	693a      	ldr	r2, [r7, #16]
 80126a2:	429a      	cmp	r2, r3
 80126a4:	d3f1      	bcc.n	801268a <osPoolCreate+0x72>
 80126a6:	e00f      	b.n	80126c8 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80126a8:	697b      	ldr	r3, [r7, #20]
 80126aa:	685b      	ldr	r3, [r3, #4]
 80126ac:	4618      	mov	r0, r3
 80126ae:	f002 fbc1 	bl	8014e34 <vPortFree>
        vPortFree(thePool);
 80126b2:	6978      	ldr	r0, [r7, #20]
 80126b4:	f002 fbbe 	bl	8014e34 <vPortFree>
        thePool = NULL;
 80126b8:	2300      	movs	r3, #0
 80126ba:	617b      	str	r3, [r7, #20]
 80126bc:	e004      	b.n	80126c8 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80126be:	6978      	ldr	r0, [r7, #20]
 80126c0:	f002 fbb8 	bl	8014e34 <vPortFree>
      thePool = NULL;
 80126c4:	2300      	movs	r3, #0
 80126c6:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 80126c8:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 80126ca:	4618      	mov	r0, r3
 80126cc:	3718      	adds	r7, #24
 80126ce:	46bd      	mov	sp, r7
 80126d0:	bd80      	pop	{r7, pc}

080126d2 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 80126d2:	b580      	push	{r7, lr}
 80126d4:	b08a      	sub	sp, #40	; 0x28
 80126d6:	af00      	add	r7, sp, #0
 80126d8:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 80126da:	2300      	movs	r3, #0
 80126dc:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 80126de:	2300      	movs	r3, #0
 80126e0:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 80126e2:	f7ff fe7c 	bl	80123de <inHandlerMode>
 80126e6:	4603      	mov	r3, r0
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d00e      	beq.n	801270a <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80126ec:	f3ef 8211 	mrs	r2, BASEPRI
 80126f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126f4:	f383 8811 	msr	BASEPRI, r3
 80126f8:	f3bf 8f6f 	isb	sy
 80126fc:	f3bf 8f4f 	dsb	sy
 8012700:	617a      	str	r2, [r7, #20]
 8012702:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012704:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8012706:	627b      	str	r3, [r7, #36]	; 0x24
 8012708:	e001      	b.n	801270e <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 801270a:	f002 f9b7 	bl	8014a7c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 801270e:	2300      	movs	r3, #0
 8012710:	61fb      	str	r3, [r7, #28]
 8012712:	e029      	b.n	8012768 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	691a      	ldr	r2, [r3, #16]
 8012718:	69fb      	ldr	r3, [r7, #28]
 801271a:	4413      	add	r3, r2
 801271c:	687a      	ldr	r2, [r7, #4]
 801271e:	6892      	ldr	r2, [r2, #8]
 8012720:	fbb3 f1f2 	udiv	r1, r3, r2
 8012724:	fb02 f201 	mul.w	r2, r2, r1
 8012728:	1a9b      	subs	r3, r3, r2
 801272a:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	685a      	ldr	r2, [r3, #4]
 8012730:	69bb      	ldr	r3, [r7, #24]
 8012732:	4413      	add	r3, r2
 8012734:	781b      	ldrb	r3, [r3, #0]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d113      	bne.n	8012762 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	685a      	ldr	r2, [r3, #4]
 801273e:	69bb      	ldr	r3, [r7, #24]
 8012740:	4413      	add	r3, r2
 8012742:	2201      	movs	r2, #1
 8012744:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	4619      	mov	r1, r3
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	68db      	ldr	r3, [r3, #12]
 8012750:	69ba      	ldr	r2, [r7, #24]
 8012752:	fb02 f303 	mul.w	r3, r2, r3
 8012756:	440b      	add	r3, r1
 8012758:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	69ba      	ldr	r2, [r7, #24]
 801275e:	611a      	str	r2, [r3, #16]
      break;
 8012760:	e007      	b.n	8012772 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8012762:	69fb      	ldr	r3, [r7, #28]
 8012764:	3301      	adds	r3, #1
 8012766:	61fb      	str	r3, [r7, #28]
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	689b      	ldr	r3, [r3, #8]
 801276c:	69fa      	ldr	r2, [r7, #28]
 801276e:	429a      	cmp	r2, r3
 8012770:	d3d0      	bcc.n	8012714 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8012772:	f7ff fe34 	bl	80123de <inHandlerMode>
 8012776:	4603      	mov	r3, r0
 8012778:	2b00      	cmp	r3, #0
 801277a:	d005      	beq.n	8012788 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 801277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801277e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	f383 8811 	msr	BASEPRI, r3
 8012786:	e001      	b.n	801278c <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8012788:	f002 f9a6 	bl	8014ad8 <vPortExitCritical>
  }
  
  return p;
 801278c:	6a3b      	ldr	r3, [r7, #32]
}
 801278e:	4618      	mov	r0, r3
 8012790:	3728      	adds	r7, #40	; 0x28
 8012792:	46bd      	mov	sp, r7
 8012794:	bd80      	pop	{r7, pc}

08012796 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8012796:	b480      	push	{r7}
 8012798:	b085      	sub	sp, #20
 801279a:	af00      	add	r7, sp, #0
 801279c:	6078      	str	r0, [r7, #4]
 801279e:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d101      	bne.n	80127aa <osPoolFree+0x14>
    return osErrorParameter;
 80127a6:	2380      	movs	r3, #128	; 0x80
 80127a8:	e030      	b.n	801280c <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80127aa:	683b      	ldr	r3, [r7, #0]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d101      	bne.n	80127b4 <osPoolFree+0x1e>
    return osErrorParameter;
 80127b0:	2380      	movs	r3, #128	; 0x80
 80127b2:	e02b      	b.n	801280c <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	683a      	ldr	r2, [r7, #0]
 80127ba:	429a      	cmp	r2, r3
 80127bc:	d201      	bcs.n	80127c2 <osPoolFree+0x2c>
    return osErrorParameter;
 80127be:	2380      	movs	r3, #128	; 0x80
 80127c0:	e024      	b.n	801280c <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80127c2:	683b      	ldr	r3, [r7, #0]
 80127c4:	687a      	ldr	r2, [r7, #4]
 80127c6:	6812      	ldr	r2, [r2, #0]
 80127c8:	1a9b      	subs	r3, r3, r2
 80127ca:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	68da      	ldr	r2, [r3, #12]
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80127d6:	fb02 f201 	mul.w	r2, r2, r1
 80127da:	1a9b      	subs	r3, r3, r2
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d001      	beq.n	80127e4 <osPoolFree+0x4e>
    return osErrorParameter;
 80127e0:	2380      	movs	r3, #128	; 0x80
 80127e2:	e013      	b.n	801280c <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	68db      	ldr	r3, [r3, #12]
 80127e8:	68fa      	ldr	r2, [r7, #12]
 80127ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80127ee:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	689b      	ldr	r3, [r3, #8]
 80127f4:	68fa      	ldr	r2, [r7, #12]
 80127f6:	429a      	cmp	r2, r3
 80127f8:	d301      	bcc.n	80127fe <osPoolFree+0x68>
    return osErrorParameter;
 80127fa:	2380      	movs	r3, #128	; 0x80
 80127fc:	e006      	b.n	801280c <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	685a      	ldr	r2, [r3, #4]
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	4413      	add	r3, r2
 8012806:	2200      	movs	r2, #0
 8012808:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 801280a:	2300      	movs	r3, #0
}
 801280c:	4618      	mov	r0, r3
 801280e:	3714      	adds	r7, #20
 8012810:	46bd      	mov	sp, r7
 8012812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012816:	4770      	bx	lr

08012818 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8012818:	b590      	push	{r4, r7, lr}
 801281a:	b087      	sub	sp, #28
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
 8012820:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	60fb      	str	r3, [r7, #12]
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	685b      	ldr	r3, [r3, #4]
 801282c:	613b      	str	r3, [r7, #16]
 801282e:	2300      	movs	r3, #0
 8012830:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	689c      	ldr	r4, [r3, #8]
 8012836:	200c      	movs	r0, #12
 8012838:	f002 fa3a 	bl	8014cb0 <pvPortMalloc>
 801283c:	4603      	mov	r3, r0
 801283e:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	689b      	ldr	r3, [r3, #8]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d101      	bne.n	801284e <osMailCreate+0x36>
    return NULL;
 801284a:	2300      	movs	r3, #0
 801284c:	e038      	b.n	80128c0 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	689b      	ldr	r3, [r3, #8]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	687a      	ldr	r2, [r7, #4]
 8012856:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	6818      	ldr	r0, [r3, #0]
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	689b      	ldr	r3, [r3, #8]
 8012860:	681c      	ldr	r4, [r3, #0]
 8012862:	2200      	movs	r2, #0
 8012864:	2104      	movs	r1, #4
 8012866:	f000 fa9c 	bl	8012da2 <xQueueGenericCreate>
 801286a:	4603      	mov	r3, r0
 801286c:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	689b      	ldr	r3, [r3, #8]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	685b      	ldr	r3, [r3, #4]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d107      	bne.n	801288a <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	689b      	ldr	r3, [r3, #8]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	4618      	mov	r0, r3
 8012882:	f002 fad7 	bl	8014e34 <vPortFree>
    return NULL;
 8012886:	2300      	movs	r3, #0
 8012888:	e01a      	b.n	80128c0 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	689b      	ldr	r3, [r3, #8]
 801288e:	681c      	ldr	r4, [r3, #0]
 8012890:	f107 030c 	add.w	r3, r7, #12
 8012894:	4618      	mov	r0, r3
 8012896:	f7ff febf 	bl	8012618 <osPoolCreate>
 801289a:	4603      	mov	r3, r0
 801289c:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	689b      	ldr	r3, [r3, #8]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	689b      	ldr	r3, [r3, #8]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d107      	bne.n	80128ba <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	689b      	ldr	r3, [r3, #8]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	4618      	mov	r0, r3
 80128b2:	f002 fabf 	bl	8014e34 <vPortFree>
    return NULL;
 80128b6:	2300      	movs	r3, #0
 80128b8:	e002      	b.n	80128c0 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	689b      	ldr	r3, [r3, #8]
 80128be:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 80128c0:	4618      	mov	r0, r3
 80128c2:	371c      	adds	r7, #28
 80128c4:	46bd      	mov	sp, r7
 80128c6:	bd90      	pop	{r4, r7, pc}

080128c8 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b084      	sub	sp, #16
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
 80128d0:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d101      	bne.n	80128dc <osMailAlloc+0x14>
    return NULL;
 80128d8:	2300      	movs	r3, #0
 80128da:	e006      	b.n	80128ea <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	689b      	ldr	r3, [r3, #8]
 80128e0:	4618      	mov	r0, r3
 80128e2:	f7ff fef6 	bl	80126d2 <osPoolAlloc>
 80128e6:	60f8      	str	r0, [r7, #12]
  
  return p;
 80128e8:	68fb      	ldr	r3, [r7, #12]
}
 80128ea:	4618      	mov	r0, r3
 80128ec:	3710      	adds	r7, #16
 80128ee:	46bd      	mov	sp, r7
 80128f0:	bd80      	pop	{r7, pc}
	...

080128f4 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b084      	sub	sp, #16
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
 80128fc:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d101      	bne.n	8012908 <osMailPut+0x14>
    return osErrorParameter;
 8012904:	2380      	movs	r3, #128	; 0x80
 8012906:	e02c      	b.n	8012962 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8012908:	2300      	movs	r3, #0
 801290a:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 801290c:	f7ff fd67 	bl	80123de <inHandlerMode>
 8012910:	4603      	mov	r3, r0
 8012912:	2b00      	cmp	r3, #0
 8012914:	d018      	beq.n	8012948 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	6858      	ldr	r0, [r3, #4]
 801291a:	f107 020c 	add.w	r2, r7, #12
 801291e:	4639      	mov	r1, r7
 8012920:	2300      	movs	r3, #0
 8012922:	f000 fbe3 	bl	80130ec <xQueueGenericSendFromISR>
 8012926:	4603      	mov	r3, r0
 8012928:	2b01      	cmp	r3, #1
 801292a:	d001      	beq.n	8012930 <osMailPut+0x3c>
      return osErrorOS;
 801292c:	23ff      	movs	r3, #255	; 0xff
 801292e:	e018      	b.n	8012962 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d014      	beq.n	8012960 <osMailPut+0x6c>
 8012936:	4b0d      	ldr	r3, [pc, #52]	; (801296c <osMailPut+0x78>)
 8012938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801293c:	601a      	str	r2, [r3, #0]
 801293e:	f3bf 8f4f 	dsb	sy
 8012942:	f3bf 8f6f 	isb	sy
 8012946:	e00b      	b.n	8012960 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	6858      	ldr	r0, [r3, #4]
 801294c:	4639      	mov	r1, r7
 801294e:	2300      	movs	r3, #0
 8012950:	2200      	movs	r2, #0
 8012952:	f000 fad1 	bl	8012ef8 <xQueueGenericSend>
 8012956:	4603      	mov	r3, r0
 8012958:	2b01      	cmp	r3, #1
 801295a:	d001      	beq.n	8012960 <osMailPut+0x6c>
      return osErrorOS;
 801295c:	23ff      	movs	r3, #255	; 0xff
 801295e:	e000      	b.n	8012962 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8012960:	2300      	movs	r3, #0
}
 8012962:	4618      	mov	r0, r3
 8012964:	3710      	adds	r7, #16
 8012966:	46bd      	mov	sp, r7
 8012968:	bd80      	pop	{r7, pc}
 801296a:	bf00      	nop
 801296c:	e000ed04 	.word	0xe000ed04

08012970 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8012970:	b590      	push	{r4, r7, lr}
 8012972:	b08b      	sub	sp, #44	; 0x2c
 8012974:	af00      	add	r7, sp, #0
 8012976:	60f8      	str	r0, [r7, #12]
 8012978:	60b9      	str	r1, [r7, #8]
 801297a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 801297c:	68bb      	ldr	r3, [r7, #8]
 801297e:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8012980:	68bb      	ldr	r3, [r7, #8]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d10a      	bne.n	801299c <osMailGet+0x2c>
    event.status = osErrorParameter;
 8012986:	2380      	movs	r3, #128	; 0x80
 8012988:	617b      	str	r3, [r7, #20]
    return event;
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	461c      	mov	r4, r3
 801298e:	f107 0314 	add.w	r3, r7, #20
 8012992:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012996:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801299a:	e056      	b.n	8012a4a <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 801299c:	2300      	movs	r3, #0
 801299e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80129a0:	2300      	movs	r3, #0
 80129a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129aa:	d103      	bne.n	80129b4 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 80129ac:	f04f 33ff 	mov.w	r3, #4294967295
 80129b0:	627b      	str	r3, [r7, #36]	; 0x24
 80129b2:	e009      	b.n	80129c8 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d006      	beq.n	80129c8 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80129be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d101      	bne.n	80129c8 <osMailGet+0x58>
      ticks = 1;
 80129c4:	2301      	movs	r3, #1
 80129c6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80129c8:	f7ff fd09 	bl	80123de <inHandlerMode>
 80129cc:	4603      	mov	r3, r0
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d01d      	beq.n	8012a0e <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 80129d2:	68bb      	ldr	r3, [r7, #8]
 80129d4:	6858      	ldr	r0, [r3, #4]
 80129d6:	f107 0220 	add.w	r2, r7, #32
 80129da:	f107 0314 	add.w	r3, r7, #20
 80129de:	3304      	adds	r3, #4
 80129e0:	4619      	mov	r1, r3
 80129e2:	f000 fcf3 	bl	80133cc <xQueueReceiveFromISR>
 80129e6:	4603      	mov	r3, r0
 80129e8:	2b01      	cmp	r3, #1
 80129ea:	d102      	bne.n	80129f2 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 80129ec:	2320      	movs	r3, #32
 80129ee:	617b      	str	r3, [r7, #20]
 80129f0:	e001      	b.n	80129f6 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 80129f2:	2300      	movs	r3, #0
 80129f4:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80129f6:	6a3b      	ldr	r3, [r7, #32]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d01e      	beq.n	8012a3a <osMailGet+0xca>
 80129fc:	4b15      	ldr	r3, [pc, #84]	; (8012a54 <osMailGet+0xe4>)
 80129fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a02:	601a      	str	r2, [r3, #0]
 8012a04:	f3bf 8f4f 	dsb	sy
 8012a08:	f3bf 8f6f 	isb	sy
 8012a0c:	e015      	b.n	8012a3a <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8012a0e:	68bb      	ldr	r3, [r7, #8]
 8012a10:	6858      	ldr	r0, [r3, #4]
 8012a12:	f107 0314 	add.w	r3, r7, #20
 8012a16:	3304      	adds	r3, #4
 8012a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a1a:	4619      	mov	r1, r3
 8012a1c:	f000 fbfa 	bl	8013214 <xQueueReceive>
 8012a20:	4603      	mov	r3, r0
 8012a22:	2b01      	cmp	r3, #1
 8012a24:	d102      	bne.n	8012a2c <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8012a26:	2320      	movs	r3, #32
 8012a28:	617b      	str	r3, [r7, #20]
 8012a2a:	e006      	b.n	8012a3a <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d101      	bne.n	8012a36 <osMailGet+0xc6>
 8012a32:	2300      	movs	r3, #0
 8012a34:	e000      	b.n	8012a38 <osMailGet+0xc8>
 8012a36:	2340      	movs	r3, #64	; 0x40
 8012a38:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	461c      	mov	r4, r3
 8012a3e:	f107 0314 	add.w	r3, r7, #20
 8012a42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012a46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012a4a:	68f8      	ldr	r0, [r7, #12]
 8012a4c:	372c      	adds	r7, #44	; 0x2c
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	bd90      	pop	{r4, r7, pc}
 8012a52:	bf00      	nop
 8012a54:	e000ed04 	.word	0xe000ed04

08012a58 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b082      	sub	sp, #8
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
 8012a60:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d101      	bne.n	8012a6c <osMailFree+0x14>
    return osErrorParameter;
 8012a68:	2380      	movs	r3, #128	; 0x80
 8012a6a:	e006      	b.n	8012a7a <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	689b      	ldr	r3, [r3, #8]
 8012a70:	6839      	ldr	r1, [r7, #0]
 8012a72:	4618      	mov	r0, r3
 8012a74:	f7ff fe8f 	bl	8012796 <osPoolFree>
 8012a78:	4603      	mov	r3, r0
}
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	3708      	adds	r7, #8
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	bd80      	pop	{r7, pc}

08012a82 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012a82:	b480      	push	{r7}
 8012a84:	b083      	sub	sp, #12
 8012a86:	af00      	add	r7, sp, #0
 8012a88:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	f103 0208 	add.w	r2, r3, #8
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	f04f 32ff 	mov.w	r2, #4294967295
 8012a9a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	f103 0208 	add.w	r2, r3, #8
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	f103 0208 	add.w	r2, r3, #8
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012ab6:	bf00      	nop
 8012ab8:	370c      	adds	r7, #12
 8012aba:	46bd      	mov	sp, r7
 8012abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac0:	4770      	bx	lr

08012ac2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012ac2:	b480      	push	{r7}
 8012ac4:	b083      	sub	sp, #12
 8012ac6:	af00      	add	r7, sp, #0
 8012ac8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	2200      	movs	r2, #0
 8012ace:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012ad0:	bf00      	nop
 8012ad2:	370c      	adds	r7, #12
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ada:	4770      	bx	lr

08012adc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012adc:	b480      	push	{r7}
 8012ade:	b085      	sub	sp, #20
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
 8012ae4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	685b      	ldr	r3, [r3, #4]
 8012aea:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012aec:	683b      	ldr	r3, [r7, #0]
 8012aee:	68fa      	ldr	r2, [r7, #12]
 8012af0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	689a      	ldr	r2, [r3, #8]
 8012af6:	683b      	ldr	r3, [r7, #0]
 8012af8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	689b      	ldr	r3, [r3, #8]
 8012afe:	683a      	ldr	r2, [r7, #0]
 8012b00:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	683a      	ldr	r2, [r7, #0]
 8012b06:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012b08:	683b      	ldr	r3, [r7, #0]
 8012b0a:	687a      	ldr	r2, [r7, #4]
 8012b0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	1c5a      	adds	r2, r3, #1
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	601a      	str	r2, [r3, #0]
}
 8012b18:	bf00      	nop
 8012b1a:	3714      	adds	r7, #20
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b22:	4770      	bx	lr

08012b24 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012b24:	b480      	push	{r7}
 8012b26:	b085      	sub	sp, #20
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
 8012b2c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012b2e:	683b      	ldr	r3, [r7, #0]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012b34:	68bb      	ldr	r3, [r7, #8]
 8012b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b3a:	d103      	bne.n	8012b44 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	691b      	ldr	r3, [r3, #16]
 8012b40:	60fb      	str	r3, [r7, #12]
 8012b42:	e00c      	b.n	8012b5e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	3308      	adds	r3, #8
 8012b48:	60fb      	str	r3, [r7, #12]
 8012b4a:	e002      	b.n	8012b52 <vListInsert+0x2e>
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	685b      	ldr	r3, [r3, #4]
 8012b50:	60fb      	str	r3, [r7, #12]
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	685b      	ldr	r3, [r3, #4]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	68ba      	ldr	r2, [r7, #8]
 8012b5a:	429a      	cmp	r2, r3
 8012b5c:	d2f6      	bcs.n	8012b4c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	685a      	ldr	r2, [r3, #4]
 8012b62:	683b      	ldr	r3, [r7, #0]
 8012b64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012b66:	683b      	ldr	r3, [r7, #0]
 8012b68:	685b      	ldr	r3, [r3, #4]
 8012b6a:	683a      	ldr	r2, [r7, #0]
 8012b6c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012b6e:	683b      	ldr	r3, [r7, #0]
 8012b70:	68fa      	ldr	r2, [r7, #12]
 8012b72:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	683a      	ldr	r2, [r7, #0]
 8012b78:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012b7a:	683b      	ldr	r3, [r7, #0]
 8012b7c:	687a      	ldr	r2, [r7, #4]
 8012b7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	1c5a      	adds	r2, r3, #1
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	601a      	str	r2, [r3, #0]
}
 8012b8a:	bf00      	nop
 8012b8c:	3714      	adds	r7, #20
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b94:	4770      	bx	lr

08012b96 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012b96:	b480      	push	{r7}
 8012b98:	b085      	sub	sp, #20
 8012b9a:	af00      	add	r7, sp, #0
 8012b9c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	691b      	ldr	r3, [r3, #16]
 8012ba2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	685b      	ldr	r3, [r3, #4]
 8012ba8:	687a      	ldr	r2, [r7, #4]
 8012baa:	6892      	ldr	r2, [r2, #8]
 8012bac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	689b      	ldr	r3, [r3, #8]
 8012bb2:	687a      	ldr	r2, [r7, #4]
 8012bb4:	6852      	ldr	r2, [r2, #4]
 8012bb6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	685b      	ldr	r3, [r3, #4]
 8012bbc:	687a      	ldr	r2, [r7, #4]
 8012bbe:	429a      	cmp	r2, r3
 8012bc0:	d103      	bne.n	8012bca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	689a      	ldr	r2, [r3, #8]
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	2200      	movs	r2, #0
 8012bce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	1e5a      	subs	r2, r3, #1
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	681b      	ldr	r3, [r3, #0]
}
 8012bde:	4618      	mov	r0, r3
 8012be0:	3714      	adds	r7, #20
 8012be2:	46bd      	mov	sp, r7
 8012be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be8:	4770      	bx	lr
	...

08012bec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012bec:	b580      	push	{r7, lr}
 8012bee:	b084      	sub	sp, #16
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]
 8012bf4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d109      	bne.n	8012c14 <xQueueGenericReset+0x28>
	__asm volatile
 8012c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c04:	f383 8811 	msr	BASEPRI, r3
 8012c08:	f3bf 8f6f 	isb	sy
 8012c0c:	f3bf 8f4f 	dsb	sy
 8012c10:	60bb      	str	r3, [r7, #8]
 8012c12:	e7fe      	b.n	8012c12 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8012c14:	f001 ff32 	bl	8014a7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	681a      	ldr	r2, [r3, #0]
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c20:	68f9      	ldr	r1, [r7, #12]
 8012c22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012c24:	fb01 f303 	mul.w	r3, r1, r3
 8012c28:	441a      	add	r2, r3
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	2200      	movs	r2, #0
 8012c32:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	681a      	ldr	r2, [r3, #0]
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	681a      	ldr	r2, [r3, #0]
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c44:	3b01      	subs	r3, #1
 8012c46:	68f9      	ldr	r1, [r7, #12]
 8012c48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012c4a:	fb01 f303 	mul.w	r3, r1, r3
 8012c4e:	441a      	add	r2, r3
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	22ff      	movs	r2, #255	; 0xff
 8012c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	22ff      	movs	r2, #255	; 0xff
 8012c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012c64:	683b      	ldr	r3, [r7, #0]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d114      	bne.n	8012c94 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	691b      	ldr	r3, [r3, #16]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d01a      	beq.n	8012ca8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	3310      	adds	r3, #16
 8012c76:	4618      	mov	r0, r3
 8012c78:	f001 f936 	bl	8013ee8 <xTaskRemoveFromEventList>
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d012      	beq.n	8012ca8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012c82:	4b0d      	ldr	r3, [pc, #52]	; (8012cb8 <xQueueGenericReset+0xcc>)
 8012c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c88:	601a      	str	r2, [r3, #0]
 8012c8a:	f3bf 8f4f 	dsb	sy
 8012c8e:	f3bf 8f6f 	isb	sy
 8012c92:	e009      	b.n	8012ca8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	3310      	adds	r3, #16
 8012c98:	4618      	mov	r0, r3
 8012c9a:	f7ff fef2 	bl	8012a82 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	3324      	adds	r3, #36	; 0x24
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	f7ff feed 	bl	8012a82 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012ca8:	f001 ff16 	bl	8014ad8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012cac:	2301      	movs	r3, #1
}
 8012cae:	4618      	mov	r0, r3
 8012cb0:	3710      	adds	r7, #16
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	bd80      	pop	{r7, pc}
 8012cb6:	bf00      	nop
 8012cb8:	e000ed04 	.word	0xe000ed04

08012cbc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	b08e      	sub	sp, #56	; 0x38
 8012cc0:	af02      	add	r7, sp, #8
 8012cc2:	60f8      	str	r0, [r7, #12]
 8012cc4:	60b9      	str	r1, [r7, #8]
 8012cc6:	607a      	str	r2, [r7, #4]
 8012cc8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d109      	bne.n	8012ce4 <xQueueGenericCreateStatic+0x28>
 8012cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cd4:	f383 8811 	msr	BASEPRI, r3
 8012cd8:	f3bf 8f6f 	isb	sy
 8012cdc:	f3bf 8f4f 	dsb	sy
 8012ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8012ce2:	e7fe      	b.n	8012ce2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012ce4:	683b      	ldr	r3, [r7, #0]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d109      	bne.n	8012cfe <xQueueGenericCreateStatic+0x42>
 8012cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cee:	f383 8811 	msr	BASEPRI, r3
 8012cf2:	f3bf 8f6f 	isb	sy
 8012cf6:	f3bf 8f4f 	dsb	sy
 8012cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8012cfc:	e7fe      	b.n	8012cfc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d002      	beq.n	8012d0a <xQueueGenericCreateStatic+0x4e>
 8012d04:	68bb      	ldr	r3, [r7, #8]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d001      	beq.n	8012d0e <xQueueGenericCreateStatic+0x52>
 8012d0a:	2301      	movs	r3, #1
 8012d0c:	e000      	b.n	8012d10 <xQueueGenericCreateStatic+0x54>
 8012d0e:	2300      	movs	r3, #0
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d109      	bne.n	8012d28 <xQueueGenericCreateStatic+0x6c>
 8012d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d18:	f383 8811 	msr	BASEPRI, r3
 8012d1c:	f3bf 8f6f 	isb	sy
 8012d20:	f3bf 8f4f 	dsb	sy
 8012d24:	623b      	str	r3, [r7, #32]
 8012d26:	e7fe      	b.n	8012d26 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d102      	bne.n	8012d34 <xQueueGenericCreateStatic+0x78>
 8012d2e:	68bb      	ldr	r3, [r7, #8]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d101      	bne.n	8012d38 <xQueueGenericCreateStatic+0x7c>
 8012d34:	2301      	movs	r3, #1
 8012d36:	e000      	b.n	8012d3a <xQueueGenericCreateStatic+0x7e>
 8012d38:	2300      	movs	r3, #0
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d109      	bne.n	8012d52 <xQueueGenericCreateStatic+0x96>
 8012d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d42:	f383 8811 	msr	BASEPRI, r3
 8012d46:	f3bf 8f6f 	isb	sy
 8012d4a:	f3bf 8f4f 	dsb	sy
 8012d4e:	61fb      	str	r3, [r7, #28]
 8012d50:	e7fe      	b.n	8012d50 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012d52:	2348      	movs	r3, #72	; 0x48
 8012d54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012d56:	697b      	ldr	r3, [r7, #20]
 8012d58:	2b48      	cmp	r3, #72	; 0x48
 8012d5a:	d009      	beq.n	8012d70 <xQueueGenericCreateStatic+0xb4>
 8012d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d60:	f383 8811 	msr	BASEPRI, r3
 8012d64:	f3bf 8f6f 	isb	sy
 8012d68:	f3bf 8f4f 	dsb	sy
 8012d6c:	61bb      	str	r3, [r7, #24]
 8012d6e:	e7fe      	b.n	8012d6e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012d70:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012d72:	683b      	ldr	r3, [r7, #0]
 8012d74:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d00d      	beq.n	8012d98 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d7e:	2201      	movs	r2, #1
 8012d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012d84:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d8a:	9300      	str	r3, [sp, #0]
 8012d8c:	4613      	mov	r3, r2
 8012d8e:	687a      	ldr	r2, [r7, #4]
 8012d90:	68b9      	ldr	r1, [r7, #8]
 8012d92:	68f8      	ldr	r0, [r7, #12]
 8012d94:	f000 f844 	bl	8012e20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	3730      	adds	r7, #48	; 0x30
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bd80      	pop	{r7, pc}

08012da2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012da2:	b580      	push	{r7, lr}
 8012da4:	b08a      	sub	sp, #40	; 0x28
 8012da6:	af02      	add	r7, sp, #8
 8012da8:	60f8      	str	r0, [r7, #12]
 8012daa:	60b9      	str	r1, [r7, #8]
 8012dac:	4613      	mov	r3, r2
 8012dae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d109      	bne.n	8012dca <xQueueGenericCreate+0x28>
 8012db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dba:	f383 8811 	msr	BASEPRI, r3
 8012dbe:	f3bf 8f6f 	isb	sy
 8012dc2:	f3bf 8f4f 	dsb	sy
 8012dc6:	613b      	str	r3, [r7, #16]
 8012dc8:	e7fe      	b.n	8012dc8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012dca:	68bb      	ldr	r3, [r7, #8]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d102      	bne.n	8012dd6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	61fb      	str	r3, [r7, #28]
 8012dd4:	e004      	b.n	8012de0 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	68ba      	ldr	r2, [r7, #8]
 8012dda:	fb02 f303 	mul.w	r3, r2, r3
 8012dde:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012de0:	69fb      	ldr	r3, [r7, #28]
 8012de2:	3348      	adds	r3, #72	; 0x48
 8012de4:	4618      	mov	r0, r3
 8012de6:	f001 ff63 	bl	8014cb0 <pvPortMalloc>
 8012dea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012dec:	69bb      	ldr	r3, [r7, #24]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d011      	beq.n	8012e16 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012df2:	69bb      	ldr	r3, [r7, #24]
 8012df4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012df6:	697b      	ldr	r3, [r7, #20]
 8012df8:	3348      	adds	r3, #72	; 0x48
 8012dfa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012dfc:	69bb      	ldr	r3, [r7, #24]
 8012dfe:	2200      	movs	r2, #0
 8012e00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012e04:	79fa      	ldrb	r2, [r7, #7]
 8012e06:	69bb      	ldr	r3, [r7, #24]
 8012e08:	9300      	str	r3, [sp, #0]
 8012e0a:	4613      	mov	r3, r2
 8012e0c:	697a      	ldr	r2, [r7, #20]
 8012e0e:	68b9      	ldr	r1, [r7, #8]
 8012e10:	68f8      	ldr	r0, [r7, #12]
 8012e12:	f000 f805 	bl	8012e20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012e16:	69bb      	ldr	r3, [r7, #24]
	}
 8012e18:	4618      	mov	r0, r3
 8012e1a:	3720      	adds	r7, #32
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	bd80      	pop	{r7, pc}

08012e20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b084      	sub	sp, #16
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	60f8      	str	r0, [r7, #12]
 8012e28:	60b9      	str	r1, [r7, #8]
 8012e2a:	607a      	str	r2, [r7, #4]
 8012e2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012e2e:	68bb      	ldr	r3, [r7, #8]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d103      	bne.n	8012e3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012e34:	69bb      	ldr	r3, [r7, #24]
 8012e36:	69ba      	ldr	r2, [r7, #24]
 8012e38:	601a      	str	r2, [r3, #0]
 8012e3a:	e002      	b.n	8012e42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012e3c:	69bb      	ldr	r3, [r7, #24]
 8012e3e:	687a      	ldr	r2, [r7, #4]
 8012e40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012e42:	69bb      	ldr	r3, [r7, #24]
 8012e44:	68fa      	ldr	r2, [r7, #12]
 8012e46:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012e48:	69bb      	ldr	r3, [r7, #24]
 8012e4a:	68ba      	ldr	r2, [r7, #8]
 8012e4c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012e4e:	2101      	movs	r1, #1
 8012e50:	69b8      	ldr	r0, [r7, #24]
 8012e52:	f7ff fecb 	bl	8012bec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012e56:	bf00      	nop
 8012e58:	3710      	adds	r7, #16
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd80      	pop	{r7, pc}

08012e5e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8012e5e:	b580      	push	{r7, lr}
 8012e60:	b082      	sub	sp, #8
 8012e62:	af00      	add	r7, sp, #0
 8012e64:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d00e      	beq.n	8012e8a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	2200      	movs	r2, #0
 8012e70:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	2200      	movs	r2, #0
 8012e76:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	2200      	movs	r2, #0
 8012e7c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8012e7e:	2300      	movs	r3, #0
 8012e80:	2200      	movs	r2, #0
 8012e82:	2100      	movs	r1, #0
 8012e84:	6878      	ldr	r0, [r7, #4]
 8012e86:	f000 f837 	bl	8012ef8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8012e8a:	bf00      	nop
 8012e8c:	3708      	adds	r7, #8
 8012e8e:	46bd      	mov	sp, r7
 8012e90:	bd80      	pop	{r7, pc}

08012e92 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8012e92:	b580      	push	{r7, lr}
 8012e94:	b086      	sub	sp, #24
 8012e96:	af00      	add	r7, sp, #0
 8012e98:	4603      	mov	r3, r0
 8012e9a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012e9c:	2301      	movs	r3, #1
 8012e9e:	617b      	str	r3, [r7, #20]
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012ea4:	79fb      	ldrb	r3, [r7, #7]
 8012ea6:	461a      	mov	r2, r3
 8012ea8:	6939      	ldr	r1, [r7, #16]
 8012eaa:	6978      	ldr	r0, [r7, #20]
 8012eac:	f7ff ff79 	bl	8012da2 <xQueueGenericCreate>
 8012eb0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012eb2:	68f8      	ldr	r0, [r7, #12]
 8012eb4:	f7ff ffd3 	bl	8012e5e <prvInitialiseMutex>

		return xNewQueue;
 8012eb8:	68fb      	ldr	r3, [r7, #12]
	}
 8012eba:	4618      	mov	r0, r3
 8012ebc:	3718      	adds	r7, #24
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	bd80      	pop	{r7, pc}

08012ec2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8012ec2:	b580      	push	{r7, lr}
 8012ec4:	b088      	sub	sp, #32
 8012ec6:	af02      	add	r7, sp, #8
 8012ec8:	4603      	mov	r3, r0
 8012eca:	6039      	str	r1, [r7, #0]
 8012ecc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012ece:	2301      	movs	r3, #1
 8012ed0:	617b      	str	r3, [r7, #20]
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8012ed6:	79fb      	ldrb	r3, [r7, #7]
 8012ed8:	9300      	str	r3, [sp, #0]
 8012eda:	683b      	ldr	r3, [r7, #0]
 8012edc:	2200      	movs	r2, #0
 8012ede:	6939      	ldr	r1, [r7, #16]
 8012ee0:	6978      	ldr	r0, [r7, #20]
 8012ee2:	f7ff feeb 	bl	8012cbc <xQueueGenericCreateStatic>
 8012ee6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012ee8:	68f8      	ldr	r0, [r7, #12]
 8012eea:	f7ff ffb8 	bl	8012e5e <prvInitialiseMutex>

		return xNewQueue;
 8012eee:	68fb      	ldr	r3, [r7, #12]
	}
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	3718      	adds	r7, #24
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	bd80      	pop	{r7, pc}

08012ef8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b08e      	sub	sp, #56	; 0x38
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	60f8      	str	r0, [r7, #12]
 8012f00:	60b9      	str	r1, [r7, #8]
 8012f02:	607a      	str	r2, [r7, #4]
 8012f04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012f06:	2300      	movs	r3, #0
 8012f08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d109      	bne.n	8012f28 <xQueueGenericSend+0x30>
 8012f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f18:	f383 8811 	msr	BASEPRI, r3
 8012f1c:	f3bf 8f6f 	isb	sy
 8012f20:	f3bf 8f4f 	dsb	sy
 8012f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8012f26:	e7fe      	b.n	8012f26 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012f28:	68bb      	ldr	r3, [r7, #8]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d103      	bne.n	8012f36 <xQueueGenericSend+0x3e>
 8012f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d101      	bne.n	8012f3a <xQueueGenericSend+0x42>
 8012f36:	2301      	movs	r3, #1
 8012f38:	e000      	b.n	8012f3c <xQueueGenericSend+0x44>
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d109      	bne.n	8012f54 <xQueueGenericSend+0x5c>
 8012f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f44:	f383 8811 	msr	BASEPRI, r3
 8012f48:	f3bf 8f6f 	isb	sy
 8012f4c:	f3bf 8f4f 	dsb	sy
 8012f50:	627b      	str	r3, [r7, #36]	; 0x24
 8012f52:	e7fe      	b.n	8012f52 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012f54:	683b      	ldr	r3, [r7, #0]
 8012f56:	2b02      	cmp	r3, #2
 8012f58:	d103      	bne.n	8012f62 <xQueueGenericSend+0x6a>
 8012f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012f5e:	2b01      	cmp	r3, #1
 8012f60:	d101      	bne.n	8012f66 <xQueueGenericSend+0x6e>
 8012f62:	2301      	movs	r3, #1
 8012f64:	e000      	b.n	8012f68 <xQueueGenericSend+0x70>
 8012f66:	2300      	movs	r3, #0
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d109      	bne.n	8012f80 <xQueueGenericSend+0x88>
 8012f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f70:	f383 8811 	msr	BASEPRI, r3
 8012f74:	f3bf 8f6f 	isb	sy
 8012f78:	f3bf 8f4f 	dsb	sy
 8012f7c:	623b      	str	r3, [r7, #32]
 8012f7e:	e7fe      	b.n	8012f7e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012f80:	f001 f968 	bl	8014254 <xTaskGetSchedulerState>
 8012f84:	4603      	mov	r3, r0
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d102      	bne.n	8012f90 <xQueueGenericSend+0x98>
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d101      	bne.n	8012f94 <xQueueGenericSend+0x9c>
 8012f90:	2301      	movs	r3, #1
 8012f92:	e000      	b.n	8012f96 <xQueueGenericSend+0x9e>
 8012f94:	2300      	movs	r3, #0
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d109      	bne.n	8012fae <xQueueGenericSend+0xb6>
 8012f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f9e:	f383 8811 	msr	BASEPRI, r3
 8012fa2:	f3bf 8f6f 	isb	sy
 8012fa6:	f3bf 8f4f 	dsb	sy
 8012faa:	61fb      	str	r3, [r7, #28]
 8012fac:	e7fe      	b.n	8012fac <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012fae:	f001 fd65 	bl	8014a7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012fba:	429a      	cmp	r2, r3
 8012fbc:	d302      	bcc.n	8012fc4 <xQueueGenericSend+0xcc>
 8012fbe:	683b      	ldr	r3, [r7, #0]
 8012fc0:	2b02      	cmp	r3, #2
 8012fc2:	d129      	bne.n	8013018 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012fc4:	683a      	ldr	r2, [r7, #0]
 8012fc6:	68b9      	ldr	r1, [r7, #8]
 8012fc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012fca:	f000 fa7c 	bl	80134c6 <prvCopyDataToQueue>
 8012fce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d010      	beq.n	8012ffa <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fda:	3324      	adds	r3, #36	; 0x24
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f000 ff83 	bl	8013ee8 <xTaskRemoveFromEventList>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d013      	beq.n	8013010 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012fe8:	4b3f      	ldr	r3, [pc, #252]	; (80130e8 <xQueueGenericSend+0x1f0>)
 8012fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012fee:	601a      	str	r2, [r3, #0]
 8012ff0:	f3bf 8f4f 	dsb	sy
 8012ff4:	f3bf 8f6f 	isb	sy
 8012ff8:	e00a      	b.n	8013010 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d007      	beq.n	8013010 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013000:	4b39      	ldr	r3, [pc, #228]	; (80130e8 <xQueueGenericSend+0x1f0>)
 8013002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013006:	601a      	str	r2, [r3, #0]
 8013008:	f3bf 8f4f 	dsb	sy
 801300c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013010:	f001 fd62 	bl	8014ad8 <vPortExitCritical>
				return pdPASS;
 8013014:	2301      	movs	r3, #1
 8013016:	e063      	b.n	80130e0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d103      	bne.n	8013026 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801301e:	f001 fd5b 	bl	8014ad8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013022:	2300      	movs	r3, #0
 8013024:	e05c      	b.n	80130e0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013028:	2b00      	cmp	r3, #0
 801302a:	d106      	bne.n	801303a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801302c:	f107 0314 	add.w	r3, r7, #20
 8013030:	4618      	mov	r0, r3
 8013032:	f000 ffbb 	bl	8013fac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013036:	2301      	movs	r3, #1
 8013038:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801303a:	f001 fd4d 	bl	8014ad8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801303e:	f000 fd73 	bl	8013b28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013042:	f001 fd1b 	bl	8014a7c <vPortEnterCritical>
 8013046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013048:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801304c:	b25b      	sxtb	r3, r3
 801304e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013052:	d103      	bne.n	801305c <xQueueGenericSend+0x164>
 8013054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013056:	2200      	movs	r2, #0
 8013058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801305e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013062:	b25b      	sxtb	r3, r3
 8013064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013068:	d103      	bne.n	8013072 <xQueueGenericSend+0x17a>
 801306a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801306c:	2200      	movs	r2, #0
 801306e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013072:	f001 fd31 	bl	8014ad8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013076:	1d3a      	adds	r2, r7, #4
 8013078:	f107 0314 	add.w	r3, r7, #20
 801307c:	4611      	mov	r1, r2
 801307e:	4618      	mov	r0, r3
 8013080:	f000 ffaa 	bl	8013fd8 <xTaskCheckForTimeOut>
 8013084:	4603      	mov	r3, r0
 8013086:	2b00      	cmp	r3, #0
 8013088:	d124      	bne.n	80130d4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801308a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801308c:	f000 fb13 	bl	80136b6 <prvIsQueueFull>
 8013090:	4603      	mov	r3, r0
 8013092:	2b00      	cmp	r3, #0
 8013094:	d018      	beq.n	80130c8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013098:	3310      	adds	r3, #16
 801309a:	687a      	ldr	r2, [r7, #4]
 801309c:	4611      	mov	r1, r2
 801309e:	4618      	mov	r0, r3
 80130a0:	f000 fefe 	bl	8013ea0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80130a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130a6:	f000 fa9e 	bl	80135e6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80130aa:	f000 fd4b 	bl	8013b44 <xTaskResumeAll>
 80130ae:	4603      	mov	r3, r0
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	f47f af7c 	bne.w	8012fae <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80130b6:	4b0c      	ldr	r3, [pc, #48]	; (80130e8 <xQueueGenericSend+0x1f0>)
 80130b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130bc:	601a      	str	r2, [r3, #0]
 80130be:	f3bf 8f4f 	dsb	sy
 80130c2:	f3bf 8f6f 	isb	sy
 80130c6:	e772      	b.n	8012fae <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80130c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130ca:	f000 fa8c 	bl	80135e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80130ce:	f000 fd39 	bl	8013b44 <xTaskResumeAll>
 80130d2:	e76c      	b.n	8012fae <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80130d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130d6:	f000 fa86 	bl	80135e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80130da:	f000 fd33 	bl	8013b44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80130de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80130e0:	4618      	mov	r0, r3
 80130e2:	3738      	adds	r7, #56	; 0x38
 80130e4:	46bd      	mov	sp, r7
 80130e6:	bd80      	pop	{r7, pc}
 80130e8:	e000ed04 	.word	0xe000ed04

080130ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b08e      	sub	sp, #56	; 0x38
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	60f8      	str	r0, [r7, #12]
 80130f4:	60b9      	str	r1, [r7, #8]
 80130f6:	607a      	str	r2, [r7, #4]
 80130f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80130fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013100:	2b00      	cmp	r3, #0
 8013102:	d109      	bne.n	8013118 <xQueueGenericSendFromISR+0x2c>
 8013104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013108:	f383 8811 	msr	BASEPRI, r3
 801310c:	f3bf 8f6f 	isb	sy
 8013110:	f3bf 8f4f 	dsb	sy
 8013114:	627b      	str	r3, [r7, #36]	; 0x24
 8013116:	e7fe      	b.n	8013116 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013118:	68bb      	ldr	r3, [r7, #8]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d103      	bne.n	8013126 <xQueueGenericSendFromISR+0x3a>
 801311e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013122:	2b00      	cmp	r3, #0
 8013124:	d101      	bne.n	801312a <xQueueGenericSendFromISR+0x3e>
 8013126:	2301      	movs	r3, #1
 8013128:	e000      	b.n	801312c <xQueueGenericSendFromISR+0x40>
 801312a:	2300      	movs	r3, #0
 801312c:	2b00      	cmp	r3, #0
 801312e:	d109      	bne.n	8013144 <xQueueGenericSendFromISR+0x58>
 8013130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013134:	f383 8811 	msr	BASEPRI, r3
 8013138:	f3bf 8f6f 	isb	sy
 801313c:	f3bf 8f4f 	dsb	sy
 8013140:	623b      	str	r3, [r7, #32]
 8013142:	e7fe      	b.n	8013142 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013144:	683b      	ldr	r3, [r7, #0]
 8013146:	2b02      	cmp	r3, #2
 8013148:	d103      	bne.n	8013152 <xQueueGenericSendFromISR+0x66>
 801314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801314c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801314e:	2b01      	cmp	r3, #1
 8013150:	d101      	bne.n	8013156 <xQueueGenericSendFromISR+0x6a>
 8013152:	2301      	movs	r3, #1
 8013154:	e000      	b.n	8013158 <xQueueGenericSendFromISR+0x6c>
 8013156:	2300      	movs	r3, #0
 8013158:	2b00      	cmp	r3, #0
 801315a:	d109      	bne.n	8013170 <xQueueGenericSendFromISR+0x84>
 801315c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013160:	f383 8811 	msr	BASEPRI, r3
 8013164:	f3bf 8f6f 	isb	sy
 8013168:	f3bf 8f4f 	dsb	sy
 801316c:	61fb      	str	r3, [r7, #28]
 801316e:	e7fe      	b.n	801316e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013170:	f001 fd60 	bl	8014c34 <vPortValidateInterruptPriority>
	__asm volatile
 8013174:	f3ef 8211 	mrs	r2, BASEPRI
 8013178:	f04f 0350 	mov.w	r3, #80	; 0x50
 801317c:	f383 8811 	msr	BASEPRI, r3
 8013180:	f3bf 8f6f 	isb	sy
 8013184:	f3bf 8f4f 	dsb	sy
 8013188:	61ba      	str	r2, [r7, #24]
 801318a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801318c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801318e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013192:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013198:	429a      	cmp	r2, r3
 801319a:	d302      	bcc.n	80131a2 <xQueueGenericSendFromISR+0xb6>
 801319c:	683b      	ldr	r3, [r7, #0]
 801319e:	2b02      	cmp	r3, #2
 80131a0:	d12c      	bne.n	80131fc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80131a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80131a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80131ac:	683a      	ldr	r2, [r7, #0]
 80131ae:	68b9      	ldr	r1, [r7, #8]
 80131b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131b2:	f000 f988 	bl	80134c6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80131b6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80131ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131be:	d112      	bne.n	80131e6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80131c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d016      	beq.n	80131f6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80131c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ca:	3324      	adds	r3, #36	; 0x24
 80131cc:	4618      	mov	r0, r3
 80131ce:	f000 fe8b 	bl	8013ee8 <xTaskRemoveFromEventList>
 80131d2:	4603      	mov	r3, r0
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d00e      	beq.n	80131f6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d00b      	beq.n	80131f6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	2201      	movs	r2, #1
 80131e2:	601a      	str	r2, [r3, #0]
 80131e4:	e007      	b.n	80131f6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80131e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80131ea:	3301      	adds	r3, #1
 80131ec:	b2db      	uxtb	r3, r3
 80131ee:	b25a      	sxtb	r2, r3
 80131f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80131f6:	2301      	movs	r3, #1
 80131f8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80131fa:	e001      	b.n	8013200 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80131fc:	2300      	movs	r3, #0
 80131fe:	637b      	str	r3, [r7, #52]	; 0x34
 8013200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013202:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013204:	693b      	ldr	r3, [r7, #16]
 8013206:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801320a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801320c:	4618      	mov	r0, r3
 801320e:	3738      	adds	r7, #56	; 0x38
 8013210:	46bd      	mov	sp, r7
 8013212:	bd80      	pop	{r7, pc}

08013214 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013214:	b580      	push	{r7, lr}
 8013216:	b08c      	sub	sp, #48	; 0x30
 8013218:	af00      	add	r7, sp, #0
 801321a:	60f8      	str	r0, [r7, #12]
 801321c:	60b9      	str	r1, [r7, #8]
 801321e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013220:	2300      	movs	r3, #0
 8013222:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801322a:	2b00      	cmp	r3, #0
 801322c:	d109      	bne.n	8013242 <xQueueReceive+0x2e>
	__asm volatile
 801322e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013232:	f383 8811 	msr	BASEPRI, r3
 8013236:	f3bf 8f6f 	isb	sy
 801323a:	f3bf 8f4f 	dsb	sy
 801323e:	623b      	str	r3, [r7, #32]
 8013240:	e7fe      	b.n	8013240 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013242:	68bb      	ldr	r3, [r7, #8]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d103      	bne.n	8013250 <xQueueReceive+0x3c>
 8013248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801324c:	2b00      	cmp	r3, #0
 801324e:	d101      	bne.n	8013254 <xQueueReceive+0x40>
 8013250:	2301      	movs	r3, #1
 8013252:	e000      	b.n	8013256 <xQueueReceive+0x42>
 8013254:	2300      	movs	r3, #0
 8013256:	2b00      	cmp	r3, #0
 8013258:	d109      	bne.n	801326e <xQueueReceive+0x5a>
 801325a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801325e:	f383 8811 	msr	BASEPRI, r3
 8013262:	f3bf 8f6f 	isb	sy
 8013266:	f3bf 8f4f 	dsb	sy
 801326a:	61fb      	str	r3, [r7, #28]
 801326c:	e7fe      	b.n	801326c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801326e:	f000 fff1 	bl	8014254 <xTaskGetSchedulerState>
 8013272:	4603      	mov	r3, r0
 8013274:	2b00      	cmp	r3, #0
 8013276:	d102      	bne.n	801327e <xQueueReceive+0x6a>
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d101      	bne.n	8013282 <xQueueReceive+0x6e>
 801327e:	2301      	movs	r3, #1
 8013280:	e000      	b.n	8013284 <xQueueReceive+0x70>
 8013282:	2300      	movs	r3, #0
 8013284:	2b00      	cmp	r3, #0
 8013286:	d109      	bne.n	801329c <xQueueReceive+0x88>
 8013288:	f04f 0350 	mov.w	r3, #80	; 0x50
 801328c:	f383 8811 	msr	BASEPRI, r3
 8013290:	f3bf 8f6f 	isb	sy
 8013294:	f3bf 8f4f 	dsb	sy
 8013298:	61bb      	str	r3, [r7, #24]
 801329a:	e7fe      	b.n	801329a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801329c:	f001 fbee 	bl	8014a7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80132a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132a4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80132a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d01f      	beq.n	80132ec <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80132ac:	68b9      	ldr	r1, [r7, #8]
 80132ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80132b0:	f000 f973 	bl	801359a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80132b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132b6:	1e5a      	subs	r2, r3, #1
 80132b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132ba:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80132bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132be:	691b      	ldr	r3, [r3, #16]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d00f      	beq.n	80132e4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80132c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132c6:	3310      	adds	r3, #16
 80132c8:	4618      	mov	r0, r3
 80132ca:	f000 fe0d 	bl	8013ee8 <xTaskRemoveFromEventList>
 80132ce:	4603      	mov	r3, r0
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d007      	beq.n	80132e4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80132d4:	4b3c      	ldr	r3, [pc, #240]	; (80133c8 <xQueueReceive+0x1b4>)
 80132d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132da:	601a      	str	r2, [r3, #0]
 80132dc:	f3bf 8f4f 	dsb	sy
 80132e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80132e4:	f001 fbf8 	bl	8014ad8 <vPortExitCritical>
				return pdPASS;
 80132e8:	2301      	movs	r3, #1
 80132ea:	e069      	b.n	80133c0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d103      	bne.n	80132fa <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80132f2:	f001 fbf1 	bl	8014ad8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80132f6:	2300      	movs	r3, #0
 80132f8:	e062      	b.n	80133c0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80132fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d106      	bne.n	801330e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013300:	f107 0310 	add.w	r3, r7, #16
 8013304:	4618      	mov	r0, r3
 8013306:	f000 fe51 	bl	8013fac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801330a:	2301      	movs	r3, #1
 801330c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801330e:	f001 fbe3 	bl	8014ad8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013312:	f000 fc09 	bl	8013b28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013316:	f001 fbb1 	bl	8014a7c <vPortEnterCritical>
 801331a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801331c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013320:	b25b      	sxtb	r3, r3
 8013322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013326:	d103      	bne.n	8013330 <xQueueReceive+0x11c>
 8013328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801332a:	2200      	movs	r2, #0
 801332c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013332:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013336:	b25b      	sxtb	r3, r3
 8013338:	f1b3 3fff 	cmp.w	r3, #4294967295
 801333c:	d103      	bne.n	8013346 <xQueueReceive+0x132>
 801333e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013340:	2200      	movs	r2, #0
 8013342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013346:	f001 fbc7 	bl	8014ad8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801334a:	1d3a      	adds	r2, r7, #4
 801334c:	f107 0310 	add.w	r3, r7, #16
 8013350:	4611      	mov	r1, r2
 8013352:	4618      	mov	r0, r3
 8013354:	f000 fe40 	bl	8013fd8 <xTaskCheckForTimeOut>
 8013358:	4603      	mov	r3, r0
 801335a:	2b00      	cmp	r3, #0
 801335c:	d123      	bne.n	80133a6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801335e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013360:	f000 f993 	bl	801368a <prvIsQueueEmpty>
 8013364:	4603      	mov	r3, r0
 8013366:	2b00      	cmp	r3, #0
 8013368:	d017      	beq.n	801339a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801336c:	3324      	adds	r3, #36	; 0x24
 801336e:	687a      	ldr	r2, [r7, #4]
 8013370:	4611      	mov	r1, r2
 8013372:	4618      	mov	r0, r3
 8013374:	f000 fd94 	bl	8013ea0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801337a:	f000 f934 	bl	80135e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801337e:	f000 fbe1 	bl	8013b44 <xTaskResumeAll>
 8013382:	4603      	mov	r3, r0
 8013384:	2b00      	cmp	r3, #0
 8013386:	d189      	bne.n	801329c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8013388:	4b0f      	ldr	r3, [pc, #60]	; (80133c8 <xQueueReceive+0x1b4>)
 801338a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801338e:	601a      	str	r2, [r3, #0]
 8013390:	f3bf 8f4f 	dsb	sy
 8013394:	f3bf 8f6f 	isb	sy
 8013398:	e780      	b.n	801329c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801339a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801339c:	f000 f923 	bl	80135e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80133a0:	f000 fbd0 	bl	8013b44 <xTaskResumeAll>
 80133a4:	e77a      	b.n	801329c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80133a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133a8:	f000 f91d 	bl	80135e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80133ac:	f000 fbca 	bl	8013b44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80133b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133b2:	f000 f96a 	bl	801368a <prvIsQueueEmpty>
 80133b6:	4603      	mov	r3, r0
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	f43f af6f 	beq.w	801329c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80133be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80133c0:	4618      	mov	r0, r3
 80133c2:	3730      	adds	r7, #48	; 0x30
 80133c4:	46bd      	mov	sp, r7
 80133c6:	bd80      	pop	{r7, pc}
 80133c8:	e000ed04 	.word	0xe000ed04

080133cc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80133cc:	b580      	push	{r7, lr}
 80133ce:	b08e      	sub	sp, #56	; 0x38
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	60f8      	str	r0, [r7, #12]
 80133d4:	60b9      	str	r1, [r7, #8]
 80133d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80133dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d109      	bne.n	80133f6 <xQueueReceiveFromISR+0x2a>
 80133e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133e6:	f383 8811 	msr	BASEPRI, r3
 80133ea:	f3bf 8f6f 	isb	sy
 80133ee:	f3bf 8f4f 	dsb	sy
 80133f2:	623b      	str	r3, [r7, #32]
 80133f4:	e7fe      	b.n	80133f4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80133f6:	68bb      	ldr	r3, [r7, #8]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d103      	bne.n	8013404 <xQueueReceiveFromISR+0x38>
 80133fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013400:	2b00      	cmp	r3, #0
 8013402:	d101      	bne.n	8013408 <xQueueReceiveFromISR+0x3c>
 8013404:	2301      	movs	r3, #1
 8013406:	e000      	b.n	801340a <xQueueReceiveFromISR+0x3e>
 8013408:	2300      	movs	r3, #0
 801340a:	2b00      	cmp	r3, #0
 801340c:	d109      	bne.n	8013422 <xQueueReceiveFromISR+0x56>
 801340e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013412:	f383 8811 	msr	BASEPRI, r3
 8013416:	f3bf 8f6f 	isb	sy
 801341a:	f3bf 8f4f 	dsb	sy
 801341e:	61fb      	str	r3, [r7, #28]
 8013420:	e7fe      	b.n	8013420 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013422:	f001 fc07 	bl	8014c34 <vPortValidateInterruptPriority>
	__asm volatile
 8013426:	f3ef 8211 	mrs	r2, BASEPRI
 801342a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801342e:	f383 8811 	msr	BASEPRI, r3
 8013432:	f3bf 8f6f 	isb	sy
 8013436:	f3bf 8f4f 	dsb	sy
 801343a:	61ba      	str	r2, [r7, #24]
 801343c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801343e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013440:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013446:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801344a:	2b00      	cmp	r3, #0
 801344c:	d02f      	beq.n	80134ae <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801344e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013450:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013458:	68b9      	ldr	r1, [r7, #8]
 801345a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801345c:	f000 f89d 	bl	801359a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013462:	1e5a      	subs	r2, r3, #1
 8013464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013466:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013468:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801346c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013470:	d112      	bne.n	8013498 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013474:	691b      	ldr	r3, [r3, #16]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d016      	beq.n	80134a8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801347a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801347c:	3310      	adds	r3, #16
 801347e:	4618      	mov	r0, r3
 8013480:	f000 fd32 	bl	8013ee8 <xTaskRemoveFromEventList>
 8013484:	4603      	mov	r3, r0
 8013486:	2b00      	cmp	r3, #0
 8013488:	d00e      	beq.n	80134a8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d00b      	beq.n	80134a8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	2201      	movs	r2, #1
 8013494:	601a      	str	r2, [r3, #0]
 8013496:	e007      	b.n	80134a8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801349c:	3301      	adds	r3, #1
 801349e:	b2db      	uxtb	r3, r3
 80134a0:	b25a      	sxtb	r2, r3
 80134a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80134a8:	2301      	movs	r3, #1
 80134aa:	637b      	str	r3, [r7, #52]	; 0x34
 80134ac:	e001      	b.n	80134b2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80134ae:	2300      	movs	r3, #0
 80134b0:	637b      	str	r3, [r7, #52]	; 0x34
 80134b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134b4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80134b6:	693b      	ldr	r3, [r7, #16]
 80134b8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80134bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80134be:	4618      	mov	r0, r3
 80134c0:	3738      	adds	r7, #56	; 0x38
 80134c2:	46bd      	mov	sp, r7
 80134c4:	bd80      	pop	{r7, pc}

080134c6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80134c6:	b580      	push	{r7, lr}
 80134c8:	b086      	sub	sp, #24
 80134ca:	af00      	add	r7, sp, #0
 80134cc:	60f8      	str	r0, [r7, #12]
 80134ce:	60b9      	str	r1, [r7, #8]
 80134d0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80134d2:	2300      	movs	r3, #0
 80134d4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134da:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d10d      	bne.n	8013500 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d14d      	bne.n	8013588 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	689b      	ldr	r3, [r3, #8]
 80134f0:	4618      	mov	r0, r3
 80134f2:	f000 fecd 	bl	8014290 <xTaskPriorityDisinherit>
 80134f6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	2200      	movs	r2, #0
 80134fc:	609a      	str	r2, [r3, #8]
 80134fe:	e043      	b.n	8013588 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d119      	bne.n	801353a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	6858      	ldr	r0, [r3, #4]
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801350e:	461a      	mov	r2, r3
 8013510:	68b9      	ldr	r1, [r7, #8]
 8013512:	f002 fb33 	bl	8015b7c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	685a      	ldr	r2, [r3, #4]
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801351e:	441a      	add	r2, r3
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	685a      	ldr	r2, [r3, #4]
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	689b      	ldr	r3, [r3, #8]
 801352c:	429a      	cmp	r2, r3
 801352e:	d32b      	bcc.n	8013588 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	681a      	ldr	r2, [r3, #0]
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	605a      	str	r2, [r3, #4]
 8013538:	e026      	b.n	8013588 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	68d8      	ldr	r0, [r3, #12]
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013542:	461a      	mov	r2, r3
 8013544:	68b9      	ldr	r1, [r7, #8]
 8013546:	f002 fb19 	bl	8015b7c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	68da      	ldr	r2, [r3, #12]
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013552:	425b      	negs	r3, r3
 8013554:	441a      	add	r2, r3
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	68da      	ldr	r2, [r3, #12]
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	429a      	cmp	r2, r3
 8013564:	d207      	bcs.n	8013576 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	689a      	ldr	r2, [r3, #8]
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801356e:	425b      	negs	r3, r3
 8013570:	441a      	add	r2, r3
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	2b02      	cmp	r3, #2
 801357a:	d105      	bne.n	8013588 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801357c:	693b      	ldr	r3, [r7, #16]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d002      	beq.n	8013588 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013582:	693b      	ldr	r3, [r7, #16]
 8013584:	3b01      	subs	r3, #1
 8013586:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013588:	693b      	ldr	r3, [r7, #16]
 801358a:	1c5a      	adds	r2, r3, #1
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013590:	697b      	ldr	r3, [r7, #20]
}
 8013592:	4618      	mov	r0, r3
 8013594:	3718      	adds	r7, #24
 8013596:	46bd      	mov	sp, r7
 8013598:	bd80      	pop	{r7, pc}

0801359a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801359a:	b580      	push	{r7, lr}
 801359c:	b082      	sub	sp, #8
 801359e:	af00      	add	r7, sp, #0
 80135a0:	6078      	str	r0, [r7, #4]
 80135a2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d018      	beq.n	80135de <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	68da      	ldr	r2, [r3, #12]
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135b4:	441a      	add	r2, r3
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	68da      	ldr	r2, [r3, #12]
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	689b      	ldr	r3, [r3, #8]
 80135c2:	429a      	cmp	r2, r3
 80135c4:	d303      	bcc.n	80135ce <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	681a      	ldr	r2, [r3, #0]
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	68d9      	ldr	r1, [r3, #12]
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135d6:	461a      	mov	r2, r3
 80135d8:	6838      	ldr	r0, [r7, #0]
 80135da:	f002 facf 	bl	8015b7c <memcpy>
	}
}
 80135de:	bf00      	nop
 80135e0:	3708      	adds	r7, #8
 80135e2:	46bd      	mov	sp, r7
 80135e4:	bd80      	pop	{r7, pc}

080135e6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80135e6:	b580      	push	{r7, lr}
 80135e8:	b084      	sub	sp, #16
 80135ea:	af00      	add	r7, sp, #0
 80135ec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80135ee:	f001 fa45 	bl	8014a7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80135f8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80135fa:	e011      	b.n	8013620 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013600:	2b00      	cmp	r3, #0
 8013602:	d012      	beq.n	801362a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	3324      	adds	r3, #36	; 0x24
 8013608:	4618      	mov	r0, r3
 801360a:	f000 fc6d 	bl	8013ee8 <xTaskRemoveFromEventList>
 801360e:	4603      	mov	r3, r0
 8013610:	2b00      	cmp	r3, #0
 8013612:	d001      	beq.n	8013618 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013614:	f000 fd40 	bl	8014098 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013618:	7bfb      	ldrb	r3, [r7, #15]
 801361a:	3b01      	subs	r3, #1
 801361c:	b2db      	uxtb	r3, r3
 801361e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013624:	2b00      	cmp	r3, #0
 8013626:	dce9      	bgt.n	80135fc <prvUnlockQueue+0x16>
 8013628:	e000      	b.n	801362c <prvUnlockQueue+0x46>
					break;
 801362a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	22ff      	movs	r2, #255	; 0xff
 8013630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013634:	f001 fa50 	bl	8014ad8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013638:	f001 fa20 	bl	8014a7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013642:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013644:	e011      	b.n	801366a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	691b      	ldr	r3, [r3, #16]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d012      	beq.n	8013674 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	3310      	adds	r3, #16
 8013652:	4618      	mov	r0, r3
 8013654:	f000 fc48 	bl	8013ee8 <xTaskRemoveFromEventList>
 8013658:	4603      	mov	r3, r0
 801365a:	2b00      	cmp	r3, #0
 801365c:	d001      	beq.n	8013662 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801365e:	f000 fd1b 	bl	8014098 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013662:	7bbb      	ldrb	r3, [r7, #14]
 8013664:	3b01      	subs	r3, #1
 8013666:	b2db      	uxtb	r3, r3
 8013668:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801366a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801366e:	2b00      	cmp	r3, #0
 8013670:	dce9      	bgt.n	8013646 <prvUnlockQueue+0x60>
 8013672:	e000      	b.n	8013676 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013674:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	22ff      	movs	r2, #255	; 0xff
 801367a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801367e:	f001 fa2b 	bl	8014ad8 <vPortExitCritical>
}
 8013682:	bf00      	nop
 8013684:	3710      	adds	r7, #16
 8013686:	46bd      	mov	sp, r7
 8013688:	bd80      	pop	{r7, pc}

0801368a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801368a:	b580      	push	{r7, lr}
 801368c:	b084      	sub	sp, #16
 801368e:	af00      	add	r7, sp, #0
 8013690:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013692:	f001 f9f3 	bl	8014a7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801369a:	2b00      	cmp	r3, #0
 801369c:	d102      	bne.n	80136a4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801369e:	2301      	movs	r3, #1
 80136a0:	60fb      	str	r3, [r7, #12]
 80136a2:	e001      	b.n	80136a8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80136a4:	2300      	movs	r3, #0
 80136a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80136a8:	f001 fa16 	bl	8014ad8 <vPortExitCritical>

	return xReturn;
 80136ac:	68fb      	ldr	r3, [r7, #12]
}
 80136ae:	4618      	mov	r0, r3
 80136b0:	3710      	adds	r7, #16
 80136b2:	46bd      	mov	sp, r7
 80136b4:	bd80      	pop	{r7, pc}

080136b6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80136b6:	b580      	push	{r7, lr}
 80136b8:	b084      	sub	sp, #16
 80136ba:	af00      	add	r7, sp, #0
 80136bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80136be:	f001 f9dd 	bl	8014a7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136ca:	429a      	cmp	r2, r3
 80136cc:	d102      	bne.n	80136d4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80136ce:	2301      	movs	r3, #1
 80136d0:	60fb      	str	r3, [r7, #12]
 80136d2:	e001      	b.n	80136d8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80136d4:	2300      	movs	r3, #0
 80136d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80136d8:	f001 f9fe 	bl	8014ad8 <vPortExitCritical>

	return xReturn;
 80136dc:	68fb      	ldr	r3, [r7, #12]
}
 80136de:	4618      	mov	r0, r3
 80136e0:	3710      	adds	r7, #16
 80136e2:	46bd      	mov	sp, r7
 80136e4:	bd80      	pop	{r7, pc}

080136e6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80136e6:	b580      	push	{r7, lr}
 80136e8:	b08e      	sub	sp, #56	; 0x38
 80136ea:	af04      	add	r7, sp, #16
 80136ec:	60f8      	str	r0, [r7, #12]
 80136ee:	60b9      	str	r1, [r7, #8]
 80136f0:	607a      	str	r2, [r7, #4]
 80136f2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80136f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d109      	bne.n	801370e <xTaskCreateStatic+0x28>
	__asm volatile
 80136fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136fe:	f383 8811 	msr	BASEPRI, r3
 8013702:	f3bf 8f6f 	isb	sy
 8013706:	f3bf 8f4f 	dsb	sy
 801370a:	623b      	str	r3, [r7, #32]
 801370c:	e7fe      	b.n	801370c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 801370e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013710:	2b00      	cmp	r3, #0
 8013712:	d109      	bne.n	8013728 <xTaskCreateStatic+0x42>
 8013714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013718:	f383 8811 	msr	BASEPRI, r3
 801371c:	f3bf 8f6f 	isb	sy
 8013720:	f3bf 8f4f 	dsb	sy
 8013724:	61fb      	str	r3, [r7, #28]
 8013726:	e7fe      	b.n	8013726 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013728:	2354      	movs	r3, #84	; 0x54
 801372a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801372c:	693b      	ldr	r3, [r7, #16]
 801372e:	2b54      	cmp	r3, #84	; 0x54
 8013730:	d009      	beq.n	8013746 <xTaskCreateStatic+0x60>
 8013732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013736:	f383 8811 	msr	BASEPRI, r3
 801373a:	f3bf 8f6f 	isb	sy
 801373e:	f3bf 8f4f 	dsb	sy
 8013742:	61bb      	str	r3, [r7, #24]
 8013744:	e7fe      	b.n	8013744 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013746:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801374a:	2b00      	cmp	r3, #0
 801374c:	d01e      	beq.n	801378c <xTaskCreateStatic+0xa6>
 801374e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013750:	2b00      	cmp	r3, #0
 8013752:	d01b      	beq.n	801378c <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013756:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801375a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801375c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013760:	2202      	movs	r2, #2
 8013762:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013766:	2300      	movs	r3, #0
 8013768:	9303      	str	r3, [sp, #12]
 801376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801376c:	9302      	str	r3, [sp, #8]
 801376e:	f107 0314 	add.w	r3, r7, #20
 8013772:	9301      	str	r3, [sp, #4]
 8013774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013776:	9300      	str	r3, [sp, #0]
 8013778:	683b      	ldr	r3, [r7, #0]
 801377a:	687a      	ldr	r2, [r7, #4]
 801377c:	68b9      	ldr	r1, [r7, #8]
 801377e:	68f8      	ldr	r0, [r7, #12]
 8013780:	f000 f850 	bl	8013824 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013784:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013786:	f000 f8d3 	bl	8013930 <prvAddNewTaskToReadyList>
 801378a:	e001      	b.n	8013790 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 801378c:	2300      	movs	r3, #0
 801378e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013790:	697b      	ldr	r3, [r7, #20]
	}
 8013792:	4618      	mov	r0, r3
 8013794:	3728      	adds	r7, #40	; 0x28
 8013796:	46bd      	mov	sp, r7
 8013798:	bd80      	pop	{r7, pc}

0801379a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801379a:	b580      	push	{r7, lr}
 801379c:	b08c      	sub	sp, #48	; 0x30
 801379e:	af04      	add	r7, sp, #16
 80137a0:	60f8      	str	r0, [r7, #12]
 80137a2:	60b9      	str	r1, [r7, #8]
 80137a4:	603b      	str	r3, [r7, #0]
 80137a6:	4613      	mov	r3, r2
 80137a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80137aa:	88fb      	ldrh	r3, [r7, #6]
 80137ac:	009b      	lsls	r3, r3, #2
 80137ae:	4618      	mov	r0, r3
 80137b0:	f001 fa7e 	bl	8014cb0 <pvPortMalloc>
 80137b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80137b6:	697b      	ldr	r3, [r7, #20]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d00e      	beq.n	80137da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80137bc:	2054      	movs	r0, #84	; 0x54
 80137be:	f001 fa77 	bl	8014cb0 <pvPortMalloc>
 80137c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80137c4:	69fb      	ldr	r3, [r7, #28]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d003      	beq.n	80137d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80137ca:	69fb      	ldr	r3, [r7, #28]
 80137cc:	697a      	ldr	r2, [r7, #20]
 80137ce:	631a      	str	r2, [r3, #48]	; 0x30
 80137d0:	e005      	b.n	80137de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80137d2:	6978      	ldr	r0, [r7, #20]
 80137d4:	f001 fb2e 	bl	8014e34 <vPortFree>
 80137d8:	e001      	b.n	80137de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80137da:	2300      	movs	r3, #0
 80137dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80137de:	69fb      	ldr	r3, [r7, #28]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d017      	beq.n	8013814 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80137e4:	69fb      	ldr	r3, [r7, #28]
 80137e6:	2200      	movs	r2, #0
 80137e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80137ec:	88fa      	ldrh	r2, [r7, #6]
 80137ee:	2300      	movs	r3, #0
 80137f0:	9303      	str	r3, [sp, #12]
 80137f2:	69fb      	ldr	r3, [r7, #28]
 80137f4:	9302      	str	r3, [sp, #8]
 80137f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137f8:	9301      	str	r3, [sp, #4]
 80137fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137fc:	9300      	str	r3, [sp, #0]
 80137fe:	683b      	ldr	r3, [r7, #0]
 8013800:	68b9      	ldr	r1, [r7, #8]
 8013802:	68f8      	ldr	r0, [r7, #12]
 8013804:	f000 f80e 	bl	8013824 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013808:	69f8      	ldr	r0, [r7, #28]
 801380a:	f000 f891 	bl	8013930 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801380e:	2301      	movs	r3, #1
 8013810:	61bb      	str	r3, [r7, #24]
 8013812:	e002      	b.n	801381a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013814:	f04f 33ff 	mov.w	r3, #4294967295
 8013818:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801381a:	69bb      	ldr	r3, [r7, #24]
	}
 801381c:	4618      	mov	r0, r3
 801381e:	3720      	adds	r7, #32
 8013820:	46bd      	mov	sp, r7
 8013822:	bd80      	pop	{r7, pc}

08013824 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b088      	sub	sp, #32
 8013828:	af00      	add	r7, sp, #0
 801382a:	60f8      	str	r0, [r7, #12]
 801382c:	60b9      	str	r1, [r7, #8]
 801382e:	607a      	str	r2, [r7, #4]
 8013830:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801383c:	3b01      	subs	r3, #1
 801383e:	009b      	lsls	r3, r3, #2
 8013840:	4413      	add	r3, r2
 8013842:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013844:	69bb      	ldr	r3, [r7, #24]
 8013846:	f023 0307 	bic.w	r3, r3, #7
 801384a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801384c:	69bb      	ldr	r3, [r7, #24]
 801384e:	f003 0307 	and.w	r3, r3, #7
 8013852:	2b00      	cmp	r3, #0
 8013854:	d009      	beq.n	801386a <prvInitialiseNewTask+0x46>
 8013856:	f04f 0350 	mov.w	r3, #80	; 0x50
 801385a:	f383 8811 	msr	BASEPRI, r3
 801385e:	f3bf 8f6f 	isb	sy
 8013862:	f3bf 8f4f 	dsb	sy
 8013866:	617b      	str	r3, [r7, #20]
 8013868:	e7fe      	b.n	8013868 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801386a:	68bb      	ldr	r3, [r7, #8]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d01f      	beq.n	80138b0 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013870:	2300      	movs	r3, #0
 8013872:	61fb      	str	r3, [r7, #28]
 8013874:	e012      	b.n	801389c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013876:	68ba      	ldr	r2, [r7, #8]
 8013878:	69fb      	ldr	r3, [r7, #28]
 801387a:	4413      	add	r3, r2
 801387c:	7819      	ldrb	r1, [r3, #0]
 801387e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013880:	69fb      	ldr	r3, [r7, #28]
 8013882:	4413      	add	r3, r2
 8013884:	3334      	adds	r3, #52	; 0x34
 8013886:	460a      	mov	r2, r1
 8013888:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801388a:	68ba      	ldr	r2, [r7, #8]
 801388c:	69fb      	ldr	r3, [r7, #28]
 801388e:	4413      	add	r3, r2
 8013890:	781b      	ldrb	r3, [r3, #0]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d006      	beq.n	80138a4 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013896:	69fb      	ldr	r3, [r7, #28]
 8013898:	3301      	adds	r3, #1
 801389a:	61fb      	str	r3, [r7, #28]
 801389c:	69fb      	ldr	r3, [r7, #28]
 801389e:	2b0f      	cmp	r3, #15
 80138a0:	d9e9      	bls.n	8013876 <prvInitialiseNewTask+0x52>
 80138a2:	e000      	b.n	80138a6 <prvInitialiseNewTask+0x82>
			{
				break;
 80138a4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80138a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138a8:	2200      	movs	r2, #0
 80138aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80138ae:	e003      	b.n	80138b8 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80138b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138b2:	2200      	movs	r2, #0
 80138b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80138b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138ba:	2b06      	cmp	r3, #6
 80138bc:	d901      	bls.n	80138c2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80138be:	2306      	movs	r3, #6
 80138c0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80138c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80138c6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80138c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80138cc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80138ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d0:	2200      	movs	r2, #0
 80138d2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80138d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d6:	3304      	adds	r3, #4
 80138d8:	4618      	mov	r0, r3
 80138da:	f7ff f8f2 	bl	8012ac2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80138de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138e0:	3318      	adds	r3, #24
 80138e2:	4618      	mov	r0, r3
 80138e4:	f7ff f8ed 	bl	8012ac2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80138e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80138ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138f0:	f1c3 0207 	rsb	r2, r3, #7
 80138f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80138f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138fc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80138fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013900:	2200      	movs	r2, #0
 8013902:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013906:	2200      	movs	r2, #0
 8013908:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801390c:	683a      	ldr	r2, [r7, #0]
 801390e:	68f9      	ldr	r1, [r7, #12]
 8013910:	69b8      	ldr	r0, [r7, #24]
 8013912:	f000 ff8b 	bl	801482c <pxPortInitialiseStack>
 8013916:	4602      	mov	r2, r0
 8013918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801391a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801391c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801391e:	2b00      	cmp	r3, #0
 8013920:	d002      	beq.n	8013928 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013926:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013928:	bf00      	nop
 801392a:	3720      	adds	r7, #32
 801392c:	46bd      	mov	sp, r7
 801392e:	bd80      	pop	{r7, pc}

08013930 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b082      	sub	sp, #8
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013938:	f001 f8a0 	bl	8014a7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801393c:	4b2a      	ldr	r3, [pc, #168]	; (80139e8 <prvAddNewTaskToReadyList+0xb8>)
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	3301      	adds	r3, #1
 8013942:	4a29      	ldr	r2, [pc, #164]	; (80139e8 <prvAddNewTaskToReadyList+0xb8>)
 8013944:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013946:	4b29      	ldr	r3, [pc, #164]	; (80139ec <prvAddNewTaskToReadyList+0xbc>)
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d109      	bne.n	8013962 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801394e:	4a27      	ldr	r2, [pc, #156]	; (80139ec <prvAddNewTaskToReadyList+0xbc>)
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013954:	4b24      	ldr	r3, [pc, #144]	; (80139e8 <prvAddNewTaskToReadyList+0xb8>)
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	2b01      	cmp	r3, #1
 801395a:	d110      	bne.n	801397e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801395c:	f000 fbc0 	bl	80140e0 <prvInitialiseTaskLists>
 8013960:	e00d      	b.n	801397e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013962:	4b23      	ldr	r3, [pc, #140]	; (80139f0 <prvAddNewTaskToReadyList+0xc0>)
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d109      	bne.n	801397e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801396a:	4b20      	ldr	r3, [pc, #128]	; (80139ec <prvAddNewTaskToReadyList+0xbc>)
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013974:	429a      	cmp	r2, r3
 8013976:	d802      	bhi.n	801397e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013978:	4a1c      	ldr	r2, [pc, #112]	; (80139ec <prvAddNewTaskToReadyList+0xbc>)
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801397e:	4b1d      	ldr	r3, [pc, #116]	; (80139f4 <prvAddNewTaskToReadyList+0xc4>)
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	3301      	adds	r3, #1
 8013984:	4a1b      	ldr	r2, [pc, #108]	; (80139f4 <prvAddNewTaskToReadyList+0xc4>)
 8013986:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801398c:	2201      	movs	r2, #1
 801398e:	409a      	lsls	r2, r3
 8013990:	4b19      	ldr	r3, [pc, #100]	; (80139f8 <prvAddNewTaskToReadyList+0xc8>)
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	4313      	orrs	r3, r2
 8013996:	4a18      	ldr	r2, [pc, #96]	; (80139f8 <prvAddNewTaskToReadyList+0xc8>)
 8013998:	6013      	str	r3, [r2, #0]
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801399e:	4613      	mov	r3, r2
 80139a0:	009b      	lsls	r3, r3, #2
 80139a2:	4413      	add	r3, r2
 80139a4:	009b      	lsls	r3, r3, #2
 80139a6:	4a15      	ldr	r2, [pc, #84]	; (80139fc <prvAddNewTaskToReadyList+0xcc>)
 80139a8:	441a      	add	r2, r3
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	3304      	adds	r3, #4
 80139ae:	4619      	mov	r1, r3
 80139b0:	4610      	mov	r0, r2
 80139b2:	f7ff f893 	bl	8012adc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80139b6:	f001 f88f 	bl	8014ad8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80139ba:	4b0d      	ldr	r3, [pc, #52]	; (80139f0 <prvAddNewTaskToReadyList+0xc0>)
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d00e      	beq.n	80139e0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80139c2:	4b0a      	ldr	r3, [pc, #40]	; (80139ec <prvAddNewTaskToReadyList+0xbc>)
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139cc:	429a      	cmp	r2, r3
 80139ce:	d207      	bcs.n	80139e0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80139d0:	4b0b      	ldr	r3, [pc, #44]	; (8013a00 <prvAddNewTaskToReadyList+0xd0>)
 80139d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139d6:	601a      	str	r2, [r3, #0]
 80139d8:	f3bf 8f4f 	dsb	sy
 80139dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80139e0:	bf00      	nop
 80139e2:	3708      	adds	r7, #8
 80139e4:	46bd      	mov	sp, r7
 80139e6:	bd80      	pop	{r7, pc}
 80139e8:	2000110c 	.word	0x2000110c
 80139ec:	2000100c 	.word	0x2000100c
 80139f0:	20001118 	.word	0x20001118
 80139f4:	20001128 	.word	0x20001128
 80139f8:	20001114 	.word	0x20001114
 80139fc:	20001010 	.word	0x20001010
 8013a00:	e000ed04 	.word	0xe000ed04

08013a04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b084      	sub	sp, #16
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d016      	beq.n	8013a44 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013a16:	4b13      	ldr	r3, [pc, #76]	; (8013a64 <vTaskDelay+0x60>)
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d009      	beq.n	8013a32 <vTaskDelay+0x2e>
 8013a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a22:	f383 8811 	msr	BASEPRI, r3
 8013a26:	f3bf 8f6f 	isb	sy
 8013a2a:	f3bf 8f4f 	dsb	sy
 8013a2e:	60bb      	str	r3, [r7, #8]
 8013a30:	e7fe      	b.n	8013a30 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8013a32:	f000 f879 	bl	8013b28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013a36:	2100      	movs	r1, #0
 8013a38:	6878      	ldr	r0, [r7, #4]
 8013a3a:	f000 fe91 	bl	8014760 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013a3e:	f000 f881 	bl	8013b44 <xTaskResumeAll>
 8013a42:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d107      	bne.n	8013a5a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8013a4a:	4b07      	ldr	r3, [pc, #28]	; (8013a68 <vTaskDelay+0x64>)
 8013a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a50:	601a      	str	r2, [r3, #0]
 8013a52:	f3bf 8f4f 	dsb	sy
 8013a56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013a5a:	bf00      	nop
 8013a5c:	3710      	adds	r7, #16
 8013a5e:	46bd      	mov	sp, r7
 8013a60:	bd80      	pop	{r7, pc}
 8013a62:	bf00      	nop
 8013a64:	20001134 	.word	0x20001134
 8013a68:	e000ed04 	.word	0xe000ed04

08013a6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b08a      	sub	sp, #40	; 0x28
 8013a70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013a72:	2300      	movs	r3, #0
 8013a74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013a76:	2300      	movs	r3, #0
 8013a78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013a7a:	463a      	mov	r2, r7
 8013a7c:	1d39      	adds	r1, r7, #4
 8013a7e:	f107 0308 	add.w	r3, r7, #8
 8013a82:	4618      	mov	r0, r3
 8013a84:	f7ee f8ba 	bl	8001bfc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013a88:	6839      	ldr	r1, [r7, #0]
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	68ba      	ldr	r2, [r7, #8]
 8013a8e:	9202      	str	r2, [sp, #8]
 8013a90:	9301      	str	r3, [sp, #4]
 8013a92:	2300      	movs	r3, #0
 8013a94:	9300      	str	r3, [sp, #0]
 8013a96:	2300      	movs	r3, #0
 8013a98:	460a      	mov	r2, r1
 8013a9a:	491d      	ldr	r1, [pc, #116]	; (8013b10 <vTaskStartScheduler+0xa4>)
 8013a9c:	481d      	ldr	r0, [pc, #116]	; (8013b14 <vTaskStartScheduler+0xa8>)
 8013a9e:	f7ff fe22 	bl	80136e6 <xTaskCreateStatic>
 8013aa2:	4602      	mov	r2, r0
 8013aa4:	4b1c      	ldr	r3, [pc, #112]	; (8013b18 <vTaskStartScheduler+0xac>)
 8013aa6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013aa8:	4b1b      	ldr	r3, [pc, #108]	; (8013b18 <vTaskStartScheduler+0xac>)
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d002      	beq.n	8013ab6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013ab0:	2301      	movs	r3, #1
 8013ab2:	617b      	str	r3, [r7, #20]
 8013ab4:	e001      	b.n	8013aba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013aba:	697b      	ldr	r3, [r7, #20]
 8013abc:	2b01      	cmp	r3, #1
 8013abe:	d115      	bne.n	8013aec <vTaskStartScheduler+0x80>
 8013ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ac4:	f383 8811 	msr	BASEPRI, r3
 8013ac8:	f3bf 8f6f 	isb	sy
 8013acc:	f3bf 8f4f 	dsb	sy
 8013ad0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013ad2:	4b12      	ldr	r3, [pc, #72]	; (8013b1c <vTaskStartScheduler+0xb0>)
 8013ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8013ad8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013ada:	4b11      	ldr	r3, [pc, #68]	; (8013b20 <vTaskStartScheduler+0xb4>)
 8013adc:	2201      	movs	r2, #1
 8013ade:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013ae0:	4b10      	ldr	r3, [pc, #64]	; (8013b24 <vTaskStartScheduler+0xb8>)
 8013ae2:	2200      	movs	r2, #0
 8013ae4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013ae6:	f000 ff2b 	bl	8014940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013aea:	e00d      	b.n	8013b08 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013aec:	697b      	ldr	r3, [r7, #20]
 8013aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013af2:	d109      	bne.n	8013b08 <vTaskStartScheduler+0x9c>
 8013af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013af8:	f383 8811 	msr	BASEPRI, r3
 8013afc:	f3bf 8f6f 	isb	sy
 8013b00:	f3bf 8f4f 	dsb	sy
 8013b04:	60fb      	str	r3, [r7, #12]
 8013b06:	e7fe      	b.n	8013b06 <vTaskStartScheduler+0x9a>
}
 8013b08:	bf00      	nop
 8013b0a:	3718      	adds	r7, #24
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	bd80      	pop	{r7, pc}
 8013b10:	0801b234 	.word	0x0801b234
 8013b14:	080140b1 	.word	0x080140b1
 8013b18:	20001130 	.word	0x20001130
 8013b1c:	2000112c 	.word	0x2000112c
 8013b20:	20001118 	.word	0x20001118
 8013b24:	20001110 	.word	0x20001110

08013b28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013b28:	b480      	push	{r7}
 8013b2a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013b2c:	4b04      	ldr	r3, [pc, #16]	; (8013b40 <vTaskSuspendAll+0x18>)
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	3301      	adds	r3, #1
 8013b32:	4a03      	ldr	r2, [pc, #12]	; (8013b40 <vTaskSuspendAll+0x18>)
 8013b34:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013b36:	bf00      	nop
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b3e:	4770      	bx	lr
 8013b40:	20001134 	.word	0x20001134

08013b44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013b44:	b580      	push	{r7, lr}
 8013b46:	b084      	sub	sp, #16
 8013b48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013b4a:	2300      	movs	r3, #0
 8013b4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013b4e:	2300      	movs	r3, #0
 8013b50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013b52:	4b41      	ldr	r3, [pc, #260]	; (8013c58 <xTaskResumeAll+0x114>)
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d109      	bne.n	8013b6e <xTaskResumeAll+0x2a>
 8013b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b5e:	f383 8811 	msr	BASEPRI, r3
 8013b62:	f3bf 8f6f 	isb	sy
 8013b66:	f3bf 8f4f 	dsb	sy
 8013b6a:	603b      	str	r3, [r7, #0]
 8013b6c:	e7fe      	b.n	8013b6c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013b6e:	f000 ff85 	bl	8014a7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013b72:	4b39      	ldr	r3, [pc, #228]	; (8013c58 <xTaskResumeAll+0x114>)
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	3b01      	subs	r3, #1
 8013b78:	4a37      	ldr	r2, [pc, #220]	; (8013c58 <xTaskResumeAll+0x114>)
 8013b7a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013b7c:	4b36      	ldr	r3, [pc, #216]	; (8013c58 <xTaskResumeAll+0x114>)
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d161      	bne.n	8013c48 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013b84:	4b35      	ldr	r3, [pc, #212]	; (8013c5c <xTaskResumeAll+0x118>)
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d05d      	beq.n	8013c48 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013b8c:	e02e      	b.n	8013bec <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013b8e:	4b34      	ldr	r3, [pc, #208]	; (8013c60 <xTaskResumeAll+0x11c>)
 8013b90:	68db      	ldr	r3, [r3, #12]
 8013b92:	68db      	ldr	r3, [r3, #12]
 8013b94:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	3318      	adds	r3, #24
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	f7fe fffb 	bl	8012b96 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	3304      	adds	r3, #4
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	f7fe fff6 	bl	8012b96 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bae:	2201      	movs	r2, #1
 8013bb0:	409a      	lsls	r2, r3
 8013bb2:	4b2c      	ldr	r3, [pc, #176]	; (8013c64 <xTaskResumeAll+0x120>)
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	4313      	orrs	r3, r2
 8013bb8:	4a2a      	ldr	r2, [pc, #168]	; (8013c64 <xTaskResumeAll+0x120>)
 8013bba:	6013      	str	r3, [r2, #0]
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bc0:	4613      	mov	r3, r2
 8013bc2:	009b      	lsls	r3, r3, #2
 8013bc4:	4413      	add	r3, r2
 8013bc6:	009b      	lsls	r3, r3, #2
 8013bc8:	4a27      	ldr	r2, [pc, #156]	; (8013c68 <xTaskResumeAll+0x124>)
 8013bca:	441a      	add	r2, r3
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	3304      	adds	r3, #4
 8013bd0:	4619      	mov	r1, r3
 8013bd2:	4610      	mov	r0, r2
 8013bd4:	f7fe ff82 	bl	8012adc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bdc:	4b23      	ldr	r3, [pc, #140]	; (8013c6c <xTaskResumeAll+0x128>)
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013be2:	429a      	cmp	r2, r3
 8013be4:	d302      	bcc.n	8013bec <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8013be6:	4b22      	ldr	r3, [pc, #136]	; (8013c70 <xTaskResumeAll+0x12c>)
 8013be8:	2201      	movs	r2, #1
 8013bea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013bec:	4b1c      	ldr	r3, [pc, #112]	; (8013c60 <xTaskResumeAll+0x11c>)
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d1cc      	bne.n	8013b8e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d001      	beq.n	8013bfe <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013bfa:	f000 fb0b 	bl	8014214 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013bfe:	4b1d      	ldr	r3, [pc, #116]	; (8013c74 <xTaskResumeAll+0x130>)
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d010      	beq.n	8013c2c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013c0a:	f000 f837 	bl	8013c7c <xTaskIncrementTick>
 8013c0e:	4603      	mov	r3, r0
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d002      	beq.n	8013c1a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8013c14:	4b16      	ldr	r3, [pc, #88]	; (8013c70 <xTaskResumeAll+0x12c>)
 8013c16:	2201      	movs	r2, #1
 8013c18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	3b01      	subs	r3, #1
 8013c1e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d1f1      	bne.n	8013c0a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8013c26:	4b13      	ldr	r3, [pc, #76]	; (8013c74 <xTaskResumeAll+0x130>)
 8013c28:	2200      	movs	r2, #0
 8013c2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013c2c:	4b10      	ldr	r3, [pc, #64]	; (8013c70 <xTaskResumeAll+0x12c>)
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d009      	beq.n	8013c48 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013c34:	2301      	movs	r3, #1
 8013c36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013c38:	4b0f      	ldr	r3, [pc, #60]	; (8013c78 <xTaskResumeAll+0x134>)
 8013c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c3e:	601a      	str	r2, [r3, #0]
 8013c40:	f3bf 8f4f 	dsb	sy
 8013c44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013c48:	f000 ff46 	bl	8014ad8 <vPortExitCritical>

	return xAlreadyYielded;
 8013c4c:	68bb      	ldr	r3, [r7, #8]
}
 8013c4e:	4618      	mov	r0, r3
 8013c50:	3710      	adds	r7, #16
 8013c52:	46bd      	mov	sp, r7
 8013c54:	bd80      	pop	{r7, pc}
 8013c56:	bf00      	nop
 8013c58:	20001134 	.word	0x20001134
 8013c5c:	2000110c 	.word	0x2000110c
 8013c60:	200010cc 	.word	0x200010cc
 8013c64:	20001114 	.word	0x20001114
 8013c68:	20001010 	.word	0x20001010
 8013c6c:	2000100c 	.word	0x2000100c
 8013c70:	20001120 	.word	0x20001120
 8013c74:	2000111c 	.word	0x2000111c
 8013c78:	e000ed04 	.word	0xe000ed04

08013c7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b086      	sub	sp, #24
 8013c80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013c82:	2300      	movs	r3, #0
 8013c84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013c86:	4b4e      	ldr	r3, [pc, #312]	; (8013dc0 <xTaskIncrementTick+0x144>)
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	f040 8087 	bne.w	8013d9e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013c90:	4b4c      	ldr	r3, [pc, #304]	; (8013dc4 <xTaskIncrementTick+0x148>)
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	3301      	adds	r3, #1
 8013c96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013c98:	4a4a      	ldr	r2, [pc, #296]	; (8013dc4 <xTaskIncrementTick+0x148>)
 8013c9a:	693b      	ldr	r3, [r7, #16]
 8013c9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013c9e:	693b      	ldr	r3, [r7, #16]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d11f      	bne.n	8013ce4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8013ca4:	4b48      	ldr	r3, [pc, #288]	; (8013dc8 <xTaskIncrementTick+0x14c>)
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d009      	beq.n	8013cc2 <xTaskIncrementTick+0x46>
 8013cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cb2:	f383 8811 	msr	BASEPRI, r3
 8013cb6:	f3bf 8f6f 	isb	sy
 8013cba:	f3bf 8f4f 	dsb	sy
 8013cbe:	603b      	str	r3, [r7, #0]
 8013cc0:	e7fe      	b.n	8013cc0 <xTaskIncrementTick+0x44>
 8013cc2:	4b41      	ldr	r3, [pc, #260]	; (8013dc8 <xTaskIncrementTick+0x14c>)
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	60fb      	str	r3, [r7, #12]
 8013cc8:	4b40      	ldr	r3, [pc, #256]	; (8013dcc <xTaskIncrementTick+0x150>)
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	4a3e      	ldr	r2, [pc, #248]	; (8013dc8 <xTaskIncrementTick+0x14c>)
 8013cce:	6013      	str	r3, [r2, #0]
 8013cd0:	4a3e      	ldr	r2, [pc, #248]	; (8013dcc <xTaskIncrementTick+0x150>)
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	6013      	str	r3, [r2, #0]
 8013cd6:	4b3e      	ldr	r3, [pc, #248]	; (8013dd0 <xTaskIncrementTick+0x154>)
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	3301      	adds	r3, #1
 8013cdc:	4a3c      	ldr	r2, [pc, #240]	; (8013dd0 <xTaskIncrementTick+0x154>)
 8013cde:	6013      	str	r3, [r2, #0]
 8013ce0:	f000 fa98 	bl	8014214 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013ce4:	4b3b      	ldr	r3, [pc, #236]	; (8013dd4 <xTaskIncrementTick+0x158>)
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	693a      	ldr	r2, [r7, #16]
 8013cea:	429a      	cmp	r2, r3
 8013cec:	d348      	bcc.n	8013d80 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013cee:	4b36      	ldr	r3, [pc, #216]	; (8013dc8 <xTaskIncrementTick+0x14c>)
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d104      	bne.n	8013d02 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013cf8:	4b36      	ldr	r3, [pc, #216]	; (8013dd4 <xTaskIncrementTick+0x158>)
 8013cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8013cfe:	601a      	str	r2, [r3, #0]
					break;
 8013d00:	e03e      	b.n	8013d80 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d02:	4b31      	ldr	r3, [pc, #196]	; (8013dc8 <xTaskIncrementTick+0x14c>)
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	68db      	ldr	r3, [r3, #12]
 8013d08:	68db      	ldr	r3, [r3, #12]
 8013d0a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013d0c:	68bb      	ldr	r3, [r7, #8]
 8013d0e:	685b      	ldr	r3, [r3, #4]
 8013d10:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013d12:	693a      	ldr	r2, [r7, #16]
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	429a      	cmp	r2, r3
 8013d18:	d203      	bcs.n	8013d22 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013d1a:	4a2e      	ldr	r2, [pc, #184]	; (8013dd4 <xTaskIncrementTick+0x158>)
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013d20:	e02e      	b.n	8013d80 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013d22:	68bb      	ldr	r3, [r7, #8]
 8013d24:	3304      	adds	r3, #4
 8013d26:	4618      	mov	r0, r3
 8013d28:	f7fe ff35 	bl	8012b96 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013d2c:	68bb      	ldr	r3, [r7, #8]
 8013d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d004      	beq.n	8013d3e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013d34:	68bb      	ldr	r3, [r7, #8]
 8013d36:	3318      	adds	r3, #24
 8013d38:	4618      	mov	r0, r3
 8013d3a:	f7fe ff2c 	bl	8012b96 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013d3e:	68bb      	ldr	r3, [r7, #8]
 8013d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d42:	2201      	movs	r2, #1
 8013d44:	409a      	lsls	r2, r3
 8013d46:	4b24      	ldr	r3, [pc, #144]	; (8013dd8 <xTaskIncrementTick+0x15c>)
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	4313      	orrs	r3, r2
 8013d4c:	4a22      	ldr	r2, [pc, #136]	; (8013dd8 <xTaskIncrementTick+0x15c>)
 8013d4e:	6013      	str	r3, [r2, #0]
 8013d50:	68bb      	ldr	r3, [r7, #8]
 8013d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d54:	4613      	mov	r3, r2
 8013d56:	009b      	lsls	r3, r3, #2
 8013d58:	4413      	add	r3, r2
 8013d5a:	009b      	lsls	r3, r3, #2
 8013d5c:	4a1f      	ldr	r2, [pc, #124]	; (8013ddc <xTaskIncrementTick+0x160>)
 8013d5e:	441a      	add	r2, r3
 8013d60:	68bb      	ldr	r3, [r7, #8]
 8013d62:	3304      	adds	r3, #4
 8013d64:	4619      	mov	r1, r3
 8013d66:	4610      	mov	r0, r2
 8013d68:	f7fe feb8 	bl	8012adc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013d6c:	68bb      	ldr	r3, [r7, #8]
 8013d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d70:	4b1b      	ldr	r3, [pc, #108]	; (8013de0 <xTaskIncrementTick+0x164>)
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d76:	429a      	cmp	r2, r3
 8013d78:	d3b9      	bcc.n	8013cee <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8013d7a:	2301      	movs	r3, #1
 8013d7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013d7e:	e7b6      	b.n	8013cee <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013d80:	4b17      	ldr	r3, [pc, #92]	; (8013de0 <xTaskIncrementTick+0x164>)
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d86:	4915      	ldr	r1, [pc, #84]	; (8013ddc <xTaskIncrementTick+0x160>)
 8013d88:	4613      	mov	r3, r2
 8013d8a:	009b      	lsls	r3, r3, #2
 8013d8c:	4413      	add	r3, r2
 8013d8e:	009b      	lsls	r3, r3, #2
 8013d90:	440b      	add	r3, r1
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	2b01      	cmp	r3, #1
 8013d96:	d907      	bls.n	8013da8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8013d98:	2301      	movs	r3, #1
 8013d9a:	617b      	str	r3, [r7, #20]
 8013d9c:	e004      	b.n	8013da8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013d9e:	4b11      	ldr	r3, [pc, #68]	; (8013de4 <xTaskIncrementTick+0x168>)
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	3301      	adds	r3, #1
 8013da4:	4a0f      	ldr	r2, [pc, #60]	; (8013de4 <xTaskIncrementTick+0x168>)
 8013da6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013da8:	4b0f      	ldr	r3, [pc, #60]	; (8013de8 <xTaskIncrementTick+0x16c>)
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d001      	beq.n	8013db4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8013db0:	2301      	movs	r3, #1
 8013db2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013db4:	697b      	ldr	r3, [r7, #20]
}
 8013db6:	4618      	mov	r0, r3
 8013db8:	3718      	adds	r7, #24
 8013dba:	46bd      	mov	sp, r7
 8013dbc:	bd80      	pop	{r7, pc}
 8013dbe:	bf00      	nop
 8013dc0:	20001134 	.word	0x20001134
 8013dc4:	20001110 	.word	0x20001110
 8013dc8:	200010c4 	.word	0x200010c4
 8013dcc:	200010c8 	.word	0x200010c8
 8013dd0:	20001124 	.word	0x20001124
 8013dd4:	2000112c 	.word	0x2000112c
 8013dd8:	20001114 	.word	0x20001114
 8013ddc:	20001010 	.word	0x20001010
 8013de0:	2000100c 	.word	0x2000100c
 8013de4:	2000111c 	.word	0x2000111c
 8013de8:	20001120 	.word	0x20001120

08013dec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013dec:	b480      	push	{r7}
 8013dee:	b087      	sub	sp, #28
 8013df0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013df2:	4b26      	ldr	r3, [pc, #152]	; (8013e8c <vTaskSwitchContext+0xa0>)
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d003      	beq.n	8013e02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013dfa:	4b25      	ldr	r3, [pc, #148]	; (8013e90 <vTaskSwitchContext+0xa4>)
 8013dfc:	2201      	movs	r2, #1
 8013dfe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013e00:	e03e      	b.n	8013e80 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8013e02:	4b23      	ldr	r3, [pc, #140]	; (8013e90 <vTaskSwitchContext+0xa4>)
 8013e04:	2200      	movs	r2, #0
 8013e06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e08:	4b22      	ldr	r3, [pc, #136]	; (8013e94 <vTaskSwitchContext+0xa8>)
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	fab3 f383 	clz	r3, r3
 8013e14:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013e16:	7afb      	ldrb	r3, [r7, #11]
 8013e18:	f1c3 031f 	rsb	r3, r3, #31
 8013e1c:	617b      	str	r3, [r7, #20]
 8013e1e:	491e      	ldr	r1, [pc, #120]	; (8013e98 <vTaskSwitchContext+0xac>)
 8013e20:	697a      	ldr	r2, [r7, #20]
 8013e22:	4613      	mov	r3, r2
 8013e24:	009b      	lsls	r3, r3, #2
 8013e26:	4413      	add	r3, r2
 8013e28:	009b      	lsls	r3, r3, #2
 8013e2a:	440b      	add	r3, r1
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d109      	bne.n	8013e46 <vTaskSwitchContext+0x5a>
	__asm volatile
 8013e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e36:	f383 8811 	msr	BASEPRI, r3
 8013e3a:	f3bf 8f6f 	isb	sy
 8013e3e:	f3bf 8f4f 	dsb	sy
 8013e42:	607b      	str	r3, [r7, #4]
 8013e44:	e7fe      	b.n	8013e44 <vTaskSwitchContext+0x58>
 8013e46:	697a      	ldr	r2, [r7, #20]
 8013e48:	4613      	mov	r3, r2
 8013e4a:	009b      	lsls	r3, r3, #2
 8013e4c:	4413      	add	r3, r2
 8013e4e:	009b      	lsls	r3, r3, #2
 8013e50:	4a11      	ldr	r2, [pc, #68]	; (8013e98 <vTaskSwitchContext+0xac>)
 8013e52:	4413      	add	r3, r2
 8013e54:	613b      	str	r3, [r7, #16]
 8013e56:	693b      	ldr	r3, [r7, #16]
 8013e58:	685b      	ldr	r3, [r3, #4]
 8013e5a:	685a      	ldr	r2, [r3, #4]
 8013e5c:	693b      	ldr	r3, [r7, #16]
 8013e5e:	605a      	str	r2, [r3, #4]
 8013e60:	693b      	ldr	r3, [r7, #16]
 8013e62:	685a      	ldr	r2, [r3, #4]
 8013e64:	693b      	ldr	r3, [r7, #16]
 8013e66:	3308      	adds	r3, #8
 8013e68:	429a      	cmp	r2, r3
 8013e6a:	d104      	bne.n	8013e76 <vTaskSwitchContext+0x8a>
 8013e6c:	693b      	ldr	r3, [r7, #16]
 8013e6e:	685b      	ldr	r3, [r3, #4]
 8013e70:	685a      	ldr	r2, [r3, #4]
 8013e72:	693b      	ldr	r3, [r7, #16]
 8013e74:	605a      	str	r2, [r3, #4]
 8013e76:	693b      	ldr	r3, [r7, #16]
 8013e78:	685b      	ldr	r3, [r3, #4]
 8013e7a:	68db      	ldr	r3, [r3, #12]
 8013e7c:	4a07      	ldr	r2, [pc, #28]	; (8013e9c <vTaskSwitchContext+0xb0>)
 8013e7e:	6013      	str	r3, [r2, #0]
}
 8013e80:	bf00      	nop
 8013e82:	371c      	adds	r7, #28
 8013e84:	46bd      	mov	sp, r7
 8013e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e8a:	4770      	bx	lr
 8013e8c:	20001134 	.word	0x20001134
 8013e90:	20001120 	.word	0x20001120
 8013e94:	20001114 	.word	0x20001114
 8013e98:	20001010 	.word	0x20001010
 8013e9c:	2000100c 	.word	0x2000100c

08013ea0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b084      	sub	sp, #16
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	6078      	str	r0, [r7, #4]
 8013ea8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d109      	bne.n	8013ec4 <vTaskPlaceOnEventList+0x24>
 8013eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eb4:	f383 8811 	msr	BASEPRI, r3
 8013eb8:	f3bf 8f6f 	isb	sy
 8013ebc:	f3bf 8f4f 	dsb	sy
 8013ec0:	60fb      	str	r3, [r7, #12]
 8013ec2:	e7fe      	b.n	8013ec2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013ec4:	4b07      	ldr	r3, [pc, #28]	; (8013ee4 <vTaskPlaceOnEventList+0x44>)
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	3318      	adds	r3, #24
 8013eca:	4619      	mov	r1, r3
 8013ecc:	6878      	ldr	r0, [r7, #4]
 8013ece:	f7fe fe29 	bl	8012b24 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013ed2:	2101      	movs	r1, #1
 8013ed4:	6838      	ldr	r0, [r7, #0]
 8013ed6:	f000 fc43 	bl	8014760 <prvAddCurrentTaskToDelayedList>
}
 8013eda:	bf00      	nop
 8013edc:	3710      	adds	r7, #16
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	bd80      	pop	{r7, pc}
 8013ee2:	bf00      	nop
 8013ee4:	2000100c 	.word	0x2000100c

08013ee8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b086      	sub	sp, #24
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	68db      	ldr	r3, [r3, #12]
 8013ef4:	68db      	ldr	r3, [r3, #12]
 8013ef6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013ef8:	693b      	ldr	r3, [r7, #16]
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d109      	bne.n	8013f12 <xTaskRemoveFromEventList+0x2a>
 8013efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f02:	f383 8811 	msr	BASEPRI, r3
 8013f06:	f3bf 8f6f 	isb	sy
 8013f0a:	f3bf 8f4f 	dsb	sy
 8013f0e:	60fb      	str	r3, [r7, #12]
 8013f10:	e7fe      	b.n	8013f10 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013f12:	693b      	ldr	r3, [r7, #16]
 8013f14:	3318      	adds	r3, #24
 8013f16:	4618      	mov	r0, r3
 8013f18:	f7fe fe3d 	bl	8012b96 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013f1c:	4b1d      	ldr	r3, [pc, #116]	; (8013f94 <xTaskRemoveFromEventList+0xac>)
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d11c      	bne.n	8013f5e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013f24:	693b      	ldr	r3, [r7, #16]
 8013f26:	3304      	adds	r3, #4
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f7fe fe34 	bl	8012b96 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013f2e:	693b      	ldr	r3, [r7, #16]
 8013f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f32:	2201      	movs	r2, #1
 8013f34:	409a      	lsls	r2, r3
 8013f36:	4b18      	ldr	r3, [pc, #96]	; (8013f98 <xTaskRemoveFromEventList+0xb0>)
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	4313      	orrs	r3, r2
 8013f3c:	4a16      	ldr	r2, [pc, #88]	; (8013f98 <xTaskRemoveFromEventList+0xb0>)
 8013f3e:	6013      	str	r3, [r2, #0]
 8013f40:	693b      	ldr	r3, [r7, #16]
 8013f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f44:	4613      	mov	r3, r2
 8013f46:	009b      	lsls	r3, r3, #2
 8013f48:	4413      	add	r3, r2
 8013f4a:	009b      	lsls	r3, r3, #2
 8013f4c:	4a13      	ldr	r2, [pc, #76]	; (8013f9c <xTaskRemoveFromEventList+0xb4>)
 8013f4e:	441a      	add	r2, r3
 8013f50:	693b      	ldr	r3, [r7, #16]
 8013f52:	3304      	adds	r3, #4
 8013f54:	4619      	mov	r1, r3
 8013f56:	4610      	mov	r0, r2
 8013f58:	f7fe fdc0 	bl	8012adc <vListInsertEnd>
 8013f5c:	e005      	b.n	8013f6a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013f5e:	693b      	ldr	r3, [r7, #16]
 8013f60:	3318      	adds	r3, #24
 8013f62:	4619      	mov	r1, r3
 8013f64:	480e      	ldr	r0, [pc, #56]	; (8013fa0 <xTaskRemoveFromEventList+0xb8>)
 8013f66:	f7fe fdb9 	bl	8012adc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013f6a:	693b      	ldr	r3, [r7, #16]
 8013f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f6e:	4b0d      	ldr	r3, [pc, #52]	; (8013fa4 <xTaskRemoveFromEventList+0xbc>)
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f74:	429a      	cmp	r2, r3
 8013f76:	d905      	bls.n	8013f84 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013f78:	2301      	movs	r3, #1
 8013f7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013f7c:	4b0a      	ldr	r3, [pc, #40]	; (8013fa8 <xTaskRemoveFromEventList+0xc0>)
 8013f7e:	2201      	movs	r2, #1
 8013f80:	601a      	str	r2, [r3, #0]
 8013f82:	e001      	b.n	8013f88 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8013f84:	2300      	movs	r3, #0
 8013f86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013f88:	697b      	ldr	r3, [r7, #20]
}
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	3718      	adds	r7, #24
 8013f8e:	46bd      	mov	sp, r7
 8013f90:	bd80      	pop	{r7, pc}
 8013f92:	bf00      	nop
 8013f94:	20001134 	.word	0x20001134
 8013f98:	20001114 	.word	0x20001114
 8013f9c:	20001010 	.word	0x20001010
 8013fa0:	200010cc 	.word	0x200010cc
 8013fa4:	2000100c 	.word	0x2000100c
 8013fa8:	20001120 	.word	0x20001120

08013fac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013fac:	b480      	push	{r7}
 8013fae:	b083      	sub	sp, #12
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013fb4:	4b06      	ldr	r3, [pc, #24]	; (8013fd0 <vTaskInternalSetTimeOutState+0x24>)
 8013fb6:	681a      	ldr	r2, [r3, #0]
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013fbc:	4b05      	ldr	r3, [pc, #20]	; (8013fd4 <vTaskInternalSetTimeOutState+0x28>)
 8013fbe:	681a      	ldr	r2, [r3, #0]
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	605a      	str	r2, [r3, #4]
}
 8013fc4:	bf00      	nop
 8013fc6:	370c      	adds	r7, #12
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fce:	4770      	bx	lr
 8013fd0:	20001124 	.word	0x20001124
 8013fd4:	20001110 	.word	0x20001110

08013fd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013fd8:	b580      	push	{r7, lr}
 8013fda:	b088      	sub	sp, #32
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	6078      	str	r0, [r7, #4]
 8013fe0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d109      	bne.n	8013ffc <xTaskCheckForTimeOut+0x24>
 8013fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fec:	f383 8811 	msr	BASEPRI, r3
 8013ff0:	f3bf 8f6f 	isb	sy
 8013ff4:	f3bf 8f4f 	dsb	sy
 8013ff8:	613b      	str	r3, [r7, #16]
 8013ffa:	e7fe      	b.n	8013ffa <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8013ffc:	683b      	ldr	r3, [r7, #0]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d109      	bne.n	8014016 <xTaskCheckForTimeOut+0x3e>
 8014002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014006:	f383 8811 	msr	BASEPRI, r3
 801400a:	f3bf 8f6f 	isb	sy
 801400e:	f3bf 8f4f 	dsb	sy
 8014012:	60fb      	str	r3, [r7, #12]
 8014014:	e7fe      	b.n	8014014 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8014016:	f000 fd31 	bl	8014a7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801401a:	4b1d      	ldr	r3, [pc, #116]	; (8014090 <xTaskCheckForTimeOut+0xb8>)
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	685b      	ldr	r3, [r3, #4]
 8014024:	69ba      	ldr	r2, [r7, #24]
 8014026:	1ad3      	subs	r3, r2, r3
 8014028:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801402a:	683b      	ldr	r3, [r7, #0]
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014032:	d102      	bne.n	801403a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014034:	2300      	movs	r3, #0
 8014036:	61fb      	str	r3, [r7, #28]
 8014038:	e023      	b.n	8014082 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	681a      	ldr	r2, [r3, #0]
 801403e:	4b15      	ldr	r3, [pc, #84]	; (8014094 <xTaskCheckForTimeOut+0xbc>)
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	429a      	cmp	r2, r3
 8014044:	d007      	beq.n	8014056 <xTaskCheckForTimeOut+0x7e>
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	685b      	ldr	r3, [r3, #4]
 801404a:	69ba      	ldr	r2, [r7, #24]
 801404c:	429a      	cmp	r2, r3
 801404e:	d302      	bcc.n	8014056 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014050:	2301      	movs	r3, #1
 8014052:	61fb      	str	r3, [r7, #28]
 8014054:	e015      	b.n	8014082 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014056:	683b      	ldr	r3, [r7, #0]
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	697a      	ldr	r2, [r7, #20]
 801405c:	429a      	cmp	r2, r3
 801405e:	d20b      	bcs.n	8014078 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014060:	683b      	ldr	r3, [r7, #0]
 8014062:	681a      	ldr	r2, [r3, #0]
 8014064:	697b      	ldr	r3, [r7, #20]
 8014066:	1ad2      	subs	r2, r2, r3
 8014068:	683b      	ldr	r3, [r7, #0]
 801406a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801406c:	6878      	ldr	r0, [r7, #4]
 801406e:	f7ff ff9d 	bl	8013fac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014072:	2300      	movs	r3, #0
 8014074:	61fb      	str	r3, [r7, #28]
 8014076:	e004      	b.n	8014082 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8014078:	683b      	ldr	r3, [r7, #0]
 801407a:	2200      	movs	r2, #0
 801407c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801407e:	2301      	movs	r3, #1
 8014080:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014082:	f000 fd29 	bl	8014ad8 <vPortExitCritical>

	return xReturn;
 8014086:	69fb      	ldr	r3, [r7, #28]
}
 8014088:	4618      	mov	r0, r3
 801408a:	3720      	adds	r7, #32
 801408c:	46bd      	mov	sp, r7
 801408e:	bd80      	pop	{r7, pc}
 8014090:	20001110 	.word	0x20001110
 8014094:	20001124 	.word	0x20001124

08014098 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014098:	b480      	push	{r7}
 801409a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801409c:	4b03      	ldr	r3, [pc, #12]	; (80140ac <vTaskMissedYield+0x14>)
 801409e:	2201      	movs	r2, #1
 80140a0:	601a      	str	r2, [r3, #0]
}
 80140a2:	bf00      	nop
 80140a4:	46bd      	mov	sp, r7
 80140a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140aa:	4770      	bx	lr
 80140ac:	20001120 	.word	0x20001120

080140b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b082      	sub	sp, #8
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80140b8:	f000 f852 	bl	8014160 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80140bc:	4b06      	ldr	r3, [pc, #24]	; (80140d8 <prvIdleTask+0x28>)
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	2b01      	cmp	r3, #1
 80140c2:	d9f9      	bls.n	80140b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80140c4:	4b05      	ldr	r3, [pc, #20]	; (80140dc <prvIdleTask+0x2c>)
 80140c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80140ca:	601a      	str	r2, [r3, #0]
 80140cc:	f3bf 8f4f 	dsb	sy
 80140d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80140d4:	e7f0      	b.n	80140b8 <prvIdleTask+0x8>
 80140d6:	bf00      	nop
 80140d8:	20001010 	.word	0x20001010
 80140dc:	e000ed04 	.word	0xe000ed04

080140e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80140e0:	b580      	push	{r7, lr}
 80140e2:	b082      	sub	sp, #8
 80140e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80140e6:	2300      	movs	r3, #0
 80140e8:	607b      	str	r3, [r7, #4]
 80140ea:	e00c      	b.n	8014106 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80140ec:	687a      	ldr	r2, [r7, #4]
 80140ee:	4613      	mov	r3, r2
 80140f0:	009b      	lsls	r3, r3, #2
 80140f2:	4413      	add	r3, r2
 80140f4:	009b      	lsls	r3, r3, #2
 80140f6:	4a12      	ldr	r2, [pc, #72]	; (8014140 <prvInitialiseTaskLists+0x60>)
 80140f8:	4413      	add	r3, r2
 80140fa:	4618      	mov	r0, r3
 80140fc:	f7fe fcc1 	bl	8012a82 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	3301      	adds	r3, #1
 8014104:	607b      	str	r3, [r7, #4]
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	2b06      	cmp	r3, #6
 801410a:	d9ef      	bls.n	80140ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801410c:	480d      	ldr	r0, [pc, #52]	; (8014144 <prvInitialiseTaskLists+0x64>)
 801410e:	f7fe fcb8 	bl	8012a82 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014112:	480d      	ldr	r0, [pc, #52]	; (8014148 <prvInitialiseTaskLists+0x68>)
 8014114:	f7fe fcb5 	bl	8012a82 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014118:	480c      	ldr	r0, [pc, #48]	; (801414c <prvInitialiseTaskLists+0x6c>)
 801411a:	f7fe fcb2 	bl	8012a82 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801411e:	480c      	ldr	r0, [pc, #48]	; (8014150 <prvInitialiseTaskLists+0x70>)
 8014120:	f7fe fcaf 	bl	8012a82 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014124:	480b      	ldr	r0, [pc, #44]	; (8014154 <prvInitialiseTaskLists+0x74>)
 8014126:	f7fe fcac 	bl	8012a82 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801412a:	4b0b      	ldr	r3, [pc, #44]	; (8014158 <prvInitialiseTaskLists+0x78>)
 801412c:	4a05      	ldr	r2, [pc, #20]	; (8014144 <prvInitialiseTaskLists+0x64>)
 801412e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014130:	4b0a      	ldr	r3, [pc, #40]	; (801415c <prvInitialiseTaskLists+0x7c>)
 8014132:	4a05      	ldr	r2, [pc, #20]	; (8014148 <prvInitialiseTaskLists+0x68>)
 8014134:	601a      	str	r2, [r3, #0]
}
 8014136:	bf00      	nop
 8014138:	3708      	adds	r7, #8
 801413a:	46bd      	mov	sp, r7
 801413c:	bd80      	pop	{r7, pc}
 801413e:	bf00      	nop
 8014140:	20001010 	.word	0x20001010
 8014144:	2000109c 	.word	0x2000109c
 8014148:	200010b0 	.word	0x200010b0
 801414c:	200010cc 	.word	0x200010cc
 8014150:	200010e0 	.word	0x200010e0
 8014154:	200010f8 	.word	0x200010f8
 8014158:	200010c4 	.word	0x200010c4
 801415c:	200010c8 	.word	0x200010c8

08014160 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014160:	b580      	push	{r7, lr}
 8014162:	b082      	sub	sp, #8
 8014164:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014166:	e019      	b.n	801419c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014168:	f000 fc88 	bl	8014a7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801416c:	4b0f      	ldr	r3, [pc, #60]	; (80141ac <prvCheckTasksWaitingTermination+0x4c>)
 801416e:	68db      	ldr	r3, [r3, #12]
 8014170:	68db      	ldr	r3, [r3, #12]
 8014172:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	3304      	adds	r3, #4
 8014178:	4618      	mov	r0, r3
 801417a:	f7fe fd0c 	bl	8012b96 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801417e:	4b0c      	ldr	r3, [pc, #48]	; (80141b0 <prvCheckTasksWaitingTermination+0x50>)
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	3b01      	subs	r3, #1
 8014184:	4a0a      	ldr	r2, [pc, #40]	; (80141b0 <prvCheckTasksWaitingTermination+0x50>)
 8014186:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014188:	4b0a      	ldr	r3, [pc, #40]	; (80141b4 <prvCheckTasksWaitingTermination+0x54>)
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	3b01      	subs	r3, #1
 801418e:	4a09      	ldr	r2, [pc, #36]	; (80141b4 <prvCheckTasksWaitingTermination+0x54>)
 8014190:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014192:	f000 fca1 	bl	8014ad8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014196:	6878      	ldr	r0, [r7, #4]
 8014198:	f000 f80e 	bl	80141b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801419c:	4b05      	ldr	r3, [pc, #20]	; (80141b4 <prvCheckTasksWaitingTermination+0x54>)
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d1e1      	bne.n	8014168 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80141a4:	bf00      	nop
 80141a6:	3708      	adds	r7, #8
 80141a8:	46bd      	mov	sp, r7
 80141aa:	bd80      	pop	{r7, pc}
 80141ac:	200010e0 	.word	0x200010e0
 80141b0:	2000110c 	.word	0x2000110c
 80141b4:	200010f4 	.word	0x200010f4

080141b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b084      	sub	sp, #16
 80141bc:	af00      	add	r7, sp, #0
 80141be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d108      	bne.n	80141dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141ce:	4618      	mov	r0, r3
 80141d0:	f000 fe30 	bl	8014e34 <vPortFree>
				vPortFree( pxTCB );
 80141d4:	6878      	ldr	r0, [r7, #4]
 80141d6:	f000 fe2d 	bl	8014e34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80141da:	e017      	b.n	801420c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80141e2:	2b01      	cmp	r3, #1
 80141e4:	d103      	bne.n	80141ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80141e6:	6878      	ldr	r0, [r7, #4]
 80141e8:	f000 fe24 	bl	8014e34 <vPortFree>
	}
 80141ec:	e00e      	b.n	801420c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80141f4:	2b02      	cmp	r3, #2
 80141f6:	d009      	beq.n	801420c <prvDeleteTCB+0x54>
 80141f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141fc:	f383 8811 	msr	BASEPRI, r3
 8014200:	f3bf 8f6f 	isb	sy
 8014204:	f3bf 8f4f 	dsb	sy
 8014208:	60fb      	str	r3, [r7, #12]
 801420a:	e7fe      	b.n	801420a <prvDeleteTCB+0x52>
	}
 801420c:	bf00      	nop
 801420e:	3710      	adds	r7, #16
 8014210:	46bd      	mov	sp, r7
 8014212:	bd80      	pop	{r7, pc}

08014214 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014214:	b480      	push	{r7}
 8014216:	b083      	sub	sp, #12
 8014218:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801421a:	4b0c      	ldr	r3, [pc, #48]	; (801424c <prvResetNextTaskUnblockTime+0x38>)
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d104      	bne.n	801422e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014224:	4b0a      	ldr	r3, [pc, #40]	; (8014250 <prvResetNextTaskUnblockTime+0x3c>)
 8014226:	f04f 32ff 	mov.w	r2, #4294967295
 801422a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801422c:	e008      	b.n	8014240 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801422e:	4b07      	ldr	r3, [pc, #28]	; (801424c <prvResetNextTaskUnblockTime+0x38>)
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	68db      	ldr	r3, [r3, #12]
 8014234:	68db      	ldr	r3, [r3, #12]
 8014236:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	685b      	ldr	r3, [r3, #4]
 801423c:	4a04      	ldr	r2, [pc, #16]	; (8014250 <prvResetNextTaskUnblockTime+0x3c>)
 801423e:	6013      	str	r3, [r2, #0]
}
 8014240:	bf00      	nop
 8014242:	370c      	adds	r7, #12
 8014244:	46bd      	mov	sp, r7
 8014246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801424a:	4770      	bx	lr
 801424c:	200010c4 	.word	0x200010c4
 8014250:	2000112c 	.word	0x2000112c

08014254 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014254:	b480      	push	{r7}
 8014256:	b083      	sub	sp, #12
 8014258:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801425a:	4b0b      	ldr	r3, [pc, #44]	; (8014288 <xTaskGetSchedulerState+0x34>)
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d102      	bne.n	8014268 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014262:	2301      	movs	r3, #1
 8014264:	607b      	str	r3, [r7, #4]
 8014266:	e008      	b.n	801427a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014268:	4b08      	ldr	r3, [pc, #32]	; (801428c <xTaskGetSchedulerState+0x38>)
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d102      	bne.n	8014276 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014270:	2302      	movs	r3, #2
 8014272:	607b      	str	r3, [r7, #4]
 8014274:	e001      	b.n	801427a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014276:	2300      	movs	r3, #0
 8014278:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801427a:	687b      	ldr	r3, [r7, #4]
	}
 801427c:	4618      	mov	r0, r3
 801427e:	370c      	adds	r7, #12
 8014280:	46bd      	mov	sp, r7
 8014282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014286:	4770      	bx	lr
 8014288:	20001118 	.word	0x20001118
 801428c:	20001134 	.word	0x20001134

08014290 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014290:	b580      	push	{r7, lr}
 8014292:	b086      	sub	sp, #24
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801429c:	2300      	movs	r3, #0
 801429e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d06c      	beq.n	8014380 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80142a6:	4b39      	ldr	r3, [pc, #228]	; (801438c <xTaskPriorityDisinherit+0xfc>)
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	693a      	ldr	r2, [r7, #16]
 80142ac:	429a      	cmp	r2, r3
 80142ae:	d009      	beq.n	80142c4 <xTaskPriorityDisinherit+0x34>
 80142b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142b4:	f383 8811 	msr	BASEPRI, r3
 80142b8:	f3bf 8f6f 	isb	sy
 80142bc:	f3bf 8f4f 	dsb	sy
 80142c0:	60fb      	str	r3, [r7, #12]
 80142c2:	e7fe      	b.n	80142c2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80142c4:	693b      	ldr	r3, [r7, #16]
 80142c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d109      	bne.n	80142e0 <xTaskPriorityDisinherit+0x50>
 80142cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142d0:	f383 8811 	msr	BASEPRI, r3
 80142d4:	f3bf 8f6f 	isb	sy
 80142d8:	f3bf 8f4f 	dsb	sy
 80142dc:	60bb      	str	r3, [r7, #8]
 80142de:	e7fe      	b.n	80142de <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80142e0:	693b      	ldr	r3, [r7, #16]
 80142e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80142e4:	1e5a      	subs	r2, r3, #1
 80142e6:	693b      	ldr	r3, [r7, #16]
 80142e8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80142ea:	693b      	ldr	r3, [r7, #16]
 80142ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142ee:	693b      	ldr	r3, [r7, #16]
 80142f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142f2:	429a      	cmp	r2, r3
 80142f4:	d044      	beq.n	8014380 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80142f6:	693b      	ldr	r3, [r7, #16]
 80142f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d140      	bne.n	8014380 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80142fe:	693b      	ldr	r3, [r7, #16]
 8014300:	3304      	adds	r3, #4
 8014302:	4618      	mov	r0, r3
 8014304:	f7fe fc47 	bl	8012b96 <uxListRemove>
 8014308:	4603      	mov	r3, r0
 801430a:	2b00      	cmp	r3, #0
 801430c:	d115      	bne.n	801433a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801430e:	693b      	ldr	r3, [r7, #16]
 8014310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014312:	491f      	ldr	r1, [pc, #124]	; (8014390 <xTaskPriorityDisinherit+0x100>)
 8014314:	4613      	mov	r3, r2
 8014316:	009b      	lsls	r3, r3, #2
 8014318:	4413      	add	r3, r2
 801431a:	009b      	lsls	r3, r3, #2
 801431c:	440b      	add	r3, r1
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d10a      	bne.n	801433a <xTaskPriorityDisinherit+0xaa>
 8014324:	693b      	ldr	r3, [r7, #16]
 8014326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014328:	2201      	movs	r2, #1
 801432a:	fa02 f303 	lsl.w	r3, r2, r3
 801432e:	43da      	mvns	r2, r3
 8014330:	4b18      	ldr	r3, [pc, #96]	; (8014394 <xTaskPriorityDisinherit+0x104>)
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	4013      	ands	r3, r2
 8014336:	4a17      	ldr	r2, [pc, #92]	; (8014394 <xTaskPriorityDisinherit+0x104>)
 8014338:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801433a:	693b      	ldr	r3, [r7, #16]
 801433c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801433e:	693b      	ldr	r3, [r7, #16]
 8014340:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014342:	693b      	ldr	r3, [r7, #16]
 8014344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014346:	f1c3 0207 	rsb	r2, r3, #7
 801434a:	693b      	ldr	r3, [r7, #16]
 801434c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801434e:	693b      	ldr	r3, [r7, #16]
 8014350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014352:	2201      	movs	r2, #1
 8014354:	409a      	lsls	r2, r3
 8014356:	4b0f      	ldr	r3, [pc, #60]	; (8014394 <xTaskPriorityDisinherit+0x104>)
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	4313      	orrs	r3, r2
 801435c:	4a0d      	ldr	r2, [pc, #52]	; (8014394 <xTaskPriorityDisinherit+0x104>)
 801435e:	6013      	str	r3, [r2, #0]
 8014360:	693b      	ldr	r3, [r7, #16]
 8014362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014364:	4613      	mov	r3, r2
 8014366:	009b      	lsls	r3, r3, #2
 8014368:	4413      	add	r3, r2
 801436a:	009b      	lsls	r3, r3, #2
 801436c:	4a08      	ldr	r2, [pc, #32]	; (8014390 <xTaskPriorityDisinherit+0x100>)
 801436e:	441a      	add	r2, r3
 8014370:	693b      	ldr	r3, [r7, #16]
 8014372:	3304      	adds	r3, #4
 8014374:	4619      	mov	r1, r3
 8014376:	4610      	mov	r0, r2
 8014378:	f7fe fbb0 	bl	8012adc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801437c:	2301      	movs	r3, #1
 801437e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014380:	697b      	ldr	r3, [r7, #20]
	}
 8014382:	4618      	mov	r0, r3
 8014384:	3718      	adds	r7, #24
 8014386:	46bd      	mov	sp, r7
 8014388:	bd80      	pop	{r7, pc}
 801438a:	bf00      	nop
 801438c:	2000100c 	.word	0x2000100c
 8014390:	20001010 	.word	0x20001010
 8014394:	20001114 	.word	0x20001114

08014398 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8014398:	b580      	push	{r7, lr}
 801439a:	b086      	sub	sp, #24
 801439c:	af00      	add	r7, sp, #0
 801439e:	60f8      	str	r0, [r7, #12]
 80143a0:	60b9      	str	r1, [r7, #8]
 80143a2:	607a      	str	r2, [r7, #4]
 80143a4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80143a6:	f000 fb69 	bl	8014a7c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80143aa:	4b26      	ldr	r3, [pc, #152]	; (8014444 <xTaskNotifyWait+0xac>)
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80143b2:	b2db      	uxtb	r3, r3
 80143b4:	2b02      	cmp	r3, #2
 80143b6:	d01a      	beq.n	80143ee <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80143b8:	4b22      	ldr	r3, [pc, #136]	; (8014444 <xTaskNotifyWait+0xac>)
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80143be:	68fa      	ldr	r2, [r7, #12]
 80143c0:	43d2      	mvns	r2, r2
 80143c2:	400a      	ands	r2, r1
 80143c4:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80143c6:	4b1f      	ldr	r3, [pc, #124]	; (8014444 <xTaskNotifyWait+0xac>)
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	2201      	movs	r2, #1
 80143cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80143d0:	683b      	ldr	r3, [r7, #0]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d00b      	beq.n	80143ee <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80143d6:	2101      	movs	r1, #1
 80143d8:	6838      	ldr	r0, [r7, #0]
 80143da:	f000 f9c1 	bl	8014760 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80143de:	4b1a      	ldr	r3, [pc, #104]	; (8014448 <xTaskNotifyWait+0xb0>)
 80143e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143e4:	601a      	str	r2, [r3, #0]
 80143e6:	f3bf 8f4f 	dsb	sy
 80143ea:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80143ee:	f000 fb73 	bl	8014ad8 <vPortExitCritical>

		taskENTER_CRITICAL();
 80143f2:	f000 fb43 	bl	8014a7c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d004      	beq.n	8014406 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80143fc:	4b11      	ldr	r3, [pc, #68]	; (8014444 <xTaskNotifyWait+0xac>)
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8014406:	4b0f      	ldr	r3, [pc, #60]	; (8014444 <xTaskNotifyWait+0xac>)
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801440e:	b2db      	uxtb	r3, r3
 8014410:	2b02      	cmp	r3, #2
 8014412:	d002      	beq.n	801441a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8014414:	2300      	movs	r3, #0
 8014416:	617b      	str	r3, [r7, #20]
 8014418:	e008      	b.n	801442c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801441a:	4b0a      	ldr	r3, [pc, #40]	; (8014444 <xTaskNotifyWait+0xac>)
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014420:	68ba      	ldr	r2, [r7, #8]
 8014422:	43d2      	mvns	r2, r2
 8014424:	400a      	ands	r2, r1
 8014426:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8014428:	2301      	movs	r3, #1
 801442a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801442c:	4b05      	ldr	r3, [pc, #20]	; (8014444 <xTaskNotifyWait+0xac>)
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	2200      	movs	r2, #0
 8014432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8014436:	f000 fb4f 	bl	8014ad8 <vPortExitCritical>

		return xReturn;
 801443a:	697b      	ldr	r3, [r7, #20]
	}
 801443c:	4618      	mov	r0, r3
 801443e:	3718      	adds	r7, #24
 8014440:	46bd      	mov	sp, r7
 8014442:	bd80      	pop	{r7, pc}
 8014444:	2000100c 	.word	0x2000100c
 8014448:	e000ed04 	.word	0xe000ed04

0801444c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801444c:	b580      	push	{r7, lr}
 801444e:	b08a      	sub	sp, #40	; 0x28
 8014450:	af00      	add	r7, sp, #0
 8014452:	60f8      	str	r0, [r7, #12]
 8014454:	60b9      	str	r1, [r7, #8]
 8014456:	603b      	str	r3, [r7, #0]
 8014458:	4613      	mov	r3, r2
 801445a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801445c:	2301      	movs	r3, #1
 801445e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d109      	bne.n	801447a <xTaskGenericNotify+0x2e>
 8014466:	f04f 0350 	mov.w	r3, #80	; 0x50
 801446a:	f383 8811 	msr	BASEPRI, r3
 801446e:	f3bf 8f6f 	isb	sy
 8014472:	f3bf 8f4f 	dsb	sy
 8014476:	61bb      	str	r3, [r7, #24]
 8014478:	e7fe      	b.n	8014478 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801447e:	f000 fafd 	bl	8014a7c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8014482:	683b      	ldr	r3, [r7, #0]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d003      	beq.n	8014490 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014488:	6a3b      	ldr	r3, [r7, #32]
 801448a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801448c:	683b      	ldr	r3, [r7, #0]
 801448e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014490:	6a3b      	ldr	r3, [r7, #32]
 8014492:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014496:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014498:	6a3b      	ldr	r3, [r7, #32]
 801449a:	2202      	movs	r2, #2
 801449c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80144a0:	79fb      	ldrb	r3, [r7, #7]
 80144a2:	2b04      	cmp	r3, #4
 80144a4:	d827      	bhi.n	80144f6 <xTaskGenericNotify+0xaa>
 80144a6:	a201      	add	r2, pc, #4	; (adr r2, 80144ac <xTaskGenericNotify+0x60>)
 80144a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144ac:	08014515 	.word	0x08014515
 80144b0:	080144c1 	.word	0x080144c1
 80144b4:	080144cf 	.word	0x080144cf
 80144b8:	080144db 	.word	0x080144db
 80144bc:	080144e3 	.word	0x080144e3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80144c0:	6a3b      	ldr	r3, [r7, #32]
 80144c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80144c4:	68bb      	ldr	r3, [r7, #8]
 80144c6:	431a      	orrs	r2, r3
 80144c8:	6a3b      	ldr	r3, [r7, #32]
 80144ca:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80144cc:	e025      	b.n	801451a <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80144ce:	6a3b      	ldr	r3, [r7, #32]
 80144d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80144d2:	1c5a      	adds	r2, r3, #1
 80144d4:	6a3b      	ldr	r3, [r7, #32]
 80144d6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80144d8:	e01f      	b.n	801451a <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80144da:	6a3b      	ldr	r3, [r7, #32]
 80144dc:	68ba      	ldr	r2, [r7, #8]
 80144de:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80144e0:	e01b      	b.n	801451a <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80144e2:	7ffb      	ldrb	r3, [r7, #31]
 80144e4:	2b02      	cmp	r3, #2
 80144e6:	d003      	beq.n	80144f0 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80144e8:	6a3b      	ldr	r3, [r7, #32]
 80144ea:	68ba      	ldr	r2, [r7, #8]
 80144ec:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80144ee:	e014      	b.n	801451a <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 80144f0:	2300      	movs	r3, #0
 80144f2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80144f4:	e011      	b.n	801451a <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80144f6:	6a3b      	ldr	r3, [r7, #32]
 80144f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80144fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144fe:	d00b      	beq.n	8014518 <xTaskGenericNotify+0xcc>
 8014500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014504:	f383 8811 	msr	BASEPRI, r3
 8014508:	f3bf 8f6f 	isb	sy
 801450c:	f3bf 8f4f 	dsb	sy
 8014510:	617b      	str	r3, [r7, #20]
 8014512:	e7fe      	b.n	8014512 <xTaskGenericNotify+0xc6>
					break;
 8014514:	bf00      	nop
 8014516:	e000      	b.n	801451a <xTaskGenericNotify+0xce>

					break;
 8014518:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801451a:	7ffb      	ldrb	r3, [r7, #31]
 801451c:	2b01      	cmp	r3, #1
 801451e:	d138      	bne.n	8014592 <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014520:	6a3b      	ldr	r3, [r7, #32]
 8014522:	3304      	adds	r3, #4
 8014524:	4618      	mov	r0, r3
 8014526:	f7fe fb36 	bl	8012b96 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801452a:	6a3b      	ldr	r3, [r7, #32]
 801452c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801452e:	2201      	movs	r2, #1
 8014530:	409a      	lsls	r2, r3
 8014532:	4b1b      	ldr	r3, [pc, #108]	; (80145a0 <xTaskGenericNotify+0x154>)
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	4313      	orrs	r3, r2
 8014538:	4a19      	ldr	r2, [pc, #100]	; (80145a0 <xTaskGenericNotify+0x154>)
 801453a:	6013      	str	r3, [r2, #0]
 801453c:	6a3b      	ldr	r3, [r7, #32]
 801453e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014540:	4613      	mov	r3, r2
 8014542:	009b      	lsls	r3, r3, #2
 8014544:	4413      	add	r3, r2
 8014546:	009b      	lsls	r3, r3, #2
 8014548:	4a16      	ldr	r2, [pc, #88]	; (80145a4 <xTaskGenericNotify+0x158>)
 801454a:	441a      	add	r2, r3
 801454c:	6a3b      	ldr	r3, [r7, #32]
 801454e:	3304      	adds	r3, #4
 8014550:	4619      	mov	r1, r3
 8014552:	4610      	mov	r0, r2
 8014554:	f7fe fac2 	bl	8012adc <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014558:	6a3b      	ldr	r3, [r7, #32]
 801455a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801455c:	2b00      	cmp	r3, #0
 801455e:	d009      	beq.n	8014574 <xTaskGenericNotify+0x128>
 8014560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014564:	f383 8811 	msr	BASEPRI, r3
 8014568:	f3bf 8f6f 	isb	sy
 801456c:	f3bf 8f4f 	dsb	sy
 8014570:	613b      	str	r3, [r7, #16]
 8014572:	e7fe      	b.n	8014572 <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014574:	6a3b      	ldr	r3, [r7, #32]
 8014576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014578:	4b0b      	ldr	r3, [pc, #44]	; (80145a8 <xTaskGenericNotify+0x15c>)
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801457e:	429a      	cmp	r2, r3
 8014580:	d907      	bls.n	8014592 <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8014582:	4b0a      	ldr	r3, [pc, #40]	; (80145ac <xTaskGenericNotify+0x160>)
 8014584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014588:	601a      	str	r2, [r3, #0]
 801458a:	f3bf 8f4f 	dsb	sy
 801458e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014592:	f000 faa1 	bl	8014ad8 <vPortExitCritical>

		return xReturn;
 8014596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014598:	4618      	mov	r0, r3
 801459a:	3728      	adds	r7, #40	; 0x28
 801459c:	46bd      	mov	sp, r7
 801459e:	bd80      	pop	{r7, pc}
 80145a0:	20001114 	.word	0x20001114
 80145a4:	20001010 	.word	0x20001010
 80145a8:	2000100c 	.word	0x2000100c
 80145ac:	e000ed04 	.word	0xe000ed04

080145b0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80145b0:	b580      	push	{r7, lr}
 80145b2:	b08e      	sub	sp, #56	; 0x38
 80145b4:	af00      	add	r7, sp, #0
 80145b6:	60f8      	str	r0, [r7, #12]
 80145b8:	60b9      	str	r1, [r7, #8]
 80145ba:	603b      	str	r3, [r7, #0]
 80145bc:	4613      	mov	r3, r2
 80145be:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80145c0:	2301      	movs	r3, #1
 80145c2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d109      	bne.n	80145de <xTaskGenericNotifyFromISR+0x2e>
 80145ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145ce:	f383 8811 	msr	BASEPRI, r3
 80145d2:	f3bf 8f6f 	isb	sy
 80145d6:	f3bf 8f4f 	dsb	sy
 80145da:	627b      	str	r3, [r7, #36]	; 0x24
 80145dc:	e7fe      	b.n	80145dc <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80145de:	f000 fb29 	bl	8014c34 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80145e6:	f3ef 8211 	mrs	r2, BASEPRI
 80145ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145ee:	f383 8811 	msr	BASEPRI, r3
 80145f2:	f3bf 8f6f 	isb	sy
 80145f6:	f3bf 8f4f 	dsb	sy
 80145fa:	623a      	str	r2, [r7, #32]
 80145fc:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80145fe:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014600:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8014602:	683b      	ldr	r3, [r7, #0]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d003      	beq.n	8014610 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801460a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801460c:	683b      	ldr	r3, [r7, #0]
 801460e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014612:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801461a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801461c:	2202      	movs	r2, #2
 801461e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8014622:	79fb      	ldrb	r3, [r7, #7]
 8014624:	2b04      	cmp	r3, #4
 8014626:	d829      	bhi.n	801467c <xTaskGenericNotifyFromISR+0xcc>
 8014628:	a201      	add	r2, pc, #4	; (adr r2, 8014630 <xTaskGenericNotifyFromISR+0x80>)
 801462a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801462e:	bf00      	nop
 8014630:	0801469b 	.word	0x0801469b
 8014634:	08014645 	.word	0x08014645
 8014638:	08014653 	.word	0x08014653
 801463c:	0801465f 	.word	0x0801465f
 8014640:	08014667 	.word	0x08014667
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014646:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014648:	68bb      	ldr	r3, [r7, #8]
 801464a:	431a      	orrs	r2, r3
 801464c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801464e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014650:	e026      	b.n	80146a0 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014656:	1c5a      	adds	r2, r3, #1
 8014658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801465a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801465c:	e020      	b.n	80146a0 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801465e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014660:	68ba      	ldr	r2, [r7, #8]
 8014662:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014664:	e01c      	b.n	80146a0 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014666:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801466a:	2b02      	cmp	r3, #2
 801466c:	d003      	beq.n	8014676 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801466e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014670:	68ba      	ldr	r2, [r7, #8]
 8014672:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014674:	e014      	b.n	80146a0 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8014676:	2300      	movs	r3, #0
 8014678:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801467a:	e011      	b.n	80146a0 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801467c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801467e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014684:	d00b      	beq.n	801469e <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8014686:	f04f 0350 	mov.w	r3, #80	; 0x50
 801468a:	f383 8811 	msr	BASEPRI, r3
 801468e:	f3bf 8f6f 	isb	sy
 8014692:	f3bf 8f4f 	dsb	sy
 8014696:	61bb      	str	r3, [r7, #24]
 8014698:	e7fe      	b.n	8014698 <xTaskGenericNotifyFromISR+0xe8>
					break;
 801469a:	bf00      	nop
 801469c:	e000      	b.n	80146a0 <xTaskGenericNotifyFromISR+0xf0>
					break;
 801469e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80146a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80146a4:	2b01      	cmp	r3, #1
 80146a6:	d144      	bne.n	8014732 <xTaskGenericNotifyFromISR+0x182>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80146a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d009      	beq.n	80146c4 <xTaskGenericNotifyFromISR+0x114>
 80146b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146b4:	f383 8811 	msr	BASEPRI, r3
 80146b8:	f3bf 8f6f 	isb	sy
 80146bc:	f3bf 8f4f 	dsb	sy
 80146c0:	617b      	str	r3, [r7, #20]
 80146c2:	e7fe      	b.n	80146c2 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80146c4:	4b20      	ldr	r3, [pc, #128]	; (8014748 <xTaskGenericNotifyFromISR+0x198>)
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d11c      	bne.n	8014706 <xTaskGenericNotifyFromISR+0x156>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80146cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146ce:	3304      	adds	r3, #4
 80146d0:	4618      	mov	r0, r3
 80146d2:	f7fe fa60 	bl	8012b96 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80146d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146da:	2201      	movs	r2, #1
 80146dc:	409a      	lsls	r2, r3
 80146de:	4b1b      	ldr	r3, [pc, #108]	; (801474c <xTaskGenericNotifyFromISR+0x19c>)
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	4313      	orrs	r3, r2
 80146e4:	4a19      	ldr	r2, [pc, #100]	; (801474c <xTaskGenericNotifyFromISR+0x19c>)
 80146e6:	6013      	str	r3, [r2, #0]
 80146e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146ec:	4613      	mov	r3, r2
 80146ee:	009b      	lsls	r3, r3, #2
 80146f0:	4413      	add	r3, r2
 80146f2:	009b      	lsls	r3, r3, #2
 80146f4:	4a16      	ldr	r2, [pc, #88]	; (8014750 <xTaskGenericNotifyFromISR+0x1a0>)
 80146f6:	441a      	add	r2, r3
 80146f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146fa:	3304      	adds	r3, #4
 80146fc:	4619      	mov	r1, r3
 80146fe:	4610      	mov	r0, r2
 8014700:	f7fe f9ec 	bl	8012adc <vListInsertEnd>
 8014704:	e005      	b.n	8014712 <xTaskGenericNotifyFromISR+0x162>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014708:	3318      	adds	r3, #24
 801470a:	4619      	mov	r1, r3
 801470c:	4811      	ldr	r0, [pc, #68]	; (8014754 <xTaskGenericNotifyFromISR+0x1a4>)
 801470e:	f7fe f9e5 	bl	8012adc <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014716:	4b10      	ldr	r3, [pc, #64]	; (8014758 <xTaskGenericNotifyFromISR+0x1a8>)
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801471c:	429a      	cmp	r2, r3
 801471e:	d908      	bls.n	8014732 <xTaskGenericNotifyFromISR+0x182>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8014720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014722:	2b00      	cmp	r3, #0
 8014724:	d002      	beq.n	801472c <xTaskGenericNotifyFromISR+0x17c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8014726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014728:	2201      	movs	r2, #1
 801472a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801472c:	4b0b      	ldr	r3, [pc, #44]	; (801475c <xTaskGenericNotifyFromISR+0x1ac>)
 801472e:	2201      	movs	r2, #1
 8014730:	601a      	str	r2, [r3, #0]
 8014732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014734:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014736:	693b      	ldr	r3, [r7, #16]
 8014738:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801473c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 801473e:	4618      	mov	r0, r3
 8014740:	3738      	adds	r7, #56	; 0x38
 8014742:	46bd      	mov	sp, r7
 8014744:	bd80      	pop	{r7, pc}
 8014746:	bf00      	nop
 8014748:	20001134 	.word	0x20001134
 801474c:	20001114 	.word	0x20001114
 8014750:	20001010 	.word	0x20001010
 8014754:	200010cc 	.word	0x200010cc
 8014758:	2000100c 	.word	0x2000100c
 801475c:	20001120 	.word	0x20001120

08014760 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014760:	b580      	push	{r7, lr}
 8014762:	b084      	sub	sp, #16
 8014764:	af00      	add	r7, sp, #0
 8014766:	6078      	str	r0, [r7, #4]
 8014768:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801476a:	4b29      	ldr	r3, [pc, #164]	; (8014810 <prvAddCurrentTaskToDelayedList+0xb0>)
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014770:	4b28      	ldr	r3, [pc, #160]	; (8014814 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	3304      	adds	r3, #4
 8014776:	4618      	mov	r0, r3
 8014778:	f7fe fa0d 	bl	8012b96 <uxListRemove>
 801477c:	4603      	mov	r3, r0
 801477e:	2b00      	cmp	r3, #0
 8014780:	d10b      	bne.n	801479a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014782:	4b24      	ldr	r3, [pc, #144]	; (8014814 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014788:	2201      	movs	r2, #1
 801478a:	fa02 f303 	lsl.w	r3, r2, r3
 801478e:	43da      	mvns	r2, r3
 8014790:	4b21      	ldr	r3, [pc, #132]	; (8014818 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	4013      	ands	r3, r2
 8014796:	4a20      	ldr	r2, [pc, #128]	; (8014818 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014798:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147a0:	d10a      	bne.n	80147b8 <prvAddCurrentTaskToDelayedList+0x58>
 80147a2:	683b      	ldr	r3, [r7, #0]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d007      	beq.n	80147b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80147a8:	4b1a      	ldr	r3, [pc, #104]	; (8014814 <prvAddCurrentTaskToDelayedList+0xb4>)
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	3304      	adds	r3, #4
 80147ae:	4619      	mov	r1, r3
 80147b0:	481a      	ldr	r0, [pc, #104]	; (801481c <prvAddCurrentTaskToDelayedList+0xbc>)
 80147b2:	f7fe f993 	bl	8012adc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80147b6:	e026      	b.n	8014806 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80147b8:	68fa      	ldr	r2, [r7, #12]
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	4413      	add	r3, r2
 80147be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80147c0:	4b14      	ldr	r3, [pc, #80]	; (8014814 <prvAddCurrentTaskToDelayedList+0xb4>)
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	68ba      	ldr	r2, [r7, #8]
 80147c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80147c8:	68ba      	ldr	r2, [r7, #8]
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	429a      	cmp	r2, r3
 80147ce:	d209      	bcs.n	80147e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80147d0:	4b13      	ldr	r3, [pc, #76]	; (8014820 <prvAddCurrentTaskToDelayedList+0xc0>)
 80147d2:	681a      	ldr	r2, [r3, #0]
 80147d4:	4b0f      	ldr	r3, [pc, #60]	; (8014814 <prvAddCurrentTaskToDelayedList+0xb4>)
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	3304      	adds	r3, #4
 80147da:	4619      	mov	r1, r3
 80147dc:	4610      	mov	r0, r2
 80147de:	f7fe f9a1 	bl	8012b24 <vListInsert>
}
 80147e2:	e010      	b.n	8014806 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80147e4:	4b0f      	ldr	r3, [pc, #60]	; (8014824 <prvAddCurrentTaskToDelayedList+0xc4>)
 80147e6:	681a      	ldr	r2, [r3, #0]
 80147e8:	4b0a      	ldr	r3, [pc, #40]	; (8014814 <prvAddCurrentTaskToDelayedList+0xb4>)
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	3304      	adds	r3, #4
 80147ee:	4619      	mov	r1, r3
 80147f0:	4610      	mov	r0, r2
 80147f2:	f7fe f997 	bl	8012b24 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80147f6:	4b0c      	ldr	r3, [pc, #48]	; (8014828 <prvAddCurrentTaskToDelayedList+0xc8>)
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	68ba      	ldr	r2, [r7, #8]
 80147fc:	429a      	cmp	r2, r3
 80147fe:	d202      	bcs.n	8014806 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014800:	4a09      	ldr	r2, [pc, #36]	; (8014828 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014802:	68bb      	ldr	r3, [r7, #8]
 8014804:	6013      	str	r3, [r2, #0]
}
 8014806:	bf00      	nop
 8014808:	3710      	adds	r7, #16
 801480a:	46bd      	mov	sp, r7
 801480c:	bd80      	pop	{r7, pc}
 801480e:	bf00      	nop
 8014810:	20001110 	.word	0x20001110
 8014814:	2000100c 	.word	0x2000100c
 8014818:	20001114 	.word	0x20001114
 801481c:	200010f8 	.word	0x200010f8
 8014820:	200010c8 	.word	0x200010c8
 8014824:	200010c4 	.word	0x200010c4
 8014828:	2000112c 	.word	0x2000112c

0801482c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801482c:	b480      	push	{r7}
 801482e:	b085      	sub	sp, #20
 8014830:	af00      	add	r7, sp, #0
 8014832:	60f8      	str	r0, [r7, #12]
 8014834:	60b9      	str	r1, [r7, #8]
 8014836:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	3b04      	subs	r3, #4
 801483c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	3b04      	subs	r3, #4
 801484a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801484c:	68bb      	ldr	r3, [r7, #8]
 801484e:	f023 0201 	bic.w	r2, r3, #1
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	3b04      	subs	r3, #4
 801485a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801485c:	4a0c      	ldr	r2, [pc, #48]	; (8014890 <pxPortInitialiseStack+0x64>)
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	3b14      	subs	r3, #20
 8014866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014868:	687a      	ldr	r2, [r7, #4]
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	3b04      	subs	r3, #4
 8014872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	f06f 0202 	mvn.w	r2, #2
 801487a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	3b20      	subs	r3, #32
 8014880:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014882:	68fb      	ldr	r3, [r7, #12]
}
 8014884:	4618      	mov	r0, r3
 8014886:	3714      	adds	r7, #20
 8014888:	46bd      	mov	sp, r7
 801488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801488e:	4770      	bx	lr
 8014890:	08014895 	.word	0x08014895

08014894 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014894:	b480      	push	{r7}
 8014896:	b085      	sub	sp, #20
 8014898:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801489a:	2300      	movs	r3, #0
 801489c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801489e:	4b11      	ldr	r3, [pc, #68]	; (80148e4 <prvTaskExitError+0x50>)
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148a6:	d009      	beq.n	80148bc <prvTaskExitError+0x28>
	__asm volatile
 80148a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148ac:	f383 8811 	msr	BASEPRI, r3
 80148b0:	f3bf 8f6f 	isb	sy
 80148b4:	f3bf 8f4f 	dsb	sy
 80148b8:	60fb      	str	r3, [r7, #12]
 80148ba:	e7fe      	b.n	80148ba <prvTaskExitError+0x26>
 80148bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148c0:	f383 8811 	msr	BASEPRI, r3
 80148c4:	f3bf 8f6f 	isb	sy
 80148c8:	f3bf 8f4f 	dsb	sy
 80148cc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80148ce:	bf00      	nop
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d0fc      	beq.n	80148d0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80148d6:	bf00      	nop
 80148d8:	3714      	adds	r7, #20
 80148da:	46bd      	mov	sp, r7
 80148dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e0:	4770      	bx	lr
 80148e2:	bf00      	nop
 80148e4:	20000944 	.word	0x20000944
	...

080148f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80148f0:	4b07      	ldr	r3, [pc, #28]	; (8014910 <pxCurrentTCBConst2>)
 80148f2:	6819      	ldr	r1, [r3, #0]
 80148f4:	6808      	ldr	r0, [r1, #0]
 80148f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148fa:	f380 8809 	msr	PSP, r0
 80148fe:	f3bf 8f6f 	isb	sy
 8014902:	f04f 0000 	mov.w	r0, #0
 8014906:	f380 8811 	msr	BASEPRI, r0
 801490a:	4770      	bx	lr
 801490c:	f3af 8000 	nop.w

08014910 <pxCurrentTCBConst2>:
 8014910:	2000100c 	.word	0x2000100c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014914:	bf00      	nop
 8014916:	bf00      	nop

08014918 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014918:	4808      	ldr	r0, [pc, #32]	; (801493c <prvPortStartFirstTask+0x24>)
 801491a:	6800      	ldr	r0, [r0, #0]
 801491c:	6800      	ldr	r0, [r0, #0]
 801491e:	f380 8808 	msr	MSP, r0
 8014922:	f04f 0000 	mov.w	r0, #0
 8014926:	f380 8814 	msr	CONTROL, r0
 801492a:	b662      	cpsie	i
 801492c:	b661      	cpsie	f
 801492e:	f3bf 8f4f 	dsb	sy
 8014932:	f3bf 8f6f 	isb	sy
 8014936:	df00      	svc	0
 8014938:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801493a:	bf00      	nop
 801493c:	e000ed08 	.word	0xe000ed08

08014940 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b086      	sub	sp, #24
 8014944:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014946:	4b44      	ldr	r3, [pc, #272]	; (8014a58 <xPortStartScheduler+0x118>)
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	4a44      	ldr	r2, [pc, #272]	; (8014a5c <xPortStartScheduler+0x11c>)
 801494c:	4293      	cmp	r3, r2
 801494e:	d109      	bne.n	8014964 <xPortStartScheduler+0x24>
 8014950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014954:	f383 8811 	msr	BASEPRI, r3
 8014958:	f3bf 8f6f 	isb	sy
 801495c:	f3bf 8f4f 	dsb	sy
 8014960:	613b      	str	r3, [r7, #16]
 8014962:	e7fe      	b.n	8014962 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014964:	4b3c      	ldr	r3, [pc, #240]	; (8014a58 <xPortStartScheduler+0x118>)
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	4a3d      	ldr	r2, [pc, #244]	; (8014a60 <xPortStartScheduler+0x120>)
 801496a:	4293      	cmp	r3, r2
 801496c:	d109      	bne.n	8014982 <xPortStartScheduler+0x42>
 801496e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014972:	f383 8811 	msr	BASEPRI, r3
 8014976:	f3bf 8f6f 	isb	sy
 801497a:	f3bf 8f4f 	dsb	sy
 801497e:	60fb      	str	r3, [r7, #12]
 8014980:	e7fe      	b.n	8014980 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014982:	4b38      	ldr	r3, [pc, #224]	; (8014a64 <xPortStartScheduler+0x124>)
 8014984:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014986:	697b      	ldr	r3, [r7, #20]
 8014988:	781b      	ldrb	r3, [r3, #0]
 801498a:	b2db      	uxtb	r3, r3
 801498c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801498e:	697b      	ldr	r3, [r7, #20]
 8014990:	22ff      	movs	r2, #255	; 0xff
 8014992:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014994:	697b      	ldr	r3, [r7, #20]
 8014996:	781b      	ldrb	r3, [r3, #0]
 8014998:	b2db      	uxtb	r3, r3
 801499a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801499c:	78fb      	ldrb	r3, [r7, #3]
 801499e:	b2db      	uxtb	r3, r3
 80149a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80149a4:	b2da      	uxtb	r2, r3
 80149a6:	4b30      	ldr	r3, [pc, #192]	; (8014a68 <xPortStartScheduler+0x128>)
 80149a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80149aa:	4b30      	ldr	r3, [pc, #192]	; (8014a6c <xPortStartScheduler+0x12c>)
 80149ac:	2207      	movs	r2, #7
 80149ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80149b0:	e009      	b.n	80149c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80149b2:	4b2e      	ldr	r3, [pc, #184]	; (8014a6c <xPortStartScheduler+0x12c>)
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	3b01      	subs	r3, #1
 80149b8:	4a2c      	ldr	r2, [pc, #176]	; (8014a6c <xPortStartScheduler+0x12c>)
 80149ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80149bc:	78fb      	ldrb	r3, [r7, #3]
 80149be:	b2db      	uxtb	r3, r3
 80149c0:	005b      	lsls	r3, r3, #1
 80149c2:	b2db      	uxtb	r3, r3
 80149c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80149c6:	78fb      	ldrb	r3, [r7, #3]
 80149c8:	b2db      	uxtb	r3, r3
 80149ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80149ce:	2b80      	cmp	r3, #128	; 0x80
 80149d0:	d0ef      	beq.n	80149b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80149d2:	4b26      	ldr	r3, [pc, #152]	; (8014a6c <xPortStartScheduler+0x12c>)
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	f1c3 0307 	rsb	r3, r3, #7
 80149da:	2b04      	cmp	r3, #4
 80149dc:	d009      	beq.n	80149f2 <xPortStartScheduler+0xb2>
 80149de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149e2:	f383 8811 	msr	BASEPRI, r3
 80149e6:	f3bf 8f6f 	isb	sy
 80149ea:	f3bf 8f4f 	dsb	sy
 80149ee:	60bb      	str	r3, [r7, #8]
 80149f0:	e7fe      	b.n	80149f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80149f2:	4b1e      	ldr	r3, [pc, #120]	; (8014a6c <xPortStartScheduler+0x12c>)
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	021b      	lsls	r3, r3, #8
 80149f8:	4a1c      	ldr	r2, [pc, #112]	; (8014a6c <xPortStartScheduler+0x12c>)
 80149fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80149fc:	4b1b      	ldr	r3, [pc, #108]	; (8014a6c <xPortStartScheduler+0x12c>)
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014a04:	4a19      	ldr	r2, [pc, #100]	; (8014a6c <xPortStartScheduler+0x12c>)
 8014a06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	b2da      	uxtb	r2, r3
 8014a0c:	697b      	ldr	r3, [r7, #20]
 8014a0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014a10:	4b17      	ldr	r3, [pc, #92]	; (8014a70 <xPortStartScheduler+0x130>)
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	4a16      	ldr	r2, [pc, #88]	; (8014a70 <xPortStartScheduler+0x130>)
 8014a16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014a1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014a1c:	4b14      	ldr	r3, [pc, #80]	; (8014a70 <xPortStartScheduler+0x130>)
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	4a13      	ldr	r2, [pc, #76]	; (8014a70 <xPortStartScheduler+0x130>)
 8014a22:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014a26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014a28:	f000 f8d6 	bl	8014bd8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014a2c:	4b11      	ldr	r3, [pc, #68]	; (8014a74 <xPortStartScheduler+0x134>)
 8014a2e:	2200      	movs	r2, #0
 8014a30:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014a32:	f000 f8f5 	bl	8014c20 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014a36:	4b10      	ldr	r3, [pc, #64]	; (8014a78 <xPortStartScheduler+0x138>)
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	4a0f      	ldr	r2, [pc, #60]	; (8014a78 <xPortStartScheduler+0x138>)
 8014a3c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014a40:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014a42:	f7ff ff69 	bl	8014918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014a46:	f7ff f9d1 	bl	8013dec <vTaskSwitchContext>
	prvTaskExitError();
 8014a4a:	f7ff ff23 	bl	8014894 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014a4e:	2300      	movs	r3, #0
}
 8014a50:	4618      	mov	r0, r3
 8014a52:	3718      	adds	r7, #24
 8014a54:	46bd      	mov	sp, r7
 8014a56:	bd80      	pop	{r7, pc}
 8014a58:	e000ed00 	.word	0xe000ed00
 8014a5c:	410fc271 	.word	0x410fc271
 8014a60:	410fc270 	.word	0x410fc270
 8014a64:	e000e400 	.word	0xe000e400
 8014a68:	20001138 	.word	0x20001138
 8014a6c:	2000113c 	.word	0x2000113c
 8014a70:	e000ed20 	.word	0xe000ed20
 8014a74:	20000944 	.word	0x20000944
 8014a78:	e000ef34 	.word	0xe000ef34

08014a7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014a7c:	b480      	push	{r7}
 8014a7e:	b083      	sub	sp, #12
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a86:	f383 8811 	msr	BASEPRI, r3
 8014a8a:	f3bf 8f6f 	isb	sy
 8014a8e:	f3bf 8f4f 	dsb	sy
 8014a92:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014a94:	4b0e      	ldr	r3, [pc, #56]	; (8014ad0 <vPortEnterCritical+0x54>)
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	3301      	adds	r3, #1
 8014a9a:	4a0d      	ldr	r2, [pc, #52]	; (8014ad0 <vPortEnterCritical+0x54>)
 8014a9c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014a9e:	4b0c      	ldr	r3, [pc, #48]	; (8014ad0 <vPortEnterCritical+0x54>)
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	2b01      	cmp	r3, #1
 8014aa4:	d10e      	bne.n	8014ac4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014aa6:	4b0b      	ldr	r3, [pc, #44]	; (8014ad4 <vPortEnterCritical+0x58>)
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	b2db      	uxtb	r3, r3
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d009      	beq.n	8014ac4 <vPortEnterCritical+0x48>
 8014ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ab4:	f383 8811 	msr	BASEPRI, r3
 8014ab8:	f3bf 8f6f 	isb	sy
 8014abc:	f3bf 8f4f 	dsb	sy
 8014ac0:	603b      	str	r3, [r7, #0]
 8014ac2:	e7fe      	b.n	8014ac2 <vPortEnterCritical+0x46>
	}
}
 8014ac4:	bf00      	nop
 8014ac6:	370c      	adds	r7, #12
 8014ac8:	46bd      	mov	sp, r7
 8014aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ace:	4770      	bx	lr
 8014ad0:	20000944 	.word	0x20000944
 8014ad4:	e000ed04 	.word	0xe000ed04

08014ad8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014ad8:	b480      	push	{r7}
 8014ada:	b083      	sub	sp, #12
 8014adc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014ade:	4b11      	ldr	r3, [pc, #68]	; (8014b24 <vPortExitCritical+0x4c>)
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d109      	bne.n	8014afa <vPortExitCritical+0x22>
 8014ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014aea:	f383 8811 	msr	BASEPRI, r3
 8014aee:	f3bf 8f6f 	isb	sy
 8014af2:	f3bf 8f4f 	dsb	sy
 8014af6:	607b      	str	r3, [r7, #4]
 8014af8:	e7fe      	b.n	8014af8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8014afa:	4b0a      	ldr	r3, [pc, #40]	; (8014b24 <vPortExitCritical+0x4c>)
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	3b01      	subs	r3, #1
 8014b00:	4a08      	ldr	r2, [pc, #32]	; (8014b24 <vPortExitCritical+0x4c>)
 8014b02:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014b04:	4b07      	ldr	r3, [pc, #28]	; (8014b24 <vPortExitCritical+0x4c>)
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d104      	bne.n	8014b16 <vPortExitCritical+0x3e>
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014b10:	683b      	ldr	r3, [r7, #0]
 8014b12:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8014b16:	bf00      	nop
 8014b18:	370c      	adds	r7, #12
 8014b1a:	46bd      	mov	sp, r7
 8014b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b20:	4770      	bx	lr
 8014b22:	bf00      	nop
 8014b24:	20000944 	.word	0x20000944
	...

08014b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014b30:	f3ef 8009 	mrs	r0, PSP
 8014b34:	f3bf 8f6f 	isb	sy
 8014b38:	4b15      	ldr	r3, [pc, #84]	; (8014b90 <pxCurrentTCBConst>)
 8014b3a:	681a      	ldr	r2, [r3, #0]
 8014b3c:	f01e 0f10 	tst.w	lr, #16
 8014b40:	bf08      	it	eq
 8014b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b4a:	6010      	str	r0, [r2, #0]
 8014b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014b50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014b54:	f380 8811 	msr	BASEPRI, r0
 8014b58:	f3bf 8f4f 	dsb	sy
 8014b5c:	f3bf 8f6f 	isb	sy
 8014b60:	f7ff f944 	bl	8013dec <vTaskSwitchContext>
 8014b64:	f04f 0000 	mov.w	r0, #0
 8014b68:	f380 8811 	msr	BASEPRI, r0
 8014b6c:	bc09      	pop	{r0, r3}
 8014b6e:	6819      	ldr	r1, [r3, #0]
 8014b70:	6808      	ldr	r0, [r1, #0]
 8014b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b76:	f01e 0f10 	tst.w	lr, #16
 8014b7a:	bf08      	it	eq
 8014b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014b80:	f380 8809 	msr	PSP, r0
 8014b84:	f3bf 8f6f 	isb	sy
 8014b88:	4770      	bx	lr
 8014b8a:	bf00      	nop
 8014b8c:	f3af 8000 	nop.w

08014b90 <pxCurrentTCBConst>:
 8014b90:	2000100c 	.word	0x2000100c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014b94:	bf00      	nop
 8014b96:	bf00      	nop

08014b98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014b98:	b580      	push	{r7, lr}
 8014b9a:	b082      	sub	sp, #8
 8014b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8014b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ba2:	f383 8811 	msr	BASEPRI, r3
 8014ba6:	f3bf 8f6f 	isb	sy
 8014baa:	f3bf 8f4f 	dsb	sy
 8014bae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014bb0:	f7ff f864 	bl	8013c7c <xTaskIncrementTick>
 8014bb4:	4603      	mov	r3, r0
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d003      	beq.n	8014bc2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014bba:	4b06      	ldr	r3, [pc, #24]	; (8014bd4 <SysTick_Handler+0x3c>)
 8014bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014bc0:	601a      	str	r2, [r3, #0]
 8014bc2:	2300      	movs	r3, #0
 8014bc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014bc6:	683b      	ldr	r3, [r7, #0]
 8014bc8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8014bcc:	bf00      	nop
 8014bce:	3708      	adds	r7, #8
 8014bd0:	46bd      	mov	sp, r7
 8014bd2:	bd80      	pop	{r7, pc}
 8014bd4:	e000ed04 	.word	0xe000ed04

08014bd8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014bd8:	b480      	push	{r7}
 8014bda:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014bdc:	4b0b      	ldr	r3, [pc, #44]	; (8014c0c <vPortSetupTimerInterrupt+0x34>)
 8014bde:	2200      	movs	r2, #0
 8014be0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014be2:	4b0b      	ldr	r3, [pc, #44]	; (8014c10 <vPortSetupTimerInterrupt+0x38>)
 8014be4:	2200      	movs	r2, #0
 8014be6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014be8:	4b0a      	ldr	r3, [pc, #40]	; (8014c14 <vPortSetupTimerInterrupt+0x3c>)
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	4a0a      	ldr	r2, [pc, #40]	; (8014c18 <vPortSetupTimerInterrupt+0x40>)
 8014bee:	fba2 2303 	umull	r2, r3, r2, r3
 8014bf2:	099b      	lsrs	r3, r3, #6
 8014bf4:	4a09      	ldr	r2, [pc, #36]	; (8014c1c <vPortSetupTimerInterrupt+0x44>)
 8014bf6:	3b01      	subs	r3, #1
 8014bf8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014bfa:	4b04      	ldr	r3, [pc, #16]	; (8014c0c <vPortSetupTimerInterrupt+0x34>)
 8014bfc:	2207      	movs	r2, #7
 8014bfe:	601a      	str	r2, [r3, #0]
}
 8014c00:	bf00      	nop
 8014c02:	46bd      	mov	sp, r7
 8014c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c08:	4770      	bx	lr
 8014c0a:	bf00      	nop
 8014c0c:	e000e010 	.word	0xe000e010
 8014c10:	e000e018 	.word	0xe000e018
 8014c14:	20000828 	.word	0x20000828
 8014c18:	10624dd3 	.word	0x10624dd3
 8014c1c:	e000e014 	.word	0xe000e014

08014c20 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014c20:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014c30 <vPortEnableVFP+0x10>
 8014c24:	6801      	ldr	r1, [r0, #0]
 8014c26:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014c2a:	6001      	str	r1, [r0, #0]
 8014c2c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014c2e:	bf00      	nop
 8014c30:	e000ed88 	.word	0xe000ed88

08014c34 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014c34:	b480      	push	{r7}
 8014c36:	b085      	sub	sp, #20
 8014c38:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014c3a:	f3ef 8305 	mrs	r3, IPSR
 8014c3e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	2b0f      	cmp	r3, #15
 8014c44:	d913      	bls.n	8014c6e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014c46:	4a16      	ldr	r2, [pc, #88]	; (8014ca0 <vPortValidateInterruptPriority+0x6c>)
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	4413      	add	r3, r2
 8014c4c:	781b      	ldrb	r3, [r3, #0]
 8014c4e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014c50:	4b14      	ldr	r3, [pc, #80]	; (8014ca4 <vPortValidateInterruptPriority+0x70>)
 8014c52:	781b      	ldrb	r3, [r3, #0]
 8014c54:	7afa      	ldrb	r2, [r7, #11]
 8014c56:	429a      	cmp	r2, r3
 8014c58:	d209      	bcs.n	8014c6e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8014c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c5e:	f383 8811 	msr	BASEPRI, r3
 8014c62:	f3bf 8f6f 	isb	sy
 8014c66:	f3bf 8f4f 	dsb	sy
 8014c6a:	607b      	str	r3, [r7, #4]
 8014c6c:	e7fe      	b.n	8014c6c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014c6e:	4b0e      	ldr	r3, [pc, #56]	; (8014ca8 <vPortValidateInterruptPriority+0x74>)
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014c76:	4b0d      	ldr	r3, [pc, #52]	; (8014cac <vPortValidateInterruptPriority+0x78>)
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	429a      	cmp	r2, r3
 8014c7c:	d909      	bls.n	8014c92 <vPortValidateInterruptPriority+0x5e>
 8014c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c82:	f383 8811 	msr	BASEPRI, r3
 8014c86:	f3bf 8f6f 	isb	sy
 8014c8a:	f3bf 8f4f 	dsb	sy
 8014c8e:	603b      	str	r3, [r7, #0]
 8014c90:	e7fe      	b.n	8014c90 <vPortValidateInterruptPriority+0x5c>
	}
 8014c92:	bf00      	nop
 8014c94:	3714      	adds	r7, #20
 8014c96:	46bd      	mov	sp, r7
 8014c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c9c:	4770      	bx	lr
 8014c9e:	bf00      	nop
 8014ca0:	e000e3f0 	.word	0xe000e3f0
 8014ca4:	20001138 	.word	0x20001138
 8014ca8:	e000ed0c 	.word	0xe000ed0c
 8014cac:	2000113c 	.word	0x2000113c

08014cb0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b08a      	sub	sp, #40	; 0x28
 8014cb4:	af00      	add	r7, sp, #0
 8014cb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014cb8:	2300      	movs	r3, #0
 8014cba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014cbc:	f7fe ff34 	bl	8013b28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014cc0:	4b57      	ldr	r3, [pc, #348]	; (8014e20 <pvPortMalloc+0x170>)
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d101      	bne.n	8014ccc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014cc8:	f000 f90c 	bl	8014ee4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014ccc:	4b55      	ldr	r3, [pc, #340]	; (8014e24 <pvPortMalloc+0x174>)
 8014cce:	681a      	ldr	r2, [r3, #0]
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	4013      	ands	r3, r2
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	f040 808c 	bne.w	8014df2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d01c      	beq.n	8014d1a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8014ce0:	2208      	movs	r2, #8
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	4413      	add	r3, r2
 8014ce6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	f003 0307 	and.w	r3, r3, #7
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d013      	beq.n	8014d1a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	f023 0307 	bic.w	r3, r3, #7
 8014cf8:	3308      	adds	r3, #8
 8014cfa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	f003 0307 	and.w	r3, r3, #7
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d009      	beq.n	8014d1a <pvPortMalloc+0x6a>
 8014d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d0a:	f383 8811 	msr	BASEPRI, r3
 8014d0e:	f3bf 8f6f 	isb	sy
 8014d12:	f3bf 8f4f 	dsb	sy
 8014d16:	617b      	str	r3, [r7, #20]
 8014d18:	e7fe      	b.n	8014d18 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d068      	beq.n	8014df2 <pvPortMalloc+0x142>
 8014d20:	4b41      	ldr	r3, [pc, #260]	; (8014e28 <pvPortMalloc+0x178>)
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	687a      	ldr	r2, [r7, #4]
 8014d26:	429a      	cmp	r2, r3
 8014d28:	d863      	bhi.n	8014df2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014d2a:	4b40      	ldr	r3, [pc, #256]	; (8014e2c <pvPortMalloc+0x17c>)
 8014d2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014d2e:	4b3f      	ldr	r3, [pc, #252]	; (8014e2c <pvPortMalloc+0x17c>)
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014d34:	e004      	b.n	8014d40 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8014d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d42:	685b      	ldr	r3, [r3, #4]
 8014d44:	687a      	ldr	r2, [r7, #4]
 8014d46:	429a      	cmp	r2, r3
 8014d48:	d903      	bls.n	8014d52 <pvPortMalloc+0xa2>
 8014d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d1f1      	bne.n	8014d36 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014d52:	4b33      	ldr	r3, [pc, #204]	; (8014e20 <pvPortMalloc+0x170>)
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d58:	429a      	cmp	r2, r3
 8014d5a:	d04a      	beq.n	8014df2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014d5c:	6a3b      	ldr	r3, [r7, #32]
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	2208      	movs	r2, #8
 8014d62:	4413      	add	r3, r2
 8014d64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d68:	681a      	ldr	r2, [r3, #0]
 8014d6a:	6a3b      	ldr	r3, [r7, #32]
 8014d6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d70:	685a      	ldr	r2, [r3, #4]
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	1ad2      	subs	r2, r2, r3
 8014d76:	2308      	movs	r3, #8
 8014d78:	005b      	lsls	r3, r3, #1
 8014d7a:	429a      	cmp	r2, r3
 8014d7c:	d91e      	bls.n	8014dbc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	4413      	add	r3, r2
 8014d84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014d86:	69bb      	ldr	r3, [r7, #24]
 8014d88:	f003 0307 	and.w	r3, r3, #7
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d009      	beq.n	8014da4 <pvPortMalloc+0xf4>
 8014d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d94:	f383 8811 	msr	BASEPRI, r3
 8014d98:	f3bf 8f6f 	isb	sy
 8014d9c:	f3bf 8f4f 	dsb	sy
 8014da0:	613b      	str	r3, [r7, #16]
 8014da2:	e7fe      	b.n	8014da2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014da6:	685a      	ldr	r2, [r3, #4]
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	1ad2      	subs	r2, r2, r3
 8014dac:	69bb      	ldr	r3, [r7, #24]
 8014dae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014db2:	687a      	ldr	r2, [r7, #4]
 8014db4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014db6:	69b8      	ldr	r0, [r7, #24]
 8014db8:	f000 f8f6 	bl	8014fa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014dbc:	4b1a      	ldr	r3, [pc, #104]	; (8014e28 <pvPortMalloc+0x178>)
 8014dbe:	681a      	ldr	r2, [r3, #0]
 8014dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dc2:	685b      	ldr	r3, [r3, #4]
 8014dc4:	1ad3      	subs	r3, r2, r3
 8014dc6:	4a18      	ldr	r2, [pc, #96]	; (8014e28 <pvPortMalloc+0x178>)
 8014dc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014dca:	4b17      	ldr	r3, [pc, #92]	; (8014e28 <pvPortMalloc+0x178>)
 8014dcc:	681a      	ldr	r2, [r3, #0]
 8014dce:	4b18      	ldr	r3, [pc, #96]	; (8014e30 <pvPortMalloc+0x180>)
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	429a      	cmp	r2, r3
 8014dd4:	d203      	bcs.n	8014dde <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014dd6:	4b14      	ldr	r3, [pc, #80]	; (8014e28 <pvPortMalloc+0x178>)
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	4a15      	ldr	r2, [pc, #84]	; (8014e30 <pvPortMalloc+0x180>)
 8014ddc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014de0:	685a      	ldr	r2, [r3, #4]
 8014de2:	4b10      	ldr	r3, [pc, #64]	; (8014e24 <pvPortMalloc+0x174>)
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	431a      	orrs	r2, r3
 8014de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dee:	2200      	movs	r2, #0
 8014df0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014df2:	f7fe fea7 	bl	8013b44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014df6:	69fb      	ldr	r3, [r7, #28]
 8014df8:	f003 0307 	and.w	r3, r3, #7
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d009      	beq.n	8014e14 <pvPortMalloc+0x164>
 8014e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e04:	f383 8811 	msr	BASEPRI, r3
 8014e08:	f3bf 8f6f 	isb	sy
 8014e0c:	f3bf 8f4f 	dsb	sy
 8014e10:	60fb      	str	r3, [r7, #12]
 8014e12:	e7fe      	b.n	8014e12 <pvPortMalloc+0x162>
	return pvReturn;
 8014e14:	69fb      	ldr	r3, [r7, #28]
}
 8014e16:	4618      	mov	r0, r3
 8014e18:	3728      	adds	r7, #40	; 0x28
 8014e1a:	46bd      	mov	sp, r7
 8014e1c:	bd80      	pop	{r7, pc}
 8014e1e:	bf00      	nop
 8014e20:	20004d48 	.word	0x20004d48
 8014e24:	20004d54 	.word	0x20004d54
 8014e28:	20004d4c 	.word	0x20004d4c
 8014e2c:	20004d40 	.word	0x20004d40
 8014e30:	20004d50 	.word	0x20004d50

08014e34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014e34:	b580      	push	{r7, lr}
 8014e36:	b086      	sub	sp, #24
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d046      	beq.n	8014ed4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014e46:	2308      	movs	r3, #8
 8014e48:	425b      	negs	r3, r3
 8014e4a:	697a      	ldr	r2, [r7, #20]
 8014e4c:	4413      	add	r3, r2
 8014e4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014e50:	697b      	ldr	r3, [r7, #20]
 8014e52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014e54:	693b      	ldr	r3, [r7, #16]
 8014e56:	685a      	ldr	r2, [r3, #4]
 8014e58:	4b20      	ldr	r3, [pc, #128]	; (8014edc <vPortFree+0xa8>)
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	4013      	ands	r3, r2
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d109      	bne.n	8014e76 <vPortFree+0x42>
 8014e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e66:	f383 8811 	msr	BASEPRI, r3
 8014e6a:	f3bf 8f6f 	isb	sy
 8014e6e:	f3bf 8f4f 	dsb	sy
 8014e72:	60fb      	str	r3, [r7, #12]
 8014e74:	e7fe      	b.n	8014e74 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014e76:	693b      	ldr	r3, [r7, #16]
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d009      	beq.n	8014e92 <vPortFree+0x5e>
 8014e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e82:	f383 8811 	msr	BASEPRI, r3
 8014e86:	f3bf 8f6f 	isb	sy
 8014e8a:	f3bf 8f4f 	dsb	sy
 8014e8e:	60bb      	str	r3, [r7, #8]
 8014e90:	e7fe      	b.n	8014e90 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014e92:	693b      	ldr	r3, [r7, #16]
 8014e94:	685a      	ldr	r2, [r3, #4]
 8014e96:	4b11      	ldr	r3, [pc, #68]	; (8014edc <vPortFree+0xa8>)
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	4013      	ands	r3, r2
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d019      	beq.n	8014ed4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014ea0:	693b      	ldr	r3, [r7, #16]
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d115      	bne.n	8014ed4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014ea8:	693b      	ldr	r3, [r7, #16]
 8014eaa:	685a      	ldr	r2, [r3, #4]
 8014eac:	4b0b      	ldr	r3, [pc, #44]	; (8014edc <vPortFree+0xa8>)
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	43db      	mvns	r3, r3
 8014eb2:	401a      	ands	r2, r3
 8014eb4:	693b      	ldr	r3, [r7, #16]
 8014eb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014eb8:	f7fe fe36 	bl	8013b28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014ebc:	693b      	ldr	r3, [r7, #16]
 8014ebe:	685a      	ldr	r2, [r3, #4]
 8014ec0:	4b07      	ldr	r3, [pc, #28]	; (8014ee0 <vPortFree+0xac>)
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	4413      	add	r3, r2
 8014ec6:	4a06      	ldr	r2, [pc, #24]	; (8014ee0 <vPortFree+0xac>)
 8014ec8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014eca:	6938      	ldr	r0, [r7, #16]
 8014ecc:	f000 f86c 	bl	8014fa8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014ed0:	f7fe fe38 	bl	8013b44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014ed4:	bf00      	nop
 8014ed6:	3718      	adds	r7, #24
 8014ed8:	46bd      	mov	sp, r7
 8014eda:	bd80      	pop	{r7, pc}
 8014edc:	20004d54 	.word	0x20004d54
 8014ee0:	20004d4c 	.word	0x20004d4c

08014ee4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014ee4:	b480      	push	{r7}
 8014ee6:	b085      	sub	sp, #20
 8014ee8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014eea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8014eee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014ef0:	4b27      	ldr	r3, [pc, #156]	; (8014f90 <prvHeapInit+0xac>)
 8014ef2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	f003 0307 	and.w	r3, r3, #7
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d00c      	beq.n	8014f18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	3307      	adds	r3, #7
 8014f02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	f023 0307 	bic.w	r3, r3, #7
 8014f0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014f0c:	68ba      	ldr	r2, [r7, #8]
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	1ad3      	subs	r3, r2, r3
 8014f12:	4a1f      	ldr	r2, [pc, #124]	; (8014f90 <prvHeapInit+0xac>)
 8014f14:	4413      	add	r3, r2
 8014f16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014f1c:	4a1d      	ldr	r2, [pc, #116]	; (8014f94 <prvHeapInit+0xb0>)
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014f22:	4b1c      	ldr	r3, [pc, #112]	; (8014f94 <prvHeapInit+0xb0>)
 8014f24:	2200      	movs	r2, #0
 8014f26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	68ba      	ldr	r2, [r7, #8]
 8014f2c:	4413      	add	r3, r2
 8014f2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014f30:	2208      	movs	r2, #8
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	1a9b      	subs	r3, r3, r2
 8014f36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	f023 0307 	bic.w	r3, r3, #7
 8014f3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	4a15      	ldr	r2, [pc, #84]	; (8014f98 <prvHeapInit+0xb4>)
 8014f44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014f46:	4b14      	ldr	r3, [pc, #80]	; (8014f98 <prvHeapInit+0xb4>)
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014f4e:	4b12      	ldr	r3, [pc, #72]	; (8014f98 <prvHeapInit+0xb4>)
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	2200      	movs	r2, #0
 8014f54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014f5a:	683b      	ldr	r3, [r7, #0]
 8014f5c:	68fa      	ldr	r2, [r7, #12]
 8014f5e:	1ad2      	subs	r2, r2, r3
 8014f60:	683b      	ldr	r3, [r7, #0]
 8014f62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014f64:	4b0c      	ldr	r3, [pc, #48]	; (8014f98 <prvHeapInit+0xb4>)
 8014f66:	681a      	ldr	r2, [r3, #0]
 8014f68:	683b      	ldr	r3, [r7, #0]
 8014f6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014f6c:	683b      	ldr	r3, [r7, #0]
 8014f6e:	685b      	ldr	r3, [r3, #4]
 8014f70:	4a0a      	ldr	r2, [pc, #40]	; (8014f9c <prvHeapInit+0xb8>)
 8014f72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014f74:	683b      	ldr	r3, [r7, #0]
 8014f76:	685b      	ldr	r3, [r3, #4]
 8014f78:	4a09      	ldr	r2, [pc, #36]	; (8014fa0 <prvHeapInit+0xbc>)
 8014f7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014f7c:	4b09      	ldr	r3, [pc, #36]	; (8014fa4 <prvHeapInit+0xc0>)
 8014f7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014f82:	601a      	str	r2, [r3, #0]
}
 8014f84:	bf00      	nop
 8014f86:	3714      	adds	r7, #20
 8014f88:	46bd      	mov	sp, r7
 8014f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f8e:	4770      	bx	lr
 8014f90:	20001140 	.word	0x20001140
 8014f94:	20004d40 	.word	0x20004d40
 8014f98:	20004d48 	.word	0x20004d48
 8014f9c:	20004d50 	.word	0x20004d50
 8014fa0:	20004d4c 	.word	0x20004d4c
 8014fa4:	20004d54 	.word	0x20004d54

08014fa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014fa8:	b480      	push	{r7}
 8014faa:	b085      	sub	sp, #20
 8014fac:	af00      	add	r7, sp, #0
 8014fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014fb0:	4b28      	ldr	r3, [pc, #160]	; (8015054 <prvInsertBlockIntoFreeList+0xac>)
 8014fb2:	60fb      	str	r3, [r7, #12]
 8014fb4:	e002      	b.n	8014fbc <prvInsertBlockIntoFreeList+0x14>
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	60fb      	str	r3, [r7, #12]
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	687a      	ldr	r2, [r7, #4]
 8014fc2:	429a      	cmp	r2, r3
 8014fc4:	d8f7      	bhi.n	8014fb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	685b      	ldr	r3, [r3, #4]
 8014fce:	68ba      	ldr	r2, [r7, #8]
 8014fd0:	4413      	add	r3, r2
 8014fd2:	687a      	ldr	r2, [r7, #4]
 8014fd4:	429a      	cmp	r2, r3
 8014fd6:	d108      	bne.n	8014fea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	685a      	ldr	r2, [r3, #4]
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	685b      	ldr	r3, [r3, #4]
 8014fe0:	441a      	add	r2, r3
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	685b      	ldr	r3, [r3, #4]
 8014ff2:	68ba      	ldr	r2, [r7, #8]
 8014ff4:	441a      	add	r2, r3
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	429a      	cmp	r2, r3
 8014ffc:	d118      	bne.n	8015030 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	681a      	ldr	r2, [r3, #0]
 8015002:	4b15      	ldr	r3, [pc, #84]	; (8015058 <prvInsertBlockIntoFreeList+0xb0>)
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	429a      	cmp	r2, r3
 8015008:	d00d      	beq.n	8015026 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	685a      	ldr	r2, [r3, #4]
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	685b      	ldr	r3, [r3, #4]
 8015014:	441a      	add	r2, r3
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	681a      	ldr	r2, [r3, #0]
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	601a      	str	r2, [r3, #0]
 8015024:	e008      	b.n	8015038 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015026:	4b0c      	ldr	r3, [pc, #48]	; (8015058 <prvInsertBlockIntoFreeList+0xb0>)
 8015028:	681a      	ldr	r2, [r3, #0]
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	601a      	str	r2, [r3, #0]
 801502e:	e003      	b.n	8015038 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	681a      	ldr	r2, [r3, #0]
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015038:	68fa      	ldr	r2, [r7, #12]
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	429a      	cmp	r2, r3
 801503e:	d002      	beq.n	8015046 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	687a      	ldr	r2, [r7, #4]
 8015044:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015046:	bf00      	nop
 8015048:	3714      	adds	r7, #20
 801504a:	46bd      	mov	sp, r7
 801504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015050:	4770      	bx	lr
 8015052:	bf00      	nop
 8015054:	20004d40 	.word	0x20004d40
 8015058:	20004d48 	.word	0x20004d48

0801505c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801505c:	b580      	push	{r7, lr}
 801505e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015060:	2200      	movs	r2, #0
 8015062:	4912      	ldr	r1, [pc, #72]	; (80150ac <MX_USB_DEVICE_Init+0x50>)
 8015064:	4812      	ldr	r0, [pc, #72]	; (80150b0 <MX_USB_DEVICE_Init+0x54>)
 8015066:	f7fc f89d 	bl	80111a4 <USBD_Init>
 801506a:	4603      	mov	r3, r0
 801506c:	2b00      	cmp	r3, #0
 801506e:	d001      	beq.n	8015074 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015070:	f7ee ff5c 	bl	8003f2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015074:	490f      	ldr	r1, [pc, #60]	; (80150b4 <MX_USB_DEVICE_Init+0x58>)
 8015076:	480e      	ldr	r0, [pc, #56]	; (80150b0 <MX_USB_DEVICE_Init+0x54>)
 8015078:	f7fc f8ca 	bl	8011210 <USBD_RegisterClass>
 801507c:	4603      	mov	r3, r0
 801507e:	2b00      	cmp	r3, #0
 8015080:	d001      	beq.n	8015086 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015082:	f7ee ff53 	bl	8003f2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015086:	490c      	ldr	r1, [pc, #48]	; (80150b8 <MX_USB_DEVICE_Init+0x5c>)
 8015088:	4809      	ldr	r0, [pc, #36]	; (80150b0 <MX_USB_DEVICE_Init+0x54>)
 801508a:	f7fb ffef 	bl	801106c <USBD_CDC_RegisterInterface>
 801508e:	4603      	mov	r3, r0
 8015090:	2b00      	cmp	r3, #0
 8015092:	d001      	beq.n	8015098 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015094:	f7ee ff4a 	bl	8003f2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015098:	4805      	ldr	r0, [pc, #20]	; (80150b0 <MX_USB_DEVICE_Init+0x54>)
 801509a:	f7fc f8da 	bl	8011252 <USBD_Start>
 801509e:	4603      	mov	r3, r0
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d001      	beq.n	80150a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80150a4:	f7ee ff42 	bl	8003f2c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80150a8:	bf00      	nop
 80150aa:	bd80      	pop	{r7, pc}
 80150ac:	2000095c 	.word	0x2000095c
 80150b0:	20005e8c 	.word	0x20005e8c
 80150b4:	20000840 	.word	0x20000840
 80150b8:	20000948 	.word	0x20000948

080150bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80150c0:	2200      	movs	r2, #0
 80150c2:	4905      	ldr	r1, [pc, #20]	; (80150d8 <CDC_Init_FS+0x1c>)
 80150c4:	4805      	ldr	r0, [pc, #20]	; (80150dc <CDC_Init_FS+0x20>)
 80150c6:	f7fb ffe6 	bl	8011096 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80150ca:	4905      	ldr	r1, [pc, #20]	; (80150e0 <CDC_Init_FS+0x24>)
 80150cc:	4803      	ldr	r0, [pc, #12]	; (80150dc <CDC_Init_FS+0x20>)
 80150ce:	f7fb fffb 	bl	80110c8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80150d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80150d4:	4618      	mov	r0, r3
 80150d6:	bd80      	pop	{r7, pc}
 80150d8:	2000635c 	.word	0x2000635c
 80150dc:	20005e8c 	.word	0x20005e8c
 80150e0:	2000615c 	.word	0x2000615c

080150e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80150e4:	b480      	push	{r7}
 80150e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80150e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80150ea:	4618      	mov	r0, r3
 80150ec:	46bd      	mov	sp, r7
 80150ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f2:	4770      	bx	lr

080150f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80150f4:	b480      	push	{r7}
 80150f6:	b083      	sub	sp, #12
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	4603      	mov	r3, r0
 80150fc:	6039      	str	r1, [r7, #0]
 80150fe:	71fb      	strb	r3, [r7, #7]
 8015100:	4613      	mov	r3, r2
 8015102:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015104:	79fb      	ldrb	r3, [r7, #7]
 8015106:	2b23      	cmp	r3, #35	; 0x23
 8015108:	f200 808c 	bhi.w	8015224 <CDC_Control_FS+0x130>
 801510c:	a201      	add	r2, pc, #4	; (adr r2, 8015114 <CDC_Control_FS+0x20>)
 801510e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015112:	bf00      	nop
 8015114:	08015225 	.word	0x08015225
 8015118:	08015225 	.word	0x08015225
 801511c:	08015225 	.word	0x08015225
 8015120:	08015225 	.word	0x08015225
 8015124:	08015225 	.word	0x08015225
 8015128:	08015225 	.word	0x08015225
 801512c:	08015225 	.word	0x08015225
 8015130:	08015225 	.word	0x08015225
 8015134:	08015225 	.word	0x08015225
 8015138:	08015225 	.word	0x08015225
 801513c:	08015225 	.word	0x08015225
 8015140:	08015225 	.word	0x08015225
 8015144:	08015225 	.word	0x08015225
 8015148:	08015225 	.word	0x08015225
 801514c:	08015225 	.word	0x08015225
 8015150:	08015225 	.word	0x08015225
 8015154:	08015225 	.word	0x08015225
 8015158:	08015225 	.word	0x08015225
 801515c:	08015225 	.word	0x08015225
 8015160:	08015225 	.word	0x08015225
 8015164:	08015225 	.word	0x08015225
 8015168:	08015225 	.word	0x08015225
 801516c:	08015225 	.word	0x08015225
 8015170:	08015225 	.word	0x08015225
 8015174:	08015225 	.word	0x08015225
 8015178:	08015225 	.word	0x08015225
 801517c:	08015225 	.word	0x08015225
 8015180:	08015225 	.word	0x08015225
 8015184:	08015225 	.word	0x08015225
 8015188:	08015225 	.word	0x08015225
 801518c:	08015225 	.word	0x08015225
 8015190:	08015225 	.word	0x08015225
 8015194:	080151a5 	.word	0x080151a5
 8015198:	080151df 	.word	0x080151df
 801519c:	08015225 	.word	0x08015225
 80151a0:	08015225 	.word	0x08015225
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 80151a4:	683b      	ldr	r3, [r7, #0]
 80151a6:	781a      	ldrb	r2, [r3, #0]
 80151a8:	4b22      	ldr	r3, [pc, #136]	; (8015234 <CDC_Control_FS+0x140>)
 80151aa:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 80151ac:	683b      	ldr	r3, [r7, #0]
 80151ae:	785a      	ldrb	r2, [r3, #1]
 80151b0:	4b20      	ldr	r3, [pc, #128]	; (8015234 <CDC_Control_FS+0x140>)
 80151b2:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 80151b4:	683b      	ldr	r3, [r7, #0]
 80151b6:	789a      	ldrb	r2, [r3, #2]
 80151b8:	4b1e      	ldr	r3, [pc, #120]	; (8015234 <CDC_Control_FS+0x140>)
 80151ba:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 80151bc:	683b      	ldr	r3, [r7, #0]
 80151be:	78da      	ldrb	r2, [r3, #3]
 80151c0:	4b1c      	ldr	r3, [pc, #112]	; (8015234 <CDC_Control_FS+0x140>)
 80151c2:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 80151c4:	683b      	ldr	r3, [r7, #0]
 80151c6:	791a      	ldrb	r2, [r3, #4]
 80151c8:	4b1a      	ldr	r3, [pc, #104]	; (8015234 <CDC_Control_FS+0x140>)
 80151ca:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 80151cc:	683b      	ldr	r3, [r7, #0]
 80151ce:	795a      	ldrb	r2, [r3, #5]
 80151d0:	4b18      	ldr	r3, [pc, #96]	; (8015234 <CDC_Control_FS+0x140>)
 80151d2:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 80151d4:	683b      	ldr	r3, [r7, #0]
 80151d6:	799a      	ldrb	r2, [r3, #6]
 80151d8:	4b16      	ldr	r3, [pc, #88]	; (8015234 <CDC_Control_FS+0x140>)
 80151da:	719a      	strb	r2, [r3, #6]
    	break;
 80151dc:	e023      	b.n	8015226 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 80151de:	4b15      	ldr	r3, [pc, #84]	; (8015234 <CDC_Control_FS+0x140>)
 80151e0:	781a      	ldrb	r2, [r3, #0]
 80151e2:	683b      	ldr	r3, [r7, #0]
 80151e4:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 80151e6:	683b      	ldr	r3, [r7, #0]
 80151e8:	3301      	adds	r3, #1
 80151ea:	4a12      	ldr	r2, [pc, #72]	; (8015234 <CDC_Control_FS+0x140>)
 80151ec:	7852      	ldrb	r2, [r2, #1]
 80151ee:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 80151f0:	683b      	ldr	r3, [r7, #0]
 80151f2:	3302      	adds	r3, #2
 80151f4:	4a0f      	ldr	r2, [pc, #60]	; (8015234 <CDC_Control_FS+0x140>)
 80151f6:	7892      	ldrb	r2, [r2, #2]
 80151f8:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 80151fa:	683b      	ldr	r3, [r7, #0]
 80151fc:	3303      	adds	r3, #3
 80151fe:	4a0d      	ldr	r2, [pc, #52]	; (8015234 <CDC_Control_FS+0x140>)
 8015200:	78d2      	ldrb	r2, [r2, #3]
 8015202:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 8015204:	683b      	ldr	r3, [r7, #0]
 8015206:	3304      	adds	r3, #4
 8015208:	4a0a      	ldr	r2, [pc, #40]	; (8015234 <CDC_Control_FS+0x140>)
 801520a:	7912      	ldrb	r2, [r2, #4]
 801520c:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 801520e:	683b      	ldr	r3, [r7, #0]
 8015210:	3305      	adds	r3, #5
 8015212:	4a08      	ldr	r2, [pc, #32]	; (8015234 <CDC_Control_FS+0x140>)
 8015214:	7952      	ldrb	r2, [r2, #5]
 8015216:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 8015218:	683b      	ldr	r3, [r7, #0]
 801521a:	3306      	adds	r3, #6
 801521c:	4a05      	ldr	r2, [pc, #20]	; (8015234 <CDC_Control_FS+0x140>)
 801521e:	7992      	ldrb	r2, [r2, #6]
 8015220:	701a      	strb	r2, [r3, #0]
    break;
 8015222:	e000      	b.n	8015226 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015224:	bf00      	nop
  }

  return (USBD_OK);
 8015226:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015228:	4618      	mov	r0, r3
 801522a:	370c      	adds	r7, #12
 801522c:	46bd      	mov	sp, r7
 801522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015232:	4770      	bx	lr
 8015234:	2000655c 	.word	0x2000655c

08015238 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015238:	b580      	push	{r7, lr}
 801523a:	b082      	sub	sp, #8
 801523c:	af00      	add	r7, sp, #0
 801523e:	6078      	str	r0, [r7, #4]
 8015240:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 8015242:	683b      	ldr	r3, [r7, #0]
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	b29b      	uxth	r3, r3
 8015248:	461a      	mov	r2, r3
 801524a:	6879      	ldr	r1, [r7, #4]
 801524c:	4807      	ldr	r0, [pc, #28]	; (801526c <CDC_Receive_FS+0x34>)
 801524e:	f7ee fee4 	bl	800401a <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015252:	6879      	ldr	r1, [r7, #4]
 8015254:	4806      	ldr	r0, [pc, #24]	; (8015270 <CDC_Receive_FS+0x38>)
 8015256:	f7fb ff37 	bl	80110c8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801525a:	4805      	ldr	r0, [pc, #20]	; (8015270 <CDC_Receive_FS+0x38>)
 801525c:	f7fb ff78 	bl	8011150 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015260:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015262:	4618      	mov	r0, r3
 8015264:	3708      	adds	r7, #8
 8015266:	46bd      	mov	sp, r7
 8015268:	bd80      	pop	{r7, pc}
 801526a:	bf00      	nop
 801526c:	20000004 	.word	0x20000004
 8015270:	20005e8c 	.word	0x20005e8c

08015274 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015274:	b580      	push	{r7, lr}
 8015276:	b084      	sub	sp, #16
 8015278:	af00      	add	r7, sp, #0
 801527a:	6078      	str	r0, [r7, #4]
 801527c:	460b      	mov	r3, r1
 801527e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015280:	2300      	movs	r3, #0
 8015282:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015284:	4b0d      	ldr	r3, [pc, #52]	; (80152bc <CDC_Transmit_FS+0x48>)
 8015286:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801528a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801528c:	68bb      	ldr	r3, [r7, #8]
 801528e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015292:	2b00      	cmp	r3, #0
 8015294:	d001      	beq.n	801529a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015296:	2301      	movs	r3, #1
 8015298:	e00b      	b.n	80152b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801529a:	887b      	ldrh	r3, [r7, #2]
 801529c:	461a      	mov	r2, r3
 801529e:	6879      	ldr	r1, [r7, #4]
 80152a0:	4806      	ldr	r0, [pc, #24]	; (80152bc <CDC_Transmit_FS+0x48>)
 80152a2:	f7fb fef8 	bl	8011096 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80152a6:	4805      	ldr	r0, [pc, #20]	; (80152bc <CDC_Transmit_FS+0x48>)
 80152a8:	f7fb ff22 	bl	80110f0 <USBD_CDC_TransmitPacket>
 80152ac:	4603      	mov	r3, r0
 80152ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80152b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80152b2:	4618      	mov	r0, r3
 80152b4:	3710      	adds	r7, #16
 80152b6:	46bd      	mov	sp, r7
 80152b8:	bd80      	pop	{r7, pc}
 80152ba:	bf00      	nop
 80152bc:	20005e8c 	.word	0x20005e8c

080152c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80152c0:	b480      	push	{r7}
 80152c2:	b087      	sub	sp, #28
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	60f8      	str	r0, [r7, #12]
 80152c8:	60b9      	str	r1, [r7, #8]
 80152ca:	4613      	mov	r3, r2
 80152cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80152ce:	2300      	movs	r3, #0
 80152d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80152d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80152d6:	4618      	mov	r0, r3
 80152d8:	371c      	adds	r7, #28
 80152da:	46bd      	mov	sp, r7
 80152dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e0:	4770      	bx	lr
	...

080152e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152e4:	b480      	push	{r7}
 80152e6:	b083      	sub	sp, #12
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	4603      	mov	r3, r0
 80152ec:	6039      	str	r1, [r7, #0]
 80152ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80152f0:	683b      	ldr	r3, [r7, #0]
 80152f2:	2212      	movs	r2, #18
 80152f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80152f6:	4b03      	ldr	r3, [pc, #12]	; (8015304 <USBD_FS_DeviceDescriptor+0x20>)
}
 80152f8:	4618      	mov	r0, r3
 80152fa:	370c      	adds	r7, #12
 80152fc:	46bd      	mov	sp, r7
 80152fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015302:	4770      	bx	lr
 8015304:	20000978 	.word	0x20000978

08015308 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015308:	b480      	push	{r7}
 801530a:	b083      	sub	sp, #12
 801530c:	af00      	add	r7, sp, #0
 801530e:	4603      	mov	r3, r0
 8015310:	6039      	str	r1, [r7, #0]
 8015312:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015314:	683b      	ldr	r3, [r7, #0]
 8015316:	2204      	movs	r2, #4
 8015318:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801531a:	4b03      	ldr	r3, [pc, #12]	; (8015328 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801531c:	4618      	mov	r0, r3
 801531e:	370c      	adds	r7, #12
 8015320:	46bd      	mov	sp, r7
 8015322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015326:	4770      	bx	lr
 8015328:	2000098c 	.word	0x2000098c

0801532c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801532c:	b580      	push	{r7, lr}
 801532e:	b082      	sub	sp, #8
 8015330:	af00      	add	r7, sp, #0
 8015332:	4603      	mov	r3, r0
 8015334:	6039      	str	r1, [r7, #0]
 8015336:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015338:	79fb      	ldrb	r3, [r7, #7]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d105      	bne.n	801534a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801533e:	683a      	ldr	r2, [r7, #0]
 8015340:	4907      	ldr	r1, [pc, #28]	; (8015360 <USBD_FS_ProductStrDescriptor+0x34>)
 8015342:	4808      	ldr	r0, [pc, #32]	; (8015364 <USBD_FS_ProductStrDescriptor+0x38>)
 8015344:	f7fc ff53 	bl	80121ee <USBD_GetString>
 8015348:	e004      	b.n	8015354 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801534a:	683a      	ldr	r2, [r7, #0]
 801534c:	4904      	ldr	r1, [pc, #16]	; (8015360 <USBD_FS_ProductStrDescriptor+0x34>)
 801534e:	4805      	ldr	r0, [pc, #20]	; (8015364 <USBD_FS_ProductStrDescriptor+0x38>)
 8015350:	f7fc ff4d 	bl	80121ee <USBD_GetString>
  }
  return USBD_StrDesc;
 8015354:	4b02      	ldr	r3, [pc, #8]	; (8015360 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015356:	4618      	mov	r0, r3
 8015358:	3708      	adds	r7, #8
 801535a:	46bd      	mov	sp, r7
 801535c:	bd80      	pop	{r7, pc}
 801535e:	bf00      	nop
 8015360:	20006564 	.word	0x20006564
 8015364:	0801b23c 	.word	0x0801b23c

08015368 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015368:	b580      	push	{r7, lr}
 801536a:	b082      	sub	sp, #8
 801536c:	af00      	add	r7, sp, #0
 801536e:	4603      	mov	r3, r0
 8015370:	6039      	str	r1, [r7, #0]
 8015372:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015374:	683a      	ldr	r2, [r7, #0]
 8015376:	4904      	ldr	r1, [pc, #16]	; (8015388 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015378:	4804      	ldr	r0, [pc, #16]	; (801538c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801537a:	f7fc ff38 	bl	80121ee <USBD_GetString>
  return USBD_StrDesc;
 801537e:	4b02      	ldr	r3, [pc, #8]	; (8015388 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015380:	4618      	mov	r0, r3
 8015382:	3708      	adds	r7, #8
 8015384:	46bd      	mov	sp, r7
 8015386:	bd80      	pop	{r7, pc}
 8015388:	20006564 	.word	0x20006564
 801538c:	0801b254 	.word	0x0801b254

08015390 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015390:	b580      	push	{r7, lr}
 8015392:	b082      	sub	sp, #8
 8015394:	af00      	add	r7, sp, #0
 8015396:	4603      	mov	r3, r0
 8015398:	6039      	str	r1, [r7, #0]
 801539a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801539c:	683b      	ldr	r3, [r7, #0]
 801539e:	221a      	movs	r2, #26
 80153a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80153a2:	f000 f843 	bl	801542c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80153a6:	4b02      	ldr	r3, [pc, #8]	; (80153b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80153a8:	4618      	mov	r0, r3
 80153aa:	3708      	adds	r7, #8
 80153ac:	46bd      	mov	sp, r7
 80153ae:	bd80      	pop	{r7, pc}
 80153b0:	20000990 	.word	0x20000990

080153b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153b4:	b580      	push	{r7, lr}
 80153b6:	b082      	sub	sp, #8
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	4603      	mov	r3, r0
 80153bc:	6039      	str	r1, [r7, #0]
 80153be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80153c0:	79fb      	ldrb	r3, [r7, #7]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d105      	bne.n	80153d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80153c6:	683a      	ldr	r2, [r7, #0]
 80153c8:	4907      	ldr	r1, [pc, #28]	; (80153e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80153ca:	4808      	ldr	r0, [pc, #32]	; (80153ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80153cc:	f7fc ff0f 	bl	80121ee <USBD_GetString>
 80153d0:	e004      	b.n	80153dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80153d2:	683a      	ldr	r2, [r7, #0]
 80153d4:	4904      	ldr	r1, [pc, #16]	; (80153e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80153d6:	4805      	ldr	r0, [pc, #20]	; (80153ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80153d8:	f7fc ff09 	bl	80121ee <USBD_GetString>
  }
  return USBD_StrDesc;
 80153dc:	4b02      	ldr	r3, [pc, #8]	; (80153e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80153de:	4618      	mov	r0, r3
 80153e0:	3708      	adds	r7, #8
 80153e2:	46bd      	mov	sp, r7
 80153e4:	bd80      	pop	{r7, pc}
 80153e6:	bf00      	nop
 80153e8:	20006564 	.word	0x20006564
 80153ec:	0801b268 	.word	0x0801b268

080153f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b082      	sub	sp, #8
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	4603      	mov	r3, r0
 80153f8:	6039      	str	r1, [r7, #0]
 80153fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80153fc:	79fb      	ldrb	r3, [r7, #7]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d105      	bne.n	801540e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015402:	683a      	ldr	r2, [r7, #0]
 8015404:	4907      	ldr	r1, [pc, #28]	; (8015424 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015406:	4808      	ldr	r0, [pc, #32]	; (8015428 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015408:	f7fc fef1 	bl	80121ee <USBD_GetString>
 801540c:	e004      	b.n	8015418 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801540e:	683a      	ldr	r2, [r7, #0]
 8015410:	4904      	ldr	r1, [pc, #16]	; (8015424 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015412:	4805      	ldr	r0, [pc, #20]	; (8015428 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015414:	f7fc feeb 	bl	80121ee <USBD_GetString>
  }
  return USBD_StrDesc;
 8015418:	4b02      	ldr	r3, [pc, #8]	; (8015424 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801541a:	4618      	mov	r0, r3
 801541c:	3708      	adds	r7, #8
 801541e:	46bd      	mov	sp, r7
 8015420:	bd80      	pop	{r7, pc}
 8015422:	bf00      	nop
 8015424:	20006564 	.word	0x20006564
 8015428:	0801b274 	.word	0x0801b274

0801542c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801542c:	b580      	push	{r7, lr}
 801542e:	b084      	sub	sp, #16
 8015430:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015432:	4b0f      	ldr	r3, [pc, #60]	; (8015470 <Get_SerialNum+0x44>)
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015438:	4b0e      	ldr	r3, [pc, #56]	; (8015474 <Get_SerialNum+0x48>)
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801543e:	4b0e      	ldr	r3, [pc, #56]	; (8015478 <Get_SerialNum+0x4c>)
 8015440:	681b      	ldr	r3, [r3, #0]
 8015442:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015444:	68fa      	ldr	r2, [r7, #12]
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	4413      	add	r3, r2
 801544a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	2b00      	cmp	r3, #0
 8015450:	d009      	beq.n	8015466 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015452:	2208      	movs	r2, #8
 8015454:	4909      	ldr	r1, [pc, #36]	; (801547c <Get_SerialNum+0x50>)
 8015456:	68f8      	ldr	r0, [r7, #12]
 8015458:	f000 f814 	bl	8015484 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801545c:	2204      	movs	r2, #4
 801545e:	4908      	ldr	r1, [pc, #32]	; (8015480 <Get_SerialNum+0x54>)
 8015460:	68b8      	ldr	r0, [r7, #8]
 8015462:	f000 f80f 	bl	8015484 <IntToUnicode>
  }
}
 8015466:	bf00      	nop
 8015468:	3710      	adds	r7, #16
 801546a:	46bd      	mov	sp, r7
 801546c:	bd80      	pop	{r7, pc}
 801546e:	bf00      	nop
 8015470:	1fff7a10 	.word	0x1fff7a10
 8015474:	1fff7a14 	.word	0x1fff7a14
 8015478:	1fff7a18 	.word	0x1fff7a18
 801547c:	20000992 	.word	0x20000992
 8015480:	200009a2 	.word	0x200009a2

08015484 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015484:	b480      	push	{r7}
 8015486:	b087      	sub	sp, #28
 8015488:	af00      	add	r7, sp, #0
 801548a:	60f8      	str	r0, [r7, #12]
 801548c:	60b9      	str	r1, [r7, #8]
 801548e:	4613      	mov	r3, r2
 8015490:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015492:	2300      	movs	r3, #0
 8015494:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015496:	2300      	movs	r3, #0
 8015498:	75fb      	strb	r3, [r7, #23]
 801549a:	e027      	b.n	80154ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	0f1b      	lsrs	r3, r3, #28
 80154a0:	2b09      	cmp	r3, #9
 80154a2:	d80b      	bhi.n	80154bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	0f1b      	lsrs	r3, r3, #28
 80154a8:	b2da      	uxtb	r2, r3
 80154aa:	7dfb      	ldrb	r3, [r7, #23]
 80154ac:	005b      	lsls	r3, r3, #1
 80154ae:	4619      	mov	r1, r3
 80154b0:	68bb      	ldr	r3, [r7, #8]
 80154b2:	440b      	add	r3, r1
 80154b4:	3230      	adds	r2, #48	; 0x30
 80154b6:	b2d2      	uxtb	r2, r2
 80154b8:	701a      	strb	r2, [r3, #0]
 80154ba:	e00a      	b.n	80154d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	0f1b      	lsrs	r3, r3, #28
 80154c0:	b2da      	uxtb	r2, r3
 80154c2:	7dfb      	ldrb	r3, [r7, #23]
 80154c4:	005b      	lsls	r3, r3, #1
 80154c6:	4619      	mov	r1, r3
 80154c8:	68bb      	ldr	r3, [r7, #8]
 80154ca:	440b      	add	r3, r1
 80154cc:	3237      	adds	r2, #55	; 0x37
 80154ce:	b2d2      	uxtb	r2, r2
 80154d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	011b      	lsls	r3, r3, #4
 80154d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80154d8:	7dfb      	ldrb	r3, [r7, #23]
 80154da:	005b      	lsls	r3, r3, #1
 80154dc:	3301      	adds	r3, #1
 80154de:	68ba      	ldr	r2, [r7, #8]
 80154e0:	4413      	add	r3, r2
 80154e2:	2200      	movs	r2, #0
 80154e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80154e6:	7dfb      	ldrb	r3, [r7, #23]
 80154e8:	3301      	adds	r3, #1
 80154ea:	75fb      	strb	r3, [r7, #23]
 80154ec:	7dfa      	ldrb	r2, [r7, #23]
 80154ee:	79fb      	ldrb	r3, [r7, #7]
 80154f0:	429a      	cmp	r2, r3
 80154f2:	d3d3      	bcc.n	801549c <IntToUnicode+0x18>
  }
}
 80154f4:	bf00      	nop
 80154f6:	371c      	adds	r7, #28
 80154f8:	46bd      	mov	sp, r7
 80154fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154fe:	4770      	bx	lr

08015500 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015500:	b580      	push	{r7, lr}
 8015502:	b08a      	sub	sp, #40	; 0x28
 8015504:	af00      	add	r7, sp, #0
 8015506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015508:	f107 0314 	add.w	r3, r7, #20
 801550c:	2200      	movs	r2, #0
 801550e:	601a      	str	r2, [r3, #0]
 8015510:	605a      	str	r2, [r3, #4]
 8015512:	609a      	str	r2, [r3, #8]
 8015514:	60da      	str	r2, [r3, #12]
 8015516:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015520:	d13a      	bne.n	8015598 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015522:	2300      	movs	r3, #0
 8015524:	613b      	str	r3, [r7, #16]
 8015526:	4b1e      	ldr	r3, [pc, #120]	; (80155a0 <HAL_PCD_MspInit+0xa0>)
 8015528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801552a:	4a1d      	ldr	r2, [pc, #116]	; (80155a0 <HAL_PCD_MspInit+0xa0>)
 801552c:	f043 0301 	orr.w	r3, r3, #1
 8015530:	6313      	str	r3, [r2, #48]	; 0x30
 8015532:	4b1b      	ldr	r3, [pc, #108]	; (80155a0 <HAL_PCD_MspInit+0xa0>)
 8015534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015536:	f003 0301 	and.w	r3, r3, #1
 801553a:	613b      	str	r3, [r7, #16]
 801553c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801553e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015544:	2302      	movs	r3, #2
 8015546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015548:	2300      	movs	r3, #0
 801554a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801554c:	2303      	movs	r3, #3
 801554e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015550:	230a      	movs	r3, #10
 8015552:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015554:	f107 0314 	add.w	r3, r7, #20
 8015558:	4619      	mov	r1, r3
 801555a:	4812      	ldr	r0, [pc, #72]	; (80155a4 <HAL_PCD_MspInit+0xa4>)
 801555c:	f7f6 fbf8 	bl	800bd50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015560:	4b0f      	ldr	r3, [pc, #60]	; (80155a0 <HAL_PCD_MspInit+0xa0>)
 8015562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015564:	4a0e      	ldr	r2, [pc, #56]	; (80155a0 <HAL_PCD_MspInit+0xa0>)
 8015566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801556a:	6353      	str	r3, [r2, #52]	; 0x34
 801556c:	2300      	movs	r3, #0
 801556e:	60fb      	str	r3, [r7, #12]
 8015570:	4b0b      	ldr	r3, [pc, #44]	; (80155a0 <HAL_PCD_MspInit+0xa0>)
 8015572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015574:	4a0a      	ldr	r2, [pc, #40]	; (80155a0 <HAL_PCD_MspInit+0xa0>)
 8015576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801557a:	6453      	str	r3, [r2, #68]	; 0x44
 801557c:	4b08      	ldr	r3, [pc, #32]	; (80155a0 <HAL_PCD_MspInit+0xa0>)
 801557e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015584:	60fb      	str	r3, [r7, #12]
 8015586:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015588:	2200      	movs	r2, #0
 801558a:	2105      	movs	r1, #5
 801558c:	2043      	movs	r0, #67	; 0x43
 801558e:	f7f6 f817 	bl	800b5c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015592:	2043      	movs	r0, #67	; 0x43
 8015594:	f7f6 f830 	bl	800b5f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015598:	bf00      	nop
 801559a:	3728      	adds	r7, #40	; 0x28
 801559c:	46bd      	mov	sp, r7
 801559e:	bd80      	pop	{r7, pc}
 80155a0:	40023800 	.word	0x40023800
 80155a4:	40020000 	.word	0x40020000

080155a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b082      	sub	sp, #8
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80155bc:	4619      	mov	r1, r3
 80155be:	4610      	mov	r0, r2
 80155c0:	f7fb fe92 	bl	80112e8 <USBD_LL_SetupStage>
}
 80155c4:	bf00      	nop
 80155c6:	3708      	adds	r7, #8
 80155c8:	46bd      	mov	sp, r7
 80155ca:	bd80      	pop	{r7, pc}

080155cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155cc:	b580      	push	{r7, lr}
 80155ce:	b082      	sub	sp, #8
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	6078      	str	r0, [r7, #4]
 80155d4:	460b      	mov	r3, r1
 80155d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80155de:	78fa      	ldrb	r2, [r7, #3]
 80155e0:	6879      	ldr	r1, [r7, #4]
 80155e2:	4613      	mov	r3, r2
 80155e4:	00db      	lsls	r3, r3, #3
 80155e6:	1a9b      	subs	r3, r3, r2
 80155e8:	009b      	lsls	r3, r3, #2
 80155ea:	440b      	add	r3, r1
 80155ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80155f0:	681a      	ldr	r2, [r3, #0]
 80155f2:	78fb      	ldrb	r3, [r7, #3]
 80155f4:	4619      	mov	r1, r3
 80155f6:	f7fb feca 	bl	801138e <USBD_LL_DataOutStage>
}
 80155fa:	bf00      	nop
 80155fc:	3708      	adds	r7, #8
 80155fe:	46bd      	mov	sp, r7
 8015600:	bd80      	pop	{r7, pc}

08015602 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015602:	b580      	push	{r7, lr}
 8015604:	b082      	sub	sp, #8
 8015606:	af00      	add	r7, sp, #0
 8015608:	6078      	str	r0, [r7, #4]
 801560a:	460b      	mov	r3, r1
 801560c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015614:	78fa      	ldrb	r2, [r7, #3]
 8015616:	6879      	ldr	r1, [r7, #4]
 8015618:	4613      	mov	r3, r2
 801561a:	00db      	lsls	r3, r3, #3
 801561c:	1a9b      	subs	r3, r3, r2
 801561e:	009b      	lsls	r3, r3, #2
 8015620:	440b      	add	r3, r1
 8015622:	3348      	adds	r3, #72	; 0x48
 8015624:	681a      	ldr	r2, [r3, #0]
 8015626:	78fb      	ldrb	r3, [r7, #3]
 8015628:	4619      	mov	r1, r3
 801562a:	f7fb ff13 	bl	8011454 <USBD_LL_DataInStage>
}
 801562e:	bf00      	nop
 8015630:	3708      	adds	r7, #8
 8015632:	46bd      	mov	sp, r7
 8015634:	bd80      	pop	{r7, pc}

08015636 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015636:	b580      	push	{r7, lr}
 8015638:	b082      	sub	sp, #8
 801563a:	af00      	add	r7, sp, #0
 801563c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015644:	4618      	mov	r0, r3
 8015646:	f7fc f817 	bl	8011678 <USBD_LL_SOF>
}
 801564a:	bf00      	nop
 801564c:	3708      	adds	r7, #8
 801564e:	46bd      	mov	sp, r7
 8015650:	bd80      	pop	{r7, pc}

08015652 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015652:	b580      	push	{r7, lr}
 8015654:	b084      	sub	sp, #16
 8015656:	af00      	add	r7, sp, #0
 8015658:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801565a:	2301      	movs	r3, #1
 801565c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	68db      	ldr	r3, [r3, #12]
 8015662:	2b00      	cmp	r3, #0
 8015664:	d102      	bne.n	801566c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015666:	2300      	movs	r3, #0
 8015668:	73fb      	strb	r3, [r7, #15]
 801566a:	e008      	b.n	801567e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	68db      	ldr	r3, [r3, #12]
 8015670:	2b02      	cmp	r3, #2
 8015672:	d102      	bne.n	801567a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015674:	2301      	movs	r3, #1
 8015676:	73fb      	strb	r3, [r7, #15]
 8015678:	e001      	b.n	801567e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801567a:	f7ee fc57 	bl	8003f2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015684:	7bfa      	ldrb	r2, [r7, #15]
 8015686:	4611      	mov	r1, r2
 8015688:	4618      	mov	r0, r3
 801568a:	f7fb ffba 	bl	8011602 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015694:	4618      	mov	r0, r3
 8015696:	f7fb ff73 	bl	8011580 <USBD_LL_Reset>
}
 801569a:	bf00      	nop
 801569c:	3710      	adds	r7, #16
 801569e:	46bd      	mov	sp, r7
 80156a0:	bd80      	pop	{r7, pc}
	...

080156a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b082      	sub	sp, #8
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80156b2:	4618      	mov	r0, r3
 80156b4:	f7fb ffb5 	bl	8011622 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	687a      	ldr	r2, [r7, #4]
 80156c4:	6812      	ldr	r2, [r2, #0]
 80156c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80156ca:	f043 0301 	orr.w	r3, r3, #1
 80156ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	6a1b      	ldr	r3, [r3, #32]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d005      	beq.n	80156e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80156d8:	4b04      	ldr	r3, [pc, #16]	; (80156ec <HAL_PCD_SuspendCallback+0x48>)
 80156da:	691b      	ldr	r3, [r3, #16]
 80156dc:	4a03      	ldr	r2, [pc, #12]	; (80156ec <HAL_PCD_SuspendCallback+0x48>)
 80156de:	f043 0306 	orr.w	r3, r3, #6
 80156e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80156e4:	bf00      	nop
 80156e6:	3708      	adds	r7, #8
 80156e8:	46bd      	mov	sp, r7
 80156ea:	bd80      	pop	{r7, pc}
 80156ec:	e000ed00 	.word	0xe000ed00

080156f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b082      	sub	sp, #8
 80156f4:	af00      	add	r7, sp, #0
 80156f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80156fe:	4618      	mov	r0, r3
 8015700:	f7fb ffa4 	bl	801164c <USBD_LL_Resume>
}
 8015704:	bf00      	nop
 8015706:	3708      	adds	r7, #8
 8015708:	46bd      	mov	sp, r7
 801570a:	bd80      	pop	{r7, pc}

0801570c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801570c:	b580      	push	{r7, lr}
 801570e:	b082      	sub	sp, #8
 8015710:	af00      	add	r7, sp, #0
 8015712:	6078      	str	r0, [r7, #4]
 8015714:	460b      	mov	r3, r1
 8015716:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801571e:	78fa      	ldrb	r2, [r7, #3]
 8015720:	4611      	mov	r1, r2
 8015722:	4618      	mov	r0, r3
 8015724:	f7fb ffcf 	bl	80116c6 <USBD_LL_IsoOUTIncomplete>
}
 8015728:	bf00      	nop
 801572a:	3708      	adds	r7, #8
 801572c:	46bd      	mov	sp, r7
 801572e:	bd80      	pop	{r7, pc}

08015730 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b082      	sub	sp, #8
 8015734:	af00      	add	r7, sp, #0
 8015736:	6078      	str	r0, [r7, #4]
 8015738:	460b      	mov	r3, r1
 801573a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015742:	78fa      	ldrb	r2, [r7, #3]
 8015744:	4611      	mov	r1, r2
 8015746:	4618      	mov	r0, r3
 8015748:	f7fb ffb0 	bl	80116ac <USBD_LL_IsoINIncomplete>
}
 801574c:	bf00      	nop
 801574e:	3708      	adds	r7, #8
 8015750:	46bd      	mov	sp, r7
 8015752:	bd80      	pop	{r7, pc}

08015754 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015754:	b580      	push	{r7, lr}
 8015756:	b082      	sub	sp, #8
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015762:	4618      	mov	r0, r3
 8015764:	f7fb ffbc 	bl	80116e0 <USBD_LL_DevConnected>
}
 8015768:	bf00      	nop
 801576a:	3708      	adds	r7, #8
 801576c:	46bd      	mov	sp, r7
 801576e:	bd80      	pop	{r7, pc}

08015770 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015770:	b580      	push	{r7, lr}
 8015772:	b082      	sub	sp, #8
 8015774:	af00      	add	r7, sp, #0
 8015776:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801577e:	4618      	mov	r0, r3
 8015780:	f7fb ffb9 	bl	80116f6 <USBD_LL_DevDisconnected>
}
 8015784:	bf00      	nop
 8015786:	3708      	adds	r7, #8
 8015788:	46bd      	mov	sp, r7
 801578a:	bd80      	pop	{r7, pc}

0801578c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801578c:	b580      	push	{r7, lr}
 801578e:	b082      	sub	sp, #8
 8015790:	af00      	add	r7, sp, #0
 8015792:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	781b      	ldrb	r3, [r3, #0]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d13c      	bne.n	8015816 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801579c:	4a20      	ldr	r2, [pc, #128]	; (8015820 <USBD_LL_Init+0x94>)
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	4a1e      	ldr	r2, [pc, #120]	; (8015820 <USBD_LL_Init+0x94>)
 80157a8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80157ac:	4b1c      	ldr	r3, [pc, #112]	; (8015820 <USBD_LL_Init+0x94>)
 80157ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80157b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80157b4:	4b1a      	ldr	r3, [pc, #104]	; (8015820 <USBD_LL_Init+0x94>)
 80157b6:	2204      	movs	r2, #4
 80157b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80157ba:	4b19      	ldr	r3, [pc, #100]	; (8015820 <USBD_LL_Init+0x94>)
 80157bc:	2202      	movs	r2, #2
 80157be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80157c0:	4b17      	ldr	r3, [pc, #92]	; (8015820 <USBD_LL_Init+0x94>)
 80157c2:	2200      	movs	r2, #0
 80157c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80157c6:	4b16      	ldr	r3, [pc, #88]	; (8015820 <USBD_LL_Init+0x94>)
 80157c8:	2202      	movs	r2, #2
 80157ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80157cc:	4b14      	ldr	r3, [pc, #80]	; (8015820 <USBD_LL_Init+0x94>)
 80157ce:	2200      	movs	r2, #0
 80157d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80157d2:	4b13      	ldr	r3, [pc, #76]	; (8015820 <USBD_LL_Init+0x94>)
 80157d4:	2200      	movs	r2, #0
 80157d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80157d8:	4b11      	ldr	r3, [pc, #68]	; (8015820 <USBD_LL_Init+0x94>)
 80157da:	2200      	movs	r2, #0
 80157dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80157de:	4b10      	ldr	r3, [pc, #64]	; (8015820 <USBD_LL_Init+0x94>)
 80157e0:	2200      	movs	r2, #0
 80157e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80157e4:	4b0e      	ldr	r3, [pc, #56]	; (8015820 <USBD_LL_Init+0x94>)
 80157e6:	2200      	movs	r2, #0
 80157e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80157ea:	480d      	ldr	r0, [pc, #52]	; (8015820 <USBD_LL_Init+0x94>)
 80157ec:	f7f6 fcba 	bl	800c164 <HAL_PCD_Init>
 80157f0:	4603      	mov	r3, r0
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d001      	beq.n	80157fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80157f6:	f7ee fb99 	bl	8003f2c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80157fa:	2180      	movs	r1, #128	; 0x80
 80157fc:	4808      	ldr	r0, [pc, #32]	; (8015820 <USBD_LL_Init+0x94>)
 80157fe:	f7f7 fe18 	bl	800d432 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015802:	2240      	movs	r2, #64	; 0x40
 8015804:	2100      	movs	r1, #0
 8015806:	4806      	ldr	r0, [pc, #24]	; (8015820 <USBD_LL_Init+0x94>)
 8015808:	f7f7 fdcc 	bl	800d3a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801580c:	2280      	movs	r2, #128	; 0x80
 801580e:	2101      	movs	r1, #1
 8015810:	4803      	ldr	r0, [pc, #12]	; (8015820 <USBD_LL_Init+0x94>)
 8015812:	f7f7 fdc7 	bl	800d3a4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015816:	2300      	movs	r3, #0
}
 8015818:	4618      	mov	r0, r3
 801581a:	3708      	adds	r7, #8
 801581c:	46bd      	mov	sp, r7
 801581e:	bd80      	pop	{r7, pc}
 8015820:	20006764 	.word	0x20006764

08015824 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b084      	sub	sp, #16
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801582c:	2300      	movs	r3, #0
 801582e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015830:	2300      	movs	r3, #0
 8015832:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801583a:	4618      	mov	r0, r3
 801583c:	f7f6 fdaf 	bl	800c39e <HAL_PCD_Start>
 8015840:	4603      	mov	r3, r0
 8015842:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015844:	7bfb      	ldrb	r3, [r7, #15]
 8015846:	4618      	mov	r0, r3
 8015848:	f000 f92a 	bl	8015aa0 <USBD_Get_USB_Status>
 801584c:	4603      	mov	r3, r0
 801584e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015850:	7bbb      	ldrb	r3, [r7, #14]
}
 8015852:	4618      	mov	r0, r3
 8015854:	3710      	adds	r7, #16
 8015856:	46bd      	mov	sp, r7
 8015858:	bd80      	pop	{r7, pc}

0801585a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801585a:	b580      	push	{r7, lr}
 801585c:	b084      	sub	sp, #16
 801585e:	af00      	add	r7, sp, #0
 8015860:	6078      	str	r0, [r7, #4]
 8015862:	4608      	mov	r0, r1
 8015864:	4611      	mov	r1, r2
 8015866:	461a      	mov	r2, r3
 8015868:	4603      	mov	r3, r0
 801586a:	70fb      	strb	r3, [r7, #3]
 801586c:	460b      	mov	r3, r1
 801586e:	70bb      	strb	r3, [r7, #2]
 8015870:	4613      	mov	r3, r2
 8015872:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015874:	2300      	movs	r3, #0
 8015876:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015878:	2300      	movs	r3, #0
 801587a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015882:	78bb      	ldrb	r3, [r7, #2]
 8015884:	883a      	ldrh	r2, [r7, #0]
 8015886:	78f9      	ldrb	r1, [r7, #3]
 8015888:	f7f7 f993 	bl	800cbb2 <HAL_PCD_EP_Open>
 801588c:	4603      	mov	r3, r0
 801588e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015890:	7bfb      	ldrb	r3, [r7, #15]
 8015892:	4618      	mov	r0, r3
 8015894:	f000 f904 	bl	8015aa0 <USBD_Get_USB_Status>
 8015898:	4603      	mov	r3, r0
 801589a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801589c:	7bbb      	ldrb	r3, [r7, #14]
}
 801589e:	4618      	mov	r0, r3
 80158a0:	3710      	adds	r7, #16
 80158a2:	46bd      	mov	sp, r7
 80158a4:	bd80      	pop	{r7, pc}

080158a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80158a6:	b580      	push	{r7, lr}
 80158a8:	b084      	sub	sp, #16
 80158aa:	af00      	add	r7, sp, #0
 80158ac:	6078      	str	r0, [r7, #4]
 80158ae:	460b      	mov	r3, r1
 80158b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80158b2:	2300      	movs	r3, #0
 80158b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80158b6:	2300      	movs	r3, #0
 80158b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80158c0:	78fa      	ldrb	r2, [r7, #3]
 80158c2:	4611      	mov	r1, r2
 80158c4:	4618      	mov	r0, r3
 80158c6:	f7f7 f9dc 	bl	800cc82 <HAL_PCD_EP_Close>
 80158ca:	4603      	mov	r3, r0
 80158cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80158ce:	7bfb      	ldrb	r3, [r7, #15]
 80158d0:	4618      	mov	r0, r3
 80158d2:	f000 f8e5 	bl	8015aa0 <USBD_Get_USB_Status>
 80158d6:	4603      	mov	r3, r0
 80158d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80158da:	7bbb      	ldrb	r3, [r7, #14]
}
 80158dc:	4618      	mov	r0, r3
 80158de:	3710      	adds	r7, #16
 80158e0:	46bd      	mov	sp, r7
 80158e2:	bd80      	pop	{r7, pc}

080158e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80158e4:	b580      	push	{r7, lr}
 80158e6:	b084      	sub	sp, #16
 80158e8:	af00      	add	r7, sp, #0
 80158ea:	6078      	str	r0, [r7, #4]
 80158ec:	460b      	mov	r3, r1
 80158ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80158f0:	2300      	movs	r3, #0
 80158f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80158f4:	2300      	movs	r3, #0
 80158f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80158fe:	78fa      	ldrb	r2, [r7, #3]
 8015900:	4611      	mov	r1, r2
 8015902:	4618      	mov	r0, r3
 8015904:	f7f7 fab4 	bl	800ce70 <HAL_PCD_EP_SetStall>
 8015908:	4603      	mov	r3, r0
 801590a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801590c:	7bfb      	ldrb	r3, [r7, #15]
 801590e:	4618      	mov	r0, r3
 8015910:	f000 f8c6 	bl	8015aa0 <USBD_Get_USB_Status>
 8015914:	4603      	mov	r3, r0
 8015916:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015918:	7bbb      	ldrb	r3, [r7, #14]
}
 801591a:	4618      	mov	r0, r3
 801591c:	3710      	adds	r7, #16
 801591e:	46bd      	mov	sp, r7
 8015920:	bd80      	pop	{r7, pc}

08015922 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015922:	b580      	push	{r7, lr}
 8015924:	b084      	sub	sp, #16
 8015926:	af00      	add	r7, sp, #0
 8015928:	6078      	str	r0, [r7, #4]
 801592a:	460b      	mov	r3, r1
 801592c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801592e:	2300      	movs	r3, #0
 8015930:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015932:	2300      	movs	r3, #0
 8015934:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801593c:	78fa      	ldrb	r2, [r7, #3]
 801593e:	4611      	mov	r1, r2
 8015940:	4618      	mov	r0, r3
 8015942:	f7f7 faf9 	bl	800cf38 <HAL_PCD_EP_ClrStall>
 8015946:	4603      	mov	r3, r0
 8015948:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801594a:	7bfb      	ldrb	r3, [r7, #15]
 801594c:	4618      	mov	r0, r3
 801594e:	f000 f8a7 	bl	8015aa0 <USBD_Get_USB_Status>
 8015952:	4603      	mov	r3, r0
 8015954:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015956:	7bbb      	ldrb	r3, [r7, #14]
}
 8015958:	4618      	mov	r0, r3
 801595a:	3710      	adds	r7, #16
 801595c:	46bd      	mov	sp, r7
 801595e:	bd80      	pop	{r7, pc}

08015960 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015960:	b480      	push	{r7}
 8015962:	b085      	sub	sp, #20
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
 8015968:	460b      	mov	r3, r1
 801596a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015972:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015974:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015978:	2b00      	cmp	r3, #0
 801597a:	da0b      	bge.n	8015994 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801597c:	78fb      	ldrb	r3, [r7, #3]
 801597e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015982:	68f9      	ldr	r1, [r7, #12]
 8015984:	4613      	mov	r3, r2
 8015986:	00db      	lsls	r3, r3, #3
 8015988:	1a9b      	subs	r3, r3, r2
 801598a:	009b      	lsls	r3, r3, #2
 801598c:	440b      	add	r3, r1
 801598e:	333e      	adds	r3, #62	; 0x3e
 8015990:	781b      	ldrb	r3, [r3, #0]
 8015992:	e00b      	b.n	80159ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015994:	78fb      	ldrb	r3, [r7, #3]
 8015996:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801599a:	68f9      	ldr	r1, [r7, #12]
 801599c:	4613      	mov	r3, r2
 801599e:	00db      	lsls	r3, r3, #3
 80159a0:	1a9b      	subs	r3, r3, r2
 80159a2:	009b      	lsls	r3, r3, #2
 80159a4:	440b      	add	r3, r1
 80159a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80159aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80159ac:	4618      	mov	r0, r3
 80159ae:	3714      	adds	r7, #20
 80159b0:	46bd      	mov	sp, r7
 80159b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159b6:	4770      	bx	lr

080159b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80159b8:	b580      	push	{r7, lr}
 80159ba:	b084      	sub	sp, #16
 80159bc:	af00      	add	r7, sp, #0
 80159be:	6078      	str	r0, [r7, #4]
 80159c0:	460b      	mov	r3, r1
 80159c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159c4:	2300      	movs	r3, #0
 80159c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159c8:	2300      	movs	r3, #0
 80159ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80159d2:	78fa      	ldrb	r2, [r7, #3]
 80159d4:	4611      	mov	r1, r2
 80159d6:	4618      	mov	r0, r3
 80159d8:	f7f7 f8c6 	bl	800cb68 <HAL_PCD_SetAddress>
 80159dc:	4603      	mov	r3, r0
 80159de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159e0:	7bfb      	ldrb	r3, [r7, #15]
 80159e2:	4618      	mov	r0, r3
 80159e4:	f000 f85c 	bl	8015aa0 <USBD_Get_USB_Status>
 80159e8:	4603      	mov	r3, r0
 80159ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80159ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80159ee:	4618      	mov	r0, r3
 80159f0:	3710      	adds	r7, #16
 80159f2:	46bd      	mov	sp, r7
 80159f4:	bd80      	pop	{r7, pc}

080159f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80159f6:	b580      	push	{r7, lr}
 80159f8:	b086      	sub	sp, #24
 80159fa:	af00      	add	r7, sp, #0
 80159fc:	60f8      	str	r0, [r7, #12]
 80159fe:	607a      	str	r2, [r7, #4]
 8015a00:	603b      	str	r3, [r7, #0]
 8015a02:	460b      	mov	r3, r1
 8015a04:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a06:	2300      	movs	r3, #0
 8015a08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a0a:	2300      	movs	r3, #0
 8015a0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015a14:	7af9      	ldrb	r1, [r7, #11]
 8015a16:	683b      	ldr	r3, [r7, #0]
 8015a18:	687a      	ldr	r2, [r7, #4]
 8015a1a:	f7f7 f9df 	bl	800cddc <HAL_PCD_EP_Transmit>
 8015a1e:	4603      	mov	r3, r0
 8015a20:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a22:	7dfb      	ldrb	r3, [r7, #23]
 8015a24:	4618      	mov	r0, r3
 8015a26:	f000 f83b 	bl	8015aa0 <USBD_Get_USB_Status>
 8015a2a:	4603      	mov	r3, r0
 8015a2c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015a2e:	7dbb      	ldrb	r3, [r7, #22]
}
 8015a30:	4618      	mov	r0, r3
 8015a32:	3718      	adds	r7, #24
 8015a34:	46bd      	mov	sp, r7
 8015a36:	bd80      	pop	{r7, pc}

08015a38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015a38:	b580      	push	{r7, lr}
 8015a3a:	b086      	sub	sp, #24
 8015a3c:	af00      	add	r7, sp, #0
 8015a3e:	60f8      	str	r0, [r7, #12]
 8015a40:	607a      	str	r2, [r7, #4]
 8015a42:	603b      	str	r3, [r7, #0]
 8015a44:	460b      	mov	r3, r1
 8015a46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a48:	2300      	movs	r3, #0
 8015a4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015a56:	7af9      	ldrb	r1, [r7, #11]
 8015a58:	683b      	ldr	r3, [r7, #0]
 8015a5a:	687a      	ldr	r2, [r7, #4]
 8015a5c:	f7f7 f95b 	bl	800cd16 <HAL_PCD_EP_Receive>
 8015a60:	4603      	mov	r3, r0
 8015a62:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a64:	7dfb      	ldrb	r3, [r7, #23]
 8015a66:	4618      	mov	r0, r3
 8015a68:	f000 f81a 	bl	8015aa0 <USBD_Get_USB_Status>
 8015a6c:	4603      	mov	r3, r0
 8015a6e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015a70:	7dbb      	ldrb	r3, [r7, #22]
}
 8015a72:	4618      	mov	r0, r3
 8015a74:	3718      	adds	r7, #24
 8015a76:	46bd      	mov	sp, r7
 8015a78:	bd80      	pop	{r7, pc}

08015a7a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a7a:	b580      	push	{r7, lr}
 8015a7c:	b082      	sub	sp, #8
 8015a7e:	af00      	add	r7, sp, #0
 8015a80:	6078      	str	r0, [r7, #4]
 8015a82:	460b      	mov	r3, r1
 8015a84:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015a8c:	78fa      	ldrb	r2, [r7, #3]
 8015a8e:	4611      	mov	r1, r2
 8015a90:	4618      	mov	r0, r3
 8015a92:	f7f7 f98b 	bl	800cdac <HAL_PCD_EP_GetRxCount>
 8015a96:	4603      	mov	r3, r0
}
 8015a98:	4618      	mov	r0, r3
 8015a9a:	3708      	adds	r7, #8
 8015a9c:	46bd      	mov	sp, r7
 8015a9e:	bd80      	pop	{r7, pc}

08015aa0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015aa0:	b480      	push	{r7}
 8015aa2:	b085      	sub	sp, #20
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015aaa:	2300      	movs	r3, #0
 8015aac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015aae:	79fb      	ldrb	r3, [r7, #7]
 8015ab0:	2b03      	cmp	r3, #3
 8015ab2:	d817      	bhi.n	8015ae4 <USBD_Get_USB_Status+0x44>
 8015ab4:	a201      	add	r2, pc, #4	; (adr r2, 8015abc <USBD_Get_USB_Status+0x1c>)
 8015ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015aba:	bf00      	nop
 8015abc:	08015acd 	.word	0x08015acd
 8015ac0:	08015ad3 	.word	0x08015ad3
 8015ac4:	08015ad9 	.word	0x08015ad9
 8015ac8:	08015adf 	.word	0x08015adf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015acc:	2300      	movs	r3, #0
 8015ace:	73fb      	strb	r3, [r7, #15]
    break;
 8015ad0:	e00b      	b.n	8015aea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015ad2:	2303      	movs	r3, #3
 8015ad4:	73fb      	strb	r3, [r7, #15]
    break;
 8015ad6:	e008      	b.n	8015aea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015ad8:	2301      	movs	r3, #1
 8015ada:	73fb      	strb	r3, [r7, #15]
    break;
 8015adc:	e005      	b.n	8015aea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015ade:	2303      	movs	r3, #3
 8015ae0:	73fb      	strb	r3, [r7, #15]
    break;
 8015ae2:	e002      	b.n	8015aea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015ae4:	2303      	movs	r3, #3
 8015ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8015ae8:	bf00      	nop
  }
  return usb_status;
 8015aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8015aec:	4618      	mov	r0, r3
 8015aee:	3714      	adds	r7, #20
 8015af0:	46bd      	mov	sp, r7
 8015af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015af6:	4770      	bx	lr

08015af8 <calloc>:
 8015af8:	4b02      	ldr	r3, [pc, #8]	; (8015b04 <calloc+0xc>)
 8015afa:	460a      	mov	r2, r1
 8015afc:	4601      	mov	r1, r0
 8015afe:	6818      	ldr	r0, [r3, #0]
 8015b00:	f000 b868 	b.w	8015bd4 <_calloc_r>
 8015b04:	200009ac 	.word	0x200009ac

08015b08 <__errno>:
 8015b08:	4b01      	ldr	r3, [pc, #4]	; (8015b10 <__errno+0x8>)
 8015b0a:	6818      	ldr	r0, [r3, #0]
 8015b0c:	4770      	bx	lr
 8015b0e:	bf00      	nop
 8015b10:	200009ac 	.word	0x200009ac

08015b14 <__libc_init_array>:
 8015b14:	b570      	push	{r4, r5, r6, lr}
 8015b16:	4e0d      	ldr	r6, [pc, #52]	; (8015b4c <__libc_init_array+0x38>)
 8015b18:	4c0d      	ldr	r4, [pc, #52]	; (8015b50 <__libc_init_array+0x3c>)
 8015b1a:	1ba4      	subs	r4, r4, r6
 8015b1c:	10a4      	asrs	r4, r4, #2
 8015b1e:	2500      	movs	r5, #0
 8015b20:	42a5      	cmp	r5, r4
 8015b22:	d109      	bne.n	8015b38 <__libc_init_array+0x24>
 8015b24:	4e0b      	ldr	r6, [pc, #44]	; (8015b54 <__libc_init_array+0x40>)
 8015b26:	4c0c      	ldr	r4, [pc, #48]	; (8015b58 <__libc_init_array+0x44>)
 8015b28:	f005 fa8c 	bl	801b044 <_init>
 8015b2c:	1ba4      	subs	r4, r4, r6
 8015b2e:	10a4      	asrs	r4, r4, #2
 8015b30:	2500      	movs	r5, #0
 8015b32:	42a5      	cmp	r5, r4
 8015b34:	d105      	bne.n	8015b42 <__libc_init_array+0x2e>
 8015b36:	bd70      	pop	{r4, r5, r6, pc}
 8015b38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015b3c:	4798      	blx	r3
 8015b3e:	3501      	adds	r5, #1
 8015b40:	e7ee      	b.n	8015b20 <__libc_init_array+0xc>
 8015b42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015b46:	4798      	blx	r3
 8015b48:	3501      	adds	r5, #1
 8015b4a:	e7f2      	b.n	8015b32 <__libc_init_array+0x1e>
 8015b4c:	0801b788 	.word	0x0801b788
 8015b50:	0801b788 	.word	0x0801b788
 8015b54:	0801b788 	.word	0x0801b788
 8015b58:	0801b78c 	.word	0x0801b78c

08015b5c <malloc>:
 8015b5c:	4b02      	ldr	r3, [pc, #8]	; (8015b68 <malloc+0xc>)
 8015b5e:	4601      	mov	r1, r0
 8015b60:	6818      	ldr	r0, [r3, #0]
 8015b62:	f000 b893 	b.w	8015c8c <_malloc_r>
 8015b66:	bf00      	nop
 8015b68:	200009ac 	.word	0x200009ac

08015b6c <free>:
 8015b6c:	4b02      	ldr	r3, [pc, #8]	; (8015b78 <free+0xc>)
 8015b6e:	4601      	mov	r1, r0
 8015b70:	6818      	ldr	r0, [r3, #0]
 8015b72:	f000 b83d 	b.w	8015bf0 <_free_r>
 8015b76:	bf00      	nop
 8015b78:	200009ac 	.word	0x200009ac

08015b7c <memcpy>:
 8015b7c:	b510      	push	{r4, lr}
 8015b7e:	1e43      	subs	r3, r0, #1
 8015b80:	440a      	add	r2, r1
 8015b82:	4291      	cmp	r1, r2
 8015b84:	d100      	bne.n	8015b88 <memcpy+0xc>
 8015b86:	bd10      	pop	{r4, pc}
 8015b88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015b8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015b90:	e7f7      	b.n	8015b82 <memcpy+0x6>

08015b92 <memmove>:
 8015b92:	4288      	cmp	r0, r1
 8015b94:	b510      	push	{r4, lr}
 8015b96:	eb01 0302 	add.w	r3, r1, r2
 8015b9a:	d807      	bhi.n	8015bac <memmove+0x1a>
 8015b9c:	1e42      	subs	r2, r0, #1
 8015b9e:	4299      	cmp	r1, r3
 8015ba0:	d00a      	beq.n	8015bb8 <memmove+0x26>
 8015ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015ba6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015baa:	e7f8      	b.n	8015b9e <memmove+0xc>
 8015bac:	4283      	cmp	r3, r0
 8015bae:	d9f5      	bls.n	8015b9c <memmove+0xa>
 8015bb0:	1881      	adds	r1, r0, r2
 8015bb2:	1ad2      	subs	r2, r2, r3
 8015bb4:	42d3      	cmn	r3, r2
 8015bb6:	d100      	bne.n	8015bba <memmove+0x28>
 8015bb8:	bd10      	pop	{r4, pc}
 8015bba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015bbe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015bc2:	e7f7      	b.n	8015bb4 <memmove+0x22>

08015bc4 <memset>:
 8015bc4:	4402      	add	r2, r0
 8015bc6:	4603      	mov	r3, r0
 8015bc8:	4293      	cmp	r3, r2
 8015bca:	d100      	bne.n	8015bce <memset+0xa>
 8015bcc:	4770      	bx	lr
 8015bce:	f803 1b01 	strb.w	r1, [r3], #1
 8015bd2:	e7f9      	b.n	8015bc8 <memset+0x4>

08015bd4 <_calloc_r>:
 8015bd4:	b538      	push	{r3, r4, r5, lr}
 8015bd6:	fb02 f401 	mul.w	r4, r2, r1
 8015bda:	4621      	mov	r1, r4
 8015bdc:	f000 f856 	bl	8015c8c <_malloc_r>
 8015be0:	4605      	mov	r5, r0
 8015be2:	b118      	cbz	r0, 8015bec <_calloc_r+0x18>
 8015be4:	4622      	mov	r2, r4
 8015be6:	2100      	movs	r1, #0
 8015be8:	f7ff ffec 	bl	8015bc4 <memset>
 8015bec:	4628      	mov	r0, r5
 8015bee:	bd38      	pop	{r3, r4, r5, pc}

08015bf0 <_free_r>:
 8015bf0:	b538      	push	{r3, r4, r5, lr}
 8015bf2:	4605      	mov	r5, r0
 8015bf4:	2900      	cmp	r1, #0
 8015bf6:	d045      	beq.n	8015c84 <_free_r+0x94>
 8015bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015bfc:	1f0c      	subs	r4, r1, #4
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	bfb8      	it	lt
 8015c02:	18e4      	addlt	r4, r4, r3
 8015c04:	f002 ff84 	bl	8018b10 <__malloc_lock>
 8015c08:	4a1f      	ldr	r2, [pc, #124]	; (8015c88 <_free_r+0x98>)
 8015c0a:	6813      	ldr	r3, [r2, #0]
 8015c0c:	4610      	mov	r0, r2
 8015c0e:	b933      	cbnz	r3, 8015c1e <_free_r+0x2e>
 8015c10:	6063      	str	r3, [r4, #4]
 8015c12:	6014      	str	r4, [r2, #0]
 8015c14:	4628      	mov	r0, r5
 8015c16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015c1a:	f002 bf7a 	b.w	8018b12 <__malloc_unlock>
 8015c1e:	42a3      	cmp	r3, r4
 8015c20:	d90c      	bls.n	8015c3c <_free_r+0x4c>
 8015c22:	6821      	ldr	r1, [r4, #0]
 8015c24:	1862      	adds	r2, r4, r1
 8015c26:	4293      	cmp	r3, r2
 8015c28:	bf04      	itt	eq
 8015c2a:	681a      	ldreq	r2, [r3, #0]
 8015c2c:	685b      	ldreq	r3, [r3, #4]
 8015c2e:	6063      	str	r3, [r4, #4]
 8015c30:	bf04      	itt	eq
 8015c32:	1852      	addeq	r2, r2, r1
 8015c34:	6022      	streq	r2, [r4, #0]
 8015c36:	6004      	str	r4, [r0, #0]
 8015c38:	e7ec      	b.n	8015c14 <_free_r+0x24>
 8015c3a:	4613      	mov	r3, r2
 8015c3c:	685a      	ldr	r2, [r3, #4]
 8015c3e:	b10a      	cbz	r2, 8015c44 <_free_r+0x54>
 8015c40:	42a2      	cmp	r2, r4
 8015c42:	d9fa      	bls.n	8015c3a <_free_r+0x4a>
 8015c44:	6819      	ldr	r1, [r3, #0]
 8015c46:	1858      	adds	r0, r3, r1
 8015c48:	42a0      	cmp	r0, r4
 8015c4a:	d10b      	bne.n	8015c64 <_free_r+0x74>
 8015c4c:	6820      	ldr	r0, [r4, #0]
 8015c4e:	4401      	add	r1, r0
 8015c50:	1858      	adds	r0, r3, r1
 8015c52:	4282      	cmp	r2, r0
 8015c54:	6019      	str	r1, [r3, #0]
 8015c56:	d1dd      	bne.n	8015c14 <_free_r+0x24>
 8015c58:	6810      	ldr	r0, [r2, #0]
 8015c5a:	6852      	ldr	r2, [r2, #4]
 8015c5c:	605a      	str	r2, [r3, #4]
 8015c5e:	4401      	add	r1, r0
 8015c60:	6019      	str	r1, [r3, #0]
 8015c62:	e7d7      	b.n	8015c14 <_free_r+0x24>
 8015c64:	d902      	bls.n	8015c6c <_free_r+0x7c>
 8015c66:	230c      	movs	r3, #12
 8015c68:	602b      	str	r3, [r5, #0]
 8015c6a:	e7d3      	b.n	8015c14 <_free_r+0x24>
 8015c6c:	6820      	ldr	r0, [r4, #0]
 8015c6e:	1821      	adds	r1, r4, r0
 8015c70:	428a      	cmp	r2, r1
 8015c72:	bf04      	itt	eq
 8015c74:	6811      	ldreq	r1, [r2, #0]
 8015c76:	6852      	ldreq	r2, [r2, #4]
 8015c78:	6062      	str	r2, [r4, #4]
 8015c7a:	bf04      	itt	eq
 8015c7c:	1809      	addeq	r1, r1, r0
 8015c7e:	6021      	streq	r1, [r4, #0]
 8015c80:	605c      	str	r4, [r3, #4]
 8015c82:	e7c7      	b.n	8015c14 <_free_r+0x24>
 8015c84:	bd38      	pop	{r3, r4, r5, pc}
 8015c86:	bf00      	nop
 8015c88:	20004d58 	.word	0x20004d58

08015c8c <_malloc_r>:
 8015c8c:	b570      	push	{r4, r5, r6, lr}
 8015c8e:	1ccd      	adds	r5, r1, #3
 8015c90:	f025 0503 	bic.w	r5, r5, #3
 8015c94:	3508      	adds	r5, #8
 8015c96:	2d0c      	cmp	r5, #12
 8015c98:	bf38      	it	cc
 8015c9a:	250c      	movcc	r5, #12
 8015c9c:	2d00      	cmp	r5, #0
 8015c9e:	4606      	mov	r6, r0
 8015ca0:	db01      	blt.n	8015ca6 <_malloc_r+0x1a>
 8015ca2:	42a9      	cmp	r1, r5
 8015ca4:	d903      	bls.n	8015cae <_malloc_r+0x22>
 8015ca6:	230c      	movs	r3, #12
 8015ca8:	6033      	str	r3, [r6, #0]
 8015caa:	2000      	movs	r0, #0
 8015cac:	bd70      	pop	{r4, r5, r6, pc}
 8015cae:	f002 ff2f 	bl	8018b10 <__malloc_lock>
 8015cb2:	4a21      	ldr	r2, [pc, #132]	; (8015d38 <_malloc_r+0xac>)
 8015cb4:	6814      	ldr	r4, [r2, #0]
 8015cb6:	4621      	mov	r1, r4
 8015cb8:	b991      	cbnz	r1, 8015ce0 <_malloc_r+0x54>
 8015cba:	4c20      	ldr	r4, [pc, #128]	; (8015d3c <_malloc_r+0xb0>)
 8015cbc:	6823      	ldr	r3, [r4, #0]
 8015cbe:	b91b      	cbnz	r3, 8015cc8 <_malloc_r+0x3c>
 8015cc0:	4630      	mov	r0, r6
 8015cc2:	f000 fe7b 	bl	80169bc <_sbrk_r>
 8015cc6:	6020      	str	r0, [r4, #0]
 8015cc8:	4629      	mov	r1, r5
 8015cca:	4630      	mov	r0, r6
 8015ccc:	f000 fe76 	bl	80169bc <_sbrk_r>
 8015cd0:	1c43      	adds	r3, r0, #1
 8015cd2:	d124      	bne.n	8015d1e <_malloc_r+0x92>
 8015cd4:	230c      	movs	r3, #12
 8015cd6:	6033      	str	r3, [r6, #0]
 8015cd8:	4630      	mov	r0, r6
 8015cda:	f002 ff1a 	bl	8018b12 <__malloc_unlock>
 8015cde:	e7e4      	b.n	8015caa <_malloc_r+0x1e>
 8015ce0:	680b      	ldr	r3, [r1, #0]
 8015ce2:	1b5b      	subs	r3, r3, r5
 8015ce4:	d418      	bmi.n	8015d18 <_malloc_r+0x8c>
 8015ce6:	2b0b      	cmp	r3, #11
 8015ce8:	d90f      	bls.n	8015d0a <_malloc_r+0x7e>
 8015cea:	600b      	str	r3, [r1, #0]
 8015cec:	50cd      	str	r5, [r1, r3]
 8015cee:	18cc      	adds	r4, r1, r3
 8015cf0:	4630      	mov	r0, r6
 8015cf2:	f002 ff0e 	bl	8018b12 <__malloc_unlock>
 8015cf6:	f104 000b 	add.w	r0, r4, #11
 8015cfa:	1d23      	adds	r3, r4, #4
 8015cfc:	f020 0007 	bic.w	r0, r0, #7
 8015d00:	1ac3      	subs	r3, r0, r3
 8015d02:	d0d3      	beq.n	8015cac <_malloc_r+0x20>
 8015d04:	425a      	negs	r2, r3
 8015d06:	50e2      	str	r2, [r4, r3]
 8015d08:	e7d0      	b.n	8015cac <_malloc_r+0x20>
 8015d0a:	428c      	cmp	r4, r1
 8015d0c:	684b      	ldr	r3, [r1, #4]
 8015d0e:	bf16      	itet	ne
 8015d10:	6063      	strne	r3, [r4, #4]
 8015d12:	6013      	streq	r3, [r2, #0]
 8015d14:	460c      	movne	r4, r1
 8015d16:	e7eb      	b.n	8015cf0 <_malloc_r+0x64>
 8015d18:	460c      	mov	r4, r1
 8015d1a:	6849      	ldr	r1, [r1, #4]
 8015d1c:	e7cc      	b.n	8015cb8 <_malloc_r+0x2c>
 8015d1e:	1cc4      	adds	r4, r0, #3
 8015d20:	f024 0403 	bic.w	r4, r4, #3
 8015d24:	42a0      	cmp	r0, r4
 8015d26:	d005      	beq.n	8015d34 <_malloc_r+0xa8>
 8015d28:	1a21      	subs	r1, r4, r0
 8015d2a:	4630      	mov	r0, r6
 8015d2c:	f000 fe46 	bl	80169bc <_sbrk_r>
 8015d30:	3001      	adds	r0, #1
 8015d32:	d0cf      	beq.n	8015cd4 <_malloc_r+0x48>
 8015d34:	6025      	str	r5, [r4, #0]
 8015d36:	e7db      	b.n	8015cf0 <_malloc_r+0x64>
 8015d38:	20004d58 	.word	0x20004d58
 8015d3c:	20004d5c 	.word	0x20004d5c

08015d40 <__cvt>:
 8015d40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015d44:	ec55 4b10 	vmov	r4, r5, d0
 8015d48:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015d4a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015d4e:	2d00      	cmp	r5, #0
 8015d50:	460e      	mov	r6, r1
 8015d52:	4691      	mov	r9, r2
 8015d54:	4619      	mov	r1, r3
 8015d56:	bfb8      	it	lt
 8015d58:	4622      	movlt	r2, r4
 8015d5a:	462b      	mov	r3, r5
 8015d5c:	f027 0720 	bic.w	r7, r7, #32
 8015d60:	bfbb      	ittet	lt
 8015d62:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015d66:	461d      	movlt	r5, r3
 8015d68:	2300      	movge	r3, #0
 8015d6a:	232d      	movlt	r3, #45	; 0x2d
 8015d6c:	bfb8      	it	lt
 8015d6e:	4614      	movlt	r4, r2
 8015d70:	2f46      	cmp	r7, #70	; 0x46
 8015d72:	700b      	strb	r3, [r1, #0]
 8015d74:	d004      	beq.n	8015d80 <__cvt+0x40>
 8015d76:	2f45      	cmp	r7, #69	; 0x45
 8015d78:	d100      	bne.n	8015d7c <__cvt+0x3c>
 8015d7a:	3601      	adds	r6, #1
 8015d7c:	2102      	movs	r1, #2
 8015d7e:	e000      	b.n	8015d82 <__cvt+0x42>
 8015d80:	2103      	movs	r1, #3
 8015d82:	ab03      	add	r3, sp, #12
 8015d84:	9301      	str	r3, [sp, #4]
 8015d86:	ab02      	add	r3, sp, #8
 8015d88:	9300      	str	r3, [sp, #0]
 8015d8a:	4632      	mov	r2, r6
 8015d8c:	4653      	mov	r3, sl
 8015d8e:	ec45 4b10 	vmov	d0, r4, r5
 8015d92:	f001 fdb9 	bl	8017908 <_dtoa_r>
 8015d96:	2f47      	cmp	r7, #71	; 0x47
 8015d98:	4680      	mov	r8, r0
 8015d9a:	d102      	bne.n	8015da2 <__cvt+0x62>
 8015d9c:	f019 0f01 	tst.w	r9, #1
 8015da0:	d026      	beq.n	8015df0 <__cvt+0xb0>
 8015da2:	2f46      	cmp	r7, #70	; 0x46
 8015da4:	eb08 0906 	add.w	r9, r8, r6
 8015da8:	d111      	bne.n	8015dce <__cvt+0x8e>
 8015daa:	f898 3000 	ldrb.w	r3, [r8]
 8015dae:	2b30      	cmp	r3, #48	; 0x30
 8015db0:	d10a      	bne.n	8015dc8 <__cvt+0x88>
 8015db2:	2200      	movs	r2, #0
 8015db4:	2300      	movs	r3, #0
 8015db6:	4620      	mov	r0, r4
 8015db8:	4629      	mov	r1, r5
 8015dba:	f7ea fe85 	bl	8000ac8 <__aeabi_dcmpeq>
 8015dbe:	b918      	cbnz	r0, 8015dc8 <__cvt+0x88>
 8015dc0:	f1c6 0601 	rsb	r6, r6, #1
 8015dc4:	f8ca 6000 	str.w	r6, [sl]
 8015dc8:	f8da 3000 	ldr.w	r3, [sl]
 8015dcc:	4499      	add	r9, r3
 8015dce:	2200      	movs	r2, #0
 8015dd0:	2300      	movs	r3, #0
 8015dd2:	4620      	mov	r0, r4
 8015dd4:	4629      	mov	r1, r5
 8015dd6:	f7ea fe77 	bl	8000ac8 <__aeabi_dcmpeq>
 8015dda:	b938      	cbnz	r0, 8015dec <__cvt+0xac>
 8015ddc:	2230      	movs	r2, #48	; 0x30
 8015dde:	9b03      	ldr	r3, [sp, #12]
 8015de0:	454b      	cmp	r3, r9
 8015de2:	d205      	bcs.n	8015df0 <__cvt+0xb0>
 8015de4:	1c59      	adds	r1, r3, #1
 8015de6:	9103      	str	r1, [sp, #12]
 8015de8:	701a      	strb	r2, [r3, #0]
 8015dea:	e7f8      	b.n	8015dde <__cvt+0x9e>
 8015dec:	f8cd 900c 	str.w	r9, [sp, #12]
 8015df0:	9b03      	ldr	r3, [sp, #12]
 8015df2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015df4:	eba3 0308 	sub.w	r3, r3, r8
 8015df8:	4640      	mov	r0, r8
 8015dfa:	6013      	str	r3, [r2, #0]
 8015dfc:	b004      	add	sp, #16
 8015dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015e02 <__exponent>:
 8015e02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015e04:	2900      	cmp	r1, #0
 8015e06:	4604      	mov	r4, r0
 8015e08:	bfba      	itte	lt
 8015e0a:	4249      	neglt	r1, r1
 8015e0c:	232d      	movlt	r3, #45	; 0x2d
 8015e0e:	232b      	movge	r3, #43	; 0x2b
 8015e10:	2909      	cmp	r1, #9
 8015e12:	f804 2b02 	strb.w	r2, [r4], #2
 8015e16:	7043      	strb	r3, [r0, #1]
 8015e18:	dd20      	ble.n	8015e5c <__exponent+0x5a>
 8015e1a:	f10d 0307 	add.w	r3, sp, #7
 8015e1e:	461f      	mov	r7, r3
 8015e20:	260a      	movs	r6, #10
 8015e22:	fb91 f5f6 	sdiv	r5, r1, r6
 8015e26:	fb06 1115 	mls	r1, r6, r5, r1
 8015e2a:	3130      	adds	r1, #48	; 0x30
 8015e2c:	2d09      	cmp	r5, #9
 8015e2e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015e32:	f103 32ff 	add.w	r2, r3, #4294967295
 8015e36:	4629      	mov	r1, r5
 8015e38:	dc09      	bgt.n	8015e4e <__exponent+0x4c>
 8015e3a:	3130      	adds	r1, #48	; 0x30
 8015e3c:	3b02      	subs	r3, #2
 8015e3e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015e42:	42bb      	cmp	r3, r7
 8015e44:	4622      	mov	r2, r4
 8015e46:	d304      	bcc.n	8015e52 <__exponent+0x50>
 8015e48:	1a10      	subs	r0, r2, r0
 8015e4a:	b003      	add	sp, #12
 8015e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e4e:	4613      	mov	r3, r2
 8015e50:	e7e7      	b.n	8015e22 <__exponent+0x20>
 8015e52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e56:	f804 2b01 	strb.w	r2, [r4], #1
 8015e5a:	e7f2      	b.n	8015e42 <__exponent+0x40>
 8015e5c:	2330      	movs	r3, #48	; 0x30
 8015e5e:	4419      	add	r1, r3
 8015e60:	7083      	strb	r3, [r0, #2]
 8015e62:	1d02      	adds	r2, r0, #4
 8015e64:	70c1      	strb	r1, [r0, #3]
 8015e66:	e7ef      	b.n	8015e48 <__exponent+0x46>

08015e68 <_printf_float>:
 8015e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e6c:	b08d      	sub	sp, #52	; 0x34
 8015e6e:	460c      	mov	r4, r1
 8015e70:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015e74:	4616      	mov	r6, r2
 8015e76:	461f      	mov	r7, r3
 8015e78:	4605      	mov	r5, r0
 8015e7a:	f002 fe29 	bl	8018ad0 <_localeconv_r>
 8015e7e:	6803      	ldr	r3, [r0, #0]
 8015e80:	9304      	str	r3, [sp, #16]
 8015e82:	4618      	mov	r0, r3
 8015e84:	f7ea f9a4 	bl	80001d0 <strlen>
 8015e88:	2300      	movs	r3, #0
 8015e8a:	930a      	str	r3, [sp, #40]	; 0x28
 8015e8c:	f8d8 3000 	ldr.w	r3, [r8]
 8015e90:	9005      	str	r0, [sp, #20]
 8015e92:	3307      	adds	r3, #7
 8015e94:	f023 0307 	bic.w	r3, r3, #7
 8015e98:	f103 0208 	add.w	r2, r3, #8
 8015e9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015ea0:	f8d4 b000 	ldr.w	fp, [r4]
 8015ea4:	f8c8 2000 	str.w	r2, [r8]
 8015ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015eac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015eb0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015eb4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015eb8:	9307      	str	r3, [sp, #28]
 8015eba:	f8cd 8018 	str.w	r8, [sp, #24]
 8015ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8015ec2:	4ba7      	ldr	r3, [pc, #668]	; (8016160 <_printf_float+0x2f8>)
 8015ec4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015ec8:	f7ea fe30 	bl	8000b2c <__aeabi_dcmpun>
 8015ecc:	bb70      	cbnz	r0, 8015f2c <_printf_float+0xc4>
 8015ece:	f04f 32ff 	mov.w	r2, #4294967295
 8015ed2:	4ba3      	ldr	r3, [pc, #652]	; (8016160 <_printf_float+0x2f8>)
 8015ed4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015ed8:	f7ea fe0a 	bl	8000af0 <__aeabi_dcmple>
 8015edc:	bb30      	cbnz	r0, 8015f2c <_printf_float+0xc4>
 8015ede:	2200      	movs	r2, #0
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	4640      	mov	r0, r8
 8015ee4:	4649      	mov	r1, r9
 8015ee6:	f7ea fdf9 	bl	8000adc <__aeabi_dcmplt>
 8015eea:	b110      	cbz	r0, 8015ef2 <_printf_float+0x8a>
 8015eec:	232d      	movs	r3, #45	; 0x2d
 8015eee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015ef2:	4a9c      	ldr	r2, [pc, #624]	; (8016164 <_printf_float+0x2fc>)
 8015ef4:	4b9c      	ldr	r3, [pc, #624]	; (8016168 <_printf_float+0x300>)
 8015ef6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015efa:	bf8c      	ite	hi
 8015efc:	4690      	movhi	r8, r2
 8015efe:	4698      	movls	r8, r3
 8015f00:	2303      	movs	r3, #3
 8015f02:	f02b 0204 	bic.w	r2, fp, #4
 8015f06:	6123      	str	r3, [r4, #16]
 8015f08:	6022      	str	r2, [r4, #0]
 8015f0a:	f04f 0900 	mov.w	r9, #0
 8015f0e:	9700      	str	r7, [sp, #0]
 8015f10:	4633      	mov	r3, r6
 8015f12:	aa0b      	add	r2, sp, #44	; 0x2c
 8015f14:	4621      	mov	r1, r4
 8015f16:	4628      	mov	r0, r5
 8015f18:	f000 f9e6 	bl	80162e8 <_printf_common>
 8015f1c:	3001      	adds	r0, #1
 8015f1e:	f040 808d 	bne.w	801603c <_printf_float+0x1d4>
 8015f22:	f04f 30ff 	mov.w	r0, #4294967295
 8015f26:	b00d      	add	sp, #52	; 0x34
 8015f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f2c:	4642      	mov	r2, r8
 8015f2e:	464b      	mov	r3, r9
 8015f30:	4640      	mov	r0, r8
 8015f32:	4649      	mov	r1, r9
 8015f34:	f7ea fdfa 	bl	8000b2c <__aeabi_dcmpun>
 8015f38:	b110      	cbz	r0, 8015f40 <_printf_float+0xd8>
 8015f3a:	4a8c      	ldr	r2, [pc, #560]	; (801616c <_printf_float+0x304>)
 8015f3c:	4b8c      	ldr	r3, [pc, #560]	; (8016170 <_printf_float+0x308>)
 8015f3e:	e7da      	b.n	8015ef6 <_printf_float+0x8e>
 8015f40:	6861      	ldr	r1, [r4, #4]
 8015f42:	1c4b      	adds	r3, r1, #1
 8015f44:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015f48:	a80a      	add	r0, sp, #40	; 0x28
 8015f4a:	d13e      	bne.n	8015fca <_printf_float+0x162>
 8015f4c:	2306      	movs	r3, #6
 8015f4e:	6063      	str	r3, [r4, #4]
 8015f50:	2300      	movs	r3, #0
 8015f52:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015f56:	ab09      	add	r3, sp, #36	; 0x24
 8015f58:	9300      	str	r3, [sp, #0]
 8015f5a:	ec49 8b10 	vmov	d0, r8, r9
 8015f5e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015f62:	6022      	str	r2, [r4, #0]
 8015f64:	f8cd a004 	str.w	sl, [sp, #4]
 8015f68:	6861      	ldr	r1, [r4, #4]
 8015f6a:	4628      	mov	r0, r5
 8015f6c:	f7ff fee8 	bl	8015d40 <__cvt>
 8015f70:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015f74:	2b47      	cmp	r3, #71	; 0x47
 8015f76:	4680      	mov	r8, r0
 8015f78:	d109      	bne.n	8015f8e <_printf_float+0x126>
 8015f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f7c:	1cd8      	adds	r0, r3, #3
 8015f7e:	db02      	blt.n	8015f86 <_printf_float+0x11e>
 8015f80:	6862      	ldr	r2, [r4, #4]
 8015f82:	4293      	cmp	r3, r2
 8015f84:	dd47      	ble.n	8016016 <_printf_float+0x1ae>
 8015f86:	f1aa 0a02 	sub.w	sl, sl, #2
 8015f8a:	fa5f fa8a 	uxtb.w	sl, sl
 8015f8e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015f92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015f94:	d824      	bhi.n	8015fe0 <_printf_float+0x178>
 8015f96:	3901      	subs	r1, #1
 8015f98:	4652      	mov	r2, sl
 8015f9a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015f9e:	9109      	str	r1, [sp, #36]	; 0x24
 8015fa0:	f7ff ff2f 	bl	8015e02 <__exponent>
 8015fa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015fa6:	1813      	adds	r3, r2, r0
 8015fa8:	2a01      	cmp	r2, #1
 8015faa:	4681      	mov	r9, r0
 8015fac:	6123      	str	r3, [r4, #16]
 8015fae:	dc02      	bgt.n	8015fb6 <_printf_float+0x14e>
 8015fb0:	6822      	ldr	r2, [r4, #0]
 8015fb2:	07d1      	lsls	r1, r2, #31
 8015fb4:	d501      	bpl.n	8015fba <_printf_float+0x152>
 8015fb6:	3301      	adds	r3, #1
 8015fb8:	6123      	str	r3, [r4, #16]
 8015fba:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d0a5      	beq.n	8015f0e <_printf_float+0xa6>
 8015fc2:	232d      	movs	r3, #45	; 0x2d
 8015fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015fc8:	e7a1      	b.n	8015f0e <_printf_float+0xa6>
 8015fca:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015fce:	f000 8177 	beq.w	80162c0 <_printf_float+0x458>
 8015fd2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015fd6:	d1bb      	bne.n	8015f50 <_printf_float+0xe8>
 8015fd8:	2900      	cmp	r1, #0
 8015fda:	d1b9      	bne.n	8015f50 <_printf_float+0xe8>
 8015fdc:	2301      	movs	r3, #1
 8015fde:	e7b6      	b.n	8015f4e <_printf_float+0xe6>
 8015fe0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015fe4:	d119      	bne.n	801601a <_printf_float+0x1b2>
 8015fe6:	2900      	cmp	r1, #0
 8015fe8:	6863      	ldr	r3, [r4, #4]
 8015fea:	dd0c      	ble.n	8016006 <_printf_float+0x19e>
 8015fec:	6121      	str	r1, [r4, #16]
 8015fee:	b913      	cbnz	r3, 8015ff6 <_printf_float+0x18e>
 8015ff0:	6822      	ldr	r2, [r4, #0]
 8015ff2:	07d2      	lsls	r2, r2, #31
 8015ff4:	d502      	bpl.n	8015ffc <_printf_float+0x194>
 8015ff6:	3301      	adds	r3, #1
 8015ff8:	440b      	add	r3, r1
 8015ffa:	6123      	str	r3, [r4, #16]
 8015ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ffe:	65a3      	str	r3, [r4, #88]	; 0x58
 8016000:	f04f 0900 	mov.w	r9, #0
 8016004:	e7d9      	b.n	8015fba <_printf_float+0x152>
 8016006:	b913      	cbnz	r3, 801600e <_printf_float+0x1a6>
 8016008:	6822      	ldr	r2, [r4, #0]
 801600a:	07d0      	lsls	r0, r2, #31
 801600c:	d501      	bpl.n	8016012 <_printf_float+0x1aa>
 801600e:	3302      	adds	r3, #2
 8016010:	e7f3      	b.n	8015ffa <_printf_float+0x192>
 8016012:	2301      	movs	r3, #1
 8016014:	e7f1      	b.n	8015ffa <_printf_float+0x192>
 8016016:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801601a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801601e:	4293      	cmp	r3, r2
 8016020:	db05      	blt.n	801602e <_printf_float+0x1c6>
 8016022:	6822      	ldr	r2, [r4, #0]
 8016024:	6123      	str	r3, [r4, #16]
 8016026:	07d1      	lsls	r1, r2, #31
 8016028:	d5e8      	bpl.n	8015ffc <_printf_float+0x194>
 801602a:	3301      	adds	r3, #1
 801602c:	e7e5      	b.n	8015ffa <_printf_float+0x192>
 801602e:	2b00      	cmp	r3, #0
 8016030:	bfd4      	ite	le
 8016032:	f1c3 0302 	rsble	r3, r3, #2
 8016036:	2301      	movgt	r3, #1
 8016038:	4413      	add	r3, r2
 801603a:	e7de      	b.n	8015ffa <_printf_float+0x192>
 801603c:	6823      	ldr	r3, [r4, #0]
 801603e:	055a      	lsls	r2, r3, #21
 8016040:	d407      	bmi.n	8016052 <_printf_float+0x1ea>
 8016042:	6923      	ldr	r3, [r4, #16]
 8016044:	4642      	mov	r2, r8
 8016046:	4631      	mov	r1, r6
 8016048:	4628      	mov	r0, r5
 801604a:	47b8      	blx	r7
 801604c:	3001      	adds	r0, #1
 801604e:	d12b      	bne.n	80160a8 <_printf_float+0x240>
 8016050:	e767      	b.n	8015f22 <_printf_float+0xba>
 8016052:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8016056:	f240 80dc 	bls.w	8016212 <_printf_float+0x3aa>
 801605a:	2200      	movs	r2, #0
 801605c:	2300      	movs	r3, #0
 801605e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016062:	f7ea fd31 	bl	8000ac8 <__aeabi_dcmpeq>
 8016066:	2800      	cmp	r0, #0
 8016068:	d033      	beq.n	80160d2 <_printf_float+0x26a>
 801606a:	2301      	movs	r3, #1
 801606c:	4a41      	ldr	r2, [pc, #260]	; (8016174 <_printf_float+0x30c>)
 801606e:	4631      	mov	r1, r6
 8016070:	4628      	mov	r0, r5
 8016072:	47b8      	blx	r7
 8016074:	3001      	adds	r0, #1
 8016076:	f43f af54 	beq.w	8015f22 <_printf_float+0xba>
 801607a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801607e:	429a      	cmp	r2, r3
 8016080:	db02      	blt.n	8016088 <_printf_float+0x220>
 8016082:	6823      	ldr	r3, [r4, #0]
 8016084:	07d8      	lsls	r0, r3, #31
 8016086:	d50f      	bpl.n	80160a8 <_printf_float+0x240>
 8016088:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801608c:	4631      	mov	r1, r6
 801608e:	4628      	mov	r0, r5
 8016090:	47b8      	blx	r7
 8016092:	3001      	adds	r0, #1
 8016094:	f43f af45 	beq.w	8015f22 <_printf_float+0xba>
 8016098:	f04f 0800 	mov.w	r8, #0
 801609c:	f104 091a 	add.w	r9, r4, #26
 80160a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160a2:	3b01      	subs	r3, #1
 80160a4:	4543      	cmp	r3, r8
 80160a6:	dc09      	bgt.n	80160bc <_printf_float+0x254>
 80160a8:	6823      	ldr	r3, [r4, #0]
 80160aa:	079b      	lsls	r3, r3, #30
 80160ac:	f100 8103 	bmi.w	80162b6 <_printf_float+0x44e>
 80160b0:	68e0      	ldr	r0, [r4, #12]
 80160b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80160b4:	4298      	cmp	r0, r3
 80160b6:	bfb8      	it	lt
 80160b8:	4618      	movlt	r0, r3
 80160ba:	e734      	b.n	8015f26 <_printf_float+0xbe>
 80160bc:	2301      	movs	r3, #1
 80160be:	464a      	mov	r2, r9
 80160c0:	4631      	mov	r1, r6
 80160c2:	4628      	mov	r0, r5
 80160c4:	47b8      	blx	r7
 80160c6:	3001      	adds	r0, #1
 80160c8:	f43f af2b 	beq.w	8015f22 <_printf_float+0xba>
 80160cc:	f108 0801 	add.w	r8, r8, #1
 80160d0:	e7e6      	b.n	80160a0 <_printf_float+0x238>
 80160d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	dc2b      	bgt.n	8016130 <_printf_float+0x2c8>
 80160d8:	2301      	movs	r3, #1
 80160da:	4a26      	ldr	r2, [pc, #152]	; (8016174 <_printf_float+0x30c>)
 80160dc:	4631      	mov	r1, r6
 80160de:	4628      	mov	r0, r5
 80160e0:	47b8      	blx	r7
 80160e2:	3001      	adds	r0, #1
 80160e4:	f43f af1d 	beq.w	8015f22 <_printf_float+0xba>
 80160e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160ea:	b923      	cbnz	r3, 80160f6 <_printf_float+0x28e>
 80160ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160ee:	b913      	cbnz	r3, 80160f6 <_printf_float+0x28e>
 80160f0:	6823      	ldr	r3, [r4, #0]
 80160f2:	07d9      	lsls	r1, r3, #31
 80160f4:	d5d8      	bpl.n	80160a8 <_printf_float+0x240>
 80160f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80160fa:	4631      	mov	r1, r6
 80160fc:	4628      	mov	r0, r5
 80160fe:	47b8      	blx	r7
 8016100:	3001      	adds	r0, #1
 8016102:	f43f af0e 	beq.w	8015f22 <_printf_float+0xba>
 8016106:	f04f 0900 	mov.w	r9, #0
 801610a:	f104 0a1a 	add.w	sl, r4, #26
 801610e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016110:	425b      	negs	r3, r3
 8016112:	454b      	cmp	r3, r9
 8016114:	dc01      	bgt.n	801611a <_printf_float+0x2b2>
 8016116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016118:	e794      	b.n	8016044 <_printf_float+0x1dc>
 801611a:	2301      	movs	r3, #1
 801611c:	4652      	mov	r2, sl
 801611e:	4631      	mov	r1, r6
 8016120:	4628      	mov	r0, r5
 8016122:	47b8      	blx	r7
 8016124:	3001      	adds	r0, #1
 8016126:	f43f aefc 	beq.w	8015f22 <_printf_float+0xba>
 801612a:	f109 0901 	add.w	r9, r9, #1
 801612e:	e7ee      	b.n	801610e <_printf_float+0x2a6>
 8016130:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016132:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016134:	429a      	cmp	r2, r3
 8016136:	bfa8      	it	ge
 8016138:	461a      	movge	r2, r3
 801613a:	2a00      	cmp	r2, #0
 801613c:	4691      	mov	r9, r2
 801613e:	dd07      	ble.n	8016150 <_printf_float+0x2e8>
 8016140:	4613      	mov	r3, r2
 8016142:	4631      	mov	r1, r6
 8016144:	4642      	mov	r2, r8
 8016146:	4628      	mov	r0, r5
 8016148:	47b8      	blx	r7
 801614a:	3001      	adds	r0, #1
 801614c:	f43f aee9 	beq.w	8015f22 <_printf_float+0xba>
 8016150:	f104 031a 	add.w	r3, r4, #26
 8016154:	f04f 0b00 	mov.w	fp, #0
 8016158:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801615c:	9306      	str	r3, [sp, #24]
 801615e:	e015      	b.n	801618c <_printf_float+0x324>
 8016160:	7fefffff 	.word	0x7fefffff
 8016164:	0801b2ac 	.word	0x0801b2ac
 8016168:	0801b2a8 	.word	0x0801b2a8
 801616c:	0801b2b4 	.word	0x0801b2b4
 8016170:	0801b2b0 	.word	0x0801b2b0
 8016174:	0801b2b8 	.word	0x0801b2b8
 8016178:	2301      	movs	r3, #1
 801617a:	9a06      	ldr	r2, [sp, #24]
 801617c:	4631      	mov	r1, r6
 801617e:	4628      	mov	r0, r5
 8016180:	47b8      	blx	r7
 8016182:	3001      	adds	r0, #1
 8016184:	f43f aecd 	beq.w	8015f22 <_printf_float+0xba>
 8016188:	f10b 0b01 	add.w	fp, fp, #1
 801618c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8016190:	ebaa 0309 	sub.w	r3, sl, r9
 8016194:	455b      	cmp	r3, fp
 8016196:	dcef      	bgt.n	8016178 <_printf_float+0x310>
 8016198:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801619c:	429a      	cmp	r2, r3
 801619e:	44d0      	add	r8, sl
 80161a0:	db15      	blt.n	80161ce <_printf_float+0x366>
 80161a2:	6823      	ldr	r3, [r4, #0]
 80161a4:	07da      	lsls	r2, r3, #31
 80161a6:	d412      	bmi.n	80161ce <_printf_float+0x366>
 80161a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80161ac:	eba3 020a 	sub.w	r2, r3, sl
 80161b0:	eba3 0a01 	sub.w	sl, r3, r1
 80161b4:	4592      	cmp	sl, r2
 80161b6:	bfa8      	it	ge
 80161b8:	4692      	movge	sl, r2
 80161ba:	f1ba 0f00 	cmp.w	sl, #0
 80161be:	dc0e      	bgt.n	80161de <_printf_float+0x376>
 80161c0:	f04f 0800 	mov.w	r8, #0
 80161c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80161c8:	f104 091a 	add.w	r9, r4, #26
 80161cc:	e019      	b.n	8016202 <_printf_float+0x39a>
 80161ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80161d2:	4631      	mov	r1, r6
 80161d4:	4628      	mov	r0, r5
 80161d6:	47b8      	blx	r7
 80161d8:	3001      	adds	r0, #1
 80161da:	d1e5      	bne.n	80161a8 <_printf_float+0x340>
 80161dc:	e6a1      	b.n	8015f22 <_printf_float+0xba>
 80161de:	4653      	mov	r3, sl
 80161e0:	4642      	mov	r2, r8
 80161e2:	4631      	mov	r1, r6
 80161e4:	4628      	mov	r0, r5
 80161e6:	47b8      	blx	r7
 80161e8:	3001      	adds	r0, #1
 80161ea:	d1e9      	bne.n	80161c0 <_printf_float+0x358>
 80161ec:	e699      	b.n	8015f22 <_printf_float+0xba>
 80161ee:	2301      	movs	r3, #1
 80161f0:	464a      	mov	r2, r9
 80161f2:	4631      	mov	r1, r6
 80161f4:	4628      	mov	r0, r5
 80161f6:	47b8      	blx	r7
 80161f8:	3001      	adds	r0, #1
 80161fa:	f43f ae92 	beq.w	8015f22 <_printf_float+0xba>
 80161fe:	f108 0801 	add.w	r8, r8, #1
 8016202:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016206:	1a9b      	subs	r3, r3, r2
 8016208:	eba3 030a 	sub.w	r3, r3, sl
 801620c:	4543      	cmp	r3, r8
 801620e:	dcee      	bgt.n	80161ee <_printf_float+0x386>
 8016210:	e74a      	b.n	80160a8 <_printf_float+0x240>
 8016212:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016214:	2a01      	cmp	r2, #1
 8016216:	dc01      	bgt.n	801621c <_printf_float+0x3b4>
 8016218:	07db      	lsls	r3, r3, #31
 801621a:	d53a      	bpl.n	8016292 <_printf_float+0x42a>
 801621c:	2301      	movs	r3, #1
 801621e:	4642      	mov	r2, r8
 8016220:	4631      	mov	r1, r6
 8016222:	4628      	mov	r0, r5
 8016224:	47b8      	blx	r7
 8016226:	3001      	adds	r0, #1
 8016228:	f43f ae7b 	beq.w	8015f22 <_printf_float+0xba>
 801622c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016230:	4631      	mov	r1, r6
 8016232:	4628      	mov	r0, r5
 8016234:	47b8      	blx	r7
 8016236:	3001      	adds	r0, #1
 8016238:	f108 0801 	add.w	r8, r8, #1
 801623c:	f43f ae71 	beq.w	8015f22 <_printf_float+0xba>
 8016240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016242:	2200      	movs	r2, #0
 8016244:	f103 3aff 	add.w	sl, r3, #4294967295
 8016248:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801624c:	2300      	movs	r3, #0
 801624e:	f7ea fc3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8016252:	b9c8      	cbnz	r0, 8016288 <_printf_float+0x420>
 8016254:	4653      	mov	r3, sl
 8016256:	4642      	mov	r2, r8
 8016258:	4631      	mov	r1, r6
 801625a:	4628      	mov	r0, r5
 801625c:	47b8      	blx	r7
 801625e:	3001      	adds	r0, #1
 8016260:	d10e      	bne.n	8016280 <_printf_float+0x418>
 8016262:	e65e      	b.n	8015f22 <_printf_float+0xba>
 8016264:	2301      	movs	r3, #1
 8016266:	4652      	mov	r2, sl
 8016268:	4631      	mov	r1, r6
 801626a:	4628      	mov	r0, r5
 801626c:	47b8      	blx	r7
 801626e:	3001      	adds	r0, #1
 8016270:	f43f ae57 	beq.w	8015f22 <_printf_float+0xba>
 8016274:	f108 0801 	add.w	r8, r8, #1
 8016278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801627a:	3b01      	subs	r3, #1
 801627c:	4543      	cmp	r3, r8
 801627e:	dcf1      	bgt.n	8016264 <_printf_float+0x3fc>
 8016280:	464b      	mov	r3, r9
 8016282:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016286:	e6de      	b.n	8016046 <_printf_float+0x1de>
 8016288:	f04f 0800 	mov.w	r8, #0
 801628c:	f104 0a1a 	add.w	sl, r4, #26
 8016290:	e7f2      	b.n	8016278 <_printf_float+0x410>
 8016292:	2301      	movs	r3, #1
 8016294:	e7df      	b.n	8016256 <_printf_float+0x3ee>
 8016296:	2301      	movs	r3, #1
 8016298:	464a      	mov	r2, r9
 801629a:	4631      	mov	r1, r6
 801629c:	4628      	mov	r0, r5
 801629e:	47b8      	blx	r7
 80162a0:	3001      	adds	r0, #1
 80162a2:	f43f ae3e 	beq.w	8015f22 <_printf_float+0xba>
 80162a6:	f108 0801 	add.w	r8, r8, #1
 80162aa:	68e3      	ldr	r3, [r4, #12]
 80162ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80162ae:	1a9b      	subs	r3, r3, r2
 80162b0:	4543      	cmp	r3, r8
 80162b2:	dcf0      	bgt.n	8016296 <_printf_float+0x42e>
 80162b4:	e6fc      	b.n	80160b0 <_printf_float+0x248>
 80162b6:	f04f 0800 	mov.w	r8, #0
 80162ba:	f104 0919 	add.w	r9, r4, #25
 80162be:	e7f4      	b.n	80162aa <_printf_float+0x442>
 80162c0:	2900      	cmp	r1, #0
 80162c2:	f43f ae8b 	beq.w	8015fdc <_printf_float+0x174>
 80162c6:	2300      	movs	r3, #0
 80162c8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80162cc:	ab09      	add	r3, sp, #36	; 0x24
 80162ce:	9300      	str	r3, [sp, #0]
 80162d0:	ec49 8b10 	vmov	d0, r8, r9
 80162d4:	6022      	str	r2, [r4, #0]
 80162d6:	f8cd a004 	str.w	sl, [sp, #4]
 80162da:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80162de:	4628      	mov	r0, r5
 80162e0:	f7ff fd2e 	bl	8015d40 <__cvt>
 80162e4:	4680      	mov	r8, r0
 80162e6:	e648      	b.n	8015f7a <_printf_float+0x112>

080162e8 <_printf_common>:
 80162e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80162ec:	4691      	mov	r9, r2
 80162ee:	461f      	mov	r7, r3
 80162f0:	688a      	ldr	r2, [r1, #8]
 80162f2:	690b      	ldr	r3, [r1, #16]
 80162f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80162f8:	4293      	cmp	r3, r2
 80162fa:	bfb8      	it	lt
 80162fc:	4613      	movlt	r3, r2
 80162fe:	f8c9 3000 	str.w	r3, [r9]
 8016302:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016306:	4606      	mov	r6, r0
 8016308:	460c      	mov	r4, r1
 801630a:	b112      	cbz	r2, 8016312 <_printf_common+0x2a>
 801630c:	3301      	adds	r3, #1
 801630e:	f8c9 3000 	str.w	r3, [r9]
 8016312:	6823      	ldr	r3, [r4, #0]
 8016314:	0699      	lsls	r1, r3, #26
 8016316:	bf42      	ittt	mi
 8016318:	f8d9 3000 	ldrmi.w	r3, [r9]
 801631c:	3302      	addmi	r3, #2
 801631e:	f8c9 3000 	strmi.w	r3, [r9]
 8016322:	6825      	ldr	r5, [r4, #0]
 8016324:	f015 0506 	ands.w	r5, r5, #6
 8016328:	d107      	bne.n	801633a <_printf_common+0x52>
 801632a:	f104 0a19 	add.w	sl, r4, #25
 801632e:	68e3      	ldr	r3, [r4, #12]
 8016330:	f8d9 2000 	ldr.w	r2, [r9]
 8016334:	1a9b      	subs	r3, r3, r2
 8016336:	42ab      	cmp	r3, r5
 8016338:	dc28      	bgt.n	801638c <_printf_common+0xa4>
 801633a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801633e:	6822      	ldr	r2, [r4, #0]
 8016340:	3300      	adds	r3, #0
 8016342:	bf18      	it	ne
 8016344:	2301      	movne	r3, #1
 8016346:	0692      	lsls	r2, r2, #26
 8016348:	d42d      	bmi.n	80163a6 <_printf_common+0xbe>
 801634a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801634e:	4639      	mov	r1, r7
 8016350:	4630      	mov	r0, r6
 8016352:	47c0      	blx	r8
 8016354:	3001      	adds	r0, #1
 8016356:	d020      	beq.n	801639a <_printf_common+0xb2>
 8016358:	6823      	ldr	r3, [r4, #0]
 801635a:	68e5      	ldr	r5, [r4, #12]
 801635c:	f8d9 2000 	ldr.w	r2, [r9]
 8016360:	f003 0306 	and.w	r3, r3, #6
 8016364:	2b04      	cmp	r3, #4
 8016366:	bf08      	it	eq
 8016368:	1aad      	subeq	r5, r5, r2
 801636a:	68a3      	ldr	r3, [r4, #8]
 801636c:	6922      	ldr	r2, [r4, #16]
 801636e:	bf0c      	ite	eq
 8016370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016374:	2500      	movne	r5, #0
 8016376:	4293      	cmp	r3, r2
 8016378:	bfc4      	itt	gt
 801637a:	1a9b      	subgt	r3, r3, r2
 801637c:	18ed      	addgt	r5, r5, r3
 801637e:	f04f 0900 	mov.w	r9, #0
 8016382:	341a      	adds	r4, #26
 8016384:	454d      	cmp	r5, r9
 8016386:	d11a      	bne.n	80163be <_printf_common+0xd6>
 8016388:	2000      	movs	r0, #0
 801638a:	e008      	b.n	801639e <_printf_common+0xb6>
 801638c:	2301      	movs	r3, #1
 801638e:	4652      	mov	r2, sl
 8016390:	4639      	mov	r1, r7
 8016392:	4630      	mov	r0, r6
 8016394:	47c0      	blx	r8
 8016396:	3001      	adds	r0, #1
 8016398:	d103      	bne.n	80163a2 <_printf_common+0xba>
 801639a:	f04f 30ff 	mov.w	r0, #4294967295
 801639e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163a2:	3501      	adds	r5, #1
 80163a4:	e7c3      	b.n	801632e <_printf_common+0x46>
 80163a6:	18e1      	adds	r1, r4, r3
 80163a8:	1c5a      	adds	r2, r3, #1
 80163aa:	2030      	movs	r0, #48	; 0x30
 80163ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80163b0:	4422      	add	r2, r4
 80163b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80163b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80163ba:	3302      	adds	r3, #2
 80163bc:	e7c5      	b.n	801634a <_printf_common+0x62>
 80163be:	2301      	movs	r3, #1
 80163c0:	4622      	mov	r2, r4
 80163c2:	4639      	mov	r1, r7
 80163c4:	4630      	mov	r0, r6
 80163c6:	47c0      	blx	r8
 80163c8:	3001      	adds	r0, #1
 80163ca:	d0e6      	beq.n	801639a <_printf_common+0xb2>
 80163cc:	f109 0901 	add.w	r9, r9, #1
 80163d0:	e7d8      	b.n	8016384 <_printf_common+0x9c>
	...

080163d4 <_printf_i>:
 80163d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80163d8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80163dc:	460c      	mov	r4, r1
 80163de:	7e09      	ldrb	r1, [r1, #24]
 80163e0:	b085      	sub	sp, #20
 80163e2:	296e      	cmp	r1, #110	; 0x6e
 80163e4:	4617      	mov	r7, r2
 80163e6:	4606      	mov	r6, r0
 80163e8:	4698      	mov	r8, r3
 80163ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80163ec:	f000 80b3 	beq.w	8016556 <_printf_i+0x182>
 80163f0:	d822      	bhi.n	8016438 <_printf_i+0x64>
 80163f2:	2963      	cmp	r1, #99	; 0x63
 80163f4:	d036      	beq.n	8016464 <_printf_i+0x90>
 80163f6:	d80a      	bhi.n	801640e <_printf_i+0x3a>
 80163f8:	2900      	cmp	r1, #0
 80163fa:	f000 80b9 	beq.w	8016570 <_printf_i+0x19c>
 80163fe:	2958      	cmp	r1, #88	; 0x58
 8016400:	f000 8083 	beq.w	801650a <_printf_i+0x136>
 8016404:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016408:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801640c:	e032      	b.n	8016474 <_printf_i+0xa0>
 801640e:	2964      	cmp	r1, #100	; 0x64
 8016410:	d001      	beq.n	8016416 <_printf_i+0x42>
 8016412:	2969      	cmp	r1, #105	; 0x69
 8016414:	d1f6      	bne.n	8016404 <_printf_i+0x30>
 8016416:	6820      	ldr	r0, [r4, #0]
 8016418:	6813      	ldr	r3, [r2, #0]
 801641a:	0605      	lsls	r5, r0, #24
 801641c:	f103 0104 	add.w	r1, r3, #4
 8016420:	d52a      	bpl.n	8016478 <_printf_i+0xa4>
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	6011      	str	r1, [r2, #0]
 8016426:	2b00      	cmp	r3, #0
 8016428:	da03      	bge.n	8016432 <_printf_i+0x5e>
 801642a:	222d      	movs	r2, #45	; 0x2d
 801642c:	425b      	negs	r3, r3
 801642e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016432:	486f      	ldr	r0, [pc, #444]	; (80165f0 <_printf_i+0x21c>)
 8016434:	220a      	movs	r2, #10
 8016436:	e039      	b.n	80164ac <_printf_i+0xd8>
 8016438:	2973      	cmp	r1, #115	; 0x73
 801643a:	f000 809d 	beq.w	8016578 <_printf_i+0x1a4>
 801643e:	d808      	bhi.n	8016452 <_printf_i+0x7e>
 8016440:	296f      	cmp	r1, #111	; 0x6f
 8016442:	d020      	beq.n	8016486 <_printf_i+0xb2>
 8016444:	2970      	cmp	r1, #112	; 0x70
 8016446:	d1dd      	bne.n	8016404 <_printf_i+0x30>
 8016448:	6823      	ldr	r3, [r4, #0]
 801644a:	f043 0320 	orr.w	r3, r3, #32
 801644e:	6023      	str	r3, [r4, #0]
 8016450:	e003      	b.n	801645a <_printf_i+0x86>
 8016452:	2975      	cmp	r1, #117	; 0x75
 8016454:	d017      	beq.n	8016486 <_printf_i+0xb2>
 8016456:	2978      	cmp	r1, #120	; 0x78
 8016458:	d1d4      	bne.n	8016404 <_printf_i+0x30>
 801645a:	2378      	movs	r3, #120	; 0x78
 801645c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016460:	4864      	ldr	r0, [pc, #400]	; (80165f4 <_printf_i+0x220>)
 8016462:	e055      	b.n	8016510 <_printf_i+0x13c>
 8016464:	6813      	ldr	r3, [r2, #0]
 8016466:	1d19      	adds	r1, r3, #4
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	6011      	str	r1, [r2, #0]
 801646c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016470:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016474:	2301      	movs	r3, #1
 8016476:	e08c      	b.n	8016592 <_printf_i+0x1be>
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	6011      	str	r1, [r2, #0]
 801647c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016480:	bf18      	it	ne
 8016482:	b21b      	sxthne	r3, r3
 8016484:	e7cf      	b.n	8016426 <_printf_i+0x52>
 8016486:	6813      	ldr	r3, [r2, #0]
 8016488:	6825      	ldr	r5, [r4, #0]
 801648a:	1d18      	adds	r0, r3, #4
 801648c:	6010      	str	r0, [r2, #0]
 801648e:	0628      	lsls	r0, r5, #24
 8016490:	d501      	bpl.n	8016496 <_printf_i+0xc2>
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	e002      	b.n	801649c <_printf_i+0xc8>
 8016496:	0668      	lsls	r0, r5, #25
 8016498:	d5fb      	bpl.n	8016492 <_printf_i+0xbe>
 801649a:	881b      	ldrh	r3, [r3, #0]
 801649c:	4854      	ldr	r0, [pc, #336]	; (80165f0 <_printf_i+0x21c>)
 801649e:	296f      	cmp	r1, #111	; 0x6f
 80164a0:	bf14      	ite	ne
 80164a2:	220a      	movne	r2, #10
 80164a4:	2208      	moveq	r2, #8
 80164a6:	2100      	movs	r1, #0
 80164a8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80164ac:	6865      	ldr	r5, [r4, #4]
 80164ae:	60a5      	str	r5, [r4, #8]
 80164b0:	2d00      	cmp	r5, #0
 80164b2:	f2c0 8095 	blt.w	80165e0 <_printf_i+0x20c>
 80164b6:	6821      	ldr	r1, [r4, #0]
 80164b8:	f021 0104 	bic.w	r1, r1, #4
 80164bc:	6021      	str	r1, [r4, #0]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d13d      	bne.n	801653e <_printf_i+0x16a>
 80164c2:	2d00      	cmp	r5, #0
 80164c4:	f040 808e 	bne.w	80165e4 <_printf_i+0x210>
 80164c8:	4665      	mov	r5, ip
 80164ca:	2a08      	cmp	r2, #8
 80164cc:	d10b      	bne.n	80164e6 <_printf_i+0x112>
 80164ce:	6823      	ldr	r3, [r4, #0]
 80164d0:	07db      	lsls	r3, r3, #31
 80164d2:	d508      	bpl.n	80164e6 <_printf_i+0x112>
 80164d4:	6923      	ldr	r3, [r4, #16]
 80164d6:	6862      	ldr	r2, [r4, #4]
 80164d8:	429a      	cmp	r2, r3
 80164da:	bfde      	ittt	le
 80164dc:	2330      	movle	r3, #48	; 0x30
 80164de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80164e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80164e6:	ebac 0305 	sub.w	r3, ip, r5
 80164ea:	6123      	str	r3, [r4, #16]
 80164ec:	f8cd 8000 	str.w	r8, [sp]
 80164f0:	463b      	mov	r3, r7
 80164f2:	aa03      	add	r2, sp, #12
 80164f4:	4621      	mov	r1, r4
 80164f6:	4630      	mov	r0, r6
 80164f8:	f7ff fef6 	bl	80162e8 <_printf_common>
 80164fc:	3001      	adds	r0, #1
 80164fe:	d14d      	bne.n	801659c <_printf_i+0x1c8>
 8016500:	f04f 30ff 	mov.w	r0, #4294967295
 8016504:	b005      	add	sp, #20
 8016506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801650a:	4839      	ldr	r0, [pc, #228]	; (80165f0 <_printf_i+0x21c>)
 801650c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016510:	6813      	ldr	r3, [r2, #0]
 8016512:	6821      	ldr	r1, [r4, #0]
 8016514:	1d1d      	adds	r5, r3, #4
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	6015      	str	r5, [r2, #0]
 801651a:	060a      	lsls	r2, r1, #24
 801651c:	d50b      	bpl.n	8016536 <_printf_i+0x162>
 801651e:	07ca      	lsls	r2, r1, #31
 8016520:	bf44      	itt	mi
 8016522:	f041 0120 	orrmi.w	r1, r1, #32
 8016526:	6021      	strmi	r1, [r4, #0]
 8016528:	b91b      	cbnz	r3, 8016532 <_printf_i+0x15e>
 801652a:	6822      	ldr	r2, [r4, #0]
 801652c:	f022 0220 	bic.w	r2, r2, #32
 8016530:	6022      	str	r2, [r4, #0]
 8016532:	2210      	movs	r2, #16
 8016534:	e7b7      	b.n	80164a6 <_printf_i+0xd2>
 8016536:	064d      	lsls	r5, r1, #25
 8016538:	bf48      	it	mi
 801653a:	b29b      	uxthmi	r3, r3
 801653c:	e7ef      	b.n	801651e <_printf_i+0x14a>
 801653e:	4665      	mov	r5, ip
 8016540:	fbb3 f1f2 	udiv	r1, r3, r2
 8016544:	fb02 3311 	mls	r3, r2, r1, r3
 8016548:	5cc3      	ldrb	r3, [r0, r3]
 801654a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801654e:	460b      	mov	r3, r1
 8016550:	2900      	cmp	r1, #0
 8016552:	d1f5      	bne.n	8016540 <_printf_i+0x16c>
 8016554:	e7b9      	b.n	80164ca <_printf_i+0xf6>
 8016556:	6813      	ldr	r3, [r2, #0]
 8016558:	6825      	ldr	r5, [r4, #0]
 801655a:	6961      	ldr	r1, [r4, #20]
 801655c:	1d18      	adds	r0, r3, #4
 801655e:	6010      	str	r0, [r2, #0]
 8016560:	0628      	lsls	r0, r5, #24
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	d501      	bpl.n	801656a <_printf_i+0x196>
 8016566:	6019      	str	r1, [r3, #0]
 8016568:	e002      	b.n	8016570 <_printf_i+0x19c>
 801656a:	066a      	lsls	r2, r5, #25
 801656c:	d5fb      	bpl.n	8016566 <_printf_i+0x192>
 801656e:	8019      	strh	r1, [r3, #0]
 8016570:	2300      	movs	r3, #0
 8016572:	6123      	str	r3, [r4, #16]
 8016574:	4665      	mov	r5, ip
 8016576:	e7b9      	b.n	80164ec <_printf_i+0x118>
 8016578:	6813      	ldr	r3, [r2, #0]
 801657a:	1d19      	adds	r1, r3, #4
 801657c:	6011      	str	r1, [r2, #0]
 801657e:	681d      	ldr	r5, [r3, #0]
 8016580:	6862      	ldr	r2, [r4, #4]
 8016582:	2100      	movs	r1, #0
 8016584:	4628      	mov	r0, r5
 8016586:	f7e9 fe2b 	bl	80001e0 <memchr>
 801658a:	b108      	cbz	r0, 8016590 <_printf_i+0x1bc>
 801658c:	1b40      	subs	r0, r0, r5
 801658e:	6060      	str	r0, [r4, #4]
 8016590:	6863      	ldr	r3, [r4, #4]
 8016592:	6123      	str	r3, [r4, #16]
 8016594:	2300      	movs	r3, #0
 8016596:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801659a:	e7a7      	b.n	80164ec <_printf_i+0x118>
 801659c:	6923      	ldr	r3, [r4, #16]
 801659e:	462a      	mov	r2, r5
 80165a0:	4639      	mov	r1, r7
 80165a2:	4630      	mov	r0, r6
 80165a4:	47c0      	blx	r8
 80165a6:	3001      	adds	r0, #1
 80165a8:	d0aa      	beq.n	8016500 <_printf_i+0x12c>
 80165aa:	6823      	ldr	r3, [r4, #0]
 80165ac:	079b      	lsls	r3, r3, #30
 80165ae:	d413      	bmi.n	80165d8 <_printf_i+0x204>
 80165b0:	68e0      	ldr	r0, [r4, #12]
 80165b2:	9b03      	ldr	r3, [sp, #12]
 80165b4:	4298      	cmp	r0, r3
 80165b6:	bfb8      	it	lt
 80165b8:	4618      	movlt	r0, r3
 80165ba:	e7a3      	b.n	8016504 <_printf_i+0x130>
 80165bc:	2301      	movs	r3, #1
 80165be:	464a      	mov	r2, r9
 80165c0:	4639      	mov	r1, r7
 80165c2:	4630      	mov	r0, r6
 80165c4:	47c0      	blx	r8
 80165c6:	3001      	adds	r0, #1
 80165c8:	d09a      	beq.n	8016500 <_printf_i+0x12c>
 80165ca:	3501      	adds	r5, #1
 80165cc:	68e3      	ldr	r3, [r4, #12]
 80165ce:	9a03      	ldr	r2, [sp, #12]
 80165d0:	1a9b      	subs	r3, r3, r2
 80165d2:	42ab      	cmp	r3, r5
 80165d4:	dcf2      	bgt.n	80165bc <_printf_i+0x1e8>
 80165d6:	e7eb      	b.n	80165b0 <_printf_i+0x1dc>
 80165d8:	2500      	movs	r5, #0
 80165da:	f104 0919 	add.w	r9, r4, #25
 80165de:	e7f5      	b.n	80165cc <_printf_i+0x1f8>
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d1ac      	bne.n	801653e <_printf_i+0x16a>
 80165e4:	7803      	ldrb	r3, [r0, #0]
 80165e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80165ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80165ee:	e76c      	b.n	80164ca <_printf_i+0xf6>
 80165f0:	0801b2ba 	.word	0x0801b2ba
 80165f4:	0801b2cb 	.word	0x0801b2cb

080165f8 <_scanf_float>:
 80165f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165fc:	469a      	mov	sl, r3
 80165fe:	688b      	ldr	r3, [r1, #8]
 8016600:	4616      	mov	r6, r2
 8016602:	1e5a      	subs	r2, r3, #1
 8016604:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016608:	b087      	sub	sp, #28
 801660a:	bf83      	ittte	hi
 801660c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8016610:	189b      	addhi	r3, r3, r2
 8016612:	9301      	strhi	r3, [sp, #4]
 8016614:	2300      	movls	r3, #0
 8016616:	bf86      	itte	hi
 8016618:	f240 135d 	movwhi	r3, #349	; 0x15d
 801661c:	608b      	strhi	r3, [r1, #8]
 801661e:	9301      	strls	r3, [sp, #4]
 8016620:	680b      	ldr	r3, [r1, #0]
 8016622:	4688      	mov	r8, r1
 8016624:	f04f 0b00 	mov.w	fp, #0
 8016628:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801662c:	f848 3b1c 	str.w	r3, [r8], #28
 8016630:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8016634:	4607      	mov	r7, r0
 8016636:	460c      	mov	r4, r1
 8016638:	4645      	mov	r5, r8
 801663a:	465a      	mov	r2, fp
 801663c:	46d9      	mov	r9, fp
 801663e:	f8cd b008 	str.w	fp, [sp, #8]
 8016642:	68a1      	ldr	r1, [r4, #8]
 8016644:	b181      	cbz	r1, 8016668 <_scanf_float+0x70>
 8016646:	6833      	ldr	r3, [r6, #0]
 8016648:	781b      	ldrb	r3, [r3, #0]
 801664a:	2b49      	cmp	r3, #73	; 0x49
 801664c:	d071      	beq.n	8016732 <_scanf_float+0x13a>
 801664e:	d84d      	bhi.n	80166ec <_scanf_float+0xf4>
 8016650:	2b39      	cmp	r3, #57	; 0x39
 8016652:	d840      	bhi.n	80166d6 <_scanf_float+0xde>
 8016654:	2b31      	cmp	r3, #49	; 0x31
 8016656:	f080 8088 	bcs.w	801676a <_scanf_float+0x172>
 801665a:	2b2d      	cmp	r3, #45	; 0x2d
 801665c:	f000 8090 	beq.w	8016780 <_scanf_float+0x188>
 8016660:	d815      	bhi.n	801668e <_scanf_float+0x96>
 8016662:	2b2b      	cmp	r3, #43	; 0x2b
 8016664:	f000 808c 	beq.w	8016780 <_scanf_float+0x188>
 8016668:	f1b9 0f00 	cmp.w	r9, #0
 801666c:	d003      	beq.n	8016676 <_scanf_float+0x7e>
 801666e:	6823      	ldr	r3, [r4, #0]
 8016670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016674:	6023      	str	r3, [r4, #0]
 8016676:	3a01      	subs	r2, #1
 8016678:	2a01      	cmp	r2, #1
 801667a:	f200 80ea 	bhi.w	8016852 <_scanf_float+0x25a>
 801667e:	4545      	cmp	r5, r8
 8016680:	f200 80dc 	bhi.w	801683c <_scanf_float+0x244>
 8016684:	2601      	movs	r6, #1
 8016686:	4630      	mov	r0, r6
 8016688:	b007      	add	sp, #28
 801668a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801668e:	2b2e      	cmp	r3, #46	; 0x2e
 8016690:	f000 809f 	beq.w	80167d2 <_scanf_float+0x1da>
 8016694:	2b30      	cmp	r3, #48	; 0x30
 8016696:	d1e7      	bne.n	8016668 <_scanf_float+0x70>
 8016698:	6820      	ldr	r0, [r4, #0]
 801669a:	f410 7f80 	tst.w	r0, #256	; 0x100
 801669e:	d064      	beq.n	801676a <_scanf_float+0x172>
 80166a0:	9b01      	ldr	r3, [sp, #4]
 80166a2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80166a6:	6020      	str	r0, [r4, #0]
 80166a8:	f109 0901 	add.w	r9, r9, #1
 80166ac:	b11b      	cbz	r3, 80166b6 <_scanf_float+0xbe>
 80166ae:	3b01      	subs	r3, #1
 80166b0:	3101      	adds	r1, #1
 80166b2:	9301      	str	r3, [sp, #4]
 80166b4:	60a1      	str	r1, [r4, #8]
 80166b6:	68a3      	ldr	r3, [r4, #8]
 80166b8:	3b01      	subs	r3, #1
 80166ba:	60a3      	str	r3, [r4, #8]
 80166bc:	6923      	ldr	r3, [r4, #16]
 80166be:	3301      	adds	r3, #1
 80166c0:	6123      	str	r3, [r4, #16]
 80166c2:	6873      	ldr	r3, [r6, #4]
 80166c4:	3b01      	subs	r3, #1
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	6073      	str	r3, [r6, #4]
 80166ca:	f340 80ac 	ble.w	8016826 <_scanf_float+0x22e>
 80166ce:	6833      	ldr	r3, [r6, #0]
 80166d0:	3301      	adds	r3, #1
 80166d2:	6033      	str	r3, [r6, #0]
 80166d4:	e7b5      	b.n	8016642 <_scanf_float+0x4a>
 80166d6:	2b45      	cmp	r3, #69	; 0x45
 80166d8:	f000 8085 	beq.w	80167e6 <_scanf_float+0x1ee>
 80166dc:	2b46      	cmp	r3, #70	; 0x46
 80166de:	d06a      	beq.n	80167b6 <_scanf_float+0x1be>
 80166e0:	2b41      	cmp	r3, #65	; 0x41
 80166e2:	d1c1      	bne.n	8016668 <_scanf_float+0x70>
 80166e4:	2a01      	cmp	r2, #1
 80166e6:	d1bf      	bne.n	8016668 <_scanf_float+0x70>
 80166e8:	2202      	movs	r2, #2
 80166ea:	e046      	b.n	801677a <_scanf_float+0x182>
 80166ec:	2b65      	cmp	r3, #101	; 0x65
 80166ee:	d07a      	beq.n	80167e6 <_scanf_float+0x1ee>
 80166f0:	d818      	bhi.n	8016724 <_scanf_float+0x12c>
 80166f2:	2b54      	cmp	r3, #84	; 0x54
 80166f4:	d066      	beq.n	80167c4 <_scanf_float+0x1cc>
 80166f6:	d811      	bhi.n	801671c <_scanf_float+0x124>
 80166f8:	2b4e      	cmp	r3, #78	; 0x4e
 80166fa:	d1b5      	bne.n	8016668 <_scanf_float+0x70>
 80166fc:	2a00      	cmp	r2, #0
 80166fe:	d146      	bne.n	801678e <_scanf_float+0x196>
 8016700:	f1b9 0f00 	cmp.w	r9, #0
 8016704:	d145      	bne.n	8016792 <_scanf_float+0x19a>
 8016706:	6821      	ldr	r1, [r4, #0]
 8016708:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801670c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016710:	d13f      	bne.n	8016792 <_scanf_float+0x19a>
 8016712:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016716:	6021      	str	r1, [r4, #0]
 8016718:	2201      	movs	r2, #1
 801671a:	e02e      	b.n	801677a <_scanf_float+0x182>
 801671c:	2b59      	cmp	r3, #89	; 0x59
 801671e:	d01e      	beq.n	801675e <_scanf_float+0x166>
 8016720:	2b61      	cmp	r3, #97	; 0x61
 8016722:	e7de      	b.n	80166e2 <_scanf_float+0xea>
 8016724:	2b6e      	cmp	r3, #110	; 0x6e
 8016726:	d0e9      	beq.n	80166fc <_scanf_float+0x104>
 8016728:	d815      	bhi.n	8016756 <_scanf_float+0x15e>
 801672a:	2b66      	cmp	r3, #102	; 0x66
 801672c:	d043      	beq.n	80167b6 <_scanf_float+0x1be>
 801672e:	2b69      	cmp	r3, #105	; 0x69
 8016730:	d19a      	bne.n	8016668 <_scanf_float+0x70>
 8016732:	f1bb 0f00 	cmp.w	fp, #0
 8016736:	d138      	bne.n	80167aa <_scanf_float+0x1b2>
 8016738:	f1b9 0f00 	cmp.w	r9, #0
 801673c:	d197      	bne.n	801666e <_scanf_float+0x76>
 801673e:	6821      	ldr	r1, [r4, #0]
 8016740:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016744:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016748:	d195      	bne.n	8016676 <_scanf_float+0x7e>
 801674a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801674e:	6021      	str	r1, [r4, #0]
 8016750:	f04f 0b01 	mov.w	fp, #1
 8016754:	e011      	b.n	801677a <_scanf_float+0x182>
 8016756:	2b74      	cmp	r3, #116	; 0x74
 8016758:	d034      	beq.n	80167c4 <_scanf_float+0x1cc>
 801675a:	2b79      	cmp	r3, #121	; 0x79
 801675c:	d184      	bne.n	8016668 <_scanf_float+0x70>
 801675e:	f1bb 0f07 	cmp.w	fp, #7
 8016762:	d181      	bne.n	8016668 <_scanf_float+0x70>
 8016764:	f04f 0b08 	mov.w	fp, #8
 8016768:	e007      	b.n	801677a <_scanf_float+0x182>
 801676a:	eb12 0f0b 	cmn.w	r2, fp
 801676e:	f47f af7b 	bne.w	8016668 <_scanf_float+0x70>
 8016772:	6821      	ldr	r1, [r4, #0]
 8016774:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8016778:	6021      	str	r1, [r4, #0]
 801677a:	702b      	strb	r3, [r5, #0]
 801677c:	3501      	adds	r5, #1
 801677e:	e79a      	b.n	80166b6 <_scanf_float+0xbe>
 8016780:	6821      	ldr	r1, [r4, #0]
 8016782:	0608      	lsls	r0, r1, #24
 8016784:	f57f af70 	bpl.w	8016668 <_scanf_float+0x70>
 8016788:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801678c:	e7f4      	b.n	8016778 <_scanf_float+0x180>
 801678e:	2a02      	cmp	r2, #2
 8016790:	d047      	beq.n	8016822 <_scanf_float+0x22a>
 8016792:	f1bb 0f01 	cmp.w	fp, #1
 8016796:	d003      	beq.n	80167a0 <_scanf_float+0x1a8>
 8016798:	f1bb 0f04 	cmp.w	fp, #4
 801679c:	f47f af64 	bne.w	8016668 <_scanf_float+0x70>
 80167a0:	f10b 0b01 	add.w	fp, fp, #1
 80167a4:	fa5f fb8b 	uxtb.w	fp, fp
 80167a8:	e7e7      	b.n	801677a <_scanf_float+0x182>
 80167aa:	f1bb 0f03 	cmp.w	fp, #3
 80167ae:	d0f7      	beq.n	80167a0 <_scanf_float+0x1a8>
 80167b0:	f1bb 0f05 	cmp.w	fp, #5
 80167b4:	e7f2      	b.n	801679c <_scanf_float+0x1a4>
 80167b6:	f1bb 0f02 	cmp.w	fp, #2
 80167ba:	f47f af55 	bne.w	8016668 <_scanf_float+0x70>
 80167be:	f04f 0b03 	mov.w	fp, #3
 80167c2:	e7da      	b.n	801677a <_scanf_float+0x182>
 80167c4:	f1bb 0f06 	cmp.w	fp, #6
 80167c8:	f47f af4e 	bne.w	8016668 <_scanf_float+0x70>
 80167cc:	f04f 0b07 	mov.w	fp, #7
 80167d0:	e7d3      	b.n	801677a <_scanf_float+0x182>
 80167d2:	6821      	ldr	r1, [r4, #0]
 80167d4:	0588      	lsls	r0, r1, #22
 80167d6:	f57f af47 	bpl.w	8016668 <_scanf_float+0x70>
 80167da:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80167de:	6021      	str	r1, [r4, #0]
 80167e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80167e4:	e7c9      	b.n	801677a <_scanf_float+0x182>
 80167e6:	6821      	ldr	r1, [r4, #0]
 80167e8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80167ec:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80167f0:	d006      	beq.n	8016800 <_scanf_float+0x208>
 80167f2:	0548      	lsls	r0, r1, #21
 80167f4:	f57f af38 	bpl.w	8016668 <_scanf_float+0x70>
 80167f8:	f1b9 0f00 	cmp.w	r9, #0
 80167fc:	f43f af3b 	beq.w	8016676 <_scanf_float+0x7e>
 8016800:	0588      	lsls	r0, r1, #22
 8016802:	bf58      	it	pl
 8016804:	9802      	ldrpl	r0, [sp, #8]
 8016806:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801680a:	bf58      	it	pl
 801680c:	eba9 0000 	subpl.w	r0, r9, r0
 8016810:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8016814:	bf58      	it	pl
 8016816:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801681a:	6021      	str	r1, [r4, #0]
 801681c:	f04f 0900 	mov.w	r9, #0
 8016820:	e7ab      	b.n	801677a <_scanf_float+0x182>
 8016822:	2203      	movs	r2, #3
 8016824:	e7a9      	b.n	801677a <_scanf_float+0x182>
 8016826:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801682a:	9205      	str	r2, [sp, #20]
 801682c:	4631      	mov	r1, r6
 801682e:	4638      	mov	r0, r7
 8016830:	4798      	blx	r3
 8016832:	9a05      	ldr	r2, [sp, #20]
 8016834:	2800      	cmp	r0, #0
 8016836:	f43f af04 	beq.w	8016642 <_scanf_float+0x4a>
 801683a:	e715      	b.n	8016668 <_scanf_float+0x70>
 801683c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016840:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016844:	4632      	mov	r2, r6
 8016846:	4638      	mov	r0, r7
 8016848:	4798      	blx	r3
 801684a:	6923      	ldr	r3, [r4, #16]
 801684c:	3b01      	subs	r3, #1
 801684e:	6123      	str	r3, [r4, #16]
 8016850:	e715      	b.n	801667e <_scanf_float+0x86>
 8016852:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016856:	2b06      	cmp	r3, #6
 8016858:	d80a      	bhi.n	8016870 <_scanf_float+0x278>
 801685a:	f1bb 0f02 	cmp.w	fp, #2
 801685e:	d968      	bls.n	8016932 <_scanf_float+0x33a>
 8016860:	f1ab 0b03 	sub.w	fp, fp, #3
 8016864:	fa5f fb8b 	uxtb.w	fp, fp
 8016868:	eba5 0b0b 	sub.w	fp, r5, fp
 801686c:	455d      	cmp	r5, fp
 801686e:	d14b      	bne.n	8016908 <_scanf_float+0x310>
 8016870:	6823      	ldr	r3, [r4, #0]
 8016872:	05da      	lsls	r2, r3, #23
 8016874:	d51f      	bpl.n	80168b6 <_scanf_float+0x2be>
 8016876:	055b      	lsls	r3, r3, #21
 8016878:	d468      	bmi.n	801694c <_scanf_float+0x354>
 801687a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801687e:	6923      	ldr	r3, [r4, #16]
 8016880:	2965      	cmp	r1, #101	; 0x65
 8016882:	f103 33ff 	add.w	r3, r3, #4294967295
 8016886:	f105 3bff 	add.w	fp, r5, #4294967295
 801688a:	6123      	str	r3, [r4, #16]
 801688c:	d00d      	beq.n	80168aa <_scanf_float+0x2b2>
 801688e:	2945      	cmp	r1, #69	; 0x45
 8016890:	d00b      	beq.n	80168aa <_scanf_float+0x2b2>
 8016892:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016896:	4632      	mov	r2, r6
 8016898:	4638      	mov	r0, r7
 801689a:	4798      	blx	r3
 801689c:	6923      	ldr	r3, [r4, #16]
 801689e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80168a2:	3b01      	subs	r3, #1
 80168a4:	f1a5 0b02 	sub.w	fp, r5, #2
 80168a8:	6123      	str	r3, [r4, #16]
 80168aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80168ae:	4632      	mov	r2, r6
 80168b0:	4638      	mov	r0, r7
 80168b2:	4798      	blx	r3
 80168b4:	465d      	mov	r5, fp
 80168b6:	6826      	ldr	r6, [r4, #0]
 80168b8:	f016 0610 	ands.w	r6, r6, #16
 80168bc:	d17a      	bne.n	80169b4 <_scanf_float+0x3bc>
 80168be:	702e      	strb	r6, [r5, #0]
 80168c0:	6823      	ldr	r3, [r4, #0]
 80168c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80168c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80168ca:	d142      	bne.n	8016952 <_scanf_float+0x35a>
 80168cc:	9b02      	ldr	r3, [sp, #8]
 80168ce:	eba9 0303 	sub.w	r3, r9, r3
 80168d2:	425a      	negs	r2, r3
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d149      	bne.n	801696c <_scanf_float+0x374>
 80168d8:	2200      	movs	r2, #0
 80168da:	4641      	mov	r1, r8
 80168dc:	4638      	mov	r0, r7
 80168de:	f000 fee7 	bl	80176b0 <_strtod_r>
 80168e2:	6825      	ldr	r5, [r4, #0]
 80168e4:	f8da 3000 	ldr.w	r3, [sl]
 80168e8:	f015 0f02 	tst.w	r5, #2
 80168ec:	f103 0204 	add.w	r2, r3, #4
 80168f0:	ec59 8b10 	vmov	r8, r9, d0
 80168f4:	f8ca 2000 	str.w	r2, [sl]
 80168f8:	d043      	beq.n	8016982 <_scanf_float+0x38a>
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	e9c3 8900 	strd	r8, r9, [r3]
 8016900:	68e3      	ldr	r3, [r4, #12]
 8016902:	3301      	adds	r3, #1
 8016904:	60e3      	str	r3, [r4, #12]
 8016906:	e6be      	b.n	8016686 <_scanf_float+0x8e>
 8016908:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801690c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016910:	4632      	mov	r2, r6
 8016912:	4638      	mov	r0, r7
 8016914:	4798      	blx	r3
 8016916:	6923      	ldr	r3, [r4, #16]
 8016918:	3b01      	subs	r3, #1
 801691a:	6123      	str	r3, [r4, #16]
 801691c:	e7a6      	b.n	801686c <_scanf_float+0x274>
 801691e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016922:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016926:	4632      	mov	r2, r6
 8016928:	4638      	mov	r0, r7
 801692a:	4798      	blx	r3
 801692c:	6923      	ldr	r3, [r4, #16]
 801692e:	3b01      	subs	r3, #1
 8016930:	6123      	str	r3, [r4, #16]
 8016932:	4545      	cmp	r5, r8
 8016934:	d8f3      	bhi.n	801691e <_scanf_float+0x326>
 8016936:	e6a5      	b.n	8016684 <_scanf_float+0x8c>
 8016938:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801693c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016940:	4632      	mov	r2, r6
 8016942:	4638      	mov	r0, r7
 8016944:	4798      	blx	r3
 8016946:	6923      	ldr	r3, [r4, #16]
 8016948:	3b01      	subs	r3, #1
 801694a:	6123      	str	r3, [r4, #16]
 801694c:	4545      	cmp	r5, r8
 801694e:	d8f3      	bhi.n	8016938 <_scanf_float+0x340>
 8016950:	e698      	b.n	8016684 <_scanf_float+0x8c>
 8016952:	9b03      	ldr	r3, [sp, #12]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d0bf      	beq.n	80168d8 <_scanf_float+0x2e0>
 8016958:	9904      	ldr	r1, [sp, #16]
 801695a:	230a      	movs	r3, #10
 801695c:	4632      	mov	r2, r6
 801695e:	3101      	adds	r1, #1
 8016960:	4638      	mov	r0, r7
 8016962:	f000 ff31 	bl	80177c8 <_strtol_r>
 8016966:	9b03      	ldr	r3, [sp, #12]
 8016968:	9d04      	ldr	r5, [sp, #16]
 801696a:	1ac2      	subs	r2, r0, r3
 801696c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016970:	429d      	cmp	r5, r3
 8016972:	bf28      	it	cs
 8016974:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016978:	490f      	ldr	r1, [pc, #60]	; (80169b8 <_scanf_float+0x3c0>)
 801697a:	4628      	mov	r0, r5
 801697c:	f000 f868 	bl	8016a50 <siprintf>
 8016980:	e7aa      	b.n	80168d8 <_scanf_float+0x2e0>
 8016982:	f015 0504 	ands.w	r5, r5, #4
 8016986:	d1b8      	bne.n	80168fa <_scanf_float+0x302>
 8016988:	681f      	ldr	r7, [r3, #0]
 801698a:	ee10 2a10 	vmov	r2, s0
 801698e:	464b      	mov	r3, r9
 8016990:	ee10 0a10 	vmov	r0, s0
 8016994:	4649      	mov	r1, r9
 8016996:	f7ea f8c9 	bl	8000b2c <__aeabi_dcmpun>
 801699a:	b128      	cbz	r0, 80169a8 <_scanf_float+0x3b0>
 801699c:	4628      	mov	r0, r5
 801699e:	f000 f81d 	bl	80169dc <nanf>
 80169a2:	ed87 0a00 	vstr	s0, [r7]
 80169a6:	e7ab      	b.n	8016900 <_scanf_float+0x308>
 80169a8:	4640      	mov	r0, r8
 80169aa:	4649      	mov	r1, r9
 80169ac:	f7ea f91c 	bl	8000be8 <__aeabi_d2f>
 80169b0:	6038      	str	r0, [r7, #0]
 80169b2:	e7a5      	b.n	8016900 <_scanf_float+0x308>
 80169b4:	2600      	movs	r6, #0
 80169b6:	e666      	b.n	8016686 <_scanf_float+0x8e>
 80169b8:	0801b2dc 	.word	0x0801b2dc

080169bc <_sbrk_r>:
 80169bc:	b538      	push	{r3, r4, r5, lr}
 80169be:	4c06      	ldr	r4, [pc, #24]	; (80169d8 <_sbrk_r+0x1c>)
 80169c0:	2300      	movs	r3, #0
 80169c2:	4605      	mov	r5, r0
 80169c4:	4608      	mov	r0, r1
 80169c6:	6023      	str	r3, [r4, #0]
 80169c8:	f7f4 fade 	bl	800af88 <_sbrk>
 80169cc:	1c43      	adds	r3, r0, #1
 80169ce:	d102      	bne.n	80169d6 <_sbrk_r+0x1a>
 80169d0:	6823      	ldr	r3, [r4, #0]
 80169d2:	b103      	cbz	r3, 80169d6 <_sbrk_r+0x1a>
 80169d4:	602b      	str	r3, [r5, #0]
 80169d6:	bd38      	pop	{r3, r4, r5, pc}
 80169d8:	20006b6c 	.word	0x20006b6c

080169dc <nanf>:
 80169dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80169e4 <nanf+0x8>
 80169e0:	4770      	bx	lr
 80169e2:	bf00      	nop
 80169e4:	7fc00000 	.word	0x7fc00000

080169e8 <sniprintf>:
 80169e8:	b40c      	push	{r2, r3}
 80169ea:	b530      	push	{r4, r5, lr}
 80169ec:	4b17      	ldr	r3, [pc, #92]	; (8016a4c <sniprintf+0x64>)
 80169ee:	1e0c      	subs	r4, r1, #0
 80169f0:	b09d      	sub	sp, #116	; 0x74
 80169f2:	681d      	ldr	r5, [r3, #0]
 80169f4:	da08      	bge.n	8016a08 <sniprintf+0x20>
 80169f6:	238b      	movs	r3, #139	; 0x8b
 80169f8:	602b      	str	r3, [r5, #0]
 80169fa:	f04f 30ff 	mov.w	r0, #4294967295
 80169fe:	b01d      	add	sp, #116	; 0x74
 8016a00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016a04:	b002      	add	sp, #8
 8016a06:	4770      	bx	lr
 8016a08:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016a0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016a10:	bf14      	ite	ne
 8016a12:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016a16:	4623      	moveq	r3, r4
 8016a18:	9304      	str	r3, [sp, #16]
 8016a1a:	9307      	str	r3, [sp, #28]
 8016a1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016a20:	9002      	str	r0, [sp, #8]
 8016a22:	9006      	str	r0, [sp, #24]
 8016a24:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016a28:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016a2a:	ab21      	add	r3, sp, #132	; 0x84
 8016a2c:	a902      	add	r1, sp, #8
 8016a2e:	4628      	mov	r0, r5
 8016a30:	9301      	str	r3, [sp, #4]
 8016a32:	f002 fcc9 	bl	80193c8 <_svfiprintf_r>
 8016a36:	1c43      	adds	r3, r0, #1
 8016a38:	bfbc      	itt	lt
 8016a3a:	238b      	movlt	r3, #139	; 0x8b
 8016a3c:	602b      	strlt	r3, [r5, #0]
 8016a3e:	2c00      	cmp	r4, #0
 8016a40:	d0dd      	beq.n	80169fe <sniprintf+0x16>
 8016a42:	9b02      	ldr	r3, [sp, #8]
 8016a44:	2200      	movs	r2, #0
 8016a46:	701a      	strb	r2, [r3, #0]
 8016a48:	e7d9      	b.n	80169fe <sniprintf+0x16>
 8016a4a:	bf00      	nop
 8016a4c:	200009ac 	.word	0x200009ac

08016a50 <siprintf>:
 8016a50:	b40e      	push	{r1, r2, r3}
 8016a52:	b500      	push	{lr}
 8016a54:	b09c      	sub	sp, #112	; 0x70
 8016a56:	ab1d      	add	r3, sp, #116	; 0x74
 8016a58:	9002      	str	r0, [sp, #8]
 8016a5a:	9006      	str	r0, [sp, #24]
 8016a5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016a60:	4809      	ldr	r0, [pc, #36]	; (8016a88 <siprintf+0x38>)
 8016a62:	9107      	str	r1, [sp, #28]
 8016a64:	9104      	str	r1, [sp, #16]
 8016a66:	4909      	ldr	r1, [pc, #36]	; (8016a8c <siprintf+0x3c>)
 8016a68:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a6c:	9105      	str	r1, [sp, #20]
 8016a6e:	6800      	ldr	r0, [r0, #0]
 8016a70:	9301      	str	r3, [sp, #4]
 8016a72:	a902      	add	r1, sp, #8
 8016a74:	f002 fca8 	bl	80193c8 <_svfiprintf_r>
 8016a78:	9b02      	ldr	r3, [sp, #8]
 8016a7a:	2200      	movs	r2, #0
 8016a7c:	701a      	strb	r2, [r3, #0]
 8016a7e:	b01c      	add	sp, #112	; 0x70
 8016a80:	f85d eb04 	ldr.w	lr, [sp], #4
 8016a84:	b003      	add	sp, #12
 8016a86:	4770      	bx	lr
 8016a88:	200009ac 	.word	0x200009ac
 8016a8c:	ffff0208 	.word	0xffff0208

08016a90 <sulp>:
 8016a90:	b570      	push	{r4, r5, r6, lr}
 8016a92:	4604      	mov	r4, r0
 8016a94:	460d      	mov	r5, r1
 8016a96:	ec45 4b10 	vmov	d0, r4, r5
 8016a9a:	4616      	mov	r6, r2
 8016a9c:	f002 fb06 	bl	80190ac <__ulp>
 8016aa0:	ec51 0b10 	vmov	r0, r1, d0
 8016aa4:	b17e      	cbz	r6, 8016ac6 <sulp+0x36>
 8016aa6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016aaa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	dd09      	ble.n	8016ac6 <sulp+0x36>
 8016ab2:	051b      	lsls	r3, r3, #20
 8016ab4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016ab8:	2400      	movs	r4, #0
 8016aba:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016abe:	4622      	mov	r2, r4
 8016ac0:	462b      	mov	r3, r5
 8016ac2:	f7e9 fd99 	bl	80005f8 <__aeabi_dmul>
 8016ac6:	bd70      	pop	{r4, r5, r6, pc}

08016ac8 <_strtod_l>:
 8016ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016acc:	461f      	mov	r7, r3
 8016ace:	b0a1      	sub	sp, #132	; 0x84
 8016ad0:	2300      	movs	r3, #0
 8016ad2:	4681      	mov	r9, r0
 8016ad4:	4638      	mov	r0, r7
 8016ad6:	460e      	mov	r6, r1
 8016ad8:	9217      	str	r2, [sp, #92]	; 0x5c
 8016ada:	931c      	str	r3, [sp, #112]	; 0x70
 8016adc:	f001 fff5 	bl	8018aca <__localeconv_l>
 8016ae0:	4680      	mov	r8, r0
 8016ae2:	6800      	ldr	r0, [r0, #0]
 8016ae4:	f7e9 fb74 	bl	80001d0 <strlen>
 8016ae8:	f04f 0a00 	mov.w	sl, #0
 8016aec:	4604      	mov	r4, r0
 8016aee:	f04f 0b00 	mov.w	fp, #0
 8016af2:	961b      	str	r6, [sp, #108]	; 0x6c
 8016af4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016af6:	781a      	ldrb	r2, [r3, #0]
 8016af8:	2a0d      	cmp	r2, #13
 8016afa:	d832      	bhi.n	8016b62 <_strtod_l+0x9a>
 8016afc:	2a09      	cmp	r2, #9
 8016afe:	d236      	bcs.n	8016b6e <_strtod_l+0xa6>
 8016b00:	2a00      	cmp	r2, #0
 8016b02:	d03e      	beq.n	8016b82 <_strtod_l+0xba>
 8016b04:	2300      	movs	r3, #0
 8016b06:	930d      	str	r3, [sp, #52]	; 0x34
 8016b08:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8016b0a:	782b      	ldrb	r3, [r5, #0]
 8016b0c:	2b30      	cmp	r3, #48	; 0x30
 8016b0e:	f040 80ac 	bne.w	8016c6a <_strtod_l+0x1a2>
 8016b12:	786b      	ldrb	r3, [r5, #1]
 8016b14:	2b58      	cmp	r3, #88	; 0x58
 8016b16:	d001      	beq.n	8016b1c <_strtod_l+0x54>
 8016b18:	2b78      	cmp	r3, #120	; 0x78
 8016b1a:	d167      	bne.n	8016bec <_strtod_l+0x124>
 8016b1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016b1e:	9301      	str	r3, [sp, #4]
 8016b20:	ab1c      	add	r3, sp, #112	; 0x70
 8016b22:	9300      	str	r3, [sp, #0]
 8016b24:	9702      	str	r7, [sp, #8]
 8016b26:	ab1d      	add	r3, sp, #116	; 0x74
 8016b28:	4a88      	ldr	r2, [pc, #544]	; (8016d4c <_strtod_l+0x284>)
 8016b2a:	a91b      	add	r1, sp, #108	; 0x6c
 8016b2c:	4648      	mov	r0, r9
 8016b2e:	f001 fcf2 	bl	8018516 <__gethex>
 8016b32:	f010 0407 	ands.w	r4, r0, #7
 8016b36:	4606      	mov	r6, r0
 8016b38:	d005      	beq.n	8016b46 <_strtod_l+0x7e>
 8016b3a:	2c06      	cmp	r4, #6
 8016b3c:	d12b      	bne.n	8016b96 <_strtod_l+0xce>
 8016b3e:	3501      	adds	r5, #1
 8016b40:	2300      	movs	r3, #0
 8016b42:	951b      	str	r5, [sp, #108]	; 0x6c
 8016b44:	930d      	str	r3, [sp, #52]	; 0x34
 8016b46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	f040 859a 	bne.w	8017682 <_strtod_l+0xbba>
 8016b4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016b50:	b1e3      	cbz	r3, 8016b8c <_strtod_l+0xc4>
 8016b52:	4652      	mov	r2, sl
 8016b54:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016b58:	ec43 2b10 	vmov	d0, r2, r3
 8016b5c:	b021      	add	sp, #132	; 0x84
 8016b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b62:	2a2b      	cmp	r2, #43	; 0x2b
 8016b64:	d015      	beq.n	8016b92 <_strtod_l+0xca>
 8016b66:	2a2d      	cmp	r2, #45	; 0x2d
 8016b68:	d004      	beq.n	8016b74 <_strtod_l+0xac>
 8016b6a:	2a20      	cmp	r2, #32
 8016b6c:	d1ca      	bne.n	8016b04 <_strtod_l+0x3c>
 8016b6e:	3301      	adds	r3, #1
 8016b70:	931b      	str	r3, [sp, #108]	; 0x6c
 8016b72:	e7bf      	b.n	8016af4 <_strtod_l+0x2c>
 8016b74:	2201      	movs	r2, #1
 8016b76:	920d      	str	r2, [sp, #52]	; 0x34
 8016b78:	1c5a      	adds	r2, r3, #1
 8016b7a:	921b      	str	r2, [sp, #108]	; 0x6c
 8016b7c:	785b      	ldrb	r3, [r3, #1]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d1c2      	bne.n	8016b08 <_strtod_l+0x40>
 8016b82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016b84:	961b      	str	r6, [sp, #108]	; 0x6c
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	f040 8579 	bne.w	801767e <_strtod_l+0xbb6>
 8016b8c:	4652      	mov	r2, sl
 8016b8e:	465b      	mov	r3, fp
 8016b90:	e7e2      	b.n	8016b58 <_strtod_l+0x90>
 8016b92:	2200      	movs	r2, #0
 8016b94:	e7ef      	b.n	8016b76 <_strtod_l+0xae>
 8016b96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016b98:	b13a      	cbz	r2, 8016baa <_strtod_l+0xe2>
 8016b9a:	2135      	movs	r1, #53	; 0x35
 8016b9c:	a81e      	add	r0, sp, #120	; 0x78
 8016b9e:	f002 fb7d 	bl	801929c <__copybits>
 8016ba2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016ba4:	4648      	mov	r0, r9
 8016ba6:	f001 ffe9 	bl	8018b7c <_Bfree>
 8016baa:	3c01      	subs	r4, #1
 8016bac:	2c04      	cmp	r4, #4
 8016bae:	d806      	bhi.n	8016bbe <_strtod_l+0xf6>
 8016bb0:	e8df f004 	tbb	[pc, r4]
 8016bb4:	1714030a 	.word	0x1714030a
 8016bb8:	0a          	.byte	0x0a
 8016bb9:	00          	.byte	0x00
 8016bba:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8016bbe:	0730      	lsls	r0, r6, #28
 8016bc0:	d5c1      	bpl.n	8016b46 <_strtod_l+0x7e>
 8016bc2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016bc6:	e7be      	b.n	8016b46 <_strtod_l+0x7e>
 8016bc8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8016bcc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016bce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016bd2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016bd6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016bda:	e7f0      	b.n	8016bbe <_strtod_l+0xf6>
 8016bdc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016d50 <_strtod_l+0x288>
 8016be0:	e7ed      	b.n	8016bbe <_strtod_l+0xf6>
 8016be2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016be6:	f04f 3aff 	mov.w	sl, #4294967295
 8016bea:	e7e8      	b.n	8016bbe <_strtod_l+0xf6>
 8016bec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016bee:	1c5a      	adds	r2, r3, #1
 8016bf0:	921b      	str	r2, [sp, #108]	; 0x6c
 8016bf2:	785b      	ldrb	r3, [r3, #1]
 8016bf4:	2b30      	cmp	r3, #48	; 0x30
 8016bf6:	d0f9      	beq.n	8016bec <_strtod_l+0x124>
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d0a4      	beq.n	8016b46 <_strtod_l+0x7e>
 8016bfc:	2301      	movs	r3, #1
 8016bfe:	2500      	movs	r5, #0
 8016c00:	9306      	str	r3, [sp, #24]
 8016c02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016c04:	9308      	str	r3, [sp, #32]
 8016c06:	9507      	str	r5, [sp, #28]
 8016c08:	9505      	str	r5, [sp, #20]
 8016c0a:	220a      	movs	r2, #10
 8016c0c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016c0e:	7807      	ldrb	r7, [r0, #0]
 8016c10:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016c14:	b2d9      	uxtb	r1, r3
 8016c16:	2909      	cmp	r1, #9
 8016c18:	d929      	bls.n	8016c6e <_strtod_l+0x1a6>
 8016c1a:	4622      	mov	r2, r4
 8016c1c:	f8d8 1000 	ldr.w	r1, [r8]
 8016c20:	f002 fcca 	bl	80195b8 <strncmp>
 8016c24:	2800      	cmp	r0, #0
 8016c26:	d031      	beq.n	8016c8c <_strtod_l+0x1c4>
 8016c28:	2000      	movs	r0, #0
 8016c2a:	9c05      	ldr	r4, [sp, #20]
 8016c2c:	9004      	str	r0, [sp, #16]
 8016c2e:	463b      	mov	r3, r7
 8016c30:	4602      	mov	r2, r0
 8016c32:	2b65      	cmp	r3, #101	; 0x65
 8016c34:	d001      	beq.n	8016c3a <_strtod_l+0x172>
 8016c36:	2b45      	cmp	r3, #69	; 0x45
 8016c38:	d114      	bne.n	8016c64 <_strtod_l+0x19c>
 8016c3a:	b924      	cbnz	r4, 8016c46 <_strtod_l+0x17e>
 8016c3c:	b910      	cbnz	r0, 8016c44 <_strtod_l+0x17c>
 8016c3e:	9b06      	ldr	r3, [sp, #24]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d09e      	beq.n	8016b82 <_strtod_l+0xba>
 8016c44:	2400      	movs	r4, #0
 8016c46:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016c48:	1c73      	adds	r3, r6, #1
 8016c4a:	931b      	str	r3, [sp, #108]	; 0x6c
 8016c4c:	7873      	ldrb	r3, [r6, #1]
 8016c4e:	2b2b      	cmp	r3, #43	; 0x2b
 8016c50:	d078      	beq.n	8016d44 <_strtod_l+0x27c>
 8016c52:	2b2d      	cmp	r3, #45	; 0x2d
 8016c54:	d070      	beq.n	8016d38 <_strtod_l+0x270>
 8016c56:	f04f 0c00 	mov.w	ip, #0
 8016c5a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8016c5e:	2f09      	cmp	r7, #9
 8016c60:	d97c      	bls.n	8016d5c <_strtod_l+0x294>
 8016c62:	961b      	str	r6, [sp, #108]	; 0x6c
 8016c64:	f04f 0e00 	mov.w	lr, #0
 8016c68:	e09a      	b.n	8016da0 <_strtod_l+0x2d8>
 8016c6a:	2300      	movs	r3, #0
 8016c6c:	e7c7      	b.n	8016bfe <_strtod_l+0x136>
 8016c6e:	9905      	ldr	r1, [sp, #20]
 8016c70:	2908      	cmp	r1, #8
 8016c72:	bfdd      	ittte	le
 8016c74:	9907      	ldrle	r1, [sp, #28]
 8016c76:	fb02 3301 	mlale	r3, r2, r1, r3
 8016c7a:	9307      	strle	r3, [sp, #28]
 8016c7c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016c80:	9b05      	ldr	r3, [sp, #20]
 8016c82:	3001      	adds	r0, #1
 8016c84:	3301      	adds	r3, #1
 8016c86:	9305      	str	r3, [sp, #20]
 8016c88:	901b      	str	r0, [sp, #108]	; 0x6c
 8016c8a:	e7bf      	b.n	8016c0c <_strtod_l+0x144>
 8016c8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016c8e:	191a      	adds	r2, r3, r4
 8016c90:	921b      	str	r2, [sp, #108]	; 0x6c
 8016c92:	9a05      	ldr	r2, [sp, #20]
 8016c94:	5d1b      	ldrb	r3, [r3, r4]
 8016c96:	2a00      	cmp	r2, #0
 8016c98:	d037      	beq.n	8016d0a <_strtod_l+0x242>
 8016c9a:	9c05      	ldr	r4, [sp, #20]
 8016c9c:	4602      	mov	r2, r0
 8016c9e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016ca2:	2909      	cmp	r1, #9
 8016ca4:	d913      	bls.n	8016cce <_strtod_l+0x206>
 8016ca6:	2101      	movs	r1, #1
 8016ca8:	9104      	str	r1, [sp, #16]
 8016caa:	e7c2      	b.n	8016c32 <_strtod_l+0x16a>
 8016cac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016cae:	1c5a      	adds	r2, r3, #1
 8016cb0:	921b      	str	r2, [sp, #108]	; 0x6c
 8016cb2:	785b      	ldrb	r3, [r3, #1]
 8016cb4:	3001      	adds	r0, #1
 8016cb6:	2b30      	cmp	r3, #48	; 0x30
 8016cb8:	d0f8      	beq.n	8016cac <_strtod_l+0x1e4>
 8016cba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016cbe:	2a08      	cmp	r2, #8
 8016cc0:	f200 84e4 	bhi.w	801768c <_strtod_l+0xbc4>
 8016cc4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016cc6:	9208      	str	r2, [sp, #32]
 8016cc8:	4602      	mov	r2, r0
 8016cca:	2000      	movs	r0, #0
 8016ccc:	4604      	mov	r4, r0
 8016cce:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8016cd2:	f100 0101 	add.w	r1, r0, #1
 8016cd6:	d012      	beq.n	8016cfe <_strtod_l+0x236>
 8016cd8:	440a      	add	r2, r1
 8016cda:	eb00 0c04 	add.w	ip, r0, r4
 8016cde:	4621      	mov	r1, r4
 8016ce0:	270a      	movs	r7, #10
 8016ce2:	458c      	cmp	ip, r1
 8016ce4:	d113      	bne.n	8016d0e <_strtod_l+0x246>
 8016ce6:	1821      	adds	r1, r4, r0
 8016ce8:	2908      	cmp	r1, #8
 8016cea:	f104 0401 	add.w	r4, r4, #1
 8016cee:	4404      	add	r4, r0
 8016cf0:	dc19      	bgt.n	8016d26 <_strtod_l+0x25e>
 8016cf2:	9b07      	ldr	r3, [sp, #28]
 8016cf4:	210a      	movs	r1, #10
 8016cf6:	fb01 e303 	mla	r3, r1, r3, lr
 8016cfa:	9307      	str	r3, [sp, #28]
 8016cfc:	2100      	movs	r1, #0
 8016cfe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016d00:	1c58      	adds	r0, r3, #1
 8016d02:	901b      	str	r0, [sp, #108]	; 0x6c
 8016d04:	785b      	ldrb	r3, [r3, #1]
 8016d06:	4608      	mov	r0, r1
 8016d08:	e7c9      	b.n	8016c9e <_strtod_l+0x1d6>
 8016d0a:	9805      	ldr	r0, [sp, #20]
 8016d0c:	e7d3      	b.n	8016cb6 <_strtod_l+0x1ee>
 8016d0e:	2908      	cmp	r1, #8
 8016d10:	f101 0101 	add.w	r1, r1, #1
 8016d14:	dc03      	bgt.n	8016d1e <_strtod_l+0x256>
 8016d16:	9b07      	ldr	r3, [sp, #28]
 8016d18:	437b      	muls	r3, r7
 8016d1a:	9307      	str	r3, [sp, #28]
 8016d1c:	e7e1      	b.n	8016ce2 <_strtod_l+0x21a>
 8016d1e:	2910      	cmp	r1, #16
 8016d20:	bfd8      	it	le
 8016d22:	437d      	mulle	r5, r7
 8016d24:	e7dd      	b.n	8016ce2 <_strtod_l+0x21a>
 8016d26:	2c10      	cmp	r4, #16
 8016d28:	bfdc      	itt	le
 8016d2a:	210a      	movle	r1, #10
 8016d2c:	fb01 e505 	mlale	r5, r1, r5, lr
 8016d30:	e7e4      	b.n	8016cfc <_strtod_l+0x234>
 8016d32:	2301      	movs	r3, #1
 8016d34:	9304      	str	r3, [sp, #16]
 8016d36:	e781      	b.n	8016c3c <_strtod_l+0x174>
 8016d38:	f04f 0c01 	mov.w	ip, #1
 8016d3c:	1cb3      	adds	r3, r6, #2
 8016d3e:	931b      	str	r3, [sp, #108]	; 0x6c
 8016d40:	78b3      	ldrb	r3, [r6, #2]
 8016d42:	e78a      	b.n	8016c5a <_strtod_l+0x192>
 8016d44:	f04f 0c00 	mov.w	ip, #0
 8016d48:	e7f8      	b.n	8016d3c <_strtod_l+0x274>
 8016d4a:	bf00      	nop
 8016d4c:	0801b2e4 	.word	0x0801b2e4
 8016d50:	7ff00000 	.word	0x7ff00000
 8016d54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016d56:	1c5f      	adds	r7, r3, #1
 8016d58:	971b      	str	r7, [sp, #108]	; 0x6c
 8016d5a:	785b      	ldrb	r3, [r3, #1]
 8016d5c:	2b30      	cmp	r3, #48	; 0x30
 8016d5e:	d0f9      	beq.n	8016d54 <_strtod_l+0x28c>
 8016d60:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016d64:	2f08      	cmp	r7, #8
 8016d66:	f63f af7d 	bhi.w	8016c64 <_strtod_l+0x19c>
 8016d6a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016d6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016d70:	930a      	str	r3, [sp, #40]	; 0x28
 8016d72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016d74:	1c5f      	adds	r7, r3, #1
 8016d76:	971b      	str	r7, [sp, #108]	; 0x6c
 8016d78:	785b      	ldrb	r3, [r3, #1]
 8016d7a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8016d7e:	f1b8 0f09 	cmp.w	r8, #9
 8016d82:	d937      	bls.n	8016df4 <_strtod_l+0x32c>
 8016d84:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016d86:	1a7f      	subs	r7, r7, r1
 8016d88:	2f08      	cmp	r7, #8
 8016d8a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016d8e:	dc37      	bgt.n	8016e00 <_strtod_l+0x338>
 8016d90:	45be      	cmp	lr, r7
 8016d92:	bfa8      	it	ge
 8016d94:	46be      	movge	lr, r7
 8016d96:	f1bc 0f00 	cmp.w	ip, #0
 8016d9a:	d001      	beq.n	8016da0 <_strtod_l+0x2d8>
 8016d9c:	f1ce 0e00 	rsb	lr, lr, #0
 8016da0:	2c00      	cmp	r4, #0
 8016da2:	d151      	bne.n	8016e48 <_strtod_l+0x380>
 8016da4:	2800      	cmp	r0, #0
 8016da6:	f47f aece 	bne.w	8016b46 <_strtod_l+0x7e>
 8016daa:	9a06      	ldr	r2, [sp, #24]
 8016dac:	2a00      	cmp	r2, #0
 8016dae:	f47f aeca 	bne.w	8016b46 <_strtod_l+0x7e>
 8016db2:	9a04      	ldr	r2, [sp, #16]
 8016db4:	2a00      	cmp	r2, #0
 8016db6:	f47f aee4 	bne.w	8016b82 <_strtod_l+0xba>
 8016dba:	2b4e      	cmp	r3, #78	; 0x4e
 8016dbc:	d027      	beq.n	8016e0e <_strtod_l+0x346>
 8016dbe:	dc21      	bgt.n	8016e04 <_strtod_l+0x33c>
 8016dc0:	2b49      	cmp	r3, #73	; 0x49
 8016dc2:	f47f aede 	bne.w	8016b82 <_strtod_l+0xba>
 8016dc6:	49a0      	ldr	r1, [pc, #640]	; (8017048 <_strtod_l+0x580>)
 8016dc8:	a81b      	add	r0, sp, #108	; 0x6c
 8016dca:	f001 fdd7 	bl	801897c <__match>
 8016dce:	2800      	cmp	r0, #0
 8016dd0:	f43f aed7 	beq.w	8016b82 <_strtod_l+0xba>
 8016dd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016dd6:	499d      	ldr	r1, [pc, #628]	; (801704c <_strtod_l+0x584>)
 8016dd8:	3b01      	subs	r3, #1
 8016dda:	a81b      	add	r0, sp, #108	; 0x6c
 8016ddc:	931b      	str	r3, [sp, #108]	; 0x6c
 8016dde:	f001 fdcd 	bl	801897c <__match>
 8016de2:	b910      	cbnz	r0, 8016dea <_strtod_l+0x322>
 8016de4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016de6:	3301      	adds	r3, #1
 8016de8:	931b      	str	r3, [sp, #108]	; 0x6c
 8016dea:	f8df b274 	ldr.w	fp, [pc, #628]	; 8017060 <_strtod_l+0x598>
 8016dee:	f04f 0a00 	mov.w	sl, #0
 8016df2:	e6a8      	b.n	8016b46 <_strtod_l+0x7e>
 8016df4:	210a      	movs	r1, #10
 8016df6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016dfa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016dfe:	e7b8      	b.n	8016d72 <_strtod_l+0x2aa>
 8016e00:	46be      	mov	lr, r7
 8016e02:	e7c8      	b.n	8016d96 <_strtod_l+0x2ce>
 8016e04:	2b69      	cmp	r3, #105	; 0x69
 8016e06:	d0de      	beq.n	8016dc6 <_strtod_l+0x2fe>
 8016e08:	2b6e      	cmp	r3, #110	; 0x6e
 8016e0a:	f47f aeba 	bne.w	8016b82 <_strtod_l+0xba>
 8016e0e:	4990      	ldr	r1, [pc, #576]	; (8017050 <_strtod_l+0x588>)
 8016e10:	a81b      	add	r0, sp, #108	; 0x6c
 8016e12:	f001 fdb3 	bl	801897c <__match>
 8016e16:	2800      	cmp	r0, #0
 8016e18:	f43f aeb3 	beq.w	8016b82 <_strtod_l+0xba>
 8016e1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016e1e:	781b      	ldrb	r3, [r3, #0]
 8016e20:	2b28      	cmp	r3, #40	; 0x28
 8016e22:	d10e      	bne.n	8016e42 <_strtod_l+0x37a>
 8016e24:	aa1e      	add	r2, sp, #120	; 0x78
 8016e26:	498b      	ldr	r1, [pc, #556]	; (8017054 <_strtod_l+0x58c>)
 8016e28:	a81b      	add	r0, sp, #108	; 0x6c
 8016e2a:	f001 fdbb 	bl	80189a4 <__hexnan>
 8016e2e:	2805      	cmp	r0, #5
 8016e30:	d107      	bne.n	8016e42 <_strtod_l+0x37a>
 8016e32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016e34:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016e38:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016e3c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016e40:	e681      	b.n	8016b46 <_strtod_l+0x7e>
 8016e42:	f8df b224 	ldr.w	fp, [pc, #548]	; 8017068 <_strtod_l+0x5a0>
 8016e46:	e7d2      	b.n	8016dee <_strtod_l+0x326>
 8016e48:	ebae 0302 	sub.w	r3, lr, r2
 8016e4c:	9306      	str	r3, [sp, #24]
 8016e4e:	9b05      	ldr	r3, [sp, #20]
 8016e50:	9807      	ldr	r0, [sp, #28]
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	bf08      	it	eq
 8016e56:	4623      	moveq	r3, r4
 8016e58:	2c10      	cmp	r4, #16
 8016e5a:	9305      	str	r3, [sp, #20]
 8016e5c:	46a0      	mov	r8, r4
 8016e5e:	bfa8      	it	ge
 8016e60:	f04f 0810 	movge.w	r8, #16
 8016e64:	f7e9 fb4e 	bl	8000504 <__aeabi_ui2d>
 8016e68:	2c09      	cmp	r4, #9
 8016e6a:	4682      	mov	sl, r0
 8016e6c:	468b      	mov	fp, r1
 8016e6e:	dc13      	bgt.n	8016e98 <_strtod_l+0x3d0>
 8016e70:	9b06      	ldr	r3, [sp, #24]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	f43f ae67 	beq.w	8016b46 <_strtod_l+0x7e>
 8016e78:	9b06      	ldr	r3, [sp, #24]
 8016e7a:	dd7a      	ble.n	8016f72 <_strtod_l+0x4aa>
 8016e7c:	2b16      	cmp	r3, #22
 8016e7e:	dc61      	bgt.n	8016f44 <_strtod_l+0x47c>
 8016e80:	4a75      	ldr	r2, [pc, #468]	; (8017058 <_strtod_l+0x590>)
 8016e82:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016e86:	e9de 0100 	ldrd	r0, r1, [lr]
 8016e8a:	4652      	mov	r2, sl
 8016e8c:	465b      	mov	r3, fp
 8016e8e:	f7e9 fbb3 	bl	80005f8 <__aeabi_dmul>
 8016e92:	4682      	mov	sl, r0
 8016e94:	468b      	mov	fp, r1
 8016e96:	e656      	b.n	8016b46 <_strtod_l+0x7e>
 8016e98:	4b6f      	ldr	r3, [pc, #444]	; (8017058 <_strtod_l+0x590>)
 8016e9a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016e9e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016ea2:	f7e9 fba9 	bl	80005f8 <__aeabi_dmul>
 8016ea6:	4606      	mov	r6, r0
 8016ea8:	4628      	mov	r0, r5
 8016eaa:	460f      	mov	r7, r1
 8016eac:	f7e9 fb2a 	bl	8000504 <__aeabi_ui2d>
 8016eb0:	4602      	mov	r2, r0
 8016eb2:	460b      	mov	r3, r1
 8016eb4:	4630      	mov	r0, r6
 8016eb6:	4639      	mov	r1, r7
 8016eb8:	f7e9 f9e8 	bl	800028c <__adddf3>
 8016ebc:	2c0f      	cmp	r4, #15
 8016ebe:	4682      	mov	sl, r0
 8016ec0:	468b      	mov	fp, r1
 8016ec2:	ddd5      	ble.n	8016e70 <_strtod_l+0x3a8>
 8016ec4:	9b06      	ldr	r3, [sp, #24]
 8016ec6:	eba4 0808 	sub.w	r8, r4, r8
 8016eca:	4498      	add	r8, r3
 8016ecc:	f1b8 0f00 	cmp.w	r8, #0
 8016ed0:	f340 8096 	ble.w	8017000 <_strtod_l+0x538>
 8016ed4:	f018 030f 	ands.w	r3, r8, #15
 8016ed8:	d00a      	beq.n	8016ef0 <_strtod_l+0x428>
 8016eda:	495f      	ldr	r1, [pc, #380]	; (8017058 <_strtod_l+0x590>)
 8016edc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016ee0:	4652      	mov	r2, sl
 8016ee2:	465b      	mov	r3, fp
 8016ee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016ee8:	f7e9 fb86 	bl	80005f8 <__aeabi_dmul>
 8016eec:	4682      	mov	sl, r0
 8016eee:	468b      	mov	fp, r1
 8016ef0:	f038 080f 	bics.w	r8, r8, #15
 8016ef4:	d073      	beq.n	8016fde <_strtod_l+0x516>
 8016ef6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016efa:	dd47      	ble.n	8016f8c <_strtod_l+0x4c4>
 8016efc:	2400      	movs	r4, #0
 8016efe:	46a0      	mov	r8, r4
 8016f00:	9407      	str	r4, [sp, #28]
 8016f02:	9405      	str	r4, [sp, #20]
 8016f04:	2322      	movs	r3, #34	; 0x22
 8016f06:	f8df b158 	ldr.w	fp, [pc, #344]	; 8017060 <_strtod_l+0x598>
 8016f0a:	f8c9 3000 	str.w	r3, [r9]
 8016f0e:	f04f 0a00 	mov.w	sl, #0
 8016f12:	9b07      	ldr	r3, [sp, #28]
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	f43f ae16 	beq.w	8016b46 <_strtod_l+0x7e>
 8016f1a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016f1c:	4648      	mov	r0, r9
 8016f1e:	f001 fe2d 	bl	8018b7c <_Bfree>
 8016f22:	9905      	ldr	r1, [sp, #20]
 8016f24:	4648      	mov	r0, r9
 8016f26:	f001 fe29 	bl	8018b7c <_Bfree>
 8016f2a:	4641      	mov	r1, r8
 8016f2c:	4648      	mov	r0, r9
 8016f2e:	f001 fe25 	bl	8018b7c <_Bfree>
 8016f32:	9907      	ldr	r1, [sp, #28]
 8016f34:	4648      	mov	r0, r9
 8016f36:	f001 fe21 	bl	8018b7c <_Bfree>
 8016f3a:	4621      	mov	r1, r4
 8016f3c:	4648      	mov	r0, r9
 8016f3e:	f001 fe1d 	bl	8018b7c <_Bfree>
 8016f42:	e600      	b.n	8016b46 <_strtod_l+0x7e>
 8016f44:	9a06      	ldr	r2, [sp, #24]
 8016f46:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016f4a:	4293      	cmp	r3, r2
 8016f4c:	dbba      	blt.n	8016ec4 <_strtod_l+0x3fc>
 8016f4e:	4d42      	ldr	r5, [pc, #264]	; (8017058 <_strtod_l+0x590>)
 8016f50:	f1c4 040f 	rsb	r4, r4, #15
 8016f54:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016f58:	4652      	mov	r2, sl
 8016f5a:	465b      	mov	r3, fp
 8016f5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016f60:	f7e9 fb4a 	bl	80005f8 <__aeabi_dmul>
 8016f64:	9b06      	ldr	r3, [sp, #24]
 8016f66:	1b1c      	subs	r4, r3, r4
 8016f68:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016f6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016f70:	e78d      	b.n	8016e8e <_strtod_l+0x3c6>
 8016f72:	f113 0f16 	cmn.w	r3, #22
 8016f76:	dba5      	blt.n	8016ec4 <_strtod_l+0x3fc>
 8016f78:	4a37      	ldr	r2, [pc, #220]	; (8017058 <_strtod_l+0x590>)
 8016f7a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016f7e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016f82:	4650      	mov	r0, sl
 8016f84:	4659      	mov	r1, fp
 8016f86:	f7e9 fc61 	bl	800084c <__aeabi_ddiv>
 8016f8a:	e782      	b.n	8016e92 <_strtod_l+0x3ca>
 8016f8c:	2300      	movs	r3, #0
 8016f8e:	4e33      	ldr	r6, [pc, #204]	; (801705c <_strtod_l+0x594>)
 8016f90:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016f94:	4650      	mov	r0, sl
 8016f96:	4659      	mov	r1, fp
 8016f98:	461d      	mov	r5, r3
 8016f9a:	f1b8 0f01 	cmp.w	r8, #1
 8016f9e:	dc21      	bgt.n	8016fe4 <_strtod_l+0x51c>
 8016fa0:	b10b      	cbz	r3, 8016fa6 <_strtod_l+0x4de>
 8016fa2:	4682      	mov	sl, r0
 8016fa4:	468b      	mov	fp, r1
 8016fa6:	4b2d      	ldr	r3, [pc, #180]	; (801705c <_strtod_l+0x594>)
 8016fa8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016fac:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016fb0:	4652      	mov	r2, sl
 8016fb2:	465b      	mov	r3, fp
 8016fb4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016fb8:	f7e9 fb1e 	bl	80005f8 <__aeabi_dmul>
 8016fbc:	4b28      	ldr	r3, [pc, #160]	; (8017060 <_strtod_l+0x598>)
 8016fbe:	460a      	mov	r2, r1
 8016fc0:	400b      	ands	r3, r1
 8016fc2:	4928      	ldr	r1, [pc, #160]	; (8017064 <_strtod_l+0x59c>)
 8016fc4:	428b      	cmp	r3, r1
 8016fc6:	4682      	mov	sl, r0
 8016fc8:	d898      	bhi.n	8016efc <_strtod_l+0x434>
 8016fca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016fce:	428b      	cmp	r3, r1
 8016fd0:	bf86      	itte	hi
 8016fd2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801706c <_strtod_l+0x5a4>
 8016fd6:	f04f 3aff 	movhi.w	sl, #4294967295
 8016fda:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016fde:	2300      	movs	r3, #0
 8016fe0:	9304      	str	r3, [sp, #16]
 8016fe2:	e077      	b.n	80170d4 <_strtod_l+0x60c>
 8016fe4:	f018 0f01 	tst.w	r8, #1
 8016fe8:	d006      	beq.n	8016ff8 <_strtod_l+0x530>
 8016fea:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ff2:	f7e9 fb01 	bl	80005f8 <__aeabi_dmul>
 8016ff6:	2301      	movs	r3, #1
 8016ff8:	3501      	adds	r5, #1
 8016ffa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016ffe:	e7cc      	b.n	8016f9a <_strtod_l+0x4d2>
 8017000:	d0ed      	beq.n	8016fde <_strtod_l+0x516>
 8017002:	f1c8 0800 	rsb	r8, r8, #0
 8017006:	f018 020f 	ands.w	r2, r8, #15
 801700a:	d00a      	beq.n	8017022 <_strtod_l+0x55a>
 801700c:	4b12      	ldr	r3, [pc, #72]	; (8017058 <_strtod_l+0x590>)
 801700e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017012:	4650      	mov	r0, sl
 8017014:	4659      	mov	r1, fp
 8017016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801701a:	f7e9 fc17 	bl	800084c <__aeabi_ddiv>
 801701e:	4682      	mov	sl, r0
 8017020:	468b      	mov	fp, r1
 8017022:	ea5f 1828 	movs.w	r8, r8, asr #4
 8017026:	d0da      	beq.n	8016fde <_strtod_l+0x516>
 8017028:	f1b8 0f1f 	cmp.w	r8, #31
 801702c:	dd20      	ble.n	8017070 <_strtod_l+0x5a8>
 801702e:	2400      	movs	r4, #0
 8017030:	46a0      	mov	r8, r4
 8017032:	9407      	str	r4, [sp, #28]
 8017034:	9405      	str	r4, [sp, #20]
 8017036:	2322      	movs	r3, #34	; 0x22
 8017038:	f04f 0a00 	mov.w	sl, #0
 801703c:	f04f 0b00 	mov.w	fp, #0
 8017040:	f8c9 3000 	str.w	r3, [r9]
 8017044:	e765      	b.n	8016f12 <_strtod_l+0x44a>
 8017046:	bf00      	nop
 8017048:	0801b2ad 	.word	0x0801b2ad
 801704c:	0801b33b 	.word	0x0801b33b
 8017050:	0801b2b5 	.word	0x0801b2b5
 8017054:	0801b2f8 	.word	0x0801b2f8
 8017058:	0801b378 	.word	0x0801b378
 801705c:	0801b350 	.word	0x0801b350
 8017060:	7ff00000 	.word	0x7ff00000
 8017064:	7ca00000 	.word	0x7ca00000
 8017068:	fff80000 	.word	0xfff80000
 801706c:	7fefffff 	.word	0x7fefffff
 8017070:	f018 0310 	ands.w	r3, r8, #16
 8017074:	bf18      	it	ne
 8017076:	236a      	movne	r3, #106	; 0x6a
 8017078:	4da0      	ldr	r5, [pc, #640]	; (80172fc <_strtod_l+0x834>)
 801707a:	9304      	str	r3, [sp, #16]
 801707c:	4650      	mov	r0, sl
 801707e:	4659      	mov	r1, fp
 8017080:	2300      	movs	r3, #0
 8017082:	f1b8 0f00 	cmp.w	r8, #0
 8017086:	f300 810a 	bgt.w	801729e <_strtod_l+0x7d6>
 801708a:	b10b      	cbz	r3, 8017090 <_strtod_l+0x5c8>
 801708c:	4682      	mov	sl, r0
 801708e:	468b      	mov	fp, r1
 8017090:	9b04      	ldr	r3, [sp, #16]
 8017092:	b1bb      	cbz	r3, 80170c4 <_strtod_l+0x5fc>
 8017094:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8017098:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801709c:	2b00      	cmp	r3, #0
 801709e:	4659      	mov	r1, fp
 80170a0:	dd10      	ble.n	80170c4 <_strtod_l+0x5fc>
 80170a2:	2b1f      	cmp	r3, #31
 80170a4:	f340 8107 	ble.w	80172b6 <_strtod_l+0x7ee>
 80170a8:	2b34      	cmp	r3, #52	; 0x34
 80170aa:	bfde      	ittt	le
 80170ac:	3b20      	suble	r3, #32
 80170ae:	f04f 32ff 	movle.w	r2, #4294967295
 80170b2:	fa02 f303 	lslle.w	r3, r2, r3
 80170b6:	f04f 0a00 	mov.w	sl, #0
 80170ba:	bfcc      	ite	gt
 80170bc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80170c0:	ea03 0b01 	andle.w	fp, r3, r1
 80170c4:	2200      	movs	r2, #0
 80170c6:	2300      	movs	r3, #0
 80170c8:	4650      	mov	r0, sl
 80170ca:	4659      	mov	r1, fp
 80170cc:	f7e9 fcfc 	bl	8000ac8 <__aeabi_dcmpeq>
 80170d0:	2800      	cmp	r0, #0
 80170d2:	d1ac      	bne.n	801702e <_strtod_l+0x566>
 80170d4:	9b07      	ldr	r3, [sp, #28]
 80170d6:	9300      	str	r3, [sp, #0]
 80170d8:	9a05      	ldr	r2, [sp, #20]
 80170da:	9908      	ldr	r1, [sp, #32]
 80170dc:	4623      	mov	r3, r4
 80170de:	4648      	mov	r0, r9
 80170e0:	f001 fd9e 	bl	8018c20 <__s2b>
 80170e4:	9007      	str	r0, [sp, #28]
 80170e6:	2800      	cmp	r0, #0
 80170e8:	f43f af08 	beq.w	8016efc <_strtod_l+0x434>
 80170ec:	9a06      	ldr	r2, [sp, #24]
 80170ee:	9b06      	ldr	r3, [sp, #24]
 80170f0:	2a00      	cmp	r2, #0
 80170f2:	f1c3 0300 	rsb	r3, r3, #0
 80170f6:	bfa8      	it	ge
 80170f8:	2300      	movge	r3, #0
 80170fa:	930e      	str	r3, [sp, #56]	; 0x38
 80170fc:	2400      	movs	r4, #0
 80170fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8017102:	9316      	str	r3, [sp, #88]	; 0x58
 8017104:	46a0      	mov	r8, r4
 8017106:	9b07      	ldr	r3, [sp, #28]
 8017108:	4648      	mov	r0, r9
 801710a:	6859      	ldr	r1, [r3, #4]
 801710c:	f001 fd02 	bl	8018b14 <_Balloc>
 8017110:	9005      	str	r0, [sp, #20]
 8017112:	2800      	cmp	r0, #0
 8017114:	f43f aef6 	beq.w	8016f04 <_strtod_l+0x43c>
 8017118:	9b07      	ldr	r3, [sp, #28]
 801711a:	691a      	ldr	r2, [r3, #16]
 801711c:	3202      	adds	r2, #2
 801711e:	f103 010c 	add.w	r1, r3, #12
 8017122:	0092      	lsls	r2, r2, #2
 8017124:	300c      	adds	r0, #12
 8017126:	f7fe fd29 	bl	8015b7c <memcpy>
 801712a:	aa1e      	add	r2, sp, #120	; 0x78
 801712c:	a91d      	add	r1, sp, #116	; 0x74
 801712e:	ec4b ab10 	vmov	d0, sl, fp
 8017132:	4648      	mov	r0, r9
 8017134:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8017138:	f002 f82e 	bl	8019198 <__d2b>
 801713c:	901c      	str	r0, [sp, #112]	; 0x70
 801713e:	2800      	cmp	r0, #0
 8017140:	f43f aee0 	beq.w	8016f04 <_strtod_l+0x43c>
 8017144:	2101      	movs	r1, #1
 8017146:	4648      	mov	r0, r9
 8017148:	f001 fdf6 	bl	8018d38 <__i2b>
 801714c:	4680      	mov	r8, r0
 801714e:	2800      	cmp	r0, #0
 8017150:	f43f aed8 	beq.w	8016f04 <_strtod_l+0x43c>
 8017154:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8017156:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017158:	2e00      	cmp	r6, #0
 801715a:	bfab      	itete	ge
 801715c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801715e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8017160:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8017162:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8017164:	bfac      	ite	ge
 8017166:	18f7      	addge	r7, r6, r3
 8017168:	1b9d      	sublt	r5, r3, r6
 801716a:	9b04      	ldr	r3, [sp, #16]
 801716c:	1af6      	subs	r6, r6, r3
 801716e:	4416      	add	r6, r2
 8017170:	4b63      	ldr	r3, [pc, #396]	; (8017300 <_strtod_l+0x838>)
 8017172:	3e01      	subs	r6, #1
 8017174:	429e      	cmp	r6, r3
 8017176:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801717a:	f280 80af 	bge.w	80172dc <_strtod_l+0x814>
 801717e:	1b9b      	subs	r3, r3, r6
 8017180:	2b1f      	cmp	r3, #31
 8017182:	eba2 0203 	sub.w	r2, r2, r3
 8017186:	f04f 0101 	mov.w	r1, #1
 801718a:	f300 809b 	bgt.w	80172c4 <_strtod_l+0x7fc>
 801718e:	fa01 f303 	lsl.w	r3, r1, r3
 8017192:	930f      	str	r3, [sp, #60]	; 0x3c
 8017194:	2300      	movs	r3, #0
 8017196:	930a      	str	r3, [sp, #40]	; 0x28
 8017198:	18be      	adds	r6, r7, r2
 801719a:	9b04      	ldr	r3, [sp, #16]
 801719c:	42b7      	cmp	r7, r6
 801719e:	4415      	add	r5, r2
 80171a0:	441d      	add	r5, r3
 80171a2:	463b      	mov	r3, r7
 80171a4:	bfa8      	it	ge
 80171a6:	4633      	movge	r3, r6
 80171a8:	42ab      	cmp	r3, r5
 80171aa:	bfa8      	it	ge
 80171ac:	462b      	movge	r3, r5
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	bfc2      	ittt	gt
 80171b2:	1af6      	subgt	r6, r6, r3
 80171b4:	1aed      	subgt	r5, r5, r3
 80171b6:	1aff      	subgt	r7, r7, r3
 80171b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80171ba:	b1bb      	cbz	r3, 80171ec <_strtod_l+0x724>
 80171bc:	4641      	mov	r1, r8
 80171be:	461a      	mov	r2, r3
 80171c0:	4648      	mov	r0, r9
 80171c2:	f001 fe59 	bl	8018e78 <__pow5mult>
 80171c6:	4680      	mov	r8, r0
 80171c8:	2800      	cmp	r0, #0
 80171ca:	f43f ae9b 	beq.w	8016f04 <_strtod_l+0x43c>
 80171ce:	4601      	mov	r1, r0
 80171d0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80171d2:	4648      	mov	r0, r9
 80171d4:	f001 fdb9 	bl	8018d4a <__multiply>
 80171d8:	900c      	str	r0, [sp, #48]	; 0x30
 80171da:	2800      	cmp	r0, #0
 80171dc:	f43f ae92 	beq.w	8016f04 <_strtod_l+0x43c>
 80171e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80171e2:	4648      	mov	r0, r9
 80171e4:	f001 fcca 	bl	8018b7c <_Bfree>
 80171e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80171ea:	931c      	str	r3, [sp, #112]	; 0x70
 80171ec:	2e00      	cmp	r6, #0
 80171ee:	dc7a      	bgt.n	80172e6 <_strtod_l+0x81e>
 80171f0:	9b06      	ldr	r3, [sp, #24]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	dd08      	ble.n	8017208 <_strtod_l+0x740>
 80171f6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80171f8:	9905      	ldr	r1, [sp, #20]
 80171fa:	4648      	mov	r0, r9
 80171fc:	f001 fe3c 	bl	8018e78 <__pow5mult>
 8017200:	9005      	str	r0, [sp, #20]
 8017202:	2800      	cmp	r0, #0
 8017204:	f43f ae7e 	beq.w	8016f04 <_strtod_l+0x43c>
 8017208:	2d00      	cmp	r5, #0
 801720a:	dd08      	ble.n	801721e <_strtod_l+0x756>
 801720c:	462a      	mov	r2, r5
 801720e:	9905      	ldr	r1, [sp, #20]
 8017210:	4648      	mov	r0, r9
 8017212:	f001 fe7f 	bl	8018f14 <__lshift>
 8017216:	9005      	str	r0, [sp, #20]
 8017218:	2800      	cmp	r0, #0
 801721a:	f43f ae73 	beq.w	8016f04 <_strtod_l+0x43c>
 801721e:	2f00      	cmp	r7, #0
 8017220:	dd08      	ble.n	8017234 <_strtod_l+0x76c>
 8017222:	4641      	mov	r1, r8
 8017224:	463a      	mov	r2, r7
 8017226:	4648      	mov	r0, r9
 8017228:	f001 fe74 	bl	8018f14 <__lshift>
 801722c:	4680      	mov	r8, r0
 801722e:	2800      	cmp	r0, #0
 8017230:	f43f ae68 	beq.w	8016f04 <_strtod_l+0x43c>
 8017234:	9a05      	ldr	r2, [sp, #20]
 8017236:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017238:	4648      	mov	r0, r9
 801723a:	f001 fed9 	bl	8018ff0 <__mdiff>
 801723e:	4604      	mov	r4, r0
 8017240:	2800      	cmp	r0, #0
 8017242:	f43f ae5f 	beq.w	8016f04 <_strtod_l+0x43c>
 8017246:	68c3      	ldr	r3, [r0, #12]
 8017248:	930c      	str	r3, [sp, #48]	; 0x30
 801724a:	2300      	movs	r3, #0
 801724c:	60c3      	str	r3, [r0, #12]
 801724e:	4641      	mov	r1, r8
 8017250:	f001 feb4 	bl	8018fbc <__mcmp>
 8017254:	2800      	cmp	r0, #0
 8017256:	da55      	bge.n	8017304 <_strtod_l+0x83c>
 8017258:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801725a:	b9e3      	cbnz	r3, 8017296 <_strtod_l+0x7ce>
 801725c:	f1ba 0f00 	cmp.w	sl, #0
 8017260:	d119      	bne.n	8017296 <_strtod_l+0x7ce>
 8017262:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017266:	b9b3      	cbnz	r3, 8017296 <_strtod_l+0x7ce>
 8017268:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801726c:	0d1b      	lsrs	r3, r3, #20
 801726e:	051b      	lsls	r3, r3, #20
 8017270:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017274:	d90f      	bls.n	8017296 <_strtod_l+0x7ce>
 8017276:	6963      	ldr	r3, [r4, #20]
 8017278:	b913      	cbnz	r3, 8017280 <_strtod_l+0x7b8>
 801727a:	6923      	ldr	r3, [r4, #16]
 801727c:	2b01      	cmp	r3, #1
 801727e:	dd0a      	ble.n	8017296 <_strtod_l+0x7ce>
 8017280:	4621      	mov	r1, r4
 8017282:	2201      	movs	r2, #1
 8017284:	4648      	mov	r0, r9
 8017286:	f001 fe45 	bl	8018f14 <__lshift>
 801728a:	4641      	mov	r1, r8
 801728c:	4604      	mov	r4, r0
 801728e:	f001 fe95 	bl	8018fbc <__mcmp>
 8017292:	2800      	cmp	r0, #0
 8017294:	dc67      	bgt.n	8017366 <_strtod_l+0x89e>
 8017296:	9b04      	ldr	r3, [sp, #16]
 8017298:	2b00      	cmp	r3, #0
 801729a:	d171      	bne.n	8017380 <_strtod_l+0x8b8>
 801729c:	e63d      	b.n	8016f1a <_strtod_l+0x452>
 801729e:	f018 0f01 	tst.w	r8, #1
 80172a2:	d004      	beq.n	80172ae <_strtod_l+0x7e6>
 80172a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80172a8:	f7e9 f9a6 	bl	80005f8 <__aeabi_dmul>
 80172ac:	2301      	movs	r3, #1
 80172ae:	ea4f 0868 	mov.w	r8, r8, asr #1
 80172b2:	3508      	adds	r5, #8
 80172b4:	e6e5      	b.n	8017082 <_strtod_l+0x5ba>
 80172b6:	f04f 32ff 	mov.w	r2, #4294967295
 80172ba:	fa02 f303 	lsl.w	r3, r2, r3
 80172be:	ea03 0a0a 	and.w	sl, r3, sl
 80172c2:	e6ff      	b.n	80170c4 <_strtod_l+0x5fc>
 80172c4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80172c8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80172cc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80172d0:	36e2      	adds	r6, #226	; 0xe2
 80172d2:	fa01 f306 	lsl.w	r3, r1, r6
 80172d6:	930a      	str	r3, [sp, #40]	; 0x28
 80172d8:	910f      	str	r1, [sp, #60]	; 0x3c
 80172da:	e75d      	b.n	8017198 <_strtod_l+0x6d0>
 80172dc:	2300      	movs	r3, #0
 80172de:	930a      	str	r3, [sp, #40]	; 0x28
 80172e0:	2301      	movs	r3, #1
 80172e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80172e4:	e758      	b.n	8017198 <_strtod_l+0x6d0>
 80172e6:	4632      	mov	r2, r6
 80172e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80172ea:	4648      	mov	r0, r9
 80172ec:	f001 fe12 	bl	8018f14 <__lshift>
 80172f0:	901c      	str	r0, [sp, #112]	; 0x70
 80172f2:	2800      	cmp	r0, #0
 80172f4:	f47f af7c 	bne.w	80171f0 <_strtod_l+0x728>
 80172f8:	e604      	b.n	8016f04 <_strtod_l+0x43c>
 80172fa:	bf00      	nop
 80172fc:	0801b310 	.word	0x0801b310
 8017300:	fffffc02 	.word	0xfffffc02
 8017304:	465d      	mov	r5, fp
 8017306:	f040 8086 	bne.w	8017416 <_strtod_l+0x94e>
 801730a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801730c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017310:	b32a      	cbz	r2, 801735e <_strtod_l+0x896>
 8017312:	4aaf      	ldr	r2, [pc, #700]	; (80175d0 <_strtod_l+0xb08>)
 8017314:	4293      	cmp	r3, r2
 8017316:	d153      	bne.n	80173c0 <_strtod_l+0x8f8>
 8017318:	9b04      	ldr	r3, [sp, #16]
 801731a:	4650      	mov	r0, sl
 801731c:	b1d3      	cbz	r3, 8017354 <_strtod_l+0x88c>
 801731e:	4aad      	ldr	r2, [pc, #692]	; (80175d4 <_strtod_l+0xb0c>)
 8017320:	402a      	ands	r2, r5
 8017322:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8017326:	f04f 31ff 	mov.w	r1, #4294967295
 801732a:	d816      	bhi.n	801735a <_strtod_l+0x892>
 801732c:	0d12      	lsrs	r2, r2, #20
 801732e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8017332:	fa01 f303 	lsl.w	r3, r1, r3
 8017336:	4298      	cmp	r0, r3
 8017338:	d142      	bne.n	80173c0 <_strtod_l+0x8f8>
 801733a:	4ba7      	ldr	r3, [pc, #668]	; (80175d8 <_strtod_l+0xb10>)
 801733c:	429d      	cmp	r5, r3
 801733e:	d102      	bne.n	8017346 <_strtod_l+0x87e>
 8017340:	3001      	adds	r0, #1
 8017342:	f43f addf 	beq.w	8016f04 <_strtod_l+0x43c>
 8017346:	4ba3      	ldr	r3, [pc, #652]	; (80175d4 <_strtod_l+0xb0c>)
 8017348:	402b      	ands	r3, r5
 801734a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801734e:	f04f 0a00 	mov.w	sl, #0
 8017352:	e7a0      	b.n	8017296 <_strtod_l+0x7ce>
 8017354:	f04f 33ff 	mov.w	r3, #4294967295
 8017358:	e7ed      	b.n	8017336 <_strtod_l+0x86e>
 801735a:	460b      	mov	r3, r1
 801735c:	e7eb      	b.n	8017336 <_strtod_l+0x86e>
 801735e:	bb7b      	cbnz	r3, 80173c0 <_strtod_l+0x8f8>
 8017360:	f1ba 0f00 	cmp.w	sl, #0
 8017364:	d12c      	bne.n	80173c0 <_strtod_l+0x8f8>
 8017366:	9904      	ldr	r1, [sp, #16]
 8017368:	4a9a      	ldr	r2, [pc, #616]	; (80175d4 <_strtod_l+0xb0c>)
 801736a:	465b      	mov	r3, fp
 801736c:	b1f1      	cbz	r1, 80173ac <_strtod_l+0x8e4>
 801736e:	ea02 010b 	and.w	r1, r2, fp
 8017372:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8017376:	dc19      	bgt.n	80173ac <_strtod_l+0x8e4>
 8017378:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801737c:	f77f ae5b 	ble.w	8017036 <_strtod_l+0x56e>
 8017380:	4a96      	ldr	r2, [pc, #600]	; (80175dc <_strtod_l+0xb14>)
 8017382:	2300      	movs	r3, #0
 8017384:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8017388:	4650      	mov	r0, sl
 801738a:	4659      	mov	r1, fp
 801738c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017390:	f7e9 f932 	bl	80005f8 <__aeabi_dmul>
 8017394:	4682      	mov	sl, r0
 8017396:	468b      	mov	fp, r1
 8017398:	2900      	cmp	r1, #0
 801739a:	f47f adbe 	bne.w	8016f1a <_strtod_l+0x452>
 801739e:	2800      	cmp	r0, #0
 80173a0:	f47f adbb 	bne.w	8016f1a <_strtod_l+0x452>
 80173a4:	2322      	movs	r3, #34	; 0x22
 80173a6:	f8c9 3000 	str.w	r3, [r9]
 80173aa:	e5b6      	b.n	8016f1a <_strtod_l+0x452>
 80173ac:	4013      	ands	r3, r2
 80173ae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80173b2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80173b6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80173ba:	f04f 3aff 	mov.w	sl, #4294967295
 80173be:	e76a      	b.n	8017296 <_strtod_l+0x7ce>
 80173c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173c2:	b193      	cbz	r3, 80173ea <_strtod_l+0x922>
 80173c4:	422b      	tst	r3, r5
 80173c6:	f43f af66 	beq.w	8017296 <_strtod_l+0x7ce>
 80173ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80173cc:	9a04      	ldr	r2, [sp, #16]
 80173ce:	4650      	mov	r0, sl
 80173d0:	4659      	mov	r1, fp
 80173d2:	b173      	cbz	r3, 80173f2 <_strtod_l+0x92a>
 80173d4:	f7ff fb5c 	bl	8016a90 <sulp>
 80173d8:	4602      	mov	r2, r0
 80173da:	460b      	mov	r3, r1
 80173dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80173e0:	f7e8 ff54 	bl	800028c <__adddf3>
 80173e4:	4682      	mov	sl, r0
 80173e6:	468b      	mov	fp, r1
 80173e8:	e755      	b.n	8017296 <_strtod_l+0x7ce>
 80173ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80173ec:	ea13 0f0a 	tst.w	r3, sl
 80173f0:	e7e9      	b.n	80173c6 <_strtod_l+0x8fe>
 80173f2:	f7ff fb4d 	bl	8016a90 <sulp>
 80173f6:	4602      	mov	r2, r0
 80173f8:	460b      	mov	r3, r1
 80173fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80173fe:	f7e8 ff43 	bl	8000288 <__aeabi_dsub>
 8017402:	2200      	movs	r2, #0
 8017404:	2300      	movs	r3, #0
 8017406:	4682      	mov	sl, r0
 8017408:	468b      	mov	fp, r1
 801740a:	f7e9 fb5d 	bl	8000ac8 <__aeabi_dcmpeq>
 801740e:	2800      	cmp	r0, #0
 8017410:	f47f ae11 	bne.w	8017036 <_strtod_l+0x56e>
 8017414:	e73f      	b.n	8017296 <_strtod_l+0x7ce>
 8017416:	4641      	mov	r1, r8
 8017418:	4620      	mov	r0, r4
 801741a:	f001 ff0c 	bl	8019236 <__ratio>
 801741e:	ec57 6b10 	vmov	r6, r7, d0
 8017422:	2200      	movs	r2, #0
 8017424:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017428:	ee10 0a10 	vmov	r0, s0
 801742c:	4639      	mov	r1, r7
 801742e:	f7e9 fb5f 	bl	8000af0 <__aeabi_dcmple>
 8017432:	2800      	cmp	r0, #0
 8017434:	d077      	beq.n	8017526 <_strtod_l+0xa5e>
 8017436:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017438:	2b00      	cmp	r3, #0
 801743a:	d04a      	beq.n	80174d2 <_strtod_l+0xa0a>
 801743c:	4b68      	ldr	r3, [pc, #416]	; (80175e0 <_strtod_l+0xb18>)
 801743e:	2200      	movs	r2, #0
 8017440:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017444:	4f66      	ldr	r7, [pc, #408]	; (80175e0 <_strtod_l+0xb18>)
 8017446:	2600      	movs	r6, #0
 8017448:	4b62      	ldr	r3, [pc, #392]	; (80175d4 <_strtod_l+0xb0c>)
 801744a:	402b      	ands	r3, r5
 801744c:	930f      	str	r3, [sp, #60]	; 0x3c
 801744e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017450:	4b64      	ldr	r3, [pc, #400]	; (80175e4 <_strtod_l+0xb1c>)
 8017452:	429a      	cmp	r2, r3
 8017454:	f040 80ce 	bne.w	80175f4 <_strtod_l+0xb2c>
 8017458:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801745c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017460:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8017464:	ec4b ab10 	vmov	d0, sl, fp
 8017468:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801746c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017470:	f001 fe1c 	bl	80190ac <__ulp>
 8017474:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017478:	ec53 2b10 	vmov	r2, r3, d0
 801747c:	f7e9 f8bc 	bl	80005f8 <__aeabi_dmul>
 8017480:	4652      	mov	r2, sl
 8017482:	465b      	mov	r3, fp
 8017484:	f7e8 ff02 	bl	800028c <__adddf3>
 8017488:	460b      	mov	r3, r1
 801748a:	4952      	ldr	r1, [pc, #328]	; (80175d4 <_strtod_l+0xb0c>)
 801748c:	4a56      	ldr	r2, [pc, #344]	; (80175e8 <_strtod_l+0xb20>)
 801748e:	4019      	ands	r1, r3
 8017490:	4291      	cmp	r1, r2
 8017492:	4682      	mov	sl, r0
 8017494:	d95b      	bls.n	801754e <_strtod_l+0xa86>
 8017496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017498:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801749c:	4293      	cmp	r3, r2
 801749e:	d103      	bne.n	80174a8 <_strtod_l+0x9e0>
 80174a0:	9b08      	ldr	r3, [sp, #32]
 80174a2:	3301      	adds	r3, #1
 80174a4:	f43f ad2e 	beq.w	8016f04 <_strtod_l+0x43c>
 80174a8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80175d8 <_strtod_l+0xb10>
 80174ac:	f04f 3aff 	mov.w	sl, #4294967295
 80174b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80174b2:	4648      	mov	r0, r9
 80174b4:	f001 fb62 	bl	8018b7c <_Bfree>
 80174b8:	9905      	ldr	r1, [sp, #20]
 80174ba:	4648      	mov	r0, r9
 80174bc:	f001 fb5e 	bl	8018b7c <_Bfree>
 80174c0:	4641      	mov	r1, r8
 80174c2:	4648      	mov	r0, r9
 80174c4:	f001 fb5a 	bl	8018b7c <_Bfree>
 80174c8:	4621      	mov	r1, r4
 80174ca:	4648      	mov	r0, r9
 80174cc:	f001 fb56 	bl	8018b7c <_Bfree>
 80174d0:	e619      	b.n	8017106 <_strtod_l+0x63e>
 80174d2:	f1ba 0f00 	cmp.w	sl, #0
 80174d6:	d11a      	bne.n	801750e <_strtod_l+0xa46>
 80174d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80174dc:	b9eb      	cbnz	r3, 801751a <_strtod_l+0xa52>
 80174de:	2200      	movs	r2, #0
 80174e0:	4b3f      	ldr	r3, [pc, #252]	; (80175e0 <_strtod_l+0xb18>)
 80174e2:	4630      	mov	r0, r6
 80174e4:	4639      	mov	r1, r7
 80174e6:	f7e9 faf9 	bl	8000adc <__aeabi_dcmplt>
 80174ea:	b9c8      	cbnz	r0, 8017520 <_strtod_l+0xa58>
 80174ec:	4630      	mov	r0, r6
 80174ee:	4639      	mov	r1, r7
 80174f0:	2200      	movs	r2, #0
 80174f2:	4b3e      	ldr	r3, [pc, #248]	; (80175ec <_strtod_l+0xb24>)
 80174f4:	f7e9 f880 	bl	80005f8 <__aeabi_dmul>
 80174f8:	4606      	mov	r6, r0
 80174fa:	460f      	mov	r7, r1
 80174fc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8017500:	9618      	str	r6, [sp, #96]	; 0x60
 8017502:	9319      	str	r3, [sp, #100]	; 0x64
 8017504:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8017508:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801750c:	e79c      	b.n	8017448 <_strtod_l+0x980>
 801750e:	f1ba 0f01 	cmp.w	sl, #1
 8017512:	d102      	bne.n	801751a <_strtod_l+0xa52>
 8017514:	2d00      	cmp	r5, #0
 8017516:	f43f ad8e 	beq.w	8017036 <_strtod_l+0x56e>
 801751a:	2200      	movs	r2, #0
 801751c:	4b34      	ldr	r3, [pc, #208]	; (80175f0 <_strtod_l+0xb28>)
 801751e:	e78f      	b.n	8017440 <_strtod_l+0x978>
 8017520:	2600      	movs	r6, #0
 8017522:	4f32      	ldr	r7, [pc, #200]	; (80175ec <_strtod_l+0xb24>)
 8017524:	e7ea      	b.n	80174fc <_strtod_l+0xa34>
 8017526:	4b31      	ldr	r3, [pc, #196]	; (80175ec <_strtod_l+0xb24>)
 8017528:	4630      	mov	r0, r6
 801752a:	4639      	mov	r1, r7
 801752c:	2200      	movs	r2, #0
 801752e:	f7e9 f863 	bl	80005f8 <__aeabi_dmul>
 8017532:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017534:	4606      	mov	r6, r0
 8017536:	460f      	mov	r7, r1
 8017538:	b933      	cbnz	r3, 8017548 <_strtod_l+0xa80>
 801753a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801753e:	9010      	str	r0, [sp, #64]	; 0x40
 8017540:	9311      	str	r3, [sp, #68]	; 0x44
 8017542:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017546:	e7df      	b.n	8017508 <_strtod_l+0xa40>
 8017548:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801754c:	e7f9      	b.n	8017542 <_strtod_l+0xa7a>
 801754e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017552:	9b04      	ldr	r3, [sp, #16]
 8017554:	2b00      	cmp	r3, #0
 8017556:	d1ab      	bne.n	80174b0 <_strtod_l+0x9e8>
 8017558:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801755c:	0d1b      	lsrs	r3, r3, #20
 801755e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017560:	051b      	lsls	r3, r3, #20
 8017562:	429a      	cmp	r2, r3
 8017564:	465d      	mov	r5, fp
 8017566:	d1a3      	bne.n	80174b0 <_strtod_l+0x9e8>
 8017568:	4639      	mov	r1, r7
 801756a:	4630      	mov	r0, r6
 801756c:	f7e9 faf4 	bl	8000b58 <__aeabi_d2iz>
 8017570:	f7e8 ffd8 	bl	8000524 <__aeabi_i2d>
 8017574:	460b      	mov	r3, r1
 8017576:	4602      	mov	r2, r0
 8017578:	4639      	mov	r1, r7
 801757a:	4630      	mov	r0, r6
 801757c:	f7e8 fe84 	bl	8000288 <__aeabi_dsub>
 8017580:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017582:	4606      	mov	r6, r0
 8017584:	460f      	mov	r7, r1
 8017586:	b933      	cbnz	r3, 8017596 <_strtod_l+0xace>
 8017588:	f1ba 0f00 	cmp.w	sl, #0
 801758c:	d103      	bne.n	8017596 <_strtod_l+0xace>
 801758e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8017592:	2d00      	cmp	r5, #0
 8017594:	d06d      	beq.n	8017672 <_strtod_l+0xbaa>
 8017596:	a30a      	add	r3, pc, #40	; (adr r3, 80175c0 <_strtod_l+0xaf8>)
 8017598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801759c:	4630      	mov	r0, r6
 801759e:	4639      	mov	r1, r7
 80175a0:	f7e9 fa9c 	bl	8000adc <__aeabi_dcmplt>
 80175a4:	2800      	cmp	r0, #0
 80175a6:	f47f acb8 	bne.w	8016f1a <_strtod_l+0x452>
 80175aa:	a307      	add	r3, pc, #28	; (adr r3, 80175c8 <_strtod_l+0xb00>)
 80175ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175b0:	4630      	mov	r0, r6
 80175b2:	4639      	mov	r1, r7
 80175b4:	f7e9 fab0 	bl	8000b18 <__aeabi_dcmpgt>
 80175b8:	2800      	cmp	r0, #0
 80175ba:	f43f af79 	beq.w	80174b0 <_strtod_l+0x9e8>
 80175be:	e4ac      	b.n	8016f1a <_strtod_l+0x452>
 80175c0:	94a03595 	.word	0x94a03595
 80175c4:	3fdfffff 	.word	0x3fdfffff
 80175c8:	35afe535 	.word	0x35afe535
 80175cc:	3fe00000 	.word	0x3fe00000
 80175d0:	000fffff 	.word	0x000fffff
 80175d4:	7ff00000 	.word	0x7ff00000
 80175d8:	7fefffff 	.word	0x7fefffff
 80175dc:	39500000 	.word	0x39500000
 80175e0:	3ff00000 	.word	0x3ff00000
 80175e4:	7fe00000 	.word	0x7fe00000
 80175e8:	7c9fffff 	.word	0x7c9fffff
 80175ec:	3fe00000 	.word	0x3fe00000
 80175f0:	bff00000 	.word	0xbff00000
 80175f4:	9b04      	ldr	r3, [sp, #16]
 80175f6:	b333      	cbz	r3, 8017646 <_strtod_l+0xb7e>
 80175f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80175fa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80175fe:	d822      	bhi.n	8017646 <_strtod_l+0xb7e>
 8017600:	a327      	add	r3, pc, #156	; (adr r3, 80176a0 <_strtod_l+0xbd8>)
 8017602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017606:	4630      	mov	r0, r6
 8017608:	4639      	mov	r1, r7
 801760a:	f7e9 fa71 	bl	8000af0 <__aeabi_dcmple>
 801760e:	b1a0      	cbz	r0, 801763a <_strtod_l+0xb72>
 8017610:	4639      	mov	r1, r7
 8017612:	4630      	mov	r0, r6
 8017614:	f7e9 fac8 	bl	8000ba8 <__aeabi_d2uiz>
 8017618:	2800      	cmp	r0, #0
 801761a:	bf08      	it	eq
 801761c:	2001      	moveq	r0, #1
 801761e:	f7e8 ff71 	bl	8000504 <__aeabi_ui2d>
 8017622:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017624:	4606      	mov	r6, r0
 8017626:	460f      	mov	r7, r1
 8017628:	bb03      	cbnz	r3, 801766c <_strtod_l+0xba4>
 801762a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801762e:	9012      	str	r0, [sp, #72]	; 0x48
 8017630:	9313      	str	r3, [sp, #76]	; 0x4c
 8017632:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8017636:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801763a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801763c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801763e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017642:	1a9b      	subs	r3, r3, r2
 8017644:	930b      	str	r3, [sp, #44]	; 0x2c
 8017646:	ed9d 0b08 	vldr	d0, [sp, #32]
 801764a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801764e:	f001 fd2d 	bl	80190ac <__ulp>
 8017652:	4650      	mov	r0, sl
 8017654:	ec53 2b10 	vmov	r2, r3, d0
 8017658:	4659      	mov	r1, fp
 801765a:	f7e8 ffcd 	bl	80005f8 <__aeabi_dmul>
 801765e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017662:	f7e8 fe13 	bl	800028c <__adddf3>
 8017666:	4682      	mov	sl, r0
 8017668:	468b      	mov	fp, r1
 801766a:	e772      	b.n	8017552 <_strtod_l+0xa8a>
 801766c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8017670:	e7df      	b.n	8017632 <_strtod_l+0xb6a>
 8017672:	a30d      	add	r3, pc, #52	; (adr r3, 80176a8 <_strtod_l+0xbe0>)
 8017674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017678:	f7e9 fa30 	bl	8000adc <__aeabi_dcmplt>
 801767c:	e79c      	b.n	80175b8 <_strtod_l+0xaf0>
 801767e:	2300      	movs	r3, #0
 8017680:	930d      	str	r3, [sp, #52]	; 0x34
 8017682:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017684:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017686:	6013      	str	r3, [r2, #0]
 8017688:	f7ff ba61 	b.w	8016b4e <_strtod_l+0x86>
 801768c:	2b65      	cmp	r3, #101	; 0x65
 801768e:	f04f 0200 	mov.w	r2, #0
 8017692:	f43f ab4e 	beq.w	8016d32 <_strtod_l+0x26a>
 8017696:	2101      	movs	r1, #1
 8017698:	4614      	mov	r4, r2
 801769a:	9104      	str	r1, [sp, #16]
 801769c:	f7ff bacb 	b.w	8016c36 <_strtod_l+0x16e>
 80176a0:	ffc00000 	.word	0xffc00000
 80176a4:	41dfffff 	.word	0x41dfffff
 80176a8:	94a03595 	.word	0x94a03595
 80176ac:	3fcfffff 	.word	0x3fcfffff

080176b0 <_strtod_r>:
 80176b0:	4b05      	ldr	r3, [pc, #20]	; (80176c8 <_strtod_r+0x18>)
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	b410      	push	{r4}
 80176b6:	6a1b      	ldr	r3, [r3, #32]
 80176b8:	4c04      	ldr	r4, [pc, #16]	; (80176cc <_strtod_r+0x1c>)
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	bf08      	it	eq
 80176be:	4623      	moveq	r3, r4
 80176c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176c4:	f7ff ba00 	b.w	8016ac8 <_strtod_l>
 80176c8:	200009ac 	.word	0x200009ac
 80176cc:	20000a10 	.word	0x20000a10

080176d0 <_strtol_l.isra.0>:
 80176d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80176d4:	4680      	mov	r8, r0
 80176d6:	4689      	mov	r9, r1
 80176d8:	4692      	mov	sl, r2
 80176da:	461e      	mov	r6, r3
 80176dc:	460f      	mov	r7, r1
 80176de:	463d      	mov	r5, r7
 80176e0:	9808      	ldr	r0, [sp, #32]
 80176e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80176e6:	f001 f9ed 	bl	8018ac4 <__locale_ctype_ptr_l>
 80176ea:	4420      	add	r0, r4
 80176ec:	7843      	ldrb	r3, [r0, #1]
 80176ee:	f013 0308 	ands.w	r3, r3, #8
 80176f2:	d132      	bne.n	801775a <_strtol_l.isra.0+0x8a>
 80176f4:	2c2d      	cmp	r4, #45	; 0x2d
 80176f6:	d132      	bne.n	801775e <_strtol_l.isra.0+0x8e>
 80176f8:	787c      	ldrb	r4, [r7, #1]
 80176fa:	1cbd      	adds	r5, r7, #2
 80176fc:	2201      	movs	r2, #1
 80176fe:	2e00      	cmp	r6, #0
 8017700:	d05d      	beq.n	80177be <_strtol_l.isra.0+0xee>
 8017702:	2e10      	cmp	r6, #16
 8017704:	d109      	bne.n	801771a <_strtol_l.isra.0+0x4a>
 8017706:	2c30      	cmp	r4, #48	; 0x30
 8017708:	d107      	bne.n	801771a <_strtol_l.isra.0+0x4a>
 801770a:	782b      	ldrb	r3, [r5, #0]
 801770c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017710:	2b58      	cmp	r3, #88	; 0x58
 8017712:	d14f      	bne.n	80177b4 <_strtol_l.isra.0+0xe4>
 8017714:	786c      	ldrb	r4, [r5, #1]
 8017716:	2610      	movs	r6, #16
 8017718:	3502      	adds	r5, #2
 801771a:	2a00      	cmp	r2, #0
 801771c:	bf14      	ite	ne
 801771e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8017722:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8017726:	2700      	movs	r7, #0
 8017728:	fbb1 fcf6 	udiv	ip, r1, r6
 801772c:	4638      	mov	r0, r7
 801772e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8017732:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8017736:	2b09      	cmp	r3, #9
 8017738:	d817      	bhi.n	801776a <_strtol_l.isra.0+0x9a>
 801773a:	461c      	mov	r4, r3
 801773c:	42a6      	cmp	r6, r4
 801773e:	dd23      	ble.n	8017788 <_strtol_l.isra.0+0xb8>
 8017740:	1c7b      	adds	r3, r7, #1
 8017742:	d007      	beq.n	8017754 <_strtol_l.isra.0+0x84>
 8017744:	4584      	cmp	ip, r0
 8017746:	d31c      	bcc.n	8017782 <_strtol_l.isra.0+0xb2>
 8017748:	d101      	bne.n	801774e <_strtol_l.isra.0+0x7e>
 801774a:	45a6      	cmp	lr, r4
 801774c:	db19      	blt.n	8017782 <_strtol_l.isra.0+0xb2>
 801774e:	fb00 4006 	mla	r0, r0, r6, r4
 8017752:	2701      	movs	r7, #1
 8017754:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017758:	e7eb      	b.n	8017732 <_strtol_l.isra.0+0x62>
 801775a:	462f      	mov	r7, r5
 801775c:	e7bf      	b.n	80176de <_strtol_l.isra.0+0xe>
 801775e:	2c2b      	cmp	r4, #43	; 0x2b
 8017760:	bf04      	itt	eq
 8017762:	1cbd      	addeq	r5, r7, #2
 8017764:	787c      	ldrbeq	r4, [r7, #1]
 8017766:	461a      	mov	r2, r3
 8017768:	e7c9      	b.n	80176fe <_strtol_l.isra.0+0x2e>
 801776a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801776e:	2b19      	cmp	r3, #25
 8017770:	d801      	bhi.n	8017776 <_strtol_l.isra.0+0xa6>
 8017772:	3c37      	subs	r4, #55	; 0x37
 8017774:	e7e2      	b.n	801773c <_strtol_l.isra.0+0x6c>
 8017776:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801777a:	2b19      	cmp	r3, #25
 801777c:	d804      	bhi.n	8017788 <_strtol_l.isra.0+0xb8>
 801777e:	3c57      	subs	r4, #87	; 0x57
 8017780:	e7dc      	b.n	801773c <_strtol_l.isra.0+0x6c>
 8017782:	f04f 37ff 	mov.w	r7, #4294967295
 8017786:	e7e5      	b.n	8017754 <_strtol_l.isra.0+0x84>
 8017788:	1c7b      	adds	r3, r7, #1
 801778a:	d108      	bne.n	801779e <_strtol_l.isra.0+0xce>
 801778c:	2322      	movs	r3, #34	; 0x22
 801778e:	f8c8 3000 	str.w	r3, [r8]
 8017792:	4608      	mov	r0, r1
 8017794:	f1ba 0f00 	cmp.w	sl, #0
 8017798:	d107      	bne.n	80177aa <_strtol_l.isra.0+0xda>
 801779a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801779e:	b102      	cbz	r2, 80177a2 <_strtol_l.isra.0+0xd2>
 80177a0:	4240      	negs	r0, r0
 80177a2:	f1ba 0f00 	cmp.w	sl, #0
 80177a6:	d0f8      	beq.n	801779a <_strtol_l.isra.0+0xca>
 80177a8:	b10f      	cbz	r7, 80177ae <_strtol_l.isra.0+0xde>
 80177aa:	f105 39ff 	add.w	r9, r5, #4294967295
 80177ae:	f8ca 9000 	str.w	r9, [sl]
 80177b2:	e7f2      	b.n	801779a <_strtol_l.isra.0+0xca>
 80177b4:	2430      	movs	r4, #48	; 0x30
 80177b6:	2e00      	cmp	r6, #0
 80177b8:	d1af      	bne.n	801771a <_strtol_l.isra.0+0x4a>
 80177ba:	2608      	movs	r6, #8
 80177bc:	e7ad      	b.n	801771a <_strtol_l.isra.0+0x4a>
 80177be:	2c30      	cmp	r4, #48	; 0x30
 80177c0:	d0a3      	beq.n	801770a <_strtol_l.isra.0+0x3a>
 80177c2:	260a      	movs	r6, #10
 80177c4:	e7a9      	b.n	801771a <_strtol_l.isra.0+0x4a>
	...

080177c8 <_strtol_r>:
 80177c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80177ca:	4c06      	ldr	r4, [pc, #24]	; (80177e4 <_strtol_r+0x1c>)
 80177cc:	4d06      	ldr	r5, [pc, #24]	; (80177e8 <_strtol_r+0x20>)
 80177ce:	6824      	ldr	r4, [r4, #0]
 80177d0:	6a24      	ldr	r4, [r4, #32]
 80177d2:	2c00      	cmp	r4, #0
 80177d4:	bf08      	it	eq
 80177d6:	462c      	moveq	r4, r5
 80177d8:	9400      	str	r4, [sp, #0]
 80177da:	f7ff ff79 	bl	80176d0 <_strtol_l.isra.0>
 80177de:	b003      	add	sp, #12
 80177e0:	bd30      	pop	{r4, r5, pc}
 80177e2:	bf00      	nop
 80177e4:	200009ac 	.word	0x200009ac
 80177e8:	20000a10 	.word	0x20000a10

080177ec <quorem>:
 80177ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177f0:	6903      	ldr	r3, [r0, #16]
 80177f2:	690c      	ldr	r4, [r1, #16]
 80177f4:	42a3      	cmp	r3, r4
 80177f6:	4680      	mov	r8, r0
 80177f8:	f2c0 8082 	blt.w	8017900 <quorem+0x114>
 80177fc:	3c01      	subs	r4, #1
 80177fe:	f101 0714 	add.w	r7, r1, #20
 8017802:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8017806:	f100 0614 	add.w	r6, r0, #20
 801780a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801780e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8017812:	eb06 030c 	add.w	r3, r6, ip
 8017816:	3501      	adds	r5, #1
 8017818:	eb07 090c 	add.w	r9, r7, ip
 801781c:	9301      	str	r3, [sp, #4]
 801781e:	fbb0 f5f5 	udiv	r5, r0, r5
 8017822:	b395      	cbz	r5, 801788a <quorem+0x9e>
 8017824:	f04f 0a00 	mov.w	sl, #0
 8017828:	4638      	mov	r0, r7
 801782a:	46b6      	mov	lr, r6
 801782c:	46d3      	mov	fp, sl
 801782e:	f850 2b04 	ldr.w	r2, [r0], #4
 8017832:	b293      	uxth	r3, r2
 8017834:	fb05 a303 	mla	r3, r5, r3, sl
 8017838:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801783c:	b29b      	uxth	r3, r3
 801783e:	ebab 0303 	sub.w	r3, fp, r3
 8017842:	0c12      	lsrs	r2, r2, #16
 8017844:	f8de b000 	ldr.w	fp, [lr]
 8017848:	fb05 a202 	mla	r2, r5, r2, sl
 801784c:	fa13 f38b 	uxtah	r3, r3, fp
 8017850:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8017854:	fa1f fb82 	uxth.w	fp, r2
 8017858:	f8de 2000 	ldr.w	r2, [lr]
 801785c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017860:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017864:	b29b      	uxth	r3, r3
 8017866:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801786a:	4581      	cmp	r9, r0
 801786c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017870:	f84e 3b04 	str.w	r3, [lr], #4
 8017874:	d2db      	bcs.n	801782e <quorem+0x42>
 8017876:	f856 300c 	ldr.w	r3, [r6, ip]
 801787a:	b933      	cbnz	r3, 801788a <quorem+0x9e>
 801787c:	9b01      	ldr	r3, [sp, #4]
 801787e:	3b04      	subs	r3, #4
 8017880:	429e      	cmp	r6, r3
 8017882:	461a      	mov	r2, r3
 8017884:	d330      	bcc.n	80178e8 <quorem+0xfc>
 8017886:	f8c8 4010 	str.w	r4, [r8, #16]
 801788a:	4640      	mov	r0, r8
 801788c:	f001 fb96 	bl	8018fbc <__mcmp>
 8017890:	2800      	cmp	r0, #0
 8017892:	db25      	blt.n	80178e0 <quorem+0xf4>
 8017894:	3501      	adds	r5, #1
 8017896:	4630      	mov	r0, r6
 8017898:	f04f 0c00 	mov.w	ip, #0
 801789c:	f857 2b04 	ldr.w	r2, [r7], #4
 80178a0:	f8d0 e000 	ldr.w	lr, [r0]
 80178a4:	b293      	uxth	r3, r2
 80178a6:	ebac 0303 	sub.w	r3, ip, r3
 80178aa:	0c12      	lsrs	r2, r2, #16
 80178ac:	fa13 f38e 	uxtah	r3, r3, lr
 80178b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80178b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80178b8:	b29b      	uxth	r3, r3
 80178ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80178be:	45b9      	cmp	r9, r7
 80178c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80178c4:	f840 3b04 	str.w	r3, [r0], #4
 80178c8:	d2e8      	bcs.n	801789c <quorem+0xb0>
 80178ca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80178ce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80178d2:	b92a      	cbnz	r2, 80178e0 <quorem+0xf4>
 80178d4:	3b04      	subs	r3, #4
 80178d6:	429e      	cmp	r6, r3
 80178d8:	461a      	mov	r2, r3
 80178da:	d30b      	bcc.n	80178f4 <quorem+0x108>
 80178dc:	f8c8 4010 	str.w	r4, [r8, #16]
 80178e0:	4628      	mov	r0, r5
 80178e2:	b003      	add	sp, #12
 80178e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178e8:	6812      	ldr	r2, [r2, #0]
 80178ea:	3b04      	subs	r3, #4
 80178ec:	2a00      	cmp	r2, #0
 80178ee:	d1ca      	bne.n	8017886 <quorem+0x9a>
 80178f0:	3c01      	subs	r4, #1
 80178f2:	e7c5      	b.n	8017880 <quorem+0x94>
 80178f4:	6812      	ldr	r2, [r2, #0]
 80178f6:	3b04      	subs	r3, #4
 80178f8:	2a00      	cmp	r2, #0
 80178fa:	d1ef      	bne.n	80178dc <quorem+0xf0>
 80178fc:	3c01      	subs	r4, #1
 80178fe:	e7ea      	b.n	80178d6 <quorem+0xea>
 8017900:	2000      	movs	r0, #0
 8017902:	e7ee      	b.n	80178e2 <quorem+0xf6>
 8017904:	0000      	movs	r0, r0
	...

08017908 <_dtoa_r>:
 8017908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801790c:	ec57 6b10 	vmov	r6, r7, d0
 8017910:	b097      	sub	sp, #92	; 0x5c
 8017912:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017914:	9106      	str	r1, [sp, #24]
 8017916:	4604      	mov	r4, r0
 8017918:	920b      	str	r2, [sp, #44]	; 0x2c
 801791a:	9312      	str	r3, [sp, #72]	; 0x48
 801791c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017920:	e9cd 6700 	strd	r6, r7, [sp]
 8017924:	b93d      	cbnz	r5, 8017936 <_dtoa_r+0x2e>
 8017926:	2010      	movs	r0, #16
 8017928:	f7fe f918 	bl	8015b5c <malloc>
 801792c:	6260      	str	r0, [r4, #36]	; 0x24
 801792e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017932:	6005      	str	r5, [r0, #0]
 8017934:	60c5      	str	r5, [r0, #12]
 8017936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017938:	6819      	ldr	r1, [r3, #0]
 801793a:	b151      	cbz	r1, 8017952 <_dtoa_r+0x4a>
 801793c:	685a      	ldr	r2, [r3, #4]
 801793e:	604a      	str	r2, [r1, #4]
 8017940:	2301      	movs	r3, #1
 8017942:	4093      	lsls	r3, r2
 8017944:	608b      	str	r3, [r1, #8]
 8017946:	4620      	mov	r0, r4
 8017948:	f001 f918 	bl	8018b7c <_Bfree>
 801794c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801794e:	2200      	movs	r2, #0
 8017950:	601a      	str	r2, [r3, #0]
 8017952:	1e3b      	subs	r3, r7, #0
 8017954:	bfbb      	ittet	lt
 8017956:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801795a:	9301      	strlt	r3, [sp, #4]
 801795c:	2300      	movge	r3, #0
 801795e:	2201      	movlt	r2, #1
 8017960:	bfac      	ite	ge
 8017962:	f8c8 3000 	strge.w	r3, [r8]
 8017966:	f8c8 2000 	strlt.w	r2, [r8]
 801796a:	4baf      	ldr	r3, [pc, #700]	; (8017c28 <_dtoa_r+0x320>)
 801796c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017970:	ea33 0308 	bics.w	r3, r3, r8
 8017974:	d114      	bne.n	80179a0 <_dtoa_r+0x98>
 8017976:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017978:	f242 730f 	movw	r3, #9999	; 0x270f
 801797c:	6013      	str	r3, [r2, #0]
 801797e:	9b00      	ldr	r3, [sp, #0]
 8017980:	b923      	cbnz	r3, 801798c <_dtoa_r+0x84>
 8017982:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8017986:	2800      	cmp	r0, #0
 8017988:	f000 8542 	beq.w	8018410 <_dtoa_r+0xb08>
 801798c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801798e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8017c3c <_dtoa_r+0x334>
 8017992:	2b00      	cmp	r3, #0
 8017994:	f000 8544 	beq.w	8018420 <_dtoa_r+0xb18>
 8017998:	f10b 0303 	add.w	r3, fp, #3
 801799c:	f000 bd3e 	b.w	801841c <_dtoa_r+0xb14>
 80179a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80179a4:	2200      	movs	r2, #0
 80179a6:	2300      	movs	r3, #0
 80179a8:	4630      	mov	r0, r6
 80179aa:	4639      	mov	r1, r7
 80179ac:	f7e9 f88c 	bl	8000ac8 <__aeabi_dcmpeq>
 80179b0:	4681      	mov	r9, r0
 80179b2:	b168      	cbz	r0, 80179d0 <_dtoa_r+0xc8>
 80179b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80179b6:	2301      	movs	r3, #1
 80179b8:	6013      	str	r3, [r2, #0]
 80179ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80179bc:	2b00      	cmp	r3, #0
 80179be:	f000 8524 	beq.w	801840a <_dtoa_r+0xb02>
 80179c2:	4b9a      	ldr	r3, [pc, #616]	; (8017c2c <_dtoa_r+0x324>)
 80179c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80179c6:	f103 3bff 	add.w	fp, r3, #4294967295
 80179ca:	6013      	str	r3, [r2, #0]
 80179cc:	f000 bd28 	b.w	8018420 <_dtoa_r+0xb18>
 80179d0:	aa14      	add	r2, sp, #80	; 0x50
 80179d2:	a915      	add	r1, sp, #84	; 0x54
 80179d4:	ec47 6b10 	vmov	d0, r6, r7
 80179d8:	4620      	mov	r0, r4
 80179da:	f001 fbdd 	bl	8019198 <__d2b>
 80179de:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80179e2:	9004      	str	r0, [sp, #16]
 80179e4:	2d00      	cmp	r5, #0
 80179e6:	d07c      	beq.n	8017ae2 <_dtoa_r+0x1da>
 80179e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80179ec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80179f0:	46b2      	mov	sl, r6
 80179f2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80179f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80179fa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80179fe:	2200      	movs	r2, #0
 8017a00:	4b8b      	ldr	r3, [pc, #556]	; (8017c30 <_dtoa_r+0x328>)
 8017a02:	4650      	mov	r0, sl
 8017a04:	4659      	mov	r1, fp
 8017a06:	f7e8 fc3f 	bl	8000288 <__aeabi_dsub>
 8017a0a:	a381      	add	r3, pc, #516	; (adr r3, 8017c10 <_dtoa_r+0x308>)
 8017a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a10:	f7e8 fdf2 	bl	80005f8 <__aeabi_dmul>
 8017a14:	a380      	add	r3, pc, #512	; (adr r3, 8017c18 <_dtoa_r+0x310>)
 8017a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a1a:	f7e8 fc37 	bl	800028c <__adddf3>
 8017a1e:	4606      	mov	r6, r0
 8017a20:	4628      	mov	r0, r5
 8017a22:	460f      	mov	r7, r1
 8017a24:	f7e8 fd7e 	bl	8000524 <__aeabi_i2d>
 8017a28:	a37d      	add	r3, pc, #500	; (adr r3, 8017c20 <_dtoa_r+0x318>)
 8017a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a2e:	f7e8 fde3 	bl	80005f8 <__aeabi_dmul>
 8017a32:	4602      	mov	r2, r0
 8017a34:	460b      	mov	r3, r1
 8017a36:	4630      	mov	r0, r6
 8017a38:	4639      	mov	r1, r7
 8017a3a:	f7e8 fc27 	bl	800028c <__adddf3>
 8017a3e:	4606      	mov	r6, r0
 8017a40:	460f      	mov	r7, r1
 8017a42:	f7e9 f889 	bl	8000b58 <__aeabi_d2iz>
 8017a46:	2200      	movs	r2, #0
 8017a48:	4682      	mov	sl, r0
 8017a4a:	2300      	movs	r3, #0
 8017a4c:	4630      	mov	r0, r6
 8017a4e:	4639      	mov	r1, r7
 8017a50:	f7e9 f844 	bl	8000adc <__aeabi_dcmplt>
 8017a54:	b148      	cbz	r0, 8017a6a <_dtoa_r+0x162>
 8017a56:	4650      	mov	r0, sl
 8017a58:	f7e8 fd64 	bl	8000524 <__aeabi_i2d>
 8017a5c:	4632      	mov	r2, r6
 8017a5e:	463b      	mov	r3, r7
 8017a60:	f7e9 f832 	bl	8000ac8 <__aeabi_dcmpeq>
 8017a64:	b908      	cbnz	r0, 8017a6a <_dtoa_r+0x162>
 8017a66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017a6a:	f1ba 0f16 	cmp.w	sl, #22
 8017a6e:	d859      	bhi.n	8017b24 <_dtoa_r+0x21c>
 8017a70:	4970      	ldr	r1, [pc, #448]	; (8017c34 <_dtoa_r+0x32c>)
 8017a72:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8017a76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017a7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017a7e:	f7e9 f84b 	bl	8000b18 <__aeabi_dcmpgt>
 8017a82:	2800      	cmp	r0, #0
 8017a84:	d050      	beq.n	8017b28 <_dtoa_r+0x220>
 8017a86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8017a8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017a90:	1b5d      	subs	r5, r3, r5
 8017a92:	f1b5 0801 	subs.w	r8, r5, #1
 8017a96:	bf49      	itett	mi
 8017a98:	f1c5 0301 	rsbmi	r3, r5, #1
 8017a9c:	2300      	movpl	r3, #0
 8017a9e:	9305      	strmi	r3, [sp, #20]
 8017aa0:	f04f 0800 	movmi.w	r8, #0
 8017aa4:	bf58      	it	pl
 8017aa6:	9305      	strpl	r3, [sp, #20]
 8017aa8:	f1ba 0f00 	cmp.w	sl, #0
 8017aac:	db3e      	blt.n	8017b2c <_dtoa_r+0x224>
 8017aae:	2300      	movs	r3, #0
 8017ab0:	44d0      	add	r8, sl
 8017ab2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8017ab6:	9307      	str	r3, [sp, #28]
 8017ab8:	9b06      	ldr	r3, [sp, #24]
 8017aba:	2b09      	cmp	r3, #9
 8017abc:	f200 8090 	bhi.w	8017be0 <_dtoa_r+0x2d8>
 8017ac0:	2b05      	cmp	r3, #5
 8017ac2:	bfc4      	itt	gt
 8017ac4:	3b04      	subgt	r3, #4
 8017ac6:	9306      	strgt	r3, [sp, #24]
 8017ac8:	9b06      	ldr	r3, [sp, #24]
 8017aca:	f1a3 0302 	sub.w	r3, r3, #2
 8017ace:	bfcc      	ite	gt
 8017ad0:	2500      	movgt	r5, #0
 8017ad2:	2501      	movle	r5, #1
 8017ad4:	2b03      	cmp	r3, #3
 8017ad6:	f200 808f 	bhi.w	8017bf8 <_dtoa_r+0x2f0>
 8017ada:	e8df f003 	tbb	[pc, r3]
 8017ade:	7f7d      	.short	0x7f7d
 8017ae0:	7131      	.short	0x7131
 8017ae2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8017ae6:	441d      	add	r5, r3
 8017ae8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8017aec:	2820      	cmp	r0, #32
 8017aee:	dd13      	ble.n	8017b18 <_dtoa_r+0x210>
 8017af0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8017af4:	9b00      	ldr	r3, [sp, #0]
 8017af6:	fa08 f800 	lsl.w	r8, r8, r0
 8017afa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8017afe:	fa23 f000 	lsr.w	r0, r3, r0
 8017b02:	ea48 0000 	orr.w	r0, r8, r0
 8017b06:	f7e8 fcfd 	bl	8000504 <__aeabi_ui2d>
 8017b0a:	2301      	movs	r3, #1
 8017b0c:	4682      	mov	sl, r0
 8017b0e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8017b12:	3d01      	subs	r5, #1
 8017b14:	9313      	str	r3, [sp, #76]	; 0x4c
 8017b16:	e772      	b.n	80179fe <_dtoa_r+0xf6>
 8017b18:	9b00      	ldr	r3, [sp, #0]
 8017b1a:	f1c0 0020 	rsb	r0, r0, #32
 8017b1e:	fa03 f000 	lsl.w	r0, r3, r0
 8017b22:	e7f0      	b.n	8017b06 <_dtoa_r+0x1fe>
 8017b24:	2301      	movs	r3, #1
 8017b26:	e7b1      	b.n	8017a8c <_dtoa_r+0x184>
 8017b28:	900f      	str	r0, [sp, #60]	; 0x3c
 8017b2a:	e7b0      	b.n	8017a8e <_dtoa_r+0x186>
 8017b2c:	9b05      	ldr	r3, [sp, #20]
 8017b2e:	eba3 030a 	sub.w	r3, r3, sl
 8017b32:	9305      	str	r3, [sp, #20]
 8017b34:	f1ca 0300 	rsb	r3, sl, #0
 8017b38:	9307      	str	r3, [sp, #28]
 8017b3a:	2300      	movs	r3, #0
 8017b3c:	930e      	str	r3, [sp, #56]	; 0x38
 8017b3e:	e7bb      	b.n	8017ab8 <_dtoa_r+0x1b0>
 8017b40:	2301      	movs	r3, #1
 8017b42:	930a      	str	r3, [sp, #40]	; 0x28
 8017b44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	dd59      	ble.n	8017bfe <_dtoa_r+0x2f6>
 8017b4a:	9302      	str	r3, [sp, #8]
 8017b4c:	4699      	mov	r9, r3
 8017b4e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017b50:	2200      	movs	r2, #0
 8017b52:	6072      	str	r2, [r6, #4]
 8017b54:	2204      	movs	r2, #4
 8017b56:	f102 0014 	add.w	r0, r2, #20
 8017b5a:	4298      	cmp	r0, r3
 8017b5c:	6871      	ldr	r1, [r6, #4]
 8017b5e:	d953      	bls.n	8017c08 <_dtoa_r+0x300>
 8017b60:	4620      	mov	r0, r4
 8017b62:	f000 ffd7 	bl	8018b14 <_Balloc>
 8017b66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017b68:	6030      	str	r0, [r6, #0]
 8017b6a:	f1b9 0f0e 	cmp.w	r9, #14
 8017b6e:	f8d3 b000 	ldr.w	fp, [r3]
 8017b72:	f200 80e6 	bhi.w	8017d42 <_dtoa_r+0x43a>
 8017b76:	2d00      	cmp	r5, #0
 8017b78:	f000 80e3 	beq.w	8017d42 <_dtoa_r+0x43a>
 8017b7c:	ed9d 7b00 	vldr	d7, [sp]
 8017b80:	f1ba 0f00 	cmp.w	sl, #0
 8017b84:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017b88:	dd74      	ble.n	8017c74 <_dtoa_r+0x36c>
 8017b8a:	4a2a      	ldr	r2, [pc, #168]	; (8017c34 <_dtoa_r+0x32c>)
 8017b8c:	f00a 030f 	and.w	r3, sl, #15
 8017b90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017b94:	ed93 7b00 	vldr	d7, [r3]
 8017b98:	ea4f 162a 	mov.w	r6, sl, asr #4
 8017b9c:	06f0      	lsls	r0, r6, #27
 8017b9e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017ba2:	d565      	bpl.n	8017c70 <_dtoa_r+0x368>
 8017ba4:	4b24      	ldr	r3, [pc, #144]	; (8017c38 <_dtoa_r+0x330>)
 8017ba6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017baa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017bae:	f7e8 fe4d 	bl	800084c <__aeabi_ddiv>
 8017bb2:	e9cd 0100 	strd	r0, r1, [sp]
 8017bb6:	f006 060f 	and.w	r6, r6, #15
 8017bba:	2503      	movs	r5, #3
 8017bbc:	4f1e      	ldr	r7, [pc, #120]	; (8017c38 <_dtoa_r+0x330>)
 8017bbe:	e04c      	b.n	8017c5a <_dtoa_r+0x352>
 8017bc0:	2301      	movs	r3, #1
 8017bc2:	930a      	str	r3, [sp, #40]	; 0x28
 8017bc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017bc6:	4453      	add	r3, sl
 8017bc8:	f103 0901 	add.w	r9, r3, #1
 8017bcc:	9302      	str	r3, [sp, #8]
 8017bce:	464b      	mov	r3, r9
 8017bd0:	2b01      	cmp	r3, #1
 8017bd2:	bfb8      	it	lt
 8017bd4:	2301      	movlt	r3, #1
 8017bd6:	e7ba      	b.n	8017b4e <_dtoa_r+0x246>
 8017bd8:	2300      	movs	r3, #0
 8017bda:	e7b2      	b.n	8017b42 <_dtoa_r+0x23a>
 8017bdc:	2300      	movs	r3, #0
 8017bde:	e7f0      	b.n	8017bc2 <_dtoa_r+0x2ba>
 8017be0:	2501      	movs	r5, #1
 8017be2:	2300      	movs	r3, #0
 8017be4:	9306      	str	r3, [sp, #24]
 8017be6:	950a      	str	r5, [sp, #40]	; 0x28
 8017be8:	f04f 33ff 	mov.w	r3, #4294967295
 8017bec:	9302      	str	r3, [sp, #8]
 8017bee:	4699      	mov	r9, r3
 8017bf0:	2200      	movs	r2, #0
 8017bf2:	2312      	movs	r3, #18
 8017bf4:	920b      	str	r2, [sp, #44]	; 0x2c
 8017bf6:	e7aa      	b.n	8017b4e <_dtoa_r+0x246>
 8017bf8:	2301      	movs	r3, #1
 8017bfa:	930a      	str	r3, [sp, #40]	; 0x28
 8017bfc:	e7f4      	b.n	8017be8 <_dtoa_r+0x2e0>
 8017bfe:	2301      	movs	r3, #1
 8017c00:	9302      	str	r3, [sp, #8]
 8017c02:	4699      	mov	r9, r3
 8017c04:	461a      	mov	r2, r3
 8017c06:	e7f5      	b.n	8017bf4 <_dtoa_r+0x2ec>
 8017c08:	3101      	adds	r1, #1
 8017c0a:	6071      	str	r1, [r6, #4]
 8017c0c:	0052      	lsls	r2, r2, #1
 8017c0e:	e7a2      	b.n	8017b56 <_dtoa_r+0x24e>
 8017c10:	636f4361 	.word	0x636f4361
 8017c14:	3fd287a7 	.word	0x3fd287a7
 8017c18:	8b60c8b3 	.word	0x8b60c8b3
 8017c1c:	3fc68a28 	.word	0x3fc68a28
 8017c20:	509f79fb 	.word	0x509f79fb
 8017c24:	3fd34413 	.word	0x3fd34413
 8017c28:	7ff00000 	.word	0x7ff00000
 8017c2c:	0801b2b9 	.word	0x0801b2b9
 8017c30:	3ff80000 	.word	0x3ff80000
 8017c34:	0801b378 	.word	0x0801b378
 8017c38:	0801b350 	.word	0x0801b350
 8017c3c:	0801b341 	.word	0x0801b341
 8017c40:	07f1      	lsls	r1, r6, #31
 8017c42:	d508      	bpl.n	8017c56 <_dtoa_r+0x34e>
 8017c44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017c48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017c4c:	f7e8 fcd4 	bl	80005f8 <__aeabi_dmul>
 8017c50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017c54:	3501      	adds	r5, #1
 8017c56:	1076      	asrs	r6, r6, #1
 8017c58:	3708      	adds	r7, #8
 8017c5a:	2e00      	cmp	r6, #0
 8017c5c:	d1f0      	bne.n	8017c40 <_dtoa_r+0x338>
 8017c5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017c62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c66:	f7e8 fdf1 	bl	800084c <__aeabi_ddiv>
 8017c6a:	e9cd 0100 	strd	r0, r1, [sp]
 8017c6e:	e01a      	b.n	8017ca6 <_dtoa_r+0x39e>
 8017c70:	2502      	movs	r5, #2
 8017c72:	e7a3      	b.n	8017bbc <_dtoa_r+0x2b4>
 8017c74:	f000 80a0 	beq.w	8017db8 <_dtoa_r+0x4b0>
 8017c78:	f1ca 0600 	rsb	r6, sl, #0
 8017c7c:	4b9f      	ldr	r3, [pc, #636]	; (8017efc <_dtoa_r+0x5f4>)
 8017c7e:	4fa0      	ldr	r7, [pc, #640]	; (8017f00 <_dtoa_r+0x5f8>)
 8017c80:	f006 020f 	and.w	r2, r6, #15
 8017c84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017c90:	f7e8 fcb2 	bl	80005f8 <__aeabi_dmul>
 8017c94:	e9cd 0100 	strd	r0, r1, [sp]
 8017c98:	1136      	asrs	r6, r6, #4
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	2502      	movs	r5, #2
 8017c9e:	2e00      	cmp	r6, #0
 8017ca0:	d17f      	bne.n	8017da2 <_dtoa_r+0x49a>
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d1e1      	bne.n	8017c6a <_dtoa_r+0x362>
 8017ca6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	f000 8087 	beq.w	8017dbc <_dtoa_r+0x4b4>
 8017cae:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017cb2:	2200      	movs	r2, #0
 8017cb4:	4b93      	ldr	r3, [pc, #588]	; (8017f04 <_dtoa_r+0x5fc>)
 8017cb6:	4630      	mov	r0, r6
 8017cb8:	4639      	mov	r1, r7
 8017cba:	f7e8 ff0f 	bl	8000adc <__aeabi_dcmplt>
 8017cbe:	2800      	cmp	r0, #0
 8017cc0:	d07c      	beq.n	8017dbc <_dtoa_r+0x4b4>
 8017cc2:	f1b9 0f00 	cmp.w	r9, #0
 8017cc6:	d079      	beq.n	8017dbc <_dtoa_r+0x4b4>
 8017cc8:	9b02      	ldr	r3, [sp, #8]
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	dd35      	ble.n	8017d3a <_dtoa_r+0x432>
 8017cce:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017cd2:	9308      	str	r3, [sp, #32]
 8017cd4:	4639      	mov	r1, r7
 8017cd6:	2200      	movs	r2, #0
 8017cd8:	4b8b      	ldr	r3, [pc, #556]	; (8017f08 <_dtoa_r+0x600>)
 8017cda:	4630      	mov	r0, r6
 8017cdc:	f7e8 fc8c 	bl	80005f8 <__aeabi_dmul>
 8017ce0:	e9cd 0100 	strd	r0, r1, [sp]
 8017ce4:	9f02      	ldr	r7, [sp, #8]
 8017ce6:	3501      	adds	r5, #1
 8017ce8:	4628      	mov	r0, r5
 8017cea:	f7e8 fc1b 	bl	8000524 <__aeabi_i2d>
 8017cee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017cf2:	f7e8 fc81 	bl	80005f8 <__aeabi_dmul>
 8017cf6:	2200      	movs	r2, #0
 8017cf8:	4b84      	ldr	r3, [pc, #528]	; (8017f0c <_dtoa_r+0x604>)
 8017cfa:	f7e8 fac7 	bl	800028c <__adddf3>
 8017cfe:	4605      	mov	r5, r0
 8017d00:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017d04:	2f00      	cmp	r7, #0
 8017d06:	d15d      	bne.n	8017dc4 <_dtoa_r+0x4bc>
 8017d08:	2200      	movs	r2, #0
 8017d0a:	4b81      	ldr	r3, [pc, #516]	; (8017f10 <_dtoa_r+0x608>)
 8017d0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017d10:	f7e8 faba 	bl	8000288 <__aeabi_dsub>
 8017d14:	462a      	mov	r2, r5
 8017d16:	4633      	mov	r3, r6
 8017d18:	e9cd 0100 	strd	r0, r1, [sp]
 8017d1c:	f7e8 fefc 	bl	8000b18 <__aeabi_dcmpgt>
 8017d20:	2800      	cmp	r0, #0
 8017d22:	f040 8288 	bne.w	8018236 <_dtoa_r+0x92e>
 8017d26:	462a      	mov	r2, r5
 8017d28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017d2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017d30:	f7e8 fed4 	bl	8000adc <__aeabi_dcmplt>
 8017d34:	2800      	cmp	r0, #0
 8017d36:	f040 827c 	bne.w	8018232 <_dtoa_r+0x92a>
 8017d3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017d3e:	e9cd 2300 	strd	r2, r3, [sp]
 8017d42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	f2c0 8150 	blt.w	8017fea <_dtoa_r+0x6e2>
 8017d4a:	f1ba 0f0e 	cmp.w	sl, #14
 8017d4e:	f300 814c 	bgt.w	8017fea <_dtoa_r+0x6e2>
 8017d52:	4b6a      	ldr	r3, [pc, #424]	; (8017efc <_dtoa_r+0x5f4>)
 8017d54:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017d58:	ed93 7b00 	vldr	d7, [r3]
 8017d5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017d64:	f280 80d8 	bge.w	8017f18 <_dtoa_r+0x610>
 8017d68:	f1b9 0f00 	cmp.w	r9, #0
 8017d6c:	f300 80d4 	bgt.w	8017f18 <_dtoa_r+0x610>
 8017d70:	f040 825e 	bne.w	8018230 <_dtoa_r+0x928>
 8017d74:	2200      	movs	r2, #0
 8017d76:	4b66      	ldr	r3, [pc, #408]	; (8017f10 <_dtoa_r+0x608>)
 8017d78:	ec51 0b17 	vmov	r0, r1, d7
 8017d7c:	f7e8 fc3c 	bl	80005f8 <__aeabi_dmul>
 8017d80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017d84:	f7e8 febe 	bl	8000b04 <__aeabi_dcmpge>
 8017d88:	464f      	mov	r7, r9
 8017d8a:	464e      	mov	r6, r9
 8017d8c:	2800      	cmp	r0, #0
 8017d8e:	f040 8234 	bne.w	80181fa <_dtoa_r+0x8f2>
 8017d92:	2331      	movs	r3, #49	; 0x31
 8017d94:	f10b 0501 	add.w	r5, fp, #1
 8017d98:	f88b 3000 	strb.w	r3, [fp]
 8017d9c:	f10a 0a01 	add.w	sl, sl, #1
 8017da0:	e22f      	b.n	8018202 <_dtoa_r+0x8fa>
 8017da2:	07f2      	lsls	r2, r6, #31
 8017da4:	d505      	bpl.n	8017db2 <_dtoa_r+0x4aa>
 8017da6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017daa:	f7e8 fc25 	bl	80005f8 <__aeabi_dmul>
 8017dae:	3501      	adds	r5, #1
 8017db0:	2301      	movs	r3, #1
 8017db2:	1076      	asrs	r6, r6, #1
 8017db4:	3708      	adds	r7, #8
 8017db6:	e772      	b.n	8017c9e <_dtoa_r+0x396>
 8017db8:	2502      	movs	r5, #2
 8017dba:	e774      	b.n	8017ca6 <_dtoa_r+0x39e>
 8017dbc:	f8cd a020 	str.w	sl, [sp, #32]
 8017dc0:	464f      	mov	r7, r9
 8017dc2:	e791      	b.n	8017ce8 <_dtoa_r+0x3e0>
 8017dc4:	4b4d      	ldr	r3, [pc, #308]	; (8017efc <_dtoa_r+0x5f4>)
 8017dc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017dca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8017dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d047      	beq.n	8017e64 <_dtoa_r+0x55c>
 8017dd4:	4602      	mov	r2, r0
 8017dd6:	460b      	mov	r3, r1
 8017dd8:	2000      	movs	r0, #0
 8017dda:	494e      	ldr	r1, [pc, #312]	; (8017f14 <_dtoa_r+0x60c>)
 8017ddc:	f7e8 fd36 	bl	800084c <__aeabi_ddiv>
 8017de0:	462a      	mov	r2, r5
 8017de2:	4633      	mov	r3, r6
 8017de4:	f7e8 fa50 	bl	8000288 <__aeabi_dsub>
 8017de8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017dec:	465d      	mov	r5, fp
 8017dee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017df2:	f7e8 feb1 	bl	8000b58 <__aeabi_d2iz>
 8017df6:	4606      	mov	r6, r0
 8017df8:	f7e8 fb94 	bl	8000524 <__aeabi_i2d>
 8017dfc:	4602      	mov	r2, r0
 8017dfe:	460b      	mov	r3, r1
 8017e00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017e04:	f7e8 fa40 	bl	8000288 <__aeabi_dsub>
 8017e08:	3630      	adds	r6, #48	; 0x30
 8017e0a:	f805 6b01 	strb.w	r6, [r5], #1
 8017e0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017e12:	e9cd 0100 	strd	r0, r1, [sp]
 8017e16:	f7e8 fe61 	bl	8000adc <__aeabi_dcmplt>
 8017e1a:	2800      	cmp	r0, #0
 8017e1c:	d163      	bne.n	8017ee6 <_dtoa_r+0x5de>
 8017e1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017e22:	2000      	movs	r0, #0
 8017e24:	4937      	ldr	r1, [pc, #220]	; (8017f04 <_dtoa_r+0x5fc>)
 8017e26:	f7e8 fa2f 	bl	8000288 <__aeabi_dsub>
 8017e2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017e2e:	f7e8 fe55 	bl	8000adc <__aeabi_dcmplt>
 8017e32:	2800      	cmp	r0, #0
 8017e34:	f040 80b7 	bne.w	8017fa6 <_dtoa_r+0x69e>
 8017e38:	eba5 030b 	sub.w	r3, r5, fp
 8017e3c:	429f      	cmp	r7, r3
 8017e3e:	f77f af7c 	ble.w	8017d3a <_dtoa_r+0x432>
 8017e42:	2200      	movs	r2, #0
 8017e44:	4b30      	ldr	r3, [pc, #192]	; (8017f08 <_dtoa_r+0x600>)
 8017e46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017e4a:	f7e8 fbd5 	bl	80005f8 <__aeabi_dmul>
 8017e4e:	2200      	movs	r2, #0
 8017e50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017e54:	4b2c      	ldr	r3, [pc, #176]	; (8017f08 <_dtoa_r+0x600>)
 8017e56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017e5a:	f7e8 fbcd 	bl	80005f8 <__aeabi_dmul>
 8017e5e:	e9cd 0100 	strd	r0, r1, [sp]
 8017e62:	e7c4      	b.n	8017dee <_dtoa_r+0x4e6>
 8017e64:	462a      	mov	r2, r5
 8017e66:	4633      	mov	r3, r6
 8017e68:	f7e8 fbc6 	bl	80005f8 <__aeabi_dmul>
 8017e6c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017e70:	eb0b 0507 	add.w	r5, fp, r7
 8017e74:	465e      	mov	r6, fp
 8017e76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017e7a:	f7e8 fe6d 	bl	8000b58 <__aeabi_d2iz>
 8017e7e:	4607      	mov	r7, r0
 8017e80:	f7e8 fb50 	bl	8000524 <__aeabi_i2d>
 8017e84:	3730      	adds	r7, #48	; 0x30
 8017e86:	4602      	mov	r2, r0
 8017e88:	460b      	mov	r3, r1
 8017e8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017e8e:	f7e8 f9fb 	bl	8000288 <__aeabi_dsub>
 8017e92:	f806 7b01 	strb.w	r7, [r6], #1
 8017e96:	42ae      	cmp	r6, r5
 8017e98:	e9cd 0100 	strd	r0, r1, [sp]
 8017e9c:	f04f 0200 	mov.w	r2, #0
 8017ea0:	d126      	bne.n	8017ef0 <_dtoa_r+0x5e8>
 8017ea2:	4b1c      	ldr	r3, [pc, #112]	; (8017f14 <_dtoa_r+0x60c>)
 8017ea4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017ea8:	f7e8 f9f0 	bl	800028c <__adddf3>
 8017eac:	4602      	mov	r2, r0
 8017eae:	460b      	mov	r3, r1
 8017eb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017eb4:	f7e8 fe30 	bl	8000b18 <__aeabi_dcmpgt>
 8017eb8:	2800      	cmp	r0, #0
 8017eba:	d174      	bne.n	8017fa6 <_dtoa_r+0x69e>
 8017ebc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017ec0:	2000      	movs	r0, #0
 8017ec2:	4914      	ldr	r1, [pc, #80]	; (8017f14 <_dtoa_r+0x60c>)
 8017ec4:	f7e8 f9e0 	bl	8000288 <__aeabi_dsub>
 8017ec8:	4602      	mov	r2, r0
 8017eca:	460b      	mov	r3, r1
 8017ecc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017ed0:	f7e8 fe04 	bl	8000adc <__aeabi_dcmplt>
 8017ed4:	2800      	cmp	r0, #0
 8017ed6:	f43f af30 	beq.w	8017d3a <_dtoa_r+0x432>
 8017eda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017ede:	2b30      	cmp	r3, #48	; 0x30
 8017ee0:	f105 32ff 	add.w	r2, r5, #4294967295
 8017ee4:	d002      	beq.n	8017eec <_dtoa_r+0x5e4>
 8017ee6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017eea:	e04a      	b.n	8017f82 <_dtoa_r+0x67a>
 8017eec:	4615      	mov	r5, r2
 8017eee:	e7f4      	b.n	8017eda <_dtoa_r+0x5d2>
 8017ef0:	4b05      	ldr	r3, [pc, #20]	; (8017f08 <_dtoa_r+0x600>)
 8017ef2:	f7e8 fb81 	bl	80005f8 <__aeabi_dmul>
 8017ef6:	e9cd 0100 	strd	r0, r1, [sp]
 8017efa:	e7bc      	b.n	8017e76 <_dtoa_r+0x56e>
 8017efc:	0801b378 	.word	0x0801b378
 8017f00:	0801b350 	.word	0x0801b350
 8017f04:	3ff00000 	.word	0x3ff00000
 8017f08:	40240000 	.word	0x40240000
 8017f0c:	401c0000 	.word	0x401c0000
 8017f10:	40140000 	.word	0x40140000
 8017f14:	3fe00000 	.word	0x3fe00000
 8017f18:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017f1c:	465d      	mov	r5, fp
 8017f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017f22:	4630      	mov	r0, r6
 8017f24:	4639      	mov	r1, r7
 8017f26:	f7e8 fc91 	bl	800084c <__aeabi_ddiv>
 8017f2a:	f7e8 fe15 	bl	8000b58 <__aeabi_d2iz>
 8017f2e:	4680      	mov	r8, r0
 8017f30:	f7e8 faf8 	bl	8000524 <__aeabi_i2d>
 8017f34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017f38:	f7e8 fb5e 	bl	80005f8 <__aeabi_dmul>
 8017f3c:	4602      	mov	r2, r0
 8017f3e:	460b      	mov	r3, r1
 8017f40:	4630      	mov	r0, r6
 8017f42:	4639      	mov	r1, r7
 8017f44:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017f48:	f7e8 f99e 	bl	8000288 <__aeabi_dsub>
 8017f4c:	f805 6b01 	strb.w	r6, [r5], #1
 8017f50:	eba5 060b 	sub.w	r6, r5, fp
 8017f54:	45b1      	cmp	r9, r6
 8017f56:	4602      	mov	r2, r0
 8017f58:	460b      	mov	r3, r1
 8017f5a:	d139      	bne.n	8017fd0 <_dtoa_r+0x6c8>
 8017f5c:	f7e8 f996 	bl	800028c <__adddf3>
 8017f60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017f64:	4606      	mov	r6, r0
 8017f66:	460f      	mov	r7, r1
 8017f68:	f7e8 fdd6 	bl	8000b18 <__aeabi_dcmpgt>
 8017f6c:	b9c8      	cbnz	r0, 8017fa2 <_dtoa_r+0x69a>
 8017f6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017f72:	4630      	mov	r0, r6
 8017f74:	4639      	mov	r1, r7
 8017f76:	f7e8 fda7 	bl	8000ac8 <__aeabi_dcmpeq>
 8017f7a:	b110      	cbz	r0, 8017f82 <_dtoa_r+0x67a>
 8017f7c:	f018 0f01 	tst.w	r8, #1
 8017f80:	d10f      	bne.n	8017fa2 <_dtoa_r+0x69a>
 8017f82:	9904      	ldr	r1, [sp, #16]
 8017f84:	4620      	mov	r0, r4
 8017f86:	f000 fdf9 	bl	8018b7c <_Bfree>
 8017f8a:	2300      	movs	r3, #0
 8017f8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017f8e:	702b      	strb	r3, [r5, #0]
 8017f90:	f10a 0301 	add.w	r3, sl, #1
 8017f94:	6013      	str	r3, [r2, #0]
 8017f96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	f000 8241 	beq.w	8018420 <_dtoa_r+0xb18>
 8017f9e:	601d      	str	r5, [r3, #0]
 8017fa0:	e23e      	b.n	8018420 <_dtoa_r+0xb18>
 8017fa2:	f8cd a020 	str.w	sl, [sp, #32]
 8017fa6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017faa:	2a39      	cmp	r2, #57	; 0x39
 8017fac:	f105 33ff 	add.w	r3, r5, #4294967295
 8017fb0:	d108      	bne.n	8017fc4 <_dtoa_r+0x6bc>
 8017fb2:	459b      	cmp	fp, r3
 8017fb4:	d10a      	bne.n	8017fcc <_dtoa_r+0x6c4>
 8017fb6:	9b08      	ldr	r3, [sp, #32]
 8017fb8:	3301      	adds	r3, #1
 8017fba:	9308      	str	r3, [sp, #32]
 8017fbc:	2330      	movs	r3, #48	; 0x30
 8017fbe:	f88b 3000 	strb.w	r3, [fp]
 8017fc2:	465b      	mov	r3, fp
 8017fc4:	781a      	ldrb	r2, [r3, #0]
 8017fc6:	3201      	adds	r2, #1
 8017fc8:	701a      	strb	r2, [r3, #0]
 8017fca:	e78c      	b.n	8017ee6 <_dtoa_r+0x5de>
 8017fcc:	461d      	mov	r5, r3
 8017fce:	e7ea      	b.n	8017fa6 <_dtoa_r+0x69e>
 8017fd0:	2200      	movs	r2, #0
 8017fd2:	4b9b      	ldr	r3, [pc, #620]	; (8018240 <_dtoa_r+0x938>)
 8017fd4:	f7e8 fb10 	bl	80005f8 <__aeabi_dmul>
 8017fd8:	2200      	movs	r2, #0
 8017fda:	2300      	movs	r3, #0
 8017fdc:	4606      	mov	r6, r0
 8017fde:	460f      	mov	r7, r1
 8017fe0:	f7e8 fd72 	bl	8000ac8 <__aeabi_dcmpeq>
 8017fe4:	2800      	cmp	r0, #0
 8017fe6:	d09a      	beq.n	8017f1e <_dtoa_r+0x616>
 8017fe8:	e7cb      	b.n	8017f82 <_dtoa_r+0x67a>
 8017fea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017fec:	2a00      	cmp	r2, #0
 8017fee:	f000 808b 	beq.w	8018108 <_dtoa_r+0x800>
 8017ff2:	9a06      	ldr	r2, [sp, #24]
 8017ff4:	2a01      	cmp	r2, #1
 8017ff6:	dc6e      	bgt.n	80180d6 <_dtoa_r+0x7ce>
 8017ff8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017ffa:	2a00      	cmp	r2, #0
 8017ffc:	d067      	beq.n	80180ce <_dtoa_r+0x7c6>
 8017ffe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018002:	9f07      	ldr	r7, [sp, #28]
 8018004:	9d05      	ldr	r5, [sp, #20]
 8018006:	9a05      	ldr	r2, [sp, #20]
 8018008:	2101      	movs	r1, #1
 801800a:	441a      	add	r2, r3
 801800c:	4620      	mov	r0, r4
 801800e:	9205      	str	r2, [sp, #20]
 8018010:	4498      	add	r8, r3
 8018012:	f000 fe91 	bl	8018d38 <__i2b>
 8018016:	4606      	mov	r6, r0
 8018018:	2d00      	cmp	r5, #0
 801801a:	dd0c      	ble.n	8018036 <_dtoa_r+0x72e>
 801801c:	f1b8 0f00 	cmp.w	r8, #0
 8018020:	dd09      	ble.n	8018036 <_dtoa_r+0x72e>
 8018022:	4545      	cmp	r5, r8
 8018024:	9a05      	ldr	r2, [sp, #20]
 8018026:	462b      	mov	r3, r5
 8018028:	bfa8      	it	ge
 801802a:	4643      	movge	r3, r8
 801802c:	1ad2      	subs	r2, r2, r3
 801802e:	9205      	str	r2, [sp, #20]
 8018030:	1aed      	subs	r5, r5, r3
 8018032:	eba8 0803 	sub.w	r8, r8, r3
 8018036:	9b07      	ldr	r3, [sp, #28]
 8018038:	b1eb      	cbz	r3, 8018076 <_dtoa_r+0x76e>
 801803a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801803c:	2b00      	cmp	r3, #0
 801803e:	d067      	beq.n	8018110 <_dtoa_r+0x808>
 8018040:	b18f      	cbz	r7, 8018066 <_dtoa_r+0x75e>
 8018042:	4631      	mov	r1, r6
 8018044:	463a      	mov	r2, r7
 8018046:	4620      	mov	r0, r4
 8018048:	f000 ff16 	bl	8018e78 <__pow5mult>
 801804c:	9a04      	ldr	r2, [sp, #16]
 801804e:	4601      	mov	r1, r0
 8018050:	4606      	mov	r6, r0
 8018052:	4620      	mov	r0, r4
 8018054:	f000 fe79 	bl	8018d4a <__multiply>
 8018058:	9904      	ldr	r1, [sp, #16]
 801805a:	9008      	str	r0, [sp, #32]
 801805c:	4620      	mov	r0, r4
 801805e:	f000 fd8d 	bl	8018b7c <_Bfree>
 8018062:	9b08      	ldr	r3, [sp, #32]
 8018064:	9304      	str	r3, [sp, #16]
 8018066:	9b07      	ldr	r3, [sp, #28]
 8018068:	1bda      	subs	r2, r3, r7
 801806a:	d004      	beq.n	8018076 <_dtoa_r+0x76e>
 801806c:	9904      	ldr	r1, [sp, #16]
 801806e:	4620      	mov	r0, r4
 8018070:	f000 ff02 	bl	8018e78 <__pow5mult>
 8018074:	9004      	str	r0, [sp, #16]
 8018076:	2101      	movs	r1, #1
 8018078:	4620      	mov	r0, r4
 801807a:	f000 fe5d 	bl	8018d38 <__i2b>
 801807e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018080:	4607      	mov	r7, r0
 8018082:	2b00      	cmp	r3, #0
 8018084:	f000 81d0 	beq.w	8018428 <_dtoa_r+0xb20>
 8018088:	461a      	mov	r2, r3
 801808a:	4601      	mov	r1, r0
 801808c:	4620      	mov	r0, r4
 801808e:	f000 fef3 	bl	8018e78 <__pow5mult>
 8018092:	9b06      	ldr	r3, [sp, #24]
 8018094:	2b01      	cmp	r3, #1
 8018096:	4607      	mov	r7, r0
 8018098:	dc40      	bgt.n	801811c <_dtoa_r+0x814>
 801809a:	9b00      	ldr	r3, [sp, #0]
 801809c:	2b00      	cmp	r3, #0
 801809e:	d139      	bne.n	8018114 <_dtoa_r+0x80c>
 80180a0:	9b01      	ldr	r3, [sp, #4]
 80180a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d136      	bne.n	8018118 <_dtoa_r+0x810>
 80180aa:	9b01      	ldr	r3, [sp, #4]
 80180ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80180b0:	0d1b      	lsrs	r3, r3, #20
 80180b2:	051b      	lsls	r3, r3, #20
 80180b4:	b12b      	cbz	r3, 80180c2 <_dtoa_r+0x7ba>
 80180b6:	9b05      	ldr	r3, [sp, #20]
 80180b8:	3301      	adds	r3, #1
 80180ba:	9305      	str	r3, [sp, #20]
 80180bc:	f108 0801 	add.w	r8, r8, #1
 80180c0:	2301      	movs	r3, #1
 80180c2:	9307      	str	r3, [sp, #28]
 80180c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d12a      	bne.n	8018120 <_dtoa_r+0x818>
 80180ca:	2001      	movs	r0, #1
 80180cc:	e030      	b.n	8018130 <_dtoa_r+0x828>
 80180ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80180d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80180d4:	e795      	b.n	8018002 <_dtoa_r+0x6fa>
 80180d6:	9b07      	ldr	r3, [sp, #28]
 80180d8:	f109 37ff 	add.w	r7, r9, #4294967295
 80180dc:	42bb      	cmp	r3, r7
 80180de:	bfbf      	itttt	lt
 80180e0:	9b07      	ldrlt	r3, [sp, #28]
 80180e2:	9707      	strlt	r7, [sp, #28]
 80180e4:	1afa      	sublt	r2, r7, r3
 80180e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80180e8:	bfbb      	ittet	lt
 80180ea:	189b      	addlt	r3, r3, r2
 80180ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80180ee:	1bdf      	subge	r7, r3, r7
 80180f0:	2700      	movlt	r7, #0
 80180f2:	f1b9 0f00 	cmp.w	r9, #0
 80180f6:	bfb5      	itete	lt
 80180f8:	9b05      	ldrlt	r3, [sp, #20]
 80180fa:	9d05      	ldrge	r5, [sp, #20]
 80180fc:	eba3 0509 	sublt.w	r5, r3, r9
 8018100:	464b      	movge	r3, r9
 8018102:	bfb8      	it	lt
 8018104:	2300      	movlt	r3, #0
 8018106:	e77e      	b.n	8018006 <_dtoa_r+0x6fe>
 8018108:	9f07      	ldr	r7, [sp, #28]
 801810a:	9d05      	ldr	r5, [sp, #20]
 801810c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801810e:	e783      	b.n	8018018 <_dtoa_r+0x710>
 8018110:	9a07      	ldr	r2, [sp, #28]
 8018112:	e7ab      	b.n	801806c <_dtoa_r+0x764>
 8018114:	2300      	movs	r3, #0
 8018116:	e7d4      	b.n	80180c2 <_dtoa_r+0x7ba>
 8018118:	9b00      	ldr	r3, [sp, #0]
 801811a:	e7d2      	b.n	80180c2 <_dtoa_r+0x7ba>
 801811c:	2300      	movs	r3, #0
 801811e:	9307      	str	r3, [sp, #28]
 8018120:	693b      	ldr	r3, [r7, #16]
 8018122:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8018126:	6918      	ldr	r0, [r3, #16]
 8018128:	f000 fdb8 	bl	8018c9c <__hi0bits>
 801812c:	f1c0 0020 	rsb	r0, r0, #32
 8018130:	4440      	add	r0, r8
 8018132:	f010 001f 	ands.w	r0, r0, #31
 8018136:	d047      	beq.n	80181c8 <_dtoa_r+0x8c0>
 8018138:	f1c0 0320 	rsb	r3, r0, #32
 801813c:	2b04      	cmp	r3, #4
 801813e:	dd3b      	ble.n	80181b8 <_dtoa_r+0x8b0>
 8018140:	9b05      	ldr	r3, [sp, #20]
 8018142:	f1c0 001c 	rsb	r0, r0, #28
 8018146:	4403      	add	r3, r0
 8018148:	9305      	str	r3, [sp, #20]
 801814a:	4405      	add	r5, r0
 801814c:	4480      	add	r8, r0
 801814e:	9b05      	ldr	r3, [sp, #20]
 8018150:	2b00      	cmp	r3, #0
 8018152:	dd05      	ble.n	8018160 <_dtoa_r+0x858>
 8018154:	461a      	mov	r2, r3
 8018156:	9904      	ldr	r1, [sp, #16]
 8018158:	4620      	mov	r0, r4
 801815a:	f000 fedb 	bl	8018f14 <__lshift>
 801815e:	9004      	str	r0, [sp, #16]
 8018160:	f1b8 0f00 	cmp.w	r8, #0
 8018164:	dd05      	ble.n	8018172 <_dtoa_r+0x86a>
 8018166:	4639      	mov	r1, r7
 8018168:	4642      	mov	r2, r8
 801816a:	4620      	mov	r0, r4
 801816c:	f000 fed2 	bl	8018f14 <__lshift>
 8018170:	4607      	mov	r7, r0
 8018172:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018174:	b353      	cbz	r3, 80181cc <_dtoa_r+0x8c4>
 8018176:	4639      	mov	r1, r7
 8018178:	9804      	ldr	r0, [sp, #16]
 801817a:	f000 ff1f 	bl	8018fbc <__mcmp>
 801817e:	2800      	cmp	r0, #0
 8018180:	da24      	bge.n	80181cc <_dtoa_r+0x8c4>
 8018182:	2300      	movs	r3, #0
 8018184:	220a      	movs	r2, #10
 8018186:	9904      	ldr	r1, [sp, #16]
 8018188:	4620      	mov	r0, r4
 801818a:	f000 fd0e 	bl	8018baa <__multadd>
 801818e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018190:	9004      	str	r0, [sp, #16]
 8018192:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018196:	2b00      	cmp	r3, #0
 8018198:	f000 814d 	beq.w	8018436 <_dtoa_r+0xb2e>
 801819c:	2300      	movs	r3, #0
 801819e:	4631      	mov	r1, r6
 80181a0:	220a      	movs	r2, #10
 80181a2:	4620      	mov	r0, r4
 80181a4:	f000 fd01 	bl	8018baa <__multadd>
 80181a8:	9b02      	ldr	r3, [sp, #8]
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	4606      	mov	r6, r0
 80181ae:	dc4f      	bgt.n	8018250 <_dtoa_r+0x948>
 80181b0:	9b06      	ldr	r3, [sp, #24]
 80181b2:	2b02      	cmp	r3, #2
 80181b4:	dd4c      	ble.n	8018250 <_dtoa_r+0x948>
 80181b6:	e011      	b.n	80181dc <_dtoa_r+0x8d4>
 80181b8:	d0c9      	beq.n	801814e <_dtoa_r+0x846>
 80181ba:	9a05      	ldr	r2, [sp, #20]
 80181bc:	331c      	adds	r3, #28
 80181be:	441a      	add	r2, r3
 80181c0:	9205      	str	r2, [sp, #20]
 80181c2:	441d      	add	r5, r3
 80181c4:	4498      	add	r8, r3
 80181c6:	e7c2      	b.n	801814e <_dtoa_r+0x846>
 80181c8:	4603      	mov	r3, r0
 80181ca:	e7f6      	b.n	80181ba <_dtoa_r+0x8b2>
 80181cc:	f1b9 0f00 	cmp.w	r9, #0
 80181d0:	dc38      	bgt.n	8018244 <_dtoa_r+0x93c>
 80181d2:	9b06      	ldr	r3, [sp, #24]
 80181d4:	2b02      	cmp	r3, #2
 80181d6:	dd35      	ble.n	8018244 <_dtoa_r+0x93c>
 80181d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80181dc:	9b02      	ldr	r3, [sp, #8]
 80181de:	b963      	cbnz	r3, 80181fa <_dtoa_r+0x8f2>
 80181e0:	4639      	mov	r1, r7
 80181e2:	2205      	movs	r2, #5
 80181e4:	4620      	mov	r0, r4
 80181e6:	f000 fce0 	bl	8018baa <__multadd>
 80181ea:	4601      	mov	r1, r0
 80181ec:	4607      	mov	r7, r0
 80181ee:	9804      	ldr	r0, [sp, #16]
 80181f0:	f000 fee4 	bl	8018fbc <__mcmp>
 80181f4:	2800      	cmp	r0, #0
 80181f6:	f73f adcc 	bgt.w	8017d92 <_dtoa_r+0x48a>
 80181fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80181fc:	465d      	mov	r5, fp
 80181fe:	ea6f 0a03 	mvn.w	sl, r3
 8018202:	f04f 0900 	mov.w	r9, #0
 8018206:	4639      	mov	r1, r7
 8018208:	4620      	mov	r0, r4
 801820a:	f000 fcb7 	bl	8018b7c <_Bfree>
 801820e:	2e00      	cmp	r6, #0
 8018210:	f43f aeb7 	beq.w	8017f82 <_dtoa_r+0x67a>
 8018214:	f1b9 0f00 	cmp.w	r9, #0
 8018218:	d005      	beq.n	8018226 <_dtoa_r+0x91e>
 801821a:	45b1      	cmp	r9, r6
 801821c:	d003      	beq.n	8018226 <_dtoa_r+0x91e>
 801821e:	4649      	mov	r1, r9
 8018220:	4620      	mov	r0, r4
 8018222:	f000 fcab 	bl	8018b7c <_Bfree>
 8018226:	4631      	mov	r1, r6
 8018228:	4620      	mov	r0, r4
 801822a:	f000 fca7 	bl	8018b7c <_Bfree>
 801822e:	e6a8      	b.n	8017f82 <_dtoa_r+0x67a>
 8018230:	2700      	movs	r7, #0
 8018232:	463e      	mov	r6, r7
 8018234:	e7e1      	b.n	80181fa <_dtoa_r+0x8f2>
 8018236:	f8dd a020 	ldr.w	sl, [sp, #32]
 801823a:	463e      	mov	r6, r7
 801823c:	e5a9      	b.n	8017d92 <_dtoa_r+0x48a>
 801823e:	bf00      	nop
 8018240:	40240000 	.word	0x40240000
 8018244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018246:	f8cd 9008 	str.w	r9, [sp, #8]
 801824a:	2b00      	cmp	r3, #0
 801824c:	f000 80fa 	beq.w	8018444 <_dtoa_r+0xb3c>
 8018250:	2d00      	cmp	r5, #0
 8018252:	dd05      	ble.n	8018260 <_dtoa_r+0x958>
 8018254:	4631      	mov	r1, r6
 8018256:	462a      	mov	r2, r5
 8018258:	4620      	mov	r0, r4
 801825a:	f000 fe5b 	bl	8018f14 <__lshift>
 801825e:	4606      	mov	r6, r0
 8018260:	9b07      	ldr	r3, [sp, #28]
 8018262:	2b00      	cmp	r3, #0
 8018264:	d04c      	beq.n	8018300 <_dtoa_r+0x9f8>
 8018266:	6871      	ldr	r1, [r6, #4]
 8018268:	4620      	mov	r0, r4
 801826a:	f000 fc53 	bl	8018b14 <_Balloc>
 801826e:	6932      	ldr	r2, [r6, #16]
 8018270:	3202      	adds	r2, #2
 8018272:	4605      	mov	r5, r0
 8018274:	0092      	lsls	r2, r2, #2
 8018276:	f106 010c 	add.w	r1, r6, #12
 801827a:	300c      	adds	r0, #12
 801827c:	f7fd fc7e 	bl	8015b7c <memcpy>
 8018280:	2201      	movs	r2, #1
 8018282:	4629      	mov	r1, r5
 8018284:	4620      	mov	r0, r4
 8018286:	f000 fe45 	bl	8018f14 <__lshift>
 801828a:	9b00      	ldr	r3, [sp, #0]
 801828c:	f8cd b014 	str.w	fp, [sp, #20]
 8018290:	f003 0301 	and.w	r3, r3, #1
 8018294:	46b1      	mov	r9, r6
 8018296:	9307      	str	r3, [sp, #28]
 8018298:	4606      	mov	r6, r0
 801829a:	4639      	mov	r1, r7
 801829c:	9804      	ldr	r0, [sp, #16]
 801829e:	f7ff faa5 	bl	80177ec <quorem>
 80182a2:	4649      	mov	r1, r9
 80182a4:	4605      	mov	r5, r0
 80182a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80182aa:	9804      	ldr	r0, [sp, #16]
 80182ac:	f000 fe86 	bl	8018fbc <__mcmp>
 80182b0:	4632      	mov	r2, r6
 80182b2:	9000      	str	r0, [sp, #0]
 80182b4:	4639      	mov	r1, r7
 80182b6:	4620      	mov	r0, r4
 80182b8:	f000 fe9a 	bl	8018ff0 <__mdiff>
 80182bc:	68c3      	ldr	r3, [r0, #12]
 80182be:	4602      	mov	r2, r0
 80182c0:	bb03      	cbnz	r3, 8018304 <_dtoa_r+0x9fc>
 80182c2:	4601      	mov	r1, r0
 80182c4:	9008      	str	r0, [sp, #32]
 80182c6:	9804      	ldr	r0, [sp, #16]
 80182c8:	f000 fe78 	bl	8018fbc <__mcmp>
 80182cc:	9a08      	ldr	r2, [sp, #32]
 80182ce:	4603      	mov	r3, r0
 80182d0:	4611      	mov	r1, r2
 80182d2:	4620      	mov	r0, r4
 80182d4:	9308      	str	r3, [sp, #32]
 80182d6:	f000 fc51 	bl	8018b7c <_Bfree>
 80182da:	9b08      	ldr	r3, [sp, #32]
 80182dc:	b9a3      	cbnz	r3, 8018308 <_dtoa_r+0xa00>
 80182de:	9a06      	ldr	r2, [sp, #24]
 80182e0:	b992      	cbnz	r2, 8018308 <_dtoa_r+0xa00>
 80182e2:	9a07      	ldr	r2, [sp, #28]
 80182e4:	b982      	cbnz	r2, 8018308 <_dtoa_r+0xa00>
 80182e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80182ea:	d029      	beq.n	8018340 <_dtoa_r+0xa38>
 80182ec:	9b00      	ldr	r3, [sp, #0]
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	dd01      	ble.n	80182f6 <_dtoa_r+0x9ee>
 80182f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80182f6:	9b05      	ldr	r3, [sp, #20]
 80182f8:	1c5d      	adds	r5, r3, #1
 80182fa:	f883 8000 	strb.w	r8, [r3]
 80182fe:	e782      	b.n	8018206 <_dtoa_r+0x8fe>
 8018300:	4630      	mov	r0, r6
 8018302:	e7c2      	b.n	801828a <_dtoa_r+0x982>
 8018304:	2301      	movs	r3, #1
 8018306:	e7e3      	b.n	80182d0 <_dtoa_r+0x9c8>
 8018308:	9a00      	ldr	r2, [sp, #0]
 801830a:	2a00      	cmp	r2, #0
 801830c:	db04      	blt.n	8018318 <_dtoa_r+0xa10>
 801830e:	d125      	bne.n	801835c <_dtoa_r+0xa54>
 8018310:	9a06      	ldr	r2, [sp, #24]
 8018312:	bb1a      	cbnz	r2, 801835c <_dtoa_r+0xa54>
 8018314:	9a07      	ldr	r2, [sp, #28]
 8018316:	bb0a      	cbnz	r2, 801835c <_dtoa_r+0xa54>
 8018318:	2b00      	cmp	r3, #0
 801831a:	ddec      	ble.n	80182f6 <_dtoa_r+0x9ee>
 801831c:	2201      	movs	r2, #1
 801831e:	9904      	ldr	r1, [sp, #16]
 8018320:	4620      	mov	r0, r4
 8018322:	f000 fdf7 	bl	8018f14 <__lshift>
 8018326:	4639      	mov	r1, r7
 8018328:	9004      	str	r0, [sp, #16]
 801832a:	f000 fe47 	bl	8018fbc <__mcmp>
 801832e:	2800      	cmp	r0, #0
 8018330:	dc03      	bgt.n	801833a <_dtoa_r+0xa32>
 8018332:	d1e0      	bne.n	80182f6 <_dtoa_r+0x9ee>
 8018334:	f018 0f01 	tst.w	r8, #1
 8018338:	d0dd      	beq.n	80182f6 <_dtoa_r+0x9ee>
 801833a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801833e:	d1d8      	bne.n	80182f2 <_dtoa_r+0x9ea>
 8018340:	9b05      	ldr	r3, [sp, #20]
 8018342:	9a05      	ldr	r2, [sp, #20]
 8018344:	1c5d      	adds	r5, r3, #1
 8018346:	2339      	movs	r3, #57	; 0x39
 8018348:	7013      	strb	r3, [r2, #0]
 801834a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801834e:	2b39      	cmp	r3, #57	; 0x39
 8018350:	f105 32ff 	add.w	r2, r5, #4294967295
 8018354:	d04f      	beq.n	80183f6 <_dtoa_r+0xaee>
 8018356:	3301      	adds	r3, #1
 8018358:	7013      	strb	r3, [r2, #0]
 801835a:	e754      	b.n	8018206 <_dtoa_r+0x8fe>
 801835c:	9a05      	ldr	r2, [sp, #20]
 801835e:	2b00      	cmp	r3, #0
 8018360:	f102 0501 	add.w	r5, r2, #1
 8018364:	dd06      	ble.n	8018374 <_dtoa_r+0xa6c>
 8018366:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801836a:	d0e9      	beq.n	8018340 <_dtoa_r+0xa38>
 801836c:	f108 0801 	add.w	r8, r8, #1
 8018370:	9b05      	ldr	r3, [sp, #20]
 8018372:	e7c2      	b.n	80182fa <_dtoa_r+0x9f2>
 8018374:	9a02      	ldr	r2, [sp, #8]
 8018376:	f805 8c01 	strb.w	r8, [r5, #-1]
 801837a:	eba5 030b 	sub.w	r3, r5, fp
 801837e:	4293      	cmp	r3, r2
 8018380:	d021      	beq.n	80183c6 <_dtoa_r+0xabe>
 8018382:	2300      	movs	r3, #0
 8018384:	220a      	movs	r2, #10
 8018386:	9904      	ldr	r1, [sp, #16]
 8018388:	4620      	mov	r0, r4
 801838a:	f000 fc0e 	bl	8018baa <__multadd>
 801838e:	45b1      	cmp	r9, r6
 8018390:	9004      	str	r0, [sp, #16]
 8018392:	f04f 0300 	mov.w	r3, #0
 8018396:	f04f 020a 	mov.w	r2, #10
 801839a:	4649      	mov	r1, r9
 801839c:	4620      	mov	r0, r4
 801839e:	d105      	bne.n	80183ac <_dtoa_r+0xaa4>
 80183a0:	f000 fc03 	bl	8018baa <__multadd>
 80183a4:	4681      	mov	r9, r0
 80183a6:	4606      	mov	r6, r0
 80183a8:	9505      	str	r5, [sp, #20]
 80183aa:	e776      	b.n	801829a <_dtoa_r+0x992>
 80183ac:	f000 fbfd 	bl	8018baa <__multadd>
 80183b0:	4631      	mov	r1, r6
 80183b2:	4681      	mov	r9, r0
 80183b4:	2300      	movs	r3, #0
 80183b6:	220a      	movs	r2, #10
 80183b8:	4620      	mov	r0, r4
 80183ba:	f000 fbf6 	bl	8018baa <__multadd>
 80183be:	4606      	mov	r6, r0
 80183c0:	e7f2      	b.n	80183a8 <_dtoa_r+0xaa0>
 80183c2:	f04f 0900 	mov.w	r9, #0
 80183c6:	2201      	movs	r2, #1
 80183c8:	9904      	ldr	r1, [sp, #16]
 80183ca:	4620      	mov	r0, r4
 80183cc:	f000 fda2 	bl	8018f14 <__lshift>
 80183d0:	4639      	mov	r1, r7
 80183d2:	9004      	str	r0, [sp, #16]
 80183d4:	f000 fdf2 	bl	8018fbc <__mcmp>
 80183d8:	2800      	cmp	r0, #0
 80183da:	dcb6      	bgt.n	801834a <_dtoa_r+0xa42>
 80183dc:	d102      	bne.n	80183e4 <_dtoa_r+0xadc>
 80183de:	f018 0f01 	tst.w	r8, #1
 80183e2:	d1b2      	bne.n	801834a <_dtoa_r+0xa42>
 80183e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80183e8:	2b30      	cmp	r3, #48	; 0x30
 80183ea:	f105 32ff 	add.w	r2, r5, #4294967295
 80183ee:	f47f af0a 	bne.w	8018206 <_dtoa_r+0x8fe>
 80183f2:	4615      	mov	r5, r2
 80183f4:	e7f6      	b.n	80183e4 <_dtoa_r+0xadc>
 80183f6:	4593      	cmp	fp, r2
 80183f8:	d105      	bne.n	8018406 <_dtoa_r+0xafe>
 80183fa:	2331      	movs	r3, #49	; 0x31
 80183fc:	f10a 0a01 	add.w	sl, sl, #1
 8018400:	f88b 3000 	strb.w	r3, [fp]
 8018404:	e6ff      	b.n	8018206 <_dtoa_r+0x8fe>
 8018406:	4615      	mov	r5, r2
 8018408:	e79f      	b.n	801834a <_dtoa_r+0xa42>
 801840a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8018470 <_dtoa_r+0xb68>
 801840e:	e007      	b.n	8018420 <_dtoa_r+0xb18>
 8018410:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018412:	f8df b060 	ldr.w	fp, [pc, #96]	; 8018474 <_dtoa_r+0xb6c>
 8018416:	b11b      	cbz	r3, 8018420 <_dtoa_r+0xb18>
 8018418:	f10b 0308 	add.w	r3, fp, #8
 801841c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801841e:	6013      	str	r3, [r2, #0]
 8018420:	4658      	mov	r0, fp
 8018422:	b017      	add	sp, #92	; 0x5c
 8018424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018428:	9b06      	ldr	r3, [sp, #24]
 801842a:	2b01      	cmp	r3, #1
 801842c:	f77f ae35 	ble.w	801809a <_dtoa_r+0x792>
 8018430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018432:	9307      	str	r3, [sp, #28]
 8018434:	e649      	b.n	80180ca <_dtoa_r+0x7c2>
 8018436:	9b02      	ldr	r3, [sp, #8]
 8018438:	2b00      	cmp	r3, #0
 801843a:	dc03      	bgt.n	8018444 <_dtoa_r+0xb3c>
 801843c:	9b06      	ldr	r3, [sp, #24]
 801843e:	2b02      	cmp	r3, #2
 8018440:	f73f aecc 	bgt.w	80181dc <_dtoa_r+0x8d4>
 8018444:	465d      	mov	r5, fp
 8018446:	4639      	mov	r1, r7
 8018448:	9804      	ldr	r0, [sp, #16]
 801844a:	f7ff f9cf 	bl	80177ec <quorem>
 801844e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8018452:	f805 8b01 	strb.w	r8, [r5], #1
 8018456:	9a02      	ldr	r2, [sp, #8]
 8018458:	eba5 030b 	sub.w	r3, r5, fp
 801845c:	429a      	cmp	r2, r3
 801845e:	ddb0      	ble.n	80183c2 <_dtoa_r+0xaba>
 8018460:	2300      	movs	r3, #0
 8018462:	220a      	movs	r2, #10
 8018464:	9904      	ldr	r1, [sp, #16]
 8018466:	4620      	mov	r0, r4
 8018468:	f000 fb9f 	bl	8018baa <__multadd>
 801846c:	9004      	str	r0, [sp, #16]
 801846e:	e7ea      	b.n	8018446 <_dtoa_r+0xb3e>
 8018470:	0801b2b8 	.word	0x0801b2b8
 8018474:	0801b338 	.word	0x0801b338

08018478 <rshift>:
 8018478:	b5f0      	push	{r4, r5, r6, r7, lr}
 801847a:	6906      	ldr	r6, [r0, #16]
 801847c:	114b      	asrs	r3, r1, #5
 801847e:	429e      	cmp	r6, r3
 8018480:	f100 0414 	add.w	r4, r0, #20
 8018484:	dd30      	ble.n	80184e8 <rshift+0x70>
 8018486:	f011 011f 	ands.w	r1, r1, #31
 801848a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801848e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8018492:	d108      	bne.n	80184a6 <rshift+0x2e>
 8018494:	4621      	mov	r1, r4
 8018496:	42b2      	cmp	r2, r6
 8018498:	460b      	mov	r3, r1
 801849a:	d211      	bcs.n	80184c0 <rshift+0x48>
 801849c:	f852 3b04 	ldr.w	r3, [r2], #4
 80184a0:	f841 3b04 	str.w	r3, [r1], #4
 80184a4:	e7f7      	b.n	8018496 <rshift+0x1e>
 80184a6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80184aa:	f1c1 0c20 	rsb	ip, r1, #32
 80184ae:	40cd      	lsrs	r5, r1
 80184b0:	3204      	adds	r2, #4
 80184b2:	4623      	mov	r3, r4
 80184b4:	42b2      	cmp	r2, r6
 80184b6:	4617      	mov	r7, r2
 80184b8:	d30c      	bcc.n	80184d4 <rshift+0x5c>
 80184ba:	601d      	str	r5, [r3, #0]
 80184bc:	b105      	cbz	r5, 80184c0 <rshift+0x48>
 80184be:	3304      	adds	r3, #4
 80184c0:	1b1a      	subs	r2, r3, r4
 80184c2:	42a3      	cmp	r3, r4
 80184c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80184c8:	bf08      	it	eq
 80184ca:	2300      	moveq	r3, #0
 80184cc:	6102      	str	r2, [r0, #16]
 80184ce:	bf08      	it	eq
 80184d0:	6143      	streq	r3, [r0, #20]
 80184d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80184d4:	683f      	ldr	r7, [r7, #0]
 80184d6:	fa07 f70c 	lsl.w	r7, r7, ip
 80184da:	433d      	orrs	r5, r7
 80184dc:	f843 5b04 	str.w	r5, [r3], #4
 80184e0:	f852 5b04 	ldr.w	r5, [r2], #4
 80184e4:	40cd      	lsrs	r5, r1
 80184e6:	e7e5      	b.n	80184b4 <rshift+0x3c>
 80184e8:	4623      	mov	r3, r4
 80184ea:	e7e9      	b.n	80184c0 <rshift+0x48>

080184ec <__hexdig_fun>:
 80184ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80184f0:	2b09      	cmp	r3, #9
 80184f2:	d802      	bhi.n	80184fa <__hexdig_fun+0xe>
 80184f4:	3820      	subs	r0, #32
 80184f6:	b2c0      	uxtb	r0, r0
 80184f8:	4770      	bx	lr
 80184fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80184fe:	2b05      	cmp	r3, #5
 8018500:	d801      	bhi.n	8018506 <__hexdig_fun+0x1a>
 8018502:	3847      	subs	r0, #71	; 0x47
 8018504:	e7f7      	b.n	80184f6 <__hexdig_fun+0xa>
 8018506:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801850a:	2b05      	cmp	r3, #5
 801850c:	d801      	bhi.n	8018512 <__hexdig_fun+0x26>
 801850e:	3827      	subs	r0, #39	; 0x27
 8018510:	e7f1      	b.n	80184f6 <__hexdig_fun+0xa>
 8018512:	2000      	movs	r0, #0
 8018514:	4770      	bx	lr

08018516 <__gethex>:
 8018516:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801851a:	b08b      	sub	sp, #44	; 0x2c
 801851c:	468a      	mov	sl, r1
 801851e:	9002      	str	r0, [sp, #8]
 8018520:	9816      	ldr	r0, [sp, #88]	; 0x58
 8018522:	9306      	str	r3, [sp, #24]
 8018524:	4690      	mov	r8, r2
 8018526:	f000 fad0 	bl	8018aca <__localeconv_l>
 801852a:	6803      	ldr	r3, [r0, #0]
 801852c:	9303      	str	r3, [sp, #12]
 801852e:	4618      	mov	r0, r3
 8018530:	f7e7 fe4e 	bl	80001d0 <strlen>
 8018534:	9b03      	ldr	r3, [sp, #12]
 8018536:	9001      	str	r0, [sp, #4]
 8018538:	4403      	add	r3, r0
 801853a:	f04f 0b00 	mov.w	fp, #0
 801853e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018542:	9307      	str	r3, [sp, #28]
 8018544:	f8da 3000 	ldr.w	r3, [sl]
 8018548:	3302      	adds	r3, #2
 801854a:	461f      	mov	r7, r3
 801854c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018550:	2830      	cmp	r0, #48	; 0x30
 8018552:	d06c      	beq.n	801862e <__gethex+0x118>
 8018554:	f7ff ffca 	bl	80184ec <__hexdig_fun>
 8018558:	4604      	mov	r4, r0
 801855a:	2800      	cmp	r0, #0
 801855c:	d16a      	bne.n	8018634 <__gethex+0x11e>
 801855e:	9a01      	ldr	r2, [sp, #4]
 8018560:	9903      	ldr	r1, [sp, #12]
 8018562:	4638      	mov	r0, r7
 8018564:	f001 f828 	bl	80195b8 <strncmp>
 8018568:	2800      	cmp	r0, #0
 801856a:	d166      	bne.n	801863a <__gethex+0x124>
 801856c:	9b01      	ldr	r3, [sp, #4]
 801856e:	5cf8      	ldrb	r0, [r7, r3]
 8018570:	18fe      	adds	r6, r7, r3
 8018572:	f7ff ffbb 	bl	80184ec <__hexdig_fun>
 8018576:	2800      	cmp	r0, #0
 8018578:	d062      	beq.n	8018640 <__gethex+0x12a>
 801857a:	4633      	mov	r3, r6
 801857c:	7818      	ldrb	r0, [r3, #0]
 801857e:	2830      	cmp	r0, #48	; 0x30
 8018580:	461f      	mov	r7, r3
 8018582:	f103 0301 	add.w	r3, r3, #1
 8018586:	d0f9      	beq.n	801857c <__gethex+0x66>
 8018588:	f7ff ffb0 	bl	80184ec <__hexdig_fun>
 801858c:	fab0 f580 	clz	r5, r0
 8018590:	096d      	lsrs	r5, r5, #5
 8018592:	4634      	mov	r4, r6
 8018594:	f04f 0b01 	mov.w	fp, #1
 8018598:	463a      	mov	r2, r7
 801859a:	4616      	mov	r6, r2
 801859c:	3201      	adds	r2, #1
 801859e:	7830      	ldrb	r0, [r6, #0]
 80185a0:	f7ff ffa4 	bl	80184ec <__hexdig_fun>
 80185a4:	2800      	cmp	r0, #0
 80185a6:	d1f8      	bne.n	801859a <__gethex+0x84>
 80185a8:	9a01      	ldr	r2, [sp, #4]
 80185aa:	9903      	ldr	r1, [sp, #12]
 80185ac:	4630      	mov	r0, r6
 80185ae:	f001 f803 	bl	80195b8 <strncmp>
 80185b2:	b950      	cbnz	r0, 80185ca <__gethex+0xb4>
 80185b4:	b954      	cbnz	r4, 80185cc <__gethex+0xb6>
 80185b6:	9b01      	ldr	r3, [sp, #4]
 80185b8:	18f4      	adds	r4, r6, r3
 80185ba:	4622      	mov	r2, r4
 80185bc:	4616      	mov	r6, r2
 80185be:	3201      	adds	r2, #1
 80185c0:	7830      	ldrb	r0, [r6, #0]
 80185c2:	f7ff ff93 	bl	80184ec <__hexdig_fun>
 80185c6:	2800      	cmp	r0, #0
 80185c8:	d1f8      	bne.n	80185bc <__gethex+0xa6>
 80185ca:	b10c      	cbz	r4, 80185d0 <__gethex+0xba>
 80185cc:	1ba4      	subs	r4, r4, r6
 80185ce:	00a4      	lsls	r4, r4, #2
 80185d0:	7833      	ldrb	r3, [r6, #0]
 80185d2:	2b50      	cmp	r3, #80	; 0x50
 80185d4:	d001      	beq.n	80185da <__gethex+0xc4>
 80185d6:	2b70      	cmp	r3, #112	; 0x70
 80185d8:	d140      	bne.n	801865c <__gethex+0x146>
 80185da:	7873      	ldrb	r3, [r6, #1]
 80185dc:	2b2b      	cmp	r3, #43	; 0x2b
 80185de:	d031      	beq.n	8018644 <__gethex+0x12e>
 80185e0:	2b2d      	cmp	r3, #45	; 0x2d
 80185e2:	d033      	beq.n	801864c <__gethex+0x136>
 80185e4:	1c71      	adds	r1, r6, #1
 80185e6:	f04f 0900 	mov.w	r9, #0
 80185ea:	7808      	ldrb	r0, [r1, #0]
 80185ec:	f7ff ff7e 	bl	80184ec <__hexdig_fun>
 80185f0:	1e43      	subs	r3, r0, #1
 80185f2:	b2db      	uxtb	r3, r3
 80185f4:	2b18      	cmp	r3, #24
 80185f6:	d831      	bhi.n	801865c <__gethex+0x146>
 80185f8:	f1a0 0210 	sub.w	r2, r0, #16
 80185fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018600:	f7ff ff74 	bl	80184ec <__hexdig_fun>
 8018604:	1e43      	subs	r3, r0, #1
 8018606:	b2db      	uxtb	r3, r3
 8018608:	2b18      	cmp	r3, #24
 801860a:	d922      	bls.n	8018652 <__gethex+0x13c>
 801860c:	f1b9 0f00 	cmp.w	r9, #0
 8018610:	d000      	beq.n	8018614 <__gethex+0xfe>
 8018612:	4252      	negs	r2, r2
 8018614:	4414      	add	r4, r2
 8018616:	f8ca 1000 	str.w	r1, [sl]
 801861a:	b30d      	cbz	r5, 8018660 <__gethex+0x14a>
 801861c:	f1bb 0f00 	cmp.w	fp, #0
 8018620:	bf0c      	ite	eq
 8018622:	2706      	moveq	r7, #6
 8018624:	2700      	movne	r7, #0
 8018626:	4638      	mov	r0, r7
 8018628:	b00b      	add	sp, #44	; 0x2c
 801862a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801862e:	f10b 0b01 	add.w	fp, fp, #1
 8018632:	e78a      	b.n	801854a <__gethex+0x34>
 8018634:	2500      	movs	r5, #0
 8018636:	462c      	mov	r4, r5
 8018638:	e7ae      	b.n	8018598 <__gethex+0x82>
 801863a:	463e      	mov	r6, r7
 801863c:	2501      	movs	r5, #1
 801863e:	e7c7      	b.n	80185d0 <__gethex+0xba>
 8018640:	4604      	mov	r4, r0
 8018642:	e7fb      	b.n	801863c <__gethex+0x126>
 8018644:	f04f 0900 	mov.w	r9, #0
 8018648:	1cb1      	adds	r1, r6, #2
 801864a:	e7ce      	b.n	80185ea <__gethex+0xd4>
 801864c:	f04f 0901 	mov.w	r9, #1
 8018650:	e7fa      	b.n	8018648 <__gethex+0x132>
 8018652:	230a      	movs	r3, #10
 8018654:	fb03 0202 	mla	r2, r3, r2, r0
 8018658:	3a10      	subs	r2, #16
 801865a:	e7cf      	b.n	80185fc <__gethex+0xe6>
 801865c:	4631      	mov	r1, r6
 801865e:	e7da      	b.n	8018616 <__gethex+0x100>
 8018660:	1bf3      	subs	r3, r6, r7
 8018662:	3b01      	subs	r3, #1
 8018664:	4629      	mov	r1, r5
 8018666:	2b07      	cmp	r3, #7
 8018668:	dc49      	bgt.n	80186fe <__gethex+0x1e8>
 801866a:	9802      	ldr	r0, [sp, #8]
 801866c:	f000 fa52 	bl	8018b14 <_Balloc>
 8018670:	9b01      	ldr	r3, [sp, #4]
 8018672:	f100 0914 	add.w	r9, r0, #20
 8018676:	f04f 0b00 	mov.w	fp, #0
 801867a:	f1c3 0301 	rsb	r3, r3, #1
 801867e:	4605      	mov	r5, r0
 8018680:	f8cd 9010 	str.w	r9, [sp, #16]
 8018684:	46da      	mov	sl, fp
 8018686:	9308      	str	r3, [sp, #32]
 8018688:	42b7      	cmp	r7, r6
 801868a:	d33b      	bcc.n	8018704 <__gethex+0x1ee>
 801868c:	9804      	ldr	r0, [sp, #16]
 801868e:	f840 ab04 	str.w	sl, [r0], #4
 8018692:	eba0 0009 	sub.w	r0, r0, r9
 8018696:	1080      	asrs	r0, r0, #2
 8018698:	6128      	str	r0, [r5, #16]
 801869a:	0147      	lsls	r7, r0, #5
 801869c:	4650      	mov	r0, sl
 801869e:	f000 fafd 	bl	8018c9c <__hi0bits>
 80186a2:	f8d8 6000 	ldr.w	r6, [r8]
 80186a6:	1a3f      	subs	r7, r7, r0
 80186a8:	42b7      	cmp	r7, r6
 80186aa:	dd64      	ble.n	8018776 <__gethex+0x260>
 80186ac:	1bbf      	subs	r7, r7, r6
 80186ae:	4639      	mov	r1, r7
 80186b0:	4628      	mov	r0, r5
 80186b2:	f000 fe0d 	bl	80192d0 <__any_on>
 80186b6:	4682      	mov	sl, r0
 80186b8:	b178      	cbz	r0, 80186da <__gethex+0x1c4>
 80186ba:	1e7b      	subs	r3, r7, #1
 80186bc:	1159      	asrs	r1, r3, #5
 80186be:	f003 021f 	and.w	r2, r3, #31
 80186c2:	f04f 0a01 	mov.w	sl, #1
 80186c6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80186ca:	fa0a f202 	lsl.w	r2, sl, r2
 80186ce:	420a      	tst	r2, r1
 80186d0:	d003      	beq.n	80186da <__gethex+0x1c4>
 80186d2:	4553      	cmp	r3, sl
 80186d4:	dc46      	bgt.n	8018764 <__gethex+0x24e>
 80186d6:	f04f 0a02 	mov.w	sl, #2
 80186da:	4639      	mov	r1, r7
 80186dc:	4628      	mov	r0, r5
 80186de:	f7ff fecb 	bl	8018478 <rshift>
 80186e2:	443c      	add	r4, r7
 80186e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80186e8:	42a3      	cmp	r3, r4
 80186ea:	da52      	bge.n	8018792 <__gethex+0x27c>
 80186ec:	4629      	mov	r1, r5
 80186ee:	9802      	ldr	r0, [sp, #8]
 80186f0:	f000 fa44 	bl	8018b7c <_Bfree>
 80186f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80186f6:	2300      	movs	r3, #0
 80186f8:	6013      	str	r3, [r2, #0]
 80186fa:	27a3      	movs	r7, #163	; 0xa3
 80186fc:	e793      	b.n	8018626 <__gethex+0x110>
 80186fe:	3101      	adds	r1, #1
 8018700:	105b      	asrs	r3, r3, #1
 8018702:	e7b0      	b.n	8018666 <__gethex+0x150>
 8018704:	1e73      	subs	r3, r6, #1
 8018706:	9305      	str	r3, [sp, #20]
 8018708:	9a07      	ldr	r2, [sp, #28]
 801870a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801870e:	4293      	cmp	r3, r2
 8018710:	d018      	beq.n	8018744 <__gethex+0x22e>
 8018712:	f1bb 0f20 	cmp.w	fp, #32
 8018716:	d107      	bne.n	8018728 <__gethex+0x212>
 8018718:	9b04      	ldr	r3, [sp, #16]
 801871a:	f8c3 a000 	str.w	sl, [r3]
 801871e:	3304      	adds	r3, #4
 8018720:	f04f 0a00 	mov.w	sl, #0
 8018724:	9304      	str	r3, [sp, #16]
 8018726:	46d3      	mov	fp, sl
 8018728:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801872c:	f7ff fede 	bl	80184ec <__hexdig_fun>
 8018730:	f000 000f 	and.w	r0, r0, #15
 8018734:	fa00 f00b 	lsl.w	r0, r0, fp
 8018738:	ea4a 0a00 	orr.w	sl, sl, r0
 801873c:	f10b 0b04 	add.w	fp, fp, #4
 8018740:	9b05      	ldr	r3, [sp, #20]
 8018742:	e00d      	b.n	8018760 <__gethex+0x24a>
 8018744:	9b05      	ldr	r3, [sp, #20]
 8018746:	9a08      	ldr	r2, [sp, #32]
 8018748:	4413      	add	r3, r2
 801874a:	42bb      	cmp	r3, r7
 801874c:	d3e1      	bcc.n	8018712 <__gethex+0x1fc>
 801874e:	4618      	mov	r0, r3
 8018750:	9a01      	ldr	r2, [sp, #4]
 8018752:	9903      	ldr	r1, [sp, #12]
 8018754:	9309      	str	r3, [sp, #36]	; 0x24
 8018756:	f000 ff2f 	bl	80195b8 <strncmp>
 801875a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801875c:	2800      	cmp	r0, #0
 801875e:	d1d8      	bne.n	8018712 <__gethex+0x1fc>
 8018760:	461e      	mov	r6, r3
 8018762:	e791      	b.n	8018688 <__gethex+0x172>
 8018764:	1eb9      	subs	r1, r7, #2
 8018766:	4628      	mov	r0, r5
 8018768:	f000 fdb2 	bl	80192d0 <__any_on>
 801876c:	2800      	cmp	r0, #0
 801876e:	d0b2      	beq.n	80186d6 <__gethex+0x1c0>
 8018770:	f04f 0a03 	mov.w	sl, #3
 8018774:	e7b1      	b.n	80186da <__gethex+0x1c4>
 8018776:	da09      	bge.n	801878c <__gethex+0x276>
 8018778:	1bf7      	subs	r7, r6, r7
 801877a:	4629      	mov	r1, r5
 801877c:	463a      	mov	r2, r7
 801877e:	9802      	ldr	r0, [sp, #8]
 8018780:	f000 fbc8 	bl	8018f14 <__lshift>
 8018784:	1be4      	subs	r4, r4, r7
 8018786:	4605      	mov	r5, r0
 8018788:	f100 0914 	add.w	r9, r0, #20
 801878c:	f04f 0a00 	mov.w	sl, #0
 8018790:	e7a8      	b.n	80186e4 <__gethex+0x1ce>
 8018792:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018796:	42a0      	cmp	r0, r4
 8018798:	dd6a      	ble.n	8018870 <__gethex+0x35a>
 801879a:	1b04      	subs	r4, r0, r4
 801879c:	42a6      	cmp	r6, r4
 801879e:	dc2e      	bgt.n	80187fe <__gethex+0x2e8>
 80187a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80187a4:	2b02      	cmp	r3, #2
 80187a6:	d022      	beq.n	80187ee <__gethex+0x2d8>
 80187a8:	2b03      	cmp	r3, #3
 80187aa:	d024      	beq.n	80187f6 <__gethex+0x2e0>
 80187ac:	2b01      	cmp	r3, #1
 80187ae:	d115      	bne.n	80187dc <__gethex+0x2c6>
 80187b0:	42a6      	cmp	r6, r4
 80187b2:	d113      	bne.n	80187dc <__gethex+0x2c6>
 80187b4:	2e01      	cmp	r6, #1
 80187b6:	dc0b      	bgt.n	80187d0 <__gethex+0x2ba>
 80187b8:	9a06      	ldr	r2, [sp, #24]
 80187ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80187be:	6013      	str	r3, [r2, #0]
 80187c0:	2301      	movs	r3, #1
 80187c2:	612b      	str	r3, [r5, #16]
 80187c4:	f8c9 3000 	str.w	r3, [r9]
 80187c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80187ca:	2762      	movs	r7, #98	; 0x62
 80187cc:	601d      	str	r5, [r3, #0]
 80187ce:	e72a      	b.n	8018626 <__gethex+0x110>
 80187d0:	1e71      	subs	r1, r6, #1
 80187d2:	4628      	mov	r0, r5
 80187d4:	f000 fd7c 	bl	80192d0 <__any_on>
 80187d8:	2800      	cmp	r0, #0
 80187da:	d1ed      	bne.n	80187b8 <__gethex+0x2a2>
 80187dc:	4629      	mov	r1, r5
 80187de:	9802      	ldr	r0, [sp, #8]
 80187e0:	f000 f9cc 	bl	8018b7c <_Bfree>
 80187e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80187e6:	2300      	movs	r3, #0
 80187e8:	6013      	str	r3, [r2, #0]
 80187ea:	2750      	movs	r7, #80	; 0x50
 80187ec:	e71b      	b.n	8018626 <__gethex+0x110>
 80187ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d0e1      	beq.n	80187b8 <__gethex+0x2a2>
 80187f4:	e7f2      	b.n	80187dc <__gethex+0x2c6>
 80187f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d1dd      	bne.n	80187b8 <__gethex+0x2a2>
 80187fc:	e7ee      	b.n	80187dc <__gethex+0x2c6>
 80187fe:	1e67      	subs	r7, r4, #1
 8018800:	f1ba 0f00 	cmp.w	sl, #0
 8018804:	d131      	bne.n	801886a <__gethex+0x354>
 8018806:	b127      	cbz	r7, 8018812 <__gethex+0x2fc>
 8018808:	4639      	mov	r1, r7
 801880a:	4628      	mov	r0, r5
 801880c:	f000 fd60 	bl	80192d0 <__any_on>
 8018810:	4682      	mov	sl, r0
 8018812:	117a      	asrs	r2, r7, #5
 8018814:	2301      	movs	r3, #1
 8018816:	f007 071f 	and.w	r7, r7, #31
 801881a:	fa03 f707 	lsl.w	r7, r3, r7
 801881e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8018822:	4621      	mov	r1, r4
 8018824:	421f      	tst	r7, r3
 8018826:	4628      	mov	r0, r5
 8018828:	bf18      	it	ne
 801882a:	f04a 0a02 	orrne.w	sl, sl, #2
 801882e:	1b36      	subs	r6, r6, r4
 8018830:	f7ff fe22 	bl	8018478 <rshift>
 8018834:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018838:	2702      	movs	r7, #2
 801883a:	f1ba 0f00 	cmp.w	sl, #0
 801883e:	d048      	beq.n	80188d2 <__gethex+0x3bc>
 8018840:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018844:	2b02      	cmp	r3, #2
 8018846:	d015      	beq.n	8018874 <__gethex+0x35e>
 8018848:	2b03      	cmp	r3, #3
 801884a:	d017      	beq.n	801887c <__gethex+0x366>
 801884c:	2b01      	cmp	r3, #1
 801884e:	d109      	bne.n	8018864 <__gethex+0x34e>
 8018850:	f01a 0f02 	tst.w	sl, #2
 8018854:	d006      	beq.n	8018864 <__gethex+0x34e>
 8018856:	f8d9 3000 	ldr.w	r3, [r9]
 801885a:	ea4a 0a03 	orr.w	sl, sl, r3
 801885e:	f01a 0f01 	tst.w	sl, #1
 8018862:	d10e      	bne.n	8018882 <__gethex+0x36c>
 8018864:	f047 0710 	orr.w	r7, r7, #16
 8018868:	e033      	b.n	80188d2 <__gethex+0x3bc>
 801886a:	f04f 0a01 	mov.w	sl, #1
 801886e:	e7d0      	b.n	8018812 <__gethex+0x2fc>
 8018870:	2701      	movs	r7, #1
 8018872:	e7e2      	b.n	801883a <__gethex+0x324>
 8018874:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018876:	f1c3 0301 	rsb	r3, r3, #1
 801887a:	9315      	str	r3, [sp, #84]	; 0x54
 801887c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801887e:	2b00      	cmp	r3, #0
 8018880:	d0f0      	beq.n	8018864 <__gethex+0x34e>
 8018882:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8018886:	f105 0314 	add.w	r3, r5, #20
 801888a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801888e:	eb03 010a 	add.w	r1, r3, sl
 8018892:	f04f 0c00 	mov.w	ip, #0
 8018896:	4618      	mov	r0, r3
 8018898:	f853 2b04 	ldr.w	r2, [r3], #4
 801889c:	f1b2 3fff 	cmp.w	r2, #4294967295
 80188a0:	d01c      	beq.n	80188dc <__gethex+0x3c6>
 80188a2:	3201      	adds	r2, #1
 80188a4:	6002      	str	r2, [r0, #0]
 80188a6:	2f02      	cmp	r7, #2
 80188a8:	f105 0314 	add.w	r3, r5, #20
 80188ac:	d138      	bne.n	8018920 <__gethex+0x40a>
 80188ae:	f8d8 2000 	ldr.w	r2, [r8]
 80188b2:	3a01      	subs	r2, #1
 80188b4:	42b2      	cmp	r2, r6
 80188b6:	d10a      	bne.n	80188ce <__gethex+0x3b8>
 80188b8:	1171      	asrs	r1, r6, #5
 80188ba:	2201      	movs	r2, #1
 80188bc:	f006 061f 	and.w	r6, r6, #31
 80188c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80188c4:	fa02 f606 	lsl.w	r6, r2, r6
 80188c8:	421e      	tst	r6, r3
 80188ca:	bf18      	it	ne
 80188cc:	4617      	movne	r7, r2
 80188ce:	f047 0720 	orr.w	r7, r7, #32
 80188d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80188d4:	601d      	str	r5, [r3, #0]
 80188d6:	9b06      	ldr	r3, [sp, #24]
 80188d8:	601c      	str	r4, [r3, #0]
 80188da:	e6a4      	b.n	8018626 <__gethex+0x110>
 80188dc:	4299      	cmp	r1, r3
 80188de:	f843 cc04 	str.w	ip, [r3, #-4]
 80188e2:	d8d8      	bhi.n	8018896 <__gethex+0x380>
 80188e4:	68ab      	ldr	r3, [r5, #8]
 80188e6:	4599      	cmp	r9, r3
 80188e8:	db12      	blt.n	8018910 <__gethex+0x3fa>
 80188ea:	6869      	ldr	r1, [r5, #4]
 80188ec:	9802      	ldr	r0, [sp, #8]
 80188ee:	3101      	adds	r1, #1
 80188f0:	f000 f910 	bl	8018b14 <_Balloc>
 80188f4:	692a      	ldr	r2, [r5, #16]
 80188f6:	3202      	adds	r2, #2
 80188f8:	f105 010c 	add.w	r1, r5, #12
 80188fc:	4683      	mov	fp, r0
 80188fe:	0092      	lsls	r2, r2, #2
 8018900:	300c      	adds	r0, #12
 8018902:	f7fd f93b 	bl	8015b7c <memcpy>
 8018906:	4629      	mov	r1, r5
 8018908:	9802      	ldr	r0, [sp, #8]
 801890a:	f000 f937 	bl	8018b7c <_Bfree>
 801890e:	465d      	mov	r5, fp
 8018910:	692b      	ldr	r3, [r5, #16]
 8018912:	1c5a      	adds	r2, r3, #1
 8018914:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018918:	612a      	str	r2, [r5, #16]
 801891a:	2201      	movs	r2, #1
 801891c:	615a      	str	r2, [r3, #20]
 801891e:	e7c2      	b.n	80188a6 <__gethex+0x390>
 8018920:	692a      	ldr	r2, [r5, #16]
 8018922:	454a      	cmp	r2, r9
 8018924:	dd0b      	ble.n	801893e <__gethex+0x428>
 8018926:	2101      	movs	r1, #1
 8018928:	4628      	mov	r0, r5
 801892a:	f7ff fda5 	bl	8018478 <rshift>
 801892e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018932:	3401      	adds	r4, #1
 8018934:	42a3      	cmp	r3, r4
 8018936:	f6ff aed9 	blt.w	80186ec <__gethex+0x1d6>
 801893a:	2701      	movs	r7, #1
 801893c:	e7c7      	b.n	80188ce <__gethex+0x3b8>
 801893e:	f016 061f 	ands.w	r6, r6, #31
 8018942:	d0fa      	beq.n	801893a <__gethex+0x424>
 8018944:	449a      	add	sl, r3
 8018946:	f1c6 0620 	rsb	r6, r6, #32
 801894a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801894e:	f000 f9a5 	bl	8018c9c <__hi0bits>
 8018952:	42b0      	cmp	r0, r6
 8018954:	dbe7      	blt.n	8018926 <__gethex+0x410>
 8018956:	e7f0      	b.n	801893a <__gethex+0x424>

08018958 <L_shift>:
 8018958:	f1c2 0208 	rsb	r2, r2, #8
 801895c:	0092      	lsls	r2, r2, #2
 801895e:	b570      	push	{r4, r5, r6, lr}
 8018960:	f1c2 0620 	rsb	r6, r2, #32
 8018964:	6843      	ldr	r3, [r0, #4]
 8018966:	6804      	ldr	r4, [r0, #0]
 8018968:	fa03 f506 	lsl.w	r5, r3, r6
 801896c:	432c      	orrs	r4, r5
 801896e:	40d3      	lsrs	r3, r2
 8018970:	6004      	str	r4, [r0, #0]
 8018972:	f840 3f04 	str.w	r3, [r0, #4]!
 8018976:	4288      	cmp	r0, r1
 8018978:	d3f4      	bcc.n	8018964 <L_shift+0xc>
 801897a:	bd70      	pop	{r4, r5, r6, pc}

0801897c <__match>:
 801897c:	b530      	push	{r4, r5, lr}
 801897e:	6803      	ldr	r3, [r0, #0]
 8018980:	3301      	adds	r3, #1
 8018982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018986:	b914      	cbnz	r4, 801898e <__match+0x12>
 8018988:	6003      	str	r3, [r0, #0]
 801898a:	2001      	movs	r0, #1
 801898c:	bd30      	pop	{r4, r5, pc}
 801898e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018992:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018996:	2d19      	cmp	r5, #25
 8018998:	bf98      	it	ls
 801899a:	3220      	addls	r2, #32
 801899c:	42a2      	cmp	r2, r4
 801899e:	d0f0      	beq.n	8018982 <__match+0x6>
 80189a0:	2000      	movs	r0, #0
 80189a2:	e7f3      	b.n	801898c <__match+0x10>

080189a4 <__hexnan>:
 80189a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189a8:	680b      	ldr	r3, [r1, #0]
 80189aa:	6801      	ldr	r1, [r0, #0]
 80189ac:	115f      	asrs	r7, r3, #5
 80189ae:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80189b2:	f013 031f 	ands.w	r3, r3, #31
 80189b6:	b087      	sub	sp, #28
 80189b8:	bf18      	it	ne
 80189ba:	3704      	addne	r7, #4
 80189bc:	2500      	movs	r5, #0
 80189be:	1f3e      	subs	r6, r7, #4
 80189c0:	4682      	mov	sl, r0
 80189c2:	4690      	mov	r8, r2
 80189c4:	9301      	str	r3, [sp, #4]
 80189c6:	f847 5c04 	str.w	r5, [r7, #-4]
 80189ca:	46b1      	mov	r9, r6
 80189cc:	4634      	mov	r4, r6
 80189ce:	9502      	str	r5, [sp, #8]
 80189d0:	46ab      	mov	fp, r5
 80189d2:	784a      	ldrb	r2, [r1, #1]
 80189d4:	1c4b      	adds	r3, r1, #1
 80189d6:	9303      	str	r3, [sp, #12]
 80189d8:	b342      	cbz	r2, 8018a2c <__hexnan+0x88>
 80189da:	4610      	mov	r0, r2
 80189dc:	9105      	str	r1, [sp, #20]
 80189de:	9204      	str	r2, [sp, #16]
 80189e0:	f7ff fd84 	bl	80184ec <__hexdig_fun>
 80189e4:	2800      	cmp	r0, #0
 80189e6:	d143      	bne.n	8018a70 <__hexnan+0xcc>
 80189e8:	9a04      	ldr	r2, [sp, #16]
 80189ea:	9905      	ldr	r1, [sp, #20]
 80189ec:	2a20      	cmp	r2, #32
 80189ee:	d818      	bhi.n	8018a22 <__hexnan+0x7e>
 80189f0:	9b02      	ldr	r3, [sp, #8]
 80189f2:	459b      	cmp	fp, r3
 80189f4:	dd13      	ble.n	8018a1e <__hexnan+0x7a>
 80189f6:	454c      	cmp	r4, r9
 80189f8:	d206      	bcs.n	8018a08 <__hexnan+0x64>
 80189fa:	2d07      	cmp	r5, #7
 80189fc:	dc04      	bgt.n	8018a08 <__hexnan+0x64>
 80189fe:	462a      	mov	r2, r5
 8018a00:	4649      	mov	r1, r9
 8018a02:	4620      	mov	r0, r4
 8018a04:	f7ff ffa8 	bl	8018958 <L_shift>
 8018a08:	4544      	cmp	r4, r8
 8018a0a:	d944      	bls.n	8018a96 <__hexnan+0xf2>
 8018a0c:	2300      	movs	r3, #0
 8018a0e:	f1a4 0904 	sub.w	r9, r4, #4
 8018a12:	f844 3c04 	str.w	r3, [r4, #-4]
 8018a16:	f8cd b008 	str.w	fp, [sp, #8]
 8018a1a:	464c      	mov	r4, r9
 8018a1c:	461d      	mov	r5, r3
 8018a1e:	9903      	ldr	r1, [sp, #12]
 8018a20:	e7d7      	b.n	80189d2 <__hexnan+0x2e>
 8018a22:	2a29      	cmp	r2, #41	; 0x29
 8018a24:	d14a      	bne.n	8018abc <__hexnan+0x118>
 8018a26:	3102      	adds	r1, #2
 8018a28:	f8ca 1000 	str.w	r1, [sl]
 8018a2c:	f1bb 0f00 	cmp.w	fp, #0
 8018a30:	d044      	beq.n	8018abc <__hexnan+0x118>
 8018a32:	454c      	cmp	r4, r9
 8018a34:	d206      	bcs.n	8018a44 <__hexnan+0xa0>
 8018a36:	2d07      	cmp	r5, #7
 8018a38:	dc04      	bgt.n	8018a44 <__hexnan+0xa0>
 8018a3a:	462a      	mov	r2, r5
 8018a3c:	4649      	mov	r1, r9
 8018a3e:	4620      	mov	r0, r4
 8018a40:	f7ff ff8a 	bl	8018958 <L_shift>
 8018a44:	4544      	cmp	r4, r8
 8018a46:	d928      	bls.n	8018a9a <__hexnan+0xf6>
 8018a48:	4643      	mov	r3, r8
 8018a4a:	f854 2b04 	ldr.w	r2, [r4], #4
 8018a4e:	f843 2b04 	str.w	r2, [r3], #4
 8018a52:	42a6      	cmp	r6, r4
 8018a54:	d2f9      	bcs.n	8018a4a <__hexnan+0xa6>
 8018a56:	2200      	movs	r2, #0
 8018a58:	f843 2b04 	str.w	r2, [r3], #4
 8018a5c:	429e      	cmp	r6, r3
 8018a5e:	d2fb      	bcs.n	8018a58 <__hexnan+0xb4>
 8018a60:	6833      	ldr	r3, [r6, #0]
 8018a62:	b91b      	cbnz	r3, 8018a6c <__hexnan+0xc8>
 8018a64:	4546      	cmp	r6, r8
 8018a66:	d127      	bne.n	8018ab8 <__hexnan+0x114>
 8018a68:	2301      	movs	r3, #1
 8018a6a:	6033      	str	r3, [r6, #0]
 8018a6c:	2005      	movs	r0, #5
 8018a6e:	e026      	b.n	8018abe <__hexnan+0x11a>
 8018a70:	3501      	adds	r5, #1
 8018a72:	2d08      	cmp	r5, #8
 8018a74:	f10b 0b01 	add.w	fp, fp, #1
 8018a78:	dd06      	ble.n	8018a88 <__hexnan+0xe4>
 8018a7a:	4544      	cmp	r4, r8
 8018a7c:	d9cf      	bls.n	8018a1e <__hexnan+0x7a>
 8018a7e:	2300      	movs	r3, #0
 8018a80:	f844 3c04 	str.w	r3, [r4, #-4]
 8018a84:	2501      	movs	r5, #1
 8018a86:	3c04      	subs	r4, #4
 8018a88:	6822      	ldr	r2, [r4, #0]
 8018a8a:	f000 000f 	and.w	r0, r0, #15
 8018a8e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018a92:	6020      	str	r0, [r4, #0]
 8018a94:	e7c3      	b.n	8018a1e <__hexnan+0x7a>
 8018a96:	2508      	movs	r5, #8
 8018a98:	e7c1      	b.n	8018a1e <__hexnan+0x7a>
 8018a9a:	9b01      	ldr	r3, [sp, #4]
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d0df      	beq.n	8018a60 <__hexnan+0xbc>
 8018aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8018aa4:	f1c3 0320 	rsb	r3, r3, #32
 8018aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8018aac:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018ab0:	401a      	ands	r2, r3
 8018ab2:	f847 2c04 	str.w	r2, [r7, #-4]
 8018ab6:	e7d3      	b.n	8018a60 <__hexnan+0xbc>
 8018ab8:	3e04      	subs	r6, #4
 8018aba:	e7d1      	b.n	8018a60 <__hexnan+0xbc>
 8018abc:	2004      	movs	r0, #4
 8018abe:	b007      	add	sp, #28
 8018ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018ac4 <__locale_ctype_ptr_l>:
 8018ac4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018ac8:	4770      	bx	lr

08018aca <__localeconv_l>:
 8018aca:	30f0      	adds	r0, #240	; 0xf0
 8018acc:	4770      	bx	lr
	...

08018ad0 <_localeconv_r>:
 8018ad0:	4b04      	ldr	r3, [pc, #16]	; (8018ae4 <_localeconv_r+0x14>)
 8018ad2:	681b      	ldr	r3, [r3, #0]
 8018ad4:	6a18      	ldr	r0, [r3, #32]
 8018ad6:	4b04      	ldr	r3, [pc, #16]	; (8018ae8 <_localeconv_r+0x18>)
 8018ad8:	2800      	cmp	r0, #0
 8018ada:	bf08      	it	eq
 8018adc:	4618      	moveq	r0, r3
 8018ade:	30f0      	adds	r0, #240	; 0xf0
 8018ae0:	4770      	bx	lr
 8018ae2:	bf00      	nop
 8018ae4:	200009ac 	.word	0x200009ac
 8018ae8:	20000a10 	.word	0x20000a10

08018aec <__ascii_mbtowc>:
 8018aec:	b082      	sub	sp, #8
 8018aee:	b901      	cbnz	r1, 8018af2 <__ascii_mbtowc+0x6>
 8018af0:	a901      	add	r1, sp, #4
 8018af2:	b142      	cbz	r2, 8018b06 <__ascii_mbtowc+0x1a>
 8018af4:	b14b      	cbz	r3, 8018b0a <__ascii_mbtowc+0x1e>
 8018af6:	7813      	ldrb	r3, [r2, #0]
 8018af8:	600b      	str	r3, [r1, #0]
 8018afa:	7812      	ldrb	r2, [r2, #0]
 8018afc:	1c10      	adds	r0, r2, #0
 8018afe:	bf18      	it	ne
 8018b00:	2001      	movne	r0, #1
 8018b02:	b002      	add	sp, #8
 8018b04:	4770      	bx	lr
 8018b06:	4610      	mov	r0, r2
 8018b08:	e7fb      	b.n	8018b02 <__ascii_mbtowc+0x16>
 8018b0a:	f06f 0001 	mvn.w	r0, #1
 8018b0e:	e7f8      	b.n	8018b02 <__ascii_mbtowc+0x16>

08018b10 <__malloc_lock>:
 8018b10:	4770      	bx	lr

08018b12 <__malloc_unlock>:
 8018b12:	4770      	bx	lr

08018b14 <_Balloc>:
 8018b14:	b570      	push	{r4, r5, r6, lr}
 8018b16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018b18:	4604      	mov	r4, r0
 8018b1a:	460e      	mov	r6, r1
 8018b1c:	b93d      	cbnz	r5, 8018b2e <_Balloc+0x1a>
 8018b1e:	2010      	movs	r0, #16
 8018b20:	f7fd f81c 	bl	8015b5c <malloc>
 8018b24:	6260      	str	r0, [r4, #36]	; 0x24
 8018b26:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018b2a:	6005      	str	r5, [r0, #0]
 8018b2c:	60c5      	str	r5, [r0, #12]
 8018b2e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018b30:	68eb      	ldr	r3, [r5, #12]
 8018b32:	b183      	cbz	r3, 8018b56 <_Balloc+0x42>
 8018b34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018b36:	68db      	ldr	r3, [r3, #12]
 8018b38:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018b3c:	b9b8      	cbnz	r0, 8018b6e <_Balloc+0x5a>
 8018b3e:	2101      	movs	r1, #1
 8018b40:	fa01 f506 	lsl.w	r5, r1, r6
 8018b44:	1d6a      	adds	r2, r5, #5
 8018b46:	0092      	lsls	r2, r2, #2
 8018b48:	4620      	mov	r0, r4
 8018b4a:	f7fd f843 	bl	8015bd4 <_calloc_r>
 8018b4e:	b160      	cbz	r0, 8018b6a <_Balloc+0x56>
 8018b50:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8018b54:	e00e      	b.n	8018b74 <_Balloc+0x60>
 8018b56:	2221      	movs	r2, #33	; 0x21
 8018b58:	2104      	movs	r1, #4
 8018b5a:	4620      	mov	r0, r4
 8018b5c:	f7fd f83a 	bl	8015bd4 <_calloc_r>
 8018b60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018b62:	60e8      	str	r0, [r5, #12]
 8018b64:	68db      	ldr	r3, [r3, #12]
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	d1e4      	bne.n	8018b34 <_Balloc+0x20>
 8018b6a:	2000      	movs	r0, #0
 8018b6c:	bd70      	pop	{r4, r5, r6, pc}
 8018b6e:	6802      	ldr	r2, [r0, #0]
 8018b70:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018b74:	2300      	movs	r3, #0
 8018b76:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018b7a:	e7f7      	b.n	8018b6c <_Balloc+0x58>

08018b7c <_Bfree>:
 8018b7c:	b570      	push	{r4, r5, r6, lr}
 8018b7e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018b80:	4606      	mov	r6, r0
 8018b82:	460d      	mov	r5, r1
 8018b84:	b93c      	cbnz	r4, 8018b96 <_Bfree+0x1a>
 8018b86:	2010      	movs	r0, #16
 8018b88:	f7fc ffe8 	bl	8015b5c <malloc>
 8018b8c:	6270      	str	r0, [r6, #36]	; 0x24
 8018b8e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018b92:	6004      	str	r4, [r0, #0]
 8018b94:	60c4      	str	r4, [r0, #12]
 8018b96:	b13d      	cbz	r5, 8018ba8 <_Bfree+0x2c>
 8018b98:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018b9a:	686a      	ldr	r2, [r5, #4]
 8018b9c:	68db      	ldr	r3, [r3, #12]
 8018b9e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018ba2:	6029      	str	r1, [r5, #0]
 8018ba4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018ba8:	bd70      	pop	{r4, r5, r6, pc}

08018baa <__multadd>:
 8018baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bae:	690d      	ldr	r5, [r1, #16]
 8018bb0:	461f      	mov	r7, r3
 8018bb2:	4606      	mov	r6, r0
 8018bb4:	460c      	mov	r4, r1
 8018bb6:	f101 0c14 	add.w	ip, r1, #20
 8018bba:	2300      	movs	r3, #0
 8018bbc:	f8dc 0000 	ldr.w	r0, [ip]
 8018bc0:	b281      	uxth	r1, r0
 8018bc2:	fb02 7101 	mla	r1, r2, r1, r7
 8018bc6:	0c0f      	lsrs	r7, r1, #16
 8018bc8:	0c00      	lsrs	r0, r0, #16
 8018bca:	fb02 7000 	mla	r0, r2, r0, r7
 8018bce:	b289      	uxth	r1, r1
 8018bd0:	3301      	adds	r3, #1
 8018bd2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018bd6:	429d      	cmp	r5, r3
 8018bd8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018bdc:	f84c 1b04 	str.w	r1, [ip], #4
 8018be0:	dcec      	bgt.n	8018bbc <__multadd+0x12>
 8018be2:	b1d7      	cbz	r7, 8018c1a <__multadd+0x70>
 8018be4:	68a3      	ldr	r3, [r4, #8]
 8018be6:	42ab      	cmp	r3, r5
 8018be8:	dc12      	bgt.n	8018c10 <__multadd+0x66>
 8018bea:	6861      	ldr	r1, [r4, #4]
 8018bec:	4630      	mov	r0, r6
 8018bee:	3101      	adds	r1, #1
 8018bf0:	f7ff ff90 	bl	8018b14 <_Balloc>
 8018bf4:	6922      	ldr	r2, [r4, #16]
 8018bf6:	3202      	adds	r2, #2
 8018bf8:	f104 010c 	add.w	r1, r4, #12
 8018bfc:	4680      	mov	r8, r0
 8018bfe:	0092      	lsls	r2, r2, #2
 8018c00:	300c      	adds	r0, #12
 8018c02:	f7fc ffbb 	bl	8015b7c <memcpy>
 8018c06:	4621      	mov	r1, r4
 8018c08:	4630      	mov	r0, r6
 8018c0a:	f7ff ffb7 	bl	8018b7c <_Bfree>
 8018c0e:	4644      	mov	r4, r8
 8018c10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018c14:	3501      	adds	r5, #1
 8018c16:	615f      	str	r7, [r3, #20]
 8018c18:	6125      	str	r5, [r4, #16]
 8018c1a:	4620      	mov	r0, r4
 8018c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018c20 <__s2b>:
 8018c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c24:	460c      	mov	r4, r1
 8018c26:	4615      	mov	r5, r2
 8018c28:	461f      	mov	r7, r3
 8018c2a:	2209      	movs	r2, #9
 8018c2c:	3308      	adds	r3, #8
 8018c2e:	4606      	mov	r6, r0
 8018c30:	fb93 f3f2 	sdiv	r3, r3, r2
 8018c34:	2100      	movs	r1, #0
 8018c36:	2201      	movs	r2, #1
 8018c38:	429a      	cmp	r2, r3
 8018c3a:	db20      	blt.n	8018c7e <__s2b+0x5e>
 8018c3c:	4630      	mov	r0, r6
 8018c3e:	f7ff ff69 	bl	8018b14 <_Balloc>
 8018c42:	9b08      	ldr	r3, [sp, #32]
 8018c44:	6143      	str	r3, [r0, #20]
 8018c46:	2d09      	cmp	r5, #9
 8018c48:	f04f 0301 	mov.w	r3, #1
 8018c4c:	6103      	str	r3, [r0, #16]
 8018c4e:	dd19      	ble.n	8018c84 <__s2b+0x64>
 8018c50:	f104 0809 	add.w	r8, r4, #9
 8018c54:	46c1      	mov	r9, r8
 8018c56:	442c      	add	r4, r5
 8018c58:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018c5c:	4601      	mov	r1, r0
 8018c5e:	3b30      	subs	r3, #48	; 0x30
 8018c60:	220a      	movs	r2, #10
 8018c62:	4630      	mov	r0, r6
 8018c64:	f7ff ffa1 	bl	8018baa <__multadd>
 8018c68:	45a1      	cmp	r9, r4
 8018c6a:	d1f5      	bne.n	8018c58 <__s2b+0x38>
 8018c6c:	eb08 0405 	add.w	r4, r8, r5
 8018c70:	3c08      	subs	r4, #8
 8018c72:	1b2d      	subs	r5, r5, r4
 8018c74:	1963      	adds	r3, r4, r5
 8018c76:	42bb      	cmp	r3, r7
 8018c78:	db07      	blt.n	8018c8a <__s2b+0x6a>
 8018c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c7e:	0052      	lsls	r2, r2, #1
 8018c80:	3101      	adds	r1, #1
 8018c82:	e7d9      	b.n	8018c38 <__s2b+0x18>
 8018c84:	340a      	adds	r4, #10
 8018c86:	2509      	movs	r5, #9
 8018c88:	e7f3      	b.n	8018c72 <__s2b+0x52>
 8018c8a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018c8e:	4601      	mov	r1, r0
 8018c90:	3b30      	subs	r3, #48	; 0x30
 8018c92:	220a      	movs	r2, #10
 8018c94:	4630      	mov	r0, r6
 8018c96:	f7ff ff88 	bl	8018baa <__multadd>
 8018c9a:	e7eb      	b.n	8018c74 <__s2b+0x54>

08018c9c <__hi0bits>:
 8018c9c:	0c02      	lsrs	r2, r0, #16
 8018c9e:	0412      	lsls	r2, r2, #16
 8018ca0:	4603      	mov	r3, r0
 8018ca2:	b9b2      	cbnz	r2, 8018cd2 <__hi0bits+0x36>
 8018ca4:	0403      	lsls	r3, r0, #16
 8018ca6:	2010      	movs	r0, #16
 8018ca8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018cac:	bf04      	itt	eq
 8018cae:	021b      	lsleq	r3, r3, #8
 8018cb0:	3008      	addeq	r0, #8
 8018cb2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018cb6:	bf04      	itt	eq
 8018cb8:	011b      	lsleq	r3, r3, #4
 8018cba:	3004      	addeq	r0, #4
 8018cbc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018cc0:	bf04      	itt	eq
 8018cc2:	009b      	lsleq	r3, r3, #2
 8018cc4:	3002      	addeq	r0, #2
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	db06      	blt.n	8018cd8 <__hi0bits+0x3c>
 8018cca:	005b      	lsls	r3, r3, #1
 8018ccc:	d503      	bpl.n	8018cd6 <__hi0bits+0x3a>
 8018cce:	3001      	adds	r0, #1
 8018cd0:	4770      	bx	lr
 8018cd2:	2000      	movs	r0, #0
 8018cd4:	e7e8      	b.n	8018ca8 <__hi0bits+0xc>
 8018cd6:	2020      	movs	r0, #32
 8018cd8:	4770      	bx	lr

08018cda <__lo0bits>:
 8018cda:	6803      	ldr	r3, [r0, #0]
 8018cdc:	f013 0207 	ands.w	r2, r3, #7
 8018ce0:	4601      	mov	r1, r0
 8018ce2:	d00b      	beq.n	8018cfc <__lo0bits+0x22>
 8018ce4:	07da      	lsls	r2, r3, #31
 8018ce6:	d423      	bmi.n	8018d30 <__lo0bits+0x56>
 8018ce8:	0798      	lsls	r0, r3, #30
 8018cea:	bf49      	itett	mi
 8018cec:	085b      	lsrmi	r3, r3, #1
 8018cee:	089b      	lsrpl	r3, r3, #2
 8018cf0:	2001      	movmi	r0, #1
 8018cf2:	600b      	strmi	r3, [r1, #0]
 8018cf4:	bf5c      	itt	pl
 8018cf6:	600b      	strpl	r3, [r1, #0]
 8018cf8:	2002      	movpl	r0, #2
 8018cfa:	4770      	bx	lr
 8018cfc:	b298      	uxth	r0, r3
 8018cfe:	b9a8      	cbnz	r0, 8018d2c <__lo0bits+0x52>
 8018d00:	0c1b      	lsrs	r3, r3, #16
 8018d02:	2010      	movs	r0, #16
 8018d04:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018d08:	bf04      	itt	eq
 8018d0a:	0a1b      	lsreq	r3, r3, #8
 8018d0c:	3008      	addeq	r0, #8
 8018d0e:	071a      	lsls	r2, r3, #28
 8018d10:	bf04      	itt	eq
 8018d12:	091b      	lsreq	r3, r3, #4
 8018d14:	3004      	addeq	r0, #4
 8018d16:	079a      	lsls	r2, r3, #30
 8018d18:	bf04      	itt	eq
 8018d1a:	089b      	lsreq	r3, r3, #2
 8018d1c:	3002      	addeq	r0, #2
 8018d1e:	07da      	lsls	r2, r3, #31
 8018d20:	d402      	bmi.n	8018d28 <__lo0bits+0x4e>
 8018d22:	085b      	lsrs	r3, r3, #1
 8018d24:	d006      	beq.n	8018d34 <__lo0bits+0x5a>
 8018d26:	3001      	adds	r0, #1
 8018d28:	600b      	str	r3, [r1, #0]
 8018d2a:	4770      	bx	lr
 8018d2c:	4610      	mov	r0, r2
 8018d2e:	e7e9      	b.n	8018d04 <__lo0bits+0x2a>
 8018d30:	2000      	movs	r0, #0
 8018d32:	4770      	bx	lr
 8018d34:	2020      	movs	r0, #32
 8018d36:	4770      	bx	lr

08018d38 <__i2b>:
 8018d38:	b510      	push	{r4, lr}
 8018d3a:	460c      	mov	r4, r1
 8018d3c:	2101      	movs	r1, #1
 8018d3e:	f7ff fee9 	bl	8018b14 <_Balloc>
 8018d42:	2201      	movs	r2, #1
 8018d44:	6144      	str	r4, [r0, #20]
 8018d46:	6102      	str	r2, [r0, #16]
 8018d48:	bd10      	pop	{r4, pc}

08018d4a <__multiply>:
 8018d4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d4e:	4614      	mov	r4, r2
 8018d50:	690a      	ldr	r2, [r1, #16]
 8018d52:	6923      	ldr	r3, [r4, #16]
 8018d54:	429a      	cmp	r2, r3
 8018d56:	bfb8      	it	lt
 8018d58:	460b      	movlt	r3, r1
 8018d5a:	4688      	mov	r8, r1
 8018d5c:	bfbc      	itt	lt
 8018d5e:	46a0      	movlt	r8, r4
 8018d60:	461c      	movlt	r4, r3
 8018d62:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018d66:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018d6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018d6e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018d72:	eb07 0609 	add.w	r6, r7, r9
 8018d76:	42b3      	cmp	r3, r6
 8018d78:	bfb8      	it	lt
 8018d7a:	3101      	addlt	r1, #1
 8018d7c:	f7ff feca 	bl	8018b14 <_Balloc>
 8018d80:	f100 0514 	add.w	r5, r0, #20
 8018d84:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018d88:	462b      	mov	r3, r5
 8018d8a:	2200      	movs	r2, #0
 8018d8c:	4573      	cmp	r3, lr
 8018d8e:	d316      	bcc.n	8018dbe <__multiply+0x74>
 8018d90:	f104 0214 	add.w	r2, r4, #20
 8018d94:	f108 0114 	add.w	r1, r8, #20
 8018d98:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018d9c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018da0:	9300      	str	r3, [sp, #0]
 8018da2:	9b00      	ldr	r3, [sp, #0]
 8018da4:	9201      	str	r2, [sp, #4]
 8018da6:	4293      	cmp	r3, r2
 8018da8:	d80c      	bhi.n	8018dc4 <__multiply+0x7a>
 8018daa:	2e00      	cmp	r6, #0
 8018dac:	dd03      	ble.n	8018db6 <__multiply+0x6c>
 8018dae:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d05d      	beq.n	8018e72 <__multiply+0x128>
 8018db6:	6106      	str	r6, [r0, #16]
 8018db8:	b003      	add	sp, #12
 8018dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dbe:	f843 2b04 	str.w	r2, [r3], #4
 8018dc2:	e7e3      	b.n	8018d8c <__multiply+0x42>
 8018dc4:	f8b2 b000 	ldrh.w	fp, [r2]
 8018dc8:	f1bb 0f00 	cmp.w	fp, #0
 8018dcc:	d023      	beq.n	8018e16 <__multiply+0xcc>
 8018dce:	4689      	mov	r9, r1
 8018dd0:	46ac      	mov	ip, r5
 8018dd2:	f04f 0800 	mov.w	r8, #0
 8018dd6:	f859 4b04 	ldr.w	r4, [r9], #4
 8018dda:	f8dc a000 	ldr.w	sl, [ip]
 8018dde:	b2a3      	uxth	r3, r4
 8018de0:	fa1f fa8a 	uxth.w	sl, sl
 8018de4:	fb0b a303 	mla	r3, fp, r3, sl
 8018de8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018dec:	f8dc 4000 	ldr.w	r4, [ip]
 8018df0:	4443      	add	r3, r8
 8018df2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018df6:	fb0b 840a 	mla	r4, fp, sl, r8
 8018dfa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018dfe:	46e2      	mov	sl, ip
 8018e00:	b29b      	uxth	r3, r3
 8018e02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018e06:	454f      	cmp	r7, r9
 8018e08:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018e0c:	f84a 3b04 	str.w	r3, [sl], #4
 8018e10:	d82b      	bhi.n	8018e6a <__multiply+0x120>
 8018e12:	f8cc 8004 	str.w	r8, [ip, #4]
 8018e16:	9b01      	ldr	r3, [sp, #4]
 8018e18:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018e1c:	3204      	adds	r2, #4
 8018e1e:	f1ba 0f00 	cmp.w	sl, #0
 8018e22:	d020      	beq.n	8018e66 <__multiply+0x11c>
 8018e24:	682b      	ldr	r3, [r5, #0]
 8018e26:	4689      	mov	r9, r1
 8018e28:	46a8      	mov	r8, r5
 8018e2a:	f04f 0b00 	mov.w	fp, #0
 8018e2e:	f8b9 c000 	ldrh.w	ip, [r9]
 8018e32:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018e36:	fb0a 440c 	mla	r4, sl, ip, r4
 8018e3a:	445c      	add	r4, fp
 8018e3c:	46c4      	mov	ip, r8
 8018e3e:	b29b      	uxth	r3, r3
 8018e40:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018e44:	f84c 3b04 	str.w	r3, [ip], #4
 8018e48:	f859 3b04 	ldr.w	r3, [r9], #4
 8018e4c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018e50:	0c1b      	lsrs	r3, r3, #16
 8018e52:	fb0a b303 	mla	r3, sl, r3, fp
 8018e56:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018e5a:	454f      	cmp	r7, r9
 8018e5c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018e60:	d805      	bhi.n	8018e6e <__multiply+0x124>
 8018e62:	f8c8 3004 	str.w	r3, [r8, #4]
 8018e66:	3504      	adds	r5, #4
 8018e68:	e79b      	b.n	8018da2 <__multiply+0x58>
 8018e6a:	46d4      	mov	ip, sl
 8018e6c:	e7b3      	b.n	8018dd6 <__multiply+0x8c>
 8018e6e:	46e0      	mov	r8, ip
 8018e70:	e7dd      	b.n	8018e2e <__multiply+0xe4>
 8018e72:	3e01      	subs	r6, #1
 8018e74:	e799      	b.n	8018daa <__multiply+0x60>
	...

08018e78 <__pow5mult>:
 8018e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018e7c:	4615      	mov	r5, r2
 8018e7e:	f012 0203 	ands.w	r2, r2, #3
 8018e82:	4606      	mov	r6, r0
 8018e84:	460f      	mov	r7, r1
 8018e86:	d007      	beq.n	8018e98 <__pow5mult+0x20>
 8018e88:	3a01      	subs	r2, #1
 8018e8a:	4c21      	ldr	r4, [pc, #132]	; (8018f10 <__pow5mult+0x98>)
 8018e8c:	2300      	movs	r3, #0
 8018e8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018e92:	f7ff fe8a 	bl	8018baa <__multadd>
 8018e96:	4607      	mov	r7, r0
 8018e98:	10ad      	asrs	r5, r5, #2
 8018e9a:	d035      	beq.n	8018f08 <__pow5mult+0x90>
 8018e9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018e9e:	b93c      	cbnz	r4, 8018eb0 <__pow5mult+0x38>
 8018ea0:	2010      	movs	r0, #16
 8018ea2:	f7fc fe5b 	bl	8015b5c <malloc>
 8018ea6:	6270      	str	r0, [r6, #36]	; 0x24
 8018ea8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018eac:	6004      	str	r4, [r0, #0]
 8018eae:	60c4      	str	r4, [r0, #12]
 8018eb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018eb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018eb8:	b94c      	cbnz	r4, 8018ece <__pow5mult+0x56>
 8018eba:	f240 2171 	movw	r1, #625	; 0x271
 8018ebe:	4630      	mov	r0, r6
 8018ec0:	f7ff ff3a 	bl	8018d38 <__i2b>
 8018ec4:	2300      	movs	r3, #0
 8018ec6:	f8c8 0008 	str.w	r0, [r8, #8]
 8018eca:	4604      	mov	r4, r0
 8018ecc:	6003      	str	r3, [r0, #0]
 8018ece:	f04f 0800 	mov.w	r8, #0
 8018ed2:	07eb      	lsls	r3, r5, #31
 8018ed4:	d50a      	bpl.n	8018eec <__pow5mult+0x74>
 8018ed6:	4639      	mov	r1, r7
 8018ed8:	4622      	mov	r2, r4
 8018eda:	4630      	mov	r0, r6
 8018edc:	f7ff ff35 	bl	8018d4a <__multiply>
 8018ee0:	4639      	mov	r1, r7
 8018ee2:	4681      	mov	r9, r0
 8018ee4:	4630      	mov	r0, r6
 8018ee6:	f7ff fe49 	bl	8018b7c <_Bfree>
 8018eea:	464f      	mov	r7, r9
 8018eec:	106d      	asrs	r5, r5, #1
 8018eee:	d00b      	beq.n	8018f08 <__pow5mult+0x90>
 8018ef0:	6820      	ldr	r0, [r4, #0]
 8018ef2:	b938      	cbnz	r0, 8018f04 <__pow5mult+0x8c>
 8018ef4:	4622      	mov	r2, r4
 8018ef6:	4621      	mov	r1, r4
 8018ef8:	4630      	mov	r0, r6
 8018efa:	f7ff ff26 	bl	8018d4a <__multiply>
 8018efe:	6020      	str	r0, [r4, #0]
 8018f00:	f8c0 8000 	str.w	r8, [r0]
 8018f04:	4604      	mov	r4, r0
 8018f06:	e7e4      	b.n	8018ed2 <__pow5mult+0x5a>
 8018f08:	4638      	mov	r0, r7
 8018f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f0e:	bf00      	nop
 8018f10:	0801b440 	.word	0x0801b440

08018f14 <__lshift>:
 8018f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f18:	460c      	mov	r4, r1
 8018f1a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018f1e:	6923      	ldr	r3, [r4, #16]
 8018f20:	6849      	ldr	r1, [r1, #4]
 8018f22:	eb0a 0903 	add.w	r9, sl, r3
 8018f26:	68a3      	ldr	r3, [r4, #8]
 8018f28:	4607      	mov	r7, r0
 8018f2a:	4616      	mov	r6, r2
 8018f2c:	f109 0501 	add.w	r5, r9, #1
 8018f30:	42ab      	cmp	r3, r5
 8018f32:	db32      	blt.n	8018f9a <__lshift+0x86>
 8018f34:	4638      	mov	r0, r7
 8018f36:	f7ff fded 	bl	8018b14 <_Balloc>
 8018f3a:	2300      	movs	r3, #0
 8018f3c:	4680      	mov	r8, r0
 8018f3e:	f100 0114 	add.w	r1, r0, #20
 8018f42:	461a      	mov	r2, r3
 8018f44:	4553      	cmp	r3, sl
 8018f46:	db2b      	blt.n	8018fa0 <__lshift+0x8c>
 8018f48:	6920      	ldr	r0, [r4, #16]
 8018f4a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018f4e:	f104 0314 	add.w	r3, r4, #20
 8018f52:	f016 021f 	ands.w	r2, r6, #31
 8018f56:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018f5a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018f5e:	d025      	beq.n	8018fac <__lshift+0x98>
 8018f60:	f1c2 0e20 	rsb	lr, r2, #32
 8018f64:	2000      	movs	r0, #0
 8018f66:	681e      	ldr	r6, [r3, #0]
 8018f68:	468a      	mov	sl, r1
 8018f6a:	4096      	lsls	r6, r2
 8018f6c:	4330      	orrs	r0, r6
 8018f6e:	f84a 0b04 	str.w	r0, [sl], #4
 8018f72:	f853 0b04 	ldr.w	r0, [r3], #4
 8018f76:	459c      	cmp	ip, r3
 8018f78:	fa20 f00e 	lsr.w	r0, r0, lr
 8018f7c:	d814      	bhi.n	8018fa8 <__lshift+0x94>
 8018f7e:	6048      	str	r0, [r1, #4]
 8018f80:	b108      	cbz	r0, 8018f86 <__lshift+0x72>
 8018f82:	f109 0502 	add.w	r5, r9, #2
 8018f86:	3d01      	subs	r5, #1
 8018f88:	4638      	mov	r0, r7
 8018f8a:	f8c8 5010 	str.w	r5, [r8, #16]
 8018f8e:	4621      	mov	r1, r4
 8018f90:	f7ff fdf4 	bl	8018b7c <_Bfree>
 8018f94:	4640      	mov	r0, r8
 8018f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f9a:	3101      	adds	r1, #1
 8018f9c:	005b      	lsls	r3, r3, #1
 8018f9e:	e7c7      	b.n	8018f30 <__lshift+0x1c>
 8018fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018fa4:	3301      	adds	r3, #1
 8018fa6:	e7cd      	b.n	8018f44 <__lshift+0x30>
 8018fa8:	4651      	mov	r1, sl
 8018faa:	e7dc      	b.n	8018f66 <__lshift+0x52>
 8018fac:	3904      	subs	r1, #4
 8018fae:	f853 2b04 	ldr.w	r2, [r3], #4
 8018fb2:	f841 2f04 	str.w	r2, [r1, #4]!
 8018fb6:	459c      	cmp	ip, r3
 8018fb8:	d8f9      	bhi.n	8018fae <__lshift+0x9a>
 8018fba:	e7e4      	b.n	8018f86 <__lshift+0x72>

08018fbc <__mcmp>:
 8018fbc:	6903      	ldr	r3, [r0, #16]
 8018fbe:	690a      	ldr	r2, [r1, #16]
 8018fc0:	1a9b      	subs	r3, r3, r2
 8018fc2:	b530      	push	{r4, r5, lr}
 8018fc4:	d10c      	bne.n	8018fe0 <__mcmp+0x24>
 8018fc6:	0092      	lsls	r2, r2, #2
 8018fc8:	3014      	adds	r0, #20
 8018fca:	3114      	adds	r1, #20
 8018fcc:	1884      	adds	r4, r0, r2
 8018fce:	4411      	add	r1, r2
 8018fd0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018fd4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018fd8:	4295      	cmp	r5, r2
 8018fda:	d003      	beq.n	8018fe4 <__mcmp+0x28>
 8018fdc:	d305      	bcc.n	8018fea <__mcmp+0x2e>
 8018fde:	2301      	movs	r3, #1
 8018fe0:	4618      	mov	r0, r3
 8018fe2:	bd30      	pop	{r4, r5, pc}
 8018fe4:	42a0      	cmp	r0, r4
 8018fe6:	d3f3      	bcc.n	8018fd0 <__mcmp+0x14>
 8018fe8:	e7fa      	b.n	8018fe0 <__mcmp+0x24>
 8018fea:	f04f 33ff 	mov.w	r3, #4294967295
 8018fee:	e7f7      	b.n	8018fe0 <__mcmp+0x24>

08018ff0 <__mdiff>:
 8018ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ff4:	460d      	mov	r5, r1
 8018ff6:	4607      	mov	r7, r0
 8018ff8:	4611      	mov	r1, r2
 8018ffa:	4628      	mov	r0, r5
 8018ffc:	4614      	mov	r4, r2
 8018ffe:	f7ff ffdd 	bl	8018fbc <__mcmp>
 8019002:	1e06      	subs	r6, r0, #0
 8019004:	d108      	bne.n	8019018 <__mdiff+0x28>
 8019006:	4631      	mov	r1, r6
 8019008:	4638      	mov	r0, r7
 801900a:	f7ff fd83 	bl	8018b14 <_Balloc>
 801900e:	2301      	movs	r3, #1
 8019010:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8019014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019018:	bfa4      	itt	ge
 801901a:	4623      	movge	r3, r4
 801901c:	462c      	movge	r4, r5
 801901e:	4638      	mov	r0, r7
 8019020:	6861      	ldr	r1, [r4, #4]
 8019022:	bfa6      	itte	ge
 8019024:	461d      	movge	r5, r3
 8019026:	2600      	movge	r6, #0
 8019028:	2601      	movlt	r6, #1
 801902a:	f7ff fd73 	bl	8018b14 <_Balloc>
 801902e:	692b      	ldr	r3, [r5, #16]
 8019030:	60c6      	str	r6, [r0, #12]
 8019032:	6926      	ldr	r6, [r4, #16]
 8019034:	f105 0914 	add.w	r9, r5, #20
 8019038:	f104 0214 	add.w	r2, r4, #20
 801903c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8019040:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8019044:	f100 0514 	add.w	r5, r0, #20
 8019048:	f04f 0e00 	mov.w	lr, #0
 801904c:	f852 ab04 	ldr.w	sl, [r2], #4
 8019050:	f859 4b04 	ldr.w	r4, [r9], #4
 8019054:	fa1e f18a 	uxtah	r1, lr, sl
 8019058:	b2a3      	uxth	r3, r4
 801905a:	1ac9      	subs	r1, r1, r3
 801905c:	0c23      	lsrs	r3, r4, #16
 801905e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8019062:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8019066:	b289      	uxth	r1, r1
 8019068:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801906c:	45c8      	cmp	r8, r9
 801906e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8019072:	4694      	mov	ip, r2
 8019074:	f845 3b04 	str.w	r3, [r5], #4
 8019078:	d8e8      	bhi.n	801904c <__mdiff+0x5c>
 801907a:	45bc      	cmp	ip, r7
 801907c:	d304      	bcc.n	8019088 <__mdiff+0x98>
 801907e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8019082:	b183      	cbz	r3, 80190a6 <__mdiff+0xb6>
 8019084:	6106      	str	r6, [r0, #16]
 8019086:	e7c5      	b.n	8019014 <__mdiff+0x24>
 8019088:	f85c 1b04 	ldr.w	r1, [ip], #4
 801908c:	fa1e f381 	uxtah	r3, lr, r1
 8019090:	141a      	asrs	r2, r3, #16
 8019092:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8019096:	b29b      	uxth	r3, r3
 8019098:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801909c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80190a0:	f845 3b04 	str.w	r3, [r5], #4
 80190a4:	e7e9      	b.n	801907a <__mdiff+0x8a>
 80190a6:	3e01      	subs	r6, #1
 80190a8:	e7e9      	b.n	801907e <__mdiff+0x8e>
	...

080190ac <__ulp>:
 80190ac:	4b12      	ldr	r3, [pc, #72]	; (80190f8 <__ulp+0x4c>)
 80190ae:	ee10 2a90 	vmov	r2, s1
 80190b2:	401a      	ands	r2, r3
 80190b4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	dd04      	ble.n	80190c6 <__ulp+0x1a>
 80190bc:	2000      	movs	r0, #0
 80190be:	4619      	mov	r1, r3
 80190c0:	ec41 0b10 	vmov	d0, r0, r1
 80190c4:	4770      	bx	lr
 80190c6:	425b      	negs	r3, r3
 80190c8:	151b      	asrs	r3, r3, #20
 80190ca:	2b13      	cmp	r3, #19
 80190cc:	f04f 0000 	mov.w	r0, #0
 80190d0:	f04f 0100 	mov.w	r1, #0
 80190d4:	dc04      	bgt.n	80190e0 <__ulp+0x34>
 80190d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80190da:	fa42 f103 	asr.w	r1, r2, r3
 80190de:	e7ef      	b.n	80190c0 <__ulp+0x14>
 80190e0:	3b14      	subs	r3, #20
 80190e2:	2b1e      	cmp	r3, #30
 80190e4:	f04f 0201 	mov.w	r2, #1
 80190e8:	bfda      	itte	le
 80190ea:	f1c3 031f 	rsble	r3, r3, #31
 80190ee:	fa02 f303 	lslle.w	r3, r2, r3
 80190f2:	4613      	movgt	r3, r2
 80190f4:	4618      	mov	r0, r3
 80190f6:	e7e3      	b.n	80190c0 <__ulp+0x14>
 80190f8:	7ff00000 	.word	0x7ff00000

080190fc <__b2d>:
 80190fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190fe:	6905      	ldr	r5, [r0, #16]
 8019100:	f100 0714 	add.w	r7, r0, #20
 8019104:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019108:	1f2e      	subs	r6, r5, #4
 801910a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801910e:	4620      	mov	r0, r4
 8019110:	f7ff fdc4 	bl	8018c9c <__hi0bits>
 8019114:	f1c0 0320 	rsb	r3, r0, #32
 8019118:	280a      	cmp	r0, #10
 801911a:	600b      	str	r3, [r1, #0]
 801911c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8019194 <__b2d+0x98>
 8019120:	dc14      	bgt.n	801914c <__b2d+0x50>
 8019122:	f1c0 0e0b 	rsb	lr, r0, #11
 8019126:	fa24 f10e 	lsr.w	r1, r4, lr
 801912a:	42b7      	cmp	r7, r6
 801912c:	ea41 030c 	orr.w	r3, r1, ip
 8019130:	bf34      	ite	cc
 8019132:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019136:	2100      	movcs	r1, #0
 8019138:	3015      	adds	r0, #21
 801913a:	fa04 f000 	lsl.w	r0, r4, r0
 801913e:	fa21 f10e 	lsr.w	r1, r1, lr
 8019142:	ea40 0201 	orr.w	r2, r0, r1
 8019146:	ec43 2b10 	vmov	d0, r2, r3
 801914a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801914c:	42b7      	cmp	r7, r6
 801914e:	bf3a      	itte	cc
 8019150:	f1a5 0608 	subcc.w	r6, r5, #8
 8019154:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019158:	2100      	movcs	r1, #0
 801915a:	380b      	subs	r0, #11
 801915c:	d015      	beq.n	801918a <__b2d+0x8e>
 801915e:	4084      	lsls	r4, r0
 8019160:	f1c0 0520 	rsb	r5, r0, #32
 8019164:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8019168:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801916c:	42be      	cmp	r6, r7
 801916e:	fa21 fc05 	lsr.w	ip, r1, r5
 8019172:	ea44 030c 	orr.w	r3, r4, ip
 8019176:	bf8c      	ite	hi
 8019178:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801917c:	2400      	movls	r4, #0
 801917e:	fa01 f000 	lsl.w	r0, r1, r0
 8019182:	40ec      	lsrs	r4, r5
 8019184:	ea40 0204 	orr.w	r2, r0, r4
 8019188:	e7dd      	b.n	8019146 <__b2d+0x4a>
 801918a:	ea44 030c 	orr.w	r3, r4, ip
 801918e:	460a      	mov	r2, r1
 8019190:	e7d9      	b.n	8019146 <__b2d+0x4a>
 8019192:	bf00      	nop
 8019194:	3ff00000 	.word	0x3ff00000

08019198 <__d2b>:
 8019198:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801919c:	460e      	mov	r6, r1
 801919e:	2101      	movs	r1, #1
 80191a0:	ec59 8b10 	vmov	r8, r9, d0
 80191a4:	4615      	mov	r5, r2
 80191a6:	f7ff fcb5 	bl	8018b14 <_Balloc>
 80191aa:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80191ae:	4607      	mov	r7, r0
 80191b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80191b4:	bb34      	cbnz	r4, 8019204 <__d2b+0x6c>
 80191b6:	9301      	str	r3, [sp, #4]
 80191b8:	f1b8 0300 	subs.w	r3, r8, #0
 80191bc:	d027      	beq.n	801920e <__d2b+0x76>
 80191be:	a802      	add	r0, sp, #8
 80191c0:	f840 3d08 	str.w	r3, [r0, #-8]!
 80191c4:	f7ff fd89 	bl	8018cda <__lo0bits>
 80191c8:	9900      	ldr	r1, [sp, #0]
 80191ca:	b1f0      	cbz	r0, 801920a <__d2b+0x72>
 80191cc:	9a01      	ldr	r2, [sp, #4]
 80191ce:	f1c0 0320 	rsb	r3, r0, #32
 80191d2:	fa02 f303 	lsl.w	r3, r2, r3
 80191d6:	430b      	orrs	r3, r1
 80191d8:	40c2      	lsrs	r2, r0
 80191da:	617b      	str	r3, [r7, #20]
 80191dc:	9201      	str	r2, [sp, #4]
 80191de:	9b01      	ldr	r3, [sp, #4]
 80191e0:	61bb      	str	r3, [r7, #24]
 80191e2:	2b00      	cmp	r3, #0
 80191e4:	bf14      	ite	ne
 80191e6:	2102      	movne	r1, #2
 80191e8:	2101      	moveq	r1, #1
 80191ea:	6139      	str	r1, [r7, #16]
 80191ec:	b1c4      	cbz	r4, 8019220 <__d2b+0x88>
 80191ee:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80191f2:	4404      	add	r4, r0
 80191f4:	6034      	str	r4, [r6, #0]
 80191f6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80191fa:	6028      	str	r0, [r5, #0]
 80191fc:	4638      	mov	r0, r7
 80191fe:	b003      	add	sp, #12
 8019200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019208:	e7d5      	b.n	80191b6 <__d2b+0x1e>
 801920a:	6179      	str	r1, [r7, #20]
 801920c:	e7e7      	b.n	80191de <__d2b+0x46>
 801920e:	a801      	add	r0, sp, #4
 8019210:	f7ff fd63 	bl	8018cda <__lo0bits>
 8019214:	9b01      	ldr	r3, [sp, #4]
 8019216:	617b      	str	r3, [r7, #20]
 8019218:	2101      	movs	r1, #1
 801921a:	6139      	str	r1, [r7, #16]
 801921c:	3020      	adds	r0, #32
 801921e:	e7e5      	b.n	80191ec <__d2b+0x54>
 8019220:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8019224:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019228:	6030      	str	r0, [r6, #0]
 801922a:	6918      	ldr	r0, [r3, #16]
 801922c:	f7ff fd36 	bl	8018c9c <__hi0bits>
 8019230:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8019234:	e7e1      	b.n	80191fa <__d2b+0x62>

08019236 <__ratio>:
 8019236:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801923a:	4688      	mov	r8, r1
 801923c:	4669      	mov	r1, sp
 801923e:	4681      	mov	r9, r0
 8019240:	f7ff ff5c 	bl	80190fc <__b2d>
 8019244:	a901      	add	r1, sp, #4
 8019246:	4640      	mov	r0, r8
 8019248:	ec57 6b10 	vmov	r6, r7, d0
 801924c:	f7ff ff56 	bl	80190fc <__b2d>
 8019250:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019254:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019258:	eba3 0c02 	sub.w	ip, r3, r2
 801925c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019260:	1a9b      	subs	r3, r3, r2
 8019262:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019266:	ec5b ab10 	vmov	sl, fp, d0
 801926a:	2b00      	cmp	r3, #0
 801926c:	bfce      	itee	gt
 801926e:	463a      	movgt	r2, r7
 8019270:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019274:	465a      	movle	r2, fp
 8019276:	4659      	mov	r1, fp
 8019278:	463d      	mov	r5, r7
 801927a:	bfd4      	ite	le
 801927c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8019280:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8019284:	4630      	mov	r0, r6
 8019286:	ee10 2a10 	vmov	r2, s0
 801928a:	460b      	mov	r3, r1
 801928c:	4629      	mov	r1, r5
 801928e:	f7e7 fadd 	bl	800084c <__aeabi_ddiv>
 8019292:	ec41 0b10 	vmov	d0, r0, r1
 8019296:	b003      	add	sp, #12
 8019298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801929c <__copybits>:
 801929c:	3901      	subs	r1, #1
 801929e:	b510      	push	{r4, lr}
 80192a0:	1149      	asrs	r1, r1, #5
 80192a2:	6914      	ldr	r4, [r2, #16]
 80192a4:	3101      	adds	r1, #1
 80192a6:	f102 0314 	add.w	r3, r2, #20
 80192aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80192ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80192b2:	42a3      	cmp	r3, r4
 80192b4:	4602      	mov	r2, r0
 80192b6:	d303      	bcc.n	80192c0 <__copybits+0x24>
 80192b8:	2300      	movs	r3, #0
 80192ba:	428a      	cmp	r2, r1
 80192bc:	d305      	bcc.n	80192ca <__copybits+0x2e>
 80192be:	bd10      	pop	{r4, pc}
 80192c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80192c4:	f840 2b04 	str.w	r2, [r0], #4
 80192c8:	e7f3      	b.n	80192b2 <__copybits+0x16>
 80192ca:	f842 3b04 	str.w	r3, [r2], #4
 80192ce:	e7f4      	b.n	80192ba <__copybits+0x1e>

080192d0 <__any_on>:
 80192d0:	f100 0214 	add.w	r2, r0, #20
 80192d4:	6900      	ldr	r0, [r0, #16]
 80192d6:	114b      	asrs	r3, r1, #5
 80192d8:	4298      	cmp	r0, r3
 80192da:	b510      	push	{r4, lr}
 80192dc:	db11      	blt.n	8019302 <__any_on+0x32>
 80192de:	dd0a      	ble.n	80192f6 <__any_on+0x26>
 80192e0:	f011 011f 	ands.w	r1, r1, #31
 80192e4:	d007      	beq.n	80192f6 <__any_on+0x26>
 80192e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80192ea:	fa24 f001 	lsr.w	r0, r4, r1
 80192ee:	fa00 f101 	lsl.w	r1, r0, r1
 80192f2:	428c      	cmp	r4, r1
 80192f4:	d10b      	bne.n	801930e <__any_on+0x3e>
 80192f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80192fa:	4293      	cmp	r3, r2
 80192fc:	d803      	bhi.n	8019306 <__any_on+0x36>
 80192fe:	2000      	movs	r0, #0
 8019300:	bd10      	pop	{r4, pc}
 8019302:	4603      	mov	r3, r0
 8019304:	e7f7      	b.n	80192f6 <__any_on+0x26>
 8019306:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801930a:	2900      	cmp	r1, #0
 801930c:	d0f5      	beq.n	80192fa <__any_on+0x2a>
 801930e:	2001      	movs	r0, #1
 8019310:	e7f6      	b.n	8019300 <__any_on+0x30>

08019312 <__ssputs_r>:
 8019312:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019316:	688e      	ldr	r6, [r1, #8]
 8019318:	429e      	cmp	r6, r3
 801931a:	4682      	mov	sl, r0
 801931c:	460c      	mov	r4, r1
 801931e:	4690      	mov	r8, r2
 8019320:	4699      	mov	r9, r3
 8019322:	d837      	bhi.n	8019394 <__ssputs_r+0x82>
 8019324:	898a      	ldrh	r2, [r1, #12]
 8019326:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801932a:	d031      	beq.n	8019390 <__ssputs_r+0x7e>
 801932c:	6825      	ldr	r5, [r4, #0]
 801932e:	6909      	ldr	r1, [r1, #16]
 8019330:	1a6f      	subs	r7, r5, r1
 8019332:	6965      	ldr	r5, [r4, #20]
 8019334:	2302      	movs	r3, #2
 8019336:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801933a:	fb95 f5f3 	sdiv	r5, r5, r3
 801933e:	f109 0301 	add.w	r3, r9, #1
 8019342:	443b      	add	r3, r7
 8019344:	429d      	cmp	r5, r3
 8019346:	bf38      	it	cc
 8019348:	461d      	movcc	r5, r3
 801934a:	0553      	lsls	r3, r2, #21
 801934c:	d530      	bpl.n	80193b0 <__ssputs_r+0x9e>
 801934e:	4629      	mov	r1, r5
 8019350:	f7fc fc9c 	bl	8015c8c <_malloc_r>
 8019354:	4606      	mov	r6, r0
 8019356:	b950      	cbnz	r0, 801936e <__ssputs_r+0x5c>
 8019358:	230c      	movs	r3, #12
 801935a:	f8ca 3000 	str.w	r3, [sl]
 801935e:	89a3      	ldrh	r3, [r4, #12]
 8019360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019364:	81a3      	strh	r3, [r4, #12]
 8019366:	f04f 30ff 	mov.w	r0, #4294967295
 801936a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801936e:	463a      	mov	r2, r7
 8019370:	6921      	ldr	r1, [r4, #16]
 8019372:	f7fc fc03 	bl	8015b7c <memcpy>
 8019376:	89a3      	ldrh	r3, [r4, #12]
 8019378:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801937c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019380:	81a3      	strh	r3, [r4, #12]
 8019382:	6126      	str	r6, [r4, #16]
 8019384:	6165      	str	r5, [r4, #20]
 8019386:	443e      	add	r6, r7
 8019388:	1bed      	subs	r5, r5, r7
 801938a:	6026      	str	r6, [r4, #0]
 801938c:	60a5      	str	r5, [r4, #8]
 801938e:	464e      	mov	r6, r9
 8019390:	454e      	cmp	r6, r9
 8019392:	d900      	bls.n	8019396 <__ssputs_r+0x84>
 8019394:	464e      	mov	r6, r9
 8019396:	4632      	mov	r2, r6
 8019398:	4641      	mov	r1, r8
 801939a:	6820      	ldr	r0, [r4, #0]
 801939c:	f7fc fbf9 	bl	8015b92 <memmove>
 80193a0:	68a3      	ldr	r3, [r4, #8]
 80193a2:	1b9b      	subs	r3, r3, r6
 80193a4:	60a3      	str	r3, [r4, #8]
 80193a6:	6823      	ldr	r3, [r4, #0]
 80193a8:	441e      	add	r6, r3
 80193aa:	6026      	str	r6, [r4, #0]
 80193ac:	2000      	movs	r0, #0
 80193ae:	e7dc      	b.n	801936a <__ssputs_r+0x58>
 80193b0:	462a      	mov	r2, r5
 80193b2:	f000 f920 	bl	80195f6 <_realloc_r>
 80193b6:	4606      	mov	r6, r0
 80193b8:	2800      	cmp	r0, #0
 80193ba:	d1e2      	bne.n	8019382 <__ssputs_r+0x70>
 80193bc:	6921      	ldr	r1, [r4, #16]
 80193be:	4650      	mov	r0, sl
 80193c0:	f7fc fc16 	bl	8015bf0 <_free_r>
 80193c4:	e7c8      	b.n	8019358 <__ssputs_r+0x46>
	...

080193c8 <_svfiprintf_r>:
 80193c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193cc:	461d      	mov	r5, r3
 80193ce:	898b      	ldrh	r3, [r1, #12]
 80193d0:	061f      	lsls	r7, r3, #24
 80193d2:	b09d      	sub	sp, #116	; 0x74
 80193d4:	4680      	mov	r8, r0
 80193d6:	460c      	mov	r4, r1
 80193d8:	4616      	mov	r6, r2
 80193da:	d50f      	bpl.n	80193fc <_svfiprintf_r+0x34>
 80193dc:	690b      	ldr	r3, [r1, #16]
 80193de:	b96b      	cbnz	r3, 80193fc <_svfiprintf_r+0x34>
 80193e0:	2140      	movs	r1, #64	; 0x40
 80193e2:	f7fc fc53 	bl	8015c8c <_malloc_r>
 80193e6:	6020      	str	r0, [r4, #0]
 80193e8:	6120      	str	r0, [r4, #16]
 80193ea:	b928      	cbnz	r0, 80193f8 <_svfiprintf_r+0x30>
 80193ec:	230c      	movs	r3, #12
 80193ee:	f8c8 3000 	str.w	r3, [r8]
 80193f2:	f04f 30ff 	mov.w	r0, #4294967295
 80193f6:	e0c8      	b.n	801958a <_svfiprintf_r+0x1c2>
 80193f8:	2340      	movs	r3, #64	; 0x40
 80193fa:	6163      	str	r3, [r4, #20]
 80193fc:	2300      	movs	r3, #0
 80193fe:	9309      	str	r3, [sp, #36]	; 0x24
 8019400:	2320      	movs	r3, #32
 8019402:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019406:	2330      	movs	r3, #48	; 0x30
 8019408:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801940c:	9503      	str	r5, [sp, #12]
 801940e:	f04f 0b01 	mov.w	fp, #1
 8019412:	4637      	mov	r7, r6
 8019414:	463d      	mov	r5, r7
 8019416:	f815 3b01 	ldrb.w	r3, [r5], #1
 801941a:	b10b      	cbz	r3, 8019420 <_svfiprintf_r+0x58>
 801941c:	2b25      	cmp	r3, #37	; 0x25
 801941e:	d13e      	bne.n	801949e <_svfiprintf_r+0xd6>
 8019420:	ebb7 0a06 	subs.w	sl, r7, r6
 8019424:	d00b      	beq.n	801943e <_svfiprintf_r+0x76>
 8019426:	4653      	mov	r3, sl
 8019428:	4632      	mov	r2, r6
 801942a:	4621      	mov	r1, r4
 801942c:	4640      	mov	r0, r8
 801942e:	f7ff ff70 	bl	8019312 <__ssputs_r>
 8019432:	3001      	adds	r0, #1
 8019434:	f000 80a4 	beq.w	8019580 <_svfiprintf_r+0x1b8>
 8019438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801943a:	4453      	add	r3, sl
 801943c:	9309      	str	r3, [sp, #36]	; 0x24
 801943e:	783b      	ldrb	r3, [r7, #0]
 8019440:	2b00      	cmp	r3, #0
 8019442:	f000 809d 	beq.w	8019580 <_svfiprintf_r+0x1b8>
 8019446:	2300      	movs	r3, #0
 8019448:	f04f 32ff 	mov.w	r2, #4294967295
 801944c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019450:	9304      	str	r3, [sp, #16]
 8019452:	9307      	str	r3, [sp, #28]
 8019454:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019458:	931a      	str	r3, [sp, #104]	; 0x68
 801945a:	462f      	mov	r7, r5
 801945c:	2205      	movs	r2, #5
 801945e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019462:	4850      	ldr	r0, [pc, #320]	; (80195a4 <_svfiprintf_r+0x1dc>)
 8019464:	f7e6 febc 	bl	80001e0 <memchr>
 8019468:	9b04      	ldr	r3, [sp, #16]
 801946a:	b9d0      	cbnz	r0, 80194a2 <_svfiprintf_r+0xda>
 801946c:	06d9      	lsls	r1, r3, #27
 801946e:	bf44      	itt	mi
 8019470:	2220      	movmi	r2, #32
 8019472:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019476:	071a      	lsls	r2, r3, #28
 8019478:	bf44      	itt	mi
 801947a:	222b      	movmi	r2, #43	; 0x2b
 801947c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019480:	782a      	ldrb	r2, [r5, #0]
 8019482:	2a2a      	cmp	r2, #42	; 0x2a
 8019484:	d015      	beq.n	80194b2 <_svfiprintf_r+0xea>
 8019486:	9a07      	ldr	r2, [sp, #28]
 8019488:	462f      	mov	r7, r5
 801948a:	2000      	movs	r0, #0
 801948c:	250a      	movs	r5, #10
 801948e:	4639      	mov	r1, r7
 8019490:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019494:	3b30      	subs	r3, #48	; 0x30
 8019496:	2b09      	cmp	r3, #9
 8019498:	d94d      	bls.n	8019536 <_svfiprintf_r+0x16e>
 801949a:	b1b8      	cbz	r0, 80194cc <_svfiprintf_r+0x104>
 801949c:	e00f      	b.n	80194be <_svfiprintf_r+0xf6>
 801949e:	462f      	mov	r7, r5
 80194a0:	e7b8      	b.n	8019414 <_svfiprintf_r+0x4c>
 80194a2:	4a40      	ldr	r2, [pc, #256]	; (80195a4 <_svfiprintf_r+0x1dc>)
 80194a4:	1a80      	subs	r0, r0, r2
 80194a6:	fa0b f000 	lsl.w	r0, fp, r0
 80194aa:	4318      	orrs	r0, r3
 80194ac:	9004      	str	r0, [sp, #16]
 80194ae:	463d      	mov	r5, r7
 80194b0:	e7d3      	b.n	801945a <_svfiprintf_r+0x92>
 80194b2:	9a03      	ldr	r2, [sp, #12]
 80194b4:	1d11      	adds	r1, r2, #4
 80194b6:	6812      	ldr	r2, [r2, #0]
 80194b8:	9103      	str	r1, [sp, #12]
 80194ba:	2a00      	cmp	r2, #0
 80194bc:	db01      	blt.n	80194c2 <_svfiprintf_r+0xfa>
 80194be:	9207      	str	r2, [sp, #28]
 80194c0:	e004      	b.n	80194cc <_svfiprintf_r+0x104>
 80194c2:	4252      	negs	r2, r2
 80194c4:	f043 0302 	orr.w	r3, r3, #2
 80194c8:	9207      	str	r2, [sp, #28]
 80194ca:	9304      	str	r3, [sp, #16]
 80194cc:	783b      	ldrb	r3, [r7, #0]
 80194ce:	2b2e      	cmp	r3, #46	; 0x2e
 80194d0:	d10c      	bne.n	80194ec <_svfiprintf_r+0x124>
 80194d2:	787b      	ldrb	r3, [r7, #1]
 80194d4:	2b2a      	cmp	r3, #42	; 0x2a
 80194d6:	d133      	bne.n	8019540 <_svfiprintf_r+0x178>
 80194d8:	9b03      	ldr	r3, [sp, #12]
 80194da:	1d1a      	adds	r2, r3, #4
 80194dc:	681b      	ldr	r3, [r3, #0]
 80194de:	9203      	str	r2, [sp, #12]
 80194e0:	2b00      	cmp	r3, #0
 80194e2:	bfb8      	it	lt
 80194e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80194e8:	3702      	adds	r7, #2
 80194ea:	9305      	str	r3, [sp, #20]
 80194ec:	4d2e      	ldr	r5, [pc, #184]	; (80195a8 <_svfiprintf_r+0x1e0>)
 80194ee:	7839      	ldrb	r1, [r7, #0]
 80194f0:	2203      	movs	r2, #3
 80194f2:	4628      	mov	r0, r5
 80194f4:	f7e6 fe74 	bl	80001e0 <memchr>
 80194f8:	b138      	cbz	r0, 801950a <_svfiprintf_r+0x142>
 80194fa:	2340      	movs	r3, #64	; 0x40
 80194fc:	1b40      	subs	r0, r0, r5
 80194fe:	fa03 f000 	lsl.w	r0, r3, r0
 8019502:	9b04      	ldr	r3, [sp, #16]
 8019504:	4303      	orrs	r3, r0
 8019506:	3701      	adds	r7, #1
 8019508:	9304      	str	r3, [sp, #16]
 801950a:	7839      	ldrb	r1, [r7, #0]
 801950c:	4827      	ldr	r0, [pc, #156]	; (80195ac <_svfiprintf_r+0x1e4>)
 801950e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019512:	2206      	movs	r2, #6
 8019514:	1c7e      	adds	r6, r7, #1
 8019516:	f7e6 fe63 	bl	80001e0 <memchr>
 801951a:	2800      	cmp	r0, #0
 801951c:	d038      	beq.n	8019590 <_svfiprintf_r+0x1c8>
 801951e:	4b24      	ldr	r3, [pc, #144]	; (80195b0 <_svfiprintf_r+0x1e8>)
 8019520:	bb13      	cbnz	r3, 8019568 <_svfiprintf_r+0x1a0>
 8019522:	9b03      	ldr	r3, [sp, #12]
 8019524:	3307      	adds	r3, #7
 8019526:	f023 0307 	bic.w	r3, r3, #7
 801952a:	3308      	adds	r3, #8
 801952c:	9303      	str	r3, [sp, #12]
 801952e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019530:	444b      	add	r3, r9
 8019532:	9309      	str	r3, [sp, #36]	; 0x24
 8019534:	e76d      	b.n	8019412 <_svfiprintf_r+0x4a>
 8019536:	fb05 3202 	mla	r2, r5, r2, r3
 801953a:	2001      	movs	r0, #1
 801953c:	460f      	mov	r7, r1
 801953e:	e7a6      	b.n	801948e <_svfiprintf_r+0xc6>
 8019540:	2300      	movs	r3, #0
 8019542:	3701      	adds	r7, #1
 8019544:	9305      	str	r3, [sp, #20]
 8019546:	4619      	mov	r1, r3
 8019548:	250a      	movs	r5, #10
 801954a:	4638      	mov	r0, r7
 801954c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019550:	3a30      	subs	r2, #48	; 0x30
 8019552:	2a09      	cmp	r2, #9
 8019554:	d903      	bls.n	801955e <_svfiprintf_r+0x196>
 8019556:	2b00      	cmp	r3, #0
 8019558:	d0c8      	beq.n	80194ec <_svfiprintf_r+0x124>
 801955a:	9105      	str	r1, [sp, #20]
 801955c:	e7c6      	b.n	80194ec <_svfiprintf_r+0x124>
 801955e:	fb05 2101 	mla	r1, r5, r1, r2
 8019562:	2301      	movs	r3, #1
 8019564:	4607      	mov	r7, r0
 8019566:	e7f0      	b.n	801954a <_svfiprintf_r+0x182>
 8019568:	ab03      	add	r3, sp, #12
 801956a:	9300      	str	r3, [sp, #0]
 801956c:	4622      	mov	r2, r4
 801956e:	4b11      	ldr	r3, [pc, #68]	; (80195b4 <_svfiprintf_r+0x1ec>)
 8019570:	a904      	add	r1, sp, #16
 8019572:	4640      	mov	r0, r8
 8019574:	f7fc fc78 	bl	8015e68 <_printf_float>
 8019578:	f1b0 3fff 	cmp.w	r0, #4294967295
 801957c:	4681      	mov	r9, r0
 801957e:	d1d6      	bne.n	801952e <_svfiprintf_r+0x166>
 8019580:	89a3      	ldrh	r3, [r4, #12]
 8019582:	065b      	lsls	r3, r3, #25
 8019584:	f53f af35 	bmi.w	80193f2 <_svfiprintf_r+0x2a>
 8019588:	9809      	ldr	r0, [sp, #36]	; 0x24
 801958a:	b01d      	add	sp, #116	; 0x74
 801958c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019590:	ab03      	add	r3, sp, #12
 8019592:	9300      	str	r3, [sp, #0]
 8019594:	4622      	mov	r2, r4
 8019596:	4b07      	ldr	r3, [pc, #28]	; (80195b4 <_svfiprintf_r+0x1ec>)
 8019598:	a904      	add	r1, sp, #16
 801959a:	4640      	mov	r0, r8
 801959c:	f7fc ff1a 	bl	80163d4 <_printf_i>
 80195a0:	e7ea      	b.n	8019578 <_svfiprintf_r+0x1b0>
 80195a2:	bf00      	nop
 80195a4:	0801b44c 	.word	0x0801b44c
 80195a8:	0801b452 	.word	0x0801b452
 80195ac:	0801b456 	.word	0x0801b456
 80195b0:	08015e69 	.word	0x08015e69
 80195b4:	08019313 	.word	0x08019313

080195b8 <strncmp>:
 80195b8:	b510      	push	{r4, lr}
 80195ba:	b16a      	cbz	r2, 80195d8 <strncmp+0x20>
 80195bc:	3901      	subs	r1, #1
 80195be:	1884      	adds	r4, r0, r2
 80195c0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80195c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80195c8:	4293      	cmp	r3, r2
 80195ca:	d103      	bne.n	80195d4 <strncmp+0x1c>
 80195cc:	42a0      	cmp	r0, r4
 80195ce:	d001      	beq.n	80195d4 <strncmp+0x1c>
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	d1f5      	bne.n	80195c0 <strncmp+0x8>
 80195d4:	1a98      	subs	r0, r3, r2
 80195d6:	bd10      	pop	{r4, pc}
 80195d8:	4610      	mov	r0, r2
 80195da:	e7fc      	b.n	80195d6 <strncmp+0x1e>

080195dc <__ascii_wctomb>:
 80195dc:	b149      	cbz	r1, 80195f2 <__ascii_wctomb+0x16>
 80195de:	2aff      	cmp	r2, #255	; 0xff
 80195e0:	bf85      	ittet	hi
 80195e2:	238a      	movhi	r3, #138	; 0x8a
 80195e4:	6003      	strhi	r3, [r0, #0]
 80195e6:	700a      	strbls	r2, [r1, #0]
 80195e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80195ec:	bf98      	it	ls
 80195ee:	2001      	movls	r0, #1
 80195f0:	4770      	bx	lr
 80195f2:	4608      	mov	r0, r1
 80195f4:	4770      	bx	lr

080195f6 <_realloc_r>:
 80195f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195f8:	4607      	mov	r7, r0
 80195fa:	4614      	mov	r4, r2
 80195fc:	460e      	mov	r6, r1
 80195fe:	b921      	cbnz	r1, 801960a <_realloc_r+0x14>
 8019600:	4611      	mov	r1, r2
 8019602:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019606:	f7fc bb41 	b.w	8015c8c <_malloc_r>
 801960a:	b922      	cbnz	r2, 8019616 <_realloc_r+0x20>
 801960c:	f7fc faf0 	bl	8015bf0 <_free_r>
 8019610:	4625      	mov	r5, r4
 8019612:	4628      	mov	r0, r5
 8019614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019616:	f000 f814 	bl	8019642 <_malloc_usable_size_r>
 801961a:	42a0      	cmp	r0, r4
 801961c:	d20f      	bcs.n	801963e <_realloc_r+0x48>
 801961e:	4621      	mov	r1, r4
 8019620:	4638      	mov	r0, r7
 8019622:	f7fc fb33 	bl	8015c8c <_malloc_r>
 8019626:	4605      	mov	r5, r0
 8019628:	2800      	cmp	r0, #0
 801962a:	d0f2      	beq.n	8019612 <_realloc_r+0x1c>
 801962c:	4631      	mov	r1, r6
 801962e:	4622      	mov	r2, r4
 8019630:	f7fc faa4 	bl	8015b7c <memcpy>
 8019634:	4631      	mov	r1, r6
 8019636:	4638      	mov	r0, r7
 8019638:	f7fc fada 	bl	8015bf0 <_free_r>
 801963c:	e7e9      	b.n	8019612 <_realloc_r+0x1c>
 801963e:	4635      	mov	r5, r6
 8019640:	e7e7      	b.n	8019612 <_realloc_r+0x1c>

08019642 <_malloc_usable_size_r>:
 8019642:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019646:	1f18      	subs	r0, r3, #4
 8019648:	2b00      	cmp	r3, #0
 801964a:	bfbc      	itt	lt
 801964c:	580b      	ldrlt	r3, [r1, r0]
 801964e:	18c0      	addlt	r0, r0, r3
 8019650:	4770      	bx	lr
 8019652:	0000      	movs	r0, r0
 8019654:	0000      	movs	r0, r0
	...

08019658 <ceil>:
 8019658:	ec51 0b10 	vmov	r0, r1, d0
 801965c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019660:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8019664:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8019668:	2e13      	cmp	r6, #19
 801966a:	460c      	mov	r4, r1
 801966c:	ee10 5a10 	vmov	r5, s0
 8019670:	4680      	mov	r8, r0
 8019672:	dc30      	bgt.n	80196d6 <ceil+0x7e>
 8019674:	2e00      	cmp	r6, #0
 8019676:	da12      	bge.n	801969e <ceil+0x46>
 8019678:	a333      	add	r3, pc, #204	; (adr r3, 8019748 <ceil+0xf0>)
 801967a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801967e:	f7e6 fe05 	bl	800028c <__adddf3>
 8019682:	2200      	movs	r2, #0
 8019684:	2300      	movs	r3, #0
 8019686:	f7e7 fa47 	bl	8000b18 <__aeabi_dcmpgt>
 801968a:	b128      	cbz	r0, 8019698 <ceil+0x40>
 801968c:	2c00      	cmp	r4, #0
 801968e:	db55      	blt.n	801973c <ceil+0xe4>
 8019690:	432c      	orrs	r4, r5
 8019692:	d057      	beq.n	8019744 <ceil+0xec>
 8019694:	4c2e      	ldr	r4, [pc, #184]	; (8019750 <ceil+0xf8>)
 8019696:	2500      	movs	r5, #0
 8019698:	4621      	mov	r1, r4
 801969a:	4628      	mov	r0, r5
 801969c:	e025      	b.n	80196ea <ceil+0x92>
 801969e:	4f2d      	ldr	r7, [pc, #180]	; (8019754 <ceil+0xfc>)
 80196a0:	4137      	asrs	r7, r6
 80196a2:	ea01 0307 	and.w	r3, r1, r7
 80196a6:	4303      	orrs	r3, r0
 80196a8:	d01f      	beq.n	80196ea <ceil+0x92>
 80196aa:	a327      	add	r3, pc, #156	; (adr r3, 8019748 <ceil+0xf0>)
 80196ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196b0:	f7e6 fdec 	bl	800028c <__adddf3>
 80196b4:	2200      	movs	r2, #0
 80196b6:	2300      	movs	r3, #0
 80196b8:	f7e7 fa2e 	bl	8000b18 <__aeabi_dcmpgt>
 80196bc:	2800      	cmp	r0, #0
 80196be:	d0eb      	beq.n	8019698 <ceil+0x40>
 80196c0:	2c00      	cmp	r4, #0
 80196c2:	bfc2      	ittt	gt
 80196c4:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80196c8:	fa43 f606 	asrgt.w	r6, r3, r6
 80196cc:	19a4      	addgt	r4, r4, r6
 80196ce:	ea24 0407 	bic.w	r4, r4, r7
 80196d2:	2500      	movs	r5, #0
 80196d4:	e7e0      	b.n	8019698 <ceil+0x40>
 80196d6:	2e33      	cmp	r6, #51	; 0x33
 80196d8:	dd0b      	ble.n	80196f2 <ceil+0x9a>
 80196da:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80196de:	d104      	bne.n	80196ea <ceil+0x92>
 80196e0:	ee10 2a10 	vmov	r2, s0
 80196e4:	460b      	mov	r3, r1
 80196e6:	f7e6 fdd1 	bl	800028c <__adddf3>
 80196ea:	ec41 0b10 	vmov	d0, r0, r1
 80196ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196f2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80196f6:	f04f 33ff 	mov.w	r3, #4294967295
 80196fa:	fa23 f707 	lsr.w	r7, r3, r7
 80196fe:	4207      	tst	r7, r0
 8019700:	d0f3      	beq.n	80196ea <ceil+0x92>
 8019702:	a311      	add	r3, pc, #68	; (adr r3, 8019748 <ceil+0xf0>)
 8019704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019708:	f7e6 fdc0 	bl	800028c <__adddf3>
 801970c:	2200      	movs	r2, #0
 801970e:	2300      	movs	r3, #0
 8019710:	f7e7 fa02 	bl	8000b18 <__aeabi_dcmpgt>
 8019714:	2800      	cmp	r0, #0
 8019716:	d0bf      	beq.n	8019698 <ceil+0x40>
 8019718:	2c00      	cmp	r4, #0
 801971a:	dd02      	ble.n	8019722 <ceil+0xca>
 801971c:	2e14      	cmp	r6, #20
 801971e:	d103      	bne.n	8019728 <ceil+0xd0>
 8019720:	3401      	adds	r4, #1
 8019722:	ea25 0507 	bic.w	r5, r5, r7
 8019726:	e7b7      	b.n	8019698 <ceil+0x40>
 8019728:	2301      	movs	r3, #1
 801972a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801972e:	fa03 f606 	lsl.w	r6, r3, r6
 8019732:	4435      	add	r5, r6
 8019734:	4545      	cmp	r5, r8
 8019736:	bf38      	it	cc
 8019738:	18e4      	addcc	r4, r4, r3
 801973a:	e7f2      	b.n	8019722 <ceil+0xca>
 801973c:	2500      	movs	r5, #0
 801973e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8019742:	e7a9      	b.n	8019698 <ceil+0x40>
 8019744:	4625      	mov	r5, r4
 8019746:	e7a7      	b.n	8019698 <ceil+0x40>
 8019748:	8800759c 	.word	0x8800759c
 801974c:	7e37e43c 	.word	0x7e37e43c
 8019750:	3ff00000 	.word	0x3ff00000
 8019754:	000fffff 	.word	0x000fffff

08019758 <cos>:
 8019758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801975a:	ec51 0b10 	vmov	r0, r1, d0
 801975e:	4a1e      	ldr	r2, [pc, #120]	; (80197d8 <cos+0x80>)
 8019760:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019764:	4293      	cmp	r3, r2
 8019766:	dc06      	bgt.n	8019776 <cos+0x1e>
 8019768:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80197d0 <cos+0x78>
 801976c:	f000 fcec 	bl	801a148 <__kernel_cos>
 8019770:	ec51 0b10 	vmov	r0, r1, d0
 8019774:	e007      	b.n	8019786 <cos+0x2e>
 8019776:	4a19      	ldr	r2, [pc, #100]	; (80197dc <cos+0x84>)
 8019778:	4293      	cmp	r3, r2
 801977a:	dd09      	ble.n	8019790 <cos+0x38>
 801977c:	ee10 2a10 	vmov	r2, s0
 8019780:	460b      	mov	r3, r1
 8019782:	f7e6 fd81 	bl	8000288 <__aeabi_dsub>
 8019786:	ec41 0b10 	vmov	d0, r0, r1
 801978a:	b005      	add	sp, #20
 801978c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019790:	4668      	mov	r0, sp
 8019792:	f000 fa35 	bl	8019c00 <__ieee754_rem_pio2>
 8019796:	f000 0003 	and.w	r0, r0, #3
 801979a:	2801      	cmp	r0, #1
 801979c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80197a0:	ed9d 0b00 	vldr	d0, [sp]
 80197a4:	d007      	beq.n	80197b6 <cos+0x5e>
 80197a6:	2802      	cmp	r0, #2
 80197a8:	d00e      	beq.n	80197c8 <cos+0x70>
 80197aa:	2800      	cmp	r0, #0
 80197ac:	d0de      	beq.n	801976c <cos+0x14>
 80197ae:	2001      	movs	r0, #1
 80197b0:	f001 f8d2 	bl	801a958 <__kernel_sin>
 80197b4:	e7dc      	b.n	8019770 <cos+0x18>
 80197b6:	f001 f8cf 	bl	801a958 <__kernel_sin>
 80197ba:	ec53 2b10 	vmov	r2, r3, d0
 80197be:	ee10 0a10 	vmov	r0, s0
 80197c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80197c6:	e7de      	b.n	8019786 <cos+0x2e>
 80197c8:	f000 fcbe 	bl	801a148 <__kernel_cos>
 80197cc:	e7f5      	b.n	80197ba <cos+0x62>
 80197ce:	bf00      	nop
	...
 80197d8:	3fe921fb 	.word	0x3fe921fb
 80197dc:	7fefffff 	.word	0x7fefffff

080197e0 <round>:
 80197e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197e2:	ec57 6b10 	vmov	r6, r7, d0
 80197e6:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80197ea:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80197ee:	2c13      	cmp	r4, #19
 80197f0:	463b      	mov	r3, r7
 80197f2:	463d      	mov	r5, r7
 80197f4:	dc17      	bgt.n	8019826 <round+0x46>
 80197f6:	2c00      	cmp	r4, #0
 80197f8:	da09      	bge.n	801980e <round+0x2e>
 80197fa:	3401      	adds	r4, #1
 80197fc:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8019800:	d103      	bne.n	801980a <round+0x2a>
 8019802:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8019806:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801980a:	2100      	movs	r1, #0
 801980c:	e02c      	b.n	8019868 <round+0x88>
 801980e:	4a18      	ldr	r2, [pc, #96]	; (8019870 <round+0x90>)
 8019810:	4122      	asrs	r2, r4
 8019812:	4217      	tst	r7, r2
 8019814:	d100      	bne.n	8019818 <round+0x38>
 8019816:	b19e      	cbz	r6, 8019840 <round+0x60>
 8019818:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801981c:	4123      	asrs	r3, r4
 801981e:	442b      	add	r3, r5
 8019820:	ea23 0302 	bic.w	r3, r3, r2
 8019824:	e7f1      	b.n	801980a <round+0x2a>
 8019826:	2c33      	cmp	r4, #51	; 0x33
 8019828:	dd0d      	ble.n	8019846 <round+0x66>
 801982a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801982e:	d107      	bne.n	8019840 <round+0x60>
 8019830:	4630      	mov	r0, r6
 8019832:	4639      	mov	r1, r7
 8019834:	ee10 2a10 	vmov	r2, s0
 8019838:	f7e6 fd28 	bl	800028c <__adddf3>
 801983c:	4606      	mov	r6, r0
 801983e:	460f      	mov	r7, r1
 8019840:	ec47 6b10 	vmov	d0, r6, r7
 8019844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019846:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 801984a:	f04f 30ff 	mov.w	r0, #4294967295
 801984e:	40d0      	lsrs	r0, r2
 8019850:	4206      	tst	r6, r0
 8019852:	d0f5      	beq.n	8019840 <round+0x60>
 8019854:	2201      	movs	r2, #1
 8019856:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801985a:	fa02 f404 	lsl.w	r4, r2, r4
 801985e:	1931      	adds	r1, r6, r4
 8019860:	bf28      	it	cs
 8019862:	189b      	addcs	r3, r3, r2
 8019864:	ea21 0100 	bic.w	r1, r1, r0
 8019868:	461f      	mov	r7, r3
 801986a:	460e      	mov	r6, r1
 801986c:	e7e8      	b.n	8019840 <round+0x60>
 801986e:	bf00      	nop
 8019870:	000fffff 	.word	0x000fffff
 8019874:	00000000 	.word	0x00000000

08019878 <sin>:
 8019878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801987a:	ec51 0b10 	vmov	r0, r1, d0
 801987e:	4a20      	ldr	r2, [pc, #128]	; (8019900 <sin+0x88>)
 8019880:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019884:	4293      	cmp	r3, r2
 8019886:	dc07      	bgt.n	8019898 <sin+0x20>
 8019888:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80198f8 <sin+0x80>
 801988c:	2000      	movs	r0, #0
 801988e:	f001 f863 	bl	801a958 <__kernel_sin>
 8019892:	ec51 0b10 	vmov	r0, r1, d0
 8019896:	e007      	b.n	80198a8 <sin+0x30>
 8019898:	4a1a      	ldr	r2, [pc, #104]	; (8019904 <sin+0x8c>)
 801989a:	4293      	cmp	r3, r2
 801989c:	dd09      	ble.n	80198b2 <sin+0x3a>
 801989e:	ee10 2a10 	vmov	r2, s0
 80198a2:	460b      	mov	r3, r1
 80198a4:	f7e6 fcf0 	bl	8000288 <__aeabi_dsub>
 80198a8:	ec41 0b10 	vmov	d0, r0, r1
 80198ac:	b005      	add	sp, #20
 80198ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80198b2:	4668      	mov	r0, sp
 80198b4:	f000 f9a4 	bl	8019c00 <__ieee754_rem_pio2>
 80198b8:	f000 0003 	and.w	r0, r0, #3
 80198bc:	2801      	cmp	r0, #1
 80198be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80198c2:	ed9d 0b00 	vldr	d0, [sp]
 80198c6:	d004      	beq.n	80198d2 <sin+0x5a>
 80198c8:	2802      	cmp	r0, #2
 80198ca:	d005      	beq.n	80198d8 <sin+0x60>
 80198cc:	b970      	cbnz	r0, 80198ec <sin+0x74>
 80198ce:	2001      	movs	r0, #1
 80198d0:	e7dd      	b.n	801988e <sin+0x16>
 80198d2:	f000 fc39 	bl	801a148 <__kernel_cos>
 80198d6:	e7dc      	b.n	8019892 <sin+0x1a>
 80198d8:	2001      	movs	r0, #1
 80198da:	f001 f83d 	bl	801a958 <__kernel_sin>
 80198de:	ec53 2b10 	vmov	r2, r3, d0
 80198e2:	ee10 0a10 	vmov	r0, s0
 80198e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80198ea:	e7dd      	b.n	80198a8 <sin+0x30>
 80198ec:	f000 fc2c 	bl	801a148 <__kernel_cos>
 80198f0:	e7f5      	b.n	80198de <sin+0x66>
 80198f2:	bf00      	nop
 80198f4:	f3af 8000 	nop.w
	...
 8019900:	3fe921fb 	.word	0x3fe921fb
 8019904:	7fefffff 	.word	0x7fefffff

08019908 <ceilf>:
 8019908:	ee10 3a10 	vmov	r3, s0
 801990c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019910:	0dca      	lsrs	r2, r1, #23
 8019912:	3a7f      	subs	r2, #127	; 0x7f
 8019914:	2a16      	cmp	r2, #22
 8019916:	dc2a      	bgt.n	801996e <ceilf+0x66>
 8019918:	2a00      	cmp	r2, #0
 801991a:	da11      	bge.n	8019940 <ceilf+0x38>
 801991c:	eddf 7a18 	vldr	s15, [pc, #96]	; 8019980 <ceilf+0x78>
 8019920:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019924:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801992c:	dd05      	ble.n	801993a <ceilf+0x32>
 801992e:	2b00      	cmp	r3, #0
 8019930:	db23      	blt.n	801997a <ceilf+0x72>
 8019932:	2900      	cmp	r1, #0
 8019934:	bf18      	it	ne
 8019936:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 801993a:	ee00 3a10 	vmov	s0, r3
 801993e:	4770      	bx	lr
 8019940:	4910      	ldr	r1, [pc, #64]	; (8019984 <ceilf+0x7c>)
 8019942:	4111      	asrs	r1, r2
 8019944:	420b      	tst	r3, r1
 8019946:	d0fa      	beq.n	801993e <ceilf+0x36>
 8019948:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8019980 <ceilf+0x78>
 801994c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019950:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019958:	ddef      	ble.n	801993a <ceilf+0x32>
 801995a:	2b00      	cmp	r3, #0
 801995c:	bfc2      	ittt	gt
 801995e:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8019962:	fa40 f202 	asrgt.w	r2, r0, r2
 8019966:	189b      	addgt	r3, r3, r2
 8019968:	ea23 0301 	bic.w	r3, r3, r1
 801996c:	e7e5      	b.n	801993a <ceilf+0x32>
 801996e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019972:	d3e4      	bcc.n	801993e <ceilf+0x36>
 8019974:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019978:	4770      	bx	lr
 801997a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801997e:	e7dc      	b.n	801993a <ceilf+0x32>
 8019980:	7149f2ca 	.word	0x7149f2ca
 8019984:	007fffff 	.word	0x007fffff

08019988 <atan2>:
 8019988:	f000 b85a 	b.w	8019a40 <__ieee754_atan2>

0801998c <sqrt>:
 801998c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019990:	ed2d 8b02 	vpush	{d8}
 8019994:	b08b      	sub	sp, #44	; 0x2c
 8019996:	ec55 4b10 	vmov	r4, r5, d0
 801999a:	f000 fb23 	bl	8019fe4 <__ieee754_sqrt>
 801999e:	4b26      	ldr	r3, [pc, #152]	; (8019a38 <sqrt+0xac>)
 80199a0:	eeb0 8a40 	vmov.f32	s16, s0
 80199a4:	eef0 8a60 	vmov.f32	s17, s1
 80199a8:	f993 6000 	ldrsb.w	r6, [r3]
 80199ac:	1c73      	adds	r3, r6, #1
 80199ae:	d02a      	beq.n	8019a06 <sqrt+0x7a>
 80199b0:	4622      	mov	r2, r4
 80199b2:	462b      	mov	r3, r5
 80199b4:	4620      	mov	r0, r4
 80199b6:	4629      	mov	r1, r5
 80199b8:	f7e7 f8b8 	bl	8000b2c <__aeabi_dcmpun>
 80199bc:	4607      	mov	r7, r0
 80199be:	bb10      	cbnz	r0, 8019a06 <sqrt+0x7a>
 80199c0:	f04f 0800 	mov.w	r8, #0
 80199c4:	f04f 0900 	mov.w	r9, #0
 80199c8:	4642      	mov	r2, r8
 80199ca:	464b      	mov	r3, r9
 80199cc:	4620      	mov	r0, r4
 80199ce:	4629      	mov	r1, r5
 80199d0:	f7e7 f884 	bl	8000adc <__aeabi_dcmplt>
 80199d4:	b1b8      	cbz	r0, 8019a06 <sqrt+0x7a>
 80199d6:	2301      	movs	r3, #1
 80199d8:	9300      	str	r3, [sp, #0]
 80199da:	4b18      	ldr	r3, [pc, #96]	; (8019a3c <sqrt+0xb0>)
 80199dc:	9301      	str	r3, [sp, #4]
 80199de:	9708      	str	r7, [sp, #32]
 80199e0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80199e4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80199e8:	b9b6      	cbnz	r6, 8019a18 <sqrt+0x8c>
 80199ea:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80199ee:	4668      	mov	r0, sp
 80199f0:	f001 fa9e 	bl	801af30 <matherr>
 80199f4:	b1d0      	cbz	r0, 8019a2c <sqrt+0xa0>
 80199f6:	9b08      	ldr	r3, [sp, #32]
 80199f8:	b11b      	cbz	r3, 8019a02 <sqrt+0x76>
 80199fa:	f7fc f885 	bl	8015b08 <__errno>
 80199fe:	9b08      	ldr	r3, [sp, #32]
 8019a00:	6003      	str	r3, [r0, #0]
 8019a02:	ed9d 8b06 	vldr	d8, [sp, #24]
 8019a06:	eeb0 0a48 	vmov.f32	s0, s16
 8019a0a:	eef0 0a68 	vmov.f32	s1, s17
 8019a0e:	b00b      	add	sp, #44	; 0x2c
 8019a10:	ecbd 8b02 	vpop	{d8}
 8019a14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019a18:	4642      	mov	r2, r8
 8019a1a:	464b      	mov	r3, r9
 8019a1c:	4640      	mov	r0, r8
 8019a1e:	4649      	mov	r1, r9
 8019a20:	f7e6 ff14 	bl	800084c <__aeabi_ddiv>
 8019a24:	2e02      	cmp	r6, #2
 8019a26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019a2a:	d1e0      	bne.n	80199ee <sqrt+0x62>
 8019a2c:	f7fc f86c 	bl	8015b08 <__errno>
 8019a30:	2321      	movs	r3, #33	; 0x21
 8019a32:	6003      	str	r3, [r0, #0]
 8019a34:	e7df      	b.n	80199f6 <sqrt+0x6a>
 8019a36:	bf00      	nop
 8019a38:	20000b7c 	.word	0x20000b7c
 8019a3c:	0801b55e 	.word	0x0801b55e

08019a40 <__ieee754_atan2>:
 8019a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a44:	ec57 6b11 	vmov	r6, r7, d1
 8019a48:	4273      	negs	r3, r6
 8019a4a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8019a4e:	4333      	orrs	r3, r6
 8019a50:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8019bf8 <__ieee754_atan2+0x1b8>
 8019a54:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8019a58:	4573      	cmp	r3, lr
 8019a5a:	ec51 0b10 	vmov	r0, r1, d0
 8019a5e:	ee11 8a10 	vmov	r8, s2
 8019a62:	d80a      	bhi.n	8019a7a <__ieee754_atan2+0x3a>
 8019a64:	4244      	negs	r4, r0
 8019a66:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019a6a:	4304      	orrs	r4, r0
 8019a6c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8019a70:	4574      	cmp	r4, lr
 8019a72:	468c      	mov	ip, r1
 8019a74:	ee10 9a10 	vmov	r9, s0
 8019a78:	d907      	bls.n	8019a8a <__ieee754_atan2+0x4a>
 8019a7a:	4632      	mov	r2, r6
 8019a7c:	463b      	mov	r3, r7
 8019a7e:	f7e6 fc05 	bl	800028c <__adddf3>
 8019a82:	ec41 0b10 	vmov	d0, r0, r1
 8019a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a8a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8019a8e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019a92:	4334      	orrs	r4, r6
 8019a94:	d103      	bne.n	8019a9e <__ieee754_atan2+0x5e>
 8019a96:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a9a:	f001 b819 	b.w	801aad0 <atan>
 8019a9e:	17bc      	asrs	r4, r7, #30
 8019aa0:	f004 0402 	and.w	r4, r4, #2
 8019aa4:	ea53 0909 	orrs.w	r9, r3, r9
 8019aa8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8019aac:	d107      	bne.n	8019abe <__ieee754_atan2+0x7e>
 8019aae:	2c02      	cmp	r4, #2
 8019ab0:	d073      	beq.n	8019b9a <__ieee754_atan2+0x15a>
 8019ab2:	2c03      	cmp	r4, #3
 8019ab4:	d1e5      	bne.n	8019a82 <__ieee754_atan2+0x42>
 8019ab6:	a13e      	add	r1, pc, #248	; (adr r1, 8019bb0 <__ieee754_atan2+0x170>)
 8019ab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019abc:	e7e1      	b.n	8019a82 <__ieee754_atan2+0x42>
 8019abe:	ea52 0808 	orrs.w	r8, r2, r8
 8019ac2:	d106      	bne.n	8019ad2 <__ieee754_atan2+0x92>
 8019ac4:	f1bc 0f00 	cmp.w	ip, #0
 8019ac8:	da6b      	bge.n	8019ba2 <__ieee754_atan2+0x162>
 8019aca:	a13b      	add	r1, pc, #236	; (adr r1, 8019bb8 <__ieee754_atan2+0x178>)
 8019acc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ad0:	e7d7      	b.n	8019a82 <__ieee754_atan2+0x42>
 8019ad2:	4572      	cmp	r2, lr
 8019ad4:	d120      	bne.n	8019b18 <__ieee754_atan2+0xd8>
 8019ad6:	4293      	cmp	r3, r2
 8019ad8:	d111      	bne.n	8019afe <__ieee754_atan2+0xbe>
 8019ada:	2c02      	cmp	r4, #2
 8019adc:	d007      	beq.n	8019aee <__ieee754_atan2+0xae>
 8019ade:	2c03      	cmp	r4, #3
 8019ae0:	d009      	beq.n	8019af6 <__ieee754_atan2+0xb6>
 8019ae2:	2c01      	cmp	r4, #1
 8019ae4:	d155      	bne.n	8019b92 <__ieee754_atan2+0x152>
 8019ae6:	a136      	add	r1, pc, #216	; (adr r1, 8019bc0 <__ieee754_atan2+0x180>)
 8019ae8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019aec:	e7c9      	b.n	8019a82 <__ieee754_atan2+0x42>
 8019aee:	a136      	add	r1, pc, #216	; (adr r1, 8019bc8 <__ieee754_atan2+0x188>)
 8019af0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019af4:	e7c5      	b.n	8019a82 <__ieee754_atan2+0x42>
 8019af6:	a136      	add	r1, pc, #216	; (adr r1, 8019bd0 <__ieee754_atan2+0x190>)
 8019af8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019afc:	e7c1      	b.n	8019a82 <__ieee754_atan2+0x42>
 8019afe:	2c02      	cmp	r4, #2
 8019b00:	d04b      	beq.n	8019b9a <__ieee754_atan2+0x15a>
 8019b02:	2c03      	cmp	r4, #3
 8019b04:	d0d7      	beq.n	8019ab6 <__ieee754_atan2+0x76>
 8019b06:	2c01      	cmp	r4, #1
 8019b08:	f04f 0000 	mov.w	r0, #0
 8019b0c:	d102      	bne.n	8019b14 <__ieee754_atan2+0xd4>
 8019b0e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8019b12:	e7b6      	b.n	8019a82 <__ieee754_atan2+0x42>
 8019b14:	2100      	movs	r1, #0
 8019b16:	e7b4      	b.n	8019a82 <__ieee754_atan2+0x42>
 8019b18:	4573      	cmp	r3, lr
 8019b1a:	d0d3      	beq.n	8019ac4 <__ieee754_atan2+0x84>
 8019b1c:	1a9b      	subs	r3, r3, r2
 8019b1e:	151b      	asrs	r3, r3, #20
 8019b20:	2b3c      	cmp	r3, #60	; 0x3c
 8019b22:	dc1e      	bgt.n	8019b62 <__ieee754_atan2+0x122>
 8019b24:	2f00      	cmp	r7, #0
 8019b26:	da01      	bge.n	8019b2c <__ieee754_atan2+0xec>
 8019b28:	333c      	adds	r3, #60	; 0x3c
 8019b2a:	db1e      	blt.n	8019b6a <__ieee754_atan2+0x12a>
 8019b2c:	4632      	mov	r2, r6
 8019b2e:	463b      	mov	r3, r7
 8019b30:	f7e6 fe8c 	bl	800084c <__aeabi_ddiv>
 8019b34:	ec41 0b10 	vmov	d0, r0, r1
 8019b38:	f001 f96a 	bl	801ae10 <fabs>
 8019b3c:	f000 ffc8 	bl	801aad0 <atan>
 8019b40:	ec51 0b10 	vmov	r0, r1, d0
 8019b44:	2c01      	cmp	r4, #1
 8019b46:	d013      	beq.n	8019b70 <__ieee754_atan2+0x130>
 8019b48:	2c02      	cmp	r4, #2
 8019b4a:	d015      	beq.n	8019b78 <__ieee754_atan2+0x138>
 8019b4c:	2c00      	cmp	r4, #0
 8019b4e:	d098      	beq.n	8019a82 <__ieee754_atan2+0x42>
 8019b50:	a321      	add	r3, pc, #132	; (adr r3, 8019bd8 <__ieee754_atan2+0x198>)
 8019b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b56:	f7e6 fb97 	bl	8000288 <__aeabi_dsub>
 8019b5a:	a321      	add	r3, pc, #132	; (adr r3, 8019be0 <__ieee754_atan2+0x1a0>)
 8019b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b60:	e014      	b.n	8019b8c <__ieee754_atan2+0x14c>
 8019b62:	a121      	add	r1, pc, #132	; (adr r1, 8019be8 <__ieee754_atan2+0x1a8>)
 8019b64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019b68:	e7ec      	b.n	8019b44 <__ieee754_atan2+0x104>
 8019b6a:	2000      	movs	r0, #0
 8019b6c:	2100      	movs	r1, #0
 8019b6e:	e7e9      	b.n	8019b44 <__ieee754_atan2+0x104>
 8019b70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019b74:	4619      	mov	r1, r3
 8019b76:	e784      	b.n	8019a82 <__ieee754_atan2+0x42>
 8019b78:	a317      	add	r3, pc, #92	; (adr r3, 8019bd8 <__ieee754_atan2+0x198>)
 8019b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b7e:	f7e6 fb83 	bl	8000288 <__aeabi_dsub>
 8019b82:	4602      	mov	r2, r0
 8019b84:	460b      	mov	r3, r1
 8019b86:	a116      	add	r1, pc, #88	; (adr r1, 8019be0 <__ieee754_atan2+0x1a0>)
 8019b88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019b8c:	f7e6 fb7c 	bl	8000288 <__aeabi_dsub>
 8019b90:	e777      	b.n	8019a82 <__ieee754_atan2+0x42>
 8019b92:	a117      	add	r1, pc, #92	; (adr r1, 8019bf0 <__ieee754_atan2+0x1b0>)
 8019b94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019b98:	e773      	b.n	8019a82 <__ieee754_atan2+0x42>
 8019b9a:	a111      	add	r1, pc, #68	; (adr r1, 8019be0 <__ieee754_atan2+0x1a0>)
 8019b9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ba0:	e76f      	b.n	8019a82 <__ieee754_atan2+0x42>
 8019ba2:	a111      	add	r1, pc, #68	; (adr r1, 8019be8 <__ieee754_atan2+0x1a8>)
 8019ba4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ba8:	e76b      	b.n	8019a82 <__ieee754_atan2+0x42>
 8019baa:	bf00      	nop
 8019bac:	f3af 8000 	nop.w
 8019bb0:	54442d18 	.word	0x54442d18
 8019bb4:	c00921fb 	.word	0xc00921fb
 8019bb8:	54442d18 	.word	0x54442d18
 8019bbc:	bff921fb 	.word	0xbff921fb
 8019bc0:	54442d18 	.word	0x54442d18
 8019bc4:	bfe921fb 	.word	0xbfe921fb
 8019bc8:	7f3321d2 	.word	0x7f3321d2
 8019bcc:	4002d97c 	.word	0x4002d97c
 8019bd0:	7f3321d2 	.word	0x7f3321d2
 8019bd4:	c002d97c 	.word	0xc002d97c
 8019bd8:	33145c07 	.word	0x33145c07
 8019bdc:	3ca1a626 	.word	0x3ca1a626
 8019be0:	54442d18 	.word	0x54442d18
 8019be4:	400921fb 	.word	0x400921fb
 8019be8:	54442d18 	.word	0x54442d18
 8019bec:	3ff921fb 	.word	0x3ff921fb
 8019bf0:	54442d18 	.word	0x54442d18
 8019bf4:	3fe921fb 	.word	0x3fe921fb
 8019bf8:	7ff00000 	.word	0x7ff00000
 8019bfc:	00000000 	.word	0x00000000

08019c00 <__ieee754_rem_pio2>:
 8019c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c04:	ec57 6b10 	vmov	r6, r7, d0
 8019c08:	4bc3      	ldr	r3, [pc, #780]	; (8019f18 <__ieee754_rem_pio2+0x318>)
 8019c0a:	b08d      	sub	sp, #52	; 0x34
 8019c0c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8019c10:	4598      	cmp	r8, r3
 8019c12:	4604      	mov	r4, r0
 8019c14:	9704      	str	r7, [sp, #16]
 8019c16:	dc07      	bgt.n	8019c28 <__ieee754_rem_pio2+0x28>
 8019c18:	2200      	movs	r2, #0
 8019c1a:	2300      	movs	r3, #0
 8019c1c:	ed84 0b00 	vstr	d0, [r4]
 8019c20:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019c24:	2500      	movs	r5, #0
 8019c26:	e027      	b.n	8019c78 <__ieee754_rem_pio2+0x78>
 8019c28:	4bbc      	ldr	r3, [pc, #752]	; (8019f1c <__ieee754_rem_pio2+0x31c>)
 8019c2a:	4598      	cmp	r8, r3
 8019c2c:	dc75      	bgt.n	8019d1a <__ieee754_rem_pio2+0x11a>
 8019c2e:	9b04      	ldr	r3, [sp, #16]
 8019c30:	4dbb      	ldr	r5, [pc, #748]	; (8019f20 <__ieee754_rem_pio2+0x320>)
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	ee10 0a10 	vmov	r0, s0
 8019c38:	a3a9      	add	r3, pc, #676	; (adr r3, 8019ee0 <__ieee754_rem_pio2+0x2e0>)
 8019c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c3e:	4639      	mov	r1, r7
 8019c40:	dd36      	ble.n	8019cb0 <__ieee754_rem_pio2+0xb0>
 8019c42:	f7e6 fb21 	bl	8000288 <__aeabi_dsub>
 8019c46:	45a8      	cmp	r8, r5
 8019c48:	4606      	mov	r6, r0
 8019c4a:	460f      	mov	r7, r1
 8019c4c:	d018      	beq.n	8019c80 <__ieee754_rem_pio2+0x80>
 8019c4e:	a3a6      	add	r3, pc, #664	; (adr r3, 8019ee8 <__ieee754_rem_pio2+0x2e8>)
 8019c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c54:	f7e6 fb18 	bl	8000288 <__aeabi_dsub>
 8019c58:	4602      	mov	r2, r0
 8019c5a:	460b      	mov	r3, r1
 8019c5c:	e9c4 2300 	strd	r2, r3, [r4]
 8019c60:	4630      	mov	r0, r6
 8019c62:	4639      	mov	r1, r7
 8019c64:	f7e6 fb10 	bl	8000288 <__aeabi_dsub>
 8019c68:	a39f      	add	r3, pc, #636	; (adr r3, 8019ee8 <__ieee754_rem_pio2+0x2e8>)
 8019c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c6e:	f7e6 fb0b 	bl	8000288 <__aeabi_dsub>
 8019c72:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019c76:	2501      	movs	r5, #1
 8019c78:	4628      	mov	r0, r5
 8019c7a:	b00d      	add	sp, #52	; 0x34
 8019c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c80:	a39b      	add	r3, pc, #620	; (adr r3, 8019ef0 <__ieee754_rem_pio2+0x2f0>)
 8019c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c86:	f7e6 faff 	bl	8000288 <__aeabi_dsub>
 8019c8a:	a39b      	add	r3, pc, #620	; (adr r3, 8019ef8 <__ieee754_rem_pio2+0x2f8>)
 8019c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c90:	4606      	mov	r6, r0
 8019c92:	460f      	mov	r7, r1
 8019c94:	f7e6 faf8 	bl	8000288 <__aeabi_dsub>
 8019c98:	4602      	mov	r2, r0
 8019c9a:	460b      	mov	r3, r1
 8019c9c:	e9c4 2300 	strd	r2, r3, [r4]
 8019ca0:	4630      	mov	r0, r6
 8019ca2:	4639      	mov	r1, r7
 8019ca4:	f7e6 faf0 	bl	8000288 <__aeabi_dsub>
 8019ca8:	a393      	add	r3, pc, #588	; (adr r3, 8019ef8 <__ieee754_rem_pio2+0x2f8>)
 8019caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cae:	e7de      	b.n	8019c6e <__ieee754_rem_pio2+0x6e>
 8019cb0:	f7e6 faec 	bl	800028c <__adddf3>
 8019cb4:	45a8      	cmp	r8, r5
 8019cb6:	4606      	mov	r6, r0
 8019cb8:	460f      	mov	r7, r1
 8019cba:	d016      	beq.n	8019cea <__ieee754_rem_pio2+0xea>
 8019cbc:	a38a      	add	r3, pc, #552	; (adr r3, 8019ee8 <__ieee754_rem_pio2+0x2e8>)
 8019cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cc2:	f7e6 fae3 	bl	800028c <__adddf3>
 8019cc6:	4602      	mov	r2, r0
 8019cc8:	460b      	mov	r3, r1
 8019cca:	e9c4 2300 	strd	r2, r3, [r4]
 8019cce:	4630      	mov	r0, r6
 8019cd0:	4639      	mov	r1, r7
 8019cd2:	f7e6 fad9 	bl	8000288 <__aeabi_dsub>
 8019cd6:	a384      	add	r3, pc, #528	; (adr r3, 8019ee8 <__ieee754_rem_pio2+0x2e8>)
 8019cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cdc:	f7e6 fad6 	bl	800028c <__adddf3>
 8019ce0:	f04f 35ff 	mov.w	r5, #4294967295
 8019ce4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019ce8:	e7c6      	b.n	8019c78 <__ieee754_rem_pio2+0x78>
 8019cea:	a381      	add	r3, pc, #516	; (adr r3, 8019ef0 <__ieee754_rem_pio2+0x2f0>)
 8019cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cf0:	f7e6 facc 	bl	800028c <__adddf3>
 8019cf4:	a380      	add	r3, pc, #512	; (adr r3, 8019ef8 <__ieee754_rem_pio2+0x2f8>)
 8019cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cfa:	4606      	mov	r6, r0
 8019cfc:	460f      	mov	r7, r1
 8019cfe:	f7e6 fac5 	bl	800028c <__adddf3>
 8019d02:	4602      	mov	r2, r0
 8019d04:	460b      	mov	r3, r1
 8019d06:	e9c4 2300 	strd	r2, r3, [r4]
 8019d0a:	4630      	mov	r0, r6
 8019d0c:	4639      	mov	r1, r7
 8019d0e:	f7e6 fabb 	bl	8000288 <__aeabi_dsub>
 8019d12:	a379      	add	r3, pc, #484	; (adr r3, 8019ef8 <__ieee754_rem_pio2+0x2f8>)
 8019d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d18:	e7e0      	b.n	8019cdc <__ieee754_rem_pio2+0xdc>
 8019d1a:	4b82      	ldr	r3, [pc, #520]	; (8019f24 <__ieee754_rem_pio2+0x324>)
 8019d1c:	4598      	cmp	r8, r3
 8019d1e:	f300 80d0 	bgt.w	8019ec2 <__ieee754_rem_pio2+0x2c2>
 8019d22:	f001 f875 	bl	801ae10 <fabs>
 8019d26:	ec57 6b10 	vmov	r6, r7, d0
 8019d2a:	ee10 0a10 	vmov	r0, s0
 8019d2e:	a374      	add	r3, pc, #464	; (adr r3, 8019f00 <__ieee754_rem_pio2+0x300>)
 8019d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d34:	4639      	mov	r1, r7
 8019d36:	f7e6 fc5f 	bl	80005f8 <__aeabi_dmul>
 8019d3a:	2200      	movs	r2, #0
 8019d3c:	4b7a      	ldr	r3, [pc, #488]	; (8019f28 <__ieee754_rem_pio2+0x328>)
 8019d3e:	f7e6 faa5 	bl	800028c <__adddf3>
 8019d42:	f7e6 ff09 	bl	8000b58 <__aeabi_d2iz>
 8019d46:	4605      	mov	r5, r0
 8019d48:	f7e6 fbec 	bl	8000524 <__aeabi_i2d>
 8019d4c:	a364      	add	r3, pc, #400	; (adr r3, 8019ee0 <__ieee754_rem_pio2+0x2e0>)
 8019d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019d56:	f7e6 fc4f 	bl	80005f8 <__aeabi_dmul>
 8019d5a:	4602      	mov	r2, r0
 8019d5c:	460b      	mov	r3, r1
 8019d5e:	4630      	mov	r0, r6
 8019d60:	4639      	mov	r1, r7
 8019d62:	f7e6 fa91 	bl	8000288 <__aeabi_dsub>
 8019d66:	a360      	add	r3, pc, #384	; (adr r3, 8019ee8 <__ieee754_rem_pio2+0x2e8>)
 8019d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d6c:	4682      	mov	sl, r0
 8019d6e:	468b      	mov	fp, r1
 8019d70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019d74:	f7e6 fc40 	bl	80005f8 <__aeabi_dmul>
 8019d78:	2d1f      	cmp	r5, #31
 8019d7a:	4606      	mov	r6, r0
 8019d7c:	460f      	mov	r7, r1
 8019d7e:	dc0c      	bgt.n	8019d9a <__ieee754_rem_pio2+0x19a>
 8019d80:	1e6a      	subs	r2, r5, #1
 8019d82:	4b6a      	ldr	r3, [pc, #424]	; (8019f2c <__ieee754_rem_pio2+0x32c>)
 8019d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019d88:	4543      	cmp	r3, r8
 8019d8a:	d006      	beq.n	8019d9a <__ieee754_rem_pio2+0x19a>
 8019d8c:	4632      	mov	r2, r6
 8019d8e:	463b      	mov	r3, r7
 8019d90:	4650      	mov	r0, sl
 8019d92:	4659      	mov	r1, fp
 8019d94:	f7e6 fa78 	bl	8000288 <__aeabi_dsub>
 8019d98:	e00e      	b.n	8019db8 <__ieee754_rem_pio2+0x1b8>
 8019d9a:	4632      	mov	r2, r6
 8019d9c:	463b      	mov	r3, r7
 8019d9e:	4650      	mov	r0, sl
 8019da0:	4659      	mov	r1, fp
 8019da2:	f7e6 fa71 	bl	8000288 <__aeabi_dsub>
 8019da6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019daa:	9305      	str	r3, [sp, #20]
 8019dac:	9a05      	ldr	r2, [sp, #20]
 8019dae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019db2:	1ad3      	subs	r3, r2, r3
 8019db4:	2b10      	cmp	r3, #16
 8019db6:	dc02      	bgt.n	8019dbe <__ieee754_rem_pio2+0x1be>
 8019db8:	e9c4 0100 	strd	r0, r1, [r4]
 8019dbc:	e039      	b.n	8019e32 <__ieee754_rem_pio2+0x232>
 8019dbe:	a34c      	add	r3, pc, #304	; (adr r3, 8019ef0 <__ieee754_rem_pio2+0x2f0>)
 8019dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019dc8:	f7e6 fc16 	bl	80005f8 <__aeabi_dmul>
 8019dcc:	4606      	mov	r6, r0
 8019dce:	460f      	mov	r7, r1
 8019dd0:	4602      	mov	r2, r0
 8019dd2:	460b      	mov	r3, r1
 8019dd4:	4650      	mov	r0, sl
 8019dd6:	4659      	mov	r1, fp
 8019dd8:	f7e6 fa56 	bl	8000288 <__aeabi_dsub>
 8019ddc:	4602      	mov	r2, r0
 8019dde:	460b      	mov	r3, r1
 8019de0:	4680      	mov	r8, r0
 8019de2:	4689      	mov	r9, r1
 8019de4:	4650      	mov	r0, sl
 8019de6:	4659      	mov	r1, fp
 8019de8:	f7e6 fa4e 	bl	8000288 <__aeabi_dsub>
 8019dec:	4632      	mov	r2, r6
 8019dee:	463b      	mov	r3, r7
 8019df0:	f7e6 fa4a 	bl	8000288 <__aeabi_dsub>
 8019df4:	a340      	add	r3, pc, #256	; (adr r3, 8019ef8 <__ieee754_rem_pio2+0x2f8>)
 8019df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dfa:	4606      	mov	r6, r0
 8019dfc:	460f      	mov	r7, r1
 8019dfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019e02:	f7e6 fbf9 	bl	80005f8 <__aeabi_dmul>
 8019e06:	4632      	mov	r2, r6
 8019e08:	463b      	mov	r3, r7
 8019e0a:	f7e6 fa3d 	bl	8000288 <__aeabi_dsub>
 8019e0e:	4602      	mov	r2, r0
 8019e10:	460b      	mov	r3, r1
 8019e12:	4606      	mov	r6, r0
 8019e14:	460f      	mov	r7, r1
 8019e16:	4640      	mov	r0, r8
 8019e18:	4649      	mov	r1, r9
 8019e1a:	f7e6 fa35 	bl	8000288 <__aeabi_dsub>
 8019e1e:	9a05      	ldr	r2, [sp, #20]
 8019e20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019e24:	1ad3      	subs	r3, r2, r3
 8019e26:	2b31      	cmp	r3, #49	; 0x31
 8019e28:	dc20      	bgt.n	8019e6c <__ieee754_rem_pio2+0x26c>
 8019e2a:	e9c4 0100 	strd	r0, r1, [r4]
 8019e2e:	46c2      	mov	sl, r8
 8019e30:	46cb      	mov	fp, r9
 8019e32:	e9d4 8900 	ldrd	r8, r9, [r4]
 8019e36:	4650      	mov	r0, sl
 8019e38:	4642      	mov	r2, r8
 8019e3a:	464b      	mov	r3, r9
 8019e3c:	4659      	mov	r1, fp
 8019e3e:	f7e6 fa23 	bl	8000288 <__aeabi_dsub>
 8019e42:	463b      	mov	r3, r7
 8019e44:	4632      	mov	r2, r6
 8019e46:	f7e6 fa1f 	bl	8000288 <__aeabi_dsub>
 8019e4a:	9b04      	ldr	r3, [sp, #16]
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019e52:	f6bf af11 	bge.w	8019c78 <__ieee754_rem_pio2+0x78>
 8019e56:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8019e5a:	6063      	str	r3, [r4, #4]
 8019e5c:	f8c4 8000 	str.w	r8, [r4]
 8019e60:	60a0      	str	r0, [r4, #8]
 8019e62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019e66:	60e3      	str	r3, [r4, #12]
 8019e68:	426d      	negs	r5, r5
 8019e6a:	e705      	b.n	8019c78 <__ieee754_rem_pio2+0x78>
 8019e6c:	a326      	add	r3, pc, #152	; (adr r3, 8019f08 <__ieee754_rem_pio2+0x308>)
 8019e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019e76:	f7e6 fbbf 	bl	80005f8 <__aeabi_dmul>
 8019e7a:	4606      	mov	r6, r0
 8019e7c:	460f      	mov	r7, r1
 8019e7e:	4602      	mov	r2, r0
 8019e80:	460b      	mov	r3, r1
 8019e82:	4640      	mov	r0, r8
 8019e84:	4649      	mov	r1, r9
 8019e86:	f7e6 f9ff 	bl	8000288 <__aeabi_dsub>
 8019e8a:	4602      	mov	r2, r0
 8019e8c:	460b      	mov	r3, r1
 8019e8e:	4682      	mov	sl, r0
 8019e90:	468b      	mov	fp, r1
 8019e92:	4640      	mov	r0, r8
 8019e94:	4649      	mov	r1, r9
 8019e96:	f7e6 f9f7 	bl	8000288 <__aeabi_dsub>
 8019e9a:	4632      	mov	r2, r6
 8019e9c:	463b      	mov	r3, r7
 8019e9e:	f7e6 f9f3 	bl	8000288 <__aeabi_dsub>
 8019ea2:	a31b      	add	r3, pc, #108	; (adr r3, 8019f10 <__ieee754_rem_pio2+0x310>)
 8019ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ea8:	4606      	mov	r6, r0
 8019eaa:	460f      	mov	r7, r1
 8019eac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019eb0:	f7e6 fba2 	bl	80005f8 <__aeabi_dmul>
 8019eb4:	4632      	mov	r2, r6
 8019eb6:	463b      	mov	r3, r7
 8019eb8:	f7e6 f9e6 	bl	8000288 <__aeabi_dsub>
 8019ebc:	4606      	mov	r6, r0
 8019ebe:	460f      	mov	r7, r1
 8019ec0:	e764      	b.n	8019d8c <__ieee754_rem_pio2+0x18c>
 8019ec2:	4b1b      	ldr	r3, [pc, #108]	; (8019f30 <__ieee754_rem_pio2+0x330>)
 8019ec4:	4598      	cmp	r8, r3
 8019ec6:	dd35      	ble.n	8019f34 <__ieee754_rem_pio2+0x334>
 8019ec8:	ee10 2a10 	vmov	r2, s0
 8019ecc:	463b      	mov	r3, r7
 8019ece:	4630      	mov	r0, r6
 8019ed0:	4639      	mov	r1, r7
 8019ed2:	f7e6 f9d9 	bl	8000288 <__aeabi_dsub>
 8019ed6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019eda:	e9c4 0100 	strd	r0, r1, [r4]
 8019ede:	e6a1      	b.n	8019c24 <__ieee754_rem_pio2+0x24>
 8019ee0:	54400000 	.word	0x54400000
 8019ee4:	3ff921fb 	.word	0x3ff921fb
 8019ee8:	1a626331 	.word	0x1a626331
 8019eec:	3dd0b461 	.word	0x3dd0b461
 8019ef0:	1a600000 	.word	0x1a600000
 8019ef4:	3dd0b461 	.word	0x3dd0b461
 8019ef8:	2e037073 	.word	0x2e037073
 8019efc:	3ba3198a 	.word	0x3ba3198a
 8019f00:	6dc9c883 	.word	0x6dc9c883
 8019f04:	3fe45f30 	.word	0x3fe45f30
 8019f08:	2e000000 	.word	0x2e000000
 8019f0c:	3ba3198a 	.word	0x3ba3198a
 8019f10:	252049c1 	.word	0x252049c1
 8019f14:	397b839a 	.word	0x397b839a
 8019f18:	3fe921fb 	.word	0x3fe921fb
 8019f1c:	4002d97b 	.word	0x4002d97b
 8019f20:	3ff921fb 	.word	0x3ff921fb
 8019f24:	413921fb 	.word	0x413921fb
 8019f28:	3fe00000 	.word	0x3fe00000
 8019f2c:	0801b564 	.word	0x0801b564
 8019f30:	7fefffff 	.word	0x7fefffff
 8019f34:	ea4f 5528 	mov.w	r5, r8, asr #20
 8019f38:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8019f3c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8019f40:	4630      	mov	r0, r6
 8019f42:	460f      	mov	r7, r1
 8019f44:	f7e6 fe08 	bl	8000b58 <__aeabi_d2iz>
 8019f48:	f7e6 faec 	bl	8000524 <__aeabi_i2d>
 8019f4c:	4602      	mov	r2, r0
 8019f4e:	460b      	mov	r3, r1
 8019f50:	4630      	mov	r0, r6
 8019f52:	4639      	mov	r1, r7
 8019f54:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019f58:	f7e6 f996 	bl	8000288 <__aeabi_dsub>
 8019f5c:	2200      	movs	r2, #0
 8019f5e:	4b1f      	ldr	r3, [pc, #124]	; (8019fdc <__ieee754_rem_pio2+0x3dc>)
 8019f60:	f7e6 fb4a 	bl	80005f8 <__aeabi_dmul>
 8019f64:	460f      	mov	r7, r1
 8019f66:	4606      	mov	r6, r0
 8019f68:	f7e6 fdf6 	bl	8000b58 <__aeabi_d2iz>
 8019f6c:	f7e6 fada 	bl	8000524 <__aeabi_i2d>
 8019f70:	4602      	mov	r2, r0
 8019f72:	460b      	mov	r3, r1
 8019f74:	4630      	mov	r0, r6
 8019f76:	4639      	mov	r1, r7
 8019f78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8019f7c:	f7e6 f984 	bl	8000288 <__aeabi_dsub>
 8019f80:	2200      	movs	r2, #0
 8019f82:	4b16      	ldr	r3, [pc, #88]	; (8019fdc <__ieee754_rem_pio2+0x3dc>)
 8019f84:	f7e6 fb38 	bl	80005f8 <__aeabi_dmul>
 8019f88:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8019f8c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8019f90:	f04f 0803 	mov.w	r8, #3
 8019f94:	2600      	movs	r6, #0
 8019f96:	2700      	movs	r7, #0
 8019f98:	4632      	mov	r2, r6
 8019f9a:	463b      	mov	r3, r7
 8019f9c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8019fa0:	f108 3aff 	add.w	sl, r8, #4294967295
 8019fa4:	f7e6 fd90 	bl	8000ac8 <__aeabi_dcmpeq>
 8019fa8:	b9b0      	cbnz	r0, 8019fd8 <__ieee754_rem_pio2+0x3d8>
 8019faa:	4b0d      	ldr	r3, [pc, #52]	; (8019fe0 <__ieee754_rem_pio2+0x3e0>)
 8019fac:	9301      	str	r3, [sp, #4]
 8019fae:	2302      	movs	r3, #2
 8019fb0:	9300      	str	r3, [sp, #0]
 8019fb2:	462a      	mov	r2, r5
 8019fb4:	4643      	mov	r3, r8
 8019fb6:	4621      	mov	r1, r4
 8019fb8:	a806      	add	r0, sp, #24
 8019fba:	f000 f98d 	bl	801a2d8 <__kernel_rem_pio2>
 8019fbe:	9b04      	ldr	r3, [sp, #16]
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	4605      	mov	r5, r0
 8019fc4:	f6bf ae58 	bge.w	8019c78 <__ieee754_rem_pio2+0x78>
 8019fc8:	6863      	ldr	r3, [r4, #4]
 8019fca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019fce:	6063      	str	r3, [r4, #4]
 8019fd0:	68e3      	ldr	r3, [r4, #12]
 8019fd2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019fd6:	e746      	b.n	8019e66 <__ieee754_rem_pio2+0x266>
 8019fd8:	46d0      	mov	r8, sl
 8019fda:	e7dd      	b.n	8019f98 <__ieee754_rem_pio2+0x398>
 8019fdc:	41700000 	.word	0x41700000
 8019fe0:	0801b5e4 	.word	0x0801b5e4

08019fe4 <__ieee754_sqrt>:
 8019fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fe8:	4955      	ldr	r1, [pc, #340]	; (801a140 <__ieee754_sqrt+0x15c>)
 8019fea:	ec55 4b10 	vmov	r4, r5, d0
 8019fee:	43a9      	bics	r1, r5
 8019ff0:	462b      	mov	r3, r5
 8019ff2:	462a      	mov	r2, r5
 8019ff4:	d112      	bne.n	801a01c <__ieee754_sqrt+0x38>
 8019ff6:	ee10 2a10 	vmov	r2, s0
 8019ffa:	ee10 0a10 	vmov	r0, s0
 8019ffe:	4629      	mov	r1, r5
 801a000:	f7e6 fafa 	bl	80005f8 <__aeabi_dmul>
 801a004:	4602      	mov	r2, r0
 801a006:	460b      	mov	r3, r1
 801a008:	4620      	mov	r0, r4
 801a00a:	4629      	mov	r1, r5
 801a00c:	f7e6 f93e 	bl	800028c <__adddf3>
 801a010:	4604      	mov	r4, r0
 801a012:	460d      	mov	r5, r1
 801a014:	ec45 4b10 	vmov	d0, r4, r5
 801a018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a01c:	2d00      	cmp	r5, #0
 801a01e:	ee10 0a10 	vmov	r0, s0
 801a022:	4621      	mov	r1, r4
 801a024:	dc0f      	bgt.n	801a046 <__ieee754_sqrt+0x62>
 801a026:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a02a:	4330      	orrs	r0, r6
 801a02c:	d0f2      	beq.n	801a014 <__ieee754_sqrt+0x30>
 801a02e:	b155      	cbz	r5, 801a046 <__ieee754_sqrt+0x62>
 801a030:	ee10 2a10 	vmov	r2, s0
 801a034:	4620      	mov	r0, r4
 801a036:	4629      	mov	r1, r5
 801a038:	f7e6 f926 	bl	8000288 <__aeabi_dsub>
 801a03c:	4602      	mov	r2, r0
 801a03e:	460b      	mov	r3, r1
 801a040:	f7e6 fc04 	bl	800084c <__aeabi_ddiv>
 801a044:	e7e4      	b.n	801a010 <__ieee754_sqrt+0x2c>
 801a046:	151b      	asrs	r3, r3, #20
 801a048:	d073      	beq.n	801a132 <__ieee754_sqrt+0x14e>
 801a04a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a04e:	07dd      	lsls	r5, r3, #31
 801a050:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801a054:	bf48      	it	mi
 801a056:	0fc8      	lsrmi	r0, r1, #31
 801a058:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801a05c:	bf44      	itt	mi
 801a05e:	0049      	lslmi	r1, r1, #1
 801a060:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801a064:	2500      	movs	r5, #0
 801a066:	1058      	asrs	r0, r3, #1
 801a068:	0fcb      	lsrs	r3, r1, #31
 801a06a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801a06e:	0049      	lsls	r1, r1, #1
 801a070:	2316      	movs	r3, #22
 801a072:	462c      	mov	r4, r5
 801a074:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801a078:	19a7      	adds	r7, r4, r6
 801a07a:	4297      	cmp	r7, r2
 801a07c:	bfde      	ittt	le
 801a07e:	19bc      	addle	r4, r7, r6
 801a080:	1bd2      	suble	r2, r2, r7
 801a082:	19ad      	addle	r5, r5, r6
 801a084:	0fcf      	lsrs	r7, r1, #31
 801a086:	3b01      	subs	r3, #1
 801a088:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801a08c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a090:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801a094:	d1f0      	bne.n	801a078 <__ieee754_sqrt+0x94>
 801a096:	f04f 0c20 	mov.w	ip, #32
 801a09a:	469e      	mov	lr, r3
 801a09c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801a0a0:	42a2      	cmp	r2, r4
 801a0a2:	eb06 070e 	add.w	r7, r6, lr
 801a0a6:	dc02      	bgt.n	801a0ae <__ieee754_sqrt+0xca>
 801a0a8:	d112      	bne.n	801a0d0 <__ieee754_sqrt+0xec>
 801a0aa:	428f      	cmp	r7, r1
 801a0ac:	d810      	bhi.n	801a0d0 <__ieee754_sqrt+0xec>
 801a0ae:	2f00      	cmp	r7, #0
 801a0b0:	eb07 0e06 	add.w	lr, r7, r6
 801a0b4:	da42      	bge.n	801a13c <__ieee754_sqrt+0x158>
 801a0b6:	f1be 0f00 	cmp.w	lr, #0
 801a0ba:	db3f      	blt.n	801a13c <__ieee754_sqrt+0x158>
 801a0bc:	f104 0801 	add.w	r8, r4, #1
 801a0c0:	1b12      	subs	r2, r2, r4
 801a0c2:	428f      	cmp	r7, r1
 801a0c4:	bf88      	it	hi
 801a0c6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801a0ca:	1bc9      	subs	r1, r1, r7
 801a0cc:	4433      	add	r3, r6
 801a0ce:	4644      	mov	r4, r8
 801a0d0:	0052      	lsls	r2, r2, #1
 801a0d2:	f1bc 0c01 	subs.w	ip, ip, #1
 801a0d6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801a0da:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801a0de:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a0e2:	d1dd      	bne.n	801a0a0 <__ieee754_sqrt+0xbc>
 801a0e4:	430a      	orrs	r2, r1
 801a0e6:	d006      	beq.n	801a0f6 <__ieee754_sqrt+0x112>
 801a0e8:	1c5c      	adds	r4, r3, #1
 801a0ea:	bf13      	iteet	ne
 801a0ec:	3301      	addne	r3, #1
 801a0ee:	3501      	addeq	r5, #1
 801a0f0:	4663      	moveq	r3, ip
 801a0f2:	f023 0301 	bicne.w	r3, r3, #1
 801a0f6:	106a      	asrs	r2, r5, #1
 801a0f8:	085b      	lsrs	r3, r3, #1
 801a0fa:	07e9      	lsls	r1, r5, #31
 801a0fc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801a100:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801a104:	bf48      	it	mi
 801a106:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801a10a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801a10e:	461c      	mov	r4, r3
 801a110:	e780      	b.n	801a014 <__ieee754_sqrt+0x30>
 801a112:	0aca      	lsrs	r2, r1, #11
 801a114:	3815      	subs	r0, #21
 801a116:	0549      	lsls	r1, r1, #21
 801a118:	2a00      	cmp	r2, #0
 801a11a:	d0fa      	beq.n	801a112 <__ieee754_sqrt+0x12e>
 801a11c:	02d6      	lsls	r6, r2, #11
 801a11e:	d50a      	bpl.n	801a136 <__ieee754_sqrt+0x152>
 801a120:	f1c3 0420 	rsb	r4, r3, #32
 801a124:	fa21 f404 	lsr.w	r4, r1, r4
 801a128:	1e5d      	subs	r5, r3, #1
 801a12a:	4099      	lsls	r1, r3
 801a12c:	4322      	orrs	r2, r4
 801a12e:	1b43      	subs	r3, r0, r5
 801a130:	e78b      	b.n	801a04a <__ieee754_sqrt+0x66>
 801a132:	4618      	mov	r0, r3
 801a134:	e7f0      	b.n	801a118 <__ieee754_sqrt+0x134>
 801a136:	0052      	lsls	r2, r2, #1
 801a138:	3301      	adds	r3, #1
 801a13a:	e7ef      	b.n	801a11c <__ieee754_sqrt+0x138>
 801a13c:	46a0      	mov	r8, r4
 801a13e:	e7bf      	b.n	801a0c0 <__ieee754_sqrt+0xdc>
 801a140:	7ff00000 	.word	0x7ff00000
 801a144:	00000000 	.word	0x00000000

0801a148 <__kernel_cos>:
 801a148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a14c:	ec59 8b10 	vmov	r8, r9, d0
 801a150:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801a154:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 801a158:	ed2d 8b02 	vpush	{d8}
 801a15c:	eeb0 8a41 	vmov.f32	s16, s2
 801a160:	eef0 8a61 	vmov.f32	s17, s3
 801a164:	da07      	bge.n	801a176 <__kernel_cos+0x2e>
 801a166:	ee10 0a10 	vmov	r0, s0
 801a16a:	4649      	mov	r1, r9
 801a16c:	f7e6 fcf4 	bl	8000b58 <__aeabi_d2iz>
 801a170:	2800      	cmp	r0, #0
 801a172:	f000 8089 	beq.w	801a288 <__kernel_cos+0x140>
 801a176:	4642      	mov	r2, r8
 801a178:	464b      	mov	r3, r9
 801a17a:	4640      	mov	r0, r8
 801a17c:	4649      	mov	r1, r9
 801a17e:	f7e6 fa3b 	bl	80005f8 <__aeabi_dmul>
 801a182:	2200      	movs	r2, #0
 801a184:	4b4e      	ldr	r3, [pc, #312]	; (801a2c0 <__kernel_cos+0x178>)
 801a186:	4604      	mov	r4, r0
 801a188:	460d      	mov	r5, r1
 801a18a:	f7e6 fa35 	bl	80005f8 <__aeabi_dmul>
 801a18e:	a340      	add	r3, pc, #256	; (adr r3, 801a290 <__kernel_cos+0x148>)
 801a190:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a194:	4682      	mov	sl, r0
 801a196:	468b      	mov	fp, r1
 801a198:	4620      	mov	r0, r4
 801a19a:	4629      	mov	r1, r5
 801a19c:	f7e6 fa2c 	bl	80005f8 <__aeabi_dmul>
 801a1a0:	a33d      	add	r3, pc, #244	; (adr r3, 801a298 <__kernel_cos+0x150>)
 801a1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1a6:	f7e6 f871 	bl	800028c <__adddf3>
 801a1aa:	4622      	mov	r2, r4
 801a1ac:	462b      	mov	r3, r5
 801a1ae:	f7e6 fa23 	bl	80005f8 <__aeabi_dmul>
 801a1b2:	a33b      	add	r3, pc, #236	; (adr r3, 801a2a0 <__kernel_cos+0x158>)
 801a1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1b8:	f7e6 f866 	bl	8000288 <__aeabi_dsub>
 801a1bc:	4622      	mov	r2, r4
 801a1be:	462b      	mov	r3, r5
 801a1c0:	f7e6 fa1a 	bl	80005f8 <__aeabi_dmul>
 801a1c4:	a338      	add	r3, pc, #224	; (adr r3, 801a2a8 <__kernel_cos+0x160>)
 801a1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1ca:	f7e6 f85f 	bl	800028c <__adddf3>
 801a1ce:	4622      	mov	r2, r4
 801a1d0:	462b      	mov	r3, r5
 801a1d2:	f7e6 fa11 	bl	80005f8 <__aeabi_dmul>
 801a1d6:	a336      	add	r3, pc, #216	; (adr r3, 801a2b0 <__kernel_cos+0x168>)
 801a1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1dc:	f7e6 f854 	bl	8000288 <__aeabi_dsub>
 801a1e0:	4622      	mov	r2, r4
 801a1e2:	462b      	mov	r3, r5
 801a1e4:	f7e6 fa08 	bl	80005f8 <__aeabi_dmul>
 801a1e8:	a333      	add	r3, pc, #204	; (adr r3, 801a2b8 <__kernel_cos+0x170>)
 801a1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1ee:	f7e6 f84d 	bl	800028c <__adddf3>
 801a1f2:	4622      	mov	r2, r4
 801a1f4:	462b      	mov	r3, r5
 801a1f6:	f7e6 f9ff 	bl	80005f8 <__aeabi_dmul>
 801a1fa:	4622      	mov	r2, r4
 801a1fc:	462b      	mov	r3, r5
 801a1fe:	f7e6 f9fb 	bl	80005f8 <__aeabi_dmul>
 801a202:	ec53 2b18 	vmov	r2, r3, d8
 801a206:	4604      	mov	r4, r0
 801a208:	460d      	mov	r5, r1
 801a20a:	4640      	mov	r0, r8
 801a20c:	4649      	mov	r1, r9
 801a20e:	f7e6 f9f3 	bl	80005f8 <__aeabi_dmul>
 801a212:	460b      	mov	r3, r1
 801a214:	4602      	mov	r2, r0
 801a216:	4629      	mov	r1, r5
 801a218:	4620      	mov	r0, r4
 801a21a:	f7e6 f835 	bl	8000288 <__aeabi_dsub>
 801a21e:	4b29      	ldr	r3, [pc, #164]	; (801a2c4 <__kernel_cos+0x17c>)
 801a220:	429e      	cmp	r6, r3
 801a222:	4680      	mov	r8, r0
 801a224:	4689      	mov	r9, r1
 801a226:	dc11      	bgt.n	801a24c <__kernel_cos+0x104>
 801a228:	4602      	mov	r2, r0
 801a22a:	460b      	mov	r3, r1
 801a22c:	4650      	mov	r0, sl
 801a22e:	4659      	mov	r1, fp
 801a230:	f7e6 f82a 	bl	8000288 <__aeabi_dsub>
 801a234:	460b      	mov	r3, r1
 801a236:	4924      	ldr	r1, [pc, #144]	; (801a2c8 <__kernel_cos+0x180>)
 801a238:	4602      	mov	r2, r0
 801a23a:	2000      	movs	r0, #0
 801a23c:	f7e6 f824 	bl	8000288 <__aeabi_dsub>
 801a240:	ecbd 8b02 	vpop	{d8}
 801a244:	ec41 0b10 	vmov	d0, r0, r1
 801a248:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a24c:	4b1f      	ldr	r3, [pc, #124]	; (801a2cc <__kernel_cos+0x184>)
 801a24e:	491e      	ldr	r1, [pc, #120]	; (801a2c8 <__kernel_cos+0x180>)
 801a250:	429e      	cmp	r6, r3
 801a252:	bfcc      	ite	gt
 801a254:	4d1e      	ldrgt	r5, [pc, #120]	; (801a2d0 <__kernel_cos+0x188>)
 801a256:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801a25a:	2400      	movs	r4, #0
 801a25c:	4622      	mov	r2, r4
 801a25e:	462b      	mov	r3, r5
 801a260:	2000      	movs	r0, #0
 801a262:	f7e6 f811 	bl	8000288 <__aeabi_dsub>
 801a266:	4622      	mov	r2, r4
 801a268:	4606      	mov	r6, r0
 801a26a:	460f      	mov	r7, r1
 801a26c:	462b      	mov	r3, r5
 801a26e:	4650      	mov	r0, sl
 801a270:	4659      	mov	r1, fp
 801a272:	f7e6 f809 	bl	8000288 <__aeabi_dsub>
 801a276:	4642      	mov	r2, r8
 801a278:	464b      	mov	r3, r9
 801a27a:	f7e6 f805 	bl	8000288 <__aeabi_dsub>
 801a27e:	4602      	mov	r2, r0
 801a280:	460b      	mov	r3, r1
 801a282:	4630      	mov	r0, r6
 801a284:	4639      	mov	r1, r7
 801a286:	e7d9      	b.n	801a23c <__kernel_cos+0xf4>
 801a288:	2000      	movs	r0, #0
 801a28a:	490f      	ldr	r1, [pc, #60]	; (801a2c8 <__kernel_cos+0x180>)
 801a28c:	e7d8      	b.n	801a240 <__kernel_cos+0xf8>
 801a28e:	bf00      	nop
 801a290:	be8838d4 	.word	0xbe8838d4
 801a294:	bda8fae9 	.word	0xbda8fae9
 801a298:	bdb4b1c4 	.word	0xbdb4b1c4
 801a29c:	3e21ee9e 	.word	0x3e21ee9e
 801a2a0:	809c52ad 	.word	0x809c52ad
 801a2a4:	3e927e4f 	.word	0x3e927e4f
 801a2a8:	19cb1590 	.word	0x19cb1590
 801a2ac:	3efa01a0 	.word	0x3efa01a0
 801a2b0:	16c15177 	.word	0x16c15177
 801a2b4:	3f56c16c 	.word	0x3f56c16c
 801a2b8:	5555554c 	.word	0x5555554c
 801a2bc:	3fa55555 	.word	0x3fa55555
 801a2c0:	3fe00000 	.word	0x3fe00000
 801a2c4:	3fd33332 	.word	0x3fd33332
 801a2c8:	3ff00000 	.word	0x3ff00000
 801a2cc:	3fe90000 	.word	0x3fe90000
 801a2d0:	3fd20000 	.word	0x3fd20000
 801a2d4:	00000000 	.word	0x00000000

0801a2d8 <__kernel_rem_pio2>:
 801a2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2dc:	ed2d 8b02 	vpush	{d8}
 801a2e0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801a2e4:	1ed4      	subs	r4, r2, #3
 801a2e6:	9308      	str	r3, [sp, #32]
 801a2e8:	9101      	str	r1, [sp, #4]
 801a2ea:	4bc5      	ldr	r3, [pc, #788]	; (801a600 <__kernel_rem_pio2+0x328>)
 801a2ec:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801a2ee:	9009      	str	r0, [sp, #36]	; 0x24
 801a2f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a2f4:	9304      	str	r3, [sp, #16]
 801a2f6:	9b08      	ldr	r3, [sp, #32]
 801a2f8:	3b01      	subs	r3, #1
 801a2fa:	9307      	str	r3, [sp, #28]
 801a2fc:	2318      	movs	r3, #24
 801a2fe:	fb94 f4f3 	sdiv	r4, r4, r3
 801a302:	f06f 0317 	mvn.w	r3, #23
 801a306:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801a30a:	fb04 3303 	mla	r3, r4, r3, r3
 801a30e:	eb03 0a02 	add.w	sl, r3, r2
 801a312:	9b04      	ldr	r3, [sp, #16]
 801a314:	9a07      	ldr	r2, [sp, #28]
 801a316:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801a5f0 <__kernel_rem_pio2+0x318>
 801a31a:	eb03 0802 	add.w	r8, r3, r2
 801a31e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a320:	1aa7      	subs	r7, r4, r2
 801a322:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801a326:	ae22      	add	r6, sp, #136	; 0x88
 801a328:	2500      	movs	r5, #0
 801a32a:	4545      	cmp	r5, r8
 801a32c:	dd13      	ble.n	801a356 <__kernel_rem_pio2+0x7e>
 801a32e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 801a5f0 <__kernel_rem_pio2+0x318>
 801a332:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801a336:	2600      	movs	r6, #0
 801a338:	9b04      	ldr	r3, [sp, #16]
 801a33a:	429e      	cmp	r6, r3
 801a33c:	dc32      	bgt.n	801a3a4 <__kernel_rem_pio2+0xcc>
 801a33e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a340:	9302      	str	r3, [sp, #8]
 801a342:	9b08      	ldr	r3, [sp, #32]
 801a344:	199d      	adds	r5, r3, r6
 801a346:	ab22      	add	r3, sp, #136	; 0x88
 801a348:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a34c:	9306      	str	r3, [sp, #24]
 801a34e:	ec59 8b18 	vmov	r8, r9, d8
 801a352:	2700      	movs	r7, #0
 801a354:	e01f      	b.n	801a396 <__kernel_rem_pio2+0xbe>
 801a356:	42ef      	cmn	r7, r5
 801a358:	d407      	bmi.n	801a36a <__kernel_rem_pio2+0x92>
 801a35a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801a35e:	f7e6 f8e1 	bl	8000524 <__aeabi_i2d>
 801a362:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a366:	3501      	adds	r5, #1
 801a368:	e7df      	b.n	801a32a <__kernel_rem_pio2+0x52>
 801a36a:	ec51 0b18 	vmov	r0, r1, d8
 801a36e:	e7f8      	b.n	801a362 <__kernel_rem_pio2+0x8a>
 801a370:	9906      	ldr	r1, [sp, #24]
 801a372:	9d02      	ldr	r5, [sp, #8]
 801a374:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 801a378:	9106      	str	r1, [sp, #24]
 801a37a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801a37e:	9502      	str	r5, [sp, #8]
 801a380:	f7e6 f93a 	bl	80005f8 <__aeabi_dmul>
 801a384:	4602      	mov	r2, r0
 801a386:	460b      	mov	r3, r1
 801a388:	4640      	mov	r0, r8
 801a38a:	4649      	mov	r1, r9
 801a38c:	f7e5 ff7e 	bl	800028c <__adddf3>
 801a390:	3701      	adds	r7, #1
 801a392:	4680      	mov	r8, r0
 801a394:	4689      	mov	r9, r1
 801a396:	9b07      	ldr	r3, [sp, #28]
 801a398:	429f      	cmp	r7, r3
 801a39a:	dde9      	ble.n	801a370 <__kernel_rem_pio2+0x98>
 801a39c:	e8eb 8902 	strd	r8, r9, [fp], #8
 801a3a0:	3601      	adds	r6, #1
 801a3a2:	e7c9      	b.n	801a338 <__kernel_rem_pio2+0x60>
 801a3a4:	9b04      	ldr	r3, [sp, #16]
 801a3a6:	aa0e      	add	r2, sp, #56	; 0x38
 801a3a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a3ac:	930c      	str	r3, [sp, #48]	; 0x30
 801a3ae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a3b0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a3b4:	9c04      	ldr	r4, [sp, #16]
 801a3b6:	930b      	str	r3, [sp, #44]	; 0x2c
 801a3b8:	ab9a      	add	r3, sp, #616	; 0x268
 801a3ba:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801a3be:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a3c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a3c6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801a3ca:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801a3ce:	ab9a      	add	r3, sp, #616	; 0x268
 801a3d0:	445b      	add	r3, fp
 801a3d2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801a3d6:	2500      	movs	r5, #0
 801a3d8:	1b63      	subs	r3, r4, r5
 801a3da:	2b00      	cmp	r3, #0
 801a3dc:	dc78      	bgt.n	801a4d0 <__kernel_rem_pio2+0x1f8>
 801a3de:	4650      	mov	r0, sl
 801a3e0:	ec49 8b10 	vmov	d0, r8, r9
 801a3e4:	f000 fda8 	bl	801af38 <scalbn>
 801a3e8:	ec57 6b10 	vmov	r6, r7, d0
 801a3ec:	2200      	movs	r2, #0
 801a3ee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801a3f2:	ee10 0a10 	vmov	r0, s0
 801a3f6:	4639      	mov	r1, r7
 801a3f8:	f7e6 f8fe 	bl	80005f8 <__aeabi_dmul>
 801a3fc:	ec41 0b10 	vmov	d0, r0, r1
 801a400:	f000 fd12 	bl	801ae28 <floor>
 801a404:	2200      	movs	r2, #0
 801a406:	ec51 0b10 	vmov	r0, r1, d0
 801a40a:	4b7e      	ldr	r3, [pc, #504]	; (801a604 <__kernel_rem_pio2+0x32c>)
 801a40c:	f7e6 f8f4 	bl	80005f8 <__aeabi_dmul>
 801a410:	4602      	mov	r2, r0
 801a412:	460b      	mov	r3, r1
 801a414:	4630      	mov	r0, r6
 801a416:	4639      	mov	r1, r7
 801a418:	f7e5 ff36 	bl	8000288 <__aeabi_dsub>
 801a41c:	460f      	mov	r7, r1
 801a41e:	4606      	mov	r6, r0
 801a420:	f7e6 fb9a 	bl	8000b58 <__aeabi_d2iz>
 801a424:	9006      	str	r0, [sp, #24]
 801a426:	f7e6 f87d 	bl	8000524 <__aeabi_i2d>
 801a42a:	4602      	mov	r2, r0
 801a42c:	460b      	mov	r3, r1
 801a42e:	4630      	mov	r0, r6
 801a430:	4639      	mov	r1, r7
 801a432:	f7e5 ff29 	bl	8000288 <__aeabi_dsub>
 801a436:	f1ba 0f00 	cmp.w	sl, #0
 801a43a:	4606      	mov	r6, r0
 801a43c:	460f      	mov	r7, r1
 801a43e:	dd6c      	ble.n	801a51a <__kernel_rem_pio2+0x242>
 801a440:	1e62      	subs	r2, r4, #1
 801a442:	ab0e      	add	r3, sp, #56	; 0x38
 801a444:	f1ca 0118 	rsb	r1, sl, #24
 801a448:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a44c:	9d06      	ldr	r5, [sp, #24]
 801a44e:	fa40 f301 	asr.w	r3, r0, r1
 801a452:	441d      	add	r5, r3
 801a454:	408b      	lsls	r3, r1
 801a456:	1ac0      	subs	r0, r0, r3
 801a458:	ab0e      	add	r3, sp, #56	; 0x38
 801a45a:	9506      	str	r5, [sp, #24]
 801a45c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801a460:	f1ca 0317 	rsb	r3, sl, #23
 801a464:	fa40 f303 	asr.w	r3, r0, r3
 801a468:	9302      	str	r3, [sp, #8]
 801a46a:	9b02      	ldr	r3, [sp, #8]
 801a46c:	2b00      	cmp	r3, #0
 801a46e:	dd62      	ble.n	801a536 <__kernel_rem_pio2+0x25e>
 801a470:	9b06      	ldr	r3, [sp, #24]
 801a472:	2200      	movs	r2, #0
 801a474:	3301      	adds	r3, #1
 801a476:	9306      	str	r3, [sp, #24]
 801a478:	4615      	mov	r5, r2
 801a47a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801a47e:	4294      	cmp	r4, r2
 801a480:	f300 8095 	bgt.w	801a5ae <__kernel_rem_pio2+0x2d6>
 801a484:	f1ba 0f00 	cmp.w	sl, #0
 801a488:	dd07      	ble.n	801a49a <__kernel_rem_pio2+0x1c2>
 801a48a:	f1ba 0f01 	cmp.w	sl, #1
 801a48e:	f000 80a2 	beq.w	801a5d6 <__kernel_rem_pio2+0x2fe>
 801a492:	f1ba 0f02 	cmp.w	sl, #2
 801a496:	f000 80c1 	beq.w	801a61c <__kernel_rem_pio2+0x344>
 801a49a:	9b02      	ldr	r3, [sp, #8]
 801a49c:	2b02      	cmp	r3, #2
 801a49e:	d14a      	bne.n	801a536 <__kernel_rem_pio2+0x25e>
 801a4a0:	4632      	mov	r2, r6
 801a4a2:	463b      	mov	r3, r7
 801a4a4:	2000      	movs	r0, #0
 801a4a6:	4958      	ldr	r1, [pc, #352]	; (801a608 <__kernel_rem_pio2+0x330>)
 801a4a8:	f7e5 feee 	bl	8000288 <__aeabi_dsub>
 801a4ac:	4606      	mov	r6, r0
 801a4ae:	460f      	mov	r7, r1
 801a4b0:	2d00      	cmp	r5, #0
 801a4b2:	d040      	beq.n	801a536 <__kernel_rem_pio2+0x25e>
 801a4b4:	4650      	mov	r0, sl
 801a4b6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801a5f8 <__kernel_rem_pio2+0x320>
 801a4ba:	f000 fd3d 	bl	801af38 <scalbn>
 801a4be:	4630      	mov	r0, r6
 801a4c0:	4639      	mov	r1, r7
 801a4c2:	ec53 2b10 	vmov	r2, r3, d0
 801a4c6:	f7e5 fedf 	bl	8000288 <__aeabi_dsub>
 801a4ca:	4606      	mov	r6, r0
 801a4cc:	460f      	mov	r7, r1
 801a4ce:	e032      	b.n	801a536 <__kernel_rem_pio2+0x25e>
 801a4d0:	2200      	movs	r2, #0
 801a4d2:	4b4e      	ldr	r3, [pc, #312]	; (801a60c <__kernel_rem_pio2+0x334>)
 801a4d4:	4640      	mov	r0, r8
 801a4d6:	4649      	mov	r1, r9
 801a4d8:	f7e6 f88e 	bl	80005f8 <__aeabi_dmul>
 801a4dc:	f7e6 fb3c 	bl	8000b58 <__aeabi_d2iz>
 801a4e0:	f7e6 f820 	bl	8000524 <__aeabi_i2d>
 801a4e4:	2200      	movs	r2, #0
 801a4e6:	4b4a      	ldr	r3, [pc, #296]	; (801a610 <__kernel_rem_pio2+0x338>)
 801a4e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a4ec:	f7e6 f884 	bl	80005f8 <__aeabi_dmul>
 801a4f0:	4602      	mov	r2, r0
 801a4f2:	460b      	mov	r3, r1
 801a4f4:	4640      	mov	r0, r8
 801a4f6:	4649      	mov	r1, r9
 801a4f8:	f7e5 fec6 	bl	8000288 <__aeabi_dsub>
 801a4fc:	f7e6 fb2c 	bl	8000b58 <__aeabi_d2iz>
 801a500:	ab0e      	add	r3, sp, #56	; 0x38
 801a502:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801a506:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801a50a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a50e:	f7e5 febd 	bl	800028c <__adddf3>
 801a512:	3501      	adds	r5, #1
 801a514:	4680      	mov	r8, r0
 801a516:	4689      	mov	r9, r1
 801a518:	e75e      	b.n	801a3d8 <__kernel_rem_pio2+0x100>
 801a51a:	d105      	bne.n	801a528 <__kernel_rem_pio2+0x250>
 801a51c:	1e63      	subs	r3, r4, #1
 801a51e:	aa0e      	add	r2, sp, #56	; 0x38
 801a520:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a524:	15c3      	asrs	r3, r0, #23
 801a526:	e79f      	b.n	801a468 <__kernel_rem_pio2+0x190>
 801a528:	2200      	movs	r2, #0
 801a52a:	4b3a      	ldr	r3, [pc, #232]	; (801a614 <__kernel_rem_pio2+0x33c>)
 801a52c:	f7e6 faea 	bl	8000b04 <__aeabi_dcmpge>
 801a530:	2800      	cmp	r0, #0
 801a532:	d139      	bne.n	801a5a8 <__kernel_rem_pio2+0x2d0>
 801a534:	9002      	str	r0, [sp, #8]
 801a536:	2200      	movs	r2, #0
 801a538:	2300      	movs	r3, #0
 801a53a:	4630      	mov	r0, r6
 801a53c:	4639      	mov	r1, r7
 801a53e:	f7e6 fac3 	bl	8000ac8 <__aeabi_dcmpeq>
 801a542:	2800      	cmp	r0, #0
 801a544:	f000 80c7 	beq.w	801a6d6 <__kernel_rem_pio2+0x3fe>
 801a548:	1e65      	subs	r5, r4, #1
 801a54a:	462b      	mov	r3, r5
 801a54c:	2200      	movs	r2, #0
 801a54e:	9904      	ldr	r1, [sp, #16]
 801a550:	428b      	cmp	r3, r1
 801a552:	da6a      	bge.n	801a62a <__kernel_rem_pio2+0x352>
 801a554:	2a00      	cmp	r2, #0
 801a556:	f000 8088 	beq.w	801a66a <__kernel_rem_pio2+0x392>
 801a55a:	ab0e      	add	r3, sp, #56	; 0x38
 801a55c:	f1aa 0a18 	sub.w	sl, sl, #24
 801a560:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801a564:	2b00      	cmp	r3, #0
 801a566:	f000 80b4 	beq.w	801a6d2 <__kernel_rem_pio2+0x3fa>
 801a56a:	4650      	mov	r0, sl
 801a56c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 801a5f8 <__kernel_rem_pio2+0x320>
 801a570:	f000 fce2 	bl	801af38 <scalbn>
 801a574:	00ec      	lsls	r4, r5, #3
 801a576:	ab72      	add	r3, sp, #456	; 0x1c8
 801a578:	191e      	adds	r6, r3, r4
 801a57a:	ec59 8b10 	vmov	r8, r9, d0
 801a57e:	f106 0a08 	add.w	sl, r6, #8
 801a582:	462f      	mov	r7, r5
 801a584:	2f00      	cmp	r7, #0
 801a586:	f280 80df 	bge.w	801a748 <__kernel_rem_pio2+0x470>
 801a58a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 801a5f0 <__kernel_rem_pio2+0x318>
 801a58e:	f04f 0a00 	mov.w	sl, #0
 801a592:	eba5 030a 	sub.w	r3, r5, sl
 801a596:	2b00      	cmp	r3, #0
 801a598:	f2c0 810a 	blt.w	801a7b0 <__kernel_rem_pio2+0x4d8>
 801a59c:	f8df b078 	ldr.w	fp, [pc, #120]	; 801a618 <__kernel_rem_pio2+0x340>
 801a5a0:	ec59 8b18 	vmov	r8, r9, d8
 801a5a4:	2700      	movs	r7, #0
 801a5a6:	e0f5      	b.n	801a794 <__kernel_rem_pio2+0x4bc>
 801a5a8:	2302      	movs	r3, #2
 801a5aa:	9302      	str	r3, [sp, #8]
 801a5ac:	e760      	b.n	801a470 <__kernel_rem_pio2+0x198>
 801a5ae:	ab0e      	add	r3, sp, #56	; 0x38
 801a5b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a5b4:	b94d      	cbnz	r5, 801a5ca <__kernel_rem_pio2+0x2f2>
 801a5b6:	b12b      	cbz	r3, 801a5c4 <__kernel_rem_pio2+0x2ec>
 801a5b8:	a80e      	add	r0, sp, #56	; 0x38
 801a5ba:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801a5be:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a5c2:	2301      	movs	r3, #1
 801a5c4:	3201      	adds	r2, #1
 801a5c6:	461d      	mov	r5, r3
 801a5c8:	e759      	b.n	801a47e <__kernel_rem_pio2+0x1a6>
 801a5ca:	a80e      	add	r0, sp, #56	; 0x38
 801a5cc:	1acb      	subs	r3, r1, r3
 801a5ce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a5d2:	462b      	mov	r3, r5
 801a5d4:	e7f6      	b.n	801a5c4 <__kernel_rem_pio2+0x2ec>
 801a5d6:	1e62      	subs	r2, r4, #1
 801a5d8:	ab0e      	add	r3, sp, #56	; 0x38
 801a5da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a5de:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801a5e2:	a90e      	add	r1, sp, #56	; 0x38
 801a5e4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801a5e8:	e757      	b.n	801a49a <__kernel_rem_pio2+0x1c2>
 801a5ea:	bf00      	nop
 801a5ec:	f3af 8000 	nop.w
	...
 801a5fc:	3ff00000 	.word	0x3ff00000
 801a600:	0801b730 	.word	0x0801b730
 801a604:	40200000 	.word	0x40200000
 801a608:	3ff00000 	.word	0x3ff00000
 801a60c:	3e700000 	.word	0x3e700000
 801a610:	41700000 	.word	0x41700000
 801a614:	3fe00000 	.word	0x3fe00000
 801a618:	0801b6f0 	.word	0x0801b6f0
 801a61c:	1e62      	subs	r2, r4, #1
 801a61e:	ab0e      	add	r3, sp, #56	; 0x38
 801a620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a624:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a628:	e7db      	b.n	801a5e2 <__kernel_rem_pio2+0x30a>
 801a62a:	a90e      	add	r1, sp, #56	; 0x38
 801a62c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801a630:	3b01      	subs	r3, #1
 801a632:	430a      	orrs	r2, r1
 801a634:	e78b      	b.n	801a54e <__kernel_rem_pio2+0x276>
 801a636:	3301      	adds	r3, #1
 801a638:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801a63c:	2900      	cmp	r1, #0
 801a63e:	d0fa      	beq.n	801a636 <__kernel_rem_pio2+0x35e>
 801a640:	9a08      	ldr	r2, [sp, #32]
 801a642:	4422      	add	r2, r4
 801a644:	00d2      	lsls	r2, r2, #3
 801a646:	a922      	add	r1, sp, #136	; 0x88
 801a648:	18e3      	adds	r3, r4, r3
 801a64a:	9206      	str	r2, [sp, #24]
 801a64c:	440a      	add	r2, r1
 801a64e:	9302      	str	r3, [sp, #8]
 801a650:	f10b 0108 	add.w	r1, fp, #8
 801a654:	f102 0308 	add.w	r3, r2, #8
 801a658:	1c66      	adds	r6, r4, #1
 801a65a:	910a      	str	r1, [sp, #40]	; 0x28
 801a65c:	2500      	movs	r5, #0
 801a65e:	930d      	str	r3, [sp, #52]	; 0x34
 801a660:	9b02      	ldr	r3, [sp, #8]
 801a662:	42b3      	cmp	r3, r6
 801a664:	da04      	bge.n	801a670 <__kernel_rem_pio2+0x398>
 801a666:	461c      	mov	r4, r3
 801a668:	e6a6      	b.n	801a3b8 <__kernel_rem_pio2+0xe0>
 801a66a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a66c:	2301      	movs	r3, #1
 801a66e:	e7e3      	b.n	801a638 <__kernel_rem_pio2+0x360>
 801a670:	9b06      	ldr	r3, [sp, #24]
 801a672:	18ef      	adds	r7, r5, r3
 801a674:	ab22      	add	r3, sp, #136	; 0x88
 801a676:	441f      	add	r7, r3
 801a678:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a67a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801a67e:	f7e5 ff51 	bl	8000524 <__aeabi_i2d>
 801a682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a684:	461c      	mov	r4, r3
 801a686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a688:	e9c7 0100 	strd	r0, r1, [r7]
 801a68c:	eb03 0b05 	add.w	fp, r3, r5
 801a690:	2700      	movs	r7, #0
 801a692:	f04f 0800 	mov.w	r8, #0
 801a696:	f04f 0900 	mov.w	r9, #0
 801a69a:	9b07      	ldr	r3, [sp, #28]
 801a69c:	429f      	cmp	r7, r3
 801a69e:	dd08      	ble.n	801a6b2 <__kernel_rem_pio2+0x3da>
 801a6a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a6a2:	aa72      	add	r2, sp, #456	; 0x1c8
 801a6a4:	18eb      	adds	r3, r5, r3
 801a6a6:	4413      	add	r3, r2
 801a6a8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801a6ac:	3601      	adds	r6, #1
 801a6ae:	3508      	adds	r5, #8
 801a6b0:	e7d6      	b.n	801a660 <__kernel_rem_pio2+0x388>
 801a6b2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801a6b6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801a6ba:	f7e5 ff9d 	bl	80005f8 <__aeabi_dmul>
 801a6be:	4602      	mov	r2, r0
 801a6c0:	460b      	mov	r3, r1
 801a6c2:	4640      	mov	r0, r8
 801a6c4:	4649      	mov	r1, r9
 801a6c6:	f7e5 fde1 	bl	800028c <__adddf3>
 801a6ca:	3701      	adds	r7, #1
 801a6cc:	4680      	mov	r8, r0
 801a6ce:	4689      	mov	r9, r1
 801a6d0:	e7e3      	b.n	801a69a <__kernel_rem_pio2+0x3c2>
 801a6d2:	3d01      	subs	r5, #1
 801a6d4:	e741      	b.n	801a55a <__kernel_rem_pio2+0x282>
 801a6d6:	f1ca 0000 	rsb	r0, sl, #0
 801a6da:	ec47 6b10 	vmov	d0, r6, r7
 801a6de:	f000 fc2b 	bl	801af38 <scalbn>
 801a6e2:	ec57 6b10 	vmov	r6, r7, d0
 801a6e6:	2200      	movs	r2, #0
 801a6e8:	4b99      	ldr	r3, [pc, #612]	; (801a950 <__kernel_rem_pio2+0x678>)
 801a6ea:	ee10 0a10 	vmov	r0, s0
 801a6ee:	4639      	mov	r1, r7
 801a6f0:	f7e6 fa08 	bl	8000b04 <__aeabi_dcmpge>
 801a6f4:	b1f8      	cbz	r0, 801a736 <__kernel_rem_pio2+0x45e>
 801a6f6:	2200      	movs	r2, #0
 801a6f8:	4b96      	ldr	r3, [pc, #600]	; (801a954 <__kernel_rem_pio2+0x67c>)
 801a6fa:	4630      	mov	r0, r6
 801a6fc:	4639      	mov	r1, r7
 801a6fe:	f7e5 ff7b 	bl	80005f8 <__aeabi_dmul>
 801a702:	f7e6 fa29 	bl	8000b58 <__aeabi_d2iz>
 801a706:	4680      	mov	r8, r0
 801a708:	f7e5 ff0c 	bl	8000524 <__aeabi_i2d>
 801a70c:	2200      	movs	r2, #0
 801a70e:	4b90      	ldr	r3, [pc, #576]	; (801a950 <__kernel_rem_pio2+0x678>)
 801a710:	f7e5 ff72 	bl	80005f8 <__aeabi_dmul>
 801a714:	460b      	mov	r3, r1
 801a716:	4602      	mov	r2, r0
 801a718:	4639      	mov	r1, r7
 801a71a:	4630      	mov	r0, r6
 801a71c:	f7e5 fdb4 	bl	8000288 <__aeabi_dsub>
 801a720:	f7e6 fa1a 	bl	8000b58 <__aeabi_d2iz>
 801a724:	1c65      	adds	r5, r4, #1
 801a726:	ab0e      	add	r3, sp, #56	; 0x38
 801a728:	f10a 0a18 	add.w	sl, sl, #24
 801a72c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a730:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801a734:	e719      	b.n	801a56a <__kernel_rem_pio2+0x292>
 801a736:	4630      	mov	r0, r6
 801a738:	4639      	mov	r1, r7
 801a73a:	f7e6 fa0d 	bl	8000b58 <__aeabi_d2iz>
 801a73e:	ab0e      	add	r3, sp, #56	; 0x38
 801a740:	4625      	mov	r5, r4
 801a742:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a746:	e710      	b.n	801a56a <__kernel_rem_pio2+0x292>
 801a748:	ab0e      	add	r3, sp, #56	; 0x38
 801a74a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801a74e:	f7e5 fee9 	bl	8000524 <__aeabi_i2d>
 801a752:	4642      	mov	r2, r8
 801a754:	464b      	mov	r3, r9
 801a756:	f7e5 ff4f 	bl	80005f8 <__aeabi_dmul>
 801a75a:	2200      	movs	r2, #0
 801a75c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801a760:	4b7c      	ldr	r3, [pc, #496]	; (801a954 <__kernel_rem_pio2+0x67c>)
 801a762:	4640      	mov	r0, r8
 801a764:	4649      	mov	r1, r9
 801a766:	f7e5 ff47 	bl	80005f8 <__aeabi_dmul>
 801a76a:	3f01      	subs	r7, #1
 801a76c:	4680      	mov	r8, r0
 801a76e:	4689      	mov	r9, r1
 801a770:	e708      	b.n	801a584 <__kernel_rem_pio2+0x2ac>
 801a772:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801a776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a77a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801a77e:	f7e5 ff3b 	bl	80005f8 <__aeabi_dmul>
 801a782:	4602      	mov	r2, r0
 801a784:	460b      	mov	r3, r1
 801a786:	4640      	mov	r0, r8
 801a788:	4649      	mov	r1, r9
 801a78a:	f7e5 fd7f 	bl	800028c <__adddf3>
 801a78e:	3701      	adds	r7, #1
 801a790:	4680      	mov	r8, r0
 801a792:	4689      	mov	r9, r1
 801a794:	9b04      	ldr	r3, [sp, #16]
 801a796:	429f      	cmp	r7, r3
 801a798:	dc01      	bgt.n	801a79e <__kernel_rem_pio2+0x4c6>
 801a79a:	45ba      	cmp	sl, r7
 801a79c:	dae9      	bge.n	801a772 <__kernel_rem_pio2+0x49a>
 801a79e:	ab4a      	add	r3, sp, #296	; 0x128
 801a7a0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a7a4:	e9c3 8900 	strd	r8, r9, [r3]
 801a7a8:	f10a 0a01 	add.w	sl, sl, #1
 801a7ac:	3e08      	subs	r6, #8
 801a7ae:	e6f0      	b.n	801a592 <__kernel_rem_pio2+0x2ba>
 801a7b0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801a7b2:	2b03      	cmp	r3, #3
 801a7b4:	d85b      	bhi.n	801a86e <__kernel_rem_pio2+0x596>
 801a7b6:	e8df f003 	tbb	[pc, r3]
 801a7ba:	264a      	.short	0x264a
 801a7bc:	0226      	.short	0x0226
 801a7be:	ab9a      	add	r3, sp, #616	; 0x268
 801a7c0:	441c      	add	r4, r3
 801a7c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801a7c6:	46a2      	mov	sl, r4
 801a7c8:	46ab      	mov	fp, r5
 801a7ca:	f1bb 0f00 	cmp.w	fp, #0
 801a7ce:	dc6c      	bgt.n	801a8aa <__kernel_rem_pio2+0x5d2>
 801a7d0:	46a2      	mov	sl, r4
 801a7d2:	46ab      	mov	fp, r5
 801a7d4:	f1bb 0f01 	cmp.w	fp, #1
 801a7d8:	f300 8086 	bgt.w	801a8e8 <__kernel_rem_pio2+0x610>
 801a7dc:	2000      	movs	r0, #0
 801a7de:	2100      	movs	r1, #0
 801a7e0:	2d01      	cmp	r5, #1
 801a7e2:	f300 80a0 	bgt.w	801a926 <__kernel_rem_pio2+0x64e>
 801a7e6:	9b02      	ldr	r3, [sp, #8]
 801a7e8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801a7ec:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 801a7f0:	2b00      	cmp	r3, #0
 801a7f2:	f040 809e 	bne.w	801a932 <__kernel_rem_pio2+0x65a>
 801a7f6:	9b01      	ldr	r3, [sp, #4]
 801a7f8:	e9c3 7800 	strd	r7, r8, [r3]
 801a7fc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801a800:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801a804:	e033      	b.n	801a86e <__kernel_rem_pio2+0x596>
 801a806:	3408      	adds	r4, #8
 801a808:	ab4a      	add	r3, sp, #296	; 0x128
 801a80a:	441c      	add	r4, r3
 801a80c:	462e      	mov	r6, r5
 801a80e:	2000      	movs	r0, #0
 801a810:	2100      	movs	r1, #0
 801a812:	2e00      	cmp	r6, #0
 801a814:	da3a      	bge.n	801a88c <__kernel_rem_pio2+0x5b4>
 801a816:	9b02      	ldr	r3, [sp, #8]
 801a818:	2b00      	cmp	r3, #0
 801a81a:	d03d      	beq.n	801a898 <__kernel_rem_pio2+0x5c0>
 801a81c:	4602      	mov	r2, r0
 801a81e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a822:	9c01      	ldr	r4, [sp, #4]
 801a824:	e9c4 2300 	strd	r2, r3, [r4]
 801a828:	4602      	mov	r2, r0
 801a82a:	460b      	mov	r3, r1
 801a82c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801a830:	f7e5 fd2a 	bl	8000288 <__aeabi_dsub>
 801a834:	ae4c      	add	r6, sp, #304	; 0x130
 801a836:	2401      	movs	r4, #1
 801a838:	42a5      	cmp	r5, r4
 801a83a:	da30      	bge.n	801a89e <__kernel_rem_pio2+0x5c6>
 801a83c:	9b02      	ldr	r3, [sp, #8]
 801a83e:	b113      	cbz	r3, 801a846 <__kernel_rem_pio2+0x56e>
 801a840:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a844:	4619      	mov	r1, r3
 801a846:	9b01      	ldr	r3, [sp, #4]
 801a848:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801a84c:	e00f      	b.n	801a86e <__kernel_rem_pio2+0x596>
 801a84e:	ab9a      	add	r3, sp, #616	; 0x268
 801a850:	441c      	add	r4, r3
 801a852:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801a856:	2000      	movs	r0, #0
 801a858:	2100      	movs	r1, #0
 801a85a:	2d00      	cmp	r5, #0
 801a85c:	da10      	bge.n	801a880 <__kernel_rem_pio2+0x5a8>
 801a85e:	9b02      	ldr	r3, [sp, #8]
 801a860:	b113      	cbz	r3, 801a868 <__kernel_rem_pio2+0x590>
 801a862:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a866:	4619      	mov	r1, r3
 801a868:	9b01      	ldr	r3, [sp, #4]
 801a86a:	e9c3 0100 	strd	r0, r1, [r3]
 801a86e:	9b06      	ldr	r3, [sp, #24]
 801a870:	f003 0007 	and.w	r0, r3, #7
 801a874:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801a878:	ecbd 8b02 	vpop	{d8}
 801a87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a880:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a884:	f7e5 fd02 	bl	800028c <__adddf3>
 801a888:	3d01      	subs	r5, #1
 801a88a:	e7e6      	b.n	801a85a <__kernel_rem_pio2+0x582>
 801a88c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a890:	f7e5 fcfc 	bl	800028c <__adddf3>
 801a894:	3e01      	subs	r6, #1
 801a896:	e7bc      	b.n	801a812 <__kernel_rem_pio2+0x53a>
 801a898:	4602      	mov	r2, r0
 801a89a:	460b      	mov	r3, r1
 801a89c:	e7c1      	b.n	801a822 <__kernel_rem_pio2+0x54a>
 801a89e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801a8a2:	f7e5 fcf3 	bl	800028c <__adddf3>
 801a8a6:	3401      	adds	r4, #1
 801a8a8:	e7c6      	b.n	801a838 <__kernel_rem_pio2+0x560>
 801a8aa:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801a8ae:	ed3a 7b02 	vldmdb	sl!, {d7}
 801a8b2:	4640      	mov	r0, r8
 801a8b4:	ec53 2b17 	vmov	r2, r3, d7
 801a8b8:	4649      	mov	r1, r9
 801a8ba:	ed8d 7b04 	vstr	d7, [sp, #16]
 801a8be:	f7e5 fce5 	bl	800028c <__adddf3>
 801a8c2:	4602      	mov	r2, r0
 801a8c4:	460b      	mov	r3, r1
 801a8c6:	4606      	mov	r6, r0
 801a8c8:	460f      	mov	r7, r1
 801a8ca:	4640      	mov	r0, r8
 801a8cc:	4649      	mov	r1, r9
 801a8ce:	f7e5 fcdb 	bl	8000288 <__aeabi_dsub>
 801a8d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a8d6:	f7e5 fcd9 	bl	800028c <__adddf3>
 801a8da:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a8de:	e9ca 0100 	strd	r0, r1, [sl]
 801a8e2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801a8e6:	e770      	b.n	801a7ca <__kernel_rem_pio2+0x4f2>
 801a8e8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801a8ec:	ed3a 7b02 	vldmdb	sl!, {d7}
 801a8f0:	4630      	mov	r0, r6
 801a8f2:	ec53 2b17 	vmov	r2, r3, d7
 801a8f6:	4639      	mov	r1, r7
 801a8f8:	ed8d 7b04 	vstr	d7, [sp, #16]
 801a8fc:	f7e5 fcc6 	bl	800028c <__adddf3>
 801a900:	4602      	mov	r2, r0
 801a902:	460b      	mov	r3, r1
 801a904:	4680      	mov	r8, r0
 801a906:	4689      	mov	r9, r1
 801a908:	4630      	mov	r0, r6
 801a90a:	4639      	mov	r1, r7
 801a90c:	f7e5 fcbc 	bl	8000288 <__aeabi_dsub>
 801a910:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a914:	f7e5 fcba 	bl	800028c <__adddf3>
 801a918:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a91c:	e9ca 0100 	strd	r0, r1, [sl]
 801a920:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801a924:	e756      	b.n	801a7d4 <__kernel_rem_pio2+0x4fc>
 801a926:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a92a:	f7e5 fcaf 	bl	800028c <__adddf3>
 801a92e:	3d01      	subs	r5, #1
 801a930:	e756      	b.n	801a7e0 <__kernel_rem_pio2+0x508>
 801a932:	9b01      	ldr	r3, [sp, #4]
 801a934:	9a01      	ldr	r2, [sp, #4]
 801a936:	601f      	str	r7, [r3, #0]
 801a938:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801a93c:	605c      	str	r4, [r3, #4]
 801a93e:	609d      	str	r5, [r3, #8]
 801a940:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801a944:	60d3      	str	r3, [r2, #12]
 801a946:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a94a:	6110      	str	r0, [r2, #16]
 801a94c:	6153      	str	r3, [r2, #20]
 801a94e:	e78e      	b.n	801a86e <__kernel_rem_pio2+0x596>
 801a950:	41700000 	.word	0x41700000
 801a954:	3e700000 	.word	0x3e700000

0801a958 <__kernel_sin>:
 801a958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a95c:	ec55 4b10 	vmov	r4, r5, d0
 801a960:	b085      	sub	sp, #20
 801a962:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a966:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801a96a:	ed8d 1b00 	vstr	d1, [sp]
 801a96e:	9002      	str	r0, [sp, #8]
 801a970:	da06      	bge.n	801a980 <__kernel_sin+0x28>
 801a972:	ee10 0a10 	vmov	r0, s0
 801a976:	4629      	mov	r1, r5
 801a978:	f7e6 f8ee 	bl	8000b58 <__aeabi_d2iz>
 801a97c:	2800      	cmp	r0, #0
 801a97e:	d051      	beq.n	801aa24 <__kernel_sin+0xcc>
 801a980:	4622      	mov	r2, r4
 801a982:	462b      	mov	r3, r5
 801a984:	4620      	mov	r0, r4
 801a986:	4629      	mov	r1, r5
 801a988:	f7e5 fe36 	bl	80005f8 <__aeabi_dmul>
 801a98c:	4682      	mov	sl, r0
 801a98e:	468b      	mov	fp, r1
 801a990:	4602      	mov	r2, r0
 801a992:	460b      	mov	r3, r1
 801a994:	4620      	mov	r0, r4
 801a996:	4629      	mov	r1, r5
 801a998:	f7e5 fe2e 	bl	80005f8 <__aeabi_dmul>
 801a99c:	a341      	add	r3, pc, #260	; (adr r3, 801aaa4 <__kernel_sin+0x14c>)
 801a99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9a2:	4680      	mov	r8, r0
 801a9a4:	4689      	mov	r9, r1
 801a9a6:	4650      	mov	r0, sl
 801a9a8:	4659      	mov	r1, fp
 801a9aa:	f7e5 fe25 	bl	80005f8 <__aeabi_dmul>
 801a9ae:	a33f      	add	r3, pc, #252	; (adr r3, 801aaac <__kernel_sin+0x154>)
 801a9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9b4:	f7e5 fc68 	bl	8000288 <__aeabi_dsub>
 801a9b8:	4652      	mov	r2, sl
 801a9ba:	465b      	mov	r3, fp
 801a9bc:	f7e5 fe1c 	bl	80005f8 <__aeabi_dmul>
 801a9c0:	a33c      	add	r3, pc, #240	; (adr r3, 801aab4 <__kernel_sin+0x15c>)
 801a9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9c6:	f7e5 fc61 	bl	800028c <__adddf3>
 801a9ca:	4652      	mov	r2, sl
 801a9cc:	465b      	mov	r3, fp
 801a9ce:	f7e5 fe13 	bl	80005f8 <__aeabi_dmul>
 801a9d2:	a33a      	add	r3, pc, #232	; (adr r3, 801aabc <__kernel_sin+0x164>)
 801a9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9d8:	f7e5 fc56 	bl	8000288 <__aeabi_dsub>
 801a9dc:	4652      	mov	r2, sl
 801a9de:	465b      	mov	r3, fp
 801a9e0:	f7e5 fe0a 	bl	80005f8 <__aeabi_dmul>
 801a9e4:	a337      	add	r3, pc, #220	; (adr r3, 801aac4 <__kernel_sin+0x16c>)
 801a9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9ea:	f7e5 fc4f 	bl	800028c <__adddf3>
 801a9ee:	9b02      	ldr	r3, [sp, #8]
 801a9f0:	4606      	mov	r6, r0
 801a9f2:	460f      	mov	r7, r1
 801a9f4:	b9db      	cbnz	r3, 801aa2e <__kernel_sin+0xd6>
 801a9f6:	4602      	mov	r2, r0
 801a9f8:	460b      	mov	r3, r1
 801a9fa:	4650      	mov	r0, sl
 801a9fc:	4659      	mov	r1, fp
 801a9fe:	f7e5 fdfb 	bl	80005f8 <__aeabi_dmul>
 801aa02:	a325      	add	r3, pc, #148	; (adr r3, 801aa98 <__kernel_sin+0x140>)
 801aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa08:	f7e5 fc3e 	bl	8000288 <__aeabi_dsub>
 801aa0c:	4642      	mov	r2, r8
 801aa0e:	464b      	mov	r3, r9
 801aa10:	f7e5 fdf2 	bl	80005f8 <__aeabi_dmul>
 801aa14:	4602      	mov	r2, r0
 801aa16:	460b      	mov	r3, r1
 801aa18:	4620      	mov	r0, r4
 801aa1a:	4629      	mov	r1, r5
 801aa1c:	f7e5 fc36 	bl	800028c <__adddf3>
 801aa20:	4604      	mov	r4, r0
 801aa22:	460d      	mov	r5, r1
 801aa24:	ec45 4b10 	vmov	d0, r4, r5
 801aa28:	b005      	add	sp, #20
 801aa2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa2e:	2200      	movs	r2, #0
 801aa30:	4b1b      	ldr	r3, [pc, #108]	; (801aaa0 <__kernel_sin+0x148>)
 801aa32:	e9dd 0100 	ldrd	r0, r1, [sp]
 801aa36:	f7e5 fddf 	bl	80005f8 <__aeabi_dmul>
 801aa3a:	4632      	mov	r2, r6
 801aa3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801aa40:	463b      	mov	r3, r7
 801aa42:	4640      	mov	r0, r8
 801aa44:	4649      	mov	r1, r9
 801aa46:	f7e5 fdd7 	bl	80005f8 <__aeabi_dmul>
 801aa4a:	4602      	mov	r2, r0
 801aa4c:	460b      	mov	r3, r1
 801aa4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aa52:	f7e5 fc19 	bl	8000288 <__aeabi_dsub>
 801aa56:	4652      	mov	r2, sl
 801aa58:	465b      	mov	r3, fp
 801aa5a:	f7e5 fdcd 	bl	80005f8 <__aeabi_dmul>
 801aa5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801aa62:	f7e5 fc11 	bl	8000288 <__aeabi_dsub>
 801aa66:	a30c      	add	r3, pc, #48	; (adr r3, 801aa98 <__kernel_sin+0x140>)
 801aa68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa6c:	4606      	mov	r6, r0
 801aa6e:	460f      	mov	r7, r1
 801aa70:	4640      	mov	r0, r8
 801aa72:	4649      	mov	r1, r9
 801aa74:	f7e5 fdc0 	bl	80005f8 <__aeabi_dmul>
 801aa78:	4602      	mov	r2, r0
 801aa7a:	460b      	mov	r3, r1
 801aa7c:	4630      	mov	r0, r6
 801aa7e:	4639      	mov	r1, r7
 801aa80:	f7e5 fc04 	bl	800028c <__adddf3>
 801aa84:	4602      	mov	r2, r0
 801aa86:	460b      	mov	r3, r1
 801aa88:	4620      	mov	r0, r4
 801aa8a:	4629      	mov	r1, r5
 801aa8c:	f7e5 fbfc 	bl	8000288 <__aeabi_dsub>
 801aa90:	e7c6      	b.n	801aa20 <__kernel_sin+0xc8>
 801aa92:	bf00      	nop
 801aa94:	f3af 8000 	nop.w
 801aa98:	55555549 	.word	0x55555549
 801aa9c:	3fc55555 	.word	0x3fc55555
 801aaa0:	3fe00000 	.word	0x3fe00000
 801aaa4:	5acfd57c 	.word	0x5acfd57c
 801aaa8:	3de5d93a 	.word	0x3de5d93a
 801aaac:	8a2b9ceb 	.word	0x8a2b9ceb
 801aab0:	3e5ae5e6 	.word	0x3e5ae5e6
 801aab4:	57b1fe7d 	.word	0x57b1fe7d
 801aab8:	3ec71de3 	.word	0x3ec71de3
 801aabc:	19c161d5 	.word	0x19c161d5
 801aac0:	3f2a01a0 	.word	0x3f2a01a0
 801aac4:	1110f8a6 	.word	0x1110f8a6
 801aac8:	3f811111 	.word	0x3f811111
 801aacc:	00000000 	.word	0x00000000

0801aad0 <atan>:
 801aad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aad4:	ec55 4b10 	vmov	r4, r5, d0
 801aad8:	4bc3      	ldr	r3, [pc, #780]	; (801ade8 <atan+0x318>)
 801aada:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801aade:	429e      	cmp	r6, r3
 801aae0:	46ab      	mov	fp, r5
 801aae2:	dd18      	ble.n	801ab16 <atan+0x46>
 801aae4:	4bc1      	ldr	r3, [pc, #772]	; (801adec <atan+0x31c>)
 801aae6:	429e      	cmp	r6, r3
 801aae8:	dc01      	bgt.n	801aaee <atan+0x1e>
 801aaea:	d109      	bne.n	801ab00 <atan+0x30>
 801aaec:	b144      	cbz	r4, 801ab00 <atan+0x30>
 801aaee:	4622      	mov	r2, r4
 801aaf0:	462b      	mov	r3, r5
 801aaf2:	4620      	mov	r0, r4
 801aaf4:	4629      	mov	r1, r5
 801aaf6:	f7e5 fbc9 	bl	800028c <__adddf3>
 801aafa:	4604      	mov	r4, r0
 801aafc:	460d      	mov	r5, r1
 801aafe:	e006      	b.n	801ab0e <atan+0x3e>
 801ab00:	f1bb 0f00 	cmp.w	fp, #0
 801ab04:	f340 8131 	ble.w	801ad6a <atan+0x29a>
 801ab08:	a59b      	add	r5, pc, #620	; (adr r5, 801ad78 <atan+0x2a8>)
 801ab0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ab0e:	ec45 4b10 	vmov	d0, r4, r5
 801ab12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab16:	4bb6      	ldr	r3, [pc, #728]	; (801adf0 <atan+0x320>)
 801ab18:	429e      	cmp	r6, r3
 801ab1a:	dc14      	bgt.n	801ab46 <atan+0x76>
 801ab1c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801ab20:	429e      	cmp	r6, r3
 801ab22:	dc0d      	bgt.n	801ab40 <atan+0x70>
 801ab24:	a396      	add	r3, pc, #600	; (adr r3, 801ad80 <atan+0x2b0>)
 801ab26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab2a:	ee10 0a10 	vmov	r0, s0
 801ab2e:	4629      	mov	r1, r5
 801ab30:	f7e5 fbac 	bl	800028c <__adddf3>
 801ab34:	2200      	movs	r2, #0
 801ab36:	4baf      	ldr	r3, [pc, #700]	; (801adf4 <atan+0x324>)
 801ab38:	f7e5 ffee 	bl	8000b18 <__aeabi_dcmpgt>
 801ab3c:	2800      	cmp	r0, #0
 801ab3e:	d1e6      	bne.n	801ab0e <atan+0x3e>
 801ab40:	f04f 3aff 	mov.w	sl, #4294967295
 801ab44:	e02b      	b.n	801ab9e <atan+0xce>
 801ab46:	f000 f963 	bl	801ae10 <fabs>
 801ab4a:	4bab      	ldr	r3, [pc, #684]	; (801adf8 <atan+0x328>)
 801ab4c:	429e      	cmp	r6, r3
 801ab4e:	ec55 4b10 	vmov	r4, r5, d0
 801ab52:	f300 80bf 	bgt.w	801acd4 <atan+0x204>
 801ab56:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801ab5a:	429e      	cmp	r6, r3
 801ab5c:	f300 80a0 	bgt.w	801aca0 <atan+0x1d0>
 801ab60:	ee10 2a10 	vmov	r2, s0
 801ab64:	ee10 0a10 	vmov	r0, s0
 801ab68:	462b      	mov	r3, r5
 801ab6a:	4629      	mov	r1, r5
 801ab6c:	f7e5 fb8e 	bl	800028c <__adddf3>
 801ab70:	2200      	movs	r2, #0
 801ab72:	4ba0      	ldr	r3, [pc, #640]	; (801adf4 <atan+0x324>)
 801ab74:	f7e5 fb88 	bl	8000288 <__aeabi_dsub>
 801ab78:	2200      	movs	r2, #0
 801ab7a:	4606      	mov	r6, r0
 801ab7c:	460f      	mov	r7, r1
 801ab7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ab82:	4620      	mov	r0, r4
 801ab84:	4629      	mov	r1, r5
 801ab86:	f7e5 fb81 	bl	800028c <__adddf3>
 801ab8a:	4602      	mov	r2, r0
 801ab8c:	460b      	mov	r3, r1
 801ab8e:	4630      	mov	r0, r6
 801ab90:	4639      	mov	r1, r7
 801ab92:	f7e5 fe5b 	bl	800084c <__aeabi_ddiv>
 801ab96:	f04f 0a00 	mov.w	sl, #0
 801ab9a:	4604      	mov	r4, r0
 801ab9c:	460d      	mov	r5, r1
 801ab9e:	4622      	mov	r2, r4
 801aba0:	462b      	mov	r3, r5
 801aba2:	4620      	mov	r0, r4
 801aba4:	4629      	mov	r1, r5
 801aba6:	f7e5 fd27 	bl	80005f8 <__aeabi_dmul>
 801abaa:	4602      	mov	r2, r0
 801abac:	460b      	mov	r3, r1
 801abae:	4680      	mov	r8, r0
 801abb0:	4689      	mov	r9, r1
 801abb2:	f7e5 fd21 	bl	80005f8 <__aeabi_dmul>
 801abb6:	a374      	add	r3, pc, #464	; (adr r3, 801ad88 <atan+0x2b8>)
 801abb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abbc:	4606      	mov	r6, r0
 801abbe:	460f      	mov	r7, r1
 801abc0:	f7e5 fd1a 	bl	80005f8 <__aeabi_dmul>
 801abc4:	a372      	add	r3, pc, #456	; (adr r3, 801ad90 <atan+0x2c0>)
 801abc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abca:	f7e5 fb5f 	bl	800028c <__adddf3>
 801abce:	4632      	mov	r2, r6
 801abd0:	463b      	mov	r3, r7
 801abd2:	f7e5 fd11 	bl	80005f8 <__aeabi_dmul>
 801abd6:	a370      	add	r3, pc, #448	; (adr r3, 801ad98 <atan+0x2c8>)
 801abd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abdc:	f7e5 fb56 	bl	800028c <__adddf3>
 801abe0:	4632      	mov	r2, r6
 801abe2:	463b      	mov	r3, r7
 801abe4:	f7e5 fd08 	bl	80005f8 <__aeabi_dmul>
 801abe8:	a36d      	add	r3, pc, #436	; (adr r3, 801ada0 <atan+0x2d0>)
 801abea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abee:	f7e5 fb4d 	bl	800028c <__adddf3>
 801abf2:	4632      	mov	r2, r6
 801abf4:	463b      	mov	r3, r7
 801abf6:	f7e5 fcff 	bl	80005f8 <__aeabi_dmul>
 801abfa:	a36b      	add	r3, pc, #428	; (adr r3, 801ada8 <atan+0x2d8>)
 801abfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac00:	f7e5 fb44 	bl	800028c <__adddf3>
 801ac04:	4632      	mov	r2, r6
 801ac06:	463b      	mov	r3, r7
 801ac08:	f7e5 fcf6 	bl	80005f8 <__aeabi_dmul>
 801ac0c:	a368      	add	r3, pc, #416	; (adr r3, 801adb0 <atan+0x2e0>)
 801ac0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac12:	f7e5 fb3b 	bl	800028c <__adddf3>
 801ac16:	4642      	mov	r2, r8
 801ac18:	464b      	mov	r3, r9
 801ac1a:	f7e5 fced 	bl	80005f8 <__aeabi_dmul>
 801ac1e:	a366      	add	r3, pc, #408	; (adr r3, 801adb8 <atan+0x2e8>)
 801ac20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac24:	4680      	mov	r8, r0
 801ac26:	4689      	mov	r9, r1
 801ac28:	4630      	mov	r0, r6
 801ac2a:	4639      	mov	r1, r7
 801ac2c:	f7e5 fce4 	bl	80005f8 <__aeabi_dmul>
 801ac30:	a363      	add	r3, pc, #396	; (adr r3, 801adc0 <atan+0x2f0>)
 801ac32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac36:	f7e5 fb27 	bl	8000288 <__aeabi_dsub>
 801ac3a:	4632      	mov	r2, r6
 801ac3c:	463b      	mov	r3, r7
 801ac3e:	f7e5 fcdb 	bl	80005f8 <__aeabi_dmul>
 801ac42:	a361      	add	r3, pc, #388	; (adr r3, 801adc8 <atan+0x2f8>)
 801ac44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac48:	f7e5 fb1e 	bl	8000288 <__aeabi_dsub>
 801ac4c:	4632      	mov	r2, r6
 801ac4e:	463b      	mov	r3, r7
 801ac50:	f7e5 fcd2 	bl	80005f8 <__aeabi_dmul>
 801ac54:	a35e      	add	r3, pc, #376	; (adr r3, 801add0 <atan+0x300>)
 801ac56:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac5a:	f7e5 fb15 	bl	8000288 <__aeabi_dsub>
 801ac5e:	4632      	mov	r2, r6
 801ac60:	463b      	mov	r3, r7
 801ac62:	f7e5 fcc9 	bl	80005f8 <__aeabi_dmul>
 801ac66:	a35c      	add	r3, pc, #368	; (adr r3, 801add8 <atan+0x308>)
 801ac68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac6c:	f7e5 fb0c 	bl	8000288 <__aeabi_dsub>
 801ac70:	4632      	mov	r2, r6
 801ac72:	463b      	mov	r3, r7
 801ac74:	f7e5 fcc0 	bl	80005f8 <__aeabi_dmul>
 801ac78:	4602      	mov	r2, r0
 801ac7a:	460b      	mov	r3, r1
 801ac7c:	4640      	mov	r0, r8
 801ac7e:	4649      	mov	r1, r9
 801ac80:	f7e5 fb04 	bl	800028c <__adddf3>
 801ac84:	4622      	mov	r2, r4
 801ac86:	462b      	mov	r3, r5
 801ac88:	f7e5 fcb6 	bl	80005f8 <__aeabi_dmul>
 801ac8c:	f1ba 3fff 	cmp.w	sl, #4294967295
 801ac90:	4602      	mov	r2, r0
 801ac92:	460b      	mov	r3, r1
 801ac94:	d14b      	bne.n	801ad2e <atan+0x25e>
 801ac96:	4620      	mov	r0, r4
 801ac98:	4629      	mov	r1, r5
 801ac9a:	f7e5 faf5 	bl	8000288 <__aeabi_dsub>
 801ac9e:	e72c      	b.n	801aafa <atan+0x2a>
 801aca0:	ee10 0a10 	vmov	r0, s0
 801aca4:	2200      	movs	r2, #0
 801aca6:	4b53      	ldr	r3, [pc, #332]	; (801adf4 <atan+0x324>)
 801aca8:	4629      	mov	r1, r5
 801acaa:	f7e5 faed 	bl	8000288 <__aeabi_dsub>
 801acae:	2200      	movs	r2, #0
 801acb0:	4606      	mov	r6, r0
 801acb2:	460f      	mov	r7, r1
 801acb4:	4b4f      	ldr	r3, [pc, #316]	; (801adf4 <atan+0x324>)
 801acb6:	4620      	mov	r0, r4
 801acb8:	4629      	mov	r1, r5
 801acba:	f7e5 fae7 	bl	800028c <__adddf3>
 801acbe:	4602      	mov	r2, r0
 801acc0:	460b      	mov	r3, r1
 801acc2:	4630      	mov	r0, r6
 801acc4:	4639      	mov	r1, r7
 801acc6:	f7e5 fdc1 	bl	800084c <__aeabi_ddiv>
 801acca:	f04f 0a01 	mov.w	sl, #1
 801acce:	4604      	mov	r4, r0
 801acd0:	460d      	mov	r5, r1
 801acd2:	e764      	b.n	801ab9e <atan+0xce>
 801acd4:	4b49      	ldr	r3, [pc, #292]	; (801adfc <atan+0x32c>)
 801acd6:	429e      	cmp	r6, r3
 801acd8:	dc1d      	bgt.n	801ad16 <atan+0x246>
 801acda:	ee10 0a10 	vmov	r0, s0
 801acde:	2200      	movs	r2, #0
 801ace0:	4b47      	ldr	r3, [pc, #284]	; (801ae00 <atan+0x330>)
 801ace2:	4629      	mov	r1, r5
 801ace4:	f7e5 fad0 	bl	8000288 <__aeabi_dsub>
 801ace8:	2200      	movs	r2, #0
 801acea:	4606      	mov	r6, r0
 801acec:	460f      	mov	r7, r1
 801acee:	4b44      	ldr	r3, [pc, #272]	; (801ae00 <atan+0x330>)
 801acf0:	4620      	mov	r0, r4
 801acf2:	4629      	mov	r1, r5
 801acf4:	f7e5 fc80 	bl	80005f8 <__aeabi_dmul>
 801acf8:	2200      	movs	r2, #0
 801acfa:	4b3e      	ldr	r3, [pc, #248]	; (801adf4 <atan+0x324>)
 801acfc:	f7e5 fac6 	bl	800028c <__adddf3>
 801ad00:	4602      	mov	r2, r0
 801ad02:	460b      	mov	r3, r1
 801ad04:	4630      	mov	r0, r6
 801ad06:	4639      	mov	r1, r7
 801ad08:	f7e5 fda0 	bl	800084c <__aeabi_ddiv>
 801ad0c:	f04f 0a02 	mov.w	sl, #2
 801ad10:	4604      	mov	r4, r0
 801ad12:	460d      	mov	r5, r1
 801ad14:	e743      	b.n	801ab9e <atan+0xce>
 801ad16:	462b      	mov	r3, r5
 801ad18:	ee10 2a10 	vmov	r2, s0
 801ad1c:	2000      	movs	r0, #0
 801ad1e:	4939      	ldr	r1, [pc, #228]	; (801ae04 <atan+0x334>)
 801ad20:	f7e5 fd94 	bl	800084c <__aeabi_ddiv>
 801ad24:	f04f 0a03 	mov.w	sl, #3
 801ad28:	4604      	mov	r4, r0
 801ad2a:	460d      	mov	r5, r1
 801ad2c:	e737      	b.n	801ab9e <atan+0xce>
 801ad2e:	4b36      	ldr	r3, [pc, #216]	; (801ae08 <atan+0x338>)
 801ad30:	4e36      	ldr	r6, [pc, #216]	; (801ae0c <atan+0x33c>)
 801ad32:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801ad36:	4456      	add	r6, sl
 801ad38:	449a      	add	sl, r3
 801ad3a:	e9da 2300 	ldrd	r2, r3, [sl]
 801ad3e:	f7e5 faa3 	bl	8000288 <__aeabi_dsub>
 801ad42:	4622      	mov	r2, r4
 801ad44:	462b      	mov	r3, r5
 801ad46:	f7e5 fa9f 	bl	8000288 <__aeabi_dsub>
 801ad4a:	4602      	mov	r2, r0
 801ad4c:	460b      	mov	r3, r1
 801ad4e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801ad52:	f7e5 fa99 	bl	8000288 <__aeabi_dsub>
 801ad56:	f1bb 0f00 	cmp.w	fp, #0
 801ad5a:	4604      	mov	r4, r0
 801ad5c:	460d      	mov	r5, r1
 801ad5e:	f6bf aed6 	bge.w	801ab0e <atan+0x3e>
 801ad62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ad66:	461d      	mov	r5, r3
 801ad68:	e6d1      	b.n	801ab0e <atan+0x3e>
 801ad6a:	a51d      	add	r5, pc, #116	; (adr r5, 801ade0 <atan+0x310>)
 801ad6c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ad70:	e6cd      	b.n	801ab0e <atan+0x3e>
 801ad72:	bf00      	nop
 801ad74:	f3af 8000 	nop.w
 801ad78:	54442d18 	.word	0x54442d18
 801ad7c:	3ff921fb 	.word	0x3ff921fb
 801ad80:	8800759c 	.word	0x8800759c
 801ad84:	7e37e43c 	.word	0x7e37e43c
 801ad88:	e322da11 	.word	0xe322da11
 801ad8c:	3f90ad3a 	.word	0x3f90ad3a
 801ad90:	24760deb 	.word	0x24760deb
 801ad94:	3fa97b4b 	.word	0x3fa97b4b
 801ad98:	a0d03d51 	.word	0xa0d03d51
 801ad9c:	3fb10d66 	.word	0x3fb10d66
 801ada0:	c54c206e 	.word	0xc54c206e
 801ada4:	3fb745cd 	.word	0x3fb745cd
 801ada8:	920083ff 	.word	0x920083ff
 801adac:	3fc24924 	.word	0x3fc24924
 801adb0:	5555550d 	.word	0x5555550d
 801adb4:	3fd55555 	.word	0x3fd55555
 801adb8:	2c6a6c2f 	.word	0x2c6a6c2f
 801adbc:	bfa2b444 	.word	0xbfa2b444
 801adc0:	52defd9a 	.word	0x52defd9a
 801adc4:	3fadde2d 	.word	0x3fadde2d
 801adc8:	af749a6d 	.word	0xaf749a6d
 801adcc:	3fb3b0f2 	.word	0x3fb3b0f2
 801add0:	fe231671 	.word	0xfe231671
 801add4:	3fbc71c6 	.word	0x3fbc71c6
 801add8:	9998ebc4 	.word	0x9998ebc4
 801addc:	3fc99999 	.word	0x3fc99999
 801ade0:	54442d18 	.word	0x54442d18
 801ade4:	bff921fb 	.word	0xbff921fb
 801ade8:	440fffff 	.word	0x440fffff
 801adec:	7ff00000 	.word	0x7ff00000
 801adf0:	3fdbffff 	.word	0x3fdbffff
 801adf4:	3ff00000 	.word	0x3ff00000
 801adf8:	3ff2ffff 	.word	0x3ff2ffff
 801adfc:	40037fff 	.word	0x40037fff
 801ae00:	3ff80000 	.word	0x3ff80000
 801ae04:	bff00000 	.word	0xbff00000
 801ae08:	0801b760 	.word	0x0801b760
 801ae0c:	0801b740 	.word	0x0801b740

0801ae10 <fabs>:
 801ae10:	ec51 0b10 	vmov	r0, r1, d0
 801ae14:	ee10 2a10 	vmov	r2, s0
 801ae18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ae1c:	ec43 2b10 	vmov	d0, r2, r3
 801ae20:	4770      	bx	lr
 801ae22:	0000      	movs	r0, r0
 801ae24:	0000      	movs	r0, r0
	...

0801ae28 <floor>:
 801ae28:	ec51 0b10 	vmov	r0, r1, d0
 801ae2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae30:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801ae34:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801ae38:	2e13      	cmp	r6, #19
 801ae3a:	460c      	mov	r4, r1
 801ae3c:	ee10 5a10 	vmov	r5, s0
 801ae40:	4680      	mov	r8, r0
 801ae42:	dc34      	bgt.n	801aeae <floor+0x86>
 801ae44:	2e00      	cmp	r6, #0
 801ae46:	da16      	bge.n	801ae76 <floor+0x4e>
 801ae48:	a335      	add	r3, pc, #212	; (adr r3, 801af20 <floor+0xf8>)
 801ae4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae4e:	f7e5 fa1d 	bl	800028c <__adddf3>
 801ae52:	2200      	movs	r2, #0
 801ae54:	2300      	movs	r3, #0
 801ae56:	f7e5 fe5f 	bl	8000b18 <__aeabi_dcmpgt>
 801ae5a:	b148      	cbz	r0, 801ae70 <floor+0x48>
 801ae5c:	2c00      	cmp	r4, #0
 801ae5e:	da59      	bge.n	801af14 <floor+0xec>
 801ae60:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801ae64:	4a30      	ldr	r2, [pc, #192]	; (801af28 <floor+0x100>)
 801ae66:	432b      	orrs	r3, r5
 801ae68:	2500      	movs	r5, #0
 801ae6a:	42ab      	cmp	r3, r5
 801ae6c:	bf18      	it	ne
 801ae6e:	4614      	movne	r4, r2
 801ae70:	4621      	mov	r1, r4
 801ae72:	4628      	mov	r0, r5
 801ae74:	e025      	b.n	801aec2 <floor+0x9a>
 801ae76:	4f2d      	ldr	r7, [pc, #180]	; (801af2c <floor+0x104>)
 801ae78:	4137      	asrs	r7, r6
 801ae7a:	ea01 0307 	and.w	r3, r1, r7
 801ae7e:	4303      	orrs	r3, r0
 801ae80:	d01f      	beq.n	801aec2 <floor+0x9a>
 801ae82:	a327      	add	r3, pc, #156	; (adr r3, 801af20 <floor+0xf8>)
 801ae84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae88:	f7e5 fa00 	bl	800028c <__adddf3>
 801ae8c:	2200      	movs	r2, #0
 801ae8e:	2300      	movs	r3, #0
 801ae90:	f7e5 fe42 	bl	8000b18 <__aeabi_dcmpgt>
 801ae94:	2800      	cmp	r0, #0
 801ae96:	d0eb      	beq.n	801ae70 <floor+0x48>
 801ae98:	2c00      	cmp	r4, #0
 801ae9a:	bfbe      	ittt	lt
 801ae9c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801aea0:	fa43 f606 	asrlt.w	r6, r3, r6
 801aea4:	19a4      	addlt	r4, r4, r6
 801aea6:	ea24 0407 	bic.w	r4, r4, r7
 801aeaa:	2500      	movs	r5, #0
 801aeac:	e7e0      	b.n	801ae70 <floor+0x48>
 801aeae:	2e33      	cmp	r6, #51	; 0x33
 801aeb0:	dd0b      	ble.n	801aeca <floor+0xa2>
 801aeb2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801aeb6:	d104      	bne.n	801aec2 <floor+0x9a>
 801aeb8:	ee10 2a10 	vmov	r2, s0
 801aebc:	460b      	mov	r3, r1
 801aebe:	f7e5 f9e5 	bl	800028c <__adddf3>
 801aec2:	ec41 0b10 	vmov	d0, r0, r1
 801aec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aeca:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801aece:	f04f 33ff 	mov.w	r3, #4294967295
 801aed2:	fa23 f707 	lsr.w	r7, r3, r7
 801aed6:	4207      	tst	r7, r0
 801aed8:	d0f3      	beq.n	801aec2 <floor+0x9a>
 801aeda:	a311      	add	r3, pc, #68	; (adr r3, 801af20 <floor+0xf8>)
 801aedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aee0:	f7e5 f9d4 	bl	800028c <__adddf3>
 801aee4:	2200      	movs	r2, #0
 801aee6:	2300      	movs	r3, #0
 801aee8:	f7e5 fe16 	bl	8000b18 <__aeabi_dcmpgt>
 801aeec:	2800      	cmp	r0, #0
 801aeee:	d0bf      	beq.n	801ae70 <floor+0x48>
 801aef0:	2c00      	cmp	r4, #0
 801aef2:	da02      	bge.n	801aefa <floor+0xd2>
 801aef4:	2e14      	cmp	r6, #20
 801aef6:	d103      	bne.n	801af00 <floor+0xd8>
 801aef8:	3401      	adds	r4, #1
 801aefa:	ea25 0507 	bic.w	r5, r5, r7
 801aefe:	e7b7      	b.n	801ae70 <floor+0x48>
 801af00:	2301      	movs	r3, #1
 801af02:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801af06:	fa03 f606 	lsl.w	r6, r3, r6
 801af0a:	4435      	add	r5, r6
 801af0c:	4545      	cmp	r5, r8
 801af0e:	bf38      	it	cc
 801af10:	18e4      	addcc	r4, r4, r3
 801af12:	e7f2      	b.n	801aefa <floor+0xd2>
 801af14:	2500      	movs	r5, #0
 801af16:	462c      	mov	r4, r5
 801af18:	e7aa      	b.n	801ae70 <floor+0x48>
 801af1a:	bf00      	nop
 801af1c:	f3af 8000 	nop.w
 801af20:	8800759c 	.word	0x8800759c
 801af24:	7e37e43c 	.word	0x7e37e43c
 801af28:	bff00000 	.word	0xbff00000
 801af2c:	000fffff 	.word	0x000fffff

0801af30 <matherr>:
 801af30:	2000      	movs	r0, #0
 801af32:	4770      	bx	lr
 801af34:	0000      	movs	r0, r0
	...

0801af38 <scalbn>:
 801af38:	b570      	push	{r4, r5, r6, lr}
 801af3a:	ec55 4b10 	vmov	r4, r5, d0
 801af3e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801af42:	4606      	mov	r6, r0
 801af44:	462b      	mov	r3, r5
 801af46:	b9aa      	cbnz	r2, 801af74 <scalbn+0x3c>
 801af48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801af4c:	4323      	orrs	r3, r4
 801af4e:	d03b      	beq.n	801afc8 <scalbn+0x90>
 801af50:	4b31      	ldr	r3, [pc, #196]	; (801b018 <scalbn+0xe0>)
 801af52:	4629      	mov	r1, r5
 801af54:	2200      	movs	r2, #0
 801af56:	ee10 0a10 	vmov	r0, s0
 801af5a:	f7e5 fb4d 	bl	80005f8 <__aeabi_dmul>
 801af5e:	4b2f      	ldr	r3, [pc, #188]	; (801b01c <scalbn+0xe4>)
 801af60:	429e      	cmp	r6, r3
 801af62:	4604      	mov	r4, r0
 801af64:	460d      	mov	r5, r1
 801af66:	da12      	bge.n	801af8e <scalbn+0x56>
 801af68:	a327      	add	r3, pc, #156	; (adr r3, 801b008 <scalbn+0xd0>)
 801af6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af6e:	f7e5 fb43 	bl	80005f8 <__aeabi_dmul>
 801af72:	e009      	b.n	801af88 <scalbn+0x50>
 801af74:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801af78:	428a      	cmp	r2, r1
 801af7a:	d10c      	bne.n	801af96 <scalbn+0x5e>
 801af7c:	ee10 2a10 	vmov	r2, s0
 801af80:	4620      	mov	r0, r4
 801af82:	4629      	mov	r1, r5
 801af84:	f7e5 f982 	bl	800028c <__adddf3>
 801af88:	4604      	mov	r4, r0
 801af8a:	460d      	mov	r5, r1
 801af8c:	e01c      	b.n	801afc8 <scalbn+0x90>
 801af8e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801af92:	460b      	mov	r3, r1
 801af94:	3a36      	subs	r2, #54	; 0x36
 801af96:	4432      	add	r2, r6
 801af98:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801af9c:	428a      	cmp	r2, r1
 801af9e:	dd0b      	ble.n	801afb8 <scalbn+0x80>
 801afa0:	ec45 4b11 	vmov	d1, r4, r5
 801afa4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801b010 <scalbn+0xd8>
 801afa8:	f000 f83c 	bl	801b024 <copysign>
 801afac:	a318      	add	r3, pc, #96	; (adr r3, 801b010 <scalbn+0xd8>)
 801afae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afb2:	ec51 0b10 	vmov	r0, r1, d0
 801afb6:	e7da      	b.n	801af6e <scalbn+0x36>
 801afb8:	2a00      	cmp	r2, #0
 801afba:	dd08      	ble.n	801afce <scalbn+0x96>
 801afbc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801afc0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801afc4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801afc8:	ec45 4b10 	vmov	d0, r4, r5
 801afcc:	bd70      	pop	{r4, r5, r6, pc}
 801afce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801afd2:	da0d      	bge.n	801aff0 <scalbn+0xb8>
 801afd4:	f24c 3350 	movw	r3, #50000	; 0xc350
 801afd8:	429e      	cmp	r6, r3
 801afda:	ec45 4b11 	vmov	d1, r4, r5
 801afde:	dce1      	bgt.n	801afa4 <scalbn+0x6c>
 801afe0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801b008 <scalbn+0xd0>
 801afe4:	f000 f81e 	bl	801b024 <copysign>
 801afe8:	a307      	add	r3, pc, #28	; (adr r3, 801b008 <scalbn+0xd0>)
 801afea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afee:	e7e0      	b.n	801afb2 <scalbn+0x7a>
 801aff0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801aff4:	3236      	adds	r2, #54	; 0x36
 801aff6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801affa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801affe:	4620      	mov	r0, r4
 801b000:	4629      	mov	r1, r5
 801b002:	2200      	movs	r2, #0
 801b004:	4b06      	ldr	r3, [pc, #24]	; (801b020 <scalbn+0xe8>)
 801b006:	e7b2      	b.n	801af6e <scalbn+0x36>
 801b008:	c2f8f359 	.word	0xc2f8f359
 801b00c:	01a56e1f 	.word	0x01a56e1f
 801b010:	8800759c 	.word	0x8800759c
 801b014:	7e37e43c 	.word	0x7e37e43c
 801b018:	43500000 	.word	0x43500000
 801b01c:	ffff3cb0 	.word	0xffff3cb0
 801b020:	3c900000 	.word	0x3c900000

0801b024 <copysign>:
 801b024:	ec51 0b10 	vmov	r0, r1, d0
 801b028:	ee11 0a90 	vmov	r0, s3
 801b02c:	ee10 2a10 	vmov	r2, s0
 801b030:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b034:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801b038:	ea41 0300 	orr.w	r3, r1, r0
 801b03c:	ec43 2b10 	vmov	d0, r2, r3
 801b040:	4770      	bx	lr
	...

0801b044 <_init>:
 801b044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b046:	bf00      	nop
 801b048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b04a:	bc08      	pop	{r3}
 801b04c:	469e      	mov	lr, r3
 801b04e:	4770      	bx	lr

0801b050 <_fini>:
 801b050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b052:	bf00      	nop
 801b054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b056:	bc08      	pop	{r3}
 801b058:	469e      	mov	lr, r3
 801b05a:	4770      	bx	lr
